void sub_20FC4F7C0(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x5B48]))
  {
    if (SLOBYTE(STACK[0x5B47]) < 0)
      operator delete((void *)STACK[0x5B30]);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0x27C0]);
  sub_20E86665C((uint64_t)&STACK[0x750]);
  sub_20E86665C((uint64_t)&STACK[0x760]);
  _Unwind_Resume(a1);
}

void sub_20FC4F988(_Unwind_Exception *a1)
{
  sub_20E86665C((uint64_t)&STACK[0x750]);
  sub_20E86665C((uint64_t)&STACK[0x760]);
  _Unwind_Resume(a1);
}

void sub_20FC4F9BC(_Unwind_Exception *a1)
{
  sub_20E86665C((uint64_t)&STACK[0x4F18]);
  _Unwind_Resume(a1);
}

void sub_20FC4F9E0(uint64_t a1, uint64_t a2, _QWORD *a3, unint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  char *v13;
  char *v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  char *v21;
  int64_t v22;
  unint64_t v23;
  char *v24;
  int v25;
  _QWORD *v26;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  char *v32;
  uint64_t v33;
  __int128 v34;
  size_t v35;
  double *v36;
  char *v37;
  __int128 v38;
  double v39;
  double v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  char *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  __int32 v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  unsigned int v57;
  _BYTE *v58;
  unint64_t v59;
  unint64_t v60;
  _DWORD *v61;
  _BYTE *v62;
  unsigned int v63;
  unint64_t v64;
  unsigned int v65;
  uint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t *v72;
  double v73;
  int v74;
  double v75;
  int32x2_t v76;
  double v77;
  double v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t *v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  float32x2_t v91;
  float v92;
  float64x2_t v93;
  float32x2_t v94;
  float32x2_t v95;
  float v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  __int32 *v106;
  __int32 *v107;
  __int32 *v108;
  unint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  unint64_t v120;
  double *v121;
  double *v122;
  char *v123;
  double *v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  const std::nothrow_t *v134;
  unint64_t v135;
  double *v136;
  BOOL v137;
  double v138;
  double *v139;
  uint64_t v140;
  unint64_t v141;
  double *v142;
  const std::nothrow_t *v143;
  unint64_t v144;
  double *v145;
  _BYTE *v146;
  double *v147;
  double **v148;
  uint64_t v149;
  float64_t v150;
  unint64_t v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  double v158;
  void *__p;
  _BYTE *v161;
  char *v162;
  void *v163;
  __int32 *v164;
  char *v165;

  v6 = a3[3];
  v5 = a3[4];
  v7 = v5 - v6;
  if ((v5 - v6) >> 3 <= a4
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOTrackClassifier.h", 84, (uint64_t)"num_frontend_tracks_to_keep < num_frontend_tracks", 49, (uint64_t)"Pruning tracks not required.", 28, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v163 = 0;
  v164 = 0;
  v165 = 0;
  v8 = (_QWORD *)a3[1];
  v9 = v8[39];
  v154 = (v5 - v6) >> 3;
  v157 = v6;
  if (!v9)
  {
    v11 = 0;
    v10 = 0;
    v12 = (_QWORD *)v8[37];
    v156 = a2;
    if (v12 == v8 + 38)
      goto LABEL_49;
    goto LABEL_8;
  }
  if (v9 >> 62)
    sub_20E867F44();
  v10 = (char *)operator new(4 * v9);
  v11 = &v10[4 * v9];
  v163 = v10;
  v164 = (__int32 *)v10;
  v165 = v11;
  v12 = (_QWORD *)v8[37];
  v156 = a2;
  if (v12 != v8 + 38)
  {
LABEL_8:
    v149 = v5;
    v152 = v7;
    v13 = v10;
    v14 = v10;
    while (1)
    {
      if (!(unsigned __int16)*((_DWORD *)v12 + 8))
        goto LABEL_13;
      v15 = HIWORD(*((_DWORD *)v12 + 8));
      if (v13 < v11)
      {
        *(_DWORD *)v13 = v15;
        v13 += 4;
        v10 = v13;
        a2 = v156;
LABEL_13:
        v16 = (_QWORD *)v12[1];
        if (v16)
          goto LABEL_30;
        goto LABEL_32;
      }
      v17 = (v13 - v14) >> 2;
      v18 = v17 + 1;
      if ((unint64_t)(v17 + 1) >> 62)
      {
        v164 = (__int32 *)v10;
        sub_20E867F44();
      }
      if ((v11 - v14) >> 1 > v18)
        v18 = (v11 - v14) >> 1;
      if ((unint64_t)(v11 - v14) >= 0x7FFFFFFFFFFFFFFCLL)
        v19 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v19 = v18;
      if (v19)
      {
        if (v19 >> 62)
        {
          v164 = (__int32 *)v10;
          sub_20E877A38();
        }
        v20 = operator new(4 * v19);
        v21 = &v20[4 * v17];
        *(_DWORD *)v21 = v15;
        v10 = v21 + 4;
        v22 = v13 - v14;
        if (v13 != v14)
        {
LABEL_24:
          v23 = v22 - 4;
          a2 = v156;
          if (v23 < 0xBC)
          {
            v24 = v13;
            goto LABEL_26;
          }
          v28 = (v13 - 4 - v14) & 0xFFFFFFFFFFFFFFFCLL;
          if (&v20[v13 - v14 - 4 - v28] > &v20[v13 - v14 - 4])
          {
            v24 = v13;
            goto LABEL_26;
          }
          if (&v13[-v28 - 4] > v13 - 4)
          {
            v24 = v13;
            goto LABEL_26;
          }
          if ((unint64_t)(v14 - v20) < 0x20)
          {
            v24 = v13;
            goto LABEL_26;
          }
          v29 = (v23 >> 2) + 1;
          v30 = 4 * (v29 & 0x7FFFFFFFFFFFFFF8);
          v24 = &v13[-v30];
          v21 -= v30;
          v31 = &v20[4 * v17 - 16];
          v32 = v13 - 16;
          v33 = v29 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v34 = *(_OWORD *)v32;
            *(v31 - 1) = *((_OWORD *)v32 - 1);
            *v31 = v34;
            v31 -= 2;
            v32 -= 32;
            v33 -= 8;
          }
          while (v33);
          if (v29 != (v29 & 0x7FFFFFFFFFFFFFF8))
          {
            do
            {
LABEL_26:
              v25 = *((_DWORD *)v24 - 1);
              v24 -= 4;
              *((_DWORD *)v21 - 1) = v25;
              v21 -= 4;
            }
            while (v24 != v14);
          }
          v11 = &v20[4 * v19];
          v163 = v21;
          v165 = v11;
          if (!v14)
            goto LABEL_29;
LABEL_28:
          operator delete(v14);
          goto LABEL_29;
        }
      }
      else
      {
        v20 = 0;
        v21 = (char *)(4 * v17);
        *(_DWORD *)(4 * v17) = v15;
        v10 = (char *)(4 * v17 + 4);
        v22 = v13 - v14;
        if (v13 != v14)
          goto LABEL_24;
      }
      a2 = v156;
      v11 = &v20[4 * v19];
      v163 = v21;
      v165 = v11;
      if (v14)
        goto LABEL_28;
LABEL_29:
      v13 = v10;
      v14 = v21;
      v16 = (_QWORD *)v12[1];
      if (v16)
      {
        do
        {
LABEL_30:
          v26 = v16;
          v16 = (_QWORD *)*v16;
        }
        while (v16);
        goto LABEL_9;
      }
      do
      {
LABEL_32:
        v26 = (_QWORD *)v12[2];
        _ZF = *v26 == (_QWORD)v12;
        v12 = v26;
      }
      while (!_ZF);
LABEL_9:
      v8 = (_QWORD *)a3[1];
      v12 = v26;
      if (v26 == v8 + 38)
      {
        v164 = (__int32 *)v10;
        v7 = v152;
        v5 = v149;
        break;
      }
    }
  }
LABEL_49:
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  if (v5 == v157)
  {
    v36 = 0;
    v148 = (double **)(a1 + 24);
  }
  else
  {
    if (v7 >= 0x7FFFFFFFFFFFFFF9)
      sub_20E867F44();
    v35 = 2 * v7;
    v36 = (double *)operator new(v35);
    *(_QWORD *)a1 = v36;
    *(_QWORD *)(a1 + 8) = v36;
    *(_QWORD *)(a1 + 16) = &v36[2 * v154];
    v37 = (char *)operator new(v35);
    *(_QWORD *)(a1 + 24) = v37;
    *(_QWORD *)(a1 + 32) = v37;
    v148 = (double **)(a1 + 24);
    *(_QWORD *)(a1 + 40) = &v37[16 * v154];
  }
  __p = operator new(0x10uLL);
  v161 = __p;
  v162 = (char *)__p + 16;
  v41 = (uint64_t *)a3[3];
  v42 = (uint64_t)v36;
  v155 = (uint64_t *)a3[4];
  if (v41 != v155)
  {
    v153 = (uint64_t *)v8[6];
    v43 = (uint64_t *)a1;
    while (1)
    {
      v47 = *(_QWORD *)(*v41 + 496);
      v48 = *(unsigned __int16 *)(v47 + 18);
      v49 = (unint64_t)(*(_QWORD *)(*v41 + 504) - v47) >> 6;
      if (!(_DWORD)v49)
      {
        v73 = -1000.0;
        v74 = *(_DWORD *)(*v41 + 32);
        if (!*(_BYTE *)(a2 + 48))
          goto LABEL_154;
        goto LABEL_150;
      }
      v161 = __p;
      v50 = *v41;
      v52 = *(uint64_t **)(*v41 + 496);
      v51 = *(uint64_t **)(*v41 + 504);
      if (v52 != v51)
        break;
      v53 = a3[1];
      v54 = (uint64_t *)(v53 + 56);
      v55 = *(uint64_t **)(v53 + 56);
      v56 = v153;
      if (!v55)
        goto LABEL_88;
LABEL_77:
      v64 = *v52;
      v65 = *((_DWORD *)v52 + 2);
      v66 = v54;
      do
      {
        v67 = v55[4];
        if (v67 < v64)
        {
          ++v55;
        }
        else if (v67 == v64)
        {
          if (*((_DWORD *)v55 + 10) < v65)
            ++v55;
          else
            v66 = v55;
        }
        else
        {
          v66 = v55;
        }
        v55 = (uint64_t *)*v55;
      }
      while (v55);
      if (v66 == v54 || (v68 = v66[4], v64 < v68) || v64 == v68 && *((_DWORD *)v66 + 10) > v65)
LABEL_88:
        v66 = v54;
      if (v56 == v66)
      {
        v69 = 0;
      }
      else
      {
        v69 = 0;
        v70 = v56;
        do
        {
          v71 = (uint64_t *)v70[1];
          if (v71)
          {
            do
            {
              v72 = v71;
              v71 = (uint64_t *)*v71;
            }
            while (v71);
          }
          else
          {
            do
            {
              v72 = (uint64_t *)v70[2];
              _ZF = *v72 == (_QWORD)v70;
              v70 = v72;
            }
            while (!_ZF);
          }
          ++v69;
          v70 = v72;
        }
        while (v72 != v66);
      }
      v75 = *(double *)(a2 + 24);
      v76.i32[1] = 0;
      v158 = 0.0;
      if (v75 == 0.0)
      {
        v77 = 0.0;
        v78 = *(double *)(a2 + 32);
        if (v78 == 0.0)
          goto LABEL_149;
        goto LABEL_144;
      }
      if (*(_QWORD *)(v50 + 504) - (_QWORD)v52 <= 0x7FuLL)
      {
        LODWORD(v75) = *(_DWORD *)(a2 + 40);
        v77 = (double)*(unint64_t *)&v75;
        v78 = *(double *)(a2 + 32);
        if (v78 == 0.0)
          goto LABEL_149;
LABEL_144:
        v97 = *(_QWORD *)(v50 + 496);
        v98 = *(_QWORD *)(v50 + 504);
        while (v98 != v97)
        {
          v99 = v98 - 64;
          v100 = *(_DWORD *)(v98 - 48);
          v98 -= 64;
          if (v100 == *(_DWORD *)(v97 + 16))
          {
            v97 = v99 + 64;
            break;
          }
        }
        _Q2 = *(_OWORD *)(v97 - 24);
        _D3 = *(_QWORD *)(v97 - 16);
        __asm { FMLA            D4, D3, V2.D[1] }
        v158 = _D4;
        goto LABEL_149;
      }
      v79 = *((_DWORD *)v52 + 4);
      v80 = *(_QWORD *)(v53 + 1768);
      if (!v80)
        goto LABEL_118;
      v81 = v53 + 1768;
      v82 = v53 + 1768;
      do
      {
        v83 = *(_DWORD *)(v80 + 32);
        _CF = v83 >= v79;
        if (v83 >= v79)
          v85 = (uint64_t *)v80;
        else
          v85 = (uint64_t *)(v80 + 8);
        if (_CF)
          v82 = v80;
        v80 = *v85;
      }
      while (*v85);
      if (v82 != v81 && *(_DWORD *)(v82 + 32) <= v79)
      {
        v86 = *(_QWORD *)(v82 + 40);
        v87 = *(_DWORD *)(v86 + 992);
        if (v87 != -1)
        {
LABEL_119:
          if (v87 <= 7)
            goto LABEL_120;
          goto LABEL_128;
        }
      }
      else
      {
LABEL_118:
        v86 = 0;
        v87 = MEMORY[0x3E0];
        if (MEMORY[0x3E0] != -1)
          goto LABEL_119;
      }
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_221;
      }
      v87 = *(_DWORD *)(v86 + 992);
      if (v87 <= 7)
      {
LABEL_120:
        if (!v87)
          goto LABEL_220;
LABEL_129:
        v150 = *(double *)(v86 + 16);
        goto LABEL_130;
      }
LABEL_128:
      if (v87 < 0xF)
        goto LABEL_129;
      v150 = *(double *)(v86 + 16);
      if (v87 == -1)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_221;
        }
        if (!*(_DWORD *)(v86 + 992))
        {
LABEL_220:
          sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_221:
          abort();
        }
      }
LABEL_130:
      v88 = *(_QWORD *)(v50 + 496);
      v89 = *(_QWORD *)(v50 + 504);
      if (v88 == v89)
      {
        v76.i32[0] = 0;
        v91 = 0;
      }
      else
      {
        v90 = 0;
        v91 = 0;
        v92 = 1.0;
        v76.i32[0] = 0;
        do
        {
          while (*(_DWORD *)(v88 + 16) != v79)
          {
            v39 = v40;
            v88 += 64;
            if (v88 == v89)
              goto LABEL_139;
          }
          v39 = *(double *)(v88 + 32);
          if ((v90 & 1) != 0)
          {
            v91 = vadd_f32(v91, vmul_n_f32(vsub_f32(*(float32x2_t *)&v39, *(float32x2_t *)&v40), v92));
            *(float *)v76.i32 = *(float *)v76.i32 + v92;
            v92 = v92 * 1.2;
          }
          v90 = 1;
          v88 += 64;
          v40 = v39;
        }
        while (v88 != v89);
      }
LABEL_139:
      v93.f64[0] = v150;
      v93.f64[1] = *(float64_t *)(v86 + 40);
      *(float32x2_t *)&v93.f64[0] = vcvt_f32_f64(v93);
      v94 = vdiv_f32(v91, (float32x2_t)vdup_lane_s32(v76, 0));
      v95 = vdiv_f32(vsub_f32((float32x2_t)vand_s8((int8x8_t)vadd_f32(*(float32x2_t *)&v93.f64[0], *(float32x2_t *)&v93.f64[0]), (int8x8_t)vcgtz_f32(v94)), *(float32x2_t *)&v39), v94);
      if (v95.f32[1] < v95.f32[0])
        v95.f32[0] = v95.f32[1];
      v96 = fmaxf(v95.f32[0], 0.0);
      if (v96 >= (float)*(unsigned int *)(a2 + 40))
        v96 = (float)*(unsigned int *)(a2 + 40);
      v77 = v96;
      v50 = *v41;
      v43 = (uint64_t *)a1;
      v78 = *(double *)(a2 + 32);
      if (v78 != 0.0)
        goto LABEL_144;
LABEL_149:
      v40 = *(double *)(a2 + 16);
      v39 = v40 * (double)v69;
      *(double *)&v38 = v77 * *(double *)(a2 + 24)
                      + v39
                      + *(double *)(a2 + 8) * (double)v49
                      + *(double *)a2 * (double)(unint64_t)(((v161 - (_BYTE *)__p) >> 2) - 1);
      v73 = v78 * v158 + *(double *)&v38;
      v74 = *(_DWORD *)(v50 + 32);
      if (!*(_BYTE *)(a2 + 48))
        goto LABEL_154;
LABEL_150:
      v106 = v164;
      v107 = wmemchr((__int32 *)v163, v48, ((char *)v164 - (_BYTE *)v163) >> 2);
      if (v107)
        v108 = v107;
      else
        v108 = v106;
      if (v108 != v106 || v163 == v164)
      {
LABEL_154:
        v110 = (char *)v43[1];
        v109 = v43[2];
        if ((unint64_t)v110 < v109)
        {
          *(double *)v110 = v73;
          *((_DWORD *)v110 + 2) = v74;
          v44 = v110 + 16;
        }
        else
        {
          v111 = (char *)*v43;
          v112 = (uint64_t)&v110[-*v43] >> 4;
          v113 = v112 + 1;
          if ((unint64_t)(v112 + 1) >> 60)
            goto LABEL_216;
          v114 = v109 - (_QWORD)v111;
          if (v114 >> 3 > v113)
            v113 = v114 >> 3;
          if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFF0)
            v115 = 0xFFFFFFFFFFFFFFFLL;
          else
            v115 = v113;
          if (v115)
          {
            if (v115 >> 60)
              goto LABEL_218;
            v116 = (char *)operator new(16 * v115);
            v117 = (uint64_t)&v116[16 * v112];
            *(double *)v117 = v73;
            *(_DWORD *)(v117 + 8) = v74;
            v118 = v117;
            if (v110 != v111)
            {
LABEL_164:
              a2 = v156;
              do
              {
                v38 = *((_OWORD *)v110 - 1);
                *(_OWORD *)(v118 - 16) = v38;
                v118 -= 16;
                v110 -= 16;
              }
              while (v110 != v111);
              v110 = (char *)*v43;
              v119 = &v116[16 * v115];
              v44 = (char *)(v117 + 16);
              *v43 = v118;
              v43[1] = v117 + 16;
              v43[2] = (uint64_t)v119;
              if (!v110)
                goto LABEL_56;
              goto LABEL_173;
            }
          }
          else
          {
            v116 = 0;
            v117 = 16 * v112;
            *(double *)v117 = v73;
            *(_DWORD *)(v117 + 8) = v74;
            v118 = 16 * v112;
            if (v110 != v111)
              goto LABEL_164;
          }
          a2 = v156;
          v123 = &v116[16 * v115];
          v44 = (char *)(v117 + 16);
          *v43 = v118;
          v43[1] = v117 + 16;
          v43[2] = (uint64_t)v123;
          if (v110)
LABEL_173:
            operator delete(v110);
        }
LABEL_56:
        v43[1] = (uint64_t)v44;
        v45 = *v41++;
        v46 = *(_DWORD *)(a2 + 56);
        if (*(_DWORD *)(v45 + 520) == 2)
          ++v46;
        *(_DWORD *)(a2 + 56) = v46;
        if (v41 == v155)
          goto LABEL_198;
      }
      else
      {
        v121 = (double *)v43[4];
        v120 = v43[5];
        if ((unint64_t)v121 >= v120)
        {
          v124 = *v148;
          v125 = ((char *)v121 - (char *)*v148) >> 4;
          v126 = v125 + 1;
          if (!((unint64_t)(v125 + 1) >> 60))
          {
            v127 = v120 - (_QWORD)v124;
            if (v127 >> 3 > v126)
              v126 = v127 >> 3;
            if ((unint64_t)v127 >= 0x7FFFFFFFFFFFFFF0)
              v128 = 0xFFFFFFFFFFFFFFFLL;
            else
              v128 = v126;
            if (!v128)
            {
              v129 = 0;
              v130 = 16 * v125;
              *(double *)v130 = v73;
              *(_DWORD *)(v130 + 8) = v74;
              v131 = 16 * v125;
              if (v121 != v124)
                goto LABEL_183;
              goto LABEL_196;
            }
            if (!(v128 >> 60))
            {
              v129 = (char *)operator new(16 * v128);
              v130 = (uint64_t)&v129[16 * v125];
              *(double *)v130 = v73;
              *(_DWORD *)(v130 + 8) = v74;
              v131 = v130;
              if (v121 != v124)
              {
LABEL_183:
                a2 = v156;
                do
                {
                  v38 = *((_OWORD *)v121 - 1);
                  *(_OWORD *)(v131 - 16) = v38;
                  v131 -= 16;
                  v121 -= 2;
                }
                while (v121 != v124);
                v121 = v124;
                v122 = (double *)(v130 + 16);
                v43[3] = v131;
                v43[4] = v130 + 16;
                v43[5] = (uint64_t)&v129[16 * v128];
                if (!v121)
                  goto LABEL_187;
LABEL_186:
                operator delete(v121);
                goto LABEL_187;
              }
LABEL_196:
              a2 = v156;
              v122 = (double *)(v130 + 16);
              v43[3] = v131;
              v43[4] = v130 + 16;
              v43[5] = (uint64_t)&v129[16 * v128];
              if (!v121)
                goto LABEL_187;
              goto LABEL_186;
            }
LABEL_218:
            sub_20E877A38();
          }
LABEL_216:
          sub_20E867F44();
        }
        *v121 = v73;
        *((_DWORD *)v121 + 2) = v74;
        v122 = v121 + 2;
LABEL_187:
        v43[4] = (uint64_t)v122;
        v132 = *v41++;
        v133 = *(_DWORD *)(a2 + 60);
        if (*(_DWORD *)(v132 + 520) == 2)
          ++v133;
        *(_DWORD *)(a2 + 60) = v133;
        if (v41 == v155)
        {
LABEL_198:
          v42 = *v43;
          v36 = (double *)v43[1];
          goto LABEL_199;
        }
      }
    }
    while (1)
    {
      v57 = *((_DWORD *)v52 + 4);
      v58 = __p;
      if (v161 == __p)
      {
        v58 = v161;
      }
      else
      {
        v59 = (v161 - (_BYTE *)__p) >> 2;
        do
        {
          v60 = v59 >> 1;
          v61 = &v58[4 * (v59 >> 1)];
          v63 = *v61;
          v62 = v61 + 1;
          v59 += ~(v59 >> 1);
          if (v63 < v57)
            v58 = v62;
          else
            v59 = v60;
        }
        while (v59);
        if (v161 != v58 && *(_DWORD *)v58 == v57)
          goto LABEL_64;
      }
      sub_20EDB3C7C(&__p, v58, (char *)v52 + 16);
LABEL_64:
      v52 += 8;
      if (v52 == v51)
      {
        v50 = *v41;
        v52 = *(uint64_t **)(*v41 + 496);
        v53 = a3[1];
        v54 = (uint64_t *)(v53 + 56);
        v55 = *(uint64_t **)(v53 + 56);
        v56 = v153;
        if (v55)
          goto LABEL_77;
        goto LABEL_88;
      }
    }
  }
LABEL_199:
  if ((uint64_t)v36 - v42 < 1)
  {
LABEL_203:
    v138 = sub_20FC53A94(v42, v36, ((uint64_t)v36 - v42) >> 4, 0, 0, *(double *)&v38);
    v140 = *(_QWORD *)(a1 + 24);
    v139 = *(double **)(a1 + 32);
    v141 = ((uint64_t)v139 - v140) >> 4;
    if ((uint64_t)v139 - v140 >= 1)
      goto LABEL_206;
LABEL_209:
    sub_20FC53A94(v140, v139, v141, 0, 0, v138);
    v146 = __p;
    if (!__p)
      goto LABEL_211;
    goto LABEL_210;
  }
  v134 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
  v135 = ((uint64_t)v36 - v42) >> 4;
  while (1)
  {
    v136 = (double *)operator new(16 * v135, v134);
    if (v136)
      break;
    v137 = v135 > 1;
    v135 >>= 1;
    if (!v137)
      goto LABEL_203;
  }
  v142 = v136;
  sub_20FC53A94(v42, v36, ((uint64_t)v36 - v42) >> 4, v136, v135, *(double *)&v38);
  operator delete(v142);
  v140 = *(_QWORD *)(a1 + 24);
  v139 = *(double **)(a1 + 32);
  v141 = ((uint64_t)v139 - v140) >> 4;
  if ((uint64_t)v139 - v140 < 1)
    goto LABEL_209;
LABEL_206:
  v143 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
  v144 = v141;
  while (1)
  {
    v145 = (double *)operator new(16 * v144, v143);
    if (v145)
      break;
    v137 = v144 > 1;
    v144 >>= 1;
    if (!v137)
      goto LABEL_209;
  }
  v147 = v145;
  sub_20FC53A94(v140, v139, v141, v145, v144, v138);
  operator delete(v147);
  v146 = __p;
  if (__p)
  {
LABEL_210:
    v161 = v146;
    operator delete(v146);
  }
LABEL_211:
  if (v163)
  {
    v164 = (__int32 *)v163;
    operator delete(v163);
  }
}

void sub_20FC506B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  sub_20E9AA8C8(a13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20FC50730(uint64_t a1, unsigned int a2, unsigned int *a3)
{
  uint64_t *v6;
  uint64_t *v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t *v12;
  float64x2_t **v13;
  float64x2_t v15;
  double v16;
  float64x2_t v17;
  double v18;
  float64x2_t *v20;
  double v21;
  float64x2_t v23;
  float64x2_t *v24;
  int64x2_t v25;
  unint64_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  double v36;
  float64x2_t v37;
  int8x16_t v38;
  float64x2_t *v39;
  double v40;
  float64x2_t v41;
  uint64_t v44;
  unint64_t v45;
  int64x2_t v47;
  int64x2_t v48;
  float64x2_t v51;
  float64_t v52;
  int8x16_t v53;
  __int128 *v55;
  __int128 *v56;
  uint64_t v57;
  __int128 v58;
  uint64_t *v59;
  float64x2_t v60;
  uint64_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  double v65;
  double v66;
  unint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  float64x2_t v70;
  int64x2_t v71;
  uint64_t v72;
  double v73;
  float64x2_t v75;
  float64x2_t v79;
  float64x2_t v80;
  unint64_t v81;
  float64x2_t *v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64_t v86;
  float64x2_t v87;
  float64x2_t v88;
  uint64_t v89;
  double v90;
  float64x2_t v91;
  double v95;
  int8x16_t v96;
  double v97;
  uint64_t v98;
  float64x2_t v99;
  int64x2_t v101;
  int64x2_t v102;
  float64x2_t v104;
  double v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  double v120;
  uint64_t *v122;
  uint64_t v123;
  double *v124;
  uint64_t v125;
  double *v126;
  double v127;
  double v128;
  float64x2_t v131;
  double v133;
  double v135;
  char *v142;
  char *v143;
  unint64_t v144;
  unint64_t v145;
  char *v146;
  char *v147;
  unsigned int v148;
  int v149;
  uint64_t v150;
  const char *v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t i;
  int v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD *v167;
  _QWORD *v168;
  __int128 v169;
  _QWORD *v170;
  _QWORD *v171;
  BOOL v172;
  _QWORD *v173;
  _QWORD *v174;
  _QWORD *v175;
  _QWORD *v176;
  float64_t v177;
  unint64_t v178;
  float64x2_t v179;
  float64_t v180;
  __int128 v181;
  __int128 v182;
  uint64_t v183;
  __int128 v184;
  uint64_t v185;

  v6 = *(uint64_t **)(a1 + 24);
  v7 = *(uint64_t **)(a1 + 32);
  if (v6 != v7)
  {
    while (*(_DWORD *)(*v6 + 32) != a2)
    {
      if (++v6 == v7)
        goto LABEL_6;
    }
  }
  if (v6 == v7)
  {
LABEL_6:
    v8 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 1802, (uint64_t)"track_iter != viobadata_ref_.front_end_tracks.end()", 51, (uint64_t)"Failed to find the track in the the front-end tracks.", 53, (void (*)(void **))sub_21023DDB0);
    v6 = v7;
    if (v8)
      goto LABEL_119;
  }
  v9 = *v6;
  if (*(_DWORD *)(*v6 + 520) == 2
    || *(unsigned int *)(a1 + 1932) > (unint64_t)((uint64_t)(*(_QWORD *)(v9 + 504) - *(_QWORD *)(v9 + 496)) >> 6))
  {
    return 0;
  }
  if (*(_BYTE *)(a1 + 1940))
  {
    if (*(_BYTE *)(v9 + 488))
      v11 = v9 + 40;
    else
      v11 = 0;
    v181 = *(_OWORD *)(v11 + 32);
    *(_QWORD *)&v182 = *(_QWORD *)(v11 + 48);
    v12 = sub_20E9DF85C((_QWORD *)(*(_QWORD *)(a1 + 8) + 1784), (uint64_t *)&v181);
    v13 = (float64x2_t **)(v12 + 5);
    if (!v12)
      v13 = 0;
    _Q6.f64[0] = (*v13)[1].f64[0];
    v15 = **v13;
    v16 = (*v13)[2].f64[1];
    v17 = *(float64x2_t *)((char *)*v13 + 24);
    v18 = (*v13)[4].f64[0];
    _Q3 = (*v13)[3];
    v20 = v13[2];
    v21 = v20[1].f64[0];
    _Q16 = *v20;
    v23 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v15, (int64x2_t)v17), v20->f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v15, (int64x2_t)v17), *v20, 1);
    v24 = v13[4];
    v25 = *(int64x2_t *)((char *)&v24[1] + 8);
    _Q17 = v24[3];
    v27 = *(_QWORD *)&v24[3].f64[0];
    v28 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v24, v25);
    v29 = vmulq_n_f64(v28, _Q6.f64[0]);
    v30 = vmulq_n_f64((float64x2_t)v27, _Q6.f64[0]);
    _Q6.f64[1] = v16;
    v31 = vmlaq_n_f64(v23, _Q6, v21);
    _Q16.f64[0] = _Q16.f64[1];
    __asm { FMLA            D6, D16, V3.D[1] }
    _Q6.f64[0] = _Q6.f64[0] + v18 * v21;
    *(_QWORD *)&v36 = *(_OWORD *)&vnegq_f64(v31);
    _Q16.f64[0] = v24[1].f64[0];
    v37 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v24, v25);
    _Q16.f64[1] = v24[2].f64[1];
    v38 = vextq_s8((int8x16_t)v37, (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q17, 1), 8uLL);
    v39 = v13[6];
    v40 = v39[1].f64[0];
    v41 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v28, v39->f64[0]), v37, *v39, 1), _Q16, v40);
    _D26 = v39->f64[1];
    __asm { FMLA            D28, D26, V17.D[1] }
    _Q17.f64[0] = _D28 + v24[4].f64[0] * v40;
    v44 = v38.i64[1];
    *(_QWORD *)&v37.f64[1] = v38.i64[0];
    v45 = *(_QWORD *)&v24[4].f64[0];
    __asm { FMOV            V24.2D, #1.0 }
    v177 = _Q24.f64[1];
    *(_QWORD *)&_Q24.f64[0] = *(_OWORD *)&vnegq_f64(_Q17);
    v47 = (int64x2_t)vmlsq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v28, v15.f64[0]), v37, v17.f64[0]), _Q16, _Q3.f64[0]), (float64x2_t)0, v41);
    v48 = (int64x2_t)vmlsq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v28, v15, 1), v37, v17, 1), _Q16, _Q3, 1), (float64x2_t)0, v41);
    _Q22 = vmlsq_f64(vmlaq_n_f64(vmlaq_n_f64(v29, v37, v16), _Q16, v18), (float64x2_t)0, v41);
    *(_QWORD *)&v30.f64[0] = *(_OWORD *)&vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v30, (float64x2_t)(unint64_t)v44, v16), (float64x2_t)v45, v18), (float64x2_t)0, _Q24);
    _Q0 = vsubq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v28, v36), v37, v31, 1), _Q16, _Q6.f64[0], 0), v41);
    v51 = vsubq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64((float64x2_t)v27, v36), (float64x2_t)(unint64_t)v44, v31, 1), (float64x2_t)v45, _Q6.f64[0], 0), _Q17);
    v52 = v51.f64[0];
    *(_QWORD *)&v51.f64[0] = *(_QWORD *)&_Q0.f64[0] ^ 0x8000000000000000;
    v53 = (int8x16_t)vmlaq_f64(vmlaq_f64(vmulq_f64((float64x2_t)vzip1q_s64(v47, v48), (float64x2_t)vdupq_n_s64(*(_QWORD *)&_Q0.f64[0] ^ 0x8000000000000000)), (float64x2_t)vdupq_n_s64(*(_QWORD *)&_Q0.f64[1] ^ 0x8000000000000000), (float64x2_t)vzip2q_s64(v47, v48)), (float64x2_t)vdupq_n_s64(*(_QWORD *)&v52 ^ 0x8000000000000000), (float64x2_t)vzip1q_s64((int64x2_t)vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)v27, v15.f64[0]), (float64x2_t)(unint64_t)v44, v17.f64[0]), (float64x2_t)v45, _Q3.f64[0]), (float64x2_t)0, _Q24), (int64x2_t)vmlaq_f64(
                                                   vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64((float64x2_t)v27, v15, 1), (float64x2_t)(unint64_t)v44, v17, 1), (float64x2_t)v45, _Q3, 1), (float64x2_t)0, _Q24)));
    _Q1 = vmulq_f64(_Q22, v51);
    *(_QWORD *)&_Q0.f64[0] = *(_QWORD *)&_Q0.f64[1] ^ 0x8000000000000000;
    __asm { FMLA            D1, D0, V22.D[1] }
    _Q1.f64[0] = vmlad_n_f64(_Q1.f64[0], COERCE_DOUBLE(*(_QWORD *)&v52 ^ 0x8000000000000000), v30.f64[0]);
    v179 = _Q1;
    v180 = *(double *)v53.i64;
    v56 = *(__int128 **)(v9 + 496);
    v55 = *(__int128 **)(v9 + 504);
    v57 = *((_QWORD *)v55 - 6);
    v178 = vextq_s8(v53, v53, 8uLL).u64[0];
    v184 = *(v55 - 4);
    v185 = v57;
    while (v56 != v55)
    {
      if (*((_DWORD *)v56 + 2) > DWORD2(v184))
      {
        v58 = *v56;
        LODWORD(v185) = *((_DWORD *)v56 + 4);
        v184 = v58;
      }
      v56 += 4;
    }
    v59 = sub_20E9DF85C((_QWORD *)(*(_QWORD *)(a1 + 8) + 1784), (uint64_t *)&v184);
    if (*(_BYTE *)(v9 + 488))
      v61 = v9 + 40;
    else
      v61 = 0;
    v62 = *(float64x2_t *)(v61 + 8);
    v60.f64[0] = *(float64_t *)(v61 + 24);
    v63.f64[0] = v180;
    *(_QWORD *)&v63.f64[1] = v178;
    v64 = vsubq_f64(v63, v62);
    *(_QWORD *)&v65 = *(_OWORD *)&vsubq_f64(v179, v60);
    v66 = 1.0;
    if (fabs(v64.f64[0]) >= 1.0e-10 || fabs(v64.f64[1]) >= 1.0e-10 || fabs(v65) >= 1.0e-10)
    {
      v67 = vextq_s8((int8x16_t)v62, (int8x16_t)v62, 8uLL).u64[0];
      v68 = v59 + 5;
      if (!v59)
        v68 = 0;
      v69 = v68[4];
      v70.f64[0] = *(float64_t *)(v69 + 16);
      v71 = *(int64x2_t *)(v69 + 24);
      v70.f64[1] = *(float64_t *)(v69 + 40);
      v72 = v68[6];
      v73 = *(double *)(v72 + 16);
      _Q17 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v69, v71);
      v75 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v69, v71);
      _Q23 = *(float64x2_t *)(v69 + 48);
      _Q22 = vmulq_f64(_Q23, *(float64x2_t *)v72);
      _D20 = *(_QWORD *)(v72 + 8);
      __asm { FMLA            D22, D20, V23.D[1] }
      _Q22.f64[0] = _Q22.f64[0] + *(double *)(v69 + 64) * v73;
      v79.f64[1] = v177;
      *(_QWORD *)&v79.f64[0] = *(_OWORD *)&vnegq_f64(_Q22);
      v80 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v75, *(double *)v72), _Q17, *(float64x2_t *)v72, 1), v70, v73);
      v81 = *(_QWORD *)(v69 + 64);
      v82 = (float64x2_t *)*v68;
      v83 = *(float64x2_t *)*v68;
      v84.f64[0] = *(float64_t *)(*v68 + 16);
      v85 = *(float64x2_t *)(*v68 + 24);
      v86 = _Q23.f64[0];
      v87 = vmulq_n_f64(v75, v84.f64[0]);
      v88 = vmulq_n_f64((float64x2_t)*(unint64_t *)&_Q23.f64[0], v84.f64[0]);
      v84.f64[1] = *(float64_t *)(*v68 + 40);
      v89 = v68[2];
      v90 = *(double *)(v89 + 16);
      v91 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v83, (int64x2_t)v85), *(double *)v89), (float64x2_t)vzip2q_s64((int64x2_t)v83, (int64x2_t)v85), *(float64x2_t *)v89, 1), v84, v90);
      v84.f64[0] = v82[4].f64[0];
      _Q31 = v82[3];
      _D30 = *(_QWORD *)(v89 + 8);
      __asm { FMLA            D9, D30, V31.D[1] }
      v95 = _D9 + v84.f64[0] * v90;
      v96 = vextq_s8((int8x16_t)_Q17, (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q23, 1), 8uLL);
      *(_QWORD *)&_Q17.f64[1] = v96.i64[0];
      *(_QWORD *)&v97 = *(_OWORD *)&vnegq_f64(v91);
      v98 = v96.i64[1];
      v99 = vsubq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v75, v97), _Q17, v91, 1), v70, v95, 0), v80);
      _Q25 = vmlsq_f64(vmlaq_n_f64(vmlaq_n_f64(v87, _Q17, v84.f64[1]), v70, v84.f64[0]), (float64x2_t)0, v80);
      v101 = (int64x2_t)vmlsq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v75, v83, 1), _Q17, v85, 1), v70, _Q31, 1), (float64x2_t)0, v80);
      v102 = (int64x2_t)vmlsq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v75, v83.f64[0]), _Q17, v85.f64[0]), v70, _Q31.f64[0]), (float64x2_t)0, v80);
      *(_QWORD *)&_Q17.f64[0] = *(_QWORD *)&v99.f64[0] ^ 0x8000000000000000;
      _Q7 = vmulq_f64(_Q25, _Q17);
      *(_QWORD *)&_Q17.f64[0] = *(_QWORD *)&v99.f64[1] ^ 0x8000000000000000;
      __asm { FMLA            D7, D17, V25.D[1] }
      *(_QWORD *)&_Q17.f64[0] = *(_OWORD *)&vsubq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v86, v97), (float64x2_t)(unint64_t)v98, v91, 1), (float64x2_t)v81, v95, 0), _Q22) ^ 0x8000000000000000;
      _Q7.f64[0] = vmlad_n_f64(_Q7.f64[0], _Q17.f64[0], vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v88, (float64x2_t)(unint64_t)v98, v84.f64[1]), (float64x2_t)v81, v84.f64[0]), (float64x2_t)0, v79).f64[0]);
      *(_QWORD *)&v62.f64[1] = v67;
      v104 = vsubq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64((float64x2_t)vzip1q_s64(v102, v101), (float64x2_t)vdupq_n_s64(*(_QWORD *)&v99.f64[0] ^ 0x8000000000000000)), (float64x2_t)vdupq_n_s64(*(_QWORD *)&v99.f64[1] ^ 0x8000000000000000), (float64x2_t)vzip2q_s64(v102, v101)), (float64x2_t)vdupq_n_s64(*(unint64_t *)&_Q17.f64[0]), (float64x2_t)vzip1q_s64((int64x2_t)vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v86, v83.f64[0]), (float64x2_t)(unint64_t)v98, v85.f64[0]), (float64x2_t)v81, _Q31.f64[0]), (float64x2_t)0, v79),
                                (int64x2_t)vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64((float64x2_t)*(unint64_t *)&v86, v83, 1), (float64x2_t)(unint64_t)v98, v85, 1), (float64x2_t)v81, _Q31, 1), (float64x2_t)0, v79))), v62);
      *(_QWORD *)&v105 = *(_OWORD *)&vsubq_f64(_Q7, v60);
      if (fabs(v104.f64[0]) >= 1.0e-10 || fabs(v104.f64[1]) >= 1.0e-10 || fabs(v105) >= 1.0e-10)
      {
        v64.f64[1] = *(double *)vextq_s8((int8x16_t)v64, (int8x16_t)v64, 8uLL).i64;
        v104.f64[1] = *(double *)vextq_s8((int8x16_t)v104, (int8x16_t)v104, 8uLL).i64;
        v66 = (vmulq_f64(v64, v104).f64[0] + v64.f64[1] * v104.f64[1] + v65 * v105)
            / sqrt((vmulq_f64(v64, v64).f64[0] + v64.f64[1] * v64.f64[1] + v65 * v65)* (vmulq_f64(v104, v104).f64[0] + v104.f64[1] * v104.f64[1] + v105 * v105));
      }
    }
    if (fmin(v66, 1.0) > cos(*(double *)(a1 + 1944) * 0.0174532925))
    {
      if (!*(_BYTE *)(a1 + 1952))
        return 0;
      v106 = *(_QWORD *)(v9 + 496);
      v107 = *(_QWORD *)(v9 + 504);
      if (v106 == v107 || *(_DWORD *)(v106 + 16) == *(_DWORD *)(v107 - 48))
        return 0;
    }
  }
  if (*(_BYTE *)(a1 + 1954))
  {
    v108 = *(_QWORD *)(v9 + 496);
    v109 = *(_QWORD *)(v9 + 504);
    if (v108 == v109 || *(_DWORD *)(v108 + 16) == *(_DWORD *)(v109 - 48))
      return 0;
  }
  if (*(_BYTE *)(a1 + 1953))
  {
    v110 = *(_QWORD *)(a1 + 8);
    v113 = *(_QWORD *)(v110 + 56);
    v111 = v110 + 56;
    v112 = v113;
    if (v113)
    {
      do
      {
        v114 = v112;
        v112 = *(_QWORD *)(v112 + 8);
      }
      while (v112);
    }
    else
    {
      do
      {
        v114 = *(_QWORD *)(v111 + 16);
        _ZF = *(_QWORD *)v114 == v111;
        v111 = v114;
      }
      while (_ZF);
    }
    v115 = *(_QWORD *)(v9 + 496);
    v116 = *(_QWORD *)(v9 + 504);
    if (v115 != v116)
    {
      v117 = *(_QWORD *)(v114 + 32);
      v118 = *(_DWORD *)(v114 + 40);
      while (*(_QWORD *)v115 != v117 || *(_DWORD *)(v115 + 8) != v118)
      {
        result = 0;
        v115 += 64;
        if (v115 == v116)
          return result;
      }
    }
    if (v115 == v116)
      return 0;
  }
  if (*(_BYTE *)(a1 + 1955))
  {
    v119 = v9 + 40;
    if (!*(_BYTE *)(v9 + 488))
      v119 = 0;
    v120 = *(double *)(v119 + 24);
    _Q1 = *(_OWORD *)(v119 + 8);
    v122 = *(uint64_t **)(v119 + 96);
    v123 = *v122;
    v124 = (double *)v122[2];
    v125 = v122[4];
    v126 = (double *)v122[6];
    v127 = *(double *)&_Q1 - *v124;
    *(double *)&_Q1 = *((double *)&_Q1 + 1) - v124[1];
    v128 = v120 - v124[2];
    _Q3.f64[0] = *(float64_t *)(v123 + 16);
    _Q7 = *(_OWORD *)(v123 + 48);
    _Q3.f64[1] = *(float64_t *)(v123 + 40);
    v131 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v123, *(int64x2_t *)(v123 + 24)), v127), (float64x2_t)vzip2q_s64(*(int64x2_t *)v123, *(int64x2_t *)(v123 + 24)), *(double *)&_Q1), _Q3, v128);
    __asm { FMLA            D2, D1, V7.D[1] }
    v133 = _D2 + *(double *)(v123 + 64) * v128;
    *(double *)&_Q1 = v131.f64[0] - *v126;
    _D2 = v131.f64[1] - v126[1];
    v135 = v133 - v126[2];
    _Q3.f64[0] = *(float64_t *)(v125 + 16);
    _Q4 = *(int64x2_t *)v125;
    _Q6 = *(int64x2_t *)(v125 + 24);
    _Q16 = *(_OWORD *)(v125 + 48);
    __asm { FMLA            D18, D2, V4.D[1] }
    _Q3.f64[1] = *(float64_t *)(v125 + 40);
    _Q17 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v125, _Q6), *(double *)&_Q1), (float64x2_t)vzip2q_s64(*(int64x2_t *)v125, _Q6), _D2), _Q3, v135);
    __asm
    {
      FMLA            D3, D2, V16.D[1]
      FMLA            D1, D2, V6.D[1]
    }
    *(double *)&_Q1 = *(double *)&_Q1 + v135 * _Q3.f64[1];
    __asm { FMLA            D2, D1, V17.D[1] }
    if (sqrt(_D2 + (_Q3.f64[0] + v135 * *(double *)(v125 + 64)) * (_Q3.f64[0] + *(double *)(v125 + 64) * v135)) > *(double *)(a1 + 1960))
      return 0;
  }
  v142 = *(char **)(a1 + 5560);
  v143 = *(char **)(a1 + 5568);
  if (v143 != v142)
  {
    v144 = (v143 - v142) >> 4;
    do
    {
      v145 = v144 >> 1;
      v146 = &v142[16 * (v144 >> 1)];
      v148 = *(_DWORD *)v146;
      v147 = v146 + 16;
      v144 += ~(v144 >> 1);
      if (v148 < a2)
        v142 = v147;
      else
        v144 = v145;
    }
    while (v144);
  }
  if (v142 != v143
    && *(_DWORD *)v142 == a2
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 1869, (uint64_t)"linear_system_.template findVariable<SLAMLandmarkVariableType>(landmarkID) == linear_system_.template endVariable<SLAMLandmarkVariableType>()", 141, (uint64_t)"There should not be any SLAM landmark Variable with this track ID.", 66, (void (*)(void **))sub_21023DDB0))
  {
LABEL_119:
    abort();
  }
  if (*(_BYTE *)(v9 + 488))
  {
    LODWORD(v181) = a2;
    BYTE4(v181) = 1;
    *((_QWORD *)&v181 + 1) = v9 + 40;
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 1871, (uint64_t)"track_ptr->getStructure()", 25, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_119;
    }
    v149 = *(unsigned __int8 *)(v9 + 488);
    if (*(_BYTE *)(v9 + 488))
      v150 = v9 + 40;
    else
      v150 = 0;
    LODWORD(v181) = a2;
    BYTE4(v181) = 1;
    *((_QWORD *)&v181 + 1) = v150;
    if (!v149)
      goto LABEL_83;
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(v9 + 40) + 24))(v9 + 40))
  {
    v182 = *(_OWORD *)(*((_QWORD *)&v181 + 1) + 8);
    v183 = *(_QWORD *)(*((_QWORD *)&v181 + 1) + 24);
    _Q1 = *(_OWORD *)(*((_QWORD *)&v181 + 1) + 64);
    _D3 = *(_QWORD *)(*((_QWORD *)&v181 + 1) + 72);
    __asm { FMLA            D2, D3, V1.D[1] }
    if (fabs(sqrt(_D2 + *(double *)(*((_QWORD *)&v181 + 1) + 80) * *(double *)(*((_QWORD *)&v181 + 1) + 80)) + -1.0) <= 0.000001)
      goto LABEL_77;
    v154 = "std::fabs(anchor_direction().norm2() - 1) <= 1e-6";
    v155 = 811;
    v156 = 49;
  }
  else
  {
    v154 = "initializeImpl()";
    v155 = 798;
    v156 = 16;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", v155, (uint64_t)v154, v156, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_119;
  }
LABEL_77:
  if (*((_QWORD *)&v181 + 1)
    && (*(unsigned int (**)(_QWORD))(**((_QWORD **)&v181 + 1) + 24))(*((_QWORD *)&v181 + 1)))
  {
    v182 = *(_OWORD *)(*((_QWORD *)&v181 + 1) + 8);
    v183 = *(_QWORD *)(*((_QWORD *)&v181 + 1) + 24);
    _Q1 = *(_OWORD *)(*((_QWORD *)&v181 + 1) + 64);
    _D3 = *(_QWORD *)(*((_QWORD *)&v181 + 1) + 72);
    __asm { FMLA            D2, D3, V1.D[1] }
    if (fabs(sqrt(_D2 + *(double *)(*((_QWORD *)&v181 + 1) + 80) * *(double *)(*((_QWORD *)&v181 + 1) + 80)) + -1.0) <= 0.000001
      || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 811, (uint64_t)"std::fabs(anchor_direction().norm2() - 1) <= 1e-6", 49, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      if (sub_20FC53F58(a1 + 5168, (unsigned int *)&v181))
      {
        *(_BYTE *)(a1 + 7828) = 0;
        *(_DWORD *)(a1 + 7824) = 0;
      }
      goto LABEL_83;
    }
    goto LABEL_119;
  }
LABEL_83:
  v160 = *(_QWORD **)(a1 + 8);
  v161 = v160[8];
  v162 = v160[39] * v161;
  if (v162)
  {
    for (i = 0; i != v162; ++i)
    {
      v165 = i / v161;
      v166 = i % v161;
      v167 = (_QWORD *)v160[6];
      if (((i % v161) & 0x8000000000000000) != 0)
      {
        do
        {
          v174 = (_QWORD *)*v167;
          if (*v167)
          {
            do
            {
              v168 = v174;
              v174 = (_QWORD *)v174[1];
            }
            while (v174);
          }
          else
          {
            do
            {
              v168 = (_QWORD *)v167[2];
              _ZF = *v168 == (_QWORD)v167;
              v167 = v168;
            }
            while (_ZF);
          }
          v167 = v168;
          _CF = __CFADD__(v166++, 1);
        }
        while (!_CF);
      }
      else if (v166)
      {
        do
        {
          v173 = (_QWORD *)v167[1];
          if (v173)
          {
            do
            {
              v168 = v173;
              v173 = (_QWORD *)*v173;
            }
            while (v173);
          }
          else
          {
            do
            {
              v168 = (_QWORD *)v167[2];
              _ZF = *v168 == (_QWORD)v167;
              v167 = v168;
            }
            while (!_ZF);
          }
          v167 = v168;
          v172 = v166-- <= 1;
        }
        while (!v172);
      }
      else
      {
        v168 = (_QWORD *)v160[6];
      }
      v169 = *((_OWORD *)v168 + 2);
      v170 = (_QWORD *)v160[37];
      if (v165 < 0)
      {
        do
        {
          v175 = (_QWORD *)*v170;
          if (*v170)
          {
            do
            {
              v171 = v175;
              v175 = (_QWORD *)v175[1];
            }
            while (v175);
          }
          else
          {
            do
            {
              v171 = (_QWORD *)v170[2];
              _ZF = *v171 == (_QWORD)v170;
              v170 = v171;
            }
            while (_ZF);
          }
          v170 = v171;
          _CF = __CFADD__(v165++, 1);
        }
        while (!_CF);
      }
      else if (v161 <= i)
      {
        do
        {
          v176 = (_QWORD *)v170[1];
          if (v176)
          {
            do
            {
              v171 = v176;
              v176 = (_QWORD *)*v176;
            }
            while (v176);
          }
          else
          {
            do
            {
              v171 = (_QWORD *)v170[2];
              _ZF = *v171 == (_QWORD)v170;
              v170 = v171;
            }
            while (!_ZF);
          }
          v170 = v171;
          v172 = v165-- <= 1;
        }
        while (!v172);
      }
      else
      {
        v171 = (_QWORD *)v160[37];
      }
      v164 = *((_DWORD *)v171 + 8);
      v184 = v169;
      LODWORD(v185) = v164;
      sub_20FC512F0(a1, (uint64_t)&v184, v9, a3);
    }
  }
  *(_DWORD *)(v9 + 520) = 2;
  return 1;
}

void sub_20FC512F0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t *v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  double v22;
  double v23;
  float64x2_t v24;
  double v25;
  float64x2_t v26;
  std::string::size_type v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unint64_t v31;
  int64x2_t *v32;
  unint64_t *v33;
  int64x2_t *v34;
  unint64_t v35;
  int64x2_t *v36;
  unint64_t v37;
  unint64_t *v38;
  int64x2_t *v39;
  unint64_t v40;
  char *v41;
  char *v42;
  int64x2_t *v43;
  unint64_t v44;
  unint64_t v45;
  unsigned int *v46;
  char *v47;
  unsigned int v48;
  std::string::size_type v49;
  char *v50;
  char *v51;
  unint64_t v52;
  unint64_t v53;
  unsigned int *v54;
  char *v55;
  unsigned int v56;
  std::string::size_type v57;
  char *v58;
  char *v59;
  unint64_t v60;
  unint64_t v61;
  unsigned int *v62;
  char *v63;
  unsigned int v64;
  uint64_t v65;
  char *v66;
  char *v67;
  unint64_t v68;
  unint64_t v69;
  unsigned int *v70;
  char *v71;
  unsigned int v72;
  uint64_t v73;
  char *v74;
  char *v75;
  unint64_t v76;
  unint64_t v77;
  unsigned int *v78;
  char *v79;
  unsigned int v80;
  unint64_t v81;
  char *v82;
  char *v83;
  unint64_t v84;
  unint64_t v85;
  unsigned int *v86;
  char *v87;
  unsigned int v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t *v92;
  __n128 *v93;
  __n128 v94;
  __n128 v95;
  unint64_t v96;
  int64x2_t *v97;
  int64x2_t *v98;
  unint64_t *v99;
  char v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  int v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  char *v108;
  char *v109;
  unint64_t v110;
  unint64_t v111;
  char *v112;
  char *v113;
  unsigned int v114;
  _QWORD *v115;
  _QWORD *v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t *v119;
  _QWORD *v120;
  unint64_t v121;
  char *v122;
  char *v123;
  unint64_t v124;
  unint64_t v125;
  char *v126;
  char *v127;
  unsigned int v128;
  _QWORD *v129;
  void **v130;
  uint64_t v131;
  _QWORD *v132;
  _QWORD *v133;
  int v134;
  char *v135;
  char *v136;
  char *v137;
  unint64_t v138;
  unint64_t v139;
  unsigned int *v140;
  char *v141;
  unsigned int v142;
  unint64_t v143;
  unint64_t v144;
  unsigned int *v145;
  char *v146;
  unsigned int v147;
  uint64_t v148;
  _QWORD *v149;
  void **v150;
  uint64_t v151;
  _QWORD *v152;
  _QWORD *v153;
  _QWORD *v154;
  _QWORD *v155;
  const char *v156;
  uint64_t v157;
  _QWORD *v158;
  int v159;
  _QWORD *v160;
  void **v161;
  uint64_t v162;
  _QWORD *v163;
  _QWORD *v164;
  char *v165;
  char *v166;
  char *v167;
  unint64_t v168;
  unint64_t v169;
  unsigned int *v170;
  char *v171;
  unsigned int v172;
  unint64_t v173;
  unint64_t v174;
  unsigned int *v175;
  char *v176;
  unsigned int v177;
  uint64_t v178;
  _QWORD *v179;
  void **v180;
  uint64_t v181;
  _QWORD *v182;
  _QWORD *v183;
  _QWORD *v184;
  _QWORD *v185;
  const char *v186;
  uint64_t v187;
  _QWORD *v188;
  int v189;
  _QWORD *v190;
  void **v191;
  uint64_t v192;
  _QWORD *v193;
  _QWORD *v194;
  char *v195;
  char *v196;
  char *v197;
  unint64_t v198;
  unint64_t v199;
  unsigned int *v200;
  char *v201;
  unsigned int v202;
  unint64_t v203;
  unint64_t v204;
  unsigned int *v205;
  char *v206;
  unsigned int v207;
  uint64_t v208;
  _QWORD *v209;
  void **v210;
  uint64_t v211;
  _QWORD *v212;
  _QWORD *v213;
  _QWORD *v214;
  _QWORD *v215;
  const char *v216;
  uint64_t v217;
  _QWORD *v218;
  _QWORD *v219;
  void **v220;
  uint64_t v221;
  _QWORD *v222;
  _QWORD *v223;
  char *v224;
  char *v225;
  char *v226;
  unint64_t v227;
  unint64_t v228;
  unsigned int *v229;
  char *v230;
  unsigned int v231;
  unint64_t v232;
  unint64_t v233;
  unsigned int *v234;
  char *v235;
  unsigned int v236;
  uint64_t v237;
  _QWORD *v238;
  void **v239;
  uint64_t v240;
  _QWORD *v241;
  _QWORD *v242;
  _QWORD *v243;
  _QWORD *v244;
  const char *v245;
  uint64_t v246;
  _QWORD *v247;
  _QWORD *v248;
  void **v249;
  uint64_t v250;
  _QWORD *v251;
  _QWORD *v252;
  char *v253;
  char *v254;
  char *v255;
  unint64_t v256;
  unint64_t v257;
  unsigned int *v258;
  char *v259;
  unsigned int v260;
  unint64_t v261;
  unint64_t v262;
  unsigned int *v263;
  char *v264;
  unsigned int v265;
  uint64_t v266;
  _QWORD *v267;
  void **v268;
  uint64_t v269;
  _QWORD *v270;
  _QWORD *v271;
  _QWORD *v272;
  _QWORD *v273;
  const char *v274;
  uint64_t v275;
  _QWORD *v276;
  int v277;
  _QWORD *v278;
  void **v279;
  uint64_t v280;
  _QWORD *v281;
  _QWORD *v282;
  char *v283;
  char *v284;
  char *v285;
  unint64_t v286;
  unint64_t v287;
  unsigned int *v288;
  char *v289;
  unsigned int v290;
  unint64_t v291;
  unint64_t v292;
  unsigned int *v293;
  char *v294;
  unsigned int v295;
  uint64_t v296;
  _QWORD *v297;
  void **v298;
  uint64_t v299;
  _QWORD *v300;
  _QWORD *v301;
  _QWORD *v302;
  _QWORD *v303;
  const char *v304;
  uint64_t v305;
  _QWORD *v306;
  _QWORD *v307;
  void **v308;
  uint64_t v309;
  _QWORD *v310;
  _QWORD *v311;
  _QWORD *v312;
  _QWORD *v313;
  unint64_t v314;
  unint64_t v315;
  unint64_t *v316;
  _QWORD *v317;
  unint64_t v318;
  _QWORD *v319;
  void **v320;
  uint64_t v321;
  _QWORD *v322;
  _QWORD *v323;
  BOOL v324;
  char v325;
  size_t v326;
  void *v327;
  _QWORD *v328;
  void **v329;
  uint64_t v330;
  _QWORD *v331;
  _QWORD *v332;
  double v333;
  const void **v334;
  const void *v335;
  uint64_t v336;
  uint64_t v337;
  unint64_t v338;
  std::string *v339;
  simd_double2 v340;
  std::string *v341;
  simd_double2 v342;
  uint64_t v343;
  uint64_t v344;
  _BOOL4 v345;
  _DWORD *v346;
  _QWORD *v347;
  unint64_t v348;
  _QWORD *v349;
  _QWORD *v350;
  unint64_t v351;
  unint64_t v352;
  unint64_t *v353;
  _QWORD *v354;
  unint64_t v355;
  uint64_t v356;
  char v357;
  __int16 v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  double v362;
  double v363;
  double v364;
  double v365;
  double v366;
  double v367;
  float64x2_t v368;
  float64x2_t v369;
  float64x2_t v370;
  float64x2_t v371;
  float64x2_t v372;
  float64x2_t v373;
  float64x2_t v378;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  unsigned int v390;
  uint64_t v391;
  unint64_t v392;
  unsigned int v393;
  unint64_t v394;
  unint64_t v395;
  uint64_t v396;
  unsigned int v397;
  BOOL v398;
  int v399;
  _DWORD *v400;
  unint64_t v401;
  int64x2_t v402;
  uint64_t v403;
  int64x2_t v404;
  std::__shared_weak_count *v405;
  unint64_t *v406;
  unint64_t v407;
  unint64_t v408;
  unint64_t v409;
  unint64_t v410;
  unint64_t v411;
  uint64_t *v412;
  std::__shared_weak_count *v413;
  unint64_t *v414;
  unint64_t v415;
  uint64_t *v416;
  __n128 v417;
  __n128 v418;
  unint64_t v419;
  uint64_t v420;
  unint64_t v421;
  __n128 v422;
  __n128 v423;
  unint64_t v424;
  char *v425;
  int64x2_t *v426;
  unint64_t v427;
  char *v428;
  __int8 *v429;
  __int128 v430;
  __int128 v431;
  __int128 v432;
  uint64_t v433;
  int64x2_t *v434;
  int64x2_t *v435;
  int64x2_t v436;
  int64x2_t v437;
  uint64_t v438;
  int64x2_t *v439;
  uint64_t v440;
  int64x2_t *v441;
  std::__shared_weak_count *v442;
  unint64_t *p_shared_owners;
  unint64_t v444;
  unint64_t *v445;
  unint64_t v446;
  uint64_t *v447;
  unint64_t v448;
  char *v449;
  uint64_t v450;
  __n128 v451;
  __int128 v452;
  __n128 v453;
  int64_t v454;
  std::__shared_weak_count *v455;
  unint64_t *v456;
  int v457;
  int64x2_t *v458;
  unsigned int *v459;
  int v460;
  unint64_t *v461;
  __n128 *v462;
  int64x2_t *v463;
  simd_double2x2 v464;
  simd_double2x2 v465;
  float64x2_t __src;
  __n128 v467;
  __n128 v468;
  __n128 v469;
  __n128 v470;
  void *v471[2];
  __n128 v472;
  simd_double2 v473;
  __n128 v474;
  unint64_t v475;
  char v476;
  __n128 v477;
  char v478;
  float64x2_t v479;
  float64x2_t v480;
  float64x2_t v481;
  void *__p[2];
  _BYTE v483[24];
  double v484;
  float64x2_t v485;
  double v486;
  uint64_t v487;
  std::__shared_weak_count *v488;
  uint64_t v489;
  std::__shared_weak_count *v490;
  std::string v491[3];
  __int128 v492;
  __n128 v493;
  simd_double2 v494;
  __n128 v495;
  unint64_t v496;
  char v497;
  uint64_t v498;
  std::__shared_weak_count *v499;
  char v500;
  unint64_t v501;
  char v502;
  __n128 v503;

  v9 = *(_QWORD *)(a3 + 496);
  v8 = *(_QWORD *)(a3 + 504);
  v10 = *(_QWORD *)a2;
  v11 = *(_DWORD *)(a2 + 8);
  v12 = *(_DWORD *)(a2 + 16);
  if (v8 != v9)
  {
    v13 = (v8 - v9) >> 6;
    while (1)
    {
      v14 = v13 >> 1;
      v15 = v9 + (v13 >> 1 << 6);
      v16 = *(_DWORD *)(v15 + 16);
      _CF = v16 >= v12;
      if (v16 != v12)
        goto LABEL_9;
      if (*(_QWORD *)v15 >= v10)
        break;
LABEL_3:
      v9 = v15 + 64;
      v14 = v13 + ~v14;
LABEL_4:
      v13 = v14;
      if (!v14)
        goto LABEL_12;
    }
    if (*(_QWORD *)v15 != v10)
      goto LABEL_4;
    _CF = *(_DWORD *)(v15 + 8) >= v11;
LABEL_9:
    if (_CF)
      goto LABEL_4;
    goto LABEL_3;
  }
LABEL_12:
  if (v9 == v8 || *(_DWORD *)(v9 + 16) != v12 || *(_QWORD *)v9 != v10 || *(_DWORD *)(v9 + 8) != v11)
    return;
  v18 = sub_20E9DF85C((_QWORD *)(*(_QWORD *)(a1 + 8) + 1784), (uint64_t *)a2);
  if (v18)
    v27 = v18[13];
  else
    v27 = 0;
  v28 = *(_DWORD *)(a2 + 8);
  v29 = *(_DWORD *)(a2 + 16);
  v30 = *(_DWORD *)(a3 + 32);
  v21.n128_u64[0] = *(_QWORD *)(v9 + 32);
  v19.n128_u32[0] = *(_DWORD *)(v9 + 56);
  v20.n128_u64[0] = *(_QWORD *)(a1 + 2176);
  v459 = a4;
  v31 = *a4;
  v488 = 0;
  v487 = 0;
  v490 = 0;
  v489 = 0;
  v32 = *(int64x2_t **)(a1 + 6640);
  v33 = *(unint64_t **)(a1 + 6648);
  if (v32 == (int64x2_t *)v33)
  {
    v34 = *(int64x2_t **)(a1 + 6640);
  }
  else
  {
    v34 = *(int64x2_t **)(a1 + 6648);
    if (*(v33 - 23) >= v31)
    {
      v35 = 0xD37A6F4DE9BD37A7 * (((char *)v33 - (char *)v32) >> 3);
      v36 = *(int64x2_t **)(a1 + 6640);
      do
      {
        v37 = v35 >> 1;
        v38 = (unint64_t *)v36 + 23 * (v35 >> 1);
        v40 = *v38;
        v39 = (int64x2_t *)(v38 + 23);
        v35 += ~(v35 >> 1);
        if (v40 < v31)
          v36 = v39;
        else
          v35 = v37;
      }
      while (v35);
      v34 = *(int64x2_t **)(a1 + 6648);
      if (v36 != (int64x2_t *)v33)
      {
        v34 = v36;
        if (v36->i64[0] == v31)
        {
LABEL_113:
          v104 = 1;
          v105 = v488;
          if (!v488)
            goto LABEL_120;
          goto LABEL_116;
        }
      }
    }
  }
  v21 = (__n128)vcvtq_f64_f32((float32x2_t)v21.n128_u64[0]);
  *(__n128 *)&v491[0].__r_.__value_.__r.__words[1] = v21;
  v491[0].__r_.__value_.__r.__words[0] = v31;
  v491[1].__r_.__value_.__r.__words[0] = v27;
  *(double *)&v491[1].__r_.__value_.__l.__size_ = v20.n128_f64[0] * v19.n128_f32[0];
  v491[1].__r_.__value_.__s.__data_[16] = 0;
  v19 = 0uLL;
  *(_OWORD *)&v491[2].__r_.__value_.__r.__words[1] = 0u;
  v492 = 0u;
  v493 = 0u;
  v499 = 0;
  v498 = 0;
  v491[2].__r_.__value_.__r.__words[0] = a1 + 3144;
  v496 = 0xBFF0000000000000;
  v497 = 0;
  v500 = 0;
  v41 = *(char **)(a1 + 5368);
  v42 = *(char **)(a1 + 5376);
  if (v42 == v41)
    goto LABEL_107;
  v43 = (int64x2_t *)(a1 + 6744);
  v44 = (v42 - v41) >> 4;
  do
  {
    v45 = v44 >> 1;
    v46 = (unsigned int *)&v41[16 * (v44 >> 1)];
    v48 = *v46;
    v47 = (char *)(v46 + 4);
    v44 += ~(v44 >> 1);
    if (v48 < v29)
      v41 = v47;
    else
      v44 = v45;
  }
  while (v44);
  if (v41 == v42 || *(_DWORD *)v41 != v29)
  {
LABEL_107:
    v100 = 1;
    v101 = v490;
    if (!v490)
      goto LABEL_112;
    goto LABEL_108;
  }
  v49 = *((_QWORD *)v41 + 1);
  v491[2].__r_.__value_.__l.__size_ = v49;
  ++*(_DWORD *)(*((_QWORD *)v41 + 1) + 8);
  v50 = *(char **)(a1 + 5176);
  v51 = *(char **)(a1 + 5184);
  if (v51 != v50)
  {
    v52 = (v51 - v50) >> 4;
    do
    {
      v53 = v52 >> 1;
      v54 = (unsigned int *)&v50[16 * (v52 >> 1)];
      v56 = *v54;
      v55 = (char *)(v54 + 4);
      v52 += ~(v52 >> 1);
      if (v56 < v28)
        v50 = v55;
      else
        v52 = v53;
    }
    while (v52);
  }
  if (v50 == v51 || *(_DWORD *)v50 != v28)
  {
    v81 = 0;
    v73 = 0;
    v65 = 0;
    v57 = 0;
LABEL_97:
    if (v49)
      --*(_DWORD *)(v49 + 8);
    if (v57)
      --*(_DWORD *)(v57 + 8);
    if (v65)
      --*(_DWORD *)(v65 + 8);
    if (v73)
      --*(_DWORD *)(v73 + 8);
    if (v81)
      --*(_DWORD *)(v81 + 8);
    goto LABEL_107;
  }
  v57 = *((_QWORD *)v50 + 1);
  v491[2].__r_.__value_.__r.__words[2] = v57;
  ++*(_DWORD *)(*((_QWORD *)v50 + 1) + 8);
  v58 = *(char **)(a1 + 5752);
  v59 = *(char **)(a1 + 5760);
  if (v59 != v58)
  {
    v60 = (v59 - v58) >> 4;
    do
    {
      v61 = v60 >> 1;
      v62 = (unsigned int *)&v58[16 * (v60 >> 1)];
      v64 = *v62;
      v63 = (char *)(v62 + 4);
      v60 += ~(v60 >> 1);
      if (v64 < v29)
        v58 = v63;
      else
        v60 = v61;
    }
    while (v60);
  }
  if (v58 == v59 || *(_DWORD *)v58 != v29)
  {
    v81 = 0;
    v73 = 0;
    v65 = 0;
    goto LABEL_97;
  }
  v65 = *((_QWORD *)v58 + 1);
  *(_QWORD *)&v492 = v65;
  ++*(_DWORD *)(*((_QWORD *)v58 + 1) + 8);
  v66 = *(char **)(a1 + 5848);
  v67 = *(char **)(a1 + 5856);
  if (v67 != v66)
  {
    v68 = (v67 - v66) >> 4;
    do
    {
      v69 = v68 >> 1;
      v70 = (unsigned int *)&v66[16 * (v68 >> 1)];
      v72 = *v70;
      v71 = (char *)(v70 + 4);
      v68 += ~(v68 >> 1);
      if (v72 < v29)
        v66 = v71;
      else
        v68 = v69;
    }
    while (v68);
  }
  if (v66 == v67 || *(_DWORD *)v66 != v29)
  {
    v81 = 0;
    v73 = 0;
    goto LABEL_97;
  }
  v73 = *((_QWORD *)v66 + 1);
  *((_QWORD *)&v492 + 1) = v73;
  ++*(_DWORD *)(*((_QWORD *)v66 + 1) + 8);
  v74 = *(char **)(a1 + 5944);
  v75 = *(char **)(a1 + 5952);
  if (v75 != v74)
  {
    v76 = (v75 - v74) >> 4;
    do
    {
      v77 = v76 >> 1;
      v78 = (unsigned int *)&v74[16 * (v76 >> 1)];
      v80 = *v78;
      v79 = (char *)(v78 + 4);
      v76 += ~(v76 >> 1);
      if (v80 < v29)
        v74 = v79;
      else
        v76 = v77;
    }
    while (v76);
  }
  if (v74 == v75 || *(_DWORD *)v74 != v29)
  {
    v81 = 0;
    goto LABEL_97;
  }
  v81 = *((_QWORD *)v74 + 1);
  v493.n128_u64[0] = v81;
  ++*(_DWORD *)(*((_QWORD *)v74 + 1) + 8);
  v82 = *(char **)(a1 + 5560);
  v83 = *(char **)(a1 + 5568);
  if (v83 != v82)
  {
    v84 = (v83 - v82) >> 4;
    do
    {
      v85 = v84 >> 1;
      v86 = (unsigned int *)&v82[16 * (v84 >> 1)];
      v88 = *v86;
      v87 = (char *)(v86 + 4);
      v84 += ~(v84 >> 1);
      if (v88 < v30)
        v82 = v87;
      else
        v84 = v85;
    }
    while (v84);
  }
  if (v82 == v83)
    goto LABEL_97;
  v463 = v34;
  if (*(_DWORD *)v82 != v30)
    goto LABEL_97;
  v89 = *((_QWORD *)v82 + 1);
  v493.n128_u64[1] = v89;
  ++*(_DWORD *)(*((_QWORD *)v82 + 1) + 8);
  if (!*(_BYTE *)(v49 + 20)
    && !*(_BYTE *)(v57 + 20)
    && !*(_BYTE *)(v65 + 20)
    && !*(_BYTE *)(v73 + 20)
    && !*(_BYTE *)(v81 + 20)
    && !*(_BYTE *)(v89 + 20))
  {
    --*(_DWORD *)(v49 + 8);
    --*(_DWORD *)(v57 + 8);
    v19 = 0uLL;
    *(_OWORD *)&v491[2].__r_.__value_.__r.__words[1] = 0u;
    --*(_DWORD *)(v65 + 8);
    --*(_DWORD *)(v73 + 8);
    v492 = 0u;
    --*(_DWORD *)(v81 + 8);
    v493.n128_u64[0] = 0;
    --*(_DWORD *)(v89 + 8);
    v100 = 1;
    v101 = v490;
    if (!v490)
      goto LABEL_112;
    goto LABEL_108;
  }
  *(_QWORD *)&__src.f64[0] = v31;
  *(_QWORD *)&__src.f64[1] = v31;
  v21 = *(__n128 *)&v491[1].__r_.__value_.__r.__words[2];
  v467 = *(__n128 *)&v491[0].__r_.__value_.__r.__words[1];
  v468 = *(__n128 *)&v491[1].__r_.__value_.__l.__data_;
  v469 = *(__n128 *)&v491[1].__r_.__value_.__r.__words[2];
  v470 = *(__n128 *)&v491[2].__r_.__value_.__r.__words[1];
  *(_OWORD *)v471 = v492;
  v472 = v493;
  v473 = v494;
  v474 = v495;
  v475 = v496;
  v476 = v497;
  v477 = 0uLL;
  v498 = 0;
  v499 = 0;
  v478 = 0;
  if (v33 == (unint64_t *)v34 || v34->i64[0] != v31)
  {
    v450 = (char *)v34 - (char *)v32;
    v454 = 0xD37A6F4DE9BD37A7 * (((char *)v34 - (char *)v32) >> 3);
    v90 = *(_QWORD *)(a1 + 6656);
    if ((unint64_t)v33 >= v90)
    {
      v408 = 0xD37A6F4DE9BD37A7 * (((char *)v33 - (char *)v32) >> 3) + 1;
      if (v408 > 0x1642C8590B21642)
        sub_20E867F44();
      v409 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(v90 - (_QWORD)v32) >> 3);
      v410 = 0xA6F4DE9BD37A6F4ELL * ((uint64_t)(v90 - (_QWORD)v32) >> 3);
      if (v410 > v408)
        v408 = v410;
      if (v409 >= 0xB21642C8590B21)
        v411 = 0x1642C8590B21642;
      else
        v411 = v408;
      *(_QWORD *)&v483[16] = a1 + 6656;
      if (v411)
      {
        if (v411 > 0x1642C8590B21642)
          sub_20E877A38();
        v449 = (char *)operator new(184 * v411);
      }
      else
      {
        v449 = 0;
      }
      __p[0] = v449;
      __p[1] = &v449[184 * v454];
      v462 = (__n128 *)__p[1];
      *(void **)v483 = __p[1];
      *(_QWORD *)&v483[8] = &v449[184 * v411];
      if (v454 == v411)
      {
        if (v450 < 1)
        {
          if (v32 == v463)
            v421 = 1;
          else
            v421 = 2 * v454;
          if (v421 > 0x1642C8590B21642)
            sub_20E877A38();
          __p[0] = operator new(184 * v421);
          v462 = (__n128 *)((char *)__p[0] + 184 * (v421 >> 2));
          __p[1] = v462;
          *(_QWORD *)&v483[8] = (char *)__p[0] + 184 * v421;
          if (v449)
            operator delete(v449);
        }
        else
        {
          v420 = v454 + 2;
          if (v454 >= -1)
            v420 = v454 + 1;
          v462 = (__n128 *)((char *)__p[1] - 184 * (v420 >> 1));
          __p[1] = v462;
        }
      }
      v462->n128_u64[0] = v31;
      v462->n128_u64[1] = v31;
      v462[1] = v467;
      v422 = v469;
      v462[2] = v468;
      v462[3] = v422;
      v423 = *(__n128 *)v471;
      v462[4] = v470;
      v462[5] = v423;
      v462[6] = v472;
      v462[7] = (__n128)v473;
      v462[8] = v474;
      v424 = v475;
      v462[9].n128_u8[8] = v476;
      v462[9].n128_u64[0] = v424;
      v462[10] = v477;
      v477 = 0uLL;
      v462[11].n128_u8[0] = v478;
      v425 = &v462[11].n128_i8[8];
      *(_QWORD *)v483 = (char *)v462 + 184;
      v426 = *(int64x2_t **)(a1 + 6640);
      if (v426 != v463)
      {
        v427 = 0;
        do
        {
          v428 = (char *)v462 + v427;
          v429 = &v463->i8[v427];
          *((_QWORD *)v428 - 23) = *(_QWORD *)((char *)&v463[-11] + v427 - 8);
          *((_QWORD *)v428 - 22) = v463[-11].i64[v427 / 8];
          *(int64x2_t *)(v428 - 168) = *(int64x2_t *)((char *)&v463[-10] + v427 - 8);
          v430 = *(__int128 *)((char *)&v463[-9] + v427 - 8);
          *(int64x2_t *)(v428 - 136) = *(int64x2_t *)((char *)&v463[-8] + v427 - 8);
          *(_OWORD *)(v428 - 152) = v430;
          v431 = *(__int128 *)((char *)&v463[-7] + v427 - 8);
          v432 = *(__int128 *)((char *)&v463[-6] + v427 - 8);
          v21 = *(__n128 *)((char *)&v463[-5] + v427 - 8);
          *(__n128 *)(v428 - 88) = v21;
          *(_OWORD *)(v428 - 104) = v432;
          *(_OWORD *)(v428 - 120) = v431;
          *(int64x2_t *)(v428 - 72) = *(int64x2_t *)((char *)&v463[-4] + v427 - 8);
          *(int64x2_t *)(v428 - 56) = *(int64x2_t *)((char *)&v463[-3] + v427 - 8);
          v433 = *(_QWORD *)((char *)&v463[-2] + v427 - 8);
          *(v428 - 32) = v463[-2].i8[v427];
          *((_QWORD *)v428 - 5) = v433;
          *(int64x2_t *)(v428 - 24) = *(int64x2_t *)((char *)&v463[-1] + v427 - 8);
          *((_QWORD *)v429 - 3) = 0;
          *((_QWORD *)v429 - 2) = 0;
          *(v428 - 8) = v463->i8[v427 - 8];
          v427 -= 184;
        }
        while (&v463->i8[v427] != (__int8 *)v426);
        v462 = (__n128 *)((char *)v462 + v427);
      }
      v434 = *(int64x2_t **)(a1 + 6648);
      if (v434 != v463)
      {
        v435 = v463;
        do
        {
          *(_QWORD *)v425 = v435->i64[0];
          *((_QWORD *)v425 + 1) = v435->i64[1];
          *((int64x2_t *)v425 + 1) = v435[1];
          v436 = v435[3];
          *((int64x2_t *)v425 + 2) = v435[2];
          *((int64x2_t *)v425 + 3) = v436;
          v437 = v435[4];
          v21 = (__n128)v435[6];
          *((int64x2_t *)v425 + 5) = v435[5];
          *((__n128 *)v425 + 6) = v21;
          *((int64x2_t *)v425 + 4) = v437;
          *((int64x2_t *)v425 + 7) = v435[7];
          *((int64x2_t *)v425 + 8) = v435[8];
          v438 = v435[9].i64[0];
          v425[152] = v435[9].i8[8];
          *((_QWORD *)v425 + 18) = v438;
          *((int64x2_t *)v425 + 10) = v435[10];
          v435[10].i64[0] = 0;
          v435[10].i64[1] = 0;
          v425[176] = v435[11].i8[0];
          v425 += 184;
          v435 = (int64x2_t *)((char *)v435 + 184);
        }
        while (v435 != v434);
        v463 = *(int64x2_t **)(a1 + 6648);
      }
      v439 = *(int64x2_t **)(a1 + 6640);
      *(_QWORD *)(a1 + 6640) = v462;
      *(_QWORD *)(a1 + 6648) = v425;
      v440 = *(_QWORD *)(a1 + 6656);
      *(_QWORD *)(a1 + 6656) = *(_QWORD *)&v483[8];
      *(_QWORD *)&v483[8] = v440;
      __p[1] = v439;
      __p[0] = v439;
      if (v463 != v439)
      {
        v441 = v463;
        do
        {
          *(_QWORD *)v483 = (char *)v441 - 184;
          v442 = (std::__shared_weak_count *)v441[-1].i64[0];
          if (v442)
          {
            p_shared_owners = (unint64_t *)&v442->__shared_owners_;
            do
              v444 = __ldaxr(p_shared_owners);
            while (__stlxr(v444 - 1, p_shared_owners));
            if (!v444)
            {
              ((void (*)(std::__shared_weak_count *))v442->__on_zero_shared)(v442);
              std::__shared_weak_count::__release_weak(v442);
            }
          }
          v441 = *(int64x2_t **)v483;
        }
        while (*(int64x2_t **)v483 != v439);
        v463 = (int64x2_t *)__p[0];
      }
      if (v463)
        operator delete(v463);
    }
    else if (v34 == (int64x2_t *)v33)
    {
      *v33 = v31;
      v416 = &v32->i64[((char *)v34 - (char *)v32) >> 3];
      v416[1] = v31;
      *((__n128 *)v416 + 1) = v467;
      v417 = v469;
      *((__n128 *)v416 + 2) = v468;
      *((__n128 *)v416 + 3) = v417;
      v418 = v470;
      v21 = v472;
      *((_OWORD *)v416 + 5) = *(_OWORD *)v471;
      *((__n128 *)v416 + 6) = v21;
      *((__n128 *)v416 + 4) = v418;
      *((simd_double2 *)v416 + 7) = v473;
      *((__n128 *)v416 + 8) = v474;
      v419 = v475;
      *((_BYTE *)v416 + 152) = v476;
      v416[18] = v419;
      v416[20] = 0;
      v416[21] = 0;
      v477 = 0uLL;
      *((_BYTE *)v416 + 176) = 0;
      *(_QWORD *)(a1 + 6648) = v33 + 23;
    }
    else
    {
      v465.columns[0] = *(simd_double2 *)&v491[0].__r_.__value_.__r.__words[1];
      *(_OWORD *)__p = *(_OWORD *)&v491[1].__r_.__value_.__l.__data_;
      *(_OWORD *)v483 = *(_OWORD *)&v491[1].__r_.__value_.__r.__words[2];
      v21 = v470;
      v452 = *(_OWORD *)v471;
      v453 = v470;
      v451 = v472;
      v464.columns[0] = v494;
      v503 = v495;
      v502 = v497;
      v501 = v496;
      v91 = v33;
      v477 = 0uLL;
      v92 = v33 - 23;
      if ((unint64_t)v33 >= 0xB8)
      {
        v93 = (__n128 *)(v33 - 23);
        v91 = v33;
        do
        {
          *v91 = v93->n128_u64[0];
          v91[1] = v93->n128_u64[1];
          *((__n128 *)v91 + 1) = v93[1];
          v94 = v93[3];
          *((__n128 *)v91 + 2) = v93[2];
          *((__n128 *)v91 + 3) = v94;
          v95 = v93[4];
          v21 = v93[6];
          *((__n128 *)v91 + 5) = v93[5];
          *((__n128 *)v91 + 6) = v21;
          *((__n128 *)v91 + 4) = v95;
          *((__n128 *)v91 + 7) = v93[7];
          *((__n128 *)v91 + 8) = v93[8];
          v96 = v93[9].n128_u64[0];
          *((_BYTE *)v91 + 152) = v93[9].n128_u8[8];
          v91[18] = v96;
          *((__n128 *)v91 + 10) = v93[10];
          v93[10].n128_u64[0] = 0;
          v93[10].n128_u64[1] = 0;
          *((_BYTE *)v91 + 176) = v93[11].n128_u8[0];
          v91 += 23;
          v93 = (__n128 *)((char *)v93 + 184);
        }
        while (v93 < (__n128 *)v33);
      }
      *(_QWORD *)(a1 + 6648) = v91;
      v97 = v34;
      if (v33 != &v34[11].u64[1])
      {
        v98 = (int64x2_t *)(v33 - 23);
        v99 = v33;
        do
        {
          v401 = v98[-12].u64[1];
          v98 = (int64x2_t *)((char *)v98 - 184);
          *(v99 - 23) = v401;
          v99 -= 23;
          v99[1] = v98->u64[1];
          *((int64x2_t *)v99 + 1) = v98[1];
          v402 = v98[3];
          *((int64x2_t *)v99 + 2) = v98[2];
          *((int64x2_t *)v99 + 3) = v402;
          v99[8] = v98[4].u64[0];
          v99[9] = v98[4].u64[1];
          v99[10] = v98[5].u64[0];
          v99[11] = v98[5].u64[1];
          v99[12] = v98[6].u64[0];
          v99[13] = v98[6].u64[1];
          *((int64x2_t *)v99 + 7) = v98[7];
          *((int64x2_t *)v99 + 8) = v98[8];
          v403 = v98[9].i64[0];
          *((_BYTE *)v99 + 152) = v98[9].i8[8];
          v99[18] = v403;
          v404 = v98[10];
          v98[10].i64[0] = 0;
          v98[10].i64[1] = 0;
          v405 = (std::__shared_weak_count *)v99[21];
          *((int64x2_t *)v99 + 10) = v404;
          if (v405)
          {
            v406 = (unint64_t *)&v405->__shared_owners_;
            do
              v407 = __ldaxr(v406);
            while (__stlxr(v407 - 1, v406));
            if (!v407)
            {
              v455 = v405;
              v456 = v99;
              v461 = v92;
              v458 = v98;
              ((void (*)(std::__shared_weak_count *))v405->__on_zero_shared)(v405);
              std::__shared_weak_count::__release_weak(v455);
              v99 = v456;
              v98 = v458;
              v92 = v461;
              v97 = v463;
            }
          }
          *((_BYTE *)v33 - 8) = *((_BYTE *)v92 - 8);
          v33 = v99;
          v92 = (unint64_t *)v98;
        }
        while (v98 != v97);
      }
      *v97 = vdupq_n_s64(v31);
      v412 = &v32->i64[23 * v454];
      *((_OWORD *)v412 + 1) = v465.columns[0];
      *((_OWORD *)v412 + 2) = *(_OWORD *)__p;
      *((_OWORD *)v412 + 3) = *(_OWORD *)v483;
      *((__n128 *)v412 + 4) = v453;
      *((_OWORD *)v412 + 5) = v452;
      *((__n128 *)v412 + 6) = v451;
      *((_OWORD *)v412 + 7) = v464.columns[0];
      *((__n128 *)v412 + 8) = v503;
      v412[18] = v501;
      *((_BYTE *)v412 + 152) = v502;
      v413 = (std::__shared_weak_count *)v412[21];
      v412[20] = 0;
      v412[21] = 0;
      if (v413)
      {
        v414 = (unint64_t *)&v413->__shared_owners_;
        do
          v415 = __ldaxr(v414);
        while (__stlxr(v415 - 1, v414));
        if (!v415)
        {
          ((void (*)(std::__shared_weak_count *))v413->__on_zero_shared)(v413);
          std::__shared_weak_count::__release_weak(v413);
        }
      }
      v32[11].i8[184 * v454] = 0;
    }
    if (v477.n128_u64[1])
    {
      v445 = (unint64_t *)(v477.n128_u64[1] + 8);
      do
        v446 = __ldaxr(v445);
      while (__stlxr(v446 - 1, v445));
      if (!v446)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v477.n128_u64[1] + 16))(v477.n128_u64[1]);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v477.n128_u64[1]);
      }
    }
  }
  *(_BYTE *)(a1 + 6762) = 0;
  *(_BYTE *)(a1 + 6760) = 0;
  v20 = (__n128)xmmword_210378060;
  v19 = (__n128)vaddq_s64(*v43, (int64x2_t)xmmword_210378060);
  *v43 = (int64x2_t)v19;
  if (v499)
  {
    v447 = &v499->__shared_owners_;
    do
      v448 = __ldaxr((unint64_t *)v447);
    while (__stlxr(v448 - 1, (unint64_t *)v447));
    if (!v448)
    {
      ((void (*)(std::__shared_weak_count *))v499->__on_zero_shared)(v499);
      std::__shared_weak_count::__release_weak(v499);
    }
  }
  v100 = 0;
  v101 = v490;
  if (v490)
  {
LABEL_108:
    v102 = (unint64_t *)&v101->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
LABEL_112:
  if ((v100 & 1) != 0)
    goto LABEL_113;
  v104 = 0;
  *(_BYTE *)(a1 + 7828) = 0;
  *(_DWORD *)(a1 + 7824) = 0;
  v105 = v488;
  if (!v488)
    goto LABEL_120;
LABEL_116:
  v106 = (unint64_t *)&v105->__shared_owners_;
  do
    v107 = __ldaxr(v106);
  while (__stlxr(v107 - 1, v106));
  if (!v107)
  {
    ((void (*)(std::__shared_weak_count *, __n128, __n128, __n128))v105->__on_zero_shared)(v105, v19, v20, v21);
    std::__shared_weak_count::__release_weak(v105);
  }
LABEL_120:
  if (v104)
  {
    v108 = *(char **)(a1 + 5560);
    v109 = *(char **)(a1 + 5568);
    if (v109 != v108)
    {
      v110 = (v109 - v108) >> 4;
      do
      {
        v111 = v110 >> 1;
        v112 = &v108[16 * (v110 >> 1)];
        v114 = *(_DWORD *)v112;
        v113 = v112 + 16;
        v110 += ~(v110 >> 1);
        if (v114 < v30)
          v108 = v113;
        else
          v110 = v111;
      }
      while (v110);
    }
    if ((v108 == v109 || *(_DWORD *)v108 != v30)
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOLandmarkFactorUtil.h", 857, (uint64_t)"linear_system.template findVariable<LandmarkType>(landmark_id) != linear_system.template endVariable<LandmarkType>()", 116, (uint64_t)"Landmark with the given ID was not found.", 41, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_476;
    }
    v115 = *(_QWORD **)(a1 + 6640);
    v116 = *(_QWORD **)(a1 + 6648);
    if (v116 != v115)
    {
      v117 = 0xD37A6F4DE9BD37A7 * (v116 - v115);
      do
      {
        v118 = v117 >> 1;
        v119 = &v115[23 * (v117 >> 1)];
        v121 = *v119;
        v120 = v119 + 23;
        v117 += ~(v117 >> 1);
        if (v121 < v31)
          v115 = v120;
        else
          v117 = v118;
      }
      while (v117);
      if (v116 != v115
        && *v115 == v31
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOLandmarkFactorUtil.h", 862, (uint64_t)"linear_system.graph().template findFactor<FactorType>(factor_cnt) == linear_system.graph().template endFactor<FactorType>()", 123, (uint64_t)"Factor with the same ID already exists.", 39, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_476;
      }
    }
    sub_20E863438((uint64_t)&__src);
    v122 = *(char **)(a1 + 5560);
    v123 = *(char **)(a1 + 5568);
    if (v123 != v122)
    {
      v124 = (v123 - v122) >> 4;
      do
      {
        v125 = v124 >> 1;
        v126 = &v122[16 * (v124 >> 1)];
        v128 = *(_DWORD *)v126;
        v127 = v126 + 16;
        v124 += ~(v124 >> 1);
        if (v128 < v30)
          v122 = v127;
        else
          v124 = v125;
      }
      while (v124);
    }
    if (v122 == v123 || *(_DWORD *)v122 != v30)
    {
      v134 = 1;
    }
    else
    {
      v129 = sub_20E86A980(&v467, (uint64_t)"error: landmark variable ", 25);
      sub_20FC273AC((uint64_t)__p);
      if (v483[7] >= 0)
        v130 = __p;
      else
        v130 = (void **)__p[0];
      if (v483[7] >= 0)
        v131 = v483[7];
      else
        v131 = (uint64_t)__p[1];
      v132 = sub_20E86A980(v129, (uint64_t)v130, v131);
      sub_20E86A980(v132, (uint64_t)" with ID ", 9);
      v133 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v133, (uint64_t)" was not found.\n", 16);
      if ((v483[7] & 0x80000000) != 0)
        operator delete(__p[0]);
      v134 = 0;
    }
    v135 = *(char **)(a1 + 5368);
    v136 = *(char **)(a1 + 5376);
    v137 = v135;
    if (v136 != v135)
    {
      v138 = (v136 - v135) >> 4;
      v137 = *(char **)(a1 + 5368);
      do
      {
        v139 = v138 >> 1;
        v140 = (unsigned int *)&v137[16 * (v138 >> 1)];
        v142 = *v140;
        v141 = (char *)(v140 + 4);
        v138 += ~(v138 >> 1);
        if (v142 < v29)
          v137 = v141;
        else
          v138 = v139;
      }
      while (v138);
    }
    if (v137 == v136 || *(_DWORD *)v137 != v29)
    {
      v160 = sub_20E86A980(&v467, (uint64_t)"error: variable ", 16);
      sub_20F622C70((uint64_t)__p);
      if (v483[7] >= 0)
        v161 = __p;
      else
        v161 = (void **)__p[0];
      if (v483[7] >= 0)
        v162 = v483[7];
      else
        v162 = (uint64_t)__p[1];
      v163 = sub_20E86A980(v160, (uint64_t)v161, v162);
      sub_20E86A980(v163, (uint64_t)" with ID ", 9);
      v164 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v164, (uint64_t)" not found\n", 11);
      if ((v483[7] & 0x80000000) != 0)
        operator delete(__p[0]);
      v159 = 0;
      v460 = 0;
    }
    else
    {
      if (v136 != v135)
      {
        v143 = (v136 - v135) >> 4;
        do
        {
          v144 = v143 >> 1;
          v145 = (unsigned int *)&v135[16 * (v143 >> 1)];
          v147 = *v145;
          v146 = (char *)(v145 + 4);
          v143 += ~(v143 >> 1);
          if (v147 < v29)
            v135 = v146;
          else
            v143 = v144;
        }
        while (v143);
      }
      v457 = v134;
      if (v135 == v136 || *(_DWORD *)v135 != v29)
        v135 = *(char **)(a1 + 5376);
      v148 = *((_QWORD *)v135 + 1);
      v149 = sub_20E86A980(&v467, (uint64_t)"debug: variable ", 16);
      sub_20F622C70((uint64_t)__p);
      if (v483[7] >= 0)
        v150 = __p;
      else
        v150 = (void **)__p[0];
      if (v483[7] >= 0)
        v151 = v483[7];
      else
        v151 = (uint64_t)__p[1];
      v152 = sub_20E86A980(v149, (uint64_t)v150, v151);
      sub_20E86A980(v152, (uint64_t)" with ID ", 9);
      v153 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v153, (uint64_t)" found (", 8);
      v154 = (_QWORD *)std::ostream::operator<<();
      v155 = sub_20E86A980(v154, (uint64_t)", ", 2);
      if (*(_BYTE *)(v148 + 20))
        v156 = "free";
      else
        v156 = "fixed";
      if (*(_BYTE *)(v148 + 20))
        v157 = 4;
      else
        v157 = 5;
      v158 = sub_20E86A980(v155, (uint64_t)v156, v157);
      sub_20E86A980(v158, (uint64_t)")\n", 2);
      v159 = v457;
      if ((v483[7] & 0x80000000) != 0)
        operator delete(__p[0]);
      v460 = *(unsigned __int8 *)(v148 + 20);
    }
    v165 = *(char **)(a1 + 5176);
    v166 = *(char **)(a1 + 5184);
    v167 = v165;
    if (v166 != v165)
    {
      v168 = (v166 - v165) >> 4;
      v167 = *(char **)(a1 + 5176);
      do
      {
        v169 = v168 >> 1;
        v170 = (unsigned int *)&v167[16 * (v168 >> 1)];
        v172 = *v170;
        v171 = (char *)(v170 + 4);
        v168 += ~(v168 >> 1);
        if (v172 < v28)
          v167 = v171;
        else
          v168 = v169;
      }
      while (v168);
    }
    if (v167 == v166 || *(_DWORD *)v167 != v28)
    {
      v190 = sub_20E86A980(&v467, (uint64_t)"error: variable ", 16);
      sub_20F622E88((uint64_t)__p);
      if (v483[7] >= 0)
        v191 = __p;
      else
        v191 = (void **)__p[0];
      if (v483[7] >= 0)
        v192 = v483[7];
      else
        v192 = (uint64_t)__p[1];
      v193 = sub_20E86A980(v190, (uint64_t)v191, v192);
      sub_20E86A980(v193, (uint64_t)" with ID ", 9);
      v194 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v194, (uint64_t)" not found\n", 11);
      if ((v483[7] & 0x80000000) != 0)
        operator delete(__p[0]);
      v189 = 0;
    }
    else
    {
      if (v166 != v165)
      {
        v173 = (v166 - v165) >> 4;
        do
        {
          v174 = v173 >> 1;
          v175 = (unsigned int *)&v165[16 * (v173 >> 1)];
          v177 = *v175;
          v176 = (char *)(v175 + 4);
          v173 += ~(v173 >> 1);
          if (v177 < v28)
            v165 = v176;
          else
            v173 = v174;
        }
        while (v173);
      }
      if (v165 == v166 || *(_DWORD *)v165 != v28)
        v165 = *(char **)(a1 + 5184);
      v178 = *((_QWORD *)v165 + 1);
      v179 = sub_20E86A980(&v467, (uint64_t)"debug: variable ", 16);
      sub_20F622E88((uint64_t)__p);
      if (v483[7] >= 0)
        v180 = __p;
      else
        v180 = (void **)__p[0];
      if (v483[7] >= 0)
        v181 = v483[7];
      else
        v181 = (uint64_t)__p[1];
      v182 = sub_20E86A980(v179, (uint64_t)v180, v181);
      sub_20E86A980(v182, (uint64_t)" with ID ", 9);
      v183 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v183, (uint64_t)" found (", 8);
      v184 = (_QWORD *)std::ostream::operator<<();
      v185 = sub_20E86A980(v184, (uint64_t)", ", 2);
      if (*(_BYTE *)(v178 + 20))
        v186 = "free";
      else
        v186 = "fixed";
      if (*(_BYTE *)(v178 + 20))
        v187 = 4;
      else
        v187 = 5;
      v188 = sub_20E86A980(v185, (uint64_t)v186, v187);
      sub_20E86A980(v188, (uint64_t)")\n", 2);
      v189 = v159;
      if ((v483[7] & 0x80000000) != 0)
        operator delete(__p[0]);
      v460 |= *(unsigned __int8 *)(v178 + 20);
    }
    v195 = *(char **)(a1 + 5752);
    v196 = *(char **)(a1 + 5760);
    v197 = v195;
    if (v196 != v195)
    {
      v198 = (v196 - v195) >> 4;
      v197 = *(char **)(a1 + 5752);
      do
      {
        v199 = v198 >> 1;
        v200 = (unsigned int *)&v197[16 * (v198 >> 1)];
        v202 = *v200;
        v201 = (char *)(v200 + 4);
        v198 += ~(v198 >> 1);
        if (v202 < v29)
          v197 = v201;
        else
          v198 = v199;
      }
      while (v198);
    }
    if (v197 == v196 || *(_DWORD *)v197 != v29)
    {
      v219 = sub_20E86A980(&v467, (uint64_t)"error: variable ", 16);
      sub_20F6230A4((uint64_t)__p);
      if (v483[7] >= 0)
        v220 = __p;
      else
        v220 = (void **)__p[0];
      if (v483[7] >= 0)
        v221 = v483[7];
      else
        v221 = (uint64_t)__p[1];
      v222 = sub_20E86A980(v219, (uint64_t)v220, v221);
      sub_20E86A980(v222, (uint64_t)" with ID ", 9);
      v223 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v223, (uint64_t)" not found\n", 11);
      if ((v483[7] & 0x80000000) != 0)
        operator delete(__p[0]);
      v189 = 0;
    }
    else
    {
      if (v196 != v195)
      {
        v203 = (v196 - v195) >> 4;
        do
        {
          v204 = v203 >> 1;
          v205 = (unsigned int *)&v195[16 * (v203 >> 1)];
          v207 = *v205;
          v206 = (char *)(v205 + 4);
          v203 += ~(v203 >> 1);
          if (v207 < v29)
            v195 = v206;
          else
            v203 = v204;
        }
        while (v203);
      }
      if (v195 == v196 || *(_DWORD *)v195 != v29)
        v195 = *(char **)(a1 + 5760);
      v208 = *((_QWORD *)v195 + 1);
      v209 = sub_20E86A980(&v467, (uint64_t)"debug: variable ", 16);
      sub_20F6230A4((uint64_t)__p);
      if (v483[7] >= 0)
        v210 = __p;
      else
        v210 = (void **)__p[0];
      if (v483[7] >= 0)
        v211 = v483[7];
      else
        v211 = (uint64_t)__p[1];
      v212 = sub_20E86A980(v209, (uint64_t)v210, v211);
      sub_20E86A980(v212, (uint64_t)" with ID ", 9);
      v213 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v213, (uint64_t)" found (", 8);
      v214 = (_QWORD *)std::ostream::operator<<();
      v215 = sub_20E86A980(v214, (uint64_t)", ", 2);
      if (*(_BYTE *)(v208 + 20))
        v216 = "free";
      else
        v216 = "fixed";
      if (*(_BYTE *)(v208 + 20))
        v217 = 4;
      else
        v217 = 5;
      v218 = sub_20E86A980(v215, (uint64_t)v216, v217);
      sub_20E86A980(v218, (uint64_t)")\n", 2);
      if ((v483[7] & 0x80000000) != 0)
        operator delete(__p[0]);
      v460 |= *(unsigned __int8 *)(v208 + 20);
    }
    v224 = *(char **)(a1 + 5848);
    v225 = *(char **)(a1 + 5856);
    v226 = v224;
    if (v225 != v224)
    {
      v227 = (v225 - v224) >> 4;
      v226 = *(char **)(a1 + 5848);
      do
      {
        v228 = v227 >> 1;
        v229 = (unsigned int *)&v226[16 * (v227 >> 1)];
        v231 = *v229;
        v230 = (char *)(v229 + 4);
        v227 += ~(v227 >> 1);
        if (v231 < v29)
          v226 = v230;
        else
          v227 = v228;
      }
      while (v227);
    }
    if (v226 == v225 || *(_DWORD *)v226 != v29)
    {
      v248 = sub_20E86A980(&v467, (uint64_t)"error: variable ", 16);
      sub_20F6232BC((uint64_t)__p);
      if (v483[7] >= 0)
        v249 = __p;
      else
        v249 = (void **)__p[0];
      if (v483[7] >= 0)
        v250 = v483[7];
      else
        v250 = (uint64_t)__p[1];
      v251 = sub_20E86A980(v248, (uint64_t)v249, v250);
      sub_20E86A980(v251, (uint64_t)" with ID ", 9);
      v252 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v252, (uint64_t)" not found\n", 11);
      if ((v483[7] & 0x80000000) != 0)
        operator delete(__p[0]);
      v189 = 0;
    }
    else
    {
      if (v225 != v224)
      {
        v232 = (v225 - v224) >> 4;
        do
        {
          v233 = v232 >> 1;
          v234 = (unsigned int *)&v224[16 * (v232 >> 1)];
          v236 = *v234;
          v235 = (char *)(v234 + 4);
          v232 += ~(v232 >> 1);
          if (v236 < v29)
            v224 = v235;
          else
            v232 = v233;
        }
        while (v232);
      }
      if (v224 == v225 || *(_DWORD *)v224 != v29)
        v224 = *(char **)(a1 + 5856);
      v237 = *((_QWORD *)v224 + 1);
      v238 = sub_20E86A980(&v467, (uint64_t)"debug: variable ", 16);
      sub_20F6232BC((uint64_t)__p);
      if (v483[7] >= 0)
        v239 = __p;
      else
        v239 = (void **)__p[0];
      if (v483[7] >= 0)
        v240 = v483[7];
      else
        v240 = (uint64_t)__p[1];
      v241 = sub_20E86A980(v238, (uint64_t)v239, v240);
      sub_20E86A980(v241, (uint64_t)" with ID ", 9);
      v242 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v242, (uint64_t)" found (", 8);
      v243 = (_QWORD *)std::ostream::operator<<();
      v244 = sub_20E86A980(v243, (uint64_t)", ", 2);
      if (*(_BYTE *)(v237 + 20))
        v245 = "free";
      else
        v245 = "fixed";
      if (*(_BYTE *)(v237 + 20))
        v246 = 4;
      else
        v246 = 5;
      v247 = sub_20E86A980(v244, (uint64_t)v245, v246);
      sub_20E86A980(v247, (uint64_t)")\n", 2);
      if ((v483[7] & 0x80000000) != 0)
        operator delete(__p[0]);
      v460 |= *(unsigned __int8 *)(v237 + 20);
    }
    v253 = *(char **)(a1 + 5944);
    v254 = *(char **)(a1 + 5952);
    v255 = v253;
    if (v254 != v253)
    {
      v256 = (v254 - v253) >> 4;
      v255 = *(char **)(a1 + 5944);
      do
      {
        v257 = v256 >> 1;
        v258 = (unsigned int *)&v255[16 * (v256 >> 1)];
        v260 = *v258;
        v259 = (char *)(v258 + 4);
        v256 += ~(v256 >> 1);
        if (v260 < v29)
          v255 = v259;
        else
          v256 = v257;
      }
      while (v256);
    }
    if (v255 == v254 || *(_DWORD *)v255 != v29)
    {
      v278 = sub_20E86A980(&v467, (uint64_t)"error: variable ", 16);
      sub_20F6234D8((uint64_t)__p);
      if (v483[7] >= 0)
        v279 = __p;
      else
        v279 = (void **)__p[0];
      if (v483[7] >= 0)
        v280 = v483[7];
      else
        v280 = (uint64_t)__p[1];
      v281 = sub_20E86A980(v278, (uint64_t)v279, v280);
      sub_20E86A980(v281, (uint64_t)" with ID ", 9);
      v282 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v282, (uint64_t)" not found\n", 11);
      if ((v483[7] & 0x80000000) != 0)
        operator delete(__p[0]);
      v277 = 0;
    }
    else
    {
      if (v254 != v253)
      {
        v261 = (v254 - v253) >> 4;
        do
        {
          v262 = v261 >> 1;
          v263 = (unsigned int *)&v253[16 * (v261 >> 1)];
          v265 = *v263;
          v264 = (char *)(v263 + 4);
          v261 += ~(v261 >> 1);
          if (v265 < v29)
            v253 = v264;
          else
            v261 = v262;
        }
        while (v261);
      }
      if (v253 == v254 || *(_DWORD *)v253 != v29)
        v253 = *(char **)(a1 + 5952);
      v266 = *((_QWORD *)v253 + 1);
      v267 = sub_20E86A980(&v467, (uint64_t)"debug: variable ", 16);
      sub_20F6234D8((uint64_t)__p);
      if (v483[7] >= 0)
        v268 = __p;
      else
        v268 = (void **)__p[0];
      if (v483[7] >= 0)
        v269 = v483[7];
      else
        v269 = (uint64_t)__p[1];
      v270 = sub_20E86A980(v267, (uint64_t)v268, v269);
      sub_20E86A980(v270, (uint64_t)" with ID ", 9);
      v271 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v271, (uint64_t)" found (", 8);
      v272 = (_QWORD *)std::ostream::operator<<();
      v273 = sub_20E86A980(v272, (uint64_t)", ", 2);
      if (*(_BYTE *)(v266 + 20))
        v274 = "free";
      else
        v274 = "fixed";
      if (*(_BYTE *)(v266 + 20))
        v275 = 4;
      else
        v275 = 5;
      v276 = sub_20E86A980(v273, (uint64_t)v274, v275);
      sub_20E86A980(v276, (uint64_t)")\n", 2);
      v277 = v189;
      if ((v483[7] & 0x80000000) != 0)
        operator delete(__p[0]);
      v460 |= *(unsigned __int8 *)(v266 + 20);
    }
    v283 = *(char **)(a1 + 5560);
    v284 = *(char **)(a1 + 5568);
    v285 = v283;
    if (v284 != v283)
    {
      v286 = (v284 - v283) >> 4;
      v285 = *(char **)(a1 + 5560);
      do
      {
        v287 = v286 >> 1;
        v288 = (unsigned int *)&v285[16 * (v286 >> 1)];
        v290 = *v288;
        v289 = (char *)(v288 + 4);
        v286 += ~(v286 >> 1);
        if (v290 < v30)
          v285 = v289;
        else
          v286 = v287;
      }
      while (v286);
    }
    if (v285 == v284 || *(_DWORD *)v285 != v30)
    {
      v307 = sub_20E86A980(&v467, (uint64_t)"error: variable ", 16);
      sub_20FC273AC((uint64_t)__p);
      if (v483[7] >= 0)
        v308 = __p;
      else
        v308 = (void **)__p[0];
      if (v483[7] >= 0)
        v309 = v483[7];
      else
        v309 = (uint64_t)__p[1];
      v310 = sub_20E86A980(v307, (uint64_t)v308, v309);
      sub_20E86A980(v310, (uint64_t)" with ID ", 9);
      v311 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v311, (uint64_t)" not found\n", 11);
      if ((v483[7] & 0x80000000) != 0)
        operator delete(__p[0]);
      v277 = 0;
    }
    else
    {
      if (v284 != v283)
      {
        v291 = (v284 - v283) >> 4;
        do
        {
          v292 = v291 >> 1;
          v293 = (unsigned int *)&v283[16 * (v291 >> 1)];
          v295 = *v293;
          v294 = (char *)(v293 + 4);
          v291 += ~(v291 >> 1);
          if (v295 < v30)
            v283 = v294;
          else
            v291 = v292;
        }
        while (v291);
      }
      if (v283 == v284 || *(_DWORD *)v283 != v30)
        v283 = *(char **)(a1 + 5568);
      v296 = *((_QWORD *)v283 + 1);
      v297 = sub_20E86A980(&v467, (uint64_t)"debug: variable ", 16);
      sub_20FC273AC((uint64_t)__p);
      if (v483[7] >= 0)
        v298 = __p;
      else
        v298 = (void **)__p[0];
      if (v483[7] >= 0)
        v299 = v483[7];
      else
        v299 = (uint64_t)__p[1];
      v300 = sub_20E86A980(v297, (uint64_t)v298, v299);
      sub_20E86A980(v300, (uint64_t)" with ID ", 9);
      v301 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v301, (uint64_t)" found (", 8);
      v302 = (_QWORD *)std::ostream::operator<<();
      v303 = sub_20E86A980(v302, (uint64_t)", ", 2);
      if (*(_BYTE *)(v296 + 20))
        v304 = "free";
      else
        v304 = "fixed";
      if (*(_BYTE *)(v296 + 20))
        v305 = 4;
      else
        v305 = 5;
      v306 = sub_20E86A980(v303, (uint64_t)v304, v305);
      sub_20E86A980(v306, (uint64_t)")\n", 2);
      if ((v483[7] & 0x80000000) != 0)
        operator delete(__p[0]);
      v460 |= *(unsigned __int8 *)(v296 + 20);
    }
    v312 = *(_QWORD **)(a1 + 6640);
    v313 = *(_QWORD **)(a1 + 6648);
    if (v313 != v312)
    {
      v314 = 0xD37A6F4DE9BD37A7 * (v313 - v312);
      do
      {
        v315 = v314 >> 1;
        v316 = &v312[23 * (v314 >> 1)];
        v318 = *v316;
        v317 = v316 + 23;
        v314 += ~(v314 >> 1);
        if (v318 < v31)
          v312 = v317;
        else
          v314 = v315;
      }
      while (v314);
      if (v313 != v312 && *v312 == v31)
      {
        v319 = sub_20E86A980(&v467, (uint64_t)"error: factor ", 14);
        sub_20F921690((uint64_t)__p);
        if (v483[7] >= 0)
          v320 = __p;
        else
          v320 = (void **)__p[0];
        if (v483[7] >= 0)
          v321 = v483[7];
        else
          v321 = (uint64_t)__p[1];
        v322 = sub_20E86A980(v319, (uint64_t)v320, v321);
        sub_20E86A980(v322, (uint64_t)" with the same ID ", 18);
        v323 = (_QWORD *)std::ostream::operator<<();
        sub_20E86A980(v323, (uint64_t)" already exists.\n", 17);
        if ((v483[7] & 0x80000000) != 0)
          operator delete(__p[0]);
        v277 = 0;
      }
    }
    if (v460)
    {
      v324 = v277 != 0;
      v325 = LOBYTE(v473.f64[1]);
      if ((LOBYTE(v473.f64[1]) & 0x10) == 0)
      {
LABEL_422:
        if ((v325 & 8) == 0)
        {
          v326 = 0;
          v483[7] = 0;
          v327 = __p;
          goto LABEL_445;
        }
        v334 = (const void **)&v468.n128_u64[1];
        v333 = v469.n128_f64[1];
LABEL_437:
        v335 = *v334;
        v326 = *(_QWORD *)&v333 - (_QWORD)*v334;
        if (v326 >= 0x7FFFFFFFFFFFFFF8)
          sub_20E860B7C();
        if (v326 >= 0x17)
        {
          v336 = (v326 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v326 | 7) != 0x17)
            v336 = v326 | 7;
          v337 = v336 + 1;
          v327 = operator new(v336 + 1);
          *(_QWORD *)v483 = v337 | 0x8000000000000000;
          __p[0] = v327;
          __p[1] = (void *)v326;
        }
        else
        {
          v483[7] = LOBYTE(v333) - *(_BYTE *)v334;
          v327 = __p;
          if (!v326)
          {
LABEL_445:
            *((_BYTE *)v327 + v326) = 0;
            *(_OWORD *)&v491[0].__r_.__value_.__l.__data_ = *(_OWORD *)__p;
            v491[0].__r_.__value_.__r.__words[2] = *(_QWORD *)v483;
            v491[1].__r_.__value_.__s.__data_[0] = v324;
            __src.f64[0] = *(float64_t *)MEMORY[0x24BEDB7F0];
            v338 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
            *(float64_t *)((char *)__src.f64 + *(_QWORD *)(*(_QWORD *)&__src.f64[0] - 24)) = *(float64_t *)(MEMORY[0x24BEDB7F0] + 64);
            v467.n128_u64[0] = v338;
            v467.n128_u64[1] = MEMORY[0x24BEDB848] + 16;
            if (v472.n128_i8[15] < 0)
              operator delete(v471[1]);
            std::streambuf::~streambuf();
            std::iostream::~basic_iostream();
            MEMORY[0x212BC6290](&v474);
            v339 = std::string::insert(v491, 0, "Failed to add a factor into the linear system. This could be due to duplicate factor IDs ('", 0x5BuLL);
            v340 = *(simd_double2 *)&v339->__r_.__value_.__l.__data_;
            *(_QWORD *)&v464.columns[1].f64[0] = v339->__r_.__value_.__r.__words[2];
            v464.columns[0] = v340;
            v339->__r_.__value_.__l.__size_ = 0;
            v339->__r_.__value_.__r.__words[2] = 0;
            v339->__r_.__value_.__r.__words[0] = 0;
            v341 = std::string::append((std::string *)&v464, "').", 3uLL);
            v342 = *(simd_double2 *)&v341->__r_.__value_.__l.__data_;
            *(_QWORD *)&v465.columns[1].f64[0] = v341->__r_.__value_.__r.__words[2];
            v465.columns[0] = v342;
            v341->__r_.__value_.__l.__size_ = 0;
            v341->__r_.__value_.__r.__words[2] = 0;
            v341->__r_.__value_.__r.__words[0] = 0;
            if (v465.columns[1].f64[0] >= 0.0)
              v343 = (uint64_t)&v465;
            else
              v343 = *(_QWORD *)&v465.columns[0].f64[0];
            if (v465.columns[1].f64[0] >= 0.0)
              v344 = HIBYTE(v465.columns[1].f64[0]);
            else
              v344 = *(_QWORD *)&v465.columns[0].f64[1];
            v345 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOLandmarkFactorUtil.h", 871, (uint64_t)"ret.second", 10, v343, v344, (void (*)(void **))sub_21023DDB0);
            if (SHIBYTE(v465.columns[1].f64[0]) < 0)
            {
              operator delete(*(void **)&v465.columns[0].f64[0]);
              if ((SHIBYTE(v464.columns[1].f64[0]) & 0x80000000) == 0)
              {
LABEL_455:
                if ((SHIBYTE(v491[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_456;
                goto LABEL_475;
              }
            }
            else if ((SHIBYTE(v464.columns[1].f64[0]) & 0x80000000) == 0)
            {
              goto LABEL_455;
            }
            operator delete(*(void **)&v464.columns[0].f64[0]);
            if ((SHIBYTE(v491[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_456:
              if (!v345)
                goto LABEL_457;
LABEL_476:
              abort();
            }
LABEL_475:
            operator delete(v491[0].__r_.__value_.__l.__data_);
            if (!v345)
              goto LABEL_457;
            goto LABEL_476;
          }
        }
        memmove(v327, v335, v326);
        goto LABEL_445;
      }
    }
    else
    {
      v328 = sub_20E86A980(&v467, (uint64_t)"error: factor ", 14);
      sub_20F921690((uint64_t)__p);
      if (v483[7] >= 0)
        v329 = __p;
      else
        v329 = (void **)__p[0];
      if (v483[7] >= 0)
        v330 = v483[7];
      else
        v330 = (uint64_t)__p[1];
      v331 = sub_20E86A980(v328, (uint64_t)v329, v330);
      sub_20E86A980(v331, (uint64_t)" with ID ", 9);
      v332 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v332, (uint64_t)" cannot be added: all variables are fixed.\n", 43);
      if ((v483[7] & 0x80000000) != 0)
        operator delete(__p[0]);
      v324 = 0;
      v325 = LOBYTE(v473.f64[1]);
      if ((LOBYTE(v473.f64[1]) & 0x10) == 0)
        goto LABEL_422;
    }
    v333 = v473.f64[0];
    if (*(_QWORD *)&v473.f64[0] < v470.n128_u64[1])
    {
      *(_QWORD *)&v473.f64[0] = v470.n128_u64[1];
      v333 = v470.n128_f64[1];
    }
    v334 = (const void **)&v470;
    goto LABEL_437;
  }
LABEL_457:
  v346 = v459;
  if (*(_BYTE *)(a1 + 1968) && *(_DWORD *)(a3 + 520) == 2)
  {
    v348 = *v459;
    v349 = *(_QWORD **)(a1 + 6640);
    v350 = *(_QWORD **)(a1 + 6648);
    if (v350 != v349)
    {
      v351 = 0xD37A6F4DE9BD37A7 * (v350 - v349);
      do
      {
        v352 = v351 >> 1;
        v353 = &v349[23 * (v351 >> 1)];
        v355 = *v353;
        v354 = v353 + 23;
        v351 += ~(v351 >> 1);
        if (v355 < v348)
          v349 = v354;
        else
          v351 = v352;
      }
      while (v351);
    }
    if (v350 == v349 || *v349 != v348)
      v349 = *(_QWORD **)(a1 + 6648);
    v356 = *(_BYTE *)(a3 + 488) ? a3 + 40 : 0;
    v357 = *(_BYTE *)(v356 + 56);
    v358 = *(_WORD *)(v356 + 57);
    *(_BYTE *)(v356 + 56) = 0;
    *(_WORD *)(v356 + 57) = 0;
    v347 = (_QWORD *)(a1 + 43056);
    if (((v347[4] - v347[3]) >> 2)
       + ((v347[1] - *v347) >> 2)
       + ((v347[7] - v347[6]) >> 2)
       + ((v347[10] - v347[9]) >> 2)
       + ((v347[13] - v347[12]) >> 2)
       + ((v347[16] - v347[15]) >> 2)
       + ((v347[19] - v347[18]) >> 2)
       + ((v347[22] - v347[21]) >> 2)
       + ((v347[25] - v347[24]) >> 2)
       + ((v347[28] - v347[27]) >> 2))
    {
      LODWORD(__src.f64[0]) = *(_QWORD *)(a3 + 32);
      sub_20FB81A74((char **)(a1 + 4464), &__src, (_BYTE *)__src.f64 + 4);
      sub_20F8F2BC0(a1 + 4368, a1 + 43056, (uint64_t)dword_2103B93C4, a1 + 4608);
      LOBYTE(__src.f64[0]) = 0;
      memset(v491, 0, sizeof(v491));
      sub_20FC5388C(a1 + 27856, (uint64_t)v491, (unsigned int **)(a1 + 4608), (_DWORD **)(a1 + 4608), (char *)&__src);
      *(_QWORD *)&v359 = v491[1].__r_.__value_.__l.__size_;
      *(_QWORD *)&v360 = v491[2].__r_.__value_.__l.__data_;
      *(_QWORD *)&v361 = v491[0].__r_.__value_.__r.__words[0];
      *((_QWORD *)&v361 + 1) = v491[1].__r_.__value_.__l.__data_;
      *((_QWORD *)&v359 + 1) = v491[2].__r_.__value_.__l.__size_;
      *((_QWORD *)&v360 + 1) = vdupq_laneq_s64(*(int64x2_t *)&v491[0].__r_.__value_.__r.__words[2], 1).u64[0];
      *(_OWORD *)&v491[0].__r_.__value_.__r.__words[2] = v360;
      *(_OWORD *)&v491[1].__r_.__value_.__r.__words[1] = v359;
      *(_OWORD *)&v491[0].__r_.__value_.__l.__data_ = v361;
      v362 = sub_20E8BE424((uint64_t)__p);
      sub_20FC78414((uint64_t)(v349 + 1), v349 + 8, (uint64_t)&v503, &__src, v362, v363, v364, v365, v366, v367, v368);
      v369 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v479, *(double *)__p), v480, *(float64x2_t *)__p, 1), v481, *(double *)v483);
      v370 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v479, *(double *)&v483[8]), v480, *(float64x2_t *)&v483[8], 1), v481, v484);
      v371 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v479, v485.f64[0]), v480, v485, 1), v481, v486);
      v372 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v369, v479.f64[0]), v370, v480.f64[0]), v371, v481.f64[0]);
      v465.columns[0].f64[1] = v372.f64[1];
      v373 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v369, v479, 1), v370, v480, 1), v371, v481, 1);
      v372.f64[1] = v373.f64[1];
      v465.columns[1].f64[0] = v373.f64[0];
      __asm { FMOV            V0.2D, #1.0 }
      v378 = vaddq_f64(v372, _Q0);
      v465.columns[1].f64[1] = v378.f64[1];
      v465.columns[0].f64[0] = v378.f64[0];
      sub_20E8BE3B0(&v465, &v464);
      _V1.D[1] = v503.n128_i64[1];
      _D0 = v464.columns[0].f64[1];
      __asm { FMLA            D3, D0, V1.D[1] }
      _D0 = v464.columns[1].f64[1];
      __asm
      {
        FMLA            D4, D0, V1.D[1]
        FMLA            D0, D4, V1.D[1]
      }
    }
    else
    {
      sub_20FC77D28((uint64_t)(v349 + 1), v349 + 8, (uint64_t)&__src, v19.n128_f64[0], v20.n128_f64[0], v21.n128_f64[0], v22, v23, v24, v25, v26);
      _V1.D[1] = __src.f64[1];
      _D2 = __src.f64[1];
      __asm { FMLA            D0, D2, V1.D[1] }
    }
    v387 = *(_BYTE *)(a3 + 488) ? a3 + 40 : 0;
    *(_BYTE *)(v387 + 56) = v357;
    *(_WORD *)(v387 + 57) = v358;
    v346 = v459;
    if (_D0 > *(double *)(a1 + 1976))
    {
      *((_BYTE *)v349 + 48) = 1;
      v388 = *(_QWORD *)(a3 + 496);
      v389 = *(_QWORD *)(a3 + 504);
      v390 = *(_DWORD *)(a2 + 8);
      v391 = v389 - v388;
      if (v389 != v388)
      {
        v392 = *(_QWORD *)a2;
        v393 = *(_DWORD *)(a2 + 16);
        v394 = v391 >> 6;
        while (1)
        {
          v395 = v394 >> 1;
          v396 = v388 + (v394 >> 1 << 6);
          v397 = *(_DWORD *)(v396 + 16);
          v398 = v397 >= v393;
          if (v397 != v393)
            goto LABEL_490;
          if (*(_QWORD *)v396 >= v392)
            break;
LABEL_484:
          v388 = v396 + 64;
          v395 = v394 + ~v395;
LABEL_485:
          v394 = v395;
          if (!v395)
            goto LABEL_493;
        }
        if (*(_QWORD *)v396 != v392)
          goto LABEL_485;
        v398 = *(_DWORD *)(v396 + 8) >= v390;
LABEL_490:
        if (v398)
          goto LABEL_485;
        goto LABEL_484;
      }
LABEL_493:
      v399 = *(_DWORD *)(v388 + 8);
      v400 = (_DWORD *)(v388 + 24);
      if (v399 != v390)
        v400 = 0;
      *v400 = 0;
    }
  }
  ++*v346;
}

void sub_20FC53758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  sub_20FC27320((uint64_t)&STACK[0x270]);
  sub_20F8AEF04((uint64_t)&a35);
  sub_20F8AEF6C((uint64_t)&STACK[0x2E0]);
  sub_20E86665C((uint64_t)&STACK[0x2D0]);
  sub_20E86665C((uint64_t)&STACK[0x2C0]);
  _Unwind_Resume(a1);
}

void sub_20FC537A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  if (SLOBYTE(STACK[0x287]) < 0)
  {
    operator delete((void *)STACK[0x270]);
    sub_20E863784((uint64_t)&a35);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&a35);
  _Unwind_Resume(a1);
}

uint64_t sub_20FC5388C(uint64_t a1, uint64_t a2, unsigned int **a3, _DWORD **a4, char *a5)
{
  unsigned int **v7;
  unsigned int **v10;

  v7 = a3;
  v10 = a3 + 27;
  sub_20FC277CC(a1 + 7056, a2, a3 + 27, a4[12], a4[13], *a5);
  sub_20FC27AB4(a1 + 8496, a2, v10, a4[15], a4[16], *a5);
  sub_20FC277CC(a1 + 12816, a2, v10, a4[24], a4[25], *a5);
  sub_20FC277CC(a1 + 14256, a2, v10, a4[27], a4[28], *a5);
  sub_20FC277CC(a1 + 6912, a2, v7 + 24, a4[12], a4[13], *a5);
  sub_20FC27AB4(a1 + 8352, a2, v7 + 24, a4[15], a4[16], *a5);
  sub_20FC277CC(a1 + 12672, a2, v7 + 24, a4[24], a4[25], *a5);
  sub_20FC277CC(a1 + 14112, a2, v7 + 24, a4[27], a4[28], *a5);
  sub_20FC27D50(a1 + 6480, a2, v7 + 15, a4[12], a4[13], *a5);
  sub_20FC27FEC(a1 + 7920, a2, v7 + 15, a4[15], a4[16], *a5);
  sub_20FC27D50(a1 + 12240, a2, v7 + 15, a4[24], a4[25], *a5);
  sub_20FC27D50(a1 + 13680, a2, v7 + 15, a4[27], a4[28], *a5);
  v7 += 12;
  sub_20FC277CC(a1 + 6336, a2, v7, a4[12], a4[13], *a5);
  sub_20FC27AB4(a1 + 7776, a2, v7, a4[15], a4[16], *a5);
  sub_20FC277CC(a1 + 12096, a2, v7, a4[24], a4[25], *a5);
  return sub_20FC277CC(a1 + 13536, a2, v7, a4[27], a4[28], *a5);
}

double sub_20FC53A94(uint64_t a1, double *a2, unint64_t a3, double *a4, uint64_t a5, double result)
{
  uint64_t v7;
  double v8;
  int v9;
  double *v12;
  unint64_t v13;
  double *v14;
  unint64_t v15;
  __n128 v16;
  double *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double *v21;
  double v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  double *v26;
  double *v27;
  double *v28;
  double *v29;
  int v30;
  double v31;
  uint64_t v32;
  double *v33;
  uint64_t v34;
  uint64_t v35;
  double *v36;
  uint64_t v37;

  if (a3 >= 2)
  {
    v7 = a1;
    if (a3 == 2)
    {
      result = *(a2 - 2);
      v8 = *(double *)a1;
      if (result < *(double *)a1)
      {
        *(double *)a1 = result;
        *(a2 - 2) = v8;
        v9 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 - 2);
        *((_DWORD *)a2 - 2) = v9;
      }
    }
    else if ((uint64_t)a3 <= 0)
    {
      if ((double *)a1 != a2)
      {
        v17 = (double *)(a1 + 16);
        if ((double *)(a1 + 16) != a2)
        {
          v18 = 0;
          v19 = a1;
          do
          {
            v21 = v17;
            result = *v17;
            v22 = *(double *)v19;
            if (*v17 < *(double *)v19)
            {
              v23 = *(_DWORD *)(v19 + 24);
              v24 = v18;
              do
              {
                v25 = a1 + v24;
                *(double *)(v25 + 16) = v22;
                *(_DWORD *)(v25 + 24) = *(_DWORD *)(a1 + v24 + 8);
                if (!v24)
                {
                  v20 = a1;
                  goto LABEL_13;
                }
                v22 = *(double *)(v25 - 16);
                v24 -= 16;
              }
              while (result < v22);
              v20 = a1 + v24 + 16;
LABEL_13:
              *(double *)v20 = result;
              *(_DWORD *)(v20 + 8) = v23;
            }
            v17 = v21 + 2;
            v18 += 16;
            v19 = (uint64_t)v21;
          }
          while (v21 + 2 != a2);
        }
      }
    }
    else
    {
      v12 = a4;
      v13 = a3 >> 1;
      v14 = (double *)(a1 + 16 * (a3 >> 1));
      v15 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        sub_20FC53D0C((double *)a1, v14, v15, a4);
        v26 = &v12[2 * v13];
        sub_20FC53D0C((double *)(v7 + 16 * (a3 >> 1)), a2, a3 - (a3 >> 1), v26);
        v27 = &v12[2 * a3];
        v28 = v26;
        while (v28 != v27)
        {
          result = *v28;
          v31 = *v12;
          if (*v28 >= *v12)
          {
            v29 = v12;
            v12 += 2;
            result = v31;
          }
          else
          {
            v29 = v28;
            v28 += 2;
          }
          v30 = *((_DWORD *)v29 + 2);
          *(double *)v7 = result;
          *(_DWORD *)(v7 + 8) = v30;
          v7 += 16;
          if (v12 == v26)
          {
            if (v28 != v27)
            {
              v35 = 0;
              do
              {
                v36 = &v28[v35];
                v37 = v7 + v35 * 8;
                result = v28[v35];
                *(double *)v37 = result;
                *(_DWORD *)(v37 + 8) = LODWORD(v28[v35 + 1]);
                v35 += 2;
              }
              while (v36 + 2 != v27);
            }
            return result;
          }
        }
        if (v12 != v26)
        {
          v32 = 0;
          do
          {
            v33 = &v12[v32];
            v34 = v7 + v32 * 8;
            result = v12[v32];
            *(double *)v34 = result;
            *(_DWORD *)(v34 + 8) = LODWORD(v12[v32 + 1]);
            v32 += 2;
          }
          while (v33 + 2 != v26);
        }
      }
      else
      {
        sub_20FC53A94(a1, v14, v15, a4, a5);
        sub_20FC53A94(v7 + 16 * (a3 >> 1), a2, a3 - (a3 >> 1), v12, a5);
        return sub_20F626330((double *)v7, (double *)(v7 + 16 * (a3 >> 1)), a2, a3 >> 1, a3 - (a3 >> 1), v12, a5, v16);
      }
    }
  }
  return result;
}

double *sub_20FC53D0C(double *result, double *a2, unint64_t a3, double *a4)
{
  double *v4;
  double *v7;
  double *v8;
  __int128 v9;
  double *v10;
  uint64_t v11;
  double *v12;
  double *v13;
  double *v14;
  double v15;
  double *v16;
  uint64_t v17;
  double v18;
  unint64_t v19;
  uint64_t v20;
  double *v21;
  double *v22;
  __int128 v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;

  if (a3)
  {
    v4 = a4;
    v7 = result;
    if (a3 == 2)
    {
      v8 = a2 - 2;
      if (*(a2 - 2) >= *result)
      {
        *(_OWORD *)a4 = *(_OWORD *)result;
        v9 = *(_OWORD *)v8;
      }
      else
      {
        *(_OWORD *)a4 = *(_OWORD *)v8;
        v9 = *(_OWORD *)result;
      }
      *((_OWORD *)a4 + 1) = v9;
    }
    else if (a3 == 1)
    {
      *(_OWORD *)a4 = *(_OWORD *)result;
    }
    else if ((uint64_t)a3 > 8)
    {
      v19 = a3 >> 1;
      v20 = 2 * (a3 >> 1);
      v21 = &result[v20];
      sub_20FC53A94(result, &result[v20], a3 >> 1, a4, a3 >> 1);
      result = (double *)sub_20FC53A94(&v7[v20], a2, a3 - v19, &v4[v20], a3 - v19);
      v22 = &v7[v20];
      while (v22 != a2)
      {
        if (*v22 >= *v7)
        {
          v23 = *(_OWORD *)v7;
          v7 += 2;
          *(_OWORD *)v4 = v23;
          v4 += 2;
          if (v7 == v21)
            goto LABEL_28;
        }
        else
        {
          v24 = *(_OWORD *)v22;
          v22 += 2;
          *(_OWORD *)v4 = v24;
          v4 += 2;
          if (v7 == v21)
          {
LABEL_28:
            if (v22 != a2)
            {
              v25 = 0;
              do
              {
                *(_OWORD *)&v4[v25] = *(_OWORD *)&v22[v25];
                v25 += 2;
              }
              while (&v22[v25] != a2);
            }
            return result;
          }
        }
      }
      if (v7 != v21)
      {
        v26 = 0;
        do
        {
          *(_OWORD *)&v4[v26] = *(_OWORD *)&v7[v26];
          v26 += 2;
        }
        while (&v7[v26] != v21);
      }
    }
    else if (result != a2)
    {
      *(_OWORD *)a4 = *(_OWORD *)result;
      v10 = result + 2;
      if (result + 2 != a2)
      {
        v11 = 0;
        v12 = a4;
        v13 = a4;
        do
        {
          while (1)
          {
            v14 = v10;
            v15 = *v13;
            v13 += 2;
            if (*v10 < v15)
              break;
            *(_OWORD *)v13 = *(_OWORD *)v10;
            v10 += 2;
            v11 += 16;
            v12 = v13;
            v7 = v14;
            if (v14 + 2 == a2)
              return result;
          }
          *(_OWORD *)v13 = *(_OWORD *)v12;
          v16 = a4;
          if (v12 != a4)
          {
            v17 = v11;
            while (1)
            {
              v16 = (double *)((char *)a4 + v17);
              v18 = *(double *)((char *)a4 + v17 - 16);
              if (*v14 >= v18)
                break;
              *v16 = v18;
              *((_DWORD *)v16 + 2) = *((_DWORD *)v16 - 2);
              v17 -= 16;
              if (!v17)
              {
                v16 = a4;
                break;
              }
            }
          }
          *v16 = *v14;
          *((_DWORD *)v16 + 2) = *((_DWORD *)v7 + 6);
          v10 = v14 + 2;
          v11 += 16;
          v12 = v13;
          v7 = v14;
        }
        while (v14 + 2 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_20FC53F58(uint64_t a1, unsigned int *a2)
{
  unsigned int v3;
  __int128 *v4;
  __int128 *v5;
  unint64_t v6;
  unint64_t v7;
  __int128 *v8;
  __int128 *v9;
  unsigned int v10;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  unsigned int *v25;
  char *v26;
  int64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  _OWORD *v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  unsigned int v36;
  __int128 v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;

  v3 = *a2;
  v5 = *(__int128 **)(a1 + 392);
  v4 = *(__int128 **)(a1 + 400);
  if (v4 == v5)
  {
    v5 = *(__int128 **)(a1 + 400);
  }
  else
  {
    v6 = v4 - v5;
    do
    {
      v7 = v6 >> 1;
      v8 = &v5[v6 >> 1];
      v10 = *(_DWORD *)v8;
      v9 = v8 + 1;
      v6 += ~(v6 >> 1);
      if (v10 < v3)
        v5 = v9;
      else
        v6 = v7;
    }
    while (v6);
    if (v4 != v5 && v3 == *(_DWORD *)v5)
      return 0;
  }
  v12 = *((unsigned __int8 *)a2 + 4);
  v13 = *(_QWORD *)a2;
  v14 = *((_QWORD *)a2 + 1);
  v37 = *((_OWORD *)a2 + 1);
  v38 = *((_QWORD *)a2 + 4);
  v15 = sub_20FC28BC4(a1 + 416);
  *(_DWORD *)v15 = -1;
  *(_BYTE *)(v15 + 4) = 1;
  *(_DWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = v13;
  *(_QWORD *)(v15 + 24) = v14;
  *(_OWORD *)(v15 + 32) = v37;
  *(_QWORD *)(v15 + 48) = v38;
  v39 = v3;
  v40 = v15;
  sub_20FC28960((char **)(a1 + 392), v5, (uint64_t)&v39);
  if (v12)
  {
    v16 = *(char **)(a1 + 2232);
    v17 = *(_QWORD *)(a1 + 2240);
    if ((unint64_t)v16 < v17)
    {
      *(_DWORD *)v16 = v3;
      v18 = (uint64_t)(v16 + 4);
LABEL_34:
      *(_QWORD *)(a1 + 2232) = v18;
      goto LABEL_35;
    }
    v19 = *(char **)(a1 + 2224);
    v20 = (v16 - v19) >> 2;
    v21 = v20 + 1;
    if ((unint64_t)(v20 + 1) >> 62)
      sub_20E867F44();
    v22 = v17 - (_QWORD)v19;
    if (v22 >> 1 > v21)
      v21 = v22 >> 1;
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL)
      v23 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v23 = v21;
    if (v23)
    {
      if (v23 >> 62)
        sub_20E877A38();
      v24 = operator new(4 * v23);
      v25 = (unsigned int *)&v24[4 * v20];
      v26 = &v24[4 * v23];
      *v25 = v3;
      v18 = (uint64_t)(v25 + 1);
      v27 = v16 - v19;
      if (v16 == v19)
        goto LABEL_32;
    }
    else
    {
      v24 = 0;
      v25 = (unsigned int *)(4 * v20);
      v26 = 0;
      *(_DWORD *)(4 * v20) = v3;
      v18 = 4 * v20 + 4;
      v27 = v16 - v19;
      if (v16 == v19)
      {
LABEL_32:
        *(_QWORD *)(a1 + 2224) = v25;
        *(_QWORD *)(a1 + 2232) = v18;
        *(_QWORD *)(a1 + 2240) = v26;
        if (v19)
          operator delete(v19);
        goto LABEL_34;
      }
    }
    v28 = v27 - 4;
    if (v28 < 0x2C)
      goto LABEL_41;
    if ((unint64_t)(v19 - v24) < 0x20)
      goto LABEL_41;
    v29 = (v28 >> 2) + 1;
    v30 = 4 * (v29 & 0x7FFFFFFFFFFFFFF8);
    v31 = &v16[-v30];
    v25 = (unsigned int *)((char *)v25 - v30);
    v32 = &v24[4 * v20 - 16];
    v33 = v16 - 16;
    v34 = v29 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v35 = *(_OWORD *)v33;
      *(v32 - 1) = *((_OWORD *)v33 - 1);
      *v32 = v35;
      v32 -= 2;
      v33 -= 32;
      v34 -= 8;
    }
    while (v34);
    v16 = v31;
    if (v29 != (v29 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_41:
      do
      {
        v36 = *((_DWORD *)v16 - 1);
        v16 -= 4;
        *--v25 = v36;
      }
      while (v16 != v19);
    }
    goto LABEL_32;
  }
LABEL_35:
  *(_BYTE *)(a1 + 1594) = 0;
  *(_BYTE *)(a1 + 1592) = 0;
  return 1;
}

void sub_20FC541AC(_QWORD *a1, unint64_t a2, double a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  unsigned __int32 v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  unsigned __int32 v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v36;
  uint64_t v37;
  double *v38;
  uint64_t v39;
  double *v40;
  double v42;
  float64x2_t v45;
  double v47;
  double v48;
  double v50;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  unsigned int v74;
  uint64_t *v77;
  __n128 v78;
  __n128 v79;
  std::string::size_type v80;
  BOOL v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  unsigned int v86;
  unsigned int v87;
  int64x2_t *v88;
  int64x2_t *v89;
  int64x2_t *v90;
  unint64_t v91;
  int64x2_t *v92;
  unint64_t v93;
  unint64_t *v94;
  int64x2_t *v95;
  unint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  unint64_t v102;
  unint64_t v103;
  unsigned int *v104;
  char *v105;
  unsigned int v106;
  uint64_t v107;
  unint64_t v108;
  unsigned int *v109;
  char *v110;
  unsigned int v111;
  uint64_t v112;
  char *v113;
  char *v114;
  char *v115;
  unint64_t v116;
  unint64_t v117;
  unsigned int *v118;
  char *v119;
  unsigned int v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unsigned int *v124;
  char *v125;
  unsigned int v126;
  uint64_t v127;
  char *v128;
  char *v129;
  char *v130;
  unint64_t v131;
  unint64_t v132;
  unsigned int *v133;
  char *v134;
  unsigned int v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unsigned int *v139;
  char *v140;
  unsigned int v141;
  uint64_t v142;
  char *v143;
  char *v144;
  char *v145;
  unint64_t v146;
  unint64_t v147;
  unsigned int *v148;
  char *v149;
  unsigned int v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unsigned int *v154;
  char *v155;
  unsigned int v156;
  uint64_t v157;
  char *v158;
  char *v159;
  char *v160;
  unint64_t v161;
  unint64_t v162;
  unsigned int *v163;
  char *v164;
  unsigned int v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unsigned int *v169;
  char *v170;
  unsigned int v171;
  uint64_t v172;
  char *v173;
  char *v174;
  unint64_t v175;
  unint64_t v176;
  unsigned __int32 *v177;
  char *v178;
  unsigned __int32 v179;
  uint64_t v180;
  uint64_t *v181;
  int64x2_t *v182;
  int64x2_t v183;
  __int128 v184;
  __int128 v185;
  uint64_t v186;
  __int128 v187;
  uint64_t v188;
  char v189;
  std::__shared_weak_count *v190;
  unint64_t *p_shared_owners;
  unint64_t v192;
  int v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  char *v197;
  char *v198;
  unint64_t v199;
  unint64_t v200;
  char *v201;
  char *v202;
  unsigned __int32 v203;
  _QWORD *v204;
  _QWORD *v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t *v208;
  _QWORD *v209;
  unint64_t v210;
  char *v211;
  char *v212;
  unint64_t v213;
  unint64_t v214;
  char *v215;
  char *v216;
  unsigned __int32 v217;
  _QWORD *v218;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v221;
  _QWORD *v222;
  int v223;
  char *v224;
  char *v225;
  char *v226;
  uint64_t v227;
  unint64_t v228;
  unint64_t v229;
  unsigned int *v230;
  char *v231;
  unsigned int v232;
  unint64_t v233;
  unint64_t v234;
  unsigned int *v235;
  char *v236;
  unsigned int v237;
  uint64_t v238;
  _QWORD *v239;
  std::string *v240;
  std::string::size_type v241;
  _QWORD *v242;
  _QWORD *v243;
  _QWORD *v244;
  _QWORD *v245;
  const char *v246;
  uint64_t v247;
  _QWORD *v248;
  int v249;
  char *v250;
  char *v251;
  char *v252;
  uint64_t v253;
  _QWORD *v254;
  std::string *v255;
  std::string::size_type v256;
  _QWORD *v257;
  _QWORD *v258;
  unint64_t v259;
  unint64_t v260;
  unsigned int *v261;
  char *v262;
  unsigned int v263;
  unint64_t v264;
  unint64_t v265;
  unsigned int *v266;
  char *v267;
  unsigned int v268;
  uint64_t v269;
  _QWORD *v270;
  std::string *v271;
  std::string::size_type v272;
  _QWORD *v273;
  _QWORD *v274;
  _QWORD *v275;
  _QWORD *v276;
  const char *v277;
  uint64_t v278;
  _QWORD *v279;
  int v280;
  char *v281;
  char *v282;
  char *v283;
  uint64_t v284;
  _QWORD *v285;
  std::string *v286;
  std::string::size_type v287;
  _QWORD *v288;
  _QWORD *v289;
  unint64_t v290;
  unint64_t v291;
  unsigned int *v292;
  char *v293;
  unsigned int v294;
  unint64_t v295;
  unint64_t v296;
  unsigned int *v297;
  char *v298;
  unsigned int v299;
  uint64_t v300;
  _QWORD *v301;
  std::string *v302;
  std::string::size_type v303;
  _QWORD *v304;
  _QWORD *v305;
  _QWORD *v306;
  _QWORD *v307;
  const char *v308;
  uint64_t v309;
  _QWORD *v310;
  int v311;
  char *v312;
  char *v313;
  char *v314;
  uint64_t v315;
  _QWORD *v316;
  std::string *v317;
  std::string::size_type v318;
  _QWORD *v319;
  _QWORD *v320;
  unint64_t v321;
  unint64_t v322;
  unsigned int *v323;
  char *v324;
  unsigned int v325;
  unint64_t v326;
  unint64_t v327;
  unsigned int *v328;
  char *v329;
  unsigned int v330;
  uint64_t v331;
  _QWORD *v332;
  std::string *v333;
  std::string::size_type v334;
  _QWORD *v335;
  _QWORD *v336;
  _QWORD *v337;
  _QWORD *v338;
  const char *v339;
  uint64_t v340;
  _QWORD *v341;
  int v342;
  char *v343;
  char *v344;
  char *v345;
  uint64_t v346;
  _QWORD *v347;
  std::string *v348;
  std::string::size_type v349;
  _QWORD *v350;
  _QWORD *v351;
  unint64_t v352;
  unint64_t v353;
  unsigned int *v354;
  char *v355;
  unsigned int v356;
  unint64_t v357;
  unint64_t v358;
  unsigned int *v359;
  char *v360;
  unsigned int v361;
  int v362;
  uint64_t v363;
  _QWORD *v364;
  std::string *v365;
  std::string::size_type v366;
  _QWORD *v367;
  int v368;
  _QWORD *v369;
  _QWORD *v370;
  _QWORD *v371;
  const char *v372;
  uint64_t v373;
  _QWORD *v374;
  char *v375;
  char *v376;
  char *v377;
  uint64_t v378;
  _QWORD *v379;
  std::string *v380;
  std::string::size_type v381;
  _QWORD *v382;
  _QWORD *v383;
  unint64_t v384;
  unint64_t v385;
  unsigned int *v386;
  char *v387;
  unsigned int v388;
  unint64_t v389;
  unint64_t v390;
  unsigned int *v391;
  char *v392;
  unsigned int v393;
  int v394;
  uint64_t v395;
  _QWORD *v396;
  std::string *v397;
  std::string::size_type v398;
  _QWORD *v399;
  int v400;
  _QWORD *v401;
  _QWORD *v402;
  _QWORD *v403;
  const char *v404;
  uint64_t v405;
  _QWORD *v406;
  char *v407;
  char *v408;
  char *v409;
  uint64_t v410;
  _QWORD *v411;
  std::string *v412;
  std::string::size_type v413;
  _QWORD *v414;
  _QWORD *v415;
  unint64_t v416;
  unint64_t v417;
  unsigned int *v418;
  char *v419;
  unsigned int v420;
  unint64_t v421;
  unint64_t v422;
  unsigned int *v423;
  char *v424;
  unsigned int v425;
  int v426;
  uint64_t v427;
  _QWORD *v428;
  std::string *v429;
  std::string::size_type v430;
  _QWORD *v431;
  int v432;
  _QWORD *v433;
  _QWORD *v434;
  _QWORD *v435;
  const char *v436;
  uint64_t v437;
  _QWORD *v438;
  char *v439;
  char *v440;
  char *v441;
  uint64_t v442;
  _QWORD *v443;
  std::string *v444;
  std::string::size_type v445;
  _QWORD *v446;
  _QWORD *v447;
  unint64_t v448;
  unint64_t v449;
  unsigned int *v450;
  char *v451;
  unsigned int v452;
  unint64_t v453;
  unint64_t v454;
  unsigned int *v455;
  char *v456;
  unsigned int v457;
  int v458;
  uint64_t v459;
  _QWORD *v460;
  std::string *v461;
  std::string::size_type v462;
  _QWORD *v463;
  int v464;
  _QWORD *v465;
  _QWORD *v466;
  _QWORD *v467;
  const char *v468;
  uint64_t v469;
  _QWORD *v470;
  char *v471;
  char *v472;
  char *v473;
  uint64_t v474;
  _QWORD *v475;
  std::string *v476;
  std::string::size_type v477;
  _QWORD *v478;
  _QWORD *v479;
  unint64_t v480;
  unint64_t v481;
  unsigned int *v482;
  char *v483;
  unsigned int v484;
  unint64_t v485;
  unint64_t v486;
  unsigned int *v487;
  char *v488;
  unsigned int v489;
  int v490;
  uint64_t v491;
  _QWORD *v492;
  std::string *v493;
  std::string::size_type v494;
  _QWORD *v495;
  int v496;
  _QWORD *v497;
  _QWORD *v498;
  _QWORD *v499;
  const char *v500;
  uint64_t v501;
  _QWORD *v502;
  char *v503;
  char *v504;
  char *v505;
  uint64_t v506;
  _QWORD *v507;
  std::string *v508;
  std::string::size_type v509;
  _QWORD *v510;
  _QWORD *v511;
  unint64_t v512;
  unint64_t v513;
  unsigned int *v514;
  char *v515;
  unsigned int v516;
  unint64_t v517;
  unint64_t v518;
  unsigned int *v519;
  char *v520;
  unsigned int v521;
  int v522;
  uint64_t v523;
  _QWORD *v524;
  std::string *v525;
  std::string::size_type v526;
  _QWORD *v527;
  int v528;
  _QWORD *v529;
  _QWORD *v530;
  _QWORD *v531;
  const char *v532;
  uint64_t v533;
  _QWORD *v534;
  char *v535;
  char *v536;
  char *v537;
  uint64_t v538;
  _QWORD *v539;
  std::string *v540;
  std::string::size_type v541;
  _QWORD *v542;
  _QWORD *v543;
  unint64_t v544;
  unint64_t v545;
  unsigned __int32 *v546;
  char *v547;
  unsigned __int32 v548;
  unint64_t v549;
  unint64_t v550;
  unsigned __int32 *v551;
  char *v552;
  unsigned __int32 v553;
  int v554;
  uint64_t v555;
  _QWORD *v556;
  std::string *v557;
  std::string::size_type v558;
  _QWORD *v559;
  int v560;
  _QWORD *v561;
  _QWORD *v562;
  _QWORD *v563;
  const char *v564;
  uint64_t v565;
  _QWORD *v566;
  char *v567;
  char *v568;
  uint64_t v569;
  _QWORD *v570;
  std::string *v571;
  std::string::size_type v572;
  _QWORD *v573;
  _QWORD *v574;
  unint64_t v575;
  unint64_t v576;
  unint64_t *v577;
  char *v578;
  unint64_t v579;
  _QWORD *v580;
  std::string *v581;
  std::string::size_type v582;
  _QWORD *v583;
  _QWORD *v584;
  BOOL v585;
  char v586;
  std::string::size_type v587;
  std::string *v588;
  _QWORD *v589;
  std::string *v590;
  std::string::size_type v591;
  _QWORD *v592;
  _QWORD *v593;
  uint64_t v594;
  std::string::size_type *p_size;
  const void *v596;
  uint64_t v597;
  uint64_t v598;
  std::string *v599;
  __int128 v600;
  std::string *v601;
  __int128 v602;
  void **v603;
  uint64_t v604;
  _BOOL4 v605;
  __int8 *v606;
  int64x2_t *v607;
  int64x2_t v608;
  uint64_t v609;
  int64x2_t v610;
  std::__shared_weak_count *v611;
  std::__shared_weak_count *v612;
  unint64_t *v613;
  unint64_t v614;
  unint64_t v615;
  unint64_t v616;
  __int8 *v617;
  __int128 v618;
  unint64_t v619;
  std::__shared_weak_count *v620;
  unint64_t *v621;
  unint64_t v622;
  __int8 *v623;
  __int128 v624;
  __int128 v625;
  __int128 v626;
  uint64_t v627;
  __int128 v628;
  unint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  unint64_t v633;
  __int128 v634;
  __int128 v635;
  __int128 v636;
  unint64_t v637;
  uint64_t v638;
  int64x2_t *v639;
  unint64_t v640;
  std::string::size_type v641;
  __int8 *v642;
  __int128 v643;
  __int128 v644;
  __int128 v645;
  __int128 v646;
  __int128 v647;
  uint64_t v648;
  int64x2_t *v649;
  int64x2_t *v650;
  int64x2_t v651;
  __int128 v652;
  __int128 v653;
  uint64_t v654;
  __int128 v655;
  uint64_t v656;
  std::string::size_type v657;
  std::string::size_type v658;
  int64x2_t *v659;
  std::__shared_weak_count *v660;
  unint64_t *v661;
  unint64_t v662;
  std::__shared_weak_count *v663;
  unint64_t *v664;
  unint64_t v665;
  std::__shared_weak_count *v666;
  unint64_t *v667;
  unint64_t v668;
  uint64_t v669;
  __int128 v670;
  __int128 v671;
  __int128 v672;
  __int128 v673;
  __int128 v674;
  int64_t v675;
  std::__shared_weak_count *v676;
  std::__shared_weak_count *v677;
  uint64_t *v678;
  int64x2_t v679;
  uint64_t v680;
  int64x2_t *v681;
  int64x2_t *v682;
  _QWORD *v683;
  uint64_t v684;
  uint64_t *v685;
  unint64_t v686;
  uint64_t *v687;
  uint64_t *v688;
  uint64_t *v689;
  _QWORD *v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  std::string::size_type v695;
  uint64_t *v696;
  uint64_t v697;
  uint64_t *v698;
  int64x2_t *v699;
  int v700;
  int v701;
  int v702;
  int v703;
  std::string::size_type v704;
  unsigned int v705;
  int64x2_t *v706;
  int v707;
  uint64_t v708;
  uint64_t v709;
  unsigned int v710;
  uint64_t *v711[7];
  uint64_t *v712;
  uint64_t v713;
  unint64_t v714;
  unint64_t v715;
  std::string v716;
  void *v717[2];
  int64_t v718;
  uint64_t v719;
  std::__shared_weak_count *v720;
  uint64_t v721;
  std::__shared_weak_count *v722;
  std::string v723;
  std::string v724;
  __int128 v725;
  __int128 v726;
  __int128 v727;
  __int128 v728;
  __int128 v729;
  uint64_t v730;
  __int128 v731;
  __int128 v732;
  unint64_t v733;
  char v734;
  uint64_t v735;
  std::__shared_weak_count *v736;
  char v737;
  std::string __p;
  std::string::size_type v739;
  _QWORD *v740;
  unint64_t v741;
  char v742;
  __int128 v743;
  int64x2_t v744;
  __int128 v745;
  std::string v746;
  __int128 v747;
  __int128 v748;
  __int128 v749;
  __int128 v750;
  __int128 v751;
  uint64_t v752;
  __int128 v753;
  __int128 v754;
  unint64_t v755;
  char v756;
  __int128 v757;
  char v758;

  v4 = (uint64_t *)a1[3];
  v3 = (uint64_t *)a1[4];
  if (v4 != v3)
  {
    v688 = (uint64_t *)a1[1];
    v687 = (uint64_t *)v688[8];
    if (v687)
    {
      v6 = v688[39];
      if (v6)
      {
        v682 = (int64x2_t *)(a1 + 843);
        v684 = (uint64_t)(a1 + 646);
        v8 = a1[828];
        v705 = v8 == a1[827] ? 0 : *(_DWORD *)(v8 - 208) + 1;
        v9 = (uint64_t *)(v6 * (_QWORD)v687);
        v690 = a1 + 978;
        v695 = (std::string::size_type)(a1 + 393);
        v683 = a1 + 829;
        v694 = *MEMORY[0x24BEDB7F0];
        v692 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
        v693 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
        v691 = MEMORY[0x24BEDB848] + 16;
        v685 = (uint64_t *)a1[4];
        v686 = a2;
        v696 = (uint64_t *)(v6 * (_QWORD)v687);
        while (1)
        {
          v10 = *v4;
          v11 = *(uint64_t **)(*v4 + 496);
          v12 = *(uint64_t **)(*v4 + 504);
          if (a2 <= ((char *)v12 - (char *)v11) >> 6 && *(_DWORD *)(v10 + 520) != 2)
            break;
LABEL_9:
          if (++v4 == v3)
            return;
        }
        v13 = *(_DWORD *)(v10 + 32);
        v14 = *(_QWORD *)(a1[1] + 64);
        v713 = a1[1];
        v714 = v14;
        v715 = 0;
        v712 = v11;
        v711[0] = &v713;
        v711[1] = (uint64_t *)&v712;
        v711[2] = v688;
        v711[3] = v687;
        v711[4] = v9;
        v711[5] = v12;
        v711[6] = (uint64_t *)v10;
        v15 = sub_20F6236F0(v711);
        if (v15)
        {
          v16 = v15;
          if (!*(_BYTE *)(*v4 + 488)
            && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 1321, (uint64_t)"track_ptr->getStructure()", 25, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
LABEL_877:
            abort();
          }
          v17 = (char *)a1[767];
          v18 = (char *)a1[768];
          if (v18 != v17)
          {
            v19 = (v18 - v17) >> 4;
            do
            {
              v20 = v19 >> 1;
              v21 = &v17[16 * (v19 >> 1)];
              v23 = *(_DWORD *)v21;
              v22 = v21 + 16;
              v19 += ~(v19 >> 1);
              if (v23 < v13)
                v17 = v22;
              else
                v19 = v20;
            }
            while (v19);
          }
          if (v17 == v18)
          {
            v25 = *v4;
          }
          else
          {
            v24 = *(_DWORD *)v17;
            v25 = *v4;
            if (v24 == v13)
              goto LABEL_41;
          }
          v26 = v25 + 40;
          v27 = *(unsigned __int8 *)(v25 + 488);
          if (v27)
            v28 = v26;
          else
            v28 = 0;
          v744.i32[0] = v13;
          v744.i8[4] = 1;
          v744.i64[1] = v28;
          if (v27)
          {
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v26 + 24))(v26))
            {
              v29 = v744.i64[1];
              _Q1 = *(_OWORD *)(v744.i64[1] + 64);
              _D3 = *(_QWORD *)(v744.i64[1] + 72);
              __asm { FMLA            D2, D3, V1.D[1] }
              if (fabs(sqrt(_D2 + *(double *)(v744.i64[1] + 80) * *(double *)(v744.i64[1] + 80)) + -1.0) > 0.000001
                && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 82, (uint64_t)"std::fabs(anchor_direction().norm2() - 1) <= 1e-6", 49, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
              {
                goto LABEL_877;
              }
            }
            else
            {
              if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 44, (uint64_t)"initializeImpl()", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
              {
                goto LABEL_877;
              }
              v29 = v744.i64[1];
              if (!v744.i64[1])
                goto LABEL_40;
            }
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v29 + 24))(v29))
            {
              v36 = *(uint64_t **)(v29 + 96);
              v37 = *v36;
              v38 = (double *)v36[2];
              v39 = v36[4];
              v40 = (double *)v36[6];
              _D1 = *(double *)(v29 + 16) - v38[1];
              v42 = *(double *)(v29 + 24) - v38[2];
              _Q3.f64[0] = *(float64_t *)(v37 + 16);
              _Q7 = *(_OWORD *)(v37 + 48);
              _Q3.f64[1] = *(float64_t *)(v37 + 40);
              v45 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v37, *(int64x2_t *)(v37 + 24)), *(double *)(v29 + 8) - *v38), (float64x2_t)vzip2q_s64(*(int64x2_t *)v37, *(int64x2_t *)(v37 + 24)), _D1), _Q3, v42);
              __asm { FMLA            D2, D1, V7.D[1] }
              v47 = _D2 + *(double *)(v37 + 64) * v42;
              v48 = v45.f64[0] - *v40;
              _D2 = v45.f64[1] - v40[1];
              v50 = v47 - v40[2];
              _Q3.f64[0] = *(float64_t *)(v39 + 16);
              _Q4 = *(int64x2_t *)v39;
              _Q6 = *(int64x2_t *)(v39 + 24);
              _Q16 = *(_OWORD *)(v39 + 48);
              __asm { FMLA            D19, D2, V4.D[1] }
              _Q3.f64[1] = *(float64_t *)(v39 + 40);
              _Q17 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v39, _Q6), v48), (float64x2_t)vzip2q_s64(*(int64x2_t *)v39, _Q6), _D2), _Q3, v50);
              __asm
              {
                FMLA            D3, D2, V16.D[1]
                FMLA            D1, D2, V6.D[1]
              }
              _D1 = _D1 + v50 * _Q3.f64[1];
              __asm { FMLA            D2, D1, V17.D[1] }
              *(_QWORD *)&v745 = sqrt(_D2+ (_Q3.f64[0] + v50 * *(double *)(v39 + 64))* (_Q3.f64[0] + *(double *)(v39 + 64) * v50));
              _Q1 = *(_OWORD *)(v29 + 64);
              _Q3.f64[0] = *(float64_t *)(v29 + 72);
              __asm { FMLA            D2, D3, V1.D[1] }
              if (fabs(sqrt(_D2 + *(double *)(v29 + 80) * *(double *)(v29 + 80)) + -1.0) > 0.000001
                && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 82, (uint64_t)"std::fabs(anchor_direction().norm2() - 1) <= 1e-6", 49, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
              {
                goto LABEL_877;
              }
              if (sub_20FC57AC4(v684, (unsigned int *)&v744))
              {
                *((_BYTE *)v690 + 4) = 0;
                *(_DWORD *)v690 = 0;
              }
            }
          }
LABEL_40:
          v25 = *v4;
          *(_DWORD *)(*v4 + 520) = 1;
LABEL_41:
          v689 = v4;
          if (*(_BYTE *)(v25 + 488))
            v61 = v25 + 40;
          else
            v61 = 0;
          v62 = *(_QWORD *)(v61 + 32);
          v63 = *(_DWORD *)(v61 + 40);
          v64 = *(_DWORD *)(v61 + 48);
          v697 = v62;
          v698 = v12;
          while (1)
          {
            v65 = v715;
            v66 = v715 / v714;
            v67 = v715 % v714;
            v68 = *(_QWORD **)(v713 + 48);
            if (((v715 % v714) & 0x8000000000000000) != 0)
            {
              do
              {
                v83 = (_QWORD *)*v68;
                if (*v68)
                {
                  do
                  {
                    v69 = v83;
                    v83 = (_QWORD *)v83[1];
                  }
                  while (v83);
                }
                else
                {
                  do
                  {
                    v69 = (_QWORD *)v68[2];
                    _ZF = *v69 == (_QWORD)v68;
                    v68 = v69;
                  }
                  while (_ZF);
                }
                v68 = v69;
                _CF = __CFADD__(v67++, 1);
              }
              while (!_CF);
            }
            else if (v67)
            {
              do
              {
                v82 = (_QWORD *)v68[1];
                if (v82)
                {
                  do
                  {
                    v69 = v82;
                    v82 = (_QWORD *)*v82;
                  }
                  while (v82);
                }
                else
                {
                  do
                  {
                    v69 = (_QWORD *)v68[2];
                    _ZF = *v69 == (_QWORD)v68;
                    v68 = v69;
                  }
                  while (!_ZF);
                }
                v68 = v69;
                v81 = v67-- <= 1;
              }
              while (!v81);
            }
            else
            {
              v69 = *(_QWORD **)(v713 + 48);
            }
            v70 = v69[4];
            v71 = v69[5];
            v72 = *(_QWORD **)(v713 + 296);
            if (v66 < 0)
            {
              do
              {
                v84 = (_QWORD *)*v72;
                if (*v72)
                {
                  do
                  {
                    v73 = v84;
                    v84 = (_QWORD *)v84[1];
                  }
                  while (v84);
                }
                else
                {
                  do
                  {
                    v73 = (_QWORD *)v72[2];
                    _ZF = *v73 == (_QWORD)v72;
                    v72 = v73;
                  }
                  while (_ZF);
                }
                v72 = v73;
                _CF = __CFADD__(v66++, 1);
              }
              while (!_CF);
            }
            else if (v714 <= v715)
            {
              do
              {
                v85 = (_QWORD *)v72[1];
                if (v85)
                {
                  do
                  {
                    v73 = v85;
                    v85 = (_QWORD *)*v85;
                  }
                  while (v85);
                }
                else
                {
                  do
                  {
                    v73 = (_QWORD *)v72[2];
                    _ZF = *v73 == (_QWORD)v72;
                    v72 = v73;
                  }
                  while (!_ZF);
                }
                v72 = v73;
                v81 = v66-- <= 1;
              }
              while (!v81);
            }
            else
            {
              v73 = *(_QWORD **)(v713 + 296);
            }
            v74 = *((_DWORD *)v73 + 8);
            v708 = v70;
            v709 = v71;
            v710 = v74;
            _ZF = v64 == v74 && v62 == v70;
            if (_ZF && v63 == (_DWORD)v71)
              goto LABEL_802;
            v77 = sub_20E9DF85C((_QWORD *)(a1[1] + 1784), &v708);
            if (v77)
              v80 = v77[13];
            else
              v80 = 0;
            v86 = v709;
            v87 = v710;
            v79.n128_u64[0] = *(_QWORD *)(v16 + 8);
            v78.n128_u32[0] = *(_DWORD *)(v16 + 32);
            v720 = 0;
            v719 = 0;
            v722 = 0;
            v721 = 0;
            v88 = (int64x2_t *)a1[827];
            v89 = (int64x2_t *)a1[828];
            if (v88 == v89)
            {
              v90 = (int64x2_t *)a1[827];
            }
            else
            {
              v90 = (int64x2_t *)a1[828];
              if (v89[-14].i64[1] >= (unint64_t)v705)
              {
                v91 = 0x84BDA12F684BDA13 * (((char *)v89 - (char *)v88) >> 3);
                v92 = (int64x2_t *)a1[827];
                do
                {
                  v93 = v91 >> 1;
                  v94 = (unint64_t *)v92 + 27 * (v91 >> 1);
                  v96 = *v94;
                  v95 = (int64x2_t *)(v94 + 27);
                  v91 += ~(v91 >> 1);
                  if (v96 < v705)
                    v92 = v95;
                  else
                    v91 = v93;
                }
                while (v91);
                v90 = (int64x2_t *)a1[828];
                if (v92 != v89)
                {
                  v90 = v92;
                  if (v92->i64[0] == v705)
                  {
LABEL_239:
                    v193 = 1;
                    v194 = v720;
                    if (!v720)
                      goto LABEL_245;
                    goto LABEL_242;
                  }
                }
              }
            }
            v79 = (__n128)vcvtq_f64_f32((float32x2_t)v79.n128_u64[0]);
            v723.__r_.__value_.__r.__words[0] = v705;
            *(__n128 *)&v723.__r_.__value_.__r.__words[1] = v79;
            v724.__r_.__value_.__r.__words[0] = v695;
            v724.__r_.__value_.__l.__size_ = v80;
            *(double *)&v724.__r_.__value_.__r.__words[2] = v78.n128_f32[0] * a3;
            v78 = 0uLL;
            v725 = 0u;
            v726 = 0u;
            v727 = 0u;
            v728 = 0u;
            v729 = 0u;
            v730 = 0;
            v735 = 0;
            v736 = 0;
            v733 = 0xBFF0000000000000;
            v734 = 0;
            v737 = 0;
            v97 = (char *)a1[671];
            v98 = (char *)a1[672];
            v99 = v98 - v97;
            if (v98 == v97)
              goto LABEL_233;
            v100 = v99 >> 4;
            v101 = (char *)a1[671];
            v102 = v99 >> 4;
            do
            {
              v103 = v102 >> 1;
              v104 = (unsigned int *)&v101[16 * (v102 >> 1)];
              v106 = *v104;
              v105 = (char *)(v104 + 4);
              v102 += ~(v102 >> 1);
              if (v106 < v64)
                v101 = v105;
              else
                v102 = v103;
            }
            while (v102);
            if (v101 == v98 || *(_DWORD *)v101 != v64)
              goto LABEL_233;
            v107 = *((_QWORD *)v101 + 1);
            *(_QWORD *)&v725 = v107;
            ++*(_DWORD *)(*((_QWORD *)v101 + 1) + 8);
            do
            {
              v108 = v100 >> 1;
              v109 = (unsigned int *)&v97[16 * (v100 >> 1)];
              v111 = *v109;
              v110 = (char *)(v109 + 4);
              v100 += ~(v100 >> 1);
              if (v111 < v87)
                v97 = v110;
              else
                v100 = v108;
            }
            while (v100);
            if (v97 == v98 || *(_DWORD *)v97 != v87)
            {
              v172 = 0;
              v166 = 0;
              v157 = 0;
              v151 = 0;
              v142 = 0;
              v136 = 0;
              v127 = 0;
              v121 = 0;
              v112 = 0;
              goto LABEL_213;
            }
            v112 = *((_QWORD *)v97 + 1);
            *((_QWORD *)&v725 + 1) = v112;
            ++*(_DWORD *)(*((_QWORD *)v97 + 1) + 8);
            v113 = (char *)a1[647];
            v114 = (char *)a1[648];
            v115 = v113;
            if (v114 != v113)
            {
              v116 = (v114 - v113) >> 4;
              v115 = (char *)a1[647];
              do
              {
                v117 = v116 >> 1;
                v118 = (unsigned int *)&v115[16 * (v116 >> 1)];
                v120 = *v118;
                v119 = (char *)(v118 + 4);
                v116 += ~(v116 >> 1);
                if (v120 < v63)
                  v115 = v119;
                else
                  v116 = v117;
              }
              while (v116);
            }
            if (v115 == v114 || *(_DWORD *)v115 != v63)
            {
              v172 = 0;
              v166 = 0;
              v157 = 0;
              v151 = 0;
              v142 = 0;
              v136 = 0;
              v127 = 0;
              v121 = 0;
              goto LABEL_213;
            }
            v121 = *((_QWORD *)v115 + 1);
            *(_QWORD *)&v726 = v121;
            ++*(_DWORD *)(*((_QWORD *)v115 + 1) + 8);
            if (v114 != v113)
            {
              v122 = (v114 - v113) >> 4;
              do
              {
                v123 = v122 >> 1;
                v124 = (unsigned int *)&v113[16 * (v122 >> 1)];
                v126 = *v124;
                v125 = (char *)(v124 + 4);
                v122 += ~(v122 >> 1);
                if (v126 < v86)
                  v113 = v125;
                else
                  v122 = v123;
              }
              while (v122);
            }
            if (v113 == v114 || *(_DWORD *)v113 != v86)
            {
              v172 = 0;
              v166 = 0;
              v157 = 0;
              v151 = 0;
              v142 = 0;
              v136 = 0;
              v127 = 0;
              goto LABEL_213;
            }
            v127 = *((_QWORD *)v113 + 1);
            *((_QWORD *)&v726 + 1) = v127;
            ++*(_DWORD *)(*((_QWORD *)v113 + 1) + 8);
            v128 = (char *)a1[719];
            v129 = (char *)a1[720];
            v130 = v128;
            if (v129 != v128)
            {
              v131 = (v129 - v128) >> 4;
              v130 = (char *)a1[719];
              do
              {
                v132 = v131 >> 1;
                v133 = (unsigned int *)&v130[16 * (v131 >> 1)];
                v135 = *v133;
                v134 = (char *)(v133 + 4);
                v131 += ~(v131 >> 1);
                if (v135 < v64)
                  v130 = v134;
                else
                  v131 = v132;
              }
              while (v131);
            }
            if (v130 == v129 || *(_DWORD *)v130 != v64)
            {
              v172 = 0;
              v166 = 0;
              v157 = 0;
              v151 = 0;
              v142 = 0;
              v136 = 0;
              goto LABEL_213;
            }
            v136 = *((_QWORD *)v130 + 1);
            *(_QWORD *)&v727 = v136;
            ++*(_DWORD *)(*((_QWORD *)v130 + 1) + 8);
            if (v129 != v128)
            {
              v137 = (v129 - v128) >> 4;
              do
              {
                v138 = v137 >> 1;
                v139 = (unsigned int *)&v128[16 * (v137 >> 1)];
                v141 = *v139;
                v140 = (char *)(v139 + 4);
                v137 += ~(v137 >> 1);
                if (v141 < v87)
                  v128 = v140;
                else
                  v137 = v138;
              }
              while (v137);
            }
            if (v128 == v129 || *(_DWORD *)v128 != v87)
            {
              v172 = 0;
              v166 = 0;
              v157 = 0;
              v151 = 0;
              v142 = 0;
              goto LABEL_213;
            }
            v142 = *((_QWORD *)v128 + 1);
            *((_QWORD *)&v727 + 1) = v142;
            ++*(_DWORD *)(*((_QWORD *)v128 + 1) + 8);
            v143 = (char *)a1[731];
            v144 = (char *)a1[732];
            v145 = v143;
            if (v144 != v143)
            {
              v146 = (v144 - v143) >> 4;
              v145 = (char *)a1[731];
              do
              {
                v147 = v146 >> 1;
                v148 = (unsigned int *)&v145[16 * (v146 >> 1)];
                v150 = *v148;
                v149 = (char *)(v148 + 4);
                v146 += ~(v146 >> 1);
                if (v150 < v64)
                  v145 = v149;
                else
                  v146 = v147;
              }
              while (v146);
            }
            if (v145 == v144 || *(_DWORD *)v145 != v64)
            {
              v172 = 0;
              v166 = 0;
              v157 = 0;
              v151 = 0;
              goto LABEL_213;
            }
            v151 = *((_QWORD *)v145 + 1);
            *(_QWORD *)&v728 = v151;
            ++*(_DWORD *)(*((_QWORD *)v145 + 1) + 8);
            if (v144 != v143)
            {
              v152 = (v144 - v143) >> 4;
              do
              {
                v153 = v152 >> 1;
                v154 = (unsigned int *)&v143[16 * (v152 >> 1)];
                v156 = *v154;
                v155 = (char *)(v154 + 4);
                v152 += ~(v152 >> 1);
                if (v156 < v87)
                  v143 = v155;
                else
                  v152 = v153;
              }
              while (v152);
            }
            if (v143 == v144 || *(_DWORD *)v143 != v87)
            {
              v172 = 0;
              v166 = 0;
              v157 = 0;
              goto LABEL_213;
            }
            v157 = *((_QWORD *)v143 + 1);
            *((_QWORD *)&v728 + 1) = v157;
            ++*(_DWORD *)(*((_QWORD *)v143 + 1) + 8);
            v158 = (char *)a1[743];
            v159 = (char *)a1[744];
            v160 = v158;
            if (v159 != v158)
            {
              v161 = (v159 - v158) >> 4;
              v160 = (char *)a1[743];
              do
              {
                v162 = v161 >> 1;
                v163 = (unsigned int *)&v160[16 * (v161 >> 1)];
                v165 = *v163;
                v164 = (char *)(v163 + 4);
                v161 += ~(v161 >> 1);
                if (v165 < v64)
                  v160 = v164;
                else
                  v161 = v162;
              }
              while (v161);
            }
            if (v160 == v159 || *(_DWORD *)v160 != v64)
            {
              v172 = 0;
              v166 = 0;
              goto LABEL_213;
            }
            v166 = *((_QWORD *)v160 + 1);
            *(_QWORD *)&v729 = v166;
            ++*(_DWORD *)(*((_QWORD *)v160 + 1) + 8);
            if (v159 != v158)
            {
              v167 = (v159 - v158) >> 4;
              do
              {
                v168 = v167 >> 1;
                v169 = (unsigned int *)&v158[16 * (v167 >> 1)];
                v171 = *v169;
                v170 = (char *)(v169 + 4);
                v167 += ~(v167 >> 1);
                if (v171 < v87)
                  v158 = v170;
                else
                  v167 = v168;
              }
              while (v167);
            }
            if (v158 == v159 || (v706 = v90, *(_DWORD *)v158 != v87))
            {
              v172 = 0;
LABEL_213:
              if (v107)
                --*(_DWORD *)(v107 + 8);
              if (v112)
                --*(_DWORD *)(v112 + 8);
              if (v121)
                --*(_DWORD *)(v121 + 8);
              if (v127)
                --*(_DWORD *)(v127 + 8);
              if (v136)
                --*(_DWORD *)(v136 + 8);
              if (v142)
                --*(_DWORD *)(v142 + 8);
              if (v151)
                --*(_DWORD *)(v151 + 8);
              if (v157)
                --*(_DWORD *)(v157 + 8);
              if (v166)
                --*(_DWORD *)(v166 + 8);
              if (v172)
                --*(_DWORD *)(v172 + 8);
LABEL_233:
              v189 = 1;
              v190 = v722;
              if (!v722)
                goto LABEL_238;
LABEL_234:
              p_shared_owners = (unint64_t *)&v190->__shared_owners_;
              do
                v192 = __ldaxr(p_shared_owners);
              while (__stlxr(v192 - 1, p_shared_owners));
              if (!v192)
              {
                ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
                std::__shared_weak_count::__release_weak(v190);
              }
              goto LABEL_238;
            }
            v172 = *((_QWORD *)v158 + 1);
            *((_QWORD *)&v729 + 1) = v172;
            ++*(_DWORD *)(*((_QWORD *)v158 + 1) + 8);
            v173 = (char *)a1[767];
            v174 = (char *)a1[768];
            if (v174 != v173)
            {
              v175 = (v174 - v173) >> 4;
              do
              {
                v176 = v175 >> 1;
                v177 = (unsigned __int32 *)&v173[16 * (v175 >> 1)];
                v179 = *v177;
                v178 = (char *)(v177 + 4);
                v175 += ~(v175 >> 1);
                if (v179 < v13)
                  v173 = v178;
                else
                  v175 = v176;
              }
              while (v175);
            }
            if (v173 == v174 || *(_DWORD *)v173 != v13)
              goto LABEL_213;
            v180 = *((_QWORD *)v173 + 1);
            v730 = v180;
            ++*(_DWORD *)(*((_QWORD *)v173 + 1) + 8);
            if (!*(_BYTE *)(v107 + 20)
              && !*(_BYTE *)(v112 + 20)
              && !*(_BYTE *)(v121 + 20)
              && !*(_BYTE *)(v127 + 20)
              && !*(_BYTE *)(v136 + 20)
              && !*(_BYTE *)(v142 + 20)
              && !*(_BYTE *)(v151 + 20)
              && !*(_BYTE *)(v157 + 20)
              && !*(_BYTE *)(v166 + 20)
              && !*(_BYTE *)(v172 + 20)
              && !*(_BYTE *)(v180 + 20))
            {
              --*(_DWORD *)(v107 + 8);
              --*(_DWORD *)(v112 + 8);
              v78 = 0uLL;
              v725 = 0u;
              --*(_DWORD *)(v121 + 8);
              --*(_DWORD *)(v127 + 8);
              v726 = 0u;
              --*(_DWORD *)(v136 + 8);
              --*(_DWORD *)(v142 + 8);
              v727 = 0u;
              --*(_DWORD *)(v151 + 8);
              --*(_DWORD *)(v157 + 8);
              v728 = 0u;
              --*(_DWORD *)(v166 + 8);
              --*(_DWORD *)(v172 + 8);
              v729 = 0u;
              --*(_DWORD *)(v180 + 8);
              v189 = 1;
              v190 = v722;
              if (!v722)
                goto LABEL_238;
              goto LABEL_234;
            }
            v744.i64[0] = v705;
            v744.i64[1] = v705;
            v745 = *(_OWORD *)&v723.__r_.__value_.__r.__words[1];
            v746 = v724;
            v749 = v727;
            v750 = v728;
            v751 = v729;
            v752 = v730;
            v747 = v725;
            v748 = v726;
            v753 = v731;
            v754 = v732;
            v755 = v733;
            v756 = v734;
            v757 = 0uLL;
            v735 = 0;
            v736 = 0;
            v758 = 0;
            if (v89 == v90 || v90->i64[0] != v705)
              break;
LABEL_867:
            v682[1].i8[2] = 0;
            v682[1].i8[0] = 0;
            v79 = (__n128)xmmword_210378060;
            v78 = (__n128)vaddq_s64(*v682, (int64x2_t)xmmword_210378060);
            *v682 = (int64x2_t)v78;
            v666 = v736;
            if (v736)
            {
              v667 = (unint64_t *)&v736->__shared_owners_;
              do
                v668 = __ldaxr(v667);
              while (__stlxr(v668 - 1, v667));
              if (!v668)
              {
                ((void (*)(std::__shared_weak_count *))v666->__on_zero_shared)(v666);
                std::__shared_weak_count::__release_weak(v666);
              }
            }
            v189 = 0;
            v190 = v722;
            if (v722)
              goto LABEL_234;
LABEL_238:
            if ((v189 & 1) != 0)
              goto LABEL_239;
            v193 = 0;
            *((_BYTE *)v690 + 4) = 0;
            *(_DWORD *)v690 = 0;
            v194 = v720;
            if (!v720)
              goto LABEL_245;
LABEL_242:
            v195 = (unint64_t *)&v194->__shared_owners_;
            do
              v196 = __ldaxr(v195);
            while (__stlxr(v196 - 1, v195));
            if (v196)
            {
LABEL_245:
              if (v193)
                goto LABEL_246;
              goto LABEL_801;
            }
            ((void (*)(std::__shared_weak_count *, __n128, __n128))v194->__on_zero_shared)(v194, v78, v79);
            std::__shared_weak_count::__release_weak(v194);
            if (v193)
            {
LABEL_246:
              v197 = (char *)a1[767];
              v198 = (char *)a1[768];
              if (v198 != v197)
              {
                v199 = (v198 - v197) >> 4;
                do
                {
                  v200 = v199 >> 1;
                  v201 = &v197[16 * (v199 >> 1)];
                  v203 = *(_DWORD *)v201;
                  v202 = v201 + 16;
                  v199 += ~(v199 >> 1);
                  if (v203 < v13)
                    v197 = v202;
                  else
                    v199 = v200;
                }
                while (v199);
              }
              if ((v197 == v198 || *(_DWORD *)v197 != v13)
                && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOLandmarkFactorUtil.h", 268, (uint64_t)"linear_system.template findVariable<LandmarkType>(landmark_id) != linear_system.template endVariable<LandmarkType>()", 116, (uint64_t)"Landmark with the given ID was not found.", 41, (void (*)(void **))sub_21023DDB0))
              {
                goto LABEL_877;
              }
              v204 = (_QWORD *)a1[827];
              v205 = (_QWORD *)a1[828];
              if (v205 != v204)
              {
                v206 = 0x84BDA12F684BDA13 * (v205 - v204);
                do
                {
                  v207 = v206 >> 1;
                  v208 = &v204[27 * (v206 >> 1)];
                  v210 = *v208;
                  v209 = v208 + 27;
                  v206 += ~(v206 >> 1);
                  if (v210 < v705)
                    v204 = v209;
                  else
                    v206 = v207;
                }
                while (v206);
                if (v205 != v204
                  && *v204 == v705
                  && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOLandmarkFactorUtil.h", 273, (uint64_t)"linear_system.graph().template findFactor<FactorType>(factor_cnt) == linear_system.graph().template endFactor<FactorType>()", 123, (uint64_t)"Factor with the same ID already exists.", 39, (void (*)(void **))sub_21023DDB0))
                {
                  goto LABEL_877;
                }
              }
              sub_20E863438((uint64_t)&v744);
              v211 = (char *)a1[767];
              v212 = (char *)a1[768];
              if (v212 != v211)
              {
                v213 = (v212 - v211) >> 4;
                do
                {
                  v214 = v213 >> 1;
                  v215 = &v211[16 * (v213 >> 1)];
                  v217 = *(_DWORD *)v215;
                  v216 = v215 + 16;
                  v213 += ~(v213 >> 1);
                  if (v217 < v13)
                    v211 = v216;
                  else
                    v213 = v214;
                }
                while (v213);
              }
              if (v211 == v212 || *(_DWORD *)v211 != v13)
              {
                v223 = 1;
                v224 = (char *)a1[671];
                v225 = (char *)a1[672];
                v226 = v224;
                v227 = v225 - v224;
                if (v225 == v224)
                  goto LABEL_288;
              }
              else
              {
                v218 = sub_20E86A980(&v745, (uint64_t)"error: landmark variable ", 25);
                sub_20F622838((uint64_t)&__p);
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  p_p = &__p;
                else
                  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                else
                  size = __p.__r_.__value_.__l.__size_;
                v221 = sub_20E86A980(v218, (uint64_t)p_p, size);
                sub_20E86A980(v221, (uint64_t)" with ID ", 9);
                v222 = (_QWORD *)std::ostream::operator<<();
                sub_20E86A980(v222, (uint64_t)" was not found.\n", 16);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                v223 = 0;
                v224 = (char *)a1[671];
                v225 = (char *)a1[672];
                v226 = v224;
                v227 = v225 - v224;
                if (v225 == v224)
                {
LABEL_288:
                  if (v226 != v225 && *(_DWORD *)v226 == v64)
                  {
                    if (v225 != v224)
                    {
                      v233 = (v225 - v224) >> 4;
                      do
                      {
                        v234 = v233 >> 1;
                        v235 = (unsigned int *)&v224[16 * (v233 >> 1)];
                        v237 = *v235;
                        v236 = (char *)(v235 + 4);
                        v233 += ~(v233 >> 1);
                        if (v237 < v64)
                          v224 = v236;
                        else
                          v233 = v234;
                      }
                      while (v233);
                    }
                    v700 = v223;
                    if (v224 == v225 || *(_DWORD *)v224 != v64)
                      v224 = v225;
                    v238 = *((_QWORD *)v224 + 1);
                    v239 = sub_20E86A980(&v745, (uint64_t)"debug: variable ", 16);
                    sub_20F622C70((uint64_t)&__p);
                    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v240 = &__p;
                    else
                      v240 = (std::string *)__p.__r_.__value_.__r.__words[0];
                    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v241 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                    else
                      v241 = __p.__r_.__value_.__l.__size_;
                    v242 = sub_20E86A980(v239, (uint64_t)v240, v241);
                    sub_20E86A980(v242, (uint64_t)" with ID ", 9);
                    v243 = (_QWORD *)std::ostream::operator<<();
                    sub_20E86A980(v243, (uint64_t)" found (", 8);
                    v244 = (_QWORD *)std::ostream::operator<<();
                    v245 = sub_20E86A980(v244, (uint64_t)", ", 2);
                    if (*(_BYTE *)(v238 + 20))
                      v246 = "free";
                    else
                      v246 = "fixed";
                    if (*(_BYTE *)(v238 + 20))
                      v247 = 4;
                    else
                      v247 = 5;
                    v248 = sub_20E86A980(v245, (uint64_t)v246, v247);
                    sub_20E86A980(v248, (uint64_t)")\n", 2);
                    v249 = v700;
                    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(__p.__r_.__value_.__l.__data_);
                    v707 = *(unsigned __int8 *)(v238 + 20);
                    v250 = (char *)a1[671];
                    v251 = (char *)a1[672];
                    v252 = v250;
                    v253 = v251 - v250;
                    if (v251 == v250)
                      goto LABEL_329;
LABEL_324:
                    v259 = v253 >> 4;
                    v252 = v250;
                    do
                    {
                      v260 = v259 >> 1;
                      v261 = (unsigned int *)&v252[16 * (v259 >> 1)];
                      v263 = *v261;
                      v262 = (char *)(v261 + 4);
                      v259 += ~(v259 >> 1);
                      if (v263 < v87)
                        v252 = v262;
                      else
                        v259 = v260;
                    }
                    while (v259);
                    goto LABEL_329;
                  }
                  v254 = sub_20E86A980(&v745, (uint64_t)"error: variable ", 16);
                  sub_20F622C70((uint64_t)&__p);
                  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v255 = &__p;
                  else
                    v255 = (std::string *)__p.__r_.__value_.__r.__words[0];
                  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v256 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                  else
                    v256 = __p.__r_.__value_.__l.__size_;
                  v257 = sub_20E86A980(v254, (uint64_t)v255, v256);
                  sub_20E86A980(v257, (uint64_t)" with ID ", 9);
                  v258 = (_QWORD *)std::ostream::operator<<();
                  sub_20E86A980(v258, (uint64_t)" not found\n", 11);
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__p.__r_.__value_.__l.__data_);
                  v249 = 0;
                  v707 = 0;
                  v250 = (char *)a1[671];
                  v251 = (char *)a1[672];
                  v252 = v250;
                  v253 = v251 - v250;
                  if (v251 != v250)
                    goto LABEL_324;
LABEL_329:
                  if (v252 == v251 || *(_DWORD *)v252 != v87)
                  {
                    v285 = sub_20E86A980(&v745, (uint64_t)"error: variable ", 16);
                    sub_20F622C70((uint64_t)&__p);
                    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v286 = &__p;
                    else
                      v286 = (std::string *)__p.__r_.__value_.__r.__words[0];
                    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v287 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                    else
                      v287 = __p.__r_.__value_.__l.__size_;
                    v288 = sub_20E86A980(v285, (uint64_t)v286, v287);
                    sub_20E86A980(v288, (uint64_t)" with ID ", 9);
                    v289 = (_QWORD *)std::ostream::operator<<();
                    sub_20E86A980(v289, (uint64_t)" not found\n", 11);
                    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                    {
                      operator delete(__p.__r_.__value_.__l.__data_);
                      v280 = 0;
                      v281 = (char *)a1[647];
                      v282 = (char *)a1[648];
                      v283 = v281;
                      v284 = v282 - v281;
                      if (v282 == v281)
                        goto LABEL_373;
                    }
                    else
                    {
                      v280 = 0;
                      v281 = (char *)a1[647];
                      v282 = (char *)a1[648];
                      v283 = v281;
                      v284 = v282 - v281;
                      if (v282 == v281)
                        goto LABEL_373;
                    }
                  }
                  else
                  {
                    if (v251 != v250)
                    {
                      v264 = (v251 - v250) >> 4;
                      do
                      {
                        v265 = v264 >> 1;
                        v266 = (unsigned int *)&v250[16 * (v264 >> 1)];
                        v268 = *v266;
                        v267 = (char *)(v266 + 4);
                        v264 += ~(v264 >> 1);
                        if (v268 < v87)
                          v250 = v267;
                        else
                          v264 = v265;
                      }
                      while (v264);
                    }
                    v701 = v249;
                    if (v250 == v251 || *(_DWORD *)v250 != v87)
                      v250 = v251;
                    v269 = *((_QWORD *)v250 + 1);
                    v270 = sub_20E86A980(&v745, (uint64_t)"debug: variable ", 16);
                    sub_20F622C70((uint64_t)&__p);
                    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v271 = &__p;
                    else
                      v271 = (std::string *)__p.__r_.__value_.__r.__words[0];
                    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v272 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                    else
                      v272 = __p.__r_.__value_.__l.__size_;
                    v273 = sub_20E86A980(v270, (uint64_t)v271, v272);
                    sub_20E86A980(v273, (uint64_t)" with ID ", 9);
                    v274 = (_QWORD *)std::ostream::operator<<();
                    sub_20E86A980(v274, (uint64_t)" found (", 8);
                    v275 = (_QWORD *)std::ostream::operator<<();
                    v276 = sub_20E86A980(v275, (uint64_t)", ", 2);
                    if (*(_BYTE *)(v269 + 20))
                      v277 = "free";
                    else
                      v277 = "fixed";
                    if (*(_BYTE *)(v269 + 20))
                      v278 = 4;
                    else
                      v278 = 5;
                    v279 = sub_20E86A980(v276, (uint64_t)v277, v278);
                    sub_20E86A980(v279, (uint64_t)")\n", 2);
                    v280 = v701;
                    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(__p.__r_.__value_.__l.__data_);
                    v707 |= *(unsigned __int8 *)(v269 + 20);
                    v281 = (char *)a1[647];
                    v282 = (char *)a1[648];
                    v283 = v281;
                    v284 = v282 - v281;
                    if (v282 == v281)
                    {
LABEL_373:
                      if (v283 == v282 || *(_DWORD *)v283 != v63)
                      {
                        v316 = sub_20E86A980(&v745, (uint64_t)"error: variable ", 16);
                        sub_20F622E88((uint64_t)&__p);
                        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          v317 = &__p;
                        else
                          v317 = (std::string *)__p.__r_.__value_.__r.__words[0];
                        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          v318 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                        else
                          v318 = __p.__r_.__value_.__l.__size_;
                        v319 = sub_20E86A980(v316, (uint64_t)v317, v318);
                        sub_20E86A980(v319, (uint64_t)" with ID ", 9);
                        v320 = (_QWORD *)std::ostream::operator<<();
                        sub_20E86A980(v320, (uint64_t)" not found\n", 11);
                        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                        {
                          operator delete(__p.__r_.__value_.__l.__data_);
                          v311 = 0;
                          v312 = (char *)a1[647];
                          v313 = (char *)a1[648];
                          v314 = v312;
                          v315 = v313 - v312;
                          if (v313 == v312)
                            goto LABEL_415;
                        }
                        else
                        {
                          v311 = 0;
                          v312 = (char *)a1[647];
                          v313 = (char *)a1[648];
                          v314 = v312;
                          v315 = v313 - v312;
                          if (v313 == v312)
                            goto LABEL_415;
                        }
                      }
                      else
                      {
                        if (v282 != v281)
                        {
                          v295 = (v282 - v281) >> 4;
                          do
                          {
                            v296 = v295 >> 1;
                            v297 = (unsigned int *)&v281[16 * (v295 >> 1)];
                            v299 = *v297;
                            v298 = (char *)(v297 + 4);
                            v295 += ~(v295 >> 1);
                            if (v299 < v63)
                              v281 = v298;
                            else
                              v295 = v296;
                          }
                          while (v295);
                        }
                        v702 = v280;
                        if (v281 == v282 || *(_DWORD *)v281 != v63)
                          v281 = v282;
                        v300 = *((_QWORD *)v281 + 1);
                        v301 = sub_20E86A980(&v745, (uint64_t)"debug: variable ", 16);
                        sub_20F622E88((uint64_t)&__p);
                        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          v302 = &__p;
                        else
                          v302 = (std::string *)__p.__r_.__value_.__r.__words[0];
                        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          v303 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                        else
                          v303 = __p.__r_.__value_.__l.__size_;
                        v304 = sub_20E86A980(v301, (uint64_t)v302, v303);
                        sub_20E86A980(v304, (uint64_t)" with ID ", 9);
                        v305 = (_QWORD *)std::ostream::operator<<();
                        sub_20E86A980(v305, (uint64_t)" found (", 8);
                        v306 = (_QWORD *)std::ostream::operator<<();
                        v307 = sub_20E86A980(v306, (uint64_t)", ", 2);
                        if (*(_BYTE *)(v300 + 20))
                          v308 = "free";
                        else
                          v308 = "fixed";
                        if (*(_BYTE *)(v300 + 20))
                          v309 = 4;
                        else
                          v309 = 5;
                        v310 = sub_20E86A980(v307, (uint64_t)v308, v309);
                        sub_20E86A980(v310, (uint64_t)")\n", 2);
                        v311 = v702;
                        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(__p.__r_.__value_.__l.__data_);
                        v707 |= *(unsigned __int8 *)(v300 + 20);
                        v312 = (char *)a1[647];
                        v313 = (char *)a1[648];
                        v314 = v312;
                        v315 = v313 - v312;
                        if (v313 == v312)
                        {
LABEL_415:
                          if (v314 == v313 || *(_DWORD *)v314 != v86)
                          {
                            v347 = sub_20E86A980(&v745, (uint64_t)"error: variable ", 16);
                            sub_20F622E88((uint64_t)&__p);
                            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                              v348 = &__p;
                            else
                              v348 = (std::string *)__p.__r_.__value_.__r.__words[0];
                            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                              v349 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                            else
                              v349 = __p.__r_.__value_.__l.__size_;
                            v350 = sub_20E86A980(v347, (uint64_t)v348, v349);
                            sub_20E86A980(v350, (uint64_t)" with ID ", 9);
                            v351 = (_QWORD *)std::ostream::operator<<();
                            sub_20E86A980(v351, (uint64_t)" not found\n", 11);
                            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                            {
                              operator delete(__p.__r_.__value_.__l.__data_);
                              v342 = 0;
                              v343 = (char *)a1[719];
                              v344 = (char *)a1[720];
                              v345 = v343;
                              v346 = v344 - v343;
                              if (v344 == v343)
                                goto LABEL_457;
                            }
                            else
                            {
                              v342 = 0;
                              v343 = (char *)a1[719];
                              v344 = (char *)a1[720];
                              v345 = v343;
                              v346 = v344 - v343;
                              if (v344 == v343)
                                goto LABEL_457;
                            }
                          }
                          else
                          {
                            if (v313 != v312)
                            {
                              v326 = (v313 - v312) >> 4;
                              do
                              {
                                v327 = v326 >> 1;
                                v328 = (unsigned int *)&v312[16 * (v326 >> 1)];
                                v330 = *v328;
                                v329 = (char *)(v328 + 4);
                                v326 += ~(v326 >> 1);
                                if (v330 < v86)
                                  v312 = v329;
                                else
                                  v326 = v327;
                              }
                              while (v326);
                            }
                            v703 = v311;
                            if (v312 == v313 || *(_DWORD *)v312 != v86)
                              v312 = v313;
                            v331 = *((_QWORD *)v312 + 1);
                            v332 = sub_20E86A980(&v745, (uint64_t)"debug: variable ", 16);
                            sub_20F622E88((uint64_t)&__p);
                            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                              v333 = &__p;
                            else
                              v333 = (std::string *)__p.__r_.__value_.__r.__words[0];
                            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                              v334 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                            else
                              v334 = __p.__r_.__value_.__l.__size_;
                            v335 = sub_20E86A980(v332, (uint64_t)v333, v334);
                            sub_20E86A980(v335, (uint64_t)" with ID ", 9);
                            v336 = (_QWORD *)std::ostream::operator<<();
                            sub_20E86A980(v336, (uint64_t)" found (", 8);
                            v337 = (_QWORD *)std::ostream::operator<<();
                            v338 = sub_20E86A980(v337, (uint64_t)", ", 2);
                            if (*(_BYTE *)(v331 + 20))
                              v339 = "free";
                            else
                              v339 = "fixed";
                            if (*(_BYTE *)(v331 + 20))
                              v340 = 4;
                            else
                              v340 = 5;
                            v341 = sub_20E86A980(v338, (uint64_t)v339, v340);
                            sub_20E86A980(v341, (uint64_t)")\n", 2);
                            v342 = v703;
                            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                              operator delete(__p.__r_.__value_.__l.__data_);
                            v707 |= *(unsigned __int8 *)(v331 + 20);
                            v343 = (char *)a1[719];
                            v344 = (char *)a1[720];
                            v345 = v343;
                            v346 = v344 - v343;
                            if (v344 == v343)
                            {
LABEL_457:
                              if (v345 == v344 || *(_DWORD *)v345 != v64)
                              {
                                v379 = sub_20E86A980(&v745, (uint64_t)"error: variable ", 16);
                                sub_20F6230A4((uint64_t)&__p);
                                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                  v380 = &__p;
                                else
                                  v380 = (std::string *)__p.__r_.__value_.__r.__words[0];
                                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                  v381 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                                else
                                  v381 = __p.__r_.__value_.__l.__size_;
                                v382 = sub_20E86A980(v379, (uint64_t)v380, v381);
                                sub_20E86A980(v382, (uint64_t)" with ID ", 9);
                                v383 = (_QWORD *)std::ostream::operator<<();
                                sub_20E86A980(v383, (uint64_t)" not found\n", 11);
                                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                {
                                  operator delete(__p.__r_.__value_.__l.__data_);
                                  v368 = 0;
                                  v375 = (char *)a1[719];
                                  v376 = (char *)a1[720];
                                  v377 = v375;
                                  v378 = v376 - v375;
                                  if (v376 == v375)
                                    goto LABEL_499;
                                }
                                else
                                {
                                  v368 = 0;
                                  v375 = (char *)a1[719];
                                  v376 = (char *)a1[720];
                                  v377 = v375;
                                  v378 = v376 - v375;
                                  if (v376 == v375)
                                    goto LABEL_499;
                                }
                              }
                              else
                              {
                                if (v344 != v343)
                                {
                                  v357 = (v344 - v343) >> 4;
                                  do
                                  {
                                    v358 = v357 >> 1;
                                    v359 = (unsigned int *)&v343[16 * (v357 >> 1)];
                                    v361 = *v359;
                                    v360 = (char *)(v359 + 4);
                                    v357 += ~(v357 >> 1);
                                    if (v361 < v64)
                                      v343 = v360;
                                    else
                                      v357 = v358;
                                  }
                                  while (v357);
                                }
                                v362 = v342;
                                if (v343 == v344 || *(_DWORD *)v343 != v64)
                                  v343 = v344;
                                v363 = *((_QWORD *)v343 + 1);
                                v364 = sub_20E86A980(&v745, (uint64_t)"debug: variable ", 16);
                                sub_20F6230A4((uint64_t)&__p);
                                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                  v365 = &__p;
                                else
                                  v365 = (std::string *)__p.__r_.__value_.__r.__words[0];
                                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                  v366 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                                else
                                  v366 = __p.__r_.__value_.__l.__size_;
                                v367 = sub_20E86A980(v364, (uint64_t)v365, v366);
                                v368 = v362;
                                sub_20E86A980(v367, (uint64_t)" with ID ", 9);
                                v369 = (_QWORD *)std::ostream::operator<<();
                                sub_20E86A980(v369, (uint64_t)" found (", 8);
                                v370 = (_QWORD *)std::ostream::operator<<();
                                v371 = sub_20E86A980(v370, (uint64_t)", ", 2);
                                if (*(_BYTE *)(v363 + 20))
                                  v372 = "free";
                                else
                                  v372 = "fixed";
                                if (*(_BYTE *)(v363 + 20))
                                  v373 = 4;
                                else
                                  v373 = 5;
                                v374 = sub_20E86A980(v371, (uint64_t)v372, v373);
                                sub_20E86A980(v374, (uint64_t)")\n", 2);
                                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                  operator delete(__p.__r_.__value_.__l.__data_);
                                v707 |= *(unsigned __int8 *)(v363 + 20);
                                v375 = (char *)a1[719];
                                v376 = (char *)a1[720];
                                v377 = v375;
                                v378 = v376 - v375;
                                if (v376 == v375)
                                {
LABEL_499:
                                  if (v377 == v376 || *(_DWORD *)v377 != v87)
                                  {
                                    v411 = sub_20E86A980(&v745, (uint64_t)"error: variable ", 16);
                                    sub_20F6230A4((uint64_t)&__p);
                                    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                      v412 = &__p;
                                    else
                                      v412 = (std::string *)__p.__r_.__value_.__r.__words[0];
                                    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                      v413 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                                    else
                                      v413 = __p.__r_.__value_.__l.__size_;
                                    v414 = sub_20E86A980(v411, (uint64_t)v412, v413);
                                    sub_20E86A980(v414, (uint64_t)" with ID ", 9);
                                    v415 = (_QWORD *)std::ostream::operator<<();
                                    sub_20E86A980(v415, (uint64_t)" not found\n", 11);
                                    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                    {
                                      operator delete(__p.__r_.__value_.__l.__data_);
                                      v400 = 0;
                                      v407 = (char *)a1[731];
                                      v408 = (char *)a1[732];
                                      v409 = v407;
                                      v410 = v408 - v407;
                                      if (v408 == v407)
                                        goto LABEL_541;
                                    }
                                    else
                                    {
                                      v400 = 0;
                                      v407 = (char *)a1[731];
                                      v408 = (char *)a1[732];
                                      v409 = v407;
                                      v410 = v408 - v407;
                                      if (v408 == v407)
                                        goto LABEL_541;
                                    }
                                  }
                                  else
                                  {
                                    if (v376 != v375)
                                    {
                                      v389 = (v376 - v375) >> 4;
                                      do
                                      {
                                        v390 = v389 >> 1;
                                        v391 = (unsigned int *)&v375[16 * (v389 >> 1)];
                                        v393 = *v391;
                                        v392 = (char *)(v391 + 4);
                                        v389 += ~(v389 >> 1);
                                        if (v393 < v87)
                                          v375 = v392;
                                        else
                                          v389 = v390;
                                      }
                                      while (v389);
                                    }
                                    v394 = v368;
                                    if (v375 == v376 || *(_DWORD *)v375 != v87)
                                      v375 = v376;
                                    v395 = *((_QWORD *)v375 + 1);
                                    v396 = sub_20E86A980(&v745, (uint64_t)"debug: variable ", 16);
                                    sub_20F6230A4((uint64_t)&__p);
                                    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                      v397 = &__p;
                                    else
                                      v397 = (std::string *)__p.__r_.__value_.__r.__words[0];
                                    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                      v398 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                                    else
                                      v398 = __p.__r_.__value_.__l.__size_;
                                    v399 = sub_20E86A980(v396, (uint64_t)v397, v398);
                                    v400 = v394;
                                    sub_20E86A980(v399, (uint64_t)" with ID ", 9);
                                    v401 = (_QWORD *)std::ostream::operator<<();
                                    sub_20E86A980(v401, (uint64_t)" found (", 8);
                                    v402 = (_QWORD *)std::ostream::operator<<();
                                    v403 = sub_20E86A980(v402, (uint64_t)", ", 2);
                                    if (*(_BYTE *)(v395 + 20))
                                      v404 = "free";
                                    else
                                      v404 = "fixed";
                                    if (*(_BYTE *)(v395 + 20))
                                      v405 = 4;
                                    else
                                      v405 = 5;
                                    v406 = sub_20E86A980(v403, (uint64_t)v404, v405);
                                    sub_20E86A980(v406, (uint64_t)")\n", 2);
                                    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                      operator delete(__p.__r_.__value_.__l.__data_);
                                    v707 |= *(unsigned __int8 *)(v395 + 20);
                                    v407 = (char *)a1[731];
                                    v408 = (char *)a1[732];
                                    v409 = v407;
                                    v410 = v408 - v407;
                                    if (v408 == v407)
                                    {
LABEL_541:
                                      if (v409 == v408 || *(_DWORD *)v409 != v64)
                                      {
                                        v443 = sub_20E86A980(&v745, (uint64_t)"error: variable ", 16);
                                        sub_20F6232BC((uint64_t)&__p);
                                        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                          v444 = &__p;
                                        else
                                          v444 = (std::string *)__p.__r_.__value_.__r.__words[0];
                                        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                          v445 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                                        else
                                          v445 = __p.__r_.__value_.__l.__size_;
                                        v446 = sub_20E86A980(v443, (uint64_t)v444, v445);
                                        sub_20E86A980(v446, (uint64_t)" with ID ", 9);
                                        v447 = (_QWORD *)std::ostream::operator<<();
                                        sub_20E86A980(v447, (uint64_t)" not found\n", 11);
                                        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                        {
                                          operator delete(__p.__r_.__value_.__l.__data_);
                                          v432 = 0;
                                          v439 = (char *)a1[731];
                                          v440 = (char *)a1[732];
                                          v441 = v439;
                                          v442 = v440 - v439;
                                          if (v440 == v439)
                                            goto LABEL_583;
                                        }
                                        else
                                        {
                                          v432 = 0;
                                          v439 = (char *)a1[731];
                                          v440 = (char *)a1[732];
                                          v441 = v439;
                                          v442 = v440 - v439;
                                          if (v440 == v439)
                                            goto LABEL_583;
                                        }
                                      }
                                      else
                                      {
                                        if (v408 != v407)
                                        {
                                          v421 = (v408 - v407) >> 4;
                                          do
                                          {
                                            v422 = v421 >> 1;
                                            v423 = (unsigned int *)&v407[16 * (v421 >> 1)];
                                            v425 = *v423;
                                            v424 = (char *)(v423 + 4);
                                            v421 += ~(v421 >> 1);
                                            if (v425 < v64)
                                              v407 = v424;
                                            else
                                              v421 = v422;
                                          }
                                          while (v421);
                                        }
                                        v426 = v400;
                                        if (v407 == v408 || *(_DWORD *)v407 != v64)
                                          v407 = v408;
                                        v427 = *((_QWORD *)v407 + 1);
                                        v428 = sub_20E86A980(&v745, (uint64_t)"debug: variable ", 16);
                                        sub_20F6232BC((uint64_t)&__p);
                                        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                          v429 = &__p;
                                        else
                                          v429 = (std::string *)__p.__r_.__value_.__r.__words[0];
                                        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                          v430 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                                        else
                                          v430 = __p.__r_.__value_.__l.__size_;
                                        v431 = sub_20E86A980(v428, (uint64_t)v429, v430);
                                        v432 = v426;
                                        sub_20E86A980(v431, (uint64_t)" with ID ", 9);
                                        v433 = (_QWORD *)std::ostream::operator<<();
                                        sub_20E86A980(v433, (uint64_t)" found (", 8);
                                        v434 = (_QWORD *)std::ostream::operator<<();
                                        v435 = sub_20E86A980(v434, (uint64_t)", ", 2);
                                        if (*(_BYTE *)(v427 + 20))
                                          v436 = "free";
                                        else
                                          v436 = "fixed";
                                        if (*(_BYTE *)(v427 + 20))
                                          v437 = 4;
                                        else
                                          v437 = 5;
                                        v438 = sub_20E86A980(v435, (uint64_t)v436, v437);
                                        sub_20E86A980(v438, (uint64_t)")\n", 2);
                                        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                          operator delete(__p.__r_.__value_.__l.__data_);
                                        v707 |= *(unsigned __int8 *)(v427 + 20);
                                        v439 = (char *)a1[731];
                                        v440 = (char *)a1[732];
                                        v441 = v439;
                                        v442 = v440 - v439;
                                        if (v440 == v439)
                                        {
LABEL_583:
                                          if (v441 == v440 || *(_DWORD *)v441 != v87)
                                          {
                                            v475 = sub_20E86A980(&v745, (uint64_t)"error: variable ", 16);
                                            sub_20F6232BC((uint64_t)&__p);
                                            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                              v476 = &__p;
                                            else
                                              v476 = (std::string *)__p.__r_.__value_.__r.__words[0];
                                            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                              v477 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                                            else
                                              v477 = __p.__r_.__value_.__l.__size_;
                                            v478 = sub_20E86A980(v475, (uint64_t)v476, v477);
                                            sub_20E86A980(v478, (uint64_t)" with ID ", 9);
                                            v479 = (_QWORD *)std::ostream::operator<<();
                                            sub_20E86A980(v479, (uint64_t)" not found\n", 11);
                                            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                            {
                                              operator delete(__p.__r_.__value_.__l.__data_);
                                              v464 = 0;
                                              v471 = (char *)a1[743];
                                              v472 = (char *)a1[744];
                                              v473 = v471;
                                              v474 = v472 - v471;
                                              if (v472 == v471)
                                                goto LABEL_625;
                                            }
                                            else
                                            {
                                              v464 = 0;
                                              v471 = (char *)a1[743];
                                              v472 = (char *)a1[744];
                                              v473 = v471;
                                              v474 = v472 - v471;
                                              if (v472 == v471)
                                                goto LABEL_625;
                                            }
                                          }
                                          else
                                          {
                                            if (v440 != v439)
                                            {
                                              v453 = (v440 - v439) >> 4;
                                              do
                                              {
                                                v454 = v453 >> 1;
                                                v455 = (unsigned int *)&v439[16 * (v453 >> 1)];
                                                v457 = *v455;
                                                v456 = (char *)(v455 + 4);
                                                v453 += ~(v453 >> 1);
                                                if (v457 < v87)
                                                  v439 = v456;
                                                else
                                                  v453 = v454;
                                              }
                                              while (v453);
                                            }
                                            v458 = v432;
                                            if (v439 == v440 || *(_DWORD *)v439 != v87)
                                              v439 = v440;
                                            v459 = *((_QWORD *)v439 + 1);
                                            v460 = sub_20E86A980(&v745, (uint64_t)"debug: variable ", 16);
                                            sub_20F6232BC((uint64_t)&__p);
                                            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                              v461 = &__p;
                                            else
                                              v461 = (std::string *)__p.__r_.__value_.__r.__words[0];
                                            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                              v462 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                                            else
                                              v462 = __p.__r_.__value_.__l.__size_;
                                            v463 = sub_20E86A980(v460, (uint64_t)v461, v462);
                                            v464 = v458;
                                            sub_20E86A980(v463, (uint64_t)" with ID ", 9);
                                            v465 = (_QWORD *)std::ostream::operator<<();
                                            sub_20E86A980(v465, (uint64_t)" found (", 8);
                                            v466 = (_QWORD *)std::ostream::operator<<();
                                            v467 = sub_20E86A980(v466, (uint64_t)", ", 2);
                                            if (*(_BYTE *)(v459 + 20))
                                              v468 = "free";
                                            else
                                              v468 = "fixed";
                                            if (*(_BYTE *)(v459 + 20))
                                              v469 = 4;
                                            else
                                              v469 = 5;
                                            v470 = sub_20E86A980(v467, (uint64_t)v468, v469);
                                            sub_20E86A980(v470, (uint64_t)")\n", 2);
                                            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                              operator delete(__p.__r_.__value_.__l.__data_);
                                            v707 |= *(unsigned __int8 *)(v459 + 20);
                                            v471 = (char *)a1[743];
                                            v472 = (char *)a1[744];
                                            v473 = v471;
                                            v474 = v472 - v471;
                                            if (v472 == v471)
                                            {
LABEL_625:
                                              if (v473 == v472 || *(_DWORD *)v473 != v64)
                                              {
                                                v507 = sub_20E86A980(&v745, (uint64_t)"error: variable ", 16);
                                                sub_20F6234D8((uint64_t)&__p);
                                                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                  v508 = &__p;
                                                else
                                                  v508 = (std::string *)__p.__r_.__value_.__r.__words[0];
                                                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                  v509 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                                                else
                                                  v509 = __p.__r_.__value_.__l.__size_;
                                                v510 = sub_20E86A980(v507, (uint64_t)v508, v509);
                                                sub_20E86A980(v510, (uint64_t)" with ID ", 9);
                                                v511 = (_QWORD *)std::ostream::operator<<();
                                                sub_20E86A980(v511, (uint64_t)" not found\n", 11);
                                                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                                {
                                                  operator delete(__p.__r_.__value_.__l.__data_);
                                                  v496 = 0;
                                                  v503 = (char *)a1[743];
                                                  v504 = (char *)a1[744];
                                                  v505 = v503;
                                                  v506 = v504 - v503;
                                                  if (v504 == v503)
                                                    goto LABEL_667;
                                                }
                                                else
                                                {
                                                  v496 = 0;
                                                  v503 = (char *)a1[743];
                                                  v504 = (char *)a1[744];
                                                  v505 = v503;
                                                  v506 = v504 - v503;
                                                  if (v504 == v503)
                                                    goto LABEL_667;
                                                }
                                              }
                                              else
                                              {
                                                if (v472 != v471)
                                                {
                                                  v485 = (v472 - v471) >> 4;
                                                  do
                                                  {
                                                    v486 = v485 >> 1;
                                                    v487 = (unsigned int *)&v471[16 * (v485 >> 1)];
                                                    v489 = *v487;
                                                    v488 = (char *)(v487 + 4);
                                                    v485 += ~(v485 >> 1);
                                                    if (v489 < v64)
                                                      v471 = v488;
                                                    else
                                                      v485 = v486;
                                                  }
                                                  while (v485);
                                                }
                                                v490 = v464;
                                                if (v471 == v472 || *(_DWORD *)v471 != v64)
                                                  v471 = v472;
                                                v491 = *((_QWORD *)v471 + 1);
                                                v492 = sub_20E86A980(&v745, (uint64_t)"debug: variable ", 16);
                                                sub_20F6234D8((uint64_t)&__p);
                                                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                  v493 = &__p;
                                                else
                                                  v493 = (std::string *)__p.__r_.__value_.__r.__words[0];
                                                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                  v494 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                                                else
                                                  v494 = __p.__r_.__value_.__l.__size_;
                                                v495 = sub_20E86A980(v492, (uint64_t)v493, v494);
                                                v496 = v490;
                                                sub_20E86A980(v495, (uint64_t)" with ID ", 9);
                                                v497 = (_QWORD *)std::ostream::operator<<();
                                                sub_20E86A980(v497, (uint64_t)" found (", 8);
                                                v498 = (_QWORD *)std::ostream::operator<<();
                                                v499 = sub_20E86A980(v498, (uint64_t)", ", 2);
                                                if (*(_BYTE *)(v491 + 20))
                                                  v500 = "free";
                                                else
                                                  v500 = "fixed";
                                                if (*(_BYTE *)(v491 + 20))
                                                  v501 = 4;
                                                else
                                                  v501 = 5;
                                                v502 = sub_20E86A980(v499, (uint64_t)v500, v501);
                                                sub_20E86A980(v502, (uint64_t)")\n", 2);
                                                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                                  operator delete(__p.__r_.__value_.__l.__data_);
                                                v707 |= *(unsigned __int8 *)(v491 + 20);
                                                v503 = (char *)a1[743];
                                                v504 = (char *)a1[744];
                                                v505 = v503;
                                                v506 = v504 - v503;
                                                if (v504 == v503)
                                                {
LABEL_667:
                                                  if (v505 == v504 || *(_DWORD *)v505 != v87)
                                                  {
                                                    v539 = sub_20E86A980(&v745, (uint64_t)"error: variable ", 16);
                                                    sub_20F6234D8((uint64_t)&__p);
                                                    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                      v540 = &__p;
                                                    else
                                                      v540 = (std::string *)__p.__r_.__value_.__r.__words[0];
                                                    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                      v541 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                                                    else
                                                      v541 = __p.__r_.__value_.__l.__size_;
                                                    v542 = sub_20E86A980(v539, (uint64_t)v540, v541);
                                                    sub_20E86A980(v542, (uint64_t)" with ID ", 9);
                                                    v543 = (_QWORD *)std::ostream::operator<<();
                                                    sub_20E86A980(v543, (uint64_t)" not found\n", 11);
                                                    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                                    {
                                                      operator delete(__p.__r_.__value_.__l.__data_);
                                                      v528 = 0;
                                                      v535 = (char *)a1[767];
                                                      v536 = (char *)a1[768];
                                                      v537 = v535;
                                                      v538 = v536 - v535;
                                                      if (v536 == v535)
                                                        goto LABEL_709;
                                                    }
                                                    else
                                                    {
                                                      v528 = 0;
                                                      v535 = (char *)a1[767];
                                                      v536 = (char *)a1[768];
                                                      v537 = v535;
                                                      v538 = v536 - v535;
                                                      if (v536 == v535)
                                                        goto LABEL_709;
                                                    }
                                                  }
                                                  else
                                                  {
                                                    if (v504 != v503)
                                                    {
                                                      v517 = (v504 - v503) >> 4;
                                                      do
                                                      {
                                                        v518 = v517 >> 1;
                                                        v519 = (unsigned int *)&v503[16 * (v517 >> 1)];
                                                        v521 = *v519;
                                                        v520 = (char *)(v519 + 4);
                                                        v517 += ~(v517 >> 1);
                                                        if (v521 < v87)
                                                          v503 = v520;
                                                        else
                                                          v517 = v518;
                                                      }
                                                      while (v517);
                                                    }
                                                    v522 = v496;
                                                    if (v503 == v504 || *(_DWORD *)v503 != v87)
                                                      v503 = v504;
                                                    v523 = *((_QWORD *)v503 + 1);
                                                    v524 = sub_20E86A980(&v745, (uint64_t)"debug: variable ", 16);
                                                    sub_20F6234D8((uint64_t)&__p);
                                                    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                      v525 = &__p;
                                                    else
                                                      v525 = (std::string *)__p.__r_.__value_.__r.__words[0];
                                                    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                      v526 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                                                    else
                                                      v526 = __p.__r_.__value_.__l.__size_;
                                                    v527 = sub_20E86A980(v524, (uint64_t)v525, v526);
                                                    v528 = v522;
                                                    sub_20E86A980(v527, (uint64_t)" with ID ", 9);
                                                    v529 = (_QWORD *)std::ostream::operator<<();
                                                    sub_20E86A980(v529, (uint64_t)" found (", 8);
                                                    v530 = (_QWORD *)std::ostream::operator<<();
                                                    v531 = sub_20E86A980(v530, (uint64_t)", ", 2);
                                                    if (*(_BYTE *)(v523 + 20))
                                                      v532 = "free";
                                                    else
                                                      v532 = "fixed";
                                                    if (*(_BYTE *)(v523 + 20))
                                                      v533 = 4;
                                                    else
                                                      v533 = 5;
                                                    v534 = sub_20E86A980(v531, (uint64_t)v532, v533);
                                                    sub_20E86A980(v534, (uint64_t)")\n", 2);
                                                    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                                      operator delete(__p.__r_.__value_.__l.__data_);
                                                    v707 |= *(unsigned __int8 *)(v523 + 20);
                                                    v535 = (char *)a1[767];
                                                    v536 = (char *)a1[768];
                                                    v537 = v535;
                                                    v538 = v536 - v535;
                                                    if (v536 == v535)
                                                    {
LABEL_709:
                                                      if (v537 == v536 || *(_DWORD *)v537 != v13)
                                                      {
                                                        v570 = sub_20E86A980(&v745, (uint64_t)"error: variable ", 16);
                                                        sub_20F622838((uint64_t)&__p);
                                                        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                          v571 = &__p;
                                                        else
                                                          v571 = (std::string *)__p.__r_.__value_.__r.__words[0];
                                                        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                          v572 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                                                        else
                                                          v572 = __p.__r_.__value_.__l.__size_;
                                                        v573 = sub_20E86A980(v570, (uint64_t)v571, v572);
                                                        sub_20E86A980(v573, (uint64_t)" with ID ", 9);
                                                        v574 = (_QWORD *)std::ostream::operator<<();
                                                        sub_20E86A980(v574, (uint64_t)" not found\n", 11);
                                                        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                                        {
                                                          operator delete(__p.__r_.__value_.__l.__data_);
                                                          v560 = 0;
                                                          v567 = (char *)a1[827];
                                                          v568 = (char *)a1[828];
                                                          v569 = v568 - v567;
                                                          if (v568 == v567)
                                                            goto LABEL_762;
                                                        }
                                                        else
                                                        {
                                                          v560 = 0;
                                                          v567 = (char *)a1[827];
                                                          v568 = (char *)a1[828];
                                                          v569 = v568 - v567;
                                                          if (v568 == v567)
                                                            goto LABEL_762;
                                                        }
                                                      }
                                                      else
                                                      {
                                                        if (v536 != v535)
                                                        {
                                                          v549 = (v536 - v535) >> 4;
                                                          do
                                                          {
                                                            v550 = v549 >> 1;
                                                            v551 = (unsigned __int32 *)&v535[16 * (v549 >> 1)];
                                                            v553 = *v551;
                                                            v552 = (char *)(v551 + 4);
                                                            v549 += ~(v549 >> 1);
                                                            if (v553 < v13)
                                                              v535 = v552;
                                                            else
                                                              v549 = v550;
                                                          }
                                                          while (v549);
                                                        }
                                                        v554 = v528;
                                                        if (v535 == v536 || *(_DWORD *)v535 != v13)
                                                          v535 = v536;
                                                        v555 = *((_QWORD *)v535 + 1);
                                                        v556 = sub_20E86A980(&v745, (uint64_t)"debug: variable ", 16);
                                                        sub_20F622838((uint64_t)&__p);
                                                        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                          v557 = &__p;
                                                        else
                                                          v557 = (std::string *)__p.__r_.__value_.__r.__words[0];
                                                        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                          v558 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                                                        else
                                                          v558 = __p.__r_.__value_.__l.__size_;
                                                        v559 = sub_20E86A980(v556, (uint64_t)v557, v558);
                                                        v560 = v554;
                                                        sub_20E86A980(v559, (uint64_t)" with ID ", 9);
                                                        v561 = (_QWORD *)std::ostream::operator<<();
                                                        sub_20E86A980(v561, (uint64_t)" found (", 8);
                                                        v562 = (_QWORD *)std::ostream::operator<<();
                                                        v563 = sub_20E86A980(v562, (uint64_t)", ", 2);
                                                        if (*(_BYTE *)(v555 + 20))
                                                          v564 = "free";
                                                        else
                                                          v564 = "fixed";
                                                        if (*(_BYTE *)(v555 + 20))
                                                          v565 = 4;
                                                        else
                                                          v565 = 5;
                                                        v566 = sub_20E86A980(v563, (uint64_t)v564, v565);
                                                        sub_20E86A980(v566, (uint64_t)")\n", 2);
                                                        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                                          operator delete(__p.__r_.__value_.__l.__data_);
                                                        v707 |= *(unsigned __int8 *)(v555 + 20);
                                                        v567 = (char *)a1[827];
                                                        v568 = (char *)a1[828];
                                                        v569 = v568 - v567;
                                                        if (v568 == v567)
                                                        {
LABEL_762:
                                                          if (v707)
                                                          {
                                                            v585 = v560 != 0;
                                                            v586 = v751;
                                                            if ((v751 & 0x10) == 0)
                                                              goto LABEL_764;
LABEL_774:
                                                            v594 = *((_QWORD *)&v750 + 1);
                                                            p_size = (std::string::size_type *)&v747 + 1;
                                                            if (*((_QWORD *)&v750 + 1) < (unint64_t)v748)
                                                            {
                                                              *((_QWORD *)&v750 + 1) = v748;
                                                              v594 = v748;
                                                              p_size = (std::string::size_type *)&v747 + 1;
                                                            }
LABEL_777:
                                                            v596 = (const void *)*p_size;
                                                            v587 = v594 - *p_size;
                                                            if (v587 >= 0x7FFFFFFFFFFFFFF8)
                                                              sub_20E860B7C();
                                                            if (v587 >= 0x17)
                                                            {
                                                              v597 = (v587 & 0xFFFFFFFFFFFFFFF8) + 8;
                                                              if ((v587 | 7) != 0x17)
                                                                v597 = v587 | 7;
                                                              v598 = v597 + 1;
                                                              v588 = (std::string *)operator new(v597 + 1);
                                                              __p.__r_.__value_.__r.__words[2] = v598 | 0x8000000000000000;
                                                              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v588;
                                                              __p.__r_.__value_.__l.__size_ = v587;
                                                            }
                                                            else
                                                            {
                                                              *((_BYTE *)&__p.__r_.__value_.__s + 23) = v594 - *(_BYTE *)p_size;
                                                              v588 = &__p;
                                                              if (!v587)
                                                                goto LABEL_785;
                                                            }
                                                            memmove(v588, v596, v587);
                                                            goto LABEL_785;
                                                          }
                                                          v589 = sub_20E86A980(&v745, (uint64_t)"error: factor ", 14);
                                                          sub_20F622A50((uint64_t)&__p);
                                                          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                            v590 = &__p;
                                                          else
                                                            v590 = (std::string *)__p.__r_.__value_.__r.__words[0];
                                                          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                            v591 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                                                          else
                                                            v591 = __p.__r_.__value_.__l.__size_;
                                                          v592 = sub_20E86A980(v589, (uint64_t)v590, v591);
                                                          sub_20E86A980(v592, (uint64_t)" with ID ", 9);
                                                          v593 = (_QWORD *)std::ostream::operator<<();
                                                          sub_20E86A980(v593, (uint64_t)" cannot be added: all variables are fixed.\n", 43);
                                                          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                                          {
                                                            operator delete(__p.__r_.__value_.__l.__data_);
                                                            v585 = 0;
                                                            v586 = v751;
                                                            if ((v751 & 0x10) != 0)
                                                              goto LABEL_774;
                                                          }
                                                          else
                                                          {
                                                            v585 = 0;
                                                            v586 = v751;
                                                            if ((v751 & 0x10) != 0)
                                                              goto LABEL_774;
                                                          }
LABEL_764:
                                                          if ((v586 & 8) != 0)
                                                          {
                                                            v594 = v747;
                                                            p_size = &v746.__r_.__value_.__l.__size_;
                                                            goto LABEL_777;
                                                          }
                                                          v587 = 0;
                                                          *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
                                                          v588 = &__p;
LABEL_785:
                                                          v588->__r_.__value_.__s.__data_[v587] = 0;
                                                          v723 = __p;
                                                          v724.__r_.__value_.__s.__data_[0] = v585;
                                                          v744.i64[0] = v694;
                                                          *(uint64_t *)((char *)v744.i64 + *(_QWORD *)(v694 - 24)) = v693;
                                                          *(_QWORD *)&v745 = v692;
                                                          *((_QWORD *)&v745 + 1) = v691;
                                                          if (SBYTE7(v750) < 0)
                                                            operator delete((void *)v749);
                                                          std::streambuf::~streambuf();
                                                          std::iostream::~basic_iostream();
                                                          MEMORY[0x212BC6290]((char *)&v751 + 8);
                                                          v599 = std::string::insert(&v723, 0, "Failed to add a factor into the linear system. This could be due to duplicate factor IDs ('", 0x5BuLL);
                                                          v600 = *(_OWORD *)&v599->__r_.__value_.__l.__data_;
                                                          v716.__r_.__value_.__r.__words[2] = v599->__r_.__value_.__r.__words[2];
                                                          *(_OWORD *)&v716.__r_.__value_.__l.__data_ = v600;
                                                          v599->__r_.__value_.__l.__size_ = 0;
                                                          v599->__r_.__value_.__r.__words[2] = 0;
                                                          v599->__r_.__value_.__r.__words[0] = 0;
                                                          v601 = std::string::append(&v716, "').", 3uLL);
                                                          v602 = *(_OWORD *)&v601->__r_.__value_.__l.__data_;
                                                          v718 = v601->__r_.__value_.__r.__words[2];
                                                          *(_OWORD *)v717 = v602;
                                                          v601->__r_.__value_.__l.__size_ = 0;
                                                          v601->__r_.__value_.__r.__words[2] = 0;
                                                          v601->__r_.__value_.__r.__words[0] = 0;
                                                          if (v718 >= 0)
                                                            v603 = v717;
                                                          else
                                                            v603 = (void **)v717[0];
                                                          if (v718 >= 0)
                                                            v604 = HIBYTE(v718);
                                                          else
                                                            v604 = (uint64_t)v717[1];
                                                          v605 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOLandmarkFactorUtil.h", 282, (uint64_t)"ret.second", 10, (uint64_t)v603, v604, (void (*)(void **))sub_21023DDB0);
                                                          if (SHIBYTE(v718) < 0)
                                                          {
                                                            operator delete(v717[0]);
                                                            if ((SHIBYTE(v716.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                                              goto LABEL_795;
                                                          }
                                                          else if ((SHIBYTE(v716.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                                          {
LABEL_795:
                                                            if (SHIBYTE(v723.__r_.__value_.__r.__words[2]) < 0)
                                                              goto LABEL_800;
LABEL_796:
                                                            if (v605)
                                                              goto LABEL_877;
                                                            goto LABEL_801;
                                                          }
                                                          operator delete(v716.__r_.__value_.__l.__data_);
                                                          if (SHIBYTE(v723.__r_.__value_.__r.__words[2]) < 0)
                                                          {
LABEL_800:
                                                            operator delete(v723.__r_.__value_.__l.__data_);
                                                            if (v605)
                                                              goto LABEL_877;
                                                            goto LABEL_801;
                                                          }
                                                          goto LABEL_796;
                                                        }
                                                      }
                                                      v575 = 0x84BDA12F684BDA13 * (v569 >> 3);
                                                      do
                                                      {
                                                        v576 = v575 >> 1;
                                                        v577 = (unint64_t *)&v567[216 * (v575 >> 1)];
                                                        v579 = *v577;
                                                        v578 = (char *)(v577 + 27);
                                                        v575 += ~(v575 >> 1);
                                                        if (v579 < v705)
                                                          v567 = v578;
                                                        else
                                                          v575 = v576;
                                                      }
                                                      while (v575);
                                                      if (v568 != v567 && *(_QWORD *)v567 == v705)
                                                      {
                                                        v580 = sub_20E86A980(&v745, (uint64_t)"error: factor ", 14);
                                                        sub_20F622A50((uint64_t)&__p);
                                                        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                          v581 = &__p;
                                                        else
                                                          v581 = (std::string *)__p.__r_.__value_.__r.__words[0];
                                                        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                          v582 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                                                        else
                                                          v582 = __p.__r_.__value_.__l.__size_;
                                                        v583 = sub_20E86A980(v580, (uint64_t)v581, v582);
                                                        sub_20E86A980(v583, (uint64_t)" with the same ID ", 18);
                                                        v584 = (_QWORD *)std::ostream::operator<<();
                                                        sub_20E86A980(v584, (uint64_t)" already exists.\n", 17);
                                                        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                                          operator delete(__p.__r_.__value_.__l.__data_);
                                                        v560 = 0;
                                                      }
                                                      goto LABEL_762;
                                                    }
                                                  }
                                                  v544 = v538 >> 4;
                                                  v537 = v535;
                                                  do
                                                  {
                                                    v545 = v544 >> 1;
                                                    v546 = (unsigned __int32 *)&v537[16 * (v544 >> 1)];
                                                    v548 = *v546;
                                                    v547 = (char *)(v546 + 4);
                                                    v544 += ~(v544 >> 1);
                                                    if (v548 < v13)
                                                      v537 = v547;
                                                    else
                                                      v544 = v545;
                                                  }
                                                  while (v544);
                                                  goto LABEL_709;
                                                }
                                              }
                                              v512 = v506 >> 4;
                                              v505 = v503;
                                              do
                                              {
                                                v513 = v512 >> 1;
                                                v514 = (unsigned int *)&v505[16 * (v512 >> 1)];
                                                v516 = *v514;
                                                v515 = (char *)(v514 + 4);
                                                v512 += ~(v512 >> 1);
                                                if (v516 < v87)
                                                  v505 = v515;
                                                else
                                                  v512 = v513;
                                              }
                                              while (v512);
                                              goto LABEL_667;
                                            }
                                          }
                                          v480 = v474 >> 4;
                                          v473 = v471;
                                          do
                                          {
                                            v481 = v480 >> 1;
                                            v482 = (unsigned int *)&v473[16 * (v480 >> 1)];
                                            v484 = *v482;
                                            v483 = (char *)(v482 + 4);
                                            v480 += ~(v480 >> 1);
                                            if (v484 < v64)
                                              v473 = v483;
                                            else
                                              v480 = v481;
                                          }
                                          while (v480);
                                          goto LABEL_625;
                                        }
                                      }
                                      v448 = v442 >> 4;
                                      v441 = v439;
                                      do
                                      {
                                        v449 = v448 >> 1;
                                        v450 = (unsigned int *)&v441[16 * (v448 >> 1)];
                                        v452 = *v450;
                                        v451 = (char *)(v450 + 4);
                                        v448 += ~(v448 >> 1);
                                        if (v452 < v87)
                                          v441 = v451;
                                        else
                                          v448 = v449;
                                      }
                                      while (v448);
                                      goto LABEL_583;
                                    }
                                  }
                                  v416 = v410 >> 4;
                                  v409 = v407;
                                  do
                                  {
                                    v417 = v416 >> 1;
                                    v418 = (unsigned int *)&v409[16 * (v416 >> 1)];
                                    v420 = *v418;
                                    v419 = (char *)(v418 + 4);
                                    v416 += ~(v416 >> 1);
                                    if (v420 < v64)
                                      v409 = v419;
                                    else
                                      v416 = v417;
                                  }
                                  while (v416);
                                  goto LABEL_541;
                                }
                              }
                              v384 = v378 >> 4;
                              v377 = v375;
                              do
                              {
                                v385 = v384 >> 1;
                                v386 = (unsigned int *)&v377[16 * (v384 >> 1)];
                                v388 = *v386;
                                v387 = (char *)(v386 + 4);
                                v384 += ~(v384 >> 1);
                                if (v388 < v87)
                                  v377 = v387;
                                else
                                  v384 = v385;
                              }
                              while (v384);
                              goto LABEL_499;
                            }
                          }
                          v352 = v346 >> 4;
                          v345 = v343;
                          do
                          {
                            v353 = v352 >> 1;
                            v354 = (unsigned int *)&v345[16 * (v352 >> 1)];
                            v356 = *v354;
                            v355 = (char *)(v354 + 4);
                            v352 += ~(v352 >> 1);
                            if (v356 < v64)
                              v345 = v355;
                            else
                              v352 = v353;
                          }
                          while (v352);
                          goto LABEL_457;
                        }
                      }
                      v321 = v315 >> 4;
                      v314 = v312;
                      do
                      {
                        v322 = v321 >> 1;
                        v323 = (unsigned int *)&v314[16 * (v321 >> 1)];
                        v325 = *v323;
                        v324 = (char *)(v323 + 4);
                        v321 += ~(v321 >> 1);
                        if (v325 < v86)
                          v314 = v324;
                        else
                          v321 = v322;
                      }
                      while (v321);
                      goto LABEL_415;
                    }
                  }
                  v290 = v284 >> 4;
                  v283 = v281;
                  do
                  {
                    v291 = v290 >> 1;
                    v292 = (unsigned int *)&v283[16 * (v290 >> 1)];
                    v294 = *v292;
                    v293 = (char *)(v292 + 4);
                    v290 += ~(v290 >> 1);
                    if (v294 < v63)
                      v283 = v293;
                    else
                      v290 = v291;
                  }
                  while (v290);
                  goto LABEL_373;
                }
              }
              v228 = v227 >> 4;
              v226 = v224;
              do
              {
                v229 = v228 >> 1;
                v230 = (unsigned int *)&v226[16 * (v228 >> 1)];
                v232 = *v230;
                v231 = (char *)(v230 + 4);
                v228 += ~(v228 >> 1);
                if (v232 < v64)
                  v226 = v231;
                else
                  v228 = v229;
              }
              while (v228);
              goto LABEL_288;
            }
LABEL_801:
            ++v705;
            v65 = v715;
            v9 = v696;
            v62 = v697;
            v12 = v698;
LABEL_802:
            v715 = v65 + 1;
            if ((uint64_t *)(v65 + 1) != v9)
            {
              v712 += 8;
              if (v712 != v12)
              {
                v16 = sub_20F6236F0(v711);
                if (v16)
                  continue;
              }
            }
            v3 = v685;
            a2 = v686;
            v4 = v689;
            goto LABEL_9;
          }
          v680 = (char *)v90 - (char *)v88;
          v675 = 0x84BDA12F684BDA13 * (((char *)v90 - (char *)v88) >> 3);
          if ((unint64_t)v89 < *v683)
          {
            if (v90 == v89)
            {
              v89->i64[0] = v705;
              v623 = &v88->i8[8 * (((char *)v90 - (char *)v88) >> 3)];
              *((_QWORD *)v623 + 1) = v705;
              *((_OWORD *)v623 + 1) = v745;
              v624 = *(_OWORD *)&v746.__r_.__value_.__l.__data_;
              *((_QWORD *)v623 + 6) = *((_QWORD *)&v746.__r_.__value_.__l + 2);
              *((_OWORD *)v623 + 2) = v624;
              v626 = v750;
              v625 = v751;
              v627 = v752;
              *(_OWORD *)(v623 + 88) = v749;
              *((_QWORD *)v623 + 17) = v627;
              *(_OWORD *)(v623 + 120) = v625;
              *(_OWORD *)(v623 + 104) = v626;
              v628 = v747;
              *(_OWORD *)(v623 + 72) = v748;
              *(_OWORD *)(v623 + 56) = v628;
              *((_OWORD *)v623 + 9) = v753;
              *((_OWORD *)v623 + 10) = v754;
              v629 = v755;
              v623[184] = v756;
              *((_QWORD *)v623 + 22) = v629;
              *((_QWORD *)v623 + 24) = 0;
              *((_QWORD *)v623 + 25) = 0;
              v757 = 0uLL;
              v623[208] = 0;
              a1[828] = (char *)v89 + 216;
            }
            else
            {
              *(_OWORD *)v717 = *(_OWORD *)&v723.__r_.__value_.__r.__words[1];
              __p = v724;
              v673 = v748;
              v674 = v747;
              v671 = v750;
              v672 = v749;
              v670 = v751;
              v669 = v752;
              *(_OWORD *)&v716.__r_.__value_.__l.__data_ = v731;
              v743 = v732;
              v742 = v734;
              v741 = v733;
              v181 = (uint64_t *)v89;
              v182 = (int64x2_t *)((char *)v89 - 216);
              v757 = 0uLL;
              v678 = &v89[-14].i64[1];
              if ((unint64_t)v89 >= 0xD8)
              {
                do
                {
                  *v181 = v182->i64[0];
                  v181[1] = v182->i64[1];
                  *((int64x2_t *)v181 + 1) = v182[1];
                  v183 = v182[2];
                  v181[6] = v182[3].i64[0];
                  *((int64x2_t *)v181 + 2) = v183;
                  v184 = *(__int128 *)((char *)&v182[6] + 8);
                  v185 = *(__int128 *)((char *)&v182[7] + 8);
                  v186 = v182[8].i64[1];
                  *(int64x2_t *)(v181 + 11) = *(int64x2_t *)((char *)v182 + 88);
                  v181[17] = v186;
                  *(_OWORD *)(v181 + 15) = v185;
                  *(_OWORD *)(v181 + 13) = v184;
                  v187 = *(__int128 *)((char *)&v182[3] + 8);
                  *(int64x2_t *)(v181 + 9) = *(int64x2_t *)((char *)v182 + 72);
                  *(_OWORD *)(v181 + 7) = v187;
                  *((int64x2_t *)v181 + 9) = v182[9];
                  *((int64x2_t *)v181 + 10) = v182[10];
                  v188 = v182[11].i64[0];
                  *((_BYTE *)v181 + 184) = v182[11].i8[8];
                  v181[22] = v188;
                  *((int64x2_t *)v181 + 12) = v182[12];
                  v182[12].i64[0] = 0;
                  v182[12].i64[1] = 0;
                  *((_BYTE *)v181 + 208) = v182[13].i8[0];
                  v181 += 27;
                  v182 = (int64x2_t *)((char *)v182 + 216);
                }
                while (v182 < v89);
              }
              a1[828] = v181;
              if (v89 != (int64x2_t *)&v90[13].u64[1])
              {
                v699 = (int64x2_t *)((char *)v89 - 216);
                v681 = v89;
                do
                {
                  v606 = &v699[-14].i8[8];
                  v681[-14].i64[1] = v699[-14].i64[1];
                  v607 = (int64x2_t *)((char *)v681 - 216);
                  v607->i64[1] = v699[-13].i64[0];
                  v607[1] = *(int64x2_t *)((char *)v699 - 200);
                  v608 = *(int64x2_t *)((char *)v699 - 184);
                  v607[3].i64[0] = v699[-11].i64[1];
                  v607[2] = v608;
                  v607[3].i64[1] = v699[-10].i64[0];
                  v607[4].i64[0] = v699[-10].i64[1];
                  v607[4].i64[1] = v699[-9].i64[0];
                  v607[5].i64[0] = v699[-9].i64[1];
                  v607[5].i64[1] = v699[-8].i64[0];
                  v607[6].i64[0] = v699[-8].i64[1];
                  v607[6].i64[1] = v699[-7].i64[0];
                  v607[7].i64[0] = v699[-7].i64[1];
                  v607[7].i64[1] = v699[-6].i64[0];
                  v607[8].i64[0] = v699[-6].i64[1];
                  v607[8].i64[1] = v699[-5].i64[0];
                  v607[9] = *(int64x2_t *)((char *)v699 - 72);
                  v607[10] = *(int64x2_t *)((char *)v699 - 56);
                  v609 = v699[-3].i64[1];
                  v607[11].i8[8] = v699[-2].i8[0];
                  v607[11].i64[0] = v609;
                  v610 = *(int64x2_t *)((char *)v699 - 24);
                  *((_QWORD *)v606 + 24) = 0;
                  *((_QWORD *)v606 + 25) = 0;
                  v699 = (int64x2_t *)((char *)v699 - 216);
                  v611 = (std::__shared_weak_count *)v681[-1].i64[0];
                  v681 = (int64x2_t *)((char *)v681 - 216);
                  v607[12] = v610;
                  if (v611)
                  {
                    v612 = v611;
                    v613 = (unint64_t *)&v611->__shared_owners_;
                    do
                      v614 = __ldaxr(v613);
                    while (__stlxr(v614 - 1, v613));
                    if (!v614)
                    {
                      v676 = v612;
                      ((void (*)(std::__shared_weak_count *))v612->__on_zero_shared)(v612);
                      std::__shared_weak_count::__release_weak(v676);
                    }
                  }
                  v89[-1].i8[8] = *((_BYTE *)v678 - 8);
                  v89 = v681;
                  v678 = (uint64_t *)v699;
                }
                while (v699 != v706);
              }
              *v706 = vdupq_n_s64(v705);
              v617 = &v88->i8[216 * v675];
              *((_OWORD *)v617 + 1) = *(_OWORD *)v717;
              *(std::string *)(v617 + 32) = __p;
              *(_OWORD *)(v617 + 56) = v674;
              *(_OWORD *)(v617 + 72) = v673;
              *(_OWORD *)(v617 + 88) = v672;
              *(_OWORD *)(v617 + 104) = v671;
              *(_OWORD *)(v617 + 120) = v670;
              *((_QWORD *)v617 + 17) = v669;
              v618 = v743;
              *((_OWORD *)v617 + 9) = *(_OWORD *)&v716.__r_.__value_.__l.__data_;
              *((_OWORD *)v617 + 10) = v618;
              v619 = v741;
              v617[184] = v742;
              *((_QWORD *)v617 + 22) = v619;
              v620 = (std::__shared_weak_count *)*((_QWORD *)v617 + 25);
              *((_QWORD *)v617 + 24) = 0;
              *((_QWORD *)v617 + 25) = 0;
              if (v620)
              {
                v621 = (unint64_t *)&v620->__shared_owners_;
                do
                  v622 = __ldaxr(v621);
                while (__stlxr(v622 - 1, v621));
                if (!v622)
                {
                  ((void (*)(std::__shared_weak_count *))v620->__on_zero_shared)(v620);
                  std::__shared_weak_count::__release_weak(v620);
                }
              }
              v88[13].i8[216 * v675] = 0;
            }
LABEL_862:
            v663 = (std::__shared_weak_count *)*((_QWORD *)&v757 + 1);
            if (*((_QWORD *)&v757 + 1))
            {
              v664 = (unint64_t *)(*((_QWORD *)&v757 + 1) + 8);
              do
                v665 = __ldaxr(v664);
              while (__stlxr(v665 - 1, v664));
              if (!v665)
              {
                ((void (*)(std::__shared_weak_count *))v663->__on_zero_shared)(v663);
                std::__shared_weak_count::__release_weak(v663);
              }
            }
            goto LABEL_867;
          }
          v615 = 1 - 0x7B425ED097B425EDLL * (((char *)v89 - (char *)v88) >> 3);
          if (v615 > 0x12F684BDA12F684)
            sub_20E867F44();
          if (0x97B425ED097B426 * ((uint64_t)(*v683 - (_QWORD)v88) >> 3) > v615)
            v615 = 0x97B425ED097B426 * ((uint64_t)(*v683 - (_QWORD)v88) >> 3);
          if (0x84BDA12F684BDA13 * ((uint64_t)(*v683 - (_QWORD)v88) >> 3) >= 0x97B425ED097B42)
            v616 = 0x12F684BDA12F684;
          else
            v616 = v615;
          v740 = v683;
          if (v616)
          {
            if (v616 > 0x12F684BDA12F684)
              sub_20E877A38();
            v677 = (std::__shared_weak_count *)operator new(216 * v616);
          }
          else
          {
            v677 = 0;
          }
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v677;
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v677 + 9 * v675);
          v704 = __p.__r_.__value_.__l.__size_;
          __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__l.__size_;
          v739 = (std::string::size_type)&v677[9 * v616];
          v679 = vdupq_n_s64(v705);
          if (v675 == v616)
          {
            if (v680 >= 1)
            {
              v630 = v675 + 2;
              if (v675 >= -1)
                v630 = v675 + 1;
              v631 = v630 >> 1;
              v632 = sub_20F5B6E44(__p.__r_.__value_.__l.__size_, __p.__r_.__value_.__l.__size_, __p.__r_.__value_.__l.__size_ - 216 * (v630 >> 1));
              v704 = __p.__r_.__value_.__l.__size_ - 216 * v631;
              __p.__r_.__value_.__l.__size_ = v704;
              v679 = v744;
              goto LABEL_843;
            }
            if (v88 == v706)
              v633 = 1;
            else
              v633 = 2 * v675;
            if (v633 > 0x12F684BDA12F684)
              sub_20E877A38();
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(216 * v633);
            v704 = __p.__r_.__value_.__r.__words[0] + 216 * (v633 >> 2);
            __p.__r_.__value_.__l.__size_ = v704;
            v739 = __p.__r_.__value_.__r.__words[0] + 216 * v633;
            if (v677)
              operator delete(v677);
          }
          v632 = v704;
LABEL_843:
          v634 = v745;
          *(int64x2_t *)v632 = v679;
          *(_OWORD *)(v632 + 16) = v634;
          *(std::string *)(v632 + 32) = v746;
          v635 = v750;
          *(_OWORD *)(v632 + 88) = v749;
          *(_OWORD *)(v632 + 104) = v635;
          *(_OWORD *)(v632 + 120) = v751;
          v636 = v748;
          *(_OWORD *)(v632 + 56) = v747;
          *(_QWORD *)(v632 + 136) = v752;
          *(_OWORD *)(v632 + 72) = v636;
          *(_OWORD *)(v632 + 144) = v753;
          *(_OWORD *)(v632 + 160) = v754;
          v637 = v755;
          *(_BYTE *)(v632 + 184) = v756;
          *(_QWORD *)(v632 + 176) = v637;
          *(_OWORD *)(v632 + 192) = v757;
          v757 = 0uLL;
          *(_BYTE *)(v632 + 208) = v758;
          v638 = v632 + 216;
          __p.__r_.__value_.__r.__words[2] = v632 + 216;
          v639 = (int64x2_t *)a1[827];
          if (v639 != v706)
          {
            v640 = 0;
            do
            {
              v641 = v704 + v640;
              v642 = &v706->i8[v640];
              *(_QWORD *)(v641 - 216) = *(_QWORD *)((char *)&v706[-13] + v640 - 8);
              *(_QWORD *)(v641 - 208) = v706[-13].i64[v640 / 8];
              *(int64x2_t *)(v641 - 200) = *(int64x2_t *)((char *)&v706[-12] + v640 - 8);
              v643 = *(__int128 *)((char *)&v706[-11] + v640 - 8);
              *(_QWORD *)(v641 - 168) = *(_QWORD *)((char *)&v706[-10] + v640 - 8);
              *(_OWORD *)(v641 - 184) = v643;
              v645 = *(__int128 *)((char *)&v706[-7] + v640);
              v644 = *(__int128 *)((char *)&v706[-6] + v640);
              v646 = *(__int128 *)((char *)&v706[-8] + v640);
              *(_QWORD *)(v641 - 80) = v706[-5].i64[v640 / 8];
              *(_OWORD *)(v641 - 112) = v645;
              *(_OWORD *)(v641 - 96) = v644;
              *(_OWORD *)(v641 - 128) = v646;
              v647 = *(__int128 *)((char *)&v706[-9] + v640);
              *(int64x2_t *)(v641 - 160) = *(int64x2_t *)((char *)&v706[-10] + v640);
              *(_OWORD *)(v641 - 144) = v647;
              *(int64x2_t *)(v641 - 72) = *(int64x2_t *)((char *)&v706[-4] + v640 - 8);
              *(int64x2_t *)(v641 - 56) = *(int64x2_t *)((char *)&v706[-3] + v640 - 8);
              v648 = *(_QWORD *)((char *)&v706[-2] + v640 - 8);
              *(_BYTE *)(v641 - 32) = v706[-2].i8[v640];
              *(_QWORD *)(v641 - 40) = v648;
              *(int64x2_t *)(v641 - 24) = *(int64x2_t *)((char *)&v706[-1] + v640 - 8);
              *((_QWORD *)v642 - 3) = 0;
              *((_QWORD *)v642 - 2) = 0;
              *(_BYTE *)(v641 - 8) = v706->i8[v640 - 8];
              v640 -= 216;
            }
            while (&v706->i8[v640] != (__int8 *)v639);
            v704 += v640;
          }
          v649 = (int64x2_t *)a1[828];
          if (v649 != v706)
          {
            v650 = v706;
            do
            {
              *(_QWORD *)v638 = v650->i64[0];
              *(_QWORD *)(v638 + 8) = v650->i64[1];
              *(int64x2_t *)(v638 + 16) = v650[1];
              v651 = v650[2];
              *(_QWORD *)(v638 + 48) = v650[3].i64[0];
              *(int64x2_t *)(v638 + 32) = v651;
              v652 = *(__int128 *)((char *)&v650[6] + 8);
              v653 = *(__int128 *)((char *)&v650[7] + 8);
              v654 = v650[8].i64[1];
              *(int64x2_t *)(v638 + 88) = *(int64x2_t *)((char *)v650 + 88);
              *(_QWORD *)(v638 + 136) = v654;
              *(_OWORD *)(v638 + 120) = v653;
              *(_OWORD *)(v638 + 104) = v652;
              v655 = *(__int128 *)((char *)&v650[3] + 8);
              *(int64x2_t *)(v638 + 72) = *(int64x2_t *)((char *)v650 + 72);
              *(_OWORD *)(v638 + 56) = v655;
              *(int64x2_t *)(v638 + 144) = v650[9];
              *(int64x2_t *)(v638 + 160) = v650[10];
              v656 = v650[11].i64[0];
              *(_BYTE *)(v638 + 184) = v650[11].i8[8];
              *(_QWORD *)(v638 + 176) = v656;
              *(int64x2_t *)(v638 + 192) = v650[12];
              v650[12].i64[0] = 0;
              v650[12].i64[1] = 0;
              *(_BYTE *)(v638 + 208) = v650[13].i8[0];
              v638 += 216;
              v650 = (int64x2_t *)((char *)v650 + 216);
            }
            while (v650 != v649);
            v706 = (int64x2_t *)a1[828];
          }
          v657 = a1[827];
          a1[827] = v704;
          a1[828] = v638;
          v658 = a1[829];
          a1[829] = v739;
          v739 = v658;
          __p.__r_.__value_.__l.__size_ = v657;
          __p.__r_.__value_.__r.__words[0] = v657;
          if (v706 != (int64x2_t *)v657)
          {
            v659 = v706;
            do
            {
              __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v659[-14].u64[1];
              v660 = (std::__shared_weak_count *)v659[-1].i64[0];
              if (v660)
              {
                v661 = (unint64_t *)&v660->__shared_owners_;
                do
                  v662 = __ldaxr(v661);
                while (__stlxr(v662 - 1, v661));
                if (!v662)
                {
                  ((void (*)(std::__shared_weak_count *))v660->__on_zero_shared)(v660);
                  std::__shared_weak_count::__release_weak(v660);
                }
              }
              v659 = (int64x2_t *)__p.__r_.__value_.__r.__words[2];
            }
            while (__p.__r_.__value_.__r.__words[2] != v657);
            v706 = (int64x2_t *)__p.__r_.__value_.__r.__words[0];
          }
          if (v706)
            operator delete(v706);
          goto LABEL_862;
        }
      }
    }
  }
}

void sub_20FC5796C(_Unwind_Exception *a1)
{
  sub_20F6227AC((uint64_t)&STACK[0x370]);
  sub_20F4EE450((uint64_t)&STACK[0x3C0]);
  sub_20F4ACD60((uint64_t)&STACK[0x2A0]);
  sub_20E86665C((uint64_t)&STACK[0x290]);
  sub_20E86665C((uint64_t)&STACK[0x280]);
  _Unwind_Resume(a1);
}

void sub_20FC579B0(_Unwind_Exception *a1)
{
  sub_20E863784((uint64_t)&STACK[0x3C0]);
  _Unwind_Resume(a1);
}

uint64_t sub_20FC57AC4(uint64_t a1, unsigned int *a2)
{
  unsigned int v3;
  __int128 *v4;
  __int128 *v5;
  unint64_t v6;
  unint64_t v7;
  __int128 *v8;
  __int128 *v9;
  unsigned int v10;
  int v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  unsigned int *v24;
  char *v25;
  int64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  _OWORD *v31;
  char *v32;
  uint64_t v33;
  __int128 v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  _BYTE v38[28];
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  v4 = *(__int128 **)(a1 + 968);
  v5 = *(__int128 **)(a1 + 976);
  if (v5 == v4)
  {
    v4 = *(__int128 **)(a1 + 976);
  }
  else
  {
    v6 = v5 - v4;
    do
    {
      v7 = v6 >> 1;
      v8 = &v4[v6 >> 1];
      v10 = *(_DWORD *)v8;
      v9 = v8 + 1;
      v6 += ~(v6 >> 1);
      if (v10 < v3)
        v4 = v9;
      else
        v6 = v7;
    }
    while (v6);
    if (v5 != v4 && v3 == *(_DWORD *)v4)
      return 0;
  }
  v12 = *((unsigned __int8 *)a2 + 4);
  *(_OWORD *)&v38[4] = *(_OWORD *)a2;
  *(_QWORD *)&v38[20] = *((_QWORD *)a2 + 2);
  v13 = v12 == 0;
  v14 = sub_20F398160(a1 + 992);
  *(_DWORD *)v14 = -1;
  *(_BYTE *)(v14 + 4) = 1;
  *(_DWORD *)(v14 + 8) = 0;
  *(_OWORD *)(v14 + 12) = *(_OWORD *)v38;
  *(_OWORD *)(v14 + 24) = *(_OWORD *)&v38[12];
  v36 = v3;
  v37 = v14;
  sub_20F397EF8((char **)(a1 + 968), v4, (uint64_t)&v36);
  if (!v13)
  {
    v15 = *(char **)(a1 + 2376);
    v16 = *(_QWORD *)(a1 + 2384);
    if ((unint64_t)v15 < v16)
    {
      *(_DWORD *)v15 = v3;
      v17 = (uint64_t)(v15 + 4);
LABEL_34:
      *(_QWORD *)(a1 + 2376) = v17;
      goto LABEL_35;
    }
    v18 = *(char **)(a1 + 2368);
    v19 = (v15 - v18) >> 2;
    v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 62)
      sub_20E867F44();
    v21 = v16 - (_QWORD)v18;
    if (v21 >> 1 > v20)
      v20 = v21 >> 1;
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
      v22 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v22 = v20;
    if (v22)
    {
      if (v22 >> 62)
        sub_20E877A38();
      v23 = operator new(4 * v22);
      v24 = (unsigned int *)&v23[4 * v19];
      v25 = &v23[4 * v22];
      *v24 = v3;
      v17 = (uint64_t)(v24 + 1);
      v26 = v15 - v18;
      if (v15 == v18)
        goto LABEL_32;
    }
    else
    {
      v23 = 0;
      v24 = (unsigned int *)(4 * v19);
      v25 = 0;
      *(_DWORD *)(4 * v19) = v3;
      v17 = 4 * v19 + 4;
      v26 = v15 - v18;
      if (v15 == v18)
      {
LABEL_32:
        *(_QWORD *)(a1 + 2368) = v24;
        *(_QWORD *)(a1 + 2376) = v17;
        *(_QWORD *)(a1 + 2384) = v25;
        if (v18)
          operator delete(v18);
        goto LABEL_34;
      }
    }
    v27 = v26 - 4;
    if (v27 < 0x2C)
      goto LABEL_41;
    if ((unint64_t)(v18 - v23) < 0x20)
      goto LABEL_41;
    v28 = (v27 >> 2) + 1;
    v29 = 4 * (v28 & 0x7FFFFFFFFFFFFFF8);
    v30 = &v15[-v29];
    v24 = (unsigned int *)((char *)v24 - v29);
    v31 = &v23[4 * v19 - 16];
    v32 = v15 - 16;
    v33 = v28 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v34 = *(_OWORD *)v32;
      *(v31 - 1) = *((_OWORD *)v32 - 1);
      *v31 = v34;
      v31 -= 2;
      v32 -= 32;
      v33 -= 8;
    }
    while (v33);
    v15 = v30;
    if (v28 != (v28 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_41:
      do
      {
        v35 = *((_DWORD *)v15 - 1);
        v15 -= 4;
        *--v24 = v35;
      }
      while (v15 != v18);
    }
    goto LABEL_32;
  }
LABEL_35:
  *(_BYTE *)(a1 + 1594) = 0;
  *(_BYTE *)(a1 + 1592) = 0;
  return 1;
}

void sub_20FC57D54(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, uint64_t a6, uint64_t a7, unsigned int a8, double a9, int64x2_t *a10)
{
  int64x2_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int *v33;
  _DWORD *v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int *v38;
  _DWORD *v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unsigned int *v47;
  _DWORD *v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unsigned int *v53;
  _DWORD *v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unsigned int *v62;
  _DWORD *v63;
  unsigned int v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unsigned int *v68;
  _DWORD *v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unsigned int *v76;
  _DWORD *v77;
  unsigned int v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unsigned int *v82;
  _DWORD *v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unsigned int *v90;
  _DWORD *v91;
  unsigned int v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unsigned int *v96;
  _DWORD *v97;
  unsigned int v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t v101;
  std::__shared_count *v102;
  std::__shared_weak_count *v103;
  unsigned int v104;
  BOOL v105;
  uint64_t shared_owners;
  unint64_t v107;
  unint64_t *v108;
  unint64_t *v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  unint64_t v116;
  unint64_t *v117;
  unint64_t *v118;
  char v119;
  std::__shared_weak_count *size;
  unint64_t *v121;
  unint64_t v122;
  int v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  char *v127;
  char *v128;
  unint64_t v129;
  unint64_t v130;
  char *v131;
  char *v132;
  unsigned int v133;
  _QWORD *v134;
  std::string *p_p;
  std::string::size_type v136;
  _QWORD *v137;
  _QWORD *v138;
  int v139;
  char *v140;
  char *v141;
  char *v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unsigned int *v146;
  char *v147;
  unsigned int v148;
  unint64_t v149;
  unint64_t v150;
  unsigned int *v151;
  char *v152;
  unsigned int v153;
  uint64_t v154;
  _QWORD *v155;
  std::string *v156;
  std::string::size_type v157;
  _QWORD *v158;
  _QWORD *v159;
  _QWORD *v160;
  _QWORD *v161;
  const char *v162;
  uint64_t v163;
  _QWORD *v164;
  int v165;
  char *v166;
  char *v167;
  char *v168;
  uint64_t v169;
  _QWORD *v170;
  std::string *v171;
  std::string::size_type v172;
  _QWORD *v173;
  _QWORD *v174;
  unint64_t v175;
  unint64_t v176;
  unsigned int *v177;
  char *v178;
  unsigned int v179;
  unint64_t v180;
  unint64_t v181;
  unsigned int *v182;
  char *v183;
  unsigned int v184;
  uint64_t v185;
  _QWORD *v186;
  std::string *v187;
  std::string::size_type v188;
  _QWORD *v189;
  _QWORD *v190;
  _QWORD *v191;
  _QWORD *v192;
  const char *v193;
  uint64_t v194;
  _QWORD *v195;
  char *v196;
  char *v197;
  char *v198;
  uint64_t v199;
  _QWORD *v200;
  std::string *v201;
  std::string::size_type v202;
  _QWORD *v203;
  _QWORD *v204;
  unint64_t v205;
  unint64_t v206;
  unsigned int *v207;
  char *v208;
  unsigned int v209;
  unint64_t v210;
  unint64_t v211;
  unsigned int *v212;
  char *v213;
  unsigned int v214;
  uint64_t v215;
  _QWORD *v216;
  std::string *v217;
  std::string::size_type v218;
  _QWORD *v219;
  _QWORD *v220;
  _QWORD *v221;
  _QWORD *v222;
  const char *v223;
  uint64_t v224;
  _QWORD *v225;
  int v226;
  char *v227;
  char *v228;
  char *v229;
  uint64_t v230;
  _QWORD *v231;
  std::string *v232;
  std::string::size_type v233;
  _QWORD *v234;
  _QWORD *v235;
  unint64_t v236;
  unint64_t v237;
  unsigned int *v238;
  char *v239;
  unsigned int v240;
  unint64_t v241;
  unint64_t v242;
  unsigned int *v243;
  char *v244;
  unsigned int v245;
  uint64_t v246;
  _QWORD *v247;
  std::string *v248;
  std::string::size_type v249;
  _QWORD *v250;
  _QWORD *v251;
  _QWORD *v252;
  _QWORD *v253;
  const char *v254;
  uint64_t v255;
  _QWORD *v256;
  int v257;
  char *v258;
  char *v259;
  char *v260;
  uint64_t v261;
  _QWORD *v262;
  std::string *v263;
  std::string::size_type v264;
  _QWORD *v265;
  _QWORD *v266;
  unint64_t v267;
  unint64_t v268;
  unsigned int *v269;
  char *v270;
  unsigned int v271;
  unint64_t v272;
  unint64_t v273;
  unsigned int *v274;
  char *v275;
  unsigned int v276;
  uint64_t v277;
  _QWORD *v278;
  std::string *v279;
  std::string::size_type v280;
  _QWORD *v281;
  _QWORD *v282;
  _QWORD *v283;
  _QWORD *v284;
  const char *v285;
  uint64_t v286;
  _QWORD *v287;
  char *v288;
  char *v289;
  char *v290;
  uint64_t v291;
  _QWORD *v292;
  std::string *v293;
  std::string::size_type v294;
  _QWORD *v295;
  _QWORD *v296;
  unint64_t v297;
  unint64_t v298;
  unsigned int *v299;
  char *v300;
  unsigned int v301;
  unint64_t v302;
  unint64_t v303;
  unsigned int *v304;
  char *v305;
  unsigned int v306;
  uint64_t v307;
  _QWORD *v308;
  std::string *v309;
  std::string::size_type v310;
  _QWORD *v311;
  _QWORD *v312;
  _QWORD *v313;
  _QWORD *v314;
  const char *v315;
  uint64_t v316;
  _QWORD *v317;
  char *v318;
  char *v319;
  char *v320;
  uint64_t v321;
  _QWORD *v322;
  std::string *v323;
  std::string::size_type v324;
  _QWORD *v325;
  _QWORD *v326;
  unint64_t v327;
  unint64_t v328;
  unsigned int *v329;
  char *v330;
  unsigned int v331;
  unint64_t v332;
  unint64_t v333;
  unsigned int *v334;
  char *v335;
  unsigned int v336;
  uint64_t v337;
  _QWORD *v338;
  std::string *v339;
  std::string::size_type v340;
  _QWORD *v341;
  _QWORD *v342;
  _QWORD *v343;
  _QWORD *v344;
  const char *v345;
  uint64_t v346;
  _QWORD *v347;
  char *v348;
  char *v349;
  char *v350;
  uint64_t v351;
  _QWORD *v352;
  std::string *v353;
  std::string::size_type v354;
  _QWORD *v355;
  _QWORD *v356;
  unint64_t v357;
  unint64_t v358;
  unsigned int *v359;
  char *v360;
  unsigned int v361;
  unint64_t v362;
  unint64_t v363;
  unsigned int *v364;
  char *v365;
  unsigned int v366;
  uint64_t v367;
  _QWORD *v368;
  std::string *v369;
  std::string::size_type v370;
  _QWORD *v371;
  _QWORD *v372;
  _QWORD *v373;
  _QWORD *v374;
  const char *v375;
  uint64_t v376;
  _QWORD *v377;
  char *v378;
  char *v379;
  char *v380;
  uint64_t v381;
  _QWORD *v382;
  std::string *v383;
  std::string::size_type v384;
  _QWORD *v385;
  _QWORD *v386;
  unint64_t v387;
  unint64_t v388;
  unsigned int *v389;
  char *v390;
  unsigned int v391;
  unint64_t v392;
  unint64_t v393;
  unsigned int *v394;
  char *v395;
  unsigned int v396;
  uint64_t v397;
  _QWORD *v398;
  std::string *v399;
  std::string::size_type v400;
  _QWORD *v401;
  _QWORD *v402;
  _QWORD *v403;
  _QWORD *v404;
  const char *v405;
  uint64_t v406;
  _QWORD *v407;
  int v408;
  char *v409;
  char *v410;
  char *v411;
  uint64_t v412;
  _QWORD *v413;
  std::string *v414;
  std::string::size_type v415;
  _QWORD *v416;
  _QWORD *v417;
  unint64_t v418;
  unint64_t v419;
  unsigned int *v420;
  char *v421;
  unsigned int v422;
  unint64_t v423;
  unint64_t v424;
  unsigned int *v425;
  char *v426;
  unsigned int v427;
  uint64_t v428;
  _QWORD *v429;
  std::string *v430;
  std::string::size_type v431;
  _QWORD *v432;
  _QWORD *v433;
  _QWORD *v434;
  _QWORD *v435;
  const char *v436;
  uint64_t v437;
  _QWORD *v438;
  char *v439;
  char *v440;
  char *v441;
  uint64_t v442;
  _QWORD *v443;
  std::string *v444;
  std::string::size_type v445;
  _QWORD *v446;
  _QWORD *v447;
  unint64_t v448;
  unint64_t v449;
  unsigned int *v450;
  char *v451;
  unsigned int v452;
  unint64_t v453;
  unint64_t v454;
  unsigned int *v455;
  char *v456;
  unsigned int v457;
  int v458;
  uint64_t v459;
  _QWORD *v460;
  std::string *v461;
  std::string::size_type v462;
  _QWORD *v463;
  _QWORD *v464;
  _QWORD *v465;
  _QWORD *v466;
  const char *v467;
  uint64_t v468;
  _QWORD *v469;
  char *v470;
  char *v471;
  uint64_t v472;
  _QWORD *v473;
  std::string *v474;
  std::string::size_type v475;
  _QWORD *v476;
  _QWORD *v477;
  unint64_t v478;
  unint64_t v479;
  unint64_t *v480;
  char *v481;
  unint64_t v482;
  _QWORD *v483;
  std::string *v484;
  std::string::size_type v485;
  _QWORD *v486;
  _QWORD *v487;
  BOOL v488;
  char v489;
  std::string::size_type v490;
  std::string *v491;
  _QWORD *v492;
  std::string *v493;
  std::string::size_type v494;
  _QWORD *v495;
  _QWORD *v496;
  uint64_t v497;
  const void *v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  std::string *v502;
  __int128 v503;
  std::string *v504;
  __int128 v505;
  void **v506;
  uint64_t v507;
  _BOOL4 v508;
  unint64_t v509;
  __int128 v510;
  __int128 v511;
  unint64_t v512;
  __int128 v513;
  std::__shared_weak_count *v514;
  std::__shared_weak_count *v515;
  unint64_t *p_shared_owners;
  unint64_t v517;
  unint64_t v518;
  unint64_t v519;
  unint64_t v520;
  char *v521;
  unint64_t *v522;
  unint64_t v523;
  std::__shared_weak_count *v524;
  unint64_t *v525;
  unint64_t v526;
  unint64_t *v527;
  __int128 v528;
  __int128 v529;
  __int128 v530;
  __int128 v531;
  __int128 v532;
  unint64_t v533;
  unint64_t v534;
  std::string::size_type v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  unint64_t v539;
  char *v540;
  __int128 v541;
  __int128 v542;
  __int128 v543;
  unint64_t v544;
  uint64_t v545;
  unint64_t *v546;
  uint64_t v547;
  std::string::size_type v548;
  char *v549;
  __int128 v550;
  __int128 v551;
  __int128 v552;
  __int128 v553;
  __int128 v554;
  __int128 v555;
  unint64_t v556;
  unint64_t *v557;
  __int128 v558;
  __int128 v559;
  __int128 v560;
  __int128 v561;
  __int128 v562;
  __int128 v563;
  unint64_t v564;
  std::string::size_type v565;
  uint64_t v566;
  std::__shared_weak_count *v567;
  unint64_t *v568;
  unint64_t v569;
  unint64_t *v570;
  unint64_t v571;
  uint64_t *v572;
  unint64_t v573;
  unint64_t v574;
  __int128 v575;
  __int128 v576;
  __int128 v577;
  __int128 v578;
  __int128 v579;
  unint64_t v580;
  unint64_t v581;
  int64x2_t v582;
  uint64_t v583;
  std::__shared_weak_count *v584;
  std::__shared_weak_count *v585;
  unint64_t v586;
  int v587;
  int v588;
  uint64_t v589;
  uint64_t v590;
  unint64_t *v591;
  std::string v592;
  uint64_t v593;
  std::__shared_weak_count *v594;
  _BYTE v595[32];
  __int128 v596;
  double v597;
  __int128 v598;
  __int128 v599;
  __int128 v600;
  __int128 v601;
  __int128 v602;
  uint64_t v603;
  unint64_t v604;
  unint64_t v605;
  unint64_t v606;
  char v607;
  uint64_t v608;
  std::__shared_weak_count *v609;
  char v610;
  std::string __p;
  char *v612;
  int64x2_t *v613;
  unint64_t v614;
  char v615;
  void *v616[2];
  double v617;
  int64x2_t v618;
  __int128 v619;
  unint64_t v620;
  __int128 v621;
  double v622;
  __int128 v623;
  void *v624[2];
  __int128 v625;
  __int128 v626;
  __int128 v627;
  unint64_t v628;
  unint64_t v629;
  unint64_t v630;
  unint64_t v631;
  char v632;
  __int128 v633;
  char v634;

  v15 = a10;
  v16 = a8;
  v593 = 0;
  v594 = 0;
  *(_OWORD *)&v592.__r_.__value_.__l.__data_ = 0uLL;
  v17 = (unint64_t *)a10[113].i64[0];
  v18 = (unint64_t *)a10[113].i64[1];
  if (v17 == v18)
  {
    v19 = (unint64_t *)a10[113].i64[0];
  }
  else
  {
    v19 = (unint64_t *)a10[113].i64[1];
    if (*(v18 - 26) >= a8)
    {
      v20 = 0x4EC4EC4EC4EC4EC5 * (((char *)v18 - (char *)v17) >> 4);
      v21 = (unint64_t *)a10[113].i64[0];
      do
      {
        v22 = v20 >> 1;
        v23 = &v21[26 * (v20 >> 1)];
        v25 = *v23;
        v24 = v23 + 26;
        v20 += ~(v20 >> 1);
        if (v25 < a8)
          v21 = v24;
        else
          v20 = v22;
      }
      while (v20);
      v19 = (unint64_t *)a10[113].i64[1];
      if (v21 != v18)
      {
        v19 = v21;
        if (*v21 == a8)
        {
LABEL_157:
          v123 = 1;
          v124 = v594;
          if (!v594)
            goto LABEL_163;
          goto LABEL_160;
        }
      }
    }
  }
  *(_QWORD *)v595 = a8;
  *(_OWORD *)&v595[8] = *(_OWORD *)a7;
  *(_QWORD *)&v595[24] = *(_QWORD *)(a7 + 16);
  *(_QWORD *)&v596 = 0;
  *((_QWORD *)&v596 + 1) = a6;
  v597 = a9;
  v598 = 0u;
  v599 = 0u;
  v600 = 0u;
  v601 = 0u;
  v602 = 0u;
  v608 = 0;
  v609 = 0;
  v603 = 0;
  v606 = 0xBFF0000000000000;
  v607 = 0;
  v610 = 0;
  v26 = a10[32].i64[0];
  v27 = a10[32].i64[1];
  v28 = v27 - v26;
  if (v27 == v26)
    goto LABEL_151;
  v29 = v28 >> 4;
  v30 = a10[32].i64[0];
  v31 = v28 >> 4;
  do
  {
    v32 = v31 >> 1;
    v33 = (unsigned int *)(v30 + 16 * (v31 >> 1));
    v35 = *v33;
    v34 = v33 + 4;
    v31 += ~(v31 >> 1);
    if (v35 < a2)
      v30 = (uint64_t)v34;
    else
      v31 = v32;
  }
  while (v31);
  if (v30 == v27 || *(_DWORD *)v30 != a2)
  {
LABEL_151:
    v119 = 1;
    size = (std::__shared_weak_count *)v592.__r_.__value_.__l.__size_;
    if (!v592.__r_.__value_.__l.__size_)
      goto LABEL_156;
    goto LABEL_152;
  }
  v36 = *(_QWORD *)(v30 + 8);
  *(_QWORD *)&v598 = v36;
  ++*(_DWORD *)(*(_QWORD *)(v30 + 8) + 8);
  do
  {
    v37 = v29 >> 1;
    v38 = (unsigned int *)(v26 + 16 * (v29 >> 1));
    v40 = *v38;
    v39 = v38 + 4;
    v29 += ~(v29 >> 1);
    if (v40 < a4)
      v26 = (uint64_t)v39;
    else
      v29 = v37;
  }
  while (v29);
  if (v26 == v27 || *(_DWORD *)v26 != a4)
  {
    v99 = 0;
    v93 = 0;
    v85 = 0;
    v79 = 0;
    v71 = 0;
    v65 = 0;
    v56 = 0;
    v50 = 0;
    v41 = 0;
LABEL_131:
    if (v36)
      --*(_DWORD *)(v36 + 8);
    if (v41)
      --*(_DWORD *)(v41 + 8);
    if (v50)
      --*(_DWORD *)(v50 + 8);
    if (v56)
      --*(_DWORD *)(v56 + 8);
    if (v65)
      --*(_DWORD *)(v65 + 8);
    if (v71)
      --*(_DWORD *)(v71 + 8);
    if (v79)
      --*(_DWORD *)(v79 + 8);
    if (v85)
      --*(_DWORD *)(v85 + 8);
    if (v93)
      --*(_DWORD *)(v93 + 8);
    if (v99)
      --*(_DWORD *)(v99 + 8);
    goto LABEL_151;
  }
  v41 = *(_QWORD *)(v26 + 8);
  *((_QWORD *)&v598 + 1) = v41;
  ++*(_DWORD *)(*(_QWORD *)(v26 + 8) + 8);
  v43 = a10[20].i64[0];
  v42 = a10[20].i64[1];
  v44 = v43;
  if (v42 != v43)
  {
    v45 = (v42 - v43) >> 4;
    v44 = a10[20].i64[0];
    do
    {
      v46 = v45 >> 1;
      v47 = (unsigned int *)(v44 + 16 * (v45 >> 1));
      v49 = *v47;
      v48 = v47 + 4;
      v45 += ~(v45 >> 1);
      if (v49 < a1)
        v44 = (uint64_t)v48;
      else
        v45 = v46;
    }
    while (v45);
  }
  if (v44 == v42 || *(_DWORD *)v44 != a1)
  {
    v99 = 0;
    v93 = 0;
    v85 = 0;
    v79 = 0;
    v71 = 0;
    v65 = 0;
    v56 = 0;
    v50 = 0;
    goto LABEL_131;
  }
  v50 = *(_QWORD *)(v44 + 8);
  *(_QWORD *)&v599 = v50;
  ++*(_DWORD *)(*(_QWORD *)(v44 + 8) + 8);
  if (v42 != v43)
  {
    v51 = (v42 - v43) >> 4;
    do
    {
      v52 = v51 >> 1;
      v53 = (unsigned int *)(v43 + 16 * (v51 >> 1));
      v55 = *v53;
      v54 = v53 + 4;
      v51 += ~(v51 >> 1);
      if (v55 < a3)
        v43 = (uint64_t)v54;
      else
        v51 = v52;
    }
    while (v51);
  }
  if (v43 == v42 || *(_DWORD *)v43 != a3)
  {
    v99 = 0;
    v93 = 0;
    v85 = 0;
    v79 = 0;
    v71 = 0;
    v65 = 0;
    v56 = 0;
    goto LABEL_131;
  }
  v56 = *(_QWORD *)(v43 + 8);
  *((_QWORD *)&v599 + 1) = v56;
  ++*(_DWORD *)(*(_QWORD *)(v43 + 8) + 8);
  v57 = a10[56].i64[0];
  v58 = a10[56].i64[1];
  v59 = v57;
  if (v58 != v57)
  {
    v60 = (v58 - v57) >> 4;
    v59 = a10[56].i64[0];
    do
    {
      v61 = v60 >> 1;
      v62 = (unsigned int *)(v59 + 16 * (v60 >> 1));
      v64 = *v62;
      v63 = v62 + 4;
      v60 += ~(v60 >> 1);
      if (v64 < a2)
        v59 = (uint64_t)v63;
      else
        v60 = v61;
    }
    while (v60);
  }
  if (v59 == v58 || *(_DWORD *)v59 != a2)
  {
    v99 = 0;
    v93 = 0;
    v85 = 0;
    v79 = 0;
    v71 = 0;
    v65 = 0;
    goto LABEL_131;
  }
  v65 = *(_QWORD *)(v59 + 8);
  *(_QWORD *)&v600 = v65;
  ++*(_DWORD *)(*(_QWORD *)(v59 + 8) + 8);
  if (v58 != v57)
  {
    v66 = (v58 - v57) >> 4;
    do
    {
      v67 = v66 >> 1;
      v68 = (unsigned int *)(v57 + 16 * (v66 >> 1));
      v70 = *v68;
      v69 = v68 + 4;
      v66 += ~(v66 >> 1);
      if (v70 < a4)
        v57 = (uint64_t)v69;
      else
        v66 = v67;
    }
    while (v66);
  }
  if (v57 == v58 || *(_DWORD *)v57 != a4)
  {
    v99 = 0;
    v93 = 0;
    v85 = 0;
    v79 = 0;
    v71 = 0;
    goto LABEL_131;
  }
  v71 = *(_QWORD *)(v57 + 8);
  *((_QWORD *)&v600 + 1) = v71;
  ++*(_DWORD *)(*(_QWORD *)(v57 + 8) + 8);
  v72 = a10[62].i64[0];
  v73 = v72;
  v589 = a10[62].i64[1];
  if (v589 != v72)
  {
    v74 = (v589 - v72) >> 4;
    v73 = a10[62].i64[0];
    do
    {
      v75 = v74 >> 1;
      v76 = (unsigned int *)(v73 + 16 * (v74 >> 1));
      v78 = *v76;
      v77 = v76 + 4;
      v74 += ~(v74 >> 1);
      if (v78 < a2)
        v73 = (uint64_t)v77;
      else
        v74 = v75;
    }
    while (v74);
  }
  if (v73 == v589 || *(_DWORD *)v73 != a2)
  {
    v99 = 0;
    v93 = 0;
    v85 = 0;
    v79 = 0;
    goto LABEL_131;
  }
  v79 = *(_QWORD *)(v73 + 8);
  *(_QWORD *)&v601 = v79;
  ++*(_DWORD *)(*(_QWORD *)(v73 + 8) + 8);
  if (v589 != v72)
  {
    v80 = (v589 - v72) >> 4;
    do
    {
      v81 = v80 >> 1;
      v82 = (unsigned int *)(v72 + 16 * (v80 >> 1));
      v84 = *v82;
      v83 = v82 + 4;
      v80 += ~(v80 >> 1);
      if (v84 < a4)
        v72 = (uint64_t)v83;
      else
        v80 = v81;
    }
    while (v80);
  }
  if (v72 == v589 || *(_DWORD *)v72 != a4)
  {
    v99 = 0;
    v93 = 0;
    v85 = 0;
    goto LABEL_131;
  }
  v586 = v16;
  v85 = *(_QWORD *)(v72 + 8);
  *((_QWORD *)&v601 + 1) = v85;
  ++*(_DWORD *)(*(_QWORD *)(v72 + 8) + 8);
  v86 = a10[68].i64[0];
  v87 = v86;
  v590 = a10[68].i64[1];
  if (v590 != v86)
  {
    v88 = (v590 - v86) >> 4;
    v87 = a10[68].i64[0];
    do
    {
      v89 = v88 >> 1;
      v90 = (unsigned int *)(v87 + 16 * (v88 >> 1));
      v92 = *v90;
      v91 = v90 + 4;
      v88 += ~(v88 >> 1);
      if (v92 < a2)
        v87 = (uint64_t)v91;
      else
        v88 = v89;
    }
    while (v88);
  }
  if (v87 == v590 || *(_DWORD *)v87 != a2)
  {
    v99 = 0;
    v93 = 0;
LABEL_130:
    v16 = v586;
    v15 = a10;
    goto LABEL_131;
  }
  v93 = *(_QWORD *)(v87 + 8);
  *(_QWORD *)&v602 = v93;
  ++*(_DWORD *)(*(_QWORD *)(v87 + 8) + 8);
  if (v590 != v86)
  {
    v94 = (v590 - v86) >> 4;
    do
    {
      v95 = v94 >> 1;
      v96 = (unsigned int *)(v86 + 16 * (v94 >> 1));
      v98 = *v96;
      v97 = v96 + 4;
      v94 += ~(v94 >> 1);
      if (v98 < a4)
        v86 = (uint64_t)v97;
      else
        v94 = v95;
    }
    while (v94);
  }
  if (v86 == v590 || *(_DWORD *)v86 != a4)
  {
    v99 = 0;
    goto LABEL_130;
  }
  v99 = *(_QWORD *)(v86 + 8);
  *((_QWORD *)&v602 + 1) = v99;
  ++*(_DWORD *)(*(_QWORD *)(v86 + 8) + 8);
  v100 = (std::__shared_weak_count *)a10[80].i64[0];
  v584 = (std::__shared_weak_count *)a10[80].i64[1];
  if (v584 != v100)
  {
    v101 = ((char *)v584 - (char *)v100) >> 4;
    do
    {
      v102 = (std::__shared_weak_count *)((char *)v100 + 16 * (v101 >> 1));
      v104 = v102->__vftable;
      v103 = (std::__shared_weak_count *)&v102[1];
      v105 = v104 >= a5;
      if (v104 >= a5)
        v101 >>= 1;
      else
        v101 += ~(v101 >> 1);
      if (!v105)
        v100 = v103;
    }
    while (v101);
  }
  if (v100 == v584 || LODWORD(v100->__vftable) != a5)
    goto LABEL_130;
  shared_owners = v100->__shared_owners_;
  v603 = shared_owners;
  ++*(_DWORD *)(v100->__shared_owners_ + 8);
  if (!*(_BYTE *)(v36 + 20)
    && !*(_BYTE *)(v41 + 20)
    && !*(_BYTE *)(v50 + 20)
    && !*(_BYTE *)(v56 + 20)
    && !*(_BYTE *)(v65 + 20)
    && !*(_BYTE *)(v71 + 20)
    && !*(_BYTE *)(v79 + 20)
    && !*(_BYTE *)(v85 + 20)
    && !*(_BYTE *)(v93 + 20)
    && !*(_BYTE *)(v99 + 20)
    && !*(_BYTE *)(shared_owners + 20))
  {
    --*(_DWORD *)(v36 + 8);
    --*(_DWORD *)(v41 + 8);
    v598 = 0u;
    --*(_DWORD *)(v50 + 8);
    --*(_DWORD *)(v56 + 8);
    v599 = 0u;
    --*(_DWORD *)(v65 + 8);
    --*(_DWORD *)(v71 + 8);
    v600 = 0u;
    --*(_DWORD *)(v79 + 8);
    --*(_DWORD *)(v85 + 8);
    v601 = 0u;
    --*(_DWORD *)(v93 + 8);
    --*(_DWORD *)(v99 + 8);
    v602 = 0u;
    --*(_DWORD *)(shared_owners + 8);
    v119 = 1;
    v16 = v586;
    v15 = a10;
    size = (std::__shared_weak_count *)v592.__r_.__value_.__l.__size_;
    if (!v592.__r_.__value_.__l.__size_)
      goto LABEL_156;
    goto LABEL_152;
  }
  v618.i64[0] = v586;
  v618.i64[1] = v586;
  v619 = *(_OWORD *)&v595[8];
  v621 = v596;
  v620 = *(_QWORD *)&v595[24];
  v622 = v597;
  v625 = v600;
  v626 = v601;
  v627 = v602;
  v623 = v598;
  *(_OWORD *)v624 = v599;
  v628 = v603;
  v580 = v604;
  v581 = v605;
  v629 = v604;
  v630 = v605;
  v631 = v606;
  v632 = v607;
  v633 = 0uLL;
  v608 = 0;
  v609 = 0;
  v634 = 0;
  if (v18 == v19 || *v19 != v586)
  {
    v583 = 0x4EC4EC4EC4EC4EC5 * (((char *)v19 - (char *)v17) >> 4);
    v107 = a10[114].u64[0];
    if ((unint64_t)v18 < v107)
    {
      if (v19 == v18)
      {
        *v18 = v586;
        v527 = &v17[2 * (((char *)v19 - (char *)v17) >> 4)];
        v527[1] = v586;
        v528 = v619;
        v527[4] = v620;
        *((_OWORD *)v527 + 1) = v528;
        v529 = v621;
        *((double *)v527 + 7) = v622;
        *(_OWORD *)(v527 + 5) = v529;
        v530 = *(_OWORD *)v624;
        *((_OWORD *)v527 + 4) = v623;
        *((_OWORD *)v527 + 5) = v530;
        v531 = v625;
        v532 = v627;
        v533 = v628;
        *((_OWORD *)v527 + 7) = v626;
        *((_OWORD *)v527 + 8) = v532;
        *((_OWORD *)v527 + 6) = v531;
        v527[18] = v533;
        v527[19] = v580;
        v527[20] = v581;
        v534 = v631;
        *((_BYTE *)v527 + 176) = v632;
        v527[21] = v534;
        v527[23] = 0;
        v527[24] = 0;
        v633 = 0uLL;
        *((_BYTE *)v527 + 200) = 0;
        a10[113].i64[1] = (uint64_t)(v18 + 26);
      }
      else
      {
        __p = *(std::string *)&v595[8];
        *(_OWORD *)v616 = v596;
        v617 = v597;
        v578 = *(_OWORD *)v624;
        v579 = v623;
        v576 = v626;
        v577 = v625;
        v575 = v627;
        v615 = v607;
        v614 = v606;
        v633 = 0uLL;
        v108 = v18;
        v574 = v628;
        v591 = v18 - 26;
        if ((unint64_t)v18 >= 0xD0)
        {
          v109 = v18 - 26;
          v108 = v18;
          do
          {
            *v108 = *v109;
            v108[1] = v109[1];
            v110 = *((_OWORD *)v109 + 1);
            v108[4] = v109[4];
            *((_OWORD *)v108 + 1) = v110;
            v111 = *(_OWORD *)(v109 + 5);
            v108[7] = v109[7];
            *(_OWORD *)(v108 + 5) = v111;
            v113 = *((_OWORD *)v109 + 7);
            v112 = *((_OWORD *)v109 + 8);
            v114 = *((_OWORD *)v109 + 6);
            v108[18] = v109[18];
            *((_OWORD *)v108 + 7) = v113;
            *((_OWORD *)v108 + 8) = v112;
            *((_OWORD *)v108 + 6) = v114;
            v115 = *((_OWORD *)v109 + 5);
            *((_OWORD *)v108 + 4) = *((_OWORD *)v109 + 4);
            *((_OWORD *)v108 + 5) = v115;
            v108[19] = v109[19];
            v108[20] = v109[20];
            v116 = v109[21];
            *((_BYTE *)v108 + 176) = *((_BYTE *)v109 + 176);
            v108[21] = v116;
            *(_OWORD *)(v108 + 23) = *(_OWORD *)(v109 + 23);
            v109[23] = 0;
            v109[24] = 0;
            *((_BYTE *)v108 + 200) = *((_BYTE *)v109 + 200);
            v108 += 26;
            v109 += 26;
          }
          while (v109 < v18);
        }
        a10[113].i64[1] = (uint64_t)v108;
        if (v18 != v19 + 26)
        {
          v117 = v18 - 26;
          v118 = v18;
          do
          {
            v509 = *(v117 - 26);
            v117 -= 26;
            *(v118 - 26) = v509;
            v118 -= 26;
            v118[1] = v117[1];
            v510 = *((_OWORD *)v117 + 1);
            v118[4] = v117[4];
            *((_OWORD *)v118 + 1) = v510;
            v511 = *(_OWORD *)(v117 + 5);
            v118[7] = v117[7];
            *(_OWORD *)(v118 + 5) = v511;
            v118[8] = v117[8];
            v118[9] = v117[9];
            v118[10] = v117[10];
            v118[11] = v117[11];
            v118[12] = v117[12];
            v118[13] = v117[13];
            v118[14] = v117[14];
            v118[15] = v117[15];
            v118[16] = v117[16];
            v118[17] = v117[17];
            v118[18] = v117[18];
            v118[19] = v117[19];
            v118[20] = v117[20];
            v512 = v117[21];
            *((_BYTE *)v118 + 176) = *((_BYTE *)v117 + 176);
            v118[21] = v512;
            v513 = *(_OWORD *)(v117 + 23);
            v117[23] = 0;
            v117[24] = 0;
            v514 = (std::__shared_weak_count *)v118[24];
            *(_OWORD *)(v118 + 23) = v513;
            if (v514)
            {
              v515 = v514;
              p_shared_owners = (unint64_t *)&v514->__shared_owners_;
              do
                v517 = __ldaxr(p_shared_owners);
              while (__stlxr(v517 - 1, p_shared_owners));
              if (!v517)
              {
                v585 = v515;
                ((void (*)(std::__shared_weak_count *))v515->__on_zero_shared)(v515);
                std::__shared_weak_count::__release_weak(v585);
              }
            }
            *((_BYTE *)v18 - 8) = *((_BYTE *)v591 - 8);
            v18 = v118;
            v591 = v117;
          }
          while (v117 != v19);
        }
        *(int64x2_t *)v19 = vdupq_n_s64(v586);
        v522 = &v17[2 * (((char *)v19 - (char *)v17) >> 4)];
        *(std::string *)(v522 + 2) = __p;
        *(_OWORD *)(v522 + 5) = *(_OWORD *)v616;
        *((double *)v522 + 7) = v617;
        *((_OWORD *)v522 + 4) = v579;
        *((_OWORD *)v522 + 5) = v578;
        *((_OWORD *)v522 + 6) = v577;
        *((_OWORD *)v522 + 7) = v576;
        *((_OWORD *)v522 + 8) = v575;
        v522[18] = v574;
        v522[19] = v580;
        v523 = v614;
        *((_BYTE *)v522 + 176) = v615;
        v522[20] = v581;
        v522[21] = v523;
        v524 = (std::__shared_weak_count *)v522[24];
        v522[23] = 0;
        v522[24] = 0;
        if (v524)
        {
          v525 = (unint64_t *)&v524->__shared_owners_;
          do
            v526 = __ldaxr(v525);
          while (__stlxr(v526 - 1, v525));
          if (!v526)
          {
            ((void (*)(std::__shared_weak_count *))v524->__on_zero_shared)(v524);
            std::__shared_weak_count::__release_weak(v524);
          }
        }
        LOBYTE(v17[2 * (((char *)v19 - (char *)v17) >> 4) + 25]) = 0;
      }
LABEL_748:
      if (*((_QWORD *)&v633 + 1))
      {
        v570 = (unint64_t *)(*((_QWORD *)&v633 + 1) + 8);
        do
          v571 = __ldaxr(v570);
        while (__stlxr(v571 - 1, v570));
        if (!v571)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v633 + 1) + 16))(*((_QWORD *)&v633 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v633 + 1));
        }
      }
      goto LABEL_753;
    }
    v518 = 0x4EC4EC4EC4EC4EC5 * (((char *)v18 - (char *)v17) >> 4) + 1;
    if (v518 > 0x13B13B13B13B13BLL)
      sub_20E867F44();
    v519 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v107 - (_QWORD)v17) >> 4);
    if (2 * v519 > v518)
      v518 = 2 * v519;
    if (v519 >= 0x9D89D89D89D89DLL)
      v520 = 0x13B13B13B13B13BLL;
    else
      v520 = v518;
    v613 = a10 + 114;
    if (v520)
    {
      if (v520 > 0x13B13B13B13B13BLL)
        sub_20E877A38();
      v521 = (char *)operator new(208 * v520);
    }
    else
    {
      v521 = 0;
    }
    v535 = (std::string::size_type)&v521[16 * (((char *)v19 - (char *)v17) >> 4)];
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v521;
    __p.__r_.__value_.__l.__size_ = v535;
    __p.__r_.__value_.__r.__words[2] = v535;
    v612 = &v521[208 * v520];
    v582 = vdupq_n_s64(v586);
    if (v583 == v520)
    {
      if ((char *)v19 - (char *)v17 >= 1)
      {
        v536 = v583 + 2;
        if (v583 >= -1)
          v536 = v583 + 1;
        v537 = v536 >> 1;
        v538 = sub_20F91F01C((uint64_t)&v521[208 * v583], (uint64_t)&v521[208 * v583], v535 - 208 * (v536 >> 1));
        v535 = __p.__r_.__value_.__l.__size_ - 208 * v537;
        __p.__r_.__value_.__l.__size_ = v535;
        v582 = v618;
        goto LABEL_730;
      }
      if (v17 == v19)
        v539 = 1;
      else
        v539 = 0x9D89D89D89D89D8ALL * (((char *)v19 - (char *)v17) >> 4);
      if (v539 > 0x13B13B13B13B13BLL)
        sub_20E877A38();
      v540 = (char *)operator new(208 * v539);
      v535 = (std::string::size_type)&v540[208 * (v539 >> 2)];
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v540;
      __p.__r_.__value_.__l.__size_ = v535;
      v612 = &v540[208 * v539];
      if (v521)
        operator delete(v521);
    }
    v538 = v535;
LABEL_730:
    v541 = v619;
    *(int64x2_t *)v538 = v582;
    *(_OWORD *)(v538 + 16) = v541;
    *(_QWORD *)(v538 + 32) = v620;
    *(double *)(v538 + 56) = v622;
    *(_OWORD *)(v538 + 40) = v621;
    v542 = v626;
    *(_OWORD *)(v538 + 96) = v625;
    *(_OWORD *)(v538 + 112) = v542;
    *(_OWORD *)(v538 + 128) = v627;
    *(_QWORD *)(v538 + 144) = v628;
    v543 = *(_OWORD *)v624;
    *(_OWORD *)(v538 + 64) = v623;
    *(_OWORD *)(v538 + 80) = v543;
    *(_QWORD *)(v538 + 152) = v629;
    *(_QWORD *)(v538 + 160) = v630;
    v544 = v631;
    *(_BYTE *)(v538 + 176) = v632;
    *(_QWORD *)(v538 + 168) = v544;
    *(_OWORD *)(v538 + 184) = v633;
    v633 = 0uLL;
    *(_BYTE *)(v538 + 200) = v634;
    v545 = v538 + 208;
    __p.__r_.__value_.__r.__words[2] = v538 + 208;
    v546 = (unint64_t *)a10[113].i64[0];
    if (v546 != v19)
    {
      v547 = 0;
      do
      {
        v548 = v535 + v547 * 8;
        v549 = (char *)&v19[v547];
        *(_QWORD *)(v548 - 208) = v19[v547 - 26];
        *(_QWORD *)(v548 - 200) = v19[v547 - 25];
        v550 = *(_OWORD *)&v19[v547 - 24];
        *(_QWORD *)(v548 - 176) = v19[v547 - 22];
        *(_OWORD *)(v548 - 192) = v550;
        v551 = *(_OWORD *)&v19[v547 - 21];
        *(_QWORD *)(v548 - 152) = v19[v547 - 19];
        *(_OWORD *)(v548 - 168) = v551;
        v553 = *(_OWORD *)&v19[v547 - 12];
        v552 = *(_OWORD *)&v19[v547 - 10];
        v554 = *(_OWORD *)&v19[v547 - 14];
        *(_QWORD *)(v548 - 64) = v19[v547 - 8];
        *(_OWORD *)(v548 - 96) = v553;
        *(_OWORD *)(v548 - 80) = v552;
        *(_OWORD *)(v548 - 112) = v554;
        v555 = *(_OWORD *)&v19[v547 - 16];
        *(_OWORD *)(v548 - 144) = *(_OWORD *)&v19[v547 - 18];
        *(_OWORD *)(v548 - 128) = v555;
        *(_QWORD *)(v548 - 56) = v19[v547 - 7];
        *(_QWORD *)(v548 - 48) = v19[v547 - 6];
        v556 = v19[v547 - 5];
        *(_BYTE *)(v548 - 32) = v19[v547 - 4];
        *(_QWORD *)(v548 - 40) = v556;
        *(_OWORD *)(v548 - 24) = *(_OWORD *)&v19[v547 - 3];
        *((_QWORD *)v549 - 3) = 0;
        *((_QWORD *)v549 - 2) = 0;
        *(_BYTE *)(v548 - 8) = v19[v547 - 1];
        v547 -= 26;
      }
      while (&v19[v547] != v546);
      v545 = __p.__r_.__value_.__r.__words[2];
      v535 += v547 * 8;
    }
    v557 = (unint64_t *)a10[113].i64[1];
    if (v557 != v19)
    {
      do
      {
        *(_QWORD *)v545 = *v19;
        *(_QWORD *)(v545 + 8) = v19[1];
        v558 = *((_OWORD *)v19 + 1);
        *(_QWORD *)(v545 + 32) = v19[4];
        *(_OWORD *)(v545 + 16) = v558;
        v559 = *(_OWORD *)(v19 + 5);
        *(_QWORD *)(v545 + 56) = v19[7];
        *(_OWORD *)(v545 + 40) = v559;
        v561 = *((_OWORD *)v19 + 7);
        v560 = *((_OWORD *)v19 + 8);
        v562 = *((_OWORD *)v19 + 6);
        *(_QWORD *)(v545 + 144) = v19[18];
        *(_OWORD *)(v545 + 112) = v561;
        *(_OWORD *)(v545 + 128) = v560;
        *(_OWORD *)(v545 + 96) = v562;
        v563 = *((_OWORD *)v19 + 5);
        *(_OWORD *)(v545 + 64) = *((_OWORD *)v19 + 4);
        *(_OWORD *)(v545 + 80) = v563;
        *(_QWORD *)(v545 + 152) = v19[19];
        *(_QWORD *)(v545 + 160) = v19[20];
        v564 = v19[21];
        *(_BYTE *)(v545 + 176) = *((_BYTE *)v19 + 176);
        *(_QWORD *)(v545 + 168) = v564;
        *(_OWORD *)(v545 + 184) = *(_OWORD *)(v19 + 23);
        v19[23] = 0;
        v19[24] = 0;
        *(_BYTE *)(v545 + 200) = *((_BYTE *)v19 + 200);
        v545 += 208;
        v19 += 26;
      }
      while (v19 != v557);
      v19 = (unint64_t *)a10[113].i64[1];
    }
    v565 = a10[113].u64[0];
    a10[113].i64[0] = v535;
    a10[113].i64[1] = v545;
    v566 = a10[114].i64[0];
    a10[114].i64[0] = (uint64_t)v612;
    v612 = (char *)v566;
    __p.__r_.__value_.__r.__words[0] = v565;
    __p.__r_.__value_.__l.__size_ = v565;
    if (v19 != (unint64_t *)v565)
    {
      do
      {
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)(v19 - 26);
        v567 = (std::__shared_weak_count *)*(v19 - 2);
        if (v567)
        {
          v568 = (unint64_t *)&v567->__shared_owners_;
          do
            v569 = __ldaxr(v568);
          while (__stlxr(v569 - 1, v568));
          if (!v569)
          {
            ((void (*)(std::__shared_weak_count *))v567->__on_zero_shared)(v567);
            std::__shared_weak_count::__release_weak(v567);
          }
        }
        v19 = (unint64_t *)__p.__r_.__value_.__r.__words[2];
      }
      while (__p.__r_.__value_.__r.__words[2] != v565);
      v19 = (unint64_t *)__p.__r_.__value_.__r.__words[0];
    }
    if (v19)
      operator delete(v19);
    goto LABEL_748;
  }
LABEL_753:
  a10[119].i8[2] = 0;
  a10[119].i8[0] = 0;
  a10[118] = vaddq_s64(a10[118], vdupq_n_s64(1uLL));
  if (v609)
  {
    v572 = &v609->__shared_owners_;
    do
      v573 = __ldaxr((unint64_t *)v572);
    while (__stlxr(v573 - 1, (unint64_t *)v572));
    if (!v573)
    {
      ((void (*)(std::__shared_weak_count *))v609->__on_zero_shared)(v609);
      std::__shared_weak_count::__release_weak(v609);
    }
  }
  v119 = 0;
  v16 = v586;
  v15 = a10;
  size = (std::__shared_weak_count *)v592.__r_.__value_.__l.__size_;
  if (v592.__r_.__value_.__l.__size_)
  {
LABEL_152:
    v121 = (unint64_t *)&size->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
LABEL_156:
  if ((v119 & 1) != 0)
    goto LABEL_157;
  v123 = 0;
  v15[185].i8[12] = 0;
  v15[185].i32[2] = 0;
  v124 = v594;
  if (!v594)
    goto LABEL_163;
LABEL_160:
  v125 = (unint64_t *)&v124->__shared_owners_;
  do
    v126 = __ldaxr(v125);
  while (__stlxr(v126 - 1, v125));
  if (!v126)
  {
    ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
    std::__shared_weak_count::__release_weak(v124);
    if (!v123)
      return;
    goto LABEL_164;
  }
LABEL_163:
  if (!v123)
    return;
LABEL_164:
  sub_20E863438((uint64_t)&v618);
  v127 = (char *)v15[80].i64[0];
  v128 = (char *)v15[80].i64[1];
  if (v128 != v127)
  {
    v129 = (v128 - v127) >> 4;
    do
    {
      v130 = v129 >> 1;
      v131 = &v127[16 * (v129 >> 1)];
      v133 = *(_DWORD *)v131;
      v132 = v131 + 16;
      v129 += ~(v129 >> 1);
      if (v133 < a5)
        v127 = v132;
      else
        v129 = v130;
    }
    while (v129);
  }
  if (v127 == v128 || *(_DWORD *)v127 != a5)
  {
    v139 = 1;
    v140 = (char *)v15[32].i64[0];
    v141 = (char *)v15[32].i64[1];
    v142 = v140;
    v143 = v141 - v140;
    if (v141 == v140)
      goto LABEL_188;
    goto LABEL_183;
  }
  v134 = sub_20E86A980(&v619, (uint64_t)"error: landmark variable ", 25);
  sub_20F622838((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v136 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v136 = __p.__r_.__value_.__l.__size_;
  v137 = sub_20E86A980(v134, (uint64_t)p_p, v136);
  sub_20E86A980(v137, (uint64_t)" with ID ", 9);
  v138 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v138, (uint64_t)" was not found.\n", 16);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v139 = 0;
  v140 = (char *)v15[32].i64[0];
  v141 = (char *)v15[32].i64[1];
  v142 = v140;
  v143 = v141 - v140;
  if (v141 != v140)
  {
LABEL_183:
    v144 = v143 >> 4;
    v142 = v140;
    do
    {
      v145 = v144 >> 1;
      v146 = (unsigned int *)&v142[16 * (v144 >> 1)];
      v148 = *v146;
      v147 = (char *)(v146 + 4);
      v144 += ~(v144 >> 1);
      if (v148 < a2)
        v142 = v147;
      else
        v144 = v145;
    }
    while (v144);
  }
LABEL_188:
  if (v142 != v141 && *(_DWORD *)v142 == a2)
  {
    if (v141 != v140)
    {
      v149 = (v141 - v140) >> 4;
      do
      {
        v150 = v149 >> 1;
        v151 = (unsigned int *)&v140[16 * (v149 >> 1)];
        v153 = *v151;
        v152 = (char *)(v151 + 4);
        v149 += ~(v149 >> 1);
        if (v153 < a2)
          v140 = v152;
        else
          v149 = v150;
      }
      while (v149);
    }
    v587 = v139;
    if (v140 == v141 || *(_DWORD *)v140 != a2)
      v140 = v141;
    v154 = *((_QWORD *)v140 + 1);
    v155 = sub_20E86A980(&v619, (uint64_t)"debug: variable ", 16);
    sub_20F622C70((uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v156 = &__p;
    else
      v156 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v157 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v157 = __p.__r_.__value_.__l.__size_;
    v158 = sub_20E86A980(v155, (uint64_t)v156, v157);
    sub_20E86A980(v158, (uint64_t)" with ID ", 9);
    v159 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v159, (uint64_t)" found (", 8);
    v160 = (_QWORD *)std::ostream::operator<<();
    v161 = sub_20E86A980(v160, (uint64_t)", ", 2);
    if (*(_BYTE *)(v154 + 20))
      v162 = "free";
    else
      v162 = "fixed";
    if (*(_BYTE *)(v154 + 20))
      v163 = 4;
    else
      v163 = 5;
    v164 = sub_20E86A980(v161, (uint64_t)v162, v163);
    sub_20E86A980(v164, (uint64_t)")\n", 2);
    v165 = v587;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v588 = *(unsigned __int8 *)(v154 + 20);
    v166 = (char *)v15[32].i64[0];
    v167 = (char *)v15[32].i64[1];
    v168 = v166;
    v169 = v167 - v166;
    if (v167 == v166)
      goto LABEL_229;
LABEL_224:
    v175 = v169 >> 4;
    v168 = v166;
    do
    {
      v176 = v175 >> 1;
      v177 = (unsigned int *)&v168[16 * (v175 >> 1)];
      v179 = *v177;
      v178 = (char *)(v177 + 4);
      v175 += ~(v175 >> 1);
      if (v179 < a4)
        v168 = v178;
      else
        v175 = v176;
    }
    while (v175);
    goto LABEL_229;
  }
  v170 = sub_20E86A980(&v619, (uint64_t)"error: variable ", 16);
  sub_20F622C70((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v171 = &__p;
  else
    v171 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v172 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v172 = __p.__r_.__value_.__l.__size_;
  v173 = sub_20E86A980(v170, (uint64_t)v171, v172);
  sub_20E86A980(v173, (uint64_t)" with ID ", 9);
  v174 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v174, (uint64_t)" not found\n", 11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v165 = 0;
  v588 = 0;
  v166 = (char *)v15[32].i64[0];
  v167 = (char *)v15[32].i64[1];
  v168 = v166;
  v169 = v167 - v166;
  if (v167 != v166)
    goto LABEL_224;
LABEL_229:
  if (v168 != v167 && *(_DWORD *)v168 == a4)
  {
    if (v167 != v166)
    {
      v180 = (v167 - v166) >> 4;
      do
      {
        v181 = v180 >> 1;
        v182 = (unsigned int *)&v166[16 * (v180 >> 1)];
        v184 = *v182;
        v183 = (char *)(v182 + 4);
        v180 += ~(v180 >> 1);
        if (v184 < a4)
          v166 = v183;
        else
          v180 = v181;
      }
      while (v180);
    }
    if (v166 == v167 || *(_DWORD *)v166 != a4)
      v166 = v167;
    v185 = *((_QWORD *)v166 + 1);
    v186 = sub_20E86A980(&v619, (uint64_t)"debug: variable ", 16);
    sub_20F622C70((uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v187 = &__p;
    else
      v187 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v188 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v188 = __p.__r_.__value_.__l.__size_;
    v189 = sub_20E86A980(v186, (uint64_t)v187, v188);
    sub_20E86A980(v189, (uint64_t)" with ID ", 9);
    v190 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v190, (uint64_t)" found (", 8);
    v191 = (_QWORD *)std::ostream::operator<<();
    v192 = sub_20E86A980(v191, (uint64_t)", ", 2);
    if (*(_BYTE *)(v185 + 20))
      v193 = "free";
    else
      v193 = "fixed";
    if (*(_BYTE *)(v185 + 20))
      v194 = 4;
    else
      v194 = 5;
    v195 = sub_20E86A980(v192, (uint64_t)v193, v194);
    sub_20E86A980(v195, (uint64_t)")\n", 2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v588 |= *(unsigned __int8 *)(v185 + 20);
    v196 = (char *)v15[20].i64[0];
    v197 = (char *)v15[20].i64[1];
    v198 = v196;
    v199 = v197 - v196;
    if (v197 == v196)
      goto LABEL_270;
LABEL_265:
    v205 = v199 >> 4;
    v198 = v196;
    do
    {
      v206 = v205 >> 1;
      v207 = (unsigned int *)&v198[16 * (v205 >> 1)];
      v209 = *v207;
      v208 = (char *)(v207 + 4);
      v205 += ~(v205 >> 1);
      if (v209 < a1)
        v198 = v208;
      else
        v205 = v206;
    }
    while (v205);
    goto LABEL_270;
  }
  v200 = sub_20E86A980(&v619, (uint64_t)"error: variable ", 16);
  sub_20F622C70((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v201 = &__p;
  else
    v201 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v202 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v202 = __p.__r_.__value_.__l.__size_;
  v203 = sub_20E86A980(v200, (uint64_t)v201, v202);
  sub_20E86A980(v203, (uint64_t)" with ID ", 9);
  v204 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v204, (uint64_t)" not found\n", 11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v165 = 0;
  v196 = (char *)v15[20].i64[0];
  v197 = (char *)v15[20].i64[1];
  v198 = v196;
  v199 = v197 - v196;
  if (v197 != v196)
    goto LABEL_265;
LABEL_270:
  if (v198 != v197 && *(_DWORD *)v198 == a1)
  {
    if (v197 != v196)
    {
      v210 = (v197 - v196) >> 4;
      do
      {
        v211 = v210 >> 1;
        v212 = (unsigned int *)&v196[16 * (v210 >> 1)];
        v214 = *v212;
        v213 = (char *)(v212 + 4);
        v210 += ~(v210 >> 1);
        if (v214 < a1)
          v196 = v213;
        else
          v210 = v211;
      }
      while (v210);
    }
    if (v196 == v197 || *(_DWORD *)v196 != a1)
      v196 = v197;
    v215 = *((_QWORD *)v196 + 1);
    v216 = sub_20E86A980(&v619, (uint64_t)"debug: variable ", 16);
    sub_20F622E88((uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v217 = &__p;
    else
      v217 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v218 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v218 = __p.__r_.__value_.__l.__size_;
    v219 = sub_20E86A980(v216, (uint64_t)v217, v218);
    sub_20E86A980(v219, (uint64_t)" with ID ", 9);
    v220 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v220, (uint64_t)" found (", 8);
    v221 = (_QWORD *)std::ostream::operator<<();
    v222 = sub_20E86A980(v221, (uint64_t)", ", 2);
    if (*(_BYTE *)(v215 + 20))
      v223 = "free";
    else
      v223 = "fixed";
    if (*(_BYTE *)(v215 + 20))
      v224 = 4;
    else
      v224 = 5;
    v225 = sub_20E86A980(v222, (uint64_t)v223, v224);
    sub_20E86A980(v225, (uint64_t)")\n", 2);
    v226 = v165;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v588 |= *(unsigned __int8 *)(v215 + 20);
    v227 = (char *)v15[20].i64[0];
    v228 = (char *)v15[20].i64[1];
    v229 = v227;
    v230 = v228 - v227;
    if (v228 == v227)
      goto LABEL_311;
LABEL_306:
    v236 = v230 >> 4;
    v229 = v227;
    do
    {
      v237 = v236 >> 1;
      v238 = (unsigned int *)&v229[16 * (v236 >> 1)];
      v240 = *v238;
      v239 = (char *)(v238 + 4);
      v236 += ~(v236 >> 1);
      if (v240 < a3)
        v229 = v239;
      else
        v236 = v237;
    }
    while (v236);
    goto LABEL_311;
  }
  v231 = sub_20E86A980(&v619, (uint64_t)"error: variable ", 16);
  sub_20F622E88((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v232 = &__p;
  else
    v232 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v233 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v233 = __p.__r_.__value_.__l.__size_;
  v234 = sub_20E86A980(v231, (uint64_t)v232, v233);
  sub_20E86A980(v234, (uint64_t)" with ID ", 9);
  v235 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v235, (uint64_t)" not found\n", 11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v226 = 0;
  v227 = (char *)v15[20].i64[0];
  v228 = (char *)v15[20].i64[1];
  v229 = v227;
  v230 = v228 - v227;
  if (v228 != v227)
    goto LABEL_306;
LABEL_311:
  if (v229 != v228 && *(_DWORD *)v229 == a3)
  {
    if (v228 != v227)
    {
      v241 = (v228 - v227) >> 4;
      do
      {
        v242 = v241 >> 1;
        v243 = (unsigned int *)&v227[16 * (v241 >> 1)];
        v245 = *v243;
        v244 = (char *)(v243 + 4);
        v241 += ~(v241 >> 1);
        if (v245 < a3)
          v227 = v244;
        else
          v241 = v242;
      }
      while (v241);
    }
    if (v227 == v228 || *(_DWORD *)v227 != a3)
      v227 = v228;
    v246 = *((_QWORD *)v227 + 1);
    v247 = sub_20E86A980(&v619, (uint64_t)"debug: variable ", 16);
    sub_20F622E88((uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v248 = &__p;
    else
      v248 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v249 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v249 = __p.__r_.__value_.__l.__size_;
    v250 = sub_20E86A980(v247, (uint64_t)v248, v249);
    sub_20E86A980(v250, (uint64_t)" with ID ", 9);
    v251 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v251, (uint64_t)" found (", 8);
    v252 = (_QWORD *)std::ostream::operator<<();
    v253 = sub_20E86A980(v252, (uint64_t)", ", 2);
    if (*(_BYTE *)(v246 + 20))
      v254 = "free";
    else
      v254 = "fixed";
    if (*(_BYTE *)(v246 + 20))
      v255 = 4;
    else
      v255 = 5;
    v256 = sub_20E86A980(v253, (uint64_t)v254, v255);
    sub_20E86A980(v256, (uint64_t)")\n", 2);
    v257 = v226;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v588 |= *(unsigned __int8 *)(v246 + 20);
    v258 = (char *)v15[56].i64[0];
    v259 = (char *)v15[56].i64[1];
    v260 = v258;
    v261 = v259 - v258;
    if (v259 == v258)
      goto LABEL_352;
LABEL_347:
    v267 = v261 >> 4;
    v260 = v258;
    do
    {
      v268 = v267 >> 1;
      v269 = (unsigned int *)&v260[16 * (v267 >> 1)];
      v271 = *v269;
      v270 = (char *)(v269 + 4);
      v267 += ~(v267 >> 1);
      if (v271 < a2)
        v260 = v270;
      else
        v267 = v268;
    }
    while (v267);
    goto LABEL_352;
  }
  v262 = sub_20E86A980(&v619, (uint64_t)"error: variable ", 16);
  sub_20F622E88((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v263 = &__p;
  else
    v263 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v264 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v264 = __p.__r_.__value_.__l.__size_;
  v265 = sub_20E86A980(v262, (uint64_t)v263, v264);
  sub_20E86A980(v265, (uint64_t)" with ID ", 9);
  v266 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v266, (uint64_t)" not found\n", 11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v257 = 0;
  v258 = (char *)v15[56].i64[0];
  v259 = (char *)v15[56].i64[1];
  v260 = v258;
  v261 = v259 - v258;
  if (v259 != v258)
    goto LABEL_347;
LABEL_352:
  if (v260 != v259 && *(_DWORD *)v260 == a2)
  {
    if (v259 != v258)
    {
      v272 = (v259 - v258) >> 4;
      do
      {
        v273 = v272 >> 1;
        v274 = (unsigned int *)&v258[16 * (v272 >> 1)];
        v276 = *v274;
        v275 = (char *)(v274 + 4);
        v272 += ~(v272 >> 1);
        if (v276 < a2)
          v258 = v275;
        else
          v272 = v273;
      }
      while (v272);
    }
    if (v258 == v259 || *(_DWORD *)v258 != a2)
      v258 = v259;
    v277 = *((_QWORD *)v258 + 1);
    v278 = sub_20E86A980(&v619, (uint64_t)"debug: variable ", 16);
    sub_20F6230A4((uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v279 = &__p;
    else
      v279 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v280 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v280 = __p.__r_.__value_.__l.__size_;
    v281 = sub_20E86A980(v278, (uint64_t)v279, v280);
    sub_20E86A980(v281, (uint64_t)" with ID ", 9);
    v282 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v282, (uint64_t)" found (", 8);
    v283 = (_QWORD *)std::ostream::operator<<();
    v284 = sub_20E86A980(v283, (uint64_t)", ", 2);
    if (*(_BYTE *)(v277 + 20))
      v285 = "free";
    else
      v285 = "fixed";
    if (*(_BYTE *)(v277 + 20))
      v286 = 4;
    else
      v286 = 5;
    v287 = sub_20E86A980(v284, (uint64_t)v285, v286);
    sub_20E86A980(v287, (uint64_t)")\n", 2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v588 |= *(unsigned __int8 *)(v277 + 20);
    v288 = (char *)v15[56].i64[0];
    v289 = (char *)v15[56].i64[1];
    v290 = v288;
    v291 = v289 - v288;
    if (v289 == v288)
      goto LABEL_393;
LABEL_388:
    v297 = v291 >> 4;
    v290 = v288;
    do
    {
      v298 = v297 >> 1;
      v299 = (unsigned int *)&v290[16 * (v297 >> 1)];
      v301 = *v299;
      v300 = (char *)(v299 + 4);
      v297 += ~(v297 >> 1);
      if (v301 < a4)
        v290 = v300;
      else
        v297 = v298;
    }
    while (v297);
    goto LABEL_393;
  }
  v292 = sub_20E86A980(&v619, (uint64_t)"error: variable ", 16);
  sub_20F6230A4((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v293 = &__p;
  else
    v293 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v294 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v294 = __p.__r_.__value_.__l.__size_;
  v295 = sub_20E86A980(v292, (uint64_t)v293, v294);
  sub_20E86A980(v295, (uint64_t)" with ID ", 9);
  v296 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v296, (uint64_t)" not found\n", 11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v257 = 0;
  v288 = (char *)v15[56].i64[0];
  v289 = (char *)v15[56].i64[1];
  v290 = v288;
  v291 = v289 - v288;
  if (v289 != v288)
    goto LABEL_388;
LABEL_393:
  if (v290 != v289 && *(_DWORD *)v290 == a4)
  {
    if (v289 != v288)
    {
      v302 = (v289 - v288) >> 4;
      do
      {
        v303 = v302 >> 1;
        v304 = (unsigned int *)&v288[16 * (v302 >> 1)];
        v306 = *v304;
        v305 = (char *)(v304 + 4);
        v302 += ~(v302 >> 1);
        if (v306 < a4)
          v288 = v305;
        else
          v302 = v303;
      }
      while (v302);
    }
    if (v288 == v289 || *(_DWORD *)v288 != a4)
      v288 = v289;
    v307 = *((_QWORD *)v288 + 1);
    v308 = sub_20E86A980(&v619, (uint64_t)"debug: variable ", 16);
    sub_20F6230A4((uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v309 = &__p;
    else
      v309 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v310 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v310 = __p.__r_.__value_.__l.__size_;
    v311 = sub_20E86A980(v308, (uint64_t)v309, v310);
    sub_20E86A980(v311, (uint64_t)" with ID ", 9);
    v312 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v312, (uint64_t)" found (", 8);
    v313 = (_QWORD *)std::ostream::operator<<();
    v314 = sub_20E86A980(v313, (uint64_t)", ", 2);
    if (*(_BYTE *)(v307 + 20))
      v315 = "free";
    else
      v315 = "fixed";
    if (*(_BYTE *)(v307 + 20))
      v316 = 4;
    else
      v316 = 5;
    v317 = sub_20E86A980(v314, (uint64_t)v315, v316);
    sub_20E86A980(v317, (uint64_t)")\n", 2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v588 |= *(unsigned __int8 *)(v307 + 20);
    v318 = (char *)v15[62].i64[0];
    v319 = (char *)v15[62].i64[1];
    v320 = v318;
    v321 = v319 - v318;
    if (v319 == v318)
      goto LABEL_434;
LABEL_429:
    v327 = v321 >> 4;
    v320 = v318;
    do
    {
      v328 = v327 >> 1;
      v329 = (unsigned int *)&v320[16 * (v327 >> 1)];
      v331 = *v329;
      v330 = (char *)(v329 + 4);
      v327 += ~(v327 >> 1);
      if (v331 < a2)
        v320 = v330;
      else
        v327 = v328;
    }
    while (v327);
    goto LABEL_434;
  }
  v322 = sub_20E86A980(&v619, (uint64_t)"error: variable ", 16);
  sub_20F6230A4((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v323 = &__p;
  else
    v323 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v324 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v324 = __p.__r_.__value_.__l.__size_;
  v325 = sub_20E86A980(v322, (uint64_t)v323, v324);
  sub_20E86A980(v325, (uint64_t)" with ID ", 9);
  v326 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v326, (uint64_t)" not found\n", 11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v257 = 0;
  v318 = (char *)v15[62].i64[0];
  v319 = (char *)v15[62].i64[1];
  v320 = v318;
  v321 = v319 - v318;
  if (v319 != v318)
    goto LABEL_429;
LABEL_434:
  if (v320 != v319 && *(_DWORD *)v320 == a2)
  {
    if (v319 != v318)
    {
      v332 = (v319 - v318) >> 4;
      do
      {
        v333 = v332 >> 1;
        v334 = (unsigned int *)&v318[16 * (v332 >> 1)];
        v336 = *v334;
        v335 = (char *)(v334 + 4);
        v332 += ~(v332 >> 1);
        if (v336 < a2)
          v318 = v335;
        else
          v332 = v333;
      }
      while (v332);
    }
    if (v318 == v319 || *(_DWORD *)v318 != a2)
      v318 = v319;
    v337 = *((_QWORD *)v318 + 1);
    v338 = sub_20E86A980(&v619, (uint64_t)"debug: variable ", 16);
    sub_20F6232BC((uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v339 = &__p;
    else
      v339 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v340 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v340 = __p.__r_.__value_.__l.__size_;
    v341 = sub_20E86A980(v338, (uint64_t)v339, v340);
    sub_20E86A980(v341, (uint64_t)" with ID ", 9);
    v342 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v342, (uint64_t)" found (", 8);
    v343 = (_QWORD *)std::ostream::operator<<();
    v344 = sub_20E86A980(v343, (uint64_t)", ", 2);
    if (*(_BYTE *)(v337 + 20))
      v345 = "free";
    else
      v345 = "fixed";
    if (*(_BYTE *)(v337 + 20))
      v346 = 4;
    else
      v346 = 5;
    v347 = sub_20E86A980(v344, (uint64_t)v345, v346);
    sub_20E86A980(v347, (uint64_t)")\n", 2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v588 |= *(unsigned __int8 *)(v337 + 20);
    v348 = (char *)v15[62].i64[0];
    v349 = (char *)v15[62].i64[1];
    v350 = v348;
    v351 = v349 - v348;
    if (v349 == v348)
      goto LABEL_475;
LABEL_470:
    v357 = v351 >> 4;
    v350 = v348;
    do
    {
      v358 = v357 >> 1;
      v359 = (unsigned int *)&v350[16 * (v357 >> 1)];
      v361 = *v359;
      v360 = (char *)(v359 + 4);
      v357 += ~(v357 >> 1);
      if (v361 < a4)
        v350 = v360;
      else
        v357 = v358;
    }
    while (v357);
    goto LABEL_475;
  }
  v352 = sub_20E86A980(&v619, (uint64_t)"error: variable ", 16);
  sub_20F6232BC((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v353 = &__p;
  else
    v353 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v354 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v354 = __p.__r_.__value_.__l.__size_;
  v355 = sub_20E86A980(v352, (uint64_t)v353, v354);
  sub_20E86A980(v355, (uint64_t)" with ID ", 9);
  v356 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v356, (uint64_t)" not found\n", 11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v257 = 0;
  v348 = (char *)v15[62].i64[0];
  v349 = (char *)v15[62].i64[1];
  v350 = v348;
  v351 = v349 - v348;
  if (v349 != v348)
    goto LABEL_470;
LABEL_475:
  if (v350 != v349 && *(_DWORD *)v350 == a4)
  {
    if (v349 != v348)
    {
      v362 = (v349 - v348) >> 4;
      do
      {
        v363 = v362 >> 1;
        v364 = (unsigned int *)&v348[16 * (v362 >> 1)];
        v366 = *v364;
        v365 = (char *)(v364 + 4);
        v362 += ~(v362 >> 1);
        if (v366 < a4)
          v348 = v365;
        else
          v362 = v363;
      }
      while (v362);
    }
    if (v348 == v349 || *(_DWORD *)v348 != a4)
      v348 = v349;
    v367 = *((_QWORD *)v348 + 1);
    v368 = sub_20E86A980(&v619, (uint64_t)"debug: variable ", 16);
    sub_20F6232BC((uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v369 = &__p;
    else
      v369 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v370 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v370 = __p.__r_.__value_.__l.__size_;
    v371 = sub_20E86A980(v368, (uint64_t)v369, v370);
    sub_20E86A980(v371, (uint64_t)" with ID ", 9);
    v372 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v372, (uint64_t)" found (", 8);
    v373 = (_QWORD *)std::ostream::operator<<();
    v374 = sub_20E86A980(v373, (uint64_t)", ", 2);
    if (*(_BYTE *)(v367 + 20))
      v375 = "free";
    else
      v375 = "fixed";
    if (*(_BYTE *)(v367 + 20))
      v376 = 4;
    else
      v376 = 5;
    v377 = sub_20E86A980(v374, (uint64_t)v375, v376);
    sub_20E86A980(v377, (uint64_t)")\n", 2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v588 |= *(unsigned __int8 *)(v367 + 20);
    v378 = (char *)v15[68].i64[0];
    v379 = (char *)v15[68].i64[1];
    v380 = v378;
    v381 = v379 - v378;
    if (v379 == v378)
      goto LABEL_516;
LABEL_511:
    v387 = v381 >> 4;
    v380 = v378;
    do
    {
      v388 = v387 >> 1;
      v389 = (unsigned int *)&v380[16 * (v387 >> 1)];
      v391 = *v389;
      v390 = (char *)(v389 + 4);
      v387 += ~(v387 >> 1);
      if (v391 < a2)
        v380 = v390;
      else
        v387 = v388;
    }
    while (v387);
    goto LABEL_516;
  }
  v382 = sub_20E86A980(&v619, (uint64_t)"error: variable ", 16);
  sub_20F6232BC((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v383 = &__p;
  else
    v383 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v384 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v384 = __p.__r_.__value_.__l.__size_;
  v385 = sub_20E86A980(v382, (uint64_t)v383, v384);
  sub_20E86A980(v385, (uint64_t)" with ID ", 9);
  v386 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v386, (uint64_t)" not found\n", 11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v257 = 0;
  v378 = (char *)v15[68].i64[0];
  v379 = (char *)v15[68].i64[1];
  v380 = v378;
  v381 = v379 - v378;
  if (v379 != v378)
    goto LABEL_511;
LABEL_516:
  if (v380 != v379 && *(_DWORD *)v380 == a2)
  {
    if (v379 != v378)
    {
      v392 = (v379 - v378) >> 4;
      do
      {
        v393 = v392 >> 1;
        v394 = (unsigned int *)&v378[16 * (v392 >> 1)];
        v396 = *v394;
        v395 = (char *)(v394 + 4);
        v392 += ~(v392 >> 1);
        if (v396 < a2)
          v378 = v395;
        else
          v392 = v393;
      }
      while (v392);
    }
    if (v378 == v379 || *(_DWORD *)v378 != a2)
      v378 = v379;
    v397 = *((_QWORD *)v378 + 1);
    v398 = sub_20E86A980(&v619, (uint64_t)"debug: variable ", 16);
    sub_20F6234D8((uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v399 = &__p;
    else
      v399 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v400 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v400 = __p.__r_.__value_.__l.__size_;
    v401 = sub_20E86A980(v398, (uint64_t)v399, v400);
    sub_20E86A980(v401, (uint64_t)" with ID ", 9);
    v402 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v402, (uint64_t)" found (", 8);
    v403 = (_QWORD *)std::ostream::operator<<();
    v404 = sub_20E86A980(v403, (uint64_t)", ", 2);
    if (*(_BYTE *)(v397 + 20))
      v405 = "free";
    else
      v405 = "fixed";
    if (*(_BYTE *)(v397 + 20))
      v406 = 4;
    else
      v406 = 5;
    v407 = sub_20E86A980(v404, (uint64_t)v405, v406);
    sub_20E86A980(v407, (uint64_t)")\n", 2);
    v408 = v257;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v588 |= *(unsigned __int8 *)(v397 + 20);
    v409 = (char *)v15[68].i64[0];
    v410 = (char *)v15[68].i64[1];
    v411 = v409;
    v412 = v410 - v409;
    if (v410 == v409)
      goto LABEL_557;
LABEL_552:
    v418 = v412 >> 4;
    v411 = v409;
    do
    {
      v419 = v418 >> 1;
      v420 = (unsigned int *)&v411[16 * (v418 >> 1)];
      v422 = *v420;
      v421 = (char *)(v420 + 4);
      v418 += ~(v418 >> 1);
      if (v422 < a4)
        v411 = v421;
      else
        v418 = v419;
    }
    while (v418);
    goto LABEL_557;
  }
  v413 = sub_20E86A980(&v619, (uint64_t)"error: variable ", 16);
  sub_20F6234D8((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v414 = &__p;
  else
    v414 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v415 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v415 = __p.__r_.__value_.__l.__size_;
  v416 = sub_20E86A980(v413, (uint64_t)v414, v415);
  sub_20E86A980(v416, (uint64_t)" with ID ", 9);
  v417 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v417, (uint64_t)" not found\n", 11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v408 = 0;
  v409 = (char *)v15[68].i64[0];
  v410 = (char *)v15[68].i64[1];
  v411 = v409;
  v412 = v410 - v409;
  if (v410 != v409)
    goto LABEL_552;
LABEL_557:
  if (v411 != v410 && *(_DWORD *)v411 == a4)
  {
    if (v410 != v409)
    {
      v423 = (v410 - v409) >> 4;
      do
      {
        v424 = v423 >> 1;
        v425 = (unsigned int *)&v409[16 * (v423 >> 1)];
        v427 = *v425;
        v426 = (char *)(v425 + 4);
        v423 += ~(v423 >> 1);
        if (v427 < a4)
          v409 = v426;
        else
          v423 = v424;
      }
      while (v423);
    }
    if (v409 == v410 || *(_DWORD *)v409 != a4)
      v409 = v410;
    v428 = *((_QWORD *)v409 + 1);
    v429 = sub_20E86A980(&v619, (uint64_t)"debug: variable ", 16);
    sub_20F6234D8((uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v430 = &__p;
    else
      v430 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v431 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v431 = __p.__r_.__value_.__l.__size_;
    v432 = sub_20E86A980(v429, (uint64_t)v430, v431);
    sub_20E86A980(v432, (uint64_t)" with ID ", 9);
    v433 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v433, (uint64_t)" found (", 8);
    v434 = (_QWORD *)std::ostream::operator<<();
    v435 = sub_20E86A980(v434, (uint64_t)", ", 2);
    if (*(_BYTE *)(v428 + 20))
      v436 = "free";
    else
      v436 = "fixed";
    if (*(_BYTE *)(v428 + 20))
      v437 = 4;
    else
      v437 = 5;
    v438 = sub_20E86A980(v435, (uint64_t)v436, v437);
    sub_20E86A980(v438, (uint64_t)")\n", 2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v588 |= *(unsigned __int8 *)(v428 + 20);
    v439 = (char *)v15[80].i64[0];
    v440 = (char *)v15[80].i64[1];
    v441 = v439;
    v442 = v440 - v439;
    if (v440 == v439)
      goto LABEL_598;
LABEL_593:
    v448 = v442 >> 4;
    v441 = v439;
    do
    {
      v449 = v448 >> 1;
      v450 = (unsigned int *)&v441[16 * (v448 >> 1)];
      v452 = *v450;
      v451 = (char *)(v450 + 4);
      v448 += ~(v448 >> 1);
      if (v452 < a5)
        v441 = v451;
      else
        v448 = v449;
    }
    while (v448);
    goto LABEL_598;
  }
  v443 = sub_20E86A980(&v619, (uint64_t)"error: variable ", 16);
  sub_20F6234D8((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v444 = &__p;
  else
    v444 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v445 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v445 = __p.__r_.__value_.__l.__size_;
  v446 = sub_20E86A980(v443, (uint64_t)v444, v445);
  sub_20E86A980(v446, (uint64_t)" with ID ", 9);
  v447 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v447, (uint64_t)" not found\n", 11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v408 = 0;
  v439 = (char *)v15[80].i64[0];
  v440 = (char *)v15[80].i64[1];
  v441 = v439;
  v442 = v440 - v439;
  if (v440 != v439)
    goto LABEL_593;
LABEL_598:
  if (v441 == v440 || *(_DWORD *)v441 != a5)
  {
    v473 = sub_20E86A980(&v619, (uint64_t)"error: variable ", 16);
    sub_20F622838((uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v474 = &__p;
    else
      v474 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v475 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v475 = __p.__r_.__value_.__l.__size_;
    v476 = sub_20E86A980(v473, (uint64_t)v474, v475);
    sub_20E86A980(v476, (uint64_t)" with ID ", 9);
    v477 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v477, (uint64_t)" not found\n", 11);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      v458 = 0;
      v470 = (char *)v15[113].i64[0];
      v471 = (char *)v15[113].i64[1];
      v472 = v471 - v470;
      if (v471 == v470)
        goto LABEL_653;
    }
    else
    {
      v458 = 0;
      v470 = (char *)v15[113].i64[0];
      v471 = (char *)v15[113].i64[1];
      v472 = v471 - v470;
      if (v471 == v470)
        goto LABEL_653;
    }
    goto LABEL_637;
  }
  if (v440 != v439)
  {
    v453 = (v440 - v439) >> 4;
    do
    {
      v454 = v453 >> 1;
      v455 = (unsigned int *)&v439[16 * (v453 >> 1)];
      v457 = *v455;
      v456 = (char *)(v455 + 4);
      v453 += ~(v453 >> 1);
      if (v457 < a5)
        v439 = v456;
      else
        v453 = v454;
    }
    while (v453);
  }
  v458 = v408;
  if (v439 == v440 || *(_DWORD *)v439 != a5)
    v439 = v440;
  v459 = *((_QWORD *)v439 + 1);
  v460 = sub_20E86A980(&v619, (uint64_t)"debug: variable ", 16);
  sub_20F622838((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v461 = &__p;
  else
    v461 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v462 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v462 = __p.__r_.__value_.__l.__size_;
  v463 = sub_20E86A980(v460, (uint64_t)v461, v462);
  sub_20E86A980(v463, (uint64_t)" with ID ", 9);
  v464 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v464, (uint64_t)" found (", 8);
  v465 = (_QWORD *)std::ostream::operator<<();
  v466 = sub_20E86A980(v465, (uint64_t)", ", 2);
  if (*(_BYTE *)(v459 + 20))
    v467 = "free";
  else
    v467 = "fixed";
  if (*(_BYTE *)(v459 + 20))
    v468 = 4;
  else
    v468 = 5;
  v469 = sub_20E86A980(v466, (uint64_t)v467, v468);
  sub_20E86A980(v469, (uint64_t)")\n", 2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v588 |= *(unsigned __int8 *)(v459 + 20);
  v470 = (char *)v15[113].i64[0];
  v471 = (char *)v15[113].i64[1];
  v472 = v471 - v470;
  if (v471 != v470)
  {
LABEL_637:
    v478 = 0x4EC4EC4EC4EC4EC5 * (v472 >> 4);
    do
    {
      v479 = v478 >> 1;
      v480 = (unint64_t *)&v470[208 * (v478 >> 1)];
      v482 = *v480;
      v481 = (char *)(v480 + 26);
      v478 += ~(v478 >> 1);
      if (v482 < v16)
        v470 = v481;
      else
        v478 = v479;
    }
    while (v478);
    if (v471 != v470 && *(_QWORD *)v470 == v16)
    {
      v483 = sub_20E86A980(&v619, (uint64_t)"error: factor ", 14);
      sub_20F9218B0((uint64_t)&__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v484 = &__p;
      else
        v484 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v485 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v485 = __p.__r_.__value_.__l.__size_;
      v486 = sub_20E86A980(v483, (uint64_t)v484, v485);
      sub_20E86A980(v486, (uint64_t)" with the same ID ", 18);
      v487 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v487, (uint64_t)" already exists.\n", 17);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v458 = 0;
    }
  }
LABEL_653:
  if (v588)
  {
    v488 = v458 != 0;
    v489 = BYTE8(v626);
    if ((BYTE8(v626) & 0x10) == 0)
      goto LABEL_655;
LABEL_666:
    v497 = v626;
    if ((unint64_t)v626 < *((_QWORD *)&v623 + 1))
    {
      *(_QWORD *)&v626 = *((_QWORD *)&v623 + 1);
      v497 = *((_QWORD *)&v623 + 1);
    }
    v498 = (const void *)v623;
    v490 = v497 - v623;
    if ((unint64_t)(v497 - v623) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_694;
    goto LABEL_669;
  }
  v492 = sub_20E86A980(&v619, (uint64_t)"error: factor ", 14);
  sub_20F9218B0((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v493 = &__p;
  else
    v493 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v494 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v494 = __p.__r_.__value_.__l.__size_;
  v495 = sub_20E86A980(v492, (uint64_t)v493, v494);
  sub_20E86A980(v495, (uint64_t)" with ID ", 9);
  v496 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v496, (uint64_t)" cannot be added: all variables are fixed.\n", 43);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v488 = 0;
  v489 = BYTE8(v626);
  if ((BYTE8(v626) & 0x10) != 0)
    goto LABEL_666;
LABEL_655:
  if ((v489 & 8) == 0)
  {
    v490 = 0;
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
    v491 = &__p;
    goto LABEL_676;
  }
  v498 = (const void *)v621;
  v490 = *(_QWORD *)&v622 - v621;
  if (*(_QWORD *)&v622 - (_QWORD)v621 >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_694:
    sub_20E860B7C();
LABEL_669:
  if (v490 >= 0x17)
  {
    v499 = (v490 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v490 | 7) != 0x17)
      v499 = v490 | 7;
    v500 = v499 + 1;
    v491 = (std::string *)operator new(v499 + 1);
    __p.__r_.__value_.__l.__size_ = v490;
    __p.__r_.__value_.__r.__words[2] = v500 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v491;
    goto LABEL_675;
  }
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = v490;
  v491 = &__p;
  if (v490)
LABEL_675:
    memmove(v491, v498, v490);
LABEL_676:
  v491->__r_.__value_.__s.__data_[v490] = 0;
  *(std::string *)v595 = __p;
  v595[24] = v488;
  v618.i64[0] = *MEMORY[0x24BEDB7F0];
  v501 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(uint64_t *)((char *)v618.i64 + *(_QWORD *)(v618.i64[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  *(_QWORD *)&v619 = v501;
  *((_QWORD *)&v619 + 1) = MEMORY[0x24BEDB848] + 16;
  if (SHIBYTE(v625) < 0)
    operator delete(v624[1]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](&v627);
  v502 = std::string::insert((std::string *)v595, 0, "Failed to add the factor into linear system. This could be due to duplicated factor IDs ('", 0x5AuLL);
  v503 = *(_OWORD *)&v502->__r_.__value_.__l.__data_;
  v592.__r_.__value_.__r.__words[2] = v502->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v592.__r_.__value_.__l.__data_ = v503;
  v502->__r_.__value_.__l.__size_ = 0;
  v502->__r_.__value_.__r.__words[2] = 0;
  v502->__r_.__value_.__r.__words[0] = 0;
  v504 = std::string::append(&v592, "').", 3uLL);
  v505 = *(_OWORD *)&v504->__r_.__value_.__l.__data_;
  v617 = *(double *)&v504->__r_.__value_.__r.__words[2];
  *(_OWORD *)v616 = v505;
  v504->__r_.__value_.__l.__size_ = 0;
  v504->__r_.__value_.__r.__words[2] = 0;
  v504->__r_.__value_.__r.__words[0] = 0;
  if (v617 >= 0.0)
    v506 = v616;
  else
    v506 = (void **)v616[0];
  if (v617 >= 0.0)
    v507 = HIBYTE(v617);
  else
    v507 = (uint64_t)v616[1];
  v508 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOLineSegmentFactorUtil.h", 102, (uint64_t)"result", 6, (uint64_t)v506, v507, (void (*)(void **))sub_21023DDB0);
  if (SHIBYTE(v617) < 0)
  {
    operator delete(v616[0]);
    if ((SHIBYTE(v592.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_686:
      if ((v595[23] & 0x80000000) == 0)
        goto LABEL_687;
      goto LABEL_691;
    }
  }
  else if ((SHIBYTE(v592.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_686;
  }
  operator delete(v592.__r_.__value_.__l.__data_);
  if ((v595[23] & 0x80000000) == 0)
  {
LABEL_687:
    if (!v508)
      return;
LABEL_692:
    abort();
  }
LABEL_691:
  operator delete(*(void **)v595);
  if (v508)
    goto LABEL_692;
}

void sub_20FC5AB70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  sub_20FB817A8((uint64_t)&a63);
  sub_20F4ACD60((uint64_t)&STACK[0x210]);
  sub_20F8AEE9C((uint64_t)&a37);
  sub_20E86665C((uint64_t)&a31);
  sub_20E86665C((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void sub_20FC5ABAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *__p)
{
  char a68;

  if (a68 < 0)
  {
    operator delete(__p);
    sub_20E863784((uint64_t)&STACK[0x210]);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&STACK[0x210]);
  _Unwind_Resume(a1);
}

unint64_t sub_20FC5ACBC(unint64_t result, uint64_t *a2, _QWORD ***a3, uint64_t a4, char a5)
{
  uint64_t *v7;
  _QWORD ***v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t *v33;
  uint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  unint64_t v42;
  unsigned int v43;
  uint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  unint64_t v57;
  _QWORD **v58;
  uint64_t v59;
  uint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  unint64_t v66;
  unsigned int v67;
  uint64_t *v68;
  uint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t *v76;
  unint64_t v77;
  unsigned int v78;
  uint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t *v91;
  unint64_t v92;
  unsigned int v93;
  uint64_t *v94;
  uint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t *v102;
  unint64_t v103;
  unsigned int v104;
  uint64_t *v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t *v110;
  BOOL v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  _QWORD **v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unsigned int v129;
  unint64_t v130;
  unint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  unsigned int v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  _QWORD *v142;
  uint64_t v143;
  unint64_t *v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unsigned int v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t *v155;
  uint64_t v156;
  _QWORD *v157;
  _QWORD *v158;
  _QWORD *v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t *v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t *v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t *v176;
  BOOL v177;
  char v178;
  _QWORD **v179;
  uint64_t *v180;
  uint64_t *v181;
  uint64_t *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t *v190;
  unint64_t v191;
  uint64_t v192;
  unint64_t *v193;
  uint64_t *v194;
  uint64_t *v195;
  unint64_t v196;
  unsigned int v197;
  unint64_t *v198;
  uint64_t *v199;
  unint64_t v200;
  unint64_t *v201;
  uint64_t v202;
  unint64_t *v203;
  unint64_t *v204;
  unint64_t v205;
  unsigned int v206;
  unint64_t *v207;
  unint64_t v208;
  unint64_t v209;
  uint64_t v210;
  unint64_t *v211;
  unint64_t *v212;
  int64_t v213;
  int64_t v214;
  _QWORD ***v215;
  int64_t v216;
  uint64_t v217;
  uint64_t *v218;
  uint64_t *v219;
  uint64_t v220;
  _QWORD **v221;
  uint64_t v222;
  uint64_t v223;
  _BOOL4 v224;
  uint64_t *v225;
  uint64_t v226;
  uint64_t v227;
  int64_t v228;
  uint64_t v229;
  _BOOL4 v230;
  uint64_t *v231;
  uint64_t v232;
  _QWORD **v233;
  uint64_t v234;
  uint64_t *v235;
  uint64_t v237;
  uint64_t v238;
  uint64_t *v239;
  _BOOL4 v240;
  uint64_t *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t *v245;
  unint64_t v246;
  unint64_t v247;
  uint64_t v248;
  unint64_t v249;
  unint64_t v250;
  unint64_t v251;
  unint64_t v252;
  unsigned int v253;
  unint64_t v254;
  unint64_t v255;
  unint64_t v256;
  unint64_t v257;
  _QWORD *v258;
  uint64_t v259;
  _QWORD *v260;
  _QWORD *v261;
  _QWORD *v262;
  unint64_t v263;
  unsigned int v264;
  unint64_t v265;
  unint64_t v266;
  uint64_t v267;
  _QWORD *v268;
  _QWORD *v269;
  uint64_t v270;
  unint64_t v271;
  uint64_t *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t *v275;
  uint64_t *v276;
  _QWORD **v277;
  uint64_t *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t *v281;
  uint64_t v282;
  uint64_t *v283;
  unint64_t v284;
  uint64_t *v285;
  unint64_t v286;
  uint64_t v287;
  uint64_t *v288;
  uint64_t *v289;
  uint64_t *v290;
  unint64_t v291;
  unsigned int v292;
  uint64_t *v293;
  uint64_t *v294;
  unint64_t v295;
  unint64_t v296;
  uint64_t *v297;
  uint64_t v298;
  uint64_t *v299;
  uint64_t *v300;
  uint64_t *v301;
  unint64_t v302;
  unsigned int v303;
  uint64_t *v304;
  unint64_t v305;
  unint64_t v306;
  uint64_t v307;
  uint64_t *v308;
  uint64_t *v309;
  uint64_t *v310;
  uint64_t *v311;
  unint64_t v312;
  uint64_t *v313;
  int64_t v314;
  uint64_t v316;
  uint64_t *v317;
  uint64_t *v319;

  v7 = (uint64_t *)result;
LABEL_2:
  v311 = a2 - 2;
  v313 = a2 - 1;
  v310 = a2 - 3;
  v8 = a3;
  v317 = a2;
  while (2)
  {
    v9 = v7;
    v10 = (char *)a2 - (char *)v7;
    v11 = a2 - v7;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v167 = *(a2 - 1);
        v168 = *v7;
        result = sub_20F625764(*a3, *(uint64_t **)(v167 + 496), *(_QWORD *)(v167 + 504), *(uint64_t **)(*v7 + 496), *(_QWORD *)(*v7 + 504));
        if ((_DWORD)result)
        {
          *v7 = v167;
          *(a2 - 1) = v168;
        }
        return result;
      case 3:
        return sub_20FC33704(v7, v7 + 1, v313, a3);
      case 4:
        v169 = v7 + 1;
        v170 = v7 + 2;
        sub_20FC33704(v7, v7 + 1, v7 + 2, a3);
        v171 = *(a2 - 1);
        v172 = v7[2];
        result = sub_20F625764(*a3, *(uint64_t **)(v171 + 496), *(_QWORD *)(v171 + 504), *(uint64_t **)(v172 + 496), *(_QWORD *)(v172 + 504));
        if ((_DWORD)result)
        {
          *v170 = v171;
          *(a2 - 1) = v172;
          v173 = *v170;
          v174 = *v169;
          result = sub_20F625764(*a3, *(uint64_t **)(*v170 + 496), *(_QWORD *)(*v170 + 504), *(uint64_t **)(*v169 + 496), *(_QWORD *)(*v169 + 504));
          if ((_DWORD)result)
          {
            v7[1] = v173;
            v7[2] = v174;
            v175 = *v7;
            result = sub_20F625764(*a3, *(uint64_t **)(v173 + 496), *(_QWORD *)(v173 + 504), *(uint64_t **)(*v7 + 496), *(_QWORD *)(*v7 + 504));
            if ((_DWORD)result)
            {
              *v7 = v173;
              v7[1] = v175;
            }
          }
        }
        return result;
      case 5:
        return sub_20FC33A34(v7, v7 + 1, v7 + 2, v7 + 3, v313, a3);
      default:
        if (v10 > 191)
        {
          v319 = v7;
          if (!a4)
          {
            if (v7 != a2)
            {
              v312 = (char *)a2 - (char *)v7;
              v213 = (unint64_t)(v11 - 2) >> 1;
              v214 = v213;
              v215 = a3;
              do
              {
                v216 = v214;
                if (v213 >= v214)
                {
                  v314 = v214;
                  v217 = (2 * v214) | 1;
                  v218 = v319;
                  v219 = &v319[v217];
                  v220 = 2 * v214 + 2;
                  v221 = *v215;
                  if (v220 >= v11)
                  {
                    v222 = *v219;
                  }
                  else
                  {
                    v222 = *v219;
                    v223 = v219[1];
                    v224 = sub_20F625764(*v215, *(uint64_t **)(*v219 + 496), *(_QWORD *)(*v219 + 504), *(uint64_t **)(v223 + 496), *(_QWORD *)(v223 + 504));
                    if (v224)
                    {
                      v222 = v223;
                      ++v219;
                    }
                    v218 = v319;
                    if (v224)
                      v217 = v220;
                  }
                  v216 = v314;
                  v225 = &v218[v314];
                  v226 = *v225;
                  result = sub_20F625764(v221, *(uint64_t **)(v222 + 496), *(_QWORD *)(v222 + 504), *(uint64_t **)(*v225 + 496), *(_QWORD *)(*v225 + 504));
                  if ((result & 1) == 0)
                  {
                    v316 = v226;
                    while (1)
                    {
                      v231 = v219;
                      *v225 = v222;
                      if (v213 < v217)
                        break;
                      v232 = (2 * v217) | 1;
                      v219 = &v319[v232];
                      v217 = 2 * v217 + 2;
                      v233 = *v215;
                      if (v217 < v11)
                      {
                        v222 = *v219;
                        v227 = v11;
                        v228 = v213;
                        v229 = v219[1];
                        v230 = sub_20F625764(*v215, *(uint64_t **)(*v219 + 496), *(_QWORD *)(*v219 + 504), *(uint64_t **)(v229 + 496), *(_QWORD *)(v229 + 504));
                        if (v230)
                          v222 = v229;
                        v213 = v228;
                        v11 = v227;
                        v226 = v316;
                        if (v230)
                          ++v219;
                        v215 = a3;
                        if (!v230)
                          v217 = v232;
                        result = sub_20F625764(v233, *(uint64_t **)(v222 + 496), *(_QWORD *)(v222 + 504), *(uint64_t **)(v316 + 496), *(_QWORD *)(v316 + 504));
                        v225 = v231;
                        if ((_DWORD)result)
                          break;
                      }
                      else
                      {
                        v222 = *v219;
                        v217 = v232;
                        result = sub_20F625764(*v215, *(uint64_t **)(*v219 + 496), *(_QWORD *)(*v219 + 504), *(uint64_t **)(v226 + 496), *(_QWORD *)(v226 + 504));
                        v225 = v231;
                        if ((_DWORD)result)
                          break;
                      }
                    }
                    *v231 = v226;
                    v216 = v314;
                  }
                }
                v214 = v216 - 1;
              }
              while (v216);
              v234 = v312 >> 3;
              v235 = v317;
              do
              {
                v237 = 0;
                v238 = *v319;
                v239 = v319;
                do
                {
                  v241 = &v239[v237 + 1];
                  v242 = (2 * v237) | 1;
                  v243 = 2 * v237 + 2;
                  if (v243 < v234)
                  {
                    v244 = v241[1];
                    v245 = *(uint64_t **)(*v241 + 496);
                    v246 = (uint64_t)(*(_QWORD *)(*v241 + 504) - (_QWORD)v245) >> 6;
                    result = *(_QWORD *)(v244 + 496);
                    v247 = (uint64_t)(*(_QWORD *)(v244 + 504) - result) >> 6;
                    if (v246 == v247)
                    {
                      v248 = (**a3)[1];
                      v251 = *(_QWORD *)(v248 + 56);
                      v249 = v248 + 56;
                      v250 = v251;
                      if (!v251)
                        goto LABEL_455;
                      v252 = *v245;
                      v253 = *((_DWORD *)v245 + 2);
                      v254 = v249;
                      v255 = v250;
                      do
                      {
                        v256 = *(_QWORD *)(v255 + 32);
                        if (v256 < v252)
                        {
                          v255 += 8;
                        }
                        else if (v256 == v252)
                        {
                          if (*(_DWORD *)(v255 + 40) < v253)
                            v255 += 8;
                          else
                            v254 = v255;
                        }
                        else
                        {
                          v254 = v255;
                        }
                        v255 = *(_QWORD *)v255;
                      }
                      while (v255);
                      if (v254 == v249
                        || (v257 = *(_QWORD *)(v254 + 32), v252 < v257)
                        || v252 == v257 && *(_DWORD *)(v254 + 40) > v253)
                      {
LABEL_455:
                        v254 = v249;
                      }
                      v258 = (_QWORD *)*(*a3)[1];
                      if (v258 == (_QWORD *)v254)
                      {
                        v259 = 0;
                      }
                      else
                      {
                        v259 = 0;
                        v260 = (_QWORD *)*(*a3)[1];
                        do
                        {
                          v261 = (_QWORD *)v260[1];
                          if (v261)
                          {
                            do
                            {
                              v262 = v261;
                              v261 = (_QWORD *)*v261;
                            }
                            while (v261);
                          }
                          else
                          {
                            do
                            {
                              v262 = (_QWORD *)v260[2];
                              v177 = *v262 == (_QWORD)v260;
                              v260 = v262;
                            }
                            while (!v177);
                          }
                          ++v259;
                          v260 = v262;
                        }
                        while (v262 != (_QWORD *)v254);
                      }
                      if (!v250)
                        goto LABEL_480;
                      v263 = *(_QWORD *)result;
                      v264 = *(_DWORD *)(result + 8);
                      result = v249;
                      do
                      {
                        v265 = *(_QWORD *)(v250 + 32);
                        if (v265 < v263)
                        {
                          v250 += 8;
                        }
                        else if (v265 == v263)
                        {
                          if (*(_DWORD *)(v250 + 40) < v264)
                            v250 += 8;
                          else
                            result = v250;
                        }
                        else
                        {
                          result = v250;
                        }
                        v250 = *(_QWORD *)v250;
                      }
                      while (v250);
                      if (result == v249
                        || (v266 = *(_QWORD *)(result + 32), v263 < v266)
                        || v263 == v266 && *(_DWORD *)(result + 40) > v264)
                      {
LABEL_480:
                        result = v249;
                      }
                      if (v258 == (_QWORD *)result)
                      {
                        v267 = 0;
                      }
                      else
                      {
                        v267 = 0;
                        do
                        {
                          v268 = (_QWORD *)v258[1];
                          if (v268)
                          {
                            do
                            {
                              v269 = v268;
                              v268 = (_QWORD *)*v268;
                            }
                            while (v268);
                          }
                          else
                          {
                            do
                            {
                              v269 = (_QWORD *)v258[2];
                              v177 = *v269 == (_QWORD)v258;
                              v258 = v269;
                            }
                            while (!v177);
                          }
                          ++v267;
                          v258 = v269;
                        }
                        while (v269 != (_QWORD *)result);
                      }
                      v240 = v259 > v267;
                    }
                    else
                    {
                      v240 = v246 > v247;
                    }
                    if (v240)
                    {
                      ++v241;
                      v242 = v243;
                    }
                  }
                  *v239 = *v241;
                  v239 = v241;
                  v237 = v242;
                }
                while (v242 <= (uint64_t)((unint64_t)(v234 - 2) >> 1));
                if (v241 == --v235)
                {
                  *v241 = v238;
                }
                else
                {
                  *v241 = *v235;
                  *v235 = v238;
                  v270 = (char *)v241 - (char *)v319 + 8;
                  if (v270 >= 9)
                  {
                    v271 = (((unint64_t)v270 >> 3) - 2) >> 1;
                    v272 = &v319[v271];
                    v273 = *v272;
                    v274 = *v241;
                    result = sub_20F625764(*a3, *(uint64_t **)(*v272 + 496), *(_QWORD *)(*v272 + 504), *(uint64_t **)(*v241 + 496), *(_QWORD *)(*v241 + 504));
                    if ((_DWORD)result)
                    {
                      v275 = v235;
                      do
                      {
                        v276 = v272;
                        *v241 = v273;
                        if (!v271)
                          break;
                        v271 = (v271 - 1) >> 1;
                        v272 = &v319[v271];
                        v273 = *v272;
                        result = sub_20F625764(*a3, *(uint64_t **)(*v272 + 496), *(_QWORD *)(*v272 + 504), *(uint64_t **)(v274 + 496), *(_QWORD *)(v274 + 504));
                        v241 = v276;
                      }
                      while ((result & 1) != 0);
                      *v276 = v274;
                      v235 = v275;
                    }
                  }
                }
              }
              while (v234-- > 2);
            }
            return result;
          }
          v12 = (unint64_t)v11 >> 1;
          v13 = &v7[(unint64_t)v11 >> 1];
          if ((unint64_t)v10 < 0x401)
          {
            sub_20FC33704(v13, v7, v313, v8);
            --a4;
            v16 = *v7;
            v17 = *v8;
            if ((a5 & 1) != 0)
            {
LABEL_11:
              v20 = a4;
              v19 = *(_QWORD *)(v16 + 496);
              v18 = *(_QWORD *)(v16 + 504);
              goto LABEL_12;
            }
          }
          else
          {
            sub_20FC33704(v7, v13, v313, v8);
            v14 = v12;
            sub_20FC33704(v7 + 1, &v7[v14 - 1], v311, a3);
            sub_20FC33704(v7 + 2, &v7[v14 + 1], v310, a3);
            sub_20FC33704(&v7[v14 - 1], v13, &v7[v14 + 1], a3);
            v15 = *v7;
            *v7 = v7[v14];
            v7[v14] = v15;
            v8 = a3;
            --a4;
            v16 = *v7;
            v17 = *a3;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          v19 = *(_QWORD *)(v16 + 496);
          v18 = *(_QWORD *)(v16 + 504);
          if (!sub_20F625764(v17, *(uint64_t **)(*(v7 - 1) + 496), *(_QWORD *)(*(v7 - 1) + 504), (uint64_t *)v19, v18))
          {
            result = sub_20F625764(v17, (uint64_t *)v19, v18, *(uint64_t **)(*v313 + 496), *(_QWORD *)(*v313 + 504));
            if ((result & 1) != 0)
            {
              do
              {
                v112 = v7[1];
                ++v7;
                result = sub_20F625764(v17, (uint64_t *)v19, v18, *(uint64_t **)(v112 + 496), *(_QWORD *)(v112 + 504));
              }
              while ((result & 1) == 0);
            }
            else
            {
              v113 = v7 + 1;
              do
              {
                v7 = v113;
                if (v113 >= v317)
                  break;
                ++v113;
                result = sub_20F625764(v17, (uint64_t *)v19, v18, *(uint64_t **)(*v7 + 496), *(_QWORD *)(*v7 + 504));
              }
              while (!(_DWORD)result);
            }
            v114 = v317;
            if (v7 < v317)
            {
              v114 = v317;
              do
              {
                v115 = *--v114;
                result = sub_20F625764(v17, (uint64_t *)v19, v18, *(uint64_t **)(v115 + 496), *(_QWORD *)(v115 + 504));
              }
              while ((result & 1) != 0);
            }
            if (v7 >= v114)
            {
              a2 = v317;
            }
            else
            {
              v116 = *v7;
              v117 = *v114;
              a2 = v317;
              do
              {
                *v7 = v117;
                *v114 = v116;
                v118 = *(_QWORD *)(v16 + 496);
                v119 = (*(_QWORD *)(v16 + 504) - v118) >> 6;
                v120 = *v8;
                do
                {
                  while (1)
                  {
                    v121 = v7[1];
                    ++v7;
                    v116 = v121;
                    v122 = *(_QWORD *)(v121 + 496);
                    v123 = (*(_QWORD *)(v121 + 504) - v122) >> 6;
                    if (v119 == v123)
                      break;
                    if (v119 > v123)
                      goto LABEL_265;
                  }
                  v124 = (*v120)[1];
                  v127 = *(_QWORD *)(v124 + 56);
                  v125 = v124 + 56;
                  v126 = v127;
                  if (!v127)
                    goto LABEL_226;
                  v128 = *(_QWORD *)v118;
                  v129 = *(_DWORD *)(v118 + 8);
                  v130 = v125;
                  result = v126;
                  do
                  {
                    v131 = *(_QWORD *)(result + 32);
                    if (v131 < v128)
                    {
                      result += 8;
                    }
                    else if (v131 == v128)
                    {
                      if (*(_DWORD *)(result + 40) < v129)
                        result += 8;
                      else
                        v130 = result;
                    }
                    else
                    {
                      v130 = result;
                    }
                    result = *(_QWORD *)result;
                  }
                  while (result);
                  if (v130 == v125
                    || (result = *(_QWORD *)(v130 + 32), v128 < result)
                    || v128 == result && *(_DWORD *)(v130 + 40) > v129)
                  {
LABEL_226:
                    v130 = v125;
                  }
                  v132 = (_QWORD *)*v120[1];
                  if (v132 == (_QWORD *)v130)
                  {
                    v133 = 0;
                  }
                  else
                  {
                    v133 = 0;
                    result = *v120[1];
                    do
                    {
                      v134 = *(_QWORD **)(result + 8);
                      if (v134)
                      {
                        do
                        {
                          v135 = v134;
                          v134 = (_QWORD *)*v134;
                        }
                        while (v134);
                      }
                      else
                      {
                        do
                        {
                          v135 = *(_QWORD **)(result + 16);
                          v177 = *v135 == result;
                          result = (unint64_t)v135;
                        }
                        while (!v177);
                      }
                      ++v133;
                      result = (unint64_t)v135;
                    }
                    while (v135 != (_QWORD *)v130);
                  }
                  if (!v126)
                    goto LABEL_251;
                  result = *(_QWORD *)v122;
                  v136 = *(_DWORD *)(v122 + 8);
                  v137 = v125;
                  do
                  {
                    v138 = *(_QWORD *)(v126 + 32);
                    if (v138 < result)
                    {
                      v126 += 8;
                    }
                    else if (v138 == result)
                    {
                      if (*(_DWORD *)(v126 + 40) < v136)
                        v126 += 8;
                      else
                        v137 = v126;
                    }
                    else
                    {
                      v137 = v126;
                    }
                    v126 = *(_QWORD *)v126;
                  }
                  while (v126);
                  if (v137 == v125
                    || (v139 = *(_QWORD *)(v137 + 32), result < v139)
                    || result == v139 && *(_DWORD *)(v137 + 40) > v136)
                  {
LABEL_251:
                    v137 = v125;
                  }
                  if (v132 == (_QWORD *)v137)
                  {
                    v140 = 0;
                  }
                  else
                  {
                    v140 = 0;
                    do
                    {
                      v141 = (_QWORD *)v132[1];
                      if (v141)
                      {
                        do
                        {
                          v142 = v141;
                          v141 = (_QWORD *)*v141;
                        }
                        while (v141);
                      }
                      else
                      {
                        do
                        {
                          v142 = (_QWORD *)v132[2];
                          v177 = *v142 == (_QWORD)v132;
                          v132 = v142;
                        }
                        while (!v177);
                      }
                      ++v140;
                      v132 = v142;
                    }
                    while (v142 != (_QWORD *)v137);
                  }
                }
                while (v133 <= v140);
                do
                {
LABEL_265:
                  while (1)
                  {
                    v143 = *--v114;
                    v117 = v143;
                    v144 = *(unint64_t **)(v143 + 496);
                    v145 = (uint64_t)(*(_QWORD *)(v143 + 504) - (_QWORD)v144) >> 6;
                    if (v119 == v145)
                      break;
                    if (v119 <= v145)
                      goto LABEL_208;
                  }
                  v146 = (*v120)[1];
                  v149 = *(_QWORD *)(v146 + 56);
                  v147 = v146 + 56;
                  v148 = v149;
                  if (!v149)
                    goto LABEL_280;
                  v150 = *(_QWORD *)v118;
                  v151 = *(_DWORD *)(v118 + 8);
                  result = v147;
                  v152 = v148;
                  do
                  {
                    v153 = *(_QWORD *)(v152 + 32);
                    if (v153 < v150)
                    {
                      v152 += 8;
                    }
                    else if (v153 == v150)
                    {
                      if (*(_DWORD *)(v152 + 40) < v151)
                        v152 += 8;
                      else
                        result = v152;
                    }
                    else
                    {
                      result = v152;
                    }
                    v152 = *(_QWORD *)v152;
                  }
                  while (v152);
                  if (result == v147
                    || (v154 = *(_QWORD *)(result + 32), v150 < v154)
                    || v150 == v154 && *(_DWORD *)(result + 40) > v151)
                  {
LABEL_280:
                    result = v147;
                  }
                  v155 = (unint64_t *)*v120[1];
                  if (v155 == (unint64_t *)result)
                  {
                    v156 = 0;
                  }
                  else
                  {
                    v156 = 0;
                    v157 = (_QWORD *)*v120[1];
                    do
                    {
                      v158 = (_QWORD *)v157[1];
                      if (v158)
                      {
                        do
                        {
                          v159 = v158;
                          v158 = (_QWORD *)*v158;
                        }
                        while (v158);
                      }
                      else
                      {
                        do
                        {
                          v159 = (_QWORD *)v157[2];
                          v177 = *v159 == (_QWORD)v157;
                          v157 = v159;
                        }
                        while (!v177);
                      }
                      ++v156;
                      v157 = v159;
                    }
                    while (v159 != (_QWORD *)result);
                  }
                  if (!v148)
                    goto LABEL_305;
                  v160 = *v144;
                  result = *((unsigned int *)v144 + 2);
                  v161 = v147;
                  do
                  {
                    v162 = *(_QWORD *)(v148 + 32);
                    if (v162 < v160)
                    {
                      v148 += 8;
                    }
                    else if (v162 == v160)
                    {
                      if (*(_DWORD *)(v148 + 40) < result)
                        v148 += 8;
                      else
                        v161 = v148;
                    }
                    else
                    {
                      v161 = v148;
                    }
                    v148 = *(_QWORD *)v148;
                  }
                  while (v148);
                  if (v161 == v147
                    || (v163 = *(_QWORD *)(v161 + 32), v160 < v163)
                    || v160 == v163 && *(_DWORD *)(v161 + 40) > result)
                  {
LABEL_305:
                    v161 = v147;
                  }
                  if (v155 == (unint64_t *)v161)
                  {
                    v164 = 0;
                  }
                  else
                  {
                    v164 = 0;
                    do
                    {
                      result = v155[1];
                      if (result)
                      {
                        do
                        {
                          v165 = (unint64_t *)result;
                          result = *(_QWORD *)result;
                        }
                        while (result);
                      }
                      else
                      {
                        do
                        {
                          v165 = (unint64_t *)v155[2];
                          result = *v165;
                          v177 = *v165 == (_QWORD)v155;
                          v155 = v165;
                        }
                        while (!v177);
                      }
                      ++v164;
                      v155 = v165;
                    }
                    while (v165 != (unint64_t *)v161);
                  }
                }
                while (v156 > v164);
LABEL_208:
                ;
              }
              while (v7 < v114);
            }
            v166 = v7 - 1;
            if (v7 - 1 != v9)
              *v9 = *v166;
            a5 = 0;
            *v166 = v16;
            continue;
          }
          v20 = a4;
LABEL_12:
          v21 = (v18 - v19) >> 6;
          do
          {
            while (1)
            {
              v22 = v7;
              v24 = v7[1];
              ++v7;
              v23 = v24;
              v25 = *(uint64_t **)(v24 + 496);
              v26 = (uint64_t)(*(_QWORD *)(v24 + 504) - (_QWORD)v25) >> 6;
              if (v26 == v21)
                break;
              if (v26 <= v21)
                goto LABEL_69;
            }
            v27 = (*v17)[1];
            v30 = *(uint64_t **)(v27 + 56);
            v28 = (uint64_t *)(v27 + 56);
            v29 = v30;
            if (!v30)
              goto LABEL_27;
            v31 = *v25;
            v32 = *((_DWORD *)v25 + 2);
            v33 = v28;
            v34 = v29;
            do
            {
              v35 = v34[4];
              if (v35 < v31)
              {
                ++v34;
              }
              else if (v35 == v31)
              {
                if (*((_DWORD *)v34 + 10) < v32)
                  ++v34;
                else
                  v33 = v34;
              }
              else
              {
                v33 = v34;
              }
              v34 = (uint64_t *)*v34;
            }
            while (v34);
            if (v33 == v28 || (v36 = v33[4], v31 < v36) || v31 == v36 && *((_DWORD *)v33 + 10) > v32)
LABEL_27:
              v33 = v28;
            v37 = (uint64_t *)*v17[1];
            if (v37 == v33)
            {
              v38 = 0;
            }
            else
            {
              v38 = 0;
              v39 = (uint64_t *)*v17[1];
              do
              {
                v40 = (uint64_t *)v39[1];
                if (v40)
                {
                  do
                  {
                    v41 = v40;
                    v40 = (uint64_t *)*v40;
                  }
                  while (v40);
                }
                else
                {
                  do
                  {
                    v41 = (uint64_t *)v39[2];
                    v177 = *v41 == (_QWORD)v39;
                    v39 = v41;
                  }
                  while (!v177);
                }
                ++v38;
                v39 = v41;
              }
              while (v41 != v33);
            }
            if (!v29)
              goto LABEL_50;
            v42 = *(_QWORD *)v19;
            v43 = *(_DWORD *)(v19 + 8);
            v44 = v28;
            do
            {
              v45 = v29[4];
              if (v45 < v42)
              {
                ++v29;
              }
              else if (v45 == v42)
              {
                if (*((_DWORD *)v29 + 10) < v43)
                  ++v29;
                else
                  v44 = v29;
              }
              else
              {
                v44 = v29;
              }
              v29 = (uint64_t *)*v29;
            }
            while (v29);
            if (v44 == v28 || (v46 = v44[4], v42 < v46) || v42 == v46 && *((_DWORD *)v44 + 10) > v43)
LABEL_50:
              v44 = v28;
            if (v37 == v44)
            {
              v47 = 0;
            }
            else
            {
              v47 = 0;
              do
              {
                v48 = (uint64_t *)v37[1];
                if (v48)
                {
                  do
                  {
                    v49 = v48;
                    v48 = (uint64_t *)*v48;
                  }
                  while (v48);
                }
                else
                {
                  do
                  {
                    v49 = (uint64_t *)v37[2];
                    v177 = *v49 == (_QWORD)v37;
                    v37 = v49;
                  }
                  while (!v177);
                }
                ++v47;
                v37 = v49;
              }
              while (v49 != v44);
            }
          }
          while (v38 > v47);
LABEL_69:
          v50 = v317;
          if (v22 == v319)
          {
            v50 = v317;
            do
            {
              if (v7 >= v50)
                break;
              v52 = *--v50;
            }
            while (!sub_20F625764(v17, *(uint64_t **)(v52 + 496), *(_QWORD *)(v52 + 504), (uint64_t *)v19, v18));
          }
          else
          {
            do
              v51 = *--v50;
            while (!sub_20F625764(v17, *(uint64_t **)(v51 + 496), *(_QWORD *)(v51 + 504), (uint64_t *)v19, v18));
          }
          a2 = v317;
          if (v7 < v50)
          {
            v53 = *v50;
            v54 = v7;
            v55 = v50;
            do
            {
              *v54 = v53;
              *v55 = v23;
              v56 = *(uint64_t **)(v16 + 496);
              v57 = (uint64_t)(*(_QWORD *)(v16 + 504) - (_QWORD)v56) >> 6;
              v58 = *v8;
              do
              {
                while (1)
                {
                  v22 = v54;
                  v59 = v54[1];
                  ++v54;
                  v23 = v59;
                  v60 = *(uint64_t **)(v59 + 496);
                  v61 = (uint64_t)(*(_QWORD *)(v59 + 504) - (_QWORD)v60) >> 6;
                  if (v61 == v57)
                    break;
                  if (v61 <= v57)
                    goto LABEL_136;
                }
                v62 = (*v58)[1];
                v65 = *(uint64_t **)(v62 + 56);
                v63 = (uint64_t *)(v62 + 56);
                v64 = v65;
                if (!v65)
                  goto LABEL_93;
                v66 = *v60;
                v67 = *((_DWORD *)v60 + 2);
                v68 = v63;
                v69 = v64;
                do
                {
                  v70 = v69[4];
                  if (v70 < v66)
                  {
                    ++v69;
                  }
                  else if (v70 == v66)
                  {
                    if (*((_DWORD *)v69 + 10) < v67)
                      ++v69;
                    else
                      v68 = v69;
                  }
                  else
                  {
                    v68 = v69;
                  }
                  v69 = (uint64_t *)*v69;
                }
                while (v69);
                if (v68 == v63 || (v71 = v68[4], v66 < v71) || v66 == v71 && *((_DWORD *)v68 + 10) > v67)
LABEL_93:
                  v68 = v63;
                v72 = (uint64_t *)*v58[1];
                if (v72 == v68)
                {
                  v73 = 0;
                }
                else
                {
                  v73 = 0;
                  v74 = (uint64_t *)*v58[1];
                  do
                  {
                    v75 = (uint64_t *)v74[1];
                    if (v75)
                    {
                      do
                      {
                        v76 = v75;
                        v75 = (uint64_t *)*v75;
                      }
                      while (v75);
                    }
                    else
                    {
                      do
                      {
                        v76 = (uint64_t *)v74[2];
                        v177 = *v76 == (_QWORD)v74;
                        v74 = v76;
                      }
                      while (!v177);
                    }
                    ++v73;
                    v74 = v76;
                  }
                  while (v76 != v68);
                }
                if (!v64)
                  goto LABEL_116;
                v77 = *v56;
                v78 = *((_DWORD *)v56 + 2);
                v79 = v63;
                do
                {
                  v80 = v64[4];
                  if (v80 < v77)
                  {
                    ++v64;
                  }
                  else if (v80 == v77)
                  {
                    if (*((_DWORD *)v64 + 10) < v78)
                      ++v64;
                    else
                      v79 = v64;
                  }
                  else
                  {
                    v79 = v64;
                  }
                  v64 = (uint64_t *)*v64;
                }
                while (v64);
                if (v79 == v63 || (v81 = v79[4], v77 < v81) || v77 == v81 && *((_DWORD *)v79 + 10) > v78)
LABEL_116:
                  v79 = v63;
                if (v72 == v79)
                {
                  v82 = 0;
                }
                else
                {
                  v82 = 0;
                  do
                  {
                    v83 = (uint64_t *)v72[1];
                    if (v83)
                    {
                      do
                      {
                        v84 = v83;
                        v83 = (uint64_t *)*v83;
                      }
                      while (v83);
                    }
                    else
                    {
                      do
                      {
                        v84 = (uint64_t *)v72[2];
                        v177 = *v84 == (_QWORD)v72;
                        v72 = v84;
                      }
                      while (!v177);
                    }
                    ++v82;
                    v72 = v84;
                  }
                  while (v84 != v79);
                }
              }
              while (v73 > v82);
              do
              {
LABEL_136:
                while (1)
                {
                  v85 = *--v55;
                  v53 = v85;
                  v86 = *(uint64_t **)(v85 + 496);
                  v87 = (uint64_t)(*(_QWORD *)(v85 + 504) - (_QWORD)v86) >> 6;
                  if (v87 == v57)
                    break;
                  if (v87 > v57)
                    goto LABEL_77;
                }
                v88 = (*v58)[1];
                v91 = *(uint64_t **)(v88 + 56);
                v89 = (uint64_t *)(v88 + 56);
                v90 = v91;
                if (!v91)
                  goto LABEL_149;
                v92 = *v86;
                v93 = *((_DWORD *)v86 + 2);
                v94 = v89;
                v95 = v90;
                do
                {
                  v96 = v95[4];
                  if (v96 < v92)
                  {
                    ++v95;
                  }
                  else if (v96 == v92)
                  {
                    if (*((_DWORD *)v95 + 10) < v93)
                      ++v95;
                    else
                      v94 = v95;
                  }
                  else
                  {
                    v94 = v95;
                  }
                  v95 = (uint64_t *)*v95;
                }
                while (v95);
                if (v94 == v89 || (v97 = v94[4], v92 < v97) || v92 == v97 && *((_DWORD *)v94 + 10) > v93)
LABEL_149:
                  v94 = v89;
                v98 = (uint64_t *)*v58[1];
                if (v98 == v94)
                {
                  v99 = 0;
                }
                else
                {
                  v99 = 0;
                  v100 = (uint64_t *)*v58[1];
                  do
                  {
                    v101 = (uint64_t *)v100[1];
                    if (v101)
                    {
                      do
                      {
                        v102 = v101;
                        v101 = (uint64_t *)*v101;
                      }
                      while (v101);
                    }
                    else
                    {
                      do
                      {
                        v102 = (uint64_t *)v100[2];
                        v177 = *v102 == (_QWORD)v100;
                        v100 = v102;
                      }
                      while (!v177);
                    }
                    ++v99;
                    v100 = v102;
                  }
                  while (v102 != v94);
                }
                if (!v90)
                  goto LABEL_172;
                v103 = *v56;
                v104 = *((_DWORD *)v56 + 2);
                v105 = v89;
                do
                {
                  v106 = v90[4];
                  if (v106 < v103)
                  {
                    ++v90;
                  }
                  else if (v106 == v103)
                  {
                    if (*((_DWORD *)v90 + 10) < v104)
                      ++v90;
                    else
                      v105 = v90;
                  }
                  else
                  {
                    v105 = v90;
                  }
                  v90 = (uint64_t *)*v90;
                }
                while (v90);
                if (v105 == v89 || (v107 = v105[4], v103 < v107) || v103 == v107 && *((_DWORD *)v105 + 10) > v104)
LABEL_172:
                  v105 = v89;
                if (v98 == v105)
                {
                  v108 = 0;
                }
                else
                {
                  v108 = 0;
                  do
                  {
                    v109 = (uint64_t *)v98[1];
                    if (v109)
                    {
                      do
                      {
                        v110 = v109;
                        v109 = (uint64_t *)*v109;
                      }
                      while (v109);
                    }
                    else
                    {
                      do
                      {
                        v110 = (uint64_t *)v98[2];
                        v177 = *v110 == (_QWORD)v98;
                        v98 = v110;
                      }
                      while (!v177);
                    }
                    ++v108;
                    v98 = v110;
                  }
                  while (v110 != v105);
                }
              }
              while (v99 <= v108);
LABEL_77:
              ;
            }
            while (v54 < v55);
          }
          if (v22 != v319)
            *v319 = *v22;
          *v22 = v16;
          a4 = v20;
          if (v7 < v50)
            goto LABEL_196;
          v111 = sub_20FC5C508(v319, v22, v8);
          v7 = v22 + 1;
          result = sub_20FC5C508(v22 + 1, v317, v8);
          if (!(_DWORD)result)
          {
            if (v111)
              continue;
LABEL_196:
            result = sub_20FC5ACBC(v319, v22, v8, v20, a5 & 1);
            a5 = 0;
            v7 = v22 + 1;
            continue;
          }
          a2 = v22;
          v7 = v319;
          if (v111)
            return result;
          goto LABEL_2;
        }
        v176 = v7 + 1;
        v177 = v7 == a2 || v176 == a2;
        v178 = v177;
        if ((a5 & 1) != 0)
        {
          if ((v178 & 1) == 0)
          {
            v179 = *a3;
            v180 = v7;
            do
            {
              v182 = v176;
              v183 = *v180;
              v184 = v180[1];
              result = sub_20F625764(v179, *(uint64_t **)(v184 + 496), *(_QWORD *)(v184 + 504), *(uint64_t **)(*v180 + 496), *(_QWORD *)(*v180 + 504));
              if ((_DWORD)result)
              {
                v180[1] = v183;
                v181 = v7;
                if (v180 != v7)
                {
                  v185 = v180;
                  do
                  {
                    v187 = *--v185;
                    v186 = v187;
                    v188 = *(_QWORD *)(v184 + 496);
                    v189 = (*(_QWORD *)(v184 + 504) - v188) >> 6;
                    v190 = *(uint64_t **)(v187 + 496);
                    v191 = (uint64_t)(*(_QWORD *)(v187 + 504) - (_QWORD)v190) >> 6;
                    if (v189 == v191)
                    {
                      v192 = (**a3)[1];
                      v195 = *(uint64_t **)(v192 + 56);
                      v193 = (unint64_t *)(v192 + 56);
                      v194 = v195;
                      if (!v195)
                        goto LABEL_363;
                      v196 = *(_QWORD *)v188;
                      v197 = *(_DWORD *)(v188 + 8);
                      v198 = v193;
                      v199 = v194;
                      do
                      {
                        result = v199[4];
                        if (result < v196)
                        {
                          ++v199;
                        }
                        else if (result == v196)
                        {
                          result = *((_DWORD *)v199 + 10) < v197;
                          if (*((_DWORD *)v199 + 10) < v197)
                            ++v199;
                          else
                            v198 = (unint64_t *)v199;
                        }
                        else
                        {
                          v198 = (unint64_t *)v199;
                        }
                        v199 = (uint64_t *)*v199;
                      }
                      while (v199);
                      if (v198 == v193
                        || (v200 = v198[4], v196 < v200)
                        || v196 == v200 && *((_DWORD *)v198 + 10) > v197)
                      {
LABEL_363:
                        v198 = v193;
                      }
                      v201 = (unint64_t *)*(*a3)[1];
                      if (v201 == v198)
                      {
                        v202 = 0;
                      }
                      else
                      {
                        v202 = 0;
                        v203 = (unint64_t *)*(*a3)[1];
                        do
                        {
                          result = v203[1];
                          if (result)
                          {
                            do
                            {
                              v204 = (unint64_t *)result;
                              result = *(_QWORD *)result;
                            }
                            while (result);
                          }
                          else
                          {
                            do
                            {
                              v204 = (unint64_t *)v203[2];
                              result = *v204;
                              v177 = *v204 == (_QWORD)v203;
                              v203 = v204;
                            }
                            while (!v177);
                          }
                          ++v202;
                          v203 = v204;
                        }
                        while (v204 != v198);
                      }
                      if (!v194)
                        goto LABEL_386;
                      v205 = *v190;
                      v206 = *((_DWORD *)v190 + 2);
                      v207 = v193;
                      do
                      {
                        v208 = v194[4];
                        if (v208 < v205)
                        {
                          ++v194;
                        }
                        else if (v208 == v205)
                        {
                          result = (unint64_t)(v194 + 1);
                          if (*((_DWORD *)v194 + 10) < v206)
                            ++v194;
                          else
                            v207 = (unint64_t *)v194;
                        }
                        else
                        {
                          v207 = (unint64_t *)v194;
                        }
                        v194 = (uint64_t *)*v194;
                      }
                      while (v194);
                      if (v207 == v193
                        || (v209 = v207[4], v205 < v209)
                        || v205 == v209 && *((_DWORD *)v207 + 10) > v206)
                      {
LABEL_386:
                        v207 = v193;
                      }
                      if (v201 == v207)
                      {
                        v210 = 0;
                      }
                      else
                      {
                        v210 = 0;
                        do
                        {
                          v211 = (unint64_t *)v201[1];
                          if (v211)
                          {
                            do
                            {
                              v212 = v211;
                              v211 = (unint64_t *)*v211;
                            }
                            while (v211);
                          }
                          else
                          {
                            do
                            {
                              v212 = (unint64_t *)v201[2];
                              v177 = *v212 == (_QWORD)v201;
                              v201 = v212;
                            }
                            while (!v177);
                          }
                          ++v210;
                          v201 = v212;
                        }
                        while (v212 != v207);
                      }
                      if (v202 <= v210)
                      {
LABEL_342:
                        v181 = v180;
                        goto LABEL_343;
                      }
                    }
                    else if (v189 <= v191)
                    {
                      goto LABEL_342;
                    }
                    *v180 = v186;
                    v180 = v185;
                  }
                  while (v185 != v7);
                  v181 = v7;
                }
LABEL_343:
                *v181 = v184;
                v179 = *a3;
              }
              v176 = v182 + 1;
              v180 = v182;
            }
            while (v182 + 1 != a2);
          }
        }
        else if ((v178 & 1) == 0)
        {
          v277 = *a3;
          do
          {
            v278 = v176;
            v280 = *v9;
            v279 = v9[1];
            result = sub_20F625764(v277, *(uint64_t **)(v279 + 496), *(_QWORD *)(v279 + 504), *(uint64_t **)(*v9 + 496), *(_QWORD *)(*v9 + 504));
            if ((_DWORD)result)
            {
              v281 = v278;
              do
              {
                while (1)
                {
                  *v281 = v280;
                  v281 = v9;
                  v282 = *--v9;
                  v280 = v282;
                  v283 = *(uint64_t **)(v279 + 496);
                  v284 = (uint64_t)(*(_QWORD *)(v279 + 504) - (_QWORD)v283) >> 6;
                  v285 = *(uint64_t **)(v282 + 496);
                  v286 = (uint64_t)(*(_QWORD *)(v282 + 504) - (_QWORD)v285) >> 6;
                  if (v284 == v286)
                    break;
                  if (v284 <= v286)
                    goto LABEL_502;
                }
                v287 = (**a3)[1];
                v290 = *(uint64_t **)(v287 + 56);
                v288 = (uint64_t *)(v287 + 56);
                v289 = v290;
                if (!v290)
                  goto LABEL_522;
                v291 = *v283;
                v292 = *((_DWORD *)v283 + 2);
                v293 = v288;
                v294 = v289;
                do
                {
                  v295 = v294[4];
                  if (v295 < v291)
                  {
                    ++v294;
                  }
                  else if (v295 == v291)
                  {
                    result = (unint64_t)(v294 + 1);
                    if (*((_DWORD *)v294 + 10) < v292)
                      ++v294;
                    else
                      v293 = v294;
                  }
                  else
                  {
                    v293 = v294;
                  }
                  v294 = (uint64_t *)*v294;
                }
                while (v294);
                if (v293 == v288 || (v296 = v293[4], v291 < v296) || v291 == v296 && *((_DWORD *)v293 + 10) > v292)
LABEL_522:
                  v293 = v288;
                v297 = (uint64_t *)*(*a3)[1];
                if (v297 == v293)
                {
                  v298 = 0;
                }
                else
                {
                  v298 = 0;
                  v299 = (uint64_t *)*(*a3)[1];
                  do
                  {
                    v300 = (uint64_t *)v299[1];
                    if (v300)
                    {
                      do
                      {
                        v301 = v300;
                        v300 = (uint64_t *)*v300;
                      }
                      while (v300);
                    }
                    else
                    {
                      do
                      {
                        v301 = (uint64_t *)v299[2];
                        v177 = *v301 == (_QWORD)v299;
                        v299 = v301;
                      }
                      while (!v177);
                    }
                    ++v298;
                    v299 = v301;
                  }
                  while (v301 != v293);
                }
                if (!v289)
                  goto LABEL_547;
                v302 = *v285;
                v303 = *((_DWORD *)v285 + 2);
                v304 = v288;
                do
                {
                  v305 = v289[4];
                  if (v305 < v302)
                  {
                    ++v289;
                  }
                  else if (v305 == v302)
                  {
                    if (*((_DWORD *)v289 + 10) < v303)
                      ++v289;
                    else
                      v304 = v289;
                  }
                  else
                  {
                    v304 = v289;
                  }
                  v289 = (uint64_t *)*v289;
                }
                while (v289);
                if (v304 == v288 || (v306 = v304[4], v302 < v306) || v302 == v306 && *((_DWORD *)v304 + 10) > v303)
LABEL_547:
                  v304 = v288;
                if (v297 == v304)
                {
                  v307 = 0;
                }
                else
                {
                  v307 = 0;
                  do
                  {
                    v308 = (uint64_t *)v297[1];
                    if (v308)
                    {
                      do
                      {
                        v309 = v308;
                        v308 = (uint64_t *)*v308;
                      }
                      while (v308);
                    }
                    else
                    {
                      do
                      {
                        v309 = (uint64_t *)v297[2];
                        v177 = *v309 == (_QWORD)v297;
                        v297 = v309;
                      }
                      while (!v177);
                    }
                    ++v307;
                    v297 = v309;
                  }
                  while (v309 != v304);
                }
              }
              while (v298 > v307);
LABEL_502:
              *v281 = v279;
              v277 = *a3;
            }
            v176 = v278 + 1;
            v9 = v278;
          }
          while (v278 + 1 != a2);
        }
        return result;
    }
  }
}

BOOL sub_20FC5C508(uint64_t *a1, uint64_t *a2, _QWORD ***a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD **v24;
  uint64_t v25;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (sub_20F625764(*a3, *(uint64_t **)(v8 + 496), *(_QWORD *)(v8 + 504), *(uint64_t **)(*a1 + 496), *(_QWORD *)(*a1 + 504)))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return 1;
    case 3:
      sub_20FC33704(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      v19 = a1 + 2;
      sub_20FC33704(a1, a1 + 1, a1 + 2, a3);
      v20 = *(a2 - 1);
      v21 = a1[2];
      if (sub_20F625764(*a3, *(uint64_t **)(v20 + 496), *(_QWORD *)(v20 + 504), *(uint64_t **)(v21 + 496), *(_QWORD *)(v21 + 504)))
      {
        *v19 = v20;
        *(a2 - 1) = v21;
        v22 = *v19;
        v23 = a1[1];
        if (sub_20F625764(*a3, *(uint64_t **)(*v19 + 496), *(_QWORD *)(*v19 + 504), *(uint64_t **)(v23 + 496), *(_QWORD *)(v23 + 504)))
        {
          a1[1] = v22;
          a1[2] = v23;
          v24 = *a3;
          v25 = *a1;
          if (sub_20F625764(v24, *(uint64_t **)(v22 + 496), *(_QWORD *)(v22 + 504), *(uint64_t **)(*a1 + 496), *(_QWORD *)(*a1 + 504)))
          {
            *a1 = v22;
            a1[1] = v25;
          }
        }
      }
      return 1;
    case 5:
      sub_20FC33A34(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v10 = a1 + 2;
      sub_20FC33704(a1, a1 + 1, a1 + 2, a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = 24;
      break;
  }
  while (1)
  {
    v14 = *v11;
    v15 = *v10;
    if (sub_20F625764(*a3, *(uint64_t **)(*v11 + 496), *(_QWORD *)(*v11 + 504), *(uint64_t **)(v15 + 496), *(_QWORD *)(v15 + 504)))
    {
      break;
    }
LABEL_13:
    v10 = v11;
    v13 += 8;
    if (++v11 == a2)
      return 1;
  }
  v16 = v13;
  do
  {
    *(uint64_t *)((char *)a1 + v16) = v15;
    v17 = v16 - 8;
    if (v16 == 8)
    {
      *a1 = v14;
      if (++v12 != 8)
        goto LABEL_13;
      return v11 + 1 == a2;
    }
    v15 = *(uint64_t *)((char *)a1 + v16 - 16);
    v18 = sub_20F625764(*a3, *(uint64_t **)(v14 + 496), *(_QWORD *)(v14 + 504), *(uint64_t **)(v15 + 496), *(_QWORD *)(v15 + 504));
    v16 = v17;
  }
  while (v18);
  *(uint64_t *)((char *)a1 + v17) = v14;
  if (++v12 != 8)
    goto LABEL_13;
  return v11 + 1 == a2;
}

__n128 sub_20FC5C72C(uint64_t a1, __n128 *a2, unsigned int a3, __int128 *a4, unsigned int a5)
{
  char *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  char *v15;
  unsigned int v16;
  _BOOL4 v17;
  __n128 result;
  uint64_t v19;
  __int128 *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  char *v27;
  unint64_t v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  size_t v32;
  const char *v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  size_t v38;
  const char *v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  const char *v42;
  size_t v43;
  _BYTE *v44;
  __n128 *v45;
  uint64_t v46;
  uint64_t v47;
  float64x2_t *v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  size_t v52;
  NSObject *v53;
  std::__shared_weak_count *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  os_log_t v59;
  _DWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  int v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  void *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  float64x2_t v89;
  unsigned __int8 v90;
  const char *v91;
  size_t v92;
  _BYTE *v93;
  unint64_t v94;
  const char *v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  float64x2_t *v99;
  uint64_t v100;
  uint64_t v101;
  NSObject *v102;
  size_t v103;
  NSObject *v104;
  std::__shared_weak_count *v105;
  std::__shared_weak_count *v106;
  unint64_t *p_shared_owners;
  unint64_t v108;
  unint64_t v109;
  os_log_t v110;
  _DWORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  void *v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  __n128 *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  unint64_t v145;
  __n128 *v146;
  uint64_t *v147;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v149;
  int v150;
  const char *v151;
  int v152;
  const char *v153;
  uint64_t v154;
  std::__shared_weak_count *v155;
  uint64_t v156;
  __int128 v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  os_log_t v161;
  _BYTE v162[32];
  float64x2_t v163;
  unint64_t v164;
  char v165;
  uint64_t v166;

  v166 = *MEMORY[0x24BDAC8D0];
  v10 = *(char **)(a1 + 6040);
  v11 = *(char **)(a1 + 6048);
  if (v11 != v10)
  {
    v12 = (v11 - v10) >> 4;
    do
    {
      v13 = v12 >> 1;
      v14 = (unsigned int *)&v10[16 * (v12 >> 1)];
      v16 = *v14;
      v15 = (char *)(v14 + 4);
      v12 += ~(v12 >> 1);
      if (v16 < a3)
        v10 = v15;
      else
        v12 = v13;
    }
    while (v12);
  }
  if (v10 == v11 || *(_DWORD *)v10 != a3)
  {
    v17 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 920, (uint64_t)"var_iter != this->linearSystem().template endVariable<typename Traits::IMUScaleSkewnessVariable>()", 98, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v10 = v11;
    if (v17)
      abort();
  }
  v19 = *((_QWORD *)v10 + 1);
  if (*(_BYTE *)(v19 + 20))
  {
    v20 = (__int128 *)(v19 + 32);
    if (*((_BYTE *)a4 + 24))
    {
      v20 = a4;
      v21 = a5;
    }
    else
    {
      v21 = a3;
    }
    v157 = *v20;
    v158 = *((_QWORD *)v20 + 2);
    v22 = *(char **)(a1 + 6592);
    v23 = *(char **)(a1 + 6600);
    if (v23 != v22)
    {
      v24 = 0x2E8BA2E8BA2E8BA3 * ((v23 - v22) >> 4);
      do
      {
        v25 = v24 >> 1;
        v26 = (unint64_t *)&v22[176 * (v24 >> 1)];
        v28 = *v26;
        v27 = (char *)(v26 + 22);
        v24 += ~(v24 >> 1);
        if (v28 < v21)
          v22 = v27;
        else
          v24 = v25;
      }
      while (v24);
    }
    if (v23 != v22 && *(_QWORD *)v22 == v21)
    {
      sub_20F9B2A4C(&v156);
      if (**(int **)(v156 + 56) > 2
        || (v29 = *(unsigned __int8 *)(v156 + 72),
            v30 = sub_20E8C31DC(v156, "OSLogSurrogateAppender", 1, 0),
            v31 = v30,
            !v29)
        && !v30)
      {
LABEL_207:
        result.n128_u64[0] = v157;
        *(_OWORD *)(v22 + 24) = v157;
        *((_QWORD *)v22 + 5) = v158;
        v139 = (__n128 *)(v22 + 48);
        if (v22[72] == a2[1].n128_u8[8])
        {
          if (v22[72])
          {
            result = *a2;
            *((_QWORD *)v22 + 8) = a2[1].n128_u64[0];
            *v139 = result;
          }
        }
        else if (v22[72])
        {
          v22[72] = 0;
        }
        else
        {
          result = *a2;
          *((_QWORD *)v22 + 8) = a2[1].n128_u64[0];
          *v139 = result;
          v22[72] = 1;
        }
        return result;
      }
      v147 = &v156;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v149 = std::chrono::system_clock::now().__d_.__rep_;
      v150 = 2;
      v151 = "unknown file";
      v152 = 945;
      v154 = 0;
      v155 = 0;
      v153 = "unknown function";
      v143 = v156;
      if (*(char *)(v156 + 39) < 0)
      {
        v33 = *(const char **)(v156 + 16);
        v32 = *(_QWORD *)(v156 + 24);
      }
      else
      {
        v32 = *(unsigned __int8 *)(v156 + 39);
        v33 = (const char *)(v156 + 16);
      }
      v142 = v156 + 16;
      v146 = a2;
      v90 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v90 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)&v161);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v161);
        if (v162[16] && (v162[15] & 0x80000000) != 0)
          operator delete(v161);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v91 = byte_254A4A4F8;
      else
        v91 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v92 = byte_254A4A4F8[23];
      else
        v92 = *(_QWORD *)&byte_254A4A4F8[8];
      v161 = os_log_create(v91, v33);
      v93 = v162;
      if (v92 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v92 >= 0x17)
      {
        v94 = v31;
        v95 = v33;
        v96 = v29;
        v97 = (v92 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v92 | 7) != 0x17)
          v97 = v92 | 7;
        v98 = v97 + 1;
        v93 = operator new(v97 + 1);
        *(_QWORD *)&v162[8] = v92;
        *(_QWORD *)&v162[16] = v98 | 0x8000000000000000;
        *(_QWORD *)v162 = v93;
        v29 = v96;
        v33 = v95;
        v31 = v94;
      }
      else
      {
        v162[23] = v92;
        if (!v92)
        {
LABEL_140:
          v93[v92] = 0;
          v162[24] = 1;
          v99 = &v163;
          if (v32 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          a2 = v146;
          if (v32 >= 0x17)
          {
            v100 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v32 | 7) != 0x17)
              v100 = v32 | 7;
            v101 = v100 + 1;
            v99 = (float64x2_t *)operator new(v100 + 1);
            *(_QWORD *)&v163.f64[1] = v32;
            v164 = v101 | 0x8000000000000000;
            *(_QWORD *)&v163.f64[0] = v99;
          }
          else
          {
            HIBYTE(v164) = v32;
            if (!v32)
              goto LABEL_148;
          }
          memmove(v99, v33, v32);
LABEL_148:
          *((_BYTE *)v99->f64 + v32) = 0;
          v165 = 1;
          v102 = v161;
          if (SHIBYTE(v164) < 0)
            operator delete(*(void **)&v163.f64[0]);
          if (v162[24] && (v162[23] & 0x80000000) != 0)
            operator delete(*(void **)v162);
          if (v161)
            os_release(v161);
          if (v31 && *(_QWORD *)(v31 + 24))
          {
            v103 = _os_log_pack_size();
            v104 = operator new(v103, (std::align_val_t)8uLL);
            v105 = (std::__shared_weak_count *)operator new();
            v106 = v105;
            v105->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v105->__shared_owners_;
            v105->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v105->__shared_weak_owners_ = 0;
            v105[1].__vftable = (std::__shared_weak_count_vtbl *)v104;
            v161 = v104;
            *(_QWORD *)v162 = v104;
            *(_QWORD *)&v162[8] = v105;
            do
              v108 = __ldxr(p_shared_owners);
            while (__stxr(v108 + 1, p_shared_owners));
            *(_QWORD *)&v162[16] = 0;
            *(_QWORD *)&v162[24] = 0;
            v163.f64[0] = 0.0;
            do
              v109 = __ldaxr(p_shared_owners);
            while (__stlxr(v109 - 1, p_shared_owners));
            if (!v109)
            {
              ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
              std::__shared_weak_count::__release_weak(v106);
            }
            v110 = v161;
            v111 = (_DWORD *)_os_log_pack_fill();
            *v111 = 67109120;
            v111[1] = v21;
            v112 = operator new();
            v113 = *(unsigned __int8 *)(v143 + 39);
            v114 = v142;
            if ((v113 & 0x80u) != 0)
            {
              v114 = *(_QWORD *)(v143 + 16);
              v113 = *(_QWORD *)(v143 + 24);
            }
            *(_QWORD *)v112 = v110;
            *(_OWORD *)(v112 + 8) = *(_OWORD *)v162;
            *(_QWORD *)v162 = 0;
            *(_QWORD *)&v162[8] = 0;
            *(_OWORD *)(v112 + 24) = *(_OWORD *)&v162[16];
            *(_QWORD *)&v162[16] = 0;
            *(_QWORD *)&v162[24] = 0;
            *(_QWORD *)(v112 + 40) = v114;
            *(_QWORD *)(v112 + 48) = v113;
            *(_BYTE *)(v112 + 56) = 2;
            v159 = 0;
            v160 = v112;
            (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v31 + 24) + 40))(*(_QWORD *)(v31 + 24), &v160);
            v115 = v160;
            v160 = 0;
            if (v115)
            {
              v116 = *(std::__shared_weak_count **)(v115 + 32);
              if (v116)
              {
                v117 = (unint64_t *)&v116->__shared_owners_;
                do
                  v118 = __ldaxr(v117);
                while (__stlxr(v118 - 1, v117));
                if (!v118)
                {
                  ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
                  std::__shared_weak_count::__release_weak(v116);
                }
              }
              v119 = *(std::__shared_weak_count **)(v115 + 16);
              if (v119)
              {
                v120 = (unint64_t *)&v119->__shared_owners_;
                do
                  v121 = __ldaxr(v120);
                while (__stlxr(v121 - 1, v120));
                if (!v121)
                {
                  ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
                  std::__shared_weak_count::__release_weak(v119);
                }
              }
              MEMORY[0x212BC6398](v115, 0x10F0C40B62ED6C6);
              v122 = v159;
              v159 = 0;
              if (v122)
              {
                v123 = *(std::__shared_weak_count **)(v122 + 32);
                if (v123)
                {
                  v124 = (unint64_t *)&v123->__shared_owners_;
                  do
                    v125 = __ldaxr(v124);
                  while (__stlxr(v125 - 1, v124));
                  if (!v125)
                  {
                    ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
                    std::__shared_weak_count::__release_weak(v123);
                  }
                }
                v126 = *(std::__shared_weak_count **)(v122 + 16);
                if (v126)
                {
                  v127 = (unint64_t *)&v126->__shared_owners_;
                  do
                    v128 = __ldaxr(v127);
                  while (__stlxr(v128 - 1, v127));
                  if (!v128)
                  {
                    ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
                    std::__shared_weak_count::__release_weak(v126);
                  }
                }
                MEMORY[0x212BC6398](v122, 0x10F0C40B62ED6C6);
              }
            }
            v129 = *(std::__shared_weak_count **)&v162[24];
            if (*(_QWORD *)&v162[24])
            {
              v130 = (unint64_t *)(*(_QWORD *)&v162[24] + 8);
              do
                v131 = __ldaxr(v130);
              while (__stlxr(v131 - 1, v130));
              if (!v131)
              {
                ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
                std::__shared_weak_count::__release_weak(v129);
              }
            }
            v132 = *(std::__shared_weak_count **)&v162[8];
            if (*(_QWORD *)&v162[8])
            {
              v133 = (unint64_t *)(*(_QWORD *)&v162[8] + 8);
              do
                v134 = __ldaxr(v133);
              while (__stlxr(v134 - 1, v133));
              if (!v134)
              {
                ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
                std::__shared_weak_count::__release_weak(v132);
              }
            }
          }
          else
          {
            os_log_type_enabled(v102, OS_LOG_TYPE_DEBUG);
            LODWORD(v161) = 67109120;
            HIDWORD(v161) = v21;
            v135 = (void *)_os_log_send_and_compose_impl();
            if (v135)
              free(v135);
          }
          if (v29)
          {
            sub_20E8C003C((uint64_t)&v147, "Update existing IMU intrinsic prior factor with factor ID: %d.", v21);
            sub_20E863570((uint64_t)&v147);
          }
          sub_20E863570((uint64_t)&v147);
          v136 = v155;
          if (v155)
          {
            v137 = (unint64_t *)&v155->__shared_owners_;
            do
              v138 = __ldaxr(v137);
            while (__stlxr(v138 - 1, v137));
            if (!v138)
            {
              ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
              std::__shared_weak_count::__release_weak(v136);
            }
          }
          goto LABEL_207;
        }
      }
      memmove(v93, v91, v92);
      goto LABEL_140;
    }
    sub_20F9B2A4C(&v156);
    if (**(int **)(v156 + 56) > 2)
      goto LABEL_117;
    v34 = *(unsigned __int8 *)(v156 + 72);
    v35 = sub_20E8C31DC(v156, "OSLogSurrogateAppender", 1, 0);
    v36 = v35;
    if (!v34 && v35 == 0)
      goto LABEL_117;
    v144 = v34;
    v147 = &v156;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v149 = std::chrono::system_clock::now().__d_.__rep_;
    v150 = 2;
    v151 = "unknown file";
    v152 = 936;
    v154 = 0;
    v155 = 0;
    v153 = "unknown function";
    v141 = v156;
    if (*(char *)(v156 + 39) < 0)
    {
      v39 = *(const char **)(v156 + 16);
      v38 = *(_QWORD *)(v156 + 24);
      v140 = v156 + 16;
      v145 = v36;
      v41 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v41 & 1) != 0)
        goto LABEL_36;
    }
    else
    {
      v38 = *(unsigned __int8 *)(v156 + 39);
      v39 = (const char *)(v156 + 16);
      v140 = v156 + 16;
      v145 = v36;
      v40 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v40 & 1) != 0)
        goto LABEL_36;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&v161);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v161);
      if (v162[16] && (v162[15] & 0x80000000) != 0)
        operator delete(v161);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_36:
    if (byte_254A4A4F8[23] >= 0)
      v42 = byte_254A4A4F8;
    else
      v42 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v43 = byte_254A4A4F8[23];
    else
      v43 = *(_QWORD *)&byte_254A4A4F8[8];
    v161 = os_log_create(v42, v39);
    v44 = v162;
    if (v43 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v43 >= 0x17)
    {
      v45 = a2;
      v46 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v43 | 7) != 0x17)
        v46 = v43 | 7;
      v47 = v46 + 1;
      v44 = operator new(v46 + 1);
      *(_QWORD *)&v162[8] = v43;
      *(_QWORD *)&v162[16] = v47 | 0x8000000000000000;
      *(_QWORD *)v162 = v44;
      a2 = v45;
    }
    else
    {
      v162[23] = v43;
      if (!v43)
      {
LABEL_50:
        v44[v43] = 0;
        v162[24] = 1;
        v48 = &v163;
        if (v38 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v38 >= 0x17)
        {
          v49 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v38 | 7) != 0x17)
            v49 = v38 | 7;
          v50 = v49 + 1;
          v48 = (float64x2_t *)operator new(v49 + 1);
          *(_QWORD *)&v163.f64[1] = v38;
          v164 = v50 | 0x8000000000000000;
          *(_QWORD *)&v163.f64[0] = v48;
        }
        else
        {
          HIBYTE(v164) = v38;
          if (!v38)
            goto LABEL_58;
        }
        memmove(v48, v39, v38);
LABEL_58:
        *((_BYTE *)v48->f64 + v38) = 0;
        v165 = 1;
        v51 = v161;
        if (SHIBYTE(v164) < 0)
          operator delete(*(void **)&v163.f64[0]);
        if (v162[24] && (v162[23] & 0x80000000) != 0)
          operator delete(*(void **)v162);
        if (v161)
          os_release(v161);
        if (v145 && *(_QWORD *)(v145 + 24))
        {
          v52 = _os_log_pack_size();
          v53 = operator new(v52, (std::align_val_t)8uLL);
          v54 = (std::__shared_weak_count *)operator new();
          v55 = v54;
          v54->__shared_owners_ = 0;
          v56 = (unint64_t *)&v54->__shared_owners_;
          v54->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v54->__shared_weak_owners_ = 0;
          v54[1].__vftable = (std::__shared_weak_count_vtbl *)v53;
          v161 = v53;
          *(_QWORD *)v162 = v53;
          *(_QWORD *)&v162[8] = v54;
          do
            v57 = __ldxr(v56);
          while (__stxr(v57 + 1, v56));
          *(_QWORD *)&v162[16] = 0;
          *(_QWORD *)&v162[24] = 0;
          v163.f64[0] = 0.0;
          do
            v58 = __ldaxr(v56);
          while (__stlxr(v58 - 1, v56));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v55);
          }
          v59 = v161;
          v60 = (_DWORD *)_os_log_pack_fill();
          *v60 = 67109120;
          v60[1] = v21;
          v61 = operator new();
          v62 = *(unsigned __int8 *)(v141 + 39);
          v63 = v140;
          if ((v62 & 0x80u) != 0)
          {
            v63 = *(_QWORD *)(v141 + 16);
            v62 = *(_QWORD *)(v141 + 24);
          }
          *(_QWORD *)v61 = v59;
          *(_OWORD *)(v61 + 8) = *(_OWORD *)v162;
          *(_QWORD *)v162 = 0;
          *(_QWORD *)&v162[8] = 0;
          *(_OWORD *)(v61 + 24) = *(_OWORD *)&v162[16];
          *(_QWORD *)&v162[16] = 0;
          *(_QWORD *)&v162[24] = 0;
          *(_QWORD *)(v61 + 40) = v63;
          *(_QWORD *)(v61 + 48) = v62;
          *(_BYTE *)(v61 + 56) = 2;
          v159 = 0;
          v160 = v61;
          (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v145 + 24) + 40))(*(_QWORD *)(v145 + 24), &v160);
          v64 = v160;
          v160 = 0;
          if (v64)
          {
            v65 = *(std::__shared_weak_count **)(v64 + 32);
            if (v65)
            {
              v66 = (unint64_t *)&v65->__shared_owners_;
              do
                v67 = __ldaxr(v66);
              while (__stlxr(v67 - 1, v66));
              if (!v67)
              {
                ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
                std::__shared_weak_count::__release_weak(v65);
              }
            }
            v68 = *(std::__shared_weak_count **)(v64 + 16);
            if (v68)
            {
              v69 = (unint64_t *)&v68->__shared_owners_;
              do
                v70 = __ldaxr(v69);
              while (__stlxr(v70 - 1, v69));
              if (!v70)
              {
                ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                std::__shared_weak_count::__release_weak(v68);
              }
            }
            MEMORY[0x212BC6398](v64, 0x10F0C40B62ED6C6);
            v71 = v159;
            v159 = 0;
            if (v71)
            {
              v72 = *(std::__shared_weak_count **)(v71 + 32);
              if (v72)
              {
                v73 = (unint64_t *)&v72->__shared_owners_;
                do
                  v74 = __ldaxr(v73);
                while (__stlxr(v74 - 1, v73));
                if (!v74)
                {
                  ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
                  std::__shared_weak_count::__release_weak(v72);
                }
              }
              v75 = *(std::__shared_weak_count **)(v71 + 16);
              if (v75)
              {
                v76 = (unint64_t *)&v75->__shared_owners_;
                do
                  v77 = __ldaxr(v76);
                while (__stlxr(v77 - 1, v76));
                if (!v77)
                {
                  ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
                  std::__shared_weak_count::__release_weak(v75);
                }
              }
              MEMORY[0x212BC6398](v71, 0x10F0C40B62ED6C6);
            }
          }
          v78 = *(std::__shared_weak_count **)&v162[24];
          v79 = v144;
          if (*(_QWORD *)&v162[24])
          {
            v80 = (unint64_t *)(*(_QWORD *)&v162[24] + 8);
            do
              v81 = __ldaxr(v80);
            while (__stlxr(v81 - 1, v80));
            if (!v81)
            {
              ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
              std::__shared_weak_count::__release_weak(v78);
            }
          }
          v82 = *(std::__shared_weak_count **)&v162[8];
          if (*(_QWORD *)&v162[8])
          {
            v83 = (unint64_t *)(*(_QWORD *)&v162[8] + 8);
            do
              v84 = __ldaxr(v83);
            while (__stlxr(v84 - 1, v83));
            if (!v84)
            {
              ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
              std::__shared_weak_count::__release_weak(v82);
            }
          }
        }
        else
        {
          os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG);
          LODWORD(v161) = 67109120;
          HIDWORD(v161) = v21;
          v85 = (void *)_os_log_send_and_compose_impl();
          v79 = v144;
          if (v85)
            free(v85);
        }
        if (v79)
        {
          sub_20E8C003C((uint64_t)&v147, "Add a new IMU intrinsic prior factor with factor ID: %d.", v21);
          sub_20E863570((uint64_t)&v147);
        }
        sub_20E863570((uint64_t)&v147);
        v86 = v155;
        if (v155)
        {
          v87 = (unint64_t *)&v155->__shared_owners_;
          do
            v88 = __ldaxr(v87);
          while (__stlxr(v88 - 1, v87));
          if (!v88)
          {
            ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
            std::__shared_weak_count::__release_weak(v86);
          }
        }
LABEL_117:
        v161 = (os_log_t)v21;
        *(_OWORD *)&v162[8] = v157;
        *(_QWORD *)&v162[24] = v158;
        LOBYTE(v163.f64[0]) = 0;
        v165 = 0;
        if (a2[1].n128_u8[8])
        {
          v164 = a2[1].n128_u64[0];
          v163 = *(float64x2_t *)a2;
          v165 = 1;
          v89 = (float64x2_t)vdupq_lane_s64(0x7FF8000000000000, 0);
          *(_QWORD *)&v89.f64[0] = v164;
          if (vminnmvq_f64(vminnmq_f64(v163, v89)) <= 0.0
            && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOPriorFactor.hpp", 564, (uint64_t)"prior_inverse_sigma->min() > 0", 30, (uint64_t)"The prior variance cannot be smaller than 0", 43, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
        }
        LODWORD(v160) = a3;
        v147 = 0;
        rep = 0;
        if ((sub_20FBB3AE0(a1 + 5168, (__int128 *)&v161, (unsigned int *)&v160, 0, 0) & 1) != 0)
        {
          *(_BYTE *)(a1 + 7828) = 0;
          *(_DWORD *)(a1 + 7824) = 0;
        }
        else if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 942, (uint64_t)"ret.second", 10, (uint64_t)"Failed to add imu calibration prior factor", 42, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        return result;
      }
    }
    memmove(v44, v42, v43);
    goto LABEL_50;
  }
  return result;
}

void sub_20FC5D7DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  if (*(_BYTE *)(v9 - 152))
  {
    if (*(char *)(v9 - 153) < 0)
      operator delete(*(void **)(v9 - 176));
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FC5D824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  uint64_t v32;

  sub_20E86E8C4(&a32);
  sub_20E86E8C4(&a31);
  sub_20E86E658(v32 - 176);
  sub_20E863714((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20FC5D898()
{
  JUMPOUT(0x20FC5D8A0);
}

void sub_20FC5D8C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FC5D8DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FC5D8F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  void *v11;
  va_list va;

  va_start(va, a9);
  if (*(_BYTE *)(v9 - 144) && *(char *)(v9 - 145) < 0)
    operator delete(*(void **)(v9 - 168));
  v11 = *(void **)(v9 - 176);
  if (v11)
    os_release(v11);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FC5D988(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FC5D99C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va1);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20FC5D9C4(uint64_t result, uint64_t a2)
{
  unsigned int *v2;
  unsigned int *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  __int128 v9;
  __int128 v10;
  float64x2_t v11;
  unsigned int v12;
  __int128 v13[3];
  float64x2_t v14;
  float64x2_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *(unsigned int **)(result + 5848);
  v3 = *(unsigned int **)(result + 5856);
  if (v2 != v3)
  {
    v5 = result + 5168;
    v6 = result + 7824;
    do
    {
      v7 = *((_QWORD *)v2 + 1);
      if (*(_BYTE *)(v7 + 20))
      {
        v8 = *v2;
        v9 = *(_OWORD *)(v7 + 32);
        v10 = *(_OWORD *)(v7 + 48);
        *(_QWORD *)&v13[0] = *v2;
        v13[2] = v10;
        v13[1] = v9;
        LOBYTE(v14.f64[0]) = 0;
        v16 = 0;
        if (*(_BYTE *)(a2 + 32))
        {
          v11 = *(float64x2_t *)(a2 + 16);
          v14 = *(float64x2_t *)a2;
          v15 = v11;
          v16 = 1;
          if (vminnmvq_f64(vminnmq_f64(v14, v11)) <= 0.0
            && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOPriorFactor.hpp", 564, (uint64_t)"prior_inverse_sigma->min() > 0", 30, (uint64_t)"The prior variance cannot be smaller than 0", 43, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
        }
        v12 = v8;
        v17 = 0;
        v18 = 0;
        result = sub_20FBB2014(v5, v13, &v12, 0, 0);
        if ((result & 1) != 0)
        {
          *(_BYTE *)(v6 + 4) = 0;
          *(_DWORD *)v6 = 0;
        }
      }
      v2 += 4;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_20FC5DB0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_20E86665C(v9 - 96);
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20FC5DB28(uint64_t result, uint64_t a2)
{
  unsigned int *v2;
  unsigned int *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float64x2_t v9;
  unsigned int v10;
  __int128 v11[2];
  uint64_t v12;
  float64x2_t v13;
  float64_t v14;
  char v15;
  __int128 v16;
  uint64_t v17;

  v2 = *(unsigned int **)(result + 5944);
  v3 = *(unsigned int **)(result + 5952);
  if (v2 != v3)
  {
    v5 = result + 5168;
    v6 = result + 7824;
    do
    {
      v7 = *((_QWORD *)v2 + 1);
      if (*(_BYTE *)(v7 + 20))
      {
        v8 = *v2;
        v16 = 0uLL;
        v17 = 0;
        sub_20E9733B8((float64x2_t *)(v7 + 32), (double *)&v16);
        v11[1] = v16;
        v12 = v17;
        *(_QWORD *)&v11[0] = v8;
        LOBYTE(v13.f64[0]) = 0;
        v15 = 0;
        if (*(_BYTE *)(a2 + 24))
        {
          v14 = *(double *)(a2 + 16);
          v13 = *(float64x2_t *)a2;
          v15 = 1;
          v9 = (float64x2_t)vdupq_lane_s64(0x7FF8000000000000, 0);
          v9.f64[0] = v14;
          if (vminnmvq_f64(vminnmq_f64(v13, v9)) <= 0.0
            && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOPriorFactor.hpp", 564, (uint64_t)"prior_inverse_sigma->min() > 0", 30, (uint64_t)"The prior variance cannot be smaller than 0", 43, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
        }
        v10 = v8;
        v16 = 0uLL;
        result = sub_20FBB2CF8(v5, v11, &v10, 0, 0);
        if ((result & 1) != 0)
        {
          *(_BYTE *)(v6 + 4) = 0;
          *(_DWORD *)v6 = 0;
        }
      }
      v2 += 4;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_20FC5DC9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va1);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20FC5DCB8(uint64_t result, unsigned int a2, double a3)
{
  uint64_t v5;
  char *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int *v10;
  char *v11;
  unsigned int v12;
  uint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  char *v25;
  unint64_t v26;
  unint64_t *v27;
  unsigned int v28;
  unint64_t v29[3];
  double v30;
  char v31;
  uint64_t v32;
  uint64_t v33;

  v5 = result;
  if (a3 <= 0.0)
  {
    result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 3287, (uint64_t)"prior_variance > 0", 18, (uint64_t)"Input variance is smaller than zero", 35, (void (*)(void **))sub_21023DDB0);
    if ((_DWORD)result)
      goto LABEL_34;
  }
  v6 = *(char **)(v5 + 5656);
  v7 = *(char **)(v5 + 5664);
  if (v7 != v6)
  {
    v8 = (v7 - v6) >> 4;
    do
    {
      v9 = v8 >> 1;
      v10 = (unsigned int *)&v6[16 * (v8 >> 1)];
      v12 = *v10;
      v11 = (char *)(v10 + 4);
      v8 += ~(v8 >> 1);
      if (v12 < a2)
        v6 = v11;
      else
        v8 = v9;
    }
    while (v8);
  }
  if (v6 == v7 || *(_DWORD *)v6 != a2)
  {
    result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.h", 235, (uint64_t)"iter != linearSystem().graph().template endVariable<VARIABLE_TYPE>()", 68, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v6 = v7;
    if ((_DWORD)result)
      goto LABEL_34;
  }
  v13 = *((_QWORD *)v6 + 1);
  if (!*(_BYTE *)(v13 + 20))
    return result;
  v14 = *(char **)(v5 + 6496);
  v15 = *(char **)(v5 + 6504);
  if (v15 != v14)
  {
    v16 = 0x6DB6DB6DB6DB6DB7 * ((v15 - v14) >> 4);
    v17 = *(char **)(v5 + 6496);
    v18 = v16;
    do
    {
      v19 = v18 >> 1;
      v20 = (unint64_t *)&v17[112 * (v18 >> 1)];
      v22 = *v20;
      v21 = (char *)(v20 + 14);
      result = v22;
      v18 += ~(v18 >> 1);
      if (v22 < a2)
        v17 = v21;
      else
        v18 = v19;
    }
    while (v18);
    if (v15 != v17 && *(_QWORD *)v17 == a2)
    {
      do
      {
        v23 = v16 >> 1;
        v24 = (unint64_t *)&v14[112 * (v16 >> 1)];
        v26 = *v24;
        v25 = (char *)(v24 + 14);
        v16 += ~(v16 >> 1);
        if (v26 < a2)
          v14 = v25;
        else
          v16 = v23;
      }
      while (v16);
      if (v15 == v14 || *(_QWORD *)v14 != a2)
        v14 = *(char **)(v5 + 6504);
      *((double *)v14 + 4) = 1.0 / sqrt(a3);
      v14[40] = 1;
      return result;
    }
  }
  v27 = *(unint64_t **)(v13 + 24);
  v29[0] = a2;
  v29[2] = *v27;
  v30 = 1.0 / sqrt(a3);
  v31 = 1;
  if (v30 <= 0.0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOPriorFactor.hpp", 507, (uint64_t)"*prior_inverse_sigma > 0", 24, (uint64_t)"The prior variance cannot be smaller or equal to 0", 50, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_34;
  }
  v28 = a2;
  v32 = 0;
  v33 = 0;
  result = sub_20FBB1620(v5 + 5168, v29, &v28, 0, 0);
  if ((result & 1) != 0)
  {
    *(_BYTE *)(v5 + 7828) = 0;
    *(_DWORD *)(v5 + 7824) = 0;
    return result;
  }
  result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 3305, (uint64_t)"result", 6, (uint64_t)"Failed to add the factor. This should never happen.", 51, (void (*)(void **))sub_21023DDB0);
  if ((_DWORD)result)
LABEL_34:
    abort();
  return result;
}

void sub_20FC5DF70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  sub_20E86665C((uint64_t)&a17);
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20FC5DF8C(uint64_t *a1, char *a2, __int128 *a3)
{
  unint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  unint64_t v16;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t i;
  __int128 v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  unint64_t v43;
  char *v44;

  v6 = (char *)*a1;
  v5 = a1[1];
  v7 = (uint64_t)&a2[-*a1];
  v8 = v7 / 312;
  v9 = *a1 + 312 * (v7 / 312);
  v10 = a1[2];
  if (v5 >= v10)
  {
    v16 = 0x6F96F96F96F96F97 * ((uint64_t)(v5 - (_QWORD)v6) >> 3) + 1;
    if (v16 > 0xD20D20D20D20D2)
      sub_20E867F44();
    v18 = 0x6F96F96F96F96F97 * ((uint64_t)(v10 - (_QWORD)v6) >> 3);
    if (2 * v18 > v16)
      v16 = 2 * v18;
    if (v18 >= 0x69069069069069)
      v19 = 0xD20D20D20D20D2;
    else
      v19 = v16;
    if (v19)
    {
      if (v19 > 0xD20D20D20D20D2)
        sub_20E877A38();
      v20 = (char *)operator new(312 * v19);
      v21 = (uint64_t)&v20[312 * v8];
      v22 = &v20[312 * v19];
      if (v8 == v19)
        goto LABEL_17;
    }
    else
    {
      v20 = 0;
      v21 = 312 * v8;
      v22 = 0;
      if (!v8)
      {
LABEL_17:
        if (v7 < 1)
        {
          if (v6 == a2)
            v43 = 1;
          else
            v43 = 2 * v8;
          if (v43 > 0xD20D20D20D20D2)
            sub_20E877A38();
          v44 = (char *)operator new(312 * v43);
          v21 = (uint64_t)&v44[312 * (v43 >> 2)];
          v23 = &v44[312 * v43];
          if (v20)
            operator delete(v20);
        }
        else
        {
          v23 = v22;
          v24 = 0x6F96F96F96F96F97 * ((v21 - (uint64_t)v20) >> 3);
          if (v24 >= -1)
            v25 = v24 + 1;
          else
            v25 = v24 + 2;
          v21 -= 312 * (v25 >> 1);
        }
        goto LABEL_25;
      }
    }
    v23 = v22;
LABEL_25:
    v27 = *a3;
    *(_QWORD *)(v21 + 16) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v21 = v27;
    memcpy((void *)(v21 + 24), (char *)a3 + 24, 0x120uLL);
    v28 = v21 + 312;
    v29 = (char *)*a1;
    v30 = v21;
    if (*a1 != v9)
    {
      v31 = v9;
      v32 = v21;
      do
      {
        v30 = v32 - 312;
        v33 = v31 - 312;
        v34 = *(_OWORD *)(v31 - 312);
        *(_QWORD *)(v30 + 16) = *(_QWORD *)(v31 - 296);
        *(_OWORD *)v30 = v34;
        memcpy((void *)(v32 - 288), (const void *)(v31 - 288), 0x120uLL);
        v31 = v33;
        v32 = v30;
      }
      while ((char *)v33 != v29);
    }
    for (i = a1[1]; v9 != i; v9 += 312)
    {
      v36 = *(_OWORD *)v9;
      *(_QWORD *)(v28 + 16) = *(_QWORD *)(v9 + 16);
      *(_OWORD *)v28 = v36;
      memcpy((void *)(v28 + 24), (const void *)(v9 + 24), 0x120uLL);
      v28 += 312;
    }
    v37 = (void *)*a1;
    *a1 = v30;
    a1[1] = v28;
    a1[2] = (uint64_t)v23;
    if (v37)
      operator delete(v37);
    return v21;
  }
  if (v9 != v5)
  {
    v11 = v9 + 312;
    v12 = v5 - 312;
    if (v5 < 0x138)
    {
      a1[1] = v5;
      if (v5 == v11)
      {
LABEL_36:
        v41 = *a3;
        *(_DWORD *)(v9 + 16) = *((_DWORD *)a3 + 4);
        *(_OWORD *)v9 = v41;
        memcpy(&v6[312 * v8 + 24], (char *)a3 + 24, 0x120uLL);
        return v9;
      }
    }
    else
    {
      v13 = v5 - 312;
      v14 = a1[1];
      do
      {
        v15 = *(_OWORD *)v13;
        *(_QWORD *)(v14 + 16) = *(_QWORD *)(v13 + 16);
        *(_OWORD *)v14 = v15;
        memcpy((void *)(v14 + 24), (const void *)(v13 + 24), 0x120uLL);
        v14 += 312;
        v13 += 312;
      }
      while (v13 < v5);
      a1[1] = v14;
      if (v5 == v11)
        goto LABEL_36;
    }
    v38 = (uint64_t)&v6[312 * v8 - 312];
    v39 = 8 * ((uint64_t)(v5 - v11) >> 3);
    do
    {
      v40 = *(_OWORD *)(v38 + v39);
      *(_DWORD *)(v12 + 16) = *(_DWORD *)(v38 + v39 + 16);
      *(_OWORD *)v12 = v40;
      memcpy((void *)(v12 + 24), (const void *)(v38 + v39 + 24), 0x120uLL);
      v12 -= 312;
      v39 -= 312;
    }
    while (v39);
    goto LABEL_36;
  }
  v26 = *a3;
  *(_QWORD *)(v9 + 16) = *((_QWORD *)a3 + 2);
  *(_OWORD *)v9 = v26;
  memcpy(&v6[312 * v8 + 24], (char *)a3 + 24, 0x120uLL);
  a1[1] = v9 + 312;
  return v9;
}

void sub_20FC5E364(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_20FC5E37C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40[8];
  uint64_t v41;
  int v42;
  __int128 v43;
  __int128 v44;

  v5 = (_QWORD *)a1[2];
  if (v5)
  {
    if (!a3)
    {
      v8 = (_QWORD *)*v5;
      v6 = v5 + 1;
      v7 = v8;
      if (v8 == v6)
      {
        a3 = 0;
      }
      else
      {
        a3 = 0;
        do
        {
          v9 = (_QWORD *)v7[1];
          v10 = v7;
          if (v9)
          {
            do
            {
              v11 = v9;
              v9 = (_QWORD *)*v9;
            }
            while (v9);
          }
          else
          {
            do
            {
              v11 = (_QWORD *)v10[2];
              v12 = *v11 == (_QWORD)v10;
              v10 = v11;
            }
            while (!v12);
          }
          a3 += (uint64_t)(*(_QWORD *)(v7[6] + 128) - *(_QWORD *)(v7[6] + 120)) >> 6;
          v7 = v11;
        }
        while (v11 != v6);
      }
LABEL_17:
      v14 = (_QWORD *)a1[18];
      if (v14)
      {
        v17 = (_QWORD *)*v14;
        v15 = v14 + 1;
        v16 = v17;
        if (v17 != v15)
        {
          do
          {
            v25 = (_QWORD *)v16[1];
            v26 = v16;
            if (v25)
            {
              do
              {
                v27 = v25;
                v25 = (_QWORD *)*v25;
              }
              while (v25);
            }
            else
            {
              do
              {
                v27 = (_QWORD *)v26[2];
                v12 = *v27 == (_QWORD)v26;
                v26 = v27;
              }
              while (!v12);
            }
            a3 += (uint64_t)(*(_QWORD *)(v16[6] + 128) - *(_QWORD *)(v16[6] + 120)) >> 6;
            v16 = v27;
          }
          while (v27 != v15);
        }
      }
    }
  }
  else
  {
    v13 = a1[18];
    if (!v13 || !*(_QWORD *)(v13 + 16))
      return;
    if (!a3)
      goto LABEL_17;
  }
  sub_20FC5E8A8((uint64_t)(a1 + 808), a3 - 0x79435E50D79435E5 * ((uint64_t)(a1[809] - a1[808]) >> 4));
  a1[846] = a1 + 394;
  v18 = a1[1];
  v44 = *(_OWORD *)(*(_QWORD *)(v18 + 48) + 32);
  v21 = *(_QWORD *)(v18 + 56);
  v19 = v18 + 56;
  v20 = v21;
  if (v21)
  {
    do
    {
      v22 = v20;
      v20 = *(_QWORD *)(v20 + 8);
    }
    while (v20);
  }
  else
  {
    do
    {
      v22 = *(_QWORD *)(v19 + 16);
      v12 = *(_QWORD *)v22 == v19;
      v19 = v22;
    }
    while (v12);
  }
  v43 = *(_OWORD *)(v22 + 32);
  v23 = a1[809];
  if (v23 == a1[808])
    v24 = 0;
  else
    v24 = *(_DWORD *)(v23 - 296) + 1;
  v42 = v24;
  v40[7] = (uint64_t)(a1 + 607);
  v41 = 0;
  v40[0] = (uint64_t)a1;
  v40[1] = (uint64_t)&v44;
  v40[2] = (uint64_t)&v43;
  v40[3] = (uint64_t)(a1 + 648);
  v40[4] = a2;
  v40[5] = (uint64_t)&v41;
  v40[6] = (uint64_t)&v42;
  v28 = (_QWORD *)a1[2];
  if (v28)
  {
    v31 = (_QWORD *)*v28;
    v29 = v28 + 1;
    v30 = v31;
    if (v31 != v29)
    {
      do
      {
        sub_20FC5E62C(v40, (uint64_t)(v30 + 4));
        v36 = (_QWORD *)v30[1];
        if (v36)
        {
          do
          {
            v37 = v36;
            v36 = (_QWORD *)*v36;
          }
          while (v36);
        }
        else
        {
          do
          {
            v37 = (_QWORD *)v30[2];
            v12 = *v37 == (_QWORD)v30;
            v30 = v37;
          }
          while (!v12);
        }
        v30 = v37;
      }
      while (v37 != v29);
    }
  }
  v32 = (_QWORD *)a1[18];
  if (v32)
  {
    v35 = (_QWORD *)*v32;
    v33 = v32 + 1;
    v34 = v35;
    if (v35 != v33)
    {
      do
      {
        sub_20FC5E62C(v40, (uint64_t)(v34 + 4));
        v38 = (_QWORD *)v34[1];
        if (v38)
        {
          do
          {
            v39 = v38;
            v38 = (_QWORD *)*v38;
          }
          while (v38);
        }
        else
        {
          do
          {
            v39 = (_QWORD *)v34[2];
            v12 = *v39 == (_QWORD)v34;
            v34 = v39;
          }
          while (!v12);
        }
        v34 = v39;
      }
      while (v39 != v33);
    }
  }
}

void sub_20FC5E62C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  float64x2_t v6;
  float64x2_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v26;
  char *v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int *v31;
  char *v32;
  unsigned int v33;
  __int128 v34[4];
  double v35;

  v4 = *a1;
  v5 = *(_QWORD *)(a2 + 16);
  if (!*(_BYTE *)(v5 + 112))
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 1572, (uint64_t)"track_ptr->getStructure()", 25, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v5 = *(_QWORD *)(a2 + 16);
  }
  if (*(_BYTE *)(v5 + 72))
  {
    v6 = vcvtq_f64_f32(*(float32x2_t *)(v5 + 84));
    v34[0] = (__int128)vcvtq_f64_f32(*(float32x2_t *)(v5 + 76));
    v34[1] = (__int128)v6;
    v7 = vcvtq_f64_f32(*(float32x2_t *)(v5 + 100));
    v34[2] = (__int128)vcvtq_f64_f32(*(float32x2_t *)(v5 + 92));
    v34[3] = (__int128)v7;
    v35 = *(float *)(v5 + 108);
    v8 = *(_QWORD *)(v5 + 120);
    v9 = *(_QWORD *)(v5 + 128);
    if (v8 != v9)
    {
      v10 = (__int128 *)(v5 + 48);
      do
      {
        v11 = *(_DWORD *)(v8 + 16);
        v12 = *(_QWORD *)v8;
        v13 = *(_DWORD *)(v8 + 8);
        v14 = sub_20E9DF85C((_QWORD *)(*(_QWORD *)(v4 + 8) + 1784), (uint64_t *)v8);
        if (v14)
        {
          v15 = v14[13];
          v16 = *(_QWORD *)(v4 + 8);
          v19 = *(uint64_t **)(v16 + 56);
          v17 = (uint64_t *)(v16 + 56);
          v18 = v19;
          if (v19)
            goto LABEL_13;
        }
        else
        {
          v15 = 0;
          v20 = *(_QWORD *)(v4 + 8);
          v21 = *(uint64_t **)(v20 + 56);
          v17 = (uint64_t *)(v20 + 56);
          v18 = v21;
          if (v21)
          {
LABEL_13:
            v22 = v17;
            do
            {
              v23 = v18[4];
              if (v23 < v12)
              {
                ++v18;
              }
              else if (v23 == v12)
              {
                if (*((_DWORD *)v18 + 10) < v13)
                  ++v18;
                else
                  v22 = v18;
              }
              else
              {
                v22 = v18;
              }
              v18 = (uint64_t *)*v18;
            }
            while (v18);
            if (v22 != v17)
            {
              v24 = v22[4];
              if (v12 >= v24 && (v12 != v24 || *((_DWORD *)v22 + 10) <= v13))
                goto LABEL_27;
            }
          }
        }
        v22 = v17;
LABEL_27:
        if (*(_DWORD *)(a1[1] + 8) <= v13 && *(_DWORD *)(a1[2] + 8) >= v13 && v22 != v17)
        {
          v26 = a1[3];
          v27 = *(char **)(v26 + 8);
          v28 = *(char **)(v26 + 16);
          if (v28 != v27)
          {
            v29 = (v28 - v27) >> 4;
            do
            {
              v30 = v29 >> 1;
              v31 = (unsigned int *)&v27[16 * (v29 >> 1)];
              v33 = *v31;
              v32 = (char *)(v31 + 4);
              v29 += ~(v29 >> 1);
              if (v33 < v13)
                v27 = v32;
              else
                v29 = v30;
            }
            while (v29);
          }
          if (v27 == v28 || *(_DWORD *)v27 != v13 || *(_BYTE *)(*((_QWORD *)v27 + 1) + 20))
          {
            ++*(_QWORD *)a1[5];
            sub_20FC5EA9C(v11, v13, (_OWORD *)a2, v10, v34, v15, v4 + 3152, *(_DWORD *)a1[6], *(float *)(v8 + 32), *(float *)(v8 + 36), *(float *)(v8 + 56), (_QWORD *)a1[7]);
            ++*(_DWORD *)a1[6];
          }
        }
        v8 += 64;
      }
      while (v8 != v9);
    }
  }
}

void sub_20FC5E8A8(uint64_t a1, unint64_t a2)
{
  char *v2;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  char *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;

  v2 = *(char **)a1;
  if (0x86BCA1AF286BCA1BLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) < a2)
  {
    if (a2 >= 0xD79435E50D7944)
      sub_20E867F44();
    v4 = *(_BYTE **)(a1 + 8);
    v5 = 304 * a2;
    v6 = (char *)operator new(304 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
    }
    else
    {
      v9 = 0;
      do
      {
        v10 = &v8[v9];
        v11 = &v4[v9];
        *(_QWORD *)&v8[v9 - 304] = *(_QWORD *)&v4[v9 - 304];
        *(_QWORD *)&v8[v9 - 296] = *(_QWORD *)&v4[v9 - 296];
        *(_OWORD *)&v8[v9 - 288] = *(_OWORD *)&v4[v9 - 288];
        v12 = *(_OWORD *)&v4[v9 - 272];
        *((_QWORD *)v10 - 32) = *(_QWORD *)&v4[v9 - 256];
        *(_OWORD *)&v8[v9 - 272] = v12;
        v13 = *(_OWORD *)&v4[v9 - 216];
        v14 = *(_OWORD *)&v4[v9 - 200];
        v15 = *(_QWORD *)&v4[v9 - 184];
        *(_OWORD *)(v10 - 232) = *(_OWORD *)&v4[v9 - 232];
        *((_QWORD *)v10 - 23) = v15;
        *(_OWORD *)(v10 - 200) = v14;
        *(_OWORD *)(v10 - 216) = v13;
        *(_OWORD *)(v10 - 248) = *(_OWORD *)&v4[v9 - 248];
        v16 = *(_OWORD *)&v4[v9 - 160];
        *((_OWORD *)v10 - 11) = *(_OWORD *)&v4[v9 - 176];
        *((_OWORD *)v10 - 10) = v16;
        v17 = *(_OWORD *)&v4[v9 - 144];
        v18 = *(_OWORD *)&v4[v9 - 128];
        *((_DWORD *)v10 - 28) = *(_DWORD *)&v4[v9 - 112];
        *((_OWORD *)v10 - 9) = v17;
        *((_OWORD *)v10 - 8) = v18;
        v19 = *(_OWORD *)&v4[v9 - 104];
        *(_OWORD *)(v10 - 88) = *(_OWORD *)&v4[v9 - 88];
        *(_OWORD *)(v10 - 104) = v19;
        *(_OWORD *)(v10 - 72) = *(_OWORD *)&v4[v9 - 72];
        *(_OWORD *)(v10 - 56) = *(_OWORD *)&v4[v9 - 56];
        v20 = *(_QWORD *)&v4[v9 - 40];
        *(v10 - 32) = v4[v9 - 32];
        *((_QWORD *)v10 - 5) = v20;
        *(_OWORD *)(v10 - 24) = *(_OWORD *)&v4[v9 - 24];
        *((_QWORD *)v11 - 3) = 0;
        *((_QWORD *)v11 - 2) = 0;
        *(v10 - 8) = v4[v9 - 8];
        v9 -= 304;
      }
      while (&v4[v9] != v2);
      v2 = *(char **)a1;
      v21 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = &v8[v9];
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      while (v21 != v2)
      {
        v22 = (std::__shared_weak_count *)*((_QWORD *)v21 - 2);
        if (v22)
        {
          p_shared_owners = (unint64_t *)&v22->__shared_owners_;
          do
            v24 = __ldaxr(p_shared_owners);
          while (__stlxr(v24 - 1, p_shared_owners));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        v21 -= 304;
      }
    }
    if (v2)
      operator delete(v2);
  }
}

void sub_20FC5EA9C(unsigned int a1, unsigned int a2, _OWORD *a3, __int128 *a4, __int128 *a5, uint64_t a6, uint64_t a7, unsigned int a8, float a9, float a10, float a11, _QWORD *a12)
{
  char **v14;
  double v15;
  double v16;
  double v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v39;
  char *v40;
  __int128 v41;
  __int128 v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  char *v57;
  std::__shared_weak_count *v58;
  unint64_t *p_shared_owners;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  unint64_t v70;
  unint64_t v71;
  unsigned int *v72;
  char *v73;
  unsigned int v74;
  uint64_t v75;
  char *v76;
  char *v77;
  unint64_t v78;
  unint64_t v79;
  unsigned int *v80;
  char *v81;
  unsigned int v82;
  uint64_t v83;
  char *v84;
  char *v85;
  unint64_t v86;
  unint64_t v87;
  unsigned int *v88;
  char *v89;
  unsigned int v90;
  uint64_t v91;
  char *v92;
  char *v93;
  unint64_t v94;
  unint64_t v95;
  unsigned int *v96;
  char *v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  unint64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  unsigned int v110;
  _QWORD *v111;
  std::string *p_dst;
  std::string::size_type size;
  _QWORD *v114;
  _QWORD *v115;
  int v116;
  char *v117;
  char *v118;
  char *v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unsigned int *v123;
  char *v124;
  unsigned int v125;
  unint64_t v126;
  unint64_t v127;
  unsigned int *v128;
  char *v129;
  unsigned int v130;
  uint64_t v131;
  _QWORD *v132;
  std::string *v133;
  std::string::size_type v134;
  _QWORD *v135;
  _QWORD *v136;
  _QWORD *v137;
  _QWORD *v138;
  const char *v139;
  uint64_t v140;
  _QWORD *v141;
  int v142;
  char *v143;
  char *v144;
  char *v145;
  uint64_t v146;
  _QWORD *v147;
  std::string *v148;
  std::string::size_type v149;
  _QWORD *v150;
  _QWORD *v151;
  unint64_t v152;
  unint64_t v153;
  unsigned int *v154;
  char *v155;
  unsigned int v156;
  unint64_t v157;
  unint64_t v158;
  unsigned int *v159;
  char *v160;
  unsigned int v161;
  uint64_t v162;
  _QWORD *v163;
  std::string *v164;
  std::string::size_type v165;
  _QWORD *v166;
  _QWORD *v167;
  _QWORD *v168;
  _QWORD *v169;
  const char *v170;
  uint64_t v171;
  _QWORD *v172;
  char *v173;
  char *v174;
  char *v175;
  uint64_t v176;
  _QWORD *v177;
  std::string *v178;
  std::string::size_type v179;
  _QWORD *v180;
  _QWORD *v181;
  unint64_t v182;
  unint64_t v183;
  unsigned int *v184;
  char *v185;
  unsigned int v186;
  unint64_t v187;
  unint64_t v188;
  unsigned int *v189;
  char *v190;
  unsigned int v191;
  uint64_t v192;
  _QWORD *v193;
  std::string *v194;
  std::string::size_type v195;
  _QWORD *v196;
  _QWORD *v197;
  _QWORD *v198;
  _QWORD *v199;
  const char *v200;
  uint64_t v201;
  _QWORD *v202;
  char *v203;
  char *v204;
  char *v205;
  uint64_t v206;
  _QWORD *v207;
  std::string *v208;
  std::string::size_type v209;
  _QWORD *v210;
  _QWORD *v211;
  unint64_t v212;
  unint64_t v213;
  unsigned int *v214;
  char *v215;
  unsigned int v216;
  unint64_t v217;
  unint64_t v218;
  unsigned int *v219;
  char *v220;
  unsigned int v221;
  uint64_t v222;
  _QWORD *v223;
  std::string *v224;
  std::string::size_type v225;
  _QWORD *v226;
  _QWORD *v227;
  _QWORD *v228;
  _QWORD *v229;
  const char *v230;
  uint64_t v231;
  _QWORD *v232;
  char *v233;
  char *v234;
  uint64_t v235;
  _QWORD *v236;
  std::string *v237;
  std::string::size_type v238;
  _QWORD *v239;
  _QWORD *v240;
  unint64_t v241;
  unint64_t v242;
  char *v243;
  unint64_t v244;
  char *v245;
  _QWORD *v246;
  std::string *v247;
  std::string::size_type v248;
  _QWORD *v249;
  _QWORD *v250;
  BOOL v251;
  char v252;
  std::string::size_type v253;
  std::string *v254;
  _QWORD *v255;
  std::string *v256;
  std::string::size_type v257;
  _QWORD *v258;
  _QWORD *v259;
  unint64_t v260;
  const void *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  std::string *v265;
  __int128 v266;
  std::string *v267;
  __int128 v268;
  void **v269;
  uint64_t v270;
  _BOOL4 v271;
  unint64_t v273;
  std::string v274;
  BOOL v275;
  std::string v276;
  void *v277[2];
  int64_t v278;
  uint64_t v279;
  __int128 v280;
  __int128 v281;
  const void *v282;
  __int128 v283;
  __int128 v284;
  void *__p[2];
  __int128 v286;
  unint64_t v287;
  _OWORD v288[2];
  __int128 v289;
  _BYTE v290[20];
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  unint64_t v295;
  char v296;
  uint64_t v297;
  std::__shared_weak_count *v298;
  char v299;
  std::string __dst;

  a12[239] = a7;
  *(_OWORD *)((char *)v274.__r_.__value_.__r.__words + 6) = *a3;
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0uLL;
  v279 = a8;
  v14 = (char **)(a12 + 201);
  v15 = a9;
  v16 = a10;
  v17 = a11;
  *(double *)&v280 = a9;
  *((double *)&v280 + 1) = a10;
  v281 = *a4;
  v282 = (const void *)*((_QWORD *)a4 + 2);
  v18 = a5[3];
  *(_OWORD *)__p = a5[2];
  v286 = v18;
  v287 = *((_QWORD *)a5 + 8);
  v19 = a5[1];
  v283 = *a5;
  v284 = v19;
  *(double *)&v289 = a11;
  *((_QWORD *)&v289 + 1) = a6;
  *(_WORD *)v290 = 0;
  *(_OWORD *)&v290[2] = *(_OWORD *)&v274.__r_.__value_.__l.__data_;
  *(_WORD *)&v290[18] = v274.__r_.__value_.__r.__words[2];
  v291 = 0u;
  v292 = 0u;
  v297 = 0;
  v298 = 0;
  v295 = 0xBFF0000000000000;
  v296 = 0;
  v299 = 0;
  v20 = (char *)a12[202];
  v21 = a12[203];
  if ((unint64_t)v20 >= v21)
  {
    v273 = a8;
    v33 = *v14;
    v34 = 0x86BCA1AF286BCA1BLL * ((v20 - v33) >> 4) + 1;
    if (v34 > 0xD79435E50D7943)
      sub_20E867F44();
    v35 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v21 - (_QWORD)v33) >> 4);
    if (2 * v35 > v34)
      v34 = 2 * v35;
    if (v35 >= 0x6BCA1AF286BCA1)
      v36 = 0xD79435E50D7943;
    else
      v36 = v34;
    if (v36 > 0xD79435E50D7943)
      sub_20E877A38();
    v39 = (char *)operator new(304 * v36);
    v40 = &v39[16 * ((v20 - v33) >> 4)];
    *((double *)v40 + 2) = v15;
    *((double *)v40 + 3) = v16;
    *((_OWORD *)v40 + 2) = *a4;
    v41 = *a5;
    *(_OWORD *)(v40 + 72) = a5[1];
    v42 = a5[3];
    *(_OWORD *)(v40 + 88) = a5[2];
    v43 = &v39[304 * v36];
    v31 = v273;
    *(_QWORD *)v40 = -1;
    *((_QWORD *)v40 + 1) = v273;
    *((_QWORD *)v40 + 6) = *((_QWORD *)a4 + 2);
    *(_OWORD *)(v40 + 104) = v42;
    *((_QWORD *)v40 + 15) = *((_QWORD *)a5 + 8);
    *(_OWORD *)(v40 + 56) = v41;
    *((double *)v40 + 20) = v17;
    *((_QWORD *)v40 + 21) = a6;
    *((_WORD *)v40 + 88) = 0;
    *(_OWORD *)(v40 + 178) = *(_OWORD *)&v274.__r_.__value_.__l.__data_;
    *((_WORD *)v40 + 97) = v274.__r_.__value_.__r.__words[2];
    *(_OWORD *)(v40 + 200) = 0u;
    *(_OWORD *)(v40 + 216) = 0u;
    *((_QWORD *)v40 + 33) = v295;
    v40[272] = v296;
    *((_QWORD *)v40 + 35) = 0;
    *((_QWORD *)v40 + 36) = 0;
    v297 = 0;
    v298 = 0;
    v44 = v40 + 304;
    v40[296] = 0;
    if (v20 == v33)
    {
      v32 = a12;
      a12[201] = v40;
      a12[202] = v44;
      a12[203] = v43;
    }
    else
    {
      v45 = 0;
      v32 = a12;
      do
      {
        v46 = &v40[v45];
        v47 = &v20[v45];
        *(_QWORD *)&v40[v45 - 304] = *(_QWORD *)&v20[v45 - 304];
        *(_QWORD *)&v40[v45 - 296] = *(_QWORD *)&v20[v45 - 296];
        *(_OWORD *)&v40[v45 - 288] = *(_OWORD *)&v20[v45 - 288];
        v48 = *(_OWORD *)&v20[v45 - 272];
        *((_QWORD *)v46 - 32) = *(_QWORD *)&v20[v45 - 256];
        *(_OWORD *)&v40[v45 - 272] = v48;
        v49 = *(_OWORD *)&v20[v45 - 216];
        v50 = *(_OWORD *)&v20[v45 - 200];
        v51 = *(_QWORD *)&v20[v45 - 184];
        *(_OWORD *)(v46 - 232) = *(_OWORD *)&v20[v45 - 232];
        *((_QWORD *)v46 - 23) = v51;
        *(_OWORD *)(v46 - 200) = v50;
        *(_OWORD *)(v46 - 216) = v49;
        *(_OWORD *)(v46 - 248) = *(_OWORD *)&v20[v45 - 248];
        v52 = *(_OWORD *)&v20[v45 - 160];
        *((_OWORD *)v46 - 11) = *(_OWORD *)&v20[v45 - 176];
        *((_OWORD *)v46 - 10) = v52;
        v53 = *(_OWORD *)&v20[v45 - 144];
        v54 = *(_OWORD *)&v20[v45 - 128];
        *((_DWORD *)v46 - 28) = *(_DWORD *)&v20[v45 - 112];
        *((_OWORD *)v46 - 9) = v53;
        *((_OWORD *)v46 - 8) = v54;
        v55 = *(_OWORD *)&v20[v45 - 104];
        *(_OWORD *)(v46 - 88) = *(_OWORD *)&v20[v45 - 88];
        *(_OWORD *)(v46 - 104) = v55;
        *(_OWORD *)(v46 - 72) = *(_OWORD *)&v20[v45 - 72];
        *(_OWORD *)(v46 - 56) = *(_OWORD *)&v20[v45 - 56];
        v56 = *(_QWORD *)&v20[v45 - 40];
        *(v46 - 32) = v20[v45 - 32];
        *((_QWORD *)v46 - 5) = v56;
        *(_OWORD *)(v46 - 24) = *(_OWORD *)&v20[v45 - 24];
        *((_QWORD *)v47 - 3) = 0;
        *((_QWORD *)v47 - 2) = 0;
        *(v46 - 8) = v20[v45 - 8];
        v45 -= 304;
      }
      while (&v20[v45] != v33);
      v20 = (char *)a12[201];
      v57 = (char *)a12[202];
      a12[201] = &v40[v45];
      a12[202] = v44;
      for (a12[203] = v43; v57 != v20; v57 -= 304)
      {
        v58 = (std::__shared_weak_count *)*((_QWORD *)v57 - 2);
        if (v58)
        {
          p_shared_owners = (unint64_t *)&v58->__shared_owners_;
          do
            v60 = __ldaxr(p_shared_owners);
          while (__stlxr(v60 - 1, p_shared_owners));
          if (!v60)
          {
            ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
            std::__shared_weak_count::__release_weak(v58);
          }
        }
      }
    }
    v14 = (char **)(a12 + 201);
    if (v20)
      operator delete(v20);
    v61 = v298;
    v32[202] = v44;
    if (v61)
    {
      v62 = (unint64_t *)&v61->__shared_owners_;
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
    }
  }
  else
  {
    *(_QWORD *)v20 = -1;
    *((_QWORD *)v20 + 1) = a8;
    *((_OWORD *)v20 + 1) = v280;
    v22 = v281;
    *((_QWORD *)v20 + 6) = v282;
    *((_OWORD *)v20 + 2) = v22;
    v23 = v284;
    v24 = *(_OWORD *)__p;
    v25 = v286;
    *((_QWORD *)v20 + 15) = v287;
    *(_OWORD *)(v20 + 104) = v25;
    *(_OWORD *)(v20 + 88) = v24;
    *(_OWORD *)(v20 + 72) = v23;
    *(_OWORD *)(v20 + 56) = v283;
    v26 = v288[1];
    *((_OWORD *)v20 + 8) = v288[0];
    *((_OWORD *)v20 + 9) = v26;
    v27 = v289;
    v28 = *(_OWORD *)v290;
    *((_DWORD *)v20 + 48) = *(_DWORD *)&v290[16];
    *((_OWORD *)v20 + 10) = v27;
    *((_OWORD *)v20 + 11) = v28;
    v29 = v291;
    *(_OWORD *)(v20 + 216) = v292;
    *(_OWORD *)(v20 + 200) = v29;
    *(_OWORD *)(v20 + 232) = v293;
    *(_OWORD *)(v20 + 248) = v294;
    v30 = v295;
    v20[272] = v296;
    *((_QWORD *)v20 + 33) = v30;
    *((_QWORD *)v20 + 35) = 0;
    *((_QWORD *)v20 + 36) = 0;
    v20[296] = 0;
    a12[202] = v20 + 304;
    v31 = a8;
    v32 = a12;
  }
  if (__dst.__r_.__value_.__l.__size_)
  {
    v64 = (unint64_t *)(__dst.__r_.__value_.__l.__size_ + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      (*(void (**)(std::string::size_type))(*(_QWORD *)__dst.__r_.__value_.__l.__size_ + 16))(__dst.__r_.__value_.__l.__size_);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    }
  }
  v66 = v32[202];
  v67 = v66 - 304;
  *(_QWORD *)(v66 - 304) = *(_QWORD *)(v66 - 296);
  v68 = (char *)v32[66];
  v69 = (char *)v32[67];
  if (v69 != v68)
  {
    v70 = (v69 - v68) >> 4;
    do
    {
      v71 = v70 >> 1;
      v72 = (unsigned int *)&v68[16 * (v70 >> 1)];
      v74 = *v72;
      v73 = (char *)(v72 + 4);
      v70 += ~(v70 >> 1);
      if (v74 < a1)
        v68 = v73;
      else
        v70 = v71;
    }
    while (v70);
  }
  if (v68 == v69 || *(_DWORD *)v68 != a1)
    goto LABEL_71;
  v75 = *((_QWORD *)v68 + 1);
  *(_QWORD *)(v66 - 104) = v75;
  ++*(_DWORD *)(*((_QWORD *)v68 + 1) + 8);
  v77 = (char *)v32[42];
  v76 = (char *)v32[43];
  if (v76 != v77)
  {
    v78 = (v76 - v77) >> 4;
    do
    {
      v79 = v78 >> 1;
      v80 = (unsigned int *)&v77[16 * (v78 >> 1)];
      v82 = *v80;
      v81 = (char *)(v80 + 4);
      v78 += ~(v78 >> 1);
      if (v82 < a2)
        v77 = v81;
      else
        v78 = v79;
    }
    while (v78);
  }
  if (v77 == v76 || *(_DWORD *)v77 != a2)
    goto LABEL_71;
  v83 = *((_QWORD *)v77 + 1);
  *(_QWORD *)(v66 - 96) = v83;
  ++*(_DWORD *)(*((_QWORD *)v77 + 1) + 8);
  v84 = (char *)v32[126];
  v85 = (char *)v32[127];
  if (v85 != v84)
  {
    v86 = (v85 - v84) >> 4;
    do
    {
      v87 = v86 >> 1;
      v88 = (unsigned int *)&v84[16 * (v86 >> 1)];
      v90 = *v88;
      v89 = (char *)(v88 + 4);
      v86 += ~(v86 >> 1);
      if (v90 < a1)
        v84 = v89;
      else
        v86 = v87;
    }
    while (v86);
  }
  if (v84 == v85 || *(_DWORD *)v84 != a1)
    goto LABEL_71;
  v91 = *((_QWORD *)v84 + 1);
  *(_QWORD *)(v66 - 88) = v91;
  ++*(_DWORD *)(*((_QWORD *)v84 + 1) + 8);
  v92 = (char *)v32[138];
  v93 = (char *)v32[139];
  if (v93 != v92)
  {
    v94 = (v93 - v92) >> 4;
    do
    {
      v95 = v94 >> 1;
      v96 = (unsigned int *)&v92[16 * (v94 >> 1)];
      v98 = *v96;
      v97 = (char *)(v96 + 4);
      v94 += ~(v94 >> 1);
      if (v98 < a1)
        v92 = v97;
      else
        v94 = v95;
    }
    while (v94);
  }
  if (v92 == v93 || *(_DWORD *)v92 != a1)
  {
LABEL_71:
    v100 = *(_QWORD *)(v66 - 104);
    if (v100)
      --*(_DWORD *)(v100 + 8);
    v101 = *(_QWORD *)(v66 - 96);
    if (v101)
      --*(_DWORD *)(v101 + 8);
    v102 = *(_QWORD *)(v66 - 88);
    if (v102)
      --*(_DWORD *)(v102 + 8);
    v103 = *(_QWORD *)(v66 - 80);
    if (v103)
      --*(_DWORD *)(v103 + 8);
  }
  else
  {
    v99 = *((_QWORD *)v92 + 1);
    *(_QWORD *)(v66 - 80) = v99;
    ++*(_DWORD *)(*((_QWORD *)v92 + 1) + 8);
    if (*(_BYTE *)(v75 + 20) || *(_BYTE *)(v83 + 20) || *(_BYTE *)(v91 + 20) || *(_BYTE *)(v99 + 20))
    {
      *((_BYTE *)v32 + 1946) = 0;
      *((_BYTE *)v32 + 1944) = 0;
      *(int64x2_t *)(v32 + 241) = vaddq_s64(*(int64x2_t *)(v32 + 241), (int64x2_t)xmmword_210378060);
      *((_DWORD *)v32 + 752) = 0;
      *((_BYTE *)v32 + 3012) = 0;
      return;
    }
    --*(_DWORD *)(v75 + 8);
    --*(_DWORD *)(v83 + 8);
    *(_OWORD *)(v66 - 104) = 0u;
    --*(_DWORD *)(v91 + 8);
    --*(_DWORD *)(v99 + 8);
    *(_OWORD *)(v66 - 88) = 0u;
  }
  sub_20FC60030((uint64_t)v14, v67);
  sub_20E863438((uint64_t)&v279);
  v104 = (char *)a12[138];
  v105 = (char *)a12[139];
  if (v105 != v104)
  {
    v106 = (v105 - v104) >> 4;
    do
    {
      v107 = v106 >> 1;
      v108 = &v104[16 * (v106 >> 1)];
      v110 = *(_DWORD *)v108;
      v109 = v108 + 16;
      v106 += ~(v106 >> 1);
      if (v110 < a1)
        v104 = v109;
      else
        v106 = v107;
    }
    while (v106);
  }
  if (v104 == v105 || *(_DWORD *)v104 != a1)
  {
    v116 = 1;
    v117 = (char *)a12[66];
    v118 = (char *)a12[67];
    v119 = v117;
    v120 = v118 - v117;
    if (v118 == v117)
      goto LABEL_103;
    goto LABEL_98;
  }
  v111 = sub_20E86A980((_QWORD *)&v280 + 1, (uint64_t)"error: landmark variable ", 25);
  sub_20F6232BC((uint64_t)&__dst);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_dst = &__dst;
  else
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    size = __dst.__r_.__value_.__l.__size_;
  v114 = sub_20E86A980(v111, (uint64_t)p_dst, size);
  sub_20E86A980(v114, (uint64_t)" with ID ", 9);
  v115 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v115, (uint64_t)" was not found.\n", 16);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v116 = 0;
  v117 = (char *)a12[66];
  v118 = (char *)a12[67];
  v119 = v117;
  v120 = v118 - v117;
  if (v118 != v117)
  {
LABEL_98:
    v121 = v120 >> 4;
    v119 = v117;
    do
    {
      v122 = v121 >> 1;
      v123 = (unsigned int *)&v119[16 * (v121 >> 1)];
      v125 = *v123;
      v124 = (char *)(v123 + 4);
      v121 += ~(v121 >> 1);
      if (v125 < a1)
        v119 = v124;
      else
        v121 = v122;
    }
    while (v121);
  }
LABEL_103:
  if (v119 != v118 && *(_DWORD *)v119 == a1)
  {
    if (v118 != v117)
    {
      v126 = (v118 - v117) >> 4;
      do
      {
        v127 = v126 >> 1;
        v128 = (unsigned int *)&v117[16 * (v126 >> 1)];
        v130 = *v128;
        v129 = (char *)(v128 + 4);
        v126 += ~(v126 >> 1);
        if (v130 < a1)
          v117 = v129;
        else
          v126 = v127;
      }
      while (v126);
    }
    if (v117 == v118 || *(_DWORD *)v117 != a1)
      v117 = v118;
    v131 = *((_QWORD *)v117 + 1);
    v132 = sub_20E86A980((_QWORD *)&v280 + 1, (uint64_t)"debug: variable ", 16);
    sub_20F622C70((uint64_t)&__dst);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v133 = &__dst;
    else
      v133 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v134 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      v134 = __dst.__r_.__value_.__l.__size_;
    v135 = sub_20E86A980(v132, (uint64_t)v133, v134);
    sub_20E86A980(v135, (uint64_t)" with ID ", 9);
    v136 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v136, (uint64_t)" found (", 8);
    v137 = (_QWORD *)std::ostream::operator<<();
    v138 = sub_20E86A980(v137, (uint64_t)", ", 2);
    if (*(_BYTE *)(v131 + 20))
      v139 = "free";
    else
      v139 = "fixed";
    if (*(_BYTE *)(v131 + 20))
      v140 = 4;
    else
      v140 = 5;
    v141 = sub_20E86A980(v138, (uint64_t)v139, v140);
    sub_20E86A980(v141, (uint64_t)")\n", 2);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    v142 = *(unsigned __int8 *)(v131 + 20);
    v143 = (char *)a12[42];
    v144 = (char *)a12[43];
    v145 = v143;
    v146 = v144 - v143;
    if (v144 == v143)
      goto LABEL_144;
LABEL_139:
    v152 = v146 >> 4;
    v145 = v143;
    do
    {
      v153 = v152 >> 1;
      v154 = (unsigned int *)&v145[16 * (v152 >> 1)];
      v156 = *v154;
      v155 = (char *)(v154 + 4);
      v152 += ~(v152 >> 1);
      if (v156 < a2)
        v145 = v155;
      else
        v152 = v153;
    }
    while (v152);
    goto LABEL_144;
  }
  v147 = sub_20E86A980((_QWORD *)&v280 + 1, (uint64_t)"error: variable ", 16);
  sub_20F622C70((uint64_t)&__dst);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v148 = &__dst;
  else
    v148 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v149 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v149 = __dst.__r_.__value_.__l.__size_;
  v150 = sub_20E86A980(v147, (uint64_t)v148, v149);
  sub_20E86A980(v150, (uint64_t)" with ID ", 9);
  v151 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v151, (uint64_t)" not found\n", 11);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v116 = 0;
  v142 = 0;
  v143 = (char *)a12[42];
  v144 = (char *)a12[43];
  v145 = v143;
  v146 = v144 - v143;
  if (v144 != v143)
    goto LABEL_139;
LABEL_144:
  if (v145 != v144 && *(_DWORD *)v145 == a2)
  {
    if (v144 != v143)
    {
      v157 = (v144 - v143) >> 4;
      do
      {
        v158 = v157 >> 1;
        v159 = (unsigned int *)&v143[16 * (v157 >> 1)];
        v161 = *v159;
        v160 = (char *)(v159 + 4);
        v157 += ~(v157 >> 1);
        if (v161 < a2)
          v143 = v160;
        else
          v157 = v158;
      }
      while (v157);
    }
    if (v143 == v144 || *(_DWORD *)v143 != a2)
      v143 = v144;
    v162 = *((_QWORD *)v143 + 1);
    v163 = sub_20E86A980((_QWORD *)&v280 + 1, (uint64_t)"debug: variable ", 16);
    sub_20F622E88((uint64_t)&__dst);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v164 = &__dst;
    else
      v164 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v165 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      v165 = __dst.__r_.__value_.__l.__size_;
    v166 = sub_20E86A980(v163, (uint64_t)v164, v165);
    sub_20E86A980(v166, (uint64_t)" with ID ", 9);
    v167 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v167, (uint64_t)" found (", 8);
    v168 = (_QWORD *)std::ostream::operator<<();
    v169 = sub_20E86A980(v168, (uint64_t)", ", 2);
    if (*(_BYTE *)(v162 + 20))
      v170 = "free";
    else
      v170 = "fixed";
    if (*(_BYTE *)(v162 + 20))
      v171 = 4;
    else
      v171 = 5;
    v172 = sub_20E86A980(v169, (uint64_t)v170, v171);
    sub_20E86A980(v172, (uint64_t)")\n", 2);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    v142 |= *(unsigned __int8 *)(v162 + 20);
    v173 = (char *)a12[126];
    v174 = (char *)a12[127];
    v175 = v173;
    v176 = v174 - v173;
    if (v174 == v173)
      goto LABEL_185;
LABEL_180:
    v182 = v176 >> 4;
    v175 = v173;
    do
    {
      v183 = v182 >> 1;
      v184 = (unsigned int *)&v175[16 * (v182 >> 1)];
      v186 = *v184;
      v185 = (char *)(v184 + 4);
      v182 += ~(v182 >> 1);
      if (v186 < a1)
        v175 = v185;
      else
        v182 = v183;
    }
    while (v182);
    goto LABEL_185;
  }
  v177 = sub_20E86A980((_QWORD *)&v280 + 1, (uint64_t)"error: variable ", 16);
  sub_20F622E88((uint64_t)&__dst);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v178 = &__dst;
  else
    v178 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v179 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v179 = __dst.__r_.__value_.__l.__size_;
  v180 = sub_20E86A980(v177, (uint64_t)v178, v179);
  sub_20E86A980(v180, (uint64_t)" with ID ", 9);
  v181 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v181, (uint64_t)" not found\n", 11);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v116 = 0;
  v173 = (char *)a12[126];
  v174 = (char *)a12[127];
  v175 = v173;
  v176 = v174 - v173;
  if (v174 != v173)
    goto LABEL_180;
LABEL_185:
  if (v175 != v174 && *(_DWORD *)v175 == a1)
  {
    if (v174 != v173)
    {
      v187 = (v174 - v173) >> 4;
      do
      {
        v188 = v187 >> 1;
        v189 = (unsigned int *)&v173[16 * (v187 >> 1)];
        v191 = *v189;
        v190 = (char *)(v189 + 4);
        v187 += ~(v187 >> 1);
        if (v191 < a1)
          v173 = v190;
        else
          v187 = v188;
      }
      while (v187);
    }
    if (v173 == v174 || *(_DWORD *)v173 != a1)
      v173 = v174;
    v192 = *((_QWORD *)v173 + 1);
    v193 = sub_20E86A980((_QWORD *)&v280 + 1, (uint64_t)"debug: variable ", 16);
    sub_20F6230A4((uint64_t)&__dst);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v194 = &__dst;
    else
      v194 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v195 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      v195 = __dst.__r_.__value_.__l.__size_;
    v196 = sub_20E86A980(v193, (uint64_t)v194, v195);
    sub_20E86A980(v196, (uint64_t)" with ID ", 9);
    v197 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v197, (uint64_t)" found (", 8);
    v198 = (_QWORD *)std::ostream::operator<<();
    v199 = sub_20E86A980(v198, (uint64_t)", ", 2);
    if (*(_BYTE *)(v192 + 20))
      v200 = "free";
    else
      v200 = "fixed";
    if (*(_BYTE *)(v192 + 20))
      v201 = 4;
    else
      v201 = 5;
    v202 = sub_20E86A980(v199, (uint64_t)v200, v201);
    sub_20E86A980(v202, (uint64_t)")\n", 2);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    v142 |= *(unsigned __int8 *)(v192 + 20);
    v203 = (char *)a12[138];
    v204 = (char *)a12[139];
    v205 = v203;
    v206 = v204 - v203;
    if (v204 == v203)
      goto LABEL_226;
LABEL_221:
    v212 = v206 >> 4;
    v205 = v203;
    do
    {
      v213 = v212 >> 1;
      v214 = (unsigned int *)&v205[16 * (v212 >> 1)];
      v216 = *v214;
      v215 = (char *)(v214 + 4);
      v212 += ~(v212 >> 1);
      if (v216 < a1)
        v205 = v215;
      else
        v212 = v213;
    }
    while (v212);
    goto LABEL_226;
  }
  v207 = sub_20E86A980((_QWORD *)&v280 + 1, (uint64_t)"error: variable ", 16);
  sub_20F6230A4((uint64_t)&__dst);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v208 = &__dst;
  else
    v208 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v209 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v209 = __dst.__r_.__value_.__l.__size_;
  v210 = sub_20E86A980(v207, (uint64_t)v208, v209);
  sub_20E86A980(v210, (uint64_t)" with ID ", 9);
  v211 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v211, (uint64_t)" not found\n", 11);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v116 = 0;
  v203 = (char *)a12[138];
  v204 = (char *)a12[139];
  v205 = v203;
  v206 = v204 - v203;
  if (v204 != v203)
    goto LABEL_221;
LABEL_226:
  if (v205 == v204 || *(_DWORD *)v205 != a1)
  {
    v236 = sub_20E86A980((_QWORD *)&v280 + 1, (uint64_t)"error: variable ", 16);
    sub_20F6232BC((uint64_t)&__dst);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v237 = &__dst;
    else
      v237 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v238 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      v238 = __dst.__r_.__value_.__l.__size_;
    v239 = sub_20E86A980(v236, (uint64_t)v237, v238);
    sub_20E86A980(v239, (uint64_t)" with ID ", 9);
    v240 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v240, (uint64_t)" not found\n", 11);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__dst.__r_.__value_.__l.__data_);
      v116 = 0;
      v233 = (char *)a12[201];
      v234 = (char *)a12[202];
      v235 = v234 - v233;
      if (v234 == v233)
        goto LABEL_279;
    }
    else
    {
      v116 = 0;
      v233 = (char *)a12[201];
      v234 = (char *)a12[202];
      v235 = v234 - v233;
      if (v234 == v233)
        goto LABEL_279;
    }
    goto LABEL_263;
  }
  if (v204 != v203)
  {
    v217 = (v204 - v203) >> 4;
    do
    {
      v218 = v217 >> 1;
      v219 = (unsigned int *)&v203[16 * (v217 >> 1)];
      v221 = *v219;
      v220 = (char *)(v219 + 4);
      v217 += ~(v217 >> 1);
      if (v221 < a1)
        v203 = v220;
      else
        v217 = v218;
    }
    while (v217);
  }
  if (v203 == v204 || *(_DWORD *)v203 != a1)
    v203 = v204;
  v222 = *((_QWORD *)v203 + 1);
  v223 = sub_20E86A980((_QWORD *)&v280 + 1, (uint64_t)"debug: variable ", 16);
  sub_20F6232BC((uint64_t)&__dst);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v224 = &__dst;
  else
    v224 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v225 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v225 = __dst.__r_.__value_.__l.__size_;
  v226 = sub_20E86A980(v223, (uint64_t)v224, v225);
  sub_20E86A980(v226, (uint64_t)" with ID ", 9);
  v227 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v227, (uint64_t)" found (", 8);
  v228 = (_QWORD *)std::ostream::operator<<();
  v229 = sub_20E86A980(v228, (uint64_t)", ", 2);
  if (*(_BYTE *)(v222 + 20))
    v230 = "free";
  else
    v230 = "fixed";
  if (*(_BYTE *)(v222 + 20))
    v231 = 4;
  else
    v231 = 5;
  v232 = sub_20E86A980(v229, (uint64_t)v230, v231);
  sub_20E86A980(v232, (uint64_t)")\n", 2);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v142 |= *(unsigned __int8 *)(v222 + 20);
  v233 = (char *)a12[201];
  v234 = (char *)a12[202];
  v235 = v234 - v233;
  if (v234 != v233)
  {
LABEL_263:
    v241 = 0x86BCA1AF286BCA1BLL * (v235 >> 4);
    do
    {
      v242 = v241 >> 1;
      v243 = &v233[304 * (v241 >> 1)];
      v244 = *(_QWORD *)v243;
      v245 = v243 + 304;
      v241 += ~(v241 >> 1);
      if (v244 < v31)
        v233 = v245;
      else
        v241 = v242;
    }
    while (v241);
    if (v234 != v233 && *(_QWORD *)v233 == v31)
    {
      v246 = sub_20E86A980((_QWORD *)&v280 + 1, (uint64_t)"error: factor ", 14);
      sub_20FC601D8((uint64_t)&__dst);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v247 = &__dst;
      else
        v247 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v248 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      else
        v248 = __dst.__r_.__value_.__l.__size_;
      v249 = sub_20E86A980(v246, (uint64_t)v247, v248);
      sub_20E86A980(v249, (uint64_t)" with the same ID ", 18);
      v250 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v250, (uint64_t)" already exists.\n", 17);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      v116 = 0;
    }
  }
LABEL_279:
  if (v142)
  {
    v251 = v116 != 0;
    v252 = v288[0];
    if ((v288[0] & 0x10) == 0)
      goto LABEL_281;
LABEL_291:
    v260 = v287;
    if (v287 < *((_QWORD *)&v284 + 1))
    {
      v287 = *((_QWORD *)&v284 + 1);
      v260 = *((_QWORD *)&v284 + 1);
    }
    v261 = (const void *)v284;
    v253 = v260 - v284;
    if (v260 - (unint64_t)v284 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_319;
    goto LABEL_294;
  }
  v255 = sub_20E86A980((_QWORD *)&v280 + 1, (uint64_t)"error: factor ", 14);
  sub_20FC601D8((uint64_t)&__dst);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v256 = &__dst;
  else
    v256 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v257 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v257 = __dst.__r_.__value_.__l.__size_;
  v258 = sub_20E86A980(v255, (uint64_t)v256, v257);
  sub_20E86A980(v258, (uint64_t)" with ID ", 9);
  v259 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v259, (uint64_t)" cannot be added: all variables are fixed.\n", 43);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    v251 = 0;
    v252 = v288[0];
    if ((v288[0] & 0x10) != 0)
      goto LABEL_291;
  }
  else
  {
    v251 = 0;
    v252 = v288[0];
    if ((v288[0] & 0x10) != 0)
      goto LABEL_291;
  }
LABEL_281:
  if ((v252 & 8) == 0)
  {
    v253 = 0;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
    v254 = &__dst;
    goto LABEL_301;
  }
  v261 = v282;
  v253 = *((_QWORD *)&v283 + 1) - (_QWORD)v282;
  if (*((_QWORD *)&v283 + 1) - (_QWORD)v282 >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_319:
    sub_20E860B7C();
LABEL_294:
  if (v253 >= 0x17)
  {
    v262 = (v253 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v253 | 7) != 0x17)
      v262 = v253 | 7;
    v263 = v262 + 1;
    v254 = (std::string *)operator new(v262 + 1);
    __dst.__r_.__value_.__l.__size_ = v253;
    __dst.__r_.__value_.__r.__words[2] = v263 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v254;
    goto LABEL_300;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v253;
  v254 = &__dst;
  if (v253)
LABEL_300:
    memmove(v254, v261, v253);
LABEL_301:
  v254->__r_.__value_.__s.__data_[v253] = 0;
  v274 = __dst;
  v275 = v251;
  v279 = *MEMORY[0x24BEDB7F0];
  v264 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(uint64_t *)((char *)&v279 + *(_QWORD *)(v279 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  *((_QWORD *)&v280 + 1) = v264;
  *(_QWORD *)&v281 = MEMORY[0x24BEDB848] + 16;
  if (SHIBYTE(v286) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290]((char *)v288 + 8);
  v265 = std::string::insert(&v274, 0, "Failed to add the factor into linear system. this could be due to duplicated factor IDs ('", 0x5AuLL);
  v266 = *(_OWORD *)&v265->__r_.__value_.__l.__data_;
  v276.__r_.__value_.__r.__words[2] = v265->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v276.__r_.__value_.__l.__data_ = v266;
  v265->__r_.__value_.__l.__size_ = 0;
  v265->__r_.__value_.__r.__words[2] = 0;
  v265->__r_.__value_.__r.__words[0] = 0;
  v267 = std::string::append(&v276, "').", 3uLL);
  v268 = *(_OWORD *)&v267->__r_.__value_.__l.__data_;
  v278 = v267->__r_.__value_.__r.__words[2];
  *(_OWORD *)v277 = v268;
  v267->__r_.__value_.__l.__size_ = 0;
  v267->__r_.__value_.__r.__words[2] = 0;
  v267->__r_.__value_.__r.__words[0] = 0;
  if (v278 >= 0)
    v269 = v277;
  else
    v269 = (void **)v277[0];
  if (v278 >= 0)
    v270 = HIBYTE(v278);
  else
    v270 = (uint64_t)v277[1];
  v271 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOMapLandmarkFactorUtil.h", 95, (uint64_t)"result", 6, (uint64_t)v269, v270, (void (*)(void **))sub_21023DDB0);
  if (SHIBYTE(v278) < 0)
  {
    operator delete(v277[0]);
    if ((SHIBYTE(v276.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_311:
      if ((SHIBYTE(v274.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_312;
      goto LABEL_316;
    }
  }
  else if ((SHIBYTE(v276.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_311;
  }
  operator delete(v276.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v274.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_312:
    if (!v271)
      return;
LABEL_317:
    abort();
  }
LABEL_316:
  operator delete(v274.__r_.__value_.__l.__data_);
  if (v271)
    goto LABEL_317;
}

void sub_20FC5FF40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,char a36)
{
  uint64_t v36;

  if (*(char *)(v36 - 129) < 0)
  {
    operator delete(*(void **)(v36 - 152));
    sub_20E863784((uint64_t)&a36);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void sub_20FC60030(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;

  v2 = a2;
  v4 = a2 + 304;
  v5 = *(_QWORD *)(a1 + 8);
  if (a2 + 304 != v5)
  {
    do
    {
      *(_QWORD *)v2 = *(_QWORD *)v4;
      *(_QWORD *)(v2 + 8) = *(_QWORD *)(v4 + 8);
      *(_OWORD *)(v2 + 16) = *(_OWORD *)(v4 + 16);
      *(_OWORD *)(v2 + 32) = *(_OWORD *)(v4 + 32);
      *(_QWORD *)(v2 + 48) = *(_QWORD *)(v4 + 48);
      *(_QWORD *)(v2 + 120) = *(_QWORD *)(v4 + 120);
      v6 = *(_OWORD *)(v4 + 104);
      *(_OWORD *)(v2 + 88) = *(_OWORD *)(v4 + 88);
      *(_OWORD *)(v2 + 104) = v6;
      v7 = *(_OWORD *)(v4 + 72);
      *(_OWORD *)(v2 + 56) = *(_OWORD *)(v4 + 56);
      *(_OWORD *)(v2 + 72) = v7;
      *(_OWORD *)(v2 + 128) = *(_OWORD *)(v4 + 128);
      *(_OWORD *)(v2 + 144) = *(_OWORD *)(v4 + 144);
      *(_OWORD *)(v2 + 160) = *(_OWORD *)(v4 + 160);
      *(_OWORD *)(v2 + 176) = *(_OWORD *)(v4 + 176);
      *(_DWORD *)(v2 + 192) = *(_DWORD *)(v4 + 192);
      *(_QWORD *)(v2 + 200) = *(_QWORD *)(v4 + 200);
      *(_QWORD *)(v2 + 208) = *(_QWORD *)(v4 + 208);
      *(_QWORD *)(v2 + 216) = *(_QWORD *)(v4 + 216);
      *(_QWORD *)(v2 + 224) = *(_QWORD *)(v4 + 224);
      *(_OWORD *)(v2 + 232) = *(_OWORD *)(v4 + 232);
      *(_OWORD *)(v2 + 248) = *(_OWORD *)(v4 + 248);
      *(_QWORD *)(v2 + 264) = *(_QWORD *)(v4 + 264);
      *(_BYTE *)(v2 + 272) = *(_BYTE *)(v4 + 272);
      v8 = *(_OWORD *)(v4 + 280);
      *(_QWORD *)(v4 + 280) = 0;
      *(_QWORD *)(v4 + 288) = 0;
      v9 = *(std::__shared_weak_count **)(v2 + 288);
      *(_OWORD *)(v2 + 280) = v8;
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      *(_BYTE *)(v2 + 296) = *(_BYTE *)(v4 + 296);
      v4 += 304;
      v2 += 304;
    }
    while (v4 != v5);
    v4 = *(_QWORD *)(a1 + 8);
  }
  while (v4 != v2)
  {
    v12 = *(std::__shared_weak_count **)(v4 - 16);
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v4 -= 304;
  }
  *(_QWORD *)(a1 + 8) = v2;
}

char *sub_20FC601D8(uint64_t a1)
{
  char *v2;
  char *result;
  unint64_t v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  size_t v8;
  void *v9;
  unint64_t v10;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v16;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)a1 = v2;
  *(_OWORD *)(a1 + 8) = xmmword_2102DC8D0;
  strcpy(v2, "cv3d::vio::VIOMapLandmarkFactor<double>]");
  result = (char *)sub_20E8D1238((_QWORD *)a1, 39, 1uLL);
  v4 = *(unsigned __int8 *)(a1 + 23);
  v5 = v4;
  v7 = *(_QWORD **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  if ((v4 & 0x80u) == 0)
    v8 = *(unsigned __int8 *)(a1 + 23);
  else
    v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (v4 & 0x80u) == 0 ? (void *)a1 : *(void **)a1;
    result = (char *)memchr(v9, 60, v8);
    v10 = result - (_BYTE *)v9;
    if (result && v10 != -1)
    {
      if ((char)v4 < 0)
      {
        if (v6 >= v10)
        {
          *(_QWORD *)(a1 + 8) = v10;
          goto LABEL_17;
        }
      }
      else if (v10 <= v4)
      {
        *(_BYTE *)(a1 + 23) = v10 & 0x7F;
        v7 = (_QWORD *)a1;
LABEL_17:
        *((_BYTE *)v7 + v10) = 0;
        result = (char *)std::string::append((std::string *)a1, "<...>", 5uLL);
        v4 = *(unsigned __int8 *)(a1 + 23);
        v7 = *(_QWORD **)a1;
        v6 = *(_QWORD *)(a1 + 8);
        v5 = *(_BYTE *)(a1 + 23);
        goto LABEL_18;
      }
      sub_20E89FD0C();
    }
  }
LABEL_18:
  if (v5 < 0)
  {
    v12 = (char *)v7;
  }
  else
  {
    v6 = v4;
    v12 = (char *)a1;
  }
  if (v6 >= 5)
  {
    v13 = &v12[v6];
    v14 = v6;
    result = v12;
    do
    {
      result = (char *)memchr(result, 99, v14 - 4);
      if (!result)
        break;
      if (*(_DWORD *)result == 979465827 && result[4] == 58)
      {
        if (result != v13 && result == v12)
        {
          v16 = 5;
          return (char *)sub_20E8D1238((_QWORD *)a1, 0, v16);
        }
        break;
      }
      ++result;
      v14 = v13 - result;
    }
    while (v13 - result >= 5);
    if (v6 >= 7)
    {
      result = v12;
      do
      {
        result = (char *)memchr(result, 58, v6 - 6);
        if (!result)
          break;
        if (*(_DWORD *)result == 1986214458 && *(_DWORD *)(result + 3) == 976904566)
        {
          if (result != v13 && result == v12)
          {
            v16 = 7;
            return (char *)sub_20E8D1238((_QWORD *)a1, 0, v16);
          }
          return result;
        }
        ++result;
        v6 = v13 - result;
      }
      while (v13 - result >= 7);
    }
  }
  return result;
}

void sub_20FC603D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20FC603F0(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t *result;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  int64x2_t v18;
  int64x2_t *v19;
  uint64_t v20;
  uint64_t *v21;
  int64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64x2_t *v25;
  unint64_t v26;
  int64x2_t v27;
  BOOL v28;
  unint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64x2_t *v35;
  uint64_t v36;
  int64x2_t v37;

  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(uint64_t **)a1;
  result = v7;
  if (a2 > (v6 - (uint64_t)v7) >> 3)
  {
    if (v7)
    {
      *(_QWORD *)(a1 + 8) = v7;
      operator delete(v7);
      v6 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (a2 >> 61)
      goto LABEL_38;
    v9 = v6 >> 2;
    if (v6 >> 2 <= a2)
      v9 = a2;
    v10 = (unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8;
    v11 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v10)
      v11 = v9;
    if (v11 >> 61)
LABEL_38:
      sub_20E867F44();
    v12 = v11;
    result = (uint64_t *)operator new(8 * v11);
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 16) = &result[v12];
    v13 = &result[a2];
    v14 = *a3;
    v15 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    v16 = (unint64_t *)result;
    if (v15 < 3)
      goto LABEL_41;
    v17 = v15 + 1;
    v16 = (unint64_t *)&result[v17 & 0x3FFFFFFFFFFFFFFCLL];
    v18 = vdupq_n_s64(v14);
    v19 = (int64x2_t *)(result + 2);
    v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v19[-1] = v18;
      *v19 = v18;
      v19 += 2;
      v20 -= 4;
    }
    while (v20);
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_41:
      do
        *v16++ = v14;
      while (v16 != (unint64_t *)v13);
    }
    goto LABEL_37;
  }
  v21 = *(uint64_t **)(a1 + 8);
  v22 = (char *)v21 - (char *)v7;
  v23 = v21 - v7;
  if (v23 >= a2)
    v24 = a2;
  else
    v24 = v21 - v7;
  if (v24)
  {
    if (v24 < 8 || v7 < a3 + 1 && &v7[v24] > a3)
      goto LABEL_42;
    result = &v7[v24 & 0xFFFFFFFFFFFFFFFCLL];
    v25 = (int64x2_t *)(v7 + 2);
    v26 = v24 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v27 = vdupq_lane_s64(*a3, 0);
      v25[-1] = v27;
      *v25 = v27;
      v25 += 2;
      v26 -= 4;
    }
    while (v26);
    v28 = v24 == (v24 & 0xFFFFFFFFFFFFFFFCLL);
    v24 &= 3u;
    if (!v28)
    {
LABEL_42:
      do
      {
        *result++ = *a3;
        --v24;
      }
      while (v24);
    }
  }
  v10 = a2 >= v23;
  v29 = a2 - v23;
  if (v29 == 0 || !v10)
  {
    v13 = &v7[a2];
LABEL_37:
    *(_QWORD *)(a1 + 8) = v13;
    return result;
  }
  v30 = &v21[v29];
  v31 = v22 & 0xFFFFFFFFFFFFFFF8;
  v32 = 8 * a2 - (v22 & 0xFFFFFFFFFFFFFFF8) - 8;
  if (v32 < 0x98 || v21 < a3 + 1 && (uint64_t *)((char *)&v21[a2] - v31) > a3)
    goto LABEL_43;
  v33 = (v32 >> 3) + 1;
  v34 = &v21[v33 & 0x3FFFFFFFFFFFFFFCLL];
  v35 = (int64x2_t *)(v21 + 2);
  v36 = v33 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v37 = vdupq_lane_s64(*a3, 0);
    v35[-1] = v37;
    *v35 = v37;
    v35 += 2;
    v36 -= 4;
  }
  while (v36);
  v21 = v34;
  if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_43:
    do
      *v21++ = *a3;
    while (v21 != v30);
  }
  *(_QWORD *)(a1 + 8) = v30;
  return result;
}

_OWORD *sub_20FC6061C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _OWORD *result;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;

  v6 = *(_QWORD *)(a1 + 16);
  result = *(_OWORD **)a1;
  if (0x8F5C28F5C28F5C29 * ((v6 - (uint64_t)result) >> 3) < a2)
  {
    if (result)
    {
      *(_QWORD *)(a1 + 8) = result;
      operator delete(result);
      v6 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (a2 > 0x147AE147AE147AELL)
      goto LABEL_25;
    v8 = 0x8F5C28F5C28F5C29 * (v6 >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= a2)
      v9 = a2;
    v10 = v8 >= 0xA3D70A3D70A3D7 ? 0x147AE147AE147AELL : v9;
    if (v10 > 0x147AE147AE147AELL)
LABEL_25:
      sub_20E867F44();
    v11 = 200 * v10;
    result = operator new(200 * v10);
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 8) = result;
    *(_QWORD *)(a1 + 16) = (char *)result + v11;
    v12 = 200 * a2;
    v13 = (uint64_t)result + 200 * a2;
    do
    {
      v14 = *(_OWORD *)(a3 + 176);
      result[10] = *(_OWORD *)(a3 + 160);
      result[11] = v14;
      *((_QWORD *)result + 24) = *(_QWORD *)(a3 + 192);
      v15 = *(_OWORD *)(a3 + 112);
      result[6] = *(_OWORD *)(a3 + 96);
      result[7] = v15;
      v16 = *(_OWORD *)(a3 + 144);
      result[8] = *(_OWORD *)(a3 + 128);
      result[9] = v16;
      v17 = *(_OWORD *)(a3 + 48);
      result[2] = *(_OWORD *)(a3 + 32);
      result[3] = v17;
      v18 = *(_OWORD *)(a3 + 80);
      result[4] = *(_OWORD *)(a3 + 64);
      result[5] = v18;
      v19 = *(_OWORD *)(a3 + 16);
      *result = *(_OWORD *)a3;
      result[1] = v19;
      result = (_OWORD *)((char *)result + 200);
      v12 -= 200;
    }
    while (v12);
    goto LABEL_24;
  }
  v20 = (*(_QWORD *)(a1 + 8) - (_QWORD)result) / 200;
  if (v20 >= a2)
    v21 = a2;
  else
    v21 = (*(_QWORD *)(a1 + 8) - (_QWORD)result) / 200;
  for (; v21; --v21)
  {
    *result = *(_OWORD *)a3;
    v22 = *(_OWORD *)(a3 + 16);
    v23 = *(_OWORD *)(a3 + 32);
    v24 = *(_OWORD *)(a3 + 64);
    result[3] = *(_OWORD *)(a3 + 48);
    result[4] = v24;
    result[1] = v22;
    result[2] = v23;
    v25 = *(_OWORD *)(a3 + 80);
    v26 = *(_OWORD *)(a3 + 96);
    v27 = *(_OWORD *)(a3 + 128);
    result[7] = *(_OWORD *)(a3 + 112);
    result[8] = v27;
    result[5] = v25;
    result[6] = v26;
    v28 = *(_OWORD *)(a3 + 144);
    v29 = *(_OWORD *)(a3 + 160);
    v30 = *(_OWORD *)(a3 + 176);
    *((_QWORD *)result + 24) = *(_QWORD *)(a3 + 192);
    result[10] = v29;
    result[11] = v30;
    result[9] = v28;
    result = (_OWORD *)((char *)result + 200);
  }
  if (a2 <= v20)
  {
    v13 = *(_QWORD *)a1 + 200 * a2;
LABEL_24:
    *(_QWORD *)(a1 + 8) = v13;
    return result;
  }
  v31 = *(_QWORD *)(a1 + 8);
  v32 = v31 + 200 * (a2 - v20);
  v33 = -200 * v20 + 200 * a2;
  do
  {
    *(_OWORD *)v31 = *(_OWORD *)a3;
    v34 = *(_OWORD *)(a3 + 16);
    v35 = *(_OWORD *)(a3 + 32);
    v36 = *(_OWORD *)(a3 + 64);
    *(_OWORD *)(v31 + 48) = *(_OWORD *)(a3 + 48);
    *(_OWORD *)(v31 + 64) = v36;
    *(_OWORD *)(v31 + 16) = v34;
    *(_OWORD *)(v31 + 32) = v35;
    v37 = *(_OWORD *)(a3 + 80);
    v38 = *(_OWORD *)(a3 + 96);
    v39 = *(_OWORD *)(a3 + 128);
    *(_OWORD *)(v31 + 112) = *(_OWORD *)(a3 + 112);
    *(_OWORD *)(v31 + 128) = v39;
    *(_OWORD *)(v31 + 80) = v37;
    *(_OWORD *)(v31 + 96) = v38;
    v40 = *(_OWORD *)(a3 + 144);
    v41 = *(_OWORD *)(a3 + 160);
    v42 = *(_OWORD *)(a3 + 176);
    *(_QWORD *)(v31 + 192) = *(_QWORD *)(a3 + 192);
    *(_OWORD *)(v31 + 160) = v41;
    *(_OWORD *)(v31 + 176) = v42;
    *(_OWORD *)(v31 + 144) = v40;
    v31 += 200;
    v33 -= 200;
  }
  while (v33);
  *(_QWORD *)(a1 + 8) = v32;
  return result;
}

unint64_t sub_20FC60874(unint64_t result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  _QWORD *v7;
  uint64_t *v8;
  int v9;
  float64x2_t v10;
  unint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  unsigned int v20;
  unsigned int v21;
  unint64_t v23;
  unsigned int v24;
  BOOL v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  float64x2_t v31;
  double v32;
  int32x2_t v33;
  uint64_t v34;
  unint64_t v35;
  float64x2_t v36;
  double **v39;
  double *v40;

  v2 = result;
  v3 = *(_QWORD *)(a2 + 16);
  if (*(_BYTE *)(v3 + 112))
  {
    if (*(_BYTE *)(v3 + 72))
    {
LABEL_3:
      v4 = *(_QWORD *)(v3 + 120);
      v5 = *(_QWORD *)(v3 + 128);
      v6 = 0.0;
      if (v4 == v5)
        goto LABEL_46;
      v7 = *(_QWORD **)(v2 + 8);
      v8 = (uint64_t *)v7[1];
      if (!v8)
        goto LABEL_46;
      v9 = 0;
      v10 = 0uLL;
      __asm
      {
        FMOV            V1.2D, #0.5
        FMOV            V2.2D, #7.0
        FMOV            V3.2D, #-1.0
      }
      while (1)
      {
        result = *(unsigned int *)(v4 + 16);
        v17 = *(_QWORD *)v4;
        v18 = v7 + 1;
        v19 = v8;
        v20 = *(_DWORD *)(v4 + 8);
        do
        {
          while (1)
          {
            v21 = *((_DWORD *)v19 + 12);
            _CF = v21 >= result;
            if (v21 != (_DWORD)result)
              goto LABEL_13;
            v23 = v19[4];
            if (v23 >= v17)
              break;
LABEL_8:
            v19 = (uint64_t *)v19[1];
            if (!v19)
              goto LABEL_16;
          }
          if (v23 != v17)
            goto LABEL_15;
          _CF = *((_DWORD *)v19 + 10) >= v20;
LABEL_13:
          if (!_CF)
            goto LABEL_8;
LABEL_15:
          v18 = v19;
          v19 = (uint64_t *)*v19;
        }
        while (v19);
LABEL_16:
        if (v18 == v7 + 1)
          goto LABEL_6;
        v24 = *((_DWORD *)v18 + 12);
        v25 = result >= v24;
        if ((_DWORD)result != v24)
          goto LABEL_21;
        result = v18[4];
        if (v17 < result)
          goto LABEL_6;
        if (v17 == result)
        {
          v25 = v20 >= *((_DWORD *)v18 + 10);
LABEL_21:
          if (!v25)
          {
LABEL_6:
            v4 += 64;
            if (v4 == v5)
              goto LABEL_46;
            continue;
          }
        }
        v26 = (_QWORD *)*v7;
        if ((_QWORD *)*v7 == v18)
        {
          v27 = 0;
        }
        else
        {
          v27 = 0;
          do
          {
            v28 = (_QWORD *)v26[1];
            if (v28)
            {
              do
              {
                v29 = v28;
                v28 = (_QWORD *)*v28;
              }
              while (v28);
            }
            else
            {
              do
              {
                v29 = (_QWORD *)v26[2];
                _ZF = *v29 == (_QWORD)v26;
                v26 = v29;
              }
              while (!_ZF);
            }
            ++v27;
            v26 = v29;
          }
          while (v29 != v18);
        }
        v30 = *(_QWORD **)(v2 + 24);
        ++*(_QWORD *)(**(_QWORD **)(v2 + 16) + 8 * v27);
        v31 = vaddq_f64(vmulq_f64(vaddq_f64(vmulq_f64(*(float64x2_t *)(v4 + 40), _Q1), _Q1), _Q2), _Q3);
        if (v31.f64[0] <= 4.0)
          v32 = v31.f64[0];
        else
          v32 = 4.0;
        v33 = vmovn_s64(vcltzq_f64(v31));
        if ((v33.i8[0] & 1) != 0)
          result = 0;
        else
          result = (unint64_t)v32;
        v31.f64[0] = v31.f64[1];
        if (v31.f64[1] > 4.0)
          v31.f64[0] = 4.0;
        v34 = *v30 + 200 * v27;
        v35 = 5 * (unint64_t)v31.f64[0];
        if ((v33.i8[4] & 1) != 0)
          v35 = 0;
        ++*(_QWORD *)(v34 + 8 * (v35 + result));
        v36 = *(float64x2_t *)(v4 + 40);
        if (v9)
        {
          _D16 = vsubq_f64(v10, v36).f64[1];
          __asm { FMLA            D7, D16, V5.D[1] }
          v6 = v6 + sqrt(_D7);
        }
        v9 = 1;
        v4 += 64;
        v10 = v36;
        if (v4 == v5)
        {
LABEL_46:
          v39 = *(double ***)v2;
          v40 = **(double ***)v2;
          *v40 = v6;
          *v39 = v40 + 1;
          return result;
        }
      }
    }
  }
  else
  {
    result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOMapTrackClassifier.hpp", 72, (uint64_t)"track->getStructure()", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    if ((_DWORD)result)
      abort();
    v3 = *(_QWORD *)(a2 + 16);
    if (*(_BYTE *)(v3 + 72))
      goto LABEL_3;
  }
  **(_QWORD **)v2 += 8;
  return result;
}

void sub_20FC60B08(uint64_t **a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int64x2_t v7;
  char *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t *v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t v19;
  unsigned int v20;
  BOOL v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v28;
  uint64_t *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int *v35;
  char *v36;
  unsigned int v37;
  double v38;
  double v39;
  double v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  char *v46;
  char *v47;
  unint64_t v48;
  unint64_t v49;
  unsigned int *v50;
  char *v51;
  unsigned int v52;
  uint64_t v53;
  _BOOL4 v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  float64x2_t v60;
  double v62;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v68;
  double v70;
  double v71;
  double v72;
  unsigned int v73;
  float64x2_t v78;
  double v87;
  float64x2_t v88;
  float64x2_t v92;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v98;
  float64x2_t v100;
  float64x2_t v102;
  double v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v107;
  float64x2_t v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v127;
  double v128;
  double v129;
  double v130;
  double v131;
  float64x2_t v133;
  float64x2_t v135;
  float64x2_t v137;
  double v138;
  int32x2_t v139;
  unint64_t v140;
  unint64_t v141;
  double v142;
  float64x2_t v143;
  double v144;
  float v148;
  float v149;
  uint64_t *v150;
  double v151;
  int v152;
  unint64_t v153;
  char *v154;
  char *v155;
  char *v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  void **v164;
  double v165;
  unint64_t v166;
  char *v167;
  char *v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  char *v173;
  char *v174;
  int64x2_t v175;
  char *v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  float64x2_t v185;
  float64x2_t v186;
  double v187;
  double v188;
  float64_t v189;
  float64_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  double v195;
  double v196;
  double v197;
  double v198;
  float64x2_t v199;
  float64x2_t v200;
  float64_t v201;
  float64_t v202;
  uint64_t v203;
  double v204;
  double v205;
  double v206;
  double v207;
  double v208;
  double v209;
  double v210;
  float64x2_t v211;
  double v212;
  float v213;
  float v214;
  double v215;
  float v216;
  float64x2_t v217;
  float v218;
  float64x2_t v219;
  float v220;
  uint64_t v221;
  float v222;
  float64x2_t v223;
  float v224;
  float64x2_t v225;
  double v226;
  float64x2_t v228;
  float64x2_t v229;
  __int32 v230;
  float v231;

  v3 = *(_QWORD *)(a2 + 16);
  if (!*(_BYTE *)(v3 + 112))
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOMapTrackClassifier.hpp", 785, (uint64_t)"track->getStructure()", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_120;
    }
    v3 = *(_QWORD *)(a2 + 16);
  }
  v4 = *(unsigned __int8 *)(v3 + 72);
  v203 = **a1;
  **a1 = v203 + 1;
  if (!v4)
    return;
  v5 = *(_QWORD *)(v3 + 120);
  v6 = *(_QWORD *)(v3 + 128);
  if (v5 == v6 || !a1[1][1])
    return;
  while (2)
  {
    v9 = a1[1];
    v12 = (uint64_t *)v9[1];
    v10 = v9 + 1;
    v11 = v12;
    if (!v12)
      goto LABEL_10;
    v13 = *(_DWORD *)(v5 + 16);
    v14 = *(_DWORD *)(v5 + 8);
    v15 = v10;
    v16 = *(_QWORD *)v5;
    do
    {
      while (1)
      {
        v17 = *((_DWORD *)v11 + 12);
        _CF = v17 >= v13;
        if (v17 != v13)
          goto LABEL_18;
        v19 = v11[4];
        if (v19 >= v16)
          break;
LABEL_13:
        v11 = (uint64_t *)v11[1];
        if (!v11)
          goto LABEL_21;
      }
      if (v19 != v16)
        goto LABEL_20;
      _CF = *((_DWORD *)v11 + 10) >= v14;
LABEL_18:
      if (!_CF)
        goto LABEL_13;
LABEL_20:
      v15 = v11;
      v11 = (uint64_t *)*v11;
    }
    while (v11);
LABEL_21:
    if (v15 != v10)
    {
      v20 = *((_DWORD *)v15 + 12);
      v21 = v13 >= v20;
      if (v13 != v20)
        goto LABEL_26;
      v22 = v15[4];
      if (v16 >= v22)
      {
        if (v16 != v22)
          goto LABEL_28;
        v21 = v14 >= *((_DWORD *)v15 + 10);
LABEL_26:
        if (v21)
        {
LABEL_28:
          v23 = (uint64_t *)*a1[1];
          if (v23 == v15)
          {
            v24 = 0;
          }
          else
          {
            v24 = 0;
            do
            {
              v25 = (uint64_t *)v23[1];
              if (v25)
              {
                do
                {
                  v26 = v25;
                  v25 = (uint64_t *)*v25;
                }
                while (v25);
              }
              else
              {
                do
                {
                  v26 = (uint64_t *)v23[2];
                  _ZF = *v26 == (_QWORD)v23;
                  v23 = v26;
                }
                while (!_ZF);
              }
              ++v24;
              v23 = v26;
            }
            while (v26 != v15);
          }
          ++*a1[2];
          v28 = *(_QWORD *)(a2 + 16);
          if (*(_BYTE *)(v28 + 112))
          {
            v29 = a1[3];
            v30 = (char *)v29[673];
            v31 = (char *)v29[674];
            v32 = v31 - v30;
            if (v31 == v30)
              goto LABEL_48;
          }
          else
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOMapTrackClassifier.hpp", 815, (uint64_t)"track->getStructure()", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              goto LABEL_120;
            }
            v28 = *(_QWORD *)(a2 + 16);
            v29 = a1[3];
            v30 = (char *)v29[673];
            v31 = (char *)v29[674];
            v32 = v31 - v30;
            if (v31 == v30)
            {
LABEL_48:
              v38 = *(double *)(v28 + 48);
              v39 = *(double *)(v28 + 56);
              v40 = *(double *)(v28 + 64);
              v220 = *(float *)(v28 + 76);
              v218 = *(float *)(v28 + 80);
              v41 = *(float *)(v28 + 88);
              v222 = *(float *)(v28 + 84);
              v42 = *(float *)(v28 + 96);
              v224 = *(float *)(v28 + 92);
              v43 = *(float *)(v28 + 100);
              v44 = *(float *)(v28 + 104);
              v45 = *(float *)(v28 + 108);
              if (v30 == v31 || *(_DWORD *)v30 != v13)
              {
                if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.h", 243, (uint64_t)"iter != linearSystem().graph().template endVariable<VARIABLE_TYPE>()", 68, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                {
                  goto LABEL_120;
                }
                v29 = a1[3];
                v30 = v31;
              }
              v46 = (char *)v29[649];
              v47 = (char *)v29[650];
              if (v47 != v46)
              {
                v48 = (v47 - v46) >> 4;
                do
                {
                  v49 = v48 >> 1;
                  v50 = (unsigned int *)&v46[16 * (v48 >> 1)];
                  v52 = *v50;
                  v51 = (char *)(v50 + 4);
                  v48 += ~(v48 >> 1);
                  if (v52 < v14)
                    v46 = v51;
                  else
                    v48 = v49;
                }
                while (v48);
              }
              v212 = v40;
              v213 = v41;
              v214 = v44;
              v216 = v42;
              v53 = *((_QWORD *)v30 + 1);
              if (v46 != v47 && *(_DWORD *)v46 == v14
                || (v54 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.h", 243, (uint64_t)"iter != linearSystem().graph().template endVariable<VARIABLE_TYPE>()", 68, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0), v46 = v47, !v54))
              {
                v55 = *((_QWORD *)v46 + 1);
                v56 = sub_20E9DF85C((_QWORD *)(a1[4][1] + 1784), (uint64_t *)v5)[13];
                v57 = *(_QWORD *)(*a1[6] + 8 * v24);
                v226 = *(double *)(*a1[7] + 8 * v203);
                v58 = *(_QWORD *)(a2 + 16);
                v59 = *a1[8];
                v60.f64[0] = *(float64_t *)(v53 + 48);
                _Q29 = *(float64x2_t *)(v53 + 32);
                v62 = *(double *)(v53 + 72);
                _Q30 = *(float64x2_t *)(v53 + 56);
                _Q25 = *(float64x2_t *)(v53 + 80);
                v65.f64[0] = *(float64_t *)(v55 + 48);
                v66 = *(float64x2_t *)(v55 + 32);
                _D17 = *(double *)(v55 + 72);
                v68 = *(float64x2_t *)(v55 + 56);
                _Q14 = *(float64x2_t *)(v55 + 80);
                v70 = *(double *)(v55 + 96);
                v206 = *(double *)(v55 + 112);
                v207 = *(double *)(v55 + 104);
                v71 = *(double *)(v53 + 96);
                v208 = *(double *)(v55 + 120);
                v209 = *(double *)(v53 + 104);
                v72 = *(double *)(v53 + 112);
                v210 = *(double *)(v53 + 120);
                v211 = *(float64x2_t *)(v5 + 40);
                v73 = *(_DWORD *)(v56 + 992);
                if (v73 == -1)
                {
                  v185 = *(float64x2_t *)(v55 + 32);
                  v187 = *(double *)(v55 + 72);
                  v189 = *(double *)(v55 + 48);
                  v191 = *(float64x2_t *)(v53 + 56);
                  v193 = *(float64x2_t *)(v53 + 32);
                  v195 = *(double *)(v53 + 96);
                  v197 = *(double *)(v53 + 72);
                  v199 = *(float64x2_t *)(v53 + 80);
                  v201 = *(double *)(v53 + 48);
                  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                  {
                    goto LABEL_120;
                  }
                  v73 = *(_DWORD *)(v56 + 992);
                  _Q25 = v199;
                  v60.f64[0] = v201;
                  v71 = v195;
                  v62 = v197;
                  _Q30 = v191;
                  _Q29 = v193;
                  _D17 = v187;
                  v65.f64[0] = v189;
                  v66 = v185;
                  v205 = v72;
                  if (v73 <= 7)
                  {
LABEL_63:
                    if (!v73)
                      goto LABEL_121;
                    goto LABEL_68;
                  }
                }
                else
                {
                  v205 = *(double *)(v53 + 112);
                  if (v73 <= 7)
                    goto LABEL_63;
                }
                if (v73 < 0xF)
                {
LABEL_68:
                  v204 = *(double *)v56;
                  goto LABEL_69;
                }
                v204 = *(double *)v56;
                if (v73 != -1)
                {
LABEL_69:
                  _D5 = v218;
                  _Q1 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v66, _Q29.f64[0]), v68, _Q29, 1), _Q14, v60.f64[0]);
                  _Q2 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v66, _Q30.f64[0]), v68, _Q30, 1), _Q14, v62);
                  _Q3 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v66, _Q25.f64[0]), v68, _Q25, 1), _Q14, v71);
                  v78 = (float64x2_t)vzip1q_s64((int64x2_t)_Q1, (int64x2_t)_Q2);
                  _Q7 = (float64x2_t)vzip2q_s64((int64x2_t)_Q1, (int64x2_t)_Q2);
                  __asm
                  {
                    FMLA            D0, D5, V3.D[1]
                    FMLA            D16, D17, V29.D[1]
                  }
                  _D13 = _D17;
                  __asm
                  {
                    FMLA            D17, D13, V30.D[1]
                    FMLA            D18, D13, V25.D[1]
                  }
                  v87 = _D18 + v70 * v71;
                  v88.f64[0] = _D16 + v70 * v60.f64[0];
                  v88.f64[1] = _D17 + v70 * v62;
                  _Q4 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v78, v220), _Q7, v218), v88, v222);
                  _D20 = v224;
                  __asm { FMLA            D0, D20, V3.D[1] }
                  v92 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v78, v213), _Q7, v224), v88, v216);
                  _D20 = _D0 + v87 * v216;
                  _D22 = v214;
                  v95 = vmlaq_n_f64(vmulq_n_f64(v78, v43), _Q7, v214);
                  __asm { FMLA            D7, D22, V3.D[1] }
                  v96 = vmlaq_laneq_f64(vmulq_n_f64(_Q4, _Q1.f64[0]), v92, _Q1, 1);
                  __asm { FMLA            D22, D20, V1.D[1] }
                  v98 = vmlaq_laneq_f64(vmulq_n_f64(_Q4, _Q2.f64[0]), v92, _Q2, 1);
                  __asm { FMLA            D23, D20, V2.D[1] }
                  v100 = vmlaq_laneq_f64(vmulq_n_f64(_Q4, _Q3.f64[0]), v92, _Q3, 1);
                  __asm { FMLA            D4, D20, V3.D[1] }
                  _Q6 = vmlaq_n_f64(v95, v88, v45);
                  _Q7.f64[0] = _Q7.f64[0] + v87 * v45;
                  v102 = vmlaq_n_f64(v96, _Q6, v88.f64[0]);
                  v103 = _D22 + _Q7.f64[0] * v88.f64[0];
                  v104 = vmlaq_n_f64(v98, _Q6, v88.f64[1]);
                  _Q3.f64[0] = _D23 + _Q7.f64[0] * v88.f64[1];
                  v105 = vmlaq_n_f64(v100, _Q6, v87);
                  _Q4.f64[0] = _Q4.f64[0] + _Q7.f64[0] * v87;
                  _Q7.f64[0] = v39 - v206;
                  __asm { FMLA            D6, D7, V14.D[1] }
                  v65.f64[1] = _D13;
                  _Q16 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v66, (int64x2_t)v68), v38 - v207), (float64x2_t)vzip2q_s64((int64x2_t)v66, (int64x2_t)v68), v39 - v206), v65, v212 - v208);
                  _Q7.f64[0] = _Q16.f64[0] - v209;
                  _Q16.f64[0] = _Q16.f64[1] - v205;
                  _Q6.f64[0] = _Q6.f64[0] + v70 * (v212 - v208) - v210;
                  v107 = (float64x2_t)vzip2q_s64((int64x2_t)_Q29, (int64x2_t)_Q30);
                  v60.f64[1] = v62;
                  v108 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)_Q29, (int64x2_t)_Q30), _Q7.f64[0]), v107, _Q16.f64[1] - v205), v60, _Q6.f64[0]);
                  __asm { FMLA            D7, D16, V25.D[1] }
                  v107.f64[0] = _Q7.f64[0] + v71 * _Q6.f64[0];
                  v223 = vsubq_f64(vdivq_f64(v108, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v107.f64[0], 0)), v211);
                  _Q7.f64[0] = v107.f64[0] * v107.f64[0];
                  _Q16.f64[0] = v107.f64[0] * v108.f64[0];
                  v109 = v107.f64[0];
                  v225 = v107;
                  v110 = _Q4.f64[0] * v108.f64[0] * v108.f64[0]
                       + v107.f64[0] * v107.f64[0] * v102.f64[0]
                       - (v103 + v105.f64[0]) * (v107.f64[0] * v108.f64[0]);
                  v107.f64[0] = _Q4.f64[0] * vmuld_lane_f64(v108.f64[0], v108, 1);
                  v111 = vmuld_lane_f64(v109, v108, 1);
                  v112 = v107.f64[0]
                       + vmuld_lane_f64(_Q7.f64[0], v102, 1)
                       - vmuld_lane_f64(_Q16.f64[0], v105, 1)
                       - v103 * v111;
                  v113 = v107.f64[0] + _Q7.f64[0] * v104.f64[0] - _Q3.f64[0] * _Q16.f64[0] - v111 * v105.f64[0];
                  v114 = vmuld_lane_f64(vmuld_lane_f64(_Q4.f64[0], v108, 1), v108, 1)
                       + vmuld_lane_f64(_Q7.f64[0], v104, 1);
                  v115 = v105.f64[1] + _Q3.f64[0];
                  v116 = (v204 + *(double *)(v56 + 32)) * 0.5;
                  *(double *)&v221 = v116;
                  v117 = 1.0 / (_Q7.f64[0] * _Q7.f64[0]);
                  if (_Q7.f64[0] * _Q7.f64[0] == 0.0)
                    v117 = 1.0;
                  v118.f64[0] = v117 * v110;
                  v119.f64[0] = v117 * v113;
                  v118.f64[1] = v117 * v112;
                  v119.f64[1] = v117 * (v114 - v115 * v111);
                  v120 = vmulq_n_f64(v119, v116 * v116);
                  v121 = *(float *)(v5 + 56) * *(float *)(v5 + 56);
                  v123 = vmulq_n_f64(v118, v116 * v116);
                  v119.f64[1] = v123.f64[1];
                  v122.f64[0] = v123.f64[0];
                  v122.f64[1] = v120.f64[1];
                  v118.f64[0] = v120.f64[0];
                  _Q3 = *(_OWORD *)(v5 + 40);
                  _D5 = *(_QWORD *)(v5 + 48);
                  __asm { FMLA            D4, D5, V3.D[1] }
                  v215 = v121;
                  v127 = vaddq_f64((float64x2_t)vdupq_lane_s64(COERCE__INT64(v121), 0), v122);
                  v118.f64[1] = v127.f64[1];
                  v119.f64[0] = v127.f64[0];
                  v217 = v119;
                  v219 = v118;
                  v228 = v102;
                  v229 = v104;
                  v128 = (double)(unint64_t)((uint64_t)(*(_QWORD *)(v58 + 128) - *(_QWORD *)(v58 + 120)) >> 6);
                  v129 = sqrt(_D4);
                  v130 = sub_20E8BE318(v228.f64);
                  v131 = (double)v57 / 100.0;
                  __asm { FMOV            V2.2D, #0.5 }
                  v133 = vaddq_f64(vmulq_f64(*(float64x2_t *)(v5 + 40), _Q2), _Q2);
                  __asm { FMOV            V2.2D, #7.0 }
                  v135 = vmulq_f64(v133, _Q2);
                  __asm { FMOV            V2.2D, #-1.0 }
                  v137 = vaddq_f64(v135, _Q2);
                  if (v137.f64[0] <= 4.0)
                    v138 = v137.f64[0];
                  else
                    v138 = 4.0;
                  v139 = vmovn_s64(vcltzq_f64(v137));
                  if ((v139.i8[0] & 1) != 0)
                    v140 = 0;
                  else
                    v140 = (unint64_t)v138;
                  v137.f64[0] = v137.f64[1];
                  if (v137.f64[1] > 4.0)
                    v137.f64[0] = 4.0;
                  if ((v139.i8[4] & 1) != 0)
                    v141 = 0;
                  else
                    v141 = 5 * (unint64_t)v137.f64[0];
                  v142 = (double)*(unint64_t *)(v59 + 200 * v24 + 8 * (v141 + v140)) / 100.0;
                  v143 = (float64x2_t)vdupq_lane_s64(v221, 0);
                  v228 = vdivq_f64(v217, v143);
                  v229 = vdivq_f64(v219, v143);
                  v144 = sub_20E8BE318(v228.f64);
                  _Q2 = v223;
                  _Q0 = (int8x16_t)vmulq_f64(_Q2, _Q2);
                  _Q1.i64[0] = *(_QWORD *)&v223.f64[1];
                  __asm { FMLA            D0, D1, V2.D[1] }
                  *(float *)_Q0.i32 = *(double *)_Q0.i64;
                  v148 = (float)((float)((float)((float)((float)(*(float *)_Q0.i32 * -0.5)
                                                       * COERCE_FLOAT(1597463007 - (_Q0.i32[0] >> 1)))
                                               * COERCE_FLOAT(1597463007 - (_Q0.i32[0] >> 1)))
                                       + 1.5)
                               * COERCE_FLOAT(1597463007 - (_Q0.i32[0] >> 1)))
                       * *(float *)_Q0.i32;
                  *(float *)_Q0.i32 = v128;
                  *(_QWORD *)&v228.f64[0] = __PAIR64__(LODWORD(v121), _Q0.u32[0]);
                  *(float *)_Q0.i32 = v129;
                  _Q1.i64[1] = *(_QWORD *)&v225.f64[1];
                  *(float *)_Q1.i32 = v225.f64[0];
                  *(_QWORD *)&v228.f64[1] = __PAIR64__(_Q1.u32[0], _Q0.u32[0]);
                  *(float *)_Q0.i32 = v130;
                  *(float *)_Q1.i32 = v131;
                  *(_QWORD *)&v229.f64[0] = __PAIR64__(_Q1.u32[0], _Q0.u32[0]);
                  *(float *)_Q0.i32 = v142;
                  _Q1.i32[1] = HIDWORD(v226);
                  *(float *)_Q1.i32 = v226;
                  *(_QWORD *)&v229.f64[1] = __PAIR64__(_Q1.u32[0], _Q0.u32[0]);
                  *(float *)_Q0.i32 = v144;
                  v230 = _Q0.i32[0];
                  v231 = v148;
                  v149 = sub_20FC617F8((float32x4_t *)&v228, (int8x16_t *)a1[9], _Q0, _Q1);
                  v150 = a1[10];
                  v151 = v149;
                  v152 = *(_DWORD *)a1[2] - 1;
                  v154 = (char *)v150[1];
                  v153 = v150[2];
                  if ((unint64_t)v154 < v153)
                  {
                    *(double *)v154 = v151;
                    *((_DWORD *)v154 + 2) = v152;
                    v155 = v154 + 16;
LABEL_103:
                    v150[1] = (uint64_t)v155;
                    v164 = (void **)*a1[11];
                    if (!v164)
                      goto LABEL_10;
                    v165 = v148;
                    v167 = (char *)v164[1];
                    v166 = (unint64_t)v164[2];
                    if ((unint64_t)v167 < v166)
                    {
                      *(double *)v167 = v128;
                      *((_QWORD *)v167 + 1) = 0x7FF8000000000000;
                      *((double *)v167 + 2) = v215;
                      *((double *)v167 + 3) = v129;
                      *((_QWORD *)v167 + 4) = *(_QWORD *)&v225.f64[0];
                      v7 = vdupq_n_s64(0x7FF8000000000000uLL);
                      *(int64x2_t *)(v167 + 40) = v7;
                      *((double *)v167 + 7) = v130;
                      *((int64x2_t *)v167 + 4) = v7;
                      *((double *)v167 + 10) = v131;
                      *((double *)v167 + 11) = v142;
                      *((_QWORD *)v167 + 12) = 0x7FF8000000000000;
                      *((double *)v167 + 13) = v226;
                      *((int64x2_t *)v167 + 7) = v7;
                      *((_QWORD *)v167 + 16) = 0x7FF8000000000000;
                      *((double *)v167 + 17) = v144;
                      *((int64x2_t *)v167 + 9) = v7;
                      v8 = v167 + 168;
                      *((double *)v167 + 20) = v165;
LABEL_9:
                      v164[1] = v8;
                      goto LABEL_10;
                    }
                    v168 = (char *)*v164;
                    v169 = 0xCF3CF3CF3CF3CF3DLL * ((v167 - (_BYTE *)*v164) >> 3);
                    v170 = v169 + 1;
                    if (v169 + 1 > 0x186186186186186)
                      sub_20E867F44();
                    v171 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v166 - (_QWORD)v168) >> 3);
                    if (2 * v171 > v170)
                      v170 = 2 * v171;
                    if (v171 >= 0xC30C30C30C30C3)
                      v172 = 0x186186186186186;
                    else
                      v172 = v170;
                    if (!v172)
                    {
                      v173 = 0;
                      goto LABEL_115;
                    }
                    if (v172 <= 0x186186186186186)
                    {
                      v173 = (char *)operator new(168 * v172);
LABEL_115:
                      v174 = &v173[168 * v169];
                      *(double *)v174 = v128;
                      *((_QWORD *)v174 + 1) = 0x7FF8000000000000;
                      *((double *)v174 + 2) = v215;
                      *((double *)v174 + 3) = v129;
                      *((_QWORD *)v174 + 4) = *(_QWORD *)&v225.f64[0];
                      v175 = vdupq_n_s64(0x7FF8000000000000uLL);
                      *(int64x2_t *)(v174 + 40) = v175;
                      *((double *)v174 + 7) = v130;
                      *((int64x2_t *)v174 + 4) = v175;
                      *((double *)v174 + 10) = v131;
                      *((double *)v174 + 11) = v142;
                      *((_QWORD *)v174 + 12) = 0x7FF8000000000000;
                      *((double *)v174 + 13) = v226;
                      *((int64x2_t *)v174 + 7) = v175;
                      *((_QWORD *)v174 + 16) = 0x7FF8000000000000;
                      *((double *)v174 + 17) = v144;
                      *((int64x2_t *)v174 + 9) = v175;
                      *((double *)v174 + 20) = v165;
                      v176 = v174;
                      if (v167 != v168)
                      {
                        do
                        {
                          v177 = *(_OWORD *)(v167 - 168);
                          v178 = *(_OWORD *)(v167 - 152);
                          *(_OWORD *)(v176 - 136) = *(_OWORD *)(v167 - 136);
                          *(_OWORD *)(v176 - 152) = v178;
                          *(_OWORD *)(v176 - 168) = v177;
                          v179 = *(_OWORD *)(v167 - 120);
                          v180 = *(_OWORD *)(v167 - 104);
                          v181 = *(_OWORD *)(v167 - 88);
                          *(_OWORD *)(v176 - 72) = *(_OWORD *)(v167 - 72);
                          *(_OWORD *)(v176 - 88) = v181;
                          *(_OWORD *)(v176 - 104) = v180;
                          *(_OWORD *)(v176 - 120) = v179;
                          v182 = *(_OWORD *)(v167 - 56);
                          v183 = *(_OWORD *)(v167 - 40);
                          v184 = *(_OWORD *)(v167 - 24);
                          *((_QWORD *)v176 - 1) = *((_QWORD *)v167 - 1);
                          *(_OWORD *)(v176 - 24) = v184;
                          *(_OWORD *)(v176 - 40) = v183;
                          *(_OWORD *)(v176 - 56) = v182;
                          v176 -= 168;
                          v167 -= 168;
                        }
                        while (v167 != v168);
                        v167 = (char *)*v164;
                      }
                      v8 = v174 + 168;
                      *v164 = v176;
                      v164[1] = v174 + 168;
                      v164[2] = &v173[168 * v172];
                      if (v167)
                        operator delete(v167);
                      goto LABEL_9;
                    }
LABEL_122:
                    sub_20E877A38();
                  }
                  v156 = (char *)*v150;
                  v157 = (uint64_t)&v154[-*v150] >> 4;
                  v158 = v157 + 1;
                  if ((unint64_t)(v157 + 1) >> 60)
                    sub_20E867F44();
                  v159 = v153 - (_QWORD)v156;
                  if (v159 >> 3 > v158)
                    v158 = v159 >> 3;
                  if ((unint64_t)v159 >= 0x7FFFFFFFFFFFFFF0)
                    v160 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v160 = v158;
                  if (v160)
                  {
                    if (v160 >> 60)
                      goto LABEL_122;
                    v161 = (char *)operator new(16 * v160);
                    v162 = (uint64_t)&v161[16 * v157];
                    *(double *)v162 = v151;
                    *(_DWORD *)(v162 + 8) = v152;
                    v163 = v162;
                    if (v154 == v156)
                      goto LABEL_101;
                  }
                  else
                  {
                    v161 = 0;
                    v162 = 16 * v157;
                    *(double *)v162 = v151;
                    *(_DWORD *)(v162 + 8) = v152;
                    v163 = 16 * v157;
                    if (v154 == v156)
                      goto LABEL_101;
                  }
                  do
                  {
                    *(_OWORD *)(v163 - 16) = *((_OWORD *)v154 - 1);
                    v163 -= 16;
                    v154 -= 16;
                  }
                  while (v154 != v156);
                  v154 = (char *)*v150;
LABEL_101:
                  v155 = (char *)(v162 + 16);
                  *v150 = v163;
                  v150[1] = v162 + 16;
                  v150[2] = (uint64_t)&v161[16 * v160];
                  if (v154)
                    operator delete(v154);
                  goto LABEL_103;
                }
                v186 = v66;
                v188 = _D17;
                v190 = v65.f64[0];
                v192 = _Q30;
                v194 = _Q29;
                v196 = v71;
                v198 = v62;
                v200 = _Q25;
                v202 = v60.f64[0];
                if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                {
                  _Q25 = v200;
                  v60.f64[0] = v202;
                  v71 = v196;
                  v62 = v198;
                  _Q30 = v192;
                  _Q29 = v194;
                  _D17 = v188;
                  v65.f64[0] = v190;
                  v66 = v186;
                  if (!*(_DWORD *)(v56 + 992))
                  {
LABEL_121:
                    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
                    abort();
                  }
                  goto LABEL_69;
                }
              }
LABEL_120:
              abort();
            }
          }
          v33 = v32 >> 4;
          do
          {
            v34 = v33 >> 1;
            v35 = (unsigned int *)&v30[16 * (v33 >> 1)];
            v37 = *v35;
            v36 = (char *)(v35 + 4);
            v33 += ~(v33 >> 1);
            if (v37 < v13)
              v30 = v36;
            else
              v33 = v34;
          }
          while (v33);
          goto LABEL_48;
        }
      }
    }
LABEL_10:
    v5 += 64;
    if (v5 != v6)
      continue;
    break;
  }
}

float sub_20FC617F8(float32x4_t *a1, int8x16_t *a2, int8x16_t a3, int8x16_t a4)
{
  unsigned __int8 v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unsigned __int32 v9;
  int8x16_t v10;
  unsigned __int8 v11;
  int8x16_t v12;
  float32x4_t v13;
  int8x16_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x2_t v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t *v31;
  int8x16_t *v32;
  int v33;
  int v34;
  float32x4_t *v35;
  int8x16_t *v36;
  int v37;
  int v38;
  float32x4_t *v39;
  int8x16_t *v40;
  int v41;
  int v42;
  float32x4_t *v43;
  int8x16_t *v44;
  int v45;
  int v46;
  float32x4_t *v47;
  int8x16_t *v48;
  int v49;
  int v50;
  float32x4_t *v51;
  unsigned __int32 v52;
  int v53;
  int v54;
  int8x16_t v55;

  v4 = atomic_load((unsigned __int8 *)&qword_254A6B880);
  if ((v4 & 1) == 0)
  {
    v31 = a1;
    v32 = a2;
    v33 = __cxa_guard_acquire(&qword_254A6B880);
    a2 = v32;
    v34 = v33;
    a1 = v31;
    if (v34)
    {
      xmmword_254A6B940 = xmmword_2103BBB00;
      xmmword_254A6B950 = (float32x4_t)unk_2103BBB10;
      *(_QWORD *)&xmmword_254A6B960 = 0x40A7A32339D97B5ELL;
      __cxa_guard_release(&qword_254A6B880);
      a2 = v32;
      a1 = v31;
    }
  }
  v5 = atomic_load((unsigned __int8 *)&qword_254A6B888);
  if ((v5 & 1) == 0)
  {
    v35 = a1;
    v36 = a2;
    v37 = __cxa_guard_acquire(&qword_254A6B888);
    a2 = v36;
    v38 = v37;
    a1 = v35;
    if (v38)
    {
      memcpy(&xmmword_254A6BA00, &unk_2103BBB28, 0x140uLL);
      __cxa_guard_release(&qword_254A6B888);
      a2 = v36;
      a1 = v35;
    }
  }
  v6 = atomic_load((unsigned __int8 *)&qword_254A6B890);
  if ((v6 & 1) == 0)
  {
    v39 = a1;
    v40 = a2;
    v41 = __cxa_guard_acquire(&qword_254A6B890);
    a2 = v40;
    v42 = v41;
    a1 = v39;
    if (v42)
    {
      xmmword_254A6B900 = xmmword_2103BBC68;
      xmmword_254A6B910 = unk_2103BBC78;
      __cxa_guard_release(&qword_254A6B890);
      a2 = v40;
      a1 = v39;
    }
  }
  v7 = atomic_load((unsigned __int8 *)&qword_254A6B898);
  if ((v7 & 1) == 0)
  {
    v43 = a1;
    v44 = a2;
    v45 = __cxa_guard_acquire(&qword_254A6B898);
    a2 = v44;
    v46 = v45;
    a1 = v43;
    if (v46)
    {
      xmmword_254A6B9C0 = xmmword_2103BBCC8;
      xmmword_254A6B9D0 = (float32x4_t)unk_2103BBCD8;
      xmmword_254A6B9E0 = xmmword_2103BBCE8;
      xmmword_254A6B9F0 = (float32x4_t)unk_2103BBCF8;
      xmmword_254A6B980 = xmmword_2103BBC88;
      xmmword_254A6B990 = (float32x4_t)unk_2103BBC98;
      xmmword_254A6B9A0 = xmmword_2103BBCA8;
      xmmword_254A6B9B0 = (float32x4_t)unk_2103BBCB8;
      __cxa_guard_release(&qword_254A6B898);
      a2 = v44;
      a1 = v43;
    }
  }
  v8 = atomic_load((unsigned __int8 *)&qword_254A6B8A0);
  if ((v8 & 1) == 0)
  {
    v47 = a1;
    v48 = a2;
    v49 = __cxa_guard_acquire(&qword_254A6B8A0);
    a2 = v48;
    v50 = v49;
    a1 = v47;
    if (v50)
    {
      xmmword_254A6B8C0 = xmmword_2103B84E0;
      __cxa_guard_release(&qword_254A6B8A0);
      a2 = v48;
      a1 = v47;
    }
  }
  v9 = a2[1].u8[0];
  v10 = *a2;
  v11 = atomic_load((unsigned __int8 *)&qword_254A6B8A8);
  if ((v11 & 1) == 0)
  {
    v51 = a1;
    v52 = a2[1].u8[0];
    v55 = *a2;
    v53 = __cxa_guard_acquire(&qword_254A6B8A8);
    v10 = v55;
    v9 = v52;
    v54 = v53;
    a1 = v51;
    if (v54)
    {
      dword_254A6B808 = 1045646843;
      __cxa_guard_release(&qword_254A6B8A8);
      v10 = v55;
      v9 = v52;
      a1 = v51;
    }
  }
  a3.i32[0] = 0;
  a4.i32[0] = v9;
  v12 = vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(a4, a3), 0);
  v13.i64[1] = 0xBEF0AA9D3EB645D5;
  v14 = vbslq_s8(v12, (int8x16_t)xmmword_2103B84F0, v10);
  v13.i64[0] = a1[2].i64[0];
  v13.i64[0] = vmulq_f32(v13, (float32x4_t)xmmword_254A6B960).u64[0];
  v15 = vmulq_f32(a1[1], xmmword_254A6B950);
  v16 = vmulq_f32(*a1, (float32x4_t)xmmword_254A6B940);
  *a1 = v16;
  a1[1] = v15;
  a1[2].i64[0] = v13.i64[0];
  v17 = vmlaq_lane_f32(vmlaq_n_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmlaq_n_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_254A6BA00, v16.f32[0]), (float32x4_t)xmmword_254A6BA20, *(float32x2_t *)v16.f32, 1), (float32x4_t)xmmword_254A6BA40, v16, 2), (float32x4_t)xmmword_254A6BA60, v16, 3), (float32x4_t)xmmword_254A6BA80,
                    v15.f32[0]),
                  (float32x4_t)xmmword_254A6BAA0,
                  *(float32x2_t *)v15.f32,
                  1),
                (float32x4_t)xmmword_254A6BAC0,
                v15,
                2),
              (float32x4_t)xmmword_254A6BAE0,
              v15,
              3),
            (float32x4_t)xmmword_254A6BB00,
            v13.f32[0]),
          (float32x4_t)xmmword_254A6BB20,
          *(float32x2_t *)v13.f32,
          1);
  v18 = vmlaq_lane_f32(vmlaq_n_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmlaq_n_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(unk_254A6BA10, v16.f32[0]), unk_254A6BA30, *(float32x2_t *)v16.f32, 1), unk_254A6BA50, v16, 2), unk_254A6BA70, v16, 3), unk_254A6BA90,
                    v15.f32[0]),
                  unk_254A6BAB0,
                  *(float32x2_t *)v15.f32,
                  1),
                unk_254A6BAD0,
                v15,
                2),
              unk_254A6BAF0,
              v15,
              3),
            unk_254A6BB10,
            v13.f32[0]),
          unk_254A6BB30,
          *(float32x2_t *)v13.f32,
          1);
  v21.i32[1] = DWORD1(xmmword_254A6B900);
  v19 = vaddq_f32(v18, (float32x4_t)xmmword_254A6B910);
  v20 = vaddq_f32(v17, (float32x4_t)xmmword_254A6B900);
  v21.i32[0] = 0;
  if (v20.f32[0] >= 0.0)
    v22 = v20.f32[0];
  else
    v22 = 0.0;
  v23 = v20.f32[1];
  if (v20.f32[1] < 0.0)
    v23 = 0.0;
  v24 = v20.f32[2];
  if (v20.f32[2] < 0.0)
    v24 = 0.0;
  v20.i32[0] = v20.i32[3];
  if (v20.f32[3] < 0.0)
    v20.f32[0] = 0.0;
  if (v19.f32[0] >= 0.0)
    v25 = v19.f32[0];
  else
    v25 = 0.0;
  v26 = v19.f32[1];
  if (v19.f32[1] < 0.0)
    v26 = 0.0;
  v27 = v19.f32[2];
  if (v19.f32[2] < 0.0)
    v27 = 0.0;
  v19.i32[0] = v19.i32[3];
  if (v19.f32[3] < 0.0)
    v19.f32[0] = 0.0;
  v28 = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32((float32x4_t)xmmword_254A6B980, v22), xmmword_254A6B990, v23), (float32x4_t)xmmword_254A6B9A0, v24), xmmword_254A6B9B0, v20.f32[0]), (float32x4_t)xmmword_254A6B9C0, v25), xmmword_254A6B9D0, v26), (float32x4_t)xmmword_254A6B9E0, v27), xmmword_254A6B9F0, v19.f32[0]);
  v29 = vaddq_f32((float32x4_t)xmmword_254A6B8C0, v28);
  if (v29.f32[0] >= 0.0)
    v20.f32[0] = v29.f32[0];
  else
    v20.f32[0] = 0.0;
  v28.i32[0] = v29.i32[1];
  if (v29.f32[1] < 0.0)
    v28.f32[0] = 0.0;
  v17.i32[0] = v29.i32[2];
  if (v29.f32[2] < 0.0)
    v17.f32[0] = 0.0;
  if (v29.f32[3] >= 0.0)
    v21.f32[0] = v29.f32[3];
  return *(float *)&dword_254A6B808
       + vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v14.i8, *(float32x2_t *)v20.f32), *(float32x2_t *)v28.f32, *(float32x2_t *)v14.i8, 1), *(float32x2_t *)v17.f32, (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)), v21, (float32x4_t)v14, 3).f32[0];
}

void sub_20FC61C38(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  char *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t *v17;
  unint64_t v18;
  unsigned int v19;
  BOOL v20;
  unint64_t v21;
  unsigned int v22;
  BOOL v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  uint64_t *v36;
  double v37;
  double v38;
  float64x2_t v39;
  float64x2_t v40;
  uint64_t v41;
  unsigned int v42;
  double v43;
  uint64_t *v44;
  char *v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  unsigned int *v49;
  char *v50;
  unsigned int v51;
  double v52;
  char *v53;
  char *v54;
  unint64_t v55;
  unint64_t v56;
  unsigned int *v57;
  char *v58;
  unsigned int v59;
  uint64_t v60;
  _BOOL4 v61;
  uint64_t v62;
  uint64_t v63;
  float64x2_t *v64;
  uint64_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  double v69;
  float64x2_t v70;
  float64x2_t v71;
  float32x2_t v72;
  double v73;
  float64x2_t v74;
  float64x2_t v75;
  float32x2_t v76;
  int64x2_t v77;
  int8x16_t v78;
  int64x2_t v79;
  int64x2_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unsigned int v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unsigned int v89;
  BOOL v90;
  double v91;
  double v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  double v97;
  float64x2_t *v98;
  float64x2_t v99;
  double v100;
  double v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  double v112;
  uint64_t *v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  double v120;
  float64x2_t v121;
  double v122;
  float64x2_t v123;
  int8x16_t v124;
  int8x16_t v125;
  unint64_t v127;
  int8x16_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  double v144;
  double v145;
  double v146;
  void **v147;
  int v148;
  unint64_t v149;
  char *v150;
  char *v151;
  char *v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  void **v160;
  unint64_t v161;
  char *v162;
  char *v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  char *v168;
  __int128 v169;
  char *v170;
  __int128 v171;
  __int128 v172;
  simd_double2 v173;
  __int128 v174;
  char *v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  int64x2_t v184;
  int64x2_t v185;
  int64x2_t v186;
  int64x2_t v187;
  double v188;
  float64x2_t v189;
  double v190;
  float64x2_t v191;
  float64x2_t v192;
  double v193;
  double v194;
  double v195;
  double v196;
  double v197;
  double v198;
  double v199;
  double v200;
  double v201;
  double v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  double v206;
  float64x2_t v207;
  simd_double2 v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;
  float64x2_t v215;
  double v216;
  float64x2_t v217;
  double v218;
  float64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v234;
  float64x2_t v235;
  float64x2_t v236;
  float64x2_t v237;
  double v238;
  float64x2_t v239;
  float64x2_t v240;
  double v241;
  float64x2_t v242;
  uint64_t v243;
  float64x2_t v244;
  float64x2_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  simd_double2x2 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  uint64_t v259;
  float64x2_t v260;
  int8x16_t v261;
  double v262;
  int8x16_t v263;
  double v264;
  int8x16_t v265;
  double v266;
  int8x16_t v267;
  double v268;
  float64x2_t v269;
  float64x2_t v270;
  double v271[2];
  float64x2_t v272;
  float64x2_t v273;
  _BYTE v274[32];
  float64x2_t v275;
  double v276;
  float64x2_t v277;
  double v278;
  float64x2_t v279;
  double v280;
  simd_double2x2 v281;
  double v282[4];
  double v283[2];
  float64x2_t v284[2];

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 16);
  if (!*(_BYTE *)(v4 + 112))
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOMapTrackClassifier.hpp", 890, (uint64_t)"track->getStructure()", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_157;
    }
    v4 = *(_QWORD *)(v2 + 16);
  }
  v5 = *(unsigned __int8 *)(v4 + 72);
  v246 = **a1;
  **a1 = v246 + 1;
  if (v5)
  {
    v7 = *(_QWORD *)(v4 + 120);
    v6 = *(_QWORD *)(v4 + 128);
    if (v7 != v6)
    {
      if (a1[1][1])
      {
        v8 = 0.00000001;
        v239 = (float64x2_t)vdupq_n_s64(0x3E45798EE2308C3AuLL);
        v9 = 1.0;
        v248 = *(_QWORD *)(v4 + 128);
        v249 = v2;
        do
        {
          v11 = a1[1];
          v14 = (uint64_t *)v11[1];
          v12 = v11 + 1;
          v13 = v14;
          if (!v14)
            goto LABEL_12;
          v15 = *(_DWORD *)(v7 + 16);
          v16 = *(_DWORD *)(v7 + 8);
          v17 = v12;
          v18 = *(_QWORD *)v7;
          do
          {
            while (1)
            {
              v19 = *((_DWORD *)v13 + 12);
              v20 = v19 >= v15;
              if (v19 != v15)
                goto LABEL_20;
              v21 = v13[4];
              if (v21 >= v18)
                break;
LABEL_15:
              v13 = (uint64_t *)v13[1];
              if (!v13)
                goto LABEL_23;
            }
            if (v21 != v18)
              goto LABEL_22;
            v20 = *((_DWORD *)v13 + 10) >= v16;
LABEL_20:
            if (!v20)
              goto LABEL_15;
LABEL_22:
            v17 = v13;
            v13 = (uint64_t *)*v13;
          }
          while (v13);
LABEL_23:
          if (v17 != v12)
          {
            v22 = *((_DWORD *)v17 + 12);
            v23 = v15 >= v22;
            if (v15 != v22)
              goto LABEL_28;
            v24 = v17[4];
            if (v18 >= v24)
            {
              if (v18 != v24)
                goto LABEL_30;
              v23 = v16 >= *((_DWORD *)v17 + 10);
LABEL_28:
              if (v23)
              {
LABEL_30:
                v25 = (uint64_t *)*a1[1];
                if (v25 == v17)
                {
                  v26 = 0;
                }
                else
                {
                  v26 = 0;
                  do
                  {
                    v27 = (uint64_t *)v25[1];
                    if (v27)
                    {
                      do
                      {
                        v28 = v27;
                        v27 = (uint64_t *)*v27;
                      }
                      while (v27);
                    }
                    else
                    {
                      do
                      {
                        v28 = (uint64_t *)v25[2];
                        v29 = *v28 == (_QWORD)v25;
                        v25 = v28;
                      }
                      while (!v29);
                    }
                    ++v26;
                    v25 = v28;
                  }
                  while (v28 != v17);
                }
                ++*a1[2];
                v30 = *(_QWORD *)(v2 + 16);
                if (*(_BYTE *)(v30 + 112))
                {
                  v31 = v30 + 40;
                  goto LABEL_46;
                }
                if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOMapTrackClassifier.hpp", 920, (uint64_t)"track->getStructure()", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                {
                  goto LABEL_157;
                }
                v32 = *(_QWORD *)(v2 + 16);
                if (*(_BYTE *)(v32 + 112))
                  v31 = v32 + 40;
                else
                  v31 = 0;
LABEL_46:
                v33 = *(float64x2_t *)(v31 + 8);
                v278 = *(double *)(v31 + 24);
                v277 = v33;
                v34 = vcvtq_f64_f32(*(float32x2_t *)(v31 + 44));
                v273 = vcvtq_f64_f32(*(float32x2_t *)(v31 + 36));
                *(float64x2_t *)v274 = v34;
                v35 = vcvtq_f64_f32(*(float32x2_t *)(v31 + 60));
                *(float64x2_t *)&v274[16] = vcvtq_f64_f32(*(float32x2_t *)(v31 + 52));
                v275 = v35;
                v276 = *(float *)(v31 + 68);
                v36 = sub_20E9DF85C((_QWORD *)(a1[3][1] + 1784), (uint64_t *)v7);
                if (v36)
                {
                  v41 = v36[13];
                  v42 = *(_DWORD *)(v41 + 992);
                  if (v42 != -1)
                    goto LABEL_48;
LABEL_52:
                  if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                  {
                    v42 = *(_DWORD *)(v41 + 992);
                    if (v42 > 7)
                      goto LABEL_54;
LABEL_49:
                    if (!v42)
                    {
LABEL_158:
                      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
                      abort();
                    }
LABEL_55:
                    v43 = *(double *)v41;
                    goto LABEL_56;
                  }
                  goto LABEL_157;
                }
                v41 = 0;
                v42 = MEMORY[0x3E0];
                if (MEMORY[0x3E0] == -1)
                  goto LABEL_52;
LABEL_48:
                if (v42 <= 7)
                  goto LABEL_49;
LABEL_54:
                if (v42 < 0xF)
                  goto LABEL_55;
                v43 = *(double *)v41;
                if (v42 == -1)
                {
                  if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                  {
                    if (!*(_DWORD *)(v41 + 992))
                      goto LABEL_158;
                    goto LABEL_56;
                  }
                  goto LABEL_157;
                }
LABEL_56:
                v44 = a1[4];
                v45 = (char *)v44[673];
                v46 = (char *)v44[674];
                if (v46 != v45)
                {
                  v47 = (v46 - v45) >> 4;
                  do
                  {
                    v48 = v47 >> 1;
                    v49 = (unsigned int *)&v45[16 * (v47 >> 1)];
                    v51 = *v49;
                    v50 = (char *)(v49 + 4);
                    v47 += ~(v47 >> 1);
                    if (v51 < v15)
                      v45 = v50;
                    else
                      v47 = v48;
                  }
                  while (v47);
                }
                v52 = *(double *)(v41 + 32);
                if (v45 == v46 || *(_DWORD *)v45 != v15)
                {
                  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.h", 243, (uint64_t)"iter != linearSystem().graph().template endVariable<VARIABLE_TYPE>()", 68, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                  {
                    goto LABEL_157;
                  }
                  v44 = a1[4];
                  v45 = v46;
                }
                v53 = (char *)v44[649];
                v54 = (char *)v44[650];
                if (v54 != v53)
                {
                  v55 = (v54 - v53) >> 4;
                  do
                  {
                    v56 = v55 >> 1;
                    v57 = (unsigned int *)&v53[16 * (v55 >> 1)];
                    v59 = *v57;
                    v58 = (char *)(v57 + 4);
                    v55 += ~(v55 >> 1);
                    if (v59 < v16)
                      v53 = v58;
                    else
                      v55 = v56;
                  }
                  while (v55);
                }
                v60 = *((_QWORD *)v45 + 1);
                if (v53 == v54 || *(_DWORD *)v53 != v16)
                {
                  v61 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.h", 243, (uint64_t)"iter != linearSystem().graph().template endVariable<VARIABLE_TYPE>()", 68, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                  v53 = v54;
                  if (v61)
LABEL_157:
                    abort();
                }
                v62 = *((_QWORD *)v53 + 1);
                v63 = v62 + 32;
                v247 = v62;
                v64 = (float64x2_t *)(v62 + 104);
                v65 = v60 + 32;
                if (sub_20FC62D74(v272.f64, v271, (uint64_t)&v269, (uint64_t)&v265, (uint64_t)&v261, 0, v62 + 32, (float64x2_t *)(v62 + 104), v37, v38, v39, &v277, v40, &v273, v60 + 32))
                {
                  v243 = v60;
                  v68 = vcvtq_f64_f32(*(float32x2_t *)(v7 + 32));
                  v244 = vsubq_f64(v272, v68);
                  v260 = v244;
                  v279.f64[1] = v277.f64[1];
                  v280 = v278;
                  v279.f64[0] = v277.f64[0] + v8;
                  if (sub_20FC62D74(v284[0].f64, v283, (uint64_t)v282, (uint64_t)&v250, (uint64_t)&v281, 0, v63, v64, v277.f64[0] + v8, v68.f64[0], v66, &v279, v67, &v273, v60 + 32))
                  {
                    v240 = v284[0];
                    v72 = *(float32x2_t *)(v7 + 32);
                    v279.f64[0] = v277.f64[0];
                    v280 = v278;
                    v279.f64[1] = v277.f64[1] + v8;
                    if (sub_20FC62D74(v284[0].f64, v283, (uint64_t)v282, (uint64_t)&v250, (uint64_t)&v281, 0, v63, v64, v277.f64[1] + v8, v69, v70, &v279, v71, &v273, v65))
                    {
                      v237 = v284[0];
                      v76 = *(float32x2_t *)(v7 + 32);
                      v279 = v277;
                      v280 = v278 + v8;
                      if ((sub_20FC62D74(v284[0].f64, v283, (uint64_t)v282, (uint64_t)&v250, (uint64_t)&v281, 0, v63, v64, v278 + v8, v73, v74, &v279, v75, &v273, v65) & 1) != 0)
                      {
                        v77 = (int64x2_t)vdivq_f64(vsubq_f64(vsubq_f64(v240, vcvtq_f64_f32(v72)), v244), v239);
                        v78.i64[0] = vdupq_laneq_s64(v77, 1).u64[0];
                        v79 = (int64x2_t)vdivq_f64(vsubq_f64(vsubq_f64(v237, vcvtq_f64_f32(v76)), v244), v239);
                        v78.i64[1] = v79.i64[1];
                        v80 = (int64x2_t)vdivq_f64(vsubq_f64(vsubq_f64(v284[0], vcvtq_f64_f32(*(float32x2_t *)(v7 + 32))), v244), v239);
                        if (vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64((float64x2_t)vzip1q_s64(v77, v79)), vabsq_f64((float64x2_t)vextq_s8(v78, (int8x16_t)vdupq_laneq_s64(v80, 1), 8uLL))), vabsq_f64((float64x2_t)vzip1q_s64(v80, (int64x2_t)v78)))) <= 1.0e10)
                        {
                          v81 = a1[5];
                          v82 = *v81;
                          v83 = v81[1];
                          if (v83 != v82)
                          {
                            v84 = 0x6F96F96F96F96F97 * ((v83 - v82) >> 3);
                            v85 = *(_DWORD *)(v7 + 16);
                            v86 = *(_QWORD *)v7;
                            while (1)
                            {
                              v87 = v84 >> 1;
                              v88 = v82 + 312 * (v84 >> 1);
                              v89 = *(_DWORD *)(v88 + 16);
                              v90 = v89 >= v85;
                              if (v89 != v85)
                                goto LABEL_88;
                              if (*(_QWORD *)v88 >= v86)
                                break;
LABEL_82:
                              v82 = v88 + 312;
                              v87 = v84 + ~v87;
LABEL_83:
                              v84 = v87;
                              if (!v87)
                                goto LABEL_95;
                            }
                            if (*(_QWORD *)v88 != v86)
                              goto LABEL_83;
                            v90 = *(_DWORD *)(v88 + 8) >= *(_DWORD *)(v7 + 8);
LABEL_88:
                            if (v90)
                              goto LABEL_83;
                            goto LABEL_82;
                          }
LABEL_95:
                          if (v82 != v83
                            && *(_DWORD *)(v82 + 16) == *(_DWORD *)(v7 + 16)
                            && *(_QWORD *)v82 == *(_QWORD *)v7
                            && *(_DWORD *)(v82 + 8) == *(_DWORD *)(v7 + 8))
                          {
                            *(_QWORD *)&v91 = vextq_s8(v265, v265, 8uLL).u64[0];
                            *(_QWORD *)&v92 = vextq_s8(v261, v261, 8uLL).u64[0];
                            *(_QWORD *)&v93.f64[0] = v265.i64[0];
                            *(_QWORD *)&v93.f64[1] = v267.i64[0];
                            v94.f64[0] = v91;
                            *(_QWORD *)&v238 = vextq_s8(v267, v267, 8uLL).u64[0];
                            v94.f64[1] = v238;
                            v95.f64[0] = v266;
                            v241 = v268;
                            v95.f64[1] = v268;
                            *(_QWORD *)&v96.f64[0] = v261.i64[0];
                            *(_QWORD *)&v97 = vextq_s8(v263, v263, 8uLL).u64[0];
                            *(_QWORD *)&v96.f64[1] = v263.i64[0];
                            v99 = *(float64x2_t *)(v82 + 24);
                            v98 = (float64x2_t *)(v82 + 24);
                            v231 = v98[4];
                            v232 = v98[1];
                            v219 = v99;
                            v220 = v98[3];
                            v229 = v98[10];
                            v230 = v98[7];
                            v223 = v98[6];
                            v224 = v98[9];
                            v227 = v98[16];
                            v228 = v98[13];
                            v225 = v98[12];
                            v226 = v98[15];
                            v100 = (float)(*(float *)(v7 + 56) * *(float *)(v7 + 56));
                            v101 = v270.f64[1] + v100;
                            v269.f64[0] = v269.f64[0] + v100;
                            v270.f64[1] = v270.f64[1] + v100;
                            v102.f64[0] = v92;
                            v102.f64[1] = v97;
                            v103.f64[0] = v262;
                            v103.f64[1] = v264;
                            v104 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v93, *(double *)(*(_QWORD *)(v247 + 24) + 456)), v94, *(float64x2_t *)(*(_QWORD *)(v247 + 24) + 456), 1), v95, *(double *)(*(_QWORD *)(v247 + 24) + 472)), v96, *(float64x2_t *)(*(_QWORD *)(v247 + 24) + 472), 1), v102, *(double *)(*(_QWORD *)(v247 + 24) + 488)), v103, *(float64x2_t *)(*(_QWORD *)(v247 + 24) + 488), 1);
                            v105 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v93, *(double *)(*(_QWORD *)(v247 + 24) + 504)), v94, *(float64x2_t *)(*(_QWORD *)(v247 + 24) + 504), 1), v95, *(double *)(*(_QWORD *)(v247 + 24) + 520)), v96, *(float64x2_t *)(*(_QWORD *)(v247 + 24) + 520), 1), v102, *(double *)(*(_QWORD *)(v247 + 24) + 536)), v103, *(float64x2_t *)(*(_QWORD *)(v247 + 24) + 536), 1);
                            v106 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v93, *(double *)(*(_QWORD *)(v247 + 24) + 552)), v94, *(float64x2_t *)(*(_QWORD *)(v247 + 24) + 552), 1), v95, *(double *)(*(_QWORD *)(v247 + 24) + 568)), v96, *(float64x2_t *)(*(_QWORD *)(v247 + 24) + 568), 1), v102, *(double *)(*(_QWORD *)(v247 + 24) + 584)), v103, *(float64x2_t *)(*(_QWORD *)(v247 + 24) + 584), 1);
                            v107 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v93, *(double *)(*(_QWORD *)(v247 + 24) + 600)), v94, *(float64x2_t *)(*(_QWORD *)(v247 + 24) + 600), 1), v95, *(double *)(*(_QWORD *)(v247 + 24) + 616)), v96, *(float64x2_t *)(*(_QWORD *)(v247 + 24) + 616), 1), v102, *(double *)(*(_QWORD *)(v247 + 24) + 632)), v103, *(float64x2_t *)(*(_QWORD *)(v247 + 24) + 632), 1);
                            v108 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v93, *(double *)(*(_QWORD *)(v247 + 24) + 648)), v94, *(float64x2_t *)(*(_QWORD *)(v247 + 24) + 648), 1), v95, *(double *)(*(_QWORD *)(v247 + 24) + 664)), v96, *(float64x2_t *)(*(_QWORD *)(v247 + 24) + 664), 1), v102, *(double *)(*(_QWORD *)(v247 + 24) + 680)), v103, *(float64x2_t *)(*(_QWORD *)(v247 + 24) + 680), 1);
                            v233 = v96;
                            v234 = v94;
                            v221 = v103;
                            v222 = v102;
                            v109 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v93, *(double *)(*(_QWORD *)(v247 + 24) + 696)), v94, *(float64x2_t *)(*(_QWORD *)(v247 + 24) + 696), 1), v95, *(double *)(*(_QWORD *)(v247 + 24) + 712)), v96, *(float64x2_t *)(*(_QWORD *)(v247 + 24) + 712), 1), v102, *(double *)(*(_QWORD *)(v247 + 24) + 728)), v103, *(float64x2_t *)(*(_QWORD *)(v247 + 24) + 728), 1);
                            v235 = v269;
                            v110 = vaddq_f64(v269, vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v104, *(double *)v265.i64), v105, v91), v106, v266), v107, *(double *)v261.i64), v108, v92), v109, v262));
                            v209 = v98[2];
                            v210 = v98[5];
                            v211 = v98[8];
                            v212 = v98[11];
                            v213 = v98[14];
                            v214 = v98[17];
                            v215 = v273;
                            v216 = *(double *)v274;
                            v218 = *(double *)&v274[24];
                            v217 = *(float64x2_t *)&v274[8];
                            if (v110.f64[0] > v8)
                            {
                              v111 = vaddq_f64(v270, vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v104, *(double *)v267.i64), v105, v238), v106, v268), v107, *(double *)v263.i64), v108, v97), v109, v264));
                              v112 = v111.f64[1];
                              if (v111.f64[1] > v8)
                              {
                                v113 = a1[4];
                                v114 = *((double *)v113 + 395);
                                v115 = *((double *)v113 + 394);
                                if (v111.f64[1] >= v110.f64[0])
                                  v112 = v110.f64[0];
                                v116 = v9 / v112;
                                if (v112 == 0.0)
                                  v116 = v9;
                                v205 = (float64x2_t)v77;
                                v206 = v116;
                                v250.columns[0] = (simd_double2)vmulq_n_f64(v110, v116);
                                v250.columns[1] = (simd_double2)vmulq_n_f64(v111, v116);
                                v203 = (float64x2_t)v80;
                                v204 = (float64x2_t)v79;
                                v201 = *(double *)v265.i64;
                                v202 = v266;
                                v199 = *(double *)v267.i64;
                                v200 = v91;
                                v197 = v262;
                                v198 = v264;
                                v195 = v92;
                                v196 = *(double *)v261.i64;
                                v193 = v97;
                                v194 = *(double *)v263.i64;
                                v191 = v95;
                                v192 = v93;
                                v189 = v275;
                                v190 = v276;
                                v207 = v270;
                                if (sub_20FC643E8((double *)&v281, v282, (double *)&v250))
                                {
                                  if (v235.f64[0] > v8 && v101 > v8)
                                  {
                                    v186 = (int64x2_t)v281.columns[1];
                                    v187 = (int64x2_t)v281.columns[0];
                                    v117 = v101 >= v235.f64[0] ? v235.f64[0] : v101;
                                    v118 = v117 == 0.0 ? v9 : v9 / v117;
                                    v188 = v118;
                                    v236 = vmulq_n_f64(v235, v118);
                                    v250.columns[0] = (simd_double2)v236;
                                    v250.columns[1] = (simd_double2)vmulq_n_f64(v207, v118);
                                    v208 = v250.columns[1];
                                    if ((sub_20FC643E8((double *)&v281, v282, (double *)&v250) & 1) != 0)
                                    {
                                      v184 = (int64x2_t)v281.columns[1];
                                      v185 = (int64x2_t)v281.columns[0];
                                      v250.columns[0] = (simd_double2)v236;
                                      v250.columns[1] = v208;
                                      if ((sub_20FC643E8((double *)&v281, v282, (double *)&v250) & 1) != 0)
                                      {
                                        v119 = v8;
                                        v120 = sqrt(v206);
                                        v121 = vmlaq_laneq_f64(vmulq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v187, v186), v120), v244.f64[0]), vmulq_n_f64((float64x2_t)vzip2q_s64(v187, v186), v120), v244, 1);
                                        v122 = vaddvq_f64(vmulq_f64(v121, v121));
                                        v121.f64[0] = sqrt(v188);
                                        v123 = vmlaq_f64(vmulq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v185, v184), v121.f64[0]), v244.f64[0]), (float64x2_t)vdupq_laneq_s64((int64x2_t)v244, 1), vmulq_n_f64((float64x2_t)vzip2q_s64(v185, v184), v121.f64[0]));
                                        v124 = (int8x16_t)vmulq_n_f64((float64x2_t)v281.columns[0], v121.f64[0]);
                                        v125 = (int8x16_t)vmulq_n_f64((float64x2_t)v281.columns[1], v121.f64[0]);
                                        if (vaddvq_f64(vmulq_f64(v123, v123)) <= v114 && v122 <= v115)
                                          v127 = 0;
                                        else
                                          v127 = -1;
                                        v128 = (int8x16_t)vdupq_n_s64(v127);
                                        v129 = (float64x2_t)vbicq_s8(v125, v128);
                                        v130 = (float64x2_t)vbicq_s8(v124, v128);
                                        v281.columns[0] = (simd_double2)vmlaq_n_f64(vmulq_n_f64(v130, v130.f64[0]), v129, v129.f64[0]);
                                        v281.columns[1] = (simd_double2)vmlaq_laneq_f64(vmulq_laneq_f64(v130, v130, 1), v129, v129, 1);
                                        v131 = vmulq_f64((float64x2_t)v281.columns[0], (float64x2_t)v281.columns[0]);
                                        v132 = vmulq_f64((float64x2_t)v281.columns[1], (float64x2_t)v281.columns[1]);
                                        if (sqrt(vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v132, 1), vaddq_f64(v132, vaddq_f64(v131, (float64x2_t)vdupq_laneq_s64((int64x2_t)v131, 1)))).f64[0]) > 0.0)
                                        {
                                          v133 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v192, v219.f64[0]), v234, v219, 1), v191, v232.f64[0]), v233, v232, 1), v222, v209.f64[0]), v221, v209, 1);
                                          v134 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v192, v220.f64[0]), v234, v220, 1), v191, v231.f64[0]), v233, v231, 1), v222, v210.f64[0]), v221, v210, 1);
                                          v135 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v192, v223.f64[0]), v234, v223, 1), v191, v230.f64[0]), v233, v230, 1), v222, v211.f64[0]), v221, v211, 1);
                                          v136 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v192, v224.f64[0]), v234, v224, 1), v191, v229.f64[0]), v233, v229, 1), v222, v212.f64[0]), v221, v212, 1);
                                          v137 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v192, v225.f64[0]), v234, v225, 1), v191, v228.f64[0]), v233, v228, 1), v222, v213.f64[0]), v221, v213, 1);
                                          v138 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v192, v226.f64[0]), v234, v226, 1), v191, v227.f64[0]), v233, v227, 1), v222, v214.f64[0]), v221, v214, 1);
                                          v139 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v133, v201), v134, v200), v135, v202), v136, v196), v137, v195), v138, v197);
                                          v140 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v133, v199), v134, v238), v135, v241), v136, v194), v137, v193), v138, v198);
                                          v141 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v205, v215.f64[0]), v204, v215, 1), v203, v216);
                                          v142 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v205, v217.f64[0]), v204, v217, 1), v203, v218);
                                          v143 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v205, v189.f64[0]), v204, v189, 1), v203, v190);
                                          v245 = vaddq_f64(v139, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v141, v205.f64[0]), v142, v204.f64[0]), v143, v203.f64[0]));
                                          v242 = vaddq_f64(v140, vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v141, v205, 1), v142, v204, 1), v143, v203, 1));
                                          sub_20E8BE3B0(&v281, &v250);
                                          v281 = v250;
                                          v250.columns[0] = (simd_double2)vaddq_f64(v245, (float64x2_t)v250.columns[0]);
                                          v250.columns[1] = (simd_double2)vaddq_f64(v242, (float64x2_t)v250.columns[1]);
                                          v144 = sub_20E8BE318((double *)&v250);
                                          v145 = sub_20E8BE318((double *)&v281);
                                          v146 = log(v144 / v145) * 0.5;
                                          v147 = (void **)a1[6];
                                          v148 = *(_DWORD *)a1[2] - 1;
                                          v150 = (char *)v147[1];
                                          v149 = (unint64_t)v147[2];
                                          if ((unint64_t)v150 < v149)
                                          {
                                            *(double *)v150 = v146;
                                            *((_DWORD *)v150 + 2) = v148;
                                            v151 = v150 + 16;
                                            goto LABEL_140;
                                          }
                                          v152 = (char *)*v147;
                                          v153 = (v150 - (_BYTE *)*v147) >> 4;
                                          v154 = v153 + 1;
                                          if ((unint64_t)(v153 + 1) >> 60)
                                            sub_20E867F44();
                                          v155 = v149 - (_QWORD)v152;
                                          if (v155 >> 3 > v154)
                                            v154 = v155 >> 3;
                                          if ((unint64_t)v155 >= 0x7FFFFFFFFFFFFFF0)
                                            v156 = 0xFFFFFFFFFFFFFFFLL;
                                          else
                                            v156 = v154;
                                          if (!v156)
                                          {
                                            v157 = 0;
                                            goto LABEL_135;
                                          }
                                          if (v156 >> 60)
                                            goto LABEL_161;
                                          v157 = (char *)operator new(16 * v156);
LABEL_135:
                                          v158 = &v157[16 * v153];
                                          *(double *)v158 = v146;
                                          *((_DWORD *)v158 + 2) = v148;
                                          v159 = v158;
                                          if (v150 != v152)
                                          {
                                            do
                                            {
                                              *((_OWORD *)v159 - 1) = *((_OWORD *)v150 - 1);
                                              v159 -= 16;
                                              v150 -= 16;
                                            }
                                            while (v150 != v152);
                                            v150 = (char *)*v147;
                                          }
                                          v151 = v158 + 16;
                                          *v147 = v159;
                                          v147[1] = v158 + 16;
                                          v147[2] = &v157[16 * v156];
                                          if (v150)
                                            operator delete(v150);
LABEL_140:
                                          v147[1] = v151;
                                          v160 = (void **)a1[7];
                                          sub_20FC6343C((double *)&v250, *(_QWORD *)(*(_QWORD *)(v249 + 16) + 120), *(_QWORD *)(*(_QWORD *)(v249 + 16) + 128), v7, v277.f64, (uint64_t)&v273, v243 + 16, v247 + 16, *(double *)(*a1[10] + 8 * v246), (v43 + v52) * 0.5, *(_QWORD *)(*a1[9] + 8 * v26), *a1[11] + 200 * v26, v269.f64, (uint64_t)&v260);
                                          v162 = (char *)v160[1];
                                          v161 = (unint64_t)v160[2];
                                          if ((unint64_t)v162 < v161)
                                          {
                                            *((_OWORD *)v162 + 7) = v256;
                                            *((_OWORD *)v162 + 8) = v257;
                                            *((_OWORD *)v162 + 9) = v258;
                                            *((_QWORD *)v162 + 20) = v259;
                                            *((_OWORD *)v162 + 3) = v252;
                                            *((_OWORD *)v162 + 4) = v253;
                                            *((_OWORD *)v162 + 5) = v254;
                                            *((_OWORD *)v162 + 6) = v255;
                                            *(simd_double2x2 *)v162 = v250;
                                            *((_OWORD *)v162 + 2) = v251;
                                            v10 = v162 + 168;
                                          }
                                          else
                                          {
                                            v163 = (char *)*v160;
                                            v164 = 0xCF3CF3CF3CF3CF3DLL * ((v162 - (_BYTE *)*v160) >> 3);
                                            v165 = v164 + 1;
                                            if (v164 + 1 > 0x186186186186186)
                                              sub_20E867F44();
                                            v166 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v161 - (_QWORD)v163) >> 3);
                                            if (2 * v166 > v165)
                                              v165 = 2 * v166;
                                            if (v166 >= 0xC30C30C30C30C3)
                                              v167 = 0x186186186186186;
                                            else
                                              v167 = v165;
                                            if (v167)
                                            {
                                              if (v167 <= 0x186186186186186)
                                              {
                                                v168 = (char *)operator new(168 * v167);
                                                goto LABEL_151;
                                              }
LABEL_161:
                                              sub_20E877A38();
                                            }
                                            v168 = 0;
LABEL_151:
                                            v169 = v258;
                                            v170 = &v168[168 * v164];
                                            *((_OWORD *)v170 + 8) = v257;
                                            *((_OWORD *)v170 + 9) = v169;
                                            *((_QWORD *)v170 + 20) = v259;
                                            v171 = v254;
                                            *((_OWORD *)v170 + 4) = v253;
                                            *((_OWORD *)v170 + 5) = v171;
                                            v172 = v256;
                                            *((_OWORD *)v170 + 6) = v255;
                                            *((_OWORD *)v170 + 7) = v172;
                                            v173 = v250.columns[1];
                                            *(simd_double2 *)v170 = v250.columns[0];
                                            *((simd_double2 *)v170 + 1) = v173;
                                            v174 = v252;
                                            *((_OWORD *)v170 + 2) = v251;
                                            *((_OWORD *)v170 + 3) = v174;
                                            v175 = v170;
                                            if (v162 != v163)
                                            {
                                              do
                                              {
                                                v176 = *(_OWORD *)(v162 - 168);
                                                v177 = *(_OWORD *)(v162 - 152);
                                                *(_OWORD *)(v175 - 136) = *(_OWORD *)(v162 - 136);
                                                *(_OWORD *)(v175 - 152) = v177;
                                                *(_OWORD *)(v175 - 168) = v176;
                                                v178 = *(_OWORD *)(v162 - 120);
                                                v179 = *(_OWORD *)(v162 - 104);
                                                v180 = *(_OWORD *)(v162 - 88);
                                                *(_OWORD *)(v175 - 72) = *(_OWORD *)(v162 - 72);
                                                *(_OWORD *)(v175 - 88) = v180;
                                                *(_OWORD *)(v175 - 104) = v179;
                                                *(_OWORD *)(v175 - 120) = v178;
                                                v181 = *(_OWORD *)(v162 - 56);
                                                v182 = *(_OWORD *)(v162 - 40);
                                                v183 = *(_OWORD *)(v162 - 24);
                                                *((_QWORD *)v175 - 1) = *((_QWORD *)v162 - 1);
                                                *(_OWORD *)(v175 - 24) = v183;
                                                *(_OWORD *)(v175 - 40) = v182;
                                                *(_OWORD *)(v175 - 56) = v181;
                                                v175 -= 168;
                                                v162 -= 168;
                                              }
                                              while (v162 != v163);
                                              v162 = (char *)*v160;
                                            }
                                            v10 = v170 + 168;
                                            *v160 = v175;
                                            v160[1] = v170 + 168;
                                            v160[2] = &v168[168 * v167];
                                            if (v162)
                                              operator delete(v162);
                                          }
                                          v160[1] = v10;
                                        }
                                        v8 = v119;
                                        v9 = 1.0;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                v2 = v249;
                v6 = v248;
              }
            }
          }
LABEL_12:
          v7 += 64;
        }
        while (v7 != v6);
      }
    }
  }
}

uint64_t sub_20FC62D74(double *a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5, float64x2_t *a6, uint64_t a7, float64x2_t *a8, double a9, double a10, float64x2_t a11, float64x2_t *a12, float64x2_t a13, float64x2_t *a14, uint64_t a15)
{
  uint64_t v21;
  unsigned int v22;
  double v23;
  double v24;
  float64x2_t v25;
  float64x2_t v26;
  double v27;
  double v28;
  float64x2_t v29;
  double v30;
  unsigned int v31;
  float64x2_t *v32;
  float64x2_t *v33;
  float64x2_t *v40;
  float64x2_t *v41;
  unint64_t v44;
  float64x2_t v45;
  float64x2_t v46;
  unsigned int v47;
  double v48;
  uint64_t v49;
  double v50;
  double v51;
  double v52;
  double v53;
  int v54;
  int v55;
  _BOOL4 v56;
  float64x2_t v57;
  double v58;
  double v61;
  double v62;
  double v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  double v68;
  float64x2_t v69;
  double v70;
  float64x2_t v71;
  double v72;
  float64x2_t v73;
  double v74;
  float64x2_t v75;
  double v76;
  double v77;
  float64x2_t v78;
  double v79;
  float64x2_t v80;
  float64x2_t *v81;
  float64x2_t *v82;

  v21 = sub_20FC63A0C(&v80, (uint64_t)a2, (float64x2_t *)&v77, (uint64_t)&v73, (uint64_t)&v69, a7, a8, a12, a13, a10, a11, *(uint64_t *)&a13.f64[0], *(uint64_t *)&a13.f64[1], a14, a15);
  if (!(_DWORD)v21)
    return v21;
  v22 = *(_DWORD *)(a15 + 992);
  if (v22 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_79;
    }
    v22 = *(_DWORD *)(a15 + 992);
    if (v22 <= 7)
      goto LABEL_4;
  }
  else if (v22 <= 7)
  {
LABEL_4:
    if (!v22)
      goto LABEL_5;
    goto LABEL_9;
  }
  if (v22 < 0xC)
  {
LABEL_9:
    *a1 = *(double *)(a15 + 16) + *(double *)a15 * *a2 + *(double *)(a15 + 8) * a2[1];
    a1[1] = *(double *)(a15 + 32) * a2[1] + *(double *)(a15 + 40);
    goto LABEL_10;
  }
  *a1 = *(double *)(a15 + 16) + *(double *)a15 * *a2 + *(double *)(a15 + 8) * a2[1];
  a1[1] = *(double *)(a15 + 32) * a2[1] + *(double *)(a15 + 40);
  if (v22 != -1)
    goto LABEL_10;
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_79;
  }
  v47 = *(_DWORD *)(a15 + 992);
  if (v47 <= 7)
  {
    if (!v47)
      goto LABEL_5;
    goto LABEL_10;
  }
  if (v47 < 0xF)
  {
LABEL_10:
    v23 = *(double *)a15;
    goto LABEL_11;
  }
  v23 = *(double *)a15;
  if (v47 == -1)
  {
    v68 = *(double *)a15;
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_79;
    }
    v23 = v68;
    if (!*(_DWORD *)(a15 + 992))
      goto LABEL_5;
  }
LABEL_11:
  v24 = *(double *)(a15 + 32);
  v25 = vmlaq_f64(vmulq_n_f64(v73, v23), (float64x2_t)0, v75);
  v26 = vmlaq_n_f64(vmulq_f64(v73, (float64x2_t)0), v75, v24);
  v27 = v74 * 0.0 + v76 * v24;
  *(double *)(a4 + 16) = v74 * v23 + v76 * 0.0;
  *(float64x2_t *)a4 = v25;
  *(double *)(a4 + 40) = v27;
  *(float64x2_t *)(a4 + 24) = v26;
  v28 = v70 * v23 + v72 * 0.0;
  v29 = vmlaq_n_f64(vmulq_f64(v69, (float64x2_t)0), v71, v24);
  v30 = v70 * 0.0 + v72 * v24;
  *(float64x2_t *)a5 = vmlaq_f64(vmulq_n_f64(v69, v23), (float64x2_t)0, v71);
  *(double *)(a5 + 16) = v28;
  *(float64x2_t *)(a5 + 24) = v29;
  *(double *)(a5 + 40) = v30;
  *(double *)a3 = v23 * (v23 * v77);
  *(float64x2_t *)(a3 + 8) = vmulq_n_f64(v78, v23 * v24);
  *(double *)(a3 + 24) = v24 * (v24 * v79);
  if (!a6)
    return v21;
  v81 = a6;
  v82 = &v80;
  v31 = *(_DWORD *)(a15 + 992);
  if (v31 == -1)
  {
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      v31 = *(_DWORD *)(a15 + 992);
      if (v31 <= 7)
        goto LABEL_14;
LABEL_22:
      if (v31 > 0xB)
      {
        if (v31 <= 0xD)
        {
          v33 = v81;
          if (v31 == 13)
            sub_20EB43BB4();
          _Q0 = *v82;
          _D2 = v82->f64[1];
          __asm { FMLA            D1, D2, V0.D[1] }
          if (_D1 >= 0.00000001)
          {
            v48 = v82[1].f64[0];
            *(double *)&v49 = sqrt(_D1);
            v50 = fabs(v48);
            v51 = fabs(*(double *)&v49);
            v52 = v50 / v51;
            if (v50 >= v51)
              v52 = v51 / v50;
            if (v52 <= 0.414213562)
            {
              v54 = 1;
              v55 = 2;
              v53 = v52;
            }
            else
            {
              v53 = (v51 - v50) / (v50 + v51);
              if (v50 >= v51)
                v53 = -v53;
              v54 = -1;
              v55 = 1;
            }
            v56 = v52 > 0.414213562;
            v57 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v53 * v53), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v53 * v53), (float64x2_t)xmmword_210315370), v53 * v53 * (v53 * v53))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v53 * v53), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v53 * v53), (float64x2_t)xmmword_210315380), v53 * v53 * (v53 * v53))), v53 * v53 * (v53 * v53) * (v53 * v53 * (v53 * v53))));
            v58 = v53 + v53 * vdivq_f64(v57, (float64x2_t)vdupq_laneq_s64((int64x2_t)v57, 1)).f64[0];
            if (*(double *)&v49 == INFINITY && v50 == INFINITY)
              v58 = 0.785398163;
            if (v50 >= v51)
              v55 = v56;
            else
              v54 = -v54;
            if (v48 < 0.0)
              v54 = -v54;
            if (v82[1].f64[0] < 0.0)
              v55 = 4 - v55;
            if (v49 < 0)
            {
              v54 = -v54;
              v55 = -v55;
            }
            if (*(double *)&v49 == 0.0 && v48 == 0.0)
              v61 = 0.0;
            else
              v61 = v58;
            v62 = (double)v55 * 3.061617e-17 + (double)v55 * 0.785398163 + v61 * (double)v54;
            v63 = v62 * v62;
            v64.f64[0] = v62 * (v62 * v62);
            v64.f64[1] = v63 * v64.f64[0];
            v65 = vmulq_n_f64(v64, v63 * v63);
            v66 = vdivq_f64(_Q0, (float64x2_t)vdupq_lane_s64(v49, 0));
            *v81 = vmulq_n_f64(v64, v66.f64[0]);
            v33[1] = vmulq_n_f64(v65, v66.f64[0]);
            v33[2] = vmulq_laneq_f64(v64, v66, 1);
            v33[3] = vmulq_laneq_f64(v65, v66, 1);
          }
          else
          {
            v81[2] = 0u;
            v33[3] = 0u;
            *v33 = 0u;
            v33[1] = 0u;
          }
          return v21;
        }
        if (v31 == 14)
          sub_20FBCF154();
      }
      else if (v31 > 9)
      {
        if (v31 == 10)
          sub_20FBCF154();
      }
      else if (v31 != 9)
      {
        sub_20FBCF154();
      }
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/LensModel.cpp", 852, (uint64_t)&unk_210254955, 0, (uint64_t)"not implemented yet. rdar://113779839", 37, (void (*)(void **))sub_21023DDB0);
      abort();
    }
LABEL_79:
    abort();
  }
  if (v31 > 7)
    goto LABEL_22;
LABEL_14:
  if (v31 <= 3)
  {
    if (v31 <= 1)
    {
      if (v31)
      {
        v32 = v81;
        v81[2] = 0u;
        v32[3] = 0u;
        *v32 = 0u;
        v32[1] = 0u;
        return v21;
      }
LABEL_5:
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    if (v31 == 2)
    {
      v40 = v81;
      v41 = v82 + 1;
      _D2 = v82->f64[1];
      __asm { FMLA            D1, D2, V0.D[1] }
      *(double *)&v44 = _Q1.f64[0] * (_Q1.f64[0] * _Q1.f64[0]);
      _Q1.f64[1] = _Q1.f64[0] * _Q1.f64[0];
      v45 = vld1q_dup_f64(v41->f64);
      v46 = vdivq_f64(*v82, v45);
      *v81 = vmulq_n_f64(_Q1, v46.f64[0]);
      v40[1] = vmulq_n_f64((float64x2_t)v44, v46.f64[0]);
      v40[2] = vmulq_laneq_f64(_Q1, v46, 1);
      v40[3] = vmulq_laneq_f64((float64x2_t)v44, v46, 1);
      return v21;
    }
LABEL_27:
    sub_20FBCEF64(&v81);
    return v21;
  }
  if (v31 <= 5)
    goto LABEL_27;
  if (v31 == 6)
    sub_20EB42068();
  sub_20EB34694(a15, v81, v82);
  return v21;
}

double sub_20FC6343C(double *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, unint64_t a11, uint64_t a12, double *a13, uint64_t a14)
{
  float64x2_t v14;
  double v22;
  uint64_t v25;
  float64x2_t v28;
  double v36;
  double v37;
  double v40;
  double v41;
  double v43;
  double v44;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v51;
  float64x2_t v55;
  float64x2_t v57;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v62;
  double v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  double v73;
  double v74;
  double v75;
  float64x2_t v76;
  float64_t v77;
  float64x2_t v79;
  float v80;
  uint64_t v81;
  float64x2_t v82;
  double v88;
  float64x2_t v89;
  float64x2_t v91;
  float64x2_t v94;
  float64x2_t v96;
  float64x2_t v97;
  double v98;
  float64x2_t v100;
  float64x2_t v102;
  float64x2_t v104;
  double v105;
  int32x2_t v106;
  unint64_t v107;
  unint64_t v108;
  double v109;
  unint64_t v110;
  double v111;
  float64x2_t v116;
  double v117;
  double result;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  double v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;

  _Q0.f64[0] = *(float64_t *)(a7 + 32);
  _Q3 = *(float64x2_t *)(a7 + 16);
  v22 = *(double *)(a7 + 56);
  _Q4 = *(float64x2_t *)(a7 + 40);
  _Q15 = *(float64x2_t *)(a7 + 64);
  v25 = *(_QWORD *)(a8 + 32);
  _Q7 = *(float64x2_t *)(a8 + 16);
  _D6 = *(double *)(a8 + 56);
  v28 = *(float64x2_t *)(a8 + 40);
  _Q17 = *(float64x2_t *)(a8 + 64);
  _Q19 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q7, _Q3.f64[0]), v28, _Q3, 1), _Q17, _Q0.f64[0]);
  __asm { FMLA            D20, D6, V3.D[1] }
  v36 = *(double *)(a8 + 80);
  v37 = _D20 + v36 * _Q0.f64[0];
  _Q22 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q7, _Q4.f64[0]), v28, _Q4, 1), _Q17, v22);
  __asm { FMLA            D20, D6, V4.D[1] }
  v40 = _D20 + v36 * v22;
  v41 = *(double *)(a7 + 80);
  _Q24 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q7, _Q15.f64[0]), v28, _Q15, 1), _Q17, v41);
  __asm { FMLA            D20, D6, V15.D[1] }
  v43 = _D20 + v36 * v41;
  v44 = *(double *)(a6 + 40);
  _Q10 = (float64x2_t)vzip1q_s64((int64x2_t)_Q19, (int64x2_t)_Q22);
  _Q12 = (float64x2_t)vzip2q_s64((int64x2_t)_Q19, (int64x2_t)_Q22);
  v47.f64[0] = v37;
  v47.f64[1] = v40;
  v48 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q10, *(double *)a6), _Q12, *(float64x2_t *)a6, 1), v47, *(double *)(a6 + 16));
  _D29 = *(_QWORD *)(a6 + 8);
  __asm { FMLA            D14, D29, V24.D[1] }
  v51 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q10, *(double *)(a6 + 24)), _Q12, *(float64x2_t *)(a6 + 24), 1), v47, v44);
  _D31 = *(_QWORD *)(a6 + 32);
  __asm { FMLA            D20, D31, V24.D[1] }
  _D30 = _D20 + v43 * v44;
  v55 = vmlaq_laneq_f64(vmulq_n_f64(_Q10, *(double *)(a6 + 48)), _Q12, *(float64x2_t *)(a6 + 48), 1);
  _D20 = *(_QWORD *)(a6 + 56);
  __asm { FMLA            D10, D20, V24.D[1] }
  v57 = vmlaq_laneq_f64(vmulq_n_f64(v48, _Q19.f64[0]), v51, _Q19, 1);
  __asm { FMLA            D9, D30, V19.D[1] }
  v59 = vmlaq_laneq_f64(vmulq_n_f64(v48, _Q22.f64[0]), v51, _Q22, 1);
  __asm { FMLA            D12, D30, V22.D[1] }
  v60 = vmlaq_laneq_f64(vmulq_n_f64(v48, _Q24.f64[0]), v51, _Q24, 1);
  __asm { FMLA            D29, D30, V24.D[1] }
  _Q24.f64[0] = *(float64_t *)(a6 + 64);
  v62 = vmlaq_n_f64(v55, v47, _Q24.f64[0]);
  _Q24.f64[0] = _Q10.f64[0] + v43 * _Q24.f64[0];
  _Q20 = vmlaq_n_f64(v57, v62, v37);
  v64 = _D9 + _Q24.f64[0] * v37;
  v65 = vmlaq_n_f64(v59, v62, v40);
  v14.f64[0] = _Q12.f64[0] + _Q24.f64[0] * v40;
  v66 = vmlaq_n_f64(v60, v62, v43);
  _Q24.f64[0] = _D29 + _Q24.f64[0] * v43;
  _D28 = a5[1] - *(double *)(a8 + 96);
  v69 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)_Q7, (int64x2_t)v28), *a5 - *(double *)(a8 + 88)), (float64x2_t)vzip2q_s64((int64x2_t)_Q7, (int64x2_t)v28), _D28);
  __asm { FMLA            D7, D28, V17.D[1] }
  _Q17.f64[0] = a5[2] - *(double *)(a8 + 104);
  v72.f64[1] = _D6;
  v70 = vmlaq_n_f64(v69, v72, _Q17.f64[0]);
  v72.f64[0] = _Q7.f64[0] + v36 * _Q17.f64[0];
  _Q7.f64[0] = v70.f64[1] - *(double *)(a7 + 96);
  v72.f64[0] = v72.f64[0] - *(double *)(a7 + 104);
  _Q0.f64[1] = v22;
  v71 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)_Q3, (int64x2_t)_Q4), v70.f64[0] - *(double *)(a7 + 88)), (float64x2_t)vzip2q_s64((int64x2_t)_Q3, (int64x2_t)_Q4), _Q7.f64[0]), _Q0, v72.f64[0]);
  __asm { FMLA            D0, D7, V15.D[1] }
  v72.f64[0] = _Q0.f64[0] + v41 * v72.f64[0];
  v73 = v72.f64[0] * v72.f64[0];
  if (v73 * v73 == 0.0)
    v74 = 1.0;
  else
    v74 = 1.0 / (v73 * v73);
  v75 = vmuld_lane_f64(v72.f64[0], v71, 1);
  v76 = v72;
  v77 = _Q24.f64[0] * vmuld_lane_f64(v71.f64[0], v71, 1);
  v131.f64[0] = v74
              * (v73 * _Q20.f64[0]
               + _Q24.f64[0] * v71.f64[0] * v71.f64[0]
               - (v64 + v66.f64[0]) * (v72.f64[0] * v71.f64[0]));
  v131.f64[1] = v74 * (vmuld_lane_f64(v73, _Q20, 1) + v77 - vmuld_lane_f64(v72.f64[0] * v71.f64[0], v66, 1) - v64 * v75);
  v132.f64[0] = v74 * (v73 * v65.f64[0] + v77 - v14.f64[0] * (v72.f64[0] * v71.f64[0]) - v75 * v66.f64[0]);
  v132.f64[1] = v74
              * (vmuld_lane_f64(v73, v65, 1)
               + vmuld_lane_f64(vmuld_lane_f64(_Q24.f64[0], v71, 1), v71, 1)
               - (v66.f64[1] + v14.f64[0]) * v75);
  v125 = a10 * a10;
  _Q4 = vmulq_n_f64(v132, a10 * a10);
  v79 = vmulq_n_f64(v131, a10 * a10);
  v80 = *(float *)(a4 + 56);
  *(double *)&v81 = (float)(v80 * v80);
  v82.f64[0] = v79.f64[0];
  v82.f64[1] = _Q4.f64[1];
  _Q3 = vaddq_f64(v82, (float64x2_t)vdupq_lane_s64(v81, 0));
  _Q0 = *(float64x2_t *)(a4 + 40);
  _Q4.f64[1] = _Q3.f64[1];
  v79.f64[0] = _Q3.f64[0];
  v126 = v79;
  v127 = _Q4;
  *a1 = (double)(unint64_t)((a3 - a2) >> 6);
  a1[1] = v80;
  _Q3.f64[0] = _Q0.f64[1];
  __asm { FMLA            D1, D3, V0.D[1] }
  a1[2] = *(double *)&v81;
  a1[3] = sqrt(_D1);
  v123 = v71;
  _Q1 = vsubq_f64(v71, *(float64x2_t *)(a8 + 88));
  _Q3.f64[0] = _Q1.f64[1];
  __asm { FMLA            D2, D3, V1.D[1] }
  _Q1.f64[0] = *(float64_t *)(a8 + 104);
  *(_QWORD *)&_Q1.f64[0] = *(_OWORD *)&vsubq_f64(v76, _Q1);
  v88 = vmlad_n_f64(_D2, _Q1.f64[0], _Q1.f64[0]);
  v89 = (float64x2_t)vextq_s8((int8x16_t)v66, (int8x16_t)_Q24, 8uLL);
  _Q24.f64[1] = v66.f64[0];
  _Q1 = vmulq_f64((float64x2_t)vextq_s8((int8x16_t)v65, (int8x16_t)v14, 8uLL), _Q24);
  *(float *)&v88 = v88;
  v14.f64[1] = v65.f64[0];
  _Q1.f64[0] = vmlsq_f64(_Q1, v14, v89).f64[1];
  __asm { FMLA            D4, D1, V20.D[1] }
  a1[5] = (float)((float)((float)(1.5
                                - (float)((float)((float)(*(float *)&v88 * 0.5)
                                                * COERCE_FLOAT(1597463007 - (SLODWORD(v88) >> 1)))
                                        * COERCE_FLOAT(1597463007 - (SLODWORD(v88) >> 1))))
                        * COERCE_FLOAT(1597463007 - (SLODWORD(v88) >> 1)))
                * *(float *)&v88);
  a1[6] = vmlad_n_f64(_Q4.f64[0], v64, vmlsq_laneq_f64(vmulq_laneq_f64(v65, v66, 1), v66, v65, 1).f64[0]);
  v122 = v76;
  v124 = vsubq_f64(vdivq_f64(v71, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v76.f64[0], 0)), _Q0);
  v129 = _Q20;
  v130 = v65;
  a1[4] = v76.f64[0];
  a1[7] = sub_20E8BE318(v129.f64);
  v91.f64[0] = sub_20E8BE318(a13);
  _Q1.f64[0] = *(float64_t *)(a6 + 64);
  _Q2 = *(float64x2_t *)a6;
  v94 = *(float64x2_t *)(a6 + 16);
  _Q4 = *(float64x2_t *)(a6 + 32);
  v96 = *(float64x2_t *)(a6 + 48);
  v97 = (float64x2_t)vextq_s8((int8x16_t)v96, (int8x16_t)_Q1, 8uLL);
  _Q1.f64[1] = *(float64_t *)(a6 + 48);
  *(_QWORD *)&v98 = *(_OWORD *)&vmlsq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)vmulq_f64(v94, v96), 1), _Q4, v96);
  _Q1.f64[0] = vmlsq_f64(vmulq_f64(_Q4, _Q1), (float64x2_t)vzip2q_s64(*(int64x2_t *)&_Q4, *(int64x2_t *)&v94), v97).f64[1];
  __asm { FMLA            D4, D1, V2.D[1] }
  a1[8] = v91.f64[0];
  a1[9] = vmlad_n_f64(_Q4.f64[0], v98, v94.f64[0]);
  __asm { FMOV            V3.2D, #0.5 }
  v100 = vaddq_f64(vmulq_f64(*(float64x2_t *)(a4 + 40), _Q3), _Q3);
  __asm { FMOV            V3.2D, #7.0 }
  v102 = vmulq_f64(v100, _Q3);
  __asm { FMOV            V3.2D, #-1.0 }
  v104 = vaddq_f64(v102, _Q3);
  if (v104.f64[0] <= 4.0)
    v105 = v104.f64[0];
  else
    v105 = 4.0;
  v106 = vmovn_s64(vcltzq_f64(v104));
  if ((v106.i8[0] & 1) != 0)
    v107 = 0;
  else
    v107 = (unint64_t)v105;
  v104.f64[0] = v104.f64[1];
  if (v104.f64[1] > 4.0)
    v104.f64[0] = 4.0;
  if ((v106.i8[4] & 1) != 0)
    v108 = 0;
  else
    v108 = 5 * (unint64_t)v104.f64[0];
  v109 = (double)*(unint64_t *)(a12 + 8 * (v108 + v107));
  a1[10] = (double)a11 / 100.0;
  a1[11] = v109 / 100.0;
  if (a11 <= 1)
    v110 = 1;
  else
    v110 = a11;
  a1[12] = v109 / (double)v110;
  a1[13] = a9;
  v91.f64[0] = *(float64_t *)(a8 + 104);
  *(_QWORD *)&v111 = *(_OWORD *)&vsubq_f64(v122, v91);
  _D3 = vsubq_f64(v123, *(float64x2_t *)(a8 + 88)).f64[1];
  __asm { FMLA            D2, D3, V1.D[1] }
  _D3 = *(_QWORD *)(a14 + 8);
  __asm { FMLA            D1, D3, V0.D[1] }
  a1[14] = vmlad_n_f64(_D2, v111, v111);
  a1[15] = _D1 / v125;
  *(float *)&v111 = _D1;
  a1[16] = (float)((float)((float)(1.5
                                 - (float)((float)((float)(*(float *)&v111 * 0.5)
                                                 * COERCE_FLOAT(1597463007 - (SLODWORD(v111) >> 1)))
                                         * COERCE_FLOAT(1597463007 - (SLODWORD(v111) >> 1))))
                         * COERCE_FLOAT(1597463007 - (SLODWORD(v111) >> 1)))
                 * *(float *)&v111)
         / a10;
  v116 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a10, 0);
  v129 = vdivq_f64(v126, v116);
  v130 = vdivq_f64(v127, v116);
  a1[17] = sub_20E8BE318(v129.f64);
  v117 = sub_20E8BE318(v131.f64);
  _V3.D[1] = v124.f64[1];
  _D2 = v124.f64[1];
  __asm { FMLA            D1, D2, V3.D[1] }
  a1[18] = v117;
  a1[19] = _D1;
  *(float *)&v117 = _D1;
  result = (float)((float)((float)(1.5
                                 - (float)((float)((float)(*(float *)&v117 * 0.5)
                                                 * COERCE_FLOAT(1597463007 - (SLODWORD(v117) >> 1)))
                                         * COERCE_FLOAT(1597463007 - (SLODWORD(v117) >> 1))))
                         * COERCE_FLOAT(1597463007 - (SLODWORD(v117) >> 1)))
                 * *(float *)&v117);
  a1[20] = result;
  return result;
}

uint64_t sub_20FC63A0C(float64x2_t *a1, uint64_t a2, float64x2_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, float64x2_t *a7, float64x2_t *a8, float64x2_t a9, double a10, float64x2_t a11, uint64_t a12, uint64_t a13, float64x2_t *a14, uint64_t a15)
{
  float64_t v15;
  int64x2_t v16;
  float64_t v17;
  int64x2_t v18;
  double v19;
  int64x2_t v21;
  float64_t v22;
  int64x2_t v23;
  double v24;
  double v26;
  float64x2_t v27;
  double v28;
  float64x2_t v29;
  double v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v43;
  float64x2_t v44;
  double v51;
  unsigned int v52;
  double v53;
  double v54;
  double v55;
  double v56;
  char v57;
  uint64_t v58;
  double v59;
  double v60;
  float64x2_t v64;
  double *v67;
  double v68;
  double v69;
  float64_t v70;
  double v71;
  long double v72;
  double v76;
  double v77;
  double v78;
  double v79;
  double v82;
  double v83;
  float64x2_t v84;
  unint64_t v85;
  uint64_t result;
  double v87;
  float64x2_t v88;
  double v89;
  float64x2_t v90;
  double v96;
  double v99;
  double v103;
  float64x2_t v110;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v117;
  float64x2_t v119;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64_t v126;
  float64x2_t v131;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v136;
  int8x16_t v137;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  double v159;
  float64x2_t v160;
  double v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  double v166;
  float64_t v167;
  float64x2_t v168;
  double v169;
  float64x2_t v170;
  double v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  double v175;
  float64x2_t v176;
  float64x2_t v177;
  int8x16_t v178;
  int8x16_t v179;
  int8x16_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  double v184;
  int8x16_t v185;
  float64x2_t v186;
  float64x2_t v187;
  double v188;
  float64x2_t v189;
  double v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  uint64_t v194;

  v194 = *MEMORY[0x24BDAC8D0];
  v15 = *(double *)(a13 + 16);
  v16 = *(int64x2_t *)a13;
  v17 = *(double *)(a13 + 40);
  v18 = *(int64x2_t *)(a13 + 24);
  v19 = *(double *)(a13 + 64);
  _Q21 = *(float64x2_t *)(a13 + 48);
  v21 = *(int64x2_t *)a6;
  v22 = *(double *)(a6 + 40);
  v23 = *(int64x2_t *)(a6 + 24);
  v24 = *(double *)(a6 + 64);
  _Q26 = *(float64x2_t *)(a6 + 48);
  v26 = *(double *)(a12 + 16);
  v27 = *(float64x2_t *)a12;
  v28 = *(double *)(a12 + 40);
  v29 = *(float64x2_t *)(a12 + 24);
  v30 = *(double *)(a12 + 64);
  v31 = *(float64x2_t *)(a12 + 48);
  a9.f64[0] = a8[1].f64[0];
  a11.f64[0] = a7[1].f64[0];
  v32 = vsubq_f64(a9, a11);
  _Q1 = vsubq_f64(*a8, *a7);
  v34.f64[0] = *(float64_t *)(a6 + 16);
  v34.f64[1] = v22;
  v35 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)a6, v23), _Q1.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)a6, v23), _Q1, 1), v34, v32.f64[0]);
  _Q5 = vmulq_f64(_Q26, _Q1);
  _Q1.f64[0] = _Q1.f64[1];
  __asm { FMLA            D5, D1, V26.D[1] }
  _Q5.f64[0] = vmlad_n_f64(_Q5.f64[0], v24, v32.f64[0]);
  v32.f64[0] = a14[1].f64[0];
  _Q1 = vsubq_f64(v35, *a14);
  _Q3.f64[0] = v15;
  _Q3.f64[1] = v17;
  v43 = vsubq_f64(_Q5, v32);
  v44 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)a13, v18), _Q1.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)a13, v18), _Q1, 1), _Q3, v43.f64[0]);
  _Q1.f64[0] = _Q1.f64[1];
  __asm { FMLA            D3, D1, V21.D[1] }
  _Q3.f64[0] = vmlad_n_f64(_Q3.f64[0], v19, v43.f64[0]);
  *a1 = v44;
  a1[1].f64[0] = _Q3.f64[0];
  if (_Q3.f64[0] * _Q3.f64[0] <= 0.0001)
    return 0;
  v160 = (float64x2_t)v16;
  v161 = v15;
  v162 = (float64x2_t)v23;
  v163 = (float64x2_t)v21;
  v164 = _Q26;
  v165 = (float64x2_t)v18;
  v166 = v17;
  v167 = v22;
  v168 = _Q21;
  v169 = v19;
  v170 = v27;
  v171 = v26;
  v172 = v29;
  v175 = v28;
  v177 = v31;
  v184 = v30;
  v185 = (int8x16_t)_Q5;
  v186 = v35;
  v43.f64[0] = *(float64_t *)(a13 + 16);
  v179 = (int8x16_t)v43;
  v43.f64[0] = *(float64_t *)(a13 + 40);
  v178 = (int8x16_t)v43;
  v43.f64[0] = *(float64_t *)(a13 + 64);
  v180 = (int8x16_t)v43;
  v181 = *(float64x2_t *)(a13 + 24);
  v182 = *(float64x2_t *)(a13 + 48);
  v183 = *(float64x2_t *)a13;
  _D11 = *(_QWORD *)(a6 + 40);
  v173 = *(float64x2_t *)(a6 + 24);
  v174 = *(float64x2_t *)a6;
  v51 = *(double *)(a6 + 64);
  v176 = *(float64x2_t *)(a6 + 48);
  v52 = *(_DWORD *)(a15 + 992);
  if (v52 != -1)
  {
    if (v52 <= 7)
      goto LABEL_4;
LABEL_11:
    if (v52 > 0xB)
    {
      if (v52 <= 0xD)
      {
        if (v52 != 13)
        {
          result = 0;
          *(_QWORD *)a2 = 0;
          *(_QWORD *)(a2 + 8) = 0;
          return result;
        }
        v58 = *(uint64_t *)&a1[1].f64[0];
        if (*(double *)&v58 >= 0.00000001)
        {
          v193 = vdivq_f64(*a1, (float64x2_t)vdupq_lane_s64(v58, 0));
          result = sub_20EB295B8((float64x2_t *)a2, &v191, 0, (uint64_t)&v193, (double *)(a15 + 168), (*(double *)a15 + *(double *)(a15 + 32)) * 0.5);
          if (!(_DWORD)result)
            return result;
          v59 = a1[1].f64[0];
          v60 = 1.0 / v59;
          _D0 = -a1->f64[1] / (v59 * v59);
          _V3.D[1] = v191.f64[1];
          _V4.D[1] = v192.f64[1];
          v64.f64[0] = 0.0;
          v64.f64[1] = v60;
          __asm { FMLA            D7, D0, V3.D[1] }
          v188 = _D7;
          v187 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v60, v191.f64[0]), v64, v191, 1);
          __asm { FMLA            D2, D0, V4.D[1] }
          v190 = _D2;
          v189 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v60, v192.f64[0]), v64, v192, 1);
          goto LABEL_49;
        }
        return 0;
      }
      if (v52 == 14)
        v57 = sub_20EB2498C((float64x2_t *)a2, (uint64_t)&v187, 0, (uint64_t)a1, (double *)(a15 + 168), (*(double *)a15 + *(double *)(a15 + 32)) * 0.5);
      else
        v57 = sub_20EB3F050(a15, (float64x2_t *)a2, (uint64_t)&v187, a1, 0);
      goto LABEL_43;
    }
    if (v52 <= 9)
    {
      if (v52 == 9)
      {
        v57 = sub_20EB372E0(a15, (float64x2_t *)a2, (uint64_t)&v187, a1, 0);
        goto LABEL_43;
      }
      v72 = a1[1].f64[0];
      _Q3 = *a1;
      _D0 = a1->f64[1];
      __asm { FMLA            D1, D0, V3.D[1] }
      if (_D1 >= 0.00000001)
      {
        v76 = v72 * v72 + _D1;
        v77 = sqrt(_D1);
        v159 = _D1;
        v87 = atan2(v77, v72);
        v187.f64[0] = 0.0;
        v79 = sub_20F0BA21C((double *)(a15 + 168), v187.f64, v87);
        goto LABEL_46;
      }
LABEL_39:
      v82 = 1.0 / v72;
      v83 = -(v82 * v82);
      v84.f64[0] = 0.0;
      v85 = 0;
LABEL_47:
      *(float64x2_t *)a2 = vmulq_n_f64(_Q3, v82);
      *(_QWORD *)&v84.f64[1] = v85;
      v88 = vmulq_n_f64(v84, a1->f64[0]);
      v89 = v83 * a1->f64[0];
      v90 = vmulq_laneq_f64(v84, *a1, 1);
      v56 = vmuld_lane_f64(v83, *a1, 1);
      v187.f64[1] = v88.f64[1];
      v189 = v90;
      v188 = v89;
      v187.f64[0] = v82 + v88.f64[0];
      v54 = v82 + v90.f64[1];
      goto LABEL_48;
    }
    if (v52 == 10)
      v57 = sub_20EB2450C((float64x2_t *)a2, (uint64_t)&v187, 0, (uint64_t)a1, (double *)(a15 + 168), (*(double *)a15 + *(double *)(a15 + 32)) * 0.5);
    else
      v57 = sub_20EB3AF98(a15, (float64x2_t *)a2, (uint64_t)&v187, a1, 0);
    goto LABEL_43;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v52 = *(_DWORD *)(a15 + 992);
  if (v52 > 7)
    goto LABEL_11;
LABEL_4:
  if (v52 > 3)
  {
    if (v52 <= 5)
    {
      if (v52 == 5)
      {
        v57 = sub_20EB29218((double *)a2, (uint64_t)&v187, a1, (int64x2_t *)(a15 + 168));
        goto LABEL_43;
      }
LABEL_36:
      v72 = a1[1].f64[0];
      _Q3 = *a1;
      _D0 = a1->f64[1];
      __asm { FMLA            D1, D0, V3.D[1] }
      if (_D1 >= 0.00000001)
      {
        v76 = v72 * v72 + _D1;
        v77 = sqrt(_D1);
        v159 = _D1;
        v78 = atan2(v77, v72);
        v187.f64[0] = 0.0;
        v79 = sub_20F0BA1B0((int64x2_t *)(a15 + 168), v187.f64, v78);
LABEL_46:
        v82 = v79 / v77;
        v84 = vmulq_n_f64(*a1, (v72 * (v187.f64[0] / v76) - v82) / v159);
        v83 = -(v187.f64[0] / v76);
        v85 = vextq_s8((int8x16_t)v84, (int8x16_t)v84, 8uLL).u64[0];
        _Q3 = *a1;
        goto LABEL_47;
      }
      goto LABEL_39;
    }
    if (v52 == 6)
    {
      v68 = a1[1].f64[0];
      if (v68 == 0.0)
        v69 = 1.0;
      else
        v69 = 1.0 / v68;
      v71 = v69 * a1->f64[1];
      v193.f64[0] = a1->f64[0] * v69;
      v70 = v193.f64[0];
      v193.f64[1] = v71;
      sub_20EB2837C((float64x2_t *)a2, v191.f64, &v193, (double *)(a15 + 168), (float64x2_t *)(a15 + 192), (double *)(a15 + 208));
      v187.f64[0] = v69 * v191.f64[0];
      v187.f64[1] = v69 * v191.f64[1];
      v188 = v69 * (-(v191.f64[0] * v70) - v71 * v191.f64[1]);
      v189.f64[0] = v69 * v192.f64[0];
      v189.f64[1] = v69 * v192.f64[1];
      v190 = v69 * (-(v192.f64[0] * v70) - v71 * v192.f64[1]);
      goto LABEL_49;
    }
    v57 = sub_20EB3345C(a15, (float64x2_t *)a2, (uint64_t)&v187, a1, 0);
LABEL_43:
    if ((v57 & 1) != 0)
    {
LABEL_49:
      _V1.D[1] = v160.f64[1];
      _D16 = v167;
      __asm { FMLA            D0, D16, V1.D[1] }
      _V4.D[1] = v165.f64[1];
      _Q2 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v163, v160.f64[0]), v162, v160, 1), v164, v161);
      v96 = _D0 + v24 * v161;
      __asm { FMLA            D0, D16, V4.D[1] }
      _Q3 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v163, v165.f64[0]), v162, v165, 1), v164, v166);
      v99 = _D0 + v24 * v166;
      _V7.D[1] = v168.f64[1];
      _Q5 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v163, v168.f64[0]), v162, v168, 1), v164, v169);
      __asm { FMLA            D0, D16, V7.D[1] }
      v103 = _D0 + v24 * v169;
      _Q0 = (float64x2_t)vzip1q_s64((int64x2_t)_Q2, (int64x2_t)_Q3);
      _Q17 = (float64x2_t)vzip2q_s64((int64x2_t)_Q2, (int64x2_t)_Q3);
      _Q7.f64[0] = v96;
      _Q7.f64[1] = v99;
      _Q16 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q0, v170.f64[0]), _Q17, v170, 1), _Q7, v171);
      _D19 = v170.f64[1];
      __asm { FMLA            D18, D19, V5.D[1] }
      v110 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q0, v172.f64[0]), _Q17, v172, 1), _Q7, v175);
      _D21 = v172.f64[1];
      __asm { FMLA            D20, D21, V5.D[1] }
      _D20 = _D20 + v103 * v175;
      v114 = vmlaq_laneq_f64(vmulq_n_f64(_Q0, v177.f64[0]), _Q17, v177, 1);
      _Q0.f64[0] = v177.f64[1];
      __asm { FMLA            D17, D0, V5.D[1] }
      v115 = vmlaq_laneq_f64(vmulq_n_f64(_Q16, _Q2.f64[0]), v110, _Q2, 1);
      __asm { FMLA            D22, D20, V2.D[1] }
      v117 = vmlaq_laneq_f64(vmulq_n_f64(_Q16, _Q3.f64[0]), v110, _Q3, 1);
      __asm { FMLA            D23, D20, V3.D[1] }
      v119 = vmlaq_laneq_f64(vmulq_n_f64(_Q16, _Q5.f64[0]), v110, _Q5, 1);
      __asm { FMLA            D16, D20, V5.D[1] }
      _Q30 = v183;
      v121 = vmlaq_n_f64(v114, _Q7, v184);
      _Q7.f64[0] = _Q17.f64[0] + v103 * v184;
      v122 = vmlaq_n_f64(v115, v121, v96);
      v123 = vmlaq_n_f64(v117, v121, v99);
      _D4 = _D23 + _Q7.f64[0] * v99;
      _Q3 = vmlaq_n_f64(v119, v121, v103);
      v126 = _Q16.f64[0] + _Q7.f64[0] * v103;
      __asm { FMLA            D6, D11, V30.D[1] }
      _V26.D[1] = v181.f64[1];
      _V31.D[1] = v182.f64[1];
      __asm { FMLA            D7, D11, V26.D[1] }
      _D20 = _Q7.f64[0] + v51 * *(double *)v178.i64;
      __asm { FMLA            D7, D11, V31.D[1] }
      _Q7.f64[0] = _Q7.f64[0] + v51 * *(double *)v180.i64;
      v131 = (float64x2_t)vzip1q_s64((int64x2_t)v185, (int64x2_t)v186);
      _Q30.f64[1] = v181.f64[1];
      _Q25 = (int8x16_t)vmlsq_f64(vmulq_f64(v186, (float64x2_t)vzip1q_s64((int64x2_t)v178, (int64x2_t)v181)), v131, v181);
      v133 = vmulq_f64(v131, (float64x2_t)vextq_s8((int8x16_t)v183, v179, 8uLL));
      v134 = vmulq_f64(v131, (float64x2_t)vextq_s8((int8x16_t)v182, v180, 8uLL));
      v131.f64[0] = vmlsq_laneq_f64(vmulq_laneq_f64(v182, v186, 1), v186, v182, 1).f64[0];
      _Q24 = (float64x2_t)vextq_s8((int8x16_t)v186, v185, 8uLL);
      v136 = vmlsq_f64(v134, _Q24, (float64x2_t)vzip1q_s64((int64x2_t)v180, (int64x2_t)v182));
      v137 = (int8x16_t)vmlsq_f64(vmulq_f64(_Q24, _Q30), v186, (float64x2_t)vextq_s8((int8x16_t)v183, v178, 8uLL));
      _Q27 = vmlsq_f64(v133, _Q24, (float64x2_t)vzip1q_s64((int64x2_t)v179, (int64x2_t)v183));
      _D26 = vextq_s8(_Q25, _Q25, 8uLL).u64[0];
      *(_QWORD *)&_Q29.f64[0] = vextq_s8(v137, v137, 8uLL).u64[0];
      v141 = vnegq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v174, v183.f64[0]), v173, v183, 1), v176, *(double *)v179.i64));
      v142 = vnegq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v174, v181.f64[0]), v173, v181, 1), v176, *(double *)v178.i64));
      v110.f64[0] = v188;
      _Q22 = v187;
      *(_QWORD *)&_Q27.f64[1] = vextq_s8((int8x16_t)_Q27, (int8x16_t)_Q27, 8uLL).u64[0];
      *(_QWORD *)&_Q29.f64[1] = _Q25.i64[0];
      _Q24.f64[1] = v189.f64[1];
      v144 = vmlaq_laneq_f64(vmulq_n_f64(_Q27, v187.f64[0]), _Q29, v187, 1);
      v145 = vmlaq_laneq_f64(vmulq_n_f64(_Q27, v189.f64[0]), _Q29, v189, 1);
      __asm
      {
        FMLA            D25, D26, V22.D[1]
        FMLA            D27, D26, V24.D[1]
        FMLS            D29, D20, V22.D[1]
        FMLS            D18, D20, V24.D[1]
      }
      v147 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v122, v187.f64[0]), v123, v187, 1), _Q3, v188);
      v148 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v122, v189.f64[0]), v123, v189, 1), _Q3, v190);
      __asm
      {
        FMLA            D3, D4, V22.D[1]
        FMLA            D5, D4, V24.D[1]
      }
      v149 = (float64x2_t)vzip2q_s64((int64x2_t)v187, (int64x2_t)v189);
      _Q22.f64[1] = v189.f64[0];
      v150 = vmlaq_laneq_f64(vmulq_n_f64(_Q22, v147.f64[0]), v149, v147, 1);
      v151 = vmlaq_laneq_f64(vmulq_n_f64(_Q22, v148.f64[0]), v149, v148, 1);
      *(_QWORD *)&v136.f64[1] = vextq_s8((int8x16_t)v136, (int8x16_t)v136, 8uLL).u64[0];
      v152 = vmlaq_n_f64(v144, v136, v188);
      v153 = vmlaq_n_f64(v145, v136, v190);
      v149.f64[0] = _Q27.f64[0] + v131.f64[0] * v190;
      v154 = vnegq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v174, v182.f64[0]), v173, v182, 1), v176, *(double *)v180.i64));
      v155 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v141, v187.f64[0]), v142, v187, 1), v154, v188);
      v156 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v141, v189.f64[0]), v142, v189, 1), v154, v190);
      v154.f64[0] = _Q29.f64[0] - _Q7.f64[0] * v188;
      _Q7.f64[0] = _D18 - _Q7.f64[0] * v190;
      v110.f64[1] = v190;
      v157 = vmlaq_n_f64(v150, v110, _Q3.f64[0] + v126 * v188);
      v158 = vmlaq_n_f64(v151, v110, _Q5.f64[0] + v126 * v190);
      *(double *)(a4 + 16) = *(double *)_Q25.i64 + v131.f64[0] * v188;
      *(float64x2_t *)a4 = v152;
      *(float64_t *)(a4 + 40) = v149.f64[0];
      *(float64x2_t *)(a4 + 24) = v153;
      *(float64x2_t *)a5 = v155;
      *(float64_t *)(a5 + 16) = v154.f64[0];
      *(float64x2_t *)(a5 + 24) = v156;
      *(float64_t *)(a5 + 40) = _Q7.f64[0];
      *a3 = v157;
      a3[1] = v158;
      return 1;
    }
    return 0;
  }
  if (v52 <= 1)
  {
    if (!v52)
    {
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    v53 = a1[1].f64[0];
    if (v53 >= 0.00000001)
    {
      v54 = 1.0 / v53;
      *(float64x2_t *)a2 = vmulq_n_f64(*a1, v54);
      v55 = a1->f64[1];
      v188 = v54 * -(a1->f64[0] * v54);
      v187 = (float64x2_t)*(unint64_t *)&v54;
      v189.f64[0] = 0.0;
      v56 = v54 * -(v55 * v54);
LABEL_48:
      v189.f64[1] = v54;
      v190 = v56;
      goto LABEL_49;
    }
    return 0;
  }
  if (v52 != 2)
    goto LABEL_36;
  v67 = (double *)(a15 + 168);
  if (*(_DWORD *)(a15 + 212))
  {
    v57 = sub_20FA1E060((float64x2_t *)a2, (uint64_t)&v187, a1, v67, (float64x2_t *)(a15 + 192));
    goto LABEL_43;
  }
  result = sub_20F0BA0C8((float64x2_t *)a2, (uint64_t)&v187, a1, v67);
  if ((_DWORD)result)
    goto LABEL_49;
  return result;
}

uint64_t sub_20FC643E8(double *a1, double *a2, double *a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;

  v3 = *a3;
  if (*a3 < 0.0)
    return 0;
  v4 = a3[3];
  if (v4 < 0.0)
    return 0;
  v5 = a3[1] * a3[2];
  if (vabdd_f64(v3 * v4, v5) <= 0.00000001)
    return 0;
  v6 = 1.0 / (v3 * v4 - v5);
  v7 = v4 * v6;
  *a2 = v4 * v6;
  a2[1] = -(a3[1] * v6);
  a2[2] = -(a3[2] * v6);
  a2[3] = v6 * *a3;
  v8 = a3[1];
  v9 = a3[2];
  if (vabdd_f64(v8, v9) > 0.00000001)
    return 0;
  v10 = *a3;
  v11 = a3[3];
  v12 = v8 * 4.0 * v9 + v11 * v11 + v10 * v10 - (v10 + v10) * v11;
  if (v12 < 0.0)
    return 0;
  if (fabs(v12) >= 0.00000001)
  {
    v17 = 0;
    v18 = sqrt(v12);
    v19 = v10 + v11 + v18;
    if (v19 < 0.0)
      return v17;
    v20 = v10 + v11 - v18;
    if (v20 < 0.0)
      return v17;
    v21 = sqrt(v19);
    v22 = sqrt(v20);
    v23 = v18 * (v22 * v21);
    if (fabs(v23) < 0.00000001)
      return 0;
    v24 = 0.5 / v23;
    v25 = v10 * 1.41421356 * v22 + v11 * 1.41421356 * v21 - v10 * 1.41421356 * v21 - v11 * 1.41421356 * v22;
    v26 = v18 * (v21 * 1.41421356) + v18 * (v22 * 1.41421356);
    *a1 = v24 * (v26 + v25);
    v27 = v21 - v22;
    a1[1] = v24 * (v27 * (a3[1] * -2.82842712));
    a1[2] = v24 * (v27 * (a3[2] * -2.82842712));
    v14 = v24 * (v26 - v25);
  }
  else
  {
    v14 = 1.0;
    v15 = 1.0 / v7;
    if (v7 == 0.0)
      v15 = 1.0;
    *a1 = v15;
    a1[1] = 0.0;
    a1[2] = 0.0;
    v16 = a2[3];
    if (v16 != 0.0)
      v14 = 1.0 / v16;
  }
  a1[3] = v14;
  return 1;
}

uint64_t sub_20FC645C0(uint64_t result, uint64_t *a2, uint64_t **a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  double v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  double v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  double v57;
  uint64_t v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  double v89;
  double v90;
  uint64_t v91;
  double v92;
  uint64_t *v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  double v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  double v110;
  uint64_t v111;
  uint64_t v112;
  int64_t v113;
  uint64_t *v114;
  int64_t v115;
  BOOL v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  double v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t *v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  double v140;
  uint64_t *v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  double v146;
  uint64_t v147;

  v9 = (uint64_t *)result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v85 = *(a2 - 1);
        v86 = *v10;
        if (*(double *)(**a3 + 16 * v85) > *(double *)(**a3 + 16 * *v10))
        {
          *v10 = v85;
          goto LABEL_165;
        }
        return result;
      case 3:
        v86 = *v10;
        v87 = v10[1];
        v88 = **a3;
        v89 = *(double *)(v88 + 16 * v87);
        v90 = *(double *)(v88 + 16 * *v10);
        v91 = *(a2 - 1);
        v92 = *(double *)(v88 + 16 * v91);
        if (v89 <= v90)
        {
          if (v92 > v89)
          {
            v10[1] = v91;
            *(a2 - 1) = v87;
            v102 = *v10;
            v98 = v10[1];
            v100 = *(double *)(v88 + 16 * v98);
            goto LABEL_154;
          }
        }
        else
        {
          if (v92 <= v89)
          {
            *v10 = v87;
            v10[1] = v86;
            v147 = *(a2 - 1);
            if (*(double *)(v88 + 16 * v147) <= v90)
              return result;
            v10[1] = v147;
          }
          else
          {
            *v10 = v91;
          }
LABEL_165:
          *(a2 - 1) = v86;
        }
        return result;
      case 4:
        return (uint64_t)sub_20FC654E0(v10, v10 + 1, v10 + 2, a2 - 1, **a3);
      case 5:
        v93 = v10 + 1;
        v94 = v10 + 2;
        v95 = v10 + 3;
        result = (uint64_t)sub_20FC654E0(v9, v9 + 1, v9 + 2, v9 + 3, **a3);
        v96 = *(a2 - 1);
        v97 = v9[3];
        v88 = **a3;
        if (*(double *)(v88 + 16 * v96) > *(double *)(v88 + 16 * v97))
        {
          *v95 = v96;
          *(a2 - 1) = v97;
          v98 = *v95;
          v99 = *v94;
          v100 = *(double *)(v88 + 16 * *v95);
          if (v100 > *(double *)(v88 + 16 * *v94))
          {
            *v94 = v98;
            *v95 = v99;
            v101 = *v93;
            if (v100 > *(double *)(v88 + 16 * *v93))
            {
              v9[1] = v98;
              v9[2] = v101;
              v102 = *v9;
LABEL_154:
              if (v100 > *(double *)(v88 + 16 * v102))
              {
                *v9 = v98;
                v9[1] = v102;
              }
            }
          }
        }
        return result;
      default:
        if (v11 > 191)
        {
          if (!a4)
          {
            if (v10 != a2)
            {
              v113 = (unint64_t)(v12 - 2) >> 1;
              v114 = *a3;
              v115 = v113;
              do
              {
                if (v113 >= v115)
                {
                  v117 = (2 * v115) | 1;
                  v118 = &v10[v117];
                  v119 = *v114;
                  if (2 * v115 + 2 < v12 && *(double *)(v119 + 16 * *v118) > *(double *)(v119 + 16 * v118[1]))
                  {
                    ++v118;
                    v117 = 2 * v115 + 2;
                  }
                  v120 = &v10[v115];
                  result = *v118;
                  v121 = *v120;
                  v122 = *(double *)(v119 + 16 * *v120);
                  if (*(double *)(v119 + 16 * *v118) <= v122)
                  {
                    do
                    {
                      v123 = v118;
                      *v120 = result;
                      if (v113 < v117)
                        break;
                      v124 = 2 * v117;
                      v117 = (2 * v117) | 1;
                      v118 = &v10[v117];
                      v125 = v124 + 2;
                      if (v125 < v12 && *(double *)(v119 + 16 * *v118) > *(double *)(v119 + 16 * v118[1]))
                      {
                        ++v118;
                        v117 = v125;
                      }
                      result = *v118;
                      v120 = v123;
                    }
                    while (*(double *)(v119 + 16 * *v118) <= v122);
                    *v123 = v121;
                  }
                }
                v116 = v115-- <= 0;
              }
              while (!v116);
              v126 = (unint64_t)v11 >> 3;
              do
              {
                v127 = 0;
                v128 = *v10;
                v129 = *a3;
                v130 = v10;
                do
                {
                  v131 = v130;
                  v130 += v127 + 1;
                  v132 = 2 * v127;
                  v127 = (2 * v127) | 1;
                  v133 = v132 + 2;
                  if (v133 < v126)
                  {
                    result = v130[1];
                    if (*(double *)(*v129 + 16 * *v130) > *(double *)(*v129 + 16 * result))
                    {
                      ++v130;
                      v127 = v133;
                    }
                  }
                  *v131 = *v130;
                }
                while (v127 <= (uint64_t)((unint64_t)(v126 - 2) >> 1));
                if (v130 == --a2)
                {
                  *v130 = v128;
                }
                else
                {
                  *v130 = *a2;
                  *a2 = v128;
                  v134 = (char *)v130 - (char *)v10 + 8;
                  if (v134 >= 9)
                  {
                    v135 = (((unint64_t)v134 >> 3) - 2) >> 1;
                    v136 = &v10[v135];
                    v137 = *v136;
                    v138 = *v130;
                    v139 = *v129;
                    v140 = *(double *)(v139 + 16 * *v130);
                    if (*(double *)(v139 + 16 * *v136) > v140)
                    {
                      do
                      {
                        v141 = v136;
                        *v130 = v137;
                        if (!v135)
                          break;
                        v135 = (v135 - 1) >> 1;
                        v136 = &v10[v135];
                        v137 = *v136;
                        v130 = v141;
                      }
                      while (*(double *)(v139 + 16 * *v136) > v140);
                      *v141 = v138;
                    }
                  }
                }
                v116 = v126-- <= 2;
              }
              while (!v116);
            }
            return result;
          }
          v13 = (unint64_t)v12 >> 1;
          v14 = &v10[(unint64_t)v12 >> 1];
          v15 = **a3;
          v16 = *(a2 - 1);
          v17 = *(double *)(v15 + 16 * v16);
          if ((unint64_t)v11 < 0x401)
          {
            v22 = *v10;
            v23 = *v14;
            v24 = *(double *)(v15 + 16 * *v10);
            v25 = *(double *)(v15 + 16 * *v14);
            if (v24 <= v25)
            {
              if (v17 > v24)
              {
                *v10 = v16;
                *(a2 - 1) = v22;
                v27 = *v14;
                if (*(double *)(v15 + 16 * *v10) > *(double *)(v15 + 16 * *v14))
                {
                  *v14 = *v10;
                  *v10 = v27;
                  --a4;
                  v28 = v27;
                  if ((a5 & 1) != 0)
                    goto LABEL_33;
                  goto LABEL_55;
                }
              }
              goto LABEL_32;
            }
            if (v17 <= v24)
            {
              *v14 = v22;
              *v10 = v23;
              v40 = *(a2 - 1);
              if (*(double *)(v15 + 16 * v40) <= v25)
                goto LABEL_32;
              *v10 = v40;
            }
            else
            {
              *v14 = v16;
            }
            *(a2 - 1) = v23;
LABEL_32:
            --a4;
            v28 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_33;
            goto LABEL_55;
          }
          v18 = *v14;
          v19 = *v10;
          v20 = *(double *)(v15 + 16 * *v14);
          v21 = *(double *)(v15 + 16 * *v10);
          if (v20 <= v21)
          {
            if (v17 > v20)
            {
              *v14 = v16;
              *(a2 - 1) = v18;
              v26 = *v10;
              if (*(double *)(v15 + 16 * *v14) > *(double *)(v15 + 16 * *v10))
              {
                *v10 = *v14;
                *v14 = v26;
              }
            }
          }
          else
          {
            if (v17 <= v20)
            {
              *v10 = v18;
              *v14 = v19;
              v29 = *(a2 - 1);
              if (*(double *)(v15 + 16 * v29) <= v21)
                goto LABEL_23;
              *v14 = v29;
            }
            else
            {
              *v10 = v16;
            }
            *(a2 - 1) = v19;
          }
LABEL_23:
          v30 = &v10[v13];
          v33 = *(v30 - 1);
          v31 = v30 - 1;
          v32 = v33;
          v34 = v10[1];
          v35 = *(double *)(v15 + 16 * v33);
          v36 = *(double *)(v15 + 16 * v34);
          v37 = *(a2 - 2);
          v38 = *(double *)(v15 + 16 * v37);
          if (v35 <= v36)
          {
            if (v38 > v35)
            {
              *v31 = v37;
              *(a2 - 2) = v32;
              v39 = v10[1];
              if (*(double *)(v15 + 16 * *v31) > *(double *)(v15 + 16 * v39))
              {
                v10[1] = *v31;
                *v31 = v39;
              }
            }
          }
          else
          {
            if (v38 <= v35)
            {
              v10[1] = v32;
              *v31 = v34;
              v42 = *(a2 - 2);
              if (*(double *)(v15 + 16 * v42) <= v36)
                goto LABEL_37;
              *v31 = v42;
            }
            else
            {
              v10[1] = v37;
            }
            *(a2 - 2) = v34;
          }
LABEL_37:
          v43 = &v10[v13];
          v46 = v43[1];
          v44 = v43 + 1;
          v45 = v46;
          v47 = v10[2];
          v48 = *(double *)(v15 + 16 * v46);
          v49 = *(double *)(v15 + 16 * v47);
          v50 = *(a2 - 3);
          v51 = *(double *)(v15 + 16 * v50);
          if (v48 <= v49)
          {
            if (v51 > v48)
            {
              *v44 = v50;
              *(a2 - 3) = v45;
              v52 = v10[2];
              if (*(double *)(v15 + 16 * *v44) > *(double *)(v15 + 16 * v52))
              {
                v10[2] = *v44;
                *v44 = v52;
              }
            }
          }
          else
          {
            if (v51 <= v48)
            {
              v10[2] = v45;
              *v44 = v47;
              v53 = *(a2 - 3);
              if (*(double *)(v15 + 16 * v53) <= v49)
                goto LABEL_46;
              *v44 = v53;
            }
            else
            {
              v10[2] = v50;
            }
            *(a2 - 3) = v47;
          }
LABEL_46:
          v54 = *v14;
          v55 = *v31;
          v56 = *(double *)(v15 + 16 * *v14);
          v57 = *(double *)(v15 + 16 * *v31);
          v58 = *v44;
          v59 = *(double *)(v15 + 16 * *v44);
          if (v56 > v57)
          {
            if (v59 <= v56)
            {
              *v31 = v54;
              *v14 = v55;
              v31 = v14;
              v54 = v58;
              if (v59 <= v57)
              {
                v60 = *v10;
                *v10 = v55;
                *v14 = v60;
                --a4;
                v28 = *v10;
                if ((a5 & 1) != 0)
                  goto LABEL_33;
                goto LABEL_55;
              }
            }
            goto LABEL_53;
          }
          if (v59 <= v56)
            goto LABEL_54;
          *v14 = v58;
          *v44 = v54;
          v44 = v14;
          v54 = v55;
          if (v59 > v57)
          {
LABEL_53:
            *v31 = v58;
            *v44 = v55;
LABEL_54:
            v61 = *v10;
            *v10 = v54;
            *v14 = v61;
            --a4;
            v28 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_33;
LABEL_55:
            v41 = *(double *)(v15 + 16 * v28);
            if (*(double *)(v15 + 16 * *(v10 - 1)) > v41)
              goto LABEL_56;
            if (v41 <= *(double *)(v15 + 16 * *(a2 - 1)))
            {
              v77 = v10 + 1;
              do
              {
                v10 = v77;
                if (v77 >= a2)
                  break;
                ++v77;
              }
              while (v41 <= *(double *)(v15 + 16 * *v10));
            }
            else
            {
              do
              {
                v76 = v10[1];
                ++v10;
              }
              while (v41 <= *(double *)(v15 + 16 * v76));
            }
            v78 = a2;
            if (v10 < a2)
            {
              v78 = a2;
              do
                v79 = *--v78;
              while (v41 > *(double *)(v15 + 16 * v79));
            }
            if (v10 < v78)
            {
              v80 = *v10;
              v81 = *v78;
              do
              {
                *v10 = v81;
                *v78 = v80;
                do
                {
                  v82 = v10[1];
                  ++v10;
                  v80 = v82;
                }
                while (v41 <= *(double *)(v15 + 16 * v82));
                do
                {
                  v83 = *--v78;
                  v81 = v83;
                }
                while (v41 > *(double *)(v15 + 16 * v83));
              }
              while (v10 < v78);
            }
            v84 = v10 - 1;
            if (v10 - 1 != v9)
              *v9 = *v84;
            a5 = 0;
            *v84 = v28;
            continue;
          }
          v75 = *v10;
          *v10 = v58;
          *v14 = v75;
          --a4;
          v28 = *v10;
          if ((a5 & 1) == 0)
            goto LABEL_55;
LABEL_33:
          v41 = *(double *)(v15 + 16 * v28);
LABEL_56:
          v62 = 0;
          do
            v63 = v10[++v62];
          while (*(double *)(v15 + 16 * v63) > v41);
          v64 = &v10[v62];
          v65 = a2;
          if (v62 == 1)
          {
            v65 = a2;
            do
            {
              if (v64 >= v65)
                break;
              v67 = *--v65;
            }
            while (*(double *)(v15 + 16 * v67) <= v41);
          }
          else
          {
            do
              v66 = *--v65;
            while (*(double *)(v15 + 16 * v66) <= v41);
          }
          if (v64 >= v65)
          {
            v73 = v64 - 1;
            if (v64 - 1 != v10)
              goto LABEL_73;
          }
          else
          {
            v68 = *v65;
            v69 = &v10[v62];
            v70 = v65;
            do
            {
              *v69 = v68;
              *v70 = v63;
              do
              {
                v71 = v69[1];
                ++v69;
                v63 = v71;
              }
              while (*(double *)(v15 + 16 * v71) > v41);
              do
              {
                v72 = *--v70;
                v68 = v72;
              }
              while (*(double *)(v15 + 16 * v72) <= v41);
            }
            while (v69 < v70);
            v73 = v69 - 1;
            if (v69 - 1 == v10)
              goto LABEL_74;
LABEL_73:
            *v10 = *v73;
          }
LABEL_74:
          *v73 = v28;
          if (v64 < v65)
            goto LABEL_77;
          v74 = sub_20FC6511C(v10, v73, a3);
          v10 = v73 + 1;
          result = sub_20FC6511C(v73 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            if (v74)
              continue;
LABEL_77:
            result = sub_20FC645C0(v9, v73, a3, a4, a5 & 1);
            a5 = 0;
            v10 = v73 + 1;
            continue;
          }
          a2 = v73;
          if (v74)
            return result;
          goto LABEL_2;
        }
        if ((a5 & 1) != 0)
        {
          if (v10 != a2)
          {
            v103 = v10 + 1;
            if (v10 + 1 != a2)
            {
              v104 = **a3;
              v105 = 8;
              v106 = v10;
              do
              {
                v109 = *v106;
                v108 = v106[1];
                v106 = v103;
                v110 = *(double *)(v104 + 16 * v108);
                if (v110 > *(double *)(v104 + 16 * v109))
                {
                  v111 = v105;
                  do
                  {
                    *(uint64_t *)((char *)v10 + v111) = v109;
                    v112 = v111 - 8;
                    if (v111 == 8)
                    {
                      v107 = v10;
                      goto LABEL_116;
                    }
                    v109 = *(uint64_t *)((char *)v10 + v111 - 16);
                    v111 -= 8;
                  }
                  while (v110 > *(double *)(v104 + 16 * v109));
                  v107 = (uint64_t *)((char *)v10 + v112);
LABEL_116:
                  *v107 = v108;
                }
                v103 = v106 + 1;
                v105 += 8;
              }
              while (v106 + 1 != a2);
            }
          }
        }
        else if (v10 != a2)
        {
          v142 = v10 + 1;
          if (v10 + 1 != a2)
          {
            v143 = **a3;
            do
            {
              v145 = *v9;
              v144 = v9[1];
              v9 = v142;
              v146 = *(double *)(v143 + 16 * v144);
              if (v146 > *(double *)(v143 + 16 * v145))
              {
                do
                {
                  *v142 = v145;
                  v145 = *(v142 - 2);
                  --v142;
                }
                while (v146 > *(double *)(v143 + 16 * v145));
                *v142 = v144;
              }
              v142 = v9 + 1;
            }
            while (v9 + 1 != a2);
          }
        }
        return result;
    }
  }
}

BOOL sub_20FC6511C(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int v41;
  uint64_t i;
  uint64_t v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (*(double *)(**a3 + 16 * v8) > *(double *)(**a3 + 16 * *a1))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      v10 = *a1;
      v11 = a1[1];
      v12 = **a3;
      v13 = *(double *)(v12 + 16 * v11);
      v14 = *(double *)(v12 + 16 * *a1);
      v15 = *(a2 - 1);
      v16 = *(double *)(v12 + 16 * v15);
      if (v13 <= v14)
      {
        if (v16 > v13)
        {
          a1[1] = v15;
          *(a2 - 1) = v11;
          v39 = *a1;
          v38 = a1[1];
          if (*(double *)(v12 + 16 * v38) > *(double *)(v12 + 16 * *a1))
          {
            *a1 = v38;
            a1[1] = v39;
          }
        }
      }
      else if (v16 <= v13)
      {
        *a1 = v11;
        a1[1] = v10;
        v48 = *(a2 - 1);
        if (*(double *)(v12 + 16 * v48) > v14)
        {
          a1[1] = v48;
          *(a2 - 1) = v10;
        }
      }
      else
      {
        *a1 = v15;
        *(a2 - 1) = v10;
      }
      return result;
    case 4:
      sub_20FC654E0(a1, a1 + 1, a1 + 2, a2 - 1, **a3);
      return 1;
    case 5:
      v27 = a1 + 1;
      v28 = a1 + 2;
      v29 = a1 + 3;
      sub_20FC654E0(a1, a1 + 1, a1 + 2, a1 + 3, **a3);
      v30 = *(a2 - 1);
      v31 = a1[3];
      v32 = **a3;
      if (*(double *)(v32 + 16 * v30) <= *(double *)(v32 + 16 * v31))
        return 1;
      *v29 = v30;
      *(a2 - 1) = v31;
      v33 = *v29;
      v34 = *v28;
      v35 = *(double *)(v32 + 16 * *v29);
      if (v35 <= *(double *)(v32 + 16 * *v28))
        return 1;
      *v28 = v33;
      *v29 = v34;
      v36 = *v27;
      if (v35 <= *(double *)(v32 + 16 * *v27))
        return 1;
      a1[1] = v33;
      a1[2] = v36;
      v37 = *a1;
      if (v35 <= *(double *)(v32 + 16 * *a1))
        return 1;
      *a1 = v33;
      a1[1] = v37;
      return 1;
    default:
      v18 = a1 + 2;
      v17 = a1[2];
      v19 = a1[1];
      v20 = *a1;
      v21 = **a3;
      v22 = *(double *)(v21 + 16 * v19);
      v23 = *(double *)(v21 + 16 * *a1);
      v24 = *(double *)(v21 + 16 * v17);
      if (v22 > v23)
      {
        v25 = a1;
        v26 = a1 + 2;
        if (v24 <= v22)
        {
          *a1 = v19;
          a1[1] = v20;
          v25 = a1 + 1;
          v26 = a1 + 2;
          if (v24 <= v23)
            goto LABEL_25;
        }
LABEL_24:
        *v25 = v17;
        *v26 = v20;
        goto LABEL_25;
      }
      if (v24 > v22)
      {
        a1[1] = v17;
        *v18 = v19;
        v25 = a1;
        v26 = a1 + 1;
        if (v24 > v23)
          goto LABEL_24;
      }
LABEL_25:
      v40 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v41 = 0;
      for (i = 24; ; i += 8)
      {
        v43 = *v40;
        v44 = *v18;
        v45 = *(double *)(v21 + 16 * *v40);
        if (v45 > *(double *)(v21 + 16 * v44))
          break;
LABEL_34:
        v18 = v40++;
        if (v40 == a2)
          return 1;
      }
      v46 = i;
      do
      {
        *(uint64_t *)((char *)a1 + v46) = v44;
        v47 = v46 - 8;
        if (v46 == 8)
        {
          *a1 = v43;
          if (++v41 != 8)
            goto LABEL_34;
          return v40 + 1 == a2;
        }
        v44 = *(uint64_t *)((char *)a1 + v46 - 16);
        v46 -= 8;
      }
      while (v45 > *(double *)(v21 + 16 * v44));
      *(uint64_t *)((char *)a1 + v47) = v43;
      if (++v41 != 8)
        goto LABEL_34;
      return v40 + 1 == a2;
  }
}

uint64_t *sub_20FC654E0(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *a2;
  v6 = *result;
  v7 = *(double *)(a5 + 16 * *a2);
  v8 = *(double *)(a5 + 16 * *result);
  v9 = *a3;
  v10 = *(double *)(a5 + 16 * *a3);
  if (v7 <= v8)
  {
    if (v10 <= v7)
    {
      v5 = *a3;
    }
    else
    {
      *a2 = v9;
      *a3 = v5;
      v11 = *result;
      if (*(double *)(a5 + 16 * *a2) > *(double *)(a5 + 16 * *result))
      {
        *result = *a2;
        *a2 = v11;
        v5 = *a3;
      }
    }
  }
  else
  {
    if (v10 > v7)
    {
      *result = v9;
LABEL_9:
      *a3 = v6;
      v5 = v6;
      goto LABEL_11;
    }
    *result = v5;
    *a2 = v6;
    v5 = *a3;
    if (*(double *)(a5 + 16 * *a3) > v8)
    {
      *a2 = v5;
      goto LABEL_9;
    }
  }
LABEL_11:
  if (*(double *)(a5 + 16 * *a4) > *(double *)(a5 + 16 * v5))
  {
    *a3 = *a4;
    *a4 = v5;
    v12 = *a2;
    if (*(double *)(a5 + 16 * *a3) > *(double *)(a5 + 16 * *a2))
    {
      *a2 = *a3;
      *a3 = v12;
      v13 = *result;
      if (*(double *)(a5 + 16 * *a2) > *(double *)(a5 + 16 * *result))
      {
        *result = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

void sub_20FC65604(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  float64x2_t v6;
  float64x2_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v26;
  char *v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int *v31;
  char *v32;
  unsigned int v33;
  _QWORD **v34;
  _QWORD *v35;
  unint64_t v36;
  __int128 v37[4];
  double v38;

  v4 = *a1;
  v5 = *(_QWORD *)(a2 + 16);
  if (!*(_BYTE *)(v5 + 112))
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 1572, (uint64_t)"track_ptr->getStructure()", 25, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v5 = *(_QWORD *)(a2 + 16);
  }
  if (*(_BYTE *)(v5 + 72))
  {
    v6 = vcvtq_f64_f32(*(float32x2_t *)(v5 + 84));
    v37[0] = (__int128)vcvtq_f64_f32(*(float32x2_t *)(v5 + 76));
    v37[1] = (__int128)v6;
    v7 = vcvtq_f64_f32(*(float32x2_t *)(v5 + 100));
    v37[2] = (__int128)vcvtq_f64_f32(*(float32x2_t *)(v5 + 92));
    v37[3] = (__int128)v7;
    v38 = *(float *)(v5 + 108);
    v8 = *(_QWORD *)(v5 + 120);
    v9 = *(_QWORD *)(v5 + 128);
    if (v8 != v9)
    {
      v10 = (__int128 *)(v5 + 48);
      do
      {
        v11 = *(_DWORD *)(v8 + 16);
        v12 = *(_QWORD *)v8;
        v13 = *(_DWORD *)(v8 + 8);
        v14 = sub_20E9DF85C((_QWORD *)(*(_QWORD *)(v4 + 8) + 1784), (uint64_t *)v8);
        if (v14)
        {
          v15 = v14[13];
          v16 = *(_QWORD *)(v4 + 8);
          v19 = *(uint64_t **)(v16 + 56);
          v17 = (uint64_t *)(v16 + 56);
          v18 = v19;
          if (v19)
            goto LABEL_12;
        }
        else
        {
          v15 = 0;
          v20 = *(_QWORD *)(v4 + 8);
          v21 = *(uint64_t **)(v20 + 56);
          v17 = (uint64_t *)(v20 + 56);
          v18 = v21;
          if (v21)
          {
LABEL_12:
            v22 = v17;
            do
            {
              v23 = v18[4];
              if (v23 < v12)
              {
                ++v18;
              }
              else if (v23 == v12)
              {
                if (*((_DWORD *)v18 + 10) < v13)
                  ++v18;
                else
                  v22 = v18;
              }
              else
              {
                v22 = v18;
              }
              v18 = (uint64_t *)*v18;
            }
            while (v18);
            if (v22 != v17)
            {
              v24 = v22[4];
              if (v12 >= v24 && (v12 != v24 || *((_DWORD *)v22 + 10) <= v13))
                goto LABEL_26;
            }
          }
        }
        v22 = v17;
LABEL_26:
        if (*(_DWORD *)(a1[1] + 8) <= v13 && *(_DWORD *)(a1[2] + 8) >= v13 && v22 != v17)
        {
          v26 = a1[3];
          v27 = *(char **)(v26 + 8);
          v28 = *(char **)(v26 + 16);
          if (v28 != v27)
          {
            v29 = (v28 - v27) >> 4;
            do
            {
              v30 = v29 >> 1;
              v31 = (unsigned int *)&v27[16 * (v29 >> 1)];
              v33 = *v31;
              v32 = (char *)(v31 + 4);
              v29 += ~(v29 >> 1);
              if (v33 < v13)
                v27 = v32;
              else
                v29 = v30;
            }
            while (v29);
          }
          if (v27 == v28 || *(_DWORD *)v27 != v13 || *(_BYTE *)(*((_QWORD *)v27 + 1) + 20))
          {
            v34 = (_QWORD **)a1[4];
            v35 = (_QWORD *)a1[5];
            v36 = (*v35)++;
            if (((*(_QWORD *)(**v34 + ((v36 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v36) & 1) != 0)
            {
              sub_20FC5EA9C(v11, v13, (_OWORD *)a2, v10, v37, v15, v4 + 3152, *(_DWORD *)a1[6], *(float *)(v8 + 32), *(float *)(v8 + 36), *(float *)(v8 + 56), (_QWORD *)a1[7]);
              ++*(_DWORD *)a1[6];
            }
          }
        }
        v8 += 64;
      }
      while (v8 != v9);
    }
  }
}

void sub_20FC6589C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40[8];
  uint64_t v41;
  int v42;
  __int128 v43;
  __int128 v44;

  v5 = (_QWORD *)a1[2];
  if (v5)
  {
    if (!a3)
    {
      v8 = (_QWORD *)*v5;
      v6 = v5 + 1;
      v7 = v8;
      if (v8 == v6)
      {
        a3 = 0;
      }
      else
      {
        a3 = 0;
        do
        {
          v9 = (_QWORD *)v7[1];
          v10 = v7;
          if (v9)
          {
            do
            {
              v11 = v9;
              v9 = (_QWORD *)*v9;
            }
            while (v9);
          }
          else
          {
            do
            {
              v11 = (_QWORD *)v10[2];
              v12 = *v11 == (_QWORD)v10;
              v10 = v11;
            }
            while (!v12);
          }
          a3 += (uint64_t)(*(_QWORD *)(v7[6] + 128) - *(_QWORD *)(v7[6] + 120)) >> 6;
          v7 = v11;
        }
        while (v11 != v6);
      }
LABEL_17:
      v14 = (_QWORD *)a1[18];
      if (v14)
      {
        v17 = (_QWORD *)*v14;
        v15 = v14 + 1;
        v16 = v17;
        if (v17 != v15)
        {
          do
          {
            v25 = (_QWORD *)v16[1];
            v26 = v16;
            if (v25)
            {
              do
              {
                v27 = v25;
                v25 = (_QWORD *)*v25;
              }
              while (v25);
            }
            else
            {
              do
              {
                v27 = (_QWORD *)v26[2];
                v12 = *v27 == (_QWORD)v26;
                v26 = v27;
              }
              while (!v12);
            }
            a3 += (uint64_t)(*(_QWORD *)(v16[6] + 128) - *(_QWORD *)(v16[6] + 120)) >> 6;
            v16 = v27;
          }
          while (v27 != v15);
        }
      }
    }
  }
  else
  {
    v13 = a1[18];
    if (!v13 || !*(_QWORD *)(v13 + 16))
      return;
    if (!a3)
      goto LABEL_17;
  }
  sub_20FC5E8A8((uint64_t)(a1 + 806), a3 - 0x79435E50D79435E5 * ((uint64_t)(a1[807] - a1[806]) >> 4));
  a1[841] = a1 + 394;
  v18 = a1[1];
  v44 = *(_OWORD *)(*(_QWORD *)(v18 + 48) + 32);
  v21 = *(_QWORD *)(v18 + 56);
  v19 = v18 + 56;
  v20 = v21;
  if (v21)
  {
    do
    {
      v22 = v20;
      v20 = *(_QWORD *)(v20 + 8);
    }
    while (v20);
  }
  else
  {
    do
    {
      v22 = *(_QWORD *)(v19 + 16);
      v12 = *(_QWORD *)v22 == v19;
      v19 = v22;
    }
    while (v12);
  }
  v43 = *(_OWORD *)(v22 + 32);
  v23 = a1[807];
  if (v23 == a1[806])
    v24 = 0;
  else
    v24 = *(_DWORD *)(v23 - 296) + 1;
  v42 = v24;
  v40[7] = (uint64_t)(a1 + 607);
  v41 = 0;
  v40[0] = (uint64_t)a1;
  v40[1] = (uint64_t)&v44;
  v40[2] = (uint64_t)&v43;
  v40[3] = (uint64_t)(a1 + 646);
  v40[4] = a2;
  v40[5] = (uint64_t)&v41;
  v40[6] = (uint64_t)&v42;
  v28 = (_QWORD *)a1[2];
  if (v28)
  {
    v31 = (_QWORD *)*v28;
    v29 = v28 + 1;
    v30 = v31;
    if (v31 != v29)
    {
      do
      {
        sub_20FC65B4C(v40, (uint64_t)(v30 + 4));
        v36 = (_QWORD *)v30[1];
        if (v36)
        {
          do
          {
            v37 = v36;
            v36 = (_QWORD *)*v36;
          }
          while (v36);
        }
        else
        {
          do
          {
            v37 = (_QWORD *)v30[2];
            v12 = *v37 == (_QWORD)v30;
            v30 = v37;
          }
          while (!v12);
        }
        v30 = v37;
      }
      while (v37 != v29);
    }
  }
  v32 = (_QWORD *)a1[18];
  if (v32)
  {
    v35 = (_QWORD *)*v32;
    v33 = v32 + 1;
    v34 = v35;
    if (v35 != v33)
    {
      do
      {
        sub_20FC65B4C(v40, (uint64_t)(v34 + 4));
        v38 = (_QWORD *)v34[1];
        if (v38)
        {
          do
          {
            v39 = v38;
            v38 = (_QWORD *)*v38;
          }
          while (v38);
        }
        else
        {
          do
          {
            v39 = (_QWORD *)v34[2];
            v12 = *v39 == (_QWORD)v34;
            v34 = v39;
          }
          while (!v12);
        }
        v34 = v39;
      }
      while (v39 != v33);
    }
  }
}

void sub_20FC65B4C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  float64x2_t v6;
  float64x2_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v26;
  char *v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int *v31;
  char *v32;
  unsigned int v33;
  __int128 v34[4];
  double v35;

  v4 = *a1;
  v5 = *(_QWORD *)(a2 + 16);
  if (!*(_BYTE *)(v5 + 112))
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 1572, (uint64_t)"track_ptr->getStructure()", 25, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v5 = *(_QWORD *)(a2 + 16);
  }
  if (*(_BYTE *)(v5 + 72))
  {
    v6 = vcvtq_f64_f32(*(float32x2_t *)(v5 + 84));
    v34[0] = (__int128)vcvtq_f64_f32(*(float32x2_t *)(v5 + 76));
    v34[1] = (__int128)v6;
    v7 = vcvtq_f64_f32(*(float32x2_t *)(v5 + 100));
    v34[2] = (__int128)vcvtq_f64_f32(*(float32x2_t *)(v5 + 92));
    v34[3] = (__int128)v7;
    v35 = *(float *)(v5 + 108);
    v8 = *(_QWORD *)(v5 + 120);
    v9 = *(_QWORD *)(v5 + 128);
    if (v8 != v9)
    {
      v10 = (__int128 *)(v5 + 48);
      do
      {
        v11 = *(_DWORD *)(v8 + 16);
        v12 = *(_QWORD *)v8;
        v13 = *(_DWORD *)(v8 + 8);
        v14 = sub_20E9DF85C((_QWORD *)(*(_QWORD *)(v4 + 8) + 1784), (uint64_t *)v8);
        if (v14)
        {
          v15 = v14[13];
          v16 = *(_QWORD *)(v4 + 8);
          v19 = *(uint64_t **)(v16 + 56);
          v17 = (uint64_t *)(v16 + 56);
          v18 = v19;
          if (v19)
            goto LABEL_13;
        }
        else
        {
          v15 = 0;
          v20 = *(_QWORD *)(v4 + 8);
          v21 = *(uint64_t **)(v20 + 56);
          v17 = (uint64_t *)(v20 + 56);
          v18 = v21;
          if (v21)
          {
LABEL_13:
            v22 = v17;
            do
            {
              v23 = v18[4];
              if (v23 < v12)
              {
                ++v18;
              }
              else if (v23 == v12)
              {
                if (*((_DWORD *)v18 + 10) < v13)
                  ++v18;
                else
                  v22 = v18;
              }
              else
              {
                v22 = v18;
              }
              v18 = (uint64_t *)*v18;
            }
            while (v18);
            if (v22 != v17)
            {
              v24 = v22[4];
              if (v12 >= v24 && (v12 != v24 || *((_DWORD *)v22 + 10) <= v13))
                goto LABEL_27;
            }
          }
        }
        v22 = v17;
LABEL_27:
        if (*(_DWORD *)(a1[1] + 8) <= v13 && *(_DWORD *)(a1[2] + 8) >= v13 && v22 != v17)
        {
          v26 = a1[3];
          v27 = *(char **)(v26 + 8);
          v28 = *(char **)(v26 + 16);
          if (v28 != v27)
          {
            v29 = (v28 - v27) >> 4;
            do
            {
              v30 = v29 >> 1;
              v31 = (unsigned int *)&v27[16 * (v29 >> 1)];
              v33 = *v31;
              v32 = (char *)(v31 + 4);
              v29 += ~(v29 >> 1);
              if (v33 < v13)
                v27 = v32;
              else
                v29 = v30;
            }
            while (v29);
          }
          if (v27 == v28 || *(_DWORD *)v27 != v13 || *(_BYTE *)(*((_QWORD *)v27 + 1) + 20))
          {
            ++*(_QWORD *)a1[5];
            sub_20FC65DC8(v11, v13, (_OWORD *)a2, v10, v34, v15, v4 + 3152, *(_DWORD *)a1[6], *(float *)(v8 + 32), *(float *)(v8 + 36), *(float *)(v8 + 56), (int64x2_t *)a1[7]);
            ++*(_DWORD *)a1[6];
          }
        }
        v8 += 64;
      }
      while (v8 != v9);
    }
  }
}

void sub_20FC65DC8(unsigned int a1, unsigned int a2, _OWORD *a3, __int128 *a4, __int128 *a5, uint64_t a6, uint64_t a7, unsigned int a8, float a9, float a10, float a11, int64x2_t *a12)
{
  char **v14;
  double v15;
  double v16;
  double v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  unint64_t v30;
  unint64_t v31;
  int64x2_t *v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v39;
  char *v40;
  __int128 v41;
  __int128 v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  char *v57;
  std::__shared_weak_count *v58;
  unint64_t *p_shared_owners;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unsigned int *v72;
  _DWORD *v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unsigned int *v80;
  _DWORD *v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unsigned int *v88;
  _DWORD *v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unsigned int *v96;
  _DWORD *v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  unint64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  unsigned int v110;
  _QWORD *v111;
  std::string *p_dst;
  std::string::size_type size;
  _QWORD *v114;
  _QWORD *v115;
  int v116;
  char *v117;
  char *v118;
  char *v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unsigned int *v123;
  char *v124;
  unsigned int v125;
  unint64_t v126;
  unint64_t v127;
  unsigned int *v128;
  char *v129;
  unsigned int v130;
  uint64_t v131;
  _QWORD *v132;
  std::string *v133;
  std::string::size_type v134;
  _QWORD *v135;
  _QWORD *v136;
  _QWORD *v137;
  _QWORD *v138;
  const char *v139;
  uint64_t v140;
  _QWORD *v141;
  int v142;
  char *v143;
  char *v144;
  char *v145;
  uint64_t v146;
  _QWORD *v147;
  std::string *v148;
  std::string::size_type v149;
  _QWORD *v150;
  _QWORD *v151;
  unint64_t v152;
  unint64_t v153;
  unsigned int *v154;
  char *v155;
  unsigned int v156;
  unint64_t v157;
  unint64_t v158;
  unsigned int *v159;
  char *v160;
  unsigned int v161;
  uint64_t v162;
  _QWORD *v163;
  std::string *v164;
  std::string::size_type v165;
  _QWORD *v166;
  _QWORD *v167;
  _QWORD *v168;
  _QWORD *v169;
  const char *v170;
  uint64_t v171;
  _QWORD *v172;
  char *v173;
  char *v174;
  char *v175;
  uint64_t v176;
  _QWORD *v177;
  std::string *v178;
  std::string::size_type v179;
  _QWORD *v180;
  _QWORD *v181;
  unint64_t v182;
  unint64_t v183;
  unsigned int *v184;
  char *v185;
  unsigned int v186;
  unint64_t v187;
  unint64_t v188;
  unsigned int *v189;
  char *v190;
  unsigned int v191;
  uint64_t v192;
  _QWORD *v193;
  std::string *v194;
  std::string::size_type v195;
  _QWORD *v196;
  _QWORD *v197;
  _QWORD *v198;
  _QWORD *v199;
  const char *v200;
  uint64_t v201;
  _QWORD *v202;
  char *v203;
  char *v204;
  char *v205;
  uint64_t v206;
  _QWORD *v207;
  std::string *v208;
  std::string::size_type v209;
  _QWORD *v210;
  _QWORD *v211;
  unint64_t v212;
  unint64_t v213;
  unsigned int *v214;
  char *v215;
  unsigned int v216;
  unint64_t v217;
  unint64_t v218;
  unsigned int *v219;
  char *v220;
  unsigned int v221;
  uint64_t v222;
  _QWORD *v223;
  std::string *v224;
  std::string::size_type v225;
  _QWORD *v226;
  _QWORD *v227;
  _QWORD *v228;
  _QWORD *v229;
  const char *v230;
  uint64_t v231;
  _QWORD *v232;
  char *v233;
  char *v234;
  uint64_t v235;
  _QWORD *v236;
  std::string *v237;
  std::string::size_type v238;
  _QWORD *v239;
  _QWORD *v240;
  unint64_t v241;
  unint64_t v242;
  char *v243;
  unint64_t v244;
  char *v245;
  _QWORD *v246;
  std::string *v247;
  std::string::size_type v248;
  _QWORD *v249;
  _QWORD *v250;
  BOOL v251;
  char v252;
  std::string::size_type v253;
  std::string *v254;
  _QWORD *v255;
  std::string *v256;
  std::string::size_type v257;
  _QWORD *v258;
  _QWORD *v259;
  unint64_t v260;
  const void *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  std::string *v265;
  __int128 v266;
  std::string *v267;
  __int128 v268;
  void **v269;
  uint64_t v270;
  _BOOL4 v271;
  unint64_t v273;
  std::string v274;
  BOOL v275;
  std::string v276;
  void *v277[2];
  int64_t v278;
  uint64_t v279;
  __int128 v280;
  __int128 v281;
  const void *v282;
  __int128 v283;
  __int128 v284;
  void *__p[2];
  __int128 v286;
  unint64_t v287;
  _OWORD v288[2];
  __int128 v289;
  _BYTE v290[20];
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  unint64_t v295;
  char v296;
  uint64_t v297;
  std::__shared_weak_count *v298;
  char v299;
  std::string __dst;

  a12[117].i64[0] = a7;
  *(_OWORD *)((char *)v274.__r_.__value_.__r.__words + 6) = *a3;
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0uLL;
  v279 = a8;
  v14 = (char **)&a12[99].i64[1];
  v15 = a9;
  v16 = a10;
  v17 = a11;
  *(double *)&v280 = a9;
  *((double *)&v280 + 1) = a10;
  v281 = *a4;
  v282 = (const void *)*((_QWORD *)a4 + 2);
  v18 = a5[3];
  *(_OWORD *)__p = a5[2];
  v286 = v18;
  v287 = *((_QWORD *)a5 + 8);
  v19 = a5[1];
  v283 = *a5;
  v284 = v19;
  *(double *)&v289 = a11;
  *((_QWORD *)&v289 + 1) = a6;
  *(_WORD *)v290 = 0;
  *(_OWORD *)&v290[2] = *(_OWORD *)&v274.__r_.__value_.__l.__data_;
  *(_WORD *)&v290[18] = v274.__r_.__value_.__r.__words[2];
  v291 = 0u;
  v292 = 0u;
  v297 = 0;
  v298 = 0;
  v295 = 0xBFF0000000000000;
  v296 = 0;
  v299 = 0;
  v20 = (char *)a12[100].i64[0];
  v21 = a12[100].u64[1];
  if ((unint64_t)v20 >= v21)
  {
    v273 = a8;
    v33 = *v14;
    v34 = 0x86BCA1AF286BCA1BLL * ((v20 - v33) >> 4) + 1;
    if (v34 > 0xD79435E50D7943)
      sub_20E867F44();
    v35 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v21 - (_QWORD)v33) >> 4);
    if (2 * v35 > v34)
      v34 = 2 * v35;
    if (v35 >= 0x6BCA1AF286BCA1)
      v36 = 0xD79435E50D7943;
    else
      v36 = v34;
    if (v36 > 0xD79435E50D7943)
      sub_20E877A38();
    v39 = (char *)operator new(304 * v36);
    v40 = &v39[16 * ((v20 - v33) >> 4)];
    *((double *)v40 + 2) = v15;
    *((double *)v40 + 3) = v16;
    *((_OWORD *)v40 + 2) = *a4;
    v41 = *a5;
    *(_OWORD *)(v40 + 72) = a5[1];
    v42 = a5[3];
    *(_OWORD *)(v40 + 88) = a5[2];
    v43 = &v39[304 * v36];
    v31 = v273;
    *(_QWORD *)v40 = -1;
    *((_QWORD *)v40 + 1) = v273;
    *((_QWORD *)v40 + 6) = *((_QWORD *)a4 + 2);
    *(_OWORD *)(v40 + 104) = v42;
    *((_QWORD *)v40 + 15) = *((_QWORD *)a5 + 8);
    *(_OWORD *)(v40 + 56) = v41;
    *((double *)v40 + 20) = v17;
    *((_QWORD *)v40 + 21) = a6;
    *((_WORD *)v40 + 88) = 0;
    *(_OWORD *)(v40 + 178) = *(_OWORD *)&v274.__r_.__value_.__l.__data_;
    *((_WORD *)v40 + 97) = v274.__r_.__value_.__r.__words[2];
    *(_OWORD *)(v40 + 200) = 0u;
    *(_OWORD *)(v40 + 216) = 0u;
    *((_QWORD *)v40 + 33) = v295;
    v40[272] = v296;
    *((_QWORD *)v40 + 35) = 0;
    *((_QWORD *)v40 + 36) = 0;
    v297 = 0;
    v298 = 0;
    v44 = (uint64_t)(v40 + 304);
    v40[296] = 0;
    if (v20 == v33)
    {
      v32 = a12;
      a12[99].i64[1] = (uint64_t)v40;
      a12[100].i64[0] = v44;
      a12[100].i64[1] = (uint64_t)v43;
    }
    else
    {
      v45 = 0;
      v32 = a12;
      do
      {
        v46 = &v40[v45];
        v47 = &v20[v45];
        *(_QWORD *)&v40[v45 - 304] = *(_QWORD *)&v20[v45 - 304];
        *(_QWORD *)&v40[v45 - 296] = *(_QWORD *)&v20[v45 - 296];
        *(_OWORD *)&v40[v45 - 288] = *(_OWORD *)&v20[v45 - 288];
        v48 = *(_OWORD *)&v20[v45 - 272];
        *((_QWORD *)v46 - 32) = *(_QWORD *)&v20[v45 - 256];
        *(_OWORD *)&v40[v45 - 272] = v48;
        v49 = *(_OWORD *)&v20[v45 - 216];
        v50 = *(_OWORD *)&v20[v45 - 200];
        v51 = *(_QWORD *)&v20[v45 - 184];
        *(_OWORD *)(v46 - 232) = *(_OWORD *)&v20[v45 - 232];
        *((_QWORD *)v46 - 23) = v51;
        *(_OWORD *)(v46 - 200) = v50;
        *(_OWORD *)(v46 - 216) = v49;
        *(_OWORD *)(v46 - 248) = *(_OWORD *)&v20[v45 - 248];
        v52 = *(_OWORD *)&v20[v45 - 160];
        *((_OWORD *)v46 - 11) = *(_OWORD *)&v20[v45 - 176];
        *((_OWORD *)v46 - 10) = v52;
        v53 = *(_OWORD *)&v20[v45 - 144];
        v54 = *(_OWORD *)&v20[v45 - 128];
        *((_DWORD *)v46 - 28) = *(_DWORD *)&v20[v45 - 112];
        *((_OWORD *)v46 - 9) = v53;
        *((_OWORD *)v46 - 8) = v54;
        v55 = *(_OWORD *)&v20[v45 - 104];
        *(_OWORD *)(v46 - 88) = *(_OWORD *)&v20[v45 - 88];
        *(_OWORD *)(v46 - 104) = v55;
        *(_OWORD *)(v46 - 72) = *(_OWORD *)&v20[v45 - 72];
        *(_OWORD *)(v46 - 56) = *(_OWORD *)&v20[v45 - 56];
        v56 = *(_QWORD *)&v20[v45 - 40];
        *(v46 - 32) = v20[v45 - 32];
        *((_QWORD *)v46 - 5) = v56;
        *(_OWORD *)(v46 - 24) = *(_OWORD *)&v20[v45 - 24];
        *((_QWORD *)v47 - 3) = 0;
        *((_QWORD *)v47 - 2) = 0;
        *(v46 - 8) = v20[v45 - 8];
        v45 -= 304;
      }
      while (&v20[v45] != v33);
      v20 = (char *)a12[99].i64[1];
      v57 = (char *)a12[100].i64[0];
      a12[99].i64[1] = (uint64_t)&v40[v45];
      a12[100].i64[0] = v44;
      for (a12[100].i64[1] = (uint64_t)v43; v57 != v20; v57 -= 304)
      {
        v58 = (std::__shared_weak_count *)*((_QWORD *)v57 - 2);
        if (v58)
        {
          p_shared_owners = (unint64_t *)&v58->__shared_owners_;
          do
            v60 = __ldaxr(p_shared_owners);
          while (__stlxr(v60 - 1, p_shared_owners));
          if (!v60)
          {
            ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
            std::__shared_weak_count::__release_weak(v58);
          }
        }
      }
    }
    v14 = (char **)&a12[99].i64[1];
    if (v20)
      operator delete(v20);
    v61 = v298;
    v32[100].i64[0] = v44;
    if (v61)
    {
      v62 = (unint64_t *)&v61->__shared_owners_;
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
    }
  }
  else
  {
    *(_QWORD *)v20 = -1;
    *((_QWORD *)v20 + 1) = a8;
    *((_OWORD *)v20 + 1) = v280;
    v22 = v281;
    *((_QWORD *)v20 + 6) = v282;
    *((_OWORD *)v20 + 2) = v22;
    v23 = v284;
    v24 = *(_OWORD *)__p;
    v25 = v286;
    *((_QWORD *)v20 + 15) = v287;
    *(_OWORD *)(v20 + 104) = v25;
    *(_OWORD *)(v20 + 88) = v24;
    *(_OWORD *)(v20 + 72) = v23;
    *(_OWORD *)(v20 + 56) = v283;
    v26 = v288[1];
    *((_OWORD *)v20 + 8) = v288[0];
    *((_OWORD *)v20 + 9) = v26;
    v27 = v289;
    v28 = *(_OWORD *)v290;
    *((_DWORD *)v20 + 48) = *(_DWORD *)&v290[16];
    *((_OWORD *)v20 + 10) = v27;
    *((_OWORD *)v20 + 11) = v28;
    v29 = v291;
    *(_OWORD *)(v20 + 216) = v292;
    *(_OWORD *)(v20 + 200) = v29;
    *(_OWORD *)(v20 + 232) = v293;
    *(_OWORD *)(v20 + 248) = v294;
    v30 = v295;
    v20[272] = v296;
    *((_QWORD *)v20 + 33) = v30;
    *((_QWORD *)v20 + 35) = 0;
    *((_QWORD *)v20 + 36) = 0;
    v20[296] = 0;
    a12[100].i64[0] = (uint64_t)(v20 + 304);
    v31 = a8;
    v32 = a12;
  }
  if (__dst.__r_.__value_.__l.__size_)
  {
    v64 = (unint64_t *)(__dst.__r_.__value_.__l.__size_ + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      (*(void (**)(std::string::size_type))(*(_QWORD *)__dst.__r_.__value_.__l.__size_ + 16))(__dst.__r_.__value_.__l.__size_);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    }
  }
  v66 = v32[100].i64[0];
  v67 = v66 - 304;
  *(_QWORD *)(v66 - 304) = *(_QWORD *)(v66 - 296);
  v68 = v32[32].i64[0];
  v69 = v32[32].i64[1];
  if (v69 != v68)
  {
    v70 = (v69 - v68) >> 4;
    do
    {
      v71 = v70 >> 1;
      v72 = (unsigned int *)(v68 + 16 * (v70 >> 1));
      v74 = *v72;
      v73 = v72 + 4;
      v70 += ~(v70 >> 1);
      if (v74 < a1)
        v68 = (uint64_t)v73;
      else
        v70 = v71;
    }
    while (v70);
  }
  if (v68 == v69 || *(_DWORD *)v68 != a1)
    goto LABEL_71;
  v75 = *(_QWORD *)(v68 + 8);
  *(_QWORD *)(v66 - 104) = v75;
  ++*(_DWORD *)(*(_QWORD *)(v68 + 8) + 8);
  v77 = v32[20].i64[0];
  v76 = v32[20].i64[1];
  if (v76 != v77)
  {
    v78 = (v76 - v77) >> 4;
    do
    {
      v79 = v78 >> 1;
      v80 = (unsigned int *)(v77 + 16 * (v78 >> 1));
      v82 = *v80;
      v81 = v80 + 4;
      v78 += ~(v78 >> 1);
      if (v82 < a2)
        v77 = (uint64_t)v81;
      else
        v78 = v79;
    }
    while (v78);
  }
  if (v77 == v76 || *(_DWORD *)v77 != a2)
    goto LABEL_71;
  v83 = *(_QWORD *)(v77 + 8);
  *(_QWORD *)(v66 - 96) = v83;
  ++*(_DWORD *)(*(_QWORD *)(v77 + 8) + 8);
  v84 = v32[56].i64[0];
  v85 = v32[56].i64[1];
  if (v85 != v84)
  {
    v86 = (v85 - v84) >> 4;
    do
    {
      v87 = v86 >> 1;
      v88 = (unsigned int *)(v84 + 16 * (v86 >> 1));
      v90 = *v88;
      v89 = v88 + 4;
      v86 += ~(v86 >> 1);
      if (v90 < a1)
        v84 = (uint64_t)v89;
      else
        v86 = v87;
    }
    while (v86);
  }
  if (v84 == v85 || *(_DWORD *)v84 != a1)
    goto LABEL_71;
  v91 = *(_QWORD *)(v84 + 8);
  *(_QWORD *)(v66 - 88) = v91;
  ++*(_DWORD *)(*(_QWORD *)(v84 + 8) + 8);
  v92 = v32[62].i64[0];
  v93 = v32[62].i64[1];
  if (v93 != v92)
  {
    v94 = (v93 - v92) >> 4;
    do
    {
      v95 = v94 >> 1;
      v96 = (unsigned int *)(v92 + 16 * (v94 >> 1));
      v98 = *v96;
      v97 = v96 + 4;
      v94 += ~(v94 >> 1);
      if (v98 < a1)
        v92 = (uint64_t)v97;
      else
        v94 = v95;
    }
    while (v94);
  }
  if (v92 == v93 || *(_DWORD *)v92 != a1)
  {
LABEL_71:
    v100 = *(_QWORD *)(v66 - 104);
    if (v100)
      --*(_DWORD *)(v100 + 8);
    v101 = *(_QWORD *)(v66 - 96);
    if (v101)
      --*(_DWORD *)(v101 + 8);
    v102 = *(_QWORD *)(v66 - 88);
    if (v102)
      --*(_DWORD *)(v102 + 8);
    v103 = *(_QWORD *)(v66 - 80);
    if (v103)
      --*(_DWORD *)(v103 + 8);
  }
  else
  {
    v99 = *(_QWORD *)(v92 + 8);
    *(_QWORD *)(v66 - 80) = v99;
    ++*(_DWORD *)(*(_QWORD *)(v92 + 8) + 8);
    if (*(_BYTE *)(v75 + 20) || *(_BYTE *)(v83 + 20) || *(_BYTE *)(v91 + 20) || *(_BYTE *)(v99 + 20))
    {
      v32[119].i8[2] = 0;
      v32[119].i8[0] = 0;
      v32[118] = vaddq_s64(v32[118], (int64x2_t)xmmword_210378060);
      v32[185].i32[2] = 0;
      v32[185].i8[12] = 0;
      return;
    }
    --*(_DWORD *)(v75 + 8);
    --*(_DWORD *)(v83 + 8);
    *(_OWORD *)(v66 - 104) = 0u;
    --*(_DWORD *)(v91 + 8);
    --*(_DWORD *)(v99 + 8);
    *(_OWORD *)(v66 - 88) = 0u;
  }
  sub_20FC60030((uint64_t)v14, v67);
  sub_20E863438((uint64_t)&v279);
  v104 = (char *)a12[62].i64[0];
  v105 = (char *)a12[62].i64[1];
  if (v105 != v104)
  {
    v106 = (v105 - v104) >> 4;
    do
    {
      v107 = v106 >> 1;
      v108 = &v104[16 * (v106 >> 1)];
      v110 = *(_DWORD *)v108;
      v109 = v108 + 16;
      v106 += ~(v106 >> 1);
      if (v110 < a1)
        v104 = v109;
      else
        v106 = v107;
    }
    while (v106);
  }
  if (v104 == v105 || *(_DWORD *)v104 != a1)
  {
    v116 = 1;
    v117 = (char *)a12[32].i64[0];
    v118 = (char *)a12[32].i64[1];
    v119 = v117;
    v120 = v118 - v117;
    if (v118 == v117)
      goto LABEL_103;
    goto LABEL_98;
  }
  v111 = sub_20E86A980((_QWORD *)&v280 + 1, (uint64_t)"error: landmark variable ", 25);
  sub_20F6232BC((uint64_t)&__dst);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_dst = &__dst;
  else
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    size = __dst.__r_.__value_.__l.__size_;
  v114 = sub_20E86A980(v111, (uint64_t)p_dst, size);
  sub_20E86A980(v114, (uint64_t)" with ID ", 9);
  v115 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v115, (uint64_t)" was not found.\n", 16);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v116 = 0;
  v117 = (char *)a12[32].i64[0];
  v118 = (char *)a12[32].i64[1];
  v119 = v117;
  v120 = v118 - v117;
  if (v118 != v117)
  {
LABEL_98:
    v121 = v120 >> 4;
    v119 = v117;
    do
    {
      v122 = v121 >> 1;
      v123 = (unsigned int *)&v119[16 * (v121 >> 1)];
      v125 = *v123;
      v124 = (char *)(v123 + 4);
      v121 += ~(v121 >> 1);
      if (v125 < a1)
        v119 = v124;
      else
        v121 = v122;
    }
    while (v121);
  }
LABEL_103:
  if (v119 != v118 && *(_DWORD *)v119 == a1)
  {
    if (v118 != v117)
    {
      v126 = (v118 - v117) >> 4;
      do
      {
        v127 = v126 >> 1;
        v128 = (unsigned int *)&v117[16 * (v126 >> 1)];
        v130 = *v128;
        v129 = (char *)(v128 + 4);
        v126 += ~(v126 >> 1);
        if (v130 < a1)
          v117 = v129;
        else
          v126 = v127;
      }
      while (v126);
    }
    if (v117 == v118 || *(_DWORD *)v117 != a1)
      v117 = v118;
    v131 = *((_QWORD *)v117 + 1);
    v132 = sub_20E86A980((_QWORD *)&v280 + 1, (uint64_t)"debug: variable ", 16);
    sub_20F622C70((uint64_t)&__dst);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v133 = &__dst;
    else
      v133 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v134 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      v134 = __dst.__r_.__value_.__l.__size_;
    v135 = sub_20E86A980(v132, (uint64_t)v133, v134);
    sub_20E86A980(v135, (uint64_t)" with ID ", 9);
    v136 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v136, (uint64_t)" found (", 8);
    v137 = (_QWORD *)std::ostream::operator<<();
    v138 = sub_20E86A980(v137, (uint64_t)", ", 2);
    if (*(_BYTE *)(v131 + 20))
      v139 = "free";
    else
      v139 = "fixed";
    if (*(_BYTE *)(v131 + 20))
      v140 = 4;
    else
      v140 = 5;
    v141 = sub_20E86A980(v138, (uint64_t)v139, v140);
    sub_20E86A980(v141, (uint64_t)")\n", 2);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    v142 = *(unsigned __int8 *)(v131 + 20);
    v143 = (char *)a12[20].i64[0];
    v144 = (char *)a12[20].i64[1];
    v145 = v143;
    v146 = v144 - v143;
    if (v144 == v143)
      goto LABEL_144;
LABEL_139:
    v152 = v146 >> 4;
    v145 = v143;
    do
    {
      v153 = v152 >> 1;
      v154 = (unsigned int *)&v145[16 * (v152 >> 1)];
      v156 = *v154;
      v155 = (char *)(v154 + 4);
      v152 += ~(v152 >> 1);
      if (v156 < a2)
        v145 = v155;
      else
        v152 = v153;
    }
    while (v152);
    goto LABEL_144;
  }
  v147 = sub_20E86A980((_QWORD *)&v280 + 1, (uint64_t)"error: variable ", 16);
  sub_20F622C70((uint64_t)&__dst);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v148 = &__dst;
  else
    v148 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v149 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v149 = __dst.__r_.__value_.__l.__size_;
  v150 = sub_20E86A980(v147, (uint64_t)v148, v149);
  sub_20E86A980(v150, (uint64_t)" with ID ", 9);
  v151 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v151, (uint64_t)" not found\n", 11);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v116 = 0;
  v142 = 0;
  v143 = (char *)a12[20].i64[0];
  v144 = (char *)a12[20].i64[1];
  v145 = v143;
  v146 = v144 - v143;
  if (v144 != v143)
    goto LABEL_139;
LABEL_144:
  if (v145 != v144 && *(_DWORD *)v145 == a2)
  {
    if (v144 != v143)
    {
      v157 = (v144 - v143) >> 4;
      do
      {
        v158 = v157 >> 1;
        v159 = (unsigned int *)&v143[16 * (v157 >> 1)];
        v161 = *v159;
        v160 = (char *)(v159 + 4);
        v157 += ~(v157 >> 1);
        if (v161 < a2)
          v143 = v160;
        else
          v157 = v158;
      }
      while (v157);
    }
    if (v143 == v144 || *(_DWORD *)v143 != a2)
      v143 = v144;
    v162 = *((_QWORD *)v143 + 1);
    v163 = sub_20E86A980((_QWORD *)&v280 + 1, (uint64_t)"debug: variable ", 16);
    sub_20F622E88((uint64_t)&__dst);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v164 = &__dst;
    else
      v164 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v165 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      v165 = __dst.__r_.__value_.__l.__size_;
    v166 = sub_20E86A980(v163, (uint64_t)v164, v165);
    sub_20E86A980(v166, (uint64_t)" with ID ", 9);
    v167 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v167, (uint64_t)" found (", 8);
    v168 = (_QWORD *)std::ostream::operator<<();
    v169 = sub_20E86A980(v168, (uint64_t)", ", 2);
    if (*(_BYTE *)(v162 + 20))
      v170 = "free";
    else
      v170 = "fixed";
    if (*(_BYTE *)(v162 + 20))
      v171 = 4;
    else
      v171 = 5;
    v172 = sub_20E86A980(v169, (uint64_t)v170, v171);
    sub_20E86A980(v172, (uint64_t)")\n", 2);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    v142 |= *(unsigned __int8 *)(v162 + 20);
    v173 = (char *)a12[56].i64[0];
    v174 = (char *)a12[56].i64[1];
    v175 = v173;
    v176 = v174 - v173;
    if (v174 == v173)
      goto LABEL_185;
LABEL_180:
    v182 = v176 >> 4;
    v175 = v173;
    do
    {
      v183 = v182 >> 1;
      v184 = (unsigned int *)&v175[16 * (v182 >> 1)];
      v186 = *v184;
      v185 = (char *)(v184 + 4);
      v182 += ~(v182 >> 1);
      if (v186 < a1)
        v175 = v185;
      else
        v182 = v183;
    }
    while (v182);
    goto LABEL_185;
  }
  v177 = sub_20E86A980((_QWORD *)&v280 + 1, (uint64_t)"error: variable ", 16);
  sub_20F622E88((uint64_t)&__dst);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v178 = &__dst;
  else
    v178 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v179 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v179 = __dst.__r_.__value_.__l.__size_;
  v180 = sub_20E86A980(v177, (uint64_t)v178, v179);
  sub_20E86A980(v180, (uint64_t)" with ID ", 9);
  v181 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v181, (uint64_t)" not found\n", 11);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v116 = 0;
  v173 = (char *)a12[56].i64[0];
  v174 = (char *)a12[56].i64[1];
  v175 = v173;
  v176 = v174 - v173;
  if (v174 != v173)
    goto LABEL_180;
LABEL_185:
  if (v175 != v174 && *(_DWORD *)v175 == a1)
  {
    if (v174 != v173)
    {
      v187 = (v174 - v173) >> 4;
      do
      {
        v188 = v187 >> 1;
        v189 = (unsigned int *)&v173[16 * (v187 >> 1)];
        v191 = *v189;
        v190 = (char *)(v189 + 4);
        v187 += ~(v187 >> 1);
        if (v191 < a1)
          v173 = v190;
        else
          v187 = v188;
      }
      while (v187);
    }
    if (v173 == v174 || *(_DWORD *)v173 != a1)
      v173 = v174;
    v192 = *((_QWORD *)v173 + 1);
    v193 = sub_20E86A980((_QWORD *)&v280 + 1, (uint64_t)"debug: variable ", 16);
    sub_20F6230A4((uint64_t)&__dst);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v194 = &__dst;
    else
      v194 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v195 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      v195 = __dst.__r_.__value_.__l.__size_;
    v196 = sub_20E86A980(v193, (uint64_t)v194, v195);
    sub_20E86A980(v196, (uint64_t)" with ID ", 9);
    v197 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v197, (uint64_t)" found (", 8);
    v198 = (_QWORD *)std::ostream::operator<<();
    v199 = sub_20E86A980(v198, (uint64_t)", ", 2);
    if (*(_BYTE *)(v192 + 20))
      v200 = "free";
    else
      v200 = "fixed";
    if (*(_BYTE *)(v192 + 20))
      v201 = 4;
    else
      v201 = 5;
    v202 = sub_20E86A980(v199, (uint64_t)v200, v201);
    sub_20E86A980(v202, (uint64_t)")\n", 2);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    v142 |= *(unsigned __int8 *)(v192 + 20);
    v203 = (char *)a12[62].i64[0];
    v204 = (char *)a12[62].i64[1];
    v205 = v203;
    v206 = v204 - v203;
    if (v204 == v203)
      goto LABEL_226;
LABEL_221:
    v212 = v206 >> 4;
    v205 = v203;
    do
    {
      v213 = v212 >> 1;
      v214 = (unsigned int *)&v205[16 * (v212 >> 1)];
      v216 = *v214;
      v215 = (char *)(v214 + 4);
      v212 += ~(v212 >> 1);
      if (v216 < a1)
        v205 = v215;
      else
        v212 = v213;
    }
    while (v212);
    goto LABEL_226;
  }
  v207 = sub_20E86A980((_QWORD *)&v280 + 1, (uint64_t)"error: variable ", 16);
  sub_20F6230A4((uint64_t)&__dst);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v208 = &__dst;
  else
    v208 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v209 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v209 = __dst.__r_.__value_.__l.__size_;
  v210 = sub_20E86A980(v207, (uint64_t)v208, v209);
  sub_20E86A980(v210, (uint64_t)" with ID ", 9);
  v211 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v211, (uint64_t)" not found\n", 11);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v116 = 0;
  v203 = (char *)a12[62].i64[0];
  v204 = (char *)a12[62].i64[1];
  v205 = v203;
  v206 = v204 - v203;
  if (v204 != v203)
    goto LABEL_221;
LABEL_226:
  if (v205 == v204 || *(_DWORD *)v205 != a1)
  {
    v236 = sub_20E86A980((_QWORD *)&v280 + 1, (uint64_t)"error: variable ", 16);
    sub_20F6232BC((uint64_t)&__dst);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v237 = &__dst;
    else
      v237 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v238 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      v238 = __dst.__r_.__value_.__l.__size_;
    v239 = sub_20E86A980(v236, (uint64_t)v237, v238);
    sub_20E86A980(v239, (uint64_t)" with ID ", 9);
    v240 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v240, (uint64_t)" not found\n", 11);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__dst.__r_.__value_.__l.__data_);
      v116 = 0;
      v233 = (char *)a12[99].i64[1];
      v234 = (char *)a12[100].i64[0];
      v235 = v234 - v233;
      if (v234 == v233)
        goto LABEL_279;
    }
    else
    {
      v116 = 0;
      v233 = (char *)a12[99].i64[1];
      v234 = (char *)a12[100].i64[0];
      v235 = v234 - v233;
      if (v234 == v233)
        goto LABEL_279;
    }
    goto LABEL_263;
  }
  if (v204 != v203)
  {
    v217 = (v204 - v203) >> 4;
    do
    {
      v218 = v217 >> 1;
      v219 = (unsigned int *)&v203[16 * (v217 >> 1)];
      v221 = *v219;
      v220 = (char *)(v219 + 4);
      v217 += ~(v217 >> 1);
      if (v221 < a1)
        v203 = v220;
      else
        v217 = v218;
    }
    while (v217);
  }
  if (v203 == v204 || *(_DWORD *)v203 != a1)
    v203 = v204;
  v222 = *((_QWORD *)v203 + 1);
  v223 = sub_20E86A980((_QWORD *)&v280 + 1, (uint64_t)"debug: variable ", 16);
  sub_20F6232BC((uint64_t)&__dst);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v224 = &__dst;
  else
    v224 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v225 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v225 = __dst.__r_.__value_.__l.__size_;
  v226 = sub_20E86A980(v223, (uint64_t)v224, v225);
  sub_20E86A980(v226, (uint64_t)" with ID ", 9);
  v227 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v227, (uint64_t)" found (", 8);
  v228 = (_QWORD *)std::ostream::operator<<();
  v229 = sub_20E86A980(v228, (uint64_t)", ", 2);
  if (*(_BYTE *)(v222 + 20))
    v230 = "free";
  else
    v230 = "fixed";
  if (*(_BYTE *)(v222 + 20))
    v231 = 4;
  else
    v231 = 5;
  v232 = sub_20E86A980(v229, (uint64_t)v230, v231);
  sub_20E86A980(v232, (uint64_t)")\n", 2);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v142 |= *(unsigned __int8 *)(v222 + 20);
  v233 = (char *)a12[99].i64[1];
  v234 = (char *)a12[100].i64[0];
  v235 = v234 - v233;
  if (v234 != v233)
  {
LABEL_263:
    v241 = 0x86BCA1AF286BCA1BLL * (v235 >> 4);
    do
    {
      v242 = v241 >> 1;
      v243 = &v233[304 * (v241 >> 1)];
      v244 = *(_QWORD *)v243;
      v245 = v243 + 304;
      v241 += ~(v241 >> 1);
      if (v244 < v31)
        v233 = v245;
      else
        v241 = v242;
    }
    while (v241);
    if (v234 != v233 && *(_QWORD *)v233 == v31)
    {
      v246 = sub_20E86A980((_QWORD *)&v280 + 1, (uint64_t)"error: factor ", 14);
      sub_20FC601D8((uint64_t)&__dst);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v247 = &__dst;
      else
        v247 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v248 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      else
        v248 = __dst.__r_.__value_.__l.__size_;
      v249 = sub_20E86A980(v246, (uint64_t)v247, v248);
      sub_20E86A980(v249, (uint64_t)" with the same ID ", 18);
      v250 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v250, (uint64_t)" already exists.\n", 17);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      v116 = 0;
    }
  }
LABEL_279:
  if (v142)
  {
    v251 = v116 != 0;
    v252 = v288[0];
    if ((v288[0] & 0x10) == 0)
      goto LABEL_281;
LABEL_291:
    v260 = v287;
    if (v287 < *((_QWORD *)&v284 + 1))
    {
      v287 = *((_QWORD *)&v284 + 1);
      v260 = *((_QWORD *)&v284 + 1);
    }
    v261 = (const void *)v284;
    v253 = v260 - v284;
    if (v260 - (unint64_t)v284 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_319;
    goto LABEL_294;
  }
  v255 = sub_20E86A980((_QWORD *)&v280 + 1, (uint64_t)"error: factor ", 14);
  sub_20FC601D8((uint64_t)&__dst);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v256 = &__dst;
  else
    v256 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v257 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v257 = __dst.__r_.__value_.__l.__size_;
  v258 = sub_20E86A980(v255, (uint64_t)v256, v257);
  sub_20E86A980(v258, (uint64_t)" with ID ", 9);
  v259 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v259, (uint64_t)" cannot be added: all variables are fixed.\n", 43);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    v251 = 0;
    v252 = v288[0];
    if ((v288[0] & 0x10) != 0)
      goto LABEL_291;
  }
  else
  {
    v251 = 0;
    v252 = v288[0];
    if ((v288[0] & 0x10) != 0)
      goto LABEL_291;
  }
LABEL_281:
  if ((v252 & 8) == 0)
  {
    v253 = 0;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
    v254 = &__dst;
    goto LABEL_301;
  }
  v261 = v282;
  v253 = *((_QWORD *)&v283 + 1) - (_QWORD)v282;
  if (*((_QWORD *)&v283 + 1) - (_QWORD)v282 >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_319:
    sub_20E860B7C();
LABEL_294:
  if (v253 >= 0x17)
  {
    v262 = (v253 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v253 | 7) != 0x17)
      v262 = v253 | 7;
    v263 = v262 + 1;
    v254 = (std::string *)operator new(v262 + 1);
    __dst.__r_.__value_.__l.__size_ = v253;
    __dst.__r_.__value_.__r.__words[2] = v263 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v254;
    goto LABEL_300;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v253;
  v254 = &__dst;
  if (v253)
LABEL_300:
    memmove(v254, v261, v253);
LABEL_301:
  v254->__r_.__value_.__s.__data_[v253] = 0;
  v274 = __dst;
  v275 = v251;
  v279 = *MEMORY[0x24BEDB7F0];
  v264 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(uint64_t *)((char *)&v279 + *(_QWORD *)(v279 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  *((_QWORD *)&v280 + 1) = v264;
  *(_QWORD *)&v281 = MEMORY[0x24BEDB848] + 16;
  if (SHIBYTE(v286) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290]((char *)v288 + 8);
  v265 = std::string::insert(&v274, 0, "Failed to add the factor into linear system. this could be due to duplicated factor IDs ('", 0x5AuLL);
  v266 = *(_OWORD *)&v265->__r_.__value_.__l.__data_;
  v276.__r_.__value_.__r.__words[2] = v265->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v276.__r_.__value_.__l.__data_ = v266;
  v265->__r_.__value_.__l.__size_ = 0;
  v265->__r_.__value_.__r.__words[2] = 0;
  v265->__r_.__value_.__r.__words[0] = 0;
  v267 = std::string::append(&v276, "').", 3uLL);
  v268 = *(_OWORD *)&v267->__r_.__value_.__l.__data_;
  v278 = v267->__r_.__value_.__r.__words[2];
  *(_OWORD *)v277 = v268;
  v267->__r_.__value_.__l.__size_ = 0;
  v267->__r_.__value_.__r.__words[2] = 0;
  v267->__r_.__value_.__r.__words[0] = 0;
  if (v278 >= 0)
    v269 = v277;
  else
    v269 = (void **)v277[0];
  if (v278 >= 0)
    v270 = HIBYTE(v278);
  else
    v270 = (uint64_t)v277[1];
  v271 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOMapLandmarkFactorUtil.h", 95, (uint64_t)"result", 6, (uint64_t)v269, v270, (void (*)(void **))sub_21023DDB0);
  if (SHIBYTE(v278) < 0)
  {
    operator delete(v277[0]);
    if ((SHIBYTE(v276.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_311:
      if ((SHIBYTE(v274.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_312;
      goto LABEL_316;
    }
  }
  else if ((SHIBYTE(v276.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_311;
  }
  operator delete(v276.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v274.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_312:
    if (!v271)
      return;
LABEL_317:
    abort();
  }
LABEL_316:
  operator delete(v274.__r_.__value_.__l.__data_);
  if (v271)
    goto LABEL_317;
}

void sub_20FC67268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,char a36)
{
  uint64_t v36;

  if (*(char *)(v36 - 129) < 0)
  {
    operator delete(*(void **)(v36 - 152));
    sub_20E863784((uint64_t)&a36);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void sub_20FC67358(uint64_t **a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int64x2_t v7;
  char *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t *v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t v19;
  unsigned int v20;
  BOOL v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v28;
  uint64_t *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int *v35;
  char *v36;
  unsigned int v37;
  double v38;
  double v39;
  double v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  char *v46;
  char *v47;
  unint64_t v48;
  unint64_t v49;
  unsigned int *v50;
  char *v51;
  unsigned int v52;
  uint64_t v53;
  _BOOL4 v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  float64x2_t v60;
  double v62;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v68;
  double v70;
  double v71;
  double v72;
  unsigned int v73;
  float64x2_t v78;
  double v87;
  float64x2_t v88;
  float64x2_t v92;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v98;
  float64x2_t v100;
  float64x2_t v102;
  double v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v107;
  float64x2_t v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v127;
  double v128;
  double v129;
  double v130;
  double v131;
  float64x2_t v133;
  float64x2_t v135;
  float64x2_t v137;
  double v138;
  int32x2_t v139;
  unint64_t v140;
  unint64_t v141;
  double v142;
  float64x2_t v143;
  double v144;
  float v148;
  float v149;
  uint64_t *v150;
  double v151;
  int v152;
  unint64_t v153;
  char *v154;
  char *v155;
  char *v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  void **v164;
  double v165;
  unint64_t v166;
  char *v167;
  char *v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  char *v173;
  char *v174;
  int64x2_t v175;
  char *v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  float64x2_t v185;
  float64x2_t v186;
  double v187;
  double v188;
  float64_t v189;
  float64_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  double v195;
  double v196;
  double v197;
  double v198;
  float64x2_t v199;
  float64x2_t v200;
  float64_t v201;
  float64_t v202;
  uint64_t v203;
  double v204;
  double v205;
  double v206;
  double v207;
  double v208;
  double v209;
  double v210;
  float64x2_t v211;
  double v212;
  float v213;
  float v214;
  double v215;
  float v216;
  float64x2_t v217;
  float v218;
  float64x2_t v219;
  float v220;
  uint64_t v221;
  float v222;
  float64x2_t v223;
  float v224;
  float64x2_t v225;
  double v226;
  float64x2_t v228;
  float64x2_t v229;
  __int32 v230;
  float v231;

  v3 = *(_QWORD *)(a2 + 16);
  if (!*(_BYTE *)(v3 + 112))
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOMapTrackClassifier.hpp", 785, (uint64_t)"track->getStructure()", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_120;
    }
    v3 = *(_QWORD *)(a2 + 16);
  }
  v4 = *(unsigned __int8 *)(v3 + 72);
  v203 = **a1;
  **a1 = v203 + 1;
  if (!v4)
    return;
  v5 = *(_QWORD *)(v3 + 120);
  v6 = *(_QWORD *)(v3 + 128);
  if (v5 == v6 || !a1[1][1])
    return;
  while (2)
  {
    v9 = a1[1];
    v12 = (uint64_t *)v9[1];
    v10 = v9 + 1;
    v11 = v12;
    if (!v12)
      goto LABEL_10;
    v13 = *(_DWORD *)(v5 + 16);
    v14 = *(_DWORD *)(v5 + 8);
    v15 = v10;
    v16 = *(_QWORD *)v5;
    do
    {
      while (1)
      {
        v17 = *((_DWORD *)v11 + 12);
        _CF = v17 >= v13;
        if (v17 != v13)
          goto LABEL_18;
        v19 = v11[4];
        if (v19 >= v16)
          break;
LABEL_13:
        v11 = (uint64_t *)v11[1];
        if (!v11)
          goto LABEL_21;
      }
      if (v19 != v16)
        goto LABEL_20;
      _CF = *((_DWORD *)v11 + 10) >= v14;
LABEL_18:
      if (!_CF)
        goto LABEL_13;
LABEL_20:
      v15 = v11;
      v11 = (uint64_t *)*v11;
    }
    while (v11);
LABEL_21:
    if (v15 != v10)
    {
      v20 = *((_DWORD *)v15 + 12);
      v21 = v13 >= v20;
      if (v13 != v20)
        goto LABEL_26;
      v22 = v15[4];
      if (v16 >= v22)
      {
        if (v16 != v22)
          goto LABEL_28;
        v21 = v14 >= *((_DWORD *)v15 + 10);
LABEL_26:
        if (v21)
        {
LABEL_28:
          v23 = (uint64_t *)*a1[1];
          if (v23 == v15)
          {
            v24 = 0;
          }
          else
          {
            v24 = 0;
            do
            {
              v25 = (uint64_t *)v23[1];
              if (v25)
              {
                do
                {
                  v26 = v25;
                  v25 = (uint64_t *)*v25;
                }
                while (v25);
              }
              else
              {
                do
                {
                  v26 = (uint64_t *)v23[2];
                  _ZF = *v26 == (_QWORD)v23;
                  v23 = v26;
                }
                while (!_ZF);
              }
              ++v24;
              v23 = v26;
            }
            while (v26 != v15);
          }
          ++*a1[2];
          v28 = *(_QWORD *)(a2 + 16);
          if (*(_BYTE *)(v28 + 112))
          {
            v29 = a1[3];
            v30 = (char *)v29[671];
            v31 = (char *)v29[672];
            v32 = v31 - v30;
            if (v31 == v30)
              goto LABEL_48;
          }
          else
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOMapTrackClassifier.hpp", 815, (uint64_t)"track->getStructure()", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              goto LABEL_120;
            }
            v28 = *(_QWORD *)(a2 + 16);
            v29 = a1[3];
            v30 = (char *)v29[671];
            v31 = (char *)v29[672];
            v32 = v31 - v30;
            if (v31 == v30)
            {
LABEL_48:
              v38 = *(double *)(v28 + 48);
              v39 = *(double *)(v28 + 56);
              v40 = *(double *)(v28 + 64);
              v220 = *(float *)(v28 + 76);
              v218 = *(float *)(v28 + 80);
              v41 = *(float *)(v28 + 88);
              v222 = *(float *)(v28 + 84);
              v42 = *(float *)(v28 + 96);
              v224 = *(float *)(v28 + 92);
              v43 = *(float *)(v28 + 100);
              v44 = *(float *)(v28 + 104);
              v45 = *(float *)(v28 + 108);
              if (v30 == v31 || *(_DWORD *)v30 != v13)
              {
                if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.h", 243, (uint64_t)"iter != linearSystem().graph().template endVariable<VARIABLE_TYPE>()", 68, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                {
                  goto LABEL_120;
                }
                v29 = a1[3];
                v30 = v31;
              }
              v46 = (char *)v29[647];
              v47 = (char *)v29[648];
              if (v47 != v46)
              {
                v48 = (v47 - v46) >> 4;
                do
                {
                  v49 = v48 >> 1;
                  v50 = (unsigned int *)&v46[16 * (v48 >> 1)];
                  v52 = *v50;
                  v51 = (char *)(v50 + 4);
                  v48 += ~(v48 >> 1);
                  if (v52 < v14)
                    v46 = v51;
                  else
                    v48 = v49;
                }
                while (v48);
              }
              v212 = v40;
              v213 = v41;
              v214 = v44;
              v216 = v42;
              v53 = *((_QWORD *)v30 + 1);
              if (v46 != v47 && *(_DWORD *)v46 == v14
                || (v54 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.h", 243, (uint64_t)"iter != linearSystem().graph().template endVariable<VARIABLE_TYPE>()", 68, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0), v46 = v47, !v54))
              {
                v55 = *((_QWORD *)v46 + 1);
                v56 = sub_20E9DF85C((_QWORD *)(a1[4][1] + 1784), (uint64_t *)v5)[13];
                v57 = *(_QWORD *)(*a1[6] + 8 * v24);
                v226 = *(double *)(*a1[7] + 8 * v203);
                v58 = *(_QWORD *)(a2 + 16);
                v59 = *a1[8];
                v60.f64[0] = *(float64_t *)(v53 + 48);
                _Q29 = *(float64x2_t *)(v53 + 32);
                v62 = *(double *)(v53 + 72);
                _Q30 = *(float64x2_t *)(v53 + 56);
                _Q25 = *(float64x2_t *)(v53 + 80);
                v65.f64[0] = *(float64_t *)(v55 + 48);
                v66 = *(float64x2_t *)(v55 + 32);
                _D17 = *(double *)(v55 + 72);
                v68 = *(float64x2_t *)(v55 + 56);
                _Q14 = *(float64x2_t *)(v55 + 80);
                v70 = *(double *)(v55 + 96);
                v206 = *(double *)(v55 + 112);
                v207 = *(double *)(v55 + 104);
                v71 = *(double *)(v53 + 96);
                v208 = *(double *)(v55 + 120);
                v209 = *(double *)(v53 + 104);
                v72 = *(double *)(v53 + 112);
                v210 = *(double *)(v53 + 120);
                v211 = *(float64x2_t *)(v5 + 40);
                v73 = *(_DWORD *)(v56 + 992);
                if (v73 == -1)
                {
                  v185 = *(float64x2_t *)(v55 + 32);
                  v187 = *(double *)(v55 + 72);
                  v189 = *(double *)(v55 + 48);
                  v191 = *(float64x2_t *)(v53 + 56);
                  v193 = *(float64x2_t *)(v53 + 32);
                  v195 = *(double *)(v53 + 96);
                  v197 = *(double *)(v53 + 72);
                  v199 = *(float64x2_t *)(v53 + 80);
                  v201 = *(double *)(v53 + 48);
                  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                  {
                    goto LABEL_120;
                  }
                  v73 = *(_DWORD *)(v56 + 992);
                  _Q25 = v199;
                  v60.f64[0] = v201;
                  v71 = v195;
                  v62 = v197;
                  _Q30 = v191;
                  _Q29 = v193;
                  _D17 = v187;
                  v65.f64[0] = v189;
                  v66 = v185;
                  v205 = v72;
                  if (v73 <= 7)
                  {
LABEL_63:
                    if (!v73)
                      goto LABEL_121;
                    goto LABEL_68;
                  }
                }
                else
                {
                  v205 = *(double *)(v53 + 112);
                  if (v73 <= 7)
                    goto LABEL_63;
                }
                if (v73 < 0xF)
                {
LABEL_68:
                  v204 = *(double *)v56;
                  goto LABEL_69;
                }
                v204 = *(double *)v56;
                if (v73 != -1)
                {
LABEL_69:
                  _D5 = v218;
                  _Q1 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v66, _Q29.f64[0]), v68, _Q29, 1), _Q14, v60.f64[0]);
                  _Q2 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v66, _Q30.f64[0]), v68, _Q30, 1), _Q14, v62);
                  _Q3 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v66, _Q25.f64[0]), v68, _Q25, 1), _Q14, v71);
                  v78 = (float64x2_t)vzip1q_s64((int64x2_t)_Q1, (int64x2_t)_Q2);
                  _Q7 = (float64x2_t)vzip2q_s64((int64x2_t)_Q1, (int64x2_t)_Q2);
                  __asm
                  {
                    FMLA            D0, D5, V3.D[1]
                    FMLA            D16, D17, V29.D[1]
                  }
                  _D13 = _D17;
                  __asm
                  {
                    FMLA            D17, D13, V30.D[1]
                    FMLA            D18, D13, V25.D[1]
                  }
                  v87 = _D18 + v70 * v71;
                  v88.f64[0] = _D16 + v70 * v60.f64[0];
                  v88.f64[1] = _D17 + v70 * v62;
                  _Q4 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v78, v220), _Q7, v218), v88, v222);
                  _D20 = v224;
                  __asm { FMLA            D0, D20, V3.D[1] }
                  v92 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v78, v213), _Q7, v224), v88, v216);
                  _D20 = _D0 + v87 * v216;
                  _D22 = v214;
                  v95 = vmlaq_n_f64(vmulq_n_f64(v78, v43), _Q7, v214);
                  __asm { FMLA            D7, D22, V3.D[1] }
                  v96 = vmlaq_laneq_f64(vmulq_n_f64(_Q4, _Q1.f64[0]), v92, _Q1, 1);
                  __asm { FMLA            D22, D20, V1.D[1] }
                  v98 = vmlaq_laneq_f64(vmulq_n_f64(_Q4, _Q2.f64[0]), v92, _Q2, 1);
                  __asm { FMLA            D23, D20, V2.D[1] }
                  v100 = vmlaq_laneq_f64(vmulq_n_f64(_Q4, _Q3.f64[0]), v92, _Q3, 1);
                  __asm { FMLA            D4, D20, V3.D[1] }
                  _Q6 = vmlaq_n_f64(v95, v88, v45);
                  _Q7.f64[0] = _Q7.f64[0] + v87 * v45;
                  v102 = vmlaq_n_f64(v96, _Q6, v88.f64[0]);
                  v103 = _D22 + _Q7.f64[0] * v88.f64[0];
                  v104 = vmlaq_n_f64(v98, _Q6, v88.f64[1]);
                  _Q3.f64[0] = _D23 + _Q7.f64[0] * v88.f64[1];
                  v105 = vmlaq_n_f64(v100, _Q6, v87);
                  _Q4.f64[0] = _Q4.f64[0] + _Q7.f64[0] * v87;
                  _Q7.f64[0] = v39 - v206;
                  __asm { FMLA            D6, D7, V14.D[1] }
                  v65.f64[1] = _D13;
                  _Q16 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v66, (int64x2_t)v68), v38 - v207), (float64x2_t)vzip2q_s64((int64x2_t)v66, (int64x2_t)v68), v39 - v206), v65, v212 - v208);
                  _Q7.f64[0] = _Q16.f64[0] - v209;
                  _Q16.f64[0] = _Q16.f64[1] - v205;
                  _Q6.f64[0] = _Q6.f64[0] + v70 * (v212 - v208) - v210;
                  v107 = (float64x2_t)vzip2q_s64((int64x2_t)_Q29, (int64x2_t)_Q30);
                  v60.f64[1] = v62;
                  v108 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)_Q29, (int64x2_t)_Q30), _Q7.f64[0]), v107, _Q16.f64[1] - v205), v60, _Q6.f64[0]);
                  __asm { FMLA            D7, D16, V25.D[1] }
                  v107.f64[0] = _Q7.f64[0] + v71 * _Q6.f64[0];
                  v223 = vsubq_f64(vdivq_f64(v108, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v107.f64[0], 0)), v211);
                  _Q7.f64[0] = v107.f64[0] * v107.f64[0];
                  _Q16.f64[0] = v107.f64[0] * v108.f64[0];
                  v109 = v107.f64[0];
                  v225 = v107;
                  v110 = _Q4.f64[0] * v108.f64[0] * v108.f64[0]
                       + v107.f64[0] * v107.f64[0] * v102.f64[0]
                       - (v103 + v105.f64[0]) * (v107.f64[0] * v108.f64[0]);
                  v107.f64[0] = _Q4.f64[0] * vmuld_lane_f64(v108.f64[0], v108, 1);
                  v111 = vmuld_lane_f64(v109, v108, 1);
                  v112 = v107.f64[0]
                       + vmuld_lane_f64(_Q7.f64[0], v102, 1)
                       - vmuld_lane_f64(_Q16.f64[0], v105, 1)
                       - v103 * v111;
                  v113 = v107.f64[0] + _Q7.f64[0] * v104.f64[0] - _Q3.f64[0] * _Q16.f64[0] - v111 * v105.f64[0];
                  v114 = vmuld_lane_f64(vmuld_lane_f64(_Q4.f64[0], v108, 1), v108, 1)
                       + vmuld_lane_f64(_Q7.f64[0], v104, 1);
                  v115 = v105.f64[1] + _Q3.f64[0];
                  v116 = (v204 + *(double *)(v56 + 32)) * 0.5;
                  *(double *)&v221 = v116;
                  v117 = 1.0 / (_Q7.f64[0] * _Q7.f64[0]);
                  if (_Q7.f64[0] * _Q7.f64[0] == 0.0)
                    v117 = 1.0;
                  v118.f64[0] = v117 * v110;
                  v119.f64[0] = v117 * v113;
                  v118.f64[1] = v117 * v112;
                  v119.f64[1] = v117 * (v114 - v115 * v111);
                  v120 = vmulq_n_f64(v119, v116 * v116);
                  v121 = *(float *)(v5 + 56) * *(float *)(v5 + 56);
                  v123 = vmulq_n_f64(v118, v116 * v116);
                  v119.f64[1] = v123.f64[1];
                  v122.f64[0] = v123.f64[0];
                  v122.f64[1] = v120.f64[1];
                  v118.f64[0] = v120.f64[0];
                  _Q3 = *(_OWORD *)(v5 + 40);
                  _D5 = *(_QWORD *)(v5 + 48);
                  __asm { FMLA            D4, D5, V3.D[1] }
                  v215 = v121;
                  v127 = vaddq_f64((float64x2_t)vdupq_lane_s64(COERCE__INT64(v121), 0), v122);
                  v118.f64[1] = v127.f64[1];
                  v119.f64[0] = v127.f64[0];
                  v217 = v119;
                  v219 = v118;
                  v228 = v102;
                  v229 = v104;
                  v128 = (double)(unint64_t)((uint64_t)(*(_QWORD *)(v58 + 128) - *(_QWORD *)(v58 + 120)) >> 6);
                  v129 = sqrt(_D4);
                  v130 = sub_20E8BE318(v228.f64);
                  v131 = (double)v57 / 100.0;
                  __asm { FMOV            V2.2D, #0.5 }
                  v133 = vaddq_f64(vmulq_f64(*(float64x2_t *)(v5 + 40), _Q2), _Q2);
                  __asm { FMOV            V2.2D, #7.0 }
                  v135 = vmulq_f64(v133, _Q2);
                  __asm { FMOV            V2.2D, #-1.0 }
                  v137 = vaddq_f64(v135, _Q2);
                  if (v137.f64[0] <= 4.0)
                    v138 = v137.f64[0];
                  else
                    v138 = 4.0;
                  v139 = vmovn_s64(vcltzq_f64(v137));
                  if ((v139.i8[0] & 1) != 0)
                    v140 = 0;
                  else
                    v140 = (unint64_t)v138;
                  v137.f64[0] = v137.f64[1];
                  if (v137.f64[1] > 4.0)
                    v137.f64[0] = 4.0;
                  if ((v139.i8[4] & 1) != 0)
                    v141 = 0;
                  else
                    v141 = 5 * (unint64_t)v137.f64[0];
                  v142 = (double)*(unint64_t *)(v59 + 200 * v24 + 8 * (v141 + v140)) / 100.0;
                  v143 = (float64x2_t)vdupq_lane_s64(v221, 0);
                  v228 = vdivq_f64(v217, v143);
                  v229 = vdivq_f64(v219, v143);
                  v144 = sub_20E8BE318(v228.f64);
                  _Q2 = v223;
                  _Q0 = (int8x16_t)vmulq_f64(_Q2, _Q2);
                  _Q1.i64[0] = *(_QWORD *)&v223.f64[1];
                  __asm { FMLA            D0, D1, V2.D[1] }
                  *(float *)_Q0.i32 = *(double *)_Q0.i64;
                  v148 = (float)((float)((float)((float)((float)(*(float *)_Q0.i32 * -0.5)
                                                       * COERCE_FLOAT(1597463007 - (_Q0.i32[0] >> 1)))
                                               * COERCE_FLOAT(1597463007 - (_Q0.i32[0] >> 1)))
                                       + 1.5)
                               * COERCE_FLOAT(1597463007 - (_Q0.i32[0] >> 1)))
                       * *(float *)_Q0.i32;
                  *(float *)_Q0.i32 = v128;
                  *(_QWORD *)&v228.f64[0] = __PAIR64__(LODWORD(v121), _Q0.u32[0]);
                  *(float *)_Q0.i32 = v129;
                  _Q1.i64[1] = *(_QWORD *)&v225.f64[1];
                  *(float *)_Q1.i32 = v225.f64[0];
                  *(_QWORD *)&v228.f64[1] = __PAIR64__(_Q1.u32[0], _Q0.u32[0]);
                  *(float *)_Q0.i32 = v130;
                  *(float *)_Q1.i32 = v131;
                  *(_QWORD *)&v229.f64[0] = __PAIR64__(_Q1.u32[0], _Q0.u32[0]);
                  *(float *)_Q0.i32 = v142;
                  _Q1.i32[1] = HIDWORD(v226);
                  *(float *)_Q1.i32 = v226;
                  *(_QWORD *)&v229.f64[1] = __PAIR64__(_Q1.u32[0], _Q0.u32[0]);
                  *(float *)_Q0.i32 = v144;
                  v230 = _Q0.i32[0];
                  v231 = v148;
                  v149 = sub_20FC617F8((float32x4_t *)&v228, (int8x16_t *)a1[9], _Q0, _Q1);
                  v150 = a1[10];
                  v151 = v149;
                  v152 = *(_DWORD *)a1[2] - 1;
                  v154 = (char *)v150[1];
                  v153 = v150[2];
                  if ((unint64_t)v154 < v153)
                  {
                    *(double *)v154 = v151;
                    *((_DWORD *)v154 + 2) = v152;
                    v155 = v154 + 16;
LABEL_103:
                    v150[1] = (uint64_t)v155;
                    v164 = (void **)*a1[11];
                    if (!v164)
                      goto LABEL_10;
                    v165 = v148;
                    v167 = (char *)v164[1];
                    v166 = (unint64_t)v164[2];
                    if ((unint64_t)v167 < v166)
                    {
                      *(double *)v167 = v128;
                      *((_QWORD *)v167 + 1) = 0x7FF8000000000000;
                      *((double *)v167 + 2) = v215;
                      *((double *)v167 + 3) = v129;
                      *((_QWORD *)v167 + 4) = *(_QWORD *)&v225.f64[0];
                      v7 = vdupq_n_s64(0x7FF8000000000000uLL);
                      *(int64x2_t *)(v167 + 40) = v7;
                      *((double *)v167 + 7) = v130;
                      *((int64x2_t *)v167 + 4) = v7;
                      *((double *)v167 + 10) = v131;
                      *((double *)v167 + 11) = v142;
                      *((_QWORD *)v167 + 12) = 0x7FF8000000000000;
                      *((double *)v167 + 13) = v226;
                      *((int64x2_t *)v167 + 7) = v7;
                      *((_QWORD *)v167 + 16) = 0x7FF8000000000000;
                      *((double *)v167 + 17) = v144;
                      *((int64x2_t *)v167 + 9) = v7;
                      v8 = v167 + 168;
                      *((double *)v167 + 20) = v165;
LABEL_9:
                      v164[1] = v8;
                      goto LABEL_10;
                    }
                    v168 = (char *)*v164;
                    v169 = 0xCF3CF3CF3CF3CF3DLL * ((v167 - (_BYTE *)*v164) >> 3);
                    v170 = v169 + 1;
                    if (v169 + 1 > 0x186186186186186)
                      sub_20E867F44();
                    v171 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v166 - (_QWORD)v168) >> 3);
                    if (2 * v171 > v170)
                      v170 = 2 * v171;
                    if (v171 >= 0xC30C30C30C30C3)
                      v172 = 0x186186186186186;
                    else
                      v172 = v170;
                    if (!v172)
                    {
                      v173 = 0;
                      goto LABEL_115;
                    }
                    if (v172 <= 0x186186186186186)
                    {
                      v173 = (char *)operator new(168 * v172);
LABEL_115:
                      v174 = &v173[168 * v169];
                      *(double *)v174 = v128;
                      *((_QWORD *)v174 + 1) = 0x7FF8000000000000;
                      *((double *)v174 + 2) = v215;
                      *((double *)v174 + 3) = v129;
                      *((_QWORD *)v174 + 4) = *(_QWORD *)&v225.f64[0];
                      v175 = vdupq_n_s64(0x7FF8000000000000uLL);
                      *(int64x2_t *)(v174 + 40) = v175;
                      *((double *)v174 + 7) = v130;
                      *((int64x2_t *)v174 + 4) = v175;
                      *((double *)v174 + 10) = v131;
                      *((double *)v174 + 11) = v142;
                      *((_QWORD *)v174 + 12) = 0x7FF8000000000000;
                      *((double *)v174 + 13) = v226;
                      *((int64x2_t *)v174 + 7) = v175;
                      *((_QWORD *)v174 + 16) = 0x7FF8000000000000;
                      *((double *)v174 + 17) = v144;
                      *((int64x2_t *)v174 + 9) = v175;
                      *((double *)v174 + 20) = v165;
                      v176 = v174;
                      if (v167 != v168)
                      {
                        do
                        {
                          v177 = *(_OWORD *)(v167 - 168);
                          v178 = *(_OWORD *)(v167 - 152);
                          *(_OWORD *)(v176 - 136) = *(_OWORD *)(v167 - 136);
                          *(_OWORD *)(v176 - 152) = v178;
                          *(_OWORD *)(v176 - 168) = v177;
                          v179 = *(_OWORD *)(v167 - 120);
                          v180 = *(_OWORD *)(v167 - 104);
                          v181 = *(_OWORD *)(v167 - 88);
                          *(_OWORD *)(v176 - 72) = *(_OWORD *)(v167 - 72);
                          *(_OWORD *)(v176 - 88) = v181;
                          *(_OWORD *)(v176 - 104) = v180;
                          *(_OWORD *)(v176 - 120) = v179;
                          v182 = *(_OWORD *)(v167 - 56);
                          v183 = *(_OWORD *)(v167 - 40);
                          v184 = *(_OWORD *)(v167 - 24);
                          *((_QWORD *)v176 - 1) = *((_QWORD *)v167 - 1);
                          *(_OWORD *)(v176 - 24) = v184;
                          *(_OWORD *)(v176 - 40) = v183;
                          *(_OWORD *)(v176 - 56) = v182;
                          v176 -= 168;
                          v167 -= 168;
                        }
                        while (v167 != v168);
                        v167 = (char *)*v164;
                      }
                      v8 = v174 + 168;
                      *v164 = v176;
                      v164[1] = v174 + 168;
                      v164[2] = &v173[168 * v172];
                      if (v167)
                        operator delete(v167);
                      goto LABEL_9;
                    }
LABEL_122:
                    sub_20E877A38();
                  }
                  v156 = (char *)*v150;
                  v157 = (uint64_t)&v154[-*v150] >> 4;
                  v158 = v157 + 1;
                  if ((unint64_t)(v157 + 1) >> 60)
                    sub_20E867F44();
                  v159 = v153 - (_QWORD)v156;
                  if (v159 >> 3 > v158)
                    v158 = v159 >> 3;
                  if ((unint64_t)v159 >= 0x7FFFFFFFFFFFFFF0)
                    v160 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v160 = v158;
                  if (v160)
                  {
                    if (v160 >> 60)
                      goto LABEL_122;
                    v161 = (char *)operator new(16 * v160);
                    v162 = (uint64_t)&v161[16 * v157];
                    *(double *)v162 = v151;
                    *(_DWORD *)(v162 + 8) = v152;
                    v163 = v162;
                    if (v154 == v156)
                      goto LABEL_101;
                  }
                  else
                  {
                    v161 = 0;
                    v162 = 16 * v157;
                    *(double *)v162 = v151;
                    *(_DWORD *)(v162 + 8) = v152;
                    v163 = 16 * v157;
                    if (v154 == v156)
                      goto LABEL_101;
                  }
                  do
                  {
                    *(_OWORD *)(v163 - 16) = *((_OWORD *)v154 - 1);
                    v163 -= 16;
                    v154 -= 16;
                  }
                  while (v154 != v156);
                  v154 = (char *)*v150;
LABEL_101:
                  v155 = (char *)(v162 + 16);
                  *v150 = v163;
                  v150[1] = v162 + 16;
                  v150[2] = (uint64_t)&v161[16 * v160];
                  if (v154)
                    operator delete(v154);
                  goto LABEL_103;
                }
                v186 = v66;
                v188 = _D17;
                v190 = v65.f64[0];
                v192 = _Q30;
                v194 = _Q29;
                v196 = v71;
                v198 = v62;
                v200 = _Q25;
                v202 = v60.f64[0];
                if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                {
                  _Q25 = v200;
                  v60.f64[0] = v202;
                  v71 = v196;
                  v62 = v198;
                  _Q30 = v192;
                  _Q29 = v194;
                  _D17 = v188;
                  v65.f64[0] = v190;
                  v66 = v186;
                  if (!*(_DWORD *)(v56 + 992))
                  {
LABEL_121:
                    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
                    abort();
                  }
                  goto LABEL_69;
                }
              }
LABEL_120:
              abort();
            }
          }
          v33 = v32 >> 4;
          do
          {
            v34 = v33 >> 1;
            v35 = (unsigned int *)&v30[16 * (v33 >> 1)];
            v37 = *v35;
            v36 = (char *)(v35 + 4);
            v33 += ~(v33 >> 1);
            if (v37 < v13)
              v30 = v36;
            else
              v33 = v34;
          }
          while (v33);
          goto LABEL_48;
        }
      }
    }
LABEL_10:
    v5 += 64;
    if (v5 != v6)
      continue;
    break;
  }
}

void sub_20FC68048(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  char *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t *v17;
  unint64_t v18;
  unsigned int v19;
  BOOL v20;
  unint64_t v21;
  unsigned int v22;
  BOOL v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  uint64_t *v36;
  double v37;
  double v38;
  float64x2_t v39;
  float64x2_t v40;
  uint64_t v41;
  unsigned int v42;
  double v43;
  uint64_t *v44;
  char *v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  unsigned int *v49;
  char *v50;
  unsigned int v51;
  double v52;
  char *v53;
  char *v54;
  unint64_t v55;
  unint64_t v56;
  unsigned int *v57;
  char *v58;
  unsigned int v59;
  uint64_t v60;
  _BOOL4 v61;
  uint64_t v62;
  uint64_t v63;
  float64x2_t *v64;
  uint64_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  double v69;
  float64x2_t v70;
  float64x2_t v71;
  float32x2_t v72;
  double v73;
  float64x2_t v74;
  float64x2_t v75;
  float32x2_t v76;
  int64x2_t v77;
  int8x16_t v78;
  int64x2_t v79;
  int64x2_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unsigned int v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unsigned int v89;
  BOOL v90;
  double v91;
  double v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  double v97;
  float64x2_t *v98;
  float64x2_t v99;
  double v100;
  double v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  double v112;
  uint64_t *v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  double v120;
  float64x2_t v121;
  double v122;
  float64x2_t v123;
  int8x16_t v124;
  int8x16_t v125;
  unint64_t v127;
  int8x16_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  double v144;
  double v145;
  double v146;
  void **v147;
  int v148;
  unint64_t v149;
  char *v150;
  char *v151;
  char *v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  void **v160;
  unint64_t v161;
  char *v162;
  char *v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  char *v168;
  __int128 v169;
  char *v170;
  __int128 v171;
  __int128 v172;
  simd_double2 v173;
  __int128 v174;
  char *v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  int64x2_t v184;
  int64x2_t v185;
  int64x2_t v186;
  int64x2_t v187;
  double v188;
  float64x2_t v189;
  double v190;
  float64x2_t v191;
  float64x2_t v192;
  double v193;
  double v194;
  double v195;
  double v196;
  double v197;
  double v198;
  double v199;
  double v200;
  double v201;
  double v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  double v206;
  float64x2_t v207;
  simd_double2 v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;
  float64x2_t v215;
  double v216;
  float64x2_t v217;
  double v218;
  float64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v234;
  float64x2_t v235;
  float64x2_t v236;
  float64x2_t v237;
  double v238;
  float64x2_t v239;
  float64x2_t v240;
  double v241;
  float64x2_t v242;
  uint64_t v243;
  float64x2_t v244;
  float64x2_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  simd_double2x2 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  uint64_t v259;
  float64x2_t v260;
  int8x16_t v261;
  double v262;
  int8x16_t v263;
  double v264;
  int8x16_t v265;
  double v266;
  int8x16_t v267;
  double v268;
  float64x2_t v269;
  float64x2_t v270;
  double v271[2];
  float64x2_t v272;
  float64x2_t v273;
  _BYTE v274[32];
  float64x2_t v275;
  double v276;
  float64x2_t v277;
  double v278;
  float64x2_t v279;
  double v280;
  simd_double2x2 v281;
  double v282[4];
  double v283[2];
  float64x2_t v284[2];

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 16);
  if (!*(_BYTE *)(v4 + 112))
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOMapTrackClassifier.hpp", 890, (uint64_t)"track->getStructure()", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_157;
    }
    v4 = *(_QWORD *)(v2 + 16);
  }
  v5 = *(unsigned __int8 *)(v4 + 72);
  v246 = **a1;
  **a1 = v246 + 1;
  if (v5)
  {
    v7 = *(_QWORD *)(v4 + 120);
    v6 = *(_QWORD *)(v4 + 128);
    if (v7 != v6)
    {
      if (a1[1][1])
      {
        v8 = 0.00000001;
        v239 = (float64x2_t)vdupq_n_s64(0x3E45798EE2308C3AuLL);
        v9 = 1.0;
        v248 = *(_QWORD *)(v4 + 128);
        v249 = v2;
        do
        {
          v11 = a1[1];
          v14 = (uint64_t *)v11[1];
          v12 = v11 + 1;
          v13 = v14;
          if (!v14)
            goto LABEL_12;
          v15 = *(_DWORD *)(v7 + 16);
          v16 = *(_DWORD *)(v7 + 8);
          v17 = v12;
          v18 = *(_QWORD *)v7;
          do
          {
            while (1)
            {
              v19 = *((_DWORD *)v13 + 12);
              v20 = v19 >= v15;
              if (v19 != v15)
                goto LABEL_20;
              v21 = v13[4];
              if (v21 >= v18)
                break;
LABEL_15:
              v13 = (uint64_t *)v13[1];
              if (!v13)
                goto LABEL_23;
            }
            if (v21 != v18)
              goto LABEL_22;
            v20 = *((_DWORD *)v13 + 10) >= v16;
LABEL_20:
            if (!v20)
              goto LABEL_15;
LABEL_22:
            v17 = v13;
            v13 = (uint64_t *)*v13;
          }
          while (v13);
LABEL_23:
          if (v17 != v12)
          {
            v22 = *((_DWORD *)v17 + 12);
            v23 = v15 >= v22;
            if (v15 != v22)
              goto LABEL_28;
            v24 = v17[4];
            if (v18 >= v24)
            {
              if (v18 != v24)
                goto LABEL_30;
              v23 = v16 >= *((_DWORD *)v17 + 10);
LABEL_28:
              if (v23)
              {
LABEL_30:
                v25 = (uint64_t *)*a1[1];
                if (v25 == v17)
                {
                  v26 = 0;
                }
                else
                {
                  v26 = 0;
                  do
                  {
                    v27 = (uint64_t *)v25[1];
                    if (v27)
                    {
                      do
                      {
                        v28 = v27;
                        v27 = (uint64_t *)*v27;
                      }
                      while (v27);
                    }
                    else
                    {
                      do
                      {
                        v28 = (uint64_t *)v25[2];
                        v29 = *v28 == (_QWORD)v25;
                        v25 = v28;
                      }
                      while (!v29);
                    }
                    ++v26;
                    v25 = v28;
                  }
                  while (v28 != v17);
                }
                ++*a1[2];
                v30 = *(_QWORD *)(v2 + 16);
                if (*(_BYTE *)(v30 + 112))
                {
                  v31 = v30 + 40;
                  goto LABEL_46;
                }
                if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOMapTrackClassifier.hpp", 920, (uint64_t)"track->getStructure()", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                {
                  goto LABEL_157;
                }
                v32 = *(_QWORD *)(v2 + 16);
                if (*(_BYTE *)(v32 + 112))
                  v31 = v32 + 40;
                else
                  v31 = 0;
LABEL_46:
                v33 = *(float64x2_t *)(v31 + 8);
                v278 = *(double *)(v31 + 24);
                v277 = v33;
                v34 = vcvtq_f64_f32(*(float32x2_t *)(v31 + 44));
                v273 = vcvtq_f64_f32(*(float32x2_t *)(v31 + 36));
                *(float64x2_t *)v274 = v34;
                v35 = vcvtq_f64_f32(*(float32x2_t *)(v31 + 60));
                *(float64x2_t *)&v274[16] = vcvtq_f64_f32(*(float32x2_t *)(v31 + 52));
                v275 = v35;
                v276 = *(float *)(v31 + 68);
                v36 = sub_20E9DF85C((_QWORD *)(a1[3][1] + 1784), (uint64_t *)v7);
                if (v36)
                {
                  v41 = v36[13];
                  v42 = *(_DWORD *)(v41 + 992);
                  if (v42 != -1)
                    goto LABEL_48;
LABEL_52:
                  if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                  {
                    v42 = *(_DWORD *)(v41 + 992);
                    if (v42 > 7)
                      goto LABEL_54;
LABEL_49:
                    if (!v42)
                    {
LABEL_158:
                      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
                      abort();
                    }
LABEL_55:
                    v43 = *(double *)v41;
                    goto LABEL_56;
                  }
                  goto LABEL_157;
                }
                v41 = 0;
                v42 = MEMORY[0x3E0];
                if (MEMORY[0x3E0] == -1)
                  goto LABEL_52;
LABEL_48:
                if (v42 <= 7)
                  goto LABEL_49;
LABEL_54:
                if (v42 < 0xF)
                  goto LABEL_55;
                v43 = *(double *)v41;
                if (v42 == -1)
                {
                  if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                  {
                    if (!*(_DWORD *)(v41 + 992))
                      goto LABEL_158;
                    goto LABEL_56;
                  }
                  goto LABEL_157;
                }
LABEL_56:
                v44 = a1[4];
                v45 = (char *)v44[671];
                v46 = (char *)v44[672];
                if (v46 != v45)
                {
                  v47 = (v46 - v45) >> 4;
                  do
                  {
                    v48 = v47 >> 1;
                    v49 = (unsigned int *)&v45[16 * (v47 >> 1)];
                    v51 = *v49;
                    v50 = (char *)(v49 + 4);
                    v47 += ~(v47 >> 1);
                    if (v51 < v15)
                      v45 = v50;
                    else
                      v47 = v48;
                  }
                  while (v47);
                }
                v52 = *(double *)(v41 + 32);
                if (v45 == v46 || *(_DWORD *)v45 != v15)
                {
                  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.h", 243, (uint64_t)"iter != linearSystem().graph().template endVariable<VARIABLE_TYPE>()", 68, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                  {
                    goto LABEL_157;
                  }
                  v44 = a1[4];
                  v45 = v46;
                }
                v53 = (char *)v44[647];
                v54 = (char *)v44[648];
                if (v54 != v53)
                {
                  v55 = (v54 - v53) >> 4;
                  do
                  {
                    v56 = v55 >> 1;
                    v57 = (unsigned int *)&v53[16 * (v55 >> 1)];
                    v59 = *v57;
                    v58 = (char *)(v57 + 4);
                    v55 += ~(v55 >> 1);
                    if (v59 < v16)
                      v53 = v58;
                    else
                      v55 = v56;
                  }
                  while (v55);
                }
                v60 = *((_QWORD *)v45 + 1);
                if (v53 == v54 || *(_DWORD *)v53 != v16)
                {
                  v61 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.h", 243, (uint64_t)"iter != linearSystem().graph().template endVariable<VARIABLE_TYPE>()", 68, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                  v53 = v54;
                  if (v61)
LABEL_157:
                    abort();
                }
                v62 = *((_QWORD *)v53 + 1);
                v63 = v62 + 32;
                v247 = v62;
                v64 = (float64x2_t *)(v62 + 104);
                v65 = v60 + 32;
                if (sub_20FC62D74(v272.f64, v271, (uint64_t)&v269, (uint64_t)&v265, (uint64_t)&v261, 0, v62 + 32, (float64x2_t *)(v62 + 104), v37, v38, v39, &v277, v40, &v273, v60 + 32))
                {
                  v243 = v60;
                  v68 = vcvtq_f64_f32(*(float32x2_t *)(v7 + 32));
                  v244 = vsubq_f64(v272, v68);
                  v260 = v244;
                  v279.f64[1] = v277.f64[1];
                  v280 = v278;
                  v279.f64[0] = v277.f64[0] + v8;
                  if (sub_20FC62D74(v284[0].f64, v283, (uint64_t)v282, (uint64_t)&v250, (uint64_t)&v281, 0, v63, v64, v277.f64[0] + v8, v68.f64[0], v66, &v279, v67, &v273, v60 + 32))
                  {
                    v240 = v284[0];
                    v72 = *(float32x2_t *)(v7 + 32);
                    v279.f64[0] = v277.f64[0];
                    v280 = v278;
                    v279.f64[1] = v277.f64[1] + v8;
                    if (sub_20FC62D74(v284[0].f64, v283, (uint64_t)v282, (uint64_t)&v250, (uint64_t)&v281, 0, v63, v64, v277.f64[1] + v8, v69, v70, &v279, v71, &v273, v65))
                    {
                      v237 = v284[0];
                      v76 = *(float32x2_t *)(v7 + 32);
                      v279 = v277;
                      v280 = v278 + v8;
                      if ((sub_20FC62D74(v284[0].f64, v283, (uint64_t)v282, (uint64_t)&v250, (uint64_t)&v281, 0, v63, v64, v278 + v8, v73, v74, &v279, v75, &v273, v65) & 1) != 0)
                      {
                        v77 = (int64x2_t)vdivq_f64(vsubq_f64(vsubq_f64(v240, vcvtq_f64_f32(v72)), v244), v239);
                        v78.i64[0] = vdupq_laneq_s64(v77, 1).u64[0];
                        v79 = (int64x2_t)vdivq_f64(vsubq_f64(vsubq_f64(v237, vcvtq_f64_f32(v76)), v244), v239);
                        v78.i64[1] = v79.i64[1];
                        v80 = (int64x2_t)vdivq_f64(vsubq_f64(vsubq_f64(v284[0], vcvtq_f64_f32(*(float32x2_t *)(v7 + 32))), v244), v239);
                        if (vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64((float64x2_t)vzip1q_s64(v77, v79)), vabsq_f64((float64x2_t)vextq_s8(v78, (int8x16_t)vdupq_laneq_s64(v80, 1), 8uLL))), vabsq_f64((float64x2_t)vzip1q_s64(v80, (int64x2_t)v78)))) <= 1.0e10)
                        {
                          v81 = a1[5];
                          v82 = *v81;
                          v83 = v81[1];
                          if (v83 != v82)
                          {
                            v84 = 0x6F96F96F96F96F97 * ((v83 - v82) >> 3);
                            v85 = *(_DWORD *)(v7 + 16);
                            v86 = *(_QWORD *)v7;
                            while (1)
                            {
                              v87 = v84 >> 1;
                              v88 = v82 + 312 * (v84 >> 1);
                              v89 = *(_DWORD *)(v88 + 16);
                              v90 = v89 >= v85;
                              if (v89 != v85)
                                goto LABEL_88;
                              if (*(_QWORD *)v88 >= v86)
                                break;
LABEL_82:
                              v82 = v88 + 312;
                              v87 = v84 + ~v87;
LABEL_83:
                              v84 = v87;
                              if (!v87)
                                goto LABEL_95;
                            }
                            if (*(_QWORD *)v88 != v86)
                              goto LABEL_83;
                            v90 = *(_DWORD *)(v88 + 8) >= *(_DWORD *)(v7 + 8);
LABEL_88:
                            if (v90)
                              goto LABEL_83;
                            goto LABEL_82;
                          }
LABEL_95:
                          if (v82 != v83
                            && *(_DWORD *)(v82 + 16) == *(_DWORD *)(v7 + 16)
                            && *(_QWORD *)v82 == *(_QWORD *)v7
                            && *(_DWORD *)(v82 + 8) == *(_DWORD *)(v7 + 8))
                          {
                            *(_QWORD *)&v91 = vextq_s8(v265, v265, 8uLL).u64[0];
                            *(_QWORD *)&v92 = vextq_s8(v261, v261, 8uLL).u64[0];
                            *(_QWORD *)&v93.f64[0] = v265.i64[0];
                            *(_QWORD *)&v93.f64[1] = v267.i64[0];
                            v94.f64[0] = v91;
                            *(_QWORD *)&v238 = vextq_s8(v267, v267, 8uLL).u64[0];
                            v94.f64[1] = v238;
                            v95.f64[0] = v266;
                            v241 = v268;
                            v95.f64[1] = v268;
                            *(_QWORD *)&v96.f64[0] = v261.i64[0];
                            *(_QWORD *)&v97 = vextq_s8(v263, v263, 8uLL).u64[0];
                            *(_QWORD *)&v96.f64[1] = v263.i64[0];
                            v99 = *(float64x2_t *)(v82 + 24);
                            v98 = (float64x2_t *)(v82 + 24);
                            v231 = v98[4];
                            v232 = v98[1];
                            v219 = v99;
                            v220 = v98[3];
                            v229 = v98[10];
                            v230 = v98[7];
                            v223 = v98[6];
                            v224 = v98[9];
                            v227 = v98[16];
                            v228 = v98[13];
                            v225 = v98[12];
                            v226 = v98[15];
                            v100 = (float)(*(float *)(v7 + 56) * *(float *)(v7 + 56));
                            v101 = v270.f64[1] + v100;
                            v269.f64[0] = v269.f64[0] + v100;
                            v270.f64[1] = v270.f64[1] + v100;
                            v102.f64[0] = v92;
                            v102.f64[1] = v97;
                            v103.f64[0] = v262;
                            v103.f64[1] = v264;
                            v104 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v93, *(double *)(*(_QWORD *)(v247 + 24) + 456)), v94, *(float64x2_t *)(*(_QWORD *)(v247 + 24) + 456), 1), v95, *(double *)(*(_QWORD *)(v247 + 24) + 472)), v96, *(float64x2_t *)(*(_QWORD *)(v247 + 24) + 472), 1), v102, *(double *)(*(_QWORD *)(v247 + 24) + 488)), v103, *(float64x2_t *)(*(_QWORD *)(v247 + 24) + 488), 1);
                            v105 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v93, *(double *)(*(_QWORD *)(v247 + 24) + 504)), v94, *(float64x2_t *)(*(_QWORD *)(v247 + 24) + 504), 1), v95, *(double *)(*(_QWORD *)(v247 + 24) + 520)), v96, *(float64x2_t *)(*(_QWORD *)(v247 + 24) + 520), 1), v102, *(double *)(*(_QWORD *)(v247 + 24) + 536)), v103, *(float64x2_t *)(*(_QWORD *)(v247 + 24) + 536), 1);
                            v106 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v93, *(double *)(*(_QWORD *)(v247 + 24) + 552)), v94, *(float64x2_t *)(*(_QWORD *)(v247 + 24) + 552), 1), v95, *(double *)(*(_QWORD *)(v247 + 24) + 568)), v96, *(float64x2_t *)(*(_QWORD *)(v247 + 24) + 568), 1), v102, *(double *)(*(_QWORD *)(v247 + 24) + 584)), v103, *(float64x2_t *)(*(_QWORD *)(v247 + 24) + 584), 1);
                            v107 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v93, *(double *)(*(_QWORD *)(v247 + 24) + 600)), v94, *(float64x2_t *)(*(_QWORD *)(v247 + 24) + 600), 1), v95, *(double *)(*(_QWORD *)(v247 + 24) + 616)), v96, *(float64x2_t *)(*(_QWORD *)(v247 + 24) + 616), 1), v102, *(double *)(*(_QWORD *)(v247 + 24) + 632)), v103, *(float64x2_t *)(*(_QWORD *)(v247 + 24) + 632), 1);
                            v108 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v93, *(double *)(*(_QWORD *)(v247 + 24) + 648)), v94, *(float64x2_t *)(*(_QWORD *)(v247 + 24) + 648), 1), v95, *(double *)(*(_QWORD *)(v247 + 24) + 664)), v96, *(float64x2_t *)(*(_QWORD *)(v247 + 24) + 664), 1), v102, *(double *)(*(_QWORD *)(v247 + 24) + 680)), v103, *(float64x2_t *)(*(_QWORD *)(v247 + 24) + 680), 1);
                            v233 = v96;
                            v234 = v94;
                            v221 = v103;
                            v222 = v102;
                            v109 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v93, *(double *)(*(_QWORD *)(v247 + 24) + 696)), v94, *(float64x2_t *)(*(_QWORD *)(v247 + 24) + 696), 1), v95, *(double *)(*(_QWORD *)(v247 + 24) + 712)), v96, *(float64x2_t *)(*(_QWORD *)(v247 + 24) + 712), 1), v102, *(double *)(*(_QWORD *)(v247 + 24) + 728)), v103, *(float64x2_t *)(*(_QWORD *)(v247 + 24) + 728), 1);
                            v235 = v269;
                            v110 = vaddq_f64(v269, vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v104, *(double *)v265.i64), v105, v91), v106, v266), v107, *(double *)v261.i64), v108, v92), v109, v262));
                            v209 = v98[2];
                            v210 = v98[5];
                            v211 = v98[8];
                            v212 = v98[11];
                            v213 = v98[14];
                            v214 = v98[17];
                            v215 = v273;
                            v216 = *(double *)v274;
                            v218 = *(double *)&v274[24];
                            v217 = *(float64x2_t *)&v274[8];
                            if (v110.f64[0] > v8)
                            {
                              v111 = vaddq_f64(v270, vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v104, *(double *)v267.i64), v105, v238), v106, v268), v107, *(double *)v263.i64), v108, v97), v109, v264));
                              v112 = v111.f64[1];
                              if (v111.f64[1] > v8)
                              {
                                v113 = a1[4];
                                v114 = *((double *)v113 + 395);
                                v115 = *((double *)v113 + 394);
                                if (v111.f64[1] >= v110.f64[0])
                                  v112 = v110.f64[0];
                                v116 = v9 / v112;
                                if (v112 == 0.0)
                                  v116 = v9;
                                v205 = (float64x2_t)v77;
                                v206 = v116;
                                v250.columns[0] = (simd_double2)vmulq_n_f64(v110, v116);
                                v250.columns[1] = (simd_double2)vmulq_n_f64(v111, v116);
                                v203 = (float64x2_t)v80;
                                v204 = (float64x2_t)v79;
                                v201 = *(double *)v265.i64;
                                v202 = v266;
                                v199 = *(double *)v267.i64;
                                v200 = v91;
                                v197 = v262;
                                v198 = v264;
                                v195 = v92;
                                v196 = *(double *)v261.i64;
                                v193 = v97;
                                v194 = *(double *)v263.i64;
                                v191 = v95;
                                v192 = v93;
                                v189 = v275;
                                v190 = v276;
                                v207 = v270;
                                if (sub_20FC643E8((double *)&v281, v282, (double *)&v250))
                                {
                                  if (v235.f64[0] > v8 && v101 > v8)
                                  {
                                    v186 = (int64x2_t)v281.columns[1];
                                    v187 = (int64x2_t)v281.columns[0];
                                    v117 = v101 >= v235.f64[0] ? v235.f64[0] : v101;
                                    v118 = v117 == 0.0 ? v9 : v9 / v117;
                                    v188 = v118;
                                    v236 = vmulq_n_f64(v235, v118);
                                    v250.columns[0] = (simd_double2)v236;
                                    v250.columns[1] = (simd_double2)vmulq_n_f64(v207, v118);
                                    v208 = v250.columns[1];
                                    if ((sub_20FC643E8((double *)&v281, v282, (double *)&v250) & 1) != 0)
                                    {
                                      v184 = (int64x2_t)v281.columns[1];
                                      v185 = (int64x2_t)v281.columns[0];
                                      v250.columns[0] = (simd_double2)v236;
                                      v250.columns[1] = v208;
                                      if ((sub_20FC643E8((double *)&v281, v282, (double *)&v250) & 1) != 0)
                                      {
                                        v119 = v8;
                                        v120 = sqrt(v206);
                                        v121 = vmlaq_laneq_f64(vmulq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v187, v186), v120), v244.f64[0]), vmulq_n_f64((float64x2_t)vzip2q_s64(v187, v186), v120), v244, 1);
                                        v122 = vaddvq_f64(vmulq_f64(v121, v121));
                                        v121.f64[0] = sqrt(v188);
                                        v123 = vmlaq_f64(vmulq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v185, v184), v121.f64[0]), v244.f64[0]), (float64x2_t)vdupq_laneq_s64((int64x2_t)v244, 1), vmulq_n_f64((float64x2_t)vzip2q_s64(v185, v184), v121.f64[0]));
                                        v124 = (int8x16_t)vmulq_n_f64((float64x2_t)v281.columns[0], v121.f64[0]);
                                        v125 = (int8x16_t)vmulq_n_f64((float64x2_t)v281.columns[1], v121.f64[0]);
                                        if (vaddvq_f64(vmulq_f64(v123, v123)) <= v114 && v122 <= v115)
                                          v127 = 0;
                                        else
                                          v127 = -1;
                                        v128 = (int8x16_t)vdupq_n_s64(v127);
                                        v129 = (float64x2_t)vbicq_s8(v125, v128);
                                        v130 = (float64x2_t)vbicq_s8(v124, v128);
                                        v281.columns[0] = (simd_double2)vmlaq_n_f64(vmulq_n_f64(v130, v130.f64[0]), v129, v129.f64[0]);
                                        v281.columns[1] = (simd_double2)vmlaq_laneq_f64(vmulq_laneq_f64(v130, v130, 1), v129, v129, 1);
                                        v131 = vmulq_f64((float64x2_t)v281.columns[0], (float64x2_t)v281.columns[0]);
                                        v132 = vmulq_f64((float64x2_t)v281.columns[1], (float64x2_t)v281.columns[1]);
                                        if (sqrt(vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v132, 1), vaddq_f64(v132, vaddq_f64(v131, (float64x2_t)vdupq_laneq_s64((int64x2_t)v131, 1)))).f64[0]) > 0.0)
                                        {
                                          v133 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v192, v219.f64[0]), v234, v219, 1), v191, v232.f64[0]), v233, v232, 1), v222, v209.f64[0]), v221, v209, 1);
                                          v134 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v192, v220.f64[0]), v234, v220, 1), v191, v231.f64[0]), v233, v231, 1), v222, v210.f64[0]), v221, v210, 1);
                                          v135 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v192, v223.f64[0]), v234, v223, 1), v191, v230.f64[0]), v233, v230, 1), v222, v211.f64[0]), v221, v211, 1);
                                          v136 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v192, v224.f64[0]), v234, v224, 1), v191, v229.f64[0]), v233, v229, 1), v222, v212.f64[0]), v221, v212, 1);
                                          v137 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v192, v225.f64[0]), v234, v225, 1), v191, v228.f64[0]), v233, v228, 1), v222, v213.f64[0]), v221, v213, 1);
                                          v138 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v192, v226.f64[0]), v234, v226, 1), v191, v227.f64[0]), v233, v227, 1), v222, v214.f64[0]), v221, v214, 1);
                                          v139 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v133, v201), v134, v200), v135, v202), v136, v196), v137, v195), v138, v197);
                                          v140 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v133, v199), v134, v238), v135, v241), v136, v194), v137, v193), v138, v198);
                                          v141 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v205, v215.f64[0]), v204, v215, 1), v203, v216);
                                          v142 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v205, v217.f64[0]), v204, v217, 1), v203, v218);
                                          v143 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v205, v189.f64[0]), v204, v189, 1), v203, v190);
                                          v245 = vaddq_f64(v139, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v141, v205.f64[0]), v142, v204.f64[0]), v143, v203.f64[0]));
                                          v242 = vaddq_f64(v140, vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v141, v205, 1), v142, v204, 1), v143, v203, 1));
                                          sub_20E8BE3B0(&v281, &v250);
                                          v281 = v250;
                                          v250.columns[0] = (simd_double2)vaddq_f64(v245, (float64x2_t)v250.columns[0]);
                                          v250.columns[1] = (simd_double2)vaddq_f64(v242, (float64x2_t)v250.columns[1]);
                                          v144 = sub_20E8BE318((double *)&v250);
                                          v145 = sub_20E8BE318((double *)&v281);
                                          v146 = log(v144 / v145) * 0.5;
                                          v147 = (void **)a1[6];
                                          v148 = *(_DWORD *)a1[2] - 1;
                                          v150 = (char *)v147[1];
                                          v149 = (unint64_t)v147[2];
                                          if ((unint64_t)v150 < v149)
                                          {
                                            *(double *)v150 = v146;
                                            *((_DWORD *)v150 + 2) = v148;
                                            v151 = v150 + 16;
                                            goto LABEL_140;
                                          }
                                          v152 = (char *)*v147;
                                          v153 = (v150 - (_BYTE *)*v147) >> 4;
                                          v154 = v153 + 1;
                                          if ((unint64_t)(v153 + 1) >> 60)
                                            sub_20E867F44();
                                          v155 = v149 - (_QWORD)v152;
                                          if (v155 >> 3 > v154)
                                            v154 = v155 >> 3;
                                          if ((unint64_t)v155 >= 0x7FFFFFFFFFFFFFF0)
                                            v156 = 0xFFFFFFFFFFFFFFFLL;
                                          else
                                            v156 = v154;
                                          if (!v156)
                                          {
                                            v157 = 0;
                                            goto LABEL_135;
                                          }
                                          if (v156 >> 60)
                                            goto LABEL_161;
                                          v157 = (char *)operator new(16 * v156);
LABEL_135:
                                          v158 = &v157[16 * v153];
                                          *(double *)v158 = v146;
                                          *((_DWORD *)v158 + 2) = v148;
                                          v159 = v158;
                                          if (v150 != v152)
                                          {
                                            do
                                            {
                                              *((_OWORD *)v159 - 1) = *((_OWORD *)v150 - 1);
                                              v159 -= 16;
                                              v150 -= 16;
                                            }
                                            while (v150 != v152);
                                            v150 = (char *)*v147;
                                          }
                                          v151 = v158 + 16;
                                          *v147 = v159;
                                          v147[1] = v158 + 16;
                                          v147[2] = &v157[16 * v156];
                                          if (v150)
                                            operator delete(v150);
LABEL_140:
                                          v147[1] = v151;
                                          v160 = (void **)a1[7];
                                          sub_20FC6343C((double *)&v250, *(_QWORD *)(*(_QWORD *)(v249 + 16) + 120), *(_QWORD *)(*(_QWORD *)(v249 + 16) + 128), v7, v277.f64, (uint64_t)&v273, v243 + 16, v247 + 16, *(double *)(*a1[10] + 8 * v246), (v43 + v52) * 0.5, *(_QWORD *)(*a1[9] + 8 * v26), *a1[11] + 200 * v26, v269.f64, (uint64_t)&v260);
                                          v162 = (char *)v160[1];
                                          v161 = (unint64_t)v160[2];
                                          if ((unint64_t)v162 < v161)
                                          {
                                            *((_OWORD *)v162 + 7) = v256;
                                            *((_OWORD *)v162 + 8) = v257;
                                            *((_OWORD *)v162 + 9) = v258;
                                            *((_QWORD *)v162 + 20) = v259;
                                            *((_OWORD *)v162 + 3) = v252;
                                            *((_OWORD *)v162 + 4) = v253;
                                            *((_OWORD *)v162 + 5) = v254;
                                            *((_OWORD *)v162 + 6) = v255;
                                            *(simd_double2x2 *)v162 = v250;
                                            *((_OWORD *)v162 + 2) = v251;
                                            v10 = v162 + 168;
                                          }
                                          else
                                          {
                                            v163 = (char *)*v160;
                                            v164 = 0xCF3CF3CF3CF3CF3DLL * ((v162 - (_BYTE *)*v160) >> 3);
                                            v165 = v164 + 1;
                                            if (v164 + 1 > 0x186186186186186)
                                              sub_20E867F44();
                                            v166 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v161 - (_QWORD)v163) >> 3);
                                            if (2 * v166 > v165)
                                              v165 = 2 * v166;
                                            if (v166 >= 0xC30C30C30C30C3)
                                              v167 = 0x186186186186186;
                                            else
                                              v167 = v165;
                                            if (v167)
                                            {
                                              if (v167 <= 0x186186186186186)
                                              {
                                                v168 = (char *)operator new(168 * v167);
                                                goto LABEL_151;
                                              }
LABEL_161:
                                              sub_20E877A38();
                                            }
                                            v168 = 0;
LABEL_151:
                                            v169 = v258;
                                            v170 = &v168[168 * v164];
                                            *((_OWORD *)v170 + 8) = v257;
                                            *((_OWORD *)v170 + 9) = v169;
                                            *((_QWORD *)v170 + 20) = v259;
                                            v171 = v254;
                                            *((_OWORD *)v170 + 4) = v253;
                                            *((_OWORD *)v170 + 5) = v171;
                                            v172 = v256;
                                            *((_OWORD *)v170 + 6) = v255;
                                            *((_OWORD *)v170 + 7) = v172;
                                            v173 = v250.columns[1];
                                            *(simd_double2 *)v170 = v250.columns[0];
                                            *((simd_double2 *)v170 + 1) = v173;
                                            v174 = v252;
                                            *((_OWORD *)v170 + 2) = v251;
                                            *((_OWORD *)v170 + 3) = v174;
                                            v175 = v170;
                                            if (v162 != v163)
                                            {
                                              do
                                              {
                                                v176 = *(_OWORD *)(v162 - 168);
                                                v177 = *(_OWORD *)(v162 - 152);
                                                *(_OWORD *)(v175 - 136) = *(_OWORD *)(v162 - 136);
                                                *(_OWORD *)(v175 - 152) = v177;
                                                *(_OWORD *)(v175 - 168) = v176;
                                                v178 = *(_OWORD *)(v162 - 120);
                                                v179 = *(_OWORD *)(v162 - 104);
                                                v180 = *(_OWORD *)(v162 - 88);
                                                *(_OWORD *)(v175 - 72) = *(_OWORD *)(v162 - 72);
                                                *(_OWORD *)(v175 - 88) = v180;
                                                *(_OWORD *)(v175 - 104) = v179;
                                                *(_OWORD *)(v175 - 120) = v178;
                                                v181 = *(_OWORD *)(v162 - 56);
                                                v182 = *(_OWORD *)(v162 - 40);
                                                v183 = *(_OWORD *)(v162 - 24);
                                                *((_QWORD *)v175 - 1) = *((_QWORD *)v162 - 1);
                                                *(_OWORD *)(v175 - 24) = v183;
                                                *(_OWORD *)(v175 - 40) = v182;
                                                *(_OWORD *)(v175 - 56) = v181;
                                                v175 -= 168;
                                                v162 -= 168;
                                              }
                                              while (v162 != v163);
                                              v162 = (char *)*v160;
                                            }
                                            v10 = v170 + 168;
                                            *v160 = v175;
                                            v160[1] = v170 + 168;
                                            v160[2] = &v168[168 * v167];
                                            if (v162)
                                              operator delete(v162);
                                          }
                                          v160[1] = v10;
                                        }
                                        v8 = v119;
                                        v9 = 1.0;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                v2 = v249;
                v6 = v248;
              }
            }
          }
LABEL_12:
          v7 += 64;
        }
        while (v7 != v6);
      }
    }
  }
}

uint64_t sub_20FC69184(uint64_t result, uint64_t *a2, uint64_t **a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  double v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  double v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  double v57;
  uint64_t v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  double v89;
  double v90;
  uint64_t v91;
  double v92;
  uint64_t *v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  double v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  double v110;
  uint64_t v111;
  uint64_t v112;
  int64_t v113;
  uint64_t *v114;
  int64_t v115;
  BOOL v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  double v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t *v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  double v140;
  uint64_t *v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  double v146;
  uint64_t v147;

  v9 = (uint64_t *)result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v85 = *(a2 - 1);
        v86 = *v10;
        if (*(double *)(**a3 + 16 * v85) > *(double *)(**a3 + 16 * *v10))
        {
          *v10 = v85;
          goto LABEL_165;
        }
        return result;
      case 3:
        v86 = *v10;
        v87 = v10[1];
        v88 = **a3;
        v89 = *(double *)(v88 + 16 * v87);
        v90 = *(double *)(v88 + 16 * *v10);
        v91 = *(a2 - 1);
        v92 = *(double *)(v88 + 16 * v91);
        if (v89 <= v90)
        {
          if (v92 > v89)
          {
            v10[1] = v91;
            *(a2 - 1) = v87;
            v102 = *v10;
            v98 = v10[1];
            v100 = *(double *)(v88 + 16 * v98);
            goto LABEL_154;
          }
        }
        else
        {
          if (v92 <= v89)
          {
            *v10 = v87;
            v10[1] = v86;
            v147 = *(a2 - 1);
            if (*(double *)(v88 + 16 * v147) <= v90)
              return result;
            v10[1] = v147;
          }
          else
          {
            *v10 = v91;
          }
LABEL_165:
          *(a2 - 1) = v86;
        }
        return result;
      case 4:
        return (uint64_t)sub_20FC654E0(v10, v10 + 1, v10 + 2, a2 - 1, **a3);
      case 5:
        v93 = v10 + 1;
        v94 = v10 + 2;
        v95 = v10 + 3;
        result = (uint64_t)sub_20FC654E0(v9, v9 + 1, v9 + 2, v9 + 3, **a3);
        v96 = *(a2 - 1);
        v97 = v9[3];
        v88 = **a3;
        if (*(double *)(v88 + 16 * v96) > *(double *)(v88 + 16 * v97))
        {
          *v95 = v96;
          *(a2 - 1) = v97;
          v98 = *v95;
          v99 = *v94;
          v100 = *(double *)(v88 + 16 * *v95);
          if (v100 > *(double *)(v88 + 16 * *v94))
          {
            *v94 = v98;
            *v95 = v99;
            v101 = *v93;
            if (v100 > *(double *)(v88 + 16 * *v93))
            {
              v9[1] = v98;
              v9[2] = v101;
              v102 = *v9;
LABEL_154:
              if (v100 > *(double *)(v88 + 16 * v102))
              {
                *v9 = v98;
                v9[1] = v102;
              }
            }
          }
        }
        return result;
      default:
        if (v11 > 191)
        {
          if (!a4)
          {
            if (v10 != a2)
            {
              v113 = (unint64_t)(v12 - 2) >> 1;
              v114 = *a3;
              v115 = v113;
              do
              {
                if (v113 >= v115)
                {
                  v117 = (2 * v115) | 1;
                  v118 = &v10[v117];
                  v119 = *v114;
                  if (2 * v115 + 2 < v12 && *(double *)(v119 + 16 * *v118) > *(double *)(v119 + 16 * v118[1]))
                  {
                    ++v118;
                    v117 = 2 * v115 + 2;
                  }
                  v120 = &v10[v115];
                  result = *v118;
                  v121 = *v120;
                  v122 = *(double *)(v119 + 16 * *v120);
                  if (*(double *)(v119 + 16 * *v118) <= v122)
                  {
                    do
                    {
                      v123 = v118;
                      *v120 = result;
                      if (v113 < v117)
                        break;
                      v124 = 2 * v117;
                      v117 = (2 * v117) | 1;
                      v118 = &v10[v117];
                      v125 = v124 + 2;
                      if (v125 < v12 && *(double *)(v119 + 16 * *v118) > *(double *)(v119 + 16 * v118[1]))
                      {
                        ++v118;
                        v117 = v125;
                      }
                      result = *v118;
                      v120 = v123;
                    }
                    while (*(double *)(v119 + 16 * *v118) <= v122);
                    *v123 = v121;
                  }
                }
                v116 = v115-- <= 0;
              }
              while (!v116);
              v126 = (unint64_t)v11 >> 3;
              do
              {
                v127 = 0;
                v128 = *v10;
                v129 = *a3;
                v130 = v10;
                do
                {
                  v131 = v130;
                  v130 += v127 + 1;
                  v132 = 2 * v127;
                  v127 = (2 * v127) | 1;
                  v133 = v132 + 2;
                  if (v133 < v126)
                  {
                    result = v130[1];
                    if (*(double *)(*v129 + 16 * *v130) > *(double *)(*v129 + 16 * result))
                    {
                      ++v130;
                      v127 = v133;
                    }
                  }
                  *v131 = *v130;
                }
                while (v127 <= (uint64_t)((unint64_t)(v126 - 2) >> 1));
                if (v130 == --a2)
                {
                  *v130 = v128;
                }
                else
                {
                  *v130 = *a2;
                  *a2 = v128;
                  v134 = (char *)v130 - (char *)v10 + 8;
                  if (v134 >= 9)
                  {
                    v135 = (((unint64_t)v134 >> 3) - 2) >> 1;
                    v136 = &v10[v135];
                    v137 = *v136;
                    v138 = *v130;
                    v139 = *v129;
                    v140 = *(double *)(v139 + 16 * *v130);
                    if (*(double *)(v139 + 16 * *v136) > v140)
                    {
                      do
                      {
                        v141 = v136;
                        *v130 = v137;
                        if (!v135)
                          break;
                        v135 = (v135 - 1) >> 1;
                        v136 = &v10[v135];
                        v137 = *v136;
                        v130 = v141;
                      }
                      while (*(double *)(v139 + 16 * *v136) > v140);
                      *v141 = v138;
                    }
                  }
                }
                v116 = v126-- <= 2;
              }
              while (!v116);
            }
            return result;
          }
          v13 = (unint64_t)v12 >> 1;
          v14 = &v10[(unint64_t)v12 >> 1];
          v15 = **a3;
          v16 = *(a2 - 1);
          v17 = *(double *)(v15 + 16 * v16);
          if ((unint64_t)v11 < 0x401)
          {
            v22 = *v10;
            v23 = *v14;
            v24 = *(double *)(v15 + 16 * *v10);
            v25 = *(double *)(v15 + 16 * *v14);
            if (v24 <= v25)
            {
              if (v17 > v24)
              {
                *v10 = v16;
                *(a2 - 1) = v22;
                v27 = *v14;
                if (*(double *)(v15 + 16 * *v10) > *(double *)(v15 + 16 * *v14))
                {
                  *v14 = *v10;
                  *v10 = v27;
                  --a4;
                  v28 = v27;
                  if ((a5 & 1) != 0)
                    goto LABEL_33;
                  goto LABEL_55;
                }
              }
              goto LABEL_32;
            }
            if (v17 <= v24)
            {
              *v14 = v22;
              *v10 = v23;
              v40 = *(a2 - 1);
              if (*(double *)(v15 + 16 * v40) <= v25)
                goto LABEL_32;
              *v10 = v40;
            }
            else
            {
              *v14 = v16;
            }
            *(a2 - 1) = v23;
LABEL_32:
            --a4;
            v28 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_33;
            goto LABEL_55;
          }
          v18 = *v14;
          v19 = *v10;
          v20 = *(double *)(v15 + 16 * *v14);
          v21 = *(double *)(v15 + 16 * *v10);
          if (v20 <= v21)
          {
            if (v17 > v20)
            {
              *v14 = v16;
              *(a2 - 1) = v18;
              v26 = *v10;
              if (*(double *)(v15 + 16 * *v14) > *(double *)(v15 + 16 * *v10))
              {
                *v10 = *v14;
                *v14 = v26;
              }
            }
          }
          else
          {
            if (v17 <= v20)
            {
              *v10 = v18;
              *v14 = v19;
              v29 = *(a2 - 1);
              if (*(double *)(v15 + 16 * v29) <= v21)
                goto LABEL_23;
              *v14 = v29;
            }
            else
            {
              *v10 = v16;
            }
            *(a2 - 1) = v19;
          }
LABEL_23:
          v30 = &v10[v13];
          v33 = *(v30 - 1);
          v31 = v30 - 1;
          v32 = v33;
          v34 = v10[1];
          v35 = *(double *)(v15 + 16 * v33);
          v36 = *(double *)(v15 + 16 * v34);
          v37 = *(a2 - 2);
          v38 = *(double *)(v15 + 16 * v37);
          if (v35 <= v36)
          {
            if (v38 > v35)
            {
              *v31 = v37;
              *(a2 - 2) = v32;
              v39 = v10[1];
              if (*(double *)(v15 + 16 * *v31) > *(double *)(v15 + 16 * v39))
              {
                v10[1] = *v31;
                *v31 = v39;
              }
            }
          }
          else
          {
            if (v38 <= v35)
            {
              v10[1] = v32;
              *v31 = v34;
              v42 = *(a2 - 2);
              if (*(double *)(v15 + 16 * v42) <= v36)
                goto LABEL_37;
              *v31 = v42;
            }
            else
            {
              v10[1] = v37;
            }
            *(a2 - 2) = v34;
          }
LABEL_37:
          v43 = &v10[v13];
          v46 = v43[1];
          v44 = v43 + 1;
          v45 = v46;
          v47 = v10[2];
          v48 = *(double *)(v15 + 16 * v46);
          v49 = *(double *)(v15 + 16 * v47);
          v50 = *(a2 - 3);
          v51 = *(double *)(v15 + 16 * v50);
          if (v48 <= v49)
          {
            if (v51 > v48)
            {
              *v44 = v50;
              *(a2 - 3) = v45;
              v52 = v10[2];
              if (*(double *)(v15 + 16 * *v44) > *(double *)(v15 + 16 * v52))
              {
                v10[2] = *v44;
                *v44 = v52;
              }
            }
          }
          else
          {
            if (v51 <= v48)
            {
              v10[2] = v45;
              *v44 = v47;
              v53 = *(a2 - 3);
              if (*(double *)(v15 + 16 * v53) <= v49)
                goto LABEL_46;
              *v44 = v53;
            }
            else
            {
              v10[2] = v50;
            }
            *(a2 - 3) = v47;
          }
LABEL_46:
          v54 = *v14;
          v55 = *v31;
          v56 = *(double *)(v15 + 16 * *v14);
          v57 = *(double *)(v15 + 16 * *v31);
          v58 = *v44;
          v59 = *(double *)(v15 + 16 * *v44);
          if (v56 > v57)
          {
            if (v59 <= v56)
            {
              *v31 = v54;
              *v14 = v55;
              v31 = v14;
              v54 = v58;
              if (v59 <= v57)
              {
                v60 = *v10;
                *v10 = v55;
                *v14 = v60;
                --a4;
                v28 = *v10;
                if ((a5 & 1) != 0)
                  goto LABEL_33;
                goto LABEL_55;
              }
            }
            goto LABEL_53;
          }
          if (v59 <= v56)
            goto LABEL_54;
          *v14 = v58;
          *v44 = v54;
          v44 = v14;
          v54 = v55;
          if (v59 > v57)
          {
LABEL_53:
            *v31 = v58;
            *v44 = v55;
LABEL_54:
            v61 = *v10;
            *v10 = v54;
            *v14 = v61;
            --a4;
            v28 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_33;
LABEL_55:
            v41 = *(double *)(v15 + 16 * v28);
            if (*(double *)(v15 + 16 * *(v10 - 1)) > v41)
              goto LABEL_56;
            if (v41 <= *(double *)(v15 + 16 * *(a2 - 1)))
            {
              v77 = v10 + 1;
              do
              {
                v10 = v77;
                if (v77 >= a2)
                  break;
                ++v77;
              }
              while (v41 <= *(double *)(v15 + 16 * *v10));
            }
            else
            {
              do
              {
                v76 = v10[1];
                ++v10;
              }
              while (v41 <= *(double *)(v15 + 16 * v76));
            }
            v78 = a2;
            if (v10 < a2)
            {
              v78 = a2;
              do
                v79 = *--v78;
              while (v41 > *(double *)(v15 + 16 * v79));
            }
            if (v10 < v78)
            {
              v80 = *v10;
              v81 = *v78;
              do
              {
                *v10 = v81;
                *v78 = v80;
                do
                {
                  v82 = v10[1];
                  ++v10;
                  v80 = v82;
                }
                while (v41 <= *(double *)(v15 + 16 * v82));
                do
                {
                  v83 = *--v78;
                  v81 = v83;
                }
                while (v41 > *(double *)(v15 + 16 * v83));
              }
              while (v10 < v78);
            }
            v84 = v10 - 1;
            if (v10 - 1 != v9)
              *v9 = *v84;
            a5 = 0;
            *v84 = v28;
            continue;
          }
          v75 = *v10;
          *v10 = v58;
          *v14 = v75;
          --a4;
          v28 = *v10;
          if ((a5 & 1) == 0)
            goto LABEL_55;
LABEL_33:
          v41 = *(double *)(v15 + 16 * v28);
LABEL_56:
          v62 = 0;
          do
            v63 = v10[++v62];
          while (*(double *)(v15 + 16 * v63) > v41);
          v64 = &v10[v62];
          v65 = a2;
          if (v62 == 1)
          {
            v65 = a2;
            do
            {
              if (v64 >= v65)
                break;
              v67 = *--v65;
            }
            while (*(double *)(v15 + 16 * v67) <= v41);
          }
          else
          {
            do
              v66 = *--v65;
            while (*(double *)(v15 + 16 * v66) <= v41);
          }
          if (v64 >= v65)
          {
            v73 = v64 - 1;
            if (v64 - 1 != v10)
              goto LABEL_73;
          }
          else
          {
            v68 = *v65;
            v69 = &v10[v62];
            v70 = v65;
            do
            {
              *v69 = v68;
              *v70 = v63;
              do
              {
                v71 = v69[1];
                ++v69;
                v63 = v71;
              }
              while (*(double *)(v15 + 16 * v71) > v41);
              do
              {
                v72 = *--v70;
                v68 = v72;
              }
              while (*(double *)(v15 + 16 * v72) <= v41);
            }
            while (v69 < v70);
            v73 = v69 - 1;
            if (v69 - 1 == v10)
              goto LABEL_74;
LABEL_73:
            *v10 = *v73;
          }
LABEL_74:
          *v73 = v28;
          if (v64 < v65)
            goto LABEL_77;
          v74 = sub_20FC69CE0(v10, v73, a3);
          v10 = v73 + 1;
          result = sub_20FC69CE0(v73 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            if (v74)
              continue;
LABEL_77:
            result = sub_20FC69184(v9, v73, a3, a4, a5 & 1);
            a5 = 0;
            v10 = v73 + 1;
            continue;
          }
          a2 = v73;
          if (v74)
            return result;
          goto LABEL_2;
        }
        if ((a5 & 1) != 0)
        {
          if (v10 != a2)
          {
            v103 = v10 + 1;
            if (v10 + 1 != a2)
            {
              v104 = **a3;
              v105 = 8;
              v106 = v10;
              do
              {
                v109 = *v106;
                v108 = v106[1];
                v106 = v103;
                v110 = *(double *)(v104 + 16 * v108);
                if (v110 > *(double *)(v104 + 16 * v109))
                {
                  v111 = v105;
                  do
                  {
                    *(uint64_t *)((char *)v10 + v111) = v109;
                    v112 = v111 - 8;
                    if (v111 == 8)
                    {
                      v107 = v10;
                      goto LABEL_116;
                    }
                    v109 = *(uint64_t *)((char *)v10 + v111 - 16);
                    v111 -= 8;
                  }
                  while (v110 > *(double *)(v104 + 16 * v109));
                  v107 = (uint64_t *)((char *)v10 + v112);
LABEL_116:
                  *v107 = v108;
                }
                v103 = v106 + 1;
                v105 += 8;
              }
              while (v106 + 1 != a2);
            }
          }
        }
        else if (v10 != a2)
        {
          v142 = v10 + 1;
          if (v10 + 1 != a2)
          {
            v143 = **a3;
            do
            {
              v145 = *v9;
              v144 = v9[1];
              v9 = v142;
              v146 = *(double *)(v143 + 16 * v144);
              if (v146 > *(double *)(v143 + 16 * v145))
              {
                do
                {
                  *v142 = v145;
                  v145 = *(v142 - 2);
                  --v142;
                }
                while (v146 > *(double *)(v143 + 16 * v145));
                *v142 = v144;
              }
              v142 = v9 + 1;
            }
            while (v9 + 1 != a2);
          }
        }
        return result;
    }
  }
}

BOOL sub_20FC69CE0(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int v41;
  uint64_t i;
  uint64_t v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (*(double *)(**a3 + 16 * v8) > *(double *)(**a3 + 16 * *a1))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      v10 = *a1;
      v11 = a1[1];
      v12 = **a3;
      v13 = *(double *)(v12 + 16 * v11);
      v14 = *(double *)(v12 + 16 * *a1);
      v15 = *(a2 - 1);
      v16 = *(double *)(v12 + 16 * v15);
      if (v13 <= v14)
      {
        if (v16 > v13)
        {
          a1[1] = v15;
          *(a2 - 1) = v11;
          v39 = *a1;
          v38 = a1[1];
          if (*(double *)(v12 + 16 * v38) > *(double *)(v12 + 16 * *a1))
          {
            *a1 = v38;
            a1[1] = v39;
          }
        }
      }
      else if (v16 <= v13)
      {
        *a1 = v11;
        a1[1] = v10;
        v48 = *(a2 - 1);
        if (*(double *)(v12 + 16 * v48) > v14)
        {
          a1[1] = v48;
          *(a2 - 1) = v10;
        }
      }
      else
      {
        *a1 = v15;
        *(a2 - 1) = v10;
      }
      return result;
    case 4:
      sub_20FC654E0(a1, a1 + 1, a1 + 2, a2 - 1, **a3);
      return 1;
    case 5:
      v27 = a1 + 1;
      v28 = a1 + 2;
      v29 = a1 + 3;
      sub_20FC654E0(a1, a1 + 1, a1 + 2, a1 + 3, **a3);
      v30 = *(a2 - 1);
      v31 = a1[3];
      v32 = **a3;
      if (*(double *)(v32 + 16 * v30) <= *(double *)(v32 + 16 * v31))
        return 1;
      *v29 = v30;
      *(a2 - 1) = v31;
      v33 = *v29;
      v34 = *v28;
      v35 = *(double *)(v32 + 16 * *v29);
      if (v35 <= *(double *)(v32 + 16 * *v28))
        return 1;
      *v28 = v33;
      *v29 = v34;
      v36 = *v27;
      if (v35 <= *(double *)(v32 + 16 * *v27))
        return 1;
      a1[1] = v33;
      a1[2] = v36;
      v37 = *a1;
      if (v35 <= *(double *)(v32 + 16 * *a1))
        return 1;
      *a1 = v33;
      a1[1] = v37;
      return 1;
    default:
      v18 = a1 + 2;
      v17 = a1[2];
      v19 = a1[1];
      v20 = *a1;
      v21 = **a3;
      v22 = *(double *)(v21 + 16 * v19);
      v23 = *(double *)(v21 + 16 * *a1);
      v24 = *(double *)(v21 + 16 * v17);
      if (v22 > v23)
      {
        v25 = a1;
        v26 = a1 + 2;
        if (v24 <= v22)
        {
          *a1 = v19;
          a1[1] = v20;
          v25 = a1 + 1;
          v26 = a1 + 2;
          if (v24 <= v23)
            goto LABEL_25;
        }
LABEL_24:
        *v25 = v17;
        *v26 = v20;
        goto LABEL_25;
      }
      if (v24 > v22)
      {
        a1[1] = v17;
        *v18 = v19;
        v25 = a1;
        v26 = a1 + 1;
        if (v24 > v23)
          goto LABEL_24;
      }
LABEL_25:
      v40 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v41 = 0;
      for (i = 24; ; i += 8)
      {
        v43 = *v40;
        v44 = *v18;
        v45 = *(double *)(v21 + 16 * *v40);
        if (v45 > *(double *)(v21 + 16 * v44))
          break;
LABEL_34:
        v18 = v40++;
        if (v40 == a2)
          return 1;
      }
      v46 = i;
      do
      {
        *(uint64_t *)((char *)a1 + v46) = v44;
        v47 = v46 - 8;
        if (v46 == 8)
        {
          *a1 = v43;
          if (++v41 != 8)
            goto LABEL_34;
          return v40 + 1 == a2;
        }
        v44 = *(uint64_t *)((char *)a1 + v46 - 16);
        v46 -= 8;
      }
      while (v45 > *(double *)(v21 + 16 * v44));
      *(uint64_t *)((char *)a1 + v47) = v43;
      if (++v41 != 8)
        goto LABEL_34;
      return v40 + 1 == a2;
  }
}

void sub_20FC6A0A4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  float64x2_t v6;
  float64x2_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v26;
  char *v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int *v31;
  char *v32;
  unsigned int v33;
  _QWORD **v34;
  _QWORD *v35;
  unint64_t v36;
  __int128 v37[4];
  double v38;

  v4 = *a1;
  v5 = *(_QWORD *)(a2 + 16);
  if (!*(_BYTE *)(v5 + 112))
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 1572, (uint64_t)"track_ptr->getStructure()", 25, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v5 = *(_QWORD *)(a2 + 16);
  }
  if (*(_BYTE *)(v5 + 72))
  {
    v6 = vcvtq_f64_f32(*(float32x2_t *)(v5 + 84));
    v37[0] = (__int128)vcvtq_f64_f32(*(float32x2_t *)(v5 + 76));
    v37[1] = (__int128)v6;
    v7 = vcvtq_f64_f32(*(float32x2_t *)(v5 + 100));
    v37[2] = (__int128)vcvtq_f64_f32(*(float32x2_t *)(v5 + 92));
    v37[3] = (__int128)v7;
    v38 = *(float *)(v5 + 108);
    v8 = *(_QWORD *)(v5 + 120);
    v9 = *(_QWORD *)(v5 + 128);
    if (v8 != v9)
    {
      v10 = (__int128 *)(v5 + 48);
      do
      {
        v11 = *(_DWORD *)(v8 + 16);
        v12 = *(_QWORD *)v8;
        v13 = *(_DWORD *)(v8 + 8);
        v14 = sub_20E9DF85C((_QWORD *)(*(_QWORD *)(v4 + 8) + 1784), (uint64_t *)v8);
        if (v14)
        {
          v15 = v14[13];
          v16 = *(_QWORD *)(v4 + 8);
          v19 = *(uint64_t **)(v16 + 56);
          v17 = (uint64_t *)(v16 + 56);
          v18 = v19;
          if (v19)
            goto LABEL_12;
        }
        else
        {
          v15 = 0;
          v20 = *(_QWORD *)(v4 + 8);
          v21 = *(uint64_t **)(v20 + 56);
          v17 = (uint64_t *)(v20 + 56);
          v18 = v21;
          if (v21)
          {
LABEL_12:
            v22 = v17;
            do
            {
              v23 = v18[4];
              if (v23 < v12)
              {
                ++v18;
              }
              else if (v23 == v12)
              {
                if (*((_DWORD *)v18 + 10) < v13)
                  ++v18;
                else
                  v22 = v18;
              }
              else
              {
                v22 = v18;
              }
              v18 = (uint64_t *)*v18;
            }
            while (v18);
            if (v22 != v17)
            {
              v24 = v22[4];
              if (v12 >= v24 && (v12 != v24 || *((_DWORD *)v22 + 10) <= v13))
                goto LABEL_26;
            }
          }
        }
        v22 = v17;
LABEL_26:
        if (*(_DWORD *)(a1[1] + 8) <= v13 && *(_DWORD *)(a1[2] + 8) >= v13 && v22 != v17)
        {
          v26 = a1[3];
          v27 = *(char **)(v26 + 8);
          v28 = *(char **)(v26 + 16);
          if (v28 != v27)
          {
            v29 = (v28 - v27) >> 4;
            do
            {
              v30 = v29 >> 1;
              v31 = (unsigned int *)&v27[16 * (v29 >> 1)];
              v33 = *v31;
              v32 = (char *)(v31 + 4);
              v29 += ~(v29 >> 1);
              if (v33 < v13)
                v27 = v32;
              else
                v29 = v30;
            }
            while (v29);
          }
          if (v27 == v28 || *(_DWORD *)v27 != v13 || *(_BYTE *)(*((_QWORD *)v27 + 1) + 20))
          {
            v34 = (_QWORD **)a1[4];
            v35 = (_QWORD *)a1[5];
            v36 = (*v35)++;
            if (((*(_QWORD *)(**v34 + ((v36 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v36) & 1) != 0)
            {
              sub_20FC65DC8(v11, v13, (_OWORD *)a2, v10, v37, v15, v4 + 3152, *(_DWORD *)a1[6], *(float *)(v8 + 32), *(float *)(v8 + 36), *(float *)(v8 + 56), (int64x2_t *)a1[7]);
              ++*(_DWORD *)a1[6];
            }
          }
        }
        v8 += 64;
      }
      while (v8 != v9);
    }
  }
}

uint64_t sub_20FC6A33C(uint64_t a1, int8x16_t **a2, unint64_t a3, float64x2_t *a4, double a5)
{
  __int128 v5;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v13;
  unsigned int v14;
  int8x16_t v15;
  unint64_t v16;
  uint64_t v17;
  int8x16_t v18;
  unint64_t v19;
  double v20;
  int8x16_t v21;
  unint64_t v22;
  unint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v36;
  float64x2_t v37;
  int64x2_t v38;
  double v39;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  int8x16_t v44;
  float64x2_t v52;
  int64x2_t v53;
  double v54;
  float64x2_t v56;
  float64x2_t v57;
  int8x16_t v58;
  float64x2_t v59;
  float64x2_t v61;
  float64x2_t v66;
  float64x2_t v69;
  float64_t v70;
  double v71;
  double v73;
  double v75;
  double v77;
  float64x2_t v78;
  float64x2_t v80;
  float64x2_t v81;
  double v84;
  float64x2_t v86;
  uint64_t *v87;
  uint64_t *v88;
  double v102;
  float64x2_t v103;
  uint64_t *v104;
  uint64_t v105;
  double v106;
  unint64_t v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unsigned int v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  float64x2_t v119;
  int64x2_t v120;
  double v121;
  float64x2_t v123;
  float64x2_t v124;
  int8x16_t v125;
  float64x2_t v126;
  int64x2_t v130;
  double v131;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  int8x16_t v136;
  float64x2_t v137;
  double v142;
  double v157;
  float64x2_t v163;
  float64_t v164;
  float64x2_t v166;
  double v168;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  double v179;
  float64x2_t v180;
  BOOL v184;
  float64x2_t v185;
  double v186;
  double v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v204;
  uint64_t v205;
  float64x2_t v206;
  unint64_t v207;
  float64x2_t v208;
  unint64_t v209;
  double v210;
  uint64_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;
  double v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  float64_t v219;
  int8x16_t v220;
  double v221;
  float64_t v222;
  uint64_t v223;
  double v224;
  uint64_t v225;
  __int128 v226;
  unint64_t v227;
  float64x2_t v228;
  uint64_t v229;
  float64x2_t v230;
  float64x2_t v231;
  __int128 v232;
  float64x2_t v233;
  __int128 v234;
  float64x2_t v235;
  __int128 v236;
  float64x2_t v237;
  uint64_t v238;
  uint64_t v239;
  float64x2_t v240;
  __int128 v241;
  float64x2_t v242;
  __int128 v243;
  float64x2_t v244;
  __int128 v245;
  float64x2_t v246;
  uint64_t v247;
  uint64_t v248;
  int64x2_t v249;
  float64_t v250;
  int64x2_t v251;
  float64_t v252;
  float64x2_t v253;
  double v254;
  float64x2_t v255;
  double v256;

  if (0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(_QWORD *)(a1 + 296) - *(_QWORD *)(a1 + 288)) >> 3) < a3)
    return 0;
  v8 = &(*a2)[3].i64[1];
  v9 = *v8;
  v10 = *(_BYTE *)(a1 + 280) ? a1 + 40 : 0;
  if (!v9)
    return 0;
  v13 = *(_QWORD *)(v10 + 136);
  v14 = *(_DWORD *)(v10 + 144);
  *(_QWORD *)&v5 = (*a2)[104].i64[1];
  v15 = *(int8x16_t *)((char *)*a2 + 1656);
  v16 = vextq_s8(v15, v15, 8uLL).u64[0];
  v17 = (*a2)[106].i64[0];
  v18 = (*a2)[105];
  v19 = vextq_s8(v18, v18, 8uLL).u64[0];
  v20 = *(double *)&(*a2)[107].i64[1];
  v21 = *(int8x16_t *)((char *)*a2 + 1704);
  v22 = vextq_s8(v21, v21, 8uLL).u64[0];
  v23 = vextq_s8((*a2)[108], (*a2)[108], 8uLL).u64[0];
  v24 = *(double *)(v10 + 160) + *(double *)(*a2)[5].i64;
  v25 = (uint64_t)&(*a2)[3].i64[1];
  v26 = v25;
  v27 = *(_QWORD *)v25;
  do
  {
    v28 = *(_QWORD *)(v27 + 32);
    if (v28 < v13)
    {
      v27 += 8;
    }
    else if (v28 == v13)
    {
      if (*(_DWORD *)(v27 + 40) < v14)
        v27 += 8;
      else
        v26 = v27;
    }
    else
    {
      v26 = v27;
    }
    v27 = *(_QWORD *)v27;
  }
  while (v27);
  if ((uint64_t *)v26 == v8 || (v29 = *(_QWORD *)(v26 + 32), v13 < v29) || v13 == v29 && *(_DWORD *)(v26 + 40) > v14)
    v30 = 0;
  else
    v30 = *(_QWORD *)(v26 + 48);
  v31 = v14 + 1;
  do
  {
    v32 = *(_QWORD *)(v9 + 32);
    if (v32 < v13)
    {
      v9 += 8;
    }
    else if (v32 == v13)
    {
      if (*(_DWORD *)(v9 + 40) < v31)
        v9 += 8;
      else
        v25 = v9;
    }
    else
    {
      v25 = v9;
    }
    v9 = *(_QWORD *)v9;
  }
  while (v9);
  if ((uint64_t *)v25 == v8)
    return 0;
  v33 = *(_QWORD *)(v25 + 32);
  if (v13 < v33 || v13 == v33 && *(_DWORD *)(v25 + 40) > v31)
    return 0;
  v34 = 0;
  if (v30)
  {
    v36 = *(_QWORD *)(v25 + 48);
    if (v36)
    {
      v219 = *(double *)&v23;
      v220 = (*a2)[108];
      v221 = *(double *)(*a2)[109].i64;
      v37.f64[0] = *(float64_t *)(v30 + 16);
      v38 = *(int64x2_t *)(v30 + 24);
      v39 = *(double *)(v30 + 64);
      _Q5 = *(int64x2_t *)(v30 + 48);
      v41 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v30, v38);
      v42 = (float64x2_t)vdupq_laneq_s64(_Q5, 1);
      v37.f64[1] = *(float64_t *)(v30 + 40);
      v43 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v30, v38);
      v44 = vextq_s8((int8x16_t)v43, (int8x16_t)v42, 8uLL);
      v42.f64[0] = *(float64_t *)(v30 + 88);
      _Q17 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v41, *(double *)(v30 + 72)), v43, *(float64x2_t *)(v30 + 72), 1), v37, v42.f64[0]);
      _D16 = *(_QWORD *)(v30 + 80);
      __asm { FMLA            D18, D16, V5.D[1] }
      v42.f64[0] = _D18 + v39 * v42.f64[0];
      v52 = vnegq_f64(_Q17);
      _Q17.f64[0] = *(float64_t *)(v30 + 48);
      *(_QWORD *)&v43.f64[1] = v44.i64[0];
      v244 = v37;
      v245 = *(unint64_t *)&v39;
      v240 = v41;
      v241 = *(unint64_t *)&_Q17.f64[0];
      v242 = v43;
      v243 = v44.u64[1];
      v246 = v52;
      v247 = *(_OWORD *)&vnegq_f64(v42);
      v248 = 0x3FF0000000000000;
      v37.f64[0] = *(float64_t *)(v36 + 16);
      v53 = *(int64x2_t *)(v36 + 24);
      v54 = *(double *)(v36 + 64);
      _Q6 = *(float64x2_t *)(v36 + 48);
      v56 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v36, v53);
      v57 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v36, v53);
      v37.f64[1] = *(float64_t *)(v36 + 40);
      v58 = vextq_s8((int8x16_t)v57, (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q6, 1), 8uLL);
      v52.f64[0] = *(float64_t *)(v36 + 88);
      v59 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v56, *(double *)(v36 + 72)), v57, *(float64x2_t *)(v36 + 72), 1), v37, v52.f64[0]);
      _Q17.f64[0] = *(float64_t *)(v36 + 80);
      __asm { FMLA            D19, D17, V6.D[1] }
      v52.f64[0] = _D19 + v54 * v52.f64[0];
      v61 = vnegq_f64(v59);
      v59.f64[0] = *(float64_t *)(v36 + 48);
      *(_QWORD *)&v57.f64[1] = v58.i64[0];
      v235 = v37;
      v236 = *(unint64_t *)&v54;
      v231 = v56;
      v232 = *(unint64_t *)&v59.f64[0];
      v233 = v57;
      v234 = v58.u64[1];
      v237 = v61;
      v238 = *(_OWORD *)&vnegq_f64(v52);
      v239 = 0x3FF0000000000000;
      v34 = 1;
      v226 = v5;
      v227 = v16;
      v229 = v15.i64[0];
      v224 = v20;
      v225 = v17;
      v222 = *(double *)&v22;
      v223 = v21.i64[0];
      v205 = v18.i64[0];
      v207 = v19;
      v69 = sub_20F13632C(&v240, &v231, (float64x2_t *)&v249, *(double *)(v30 + 816), *(double *)(v36 + 816), v24, _Q6);
      _D22 = v207;
      _D21 = v222;
      *(_QWORD *)&v81.f64[0] = v223;
      _D20 = v224;
      _D19 = v225;
      *(_QWORD *)&_Q25.f64[0] = v227;
      *(_QWORD *)&v66.f64[0] = v229;
      *(_QWORD *)&_Q18.f64[0] = v226;
      v69.f64[0] = v250;
      v70 = *(double *)&v249.i64[1];
      v71 = v252;
      _V3.D[1] = *(double *)&v251.i64[1];
      v73 = v254;
      _Q28 = (int8x16_t)v253;
      v75 = v256;
      _V5.D[1] = v255.f64[1];
      v77 = *(double *)(v10 + 96);
      *(_QWORD *)&v78.f64[0] = v229;
      *(_QWORD *)&v78.f64[1] = v227;
      _Q7 = *(float64x2_t *)(v10 + 80);
      *(_QWORD *)&v80.f64[0] = v205;
      *(_QWORD *)&v80.f64[1] = v207;
      v81.f64[1] = v222;
      _Q16 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v78, _Q7.f64[0]), v80, _Q7, 1), v81, v77);
      __asm { FMLA            D17, D19, V7.D[1] }
      v84 = _D17 + v224 * v77;
      v218 = (float64x2_t)vzip1q_s64(v249, v251);
      v217 = (float64x2_t)vzip2q_s64(v249, v251);
      _Q17.f64[0] = v250;
      _Q17.f64[1] = v252;
      v216 = _Q17;
      v86 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v218, _Q16.f64[0]), v217, _Q16, 1), _Q17, v84);
      _Q16.f64[0] = _Q16.f64[1];
      __asm { FMLA            D17, D16, V28.D[1] }
      a4[1].f64[0] = _Q17.f64[0] + v254 * v84;
      *a4 = v86;
      v87 = *(uint64_t **)(a1 + 288);
      v88 = *(uint64_t **)(a1 + 296);
      if (v87 != v88)
      {
        *(_QWORD *)&_Q6.f64[0] = v220.i64[0];
        _Q6.f64[1] = v219;
        __asm { FMLS            D17, D25, V6.D[1] }
        _D16 = v221;
        __asm
        {
          FMLS            D17, D18, V16.D[0]
          FMLS            D17, D22, V6.D[1]
          FMLS            D17, D19, V16.D[0]
        }
        _Q7 = vmulq_f64(v81, vnegq_f64(_Q6));
        __asm
        {
          FMLS            D7, D21, V6.D[1]
          FMLS            D7, D20, V16.D[0]
        }
        v210 = _Q7.f64[0];
        v211 = _D17;
        v209 = vextq_s8(_Q28, _Q28, 8uLL).u64[0];
        _Q7.f64[0] = v70;
        __asm { FMLA            D6, D7, V5.D[1] }
        _Q6.f64[0] = _Q6.f64[0] + v75 * v69.f64[0];
        _D16 = _V3.D[1];
        __asm { FMLA            D7, D16, V5.D[1] }
        _Q7.f64[0] = _Q7.f64[0] + v75 * v71;
        _D17 = _Q28.i64[1];
        __asm { FMLA            D16, D17, V5.D[1] }
        _D4 = _D16 + v75 * v73;
        __asm
        {
          FMLA            D10, D7, V3.D[1]
          FMLA            D10, D4, V28.D[1]
        }
        *(_QWORD *)&v66.f64[1] = v205;
        v102 = _Q6.f64[0] * v69.f64[0] + _Q7.f64[0] * v71 + _D4 * v73;
        *(_QWORD *)&_Q25.f64[1] = v207;
        *(_QWORD *)&_Q18.f64[1] = v225;
        v69.f64[0] = a5 * a5;
        v103.f64[0] = a5 * a5;
        v204 = v69;
        v103.f64[1] = a5 * a5;
        v206 = v103;
        v208 = _Q18;
        v228 = _Q25;
        v230 = v66;
        v215 = v73;
        v213 = v80;
        v214 = v78;
        v212 = v81;
        while (1)
        {
          v104 = &(*a2)[3].i64[1];
          v105 = *v104;
          if (!*v104)
            break;
          v106 = *((double *)v87 + 20) + *(double *)(*a2)[5].i64;
          v107 = *v87;
          v108 = *((_DWORD *)v87 + 2);
          v109 = (uint64_t)&(*a2)[3].i64[1];
          v110 = v109;
          v111 = *(_QWORD *)v109;
          do
          {
            v112 = *(_QWORD *)(v111 + 32);
            if (v112 < v107)
            {
              v111 += 8;
            }
            else if (v112 == v107)
            {
              if (*(_DWORD *)(v111 + 40) < v108)
                v111 += 8;
              else
                v110 = v111;
            }
            else
            {
              v110 = v111;
            }
            v111 = *(_QWORD *)v111;
          }
          while (v111);
          if ((uint64_t *)v110 == v104
            || (v113 = *(_QWORD *)(v110 + 32), v107 < v113)
            || v107 == v113 && *(_DWORD *)(v110 + 40) > v108)
          {
            v114 = 0;
          }
          else
          {
            v114 = *(_QWORD *)(v110 + 48);
          }
          v115 = v108 + 1;
          do
          {
            v116 = *(_QWORD *)(v105 + 32);
            if (v116 < v107)
            {
              v105 += 8;
            }
            else if (v116 == v107)
            {
              if (*(_DWORD *)(v105 + 40) < v115)
                v105 += 8;
              else
                v109 = v105;
            }
            else
            {
              v109 = v105;
            }
            v105 = *(_QWORD *)v105;
          }
          while (v105);
          if ((uint64_t *)v109 == v104)
            break;
          v117 = *(_QWORD *)(v109 + 32);
          if (v107 < v117 || v107 == v117 && *(_DWORD *)(v109 + 40) > v115)
            break;
          v34 = 0;
          if (v114)
          {
            v118 = *(_QWORD *)(v109 + 48);
            if (v118)
            {
              v119.f64[0] = *(float64_t *)(v114 + 16);
              v120 = *(int64x2_t *)(v114 + 24);
              v121 = *(double *)(v114 + 64);
              _Q5 = *(int64x2_t *)(v114 + 48);
              v123 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v114, v120);
              v124 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v114, v120);
              v119.f64[1] = *(float64_t *)(v114 + 40);
              v125 = vextq_s8((int8x16_t)v124, (int8x16_t)vdupq_laneq_s64(_Q5, 1), 8uLL);
              _Q7.f64[0] = *(float64_t *)(v114 + 88);
              v126 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v123, *(double *)(v114 + 72)), v124, *(float64x2_t *)(v114 + 72), 1), v119, _Q7.f64[0]);
              _D16 = *(_QWORD *)(v114 + 80);
              __asm { FMLA            D18, D16, V5.D[1] }
              _Q7.f64[0] = _D18 + v121 * _Q7.f64[0];
              _Q16 = vnegq_f64(v126);
              v126.f64[0] = *(float64_t *)(v114 + 48);
              *(_QWORD *)&v124.f64[1] = v125.i64[0];
              v244 = v119;
              v245 = *(unint64_t *)&v121;
              v240 = v123;
              v241 = *(unint64_t *)&v126.f64[0];
              v242 = v124;
              v243 = v125.u64[1];
              v246 = _Q16;
              v247 = *(_OWORD *)&vnegq_f64(_Q7);
              v248 = 0x3FF0000000000000;
              v119.f64[0] = *(float64_t *)(v118 + 16);
              v130 = *(int64x2_t *)(v118 + 24);
              v131 = *(double *)(v118 + 64);
              _Q5 = *(int64x2_t *)(v118 + 48);
              v133 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v118, v130);
              v134 = (float64x2_t)vdupq_laneq_s64(_Q5, 1);
              v135 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v118, v130);
              v119.f64[1] = *(float64_t *)(v118 + 40);
              v136 = vextq_s8((int8x16_t)v135, (int8x16_t)v134, 8uLL);
              v134.f64[0] = *(float64_t *)(v118 + 88);
              v137 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v133, *(double *)(v118 + 72)), v135, *(float64x2_t *)(v118 + 72), 1), v119, v134.f64[0]);
              _Q16.f64[0] = *(float64_t *)(v118 + 80);
              __asm { FMLA            D18, D16, V5.D[1] }
              v134.f64[0] = _D18 + v131 * v134.f64[0];
              _Q16.f64[0] = *(float64_t *)(v118 + 48);
              *(_QWORD *)&v135.f64[1] = v136.i64[0];
              v235 = v119;
              v236 = *(unint64_t *)&v131;
              v231 = v133;
              v232 = *(unint64_t *)&_Q16.f64[0];
              v233 = v135;
              v234 = v136.u64[1];
              v237 = vnegq_f64(v137);
              v238 = *(_OWORD *)&vnegq_f64(v134);
              v239 = 0x3FF0000000000000;
              sub_20F13632C(&v240, &v231, (float64x2_t *)&v249, *(double *)(v114 + 816), *(double *)(v118 + 816), v106, v133);
              v34 = 0;
              _Q6.f64[0] = v250;
              _V4.D[1] = v253.f64[1];
              _Q16 = *(float64x2_t *)(v10 + 80);
              v142 = *(double *)(v10 + 96);
              _Q17 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v214, _Q16.f64[0]), v213, _Q16, 1), v212, v142);
              _D21 = v225;
              _Q20.f64[1] = *((float64_t *)&v226 + 1);
              __asm { FMLA            D20, D21, V16.D[1] }
              _Q20.f64[0] = _Q20.f64[0] + v224 * v142;
              _Q21 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v218, _Q17.f64[0]), v217, _Q17, 1), v216, _Q20.f64[0]);
              _Q6.f64[1] = v252;
              _Q5 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v249, v251), v255.f64[0]), (float64x2_t)vzip2q_s64(v249, v251), v255, 1), _Q6, v256);
              _D7 = v255.f64[1];
              __asm { FMLA            D6, D7, V4.D[1] }
              _Q6.f64[0] = _Q6.f64[0] + v254 * v256;
              _D13 = v211;
              __asm { FMLA            D23, D13, V16.D[1] }
              _Q16.f64[0] = *(double *)(v10 + 104) + _D23 + v210 * v142;
              _D19 = v209;
              __asm { FMLA            D18, D19, V17.D[1] }
              _D18 = _D18 + v215 * _Q20.f64[0];
              __asm { FMLA            D19, D10, V17.D[1] }
              _Q1 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v249, _Q21.f64[0]), (float64x2_t)v251, _Q21, 1), v253, _D18);
              __asm { FMLA            D22, D0, V21.D[1] }
              v157 = _D22 + v254 * _D18;
              _D3 = _Q21.f64[1];
              __asm
              {
                FMLS            D2, D3, V5.D[1]
                FMLS            D2, D18, V6.D[0]
              }
              _Q3 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v230, _Q1.f64[0]), v228, _Q1, 1), v208, v157);
              _Q5.f64[0] = v222;
              __asm { FMLA            D4, D5, V1.D[1] }
              v163.f64[0] = _D4 + v224 * v157;
              _Q6.f64[0] = v219;
              __asm { FMLA            D5, D6, V1.D[1] }
              v164 = _Q16.f64[0] + _D19 + v102 * _Q20.f64[0] + _D2 + _Q5.f64[0] + v221 * v157;
              _D2 = _Q3.f64[1];
              __asm { FMLA            D1, D2, V3.D[1] }
              v163.f64[1] = v164;
              _Q1.f64[0] = 1.0 / sqrt(_Q1.f64[0] + v163.f64[0] * v163.f64[0] + v164 * v164);
              v166 = vmulq_n_f64(v163, _Q1.f64[0]);
              _Q1 = vmulq_n_f64(_Q3, _Q1.f64[0]);
              _Q2 = vmulq_f64(_Q1, _Q1);
              _Q3.f64[0] = _Q1.f64[1];
              __asm { FMLA            D2, D3, V1.D[1] }
              v168 = sqrt(vmlad_n_f64(_Q2.f64[0], v166.f64[0], v166.f64[0]));
              _Q2.f64[0] = 1.0 / v168;
              if (v168 == 0.0)
                _Q2.f64[0] = 1.0;
              v170 = vmulq_f64(v166, _Q2);
              v171 = vmulq_n_f64(_Q1, _Q2.f64[0]);
              v172 = (float64x2_t)vextq_s8((int8x16_t)v171, (int8x16_t)v171, 8uLL);
              if (v168 == 0.0)
                v168 = 1.0;
              _Q16 = *((float64x2_t *)v87 + 2);
              _Q7 = *((float64x2_t *)v87 + 3);
              _D18 = _Q16.f64[1];
              __asm { FMLA            D17, D18, V16.D[1] }
              _D18 = _Q7.f64[1];
              __asm { FMLA            D17, D18, V7.D[1] }
              v179 = 1.0 / sqrt(_D17);
              v180 = vmulq_n_f64(_Q7, v179);
              _Q17 = vmulq_n_f64(_Q16, v179);
              _Q16 = vmulq_f64(_Q17, _Q17);
              _D18 = _Q17.f64[1];
              __asm { FMLA            D16, D18, V17.D[1] }
              _Q16.f64[0] = sqrt(vmlad_n_f64(_Q16.f64[0], v180.f64[0], v180.f64[0]));
              _Q16.f64[0] = _Q16.f64[0] == 0.0 ? 1.0 : 1.0 / _Q16.f64[0];
              v184 = fabs(v171.f64[0]) <= fabs(v171.f64[1]);
              v185.f64[0] = v171.f64[0];
              v185.f64[1] = v172.f64[0];
              v185.f64[0] = sqrt(COERCE_DOUBLE(*(_QWORD *)&vmulq_f64(v185, v185).f64[1]) + v170.f64[0] * v170.f64[0]);
              _Q20.f64[0] = v170.f64[0] / v185.f64[0];
              v186 = -v171.f64[1] / v185.f64[0];
              v187 = sqrt(v171.f64[0] * v171.f64[0] + v170.f64[0] * v170.f64[0]);
              _Q21.f64[0] = -v170.f64[0] / v187;
              v188.f64[0] = v171.f64[0] / v187;
              if (v184)
                _Q21.f64[0] = 0.0;
              else
                _Q20.f64[0] = 0.0;
              v189.f64[0] = v172.f64[0];
              v189.f64[1] = v170.f64[0];
              if (v184)
                v188.f64[0] = v186;
              v190.f64[0] = v188.f64[0];
              v190.f64[1] = _Q21.f64[0];
              v191 = vmulq_f64(v190, v189);
              v192.f64[0] = v170.f64[0];
              v192.f64[1] = v171.f64[0];
              v193.f64[0] = _Q20.f64[0];
              v193.f64[1] = v188.f64[0];
              v194 = vsubq_f64(v191, vmulq_f64(v193, v192));
              v191.f64[0] = v171.f64[0];
              v191.f64[1] = v172.f64[0];
              v195 = vmulq_f64(_Q20, v171);
              v196 = vmulq_f64(_Q21, v172);
              v197 = vmulq_n_f64(_Q17, _Q16.f64[0]);
              _Q20.f64[1] = v194.f64[1];
              _Q21.f64[1] = v194.f64[0];
              *(_QWORD *)&v197.f64[1] = vextq_s8((int8x16_t)v197, (int8x16_t)v197, 8uLL).u64[0];
              v198 = vsubq_f64(v197, v191);
              *(_QWORD *)&v188.f64[1] = *(_OWORD *)&vsubq_f64(v195, v196);
              v199 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q21, v198.f64[0]), _Q20, v198, 1), v188, vsubq_f64(vmulq_f64(v180, _Q16), v170).f64[0]);
              *(_QWORD *)&v195.f64[0] = v87[8];
              *(_QWORD *)&v195.f64[1] = v87[12];
              v200 = vmulq_f64(v199, v199);
              v201 = vmulq_f64(v206, v195);
              if (v200.f64[0] <= v201.f64[0])
              {
                _Q1 = (float64x2_t)vextq_s8((int8x16_t)_Q1, (int8x16_t)_Q1, 8uLL);
                _Q1.f64[0] = _Q1.f64[0] * _Q2.f64[0];
                _Q7 = *(float64x2_t *)(v87 + 17);
                __asm { FMLA            D16, D1, V7.D[1] }
                v166.f64[0] = _D16 + v166.f64[0] * _Q2.f64[0] * *((double *)v87 + 19) + v166.f64[1] / v168;
                *(_QWORD *)&_Q1.f64[0] = v87[16];
                *(int16x4_t *)&v166.f64[0] = vmovn_s32(vuzp1q_s32((int32x4_t)vcgtq_f64(v200, v201), (int32x4_t)vcgtq_f64(vmulq_f64(v166, v166), vmulq_f64(v204, _Q1))));
                if ((BYTE2(v166.f64[0]) & 1) == 0 && (BYTE4(v166.f64[0]) & 1) == 0)
                {
                  v87 += 21;
                  v34 = 1;
                  if (v87 != v88)
                    continue;
                }
              }
            }
          }
          return v34;
        }
        return 0;
      }
    }
  }
  return v34;
}

void sub_20FC6AD98(uint64_t a1, __int128 *a2, double a3)
{
  double *v5;
  double *v6;
  unint64_t v7;
  unint64_t v8;
  double *v9;
  double *v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  unint64_t v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  unint64_t v46;
  char *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t i;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  void *v62;
  double *v63;
  double *v64;
  uint64_t v65;
  double *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  double *v74;
  int64_t v75;
  double v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  v76 = a3;
  v5 = *(double **)a1;
  v6 = *(double **)(a1 + 8);
  if (v6 != *(double **)a1)
  {
    v7 = ((uint64_t)v6 - *(_QWORD *)a1) >> 3;
    v6 = *(double **)a1;
    do
    {
      v8 = v7 >> 1;
      v9 = &v6[v7 >> 1];
      v11 = *v9;
      v10 = v9 + 1;
      v7 += ~(v7 >> 1);
      if (v11 < a3)
        v6 = v10;
      else
        v7 = v8;
    }
    while (v7);
  }
  v12 = (char *)v6 - (char *)v5;
  sub_20F05242C((void **)a1, (_BYTE *)v5 + (((char *)v6 - (char *)v5) & 0xFFFFFFFFFFFFFFF8), (uint64_t *)&v76);
  v13 = v12 >> 3;
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(_QWORD *)(a1 + 32);
  v16 = v14 + 72 * (v12 >> 3);
  v17 = *(_QWORD *)(a1 + 40);
  if (v15 < v17)
  {
    if (v16 == v15)
    {
      *(_OWORD *)v16 = *a2;
      v34 = a2[1];
      v35 = a2[2];
      v36 = a2[3];
      *(_QWORD *)(v16 + 64) = *((_QWORD *)a2 + 8);
      *(_OWORD *)(v16 + 32) = v35;
      *(_OWORD *)(v16 + 48) = v36;
      *(_OWORD *)(v16 + 16) = v34;
      *(_QWORD *)(a1 + 32) = v16 + 72;
      goto LABEL_48;
    }
    v18 = a2[3];
    v79 = a2[2];
    v80 = v18;
    v81 = *((_QWORD *)a2 + 8);
    v19 = a2[1];
    v77 = *a2;
    v78 = v19;
    v20 = v16 + 72;
    v21 = v15 - 72;
    if (v15 < 0x48)
    {
      *(_QWORD *)(a1 + 32) = v15;
      if (v15 == v20)
      {
LABEL_34:
        v44 = v80;
        *(_OWORD *)(v16 + 32) = v79;
        *(_OWORD *)(v16 + 48) = v44;
        *(_QWORD *)(v16 + 64) = v81;
        v45 = v78;
        *(_OWORD *)v16 = v77;
        *(_OWORD *)(v16 + 16) = v45;
        goto LABEL_48;
      }
    }
    else
    {
      v22 = v15 - 72;
      v23 = v15;
      do
      {
        *(_OWORD *)v23 = *(_OWORD *)v22;
        v24 = *(_OWORD *)(v22 + 16);
        v25 = *(_OWORD *)(v22 + 32);
        v26 = *(_OWORD *)(v22 + 48);
        *(_QWORD *)(v23 + 64) = *(_QWORD *)(v22 + 64);
        *(_OWORD *)(v23 + 32) = v25;
        *(_OWORD *)(v23 + 48) = v26;
        *(_OWORD *)(v23 + 16) = v24;
        v22 += 72;
        v23 += 72;
      }
      while (v22 < v15);
      *(_QWORD *)(a1 + 32) = v23;
      if (v15 == v20)
        goto LABEL_34;
    }
    v39 = 8 * ((uint64_t)(v15 - v20) >> 3);
    v40 = v14 + 72 * v13 - 72;
    do
    {
      *(_OWORD *)v21 = *(_OWORD *)(v40 + v39);
      v41 = *(_OWORD *)(v40 + v39 + 16);
      v42 = *(_OWORD *)(v40 + v39 + 32);
      v43 = *(_OWORD *)(v40 + v39 + 48);
      *(_QWORD *)(v21 + 64) = *(_QWORD *)(v40 + v39 + 64);
      *(_OWORD *)(v21 + 32) = v42;
      *(_OWORD *)(v21 + 48) = v43;
      *(_OWORD *)(v21 + 16) = v41;
      v21 -= 72;
      v39 -= 72;
    }
    while (v39);
    goto LABEL_34;
  }
  v27 = 0x8E38E38E38E38E39 * ((uint64_t)(v15 - v14) >> 3) + 1;
  if (v27 > 0x38E38E38E38E38ELL)
    sub_20E867F44();
  v28 = 0x8E38E38E38E38E39 * ((uint64_t)(v17 - v14) >> 3);
  v29 = 2 * v28;
  if (2 * v28 <= v27)
    v29 = v27;
  if (v28 >= 0x1C71C71C71C71C7)
    v30 = 0x38E38E38E38E38ELL;
  else
    v30 = v29;
  if (!v30)
  {
    v31 = 0;
    v32 = 72 * v13;
    v33 = 0;
    if (v32)
      goto LABEL_41;
    goto LABEL_26;
  }
  if (v30 > 0x38E38E38E38E38ELL)
    sub_20E877A38();
  v31 = (char *)operator new(72 * v30);
  v32 = (unint64_t)&v31[72 * v13];
  v33 = &v31[72 * v30];
  if ((char *)v32 == v33)
  {
LABEL_26:
    v37 = 0x8E38E38E38E38E39 * ((uint64_t)(v32 - (_QWORD)v31) >> 3);
    if (v32 <= (unint64_t)v31)
    {
      if ((char *)v32 == v31)
        v46 = 1;
      else
        v46 = 0x1C71C71C71C71C72 * ((uint64_t)(v32 - (_QWORD)v31) >> 3);
      if (v46 > 0x38E38E38E38E38ELL)
        sub_20E877A38();
      v47 = (char *)operator new(72 * v46);
      v32 = (unint64_t)&v47[72 * (v46 >> 2)];
      v33 = &v47[72 * v46];
      if (v31)
        operator delete(v31);
    }
    else
    {
      if (v37 >= -1)
        v38 = v37 + 1;
      else
        v38 = v37 + 2;
      v33 = (char *)v32;
      v32 -= 72 * (v38 >> 1);
    }
  }
LABEL_41:
  *(_OWORD *)v32 = *a2;
  v48 = a2[1];
  v49 = a2[2];
  v50 = a2[3];
  *(_QWORD *)(v32 + 64) = *((_QWORD *)a2 + 8);
  *(_OWORD *)(v32 + 32) = v49;
  *(_OWORD *)(v32 + 48) = v50;
  *(_OWORD *)(v32 + 16) = v48;
  v51 = v32 + 72;
  v52 = *(_QWORD *)(a1 + 24);
  if (v52 == v16)
  {
    v54 = v32;
    i = *(_QWORD *)(a1 + 32);
    if (i == v16)
      goto LABEL_46;
    goto LABEL_45;
  }
  v53 = v16;
  do
  {
    v54 = v32 - 72;
    *(_OWORD *)(v32 - 72) = *(_OWORD *)(v53 - 72);
    v55 = *(_OWORD *)(v53 - 56);
    v56 = *(_OWORD *)(v53 - 40);
    v57 = *(_OWORD *)(v53 - 24);
    *(_QWORD *)(v32 - 8) = *(_QWORD *)(v53 - 8);
    *(_OWORD *)(v32 - 24) = v57;
    *(_OWORD *)(v32 - 40) = v56;
    *(_OWORD *)(v32 - 56) = v55;
    v53 -= 72;
    v32 -= 72;
  }
  while (v53 != v52);
  for (i = *(_QWORD *)(a1 + 32); v16 != i; v51 += 72)
  {
LABEL_45:
    *(_OWORD *)v51 = *(_OWORD *)v16;
    v59 = *(_OWORD *)(v16 + 16);
    v60 = *(_OWORD *)(v16 + 32);
    v61 = *(_OWORD *)(v16 + 48);
    *(_QWORD *)(v51 + 64) = *(_QWORD *)(v16 + 64);
    *(_OWORD *)(v51 + 32) = v60;
    *(_OWORD *)(v51 + 48) = v61;
    *(_OWORD *)(v51 + 16) = v59;
    v16 += 72;
  }
LABEL_46:
  v62 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v54;
  *(_QWORD *)(a1 + 32) = v51;
  *(_QWORD *)(a1 + 40) = v33;
  if (v62)
    operator delete(v62);
LABEL_48:
  v64 = *(double **)a1;
  v63 = *(double **)(a1 + 8);
  if (*(double **)a1 != v63)
  {
    v65 = *(_QWORD *)(a1 + 24);
    v66 = *(double **)a1;
    v67 = v65;
    while (*(v63 - 1) - *v66 >= *(double *)(a1 + 48))
    {
      ++v66;
      v67 += 72;
      if (v66 == v63)
      {
        v66 = *(double **)(a1 + 8);
        break;
      }
    }
    if (v65 != v67)
    {
      v68 = *(_QWORD *)(a1 + 32);
      if (v67 == v68)
      {
        v70 = *(_QWORD *)(a1 + 24);
      }
      else
      {
        v69 = 8 * ((v67 - v65) >> 3);
        v70 = *(_QWORD *)(a1 + 24);
        do
        {
          *(_OWORD *)v65 = *(_OWORD *)(v65 + v69);
          v71 = *(_OWORD *)(v65 + v69 + 16);
          v72 = *(_OWORD *)(v65 + v69 + 32);
          v73 = *(_OWORD *)(v65 + v69 + 48);
          *(_QWORD *)(v65 + 64) = *(_QWORD *)(v65 + v69 + 64);
          *(_OWORD *)(v65 + 32) = v72;
          *(_OWORD *)(v65 + 48) = v73;
          *(_OWORD *)(v65 + 16) = v71;
          v65 += 72;
          v70 += 72;
        }
        while (v65 + v69 != v68);
        v64 = *(double **)a1;
      }
      *(_QWORD *)(a1 + 32) = v70;
    }
    if (v64 != v66)
    {
      v74 = *(double **)(a1 + 8);
      v75 = (char *)v74 - (char *)v66;
      if (v74 != v66)
        memmove(v64, v66, (char *)v74 - (char *)v66);
      *(_QWORD *)(a1 + 8) = (char *)v64 + v75;
    }
  }
}

void sub_20FC6B2B8(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
  {
    operator delete(v1);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FC6B2DC@<X0>(_BYTE *a1@<X0>, unsigned int a2@<W1>, char a3@<W2>, char a4@<W3>, unsigned int a5@<W4>, uint64_t a6@<X8>)
{
  float *v12;
  uint64_t result;
  __int128 v14;
  unsigned __int8 v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  size_t v20;
  void **v21;
  unint64_t v22;
  const void **v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  const char *v29;
  size_t v30;
  unsigned __int8 v31;
  const char *v32;
  size_t v33;
  _BYTE *v34;
  uint64_t v35;
  const char *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  void **v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  size_t v45;
  std::__shared_weak_count_vtbl *v46;
  std::__shared_weak_count *v47;
  size_t v48;
  size_t v49;
  _QWORD *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  char v55;
  _QWORD *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *p_shared_owners;
  unint64_t v60;
  void *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  _QWORD *v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  const char *v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  unsigned int v104;
  char v105;
  unsigned int v106;
  double v107;
  const char *v108;
  const char *v109;
  uint64_t v110;
  _QWORD v111[3];
  int v112;
  const char *v113;
  int v114;
  const char *v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  void *__dst[2];
  int64_t v119;
  void *v120[2];
  _QWORD v121[3];
  _QWORD v122[3];
  uint64_t v123;
  unint64_t v124;
  void *__p;
  char v126;
  unint64_t v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  __int128 v131;
  std::__shared_weak_count *v132;
  char *v133;
  std::__shared_weak_count *v134;
  _QWORD *v135;
  __int128 v136;
  _BYTE v137[24];
  __int128 v138;
  void *v139[2];
  unint64_t v140;
  char v141;
  _QWORD v142[5];

  v142[2] = *MEMORY[0x24BDAC8D0];
  sub_20F49BCEC(a6);
  *(_DWORD *)a6 = 1;
  *(_DWORD *)(a6 + 4) = a2;
  *(_QWORD *)(a6 + 728) = 0;
  v12 = (float *)(a1 + 36);
  if (a2 <= 1)
    v12 = (float *)(a1 + 40);
  *(double *)(a6 + 736) = *v12;
  *(_BYTE *)(a6 + 744) = 0;
  *(_WORD *)(a6 + 1616) = 257;
  result = sub_20E867F58(a6 + 776, (uint64_t)a1);
  *(_BYTE *)(a6 + 1620) = a1[538];
  *(_BYTE *)(a6 + 1618) = a3;
  *(_BYTE *)(a6 + 1619) = a1[539];
  if (a1[536])
    *(_DWORD *)a6 = a2;
  if ((a4 & 1) == 0)
  {
    v14 = *(_OWORD *)(a6 + 1520);
    *(_OWORD *)(a6 + 1464) = *(_OWORD *)(a6 + 1504);
    *(_OWORD *)(a6 + 1480) = v14;
    *(_QWORD *)(a6 + 1496) = *(_QWORD *)(a6 + 1536);
    *(_DWORD *)(a6 + 1392) = *(_DWORD *)(a6 + 1396);
  }
  if (*(_BYTE *)(a6 + 1560))
  {
    if ((byte_254A6C0E0 & 1) != 0 || *(_DWORD *)(a6 + 1392) < 0x12Du)
      goto LABEL_151;
    byte_254A6C0E0 = 1;
    v15 = atomic_load((unsigned __int8 *)&qword_254A6C0F0);
    if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_254A6C0F0))
    {
      sub_21021D3D8(v137);
      sub_20E8610C0(v120, "cv3d.vio");
      sub_20E8C4068((uint64_t **)v137, (uint64_t)v120, &qword_254A6C0E8);
      if (SHIBYTE(v121[0]) < 0)
        operator delete(v120[0]);
      __cxa_guard_release(&qword_254A6C0F0);
    }
    result = qword_254A6C0E8;
    v130 = qword_254A6C0E8;
    if (**(int **)(qword_254A6C0E8 + 56) > 3)
      goto LABEL_151;
    v16 = *(unsigned __int8 *)(qword_254A6C0E8 + 72);
    result = sub_20E8C31DC(qword_254A6C0E8, "OSLogSurrogateAppender", 1, 0);
    v17 = result;
    if (!v16 && !result)
      goto LABEL_151;
    sub_20E863438((uint64_t)v120);
    sub_20E86A980(v121, (uint64_t)"Reducing the ba_config.max_num_optimized_tracks from ", 53);
    v18 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v18, (uint64_t)" to ", 4);
    v19 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v19, (uint64_t)" for LPFG.", 10);
    if ((v128 & 0x10) != 0)
    {
      v22 = v127;
      if (v127 < v124)
      {
        v127 = v124;
        v22 = v124;
      }
      v23 = (const void **)&v123;
    }
    else
    {
      if ((v128 & 8) == 0)
      {
        v20 = 0;
        HIBYTE(v119) = 0;
        v21 = __dst;
        goto LABEL_29;
      }
      v23 = (const void **)v122;
      v22 = v122[2];
    }
    v24 = *v23;
    v20 = v22 - (_QWORD)*v23;
    if (v20 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v20 >= 0x17)
    {
      v25 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v20 | 7) != 0x17)
        v25 = v20 | 7;
      v26 = v25 + 1;
      v21 = (void **)operator new(v25 + 1);
      __dst[1] = (void *)v20;
      v119 = v26 | 0x8000000000000000;
      __dst[0] = v21;
    }
    else
    {
      HIBYTE(v119) = v22 - *(_BYTE *)v23;
      v21 = __dst;
      if (!v20)
      {
LABEL_29:
        *((_BYTE *)v21 + v20) = 0;
        v111[0] = &v130;
        v111[1] = std::chrono::steady_clock::now().__d_.__rep_;
        v111[2] = std::chrono::system_clock::now().__d_.__rep_;
        v112 = 3;
        v113 = "unknown file";
        v114 = 88;
        v116 = 0;
        v117 = 0;
        v115 = "unknown function";
        if (v119 >= 0)
          v27 = (const char *)__dst;
        else
          v27 = (const char *)__dst[0];
        v28 = *(_QWORD *)v111[0];
        v29 = (const char *)(*(_QWORD *)v111[0] + 16);
        v109 = v29;
        if (*(char *)(*(_QWORD *)v111[0] + 39) < 0)
        {
          v29 = *(const char **)(v28 + 16);
          v30 = *(_QWORD *)(v28 + 24);
        }
        else
        {
          v30 = *(unsigned __int8 *)(*(_QWORD *)v111[0] + 39);
        }
        v110 = v17;
        v31 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v31 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)v137);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v137);
          if ((_BYTE)v138 && (v137[23] & 0x80000000) != 0)
            operator delete(*(void **)v137);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        if (byte_254A4A4F8[23] >= 0)
          v32 = byte_254A4A4F8;
        else
          v32 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v33 = byte_254A4A4F8[23];
        else
          v33 = *(_QWORD *)&byte_254A4A4F8[8];
        *(_QWORD *)v137 = os_log_create(v32, v29);
        v34 = &v137[8];
        if (v33 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v33 >= 0x17)
        {
          v108 = v29;
          v35 = v28;
          v36 = v27;
          v37 = v16;
          v38 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v33 | 7) != 0x17)
            v38 = v33 | 7;
          v39 = v38 + 1;
          v34 = operator new(v38 + 1);
          *(_QWORD *)&v137[16] = v33;
          *(_QWORD *)&v138 = v39 | 0x8000000000000000;
          *(_QWORD *)&v137[8] = v34;
          v16 = v37;
          v27 = v36;
          v28 = v35;
          v29 = v108;
        }
        else
        {
          BYTE7(v138) = v33;
          if (!v33)
          {
LABEL_50:
            v34[v33] = 0;
            BYTE8(v138) = 1;
            v40 = v139;
            if (v30 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v30 >= 0x17)
            {
              v42 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v30 | 7) != 0x17)
                v42 = v30 | 7;
              v43 = v42 + 1;
              v40 = (void **)operator new(v42 + 1);
              v139[1] = (void *)v30;
              v140 = v43 | 0x8000000000000000;
              v139[0] = v40;
              v41 = v110;
            }
            else
            {
              HIBYTE(v140) = v30;
              v41 = v110;
              if (!v30)
              {
LABEL_58:
                *((_BYTE *)v40 + v30) = 0;
                v141 = 1;
                v44 = *(NSObject **)v137;
                if (SHIBYTE(v140) < 0)
                  operator delete(v139[0]);
                if (BYTE8(v138) && SBYTE7(v138) < 0)
                  operator delete(*(void **)&v137[8]);
                if (*(_QWORD *)v137)
                  os_release(*(void **)v137);
                if (!v41 || !*(_QWORD *)(v41 + 24))
                {
                  os_log_type_enabled(v44, OS_LOG_TYPE_INFO);
                  *(_DWORD *)v137 = 136315138;
                  *(_QWORD *)&v137[4] = v27;
                  v51 = (void *)_os_log_send_and_compose_impl();
                  if (v51)
                    free(v51);
                  goto LABEL_137;
                }
                v45 = _os_log_pack_size();
                v46 = (std::__shared_weak_count_vtbl *)operator new(v45, (std::align_val_t)8uLL);
                v47 = (std::__shared_weak_count *)operator new();
                v47->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v47->__shared_owners_ = 0;
                v47->__shared_weak_owners_ = 0;
                v47[1].__vftable = v46;
                *(_QWORD *)&v131 = v46;
                *((_QWORD *)&v131 + 1) = v46;
                v133 = 0;
                v134 = 0;
                v132 = v47;
                v48 = strlen(v27);
                if (v48 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                v49 = v48;
                if (v48 >= 0x17)
                {
                  v52 = (v48 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v48 | 7) != 0x17)
                    v52 = v48 | 7;
                  v53 = v52 + 1;
                  v50 = operator new(v52 + 1);
                  *(_QWORD *)&v136 = v49;
                  *((_QWORD *)&v136 + 1) = v53 | 0x8000000000000000;
                  v135 = v50;
                  v41 = v110;
                }
                else
                {
                  HIBYTE(v136) = v48;
                  v50 = &v135;
                  if (!v48)
                  {
LABEL_77:
                    *((_BYTE *)v50 + v49) = 0;
                    v54 = v135;
                    v142[0] = v136;
                    *(_QWORD *)((char *)v142 + 7) = *(_QWORD *)((char *)&v136 + 7);
                    v55 = HIBYTE(v136);
                    v56 = operator new(0x38uLL);
                    v56[1] = 0;
                    v56[2] = 0;
                    v56[3] = off_24C9ABC20;
                    *v56 = &off_24C9ABBD0;
                    v57 = v142[0];
                    v56[4] = v54;
                    v56[5] = v57;
                    *(_QWORD *)((char *)v56 + 47) = *(_QWORD *)((char *)v142 + 7);
                    *((_BYTE *)v56 + 55) = v55;
                    v142[0] = 0;
                    *(_QWORD *)((char *)v142 + 7) = 0;
                    v58 = v134;
                    v133 = (char *)(v56 + 3);
                    v134 = (std::__shared_weak_count *)v56;
                    if (v58)
                    {
                      p_shared_owners = (unint64_t *)&v58->__shared_owners_;
                      do
                        v60 = __ldaxr(p_shared_owners);
                      while (__stlxr(v60 - 1, p_shared_owners));
                      if (!v60)
                      {
                        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                        std::__shared_weak_count::__release_weak(v58);
                      }
                    }
                    *(_OWORD *)v137 = v131;
                    v61 = v133;
                    *(_QWORD *)&v137[16] = v132;
                    if (v132)
                    {
                      v62 = (unint64_t *)&v132->__shared_owners_;
                      do
                        v63 = __ldxr(v62);
                      while (__stxr(v63 + 1, v62));
                    }
                    v64 = v134;
                    *(_QWORD *)&v138 = v61;
                    *((_QWORD *)&v138 + 1) = v134;
                    if (v134)
                    {
                      v65 = (unint64_t *)&v134->__shared_owners_;
                      do
                        v66 = __ldxr(v65);
                      while (__stxr(v66 + 1, v65));
                      v139[0] = v61;
                      do
                        v67 = __ldaxr(v65);
                      while (__stlxr(v67 - 1, v65));
                      if (!v67)
                      {
                        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                        std::__shared_weak_count::__release_weak(v64);
                      }
                    }
                    else
                    {
                      v139[0] = v61;
                    }
                    v68 = v132;
                    if (v132)
                    {
                      v69 = (unint64_t *)&v132->__shared_owners_;
                      do
                        v70 = __ldaxr(v69);
                      while (__stlxr(v70 - 1, v69));
                      if (!v70)
                      {
                        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                        std::__shared_weak_count::__release_weak(v68);
                      }
                    }
                    v71 = *(_QWORD *)v137;
                    if (*((char *)v139[0] + 31) >= 0)
                      v72 = (char *)v139[0] + 8;
                    else
                      v72 = (char *)*((_QWORD *)v139[0] + 1);
                    v73 = _os_log_pack_fill();
                    *(_DWORD *)v73 = 136315138;
                    *(_QWORD *)(v73 + 4) = v72;
                    v74 = operator new();
                    v75 = *(unsigned __int8 *)(v28 + 39);
                    v76 = *(const char **)(v28 + 16);
                    v77 = *(_QWORD *)(v28 + 24);
                    v78 = v138;
                    *(_OWORD *)(v74 + 8) = *(_OWORD *)&v137[8];
                    if ((v75 & 0x80u) != 0)
                      v75 = v77;
                    else
                      v76 = v109;
                    *(_QWORD *)v74 = v71;
                    *(_QWORD *)&v137[8] = 0;
                    *(_QWORD *)&v137[16] = 0;
                    *(_OWORD *)(v74 + 24) = v78;
                    v138 = 0uLL;
                    *(_QWORD *)(v74 + 40) = v76;
                    *(_QWORD *)(v74 + 48) = v75;
                    *(_BYTE *)(v74 + 56) = 1;
                    v135 = 0;
                    *(_QWORD *)&v131 = v74;
                    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v41 + 24) + 40))(*(_QWORD *)(v41 + 24), &v131);
                    v79 = v131;
                    *(_QWORD *)&v131 = 0;
                    if (v79)
                    {
                      v80 = *(std::__shared_weak_count **)(v79 + 32);
                      if (v80)
                      {
                        v81 = (unint64_t *)&v80->__shared_owners_;
                        do
                          v82 = __ldaxr(v81);
                        while (__stlxr(v82 - 1, v81));
                        if (!v82)
                        {
                          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                          std::__shared_weak_count::__release_weak(v80);
                        }
                      }
                      v83 = *(std::__shared_weak_count **)(v79 + 16);
                      if (v83)
                      {
                        v84 = (unint64_t *)&v83->__shared_owners_;
                        do
                          v85 = __ldaxr(v84);
                        while (__stlxr(v85 - 1, v84));
                        if (!v85)
                        {
                          ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
                          std::__shared_weak_count::__release_weak(v83);
                        }
                      }
                      MEMORY[0x212BC6398](v79, 0x10F0C40B62ED6C6);
                      v86 = v135;
                      v135 = 0;
                      if (v86)
                      {
                        v87 = (std::__shared_weak_count *)v86[4];
                        if (v87)
                        {
                          v88 = (unint64_t *)&v87->__shared_owners_;
                          do
                            v89 = __ldaxr(v88);
                          while (__stlxr(v89 - 1, v88));
                          if (!v89)
                          {
                            ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                            std::__shared_weak_count::__release_weak(v87);
                          }
                        }
                        v90 = (std::__shared_weak_count *)v86[2];
                        if (v90)
                        {
                          v91 = (unint64_t *)&v90->__shared_owners_;
                          do
                            v92 = __ldaxr(v91);
                          while (__stlxr(v92 - 1, v91));
                          if (!v92)
                          {
                            ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
                            std::__shared_weak_count::__release_weak(v90);
                          }
                        }
                        MEMORY[0x212BC6398](v86, 0x10F0C40B62ED6C6);
                      }
                    }
                    v93 = (std::__shared_weak_count *)*((_QWORD *)&v138 + 1);
                    if (*((_QWORD *)&v138 + 1))
                    {
                      v94 = (unint64_t *)(*((_QWORD *)&v138 + 1) + 8);
                      do
                        v95 = __ldaxr(v94);
                      while (__stlxr(v95 - 1, v94));
                      if (!v95)
                      {
                        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                        std::__shared_weak_count::__release_weak(v93);
                      }
                    }
                    v96 = *(std::__shared_weak_count **)&v137[16];
                    if (*(_QWORD *)&v137[16])
                    {
                      v97 = (unint64_t *)(*(_QWORD *)&v137[16] + 8);
                      do
                        v98 = __ldaxr(v97);
                      while (__stlxr(v98 - 1, v97));
                      if (!v98)
                      {
                        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
                        std::__shared_weak_count::__release_weak(v96);
                      }
                    }
LABEL_137:
                    if (v16)
                    {
                      v99 = (const char *)__dst;
                      if (v119 < 0)
                        v99 = (const char *)__dst[0];
                      sub_20E8C003C((uint64_t)v111, "%s", v99);
                      sub_20E863570((uint64_t)v111);
                    }
                    sub_20E863570((uint64_t)v111);
                    v100 = v117;
                    if (v117)
                    {
                      v101 = (unint64_t *)&v117->__shared_owners_;
                      do
                        v102 = __ldaxr(v101);
                      while (__stlxr(v102 - 1, v101));
                      if (!v102)
                      {
                        ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
                        std::__shared_weak_count::__release_weak(v100);
                      }
                    }
                    if (SHIBYTE(v119) < 0)
                      operator delete(__dst[0]);
                    v120[0] = *(void **)MEMORY[0x24BEDB7F0];
                    v103 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                    *(void **)((char *)v120 + *((_QWORD *)v120[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
                    v121[0] = v103;
                    v121[1] = MEMORY[0x24BEDB848] + 16;
                    if (v126 < 0)
                      operator delete(__p);
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    result = MEMORY[0x212BC6290](&v129);
LABEL_151:
                    v104 = *(_DWORD *)(a6 + 1392);
                    if (v104 >= 0x12C)
                      v104 = 300;
                    *(_DWORD *)(a6 + 1392) = v104;
                    goto LABEL_154;
                  }
                }
                memcpy(v50, v27, v49);
                goto LABEL_77;
              }
            }
            memmove(v40, v29, v30);
            goto LABEL_58;
          }
        }
        memmove(v34, v32, v33);
        goto LABEL_50;
      }
    }
    memmove(v21, v24, v20);
    goto LABEL_29;
  }
LABEL_154:
  if (a5)
  {
    if (a5 >= 0xA)
      v105 = 10;
    else
      v105 = a5;
    v106 = 1 << v105;
    if (v106 >= *(_DWORD *)(a6 + 1256))
      v106 = *(_DWORD *)(a6 + 1256);
    v107 = (double)v106;
    *(double *)(a6 + 1640) = (double)v106;
    if (*(double *)(a6 + 1648) >= (double)v106)
      v107 = *(double *)(a6 + 1648);
    *(double *)(a6 + 1648) = v107;
  }
  return result;
}

void sub_20FC6BEB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  if (*(_BYTE *)(v36 - 168) && *(char *)(v36 - 169) < 0)
    operator delete(*(void **)(v36 - 192));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a15);
  if (a29 < 0)
    operator delete(__p);
  sub_20E863784((uint64_t)&a30);
  sub_20F6304A4(v35);
  _Unwind_Resume(a1);
}

void sub_20FC6C028(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FC6C04C(uint64_t a1, uint64_t a2, float64x2_t *a3, float64x2_t a4, float64x2_t a5)
{
  float64x2_t v5;
  float64x2_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v15;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v24;
  float64x2_t v28;
  float64x2_t v31;
  double v34;
  unsigned int v35;
  uint64_t v36;
  double v37;
  char v38;
  double v39;
  double v41;
  double v44;
  float64x2_t v45;
  float64x2_t v49;
  float64x2_t v50;
  double v51;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  int v59;
  int v60;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  int v68;
  int v69;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  int v77;
  int v78;
  float64x2_t v80;
  double v81;
  int v84;
  double v85;
  int v86;
  double v87;
  float64x2_t v88;
  double v89;
  double v91;
  double v92;
  double v93;
  double v94;
  float64x2_t v95;
  float64x2_t v96;
  BOOL v97;
  double v98;
  BOOL v100;
  int v101;
  double v102;
  int v103;
  double v104;
  double v105;
  double v106;
  double v107;
  BOOL v108;
  float64x2_t v109;
  double v110;
  BOOL v112;
  int v113;
  double v114;
  int v115;
  double v116;
  float64x2_t v117;
  float64x2_t v118;
  double v119;
  double v120;
  double v124;
  float64x2_t v125;
  unsigned int v126;
  BOOL v127;
  double v128;
  double v129;
  double v130;
  float64x2_t v131;
  double v132;
  float64x2_t v133;
  float64x2_t v134;
  double v135;
  float64x2_t v136;
  uint64_t v137;

  v137 = *MEMORY[0x24BDAC8D0];
  v8 = *(float64x2_t **)(*(_QWORD *)a2 + 24);
  a4.f64[0] = *(float64_t *)(*(_QWORD *)a2 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 24);
  v11 = *(_QWORD *)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 56);
  a5.f64[0] = v8[5].f64[0];
  _Q2 = v8[4];
  *(_QWORD *)&v15 = *(_OWORD *)&vmulq_f64(a4, a5);
  _Q0 = vmulq_n_f64(_Q2, a4.f64[0]);
  _D4 = *(_QWORD *)(v12 + 40);
  __asm { FMLA            D2, D4, V0.D[1] }
  _Q2.f64[0] = vmlad_n_f64(_Q2.f64[0], *(double *)(v12 + 64), v15);
  _D4 = *(_QWORD *)(v10 + 40);
  v21 = *(float64x2_t *)(v10 + 48);
  v5.f64[0] = *(float64_t *)(v12 + 88);
  v22 = vaddq_f64(_Q2, v5);
  _Q3 = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v12, _Q0.f64[0]), *(float64x2_t *)(v12 + 24), _Q0, 1), *(float64x2_t *)(v12 + 48), v15), *(float64x2_t *)(v12 + 72));
  v24 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v10, _Q3.f64[0]), *(float64x2_t *)(v10 + 24), _Q3, 1), v21, v22.f64[0]);
  __asm { FMLA            D0, D4, V3.D[1] }
  _Q0.f64[0] = vmlad_n_f64(_Q0.f64[0], *(double *)(v10 + 64), v22.f64[0]);
  v22.f64[0] = *(float64_t *)(v10 + 88);
  _Q0 = vaddq_f64(v22, _Q0);
  v22.f64[0] = *(float64_t *)(v9 + 16);
  _Q6 = *(float64x2_t *)(v9 + 48);
  v21.f64[0] = *(float64_t *)(v9 + 88);
  *(_QWORD *)&_Q0.f64[0] = *(_OWORD *)&vsubq_f64(_Q0, v21);
  _Q1 = vsubq_f64(vaddq_f64(*(float64x2_t *)(v10 + 72), v24), *(float64x2_t *)(v9 + 72));
  v22.f64[1] = *(float64_t *)(v9 + 40);
  v28 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v9, *(int64x2_t *)(v9 + 24)), _Q1.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)v9, *(int64x2_t *)(v9 + 24)), _Q1, 1), v22, _Q0.f64[0]);
  _Q2 = vmulq_f64(_Q6, _Q1);
  _Q1.f64[0] = _Q1.f64[1];
  __asm { FMLA            D2, D1, V6.D[1] }
  _Q2.f64[0] = vmlad_n_f64(_Q2.f64[0], *(double *)(v9 + 64), _Q0.f64[0]);
  _Q0.f64[0] = *(float64_t *)(v11 + 16);
  _Q5 = *(_OWORD *)(v11 + 48);
  _Q6.f64[0] = *(float64_t *)(v11 + 88);
  *(_QWORD *)&_Q2.f64[0] = *(_OWORD *)&vsubq_f64(_Q2, _Q6);
  v31 = vsubq_f64(v28, *(float64x2_t *)(v11 + 72));
  _Q0.f64[1] = *(float64_t *)(v11 + 40);
  _Q18 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v11, *(int64x2_t *)(v11 + 24)), v31.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)v11, *(int64x2_t *)(v11 + 24)), v31, 1), _Q0, _Q2.f64[0]);
  _Q0.f64[0] = v31.f64[1];
  __asm { FMLA            D17, D0, V5.D[1] }
  v34 = vmlad_n_f64(_D17, *(double *)(v11 + 64), _Q2.f64[0]);
  v134 = _Q18;
  v135 = v34;
  v35 = *(_DWORD *)(v13 + 992);
  if (v35 != -1)
  {
    v36 = *(_QWORD *)&v34;
    if (v35 <= 7)
      goto LABEL_3;
LABEL_10:
    if (v35 > 0xB)
    {
      if (v35 <= 0xD)
      {
        if (v35 != 13 || v34 < 0.00000001)
          return 0;
        _Q0 = vdivq_f64(_Q18, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v34, 0));
        v41 = (*(double *)v13 + *(double *)(v13 + 32)) * 0.5;
        _D3 = _Q0.f64[1];
        __asm { FMLA            D2, D3, V0.D[1] }
        v44 = v41 * (_D2 * v41);
        v45 = vdivq_f64(_Q0, (float64x2_t)vdupq_lane_s64(COERCE__INT64(v44* (*(double *)(v13 + 168)+ v41 * *(double *)(v13 + 224)+ v44* (*(double *)(v13 + 176)+ v41 * *(double *)(v13 + 232)+ v44* (*(double *)(v13 + 184)+ v41 * *(double *)(v13 + 240)+ v44* (*(double *)(v13 + 192)+ v41 * *(double *)(v13 + 248)+ v44* (*(double *)(v13 + 200)+ v41 * *(double *)(v13 + 256)+ v44
                                    * (*(double *)(v13 + 208)
                                     + v41 * *(double *)(v13 + 264)
                                     + v44 * (*(double *)(v13 + 216) + *(double *)(v13 + 272) * v41 + v44 * 0.0)))))))
                               / 100.0
                               + 1.0),
                               0));
LABEL_148:
        v136 = v45;
LABEL_149:
        v126 = *(_DWORD *)(v13 + 992);
        if (v126 == -1)
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v126 = *(_DWORD *)(v13 + 992);
          if (v126 <= 7)
            goto LABEL_151;
        }
        else if (v126 <= 7)
        {
LABEL_151:
          if (v126 <= 3)
          {
            if (v126 <= 1)
            {
              if (!v126)
              {
                sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
                abort();
              }
              goto LABEL_159;
            }
            v49 = v136;
            if (v126 == 2)
              goto LABEL_165;
LABEL_166:
            v120 = v49.f64[1];
            v130 = *(double *)v13 * v49.f64[0] + vmuld_lane_f64(*(double *)(v13 + 8), v49, 1);
            goto LABEL_169;
          }
          v127 = v126 == 5;
          if (v126 > 5)
          {
LABEL_159:
            v128 = *(double *)(v13 + 8);
            v120 = v136.f64[1];
            v129 = *(double *)v13 * v136.f64[0];
LABEL_168:
            v130 = v129 + v128 * v120;
            goto LABEL_169;
          }
          goto LABEL_161;
        }
        if (v126 > 0xB)
          goto LABEL_159;
        v127 = v126 == 9;
        if (v126 > 9)
          goto LABEL_159;
LABEL_161:
        v119 = *(double *)v13;
        v118.f64[0] = v136.f64[0];
        if (v127)
        {
          v129 = v119 * v136.f64[0];
          v128 = *(double *)(v13 + 8);
          v120 = v136.f64[1];
          goto LABEL_168;
        }
        v120 = v136.f64[1];
LABEL_167:
        v129 = v119 * v118.f64[0];
        v128 = *(double *)(v13 + 8);
        goto LABEL_168;
      }
      if (v35 == 14)
        v38 = sub_20EB247C0(&v136, (uint64_t)&v134, (double *)(v13 + 168), (*(double *)v13 + *(double *)(v13 + 32)) * 0.5);
      else
        v38 = sub_20EB3E39C(v13, &v136, &v134);
    }
    else if (v35 > 9)
    {
      if (v35 == 10)
        v38 = sub_20EB24288(&v136, (uint64_t)&v134, (double *)(v13 + 168), (*(double *)v13 + *(double *)(v13 + 32)) * 0.5);
      else
        v38 = sub_20EB3A2E4(v13, &v136, &v134);
    }
    else
    {
      if (v35 != 9)
      {
        _D0 = _Q18.f64[1];
        __asm { FMLA            D4, D0, V18.D[1] }
        v54 = sqrt(_D4);
        v55 = fabs(v34);
        v56 = fabs(v54);
        v57 = v55 / v56;
        if (v55 >= v56)
          v57 = v56 / v55;
        if (v57 <= 0.414213562)
        {
          v59 = 1;
          v60 = 2;
          v58 = v57;
          if (_D4 < 0.00000001)
            goto LABEL_111;
        }
        else
        {
          v58 = (v56 - v55) / (v55 + v56);
          if (v55 >= v56)
            v58 = -v58;
          v59 = -1;
          v60 = 1;
          if (_D4 < 0.00000001)
            goto LABEL_111;
        }
        if (v55 < v56)
          v59 = -v59;
        else
          v60 = v57 > 0.414213562;
        v95 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v58 * v58), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v58 * v58), (float64x2_t)xmmword_210315370), v58 * v58 * (v58 * v58))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v58 * v58), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v58 * v58), (float64x2_t)xmmword_210315380), v58 * v58 * (v58 * v58))), v58 * v58 * (v58 * v58) * (v58 * v58 * (v58 * v58))));
        v96 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v95, 1);
        v97 = v54 == INFINITY && v55 == INFINITY;
        v98 = v58 + v58 * vdivq_f64(v95, v96).f64[0];
        if (v97)
          v98 = 0.785398163;
        if (v54 == 0.0 && v34 == 0.0)
          v98 = 0.0;
        v100 = v36 < 0;
        if (v36 >= 0)
          v101 = v60;
        else
          v101 = 4 - v60;
        if (v100)
          v59 = -v59;
        if (v54 < 0.0)
          v101 = -v101;
        v102 = (double)v101;
        if (v54 >= 0.0)
          v103 = v59;
        else
          v103 = -v59;
        v104 = v102 * 3.061617e-17 + v102 * 0.785398163 + v98 * (double)v103;
        v105 = v104
             * (v104
              * v104
              * (*(double *)(v13 + 168)
               + v104
               * v104
               * (*(double *)(v13 + 176)
                + v104
                * v104
                * (*(double *)(v13 + 184)
                 + v104
                 * v104
                 * (*(double *)(v13 + 192)
                  + v104
                  * v104
                  * (*(double *)(v13 + 200)
                   + v104 * v104 * (*(double *)(v13 + 208) + v104 * v104 * *(double *)(v13 + 216)))))))
              + 1.0);
        v106 = 1.0 / v54;
        goto LABEL_139;
      }
      v38 = sub_20EB3641C(v13, &v136, &v134);
    }
LABEL_80:
    if ((v38 & 1) != 0)
      goto LABEL_149;
    return 0;
  }
  v132 = v34;
  v133 = _Q18;
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v35 = *(_DWORD *)(v13 + 992);
  v34 = v132;
  _Q18 = v133;
  v36 = *(_QWORD *)&v132;
  if (v35 > 7)
    goto LABEL_10;
LABEL_3:
  if (v35 > 3)
  {
    if (v35 <= 5)
    {
      if (v35 == 5)
      {
        v39 = vaddvq_f64(vmulq_f64(_Q18, _Q18));
        if (v39 >= 0.00000001)
        {
          v91 = sqrt(v39);
          if (v91 <= v34)
          {
            v124 = v91 / v34 * 0.785398163 - v91 / v34 * (v91 / v34 + -1.0) * (v91 / v34 * 0.0663008339 + 0.244711287);
          }
          else
          {
            if (v91 <= -v34)
            {
              v93 = v91 / v34 * 0.785398163 - v91 / v34 * (-1.0 - v91 / v34) * (v91 / v34 * -0.0663008339 + 0.244711287);
              v94 = 3.14159265;
            }
            else
            {
              v92 = fabs(v34 / v91);
              v93 = v34 / v91 * (v92 + -1.0) * (v92 * 0.0663008339 + 0.244711287) + v34 / v91 * -0.785398163;
              v94 = 1.57079633;
            }
            v124 = v93 + v94;
          }
          v125 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v13 + 168), *(int64x2_t *)(v13 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v13 + 168), *(int64x2_t *)(v13 + 184)), v124 * v124)), v124 * v124);
          v37 = (v124 + v124 * (v125.f64[0] + vmuld_lane_f64(v124 * v124 * (v124 * v124), v125, 1))) / v91;
          goto LABEL_147;
        }
        if (v34 != 0.0)
        {
LABEL_7:
          v37 = 1.0 / v34;
LABEL_147:
          v45 = vmulq_n_f64(_Q18, v37);
          goto LABEL_148;
        }
        return 0;
      }
      _D0 = _Q18.f64[1];
      __asm { FMLA            D4, D0, V18.D[1] }
      v63 = sqrt(_D4);
      v64 = fabs(v34);
      v65 = fabs(v63);
      v66 = v64 / v65;
      if (v64 >= v65)
        v66 = v65 / v64;
      if (v66 <= 0.414213562)
      {
        v68 = 1;
        v69 = 2;
        v67 = v66;
        if (_D4 >= 0.00000001)
        {
LABEL_115:
          if (v64 < v65)
            v68 = -v68;
          else
            v69 = v66 > 0.414213562;
          v108 = v63 == INFINITY && v64 == INFINITY;
          v109 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v67 * v67), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v67 * v67), (float64x2_t)xmmword_210315370), v67 * v67 * (v67 * v67))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v67 * v67), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v67 * v67), (float64x2_t)xmmword_210315380), v67 * v67 * (v67 * v67))), v67 * v67 * (v67 * v67) * (v67 * v67 * (v67 * v67))));
          v110 = v67 + v67 * vdivq_f64(v109, (float64x2_t)vdupq_laneq_s64((int64x2_t)v109, 1)).f64[0];
          if (v108)
            v110 = 0.785398163;
          if (v63 == 0.0 && v34 == 0.0)
            v110 = 0.0;
          v112 = v36 < 0;
          if (v36 >= 0)
            v113 = v69;
          else
            v113 = 4 - v69;
          if (v112)
            v68 = -v68;
          if (v63 < 0.0)
            v113 = -v113;
          v114 = (double)v113;
          if (v63 >= 0.0)
            v115 = v68;
          else
            v115 = -v68;
          v116 = v114 * 3.061617e-17 + v114 * 0.785398163 + v110 * (double)v115;
          v117 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v13 + 168), *(int64x2_t *)(v13 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v13 + 168), *(int64x2_t *)(v13 + 184)), v116 * v116)), v116 * v116);
          v105 = v116 + v116 * (v117.f64[0] + vmuld_lane_f64(v116 * v116 * (v116 * v116), v117, 1));
          v106 = 1.0 / v63;
LABEL_139:
          v107 = v106 * v105;
          goto LABEL_140;
        }
      }
      else
      {
        v67 = (v65 - v64) / (v64 + v65);
        if (v64 >= v65)
          v67 = -v67;
        v68 = -1;
        v69 = 1;
        if (_D4 >= 0.00000001)
          goto LABEL_115;
      }
LABEL_111:
      v107 = 1.0 / v34;
LABEL_140:
      v118 = vmulq_n_f64(_Q18, v107);
      v119 = *(double *)v13;
      v120 = v118.f64[1];
      goto LABEL_167;
    }
    if (v35 == 6)
    {
      v50 = vaddq_f64(vdivq_f64(_Q18, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v34, 0)), *(float64x2_t *)(v13 + 192));
      v51 = sqrt(vaddvq_f64(vmulq_f64(v50, v50)));
      v45 = vaddq_f64(*(float64x2_t *)(v13 + 208), vmulq_n_f64(v50, v51 * (v51 * (*(double *)(v13 + 168) + v51 * (*(double *)(v13 + 176) + *(double *)(v13 + 184) * v51)))+ 1.0));
      goto LABEL_148;
    }
    v38 = sub_20EB31FFC(v13, &v136, &v134);
    goto LABEL_80;
  }
  if (v35 <= 1)
  {
    if (!v35)
    {
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    if (v34 >= 0.00000001)
      goto LABEL_7;
    return 0;
  }
  if (v35 != 2)
  {
    _D0 = _Q18.f64[1];
    __asm { FMLA            D4, D0, V18.D[1] }
    v72 = sqrt(_D4);
    v73 = fabs(v34);
    v74 = fabs(v72);
    v75 = v73 / v74;
    if (v73 >= v74)
      v75 = v74 / v73;
    if (v75 <= 0.414213562)
    {
      v77 = 1;
      v78 = 2;
      v76 = v75;
      if (_D4 >= 0.00000001)
      {
LABEL_53:
        if (v73 < v74)
          v77 = -v77;
        else
          v78 = v75 > 0.414213562;
        _ZF = v72 == INFINITY && v73 == INFINITY;
        v80 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v76 * v76), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v76 * v76), (float64x2_t)xmmword_210315370), v76 * v76 * (v76 * v76))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v76 * v76), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v76 * v76), (float64x2_t)xmmword_210315380), v76 * v76 * (v76 * v76))), v76 * v76 * (v76 * v76) * (v76 * v76 * (v76 * v76))));
        v81 = v76 + v76 * vdivq_f64(v80, (float64x2_t)vdupq_laneq_s64((int64x2_t)v80, 1)).f64[0];
        if (_ZF)
          v81 = 0.785398163;
        if (v72 == 0.0 && v34 == 0.0)
          v81 = 0.0;
        _NF = v36 < 0;
        if (v36 >= 0)
          v84 = v78;
        else
          v84 = 4 - v78;
        if (_NF)
          v77 = -v77;
        if (v72 < 0.0)
          v84 = -v84;
        v85 = (double)v84;
        if (v72 >= 0.0)
          v86 = v77;
        else
          v86 = -v77;
        v87 = v85 * 3.061617e-17 + v85 * 0.785398163 + v81 * (double)v86;
        v88 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v13 + 168), *(int64x2_t *)(v13 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v13 + 168), *(int64x2_t *)(v13 + 184)), v87 * v87)), v87 * v87);
        v89 = 1.0 / v72 * (v87 + v87 * (v88.f64[0] + vmuld_lane_f64(v87 * v87 * (v87 * v87), v88, 1)));
        goto LABEL_114;
      }
    }
    else
    {
      v76 = (v74 - v73) / (v73 + v74);
      if (v73 >= v74)
        v76 = -v76;
      v77 = -1;
      v78 = 1;
      if (_D4 >= 0.00000001)
        goto LABEL_53;
    }
    v89 = 1.0 / v34;
LABEL_114:
    v49 = vmulq_n_f64(_Q18, v89);
    goto LABEL_166;
  }
  if (*(_DWORD *)(v13 + 212))
  {
    if (v34 < 0.00000001)
      return 0;
    _Q2 = vmulq_n_f64(_Q18, 1.0 / v34);
    _D1 = vmuld_lane_f64(1.0 / v34, _Q18, 1);
    __asm { FMLA            D3, D1, V2.D[1] }
    v49 = vaddq_f64(vaddq_f64(vmulq_f64(vaddq_f64((float64x2_t)vdupq_lane_s64(_D3, 0), vmulq_f64(_Q2, vaddq_f64(_Q2, _Q2))), (float64x2_t)vextq_s8(*(int8x16_t *)(v13 + 192), *(int8x16_t *)(v13 + 192), 8uLL)), vmulq_laneq_f64(vmulq_n_f64(vaddq_f64(*(float64x2_t *)(v13 + 192), *(float64x2_t *)(v13 + 192)), _Q2.f64[0]), _Q2, 1)), vmulq_n_f64(_Q2, *(double *)(v13 + 168) * *(double *)&_D3+ 1.0+ *(double *)&_D3 * (*(double *)(v13 + 176) * *(double *)&_D3)+ *(double *)&_D3 * (*(double *)&_D3 * (*(double *)(v13 + 184) * *(double *)&_D3))));
  }
  else
  {
    if (v34 < 0.00000001)
      return 0;
    _Q2 = vmulq_n_f64(_Q18, 1.0 / v34);
    _D1 = vmuld_lane_f64(1.0 / v34, _Q18, 1);
    __asm { FMLA            D3, D1, V2.D[1] }
    v49 = vmulq_n_f64(_Q2, *(double *)(v13 + 168) * _D3 + 1.0 + _D3 * _D3 * (*(double *)(v13 + 176) + *(double *)(v13 + 184) * _D3));
  }
LABEL_165:
  v130 = vaddvq_f64(vmulq_f64(*(float64x2_t *)v13, v49));
  v120 = v49.f64[1];
LABEL_169:
  v131.f64[0] = v130 + *(double *)(v13 + 16);
  v131.f64[1] = v120 * *(double *)(v13 + 32) + *(double *)(v13 + 40);
  *a3 = vsubq_f64(v131, *(float64x2_t *)(a1 + 8));
  return 1;
}

uint64_t sub_20FC6CE8C(uint64_t a1, uint64_t *a2, float64x2_t *a3, float64x2_t *a4, float64x2_t a5, float64x2_t a6, double a7, float64x2_t _Q3)
{
  uint64_t v11;
  float64x2_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  float64x2_t v20;
  float64x2_t v25;
  float64x2_t v27;
  float64x2_t v28;
  double v29;
  float64x2_t v31;
  float64x2_t v33;
  float64x2_t v37;
  double v39;
  unsigned int v40;
  int v41;
  char v42;
  float64x2_t v46;
  double v49;
  double v51;
  double v52;
  double v53;
  double v56;
  double v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  double v68;
  double v69;
  double v72;
  double v73;
  long double v74;
  int64x2_t v75;
  int64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  double v80;
  double v81;
  float64x2_t v82;
  double v83;
  double v86;
  double v87;
  float64x2_t v88;
  unint64_t v89;
  long double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  float64x2_t v100;
  float64x2_t v101;
  double v102;
  float64_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  double v107;
  int8x16_t v108;
  double v109;
  int8x16_t v110;
  int64x2_t v118;
  float64x2_t v119;
  double v122;
  float64x2_t v123;
  float64x2_t v125;
  float64x2_t v127;
  float64x2_t v130;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  double v145;
  double v147;
  double v148;
  double v149;
  double v152;
  double v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  double v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  double v173;
  double v174;
  double v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  double v183;
  double v184;
  double v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  double v189;
  double v190;
  double v191;
  float64x2_t v192;
  double v193;
  float64x2_t v194;
  double v195;
  float64x2_t v196;
  double v197;
  float64x2_t v198;
  double v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  uint64_t v204;

  v204 = *MEMORY[0x24BDAC8D0];
  v11 = *a2;
  v12 = *(float64x2_t **)(*a2 + 24);
  a5.f64[0] = *(float64_t *)(*a2 + 32);
  v14 = *(_QWORD *)(a1 + 40);
  v13 = *(_QWORD *)(a1 + 48);
  v16 = *(_QWORD *)(a1 + 24);
  v15 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 56);
  a6.f64[0] = v12[5].f64[0];
  v193 = a6.f64[0];
  *(_QWORD *)&v18 = *(_OWORD *)&vmulq_f64(a5, a6);
  v192 = v12[4];
  _Q0 = vmulq_n_f64(v192, a5.f64[0]);
  v186 = *(float64x2_t *)v16;
  v187 = *(float64x2_t *)(v16 + 24);
  v188 = *(float64x2_t *)(v16 + 48);
  v189 = *(double *)(v16 + 64);
  v20 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v16, _Q0.f64[0]), v187, _Q0, 1), v188, v18);
  v190 = *(double *)(v16 + 40);
  v191 = *(double *)(v16 + 16);
  __asm { FMLA            D3, D4, V0.D[1] }
  _Q3.f64[0] = vmlad_n_f64(_Q3.f64[0], v189, v18);
  _Q0.f64[0] = *(float64_t *)(v16 + 88);
  v25 = vaddq_f64(_Q3, _Q0);
  _Q1 = vaddq_f64(v20, *(float64x2_t *)(v16 + 72));
  v180 = *(float64x2_t *)v14;
  v181 = *(float64x2_t *)(v14 + 24);
  v182 = *(float64x2_t *)(v14 + 48);
  v183 = *(double *)(v14 + 64);
  v27 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v14, _Q1.f64[0]), v181, _Q1, 1), v182, v25.f64[0]);
  v184 = *(double *)(v14 + 40);
  v185 = *(double *)(v14 + 16);
  __asm { FMLA            D3, D5, V1.D[1] }
  _Q3.f64[0] = vmlad_n_f64(_Q3.f64[0], v183, v25.f64[0]);
  v25.f64[0] = *(float64_t *)(v14 + 88);
  v28 = vaddq_f64(*(float64x2_t *)(v14 + 72), v27);
  v29 = *(double *)(v13 + 64);
  _Q6 = *(float64x2_t *)(v13 + 48);
  v27.f64[0] = *(float64_t *)(v13 + 88);
  v31 = vsubq_f64(vaddq_f64(v25, _Q3), v27);
  _Q1 = vsubq_f64(v28, *(float64x2_t *)(v13 + 72));
  v176 = *(float64x2_t *)(v13 + 24);
  v177 = *(float64x2_t *)v13;
  v179 = *(double *)(v13 + 40);
  v33.f64[0] = *(float64_t *)(v13 + 16);
  v33.f64[1] = v179;
  _Q2 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v13, (int64x2_t)v176), _Q1.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)v13, (int64x2_t)v176), _Q1, 1), v33, v31.f64[0]);
  _Q3 = vmulq_f64(_Q6, _Q1);
  _Q1.f64[0] = _Q1.f64[1];
  v178 = _Q6;
  __asm { FMLA            D3, D1, V6.D[1] }
  _Q3.f64[0] = vmlad_n_f64(_Q3.f64[0], v29, v31.f64[0]);
  _Q7 = *(float64x2_t *)(v15 + 48);
  v31.f64[0] = *(float64_t *)(v15 + 88);
  *(_QWORD *)&v31.f64[0] = *(_OWORD *)&vsubq_f64(_Q3, v31);
  v37 = vsubq_f64(_Q2, *(float64x2_t *)(v15 + 72));
  v170 = *(float64x2_t *)v15;
  v171 = *(float64x2_t *)(v15 + 24);
  v174 = *(double *)(v15 + 40);
  v175 = *(double *)(v15 + 16);
  _Q2.f64[0] = v175;
  _Q2.f64[1] = v174;
  _Q18 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v15, (int64x2_t)v171), v37.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)v15, (int64x2_t)v171), v37, 1), _Q2, v31.f64[0]);
  _Q2.f64[0] = v37.f64[1];
  v172 = _Q7;
  v173 = *(double *)(v15 + 64);
  __asm { FMLA            D1, D2, V7.D[1] }
  v39 = vmlad_n_f64(_Q1.f64[0], v173, v31.f64[0]);
  v194 = _Q18;
  v195 = v39;
  v40 = *(_DWORD *)(v17 + 992);
  if (v40 != -1)
  {
    if (v40 <= 7)
      goto LABEL_3;
LABEL_11:
    if (v40 > 0xB)
    {
      if (v40 <= 0xD)
      {
        if (v40 == 13 && v39 >= 0.00000001)
        {
          v203 = vdivq_f64(_Q18, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v39, 0));
          if (sub_20EB295B8(&v200, &v201, 0, (uint64_t)&v203, (double *)(v17 + 168), (*(double *)v17 + *(double *)(v17 + 32)) * 0.5))
          {
            _D0 = -v194.f64[1] / (v195 * v195);
            _V3.D[1] = v201.f64[1];
            _V4.D[1] = v202.f64[1];
            v46.f64[0] = 0.0;
            v46.f64[1] = 1.0 / v195;
            __asm { FMLA            D7, D0, V3.D[1] }
            v197 = _D7;
            v196 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)COERCE_UNSIGNED_INT64(1.0 / v195), v201.f64[0]), v46, v201, 1);
            __asm { FMLA            D2, D0, V4.D[1] }
            v199 = _D2;
            v198 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)COERCE_UNSIGNED_INT64(1.0 / v195), v202.f64[0]), v46, v202, 1);
            v41 = *(_DWORD *)(v17 + 992);
            if (v41 == -1)
              goto LABEL_52;
            goto LABEL_54;
          }
        }
        return 0;
      }
      if (v40 == 14)
        v42 = sub_20EB2498C(&v200, (uint64_t)&v196, 0, (uint64_t)&v194, (double *)(v17 + 168), (*(double *)v17 + *(double *)(v17 + 32)) * 0.5);
      else
        v42 = sub_20EB3F050(v17, &v200, (uint64_t)&v196, &v194, 0);
    }
    else if (v40 > 9)
    {
      if (v40 == 10)
        v42 = sub_20EB2450C(&v200, (uint64_t)&v196, 0, (uint64_t)&v194, (double *)(v17 + 168), (*(double *)v17 + *(double *)(v17 + 32)) * 0.5);
      else
        v42 = sub_20EB3AF98(v17, &v200, (uint64_t)&v196, &v194, 0);
    }
    else
    {
      if (v40 != 9)
      {
        *(_QWORD *)&v69 = vextq_s8((int8x16_t)_Q18, (int8x16_t)_Q18, 8uLL).u64[0];
        _D0 = _Q18.f64[1];
        __asm { FMLA            D2, D0, V18.D[1] }
        if (_D2 >= 0.00000001)
        {
          v72 = v39 * v39 + _D2;
          v73 = sqrt(_D2);
          v165 = v39;
          v169 = _Q18;
          v160 = _D2;
          v162 = v69;
          v91 = atan2(v73, v39);
          v92 = *(double *)(v17 + 168);
          v93 = *(double *)(v17 + 176);
          v94 = *(double *)(v17 + 184);
          v95 = *(double *)(v17 + 192);
          v96 = *(double *)(v17 + 200);
          v97 = *(double *)(v17 + 208);
          v98 = *(double *)(v17 + 216);
          _Q18 = v169;
          v81 = v91
              * v91
              * (v92 * 3.0
               + v91
               * v91
               * (v93 * 5.0
                + v91
                * v91
                * (v94 * 7.0
                 + v91
                 * v91
                 * (v95 * 9.0 + v91 * v91 * (v96 * 11.0 + v91 * v91 * (v97 * 13.0 + v91 * v91 * 15.0 * v98))))))
              + 1.0;
          v69 = v162;
          v83 = v91
              * (v91
               * v91
               * (v92
                + v91
                * v91
                * (v93 + v91 * v91 * (v94 + v91 * v91 * (v95 + v91 * v91 * (v96 + v91 * v91 * (v97 + v91 * v91 * v98))))))
               + 1.0);
          goto LABEL_49;
        }
LABEL_42:
        v86 = 1.0 / v39;
        v87 = -(v86 * v86);
        v88.f64[0] = 0.0;
        v89 = 0;
LABEL_50:
        v200 = vmulq_n_f64(_Q18, v86);
        *(_QWORD *)&v88.f64[1] = v89;
        v100 = vmulq_n_f64(v88, _Q18.f64[0]);
        v101 = vmulq_laneq_f64(v88, _Q18, 1);
        v196.f64[1] = v100.f64[1];
        v198.f64[0] = v101.f64[0];
        v197 = v87 * _Q18.f64[0];
        v196.f64[0] = v86 + v100.f64[0];
        v198.f64[1] = v86 + v101.f64[1];
        v199 = v87 * v69;
        goto LABEL_51;
      }
      v42 = sub_20EB372E0(v17, &v200, (uint64_t)&v196, &v194, 0);
    }
    goto LABEL_46;
  }
  v163 = v39;
  v166 = _Q18;
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v40 = *(_DWORD *)(v17 + 992);
  v39 = v163;
  _Q18 = v166;
  if (v40 > 7)
    goto LABEL_11;
LABEL_3:
  if (v40 <= 3)
  {
    if (v40 <= 1)
    {
      if (!v40)
      {
        sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
        abort();
      }
      if (v39 >= 0.00000001)
      {
        v200 = vmulq_n_f64(_Q18, 1.0 / v39);
        v196.f64[0] = 1.0 / v39;
        v198.f64[0] = 0.0;
        v196.f64[1] = 0.0;
        v197 = v196.f64[0] * -(_Q18.f64[0] * v196.f64[0]);
        v198.f64[1] = 1.0 / v39;
        v199 = v196.f64[0] * -(_Q18.f64[1] * v196.f64[0]);
        v41 = *(_DWORD *)(v17 + 992);
        if (v41 == -1)
          goto LABEL_52;
        goto LABEL_54;
      }
      return 0;
    }
    if (v40 == 2)
    {
      if (*(_DWORD *)(v17 + 212))
      {
        if (v39 >= 0.00000001)
        {
          v49 = 1.0 / v39;
          _Q0 = vmulq_n_f64(_Q18, v49);
          v51 = *(double *)(v17 + 168);
          v52 = *(double *)(v17 + 176);
          v53 = *(double *)(v17 + 184);
          _D6 = vmuld_lane_f64(v49, _Q18, 1);
          __asm { FMLA            D7, D6, V0.D[1] }
          v56 = v51 * *(double *)&_D7 + 1.0 + *(double *)&_D7 * *(double *)&_D7 * (v52 + v53 * *(double *)&_D7);
          v57 = v51 + v51 + *(double *)&_D7 * (v52 * 4.0 + *(double *)&_D7 * (v53 * 6.0));
          v58 = *(float64x2_t *)(v17 + 192);
          v59 = vmulq_f64(vaddq_f64((float64x2_t)vdupq_lane_s64(_D7, 0), vmulq_f64(_Q0, vaddq_f64(_Q0, _Q0))), (float64x2_t)vextq_s8((int8x16_t)v58, (int8x16_t)v58, 8uLL));
          v60 = vaddq_f64(v58, v58);
          v61 = vmulq_n_f64(v60, _Q0.f64[0]);
          v200 = vmlaq_n_f64(vaddq_f64(v59, vmulq_laneq_f64(v61, _Q0, 1)), _Q0, v56);
          v62 = vmulq_n_f64(_Q0, v57);
          v63 = vmulq_n_f64(v62, _Q0.f64[0]);
          v64 = vmulq_n_f64(v62, _D6);
          v65 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v61.f64[0], 0);
          v65.f64[0] = vmuld_lane_f64(6.0, v58, 1) * _Q0.f64[0];
          v66 = vaddq_f64(v65, vmulq_laneq_f64(v60, _Q0, 1));
          v63.f64[0] = v56 + v63.f64[0];
          v67 = vaddq_f64(v66, v63);
          *(_QWORD *)&v66.f64[0] = vdupq_laneq_s64((int64x2_t)v66, 1).u64[0];
          v66.f64[1] = vmuld_lane_f64(6.0 * v58.f64[0], _Q0, 1) + v61.f64[1];
          v64.f64[1] = v56 + v64.f64[1];
          v196 = vmulq_n_f64(v67, v49);
          v197 = -(vmuld_n_f64(v196.f64[0], _Q0.f64[0]) + v196.f64[1] * _Q0.f64[1]);
          v198 = vmulq_n_f64(vaddq_f64(v66, v64), v49);
          v199 = -(vmuld_n_f64(v198.f64[0], _Q0.f64[0]) + v198.f64[1] * _Q0.f64[1]);
          v41 = *(_DWORD *)(v17 + 992);
          if (v41 == -1)
            goto LABEL_52;
          goto LABEL_54;
        }
      }
      else if (v39 >= 0.00000001)
      {
        v145 = 1.0 / v39;
        _Q2 = vmulq_n_f64(_Q18, v145);
        v147 = *(double *)(v17 + 168);
        v148 = *(double *)(v17 + 176);
        v149 = *(double *)(v17 + 184);
        _D6 = vmuld_lane_f64(v145, _Q18, 1);
        __asm { FMLA            D7, D6, V2.D[1] }
        v152 = v147 * _D7 + 1.0 + _D7 * _D7 * (v148 + v149 * _D7);
        v153 = v147 + v147 + _D7 * (v148 * 4.0 + _D7 * (v149 * 6.0));
        v154 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v152, 0);
        v200 = vmulq_n_f64(_Q2, v152);
        v155 = vmulq_n_f64(_Q2, v153);
        v156 = vmulq_n_f64(v155, _Q2.f64[0]);
        v157 = vmulq_n_f64(v155, _D6);
        v158.f64[0] = v156.f64[0];
        v158.f64[1] = v157.f64[1];
        v159 = vaddq_f64(v154, v158);
        v158.f64[0] = v159.f64[0];
        v158.f64[1] = v156.f64[1];
        v159.f64[0] = v157.f64[0];
        v196 = vmulq_n_f64(v158, v145);
        v197 = -(vmuld_n_f64(v196.f64[0], _Q2.f64[0]) + v196.f64[1] * _Q2.f64[1]);
        v198 = vmulq_n_f64(v159, v145);
        v199 = -(vmuld_n_f64(v198.f64[0], _Q2.f64[0]) + v198.f64[1] * _Q2.f64[1]);
        v41 = *(_DWORD *)(v17 + 992);
        if (v41 == -1)
          goto LABEL_52;
        goto LABEL_54;
      }
      return 0;
    }
LABEL_39:
    *(_QWORD *)&v69 = vextq_s8((int8x16_t)_Q18, (int8x16_t)_Q18, 8uLL).u64[0];
    _D0 = _Q18.f64[1];
    __asm { FMLA            D2, D0, V18.D[1] }
    if (_D2 >= 0.00000001)
    {
      v72 = v39 * v39 + _D2;
      v73 = sqrt(_D2);
      v165 = v39;
      v168 = _Q18;
      v160 = _D2;
      v161 = v69;
      v74 = atan2(v73, v39);
      _Q18 = v168;
      v75 = *(int64x2_t *)(v17 + 184);
      v76 = *(int64x2_t *)(v17 + 168);
      v77 = (float64x2_t)vzip2q_s64(v76, v75);
      v78 = (float64x2_t)vzip1q_s64(v76, v75);
      v79 = vmulq_n_f64(vaddq_f64(vmulq_f64(v78, (float64x2_t)xmmword_210312E10), vmulq_n_f64(vmulq_f64(v77, (float64x2_t)xmmword_210312E20), v74 * v74)), v74 * v74);
      v80 = v74 * v74 * (v74 * v74);
      v81 = v79.f64[0] + vmuld_lane_f64(v80, v79, 1) + 1.0;
      v82 = vmulq_n_f64(vaddq_f64(v78, vmulq_n_f64(v77, v74 * v74)), v74 * v74);
      v69 = v161;
      v83 = v74 + v74 * (v82.f64[0] + vmuld_lane_f64(v80, v82, 1));
LABEL_49:
      v86 = v83 / v73;
      v99 = v81 / v72;
      v88 = vmulq_n_f64(_Q18, (v165 * (v81 / v72) - v86) / v160);
      v87 = -v99;
      v89 = vextq_s8((int8x16_t)v88, (int8x16_t)v88, 8uLL).u64[0];
      goto LABEL_50;
    }
    goto LABEL_42;
  }
  if (v40 > 5)
  {
    if (v40 == 6)
    {
      v68 = 1.0;
      if (v39 != 0.0)
        v68 = 1.0 / v39;
      v164 = v68;
      v167 = vmulq_n_f64(_Q18, v68);
      v203 = v167;
      sub_20EB2837C(&v200, v201.f64, &v203, (double *)(v17 + 168), (float64x2_t *)(v17 + 192), (double *)(v17 + 208));
      v196.f64[0] = v164 * v201.f64[0];
      v196.f64[1] = v164 * v201.f64[1];
      v197 = v164 * (-v201.f64[0] * v167.f64[0] - vmuld_lane_f64(v201.f64[1], v167, 1));
      v198.f64[0] = v164 * v202.f64[0];
      v198.f64[1] = v164 * v202.f64[1];
      v199 = v164 * (-v202.f64[0] * v167.f64[0] - vmuld_lane_f64(v202.f64[1], v167, 1));
      v41 = *(_DWORD *)(v17 + 992);
      if (v41 != -1)
        goto LABEL_54;
      goto LABEL_52;
    }
    v42 = sub_20EB3345C(v17, &v200, (uint64_t)&v196, &v194, 0);
LABEL_46:
    if ((v42 & 1) == 0)
      return 0;
    goto LABEL_51;
  }
  if (v40 != 5)
    goto LABEL_39;
  if (!sub_20EB29218(v200.f64, (uint64_t)&v196, &v194, (int64x2_t *)(v17 + 168)))
    return 0;
LABEL_51:
  v41 = *(_DWORD *)(v17 + 992);
  if (v41 == -1)
  {
LABEL_52:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v41 = *(_DWORD *)(v17 + 992);
  }
LABEL_54:
  if (!v41)
  {
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  v102 = *(double *)v17;
  v103 = *(double *)(v17 + 32);
  v104.f64[0] = *(float64_t *)v17;
  v104.f64[1] = v103;
  v105.f64[0] = *(float64_t *)(v17 + 16);
  v105.f64[1] = *(float64_t *)(v17 + 40);
  v106 = vaddq_f64(v105, vmulq_f64(v104, v200));
  v107 = v197;
  v108 = (int8x16_t)v196;
  v109 = v199;
  v110 = (int8x16_t)v198;
  *a3 = vsubq_f64(v106, *(float64x2_t *)(a1 + 8));
  if (*(_BYTE *)(v11 + 20))
  {
    _V16.D[1] = v170.f64[1];
    _V22.D[1] = v171.f64[1];
    _D20 = v179;
    __asm
    {
      FMLA            D7, D20, V16.D[1]
      FMLA            D17, D20, V22.D[1]
    }
    _V22.D[1] = v172.f64[1];
    __asm { FMLA            D19, D20, V22.D[1] }
    v118 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v177, v170.f64[0]), v176, v170, 1), v178, v175);
    v119.f64[0] = _D7 + v29 * v175;
    _Q16 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v177, v171.f64[0]), v176, v171, 1), v178, v174);
    _Q18 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v177, v172.f64[0]), v176, v172, 1), v178, v173);
    v122 = _D19 + v29 * v173;
    v123 = (float64x2_t)vzip1q_s64(v118, _Q16);
    _Q6 = (float64x2_t)vzip2q_s64(v118, _Q16);
    v125 = vmlaq_laneq_f64(vmulq_n_f64(v123, v180.f64[0]), _Q6, v180, 1);
    _D22 = v180.f64[1];
    __asm { FMLA            D16, D22, V18.D[1] }
    v127 = vmlaq_laneq_f64(vmulq_n_f64(v123, v181.f64[0]), _Q6, v181, 1);
    _D24 = v181.f64[1];
    __asm { FMLA            D23, D24, V18.D[1] }
    v130 = vmlaq_laneq_f64(vmulq_n_f64(v123, v182.f64[0]), _Q6, v182, 1);
    _D24 = v182.f64[1];
    __asm { FMLA            D6, D24, V18.D[1] }
    v119.f64[1] = _D17 + v29 * v174;
    v132 = vmlaq_n_f64(v125, v119, v185);
    v133 = vmlaq_n_f64(v127, v119, v184);
    _D17 = _D23 + v122 * v184;
    _Q20 = vmlaq_n_f64(v130, v119, v183);
    _Q6.f64[0] = _Q6.f64[0] + v122 * v183;
    _V19.D[1] = v186.f64[1];
    _V24.D[1] = v187.f64[1];
    __asm
    {
      FMLA            D18, D17, V19.D[1]
      FMLA            D23, D17, V24.D[1]
    }
    _V24.D[1] = v188.f64[1];
    __asm { FMLA            D16, D17, V24.D[1] }
    v140 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v132, v186.f64[0]), v133, v186, 1), _Q20, v191);
    v141 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v132, v187.f64[0]), v133, v187, 1), _Q20, v190);
    _Q18.f64[0] = _D23 + _Q6.f64[0] * v190;
    v142 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v132, v188.f64[0]), v133, v188, 1), _Q20, v189);
    _Q6.f64[0] = *(double *)_Q16.i64 + _Q6.f64[0] * v189;
    _Q20.f64[1] = v192.f64[1];
    __asm { FMLA            D16, D18, V20.D[1] }
    v143 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v140, v192.f64[0]), v141, v192, 1), v142, v193);
    _Q6.f64[0] = *(double *)_Q16.i64 + _Q6.f64[0] * v193;
    *(double *)_Q16.i64 = v102;
    v144.f64[0] = 0.0;
    v144.f64[1] = v103;
    *a4 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)_Q16.u64[0], *(double *)v108.i64), v144, *(double *)v110.i64), v143.f64[0]), vmlaq_n_f64(vmulq_n_f64((float64x2_t)_Q16.u64[0], *(double *)vextq_s8(v108, v108, 8uLL).i64), v144, *(double *)vextq_s8(v110, v110, 8uLL).i64), v143, 1), vmlaq_n_f64(vmulq_n_f64((float64x2_t)_Q16.u64[0], v107), v144, v109), _Q6.f64[0]);
  }
  return 1;
}

uint64_t sub_20FC6DB14(uint64_t a1, uint64_t *a2, float64x2_t *a3, float64x2_t a4, float64x2_t a5, float64x2_t _Q2)
{
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  __double2 v13;
  double v14;
  double v15;
  float64x2_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v30;
  float64x2_t v34;
  float64x2_t v37;
  double v40;
  unsigned int v41;
  uint64_t v42;
  double v43;
  char v44;
  double v45;
  double v47;
  double v50;
  float64x2_t v51;
  float64x2_t v55;
  float64x2_t v56;
  double v57;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  int v65;
  int v66;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  int v74;
  int v75;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  int v83;
  int v84;
  float64x2_t v86;
  double v87;
  int v90;
  double v91;
  int v92;
  double v93;
  float64x2_t v94;
  double v95;
  double v97;
  double v98;
  double v99;
  double v100;
  float64x2_t v101;
  float64x2_t v102;
  BOOL v103;
  double v104;
  BOOL v106;
  int v107;
  double v108;
  int v109;
  double v110;
  double v111;
  double v112;
  double v113;
  BOOL v114;
  float64x2_t v115;
  double v116;
  BOOL v118;
  int v119;
  double v120;
  int v121;
  double v122;
  float64x2_t v123;
  float64x2_t v124;
  double v125;
  double v129;
  float64x2_t v130;
  unsigned int v131;
  double v132;
  double v133;
  BOOL v134;
  double v135;
  float64x2_t v136;
  double v137;
  float64x2_t v138;
  float64x2_t v139;
  double v140;
  float64x2_t v141;
  uint64_t v142;

  v142 = *MEMORY[0x24BDAC8D0];
  v8 = *a2;
  v9 = *(double *)(*a2 + 40);
  v10 = *(double *)(*a2 + 48);
  v11 = v9 * v9 + v10 * v10;
  if (v11 >= 0.0000002635)
  {
    v12 = sqrt(v11);
    v13 = __sincos_stret(v12);
    a5.f64[0] = v13.__cosval;
    _Q2.f64[0] = v13.__sinval / v12;
    a4.f64[0] = 1.0 / v11 * (1.0 - v13.__cosval);
  }
  else
  {
    a4.f64[0] = 0.5 - v11 * (v11 / -720.0 + 0.0416666667);
    _Q2.f64[0] = 1.0 - v11 * (0.166666667 - v11 * (v11 / -5040.0 + 0.00833333333));
    a5.f64[0] = 1.0 - v11 * a4.f64[0];
  }
  v14 = v9 * a4.f64[0];
  v15 = v10 * a4.f64[0];
  a4.f64[0] = a5.f64[0] + a4.f64[0] * 0.0 * 0.0;
  a5.f64[0] = v10 * _Q2.f64[0] + v14 * 0.0;
  _Q2.f64[0] = v15 * 0.0 - v9 * _Q2.f64[0];
  v16 = *(float64x2_t *)(v8 + 104);
  _Q4 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)(v8 + 56), a5.f64[0]), *(float64x2_t *)(v8 + 80), _Q2.f64[0]), v16, a4.f64[0]);
  a4.f64[0] = *(double *)(v8 + 72) * a5.f64[0] + *(double *)(v8 + 96) * _Q2.f64[0] + *(double *)(v8 + 120) * a4.f64[0];
  a5.f64[0] = *(float64_t *)(v8 + 32);
  v19 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v21 = *(_QWORD *)(a1 + 24);
  v20 = *(_QWORD *)(a1 + 32);
  v22 = *(_QWORD *)(a1 + 56);
  _Q0 = vmulq_f64(a5, a4);
  _Q1 = vmulq_n_f64(_Q4, a5.f64[0]);
  _Q4.f64[0] = *(float64_t *)(v21 + 40);
  __asm { FMLA            D2, D4, V1.D[1] }
  _Q2.f64[0] = vmlad_n_f64(_Q2.f64[0], *(double *)(v21 + 64), _Q0.f64[0]);
  _Q4.f64[0] = *(float64_t *)(v19 + 40);
  v27 = *(float64x2_t *)(v19 + 48);
  v16.f64[0] = *(float64_t *)(v21 + 88);
  v28 = vaddq_f64(_Q2, v16);
  _Q3 = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v21, _Q1.f64[0]), *(float64x2_t *)(v21 + 24), _Q1, 1), *(float64x2_t *)(v21 + 48), _Q0.f64[0]), *(float64x2_t *)(v21 + 72));
  v30 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v19, _Q3.f64[0]), *(float64x2_t *)(v19 + 24), _Q3, 1), v27, v28.f64[0]);
  __asm { FMLA            D0, D4, V3.D[1] }
  _Q0.f64[0] = vmlad_n_f64(_Q0.f64[0], *(double *)(v19 + 64), v28.f64[0]);
  v28.f64[0] = *(float64_t *)(v19 + 88);
  _Q0 = vaddq_f64(v28, _Q0);
  v28.f64[0] = *(float64_t *)(v18 + 16);
  _Q6 = *(float64x2_t *)(v18 + 48);
  v27.f64[0] = *(float64_t *)(v18 + 88);
  *(_QWORD *)&_Q0.f64[0] = *(_OWORD *)&vsubq_f64(_Q0, v27);
  _Q1 = vsubq_f64(vaddq_f64(*(float64x2_t *)(v19 + 72), v30), *(float64x2_t *)(v18 + 72));
  v28.f64[1] = *(float64_t *)(v18 + 40);
  v34 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v18, *(int64x2_t *)(v18 + 24)), _Q1.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)v18, *(int64x2_t *)(v18 + 24)), _Q1, 1), v28, _Q0.f64[0]);
  _Q2 = vmulq_f64(_Q6, _Q1);
  _Q1.f64[0] = _Q1.f64[1];
  __asm { FMLA            D2, D1, V6.D[1] }
  _Q2.f64[0] = vmlad_n_f64(_Q2.f64[0], *(double *)(v18 + 64), _Q0.f64[0]);
  _Q0.f64[0] = *(float64_t *)(v20 + 16);
  _Q5 = *(_OWORD *)(v20 + 48);
  _Q6.f64[0] = *(float64_t *)(v20 + 88);
  *(_QWORD *)&_Q2.f64[0] = *(_OWORD *)&vsubq_f64(_Q2, _Q6);
  v37 = vsubq_f64(v34, *(float64x2_t *)(v20 + 72));
  _Q0.f64[1] = *(float64_t *)(v20 + 40);
  _Q18 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v20, *(int64x2_t *)(v20 + 24)), v37.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)v20, *(int64x2_t *)(v20 + 24)), v37, 1), _Q0, _Q2.f64[0]);
  _Q0.f64[0] = v37.f64[1];
  __asm { FMLA            D17, D0, V5.D[1] }
  v40 = vmlad_n_f64(_D17, *(double *)(v20 + 64), _Q2.f64[0]);
  v139 = _Q18;
  v140 = v40;
  v41 = *(_DWORD *)(v22 + 992);
  if (v41 != -1)
  {
    v42 = *(_QWORD *)&v40;
    if (v41 <= 7)
      goto LABEL_6;
LABEL_13:
    if (v41 > 0xB)
    {
      if (v41 <= 0xD)
      {
        if (v41 != 13 || v40 < 0.00000001)
          return 0;
        _Q0 = vdivq_f64(_Q18, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v40, 0));
        v47 = (*(double *)v22 + *(double *)(v22 + 32)) * 0.5;
        _D3 = _Q0.f64[1];
        __asm { FMLA            D2, D3, V0.D[1] }
        v50 = v47 * (_D2 * v47);
        v51 = vdivq_f64(_Q0, (float64x2_t)vdupq_lane_s64(COERCE__INT64(v50* (*(double *)(v22 + 168)+ v47 * *(double *)(v22 + 224)+ v50* (*(double *)(v22 + 176)+ v47 * *(double *)(v22 + 232)+ v50* (*(double *)(v22 + 184)+ v47 * *(double *)(v22 + 240)+ v50* (*(double *)(v22 + 192)+ v47 * *(double *)(v22 + 248)+ v50* (*(double *)(v22 + 200)+ v47 * *(double *)(v22 + 256)+ v50
                                    * (*(double *)(v22 + 208)
                                     + v47 * *(double *)(v22 + 264)
                                     + v50 * (*(double *)(v22 + 216) + *(double *)(v22 + 272) * v47 + v50 * 0.0)))))))
                               / 100.0
                               + 1.0),
                               0));
LABEL_151:
        v141 = v51;
LABEL_152:
        v131 = *(_DWORD *)(v22 + 992);
        if (v131 == -1)
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v131 = *(_DWORD *)(v22 + 992);
          if (v131 <= 7)
          {
LABEL_154:
            if (v131 <= 3)
            {
              if (v131 <= 1)
              {
                if (!v131)
                {
                  sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
                  abort();
                }
                v125 = v141.f64[1];
                v132 = *(double *)v22 * v141.f64[0];
                v133 = *(double *)(v22 + 8) * v141.f64[1];
                goto LABEL_171;
              }
              v55 = v141;
              if (v131 == 2)
                goto LABEL_168;
LABEL_169:
              v125 = v55.f64[1];
              v135 = *(double *)v22 * v55.f64[0] + vmuld_lane_f64(*(double *)(v22 + 8), v55, 1);
              goto LABEL_172;
            }
            v124.f64[0] = v141.f64[0];
            v134 = v131 == 5;
            if (v131 > 5)
              goto LABEL_166;
LABEL_164:
            if (!v134)
            {
              v125 = v141.f64[1];
              goto LABEL_170;
            }
LABEL_166:
            v132 = *(double *)v22 * v124.f64[0];
            v125 = v141.f64[1];
            v133 = *(double *)(v22 + 8) * v141.f64[1];
LABEL_171:
            v135 = v132 + v133;
            goto LABEL_172;
          }
        }
        else if (v131 <= 7)
        {
          goto LABEL_154;
        }
        v124.f64[0] = v141.f64[0];
        if (v131 > 0xB)
          goto LABEL_166;
        v134 = v131 == 9;
        if (v131 > 9)
          goto LABEL_166;
        goto LABEL_164;
      }
      if (v41 == 14)
        v44 = sub_20EB247C0(&v141, (uint64_t)&v139, (double *)(v22 + 168), (*(double *)v22 + *(double *)(v22 + 32)) * 0.5);
      else
        v44 = sub_20EB3E39C(v22, &v141, &v139);
    }
    else if (v41 > 9)
    {
      if (v41 == 10)
        v44 = sub_20EB24288(&v141, (uint64_t)&v139, (double *)(v22 + 168), (*(double *)v22 + *(double *)(v22 + 32)) * 0.5);
      else
        v44 = sub_20EB3A2E4(v22, &v141, &v139);
    }
    else
    {
      if (v41 != 9)
      {
        _D0 = _Q18.f64[1];
        __asm { FMLA            D4, D0, V18.D[1] }
        v60 = sqrt(_D4);
        v61 = fabs(v40);
        v62 = fabs(v60);
        v63 = v61 / v62;
        if (v61 >= v62)
          v63 = v62 / v61;
        if (v63 <= 0.414213562)
        {
          v65 = 1;
          v66 = 2;
          v64 = v63;
          if (_D4 < 0.00000001)
            goto LABEL_114;
        }
        else
        {
          v64 = (v62 - v61) / (v61 + v62);
          if (v61 >= v62)
            v64 = -v64;
          v65 = -1;
          v66 = 1;
          if (_D4 < 0.00000001)
            goto LABEL_114;
        }
        if (v61 < v62)
          v65 = -v65;
        else
          v66 = v63 > 0.414213562;
        v101 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v64 * v64), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v64 * v64), (float64x2_t)xmmword_210315370), v64 * v64 * (v64 * v64))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v64 * v64), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v64 * v64), (float64x2_t)xmmword_210315380), v64 * v64 * (v64 * v64))), v64 * v64 * (v64 * v64) * (v64 * v64 * (v64 * v64))));
        v102 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v101, 1);
        v103 = v60 == INFINITY && v61 == INFINITY;
        v104 = v64 + v64 * vdivq_f64(v101, v102).f64[0];
        if (v103)
          v104 = 0.785398163;
        if (v60 == 0.0 && v40 == 0.0)
          v104 = 0.0;
        v106 = v42 < 0;
        if (v42 >= 0)
          v107 = v66;
        else
          v107 = 4 - v66;
        if (v106)
          v65 = -v65;
        if (v60 < 0.0)
          v107 = -v107;
        v108 = (double)v107;
        if (v60 >= 0.0)
          v109 = v65;
        else
          v109 = -v65;
        v110 = v108 * 3.061617e-17 + v108 * 0.785398163 + v104 * (double)v109;
        v111 = v110
             * (v110
              * v110
              * (*(double *)(v22 + 168)
               + v110
               * v110
               * (*(double *)(v22 + 176)
                + v110
                * v110
                * (*(double *)(v22 + 184)
                 + v110
                 * v110
                 * (*(double *)(v22 + 192)
                  + v110
                  * v110
                  * (*(double *)(v22 + 200)
                   + v110 * v110 * (*(double *)(v22 + 208) + v110 * v110 * *(double *)(v22 + 216)))))))
              + 1.0);
        v112 = 1.0 / v60;
        goto LABEL_142;
      }
      v44 = sub_20EB3641C(v22, &v141, &v139);
    }
LABEL_83:
    if ((v44 & 1) != 0)
      goto LABEL_152;
    return 0;
  }
  v137 = v40;
  v138 = _Q18;
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v41 = *(_DWORD *)(v22 + 992);
  v40 = v137;
  _Q18 = v138;
  v42 = *(_QWORD *)&v137;
  if (v41 > 7)
    goto LABEL_13;
LABEL_6:
  if (v41 > 3)
  {
    if (v41 <= 5)
    {
      if (v41 == 5)
      {
        v45 = vaddvq_f64(vmulq_f64(_Q18, _Q18));
        if (v45 >= 0.00000001)
        {
          v97 = sqrt(v45);
          if (v97 <= v40)
          {
            v129 = v97 / v40 * 0.785398163 - v97 / v40 * (v97 / v40 + -1.0) * (v97 / v40 * 0.0663008339 + 0.244711287);
          }
          else
          {
            if (v97 <= -v40)
            {
              v99 = v97 / v40 * 0.785398163 - v97 / v40 * (-1.0 - v97 / v40) * (v97 / v40 * -0.0663008339 + 0.244711287);
              v100 = 3.14159265;
            }
            else
            {
              v98 = fabs(v40 / v97);
              v99 = v40 / v97 * (v98 + -1.0) * (v98 * 0.0663008339 + 0.244711287) + v40 / v97 * -0.785398163;
              v100 = 1.57079633;
            }
            v129 = v99 + v100;
          }
          v130 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v22 + 168), *(int64x2_t *)(v22 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v22 + 168), *(int64x2_t *)(v22 + 184)), v129 * v129)), v129 * v129);
          v43 = (v129 + v129 * (v130.f64[0] + vmuld_lane_f64(v129 * v129 * (v129 * v129), v130, 1))) / v97;
          goto LABEL_150;
        }
        if (v40 != 0.0)
        {
LABEL_10:
          v43 = 1.0 / v40;
LABEL_150:
          v51 = vmulq_n_f64(_Q18, v43);
          goto LABEL_151;
        }
        return 0;
      }
      _D0 = _Q18.f64[1];
      __asm { FMLA            D4, D0, V18.D[1] }
      v69 = sqrt(_D4);
      v70 = fabs(v40);
      v71 = fabs(v69);
      v72 = v70 / v71;
      if (v70 >= v71)
        v72 = v71 / v70;
      if (v72 <= 0.414213562)
      {
        v74 = 1;
        v75 = 2;
        v73 = v72;
        if (_D4 >= 0.00000001)
        {
LABEL_118:
          if (v70 < v71)
            v74 = -v74;
          else
            v75 = v72 > 0.414213562;
          v114 = v69 == INFINITY && v70 == INFINITY;
          v115 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v73 * v73), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v73 * v73), (float64x2_t)xmmword_210315370), v73 * v73 * (v73 * v73))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v73 * v73), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v73 * v73), (float64x2_t)xmmword_210315380), v73 * v73 * (v73 * v73))), v73 * v73 * (v73 * v73) * (v73 * v73 * (v73 * v73))));
          v116 = v73 + v73 * vdivq_f64(v115, (float64x2_t)vdupq_laneq_s64((int64x2_t)v115, 1)).f64[0];
          if (v114)
            v116 = 0.785398163;
          if (v69 == 0.0 && v40 == 0.0)
            v116 = 0.0;
          v118 = v42 < 0;
          if (v42 >= 0)
            v119 = v75;
          else
            v119 = 4 - v75;
          if (v118)
            v74 = -v74;
          if (v69 < 0.0)
            v119 = -v119;
          v120 = (double)v119;
          if (v69 >= 0.0)
            v121 = v74;
          else
            v121 = -v74;
          v122 = v120 * 3.061617e-17 + v120 * 0.785398163 + v116 * (double)v121;
          v123 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v22 + 168), *(int64x2_t *)(v22 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v22 + 168), *(int64x2_t *)(v22 + 184)), v122 * v122)), v122 * v122);
          v111 = v122 + v122 * (v123.f64[0] + vmuld_lane_f64(v122 * v122 * (v122 * v122), v123, 1));
          v112 = 1.0 / v69;
LABEL_142:
          v113 = v112 * v111;
          goto LABEL_143;
        }
      }
      else
      {
        v73 = (v71 - v70) / (v70 + v71);
        if (v70 >= v71)
          v73 = -v73;
        v74 = -1;
        v75 = 1;
        if (_D4 >= 0.00000001)
          goto LABEL_118;
      }
LABEL_114:
      v113 = 1.0 / v40;
LABEL_143:
      v124 = vmulq_n_f64(_Q18, v113);
      v141 = v124;
      v125 = v124.f64[1];
LABEL_170:
      v132 = *(double *)v22 * v124.f64[0];
      v133 = *(double *)(v22 + 8) * v125;
      goto LABEL_171;
    }
    if (v41 == 6)
    {
      v56 = vaddq_f64(vdivq_f64(_Q18, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v40, 0)), *(float64x2_t *)(v22 + 192));
      v57 = sqrt(vaddvq_f64(vmulq_f64(v56, v56)));
      v51 = vaddq_f64(*(float64x2_t *)(v22 + 208), vmulq_n_f64(v56, v57 * (v57 * (*(double *)(v22 + 168) + v57 * (*(double *)(v22 + 176) + *(double *)(v22 + 184) * v57)))+ 1.0));
      goto LABEL_151;
    }
    v44 = sub_20EB31FFC(v22, &v141, &v139);
    goto LABEL_83;
  }
  if (v41 <= 1)
  {
    if (!v41)
    {
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    if (v40 >= 0.00000001)
      goto LABEL_10;
    return 0;
  }
  if (v41 != 2)
  {
    _D0 = _Q18.f64[1];
    __asm { FMLA            D4, D0, V18.D[1] }
    v78 = sqrt(_D4);
    v79 = fabs(v40);
    v80 = fabs(v78);
    v81 = v79 / v80;
    if (v79 >= v80)
      v81 = v80 / v79;
    if (v81 <= 0.414213562)
    {
      v83 = 1;
      v84 = 2;
      v82 = v81;
      if (_D4 >= 0.00000001)
      {
LABEL_56:
        if (v79 < v80)
          v83 = -v83;
        else
          v84 = v81 > 0.414213562;
        _ZF = v78 == INFINITY && v79 == INFINITY;
        v86 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v82 * v82), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v82 * v82), (float64x2_t)xmmword_210315370), v82 * v82 * (v82 * v82))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v82 * v82), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v82 * v82), (float64x2_t)xmmword_210315380), v82 * v82 * (v82 * v82))), v82 * v82 * (v82 * v82) * (v82 * v82 * (v82 * v82))));
        v87 = v82 + v82 * vdivq_f64(v86, (float64x2_t)vdupq_laneq_s64((int64x2_t)v86, 1)).f64[0];
        if (_ZF)
          v87 = 0.785398163;
        if (v78 == 0.0 && v40 == 0.0)
          v87 = 0.0;
        _NF = v42 < 0;
        if (v42 >= 0)
          v90 = v84;
        else
          v90 = 4 - v84;
        if (_NF)
          v83 = -v83;
        if (v78 < 0.0)
          v90 = -v90;
        v91 = (double)v90;
        if (v78 >= 0.0)
          v92 = v83;
        else
          v92 = -v83;
        v93 = v91 * 3.061617e-17 + v91 * 0.785398163 + v87 * (double)v92;
        v94 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v22 + 168), *(int64x2_t *)(v22 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v22 + 168), *(int64x2_t *)(v22 + 184)), v93 * v93)), v93 * v93);
        v95 = 1.0 / v78 * (v93 + v93 * (v94.f64[0] + vmuld_lane_f64(v93 * v93 * (v93 * v93), v94, 1)));
        goto LABEL_117;
      }
    }
    else
    {
      v82 = (v80 - v79) / (v79 + v80);
      if (v79 >= v80)
        v82 = -v82;
      v83 = -1;
      v84 = 1;
      if (_D4 >= 0.00000001)
        goto LABEL_56;
    }
    v95 = 1.0 / v40;
LABEL_117:
    v55 = vmulq_n_f64(_Q18, v95);
    v141 = v55;
    goto LABEL_169;
  }
  if (*(_DWORD *)(v22 + 212))
  {
    if (v40 < 0.00000001)
      return 0;
    _Q2 = vmulq_n_f64(_Q18, 1.0 / v40);
    _D1 = vmuld_lane_f64(1.0 / v40, _Q18, 1);
    __asm { FMLA            D3, D1, V2.D[1] }
    v55 = vaddq_f64(vaddq_f64(vmulq_f64(vaddq_f64((float64x2_t)vdupq_lane_s64(_D3, 0), vmulq_f64(_Q2, vaddq_f64(_Q2, _Q2))), (float64x2_t)vextq_s8(*(int8x16_t *)(v22 + 192), *(int8x16_t *)(v22 + 192), 8uLL)), vmulq_laneq_f64(vmulq_n_f64(vaddq_f64(*(float64x2_t *)(v22 + 192), *(float64x2_t *)(v22 + 192)), _Q2.f64[0]), _Q2, 1)), vmulq_n_f64(_Q2, *(double *)(v22 + 168) * *(double *)&_D3+ 1.0+ *(double *)&_D3 * (*(double *)(v22 + 176) * *(double *)&_D3)+ *(double *)&_D3 * (*(double *)&_D3 * (*(double *)(v22 + 184) * *(double *)&_D3))));
    v141 = v55;
  }
  else
  {
    if (v40 < 0.00000001)
      return 0;
    _Q2 = vmulq_n_f64(_Q18, 1.0 / v40);
    _D1 = vmuld_lane_f64(1.0 / v40, _Q18, 1);
    __asm { FMLA            D3, D1, V2.D[1] }
    v55 = vmulq_n_f64(_Q2, *(double *)(v22 + 168) * _D3 + 1.0 + _D3 * _D3 * (*(double *)(v22 + 176) + *(double *)(v22 + 184) * _D3));
    v141 = v55;
  }
LABEL_168:
  v135 = vaddvq_f64(vmulq_f64(*(float64x2_t *)v22, v55));
  v125 = v55.f64[1];
LABEL_172:
  v136.f64[0] = v135 + *(double *)(v22 + 16);
  v136.f64[1] = v125 * *(double *)(v22 + 32) + *(double *)(v22 + 40);
  *a3 = vsubq_f64(v136, *(float64x2_t *)(a1 + 8));
  return 1;
}

uint64_t sub_20FC6EA84(uint64_t a1, uint64_t *a2, float64x2_t *a3, float64x2_t *a4, float64x2_t a5)
{
  uint64_t v8;
  float64x2_t v10;
  float64x2_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float64x2_t v17;
  float64x2_t v20;
  float64x2_t v25;
  float64x2_t v27;
  float64x2_t v28;
  double v29;
  float64x2_t v31;
  float64x2_t v36;
  double v38;
  unsigned int v39;
  int v40;
  char v41;
  float64x2_t v45;
  double v48;
  double v50;
  double v51;
  double v52;
  double v55;
  double v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v74;
  double v75;
  long double v76;
  int64x2_t v77;
  int64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  double v82;
  double v83;
  float64x2_t v84;
  double v85;
  double v88;
  double v89;
  float64x2_t v90;
  unint64_t v91;
  long double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  float64x2_t v102;
  float64x2_t v103;
  double v104;
  float64_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  int8x16_t v109;
  double v110;
  double v111;
  int8x16_t v112;
  int64x2_t v120;
  double v124;
  float64x2_t v125;
  float64x2_t v127;
  float64x2_t v129;
  float64x2_t v132;
  float64x2_t v135;
  float64x2_t v137;
  float64_t v138;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  double v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  int8x16_t v155;
  float64x2_t v156;
  int8x16_t v157;
  int8x16_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  double v174;
  double v176;
  double v177;
  double v178;
  double v181;
  double v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  double v190;
  double v191;
  double v192;
  double v193;
  double v194;
  double v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  double v203;
  double v204;
  double v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  double v213;
  double v214;
  double v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  __int128 v220;
  double v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  uint64_t v225;
  __int128 v226;
  uint64_t v227;
  uint64_t v228;
  __int128 v229;
  double v230;
  double v231;
  float64x2_t v232;
  double v233;
  float64x2_t v234;
  double v235;
  float64x2_t v236;
  double v237;
  float64x2_t v238;
  double v239;
  float64x2_t v240;
  double v241;
  float64x2_t v242;
  float64x2_t v243;
  float64x2_t v244;
  float64x2_t v245;
  uint64_t v246;

  v246 = *MEMORY[0x24BDAC8D0];
  v8 = *a2;
  a5.f64[0] = *(float64_t *)(*a2 + 32);
  v224 = a5;
  v238 = *(float64x2_t *)(*a2 + 40);
  v239 = 0.0;
  v227 = 0;
  v226 = 0u;
  v229 = 0u;
  v225 = 0x3FF0000000000000;
  v228 = 0x3FF0000000000000;
  v230 = 0.0;
  v231 = 1.0;
  sub_20FC7D290((uint64_t)&v238, (double *)&v225, v232.f64);
  _Q3 = *(float64x2_t *)(v8 + 80);
  v10 = *(float64x2_t *)(v8 + 104);
  v11.f64[0] = *(double *)(v8 + 72) * *((double *)&v229 + 1)
             + *(double *)(v8 + 96) * v230
             + *(double *)(v8 + 120) * v231;
  v13 = *(_QWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 48);
  v15 = *(_QWORD *)(a1 + 24);
  v14 = *(_QWORD *)(a1 + 32);
  v16 = *(_QWORD *)(a1 + 56);
  v222 = v11;
  v223 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)(v8 + 56), *((double *)&v229 + 1)), _Q3, v230), v10, v231);
  v17 = vmulq_f64(v224, v11);
  _Q1 = vmulq_n_f64(v223, v224.f64[0]);
  *(_QWORD *)&_Q4 = *(_QWORD *)(v15 + 40);
  v10.f64[0] = *(float64_t *)(v15 + 64);
  v216 = *(float64x2_t *)v15;
  v217 = *(float64x2_t *)(v15 + 24);
  v218 = *(float64x2_t *)(v15 + 48);
  v219 = v10;
  v20 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v15, _Q1.f64[0]), v217, _Q1, 1), v218, v17.f64[0]);
  v220 = _Q4;
  v221 = *(double *)(v15 + 16);
  __asm { FMLA            D3, D4, V1.D[1] }
  _Q3.f64[0] = vmlad_n_f64(_Q3.f64[0], v10.f64[0], v17.f64[0]);
  v17.f64[0] = *(float64_t *)(v15 + 88);
  v25 = vaddq_f64(_Q3, v17);
  _Q1 = vaddq_f64(v20, *(float64x2_t *)(v15 + 72));
  v210 = *(float64x2_t *)v13;
  v211 = *(float64x2_t *)(v13 + 24);
  v212 = *(float64x2_t *)(v13 + 48);
  v213 = *(double *)(v13 + 64);
  v27 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v13, _Q1.f64[0]), v211, _Q1, 1), v212, v25.f64[0]);
  v214 = *(double *)(v13 + 40);
  v215 = *(double *)(v13 + 16);
  __asm { FMLA            D3, D5, V1.D[1] }
  _Q3.f64[0] = vmlad_n_f64(_Q3.f64[0], v213, v25.f64[0]);
  v25.f64[0] = *(float64_t *)(v13 + 88);
  v28 = vaddq_f64(*(float64x2_t *)(v13 + 72), v27);
  v29 = *(double *)(v12 + 64);
  _Q6 = *(float64x2_t *)(v12 + 48);
  v27.f64[0] = *(float64_t *)(v12 + 88);
  v31 = vsubq_f64(vaddq_f64(v25, _Q3), v27);
  _Q1 = vsubq_f64(v28, *(float64x2_t *)(v12 + 72));
  v206 = *(float64x2_t *)(v12 + 24);
  v207 = *(float64x2_t *)v12;
  v209 = *(double *)(v12 + 40);
  _Q3.f64[0] = *(float64_t *)(v12 + 16);
  _Q3.f64[1] = v209;
  _Q2 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v12, (int64x2_t)v206), _Q1.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)v12, (int64x2_t)v206), _Q1, 1), _Q3, v31.f64[0]);
  _Q3 = vmulq_f64(_Q6, _Q1);
  _Q1.f64[0] = _Q1.f64[1];
  v208 = _Q6;
  __asm { FMLA            D3, D1, V6.D[1] }
  _Q3.f64[0] = vmlad_n_f64(_Q3.f64[0], v29, v31.f64[0]);
  _Q7 = *(float64x2_t *)(v14 + 48);
  v31.f64[0] = *(float64_t *)(v14 + 88);
  *(_QWORD *)&v31.f64[0] = *(_OWORD *)&vsubq_f64(_Q3, v31);
  v36 = vsubq_f64(_Q2, *(float64x2_t *)(v14 + 72));
  v200 = *(float64x2_t *)v14;
  v201 = *(float64x2_t *)(v14 + 24);
  v204 = *(double *)(v14 + 40);
  v205 = *(double *)(v14 + 16);
  _Q2.f64[0] = v205;
  _Q2.f64[1] = v204;
  _Q18 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v14, (int64x2_t)v201), v36.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)v14, (int64x2_t)v201), v36, 1), _Q2, v31.f64[0]);
  _Q2.f64[0] = v36.f64[1];
  v202 = _Q7;
  v203 = *(double *)(v14 + 64);
  __asm { FMLA            D1, D2, V7.D[1] }
  v38 = vmlad_n_f64(_Q1.f64[0], v203, v31.f64[0]);
  v236 = _Q18;
  v237 = v38;
  v39 = *(_DWORD *)(v16 + 992);
  if (v39 != -1)
  {
    if (v39 <= 7)
      goto LABEL_3;
LABEL_11:
    if (v39 > 0xB)
    {
      if (v39 <= 0xD)
      {
        if (v39 == 13 && v38 >= 0.00000001)
        {
          v245 = vdivq_f64(_Q18, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v38, 0));
          if (sub_20EB295B8(&v242, &v243, 0, (uint64_t)&v245, (double *)(v16 + 168), (*(double *)v16 + *(double *)(v16 + 32)) * 0.5))
          {
            _D0 = -v236.f64[1] / (v237 * v237);
            _V3.D[1] = v243.f64[1];
            _V4.D[1] = v244.f64[1];
            v45.f64[0] = 0.0;
            v45.f64[1] = 1.0 / v237;
            __asm { FMLA            D7, D0, V3.D[1] }
            v238 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)COERCE_UNSIGNED_INT64(1.0 / v237), v243.f64[0]), v45, v243, 1);
            __asm { FMLA            D2, D0, V4.D[1] }
            v239 = _D7;
            v241 = _D2;
            v240 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)COERCE_UNSIGNED_INT64(1.0 / v237), v244.f64[0]), v45, v244, 1);
            v40 = *(_DWORD *)(v16 + 992);
            if (v40 == -1)
              goto LABEL_51;
            goto LABEL_53;
          }
        }
        return 0;
      }
      if (v39 == 14)
        v41 = sub_20EB2498C(&v242, (uint64_t)&v238, 0, (uint64_t)&v236, (double *)(v16 + 168), (*(double *)v16 + *(double *)(v16 + 32)) * 0.5);
      else
        v41 = sub_20EB3F050(v16, &v242, (uint64_t)&v238, &v236, 0);
    }
    else if (v39 > 9)
    {
      if (v39 == 10)
        v41 = sub_20EB2450C(&v242, (uint64_t)&v238, 0, (uint64_t)&v236, (double *)(v16 + 168), (*(double *)v16 + *(double *)(v16 + 32)) * 0.5);
      else
        v41 = sub_20EB3AF98(v16, &v242, (uint64_t)&v238, &v236, 0);
    }
    else
    {
      if (v39 != 9)
      {
        *(_QWORD *)&v71 = vextq_s8((int8x16_t)_Q18, (int8x16_t)_Q18, 8uLL).u64[0];
        _D0 = _Q18.f64[1];
        __asm { FMLA            D2, D0, V18.D[1] }
        if (_D2 >= 0.00000001)
        {
          v74 = v38 * v38 + _D2;
          v75 = sqrt(_D2);
          v195 = v38;
          v199 = _Q18;
          v190 = _D2;
          v192 = v71;
          v93 = atan2(v75, v38);
          v94 = *(double *)(v16 + 168);
          v95 = *(double *)(v16 + 176);
          v96 = *(double *)(v16 + 184);
          v97 = *(double *)(v16 + 192);
          v98 = *(double *)(v16 + 200);
          v99 = *(double *)(v16 + 208);
          v100 = *(double *)(v16 + 216);
          _Q18 = v199;
          v83 = v93
              * v93
              * (v94 * 3.0
               + v93
               * v93
               * (v95 * 5.0
                + v93
                * v93
                * (v96 * 7.0
                 + v93
                 * v93
                 * (v97 * 9.0 + v93 * v93 * (v98 * 11.0 + v93 * v93 * (v99 * 13.0 + v93 * v93 * 15.0 * v100))))))
              + 1.0;
          v71 = v192;
          v85 = v93
              * (v93
               * v93
               * (v94
                + v93
                * v93
                * (v95 + v93
                       * v93
                       * (v96 + v93 * v93 * (v97 + v93 * v93 * (v98 + v93 * v93 * (v99 + v93 * v93 * v100))))))
               + 1.0);
          goto LABEL_48;
        }
LABEL_41:
        v88 = 1.0 / v38;
        v89 = -(v88 * v88);
        v90.f64[0] = 0.0;
        v91 = 0;
LABEL_49:
        v242 = vmulq_n_f64(_Q18, v88);
        *(_QWORD *)&v90.f64[1] = v91;
        v102 = vmulq_n_f64(v90, _Q18.f64[0]);
        v103 = vmulq_laneq_f64(v90, _Q18, 1);
        v238.f64[1] = v102.f64[1];
        v240.f64[0] = v103.f64[0];
        v239 = v89 * _Q18.f64[0];
        v238.f64[0] = v88 + v102.f64[0];
        v240.f64[1] = v88 + v103.f64[1];
        v241 = v89 * v71;
        goto LABEL_50;
      }
      v41 = sub_20EB372E0(v16, &v242, (uint64_t)&v238, &v236, 0);
    }
    goto LABEL_45;
  }
  v193 = v38;
  v196 = _Q18;
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v39 = *(_DWORD *)(v16 + 992);
  v38 = v193;
  _Q18 = v196;
  if (v39 > 7)
    goto LABEL_11;
LABEL_3:
  if (v39 <= 3)
  {
    if (v39 <= 1)
    {
      if (!v39)
      {
        sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
        abort();
      }
      if (v38 >= 0.00000001)
      {
        v242 = vmulq_n_f64(_Q18, 1.0 / v38);
        v238.f64[0] = 1.0 / v38;
        v240.f64[0] = 0.0;
        v238.f64[1] = 0.0;
        v239 = v238.f64[0] * -(_Q18.f64[0] * v238.f64[0]);
        v240.f64[1] = 1.0 / v38;
        v241 = v238.f64[0] * -(_Q18.f64[1] * v238.f64[0]);
        v40 = *(_DWORD *)(v16 + 992);
        if (v40 == -1)
          goto LABEL_51;
        goto LABEL_53;
      }
      return 0;
    }
    if (v39 == 2)
    {
      if (*(_DWORD *)(v16 + 212))
      {
        if (v38 < 0.00000001)
          return 0;
        v48 = 1.0 / v38;
        _Q0 = vmulq_n_f64(_Q18, v48);
        v50 = *(double *)(v16 + 168);
        v51 = *(double *)(v16 + 176);
        v52 = *(double *)(v16 + 184);
        _D6 = vmuld_lane_f64(v48, _Q18, 1);
        __asm { FMLA            D7, D6, V0.D[1] }
        v55 = v50 * *(double *)&_D7 + 1.0 + *(double *)&_D7 * *(double *)&_D7 * (v51 + v52 * *(double *)&_D7);
        v56 = v50 + v50 + *(double *)&_D7 * (v51 * 4.0 + *(double *)&_D7 * (v52 * 6.0));
        v57 = *(float64x2_t *)(v16 + 192);
        v58 = vmulq_f64(vaddq_f64((float64x2_t)vdupq_lane_s64(_D7, 0), vmulq_f64(_Q0, vaddq_f64(_Q0, _Q0))), (float64x2_t)vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL));
        v59 = vaddq_f64(v57, v57);
        v60 = vmulq_n_f64(v59, _Q0.f64[0]);
        v242 = vmlaq_n_f64(vaddq_f64(v58, vmulq_laneq_f64(v60, _Q0, 1)), _Q0, v55);
        v61 = vmulq_n_f64(_Q0, v56);
        v62 = vmulq_n_f64(v61, _Q0.f64[0]);
        v63 = vmulq_n_f64(v61, _D6);
        v64 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v60.f64[0], 0);
        v64.f64[0] = vmuld_lane_f64(6.0, v57, 1) * _Q0.f64[0];
        v65 = vaddq_f64(v64, vmulq_laneq_f64(v59, _Q0, 1));
        v62.f64[0] = v55 + v62.f64[0];
        v66 = vaddq_f64(v65, v62);
        *(_QWORD *)&v65.f64[0] = vdupq_laneq_s64((int64x2_t)v65, 1).u64[0];
        v65.f64[1] = vmuld_lane_f64(6.0 * v57.f64[0], _Q0, 1) + v60.f64[1];
        v63.f64[1] = v55 + v63.f64[1];
        v67 = vmulq_n_f64(vaddq_f64(v65, v63), v48);
        v238 = vmulq_n_f64(v66, v48);
        v68 = -(vmuld_n_f64(v238.f64[0], _Q0.f64[0]) + v238.f64[1] * _Q0.f64[1]);
        v240 = v67;
        v69 = -(vmuld_n_f64(v67.f64[0], _Q0.f64[0]) + v67.f64[1] * _Q0.f64[1]);
      }
      else
      {
        if (v38 < 0.00000001)
          return 0;
        v174 = 1.0 / v38;
        _Q2 = vmulq_n_f64(_Q18, v174);
        v176 = *(double *)(v16 + 168);
        v177 = *(double *)(v16 + 176);
        v178 = *(double *)(v16 + 184);
        _D6 = vmuld_lane_f64(v174, _Q18, 1);
        __asm { FMLA            D7, D6, V2.D[1] }
        v181 = v176 * _D7 + 1.0 + _D7 * _D7 * (v177 + v178 * _D7);
        v182 = v176 + v176 + _D7 * (v177 * 4.0 + _D7 * (v178 * 6.0));
        v183 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v181, 0);
        v242 = vmulq_n_f64(_Q2, v181);
        v184 = vmulq_n_f64(_Q2, v182);
        v185 = vmulq_n_f64(v184, _Q2.f64[0]);
        v186 = vmulq_n_f64(v184, _D6);
        v187.f64[0] = v185.f64[0];
        v187.f64[1] = v186.f64[1];
        v188 = vaddq_f64(v183, v187);
        v187.f64[0] = v188.f64[0];
        v187.f64[1] = v185.f64[1];
        v188.f64[0] = v186.f64[0];
        v189 = vmulq_n_f64(v188, v174);
        v238 = vmulq_n_f64(v187, v174);
        v68 = -(vmuld_n_f64(v238.f64[0], _Q2.f64[0]) + v238.f64[1] * _Q2.f64[1]);
        v240 = v189;
        v69 = -(vmuld_n_f64(v189.f64[0], _Q2.f64[0]) + v189.f64[1] * _Q2.f64[1]);
      }
      v239 = v68;
      v241 = v69;
      v40 = *(_DWORD *)(v16 + 992);
      if (v40 == -1)
        goto LABEL_51;
      goto LABEL_53;
    }
LABEL_38:
    *(_QWORD *)&v71 = vextq_s8((int8x16_t)_Q18, (int8x16_t)_Q18, 8uLL).u64[0];
    _D0 = _Q18.f64[1];
    __asm { FMLA            D2, D0, V18.D[1] }
    if (_D2 >= 0.00000001)
    {
      v74 = v38 * v38 + _D2;
      v75 = sqrt(_D2);
      v195 = v38;
      v198 = _Q18;
      v190 = _D2;
      v191 = v71;
      v76 = atan2(v75, v38);
      _Q18 = v198;
      v77 = *(int64x2_t *)(v16 + 184);
      v78 = *(int64x2_t *)(v16 + 168);
      v79 = (float64x2_t)vzip2q_s64(v78, v77);
      v80 = (float64x2_t)vzip1q_s64(v78, v77);
      v81 = vmulq_n_f64(vaddq_f64(vmulq_f64(v80, (float64x2_t)xmmword_210312E10), vmulq_n_f64(vmulq_f64(v79, (float64x2_t)xmmword_210312E20), v76 * v76)), v76 * v76);
      v82 = v76 * v76 * (v76 * v76);
      v83 = v81.f64[0] + vmuld_lane_f64(v82, v81, 1) + 1.0;
      v84 = vmulq_n_f64(vaddq_f64(v80, vmulq_n_f64(v79, v76 * v76)), v76 * v76);
      v71 = v191;
      v85 = v76 + v76 * (v84.f64[0] + vmuld_lane_f64(v82, v84, 1));
LABEL_48:
      v88 = v85 / v75;
      v101 = v83 / v74;
      v90 = vmulq_n_f64(_Q18, (v195 * (v83 / v74) - v88) / v190);
      v89 = -v101;
      v91 = vextq_s8((int8x16_t)v90, (int8x16_t)v90, 8uLL).u64[0];
      goto LABEL_49;
    }
    goto LABEL_41;
  }
  if (v39 > 5)
  {
    if (v39 == 6)
    {
      v70 = 1.0;
      if (v38 != 0.0)
        v70 = 1.0 / v38;
      v194 = v70;
      v197 = vmulq_n_f64(_Q18, v70);
      v245 = v197;
      sub_20EB2837C(&v242, v243.f64, &v245, (double *)(v16 + 168), (float64x2_t *)(v16 + 192), (double *)(v16 + 208));
      v238.f64[0] = v194 * v243.f64[0];
      v238.f64[1] = v194 * v243.f64[1];
      v239 = v194 * (-v243.f64[0] * v197.f64[0] - vmuld_lane_f64(v243.f64[1], v197, 1));
      v240.f64[0] = v194 * v244.f64[0];
      v240.f64[1] = v194 * v244.f64[1];
      v241 = v194 * (-v244.f64[0] * v197.f64[0] - vmuld_lane_f64(v244.f64[1], v197, 1));
      v40 = *(_DWORD *)(v16 + 992);
      if (v40 != -1)
        goto LABEL_53;
      goto LABEL_51;
    }
    v41 = sub_20EB3345C(v16, &v242, (uint64_t)&v238, &v236, 0);
LABEL_45:
    if ((v41 & 1) == 0)
      return 0;
    goto LABEL_50;
  }
  if (v39 != 5)
    goto LABEL_38;
  if (!sub_20EB29218(v242.f64, (uint64_t)&v238, &v236, (int64x2_t *)(v16 + 168)))
    return 0;
LABEL_50:
  v40 = *(_DWORD *)(v16 + 992);
  if (v40 == -1)
  {
LABEL_51:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v40 = *(_DWORD *)(v16 + 992);
  }
LABEL_53:
  if (!v40)
  {
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  v104 = *(double *)v16;
  v105 = *(double *)(v16 + 32);
  v106.f64[0] = *(float64_t *)v16;
  v106.f64[1] = v105;
  v107.f64[0] = *(float64_t *)(v16 + 16);
  v107.f64[1] = *(float64_t *)(v16 + 40);
  v108 = vaddq_f64(v107, vmulq_f64(v106, v242));
  v109 = (int8x16_t)v238;
  v110 = v239;
  v111 = v241;
  v112 = (int8x16_t)v240;
  *a3 = vsubq_f64(v108, *(float64x2_t *)(a1 + 8));
  if (*(_BYTE *)(v8 + 20))
  {
    _V16.D[1] = v200.f64[1];
    _V22.D[1] = v201.f64[1];
    _D20 = v209;
    __asm
    {
      FMLA            D7, D20, V16.D[1]
      FMLA            D17, D20, V22.D[1]
    }
    _V22.D[1] = v202.f64[1];
    __asm { FMLA            D19, D20, V22.D[1] }
    v120 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v207, v200.f64[0]), v206, v200, 1), v208, v205);
    _Q7.f64[0] = _D7 + v29 * v205;
    _Q16 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v207, v201.f64[0]), v206, v201, 1), v208, v204);
    _Q18 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v207, v202.f64[0]), v206, v202, 1), v208, v203);
    v124 = _D19 + v29 * v203;
    v125 = (float64x2_t)vzip1q_s64(v120, (int64x2_t)_Q16);
    _Q6 = (float64x2_t)vzip2q_s64(v120, (int64x2_t)_Q16);
    v127 = vmlaq_laneq_f64(vmulq_n_f64(v125, v210.f64[0]), _Q6, v210, 1);
    _D22 = v210.f64[1];
    __asm { FMLA            D16, D22, V18.D[1] }
    v129 = vmlaq_laneq_f64(vmulq_n_f64(v125, v211.f64[0]), _Q6, v211, 1);
    _D24 = v211.f64[1];
    __asm { FMLA            D23, D24, V18.D[1] }
    v132 = vmlaq_laneq_f64(vmulq_n_f64(v125, v212.f64[0]), _Q6, v212, 1);
    _D24 = v212.f64[1];
    __asm { FMLA            D6, D24, V18.D[1] }
    _Q7.f64[1] = _D17 + v29 * v204;
    _Q21 = vmlaq_n_f64(v127, _Q7, v215);
    v135 = vmlaq_n_f64(v129, _Q7, v214);
    _D17 = _D23 + v124 * v214;
    v137 = vmlaq_n_f64(v132, _Q7, v213);
    v138 = _Q6.f64[0] + v124 * v213;
    _Q18.f64[1] = v216.f64[1];
    _V19.D[1] = v217.f64[1];
    v140 = vmlaq_laneq_f64(vmulq_n_f64(_Q21, v216.f64[0]), v135, v216, 1);
    __asm { FMLA            D7, D17, V18.D[1] }
    v141 = vmlaq_laneq_f64(vmulq_n_f64(_Q21, v217.f64[0]), v135, v217, 1);
    __asm { FMLA            D24, D17, V19.D[1] }
    _V25.D[1] = v218.f64[1];
    v144 = vmlaq_laneq_f64(vmulq_n_f64(_Q21, v218.f64[0]), v135, v218, 1);
    __asm { FMLA            D21, D17, V25.D[1] }
    v145 = vmlaq_n_f64(v140, v137, v221);
    _Q7.f64[0] = _Q7.f64[0] + v138 * v221;
    v146.f64[1] = v219.f64[1];
    _Q16.f64[1] = *((float64_t *)&v220 + 1);
    v147 = vmlaq_n_f64(v141, v137, *(double *)&v220);
    _Q16.f64[0] = _D24 + v138 * *(double *)&v220;
    v148 = vmlaq_n_f64(v144, v137, v219.f64[0]);
    v146.f64[0] = _Q21.f64[0] + v138 * v219.f64[0];
    v137.f64[0] = v104;
    v149.f64[0] = 0.0;
    v149.f64[1] = v105;
    *(_QWORD *)&v150 = vextq_s8(v109, v109, 8uLL).u64[0];
    v151 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v137.f64[0], *(double *)v109.i64), v149, *(double *)v112.i64);
    v152 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v137.f64[0], v150), v149, *(double *)vextq_s8(v112, v112, 8uLL).i64);
    v153 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v137.f64[0], v110), v149, v111);
    _Q21 = v223;
    v155 = (int8x16_t)vmulq_n_f64(v145, v224.f64[0]);
    v156 = vmlaq_laneq_f64(vmulq_n_f64(v145, v223.f64[0]), v147, v223, 1);
    v157 = (int8x16_t)vmulq_n_f64(v147, v224.f64[0]);
    _Q4 = vmlaq_n_f64(v156, v148, v222.f64[0]);
    v159 = (int8x16_t)vmulq_n_f64(v148, v224.f64[0]);
    v160 = vmlaq_laneq_f64(vmulq_n_f64(v151, _Q4.f64[0]), v152, _Q4, 1);
    __asm { FMLA            D4, D16, V21.D[1] }
    v161 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v151, *(double *)v155.i64), v152, *(double *)vextq_s8(v155, v155, 8uLL).i64), v153, vmulq_f64(v224, _Q7).f64[0]);
    v162 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v151, *(double *)v157.i64), v152, *(double *)vextq_s8(v157, v157, 8uLL).i64), v153, vmulq_f64(v224, _Q16).f64[0]);
    v163 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v151, *(double *)v159.i64), v152, *(double *)vextq_s8(v159, v159, 8uLL).i64), v153, vmulq_f64(v224, v146).f64[0]);
    v164 = vmlaq_n_f64(v160, v153, _Q4.f64[0] + v146.f64[0] * v222.f64[0]);
    *(_QWORD *)&_Q21.f64[1] = vextq_s8((int8x16_t)_Q21, (int8x16_t)_Q21, 8uLL).u64[0];
    v165 = vnegq_f64(_Q21);
    *(_QWORD *)&v153.f64[0] = *(_OWORD *)&vnegq_f64(v222);
    v166 = vsubq_f64(vmulq_n_f64(v162, v153.f64[0]), vmulq_laneq_f64(v163, v165, 1));
    v167 = vsubq_f64(vmulq_n_f64(v163, v165.f64[0]), vmulq_n_f64(v161, v153.f64[0]));
    v168 = vsubq_f64(vmulq_laneq_f64(v161, v165, 1), vmulq_n_f64(v162, v165.f64[0]));
    v169 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v166, *(double *)(v8 + 56)), v167, *(float64x2_t *)(v8 + 56), 1), v168, *(double *)(v8 + 72));
    v170 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v166, *(double *)(v8 + 80)), v167, *(float64x2_t *)(v8 + 80), 1), v168, *(double *)(v8 + 96));
    v171 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v166, *(double *)(v8 + 104)), v167, *(float64x2_t *)(v8 + 104), 1), v168, *(double *)(v8 + 120));
    v172 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v169, v232.f64[0]), v170, v232, 1), v171, v233);
    v173 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v169, v234.f64[0]), v170, v234, 1), v171, v235);
    *a4 = v164;
    a4[1] = v172;
    a4[2] = v173;
  }
  return 1;
}

uint64_t sub_20FC6F874(uint64_t a1, uint64_t a2, float64x2_t *a3, float64x2_t a4, float64x2_t a5)
{
  float64x2_t v5;
  float64x2_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v15;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v24;
  float64x2_t v28;
  float64x2_t v31;
  double v34;
  unsigned int v35;
  uint64_t v36;
  double v37;
  char v38;
  double v39;
  double v41;
  double v44;
  float64x2_t v45;
  float64x2_t v49;
  float64x2_t v50;
  double v51;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  int v59;
  int v60;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  int v68;
  int v69;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  int v77;
  int v78;
  float64x2_t v80;
  double v81;
  int v84;
  double v85;
  int v86;
  double v87;
  float64x2_t v88;
  double v89;
  double v91;
  double v92;
  double v93;
  double v94;
  float64x2_t v95;
  float64x2_t v96;
  BOOL v97;
  double v98;
  BOOL v100;
  int v101;
  double v102;
  int v103;
  double v104;
  double v105;
  double v106;
  double v107;
  BOOL v108;
  float64x2_t v109;
  double v110;
  BOOL v112;
  int v113;
  double v114;
  int v115;
  double v116;
  float64x2_t v117;
  float64x2_t v118;
  double v119;
  double v120;
  double v124;
  float64x2_t v125;
  unsigned int v126;
  BOOL v127;
  double v128;
  double v129;
  double v130;
  float64x2_t v131;
  double v132;
  float64x2_t v133;
  float64x2_t v134;
  double v135;
  float64x2_t v136;
  uint64_t v137;

  v137 = *MEMORY[0x24BDAC8D0];
  v8 = *(float64x2_t **)(*(_QWORD *)a2 + 24);
  a4.f64[0] = *(float64_t *)(*(_QWORD *)a2 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 24);
  v11 = *(_QWORD *)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 56);
  a5.f64[0] = v8[5].f64[0];
  _Q2 = v8[4];
  *(_QWORD *)&v15 = *(_OWORD *)&vmulq_f64(a4, a5);
  _Q0 = vmulq_n_f64(_Q2, a4.f64[0]);
  _D4 = *(_QWORD *)(v12 + 40);
  __asm { FMLA            D2, D4, V0.D[1] }
  _Q2.f64[0] = vmlad_n_f64(_Q2.f64[0], *(double *)(v12 + 64), v15);
  _D4 = *(_QWORD *)(v10 + 40);
  v21 = *(float64x2_t *)(v10 + 48);
  v5.f64[0] = *(float64_t *)(v12 + 88);
  v22 = vaddq_f64(_Q2, v5);
  _Q3 = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v12, _Q0.f64[0]), *(float64x2_t *)(v12 + 24), _Q0, 1), *(float64x2_t *)(v12 + 48), v15), *(float64x2_t *)(v12 + 72));
  v24 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v10, _Q3.f64[0]), *(float64x2_t *)(v10 + 24), _Q3, 1), v21, v22.f64[0]);
  __asm { FMLA            D0, D4, V3.D[1] }
  _Q0.f64[0] = vmlad_n_f64(_Q0.f64[0], *(double *)(v10 + 64), v22.f64[0]);
  v22.f64[0] = *(float64_t *)(v10 + 88);
  _Q0 = vaddq_f64(v22, _Q0);
  v22.f64[0] = *(float64_t *)(v9 + 16);
  _Q6 = *(float64x2_t *)(v9 + 48);
  v21.f64[0] = *(float64_t *)(v9 + 88);
  *(_QWORD *)&_Q0.f64[0] = *(_OWORD *)&vsubq_f64(_Q0, v21);
  _Q1 = vsubq_f64(vaddq_f64(*(float64x2_t *)(v10 + 72), v24), *(float64x2_t *)(v9 + 72));
  v22.f64[1] = *(float64_t *)(v9 + 40);
  v28 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v9, *(int64x2_t *)(v9 + 24)), _Q1.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)v9, *(int64x2_t *)(v9 + 24)), _Q1, 1), v22, _Q0.f64[0]);
  _Q2 = vmulq_f64(_Q6, _Q1);
  _Q1.f64[0] = _Q1.f64[1];
  __asm { FMLA            D2, D1, V6.D[1] }
  _Q2.f64[0] = vmlad_n_f64(_Q2.f64[0], *(double *)(v9 + 64), _Q0.f64[0]);
  _Q0.f64[0] = *(float64_t *)(v11 + 16);
  _Q5 = *(_OWORD *)(v11 + 48);
  _Q6.f64[0] = *(float64_t *)(v11 + 88);
  *(_QWORD *)&_Q2.f64[0] = *(_OWORD *)&vsubq_f64(_Q2, _Q6);
  v31 = vsubq_f64(v28, *(float64x2_t *)(v11 + 72));
  _Q0.f64[1] = *(float64_t *)(v11 + 40);
  _Q18 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v11, *(int64x2_t *)(v11 + 24)), v31.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)v11, *(int64x2_t *)(v11 + 24)), v31, 1), _Q0, _Q2.f64[0]);
  _Q0.f64[0] = v31.f64[1];
  __asm { FMLA            D17, D0, V5.D[1] }
  v34 = vmlad_n_f64(_D17, *(double *)(v11 + 64), _Q2.f64[0]);
  v134 = _Q18;
  v135 = v34;
  v35 = *(_DWORD *)(v13 + 992);
  if (v35 != -1)
  {
    v36 = *(_QWORD *)&v34;
    if (v35 <= 7)
      goto LABEL_3;
LABEL_10:
    if (v35 > 0xB)
    {
      if (v35 <= 0xD)
      {
        if (v35 != 13 || v34 < 0.00000001)
          return 0;
        _Q0 = vdivq_f64(_Q18, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v34, 0));
        v41 = (*(double *)v13 + *(double *)(v13 + 32)) * 0.5;
        _D3 = _Q0.f64[1];
        __asm { FMLA            D2, D3, V0.D[1] }
        v44 = v41 * (_D2 * v41);
        v45 = vdivq_f64(_Q0, (float64x2_t)vdupq_lane_s64(COERCE__INT64(v44* (*(double *)(v13 + 168)+ v41 * *(double *)(v13 + 224)+ v44* (*(double *)(v13 + 176)+ v41 * *(double *)(v13 + 232)+ v44* (*(double *)(v13 + 184)+ v41 * *(double *)(v13 + 240)+ v44* (*(double *)(v13 + 192)+ v41 * *(double *)(v13 + 248)+ v44* (*(double *)(v13 + 200)+ v41 * *(double *)(v13 + 256)+ v44
                                    * (*(double *)(v13 + 208)
                                     + v41 * *(double *)(v13 + 264)
                                     + v44 * (*(double *)(v13 + 216) + *(double *)(v13 + 272) * v41 + v44 * 0.0)))))))
                               / 100.0
                               + 1.0),
                               0));
LABEL_148:
        v136 = v45;
LABEL_149:
        v126 = *(_DWORD *)(v13 + 992);
        if (v126 == -1)
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v126 = *(_DWORD *)(v13 + 992);
          if (v126 <= 7)
            goto LABEL_151;
        }
        else if (v126 <= 7)
        {
LABEL_151:
          if (v126 <= 3)
          {
            if (v126 <= 1)
            {
              if (!v126)
              {
                sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
                abort();
              }
              goto LABEL_159;
            }
            v49 = v136;
            if (v126 == 2)
              goto LABEL_165;
LABEL_166:
            v120 = v49.f64[1];
            v130 = *(double *)v13 * v49.f64[0] + vmuld_lane_f64(*(double *)(v13 + 8), v49, 1);
            goto LABEL_169;
          }
          v127 = v126 == 5;
          if (v126 > 5)
          {
LABEL_159:
            v128 = *(double *)(v13 + 8);
            v120 = v136.f64[1];
            v129 = *(double *)v13 * v136.f64[0];
LABEL_168:
            v130 = v129 + v128 * v120;
            goto LABEL_169;
          }
          goto LABEL_161;
        }
        if (v126 > 0xB)
          goto LABEL_159;
        v127 = v126 == 9;
        if (v126 > 9)
          goto LABEL_159;
LABEL_161:
        v119 = *(double *)v13;
        v118.f64[0] = v136.f64[0];
        if (v127)
        {
          v129 = v119 * v136.f64[0];
          v128 = *(double *)(v13 + 8);
          v120 = v136.f64[1];
          goto LABEL_168;
        }
        v120 = v136.f64[1];
LABEL_167:
        v129 = v119 * v118.f64[0];
        v128 = *(double *)(v13 + 8);
        goto LABEL_168;
      }
      if (v35 == 14)
        v38 = sub_20EB247C0(&v136, (uint64_t)&v134, (double *)(v13 + 168), (*(double *)v13 + *(double *)(v13 + 32)) * 0.5);
      else
        v38 = sub_20EB3E39C(v13, &v136, &v134);
    }
    else if (v35 > 9)
    {
      if (v35 == 10)
        v38 = sub_20EB24288(&v136, (uint64_t)&v134, (double *)(v13 + 168), (*(double *)v13 + *(double *)(v13 + 32)) * 0.5);
      else
        v38 = sub_20EB3A2E4(v13, &v136, &v134);
    }
    else
    {
      if (v35 != 9)
      {
        _D0 = _Q18.f64[1];
        __asm { FMLA            D4, D0, V18.D[1] }
        v54 = sqrt(_D4);
        v55 = fabs(v34);
        v56 = fabs(v54);
        v57 = v55 / v56;
        if (v55 >= v56)
          v57 = v56 / v55;
        if (v57 <= 0.414213562)
        {
          v59 = 1;
          v60 = 2;
          v58 = v57;
          if (_D4 < 0.00000001)
            goto LABEL_111;
        }
        else
        {
          v58 = (v56 - v55) / (v55 + v56);
          if (v55 >= v56)
            v58 = -v58;
          v59 = -1;
          v60 = 1;
          if (_D4 < 0.00000001)
            goto LABEL_111;
        }
        if (v55 < v56)
          v59 = -v59;
        else
          v60 = v57 > 0.414213562;
        v95 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v58 * v58), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v58 * v58), (float64x2_t)xmmword_210315370), v58 * v58 * (v58 * v58))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v58 * v58), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v58 * v58), (float64x2_t)xmmword_210315380), v58 * v58 * (v58 * v58))), v58 * v58 * (v58 * v58) * (v58 * v58 * (v58 * v58))));
        v96 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v95, 1);
        v97 = v54 == INFINITY && v55 == INFINITY;
        v98 = v58 + v58 * vdivq_f64(v95, v96).f64[0];
        if (v97)
          v98 = 0.785398163;
        if (v54 == 0.0 && v34 == 0.0)
          v98 = 0.0;
        v100 = v36 < 0;
        if (v36 >= 0)
          v101 = v60;
        else
          v101 = 4 - v60;
        if (v100)
          v59 = -v59;
        if (v54 < 0.0)
          v101 = -v101;
        v102 = (double)v101;
        if (v54 >= 0.0)
          v103 = v59;
        else
          v103 = -v59;
        v104 = v102 * 3.061617e-17 + v102 * 0.785398163 + v98 * (double)v103;
        v105 = v104
             * (v104
              * v104
              * (*(double *)(v13 + 168)
               + v104
               * v104
               * (*(double *)(v13 + 176)
                + v104
                * v104
                * (*(double *)(v13 + 184)
                 + v104
                 * v104
                 * (*(double *)(v13 + 192)
                  + v104
                  * v104
                  * (*(double *)(v13 + 200)
                   + v104 * v104 * (*(double *)(v13 + 208) + v104 * v104 * *(double *)(v13 + 216)))))))
              + 1.0);
        v106 = 1.0 / v54;
        goto LABEL_139;
      }
      v38 = sub_20EB3641C(v13, &v136, &v134);
    }
LABEL_80:
    if ((v38 & 1) != 0)
      goto LABEL_149;
    return 0;
  }
  v132 = v34;
  v133 = _Q18;
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v35 = *(_DWORD *)(v13 + 992);
  v34 = v132;
  _Q18 = v133;
  v36 = *(_QWORD *)&v132;
  if (v35 > 7)
    goto LABEL_10;
LABEL_3:
  if (v35 > 3)
  {
    if (v35 <= 5)
    {
      if (v35 == 5)
      {
        v39 = vaddvq_f64(vmulq_f64(_Q18, _Q18));
        if (v39 >= 0.00000001)
        {
          v91 = sqrt(v39);
          if (v91 <= v34)
          {
            v124 = v91 / v34 * 0.785398163 - v91 / v34 * (v91 / v34 + -1.0) * (v91 / v34 * 0.0663008339 + 0.244711287);
          }
          else
          {
            if (v91 <= -v34)
            {
              v93 = v91 / v34 * 0.785398163 - v91 / v34 * (-1.0 - v91 / v34) * (v91 / v34 * -0.0663008339 + 0.244711287);
              v94 = 3.14159265;
            }
            else
            {
              v92 = fabs(v34 / v91);
              v93 = v34 / v91 * (v92 + -1.0) * (v92 * 0.0663008339 + 0.244711287) + v34 / v91 * -0.785398163;
              v94 = 1.57079633;
            }
            v124 = v93 + v94;
          }
          v125 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v13 + 168), *(int64x2_t *)(v13 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v13 + 168), *(int64x2_t *)(v13 + 184)), v124 * v124)), v124 * v124);
          v37 = (v124 + v124 * (v125.f64[0] + vmuld_lane_f64(v124 * v124 * (v124 * v124), v125, 1))) / v91;
          goto LABEL_147;
        }
        if (v34 != 0.0)
        {
LABEL_7:
          v37 = 1.0 / v34;
LABEL_147:
          v45 = vmulq_n_f64(_Q18, v37);
          goto LABEL_148;
        }
        return 0;
      }
      _D0 = _Q18.f64[1];
      __asm { FMLA            D4, D0, V18.D[1] }
      v63 = sqrt(_D4);
      v64 = fabs(v34);
      v65 = fabs(v63);
      v66 = v64 / v65;
      if (v64 >= v65)
        v66 = v65 / v64;
      if (v66 <= 0.414213562)
      {
        v68 = 1;
        v69 = 2;
        v67 = v66;
        if (_D4 >= 0.00000001)
        {
LABEL_115:
          if (v64 < v65)
            v68 = -v68;
          else
            v69 = v66 > 0.414213562;
          v108 = v63 == INFINITY && v64 == INFINITY;
          v109 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v67 * v67), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v67 * v67), (float64x2_t)xmmword_210315370), v67 * v67 * (v67 * v67))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v67 * v67), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v67 * v67), (float64x2_t)xmmword_210315380), v67 * v67 * (v67 * v67))), v67 * v67 * (v67 * v67) * (v67 * v67 * (v67 * v67))));
          v110 = v67 + v67 * vdivq_f64(v109, (float64x2_t)vdupq_laneq_s64((int64x2_t)v109, 1)).f64[0];
          if (v108)
            v110 = 0.785398163;
          if (v63 == 0.0 && v34 == 0.0)
            v110 = 0.0;
          v112 = v36 < 0;
          if (v36 >= 0)
            v113 = v69;
          else
            v113 = 4 - v69;
          if (v112)
            v68 = -v68;
          if (v63 < 0.0)
            v113 = -v113;
          v114 = (double)v113;
          if (v63 >= 0.0)
            v115 = v68;
          else
            v115 = -v68;
          v116 = v114 * 3.061617e-17 + v114 * 0.785398163 + v110 * (double)v115;
          v117 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v13 + 168), *(int64x2_t *)(v13 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v13 + 168), *(int64x2_t *)(v13 + 184)), v116 * v116)), v116 * v116);
          v105 = v116 + v116 * (v117.f64[0] + vmuld_lane_f64(v116 * v116 * (v116 * v116), v117, 1));
          v106 = 1.0 / v63;
LABEL_139:
          v107 = v106 * v105;
          goto LABEL_140;
        }
      }
      else
      {
        v67 = (v65 - v64) / (v64 + v65);
        if (v64 >= v65)
          v67 = -v67;
        v68 = -1;
        v69 = 1;
        if (_D4 >= 0.00000001)
          goto LABEL_115;
      }
LABEL_111:
      v107 = 1.0 / v34;
LABEL_140:
      v118 = vmulq_n_f64(_Q18, v107);
      v119 = *(double *)v13;
      v120 = v118.f64[1];
      goto LABEL_167;
    }
    if (v35 == 6)
    {
      v50 = vaddq_f64(vdivq_f64(_Q18, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v34, 0)), *(float64x2_t *)(v13 + 192));
      v51 = sqrt(vaddvq_f64(vmulq_f64(v50, v50)));
      v45 = vaddq_f64(*(float64x2_t *)(v13 + 208), vmulq_n_f64(v50, v51 * (v51 * (*(double *)(v13 + 168) + v51 * (*(double *)(v13 + 176) + *(double *)(v13 + 184) * v51)))+ 1.0));
      goto LABEL_148;
    }
    v38 = sub_20EB31FFC(v13, &v136, &v134);
    goto LABEL_80;
  }
  if (v35 <= 1)
  {
    if (!v35)
    {
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    if (v34 >= 0.00000001)
      goto LABEL_7;
    return 0;
  }
  if (v35 != 2)
  {
    _D0 = _Q18.f64[1];
    __asm { FMLA            D4, D0, V18.D[1] }
    v72 = sqrt(_D4);
    v73 = fabs(v34);
    v74 = fabs(v72);
    v75 = v73 / v74;
    if (v73 >= v74)
      v75 = v74 / v73;
    if (v75 <= 0.414213562)
    {
      v77 = 1;
      v78 = 2;
      v76 = v75;
      if (_D4 >= 0.00000001)
      {
LABEL_53:
        if (v73 < v74)
          v77 = -v77;
        else
          v78 = v75 > 0.414213562;
        _ZF = v72 == INFINITY && v73 == INFINITY;
        v80 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v76 * v76), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v76 * v76), (float64x2_t)xmmword_210315370), v76 * v76 * (v76 * v76))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v76 * v76), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v76 * v76), (float64x2_t)xmmword_210315380), v76 * v76 * (v76 * v76))), v76 * v76 * (v76 * v76) * (v76 * v76 * (v76 * v76))));
        v81 = v76 + v76 * vdivq_f64(v80, (float64x2_t)vdupq_laneq_s64((int64x2_t)v80, 1)).f64[0];
        if (_ZF)
          v81 = 0.785398163;
        if (v72 == 0.0 && v34 == 0.0)
          v81 = 0.0;
        _NF = v36 < 0;
        if (v36 >= 0)
          v84 = v78;
        else
          v84 = 4 - v78;
        if (_NF)
          v77 = -v77;
        if (v72 < 0.0)
          v84 = -v84;
        v85 = (double)v84;
        if (v72 >= 0.0)
          v86 = v77;
        else
          v86 = -v77;
        v87 = v85 * 3.061617e-17 + v85 * 0.785398163 + v81 * (double)v86;
        v88 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v13 + 168), *(int64x2_t *)(v13 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v13 + 168), *(int64x2_t *)(v13 + 184)), v87 * v87)), v87 * v87);
        v89 = 1.0 / v72 * (v87 + v87 * (v88.f64[0] + vmuld_lane_f64(v87 * v87 * (v87 * v87), v88, 1)));
        goto LABEL_114;
      }
    }
    else
    {
      v76 = (v74 - v73) / (v73 + v74);
      if (v73 >= v74)
        v76 = -v76;
      v77 = -1;
      v78 = 1;
      if (_D4 >= 0.00000001)
        goto LABEL_53;
    }
    v89 = 1.0 / v34;
LABEL_114:
    v49 = vmulq_n_f64(_Q18, v89);
    goto LABEL_166;
  }
  if (*(_DWORD *)(v13 + 212))
  {
    if (v34 < 0.00000001)
      return 0;
    _Q2 = vmulq_n_f64(_Q18, 1.0 / v34);
    _D1 = vmuld_lane_f64(1.0 / v34, _Q18, 1);
    __asm { FMLA            D3, D1, V2.D[1] }
    v49 = vaddq_f64(vaddq_f64(vmulq_f64(vaddq_f64((float64x2_t)vdupq_lane_s64(_D3, 0), vmulq_f64(_Q2, vaddq_f64(_Q2, _Q2))), (float64x2_t)vextq_s8(*(int8x16_t *)(v13 + 192), *(int8x16_t *)(v13 + 192), 8uLL)), vmulq_laneq_f64(vmulq_n_f64(vaddq_f64(*(float64x2_t *)(v13 + 192), *(float64x2_t *)(v13 + 192)), _Q2.f64[0]), _Q2, 1)), vmulq_n_f64(_Q2, *(double *)(v13 + 168) * *(double *)&_D3+ 1.0+ *(double *)&_D3 * (*(double *)(v13 + 176) * *(double *)&_D3)+ *(double *)&_D3 * (*(double *)&_D3 * (*(double *)(v13 + 184) * *(double *)&_D3))));
  }
  else
  {
    if (v34 < 0.00000001)
      return 0;
    _Q2 = vmulq_n_f64(_Q18, 1.0 / v34);
    _D1 = vmuld_lane_f64(1.0 / v34, _Q18, 1);
    __asm { FMLA            D3, D1, V2.D[1] }
    v49 = vmulq_n_f64(_Q2, *(double *)(v13 + 168) * _D3 + 1.0 + _D3 * _D3 * (*(double *)(v13 + 176) + *(double *)(v13 + 184) * _D3));
  }
LABEL_165:
  v130 = vaddvq_f64(vmulq_f64(*(float64x2_t *)v13, v49));
  v120 = v49.f64[1];
LABEL_169:
  v131.f64[0] = v130 + *(double *)(v13 + 16);
  v131.f64[1] = v120 * *(double *)(v13 + 32) + *(double *)(v13 + 40);
  *a3 = vsubq_f64(v131, *(float64x2_t *)(a1 + 8));
  return 1;
}

uint64_t sub_20FC706B4(uint64_t a1, uint64_t *a2, float64x2_t *a3, float64x2_t *a4, float64x2_t a5, float64x2_t a6, double a7, float64x2_t _Q3)
{
  uint64_t v11;
  float64x2_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  float64x2_t v20;
  float64x2_t v25;
  float64x2_t v27;
  float64x2_t v28;
  double v29;
  float64x2_t v31;
  float64x2_t v33;
  float64x2_t v37;
  double v39;
  unsigned int v40;
  int v41;
  char v42;
  float64x2_t v46;
  double v49;
  double v51;
  double v52;
  double v53;
  double v56;
  double v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  double v68;
  double v69;
  double v72;
  double v73;
  long double v74;
  int64x2_t v75;
  int64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  double v80;
  double v81;
  float64x2_t v82;
  double v83;
  double v86;
  double v87;
  float64x2_t v88;
  unint64_t v89;
  long double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  float64x2_t v100;
  float64x2_t v101;
  double v102;
  float64_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  double v107;
  int8x16_t v108;
  double v109;
  int8x16_t v110;
  int64x2_t v118;
  float64x2_t v119;
  double v122;
  float64x2_t v123;
  float64x2_t v125;
  float64x2_t v127;
  float64x2_t v130;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  double v145;
  double v147;
  double v148;
  double v149;
  double v152;
  double v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  double v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  double v173;
  double v174;
  double v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  double v183;
  double v184;
  double v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  double v189;
  double v190;
  double v191;
  float64x2_t v192;
  double v193;
  float64x2_t v194;
  double v195;
  float64x2_t v196;
  double v197;
  float64x2_t v198;
  double v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  uint64_t v204;

  v204 = *MEMORY[0x24BDAC8D0];
  v11 = *a2;
  v12 = *(float64x2_t **)(*a2 + 24);
  a5.f64[0] = *(float64_t *)(*a2 + 32);
  v14 = *(_QWORD *)(a1 + 40);
  v13 = *(_QWORD *)(a1 + 48);
  v16 = *(_QWORD *)(a1 + 24);
  v15 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 56);
  a6.f64[0] = v12[5].f64[0];
  v193 = a6.f64[0];
  *(_QWORD *)&v18 = *(_OWORD *)&vmulq_f64(a5, a6);
  v192 = v12[4];
  _Q0 = vmulq_n_f64(v192, a5.f64[0]);
  v186 = *(float64x2_t *)v16;
  v187 = *(float64x2_t *)(v16 + 24);
  v188 = *(float64x2_t *)(v16 + 48);
  v189 = *(double *)(v16 + 64);
  v20 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v16, _Q0.f64[0]), v187, _Q0, 1), v188, v18);
  v190 = *(double *)(v16 + 40);
  v191 = *(double *)(v16 + 16);
  __asm { FMLA            D3, D4, V0.D[1] }
  _Q3.f64[0] = vmlad_n_f64(_Q3.f64[0], v189, v18);
  _Q0.f64[0] = *(float64_t *)(v16 + 88);
  v25 = vaddq_f64(_Q3, _Q0);
  _Q1 = vaddq_f64(v20, *(float64x2_t *)(v16 + 72));
  v180 = *(float64x2_t *)v14;
  v181 = *(float64x2_t *)(v14 + 24);
  v182 = *(float64x2_t *)(v14 + 48);
  v183 = *(double *)(v14 + 64);
  v27 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v14, _Q1.f64[0]), v181, _Q1, 1), v182, v25.f64[0]);
  v184 = *(double *)(v14 + 40);
  v185 = *(double *)(v14 + 16);
  __asm { FMLA            D3, D5, V1.D[1] }
  _Q3.f64[0] = vmlad_n_f64(_Q3.f64[0], v183, v25.f64[0]);
  v25.f64[0] = *(float64_t *)(v14 + 88);
  v28 = vaddq_f64(*(float64x2_t *)(v14 + 72), v27);
  v29 = *(double *)(v13 + 64);
  _Q6 = *(float64x2_t *)(v13 + 48);
  v27.f64[0] = *(float64_t *)(v13 + 88);
  v31 = vsubq_f64(vaddq_f64(v25, _Q3), v27);
  _Q1 = vsubq_f64(v28, *(float64x2_t *)(v13 + 72));
  v176 = *(float64x2_t *)(v13 + 24);
  v177 = *(float64x2_t *)v13;
  v179 = *(double *)(v13 + 40);
  v33.f64[0] = *(float64_t *)(v13 + 16);
  v33.f64[1] = v179;
  _Q2 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v13, (int64x2_t)v176), _Q1.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)v13, (int64x2_t)v176), _Q1, 1), v33, v31.f64[0]);
  _Q3 = vmulq_f64(_Q6, _Q1);
  _Q1.f64[0] = _Q1.f64[1];
  v178 = _Q6;
  __asm { FMLA            D3, D1, V6.D[1] }
  _Q3.f64[0] = vmlad_n_f64(_Q3.f64[0], v29, v31.f64[0]);
  _Q7 = *(float64x2_t *)(v15 + 48);
  v31.f64[0] = *(float64_t *)(v15 + 88);
  *(_QWORD *)&v31.f64[0] = *(_OWORD *)&vsubq_f64(_Q3, v31);
  v37 = vsubq_f64(_Q2, *(float64x2_t *)(v15 + 72));
  v170 = *(float64x2_t *)v15;
  v171 = *(float64x2_t *)(v15 + 24);
  v174 = *(double *)(v15 + 40);
  v175 = *(double *)(v15 + 16);
  _Q2.f64[0] = v175;
  _Q2.f64[1] = v174;
  _Q18 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v15, (int64x2_t)v171), v37.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)v15, (int64x2_t)v171), v37, 1), _Q2, v31.f64[0]);
  _Q2.f64[0] = v37.f64[1];
  v172 = _Q7;
  v173 = *(double *)(v15 + 64);
  __asm { FMLA            D1, D2, V7.D[1] }
  v39 = vmlad_n_f64(_Q1.f64[0], v173, v31.f64[0]);
  v194 = _Q18;
  v195 = v39;
  v40 = *(_DWORD *)(v17 + 992);
  if (v40 != -1)
  {
    if (v40 <= 7)
      goto LABEL_3;
LABEL_11:
    if (v40 > 0xB)
    {
      if (v40 <= 0xD)
      {
        if (v40 == 13 && v39 >= 0.00000001)
        {
          v203 = vdivq_f64(_Q18, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v39, 0));
          if (sub_20EB295B8(&v200, &v201, 0, (uint64_t)&v203, (double *)(v17 + 168), (*(double *)v17 + *(double *)(v17 + 32)) * 0.5))
          {
            _D0 = -v194.f64[1] / (v195 * v195);
            _V3.D[1] = v201.f64[1];
            _V4.D[1] = v202.f64[1];
            v46.f64[0] = 0.0;
            v46.f64[1] = 1.0 / v195;
            __asm { FMLA            D7, D0, V3.D[1] }
            v197 = _D7;
            v196 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)COERCE_UNSIGNED_INT64(1.0 / v195), v201.f64[0]), v46, v201, 1);
            __asm { FMLA            D2, D0, V4.D[1] }
            v199 = _D2;
            v198 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)COERCE_UNSIGNED_INT64(1.0 / v195), v202.f64[0]), v46, v202, 1);
            v41 = *(_DWORD *)(v17 + 992);
            if (v41 == -1)
              goto LABEL_52;
            goto LABEL_54;
          }
        }
        return 0;
      }
      if (v40 == 14)
        v42 = sub_20EB2498C(&v200, (uint64_t)&v196, 0, (uint64_t)&v194, (double *)(v17 + 168), (*(double *)v17 + *(double *)(v17 + 32)) * 0.5);
      else
        v42 = sub_20EB3F050(v17, &v200, (uint64_t)&v196, &v194, 0);
    }
    else if (v40 > 9)
    {
      if (v40 == 10)
        v42 = sub_20EB2450C(&v200, (uint64_t)&v196, 0, (uint64_t)&v194, (double *)(v17 + 168), (*(double *)v17 + *(double *)(v17 + 32)) * 0.5);
      else
        v42 = sub_20EB3AF98(v17, &v200, (uint64_t)&v196, &v194, 0);
    }
    else
    {
      if (v40 != 9)
      {
        *(_QWORD *)&v69 = vextq_s8((int8x16_t)_Q18, (int8x16_t)_Q18, 8uLL).u64[0];
        _D0 = _Q18.f64[1];
        __asm { FMLA            D2, D0, V18.D[1] }
        if (_D2 >= 0.00000001)
        {
          v72 = v39 * v39 + _D2;
          v73 = sqrt(_D2);
          v165 = v39;
          v169 = _Q18;
          v160 = _D2;
          v162 = v69;
          v91 = atan2(v73, v39);
          v92 = *(double *)(v17 + 168);
          v93 = *(double *)(v17 + 176);
          v94 = *(double *)(v17 + 184);
          v95 = *(double *)(v17 + 192);
          v96 = *(double *)(v17 + 200);
          v97 = *(double *)(v17 + 208);
          v98 = *(double *)(v17 + 216);
          _Q18 = v169;
          v81 = v91
              * v91
              * (v92 * 3.0
               + v91
               * v91
               * (v93 * 5.0
                + v91
                * v91
                * (v94 * 7.0
                 + v91
                 * v91
                 * (v95 * 9.0 + v91 * v91 * (v96 * 11.0 + v91 * v91 * (v97 * 13.0 + v91 * v91 * 15.0 * v98))))))
              + 1.0;
          v69 = v162;
          v83 = v91
              * (v91
               * v91
               * (v92
                + v91
                * v91
                * (v93 + v91 * v91 * (v94 + v91 * v91 * (v95 + v91 * v91 * (v96 + v91 * v91 * (v97 + v91 * v91 * v98))))))
               + 1.0);
          goto LABEL_49;
        }
LABEL_42:
        v86 = 1.0 / v39;
        v87 = -(v86 * v86);
        v88.f64[0] = 0.0;
        v89 = 0;
LABEL_50:
        v200 = vmulq_n_f64(_Q18, v86);
        *(_QWORD *)&v88.f64[1] = v89;
        v100 = vmulq_n_f64(v88, _Q18.f64[0]);
        v101 = vmulq_laneq_f64(v88, _Q18, 1);
        v196.f64[1] = v100.f64[1];
        v198.f64[0] = v101.f64[0];
        v197 = v87 * _Q18.f64[0];
        v196.f64[0] = v86 + v100.f64[0];
        v198.f64[1] = v86 + v101.f64[1];
        v199 = v87 * v69;
        goto LABEL_51;
      }
      v42 = sub_20EB372E0(v17, &v200, (uint64_t)&v196, &v194, 0);
    }
    goto LABEL_46;
  }
  v163 = v39;
  v166 = _Q18;
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v40 = *(_DWORD *)(v17 + 992);
  v39 = v163;
  _Q18 = v166;
  if (v40 > 7)
    goto LABEL_11;
LABEL_3:
  if (v40 <= 3)
  {
    if (v40 <= 1)
    {
      if (!v40)
      {
        sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
        abort();
      }
      if (v39 >= 0.00000001)
      {
        v200 = vmulq_n_f64(_Q18, 1.0 / v39);
        v196.f64[0] = 1.0 / v39;
        v198.f64[0] = 0.0;
        v196.f64[1] = 0.0;
        v197 = v196.f64[0] * -(_Q18.f64[0] * v196.f64[0]);
        v198.f64[1] = 1.0 / v39;
        v199 = v196.f64[0] * -(_Q18.f64[1] * v196.f64[0]);
        v41 = *(_DWORD *)(v17 + 992);
        if (v41 == -1)
          goto LABEL_52;
        goto LABEL_54;
      }
      return 0;
    }
    if (v40 == 2)
    {
      if (*(_DWORD *)(v17 + 212))
      {
        if (v39 >= 0.00000001)
        {
          v49 = 1.0 / v39;
          _Q0 = vmulq_n_f64(_Q18, v49);
          v51 = *(double *)(v17 + 168);
          v52 = *(double *)(v17 + 176);
          v53 = *(double *)(v17 + 184);
          _D6 = vmuld_lane_f64(v49, _Q18, 1);
          __asm { FMLA            D7, D6, V0.D[1] }
          v56 = v51 * *(double *)&_D7 + 1.0 + *(double *)&_D7 * *(double *)&_D7 * (v52 + v53 * *(double *)&_D7);
          v57 = v51 + v51 + *(double *)&_D7 * (v52 * 4.0 + *(double *)&_D7 * (v53 * 6.0));
          v58 = *(float64x2_t *)(v17 + 192);
          v59 = vmulq_f64(vaddq_f64((float64x2_t)vdupq_lane_s64(_D7, 0), vmulq_f64(_Q0, vaddq_f64(_Q0, _Q0))), (float64x2_t)vextq_s8((int8x16_t)v58, (int8x16_t)v58, 8uLL));
          v60 = vaddq_f64(v58, v58);
          v61 = vmulq_n_f64(v60, _Q0.f64[0]);
          v200 = vmlaq_n_f64(vaddq_f64(v59, vmulq_laneq_f64(v61, _Q0, 1)), _Q0, v56);
          v62 = vmulq_n_f64(_Q0, v57);
          v63 = vmulq_n_f64(v62, _Q0.f64[0]);
          v64 = vmulq_n_f64(v62, _D6);
          v65 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v61.f64[0], 0);
          v65.f64[0] = vmuld_lane_f64(6.0, v58, 1) * _Q0.f64[0];
          v66 = vaddq_f64(v65, vmulq_laneq_f64(v60, _Q0, 1));
          v63.f64[0] = v56 + v63.f64[0];
          v67 = vaddq_f64(v66, v63);
          *(_QWORD *)&v66.f64[0] = vdupq_laneq_s64((int64x2_t)v66, 1).u64[0];
          v66.f64[1] = vmuld_lane_f64(6.0 * v58.f64[0], _Q0, 1) + v61.f64[1];
          v64.f64[1] = v56 + v64.f64[1];
          v196 = vmulq_n_f64(v67, v49);
          v197 = -(vmuld_n_f64(v196.f64[0], _Q0.f64[0]) + v196.f64[1] * _Q0.f64[1]);
          v198 = vmulq_n_f64(vaddq_f64(v66, v64), v49);
          v199 = -(vmuld_n_f64(v198.f64[0], _Q0.f64[0]) + v198.f64[1] * _Q0.f64[1]);
          v41 = *(_DWORD *)(v17 + 992);
          if (v41 == -1)
            goto LABEL_52;
          goto LABEL_54;
        }
      }
      else if (v39 >= 0.00000001)
      {
        v145 = 1.0 / v39;
        _Q2 = vmulq_n_f64(_Q18, v145);
        v147 = *(double *)(v17 + 168);
        v148 = *(double *)(v17 + 176);
        v149 = *(double *)(v17 + 184);
        _D6 = vmuld_lane_f64(v145, _Q18, 1);
        __asm { FMLA            D7, D6, V2.D[1] }
        v152 = v147 * _D7 + 1.0 + _D7 * _D7 * (v148 + v149 * _D7);
        v153 = v147 + v147 + _D7 * (v148 * 4.0 + _D7 * (v149 * 6.0));
        v154 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v152, 0);
        v200 = vmulq_n_f64(_Q2, v152);
        v155 = vmulq_n_f64(_Q2, v153);
        v156 = vmulq_n_f64(v155, _Q2.f64[0]);
        v157 = vmulq_n_f64(v155, _D6);
        v158.f64[0] = v156.f64[0];
        v158.f64[1] = v157.f64[1];
        v159 = vaddq_f64(v154, v158);
        v158.f64[0] = v159.f64[0];
        v158.f64[1] = v156.f64[1];
        v159.f64[0] = v157.f64[0];
        v196 = vmulq_n_f64(v158, v145);
        v197 = -(vmuld_n_f64(v196.f64[0], _Q2.f64[0]) + v196.f64[1] * _Q2.f64[1]);
        v198 = vmulq_n_f64(v159, v145);
        v199 = -(vmuld_n_f64(v198.f64[0], _Q2.f64[0]) + v198.f64[1] * _Q2.f64[1]);
        v41 = *(_DWORD *)(v17 + 992);
        if (v41 == -1)
          goto LABEL_52;
        goto LABEL_54;
      }
      return 0;
    }
LABEL_39:
    *(_QWORD *)&v69 = vextq_s8((int8x16_t)_Q18, (int8x16_t)_Q18, 8uLL).u64[0];
    _D0 = _Q18.f64[1];
    __asm { FMLA            D2, D0, V18.D[1] }
    if (_D2 >= 0.00000001)
    {
      v72 = v39 * v39 + _D2;
      v73 = sqrt(_D2);
      v165 = v39;
      v168 = _Q18;
      v160 = _D2;
      v161 = v69;
      v74 = atan2(v73, v39);
      _Q18 = v168;
      v75 = *(int64x2_t *)(v17 + 184);
      v76 = *(int64x2_t *)(v17 + 168);
      v77 = (float64x2_t)vzip2q_s64(v76, v75);
      v78 = (float64x2_t)vzip1q_s64(v76, v75);
      v79 = vmulq_n_f64(vaddq_f64(vmulq_f64(v78, (float64x2_t)xmmword_210312E10), vmulq_n_f64(vmulq_f64(v77, (float64x2_t)xmmword_210312E20), v74 * v74)), v74 * v74);
      v80 = v74 * v74 * (v74 * v74);
      v81 = v79.f64[0] + vmuld_lane_f64(v80, v79, 1) + 1.0;
      v82 = vmulq_n_f64(vaddq_f64(v78, vmulq_n_f64(v77, v74 * v74)), v74 * v74);
      v69 = v161;
      v83 = v74 + v74 * (v82.f64[0] + vmuld_lane_f64(v80, v82, 1));
LABEL_49:
      v86 = v83 / v73;
      v99 = v81 / v72;
      v88 = vmulq_n_f64(_Q18, (v165 * (v81 / v72) - v86) / v160);
      v87 = -v99;
      v89 = vextq_s8((int8x16_t)v88, (int8x16_t)v88, 8uLL).u64[0];
      goto LABEL_50;
    }
    goto LABEL_42;
  }
  if (v40 > 5)
  {
    if (v40 == 6)
    {
      v68 = 1.0;
      if (v39 != 0.0)
        v68 = 1.0 / v39;
      v164 = v68;
      v167 = vmulq_n_f64(_Q18, v68);
      v203 = v167;
      sub_20EB2837C(&v200, v201.f64, &v203, (double *)(v17 + 168), (float64x2_t *)(v17 + 192), (double *)(v17 + 208));
      v196.f64[0] = v164 * v201.f64[0];
      v196.f64[1] = v164 * v201.f64[1];
      v197 = v164 * (-v201.f64[0] * v167.f64[0] - vmuld_lane_f64(v201.f64[1], v167, 1));
      v198.f64[0] = v164 * v202.f64[0];
      v198.f64[1] = v164 * v202.f64[1];
      v199 = v164 * (-v202.f64[0] * v167.f64[0] - vmuld_lane_f64(v202.f64[1], v167, 1));
      v41 = *(_DWORD *)(v17 + 992);
      if (v41 != -1)
        goto LABEL_54;
      goto LABEL_52;
    }
    v42 = sub_20EB3345C(v17, &v200, (uint64_t)&v196, &v194, 0);
LABEL_46:
    if ((v42 & 1) == 0)
      return 0;
    goto LABEL_51;
  }
  if (v40 != 5)
    goto LABEL_39;
  if (!sub_20EB29218(v200.f64, (uint64_t)&v196, &v194, (int64x2_t *)(v17 + 168)))
    return 0;
LABEL_51:
  v41 = *(_DWORD *)(v17 + 992);
  if (v41 == -1)
  {
LABEL_52:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v41 = *(_DWORD *)(v17 + 992);
  }
LABEL_54:
  if (!v41)
  {
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  v102 = *(double *)v17;
  v103 = *(double *)(v17 + 32);
  v104.f64[0] = *(float64_t *)v17;
  v104.f64[1] = v103;
  v105.f64[0] = *(float64_t *)(v17 + 16);
  v105.f64[1] = *(float64_t *)(v17 + 40);
  v106 = vaddq_f64(v105, vmulq_f64(v104, v200));
  v107 = v197;
  v108 = (int8x16_t)v196;
  v109 = v199;
  v110 = (int8x16_t)v198;
  *a3 = vsubq_f64(v106, *(float64x2_t *)(a1 + 8));
  if (*(_BYTE *)(v11 + 20))
  {
    _V16.D[1] = v170.f64[1];
    _V22.D[1] = v171.f64[1];
    _D20 = v179;
    __asm
    {
      FMLA            D7, D20, V16.D[1]
      FMLA            D17, D20, V22.D[1]
    }
    _V22.D[1] = v172.f64[1];
    __asm { FMLA            D19, D20, V22.D[1] }
    v118 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v177, v170.f64[0]), v176, v170, 1), v178, v175);
    v119.f64[0] = _D7 + v29 * v175;
    _Q16 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v177, v171.f64[0]), v176, v171, 1), v178, v174);
    _Q18 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v177, v172.f64[0]), v176, v172, 1), v178, v173);
    v122 = _D19 + v29 * v173;
    v123 = (float64x2_t)vzip1q_s64(v118, _Q16);
    _Q6 = (float64x2_t)vzip2q_s64(v118, _Q16);
    v125 = vmlaq_laneq_f64(vmulq_n_f64(v123, v180.f64[0]), _Q6, v180, 1);
    _D22 = v180.f64[1];
    __asm { FMLA            D16, D22, V18.D[1] }
    v127 = vmlaq_laneq_f64(vmulq_n_f64(v123, v181.f64[0]), _Q6, v181, 1);
    _D24 = v181.f64[1];
    __asm { FMLA            D23, D24, V18.D[1] }
    v130 = vmlaq_laneq_f64(vmulq_n_f64(v123, v182.f64[0]), _Q6, v182, 1);
    _D24 = v182.f64[1];
    __asm { FMLA            D6, D24, V18.D[1] }
    v119.f64[1] = _D17 + v29 * v174;
    v132 = vmlaq_n_f64(v125, v119, v185);
    v133 = vmlaq_n_f64(v127, v119, v184);
    _D17 = _D23 + v122 * v184;
    _Q20 = vmlaq_n_f64(v130, v119, v183);
    _Q6.f64[0] = _Q6.f64[0] + v122 * v183;
    _V19.D[1] = v186.f64[1];
    _V24.D[1] = v187.f64[1];
    __asm
    {
      FMLA            D18, D17, V19.D[1]
      FMLA            D23, D17, V24.D[1]
    }
    _V24.D[1] = v188.f64[1];
    __asm { FMLA            D16, D17, V24.D[1] }
    v140 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v132, v186.f64[0]), v133, v186, 1), _Q20, v191);
    v141 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v132, v187.f64[0]), v133, v187, 1), _Q20, v190);
    _Q18.f64[0] = _D23 + _Q6.f64[0] * v190;
    v142 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v132, v188.f64[0]), v133, v188, 1), _Q20, v189);
    _Q6.f64[0] = *(double *)_Q16.i64 + _Q6.f64[0] * v189;
    _Q20.f64[1] = v192.f64[1];
    __asm { FMLA            D16, D18, V20.D[1] }
    v143 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v140, v192.f64[0]), v141, v192, 1), v142, v193);
    _Q6.f64[0] = *(double *)_Q16.i64 + _Q6.f64[0] * v193;
    *(double *)_Q16.i64 = v102;
    v144.f64[0] = 0.0;
    v144.f64[1] = v103;
    *a4 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)_Q16.u64[0], *(double *)v108.i64), v144, *(double *)v110.i64), v143.f64[0]), vmlaq_n_f64(vmulq_n_f64((float64x2_t)_Q16.u64[0], *(double *)vextq_s8(v108, v108, 8uLL).i64), v144, *(double *)vextq_s8(v110, v110, 8uLL).i64), v143, 1), vmlaq_n_f64(vmulq_n_f64((float64x2_t)_Q16.u64[0], v107), v144, v109), _Q6.f64[0]);
  }
  return 1;
}

uint64_t sub_20FC7133C(uint64_t a1, uint64_t *a2, uint64_t a3, double a4, double a5, double a6, double a7, float64x2_t _Q4, double a9, double a10, float64x2_t a11)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  float64x2_t v20;
  __int128 v21;
  __int128 v22;
  __n128 v23;
  float64x2_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  double v31;
  float64x2_t v32;
  __n128 v33;
  int v34;
  double v35;
  const double *v36;
  double v38;
  float64x2_t v44;
  float64x2_t v46;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  unsigned int v52;
  unsigned int v53;
  char v54;
  double v55;
  double v56;
  double v58;
  double v61;
  float64x2_t v65;
  float64x2_t v66;
  double v67;
  double v68;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  int v77;
  int v78;
  float64x2_t v79;
  float64x2_t v80;
  double v82;
  double v84;
  int v85;
  double v86;
  int v87;
  double v88;
  double v89;
  double v90;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  int v98;
  int v99;
  double v100;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  int v109;
  int v110;
  double v111;
  double v112;
  double v113;
  double v114;
  float64x2_t v115;
  BOOL v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  BOOL v122;
  float64x2_t v123;
  double v124;
  double v126;
  int v127;
  double v128;
  int v129;
  double v130;
  float64x2_t v131;
  BOOL v132;
  float64x2_t v133;
  double v134;
  double v136;
  int v137;
  double v138;
  int v139;
  double v140;
  float64x2_t v141;
  double v143;
  float64x2_t v144;
  double v145;
  float64x2_t v146;
  int8x16_t v150;
  float64x2_t v151;
  int64x2_t v152;
  _BYTE v153[32];
  __int128 v154;
  double v155;
  float64x2_t v156;
  float64_t v157;
  float64x2_t v158;
  _BYTE v159[32];
  float64x2_t v160;
  double v161;
  float64x2_t v162;
  unint64_t v163;
  float64x2_t v164;
  double v165;
  float64x2_t v166;
  uint64_t v167;
  float64x2x3_t v168;

  v167 = *MEMORY[0x24BDAC8D0];
  v14 = *a2;
  v13 = a2[1];
  v16 = a2[2];
  v15 = a2[3];
  v17 = a2[10];
  v18 = *(_QWORD *)(v17 + 24);
  if (*(_BYTE *)(v18 + 58) && !*(_BYTE *)(v18 + 57))
    return 0;
  v19 = *(_OWORD *)(v14 + 48);
  v20 = *(float64x2_t *)(v14 + 80);
  *(_OWORD *)&v159[16] = *(_OWORD *)(v14 + 64);
  v160 = v20;
  v161 = *(double *)(v14 + 96);
  v158 = *(float64x2_t *)(v14 + 32);
  *(_OWORD *)v159 = v19;
  v162 = *(float64x2_t *)(v14 + 104);
  v163 = *(_QWORD *)(v14 + 120);
  v21 = *(_OWORD *)(v13 + 48);
  v22 = *(_OWORD *)(v13 + 80);
  *(_OWORD *)&v153[16] = *(_OWORD *)(v13 + 64);
  v154 = v22;
  v155 = *(double *)(v13 + 96);
  v23 = *(__n128 *)(v13 + 32);
  v152 = (int64x2_t)v23;
  *(_OWORD *)v153 = v21;
  v24 = *(float64x2_t *)(v13 + 104);
  v156 = v24;
  v157 = *(double *)(v13 + 120);
  v25 = *(_QWORD *)(a1 + 32);
  if (*(double *)(v25 + 1424) > 0.0)
  {
    v26 = *(_QWORD *)(v18 + 96);
    if (v26)
    {
      v27 = *(_QWORD *)(v26 + 64);
      v23.n128_u64[0] = *(_QWORD *)(v27 + 1424);
      v24.f64[0] = 0.0;
      if (v23.n128_f64[0] <= 0.0)
      {
LABEL_7:
        v28 = *(_QWORD *)(a1 + 32);
        v29 = *(double *)(a1 + 16);
        v30 = *(double *)(v28 + 1432);
        v31 = *(double *)(v28 + 1424);
        sub_20FC7D4B0(v16 + 136, v16 + 160, &v158, 0, v24, v23);
        v32.f64[0] = (v29 - v30) * v31;
        sub_20FC7D4B0(v15 + 136, v15 + 160, (float64x2_t *)&v152, 0, v32, v33);
        v18 = *(_QWORD *)(v17 + 24);
        v25 = *(_QWORD *)(a1 + 32);
        goto LABEL_8;
      }
    }
    else
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioanchoredpoint3d.hpp", 63, (uint64_t)"this->anchor_kf_pose_", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v27 = *(_QWORD *)(*(_QWORD *)(v18 + 96) + 64);
      v23.n128_u64[0] = *(_QWORD *)(v27 + 1424);
      v24.f64[0] = 0.0;
      if (v23.n128_f64[0] <= 0.0)
        goto LABEL_7;
    }
    v24.f64[0] = v23.n128_f64[0] * (*(double *)(v18 + 88) - *(double *)(v27 + 1432));
    goto LABEL_7;
  }
LABEL_8:
  v34 = *(unsigned __int8 *)(v18 + 56);
  v35 = *(double *)(a1 + 40);
  v24.f64[0] = *(float64_t *)(v17 + 32);
  v36 = (const double *)(v15 + 32);
  v23.n128_u64[0] = *(_QWORD *)(v18 + 80);
  _Q2 = *(float64x2_t *)(v18 + 64);
  *(_QWORD *)&v38 = *(_OWORD *)&vmulq_f64(v24, (float64x2_t)v23);
  _Q0 = vmulq_n_f64(_Q2, v24.f64[0]);
  _Q4.f64[0] = *(float64_t *)&v159[24];
  __asm { FMLA            D2, D4, V0.D[1] }
  *(_QWORD *)&_Q4.f64[0] = v163;
  _Q2.f64[0] = vmlad_n_f64(_Q2.f64[0], v161, v38);
  _D5 = *(_QWORD *)(v16 + 72);
  v44 = vaddq_f64(_Q2, _Q4);
  _Q3 = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v158, _Q0.f64[0]), *(float64x2_t *)&v159[8], _Q0, 1), v160, v38), v162);
  v46 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v16 + 32), _Q3.f64[0]), *(float64x2_t *)(v16 + 56), _Q3, 1), *(float64x2_t *)(v16 + 80), v44.f64[0]);
  __asm { FMLA            D0, D5, V3.D[1] }
  _Q0.f64[0] = vmlad_n_f64(_Q0.f64[0], *(double *)(v16 + 96), v44.f64[0]);
  v44.f64[0] = *(float64_t *)(v16 + 120);
  v168 = vld3q_f64(v36);
  _Q6 = *(float64x2_t *)(v15 + 80);
  a11.f64[0] = *(float64_t *)(v15 + 120);
  *(_QWORD *)&_Q0.f64[0] = *(_OWORD *)&vsubq_f64(vaddq_f64(v44, _Q0), a11);
  _Q1 = vsubq_f64(vaddq_f64(*(float64x2_t *)(v16 + 104), v46), *(float64x2_t *)(v15 + 104));
  v49 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v168.val[0], _Q1.f64[0]), v168.val[1], _Q1, 1), v168.val[2], _Q0.f64[0]);
  v168.val[0] = vmulq_f64(_Q6, _Q1);
  _Q1.f64[0] = _Q1.f64[1];
  __asm { FMLA            D3, D1, V6.D[1] }
  v168.val[0].f64[0] = vmlad_n_f64(v168.val[0].f64[0], *(double *)(v15 + 96), _Q0.f64[0]);
  _Q0.f64[0] = *(float64_t *)v153;
  v168.val[2].f64[1] = *((float64_t *)&v154 + 1);
  _Q6.f64[0] = v157;
  *(_QWORD *)&v168.val[0].f64[0] = *(_OWORD *)&vsubq_f64(v168.val[0], _Q6);
  v50 = vsubq_f64(v49, v156);
  _Q0.f64[1] = *(float64_t *)&v153[24];
  v51 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v152, *(int64x2_t *)&v153[8]), v50.f64[0]), (float64x2_t)vzip2q_s64(v152, *(int64x2_t *)&v153[8]), v50, 1), _Q0, v168.val[0].f64[0]);
  _Q1.f64[0] = v50.f64[1];
  __asm { FMLA            D0, D1, V5.D[1] }
  v164 = v51;
  v165 = vmlad_n_f64(_Q0.f64[0], v155, v168.val[0].f64[0]);
  v52 = *(_DWORD *)(v25 + 992);
  if (v52 != -1)
  {
    if (v52 <= 7)
      goto LABEL_10;
LABEL_18:
    if (v52 > 0xB)
    {
      if (v52 <= 0xD)
      {
        if (v52 != 13 || v165 < 0.00000001)
          return 0;
        _Q0 = vdivq_f64(v164, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v165, 0));
        v58 = (*(double *)v25 + *(double *)(v25 + 32)) * 0.5;
        _D3 = _Q0.f64[1];
        __asm { FMLA            D2, D3, V0.D[1] }
        v61 = v58 * (_D2 * v58);
        v166 = vdivq_f64(_Q0, (float64x2_t)vdupq_lane_s64(COERCE__INT64(v61* (*(double *)(v25 + 168)+ v58 * *(double *)(v25 + 224)+ v61* (*(double *)(v25 + 176)+ v58 * *(double *)(v25 + 232)+ v61* (*(double *)(v25 + 184)+ v58 * *(double *)(v25 + 240)+ v61* (*(double *)(v25 + 192)+ v58 * *(double *)(v25 + 248)+ v61* (*(double *)(v25 + 200)+ v58 * *(double *)(v25 + 256)+ v61
                                     * (*(double *)(v25 + 208)
                                      + v58 * *(double *)(v25 + 264)
                                      + v61 * (*(double *)(v25 + 216) + *(double *)(v25 + 272) * v58 + v61 * 0.0)))))))
                                / 100.0
                                + 1.0),
                                0));
        v53 = *(_DWORD *)(v25 + 992);
        if (v53 != -1)
          goto LABEL_115;
LABEL_184:
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v53 = *(_DWORD *)(v25 + 992);
        if (v53 > 7)
        {
LABEL_186:
          v115.f64[0] = v166.f64[0];
          if (v53 <= 0xB)
          {
            v116 = v53 == 9;
            if (v53 <= 9)
            {
LABEL_188:
              if (!v116)
              {
                v113 = v166.f64[1];
                goto LABEL_192;
              }
            }
          }
LABEL_190:
          v112 = *(double *)(v25 + 8);
          v114 = *(double *)v25 * v115.f64[0];
          v113 = v166.f64[1];
LABEL_191:
          v145 = v112 * v113;
LABEL_193:
          v117 = v114 + v145;
          goto LABEL_194;
        }
LABEL_116:
        if (v53 > 3)
        {
          v115.f64[0] = v166.f64[0];
          v116 = v53 == 5;
          if (v53 <= 5)
            goto LABEL_188;
          goto LABEL_190;
        }
        if (v53 <= 1)
        {
          if (!v53)
          {
            sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
            abort();
          }
          v112 = *(double *)(v25 + 8);
          v113 = v166.f64[1];
          v114 = *(double *)v25 * v166.f64[0];
          goto LABEL_191;
        }
        v65 = v166;
        if (v53 == 2)
          goto LABEL_123;
LABEL_176:
        v113 = v65.f64[1];
        v117 = *(double *)v25 * v65.f64[0] + vmuld_lane_f64(*(double *)(v25 + 8), v65, 1);
        goto LABEL_194;
      }
      if (v52 == 14)
        v54 = sub_20EB247C0(&v166, (uint64_t)&v164, (double *)(v25 + 168), (*(double *)v25 + *(double *)(v25 + 32)) * 0.5);
      else
        v54 = sub_20EB3E39C(v25, &v166, &v164);
    }
    else if (v52 > 9)
    {
      if (v52 == 10)
        v54 = sub_20EB24288(&v166, (uint64_t)&v164, (double *)(v25 + 168), (*(double *)v25 + *(double *)(v25 + 32)) * 0.5);
      else
        v54 = sub_20EB3A2E4(v25, &v166, &v164);
    }
    else
    {
      if (v52 != 9)
      {
        v68 = v165;
        _Q0 = v164;
        _D1 = v164.f64[1];
        __asm { FMLA            D16, D1, V0.D[1] }
        v72 = sqrt(_D16);
        v73 = fabs(v165);
        v74 = fabs(v72);
        v75 = v73 / v74;
        if (v73 >= v74)
          v75 = v74 / v73;
        v76 = (v74 - v73) / (v73 + v74);
        if (v73 >= v74)
          v76 = -v76;
        if (v75 > 0.414213562)
          v77 = 1;
        else
          v77 = 2;
        if (v75 > 0.414213562)
          v78 = -1;
        else
          v78 = 1;
        if (v75 <= 0.414213562)
          v76 = v75;
        if (_D16 < 0.00000001)
        {
LABEL_95:
          v100 = 1.0 / v68;
LABEL_151:
          v115 = vmulq_n_f64(_Q0, v100);
          v166 = v115;
          v113 = v115.f64[1];
LABEL_192:
          v114 = *(double *)v25 * v115.f64[0];
          v145 = *(double *)(v25 + 8) * v113;
          goto LABEL_193;
        }
        if (v73 < v74)
          v78 = -v78;
        else
          v77 = v75 > 0.414213562;
        v79 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v76 * v76), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v76 * v76), (float64x2_t)xmmword_210315370), v76 * v76 * (v76 * v76))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v76 * v76), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v76 * v76), (float64x2_t)xmmword_210315380), v76 * v76 * (v76 * v76))), v76 * v76 * (v76 * v76) * (v76 * v76 * (v76 * v76))));
        v80 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v79, 1);
        _ZF = v72 == INFINITY && v73 == INFINITY;
        v82 = v76 + v76 * vdivq_f64(v79, v80).f64[0];
        if (_ZF)
          v82 = 0.785398163;
        if (v72 == 0.0 && v165 == 0.0)
          v84 = 0.0;
        else
          v84 = v82;
        if (v165 < 0.0)
        {
          v77 = 4 - v77;
          v78 = -v78;
        }
        if (v72 >= 0.0)
          v85 = v77;
        else
          v85 = -v77;
        v86 = (double)v85;
        if (v72 >= 0.0)
          v87 = v78;
        else
          v87 = -v78;
        v88 = v86 * 3.061617e-17 + v86 * 0.785398163 + v84 * (double)v87;
        v89 = v88
            * (v88
             * v88
             * (*(double *)(v25 + 168)
              + v88
              * v88
              * (*(double *)(v25 + 176)
               + v88
               * v88
               * (*(double *)(v25 + 184)
                + v88
                * v88
                * (*(double *)(v25 + 192)
                 + v88
                 * v88
                 * (*(double *)(v25 + 200) + v88 * v88 * (*(double *)(v25 + 208) + v88 * v88 * *(double *)(v25 + 216)))))))
             + 1.0);
        v90 = 1.0 / v72;
LABEL_150:
        v100 = v90 * v89;
        goto LABEL_151;
      }
      v54 = sub_20EB3641C(v25, &v166, &v164);
    }
LABEL_113:
    if ((v54 & 1) == 0)
      return 0;
LABEL_114:
    v53 = *(_DWORD *)(v25 + 992);
    if (v53 == -1)
      goto LABEL_184;
    goto LABEL_115;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v52 = *(_DWORD *)(v25 + 992);
  if (v52 > 7)
    goto LABEL_18;
LABEL_10:
  if (v52 > 3)
  {
    if (v52 <= 5)
    {
      if (v52 == 5)
      {
        v55 = v164.f64[0] * v164.f64[0] + v164.f64[1] * v164.f64[1];
        if (v55 >= 0.00000001)
        {
          v118 = sqrt(v55);
          if (v118 <= v165)
          {
            v143 = v118 / v165 * 0.785398163
                 - v118 / v165 * (v118 / v165 + -1.0) * (v118 / v165 * 0.0663008339 + 0.244711287);
          }
          else
          {
            if (v118 <= -v165)
            {
              v120 = v118 / v165 * 0.785398163
                   - v118 / v165 * (-1.0 - v118 / v165) * (v118 / v165 * -0.0663008339 + 0.244711287);
              v121 = 3.14159265;
            }
            else
            {
              v119 = fabs(v165 / v118);
              v120 = v165 / v118 * (v119 + -1.0) * (v119 * 0.0663008339 + 0.244711287) + v165 / v118 * -0.785398163;
              v121 = 1.57079633;
            }
            v143 = v120 + v121;
          }
          v144 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v25 + 168), *(int64x2_t *)(v25 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v25 + 168), *(int64x2_t *)(v25 + 184)), v143 * v143)), v143 * v143);
          v56 = (v143 + v143 * (v144.f64[0] + vmuld_lane_f64(v143 * v143 * (v143 * v143), v144, 1))) / v118;
        }
        else
        {
          if (v165 == 0.0)
            return 0;
          v56 = 1.0 / v165;
        }
        v166.f64[0] = v164.f64[0] * v56;
        v166.f64[1] = v164.f64[1] * v56;
        v53 = *(_DWORD *)(v25 + 992);
        if (v53 == -1)
          goto LABEL_184;
        goto LABEL_115;
      }
      v68 = v165;
      _Q0 = v164;
      _D1 = v164.f64[1];
      __asm { FMLA            D16, D1, V0.D[1] }
      v93 = sqrt(_D16);
      v94 = fabs(v165);
      v95 = fabs(v93);
      v96 = v94 / v95;
      if (v94 >= v95)
        v96 = v95 / v94;
      v97 = (v95 - v94) / (v94 + v95);
      if (v94 >= v95)
        v97 = -v97;
      if (v96 > 0.414213562)
        v98 = 1;
      else
        v98 = 2;
      if (v96 > 0.414213562)
        v99 = -1;
      else
        v99 = 1;
      if (v96 <= 0.414213562)
        v97 = v96;
      if (_D16 < 0.00000001)
        goto LABEL_95;
      if (v94 < v95)
        v99 = -v99;
      else
        v98 = v96 > 0.414213562;
      v122 = v93 == INFINITY && v94 == INFINITY;
      v123 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v97 * v97), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v97 * v97), (float64x2_t)xmmword_210315370), v97 * v97 * (v97 * v97))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v97 * v97), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v97 * v97), (float64x2_t)xmmword_210315380), v97 * v97 * (v97 * v97))), v97 * v97 * (v97 * v97) * (v97 * v97 * (v97 * v97))));
      v124 = v97 + v97 * vdivq_f64(v123, (float64x2_t)vdupq_laneq_s64((int64x2_t)v123, 1)).f64[0];
      if (v122)
        v124 = 0.785398163;
      if (v93 == 0.0 && v165 == 0.0)
        v126 = 0.0;
      else
        v126 = v124;
      if (v165 < 0.0)
      {
        v98 = 4 - v98;
        v99 = -v99;
      }
      if (v93 >= 0.0)
        v127 = v98;
      else
        v127 = -v98;
      v128 = (double)v127;
      if (v93 >= 0.0)
        v129 = v99;
      else
        v129 = -v99;
      v130 = v128 * 3.061617e-17 + v128 * 0.785398163 + v126 * (double)v129;
      v131 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v25 + 168), *(int64x2_t *)(v25 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v25 + 168), *(int64x2_t *)(v25 + 184)), v130 * v130)), v130 * v130);
      v89 = v130 + v130 * (v131.f64[0] + vmuld_lane_f64(v130 * v130 * (v130 * v130), v131, 1));
      v90 = 1.0 / v93;
      goto LABEL_150;
    }
    if (v52 == 6)
    {
      v66 = vaddq_f64(vdivq_f64(v164, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v165, 0)), *(float64x2_t *)(v25 + 192));
      v67 = sqrt(vaddvq_f64(vmulq_f64(v66, v66)));
      v166 = vaddq_f64(*(float64x2_t *)(v25 + 208), vmulq_n_f64(v66, v67 * (v67 * (*(double *)(v25 + 168) + v67 * (*(double *)(v25 + 176) + *(double *)(v25 + 184) * v67)))+ 1.0));
      v53 = *(_DWORD *)(v25 + 992);
      if (v53 != -1)
        goto LABEL_115;
      goto LABEL_184;
    }
    v54 = sub_20EB31FFC(v25, &v166, &v164);
    goto LABEL_113;
  }
  if (v52 <= 1)
  {
    if (!v52)
    {
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    if (v165 >= 0.00000001)
    {
      v166 = vmulq_n_f64(v164, 1.0 / v165);
      v53 = *(_DWORD *)(v25 + 992);
      if (v53 == -1)
        goto LABEL_184;
LABEL_115:
      if (v53 > 7)
        goto LABEL_186;
      goto LABEL_116;
    }
    return 0;
  }
  if (v52 != 2)
  {
    _V0.D[1] = v164.f64[1];
    _D1 = v164.f64[1];
    __asm { FMLA            D16, D1, V0.D[1] }
    v104 = sqrt(_D16);
    v105 = fabs(v165);
    v106 = fabs(v104);
    v107 = v105 / v106;
    if (v105 >= v106)
      v107 = v106 / v105;
    v108 = (v106 - v105) / (v105 + v106);
    if (v105 >= v106)
      v108 = -v108;
    if (v107 > 0.414213562)
      v109 = 1;
    else
      v109 = 2;
    if (v107 > 0.414213562)
      v110 = -1;
    else
      v110 = 1;
    if (v107 <= 0.414213562)
      v108 = v107;
    if (_D16 >= 0.00000001)
    {
      if (v105 < v106)
        v110 = -v110;
      else
        v109 = v107 > 0.414213562;
      v132 = v104 == INFINITY && v105 == INFINITY;
      v133 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v108 * v108), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v108 * v108), (float64x2_t)xmmword_210315370), v108 * v108 * (v108 * v108))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v108 * v108), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v108 * v108), (float64x2_t)xmmword_210315380), v108 * v108 * (v108 * v108))), v108 * v108 * (v108 * v108) * (v108 * v108 * (v108 * v108))));
      v134 = v108 + v108 * vdivq_f64(v133, (float64x2_t)vdupq_laneq_s64((int64x2_t)v133, 1)).f64[0];
      if (v132)
        v134 = 0.785398163;
      if (v104 == 0.0 && v165 == 0.0)
        v136 = 0.0;
      else
        v136 = v134;
      if (v165 < 0.0)
      {
        v109 = 4 - v109;
        v110 = -v110;
      }
      if (v104 >= 0.0)
        v137 = v109;
      else
        v137 = -v109;
      v138 = (double)v137;
      if (v104 >= 0.0)
        v139 = v110;
      else
        v139 = -v110;
      v140 = v138 * 3.061617e-17 + v138 * 0.785398163 + v136 * (double)v139;
      v141 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v25 + 168), *(int64x2_t *)(v25 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v25 + 168), *(int64x2_t *)(v25 + 184)), v140 * v140)), v140 * v140);
      v111 = 1.0 / v104 * (v140 + v140 * (v141.f64[0] + vmuld_lane_f64(v140 * v140 * (v140 * v140), v141, 1)));
    }
    else
    {
      v111 = 1.0 / v165;
    }
    v65 = vmulq_n_f64(v164, v111);
    v166 = v65;
    goto LABEL_176;
  }
  if (!*(_DWORD *)(v25 + 212))
  {
    if (!sub_20EB14380(&v166, &v164, (double *)(v25 + 168)))
      return 0;
    goto LABEL_114;
  }
  if (v165 < 0.00000001)
    return 0;
  _Q3 = vmulq_n_f64(v164, 1.0 / v165);
  _D0 = vmuld_lane_f64(1.0 / v165, v164, 1);
  __asm { FMLA            D2, D0, V3.D[1] }
  v65 = vaddq_f64(vaddq_f64(vmulq_f64(vaddq_f64((float64x2_t)vdupq_lane_s64(_D2, 0), vmulq_f64(_Q3, vaddq_f64(_Q3, _Q3))), (float64x2_t)vextq_s8(*(int8x16_t *)(v25 + 192), *(int8x16_t *)(v25 + 192), 8uLL)), vmulq_laneq_f64(vmulq_n_f64(vaddq_f64(*(float64x2_t *)(v25 + 192), *(float64x2_t *)(v25 + 192)), _Q3.f64[0]), _Q3, 1)), vmulq_n_f64(_Q3, *(double *)(v25 + 168) * *(double *)&_D2+ 1.0+ *(double *)&_D2 * (*(double *)(v25 + 176) * *(double *)&_D2)+ *(double *)&_D2 * (*(double *)&_D2 * (*(double *)(v25 + 184) * *(double *)&_D2))));
  v166 = v65;
LABEL_123:
  v117 = vaddvq_f64(vmulq_f64(*(float64x2_t *)v25, v65));
  v113 = v65.f64[1];
LABEL_194:
  v146.f64[0] = v117 + *(double *)(v25 + 16);
  v146.f64[1] = v113 * *(double *)(v25 + 32) + *(double *)(v25 + 40);
  _Q0 = vsubq_f64(v146, *(float64x2_t *)(a1 + 8));
  _Q2 = vmulq_n_f64(_Q0, 1.0 / v35);
  if (v34)
  {
    _D1 = vmuld_lane_f64(1.0 / v35, _Q0, 1);
    _Q0 = vmulq_f64(_Q2, _Q2);
    __asm { FMLA            D0, D1, V2.D[1] }
    if (_Q0.f64[0] >= 0.00000000999999994)
    {
      v151 = _Q2;
      _Q0.f64[0] = sqrt(log1p(_Q0.f64[0]) / _Q0.f64[0]);
      _Q2 = vmulq_n_f64(v151, _Q0.f64[0]);
    }
  }
  v150 = vextq_s8((int8x16_t)_Q2, (int8x16_t)_Q0, 1uLL);
  *(_BYTE *)a3 = LOBYTE(_Q2.f64[0]);
  *(_BYTE *)(a3 + 15) = HIBYTE(_Q2.f64[1]);
  *(_WORD *)(a3 + 13) = v150.i16[6];
  *(_DWORD *)(a3 + 9) = v150.i32[2];
  *(_QWORD *)(a3 + 1) = v150.i64[0];
  return 1;
}

BOOL sub_20FC7238C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  float64x2_t v18;
  float64x2_t v19;
  __int128 v20;
  float64x2_t v21;
  __n128 v22;
  float64x2_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  double v30;
  float64x2_t v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  const double *v37;
  uint64_t v38;
  float64x2_t v40;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v50;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v55;
  float64x2_t v56;
  unsigned int v58;
  double v59;
  char v61;
  float64x2_t v65;
  double v68;
  double v69;
  double v70;
  double v73;
  double v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  double v85;
  float64_t v86;
  double v87;
  double v88;
  double v90;
  double v92;
  double v93;
  int64x2_t v94;
  int64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  double v99;
  double v100;
  double v102;
  double v103;
  float64x2_t v104;
  unint64_t v105;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  float64x2_t v115;
  float64x2_t v116;
  unsigned int v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  double v121;
  long double v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64_t v132;
  uint64_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64_t v138;
  float64_t v142;
  const double *v143;
  unint64_t v146;
  float64x2_t v147;
  float64x2_t v148;
  double v149;
  uint64_t v150;
  double v151;
  double v152;
  double v153;
  double v154;
  int v155;
  int v156;
  _BOOL4 v157;
  float64x2_t v158;
  double v159;
  double v162;
  double v163;
  double v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  unsigned int v171;
  double *v172;
  double v173;
  double v177;
  double v178;
  double v179;
  double v180;
  double v183;
  double v184;
  float64x2_t v185;
  unint64_t v186;
  double v187;
  double v191;
  double v192;
  float64x2_t v193;
  unint64_t v194;
  double v195;
  float64x2_t v196;
  float64x2_t v197;
  double v198;
  long double v199;
  double v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  int8x16_t v204;
  int8x16_t v205;
  int8x16_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;
  float64x2_t v215;
  float64x2_t v216;
  double v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  int8x16_t v226;
  int8x16_t v227;
  int8x16_t v228;
  unint64_t v229;
  int8x16_t v230;
  int8x16_t v231;
  int8x16_t v232;
  unint64_t v233;
  unint64_t v234;
  unint64_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  double v241;
  float64x2_t v242;
  float64x2_t v243;
  float64x2_t v244;
  float64x2_t v245;
  int8x16_t *v246;
  uint64_t v247;
  float64x2_t v248;
  float64x2_t v249;
  float64x2_t v250;
  float64x2_t *v251;
  double v252;
  double v253;
  double v254;
  float64x2_t v255;
  float64x2_t v256;
  float64x2_t v257;
  double v258;
  int8x16_t v259;
  int8x16_t v260;
  int8x16_t v261;
  float64x2_t v262;
  float64x2_t v263;
  float64x2_t *v264;
  float64x2_t v265;
  double v269;
  float64x2_t v270;
  int8x16_t v271;
  int8x16_t v272;
  int8x16_t v273;
  float64x2_t v274;
  float64x2_t v275;
  float64x2_t v276;
  float64x2_t *v277;
  float64x2_t v278;
  float64x2_t v279;
  float64x2_t v280;
  float64x2_t v281;
  float64x2_t v282;
  float64x2_t v283;
  uint64_t v284;
  float64x2_t v286;
  float64x2_t v287;
  float64x2_t v288;
  float64x2_t v289;
  float64x2_t v290;
  float64x2_t v291;
  float64x2_t v292;
  float64x2_t *v293;
  float64x2_t v294;
  float64x2_t v295;
  float64x2_t v296;
  float64x2_t v297;
  float64x2_t v298;
  float64x2_t v299;
  int8x16_t v300;
  int8x16_t v301;
  int8x16_t v302;
  int8x16_t *v303;
  uint64_t v304;
  float64x2_t v305;
  float64x2_t v306;
  float64x2_t v307;
  float64x2_t v308;
  __int128 v309;
  __int128 v310;
  _BOOL4 v311;
  unint64_t v322;
  float64x2_t v323;
  float64x2_t v324;
  float64x2_t v325;
  float64x2_t v326;
  float64x2_t v327;
  float64x2_t v328;
  float64x2_t v329;
  float64x2_t v330;
  float64x2_t v331;
  unint64_t v332;
  unint64_t v333;
  unint64_t v334;
  unint64_t v335;
  unint64_t v336;
  int8x16_t v337;
  int8x16_t v338;
  int8x16_t v339;
  float64x2_t v340;
  float64x2_t v341;
  float64x2_t v342;
  float64x2_t v343;
  double v344;
  int8x16_t v345;
  int8x16_t v346;
  uint64_t v347;
  _BOOL4 v348;
  float64x2_t v349;
  double v350;
  float64x2_t v351;
  float64x2_t v352;
  int v353;
  int v354;
  _BOOL4 v355;
  double v356;
  _BOOL4 v357;
  double v358;
  double v359;
  float64x2_t v360;
  int64x2_t v361;
  double v362;
  double v363;
  float64x2_t v364;
  float64_t v365;
  _BOOL4 v367;
  int v368;
  int v369;
  double v370;
  double v371;
  float64x2_t v372;
  int64x2_t v373;
  float64x2_t v374;
  float64x2_t v375;
  float64x2_t v376;
  float64x2_t v377;
  double v378;
  int v379;
  float64x2_t v380;
  int8x16_t v381;
  float64_t v382;
  float64x2_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  float64x2_t v387;
  uint64_t v388;
  double v389;
  double v390;
  float64x2_t v391;
  uint64_t v392;
  float64x2_t v393;
  double v394;
  float64x2_t v395;
  double v396;
  float64x2_t v397;
  double v398;
  float64x2_t v399;
  double v400;
  float64x2_t v401;
  double v402;
  float64x2_t v403;
  double v404;
  int64x2_t v405;
  _BYTE v406[32];
  float64x2_t v407;
  double v408;
  float64x2_t v409;
  float64_t v410;
  float64x2_t v411;
  _BYTE v412[32];
  float64x2_t v413;
  double v414;
  float64x2_t v415;
  float64_t v416;
  _OWORD v417[3];
  float64x2_t v418;
  float64x2_t v419;
  double v420;
  float64x2_t v421;
  float64x2_t v422[2];
  float64x2_t v423;
  float64x2_t v424;
  uint64_t v425;
  float64x2x3_t v426;

  v425 = *MEMORY[0x24BDAC8D0];
  v11 = *a2;
  v10 = a2[1];
  v13 = a2[2];
  v12 = a2[3];
  v14 = a2[9];
  v386 = a2[4];
  v388 = a2[5];
  v15 = a2[7];
  v385 = a2[6];
  v384 = a2[8];
  v392 = a2[10];
  v16 = *(_QWORD *)(v392 + 24);
  if (*(_BYTE *)(v16 + 58) && !*(_BYTE *)(v16 + 57))
    return 0;
  v17 = *(_OWORD *)(v11 + 48);
  v18 = *(float64x2_t *)(v11 + 80);
  *(_OWORD *)&v412[16] = *(_OWORD *)(v11 + 64);
  v413 = v18;
  v414 = *(double *)(v11 + 96);
  v19 = *(float64x2_t *)(v11 + 32);
  *(_OWORD *)v412 = v17;
  v411 = v19;
  v415 = *(float64x2_t *)(v11 + 104);
  v416 = *(double *)(v11 + 120);
  v20 = *(_OWORD *)(v10 + 48);
  v21 = *(float64x2_t *)(v10 + 80);
  *(_OWORD *)&v406[16] = *(_OWORD *)(v10 + 64);
  v407 = v21;
  v408 = *(double *)(v10 + 96);
  v22 = *(__n128 *)(v10 + 32);
  v405 = (int64x2_t)v22;
  *(_OWORD *)v406 = v20;
  v23 = *(float64x2_t *)(v10 + 104);
  v409 = v23;
  v410 = *(double *)(v10 + 120);
  v24 = *(double *)(*(_QWORD *)(a1 + 32) + 1424);
  if (v24 > 0.0)
  {
    v25 = *(_QWORD *)(v16 + 96);
    if (v25)
    {
      v26 = *(_QWORD *)(v25 + 64);
      v22.n128_u64[0] = *(_QWORD *)(v26 + 1424);
      v23.f64[0] = 0.0;
      if (v22.n128_f64[0] <= 0.0)
      {
LABEL_7:
        v27 = *(_QWORD *)(a1 + 32);
        v28 = *(double *)(a1 + 16);
        v29 = *(double *)(v27 + 1432);
        v30 = *(double *)(v27 + 1424);
        sub_20FC7D4B0(v13 + 136, v13 + 160, &v411, (uint64_t)&v399, v23, v22);
        v31.f64[0] = (v28 - v29) * v30;
        sub_20FC7D4B0(v12 + 136, v12 + 160, (float64x2_t *)&v405, (uint64_t)&v393, v31, v32);
        goto LABEL_8;
      }
    }
    else
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioanchoredpoint3d.hpp", 63, (uint64_t)"this->anchor_kf_pose_", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v26 = *(_QWORD *)(*(_QWORD *)(v16 + 96) + 64);
      v22.n128_u64[0] = *(_QWORD *)(v26 + 1424);
      v23.f64[0] = 0.0;
      if (v22.n128_f64[0] <= 0.0)
        goto LABEL_7;
    }
    v23.f64[0] = v22.n128_f64[0] * (*(double *)(v16 + 88) - *(double *)(v26 + 1432));
    goto LABEL_7;
  }
LABEL_8:
  if (*(_BYTE *)(v10 + 20))
  {
    v357 = *(_BYTE *)(v10 + 129) != 0;
    v33 = v388;
    if (*(_BYTE *)(v11 + 20))
      goto LABEL_10;
  }
  else
  {
    v357 = 0;
    v33 = v388;
    if (*(_BYTE *)(v11 + 20))
    {
LABEL_10:
      v355 = *(_BYTE *)(v11 + 129) != 0;
      if (*(_BYTE *)(v33 + 20))
        goto LABEL_11;
LABEL_15:
      v367 = 0;
      v34 = v386;
      if (*(_BYTE *)(v386 + 20))
        goto LABEL_12;
      goto LABEL_16;
    }
  }
  v355 = 0;
  if (!*(_BYTE *)(v33 + 20))
    goto LABEL_15;
LABEL_11:
  v367 = *(_BYTE *)(v33 + 144) != 0;
  v34 = v386;
  if (*(_BYTE *)(v386 + 20))
  {
LABEL_12:
    v348 = *(_BYTE *)(v34 + 144) != 0;
    goto LABEL_17;
  }
LABEL_16:
  v348 = 0;
LABEL_17:
  v354 = *(unsigned __int8 *)(v385 + 20);
  v369 = *(unsigned __int8 *)(v15 + 20);
  v353 = *(unsigned __int8 *)(v384 + 20);
  v368 = *(unsigned __int8 *)(v14 + 20);
  v35 = *(_QWORD *)(v392 + 24);
  v379 = *(unsigned __int8 *)(v35 + 56);
  v36 = *(double *)(a1 + 40);
  v21.f64[0] = *(float64_t *)(v392 + 32);
  v37 = (const double *)(v12 + 32);
  v38 = *(_QWORD *)(a1 + 32);
  v23.f64[0] = *(float64_t *)(v35 + 80);
  _Q1 = *(float64x2_t *)(v35 + 64);
  v40 = vmulq_f64(v21, v23);
  v358 = v21.f64[0];
  _Q5 = vmulq_n_f64(_Q1, v21.f64[0]);
  _D2 = *(_QWORD *)&v412[24];
  v43.f64[1] = *(float64_t *)&v412[16];
  v44 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v411, _Q5.f64[0]), *(float64x2_t *)&v412[8], _Q5, 1), v413, v40.f64[0]);
  v342 = v40;
  v343 = _Q5;
  __asm { FMLA            D1, D2, V5.D[1] }
  v43.f64[0] = v416;
  _Q1.f64[0] = vmlad_n_f64(_Q1.f64[0], v414, v40.f64[0]);
  _Q2.f64[1] = v415.f64[1];
  _Q16 = vaddq_f64(v44, v415);
  v44.f64[0] = *(float64_t *)(v13 + 120);
  _Q2.f64[0] = *(float64_t *)(v12 + 120);
  v50 = vsubq_f64(v44, _Q2);
  _D4 = *(_QWORD *)(v13 + 72);
  *(_QWORD *)&v344 = *(_OWORD *)&vaddq_f64(_Q1, v43);
  v345 = (int8x16_t)_Q16;
  __asm { FMLA            D2, D4, V16.D[1] }
  _Q2.f64[0] = vmlad_n_f64(_Q2.f64[0], *(double *)(v13 + 96), v344);
  v52 = vaddq_f64(vsubq_f64(*(float64x2_t *)(v13 + 104), *(float64x2_t *)(v12 + 104)), vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v13 + 32), _Q16.f64[0]), *(float64x2_t *)(v13 + 56), _Q16, 1), *(float64x2_t *)(v13 + 80), v344));
  v426 = vld3q_f64(v37);
  v53 = vaddq_f64(v50, _Q2);
  _Q1 = *(float64x2_t *)(v12 + 80);
  v55 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v426.val[0], v52.f64[0]), v426.val[1], v52, 1), v426.val[2], v53.f64[0]);
  v426.val[0] = vmulq_f64(_Q1, v52);
  v346 = (int8x16_t)v52;
  v347 = *(uint64_t *)&v53.f64[0];
  v426.val[1].f64[0] = v52.f64[1];
  __asm { FMLA            D3, D4, V1.D[1] }
  v426.val[0].f64[0] = vmlad_n_f64(v426.val[0].f64[0], *(double *)(v12 + 96), v53.f64[0]);
  _Q1.f64[0] = *(float64_t *)v406;
  v53.f64[0] = v410;
  _Q16.f64[1] = v407.f64[1];
  *(_QWORD *)&v426.val[0].f64[0] = *(_OWORD *)&vsubq_f64(v426.val[0], v53);
  _Q0 = vsubq_f64(v55, v409);
  _Q1.f64[1] = *(float64_t *)&v406[24];
  v56 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v405, *(int64x2_t *)&v406[8]), _Q0.f64[0]), (float64x2_t)vzip2q_s64(v405, *(int64x2_t *)&v406[8]), _Q0, 1), _Q1, v426.val[0].f64[0]);
  _Q0.f64[0] = _Q0.f64[1];
  __asm { FMLA            D1, D0, V16.D[1] }
  v419 = v56;
  v420 = vmlad_n_f64(_Q1.f64[0], v408, v426.val[0].f64[0]);
  v58 = *(_DWORD *)(v38 + 992);
  if (v58 != -1)
  {
    if (v58 <= 7)
      goto LABEL_19;
LABEL_26:
    if (v58 > 0xB)
    {
      if (v58 <= 0xD)
      {
        if (v58 != 13)
          return 0;
        if (v420 < 0.00000001)
          return 0;
        v424 = vdivq_f64(v419, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v420, 0));
        if (!sub_20EB295B8(&v418, &v421, 0, (uint64_t)&v424, (double *)(v38 + 168), (*(double *)v38 + *(double *)(v38 + 32)) * 0.5))return 0;
        _D0 = -v419.f64[1] / (v420 * v420);
        _V3.D[1] = v421.f64[1];
        _V4.D[1] = v422[0].f64[1];
        v65.f64[0] = 0.0;
        v65.f64[1] = 1.0 / v420;
        _Q1 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)COERCE_UNSIGNED_INT64(1.0 / v420), v421.f64[0]), v65, v421, 1);
        __asm { FMLA            D7, D0, V3.D[1] }
        v417[0] = _Q1;
        __asm { FMLA            D2, D0, V4.D[1] }
        *(_QWORD *)&v417[1] = _D7;
        *((_QWORD *)&v417[2] + 1) = _D2;
        *(float64x2_t *)((char *)&v417[1] + 8) = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)COERCE_UNSIGNED_INT64(1.0 / v420), v422[0].f64[0]), v65, v422[0], 1);
        goto LABEL_66;
      }
      if (v58 == 14)
        v61 = sub_20EB2498C(&v418, (uint64_t)v417, 0, (uint64_t)&v419, (double *)(v38 + 168), (*(double *)v38 + *(double *)(v38 + 32)) * 0.5);
      else
        v61 = sub_20EB3F050(v38, &v418, (uint64_t)v417, &v419, 0);
    }
    else if (v58 > 9)
    {
      if (v58 == 10)
        v61 = sub_20EB2450C(&v418, (uint64_t)v417, 0, (uint64_t)&v419, (double *)(v38 + 168), (*(double *)v38 + *(double *)(v38 + 32)) * 0.5);
      else
        v61 = sub_20EB3AF98(v38, &v418, (uint64_t)v417, &v419, 0);
    }
    else
    {
      if (v58 != 9)
      {
        v88 = v420;
        _Q5 = v419;
        *(_QWORD *)&v90 = vextq_s8((int8x16_t)_Q5, (int8x16_t)_Q5, 8uLL).u64[0];
        _Q1 = vmulq_f64(_Q5, _Q5);
        _D0 = v419.f64[1];
        __asm { FMLA            D1, D0, V5.D[1] }
        if (_Q1.f64[0] >= 0.00000001)
        {
          v92 = v420 * v420 + _Q1.f64[0];
          v93 = sqrt(_Q1.f64[0]);
          v362 = _Q1.f64[0];
          v371 = v90;
          v375 = v419;
          _Q0.f64[0] = atan2(v93, v420);
          v107 = *(double *)(v38 + 168);
          v108 = *(double *)(v38 + 176);
          v109 = *(double *)(v38 + 184);
          v110 = *(double *)(v38 + 192);
          v111 = *(double *)(v38 + 200);
          v112 = *(double *)(v38 + 208);
          v113 = *(double *)(v38 + 216);
          v100 = _Q0.f64[0]
               * _Q0.f64[0]
               * (v107 * 3.0
                + _Q0.f64[0]
                * _Q0.f64[0]
                * (v108 * 5.0
                 + _Q0.f64[0]
                 * _Q0.f64[0]
                 * (v109 * 7.0
                  + _Q0.f64[0]
                  * _Q0.f64[0]
                  * (v110 * 9.0
                   + _Q0.f64[0]
                   * _Q0.f64[0]
                   * (v111 * 11.0 + _Q0.f64[0] * _Q0.f64[0] * (v112 * 13.0 + _Q0.f64[0] * _Q0.f64[0] * 15.0 * v113))))))
               + 1.0;
          v90 = v371;
          _Q5 = v375;
          _Q0.f64[0] = _Q0.f64[0]
                     * (_Q0.f64[0]
                      * _Q0.f64[0]
                      * (v107
                       + _Q0.f64[0]
                       * _Q0.f64[0]
                       * (v108
                        + _Q0.f64[0]
                        * _Q0.f64[0]
                        * (v109
                         + _Q0.f64[0]
                         * _Q0.f64[0]
                         * (v110
                          + _Q0.f64[0]
                          * _Q0.f64[0]
                          * (v111 + _Q0.f64[0] * _Q0.f64[0] * (v112 + _Q0.f64[0] * _Q0.f64[0] * v113))))))
                      + 1.0);
          goto LABEL_64;
        }
LABEL_57:
        v102 = 1.0 / v88;
        v103 = -(v102 * v102);
        v104.f64[0] = 0.0;
        v105 = 0;
LABEL_65:
        v418 = vmulq_n_f64(_Q5, v102);
        *(_QWORD *)&v104.f64[1] = v105;
        v115 = vmulq_n_f64(v104, _Q5.f64[0]);
        v116 = vmulq_laneq_f64(v104, _Q5, 1);
        *((_QWORD *)&v417[1] + 1) = *(_QWORD *)&v116.f64[0];
        v115.f64[0] = v102 + v115.f64[0];
        *(double *)&v417[1] = v103 * _Q5.f64[0];
        v417[0] = v115;
        *((double *)&v417[2] + 1) = v103 * v90;
        *(double *)&v417[2] = v102 + v116.f64[1];
        goto LABEL_66;
      }
      v61 = sub_20EB372E0(v38, &v418, (uint64_t)v417, &v419, 0);
    }
    goto LABEL_61;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v58 = *(_DWORD *)(v38 + 992);
  if (v58 > 7)
    goto LABEL_26;
LABEL_19:
  if (v58 > 3)
  {
    if (v58 > 5)
    {
      if (v58 == 6)
      {
        if (v420 == 0.0)
          v85 = 1.0;
        else
          v85 = 1.0 / v420;
        v86 = v419.f64[0] * v85;
        v87 = v85 * v419.f64[1];
        v424.f64[0] = v419.f64[0] * v85;
        v424.f64[1] = v85 * v419.f64[1];
        sub_20EB2837C(&v418, v421.f64, &v424, (double *)(v38 + 168), (float64x2_t *)(v38 + 192), (double *)(v38 + 208));
        *(double *)v417 = v85 * v421.f64[0];
        *((double *)v417 + 1) = v85 * v421.f64[1];
        *((double *)&v417[1] + 1) = v85 * v422[0].f64[0];
        *(double *)&v417[1] = v85 * (-(v421.f64[0] * v86) - v87 * v421.f64[1]);
        *(double *)&v417[2] = v85 * v422[0].f64[1];
        *((double *)&v417[2] + 1) = v85 * (-(v422[0].f64[0] * v86) - v87 * v422[0].f64[1]);
        goto LABEL_66;
      }
      v61 = sub_20EB3345C(v38, &v418, (uint64_t)v417, &v419, 0);
    }
    else
    {
      if (v58 != 5)
        goto LABEL_54;
      v61 = sub_20EB29218(v418.f64, (uint64_t)v417, &v419, (int64x2_t *)(v38 + 168));
    }
LABEL_61:
    if ((v61 & 1) == 0)
      return 0;
    goto LABEL_66;
  }
  if (v58 <= 1)
  {
    if (!v58)
    {
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    if (v420 >= 0.00000001)
    {
      v59 = 1.0 / v420;
      _Q1.f64[1] = v419.f64[1];
      v418 = vmulq_n_f64(v419, 1.0 / v420);
      v417[0] = COERCE_UNSIGNED_INT64(1.0 / v420);
      *((_QWORD *)&v417[1] + 1) = 0;
      *(double *)&v417[1] = v59 * -(v419.f64[0] * v59);
      *(double *)&v417[2] = 1.0 / v420;
      *((double *)&v417[2] + 1) = v59 * -(v419.f64[1] * v59);
      goto LABEL_66;
    }
    return 0;
  }
  if (v58 != 2)
  {
LABEL_54:
    v88 = v420;
    _Q5 = v419;
    *(_QWORD *)&v90 = vextq_s8((int8x16_t)_Q5, (int8x16_t)_Q5, 8uLL).u64[0];
    _Q1 = vmulq_f64(_Q5, _Q5);
    _D0 = v419.f64[1];
    __asm { FMLA            D1, D0, V5.D[1] }
    if (_Q1.f64[0] >= 0.00000001)
    {
      v92 = v420 * v420 + _Q1.f64[0];
      v93 = sqrt(_Q1.f64[0]);
      v362 = _Q1.f64[0];
      v370 = v90;
      v374 = v419;
      _Q0.f64[0] = atan2(v93, v420);
      v94 = *(int64x2_t *)(v38 + 184);
      v95 = *(int64x2_t *)(v38 + 168);
      v96 = (float64x2_t)vzip2q_s64(v95, v94);
      v97 = (float64x2_t)vzip1q_s64(v95, v94);
      v98 = vmulq_n_f64(vaddq_f64(vmulq_f64(v97, (float64x2_t)xmmword_210312E10), vmulq_n_f64(vmulq_f64(v96, (float64x2_t)xmmword_210312E20), _Q0.f64[0] * _Q0.f64[0])), _Q0.f64[0] * _Q0.f64[0]);
      v99 = _Q0.f64[0] * _Q0.f64[0] * (_Q0.f64[0] * _Q0.f64[0]);
      v100 = v98.f64[0] + vmuld_lane_f64(v99, v98, 1) + 1.0;
      _Q1 = vmulq_n_f64(vaddq_f64(v97, vmulq_n_f64(v96, _Q0.f64[0] * _Q0.f64[0])), _Q0.f64[0] * _Q0.f64[0]);
      v90 = v370;
      _Q5 = v374;
      _Q0.f64[0] = _Q0.f64[0] + _Q0.f64[0] * (_Q1.f64[0] + vmuld_lane_f64(v99, _Q1, 1));
LABEL_64:
      v102 = _Q0.f64[0] / v93;
      v114 = v100 / v92;
      v104 = vmulq_n_f64(_Q5, (v88 * (v100 / v92) - v102) / v362);
      v103 = -v114;
      v105 = vextq_s8((int8x16_t)v104, (int8x16_t)v104, 8uLL).u64[0];
      goto LABEL_65;
    }
    goto LABEL_57;
  }
  if (*(_DWORD *)(v38 + 212))
  {
    if (v420 < 0.00000001)
      return 0;
    _Q0 = vmulq_n_f64(v419, 1.0 / v420);
    v68 = *(double *)(v38 + 168);
    v69 = *(double *)(v38 + 176);
    v70 = *(double *)(v38 + 184);
    _D3 = vmuld_lane_f64(1.0 / v420, v419, 1);
    __asm { FMLA            D7, D3, V0.D[1] }
    v73 = v68 * *(double *)&_D7 + 1.0 + *(double *)&_D7 * *(double *)&_D7 * (v69 + v70 * *(double *)&_D7);
    v74 = v68 + v68 + *(double *)&_D7 * (v69 * 4.0 + *(double *)&_D7 * (v70 * 6.0));
    v75 = *(float64x2_t *)(v38 + 192);
    v76 = vmulq_f64(vaddq_f64((float64x2_t)vdupq_lane_s64(_D7, 0), vmulq_f64(_Q0, vaddq_f64(_Q0, _Q0))), (float64x2_t)vextq_s8((int8x16_t)v75, (int8x16_t)v75, 8uLL));
    v77 = vaddq_f64(v75, v75);
    v78 = vmulq_n_f64(v77, _Q0.f64[0]);
    v418 = vmlaq_n_f64(vaddq_f64(v76, vmulq_laneq_f64(v78, _Q0, 1)), _Q0, v73);
    v79 = vmulq_n_f64(_Q0, v74);
    v80 = vmulq_n_f64(v79, _Q0.f64[0]);
    v81 = vmulq_n_f64(v79, _D3);
    v82 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v78.f64[0], 0);
    v82.f64[0] = vmuld_lane_f64(6.0, v75, 1) * _Q0.f64[0];
    v83 = vaddq_f64(v82, vmulq_laneq_f64(v77, _Q0, 1));
    v80.f64[0] = v73 + v80.f64[0];
    v84 = vaddq_f64(v83, v80);
    *(_QWORD *)&v83.f64[0] = vdupq_laneq_s64((int64x2_t)v83, 1).u64[0];
    v83.f64[1] = vmuld_lane_f64(6.0 * v75.f64[0], _Q0, 1) + v78.f64[1];
    v81.f64[1] = v73 + v81.f64[1];
    _Q1 = vmulq_n_f64(v84, 1.0 / v420);
    v417[0] = _Q1;
    *(float64x2_t *)((char *)&v417[1] + 8) = vmulq_n_f64(vaddq_f64(v83, v81), 1.0 / v420);
    *(double *)&v417[1] = -(vmuld_n_f64(_Q1.f64[0], _Q0.f64[0]) + _Q1.f64[1] * _Q0.f64[1]);
    *((double *)&v417[2] + 1) = -(vmuld_n_f64(*((double *)&v417[1] + 1), _Q0.f64[0]) + *(double *)&v417[2] * _Q0.f64[1]);
  }
  else if (!sub_20F0BA0C8(&v418, (uint64_t)v417, &v419, (double *)(v38 + 168)))
  {
    return 0;
  }
LABEL_66:
  v117 = *(_DWORD *)(v38 + 992);
  if (v117 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v117 = *(_DWORD *)(v38 + 992);
  }
  if (!v117)
  {
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Q0.f64[0] = *(float64_t *)v38;
  _Q1.f64[0] = *(float64_t *)(v38 + 32);
  v349 = _Q0;
  v351 = _Q1;
  _Q0.f64[1] = _Q1.f64[0];
  v118.f64[0] = *(float64_t *)(v38 + 16);
  v118.f64[1] = *(float64_t *)(v38 + 40);
  v119 = v418;
  v120 = vsubq_f64(vmlaq_f64(v118, _Q0, v418), *(float64x2_t *)(a1 + 8));
  v121 = 1.0 / v36;
  _Q1 = vmulq_n_f64(v120, 1.0 / v36);
  if (!v379)
    goto LABEL_73;
  _D2 = vmuld_lane_f64(v121, v120, 1);
  __asm { FMLA            D0, D2, V1.D[1] }
  if (_D0 >= 0.00000000999999994)
  {
    v376 = v418;
    v380 = _Q1;
    v359 = _D0;
    v363 = _D2;
    v125 = log1p(_D0);
    v126.f64[0] = 0.0;
    v126.f64[1] = sqrt(v125 / v359);
    v127 = vmulq_n_f64(v380, (1.0 - (v125 + v125 / v359)) / (v359 * ((v359 + 1.0) * v126.f64[1])));
    v119 = v376;
    v360 = vmulq_n_f64(vmlaq_n_f64(v126, v127, v363), 1.0 / v36);
    v364 = vmulq_n_f64(vmlaq_n_f64((float64x2_t)*(unint64_t *)&v126.f64[1], v127, v380.f64[0]), 1.0 / v36);
    _Q1 = vmulq_n_f64(v380, v126.f64[1]);
  }
  else
  {
LABEL_73:
    v128.f64[0] = 0.0;
    v128.f64[1] = 1.0 / v36;
    v360 = v128;
    v364 = (float64x2_t)*(unint64_t *)&v121;
  }
  v381 = (int8x16_t)_Q1;
  if (v367)
  {
    v326 = vmlaq_f64(vmulq_n_f64(v364, v119.f64[0]), (float64x2_t)0, v360);
    v129 = vmulq_f64(v364, (float64x2_t)0);
    v325 = vaddq_f64(v360, v129);
    v323 = vmlaq_f64(v364, (float64x2_t)0, v360);
    v324 = vmlaq_laneq_f64(v129, v360, v119, 1);
  }
  v130 = (float64x2_t)v417[0];
  v372 = (float64x2_t)v417[0];
  v130.f64[0] = *(float64_t *)&v417[1];
  v340 = v130;
  v130.f64[0] = *((float64_t *)&v417[2] + 1);
  v341 = v130;
  v131 = *(float64x2_t *)((char *)&v417[1] + 8);
  v377 = *(float64x2_t *)((char *)&v417[1] + 8);
  if (!v369)
  {
    v133 = v388;
    if (v368)
      goto LABEL_138;
LABEL_84:
    v339.i64[0] = *(_QWORD *)&v131.f64[0];
    v334 = *(_QWORD *)&v131.f64[0];
    v338.i64[0] = *(_QWORD *)&v131.f64[0];
    v335 = *(_QWORD *)&v131.f64[0];
    v337.i64[0] = *(_QWORD *)&v131.f64[0];
    v336 = *(_QWORD *)&v131.f64[0];
    v135 = v349;
    v134 = v351;
    v137 = v360;
    v136 = v364;
    goto LABEL_183;
  }
  *(_QWORD *)&v424.f64[0] = &v421;
  *(_QWORD *)&v424.f64[1] = &v419;
  if (v117 != -1)
  {
    if (v117 <= 7)
      goto LABEL_79;
LABEL_87:
    if (v117 <= 0xB)
    {
      if (v117 <= 9)
      {
        if (v117 != 9)
          sub_20FBCF154();
        sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/LensModel.cpp", 852, (uint64_t)&unk_210254955, 0, (uint64_t)"not implemented yet. rdar://113779839", 37, (void (*)(void **))sub_21023DDB0);
        abort();
      }
      if (v117 == 10)
        sub_20FBCF154();
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/LensModel.cpp", 852, (uint64_t)&unk_210254955, 0, (uint64_t)"not implemented yet. rdar://113779839", 37, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    if (v117 > 0xD)
    {
      if (v117 == 14)
        sub_20FBCF154();
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/LensModel.cpp", 852, (uint64_t)&unk_210254955, 0, (uint64_t)"not implemented yet. rdar://113779839", 37, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    v138 = v424.f64[0];
    if (v117 == 13)
      sub_20EB43BB4();
    _Q0 = **(float64x2_t **)&v424.f64[1];
    _D2 = *(_QWORD *)(*(_QWORD *)&v424.f64[1] + 8);
    __asm { FMLA            D1, D2, V0.D[1] }
    v133 = v388;
    if (_D1 >= 0.00000001)
    {
      v149 = *(double *)(*(_QWORD *)&v424.f64[1] + 16);
      *(double *)&v150 = sqrt(_D1);
      v151 = fabs(v149);
      v152 = fabs(*(double *)&v150);
      v153 = v151 / v152;
      if (v151 >= v152)
        v153 = v152 / v151;
      if (v153 <= 0.414213562)
      {
        v155 = 1;
        v156 = 2;
        v154 = v153;
      }
      else
      {
        v154 = (v152 - v151) / (v151 + v152);
        if (v151 >= v152)
          v154 = -v154;
        v155 = -1;
        v156 = 1;
      }
      v157 = v153 > 0.414213562;
      v158 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v154 * v154), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v154 * v154), (float64x2_t)xmmword_210315370), v154 * v154 * (v154 * v154))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v154 * v154), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v154 * v154), (float64x2_t)xmmword_210315380), v154 * v154 * (v154 * v154))), v154 * v154 * (v154 * v154) * (v154 * v154 * (v154 * v154))));
      v159 = v154 + v154 * vdivq_f64(v158, (float64x2_t)vdupq_laneq_s64((int64x2_t)v158, 1)).f64[0];
      if (*(double *)&v150 == INFINITY && v151 == INFINITY)
        v159 = 0.785398163;
      if (v151 >= v152)
        v156 = v157;
      else
        v155 = -v155;
      if (v149 < 0.0)
        v155 = -v155;
      if (*(uint64_t *)(*(_QWORD *)&v424.f64[1] + 16) < 0)
        v156 = 4 - v156;
      if (v150 < 0)
      {
        v155 = -v155;
        v156 = -v156;
      }
      if (*(double *)&v150 == 0.0 && v149 == 0.0)
        v162 = 0.0;
      else
        v162 = v159;
      v163 = (double)v156 * 3.061617e-17 + (double)v156 * 0.785398163 + v162 * (double)v155;
      v164 = v163 * v163;
      v165.f64[0] = v163 * (v163 * v163);
      v165.f64[1] = v164 * v165.f64[0];
      v166 = vmulq_n_f64(v165, v164 * v164);
      v167 = vdivq_f64(_Q0, (float64x2_t)vdupq_lane_s64(v150, 0));
      **(_OWORD **)&v424.f64[0] = vmulq_n_f64(v165, v167.f64[0]);
      *(float64x2_t *)(*(_QWORD *)&v138 + 16) = vmulq_n_f64(v166, v167.f64[0]);
      *(float64x2_t *)(*(_QWORD *)&v138 + 32) = vmulq_laneq_f64(v165, v167, 1);
      *(float64x2_t *)(*(_QWORD *)&v138 + 48) = vmulq_laneq_f64(v166, v167, 1);
    }
    else
    {
      *(_OWORD *)(*(_QWORD *)&v424.f64[0] + 32) = 0u;
      *(_OWORD *)(*(_QWORD *)&v138 + 48) = 0u;
      **(_OWORD **)&v138 = 0u;
      *(_OWORD *)(*(_QWORD *)&v138 + 16) = 0u;
    }
    goto LABEL_137;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v117 = *(_DWORD *)(v38 + 992);
  if (v117 > 7)
    goto LABEL_87;
LABEL_79:
  if (v117 > 3)
  {
    if (v117 > 5)
    {
      if (v117 == 6)
        sub_20EB42068();
      sub_20EB34694(v38, *(float64x2_t **)&v424.f64[0], *(float64x2_t **)&v424.f64[1]);
      v133 = v388;
    }
    else
    {
      v133 = v388;
      sub_20FBCEF64((float64x2_t **)&v424);
    }
  }
  else
  {
    if (v117 <= 1)
    {
      if (!v117)
      {
        sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
        abort();
      }
      v132 = v424.f64[0];
      *(_OWORD *)(*(_QWORD *)&v424.f64[0] + 32) = 0u;
      *(_OWORD *)(*(_QWORD *)&v132 + 48) = 0u;
      **(_OWORD **)&v132 = 0u;
      *(_OWORD *)(*(_QWORD *)&v132 + 16) = 0u;
      goto LABEL_99;
    }
    if (v117 == 2)
    {
      v142 = v424.f64[0];
      v143 = (const double *)(*(_QWORD *)&v424.f64[1] + 16);
      _D2 = *(_QWORD *)(*(_QWORD *)&v424.f64[1] + 8);
      __asm { FMLA            D1, D2, V0.D[1] }
      *(double *)&v146 = _Q1.f64[0] * (_Q1.f64[0] * _Q1.f64[0]);
      _Q1.f64[1] = _Q1.f64[0] * _Q1.f64[0];
      v147 = vld1q_dup_f64(v143);
      v148 = vdivq_f64(**(float64x2_t **)&v424.f64[1], v147);
      **(_OWORD **)&v424.f64[0] = vmulq_n_f64(_Q1, v148.f64[0]);
      *(float64x2_t *)(*(_QWORD *)&v142 + 16) = vmulq_n_f64((float64x2_t)v146, v148.f64[0]);
      *(float64x2_t *)(*(_QWORD *)&v142 + 32) = vmulq_laneq_f64(_Q1, v148, 1);
      *(float64x2_t *)(*(_QWORD *)&v142 + 48) = vmulq_laneq_f64((float64x2_t)v146, v148, 1);
LABEL_99:
      v133 = v388;
      goto LABEL_137;
    }
    sub_20FBCEF64((float64x2_t **)&v424);
    v133 = v388;
  }
LABEL_137:
  v168 = vmlaq_f64(vmulq_n_f64(v364, v349.f64[0]), (float64x2_t)0, v360);
  v169 = vmlaq_n_f64(vmulq_f64(v364, (float64x2_t)0), v360, v351.f64[0]);
  v330 = vmlaq_laneq_f64(vmulq_laneq_f64(v168, v421, 1), v169, v422[1], 1);
  v331 = vmlaq_n_f64(vmulq_n_f64(v168, v421.f64[0]), v169, v422[1].f64[0]);
  v170 = vmlaq_n_f64(vmulq_n_f64(v168, v422[0].f64[0]), v169, v423.f64[0]);
  v131 = vmlaq_laneq_f64(vmulq_laneq_f64(v168, v422[0], 1), v169, v423, 1);
  v328 = v131;
  v329 = v170;
  if (!v368)
    goto LABEL_84;
LABEL_138:
  v171 = *(_DWORD *)(v38 + 992);
  if (v171 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v171 = *(_DWORD *)(v38 + 992);
    if (v171 <= 7)
      goto LABEL_140;
  }
  else if (v171 <= 7)
  {
LABEL_140:
    if (v171 <= 3)
    {
      if (v171 > 1)
      {
        memset(v422, 0, sizeof(v422));
        v421 = 0u;
        if (v171 == 2)
        {
          v172 = (double *)(v38 + 168);
          if (*(_DWORD *)(v38 + 212))
            sub_20FA1E060(&v418, (uint64_t)v417, &v419, v172, (float64x2_t *)(v38 + 192));
          else
            sub_20F0BA0C8(&v418, (uint64_t)v417, &v419, v172);
        }
        else
        {
          v187 = v420;
          _Q1 = v419;
          _D0 = v419.f64[1];
          __asm { FMLA            D2, D0, V1.D[1] }
          if (_D2 >= 0.00000001)
          {
            v198 = v420 * v420 + _D2;
            v199 = sqrt(_D2);
            v390 = _D2;
            v200 = atan2(v199, v420);
            v424.f64[0] = 0.0;
            v191 = sub_20F0BA1B0((int64x2_t *)(v38 + 168), v424.f64, v200) / v199;
            _Q1 = v419;
            v193 = vmulq_n_f64(v419, (v187 * (v424.f64[0] / v198) - v191) / v390);
            v192 = -(v424.f64[0] / v198);
            v194 = vextq_s8((int8x16_t)v193, (int8x16_t)v193, 8uLL).u64[0];
          }
          else
          {
            v191 = 1.0 / v420;
            v192 = -(v191 * v191);
            v193.f64[0] = 0.0;
            v194 = 0;
          }
          v418 = vmulq_n_f64(_Q1, v191);
          *(_QWORD *)&v193.f64[1] = v194;
          v201 = vmulq_n_f64(v193, _Q1.f64[0]);
          *((_QWORD *)&v417[0] + 1) = *(_QWORD *)&v201.f64[1];
          *((_QWORD *)&v417[2] + 1) = vmuld_lane_f64(v192, _Q1, 1);
          *(float64x2_t *)((char *)&v417[1] + 8) = vmulq_laneq_f64(v193, _Q1, 1);
          *(double *)&v417[1] = v192 * _Q1.f64[0];
          *(double *)v417 = v191 + v201.f64[0];
        }
      }
      else
      {
        if (!v171)
        {
          sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
          abort();
        }
        memset(v422, 0, sizeof(v422));
        v421 = 0u;
        if (v420 >= 0.00000001)
        {
          *(double *)&v417[2] = 1.0 / v420;
          *(double *)v417 = 1.0 / v420;
          *((_QWORD *)&v417[0] + 1) = 0;
          v417[1] = COERCE_UNSIGNED_INT64(1.0 / v420 * -(v419.f64[0] * (1.0 / v420)));
        }
      }
      goto LABEL_182;
    }
    if (v171 > 5)
    {
      if (v171 == 6)
        sub_20EB41F64((float64x2_t *)v38, &v418, (double *)v417, v419.f64, &v421);
      else
        sub_20EB3345C(v38, &v418, (uint64_t)v417, &v419, (uint64_t)&v421);
      goto LABEL_182;
    }
    memset(v422, 0, sizeof(v422));
    v421 = 0u;
    if (v171 == 5)
    {
      sub_20EB29218(v418.f64, (uint64_t)v417, &v419, (int64x2_t *)(v38 + 168));
      goto LABEL_182;
    }
    v173 = v420;
    _Q1 = v419;
    _D0 = v419.f64[1];
    __asm { FMLA            D2, D0, V1.D[1] }
    if (_D2 < 0.00000001)
      goto LABEL_170;
    v177 = v420 * v420 + _D2;
    v178 = sqrt(_D2);
    v389 = _D2;
    v195 = atan2(v178, v420);
    v424.f64[0] = 0.0;
    v180 = sub_20F0BA1B0((int64x2_t *)(v38 + 168), v424.f64, v195);
    goto LABEL_177;
  }
  if (v171 > 0xB)
  {
    if (v171 > 0xD)
    {
      if (v171 == 14)
      {
        memset(v422, 0, sizeof(v422));
        v421 = 0u;
        sub_20EB2498C(&v418, (uint64_t)v417, 0, (uint64_t)&v419, (double *)(v38 + 168), (*(double *)v38 + *(double *)(v38 + 32)) * 0.5);
      }
      else
      {
        sub_20EB3F050(v38, &v418, (uint64_t)v417, &v419, (uint64_t)&v421);
      }
    }
    else if (v171 == 13)
    {
      sub_20EB439AC((double *)v38, &v418, (uint64_t)v417, &v419, &v421);
    }
    else
    {
      memset(v422, 0, sizeof(v422));
      v421 = 0u;
      v418 = 0uLL;
      memset(v417, 0, sizeof(v417));
    }
    goto LABEL_182;
  }
  if (v171 > 9)
  {
    if (v171 == 10)
    {
      memset(v422, 0, sizeof(v422));
      v421 = 0u;
      sub_20EB2450C(&v418, (uint64_t)v417, 0, (uint64_t)&v419, (double *)(v38 + 168), (*(double *)v38 + *(double *)(v38 + 32)) * 0.5);
    }
    else
    {
      sub_20EB3AF98(v38, &v418, (uint64_t)v417, &v419, (uint64_t)&v421);
    }
    goto LABEL_182;
  }
  if (v171 != 9)
  {
    memset(v422, 0, sizeof(v422));
    v421 = 0u;
    v173 = v420;
    _Q1 = v419;
    _D0 = v419.f64[1];
    __asm { FMLA            D2, D0, V1.D[1] }
    if (_D2 < 0.00000001)
    {
LABEL_170:
      v183 = 1.0 / v173;
      v184 = -(v183 * v183);
      v185.f64[0] = 0.0;
      v186 = 0;
LABEL_178:
      v418 = vmulq_n_f64(_Q1, v183);
      *(_QWORD *)&v185.f64[1] = v186;
      v196 = vmulq_n_f64(v185, _Q1.f64[0]);
      v197 = vmulq_laneq_f64(v185, _Q1, 1);
      *((_QWORD *)&v417[0] + 1) = *(_QWORD *)&v196.f64[1];
      *((_QWORD *)&v417[1] + 1) = *(_QWORD *)&v197.f64[0];
      *(double *)&v417[1] = v184 * _Q1.f64[0];
      *(double *)v417 = v183 + v196.f64[0];
      *((_QWORD *)&v417[2] + 1) = vmuld_lane_f64(v184, _Q1, 1);
      *(double *)&v417[2] = v183 + v197.f64[1];
      goto LABEL_182;
    }
    v177 = v420 * v420 + _D2;
    v178 = sqrt(_D2);
    v389 = _D2;
    v179 = atan2(v178, v420);
    v424.f64[0] = 0.0;
    v180 = sub_20F0BA21C((double *)(v38 + 168), v424.f64, v179);
LABEL_177:
    v183 = v180 / v178;
    _Q1 = v419;
    v185 = vmulq_n_f64(v419, (v173 * (v424.f64[0] / v177) - v183) / v389);
    v184 = -(v424.f64[0] / v177);
    v186 = vextq_s8((int8x16_t)v185, (int8x16_t)v185, 8uLL).u64[0];
    goto LABEL_178;
  }
  sub_20EB372E0(v38, &v418, (uint64_t)v417, &v419, (uint64_t)&v421);
LABEL_182:
  v135 = v349;
  v134 = v351;
  v137 = v360;
  v136 = v364;
  v202 = vmlaq_f64(vmulq_n_f64(v364, v349.f64[0]), (float64x2_t)0, v360);
  v203 = vmlaq_n_f64(vmulq_f64(v364, (float64x2_t)0), v360, v351.f64[0]);
  v337 = (int8x16_t)vmlaq_n_f64(vmulq_n_f64(v202, v422[0].f64[0]), v203, v422[1].f64[1]);
  v338 = (int8x16_t)vmlaq_laneq_f64(vmulq_laneq_f64(v202, v421, 1), v203, *(float64x2_t *)((char *)v422 + 8), 1);
  v335 = vextq_s8(v338, v338, 8uLL).u64[0];
  v336 = vextq_s8(v337, v337, 8uLL).u64[0];
  v339 = (int8x16_t)vmlaq_n_f64(vmulq_n_f64(v202, v421.f64[0]), v203, v422[0].f64[1]);
  v334 = vextq_s8(v339, v339, 8uLL).u64[0];
LABEL_183:
  v204 = (int8x16_t)vmulq_n_f64(v372, v135.f64[0]);
  v205 = (int8x16_t)vmulq_n_f64(v377, v134.f64[0]);
  v206 = vextq_s8(v381, v204, 1uLL);
  v207 = vmlaq_n_f64(vmulq_n_f64(v136, *(double *)v204.i64), v137, *(double *)v205.i64);
  v208 = vmlaq_n_f64(vmulq_n_f64(v136, *(double *)vextq_s8(v204, v204, 8uLL).i64), v137, *(double *)vextq_s8(v205, v205, 8uLL).i64);
  v209 = vmlaq_n_f64(vmulq_n_f64(v136, vmulq_f64(v135, v340).f64[0]), v137, vmulq_f64(v134, v341).f64[0]);
  v210 = vnegq_f64(v207);
  v211 = vmlsq_lane_f64(vmlsq_lane_f64(vmulq_n_f64(v210, *(double *)v405.i64), v208, *(double *)&v406[8], 0), v209, v407.f64[0], 0);
  v212 = vmlsq_laneq_f64(vmlsq_laneq_f64(vmulq_laneq_f64(v210, (float64x2_t)v405, 1), v208, *(float64x2_t *)&v406[8], 1), v209, v407, 1);
  v213 = vmlsq_lane_f64(vmlsq_lane_f64(vmulq_n_f64(v210, *(double *)v406), v208, *(double *)&v406[24], 0), v209, v408, 0);
  v214.f64[0] = *(float64_t *)(v12 + 48);
  v215 = *(float64x2_t *)(v12 + 32);
  v216 = *(float64x2_t *)(v12 + 56);
  v217 = *(double *)(v12 + 96);
  v218 = *(float64x2_t *)(v12 + 80);
  v219 = vnegq_f64(v211);
  v220 = vmlsq_lane_f64(vmlsq_lane_f64(vmulq_n_f64(v219, v215.f64[0]), v212, v216.f64[0], 0), v213, v218.f64[0], 0);
  v221 = vmlsq_laneq_f64(vmlsq_laneq_f64(vmulq_laneq_f64(v219, v215, 1), v212, v216, 1), v213, v218, 1);
  v373 = (int64x2_t)v215;
  v378 = *(double *)(v12 + 72);
  v222 = vmlsq_lane_f64(vmlsq_lane_f64(vmulq_n_f64(v219, v214.f64[0]), v212, v378, 0), v213, v217, 0);
  v223 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v220, *(double *)(v13 + 32)), v221, *(float64x2_t *)(v13 + 32), 1), v222, *(double *)(v13 + 48));
  v224 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v220, *(double *)(v13 + 56)), v221, *(float64x2_t *)(v13 + 56), 1), v222, *(double *)(v13 + 72));
  v225 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v220, *(double *)(v13 + 80)), v221, *(float64x2_t *)(v13 + 80), 1), v222, *(double *)(v13 + 96));
  v361 = (int64x2_t)v216;
  v365 = v218.f64[1];
  v352 = v207;
  if (v24 <= 0.0)
  {
    v229 = vextq_s8((int8x16_t)v213, (int8x16_t)v213, 8uLL).u64[0];
    v332 = vextq_s8((int8x16_t)v211, (int8x16_t)v211, 8uLL).u64[0];
    v333 = vextq_s8((int8x16_t)v212, (int8x16_t)v212, 8uLL).u64[0];
    v226.i64[0] = *(_QWORD *)&v211.f64[0];
    v227.i64[0] = *(_QWORD *)&v212.f64[0];
    v228.i64[0] = *(_QWORD *)&v213.f64[0];
    v235 = vextq_s8((int8x16_t)v225, (int8x16_t)v225, 8uLL).u64[0];
    v230.i64[0] = *(_QWORD *)&v223.f64[0];
    v233 = vextq_s8((int8x16_t)v224, (int8x16_t)v224, 8uLL).u64[0];
    v231.i64[0] = *(_QWORD *)&v224.f64[0];
    v234 = vextq_s8((int8x16_t)v223, (int8x16_t)v223, 8uLL).u64[0];
    v232.i64[0] = *(_QWORD *)&v225.f64[0];
  }
  else
  {
    v226 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v211, v393.f64[0]), v212, v395.f64[0]), v213, v397.f64[0]);
    v227 = (int8x16_t)vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v211, v393, 1), v212, v395, 1), v213, v397, 1);
    v228 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v211, v394), v212, v396), v213, v398);
    v332 = vextq_s8(v226, v226, 8uLL).u64[0];
    v333 = vextq_s8(v227, v227, 8uLL).u64[0];
    v229 = vextq_s8(v228, v228, 8uLL).u64[0];
    v230 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v223, v399.f64[0]), v224, v401.f64[0]), v225, v403.f64[0]);
    v231 = (int8x16_t)vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v223, v399, 1), v224, v401, 1), v225, v403, 1);
    v232 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v223, v400), v224, v402), v225, v404);
    v233 = vextq_s8(v231, v231, 8uLL).u64[0];
    v234 = vextq_s8(v230, v230, 8uLL).u64[0];
    v235 = vextq_s8(v232, v232, 8uLL).u64[0];
  }
  v236 = v411;
  v350 = v420;
  v237 = *(float64x2_t *)&v412[8];
  v238 = v413;
  v239 = v419;
  v6.f64[0] = *(float64_t *)v412;
  v4.f64[0] = *(float64_t *)&v412[24];
  v5.f64[0] = v414;
  v240 = *(float64x2_t *)(v35 + 64);
  v241 = *(double *)(v35 + 80);
  *(_BYTE *)a3 = v381.i8[0];
  *(_BYTE *)(a3 + 15) = v206.i8[14];
  *(_WORD *)(a3 + 13) = v206.i16[6];
  *(_DWORD *)(a3 + 9) = v206.i32[2];
  *(_QWORD *)(a3 + 1) = v206.i64[0];
  v382 = v4.f64[0];
  if (!v355)
  {
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 80) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    v247 = v386;
    v248 = v238;
    v249 = v236;
    v250 = v237;
    v251 = (float64x2_t *)(a4 + 96);
    v252 = v5.f64[0];
    if (v357)
      goto LABEL_210;
LABEL_190:
    v251[4] = 0u;
    v251[5] = 0u;
    v251[2] = 0u;
    v251[3] = 0u;
    *v251 = 0u;
    v251[1] = 0u;
    v253 = v382;
    v254 = v6.f64[0];
    v255 = vmulq_n_f64(v223, v249.f64[0]);
    v256 = vmulq_n_f64(v223, v250.f64[0]);
    v257 = vmulq_n_f64(v223, v248.f64[0]);
    if (!*(_BYTE *)(v13 + 20))
      goto LABEL_192;
    goto LABEL_191;
  }
  v322 = v233;
  v327 = v240;
  v356 = v217;
  v242 = (float64x2_t)vextq_s8((int8x16_t)v343, (int8x16_t)v343, 8uLL);
  v243 = vmlsq_lane_f64(vmulq_n_f64(v238, v242.f64[0]), v237, v342.f64[0], 0);
  v244 = vmlsq_lane_f64(vmulq_n_f64(v236, v342.f64[0]), v238, v343.f64[0], 0);
  v245 = vmlsq_lane_f64(vmulq_n_f64(v237, v343.f64[0]), v236, v242.f64[0], 0);
  *(float64x2_t *)a4 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v223, v243.f64[0]), v224, v243, 1), v225, vmlsq_f64(vmulq_f64(v242, v5), v342, v4).f64[0]);
  *(float64x2_t *)(a4 + 16) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v223, v244.f64[0]), v224, v244, 1), v225, vmlsq_f64(vmulq_f64(v342, v6), v343, v5).f64[0]);
  *(float64x2_t *)(a4 + 32) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v223, v245.f64[0]), v224, v245, 1), v225, vmlsq_f64(vmulq_f64(v343, v4), v242, v6).f64[0]);
  v246 = (int8x16_t *)(a4 + 48);
  v247 = v386;
  if (*(_BYTE *)(v11 + 128))
  {
    v230.i64[1] = v234;
    v231.i64[1] = v322;
    *v246 = v230;
    *(int8x16_t *)(a4 + 64) = v231;
    v232.i64[1] = v235;
    *(int8x16_t *)(a4 + 80) = v232;
  }
  else
  {
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 80) = 0u;
    *v246 = 0u;
  }
  v217 = v356;
  v240 = v327;
  v248 = v238;
  v250 = v237;
  v249 = v236;
  v251 = (float64x2_t *)(a4 + 96);
  v252 = v5.f64[0];
  if (!v357)
    goto LABEL_190;
LABEL_210:
  v300 = (int8x16_t)vsubq_f64(vmulq_n_f64(v208, v350), vmulq_n_f64(v209, v239.f64[1]));
  v301 = (int8x16_t)vsubq_f64(vmulq_n_f64(v209, v239.f64[0]), vmulq_n_f64(v352, v350));
  v302 = (int8x16_t)vsubq_f64(vmulq_n_f64(v352, v239.f64[1]), vmulq_n_f64(v208, v239.f64[0]));
  v300.i64[1] = vextq_s8(v300, v300, 8uLL).u64[0];
  v301.i64[1] = vextq_s8(v301, v301, 8uLL).u64[0];
  *(int8x16_t *)(a4 + 96) = v300;
  *(int8x16_t *)(a4 + 112) = v301;
  v302.i64[1] = vextq_s8(v302, v302, 8uLL).u64[0];
  *(int8x16_t *)(a4 + 128) = v302;
  v303 = (int8x16_t *)(a4 + 144);
  v253 = v382;
  if (*(_BYTE *)(v10 + 128))
  {
    v226.i64[1] = v332;
    v227.i64[1] = v333;
    *v303 = v226;
    *(int8x16_t *)(a4 + 160) = v227;
    v228.i64[1] = v229;
    *(int8x16_t *)(a4 + 176) = v228;
    v254 = v6.f64[0];
    v255 = vmulq_n_f64(v223, v249.f64[0]);
    v256 = vmulq_n_f64(v223, v250.f64[0]);
    v257 = vmulq_n_f64(v223, v248.f64[0]);
    if (!*(_BYTE *)(v13 + 20))
      goto LABEL_192;
LABEL_191:
    *(_QWORD *)&v258 = vextq_s8(v345, v345, 8uLL).u64[0];
    v259 = (int8x16_t)vsubq_f64(vmulq_n_f64(v225, v258), vmulq_n_f64(v224, v344));
    v260 = (int8x16_t)vsubq_f64(vmulq_n_f64(v223, v344), vmulq_n_f64(v225, *(double *)v345.i64));
    v261 = (int8x16_t)vsubq_f64(vmulq_n_f64(v224, *(double *)v345.i64), vmulq_n_f64(v223, v258));
    v259.i64[1] = vextq_s8(v259, v259, 8uLL).u64[0];
    v260.i64[1] = vextq_s8(v260, v260, 8uLL).u64[0];
    *(int8x16_t *)(a4 + 192) = v259;
    *(int8x16_t *)(a4 + 208) = v260;
    v261.i64[1] = vextq_s8(v261, v261, 8uLL).u64[0];
    *(int8x16_t *)(a4 + 224) = v261;
    *(float64x2_t *)(a4 + 240) = v220;
    *(float64x2_t *)(a4 + 256) = v221;
    *(float64x2_t *)(a4 + 272) = v222;
    goto LABEL_192;
  }
  *(_OWORD *)(a4 + 160) = 0u;
  *(_OWORD *)(a4 + 176) = 0u;
  *v303 = 0u;
  v254 = v6.f64[0];
  v255 = vmulq_n_f64(v223, v249.f64[0]);
  v256 = vmulq_n_f64(v223, v250.f64[0]);
  v257 = vmulq_n_f64(v223, v248.f64[0]);
  if (*(_BYTE *)(v13 + 20))
    goto LABEL_191;
LABEL_192:
  v262 = vmlaq_laneq_f64(v255, v224, v249, 1);
  v263 = vmlaq_laneq_f64(v256, v224, v250, 1);
  v264 = (float64x2_t *)(a4 + 288);
  v265 = vmlaq_laneq_f64(v257, v224, v248, 1);
  if (*(_BYTE *)(v12 + 20))
  {
    _D6 = vextq_s8(v346, v346, 8uLL).u64[0];
    _V21.D[1] = v365;
    __asm { FMLA            D7, D6, V21.D[1] }
    v214.f64[1] = v378;
    v269 = _D7 + v217 * *(double *)&v347;
    v270 = vmlaq_f64(vmlaq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v373, v361), *(double *)v346.i64), (float64x2_t)vdupq_laneq_s64((int64x2_t)v346, 1), (float64x2_t)vzip2q_s64(v373, v361)), (float64x2_t)vdupq_lane_s64(v347, 0), v214);
    v271 = (int8x16_t)vsubq_f64(vmulq_laneq_f64(v213, v270, 1), vmulq_n_f64(v212, v269));
    v272 = (int8x16_t)vsubq_f64(vmulq_n_f64(v211, v269), vmulq_n_f64(v213, v270.f64[0]));
    v273 = (int8x16_t)vsubq_f64(vmulq_n_f64(v212, v270.f64[0]), vmulq_laneq_f64(v211, v270, 1));
    v271.i64[1] = vextq_s8(v271, v271, 8uLL).u64[0];
    v272.i64[1] = vextq_s8(v272, v272, 8uLL).u64[0];
    v273.i64[1] = vextq_s8(v273, v273, 8uLL).u64[0];
    *v264 = (float64x2_t)v271;
    *(int8x16_t *)(a4 + 304) = v272;
    *(int8x16_t *)(a4 + 320) = v273;
    *(float64x2_t *)(a4 + 336) = vnegq_f64(v220);
    *(float64x2_t *)(a4 + 352) = vnegq_f64(v221);
    *(float64x2_t *)(a4 + 368) = vnegq_f64(v222);
  }
  v274 = vmlaq_n_f64(v262, v225, v254);
  v275 = vmlaq_n_f64(v263, v225, v253);
  v276 = vmlaq_n_f64(v265, v225, v252);
  if (*(_BYTE *)(v392 + 20))
    *(float64x2_t *)(a4 + 736) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v274, v240.f64[0]), v275, v240, 1), v276, v241);
  v383 = vmulq_n_f64(v274, v358);
  v387 = vmulq_n_f64(v275, v358);
  v391 = vmulq_n_f64(v276, v358);
  if (!*(_BYTE *)(v247 + 144))
  {
    *(_OWORD *)(a4 + 416) = 0u;
    *(_OWORD *)(a4 + 432) = 0u;
    *(_OWORD *)(a4 + 384) = 0u;
    *(_OWORD *)(a4 + 400) = 0u;
    if (*(_BYTE *)(v133 + 144))
      goto LABEL_200;
LABEL_204:
    *(_OWORD *)(a4 + 480) = 0u;
    *(_OWORD *)(a4 + 496) = 0u;
    *(_OWORD *)(a4 + 448) = 0u;
    *(_OWORD *)(a4 + 464) = 0u;
LABEL_205:
    if (!v354)
      goto LABEL_217;
    goto LABEL_206;
  }
  if (v348)
  {
    sub_20F62E744(v247 + 16);
    v277 = *(float64x2_t **)(v392 + 24);
    v279 = v277[7];
    v278 = v277[8];
    v281 = v277[9];
    v280 = v277[10];
    v283 = v277[11];
    v282 = v277[12];
    *(float64x2_t *)(a4 + 384) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v383, v279.f64[0]), v387, v281.f64[0]), v391, v283.f64[0]);
    *(float64x2_t *)(a4 + 400) = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v383, v279, 1), v387, v281, 1), v391, v283, 1);
    *(float64x2_t *)(a4 + 416) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v383, v278.f64[0]), v387, v280.f64[0]), v391, v282.f64[0]);
    *(float64x2_t *)(a4 + 432) = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v383, v278, 1), v387, v280, 1), v391, v282, 1);
  }
  if (!*(_BYTE *)(v133 + 144))
    goto LABEL_204;
LABEL_200:
  if (!v367)
    goto LABEL_205;
  v284 = *(_QWORD *)(v133 + 24);
  if (*(_BYTE *)(v284 + 40))
  {
    __asm { FMOV            V3.2D, #1.0 }
    _Q3.f64[0] = *(float64_t *)(v284 + 32);
    v286 = (float64x2_t)xmmword_2102DD520;
    v287 = (float64x2_t)xmmword_21030D320;
    v288 = 0uLL;
    v289 = 0uLL;
    v290 = 0uLL;
    v291 = 0uLL;
    v292 = 0uLL;
  }
  else
  {
    v292 = (float64x2_t)xmmword_2103BBE60;
    v286 = (float64x2_t)unk_2103BBE70;
    v291 = (float64x2_t)xmmword_2103BBE40;
    v287 = (float64x2_t)unk_2103BBE50;
    _Q3 = (float64x2_t)xmmword_2103BBE20;
    v290 = (float64x2_t)unk_2103BBE30;
    v288 = (float64x2_t)xmmword_2103BBE00;
    v289 = *(float64x2_t *)algn_2103BBE10;
  }
  *(float64x2_t *)(a4 + 448) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v326, v288.f64[0]), v324, v288, 1), v323, v289.f64[0]), v325, v289, 1);
  *(float64x2_t *)(a4 + 464) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v326, _Q3.f64[0]), v324, _Q3, 1), v323, v290.f64[0]), v325, v290, 1);
  *(float64x2_t *)(a4 + 480) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v326, v291.f64[0]), v324, v291, 1), v323, v287.f64[0]), v325, v287, 1);
  *(float64x2_t *)(a4 + 496) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v326, v292.f64[0]), v324, v292, 1), v323, v286.f64[0]), v325, v286, 1);
  if (!v354)
  {
LABEL_217:
    if (!v369)
      goto LABEL_219;
    goto LABEL_218;
  }
LABEL_206:
  sub_20F62F34C(v385 + 16);
  v293 = *(float64x2_t **)(v392 + 24);
  v295 = v293[13];
  v294 = v293[14];
  v297 = v293[15];
  v296 = v293[16];
  v299 = v293[17];
  v298 = v293[18];
  *(float64x2_t *)(a4 + 512) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v383, v295.f64[0]), v387, v297.f64[0]), v391, v299.f64[0]);
  *(float64x2_t *)(a4 + 528) = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v383, v295, 1), v387, v297, 1), v391, v299, 1);
  *(float64x2_t *)(a4 + 544) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v383, v294.f64[0]), v387, v296.f64[0]), v391, v298.f64[0]);
  *(float64x2_t *)(a4 + 560) = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v383, v294, 1), v387, v296, 1), v391, v298, 1);
  if (v369)
  {
LABEL_218:
    *(float64x2_t *)(a4 + 576) = v331;
    *(float64x2_t *)(a4 + 592) = v330;
    *(float64x2_t *)(a4 + 608) = v329;
    *(float64x2_t *)(a4 + 624) = v328;
  }
LABEL_219:
  if (v353)
  {
    sub_20F8127FC(v384 + 16);
    v304 = *(_QWORD *)(v392 + 24);
    v305 = *(float64x2_t *)(v304 + 304);
    v306 = *(float64x2_t *)(v304 + 328);
    v307 = *(float64x2_t *)(v304 + 352);
    v308 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v383, *(double *)(v304 + 320)), v387, *(double *)(v304 + 344)), v391, *(double *)(v304 + 368));
    *(float64x2_t *)(a4 + 640) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v383, v305.f64[0]), v387, v306.f64[0]), v391, v307.f64[0]);
    *(float64x2_t *)(a4 + 656) = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v383, v305, 1), v387, v306, 1), v391, v307, 1);
    *(float64x2_t *)(a4 + 672) = v308;
  }
  if (v368)
  {
    *(_QWORD *)&v309 = v339.i64[0];
    *((_QWORD *)&v309 + 1) = v334;
    *(_QWORD *)&v310 = v338.i64[0];
    *((_QWORD *)&v310 + 1) = v335;
    *(_OWORD *)(a4 + 688) = v309;
    *(_OWORD *)(a4 + 704) = v310;
    *(_QWORD *)&v309 = v337.i64[0];
    *((_QWORD *)&v309 + 1) = v336;
    *(_OWORD *)(a4 + 720) = v309;
  }
  if (*(_BYTE *)(*a2 + 20))
  {
    v311 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vmulq_f64(*(float64x2_t *)a4, *(float64x2_t *)a4), vmulq_f64(*(float64x2_t *)(a4 + 64), *(float64x2_t *)(a4 + 64))), vmulq_f64(*(float64x2_t *)(a4 + 32), *(float64x2_t *)(a4 + 32))), vmaxnmq_f64(vmaxnmq_f64(vmulq_f64(*(float64x2_t *)(a4 + 16), *(float64x2_t *)(a4 + 16)), vmulq_f64(*(float64x2_t *)(a4 + 80), *(float64x2_t *)(a4 + 80))), vmulq_f64(*(float64x2_t *)(a4 + 48), *(float64x2_t *)(a4 + 48))))) < 100000000.0;
    if (*(_BYTE *)(a2[1] + 20))
LABEL_225:
      v311 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vmulq_f64(*v251, *v251), vmulq_f64(v251[4], v251[4])), vmulq_f64(v251[2], v251[2])), vmaxnmq_f64(vmaxnmq_f64(vmulq_f64(v251[1], v251[1]), vmulq_f64(v251[5], v251[5])), vmulq_f64(v251[3], v251[3])))) < 100000000.0&& v311;
  }
  else
  {
    v311 = 1;
    if (*(_BYTE *)(a2[1] + 20))
      goto LABEL_225;
  }
  if (*(_BYTE *)(a2[2] + 20))
    v311 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vmulq_f64(*(float64x2_t *)(a4 + 192), *(float64x2_t *)(a4 + 192)), vmulq_f64(*(float64x2_t *)(a4 + 256), *(float64x2_t *)(a4 + 256))), vmulq_f64(*(float64x2_t *)(a4 + 224), *(float64x2_t *)(a4 + 224))), vmaxnmq_f64(vmaxnmq_f64(vmulq_f64(*(float64x2_t *)(a4 + 208), *(float64x2_t *)(a4 + 208)), vmulq_f64(*(float64x2_t *)(a4 + 272), *(float64x2_t *)(a4 + 272))), vmulq_f64(*(float64x2_t *)(a4 + 240), *(float64x2_t *)(a4 + 240))))) < 100000000.0&& v311;
  if (*(_BYTE *)(a2[3] + 20))
    v311 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vmulq_f64(*v264, *v264), vmulq_f64(*(float64x2_t *)(a4 + 352), *(float64x2_t *)(a4 + 352))), vmulq_f64(*(float64x2_t *)(a4 + 320), *(float64x2_t *)(a4 + 320))), vmaxnmq_f64(vmaxnmq_f64(vmulq_f64(*(float64x2_t *)(a4 + 304), *(float64x2_t *)(a4 + 304)), vmulq_f64(*(float64x2_t *)(a4 + 368), *(float64x2_t *)(a4 + 368))), vmulq_f64(*(float64x2_t *)(a4 + 336), *(float64x2_t *)(a4 + 336))))) < 100000000.0&& v311;
  if (*(_BYTE *)(a2[4] + 20))
    v311 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmulq_f64(*(float64x2_t *)(a4 + 384), *(float64x2_t *)(a4 + 384)), vmulq_f64(*(float64x2_t *)(a4 + 416), *(float64x2_t *)(a4 + 416))), vmaxnmq_f64(vmulq_f64(*(float64x2_t *)(a4 + 400), *(float64x2_t *)(a4 + 400)), vmulq_f64(*(float64x2_t *)(a4 + 432), *(float64x2_t *)(a4 + 432))))) < 100000000.0&& v311;
  if (*(_BYTE *)(a2[5] + 20))
    v311 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmulq_f64(*(float64x2_t *)(a4 + 448), *(float64x2_t *)(a4 + 448)), vmulq_f64(*(float64x2_t *)(a4 + 480), *(float64x2_t *)(a4 + 480))), vmaxnmq_f64(vmulq_f64(*(float64x2_t *)(a4 + 464), *(float64x2_t *)(a4 + 464)), vmulq_f64(*(float64x2_t *)(a4 + 496), *(float64x2_t *)(a4 + 496))))) < 100000000.0&& v311;
  if (*(_BYTE *)(a2[6] + 20))
    v311 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmulq_f64(*(float64x2_t *)(a4 + 512), *(float64x2_t *)(a4 + 512)), vmulq_f64(*(float64x2_t *)(a4 + 544), *(float64x2_t *)(a4 + 544))), vmaxnmq_f64(vmulq_f64(*(float64x2_t *)(a4 + 528), *(float64x2_t *)(a4 + 528)), vmulq_f64(*(float64x2_t *)(a4 + 560), *(float64x2_t *)(a4 + 560))))) < 100000000.0&& v311;
  if (*(_BYTE *)(a2[7] + 20))
    v311 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmulq_f64(*(float64x2_t *)(a4 + 576), *(float64x2_t *)(a4 + 576)), vmulq_f64(*(float64x2_t *)(a4 + 608), *(float64x2_t *)(a4 + 608))), vmaxnmq_f64(vmulq_f64(*(float64x2_t *)(a4 + 592), *(float64x2_t *)(a4 + 592)), vmulq_f64(*(float64x2_t *)(a4 + 624), *(float64x2_t *)(a4 + 624))))) < 100000000.0&& v311;
  if (*(_BYTE *)(a2[8] + 20))
    v311 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmulq_f64(*(float64x2_t *)(a4 + 640), *(float64x2_t *)(a4 + 640)), vmulq_f64(*(float64x2_t *)(a4 + 672), *(float64x2_t *)(a4 + 672))), vmulq_f64(*(float64x2_t *)(a4 + 656), *(float64x2_t *)(a4 + 656)))) < 100000000.0&& v311;
  if (*(_BYTE *)(a2[9] + 20))
    v311 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmulq_f64(*(float64x2_t *)(a4 + 688), *(float64x2_t *)(a4 + 688)), vmulq_f64(*(float64x2_t *)(a4 + 720), *(float64x2_t *)(a4 + 720))), vmulq_f64(*(float64x2_t *)(a4 + 704), *(float64x2_t *)(a4 + 704)))) < 100000000.0&& v311;
  if (*(_BYTE *)(a2[10] + 20))
    return vmaxnmvq_f64(vmulq_f64(*(float64x2_t *)(a4 + 736), *(float64x2_t *)(a4 + 736))) < 100000000.0 && v311;
  return v311;
}

uint64_t sub_20FC7473C(uint64_t a1, uint64_t *a2, uint64_t a3, double a4, double a5, double a6, double a7, float64x2_t _Q4, double a9, double a10, float64x2_t a11)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  float64x2_t v23;
  __int128 v24;
  __int128 v25;
  __n128 v26;
  float64x2_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  double v33;
  double v34;
  float64x2_t v35;
  __n128 v36;
  int v37;
  double v38;
  const double *v39;
  double v41;
  float64x2_t v47;
  float64x2_t v49;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  unsigned int v55;
  unsigned int v56;
  char v57;
  double v58;
  double v59;
  double v61;
  double v64;
  unint64_t i;
  unint64_t v66;
  uint64_t v67;
  unsigned int v68;
  BOOL v70;
  float64x2_t v74;
  float64x2_t v75;
  double v76;
  double v77;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  int v86;
  int v87;
  float64x2_t v88;
  float64x2_t v89;
  BOOL v90;
  double v91;
  double v93;
  int v94;
  double v95;
  int v96;
  double v97;
  double v98;
  double v99;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  int v107;
  int v108;
  double v109;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  int v118;
  int v119;
  double v120;
  double v121;
  double v122;
  double v123;
  float64x2_t v124;
  BOOL v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  BOOL v131;
  float64x2_t v132;
  double v133;
  double v135;
  int v136;
  double v137;
  int v138;
  double v139;
  float64x2_t v140;
  BOOL v141;
  float64x2_t v142;
  double v143;
  double v145;
  int v146;
  double v147;
  int v148;
  double v149;
  float64x2_t v150;
  double v152;
  float64x2_t v153;
  double v154;
  float64x2_t v155;
  int8x16_t v159;
  uint64_t v160;
  float64x2_t v162;
  int64x2_t v163;
  _BYTE v164[32];
  __int128 v165;
  double v166;
  float64x2_t v167;
  float64_t v168;
  float64x2_t v169;
  _BYTE v170[32];
  float64x2_t v171;
  double v172;
  float64x2_t v173;
  unint64_t v174;
  float64x2_t v175;
  double v176;
  float64x2_t v177;
  uint64_t v178;
  float64x2x3_t v179;

  v178 = *MEMORY[0x24BDAC8D0];
  v13 = *a2;
  v12 = a2[1];
  v14 = a2[2];
  v15 = a2[4];
  v16 = a2[6];
  v17 = *(_QWORD *)(a1 + 32);
  v18 = *(_DWORD *)(v17 + 992);
  if (v18 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_235;
    }
    v18 = *(_DWORD *)(v17 + 992);
    v160 = a3;
    if (v18 <= 1)
      goto LABEL_12;
  }
  else
  {
    v160 = a3;
    if (v18 <= 1)
      goto LABEL_12;
  }
  if (*(_BYTE *)(v15 + 20))
  {
    v19 = *(_QWORD *)(a1 + 32);
    v20 = *(_DWORD *)(v19 + 992);
    if (v20 == -1)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_235;
      }
      v20 = *(_DWORD *)(v19 + 992);
    }
    if (!v20)
      goto LABEL_236;
    v18 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 992);
    if (v18 != -1)
    {
LABEL_12:
      if (v18)
        goto LABEL_13;
LABEL_236:
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    for (i = -1; i < v66; ++i)
    {
      v67 = *(_QWORD *)(a1 + 32);
      v68 = *(_DWORD *)(v67 + 992);
      if (v68 == -1)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_235;
        }
        v68 = *(_DWORD *)(v67 + 992);
        if (v68 > 7)
        {
LABEL_57:
          if (v68 <= 0xB)
          {
            _CF = v68 >= 0xA;
            v66 = 7;
            if (_CF)
              v66 = 14;
          }
          else
          {
            _ZF = v68 == 13;
            if (v68 > 0xD)
            {
              v66 = 28;
            }
            else
            {
              v66 = 4;
              if (_ZF)
                v66 = 14;
            }
          }
          continue;
        }
      }
      else if (v68 > 7)
      {
        goto LABEL_57;
      }
      if (v68 > 3)
      {
        v70 = v68 == 6;
        if (v68 >= 6)
          goto LABEL_65;
        v66 = 4;
      }
      else
      {
        if (v68 > 1)
        {
          v70 = v68 == 2;
LABEL_65:
          v66 = 3;
          if (!v70)
            v66 = 4;
          continue;
        }
        if (!v68)
          goto LABEL_236;
        v66 = 0;
      }
    }
  }
LABEL_13:
  v21 = *(_QWORD *)(v16 + 24);
  if (*(_BYTE *)(v21 + 58) && !*(_BYTE *)(v21 + 57))
    return 0;
  v22 = *(_OWORD *)(v13 + 48);
  v23 = *(float64x2_t *)(v13 + 80);
  *(_OWORD *)&v170[16] = *(_OWORD *)(v13 + 64);
  v171 = v23;
  v172 = *(double *)(v13 + 96);
  v169 = *(float64x2_t *)(v13 + 32);
  *(_OWORD *)v170 = v22;
  v173 = *(float64x2_t *)(v13 + 104);
  v174 = *(_QWORD *)(v13 + 120);
  v24 = *(_OWORD *)(v13 + 48);
  v25 = *(_OWORD *)(v13 + 80);
  *(_OWORD *)&v164[16] = *(_OWORD *)(v13 + 64);
  v165 = v25;
  v166 = *(double *)(v13 + 96);
  v26 = *(__n128 *)(v13 + 32);
  v163 = (int64x2_t)v26;
  *(_OWORD *)v164 = v24;
  v27 = *(float64x2_t *)(v13 + 104);
  v167 = v27;
  v168 = *(double *)(v13 + 120);
  v28 = *(_QWORD *)(a1 + 32);
  if (*(double *)(v28 + 1424) > 0.0)
  {
    v29 = *(_QWORD *)(v21 + 96);
    if (v29)
    {
      v30 = *(_QWORD *)(v29 + 64);
      v26.n128_u64[0] = *(_QWORD *)(v30 + 1424);
      v27.f64[0] = 0.0;
      if (v26.n128_f64[0] <= 0.0)
      {
LABEL_19:
        v31 = *(_QWORD *)(a1 + 32);
        v32 = *(double *)(a1 + 16);
        v33 = *(double *)(v31 + 1432);
        v34 = *(double *)(v31 + 1424);
        sub_20FC7D4B0(v12 + 136, v12 + 160, &v169, 0, v27, v26);
        v35.f64[0] = (v32 - v33) * v34;
        sub_20FC7D4B0(v14 + 136, v14 + 160, (float64x2_t *)&v163, 0, v35, v36);
        v21 = *(_QWORD *)(v16 + 24);
        v28 = *(_QWORD *)(a1 + 32);
        goto LABEL_20;
      }
LABEL_18:
      v27.f64[0] = v26.n128_f64[0] * (*(double *)(v21 + 88) - *(double *)(v30 + 1432));
      goto LABEL_19;
    }
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioanchoredpoint3d.hpp", 63, (uint64_t)"this->anchor_kf_pose_", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      v30 = *(_QWORD *)(*(_QWORD *)(v21 + 96) + 64);
      v26.n128_u64[0] = *(_QWORD *)(v30 + 1424);
      v27.f64[0] = 0.0;
      if (v26.n128_f64[0] <= 0.0)
        goto LABEL_19;
      goto LABEL_18;
    }
LABEL_235:
    abort();
  }
LABEL_20:
  v37 = *(unsigned __int8 *)(v21 + 56);
  v38 = *(double *)(a1 + 40);
  v27.f64[0] = *(float64_t *)(v16 + 32);
  v39 = (const double *)(v14 + 32);
  v26.n128_u64[0] = *(_QWORD *)(v21 + 80);
  _Q2 = *(float64x2_t *)(v21 + 64);
  *(_QWORD *)&v41 = *(_OWORD *)&vmulq_f64(v27, (float64x2_t)v26);
  _Q0 = vmulq_n_f64(_Q2, v27.f64[0]);
  _Q4.f64[0] = *(float64_t *)&v170[24];
  __asm { FMLA            D2, D4, V0.D[1] }
  *(_QWORD *)&_Q4.f64[0] = v174;
  _Q2.f64[0] = vmlad_n_f64(_Q2.f64[0], v172, v41);
  _D5 = *(_QWORD *)(v12 + 72);
  v47 = vaddq_f64(_Q2, _Q4);
  _Q3 = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v169, _Q0.f64[0]), *(float64x2_t *)&v170[8], _Q0, 1), v171, v41), v173);
  v49 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v12 + 32), _Q3.f64[0]), *(float64x2_t *)(v12 + 56), _Q3, 1), *(float64x2_t *)(v12 + 80), v47.f64[0]);
  __asm { FMLA            D0, D5, V3.D[1] }
  _Q0.f64[0] = vmlad_n_f64(_Q0.f64[0], *(double *)(v12 + 96), v47.f64[0]);
  v47.f64[0] = *(float64_t *)(v12 + 120);
  v179 = vld3q_f64(v39);
  _Q6 = *(float64x2_t *)(v14 + 80);
  a11.f64[0] = *(float64_t *)(v14 + 120);
  *(_QWORD *)&_Q0.f64[0] = *(_OWORD *)&vsubq_f64(vaddq_f64(v47, _Q0), a11);
  _Q1 = vsubq_f64(vaddq_f64(*(float64x2_t *)(v12 + 104), v49), *(float64x2_t *)(v14 + 104));
  v52 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v179.val[0], _Q1.f64[0]), v179.val[1], _Q1, 1), v179.val[2], _Q0.f64[0]);
  v179.val[0] = vmulq_f64(_Q6, _Q1);
  _Q1.f64[0] = _Q1.f64[1];
  __asm { FMLA            D3, D1, V6.D[1] }
  v179.val[0].f64[0] = vmlad_n_f64(v179.val[0].f64[0], *(double *)(v14 + 96), _Q0.f64[0]);
  _Q0.f64[0] = *(float64_t *)v164;
  v179.val[2].f64[1] = *((float64_t *)&v165 + 1);
  _Q6.f64[0] = v168;
  *(_QWORD *)&v179.val[0].f64[0] = *(_OWORD *)&vsubq_f64(v179.val[0], _Q6);
  v53 = vsubq_f64(v52, v167);
  _Q0.f64[1] = *(float64_t *)&v164[24];
  v54 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v163, *(int64x2_t *)&v164[8]), v53.f64[0]), (float64x2_t)vzip2q_s64(v163, *(int64x2_t *)&v164[8]), v53, 1), _Q0, v179.val[0].f64[0]);
  _Q1.f64[0] = v53.f64[1];
  __asm { FMLA            D0, D1, V5.D[1] }
  v175 = v54;
  v176 = vmlad_n_f64(_Q0.f64[0], v166, v179.val[0].f64[0]);
  v55 = *(_DWORD *)(v28 + 992);
  if (v55 != -1)
  {
    if (v55 <= 7)
      goto LABEL_22;
LABEL_30:
    if (v55 > 0xB)
    {
      if (v55 <= 0xD)
      {
        if (v55 != 13 || v176 < 0.00000001)
          return 0;
        _Q0 = vdivq_f64(v175, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v176, 0));
        v61 = (*(double *)v28 + *(double *)(v28 + 32)) * 0.5;
        _D3 = _Q0.f64[1];
        __asm { FMLA            D2, D3, V0.D[1] }
        v64 = v61 * (_D2 * v61);
        v177 = vdivq_f64(_Q0, (float64x2_t)vdupq_lane_s64(COERCE__INT64(v64* (*(double *)(v28 + 168)+ v61 * *(double *)(v28 + 224)+ v64* (*(double *)(v28 + 176)+ v61 * *(double *)(v28 + 232)+ v64* (*(double *)(v28 + 184)+ v61 * *(double *)(v28 + 240)+ v64* (*(double *)(v28 + 192)+ v61 * *(double *)(v28 + 248)+ v64* (*(double *)(v28 + 200)+ v61 * *(double *)(v28 + 256)+ v64
                                     * (*(double *)(v28 + 208)
                                      + v61 * *(double *)(v28 + 264)
                                      + v64 * (*(double *)(v28 + 216) + *(double *)(v28 + 272) * v61 + v64 * 0.0)))))))
                                / 100.0
                                + 1.0),
                                0));
        v56 = *(_DWORD *)(v28 + 992);
        if (v56 != -1)
          goto LABEL_152;
LABEL_221:
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v56 = *(_DWORD *)(v28 + 992);
        if (v56 > 7)
        {
LABEL_223:
          v124.f64[0] = v177.f64[0];
          if (v56 <= 0xB)
          {
            v125 = v56 == 9;
            if (v56 <= 9)
            {
LABEL_225:
              if (!v125)
              {
                v122 = v177.f64[1];
                goto LABEL_229;
              }
            }
          }
LABEL_227:
          v121 = *(double *)(v28 + 8);
          v123 = *(double *)v28 * v124.f64[0];
          v122 = v177.f64[1];
LABEL_228:
          v154 = v121 * v122;
LABEL_230:
          v126 = v123 + v154;
          goto LABEL_231;
        }
LABEL_153:
        if (v56 > 3)
        {
          v124.f64[0] = v177.f64[0];
          v125 = v56 == 5;
          if (v56 <= 5)
            goto LABEL_225;
          goto LABEL_227;
        }
        if (v56 <= 1)
        {
          if (!v56)
          {
            sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
            abort();
          }
          v121 = *(double *)(v28 + 8);
          v122 = v177.f64[1];
          v123 = *(double *)v28 * v177.f64[0];
          goto LABEL_228;
        }
        v74 = v177;
        if (v56 == 2)
          goto LABEL_160;
LABEL_213:
        v122 = v74.f64[1];
        v126 = *(double *)v28 * v74.f64[0] + vmuld_lane_f64(*(double *)(v28 + 8), v74, 1);
        goto LABEL_231;
      }
      if (v55 == 14)
        v57 = sub_20EB247C0(&v177, (uint64_t)&v175, (double *)(v28 + 168), (*(double *)v28 + *(double *)(v28 + 32)) * 0.5);
      else
        v57 = sub_20EB3E39C(v28, &v177, &v175);
    }
    else if (v55 > 9)
    {
      if (v55 == 10)
        v57 = sub_20EB24288(&v177, (uint64_t)&v175, (double *)(v28 + 168), (*(double *)v28 + *(double *)(v28 + 32)) * 0.5);
      else
        v57 = sub_20EB3A2E4(v28, &v177, &v175);
    }
    else
    {
      if (v55 != 9)
      {
        v77 = v176;
        _Q0 = v175;
        _D1 = v175.f64[1];
        __asm { FMLA            D16, D1, V0.D[1] }
        v81 = sqrt(_D16);
        v82 = fabs(v176);
        v83 = fabs(v81);
        v84 = v82 / v83;
        if (v82 >= v83)
          v84 = v83 / v82;
        v85 = (v83 - v82) / (v82 + v83);
        if (v82 >= v83)
          v85 = -v85;
        if (v84 > 0.414213562)
          v86 = 1;
        else
          v86 = 2;
        if (v84 > 0.414213562)
          v87 = -1;
        else
          v87 = 1;
        if (v84 <= 0.414213562)
          v85 = v84;
        if (_D16 < 0.00000001)
        {
LABEL_132:
          v109 = 1.0 / v77;
LABEL_188:
          v124 = vmulq_n_f64(_Q0, v109);
          v177 = v124;
          v122 = v124.f64[1];
LABEL_229:
          v123 = *(double *)v28 * v124.f64[0];
          v154 = *(double *)(v28 + 8) * v122;
          goto LABEL_230;
        }
        if (v82 < v83)
          v87 = -v87;
        else
          v86 = v84 > 0.414213562;
        v88 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v85 * v85), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v85 * v85), (float64x2_t)xmmword_210315370), v85 * v85 * (v85 * v85))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v85 * v85), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v85 * v85), (float64x2_t)xmmword_210315380), v85 * v85 * (v85 * v85))), v85 * v85 * (v85 * v85) * (v85 * v85 * (v85 * v85))));
        v89 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v88, 1);
        v90 = v81 == INFINITY && v82 == INFINITY;
        v91 = v85 + v85 * vdivq_f64(v88, v89).f64[0];
        if (v90)
          v91 = 0.785398163;
        if (v81 == 0.0 && v176 == 0.0)
          v93 = 0.0;
        else
          v93 = v91;
        if (v176 < 0.0)
        {
          v86 = 4 - v86;
          v87 = -v87;
        }
        if (v81 >= 0.0)
          v94 = v86;
        else
          v94 = -v86;
        v95 = (double)v94;
        if (v81 >= 0.0)
          v96 = v87;
        else
          v96 = -v87;
        v97 = v95 * 3.061617e-17 + v95 * 0.785398163 + v93 * (double)v96;
        v98 = v97
            * (v97
             * v97
             * (*(double *)(v28 + 168)
              + v97
              * v97
              * (*(double *)(v28 + 176)
               + v97
               * v97
               * (*(double *)(v28 + 184)
                + v97
                * v97
                * (*(double *)(v28 + 192)
                 + v97
                 * v97
                 * (*(double *)(v28 + 200) + v97 * v97 * (*(double *)(v28 + 208) + v97 * v97 * *(double *)(v28 + 216)))))))
             + 1.0);
        v99 = 1.0 / v81;
LABEL_187:
        v109 = v99 * v98;
        goto LABEL_188;
      }
      v57 = sub_20EB3641C(v28, &v177, &v175);
    }
LABEL_150:
    if ((v57 & 1) == 0)
      return 0;
LABEL_151:
    v56 = *(_DWORD *)(v28 + 992);
    if (v56 == -1)
      goto LABEL_221;
    goto LABEL_152;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v55 = *(_DWORD *)(v28 + 992);
  if (v55 > 7)
    goto LABEL_30;
LABEL_22:
  if (v55 > 3)
  {
    if (v55 <= 5)
    {
      if (v55 == 5)
      {
        v58 = v175.f64[0] * v175.f64[0] + v175.f64[1] * v175.f64[1];
        if (v58 >= 0.00000001)
        {
          v127 = sqrt(v58);
          if (v127 <= v176)
          {
            v152 = v127 / v176 * 0.785398163
                 - v127 / v176 * (v127 / v176 + -1.0) * (v127 / v176 * 0.0663008339 + 0.244711287);
          }
          else
          {
            if (v127 <= -v176)
            {
              v129 = v127 / v176 * 0.785398163
                   - v127 / v176 * (-1.0 - v127 / v176) * (v127 / v176 * -0.0663008339 + 0.244711287);
              v130 = 3.14159265;
            }
            else
            {
              v128 = fabs(v176 / v127);
              v129 = v176 / v127 * (v128 + -1.0) * (v128 * 0.0663008339 + 0.244711287) + v176 / v127 * -0.785398163;
              v130 = 1.57079633;
            }
            v152 = v129 + v130;
          }
          v153 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v28 + 168), *(int64x2_t *)(v28 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v28 + 168), *(int64x2_t *)(v28 + 184)), v152 * v152)), v152 * v152);
          v59 = (v152 + v152 * (v153.f64[0] + vmuld_lane_f64(v152 * v152 * (v152 * v152), v153, 1))) / v127;
        }
        else
        {
          if (v176 == 0.0)
            return 0;
          v59 = 1.0 / v176;
        }
        v177.f64[0] = v175.f64[0] * v59;
        v177.f64[1] = v175.f64[1] * v59;
        v56 = *(_DWORD *)(v28 + 992);
        if (v56 == -1)
          goto LABEL_221;
        goto LABEL_152;
      }
      v77 = v176;
      _Q0 = v175;
      _D1 = v175.f64[1];
      __asm { FMLA            D16, D1, V0.D[1] }
      v102 = sqrt(_D16);
      v103 = fabs(v176);
      v104 = fabs(v102);
      v105 = v103 / v104;
      if (v103 >= v104)
        v105 = v104 / v103;
      v106 = (v104 - v103) / (v103 + v104);
      if (v103 >= v104)
        v106 = -v106;
      if (v105 > 0.414213562)
        v107 = 1;
      else
        v107 = 2;
      if (v105 > 0.414213562)
        v108 = -1;
      else
        v108 = 1;
      if (v105 <= 0.414213562)
        v106 = v105;
      if (_D16 < 0.00000001)
        goto LABEL_132;
      if (v103 < v104)
        v108 = -v108;
      else
        v107 = v105 > 0.414213562;
      v131 = v102 == INFINITY && v103 == INFINITY;
      v132 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v106 * v106), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v106 * v106), (float64x2_t)xmmword_210315370), v106 * v106 * (v106 * v106))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v106 * v106), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v106 * v106), (float64x2_t)xmmword_210315380), v106 * v106 * (v106 * v106))), v106 * v106 * (v106 * v106) * (v106 * v106 * (v106 * v106))));
      v133 = v106 + v106 * vdivq_f64(v132, (float64x2_t)vdupq_laneq_s64((int64x2_t)v132, 1)).f64[0];
      if (v131)
        v133 = 0.785398163;
      if (v102 == 0.0 && v176 == 0.0)
        v135 = 0.0;
      else
        v135 = v133;
      if (v176 < 0.0)
      {
        v107 = 4 - v107;
        v108 = -v108;
      }
      if (v102 >= 0.0)
        v136 = v107;
      else
        v136 = -v107;
      v137 = (double)v136;
      if (v102 >= 0.0)
        v138 = v108;
      else
        v138 = -v108;
      v139 = v137 * 3.061617e-17 + v137 * 0.785398163 + v135 * (double)v138;
      v140 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v28 + 168), *(int64x2_t *)(v28 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v28 + 168), *(int64x2_t *)(v28 + 184)), v139 * v139)), v139 * v139);
      v98 = v139 + v139 * (v140.f64[0] + vmuld_lane_f64(v139 * v139 * (v139 * v139), v140, 1));
      v99 = 1.0 / v102;
      goto LABEL_187;
    }
    if (v55 == 6)
    {
      v75 = vaddq_f64(vdivq_f64(v175, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v176, 0)), *(float64x2_t *)(v28 + 192));
      v76 = sqrt(vaddvq_f64(vmulq_f64(v75, v75)));
      v177 = vaddq_f64(*(float64x2_t *)(v28 + 208), vmulq_n_f64(v75, v76 * (v76 * (*(double *)(v28 + 168) + v76 * (*(double *)(v28 + 176) + *(double *)(v28 + 184) * v76)))+ 1.0));
      v56 = *(_DWORD *)(v28 + 992);
      if (v56 != -1)
        goto LABEL_152;
      goto LABEL_221;
    }
    v57 = sub_20EB31FFC(v28, &v177, &v175);
    goto LABEL_150;
  }
  if (v55 <= 1)
  {
    if (!v55)
    {
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    if (v176 >= 0.00000001)
    {
      v177 = vmulq_n_f64(v175, 1.0 / v176);
      v56 = *(_DWORD *)(v28 + 992);
      if (v56 == -1)
        goto LABEL_221;
LABEL_152:
      if (v56 > 7)
        goto LABEL_223;
      goto LABEL_153;
    }
    return 0;
  }
  if (v55 != 2)
  {
    _V0.D[1] = v175.f64[1];
    _D1 = v175.f64[1];
    __asm { FMLA            D16, D1, V0.D[1] }
    v113 = sqrt(_D16);
    v114 = fabs(v176);
    v115 = fabs(v113);
    v116 = v114 / v115;
    if (v114 >= v115)
      v116 = v115 / v114;
    v117 = (v115 - v114) / (v114 + v115);
    if (v114 >= v115)
      v117 = -v117;
    if (v116 > 0.414213562)
      v118 = 1;
    else
      v118 = 2;
    if (v116 > 0.414213562)
      v119 = -1;
    else
      v119 = 1;
    if (v116 <= 0.414213562)
      v117 = v116;
    if (_D16 >= 0.00000001)
    {
      if (v114 < v115)
        v119 = -v119;
      else
        v118 = v116 > 0.414213562;
      v141 = v113 == INFINITY && v114 == INFINITY;
      v142 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v117 * v117), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v117 * v117), (float64x2_t)xmmword_210315370), v117 * v117 * (v117 * v117))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v117 * v117), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v117 * v117), (float64x2_t)xmmword_210315380), v117 * v117 * (v117 * v117))), v117 * v117 * (v117 * v117) * (v117 * v117 * (v117 * v117))));
      v143 = v117 + v117 * vdivq_f64(v142, (float64x2_t)vdupq_laneq_s64((int64x2_t)v142, 1)).f64[0];
      if (v141)
        v143 = 0.785398163;
      if (v113 == 0.0 && v176 == 0.0)
        v145 = 0.0;
      else
        v145 = v143;
      if (v176 < 0.0)
      {
        v118 = 4 - v118;
        v119 = -v119;
      }
      if (v113 >= 0.0)
        v146 = v118;
      else
        v146 = -v118;
      v147 = (double)v146;
      if (v113 >= 0.0)
        v148 = v119;
      else
        v148 = -v119;
      v149 = v147 * 3.061617e-17 + v147 * 0.785398163 + v145 * (double)v148;
      v150 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v28 + 168), *(int64x2_t *)(v28 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v28 + 168), *(int64x2_t *)(v28 + 184)), v149 * v149)), v149 * v149);
      v120 = 1.0 / v113 * (v149 + v149 * (v150.f64[0] + vmuld_lane_f64(v149 * v149 * (v149 * v149), v150, 1)));
    }
    else
    {
      v120 = 1.0 / v176;
    }
    v74 = vmulq_n_f64(v175, v120);
    v177 = v74;
    goto LABEL_213;
  }
  if (!*(_DWORD *)(v28 + 212))
  {
    if (!sub_20EB14380(&v177, &v175, (double *)(v28 + 168)))
      return 0;
    goto LABEL_151;
  }
  if (v176 < 0.00000001)
    return 0;
  _Q3 = vmulq_n_f64(v175, 1.0 / v176);
  _D0 = vmuld_lane_f64(1.0 / v176, v175, 1);
  __asm { FMLA            D2, D0, V3.D[1] }
  v74 = vaddq_f64(vaddq_f64(vmulq_f64(vaddq_f64((float64x2_t)vdupq_lane_s64(_D2, 0), vmulq_f64(_Q3, vaddq_f64(_Q3, _Q3))), (float64x2_t)vextq_s8(*(int8x16_t *)(v28 + 192), *(int8x16_t *)(v28 + 192), 8uLL)), vmulq_laneq_f64(vmulq_n_f64(vaddq_f64(*(float64x2_t *)(v28 + 192), *(float64x2_t *)(v28 + 192)), _Q3.f64[0]), _Q3, 1)), vmulq_n_f64(_Q3, *(double *)(v28 + 168) * *(double *)&_D2+ 1.0+ *(double *)&_D2 * (*(double *)(v28 + 176) * *(double *)&_D2)+ *(double *)&_D2 * (*(double *)&_D2 * (*(double *)(v28 + 184) * *(double *)&_D2))));
  v177 = v74;
LABEL_160:
  v126 = vaddvq_f64(vmulq_f64(*(float64x2_t *)v28, v74));
  v122 = v74.f64[1];
LABEL_231:
  v155.f64[0] = v126 + *(double *)(v28 + 16);
  v155.f64[1] = v122 * *(double *)(v28 + 32) + *(double *)(v28 + 40);
  _Q0 = vsubq_f64(v155, *(float64x2_t *)(a1 + 8));
  _Q2 = vmulq_n_f64(_Q0, 1.0 / v38);
  if (v37)
  {
    _D1 = vmuld_lane_f64(1.0 / v38, _Q0, 1);
    _Q0 = vmulq_f64(_Q2, _Q2);
    __asm { FMLA            D0, D1, V2.D[1] }
    if (_Q0.f64[0] >= 0.00000000999999994)
    {
      v162 = _Q2;
      _Q0.f64[0] = sqrt(log1p(_Q0.f64[0]) / _Q0.f64[0]);
      _Q2 = vmulq_n_f64(v162, _Q0.f64[0]);
    }
  }
  v159 = vextq_s8((int8x16_t)_Q2, (int8x16_t)_Q0, 1uLL);
  *(_BYTE *)v160 = LOBYTE(_Q2.f64[0]);
  *(_BYTE *)(v160 + 15) = HIBYTE(_Q2.f64[1]);
  *(_WORD *)(v160 + 13) = v159.i16[6];
  *(_DWORD *)(v160 + 9) = v159.i32[2];
  *(_QWORD *)(v160 + 1) = v159.i64[0];
  return 1;
}

BOOL sub_20FC7599C(uint64_t a1, _QWORD *a2, uint64_t a3, float64x2_t *a4)
{
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  float64x2_t v21;
  __int128 v22;
  float64x2_t v23;
  __n128 v24;
  float64x2_t v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  float64x2_t v33;
  __n128 v34;
  uint64_t v35;
  _BOOL4 v36;
  uint64_t v37;
  double v38;
  const double *v39;
  uint64_t v40;
  _BOOL4 v41;
  float64x2_t *v42;
  float64x2_t v44;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v54;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v59;
  float64x2_t v60;
  unsigned int v62;
  double v63;
  char v65;
  float64x2_t v69;
  unint64_t i;
  unint64_t v73;
  uint64_t v74;
  unsigned int v75;
  BOOL v77;
  double v78;
  double v79;
  double v80;
  double v83;
  double v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  double v95;
  float64_t v96;
  double v97;
  double v98;
  double v100;
  double v102;
  double v103;
  int64x2_t v104;
  int64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  double v109;
  double v110;
  double v112;
  double v113;
  float64x2_t v114;
  unint64_t v115;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  float64x2_t v125;
  float64x2_t v126;
  unsigned int v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  double v131;
  long double v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64_t v142;
  uint64_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64_t v148;
  float64_t v152;
  const double *v153;
  unint64_t v156;
  float64x2_t v157;
  float64x2_t v158;
  double v159;
  uint64_t v160;
  double v161;
  double v162;
  double v163;
  double v164;
  int v165;
  int v166;
  _BOOL4 v167;
  float64x2_t v168;
  double v169;
  double v172;
  double v173;
  double v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  unsigned int v181;
  double *v182;
  double v183;
  double v187;
  double v188;
  double v189;
  double v190;
  double v193;
  double v194;
  float64x2_t v195;
  unint64_t v196;
  double v197;
  double v201;
  double v202;
  float64x2_t v203;
  unint64_t v204;
  double v205;
  float64x2_t v206;
  float64x2_t v207;
  double v208;
  long double v209;
  double v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  int8x16_t v214;
  int8x16_t v215;
  char v216;
  int8x16_t v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v234;
  float64x2_t v235;
  int8x16_t v236;
  int8x16_t v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v243;
  double v244;
  float64x2_t v245;
  double v246;
  double v247;
  double v248;
  float64x2_t v249;
  float64x2_t v250;
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v253;
  float64x2_t *v254;
  float64x2_t v255;
  float64x2_t v256;
  float64x2_t v257;
  float64x2_t v258;
  float64x2_t v259;
  float64x2_t v260;
  double v261;
  int8x16_t v262;
  int8x16_t v263;
  int8x16_t v264;
  float64x2_t v265;
  float64x2_t v266;
  float64x2_t v267;
  double v270;
  float64x2_t v271;
  int8x16_t v272;
  int8x16_t v273;
  int8x16_t v274;
  float64x2_t v275;
  float64x2_t v276;
  float64x2_t v277;
  uint64_t v278;
  float64x2_t v280;
  float64x2_t v281;
  float64x2_t v282;
  float64x2_t v283;
  float64x2_t v284;
  float64x2_t v285;
  float64x2_t v286;
  float64x2_t *v287;
  float64x2_t v288;
  float64x2_t v289;
  float64x2_t v290;
  float64x2_t v291;
  float64x2_t v292;
  float64x2_t v293;
  _BOOL4 v294;
  float64x2_t *v301;
  float64x2_t v302;
  float64x2_t v303;
  float64x2_t v304;
  float64x2_t v305;
  float64x2_t v306;
  float64x2_t v307;
  float64x2_t v308;
  float64x2_t v309;
  float64x2_t v310;
  float64x2_t v311;
  uint64_t v312;
  float64x2_t v313;
  float64x2_t v314;
  float64x2_t v315;
  float64x2_t v316;
  float64x2_t v317;
  float64x2_t v318;
  float64x2_t v319;
  float64x2_t v320;
  float64_t v321;
  float64x2_t v322;
  float64x2_t v323;
  float64x2_t v324;
  float64x2_t v325;
  float64x2_t v326;
  float64x2_t v327;
  unint64_t v328;
  unint64_t v329;
  unint64_t v330;
  unint64_t v331;
  unint64_t v332;
  unint64_t v333;
  unint64_t v334;
  int8x16_t v335;
  int8x16_t v336;
  int8x16_t v337;
  float64x2_t v338;
  int8x16_t v339;
  float64x2_t v340;
  float64x2_t v341;
  float64x2_t *v342;
  float64x2_t v343;
  unint64_t v344;
  double v345;
  int8x16_t v346;
  int8x16_t v347;
  uint64_t v348;
  float64x2_t v349;
  unint64_t v350;
  float64x2_t v351;
  int64x2_t v352;
  _BOOL4 v353;
  double v354;
  float64x2_t v355;
  double v356;
  double v357;
  double v358;
  float64x2_t v359;
  double v360;
  double v361;
  double v362;
  double v363;
  float64x2_t v364;
  uint64_t v365;
  int v366;
  int v367;
  _QWORD *v368;
  float64x2_t v369;
  float64x2_t v370;
  float64_t v371;
  float64x2_t v372;
  uint64_t v373;
  int v374;
  float64x2_t v375;
  float64_t v376;
  float64x2_t v377;
  uint64_t v378;
  uint64_t v379;
  double v380;
  double v381;
  double v382;
  float64x2_t v383;
  uint64_t v384;
  uint64_t v385;
  float64x2_t v386;
  uint64_t v387;
  float64x2_t v388;
  float64x2_t v389;
  double v390;
  float64x2_t v391;
  double v392;
  float64x2_t v393;
  double v394;
  float64x2_t v395;
  double v396;
  float64x2_t v397;
  double v398;
  float64x2_t v399;
  double v400;
  int64x2_t v401;
  _BYTE v402[32];
  float64x2_t v403;
  double v404;
  float64x2_t v405;
  float64_t v406;
  float64x2_t v407;
  _BYTE v408[32];
  float64x2_t v409;
  double v410;
  float64x2_t v411;
  float64_t v412;
  _OWORD v413[3];
  float64x2_t v414;
  float64x2_t v415;
  double v416;
  float64x2_t v417;
  float64x2_t v418;
  float64x2_t v419;
  float64x2_t v420;
  float64x2_t v421;
  float64x2_t v422[2];
  float64x2_t v423;
  float64x2_t v424;
  uint64_t v425;
  float64x2x3_t v426;

  v425 = *MEMORY[0x24BDAC8D0];
  v11 = *a2;
  v387 = a2[1];
  v13 = a2[5];
  v12 = a2[6];
  v385 = a2[2];
  v373 = a2[3];
  v384 = a2[4];
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(_DWORD *)(v14 + 992);
  if (v15 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_291;
    }
    v15 = *(_DWORD *)(v14 + 992);
    v365 = a3;
    v379 = v11;
    v378 = v13;
    v368 = a2;
    if (v15 <= 1)
      goto LABEL_12;
  }
  else
  {
    v365 = a3;
    v379 = *a2;
    v378 = a2[5];
    v368 = a2;
    if (v15 <= 1)
      goto LABEL_12;
  }
  if (*(_BYTE *)(v384 + 20))
  {
    v16 = *(_QWORD *)(a1 + 32);
    v17 = *(_DWORD *)(v16 + 992);
    if (v17 == -1)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_291;
      }
      v17 = *(_DWORD *)(v16 + 992);
    }
    if (!v17)
      goto LABEL_292;
    v15 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 992);
    if (v15 != -1)
    {
LABEL_12:
      if (v15)
        goto LABEL_13;
LABEL_292:
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    for (i = -1; i < v73; ++i)
    {
      v74 = *(_QWORD *)(a1 + 32);
      v75 = *(_DWORD *)(v74 + 992);
      if (v75 == -1)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_291;
        }
        v75 = *(_DWORD *)(v74 + 992);
        if (v75 > 7)
        {
LABEL_62:
          if (v75 <= 0xB)
          {
            _CF = v75 >= 0xA;
            v73 = 7;
            if (_CF)
              v73 = 14;
          }
          else
          {
            _ZF = v75 == 13;
            if (v75 > 0xD)
            {
              v73 = 28;
            }
            else
            {
              v73 = 4;
              if (_ZF)
                v73 = 14;
            }
          }
          continue;
        }
      }
      else if (v75 > 7)
      {
        goto LABEL_62;
      }
      if (v75 > 3)
      {
        v77 = v75 == 6;
        if (v75 >= 6)
          goto LABEL_70;
        v73 = 4;
      }
      else
      {
        if (v75 > 1)
        {
          v77 = v75 == 2;
LABEL_70:
          v73 = 3;
          if (!v77)
            v73 = 4;
          continue;
        }
        if (!v75)
          goto LABEL_292;
        v73 = 0;
      }
    }
  }
LABEL_13:
  v18 = v12;
  v19 = *(_QWORD *)(v12 + 24);
  if (*(_BYTE *)(v19 + 58) && !*(_BYTE *)(v19 + 57))
    return 0;
  v20 = *(_OWORD *)(v379 + 48);
  v21 = *(float64x2_t *)(v379 + 80);
  *(_OWORD *)&v408[16] = *(_OWORD *)(v379 + 64);
  v409 = v21;
  v410 = *(double *)(v379 + 96);
  v407 = *(float64x2_t *)(v379 + 32);
  *(_OWORD *)v408 = v20;
  v411 = *(float64x2_t *)(v379 + 104);
  v412 = *(double *)(v379 + 120);
  v22 = *(_OWORD *)(v379 + 48);
  v23 = *(float64x2_t *)(v379 + 80);
  *(_OWORD *)&v402[16] = *(_OWORD *)(v379 + 64);
  v403 = v23;
  v404 = *(double *)(v379 + 96);
  v24 = *(__n128 *)(v379 + 32);
  v401 = (int64x2_t)v24;
  *(_OWORD *)v402 = v22;
  v25 = *(float64x2_t *)(v379 + 104);
  v405 = v25;
  v406 = *(double *)(v379 + 120);
  v26 = *(double *)(*(_QWORD *)(a1 + 32) + 1424);
  if (v26 > 0.0)
  {
    v27 = *(_QWORD *)(v19 + 96);
    if (v27)
    {
      v28 = *(_QWORD *)(v27 + 64);
      v24.n128_u64[0] = *(_QWORD *)(v28 + 1424);
      v25.f64[0] = 0.0;
      if (v24.n128_f64[0] <= 0.0)
      {
LABEL_19:
        v29 = *(_QWORD *)(a1 + 32);
        v30 = *(double *)(a1 + 16);
        v31 = *(double *)(v29 + 1432);
        v32 = *(double *)(v29 + 1424);
        sub_20FC7D4B0(v387 + 136, v387 + 160, &v407, (uint64_t)&v395, v25, v24);
        v33.f64[0] = (v30 - v31) * v32;
        sub_20FC7D4B0(v385 + 136, v385 + 160, (float64x2_t *)&v401, (uint64_t)&v389, v33, v34);
        goto LABEL_20;
      }
LABEL_18:
      v25.f64[0] = v24.n128_f64[0] * (*(double *)(v19 + 88) - *(double *)(v28 + 1432));
      goto LABEL_19;
    }
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioanchoredpoint3d.hpp", 63, (uint64_t)"this->anchor_kf_pose_", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      v28 = *(_QWORD *)(*(_QWORD *)(v19 + 96) + 64);
      v24.n128_u64[0] = *(_QWORD *)(v28 + 1424);
      v25.f64[0] = 0.0;
      if (v24.n128_f64[0] <= 0.0)
        goto LABEL_19;
      goto LABEL_18;
    }
LABEL_291:
    abort();
  }
LABEL_20:
  if (*(_BYTE *)(v379 + 20))
  {
    v353 = *(_BYTE *)(v379 + 129) != 0;
    v35 = v373;
    if (*(_BYTE *)(v373 + 20))
    {
LABEL_22:
      v36 = *(_BYTE *)(v35 + 144) != 0;
      goto LABEL_25;
    }
  }
  else
  {
    v353 = 0;
    v35 = v373;
    if (*(_BYTE *)(v373 + 20))
      goto LABEL_22;
  }
  v36 = 0;
LABEL_25:
  v367 = *(unsigned __int8 *)(v384 + 20);
  v366 = *(unsigned __int8 *)(v378 + 20);
  v37 = *(_QWORD *)(v12 + 24);
  v374 = *(unsigned __int8 *)(v37 + 56);
  v38 = *(double *)(a1 + 40);
  v23.f64[0] = *(float64_t *)(v12 + 32);
  v40 = *(_QWORD *)(a1 + 32);
  v41 = v36;
  _ZF = !v36;
  v42 = &v420;
  if (_ZF)
    v42 = 0;
  v342 = v42;
  v25.f64[0] = *(float64_t *)(v37 + 80);
  _Q1 = *(float64x2_t *)(v37 + 64);
  v44 = vmulq_f64(v23, v25);
  v354 = *(double *)(v18 + 32);
  _Q5 = vmulq_n_f64(_Q1, v23.f64[0]);
  _D2 = *(_QWORD *)&v408[24];
  v47.f64[1] = *(float64_t *)&v408[16];
  v48 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v407, _Q5.f64[0]), *(float64x2_t *)&v408[8], _Q5, 1), v409, v44.f64[0]);
  v340 = v44;
  v341 = _Q5;
  __asm { FMLA            D1, D2, V5.D[1] }
  v47.f64[0] = v412;
  _Q1.f64[0] = vmlad_n_f64(_Q1.f64[0], v410, v44.f64[0]);
  _Q2.f64[1] = v411.f64[1];
  _Q16 = vaddq_f64(v48, v411);
  v48.f64[0] = *(float64_t *)(v387 + 120);
  _Q2.f64[0] = *(float64_t *)(v385 + 120);
  v54 = vsubq_f64(v48, _Q2);
  _D4 = *(_QWORD *)(v387 + 72);
  *(_QWORD *)&v345 = *(_OWORD *)&vaddq_f64(_Q1, v47);
  v346 = (int8x16_t)_Q16;
  __asm { FMLA            D2, D4, V16.D[1] }
  _Q2.f64[0] = vmlad_n_f64(_Q2.f64[0], *(double *)(v387 + 96), v345);
  v56 = vaddq_f64(vsubq_f64(*(float64x2_t *)(v387 + 104), *(float64x2_t *)(v385 + 104)), vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v387 + 32), _Q16.f64[0]), *(float64x2_t *)(v387 + 56), _Q16, 1), *(float64x2_t *)(v387 + 80), v345));
  v39 = (const double *)(v385 + 32);
  v426 = vld3q_f64(v39);
  v57 = vaddq_f64(v54, _Q2);
  _Q1 = *(float64x2_t *)(v385 + 80);
  v59 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v426.val[0], v56.f64[0]), v426.val[1], v56, 1), v426.val[2], v57.f64[0]);
  v426.val[0] = vmulq_f64(_Q1, v56);
  v347 = (int8x16_t)v56;
  v348 = *(uint64_t *)&v57.f64[0];
  v426.val[1].f64[0] = v56.f64[1];
  __asm { FMLA            D3, D4, V1.D[1] }
  v426.val[0].f64[0] = vmlad_n_f64(v426.val[0].f64[0], *(double *)(v385 + 96), v57.f64[0]);
  _Q1.f64[0] = *(float64_t *)v402;
  v57.f64[0] = v406;
  _Q16.f64[1] = v403.f64[1];
  *(_QWORD *)&v426.val[0].f64[0] = *(_OWORD *)&vsubq_f64(v426.val[0], v57);
  _Q0 = vsubq_f64(v59, v405);
  _Q1.f64[1] = *(float64_t *)&v402[24];
  v60 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v401, *(int64x2_t *)&v402[8]), _Q0.f64[0]), (float64x2_t)vzip2q_s64(v401, *(int64x2_t *)&v402[8]), _Q0, 1), _Q1, v426.val[0].f64[0]);
  _Q0.f64[0] = _Q0.f64[1];
  __asm { FMLA            D1, D0, V16.D[1] }
  v415 = v60;
  v416 = vmlad_n_f64(_Q1.f64[0], v404, v426.val[0].f64[0]);
  v62 = *(_DWORD *)(v40 + 992);
  if (v62 != -1)
  {
    if (v62 <= 7)
      goto LABEL_30;
LABEL_37:
    if (v62 > 0xB)
    {
      if (v62 <= 0xD)
      {
        if (v62 != 13)
          return 0;
        if (v416 < 0.00000001)
          return 0;
        v424 = vdivq_f64(v415, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v416, 0));
        if (!sub_20EB295B8(&v414, &v421, 0, (uint64_t)&v424, (double *)(v40 + 168), (*(double *)v40 + *(double *)(v40 + 32)) * 0.5))return 0;
        _D0 = -v415.f64[1] / (v416 * v416);
        _V3.D[1] = v421.f64[1];
        _V4.D[1] = v422[0].f64[1];
        v69.f64[0] = 0.0;
        v69.f64[1] = 1.0 / v416;
        _Q1 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)COERCE_UNSIGNED_INT64(1.0 / v416), v421.f64[0]), v69, v421, 1);
        __asm { FMLA            D7, D0, V3.D[1] }
        v413[0] = _Q1;
        __asm { FMLA            D2, D0, V4.D[1] }
        *(_QWORD *)&v413[1] = _D7;
        *((_QWORD *)&v413[2] + 1) = _D2;
        *(float64x2_t *)((char *)&v413[1] + 8) = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)COERCE_UNSIGNED_INT64(1.0 / v416), v422[0].f64[0]), v69, v422[0], 1);
        goto LABEL_102;
      }
      if (v62 == 14)
        v65 = sub_20EB2498C(&v414, (uint64_t)v413, 0, (uint64_t)&v415, (double *)(v40 + 168), (*(double *)v40 + *(double *)(v40 + 32)) * 0.5);
      else
        v65 = sub_20EB3F050(v40, &v414, (uint64_t)v413, &v415, 0);
    }
    else if (v62 > 9)
    {
      if (v62 == 10)
        v65 = sub_20EB2450C(&v414, (uint64_t)v413, 0, (uint64_t)&v415, (double *)(v40 + 168), (*(double *)v40 + *(double *)(v40 + 32)) * 0.5);
      else
        v65 = sub_20EB3AF98(v40, &v414, (uint64_t)v413, &v415, 0);
    }
    else
    {
      if (v62 != 9)
      {
        v98 = v416;
        _Q5 = v415;
        *(_QWORD *)&v100 = vextq_s8((int8x16_t)_Q5, (int8x16_t)_Q5, 8uLL).u64[0];
        _Q1 = vmulq_f64(_Q5, _Q5);
        _D0 = v415.f64[1];
        __asm { FMLA            D1, D0, V5.D[1] }
        if (_Q1.f64[0] >= 0.00000001)
        {
          v102 = v416 * v416 + _Q1.f64[0];
          v103 = sqrt(_Q1.f64[0]);
          v357 = _Q1.f64[0];
          v362 = v100;
          v370 = v415;
          _Q0.f64[0] = atan2(v103, v416);
          v117 = *(double *)(v40 + 168);
          v118 = *(double *)(v40 + 176);
          v119 = *(double *)(v40 + 184);
          v120 = *(double *)(v40 + 192);
          v121 = *(double *)(v40 + 200);
          v122 = *(double *)(v40 + 208);
          v123 = *(double *)(v40 + 216);
          v110 = _Q0.f64[0]
               * _Q0.f64[0]
               * (v117 * 3.0
                + _Q0.f64[0]
                * _Q0.f64[0]
                * (v118 * 5.0
                 + _Q0.f64[0]
                 * _Q0.f64[0]
                 * (v119 * 7.0
                  + _Q0.f64[0]
                  * _Q0.f64[0]
                  * (v120 * 9.0
                   + _Q0.f64[0]
                   * _Q0.f64[0]
                   * (v121 * 11.0 + _Q0.f64[0] * _Q0.f64[0] * (v122 * 13.0 + _Q0.f64[0] * _Q0.f64[0] * 15.0 * v123))))))
               + 1.0;
          v100 = v362;
          _Q5 = v370;
          _Q0.f64[0] = _Q0.f64[0]
                     * (_Q0.f64[0]
                      * _Q0.f64[0]
                      * (v117
                       + _Q0.f64[0]
                       * _Q0.f64[0]
                       * (v118
                        + _Q0.f64[0]
                        * _Q0.f64[0]
                        * (v119
                         + _Q0.f64[0]
                         * _Q0.f64[0]
                         * (v120
                          + _Q0.f64[0]
                          * _Q0.f64[0]
                          * (v121 + _Q0.f64[0] * _Q0.f64[0] * (v122 + _Q0.f64[0] * _Q0.f64[0] * v123))))))
                      + 1.0);
          goto LABEL_100;
        }
LABEL_93:
        v112 = 1.0 / v98;
        v113 = -(v112 * v112);
        v114.f64[0] = 0.0;
        v115 = 0;
LABEL_101:
        v414 = vmulq_n_f64(_Q5, v112);
        *(_QWORD *)&v114.f64[1] = v115;
        v125 = vmulq_n_f64(v114, _Q5.f64[0]);
        v126 = vmulq_laneq_f64(v114, _Q5, 1);
        *((_QWORD *)&v413[1] + 1) = *(_QWORD *)&v126.f64[0];
        v125.f64[0] = v112 + v125.f64[0];
        *(double *)&v413[1] = v113 * _Q5.f64[0];
        v413[0] = v125;
        *((double *)&v413[2] + 1) = v113 * v100;
        *(double *)&v413[2] = v112 + v126.f64[1];
        goto LABEL_102;
      }
      v65 = sub_20EB372E0(v40, &v414, (uint64_t)v413, &v415, 0);
    }
    goto LABEL_97;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v62 = *(_DWORD *)(v40 + 992);
  if (v62 > 7)
    goto LABEL_37;
LABEL_30:
  if (v62 > 3)
  {
    if (v62 > 5)
    {
      if (v62 == 6)
      {
        if (v416 == 0.0)
          v95 = 1.0;
        else
          v95 = 1.0 / v416;
        v96 = v415.f64[0] * v95;
        v97 = v95 * v415.f64[1];
        v424.f64[0] = v415.f64[0] * v95;
        v424.f64[1] = v95 * v415.f64[1];
        sub_20EB2837C(&v414, v421.f64, &v424, (double *)(v40 + 168), (float64x2_t *)(v40 + 192), (double *)(v40 + 208));
        *(double *)v413 = v95 * v421.f64[0];
        *((double *)v413 + 1) = v95 * v421.f64[1];
        *((double *)&v413[1] + 1) = v95 * v422[0].f64[0];
        *(double *)&v413[1] = v95 * (-(v421.f64[0] * v96) - v97 * v421.f64[1]);
        *(double *)&v413[2] = v95 * v422[0].f64[1];
        *((double *)&v413[2] + 1) = v95 * (-(v422[0].f64[0] * v96) - v97 * v422[0].f64[1]);
        goto LABEL_102;
      }
      v65 = sub_20EB3345C(v40, &v414, (uint64_t)v413, &v415, 0);
    }
    else
    {
      if (v62 != 5)
        goto LABEL_90;
      v65 = sub_20EB29218(v414.f64, (uint64_t)v413, &v415, (int64x2_t *)(v40 + 168));
    }
LABEL_97:
    if ((v65 & 1) == 0)
      return 0;
    goto LABEL_102;
  }
  if (v62 <= 1)
  {
    if (!v62)
    {
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    if (v416 >= 0.00000001)
    {
      v63 = 1.0 / v416;
      _Q1.f64[1] = v415.f64[1];
      v414 = vmulq_n_f64(v415, 1.0 / v416);
      v413[0] = COERCE_UNSIGNED_INT64(1.0 / v416);
      *((_QWORD *)&v413[1] + 1) = 0;
      *(double *)&v413[1] = v63 * -(v415.f64[0] * v63);
      *(double *)&v413[2] = 1.0 / v416;
      *((double *)&v413[2] + 1) = v63 * -(v415.f64[1] * v63);
      goto LABEL_102;
    }
    return 0;
  }
  if (v62 != 2)
  {
LABEL_90:
    v98 = v416;
    _Q5 = v415;
    *(_QWORD *)&v100 = vextq_s8((int8x16_t)_Q5, (int8x16_t)_Q5, 8uLL).u64[0];
    _Q1 = vmulq_f64(_Q5, _Q5);
    _D0 = v415.f64[1];
    __asm { FMLA            D1, D0, V5.D[1] }
    if (_Q1.f64[0] >= 0.00000001)
    {
      v102 = v416 * v416 + _Q1.f64[0];
      v103 = sqrt(_Q1.f64[0]);
      v357 = _Q1.f64[0];
      v361 = v100;
      v369 = v415;
      _Q0.f64[0] = atan2(v103, v416);
      v104 = *(int64x2_t *)(v40 + 184);
      v105 = *(int64x2_t *)(v40 + 168);
      v106 = (float64x2_t)vzip2q_s64(v105, v104);
      v107 = (float64x2_t)vzip1q_s64(v105, v104);
      v108 = vmulq_n_f64(vaddq_f64(vmulq_f64(v107, (float64x2_t)xmmword_210312E10), vmulq_n_f64(vmulq_f64(v106, (float64x2_t)xmmword_210312E20), _Q0.f64[0] * _Q0.f64[0])), _Q0.f64[0] * _Q0.f64[0]);
      v109 = _Q0.f64[0] * _Q0.f64[0] * (_Q0.f64[0] * _Q0.f64[0]);
      v110 = v108.f64[0] + vmuld_lane_f64(v109, v108, 1) + 1.0;
      v100 = v361;
      _Q1 = vmulq_n_f64(vaddq_f64(v107, vmulq_n_f64(v106, _Q0.f64[0] * _Q0.f64[0])), _Q0.f64[0] * _Q0.f64[0]);
      _Q5 = v369;
      _Q0.f64[0] = _Q0.f64[0] + _Q0.f64[0] * (_Q1.f64[0] + vmuld_lane_f64(v109, _Q1, 1));
LABEL_100:
      v112 = _Q0.f64[0] / v103;
      v124 = v110 / v102;
      v114 = vmulq_n_f64(_Q5, (v98 * (v110 / v102) - v112) / v357);
      v113 = -v124;
      v115 = vextq_s8((int8x16_t)v114, (int8x16_t)v114, 8uLL).u64[0];
      goto LABEL_101;
    }
    goto LABEL_93;
  }
  if (*(_DWORD *)(v40 + 212))
  {
    if (v416 < 0.00000001)
      return 0;
    _Q0 = vmulq_n_f64(v415, 1.0 / v416);
    v78 = *(double *)(v40 + 168);
    v79 = *(double *)(v40 + 176);
    v80 = *(double *)(v40 + 184);
    _D3 = vmuld_lane_f64(1.0 / v416, v415, 1);
    __asm { FMLA            D7, D3, V0.D[1] }
    v83 = v78 * *(double *)&_D7 + 1.0 + *(double *)&_D7 * *(double *)&_D7 * (v79 + v80 * *(double *)&_D7);
    v84 = v78 + v78 + *(double *)&_D7 * (v79 * 4.0 + *(double *)&_D7 * (v80 * 6.0));
    v85 = *(float64x2_t *)(v40 + 192);
    v86 = vmulq_f64(vaddq_f64((float64x2_t)vdupq_lane_s64(_D7, 0), vmulq_f64(_Q0, vaddq_f64(_Q0, _Q0))), (float64x2_t)vextq_s8((int8x16_t)v85, (int8x16_t)v85, 8uLL));
    v87 = vaddq_f64(v85, v85);
    v88 = vmulq_n_f64(v87, _Q0.f64[0]);
    v414 = vmlaq_n_f64(vaddq_f64(v86, vmulq_laneq_f64(v88, _Q0, 1)), _Q0, v83);
    v89 = vmulq_n_f64(_Q0, v84);
    v90 = vmulq_n_f64(v89, _Q0.f64[0]);
    v91 = vmulq_n_f64(v89, _D3);
    v92 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v88.f64[0], 0);
    v92.f64[0] = vmuld_lane_f64(6.0, v85, 1) * _Q0.f64[0];
    v93 = vaddq_f64(v92, vmulq_laneq_f64(v87, _Q0, 1));
    v90.f64[0] = v83 + v90.f64[0];
    v94 = vaddq_f64(v93, v90);
    *(_QWORD *)&v93.f64[0] = vdupq_laneq_s64((int64x2_t)v93, 1).u64[0];
    v93.f64[1] = vmuld_lane_f64(6.0 * v85.f64[0], _Q0, 1) + v88.f64[1];
    v91.f64[1] = v83 + v91.f64[1];
    _Q1 = vmulq_n_f64(v94, 1.0 / v416);
    v413[0] = _Q1;
    *(float64x2_t *)((char *)&v413[1] + 8) = vmulq_n_f64(vaddq_f64(v93, v91), 1.0 / v416);
    *(double *)&v413[1] = -(vmuld_n_f64(_Q1.f64[0], _Q0.f64[0]) + _Q1.f64[1] * _Q0.f64[1]);
    *((double *)&v413[2] + 1) = -(vmuld_n_f64(*((double *)&v413[1] + 1), _Q0.f64[0]) + *(double *)&v413[2] * _Q0.f64[1]);
  }
  else if (!sub_20F0BA0C8(&v414, (uint64_t)v413, &v415, (double *)(v40 + 168)))
  {
    return 0;
  }
LABEL_102:
  v127 = *(_DWORD *)(v40 + 992);
  if (v127 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v127 = *(_DWORD *)(v40 + 992);
  }
  if (!v127)
  {
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Q0.f64[0] = *(float64_t *)v40;
  _Q1.f64[0] = *(float64_t *)(v40 + 32);
  v349 = _Q0;
  v351 = _Q1;
  _Q0.f64[1] = _Q1.f64[0];
  v128.f64[0] = *(float64_t *)(v40 + 16);
  v128.f64[1] = *(float64_t *)(v40 + 40);
  v129 = v414;
  v130 = vsubq_f64(vmlaq_f64(v128, _Q0, v414), *(float64x2_t *)(a1 + 8));
  v131 = 1.0 / v38;
  _Q1 = vmulq_n_f64(v130, 1.0 / v38);
  v355 = _Q1;
  if (!v374)
    goto LABEL_109;
  _D3 = vmuld_lane_f64(v131, v130, 1);
  __asm { FMLA            D0, D3, V1.D[1] }
  if (_D0 >= 0.00000000999999994)
  {
    v375 = v414;
    v358 = _D0;
    v363 = _D3;
    v135 = log1p(_D0);
    v136.f64[0] = 0.0;
    v136.f64[1] = sqrt(v135 / v358);
    v137 = vmulq_n_f64(v355, (1.0 - (v135 + v135 / v358)) / (v358 * ((v358 + 1.0) * v136.f64[1])));
    v129 = v375;
    v359 = vmulq_n_f64(vmlaq_n_f64(v136, v137, v363), 1.0 / v38);
    v364 = vmulq_n_f64(vmlaq_n_f64((float64x2_t)*(unint64_t *)&v136.f64[1], v137, v355.f64[0]), 1.0 / v38);
    v355 = vmulq_n_f64(v355, v136.f64[1]);
  }
  else
  {
LABEL_109:
    v138.f64[0] = 0.0;
    v138.f64[1] = 1.0 / v38;
    v359 = v138;
    v364 = (float64x2_t)*(unint64_t *)&v131;
  }
  v371 = *(double *)v413;
  v376 = *((double *)&v413[1] + 1);
  if (v41)
  {
    v139 = vmulq_f64(v364, (float64x2_t)0);
    *v342 = vmlaq_f64(vmulq_n_f64(v364, v129.f64[0]), (float64x2_t)0, v359);
    v419 = vmlaq_laneq_f64(v139, v359, v129, 1);
    v418 = vmlaq_f64(v364, (float64x2_t)0, v359);
    v417 = vaddq_f64(v359, v139);
  }
  v140.f64[0] = v371;
  v140.f64[1] = *((float64_t *)v413 + 1);
  v372 = v140;
  v140.f64[0] = *(float64_t *)&v413[1];
  v338 = v140;
  v140.f64[0] = *((float64_t *)&v413[2] + 1);
  v343 = v140;
  v141.f64[0] = v376;
  v141.f64[1] = *(float64_t *)&v413[2];
  v377 = v141;
  if (!v367)
  {
    v143 = v379;
    if (v366)
      goto LABEL_174;
LABEL_120:
    v337.i64[0] = *(_QWORD *)&v141.f64[0];
    v334 = *(_QWORD *)&v141.f64[0];
    v336.i64[0] = *(_QWORD *)&v141.f64[0];
    v333 = *(_QWORD *)&v141.f64[0];
    v335.i64[0] = *(_QWORD *)&v141.f64[0];
    v332 = *(_QWORD *)&v141.f64[0];
    v145 = v349;
    v144 = v351;
    v147 = v359;
    v146 = v364;
    goto LABEL_219;
  }
  *(_QWORD *)&v424.f64[0] = &v421;
  *(_QWORD *)&v424.f64[1] = &v415;
  if (v127 != -1)
  {
    if (v127 <= 7)
      goto LABEL_115;
LABEL_123:
    if (v127 <= 0xB)
    {
      if (v127 <= 9)
      {
        if (v127 != 9)
          sub_20FBCF154();
        sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/LensModel.cpp", 852, (uint64_t)&unk_210254955, 0, (uint64_t)"not implemented yet. rdar://113779839", 37, (void (*)(void **))sub_21023DDB0);
        abort();
      }
      if (v127 == 10)
        sub_20FBCF154();
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/LensModel.cpp", 852, (uint64_t)&unk_210254955, 0, (uint64_t)"not implemented yet. rdar://113779839", 37, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    if (v127 > 0xD)
    {
      if (v127 == 14)
        sub_20FBCF154();
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/LensModel.cpp", 852, (uint64_t)&unk_210254955, 0, (uint64_t)"not implemented yet. rdar://113779839", 37, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    v148 = v424.f64[0];
    if (v127 == 13)
      sub_20EB43BB4();
    _Q0 = **(float64x2_t **)&v424.f64[1];
    _D2 = *(_QWORD *)(*(_QWORD *)&v424.f64[1] + 8);
    __asm { FMLA            D1, D2, V0.D[1] }
    v143 = v379;
    if (_D1 >= 0.00000001)
    {
      v159 = *(double *)(*(_QWORD *)&v424.f64[1] + 16);
      *(double *)&v160 = sqrt(_D1);
      v161 = fabs(v159);
      v162 = fabs(*(double *)&v160);
      v163 = v161 / v162;
      if (v161 >= v162)
        v163 = v162 / v161;
      if (v163 <= 0.414213562)
      {
        v165 = 1;
        v166 = 2;
        v164 = v163;
      }
      else
      {
        v164 = (v162 - v161) / (v161 + v162);
        if (v161 >= v162)
          v164 = -v164;
        v165 = -1;
        v166 = 1;
      }
      v167 = v163 > 0.414213562;
      v168 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v164 * v164), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v164 * v164), (float64x2_t)xmmword_210315370), v164 * v164 * (v164 * v164))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v164 * v164), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v164 * v164), (float64x2_t)xmmword_210315380), v164 * v164 * (v164 * v164))), v164 * v164 * (v164 * v164) * (v164 * v164 * (v164 * v164))));
      v169 = v164 + v164 * vdivq_f64(v168, (float64x2_t)vdupq_laneq_s64((int64x2_t)v168, 1)).f64[0];
      if (*(double *)&v160 == INFINITY && v161 == INFINITY)
        v169 = 0.785398163;
      if (v161 >= v162)
        v166 = v167;
      else
        v165 = -v165;
      if (v159 < 0.0)
        v165 = -v165;
      if (*(uint64_t *)(*(_QWORD *)&v424.f64[1] + 16) < 0)
        v166 = 4 - v166;
      if (v160 < 0)
      {
        v165 = -v165;
        v166 = -v166;
      }
      if (*(double *)&v160 == 0.0 && v159 == 0.0)
        v172 = 0.0;
      else
        v172 = v169;
      v173 = (double)v166 * 3.061617e-17 + (double)v166 * 0.785398163 + v172 * (double)v165;
      v174 = v173 * v173;
      v175.f64[0] = v173 * (v173 * v173);
      v175.f64[1] = v174 * v175.f64[0];
      v176 = vmulq_n_f64(v175, v174 * v174);
      v177 = vdivq_f64(_Q0, (float64x2_t)vdupq_lane_s64(v160, 0));
      **(_OWORD **)&v424.f64[0] = vmulq_n_f64(v175, v177.f64[0]);
      *(float64x2_t *)(*(_QWORD *)&v148 + 16) = vmulq_n_f64(v176, v177.f64[0]);
      *(float64x2_t *)(*(_QWORD *)&v148 + 32) = vmulq_laneq_f64(v175, v177, 1);
      *(float64x2_t *)(*(_QWORD *)&v148 + 48) = vmulq_laneq_f64(v176, v177, 1);
    }
    else
    {
      *(_OWORD *)(*(_QWORD *)&v424.f64[0] + 32) = 0u;
      *(_OWORD *)(*(_QWORD *)&v148 + 48) = 0u;
      **(_OWORD **)&v148 = 0u;
      *(_OWORD *)(*(_QWORD *)&v148 + 16) = 0u;
    }
    goto LABEL_173;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v127 = *(_DWORD *)(v40 + 992);
  if (v127 > 7)
    goto LABEL_123;
LABEL_115:
  if (v127 > 3)
  {
    if (v127 > 5)
    {
      if (v127 == 6)
        sub_20EB42068();
      sub_20EB34694(v40, *(float64x2_t **)&v424.f64[0], *(float64x2_t **)&v424.f64[1]);
      v143 = v379;
    }
    else
    {
      v143 = v379;
      sub_20FBCEF64((float64x2_t **)&v424);
    }
  }
  else
  {
    if (v127 <= 1)
    {
      if (!v127)
      {
        sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
        abort();
      }
      v142 = v424.f64[0];
      *(_OWORD *)(*(_QWORD *)&v424.f64[0] + 32) = 0u;
      *(_OWORD *)(*(_QWORD *)&v142 + 48) = 0u;
      **(_OWORD **)&v142 = 0u;
      *(_OWORD *)(*(_QWORD *)&v142 + 16) = 0u;
      goto LABEL_135;
    }
    if (v127 == 2)
    {
      v152 = v424.f64[0];
      v153 = (const double *)(*(_QWORD *)&v424.f64[1] + 16);
      _D2 = *(_QWORD *)(*(_QWORD *)&v424.f64[1] + 8);
      __asm { FMLA            D1, D2, V0.D[1] }
      *(double *)&v156 = _Q1.f64[0] * (_Q1.f64[0] * _Q1.f64[0]);
      _Q1.f64[1] = _Q1.f64[0] * _Q1.f64[0];
      v157 = vld1q_dup_f64(v153);
      v158 = vdivq_f64(**(float64x2_t **)&v424.f64[1], v157);
      **(_OWORD **)&v424.f64[0] = vmulq_n_f64(_Q1, v158.f64[0]);
      *(float64x2_t *)(*(_QWORD *)&v152 + 16) = vmulq_n_f64((float64x2_t)v156, v158.f64[0]);
      *(float64x2_t *)(*(_QWORD *)&v152 + 32) = vmulq_laneq_f64(_Q1, v158, 1);
      *(float64x2_t *)(*(_QWORD *)&v152 + 48) = vmulq_laneq_f64((float64x2_t)v156, v158, 1);
LABEL_135:
      v143 = v379;
      goto LABEL_173;
    }
    sub_20FBCEF64((float64x2_t **)&v424);
    v143 = v379;
  }
LABEL_173:
  v178 = vmlaq_f64(vmulq_n_f64(v364, v349.f64[0]), (float64x2_t)0, v359);
  v179 = vmlaq_n_f64(vmulq_f64(v364, (float64x2_t)0), v359, v351.f64[0]);
  v326 = vmlaq_laneq_f64(vmulq_laneq_f64(v178, v421, 1), v179, v422[1], 1);
  v327 = vmlaq_n_f64(vmulq_n_f64(v178, v421.f64[0]), v179, v422[1].f64[0]);
  v180 = vmlaq_n_f64(vmulq_n_f64(v178, v422[0].f64[0]), v179, v423.f64[0]);
  v141 = vmlaq_laneq_f64(vmulq_laneq_f64(v178, v422[0], 1), v179, v423, 1);
  v324 = v141;
  v325 = v180;
  if (!v366)
    goto LABEL_120;
LABEL_174:
  v181 = *(_DWORD *)(v40 + 992);
  if (v181 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v181 = *(_DWORD *)(v40 + 992);
    if (v181 <= 7)
      goto LABEL_176;
  }
  else if (v181 <= 7)
  {
LABEL_176:
    if (v181 <= 3)
    {
      if (v181 > 1)
      {
        memset(v422, 0, sizeof(v422));
        v421 = 0u;
        if (v181 == 2)
        {
          v182 = (double *)(v40 + 168);
          if (*(_DWORD *)(v40 + 212))
            sub_20FA1E060(&v414, (uint64_t)v413, &v415, v182, (float64x2_t *)(v40 + 192));
          else
            sub_20F0BA0C8(&v414, (uint64_t)v413, &v415, v182);
        }
        else
        {
          v197 = v416;
          _Q1 = v415;
          _D0 = v415.f64[1];
          __asm { FMLA            D2, D0, V1.D[1] }
          if (_D2 >= 0.00000001)
          {
            v208 = v416 * v416 + _D2;
            v209 = sqrt(_D2);
            v381 = _D2;
            v210 = atan2(v209, v416);
            v424.f64[0] = 0.0;
            v201 = sub_20F0BA1B0((int64x2_t *)(v40 + 168), v424.f64, v210) / v209;
            _Q1 = v415;
            v203 = vmulq_n_f64(v415, (v197 * (v424.f64[0] / v208) - v201) / v381);
            v202 = -(v424.f64[0] / v208);
            v204 = vextq_s8((int8x16_t)v203, (int8x16_t)v203, 8uLL).u64[0];
          }
          else
          {
            v201 = 1.0 / v416;
            v202 = -(v201 * v201);
            v203.f64[0] = 0.0;
            v204 = 0;
          }
          v414 = vmulq_n_f64(_Q1, v201);
          *(_QWORD *)&v203.f64[1] = v204;
          v211 = vmulq_n_f64(v203, _Q1.f64[0]);
          *((_QWORD *)&v413[0] + 1) = *(_QWORD *)&v211.f64[1];
          *((_QWORD *)&v413[2] + 1) = vmuld_lane_f64(v202, _Q1, 1);
          *(float64x2_t *)((char *)&v413[1] + 8) = vmulq_laneq_f64(v203, _Q1, 1);
          *(double *)&v413[1] = v202 * _Q1.f64[0];
          *(double *)v413 = v201 + v211.f64[0];
        }
      }
      else
      {
        if (!v181)
        {
          sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
          abort();
        }
        memset(v422, 0, sizeof(v422));
        v421 = 0u;
        if (v416 >= 0.00000001)
        {
          *(double *)&v413[2] = 1.0 / v416;
          *(double *)v413 = 1.0 / v416;
          *((_QWORD *)&v413[0] + 1) = 0;
          v413[1] = COERCE_UNSIGNED_INT64(1.0 / v416 * -(v415.f64[0] * (1.0 / v416)));
        }
      }
      goto LABEL_218;
    }
    if (v181 > 5)
    {
      if (v181 == 6)
        sub_20EB41F64((float64x2_t *)v40, &v414, (double *)v413, v415.f64, &v421);
      else
        sub_20EB3345C(v40, &v414, (uint64_t)v413, &v415, (uint64_t)&v421);
      goto LABEL_218;
    }
    memset(v422, 0, sizeof(v422));
    v421 = 0u;
    if (v181 == 5)
    {
      sub_20EB29218(v414.f64, (uint64_t)v413, &v415, (int64x2_t *)(v40 + 168));
      goto LABEL_218;
    }
    v183 = v416;
    _Q1 = v415;
    _D0 = v415.f64[1];
    __asm { FMLA            D2, D0, V1.D[1] }
    if (_D2 < 0.00000001)
      goto LABEL_206;
    v187 = v416 * v416 + _D2;
    v188 = sqrt(_D2);
    v380 = _D2;
    v205 = atan2(v188, v416);
    v424.f64[0] = 0.0;
    v190 = sub_20F0BA1B0((int64x2_t *)(v40 + 168), v424.f64, v205);
    goto LABEL_213;
  }
  if (v181 > 0xB)
  {
    if (v181 > 0xD)
    {
      if (v181 == 14)
      {
        memset(v422, 0, sizeof(v422));
        v421 = 0u;
        sub_20EB2498C(&v414, (uint64_t)v413, 0, (uint64_t)&v415, (double *)(v40 + 168), (*(double *)v40 + *(double *)(v40 + 32)) * 0.5);
      }
      else
      {
        sub_20EB3F050(v40, &v414, (uint64_t)v413, &v415, (uint64_t)&v421);
      }
    }
    else if (v181 == 13)
    {
      sub_20EB439AC((double *)v40, &v414, (uint64_t)v413, &v415, &v421);
    }
    else
    {
      memset(v422, 0, sizeof(v422));
      v421 = 0u;
      v414 = 0uLL;
      memset(v413, 0, sizeof(v413));
    }
    goto LABEL_218;
  }
  if (v181 > 9)
  {
    if (v181 == 10)
    {
      memset(v422, 0, sizeof(v422));
      v421 = 0u;
      sub_20EB2450C(&v414, (uint64_t)v413, 0, (uint64_t)&v415, (double *)(v40 + 168), (*(double *)v40 + *(double *)(v40 + 32)) * 0.5);
    }
    else
    {
      sub_20EB3AF98(v40, &v414, (uint64_t)v413, &v415, (uint64_t)&v421);
    }
    goto LABEL_218;
  }
  if (v181 != 9)
  {
    memset(v422, 0, sizeof(v422));
    v421 = 0u;
    v183 = v416;
    _Q1 = v415;
    _D0 = v415.f64[1];
    __asm { FMLA            D2, D0, V1.D[1] }
    if (_D2 < 0.00000001)
    {
LABEL_206:
      v193 = 1.0 / v183;
      v194 = -(v193 * v193);
      v195.f64[0] = 0.0;
      v196 = 0;
LABEL_214:
      v414 = vmulq_n_f64(_Q1, v193);
      *(_QWORD *)&v195.f64[1] = v196;
      v206 = vmulq_n_f64(v195, _Q1.f64[0]);
      v207 = vmulq_laneq_f64(v195, _Q1, 1);
      *((_QWORD *)&v413[0] + 1) = *(_QWORD *)&v206.f64[1];
      *((_QWORD *)&v413[1] + 1) = *(_QWORD *)&v207.f64[0];
      *(double *)&v413[1] = v194 * _Q1.f64[0];
      *(double *)v413 = v193 + v206.f64[0];
      *((_QWORD *)&v413[2] + 1) = vmuld_lane_f64(v194, _Q1, 1);
      *(double *)&v413[2] = v193 + v207.f64[1];
      goto LABEL_218;
    }
    v187 = v416 * v416 + _D2;
    v188 = sqrt(_D2);
    v380 = _D2;
    v189 = atan2(v188, v416);
    v424.f64[0] = 0.0;
    v190 = sub_20F0BA21C((double *)(v40 + 168), v424.f64, v189);
LABEL_213:
    v193 = v190 / v188;
    _Q1 = v415;
    v195 = vmulq_n_f64(v415, (v183 * (v424.f64[0] / v187) - v193) / v380);
    v194 = -(v424.f64[0] / v187);
    v196 = vextq_s8((int8x16_t)v195, (int8x16_t)v195, 8uLL).u64[0];
    goto LABEL_214;
  }
  sub_20EB372E0(v40, &v414, (uint64_t)v413, &v415, (uint64_t)&v421);
LABEL_218:
  v145 = v349;
  v144 = v351;
  v147 = v359;
  v146 = v364;
  v212 = vmlaq_f64(vmulq_n_f64(v364, v349.f64[0]), (float64x2_t)0, v359);
  v213 = vmlaq_n_f64(vmulq_f64(v364, (float64x2_t)0), v359, v351.f64[0]);
  v335 = (int8x16_t)vmlaq_n_f64(vmulq_n_f64(v212, v422[0].f64[0]), v213, v422[1].f64[1]);
  v336 = (int8x16_t)vmlaq_laneq_f64(vmulq_laneq_f64(v212, v421, 1), v213, *(float64x2_t *)((char *)v422 + 8), 1);
  v332 = vextq_s8(v335, v335, 8uLL).u64[0];
  v333 = vextq_s8(v336, v336, 8uLL).u64[0];
  v337 = (int8x16_t)vmlaq_n_f64(vmulq_n_f64(v212, v421.f64[0]), v213, v422[0].f64[1]);
  v334 = vextq_s8(v337, v337, 8uLL).u64[0];
LABEL_219:
  v214 = (int8x16_t)vmulq_n_f64(v372, v145.f64[0]);
  v215 = (int8x16_t)vmulq_n_f64(v377, v144.f64[0]);
  v216 = LOBYTE(v355.f64[0]);
  v217 = vextq_s8((int8x16_t)v355, v214, 1uLL);
  v218 = vmlaq_n_f64(vmulq_n_f64(v146, *(double *)v214.i64), v147, *(double *)v215.i64);
  v219 = vmlaq_n_f64(vmulq_n_f64(v146, *(double *)vextq_s8(v214, v214, 8uLL).i64), v147, *(double *)vextq_s8(v215, v215, 8uLL).i64);
  v220 = vmlaq_n_f64(vmulq_n_f64(v146, vmulq_f64(v145, v338).f64[0]), v147, vmulq_f64(v144, v343).f64[0]);
  v221 = vnegq_f64(v218);
  v222 = vmlsq_lane_f64(vmlsq_lane_f64(vmulq_n_f64(v221, *(double *)v401.i64), v219, *(double *)&v402[8], 0), v220, v403.f64[0], 0);
  v223 = vmlsq_laneq_f64(vmlsq_laneq_f64(vmulq_laneq_f64(v221, (float64x2_t)v401, 1), v219, *(float64x2_t *)&v402[8], 1), v220, v403, 1);
  v224 = vmlsq_lane_f64(vmlsq_lane_f64(vmulq_n_f64(v221, *(double *)v402), v219, *(double *)&v402[24], 0), v220, v404, 0);
  v225.f64[0] = *(float64_t *)(v385 + 48);
  v226 = *(float64x2_t *)(v385 + 32);
  v227 = *(float64x2_t *)(v385 + 56);
  _Q14 = *(float64x2_t *)(v385 + 80);
  v229 = vnegq_f64(v222);
  v230 = vmlsq_lane_f64(vmlsq_lane_f64(vmulq_n_f64(v229, v226.f64[0]), v223, v227.f64[0], 0), v224, _Q14.f64[0], 0);
  v352 = (int64x2_t)v227;
  v231 = vmlsq_laneq_f64(vmlsq_laneq_f64(vmulq_laneq_f64(v229, v226, 1), v223, v227, 1), v224, _Q14, 1);
  v356 = *(double *)(v385 + 96);
  v360 = *(double *)(v385 + 72);
  v232 = vmlsq_lane_f64(vmlsq_lane_f64(vmulq_n_f64(v229, v225.f64[0]), v223, v360, 0), v224, v356, 0);
  v233 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v230, *(double *)(v387 + 32)), v231, *(float64x2_t *)(v387 + 32), 1), v232, *(double *)(v387 + 48));
  v234 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v230, *(double *)(v387 + 56)), v231, *(float64x2_t *)(v387 + 56), 1), v232, *(double *)(v387 + 72));
  v235 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v230, *(double *)(v387 + 80)), v231, *(float64x2_t *)(v387 + 80), 1), v232, *(double *)(v387 + 96));
  if (v26 <= 0.0)
  {
    v331 = vextq_s8((int8x16_t)v224, (int8x16_t)v224, 8uLL).u64[0];
    v344 = vextq_s8((int8x16_t)v223, (int8x16_t)v223, 8uLL).u64[0];
    v350 = vextq_s8((int8x16_t)v222, (int8x16_t)v222, 8uLL).u64[0];
    v236.i64[0] = *(_QWORD *)&v222.f64[0];
    v237.i64[0] = *(_QWORD *)&v223.f64[0];
    v339.i64[0] = *(_QWORD *)&v224.f64[0];
    v238.f64[0] = v233.f64[0];
    v328 = vextq_s8((int8x16_t)v235, (int8x16_t)v235, 8uLL).u64[0];
    v329 = vextq_s8((int8x16_t)v234, (int8x16_t)v234, 8uLL).u64[0];
    v239.f64[0] = v234.f64[0];
    v330 = vextq_s8((int8x16_t)v233, (int8x16_t)v233, 8uLL).u64[0];
    v240.f64[0] = v235.f64[0];
  }
  else
  {
    v236 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v222, v389.f64[0]), v223, v391.f64[0]), v224, v393.f64[0]);
    v237 = (int8x16_t)vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v222, v389, 1), v223, v391, 1), v224, v393, 1);
    v344 = vextq_s8(v237, v237, 8uLL).u64[0];
    v350 = vextq_s8(v236, v236, 8uLL).u64[0];
    v339 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v222, v390), v223, v392), v224, v394);
    v331 = vextq_s8(v339, v339, 8uLL).u64[0];
    v238 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v233, v395.f64[0]), v234, v397.f64[0]), v235, v399.f64[0]);
    v239 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v233, v395, 1), v234, v397, 1), v235, v399, 1);
    v240 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v233, v396), v234, v398), v235, v400);
    v329 = vextq_s8((int8x16_t)v239, (int8x16_t)v239, 8uLL).u64[0];
    v330 = vextq_s8((int8x16_t)v238, (int8x16_t)v238, 8uLL).u64[0];
    v328 = vextq_s8((int8x16_t)v240, (int8x16_t)v240, 8uLL).u64[0];
  }
  v241 = v407;
  v242 = *(float64x2_t *)&v408[8];
  v243 = v409;
  v5.f64[0] = *(float64_t *)v408;
  v6.f64[0] = *(float64_t *)&v408[24];
  v4.f64[0] = v410;
  v244 = v416;
  v245 = *(float64x2_t *)(v37 + 64);
  v246 = v415.f64[1];
  v247 = v415.f64[0];
  v248 = *(double *)(v37 + 80);
  *(_BYTE *)v365 = v216;
  *(_BYTE *)(v365 + 15) = v217.i8[14];
  *(_WORD *)(v365 + 13) = v217.i16[6];
  *(_DWORD *)(v365 + 9) = v217.i32[2];
  *(_QWORD *)(v365 + 1) = v217.i64[0];
  v382 = v6.f64[0];
  if (v353)
  {
    v321 = *(double *)v236.i64;
    v322 = v230;
    v323 = v245;
    v249 = (float64x2_t)vextq_s8((int8x16_t)v341, (int8x16_t)v341, 8uLL);
    v250 = v218;
    v251 = vmlsq_lane_f64(vmulq_n_f64(v243, v249.f64[0]), v242, v340.f64[0], 0);
    v252 = vmlsq_lane_f64(vmulq_n_f64(v241, v340.f64[0]), v243, v341.f64[0], 0);
    v253 = vmlsq_lane_f64(vmulq_n_f64(v242, v341.f64[0]), v241, v249.f64[0], 0);
    *a4 = vaddq_f64(vsubq_f64(vmulq_n_f64(v219, v244), vmulq_n_f64(v220, v246)), vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v233, v251.f64[0]), v234, v251, 1), v235, vmlsq_f64(vmulq_f64(v249, v4), v340, v6).f64[0]));
    a4[1] = vaddq_f64(vsubq_f64(vmulq_n_f64(v220, v247), vmulq_n_f64(v250, v244)), vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v233, v252.f64[0]), v234, v252, 1), v235, vmlsq_f64(vmulq_f64(v340, v5), v341, v4).f64[0]));
    a4[2] = vaddq_f64(vsubq_f64(vmulq_n_f64(v250, v246), vmulq_n_f64(v219, v247)), vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v233, v253.f64[0]), v234, v253, 1), v235, vmlsq_f64(vmulq_f64(v341, v6), v249, v5).f64[0]));
    v254 = a4 + 3;
    if (*(_BYTE *)(v143 + 128))
    {
      *(_QWORD *)&v240.f64[1] = v328;
      *(_QWORD *)&v255.f64[0] = v339.i64[0];
      *(_QWORD *)&v255.f64[1] = v331;
      *(_QWORD *)&v239.f64[1] = v329;
      v256 = vaddq_f64(v255, v240);
      *(_QWORD *)&v255.f64[0] = v237.i64[0];
      *(_QWORD *)&v255.f64[1] = v344;
      v257 = vaddq_f64(v255, v239);
      *(_QWORD *)&v238.f64[1] = v330;
      v255.f64[0] = v321;
      *(_QWORD *)&v255.f64[1] = v350;
      *v254 = vaddq_f64(v255, v238);
      a4[4] = v257;
      a4[5] = v256;
    }
    else
    {
      a4[4] = 0u;
      a4[5] = 0u;
      *v254 = 0u;
    }
    v245 = v323;
    v230 = v322;
  }
  else
  {
    a4[4] = 0u;
    a4[5] = 0u;
    a4[2] = 0u;
    a4[3] = 0u;
    *a4 = 0u;
    a4[1] = 0u;
  }
  v258 = vmulq_n_f64(v233, v241.f64[0]);
  v259 = vmulq_n_f64(v233, v242.f64[0]);
  v260 = vmulq_n_f64(v233, v243.f64[0]);
  if (*(_BYTE *)(v387 + 20))
  {
    *(_QWORD *)&v261 = vextq_s8(v346, v346, 8uLL).u64[0];
    v262 = (int8x16_t)vsubq_f64(vmulq_n_f64(v235, v261), vmulq_n_f64(v234, v345));
    v263 = (int8x16_t)vsubq_f64(vmulq_n_f64(v233, v345), vmulq_n_f64(v235, *(double *)v346.i64));
    v264 = (int8x16_t)vsubq_f64(vmulq_n_f64(v234, *(double *)v346.i64), vmulq_n_f64(v233, v261));
    v262.i64[1] = vextq_s8(v262, v262, 8uLL).u64[0];
    v263.i64[1] = vextq_s8(v263, v263, 8uLL).u64[0];
    a4[6] = (float64x2_t)v262;
    a4[7] = (float64x2_t)v263;
    v264.i64[1] = vextq_s8(v264, v264, 8uLL).u64[0];
    a4[8] = (float64x2_t)v264;
    a4[9] = v230;
    a4[10] = v231;
    a4[11] = v232;
  }
  v265 = vmlaq_laneq_f64(v258, v234, v241, 1);
  v266 = vmlaq_laneq_f64(v259, v234, v242, 1);
  v267 = vmlaq_laneq_f64(v260, v234, v243, 1);
  if (*(_BYTE *)(v385 + 20))
  {
    _D7 = vextq_s8(v347, v347, 8uLL).u64[0];
    __asm { FMLA            D16, D7, V14.D[1] }
    v225.f64[1] = v360;
    v270 = _D16 + v356 * *(double *)&v348;
    v271 = vmlaq_f64(vmlaq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v226, v352), *(double *)v347.i64), (float64x2_t)vdupq_laneq_s64((int64x2_t)v347, 1), (float64x2_t)vzip2q_s64((int64x2_t)v226, v352)), (float64x2_t)vdupq_lane_s64(v348, 0), v225);
    v272 = (int8x16_t)vsubq_f64(vmulq_laneq_f64(v224, v271, 1), vmulq_n_f64(v223, v270));
    v273 = (int8x16_t)vsubq_f64(vmulq_n_f64(v222, v270), vmulq_n_f64(v224, v271.f64[0]));
    v274 = (int8x16_t)vsubq_f64(vmulq_n_f64(v223, v271.f64[0]), vmulq_laneq_f64(v222, v271, 1));
    v272.i64[1] = vextq_s8(v272, v272, 8uLL).u64[0];
    v273.i64[1] = vextq_s8(v273, v273, 8uLL).u64[0];
    v274.i64[1] = vextq_s8(v274, v274, 8uLL).u64[0];
    a4[12] = (float64x2_t)v272;
    a4[13] = (float64x2_t)v273;
    a4[14] = (float64x2_t)v274;
    a4[15] = vnegq_f64(v230);
    a4[16] = vnegq_f64(v231);
    a4[17] = vnegq_f64(v232);
  }
  v275 = vmlaq_n_f64(v265, v235, v5.f64[0]);
  v276 = vmlaq_n_f64(v266, v235, v382);
  v277 = vmlaq_n_f64(v267, v235, v4.f64[0]);
  if (*(_BYTE *)(v18 + 20))
    a4[29] = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v275, v245.f64[0]), v276, v245, 1), v277, v248);
  v383 = vmulq_n_f64(v275, v354);
  v386 = vmulq_n_f64(v276, v354);
  v388 = vmulq_n_f64(v277, v354);
  if (!*(_BYTE *)(v35 + 144))
  {
    a4[20] = 0u;
    a4[21] = 0u;
    a4[18] = 0u;
    a4[19] = 0u;
LABEL_239:
    if (!v367)
      goto LABEL_287;
LABEL_240:
    sub_20F62F34C(v384 + 16);
    v287 = *(float64x2_t **)(v18 + 24);
    v289 = v287[13];
    v288 = v287[14];
    v291 = v287[15];
    v290 = v287[16];
    v293 = v287[17];
    v292 = v287[18];
    a4[22] = vaddq_f64(v327, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v383, v289.f64[0]), v386, v291.f64[0]), v388, v293.f64[0]));
    a4[23] = vaddq_f64(v326, vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v383, v289, 1), v386, v291, 1), v388, v293, 1));
    a4[24] = vaddq_f64(v325, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v383, v288.f64[0]), v386, v290.f64[0]), v388, v292.f64[0]));
    a4[25] = vaddq_f64(v324, vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v383, v288, 1), v386, v290, 1), v388, v292, 1));
    if (v366)
      goto LABEL_288;
LABEL_241:
    if (!*(_BYTE *)(*v368 + 20))
      goto LABEL_289;
    goto LABEL_242;
  }
  if (!v41)
    goto LABEL_239;
  sub_20F62E744(v35 + 16);
  v278 = *(_QWORD *)(v35 + 24);
  if (*(_BYTE *)(v278 + 40))
  {
    __asm { FMOV            V3.2D, #1.0 }
    _Q3.f64[0] = *(float64_t *)(v278 + 32);
    v280 = (float64x2_t)xmmword_2102DD520;
    v281 = (float64x2_t)xmmword_21030D320;
    v282 = 0uLL;
    v283 = 0uLL;
    v284 = 0uLL;
    v285 = 0uLL;
    v286 = 0uLL;
  }
  else
  {
    v286 = (float64x2_t)xmmword_2103BBE60;
    v280 = (float64x2_t)unk_2103BBE70;
    v285 = (float64x2_t)xmmword_2103BBE40;
    v281 = (float64x2_t)unk_2103BBE50;
    _Q3 = (float64x2_t)xmmword_2103BBE20;
    v284 = (float64x2_t)unk_2103BBE30;
    v282 = (float64x2_t)xmmword_2103BBE00;
    v283 = *(float64x2_t *)algn_2103BBE10;
  }
  v301 = *(float64x2_t **)(v18 + 24);
  v302 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v420, v282.f64[0]), v419, v282, 1), v418, v283.f64[0]), v417, v283, 1);
  v303 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v420, _Q3.f64[0]), v419, _Q3, 1), v418, v284.f64[0]), v417, v284, 1);
  v304 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v420, v285.f64[0]), v419, v285, 1), v418, v281.f64[0]), v417, v281, 1);
  v305 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v420, v286.f64[0]), v419, v286, 1), v418, v280.f64[0]), v417, v280, 1);
  v307 = v301[7];
  v306 = v301[8];
  v309 = v301[9];
  v308 = v301[10];
  v311 = v301[11];
  v310 = v301[12];
  a4[18] = vaddq_f64(v302, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v383, v307.f64[0]), v386, v309.f64[0]), v388, v311.f64[0]));
  a4[19] = vaddq_f64(v303, vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v383, v307, 1), v386, v309, 1), v388, v311, 1));
  a4[20] = vaddq_f64(v304, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v383, v306.f64[0]), v386, v308.f64[0]), v388, v310.f64[0]));
  a4[21] = vaddq_f64(v305, vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v383, v306, 1), v386, v308, 1), v388, v310, 1));
  if (v367)
    goto LABEL_240;
LABEL_287:
  if (!v366)
    goto LABEL_241;
LABEL_288:
  sub_20F8127FC(v378 + 16);
  v312 = *(_QWORD *)(v18 + 24);
  v313 = *(float64x2_t *)(v312 + 304);
  v314 = *(float64x2_t *)(v312 + 328);
  v315 = *(float64x2_t *)(v312 + 352);
  v316 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v383, v313.f64[0]), v386, v314.f64[0]), v388, v315.f64[0]);
  v317 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v383, v313, 1), v386, v314, 1), v388, v315, 1);
  *(_QWORD *)&v318.f64[0] = v335.i64[0];
  *(_QWORD *)&v314.f64[0] = v336.i64[0];
  *(_QWORD *)&v318.f64[1] = v332;
  *(_QWORD *)&v314.f64[1] = v333;
  *(_QWORD *)&v319.f64[0] = v337.i64[0];
  *(_QWORD *)&v319.f64[1] = v334;
  v320 = vaddq_f64(v318, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v383, *(double *)(v312 + 320)), v386, *(double *)(v312 + 344)), v388, *(double *)(v312 + 368)));
  a4[26] = vaddq_f64(v319, v316);
  a4[27] = vaddq_f64(v314, v317);
  a4[28] = v320;
  if (!*(_BYTE *)(*v368 + 20))
  {
LABEL_289:
    v294 = 1;
    if (!*(_BYTE *)(v368[1] + 20))
      goto LABEL_249;
LABEL_243:
    v294 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vmulq_f64(a4[6], a4[6]), vmulq_f64(a4[10], a4[10])), vmulq_f64(a4[8], a4[8])), vmaxnmq_f64(vmaxnmq_f64(vmulq_f64(a4[7], a4[7]), vmulq_f64(a4[11], a4[11])), vmulq_f64(a4[9], a4[9])))) < 100000000.0&& v294;
    goto LABEL_249;
  }
LABEL_242:
  v294 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vmulq_f64(*a4, *a4), vmulq_f64(a4[4], a4[4])), vmulq_f64(a4[2], a4[2])), vmaxnmq_f64(vmaxnmq_f64(vmulq_f64(a4[1], a4[1]), vmulq_f64(a4[5], a4[5])), vmulq_f64(a4[3], a4[3])))) < 100000000.0;
  if (*(_BYTE *)(v368[1] + 20))
    goto LABEL_243;
LABEL_249:
  if (*(_BYTE *)(v368[2] + 20))
    v294 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vmulq_f64(a4[12], a4[12]), vmulq_f64(a4[16], a4[16])), vmulq_f64(a4[14], a4[14])), vmaxnmq_f64(vmaxnmq_f64(vmulq_f64(a4[13], a4[13]), vmulq_f64(a4[17], a4[17])), vmulq_f64(a4[15], a4[15])))) < 100000000.0&& v294;
  if (*(_BYTE *)(v368[3] + 20))
    v294 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmulq_f64(a4[18], a4[18]), vmulq_f64(a4[20], a4[20])), vmaxnmq_f64(vmulq_f64(a4[19], a4[19]), vmulq_f64(a4[21], a4[21])))) < 100000000.0&& v294;
  if (*(_BYTE *)(v368[4] + 20))
    v294 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmulq_f64(a4[22], a4[22]), vmulq_f64(a4[24], a4[24])), vmaxnmq_f64(vmulq_f64(a4[23], a4[23]), vmulq_f64(a4[25], a4[25])))) < 100000000.0&& v294;
  if (*(_BYTE *)(v368[5] + 20))
    v294 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmulq_f64(a4[26], a4[26]), vmulq_f64(a4[28], a4[28])), vmulq_f64(a4[27], a4[27]))) < 100000000.0
        && v294;
  if (*(_BYTE *)(v368[6] + 20))
    return vmaxnmvq_f64(vmulq_f64(a4[29], a4[29])) < 100000000.0 && v294;
  return v294;
}

uint64_t sub_20FC77D28(uint64_t a1, uint64_t *a2, uint64_t a3, double a4, double a5, double a6, double a7, double a8, float64x2_t a9, double a10, float64x2_t a11)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __n128 v20;
  uint64_t v21;
  float64x2_t v22;
  int v23;
  const double *v24;
  double v25;
  double v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v35;
  float64x2_t v36;
  unsigned int v37;
  int64x2_t *v38;
  double *v39;
  char v40;
  unsigned int v41;
  float64x2_t *v42;
  float64x2_t *v43;
  _QWORD *v44;
  int8x16_t v48;
  float64x2_t v49;
  int64x2_t v50;
  _BYTE v51[32];
  __int128 v52;
  double v53;
  float64x2_t v54;
  float64_t v55;
  float64x2_t v56;
  float64x2_t v57;
  double v58;
  float64x2_t *v59;
  float64x2_t *v60;
  _QWORD *v61;
  float64x2_t v62;
  uint64_t v63;
  float64x2x3_t v64;

  v63 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 40))
    return 0;
  v14 = *a2;
  v15 = a2[1];
  v16 = a2[5];
  v17 = *(_QWORD *)(v16 + 24);
  if (*(_BYTE *)(v17 + 58))
  {
    if (!*(_BYTE *)(v17 + 57))
      return 0;
  }
  v18 = *(_OWORD *)(v14 + 48);
  v19 = *(_OWORD *)(v14 + 80);
  *(_OWORD *)&v51[16] = *(_OWORD *)(v14 + 64);
  v52 = v19;
  v53 = *(double *)(v14 + 96);
  v20 = *(__n128 *)(v14 + 32);
  v50 = (int64x2_t)v20;
  *(_OWORD *)v51 = v18;
  v22 = *(float64x2_t *)(v14 + 104);
  v54 = v22;
  v55 = *(double *)(v14 + 120);
  v21 = *(_QWORD *)(a1 + 24);
  v22.f64[0] = *(float64_t *)(v21 + 1424);
  if (v22.f64[0] > 0.0)
  {
    v20.n128_f64[0] = *(double *)(a1 + 16) - *(double *)(v21 + 1432);
    v22.f64[0] = v22.f64[0] * v20.n128_f64[0];
    sub_20FC7D4B0(v15 + 136, v15 + 160, (float64x2_t *)&v50, 0, v22, v20);
    v21 = *(_QWORD *)(a1 + 24);
  }
  v23 = *(unsigned __int8 *)(*(_QWORD *)(v16 + 24) + 56);
  v24 = (const double *)(v15 + 32);
  v64 = vld3q_f64(v24);
  v25 = *(double *)(a1 + 32);
  _Q4 = *(float64x2_t *)(v15 + 80);
  a9.f64[0] = *(float64_t *)(v16 + 48);
  a11.f64[0] = *(float64_t *)(v15 + 120);
  *(_QWORD *)&v27 = *(_OWORD *)&vsubq_f64(a9, a11);
  v28 = vsubq_f64(*(float64x2_t *)(v16 + 32), *(float64x2_t *)(v15 + 104));
  v29 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v64.val[0], v28.f64[0]), v64.val[1], v28, 1), v64.val[2], v27);
  v64.val[0] = vmulq_f64(_Q4, v28);
  v64.val[1].f64[0] = v28.f64[1];
  __asm { FMLA            D0, D1, V4.D[1] }
  v64.val[0].f64[0] = vmlad_n_f64(v64.val[0].f64[0], *(double *)(v15 + 96), v27);
  v64.val[1].f64[0] = *(float64_t *)v51;
  _V5.D[1] = *((_QWORD *)&v52 + 1);
  v28.f64[0] = v55;
  *(_QWORD *)&v64.val[0].f64[0] = *(_OWORD *)&vsubq_f64(v64.val[0], v28);
  v35 = vsubq_f64(v29, v54);
  v64.val[1].f64[1] = *(float64_t *)&v51[24];
  v36 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v50, *(int64x2_t *)&v51[8]), v35.f64[0]), (float64x2_t)vzip2q_s64(v50, *(int64x2_t *)&v51[8]), v35, 1), v64.val[1], v64.val[0].f64[0]);
  v64.val[2].f64[0] = v35.f64[1];
  __asm { FMLA            D1, D2, V5.D[1] }
  v57 = v36;
  v58 = vmlad_n_f64(v64.val[1].f64[0], v53, v64.val[0].f64[0]);
  v37 = *(_DWORD *)(v21 + 992);
  if (v37 != -1)
  {
    if (v37 <= 7)
      goto LABEL_9;
LABEL_16:
    if (v37 > 0xB)
    {
      if (v37 > 0xD)
      {
        if (v37 == 14)
          v40 = sub_20EB247C0(&v62, (uint64_t)&v57, (double *)(v21 + 168), (*(double *)v21 + *(double *)(v21 + 32)) * 0.5);
        else
          v40 = sub_20EB3E39C(v21, &v62, &v57);
      }
      else
      {
        if (v37 != 13)
          return 0;
        v40 = sub_20EB438A4((double *)v21, &v62, &v57);
      }
    }
    else if (v37 > 9)
    {
      if (v37 == 10)
        v40 = sub_20EB24288(&v62, (uint64_t)&v57, (double *)(v21 + 168), (*(double *)v21 + *(double *)(v21 + 32)) * 0.5);
      else
        v40 = sub_20EB3A2E4(v21, &v62, &v57);
    }
    else if (v37 == 9)
    {
      v40 = sub_20EB3641C(v21, &v62, &v57);
    }
    else
    {
      v40 = sub_20FC7D060(&v62, (uint64_t)&v57, (double *)(v21 + 168));
    }
    goto LABEL_42;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v37 = *(_DWORD *)(v21 + 992);
  if (v37 > 7)
    goto LABEL_16;
LABEL_9:
  if (v37 <= 3)
  {
    if (v37 <= 1)
    {
      if (!v37)
      {
        sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
        abort();
      }
      if (v58 >= 0.00000001)
      {
        v62 = vmulq_n_f64(v57, 1.0 / v58);
        goto LABEL_43;
      }
      return 0;
    }
    if (v37 == 2)
    {
      v39 = (double *)(v21 + 168);
      if (!*(_DWORD *)(v21 + 212))
      {
        if (!sub_20EB14380(&v62, &v57, v39))
          return 0;
        goto LABEL_43;
      }
      v40 = sub_20FA29E50(&v62, &v57, v39, (double *)(v21 + 192));
    }
    else
    {
      v40 = sub_20FC7CE50(&v62, (uint64_t)&v57, (int64x2_t *)(v21 + 168));
    }
    goto LABEL_42;
  }
  if (v37 > 5)
  {
    if (v37 == 6)
      v40 = sub_20EB41EEC((float64x2_t *)v21, &v62, &v57);
    else
      v40 = sub_20EB31FFC(v21, &v62, &v57);
LABEL_42:
    if ((v40 & 1) == 0)
      return 0;
    goto LABEL_43;
  }
  v38 = (int64x2_t *)(v21 + 168);
  if (v37 != 5)
  {
    v40 = sub_20FC7CE50(&v62, (uint64_t)&v57, v38);
    goto LABEL_42;
  }
  if ((sub_20EB29430(v62.f64, v57.f64, v38) & 1) == 0)
    return 0;
LABEL_43:
  v59 = &v56;
  v60 = &v62;
  v61 = 0;
  v41 = *(_DWORD *)(v21 + 992);
  if (v41 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v41 = *(_DWORD *)(v21 + 992);
    if (v41 > 7)
      goto LABEL_51;
  }
  else if (v41 > 7)
  {
    goto LABEL_51;
  }
  if (v41 <= 1)
  {
    if (!v41)
    {
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    v42 = v59;
    v43 = v60;
    v44 = v61;
    v59->f64[0] = *(double *)(v21 + 16) + *(double *)v21 * v60->f64[0] + *(double *)(v21 + 8) * v60->f64[1];
    v42->f64[1] = *(double *)(v21 + 32) * v43->f64[1] + *(double *)(v21 + 40);
    if (v44)
    {
      *v44 = *(_QWORD *)v21;
      v44[1] = *(_QWORD *)(v21 + 8);
      v44[2] = 0;
      v44[3] = *(_QWORD *)(v21 + 32);
    }
    goto LABEL_52;
  }
LABEL_51:
  sub_20FB971A4((uint64_t)&v59, (double *)v21);
LABEL_52:
  _Q0 = vsubq_f64(v56, *(float64x2_t *)(a1 + 8));
  _Q2 = vmulq_n_f64(_Q0, 1.0 / v25);
  if (v23)
  {
    _D1 = vmuld_lane_f64(1.0 / v25, _Q0, 1);
    _Q0 = vmulq_f64(_Q2, _Q2);
    __asm { FMLA            D0, D1, V2.D[1] }
    if (_Q0.f64[0] >= 0.00000000999999994)
    {
      v49 = _Q2;
      _Q0.f64[0] = sqrt(log1p(_Q0.f64[0]) / _Q0.f64[0]);
      _Q2 = vmulq_n_f64(v49, _Q0.f64[0]);
    }
  }
  v48 = vextq_s8((int8x16_t)_Q2, (int8x16_t)_Q0, 1uLL);
  *(_BYTE *)a3 = LOBYTE(_Q2.f64[0]);
  *(_BYTE *)(a3 + 15) = HIBYTE(_Q2.f64[1]);
  *(_WORD *)(a3 + 13) = v48.i16[6];
  *(_DWORD *)(a3 + 9) = v48.i32[2];
  *(_QWORD *)(a3 + 1) = v48.i64[0];
  return 1;
}

BOOL sub_20FC78414(uint64_t a1, _QWORD *a2, uint64_t a3, float64x2_t *a4, double a5, double a6, double a7, double a8, double a9, double a10, float64x2_t a11)
{
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  float64x2_t v26;
  __n128 v27;
  float64x2_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  _BOOL4 v32;
  int v33;
  double v34;
  unint64_t *v35;
  float64x2_t *v36;
  int64x2_t v37;
  int64x2_t v38;
  double v39;
  float64x2_t v40;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v49;
  unsigned int v50;
  char v51;
  double *v52;
  double v53;
  double v57;
  double v58;
  double v59;
  double v62;
  double v63;
  float64x2_t v64;
  unint64_t v65;
  double v66;
  double v69;
  long double v70;
  double v71;
  float64x2_t v72;
  float64x2_t v73;
  unsigned int v74;
  float64x2_t v75;
  float64x2_t v76;
  double v77;
  int v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t *v81;
  float64x2_t *v82;
  unint64_t v85;
  float64x2_t v86;
  float64x2_t v87;
  unsigned int v88;
  double *v89;
  double v90;
  double v94;
  double v95;
  double v96;
  double v97;
  double v100;
  double v101;
  float64x2_t v102;
  unint64_t v103;
  double v107;
  double v108;
  double v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v114;
  double v116;
  float64x2_t v118;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  long double v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v140;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  double v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  int8x16_t v157;
  float64x2_t v158;
  float64x2_t v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  float64x2_t v163;
  float64x2_t v164;
  int8x16_t v165;
  int8x16_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t *v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  int8x16_t v180;
  int8x16_t v181;
  int8x16_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  uint64_t v186;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t *v193;
  int8x16_t v194;
  int8x16_t v195;
  int8x16_t v196;
  _BOOL4 v197;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  double v208;
  double v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;
  double v215;
  double v216;
  double v217;
  double v218;
  float64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  double v223;
  float64x2_t v224;
  float64_t v225;
  double v226;
  double v227;
  float64x2_t v228;
  float64_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t *v232;
  double v233;
  float64x2_t v234;
  float64x2_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  float64x2_t v241;
  double v242;
  double v243;
  float64x2_t v244;
  float64x2_t v245;
  _BOOL4 v246;
  _BOOL4 v247;
  float64x2_t v248;
  float64x2_t v249;
  float64x2_t v250;
  int v251;
  float64x2_t v252;
  float64x2_t v253;
  float64_t v254;
  int8x16_t v255;
  float64x2_t v256;
  int64x2_t v257;
  int v258;
  int8x16_t v259;
  float64x2_t v260;
  float64x2_t v261;
  uint64_t v262;
  float64x2_t v263;
  double v264;
  float64x2_t v265;
  double v266;
  float64x2_t v267;
  double v268;
  int64x2_t v269;
  _BYTE v270[32];
  float64x2_t v271;
  double v272;
  float64x2_t v273;
  float64_t v274;
  float64x2_t v275;
  double v276;
  float64x2_t *v277;
  float64x2_t v278;
  float64x2_t v279;
  long double __x;
  float64x2_t v281;
  float64x2_t v282[2];
  float64x2_t v283;
  float64x2_t v284[3];
  uint64_t v285;

  v285 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 40))
    return 0;
  v19 = *a2;
  v20 = a2[1];
  v21 = a2[3];
  v262 = a2[2];
  v23 = a2[4];
  v22 = a2[5];
  v24 = *(_QWORD *)(v22 + 24);
  if (*(_BYTE *)(v24 + 58))
  {
    if (!*(_BYTE *)(v24 + 57))
      return 0;
  }
  v25 = *(_OWORD *)(v19 + 48);
  v26 = *(float64x2_t *)(v19 + 80);
  *(_OWORD *)&v270[16] = *(_OWORD *)(v19 + 64);
  v271 = v26;
  v272 = *(double *)(v19 + 96);
  v27 = *(__n128 *)(v19 + 32);
  v269 = (int64x2_t)v27;
  *(_OWORD *)v270 = v25;
  v28 = *(float64x2_t *)(v19 + 104);
  v273 = v28;
  v274 = *(double *)(v19 + 120);
  v29 = *(_QWORD *)(a1 + 24);
  v30 = *(double *)(v29 + 1424);
  if (v30 > 0.0)
  {
    v27.n128_u64[0] = *(_QWORD *)(v29 + 1432);
    v28.f64[0] = v30 * (*(double *)(a1 + 16) - v27.n128_f64[0]);
    sub_20FC7D4B0(v20 + 136, v20 + 160, (float64x2_t *)&v269, (uint64_t)&v263, v28, v27);
  }
  if (*(_BYTE *)(v19 + 20))
  {
    v246 = *(_BYTE *)(v19 + 129) != 0;
    v31 = v262;
    if (*(_BYTE *)(v262 + 20))
    {
LABEL_9:
      v32 = *(_BYTE *)(v31 + 144) != 0;
      goto LABEL_12;
    }
  }
  else
  {
    v246 = 0;
    v31 = v262;
    if (*(_BYTE *)(v262 + 20))
      goto LABEL_9;
  }
  v32 = 0;
LABEL_12:
  v258 = *(unsigned __int8 *)(v21 + 20);
  v33 = *(unsigned __int8 *)(v23 + 20);
  v251 = *(unsigned __int8 *)(*(_QWORD *)(v22 + 24) + 56);
  v34 = *(double *)(a1 + 32);
  v35 = *(unint64_t **)(a1 + 24);
  v247 = v32;
  v36 = &v278;
  if (!v32)
    v36 = 0;
  v232 = v36;
  v37 = *(int64x2_t *)(v20 + 32);
  v38 = *(int64x2_t *)(v20 + 56);
  v39 = *(double *)(v20 + 96);
  v28.f64[0] = *(float64_t *)(v22 + 48);
  v26.f64[0] = *(float64_t *)(v20 + 120);
  v40 = vsubq_f64(v28, v26);
  _Q1 = vsubq_f64(*(float64x2_t *)(v22 + 32), *(float64x2_t *)(v20 + 104));
  v260 = (float64x2_t)v38;
  v261 = *(float64x2_t *)(v20 + 80);
  v253 = (float64x2_t)v37;
  v254 = *(double *)(v20 + 72);
  v42.f64[0] = *(float64_t *)(v20 + 48);
  v42.f64[1] = v254;
  v43 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v37, v38), _Q1.f64[0]), (float64x2_t)vzip2q_s64(v37, v38), _Q1, 1), v42, v40.f64[0]);
  _Q2 = vmulq_f64(v261, _Q1);
  _Q1.f64[0] = _Q1.f64[1];
  __asm { FMLA            D2, D1, V4.D[1] }
  _Q2.f64[0] = vmlad_n_f64(_Q2.f64[0], v39, v40.f64[0]);
  a11.f64[0] = *(float64_t *)v270;
  v37.i64[0] = *(_QWORD *)&v270[24];
  *(double *)v38.i64 = v272;
  v40.f64[0] = v274;
  v238 = _Q2;
  v239 = v43;
  _Q1 = vsubq_f64(v43, v273);
  *(_QWORD *)&v40.f64[0] = *(_OWORD *)&vsubq_f64(_Q2, v40);
  v237 = (float64x2_t)vzip1q_s64(v269, *(int64x2_t *)&v270[8]);
  v252 = *(float64x2_t *)&v270[8];
  v248 = (float64x2_t)v269;
  v259 = (int8x16_t)a11;
  v255 = (int8x16_t)v37;
  v256 = (float64x2_t)v38;
  a11.f64[1] = *(float64_t *)&v270[24];
  v235 = a11;
  v236 = (float64x2_t)vzip2q_s64(v269, *(int64x2_t *)&v270[8]);
  v49 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v237, _Q1.f64[0]), v236, _Q1, 1), a11, v40.f64[0]);
  _Q1.f64[0] = _Q1.f64[1];
  v257 = (int64x2_t)v271;
  __asm { FMLA            D2, D1, V4.D[1] }
  v233 = vmlad_n_f64(_Q2.f64[0], v272, v40.f64[0]);
  v234 = v49;
  v279 = v49;
  __x = v233;
  v50 = *((_DWORD *)v35 + 248);
  if (v50 != -1)
  {
    if (v50 <= 7)
      goto LABEL_16;
LABEL_23:
    if (v50 > 0xB)
    {
      if (v50 > 0xD)
      {
        if (v50 == 14)
          v51 = sub_20EB2498C(&v275, (uint64_t)v284, 0, (uint64_t)&v279, (double *)v35 + 21, (*(double *)v35 + *((double *)v35 + 4)) * 0.5);
        else
          v51 = sub_20EB3F050((uint64_t)v35, &v275, (uint64_t)v284, &v279, 0);
      }
      else
      {
        if (v50 != 13)
          return 0;
        v51 = sub_20EB439AC((double *)v35, &v275, (uint64_t)v284, &v279, 0);
      }
      goto LABEL_51;
    }
    if (v50 > 9)
    {
      if (v50 == 10)
        v51 = sub_20EB2450C(&v275, (uint64_t)v284, 0, (uint64_t)&v279, (double *)v35 + 21, (*(double *)v35 + *((double *)v35 + 4)) * 0.5);
      else
        v51 = sub_20EB3AF98((uint64_t)v35, &v275, (uint64_t)v284, &v279, 0);
      goto LABEL_51;
    }
    if (v50 == 9)
    {
      v51 = sub_20EB372E0((uint64_t)v35, &v275, (uint64_t)v284, &v279, 0);
      goto LABEL_51;
    }
    v53 = __x;
    _Q1 = v279;
    _D0 = v279.f64[1];
    __asm { FMLA            D2, D0, V1.D[1] }
    if (_D2 < 0.00000001)
      goto LABEL_45;
    *(double *)v11.i64 = __x * __x + _D2;
    v57 = sqrt(_D2);
    v242 = _D2;
    v58 = atan2(v57, __x);
    v281.f64[0] = 0.0;
    v59 = sub_20F0BA21C((double *)v35 + 21, v281.f64, v58);
    goto LABEL_54;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v50 = *((_DWORD *)v35 + 248);
  if (v50 > 7)
    goto LABEL_23;
LABEL_16:
  if (v50 > 3)
  {
    if (v50 > 5)
    {
      if (v50 == 6)
        v51 = sub_20EB41F64((float64x2_t *)v35, &v275, v284[0].f64, v279.f64, 0);
      else
        v51 = sub_20EB3345C((uint64_t)v35, &v275, (uint64_t)v284, &v279, 0);
      goto LABEL_51;
    }
    if (v50 == 5)
    {
      v51 = sub_20EB29218(v275.f64, (uint64_t)v284, &v279, (int64x2_t *)(v35 + 21));
      goto LABEL_51;
    }
    v53 = __x;
    _Q1 = v279;
    _D0 = v279.f64[1];
    __asm { FMLA            D2, D0, V1.D[1] }
    if (_D2 < 0.00000001)
    {
LABEL_45:
      v62 = 1.0 / v53;
      v63 = -(v62 * v62);
      v64.f64[0] = 0.0;
      v65 = 0;
LABEL_56:
      v275 = vmulq_n_f64(_Q1, v62);
      *(_QWORD *)&v64.f64[1] = v65;
      v72 = vmulq_n_f64(v64, _Q1.f64[0]);
      v73 = vmulq_laneq_f64(v64, _Q1, 1);
      v284[0].f64[1] = v72.f64[1];
      v284[1].f64[1] = v73.f64[0];
      v284[1].f64[0] = v63 * _Q1.f64[0];
      v284[0].f64[0] = v62 + v72.f64[0];
      v284[2].f64[0] = v62 + v73.f64[1];
      v284[2].f64[1] = vmuld_lane_f64(v63, _Q1, 1);
      goto LABEL_57;
    }
    *(double *)v11.i64 = __x * __x + _D2;
    v57 = sqrt(_D2);
    v242 = _D2;
    v69 = atan2(v57, __x);
    v281.f64[0] = 0.0;
    v59 = sub_20F0BA1B0((int64x2_t *)(v35 + 21), v281.f64, v69);
LABEL_54:
    v62 = v59 / v57;
    _Q1 = v279;
    v64 = vmulq_n_f64(v279, (v53 * (v281.f64[0] / *(double *)v11.i64) - v62) / v242);
    v63 = -(v281.f64[0] / *(double *)v11.i64);
    v65 = vextq_s8((int8x16_t)v64, (int8x16_t)v64, 8uLL).u64[0];
    goto LABEL_56;
  }
  if (v50 <= 1)
  {
    if (!v50)
    {
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    if (__x >= 0.00000001)
    {
      v275 = vmulq_n_f64(v279, 1.0 / __x);
      v284[0].f64[0] = 1.0 / __x;
      v284[1].f64[1] = 0.0;
      v284[0].f64[1] = 0.0;
      v284[1].f64[0] = v284[0].f64[0] * -(v279.f64[0] * v284[0].f64[0]);
      v284[2].f64[0] = 1.0 / __x;
      v284[2].f64[1] = v284[0].f64[0] * -(v279.f64[1] * v284[0].f64[0]);
      goto LABEL_57;
    }
    return 0;
  }
  if (v50 != 2)
  {
    v66 = __x;
    _Q1 = v279;
    _D0 = v279.f64[1];
    __asm { FMLA            D2, D0, V1.D[1] }
    if (_D2 >= 0.00000001)
    {
      *(double *)v11.i64 = __x * __x + _D2;
      v70 = sqrt(_D2);
      v243 = _D2;
      v71 = atan2(v70, __x);
      v281.f64[0] = 0.0;
      v62 = sub_20F0BA1B0((int64x2_t *)(v35 + 21), v281.f64, v71) / v70;
      _Q1 = v279;
      v64 = vmulq_n_f64(v279, (v66 * (v281.f64[0] / *(double *)v11.i64) - v62) / v243);
      v63 = -(v281.f64[0] / *(double *)v11.i64);
      v65 = vextq_s8((int8x16_t)v64, (int8x16_t)v64, 8uLL).u64[0];
    }
    else
    {
      v62 = 1.0 / __x;
      v63 = -(v62 * v62);
      v64.f64[0] = 0.0;
      v65 = 0;
    }
    goto LABEL_56;
  }
  v52 = (double *)(v35 + 21);
  if (!*((_DWORD *)v35 + 53))
  {
    if (!sub_20F0BA0C8(&v275, (uint64_t)v284, &v279, v52))
      return 0;
    goto LABEL_57;
  }
  v51 = sub_20FA1E060(&v275, (uint64_t)v284, &v279, v52, (float64x2_t *)v35 + 12);
LABEL_51:
  if ((v51 & 1) == 0)
    return 0;
LABEL_57:
  v74 = *((_DWORD *)v35 + 248);
  if (v74 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v74 = *((_DWORD *)v35 + 248);
  }
  if (!v74)
  {
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  *(_QWORD *)&v75.f64[0] = v35[2];
  *(_QWORD *)&v75.f64[1] = v35[5];
  v229 = *(double *)v35;
  v231 = v75;
  v221 = v284[0];
  v223 = v284[1].f64[0];
  v225 = *((double *)v35 + 4);
  v227 = v284[2].f64[1];
  v219 = *(float64x2_t *)((char *)&v284[1] + 8);
  v240 = v275;
  v241 = (float64x2_t)*v35;
  v76.f64[0] = 0.0;
  v76.f64[1] = v225;
  v244 = v76;
  if (!v258)
  {
    if (v33)
      goto LABEL_93;
    goto LABEL_69;
  }
  v276 = COERCE_DOUBLE(&v281);
  v277 = &v279;
  if (v74 != -1)
  {
    if (v74 <= 7)
      goto LABEL_64;
LABEL_72:
    if (v74 <= 0xB)
    {
      if (v74 <= 9)
      {
        if (v74 != 9)
          sub_20FBCF154();
        sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/LensModel.cpp", 852, (uint64_t)&unk_210254955, 0, (uint64_t)"not implemented yet. rdar://113779839", 37, (void (*)(void **))sub_21023DDB0);
        abort();
      }
      if (v74 == 10)
        sub_20FBCF154();
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/LensModel.cpp", 852, (uint64_t)&unk_210254955, 0, (uint64_t)"not implemented yet. rdar://113779839", 37, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    if (v74 > 0xD)
    {
      if (v74 == 14)
        sub_20FBCF154();
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/LensModel.cpp", 852, (uint64_t)&unk_210254955, 0, (uint64_t)"not implemented yet. rdar://113779839", 37, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    if (v74 == 13)
      sub_20EB43BB4();
    goto LABEL_91;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v74 = *((_DWORD *)v35 + 248);
  if (v74 > 7)
    goto LABEL_72;
LABEL_64:
  if (v74 <= 3)
  {
    if (v74 <= 1)
    {
      if (!v74)
      {
        sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
        abort();
      }
      v77 = v276;
      *(_OWORD *)(*(_QWORD *)&v276 + 32) = 0u;
      *(_OWORD *)(*(_QWORD *)&v77 + 48) = 0u;
      **(_OWORD **)&v77 = 0u;
      *(_OWORD *)(*(_QWORD *)&v77 + 16) = 0u;
      goto LABEL_92;
    }
    if (v74 == 2)
    {
      v81 = *(float64x2_t **)&v276;
      v82 = v277 + 1;
      _D2 = v277->f64[1];
      __asm { FMLA            D1, D2, V0.D[1] }
      *(double *)&v85 = _Q1.f64[0] * (_Q1.f64[0] * _Q1.f64[0]);
      _Q1.f64[1] = _Q1.f64[0] * _Q1.f64[0];
      v86 = vld1q_dup_f64(v82->f64);
      v87 = vdivq_f64(*v277, v86);
      **(_OWORD **)&v276 = vmulq_n_f64(_Q1, v87.f64[0]);
      v81[1] = vmulq_n_f64((float64x2_t)v85, v87.f64[0]);
      v81[2] = vmulq_laneq_f64(_Q1, v87, 1);
      v81[3] = vmulq_laneq_f64((float64x2_t)v85, v87, 1);
      goto LABEL_92;
    }
LABEL_91:
    sub_20FBCEF64((float64x2_t **)&v276);
    goto LABEL_92;
  }
  if (v74 <= 5)
    goto LABEL_91;
  if (v74 == 6)
    sub_20EB42068();
  sub_20EB34694((uint64_t)v35, *(float64x2_t **)&v276, v277);
LABEL_92:
  v213 = vmlaq_laneq_f64(vmulq_laneq_f64(v241, v281, 1), v244, v282[1], 1);
  v214 = vmlaq_n_f64(vmulq_n_f64(v241, v281.f64[0]), v244, v282[1].f64[0]);
  v76 = vmlaq_laneq_f64(vmulq_laneq_f64(v241, v282[0], 1), v244, v283, 1);
  v211 = vmlaq_n_f64(vmulq_n_f64(v241, v282[0].f64[0]), v244, v283.f64[0]);
  v212 = v76;
  if (v33)
  {
LABEL_93:
    v88 = *((_DWORD *)v35 + 248);
    if (v88 == -1)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v88 = *((_DWORD *)v35 + 248);
      if (v88 <= 7)
        goto LABEL_95;
    }
    else if (v88 <= 7)
    {
LABEL_95:
      if (v88 <= 3)
      {
        if (v88 <= 1)
        {
          if (!v88)
          {
            sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
            abort();
          }
          v78 = v33;
          memset(v282, 0, sizeof(v282));
          v281 = 0u;
          if (__x >= 0.00000001)
            v284[2].f64[0] = 1.0 / __x;
          goto LABEL_136;
        }
        memset(v282, 0, sizeof(v282));
        v281 = 0u;
        if (v88 != 2)
        {
          v78 = v33;
          _V1.D[1] = v279.f64[1];
          _D2 = v279.f64[1];
          __asm { FMLA            D0, D2, V1.D[1] }
          if (_D0 >= 0.00000001)
          {
            v107 = atan2(sqrt(_D0), __x);
            v276 = 0.0;
            sub_20F0BA1B0((int64x2_t *)(v35 + 21), &v276, v107);
          }
          goto LABEL_136;
        }
        v89 = (double *)(v35 + 21);
        if (*((_DWORD *)v35 + 53))
          sub_20FA1E060(&v275, (uint64_t)v284, &v279, v89, (float64x2_t *)v35 + 12);
        else
          sub_20F0BA0C8(&v275, (uint64_t)v284, &v279, v89);
        goto LABEL_135;
      }
      if (v88 > 5)
      {
        if (v88 == 6)
          sub_20EB41F64((float64x2_t *)v35, &v275, v284[0].f64, v279.f64, &v281);
        else
          sub_20EB3345C((uint64_t)v35, &v275, (uint64_t)v284, &v279, (uint64_t)&v281);
        goto LABEL_135;
      }
      memset(v282, 0, sizeof(v282));
      v281 = 0u;
      if (v88 == 5)
      {
        sub_20EB29218(v275.f64, (uint64_t)v284, &v279, (int64x2_t *)(v35 + 21));
        goto LABEL_135;
      }
      v90 = __x;
      _Q0 = v279;
      _D1 = v279.f64[1];
      __asm { FMLA            D2, D1, V0.D[1] }
      v78 = v33;
      if (_D2 < 0.00000001)
      {
LABEL_125:
        v100 = 1.0 / v90;
        v101 = -(v100 * v100);
        v102.f64[0] = 0.0;
        v103 = 0;
LABEL_133:
        *(_QWORD *)&v102.f64[1] = v103;
        v110 = vmulq_n_f64(v102, _Q0.f64[0]);
        v111 = vmulq_laneq_f64(v102, _Q0, 1);
        v284[0] = v110;
        v284[1].f64[1] = v111.f64[0];
        v284[1].f64[0] = v101 * _Q0.f64[0];
        v284[2].f64[0] = v100 + v111.f64[1];
        v284[2].f64[1] = vmuld_lane_f64(v101, _Q0, 1);
        goto LABEL_136;
      }
      v94 = __x * __x + _D2;
      v95 = sqrt(_D2);
      v218 = _D2;
      v108 = atan2(v95, __x);
      v276 = 0.0;
      v97 = sub_20F0BA1B0((int64x2_t *)(v35 + 21), &v276, v108);
LABEL_132:
      v100 = v97 / v95;
      v109 = (v90 * (v276 / v94) - v97 / v95) / v218;
      _Q0 = v279;
      v102 = vmulq_n_f64(v279, v109);
      v101 = -(v276 / v94);
      v103 = vextq_s8((int8x16_t)v102, (int8x16_t)v102, 8uLL).u64[0];
      goto LABEL_133;
    }
    if (v88 > 0xB)
    {
      if (v88 > 0xD)
      {
        if (v88 == 14)
        {
          memset(v282, 0, sizeof(v282));
          v281 = 0u;
          sub_20EB2498C(&v275, (uint64_t)v284, 0, (uint64_t)&v279, (double *)v35 + 21, (*(double *)v35 + *((double *)v35 + 4)) * 0.5);
        }
        else
        {
          sub_20EB3F050((uint64_t)v35, &v275, (uint64_t)v284, &v279, (uint64_t)&v281);
        }
        goto LABEL_135;
      }
      if (v88 == 13)
      {
        sub_20EB439AC((double *)v35, &v275, (uint64_t)v284, &v279, &v281);
        goto LABEL_135;
      }
      v78 = v33;
      memset(v282, 0, sizeof(v282));
      v281 = 0u;
      memset(v284, 0, sizeof(v284));
LABEL_136:
      v80 = v241;
      v79 = v244;
      v11 = (int8x16_t)vmlaq_n_f64(vmulq_n_f64(v241, v281.f64[0]), v244, v282[0].f64[1]);
      v12 = (int8x16_t)vmlaq_laneq_f64(vmulq_laneq_f64(v241, v281, 1), v244, *(float64x2_t *)((char *)v282 + 8), 1);
      v13 = (int8x16_t)vmlaq_n_f64(vmulq_n_f64(v241, v282[0].f64[0]), v244, v282[1].f64[1]);
      *(_QWORD *)&v216 = vextq_s8(v11, v11, 8uLL).u64[0];
      *(_QWORD *)&v217 = vextq_s8(v12, v12, 8uLL).u64[0];
      *(_QWORD *)&v215 = vextq_s8(v13, v13, 8uLL).u64[0];
      goto LABEL_137;
    }
    if (v88 > 9)
    {
      if (v88 == 10)
      {
        memset(v282, 0, sizeof(v282));
        v281 = 0u;
        sub_20EB2450C(&v275, (uint64_t)v284, 0, (uint64_t)&v279, (double *)v35 + 21, (*(double *)v35 + *((double *)v35 + 4)) * 0.5);
      }
      else
      {
        sub_20EB3AF98((uint64_t)v35, &v275, (uint64_t)v284, &v279, (uint64_t)&v281);
      }
      goto LABEL_135;
    }
    if (v88 == 9)
    {
      sub_20EB372E0((uint64_t)v35, &v275, (uint64_t)v284, &v279, (uint64_t)&v281);
LABEL_135:
      v78 = v33;
      goto LABEL_136;
    }
    memset(v282, 0, sizeof(v282));
    v281 = 0u;
    v90 = __x;
    _Q0 = v279;
    _D1 = v279.f64[1];
    __asm { FMLA            D2, D1, V0.D[1] }
    v78 = v33;
    if (_D2 < 0.00000001)
      goto LABEL_125;
    v94 = __x * __x + _D2;
    v95 = sqrt(_D2);
    v218 = _D2;
    v96 = atan2(v95, __x);
    v276 = 0.0;
    v97 = sub_20F0BA21C((double *)v35 + 21, &v276, v96);
    goto LABEL_132;
  }
LABEL_69:
  v78 = v33;
  v216 = v76.f64[0];
  v217 = v76.f64[0];
  v215 = v76.f64[0];
  v80 = v241;
  v79 = v244;
LABEL_137:
  _D5 = v254;
  _V18.D[1] = v248.f64[1];
  v114 = vmlaq_laneq_f64(vmulq_n_f64(v253, v248.f64[0]), v260, v248, 1);
  __asm { FMLA            D0, D5, V18.D[1] }
  v116 = _D0 + v39 * *(double *)v259.i64;
  _V16.D[1] = v252.f64[1];
  v118 = vmulq_n_f64(v253, v252.f64[0]);
  __asm { FMLA            D9, D5, V16.D[1] }
  v120.f64[0] = v229;
  v120.f64[1] = v225;
  v121 = vmlaq_f64(v231, v120, v240);
  v122 = vmlaq_n_f64(vmulq_n_f64(v80, v221.f64[0]), v79, v219.f64[0]);
  v123 = vmlaq_laneq_f64(vmulq_laneq_f64(v80, v221, 1), v79, v219, 1);
  v124 = vmlaq_n_f64(vmulq_n_f64(v80, v223), v79, v227);
  v125 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v122, v248.f64[0]), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v252.f64[0], 0), v123), (float64x2_t)vdupq_lane_s64(v257.i64[0], 0), v124);
  v126 = vmlaq_f64(vmlaq_f64(vmulq_laneq_f64(v122, v248, 1), (float64x2_t)vdupq_laneq_s64((int64x2_t)v252, 1), v123), (float64x2_t)vdupq_laneq_s64(v257, 1), v124);
  v245 = v122;
  v249 = v123;
  v250 = v124;
  v127 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v122, *(double *)v259.i64), (float64x2_t)vdupq_lane_s64(v255.i64[0], 0), v123), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v256.f64[0], 0), v124);
  v128 = vsubq_f64(v121, *(float64x2_t *)(a1 + 8));
  _Q28 = (int8x16_t)vmulq_n_f64(v128, 1.0 / v34);
  if (!v251)
    goto LABEL_140;
  _D1 = vmuld_lane_f64(1.0 / v34, v128, 1);
  __asm { FMLA            D0, D1, V28.D[1] }
  if (_D0 >= 0.00000000999999994)
  {
    v230 = v118;
    v226 = v116;
    v228 = v114;
    v222 = v125;
    v224 = v126;
    v220 = v127;
    v210 = (float64x2_t)_Q28;
    v208 = _D0;
    v209 = _D1;
    v132 = log1p(_D0);
    v127 = v220;
    v125 = v222;
    v126 = v224;
    v116 = v226;
    v114 = v228;
    v118 = v230;
    v133.f64[0] = 0.0;
    v133.f64[1] = sqrt(v132 / v208);
    v134 = vmulq_n_f64(v210, (1.0 - (v132 + v132 / v208)) / (v208 * ((v208 + 1.0) * v133.f64[1])));
    v135 = vmulq_n_f64(vmlaq_n_f64((float64x2_t)*(unint64_t *)&v133.f64[1], v134, v210.f64[0]), 1.0 / v34);
    v136 = vmulq_n_f64(vmlaq_n_f64(v133, v134, v209), 1.0 / v34);
    _Q28 = (int8x16_t)vmulq_n_f64(v210, v133.f64[1]);
  }
  else
  {
LABEL_140:
    v136.f64[0] = 0.0;
    v136.f64[1] = 1.0 / v34;
    v135.f64[1] = 0.0;
    v135.f64[0] = 1.0 / v34;
  }
  v137 = vmlaq_n_f64(v114, v261, *(double *)v259.i64);
  v138 = vmlaq_laneq_f64(v118, v260, v252, 1);
  _V31.D[1] = *(double *)&v257.i64[1];
  v140 = vmulq_n_f64(v253, *(double *)v257.i64);
  _D2 = v254;
  __asm { FMLA            D8, D2, V31.D[1] }
  v143 = (float64x2_t)xmmword_2102DD520;
  v144 = (float64x2_t)xmmword_21030D320;
  v145 = vnegq_f64(v135);
  v146 = vmulq_n_f64(v145, v125.f64[0]);
  v147 = vmulq_n_f64(v145, v126.f64[0]);
  v148 = vmulq_n_f64(v145, v127.f64[0]);
  if (v247)
  {
    v149.f64[0] = 0.0;
    v149.f64[1] = v240.f64[1];
    *v232 = vmlaq_laneq_f64(vmulq_n_f64(v135, v240.f64[0]), v136, (float64x2_t)*(unint64_t *)&v240.f64[0], 1);
    v281 = vmlaq_laneq_f64(vmulq_n_f64(v135, 0.0), v136, v149, 1);
    v284[0] = vmlaq_laneq_f64(vmulq_n_f64(v135, 1.0), v136, (float64x2_t)xmmword_21030D320, 1);
    v279 = vmlaq_laneq_f64(vmulq_n_f64(v135, 0.0), v136, (float64x2_t)xmmword_2102DD520, 1);
  }
  v150 = vmlaq_n_f64(v138, v261, *(double *)v255.i64);
  v151 = vmlaq_laneq_f64(v140, v260, (float64x2_t)v257, 1);
  v152 = _D8 + v39 * v256.f64[0];
  v153 = vmulq_n_f64(v245, v137.f64[0]);
  v154 = vmulq_laneq_f64(v245, v137, 1);
  v155 = vmulq_n_f64(v245, v116);
  v156 = vmlsq_laneq_f64(v146, v136, v125, 1);
  v157 = vextq_s8(_Q28, (int8x16_t)v136, 1uLL);
  v158 = vmlsq_laneq_f64(v147, v136, v126, 1);
  v159 = vmlsq_laneq_f64(v148, v136, v127, 1);
  if (v30 > 0.0)
  {
    v163 = vmulq_laneq_f64(v156, v263, 1);
    v164 = vmulq_n_f64(v156, v264);
    v156 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v156, v263.f64[0]), v158, v265.f64[0]), v159, v267.f64[0]);
    v165 = (int8x16_t)vmlaq_laneq_f64(vmlaq_laneq_f64(v163, v158, v265, 1), v159, v267, 1);
    v166 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(v164, v158, v266), v159, v268);
    v161 = vextq_s8(v165, v165, 8uLL).u64[0];
    v162 = vextq_s8((int8x16_t)v156, (int8x16_t)v156, 8uLL).u64[0];
    v160 = vextq_s8(v166, v166, 8uLL).u64[0];
    *(_QWORD *)&v158.f64[0] = v165.i64[0];
    *(_QWORD *)&v159.f64[0] = v166.i64[0];
  }
  else
  {
    v160 = vextq_s8((int8x16_t)v159, (int8x16_t)v159, 8uLL).u64[0];
    v161 = vextq_s8((int8x16_t)v158, (int8x16_t)v158, 8uLL).u64[0];
    v162 = vextq_s8((int8x16_t)v156, (int8x16_t)v156, 8uLL).u64[0];
  }
  v167 = vmlaq_n_f64(v151, v261, v256.f64[0]);
  v168 = vmlaq_n_f64(v153, v249, v150.f64[0]);
  v169 = vmlaq_laneq_f64(v154, v249, v150, 1);
  *(_BYTE *)a3 = _Q28.i8[0];
  v170 = vmlaq_n_f64(v155, v249, _D9 + v39 * *(double *)v255.i64);
  *(_BYTE *)(a3 + 15) = v157.i8[14];
  *(_WORD *)(a3 + 13) = v157.i16[6];
  *(_DWORD *)(a3 + 9) = v157.i32[2];
  *(_QWORD *)(a3 + 1) = v157.i64[0];
  if (!v246)
  {
    a4[4] = 0u;
    a4[5] = 0u;
    a4[2] = 0u;
    a4[3] = 0u;
    *a4 = 0u;
    a4[1] = 0u;
    v176 = vmlaq_n_f64(v168, v250, v167.f64[0]);
    v177 = vmlaq_laneq_f64(v169, v250, v167, 1);
    v178 = vmlaq_n_f64(v170, v250, v152);
    if (!*(_BYTE *)(v20 + 20))
      goto LABEL_152;
    goto LABEL_151;
  }
  v171 = vnegq_f64(v234);
  v172 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_f64(v245, (float64x2_t)0), v249, v233), v250, v171, 1);
  v173 = vmlaq_n_f64(vmlaq_f64(vmulq_n_f64(v245, vnegq_f64((float64x2_t)*(unint64_t *)&v233).f64[0]), (float64x2_t)0, v249), v250, v234.f64[0]);
  v174 = vmlaq_f64(vmlaq_n_f64(vmulq_laneq_f64(v245, v234, 1), v249, v171.f64[0]), (float64x2_t)0, v250);
  *a4 = vmlaq_laneq_f64(vmulq_n_f64(v135, v172.f64[0]), v136, v172, 1);
  a4[1] = vmlaq_laneq_f64(vmulq_n_f64(v135, v173.f64[0]), v136, v173, 1);
  a4[2] = vmlaq_laneq_f64(vmulq_n_f64(v135, v174.f64[0]), v136, v174, 1);
  v175 = a4 + 3;
  if (*(_BYTE *)(v19 + 128))
  {
    *(_QWORD *)&v156.f64[1] = v162;
    *(_QWORD *)&v158.f64[1] = v161;
    *v175 = v156;
    a4[4] = v158;
    *(_QWORD *)&v159.f64[1] = v160;
    a4[5] = v159;
    v176 = vmlaq_n_f64(v168, v250, v167.f64[0]);
    v177 = vmlaq_laneq_f64(v169, v250, v167, 1);
    v178 = vmlaq_n_f64(v170, v250, v152);
    if (!*(_BYTE *)(v20 + 20))
      goto LABEL_152;
LABEL_151:
    v179 = (float64x2_t)vextq_s8((int8x16_t)v257, v259, 8uLL);
    v180 = (int8x16_t)vmlsq_laneq_f64(vmulq_n_f64(v236, v238.f64[0]), v235, v239, 1);
    v181 = (int8x16_t)vmlsq_lane_f64(vmulq_n_f64((float64x2_t)vextq_s8((int8x16_t)v179, v255, 8uLL), v239.f64[0]), v237, v238.f64[0], 0);
    v182 = (int8x16_t)vmlsq_lane_f64(vmulq_laneq_f64(v237, v239, 1), v236, v239.f64[0], 0);
    v183 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v245, *(double *)v180.i64), v249, *(double *)vextq_s8(v180, v180, 8uLL).i64), v250, vmlsq_laneq_f64(vmulq_f64(v179, v238), v256, v239, 1).f64[0]);
    v184 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v245, *(double *)v181.i64), v249, *(double *)vextq_s8(v181, v181, 8uLL).i64), v250, vmlsq_f64(vmulq_n_f64(v239, v256.f64[0]), (float64x2_t)v257, v238).f64[0]);
    v185 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v245, *(double *)v182.i64), v249, *(double *)vextq_s8(v182, v182, 8uLL).i64), v250, vmlsq_laneq_f64(vmulq_laneq_f64((float64x2_t)v257, v239, 1), v239, (float64x2_t)v257, 1).f64[0]);
    a4[6] = vmlaq_laneq_f64(vmulq_n_f64(v135, v183.f64[0]), v136, v183, 1);
    a4[7] = vmlaq_laneq_f64(vmulq_n_f64(v135, v184.f64[0]), v136, v184, 1);
    a4[8] = vmlaq_laneq_f64(vmulq_n_f64(v135, v185.f64[0]), v136, v185, 1);
    a4[9] = vmlsq_laneq_f64(vmulq_n_f64(v145, v176.f64[0]), v136, v176, 1);
    a4[10] = vmlsq_laneq_f64(vmulq_n_f64(v145, v177.f64[0]), v136, v177, 1);
    a4[11] = vmlsq_laneq_f64(vmulq_n_f64(v145, v178.f64[0]), v136, v178, 1);
    goto LABEL_152;
  }
  a4[4] = 0u;
  a4[5] = 0u;
  *v175 = 0u;
  v176 = vmlaq_n_f64(v168, v250, v167.f64[0]);
  v177 = vmlaq_laneq_f64(v169, v250, v167, 1);
  v178 = vmlaq_n_f64(v170, v250, v152);
  if (*(_BYTE *)(v20 + 20))
    goto LABEL_151;
LABEL_152:
  if (*(_BYTE *)(v22 + 20))
  {
    a4[23] = vmlaq_laneq_f64(vmulq_n_f64(v135, v176.f64[0]), v136, v176, 1);
    a4[24] = vmlaq_laneq_f64(vmulq_n_f64(v135, v177.f64[0]), v136, v177, 1);
    a4[25] = vmlaq_laneq_f64(vmulq_n_f64(v135, v178.f64[0]), v136, v178, 1);
  }
  if (!*(_BYTE *)(v262 + 144))
  {
    a4[14] = 0u;
    a4[15] = 0u;
    a4[12] = 0u;
    a4[13] = 0u;
LABEL_159:
    if (!v258)
      goto LABEL_161;
    goto LABEL_160;
  }
  if (!v247)
    goto LABEL_159;
  v186 = *(_QWORD *)(v262 + 24);
  if (*(_BYTE *)(v186 + 40))
  {
    __asm { FMOV            V5.2D, #1.0 }
    _Q5.f64[0] = *(float64_t *)(v186 + 32);
    v188 = 0uLL;
    v189 = 0uLL;
    v190 = 0uLL;
    v191 = 0uLL;
    v192 = 0uLL;
  }
  else
  {
    v192 = (float64x2_t)xmmword_2103BBE60;
    v143 = (float64x2_t)unk_2103BBE70;
    v191 = (float64x2_t)xmmword_2103BBE40;
    v144 = (float64x2_t)unk_2103BBE50;
    _Q5 = (float64x2_t)xmmword_2103BBE20;
    v190 = (float64x2_t)unk_2103BBE30;
    v188 = (float64x2_t)xmmword_2103BBE00;
    v189 = *(float64x2_t *)algn_2103BBE10;
  }
  v203 = v279;
  v204 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v278, v188.f64[0]), v281, v188, 1), v284[0], v189.f64[0]), v279, v189, 1);
  v205 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v278, _Q5.f64[0]), v281, _Q5, 1), v284[0], v190.f64[0]), v279, v190, 1);
  v206 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v278, v191.f64[0]), v281, v191, 1), v284[0], v144.f64[0]), v279, v144, 1);
  v207 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v278, v192.f64[0]), v281, v192, 1), v284[0], v143.f64[0]);
  a4[12] = v204;
  a4[13] = v205;
  a4[14] = v206;
  a4[15] = vmlaq_laneq_f64(v207, v203, v143, 1);
  if (v258)
  {
LABEL_160:
    a4[16] = vmlaq_laneq_f64(vmulq_n_f64(v135, v214.f64[0]), v136, v214, 1);
    a4[17] = vmlaq_laneq_f64(vmulq_n_f64(v135, v213.f64[0]), v136, v213, 1);
    a4[18] = vmlaq_laneq_f64(vmulq_n_f64(v135, v211.f64[0]), v136, v211, 1);
    a4[19] = vmlaq_laneq_f64(vmulq_n_f64(v135, v212.f64[0]), v136, v212, 1);
  }
LABEL_161:
  v193 = a4 + 20;
  if (v78)
  {
    v194 = (int8x16_t)vmlaq_n_f64(vmulq_n_f64(v135, *(double *)v11.i64), v136, v216);
    v195 = (int8x16_t)vmlaq_n_f64(vmulq_n_f64(v135, *(double *)v12.i64), v136, v217);
    v196 = (int8x16_t)vmlaq_n_f64(vmulq_n_f64(v135, *(double *)v13.i64), v136, v215);
    v194.i64[1] = vextq_s8(v194, v194, 8uLL).u64[0];
    v195.i64[1] = vextq_s8(v195, v195, 8uLL).u64[0];
    *v193 = (float64x2_t)v194;
    a4[21] = (float64x2_t)v195;
    v196.i64[1] = vextq_s8(v196, v196, 8uLL).u64[0];
    a4[22] = (float64x2_t)v196;
  }
  if (*(_BYTE *)(*a2 + 20))
  {
    v197 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vmulq_f64(*a4, *a4), vmulq_f64(a4[4], a4[4])), vmulq_f64(a4[2], a4[2])), vmaxnmq_f64(vmaxnmq_f64(vmulq_f64(a4[1], a4[1]), vmulq_f64(a4[5], a4[5])), vmulq_f64(a4[3], a4[3])))) < 1.0e12;
    if (*(_BYTE *)(a2[1] + 20))
LABEL_165:
      v197 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vmulq_f64(a4[6], a4[6]), vmulq_f64(a4[10], a4[10])), vmulq_f64(a4[8], a4[8])), vmaxnmq_f64(vmaxnmq_f64(vmulq_f64(a4[7], a4[7]), vmulq_f64(a4[11], a4[11])), vmulq_f64(a4[9], a4[9])))) < 1.0e12&& v197;
  }
  else
  {
    v197 = 1;
    if (*(_BYTE *)(a2[1] + 20))
      goto LABEL_165;
  }
  if (*(_BYTE *)(a2[2] + 20))
    v197 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmulq_f64(a4[12], a4[12]), vmulq_f64(a4[14], a4[14])), vmaxnmq_f64(vmulq_f64(a4[13], a4[13]), vmulq_f64(a4[15], a4[15])))) < 1.0e12&& v197;
  if (*(_BYTE *)(a2[3] + 20))
    v197 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmulq_f64(a4[16], a4[16]), vmulq_f64(a4[18], a4[18])), vmaxnmq_f64(vmulq_f64(a4[17], a4[17]), vmulq_f64(a4[19], a4[19])))) < 1.0e12&& v197;
  if (*(_BYTE *)(a2[4] + 20))
    v197 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmulq_f64(*v193, *v193), vmulq_f64(a4[22], a4[22])), vmulq_f64(a4[21], a4[21]))) < 1.0e12
        && v197;
  if (*(_BYTE *)(a2[5] + 20))
    return vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmulq_f64(a4[23], a4[23]), vmulq_f64(a4[25], a4[25])), vmulq_f64(a4[24], a4[24]))) < 1.0e12
        && v197;
  return v197;
}

uint64_t sub_20FC79C54(uint64_t a1, uint64_t *a2, uint64_t a3, double a4, double a5, double a6, double a7, float64x2_t _Q4, double a9, double a10, float64x2_t a11)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  float64x2_t v20;
  __int128 v21;
  __int128 v22;
  __n128 v23;
  float64x2_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  double v31;
  float64x2_t v32;
  __n128 v33;
  int v34;
  double v35;
  const double *v36;
  double v38;
  float64x2_t v44;
  float64x2_t v46;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  unsigned int v52;
  unsigned int v53;
  char v54;
  double v55;
  double v56;
  double v58;
  double v61;
  float64x2_t v65;
  float64x2_t v66;
  double v67;
  double v68;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  int v77;
  int v78;
  float64x2_t v79;
  float64x2_t v80;
  double v82;
  double v84;
  int v85;
  double v86;
  int v87;
  double v88;
  double v89;
  double v90;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  int v98;
  int v99;
  double v100;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  int v109;
  int v110;
  double v111;
  double v112;
  double v113;
  double v114;
  float64x2_t v115;
  BOOL v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  BOOL v122;
  float64x2_t v123;
  double v124;
  double v126;
  int v127;
  double v128;
  int v129;
  double v130;
  float64x2_t v131;
  BOOL v132;
  float64x2_t v133;
  double v134;
  double v136;
  int v137;
  double v138;
  int v139;
  double v140;
  float64x2_t v141;
  double v143;
  float64x2_t v144;
  double v145;
  float64x2_t v146;
  int8x16_t v150;
  float64x2_t v151;
  int64x2_t v152;
  _BYTE v153[32];
  __int128 v154;
  double v155;
  float64x2_t v156;
  float64_t v157;
  float64x2_t v158;
  _BYTE v159[32];
  float64x2_t v160;
  double v161;
  float64x2_t v162;
  unint64_t v163;
  float64x2_t v164;
  double v165;
  float64x2_t v166;
  uint64_t v167;
  float64x2x3_t v168;

  v167 = *MEMORY[0x24BDAC8D0];
  v14 = *a2;
  v13 = a2[1];
  v16 = a2[2];
  v15 = a2[3];
  v17 = a2[10];
  v18 = *(_QWORD *)(v17 + 24);
  if (*(_BYTE *)(v18 + 58) && !*(_BYTE *)(v18 + 57))
    return 0;
  v19 = *(_OWORD *)(v14 + 48);
  v20 = *(float64x2_t *)(v14 + 80);
  *(_OWORD *)&v159[16] = *(_OWORD *)(v14 + 64);
  v160 = v20;
  v161 = *(double *)(v14 + 96);
  v158 = *(float64x2_t *)(v14 + 32);
  *(_OWORD *)v159 = v19;
  v162 = *(float64x2_t *)(v14 + 104);
  v163 = *(_QWORD *)(v14 + 120);
  v21 = *(_OWORD *)(v13 + 48);
  v22 = *(_OWORD *)(v13 + 80);
  *(_OWORD *)&v153[16] = *(_OWORD *)(v13 + 64);
  v154 = v22;
  v155 = *(double *)(v13 + 96);
  v23 = *(__n128 *)(v13 + 32);
  v152 = (int64x2_t)v23;
  *(_OWORD *)v153 = v21;
  v24 = *(float64x2_t *)(v13 + 104);
  v156 = v24;
  v157 = *(double *)(v13 + 120);
  v25 = *(_QWORD *)(a1 + 32);
  if (*(double *)(v25 + 1424) > 0.0)
  {
    v26 = *(_QWORD *)(v18 + 96);
    if (v26)
    {
      v27 = *(_QWORD *)(v26 + 64);
      v23.n128_u64[0] = *(_QWORD *)(v27 + 1424);
      v24.f64[0] = 0.0;
      if (v23.n128_f64[0] <= 0.0)
      {
LABEL_7:
        v28 = *(_QWORD *)(a1 + 32);
        v29 = *(double *)(a1 + 16);
        v30 = *(double *)(v28 + 1432);
        v31 = *(double *)(v28 + 1424);
        sub_20FC7D4B0(v16 + 136, v16 + 160, &v158, 0, v24, v23);
        v32.f64[0] = (v29 - v30) * v31;
        sub_20FC7D4B0(v15 + 136, v15 + 160, (float64x2_t *)&v152, 0, v32, v33);
        v18 = *(_QWORD *)(v17 + 24);
        v25 = *(_QWORD *)(a1 + 32);
        goto LABEL_8;
      }
    }
    else
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioanchoredpoint3d.hpp", 63, (uint64_t)"this->anchor_kf_pose_", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v27 = *(_QWORD *)(*(_QWORD *)(v18 + 96) + 64);
      v23.n128_u64[0] = *(_QWORD *)(v27 + 1424);
      v24.f64[0] = 0.0;
      if (v23.n128_f64[0] <= 0.0)
        goto LABEL_7;
    }
    v24.f64[0] = v23.n128_f64[0] * (*(double *)(v18 + 88) - *(double *)(v27 + 1432));
    goto LABEL_7;
  }
LABEL_8:
  v34 = *(unsigned __int8 *)(v18 + 56);
  v35 = *(double *)(a1 + 40);
  v24.f64[0] = *(float64_t *)(v17 + 32);
  v36 = (const double *)(v15 + 32);
  v23.n128_u64[0] = *(_QWORD *)(v18 + 80);
  _Q2 = *(float64x2_t *)(v18 + 64);
  *(_QWORD *)&v38 = *(_OWORD *)&vmulq_f64(v24, (float64x2_t)v23);
  _Q0 = vmulq_n_f64(_Q2, v24.f64[0]);
  _Q4.f64[0] = *(float64_t *)&v159[24];
  __asm { FMLA            D2, D4, V0.D[1] }
  *(_QWORD *)&_Q4.f64[0] = v163;
  _Q2.f64[0] = vmlad_n_f64(_Q2.f64[0], v161, v38);
  _D5 = *(_QWORD *)(v16 + 72);
  v44 = vaddq_f64(_Q2, _Q4);
  _Q3 = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v158, _Q0.f64[0]), *(float64x2_t *)&v159[8], _Q0, 1), v160, v38), v162);
  v46 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v16 + 32), _Q3.f64[0]), *(float64x2_t *)(v16 + 56), _Q3, 1), *(float64x2_t *)(v16 + 80), v44.f64[0]);
  __asm { FMLA            D0, D5, V3.D[1] }
  _Q0.f64[0] = vmlad_n_f64(_Q0.f64[0], *(double *)(v16 + 96), v44.f64[0]);
  v44.f64[0] = *(float64_t *)(v16 + 120);
  v168 = vld3q_f64(v36);
  _Q6 = *(float64x2_t *)(v15 + 80);
  a11.f64[0] = *(float64_t *)(v15 + 120);
  *(_QWORD *)&_Q0.f64[0] = *(_OWORD *)&vsubq_f64(vaddq_f64(v44, _Q0), a11);
  _Q1 = vsubq_f64(vaddq_f64(*(float64x2_t *)(v16 + 104), v46), *(float64x2_t *)(v15 + 104));
  v49 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v168.val[0], _Q1.f64[0]), v168.val[1], _Q1, 1), v168.val[2], _Q0.f64[0]);
  v168.val[0] = vmulq_f64(_Q6, _Q1);
  _Q1.f64[0] = _Q1.f64[1];
  __asm { FMLA            D3, D1, V6.D[1] }
  v168.val[0].f64[0] = vmlad_n_f64(v168.val[0].f64[0], *(double *)(v15 + 96), _Q0.f64[0]);
  _Q0.f64[0] = *(float64_t *)v153;
  v168.val[2].f64[1] = *((float64_t *)&v154 + 1);
  _Q6.f64[0] = v157;
  *(_QWORD *)&v168.val[0].f64[0] = *(_OWORD *)&vsubq_f64(v168.val[0], _Q6);
  v50 = vsubq_f64(v49, v156);
  _Q0.f64[1] = *(float64_t *)&v153[24];
  v51 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v152, *(int64x2_t *)&v153[8]), v50.f64[0]), (float64x2_t)vzip2q_s64(v152, *(int64x2_t *)&v153[8]), v50, 1), _Q0, v168.val[0].f64[0]);
  _Q1.f64[0] = v50.f64[1];
  __asm { FMLA            D0, D1, V5.D[1] }
  v164 = v51;
  v165 = vmlad_n_f64(_Q0.f64[0], v155, v168.val[0].f64[0]);
  v52 = *(_DWORD *)(v25 + 992);
  if (v52 != -1)
  {
    if (v52 <= 7)
      goto LABEL_10;
LABEL_18:
    if (v52 > 0xB)
    {
      if (v52 <= 0xD)
      {
        if (v52 != 13 || v165 < 0.00000001)
          return 0;
        _Q0 = vdivq_f64(v164, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v165, 0));
        v58 = (*(double *)v25 + *(double *)(v25 + 32)) * 0.5;
        _D3 = _Q0.f64[1];
        __asm { FMLA            D2, D3, V0.D[1] }
        v61 = v58 * (_D2 * v58);
        v166 = vdivq_f64(_Q0, (float64x2_t)vdupq_lane_s64(COERCE__INT64(v61* (*(double *)(v25 + 168)+ v58 * *(double *)(v25 + 224)+ v61* (*(double *)(v25 + 176)+ v58 * *(double *)(v25 + 232)+ v61* (*(double *)(v25 + 184)+ v58 * *(double *)(v25 + 240)+ v61* (*(double *)(v25 + 192)+ v58 * *(double *)(v25 + 248)+ v61* (*(double *)(v25 + 200)+ v58 * *(double *)(v25 + 256)+ v61
                                     * (*(double *)(v25 + 208)
                                      + v58 * *(double *)(v25 + 264)
                                      + v61 * (*(double *)(v25 + 216) + *(double *)(v25 + 272) * v58 + v61 * 0.0)))))))
                                / 100.0
                                + 1.0),
                                0));
        v53 = *(_DWORD *)(v25 + 992);
        if (v53 != -1)
          goto LABEL_115;
LABEL_184:
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v53 = *(_DWORD *)(v25 + 992);
        if (v53 > 7)
        {
LABEL_186:
          v115.f64[0] = v166.f64[0];
          if (v53 <= 0xB)
          {
            v116 = v53 == 9;
            if (v53 <= 9)
            {
LABEL_188:
              if (!v116)
              {
                v113 = v166.f64[1];
                goto LABEL_192;
              }
            }
          }
LABEL_190:
          v112 = *(double *)(v25 + 8);
          v114 = *(double *)v25 * v115.f64[0];
          v113 = v166.f64[1];
LABEL_191:
          v145 = v112 * v113;
LABEL_193:
          v117 = v114 + v145;
          goto LABEL_194;
        }
LABEL_116:
        if (v53 > 3)
        {
          v115.f64[0] = v166.f64[0];
          v116 = v53 == 5;
          if (v53 <= 5)
            goto LABEL_188;
          goto LABEL_190;
        }
        if (v53 <= 1)
        {
          if (!v53)
          {
            sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
            abort();
          }
          v112 = *(double *)(v25 + 8);
          v113 = v166.f64[1];
          v114 = *(double *)v25 * v166.f64[0];
          goto LABEL_191;
        }
        v65 = v166;
        if (v53 == 2)
          goto LABEL_123;
LABEL_176:
        v113 = v65.f64[1];
        v117 = *(double *)v25 * v65.f64[0] + vmuld_lane_f64(*(double *)(v25 + 8), v65, 1);
        goto LABEL_194;
      }
      if (v52 == 14)
        v54 = sub_20EB247C0(&v166, (uint64_t)&v164, (double *)(v25 + 168), (*(double *)v25 + *(double *)(v25 + 32)) * 0.5);
      else
        v54 = sub_20EB3E39C(v25, &v166, &v164);
    }
    else if (v52 > 9)
    {
      if (v52 == 10)
        v54 = sub_20EB24288(&v166, (uint64_t)&v164, (double *)(v25 + 168), (*(double *)v25 + *(double *)(v25 + 32)) * 0.5);
      else
        v54 = sub_20EB3A2E4(v25, &v166, &v164);
    }
    else
    {
      if (v52 != 9)
      {
        v68 = v165;
        _Q0 = v164;
        _D1 = v164.f64[1];
        __asm { FMLA            D16, D1, V0.D[1] }
        v72 = sqrt(_D16);
        v73 = fabs(v165);
        v74 = fabs(v72);
        v75 = v73 / v74;
        if (v73 >= v74)
          v75 = v74 / v73;
        v76 = (v74 - v73) / (v73 + v74);
        if (v73 >= v74)
          v76 = -v76;
        if (v75 > 0.414213562)
          v77 = 1;
        else
          v77 = 2;
        if (v75 > 0.414213562)
          v78 = -1;
        else
          v78 = 1;
        if (v75 <= 0.414213562)
          v76 = v75;
        if (_D16 < 0.00000001)
        {
LABEL_95:
          v100 = 1.0 / v68;
LABEL_151:
          v115 = vmulq_n_f64(_Q0, v100);
          v166 = v115;
          v113 = v115.f64[1];
LABEL_192:
          v114 = *(double *)v25 * v115.f64[0];
          v145 = *(double *)(v25 + 8) * v113;
          goto LABEL_193;
        }
        if (v73 < v74)
          v78 = -v78;
        else
          v77 = v75 > 0.414213562;
        v79 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v76 * v76), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v76 * v76), (float64x2_t)xmmword_210315370), v76 * v76 * (v76 * v76))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v76 * v76), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v76 * v76), (float64x2_t)xmmword_210315380), v76 * v76 * (v76 * v76))), v76 * v76 * (v76 * v76) * (v76 * v76 * (v76 * v76))));
        v80 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v79, 1);
        _ZF = v72 == INFINITY && v73 == INFINITY;
        v82 = v76 + v76 * vdivq_f64(v79, v80).f64[0];
        if (_ZF)
          v82 = 0.785398163;
        if (v72 == 0.0 && v165 == 0.0)
          v84 = 0.0;
        else
          v84 = v82;
        if (v165 < 0.0)
        {
          v77 = 4 - v77;
          v78 = -v78;
        }
        if (v72 >= 0.0)
          v85 = v77;
        else
          v85 = -v77;
        v86 = (double)v85;
        if (v72 >= 0.0)
          v87 = v78;
        else
          v87 = -v78;
        v88 = v86 * 3.061617e-17 + v86 * 0.785398163 + v84 * (double)v87;
        v89 = v88
            * (v88
             * v88
             * (*(double *)(v25 + 168)
              + v88
              * v88
              * (*(double *)(v25 + 176)
               + v88
               * v88
               * (*(double *)(v25 + 184)
                + v88
                * v88
                * (*(double *)(v25 + 192)
                 + v88
                 * v88
                 * (*(double *)(v25 + 200) + v88 * v88 * (*(double *)(v25 + 208) + v88 * v88 * *(double *)(v25 + 216)))))))
             + 1.0);
        v90 = 1.0 / v72;
LABEL_150:
        v100 = v90 * v89;
        goto LABEL_151;
      }
      v54 = sub_20EB3641C(v25, &v166, &v164);
    }
LABEL_113:
    if ((v54 & 1) == 0)
      return 0;
LABEL_114:
    v53 = *(_DWORD *)(v25 + 992);
    if (v53 == -1)
      goto LABEL_184;
    goto LABEL_115;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v52 = *(_DWORD *)(v25 + 992);
  if (v52 > 7)
    goto LABEL_18;
LABEL_10:
  if (v52 > 3)
  {
    if (v52 <= 5)
    {
      if (v52 == 5)
      {
        v55 = v164.f64[0] * v164.f64[0] + v164.f64[1] * v164.f64[1];
        if (v55 >= 0.00000001)
        {
          v118 = sqrt(v55);
          if (v118 <= v165)
          {
            v143 = v118 / v165 * 0.785398163
                 - v118 / v165 * (v118 / v165 + -1.0) * (v118 / v165 * 0.0663008339 + 0.244711287);
          }
          else
          {
            if (v118 <= -v165)
            {
              v120 = v118 / v165 * 0.785398163
                   - v118 / v165 * (-1.0 - v118 / v165) * (v118 / v165 * -0.0663008339 + 0.244711287);
              v121 = 3.14159265;
            }
            else
            {
              v119 = fabs(v165 / v118);
              v120 = v165 / v118 * (v119 + -1.0) * (v119 * 0.0663008339 + 0.244711287) + v165 / v118 * -0.785398163;
              v121 = 1.57079633;
            }
            v143 = v120 + v121;
          }
          v144 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v25 + 168), *(int64x2_t *)(v25 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v25 + 168), *(int64x2_t *)(v25 + 184)), v143 * v143)), v143 * v143);
          v56 = (v143 + v143 * (v144.f64[0] + vmuld_lane_f64(v143 * v143 * (v143 * v143), v144, 1))) / v118;
        }
        else
        {
          if (v165 == 0.0)
            return 0;
          v56 = 1.0 / v165;
        }
        v166.f64[0] = v164.f64[0] * v56;
        v166.f64[1] = v164.f64[1] * v56;
        v53 = *(_DWORD *)(v25 + 992);
        if (v53 == -1)
          goto LABEL_184;
        goto LABEL_115;
      }
      v68 = v165;
      _Q0 = v164;
      _D1 = v164.f64[1];
      __asm { FMLA            D16, D1, V0.D[1] }
      v93 = sqrt(_D16);
      v94 = fabs(v165);
      v95 = fabs(v93);
      v96 = v94 / v95;
      if (v94 >= v95)
        v96 = v95 / v94;
      v97 = (v95 - v94) / (v94 + v95);
      if (v94 >= v95)
        v97 = -v97;
      if (v96 > 0.414213562)
        v98 = 1;
      else
        v98 = 2;
      if (v96 > 0.414213562)
        v99 = -1;
      else
        v99 = 1;
      if (v96 <= 0.414213562)
        v97 = v96;
      if (_D16 < 0.00000001)
        goto LABEL_95;
      if (v94 < v95)
        v99 = -v99;
      else
        v98 = v96 > 0.414213562;
      v122 = v93 == INFINITY && v94 == INFINITY;
      v123 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v97 * v97), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v97 * v97), (float64x2_t)xmmword_210315370), v97 * v97 * (v97 * v97))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v97 * v97), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v97 * v97), (float64x2_t)xmmword_210315380), v97 * v97 * (v97 * v97))), v97 * v97 * (v97 * v97) * (v97 * v97 * (v97 * v97))));
      v124 = v97 + v97 * vdivq_f64(v123, (float64x2_t)vdupq_laneq_s64((int64x2_t)v123, 1)).f64[0];
      if (v122)
        v124 = 0.785398163;
      if (v93 == 0.0 && v165 == 0.0)
        v126 = 0.0;
      else
        v126 = v124;
      if (v165 < 0.0)
      {
        v98 = 4 - v98;
        v99 = -v99;
      }
      if (v93 >= 0.0)
        v127 = v98;
      else
        v127 = -v98;
      v128 = (double)v127;
      if (v93 >= 0.0)
        v129 = v99;
      else
        v129 = -v99;
      v130 = v128 * 3.061617e-17 + v128 * 0.785398163 + v126 * (double)v129;
      v131 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v25 + 168), *(int64x2_t *)(v25 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v25 + 168), *(int64x2_t *)(v25 + 184)), v130 * v130)), v130 * v130);
      v89 = v130 + v130 * (v131.f64[0] + vmuld_lane_f64(v130 * v130 * (v130 * v130), v131, 1));
      v90 = 1.0 / v93;
      goto LABEL_150;
    }
    if (v52 == 6)
    {
      v66 = vaddq_f64(vdivq_f64(v164, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v165, 0)), *(float64x2_t *)(v25 + 192));
      v67 = sqrt(vaddvq_f64(vmulq_f64(v66, v66)));
      v166 = vaddq_f64(*(float64x2_t *)(v25 + 208), vmulq_n_f64(v66, v67 * (v67 * (*(double *)(v25 + 168) + v67 * (*(double *)(v25 + 176) + *(double *)(v25 + 184) * v67)))+ 1.0));
      v53 = *(_DWORD *)(v25 + 992);
      if (v53 != -1)
        goto LABEL_115;
      goto LABEL_184;
    }
    v54 = sub_20EB31FFC(v25, &v166, &v164);
    goto LABEL_113;
  }
  if (v52 <= 1)
  {
    if (!v52)
    {
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    if (v165 >= 0.00000001)
    {
      v166 = vmulq_n_f64(v164, 1.0 / v165);
      v53 = *(_DWORD *)(v25 + 992);
      if (v53 == -1)
        goto LABEL_184;
LABEL_115:
      if (v53 > 7)
        goto LABEL_186;
      goto LABEL_116;
    }
    return 0;
  }
  if (v52 != 2)
  {
    _V0.D[1] = v164.f64[1];
    _D1 = v164.f64[1];
    __asm { FMLA            D16, D1, V0.D[1] }
    v104 = sqrt(_D16);
    v105 = fabs(v165);
    v106 = fabs(v104);
    v107 = v105 / v106;
    if (v105 >= v106)
      v107 = v106 / v105;
    v108 = (v106 - v105) / (v105 + v106);
    if (v105 >= v106)
      v108 = -v108;
    if (v107 > 0.414213562)
      v109 = 1;
    else
      v109 = 2;
    if (v107 > 0.414213562)
      v110 = -1;
    else
      v110 = 1;
    if (v107 <= 0.414213562)
      v108 = v107;
    if (_D16 >= 0.00000001)
    {
      if (v105 < v106)
        v110 = -v110;
      else
        v109 = v107 > 0.414213562;
      v132 = v104 == INFINITY && v105 == INFINITY;
      v133 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v108 * v108), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v108 * v108), (float64x2_t)xmmword_210315370), v108 * v108 * (v108 * v108))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v108 * v108), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v108 * v108), (float64x2_t)xmmword_210315380), v108 * v108 * (v108 * v108))), v108 * v108 * (v108 * v108) * (v108 * v108 * (v108 * v108))));
      v134 = v108 + v108 * vdivq_f64(v133, (float64x2_t)vdupq_laneq_s64((int64x2_t)v133, 1)).f64[0];
      if (v132)
        v134 = 0.785398163;
      if (v104 == 0.0 && v165 == 0.0)
        v136 = 0.0;
      else
        v136 = v134;
      if (v165 < 0.0)
      {
        v109 = 4 - v109;
        v110 = -v110;
      }
      if (v104 >= 0.0)
        v137 = v109;
      else
        v137 = -v109;
      v138 = (double)v137;
      if (v104 >= 0.0)
        v139 = v110;
      else
        v139 = -v110;
      v140 = v138 * 3.061617e-17 + v138 * 0.785398163 + v136 * (double)v139;
      v141 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v25 + 168), *(int64x2_t *)(v25 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v25 + 168), *(int64x2_t *)(v25 + 184)), v140 * v140)), v140 * v140);
      v111 = 1.0 / v104 * (v140 + v140 * (v141.f64[0] + vmuld_lane_f64(v140 * v140 * (v140 * v140), v141, 1)));
    }
    else
    {
      v111 = 1.0 / v165;
    }
    v65 = vmulq_n_f64(v164, v111);
    v166 = v65;
    goto LABEL_176;
  }
  if (!*(_DWORD *)(v25 + 212))
  {
    if (!sub_20EB14380(&v166, &v164, (double *)(v25 + 168)))
      return 0;
    goto LABEL_114;
  }
  if (v165 < 0.00000001)
    return 0;
  _Q3 = vmulq_n_f64(v164, 1.0 / v165);
  _D0 = vmuld_lane_f64(1.0 / v165, v164, 1);
  __asm { FMLA            D2, D0, V3.D[1] }
  v65 = vaddq_f64(vaddq_f64(vmulq_f64(vaddq_f64((float64x2_t)vdupq_lane_s64(_D2, 0), vmulq_f64(_Q3, vaddq_f64(_Q3, _Q3))), (float64x2_t)vextq_s8(*(int8x16_t *)(v25 + 192), *(int8x16_t *)(v25 + 192), 8uLL)), vmulq_laneq_f64(vmulq_n_f64(vaddq_f64(*(float64x2_t *)(v25 + 192), *(float64x2_t *)(v25 + 192)), _Q3.f64[0]), _Q3, 1)), vmulq_n_f64(_Q3, *(double *)(v25 + 168) * *(double *)&_D2+ 1.0+ *(double *)&_D2 * (*(double *)(v25 + 176) * *(double *)&_D2)+ *(double *)&_D2 * (*(double *)&_D2 * (*(double *)(v25 + 184) * *(double *)&_D2))));
  v166 = v65;
LABEL_123:
  v117 = vaddvq_f64(vmulq_f64(*(float64x2_t *)v25, v65));
  v113 = v65.f64[1];
LABEL_194:
  v146.f64[0] = v117 + *(double *)(v25 + 16);
  v146.f64[1] = v113 * *(double *)(v25 + 32) + *(double *)(v25 + 40);
  _Q0 = vsubq_f64(v146, *(float64x2_t *)(a1 + 8));
  _Q2 = vmulq_n_f64(_Q0, 1.0 / v35);
  if (v34)
  {
    _D1 = vmuld_lane_f64(1.0 / v35, _Q0, 1);
    _Q0 = vmulq_f64(_Q2, _Q2);
    __asm { FMLA            D0, D1, V2.D[1] }
    if (_Q0.f64[0] >= 0.00000000999999994)
    {
      v151 = _Q2;
      _Q0.f64[0] = sqrt(log1p(_Q0.f64[0]) / _Q0.f64[0]);
      _Q2 = vmulq_n_f64(v151, _Q0.f64[0]);
    }
  }
  v150 = vextq_s8((int8x16_t)_Q2, (int8x16_t)_Q0, 1uLL);
  *(_BYTE *)a3 = LOBYTE(_Q2.f64[0]);
  *(_BYTE *)(a3 + 15) = HIBYTE(_Q2.f64[1]);
  *(_WORD *)(a3 + 13) = v150.i16[6];
  *(_DWORD *)(a3 + 9) = v150.i32[2];
  *(_QWORD *)(a3 + 1) = v150.i64[0];
  return 1;
}

BOOL sub_20FC7ACA4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  float64x2_t v4;
  unint64_t v5;
  float64x2_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  float64x2_t v21;
  __int128 v22;
  float64x2_t v23;
  float64x2_t v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  float64x2_t v33;
  __n128 v34;
  uint64_t v35;
  _BOOL4 v36;
  int v37;
  uint64_t v38;
  double v39;
  const double *v40;
  uint64_t v41;
  float64x2_t *v42;
  float64x2_t v43;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v53;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v58;
  float64x2_t v59;
  unsigned int v61;
  double v62;
  char v64;
  float64x2_t v68;
  double v71;
  double v72;
  double v73;
  double v76;
  double v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  double v88;
  float64_t v89;
  double v90;
  double v91;
  double v93;
  double v95;
  double v96;
  int64x2_t v97;
  int64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  double v102;
  double v103;
  double v105;
  double v106;
  float64x2_t v107;
  unint64_t v108;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  float64x2_t v118;
  float64x2_t v119;
  unsigned int v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  double v124;
  long double v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64_t v140;
  float64_t v144;
  const double *v145;
  unint64_t v148;
  float64x2_t v149;
  float64x2_t v150;
  double v151;
  uint64_t v152;
  double v153;
  double v154;
  double v155;
  double v156;
  int v157;
  int v158;
  _BOOL4 v159;
  float64x2_t v160;
  double v161;
  double v164;
  double v165;
  double v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  unsigned int v173;
  double *v174;
  double v175;
  double v179;
  double v180;
  double v181;
  double v182;
  double v185;
  double v186;
  float64x2_t v187;
  unint64_t v188;
  double v189;
  double v193;
  float64x2_t v194;
  unint64_t v195;
  double v196;
  double v197;
  float64x2_t v198;
  float64x2_t v199;
  double v200;
  long double v201;
  double v202;
  float64_t v203;
  double v204;
  float64x2_t v205;
  float64x2_t v206;
  int8x16_t v207;
  int8x16_t v208;
  char v209;
  int8x16_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  int8x16_t v229;
  int8x16_t v230;
  int8x16_t v231;
  int8x16_t v232;
  int8x16_t v233;
  unint64_t v234;
  float64x2_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v239;
  double v240;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v243;
  float64x2_t v244;
  float64_t v245;
  double v246;
  int8x16_t *v247;
  uint64_t v248;
  uint64_t v249;
  float64x2_t v250;
  float64x2_t v251;
  float64x2_t *v252;
  double v253;
  float64x2_t v254;
  double v255;
  double v256;
  int8x16_t v257;
  int8x16_t v258;
  int8x16_t v259;
  float64x2_t *v260;
  double v264;
  float64x2_t v265;
  int8x16_t v266;
  int8x16_t v267;
  int8x16_t v268;
  uint64_t v269;
  float64x2_t v271;
  float64x2_t v272;
  float64x2_t v273;
  float64x2_t v274;
  float64x2_t v275;
  float64x2_t v276;
  float64x2_t v277;
  _BOOL4 v278;
  int8x16_t v289;
  int8x16_t v290;
  int8x16_t v291;
  _OWORD *v292;
  __int128 v293;
  float64x2_t v294;
  float64x2_t v295;
  float64x2_t v296;
  float64x2_t v297;
  float64x2_t v298;
  unint64_t v299;
  float64x2_t v300;
  double v301;
  float64x2_t v302;
  float64x2_t v303;
  float64x2_t v304;
  float64x2_t v305;
  float64x2_t v306;
  unint64_t v307;
  unint64_t v308;
  unint64_t v309;
  unint64_t v310;
  unint64_t v311;
  int8x16_t v312;
  double v313;
  unint64_t v314;
  unint64_t v315;
  double v316;
  double v317;
  float64x2_t v318;
  double v319;
  float64x2_t v320;
  float64x2_t v321;
  float64x2_t *v322;
  float64x2_t v323;
  double v324;
  double v325;
  int8x16_t v326;
  int8x16_t v327;
  uint64_t v328;
  float64x2_t v329;
  int64x2_t v330;
  float64x2_t v331;
  float64_t v332;
  float64x2_t *v333;
  _BOOL4 v334;
  _BOOL4 v335;
  float64x2_t v336;
  int64x2_t v337;
  double v338;
  double v339;
  float64x2_t v340;
  double v341;
  double v342;
  double v343;
  double v344;
  float64x2_t v345;
  double v346;
  uint64_t v347;
  _BOOL4 v349;
  int v350;
  float64x2_t v351;
  float64x2_t v352;
  float64_t v353;
  float64x2_t v354;
  float64_t v355;
  int v356;
  float64x2_t v357;
  float64_t v358;
  float64x2_t v359;
  float64x2_t v360;
  uint64_t v361;
  uint64_t v362;
  float64x2_t v363;
  double v364;
  float64x2_t v365;
  double v366;
  float64x2_t v367;
  double v368;
  float64x2_t v369;
  double v370;
  float64x2_t v371;
  double v372;
  float64x2_t v373;
  double v374;
  int64x2_t v375;
  _BYTE v376[32];
  float64x2_t v377;
  double v378;
  float64x2_t v379;
  float64_t v380;
  float64x2_t v381;
  _BYTE v382[32];
  float64x2_t v383;
  double v384;
  float64x2_t v385;
  float64_t v386;
  _OWORD v387[3];
  float64x2_t v388;
  float64x2_t v389;
  double v390;
  float64x2_t v391;
  float64x2_t v392;
  float64x2_t v393;
  float64x2_t v394;
  float64x2_t v395;
  float64x2_t v396[2];
  float64x2_t v397;
  float64x2_t v398;
  uint64_t v399;
  float64x2x3_t v400;

  v399 = *MEMORY[0x24BDAC8D0];
  v13 = *a2;
  v14 = a2[1];
  v16 = a2[2];
  v15 = a2[3];
  v347 = a2[4];
  v362 = a2[5];
  v17 = a2[7];
  v18 = a2[9];
  v361 = a2[10];
  v19 = *(_QWORD *)(v361 + 24);
  if (*(_BYTE *)(v19 + 58) && !*(_BYTE *)(v19 + 57))
    return 0;
  v20 = *(_OWORD *)(v13 + 48);
  v21 = *(float64x2_t *)(v13 + 80);
  *(_OWORD *)&v382[16] = *(_OWORD *)(v13 + 64);
  v383 = v21;
  v384 = *(double *)(v13 + 96);
  v381 = *(float64x2_t *)(v13 + 32);
  *(_OWORD *)v382 = v20;
  v385 = *(float64x2_t *)(v13 + 104);
  v386 = *(double *)(v13 + 120);
  v22 = *(_OWORD *)(v14 + 48);
  v23 = *(float64x2_t *)(v14 + 80);
  *(_OWORD *)&v376[16] = *(_OWORD *)(v14 + 64);
  v377 = v23;
  v378 = *(double *)(v14 + 96);
  _Q1 = *(__n128 *)(v14 + 32);
  v375 = (int64x2_t)_Q1;
  *(_OWORD *)v376 = v22;
  v25 = *(float64x2_t *)(v14 + 104);
  v379 = v25;
  v380 = *(double *)(v14 + 120);
  v26 = *(double *)(*(_QWORD *)(a1 + 32) + 1424);
  if (v26 > 0.0)
  {
    v27 = *(_QWORD *)(v19 + 96);
    if (v27)
    {
      v28 = *(_QWORD *)(v27 + 64);
      _Q1.n128_u64[0] = *(_QWORD *)(v28 + 1424);
      v25.f64[0] = 0.0;
      if (_Q1.n128_f64[0] <= 0.0)
      {
LABEL_7:
        v29 = *(_QWORD *)(a1 + 32);
        v30 = *(double *)(a1 + 16);
        v31 = *(double *)(v29 + 1432);
        v32 = *(double *)(v29 + 1424);
        sub_20FC7D4B0(v16 + 136, v16 + 160, &v381, (uint64_t)&v369, v25, _Q1);
        v33.f64[0] = (v30 - v31) * v32;
        sub_20FC7D4B0(v15 + 136, v15 + 160, (float64x2_t *)&v375, (uint64_t)&v363, v33, v34);
        goto LABEL_8;
      }
    }
    else
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioanchoredpoint3d.hpp", 63, (uint64_t)"this->anchor_kf_pose_", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v28 = *(_QWORD *)(*(_QWORD *)(v19 + 96) + 64);
      _Q1.n128_u64[0] = *(_QWORD *)(v28 + 1424);
      v25.f64[0] = 0.0;
      if (_Q1.n128_f64[0] <= 0.0)
        goto LABEL_7;
    }
    v25.f64[0] = _Q1.n128_f64[0] * (*(double *)(v19 + 88) - *(double *)(v28 + 1432));
    goto LABEL_7;
  }
LABEL_8:
  if (*(_BYTE *)(v14 + 20))
  {
    v335 = *(_BYTE *)(v14 + 129) != 0;
    if (*(_BYTE *)(v13 + 20))
      goto LABEL_10;
LABEL_13:
    v334 = 0;
    v35 = v362;
    if (*(_BYTE *)(v362 + 20))
      goto LABEL_11;
    goto LABEL_14;
  }
  v335 = 0;
  if (!*(_BYTE *)(v13 + 20))
    goto LABEL_13;
LABEL_10:
  v334 = *(_BYTE *)(v13 + 129) != 0;
  v35 = v362;
  if (*(_BYTE *)(v362 + 20))
  {
LABEL_11:
    v36 = *(_BYTE *)(v35 + 144) != 0;
    goto LABEL_15;
  }
LABEL_14:
  v36 = 0;
LABEL_15:
  v350 = *(unsigned __int8 *)(v17 + 20);
  v37 = *(unsigned __int8 *)(v18 + 20);
  v38 = *(_QWORD *)(v361 + 24);
  v356 = *(unsigned __int8 *)(v38 + 56);
  v39 = *(double *)(a1 + 40);
  v25.f64[0] = *(float64_t *)(v361 + 32);
  v41 = *(_QWORD *)(a1 + 32);
  v349 = v36;
  _ZF = !v36;
  v42 = &v394;
  if (_ZF)
    v42 = 0;
  v322 = v42;
  _Q1.n128_u64[0] = *(_QWORD *)(v38 + 80);
  v333 = *(float64x2_t **)(v361 + 24);
  v43 = vmulq_f64(v25, (float64x2_t)_Q1);
  _Q5 = vmulq_n_f64(*(float64x2_t *)(v38 + 64), v25.f64[0]);
  _D2 = *(_QWORD *)&v382[24];
  v46.f64[1] = *(float64_t *)&v382[16];
  v47 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v381, _Q5.f64[0]), *(float64x2_t *)&v382[8], _Q5, 1), v383, v43.f64[0]);
  v320 = v43;
  v321 = _Q5;
  __asm { FMLA            D1, D2, V5.D[1] }
  v46.f64[0] = v386;
  _Q1.n128_f64[0] = vmlad_n_f64(_Q1.n128_f64[0], v384, v43.f64[0]);
  _Q2.f64[1] = v385.f64[1];
  _Q16 = vaddq_f64(v47, v385);
  v47.f64[0] = *(float64_t *)(v16 + 120);
  _Q2.f64[0] = *(float64_t *)(v15 + 120);
  v53 = vsubq_f64(v47, _Q2);
  _D4 = *(_QWORD *)(v16 + 72);
  *(_QWORD *)&v325 = *(_OWORD *)&vaddq_f64((float64x2_t)_Q1, v46);
  v326 = (int8x16_t)_Q16;
  __asm { FMLA            D2, D4, V16.D[1] }
  _Q2.f64[0] = vmlad_n_f64(_Q2.f64[0], *(double *)(v16 + 96), v325);
  v55 = vaddq_f64(vsubq_f64(*(float64x2_t *)(v16 + 104), *(float64x2_t *)(v15 + 104)), vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v16 + 32), _Q16.f64[0]), *(float64x2_t *)(v16 + 56), _Q16, 1), *(float64x2_t *)(v16 + 80), v325));
  v40 = (const double *)(v15 + 32);
  v400 = vld3q_f64(v40);
  v56 = vaddq_f64(v53, _Q2);
  _Q1 = *(float64x2_t *)(v15 + 80);
  v58 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v400.val[0], v55.f64[0]), v400.val[1], v55, 1), v400.val[2], v56.f64[0]);
  v400.val[0] = vmulq_f64(_Q1, v55);
  v327 = (int8x16_t)v55;
  v328 = *(uint64_t *)&v56.f64[0];
  v400.val[1].f64[0] = v55.f64[1];
  __asm { FMLA            D3, D4, V1.D[1] }
  v400.val[0].f64[0] = vmlad_n_f64(v400.val[0].f64[0], *(double *)(v15 + 96), v56.f64[0]);
  _Q1.f64[0] = *(float64_t *)v376;
  v56.f64[0] = v380;
  _Q16.f64[1] = v377.f64[1];
  *(_QWORD *)&v400.val[0].f64[0] = *(_OWORD *)&vsubq_f64(v400.val[0], v56);
  _Q0 = vsubq_f64(v58, v379);
  _Q1.f64[1] = *(float64_t *)&v376[24];
  v59 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v375, *(int64x2_t *)&v376[8]), _Q0.f64[0]), (float64x2_t)vzip2q_s64(v375, *(int64x2_t *)&v376[8]), _Q0, 1), _Q1, v400.val[0].f64[0]);
  _Q0.f64[0] = _Q0.f64[1];
  __asm { FMLA            D1, D0, V16.D[1] }
  v389 = v59;
  v390 = vmlad_n_f64(_Q1.f64[0], v378, v400.val[0].f64[0]);
  v61 = *(_DWORD *)(v41 + 992);
  if (v61 != -1)
  {
    if (v61 <= 7)
      goto LABEL_20;
LABEL_27:
    if (v61 > 0xB)
    {
      if (v61 <= 0xD)
      {
        if (v61 != 13)
          return 0;
        if (v390 < 0.00000001)
          return 0;
        v398 = vdivq_f64(v389, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v390, 0));
        if (!sub_20EB295B8(&v388, &v395, 0, (uint64_t)&v398, (double *)(v41 + 168), (*(double *)v41 + *(double *)(v41 + 32)) * 0.5))return 0;
        _D0 = -v389.f64[1] / (v390 * v390);
        _V3.D[1] = v395.f64[1];
        _V4.D[1] = v396[0].f64[1];
        v68.f64[0] = 0.0;
        v68.f64[1] = 1.0 / v390;
        _Q1 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)COERCE_UNSIGNED_INT64(1.0 / v390), v395.f64[0]), v68, v395, 1);
        __asm { FMLA            D7, D0, V3.D[1] }
        v387[0] = _Q1;
        __asm { FMLA            D2, D0, V4.D[1] }
        *(_QWORD *)&v387[1] = _D7;
        *((_QWORD *)&v387[2] + 1) = _D2;
        *(float64x2_t *)((char *)&v387[1] + 8) = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)COERCE_UNSIGNED_INT64(1.0 / v390), v396[0].f64[0]), v68, v396[0], 1);
        goto LABEL_67;
      }
      if (v61 == 14)
        v64 = sub_20EB2498C(&v388, (uint64_t)v387, 0, (uint64_t)&v389, (double *)(v41 + 168), (*(double *)v41 + *(double *)(v41 + 32)) * 0.5);
      else
        v64 = sub_20EB3F050(v41, &v388, (uint64_t)v387, &v389, 0);
    }
    else if (v61 > 9)
    {
      if (v61 == 10)
        v64 = sub_20EB2450C(&v388, (uint64_t)v387, 0, (uint64_t)&v389, (double *)(v41 + 168), (*(double *)v41 + *(double *)(v41 + 32)) * 0.5);
      else
        v64 = sub_20EB3AF98(v41, &v388, (uint64_t)v387, &v389, 0);
    }
    else
    {
      if (v61 != 9)
      {
        v91 = v390;
        _Q5 = v389;
        *(_QWORD *)&v93 = vextq_s8((int8x16_t)_Q5, (int8x16_t)_Q5, 8uLL).u64[0];
        _Q1 = vmulq_f64(_Q5, _Q5);
        _D0 = v389.f64[1];
        __asm { FMLA            D1, D0, V5.D[1] }
        if (_Q1.f64[0] >= 0.00000001)
        {
          v95 = v390 * v390 + _Q1.f64[0];
          v96 = sqrt(_Q1.f64[0]);
          v338 = _Q1.f64[0];
          v343 = v93;
          v352 = v389;
          _Q0.f64[0] = atan2(v96, v390);
          v110 = *(double *)(v41 + 168);
          v111 = *(double *)(v41 + 176);
          v112 = *(double *)(v41 + 184);
          v113 = *(double *)(v41 + 192);
          v114 = *(double *)(v41 + 200);
          v115 = *(double *)(v41 + 208);
          v116 = *(double *)(v41 + 216);
          v103 = _Q0.f64[0]
               * _Q0.f64[0]
               * (v110 * 3.0
                + _Q0.f64[0]
                * _Q0.f64[0]
                * (v111 * 5.0
                 + _Q0.f64[0]
                 * _Q0.f64[0]
                 * (v112 * 7.0
                  + _Q0.f64[0]
                  * _Q0.f64[0]
                  * (v113 * 9.0
                   + _Q0.f64[0]
                   * _Q0.f64[0]
                   * (v114 * 11.0 + _Q0.f64[0] * _Q0.f64[0] * (v115 * 13.0 + _Q0.f64[0] * _Q0.f64[0] * 15.0 * v116))))))
               + 1.0;
          v93 = v343;
          _Q5 = v352;
          _Q0.f64[0] = _Q0.f64[0]
                     * (_Q0.f64[0]
                      * _Q0.f64[0]
                      * (v110
                       + _Q0.f64[0]
                       * _Q0.f64[0]
                       * (v111
                        + _Q0.f64[0]
                        * _Q0.f64[0]
                        * (v112
                         + _Q0.f64[0]
                         * _Q0.f64[0]
                         * (v113
                          + _Q0.f64[0]
                          * _Q0.f64[0]
                          * (v114 + _Q0.f64[0] * _Q0.f64[0] * (v115 + _Q0.f64[0] * _Q0.f64[0] * v116))))))
                      + 1.0);
          goto LABEL_65;
        }
LABEL_58:
        v105 = 1.0 / v91;
        v106 = -(v105 * v105);
        v107.f64[0] = 0.0;
        v108 = 0;
LABEL_66:
        v388 = vmulq_n_f64(_Q5, v105);
        *(_QWORD *)&v107.f64[1] = v108;
        v118 = vmulq_n_f64(v107, _Q5.f64[0]);
        v119 = vmulq_laneq_f64(v107, _Q5, 1);
        *((_QWORD *)&v387[1] + 1) = *(_QWORD *)&v119.f64[0];
        v118.f64[0] = v105 + v118.f64[0];
        *(double *)&v387[1] = v106 * _Q5.f64[0];
        v387[0] = v118;
        *((double *)&v387[2] + 1) = v106 * v93;
        *(double *)&v387[2] = v105 + v119.f64[1];
        goto LABEL_67;
      }
      v64 = sub_20EB372E0(v41, &v388, (uint64_t)v387, &v389, 0);
    }
    goto LABEL_62;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v61 = *(_DWORD *)(v41 + 992);
  if (v61 > 7)
    goto LABEL_27;
LABEL_20:
  if (v61 > 3)
  {
    if (v61 > 5)
    {
      if (v61 == 6)
      {
        if (v390 == 0.0)
          v88 = 1.0;
        else
          v88 = 1.0 / v390;
        v89 = v389.f64[0] * v88;
        v90 = v88 * v389.f64[1];
        v398.f64[0] = v389.f64[0] * v88;
        v398.f64[1] = v88 * v389.f64[1];
        sub_20EB2837C(&v388, v395.f64, &v398, (double *)(v41 + 168), (float64x2_t *)(v41 + 192), (double *)(v41 + 208));
        *(double *)v387 = v88 * v395.f64[0];
        *((double *)v387 + 1) = v88 * v395.f64[1];
        *((double *)&v387[1] + 1) = v88 * v396[0].f64[0];
        *(double *)&v387[1] = v88 * (-(v395.f64[0] * v89) - v90 * v395.f64[1]);
        *(double *)&v387[2] = v88 * v396[0].f64[1];
        *((double *)&v387[2] + 1) = v88 * (-(v396[0].f64[0] * v89) - v90 * v396[0].f64[1]);
        goto LABEL_67;
      }
      v64 = sub_20EB3345C(v41, &v388, (uint64_t)v387, &v389, 0);
    }
    else
    {
      if (v61 != 5)
        goto LABEL_55;
      v64 = sub_20EB29218(v388.f64, (uint64_t)v387, &v389, (int64x2_t *)(v41 + 168));
    }
LABEL_62:
    if ((v64 & 1) == 0)
      return 0;
    goto LABEL_67;
  }
  if (v61 <= 1)
  {
    if (!v61)
    {
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    if (v390 >= 0.00000001)
    {
      v62 = 1.0 / v390;
      _Q1.f64[1] = v389.f64[1];
      v388 = vmulq_n_f64(v389, 1.0 / v390);
      v387[0] = COERCE_UNSIGNED_INT64(1.0 / v390);
      *((_QWORD *)&v387[1] + 1) = 0;
      *(double *)&v387[1] = v62 * -(v389.f64[0] * v62);
      *(double *)&v387[2] = 1.0 / v390;
      *((double *)&v387[2] + 1) = v62 * -(v389.f64[1] * v62);
      goto LABEL_67;
    }
    return 0;
  }
  if (v61 != 2)
  {
LABEL_55:
    v91 = v390;
    _Q5 = v389;
    *(_QWORD *)&v93 = vextq_s8((int8x16_t)_Q5, (int8x16_t)_Q5, 8uLL).u64[0];
    _Q1 = vmulq_f64(_Q5, _Q5);
    _D0 = v389.f64[1];
    __asm { FMLA            D1, D0, V5.D[1] }
    if (_Q1.f64[0] >= 0.00000001)
    {
      v95 = v390 * v390 + _Q1.f64[0];
      v96 = sqrt(_Q1.f64[0]);
      v338 = _Q1.f64[0];
      v342 = v93;
      v351 = v389;
      _Q0.f64[0] = atan2(v96, v390);
      v97 = *(int64x2_t *)(v41 + 184);
      v98 = *(int64x2_t *)(v41 + 168);
      v99 = (float64x2_t)vzip2q_s64(v98, v97);
      v100 = (float64x2_t)vzip1q_s64(v98, v97);
      v101 = vmulq_n_f64(vaddq_f64(vmulq_f64(v100, (float64x2_t)xmmword_210312E10), vmulq_n_f64(vmulq_f64(v99, (float64x2_t)xmmword_210312E20), _Q0.f64[0] * _Q0.f64[0])), _Q0.f64[0] * _Q0.f64[0]);
      v102 = _Q0.f64[0] * _Q0.f64[0] * (_Q0.f64[0] * _Q0.f64[0]);
      v103 = v101.f64[0] + vmuld_lane_f64(v102, v101, 1) + 1.0;
      v93 = v342;
      _Q1 = vmulq_n_f64(vaddq_f64(v100, vmulq_n_f64(v99, _Q0.f64[0] * _Q0.f64[0])), _Q0.f64[0] * _Q0.f64[0]);
      _Q5 = v351;
      _Q0.f64[0] = _Q0.f64[0] + _Q0.f64[0] * (_Q1.f64[0] + vmuld_lane_f64(v102, _Q1, 1));
LABEL_65:
      v105 = _Q0.f64[0] / v96;
      v117 = v103 / v95;
      v107 = vmulq_n_f64(_Q5, (v91 * (v103 / v95) - v105) / v338);
      v106 = -v117;
      v108 = vextq_s8((int8x16_t)v107, (int8x16_t)v107, 8uLL).u64[0];
      goto LABEL_66;
    }
    goto LABEL_58;
  }
  if (*(_DWORD *)(v41 + 212))
  {
    if (v390 < 0.00000001)
      return 0;
    _Q0 = vmulq_n_f64(v389, 1.0 / v390);
    v71 = *(double *)(v41 + 168);
    v72 = *(double *)(v41 + 176);
    v73 = *(double *)(v41 + 184);
    _D3 = vmuld_lane_f64(1.0 / v390, v389, 1);
    __asm { FMLA            D7, D3, V0.D[1] }
    v76 = v71 * *(double *)&_D7 + 1.0 + *(double *)&_D7 * *(double *)&_D7 * (v72 + v73 * *(double *)&_D7);
    v77 = v71 + v71 + *(double *)&_D7 * (v72 * 4.0 + *(double *)&_D7 * (v73 * 6.0));
    v78 = *(float64x2_t *)(v41 + 192);
    v79 = vmulq_f64(vaddq_f64((float64x2_t)vdupq_lane_s64(_D7, 0), vmulq_f64(_Q0, vaddq_f64(_Q0, _Q0))), (float64x2_t)vextq_s8((int8x16_t)v78, (int8x16_t)v78, 8uLL));
    v80 = vaddq_f64(v78, v78);
    v81 = vmulq_n_f64(v80, _Q0.f64[0]);
    v388 = vmlaq_n_f64(vaddq_f64(v79, vmulq_laneq_f64(v81, _Q0, 1)), _Q0, v76);
    v82 = vmulq_n_f64(_Q0, v77);
    v83 = vmulq_n_f64(v82, _Q0.f64[0]);
    v84 = vmulq_n_f64(v82, _D3);
    v85 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v81.f64[0], 0);
    v85.f64[0] = vmuld_lane_f64(6.0, v78, 1) * _Q0.f64[0];
    v86 = vaddq_f64(v85, vmulq_laneq_f64(v80, _Q0, 1));
    v83.f64[0] = v76 + v83.f64[0];
    v87 = vaddq_f64(v86, v83);
    *(_QWORD *)&v86.f64[0] = vdupq_laneq_s64((int64x2_t)v86, 1).u64[0];
    v86.f64[1] = vmuld_lane_f64(6.0 * v78.f64[0], _Q0, 1) + v81.f64[1];
    v84.f64[1] = v76 + v84.f64[1];
    _Q1 = vmulq_n_f64(v87, 1.0 / v390);
    v387[0] = _Q1;
    *(float64x2_t *)((char *)&v387[1] + 8) = vmulq_n_f64(vaddq_f64(v86, v84), 1.0 / v390);
    *(double *)&v387[1] = -(vmuld_n_f64(_Q1.f64[0], _Q0.f64[0]) + _Q1.f64[1] * _Q0.f64[1]);
    *((double *)&v387[2] + 1) = -(vmuld_n_f64(*((double *)&v387[1] + 1), _Q0.f64[0]) + *(double *)&v387[2] * _Q0.f64[1]);
  }
  else if (!sub_20F0BA0C8(&v388, (uint64_t)v387, &v389, (double *)(v41 + 168)))
  {
    return 0;
  }
LABEL_67:
  v120 = *(_DWORD *)(v41 + 992);
  if (v120 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v120 = *(_DWORD *)(v41 + 992);
  }
  if (!v120)
  {
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Q0.f64[0] = *(float64_t *)v41;
  _Q1.f64[0] = *(float64_t *)(v41 + 32);
  v329 = _Q0;
  v331 = _Q1;
  _Q0.f64[1] = _Q1.f64[0];
  v121.f64[0] = *(float64_t *)(v41 + 16);
  v121.f64[1] = *(float64_t *)(v41 + 40);
  v122 = v388;
  v123 = vsubq_f64(vmlaq_f64(v121, _Q0, v388), *(float64x2_t *)(a1 + 8));
  v124 = 1.0 / v39;
  _Q1 = vmulq_n_f64(v123, 1.0 / v39);
  v336 = _Q1;
  if (!v356)
    goto LABEL_74;
  _D3 = vmuld_lane_f64(v124, v123, 1);
  __asm { FMLA            D0, D3, V1.D[1] }
  if (_D0 >= 0.00000000999999994)
  {
    v357 = v388;
    v339 = _D0;
    v344 = _D3;
    v128 = log1p(_D0);
    v129.f64[0] = 0.0;
    v129.f64[1] = sqrt(v128 / v339);
    v130 = vmulq_n_f64(v336, (1.0 - (v128 + v128 / v339)) / (v339 * ((v339 + 1.0) * v129.f64[1])));
    v122 = v357;
    v340 = vmulq_n_f64(vmlaq_n_f64(v129, v130, v344), 1.0 / v39);
    v345 = vmulq_n_f64(vmlaq_n_f64((float64x2_t)*(unint64_t *)&v129.f64[1], v130, v336.f64[0]), 1.0 / v39);
    v336 = vmulq_n_f64(v336, v129.f64[1]);
  }
  else
  {
LABEL_74:
    v131.f64[0] = 0.0;
    v131.f64[1] = 1.0 / v39;
    v340 = v131;
    v345 = (float64x2_t)*(unint64_t *)&v124;
  }
  v353 = *(double *)v387;
  v358 = *((double *)&v387[1] + 1);
  if (v349)
  {
    v132 = vmulq_f64(v345, (float64x2_t)0);
    *v322 = vmlaq_f64(vmulq_n_f64(v345, v122.f64[0]), (float64x2_t)0, v340);
    v393 = vmlaq_laneq_f64(v132, v340, v122, 1);
    v392 = vmlaq_f64(v345, (float64x2_t)0, v340);
    v391 = vaddq_f64(v340, v132);
  }
  v133.f64[0] = v353;
  v133.f64[1] = *((float64_t *)v387 + 1);
  v354 = v133;
  v133.f64[0] = *(float64_t *)&v387[1];
  v318 = v133;
  v133.f64[0] = *((float64_t *)&v387[2] + 1);
  v323 = v133;
  v134.f64[0] = v358;
  v134.f64[1] = *(float64_t *)&v387[2];
  v359 = v134;
  if (!v350)
  {
    if (v37)
      goto LABEL_138;
LABEL_85:
    v314 = *(_QWORD *)&v134.f64[0];
    v315 = *(_QWORD *)&v134.f64[0];
    v137 = v329;
    v136 = v331;
    v139 = v340;
    v138 = v345;
    goto LABEL_183;
  }
  *(_QWORD *)&v398.f64[0] = &v395;
  *(_QWORD *)&v398.f64[1] = &v389;
  if (v120 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v120 = *(_DWORD *)(v41 + 992);
    if (v120 <= 7)
      goto LABEL_80;
LABEL_88:
    if (v120 <= 0xB)
    {
      if (v120 <= 9)
      {
        if (v120 != 9)
          sub_20FBCF154();
        sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/LensModel.cpp", 852, (uint64_t)&unk_210254955, 0, (uint64_t)"not implemented yet. rdar://113779839", 37, (void (*)(void **))sub_21023DDB0);
        abort();
      }
      if (v120 == 10)
        sub_20FBCF154();
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/LensModel.cpp", 852, (uint64_t)&unk_210254955, 0, (uint64_t)"not implemented yet. rdar://113779839", 37, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    if (v120 > 0xD)
    {
      if (v120 == 14)
        sub_20FBCF154();
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/LensModel.cpp", 852, (uint64_t)&unk_210254955, 0, (uint64_t)"not implemented yet. rdar://113779839", 37, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    v140 = v398.f64[0];
    if (v120 == 13)
      sub_20EB43BB4();
    _Q0 = **(float64x2_t **)&v398.f64[1];
    _D2 = *(_QWORD *)(*(_QWORD *)&v398.f64[1] + 8);
    __asm { FMLA            D1, D2, V0.D[1] }
    if (_D1 >= 0.00000001)
    {
      v151 = *(double *)(*(_QWORD *)&v398.f64[1] + 16);
      *(double *)&v152 = sqrt(_D1);
      v153 = fabs(v151);
      v154 = fabs(*(double *)&v152);
      v155 = v153 / v154;
      if (v153 >= v154)
        v155 = v154 / v153;
      if (v155 <= 0.414213562)
      {
        v157 = 1;
        v158 = 2;
        v156 = v155;
      }
      else
      {
        v156 = (v154 - v153) / (v153 + v154);
        if (v153 >= v154)
          v156 = -v156;
        v157 = -1;
        v158 = 1;
      }
      v159 = v155 > 0.414213562;
      v160 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v156 * v156), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v156 * v156), (float64x2_t)xmmword_210315370), v156 * v156 * (v156 * v156))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v156 * v156), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v156 * v156), (float64x2_t)xmmword_210315380), v156 * v156 * (v156 * v156))), v156 * v156 * (v156 * v156) * (v156 * v156 * (v156 * v156))));
      v161 = v156 + v156 * vdivq_f64(v160, (float64x2_t)vdupq_laneq_s64((int64x2_t)v160, 1)).f64[0];
      _ZF = *(double *)&v152 == INFINITY && v153 == INFINITY;
      if (_ZF)
        v161 = 0.785398163;
      if (v153 >= v154)
        v158 = v159;
      else
        v157 = -v157;
      if (v151 < 0.0)
        v157 = -v157;
      if (*(uint64_t *)(*(_QWORD *)&v398.f64[1] + 16) < 0)
        v158 = 4 - v158;
      if (v152 < 0)
      {
        v157 = -v157;
        v158 = -v158;
      }
      if (*(double *)&v152 == 0.0 && v151 == 0.0)
        v164 = 0.0;
      else
        v164 = v161;
      v165 = (double)v158 * 3.061617e-17 + (double)v158 * 0.785398163 + v164 * (double)v157;
      v166 = v165 * v165;
      v167.f64[0] = v165 * (v165 * v165);
      v167.f64[1] = v166 * v167.f64[0];
      v168 = vmulq_n_f64(v167, v166 * v166);
      v169 = vdivq_f64(_Q0, (float64x2_t)vdupq_lane_s64(v152, 0));
      **(_OWORD **)&v398.f64[0] = vmulq_n_f64(v167, v169.f64[0]);
      *(float64x2_t *)(*(_QWORD *)&v140 + 16) = vmulq_n_f64(v168, v169.f64[0]);
      *(float64x2_t *)(*(_QWORD *)&v140 + 32) = vmulq_laneq_f64(v167, v169, 1);
      *(float64x2_t *)(*(_QWORD *)&v140 + 48) = vmulq_laneq_f64(v168, v169, 1);
    }
    else
    {
      *(_OWORD *)(*(_QWORD *)&v398.f64[0] + 32) = 0u;
      *(_OWORD *)(*(_QWORD *)&v140 + 48) = 0u;
      **(_OWORD **)&v140 = 0u;
      *(_OWORD *)(*(_QWORD *)&v140 + 16) = 0u;
    }
    goto LABEL_137;
  }
  if (v120 > 7)
    goto LABEL_88;
LABEL_80:
  if (v120 <= 3)
  {
    if (v120 <= 1)
    {
      if (!v120)
      {
        sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
        abort();
      }
      v135 = v398.f64[0];
      *(_OWORD *)(*(_QWORD *)&v398.f64[0] + 32) = 0u;
      *(_OWORD *)(*(_QWORD *)&v135 + 48) = 0u;
      **(_OWORD **)&v135 = 0u;
      *(_OWORD *)(*(_QWORD *)&v135 + 16) = 0u;
      goto LABEL_137;
    }
    if (v120 == 2)
    {
      v144 = v398.f64[0];
      v145 = (const double *)(*(_QWORD *)&v398.f64[1] + 16);
      _D2 = *(_QWORD *)(*(_QWORD *)&v398.f64[1] + 8);
      __asm { FMLA            D1, D2, V0.D[1] }
      *(double *)&v148 = _Q1.f64[0] * (_Q1.f64[0] * _Q1.f64[0]);
      _Q1.f64[1] = _Q1.f64[0] * _Q1.f64[0];
      v149 = vld1q_dup_f64(v145);
      v150 = vdivq_f64(**(float64x2_t **)&v398.f64[1], v149);
      **(_OWORD **)&v398.f64[0] = vmulq_n_f64(_Q1, v150.f64[0]);
      *(float64x2_t *)(*(_QWORD *)&v144 + 16) = vmulq_n_f64((float64x2_t)v148, v150.f64[0]);
      *(float64x2_t *)(*(_QWORD *)&v144 + 32) = vmulq_laneq_f64(_Q1, v150, 1);
      *(float64x2_t *)(*(_QWORD *)&v144 + 48) = vmulq_laneq_f64((float64x2_t)v148, v150, 1);
      goto LABEL_137;
    }
LABEL_93:
    sub_20FBCEF64((float64x2_t **)&v398);
    goto LABEL_137;
  }
  if (v120 <= 5)
    goto LABEL_93;
  if (v120 == 6)
    sub_20EB42068();
  sub_20EB34694(v41, *(float64x2_t **)&v398.f64[0], *(float64x2_t **)&v398.f64[1]);
LABEL_137:
  v170 = vmlaq_f64(vmulq_n_f64(v345, v329.f64[0]), (float64x2_t)0, v340);
  v171 = vmlaq_n_f64(vmulq_f64(v345, (float64x2_t)0), v340, v331.f64[0]);
  v305 = vmlaq_laneq_f64(vmulq_laneq_f64(v170, v395, 1), v171, v396[1], 1);
  v306 = vmlaq_n_f64(vmulq_n_f64(v170, v395.f64[0]), v171, v396[1].f64[0]);
  v172 = vmlaq_n_f64(vmulq_n_f64(v170, v396[0].f64[0]), v171, v397.f64[0]);
  v134 = vmlaq_laneq_f64(vmulq_laneq_f64(v170, v396[0], 1), v171, v397, 1);
  v303 = v134;
  v304 = v172;
  if (!v37)
    goto LABEL_85;
LABEL_138:
  v173 = *(_DWORD *)(v41 + 992);
  if (v173 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v173 = *(_DWORD *)(v41 + 992);
    if (v173 <= 7)
      goto LABEL_140;
  }
  else if (v173 <= 7)
  {
LABEL_140:
    if (v173 <= 3)
    {
      if (v173 > 1)
      {
        memset(v396, 0, sizeof(v396));
        v395 = 0u;
        if (v173 == 2)
        {
          v174 = (double *)(v41 + 168);
          if (*(_DWORD *)(v41 + 212))
            sub_20FA1E060(&v388, (uint64_t)v387, &v389, v174, (float64x2_t *)(v41 + 192));
          else
            sub_20F0BA0C8(&v388, (uint64_t)v387, &v389, v174);
        }
        else
        {
          v189 = v390;
          _Q0 = v389;
          _D1 = v389.f64[1];
          __asm { FMLA            D2, D1, V0.D[1] }
          if (_D2 >= 0.00000001)
          {
            v200 = v390 * v390 + _D2;
            v201 = sqrt(_D2);
            v317 = _D2;
            v202 = atan2(v201, v390);
            v398.f64[0] = 0.0;
            v203 = sub_20F0BA1B0((int64x2_t *)(v41 + 168), v398.f64, v202);
            v204 = (v189 * (v398.f64[0] / v200) - v203 / v201) / v317;
            _Q0 = v389;
            v194 = vmulq_n_f64(v389, v204);
            v193 = -(v398.f64[0] / v200);
            v195 = vextq_s8((int8x16_t)v194, (int8x16_t)v194, 8uLL).u64[0];
          }
          else
          {
            v193 = -(1.0 / v390 * (1.0 / v390));
            v194.f64[0] = 0.0;
            v195 = 0;
          }
          *(_QWORD *)&v194.f64[1] = v195;
          v387[0] = vmulq_n_f64(v194, _Q0.f64[0]);
          *(double *)&v387[1] = v193 * _Q0.f64[0];
          *((_QWORD *)&v387[2] + 1) = vmuld_lane_f64(v193, _Q0, 1);
          *(float64x2_t *)((char *)&v387[1] + 8) = vmulq_laneq_f64(v194, _Q0, 1);
        }
      }
      else
      {
        if (!v173)
        {
          sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
          abort();
        }
        memset(v396, 0, sizeof(v396));
        v395 = 0u;
        if (v390 >= 0.00000001)
          *(double *)&v387[2] = 1.0 / v390;
      }
      goto LABEL_182;
    }
    if (v173 > 5)
    {
      if (v173 == 6)
        sub_20EB41F64((float64x2_t *)v41, &v388, (double *)v387, v389.f64, &v395);
      else
        sub_20EB3345C(v41, &v388, (uint64_t)v387, &v389, (uint64_t)&v395);
      goto LABEL_182;
    }
    memset(v396, 0, sizeof(v396));
    v395 = 0u;
    if (v173 == 5)
    {
      sub_20EB29218(v388.f64, (uint64_t)v387, &v389, (int64x2_t *)(v41 + 168));
      goto LABEL_182;
    }
    v175 = v390;
    _Q0 = v389;
    _D1 = v389.f64[1];
    __asm { FMLA            D2, D1, V0.D[1] }
    if (_D2 < 0.00000001)
      goto LABEL_170;
    v179 = v390 * v390 + _D2;
    v180 = sqrt(_D2);
    v316 = _D2;
    v196 = atan2(v180, v390);
    v398.f64[0] = 0.0;
    v182 = sub_20F0BA1B0((int64x2_t *)(v41 + 168), v398.f64, v196);
    goto LABEL_177;
  }
  if (v173 > 0xB)
  {
    if (v173 > 0xD)
    {
      if (v173 == 14)
      {
        memset(v396, 0, sizeof(v396));
        v395 = 0u;
        sub_20EB2498C(&v388, (uint64_t)v387, 0, (uint64_t)&v389, (double *)(v41 + 168), (*(double *)v41 + *(double *)(v41 + 32)) * 0.5);
      }
      else
      {
        sub_20EB3F050(v41, &v388, (uint64_t)v387, &v389, (uint64_t)&v395);
      }
    }
    else if (v173 == 13)
    {
      sub_20EB439AC((double *)v41, &v388, (uint64_t)v387, &v389, &v395);
    }
    else
    {
      memset(v396, 0, sizeof(v396));
      v395 = 0u;
      memset(v387, 0, sizeof(v387));
    }
    goto LABEL_182;
  }
  if (v173 > 9)
  {
    if (v173 == 10)
    {
      memset(v396, 0, sizeof(v396));
      v395 = 0u;
      sub_20EB2450C(&v388, (uint64_t)v387, 0, (uint64_t)&v389, (double *)(v41 + 168), (*(double *)v41 + *(double *)(v41 + 32)) * 0.5);
    }
    else
    {
      sub_20EB3AF98(v41, &v388, (uint64_t)v387, &v389, (uint64_t)&v395);
    }
    goto LABEL_182;
  }
  if (v173 != 9)
  {
    memset(v396, 0, sizeof(v396));
    v395 = 0u;
    v175 = v390;
    _Q0 = v389;
    _D1 = v389.f64[1];
    __asm { FMLA            D2, D1, V0.D[1] }
    if (_D2 < 0.00000001)
    {
LABEL_170:
      v185 = 1.0 / v175;
      v186 = -(v185 * v185);
      v187.f64[0] = 0.0;
      v188 = 0;
LABEL_178:
      *(_QWORD *)&v187.f64[1] = v188;
      v198 = vmulq_n_f64(v187, _Q0.f64[0]);
      v199 = vmulq_laneq_f64(v187, _Q0, 1);
      v387[0] = v198;
      *((_QWORD *)&v387[1] + 1) = *(_QWORD *)&v199.f64[0];
      *((_QWORD *)&v387[2] + 1) = vmuld_lane_f64(v186, _Q0, 1);
      *(double *)&v387[1] = v186 * _Q0.f64[0];
      *(double *)&v387[2] = v185 + v199.f64[1];
      goto LABEL_182;
    }
    v179 = v390 * v390 + _D2;
    v180 = sqrt(_D2);
    v316 = _D2;
    v181 = atan2(v180, v390);
    v398.f64[0] = 0.0;
    v182 = sub_20F0BA21C((double *)(v41 + 168), v398.f64, v181);
LABEL_177:
    v185 = v182 / v180;
    v197 = (v175 * (v398.f64[0] / v179) - v182 / v180) / v316;
    _Q0 = v389;
    v187 = vmulq_n_f64(v389, v197);
    v186 = -(v398.f64[0] / v179);
    v188 = vextq_s8((int8x16_t)v187, (int8x16_t)v187, 8uLL).u64[0];
    goto LABEL_178;
  }
  sub_20EB372E0(v41, &v388, (uint64_t)v387, &v389, (uint64_t)&v395);
LABEL_182:
  v137 = v329;
  v136 = v331;
  v139 = v340;
  v138 = v345;
  v205 = vmlaq_f64(vmulq_n_f64(v345, v329.f64[0]), (float64x2_t)0, v340);
  v206 = vmlaq_n_f64(vmulq_f64(v345, (float64x2_t)0), v340, v331.f64[0]);
  v7 = (int8x16_t)vmlaq_n_f64(vmulq_n_f64(v205, v395.f64[0]), v206, v396[0].f64[1]);
  v8 = (int8x16_t)vmlaq_laneq_f64(vmulq_laneq_f64(v205, v395, 1), v206, *(float64x2_t *)((char *)v396 + 8), 1);
  v9 = (int8x16_t)vmlaq_n_f64(vmulq_n_f64(v205, v396[0].f64[0]), v206, v396[1].f64[1]);
  v314 = vextq_s8(v8, v8, 8uLL).u64[0];
  v315 = vextq_s8(v9, v9, 8uLL).u64[0];
  v5 = vextq_s8(v7, v7, 8uLL).u64[0];
LABEL_183:
  v207 = (int8x16_t)vmulq_n_f64(v354, v137.f64[0]);
  v208 = (int8x16_t)vmulq_n_f64(v359, v136.f64[0]);
  v209 = LOBYTE(v336.f64[0]);
  v210 = vextq_s8((int8x16_t)v336, v207, 1uLL);
  v211 = vmlaq_n_f64(vmulq_n_f64(v138, *(double *)v207.i64), v139, *(double *)v208.i64);
  v212 = vmlaq_n_f64(vmulq_n_f64(v138, *(double *)vextq_s8(v207, v207, 8uLL).i64), v139, *(double *)vextq_s8(v208, v208, 8uLL).i64);
  v213 = vmlaq_n_f64(vmulq_n_f64(v138, vmulq_f64(v137, v318).f64[0]), v139, vmulq_f64(v136, v323).f64[0]);
  v214 = vnegq_f64(v211);
  v215 = vmlsq_lane_f64(vmlsq_lane_f64(vmulq_n_f64(v214, *(double *)v375.i64), v212, *(double *)&v376[8], 0), v213, v377.f64[0], 0);
  v216 = vmlsq_laneq_f64(vmlsq_laneq_f64(vmulq_laneq_f64(v214, (float64x2_t)v375, 1), v212, *(float64x2_t *)&v376[8], 1), v213, v377, 1);
  v217 = vmlsq_lane_f64(vmlsq_lane_f64(vmulq_n_f64(v214, *(double *)v376), v212, *(double *)&v376[24], 0), v213, v378, 0);
  v218.f64[0] = *(float64_t *)(v15 + 48);
  v219 = *(float64x2_t *)(v15 + 32);
  v220 = *(float64x2_t *)(v15 + 56);
  v221 = *(float64x2_t *)(v15 + 80);
  v222 = vnegq_f64(v215);
  v223 = vmlsq_lane_f64(vmlsq_lane_f64(vmulq_n_f64(v222, v219.f64[0]), v216, v220.f64[0], 0), v217, v221.f64[0], 0);
  v337 = (int64x2_t)v219;
  v341 = *(double *)(v15 + 96);
  v330 = (int64x2_t)v220;
  v332 = v221.f64[1];
  v224 = vmlsq_laneq_f64(vmlsq_laneq_f64(vmulq_laneq_f64(v222, v219, 1), v216, v220, 1), v217, v221, 1);
  v346 = *(double *)(v15 + 72);
  v225 = vmlsq_lane_f64(vmlsq_lane_f64(vmulq_n_f64(v222, v218.f64[0]), v216, v346, 0), v217, v341, 0);
  v226 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v223, *(double *)(v16 + 32)), v224, *(float64x2_t *)(v16 + 32), 1), v225, *(double *)(v16 + 48));
  v227 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v223, *(double *)(v16 + 56)), v224, *(float64x2_t *)(v16 + 56), 1), v225, *(double *)(v16 + 72));
  v228 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v223, *(double *)(v16 + 80)), v224, *(float64x2_t *)(v16 + 80), 1), v225, *(double *)(v16 + 96));
  if (v26 <= 0.0)
  {
    v310 = vextq_s8((int8x16_t)v216, (int8x16_t)v216, 8uLL).u64[0];
    v311 = vextq_s8((int8x16_t)v217, (int8x16_t)v217, 8uLL).u64[0];
    v309 = vextq_s8((int8x16_t)v215, (int8x16_t)v215, 8uLL).u64[0];
    v312.i64[0] = *(_QWORD *)&v215.f64[0];
    v229.i64[0] = *(_QWORD *)&v216.f64[0];
    v230.i64[0] = *(_QWORD *)&v217.f64[0];
    v234 = vextq_s8((int8x16_t)v228, (int8x16_t)v228, 8uLL).u64[0];
    v231.i64[0] = *(_QWORD *)&v226.f64[0];
    v308 = vextq_s8((int8x16_t)v227, (int8x16_t)v227, 8uLL).u64[0];
    v232.i64[0] = *(_QWORD *)&v227.f64[0];
    v307 = vextq_s8((int8x16_t)v226, (int8x16_t)v226, 8uLL).u64[0];
    v233.i64[0] = *(_QWORD *)&v228.f64[0];
  }
  else
  {
    v229 = (int8x16_t)vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v215, v363, 1), v216, v365, 1), v217, v367, 1);
    v230 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v215, v364), v216, v366), v217, v368);
    v312 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v215, v363.f64[0]), v216, v365.f64[0]), v217, v367.f64[0]);
    v309 = vextq_s8(v312, v312, 8uLL).u64[0];
    v310 = vextq_s8(v229, v229, 8uLL).u64[0];
    v311 = vextq_s8(v230, v230, 8uLL).u64[0];
    v231 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v226, v369.f64[0]), v227, v371.f64[0]), v228, v373.f64[0]);
    v232 = (int8x16_t)vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v226, v369, 1), v227, v371, 1), v228, v373, 1);
    v233 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v226, v370), v227, v372), v228, v374);
    v308 = vextq_s8(v232, v232, 8uLL).u64[0];
    v307 = vextq_s8(v231, v231, 8uLL).u64[0];
    v234 = vextq_s8(v233, v233, 8uLL).u64[0];
  }
  v235 = v381;
  v324 = v390;
  v236 = *(float64x2_t *)&v382[8];
  v237 = v383;
  v319 = v389.f64[1];
  v238.f64[1] = v389.f64[1];
  v313 = v389.f64[0];
  v238.f64[0] = *(float64_t *)v382;
  v4.f64[0] = *(float64_t *)&v382[24];
  v6.f64[0] = v384;
  v239 = v333[4];
  v240 = v333[5].f64[0];
  *(_BYTE *)a3 = v209;
  *(_BYTE *)(a3 + 15) = v210.i8[14];
  *(_WORD *)(a3 + 13) = v210.i16[6];
  *(_DWORD *)(a3 + 9) = v210.i32[2];
  *(_QWORD *)(a3 + 1) = v210.i64[0];
  v355 = v4.f64[0];
  v360 = v237;
  if (!v334)
  {
    v245 = v6.f64[0];
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 80) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    v248 = v362;
    v249 = v347;
    v250 = v236;
    v251 = v235;
    v246 = v238.f64[0];
    v252 = (float64x2_t *)(a4 + 96);
    if (v335)
      goto LABEL_283;
LABEL_190:
    v252[4] = 0u;
    v252[5] = 0u;
    v252[2] = 0u;
    v252[3] = 0u;
    *v252 = 0u;
    v252[1] = 0u;
    v253 = v245;
    v255 = v355;
    v254 = v360;
    if (!*(_BYTE *)(v16 + 20))
      goto LABEL_192;
    goto LABEL_191;
  }
  v299 = v234;
  v301 = v240;
  v302 = v211;
  v241 = (float64x2_t)vextq_s8((int8x16_t)v321, (int8x16_t)v321, 8uLL);
  v300 = v236;
  v242 = vmlsq_lane_f64(vmulq_n_f64(v237, v241.f64[0]), v236, v320.f64[0], 0);
  v243 = vmlsq_lane_f64(vmulq_n_f64(v235, v320.f64[0]), v237, v321.f64[0], 0);
  v244 = vmlsq_lane_f64(vmulq_n_f64(v236, v321.f64[0]), v235, v241.f64[0], 0);
  v245 = v6.f64[0];
  v246 = v238.f64[0];
  *(float64x2_t *)a4 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v226, v242.f64[0]), v227, v242, 1), v228, vmlsq_f64(vmulq_f64(v241, v6), v320, v4).f64[0]);
  *(float64x2_t *)(a4 + 16) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v226, v243.f64[0]), v227, v243, 1), v228, vmlsq_f64(vmulq_f64(v320, v238), v321, v6).f64[0]);
  *(float64x2_t *)(a4 + 32) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v226, v244.f64[0]), v227, v244, 1), v228, vmlsq_f64(vmulq_f64(v321, v4), v241, v238).f64[0]);
  v247 = (int8x16_t *)(a4 + 48);
  v248 = v362;
  v249 = v347;
  if (*(_BYTE *)(v13 + 128))
  {
    v231.i64[1] = v307;
    v232.i64[1] = v308;
    *v247 = v231;
    *(int8x16_t *)(a4 + 64) = v232;
    v233.i64[1] = v299;
    *(int8x16_t *)(a4 + 80) = v233;
  }
  else
  {
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 80) = 0u;
    *v247 = 0u;
  }
  v240 = v301;
  v211 = v302;
  v250 = v300;
  v251 = v235;
  v252 = (float64x2_t *)(a4 + 96);
  if (!v335)
    goto LABEL_190;
LABEL_283:
  v289 = (int8x16_t)vsubq_f64(vmulq_n_f64(v212, v324), vmulq_n_f64(v213, v319));
  v290 = (int8x16_t)vsubq_f64(vmulq_n_f64(v213, v313), vmulq_n_f64(v211, v324));
  v291 = (int8x16_t)vsubq_f64(vmulq_n_f64(v211, v319), vmulq_n_f64(v212, v313));
  v289.i64[1] = vextq_s8(v289, v289, 8uLL).u64[0];
  v290.i64[1] = vextq_s8(v290, v290, 8uLL).u64[0];
  *(int8x16_t *)(a4 + 96) = v289;
  *(int8x16_t *)(a4 + 112) = v290;
  v291.i64[1] = vextq_s8(v291, v291, 8uLL).u64[0];
  *(int8x16_t *)(a4 + 128) = v291;
  v292 = (_OWORD *)(a4 + 144);
  if (*(_BYTE *)(v14 + 128))
  {
    *(_QWORD *)&v293 = v312.i64[0];
    *((_QWORD *)&v293 + 1) = v309;
    v229.i64[1] = v310;
    *v292 = v293;
    *(int8x16_t *)(a4 + 160) = v229;
    v230.i64[1] = v311;
    *(int8x16_t *)(a4 + 176) = v230;
    v253 = v245;
    v255 = v355;
    v254 = v360;
    if (!*(_BYTE *)(v16 + 20))
      goto LABEL_192;
LABEL_191:
    *(_QWORD *)&v256 = vextq_s8(v326, v326, 8uLL).u64[0];
    v257 = (int8x16_t)vsubq_f64(vmulq_n_f64(v228, v256), vmulq_n_f64(v227, v325));
    v258 = (int8x16_t)vsubq_f64(vmulq_n_f64(v226, v325), vmulq_n_f64(v228, *(double *)v326.i64));
    v259 = (int8x16_t)vsubq_f64(vmulq_n_f64(v227, *(double *)v326.i64), vmulq_n_f64(v226, v256));
    v257.i64[1] = vextq_s8(v257, v257, 8uLL).u64[0];
    v258.i64[1] = vextq_s8(v258, v258, 8uLL).u64[0];
    *(int8x16_t *)(a4 + 192) = v257;
    *(int8x16_t *)(a4 + 208) = v258;
    v259.i64[1] = vextq_s8(v259, v259, 8uLL).u64[0];
    *(int8x16_t *)(a4 + 224) = v259;
    *(float64x2_t *)(a4 + 240) = v223;
    *(float64x2_t *)(a4 + 256) = v224;
    *(float64x2_t *)(a4 + 272) = v225;
    goto LABEL_192;
  }
  *(_OWORD *)(a4 + 160) = 0u;
  *(_OWORD *)(a4 + 176) = 0u;
  *v292 = 0u;
  v253 = v245;
  v255 = v355;
  v254 = v360;
  if (*(_BYTE *)(v16 + 20))
    goto LABEL_191;
LABEL_192:
  v260 = (float64x2_t *)(a4 + 288);
  if (*(_BYTE *)(v15 + 20))
  {
    _D3 = vextq_s8(v327, v327, 8uLL).u64[0];
    _V23.D[1] = v332;
    __asm { FMLA            D4, D3, V23.D[1] }
    v218.f64[1] = v346;
    v264 = _D4 + v341 * *(double *)&v328;
    v265 = vmlaq_f64(vmlaq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v337, v330), *(double *)v327.i64), (float64x2_t)vdupq_laneq_s64((int64x2_t)v327, 1), (float64x2_t)vzip2q_s64(v337, v330)), (float64x2_t)vdupq_lane_s64(v328, 0), v218);
    v266 = (int8x16_t)vsubq_f64(vmulq_laneq_f64(v217, v265, 1), vmulq_n_f64(v216, v264));
    v267 = (int8x16_t)vsubq_f64(vmulq_n_f64(v215, v264), vmulq_n_f64(v217, v265.f64[0]));
    v268 = (int8x16_t)vsubq_f64(vmulq_n_f64(v216, v265.f64[0]), vmulq_laneq_f64(v215, v265, 1));
    v266.i64[1] = vextq_s8(v266, v266, 8uLL).u64[0];
    v267.i64[1] = vextq_s8(v267, v267, 8uLL).u64[0];
    v268.i64[1] = vextq_s8(v268, v268, 8uLL).u64[0];
    *v260 = (float64x2_t)v266;
    *(int8x16_t *)(a4 + 304) = v267;
    *(int8x16_t *)(a4 + 320) = v268;
    *(float64x2_t *)(a4 + 336) = vnegq_f64(v223);
    *(float64x2_t *)(a4 + 352) = vnegq_f64(v224);
    *(float64x2_t *)(a4 + 368) = vnegq_f64(v225);
  }
  if (*(_BYTE *)(v361 + 20))
    *(float64x2_t *)(a4 + 736) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v226, v251.f64[0]), v227, v251, 1), v228, v246), v239.f64[0]), vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v226, v250.f64[0]), v227, v250, 1), v228, v255), v239, 1), vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v226, v254.f64[0]), v227, v254, 1), v228, v253), v240);
  if (*(_BYTE *)(v249 + 144))
  {
    if (*(_BYTE *)(v248 + 144))
      goto LABEL_198;
LABEL_202:
    *(_OWORD *)(a4 + 480) = 0u;
    *(_OWORD *)(a4 + 496) = 0u;
    *(_OWORD *)(a4 + 448) = 0u;
    *(_OWORD *)(a4 + 464) = 0u;
LABEL_203:
    if (!v350)
      goto LABEL_205;
    goto LABEL_204;
  }
  *(_OWORD *)(a4 + 416) = 0u;
  *(_OWORD *)(a4 + 432) = 0u;
  *(_OWORD *)(a4 + 384) = 0u;
  *(_OWORD *)(a4 + 400) = 0u;
  if (!*(_BYTE *)(v248 + 144))
    goto LABEL_202;
LABEL_198:
  if (!v349)
    goto LABEL_203;
  v269 = *(_QWORD *)(v248 + 24);
  if (*(_BYTE *)(v269 + 40))
  {
    __asm { FMOV            V3.2D, #1.0 }
    _Q3.f64[0] = *(float64_t *)(v269 + 32);
    v271 = (float64x2_t)xmmword_2102DD520;
    v272 = (float64x2_t)xmmword_21030D320;
    v273 = 0uLL;
    v274 = 0uLL;
    v275 = 0uLL;
    v276 = 0uLL;
    v277 = 0uLL;
  }
  else
  {
    v277 = (float64x2_t)xmmword_2103BBE60;
    v271 = (float64x2_t)unk_2103BBE70;
    v276 = (float64x2_t)xmmword_2103BBE40;
    v272 = (float64x2_t)unk_2103BBE50;
    _Q3 = (float64x2_t)xmmword_2103BBE20;
    v275 = (float64x2_t)unk_2103BBE30;
    v273 = (float64x2_t)xmmword_2103BBE00;
    v274 = *(float64x2_t *)algn_2103BBE10;
  }
  v294 = v391;
  v295 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v394, v273.f64[0]), v393, v273, 1), v392, v274.f64[0]), v391, v274, 1);
  v296 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v394, _Q3.f64[0]), v393, _Q3, 1), v392, v275.f64[0]), v391, v275, 1);
  v297 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v394, v276.f64[0]), v393, v276, 1), v392, v272.f64[0]), v391, v272, 1);
  v298 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v394, v277.f64[0]), v393, v277, 1), v392, v271.f64[0]);
  *(float64x2_t *)(a4 + 448) = v295;
  *(float64x2_t *)(a4 + 464) = v296;
  *(float64x2_t *)(a4 + 480) = v297;
  *(float64x2_t *)(a4 + 496) = vmlaq_laneq_f64(v298, v294, v271, 1);
  if (v350)
  {
LABEL_204:
    *(float64x2_t *)(a4 + 576) = v306;
    *(float64x2_t *)(a4 + 592) = v305;
    *(float64x2_t *)(a4 + 608) = v304;
    *(float64x2_t *)(a4 + 624) = v303;
  }
LABEL_205:
  if (v37)
  {
    v7.i64[1] = v5;
    v8.i64[1] = v314;
    *(int8x16_t *)(a4 + 688) = v7;
    *(int8x16_t *)(a4 + 704) = v8;
    v9.i64[1] = v315;
    *(int8x16_t *)(a4 + 720) = v9;
  }
  if (*(_BYTE *)(*a2 + 20))
  {
    v278 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vmulq_f64(*(float64x2_t *)a4, *(float64x2_t *)a4), vmulq_f64(*(float64x2_t *)(a4 + 64), *(float64x2_t *)(a4 + 64))), vmulq_f64(*(float64x2_t *)(a4 + 32), *(float64x2_t *)(a4 + 32))), vmaxnmq_f64(vmaxnmq_f64(vmulq_f64(*(float64x2_t *)(a4 + 16), *(float64x2_t *)(a4 + 16)), vmulq_f64(*(float64x2_t *)(a4 + 80), *(float64x2_t *)(a4 + 80))), vmulq_f64(*(float64x2_t *)(a4 + 48), *(float64x2_t *)(a4 + 48))))) < 100000000.0;
    if (*(_BYTE *)(a2[1] + 20))
LABEL_209:
      v278 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vmulq_f64(*v252, *v252), vmulq_f64(v252[4], v252[4])), vmulq_f64(v252[2], v252[2])), vmaxnmq_f64(vmaxnmq_f64(vmulq_f64(v252[1], v252[1]), vmulq_f64(v252[5], v252[5])), vmulq_f64(v252[3], v252[3])))) < 100000000.0&& v278;
  }
  else
  {
    v278 = 1;
    if (*(_BYTE *)(a2[1] + 20))
      goto LABEL_209;
  }
  if (*(_BYTE *)(a2[2] + 20))
    v278 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vmulq_f64(*(float64x2_t *)(a4 + 192), *(float64x2_t *)(a4 + 192)), vmulq_f64(*(float64x2_t *)(a4 + 256), *(float64x2_t *)(a4 + 256))), vmulq_f64(*(float64x2_t *)(a4 + 224), *(float64x2_t *)(a4 + 224))), vmaxnmq_f64(vmaxnmq_f64(vmulq_f64(*(float64x2_t *)(a4 + 208), *(float64x2_t *)(a4 + 208)), vmulq_f64(*(float64x2_t *)(a4 + 272), *(float64x2_t *)(a4 + 272))), vmulq_f64(*(float64x2_t *)(a4 + 240), *(float64x2_t *)(a4 + 240))))) < 100000000.0&& v278;
  if (*(_BYTE *)(a2[3] + 20))
    v278 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vmulq_f64(*v260, *v260), vmulq_f64(*(float64x2_t *)(a4 + 352), *(float64x2_t *)(a4 + 352))), vmulq_f64(*(float64x2_t *)(a4 + 320), *(float64x2_t *)(a4 + 320))), vmaxnmq_f64(vmaxnmq_f64(vmulq_f64(*(float64x2_t *)(a4 + 304), *(float64x2_t *)(a4 + 304)), vmulq_f64(*(float64x2_t *)(a4 + 368), *(float64x2_t *)(a4 + 368))), vmulq_f64(*(float64x2_t *)(a4 + 336), *(float64x2_t *)(a4 + 336))))) < 100000000.0&& v278;
  if (*(_BYTE *)(a2[4] + 20))
    v278 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmulq_f64(*(float64x2_t *)(a4 + 384), *(float64x2_t *)(a4 + 384)), vmulq_f64(*(float64x2_t *)(a4 + 416), *(float64x2_t *)(a4 + 416))), vmaxnmq_f64(vmulq_f64(*(float64x2_t *)(a4 + 400), *(float64x2_t *)(a4 + 400)), vmulq_f64(*(float64x2_t *)(a4 + 432), *(float64x2_t *)(a4 + 432))))) < 100000000.0&& v278;
  if (*(_BYTE *)(a2[5] + 20))
    v278 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmulq_f64(*(float64x2_t *)(a4 + 448), *(float64x2_t *)(a4 + 448)), vmulq_f64(*(float64x2_t *)(a4 + 480), *(float64x2_t *)(a4 + 480))), vmaxnmq_f64(vmulq_f64(*(float64x2_t *)(a4 + 464), *(float64x2_t *)(a4 + 464)), vmulq_f64(*(float64x2_t *)(a4 + 496), *(float64x2_t *)(a4 + 496))))) < 100000000.0&& v278;
  if (*(_BYTE *)(a2[6] + 20))
    v278 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmulq_f64(*(float64x2_t *)(a4 + 512), *(float64x2_t *)(a4 + 512)), vmulq_f64(*(float64x2_t *)(a4 + 544), *(float64x2_t *)(a4 + 544))), vmaxnmq_f64(vmulq_f64(*(float64x2_t *)(a4 + 528), *(float64x2_t *)(a4 + 528)), vmulq_f64(*(float64x2_t *)(a4 + 560), *(float64x2_t *)(a4 + 560))))) < 100000000.0&& v278;
  if (*(_BYTE *)(a2[7] + 20))
    v278 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmulq_f64(*(float64x2_t *)(a4 + 576), *(float64x2_t *)(a4 + 576)), vmulq_f64(*(float64x2_t *)(a4 + 608), *(float64x2_t *)(a4 + 608))), vmaxnmq_f64(vmulq_f64(*(float64x2_t *)(a4 + 592), *(float64x2_t *)(a4 + 592)), vmulq_f64(*(float64x2_t *)(a4 + 624), *(float64x2_t *)(a4 + 624))))) < 100000000.0&& v278;
  if (*(_BYTE *)(a2[8] + 20))
    v278 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmulq_f64(*(float64x2_t *)(a4 + 640), *(float64x2_t *)(a4 + 640)), vmulq_f64(*(float64x2_t *)(a4 + 672), *(float64x2_t *)(a4 + 672))), vmulq_f64(*(float64x2_t *)(a4 + 656), *(float64x2_t *)(a4 + 656)))) < 100000000.0&& v278;
  if (*(_BYTE *)(a2[9] + 20))
    v278 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmulq_f64(*(float64x2_t *)(a4 + 688), *(float64x2_t *)(a4 + 688)), vmulq_f64(*(float64x2_t *)(a4 + 720), *(float64x2_t *)(a4 + 720))), vmulq_f64(*(float64x2_t *)(a4 + 704), *(float64x2_t *)(a4 + 704)))) < 100000000.0&& v278;
  if (*(_BYTE *)(a2[10] + 20))
    return vmaxnmvq_f64(vmulq_f64(*(float64x2_t *)(a4 + 736), *(float64x2_t *)(a4 + 736))) < 100000000.0 && v278;
  return v278;
}

uint64_t sub_20FC7CE50(float64x2_t *a1, uint64_t a2, int64x2_t *a3)
{
  double v3;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  int v15;
  int v16;
  float64x2_t v18;
  double v19;
  double v21;
  int v22;
  double v23;
  int v24;
  double v25;
  float64x2_t v26;

  v3 = *(double *)(a2 + 16);
  _Q0 = *(float64x2_t *)a2;
  _D1 = *(_QWORD *)(a2 + 8);
  __asm { FMLA            D6, D1, V0.D[1] }
  v10 = sqrt(_D6);
  v11 = fabs(v3);
  v12 = fabs(v10);
  v13 = v11 / v12;
  if (v11 >= v12)
    v13 = v12 / v11;
  if (v13 > 0.414213562)
  {
    v14 = (v12 - v11) / (v11 + v12);
    if (v11 >= v12)
      v14 = -v14;
    v15 = -1;
    v16 = 1;
    if (_D6 >= 0.00000001)
      goto LABEL_7;
LABEL_31:
    *a1 = vmulq_n_f64(_Q0, 1.0 / v3);
    return 1;
  }
  v15 = 1;
  v16 = 2;
  v14 = v13;
  if (_D6 < 0.00000001)
    goto LABEL_31;
LABEL_7:
  if (v11 < v12)
    v15 = -v15;
  else
    v16 = v13 > 0.414213562;
  _ZF = v10 == INFINITY && v11 == INFINITY;
  v18 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v14 * v14), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v14 * v14), (float64x2_t)xmmword_210315370), v14 * v14 * (v14 * v14))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v14 * v14), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v14 * v14), (float64x2_t)xmmword_210315380), v14 * v14 * (v14 * v14))), v14 * v14 * (v14 * v14) * (v14 * v14 * (v14 * v14))));
  v19 = v14 + v14 * vdivq_f64(v18, (float64x2_t)vdupq_laneq_s64((int64x2_t)v18, 1)).f64[0];
  if (_ZF)
    v19 = 0.785398163;
  if (v10 == 0.0 && v3 == 0.0)
    v21 = 0.0;
  else
    v21 = v19;
  if (*(uint64_t *)(a2 + 16) < 0)
  {
    v16 = 4 - v16;
    v15 = -v15;
  }
  if (v10 >= 0.0)
    v22 = v16;
  else
    v22 = -v16;
  v23 = (double)v22;
  if (v10 >= 0.0)
    v24 = v15;
  else
    v24 = -v15;
  v25 = v23 * 3.061617e-17 + v23 * 0.785398163 + v21 * (double)v24;
  v26 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*a3, a3[1]), vmulq_n_f64((float64x2_t)vzip2q_s64(*a3, a3[1]), v25 * v25)), v25 * v25);
  *a1 = vmulq_n_f64(_Q0, 1.0 / v10 * (v25 + v25 * (v26.f64[0] + vmuld_lane_f64(v25 * v25 * (v25 * v25), v26, 1))));
  return 1;
}

uint64_t sub_20FC7D060(float64x2_t *a1, uint64_t a2, double *a3)
{
  double v3;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  int v15;
  int v16;
  float64x2_t v17;
  float64x2_t v18;
  double v20;
  double v22;
  int v23;
  double v24;
  int v25;
  double v26;

  v3 = *(double *)(a2 + 16);
  _Q0 = *(float64x2_t *)a2;
  _D1 = *(_QWORD *)(a2 + 8);
  __asm { FMLA            D6, D1, V0.D[1] }
  v10 = sqrt(_D6);
  v11 = fabs(v3);
  v12 = fabs(v10);
  v13 = v11 / v12;
  if (v11 >= v12)
    v13 = v12 / v11;
  if (v13 > 0.414213562)
  {
    v14 = (v12 - v11) / (v11 + v12);
    if (v11 >= v12)
      v14 = -v14;
    v15 = -1;
    v16 = 1;
    if (_D6 >= 0.00000001)
      goto LABEL_7;
LABEL_31:
    *a1 = vmulq_n_f64(_Q0, 1.0 / v3);
    return 1;
  }
  v15 = 1;
  v16 = 2;
  v14 = v13;
  if (_D6 < 0.00000001)
    goto LABEL_31;
LABEL_7:
  if (v11 < v12)
    v15 = -v15;
  else
    v16 = v13 > 0.414213562;
  v17 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v14 * v14), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v14 * v14), (float64x2_t)xmmword_210315370), v14 * v14 * (v14 * v14))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v14 * v14), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v14 * v14), (float64x2_t)xmmword_210315380), v14 * v14 * (v14 * v14))), v14 * v14 * (v14 * v14) * (v14 * v14 * (v14 * v14))));
  v18 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v17, 1);
  _ZF = v10 == INFINITY && v11 == INFINITY;
  v20 = v14 + v14 * vdivq_f64(v17, v18).f64[0];
  if (_ZF)
    v20 = 0.785398163;
  if (v10 == 0.0 && v3 == 0.0)
    v22 = 0.0;
  else
    v22 = v20;
  if (*(uint64_t *)(a2 + 16) < 0)
  {
    v16 = 4 - v16;
    v15 = -v15;
  }
  if (v10 >= 0.0)
    v23 = v16;
  else
    v23 = -v16;
  v24 = (double)v23;
  if (v10 >= 0.0)
    v25 = v15;
  else
    v25 = -v15;
  v26 = v24 * 3.061617e-17 + v24 * 0.785398163 + v22 * (double)v25;
  *a1 = vmulq_n_f64(_Q0, 1.0/ v10* (v26* (v26* v26* (*a3+ v26* v26* (a3[1]+ v26 * v26 * (a3[2] + v26 * v26 * (a3[3] + v26 * v26 * (a3[4] + v26 * v26 * (a3[5] + v26 * v26 * a3[6]))))))+ 1.0)));
  return 1;
}

double sub_20FC7D290(uint64_t a1, double *a2, double *a3)
{
  double v6;
  double v8;
  double v15;
  double v16;
  double v17;
  double v18;
  double cosval;
  double v20;
  __double2 v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double result;
  double v44;
  int8x16_t v45;
  double v46;

  v6 = *(double *)(a1 + 16);
  _Q7 = *(int8x16_t *)a1;
  *(_QWORD *)&v8 = vextq_s8(_Q7, _Q7, 8uLL).u64[0];
  _D1 = *(_QWORD *)(a1 + 8);
  __asm { FMLA            D0, D1, V7.D[1] }
  v15 = _D0 + v6 * v6;
  if (v15 >= 0.0000002635)
  {
    v20 = sqrt(v15);
    v45 = *(int8x16_t *)a1;
    v46 = *(double *)(a1 + 16);
    v44 = v8;
    v21 = __sincos_stret(v20);
    cosval = v21.__cosval;
    v8 = v44;
    _Q7.i64[0] = v45.i64[0];
    v6 = v46;
    v18 = v21.__sinval / v20;
    v16 = 1.0 / v15 * (1.0 - v21.__cosval);
    v17 = 1.0 / v15 * (1.0 - v21.__sinval / v20);
  }
  else
  {
    v16 = 0.5 - v15 * (v15 / -720.0 + 0.0416666667);
    v17 = 0.166666667 - v15 * (v15 / -5040.0 + 0.00833333333);
    v18 = 1.0 - v15 * v17;
    cosval = 1.0 - v15 * v16;
  }
  v22 = *(double *)_Q7.i64 * v16;
  v23 = v8 * v16;
  *a2 = *(double *)_Q7.i64 * (*(double *)_Q7.i64 * v16) + cosval;
  a2[4] = cosval + v23 * *(double *)(a1 + 8);
  a2[8] = cosval + v6 * v16 * *(double *)(a1 + 16);
  v24 = *(double *)(a1 + 8);
  v25 = *(double *)_Q7.i64 * v16 * v24;
  v26 = *(double *)(a1 + 16);
  v27 = v22 * v26;
  v28 = v23 * v26;
  v29 = v18 * *(double *)a1;
  v30 = v18 * v24;
  v31 = v18 * v26;
  a2[6] = v30 + v27;
  a2[7] = v28 - v29;
  a2[1] = v25 + v31;
  a2[2] = v27 - v30;
  a2[3] = v25 - v31;
  a2[5] = v28 + v29;
  v32 = v17 * *(double *)a1;
  v33 = v17 * *(double *)(a1 + 8);
  v34 = v17 * *(double *)(a1 + 16);
  *a3 = v18 + *(double *)a1 * v32;
  a3[4] = v18 + v33 * *(double *)(a1 + 8);
  a3[8] = v18 + v34 * *(double *)(a1 + 16);
  v35 = *(double *)(a1 + 8);
  v36 = v32 * v35;
  v37 = *(double *)(a1 + 16);
  v38 = v32 * v37;
  v39 = v33 * v37;
  v40 = v16 * *(double *)a1;
  v41 = v16 * v35;
  v42 = v16 * v37;
  a3[6] = v41 + v38;
  a3[7] = v39 - v40;
  a3[1] = v36 + v42;
  a3[2] = v38 - v41;
  a3[3] = v36 - v42;
  result = v39 + v40;
  a3[5] = v39 + v40;
  return result;
}

void sub_20FC7D4B0(uint64_t a1, uint64_t a2, float64x2_t *a3, uint64_t a4, float64x2_t a5, __n128 a6)
{
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v10;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  double v22;
  double v23;
  double v24;
  __double2 v25;
  __int128 v26;
  double v27;
  double v28;
  double v29;
  float64_t v30;
  float64_t v31;
  float64_t v32;
  double v33;
  float64_t v34;
  __int128 v35;
  double v36;
  double v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  double v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v50;
  double v54;
  float64x2_t v56;
  float64x2_t v58;
  float64x2_t v60;
  double v62;
  float64x2_t v64;
  double v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64_t v71;
  float64x2_t v72;

  a6.n128_u64[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)&v10.f64[0] = *(_OWORD *)&vmulq_f64(a5, (float64x2_t)a6);
  _Q26 = vmulq_n_f64(*(float64x2_t *)a1, a5.f64[0]);
  v12 = (float64x2_t)vextq_s8((int8x16_t)_Q26, (int8x16_t)_Q26, 8uLL);
  a6.n128_u64[0] = *(_QWORD *)(a2 + 16);
  v13 = vmulq_f64(a5, (float64x2_t)a6);
  v14 = vmulq_n_f64(*(float64x2_t *)a2, a5.f64[0]);
  v15 = (float64x2_t)vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL);
  _D9 = _Q26.f64[1];
  __asm { FMLA            D2, D9, V26.D[1] }
  v22 = vmlad_n_f64(_D2, v10.f64[0], v10.f64[0]);
  if (v22 >= 0.0000002635)
  {
    v24 = sqrt(v22);
    v71 = v10.f64[0];
    v72 = v13;
    v69 = v12;
    v70 = _Q26;
    v67 = v15;
    v68 = v14;
    v66 = v22;
    v25 = __sincos_stret(v24);
    a6.n128_f64[0] = v25.__cosval;
    v15 = v67;
    v14 = v68;
    v12 = v69;
    _Q26 = v70;
    v10.f64[0] = v71;
    v13 = v72;
    v23 = v25.__sinval / v24;
    v7.f64[0] = 1.0 / v66 * (1.0 - v25.__cosval);
    v6.f64[0] = 1.0 / v66 * (1.0 - v25.__sinval / v24);
  }
  else
  {
    v7.f64[0] = 0.5 - v22 * (v22 / -720.0 + 0.0416666667);
    v6.f64[0] = 0.166666667 - v22 * (v22 / -5040.0 + 0.00833333333);
    v23 = 1.0 - v22 * v6.f64[0];
    a6.n128_f64[0] = 1.0 - v22 * v7.f64[0];
  }
  *(double *)&v26 = _Q26.f64[0] * (_Q26.f64[0] * v7.f64[0]) + a6.n128_f64[0];
  v27 = _D9 * (_D9 * v7.f64[0]) + a6.n128_f64[0];
  v28 = v10.f64[0] * (v10.f64[0] * v7.f64[0]) + a6.n128_f64[0];
  v29 = _D9 * (_Q26.f64[0] * v7.f64[0]);
  v30 = v10.f64[0] * (_Q26.f64[0] * v7.f64[0]);
  v31 = v10.f64[0] * (_D9 * v7.f64[0]);
  v32 = _Q26.f64[0] * v23;
  v33 = _D9 * v23;
  v34 = v10.f64[0] * v23;
  *(double *)&v35 = v29 - v10.f64[0] * v23;
  a6.n128_f64[0] = v30 + v33;
  v36 = v29 + v34;
  _D7 = v31 - v32;
  v38 = v30 - v33;
  v39.f64[0] = v12.f64[0];
  v39.f64[1] = v10.f64[0];
  v40.f64[0] = v13.f64[0];
  v40.f64[1] = v14.f64[0];
  v41.f64[0] = v14.f64[0];
  v41.f64[1] = v15.f64[0];
  v42 = v31 + v32;
  v10.f64[1] = _Q26.f64[0];
  v43.f64[0] = v15.f64[0];
  v43.f64[1] = v13.f64[0];
  v44 = vmlsq_f64(vmulq_f64(v39, v40), v10, v43);
  v45 = vmlsq_f64(vmulq_f64(_Q26, v15), v12, v14);
  v46 = vmlaq_n_f64(v41, v44, v7.f64[0]);
  v47 = vmlaq_f64(v13, v7, v45);
  v48 = (float64x2_t)vextq_s8((int8x16_t)v44, (int8x16_t)v45, 8uLL);
  v45.f64[1] = v44.f64[0];
  *(_QWORD *)&v47.f64[0] = *(_OWORD *)&vmlaq_f64(v47, v6, vmlsq_f64(vmulq_laneq_f64(_Q26, v44, 1), v12, v44));
  _Q23 = vmlaq_n_f64(v46, vmlsq_f64(vmulq_f64(v39, v45), v10, v48), v6.f64[0]);
  *(_QWORD *)&v48.f64[0] = v26;
  *(_QWORD *)&v48.f64[1] = v35;
  v43.f64[0] = v36;
  v43.f64[1] = v27;
  v44.f64[0] = v38;
  v44.f64[1] = v42;
  v50 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v48, _Q23.f64[0]), v43, _Q23, 1), v44, v47.f64[0]);
  _Q21 = vmulq_f64((float64x2_t)a6, _Q23);
  __asm { FMLA            D21, D7, V23.D[1] }
  _Q21.f64[0] = vmlad_n_f64(_Q21.f64[0], v28, v47.f64[0]);
  v45.f64[0] = a3[1].f64[0];
  _Q23 = *a3;
  v47.f64[0] = a3[2].f64[1];
  _Q25 = *(float64x2_t *)((char *)a3 + 24);
  v54 = a3[4].f64[0];
  _Q27 = a3[3];
  v56 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v48, a3->f64[0]), v43, *a3, 1), v44, v45.f64[0]);
  __asm { FMLA            D29, D7, V23.D[1] }
  v45.f64[0] = _D29 + v28 * v45.f64[0];
  v58 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v48, _Q25.f64[0]), v43, _Q25, 1), v44, v47.f64[0]);
  __asm { FMLA            D29, D7, V25.D[1] }
  v47.f64[0] = _D29 + v28 * v47.f64[0];
  v60 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v48, _Q27.f64[0]), v43, _Q27, 1), v44, v54);
  __asm { FMLA            D29, D7, V27.D[1] }
  v62 = _D29 + v28 * v54;
  _Q27.f64[0] = a3[5].f64[1];
  _Q29 = *(float64x2_t *)((char *)a3 + 72);
  v64 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v48, _Q29.f64[0]), v43, _Q29, 1), v44, _Q27.f64[0]);
  _Q19 = vmulq_f64((float64x2_t)a6, _Q29);
  __asm { FMLA            D19, D7, V29.D[1] }
  _Q19.f64[0] = _Q19.f64[0] + v28 * _Q27.f64[0];
  *a3 = v56;
  a3[1].f64[0] = v45.f64[0];
  *(float64x2_t *)((char *)a3 + 24) = v58;
  a3[2].f64[1] = v47.f64[0];
  a3[3] = v60;
  a3[4].f64[0] = v62;
  *(float64x2_t *)((char *)a3 + 72) = vsubq_f64(v64, v50);
  *(_QWORD *)&a3[5].f64[1] = *(_OWORD *)&vsubq_f64(_Q19, _Q21);
  if (a4)
  {
    a6.n128_f64[1] = _D7;
    *(double *)(a4 + 16) = v38;
    *((double *)&v26 + 1) = v36;
    *(_OWORD *)a4 = v26;
    *((double *)&v35 + 1) = v27;
    *(double *)(a4 + 40) = v42;
    *(_OWORD *)(a4 + 24) = v35;
    *(double *)(a4 + 64) = v28;
    a6.n128_u64[1] = vextq_s8((int8x16_t)a6, (int8x16_t)a6, 8uLL).u64[0];
    *(__n128 *)(a4 + 48) = a6;
  }
}

uint64_t sub_20FC7D7A0(uint64_t a1, uint64_t *a2, double *a3, double a4, double a5, double a6, double a7, float64x2_t _Q4, double a9, double a10, float64x2_t a11)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  float64x2_t v20;
  __int128 v21;
  __int128 v22;
  __n128 v23;
  float64x2_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  double v31;
  float64x2_t v32;
  __n128 v33;
  int v34;
  double v35;
  const double *v36;
  double v38;
  float64x2_t v44;
  float64x2_t v46;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  unsigned int v52;
  unsigned int v53;
  char v54;
  double v55;
  double v56;
  double v58;
  double v61;
  float64x2_t v65;
  float64x2_t v66;
  double v67;
  double v68;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  int v77;
  int v78;
  float64x2_t v79;
  float64x2_t v80;
  double v82;
  double v84;
  int v85;
  double v86;
  int v87;
  double v88;
  double v89;
  double v90;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  int v98;
  int v99;
  double v100;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  int v109;
  int v110;
  double v111;
  double v112;
  BOOL v113;
  double v114;
  double v115;
  double v116;
  double v117;
  BOOL v118;
  float64x2_t v119;
  double v120;
  double v122;
  int v123;
  double v124;
  int v125;
  double v126;
  float64x2_t v127;
  BOOL v128;
  float64x2_t v129;
  double v130;
  double v132;
  int v133;
  double v134;
  int v135;
  double v136;
  float64x2_t v137;
  double v139;
  float64x2_t v140;
  double v144;
  int64x2_t v145;
  _BYTE v146[32];
  __int128 v147;
  double v148;
  float64x2_t v149;
  float64_t v150;
  float64x2_t v151;
  _BYTE v152[32];
  float64x2_t v153;
  double v154;
  float64x2_t v155;
  unint64_t v156;
  float64x2_t v157;
  double v158;
  float64x2_t v159;
  uint64_t v160;
  float64x2x3_t v161;

  v160 = *MEMORY[0x24BDAC8D0];
  v14 = *a2;
  v13 = a2[1];
  v16 = a2[2];
  v15 = a2[3];
  v17 = a2[10];
  v18 = *(_QWORD *)(v17 + 24);
  if (*(_BYTE *)(v18 + 58) && !*(_BYTE *)(v18 + 57))
    return 0;
  v19 = *(_OWORD *)(v14 + 48);
  v20 = *(float64x2_t *)(v14 + 80);
  *(_OWORD *)&v152[16] = *(_OWORD *)(v14 + 64);
  v153 = v20;
  v154 = *(double *)(v14 + 96);
  v151 = *(float64x2_t *)(v14 + 32);
  *(_OWORD *)v152 = v19;
  v155 = *(float64x2_t *)(v14 + 104);
  v156 = *(_QWORD *)(v14 + 120);
  v21 = *(_OWORD *)(v13 + 48);
  v22 = *(_OWORD *)(v13 + 80);
  *(_OWORD *)&v146[16] = *(_OWORD *)(v13 + 64);
  v147 = v22;
  v148 = *(double *)(v13 + 96);
  v23 = *(__n128 *)(v13 + 32);
  v145 = (int64x2_t)v23;
  *(_OWORD *)v146 = v21;
  v24 = *(float64x2_t *)(v13 + 104);
  v149 = v24;
  v150 = *(double *)(v13 + 120);
  v25 = *(_QWORD *)(a1 + 40);
  if (*(double *)(v25 + 1424) > 0.0)
  {
    v26 = *(_QWORD *)(v18 + 96);
    if (v26)
    {
      v27 = *(_QWORD *)(v26 + 64);
      v23.n128_u64[0] = *(_QWORD *)(v27 + 1424);
      v24.f64[0] = 0.0;
      if (v23.n128_f64[0] <= 0.0)
      {
LABEL_7:
        v28 = *(_QWORD *)(a1 + 40);
        v29 = *(double *)(a1 + 16);
        v30 = *(double *)(v28 + 1432);
        v31 = *(double *)(v28 + 1424);
        sub_20FC7D4B0(v16 + 136, v16 + 160, &v151, 0, v24, v23);
        v32.f64[0] = (v29 - v30) * v31;
        sub_20FC7D4B0(v15 + 136, v15 + 160, (float64x2_t *)&v145, 0, v32, v33);
        v18 = *(_QWORD *)(v17 + 24);
        v25 = *(_QWORD *)(a1 + 40);
        goto LABEL_8;
      }
    }
    else
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioanchoredpoint3d.hpp", 63, (uint64_t)"this->anchor_kf_pose_", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v27 = *(_QWORD *)(*(_QWORD *)(v18 + 96) + 64);
      v23.n128_u64[0] = *(_QWORD *)(v27 + 1424);
      v24.f64[0] = 0.0;
      if (v23.n128_f64[0] <= 0.0)
        goto LABEL_7;
    }
    v24.f64[0] = v23.n128_f64[0] * (*(double *)(v18 + 88) - *(double *)(v27 + 1432));
    goto LABEL_7;
  }
LABEL_8:
  v34 = *(unsigned __int8 *)(v18 + 56);
  v35 = *(double *)(a1 + 48);
  v24.f64[0] = *(float64_t *)(v17 + 32);
  v36 = (const double *)(v15 + 32);
  v23.n128_u64[0] = *(_QWORD *)(v18 + 80);
  _Q2 = *(float64x2_t *)(v18 + 64);
  *(_QWORD *)&v38 = *(_OWORD *)&vmulq_f64(v24, (float64x2_t)v23);
  _Q0 = vmulq_n_f64(_Q2, v24.f64[0]);
  _Q4.f64[0] = *(float64_t *)&v152[24];
  __asm { FMLA            D2, D4, V0.D[1] }
  *(_QWORD *)&_Q4.f64[0] = v156;
  _Q2.f64[0] = vmlad_n_f64(_Q2.f64[0], v154, v38);
  _D5 = *(_QWORD *)(v16 + 72);
  v44 = vaddq_f64(_Q2, _Q4);
  _Q3 = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v151, _Q0.f64[0]), *(float64x2_t *)&v152[8], _Q0, 1), v153, v38), v155);
  v46 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v16 + 32), _Q3.f64[0]), *(float64x2_t *)(v16 + 56), _Q3, 1), *(float64x2_t *)(v16 + 80), v44.f64[0]);
  __asm { FMLA            D0, D5, V3.D[1] }
  _Q0.f64[0] = vmlad_n_f64(_Q0.f64[0], *(double *)(v16 + 96), v44.f64[0]);
  v44.f64[0] = *(float64_t *)(v16 + 120);
  v161 = vld3q_f64(v36);
  _Q6 = *(float64x2_t *)(v15 + 80);
  a11.f64[0] = *(float64_t *)(v15 + 120);
  *(_QWORD *)&_Q0.f64[0] = *(_OWORD *)&vsubq_f64(vaddq_f64(v44, _Q0), a11);
  _Q1 = vsubq_f64(vaddq_f64(*(float64x2_t *)(v16 + 104), v46), *(float64x2_t *)(v15 + 104));
  v49 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v161.val[0], _Q1.f64[0]), v161.val[1], _Q1, 1), v161.val[2], _Q0.f64[0]);
  v161.val[0] = vmulq_f64(_Q6, _Q1);
  _Q1.f64[0] = _Q1.f64[1];
  __asm { FMLA            D3, D1, V6.D[1] }
  v161.val[0].f64[0] = vmlad_n_f64(v161.val[0].f64[0], *(double *)(v15 + 96), _Q0.f64[0]);
  _Q0.f64[0] = *(float64_t *)v146;
  v161.val[2].f64[1] = *((float64_t *)&v147 + 1);
  _Q6.f64[0] = v150;
  *(_QWORD *)&v161.val[0].f64[0] = *(_OWORD *)&vsubq_f64(v161.val[0], _Q6);
  v50 = vsubq_f64(v49, v149);
  _Q0.f64[1] = *(float64_t *)&v146[24];
  v51 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v145, *(int64x2_t *)&v146[8]), v50.f64[0]), (float64x2_t)vzip2q_s64(v145, *(int64x2_t *)&v146[8]), v50, 1), _Q0, v161.val[0].f64[0]);
  _Q1.f64[0] = v50.f64[1];
  __asm { FMLA            D0, D1, V5.D[1] }
  v157 = v51;
  v158 = vmlad_n_f64(_Q0.f64[0], v148, v161.val[0].f64[0]);
  v52 = *(_DWORD *)(v25 + 992);
  if (v52 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v52 = *(_DWORD *)(v25 + 992);
    if (v52 <= 7)
      goto LABEL_10;
  }
  else if (v52 <= 7)
  {
LABEL_10:
    if (v52 <= 3)
    {
      if (v52 <= 1)
      {
        if (!v52)
        {
          sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
          abort();
        }
        if (v158 >= 0.00000001)
        {
          v159 = vmulq_n_f64(v157, 1.0 / v158);
          v53 = *(_DWORD *)(v25 + 992);
          if (v53 == -1)
            goto LABEL_183;
LABEL_115:
          if (v53 > 7)
            goto LABEL_185;
LABEL_116:
          if (v53 > 3)
          {
            v113 = v53 == 5;
            if (v53 > 5)
              goto LABEL_189;
            goto LABEL_187;
          }
          if (v53 <= 1)
          {
            if (!v53)
            {
              sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
              abort();
            }
            v112 = v159.f64[1];
            goto LABEL_190;
          }
          v65.f64[1] = v159.f64[1];
          goto LABEL_175;
        }
        return 0;
      }
      if (v52 != 2)
      {
        _V0.D[1] = v157.f64[1];
        _D1 = v157.f64[1];
        __asm { FMLA            D16, D1, V0.D[1] }
        v104 = sqrt(_D16);
        v105 = fabs(v158);
        v106 = fabs(v104);
        v107 = v105 / v106;
        if (v105 >= v106)
          v107 = v106 / v105;
        v108 = (v106 - v105) / (v105 + v106);
        if (v105 >= v106)
          v108 = -v108;
        if (v107 > 0.414213562)
          v109 = 1;
        else
          v109 = 2;
        if (v107 > 0.414213562)
          v110 = -1;
        else
          v110 = 1;
        if (v107 <= 0.414213562)
          v108 = v107;
        if (_D16 >= 0.00000001)
        {
          if (v105 < v106)
            v110 = -v110;
          else
            v109 = v107 > 0.414213562;
          v128 = v104 == INFINITY && v105 == INFINITY;
          v129 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v108 * v108), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v108 * v108), (float64x2_t)xmmword_210315370), v108 * v108 * (v108 * v108))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v108 * v108), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v108 * v108), (float64x2_t)xmmword_210315380), v108 * v108 * (v108 * v108))), v108 * v108 * (v108 * v108) * (v108 * v108 * (v108 * v108))));
          v130 = v108 + v108 * vdivq_f64(v129, (float64x2_t)vdupq_laneq_s64((int64x2_t)v129, 1)).f64[0];
          if (v128)
            v130 = 0.785398163;
          if (v104 == 0.0 && v158 == 0.0)
            v132 = 0.0;
          else
            v132 = v130;
          if (v158 < 0.0)
          {
            v109 = 4 - v109;
            v110 = -v110;
          }
          if (v104 >= 0.0)
            v133 = v109;
          else
            v133 = -v109;
          v134 = (double)v133;
          if (v104 >= 0.0)
            v135 = v110;
          else
            v135 = -v110;
          v136 = v134 * 3.061617e-17 + v134 * 0.785398163 + v132 * (double)v135;
          v137 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v25 + 168), *(int64x2_t *)(v25 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v25 + 168), *(int64x2_t *)(v25 + 184)), v136 * v136)), v136 * v136);
          v111 = 1.0 / v104 * (v136 + v136 * (v137.f64[0] + vmuld_lane_f64(v136 * v136 * (v136 * v136), v137, 1)));
        }
        else
        {
          v111 = 1.0 / v158;
        }
        v65 = vmulq_n_f64(v157, v111);
        v159 = v65;
        goto LABEL_175;
      }
      if (*(_DWORD *)(v25 + 212))
      {
        if (v158 < 0.00000001)
          return 0;
        _Q3 = vmulq_n_f64(v157, 1.0 / v158);
        _D0 = vmuld_lane_f64(1.0 / v158, v157, 1);
        __asm { FMLA            D2, D0, V3.D[1] }
        v65 = vaddq_f64(vaddq_f64(vmulq_f64(vaddq_f64((float64x2_t)vdupq_lane_s64(_D2, 0), vmulq_f64(_Q3, vaddq_f64(_Q3, _Q3))), (float64x2_t)vextq_s8(*(int8x16_t *)(v25 + 192), *(int8x16_t *)(v25 + 192), 8uLL)), vmulq_laneq_f64(vmulq_n_f64(vaddq_f64(*(float64x2_t *)(v25 + 192), *(float64x2_t *)(v25 + 192)), _Q3.f64[0]), _Q3, 1)), vmulq_n_f64(_Q3, *(double *)(v25 + 168) * *(double *)&_D2+ 1.0+ *(double *)&_D2 * (*(double *)(v25 + 176) * *(double *)&_D2)+ *(double *)&_D2 * (*(double *)&_D2 * (*(double *)(v25 + 184) * *(double *)&_D2))));
        v159 = v65;
LABEL_175:
        v112 = v65.f64[1];
        goto LABEL_190;
      }
      if (!sub_20EB14380(&v159, &v157, (double *)(v25 + 168)))
        return 0;
LABEL_114:
      v53 = *(_DWORD *)(v25 + 992);
      if (v53 == -1)
        goto LABEL_183;
      goto LABEL_115;
    }
    if (v52 <= 5)
    {
      if (v52 == 5)
      {
        v55 = v157.f64[0] * v157.f64[0] + v157.f64[1] * v157.f64[1];
        if (v55 >= 0.00000001)
        {
          v114 = sqrt(v55);
          if (v114 <= v158)
          {
            v139 = v114 / v158 * 0.785398163
                 - v114 / v158 * (v114 / v158 + -1.0) * (v114 / v158 * 0.0663008339 + 0.244711287);
          }
          else
          {
            if (v114 <= -v158)
            {
              v116 = v114 / v158 * 0.785398163
                   - v114 / v158 * (-1.0 - v114 / v158) * (v114 / v158 * -0.0663008339 + 0.244711287);
              v117 = 3.14159265;
            }
            else
            {
              v115 = fabs(v158 / v114);
              v116 = v158 / v114 * (v115 + -1.0) * (v115 * 0.0663008339 + 0.244711287) + v158 / v114 * -0.785398163;
              v117 = 1.57079633;
            }
            v139 = v116 + v117;
          }
          v140 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v25 + 168), *(int64x2_t *)(v25 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v25 + 168), *(int64x2_t *)(v25 + 184)), v139 * v139)), v139 * v139);
          v56 = (v139 + v139 * (v140.f64[0] + vmuld_lane_f64(v139 * v139 * (v139 * v139), v140, 1))) / v114;
        }
        else
        {
          if (v158 == 0.0)
            return 0;
          v56 = 1.0 / v158;
        }
        v159.f64[0] = v157.f64[0] * v56;
        v159.f64[1] = v157.f64[1] * v56;
        v53 = *(_DWORD *)(v25 + 992);
        if (v53 == -1)
          goto LABEL_183;
        goto LABEL_115;
      }
      v68 = v158;
      _Q0 = v157;
      _D1 = v157.f64[1];
      __asm { FMLA            D16, D1, V0.D[1] }
      v93 = sqrt(_D16);
      v94 = fabs(v158);
      v95 = fabs(v93);
      v96 = v94 / v95;
      if (v94 >= v95)
        v96 = v95 / v94;
      v97 = (v95 - v94) / (v94 + v95);
      if (v94 >= v95)
        v97 = -v97;
      if (v96 > 0.414213562)
        v98 = 1;
      else
        v98 = 2;
      if (v96 > 0.414213562)
        v99 = -1;
      else
        v99 = 1;
      if (v96 <= 0.414213562)
        v97 = v96;
      if (_D16 < 0.00000001)
        goto LABEL_95;
      if (v94 < v95)
        v99 = -v99;
      else
        v98 = v96 > 0.414213562;
      v118 = v93 == INFINITY && v94 == INFINITY;
      v119 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v97 * v97), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v97 * v97), (float64x2_t)xmmword_210315370), v97 * v97 * (v97 * v97))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v97 * v97), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v97 * v97), (float64x2_t)xmmword_210315380), v97 * v97 * (v97 * v97))), v97 * v97 * (v97 * v97) * (v97 * v97 * (v97 * v97))));
      v120 = v97 + v97 * vdivq_f64(v119, (float64x2_t)vdupq_laneq_s64((int64x2_t)v119, 1)).f64[0];
      if (v118)
        v120 = 0.785398163;
      if (v93 == 0.0 && v158 == 0.0)
        v122 = 0.0;
      else
        v122 = v120;
      if (v158 < 0.0)
      {
        v98 = 4 - v98;
        v99 = -v99;
      }
      if (v93 >= 0.0)
        v123 = v98;
      else
        v123 = -v98;
      v124 = (double)v123;
      if (v93 >= 0.0)
        v125 = v99;
      else
        v125 = -v99;
      v126 = v124 * 3.061617e-17 + v124 * 0.785398163 + v122 * (double)v125;
      v127 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v25 + 168), *(int64x2_t *)(v25 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v25 + 168), *(int64x2_t *)(v25 + 184)), v126 * v126)), v126 * v126);
      v89 = v126 + v126 * (v127.f64[0] + vmuld_lane_f64(v126 * v126 * (v126 * v126), v127, 1));
      v90 = 1.0 / v93;
LABEL_149:
      v100 = v90 * v89;
      goto LABEL_150;
    }
    if (v52 == 6)
    {
      v66 = vaddq_f64(vdivq_f64(v157, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v158, 0)), *(float64x2_t *)(v25 + 192));
      v67 = sqrt(vaddvq_f64(vmulq_f64(v66, v66)));
      v159 = vaddq_f64(*(float64x2_t *)(v25 + 208), vmulq_n_f64(v66, v67 * (v67 * (*(double *)(v25 + 168) + v67 * (*(double *)(v25 + 176) + *(double *)(v25 + 184) * v67)))+ 1.0));
      v53 = *(_DWORD *)(v25 + 992);
      if (v53 != -1)
        goto LABEL_115;
      goto LABEL_183;
    }
    v54 = sub_20EB31FFC(v25, &v159, &v157);
    goto LABEL_113;
  }
  if (v52 > 0xB)
  {
    if (v52 <= 0xD)
    {
      if (v52 != 13 || v158 < 0.00000001)
        return 0;
      _Q0 = vdivq_f64(v157, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v158, 0));
      v58 = (*(double *)v25 + *(double *)(v25 + 32)) * 0.5;
      _D3 = _Q0.f64[1];
      __asm { FMLA            D2, D3, V0.D[1] }
      v61 = v58 * (_D2 * v58);
      v159 = vdivq_f64(_Q0, (float64x2_t)vdupq_lane_s64(COERCE__INT64(v61* (*(double *)(v25 + 168)+ v58 * *(double *)(v25 + 224)+ v61* (*(double *)(v25 + 176)+ v58 * *(double *)(v25 + 232)+ v61* (*(double *)(v25 + 184)+ v58 * *(double *)(v25 + 240)+ v61* (*(double *)(v25 + 192)+ v58 * *(double *)(v25 + 248)+ v61* (*(double *)(v25 + 200)+ v58 * *(double *)(v25 + 256)+ v61
                                   * (*(double *)(v25 + 208)
                                    + v58 * *(double *)(v25 + 264)
                                    + v61 * (*(double *)(v25 + 216) + *(double *)(v25 + 272) * v58 + v61 * 0.0)))))))
                              / 100.0
                              + 1.0),
                              0));
      v53 = *(_DWORD *)(v25 + 992);
      if (v53 != -1)
        goto LABEL_115;
LABEL_183:
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v53 = *(_DWORD *)(v25 + 992);
      if (v53 > 7)
      {
LABEL_185:
        if (v53 > 0xB)
          goto LABEL_189;
        v113 = v53 == 9;
        if (v53 > 9)
          goto LABEL_189;
LABEL_187:
        if (!v113)
        {
          v112 = v159.f64[1];
          goto LABEL_190;
        }
LABEL_189:
        v112 = v159.f64[1];
        goto LABEL_190;
      }
      goto LABEL_116;
    }
    if (v52 == 14)
      v54 = sub_20EB247C0(&v159, (uint64_t)&v157, (double *)(v25 + 168), (*(double *)v25 + *(double *)(v25 + 32)) * 0.5);
    else
      v54 = sub_20EB3E39C(v25, &v159, &v157);
LABEL_113:
    if ((v54 & 1) == 0)
      return 0;
    goto LABEL_114;
  }
  if (v52 > 9)
  {
    if (v52 == 10)
      v54 = sub_20EB24288(&v159, (uint64_t)&v157, (double *)(v25 + 168), (*(double *)v25 + *(double *)(v25 + 32)) * 0.5);
    else
      v54 = sub_20EB3A2E4(v25, &v159, &v157);
    goto LABEL_113;
  }
  if (v52 == 9)
  {
    v54 = sub_20EB3641C(v25, &v159, &v157);
    goto LABEL_113;
  }
  v68 = v158;
  _Q0 = v157;
  _D1 = v157.f64[1];
  __asm { FMLA            D16, D1, V0.D[1] }
  v72 = sqrt(_D16);
  v73 = fabs(v158);
  v74 = fabs(v72);
  v75 = v73 / v74;
  if (v73 >= v74)
    v75 = v74 / v73;
  v76 = (v74 - v73) / (v73 + v74);
  if (v73 >= v74)
    v76 = -v76;
  if (v75 > 0.414213562)
    v77 = 1;
  else
    v77 = 2;
  if (v75 > 0.414213562)
    v78 = -1;
  else
    v78 = 1;
  if (v75 <= 0.414213562)
    v76 = v75;
  if (_D16 >= 0.00000001)
  {
    if (v73 < v74)
      v78 = -v78;
    else
      v77 = v75 > 0.414213562;
    v79 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v76 * v76), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v76 * v76), (float64x2_t)xmmword_210315370), v76 * v76 * (v76 * v76))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v76 * v76), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v76 * v76), (float64x2_t)xmmword_210315380), v76 * v76 * (v76 * v76))), v76 * v76 * (v76 * v76) * (v76 * v76 * (v76 * v76))));
    v80 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v79, 1);
    _ZF = v72 == INFINITY && v73 == INFINITY;
    v82 = v76 + v76 * vdivq_f64(v79, v80).f64[0];
    if (_ZF)
      v82 = 0.785398163;
    if (v72 == 0.0 && v158 == 0.0)
      v84 = 0.0;
    else
      v84 = v82;
    if (v158 < 0.0)
    {
      v77 = 4 - v77;
      v78 = -v78;
    }
    if (v72 >= 0.0)
      v85 = v77;
    else
      v85 = -v77;
    v86 = (double)v85;
    if (v72 >= 0.0)
      v87 = v78;
    else
      v87 = -v78;
    v88 = v86 * 3.061617e-17 + v86 * 0.785398163 + v84 * (double)v87;
    v89 = v88
        * (v88
         * v88
         * (*(double *)(v25 + 168)
          + v88
          * v88
          * (*(double *)(v25 + 176)
           + v88
           * v88
           * (*(double *)(v25 + 184)
            + v88
            * v88
            * (*(double *)(v25 + 192)
             + v88
             * v88
             * (*(double *)(v25 + 200) + v88 * v88 * (*(double *)(v25 + 208) + v88 * v88 * *(double *)(v25 + 216)))))))
         + 1.0);
    v90 = 1.0 / v72;
    goto LABEL_149;
  }
LABEL_95:
  v100 = 1.0 / v68;
LABEL_150:
  v159 = vmulq_n_f64(_Q0, v100);
  v112 = v159.f64[1];
LABEL_190:
  _D0 = v112 * *(double *)(v25 + 32) + *(double *)(v25 + 40);
  _Q2 = *(_OWORD *)(a1 + 8);
  __asm { FMLA            D1, D0, V2.D[1] }
  v144 = 1.0 / v35 * (_D1 - *(double *)(a1 + 24));
  if (v34)
  {
    if (v144 * v144 >= 0.00000000999999994)
      v144 = v144 * sqrt(log1p(v144 * v144) / (v144 * v144));
  }
  *a3 = v144;
  return 1;
}

BOOL sub_20FC7E7B4(uint64_t a1, _QWORD *a2, double *a3, uint64_t a4)
{
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  float64x2_t v18;
  __int128 v19;
  float64x2_t v20;
  __n128 v21;
  float64x2_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  float64x2_t v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  double v36;
  const double *v37;
  uint64_t v38;
  float64x2_t v40;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v50;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v59;
  unsigned int v60;
  double v61;
  char v62;
  float64x2_t v65;
  double v69;
  double v70;
  double v71;
  double v74;
  double v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  double v84;
  float64_t v85;
  double v86;
  double v87;
  double v89;
  double v92;
  double v93;
  long double v94;
  int64x2_t v95;
  int64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  double v100;
  double v101;
  float64x2_t v102;
  double v103;
  double v106;
  double v107;
  float64x2_t v108;
  unint64_t v109;
  long double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  float64x2_t v120;
  unsigned int v121;
  double v126;
  double v127;
  double v128;
  double v129;
  long double v130;
  double v131;
  double v132;
  float64x2_t v135;
  float64_t v137;
  uint64_t v138;
  int v139;
  double v140;
  float64x2_t v141;
  float64x2_t v142;
  float64_t v143;
  float64_t v147;
  const double *v148;
  unint64_t v151;
  float64x2_t v152;
  float64x2_t v153;
  double v154;
  __int128 v158;
  __int128 v160;
  unsigned int v161;
  double *v162;
  double v163;
  uint64_t v164;
  double v165;
  double v166;
  double v167;
  double v168;
  int v169;
  int v170;
  double v171;
  double v175;
  double v176;
  double v177;
  double v178;
  double v181;
  double v182;
  float64x2_t v183;
  unint64_t v184;
  double v185;
  double v189;
  double v190;
  float64x2_t v191;
  unint64_t v192;
  _BOOL4 v193;
  float64x2_t v194;
  double v195;
  double v198;
  double v199;
  double v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  double v204;
  float64x2_t v205;
  float64x2_t v206;
  double v207;
  long double v208;
  double v209;
  float64x2_t v210;
  double v211;
  int8x16_t v215;
  double v216;
  double v219;
  double v221;
  double v229;
  double v235;
  double v236;
  float64x2_t v240;
  float64x2_t v244;
  float64x2_t v245;
  __int128 v249;
  __int128 v252;
  double v255;
  uint64_t v256;
  double v257;
  double v258;
  double v259;
  float64x2_t v260;
  double v264;
  double v265;
  _OWORD *v269;
  float64x2_t *v272;
  __int128 v273;
  _OWORD *v274;
  float64x2_t v275;
  double v276;
  __int128 v277;
  float64x2_t v282;
  float64x2_t v284;
  double v286;
  double v287;
  double v288;
  double v289;
  double v290;
  double v291;
  double v292;
  __int128 v293;
  double v294;
  double v296;
  double v299;
  uint64_t v302;
  double v307;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  double v318;
  uint64_t v339;
  _BOOL4 v344;
  float64x2_t v352;
  float64x2_t v354;
  double v357;
  uint64_t v358;
  double v359;
  double v360;
  double v361;
  double v362;
  __int128 v363;
  __int128 v364;
  double v365;
  float64_t v366;
  double v367;
  double v368;
  __int128 v369;
  float64x2_t v370;
  double v371;
  double v372;
  float64x2_t v373;
  int64x2_t v374;
  float64x2_t v375;
  float64x2_t v376;
  double v377;
  float64x2_t v378;
  int8x16_t v379;
  uint64_t v380;
  _BOOL4 v381;
  double v382;
  float64x2_t v383;
  int64x2_t v384;
  double v385;
  double v386;
  float64x2_t v387;
  double v388;
  int v389;
  int v390;
  uint64_t v391;
  __int128 v392;
  _BOOL4 v393;
  double v394;
  _BOOL4 v395;
  double v396;
  _BOOL4 v398;
  int v399;
  float64x2_t v400;
  float64x2_t v401;
  uint64_t v402;
  float64x2_t v403;
  double v404;
  int v405;
  float64x2_t v406;
  double v407;
  float64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  double v413;
  double v414;
  double v415;
  uint64_t v416;
  double v417[9];
  double v418[9];
  int64x2_t v419;
  _BYTE v420[32];
  float64x2_t v421;
  double v422;
  float64x2_t v423;
  float64_t v424;
  float64x2_t v425;
  _BYTE v426[32];
  float64x2_t v427;
  double v428;
  float64x2_t v429;
  float64_t v430;
  _OWORD v431[3];
  float64x2_t v432;
  float64x2_t v433;
  double v434;
  float64x2_t v435;
  float64x2_t v436;
  __int128 v437;
  double v438;
  uint64_t v439;
  float64x2_t v440;
  uint64_t v441;
  float64x2x3_t v442;

  v441 = *MEMORY[0x24BDAC8D0];
  v11 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v13 = a2[3];
  v14 = a2[9];
  v411 = a2[4];
  v412 = a2[5];
  v15 = a2[7];
  v410 = a2[6];
  v409 = a2[8];
  v416 = a2[10];
  v16 = *(_QWORD *)(v416 + 24);
  if (*(_BYTE *)(v16 + 58) && !*(_BYTE *)(v16 + 57))
    return 0;
  v17 = *(_OWORD *)(v11 + 48);
  v18 = *(float64x2_t *)(v11 + 80);
  *(_OWORD *)&v426[16] = *(_OWORD *)(v11 + 64);
  v427 = v18;
  v428 = *(double *)(v11 + 96);
  v425 = *(float64x2_t *)(v11 + 32);
  *(_OWORD *)v426 = v17;
  v429 = *(float64x2_t *)(v11 + 104);
  v430 = *(double *)(v11 + 120);
  v19 = *(_OWORD *)(v10 + 48);
  v20 = *(float64x2_t *)(v10 + 80);
  *(_OWORD *)&v420[16] = *(_OWORD *)(v10 + 64);
  v421 = v20;
  v422 = *(double *)(v10 + 96);
  v21 = *(__n128 *)(v10 + 32);
  v419 = (int64x2_t)v21;
  *(_OWORD *)v420 = v19;
  v22 = *(float64x2_t *)(v10 + 104);
  v423 = v22;
  v424 = *(double *)(v10 + 120);
  v23 = *(double *)(*(_QWORD *)(a1 + 40) + 1424);
  if (v23 > 0.0)
  {
    v24 = *(_QWORD *)(v16 + 96);
    if (v24)
    {
      v25 = *(_QWORD *)(v24 + 64);
      v21.n128_u64[0] = *(_QWORD *)(v25 + 1424);
      v22.f64[0] = 0.0;
      if (v21.n128_f64[0] <= 0.0)
      {
LABEL_7:
        v26 = *(_QWORD *)(a1 + 40);
        v27 = *(double *)(a1 + 16);
        v28 = *(double *)(v26 + 1432);
        v29 = *(double *)(v26 + 1424);
        sub_20FC7D4B0(v12 + 136, v12 + 160, &v425, (uint64_t)v418, v22, v21);
        v30.f64[0] = (v27 - v28) * v29;
        sub_20FC7D4B0(v13 + 136, v13 + 160, (float64x2_t *)&v419, (uint64_t)v417, v30, v31);
        goto LABEL_8;
      }
    }
    else
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioanchoredpoint3d.hpp", 63, (uint64_t)"this->anchor_kf_pose_", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v25 = *(_QWORD *)(*(_QWORD *)(v16 + 96) + 64);
      v21.n128_u64[0] = *(_QWORD *)(v25 + 1424);
      v22.f64[0] = 0.0;
      if (v21.n128_f64[0] <= 0.0)
        goto LABEL_7;
    }
    v22.f64[0] = v21.n128_f64[0] * (*(double *)(v16 + 88) - *(double *)(v25 + 1432));
    goto LABEL_7;
  }
LABEL_8:
  if (*(_BYTE *)(v10 + 20))
  {
    v395 = *(_BYTE *)(v10 + 129) != 0;
    v32 = v412;
    if (*(_BYTE *)(v11 + 20))
      goto LABEL_10;
  }
  else
  {
    v395 = 0;
    v32 = v412;
    if (*(_BYTE *)(v11 + 20))
    {
LABEL_10:
      v393 = *(_BYTE *)(v11 + 129) != 0;
      if (*(_BYTE *)(v32 + 20))
        goto LABEL_11;
LABEL_15:
      v398 = 0;
      v33 = v411;
      if (*(_BYTE *)(v411 + 20))
        goto LABEL_12;
      goto LABEL_16;
    }
  }
  v393 = 0;
  if (!*(_BYTE *)(v32 + 20))
    goto LABEL_15;
LABEL_11:
  v398 = *(_BYTE *)(v32 + 144) != 0;
  v33 = v411;
  if (*(_BYTE *)(v411 + 20))
  {
LABEL_12:
    v381 = *(_BYTE *)(v33 + 144) != 0;
    goto LABEL_17;
  }
LABEL_16:
  v381 = 0;
LABEL_17:
  v390 = *(unsigned __int8 *)(v410 + 20);
  v399 = *(unsigned __int8 *)(v15 + 20);
  v389 = *(unsigned __int8 *)(v409 + 20);
  v34 = *(unsigned __int8 *)(v14 + 20);
  v35 = *(_QWORD *)(v416 + 24);
  v405 = *(unsigned __int8 *)(v35 + 56);
  v36 = *(double *)(a1 + 48);
  v20.f64[0] = *(float64_t *)(v416 + 32);
  v37 = (const double *)(v13 + 32);
  v38 = *(_QWORD *)(a1 + 40);
  v22.f64[0] = *(float64_t *)(v35 + 80);
  v391 = v35;
  _Q1 = *(float64x2_t *)(v35 + 64);
  v40 = vmulq_f64(v20, v22);
  v396 = v20.f64[0];
  _Q5 = vmulq_n_f64(_Q1, v20.f64[0]);
  _D2 = *(_QWORD *)&v426[24];
  v43.f64[1] = *(float64_t *)&v426[16];
  v44 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v425, _Q5.f64[0]), *(float64x2_t *)&v426[8], _Q5, 1), v427, v40.f64[0]);
  v375 = v40;
  v376 = _Q5;
  __asm { FMLA            D1, D2, V5.D[1] }
  v43.f64[0] = v430;
  _Q1.f64[0] = vmlad_n_f64(_Q1.f64[0], v428, v40.f64[0]);
  _Q2.f64[1] = v429.f64[1];
  _Q16 = vaddq_f64(v44, v429);
  v44.f64[0] = *(float64_t *)(v12 + 120);
  _Q2.f64[0] = *(float64_t *)(v13 + 120);
  v50 = vsubq_f64(v44, _Q2);
  _D4 = *(_QWORD *)(v12 + 72);
  *(_QWORD *)&v377 = *(_OWORD *)&vaddq_f64(_Q1, v43);
  v378 = _Q16;
  __asm { FMLA            D2, D4, V16.D[1] }
  _Q2.f64[0] = vmlad_n_f64(_Q2.f64[0], *(double *)(v12 + 96), v377);
  v52 = vaddq_f64(vsubq_f64(*(float64x2_t *)(v12 + 104), *(float64x2_t *)(v13 + 104)), vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v12 + 32), _Q16.f64[0]), *(float64x2_t *)(v12 + 56), _Q16, 1), *(float64x2_t *)(v12 + 80), v377));
  v442 = vld3q_f64(v37);
  v53 = vaddq_f64(v50, _Q2);
  _Q1 = *(float64x2_t *)(v13 + 80);
  v55 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v442.val[0], v52.f64[0]), v442.val[1], v52, 1), v442.val[2], v53.f64[0]);
  v442.val[0] = vmulq_f64(_Q1, v52);
  v379 = (int8x16_t)v52;
  v380 = *(uint64_t *)&v53.f64[0];
  v442.val[1].f64[0] = v52.f64[1];
  __asm { FMLA            D3, D4, V1.D[1] }
  v442.val[0].f64[0] = vmlad_n_f64(v442.val[0].f64[0], *(double *)(v13 + 96), v53.f64[0]);
  _Q1.f64[0] = *(float64_t *)v420;
  v53.f64[0] = v424;
  _Q16.f64[1] = v421.f64[1];
  v56 = vsubq_f64(v442.val[0], v53);
  _Q0 = vsubq_f64(v55, v423);
  _Q4 = (float64x2_t)vzip2q_s64(v419, *(int64x2_t *)&v420[8]);
  _Q1.f64[1] = *(float64_t *)&v420[24];
  v59 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v419, *(int64x2_t *)&v420[8]), _Q0.f64[0]), _Q4, _Q0, 1), _Q1, v56.f64[0]);
  _Q0.f64[0] = _Q0.f64[1];
  __asm { FMLA            D1, D0, V16.D[1] }
  v433 = v59;
  v434 = vmlad_n_f64(_Q1.f64[0], v422, v56.f64[0]);
  v60 = *(_DWORD *)(v38 + 992);
  if (v60 != -1)
  {
    if (v60 <= 7)
      goto LABEL_19;
LABEL_26:
    if (v60 > 0xB)
    {
      if (v60 <= 0xD)
      {
        if (v60 != 13)
          return 0;
        if (v434 < 0.00000001)
          return 0;
        v440 = vdivq_f64(v433, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v434, 0));
        if (!sub_20EB295B8(&v432, &v435, 0, (uint64_t)&v440, (double *)(v38 + 168), (*(double *)v38 + *(double *)(v38 + 32)) * 0.5))return 0;
        _D0 = -v433.f64[1] / (v434 * v434);
        _V3.D[1] = v435.f64[1];
        _Q4.f64[1] = v436.f64[1];
        v65.f64[0] = 0.0;
        v65.f64[1] = 1.0 / v434;
        __asm { FMLA            D7, D0, V3.D[1] }
        v56 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)COERCE_UNSIGNED_INT64(1.0 / v434), v436.f64[0]), v65, v436, 1);
        v431[0] = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)COERCE_UNSIGNED_INT64(1.0 / v434), v435.f64[0]), v65, v435, 1);
        __asm { FMLA            D2, D0, V4.D[1] }
        *(_QWORD *)&v431[1] = _D7;
        *((_QWORD *)&v431[2] + 1) = _D2;
        *(float64x2_t *)((char *)&v431[1] + 8) = v56;
        goto LABEL_66;
      }
      if (v60 == 14)
        v62 = sub_20EB2498C(&v432, (uint64_t)v431, 0, (uint64_t)&v433, (double *)(v38 + 168), (*(double *)v38 + *(double *)(v38 + 32)) * 0.5);
      else
        v62 = sub_20EB3F050(v38, &v432, (uint64_t)v431, &v433, 0);
    }
    else if (v60 > 9)
    {
      if (v60 == 10)
        v62 = sub_20EB2450C(&v432, (uint64_t)v431, 0, (uint64_t)&v433, (double *)(v38 + 168), (*(double *)v38 + *(double *)(v38 + 32)) * 0.5);
      else
        v62 = sub_20EB3AF98(v38, &v432, (uint64_t)v431, &v433, 0);
    }
    else
    {
      if (v60 != 9)
      {
        v87 = v434;
        _Q5 = v433;
        *(_QWORD *)&v89 = vextq_s8((int8x16_t)_Q5, (int8x16_t)_Q5, 8uLL).u64[0];
        _D0 = v433.f64[1];
        __asm { FMLA            D1, D0, V5.D[1] }
        if (_D1 >= 0.00000001)
        {
          v92 = v434 * v434 + _D1;
          v93 = sqrt(_D1);
          v382 = _D1;
          v386 = v89;
          v401 = v433;
          v111 = atan2(v93, v434);
          v112 = *(double *)(v38 + 168);
          v113 = *(double *)(v38 + 176);
          v114 = *(double *)(v38 + 184);
          v115 = *(double *)(v38 + 192);
          v116 = *(double *)(v38 + 200);
          v117 = *(double *)(v38 + 208);
          v118 = *(double *)(v38 + 216);
          v101 = v111
               * v111
               * (v112 * 3.0
                + v111
                * v111
                * (v113 * 5.0
                 + v111
                 * v111
                 * (v114 * 7.0
                  + v111
                  * v111
                  * (v115 * 9.0 + v111 * v111 * (v116 * 11.0 + v111 * v111 * (v117 * 13.0 + v111 * v111 * 15.0 * v118))))))
               + 1.0;
          v89 = v386;
          _Q5 = v401;
          v103 = v111
               * (v111
                * v111
                * (v112
                 + v111
                 * v111
                 * (v113
                  + v111
                  * v111
                  * (v114 + v111 * v111 * (v115 + v111 * v111 * (v116 + v111 * v111 * (v117 + v111 * v111 * v118))))))
                + 1.0);
          goto LABEL_64;
        }
LABEL_57:
        v106 = 1.0 / v87;
        v107 = -(v106 * v106);
        v108.f64[0] = 0.0;
        v109 = 0;
LABEL_65:
        _Q4 = vmulq_n_f64(_Q5, v106);
        v432 = _Q4;
        *(_QWORD *)&v108.f64[1] = v109;
        v56 = vmulq_n_f64(v108, _Q5.f64[0]);
        v120 = vmulq_laneq_f64(v108, _Q5, 1);
        *((_QWORD *)&v431[1] + 1) = *(_QWORD *)&v120.f64[0];
        v56.f64[0] = v106 + v56.f64[0];
        *(double *)&v431[1] = v107 * _Q5.f64[0];
        v431[0] = v56;
        *((double *)&v431[2] + 1) = v107 * v89;
        *(double *)&v431[2] = v106 + v120.f64[1];
        goto LABEL_66;
      }
      v62 = sub_20EB372E0(v38, &v432, (uint64_t)v431, &v433, 0);
    }
    goto LABEL_61;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v60 = *(_DWORD *)(v38 + 992);
  if (v60 > 7)
    goto LABEL_26;
LABEL_19:
  if (v60 > 3)
  {
    if (v60 > 5)
    {
      if (v60 == 6)
      {
        if (v434 == 0.0)
          v84 = 1.0;
        else
          v84 = 1.0 / v434;
        v85 = v433.f64[0] * v84;
        v86 = v84 * v433.f64[1];
        v440.f64[0] = v433.f64[0] * v84;
        v440.f64[1] = v84 * v433.f64[1];
        sub_20EB2837C(&v432, v435.f64, &v440, (double *)(v38 + 168), (float64x2_t *)(v38 + 192), (double *)(v38 + 208));
        *(double *)v431 = v84 * v435.f64[0];
        *((double *)v431 + 1) = v84 * v435.f64[1];
        *((double *)&v431[1] + 1) = v84 * v436.f64[0];
        *(double *)&v431[1] = v84 * (-(v435.f64[0] * v85) - v86 * v435.f64[1]);
        *(double *)&v431[2] = v84 * v436.f64[1];
        *((double *)&v431[2] + 1) = v84 * (-(v436.f64[0] * v85) - v86 * v436.f64[1]);
        goto LABEL_66;
      }
      v62 = sub_20EB3345C(v38, &v432, (uint64_t)v431, &v433, 0);
    }
    else
    {
      if (v60 != 5)
        goto LABEL_54;
      v62 = sub_20EB29218(v432.f64, (uint64_t)v431, &v433, (int64x2_t *)(v38 + 168));
    }
LABEL_61:
    if ((v62 & 1) == 0)
      return 0;
    goto LABEL_66;
  }
  if (v60 <= 1)
  {
    if (!v60)
    {
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    if (v434 >= 0.00000001)
    {
      v61 = 1.0 / v434;
      v432 = vmulq_n_f64(v433, 1.0 / v434);
      v431[0] = COERCE_UNSIGNED_INT64(1.0 / v434);
      *((_QWORD *)&v431[1] + 1) = 0;
      *(double *)&v431[1] = v61 * -(v433.f64[0] * v61);
      *(double *)&v431[2] = 1.0 / v434;
      *((double *)&v431[2] + 1) = v61 * -(v433.f64[1] * v61);
      goto LABEL_66;
    }
    return 0;
  }
  if (v60 != 2)
  {
LABEL_54:
    v87 = v434;
    _Q5 = v433;
    *(_QWORD *)&v89 = vextq_s8((int8x16_t)_Q5, (int8x16_t)_Q5, 8uLL).u64[0];
    _D0 = v433.f64[1];
    __asm { FMLA            D1, D0, V5.D[1] }
    if (_D1 >= 0.00000001)
    {
      v92 = v434 * v434 + _D1;
      v93 = sqrt(_D1);
      v382 = _D1;
      v385 = v89;
      v400 = v433;
      v94 = atan2(v93, v434);
      v95 = *(int64x2_t *)(v38 + 184);
      v96 = *(int64x2_t *)(v38 + 168);
      v97 = (float64x2_t)vzip2q_s64(v96, v95);
      v98 = (float64x2_t)vzip1q_s64(v96, v95);
      v99 = vmulq_n_f64(vaddq_f64(vmulq_f64(v98, (float64x2_t)xmmword_210312E10), vmulq_n_f64(vmulq_f64(v97, (float64x2_t)xmmword_210312E20), v94 * v94)), v94 * v94);
      v100 = v94 * v94 * (v94 * v94);
      v101 = v99.f64[0] + vmuld_lane_f64(v100, v99, 1) + 1.0;
      v89 = v385;
      v102 = vmulq_n_f64(vaddq_f64(v98, vmulq_n_f64(v97, v94 * v94)), v94 * v94);
      _Q5 = v400;
      v103 = v94 + v94 * (v102.f64[0] + vmuld_lane_f64(v100, v102, 1));
LABEL_64:
      v106 = v103 / v93;
      v119 = v101 / v92;
      v108 = vmulq_n_f64(_Q5, (v87 * (v101 / v92) - v106) / v382);
      v107 = -v119;
      v109 = vextq_s8((int8x16_t)v108, (int8x16_t)v108, 8uLL).u64[0];
      goto LABEL_65;
    }
    goto LABEL_57;
  }
  if (*(_DWORD *)(v38 + 212))
  {
    if (v434 < 0.00000001)
      return 0;
    _Q0 = vmulq_n_f64(v433, 1.0 / v434);
    v69 = *(double *)(v38 + 168);
    v70 = *(double *)(v38 + 176);
    v71 = *(double *)(v38 + 184);
    _D3 = vmuld_lane_f64(1.0 / v434, v433, 1);
    __asm { FMLA            D7, D3, V0.D[1] }
    v74 = v69 * *(double *)&_D7 + 1.0 + *(double *)&_D7 * *(double *)&_D7 * (v70 + v71 * *(double *)&_D7);
    v75 = v69 + v69 + *(double *)&_D7 * (v70 * 4.0 + *(double *)&_D7 * (v71 * 6.0));
    v76 = *(float64x2_t *)(v38 + 192);
    v77 = vmulq_f64(vaddq_f64((float64x2_t)vdupq_lane_s64(_D7, 0), vmulq_f64(_Q0, vaddq_f64(_Q0, _Q0))), (float64x2_t)vextq_s8((int8x16_t)v76, (int8x16_t)v76, 8uLL));
    v78 = vaddq_f64(v76, v76);
    v79 = vmulq_n_f64(v78, _Q0.f64[0]);
    v4 = vmulq_laneq_f64(v79, _Q0, 1);
    v432 = vmlaq_n_f64(vaddq_f64(v77, v4), _Q0, v74);
    v80 = vmulq_n_f64(_Q0, v75);
    v81 = vmulq_n_f64(v80, _Q0.f64[0]);
    v56 = vmulq_n_f64(v80, _D3);
    v82 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v79.f64[0], 0);
    v82.f64[0] = vmuld_lane_f64(6.0, v76, 1) * _Q0.f64[0];
    v83 = vaddq_f64(v82, vmulq_laneq_f64(v78, _Q0, 1));
    v81.f64[0] = v74 + v81.f64[0];
    _Q4 = vaddq_f64(v83, v81);
    *(_QWORD *)&v83.f64[0] = vdupq_laneq_s64((int64x2_t)v83, 1).u64[0];
    v83.f64[1] = vmuld_lane_f64(6.0 * v76.f64[0], _Q0, 1) + v79.f64[1];
    v56.f64[1] = v74 + v56.f64[1];
    v431[0] = vmulq_n_f64(_Q4, 1.0 / v434);
    *(float64x2_t *)((char *)&v431[1] + 8) = vmulq_n_f64(vaddq_f64(v83, v56), 1.0 / v434);
    *(double *)&v431[1] = -(vmuld_n_f64(*(double *)v431, _Q0.f64[0]) + *((double *)v431 + 1) * _Q0.f64[1]);
    *((double *)&v431[2] + 1) = -(vmuld_n_f64(*((double *)&v431[1] + 1), _Q0.f64[0]) + *(double *)&v431[2] * _Q0.f64[1]);
  }
  else if (!sub_20F0BA0C8(&v432, (uint64_t)v431, &v433, (double *)(v38 + 168)))
  {
    return 0;
  }
LABEL_66:
  v121 = *(_DWORD *)(v38 + 992);
  if (v121 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v121 = *(_DWORD *)(v38 + 992);
  }
  if (!v121)
  {
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Q4.f64[0] = *(float64_t *)v38;
  v56.f64[0] = *(float64_t *)(v38 + 32);
  _Q0.f64[0] = *(float64_t *)v38;
  _Q0.f64[1] = v56.f64[0];
  _Q1.f64[0] = *(float64_t *)(v38 + 16);
  _Q1.f64[1] = *(float64_t *)(v38 + 40);
  _V5.D[1] = v432.f64[1];
  _Q6 = *(int8x16_t *)(a1 + 8);
  *(_QWORD *)&v126 = vextq_s8(_Q6, _Q6, 8uLL).u64[0];
  _Q1.f64[0] = vmlaq_f64(_Q1, _Q0, v432).f64[1];
  __asm { FMLA            D0, D1, V6.D[1] }
  v127 = 1.0 / v36;
  v128 = 1.0 / v36 * (_Q0.f64[0] - *(double *)(a1 + 24));
  v383 = _Q4;
  v387 = v56;
  if (v405)
  {
    v129 = v128 * v128;
    if (v128 * v128 >= 0.00000000999999994)
    {
      v402 = *(_QWORD *)(a1 + 8);
      v408 = v432.f64[1];
      v372 = v126;
      v130 = log1p(v128 * v128);
      v126 = v372;
      _Q6.i64[0] = v402;
      _V5.D[1] = v408;
      v131 = sqrt(v130 / v129);
      v127 = v127 * (v131 + v128 * (v128 * ((1.0 - (v130 + v130 / v129)) / (v129 * ((v129 + 1.0) * v131)))));
      v128 = v128 * v131;
    }
  }
  v132 = *(double *)_Q6.i64 * v127;
  _D12 = v126 * v127;
  if (v398)
  {
    __asm { FMLA            D0, D12, V5.D[1] }
    v358 = _D0;
    v359 = _D12 + v132 * 0.0;
  }
  v135 = (float64x2_t)v431[0];
  v403 = (float64x2_t)v431[0];
  v135.f64[0] = *(float64_t *)&v431[1];
  v370 = v135;
  v135.f64[0] = *((float64_t *)&v431[2] + 1);
  v373 = v135;
  _Q0 = *(_OWORD *)((char *)&v431[1] + 8);
  v406 = *(float64x2_t *)((char *)&v431[1] + 8);
  if (!v399)
  {
    v138 = v412;
    v139 = v34;
    if (v34)
      goto LABEL_110;
LABEL_83:
    v140 = v128;
    v367 = *(double *)&_Q0;
    v366 = *(double *)&_Q0;
    v142 = v383;
    v141 = v387;
    goto LABEL_183;
  }
  *(_QWORD *)&v440.f64[0] = &v435;
  *(_QWORD *)&v440.f64[1] = &v433;
  if (v121 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v121 = *(_DWORD *)(v38 + 992);
    if (v121 <= 7)
      goto LABEL_78;
LABEL_86:
    if (v121 <= 0xB)
    {
      if (v121 <= 9)
      {
        if (v121 != 9)
          sub_20FBCF154();
        sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/LensModel.cpp", 852, (uint64_t)&unk_210254955, 0, (uint64_t)"not implemented yet. rdar://113779839", 37, (void (*)(void **))sub_21023DDB0);
        abort();
      }
      if (v121 == 10)
        sub_20FBCF154();
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/LensModel.cpp", 852, (uint64_t)&unk_210254955, 0, (uint64_t)"not implemented yet. rdar://113779839", 37, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    if (v121 > 0xD)
    {
      if (v121 == 14)
        sub_20FBCF154();
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/LensModel.cpp", 852, (uint64_t)&unk_210254955, 0, (uint64_t)"not implemented yet. rdar://113779839", 37, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    v143 = v440.f64[0];
    if (v121 == 13)
      sub_20EB43BB4();
    _Q0 = **(float64x2_t **)&v440.f64[1];
    _D2 = *(_QWORD *)(*(_QWORD *)&v440.f64[1] + 8);
    __asm { FMLA            D1, D2, V0.D[1] }
    v138 = v412;
    v139 = v34;
    if (_D1 >= 0.00000001)
    {
      v163 = *(double *)(*(_QWORD *)&v440.f64[1] + 16);
      *(double *)&v164 = sqrt(_D1);
      v165 = fabs(v163);
      v166 = fabs(*(double *)&v164);
      v167 = v165 / v166;
      if (v165 >= v166)
        v167 = v166 / v165;
      if (v167 <= 0.414213562)
      {
        v169 = 1;
        v170 = 2;
        v168 = v167;
      }
      else
      {
        v168 = (v166 - v165) / (v165 + v166);
        if (v165 >= v166)
          v168 = -v168;
        v169 = -1;
        v170 = 1;
      }
      v193 = v167 > 0.414213562;
      v4 = vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v168 * v168), (float64x2_t)xmmword_210315340);
      v194 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v168 * v168), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v168 * v168), (float64x2_t)xmmword_210315370), v168 * v168 * (v168 * v168))), vmulq_n_f64(vaddq_f64(v4, vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v168 * v168), (float64x2_t)xmmword_210315380), v168 * v168 * (v168 * v168))), v168 * v168 * (v168 * v168) * (v168 * v168 * (v168 * v168))));
      v195 = v168 + v168 * vdivq_f64(v194, (float64x2_t)vdupq_laneq_s64((int64x2_t)v194, 1)).f64[0];
      if (*(double *)&v164 == INFINITY && v165 == INFINITY)
        v195 = 0.785398163;
      if (v165 >= v166)
        v170 = v193;
      else
        v169 = -v169;
      if (v163 < 0.0)
        v169 = -v169;
      if (*(uint64_t *)(*(_QWORD *)&v440.f64[1] + 16) < 0)
        v170 = 4 - v170;
      if (v164 < 0)
      {
        v169 = -v169;
        v170 = -v170;
      }
      if (*(double *)&v164 == 0.0 && v163 == 0.0)
        v198 = 0.0;
      else
        v198 = v195;
      v199 = (double)v170 * 3.061617e-17 + (double)v170 * 0.785398163 + v198 * (double)v169;
      v200 = v199 * v199;
      v201.f64[0] = v199 * (v199 * v199);
      v201.f64[1] = v200 * v201.f64[0];
      v202 = vmulq_n_f64(v201, v200 * v200);
      v203 = vdivq_f64(_Q0, (float64x2_t)vdupq_lane_s64(v164, 0));
      **(_OWORD **)&v440.f64[0] = vmulq_n_f64(v201, v203.f64[0]);
      *(float64x2_t *)(*(_QWORD *)&v143 + 16) = vmulq_n_f64(v202, v203.f64[0]);
      *(float64x2_t *)(*(_QWORD *)&v143 + 32) = vmulq_laneq_f64(v201, v203, 1);
      *(float64x2_t *)(*(_QWORD *)&v143 + 48) = vmulq_laneq_f64(v202, v203, 1);
    }
    else
    {
      *(_OWORD *)(*(_QWORD *)&v440.f64[0] + 32) = 0u;
      *(_OWORD *)(*(_QWORD *)&v143 + 48) = 0u;
      **(_OWORD **)&v143 = 0u;
      *(_OWORD *)(*(_QWORD *)&v143 + 16) = 0u;
    }
    goto LABEL_109;
  }
  if (v121 > 7)
    goto LABEL_86;
LABEL_78:
  if (v121 > 3)
  {
    if (v121 <= 5)
    {
      v138 = v412;
      v139 = v34;
      sub_20FBCEF64((float64x2_t **)&v440);
      goto LABEL_109;
    }
    if (v121 == 6)
      sub_20EB42068();
    sub_20EB34694(v38, *(float64x2_t **)&v440.f64[0], *(float64x2_t **)&v440.f64[1]);
    v138 = v412;
  }
  else if (v121 > 1)
  {
    if (v121 == 2)
    {
      v147 = v440.f64[0];
      v148 = (const double *)(*(_QWORD *)&v440.f64[1] + 16);
      _D2 = *(_QWORD *)(*(_QWORD *)&v440.f64[1] + 8);
      __asm { FMLA            D1, D2, V0.D[1] }
      *(double *)&v151 = _Q1.f64[0] * (_Q1.f64[0] * _Q1.f64[0]);
      _Q1.f64[1] = _Q1.f64[0] * _Q1.f64[0];
      v152 = vld1q_dup_f64(v148);
      v153 = vdivq_f64(**(float64x2_t **)&v440.f64[1], v152);
      **(_OWORD **)&v440.f64[0] = vmulq_n_f64(_Q1, v153.f64[0]);
      *(float64x2_t *)(*(_QWORD *)&v147 + 16) = vmulq_n_f64((float64x2_t)v151, v153.f64[0]);
      *(float64x2_t *)(*(_QWORD *)&v147 + 32) = vmulq_laneq_f64(_Q1, v153, 1);
      *(float64x2_t *)(*(_QWORD *)&v147 + 48) = vmulq_laneq_f64((float64x2_t)v151, v153, 1);
    }
    else
    {
      sub_20FBCEF64((float64x2_t **)&v440);
    }
    v138 = v412;
  }
  else
  {
    if (!v121)
    {
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    v137 = v440.f64[0];
    *(_OWORD *)(*(_QWORD *)&v440.f64[0] + 32) = 0u;
    *(_OWORD *)(*(_QWORD *)&v137 + 48) = 0u;
    **(_OWORD **)&v137 = 0u;
    *(_OWORD *)(*(_QWORD *)&v137 + 16) = 0u;
    v138 = v412;
  }
  v139 = v34;
LABEL_109:
  v154 = v132 * v383.f64[0] + _D12 * 0.0;
  _D1 = v132 * 0.0 + _D12 * v387.f64[0];
  _V5.D[1] = *((_QWORD *)&v437 + 1);
  _V4.D[1] = v439;
  *(double *)&v158 = vmlad_n_f64(v154 * v435.f64[0], _D1, *(double *)&v437);
  __asm { FMLA            D3, D1, V5.D[1] }
  *(double *)&v160 = vmlad_n_f64(v154 * v436.f64[0], _D1, v438);
  __asm { FMLA            D0, D1, V4.D[1] }
  *((_QWORD *)&v158 + 1) = _D3;
  *((_QWORD *)&v160 + 1) = _Q0;
  v363 = v160;
  v364 = v158;
  if (!v139)
    goto LABEL_83;
LABEL_110:
  v161 = *(_DWORD *)(v38 + 992);
  if (v161 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v161 = *(_DWORD *)(v38 + 992);
    if (v161 <= 7)
      goto LABEL_112;
  }
  else if (v161 <= 7)
  {
LABEL_112:
    if (v161 <= 3)
    {
      if (v161 > 1)
      {
        v436 = 0u;
        v437 = 0u;
        v435 = 0u;
        if (v161 == 2)
        {
          v162 = (double *)(v38 + 168);
          if (*(_DWORD *)(v38 + 212))
            sub_20FA1E060(&v432, (uint64_t)v431, &v433, v162, (float64x2_t *)(v38 + 192));
          else
            sub_20F0BA0C8(&v432, (uint64_t)v431, &v433, v162);
        }
        else
        {
          v185 = v434;
          _Q1 = v433;
          _D0 = v433.f64[1];
          __asm { FMLA            D2, D0, V1.D[1] }
          if (_D2 >= 0.00000001)
          {
            v207 = v434 * v434 + _D2;
            v208 = sqrt(_D2);
            v414 = _D2;
            v209 = atan2(v208, v434);
            v440.f64[0] = 0.0;
            v189 = sub_20F0BA1B0((int64x2_t *)(v38 + 168), v440.f64, v209) / v208;
            _Q1 = v433;
            v191 = vmulq_n_f64(v433, (v185 * (v440.f64[0] / v207) - v189) / v414);
            v190 = -(v440.f64[0] / v207);
            v192 = vextq_s8((int8x16_t)v191, (int8x16_t)v191, 8uLL).u64[0];
          }
          else
          {
            v189 = 1.0 / v434;
            v190 = -(v189 * v189);
            v191.f64[0] = 0.0;
            v192 = 0;
          }
          v432 = vmulq_n_f64(_Q1, v189);
          *(_QWORD *)&v191.f64[1] = v192;
          v210 = vmulq_n_f64(v191, _Q1.f64[0]);
          *((_QWORD *)&v431[0] + 1) = *(_QWORD *)&v210.f64[1];
          *((_QWORD *)&v431[2] + 1) = vmuld_lane_f64(v190, _Q1, 1);
          *(float64x2_t *)((char *)&v431[1] + 8) = vmulq_laneq_f64(v191, _Q1, 1);
          *(double *)&v431[1] = v190 * _Q1.f64[0];
          *(double *)v431 = v189 + v210.f64[0];
        }
      }
      else
      {
        if (!v161)
        {
          sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
          abort();
        }
        v436 = 0u;
        v437 = 0u;
        v435 = 0u;
        if (v434 >= 0.00000001)
        {
          *(double *)&v431[2] = 1.0 / v434;
          *(double *)v431 = 1.0 / v434;
          *((_QWORD *)&v431[0] + 1) = 0;
          v431[1] = COERCE_UNSIGNED_INT64(1.0 / v434 * -(v433.f64[0] * (1.0 / v434)));
        }
      }
      goto LABEL_182;
    }
    if (v161 > 5)
    {
      if (v161 == 6)
        sub_20EB41F64((float64x2_t *)v38, &v432, (double *)v431, v433.f64, &v435);
      else
        sub_20EB3345C(v38, &v432, (uint64_t)v431, &v433, (uint64_t)&v435);
      goto LABEL_182;
    }
    v436 = 0u;
    v437 = 0u;
    v435 = 0u;
    if (v161 == 5)
    {
      sub_20EB29218(v432.f64, (uint64_t)v431, &v433, (int64x2_t *)(v38 + 168));
      goto LABEL_182;
    }
    v171 = v434;
    _Q1 = v433;
    _D0 = v433.f64[1];
    __asm { FMLA            D2, D0, V1.D[1] }
    if (_D2 < 0.00000001)
      goto LABEL_148;
    v175 = v434 * v434 + _D2;
    v176 = sqrt(_D2);
    v413 = _D2;
    v204 = atan2(v176, v434);
    v440.f64[0] = 0.0;
    v178 = sub_20F0BA1B0((int64x2_t *)(v38 + 168), v440.f64, v204);
    goto LABEL_177;
  }
  if (v161 > 0xB)
  {
    if (v161 > 0xD)
    {
      if (v161 == 14)
      {
        v436 = 0u;
        v437 = 0u;
        v435 = 0u;
        sub_20EB2498C(&v432, (uint64_t)v431, 0, (uint64_t)&v433, (double *)(v38 + 168), (*(double *)v38 + *(double *)(v38 + 32)) * 0.5);
      }
      else
      {
        sub_20EB3F050(v38, &v432, (uint64_t)v431, &v433, (uint64_t)&v435);
      }
    }
    else if (v161 == 13)
    {
      sub_20EB439AC((double *)v38, &v432, (uint64_t)v431, &v433, &v435);
    }
    else
    {
      v436 = 0u;
      v437 = 0u;
      v435 = 0u;
      v432 = 0uLL;
      memset(v431, 0, sizeof(v431));
    }
    goto LABEL_182;
  }
  if (v161 > 9)
  {
    if (v161 == 10)
    {
      v436 = 0u;
      v437 = 0u;
      v435 = 0u;
      sub_20EB2450C(&v432, (uint64_t)v431, 0, (uint64_t)&v433, (double *)(v38 + 168), (*(double *)v38 + *(double *)(v38 + 32)) * 0.5);
    }
    else
    {
      sub_20EB3AF98(v38, &v432, (uint64_t)v431, &v433, (uint64_t)&v435);
    }
    goto LABEL_182;
  }
  if (v161 != 9)
  {
    v436 = 0u;
    v437 = 0u;
    v435 = 0u;
    v171 = v434;
    _Q1 = v433;
    _D0 = v433.f64[1];
    __asm { FMLA            D2, D0, V1.D[1] }
    if (_D2 < 0.00000001)
    {
LABEL_148:
      v181 = 1.0 / v171;
      v182 = -(v181 * v181);
      v183.f64[0] = 0.0;
      v184 = 0;
LABEL_178:
      v432 = vmulq_n_f64(_Q1, v181);
      *(_QWORD *)&v183.f64[1] = v184;
      v205 = vmulq_n_f64(v183, _Q1.f64[0]);
      v206 = vmulq_laneq_f64(v183, _Q1, 1);
      *((_QWORD *)&v431[0] + 1) = *(_QWORD *)&v205.f64[1];
      *((_QWORD *)&v431[1] + 1) = *(_QWORD *)&v206.f64[0];
      *(double *)&v431[1] = v182 * _Q1.f64[0];
      *(double *)v431 = v181 + v205.f64[0];
      *((_QWORD *)&v431[2] + 1) = vmuld_lane_f64(v182, _Q1, 1);
      *(double *)&v431[2] = v181 + v206.f64[1];
      goto LABEL_182;
    }
    v175 = v434 * v434 + _D2;
    v176 = sqrt(_D2);
    v413 = _D2;
    v177 = atan2(v176, v434);
    v440.f64[0] = 0.0;
    v178 = sub_20F0BA21C((double *)(v38 + 168), v440.f64, v177);
LABEL_177:
    v181 = v178 / v176;
    _Q1 = v433;
    v183 = vmulq_n_f64(v433, (v171 * (v440.f64[0] / v175) - v181) / v413);
    v182 = -(v440.f64[0] / v175);
    v184 = vextq_s8((int8x16_t)v183, (int8x16_t)v183, 8uLL).u64[0];
    goto LABEL_178;
  }
  sub_20EB372E0(v38, &v432, (uint64_t)v431, &v433, (uint64_t)&v435);
LABEL_182:
  v140 = v128;
  v142 = v383;
  v141 = v387;
  v211 = v132 * v383.f64[0] + _D12 * 0.0;
  _D1 = v132 * 0.0 + _D12 * v387.f64[0];
  _V5.D[1] = v437;
  __asm { FMLA            D3, D1, V5.D[1] }
  v366 = _D3;
  v367 = vmlad_n_f64(v211 * v435.f64[0], _D1, v436.f64[1]);
  v362 = v211 * v436.f64[0] + _D1 * *((double *)&v437 + 1);
LABEL_183:
  _Q0 = vmulq_n_f64(v403, v142.f64[0]);
  v215 = (int8x16_t)vmulq_n_f64(v406, v141.f64[0]);
  v216 = v132 * _Q0.f64[0] + _D12 * *(double *)v215.i64;
  _D14 = v132 * *(double *)vextq_s8((int8x16_t)_Q0, (int8x16_t)_Q0, 8uLL).i64
       + _D12 * *(double *)vextq_s8(v215, v215, 8uLL).i64;
  _D13 = v132 * vmulq_f64(v142, v370).f64[0] + _D12 * vmulq_f64(v141, v373).f64[0];
  v219 = -_D13;
  _Q6 = *(_OWORD *)&v420[8];
  v221 = v422;
  _Q7 = v421;
  __asm
  {
    FMLS            D5, D14, V6.D[0]
    FMLS            D5, D13, V7.D[0]
    FMLS            D4, D14, V6.D[1]
    FMLS            D4, D13, V7.D[1]
  }
  v407 = -(v216 * *(double *)v420) - _D14 * *(double *)&v420[24];
  _D17 = v407 - _D13 * v422;
  _Q3 = *(int64x2_t *)(v13 + 56);
  v229 = *(double *)(v13 + 96);
  _Q6 = *(_OWORD *)(v13 + 80);
  __asm
  {
    FMLS            D12, D4, V3.D[0]
    FMLS            D24, D17, V6.D[0]
  }
  v384 = *(int64x2_t *)(v13 + 32);
  v388 = *(double *)(v13 + 72);
  v374 = _Q3;
  __asm { FMLS            D25, D4, V3.D[1] }
  v415 = _D25;
  __asm { FMLS            D25, D17, V6.D[1] }
  v404 = *(double *)(v13 + 48);
  v235 = -(_D5 * v404) - _D4 * v388;
  v236 = v235 - _D17 * v229;
  _Q1 = *(_OWORD *)(v12 + 32);
  _Q3 = *(_OWORD *)(v12 + 56);
  _Q19 = *(float64x2_t *)(v12 + 80);
  __asm { FMLA            D21, D25, V1.D[1] }
  v240.f64[0] = _D21 + v236 * *(double *)(v12 + 48);
  __asm { FMLA            D0, D25, V3.D[1] }
  _D27 = _Q0.f64[0] + v236 * *(double *)(v12 + 72);
  __asm { FMLA            D0, D25, V19.D[1] }
  _Q19.f64[0] = _Q0.f64[0] + v236 * *(double *)(v12 + 96);
  v244 = *(float64x2_t *)&v426[8];
  v245 = v425;
  _Q20 = v427;
  v369 = _Q6;
  v368 = v236;
  if (v23 <= 0.0)
  {
    *(double *)&v249 = _D5;
    _Q0.f64[0] = _D4;
    v365 = v407 - _D13 * v422;
    *(double *)&v252 = _D21 + v236 * *(double *)(v12 + 48);
    _D3 = _D27;
    v255 = _Q19.f64[0];
  }
  else
  {
    _Q0.f64[1] = v417[1];
    _V3.D[1] = v417[4];
    _V21.D[1] = v417[7];
    *(double *)&v249 = vmlad_n_f64(vmlad_n_f64(_D5 * v417[0], _D4, v417[3]), _D17, v417[6]);
    __asm
    {
      FMLA            D0, D4, V3.D[1]
      FMLA            D0, D17, V21.D[1]
    }
    v365 = _D5 * v417[2] + _D4 * v417[5] + _D17 * v417[8];
    _V21.D[1] = v418[4];
    _V8.D[1] = v418[7];
    *(double *)&v252 = vmlad_n_f64(vmlad_n_f64(v240.f64[0] * v418[0], _D27, v418[3]), _Q19.f64[0], v418[6]);
    __asm
    {
      FMLA            D3, D27, V21.D[1]
      FMLA            D3, D19, V8.D[1]
    }
    v255 = v240.f64[0] * v418[2] + _D27 * v418[5] + _Q19.f64[0] * v418[8];
  }
  v256 = v391;
  v392 = *(_OWORD *)(v391 + 64);
  v4.f64[0] = *(float64_t *)v426;
  v5.f64[0] = *(float64_t *)&v426[24];
  v6.f64[0] = v428;
  v371 = *(double *)(v256 + 80);
  v257 = v434;
  v258 = v433.f64[1];
  v259 = v433.f64[0];
  *a3 = v140;
  if (v393)
  {
    v357 = v255;
    v360 = v216;
    v361 = _D12;
    v394 = v221;
    v260 = (float64x2_t)vextq_s8((int8x16_t)v376, (int8x16_t)v376, 8uLL);
    _Q12 = vmlsq_lane_f64(vmulq_n_f64(_Q20, v260.f64[0]), v244, v375.f64[0], 0);
    _Q8 = vmlsq_lane_f64(vmulq_n_f64(v245, v375.f64[0]), _Q20, v376.f64[0], 0);
    _Q15 = vmlsq_lane_f64(vmulq_n_f64(v244, v376.f64[0]), v245, v260.f64[0], 0);
    v264 = v6.f64[0];
    v265 = v4.f64[0];
    __asm
    {
      FMLA            D23, D27, V12.D[1]
      FMLA            D7, D27, V8.D[1]
      FMLA            D16, D27, V15.D[1]
    }
    *(double *)a4 = vmlad_n_f64(_D23, _Q19.f64[0], vmlsq_f64(vmulq_f64(v260, v6), v375, v5).f64[0]);
    *(double *)(a4 + 8) = vmlad_n_f64(_D7, _Q19.f64[0], vmlsq_f64(vmulq_f64(v375, v4), v376, v6).f64[0]);
    *(double *)(a4 + 16) = vmlad_n_f64(_D16, _Q19.f64[0], vmlsq_f64(vmulq_f64(v376, v5), v260, v4).f64[0]);
    v269 = (_OWORD *)(a4 + 24);
    if (*(_BYTE *)(v11 + 128))
    {
      *(double *)(a4 + 40) = v357;
      *((double *)&v252 + 1) = _D3;
      *v269 = v252;
    }
    else
    {
      *(_QWORD *)v269 = 0;
      *(_QWORD *)(a4 + 32) = 0;
      *(_QWORD *)(a4 + 40) = 0;
    }
    v219 = -_D13;
    v221 = v394;
    v235 = -(_D5 * v404) - _D4 * v388;
    _D12 = v361;
    _V8.D[1] = v244.f64[1];
    v216 = v360;
    _V30.D[1] = v245.f64[1];
    v272 = (float64x2_t *)(a4 + 48);
    if (v395)
      goto LABEL_193;
LABEL_190:
    _Q0.f64[1] = 0.0;
    v272[1] = 0u;
    v272[2] = 0u;
    *v272 = 0u;
    goto LABEL_196;
  }
  v265 = v4.f64[0];
  v264 = v6.f64[0];
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)a4 = 0u;
  _V8.D[1] = v244.f64[1];
  _V30.D[1] = v245.f64[1];
  v272 = (float64x2_t *)(a4 + 48);
  if (!v395)
    goto LABEL_190;
LABEL_193:
  *(double *)&v273 = _D14 * v257 - _D13 * v258;
  *(double *)(a4 + 64) = v216 * v258 - _D14 * v259;
  *((double *)&v273 + 1) = _D13 * v259 - v216 * v257;
  *(_OWORD *)(a4 + 48) = v273;
  v274 = (_OWORD *)(a4 + 72);
  if (*(_BYTE *)(v10 + 128))
  {
    *(double *)(a4 + 88) = v365;
    *((_QWORD *)&v249 + 1) = *(_QWORD *)&_Q0.f64[0];
    *v274 = v249;
  }
  else
  {
    *(_QWORD *)v274 = 0;
    *(_QWORD *)(a4 + 80) = 0;
    *(_QWORD *)(a4 + 88) = 0;
  }
LABEL_196:
  if (*(_BYTE *)(v12 + 20))
  {
    v240.f64[1] = _D27;
    v275 = vnegq_f64(v240);
    v276 = vnegq_f64(_Q19).f64[0];
    *(double *)&v277 = vmuld_lane_f64(v377, v275, 1) - v378.f64[1] * v276;
    *((double *)&v277 + 1) = v378.f64[0] * v276 - v377 * v275.f64[0];
    *(_OWORD *)(a4 + 96) = v277;
    *(double *)(a4 + 112) = v378.f64[1] * v275.f64[0] - vmuld_lane_f64(v378.f64[0], v275, 1);
    *(_QWORD *)(a4 + 120) = _D24;
    *(_QWORD *)(a4 + 128) = _D25;
    *(double *)(a4 + 136) = v368;
  }
  __asm
  {
    FMLA            D0, D27, V30.D[1]
    FMLA            D1, D27, V8.D[1]
    FMLA            D9, D27, V20.D[1]
  }
  if (*(_BYTE *)(v13 + 20))
  {
    _D16 = vextq_s8(v379, v379, 8uLL).u64[0];
    v282.f64[0] = v404;
    v282.f64[1] = v388;
    _V6.D[1] = *((_QWORD *)&v369 + 1);
    v284 = vmlaq_f64(vmlaq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v384, v374), *(double *)v379.i64), (float64x2_t)vdupq_laneq_s64((int64x2_t)v379, 1), (float64x2_t)vzip2q_s64(v384, v374)), (float64x2_t)vdupq_lane_s64(v380, 0), v282);
    __asm { FMLA            D3, D16, V6.D[1] }
    v286 = _D3 + v229 * *(double *)&v380;
    v287 = -(v407 + v219 * v221);
    v288 = v286 * _D4;
    v289 = vmuld_lane_f64(_D17, v284, 1);
    v290 = _D17 * v284.f64[0];
    v291 = _D5 * v286;
    v292 = vmuld_lane_f64(_D5, v284, 1);
    v284.f64[0] = _D4 * v284.f64[0];
    *(double *)&v293 = v289 - v288;
    *((double *)&v293 + 1) = v291 - v290;
    *(_OWORD *)(a4 + 144) = v293;
    *(double *)(a4 + 160) = v284.f64[0] - v292;
    *(double *)(a4 + 168) = -(_D12 + v287 * *(double *)&v369);
    *(double *)(a4 + 176) = -(v415 + v287 * *((double *)&v369 + 1));
    *(double *)(a4 + 184) = -(v235 + v287 * v229);
  }
  v294 = _D0 + _Q19.f64[0] * v265;
  _D1 = _D1 + _Q19.f64[0] * v5.f64[0];
  v296 = _D9 + _Q19.f64[0] * v264;
  if (*(_BYTE *)(v416 + 20))
  {
    _V4.D[1] = *((_QWORD *)&v392 + 1);
    __asm { FMLA            D3, D1, V4.D[1] }
    *(double *)(a4 + 368) = _D3 + v296 * v371;
  }
  v299 = v294 * v396;
  _D10 = _D1 * v396;
  _D11 = v296 * v396;
  if (!*(_BYTE *)(v411 + 144))
  {
    _Q0.f64[1] = 0.0;
    *(_OWORD *)(a4 + 192) = 0u;
    *(_OWORD *)(a4 + 208) = 0u;
    if (*(_BYTE *)(v138 + 144))
      goto LABEL_206;
LABEL_210:
    _Q0.f64[1] = 0.0;
    *(_OWORD *)(a4 + 224) = 0u;
    *(_OWORD *)(a4 + 240) = 0u;
LABEL_211:
    if (!v390)
      goto LABEL_216;
    goto LABEL_212;
  }
  if (v381)
  {
    sub_20F62E744(v411 + 16);
    v302 = *(_QWORD *)(v416 + 24);
    _Q0 = *(float64x2_t *)(v302 + 128);
    _Q3 = *(_OWORD *)(v302 + 144);
    _Q2 = *(_OWORD *)(v302 + 160);
    _Q5 = *(_OWORD *)(v302 + 176);
    _Q4 = *(_OWORD *)(v302 + 192);
    v307 = vmlad_n_f64(vmlad_n_f64(v299 * *(double *)(v302 + 112), _D10, *(double *)&_Q3), _D11, *(double *)&_Q5);
    __asm
    {
      FMLA            D1, D10, V3.D[1]
      FMLA            D1, D11, V5.D[1]
    }
    *(double *)&_Q3 = vmlad_n_f64(vmlad_n_f64(v299 * _Q0.f64[0], _D10, *(double *)&_Q2), _D11, *(double *)&_Q4);
    __asm { FMLA            D0, D10, V2.D[1] }
    *(double *)(a4 + 192) = v307;
    *(_QWORD *)(a4 + 200) = _D1;
    __asm { FMLA            D0, D11, V4.D[1] }
    *(_QWORD *)(a4 + 208) = _Q3;
    *(float64_t *)(a4 + 216) = _Q0.f64[0];
  }
  if (!*(_BYTE *)(v138 + 144))
    goto LABEL_210;
LABEL_206:
  if (!v398)
    goto LABEL_211;
  if (*(_BYTE *)(*(_QWORD *)(v138 + 24) + 40))
  {
    __asm { FMOV            V3.2D, #1.0 }
    _Q0.f64[1] = 1.0;
    v311 = 0;
    v312 = 0;
  }
  else
  {
    *(_QWORD *)&_Q0.f64[1] = unk_2103BBEF8;
    v311 = unk_2103BBED8;
    *((_QWORD *)&_Q3 + 1) = 0x3FF0000000000000;
    v312 = unk_2103BBEB8;
  }
  _V17.D[1] = v358;
  _D7 = 0;
  __asm { FMLA            D16, D7, V17.D[1] }
  _V7.D[1] = v359;
  _D6 = 0;
  __asm { FMLA            D16, D6, V7.D[1] }
  _D3 = *((_QWORD *)&_Q3 + 1);
  __asm { FMLA            D6, D3, V17.D[1] }
  _D3 = v312;
  __asm { FMLA            D6, D3, V7.D[1] }
  _D4 = 0;
  __asm { FMLA            D3, D4, V17.D[1] }
  _D1 = v311;
  __asm { FMLA            D3, D1, V7.D[1] }
  _D2 = 0;
  __asm { FMLA            D1, D2, V17.D[1] }
  _D0 = _Q0.f64[1];
  *(_QWORD *)(a4 + 224) = _D16;
  *(_QWORD *)(a4 + 232) = _D6;
  __asm { FMLA            D1, D0, V7.D[1] }
  *(_QWORD *)(a4 + 240) = _D3;
  *(_QWORD *)(a4 + 248) = _D1;
  if (!v390)
  {
LABEL_216:
    if (!v399)
      goto LABEL_218;
    goto LABEL_217;
  }
LABEL_212:
  sub_20F62F34C(v410 + 16);
  v313 = *(_QWORD *)(v416 + 24);
  _Q0 = *(float64x2_t *)(v313 + 224);
  _Q3 = *(_OWORD *)(v313 + 240);
  _Q2 = *(_OWORD *)(v313 + 256);
  _Q5 = *(_OWORD *)(v313 + 272);
  _Q4 = *(_OWORD *)(v313 + 288);
  v318 = vmlad_n_f64(vmlad_n_f64(v299 * *(double *)(v313 + 208), _D10, *(double *)&_Q3), _D11, *(double *)&_Q5);
  __asm
  {
    FMLA            D1, D10, V3.D[1]
    FMLA            D1, D11, V5.D[1]
  }
  *(double *)&_Q3 = vmlad_n_f64(vmlad_n_f64(v299 * _Q0.f64[0], _D10, *(double *)&_Q2), _D11, *(double *)&_Q4);
  __asm { FMLA            D0, D10, V2.D[1] }
  *(double *)(a4 + 256) = v318;
  *(_QWORD *)(a4 + 264) = _D1;
  __asm { FMLA            D0, D11, V4.D[1] }
  *(_QWORD *)(a4 + 272) = _Q3;
  *(float64_t *)(a4 + 280) = _Q0.f64[0];
  if (v399)
  {
LABEL_217:
    _Q0.f64[1] = *((float64_t *)&v363 + 1);
    *(_OWORD *)(a4 + 288) = v364;
    *(_OWORD *)(a4 + 304) = v363;
  }
LABEL_218:
  if (v389)
  {
    sub_20F8127FC(v409 + 16);
    v339 = *(_QWORD *)(v416 + 24);
    _Q3 = *(_OWORD *)(v339 + 328);
    _Q5 = *(_OWORD *)(v339 + 352);
    __asm
    {
      FMLA            D1, D10, V3.D[1]
      FMLA            D1, D11, V5.D[1]
    }
    _Q0.f64[0] = v299 * *(double *)(v339 + 320) + _D10 * *(double *)(v339 + 344) + _D11 * *(double *)(v339 + 368);
    *(double *)(a4 + 320) = vmlad_n_f64(vmlad_n_f64(v299 * *(double *)(v339 + 304), _D10, *(double *)&_Q3), _D11, *(double *)&_Q5);
    *(_QWORD *)(a4 + 328) = _D1;
    *(float64_t *)(a4 + 336) = _Q0.f64[0];
  }
  if (v139)
  {
    *(double *)(a4 + 360) = v362;
    _Q0.f64[0] = v367;
    _Q0.f64[1] = v366;
    *(float64x2_t *)(a4 + 344) = _Q0;
  }
  if (*(_BYTE *)(*a2 + 20))
  {
    _Q0 = vmaxnmq_f64(vmaxnmq_f64(vmulq_f64(*(float64x2_t *)a4, *(float64x2_t *)a4), vmulq_f64(*(float64x2_t *)(a4 + 32), *(float64x2_t *)(a4 + 32))), vmulq_f64(*(float64x2_t *)(a4 + 16), *(float64x2_t *)(a4 + 16)));
    v344 = vmaxnmvq_f64(_Q0) < 100000000.0;
    if (*(_BYTE *)(a2[1] + 20))
    {
LABEL_224:
      _Q0 = vmaxnmq_f64(vmaxnmq_f64(vmulq_f64(*v272, *v272), vmulq_f64(v272[2], v272[2])), vmulq_f64(v272[1], v272[1]));
      v344 = vmaxnmvq_f64(_Q0) < 100000000.0 && v344;
    }
  }
  else
  {
    v344 = 1;
    if (*(_BYTE *)(a2[1] + 20))
      goto LABEL_224;
  }
  if (*(_BYTE *)(a2[2] + 20))
  {
    _Q0 = vmaxnmq_f64(vmaxnmq_f64(vmulq_f64(*(float64x2_t *)(a4 + 96), *(float64x2_t *)(a4 + 96)), vmulq_f64(*(float64x2_t *)(a4 + 128), *(float64x2_t *)(a4 + 128))), vmulq_f64(*(float64x2_t *)(a4 + 112), *(float64x2_t *)(a4 + 112)));
    v344 = vmaxnmvq_f64(_Q0) < 100000000.0 && v344;
  }
  if (*(_BYTE *)(a2[3] + 20))
  {
    _Q0 = vmaxnmq_f64(vmaxnmq_f64(vmulq_f64(*(float64x2_t *)(a4 + 144), *(float64x2_t *)(a4 + 144)), vmulq_f64(*(float64x2_t *)(a4 + 176), *(float64x2_t *)(a4 + 176))), vmulq_f64(*(float64x2_t *)(a4 + 160), *(float64x2_t *)(a4 + 160)));
    v344 = vmaxnmvq_f64(_Q0) < 100000000.0 && v344;
  }
  if (*(_BYTE *)(a2[4] + 20))
  {
    _Q0 = vmaxnmq_f64(vmulq_f64(*(float64x2_t *)(a4 + 192), *(float64x2_t *)(a4 + 192)), vmulq_f64(*(float64x2_t *)(a4 + 208), *(float64x2_t *)(a4 + 208)));
    v344 = vmaxnmvq_f64(_Q0) < 100000000.0 && v344;
  }
  if (*(_BYTE *)(a2[5] + 20))
  {
    _Q0 = vmaxnmq_f64(vmulq_f64(*(float64x2_t *)(a4 + 224), *(float64x2_t *)(a4 + 224)), vmulq_f64(*(float64x2_t *)(a4 + 240), *(float64x2_t *)(a4 + 240)));
    v344 = vmaxnmvq_f64(_Q0) < 100000000.0 && v344;
  }
  if (*(_BYTE *)(a2[6] + 20))
  {
    _Q0 = vmaxnmq_f64(vmulq_f64(*(float64x2_t *)(a4 + 256), *(float64x2_t *)(a4 + 256)), vmulq_f64(*(float64x2_t *)(a4 + 272), *(float64x2_t *)(a4 + 272)));
    v344 = vmaxnmvq_f64(_Q0) < 100000000.0 && v344;
  }
  if (*(_BYTE *)(a2[7] + 20))
  {
    _Q0 = vmaxnmq_f64(vmulq_f64(*(float64x2_t *)(a4 + 288), *(float64x2_t *)(a4 + 288)), vmulq_f64(*(float64x2_t *)(a4 + 304), *(float64x2_t *)(a4 + 304)));
    v344 = vmaxnmvq_f64(_Q0) < 100000000.0 && v344;
  }
  if (*(_BYTE *)(a2[8] + 20))
  {
    _Q0.f64[0] = *(float64_t *)(a4 + 336);
    *(_QWORD *)&v352.f64[0] = *(_OWORD *)&vmulq_f64(_Q0, _Q0);
    v352.f64[1] = NAN;
    _Q0 = vmaxnmq_f64(vmulq_f64(*(float64x2_t *)(a4 + 320), *(float64x2_t *)(a4 + 320)), v352);
    v344 = vmaxnmvq_f64(_Q0) < 100000000.0 && v344;
  }
  if (*(_BYTE *)(a2[9] + 20))
  {
    _Q0.f64[0] = *(float64_t *)(a4 + 360);
    *(_QWORD *)&v354.f64[0] = *(_OWORD *)&vmulq_f64(_Q0, _Q0);
    v354.f64[1] = NAN;
    v344 = vmaxnmvq_f64(vmaxnmq_f64(vmulq_f64(*(float64x2_t *)(a4 + 344), *(float64x2_t *)(a4 + 344)), v354)) < 100000000.0
        && v344;
  }
  if (*(_BYTE *)(a2[10] + 20))
    return *(double *)(a4 + 368) * *(double *)(a4 + 368) < 100000000.0 && v344;
  return v344;
}

uint64_t sub_20FC80984(uint64_t a1, uint64_t *a2, uint64_t a3, double **a4)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  __int128 v14;
  float64x2_t v15;
  __n128 v16;
  unint64_t *v17;
  float64x2_t v18;
  double v19;
  double v20;
  float64x2_t v22;
  double v23;
  float64x2_t v26;
  float64x2_t v32;
  float64x2_t v33;
  unsigned int v34;
  double v35;
  double v36;
  int v37;
  char v38;
  float64x2_t v42;
  double *v45;
  double v46;
  float64_t v47;
  double v48;
  double v49;
  double v53;
  double v54;
  double v55;
  double v56;
  unsigned int v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  BOOL v61;
  double v64;
  double v65;
  float64x2_t v66;
  unint64_t v67;
  float64x2_t v71;
  double v74;
  float64x2_t v75;
  float64x2_t v78;
  double v80;
  float64x2_t v81;
  double v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  int8x16_t v88;
  double v91;
  float64x2_t v92;
  double v93;
  float64x2_t v94;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  double v102;
  float64x2_t v103;
  double v104;
  float64x2_t v105;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  double v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  int8x16_t v117;
  float64x2_t v118;
  float64x2_t v119;
  int8x16_t v120;
  int8x16_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  int8x16_t v138;
  double v139;
  float64x2_t v140;
  float64x2_t v141;
  double v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  int8x16_t v148;
  int8x16_t v149;
  int8x16_t v150;
  int8x16_t v151;
  int8x16_t v152;
  int8x16_t v153;
  int8x16_t v154;
  int8x16_t v155;
  int8x16_t v156;
  int8x16_t v157;
  int8x16_t v158;
  int8x16_t v159;
  int8x16_t v160;
  int8x16_t v161;
  int8x16_t v162;
  int8x16_t v163;
  int8x16_t v164;
  int8x16_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64_t v171;
  int8x16_t v172;
  float64x2_t v173;
  int8x16_t v174;
  int8x16_t v175;
  int64x2_t v177;
  _BYTE v178[32];
  float64x2_t v179;
  double v180;
  float64x2_t v181;
  float64_t v182;
  float64x2_t v183;
  double v184;
  float64x2_t v185;
  double v186;
  float64x2_t v187;
  double v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  uint64_t v193;

  result = 0;
  v193 = *MEMORY[0x24BDAC8D0];
  *(_WORD *)(a1 + 168) = 0;
  v6 = *(_QWORD *)(a1 + 160);
  if (v6)
    _ZF = *a4 == 0;
  else
    _ZF = 1;
  if (!_ZF)
  {
    v10 = *a2;
    v9 = a2[1];
    v11 = a2[3];
    v12 = *(_DWORD *)(v6 + 992);
    if (v12 == -1)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_105:
        abort();
      }
      v12 = *(_DWORD *)(v6 + 992);
      if (v12 <= 1)
      {
LABEL_7:
        if (!v12)
          goto LABEL_8;
        goto LABEL_15;
      }
    }
    else if (v12 <= 1)
    {
      goto LABEL_7;
    }
    if (!*(_BYTE *)(v11 + 20))
      goto LABEL_15;
    v13 = *(_DWORD *)(*(_QWORD *)(a1 + 160) + 992);
    if (v13 != -1)
    {
      if (v13 <= 1)
      {
LABEL_14:
        if (!v13)
        {
LABEL_8:
          sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
          abort();
        }
      }
LABEL_15:
      v14 = *(_OWORD *)(v10 + 48);
      v15 = *(float64x2_t *)(v10 + 80);
      *(_OWORD *)&v178[16] = *(_OWORD *)(v10 + 64);
      v179 = v15;
      v180 = *(double *)(v10 + 96);
      v16 = *(__n128 *)(v10 + 32);
      v177 = (int64x2_t)v16;
      *(_OWORD *)v178 = v14;
      v18 = *(float64x2_t *)(v10 + 104);
      v181 = v18;
      v182 = *(double *)(v10 + 120);
      v17 = *(unint64_t **)(a1 + 160);
      *(_QWORD *)&v18.f64[0] = v17[178];
      if (v18.f64[0] > 0.0)
      {
        v16.n128_f64[0] = *(double *)(a1 + 16) - *((double *)v17 + 179);
        v18.f64[0] = v18.f64[0] * v16.n128_f64[0];
        sub_20FC7D4B0(v9 + 136, v9 + 160, (float64x2_t *)&v177, 0, v18, v16);
        v17 = *(unint64_t **)(a1 + 160);
      }
      v20 = **a4;
      v19 = (*a4)[1];
      v148 = *(int8x16_t *)(*(_QWORD *)(v9 + 24) + 456);
      v149 = *(int8x16_t *)(*(_QWORD *)(v9 + 24) + 472);
      v152 = *(int8x16_t *)(*(_QWORD *)(v9 + 24) + 520);
      v153 = *(int8x16_t *)(*(_QWORD *)(v9 + 24) + 536);
      v150 = *(int8x16_t *)(*(_QWORD *)(v9 + 24) + 488);
      v151 = *(int8x16_t *)(*(_QWORD *)(v9 + 24) + 504);
      v161 = *(int8x16_t *)(*(_QWORD *)(v9 + 24) + 616);
      v162 = *(int8x16_t *)(*(_QWORD *)(v9 + 24) + 568);
      v154 = *(int8x16_t *)(*(_QWORD *)(v9 + 24) + 552);
      v155 = *(int8x16_t *)(*(_QWORD *)(v9 + 24) + 600);
      _Q2 = *(float64x2_t *)(*(_QWORD *)(v9 + 24) + 648);
      v160 = *(int8x16_t *)(*(_QWORD *)(v9 + 24) + 664);
      v164 = *(int8x16_t *)(*(_QWORD *)(v9 + 24) + 632);
      v165 = *(int8x16_t *)(*(_QWORD *)(v9 + 24) + 728);
      v158 = *(int8x16_t *)(*(_QWORD *)(v9 + 24) + 584);
      v159 = *(int8x16_t *)(*(_QWORD *)(v9 + 24) + 712);
      v163 = *(int8x16_t *)(*(_QWORD *)(v9 + 24) + 680);
      v22 = *(float64x2_t *)(*(_QWORD *)(v9 + 24) + 696);
      v156 = (int8x16_t)_Q2;
      v157 = (int8x16_t)v22;
      *(_BYTE *)(a1 + 168) = 0;
      v23 = *(double *)(v9 + 96);
      _Q6 = *(float64x2_t *)(v9 + 80);
      v22.f64[0] = *(float64_t *)(a1 + 40);
      _Q2.f64[0] = *(float64_t *)(v9 + 120);
      *(_QWORD *)&v22.f64[0] = *(_OWORD *)&vsubq_f64(v22, _Q2);
      _Q1 = vsubq_f64(*(float64x2_t *)(a1 + 24), *(float64x2_t *)(v9 + 104));
      v168 = *(float64x2_t *)(v9 + 56);
      v169 = *(float64x2_t *)(v9 + 32);
      v171 = *(double *)(v9 + 72);
      _Q2.f64[0] = *(float64_t *)(v9 + 48);
      _Q2.f64[1] = v171;
      v26 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v169, (int64x2_t)v168), _Q1.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v169, (int64x2_t)v168), _Q1, 1), _Q2, v22.f64[0]);
      _Q4 = vmulq_f64(_Q6, _Q1);
      _Q1.f64[0] = _Q1.f64[1];
      v170 = _Q6;
      __asm { FMLA            D4, D1, V6.D[1] }
      _Q4.f64[0] = vmlad_n_f64(_Q4.f64[0], v23, v22.f64[0]);
      v146 = _Q4;
      v147 = v26;
      _Q0 = vsubq_f64(v26, v181);
      v144 = (float64x2_t)vzip1q_s64(v177, *(int64x2_t *)&v178[8]);
      v166 = (float64x2_t)v177;
      v167 = *(float64x2_t *)&v178[8];
      v145 = (float64x2_t)vzip2q_s64(v177, *(int64x2_t *)&v178[8]);
      v32 = vmlaq_laneq_f64(vmulq_n_f64(v144, _Q0.f64[0]), v145, _Q0, 1);
      v26.f64[1] = v179.f64[1];
      _Q0.f64[0] = _Q0.f64[1];
      v175 = (int8x16_t)v179;
      __asm { FMLA            D2, D0, V3.D[1] }
      _Q0.f64[0] = v182;
      *(_QWORD *)&_Q0.f64[0] = *(_OWORD *)&vsubq_f64(_Q4, _Q0);
      v26.f64[0] = *(float64_t *)v178;
      _Q4.f64[0] = *(float64_t *)&v178[24];
      v174 = (int8x16_t)v26;
      v26.f64[1] = *(float64_t *)&v178[24];
      v143 = v26;
      v33 = vmlaq_n_f64(v32, v26, _Q0.f64[0]);
      v26.f64[0] = v180;
      v172 = (int8x16_t)_Q4;
      v173 = v26;
      v183 = v33;
      v184 = vmlad_n_f64(_Q2.f64[0], v180, _Q0.f64[0]);
      v34 = *((_DWORD *)v17 + 248);
      v35 = *(double *)(a1 + 152);
      if (v34 == -1)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v34 = *((_DWORD *)v17 + 248);
        if (v34 <= 7)
        {
LABEL_19:
          if (v34 > 3)
          {
            if (v34 > 5)
            {
              if (v34 != 6)
              {
                v38 = sub_20EB3345C((uint64_t)v17, &v189, (uint64_t)&v185, &v183, 0);
                goto LABEL_85;
              }
              if (v184 == 0.0)
                v46 = 1.0;
              else
                v46 = 1.0 / v184;
              v47 = v183.f64[0] * v46;
              v48 = v46 * v183.f64[1];
              v192.f64[0] = v183.f64[0] * v46;
              v192.f64[1] = v46 * v183.f64[1];
              sub_20EB2837C(&v189, v190.f64, &v192, (double *)v17 + 21, (float64x2_t *)v17 + 12, (double *)v17 + 26);
              v185.f64[0] = v46 * v190.f64[0];
              v185.f64[1] = v46 * v190.f64[1];
              v187.f64[0] = v46 * v191.f64[0];
              v186 = v46 * (-(v190.f64[0] * v47) - v48 * v190.f64[1]);
              v187.f64[1] = v46 * v191.f64[1];
              v188 = v46 * (-(v191.f64[0] * v47) - v48 * v191.f64[1]);
              v37 = *((_DWORD *)v17 + 248);
              if (v37 != -1)
                goto LABEL_87;
LABEL_98:
              if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
              {
                abort();
              }
              if (!*((_DWORD *)v17 + 248))
              {
LABEL_100:
                sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
                abort();
              }
LABEL_88:
              _V4.D[1] = v166.f64[1];
              _V7.D[1] = v167.f64[1];
              _V30.D[1] = *(double *)&v175.i64[1];
              v71 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v169, v166.f64[0]), v168, v166, 1), v170, *(double *)v174.i64);
              _D2 = v171;
              __asm { FMLA            D0, D2, V4.D[1] }
              v74 = _D0 + v23 * *(double *)v174.i64;
              v75 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v169, v167.f64[0]), v168, v167, 1), v170, *(double *)v172.i64);
              __asm { FMLA            D0, D2, V7.D[1] }
              _D7 = _D0 + v23 * *(double *)v172.i64;
              v78 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v169, *(double *)v175.i64), v168, (float64x2_t)v175, 1), v170, v173.f64[0]);
              __asm { FMLA            D0, D2, V30.D[1] }
              v80 = _D0 + v23 * v173.f64[0];
              *(_QWORD *)&v81.f64[0] = *v17;
              v82 = *((double *)v17 + 4);
              v81.f64[1] = v82;
              *(_QWORD *)&v83.f64[0] = v17[2];
              *(_QWORD *)&v83.f64[1] = v17[5];
              v84 = vmlaq_f64(v83, v81, v189);
              v81.f64[0] = 0.0;
              v81.f64[1] = v82;
              v85 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)*v17, v185.f64[0]), v81, v187.f64[0]);
              v86 = vmlaq_laneq_f64(vmulq_laneq_f64((float64x2_t)*v17, v185, 1), v81, v187, 1);
              v87 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)*v17, v186), v81, v188);
              v88 = 0uLL;
              _Q22 = vmlaq_f64(vmulq_n_f64(v185, *(double *)v17), (float64x2_t)0, v187);
              _Q18 = vmlaq_n_f64(vmulq_f64(v185, (float64x2_t)0), v187, v82);
              v91 = v186 * *(double *)v17 + v188 * 0.0;
              v92 = vmlaq_n_f64(vmulq_n_f64(v85, v71.f64[0]), v86, v75.f64[0]);
              v93 = v186 * 0.0 + v188 * v82;
              v94 = vmlaq_laneq_f64(vmulq_n_f64(v71, _Q22.f64[0]), v75, _Q22, 1);
              __asm { FMLA            D26, D7, V22.D[1] }
              v96 = vmlaq_laneq_f64(vmulq_laneq_f64(v85, v71, 1), v86, v75, 1);
              v97 = vmlaq_laneq_f64(vmulq_n_f64(v71, _Q18.f64[0]), v75, _Q18, 1);
              __asm { FMLA            D22, D7, V18.D[1] }
              v98 = vmlaq_n_f64(v92, v87, v78.f64[0]);
              v99 = vmlaq_laneq_f64(v96, v87, v78, 1);
              v100 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v85, v74), v86, _D7), v87, v80);
              v101 = vmlaq_n_f64(v94, v78, v91);
              v102 = _D26 + v80 * v91;
              v103 = vmlaq_n_f64(v97, v78, v93);
              v104 = _Q22.f64[0] + v80 * v93;
              v105 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v98, *(double *)(a1 + 48)), v99, *(float64x2_t *)(a1 + 48), 1), v100, *(double *)(a1 + 64));
              _Q22 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v98, *(double *)(a1 + 72)), v99, *(float64x2_t *)(a1 + 72), 1), v100, *(double *)(a1 + 88));
              v107 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v98, *(double *)(a1 + 96)), v99, *(float64x2_t *)(a1 + 96), 1), v100, *(double *)(a1 + 112));
              v108 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v105, v101.f64[0]), _Q22, v101, 1), v107, v102);
              v78.f64[0] = v108.f64[0];
              v78.f64[1] = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v105, *(double *)&v103), _Q22, v103, 1), v107, v104).f64[1];
              v109 = vaddq_f64((float64x2_t)vdupq_lane_s64(COERCE__INT64(v35 * v35), 0), v78);
              v110 = vsubq_f64(v84, *(float64x2_t *)(a1 + 8));
              v111 = vmuld_lane_f64(v109.f64[0], v109, 1) - vmuld_lane_f64(v108.f64[1], v108, 1);
              v107.f64[0] = sqrt(v111);
              _Q22.f64[0] = v109.f64[1] + v107.f64[0];
              v103.f64[0] = -v108.f64[1];
              _Q22.f64[1] = -v108.f64[1];
              v103.f64[1] = v109.f64[0] + v107.f64[0];
              v112 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(sqrt(v111 * (vaddvq_f64(v109) + v107.f64[0] + v107.f64[0]))), 0);
              v113 = vdivq_f64(v103, v112);
              v114 = vdivq_f64(_Q22, v112);
              _Q1 = vmlaq_laneq_f64(vmulq_n_f64(v114, v110.f64[0]), v113, v110, 1);
              _Q22.f64[0] = _Q1.f64[1];
              __asm { FMLA            D17, D22, V1.D[1] }
              if (_D17 > v19)
                goto LABEL_91;
              v117 = (int8x16_t)vmlsq_laneq_f64(vmulq_n_f64(v145, v146.f64[0]), v143, v147, 1);
              v118 = (float64x2_t)vextq_s8(v175, v174, 8uLL);
              v119 = vmulq_f64(v118, v146);
              v120 = (int8x16_t)vmlsq_lane_f64(vmulq_n_f64((float64x2_t)vextq_s8((int8x16_t)v118, v172, 8uLL), v147.f64[0]), v144, v146.f64[0], 0);
              v121 = (int8x16_t)vmlsq_lane_f64(vmulq_laneq_f64(v144, v147, 1), v145, v147.f64[0], 0);
              v122 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v85, *(double *)v117.i64), v86, *(double *)vextq_s8(v117, v117, 8uLL).i64), v87, vmlsq_laneq_f64(v119, v173, v147, 1).f64[0]);
              v123 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v85, *(double *)v120.i64), v86, *(double *)vextq_s8(v120, v120, 8uLL).i64), v87, vmlsq_f64(vmulq_n_f64(v147, v173.f64[0]), (float64x2_t)v175, v146).f64[0]);
              v124 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v85, *(double *)v121.i64), v86, *(double *)vextq_s8(v121, v121, 8uLL).i64), v87, vmlsq_laneq_f64(vmulq_laneq_f64((float64x2_t)v175, v147, 1), v147, (float64x2_t)v175, 1).f64[0]);
              v125 = vmlsq_lane_f64(vmlsq_lane_f64(vmlsq_lane_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v122, *(double *)v148.i64), v123, *(double *)vextq_s8(v148, v148, 8uLL).i64), v124, *(double *)v149.i64), v98, *(double *)vextq_s8(v149, v149, 8uLL).i64, 0), v99, *(double *)v150.i64, 0), v100, *(double *)vextq_s8(v150, v150, 8uLL).i64, 0);
              v126 = vmlsq_lane_f64(vmlsq_lane_f64(vmlsq_lane_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v122, *(double *)v151.i64), v123, *(double *)vextq_s8(v151, v151, 8uLL).i64), v124, *(double *)v152.i64), v98, *(double *)vextq_s8(v152, v152, 8uLL).i64, 0), v99, *(double *)v153.i64, 0), v100, *(double *)vextq_s8(v153, v153, 8uLL).i64, 0);
              v127 = vmlsq_lane_f64(vmlsq_lane_f64(vmlsq_lane_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v122, *(double *)v154.i64), v123, *(double *)vextq_s8(v154, v154, 8uLL).i64), v124, *(double *)v162.i64), v98, *(double *)vextq_s8(v162, v162, 8uLL).i64, 0), v99, *(double *)v158.i64, 0), v100, *(double *)vextq_s8(v158, v158, 8uLL).i64, 0);
              v128 = vmlsq_lane_f64(vmlsq_lane_f64(vmlsq_lane_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v122, *(double *)v155.i64), v123, *(double *)vextq_s8(v155, v155, 8uLL).i64), v124, *(double *)v161.i64), v98, *(double *)vextq_s8(v161, v161, 8uLL).i64, 0), v99, *(double *)v164.i64, 0), v100, *(double *)vextq_s8(v164, v164, 8uLL).i64, 0);
              v129 = vmlsq_lane_f64(vmlsq_lane_f64(vmlsq_lane_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v122, *(double *)v156.i64), v123, *(double *)vextq_s8(v156, v156, 8uLL).i64), v124, *(double *)v160.i64), v98, *(double *)vextq_s8(v160, v160, 8uLL).i64, 0), v99, *(double *)v163.i64, 0), v100, *(double *)vextq_s8(v163, v163, 8uLL).i64, 0);
              v130 = vmlsq_lane_f64(vmlsq_lane_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v125, v122.f64[0]), v126, v123.f64[0]), v127, v124.f64[0]), v128, v98.f64[0], 0), v129, v99.f64[0], 0);
              v131 = vmlsq_lane_f64(vmlsq_lane_f64(vmlsq_lane_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v122, *(double *)v157.i64), v123, *(double *)vextq_s8(v157, v157, 8uLL).i64), v124, *(double *)v159.i64), v98, *(double *)vextq_s8(v159, v159, 8uLL).i64, 0), v99, *(double *)v165.i64, 0), v100, *(double *)vextq_s8(v165, v165, 8uLL).i64, 0);
              v132 = vaddq_f64(vmlsq_laneq_f64(vmlsq_laneq_f64(vmlsq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v125, v122, 1), v126, v123, 1), v127, v124, 1), v128, v98, 1), v129, v99, 1), v131, v100, 1), v109);
              v109.f64[1] = v108.f64[1];
              _Q3 = vaddq_f64(vmlsq_lane_f64(v130, v131, v100.f64[0], 0), v109);
              v132.f64[0] = vmuld_lane_f64(_Q3.f64[0], v132, 1) - vmuld_lane_f64(_Q3.f64[1], _Q3, 1);
              v125.f64[0] = sqrt(v132.f64[0]);
              v134.f64[0] = v132.f64[1] + v125.f64[0];
              v135.f64[0] = -_Q3.f64[1];
              v134.f64[1] = -_Q3.f64[1];
              v135.f64[1] = _Q3.f64[0] + v125.f64[0];
              v136 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(sqrt(v132.f64[0] * (_Q3.f64[0]+ v132.f64[1]+ v125.f64[0]+ v125.f64[0]))), 0);
              _D4 = vmlaq_laneq_f64(vmulq_n_f64(vdivq_f64(v134, v136), *(double *)&v110), vdivq_f64(v135, v136), v110, 1).f64[1];
              __asm { FMLA            D3, D4, V2.D[1] }
              if (_Q3.f64[0] > v20)
              {
LABEL_91:
                _Q1 = vmulq_n_f64(_Q1, sqrt(v19 / _D17));
                *(_BYTE *)(a1 + 168) = 1;
                v113 = 0uLL;
              }
              else
              {
                v88 = (int8x16_t)v114;
              }
              *(int8x16_t *)(a1 + 120) = v88;
              *(float64x2_t *)(a1 + 136) = v113;
              if ((*(_QWORD *)&_Q1.f64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
              {
                v88.i64[0] = *(_QWORD *)&_Q1.f64[1];
                if ((*(_QWORD *)&_Q1.f64[1] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
                {
                  v138 = vextq_s8((int8x16_t)_Q1, v88, 1uLL);
                  *(_BYTE *)a3 = LOBYTE(_Q1.f64[0]);
                  *(_BYTE *)(a3 + 15) = HIBYTE(_Q1.f64[1]);
                  *(_WORD *)(a3 + 13) = v138.i16[6];
                  *(_DWORD *)(a3 + 9) = v138.i32[2];
                  *(_QWORD *)(a3 + 1) = v138.i64[0];
                  result = 1;
LABEL_103:
                  *(_BYTE *)(a1 + 169) = result;
                  return result;
                }
              }
LABEL_102:
              result = 0;
              goto LABEL_103;
            }
            if (v34 == 5)
            {
              v38 = sub_20EB29218(v189.f64, (uint64_t)&v185, &v183, (int64x2_t *)(v17 + 21));
              goto LABEL_85;
            }
          }
          else
          {
            if (v34 <= 1)
            {
              if (!v34)
              {
                sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
                abort();
              }
              if (v184 < 0.00000001)
                goto LABEL_102;
              v36 = 1.0 / v184;
              v189 = vmulq_n_f64(v183, 1.0 / v184);
              v185 = (float64x2_t)COERCE_UNSIGNED_INT64(1.0 / v184);
              v187.f64[0] = 0.0;
              v186 = v36 * -(v183.f64[0] * v36);
              v187.f64[1] = 1.0 / v184;
              v188 = v36 * -(v183.f64[1] * v36);
              v37 = *((_DWORD *)v17 + 248);
              if (v37 == -1)
                goto LABEL_98;
LABEL_87:
              if (!v37)
                goto LABEL_100;
              goto LABEL_88;
            }
            if (v34 == 2)
            {
              v45 = (double *)(v17 + 21);
              if (!*((_DWORD *)v17 + 53))
              {
                if (!sub_20F0BA0C8(&v189, (uint64_t)&v185, &v183, v45))
                  goto LABEL_102;
                goto LABEL_86;
              }
              v38 = sub_20FA1E060(&v189, (uint64_t)&v185, &v183, v45, (float64x2_t *)v17 + 12);
LABEL_85:
              if ((v38 & 1) == 0)
                goto LABEL_102;
LABEL_86:
              v37 = *((_DWORD *)v17 + 248);
              if (v37 != -1)
                goto LABEL_87;
              goto LABEL_98;
            }
          }
          v49 = v184;
          _Q1 = v183;
          _D0 = v183.f64[1];
          __asm { FMLA            D2, D0, V1.D[1] }
          if (_D2 >= 0.00000001)
          {
            v53 = v184 * v184 + _D2;
            v54 = sqrt(_D2);
            v142 = _D2;
            v55 = atan2(v54, v184);
            v190.f64[0] = 0.0;
            v56 = sub_20F0BA1B0((int64x2_t *)(v17 + 21), v190.f64, v55);
LABEL_96:
            v64 = v56 / v54;
            _Q1 = v183;
            v66 = vmulq_n_f64(v183, (v49 * (v190.f64[0] / v53) - v64) / v142);
            v65 = -(v190.f64[0] / v53);
            v67 = vextq_s8((int8x16_t)v66, (int8x16_t)v66, 8uLL).u64[0];
LABEL_97:
            v189 = vmulq_n_f64(_Q1, v64);
            *(_QWORD *)&v66.f64[1] = v67;
            v140 = vmulq_n_f64(v66, _Q1.f64[0]);
            v141 = vmulq_laneq_f64(v66, _Q1, 1);
            v185.f64[1] = v140.f64[1];
            v187.f64[0] = v141.f64[0];
            v186 = v65 * _Q1.f64[0];
            v185.f64[0] = v64 + v140.f64[0];
            v188 = vmuld_lane_f64(v65, _Q1, 1);
            v187.f64[1] = v64 + v141.f64[1];
            v37 = *((_DWORD *)v17 + 248);
            if (v37 != -1)
              goto LABEL_87;
            goto LABEL_98;
          }
          goto LABEL_81;
        }
      }
      else if (v34 <= 7)
      {
        goto LABEL_19;
      }
      if (v34 > 0xB)
      {
        if (v34 <= 0xD)
        {
          if (v34 != 13)
            goto LABEL_102;
          if (v184 < 0.00000001)
            goto LABEL_102;
          v192 = vdivq_f64(v183, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v184, 0));
          if (!sub_20EB295B8(&v189, &v190, 0, (uint64_t)&v192, (double *)v17 + 21, (*(double *)v17 + *((double *)v17 + 4)) * 0.5))goto LABEL_102;
          _D0 = -v183.f64[1] / (v184 * v184);
          _V3.D[1] = v190.f64[1];
          _V4.D[1] = v191.f64[1];
          v42.f64[0] = 0.0;
          v42.f64[1] = 1.0 / v184;
          __asm { FMLA            D7, D0, V3.D[1] }
          v185 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)COERCE_UNSIGNED_INT64(1.0 / v184), v190.f64[0]), v42, v190, 1);
          __asm { FMLA            D2, D0, V4.D[1] }
          v186 = _D7;
          v188 = _D2;
          v187 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)COERCE_UNSIGNED_INT64(1.0 / v184), v191.f64[0]), v42, v191, 1);
          v37 = *((_DWORD *)v17 + 248);
          if (v37 == -1)
            goto LABEL_98;
          goto LABEL_87;
        }
        if (v34 == 14)
          v38 = sub_20EB2498C(&v189, (uint64_t)&v185, 0, (uint64_t)&v183, (double *)v17 + 21, (*(double *)v17 + *((double *)v17 + 4)) * 0.5);
        else
          v38 = sub_20EB3F050((uint64_t)v17, &v189, (uint64_t)&v185, &v183, 0);
        goto LABEL_85;
      }
      if (v34 > 9)
      {
        if (v34 == 10)
          v38 = sub_20EB2450C(&v189, (uint64_t)&v185, 0, (uint64_t)&v183, (double *)v17 + 21, (*(double *)v17 + *((double *)v17 + 4)) * 0.5);
        else
          v38 = sub_20EB3AF98((uint64_t)v17, &v189, (uint64_t)&v185, &v183, 0);
        goto LABEL_85;
      }
      if (v34 == 9)
      {
        v38 = sub_20EB372E0((uint64_t)v17, &v189, (uint64_t)&v185, &v183, 0);
        goto LABEL_85;
      }
      v49 = v184;
      _Q1 = v183;
      _D0 = v183.f64[1];
      __asm { FMLA            D2, D0, V1.D[1] }
      if (_D2 >= 0.00000001)
      {
        v53 = v184 * v184 + _D2;
        v54 = sqrt(_D2);
        v142 = _D2;
        v139 = atan2(v54, v184);
        v190.f64[0] = 0.0;
        v56 = sub_20F0BA21C((double *)v17 + 21, v190.f64, v139);
        goto LABEL_96;
      }
LABEL_81:
      v64 = 1.0 / v49;
      v65 = -(v64 * v64);
      v66.f64[0] = 0.0;
      v67 = 0;
      goto LABEL_97;
    }
    v57 = 0;
    while (1)
    {
      v60 = *(_QWORD *)(a1 + 160);
      v13 = *(_DWORD *)(v60 + 992);
      if (v13 == -1)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_105;
        }
        v13 = *(_DWORD *)(v60 + 992);
        if (v13 > 7)
        {
LABEL_69:
          if (v13 <= 0xB)
          {
            _CF = v13 >= 0xA;
            v58 = 7;
            if (_CF)
              v58 = 14;
          }
          else
          {
            v61 = v13 == 13;
            if (v13 > 0xD)
            {
              v58 = 28;
            }
            else
            {
              v58 = 4;
              if (v61)
                v58 = 14;
            }
          }
          goto LABEL_59;
        }
      }
      else if (v13 > 7)
      {
        goto LABEL_69;
      }
      if (v13 > 3)
      {
        if (v13 >= 6)
        {
          if (v13 == 6)
            v58 = 3;
          else
            v58 = 4;
        }
        else
        {
          v58 = 4;
        }
      }
      else
      {
        if (v13 <= 1)
          goto LABEL_14;
        if (v13 == 2)
          v58 = 3;
        else
          v58 = 4;
      }
LABEL_59:
      v59 = v57++;
      if (v58 <= v59)
        goto LABEL_15;
    }
  }
  return result;
}

uint64_t sub_20FC81820(uint64_t a1, uint64_t *a2, uint64_t a3, float64x2_t *a4, double **a5)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  __int128 v16;
  float64x2_t v17;
  __n128 v18;
  unint64_t *v19;
  float64x2_t v20;
  double v21;
  double v22;
  float64x2_t v23;
  int v24;
  double v25;
  float64x2_t v29;
  float64x2_t v35;
  unsigned int v36;
  double v37;
  double v38;
  unsigned int v41;
  char v42;
  float64x2_t v46;
  double *v49;
  double v50;
  float64_t v51;
  double v52;
  double v53;
  double v55;
  double v56;
  double v57;
  double v58;
  unsigned int v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  BOOL v63;
  double v65;
  double v66;
  float64x2_t v67;
  unint64_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64_t v75;
  float64_t v79;
  const double *v80;
  unint64_t v83;
  float64x2_t v84;
  float64x2_t v85;
  double v86;
  float64x2_t v87;
  float64x2_t v88;
  double v89;
  uint64_t v90;
  double v91;
  double v92;
  double v93;
  double v94;
  int v95;
  int v96;
  int v97;
  float64x2_t v98;
  double v99;
  double v102;
  double v103;
  double v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v109;
  float64x2_t v110;
  int8x16_t v111;
  int8x16_t v112;
  int8x16_t v119;
  float64x2_t v120;
  double v121;
  float64x2_t v124;
  double v125;
  float64x2_t v126;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v139;
  float64x2_t v140;
  double v141;
  double v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v173;
  int8x16_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t *v179;
  float64x2_t v180;
  uint64_t v182;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  double v188;
  double v189;
  double v190;
  double v191;
  float64x2_t v192;
  double v193;
  float64x2_t v194;
  int8x16_t v195;
  int8x16_t v196;
  int8x16_t v197;
  int8x16_t v198;
  int8x16_t v199;
  int8x16_t v200;
  int8x16_t v201;
  int8x16_t v202;
  int8x16_t v203;
  int8x16_t v204;
  int8x16_t v205;
  int8x16_t v206;
  int8x16_t v207;
  int8x16_t v208;
  int8x16_t v209;
  int8x16_t v210;
  int8x16_t v211;
  int8x16_t v212;
  float64x2_t v213;
  float64x2_t v214;
  int8x16_t v215;
  float64x2_t v216;
  int8x16_t v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64_t v226;
  float64x2_t v227;
  int64x2_t v228;
  _BYTE v229[32];
  float64x2_t v230;
  double v231;
  float64x2_t v232;
  float64_t v233;
  float64x2_t v234;
  double v235;
  float64x2_t v236;
  double v237;
  float64x2_t v238;
  double v239;
  float64x2_t v240;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v243;
  float64x2_t v244;
  float64x2_t v245;
  uint64_t v246;

  result = 0;
  v246 = *MEMORY[0x24BDAC8D0];
  *(_WORD *)(a1 + 168) = 0;
  v7 = *(_QWORD *)(a1 + 160);
  if (v7)
    _ZF = *a5 == 0;
  else
    _ZF = 1;
  if (!_ZF)
  {
    v10 = *a2;
    v11 = a2[1];
    v12 = a2[3];
    v182 = a2[2];
    v13 = *(_DWORD *)(v7 + 992);
    if (v13 == -1)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_179:
        abort();
      }
      v13 = *(_DWORD *)(v7 + 992);
      if (v13 <= 1)
      {
LABEL_7:
        v14 = v12;
        if (!v13)
          goto LABEL_8;
        goto LABEL_15;
      }
    }
    else if (v13 <= 1)
    {
      goto LABEL_7;
    }
    v14 = v12;
    if (!*(_BYTE *)(v12 + 20))
      goto LABEL_15;
    v15 = *(_DWORD *)(*(_QWORD *)(a1 + 160) + 992);
    if (v15 != -1)
    {
      if (v15 <= 1)
      {
LABEL_14:
        if (!v15)
        {
LABEL_8:
          sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
          abort();
        }
      }
LABEL_15:
      v16 = *(_OWORD *)(v10 + 48);
      v17 = *(float64x2_t *)(v10 + 80);
      *(_OWORD *)&v229[16] = *(_OWORD *)(v10 + 64);
      v230 = v17;
      v231 = *(double *)(v10 + 96);
      v18 = *(__n128 *)(v10 + 32);
      v228 = (int64x2_t)v18;
      *(_OWORD *)v229 = v16;
      v20 = *(float64x2_t *)(v10 + 104);
      v232 = v20;
      v233 = *(double *)(v10 + 120);
      v19 = *(unint64_t **)(a1 + 160);
      *(_QWORD *)&v20.f64[0] = v19[178];
      if (v20.f64[0] > 0.0)
      {
        v18.n128_f64[0] = *(double *)(a1 + 16) - *((double *)v19 + 179);
        v20.f64[0] = v20.f64[0] * v18.n128_f64[0];
        sub_20FC7D4B0(v11 + 136, v11 + 160, (float64x2_t *)&v228, 0, v20, v18);
        v19 = *(unint64_t **)(a1 + 160);
      }
      v22 = **a5;
      v21 = (*a5)[1];
      v195 = *(int8x16_t *)(*(_QWORD *)(v11 + 24) + 456);
      v196 = *(int8x16_t *)(*(_QWORD *)(v11 + 24) + 472);
      v199 = *(int8x16_t *)(*(_QWORD *)(v11 + 24) + 520);
      v200 = *(int8x16_t *)(*(_QWORD *)(v11 + 24) + 536);
      v197 = *(int8x16_t *)(*(_QWORD *)(v11 + 24) + 488);
      v198 = *(int8x16_t *)(*(_QWORD *)(v11 + 24) + 504);
      v201 = *(int8x16_t *)(*(_QWORD *)(v11 + 24) + 552);
      v202 = *(int8x16_t *)(*(_QWORD *)(v11 + 24) + 568);
      v205 = *(int8x16_t *)(*(_QWORD *)(v11 + 24) + 616);
      v206 = *(int8x16_t *)(*(_QWORD *)(v11 + 24) + 632);
      v203 = *(int8x16_t *)(*(_QWORD *)(v11 + 24) + 584);
      v204 = *(int8x16_t *)(*(_QWORD *)(v11 + 24) + 600);
      v207 = *(int8x16_t *)(*(_QWORD *)(v11 + 24) + 648);
      v208 = *(int8x16_t *)(*(_QWORD *)(v11 + 24) + 664);
      v211 = *(int8x16_t *)(*(_QWORD *)(v11 + 24) + 712);
      v212 = *(int8x16_t *)(*(_QWORD *)(v11 + 24) + 728);
      v23 = *(float64x2_t *)(*(_QWORD *)(v11 + 24) + 696);
      v209 = *(int8x16_t *)(*(_QWORD *)(v11 + 24) + 680);
      v210 = (int8x16_t)v23;
      v24 = *(unsigned __int8 *)(v14 + 20);
      *(_BYTE *)(a1 + 168) = 0;
      v25 = *(double *)(v11 + 96);
      _Q4 = *(float64x2_t *)(v11 + 80);
      v23.f64[0] = *(float64_t *)(a1 + 40);
      v17.f64[0] = *(float64_t *)(v11 + 120);
      *(_QWORD *)&v23.f64[0] = *(_OWORD *)&vsubq_f64(v23, v17);
      _Q1 = vsubq_f64(*(float64x2_t *)(a1 + 24), *(float64x2_t *)(v11 + 104));
      v224 = *(float64x2_t *)(v11 + 56);
      v225 = *(float64x2_t *)(v11 + 32);
      v226 = *(double *)(v11 + 72);
      _Q2.f64[0] = *(float64_t *)(v11 + 48);
      _Q2.f64[1] = v226;
      v29 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v225, (int64x2_t)v224), _Q1.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v225, (int64x2_t)v224), _Q1, 1), _Q2, v23.f64[0]);
      _Q5 = vmulq_f64(_Q4, _Q1);
      _Q1.f64[0] = _Q1.f64[1];
      v227 = _Q4;
      __asm { FMLA            D5, D1, V4.D[1] }
      _Q5.f64[0] = vmlad_n_f64(_Q5.f64[0], v25, v23.f64[0]);
      *(_QWORD *)&_Q4.f64[1] = v228.i64[1];
      _Q0 = vsubq_f64(v29, v232);
      v222 = (float64x2_t)vzip1q_s64(v228, *(int64x2_t *)&v229[8]);
      v223 = v29;
      v220 = *(float64x2_t *)&v229[8];
      v216 = (float64x2_t)v228;
      v221 = (float64x2_t)vzip2q_s64(v228, *(int64x2_t *)&v229[8]);
      v35 = vmlaq_laneq_f64(vmulq_n_f64(v222, _Q0.f64[0]), v221, _Q0, 1);
      v29.f64[1] = v230.f64[1];
      _Q0.f64[0] = _Q0.f64[1];
      v219 = v230;
      __asm { FMLA            D2, D0, V3.D[1] }
      _Q0.f64[0] = v233;
      *(_QWORD *)&_Q0.f64[0] = *(_OWORD *)&vsubq_f64(_Q5, _Q0);
      _Q4.f64[0] = *(float64_t *)v229;
      v29.f64[0] = *(float64_t *)&v229[24];
      v214 = _Q5;
      v215 = (int8x16_t)_Q4;
      v217 = (int8x16_t)v29;
      _Q4.f64[1] = *(float64_t *)&v229[24];
      v213 = _Q4;
      v29.f64[0] = v231;
      v218 = v29;
      v234 = vmlaq_n_f64(v35, _Q4, _Q0.f64[0]);
      v235 = vmlad_n_f64(_Q2.f64[0], v231, _Q0.f64[0]);
      v36 = *((_DWORD *)v19 + 248);
      v37 = *(double *)(a1 + 152);
      if (v36 == -1)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v36 = *((_DWORD *)v19 + 248);
        if (v36 <= 7)
        {
LABEL_19:
          if (v36 > 3)
          {
            if (v36 > 5)
            {
              if (v36 != 6)
              {
                v42 = sub_20EB3345C((uint64_t)v19, &v240, (uint64_t)&v236, &v234, 0);
                goto LABEL_85;
              }
              if (v235 == 0.0)
                v50 = 1.0;
              else
                v50 = 1.0 / v235;
              v51 = v234.f64[0] * v50;
              v52 = v50 * v234.f64[1];
              v245.f64[0] = v234.f64[0] * v50;
              v245.f64[1] = v50 * v234.f64[1];
              sub_20EB2837C(&v240, v241.f64, &v245, (double *)v19 + 21, (float64x2_t *)v19 + 12, (double *)v19 + 26);
              v236.f64[0] = v50 * v241.f64[0];
              v236.f64[1] = v50 * v241.f64[1];
              v238.f64[0] = v50 * v242.f64[0];
              v237 = v50 * (-(v241.f64[0] * v51) - v52 * v241.f64[1]);
              v238.f64[1] = v50 * v242.f64[1];
              v239 = v50 * (-(v242.f64[0] * v51) - v52 * v242.f64[1]);
              v41 = *((_DWORD *)v19 + 248);
              if (v41 != -1)
                goto LABEL_87;
LABEL_119:
              if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
              {
                abort();
              }
              v41 = *((_DWORD *)v19 + 248);
              if (!v41)
              {
LABEL_121:
                sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
                abort();
              }
LABEL_88:
              *(_QWORD *)&_Q1.f64[0] = *v19;
              *(_QWORD *)&_Q2.f64[0] = v19[4];
              *(_QWORD *)&v69.f64[0] = v19[2];
              *(_QWORD *)&v69.f64[1] = v19[5];
              v191 = *(double *)v19;
              v192 = v69;
              v194 = v240;
              v70 = v236;
              v188 = v237;
              v189 = v239;
              v190 = _Q2.f64[0];
              v186 = v236;
              v187 = v238;
              v184 = (float64x2_t)*v19;
              v69.f64[0] = 0.0;
              v69.f64[1] = _Q2.f64[0];
              v185 = v69;
              v71 = (float64x2_t)xmmword_2102DD520;
              if (!v24)
              {
                v74 = (float64x2_t)*v19;
                v73 = v185;
                goto LABEL_160;
              }
              *(_QWORD *)&v245.f64[0] = &v241;
              *(_QWORD *)&v245.f64[1] = &v234;
              if (v41 == -1)
              {
                if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                {
                  abort();
                }
                v41 = *((_DWORD *)v19 + 248);
                if (v41 <= 7)
                {
LABEL_91:
                  if (v41 > 3)
                  {
                    if (v41 > 5)
                    {
                      if (v41 == 6)
                        sub_20EB42068();
                      sub_20EB34694((uint64_t)v19, *(float64x2_t **)&v245.f64[0], *(float64x2_t **)&v245.f64[1]);
                      goto LABEL_159;
                    }
                  }
                  else
                  {
                    if (v41 <= 1)
                    {
                      if (!v41)
                      {
                        sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
                        abort();
                      }
                      v72 = v245.f64[0];
                      *(_OWORD *)(*(_QWORD *)&v245.f64[0] + 32) = 0u;
                      *(_OWORD *)(*(_QWORD *)&v72 + 48) = 0u;
                      **(_OWORD **)&v72 = 0u;
                      *(_OWORD *)(*(_QWORD *)&v72 + 16) = 0u;
                      goto LABEL_159;
                    }
                    if (v41 == 2)
                    {
                      v79 = v245.f64[0];
                      v80 = (const double *)(*(_QWORD *)&v245.f64[1] + 16);
                      _D2 = *(_QWORD *)(*(_QWORD *)&v245.f64[1] + 8);
                      __asm { FMLA            D1, D2, V0.D[1] }
                      *(double *)&v83 = _Q1.f64[0] * (_Q1.f64[0] * _Q1.f64[0]);
                      _Q1.f64[1] = _Q1.f64[0] * _Q1.f64[0];
                      v84 = vld1q_dup_f64(v80);
                      v85 = vdivq_f64(**(float64x2_t **)&v245.f64[1], v84);
                      **(_OWORD **)&v245.f64[0] = vmulq_n_f64(_Q1, v85.f64[0]);
                      *(float64x2_t *)(*(_QWORD *)&v79 + 16) = vmulq_n_f64((float64x2_t)v83, v85.f64[0]);
                      *(float64x2_t *)(*(_QWORD *)&v79 + 32) = vmulq_laneq_f64(_Q1, v85, 1);
                      *(float64x2_t *)(*(_QWORD *)&v79 + 48) = vmulq_laneq_f64((float64x2_t)v83, v85, 1);
                      goto LABEL_159;
                    }
                  }
                  sub_20FBCEF64((float64x2_t **)&v245);
LABEL_159:
                  v74 = v184;
                  v73 = v185;
                  v71 = vmlaq_n_f64(vmulq_n_f64(v184, v241.f64[0]), v185, v243.f64[0]);
                  _Q1 = vmlaq_laneq_f64(vmulq_laneq_f64(v184, v241, 1), v185, v243, 1);
                  v70 = vmlaq_n_f64(vmulq_n_f64(v184, v242.f64[0]), v185, v244.f64[0]);
                  _Q2 = vmlaq_laneq_f64(vmulq_laneq_f64(v184, v242, 1), v185, v244, 1);
LABEL_160:
                  _V28.D[1] = v219.f64[1];
                  v109 = (float64x2_t)vextq_s8((int8x16_t)v219, v215, 8uLL);
                  v110 = vmulq_f64(v109, v214);
                  v111 = (int8x16_t)vmlsq_laneq_f64(vmulq_n_f64(v221, v214.f64[0]), v213, v223, 1);
                  v112 = (int8x16_t)vmlsq_lane_f64(vmulq_n_f64((float64x2_t)vextq_s8((int8x16_t)v109, v217, 8uLL), v223.f64[0]), v222, v214.f64[0], 0);
                  _V7.D[1] = v216.f64[1];
                  _D17 = v226;
                  __asm { FMLA            D6, D17, V7.D[1] }
                  _V27.D[1] = v220.f64[1];
                  __asm
                  {
                    FMLA            D7, D17, V27.D[1]
                    FMLA            D16, D17, V28.D[1]
                  }
                  v119 = (int8x16_t)vmlsq_lane_f64(vmulq_laneq_f64(v222, v223, 1), v221, v223.f64[0], 0);
                  v120 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v225, v216.f64[0]), v224, v216, 1), v227, *(double *)v215.i64);
                  v121 = _D6 + v25 * *(double *)v215.i64;
                  _Q22 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v225, v220.f64[0]), v224, v220, 1), v227, *(double *)v217.i64);
                  _D25 = _D7 + v25 * *(double *)v217.i64;
                  v124 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v225, v219.f64[0]), v224, v219, 1), v227, v218.f64[0]);
                  v125 = _D16 + v25 * v218.f64[0];
                  v126 = v186;
                  _Q31 = v187;
                  v128 = vmlaq_n_f64(vmulq_n_f64(v74, v186.f64[0]), v73, v187.f64[0]);
                  v129 = vmlaq_laneq_f64(vmulq_laneq_f64(v74, v186, 1), v73, v187, 1);
                  v130 = vmlaq_n_f64(vmulq_n_f64(v74, v188), v73, v189);
                  v131 = vmlaq_n_f64(vmulq_n_f64(v128, *(double *)v111.i64), v129, *(double *)vextq_s8(v111, v111, 8uLL).i64);
                  v132 = vmlaq_n_f64(vmulq_n_f64(v128, *(double *)v112.i64), v129, *(double *)vextq_s8(v112, v112, 8uLL).i64);
                  v133 = vmlaq_n_f64(vmulq_n_f64(v128, v120.f64[0]), v129, _Q22.f64[0]);
                  v134 = vmlaq_n_f64(vmulq_n_f64(v128, *(double *)v119.i64), v129, *(double *)vextq_s8(v119, v119, 8uLL).i64);
                  v135 = vmlaq_laneq_f64(vmulq_laneq_f64(v128, v120, 1), v129, _Q22, 1);
                  v136 = vmlaq_n_f64(vmulq_n_f64(v128, v121), v129, _D25);
                  *(_QWORD *)&v126.f64[1] = vextq_s8((int8x16_t)v126, (int8x16_t)v126, 8uLL).u64[0];
                  *(_QWORD *)&_Q31.f64[1] = vextq_s8((int8x16_t)_Q31, (int8x16_t)_Q31, 8uLL).u64[0];
                  v74.f64[1] = 0.0;
                  _Q29 = vmlaq_f64(vmulq_n_f64(v126, v191), (float64x2_t)0, _Q31);
                  _Q28 = vmlaq_n_f64(vmulq_f64(v126, (float64x2_t)0), _Q31, v190);
                  v139 = vmlaq_laneq_f64(vmulq_n_f64(v120, _Q29.f64[0]), _Q22, _Q29, 1);
                  __asm { FMLA            D31, D25, V29.D[1] }
                  v140 = vmlaq_laneq_f64(vmulq_n_f64(v120, _Q28.f64[0]), _Q22, _Q28, 1);
                  __asm { FMLA            D22, D25, V28.D[1] }
                  v141 = v188 * v191 + v189 * 0.0;
                  v142 = v188 * 0.0 + v189 * v190;
                  _Q28.f64[0] = v191;
                  _Q28.f64[1] = v190;
                  v143 = vmlaq_n_f64(v131, v130, vmlsq_laneq_f64(v110, v218, v223, 1).f64[0]);
                  v144 = vmlaq_n_f64(v132, v130, vmlsq_f64(vmulq_n_f64(v223, v218.f64[0]), v219, v214).f64[0]);
                  v145 = vmlaq_n_f64(v134, v130, vmlsq_laneq_f64(vmulq_laneq_f64(v219, v223, 1), v223, v219, 1).f64[0]);
                  v146 = vmlaq_n_f64(v133, v130, v124.f64[0]);
                  v147 = vmlaq_laneq_f64(v135, v130, v124, 1);
                  v148 = vmlaq_n_f64(v136, v130, v125);
                  v149 = vmlaq_n_f64(v139, v124, v141);
                  v110.f64[0] = _Q31.f64[0] + v125 * v141;
                  v150 = vmlaq_n_f64(v140, v124, v142);
                  _Q22.f64[0] = _Q22.f64[0] + v125 * v142;
                  v151 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v146, *(double *)(a1 + 48)), v147, *(float64x2_t *)(a1 + 48), 1), v148, *(double *)(a1 + 64));
                  v152 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v146, *(double *)(a1 + 72)), v147, *(float64x2_t *)(a1 + 72), 1), v148, *(double *)(a1 + 88));
                  _Q25 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v146, *(double *)(a1 + 96)), v147, *(float64x2_t *)(a1 + 96), 1), v148, *(double *)(a1 + 112));
                  v154 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v151, v149.f64[0]), v152, v149, 1), _Q25, v110.f64[0]);
                  v155 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v151, v150.f64[0]), v152, v150, 1), _Q25, _Q22.f64[0]);
                  v150.f64[0] = v154.f64[0];
                  v150.f64[1] = v155.f64[1];
                  v156 = vaddq_f64((float64x2_t)vdupq_lane_s64(COERCE__INT64(v37 * v37), 0), v150);
                  v157 = vsubq_f64(vmlaq_f64(v192, _Q28, v194), *(float64x2_t *)(a1 + 8));
                  v150.f64[0] = vmuld_lane_f64(v156.f64[0], v156, 1) - vmuld_lane_f64(v154.f64[1], v154, 1);
                  _Q22.f64[0] = sqrt(v150.f64[0]);
                  _Q25.f64[0] = v156.f64[1] + _Q22.f64[0];
                  v155.f64[0] = -v154.f64[1];
                  _Q25.f64[1] = -v154.f64[1];
                  v155.f64[1] = v156.f64[0] + _Q22.f64[0];
                  v158 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(sqrt(v150.f64[0] * (vaddvq_f64(v156) + _Q22.f64[0] + _Q22.f64[0]))), 0);
                  v159 = vdivq_f64(v155, v158);
                  v160 = vdivq_f64(_Q25, v158);
                  _Q20 = vmlaq_laneq_f64(vmulq_n_f64(v160, v157.f64[0]), v159, v157, 1);
                  _Q25.f64[0] = _Q20.f64[1];
                  __asm { FMLA            D22, D25, V20.D[1] }
                  if (_D22 > v21)
                    goto LABEL_164;
                  v163 = vmlsq_lane_f64(vmlsq_lane_f64(vmlsq_lane_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v143, *(double *)v195.i64), v144, *(double *)vextq_s8(v195, v195, 8uLL).i64), v145, *(double *)v196.i64), v146, *(double *)vextq_s8(v196, v196, 8uLL).i64, 0), v147, *(double *)v197.i64, 0), v148, *(double *)vextq_s8(v197, v197, 8uLL).i64, 0);
                  v164 = vmlsq_lane_f64(vmlsq_lane_f64(vmlsq_lane_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v143, *(double *)v198.i64), v144, *(double *)vextq_s8(v198, v198, 8uLL).i64), v145, *(double *)v199.i64), v146, *(double *)vextq_s8(v199, v199, 8uLL).i64, 0), v147, *(double *)v200.i64, 0), v148, *(double *)vextq_s8(v200, v200, 8uLL).i64, 0);
                  v165 = vmlsq_lane_f64(vmlsq_lane_f64(vmlsq_lane_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v143, *(double *)v201.i64), v144, *(double *)vextq_s8(v201, v201, 8uLL).i64), v145, *(double *)v202.i64), v146, *(double *)vextq_s8(v202, v202, 8uLL).i64, 0), v147, *(double *)v203.i64, 0), v148, *(double *)vextq_s8(v203, v203, 8uLL).i64, 0);
                  v166 = vmlsq_lane_f64(vmlsq_lane_f64(vmlsq_lane_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v143, *(double *)v204.i64), v144, *(double *)vextq_s8(v204, v204, 8uLL).i64), v145, *(double *)v205.i64), v146, *(double *)vextq_s8(v205, v205, 8uLL).i64, 0), v147, *(double *)v206.i64, 0), v148, *(double *)vextq_s8(v206, v206, 8uLL).i64, 0);
                  v167 = vmlsq_lane_f64(vmlsq_lane_f64(vmlsq_lane_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v143, *(double *)v207.i64), v144, *(double *)vextq_s8(v207, v207, 8uLL).i64), v145, *(double *)v208.i64), v146, *(double *)vextq_s8(v208, v208, 8uLL).i64, 0), v147, *(double *)v209.i64, 0), v148, *(double *)vextq_s8(v209, v209, 8uLL).i64, 0);
                  v168 = vmlsq_lane_f64(vmlsq_lane_f64(vmlsq_lane_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v143, *(double *)v210.i64), v144, *(double *)vextq_s8(v210, v210, 8uLL).i64), v145, *(double *)v211.i64), v146, *(double *)vextq_s8(v211, v211, 8uLL).i64, 0), v147, *(double *)v212.i64, 0), v148, *(double *)vextq_s8(v212, v212, 8uLL).i64, 0);
                  v169 = vmlaq_n_f64(vmulq_n_f64(v163, v143.f64[0]), v164, v144.f64[0]);
                  v170 = vaddq_f64(vmlsq_laneq_f64(vmlsq_laneq_f64(vmlsq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v163, v143, 1), v164, v144, 1), v165, v145, 1), v166, v146, 1), v167, v147, 1), v168, v148, 1), v156);
                  v156.f64[1] = v154.f64[1];
                  v171 = vaddq_f64(vmlsq_lane_f64(vmlsq_lane_f64(vmlsq_lane_f64(vmlaq_n_f64(v169, v165, v145.f64[0]), v166, v146.f64[0], 0), v167, v147.f64[0], 0), v168, v148.f64[0], 0), v156);
                  v170.f64[0] = vmuld_lane_f64(v171.f64[0], v170, 1) - vmuld_lane_f64(v171.f64[1], v171, 1);
                  v169.f64[0] = sqrt(v170.f64[0]);
                  v164.f64[0] = v170.f64[1] + v169.f64[0];
                  _Q24.f64[0] = -v171.f64[1];
                  v164.f64[1] = -v171.f64[1];
                  _Q24.f64[1] = v171.f64[0] + v169.f64[0];
                  v173 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(sqrt(v170.f64[0] * (v171.f64[0]+ v170.f64[1]+ v169.f64[0]+ v169.f64[0]))), 0);
                  _Q24.f64[0] = vmlaq_laneq_f64(vmulq_n_f64(vdivq_f64(v164, v173), *(double *)&v157), vdivq_f64(_Q24, v173), v157, 1).f64[1];
                  __asm { FMLA            D21, D24, V23.D[1] }
                  if (_D21 > v22)
                  {
LABEL_164:
                    _Q20 = vmulq_n_f64(_Q20, sqrt(v21 / _D22));
                    *(_BYTE *)(a1 + 168) = 1;
                    v160 = 0uLL;
                    v159 = 0uLL;
                    if ((*(_QWORD *)&_Q20.f64[0] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
                      goto LABEL_168;
                  }
                  else if ((*(_QWORD *)&_Q20.f64[0] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
                  {
                    goto LABEL_168;
                  }
                  if ((*(_QWORD *)&_Q20.f64[1] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
                  {
                    v175 = vextq_s8((int8x16_t)_Q20, (int8x16_t)v71, 1uLL);
                    *(_BYTE *)a3 = LOBYTE(_Q20.f64[0]);
                    *(_BYTE *)(a3 + 15) = HIBYTE(_Q20.f64[1]);
                    *(_WORD *)(a3 + 13) = v175.i16[6];
                    *(_DWORD *)(a3 + 9) = v175.i32[2];
                    *(_QWORD *)(a3 + 1) = v175.i64[0];
                    if (*(_BYTE *)(v11 + 20))
                    {
                      v176 = vnegq_f64(v146);
                      v177 = vnegq_f64(v147);
                      v178 = vnegq_f64(v148);
                      v179 = a4;
                      a4[6] = vmlaq_laneq_f64(vmulq_n_f64(v160, v143.f64[0]), v159, v143, 1);
                      a4[7] = vmlaq_laneq_f64(vmulq_n_f64(v160, v144.f64[0]), v159, v144, 1);
                      a4[8] = vmlaq_laneq_f64(vmulq_n_f64(v160, v145.f64[0]), v159, v145, 1);
                      a4[9] = vmlaq_laneq_f64(vmulq_n_f64(v160, v176.f64[0]), v159, v176, 1);
                      a4[10] = vmlaq_laneq_f64(vmulq_n_f64(v160, v177.f64[0]), v159, v177, 1);
                      a4[11] = vmlaq_laneq_f64(vmulq_n_f64(v160, v178.f64[0]), v159, v178, 1);
                    }
                    else
                    {
                      v179 = a4;
                      a4[10] = 0u;
                      a4[11] = 0u;
                      a4[8] = 0u;
                      a4[9] = 0u;
                      a4[6] = 0u;
                      a4[7] = 0u;
                    }
                    v180 = 0uLL;
                    v179[4] = 0u;
                    v179[5] = 0u;
                    v179[2] = 0u;
                    v179[3] = 0u;
                    *v179 = 0u;
                    v179[1] = 0u;
                    if (*(_BYTE *)(v182 + 144))
                    {
                      if (*(_BYTE *)(v182 + 20))
                      {
                        v180.f64[1] = v194.f64[1];
                        v74.f64[0] = v194.f64[0];
                        v179[12] = vmlaq_laneq_f64(vmulq_n_f64(v160, v194.f64[0]), v159, v74, 1);
                        v179[13] = vmlaq_laneq_f64(vmulq_n_f64(v160, 0.0), v159, v180, 1);
                        v179[14] = vmlaq_laneq_f64(vmulq_n_f64(v160, 1.0), v159, (float64x2_t)xmmword_21030D320, 1);
                        v179[15] = vmlaq_laneq_f64(vmulq_n_f64(v160, 0.0), v159, (float64x2_t)xmmword_2102DD520, 1);
                      }
                    }
                    else
                    {
                      v179[14] = 0uLL;
                      v179[15] = 0uLL;
                      v179[12] = 0uLL;
                      v179[13] = 0uLL;
                    }
                    if (*(_BYTE *)(v14 + 20))
                    {
                      v179[16] = vmlaq_laneq_f64(vmulq_n_f64(v160, v71.f64[0]), v159, v71, 1);
                      v179[17] = vmlaq_laneq_f64(vmulq_n_f64(v160, _Q1.f64[0]), v159, _Q1, 1);
                      v179[18] = vmlaq_laneq_f64(vmulq_n_f64(v160, v70.f64[0]), v159, v70, 1);
                      v179[19] = vmlaq_laneq_f64(vmulq_n_f64(v160, _Q2.f64[0]), v159, _Q2, 1);
                    }
                    result = 1;
                    goto LABEL_169;
                  }
LABEL_168:
                  result = 0;
LABEL_169:
                  *(_BYTE *)(a1 + 169) = result;
                  return result;
                }
              }
              else if (v41 <= 7)
              {
                goto LABEL_91;
              }
              if (v41 <= 0xB)
              {
                if (v41 <= 9)
                {
                  if (v41 != 9)
                    sub_20FBCF154();
                  sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/LensModel.cpp", 852, (uint64_t)&unk_210254955, 0, (uint64_t)"not implemented yet. rdar://113779839", 37, (void (*)(void **))sub_21023DDB0);
                  abort();
                }
                if (v41 == 10)
                  sub_20FBCF154();
                sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/LensModel.cpp", 852, (uint64_t)&unk_210254955, 0, (uint64_t)"not implemented yet. rdar://113779839", 37, (void (*)(void **))sub_21023DDB0);
                abort();
              }
              if (v41 > 0xD)
              {
                if (v41 == 14)
                  sub_20FBCF154();
                sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/LensModel.cpp", 852, (uint64_t)&unk_210254955, 0, (uint64_t)"not implemented yet. rdar://113779839", 37, (void (*)(void **))sub_21023DDB0);
                abort();
              }
              v75 = v245.f64[0];
              if (v41 == 13)
                sub_20EB43BB4();
              _Q0 = **(float64x2_t **)&v245.f64[1];
              _D2 = *(_QWORD *)(*(_QWORD *)&v245.f64[1] + 8);
              __asm { FMLA            D1, D2, V0.D[1] }
              if (_D1 >= 0.00000001)
              {
                v89 = *(double *)(*(_QWORD *)&v245.f64[1] + 16);
                *(double *)&v90 = sqrt(_D1);
                v91 = fabs(v89);
                v92 = fabs(*(double *)&v90);
                v93 = v92 / v91;
                if (v91 < v92)
                  v93 = v91 / v92;
                v94 = (v92 - v91) / (v91 + v92);
                if (v91 >= v92)
                  v94 = -v94;
                if (v93 > 0.414213562)
                  v95 = 1;
                else
                  v95 = 2;
                if (v93 > 0.414213562)
                  v96 = -1;
                else
                  v96 = 1;
                if (v93 <= 0.414213562)
                {
                  v97 = 0;
                }
                else
                {
                  v93 = v94;
                  v97 = 1;
                }
                v98 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v93 * v93), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v93 * v93), (float64x2_t)xmmword_210315370), v93 * v93 * (v93 * v93))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v93 * v93), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v93 * v93), (float64x2_t)xmmword_210315380), v93 * v93 * (v93 * v93))),
                          v93 * v93 * (v93 * v93) * (v93 * v93 * (v93 * v93))));
                v99 = v93 + v93 * vdivq_f64(v98, (float64x2_t)vdupq_laneq_s64((int64x2_t)v98, 1)).f64[0];
                if (*(double *)&v90 == INFINITY && v91 == INFINITY)
                  v99 = 0.785398163;
                if (v91 >= v92)
                  v95 = v97;
                else
                  v96 = -v96;
                if (v89 < 0.0)
                  v96 = -v96;
                if (*(uint64_t *)(*(_QWORD *)&v245.f64[1] + 16) < 0)
                  v95 = 4 - v95;
                if (v90 < 0)
                {
                  v96 = -v96;
                  v95 = -v95;
                }
                if (*(double *)&v90 == 0.0 && v89 == 0.0)
                  v102 = 0.0;
                else
                  v102 = v99;
                v103 = (double)v95 * 3.061617e-17 + (double)v95 * 0.785398163 + v102 * (double)v96;
                v104 = v103 * v103;
                v105.f64[0] = v103 * (v103 * v103);
                v105.f64[1] = v104 * v105.f64[0];
                v106 = vmulq_n_f64(v105, v104 * v104);
                v107 = vdivq_f64(_Q0, (float64x2_t)vdupq_lane_s64(v90, 0));
                **(_OWORD **)&v245.f64[0] = vmulq_n_f64(v105, v107.f64[0]);
                *(float64x2_t *)(*(_QWORD *)&v75 + 16) = vmulq_n_f64(v106, v107.f64[0]);
                *(float64x2_t *)(*(_QWORD *)&v75 + 32) = vmulq_laneq_f64(v105, v107, 1);
                *(float64x2_t *)(*(_QWORD *)&v75 + 48) = vmulq_laneq_f64(v106, v107, 1);
              }
              else
              {
                *(_OWORD *)(*(_QWORD *)&v245.f64[0] + 32) = 0u;
                *(_OWORD *)(*(_QWORD *)&v75 + 48) = 0u;
                **(_OWORD **)&v75 = 0u;
                *(_OWORD *)(*(_QWORD *)&v75 + 16) = 0u;
              }
              goto LABEL_159;
            }
            if (v36 == 5)
            {
              v42 = sub_20EB29218(v240.f64, (uint64_t)&v236, &v234, (int64x2_t *)(v19 + 21));
              goto LABEL_85;
            }
          }
          else
          {
            if (v36 <= 1)
            {
              if (!v36)
              {
                sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
                abort();
              }
              if (v235 < 0.00000001)
                goto LABEL_168;
              v38 = 1.0 / v235;
              _Q1.f64[1] = v234.f64[1];
              _Q2 = vmulq_n_f64(v234, 1.0 / v235);
              v240 = _Q2;
              v236 = (float64x2_t)COERCE_UNSIGNED_INT64(1.0 / v235);
              v238.f64[0] = 0.0;
              v237 = v38 * -(v234.f64[0] * v38);
              v238.f64[1] = 1.0 / v235;
              v239 = v38 * -(v234.f64[1] * v38);
              v41 = *((_DWORD *)v19 + 248);
              if (v41 == -1)
                goto LABEL_119;
LABEL_87:
              if (!v41)
                goto LABEL_121;
              goto LABEL_88;
            }
            if (v36 == 2)
            {
              v49 = (double *)(v19 + 21);
              if (!*((_DWORD *)v19 + 53))
              {
                if (!sub_20F0BA0C8(&v240, (uint64_t)&v236, &v234, v49))
                  goto LABEL_168;
                goto LABEL_86;
              }
              v42 = sub_20FA1E060(&v240, (uint64_t)&v236, &v234, v49, (float64x2_t *)v19 + 12);
LABEL_85:
              if ((v42 & 1) == 0)
                goto LABEL_168;
LABEL_86:
              v41 = *((_DWORD *)v19 + 248);
              if (v41 != -1)
                goto LABEL_87;
              goto LABEL_119;
            }
          }
          v53 = v235;
          _Q1 = v234;
          _Q2 = vmulq_f64(_Q1, _Q1);
          _D0 = v234.f64[1];
          __asm { FMLA            D2, D0, V1.D[1] }
          if (_Q2.f64[0] >= 0.00000001)
          {
            v55 = v235 * v235 + _Q2.f64[0];
            v56 = sqrt(_Q2.f64[0]);
            v193 = _Q2.f64[0];
            v57 = atan2(v56, v235);
            v241.f64[0] = 0.0;
            v58 = sub_20F0BA1B0((int64x2_t *)(v19 + 21), v241.f64, v57);
LABEL_117:
            v65 = v58 / v56;
            _Q1 = v234;
            v67 = vmulq_n_f64(v234, (v53 * (v241.f64[0] / v55) - v65) / v193);
            v66 = -(v241.f64[0] / v55);
            v68 = vextq_s8((int8x16_t)v67, (int8x16_t)v67, 8uLL).u64[0];
LABEL_118:
            v240 = vmulq_n_f64(_Q1, v65);
            *(_QWORD *)&v67.f64[1] = v68;
            v87 = vmulq_n_f64(v67, _Q1.f64[0]);
            v88 = vmulq_laneq_f64(v67, _Q1, 1);
            v236.f64[1] = v87.f64[1];
            v238.f64[0] = v88.f64[0];
            v237 = v66 * _Q1.f64[0];
            v236.f64[0] = v65 + v87.f64[0];
            v239 = vmuld_lane_f64(v66, _Q1, 1);
            v238.f64[1] = v65 + v88.f64[1];
            v41 = *((_DWORD *)v19 + 248);
            if (v41 != -1)
              goto LABEL_87;
            goto LABEL_119;
          }
          goto LABEL_81;
        }
      }
      else if (v36 <= 7)
      {
        goto LABEL_19;
      }
      if (v36 > 0xB)
      {
        if (v36 <= 0xD)
        {
          if (v36 != 13)
            goto LABEL_168;
          if (v235 < 0.00000001)
            goto LABEL_168;
          v245 = vdivq_f64(v234, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v235, 0));
          if (!sub_20EB295B8(&v240, &v241, 0, (uint64_t)&v245, (double *)v19 + 21, (*(double *)v19 + *((double *)v19 + 4)) * 0.5))goto LABEL_168;
          _D0 = -v234.f64[1] / (v235 * v235);
          _V3.D[1] = v241.f64[1];
          _V4.D[1] = v242.f64[1];
          v46.f64[0] = 0.0;
          v46.f64[1] = 1.0 / v235;
          _Q1 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)COERCE_UNSIGNED_INT64(1.0 / v235), v241.f64[0]), v46, v241, 1);
          __asm { FMLA            D7, D0, V3.D[1] }
          v236 = _Q1;
          __asm { FMLA            D2, D0, V4.D[1] }
          v237 = _D7;
          v239 = _D2;
          v238 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)COERCE_UNSIGNED_INT64(1.0 / v235), v242.f64[0]), v46, v242, 1);
          v41 = *((_DWORD *)v19 + 248);
          if (v41 == -1)
            goto LABEL_119;
          goto LABEL_87;
        }
        if (v36 == 14)
          v42 = sub_20EB2498C(&v240, (uint64_t)&v236, 0, (uint64_t)&v234, (double *)v19 + 21, (*(double *)v19 + *((double *)v19 + 4)) * 0.5);
        else
          v42 = sub_20EB3F050((uint64_t)v19, &v240, (uint64_t)&v236, &v234, 0);
        goto LABEL_85;
      }
      if (v36 > 9)
      {
        if (v36 == 10)
          v42 = sub_20EB2450C(&v240, (uint64_t)&v236, 0, (uint64_t)&v234, (double *)v19 + 21, (*(double *)v19 + *((double *)v19 + 4)) * 0.5);
        else
          v42 = sub_20EB3AF98((uint64_t)v19, &v240, (uint64_t)&v236, &v234, 0);
        goto LABEL_85;
      }
      if (v36 == 9)
      {
        v42 = sub_20EB372E0((uint64_t)v19, &v240, (uint64_t)&v236, &v234, 0);
        goto LABEL_85;
      }
      v53 = v235;
      _Q1 = v234;
      _Q2 = vmulq_f64(_Q1, _Q1);
      _D0 = v234.f64[1];
      __asm { FMLA            D2, D0, V1.D[1] }
      if (_Q2.f64[0] >= 0.00000001)
      {
        v55 = v235 * v235 + _Q2.f64[0];
        v56 = sqrt(_Q2.f64[0]);
        v193 = _Q2.f64[0];
        v86 = atan2(v56, v235);
        v241.f64[0] = 0.0;
        v58 = sub_20F0BA21C((double *)v19 + 21, v241.f64, v86);
        goto LABEL_117;
      }
LABEL_81:
      v65 = 1.0 / v53;
      v66 = -(v65 * v65);
      v67.f64[0] = 0.0;
      v68 = 0;
      goto LABEL_118;
    }
    v59 = 0;
    while (1)
    {
      v62 = *(_QWORD *)(a1 + 160);
      v15 = *(_DWORD *)(v62 + 992);
      if (v15 == -1)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_179;
        }
        v15 = *(_DWORD *)(v62 + 992);
        if (v15 > 7)
        {
LABEL_69:
          if (v15 <= 0xB)
          {
            _CF = v15 >= 0xA;
            v60 = 7;
            if (_CF)
              v60 = 14;
          }
          else
          {
            v63 = v15 == 13;
            if (v15 > 0xD)
            {
              v60 = 28;
            }
            else
            {
              v60 = 4;
              if (v63)
                v60 = 14;
            }
          }
          goto LABEL_59;
        }
      }
      else if (v15 > 7)
      {
        goto LABEL_69;
      }
      if (v15 > 3)
      {
        if (v15 >= 6)
        {
          if (v15 == 6)
            v60 = 3;
          else
            v60 = 4;
        }
        else
        {
          v60 = 4;
        }
      }
      else
      {
        if (v15 <= 1)
          goto LABEL_14;
        if (v15 == 2)
          v60 = 3;
        else
          v60 = 4;
      }
LABEL_59:
      v61 = v59++;
      if (v60 <= v61)
        goto LABEL_15;
    }
  }
  return result;
}

void sub_20FC82CD0(int64x2_t **a1@<X0>, uint64_t *a2@<X1>, unsigned int **a3@<X3>, _QWORD *a4@<X4>, _QWORD *a5@<X5>, _QWORD *a6@<X6>, unsigned int a7@<W7>, _BYTE *a8@<X8>)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v15;
  float64x2_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  float64x2_t *v20;
  uint64_t v21;
  float64x2_t *v22;
  float32x4_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  int8x16_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  int64x2_t v43;
  int64x2_t v44;
  double v45;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  int8x16_t v50;
  int64x2_t *v51;
  float64x2_t v52;
  int v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  size_t v62;
  const char *v63;
  unsigned int *v64;
  unsigned int *v65;
  unsigned __int8 v66;
  const char *v67;
  size_t v68;
  char *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  uint64_t v77;
  size_t v78;
  std::__shared_weak_count_vtbl *v79;
  std::__shared_weak_count *v80;
  std::__shared_weak_count *v81;
  unint64_t *p_shared_owners;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  double v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::string::size_type v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  void *v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  int v116;
  unint64_t v117;
  uint64_t *v119;
  char *v120;
  int64_t v121;
  size_t v122;
  size_t v123;
  double v124;
  size_t v125;
  size_t v126;
  double v127;
  std::string *p_b;
  uint64_t v129;
  uint64_t v130;
  std::string *v131;
  simd_double2 v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  const std::string::value_type *v136;
  std::string::size_type v137;
  std::string *v138;
  __int128 v139;
  _QWORD *v140;
  _QWORD *v141;
  uint64_t v142;
  simd_double2x2 *i;
  uint64_t v144;
  double v145;
  uint64_t v146;
  char *v147;
  std::string *v148;
  std::string::size_type size;
  size_t v150;
  void **v151;
  float64_t v152;
  const void **v153;
  const void *v154;
  uint64_t v155;
  uint64_t v156;
  const char *v157;
  uint64_t v158;
  uint64_t v159;
  size_t v160;
  const char *v161;
  unsigned __int8 v162;
  const char *v163;
  size_t v164;
  std::string::size_type *p_size;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  NSObject *v172;
  size_t v173;
  void *v174;
  _QWORD *v175;
  size_t v176;
  size_t v177;
  void *v178;
  void *v179;
  uint64_t v180;
  uint64_t v181;
  void *v182;
  char v183;
  _QWORD *v184;
  uint64_t v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  char *v189;
  unint64_t *v190;
  unint64_t v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  unint64_t v195;
  uint64_t v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  std::string::size_type v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  std::string::size_type v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  void *v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  const char *v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  uint64_t v230;
  int8x16_t v234;
  int8x16_t v235;
  int8x16_t v236;
  int8x16_t v237;
  double v238;
  double v239;
  double v240;
  char *v241;
  float64x2_t v242;
  float64x2_t v243;
  float64x2_t v244;
  float64x2_t v245;
  float64x2_t v246;
  float64x2_t v247;
  float64x2_t v248;
  float64x2_t v249;
  float64x2_t v250;
  int v251;
  float64x2_t v252;
  uint64_t v253;
  int v254;
  float64x2_t v255;
  uint64_t v256;
  unint64_t v257;
  float64x2_t v258;
  unint64_t v259;
  uint64_t v260;
  simd_double2x2 v261;
  const char *v262;
  int v263;
  const char *v264;
  uint64_t v265;
  std::__shared_weak_count *v266;
  void *__dst[2];
  int64_t v268;
  uint64_t v269;
  simd_double2x2 __src[9];
  _OWORD v271[3];
  float64x2_t v272;
  __int128 v273;
  __int128 v274;
  float64x2_t v275;
  float64x2_t v276;
  __int128 v277;
  float64x2_t v278;
  float64x2_t v279;
  __int128 v280;
  float64x2_t v281;
  float64x2_t v282;
  float64x2_t v283;
  float64x2_t v284;
  float64x2_t v285;
  float64x2_t v286;
  std::string __b;
  char *v288;
  std::__shared_weak_count *v289;
  void *v290;
  __int128 v291;
  _OWORD object[3];
  __int128 v293;
  float64x2_t v294;
  void *v295[2];
  float64x2_t v296;
  float64_t v297;
  uint64_t v298;
  uint64_t v299;
  std::string v300;
  int8x16_t v301;
  char *v302;
  const char *v303;
  unint64_t v304;
  std::__shared_weak_count *v305;
  _QWORD v306[5];

  v306[2] = *MEMORY[0x24BDAC8D0];
  v286 = 0u;
  v285 = 0u;
  v283 = 0u;
  v284 = 0u;
  v281 = 0u;
  v282 = 0u;
  v279 = 0u;
  v280 = 0u;
  v277 = 0u;
  v278 = 0u;
  v275 = 0u;
  v276 = 0u;
  v273 = 0u;
  v274 = 0u;
  v272 = 0u;
  memset(v271, 0, sizeof(v271));
  v9 = *a3;
  v10 = a3[1];
  if (*a3 == v10)
  {
    v15 = 0;
    if (a7)
    {
LABEL_16:
      *a8 = 0;
      a8[288] = 0;
      return;
    }
  }
  else
  {
    v15 = 0;
    v244 = (float64x2_t)v271[0];
    v245 = v272;
    v246 = v275;
    v247 = v278;
    v250 = v276;
    v252 = v279;
    v248 = v281;
    v249 = v284;
    v255 = v282;
    v258 = v283;
    HIDWORD(v16.f64[0]) = HIDWORD(v286.f64[0]);
    v242 = v285;
    v243 = v286;
    do
    {
      v17 = *v9;
      v18 = *(_QWORD *)(*a6 + 8 * v17);
      if (v18)
      {
        v19 = *(float *)(*a5 + 4 * v17);
        v20 = (float64x2_t *)(*a4 + 8 * (3 * v17));
        v21 = (uint64_t)*a1;
        v22 = (float64x2_t *)a1[2];
        LODWORD(v16.f64[0]) = *(_DWORD *)(v18 + 32);
        v23 = *(float32x4_t *)(v18 + 16);
        v24 = vcvtq_f64_f32(*(float32x2_t *)v18);
        v25 = vcvt_hight_f64_f32(*(float32x4_t *)v18);
        __src[1].columns[0] = (simd_double2)vcvtq_f64_f32(*(float32x2_t *)v23.f32);
        __src[1].columns[1] = (simd_double2)vcvt_hight_f64_f32(v23);
        __src[0].columns[0] = (simd_double2)v24;
        __src[0].columns[1] = (simd_double2)v25;
        *(_QWORD *)&__src[2].columns[0].f64[0] = *(_OWORD *)&vcvtq_f64_f32(*(float32x2_t *)&v16.f64[0]);
        if ((sub_20FC62D74((double *)&__b, (double *)&v290, (uint64_t)&v261, (uint64_t)object, (uint64_t)&v300, 0, v21, v22, __src[2].columns[0].f64[0], __src[1].columns[1].f64[0], v25, v20, v24, (float64x2_t *)__src, *a2) & 1) != 0)
        {
          v238 = *(double *)&object[1];
          v239 = *((double *)&object[2] + 1);
          v234 = (int8x16_t)object[0];
          v235 = *(int8x16_t *)((char *)&object[1] + 8);
          v240 = *(double *)&v300.__r_.__value_.__r.__words[2];
          v241 = v302;
          v236 = *(int8x16_t *)&v300.__r_.__value_.__l.__data_;
          v237 = v301;
          v26.f64[0] = v261.columns[0].f64[0];
          v26.f64[1] = v261.columns[1].f64[1];
          v27 = vaddq_f64((float64x2_t)vdupq_lane_s64(COERCE__INT64(v19 * v19), 0), v26);
          v261.columns[1].f64[1] = v27.f64[1];
          v261.columns[0].f64[0] = v27.f64[0];
          sub_20E8BE3B0(&v261, __src);
          v28.i64[0] = v236.i64[0];
          v28.i64[1] = v237.i64[0];
          v29 = (float64x2_t)vzip2q_s64((int64x2_t)v236, (int64x2_t)v237);
          *(_QWORD *)&v30.f64[0] = vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL).u64[0];
          *(_QWORD *)&v31.f64[0] = v234.i64[0];
          *(_QWORD *)&v31.f64[1] = vextq_s8(v234, v234, 8uLL).u64[0];
          *(_QWORD *)&v32.f64[0] = v235.i64[0];
          *(_QWORD *)&v32.f64[1] = vextq_s8(v235, v235, 8uLL).u64[0];
          v33 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)__src[0].columns[0], *(double *)v234.i64), (float64x2_t)__src[0].columns[1], *(double *)v235.i64);
          v34 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)__src[0].columns[0], v31.f64[1]), (float64x2_t)__src[0].columns[1], v32.f64[1]);
          v36.f64[0] = v238;
          v35.f64[0] = v239;
          v37 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)__src[0].columns[0], v238), (float64x2_t)__src[0].columns[1], v239);
          v38 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)__src[0].columns[0], *(double *)v236.i64), (float64x2_t)__src[0].columns[1], *(double *)v237.i64);
          v39 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)__src[0].columns[0], *(double *)vextq_s8(v236, v236, 8uLL).i64), (float64x2_t)__src[0].columns[1], *(double *)vextq_s8(v237, v237, 8uLL).i64);
          v40 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)__src[0].columns[0], v240), (float64x2_t)__src[0].columns[1], *(double *)&v241);
          v244 = vaddq_f64(v244, vmlaq_laneq_f64(vmulq_n_f64(v31, v33.f64[0]), v32, v33, 1));
          v245 = vaddq_f64(v245, vmlaq_laneq_f64(vmulq_n_f64(v31, v34.f64[0]), v32, v34, 1));
          v246 = vaddq_f64(v246, vmlaq_laneq_f64(vmulq_n_f64(v31, v37.f64[0]), v32, v37, 1));
          v247 = vaddq_f64(v247, vmlaq_laneq_f64(vmulq_n_f64(v31, v38.f64[0]), v32, v38, 1));
          *(_QWORD *)&v36.f64[1] = v236.i64[0];
          *(_QWORD *)&v35.f64[1] = vextq_s8(v28, v28, 8uLL).u64[0];
          v248 = vaddq_f64(v248, vmlaq_laneq_f64(vmulq_n_f64(v31, v39.f64[0]), v32, v39, 1));
          v249 = vaddq_f64(v249, vmlaq_laneq_f64(vmulq_n_f64(v31, v40.f64[0]), v32, v40, 1));
          v250 = vaddq_f64(v250, vmlaq_laneq_f64(vmulq_n_f64(v36, v37.f64[0]), v35, v37, 1));
          v252 = vaddq_f64(v252, vmlaq_laneq_f64(vmulq_n_f64(v36, v38.f64[0]), v35, v38, 1));
          v29.f64[1] = v240;
          *(_QWORD *)&v30.f64[1] = v241;
          v41 = vmlaq_laneq_f64(vmulq_n_f64(v29, v39.f64[0]), v30, v39, 1);
          v16 = vmlaq_laneq_f64(vmulq_n_f64(v29, v40.f64[0]), v30, v40, 1);
          v255 = vaddq_f64(v255, vmlaq_laneq_f64(vmulq_n_f64(v36, v39.f64[0]), v35, v39, 1));
          v258 = vaddq_f64(v41, v258);
          v242 = vaddq_f64(v242, vmlaq_laneq_f64(vmulq_n_f64(v36, v40.f64[0]), v35, v40, 1));
          v243 = vaddq_f64(v16, v243);
          ++v15;
        }
      }
      ++v9;
    }
    while (v9 != v10);
    v271[0] = v244;
    v272 = v245;
    v275 = v246;
    v276 = v250;
    v278 = v247;
    v279 = v252;
    v281 = v248;
    v282 = v255;
    v283 = v258;
    v284 = v249;
    v285 = v242;
    v286 = v243;
    if (v15 < a7)
      goto LABEL_16;
  }
  *(_QWORD *)&v42.f64[0] = (*a1)[1].i64[0];
  v43 = **a1;
  v44 = *(int64x2_t *)((char *)*a1 + 24);
  v45 = *(double *)(*a1)[4].i64;
  _Q4 = (*a1)[3];
  v47 = (float64x2_t)vzip1q_s64(v43, v44);
  v48 = (float64x2_t)vdupq_laneq_s64(_Q4, 1);
  v49 = (float64x2_t)vzip2q_s64(v43, v44);
  *(_QWORD *)&v42.f64[1] = (*a1)[2].i64[1];
  v50 = vextq_s8((int8x16_t)v49, (int8x16_t)v48, 8uLL);
  v51 = a1[2];
  *(_QWORD *)&v48.f64[0] = v51[1].i64[0];
  v52 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v47, *(double *)v51->i64), v49, *(float64x2_t *)v51, 1), v42, v48.f64[0]);
  _D7 = v51->i64[1];
  __asm { FMLA            D17, D7, V4.D[1] }
  v48.f64[0] = _D17 + v45 * v48.f64[0];
  *(_QWORD *)&v49.f64[1] = v50.i64[0];
  object[1] = (*a1)[3].u64[0];
  object[0] = v47;
  *(_OWORD *)v295 = *(unint64_t *)&v45;
  v294 = v42;
  v293 = v50.u64[1];
  object[2] = v49;
  v296 = vnegq_f64(v52);
  *(_QWORD *)&v297 = *(_OWORD *)&vnegq_f64(v48);
  v298 = 0x3FF0000000000000;
  if (!sub_20FC84924((int8x16_t *)object, v271, (float64x2_t *)__src))
    goto LABEL_16;
  sub_20FC84E90(&v290);
  if (**((int **)v290 + 7) > 2)
    goto LABEL_101;
  v58 = *((unsigned __int8 *)v290 + 72);
  v59 = sub_20E8C31DC((uint64_t)v290, "OSLogSurrogateAppender", 1, 0);
  v60 = v59;
  if (!v58 && !v59)
    goto LABEL_101;
  v300.__r_.__value_.__r.__words[0] = (std::string::size_type)&v290;
  v300.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v300.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
  v301.i32[0] = 2;
  v301.i64[1] = (uint64_t)"unknown file";
  LODWORD(v302) = 658;
  v304 = 0;
  v305 = 0;
  v303 = "unknown function";
  v61 = *(_QWORD *)v300.__r_.__value_.__l.__data_;
  v256 = *(_QWORD *)v300.__r_.__value_.__l.__data_ + 16;
  v253 = *(_QWORD *)v300.__r_.__value_.__l.__data_;
  v259 = v60;
  if (*(char *)(*(_QWORD *)v300.__r_.__value_.__l.__data_ + 39) < 0)
  {
    v63 = *(const char **)(v61 + 16);
    v62 = *(_QWORD *)(v61 + 24);
  }
  else
  {
    v62 = *(unsigned __int8 *)(*(_QWORD *)v300.__r_.__value_.__l.__data_ + 39);
    v63 = (const char *)(v61 + 16);
  }
  v64 = *a3;
  v65 = a3[1];
  v66 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v66 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)object);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
    if (BYTE8(object[1]) && SBYTE7(object[1]) < 0)
      operator delete(*(void **)&object[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v67 = byte_254A4A4F8;
  else
    v67 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v68 = byte_254A4A4F8[23];
  else
    v68 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)&object[0] = os_log_create(v67, v63);
  v69 = (char *)object + 8;
  if (v68 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v70 = v58;
  if (v68 >= 0x17)
  {
    v71 = (v68 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v68 | 7) != 0x17)
      v71 = v68 | 7;
    v72 = v71 + 1;
    v69 = (char *)operator new(v71 + 1);
    *((_QWORD *)&object[1] + 1) = v72 | 0x8000000000000000;
    *((_QWORD *)&object[0] + 1) = v69;
    *(_QWORD *)&object[1] = v68;
    v70 = v58;
    goto LABEL_32;
  }
  HIBYTE(object[1]) = v68;
  if (v68)
LABEL_32:
    memmove(v69, v67, v68);
  v69[v68] = 0;
  LOBYTE(object[2]) = 1;
  v73 = (char *)&object[2] + 8;
  if (v62 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v62 >= 0x17)
  {
    v74 = (v62 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v62 | 7) != 0x17)
      v74 = v62 | 7;
    v75 = v74 + 1;
    v73 = (char *)operator new(v74 + 1);
    *((_QWORD *)&v293 + 1) = v75 | 0x8000000000000000;
    *((_QWORD *)&object[2] + 1) = v73;
    *(_QWORD *)&v293 = v62;
  }
  else
  {
    HIBYTE(v293) = v62;
    if (!v62)
      goto LABEL_41;
  }
  memmove(v73, v63, v62);
LABEL_41:
  v73[v62] = 0;
  LOBYTE(v294.f64[0]) = 1;
  v76 = *(NSObject **)&object[0];
  if (SHIBYTE(v293) < 0)
    operator delete(*((void **)&object[2] + 1));
  if (LOBYTE(object[2]) && SHIBYTE(object[1]) < 0)
    operator delete(*((void **)&object[0] + 1));
  if (*(_QWORD *)&object[0])
    os_release(*(void **)&object[0]);
  v77 = v65 - v64;
  if (v259 && *(_QWORD *)(v259 + 24))
  {
    v78 = _os_log_pack_size();
    v79 = (std::__shared_weak_count_vtbl *)operator new(v78, (std::align_val_t)8uLL);
    v80 = (std::__shared_weak_count *)operator new();
    v81 = v80;
    v80->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v80->__shared_owners_;
    v80->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v80->__shared_weak_owners_ = 0;
    v80[1].__vftable = v79;
    *(_QWORD *)&object[0] = v79;
    *((_QWORD *)&object[0] + 1) = v79;
    *(_QWORD *)&object[1] = v80;
    do
      v83 = __ldxr(p_shared_owners);
    while (__stxr(v83 + 1, p_shared_owners));
    memset((char *)&object[1] + 8, 0, 24);
    do
      v84 = __ldaxr(p_shared_owners);
    while (__stlxr(v84 - 1, p_shared_owners));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v81);
    }
    v85 = *(_QWORD *)&object[0];
    v86 = _os_log_pack_fill();
    *(_DWORD *)v86 = 67109376;
    *(_DWORD *)(v86 + 4) = v15;
    *(_WORD *)(v86 + 8) = 2048;
    *(_QWORD *)(v86 + 10) = v77;
    v87 = operator new();
    v88 = *(unsigned __int8 *)(v253 + 39);
    v89 = *(_QWORD *)(v253 + 16);
    v90 = *(_QWORD *)(v253 + 24);
    v91 = *(_OWORD *)((char *)&object[1] + 8);
    *(_OWORD *)(v87 + 8) = *(_OWORD *)((char *)object + 8);
    if ((v88 & 0x80u) != 0)
      v88 = v90;
    else
      v89 = v256;
    *(_QWORD *)v87 = v85;
    *((_QWORD *)&object[0] + 1) = 0;
    *(_QWORD *)&object[1] = 0;
    *(_OWORD *)(v87 + 24) = v91;
    *((_QWORD *)&object[1] + 1) = 0;
    *(_QWORD *)&object[2] = 0;
    *(_QWORD *)(v87 + 40) = v89;
    *(_QWORD *)(v87 + 48) = v88;
    *(_BYTE *)(v87 + 56) = 2;
    __b.__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)&v261.columns[0].f64[0] = v87;
    (*(void (**)(_QWORD, simd_double2x2 *))(**(_QWORD **)(v259 + 24) + 40))(*(_QWORD *)(v259 + 24), &v261);
    v92 = v261.columns[0].f64[0];
    v261.columns[0].f64[0] = 0.0;
    if (v92 != 0.0)
    {
      v93 = *(std::__shared_weak_count **)(*(_QWORD *)&v92 + 32);
      if (v93)
      {
        v94 = (unint64_t *)&v93->__shared_owners_;
        do
          v95 = __ldaxr(v94);
        while (__stlxr(v95 - 1, v94));
        if (!v95)
        {
          ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
          std::__shared_weak_count::__release_weak(v93);
        }
      }
      v96 = *(std::__shared_weak_count **)(*(_QWORD *)&v92 + 16);
      if (v96)
      {
        v97 = (unint64_t *)&v96->__shared_owners_;
        do
          v98 = __ldaxr(v97);
        while (__stlxr(v98 - 1, v97));
        if (!v98)
        {
          ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
          std::__shared_weak_count::__release_weak(v96);
        }
      }
      MEMORY[0x212BC6398](*(_QWORD *)&v92, 0x10F0C40B62ED6C6);
      v99 = __b.__r_.__value_.__r.__words[0];
      __b.__r_.__value_.__r.__words[0] = 0;
      if (v99)
      {
        v100 = *(std::__shared_weak_count **)(v99 + 32);
        if (v100)
        {
          v101 = (unint64_t *)&v100->__shared_owners_;
          do
            v102 = __ldaxr(v101);
          while (__stlxr(v102 - 1, v101));
          if (!v102)
          {
            ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
            std::__shared_weak_count::__release_weak(v100);
          }
        }
        v103 = *(std::__shared_weak_count **)(v99 + 16);
        if (v103)
        {
          v104 = (unint64_t *)&v103->__shared_owners_;
          do
            v105 = __ldaxr(v104);
          while (__stlxr(v105 - 1, v104));
          if (!v105)
          {
            ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
            std::__shared_weak_count::__release_weak(v103);
          }
        }
        MEMORY[0x212BC6398](v99, 0x10F0C40B62ED6C6);
      }
    }
    v106 = *(std::__shared_weak_count **)&object[2];
    if (*(_QWORD *)&object[2])
    {
      v107 = (unint64_t *)(*(_QWORD *)&object[2] + 8);
      do
        v108 = __ldaxr(v107);
      while (__stlxr(v108 - 1, v107));
      if (!v108)
      {
        ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
        std::__shared_weak_count::__release_weak(v106);
      }
    }
    v109 = *(std::__shared_weak_count **)&object[1];
    if (*(_QWORD *)&object[1])
    {
      v110 = (unint64_t *)(*(_QWORD *)&object[1] + 8);
      do
        v111 = __ldaxr(v110);
      while (__stlxr(v111 - 1, v110));
      if (!v111)
      {
        ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
        std::__shared_weak_count::__release_weak(v109);
      }
    }
  }
  else
  {
    os_log_type_enabled(v76, OS_LOG_TYPE_DEBUG);
    LODWORD(object[0]) = 67109376;
    DWORD1(object[0]) = v15;
    WORD4(object[0]) = 2048;
    *(_QWORD *)((char *)object + 10) = v65 - v64;
    v112 = (void *)_os_log_send_and_compose_impl();
    if (v112)
      free(v112);
  }
  if (v70)
  {
    sub_20E8C003C((uint64_t)&v300, "Number of obs with cov: %u / %zu", v15, a3[1] - *a3);
    sub_20E863570((uint64_t)&v300);
  }
  sub_20E863570((uint64_t)&v300);
  v113 = v305;
  if (v305)
  {
    v114 = (unint64_t *)&v305->__shared_owners_;
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }
LABEL_101:
  sub_20FC84E90(&v269);
  if (**(int **)(v269 + 56) <= 2)
  {
    v116 = *(unsigned __int8 *)(v269 + 72);
    v117 = sub_20E8C31DC(v269, "OSLogSurrogateAppender", 1, 0);
    if (v116 || v117 != 0)
    {
      v257 = v117;
      sub_20E863438((uint64_t)object);
      v119 = sub_20E86A980(&object[1], (uint64_t)"T_Iquery_cov: \n", 15);
      v120 = (char *)v119 + *(_QWORD *)(*v119 - 24);
      v254 = *((_DWORD *)v120 + 2);
      v122 = *((_QWORD *)v120 + 2);
      v121 = *((_QWORD *)v120 + 3);
      if (v121)
      {
        if (v121 <= (uint64_t)(v122 + 2))
          v123 = v122 + 2;
        else
          v123 = v121;
        v124 = __exp10((double)-(uint64_t)v122);
        v125 = v123 + ~v122;
        v126 = v125 - 1;
        if (v125 - 1 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        v127 = v124;
        if (v126 >= 0x17)
        {
          v129 = (v126 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v126 | 7) != 0x17)
            v129 = v126 | 7;
          v130 = v129 + 1;
          p_b = (std::string *)operator new(v129 + 1);
          __b.__r_.__value_.__r.__words[2] = v130 | 0x8000000000000000;
          __b.__r_.__value_.__r.__words[0] = (std::string::size_type)p_b;
          __b.__r_.__value_.__l.__size_ = v125 - 1;
        }
        else
        {
          *((_BYTE *)&__b.__r_.__value_.__s + 23) = v125 - 1;
          p_b = &__b;
          if (v125 == 1)
          {
            LODWORD(v125) = 1;
            goto LABEL_119;
          }
        }
      }
      else
      {
        v127 = __exp10((double)-(uint64_t)v122);
        v126 = 3;
        *((_BYTE *)&__b.__r_.__value_.__s + 23) = 3;
        p_b = &__b;
        LODWORD(v125) = 4;
      }
      memset(p_b, 32, v126);
LABEL_119:
      p_b->__r_.__value_.__s.__data_[v126] = 0;
      v131 = std::string::append(&__b, "0 ", 2uLL);
      v132 = *(simd_double2 *)&v131->__r_.__value_.__l.__data_;
      *(_QWORD *)&v261.columns[1].f64[0] = v131->__r_.__value_.__r.__words[2];
      v261.columns[0] = v132;
      v131->__r_.__value_.__l.__size_ = 0;
      v131->__r_.__value_.__r.__words[2] = 0;
      v131->__r_.__value_.__r.__words[0] = 0;
      if (v122 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v122 >= 0x17)
      {
        v134 = (v122 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v122 | 7) != 0x17)
          v134 = v122 | 7;
        v135 = v134 + 1;
        v133 = operator new(v134 + 1);
        *((_QWORD *)&v291 + 1) = v135 | 0x8000000000000000;
        v290 = v133;
        *(_QWORD *)&v291 = v122;
      }
      else
      {
        HIBYTE(v291) = v122;
        v133 = &v290;
        if (!v122)
        {
LABEL_127:
          *((_BYTE *)v133 + v122) = 0;
          if (v291 >= 0)
            v136 = (const std::string::value_type *)&v290;
          else
            v136 = (const std::string::value_type *)v290;
          if (v291 >= 0)
            v137 = HIBYTE(v291);
          else
            v137 = v291;
          v138 = std::string::append((std::string *)&v261, v136, v137);
          v139 = *(_OWORD *)&v138->__r_.__value_.__l.__data_;
          v300.__r_.__value_.__r.__words[2] = v138->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v300.__r_.__value_.__l.__data_ = v139;
          v138->__r_.__value_.__l.__size_ = 0;
          v138->__r_.__value_.__r.__words[2] = 0;
          v138->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v291) < 0)
          {
            operator delete(v290);
            if ((SHIBYTE(v261.columns[1].f64[0]) & 0x80000000) == 0)
            {
LABEL_135:
              if ((SHIBYTE(__b.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_136:
                v251 = v116;
                *(uint64_t *)((char *)v119 + *(_QWORD *)(*v119 - 24) + 24) = 0;
                LOBYTE(v261.columns[0].f64[0]) = 91;
                sub_20E86A980(v119, (uint64_t)&v261, 1);
                v260 = 0;
                v140 = v119 + 1;
                v141 = v119 + 2;
                v142 = (int)v125 + (int)v122 + 1;
                for (i = __src; ; i = (simd_double2x2 *)((char *)i + 8))
                {
                  v144 = 0;
                  v145 = i->columns[0].f64[0];
                  v146 = *v119;
                  v147 = (char *)v119 + *(_QWORD *)(*v119 - 24);
                  if ((v147[9] & 1) == 0)
                  {
LABEL_138:
                    if (fabs(v145) >= v127)
                    {
                      *((_QWORD *)v147 + 3) = v142;
                      *(_DWORD *)((char *)v140 + *(_QWORD *)(v146 - 24)) = *(_DWORD *)((_BYTE *)v140
                                                                                     + *(_QWORD *)(v146 - 24)) & 0xFFFFFEFB | 4;
                      *(_DWORD *)((char *)v140 + *(_QWORD *)(v146 - 24)) |= 0x400u;
                      *(_QWORD *)((char *)v141 + *(_QWORD *)(v146 - 24)) = (int)v122;
                      std::ostream::operator<<();
                      goto LABEL_149;
                    }
LABEL_141:
                    if ((v300.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v148 = &v300;
                    else
                      v148 = (std::string *)v300.__r_.__value_.__r.__words[0];
                    if ((v300.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      size = HIBYTE(v300.__r_.__value_.__r.__words[2]);
                    else
                      size = v300.__r_.__value_.__l.__size_;
                    sub_20E86A980(v119, (uint64_t)v148, size);
                    goto LABEL_149;
                  }
                  while (1)
                  {
                    if (v145 == 0.0)
                      goto LABEL_141;
                    *((_QWORD *)v147 + 3) = v142;
                    *(_DWORD *)((char *)v140 + *(_QWORD *)(v146 - 24)) |= 0x400u;
                    *(_QWORD *)((char *)v141 + *(_QWORD *)(v146 - 24)) = (int)v122 - 3;
                    std::ostream::operator<<();
LABEL_149:
                    if (v144 == 15)
                      break;
                    LOBYTE(v261.columns[0].f64[0]) = 44;
                    sub_20E86A980(v119, (uint64_t)&v261, 1);
                    v144 += 3;
                    v145 = i->columns[v144].f64[0];
                    v146 = *v119;
                    v147 = (char *)v119 + *(_QWORD *)(*v119 - 24);
                    if ((v147[9] & 1) == 0)
                      goto LABEL_138;
                  }
                  if (v260 == 5)
                    break;
                  sub_20E86A980(v119, (uint64_t)";\n ", 3);
                  ++v260;
                }
                sub_20E86A980(v119, (uint64_t)"   ]", 4);
                *(_DWORD *)((char *)v119 + *(_QWORD *)(*v119 - 24) + 8) = v254;
                if (SHIBYTE(v300.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v300.__r_.__value_.__l.__data_);
                if ((v298 & 0x10) != 0)
                {
                  v152 = v297;
                  if (*(_QWORD *)&v297 < *(_QWORD *)&v294.f64[1])
                  {
                    v297 = v294.f64[1];
                    v152 = v294.f64[1];
                  }
                  v153 = (const void **)&v294;
                }
                else
                {
                  if ((v298 & 8) == 0)
                  {
                    v150 = 0;
                    HIBYTE(v268) = 0;
                    v151 = __dst;
                    goto LABEL_174;
                  }
                  v153 = (const void **)&object[2] + 1;
                  v152 = *((double *)&v293 + 1);
                }
                v154 = *v153;
                v150 = *(_QWORD *)&v152 - (_QWORD)*v153;
                if (v150 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                if (v150 >= 0x17)
                {
                  v155 = (v150 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v150 | 7) != 0x17)
                    v155 = v150 | 7;
                  v156 = v155 + 1;
                  v151 = (void **)operator new(v155 + 1);
                  __dst[1] = (void *)v150;
                  v268 = v156 | 0x8000000000000000;
                  __dst[0] = v151;
                }
                else
                {
                  HIBYTE(v268) = LOBYTE(v152) - *(_BYTE *)v153;
                  v151 = __dst;
                  if (!v150)
                  {
LABEL_174:
                    *((_BYTE *)v151 + v150) = 0;
                    *(_QWORD *)&v261.columns[0].f64[0] = &v269;
                    *(std::chrono::steady_clock::time_point *)&v261.columns[0].f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
                    *(std::chrono::system_clock::time_point *)&v261.columns[1].f64[0] = (std::chrono::system_clock::time_point)std::chrono::system_clock::now().__d_.__rep_;
                    LODWORD(v261.columns[1].f64[1]) = 2;
                    v262 = "unknown file";
                    v263 = 659;
                    v265 = 0;
                    v266 = 0;
                    v264 = "unknown function";
                    if (v268 >= 0)
                      v157 = (const char *)__dst;
                    else
                      v157 = (const char *)__dst[0];
                    v158 = **(_QWORD **)&v261.columns[0].f64[0];
                    v159 = **(_QWORD **)&v261.columns[0].f64[0] + 16;
                    if (*(char *)(**(_QWORD **)&v261.columns[0].f64[0] + 39) < 0)
                    {
                      v161 = *(const char **)(v158 + 16);
                      v160 = *(_QWORD *)(v158 + 24);
                    }
                    else
                    {
                      v160 = *(unsigned __int8 *)(**(_QWORD **)&v261.columns[0].f64[0] + 39);
                      v161 = (const char *)(**(_QWORD **)&v261.columns[0].f64[0] + 16);
                    }
                    v162 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                    if ((v162 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
                    {
                      sub_20E9E46F8((uint64_t)&v300);
                      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v300);
                      if (v301.i8[0] && SHIBYTE(v300.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v300.__r_.__value_.__l.__data_);
                      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                      __cxa_guard_release(&qword_254A4A510);
                    }
                    if (byte_254A4A4F8[23] >= 0)
                      v163 = byte_254A4A4F8;
                    else
                      v163 = *(const char **)byte_254A4A4F8;
                    if (byte_254A4A4F8[23] >= 0)
                      v164 = byte_254A4A4F8[23];
                    else
                      v164 = *(_QWORD *)&byte_254A4A4F8[8];
                    v300.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v163, v161);
                    p_size = &v300.__r_.__value_.__l.__size_;
                    if (v164 > 0x7FFFFFFFFFFFFFF7)
                      sub_20E860B7C();
                    if (v164 >= 0x17)
                    {
                      v166 = (v164 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v164 | 7) != 0x17)
                        v166 = v164 | 7;
                      v167 = v166 + 1;
                      p_size = (std::string::size_type *)operator new(v166 + 1);
                      v300.__r_.__value_.__r.__words[2] = v164;
                      v301.i64[0] = v167 | 0x8000000000000000;
                      v300.__r_.__value_.__l.__size_ = (std::string::size_type)p_size;
                    }
                    else
                    {
                      v301.i8[7] = v164;
                      if (!v164)
                      {
LABEL_195:
                        *((_BYTE *)p_size + v164) = 0;
                        v301.i8[8] = 1;
                        v168 = (char *)&v302;
                        if (v160 > 0x7FFFFFFFFFFFFFF7)
                          sub_20E860B7C();
                        if (v160 >= 0x17)
                        {
                          v170 = (v160 & 0xFFFFFFFFFFFFFFF8) + 8;
                          if ((v160 | 7) != 0x17)
                            v170 = v160 | 7;
                          v171 = v170 + 1;
                          v168 = (char *)operator new(v170 + 1);
                          v303 = (const char *)v160;
                          v304 = v171 | 0x8000000000000000;
                          v302 = v168;
                          v169 = v257;
                        }
                        else
                        {
                          HIBYTE(v304) = v160;
                          v169 = v257;
                          if (!v160)
                          {
LABEL_203:
                            v168[v160] = 0;
                            LOBYTE(v305) = 1;
                            v172 = v300.__r_.__value_.__r.__words[0];
                            if (SHIBYTE(v304) < 0)
                              operator delete(v302);
                            if (v301.i8[8] && v301.i8[7] < 0)
                              operator delete((void *)v300.__r_.__value_.__l.__size_);
                            if (v300.__r_.__value_.__r.__words[0])
                              os_release(v300.__r_.__value_.__l.__data_);
                            if (!v169 || !*(_QWORD *)(v169 + 24))
                            {
                              os_log_type_enabled(v172, OS_LOG_TYPE_DEBUG);
                              LODWORD(v300.__r_.__value_.__l.__data_) = 136315138;
                              *(std::string::size_type *)((char *)v300.__r_.__value_.__r.__words + 4) = (std::string::size_type)v157;
                              v179 = (void *)_os_log_send_and_compose_impl();
                              if (v179)
                                free(v179);
                              goto LABEL_284;
                            }
                            v173 = _os_log_pack_size();
                            v174 = operator new(v173, (std::align_val_t)8uLL);
                            v175 = (_QWORD *)operator new();
                            *v175 = &off_24C9ABB80;
                            v175[1] = 0;
                            v175[2] = 0;
                            v175[3] = v174;
                            __b.__r_.__value_.__r.__words[0] = (std::string::size_type)v174;
                            __b.__r_.__value_.__l.__size_ = (std::string::size_type)v174;
                            v289 = 0;
                            __b.__r_.__value_.__r.__words[2] = (std::string::size_type)v175;
                            v288 = 0;
                            v176 = strlen(v157);
                            if (v176 > 0x7FFFFFFFFFFFFFF7)
                              sub_20E860B7C();
                            v177 = v176;
                            if (v176 >= 0x17)
                            {
                              v180 = (v176 & 0xFFFFFFFFFFFFFFF8) + 8;
                              if ((v176 | 7) != 0x17)
                                v180 = v176 | 7;
                              v181 = v180 + 1;
                              v178 = operator new(v180 + 1);
                              *((_QWORD *)&v291 + 1) = v181 | 0x8000000000000000;
                              v290 = v178;
                              *(_QWORD *)&v291 = v177;
                              v169 = v257;
                            }
                            else
                            {
                              HIBYTE(v291) = v176;
                              v178 = &v290;
                              if (!v176)
                              {
LABEL_222:
                                *((_BYTE *)v178 + v177) = 0;
                                v182 = v290;
                                v306[0] = v291;
                                *(_QWORD *)((char *)v306 + 7) = *(_QWORD *)((char *)&v291 + 7);
                                v183 = HIBYTE(v291);
                                v184 = operator new(0x38uLL);
                                v184[1] = 0;
                                v184[2] = 0;
                                v184[3] = off_24C9ABC20;
                                *v184 = &off_24C9ABBD0;
                                v185 = v306[0];
                                v184[4] = v182;
                                v184[5] = v185;
                                *(_QWORD *)((char *)v184 + 47) = *(_QWORD *)((char *)v306 + 7);
                                *((_BYTE *)v184 + 55) = v183;
                                v306[0] = 0;
                                *(_QWORD *)((char *)v306 + 7) = 0;
                                v186 = v289;
                                v288 = (char *)(v184 + 3);
                                v289 = (std::__shared_weak_count *)v184;
                                if (v186)
                                {
                                  v187 = (unint64_t *)&v186->__shared_owners_;
                                  do
                                    v188 = __ldaxr(v187);
                                  while (__stlxr(v188 - 1, v187));
                                  if (!v188)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
                                    std::__shared_weak_count::__release_weak(v186);
                                  }
                                }
                                v300 = __b;
                                v189 = v288;
                                if (__b.__r_.__value_.__r.__words[2])
                                {
                                  v190 = (unint64_t *)(__b.__r_.__value_.__r.__words[2] + 8);
                                  do
                                    v191 = __ldxr(v190);
                                  while (__stxr(v191 + 1, v190));
                                }
                                v192 = v289;
                                v301.i64[0] = (uint64_t)v189;
                                v301.i64[1] = (uint64_t)v289;
                                if (v289)
                                {
                                  v193 = (unint64_t *)&v289->__shared_owners_;
                                  do
                                    v194 = __ldxr(v193);
                                  while (__stxr(v194 + 1, v193));
                                  v302 = v189;
                                  do
                                    v195 = __ldaxr(v193);
                                  while (__stlxr(v195 - 1, v193));
                                  if (!v195)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
                                    std::__shared_weak_count::__release_weak(v192);
                                  }
                                }
                                else
                                {
                                  v302 = v189;
                                }
                                v196 = v159;
                                v197 = (std::__shared_weak_count *)__b.__r_.__value_.__r.__words[2];
                                if (__b.__r_.__value_.__r.__words[2])
                                {
                                  v198 = (unint64_t *)(__b.__r_.__value_.__r.__words[2] + 8);
                                  do
                                    v199 = __ldaxr(v198);
                                  while (__stlxr(v199 - 1, v198));
                                  if (!v199)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
                                    std::__shared_weak_count::__release_weak(v197);
                                  }
                                }
                                v200 = v300.__r_.__value_.__r.__words[0];
                                if (v302[31] >= 0)
                                  v201 = v302 + 8;
                                else
                                  v201 = (char *)*((_QWORD *)v302 + 1);
                                v202 = _os_log_pack_fill();
                                *(_DWORD *)v202 = 136315138;
                                *(_QWORD *)(v202 + 4) = v201;
                                v203 = operator new();
                                v204 = *(unsigned __int8 *)(v158 + 39);
                                if ((v204 & 0x80u) == 0)
                                  v205 = v196;
                                else
                                  v205 = *(_QWORD *)(v158 + 16);
                                if ((v204 & 0x80u) != 0)
                                  v204 = *(_QWORD *)(v158 + 24);
                                *(_QWORD *)v203 = v200;
                                *(_OWORD *)(v203 + 8) = *(_OWORD *)&v300.__r_.__value_.__r.__words[1];
                                *(_OWORD *)&v300.__r_.__value_.__r.__words[1] = 0uLL;
                                *(int8x16_t *)(v203 + 24) = v301;
                                v301 = 0uLL;
                                *(_QWORD *)(v203 + 40) = v205;
                                *(_QWORD *)(v203 + 48) = v204;
                                *(_BYTE *)(v203 + 56) = 2;
                                v290 = 0;
                                __b.__r_.__value_.__r.__words[0] = v203;
                                (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v169 + 24) + 40))(*(_QWORD *)(v169 + 24), &__b);
                                v206 = __b.__r_.__value_.__r.__words[0];
                                __b.__r_.__value_.__r.__words[0] = 0;
                                if (v206)
                                {
                                  v207 = *(std::__shared_weak_count **)(v206 + 32);
                                  if (v207)
                                  {
                                    v208 = (unint64_t *)&v207->__shared_owners_;
                                    do
                                      v209 = __ldaxr(v208);
                                    while (__stlxr(v209 - 1, v208));
                                    if (!v209)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
                                      std::__shared_weak_count::__release_weak(v207);
                                    }
                                  }
                                  v210 = *(std::__shared_weak_count **)(v206 + 16);
                                  if (v210)
                                  {
                                    v211 = (unint64_t *)&v210->__shared_owners_;
                                    do
                                      v212 = __ldaxr(v211);
                                    while (__stlxr(v212 - 1, v211));
                                    if (!v212)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
                                      std::__shared_weak_count::__release_weak(v210);
                                    }
                                  }
                                  MEMORY[0x212BC6398](v206, 0x10F0C40B62ED6C6);
                                  v213 = v290;
                                  v290 = 0;
                                  if (v213)
                                  {
                                    v214 = (std::__shared_weak_count *)*((_QWORD *)v213 + 4);
                                    if (v214)
                                    {
                                      v215 = (unint64_t *)&v214->__shared_owners_;
                                      do
                                        v216 = __ldaxr(v215);
                                      while (__stlxr(v216 - 1, v215));
                                      if (!v216)
                                      {
                                        ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
                                        std::__shared_weak_count::__release_weak(v214);
                                      }
                                    }
                                    v217 = (std::__shared_weak_count *)*((_QWORD *)v213 + 2);
                                    if (v217)
                                    {
                                      v218 = (unint64_t *)&v217->__shared_owners_;
                                      do
                                        v219 = __ldaxr(v218);
                                      while (__stlxr(v219 - 1, v218));
                                      if (!v219)
                                      {
                                        ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
                                        std::__shared_weak_count::__release_weak(v217);
                                      }
                                    }
                                    MEMORY[0x212BC6398](v213, 0x10F0C40B62ED6C6);
                                  }
                                }
                                v220 = (std::__shared_weak_count *)v301.i64[1];
                                if (v301.i64[1])
                                {
                                  v221 = (unint64_t *)(v301.i64[1] + 8);
                                  do
                                    v222 = __ldaxr(v221);
                                  while (__stlxr(v222 - 1, v221));
                                  if (!v222)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
                                    std::__shared_weak_count::__release_weak(v220);
                                  }
                                }
                                v223 = (std::__shared_weak_count *)v300.__r_.__value_.__r.__words[2];
                                if (v300.__r_.__value_.__r.__words[2])
                                {
                                  v224 = (unint64_t *)(v300.__r_.__value_.__r.__words[2] + 8);
                                  do
                                    v225 = __ldaxr(v224);
                                  while (__stlxr(v225 - 1, v224));
                                  if (!v225)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
                                    std::__shared_weak_count::__release_weak(v223);
                                  }
                                }
LABEL_284:
                                if (v251)
                                {
                                  v226 = (const char *)__dst;
                                  if (v268 < 0)
                                    v226 = (const char *)__dst[0];
                                  sub_20E8C003C((uint64_t)&v261, "%s", v226);
                                  sub_20E863570((uint64_t)&v261);
                                }
                                sub_20E863570((uint64_t)&v261);
                                v227 = v266;
                                if (v266)
                                {
                                  v228 = (unint64_t *)&v266->__shared_owners_;
                                  do
                                    v229 = __ldaxr(v228);
                                  while (__stlxr(v229 - 1, v228));
                                  if (!v229)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
                                    std::__shared_weak_count::__release_weak(v227);
                                  }
                                }
                                if (SHIBYTE(v268) < 0)
                                  operator delete(__dst[0]);
                                *(_QWORD *)&object[0] = *MEMORY[0x24BEDB7F0];
                                v230 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                                *(_QWORD *)((char *)object + *(_QWORD *)(*(_QWORD *)&object[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                                *(_QWORD *)&object[1] = v230;
                                *((_QWORD *)&object[1] + 1) = MEMORY[0x24BEDB848] + 16;
                                if (SHIBYTE(v296.f64[1]) < 0)
                                  operator delete(v295[1]);
                                std::streambuf::~streambuf();
                                std::iostream::~basic_iostream();
                                MEMORY[0x212BC6290](&v299);
                                goto LABEL_298;
                              }
                            }
                            memcpy(v178, v157, v177);
                            goto LABEL_222;
                          }
                        }
                        memmove(v168, v161, v160);
                        goto LABEL_203;
                      }
                    }
                    memmove(p_size, v163, v164);
                    goto LABEL_195;
                  }
                }
                memmove(v151, v154, v150);
                goto LABEL_174;
              }
LABEL_164:
              operator delete(__b.__r_.__value_.__l.__data_);
              goto LABEL_136;
            }
          }
          else if ((SHIBYTE(v261.columns[1].f64[0]) & 0x80000000) == 0)
          {
            goto LABEL_135;
          }
          operator delete(*(void **)&v261.columns[0].f64[0]);
          if ((SHIBYTE(__b.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_136;
          goto LABEL_164;
        }
      }
      memset(v133, 32, v122);
      goto LABEL_127;
    }
  }
LABEL_298:
  memcpy(a8, __src, 0x120uLL);
  a8[288] = 1;
}

void sub_20FC84620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a72;
  uint64_t v72;

  if (*(_BYTE *)(v72 - 184) && *(char *)(v72 - 185) < 0)
    operator delete(*(void **)(v72 - 208));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a57);
  if (a72 < 0)
    operator delete(__p);
  sub_20E863784((uint64_t)&STACK[0x470]);
  _Unwind_Resume(a1);
}

BOOL sub_20FC84924(int8x16_t *a1, const void *a2, float64x2_t *a3)
{
  int v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64_t v32;
  float64x2_t v33;
  int8x16_t v34;
  float64x2_t v35;
  float64_t v36;
  float64x2_t v37;
  int8x16_t v38;
  float64x2_t v39;
  float64_t v40;
  float64x2_t v41;
  int8x16_t v42;
  float64x2_t v43;
  double v44;
  __int128 v45;
  __int128 v46;
  double v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  double v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  int v56;
  _OWORD v57[18];

  v40 = *(double *)a1[1].i64;
  v42 = *a1;
  v36 = *(double *)a1[3].i64;
  v38 = a1[2];
  v32 = *(double *)a1[5].i64;
  v34 = a1[4];
  v56 = 2;
  memcpy(v57, a2, sizeof(v57));
  sub_20F215978((uint64_t)&v56);
  v4 = v56;
  if (!v56)
  {
    *(_QWORD *)&v5.f64[0] = vextq_s8(v34, v34, 8uLL).u64[0];
    v5.f64[1] = v32;
    v33 = v5;
    *(_QWORD *)&v5.f64[1] = v34.i64[0];
    v6.f64[0] = 0.0;
    v6.f64[1] = vnegq_f64(v5).f64[1];
    v35 = v6;
    *(_QWORD *)&v5.f64[0] = vextq_s8(v38, v38, 8uLL).u64[0];
    v5.f64[1] = v36;
    v37 = v5;
    *(_QWORD *)&v5.f64[1] = v38.i64[0];
    v6.f64[0] = 0.0;
    v6.f64[1] = vnegq_f64(v5).f64[1];
    v39 = v6;
    *(_QWORD *)&v5.f64[0] = vextq_s8(v42, v42, 8uLL).u64[0];
    v5.f64[1] = v40;
    v41 = v5;
    *(_QWORD *)&v5.f64[1] = v42.i64[0];
    v6.f64[0] = 0.0;
    v6.f64[1] = vnegq_f64(v5).f64[1];
    v43 = v6;
    v44 = *(double *)v57;
    v45 = v57[3];
    v46 = v57[6];
    v47 = *(double *)&v57[7];
    v48 = v57[9];
    v49 = v57[10];
    v50 = v57[12];
    v51 = v57[13];
    v52 = *(double *)&v57[14];
    v53 = v57[15];
    v54 = v57[16];
    v55 = v57[17];
    sub_20E8BE990();
    v7 = vmlaq_n_f64((float64x2_t)0, (float64x2_t)0, v44);
    v8 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)0, *(double *)&v45), (float64x2_t)0, *((double *)&v45 + 1));
    v9 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)0, *(double *)&v46), (float64x2_t)0, *((double *)&v46 + 1));
    v10 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)0, *(double *)&v48), (float64x2_t)0, *((double *)&v48 + 1));
    v11 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)0, *(double *)&v50), (float64x2_t)0, *((double *)&v50 + 1));
    v12 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)0, *(double *)&v53), (float64x2_t)0, *((double *)&v53 + 1));
    v13 = vaddq_f64(vmlaq_n_f64((float64x2_t)xmmword_2103BBF00, (float64x2_t)xmmword_21030D340, v44), (float64x2_t)0);
    v14 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vaddq_f64(v7, (float64x2_t)xmmword_2103A58E0), (float64x2_t)0, v43), (float64x2_t)0, v39), (float64x2_t)0, v35);
    v15 = vmlsq_f64(vmlsq_f64(vmlsq_f64(v7, (float64x2_t)0, v41), (float64x2_t)0, v37), (float64x2_t)0, v33);
    v16 = vaddq_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_21030D340, *(double *)&v45), (float64x2_t)xmmword_21030D330, *((double *)&v45 + 1)), (float64x2_t)0);
    v17 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vaddq_f64(v8, (float64x2_t)xmmword_2103A58E0), (float64x2_t)0, v43), (float64x2_t)0, v39), (float64x2_t)0, v35);
    v18 = vmlsq_f64(vmlsq_f64(vmlsq_f64(vaddq_f64(v8, (float64x2_t)0), (float64x2_t)0, v41), (float64x2_t)0, v37), (float64x2_t)0, v33);
    v19 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_21030D340, *(double *)&v46), (float64x2_t)xmmword_21030D330, *((double *)&v46 + 1)), (float64x2_t)0, v47), (float64x2_t)0);
    v20 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_n_f64(v9, (float64x2_t)xmmword_21030D340, v47), (float64x2_t)0, v43), (float64x2_t)0, v39), (float64x2_t)0, v35);
    v21 = vmlsq_f64(vmlsq_f64(vmlsq_f64(vmlaq_n_f64(v9, (float64x2_t)0, v47), (float64x2_t)0, v41), (float64x2_t)0, v37), (float64x2_t)0, v33);
    v22 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_21030D340, *(double *)&v48), (float64x2_t)xmmword_21030D330, *((double *)&v48 + 1)), (float64x2_t)0, *(double *)&v49), (float64x2_t)0, *((double *)&v49 + 1)), (float64x2_t)0);
    v23 = vmlaq_f64(vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v10, (float64x2_t)xmmword_21030D340, *(double *)&v49), v43, *((double *)&v49 + 1)), (float64x2_t)0, v39), (float64x2_t)0, v35);
    v24 = vmlsq_f64(vmlsq_f64(vmlsq_lane_f64(vmlaq_n_f64(v10, (float64x2_t)0, *(double *)&v49), v41, *((double *)&v49 + 1), 0), (float64x2_t)0, v37), (float64x2_t)0, v33);
    v25 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_21030D340, *(double *)&v50), (float64x2_t)xmmword_21030D330, *((double *)&v50 + 1)), (float64x2_t)0, *(double *)&v51), (float64x2_t)0, *((double *)&v51 + 1)), (float64x2_t)0, v52), (float64x2_t)0);
    v26 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v11, (float64x2_t)xmmword_21030D340, *(double *)&v51), v43, *((double *)&v51 + 1)), v39, v52), (float64x2_t)0, v35);
    v27 = vmlsq_f64(vmlsq_lane_f64(vmlsq_lane_f64(vmlaq_n_f64(v11, (float64x2_t)0, *(double *)&v51), v41, *((double *)&v51 + 1), 0), v37, v52, 0), (float64x2_t)0, v33);
    v28 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_21030D340, *(double *)&v53), (float64x2_t)xmmword_21030D330, *((double *)&v53 + 1)), (float64x2_t)0, *(double *)&v54), (float64x2_t)0, *((double *)&v54 + 1)), (float64x2_t)0, *(double *)&v55), (float64x2_t)0, *((double *)&v55 + 1));
    v29 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v12, (float64x2_t)xmmword_21030D340, *(double *)&v54), v43, *((double *)&v54 + 1)), v39, *(double *)&v55), v35, *((double *)&v55 + 1));
    v30 = vmlsq_lane_f64(vmlsq_lane_f64(vmlsq_lane_f64(vmlaq_n_f64(v12, (float64x2_t)0, *(double *)&v54), v41, *((double *)&v54 + 1), 0), v37, *(double *)&v55, 0), v33, *((double *)&v55 + 1), 0);
    *a3 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v13, v13.f64[0]), v16, v16.f64[0]), v19, v19.f64[0]), v22, v22.f64[0]), v25, v25.f64[0]), v28, v28.f64[0]);
    a3[1] = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v14, v13.f64[0]), v17, v16.f64[0]), v20, v19.f64[0]), v23, v22.f64[0]), v26, v25.f64[0]), v29, v28.f64[0]);
    a3[2] = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v15, v13.f64[0]), v18, v16.f64[0]), v21, v19.f64[0]), v24, v22.f64[0]), v27, v25.f64[0]), v30, v28.f64[0]);
    a3[3] = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v13, v13, 1), v16, v16, 1), v19, v19, 1), v22, v22, 1), v25, v25, 1), v28, v28, 1);
    a3[4] = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v14, v13, 1), v17, v16, 1), v20, v19, 1), v23, v22, 1), v26, v25, 1), v29, v28, 1);
    a3[5] = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v15, v13, 1), v18, v16, 1), v21, v19, 1), v24, v22, 1), v27, v25, 1), v30, v28, 1);
    a3[6] = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v13, v14.f64[0]), v16, v17.f64[0]), v19, v20.f64[0]), v22, v23.f64[0]), v25, v26.f64[0]), v28, v29.f64[0]);
    a3[7] = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v14, v14.f64[0]), v17, v17.f64[0]), v20, v20.f64[0]), v23, v23.f64[0]), v26, v26.f64[0]), v29, v29.f64[0]);
    a3[10] = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v14, v14, 1), v17, v17, 1), v20, v20, 1), v23, v23, 1), v26, v26, 1), v29, v29, 1);
    a3[11] = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v15, v14, 1), v18, v17, 1), v21, v20, 1), v24, v23, 1), v27, v26, 1), v30, v29, 1);
    a3[8] = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v15, v14.f64[0]), v18, v17.f64[0]), v21, v20.f64[0]), v24, v23.f64[0]), v27, v26.f64[0]), v30, v29.f64[0]);
    a3[9] = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v13, v14, 1), v16, v17, 1), v19, v20, 1), v22, v23, 1), v25, v26, 1), v28, v29, 1);
    a3[12] = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v13, v15.f64[0]), v16, v18.f64[0]), v19, v21.f64[0]), v22, v24.f64[0]), v25, v27.f64[0]), v28, v30.f64[0]);
    a3[13] = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v14, v15.f64[0]), v17, v18.f64[0]), v20, v21.f64[0]), v23, v24.f64[0]), v26, v27.f64[0]), v29, v30.f64[0]);
    a3[14] = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v15, v15.f64[0]), v18, v18.f64[0]), v21, v21.f64[0]), v24, v24.f64[0]), v27, v27.f64[0]), v30, v30.f64[0]);
    a3[15] = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v13, v15, 1), v16, v18, 1), v19, v21, 1), v22, v24, 1), v25, v27, 1), v28, v30, 1);
    a3[16] = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v14, v15, 1), v17, v18, 1), v20, v21, 1), v23, v24, 1), v26, v27, 1), v29, v30, 1);
    a3[17] = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v15, v15, 1), v18, v18, 1), v21, v21, 1), v24, v24, 1), v27, v27, 1), v30, v30, 1);
  }
  return v4 == 0;
}

void sub_20FC84E90(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A6C100);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A6C100))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A6C0F8);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A6C100);
  }
  *a1 = qword_254A6C0F8;
}

void sub_20FC84F2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A6C100);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A6C100);
  _Unwind_Resume(a1);
}

void sub_20FC84F84(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8, float64x2_t a9)
{
  double v19;
  float64x2_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  uint64_t v31;
  uint64_t v34;
  uint64_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  unint64_t v39;
  float64x2_t v40;
  float64x2_t v41;
  double v42;
  double v43;
  double v44;
  uint64_t v45;
  float64x2_t v46;
  float64x2_t *v47;
  float64x2_t v48;
  float64x2_t *v49;
  float64x2_t v50;
  double v51;
  double v52;
  double v53;
  float64x2_t v54;
  float64_t v55;
  double v56;
  double v57;
  double v58;
  int8x16_t v59;
  unint64_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t i;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  int8x16_t v73;
  double v74;
  float64x2_t v75;
  float64x2_t v76;
  double v77;
  int8x16_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  double v82[9];
  float64_t v83;

  *(_OWORD *)(a6 + 256) = 0u;
  *(_OWORD *)(a6 + 272) = 0u;
  *(_OWORD *)(a6 + 224) = 0u;
  *(_OWORD *)(a6 + 240) = 0u;
  *(_OWORD *)(a6 + 192) = 0u;
  *(_OWORD *)(a6 + 208) = 0u;
  *(_OWORD *)(a6 + 160) = 0u;
  *(_OWORD *)(a6 + 176) = 0u;
  *(_OWORD *)(a6 + 128) = 0u;
  *(_OWORD *)(a6 + 144) = 0u;
  *(_OWORD *)(a6 + 96) = 0u;
  *(_OWORD *)(a6 + 112) = 0u;
  *(_OWORD *)(a6 + 64) = 0u;
  *(_OWORD *)(a6 + 80) = 0u;
  *(_OWORD *)(a6 + 32) = 0u;
  *(_OWORD *)(a6 + 48) = 0u;
  *(_OWORD *)a6 = 0u;
  *(_OWORD *)(a6 + 16) = 0u;
  a9.f64[0] = *(float64_t *)(a5 + 16);
  _Q1 = *(float64x2_t *)a5;
  _Q3 = vmulq_f64(_Q1, _Q1);
  _D4 = *(_QWORD *)(a5 + 8);
  __asm { FMLA            D3, D4, V1.D[1] }
  _Q3.f64[0] = sqrt(_Q3.f64[0] + a9.f64[0] * a9.f64[0]);
  if (_Q3.f64[0] >= 0.00000001)
  {
    _Q3.f64[0] = 1.0 / _Q3.f64[0];
    v19 = vmulq_f64(a9, _Q3).f64[0];
    *(_QWORD *)&_Q1.f64[1] = vextq_s8((int8x16_t)_Q1, (int8x16_t)_Q1, 8uLL).u64[0];
    v20 = vmulq_n_f64(_Q1, _Q3.f64[0]);
    v21 = *(double *)(a4 + 48);
    v22 = *(double *)(a4 + 56);
    v24 = *(double *)(a4 + 16);
    v23 = *(double *)(a4 + 24);
    v25 = *(double *)(a4 + 32);
    v26 = *(double *)(a4 + 40);
    v82[0] = vmuld_lane_f64(v21, v20, 1) - v23 * v19;
    v82[1] = vmuld_lane_f64(v22, v20, 1) - v25 * v19;
    v27 = *(double *)(a4 + 64);
    v28 = *(double *)a4;
    v29 = *(double *)(a4 + 8);
    v30 = *(double *)a4 * v19;
    v82[2] = vmuld_lane_f64(v27, v20, 1) - v26 * v19;
    v82[3] = v30 - v21 * v20.f64[0];
    v82[4] = v29 * v19 - v22 * v20.f64[0];
    v82[5] = v24 * v19 - v27 * v20.f64[0];
    v82[6] = v23 * v20.f64[0] - vmuld_lane_f64(v28, v20, 1);
    v82[7] = v25 * v20.f64[0] - vmuld_lane_f64(v29, v20, 1);
    v82[8] = v26 * v20.f64[0] - vmuld_lane_f64(v24, v20, 1);
    v31 = a1[1] - *a1;
    if (v31)
    {
      v34 = 0;
      v35 = 0;
      v36 = *(float64x2_t *)a4;
      v37 = *(float64x2_t *)(a4 + 24);
      v38 = *(float64x2_t *)(a4 + 48);
      v39 = v31 >> 4;
      *(_QWORD *)&v36.f64[1] = vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL).u64[0];
      v40.f64[0] = v20.f64[0];
      v40.f64[1] = *(double *)vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL).i64;
      *(_QWORD *)&v37.f64[1] = vextq_s8((int8x16_t)v37, (int8x16_t)v37, 8uLL).u64[0];
      *(_QWORD *)&v38.f64[1] = vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL).u64[0];
      v41 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v36, v20.f64[0]), v37, v40.f64[1]), v38, v19);
      v42 = *(double *)(a4 + 16) * v20.f64[0] + *(double *)(a4 + 40) * v40.f64[1] + *(double *)(a4 + 64) * v19;
      v43 = v42 * a7 * (v42 * a7);
      v44 = v19 * a7 * (v19 * a7);
      if (v39 <= 1)
        v45 = 1;
      else
        v45 = v39;
      v46.f64[0] = NAN;
      v46.f64[1] = NAN;
      v73 = (int8x16_t)vnegq_f64(v46);
      v74 = *(double *)(a4 + 16) * v20.f64[0] + *(double *)(a4 + 40) * v40.f64[1] + *(double *)(a4 + 64) * v19;
      v76 = v40;
      v77 = v19;
      v75 = v41;
      do
      {
        v47 = (float64x2_t *)(*a1 + v34);
        v48 = vsubq_f64(vmulq_n_f64(*v47, v42), v41);
        if (vaddvq_f64(vmulq_f64(v48, v48)) >= v43)
        {
          v49 = (float64x2_t *)(*a2 + v34);
          v50 = vsubq_f64(vmulq_n_f64(*v49, v19), v40);
          if (vaddvq_f64(vmulq_f64(v50, v50)) >= v44)
          {
            v51 = *(double *)(*a3 + v35);
            v52 = v51 * v51;
            if (v51 * v51 == 0.0)
              v53 = 1.0;
            else
              v53 = 1.0 / (v51 * v51);
            v83 = 0.0;
            v54 = sub_20EB86E08(&v83, &v79, (uint64_t)v82, a4, v47->f64, v49->f64);
            v54.f64[0] = v83;
            v78 = (int8x16_t)v54;
            v55 = v54.f64[0] * v54.f64[0];
            v56 = log1p(v53 * (v54.f64[0] * v54.f64[0]));
            v19 = v77;
            v57 = (v52 + v55) * sqrt(v56);
            _NF = v57 < 0.000001;
            v58 = *(double *)v78.i64 / v57;
            *(double *)v59.i64 = v51 / (v52 + v55);
            v60 = vbslq_s8(v73, v59, v78).u64[0];
            if (_NF)
              v58 = *(double *)&v60;
            v61 = vmulq_n_f64(v81, v58);
            v62 = vmulq_n_f64(v80, v58);
            v63 = vmulq_n_f64(v79, v58);
            v79 = v63;
            v80 = v62;
            v81 = v61;
            v64 = vaddq_f64(vmulq_n_f64(v62, v63.f64[0]), *(float64x2_t *)(a6 + 16));
            *(float64x2_t *)a6 = vaddq_f64(vmulq_n_f64(v63, v63.f64[0]), *(float64x2_t *)a6);
            *(float64x2_t *)(a6 + 16) = v64;
            *(float64x2_t *)(a6 + 32) = vaddq_f64(vmulq_n_f64(v61, v63.f64[0]), *(float64x2_t *)(a6 + 32));
            *(float64x2_t *)(a6 + 56) = vaddq_f64(vmulq_laneq_f64((float64x2_t)vextq_s8((int8x16_t)v63, (int8x16_t)v62, 8uLL), v63, 1), *(float64x2_t *)(a6 + 56));
            v65 = (float64x2_t)vextq_s8((int8x16_t)v62, (int8x16_t)v61, 8uLL);
            *(float64x2_t *)(a6 + 72) = vaddq_f64(vmulq_laneq_f64(v65, v63, 1), *(float64x2_t *)(a6 + 72));
            *(double *)(a6 + 88) = vmuld_lane_f64(v63.f64[1], v61, 1) + *(double *)(a6 + 88);
            v66 = vaddq_f64(vmulq_n_f64(v61, v62.f64[0]), *(float64x2_t *)(a6 + 128));
            *(float64x2_t *)(a6 + 112) = vaddq_f64(vmulq_n_f64(v62, v62.f64[0]), *(float64x2_t *)(a6 + 112));
            *(float64x2_t *)(a6 + 128) = v66;
            *(float64x2_t *)(a6 + 168) = vaddq_f64(vmulq_laneq_f64(v65, v62, 1), *(float64x2_t *)(a6 + 168));
            v40 = v76;
            *(double *)(a6 + 184) = vmuld_lane_f64(v62.f64[1], v61, 1) + *(double *)(a6 + 184);
            *(float64x2_t *)(a6 + 224) = vaddq_f64(vmulq_n_f64(v61, v61.f64[0]), *(float64x2_t *)(a6 + 224));
            v42 = v74;
            v41 = v75;
            *(double *)(a6 + 280) = vmuld_lane_f64(v61.f64[1], v61, 1) + *(double *)(a6 + 280);
          }
        }
        v35 += 8;
        v34 += 16;
        --v45;
      }
      while (v45);
    }
    v67 = a6 + 48;
    v68 = (uint64_t *)(a6 + 8);
    for (i = 1; i != 6; ++i)
    {
      v70 = 0;
      v71 = v68;
      do
      {
        v72 = *v71;
        v71 += 6;
        *(_QWORD *)(v67 + 8 * v70++) = v72;
      }
      while (i != v70);
      v67 += 48;
      ++v68;
    }
  }
}

BOOL sub_20FC85388(void *__src, float64x2_t *a2)
{
  int v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  double v32;
  float64x2_t v33;
  float64x2_t v34;
  double v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  double v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  int v44;
  _OWORD v45[18];

  v44 = 2;
  memcpy(v45, __src, sizeof(v45));
  sub_20F215978((uint64_t)&v44);
  v3 = v44;
  if (!v44)
  {
    v32 = *(double *)v45;
    v34 = (float64x2_t)v45[6];
    v35 = *(double *)&v45[7];
    v36 = (float64x2_t)v45[9];
    v37 = (float64x2_t)v45[10];
    v38 = (float64x2_t)v45[12];
    v39 = (float64x2_t)v45[13];
    v40 = *(double *)&v45[14];
    v41 = (float64x2_t)v45[15];
    v42 = (float64x2_t)v45[16];
    v33 = (float64x2_t)v45[3];
    v43 = (float64x2_t)v45[17];
    sub_20E8BE990();
    v4 = v33;
    v5 = v34;
    v7 = v36;
    v6 = v37;
    v9 = v38;
    v8 = v39;
    v10 = v41;
    v11 = v42;
    v12 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v32, v32), v4, v4.f64[0]), v5, v5.f64[0]), v7, v7.f64[0]), v9, v9.f64[0]), v10, v10.f64[0]);
    v13 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)0, v32), (float64x2_t)0, v33.f64[0]);
    v14 = vmulq_f64((float64x2_t)*(unint64_t *)&v32, (float64x2_t)0);
    v15 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v14, v4, v4, 1), v5, v5, 1), v7, v7, 1), v9, v9, 1), v10, v10, 1);
    v16 = vmlaq_laneq_f64((float64x2_t)0, (float64x2_t)0, v33, 1);
    v17 = vmlaq_f64(v14, (float64x2_t)0, v33);
    v18 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v17, v34, v35), v36, v37.f64[0]), v38, v39.f64[0]), v41, v42.f64[0]);
    v19 = vmlaq_f64((float64x2_t)0, (float64x2_t)0, (float64x2_t)0);
    v20 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v19, (float64x2_t)*(unint64_t *)&v35, v35), v6, v6.f64[0]), v8, v8.f64[0]), v11, v11.f64[0]);
    v21 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v19, (float64x2_t)0, v35), (float64x2_t)0, v37.f64[0]), (float64x2_t)*(unint64_t *)&v40, v39.f64[0]), v43, v42.f64[0]);
    v22 = vmlaq_f64(v17, (float64x2_t)0, v34);
    v23 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v22, v36, v37, 1), v38, v39, 1), v41, v42, 1);
    v24 = vmlaq_f64(v19, (float64x2_t)0, (float64x2_t)*(unint64_t *)&v35);
    v25 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v24, v6, v6, 1), v8, v8, 1), v11, v11, 1);
    v26 = vmlaq_f64(v19, (float64x2_t)0, (float64x2_t)0);
    v27 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v26, (float64x2_t)0, v37, 1), (float64x2_t)*(unint64_t *)&v40, v39, 1), v43, v42, 1);
    v28 = vmlaq_f64(v22, (float64x2_t)0, v36);
    v29 = vmlaq_f64(v24, (float64x2_t)0, v37);
    v30 = vmlaq_f64(v26, (float64x2_t)0, (float64x2_t)0);
    *a2 = v12;
    a2[1] = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v13, (float64x2_t)*(unint64_t *)&v35, v34.f64[0]), v37, v36.f64[0]), v39, v38.f64[0]), v42, v41.f64[0]);
    a2[4] = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v16, (float64x2_t)*(unint64_t *)&v35, v34, 1), v37, v36, 1), v39, v38, 1), v42, v41, 1);
    a2[5] = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v16, (float64x2_t)0, v34, 1), (float64x2_t)0, v36, 1), (float64x2_t)*(unint64_t *)&v40, v38, 1), v43, v41, 1);
    a2[2] = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v13, (float64x2_t)0, v34.f64[0]), (float64x2_t)0, v36.f64[0]), (float64x2_t)*(unint64_t *)&v40, v38.f64[0]), v43, v41.f64[0]);
    a2[3] = v15;
    a2[6] = v18;
    a2[7] = v20;
    a2[10] = v25;
    a2[11] = v27;
    a2[8] = v21;
    a2[9] = v23;
    a2[12] = vmlaq_n_f64(vmlaq_n_f64(v28, v38, v40), v41, v43.f64[0]);
    a2[13] = vmlaq_n_f64(vmlaq_n_f64(v29, v39, v40), v42, v43.f64[0]);
    a2[16] = vmlaq_laneq_f64(vmlaq_f64(v29, (float64x2_t)0, v39), v42, v43, 1);
    a2[17] = vmlaq_laneq_f64(vmlaq_f64(v30, (float64x2_t)0, (float64x2_t)*(unint64_t *)&v40), v43, v43, 1);
    a2[14] = vmlaq_n_f64(vmlaq_n_f64(v30, (float64x2_t)*(unint64_t *)&v40, v40), v43, v43.f64[0]);
    a2[15] = vmlaq_laneq_f64(vmlaq_f64(v28, (float64x2_t)0, v38), v41, v43, 1);
  }
  return v3 == 0;
}

__n128 sub_20FC8564C(uint64_t a1)
{
  const void *v1;
  const void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  float64x2_t v8;
  double v9;
  int8x16_t v12;
  int8x16_t v13;
  double v14;
  float64x2_t v16;
  double v23;
  int64x2_t v24;
  uint64_t v25;
  int64x2_t v26;
  int8x16_t v27;
  int64x2_t v28;
  int8x16_t v29;
  int8x16_t v30;
  float64x2_t v32;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  double v37;
  float64x2_t v38;
  float64x2_t v41;
  unint64_t v42;
  float64x2_t v43;
  float64x2_t v44;
  int64x2_t v45;
  int8x16_t v46;
  int8x16_t v47;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  unint64_t v53;
  unint64_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  int8x16_t v59;
  int64x2_t v60;
  float64x2_t v61;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  int8x16_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  int8x16_t v70;
  int64x2_t v71;
  float64x2_t v72;
  int8x16_t v73;
  float64x2_t v74;
  int64x2_t v75;
  int64x2_t v76;
  int64x2_t v77;
  int64x2_t v78;
  int v79;
  int v80;
  float64x2_t v81;
  float64x2_t v82;
  unint64_t v83;
  float64x2_t v84;
  float64x2_t v85;
  unint64_t v86;
  float64x2_t v87;
  float64x2_t v88;
  unint64_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  unint64_t v94;
  int8x16_t v95;
  double v96;
  int8x16_t v97;
  double v98;
  int8x16_t v99;
  double v100;
  int8x16_t v101;
  double v102;
  int8x16_t v103;
  double v104;
  int8x16_t v105;
  double v106;
  int8x16_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  double v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  double v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  double v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  double v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  double v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  int8x16_t v191;
  float64x2_t v192;
  int8x16_t v193;
  unint64_t v194;
  int8x16_t v195;
  int8x16_t v196;
  int8x16_t v197;
  int8x16_t v198;
  int8x16_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  unint64_t v203;
  int8x16_t v204;
  int8x16_t v205;
  int8x16_t v206;
  unint64_t v207;
  int8x16_t v208;
  int8x16_t v209;
  unint64_t v210;
  int8x16_t v211;
  int8x16_t v212;
  unint64_t v213;
  unint64_t v214;
  int8x16_t v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  unint64_t v219;
  float64x2_t v220;
  unint64_t v221;
  float64x2_t v222;
  unint64_t v223;
  float64x2_t v224;
  unint64_t v225;
  unint64_t v226;
  float64x2_t v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v234;
  float64x2_t v235;
  float64x2_t v236;
  int8x16_t v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  __int128 v241;
  __int128 v242;
  __n128 result;
  void *v244;
  double v245;
  double v246;
  double v247;
  double v248;
  double v249;
  double v250;
  double v251;
  int8x16_t v252;
  int8x16_t v253;
  int8x16_t v254;
  int8x16_t v255;
  int8x16_t v256;
  int8x16_t v257;
  float64x2_t v258;
  float64x2_t v259;
  float64x2_t v260;
  float64x2_t v261;
  float64x2_t v262;
  double v263;
  double v264;
  double v265;
  double v266;
  double v267;
  double v268;
  double v269;
  double v270;
  double v271;
  double v272;
  int8x16_t v273;
  double v274;
  double v275;
  double v276;
  double v277;
  double v278;
  double v279;
  int8x16_t v280;
  double v281;
  double v282;
  double v283;
  double v284;
  int8x16_t v285;
  double v286;
  double v287;
  double v288;
  double v289;
  double v290;
  int8x16_t v291;
  double v292;
  double v293;
  int8x16_t v294;
  double v295;
  double v296;
  double v297;
  double v298;
  double v299;
  double v300;
  double v301;
  double v302;
  double v303;
  double v304;
  double v305;
  double v306;
  int8x16_t v307;
  double v308;
  double v309;
  int8x16_t v310;
  double v311;
  double v312;
  double v313;
  double v314;
  int8x16_t v315;
  int8x16_t v316;
  int8x16_t v317;
  int8x16_t v318;
  int8x16_t v319;
  int8x16_t v320;
  double v321;
  double v322;
  double v323;
  double v324;
  double v325;
  int8x16_t v326;
  int8x16_t v327;
  int8x16_t v328;
  int8x16_t v329;
  int8x16_t v330;
  int8x16_t v331;
  int8x16_t v332;
  int8x16_t v333;
  int8x16_t v334;
  int8x16_t v335;
  int8x16_t v336;
  int8x16_t v337;
  int8x16_t v338;
  int8x16_t v339;
  int8x16_t v340;
  int8x16_t v341;
  int8x16_t v342;
  int8x16_t v343;
  int8x16_t v344;
  int8x16_t v345;
  int8x16_t v346;
  int8x16_t v347;
  int8x16_t v348;
  int8x16_t v349;
  int8x16_t v350;
  int8x16_t v351;
  int8x16_t v352;
  int8x16_t v353;
  int8x16_t v354;
  int8x16_t v355;
  int8x16_t v356;
  int8x16_t v357;
  int8x16_t v358;
  int8x16_t v359;
  int8x16_t v360;
  int8x16_t v361;
  int8x16_t v362;
  float64x2_t v363;
  double v364;
  float64x2_t v365;
  float64x2_t v366;
  double v367;
  float64x2_t v368;
  double v369;
  float64x2_t v370;
  float64x2_t v371;
  float64x2_t v372;
  float64x2_t v373;
  float64x2_t v374;
  int8x16_t v375;
  float64x2_t v376;
  double v377;
  float64x2_t v378;
  float64x2_t v379;
  int8x16_t v380;
  float64x2_t v381;
  float64x2_t v382;
  double v383;
  float64x2_t v384;
  float64x2_t v385;
  int8x16_t v386;
  float64x2_t v387;
  double v388;
  float64x2_t v389;
  double v390;
  float64x2_t v391;
  int8x16_t v392;
  float64x2_t v393;
  double v394;
  double v395;
  double v396;
  int8x16_t v397;
  int8x16_t v398;
  int64x2_t v399;
  double v400;
  double v401;
  int8x16_t v402;
  double v403;
  float64x2_t v404;
  int8x16_t v405;
  int8x16_t v406;
  int8x16_t v407;
  double v408;
  float64x2_t v409;
  float64x2_t v410;
  int8x16_t v411;
  float64x2_t v412;
  float64x2_t v413;
  double v414;
  float64x2_t v415;
  float64x2_t v416;
  float64x2_t v417;
  int8x16_t v418;
  float64x2_t v419;
  float64x2_t v420;
  float64x2_t v421;
  float64_t v422;
  float64x2_t v423;
  float64x2_t v424;
  float64x2_t v425;
  float64x2_t v426;
  float64x2_t v427;
  float64x2_t v428;
  float64x2_t v429;
  int8x16_t v430;
  int8x16_t v431;
  double v432;
  float64x2_t v433;
  float64x2_t v434;
  int8x16_t v435;
  int8x16_t v436;
  float64x2_t v437;
  int8x16_t v438;
  float64x2_t v439;
  float64x2_t v440;
  float64x2_t v441;
  float64x2_t v442;
  float64x2_t v443;
  float64x2_t v444;
  double v445;
  float64x2_t v446;
  float64x2_t v447;
  float64x2_t v448;
  double v449;
  float64x2_t v450;
  float64x2_t v451;
  int8x16_t v452;
  float64x2_t v453;
  float64x2_t v454;
  float64x2_t v455;
  int8x16_t v456;
  float64x2_t v457;
  float64x2_t v458;
  float64x2_t v459;
  double v460;
  float64x2_t v461;
  float64x2_t v462;
  float64x2_t v463;
  int8x16_t v464;
  float64x2_t v465;
  float64x2_t v466;
  int8x16_t v467;
  float64x2_t v468;
  float64x2_t v469;
  float64x2_t v470;
  unint64_t v471;
  float64x2_t v472;
  float64x2_t v473;
  float64x2_t v474;
  float64_t v475;
  float64x2_t v476;
  float64x2_t v477;
  float64x2_t v478;
  float64_t v479;
  float64x2_t v480;
  float64x2_t v481;
  float64x2_t v482;
  float64x2_t v483;
  float64x2_t v484;
  unint64_t v485;
  float64x2_t v486;
  float64x2_t v487;
  float64_t v488;
  float64x2_t v489;
  float64x2_t v490;
  float64x2_t v491;
  unint64_t v492;
  float64x2_t v493;
  float64x2_t v494;
  float64x2_t v495;
  unint64_t v496;
  unint64_t v497;
  float64x2_t v498;
  float64x2_t v499;
  float64x2_t v500;
  unint64_t v501;
  unint64_t v502;
  float64x2_t v503;
  float64x2_t v504;
  int8x16_t v505;
  float64x2_t v506;
  float64x2_t v507;
  unint64_t v508;
  float64x2_t v509;
  float64x2_t v510;
  float64x2_t v511;
  float64x2_t v512;
  int8x16_t v513;
  float64x2_t v514;
  int8x16_t v515;
  float64x2_t v516;
  float64_t v517;
  float64x2_t v518;
  float64x2_t v519;
  float64x2_t v520;
  int8x16_t v521;
  _BYTE __dst[1152];
  float64x2_t v523;
  float64x2_t v524;
  float64x2_t v525;
  float64x2_t v526;
  float64x2_t v527;
  float64x2_t v528;
  float64x2_t v529;
  float64x2_t v530;
  float64x2_t v531;
  float64x2_t v532;
  float64x2_t v533;
  float64x2_t v534;
  float64x2_t v535;
  float64x2_t v536;
  float64x2_t v537;
  float64x2_t v538;
  float64x2_t v539;
  float64x2_t v540;
  float64x2_t v541;
  float64x2_t v542;
  float64x2_t v543;
  float64x2_t v544;
  float64x2_t v545;
  float64x2_t v546;
  float64x2_t v547;
  float64x2_t v548;
  float64x2_t v549;
  float64x2_t v550;
  float64x2_t v551;
  float64x2_t v552;
  float64x2_t v553;
  float64x2_t v554;
  float64x2_t v555;
  float64x2_t v556;
  float64x2_t v557;
  float64x2_t v558;
  int v559;
  int v560;
  double v561;
  _OWORD v562[72];

  MEMORY[0x24BDAC7A8](a1);
  v2 = v1;
  v4 = v3;
  v6 = *(double *)(v5 + 16);
  _D6 = *(double *)(v5 + 40);
  v8 = *(float64x2_t *)(v5 + 24);
  v9 = *(double *)(v5 + 64);
  _Q5 = *(float64x2_t *)(v5 + 48);
  _Q0 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v5, (int64x2_t)v8);
  v12 = (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q0, 1);
  v13 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&_Q0.f64[0], 0);
  v14 = *(double *)(v5 + 88);
  _Q26 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v5, (int64x2_t)v8);
  v16.f64[0] = v6;
  v16.f64[1] = _D6;
  _Q24 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q26, *(double *)(v5 + 72)), _Q0, *(float64x2_t *)(v5 + 72), 1), v16, v14);
  _D18 = *(_QWORD *)(v5 + 80);
  __asm { FMLA            D0, D18, V5.D[1] }
  v23 = _Q0.f64[0] + v9 * v14;
  v24 = (int64x2_t)vextq_s8(v13, v12, 8uLL);
  v26.i64[0] = *(_QWORD *)(v25 + 16);
  v27 = *(int8x16_t *)v25;
  v28.i64[0] = *(_QWORD *)(v25 + 40);
  v29 = *(int8x16_t *)(v25 + 24);
  v30.i64[0] = *(_QWORD *)(v25 + 64);
  _Q13 = *(int8x16_t *)(v25 + 48);
  v32 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v25, (int64x2_t)v29);
  _Q18 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v25, (int64x2_t)v29);
  v34 = (float64x2_t)vzip1q_s64(v26, v28);
  v35 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&_Q18.f64[0], 0);
  v36 = (float64x2_t)vextq_s8((int8x16_t)_Q18, (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q13, 1), 8uLL);
  v37 = *(double *)(v25 + 88);
  v38 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v32, *(double *)(v25 + 72)), _Q18, *(float64x2_t *)(v25 + 72), 1), v34, v37);
  _D21 = *(_QWORD *)(v25 + 80);
  __asm { FMLA            D22, D21, V13.D[1] }
  v41.f64[0] = _D22 + *(double *)v30.i64 * v37;
  *(_QWORD *)&v41.f64[0] = *(_OWORD *)&vnegq_f64(v41);
  v42 = *(_QWORD *)(v25 + 48);
  _Q18.f64[1] = v36.f64[0];
  v41.f64[1] = 1.0;
  v43 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)_Q26, v24), _Q24.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)_Q26, v24), _Q24, 1), _Q5, v23);
  __asm { FMLA            D26, D6, V24.D[1] }
  _Q24.f64[0] = _Q26.f64[0] + v9 * v23;
  v44 = vmlsq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v32, *(double *)v5), _Q18, *(float64x2_t *)v5, 1), v34, v6), (float64x2_t)0, v38);
  v45 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v42, *(double *)v5), (float64x2_t)*(unint64_t *)&v36.f64[1], *(float64x2_t *)v5, 1), (float64x2_t)v30.u64[0], v6), (float64x2_t)0, v41);
  v46 = (int8x16_t)vmlsq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v32, v8.f64[0]), _Q18, v8, 1), v34, _D6), (float64x2_t)0, v38);
  v47 = (int8x16_t)vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v42, v8.f64[0]), (float64x2_t)*(unint64_t *)&v36.f64[1], v8, 1), (float64x2_t)v30.u64[0], _D6), (float64x2_t)0, v41);
  _Q26 = vmlsq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v32, _Q5.f64[0]), _Q18, _Q5, 1), v34, v9), (float64x2_t)0, v38);
  v49 = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v42, _Q5.f64[0]), (float64x2_t)*(unint64_t *)&v36.f64[1], _Q5, 1), (float64x2_t)v30.u64[0], v9), (float64x2_t)0, v41);
  v50 = vsubq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v32, v43.f64[0]), _Q18, v43, 1), v34, _Q24.f64[0]), v38);
  v51 = vaddq_f64(v41, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v42, v43.f64[0]), (float64x2_t)*(unint64_t *)&v36.f64[1], v43, 1), (float64x2_t)v30.u64[0], _Q24.f64[0]));
  *(float64x2_t *)(v3 + 120) = v51;
  *(float64x2_t *)(v3 + 104) = v50;
  *(_QWORD *)&v52.f64[0] = *(_QWORD *)&v50.f64[0] ^ 0x8000000000000000;
  v53 = *(_QWORD *)&v51.f64[0] ^ 0x8000000000000000;
  v54 = *(_QWORD *)&v50.f64[1] ^ 0x8000000000000000;
  v55 = (float64x2_t)vzip1q_s64((int64x2_t)v44, (int64x2_t)v46);
  v56 = (float64x2_t)vzip2q_s64((int64x2_t)v44, (int64x2_t)v46);
  v57 = vmlaq_f64(vmlaq_f64(vmulq_f64(v55, (float64x2_t)vdupq_n_s64(*(_QWORD *)&v50.f64[0] ^ 0x8000000000000000)), (float64x2_t)vdupq_n_s64(*(_QWORD *)&v50.f64[1] ^ 0x8000000000000000), v56), (float64x2_t)vdupq_n_s64(v53), (float64x2_t)vzip1q_s64(v45, (int64x2_t)v47));
  v58 = vnegq_f64(v44);
  v59 = (int8x16_t)vnegq_f64(_Q26);
  v60 = (int64x2_t)vnegq_f64(v49);
  v61 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v58.f64[0], 0);
  *(_QWORD *)&v61.f64[0] = v60.i64[0];
  _Q16 = vmulq_f64(_Q26, v52);
  *(_QWORD *)&_Q18.f64[0] = v54;
  __asm { FMLA            D16, D18, V26.D[1] }
  _Q16.f64[0] = vmlad_n_f64(_Q16.f64[0], *(double *)&v53, v49.f64[0]);
  v63 = vnegq_f64((float64x2_t)vextq_s8(v46, v47, 8uLL));
  v64 = vnegq_f64((float64x2_t)vzip1q_s64(v45, (int64x2_t)v46));
  v65 = (float64x2_t)vextq_s8((int8x16_t)v64, (int8x16_t)v63, 8uLL);
  v66 = (int8x16_t)vmlaq_n_f64(vmulq_laneq_f64(_Q26, v57, 1), v65, _Q16.f64[0]);
  v91 = (float64x2_t)vdupq_lane_s64(v66.i64[0], 0);
  *(_QWORD *)&v91.f64[0] = v45.i64[0];
  v524 = (float64x2_t)*(unint64_t *)&_Q26.f64[0];
  v523 = v55;
  v67 = (float64x2_t)vextq_s8((int8x16_t)v63, v59, 8uLL);
  v68 = (float64x2_t)vzip1q_s64(vdupq_laneq_s64((int64x2_t)v59, 1), v60);
  v69 = (float64x2_t)vextq_s8((int8x16_t)v58, (int8x16_t)v64, 8uLL);
  v70 = (int8x16_t)vmlsq_lane_f64(vmulq_n_f64((float64x2_t)vextq_s8((int8x16_t)v67, (int8x16_t)v68, 8uLL), v57.f64[0]), (float64x2_t)vextq_s8((int8x16_t)v61, (int8x16_t)v69, 8uLL), _Q16.f64[0], 0);
  v530 = (float64x2_t)*(unint64_t *)&_Q26.f64[1];
  v71 = vdupq_lane_s64(v70.i64[0], 0);
  v71.i64[0] = v47.i64[0];
  v529 = v56;
  v517 = *(double *)v45.i64;
  v510 = (float64x2_t)v71;
  v536 = (float64x2_t)*(unint64_t *)&v49.f64[0];
  v535 = (float64x2_t)vzip1q_s64((int64x2_t)v91, v71);
  v72 = vnegq_f64((float64x2_t)vdupq_lane_s64(*(uint64_t *)&v32.f64[0], 0));
  v405 = (int8x16_t)v72;
  v72.f64[0] = 0.0;
  v407 = (int8x16_t)vnegq_f64(v35);
  v406 = (int8x16_t)vnegq_f64((float64x2_t)vdupq_lane_s64(*(uint64_t *)&v34.f64[0], 0));
  v546 = (float64x2_t)vzip2q_s64((int64x2_t)v407, (int64x2_t)v406);
  v545 = v72;
  v401 = *(double *)v26.i64;
  v543 = (float64x2_t)vextq_s8(v27, (int8x16_t)v26, 8uLL);
  v73 = (int8x16_t)vmlsq_lane_f64(vmulq_laneq_f64(v58, v57, 1), v65, v57.f64[0], 0);
  v430 = v27;
  v542 = (float64x2_t)vzip1q_s64((int64x2_t)v73, (int64x2_t)v27);
  v541 = (float64x2_t)vzip1q_s64((int64x2_t)v66, (int64x2_t)v70);
  v74 = vnegq_f64((float64x2_t)vextq_s8((int8x16_t)v32, _Q13, 8uLL));
  v32.f64[0] = 0.0;
  v32.f64[1] = v74.f64[0];
  v75 = (int64x2_t)vnegq_f64(v36);
  v76 = (int64x2_t)vnegq_f64((float64x2_t)vextq_s8((int8x16_t)v34, v30, 8uLL));
  v552 = (float64x2_t)vzip1q_s64(v75, v76);
  v551 = v32;
  v432 = *(double *)v28.i64;
  v549 = (float64x2_t)vextq_s8(v29, (int8x16_t)v28, 8uLL);
  v397 = (int8x16_t)vmlsq_laneq_f64(vmulq_f64(v67, _Q16), v61, v57, 1);
  v438 = v66;
  v77 = (int64x2_t)vextq_s8(v66, v397, 8uLL);
  v398 = (int8x16_t)vmlsq_laneq_f64(vmulq_laneq_f64(v57, v68, 1), _Q16, v69, 1);
  v436 = v70;
  v78 = (int64x2_t)vextq_s8(v70, v398, 8uLL);
  v402 = v73;
  v548 = (float64x2_t)vextq_s8(v73, v29, 8uLL);
  v431 = (int8x16_t)v74;
  v35.f64[1] = v74.f64[1];
  v35.f64[0] = 0.0;
  v547 = (float64x2_t)vzip1q_s64(v77, v78);
  v515 = (int8x16_t)v75;
  v435 = (int8x16_t)v76;
  v558 = (float64x2_t)vzip2q_s64(v75, v76);
  v557 = v35;
  v400 = *(double *)v30.i64;
  v555 = (float64x2_t)vextq_s8(_Q13, v30, 8uLL);
  v544 = 0u;
  v550 = 0u;
  v556 = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *(_BYTE *)(v4 + 496) = 0;
  *(_BYTE *)(v4 + 504) = 0;
  *(_BYTE *)(v4 + 3152) = 0;
  *(_OWORD *)(v4 + 152) = 0u;
  *(_OWORD *)(v4 + 168) = 0u;
  *(_OWORD *)(v4 + 184) = 0u;
  *(_OWORD *)(v4 + 200) = 0u;
  *(_OWORD *)(v4 + 216) = 0u;
  *(_OWORD *)(v4 + 232) = 0u;
  *(_OWORD *)(v4 + 248) = 0u;
  *(_BYTE *)(v4 + 424) = 0;
  *(_OWORD *)(v4 + 264) = 0u;
  *(_OWORD *)(v4 + 280) = 0u;
  *(_OWORD *)(v4 + 296) = 0u;
  *(_OWORD *)(v4 + 312) = 0u;
  *(_OWORD *)(v4 + 328) = 0u;
  *(_OWORD *)(v4 + 344) = 0u;
  *(_OWORD *)(v4 + 360) = 0u;
  *(_OWORD *)(v4 + 376) = 0u;
  *(_OWORD *)(v4 + 392) = 0u;
  *(_OWORD *)(v4 + 408) = 0u;
  *(_DWORD *)v4 = v79;
  *(_DWORD *)(v4 + 4) = v80;
  v442 = v44;
  *(float64x2_t *)(v4 + 8) = v44;
  v369 = *(double *)v45.i64;
  *(int64x2_t *)(v4 + 24) = v45;
  v372 = (float64x2_t)v46;
  *(int8x16_t *)(v4 + 40) = v46;
  v367 = *(double *)v47.i64;
  *(int8x16_t *)(v4 + 56) = v47;
  v363 = _Q26;
  *(float64x2_t *)(v4 + 72) = _Q26;
  v403 = v49.f64[0];
  *(float64x2_t *)(v4 + 88) = v49;
  v399 = (int64x2_t)vmlsq_laneq_f64(vmulq_laneq_f64(v64, v57, 1), v57, v63, 1);
  v554 = (float64x2_t)vzip1q_s64(v399, (int64x2_t)_Q13);
  v553 = (float64x2_t)vzip2q_s64(v77, v78);
  v528 = 0u;
  v527 = 0u;
  v526 = (float64x2_t)xmmword_21030D340;
  v525 = 0u;
  v534 = 0u;
  v533 = 0u;
  v532 = (float64x2_t)xmmword_21030D330;
  v531 = 0u;
  v540 = 0u;
  v539 = (float64x2_t)xmmword_21030D340;
  v538 = 0u;
  v537 = 0u;
  memcpy(__dst, v1, sizeof(__dst));
  v559 = 0;
  sub_20E8BEE30();
  *(_QWORD *)&v81.f64[0] = v438.i64[1];
  v82 = v91;
  v83 = vextq_s8((int8x16_t)v82, (int8x16_t)v82, 8uLL).u64[0];
  *(_QWORD *)&v84.f64[0] = v436.i64[1];
  v85 = v510;
  v86 = vextq_s8((int8x16_t)v85, (int8x16_t)v85, 8uLL).u64[0];
  *(_QWORD *)&v87.f64[0] = v402.i64[1];
  v88 = (float64x2_t)vdupq_lane_s64(v402.i64[0], 0);
  v88.f64[0] = v49.f64[0];
  v89 = vextq_s8((int8x16_t)v88, (int8x16_t)v88, 8uLL).u64[0];
  *(_QWORD *)&v91.f64[0] = v29.i64[1];
  *(_QWORD *)&v90.f64[0] = v29.i64[0];
  v92.f64[0] = 0.0;
  *(_QWORD *)&v92.f64[1] = v405.i64[1];
  v497 = vextq_s8((int8x16_t)v92, (int8x16_t)v92, 8uLL).u64[0];
  v93.f64[0] = 0.0;
  *(_QWORD *)&v93.f64[1] = v407.i64[1];
  v94 = vextq_s8((int8x16_t)v93, (int8x16_t)v93, 8uLL).u64[0];
  v95.i64[0] = 0;
  v95.i64[1] = v406.i64[1];
  *(_QWORD *)&v396 = vextq_s8(v435, v435, 8uLL).u64[0];
  *(_QWORD *)&v395 = vextq_s8(v515, v515, 8uLL).u64[0];
  *(_QWORD *)&v394 = vextq_s8(v431, v431, 8uLL).u64[0];
  v502 = vextq_s8(v95, v95, 8uLL).u64[0];
  if (!v559)
  {
    *(_QWORD *)&v227.f64[0] = v431.i64[0];
    *(_QWORD *)&v81.f64[1] = v397.i64[0];
    *(_QWORD *)&v82.f64[1] = v83;
    *(_QWORD *)&v84.f64[1] = v398.i64[0];
    *(_QWORD *)&v85.f64[1] = v86;
    *(_QWORD *)&v87.f64[1] = v399.i64[0];
    v428 = v87;
    *(_QWORD *)&v88.f64[1] = v89;
    *(_QWORD *)&v90.f64[1] = _Q13.i64[0];
    v509 = v90;
    v228.f64[0] = 0.0;
    v201 = vmlaq_laneq_f64(vmulq_n_f64(v82, v535.f64[0]), v85, v535, 1);
    v229.f64[0] = 0.0;
    *(_QWORD *)&v229.f64[1] = v27.i64[0];
    *(_QWORD *)&v91.f64[1] = _Q13.i64[1];
    v230.f64[0] = 0.0;
    *(_QWORD *)&v230.f64[1] = v27.i64[1];
    v514 = v230;
    v230.f64[0] = v432;
    v230.f64[1] = v400;
    v231 = vmlaq_laneq_f64(vmulq_n_f64(v82, v541.f64[0]), v85, v541, 1);
    v228.f64[1] = v401;
    *(_QWORD *)&v232.f64[0] = v435.i64[0];
    v227.f64[1] = v394;
    *(_QWORD *)&v92.f64[1] = v497;
    v233 = vmlaq_laneq_f64(vmulq_n_f64(v82, v547.f64[0]), v85, v547, 1);
    v234 = vmlaq_laneq_f64(vmulq_n_f64(v82, v553.f64[0]), v85, v553, 1);
    *(_QWORD *)&v235.f64[0] = v515.i64[0];
    v235.f64[1] = v395;
    v516 = v235;
    *(_QWORD *)&v93.f64[1] = v94;
    v232.f64[1] = v396;
    v236.f64[0] = 0.0;
    *(_QWORD *)&v236.f64[1] = v502;
    v417 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v82, v523.f64[0]), v85, v523, 1), v88, v524.f64[0]), v229, v524, 1), v514, v525.f64[0]), v228, v525, 1), (float64x2_t)0, v526.f64[0]),
                     (float64x2_t)0,
                     v526,
                     1),
                   (float64x2_t)xmmword_21030D340,
                   v527.f64[0]),
                 v92,
                 v527,
                 1),
               v93,
               v528.f64[0]),
             v236,
             v528,
             1);
    v421 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v81, v523.f64[0]), v84, v523, 1), v428, v524.f64[0]), v509, v524, 1), v91, v525.f64[0]), v230, v525,
                         1),
                       (float64x2_t)0,
                       v526.f64[0]),
                     (float64x2_t)0,
                     v526,
                     1),
                   (float64x2_t)0,
                   v527.f64[0]),
                 v227,
                 v527,
                 1),
               v235,
               v528.f64[0]),
             v232,
             v528,
             1);
    v521 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v82, v529.f64[0]), v85, v529, 1), v88, v530.f64[0]), v229, v530, 1), v514, v531.f64[0]), v228, v531,
                                    1),
                                  (float64x2_t)0,
                                  v532.f64[0]),
                                (float64x2_t)0,
                                v532,
                                1),
                              (float64x2_t)xmmword_21030D340,
                              v533.f64[0]),
                            v92,
                            v533,
                            1),
                          v93,
                          v534.f64[0]),
                        v236,
                        v534,
                        1);
    v237 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v81, v529.f64[0]), v84, v529, 1), v428, v530.f64[0]), v509, v530, 1), v91, v531.f64[0]), v230, v531,
                                    1),
                                  (float64x2_t)0,
                                  v532.f64[0]),
                                (float64x2_t)0,
                                v532,
                                1),
                              (float64x2_t)0,
                              v533.f64[0]),
                            v227,
                            v533,
                            1),
                          v235,
                          v534.f64[0]),
                        v232,
                        v534,
                        1);
    v197 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v81, v535.f64[0]), v84, v535, 1), v428, v536.f64[0]), v509, v536, 1), v91, v537.f64[0]), v230, v537,
                                    1),
                                  (float64x2_t)0,
                                  v538.f64[0]),
                                (float64x2_t)0,
                                v538,
                                1),
                              (float64x2_t)0,
                              v539.f64[0]),
                            v227,
                            v539,
                            1),
                          v235,
                          v540.f64[0]),
                        v232,
                        v540,
                        1);
    v238 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v81, v541.f64[0]), v84, v541, 1), v428, v542.f64[0]), v509, v542, 1), v91, v543.f64[0]), v230, v543, 1), (float64x2_t)0, v544.f64[0]), (float64x2_t)0, v544,
                 1),
               (float64x2_t)0,
               v545.f64[0]),
             v227,
             v545,
             1);
    v239 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v81, v547.f64[0]), v84, v547, 1), v428, v548.f64[0]), v509, v548, 1), v91, v549.f64[0]), v230, v549, 1), (float64x2_t)0, v550.f64[0]), (float64x2_t)0, v550, 1);
    v196 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v233, v88, v548.f64[0]), v229, v548, 1), v514, v549.f64[0]), v228, v549, 1), (float64x2_t)0, v550.f64[0]), (float64x2_t)0, v550, 1), (float64x2_t)xmmword_21030D340,
                              v551.f64[0]),
                            v92,
                            v551,
                            1),
                          v93,
                          v552.f64[0]),
                        v236,
                        v552,
                        1);
    v200 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v234, v88, v554.f64[0]), v229, v554, 1), v514, v555.f64[0]), v228, v555, 1), (float64x2_t)0, v556.f64[0]), (float64x2_t)0, v556, 1), (float64x2_t)xmmword_21030D340,
                   v557.f64[0]),
                 v92,
                 v557,
                 1),
               v93,
               v558.f64[0]),
             v236,
             v558,
             1);
    v240 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v81, v553.f64[0]), v84, v553, 1), v428, v554.f64[0]), v509, v554, 1), v91, v555.f64[0]), v230, v555, 1);
    v226 = vextq_s8((int8x16_t)v200, (int8x16_t)v200, 8uLL).u64[0];
    v492 = vextq_s8(v196, v196, 8uLL).u64[0];
    v199 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v231, v88, v542.f64[0]), v229, v542, 1), v514, v543.f64[0]), v228, v543, 1), (float64x2_t)0, v544.f64[0]), (float64x2_t)0, v544, 1), (float64x2_t)xmmword_21030D340,
                              v545.f64[0]),
                            v92,
                            v545,
                            1),
                          v93,
                          v546.f64[0]),
                        v236,
                        v546,
                        1);
    v508 = vextq_s8(v199, v199, 8uLL).u64[0];
    v513 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v201, v88, v536.f64[0]), v229, v536, 1), v514, v537.f64[0]), v228, v537, 1), (float64x2_t)0, v538.f64[0]), (float64x2_t)0, v538, 1), (float64x2_t)xmmword_21030D340,
                              v539.f64[0]),
                            v92,
                            v539,
                            1),
                          v93,
                          v540.f64[0]),
                        v236,
                        v540,
                        1);
    v501 = vextq_s8(v513, v513, 8uLL).u64[0];
    v207 = vextq_s8(v521, v521, 8uLL).u64[0];
    v212 = (int8x16_t)v417;
    v213 = vextq_s8(v212, v212, 8uLL).u64[0];
    v191 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v240, (float64x2_t)0, v556.f64[0]), (float64x2_t)0, v556, 1), (float64x2_t)0, v557.f64[0]), v227, v557, 1), v516, v558.f64[0]), v232, v558, 1);
    v214 = vextq_s8(v191, v191, 8uLL).u64[0];
    v198 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(v238, v516, v546.f64[0]), v232, v546, 1);
    v195 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v239, (float64x2_t)0, v551.f64[0]), v227, v551, 1), v516, v552.f64[0]), v232, v552, 1);
    v505 = vextq_s8(v195, v195, 8uLL);
    v208 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v442, v541.f64[0]), v372, v541, 1), v363, v542.f64[0]), (float64x2_t)0, v542, 1), (float64x2_t)0, v543.f64[0]), (float64x2_t)0, v543,
                                    1),
                                  (float64x2_t)xmmword_21030D340,
                                  v544.f64[0]),
                                (float64x2_t)xmmword_21030D330,
                                v544,
                                1),
                              (float64x2_t)0,
                              v545.f64[0]),
                            (float64x2_t)0,
                            v545,
                            1),
                          (float64x2_t)0,
                          v546.f64[0]),
                        (float64x2_t)0,
                        v546,
                        1);
    v496 = vextq_s8(v198, v198, 8uLL).u64[0];
    v216 = vextq_s8(v197, v197, 8uLL).u64[0];
    v211 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v442, v547.f64[0]), v372, v547, 1), v363, v548.f64[0]), (float64x2_t)0, v548, 1), (float64x2_t)0, v549.f64[0]), (float64x2_t)0, v549,
                                    1),
                                  (float64x2_t)xmmword_21030D340,
                                  v550.f64[0]),
                                (float64x2_t)xmmword_21030D330,
                                v550,
                                1),
                              (float64x2_t)0,
                              v551.f64[0]),
                            (float64x2_t)0,
                            v551,
                            1),
                          (float64x2_t)0,
                          v552.f64[0]),
                        (float64x2_t)0,
                        v552,
                        1);
    *(_QWORD *)&v201.f64[0] = v237.i64[0];
    v203 = vextq_s8(v237, v237, 8uLL).u64[0];
    v209 = (int8x16_t)v421;
    v210 = vextq_s8(v209, v209, 8uLL).u64[0];
    v215 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v442, v553.f64[0]), v372, v553, 1), v363, v554.f64[0]), (float64x2_t)0, v554, 1), (float64x2_t)0, v555.f64[0]), (float64x2_t)0, v555,
                                    1),
                                  (float64x2_t)xmmword_21030D340,
                                  v556.f64[0]),
                                (float64x2_t)xmmword_21030D330,
                                v556,
                                1),
                              (float64x2_t)0,
                              v557.f64[0]),
                            (float64x2_t)0,
                            v557,
                            1),
                          (float64x2_t)0,
                          v558.f64[0]),
                        (float64x2_t)0,
                        v558,
                        1);
    v220 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v442, v535.f64[0]), v372, v535, 1), v363, v536.f64[0]), (float64x2_t)0, v536, 1), (float64x2_t)0, v537.f64[0]), (float64x2_t)0, v537,
                         1),
                       (float64x2_t)xmmword_21030D340,
                       v538.f64[0]),
                     (float64x2_t)xmmword_21030D330,
                     v538,
                     1),
                   (float64x2_t)0,
                   v539.f64[0]),
                 (float64x2_t)0,
                 v539,
                 1),
               (float64x2_t)0,
               v540.f64[0]),
             (float64x2_t)0,
             v540,
             1);
    v221 = vextq_s8((int8x16_t)v220, (int8x16_t)v220, 8uLL).u64[0];
    v222 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v442, v529.f64[0]), v372, v529, 1), v363, v530.f64[0]), (float64x2_t)0, v530, 1), (float64x2_t)0, v531.f64[0]), (float64x2_t)0, v531,
                         1),
                       (float64x2_t)xmmword_21030D340,
                       v532.f64[0]),
                     (float64x2_t)xmmword_21030D330,
                     v532,
                     1),
                   (float64x2_t)0,
                   v533.f64[0]),
                 (float64x2_t)0,
                 v533,
                 1),
               (float64x2_t)0,
               v534.f64[0]),
             (float64x2_t)0,
             v534,
             1);
    v223 = vextq_s8((int8x16_t)v222, (int8x16_t)v222, 8uLL).u64[0];
    v224 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v442, v523.f64[0]), v372, v523, 1), v363, v524.f64[0]), (float64x2_t)0, v524, 1), (float64x2_t)0, v525.f64[0]), (float64x2_t)0, v525,
                         1),
                       (float64x2_t)xmmword_21030D340,
                       v526.f64[0]),
                     (float64x2_t)xmmword_21030D330,
                     v526,
                     1),
                   (float64x2_t)0,
                   v527.f64[0]),
                 (float64x2_t)0,
                 v527,
                 1),
               (float64x2_t)0,
               v528.f64[0]),
             (float64x2_t)0,
             v528,
             1);
    v225 = vextq_s8((int8x16_t)v224, (int8x16_t)v224, 8uLL).u64[0];
    v217 = vextq_s8(v215, v215, 8uLL).u64[0];
    v218 = vextq_s8(v211, v211, 8uLL).u64[0];
    v219 = vextq_s8(v208, v208, 8uLL).u64[0];
    goto LABEL_9;
  }
  v471 = v89;
  v475 = *(double *)&v86;
  v479 = *(double *)&v83;
  v485 = v94;
  v488 = *(double *)&v27.i64[1];
  v422 = v49.f64[0];
  memcpy(v562, v2, sizeof(v562));
  v561 = 0.0;
  v560 = 0;
  sub_20E8BED80();
  if (v560)
    goto LABEL_6;
  v96 = v561;
  sub_20E8BEDB0();
  if (v560 > 0)
    goto LABEL_6;
  if ((int)v96 > 0x300)
  {
    v244 = operator new((8 * (int)v96 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
    sub_20E8BED80();
    MEMORY[0x212BC6368](v244, 0x1000C8000313F17);
    if (v560 > 0)
      goto LABEL_6;
LABEL_11:
    v347 = (int8x16_t)v562[71];
    v348 = (int8x16_t)v562[70];
    *(_QWORD *)&v263 = vextq_s8(v347, v347, 8uLL).u64[0];
    *(_QWORD *)&v264 = vextq_s8(v348, v348, 8uLL).u64[0];
    v350 = (int8x16_t)v562[69];
    *(_QWORD *)&v266 = vextq_s8(v350, v350, 8uLL).u64[0];
    v349 = (int8x16_t)v562[68];
    *(_QWORD *)&v265 = vextq_s8(v349, v349, 8uLL).u64[0];
    v280 = (int8x16_t)v562[67];
    *(_QWORD *)&v267 = vextq_s8(v280, v280, 8uLL).u64[0];
    v418 = (int8x16_t)v562[66];
    *(_QWORD *)&v414 = vextq_s8(v418, v418, 8uLL).u64[0];
    v351 = (int8x16_t)v562[65];
    v352 = (int8x16_t)v562[64];
    *(_QWORD *)&v268 = vextq_s8(v351, v351, 8uLL).u64[0];
    *(_QWORD *)&v269 = vextq_s8(v352, v352, 8uLL).u64[0];
    v353 = (int8x16_t)v562[63];
    v354 = (int8x16_t)v562[62];
    *(_QWORD *)&v270 = vextq_s8(v353, v353, 8uLL).u64[0];
    *(_QWORD *)&v271 = vextq_s8(v354, v354, 8uLL).u64[0];
    v294 = (int8x16_t)v562[61];
    *(_QWORD *)&v272 = vextq_s8(v294, v294, 8uLL).u64[0];
    v456 = (int8x16_t)v562[60];
    *(_QWORD *)&v449 = vextq_s8(v456, v456, 8uLL).u64[0];
    v355 = (int8x16_t)v562[59];
    v356 = (int8x16_t)v562[58];
    *(_QWORD *)&v274 = vextq_s8(v355, v355, 8uLL).u64[0];
    *(_QWORD *)&v275 = vextq_s8(v356, v356, 8uLL).u64[0];
    v357 = (int8x16_t)v562[57];
    v358 = (int8x16_t)v562[56];
    *(_QWORD *)&v276 = vextq_s8(v357, v357, 8uLL).u64[0];
    *(_QWORD *)&v277 = vextq_s8(v358, v358, 8uLL).u64[0];
    v316 = (int8x16_t)v562[55];
    v467 = (int8x16_t)v562[54];
    *(_QWORD *)&v460 = vextq_s8(v467, v467, 8uLL).u64[0];
    v359 = (int8x16_t)v562[53];
    *(_QWORD *)&v278 = vextq_s8(v316, v316, 8uLL).u64[0];
    *(_QWORD *)&v279 = vextq_s8(v359, v359, 8uLL).u64[0];
    v360 = (int8x16_t)v562[52];
    v361 = (int8x16_t)v562[51];
    *(_QWORD *)&v281 = vextq_s8(v360, v360, 8uLL).u64[0];
    *(_QWORD *)&v282 = vextq_s8(v361, v361, 8uLL).u64[0];
    v362 = (int8x16_t)v562[50];
    v336 = (int8x16_t)v562[49];
    *(_QWORD *)&v283 = vextq_s8(v362, v362, 8uLL).u64[0];
    *(_QWORD *)&v284 = vextq_s8(v336, v336, 8uLL).u64[0];
    v464 = (int8x16_t)v562[48];
    *(_QWORD *)&v445 = vextq_s8(v464, v464, 8uLL).u64[0];
    v327 = (int8x16_t)v562[47];
    v329 = (int8x16_t)v562[46];
    *(_QWORD *)&v286 = vextq_s8(v327, v327, 8uLL).u64[0];
    *(_QWORD *)&v287 = vextq_s8(v329, v329, 8uLL).u64[0];
    v326 = (int8x16_t)v562[45];
    v328 = (int8x16_t)v562[44];
    *(_QWORD *)&v288 = vextq_s8(v326, v326, 8uLL).u64[0];
    *(_QWORD *)&v289 = vextq_s8(v328, v328, 8uLL).u64[0];
    v273 = (int8x16_t)v562[43];
    *(_QWORD *)&v290 = vextq_s8(v273, v273, 8uLL).u64[0];
    v411 = (int8x16_t)v562[42];
    *(_QWORD *)&v408 = vextq_s8(v411, v411, 8uLL).u64[0];
    v331 = (int8x16_t)v562[41];
    v333 = (int8x16_t)v562[40];
    *(_QWORD *)&v292 = vextq_s8(v331, v331, 8uLL).u64[0];
    *(_QWORD *)&v293 = vextq_s8(v333, v333, 8uLL).u64[0];
    v330 = (int8x16_t)v562[39];
    *(_QWORD *)&v295 = vextq_s8(v330, v330, 8uLL).u64[0];
    v332 = (int8x16_t)v562[38];
    *(_QWORD *)&v296 = vextq_s8(v332, v332, 8uLL).u64[0];
    v285 = (int8x16_t)v562[37];
    *(_QWORD *)&v297 = vextq_s8(v285, v285, 8uLL).u64[0];
    v452 = (int8x16_t)v562[36];
    *(_QWORD *)&v388 = vextq_s8(v452, v452, 8uLL).u64[0];
    v335 = (int8x16_t)v562[35];
    *(_QWORD *)&v303 = vextq_s8(v335, v335, 8uLL).u64[0];
    v339 = (int8x16_t)v562[34];
    *(_QWORD *)&v304 = vextq_s8(v339, v339, 8uLL).u64[0];
    v334 = (int8x16_t)v562[33];
    v338 = (int8x16_t)v562[32];
    *(_QWORD *)&v305 = vextq_s8(v334, v334, 8uLL).u64[0];
    *(_QWORD *)&v306 = vextq_s8(v338, v338, 8uLL).u64[0];
    v291 = (int8x16_t)v562[31];
    *(_QWORD *)&v308 = vextq_s8(v291, v291, 8uLL).u64[0];
    v386 = (int8x16_t)v562[30];
    *(_QWORD *)&v383 = vextq_s8(v386, v386, 8uLL).u64[0];
    v343 = (int8x16_t)v562[29];
    *(_QWORD *)&v309 = vextq_s8(v343, v343, 8uLL).u64[0];
    v346 = (int8x16_t)v562[28];
    *(_QWORD *)&v311 = vextq_s8(v346, v346, 8uLL).u64[0];
    v340 = (int8x16_t)v562[27];
    *(_QWORD *)&v314 = vextq_s8(v340, v340, 8uLL).u64[0];
    v344 = (int8x16_t)v562[26];
    *(_QWORD *)&v313 = vextq_s8(v344, v344, 8uLL).u64[0];
    v307 = (int8x16_t)v562[25];
    *(_QWORD *)&v312 = vextq_s8(v307, v307, 8uLL).u64[0];
    v380 = (int8x16_t)v562[24];
    *(_QWORD *)&v377 = vextq_s8(v380, v380, 8uLL).u64[0];
    v342 = (int8x16_t)v562[23];
    *(_QWORD *)&v325 = vextq_s8(v342, v342, 8uLL).u64[0];
    v345 = (int8x16_t)v562[22];
    *(_QWORD *)&v324 = vextq_s8(v345, v345, 8uLL).u64[0];
    v337 = (int8x16_t)v562[21];
    *(_QWORD *)&v323 = vextq_s8(v337, v337, 8uLL).u64[0];
    v341 = (int8x16_t)v562[20];
    *(_QWORD *)&v322 = vextq_s8(v341, v341, 8uLL).u64[0];
    v317 = (int8x16_t)v562[19];
    *(_QWORD *)&v321 = vextq_s8(v317, v317, 8uLL).u64[0];
    v392 = (int8x16_t)v562[18];
    *(_QWORD *)&v390 = vextq_s8(v392, v392, 8uLL).u64[0];
    v319 = (int8x16_t)v562[17];
    v320 = (int8x16_t)v562[16];
    *(_QWORD *)&v301 = vextq_s8(v320, v320, 8uLL).u64[0];
    *(_QWORD *)&v302 = vextq_s8(v319, v319, 8uLL).u64[0];
    v315 = (int8x16_t)v562[15];
    v318 = (int8x16_t)v562[14];
    *(_QWORD *)&v299 = vextq_s8(v318, v318, 8uLL).u64[0];
    *(_QWORD *)&v300 = vextq_s8(v315, v315, 8uLL).u64[0];
    v310 = (int8x16_t)v562[13];
    *(_QWORD *)&v298 = vextq_s8(v310, v310, 8uLL).u64[0];
    v375 = (int8x16_t)v562[12];
    *(_QWORD *)&v364 = vextq_s8(v375, v375, 8uLL).u64[0];
    v256 = (int8x16_t)v562[10];
    v257 = (int8x16_t)v562[11];
    *(_QWORD *)&v251 = vextq_s8(v257, v257, 8uLL).u64[0];
    *(_QWORD *)&v250 = vextq_s8(v256, v256, 8uLL).u64[0];
    v254 = (int8x16_t)v562[8];
    v255 = (int8x16_t)v562[9];
    *(_QWORD *)&v249 = vextq_s8(v255, v255, 8uLL).u64[0];
    v252 = (int8x16_t)v562[6];
    v253 = (int8x16_t)v562[7];
    *(_QWORD *)&v247 = vextq_s8(v253, v253, 8uLL).u64[0];
    *(_QWORD *)&v248 = vextq_s8(v254, v254, 8uLL).u64[0];
    v107 = (int8x16_t)v562[5];
    v105 = (int8x16_t)v562[4];
    *(_QWORD *)&v245 = vextq_s8(v107, v107, 8uLL).u64[0];
    *(_QWORD *)&v246 = vextq_s8(v252, v252, 8uLL).u64[0];
    *(_QWORD *)&v106 = vextq_s8(v105, v105, 8uLL).u64[0];
    v103 = (int8x16_t)v562[3];
    v101 = (int8x16_t)v562[2];
    *(_QWORD *)&v104 = vextq_s8(v103, v103, 8uLL).u64[0];
    *(_QWORD *)&v102 = vextq_s8(v101, v101, 8uLL).u64[0];
    v99 = (int8x16_t)v562[1];
    v97 = (int8x16_t)v562[0];
    *(_QWORD *)&v100 = vextq_s8(v99, v99, 8uLL).u64[0];
    *(_QWORD *)&v98 = vextq_s8(v97, v97, 8uLL).u64[0];
    goto LABEL_7;
  }
  sub_20E8BED80();
  if (v560 <= 0)
    goto LABEL_11;
LABEL_6:
  v97.i64[0] = 0;
  v98 = 0.0;
  v99.i64[0] = 0;
  v100 = 0.0;
  v101.i64[0] = 0;
  v102 = 0.0;
  v103.i64[0] = 0;
  v104 = 0.0;
  v105.i64[0] = 0;
  v106 = 0.0;
  v107.i64[0] = 0;
  v245 = 0.0;
  v252.i64[0] = 0;
  v246 = 0.0;
  v253.i64[0] = 0;
  v247 = 0.0;
  v254.i64[0] = 0;
  v248 = 0.0;
  v255.i64[0] = 0;
  v249 = 0.0;
  v256.i64[0] = 0;
  v250 = 0.0;
  v257.i64[0] = 0;
  v251 = 0.0;
  v375.i64[0] = 0;
  v364 = 0.0;
  v310.i64[0] = 0;
  v298 = 0.0;
  v318.i64[0] = 0;
  v299 = 0.0;
  v315.i64[0] = 0;
  v300 = 0.0;
  v320.i64[0] = 0;
  v301 = 0.0;
  v319.i64[0] = 0;
  v302 = 0.0;
  v392.i64[0] = 0;
  v390 = 0.0;
  v317.i64[0] = 0;
  v321 = 0.0;
  v341.i64[0] = 0;
  v322 = 0.0;
  v337.i64[0] = 0;
  v323 = 0.0;
  v345.i64[0] = 0;
  v324 = 0.0;
  v342.i64[0] = 0;
  v325 = 0.0;
  v380.i64[0] = 0;
  v377 = 0.0;
  v307.i64[0] = 0;
  v312 = 0.0;
  v344.i64[0] = 0;
  v313 = 0.0;
  v340.i64[0] = 0;
  v314 = 0.0;
  v346.i64[0] = 0;
  v311 = 0.0;
  v343.i64[0] = 0;
  v309 = 0.0;
  v386.i64[0] = 0;
  v383 = 0.0;
  v291.i64[0] = 0;
  v308 = 0.0;
  v338.i64[0] = 0;
  v306 = 0.0;
  v334.i64[0] = 0;
  v305 = 0.0;
  v339.i64[0] = 0;
  v304 = 0.0;
  v335.i64[0] = 0;
  v303 = 0.0;
  v452.i64[0] = 0;
  v388 = 0.0;
  v285.i64[0] = 0;
  v297 = 0.0;
  v332.i64[0] = 0;
  v296 = 0.0;
  v330.i64[0] = 0;
  v295 = 0.0;
  v333.i64[0] = 0;
  v293 = 0.0;
  v331.i64[0] = 0;
  v292 = 0.0;
  v411.i64[0] = 0;
  v408 = 0.0;
  v273.i64[0] = 0;
  v290 = 0.0;
  v328.i64[0] = 0;
  v289 = 0.0;
  v326.i64[0] = 0;
  v288 = 0.0;
  v329.i64[0] = 0;
  v287 = 0.0;
  v327.i64[0] = 0;
  v286 = 0.0;
  v464.i64[0] = 0;
  v445 = 0.0;
  v336.i64[0] = 0;
  v284 = 0.0;
  v362.i64[0] = 0;
  v283 = 0.0;
  v361.i64[0] = 0;
  v282 = 0.0;
  v360.i64[0] = 0;
  v281 = 0.0;
  v359.i64[0] = 0;
  v279 = 0.0;
  v467.i64[0] = 0;
  v460 = 0.0;
  v316.i64[0] = 0;
  v278 = 0.0;
  v358.i64[0] = 0;
  v277 = 0.0;
  v357.i64[0] = 0;
  v276 = 0.0;
  v356.i64[0] = 0;
  v275 = 0.0;
  v355.i64[0] = 0;
  v274 = 0.0;
  v456.i64[0] = 0;
  v449 = 0.0;
  v294.i64[0] = 0;
  v272 = 0.0;
  v354.i64[0] = 0;
  v271 = 0.0;
  v353.i64[0] = 0;
  v270 = 0.0;
  v352.i64[0] = 0;
  v269 = 0.0;
  v351.i64[0] = 0;
  v268 = 0.0;
  v418.i64[0] = 0;
  v414 = 0.0;
  v280.i64[0] = 0;
  v267 = 0.0;
  v349.i64[0] = 0;
  v265 = 0.0;
  v350.i64[0] = 0;
  v266 = 0.0;
  v348.i64[0] = 0;
  v264 = 0.0;
  v347.i64[0] = 0;
  v263 = 0.0;
LABEL_7:
  v108.f64[0] = v517;
  v108.f64[1] = v479;
  v109.f64[0] = v510.f64[0];
  v109.f64[1] = v475;
  v110.f64[0] = v422;
  *(_QWORD *)&v110.f64[1] = v471;
  *(_QWORD *)&v111.f64[0] = v29.i64[1];
  *(_QWORD *)&v111.f64[1] = _Q13.i64[1];
  v112.f64[0] = 0.0;
  *(_QWORD *)&v112.f64[1] = v497;
  v113 = v112;
  v112.f64[0] = 0.0;
  *(_QWORD *)&v112.f64[1] = v485;
  v114 = v112;
  v115.f64[0] = 0.0;
  *(_QWORD *)&v115.f64[1] = v502;
  *(_QWORD *)&v112.f64[0] = v438.i64[1];
  *(_QWORD *)&v112.f64[1] = v397.i64[0];
  *(_QWORD *)&v116.f64[0] = v436.i64[1];
  *(_QWORD *)&v116.f64[1] = v398.i64[0];
  *(_QWORD *)&v117.f64[0] = v402.i64[1];
  *(_QWORD *)&v117.f64[1] = v399.i64[0];
  v118.f64[0] = 0.0;
  v118.f64[1] = v401;
  v119 = vmlaq_n_f64(vmulq_n_f64(v108, *(double *)v97.i64), v109, v98);
  v423 = v110;
  v425 = v117;
  v120.f64[0] = 0.0;
  *(_QWORD *)&v120.f64[1] = v27.i64[0];
  *(_QWORD *)&v121.f64[0] = v29.i64[0];
  *(_QWORD *)&v121.f64[1] = _Q13.i64[0];
  v262 = v120;
  v122.f64[0] = 0.0;
  v122.f64[1] = v488;
  v434 = v111;
  v123 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v112, *(double *)v97.i64), v116, v98), v117, *(double *)v99.i64), v121, v100), v111, *(double *)v101.i64);
  v124 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v442, *(double *)v97.i64), v372, v98), v363, *(double *)v99.i64), (float64x2_t)0, v100), (float64x2_t)0, *(double *)v101.i64), (float64x2_t)0, v102);
  v260 = v118;
  v125 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v119, v110, *(double *)v99.i64), v120, v100), v122, *(double *)v101.i64), v118, v102);
  v119.f64[0] = v432;
  v119.f64[1] = v400;
  v126 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v125, (float64x2_t)0, *(double *)v103.i64), (float64x2_t)0, v104), (float64x2_t)xmmword_21030D340, *(double *)v105.i64);
  v127 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v123, v119, v102), (float64x2_t)0, *(double *)v103.i64), (float64x2_t)0, v104), (float64x2_t)0, *(double *)v105.i64);
  v128 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v124, (float64x2_t)xmmword_21030D340, *(double *)v103.i64), (float64x2_t)xmmword_21030D330, v104), (float64x2_t)0, *(double *)v105.i64), (float64x2_t)0, v106);
  *(_QWORD *)&v129.f64[0] = v431.i64[0];
  v129.f64[1] = v394;
  v130 = vmlaq_n_f64(v126, v113, v106);
  v131 = vmlaq_n_f64(v127, v129, v106);
  *(_QWORD *)&v132.f64[0] = v515.i64[0];
  v132.f64[1] = v395;
  v433 = v114;
  v258 = v132;
  v259 = v129;
  v133 = vmlaq_n_f64(vmlaq_n_f64(v128, (float64x2_t)0, *(double *)v107.i64), (float64x2_t)0, v245);
  *(_QWORD *)&v134.f64[0] = v435.i64[0];
  v134.f64[1] = v396;
  v429 = v115;
  v135 = vmlaq_n_f64(vmlaq_n_f64(v130, v114, *(double *)v107.i64), v115, v245);
  v136 = vmlaq_n_f64(vmlaq_n_f64(v131, v132, *(double *)v107.i64), v134, v245);
  v261 = v134;
  v137 = v113;
  v138 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v108, *(double *)v252.i64), v109, v246), v110, *(double *)v253.i64), v120, v247), v122, *(double *)v254.i64), v118, v248), (float64x2_t)0, *(double *)v255.i64),
                 (float64x2_t)0,
                 v249),
               (float64x2_t)xmmword_21030D340,
               *(double *)v256.i64),
             v113,
             v250),
           v114,
           *(double *)v257.i64);
  v139 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v442, *(double *)v252.i64), v372, v246), v363, *(double *)v253.i64), (float64x2_t)0, v247), (float64x2_t)0, *(double *)v254.i64), (float64x2_t)0, v248), (float64x2_t)xmmword_21030D340,
                     *(double *)v255.i64),
                   (float64x2_t)xmmword_21030D330,
                   v249),
                 (float64x2_t)0,
                 *(double *)v256.i64),
               (float64x2_t)0,
               v250),
             (float64x2_t)0,
             *(double *)v257.i64),
           (float64x2_t)0,
           v251);
  v140 = vmlaq_n_f64(v138, v115, v251);
  v141 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v112, *(double *)v252.i64), v116, v246), v117, *(double *)v253.i64), v121, v247), v111, *(double *)v254.i64), v119, v248), (float64x2_t)0,
                     *(double *)v255.i64),
                   (float64x2_t)0,
                   v249),
                 (float64x2_t)0,
                 *(double *)v256.i64),
               v129,
               v250),
             v132,
             *(double *)v257.i64),
           v134,
           v251);
  v142 = vmlaq_n_f64(vmulq_n_f64(v442, *(double *)v375.i64), v372, v364);
  v143 = vmlaq_n_f64(vmulq_n_f64(v108, *(double *)v375.i64), v109, v364);
  v144 = vmlaq_n_f64(vmulq_n_f64(v112, *(double *)v375.i64), v116, v364);
  v145 = vmlaq_n_f64(vmulq_n_f64(v442, *(double *)v392.i64), v372, v390);
  v146 = vmlaq_n_f64(vmulq_n_f64(v108, *(double *)v392.i64), v109, v390);
  v147 = vmlaq_n_f64(vmulq_n_f64(v112, *(double *)v392.i64), v116, v390);
  v393 = vmlaq_n_f64(vmulq_n_f64(v442, *(double *)v380.i64), v372, v377);
  v148 = vmlaq_n_f64(vmulq_n_f64(v108, *(double *)v380.i64), v109, v377);
  v498 = vmlaq_n_f64(vmulq_n_f64(v112, *(double *)v380.i64), v116, v377);
  v503 = vmlaq_n_f64(vmulq_n_f64(v442, *(double *)v386.i64), v372, v383);
  v493 = vmlaq_n_f64(vmulq_n_f64(v108, *(double *)v386.i64), v109, v383);
  v489 = vmlaq_n_f64(vmulq_n_f64(v112, *(double *)v386.i64), v116, v383);
  v486 = vmlaq_n_f64(vmulq_n_f64(v442, *(double *)v452.i64), v372, v388);
  v472 = vmlaq_n_f64(vmulq_n_f64(v108, *(double *)v452.i64), v109, v388);
  v482 = vmlaq_n_f64(vmulq_n_f64(v112, *(double *)v452.i64), v116, v388);
  v480 = vmlaq_n_f64(vmulq_n_f64(v442, *(double *)v411.i64), v372, v408);
  v453 = vmlaq_n_f64(vmulq_n_f64(v108, *(double *)v411.i64), v109, v408);
  v476 = vmlaq_n_f64(vmulq_n_f64(v112, *(double *)v411.i64), v116, v408);
  v389 = vmlaq_n_f64(vmulq_n_f64(v442, *(double *)v464.i64), v372, v445);
  v381 = vmlaq_n_f64(vmulq_n_f64(v108, *(double *)v464.i64), v109, v445);
  v378 = vmlaq_n_f64(vmulq_n_f64(v112, *(double *)v464.i64), v116, v445);
  v387 = vmlaq_n_f64(vmulq_n_f64(v442, *(double *)v467.i64), v372, v460);
  v384 = vmlaq_n_f64(vmulq_n_f64(v108, *(double *)v467.i64), v109, v460);
  v468 = vmlaq_n_f64(vmulq_n_f64(v112, *(double *)v467.i64), v116, v460);
  v465 = vmlaq_n_f64(vmulq_n_f64(v442, *(double *)v456.i64), v372, v449);
  v461 = vmlaq_n_f64(vmulq_n_f64(v108, *(double *)v456.i64), v109, v449);
  v457 = vmlaq_n_f64(vmulq_n_f64(v112, *(double *)v456.i64), v116, v449);
  v446 = vmlaq_n_f64(vmulq_n_f64(v108, *(double *)v418.i64), v109, v414);
  v149 = vmlaq_n_f64(vmulq_n_f64(v112, *(double *)v418.i64), v116, v414);
  v376 = vmlaq_n_f64(vmulq_n_f64(v442, *(double *)v418.i64), v372, v414);
  v507 = vmlaq_n_f64(vmulq_n_f64(v133, v442.f64[0]), v139, v372.f64[0]);
  v415 = vmlaq_n_f64(vmulq_n_f64(v135, v442.f64[0]), v140, v372.f64[0]);
  v419 = vmlaq_n_f64(vmulq_n_f64(v136, v442.f64[0]), v141, v372.f64[0]);
  v506 = vmlaq_laneq_f64(vmulq_laneq_f64(v133, v442, 1), v139, v372, 1);
  v518 = vmlaq_laneq_f64(vmulq_laneq_f64(v135, v442, 1), v140, v372, 1);
  v409 = vmlaq_laneq_f64(vmulq_laneq_f64(v136, v442, 1), v141, v372, 1);
  v412 = vmlaq_n_f64(vmulq_n_f64(v133, v369), v139, v367);
  v511 = vmlaq_n_f64(vmulq_n_f64(v135, v369), v140, v367);
  v373 = vmlaq_n_f64(vmulq_n_f64(v136, v369), v141, v367);
  v443 = vmlaq_n_f64(vmulq_n_f64(v133, *(double *)v438.i64), v139, *(double *)v436.i64);
  v370 = vmlaq_n_f64(vmulq_n_f64(v135, *(double *)v438.i64), v140, *(double *)v436.i64);
  *(_QWORD *)&v116.f64[0] = vextq_s8(v438, v438, 8uLL).u64[0];
  v368 = vmlaq_n_f64(vmulq_n_f64(v136, *(double *)v438.i64), v141, *(double *)v436.i64);
  *(_QWORD *)&v150 = vextq_s8(v436, v436, 8uLL).u64[0];
  v439 = vmlaq_n_f64(vmulq_n_f64(v133, v116.f64[0]), v139, v150);
  v365 = vmlaq_n_f64(vmulq_n_f64(v135, v116.f64[0]), v140, v150);
  v151 = vmlaq_n_f64(vmulq_n_f64(v136, v116.f64[0]), v141, v150);
  v152 = vmlaq_n_f64(vmulq_n_f64(v133, *(double *)v397.i64), v139, *(double *)v398.i64);
  v153 = vmlaq_n_f64(vmulq_n_f64(v136, *(double *)v397.i64), v141, *(double *)v398.i64);
  v154 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v142, v363, *(double *)v310.i64), (float64x2_t)0, v298), (float64x2_t)0, *(double *)v318.i64), (float64x2_t)0, v299), (float64x2_t)xmmword_21030D340, *(double *)v315.i64), (float64x2_t)xmmword_21030D330, v300), (float64x2_t)0, *(double *)v320.i64), (float64x2_t)0,
               v301),
             (float64x2_t)0,
             *(double *)v319.i64),
           (float64x2_t)0,
           v302);
  v155 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v143, v423, *(double *)v310.i64), v262, v298), v122, *(double *)v318.i64), v260, v299), (float64x2_t)0, *(double *)v315.i64), (float64x2_t)0, v300), (float64x2_t)xmmword_21030D340, *(double *)v320.i64), v137,
               v301),
             v433,
             *(double *)v319.i64),
           v429,
           v302);
  v156 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v144, v425, *(double *)v310.i64), v121, v298), v434, *(double *)v318.i64), v119, v299), (float64x2_t)0, *(double *)v315.i64), (float64x2_t)0, v300), (float64x2_t)0, *(double *)v320.i64), v259,
               v301),
             v132,
             *(double *)v319.i64),
           v261,
           v302);
  v157 = vmlaq_n_f64(v146, v423, *(double *)v317.i64);
  v158 = vmlaq_n_f64(v147, v425, *(double *)v317.i64);
  v391 = vmlaq_n_f64(v148, v423, *(double *)v307.i64);
  v499 = vmlaq_n_f64(v498, v425, *(double *)v307.i64);
  v494 = vmlaq_n_f64(v493, v423, *(double *)v291.i64);
  v490 = vmlaq_n_f64(v489, v425, *(double *)v291.i64);
  v473 = vmlaq_n_f64(v472, v423, *(double *)v285.i64);
  v483 = vmlaq_n_f64(v482, v425, *(double *)v285.i64);
  v454 = vmlaq_n_f64(v453, v423, *(double *)v273.i64);
  v477 = vmlaq_n_f64(v476, v425, *(double *)v273.i64);
  v159 = vmlaq_n_f64(v381, v423, *(double *)v336.i64);
  v160 = vmlaq_n_f64(v378, v425, *(double *)v336.i64);
  v385 = vmlaq_n_f64(v384, v423, *(double *)v316.i64);
  v469 = vmlaq_n_f64(v468, v425, *(double *)v316.i64);
  v462 = vmlaq_n_f64(v461, v423, *(double *)v294.i64);
  v458 = vmlaq_n_f64(v457, v425, *(double *)v294.i64);
  v447 = vmlaq_n_f64(v446, v423, *(double *)v280.i64);
  v450 = vmlaq_n_f64(v149, v425, *(double *)v280.i64);
  v416 = vmlaq_n_f64(v415, v155, v363.f64[0]);
  v420 = vmlaq_n_f64(v419, v156, v363.f64[0]);
  v519 = vmlaq_laneq_f64(v518, v155, v363, 1);
  v410 = vmlaq_laneq_f64(v409, v156, v363, 1);
  v413 = vmlaq_n_f64(v412, v154, v403);
  v512 = vmlaq_n_f64(v511, v155, v403);
  v374 = vmlaq_n_f64(v373, v156, v403);
  v371 = vmlaq_n_f64(v370, v155, *(double *)v402.i64);
  *(_QWORD *)&v161 = vextq_s8(v402, v402, 8uLL).u64[0];
  v440 = vmlaq_n_f64(v439, v154, v161);
  v366 = vmlaq_n_f64(v365, v155, v161);
  v426 = vmlaq_n_f64(v151, v156, v161);
  v162 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v135, *(double *)v397.i64), v140, *(double *)v398.i64), v155, *(double *)v399.i64);
  v404 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v157, v262, v321), v122, *(double *)v341.i64), v260, v322), (float64x2_t)0, *(double *)v337.i64), (float64x2_t)0, v323), (float64x2_t)xmmword_21030D340, *(double *)v345.i64), v137, v324), v433, *(double *)v342.i64), v429, v325);
  v424 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v158, v121, v321), v434, *(double *)v341.i64), v119, v322), (float64x2_t)0, *(double *)v337.i64), (float64x2_t)0, v323), (float64x2_t)0, *(double *)v345.i64), v259, v324), v132, *(double *)v342.i64), v261, v325);
  v163 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v393, v363, *(double *)v307.i64), (float64x2_t)0, v312), (float64x2_t)0, *(double *)v344.i64), (float64x2_t)0, v313), (float64x2_t)xmmword_21030D340, *(double *)v340.i64), (float64x2_t)xmmword_21030D330, v314), (float64x2_t)0, *(double *)v346.i64), (float64x2_t)0,
               v311),
             (float64x2_t)0,
             *(double *)v343.i64),
           (float64x2_t)0,
           v309);
  v164 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v391, v262, v312), v122, *(double *)v344.i64), v260, v313), (float64x2_t)0, *(double *)v340.i64), (float64x2_t)0, v314), (float64x2_t)xmmword_21030D340, *(double *)v346.i64), v137, v311), v433, *(double *)v343.i64), v429, v309);
  v500 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v499, v121, v312), v434, *(double *)v344.i64), v119, v313), (float64x2_t)0, *(double *)v340.i64), (float64x2_t)0, v314), (float64x2_t)0, *(double *)v346.i64), v259, v311), v258, *(double *)v343.i64), v261, v309);
  v504 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v503, v363, *(double *)v291.i64), (float64x2_t)0, v308), (float64x2_t)0, *(double *)v338.i64), (float64x2_t)0, v306), (float64x2_t)xmmword_21030D340, *(double *)v334.i64), (float64x2_t)xmmword_21030D330, v305), (float64x2_t)0, *(double *)v339.i64), (float64x2_t)0,
               v304),
             (float64x2_t)0,
             *(double *)v335.i64),
           (float64x2_t)0,
           v303);
  v495 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v494, v262, v308), v122, *(double *)v338.i64), v260, v306), (float64x2_t)0, *(double *)v334.i64), (float64x2_t)0, v305), (float64x2_t)xmmword_21030D340, *(double *)v339.i64), v137, v304), v433, *(double *)v335.i64), v429, v303);
  v491 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v490, v121, v308), v434, *(double *)v338.i64), v119, v306), (float64x2_t)0, *(double *)v334.i64), (float64x2_t)0, v305), (float64x2_t)0, *(double *)v339.i64), v259, v304), v258, *(double *)v335.i64), v261, v303);
  v487 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v486, v363, *(double *)v285.i64), (float64x2_t)0, v297), (float64x2_t)0, *(double *)v332.i64), (float64x2_t)0, v296), (float64x2_t)xmmword_21030D340, *(double *)v330.i64), (float64x2_t)xmmword_21030D330, v295), (float64x2_t)0, *(double *)v333.i64), (float64x2_t)0,
               v293),
             (float64x2_t)0,
             *(double *)v331.i64),
           (float64x2_t)0,
           v292);
  v474 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v473, v262, v297), v122, *(double *)v332.i64), v260, v296), (float64x2_t)0, *(double *)v330.i64), (float64x2_t)0, v295), (float64x2_t)xmmword_21030D340, *(double *)v333.i64), v137, v293), v433, *(double *)v331.i64), v429, v292);
  v484 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v483, v121, v297), v434, *(double *)v332.i64), v119, v296), (float64x2_t)0, *(double *)v330.i64), (float64x2_t)0, v295), (float64x2_t)0, *(double *)v333.i64), v259, v293), v258, *(double *)v331.i64), v261, v292);
  v481 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v480, v363, *(double *)v273.i64), (float64x2_t)0, v290), (float64x2_t)0, *(double *)v328.i64), (float64x2_t)0, v289), (float64x2_t)xmmword_21030D340, *(double *)v326.i64), (float64x2_t)xmmword_21030D330, v288), (float64x2_t)0, *(double *)v329.i64), (float64x2_t)0,
               v287),
             (float64x2_t)0,
             *(double *)v327.i64),
           (float64x2_t)0,
           v286);
  v455 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v454, v262, v290), v122, *(double *)v328.i64), v260, v289), (float64x2_t)0, *(double *)v326.i64), (float64x2_t)0, v288), (float64x2_t)xmmword_21030D340, *(double *)v329.i64), v137, v287), v433, *(double *)v327.i64), v429, v286);
  v478 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v477, v121, v290), v434, *(double *)v328.i64), v119, v289), (float64x2_t)0, *(double *)v326.i64), (float64x2_t)0, v288), (float64x2_t)0, *(double *)v329.i64), v259, v287), v258, *(double *)v327.i64), v261, v286);
  v382 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v159, v262, v284), v122, *(double *)v362.i64), v260, v283), (float64x2_t)0, *(double *)v361.i64), (float64x2_t)0, v282), (float64x2_t)xmmword_21030D340, *(double *)v360.i64), v137, v281), v433, *(double *)v359.i64), v429, v279);
  v379 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v160, v121, v284), v434, *(double *)v362.i64), v119, v283), (float64x2_t)0, *(double *)v361.i64), (float64x2_t)0, v282), (float64x2_t)0, *(double *)v360.i64), v259, v281), v258, *(double *)v359.i64), v261, v279);
  v165 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v387, v363, *(double *)v316.i64), (float64x2_t)0, v278), (float64x2_t)0, *(double *)v358.i64), (float64x2_t)0, v277), (float64x2_t)xmmword_21030D340, *(double *)v357.i64), (float64x2_t)xmmword_21030D330, v276), (float64x2_t)0, *(double *)v356.i64), (float64x2_t)0,
               v275),
             (float64x2_t)0,
             *(double *)v355.i64),
           (float64x2_t)0,
           v274);
  v166 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v385, v262, v278), v122, *(double *)v358.i64), v260, v277), (float64x2_t)0, *(double *)v357.i64), (float64x2_t)0, v276), (float64x2_t)xmmword_21030D340, *(double *)v356.i64), v137, v275), v433, *(double *)v355.i64), v429, v274);
  v470 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v469, v121, v278), v434, *(double *)v358.i64), v119, v277), (float64x2_t)0, *(double *)v357.i64), (float64x2_t)0, v276), (float64x2_t)0, *(double *)v356.i64), v259, v275), v258, *(double *)v355.i64), v261, v274);
  v466 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v465, v363, *(double *)v294.i64), (float64x2_t)0, v272), (float64x2_t)0, *(double *)v354.i64), (float64x2_t)0, v271), (float64x2_t)xmmword_21030D340, *(double *)v353.i64), (float64x2_t)xmmword_21030D330, v270), (float64x2_t)0, *(double *)v352.i64), (float64x2_t)0,
               v269),
             (float64x2_t)0,
             *(double *)v351.i64),
           (float64x2_t)0,
           v268);
  v463 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v462, v262, v272), v122, *(double *)v354.i64), v260, v271), (float64x2_t)0, *(double *)v353.i64), (float64x2_t)0, v270), (float64x2_t)xmmword_21030D340, *(double *)v352.i64), v137, v269), v433, *(double *)v351.i64), v429, v268);
  v459 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v458, v121, v272), v434, *(double *)v354.i64), v119, v271), (float64x2_t)0, *(double *)v353.i64), (float64x2_t)0, v270), (float64x2_t)0, *(double *)v352.i64), v259, v269), v258, *(double *)v351.i64), v261, v268);
  v448 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v447, v262, v267), v122, *(double *)v349.i64), v260, v265), (float64x2_t)0, *(double *)v350.i64), (float64x2_t)0, v266), (float64x2_t)xmmword_21030D340, *(double *)v348.i64), v137, v264), v433, *(double *)v347.i64), v429, v263);
  v451 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v450, v121, v267), v434, *(double *)v349.i64), v119, v265), (float64x2_t)0, *(double *)v350.i64), (float64x2_t)0, v266), (float64x2_t)0, *(double *)v348.i64), v259, v264), v258, *(double *)v347.i64), v261, v263);
  v167 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v145, v363, *(double *)v317.i64), (float64x2_t)0, v321), (float64x2_t)0, *(double *)v341.i64), (float64x2_t)0, v322), (float64x2_t)xmmword_21030D340, *(double *)v337.i64), (float64x2_t)xmmword_21030D330, v323), (float64x2_t)0, *(double *)v345.i64), (float64x2_t)0,
               v324),
             (float64x2_t)0,
             *(double *)v342.i64),
           (float64x2_t)0,
           v325);
  *(_QWORD *)&v168 = vextq_s8(v430, v430, 8uLL).u64[0];
  v169 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v443, v154, *(double *)v402.i64), v167, *(double *)v430.i64), v163, v168);
  v170 = vmlaq_n_f64(vmlaq_n_f64(v371, v404, *(double *)v430.i64), v164, v168);
  v171 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v368, v156, *(double *)v402.i64), v424, *(double *)v430.i64), v500, v168);
  *(_QWORD *)&v172 = vextq_s8(v29, v29, 8uLL).u64[0];
  v173 = vmlaq_n_f64(vmlaq_n_f64(v440, v167, *(double *)v29.i64), v163, v172);
  v174 = vmlaq_n_f64(vmlaq_n_f64(v366, v404, *(double *)v29.i64), v164, v172);
  v175 = vmlaq_n_f64(vmlaq_n_f64(v426, v424, *(double *)v29.i64), v500, v172);
  *(_QWORD *)&v176 = vextq_s8(_Q13, _Q13, 8uLL).u64[0];
  v177 = vmlaq_f64(vmlaq_f64(v519, (float64x2_t)0, v404), (float64x2_t)0, v164);
  v427 = vmlaq_n_f64(v175, v491, v432);
  v437 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v152, v154, *(double *)v399.i64), v167, *(double *)_Q13.i64), v163, v176), v504, v400);
  v520 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v162, v404, *(double *)_Q13.i64), v164, v176), v495, v400);
  v178 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v153, v156, *(double *)v399.i64), v424, *(double *)_Q13.i64), v500, v176), v491, v400);
  __asm { FMOV            V21.2D, #-1.0 }
  v180 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_n_f64(v507, v154, v363.f64[0]), (float64x2_t)0, v167), (float64x2_t)0, v163), (float64x2_t)0, v504), _Q21, v487);
  v181 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v416, (float64x2_t)0, v404), (float64x2_t)0, v164), (float64x2_t)0, v495), _Q21, v474);
  v220 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v420, (float64x2_t)0, v424), (float64x2_t)0, v500), (float64x2_t)0, v491), _Q21, v484);
  v182 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_laneq_f64(v506, v154, v363, 1), (float64x2_t)0, v167), (float64x2_t)0, v163), (float64x2_t)0, v504), (float64x2_t)0, v487), _Q21, v481);
  v183 = vmlaq_f64(vmlaq_f64(vmlaq_f64(v177, (float64x2_t)0, v495), (float64x2_t)0, v474), _Q21, v455);
  v222 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v410, (float64x2_t)0, v424), (float64x2_t)0, v500), (float64x2_t)0, v491), (float64x2_t)0, v484), _Q21, v478);
  v184 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v389, v363, *(double *)v336.i64), (float64x2_t)0, v284), (float64x2_t)0, *(double *)v362.i64), (float64x2_t)0, v283), (float64x2_t)xmmword_21030D340, *(double *)v361.i64), (float64x2_t)xmmword_21030D330, v282), (float64x2_t)0, *(double *)v360.i64), (float64x2_t)0,
               v281),
             (float64x2_t)0,
             *(double *)v359.i64),
           (float64x2_t)0,
           v279);
  v185 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v413, (float64x2_t)0, v167), (float64x2_t)0, v163), (float64x2_t)0, v504), (float64x2_t)0, v487), (float64x2_t)0, v481), _Q21, v184);
  v200 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v512, (float64x2_t)0, v404), (float64x2_t)0, v164), (float64x2_t)0, v495), (float64x2_t)0, v474), (float64x2_t)0, v455), _Q21, v382);
  v186 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v374, (float64x2_t)0, v424), (float64x2_t)0, v500), (float64x2_t)0, v491), (float64x2_t)0, v484), (float64x2_t)0, v478), _Q21, v379);
  *(_QWORD *)&_Q21.f64[0] = vextq_s8(v405, v405, 8uLL).u64[0];
  v444 = vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_n_f64(v169, v504, v401), (float64x2_t)0, v487), (float64x2_t)0, v481), (float64x2_t)0, v184), v165, _Q21.f64[0]);
  v187 = vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_n_f64(v170, v495, v401), (float64x2_t)0, v474), (float64x2_t)0, v455), (float64x2_t)0, v382), v166, _Q21.f64[0]);
  v441 = vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_n_f64(v173, v504, v432), (float64x2_t)0, v487), (float64x2_t)0, v481), (float64x2_t)0, v184), v165, *(double *)v431.i64);
  v188 = vmlaq_f64(vmlaq_f64(vmlaq_f64(v180, (float64x2_t)0, v481), (float64x2_t)0, v184), (float64x2_t)0, v165);
  v189 = vmlaq_f64(vmlaq_f64(v182, (float64x2_t)0, v184), (float64x2_t)0, v165);
  v224 = vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v437, (float64x2_t)0, v487), (float64x2_t)0, v481), (float64x2_t)0, v184), v165, v394);
  v190 = vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v178, (float64x2_t)0, v484), (float64x2_t)0, v478), (float64x2_t)0, v379), v470, v394);
  *(_QWORD *)&v122.f64[0] = vextq_s8(v407, v407, 8uLL).u64[0];
  *(_QWORD *)&v178.f64[0] = vextq_s8(v406, v406, 8uLL).u64[0];
  v191 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(v190, v459, v395), v451, v396);
  v192 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_n_f64(v171, v491, v401), (float64x2_t)0, v484), (float64x2_t)0, v478), (float64x2_t)0, v379), v470, _Q21.f64[0]), v459, v122.f64[0]);
  v193 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v520, (float64x2_t)0, v474), (float64x2_t)0, v455), (float64x2_t)0, v382), v166, v394), v463, v395), v448, v396);
  v194 = vextq_s8(v193, v193, 8uLL).u64[0];
  v195 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v427, (float64x2_t)0, v484), (float64x2_t)0, v478), (float64x2_t)0, v379), v470, *(double *)v431.i64), v459, *(double *)v515.i64), v451, *(double *)v435.i64);
  v505 = vextq_s8(v195, v195, 8uLL);
  v196 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_n_f64(v174, v495, v432), (float64x2_t)0, v474), (float64x2_t)0, v455), (float64x2_t)0, v382), v166, *(double *)v431.i64), v463, *(double *)v515.i64), v448, *(double *)v435.i64);
  v492 = vextq_s8(v196, v196, 8uLL).u64[0];
  v197 = (int8x16_t)vmlaq_f64(vmlaq_f64(vmlaq_f64(v186, (float64x2_t)0, v470), (float64x2_t)0, v459), (float64x2_t)0, v451);
  v198 = (int8x16_t)vmlaq_n_f64(v192, v451, v178.f64[0]);
  v496 = vextq_s8(v198, v198, 8uLL).u64[0];
  v199 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(v187, v463, v122.f64[0]), v448, v178.f64[0]);
  v508 = vextq_s8(v199, v199, 8uLL).u64[0];
  v513 = (int8x16_t)vmlaq_f64(vmlaq_f64(vmlaq_f64(v200, (float64x2_t)0, v166), (float64x2_t)0, v463), (float64x2_t)0, v448);
  v501 = vextq_s8(v513, v513, 8uLL).u64[0];
  *(_QWORD *)&v200.f64[0] = v193.i64[0];
  v201 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v222, (float64x2_t)0, v379), (float64x2_t)0, v470), (float64x2_t)0, v459), (float64x2_t)0, v451);
  v202 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v376, v363, *(double *)v280.i64), (float64x2_t)0, v267), (float64x2_t)0, *(double *)v349.i64), (float64x2_t)0, v265), (float64x2_t)xmmword_21030D340, *(double *)v350.i64), (float64x2_t)xmmword_21030D330, v266), (float64x2_t)0, *(double *)v348.i64), (float64x2_t)0,
               v264),
             (float64x2_t)0,
             *(double *)v347.i64),
           (float64x2_t)0,
           v263);
  v203 = vextq_s8((int8x16_t)v201, (int8x16_t)v201, 8uLL).u64[0];
  v204 = (int8x16_t)vmlaq_f64(vmlaq_f64(v188, (float64x2_t)0, v466), (float64x2_t)0, v202);
  v205 = (int8x16_t)vmlaq_f64(vmlaq_f64(v189, (float64x2_t)0, v466), (float64x2_t)0, v202);
  v206 = (int8x16_t)vmlaq_f64(vmlaq_f64(vmlaq_f64(v185, (float64x2_t)0, v165), (float64x2_t)0, v466), (float64x2_t)0, v202);
  v521 = (int8x16_t)vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v183, (float64x2_t)0, v382), (float64x2_t)0, v166), (float64x2_t)0, v463), (float64x2_t)0, v448);
  v207 = vextq_s8(v521, v521, 8uLL).u64[0];
  v208 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(v444, v466, v122.f64[0]), v202, v178.f64[0]);
  v209 = (int8x16_t)vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v220, (float64x2_t)0, v478), (float64x2_t)0, v379), (float64x2_t)0, v470), (float64x2_t)0, v459), (float64x2_t)0, v451);
  v210 = vextq_s8(v209, v209, 8uLL).u64[0];
  v211 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(v441, v466, *(double *)v515.i64), v202, *(double *)v435.i64);
  v212 = (int8x16_t)vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v181, (float64x2_t)0, v455), (float64x2_t)0, v382), (float64x2_t)0, v166), (float64x2_t)0, v463), (float64x2_t)0, v448);
  v213 = vextq_s8(v212, v212, 8uLL).u64[0];
  v214 = vextq_s8(v191, v191, 8uLL).u64[0];
  v215 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(v224, v466, v395), v202, v396);
  v216 = vextq_s8(v197, v197, 8uLL).u64[0];
  v217 = vextq_s8(v215, v215, 8uLL).u64[0];
  v218 = vextq_s8(v211, v211, 8uLL).u64[0];
  v219 = vextq_s8(v208, v208, 8uLL).u64[0];
  *(_QWORD *)&v220.f64[0] = v206.i64[0];
  v221 = vextq_s8(v206, v206, 8uLL).u64[0];
  *(_QWORD *)&v222.f64[0] = v205.i64[0];
  v223 = vextq_s8(v205, v205, 8uLL).u64[0];
  *(_QWORD *)&v224.f64[0] = v204.i64[0];
  v225 = vextq_s8(v204, v204, 8uLL).u64[0];
  v226 = v194;
LABEL_9:
  *(_QWORD *)&v224.f64[1] = v225;
  v212.i64[1] = v213;
  v209.i64[1] = v210;
  *(float64x2_t *)(v4 + 136) = v224;
  *(int8x16_t *)(v4 + 152) = v212;
  *(_QWORD *)&v222.f64[1] = v223;
  *(int8x16_t *)(v4 + 168) = v209;
  *(float64x2_t *)(v4 + 184) = v222;
  *(_QWORD *)&v241 = v521.i64[0];
  *((_QWORD *)&v241 + 1) = v207;
  *(_QWORD *)&v201.f64[1] = v203;
  *(_OWORD *)(v4 + 200) = v241;
  *(float64x2_t *)(v4 + 216) = v201;
  *(_QWORD *)&v220.f64[1] = v221;
  *(_QWORD *)&v242 = v513.i64[0];
  *((_QWORD *)&v242 + 1) = v501;
  *(float64x2_t *)(v4 + 232) = v220;
  *(_OWORD *)(v4 + 248) = v242;
  v197.i64[1] = v216;
  v208.i64[1] = v219;
  *(int8x16_t *)(v4 + 264) = v197;
  *(int8x16_t *)(v4 + 280) = v208;
  v199.i64[1] = v508;
  v198.i64[1] = v496;
  *(int8x16_t *)(v4 + 296) = v199;
  *(int8x16_t *)(v4 + 312) = v198;
  v211.i64[1] = v218;
  v196.i64[1] = v492;
  *(int8x16_t *)(v4 + 328) = v211;
  *(int8x16_t *)(v4 + 344) = v196;
  result = (__n128)v505;
  v195.i64[1] = v505.i64[0];
  v215.i64[1] = v217;
  *(int8x16_t *)(v4 + 360) = v195;
  *(int8x16_t *)(v4 + 376) = v215;
  *(_QWORD *)&v200.f64[1] = v226;
  v191.i64[1] = v214;
  *(float64x2_t *)(v4 + 392) = v200;
  *(int8x16_t *)(v4 + 408) = v191;
  return result;
}

void sub_20FC87F24(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  MEMORY[0x212BC6368](v2, 0x1000C8000313F17);
  if (*(_BYTE *)(v1 + 496))
  {
    v4 = *(void **)(v1 + 424);
    if (v4)
    {
      *(_QWORD *)(v1 + 432) = v4;
      operator delete(v4);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20FC87F6C(uint64_t a1@<X0>, float64x2_t *a2@<X8>)
{
  int v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v8;
  size_t v9;
  void **v10;
  unint64_t v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  size_t v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  const char *v21;
  size_t v22;
  std::string::size_type *p_size;
  const char *v24;
  uint64_t v25;
  const char *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  void **v30;
  unint64_t v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  size_t v35;
  void *v36;
  _QWORD *v37;
  size_t v38;
  std::string::size_type v39;
  void *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  std::string::size_type v44;
  char v45;
  _QWORD *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  void *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::string::size_type v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  __int128 v68;
  std::string::size_type v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::string::size_type v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  const char *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::string::size_type v93;
  unsigned int v94;
  float64_t *v95;
  unsigned int v96;
  uint64_t __lda;
  uint64_t __ldb;
  int32x2_t v99;
  int64x2_t v100;
  int8x16_t v101;
  unsigned int v102;
  int64x2_t v103;
  int64x2_t v104;
  int64x2_t v105;
  uint32x2_t v106;
  uint32x2_t v107;
  int8x16_t v108;
  int64x2_t v109;
  uint32x2_t v110;
  int64x2_t v111;
  uint32x2_t v112;
  std::runtime_error *exception;
  std::string *v114;
  std::string::size_type size;
  std::string *v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  unint64_t v121;
  const double *v122;
  unsigned int v123;
  char *v124;
  char *v125;
  const double *v126;
  const double *v127;
  float64x2_t *v128;
  unsigned int j;
  uint64_t v130;
  uint64_t v131;
  double *v132;
  unsigned int i;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  char *v137;
  double *__B;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  double *v144;
  double *v145;
  double v146;
  float64x2_t *v147;
  float64x2_t *v148;
  uint64_t v149;
  float64x2_t v150;
  uint64_t v151;
  const char *v152;
  unint64_t v153;
  std::string v154;
  int v155;
  const char *v156;
  int v157;
  const char *v158;
  uint64_t v159;
  std::__shared_weak_count *v160;
  void *__dst[2];
  int64_t v162;
  std::string v163;
  uint64_t v164;
  const void *v165;
  uint64_t v166;
  const void *v167;
  unint64_t v168;
  void *__p;
  char v170;
  unint64_t v171;
  int v172;
  uint64_t v173;
  uint64_t v174;
  std::string v175;
  char *v176;
  std::__shared_weak_count *v177;
  std::string v178;
  std::string v179;
  __int128 v180;
  void *v181[2];
  unint64_t v182;
  char v183;
  _QWORD v184[5];

  v184[2] = *MEMORY[0x24BDAC8D0];
  sub_20FC84E90(&v174);
  if (**(int **)(v174 + 56) > 2)
    goto LABEL_143;
  v4 = *(unsigned __int8 *)(v174 + 72);
  v5 = sub_20E8C31DC(v174, "OSLogSurrogateAppender", 1, 0);
  v6 = v5;
  if (!v4 && v5 == 0)
    goto LABEL_143;
  sub_20E863438((uint64_t)&v163);
  sub_20E86A980(&v163.__r_.__value_.__r.__words[2], (uint64_t)"ExtractPoseInformationMatrix with size ", 39);
  v8 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v8, (uint64_t)" x ", 3);
  std::ostream::operator<<();
  if ((v172 & 0x10) != 0)
  {
    v11 = v171;
    if (v171 < v168)
    {
      v171 = v168;
      v11 = v168;
    }
    v12 = v167;
    v9 = v11 - (_QWORD)v167;
    if (v11 - (unint64_t)v167 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_64;
  }
  else
  {
    if ((v172 & 8) == 0)
    {
      v9 = 0;
      HIBYTE(v162) = 0;
      v10 = __dst;
      goto LABEL_19;
    }
    v12 = v165;
    v9 = v166 - (_QWORD)v165;
    if ((unint64_t)(v166 - (_QWORD)v165) > 0x7FFFFFFFFFFFFFF7)
LABEL_64:
      sub_20E860B7C();
  }
  if (v9 >= 0x17)
  {
    v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v13 = v9 | 7;
    v14 = v13 + 1;
    v10 = (void **)operator new(v13 + 1);
    __dst[1] = (void *)v9;
    v162 = v14 | 0x8000000000000000;
    __dst[0] = v10;
    goto LABEL_18;
  }
  HIBYTE(v162) = v9;
  v10 = __dst;
  if (v9)
LABEL_18:
    memmove(v10, v12, v9);
LABEL_19:
  *((_BYTE *)v10 + v9) = 0;
  v154.__r_.__value_.__r.__words[0] = (std::string::size_type)&v174;
  v154.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v154.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
  v155 = 2;
  v156 = "unknown file";
  v157 = 308;
  v159 = 0;
  v160 = 0;
  v158 = "unknown function";
  if (v162 >= 0)
    v15 = (const char *)__dst;
  else
    v15 = (const char *)__dst[0];
  v16 = *(_QWORD *)v154.__r_.__value_.__l.__data_;
  v17 = (const char *)(*(_QWORD *)v154.__r_.__value_.__l.__data_ + 16);
  v152 = v17;
  if (*(char *)(*(_QWORD *)v154.__r_.__value_.__l.__data_ + 39) < 0)
  {
    v17 = *(const char **)(v16 + 16);
    v18 = *(_QWORD *)(v16 + 24);
    v153 = v6;
    v20 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v20 & 1) != 0)
      goto LABEL_26;
  }
  else
  {
    v18 = *(unsigned __int8 *)(*(_QWORD *)v154.__r_.__value_.__l.__data_ + 39);
    v153 = v6;
    v19 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v19 & 1) != 0)
      goto LABEL_26;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)&v179);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v179);
    if ((_BYTE)v180 && SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v179.__r_.__value_.__l.__data_);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_26:
  if (byte_254A4A4F8[23] >= 0)
    v21 = byte_254A4A4F8;
  else
    v21 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v22 = byte_254A4A4F8[23];
  else
    v22 = *(_QWORD *)&byte_254A4A4F8[8];
  v179.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v21, v17);
  p_size = &v179.__r_.__value_.__l.__size_;
  if (v22 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v22 >= 0x17)
  {
    v151 = a1;
    v24 = v17;
    v25 = v16;
    v26 = v15;
    v27 = v4;
    v28 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v22 | 7) != 0x17)
      v28 = v22 | 7;
    v29 = v28 + 1;
    p_size = (std::string::size_type *)operator new(v28 + 1);
    v179.__r_.__value_.__r.__words[2] = v22;
    *(_QWORD *)&v180 = v29 | 0x8000000000000000;
    v179.__r_.__value_.__l.__size_ = (std::string::size_type)p_size;
    v4 = v27;
    v15 = v26;
    v16 = v25;
    v17 = v24;
    a1 = v151;
    goto LABEL_39;
  }
  BYTE7(v180) = v22;
  if (v22)
LABEL_39:
    memmove(p_size, v21, v22);
  *((_BYTE *)p_size + v22) = 0;
  BYTE8(v180) = 1;
  v30 = v181;
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v18 >= 0x17)
  {
    v33 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v33 = v18 | 7;
    v34 = v33 + 1;
    v30 = (void **)operator new(v33 + 1);
    v181[1] = (void *)v18;
    v182 = v34 | 0x8000000000000000;
    v181[0] = v30;
    v31 = v153;
  }
  else
  {
    HIBYTE(v182) = v18;
    v31 = v153;
    if (!v18)
    {
      LOBYTE(v181[0]) = 0;
      v183 = 1;
      v32 = v179.__r_.__value_.__r.__words[0];
      if ((SHIBYTE(v182) & 0x80000000) == 0)
        goto LABEL_44;
      goto LABEL_50;
    }
  }
  memmove(v30, v17, v18);
  *((_BYTE *)v30 + v18) = 0;
  v183 = 1;
  v32 = v179.__r_.__value_.__r.__words[0];
  if ((SHIBYTE(v182) & 0x80000000) == 0)
  {
LABEL_44:
    if (!BYTE8(v180))
      goto LABEL_53;
    goto LABEL_51;
  }
LABEL_50:
  operator delete(v181[0]);
  if (!BYTE8(v180))
    goto LABEL_53;
LABEL_51:
  if (SBYTE7(v180) < 0)
    operator delete((void *)v179.__r_.__value_.__l.__size_);
LABEL_53:
  if (v179.__r_.__value_.__r.__words[0])
    os_release(v179.__r_.__value_.__l.__data_);
  if (!v31 || !*(_QWORD *)(v31 + 24))
  {
    os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG);
    LODWORD(v179.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v179.__r_.__value_.__r.__words + 4) = (std::string::size_type)v15;
    v41 = (void *)_os_log_send_and_compose_impl();
    if (v41)
      free(v41);
    goto LABEL_129;
  }
  v35 = _os_log_pack_size();
  v36 = operator new(v35, (std::align_val_t)8uLL);
  v37 = (_QWORD *)operator new();
  *v37 = &off_24C9ABB80;
  v37[1] = 0;
  v37[2] = 0;
  v37[3] = v36;
  v175.__r_.__value_.__r.__words[0] = (std::string::size_type)v36;
  v175.__r_.__value_.__l.__size_ = (std::string::size_type)v36;
  v176 = 0;
  v177 = 0;
  v175.__r_.__value_.__r.__words[2] = (std::string::size_type)v37;
  v38 = strlen(v15);
  if (v38 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v39 = v38;
  if (v38 >= 0x17)
  {
    v42 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v38 | 7) != 0x17)
      v42 = v38 | 7;
    v43 = v42 + 1;
    v40 = operator new(v42 + 1);
    v178.__r_.__value_.__l.__size_ = v39;
    v178.__r_.__value_.__r.__words[2] = v43 | 0x8000000000000000;
    v178.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
    v31 = v153;
    goto LABEL_68;
  }
  *((_BYTE *)&v178.__r_.__value_.__s + 23) = v38;
  v40 = &v178;
  if (v38)
LABEL_68:
    memcpy(v40, v15, v39);
  *((_BYTE *)v40 + v39) = 0;
  v184[0] = v178.__r_.__value_.__l.__size_;
  v44 = v178.__r_.__value_.__r.__words[0];
  *(_QWORD *)((char *)v184 + 7) = *(std::string::size_type *)((char *)&v178.__r_.__value_.__r.__words[1] + 7);
  v45 = HIBYTE(v178.__r_.__value_.__r.__words[2]);
  v46 = operator new(0x38uLL);
  v46[1] = 0;
  v46[2] = 0;
  v46[3] = off_24C9ABC20;
  *v46 = &off_24C9ABBD0;
  v47 = v184[0];
  v46[4] = v44;
  v46[5] = v47;
  *(_QWORD *)((char *)v46 + 47) = *(_QWORD *)((char *)v184 + 7);
  *((_BYTE *)v46 + 55) = v45;
  v184[0] = 0;
  *(_QWORD *)((char *)v184 + 7) = 0;
  v48 = v177;
  v176 = (char *)(v46 + 3);
  v177 = (std::__shared_weak_count *)v46;
  if (v48)
  {
    p_shared_owners = (unint64_t *)&v48->__shared_owners_;
    do
      v50 = __ldaxr(p_shared_owners);
    while (__stlxr(v50 - 1, p_shared_owners));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v179 = v175;
  v51 = v176;
  if (v175.__r_.__value_.__r.__words[2])
  {
    v52 = (unint64_t *)(v175.__r_.__value_.__r.__words[2] + 8);
    do
      v53 = __ldxr(v52);
    while (__stxr(v53 + 1, v52));
  }
  v54 = v177;
  *(_QWORD *)&v180 = v51;
  *((_QWORD *)&v180 + 1) = v177;
  if (v177)
  {
    v55 = (unint64_t *)&v177->__shared_owners_;
    do
      v56 = __ldxr(v55);
    while (__stxr(v56 + 1, v55));
    v181[0] = v51;
    do
      v57 = __ldaxr(v55);
    while (__stlxr(v57 - 1, v55));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  else
  {
    v181[0] = v51;
  }
  v58 = (std::__shared_weak_count *)v175.__r_.__value_.__r.__words[2];
  if (v175.__r_.__value_.__r.__words[2])
  {
    v59 = (unint64_t *)(v175.__r_.__value_.__r.__words[2] + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  v61 = v179.__r_.__value_.__r.__words[0];
  if (*((char *)v181[0] + 31) >= 0)
    v62 = (char *)v181[0] + 8;
  else
    v62 = (char *)*((_QWORD *)v181[0] + 1);
  v63 = _os_log_pack_fill();
  *(_DWORD *)v63 = 136315138;
  *(_QWORD *)(v63 + 4) = v62;
  v64 = operator new();
  v65 = *(unsigned __int8 *)(v16 + 39);
  v66 = *(const char **)(v16 + 16);
  v67 = *(_QWORD *)(v16 + 24);
  v68 = v180;
  *(_OWORD *)(v64 + 8) = *(_OWORD *)&v179.__r_.__value_.__r.__words[1];
  if ((v65 & 0x80u) != 0)
    v65 = v67;
  else
    v66 = v152;
  *(_QWORD *)v64 = v61;
  *(_OWORD *)&v179.__r_.__value_.__r.__words[1] = 0uLL;
  *(_OWORD *)(v64 + 24) = v68;
  v180 = 0uLL;
  *(_QWORD *)(v64 + 40) = v66;
  *(_QWORD *)(v64 + 48) = v65;
  *(_BYTE *)(v64 + 56) = 2;
  v178.__r_.__value_.__r.__words[0] = 0;
  v175.__r_.__value_.__r.__words[0] = v64;
  (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v31 + 24) + 40))(*(_QWORD *)(v31 + 24), &v175);
  v69 = v175.__r_.__value_.__r.__words[0];
  v175.__r_.__value_.__r.__words[0] = 0;
  if (v69)
  {
    v70 = *(std::__shared_weak_count **)(v69 + 32);
    if (v70)
    {
      v71 = (unint64_t *)&v70->__shared_owners_;
      do
        v72 = __ldaxr(v71);
      while (__stlxr(v72 - 1, v71));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v70);
      }
    }
    v73 = *(std::__shared_weak_count **)(v69 + 16);
    if (v73)
    {
      v74 = (unint64_t *)&v73->__shared_owners_;
      do
        v75 = __ldaxr(v74);
      while (__stlxr(v75 - 1, v74));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
      }
    }
    MEMORY[0x212BC6398](v69, 0x10F0C40B62ED6C6);
    v76 = v178.__r_.__value_.__r.__words[0];
    v178.__r_.__value_.__r.__words[0] = 0;
    if (v76)
    {
      v77 = *(std::__shared_weak_count **)(v76 + 32);
      if (v77)
      {
        v78 = (unint64_t *)&v77->__shared_owners_;
        do
          v79 = __ldaxr(v78);
        while (__stlxr(v79 - 1, v78));
        if (!v79)
        {
          ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
          std::__shared_weak_count::__release_weak(v77);
        }
      }
      v80 = *(std::__shared_weak_count **)(v76 + 16);
      if (v80)
      {
        v81 = (unint64_t *)&v80->__shared_owners_;
        do
          v82 = __ldaxr(v81);
        while (__stlxr(v82 - 1, v81));
        if (!v82)
        {
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
        }
      }
      MEMORY[0x212BC6398](v76, 0x10F0C40B62ED6C6);
    }
  }
  v83 = (std::__shared_weak_count *)*((_QWORD *)&v180 + 1);
  if (*((_QWORD *)&v180 + 1))
  {
    v84 = (unint64_t *)(*((_QWORD *)&v180 + 1) + 8);
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  v86 = (std::__shared_weak_count *)v179.__r_.__value_.__r.__words[2];
  if (v179.__r_.__value_.__r.__words[2])
  {
    v87 = (unint64_t *)(v179.__r_.__value_.__r.__words[2] + 8);
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
LABEL_129:
  if (v4)
  {
    v89 = (const char *)__dst;
    if (v162 < 0)
      v89 = (const char *)__dst[0];
    sub_20E8C003C((uint64_t)&v154, "%s", v89);
    sub_20E863570((uint64_t)&v154);
  }
  sub_20E863570((uint64_t)&v154);
  v90 = v160;
  if (v160)
  {
    v91 = (unint64_t *)&v160->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  if (SHIBYTE(v162) < 0)
    operator delete(__dst[0]);
  v163.__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB7F0];
  v93 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(std::string::size_type *)((char *)v163.__r_.__value_.__r.__words
                            + *(_QWORD *)(v163.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0]
                                                                                               + 64);
  v163.__r_.__value_.__r.__words[2] = v93;
  v164 = MEMORY[0x24BEDB848] + 16;
  if (v170 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](&v173);
LABEL_143:
  v94 = *(_DWORD *)(a1 + 16);
  if (*(_DWORD *)(a1 + 20) == 12)
  {
    v95 = *(float64_t **)a1;
    if (v94 == 12)
    {
      a2->f64[0] = *v95;
      a2->f64[1] = v95[1];
      a2[1].f64[0] = v95[2];
      a2[1].f64[1] = v95[3];
      a2[2].f64[0] = v95[4];
      a2[2].f64[1] = v95[5];
      a2[3].f64[0] = v95[6];
      a2[3].f64[1] = v95[7];
      a2[4].f64[0] = v95[8];
      a2[4].f64[1] = v95[9];
      a2[5].f64[0] = v95[10];
      a2[5].f64[1] = v95[11];
      a2[6].f64[0] = v95[12];
      a2[6].f64[1] = v95[13];
      a2[7].f64[0] = v95[14];
      a2[7].f64[1] = v95[15];
      a2[8].f64[0] = v95[16];
      a2[8].f64[1] = v95[17];
      a2[9].f64[0] = v95[18];
      a2[9].f64[1] = v95[19];
      a2[10].f64[0] = v95[20];
      a2[10].f64[1] = v95[21];
      a2[11].f64[0] = v95[22];
      a2[11].f64[1] = v95[23];
      a2[12].f64[0] = v95[24];
      a2[12].f64[1] = v95[25];
      a2[13].f64[0] = v95[26];
      a2[13].f64[1] = v95[27];
      a2[14].f64[0] = v95[28];
      a2[14].f64[1] = v95[29];
      a2[15].f64[0] = v95[30];
      a2[15].f64[1] = v95[31];
      a2[16].f64[0] = v95[32];
      a2[16].f64[1] = v95[33];
      a2[17].f64[0] = v95[34];
      a2[17].f64[1] = v95[35];
      a2[18].f64[0] = v95[36];
      a2[18].f64[1] = v95[37];
      a2[19].f64[0] = v95[38];
      a2[19].f64[1] = v95[39];
      a2[20].f64[0] = v95[40];
      a2[20].f64[1] = v95[41];
      a2[21].f64[0] = v95[42];
      a2[21].f64[1] = v95[43];
      a2[22].f64[0] = v95[44];
      a2[22].f64[1] = v95[45];
      a2[23].f64[0] = v95[46];
      a2[23].f64[1] = v95[47];
      a2[24].f64[0] = v95[48];
      a2[24].f64[1] = v95[49];
      a2[25].f64[0] = v95[50];
      a2[25].f64[1] = v95[51];
      a2[26].f64[0] = v95[52];
      a2[26].f64[1] = v95[53];
      a2[27].f64[0] = v95[54];
      a2[27].f64[1] = v95[55];
      a2[28].f64[0] = v95[56];
      a2[28].f64[1] = v95[57];
      a2[29].f64[0] = v95[58];
      a2[29].f64[1] = v95[59];
      a2[30].f64[0] = v95[60];
      a2[30].f64[1] = v95[61];
      a2[31].f64[0] = v95[62];
      a2[31].f64[1] = v95[63];
      a2[32].f64[0] = v95[64];
      a2[32].f64[1] = v95[65];
      a2[33].f64[0] = v95[66];
      a2[33].f64[1] = v95[67];
      a2[34].f64[0] = v95[68];
      a2[34].f64[1] = v95[69];
      a2[35].f64[0] = v95[70];
      a2[35].f64[1] = v95[71];
      a2[36].f64[0] = v95[72];
      a2[36].f64[1] = v95[73];
      a2[37].f64[0] = v95[74];
      a2[37].f64[1] = v95[75];
      a2[38].f64[0] = v95[76];
      a2[38].f64[1] = v95[77];
      a2[39].f64[0] = v95[78];
      a2[39].f64[1] = v95[79];
      a2[40].f64[0] = v95[80];
      a2[40].f64[1] = v95[81];
      a2[41].f64[0] = v95[82];
      a2[41].f64[1] = v95[83];
      a2[42].f64[0] = v95[84];
      a2[42].f64[1] = v95[85];
      a2[43].f64[0] = v95[86];
      a2[43].f64[1] = v95[87];
      a2[44].f64[0] = v95[88];
      a2[44].f64[1] = v95[89];
      a2[45].f64[0] = v95[90];
      a2[45].f64[1] = v95[91];
      a2[46].f64[0] = v95[92];
      a2[46].f64[1] = v95[93];
      a2[47].f64[0] = v95[94];
      a2[47].f64[1] = v95[95];
      a2[48].f64[0] = v95[96];
      a2[48].f64[1] = v95[97];
      a2[49].f64[0] = v95[98];
      a2[49].f64[1] = v95[99];
      a2[50].f64[0] = v95[100];
      a2[50].f64[1] = v95[101];
      a2[51].f64[0] = v95[102];
      a2[51].f64[1] = v95[103];
      a2[52].f64[0] = v95[104];
      a2[52].f64[1] = v95[105];
      a2[53].f64[0] = v95[106];
      a2[53].f64[1] = v95[107];
      a2[54].f64[0] = v95[108];
      a2[54].f64[1] = v95[109];
      a2[55].f64[0] = v95[110];
      a2[55].f64[1] = v95[111];
      a2[56].f64[0] = v95[112];
      a2[56].f64[1] = v95[113];
      a2[57].f64[0] = v95[114];
      a2[57].f64[1] = v95[115];
      a2[58].f64[0] = v95[116];
      a2[58].f64[1] = v95[117];
      a2[59].f64[0] = v95[118];
      a2[59].f64[1] = v95[119];
      a2[60].f64[0] = v95[120];
      a2[60].f64[1] = v95[121];
      a2[61].f64[0] = v95[122];
      a2[61].f64[1] = v95[123];
      a2[62].f64[0] = v95[124];
      a2[62].f64[1] = v95[125];
      a2[63].f64[0] = v95[126];
      a2[63].f64[1] = v95[127];
      a2[64].f64[0] = v95[128];
      a2[64].f64[1] = v95[129];
      a2[65].f64[0] = v95[130];
      a2[65].f64[1] = v95[131];
      a2[66].f64[0] = v95[132];
      a2[66].f64[1] = v95[133];
      a2[67].f64[0] = v95[134];
      a2[67].f64[1] = v95[135];
      a2[68].f64[0] = v95[136];
      a2[68].f64[1] = v95[137];
      a2[69].f64[0] = v95[138];
      a2[69].f64[1] = v95[139];
      a2[70].f64[0] = v95[140];
      a2[70].f64[1] = v95[141];
      a2[71].f64[0] = v95[142];
      a2[71].f64[1] = v95[143];
      return;
    }
    memset(&v163, 0, sizeof(v163));
    if (!v94)
      goto LABEL_180;
  }
  else
  {
    if (v94 != 30)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v175, *(_DWORD *)(a1 + 16));
      sub_20E8B0848("ExtractPoseInformationMatrix fails with size ", &v175, &v154);
      sub_20E8B07EC(" x ", &v154, &v179);
      std::to_string(&v178, *(_DWORD *)(a1 + 20));
      if ((v178.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v114 = &v178;
      else
        v114 = (std::string *)v178.__r_.__value_.__r.__words[0];
      if ((v178.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v178.__r_.__value_.__r.__words[2]);
      else
        size = v178.__r_.__value_.__l.__size_;
      v116 = std::string::append(&v179, (const std::string::value_type *)v114, size);
      v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
      v163.__r_.__value_.__r.__words[2] = v116->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v163.__r_.__value_.__l.__data_ = v117;
      v116->__r_.__value_.__l.__size_ = 0;
      v116->__r_.__value_.__r.__words[2] = 0;
      v116->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v163);
      exception->__vftable = (std::runtime_error_vtbl *)&off_24CA04F20;
      __cxa_throw(exception, (struct type_info *)&unk_24CA04F38, (void (*)(void *))std::runtime_error::~runtime_error);
    }
    v95 = *(float64_t **)a1;
    memset(&v163, 0, sizeof(v163));
  }
  if (v94 >= 4)
  {
    v99 = (int32x2_t)0x100000000;
    v96 = v94 & 0xFFFFFFFC;
    v100 = 0uLL;
    v101 = (int8x16_t)vdupq_n_s64(1uLL);
    v102 = v94 & 0xFFFFFFFC;
    v103 = 0uLL;
    v104 = 0uLL;
    v105 = 0uLL;
    do
    {
      v106 = (uint32x2_t)vadd_s32(v99, (int32x2_t)0x200000002);
      v107 = vcgt_u32((uint32x2_t)0xC0000000CLL, (uint32x2_t)v99);
      v108.i64[0] = v107.u32[0];
      v108.i64[1] = v107.u32[1];
      v109 = (int64x2_t)vandq_s8(v108, v101);
      v110 = vcgt_u32((uint32x2_t)0xC0000000CLL, v106);
      v108.i64[0] = v110.u32[0];
      v108.i64[1] = v110.u32[1];
      v104 = vaddq_s64(v104, v109);
      v105 = vaddq_s64(v105, (int64x2_t)vandq_s8(v108, v101));
      *(uint32x2_t *)v109.i8 = vcge_u32((uint32x2_t)v99, (uint32x2_t)0xC0000000CLL);
      v108.i64[0] = v109.u32[0];
      v108.i64[1] = v109.u32[1];
      v111 = (int64x2_t)vandq_s8(v108, v101);
      v112 = vcge_u32(v106, (uint32x2_t)0xC0000000CLL);
      v108.i64[0] = v112.u32[0];
      v108.i64[1] = v112.u32[1];
      v100 = vaddq_s64(v100, v111);
      v103 = vaddq_s64(v103, (int64x2_t)vandq_s8(v108, v101));
      v99 = vadd_s32(v99, (int32x2_t)0x400000004);
      v102 -= 4;
    }
    while (v102);
    __ldb = vaddvq_s64(vaddq_s64(v105, v104));
    __lda = vaddvq_s64(vaddq_s64(v103, v100));
    goto LABEL_175;
  }
  v96 = 0;
  __lda = 0;
  __ldb = 0;
  do
  {
    if (v96 < 0xC)
      ++__ldb;
    if (v96 > 0xB)
      ++__lda;
    ++v96;
LABEL_175:
    ;
  }
  while (v94 != v96);
  if (!__lda)
  {
LABEL_180:
    if (v94 * v94)
      memmove(a2, v95, 8 * v94 * v94);
    goto LABEL_210;
  }
  if (!__ldb)
    goto LABEL_210;
  v118 = __lda * __ldb;
  v119 = __lda * __lda;
  v120 = __ldb * __ldb;
  v121 = __lda * __ldb + __lda * __lda + __ldb * __ldb + 2 * (__lda * __ldb + __lda * __lda);
  if (v121)
  {
    sub_20E93D8FC((uint64_t)&v163, v121);
    v122 = (const double *)v163.__r_.__value_.__r.__words[0];
  }
  else
  {
    v122 = 0;
  }
  v123 = 0;
  v124 = (char *)&v122[v118 + v118];
  v125 = v124;
  v126 = &v122[v118];
  v127 = v122;
  v128 = a2;
  do
  {
    if (v123 >= 0xC)
    {
      for (i = 0; i != v94; ++i)
      {
        v134 = *(_QWORD *)v95++;
        v135 = v134;
        if (i >= 0xC)
          v136 = v125;
        else
          v136 = v126;
        v126 += i < 0xC;
        v125 += 8 * (i > 0xB);
        *v136 = v135;
      }
    }
    else
    {
      for (j = 0; j != v94; ++j)
      {
        v130 = *(_QWORD *)v95++;
        v131 = v130;
        if (j >= 0xC)
          v132 = (double *)v127;
        else
          v132 = (double *)v128;
        v128 = (float64x2_t *)((char *)v128 + 8 * (j < 0xC));
        v127 += j > 0xB;
        *(_QWORD *)v132 = v131;
      }
    }
    ++v123;
  }
  while (v123 != v94);
  v137 = &v124[8 * v119 + 8 * v119];
  if (!sub_21020B160(v137, v124, __lda))
    goto LABEL_210;
  __B = (double *)&v137[8 * v119];
  if ((_DWORD)__ldb * (_DWORD)__lda)
    bzero(&v137[8 * v119], 8 * (__ldb * __lda));
  v179.__r_.__value_.__r.__words[0] = 0x100000001;
  sub_20E85E250(&v179, CblasRowMajor, CblasNoTrans, CblasNoTrans, __lda, __ldb, __lda, (const double *)v137, 1.0, 1.0, __lda, (double *)&v122[v118], __ldb, (double *)&v137[8 * v119], __ldb);
  if ((_DWORD)__ldb * (_DWORD)__ldb)
    bzero(&__B[v118], 8 * (__ldb * __ldb));
  v179.__r_.__value_.__r.__words[0] = 0x100000001;
  sub_20E85E250(&v179, CblasRowMajor, CblasNoTrans, CblasNoTrans, __ldb, __ldb, __lda, v122, 1.0, 1.0, __lda, __B, __ldb, &__B[v118], __ldb);
  if (v120 < 1)
    goto LABEL_210;
  v139 = (__ldb * __ldb);
  if (v139 >= 0xA
    && ((v140 = __lda * (__lda + __ldb), &v122[3 * v140 + v139] <= (const double *)a2) || &__B[v118] >= &a2->f64[v139]))
  {
    v141 = v139 - (v120 & 3);
    v147 = a2 + 1;
    v148 = (float64x2_t *)&v122[3 * v140 + 2];
    v149 = v141;
    do
    {
      v150 = vsubq_f64(*v147, *v148);
      v147[-1] = vsubq_f64(v147[-1], v148[-1]);
      *v147 = v150;
      v147 += 2;
      v148 += 2;
      v149 -= 4;
    }
    while (v149);
    if ((v120 & 3) == 0)
      goto LABEL_210;
  }
  else
  {
    v141 = 0;
  }
  v142 = v139 - v141;
  v143 = v141;
  v144 = (double *)&v122[3 * __lda * (__lda + __ldb) + v141];
  v145 = &a2->f64[v143];
  do
  {
    v146 = *v144++;
    *v145 = *v145 - v146;
    ++v145;
    --v142;
  }
  while (v142);
LABEL_210:
  if (v163.__r_.__value_.__r.__words[0])
  {
    v163.__r_.__value_.__l.__size_ = v163.__r_.__value_.__r.__words[0];
    operator delete(v163.__r_.__value_.__l.__data_);
  }
}

void sub_20FC89564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20FC89250);
}

float64_t sub_20FC89580(uint64_t a1, float64x2_t *a2, double a3, double a4, double a5, double a6, double a7, int8x16_t a8)
{
  uint64_t v8;
  int v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  int8x16_t v14;
  unint64_t v15;
  float64_t v16;
  float64x2_t v17;
  float64x2_t v18;
  BOOL v19;
  __int128 v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64_t v24;
  __int128 v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  int8x16_t v32;
  int8x16_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v122;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  int64x2_t v127;
  float64x2_t v130;
  float64x2_t v131;
  int8x16_t v132;
  float64x2_t v133;
  int64x2_t v134;
  float64_t result;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  uint64_t v143;
  float64_t v144;
  float64_t v145;
  float64_t v146;
  float64x2_t v147;
  _BYTE v148[32];
  float64x2_t v149;
  _BYTE v150[32];
  float64x2_t v151;
  _BYTE v152[32];
  int64x2_t v153;
  _BYTE v154[32];
  int64x2_t v155;
  _BYTE v156[32];
  int64x2_t v157;
  _BYTE v158[32];

  v8 = 0;
  v9 = 0;
  v10.f64[0] = *(float64_t *)(a1 + 16);
  v11 = *(float64x2_t *)a1;
  *(_QWORD *)&v12.f64[0] = vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL).u64[0];
  v13.f64[0] = *(float64_t *)(a1 + 48);
  v14 = *(int8x16_t *)(a1 + 32);
  v15 = vextq_s8(v14, v14, 8uLL).u64[0];
  v16 = *(double *)(a1 + 80);
  v17 = *(float64x2_t *)(a1 + 64);
  v18 = (float64x2_t)vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL);
  *(float64_t *)v148 = v10.f64[0];
  v147 = *(float64x2_t *)a1;
  *(float64_t *)v150 = v13.f64[0];
  v149 = (float64x2_t)v14;
  *(float64_t *)v152 = v16;
  v151 = v17;
  do
  {
    v153.i64[v8] = 0;
    v19 = v9 < 2;
    if (v9 < 2)
      ++v9;
    else
      v9 = 0;
    if (v19)
      ++v8;
    else
      v8 += 4;
  }
  while (v8 != 18);
  *(float64_t *)&v20 = v11.f64[0];
  *((_QWORD *)&v20 + 1) = *(_QWORD *)&v12.f64[0];
  *(_QWORD *)&v21.f64[0] = v14.i64[0];
  *(_QWORD *)&v21.f64[1] = v15;
  a8.i64[0] = *(_QWORD *)(a1 + 112);
  v22 = *(float64x2_t *)(a1 + 96);
  v23.f64[0] = v16;
  v24 = v16;
  v146 = v16;
  v23.f64[1] = v17.f64[0];
  *(float64_t *)&v25 = v17.f64[0];
  *((_QWORD *)&v25 + 1) = *(_QWORD *)&v18.f64[0];
  v26.f64[0] = v12.f64[0];
  v26.f64[1] = v13.f64[0];
  v27 = (float64x2_t)vextq_s8((int8x16_t)v22, a8, 8uLL);
  v28.f64[0] = v18.f64[0];
  v28.f64[1] = v24;
  v12.f64[1] = v10.f64[0];
  v144 = v13.f64[0];
  v145 = v10.f64[0];
  v10.f64[1] = v11.f64[0];
  *(_QWORD *)&v13.f64[1] = v14.i64[0];
  v29 = (float64x2_t)vzip1q_s64((int64x2_t)a8, (int64x2_t)v22);
  *(_QWORD *)&v11.f64[1] = v15;
  v30 = vmlsq_f64(vmulq_f64(v23, v27), v28, v29);
  v31 = vmlsq_f64(vmulq_f64(v10, v27), v12, v29);
  v32 = (int8x16_t)vmlsq_f64(vmulq_f64(v21, v29), v13, v22);
  v33 = (int8x16_t)vmlsq_f64(vmulq_f64(v26, v22), v11, v27);
  v143 = *(_OWORD *)&vmlsq_laneq_f64(vmulq_f64(v18, v22), v17, v22, 1);
  v34 = (float64x2_t)vzip1q_s64((int64x2_t)v17, v153);
  *(_QWORD *)&v29.f64[0] = vdupq_laneq_s64((int64x2_t)v151, 1).u64[0];
  *(_QWORD *)&v29.f64[1] = v153.i64[1];
  v35 = (float64x2_t)vzip1q_s64(v155, v157);
  *(_QWORD *)&v36.f64[0] = vdupq_laneq_s64(v155, 1).u64[0];
  *(_QWORD *)&v36.f64[1] = v157.i64[1];
  v37 = a2[3];
  v38 = a2[6];
  v39 = (float64x2_t)vzip1q_s64((int64x2_t)v147, (int64x2_t)v149);
  v40 = (float64x2_t)vzip2q_s64((int64x2_t)v147, (int64x2_t)v149);
  v41 = vmlaq_laneq_f64(vmulq_n_f64(v39, a2->f64[0]), v40, *a2, 1);
  v42 = vmlaq_laneq_f64(vmulq_n_f64(v34, a2->f64[0]), v29, *a2, 1);
  v43 = vmlaq_laneq_f64(vmulq_n_f64(v35, a2->f64[0]), v36, *a2, 1);
  v44 = vmlaq_laneq_f64(vmulq_n_f64(v39, v37.f64[0]), v40, v37, 1);
  v45 = vmlaq_laneq_f64(vmulq_n_f64(v34, v37.f64[0]), v29, v37, 1);
  v46 = vmlaq_laneq_f64(vmulq_n_f64(v35, v37.f64[0]), v36, v37, 1);
  v47 = vmlaq_laneq_f64(vmulq_n_f64(v39, v38.f64[0]), v40, v38, 1);
  v48 = vmlaq_laneq_f64(vmulq_n_f64(v34, v38.f64[0]), v29, v38, 1);
  v49 = vmlaq_laneq_f64(vmulq_n_f64(v35, v38.f64[0]), v36, v38, 1);
  v50 = a2[9];
  v51 = vmlaq_laneq_f64(vmulq_n_f64(v39, v50.f64[0]), v40, v50, 1);
  v52 = vmlaq_laneq_f64(vmulq_n_f64(v34, v50.f64[0]), v29, v50, 1);
  v53 = vmlaq_laneq_f64(vmulq_n_f64(v35, v50.f64[0]), v36, v50, 1);
  v54 = a2[12];
  v55 = vmlaq_laneq_f64(vmulq_n_f64(v39, v54.f64[0]), v40, v54, 1);
  v56 = vmlaq_laneq_f64(vmulq_n_f64(v34, v54.f64[0]), v29, v54, 1);
  v57 = vmlaq_laneq_f64(vmulq_n_f64(v35, v54.f64[0]), v36, v54, 1);
  v58 = a2[15];
  v59 = vmlaq_laneq_f64(vmulq_n_f64(v39, v58.f64[0]), v40, v58, 1);
  v60 = vmlaq_laneq_f64(vmulq_n_f64(v34, v58.f64[0]), v29, v58, 1);
  v61 = vmlaq_laneq_f64(vmulq_n_f64(v35, v58.f64[0]), v36, v58, 1);
  *(float64x2_t *)&v148[8] = v31;
  *(int8x16_t *)&v150[8] = vextq_s8(v33, v32, 8uLL);
  *(float64x2_t *)&v152[8] = v30;
  *(_OWORD *)&v154[8] = v20;
  *(float64x2_t *)&v156[8] = v21;
  *(_OWORD *)&v158[8] = v25;
  *(_QWORD *)&v39.f64[0] = vdupq_laneq_s64(*(int64x2_t *)v152, 1).u64[0];
  *(_QWORD *)&v39.f64[1] = v20;
  *(_QWORD *)&v40.f64[0] = vdupq_laneq_s64(*(int64x2_t *)v156, 1).u64[0];
  *(_QWORD *)&v40.f64[1] = v25;
  v62 = a2[1];
  v63 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v148, *(int64x2_t *)v150);
  v64 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v148, *(int64x2_t *)v150);
  v65 = vmlaq_laneq_f64(vmlaq_n_f64(v41, v63, v62.f64[0]), v64, v62, 1);
  v66 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v152, *(int64x2_t *)v154);
  v67 = vmlaq_laneq_f64(vmlaq_n_f64(v42, v66, v62.f64[0]), v39, v62, 1);
  v68 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v156, *(int64x2_t *)v158);
  v69 = vmlaq_laneq_f64(vmlaq_n_f64(v43, v68, v62.f64[0]), v40, v62, 1);
  v70 = a2[4];
  v71 = vmlaq_laneq_f64(vmlaq_n_f64(v44, v63, v70.f64[0]), v64, v70, 1);
  v72 = vmlaq_laneq_f64(vmlaq_n_f64(v45, v66, v70.f64[0]), v39, v70, 1);
  v73 = vmlaq_laneq_f64(vmlaq_n_f64(v46, v68, v70.f64[0]), v40, v70, 1);
  v74 = a2[7];
  v75 = vmlaq_laneq_f64(vmlaq_n_f64(v47, v63, v74.f64[0]), v64, v74, 1);
  v76 = vmlaq_laneq_f64(vmlaq_n_f64(v48, v66, v74.f64[0]), v39, v74, 1);
  v77 = vmlaq_laneq_f64(vmlaq_n_f64(v49, v68, v74.f64[0]), v40, v74, 1);
  v78 = a2[10];
  v79 = vmlaq_laneq_f64(vmlaq_n_f64(v51, v63, v78.f64[0]), v64, v78, 1);
  v80 = vmlaq_laneq_f64(vmlaq_n_f64(v52, v66, v78.f64[0]), v39, v78, 1);
  v81 = vmlaq_laneq_f64(vmlaq_n_f64(v53, v68, v78.f64[0]), v40, v78, 1);
  v82 = a2[13];
  v83 = vmlaq_laneq_f64(vmlaq_n_f64(v55, v63, v82.f64[0]), v64, v82, 1);
  v84 = vmlaq_laneq_f64(vmlaq_n_f64(v56, v66, v82.f64[0]), v39, v82, 1);
  v85 = vmlaq_laneq_f64(vmlaq_n_f64(v57, v68, v82.f64[0]), v40, v82, 1);
  v86 = a2[16];
  v87 = vmlaq_laneq_f64(vmlaq_n_f64(v59, v63, v86.f64[0]), v64, v86, 1);
  v88 = vmlaq_laneq_f64(vmlaq_n_f64(v60, v66, v86.f64[0]), v39, v86, 1);
  v89 = vmlaq_laneq_f64(vmlaq_n_f64(v61, v68, v86.f64[0]), v40, v86, 1);
  *(_QWORD *)&v148[24] = v33.i64[0];
  *(_QWORD *)&v150[24] = v32.i64[1];
  *(_QWORD *)&v152[24] = v143;
  *(float64_t *)&v154[24] = v145;
  *(float64_t *)&v156[24] = v144;
  *(float64_t *)&v158[24] = v146;
  *(_QWORD *)&v39.f64[0] = vdupq_laneq_s64(*(int64x2_t *)&v152[16], 1).u64[0];
  v39.f64[1] = v145;
  *(_QWORD *)&v40.f64[0] = vdupq_laneq_s64(*(int64x2_t *)&v156[16], 1).u64[0];
  v40.f64[1] = v146;
  v90 = a2[2];
  v91 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v148[16], *(int64x2_t *)&v150[16]);
  v92 = (float64x2_t)vzip2q_s64(*(int64x2_t *)&v148[16], *(int64x2_t *)&v150[16]);
  v93 = vmlaq_laneq_f64(vmlaq_n_f64(v65, v91, v90.f64[0]), v92, v90, 1);
  v94 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v152[16], *(int64x2_t *)&v154[16]);
  v95 = vmlaq_laneq_f64(vmlaq_n_f64(v67, v94, v90.f64[0]), v39, v90, 1);
  v96 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v156[16], *(int64x2_t *)&v158[16]);
  v97 = vmlaq_laneq_f64(vmlaq_n_f64(v69, v96, v90.f64[0]), v40, v90, 1);
  v98 = a2[5];
  v99 = vmlaq_laneq_f64(vmlaq_n_f64(v71, v91, v98.f64[0]), v92, v98, 1);
  v100 = vmlaq_laneq_f64(vmlaq_n_f64(v72, v94, v98.f64[0]), v39, v98, 1);
  v101 = vmlaq_laneq_f64(vmlaq_n_f64(v73, v96, v98.f64[0]), v40, v98, 1);
  v102 = a2[8];
  v141 = vmlaq_laneq_f64(vmlaq_n_f64(v76, v94, v102.f64[0]), v39, v102, 1);
  v142 = vmlaq_laneq_f64(vmlaq_n_f64(v75, v91, v102.f64[0]), v92, v102, 1);
  v140 = vmlaq_laneq_f64(vmlaq_n_f64(v77, v96, v102.f64[0]), v40, v102, 1);
  v103 = a2[11];
  v104 = vmlaq_laneq_f64(vmlaq_n_f64(v79, v91, v103.f64[0]), v92, v103, 1);
  v105 = vmlaq_laneq_f64(vmlaq_n_f64(v80, v94, v103.f64[0]), v39, v103, 1);
  v106 = vmlaq_laneq_f64(vmlaq_n_f64(v81, v96, v103.f64[0]), v40, v103, 1);
  v107 = a2[14];
  v108 = vmlaq_laneq_f64(vmlaq_n_f64(v83, v91, v107.f64[0]), v92, v107, 1);
  v109 = vmlaq_laneq_f64(vmlaq_n_f64(v84, v94, v107.f64[0]), v39, v107, 1);
  v110 = vmlaq_laneq_f64(vmlaq_n_f64(v85, v96, v107.f64[0]), v40, v107, 1);
  v111 = a2[17];
  v112 = vmlaq_laneq_f64(vmlaq_n_f64(v87, v91, v111.f64[0]), v92, v111, 1);
  v113 = vmlaq_laneq_f64(vmlaq_n_f64(v88, v94, v111.f64[0]), v39, v111, 1);
  v114 = vmlaq_laneq_f64(vmlaq_n_f64(v89, v96, v111.f64[0]), v40, v111, 1);
  v115 = vmlaq_laneq_f64(vmulq_n_f64(v93, v147.f64[0]), v99, v147, 1);
  v116 = vmlaq_laneq_f64(vmulq_n_f64(v93, v149.f64[0]), v99, v149, 1);
  v117 = vmlaq_laneq_f64(vmulq_n_f64(v93, v151.f64[0]), v99, v151, 1);
  _Q7 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v93, *(double *)v153.i64), v99, (float64x2_t)v153, 1), v142, *(double *)v154), v104, *(float64x2_t *)v154, 1), v108, *(double *)&v154[16]), v112, *(float64x2_t *)&v154[16], 1);
  v119 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v95, *(double *)v153.i64), v100, (float64x2_t)v153, 1), v141, *(double *)v154), v105, *(float64x2_t *)v154, 1), v109, *(double *)&v154[16]), v113, *(float64x2_t *)&v154[16], 1);
  v120 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v97, *(double *)v153.i64), v101, (float64x2_t)v153, 1), v140, *(double *)v154), v106, *(float64x2_t *)v154, 1), v110, *(double *)&v154[16]), v114, *(float64x2_t *)&v154[16], 1);
  _Q4 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v93, *(double *)v155.i64), v99, (float64x2_t)v155, 1), v142, *(double *)v156), v104, *(float64x2_t *)v156, 1), v108, *(double *)&v156[16]), v112, *(float64x2_t *)&v156[16], 1);
  v122 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v95, *(double *)v155.i64), v100, (float64x2_t)v155, 1), v141, *(double *)v156), v105, *(float64x2_t *)v156, 1), v109, *(double *)&v156[16]), v113, *(float64x2_t *)&v156[16], 1);
  _Q2 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v97, *(double *)v155.i64), v101, (float64x2_t)v155, 1), v140, *(double *)v156), v106, *(float64x2_t *)v156, 1), v110, *(double *)&v156[16]), v114, *(float64x2_t *)&v156[16], 1);
  v124 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v93, *(double *)v157.i64), v99, (float64x2_t)v157, 1), v142, *(double *)v158), v104, *(float64x2_t *)v158, 1), v108, *(double *)&v158[16]), v112, *(float64x2_t *)&v158[16], 1);
  v125 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v95, *(double *)v157.i64), v100, (float64x2_t)v157, 1), v141, *(double *)v158), v105, *(float64x2_t *)v158, 1), v109, *(double *)&v158[16]), v113, *(float64x2_t *)&v158[16], 1);
  v126 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v97, *(double *)v157.i64), v101, (float64x2_t)v157, 1), v140, *(double *)v158), v106, *(float64x2_t *)v158, 1), v110, *(double *)&v158[16]), v114, *(float64x2_t *)&v158[16], 1);
  *a2 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v115, v142, *(double *)v148), v104, *(float64x2_t *)v148, 1), v108, *(double *)&v148[16]), v112, *(float64x2_t *)&v148[16], 1);
  a2[1] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v95, v147.f64[0]), v100, v147, 1), v141, *(double *)v148), v105, *(float64x2_t *)v148, 1), v109, *(double *)&v148[16]), v113, *(float64x2_t *)&v148[16], 1);
  a2[2] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v97, v147.f64[0]), v101, v147, 1), v140, *(double *)v148), v106, *(float64x2_t *)v148, 1), v110, *(double *)&v148[16]), v114, *(float64x2_t *)&v148[16], 1);
  a2[3] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v116, v142, *(double *)v150), v104, *(float64x2_t *)v150, 1), v108, *(double *)&v150[16]), v112, *(float64x2_t *)&v150[16], 1);
  a2[4] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v95, v149.f64[0]), v100, v149, 1), v141, *(double *)v150), v105, *(float64x2_t *)v150, 1), v109, *(double *)&v150[16]), v113, *(float64x2_t *)&v150[16], 1);
  a2[5] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v97, v149.f64[0]), v101, v149, 1), v140, *(double *)v150), v106, *(float64x2_t *)v150, 1), v110, *(double *)&v150[16]), v114, *(float64x2_t *)&v150[16], 1);
  a2[6] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v117, v142, *(double *)v152), v104, *(float64x2_t *)v152, 1), v108, *(double *)&v152[16]), v112, *(float64x2_t *)&v152[16], 1);
  a2[7] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v95, v151.f64[0]), v100, v151, 1), v141, *(double *)v152), v105, *(float64x2_t *)v152, 1), v109, *(double *)&v152[16]), v113, *(float64x2_t *)&v152[16], 1);
  a2[8] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v97, v151.f64[0]), v101, v151, 1), v140, *(double *)v152), v106, *(float64x2_t *)v152, 1), v110, *(double *)&v152[16]), v114, *(float64x2_t *)&v152[16], 1);
  a2[9] = _Q7;
  a2[10] = v119;
  a2[11] = v120;
  a2[12] = _Q4;
  a2[13] = v122;
  a2[14] = _Q2;
  a2[15] = v124;
  a2[16] = v125;
  a2[17] = v126;
  v127 = *(int64x2_t *)(a1 + 32);
  _Q2.f64[0] = *(float64_t *)(a1 + 80);
  _Q3 = *(int64x2_t *)(a1 + 64);
  _Q4.f64[0] = *(float64_t *)(a1 + 112);
  _Q5 = *(float64x2_t *)(a1 + 96);
  v130 = (float64x2_t)vzip1q_s64(*(int64x2_t *)a1, v127);
  v131 = (float64x2_t)vzip2q_s64(*(int64x2_t *)a1, v127);
  v132 = vextq_s8((int8x16_t)v131, (int8x16_t)vdupq_laneq_s64(_Q3, 1), 8uLL);
  v133 = vmlsq_laneq_f64(vmulq_n_f64(v130, vnegq_f64(_Q5).f64[0]), v131, _Q5, 1);
  v134 = vzip1q_s64(_Q3, (int64x2_t)v131);
  _Q3.i64[0] = *(_QWORD *)(a1 + 72);
  __asm
  {
    FMLS            D7, D3, V5.D[1]
    FMLS            D7, D2, V4.D[0]
  }
  _Q3.i64[0] = vdupq_laneq_s64(v134, 1).u64[0];
  _Q3.i64[1] = v132.i64[0];
  v132.i64[0] = v134.i64[0];
  result = _Q2.f64[0];
  _Q7.f64[1] = 1.0;
  _Q2.f64[0] = *(float64_t *)(a1 + 16);
  _Q2.f64[1] = *(float64_t *)(a1 + 48);
  *(float64x2_t *)(a1 + 64) = _Q2;
  *(_OWORD *)(a1 + 80) = *(unint64_t *)&result;
  *(float64x2_t *)a1 = v130;
  *(_OWORD *)(a1 + 16) = v132.u64[0];
  *(int64x2_t *)(a1 + 32) = _Q3;
  *(_OWORD *)(a1 + 48) = v132.u64[1];
  *(float64x2_t *)(a1 + 96) = vmlsq_lane_f64(v133, _Q2, _Q4.f64[0], 0);
  *(float64x2_t *)(a1 + 112) = _Q7;
  return result;
}

double sub_20FC89C94@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  double result;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  int v20;
  __int128 v21;
  int v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[288];
  int v32;
  char v33;
  float64x2_t __src[18];
  __int128 v35;
  uint64_t v36;

  v35 = 0uLL;
  v36 = 0;
  if (*(_DWORD *)a1 == 3)
    v4 = 2;
  else
    v4 = 3;
  v6 = *(_QWORD *)(a1 + 144);
  v5 = *(_QWORD *)(a1 + 152);
  v7 = (v5 - v6) >> 4;
  if (v5 != v6)
  {
    if ((unint64_t)(v5 - v6) >= 0x8AD8F2FBA938681)
      sub_20E867F44();
    *(_QWORD *)&v35 = operator new(472 * v7);
    *((_QWORD *)&v35 + 1) = v35;
    v36 = v35 + 472 * v7;
  }
  if (sub_20FC85388((void *)(a1 + 192), __src))
  {
    if (v5 != v6)
    {
      v9 = 0;
      if (v7 <= 1)
        v7 = 1;
      do
      {
        v18 = *(_QWORD *)(a1 + 144);
        if (*(_QWORD *)(v18 + v9) != *(_QWORD *)(a1 + 8) || *(_DWORD *)(v18 + v9 + 8) != *(_DWORD *)(a1 + 16))
        {
          v10 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v19 = *(_QWORD *)(a1 + 8);
          *((_QWORD *)&v19 + 1) = v10;
          v20 = -1;
          v21 = *(_OWORD *)(v18 + v9);
          v22 = -1;
          v11 = (__int128 *)(*(_QWORD *)(a1 + 168) + 8 * v9);
          v13 = v11[4];
          v12 = v11[5];
          v14 = v11[7];
          v29 = v11[6];
          v30 = v14;
          v27 = v13;
          v28 = v12;
          v16 = *v11;
          v15 = v11[1];
          v17 = v11[3];
          v25 = v11[2];
          v26 = v17;
          v23 = v16;
          v24 = v15;
          memcpy(v31, __src, sizeof(v31));
          v32 = v4;
          v33 = *(_BYTE *)(a1 + 488);
          sub_20F235770((char **)&v35, &v19);
        }
        v9 += 16;
        --v7;
      }
      while (v7);
    }
    result = *(double *)&v35;
    *(_OWORD *)a2 = v35;
    *(_QWORD *)(a2 + 16) = v36;
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    if ((_QWORD)v35)
      operator delete((void *)v35);
  }
  return result;
}

void sub_20FC89E5C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 112);
  if (v3)
  {
    *(_QWORD *)(v1 - 104) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_20FC89E80@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v4;
  float64x2_t *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  unint64_t v15;
  float64_t v16;
  float64_t v17;
  BOOL v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  int8x16_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  int8x16_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  int64x2_t v125;
  int64x2_t v126;
  int64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  int8x16_t v134;
  int64x2_t v135;
  float64x2_t v136;
  __n128 result;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  double v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  _BYTE v152[32];
  float64x2_t v153;
  _BYTE v154[32];
  _BYTE v155[32];
  int64x2_t v156;
  _BYTE v157[32];
  int64x2_t v158;
  _BYTE v159[32];
  int64x2_t v160;
  _BYTE v161[32];

  v4 = *(_OWORD *)(a1 + 16);
  v5 = (float64x2_t *)(a2 + 272);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 28) = *(_OWORD *)(a1 + 28);
  v6 = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(a2 + 112) = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 128) = v6;
  v7 = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(a2 + 144) = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(a2 + 160) = v7;
  v8 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 64) = v8;
  v9 = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 96) = v9;
  memcpy((void *)(a2 + 176), (const void *)(a1 + 176), 0x120uLL);
  v10 = 0;
  v11 = 0;
  *(_DWORD *)(a2 + 464) = *(_DWORD *)(a1 + 464);
  *(_BYTE *)(a2 + 468) = *(_BYTE *)(a1 + 468);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a2 + 40);
  *(_OWORD *)a2 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)a1;
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a1 + 16);
  v12 = *(float64x2_t *)(a2 + 48);
  *(_QWORD *)&v13.f64[0] = vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL).u64[0];
  v14 = *(float64x2_t *)(a2 + 80);
  v15 = vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL).u64[0];
  v144 = (float64x2_t)vextq_s8(*(int8x16_t *)(a2 + 112), *(int8x16_t *)(a2 + 112), 8uLL);
  v145 = *(double *)(a2 + 64);
  *(float64_t *)v152 = v145;
  v151 = v12;
  v16 = *(double *)(a2 + 96);
  *(float64_t *)v154 = v16;
  v153 = v14;
  v17 = *(double *)(a2 + 128);
  *(float64_t *)v155 = v17;
  v142 = *(float64x2_t *)(a2 + 112);
  do
  {
    v156.i64[v10] = 0;
    v18 = v11 < 2;
    if (v11 < 2)
      ++v11;
    else
      v11 = 0;
    if (v18)
      ++v10;
    else
      v10 += 4;
  }
  while (v10 != 18);
  v19 = *(float64x2_t *)(a2 + 176);
  v20 = (float64x2_t)vzip1q_s64((int64x2_t)v12, (int64x2_t)v14);
  v21 = (float64x2_t)vzip2q_s64((int64x2_t)v12, (int64x2_t)v14);
  v22 = vmlaq_laneq_f64(vmulq_n_f64(v20, v19.f64[0]), v21, v19, 1);
  v23 = (float64x2_t)vzip1q_s64((int64x2_t)v142, v156);
  *(_QWORD *)&v24.f64[0] = vdupq_laneq_s64((int64x2_t)v142, 1).u64[0];
  *(_QWORD *)&v24.f64[1] = v156.i64[1];
  v25 = vmlaq_laneq_f64(vmulq_n_f64(v23, v19.f64[0]), v24, v19, 1);
  v26 = (float64x2_t)vzip1q_s64(v158, v160);
  *(_QWORD *)&v27.f64[0] = vdupq_laneq_s64(v158, 1).u64[0];
  *(_QWORD *)&v27.f64[1] = v160.i64[1];
  v28 = vmlaq_laneq_f64(vmulq_n_f64(v26, v19.f64[0]), v27, v19, 1);
  v29 = *(float64x2_t *)(a2 + 224);
  v140 = vmlaq_laneq_f64(vmulq_n_f64(v20, v29.f64[0]), v21, v29, 1);
  v30 = vmlaq_laneq_f64(vmulq_n_f64(v23, v29.f64[0]), v24, v29, 1);
  v31 = vmlaq_laneq_f64(vmulq_n_f64(v26, v29.f64[0]), v27, v29, 1);
  v32 = vmlaq_laneq_f64(vmulq_n_f64(v20, v5->f64[0]), v21, *v5, 1);
  v33 = v5[3];
  v34 = vmlaq_laneq_f64(vmulq_n_f64(v23, v5->f64[0]), v24, *v5, 1);
  v35 = vmlaq_laneq_f64(vmulq_n_f64(v26, v5->f64[0]), v27, *v5, 1);
  v36 = vmlaq_laneq_f64(vmulq_n_f64(v20, v33.f64[0]), v21, v33, 1);
  v149 = vmlaq_laneq_f64(vmulq_n_f64(v23, v33.f64[0]), v24, v33, 1);
  v147 = vmlaq_laneq_f64(vmulq_n_f64(v26, v33.f64[0]), v27, v33, 1);
  v37 = v5[6];
  v38 = vmlaq_laneq_f64(vmulq_n_f64(v20, v37.f64[0]), v21, v37, 1);
  v39 = vmlaq_laneq_f64(vmulq_n_f64(v23, v37.f64[0]), v24, v37, 1);
  v40 = vmlaq_laneq_f64(vmulq_n_f64(v26, v37.f64[0]), v27, v37, 1);
  v41 = v5[9];
  v42 = vmlaq_laneq_f64(vmulq_n_f64(v20, v41.f64[0]), v21, v41, 1);
  v43 = vmlaq_laneq_f64(vmulq_n_f64(v23, v41.f64[0]), v24, v41, 1);
  v44 = vmlaq_laneq_f64(vmulq_n_f64(v26, v41.f64[0]), v27, v41, 1);
  v23.f64[0] = v16;
  v23.f64[1] = v14.f64[0];
  *(_QWORD *)&v14.f64[1] = v15;
  v27.f64[0] = v145;
  v27.f64[1] = v12.f64[0];
  v26.f64[0] = v12.f64[0];
  *(_QWORD *)&v12.f64[1] = v15;
  v45.f64[0] = v13.f64[0];
  v45.f64[1] = v16;
  v143 = *(float64x2_t *)(a2 + 144);
  v21.f64[0] = *(float64_t *)(a2 + 160);
  v141 = v21.f64[0];
  v46 = (float64x2_t)vextq_s8((int8x16_t)v143, (int8x16_t)v21, 8uLL);
  v47 = (int8x16_t)vmlsq_f64(vmulq_f64(v45, v143), v12, v46);
  v41.f64[0] = v17;
  v48.f64[0] = v17;
  v48.f64[1] = v142.f64[0];
  v49 = vmulq_f64(v27, v46);
  v50 = vmulq_f64(v48, v46);
  v26.f64[1] = v13.f64[0];
  v46.f64[0] = v144.f64[0];
  v46.f64[1] = v17;
  v13.f64[1] = v145;
  v51 = (float64x2_t)vzip1q_s64((int64x2_t)v21, (int64x2_t)v143);
  v52 = vmlsq_f64(v50, v46, v51);
  v53 = (int8x16_t)vmlsq_f64(vmulq_f64(v14, v51), v23, v143);
  *(float64x2_t *)&v152[8] = vmlsq_f64(v49, v13, v51);
  *(int8x16_t *)&v154[8] = vextq_s8(v47, v53, 8uLL);
  *(float64x2_t *)&v155[8] = v52;
  *(float64x2_t *)&v157[8] = v26;
  v23.f64[0] = v142.f64[0];
  v23.f64[1] = v144.f64[0];
  *(float64x2_t *)&v159[8] = v14;
  *(float64x2_t *)&v161[8] = v23;
  *(_QWORD *)&v23.f64[0] = vdupq_laneq_s64(*(int64x2_t *)v155, 1).u64[0];
  v23.f64[1] = v26.f64[0];
  *(_QWORD *)&v49.f64[0] = vdupq_laneq_s64(*(int64x2_t *)v159, 1).u64[0];
  v49.f64[1] = *(float64_t *)&v161[8];
  v54 = *(float64x2_t *)(a2 + 192);
  v55 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v152, *(int64x2_t *)v154);
  v56 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v152, *(int64x2_t *)v154);
  v57 = vmlaq_laneq_f64(vmlaq_n_f64(v22, v55, v54.f64[0]), v56, v54, 1);
  _Q16 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v155, *(int64x2_t *)v157);
  v59 = vmlaq_laneq_f64(vmlaq_n_f64(v25, _Q16, v54.f64[0]), v23, v54, 1);
  v60 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v159, *(int64x2_t *)v161);
  v61 = vmlaq_laneq_f64(vmlaq_n_f64(v28, v60, v54.f64[0]), v49, v54, 1);
  v24.f64[0] = v16;
  v62 = *(float64x2_t *)(a2 + 240);
  v63 = vmlaq_laneq_f64(vmlaq_n_f64(v140, v55, v62.f64[0]), v56, v62, 1);
  v64 = vmlaq_laneq_f64(vmlaq_n_f64(v30, _Q16, v62.f64[0]), v23, v62, 1);
  v45.f64[0] = v41.f64[0];
  v65 = vmlaq_laneq_f64(vmlaq_n_f64(v31, v60, v62.f64[0]), v49, v62, 1);
  v66 = v5[1];
  v67 = vmlaq_laneq_f64(vmlaq_n_f64(v32, v55, v66.f64[0]), v56, v66, 1);
  v68 = vmlaq_laneq_f64(vmlaq_n_f64(v34, _Q16, v66.f64[0]), v23, v66, 1);
  v69 = vmlaq_laneq_f64(vmlaq_n_f64(v35, v60, v66.f64[0]), v49, v66, 1);
  v70 = v5[4];
  v71 = vmlaq_laneq_f64(vmlaq_n_f64(v36, v55, v70.f64[0]), v56, v70, 1);
  v72 = vmlaq_laneq_f64(vmlaq_n_f64(v149, _Q16, v70.f64[0]), v23, v70, 1);
  v73 = vmlaq_laneq_f64(vmlaq_n_f64(v147, v60, v70.f64[0]), v49, v70, 1);
  v74 = v5[7];
  v75 = vmlaq_laneq_f64(vmlaq_n_f64(v38, v55, v74.f64[0]), v56, v74, 1);
  v76 = vmlaq_laneq_f64(vmlaq_n_f64(v39, _Q16, v74.f64[0]), v23, v74, 1);
  v77 = vmlaq_laneq_f64(vmlaq_n_f64(v40, v60, v74.f64[0]), v49, v74, 1);
  v78 = v5[10];
  v79 = vmlaq_laneq_f64(vmlaq_n_f64(v42, v55, v78.f64[0]), v56, v78, 1);
  v80 = vmlaq_laneq_f64(vmlaq_n_f64(v43, _Q16, v78.f64[0]), v23, v78, 1);
  v81 = vmlaq_laneq_f64(vmlaq_n_f64(v44, v60, v78.f64[0]), v49, v78, 1);
  *(_QWORD *)&v152[24] = v47.i64[0];
  *(_QWORD *)&v154[24] = v53.i64[1];
  *(_QWORD *)&v155[24] = *(_OWORD *)&vmlsq_laneq_f64(vmulq_f64(v144, v143), v142, v143, 1);
  *(float64_t *)&v157[24] = v145;
  *(float64_t *)&v159[24] = v24.f64[0];
  *(float64_t *)&v161[24] = v45.f64[0];
  *(_QWORD *)&v82.f64[0] = vdupq_laneq_s64(*(int64x2_t *)&v155[16], 1).u64[0];
  v82.f64[1] = v145;
  v146 = *(float64x2_t *)&v161[16];
  *(_QWORD *)&v23.f64[0] = vdupq_laneq_s64(*(int64x2_t *)&v159[16], 1).u64[0];
  v23.f64[1] = v45.f64[0];
  v83 = *(float64x2_t *)(a2 + 208);
  v84 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v152[16], *(int64x2_t *)&v154[16]);
  v85 = (float64x2_t)vzip2q_s64(*(int64x2_t *)&v152[16], *(int64x2_t *)&v154[16]);
  v86 = vmlaq_laneq_f64(vmlaq_n_f64(v57, v84, v83.f64[0]), v85, v83, 1);
  v87 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v155[16], *(int64x2_t *)&v157[16]);
  v88 = vmlaq_laneq_f64(vmlaq_n_f64(v59, v87, v83.f64[0]), v82, v83, 1);
  v89 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v159[16], *(int64x2_t *)&v161[16]);
  v90 = vmlaq_laneq_f64(vmlaq_n_f64(v61, v89, v83.f64[0]), v23, v83, 1);
  v91 = *(float64x2_t *)(a2 + 256);
  v92 = vmlaq_laneq_f64(vmlaq_n_f64(v63, v84, v91.f64[0]), v85, v91, 1);
  v93 = vmlaq_laneq_f64(vmlaq_n_f64(v64, v87, v91.f64[0]), v82, v91, 1);
  v94 = vmlaq_laneq_f64(vmlaq_n_f64(v65, v89, v91.f64[0]), v23, v91, 1);
  v95 = v5[2];
  v96 = vmlaq_laneq_f64(vmlaq_n_f64(v67, v84, v95.f64[0]), v85, v95, 1);
  v138 = vmlaq_laneq_f64(vmlaq_n_f64(v69, v89, v95.f64[0]), v23, v95, 1);
  v139 = vmlaq_laneq_f64(vmlaq_n_f64(v68, v87, v95.f64[0]), v82, v95, 1);
  v97 = v5[5];
  v98 = vmlaq_laneq_f64(vmlaq_n_f64(v71, v84, v97.f64[0]), v85, v97, 1);
  v148 = vmlaq_laneq_f64(vmlaq_n_f64(v73, v89, v97.f64[0]), v23, v97, 1);
  v150 = vmlaq_laneq_f64(vmlaq_n_f64(v72, v87, v97.f64[0]), v82, v97, 1);
  v99 = v5[8];
  v100 = vmlaq_laneq_f64(vmlaq_n_f64(v75, v84, v99.f64[0]), v85, v99, 1);
  v101 = vmlaq_laneq_f64(vmlaq_n_f64(v76, v87, v99.f64[0]), v82, v99, 1);
  v102 = vmlaq_laneq_f64(vmlaq_n_f64(v77, v89, v99.f64[0]), v23, v99, 1);
  v103 = v5[11];
  v104 = vmlaq_laneq_f64(vmlaq_n_f64(v79, v84, v103.f64[0]), v85, v103, 1);
  v105 = vmlaq_laneq_f64(vmlaq_n_f64(v80, v87, v103.f64[0]), v82, v103, 1);
  v106 = vmlaq_laneq_f64(vmlaq_n_f64(v81, v89, v103.f64[0]), v23, v103, 1);
  v107 = vmlaq_laneq_f64(vmulq_n_f64(v86, v151.f64[0]), v92, v151, 1);
  v108 = vmlaq_laneq_f64(vmulq_n_f64(v90, v151.f64[0]), v94, v151, 1);
  v109 = vmlaq_laneq_f64(vmulq_n_f64(v90, v153.f64[0]), v94, v153, 1);
  _Q7 = vmlaq_laneq_f64(vmulq_n_f64(v90, v142.f64[0]), v94, v142, 1);
  v111 = vmlaq_laneq_f64(vmulq_n_f64(v90, *(double *)v156.i64), v94, (float64x2_t)v156, 1);
  v112 = vmlaq_laneq_f64(vmulq_n_f64(v90, *(double *)v158.i64), v94, (float64x2_t)v158, 1);
  v113 = vmlaq_laneq_f64(vmulq_n_f64(v88, *(double *)v160.i64), v93, (float64x2_t)v160, 1);
  v114 = vmlaq_laneq_f64(vmulq_n_f64(v90, *(double *)v160.i64), v94, (float64x2_t)v160, 1);
  v115 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v86, v153.f64[0]), v92, v153, 1), v96, *(double *)v154), v98, *(float64x2_t *)v154, 1), v100, *(double *)&v154[16]), v104, *(float64x2_t *)&v154[16], 1);
  v116 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v86, v142.f64[0]), v92, v142, 1), v96, *(double *)v155), v98, *(float64x2_t *)v155, 1), v100, *(double *)&v155[16]), v104, *(float64x2_t *)&v155[16], 1);
  _Q6 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v86, *(double *)v156.i64), v92, (float64x2_t)v156, 1), v96, *(double *)v157), v98, *(float64x2_t *)v157, 1), v100, *(double *)&v157[16]), v104, *(float64x2_t *)&v157[16], 1);
  _Q5 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v88, *(double *)v156.i64), v93, (float64x2_t)v156, 1), v139, *(double *)v157), v150, *(float64x2_t *)v157, 1), v101, *(double *)&v157[16]), v105, *(float64x2_t *)&v157[16], 1);
  v119 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v111, v138, *(double *)v157), v148, *(float64x2_t *)v157, 1), v102, *(double *)&v157[16]), v106, *(float64x2_t *)&v157[16], 1);
  v120 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v86, *(double *)v158.i64), v92, (float64x2_t)v158, 1), v96, *(double *)v159), v98, *(float64x2_t *)v159, 1), v100, *(double *)&v159[16]), v104, *(float64x2_t *)&v159[16], 1);
  _Q2 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v88, *(double *)v158.i64), v93, (float64x2_t)v158, 1), v139, *(double *)v159), v150, *(float64x2_t *)v159, 1), v101, *(double *)&v159[16]), v105, *(float64x2_t *)&v159[16], 1);
  v122 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v112, v138, *(double *)v159), v148, *(float64x2_t *)v159, 1), v102, *(double *)&v159[16]), v106, *(float64x2_t *)&v159[16], 1);
  v123 = *(float64x2_t *)v161;
  v124 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v86, *(double *)v160.i64), v92, (float64x2_t)v160, 1), v96, *(double *)v161), v98, *(float64x2_t *)v161, 1);
  *(float64x2_t *)(a2 + 176) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v107, v96, *(double *)v152), v98, *(float64x2_t *)v152, 1), v100, *(double *)&v152[16]), v104, *(float64x2_t *)&v152[16], 1);
  *(float64x2_t *)(a2 + 192) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v88, v151.f64[0]), v93, v151, 1), v139, *(double *)v152), v150, *(float64x2_t *)v152, 1), v101, *(double *)&v152[16]), v105, *(float64x2_t *)&v152[16], 1);
  *(float64x2_t *)(a2 + 208) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v108, v138, *(double *)v152), v148, *(float64x2_t *)v152, 1), v102, *(double *)&v152[16]), v106, *(float64x2_t *)&v152[16], 1);
  *(float64x2_t *)(a2 + 224) = v115;
  *(float64x2_t *)(a2 + 240) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v88, v153.f64[0]), v93, v153, 1), v139, *(double *)v154), v150, *(float64x2_t *)v154, 1), v101, *(double *)&v154[16]), v105, *(float64x2_t *)&v154[16], 1);
  *(float64x2_t *)(a2 + 256) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v109, v138, *(double *)v154), v148, *(float64x2_t *)v154, 1), v102, *(double *)&v154[16]), v106, *(float64x2_t *)&v154[16], 1);
  *v5 = v116;
  v5[1] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v88, v142.f64[0]), v93, v142, 1), v139, *(double *)v155), v150, *(float64x2_t *)v155, 1), v101, *(double *)&v155[16]), v105, *(float64x2_t *)&v155[16], 1);
  v5[2] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(_Q7, v138, *(double *)v155), v148, *(float64x2_t *)v155, 1), v102, *(double *)&v155[16]), v106, *(float64x2_t *)&v155[16], 1);
  v5[3] = _Q6;
  v5[4] = _Q5;
  v5[5] = v119;
  v5[6] = v120;
  v5[7] = _Q2;
  v5[8] = v122;
  v5[9] = vmlaq_laneq_f64(vmlaq_n_f64(v124, v100, v146.f64[0]), v104, v146, 1);
  v5[10] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v113, v139, v123.f64[0]), v150, v123, 1), v101, v146.f64[0]), v105, v146, 1);
  v5[11] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v114, v138, v123.f64[0]), v148, v123, 1), v102, v146.f64[0]), v106, v146, 1);
  v125 = *(int64x2_t *)(a2 + 48);
  v126 = *(int64x2_t *)(a2 + 80);
  _Q2.f64[0] = *(float64_t *)(a2 + 128);
  v127 = *(int64x2_t *)(a2 + 112);
  v128 = (float64x2_t)vzip1q_s64(v125, v126);
  v129 = (float64x2_t)vzip2q_s64(v125, v126);
  _Q7.f64[1] = v143.f64[1];
  _Q5.f64[0] = *(float64_t *)(a2 + 120);
  __asm { FMLS            D6, D5, V7.D[1] }
  v134 = vextq_s8((int8x16_t)v129, (int8x16_t)vdupq_laneq_s64(v127, 1), 8uLL);
  v135 = vzip1q_s64(v127, (int64x2_t)v129);
  _Q16.f64[0] = v141;
  __asm { FMLS            D6, D2, V16.D[0] }
  v136 = vmlsq_laneq_f64(vmulq_n_f64(v128, vnegq_f64(v143).f64[0]), v129, v143, 1);
  result.n128_u64[0] = vdupq_laneq_s64(v135, 1).u64[0];
  result.n128_u64[1] = v134.i64[0];
  v134.i64[0] = *(_QWORD *)&_Q2.f64[0];
  _Q6.f64[1] = 1.0;
  _Q2.f64[0] = *(float64_t *)(a2 + 64);
  _Q2.f64[1] = *(float64_t *)(a2 + 96);
  *(float64x2_t *)(a2 + 112) = _Q2;
  *(_OWORD *)(a2 + 128) = v134.u64[0];
  *(float64x2_t *)(a2 + 48) = v128;
  *(_OWORD *)(a2 + 64) = v135.u64[0];
  *(__n128 *)(a2 + 80) = result;
  *(_OWORD *)(a2 + 96) = v134.u64[1];
  *(float64x2_t *)(a2 + 144) = vmlsq_lane_f64(v136, _Q2, v141, 0);
  *(float64x2_t *)(a2 + 160) = _Q6;
  return result;
}

void *sub_20FC8A664@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  uint64_t v7;
  size_t v8;
  void *v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  size_t v22;
  size_t v23;
  void *result;
  void *v25;
  void *__src[2];
  int v27;
  int v28;
  _DWORD v29[4];
  uint64_t v30;
  int v31;

  v29[0] = a2;
  v29[1] = a2;
  v29[2] = a2;
  v30 = a1;
  v31 = 0;
  v6 = 6 * a3;
  v7 = (6 * a3 + 15);
  v27 = v7;
  v28 = 6 * a3 + 15;
  v8 = (8 * v7 * (unint64_t)v7 + 31) & 0xFFFFFFFFFFFFFFE0;
  __src[1] = (void *)(v8 >> 3);
  v9 = operator new(v8, (std::align_val_t)0x20uLL);
  __src[0] = v9;
  bzero(v9, 8 * (v7 * v7));
  v10 = v6 + 16;
  if ((_DWORD)v7 == 1)
  {
    v11 = 0;
  }
  else
  {
    v11 = 0;
    v12 = -16 - v6;
    if (v10 >= 0)
      v12 = v6 + 16;
    v13 = v12 * (unint64_t)(v6 + 14);
    if ((_DWORD)v13)
      v14 = v10 < 0;
    else
      v14 = 0;
    if (!v14 && (v13 & 0xFFFFFFFF00000000) == 0)
    {
      v15 = 0;
      v11 = v7 - 1;
      v16 = v7 - 1;
      do
      {
        *((_QWORD *)v9 + v15) = 0x3FF0000000000000;
        *((_QWORD *)v9 + v10 + v15) = 0x3FF0000000000000;
        v15 += 12 * a3 + 32;
        v16 -= 2;
      }
      while (v16);
    }
  }
  v17 = (v6 + 14) - v11 + 1;
  v18 = v10 * v11;
  do
  {
    *((_QWORD *)v9 + v18) = 0x3FF0000000000000;
    v18 += v10;
    --v17;
  }
  while (v17);
  sub_20FC8A82C((uint64_t)v29, (char **)__src);
  v19 = v27;
  v20 = v28;
  v21 = v28 * v27;
  v22 = 8 * (v28 * v27);
  v23 = (v22 + 31) & 0xFFFFFFFE0;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = v23 >> 3;
  result = operator new(v23, (std::align_val_t)0x20uLL);
  *(_QWORD *)a4 = result;
  v25 = __src[0];
  if (v21)
    result = memcpy(result, __src[0], v22);
  *(_DWORD *)(a4 + 16) = v19;
  *(_DWORD *)(a4 + 20) = v20;
  *(_QWORD *)(a4 + 24) = 0xFFFFFFFF00000001;
  if (v25)
    return (void *)MEMORY[0x212BC6368](v25, 0x1000C8000313F17);
  return result;
}

void sub_20FC8A804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    MEMORY[0x212BC6368](a10, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

__n128 sub_20FC8A82C(uint64_t a1, char **a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  BOOL v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t i;
  char *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __n128 result;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  __int128 v43;
  char *v44;
  __int128 v45;
  __n128 *v46;
  __n128 *v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  __int128 *v54;
  __int128 *v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 *v60;
  __int128 v61;
  __int128 v62;
  __int128 *v63;
  __int128 v64;
  __int128 v65;
  __int128 *v66;
  __int128 v67;
  __int128 v68;
  __int128 *v69;
  __int128 v70;
  __int128 v71;
  _OWORD *v72;
  __int128 v73;
  __int128 v74;
  _OWORD *v75;
  __int128 v76;
  __int128 v77;
  _OWORD *v78;
  __int128 v79;
  __int128 v80;
  _OWORD *v81;
  __int128 v82;
  __int128 v83;
  _OWORD *v84;
  __int128 v85;
  __int128 v86;
  _OWORD *v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  unsigned int v93;
  int v94;
  unsigned int v95;
  char *v96;
  __int128 *v97;
  __int128 *v98;
  char *v99;
  __int128 v100;
  __int128 v101;
  char *v102;
  __int128 v103;
  __int128 v104;
  __int128 *v105;
  char *v106;
  __int128 v107;
  __int128 v108;
  __int128 *v109;
  char *v110;
  __int128 v111;
  __int128 v112;
  __int128 *v113;
  char *v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  char *v118;
  __int128 v119;

  v4 = *((_DWORD *)a2 + 5);
  v5 = v4;
  if (v4 != *((_DWORD *)a2 + 4))
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/VIOPriorUtil.cpp", 62, (uint64_t)"fg_info.columns() == fg_info.rows()", 35, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_51;
    }
    v5 = *((_DWORD *)a2 + 4);
    v4 = *((_DWORD *)a2 + 5);
  }
  if (v5 * v4)
    bzero(*a2, 8 * v5 * v4);
  if (v4 >= v5)
    v6 = v5;
  else
    v6 = v4;
  if ((_DWORD)v6)
  {
    v7 = v5 + 1;
    v8 = *a2;
    if ((_DWORD)v6 == 1)
    {
      v9 = 0;
    }
    else
    {
      v9 = 0;
      if (v7 < 0)
        v10 = ~v5;
      else
        v10 = v5 + 1;
      v11 = (v6 - 1) * (unint64_t)v10;
      v12 = v5 != -1 && (unint64_t)(v6 - 1) >> 32 != 0;
      if ((_DWORD)v11)
        v13 = v7 < 0;
      else
        v13 = 0;
      if (!v13 && (v11 & 0xFFFFFFFF00000000) == 0 && !v12)
      {
        v14 = 0;
        v9 = v6 & 0xFFFFFFFE;
        v15 = v9;
        do
        {
          v8[v14] = 0x3FF0000000000000;
          v8[v7 + v14] = 0x3FF0000000000000;
          v14 += 2 * v5 + 2;
          v15 -= 2;
        }
        while (v15);
        if (v9 == v6)
          goto LABEL_29;
      }
    }
    v16 = v6 - v9;
    v17 = v7 * v9;
    do
    {
      v8[v17] = 0x3FF0000000000000;
      v17 += v7;
      --v16;
    }
    while (v16);
  }
LABEL_29:
  for (i = 0; i != 20; i += 4)
  {
    while (1)
    {
      v32 = *(_DWORD *)((char *)&xmmword_2103BBFC0 + i);
      if ((v32 + 3) > *(_DWORD *)a1
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/VIOPriorUtil.cpp", 77, (uint64_t)"(block_rows + flint_info_offsets[rowBlockIdx]) <= flint_info.rows()", 67, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| (v32 + 3) > *(_DWORD *)(a1 + 4)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/VIOPriorUtil.cpp", 78, (uint64_t)"(block_cols + flint_info_offsets[colBlockIdx]) <= flint_info.columns()", 70, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_51;
      }
      v33 = *(unsigned int *)(a1 + 24);
      v34 = *(_QWORD *)(a1 + 16) - 8 * v33;
      v35 = *(_DWORD *)(a1 + 8);
      v36 = v33 + v32 + v35 * v32;
      v37 = *((_DWORD *)a2 + 4);
      v38 = *(_DWORD *)((char *)&xmmword_2103BBFD4 + i) + *(_DWORD *)((char *)&xmmword_2103BBFD4 + i) * v37;
      v39 = *a2;
      v40 = v34 + 8 * (v36 + v35);
      if ((char *)v34 != *a2)
        break;
      v19 = (char *)operator new(0x60uLL, (std::align_val_t)0x20uLL);
      v20 = v34 + 8 * v36;
      v21 = *(_OWORD *)v20;
      *((_QWORD *)v19 + 2) = *(_QWORD *)(v20 + 16);
      *(_OWORD *)v19 = v21;
      v22 = *(_OWORD *)v40;
      *((_QWORD *)v19 + 5) = *(_QWORD *)(v40 + 16);
      *(_OWORD *)(v19 + 24) = v22;
      v23 = v34 + 8 * (v36 + 2 * v35);
      v24 = *(_OWORD *)v23;
      *((_QWORD *)v19 + 8) = *(_QWORD *)(v23 + 16);
      *((_OWORD *)v19 + 3) = v24;
      v25 = v34 + 8 * v38;
      v26 = *((_QWORD *)v19 + 2);
      *(_OWORD *)v25 = *(_OWORD *)v19;
      *(_QWORD *)(v25 + 16) = v26;
      v27 = v34 + 8 * (v38 + v37);
      v28 = *(_OWORD *)(v19 + 24);
      *(_QWORD *)(v27 + 16) = *((_QWORD *)v19 + 5);
      *(_OWORD *)v27 = v28;
      v29 = v34 + 8 * (v38 + 2 * v37);
      v30 = *((_OWORD *)v19 + 3);
      *(_QWORD *)(v29 + 16) = *((_QWORD *)v19 + 8);
      *(_OWORD *)v29 = v30;
      MEMORY[0x212BC6368]();
      i += 4;
      if (i == 20)
        goto LABEL_37;
    }
    v41 = v34 + 8 * v36;
    v42 = &v39[8 * v38];
    v43 = *(_OWORD *)v41;
    *((_QWORD *)v42 + 2) = *(_QWORD *)(v41 + 16);
    *(_OWORD *)v42 = v43;
    v44 = &v39[8 * v38 + 8 * v37];
    v45 = *(_OWORD *)v40;
    *((_QWORD *)v44 + 2) = *(_QWORD *)(v40 + 16);
    *(_OWORD *)v44 = v45;
    v46 = (__n128 *)(v34 + 8 * (v36 + 2 * v35));
    result = *v46;
    v47 = (__n128 *)&v39[16 * v37 + 8 * v38];
    v47[1].n128_u64[0] = v46[1].n128_u64[0];
    *v47 = result;
  }
LABEL_37:
  v48 = *((_DWORD *)a2 + 5);
  v49 = v48 - 15;
  if (v48 > 15)
  {
    v50 = v49 / 6;
    if ((!(v49 % 6)
       || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/VIOPriorUtil.cpp", 93, (uint64_t)"remaining_dim_unsigned % cv_types::CameraFromIMUTransformation::kDof == 0", 73, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))&& (*(_DWORD *)(a1 + 4) == 21|| !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/VIOPriorUtil.cpp", 98, (uint64_t)"flint_info.columns() == (cv_types::InertialState::kDof + cv_types::CameraFromIMUTransformation::kDof)", 101, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)))
    {
      if (v49 >= 6)
      {
        v51 = 0;
        if (v50 <= 1)
          v52 = 1;
        else
          v52 = v50;
        v53 = 6 * v52;
        do
        {
          while (1)
          {
            v90 = *(unsigned int *)(a1 + 24);
            v91 = *(_QWORD *)(a1 + 16) - 8 * v90;
            v92 = *(_DWORD *)(a1 + 8);
            v93 = v90 - v92 + 16 * v92 + 15;
            v94 = *((_DWORD *)a2 + 4);
            v95 = v51 + 15 + (v51 + 15) * v94;
            v96 = *a2;
            v97 = (__int128 *)(v91 + 8 * (v90 + 16 * v92 + 15));
            if ((char *)v91 != *a2)
              break;
            v54 = (__int128 *)operator new(0x120uLL, (std::align_val_t)0x20uLL);
            v55 = (__int128 *)(v91 + 8 * v93);
            v57 = v55[1];
            v56 = v55[2];
            *v54 = *v55;
            v54[1] = v57;
            v54[2] = v56;
            v59 = v97[1];
            v58 = v97[2];
            v54[3] = *v97;
            v54[4] = v59;
            v54[5] = v58;
            v60 = (__int128 *)(v91 + 8 * (v93 + 2 * v92));
            v62 = v60[1];
            v61 = v60[2];
            v54[6] = *v60;
            v54[7] = v62;
            v54[8] = v61;
            v63 = (__int128 *)(v91 + 8 * (v93 + 3 * v92));
            v65 = v63[1];
            v64 = v63[2];
            v54[9] = *v63;
            v54[10] = v65;
            v54[11] = v64;
            v66 = (__int128 *)(v91 + 8 * (v93 + 4 * v92));
            v68 = v66[1];
            v67 = v66[2];
            v54[12] = *v66;
            v54[13] = v68;
            v54[14] = v67;
            v69 = (__int128 *)(v91 + 8 * (v93 + 5 * v92));
            v71 = v69[1];
            v70 = v69[2];
            v54[15] = *v69;
            v54[16] = v71;
            v54[17] = v70;
            v72 = (_OWORD *)(v91 + 8 * v95);
            v73 = *v54;
            v74 = v54[2];
            v72[1] = v54[1];
            v72[2] = v74;
            *v72 = v73;
            v75 = (_OWORD *)(v91 + 8 * (v95 + v94));
            v76 = v54[3];
            v77 = v54[5];
            v75[1] = v54[4];
            v75[2] = v77;
            *v75 = v76;
            v78 = (_OWORD *)(v91 + 8 * (v95 + 2 * v94));
            v79 = v54[6];
            v80 = v54[8];
            v78[1] = v54[7];
            v78[2] = v80;
            *v78 = v79;
            v81 = (_OWORD *)(v91 + 8 * (v95 + 3 * v94));
            v82 = v54[9];
            v83 = v54[11];
            v81[1] = v54[10];
            v81[2] = v83;
            *v81 = v82;
            v84 = (_OWORD *)(v91 + 8 * (v95 + 4 * v94));
            v85 = v54[12];
            v86 = v54[14];
            v84[1] = v54[13];
            v84[2] = v86;
            *v84 = v85;
            v87 = (_OWORD *)(v91 + 8 * (v95 + 5 * v94));
            v88 = v54[15];
            v89 = v54[17];
            v87[1] = v54[16];
            v87[2] = v89;
            *v87 = v88;
            MEMORY[0x212BC6368]();
            v51 += 6;
            if (v53 == v51)
              return result;
          }
          v98 = (__int128 *)(v91 + 8 * v93);
          v99 = &v96[8 * v95];
          v100 = *v98;
          v101 = v98[2];
          *((_OWORD *)v99 + 1) = v98[1];
          *((_OWORD *)v99 + 2) = v101;
          *(_OWORD *)v99 = v100;
          v102 = &v96[8 * v95 + 8 * v94];
          v103 = *v97;
          v104 = v97[2];
          *((_OWORD *)v102 + 1) = v97[1];
          *((_OWORD *)v102 + 2) = v104;
          *(_OWORD *)v102 = v103;
          v105 = (__int128 *)(v91 + 8 * (v93 + 2 * v92));
          v106 = &v96[16 * v94 + 8 * v95];
          v107 = *v105;
          v108 = v105[2];
          *((_OWORD *)v106 + 1) = v105[1];
          *((_OWORD *)v106 + 2) = v108;
          *(_OWORD *)v106 = v107;
          v109 = (__int128 *)(v91 + 8 * (v93 + 3 * v92));
          v110 = &v96[24 * v94 + 8 * v95];
          v111 = *v109;
          v112 = v109[2];
          *((_OWORD *)v110 + 1) = v109[1];
          *((_OWORD *)v110 + 2) = v112;
          *(_OWORD *)v110 = v111;
          v113 = (__int128 *)(v91 + 8 * (v93 + 4 * v92));
          v114 = &v96[32 * v94 + 8 * v95];
          v115 = *v113;
          v116 = v113[2];
          *((_OWORD *)v114 + 1) = v113[1];
          *((_OWORD *)v114 + 2) = v116;
          *(_OWORD *)v114 = v115;
          v117 = v91 + 8 * (v93 + 5 * v92);
          v118 = &v96[40 * v94 + 8 * v95];
          result = *(__n128 *)v117;
          v119 = *(_OWORD *)(v117 + 32);
          *((_OWORD *)v118 + 1) = *(_OWORD *)(v117 + 16);
          *((_OWORD *)v118 + 2) = v119;
          *(__n128 *)v118 = result;
          v51 += 6;
        }
        while (v53 != v51);
      }
      return result;
    }
LABEL_51:
    abort();
  }
  return result;
}

uint64_t sub_20FC8AE94(uint64_t *a1, uint64_t a2)
{
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  __int128 *v6;
  uint64_t v7;
  __int128 *v8;
  unint64_t v9;
  _OWORD *v10;
  __int128 *v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;
  uint64_t v15;
  int *v16;
  _DWORD *v17;
  int v18;
  unint64_t v20;
  unint64_t v21;
  __int128 *v22;
  uint64_t v23;
  __int128 *v24;
  unint64_t v25;
  _OWORD *v26;
  __int128 *v27;
  unint64_t v28;
  __int128 v29;
  unint64_t v30;
  uint64_t v31;
  int *v32;
  _DWORD *v33;
  int v34;
  unint64_t v36;
  unint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  _BYTE *v40;
  unint64_t v41;
  _OWORD *v42;
  __int128 *v43;
  unint64_t v44;
  __int128 v45;
  unint64_t v46;
  uint64_t v47;
  int *v48;
  _DWORD *v49;
  int v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 *v56;
  unsigned __int8 v57;
  unsigned __int8 v58;
  int v59;
  unsigned __int8 v60;
  unsigned __int8 v61;
  uint64_t v62;
  int v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  unsigned int v68;
  BOOL v69;
  size_t v70;
  size_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t i;
  uint64_t v77;
  uint64_t j;
  uint64_t result;
  uint64_t v80;
  uint64_t v81;
  uint64_t v83;
  uint64_t v84;
  char *__dst;
  _BYTE __b[64];
  _BYTE *v87;
  __int128 v88;
  __int128 v89;
  int v90;
  __int128 *v91;
  __int128 v92;
  __int128 v93;
  int v94;
  __int128 *v95;
  __int128 v96;

  v3 = *((_DWORD *)a1 + 5);
  if (v3 != *((_DWORD *)a1 + 4))
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/VIOPriorUtil.cpp", 123, (uint64_t)"fg_info.columns() == fg_info.rows()", 35, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_126;
    }
    v3 = *((_DWORD *)a1 + 5);
  }
  if (v3 <= 0xE
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/VIOPriorUtil.cpp", 124, (uint64_t)"fg_info.columns() >= cv_types::InertialState::kDof", 50, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_126:
    abort();
  }
  v95 = &v93;
  v94 = 3;
  v93 = xmmword_2103BBFD4;
  v91 = &v89;
  v90 = 12;
  v96 = xmmword_210384E80;
  v89 = xmmword_2103BBFC0;
  v92 = xmmword_210384E80;
  v87 = __b;
  memset_pattern16(__b, &unk_2103BBFB0, 0x14uLL);
  v88 = xmmword_210384E80;
  v83 = 5;
  if (*((_DWORD *)a1 + 4) < 0x15u || *(_DWORD *)(a2 + 4) != 21)
    goto LABEL_66;
  if (*((_DWORD *)a1 + 5) > 0x14u)
  {
    v4 = 5;
    v5 = 6;
LABEL_28:
    v8 = v95;
    goto LABEL_29;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/VIOPriorUtil.cpp", 142, (uint64_t)"fg_info.columns() >= (cv_types::InertialState::kDof + cv_types::CameraFromIMUTransformation::kDof)", 98, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v4 = *((_QWORD *)&v96 + 1);
  v5 = *((_QWORD *)&v96 + 1) + 1;
  if (*((_QWORD *)&v96 + 1) + 1 <= (unint64_t)v96)
    goto LABEL_28;
  if (2 * (uint64_t)v96 > v5)
    v5 = 2 * v96;
  *(_QWORD *)&v96 = v5;
  v6 = v95;
  v7 = operator new[]();
  v8 = (__int128 *)v7;
  if (v4)
  {
    v9 = 0;
    if (v4 < 8)
      goto LABEL_18;
    if ((unint64_t)(v7 - (_QWORD)v6) < 0x20)
      goto LABEL_18;
    v9 = v4 & 0xFFFFFFFFFFFFFFF8;
    v10 = (_OWORD *)(v7 + 16);
    v11 = v6 + 1;
    v12 = v4 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v13 = *v11;
      *(v10 - 1) = *(v11 - 1);
      *v10 = v13;
      v10 += 2;
      v11 += 2;
      v12 -= 8;
    }
    while (v12);
    if (v4 != v9)
    {
LABEL_18:
      v14 = v4 - v9;
      v15 = 4 * v9;
      v16 = (int *)v6 + v9;
      v17 = (_DWORD *)(v7 + v15);
      do
      {
        v18 = *v16++;
        *v17++ = v18;
        --v14;
      }
      while (v14);
    }
  }
  if (v95 != &v93 && v95 != 0)
    MEMORY[0x212BC6368]();
  v95 = v8;
  v4 = *((_QWORD *)&v96 + 1);
  v5 = *((_QWORD *)&v96 + 1) + 1;
LABEL_29:
  *((_DWORD *)v8 + v4) = 15;
  *((_QWORD *)&v96 + 1) = v5;
  v20 = *((_QWORD *)&v92 + 1);
  v21 = *((_QWORD *)&v92 + 1) + 1;
  if (*((_QWORD *)&v92 + 1) + 1 <= (unint64_t)v92)
  {
    v24 = v91;
  }
  else
  {
    if (2 * (uint64_t)v92 > v21)
      v21 = 2 * v92;
    *(_QWORD *)&v92 = v21;
    v22 = v91;
    v23 = operator new[]();
    v24 = (__int128 *)v23;
    if (v20)
    {
      v25 = 0;
      if (v20 < 8)
        goto LABEL_38;
      if ((unint64_t)(v23 - (_QWORD)v22) < 0x20)
        goto LABEL_38;
      v25 = v20 & 0xFFFFFFFFFFFFFFF8;
      v26 = (_OWORD *)(v23 + 16);
      v27 = v22 + 1;
      v28 = v20 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v29 = *v27;
        *(v26 - 1) = *(v27 - 1);
        *v26 = v29;
        v26 += 2;
        v27 += 2;
        v28 -= 8;
      }
      while (v28);
      if (v20 != v25)
      {
LABEL_38:
        v30 = v20 - v25;
        v31 = 4 * v25;
        v32 = (int *)v22 + v25;
        v33 = (_DWORD *)(v23 + v31);
        do
        {
          v34 = *v32++;
          *v33++ = v34;
          --v30;
        }
        while (v30);
      }
    }
    if (v91 != &v89 && v91 != 0)
      MEMORY[0x212BC6368]();
    v91 = v24;
    v20 = *((_QWORD *)&v92 + 1);
    v21 = *((_QWORD *)&v92 + 1) + 1;
  }
  *((_DWORD *)v24 + v20) = 15;
  *((_QWORD *)&v92 + 1) = v21;
  v36 = *((_QWORD *)&v88 + 1);
  v37 = *((_QWORD *)&v88 + 1) + 1;
  if (*((_QWORD *)&v88 + 1) + 1 <= (unint64_t)v88)
  {
    v40 = v87;
    *(_DWORD *)&v87[4 * *((_QWORD *)&v88 + 1)] = 6;
    *((_QWORD *)&v88 + 1) = v37;
    v83 = DWORD2(v96);
    if (!DWORD2(v96))
      goto LABEL_115;
  }
  else
  {
    if (2 * (uint64_t)v88 > v37)
      v37 = 2 * v88;
    *(_QWORD *)&v88 = v37;
    v38 = v87;
    v39 = operator new[]();
    v40 = (_BYTE *)v39;
    if (v36)
    {
      v41 = 0;
      if (v36 < 8)
        goto LABEL_56;
      if ((unint64_t)(v39 - (_QWORD)v38) < 0x20)
        goto LABEL_56;
      v41 = v36 & 0xFFFFFFFFFFFFFFF8;
      v42 = (_OWORD *)(v39 + 16);
      v43 = (__int128 *)(v38 + 16);
      v44 = v36 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v45 = *v43;
        *(v42 - 1) = *(v43 - 1);
        *v42 = v45;
        v42 += 2;
        v43 += 2;
        v44 -= 8;
      }
      while (v44);
      if (v36 != v41)
      {
LABEL_56:
        v46 = v36 - v41;
        v47 = 4 * v41;
        v48 = (int *)&v38[4 * v41];
        v49 = (_DWORD *)(v39 + v47);
        do
        {
          v50 = *v48++;
          *v49++ = v50;
          --v46;
        }
        while (v46);
      }
    }
    if (v87 != __b && v87 != 0)
      MEMORY[0x212BC6368]();
    v87 = v40;
    v52 = *((_QWORD *)&v88 + 1) + 1;
    *(_DWORD *)&v40[4 * *((_QWORD *)&v88 + 1)] = 6;
    *((_QWORD *)&v88 + 1) = v52;
    v83 = DWORD2(v96);
    if (!DWORD2(v96))
      goto LABEL_115;
  }
LABEL_66:
  v84 = 0;
  v80 = a2;
  do
  {
    v53 = 0;
    do
    {
      v54 = *(unsigned int *)&v87[4 * v84];
      v55 = *(unsigned int *)&v87[4 * v53];
      v56 = v95;
      if ((*((_DWORD *)v95 + v84) + v54) > *(_DWORD *)a2)
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/VIOPriorUtil.cpp", 157, (uint64_t)"(block_rows + in_offsets[rowBlockIdx]) <= flint_info.rows()", 59, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
        v57 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v57 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v75 = qword_254A6DE40;
          for (i = qword_254A6DE48; v75 != i; v75 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v75)(*(_QWORD *)(v75 + 8), "(block_rows + in_offsets[rowBlockIdx]) <= flint_info.rows()", 59, "", 0);
        }
        v58 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v58 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
LABEL_125:
          abort();
        qword_254A6DE58(unk_254A6DE60, "(block_rows + in_offsets[rowBlockIdx]) <= flint_info.rows()", 59, "", 0);
        v56 = v95;
      }
      v59 = *((_DWORD *)v56 + v53);
      if ((v59 + v55) > *(_DWORD *)(a2 + 4))
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/VIOPriorUtil.cpp", 158, (uint64_t)"(block_cols + in_offsets[colBlockIdx]) <= flint_info.columns()", 62, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
        v60 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v60 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v77 = qword_254A6DE40;
          for (j = qword_254A6DE48; v77 != j; v77 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v77)(*(_QWORD *)(v77 + 8), "(block_cols + in_offsets[colBlockIdx]) <= flint_info.columns()", 62, "", 0);
        }
        v61 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v61 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          goto LABEL_125;
        qword_254A6DE58(unk_254A6DE60, "(block_cols + in_offsets[colBlockIdx]) <= flint_info.columns()", 62, "", 0);
        v56 = v95;
        v59 = *((_DWORD *)v95 + v53);
      }
      v62 = *a1;
      v63 = *((_DWORD *)a1 + 4);
      v64 = *((_DWORD *)v56 + v84) + v63 * v59;
      v65 = *(unsigned int *)(a2 + 24);
      v66 = *(_QWORD *)(a2 + 16) - 8 * v65;
      v67 = *(_DWORD *)(a2 + 8);
      v68 = v65 + *((_DWORD *)v91 + v84) + v67 * *((_DWORD *)v91 + v53);
      if (*a1 == v66)
      {
        v81 = (int)v54;
        __dst = (char *)operator new((8 * (v55 * v54) + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
        if ((_DWORD)v54 && (_DWORD)v55)
        {
          v71 = 8 * v54;
          v72 = __dst;
          v73 = v55;
          do
          {
            memmove(v72, (const void *)(v62 + 8 * v64), v71);
            v64 += v63;
            v72 += v71;
            --v73;
          }
          while (v73);
          a2 = v80;
          v74 = __dst;
          do
          {
            memmove((void *)(v62 + 8 * v68), v74, v71);
            v68 += v67;
            v74 += 8 * v81;
            --v55;
          }
          while (v55);
        }
        MEMORY[0x212BC6368](__dst, 0x1000C8000313F17);
      }
      else
      {
        if ((_DWORD)v54)
          v69 = (_DWORD)v55 == 0;
        else
          v69 = 1;
        if (!v69)
        {
          v70 = 8 * v54;
          do
          {
            memmove((void *)(v66 + 8 * v68), (const void *)(v62 + 8 * v64), v70);
            v68 += v67;
            v64 += v63;
            --v55;
          }
          while (v55);
        }
      }
      ++v53;
    }
    while (v53 != v83);
    ++v84;
  }
  while (v84 != v83);
  v40 = v87;
LABEL_115:
  *((_QWORD *)&v88 + 1) = 0;
  if (v40 != __b && v40)
    MEMORY[0x212BC6368](v40, 0x1000C8052888210);
  *((_QWORD *)&v92 + 1) = 0;
  if (v91 != &v89 && v91)
    MEMORY[0x212BC6368]();
  *((_QWORD *)&v96 + 1) = 0;
  result = (uint64_t)v95;
  if (v95 != &v93)
  {
    if (v95)
      return MEMORY[0x212BC6368](v95, 0x1000C8052888210);
  }
  return result;
}

void sub_20FC8B840(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char *a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char *a37,uint64_t a38,uint64_t a39)
{
  uint64_t v39;
  uint64_t v43;

  a28 = 0;
  if (a26 == &a18 || a26 == 0)
  {
    a39 = 0;
    if (a37 != &a29 && a37 != 0)
    {
LABEL_17:
      MEMORY[0x212BC6368]();
      *(_QWORD *)(v39 - 112) = 0;
      v43 = *(_QWORD *)(v39 - 128);
      if (v43 == v39 - 192)
        goto LABEL_20;
LABEL_18:
      if (v43)
        MEMORY[0x212BC6368](v43, 0x1000C8052888210);
LABEL_20:
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    MEMORY[0x212BC6368]();
    a39 = 0;
    if (a37 != &a29 && a37 != 0)
      goto LABEL_17;
  }
  *(_QWORD *)(v39 - 112) = 0;
  v43 = *(_QWORD *)(v39 - 128);
  if (v43 == v39 - 192)
    goto LABEL_20;
  goto LABEL_18;
}

uint64_t sub_20FC8B914(uint64_t *a1, unsigned int *a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  _OWORD *v22;
  __int128 *v23;
  unint64_t v24;
  __int128 v25;
  unint64_t v26;
  uint64_t v27;
  int *v28;
  _DWORD *v29;
  int v30;
  unsigned int v32;
  unint64_t v33;
  BOOL v34;
  BOOL v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  _OWORD *v45;
  __int128 *v46;
  unint64_t v47;
  __int128 v48;
  unint64_t v49;
  uint64_t v50;
  int *v51;
  _DWORD *v52;
  int v53;
  unint64_t v55;
  unint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  _BYTE *v59;
  unint64_t v60;
  _OWORD *v61;
  __int128 *v62;
  unint64_t v63;
  __int128 v64;
  unint64_t v65;
  uint64_t v66;
  int *v67;
  _DWORD *v68;
  int v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  unsigned __int8 v76;
  unsigned __int8 v77;
  int v78;
  unsigned __int8 v79;
  unsigned __int8 v80;
  uint64_t v81;
  int v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  BOOL v88;
  size_t v89;
  size_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t i;
  uint64_t v96;
  uint64_t j;
  uint64_t result;
  unsigned int *v99;
  uint64_t v100;
  uint64_t v102;
  uint64_t v103;
  char *__dst;
  _BYTE __b[64];
  _BYTE *v106;
  __int128 v107;
  _QWORD v108[8];
  _QWORD *v109;
  __int128 v110;
  _QWORD v111[8];
  _QWORD *v112;
  __int128 v113;

  if (*((_DWORD *)a1 + 5) != *((_DWORD *)a1 + 4)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/VIOPriorUtil.cpp", 177, (uint64_t)"fg_info.columns() == fg_info.rows()", 35, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v3 = *a2;
  v4 = a2[1];
  if ((_DWORD)v3)
  {
    if (!v4)
      goto LABEL_17;
    v5 = a2[6];
    v6 = a2[2];
    v7 = *((_QWORD *)a2 + 2) - 8 * v5;
    v8 = a2[1];
    do
    {
      bzero((void *)(v7 + 8 * v5), 8 * v3);
      LODWORD(v5) = v5 + v6;
      --v8;
    }
    while (v8);
  }
  if (v4 >= v3)
    v9 = v3;
  else
    v9 = v4;
  if ((_DWORD)v9)
  {
    v10 = *((_QWORD *)a2 + 2);
    v11 = a2[2];
    v12 = v11 + 1;
    if ((_DWORD)v9 == 1)
    {
      v13 = 0;
    }
    else
    {
      v13 = 0;
      if (v12 < 0)
        v32 = ~v11;
      else
        v32 = v11 + 1;
      v33 = (v9 - 1) * (unint64_t)v32;
      v34 = v11 != -1 && (unint64_t)(v9 - 1) >> 32 != 0;
      if ((_DWORD)v33)
        v35 = v12 < 0;
      else
        v35 = 0;
      if (!v35 && (v33 & 0xFFFFFFFF00000000) == 0 && !v34)
      {
        v36 = 0;
        v13 = v9 & 0xFFFFFFFE;
        v37 = 2 * v11 + 2;
        v38 = v13;
        do
        {
          *(_QWORD *)(v10 + 8 * v36) = 0x3FF0000000000000;
          *(_QWORD *)(v10 + 8 * (v12 + v36)) = 0x3FF0000000000000;
          v36 += v37;
          v38 -= 2;
        }
        while (v38);
        if (v13 == v9)
          goto LABEL_17;
      }
    }
    v14 = v9 - v13;
    v15 = v12 * v13;
    do
    {
      *(_QWORD *)(v10 + 8 * v15) = 0x3FF0000000000000;
      v15 += v12;
      --v14;
    }
    while (v14);
  }
LABEL_17:
  v112 = v111;
  v111[0] = 0x300000000;
  v113 = xmmword_2103BBFA0;
  v109 = v108;
  v108[0] = 0xC00000000;
  v110 = xmmword_2103BBFA0;
  v106 = __b;
  memset_pattern16(__b, &unk_2103BBFB0, 8uLL);
  v107 = xmmword_2103BBFA0;
  v102 = 2;
  if (*((_DWORD *)a1 + 4) < 0xCu || v4 != 21)
    goto LABEL_93;
  if (*((_DWORD *)a1 + 5) > 0xBu)
  {
    v16 = 2;
    v17 = 3;
LABEL_55:
    v20 = v112;
    goto LABEL_56;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/VIOPriorUtil.cpp", 197, (uint64_t)"fg_info.columns() >= (cv_types::InertialState::kPoseDof + cv_types::CameraFromIMUTransformation::kDof)", 102, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v16 = *((_QWORD *)&v113 + 1);
  v17 = *((_QWORD *)&v113 + 1) + 1;
  if (*((_QWORD *)&v113 + 1) + 1 <= (unint64_t)v113)
    goto LABEL_55;
  if (2 * (uint64_t)v113 > v17)
    v17 = 2 * v113;
  *(_QWORD *)&v113 = v17;
  v18 = v112;
  v19 = operator new[]();
  v20 = (_QWORD *)v19;
  if (v16)
  {
    v21 = 0;
    if (v16 < 8)
      goto LABEL_29;
    if ((unint64_t)(v19 - (_QWORD)v18) < 0x20)
      goto LABEL_29;
    v21 = v16 & 0xFFFFFFFFFFFFFFF8;
    v22 = (_OWORD *)(v19 + 16);
    v23 = (__int128 *)(v18 + 2);
    v24 = v16 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v25 = *v23;
      *(v22 - 1) = *(v23 - 1);
      *v22 = v25;
      v22 += 2;
      v23 += 2;
      v24 -= 8;
    }
    while (v24);
    if (v16 != v21)
    {
LABEL_29:
      v26 = v16 - v21;
      v27 = 4 * v21;
      v28 = (int *)v18 + v21;
      v29 = (_DWORD *)(v19 + v27);
      do
      {
        v30 = *v28++;
        *v29++ = v30;
        --v26;
      }
      while (v26);
    }
  }
  if (v112 != v111 && v112 != 0)
    MEMORY[0x212BC6368]();
  v112 = v20;
  v16 = *((_QWORD *)&v113 + 1);
  v17 = *((_QWORD *)&v113 + 1) + 1;
LABEL_56:
  *((_DWORD *)v20 + v16) = 6;
  *((_QWORD *)&v113 + 1) = v17;
  v39 = *((_QWORD *)&v110 + 1);
  v40 = *((_QWORD *)&v110 + 1) + 1;
  if (*((_QWORD *)&v110 + 1) + 1 <= (unint64_t)v110)
  {
    v43 = v109;
  }
  else
  {
    if (2 * (uint64_t)v110 > v40)
      v40 = 2 * v110;
    *(_QWORD *)&v110 = v40;
    v41 = v109;
    v42 = operator new[]();
    v43 = (_QWORD *)v42;
    if (v39)
    {
      v44 = 0;
      if (v39 < 8)
        goto LABEL_65;
      if ((unint64_t)(v42 - (_QWORD)v41) < 0x20)
        goto LABEL_65;
      v44 = v39 & 0xFFFFFFFFFFFFFFF8;
      v45 = (_OWORD *)(v42 + 16);
      v46 = (__int128 *)(v41 + 2);
      v47 = v39 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v48 = *v46;
        *(v45 - 1) = *(v46 - 1);
        *v45 = v48;
        v45 += 2;
        v46 += 2;
        v47 -= 8;
      }
      while (v47);
      if (v39 != v44)
      {
LABEL_65:
        v49 = v39 - v44;
        v50 = 4 * v44;
        v51 = (int *)v41 + v44;
        v52 = (_DWORD *)(v42 + v50);
        do
        {
          v53 = *v51++;
          *v52++ = v53;
          --v49;
        }
        while (v49);
      }
    }
    if (v109 != v108 && v109 != 0)
      MEMORY[0x212BC6368]();
    v109 = v43;
    v39 = *((_QWORD *)&v110 + 1);
    v40 = *((_QWORD *)&v110 + 1) + 1;
  }
  *((_DWORD *)v43 + v39) = 15;
  *((_QWORD *)&v110 + 1) = v40;
  v55 = *((_QWORD *)&v107 + 1);
  v56 = *((_QWORD *)&v107 + 1) + 1;
  if (*((_QWORD *)&v107 + 1) + 1 <= (unint64_t)v107)
  {
    v59 = v106;
    *(_DWORD *)&v106[4 * *((_QWORD *)&v107 + 1)] = 6;
    *((_QWORD *)&v107 + 1) = v56;
    v102 = DWORD2(v113);
    if (!DWORD2(v113))
      goto LABEL_142;
  }
  else
  {
    if (2 * (uint64_t)v107 > v56)
      v56 = 2 * v107;
    *(_QWORD *)&v107 = v56;
    v57 = v106;
    v58 = operator new[]();
    v59 = (_BYTE *)v58;
    if (v55)
    {
      v60 = 0;
      if (v55 < 8)
        goto LABEL_83;
      if ((unint64_t)(v58 - (_QWORD)v57) < 0x20)
        goto LABEL_83;
      v60 = v55 & 0xFFFFFFFFFFFFFFF8;
      v61 = (_OWORD *)(v58 + 16);
      v62 = (__int128 *)(v57 + 16);
      v63 = v55 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v64 = *v62;
        *(v61 - 1) = *(v62 - 1);
        *v61 = v64;
        v61 += 2;
        v62 += 2;
        v63 -= 8;
      }
      while (v63);
      if (v55 != v60)
      {
LABEL_83:
        v65 = v55 - v60;
        v66 = 4 * v60;
        v67 = (int *)&v57[4 * v60];
        v68 = (_DWORD *)(v58 + v66);
        do
        {
          v69 = *v67++;
          *v68++ = v69;
          --v65;
        }
        while (v65);
      }
    }
    if (v106 != __b && v106 != 0)
      MEMORY[0x212BC6368]();
    v106 = v59;
    v71 = *((_QWORD *)&v107 + 1) + 1;
    *(_DWORD *)&v59[4 * *((_QWORD *)&v107 + 1)] = 6;
    *((_QWORD *)&v107 + 1) = v71;
    v102 = DWORD2(v113);
    if (!DWORD2(v113))
      goto LABEL_142;
  }
LABEL_93:
  v103 = 0;
  v99 = a2;
  do
  {
    v72 = 0;
    do
    {
      v73 = *(unsigned int *)&v106[4 * v103];
      v74 = *(unsigned int *)&v106[4 * v72];
      v75 = v112;
      if (*((_DWORD *)v112 + v103) + (int)v73 > *a2)
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/VIOPriorUtil.cpp", 212, (uint64_t)"(block_rows + in_offsets[rowBlockIdx]) <= flint_info.rows()", 59, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
        v76 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v76 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v94 = qword_254A6DE40;
          for (i = qword_254A6DE48; v94 != i; v94 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v94)(*(_QWORD *)(v94 + 8), "(block_rows + in_offsets[rowBlockIdx]) <= flint_info.rows()", 59, "", 0);
        }
        v77 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v77 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
LABEL_152:
          abort();
        qword_254A6DE58(unk_254A6DE60, "(block_rows + in_offsets[rowBlockIdx]) <= flint_info.rows()", 59, "", 0);
        v75 = v112;
      }
      v78 = *((_DWORD *)v75 + v72);
      if (v78 + (int)v74 > a2[1])
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/VIOPriorUtil.cpp", 213, (uint64_t)"(block_cols + in_offsets[colBlockIdx]) <= flint_info.columns()", 62, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
        v79 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v79 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v96 = qword_254A6DE40;
          for (j = qword_254A6DE48; v96 != j; v96 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v96)(*(_QWORD *)(v96 + 8), "(block_cols + in_offsets[colBlockIdx]) <= flint_info.columns()", 62, "", 0);
        }
        v80 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v80 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          goto LABEL_152;
        qword_254A6DE58(unk_254A6DE60, "(block_cols + in_offsets[colBlockIdx]) <= flint_info.columns()", 62, "", 0);
        v75 = v112;
        v78 = *((_DWORD *)v112 + v72);
      }
      v81 = *a1;
      v82 = *((_DWORD *)a1 + 4);
      v83 = *((_DWORD *)v75 + v103) + v82 * v78;
      v84 = a2[6];
      v85 = *((_QWORD *)a2 + 2) - 8 * v84;
      v86 = a2[2];
      v87 = v84 + *((_DWORD *)v109 + v103) + v86 * *((_DWORD *)v109 + v72);
      if (*a1 == v85)
      {
        v100 = (int)v73;
        __dst = (char *)operator new((8 * (v74 * v73) + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
        if ((_DWORD)v73 && (_DWORD)v74)
        {
          v90 = 8 * v73;
          v91 = __dst;
          v92 = v74;
          do
          {
            memmove(v91, (const void *)(v81 + 8 * v83), v90);
            v83 += v82;
            v91 += v90;
            --v92;
          }
          while (v92);
          a2 = v99;
          v93 = __dst;
          do
          {
            memmove((void *)(v81 + 8 * v87), v93, v90);
            v87 += v86;
            v93 += 8 * v100;
            --v74;
          }
          while (v74);
        }
        MEMORY[0x212BC6368](__dst, 0x1000C8000313F17);
      }
      else
      {
        if ((_DWORD)v73)
          v88 = (_DWORD)v74 == 0;
        else
          v88 = 1;
        if (!v88)
        {
          v89 = 8 * v73;
          do
          {
            memmove((void *)(v85 + 8 * v87), (const void *)(v81 + 8 * v83), v89);
            v87 += v86;
            v83 += v82;
            --v74;
          }
          while (v74);
        }
      }
      ++v72;
    }
    while (v72 != v102);
    ++v103;
  }
  while (v103 != v102);
  v59 = v106;
LABEL_142:
  *((_QWORD *)&v107 + 1) = 0;
  if (v59 != __b && v59)
    MEMORY[0x212BC6368](v59, 0x1000C8052888210);
  *((_QWORD *)&v110 + 1) = 0;
  if (v109 != v108 && v109)
    MEMORY[0x212BC6368]();
  *((_QWORD *)&v113 + 1) = 0;
  result = (uint64_t)v112;
  if (v112 != v111)
  {
    if (v112)
      return MEMORY[0x212BC6368]();
  }
  return result;
}

void sub_20FC8C36C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char *a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char *a36,uint64_t a37,uint64_t a38)
{
  uint64_t v38;
  uint64_t v42;

  a27 = 0;
  if (a25 == &a17 || a25 == 0)
  {
    a38 = 0;
    if (a36 != &a28 && a36 != 0)
    {
LABEL_17:
      MEMORY[0x212BC6368]();
      *(_QWORD *)(v38 - 96) = 0;
      v42 = *(_QWORD *)(v38 - 112);
      if (v42 == v38 - 176)
        goto LABEL_20;
LABEL_18:
      if (v42)
        MEMORY[0x212BC6368](v42, 0x1000C8052888210);
LABEL_20:
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    MEMORY[0x212BC6368]();
    a38 = 0;
    if (a36 != &a28 && a36 != 0)
      goto LABEL_17;
  }
  *(_QWORD *)(v38 - 96) = 0;
  v42 = *(_QWORD *)(v38 - 112);
  if (v42 == v38 - 176)
    goto LABEL_20;
  goto LABEL_18;
}

uint64_t sub_20FC8C440(uint64_t a1, unsigned int *a2)
{
  int v4;

  v4 = *(_DWORD *)(a1 + 24);
  if (v4 == 2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/VIOPriorUtil.cpp", 232, (uint64_t)"fg_info.type != BundlePriorInformationType::Invalid", 51, (uint64_t)"Invalid FG Pior information", 27, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_9;
    }
    v4 = *(_DWORD *)(a1 + 24);
  }
  if (v4)
  {
    if (v4 == 1)
      return sub_20FC8AE94((uint64_t *)a1, (uint64_t)a2);
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/VIOPriorUtil.cpp", 238, (uint64_t)"fg_info.type == BundlePriorInformationType::PosePriorInfo", 57, (uint64_t)"FG info must be a pose prior information", 40, (void (*)(void **))sub_21023DDB0))
    {
LABEL_9:
      abort();
    }
  }
  return sub_20FC8B914((uint64_t *)a1, a2);
}

BOOL sub_20FC8C504(uint64_t a1, double **a2, uint64_t a3, __n128 a4)
{
  size_t v7;
  unsigned int v8;
  double *v9;
  size_t v10;
  size_t v11;
  double *v12;
  double *v13;
  size_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  size_t v21;
  double *v22;
  double *v23;
  BOOL *v24;
  double *v25;
  double *v26;
  int8x16_t *v27;
  unsigned __int8 *v28;
  double *v29;
  double *v30;
  uint64_t v31;
  uint64_t v32;
  float64x2_t *v33;
  float64x2_t *v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  unint64_t v39;
  int8x16_t v40;
  float64x2_t *v41;
  float64x2_t *v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  double v51;
  double v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  float64x2_t *v56;
  float64x2_t *v57;
  int8x8_t *v58;
  uint64_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  int8x16_t v64;
  uint64_t v65;
  int8x16_t *v66;
  float64x2_t *v67;
  float64x2_t *v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  double v77;
  double v78;
  double v79;
  size_t v80;
  int v81;
  _BOOL8 v82;
  BOOL v83;
  __n128 v85;

  v7 = *(unsigned int *)(a1 + 16);
  v8 = v7;
  *(_DWORD *)(a3 + 16) = v7;
  v9 = *(double **)a3;
  v10 = *(_QWORD *)(a3 + 8);
  v85 = a4;
  if (v10 < v7)
  {
    v11 = v7;
    if (v9)
    {
      MEMORY[0x212BC6368](v9, 0x1000C8077774924);
      v11 = *(unsigned int *)(a3 + 16);
      v8 = *(_DWORD *)(a3 + 16);
    }
    v10 = (v7 + 31) & 0x1FFFFFFE0;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = v10;
    v9 = (double *)operator new(v10, (std::align_val_t)0x20uLL);
    *(_QWORD *)a3 = v9;
    v7 = v11;
    a4 = v85;
  }
  if (v8)
  {
    bzero(v9, v7);
    a4 = v85;
  }
  v12 = *(double **)a1;
  v13 = *a2;
  v14 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v14 == 1)
  {
    v15 = 0;
  }
  else
  {
    LODWORD(v15) = 0;
    v16 = *v12 - *v13;
    v17 = 8 * v14 - 8;
    v18 = 1;
    do
    {
      v19 = v13[v18];
      v20 = v12[v18] - v19;
      if (v20 <= v16)
        v15 = v15;
      else
        v15 = v18;
      if (v20 > v16)
        v16 = v12[v18] - v19;
      ++v18;
      v17 -= 8;
    }
    while (v17);
  }
  if (v12[v15] < v13[v15])
    return 0;
  if ((_DWORD)v14 == v8)
  {
LABEL_24:
    if (v8)
      goto LABEL_25;
    goto LABEL_59;
  }
  v8 = *(_DWORD *)(a1 + 16);
  if (v12 == v9 || v13 == v9)
  {
    v27 = (int8x16_t *)operator new((v14 + 31) & 0x1FFFFFFE0, (std::align_val_t)0x20uLL);
    if (!(_DWORD)v14)
    {
LABEL_57:
      *(_QWORD *)a3 = v27;
      *(_QWORD *)(a3 + 8) = (v14 + 31) & 0x1FFFFFFE0;
      *(_DWORD *)(a3 + 16) = v14;
      if (!v9)
        goto LABEL_60;
      MEMORY[0x212BC6368](v9, 0x1000C8077774924);
      v8 = *(_DWORD *)(a3 + 16);
      v9 = *(double **)a3;
      goto LABEL_59;
    }
    if (v14 < 8)
    {
      v28 = (unsigned __int8 *)v27;
      v29 = v13;
      v30 = v12;
      goto LABEL_56;
    }
    if (v14 >= 0x10)
    {
      v54 = v14 & 0xFFFFFFF0;
      v64.i64[0] = 0x101010101010101;
      v64.i64[1] = 0x101010101010101;
      v65 = v54;
      v66 = v27;
      v67 = (float64x2_t *)v13;
      v68 = (float64x2_t *)v12;
      do
      {
        v70 = v68[6];
        v69 = v68[7];
        v72 = v68[4];
        v71 = v68[5];
        v74 = v68[2];
        v73 = v68[3];
        v75 = *v68;
        v76 = v68[1];
        v68 += 8;
        *v66++ = vandq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(v75, vmulq_n_f64(*v67, v85.n128_f64[0])), (int32x4_t)vcgtq_f64(v76, vmulq_n_f64(v67[1], v85.n128_f64[0]))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(v74, vmulq_n_f64(v67[2], v85.n128_f64[0])), (int32x4_t)vcgtq_f64(v73, vmulq_n_f64(v67[3], v85.n128_f64[0])))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(v72, vmulq_n_f64(v67[4], v85.n128_f64[0])), (int32x4_t)vcgtq_f64(v71, vmulq_n_f64(v67[5], v85.n128_f64[0]))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(v70, vmulq_n_f64(v67[6], v85.n128_f64[0])), (int32x4_t)vcgtq_f64(v69, vmulq_n_f64(v67[7], v85.n128_f64[0]))))), v64);
        v67 += 8;
        v65 -= 16;
      }
      while (v65);
      if (v54 == v14)
        goto LABEL_57;
      if ((v14 & 8) == 0)
      {
        v30 = &v12[v54];
        v29 = &v13[v54];
        v28 = &v27->u8[v54];
        do
        {
LABEL_56:
          v77 = *v30++;
          v78 = v77;
          v79 = *v29++;
          *v28++ = v78 > v79 * v85.n128_f64[0];
        }
        while (v28 != (unsigned __int8 *)&v27->i8[v14]);
        goto LABEL_57;
      }
    }
    else
    {
      v54 = 0;
    }
    v28 = &v27->u8[v14 & 0xFFFFFFF8];
    v55 = v14 & 0xFFFFFFF8;
    v29 = &v13[v55];
    v30 = &v12[v55];
    v56 = (float64x2_t *)&v12[v54];
    v57 = (float64x2_t *)&v13[v54];
    v58 = (int8x8_t *)&v27->i8[v54];
    v59 = v54 - (v14 & 0xFFFFFFF8);
    do
    {
      v61 = v56[2];
      v60 = v56[3];
      v62 = *v56;
      v63 = v56[1];
      v56 += 4;
      *v58++ = vand_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(v62, vmulq_n_f64(*v57, v85.n128_f64[0])), (int32x4_t)vcgtq_f64(v63, vmulq_n_f64(v57[1], v85.n128_f64[0]))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(v61, vmulq_n_f64(v57[2], v85.n128_f64[0])), (int32x4_t)vcgtq_f64(v60, vmulq_n_f64(v57[3], v85.n128_f64[0]))))), (int8x8_t)0x101010101010101);
      v57 += 4;
      v59 += 8;
    }
    while (v59);
    if ((v14 & 0xFFFFFFF8) == v14)
      goto LABEL_57;
    goto LABEL_56;
  }
  *(_DWORD *)(a3 + 16) = v14;
  if (v10 < v14)
  {
    v7 = v14;
    if (v9)
    {
      MEMORY[0x212BC6368](v9, 0x1000C8077774924, a4);
      v7 = *(unsigned int *)(a3 + 16);
      v8 = *(_DWORD *)(a3 + 16);
    }
    v21 = (v14 + 31) & 0x1FFFFFFE0;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = v21;
    v9 = (double *)operator new(v21, (std::align_val_t)0x20uLL);
    *(_QWORD *)a3 = v9;
    a4.n128_u64[0] = v85.n128_u64[0];
    goto LABEL_24;
  }
  v7 = v14;
  if ((_DWORD)v14)
  {
LABEL_25:
    v22 = *a2;
    v23 = *(double **)a1;
    if (v7 < 8)
    {
      v24 = (BOOL *)v9;
      v25 = *a2;
      v26 = *(double **)a1;
      goto LABEL_43;
    }
    if (v7 >= 0x10)
    {
      v39 = 0;
      v31 = v7 & 0xFFFFFFF0;
      v40.i64[0] = 0x101010101010101;
      v40.i64[1] = 0x101010101010101;
      v41 = (float64x2_t *)*a2;
      v42 = *(float64x2_t **)a1;
      do
      {
        v44 = v42[6];
        v43 = v42[7];
        v46 = v42[4];
        v45 = v42[5];
        v48 = v42[2];
        v47 = v42[3];
        v49 = *v42;
        v50 = v42[1];
        v42 += 8;
        *(int8x16_t *)&v9[v39 / 8] = vandq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(v49, vmulq_n_f64(*v41, a4.n128_f64[0])), (int32x4_t)vcgtq_f64(v50, vmulq_n_f64(v41[1], a4.n128_f64[0]))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(v48, vmulq_n_f64(v41[2], a4.n128_f64[0])), (int32x4_t)vcgtq_f64(v47, vmulq_n_f64(v41[3], a4.n128_f64[0])))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(
                                                                                v46,
                                                                                vmulq_n_f64(v41[4], a4.n128_f64[0])),
                                                                   (int32x4_t)vcgtq_f64(v45, vmulq_n_f64(v41[5], a4.n128_f64[0]))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(v44, vmulq_n_f64(v41[6], a4.n128_f64[0])), (int32x4_t)vcgtq_f64(v43, vmulq_n_f64(v41[7], a4.n128_f64[0]))))), v40);
        v39 += 16;
        v41 += 8;
      }
      while (v31 != v39);
      if (v7 == v31)
        goto LABEL_59;
      if ((v7 & 8) == 0)
      {
        v26 = &v23[v31];
        v25 = &v22[v31];
        v24 = (BOOL *)v9 + v31;
        do
        {
LABEL_43:
          v51 = *v26++;
          v52 = v51;
          v53 = *v25++;
          *v24++ = v52 > v53 * a4.n128_f64[0];
        }
        while (v24 != (BOOL *)((char *)v9 + v7));
        goto LABEL_59;
      }
    }
    else
    {
      v31 = 0;
    }
    v32 = v7 & 0xFFFFFFF8;
    v24 = (BOOL *)v9 + v32;
    v25 = &v22[v32];
    v26 = &v23[v32];
    v33 = (float64x2_t *)&v23[v31];
    v34 = (float64x2_t *)&v22[v31];
    do
    {
      v36 = v33[2];
      v35 = v33[3];
      v37 = *v33;
      v38 = v33[1];
      v33 += 4;
      *(int8x8_t *)((char *)v9 + v31) = vand_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(v37, vmulq_n_f64(*v34, a4.n128_f64[0])), (int32x4_t)vcgtq_f64(v38, vmulq_n_f64(v34[1], a4.n128_f64[0]))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(v36, vmulq_n_f64(v34[2], a4.n128_f64[0])), (int32x4_t)vcgtq_f64(v35, vmulq_n_f64(v34[3], a4.n128_f64[0]))))), (int8x8_t)0x101010101010101);
      v31 += 8;
      v34 += 4;
    }
    while (v32 != v31);
    if (v7 == v32)
      goto LABEL_59;
    goto LABEL_43;
  }
LABEL_59:
  v14 = v8;
  v27 = (int8x16_t *)v9;
LABEL_60:
  if (!v8)
    return 0;
  v80 = v14 - 1;
  do
  {
    v81 = v27->u8[0];
    v27 = (int8x16_t *)((char *)v27 + 1);
    v82 = v81 != 0;
    if (v81)
      v83 = 1;
    else
      v83 = v80 == 0;
    --v80;
  }
  while (!v83);
  return v82;
}

uint64_t sub_20FC8CA7C(unsigned __int8 *a1, uint64_t a2)
{
  int v4;
  uint64_t result;

  v4 = *a1;
  if (v4 != (*(unsigned __int8 *)(a2 + 784) ^ 1))
  {
    if (*((_QWORD *)a1 + 1) || *((_QWORD *)a1 + 2) || *((_QWORD *)a1 + 213) || *((_QWORD *)a1 + 214))
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/VisualInertialBundleAdjusterFG.cpp", 37, (uint64_t)"(use_baid_type1_ == !config.use_lp_fg || (!vio_baid1_ && !vio_baid2_ && !cached_vio_baid1_ && !cached_vio_baid2_))", 114, (uint64_t)"Cannot change BAID type once the object is initialized.", 55, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      LOBYTE(v4) = *(_BYTE *)(a2 + 784) ^ 1;
    }
    else
    {
      LOBYTE(v4) = *(_BYTE *)(a2 + 784) ^ 1;
    }
  }
  *a1 = v4;
  sub_20E867F58((uint64_t)(a1 + 24), a2);
  result = sub_20E867F58((uint64_t)(a1 + 864), a2);
  a1[877] = 1;
  *((_DWORD *)a1 + 216) = *(_DWORD *)(a2 + 8);
  if (*(_BYTE *)(a2 + 12))
  {
    a1[1296] = 0;
    a1[1290] = 0;
    *((_WORD *)a1 + 646) = 0;
    *((_DWORD *)a1 + 320) = 0;
  }
  return result;
}

float64x2_t sub_20FC8CB5C@<Q0>(float64x2_t *a1@<X0>, float64x2_t *a2@<X1>, float64x2_t *a3@<X8>, double a4@<D0>, float64x2_t a5@<Q6>)
{
  double v9;
  double v10;
  float64x2_t v12;
  float64x2_t v14;
  float64x2_t v16;
  double v17;
  double v19;
  double v21;
  float64x2_t v22;
  float64x2_t v29;
  double v30;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v37;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  __double2 v46;
  float64x2_t v48;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  double v64;
  double v65;
  double cosval;
  double v67;
  __double2 v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64_t v76;
  float64_t v77;
  float64_t v78;
  float64_t v79;
  float64_t v80;
  double v81;
  float64_t v82;
  float64_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t result;
  double v109;
  float64x2_t v110;
  uint64_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64_t v116;
  float64_t v117;
  float64x2_t v118;
  float64x2_t v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  float64x2_t v125;
  __int128 v126;
  float64x2_t v127[3];
  double *v128[2];
  float64x2_t *v129[2];

  v9 = a1[8].f64[0];
  v10 = a2[8].f64[0];
  if (v9 > a4 || v10 < a4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/poseinterpolator.cpp", 49, (uint64_t)"p1.timestamp <= timestamp && timestamp <= p2.timestamp", 54, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v10 = a2[8].f64[0];
    v9 = a1[8].f64[0];
  }
  v119 = (float64x2_t)xmmword_2103BC000;
  v120 = *(_OWORD *)algn_2103BC010;
  v123 = xmmword_2103BC040;
  v124 = unk_2103BC050;
  v125 = (float64x2_t)xmmword_2103BC060;
  v126 = unk_2103BC070;
  v12.f64[1] = 1.0;
  v121 = xmmword_2103BC020;
  v122 = unk_2103BC030;
  v12.f64[0] = a2[1].f64[0];
  _D2 = a2[3].f64[0];
  v14 = a2[2];
  _D4 = a2[5].f64[0];
  v16 = a2[4];
  a5.f64[0] = a1[1].f64[0];
  v17 = a1[3].f64[0];
  _Q17 = a1[2];
  v19 = a1[5].f64[0];
  _Q19 = a1[4];
  v21 = vmlad_n_f64(vmlad_n_f64(v12.f64[0] * a1->f64[0], _D2, _Q17.f64[0]), _D4, _Q19.f64[0]);
  v22 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(*a2, *a1, 1), v14, _Q17, 1), v16, _Q19, 1);
  __asm
  {
    FMLA            D7, D2, V17.D[1]
    FMLA            D7, D4, V19.D[1]
  }
  _Q1 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*a2, a5.f64[0]), v14, v17), v16, v19);
  v29 = vmulq_f64(v12, a5);
  v119 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*a2, a1->f64[0]), v14, _Q17.f64[0]), v16, _Q19.f64[0]);
  *(double *)&v120 = v21;
  *(_QWORD *)&v122 = _D7;
  v121 = (__int128)v22;
  v123 = (__int128)_Q1;
  *(double *)&v124 = v29.f64[0] + _D2 * v17 + _D4 * v19;
  v30 = a1[7].f64[0];
  _Q3 = a1[6];
  v32 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v119, _Q3.f64[0]), v22, _Q3, 1), _Q1, v30);
  __asm { FMLA            D1, D7, V3.D[1] }
  v29.f64[0] = _Q1.f64[0] + *(double *)&v124 * v30;
  _Q1.f64[0] = a2[7].f64[0];
  v125 = vsubq_f64(a2[6], v32);
  *(_QWORD *)&v126 = *(_OWORD *)&vsubq_f64(_Q1, v29);
  memset(v127, 0, sizeof(v127));
  v129[0] = &v119;
  v129[1] = 0;
  v128[0] = (double *)v127;
  v128[1] = 0;
  sub_20E95B988(v129, v128);
  v35.f64[0] = v127[1].f64[0];
  _Q19 = v127[0];
  v37 = (float64x2_t)vextq_s8((int8x16_t)_Q19, (int8x16_t)_Q19, 8uLL);
  _D1 = v127[0].f64[1];
  __asm { FMLA            D0, D1, V19.D[1] }
  v40 = _D0 + v35.f64[0] * v35.f64[0];
  if (v40 < 0.0000002635)
  {
    v33.f64[0] = 0.5 - v40 * (v40 / -720.0 + 0.0416666667);
    v41 = 0.166666667 - v40 * (v40 / -5040.0 + 0.00833333333);
    v34.f64[0] = 1.0 - v40 * v41;
    v42 = v10 - v9;
    v43 = a4 - v9;
    if (v40 >= 2.775e-15)
      goto LABEL_10;
LABEL_14:
    v33.f64[0] = v40 * 0.0000330687831 + v40 * 0.00138888889 + 0.0833333333;
    goto LABEL_15;
  }
  v45 = sqrt(v40);
  v115 = v127[0];
  v117 = v127[1].f64[0];
  v113 = v37;
  v46 = __sincos_stret(v45);
  v37 = v113;
  _Q19 = v115;
  v35.f64[0] = v117;
  v34.f64[0] = v46.__sinval / v45;
  v33.f64[0] = 1.0 / v40 * (1.0 - v46.__cosval);
  v41 = 1.0 / v40 * (1.0 - v46.__sinval / v45);
  v42 = v10 - v9;
  v43 = a4 - v9;
  if (v40 < 2.775e-15)
    goto LABEL_14;
LABEL_10:
  v44 = (v33.f64[0] * 0.5 - v41) / v34.f64[0];
  v33.f64[0] = (v33.f64[0] + v34.f64[0] * -0.5) / (v40 * v33.f64[0]);
  if (v40 <= 9.0)
    v33.f64[0] = v44;
LABEL_15:
  *(_QWORD *)&v34.f64[0] = v126;
  _Q5.f64[0] = v37.f64[0];
  _Q5.f64[1] = v35.f64[0];
  v48 = vsubq_f64(vmulq_laneq_f64(_Q19, v125, 1), vmulq_f64(v37, v125));
  __asm { FMOV            V7.2D, #-0.5 }
  v50 = vaddq_f64(v34, vmulq_f64(v48, _Q7));
  *(_QWORD *)&v51.f64[0] = v126;
  v51.f64[1] = v125.f64[0];
  v35.f64[1] = _Q19.f64[0];
  v54 = vsubq_f64(vmulq_f64(_Q5, v51), vmulq_f64(v35, (float64x2_t)vextq_s8((int8x16_t)v125, (int8x16_t)v34, 8uLL)));
  v52 = vaddq_f64(v125, vmulq_f64(v54, _Q7));
  v53 = (float64x2_t)vextq_s8((int8x16_t)v54, (int8x16_t)v48, 8uLL);
  v48.f64[1] = v54.f64[0];
  *(_QWORD *)&v127[2].f64[1] = *(_OWORD *)&vaddq_f64(v50, vmulq_f64(v33, vsubq_f64(vmulq_laneq_f64(_Q19, v54, 1), vmulq_f64(v37, v54))));
  *(float64x2_t *)((char *)&v127[1] + 8) = vaddq_f64(v52, vmulq_n_f64(vsubq_f64(vmulq_f64(_Q5, v48), vmulq_f64(v35, v53)), v33.f64[0]));
  v54.f64[1] = v127[0].f64[1];
  v55 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v42, 0);
  v56 = vdivq_f64(v127[1], v55);
  _Q31 = (int8x16_t)vmulq_n_f64(vdivq_f64(v127[0], v55), v43);
  v58 = (float64x2_t)vextq_s8(_Q31, _Q31, 8uLL);
  v59 = vmulq_n_f64(vdivq_f64(v127[2], v55), v43);
  v60 = vmulq_n_f64(v56, v43);
  v61 = (float64x2_t)vextq_s8((int8x16_t)v59, (int8x16_t)v59, 8uLL);
  v62 = (float64x2_t)vextq_s8((int8x16_t)v60, (int8x16_t)v60, 8uLL);
  _D0 = _Q31.i64[1];
  __asm { FMLA            D5, D0, V31.D[1] }
  v64 = vmlad_n_f64(_Q5.f64[0], v60.f64[0], v60.f64[0]);
  if (v64 >= 0.0000002635)
  {
    v110 = v62;
    v111 = _Q31.i64[0];
    v67 = sqrt(v64);
    v116 = v60.f64[0];
    v118 = v58;
    v112 = v59;
    v114 = v61;
    v109 = v64;
    v68 = __sincos_stret(v67);
    cosval = v68.__cosval;
    _Q31.i64[0] = v111;
    v59 = v112;
    v61 = v114;
    v60.f64[0] = v116;
    v58 = v118;
    v65 = v68.__sinval / v67;
    v62 = v110;
    v56.f64[0] = 1.0 / v109 * (1.0 - v68.__cosval);
    v54.f64[0] = 1.0 / v109 * (1.0 - v65);
  }
  else
  {
    v56.f64[0] = 0.5 - v64 * (v64 / -720.0 + 0.0416666667);
    v54.f64[0] = 0.166666667 - v64 * (v64 / -5040.0 + 0.00833333333);
    v65 = 1.0 - v64 * v54.f64[0];
    cosval = 1.0 - v64 * v56.f64[0];
  }
  v70.f64[1] = 0.0;
  *(_QWORD *)&v69.f64[1] = unk_2103BC078;
  *(_QWORD *)&v72.f64[1] = unk_2103BC038;
  *(_QWORD *)&v71.f64[1] = unk_2103BC058;
  v73.f64[0] = v62.f64[0];
  v73.f64[1] = v59.f64[0];
  *(_QWORD *)&v74.f64[0] = _Q31.i64[0];
  v74.f64[1] = v58.f64[0];
  v75.f64[0] = *(double *)_Q31.i64 * (*(double *)_Q31.i64 * v56.f64[0]) + cosval;
  v76 = v58.f64[0] * (v58.f64[0] * v56.f64[0]) + cosval;
  v77 = v60.f64[0] * (v60.f64[0] * v56.f64[0]) + cosval;
  v78 = v58.f64[0] * (*(double *)_Q31.i64 * v56.f64[0]);
  v79 = v60.f64[0] * (*(double *)_Q31.i64 * v56.f64[0]);
  v80 = v60.f64[0] * (v58.f64[0] * v56.f64[0]);
  v81 = *(double *)_Q31.i64 * v65;
  v82 = v58.f64[0] * v65;
  v83 = v60.f64[0] * v65;
  v84.f64[0] = v78 - v60.f64[0] * v65;
  v85.f64[0] = v79 + v82;
  v75.f64[1] = v78 + v83;
  v70.f64[0] = v79 - v82;
  v84.f64[1] = v76;
  v72.f64[0] = v80 + v81;
  v85.f64[1] = v80 - v81;
  v71.f64[0] = v77;
  v86.f64[0] = v58.f64[0];
  v86.f64[1] = v60.f64[0];
  *(_QWORD *)&v60.f64[1] = _Q31.i64[0];
  v87.f64[0] = v59.f64[0];
  v87.f64[1] = v61.f64[0];
  v88.f64[0] = v61.f64[0];
  v88.f64[1] = v62.f64[0];
  v89 = vsubq_f64(vmulq_f64(v86, v88), vmulq_f64(v60, v87));
  v90 = vsubq_f64(vmulq_f64(v74, v59), vmulq_f64(v58, v62));
  v91 = vaddq_f64(v73, vmulq_n_f64(v89, v56.f64[0]));
  v92 = vaddq_f64(v61, vmulq_f64(v90, v56));
  v93 = (float64x2_t)vextq_s8((int8x16_t)v89, (int8x16_t)v90, 8uLL);
  v90.f64[1] = v89.f64[0];
  v94 = vmulq_f64(vsubq_f64(vmulq_laneq_f64(v74, v89, 1), vmulq_f64(v58, v89)), v54);
  v95 = vaddq_f64(v91, vmulq_n_f64(vsubq_f64(vmulq_f64(v86, v90), vmulq_f64(v60, v93)), v54.f64[0]));
  *(_QWORD *)&v69.f64[0] = *(_OWORD *)&vaddq_f64(v92, v94);
  v96 = a1[1];
  v98 = a1[2];
  v97 = a1[3];
  v100 = a1[4];
  v99 = a1[5];
  v102 = a1[6];
  v101 = a1[7];
  v103 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v75, a1->f64[0]), v84, *a1, 1), v85, v96.f64[0]), v95, v96, 1);
  v104 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v70, a1->f64[0]), v72, *a1, 1), v71, v96.f64[0]), v69, v96, 1);
  v105 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v75, v98.f64[0]), v84, v98, 1), v85, v97.f64[0]), v95, v97, 1);
  v106 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v70, v98.f64[0]), v72, v98, 1), v71, v97.f64[0]), v69, v97, 1);
  v107 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v75, v100.f64[0]), v84, v100, 1), v85, v99.f64[0]), v95, v99, 1);
  result = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v75, v102.f64[0]), v84, v102, 1), v85, v101.f64[0]), v95, v101, 1);
  *a3 = v103;
  a3[1] = v104;
  a3[2] = v105;
  a3[3] = v106;
  a3[4] = v107;
  a3[5] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v70, v100.f64[0]), v72, v100, 1), v71, v99.f64[0]), v69, v99, 1);
  a3[6] = result;
  a3[7] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v70, v102.f64[0]), v72, v102, 1), v71, v101.f64[0]), v69, v101, 1);
  return result;
}

uint64_t sub_20FC8D1B4(uint64_t a1)
{
  unsigned int *v1;
  uint64_t v2;
  double *v3;
  double *v4;
  double v5;
  char v6;
  uint64_t v7;
  double v8;
  double *v9;
  double *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  _BOOL4 v16;
  uint64_t v17;
  BOOL v18;
  BOOL v19;
  uint64_t v20;
  BOOL v21;
  BOOL v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  _BOOL4 v28;
  uint64_t v29;
  float64x2_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  uint64_t v36;
  unsigned __int8 v37;
  unsigned __int8 v38;
  unsigned __int8 v39;
  unsigned __int8 v40;
  float64x2_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  float64x2_t v48;
  float64x2_t v49;
  _QWORD *v50;
  _DWORD *v51;
  float64x2_t v52;
  _OWORD *v53;
  float64x2_t v54;
  float64x2_t v55;
  int64x2_t v56;
  float64x2_t v57;
  int64x2_t v58;
  float64x2_t v59;
  uint64_t v60;
  double v61;
  float64x2_t v62;
  float64x2_t v63;
  unint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  char v69;
  float64x2_t v70;
  double v71;
  double v72;
  float64x2_t v73;
  unint64_t v74;
  __int128 v75;
  int v76;
  double v77;
  double v78;
  long double v79;
  long double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  BOOL v86;
  uint64_t v87;
  uint64_t j;
  uint64_t v89;
  uint64_t k;
  uint64_t v91;
  uint64_t i;
  float64x2_t v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  unsigned int v97;
  char v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  BOOL v102;
  _BOOL4 v103;
  _DWORD *v104;
  void *v106;
  char v107;
  char v108;
  int v109;
  float64x2_t v110;
  float64x2_t v111;
  void *v112;
  _DWORD *__dst;
  _BYTE *v114;
  _DWORD *v115;
  unsigned int *v116;
  uint64_t v117;
  _BYTE *v118;
  uint64_t v119;
  int v120;
  int v121;
  char v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int v131;
  uint64_t v132;
  _OWORD v133[2];
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  _OWORD v137[2];
  float64x2_t v138;
  _OWORD v139[3];
  __int128 v140;
  uint64_t v141;
  float64x2_t v142;
  double v143;
  _DWORD v144[20];
  _QWORD v145[20];
  _QWORD v146[521];
  uint64_t v147;
  int v148;
  _BYTE v149[4];
  uint64_t v150[21];
  int v151;
  int v152;
  _OWORD v153[240];
  int v154;
  int v155;
  int v156;
  uint64_t v157;

  v5 = MEMORY[0x24BDAC7A8](a1);
  if ((v6 & 1) == 0)
  {
    v8 = v5;
    v9 = v4;
    v10 = v3;
    v11 = v2;
    v124 = (uint64_t)v1;
    v116 = v1 + 7730;
    v1[7824] = 0;
    v115 = v1 + 90954;
    v1[90955] = 0;
    if (*(_DWORD *)(v2 + 8) == -1
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 188, (uint64_t)"write_channel != kInvalidChannel && \"DMA write request not permitted.\"", 70, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_182;
    }
    v130 = v11;
    if (*(_DWORD *)v11 < 0x20BCC4u
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 191, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_182;
    }
    v12 = v124 + 42744;
    *(_DWORD *)(*(_QWORD *)(v11 + 16) + 2145472) = 1001;
    sub_20FC8EA3C(v124);
    if (!v13)
      goto LABEL_168;
    if (!*(_BYTE *)(v124 + 42824))
      goto LABEL_166;
    v110 = *(float64x2_t *)(v124 + 44128);
    v111 = *(float64x2_t *)(v124 + 44144);
    kdebug_trace();
    if (*(_DWORD *)(v11 + 8) == -1
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 188, (uint64_t)"write_channel != kInvalidChannel && \"DMA write request not permitted.\"", 70, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *(_DWORD *)v11 < 0x20BCC4u&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 191, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    *(_DWORD *)(*(_QWORD *)(v11 + 16) + 2145472) = 1021;
    ++*v115;
    v14 = *(_QWORD *)(v124 + 31040);
    *(_QWORD *)(v124 + 31040) = 0;
    v107 = *((_BYTE *)v116 + 341);
    v108 = *((_BYTE *)v116 + 340);
    v15 = *(unsigned __int8 *)(v124 + 42825);
    *((_BYTE *)v116 + 340) = v15;
    v109 = v15;
    *((_BYTE *)v116 + 341) = v15;
    if (*(_DWORD *)(v11 + 8) == -1
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 188, (uint64_t)"write_channel != kInvalidChannel && \"DMA write request not permitted.\"", 70, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *(_DWORD *)v11 < 0x20BCB8u&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 191, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| (v112 = (void *)(v124 + 351680), memcpy((void *)(*(_QWORD *)(v11 + 16) + 2141504), (const void *)(v124 + 351680), 0xF78uLL), *(_DWORD *)(v11 + 8) == -1)
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 188, (uint64_t)"write_channel != kInvalidChannel && \"DMA write request not permitted.\"", 70, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *(_DWORD *)v11 < 0x20AD40u&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 191, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| (v106 = (void *)(v124 + 44352), memcpy((void *)(*(_QWORD *)(v11 + 16) + 1834176), (const void *)(v124 + 44352), 0x4B080uLL), *(_DWORD *)(v11 + 8) == -1)
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 188, (uint64_t)"write_channel != kInvalidChannel && \"DMA write request not permitted.\"", 70, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *(_DWORD *)v11 < 0x1BFCC0u&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 191, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    __dst = (_DWORD *)(v124 + 64);
    memcpy((void *)(*(_QWORD *)(v11 + 16) + 1803200), (const void *)(v124 + 64), 0x7900uLL);
    v16 = 0;
    if (v10 && v9)
      v16 = *v9 > *v10;
    if (*(double *)(v124 + 31288) > v8)
      v16 = 1;
    if (*((_BYTE *)v116 + 361) && v16)
    {
      v17 = v11;
      if (*(_DWORD *)(v11 + 4) == -1)
      {
        v18 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 162, (uint64_t)"read_channel != kInvalidChannel && \"DMA write request not permitted.\"", 69, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
        v17 = v11;
        if (v18)
          goto LABEL_183;
      }
      if (*(_DWORD *)v17 >> 7 <= 0xC0Cu)
      {
        v19 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 165, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
        v17 = v11;
        if (v19)
          goto LABEL_183;
      }
      memcpy(__dst, (const void *)(*(_QWORD *)(v17 + 16) + 363904), 0x7900uLL);
      *((_BYTE *)v116 + 360) = 1;
    }
    v20 = v11;
    if (*(_DWORD *)(v11 + 8) != -1
      || (v21 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 188, (uint64_t)"write_channel != kInvalidChannel && \"DMA write request not permitted.\"", 70, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0), v20 = v11, !v21))
    {
      if (*(_DWORD *)v20 >= 0x20BCC4u
        || (v22 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 191, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0), v20 = v11, !v22))
      {
        *(_DWORD *)(*(_QWORD *)(v20 + 16) + 2145472) = 1022;
        v114 = (_BYTE *)(v124 + 35376);
        if (*(_BYTE *)(v124 + 35376))
        {
          *(_BYTE *)(v124 + 35532) = 1;
          v120 = *(_DWORD *)(v124 + 35528);
          *(_OWORD *)(v124 + 42788) = 0u;
          *(_DWORD *)(v124 + 42820) = 0;
          *(_OWORD *)(v124 + 42804) = 0u;
          v23 = *v116;
          *(_DWORD *)v12 = 0;
          if ((_DWORD)v23)
          {
            v24 = 0;
            do
            {
              *(_DWORD *)(v124 + 42748 + 4 * (v24 >> 5)) &= ~(1 << v24);
              ++v24;
            }
            while ((_DWORD)v23 != v24);
            *(_DWORD *)v12 = v23;
          }
          v132 = v124 + 35536;
          v25 = *(unsigned int *)(v124 + 42736);
          if (v25 < v23)
            bzero((void *)(v132 + 24 * v25), 24 * (v23 - v25));
          *(_DWORD *)(v124 + 42736) = v23;
          v150[0] = 0;
          v151 = 0;
          v154 = 0;
          v155 = 0;
          v156 = 0;
          v157 = 0;
          sub_20FBCAE10((uint64_t)v150, __dst, 1);
          v157 = 0;
          v26 = v130;
          if (*(_DWORD *)(v130 + 4) == -1
            && (v27 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 162, (uint64_t)"read_channel != kInvalidChannel && \"DMA write request not permitted.\"", 69, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0), v26 = v130, v27)|| *(_DWORD *)v26 <= 0x8D48Bu&& (v28 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 165, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0), v26 = v130,
                v28))
          {
            abort();
          }
          v29 = *(unsigned int *)(*(_QWORD *)(v26 + 16) + 578696);
          v147 = *(_QWORD *)(*(_QWORD *)(v26 + 16) + 578688);
          v148 = v29;
          v30 = vaddq_f64(*(float64x2_t *)(v124 + 43824), (float64x2_t)0);
          *(float64x2_t *)(v124 + 43808) = vaddq_f64(*(float64x2_t *)(v124 + 43808), (float64x2_t)0);
          *(float64x2_t *)(v124 + 43824) = v30;
          v117 = v29;
          if ((_DWORD)v29)
          {
            v31 = 0;
            v131 = 0;
            do
            {
              LODWORD(v32) = *((_DWORD *)&v147 + v31);
              v126 = v31;
              if ((_DWORD)v32)
              {
                v33 = 0;
                v119 = *((unsigned int *)&v147 + v31);
                v118 = &v149[339548 * v31 + 4];
                do
                {
                  v125 = v33;
                  if (v33)
                    v32 = 1;
                  else
                    v32 = v32;
                  v127 = v32;
                  HIDWORD(v146[255]) = 0;
                  HIDWORD(v146[293]) = 0;
                  HIDWORD(v146[369]) = 0;
                  LODWORD(v146[520]) = 0;
                  v146[1] = 0;
                  v146[0] = 0;
                  if (*(_DWORD *)(v130 + 4) == -1)
                  {
                    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 162, (uint64_t)"read_channel != kInvalidChannel && \"DMA write request not permitted.\"", 69, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                    v34 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                    if ((v34 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                    {
                      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                      __cxa_guard_release(&qword_254A6DE78);
                    }
                    if (!byte_254A6DE68 || byte_254A6DE70)
                    {
                      v91 = qword_254A6DE40;
                      for (i = qword_254A6DE48; v91 != i; v91 += 16)
                        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v91)(*(_QWORD *)(v91 + 8), "read_channel != kInvalidChannel && \"DMA write request not permitted.\"", 69, "", 0);
                    }
                    v35 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                    if ((v35 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                    {
                      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                      __cxa_guard_release(&qword_254A6DE78);
                    }
                    if (!byte_254A6DE68)
LABEL_181:
                      abort();
                    qword_254A6DE58(unk_254A6DE60, "read_channel != kInvalidChannel && \"DMA write request not permitted.\"", 69, "", 0);
                  }
                  v36 = &v118[169772 * v125] - (_BYTE *)&v147;
                  if ((v36 & 3) != 0)
                  {
                    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 164, (uint64_t)"offset % kDefaultGranularity == 0 && length % kDefaultGranularity == 0 && \"Misaligned DMA request.\"", 99, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                    v37 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                    if ((v37 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                    {
                      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                      __cxa_guard_release(&qword_254A6DE78);
                    }
                    if (!byte_254A6DE68 || byte_254A6DE70)
                    {
                      v87 = qword_254A6DE40;
                      for (j = qword_254A6DE48; v87 != j; v87 += 16)
                        (*(void (**)(_QWORD, const char *, ...))v87)(*(_QWORD *)(v87 + 8), "offset % kDefaultGranularity == 0 && length % kDefaultGranularity == 0 && \"Misaligned DMA request.\"", 99, "", 0);
                    }
                    v38 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                    if ((v38 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                    {
                      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                      __cxa_guard_release(&qword_254A6DE78);
                    }
                    if (!byte_254A6DE68)
                      goto LABEL_181;
                    qword_254A6DE58(unk_254A6DE60, "offset % kDefaultGranularity == 0 && length % kDefaultGranularity == 0 && \"Misaligned DMA request.\"", 99, "", 0);
                  }
                  v123 = v36 + 582852;
                  if ((v36 + 582852) > *(_DWORD *)v130)
                  {
                    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 165, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                    v39 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                    if ((v39 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                    {
                      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                      __cxa_guard_release(&qword_254A6DE78);
                    }
                    if (!byte_254A6DE68 || byte_254A6DE70)
                    {
                      v89 = qword_254A6DE40;
                      for (k = qword_254A6DE48; v89 != k; v89 += 16)
                        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v89)(*(_QWORD *)(v89 + 8), "offset + length <= size && \"Out of bounds DMA request.\"", 55, "", 0);
                    }
                    v40 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                    if ((v40 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                    {
                      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                      __cxa_guard_release(&qword_254A6DE78);
                    }
                    if (!byte_254A6DE68)
                      goto LABEL_181;
                    qword_254A6DE58(unk_254A6DE60, "offset + length <= size && \"Out of bounds DMA request.\"", 55, "", 0);
                  }
                  memcpy(v146, (const void *)(*(_QWORD *)(v130 + 16) + (v36 + 578688)), 0x1044uLL);
                  v41 = vaddq_f64(*(float64x2_t *)(v124 + 43824), (float64x2_t)0);
                  *(float64x2_t *)(v124 + 43808) = vaddq_f64(*(float64x2_t *)(v124 + 43808), (float64x2_t)0);
                  *(float64x2_t *)(v124 + 43824) = v41;
                  v128 = LODWORD(v146[0]);
                  if (LODWORD(v146[0]))
                  {
                    v42 = 0;
                    v122 = v127 > 1;
                    v121 = v36 + 693256;
                    do
                    {
                      while (1)
                      {
                        v43 = *((unsigned __int16 *)&v146[294] + v42);
                        if (((*(_DWORD *)((char *)&v146[2] + ((v43 >> 4) & 0xFFC)) >> (v43 >> 1)) & 1) != 0)
                          break;
                        if (++v42 == v128)
                          goto LABEL_57;
                      }
                      v44 = *((unsigned int *)&v146[370] + v42);
                      v45 = *((unsigned __int8 *)&v146[256] + v42);
                      v46 = *((unsigned __int8 *)&v146[218] + v42);
                      v129 = v42 + 1;
                      v47 = (*((unsigned __int16 *)&v146[294] + v42 + 1) - v43) >> 1;
                      sub_20FCB082C(v130, v123 + 8 * v43, (8 * ((_DWORD)v47 << v122)), v145);
                      sub_20FCB082C(v130, v121 + 4 * v43, (4 * ((_DWORD)v47 << v122)), v144);
                      if (v127 <= 1)
                        v50 = 0;
                      else
                        v50 = &v145[v47];
                      if (v127 <= 1)
                        v51 = 0;
                      else
                        v51 = &v144[v47];
                      v52 = vaddq_f64(*(float64x2_t *)(v124 + 43824), (float64x2_t)0);
                      *(float64x2_t *)(v124 + 43808) = vaddq_f64(*(float64x2_t *)(v124 + 43808), (float64x2_t)0);
                      *(float64x2_t *)(v124 + 43824) = v52;
                      v53 = &v153[6 * (v125 + *((_DWORD *)&v150[1] + v126) + v152 * v46)];
                      v55 = *(float64x2_t *)v53;
                      v54 = *((float64x2_t *)v53 + 1);
                      v57 = *((float64x2_t *)v53 + 2);
                      v56 = *((int64x2_t *)v53 + 3);
                      v59 = *((float64x2_t *)v53 + 4);
                      v58 = *((int64x2_t *)v53 + 5);
                      *(_QWORD *)&v55.f64[1] = vdupq_laneq_s64(*(int64x2_t *)v53, 1).u64[0];
                      v60 = v124 + 21320 + 32 * v44;
                      v48.f64[0] = *(float64_t *)(v60 + 16);
                      v49.f64[0] = *(float64_t *)(v60 + 24);
                      *(_QWORD *)&v61 = *(_OWORD *)&vmlaq_f64(vnegq_f64((float64x2_t)vdupq_laneq_s64(v58, 1)), v48, v49);
                      v62 = vmlaq_n_f64(vnegq_f64((float64x2_t)vzip2q_s64((int64x2_t)v54, v56)), *(float64x2_t *)v60, v49.f64[0]);
                      v63 = v57;
                      v142 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v55, v62.f64[0]), v57, v62, 1), v59, v61);
                      v143 = vmlad_n_f64(vmlad_n_f64(vmulq_f64(v54, v62).f64[0], v62.f64[1], *(double *)v56.i64), v61, *(double *)v58.i64);
                      LODWORD(v140) = 0;
                      BYTE4(v140) = 0;
                      *((_QWORD *)&v140 + 1) = 0;
                      LODWORD(v141) = 0;
                      BYTE4(v141) = 1;
                      v64 = (unint64_t)*((unsigned __int16 *)&v146[294] + v42) >> 1;
                      v65 = *(_OWORD *)(v124 + 35384);
                      v66 = *(_OWORD *)(v124 + 35416);
                      v139[1] = *(_OWORD *)(v124 + 35400);
                      v139[2] = v66;
                      v67 = *(_OWORD *)(v124 + 35480);
                      v68 = *(_OWORD *)(v124 + 35496);
                      v138 = *(float64x2_t *)(v124 + 35512);
                      v139[0] = v65;
                      v137[0] = v67;
                      v137[1] = v68;
                      v69 = sub_20FBC9924((uint64_t)v150, v126, v127, v45, v47, (uint64_t)&v146[2], v64, (uint64_t)v145, *(double *)&v67, *(double *)&v68, v138, *(double *)&v65, v63, (uint64_t)v50, (uint64_t)v144, (uint64_t)v51, &v142, (uint64_t)v139, (uint64_t)v137,
                              (int *)&v140);
                      LODWORD(v135) = 0;
                      BYTE4(v135) = 0;
                      *((_QWORD *)&v135 + 1) = 0;
                      LODWORD(v136) = 0;
                      BYTE4(v136) = 1;
                      if ((v69 & 1) != 0)
                      {
                        v135 = v140;
                        v136 = v141;
                      }
                      else
                      {
                        v74 = (unint64_t)*((unsigned __int16 *)&v146[294] + v42) >> 1;
                        v75 = *(_OWORD *)(v124 + 35448);
                        v133[0] = *(_OWORD *)(v124 + 35432);
                        v133[1] = v75;
                        v134 = *(_OWORD *)(v124 + 35464);
                        sub_20FBCA4B0(v150, v126, v127, v45, v47, (uint64_t)&v146[2], v74, (uint64_t)v145, *(double *)&v134, *(double *)&v75, v70, v71, v72, v73, (uint64_t)v50, (uint64_t)v144, (uint64_t)v51, &v142, (uint64_t)v133,
                          1u,
                          (int *)&v135);
                      }
                      v76 = *(_DWORD *)(v124 + 42796) + BYTE4(v140);
                      *(_DWORD *)(v124 + 42792) += v140;
                      *(_DWORD *)(v124 + 42796) = v76;
                      v77 = *((double *)&v140 + 1);
                      if ((v69 & 1) != 0)
                      {
                        if (*((double *)&v140 + 1) >= -1.0)
                          v78 = *((double *)&v140 + 1);
                        else
                          v78 = -1.0;
                        v79 = fmin(v78, 1.0);
                        v80 = acos(v79);
                        v81 = 1.0 - v79 * v79;
                        v82 = sqrt(v81) + *(double *)(v124 + 42808);
                        *(long double *)(v124 + 42800) = *(double *)(v124 + 42800) + v80 * 57.2957795;
                        *(double *)(v124 + 42808) = v82;
                        *(double *)(v124 + 42816) = v81 + *(double *)(v124 + 42816);
                        ++*(_DWORD *)(v124 + 42788);
                      }
                      v83 = NAN;
                      if (BYTE4(v141))
                        v84 = v77;
                      else
                        v84 = NAN;
                      v85 = *((double *)&v135 + 1);
                      v86 = BYTE4(v136) == 0;
                      *(_DWORD *)v132 = v44;
                      if (!v86)
                        v83 = v85;
                      *(_BYTE *)(v132 + 4) = v69 & 1;
                      *(_BYTE *)(v132 + 5) = (v69 & 2) != 0;
                      *(_BYTE *)(v132 + 6) = v120 == v46;
                      *(double *)(v132 + 8) = v84;
                      *(double *)(v132 + 16) = v83;
                      if ((v69 & 1) != 0)
                        *(_DWORD *)(v124 + 42748 + 4 * (v131 >> 5)) ^= 1 << v131;
                      v132 += 24;
                      ++v131;
                      ++v42;
                    }
                    while (v129 != v128);
                  }
LABEL_57:
                  v33 = v125 + 1;
                  LODWORD(v32) = v119;
                }
                while (v125 + 1 != v119);
              }
              v31 = v126 + 1;
            }
            while (v126 + 1 != v117);
          }
          v93 = vaddq_f64(*(float64x2_t *)(v124 + 44016), (float64x2_t)0);
          *(float64x2_t *)(v124 + 44000) = vaddq_f64(*(float64x2_t *)(v124 + 44000), (float64x2_t)0);
          *(float64x2_t *)(v124 + 44016) = v93;
          if (*v114 && *(_DWORD *)(v124 + 42788) < v116[33])
          {
            --*v115;
            sub_20FCB428C(v124);
          }
        }
        else
        {
          *(_BYTE *)(v124 + 35532) = 0;
        }
        v94 = v130;
        if (*(_DWORD *)(v130 + 8) != -1
          || (v94 = v130,
              !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 188, (uint64_t)"write_channel != kInvalidChannel && \"DMA write request not permitted.\"", 70, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)))
        {
          if (*(_DWORD *)v94 >= 0x20BCC4u
            || (v94 = v130,
                !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 191, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)))
          {
            *(_DWORD *)(*(_QWORD *)(v94 + 16) + 2145472) = 1023;
            if (!v109)
            {
              v95 = v116[33];
              if (v95 + v116[32])
                bzero(v112, 8 * (v95 + v116[32]));
              bzero(v106, 0x4B080uLL);
              v96 = v124;
              if (v95)
                goto LABEL_148;
              goto LABEL_149;
            }
            if (*(_DWORD *)(v94 + 4) != -1
              || (v94 = v130,
                  !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 162, (uint64_t)"read_channel != kInvalidChannel && \"DMA write request not permitted.\"", 69, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)))
            {
              if (*(_DWORD *)v94 >= 0x1B83B8u
                || (v94 = v130,
                    !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 165, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)))
              {
                memcpy(v112, (const void *)(*(_QWORD *)(v94 + 16) + 1799232), 0xF78uLL);
                if (*(_DWORD *)(v94 + 4) != -1
                  || (v94 = v130,
                      !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 162, (uint64_t)"read_channel != kInvalidChannel && \"DMA write request not permitted.\"", 69, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)))
                {
                  if (*(_DWORD *)v94 >= 0x1B7440u
                    || (v94 = v130,
                        !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 165, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)))
                  {
                    memcpy(v106, (const void *)(*(_QWORD *)(v94 + 16) + 1491904), 0x4B080uLL);
                    v95 = v116[33];
                    v96 = v124;
                    if (v95)
LABEL_148:
                      bzero((void *)(v96 + 361416), 8 * v95);
LABEL_149:
                    v97 = *(_DWORD *)(v124 + 43612);
                    --*v115;
                    sub_20FC92F34(v96, v130, v96 + 42828, v97);
                    v99 = v98;
                    *(_QWORD *)(v124 + 31040) = v14;
                    *((_BYTE *)v116 + 340) = v108;
                    *((_BYTE *)v116 + 341) = v107;
                    v100 = v130;
                    if (*(_DWORD *)(v130 + 4) == -1)
                    {
                      v100 = v130;
                      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 162, (uint64_t)"read_channel != kInvalidChannel && \"DMA write request not permitted.\"", 69, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                      {
                        goto LABEL_185;
                      }
                    }
                    if (*(_DWORD *)v100 < 0x1BFCC0u)
                    {
                      v100 = v130;
                      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 165, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                      {
                        goto LABEL_185;
                      }
                    }
                    memcpy(__dst, (const void *)(*(_QWORD *)(v100 + 16) + 1803200), 0x7900uLL);
                    if (*(_DWORD *)(v100 + 4) == -1)
                    {
                      v100 = v130;
                      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 162, (uint64_t)"read_channel != kInvalidChannel && \"DMA write request not permitted.\"", 69, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                      {
                        goto LABEL_185;
                      }
                    }
                    if (*(_DWORD *)v100 < 0x20BCB8u)
                    {
                      v100 = v130;
                      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 165, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                      {
                        goto LABEL_185;
                      }
                    }
                    memcpy(v112, (const void *)(*(_QWORD *)(v100 + 16) + 2141504), 0xF78uLL);
                    if (*v114 && *(_DWORD *)(v124 + 42744) && *(_DWORD *)(v124 + 42788) != v116[33])
                    {
                      --*v115;
                      sub_20FCB428C(v124);
                    }
                    if ((v101 = v130, *(_DWORD *)(v130 + 8) == -1)
                      && (v102 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 188, (uint64_t)"write_channel != kInvalidChannel && \"DMA write request not permitted.\"", 70, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0), v101 = v130, v102)|| *(_DWORD *)v101 < 0x20BCC4u&& (v103 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 191, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0), v101 = v130,
                          v103))
                    {
LABEL_185:
                      abort();
                    }
                    *(_DWORD *)(*(_QWORD *)(v101 + 16) + 2145472) = 1024;
                    *(float64x2_t *)(v124 + 44144) = vaddq_f64(v111, (float64x2_t)0);
                    *(float64x2_t *)(v124 + 44128) = vaddq_f64(v110, (float64x2_t)0);
                    v12 = v124 + 42744;
                    if ((v99 & 1) != 0)
                    {
LABEL_166:
                      v7 = 1;
                      v104 = (_DWORD *)v130;
                      if (*(_DWORD *)(v130 + 8) == -1)
                        goto LABEL_172;
                      goto LABEL_173;
                    }
LABEL_168:
                    if (*(_BYTE *)(v12 + 80))
                    {
                      v7 = 0;
                      *(_DWORD *)(v12 + 868) = 0;
                      v104 = (_DWORD *)v130;
                      if (*(_DWORD *)(v130 + 8) == -1)
                      {
LABEL_172:
                        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 188, (uint64_t)"write_channel != kInvalidChannel && \"DMA write request not permitted.\"", 70, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                        {
                          goto LABEL_182;
                        }
                      }
                    }
                    else
                    {
                      v7 = 0;
                      v104 = (_DWORD *)v130;
                      if (*(_DWORD *)(v130 + 8) == -1)
                        goto LABEL_172;
                    }
LABEL_173:
                    if (*v104 >= 0x20BCC4u
                      || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 191, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                    {
                      *(_DWORD *)(*(_QWORD *)(v130 + 16) + 2145472) = 1038;
                      return v7;
                    }
LABEL_182:
                    abort();
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_183:
    abort();
  }
  return 1;
}

void sub_20FC8E9C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,float64x2_t a21,float64x2_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,float64x2_t *a45)
{
  float64x2_t v45;

  v45 = vaddq_f64(a45[2751], (float64x2_t)0);
  a45[2750] = vaddq_f64(a45[2750], (float64x2_t)0);
  a45[2751] = v45;
  a45[2758] = vaddq_f64(a21, (float64x2_t)0);
  a45[2759] = vaddq_f64(a22, (float64x2_t)0);
  _Unwind_Resume(a1);
}

float64x2_t sub_20FC8EA3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  int64x2_t *v6;
  int64x2_t *v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  int v17;
  unsigned int v18;
  double v19;
  int v20;
  double *v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  unint64_t v35;
  int64x2_t *v36;
  int64x2_t *v37;
  int64x2_t v38;
  int64x2_t v39;
  int64x2_t v40;
  int64x2_t v41;
  int64x2_t v42;
  int64x2_t v43;
  int64x2_t v44;
  int64x2_t v45;
  int64x2_t v46;
  int64x2_t v47;
  int64x2_t v48;
  int64x2_t *v49;
  int64x2_t v50;
  int64x2_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  float64x2_t *v62;
  int64x2_t *v63;
  int64x2_t v64;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v88;
  float64x2_t v95;
  int8x16_t v96;
  int8x16_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  uint64_t v109;
  unsigned int v110;
  float64x2_t *v111;
  uint64_t v112;
  int64x2_t v113;
  int64x2_t v114;
  int64x2_t v115;
  float64x2_t v116;
  int64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  int64x2_t v140;
  int64x2_t v141;
  float64x2_t v142;
  int64x2_t v143;
  int64x2_t v144;
  int64x2_t v145;
  int64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  uint64_t v170;
  uint64_t v171;
  float64x2_t *v172;
  int64x2_t v173;
  int64x2_t v174;
  int64x2_t v175;
  float64x2_t v176;
  int64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  uint64_t v192;
  uint64_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  uint64_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v234;
  float64x2_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v243;
  float64x2_t v244;
  float64x2_t v245;
  float64x2_t v246;
  uint64_t v247;
  float64x2_t v248;
  float64x2_t v249;
  float64x2_t v250;
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v253;
  float64x2_t v254;
  float64x2_t v255;
  float64x2_t v256;
  float64x2_t v257;
  float64x2_t v258;
  float64x2_t v259;
  float64x2_t v260;
  float64x2_t v261;
  float64x2_t v262;
  double v263;
  double v264;
  double v265;
  float64x2_t v266;
  float64_t v267;
  float64x2_t v268;
  double v269;
  double v270;
  double v271;
  double v272;
  int v273;
  uint64_t v274;
  double *v275;
  unint64_t v276;
  _OWORD *v277;
  unsigned int v278;
  unsigned int v279;
  unint64_t v280;
  int v281;
  unsigned int v282;
  uint64_t v283;
  unsigned int v284;
  double v285;
  unsigned int v286;
  uint64_t v287;
  uint64_t v288;
  int v289;
  double v295;
  uint64_t v301;
  double *v302;
  uint64_t v303;
  double *v309;
  double v310;
  uint64_t v311;
  _OWORD *v312;
  double v317;
  double *v323;
  int v328;
  float64x2_t v329;
  unint64_t v330;
  uint64_t v331;
  double v332;
  unsigned int v333;
  int v334;
  double v335;
  uint64_t v336;
  uint64_t v337;
  int v338;
  double v344;
  double v350;
  double v356;
  int v362;
  uint64_t v363;
  int v369;
  unint64_t v370;
  unint64_t v371;
  char v372;
  int v373;
  int v374;
  uint64_t v375;
  unsigned int v376;
  uint64_t v377;
  double v378;
  unsigned int v379;
  unsigned int v380;
  unsigned int v381;
  int v382;
  uint64_t v383;
  double *v384;
  uint64_t v390;
  float64x2_t v391;
  float64x2_t v393;
  unint64_t v394;
  double *v395;
  uint64_t v396;
  uint64_t v397;
  _OWORD *v398;
  float64x2_t v399;
  double v400;
  unint64_t v401;
  float32x4_t *v402;
  float64x2_t *v403;
  float32x4_t v411;
  float32x4_t v412;
  float32x4_t v413;
  float64x2_t v423;
  uint64_t v424;
  float64x2_t v425;
  float64x2_t v426;
  unsigned int v427;
  uint64_t v428;
  int v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  double v434;
  double v435;
  double v436;
  float64x2_t v437;
  __int128 v438;
  uint64_t v439;
  double v440;
  double cosval;
  __double2 v442;
  float64x2_t v443;
  double v444;
  double v445;
  double v446;
  double v447;
  double v448;
  double v449;
  double v450;
  double v451;
  double v452;
  double v453;
  double v454;
  double v455;
  float64x2_t v456;
  double v457;
  float64x2_t v458;
  float64x2_t v459;
  float64x2_t v460;
  float64_t v461;
  float64x2_t v462;
  float64x2_t v463;
  uint64_t v464;
  float64x2_t v465;
  float64x2_t v466;
  float64x2_t v467;
  int8x16_t v468;
  int8x16_t v469;
  int8x16_t v470;
  uint64_t v471;
  float64x2_t v472;
  float64x2_t v473;
  uint64_t v474;
  double *v475;
  unsigned int *v476;
  double v477;
  uint64_t v478;
  unsigned int v479;
  double v480;
  double v481;
  _BOOL4 v482;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  unsigned int v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  float64x2_t *v491;
  double v492;
  double v493;
  double v494;
  float64x2_t v495;
  double v496;
  __double2 v497;
  float64x2_t v498;
  double v499;
  double v500;
  double v501;
  double v502;
  double v503;
  double v504;
  double v505;
  double v506;
  double v507;
  double v508;
  double v509;
  float64x2_t v510;
  double v511;
  float64x2_t v512;
  float64x2_t v513;
  float64x2_t v514;
  float64_t v515;
  float64x2_t v516;
  uint64_t v517;
  float64x2_t v518;
  float64x2_t v519;
  float64x2_t *v520;
  uint64_t v521;
  unsigned int v522;
  uint64_t v523;
  float64x2_t *v524;
  uint64_t v525;
  float64x2_t v526;
  float64x2_t *v527;
  uint64_t v528;
  unsigned int v529;
  uint64_t v530;
  float64x2_t v531;
  uint64_t v532;
  float64x2_t v533;
  uint64_t v534;
  uint64_t v535;
  unsigned __int8 v536;
  uint64_t v537;
  uint64_t i;
  unsigned __int8 v539;
  uint64_t v540;
  unsigned __int8 v541;
  uint64_t v542;
  uint64_t j;
  unsigned __int8 v544;
  unsigned __int8 v545;
  uint64_t v546;
  uint64_t k;
  unsigned __int8 v548;
  float64x2_t v549;
  uint64_t v550;
  unint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  unsigned int v556;
  uint64_t v557;
  int8x16_t v558;
  int v559;
  uint64_t v560;
  int8x16_t v561;
  float64x2_t v562;
  int v563;
  int v564;
  float32x2_t v565;
  unsigned int v566;
  unsigned __int8 v567;
  uint64_t m;
  uint64_t v569;
  unsigned __int8 v570;
  double *v571;
  float64x2_t v572;
  double v573;
  double v574;
  float64x2_t v575;
  double v576;
  double v577;
  double *v578;
  float64x2_t *v579;
  float64x2_t *v580;
  _BYTE *v581;
  double v585;
  uint64_t v586;
  float v587;
  double v588;
  unint64_t v589;
  double v590;
  int64x2_t v591;
  int64x2_t v592;
  float64x2_t v593;
  float64x2_t v594;
  float64x2_t v595;
  double v596;
  float64x2_t v597;
  double v598;
  double v599;
  float64x2_t v600;
  double v601;
  float64x2_t v602;
  double v603;
  double v604;
  float64x2_t v605;
  double v606;
  float64x2_t v607;
  double v608;
  double v609;
  float64x2_t v610;
  double v611;
  float64x2_t v612;
  double v613;
  double v614;
  float64x2_t v615;
  double v616;
  float64x2_t v617;
  double v618;
  float64_t v619;
  double v620;
  float64x2_t v621;
  float64x2_t v623;
  int v624;
  uint64_t v625;
  int v626;
  int8x16_t v627;
  double v628;
  unsigned __int8 v629;
  uint64_t v630;
  uint64_t n;
  unsigned __int8 v632;
  unsigned int v633;
  int8x16_t v634;
  uint64_t v638;
  _QWORD *v639;
  float64x2_t *v640;
  uint64_t v641;
  double v645;
  uint64_t v646;
  float v647;
  double v648;
  unint64_t v649;
  double v650;
  int64x2_t v651;
  int64x2_t v652;
  float64x2_t v653;
  float64x2_t v654;
  float64x2_t v655;
  double v656;
  float64x2_t v657;
  double v658;
  double v659;
  float64x2_t v660;
  double v661;
  float64x2_t v662;
  double v663;
  double v664;
  float64x2_t v665;
  double v666;
  float64x2_t v667;
  double v668;
  double v669;
  float64x2_t v670;
  double v671;
  float64x2_t v672;
  double v673;
  double v674;
  float64x2_t v675;
  double v676;
  float64x2_t v677;
  double v678;
  double v679;
  float64_t v680;
  double v681;
  float64x2_t v682;
  float64x2_t v683;
  float64x2_t v685;
  uint64_t v686;
  int v687;
  float64x2_t v688;
  int8x16_t v689;
  double v690;
  int64x2_t *v691;
  float64x2_t v692;
  int8x16_t v693;
  int8x16_t v694;
  int64x2_t v695;
  int64x2_t v696;
  double v697;
  float64x2_t v698;
  double v699;
  double v700;
  float64x2_t v701;
  float64x2_t v702;
  float64x2_t v703;
  uint64_t v704;
  float64x2_t *v705;
  double v706;
  float64x2_t v707;
  _QWORD *v708;
  float64x2_t v709;
  uint64_t v710;
  double *v711;
  double *v712;
  double v713;
  float64x2_t v714;
  uint64_t v715;
  BOOL v716;
  BOOL v717;
  int v718;
  BOOL v719;
  char v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  float64x2_t v728;
  float64x2_t v729;
  float64x2_t result;
  uint64_t v731;
  _BYTE *v732;
  uint64_t v733;
  _DWORD *__src;
  _BYTE *v735;
  uint64_t v736;
  _QWORD *v737;
  _BYTE *v738;
  unsigned int *v739;
  _BYTE *v740;
  uint64_t v741;
  uint64_t v742;
  double *v743;
  __int128 v744;
  __int128 v745;
  int64x2_t v746;
  uint64_t v747;
  uint64_t v748;
  _QWORD **v749;
  _QWORD *v750;
  __int128 v751;
  __int128 v752;
  uint64_t v753;
  uint64_t v754;
  __int128 v755;
  __int128 v756;
  double v757;
  float64x2_t v758;
  float64x2_t v759;
  uint64_t v760;
  __int128 v761;
  double v762;
  uint64_t v763;
  __int128 v764;
  float64x2_t v765;
  float64_t v766;
  char v767[80];
  float32x2_t v768[20];
  _BYTE __dst[4164];
  uint64_t v770;
  uint64_t v771;
  _BYTE *v772;
  _BYTE *v773;
  _QWORD *v774;
  uint64_t v775;
  int v776;
  int v777;
  _QWORD v778[360];
  int v779;
  uint64_t v780;
  unsigned int v781;
  _BYTE v782[4];
  double v783;
  double v784;
  float64x2_t *v785;
  double *v786;
  _QWORD *v787;
  float64x2_t *v788;
  uint64_t v789;

  MEMORY[0x24BDAC7A8](a1);
  v736 = v2;
  v737 = v3;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v10 = v1;
  v12 = v11;
  *((_QWORD *)&v756 + 1) = v1;
  if (*(_DWORD *)(v1 + 8) == -1)
  {
    v10 = v1;
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 188, (uint64_t)"write_channel != kInvalidChannel && \"DMA write request not permitted.\"", 70, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_447;
    }
  }
  if (*(_DWORD *)v10 < 0x20BCC4u)
  {
    v10 = *((_QWORD *)&v756 + 1);
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 191, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_447;
    }
  }
  *(_DWORD *)(*(_QWORD *)(v10 + 16) + 2145472) = 1036;
  ++*(_DWORD *)(v12 + 363816);
  kdebug_trace();
  --*(_DWORD *)(v12 + 363816);
  sub_20FC935B8(v12);
  if ((v13 & 1) != 0)
  {
    v14 = *((_QWORD *)&v756 + 1);
    if (!v9)
      goto LABEL_438;
    --*(_DWORD *)(v12 + 363816);
    *(_QWORD *)&v756 = v12;
    if (*(_DWORD *)(*((_QWORD *)&v756 + 1) + 8) == -1
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 188, (uint64_t)"write_channel != kInvalidChannel && \"DMA write request not permitted.\"", 70, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| **((_DWORD **)&v756 + 1) < 0x20BCC4u&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 191, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    *(_DWORD *)(*(_QWORD *)(*((_QWORD *)&v756 + 1) + 16) + 2145472) = 1017;
    ++*(_DWORD *)(v12 + 363816);
    kdebug_trace();
    v739 = (unsigned int *)(v12 + 18400);
    v15 = *(unsigned int *)(v12 + 31048);
    v743 = (double *)(v12 + 357328);
    v16 = (double *)(v12 + 44352);
    if ((_DWORD)v15)
    {
      memmove((void *)(v12 + 357328), (const void *)(v12 + 355640), 8 * v15);
      v17 = 0;
      v18 = 0;
      v19 = *(double *)(v12 + 31040);
      v20 = 196 - ((v15 + 3) & 0xFFFFFFFC);
      v21 = &v16[v20];
      do
      {
        if (v18)
        {
          v23 = 0;
          v22 = 196 * v18;
          v33 = v20;
          do
          {
            v34 = v17 + v23;
            v35 = v23 + 7;
            v23 += 4;
            v36 = (int64x2_t *)&v16[v33];
            v37 = (int64x2_t *)&v16[v34];
            v38 = v36[1];
            v39 = v36[99];
            v40 = v36[98];
            v41 = v36[197];
            v42 = v36[196];
            v43 = vzip1q_s64(*v36, v40);
            v44 = vzip1q_s64(v42, v36[294]);
            v42.i64[0] = vdupq_laneq_s64(v42, 1).u64[0];
            v42.i64[1] = v36[294].i64[1];
            v45 = vzip2q_s64(*v36, v40);
            v46 = vzip1q_s64(v38, v39);
            v47 = vzip1q_s64(v41, v36[295]);
            v48 = vzip2q_s64(v38, v39);
            v39.i64[0] = vdupq_laneq_s64(v41, 1).u64[0];
            v39.i64[1] = v36[295].i64[1];
            *v37 = v43;
            v37[1] = v44;
            v37[98] = v45;
            v37[99] = v42;
            v37[196] = v46;
            v37[197] = v47;
            v37[294] = v48;
            v37[295] = v39;
            v33 += 784;
          }
          while (v35 < v18);
        }
        else
        {
          v22 = 0;
          LODWORD(v23) = 0;
        }
        v16[(v23 + v22)] = v21[196 * (_DWORD)v23 + v18];
        v16[197 * v18] = v19 + v16[197 * v18];
        v24 = 196 * (v18 | 1);
        v16[(v23 + v24)] = v21[196 * (_DWORD)v23 + (v18 | 1)];
        v25 = v23 + 1;
        v26 = 196 * v23 + 196;
        v16[(v23 + 1 + v24)] = v21[v26 + (v18 | 1)];
        v16[197 * (v18 | 1)] = v19 + v16[197 * (v18 | 1)];
        v27 = 196 * (v18 | 2);
        v16[(v23 + v27)] = v21[196 * (_DWORD)v23 + (v18 | 2)];
        v16[(v23 + 1 + v27)] = v21[v26 + (v18 | 2)];
        v28 = v23 + 2;
        v29 = 196 * v23 + 392;
        v16[v28 + v27] = v21[v29 + (v18 | 2)];
        v16[197 * (v18 | 2)] = v19 + v16[197 * (v18 | 2)];
        v30 = v18 | 3;
        v31 = 196 * v23 + (v18 | 3);
        v32 = v23 + 196 * (v18 | 3);
        v16[v32] = v21[v31];
        v16[v25 + 196 * v30] = v21[v26 + v30];
        v16[v28 + 196 * v30] = v21[v29 + v30];
        v16[v32 + 3] = v21[v31 + 588];
        v16[197 * v30] = v19 + v16[197 * v30];
        v18 += 4;
        v17 += 784;
        v20 += 4;
      }
      while (v18 < v15);
    }
    kdebug_trace();
    if (*(_DWORD *)(*((_QWORD *)&v756 + 1) + 8) == -1
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 188, (uint64_t)"write_channel != kInvalidChannel && \"DMA write request not permitted.\"", 70, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| **((_DWORD **)&v756 + 1) < 0x20BCC4u&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 191, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_448;
    }
    *(_DWORD *)(*(_QWORD *)(*((_QWORD *)&v756 + 1) + 16) + 2145472) = 1018;
    kdebug_trace();
    v52 = *(unsigned int *)(v12 + 31048);
    if (v52 >= 4)
    {
      v53 = 0;
      v55 = 0;
      v54 = 0;
      v56 = v12 + 44352;
      while (1)
      {
        v57 = v54;
        if (v55)
        {
          v58 = 0;
          v59 = 0;
          v60 = 0;
          v61 = v55 & 0xFFFFFFFE;
          v62 = (float64x2_t *)(v56 + 8 * v54);
          do
          {
            v98 = v60;
            v99 = v56 + 8 * v58;
            v100 = v99 + 8 * v57;
            v102 = *(float64x2_t *)v100;
            v101 = *(float64x2_t *)(v100 + 16);
            v103 = *(float64x2_t *)(v100 + 1584);
            v104 = *(float64x2_t *)(v100 + 1568);
            v105 = *(float64x2_t *)(v100 + 3152);
            v106 = *(float64x2_t *)(v100 + 3136);
            v107 = *(float64x2_t *)(v100 + 4720);
            v108 = *(float64x2_t *)(v100 + 4704);
            if (v59)
            {
              if (v59 == 1)
              {
                v109 = 0;
              }
              else
              {
                v109 = 0;
                v110 = v59 & 0xFFFFFFFE;
                v111 = v62;
                v112 = v56 + 8 * v60;
                do
                {
                  v113 = *(int64x2_t *)(v112 + 16);
                  v114 = *(int64x2_t *)(v112 + 1584);
                  v115 = *(int64x2_t *)(v112 + 1568);
                  v116 = *(float64x2_t *)(v112 + 3136);
                  v117 = *(int64x2_t *)(v112 + 3152);
                  v118 = (float64x2_t)vzip1q_s64((int64x2_t)v116, *(int64x2_t *)(v112 + 4704));
                  *(_QWORD *)&v119.f64[0] = vdupq_laneq_s64((int64x2_t)v116, 1).u64[0];
                  v120 = (float64x2_t)vzip1q_s64(v117, *(int64x2_t *)(v112 + 4720));
                  *(_QWORD *)&v116.f64[0] = vdupq_laneq_s64(v117, 1).u64[0];
                  v121 = v111[1];
                  v119.f64[1] = *(float64_t *)(v112 + 4712);
                  v122 = v111[99];
                  v123 = v111[98];
                  v124 = v111[197];
                  v125 = v111[196];
                  v116.f64[1] = *(float64_t *)(v112 + 4728);
                  v126 = v111[295];
                  v127 = v111[294];
                  v128 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v112, v115);
                  v129 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v112, v115);
                  v130 = (float64x2_t)vzip1q_s64(v113, v114);
                  v131 = (float64x2_t)vzip2q_s64(v113, v114);
                  v132 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v128, v111->f64[0]), v129, *v111, 1), v130, v121.f64[0]), v131, v121, 1);
                  v133 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v128, v123.f64[0]), v129, v123, 1), v130, v122.f64[0]), v131, v122, 1);
                  v134 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v118, v111->f64[0]), v119, *v111, 1), v120, v121.f64[0]);
                  v135 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v128, v125.f64[0]), v129, v125, 1), v130, v124.f64[0]), v131, v124, 1);
                  v136 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v118, v123.f64[0]), v119, v123, 1), v120, v122.f64[0]);
                  v137 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v118, v125.f64[0]), v119, v125, 1), v120, v124.f64[0]);
                  v138 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v128, v127.f64[0]), v129, v127, 1), v130, v126.f64[0]), v131, v126, 1);
                  v139 = vmlaq_laneq_f64(vmulq_n_f64(v118, v127.f64[0]), v119, v127, 1);
                  v140 = *(int64x2_t *)(v112 + 32);
                  v141 = *(int64x2_t *)(v112 + 48);
                  v142 = vmlaq_n_f64(v139, v120, v126.f64[0]);
                  v143 = *(int64x2_t *)(v112 + 1616);
                  v144 = *(int64x2_t *)(v112 + 1600);
                  v145 = *(int64x2_t *)(v112 + 3184);
                  v146 = *(int64x2_t *)(v112 + 3168);
                  v147 = vmlaq_laneq_f64(v134, v116, v121, 1);
                  *(_QWORD *)&v121.f64[0] = vdupq_laneq_s64(v146, 1).u64[0];
                  v121.f64[1] = *(float64_t *)(v112 + 4744);
                  v148 = vmlaq_laneq_f64(v136, v116, v122, 1);
                  v149 = (float64x2_t)vzip1q_s64(v146, *(int64x2_t *)(v112 + 4736));
                  *(_QWORD *)&v122.f64[0] = vdupq_laneq_s64(v145, 1).u64[0];
                  v122.f64[1] = *(float64_t *)(v112 + 4760);
                  v150 = vmlaq_laneq_f64(v137, v116, v124, 1);
                  v151 = (float64x2_t)vzip1q_s64(v145, *(int64x2_t *)(v112 + 4752));
                  v153 = v111[2];
                  v152 = v111[3];
                  v154 = v111[101];
                  v155 = v111[100];
                  v156 = vmlaq_laneq_f64(v142, v116, v126, 1);
                  v157 = (float64x2_t)vzip1q_s64(v140, v144);
                  v158 = (float64x2_t)vzip2q_s64(v140, v144);
                  v159 = (float64x2_t)vzip1q_s64(v141, v143);
                  v160 = vsubq_f64(v102, v132);
                  v161 = (float64x2_t)vzip2q_s64(v141, v143);
                  v162 = v111[199];
                  v163 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v157, v153.f64[0]), v158, v153, 1), v159, v152.f64[0]), v161, v152, 1);
                  v164 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v149, v153.f64[0]), v121, v153, 1), v151, v152.f64[0]), v122, v152, 1);
                  v165 = v111[198];
                  v166 = vsubq_f64(v101, v147);
                  v167 = v111[297];
                  v168 = vsubq_f64(v103, v148);
                  v169 = v111[296];
                  v101 = vsubq_f64(v166, v164);
                  v102 = vsubq_f64(v160, v163);
                  v103 = vsubq_f64(v168, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v149, v155.f64[0]), v121, v155, 1), v151, v154.f64[0]), v122, v154, 1));
                  v104 = vsubq_f64(vsubq_f64(v104, v133), vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v157, v155.f64[0]), v158, v155, 1), v159, v154.f64[0]), v161, v154, 1));
                  v106 = vsubq_f64(vsubq_f64(v106, v135), vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v157, v165.f64[0]), v158, v165, 1), v159, v162.f64[0]), v161, v162, 1));
                  v105 = vsubq_f64(vsubq_f64(v105, v150), vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v149, v165.f64[0]), v121, v165, 1), v151, v162.f64[0]), v122, v162, 1));
                  v108 = vsubq_f64(vsubq_f64(v108, v138), vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v157, v169.f64[0]), v158, v169, 1), v159, v167.f64[0]), v161, v167, 1));
                  v107 = vsubq_f64(vsubq_f64(v107, v156), vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v149, v169.f64[0]), v121, v169, 1), v151, v167.f64[0]), v122, v167, 1));
                  v109 += 8;
                  v112 += 64;
                  v111 += 4;
                  v110 -= 2;
                }
                while (v110);
              }
              if ((v59 & 1) != 0)
              {
                v170 = v56 + 8 * v109;
                v171 = v170 + 8 * v98;
                v172 = (float64x2_t *)(v170 + 8 * v57);
                v173 = *(int64x2_t *)(v171 + 16);
                v174 = *(int64x2_t *)(v171 + 1584);
                v175 = *(int64x2_t *)(v171 + 1568);
                v176 = *(float64x2_t *)(v171 + 3152);
                v177 = *(int64x2_t *)(v171 + 3136);
                *(_QWORD *)&v178.f64[0] = vdupq_laneq_s64(v177, 1).u64[0];
                v179 = (float64x2_t)vzip1q_s64(v177, *(int64x2_t *)(v171 + 4704));
                v178.f64[1] = *(float64_t *)(v171 + 4712);
                v180 = (float64x2_t)vzip1q_s64((int64x2_t)v176, *(int64x2_t *)(v171 + 4720));
                *(_QWORD *)&v176.f64[0] = vdupq_laneq_s64((int64x2_t)v176, 1).u64[0];
                v176.f64[1] = *(float64_t *)(v171 + 4728);
                v181 = v172[1];
                v182 = v172[99];
                v183 = v172[98];
                v184 = v172[197];
                v185 = v172[196];
                v186 = v172[295];
                v187 = v172[294];
                v188 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v171, v175);
                v189 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v171, v175);
                v190 = (float64x2_t)vzip1q_s64(v173, v174);
                v191 = (float64x2_t)vzip2q_s64(v173, v174);
                v101 = vsubq_f64(v101, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v179, v172->f64[0]), v178, *v172, 1), v180, v181.f64[0]), v176, v181, 1));
                v102 = vsubq_f64(v102, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v188, v172->f64[0]), v189, *v172, 1), v190, v181.f64[0]), v191, v181, 1));
                v103 = vsubq_f64(v103, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v179, v183.f64[0]), v178, v183, 1), v180, v182.f64[0]), v176, v182, 1));
                v104 = vsubq_f64(v104, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v188, v183.f64[0]), v189, v183, 1), v190, v182.f64[0]), v191, v182, 1));
                v105 = vsubq_f64(v105, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v179, v185.f64[0]), v178, v185, 1), v180, v184.f64[0]), v176, v184, 1));
                v106 = vsubq_f64(v106, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v188, v185.f64[0]), v189, v185, 1), v190, v184.f64[0]), v191, v184, 1));
                v107 = vsubq_f64(v107, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v179, v187.f64[0]), v178, v187, 1), v180, v186.f64[0]), v176, v186, 1));
                v108 = vsubq_f64(v108, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v188, v187.f64[0]), v189, v187, 1), v190, v186.f64[0]), v191, v186, 1));
              }
            }
            v63 = (int64x2_t *)(v99 + 8 * v98);
            v64 = *v63;
            _Q22 = v63[98];
            _Q19 = v63[197];
            _Q20 = v63[196];
            _Q17 = v63[295];
            _Q18 = v63[294];
            *(float64x2_t *)v100 = v102;
            *(float64x2_t *)(v100 + 16) = v101;
            *(float64x2_t *)(v100 + 1568) = v104;
            *(float64x2_t *)(v100 + 1584) = v103;
            *(float64x2_t *)(v100 + 3136) = v106;
            *(float64x2_t *)(v100 + 3152) = v105;
            *(float64x2_t *)(v100 + 4704) = v108;
            *(float64x2_t *)(v100 + 4720) = v107;
            v70.f64[0] = *(float64_t *)(v100 + 3136);
            v71.f64[0] = *(float64_t *)v100;
            v71.f64[1] = *(float64_t *)(v100 + 1568);
            v70.f64[1] = *(float64_t *)(v100 + 4704);
            _Q1 = (float64x2_t)vdupq_lane_s64(v64.i64[0], 0);
            _Q2 = (int64x2_t)vdivq_f64(v70, _Q1);
            _Q3 = vdivq_f64(v71, _Q1);
            __asm
            {
              FMLS            D4, D22, V3.D[0]
              FMLS            D1, D22, V3.D[1]
            }
            _Q4.f64[1] = _Q1.f64[0];
            _Q5 = (float64x2_t)vdupq_laneq_s64(_Q22, 1);
            _Q1 = (int64x2_t)vdivq_f64(_Q4, _Q5);
            *(int64x2_t *)v100 = vzip1q_s64((int64x2_t)_Q3, _Q1);
            __asm
            {
              FMLS            D6, D22, V2.D[0]
              FMLS            D7, D22, V2.D[1]
            }
            _Q6.f64[1] = _D7;
            *(int64x2_t *)(v100 + 1568) = vzip2q_s64((int64x2_t)_Q3, _Q1);
            _Q4 = (int64x2_t)vdivq_f64(_Q6, _Q5);
            *(int64x2_t *)(v100 + 3136) = vzip1q_s64(_Q2, _Q4);
            *(int64x2_t *)(v100 + 4704) = vzip2q_s64(_Q2, _Q4);
            __asm
            {
              FMLS            D5, D20, V3.D[0]
              FMLS            D7, D20, V3.D[1]
              FMLS            D3, D20, V2.D[0]
              FMLS            D16, D20, V2.D[1]
            }
            _Q2.i64[0] = _Q20.i64[1];
            __asm
            {
              FMLS            D5, D1, V20.D[1]
              FMLS            D7, D2, V1.D[1]
              FMLS            D3, D4, V20.D[1]
              FMLS            D16, D2, V4.D[1]
            }
            _Q5.f64[1] = _D7;
            _Q3.f64[1] = _D16;
            v88 = (float64x2_t)vdupq_lane_s64(_Q19.i64[0], 0);
            _Q3 = (int8x16_t)vdivq_f64(_Q3, v88);
            _Q2 = (int8x16_t)vdivq_f64(_Q5, v88);
            *(_QWORD *)(v100 + 1584) = vextq_s8(_Q2, _Q2, 8uLL).u64[0];
            *(_QWORD *)(v100 + 3152) = _Q3.i64[0];
            *(_QWORD *)(v100 + 4720) = vextq_s8(_Q3, _Q3, 8uLL).u64[0];
            _Q19.i64[0] = _Q18.i64[1];
            __asm
            {
              FMLS            D5, D1, V18.D[1]
              FMLS            D6, D19, V1.D[1]
              FMLS            D7, D4, V18.D[1]
              FMLS            D16, D19, V4.D[1]
              FMLS            D5, D17, V2.D[0]
              FMLS            D6, D17, V2.D[1]
              FMLS            D7, D17, V3.D[0]
            }
            _Q5.f64[1] = _Q6.f64[0];
            __asm { FMLS            D16, D17, V3.D[1] }
            _Q7.f64[1] = _D16;
            v95 = (float64x2_t)vdupq_laneq_s64(_Q17, 1);
            v96 = (int8x16_t)vdivq_f64(_Q7, v95);
            v97 = (int8x16_t)vdivq_f64(_Q5, v95);
            *(_QWORD *)(v100 + 16) = _Q2.i64[0];
            *(_QWORD *)(v100 + 24) = v97.i64[0];
            *(_QWORD *)(v100 + 1592) = vextq_s8(v97, v97, 8uLL).u64[0];
            *(_QWORD *)(v100 + 3160) = v96.i64[0];
            *(_QWORD *)(v100 + 4728) = vextq_s8(v96, v96, 8uLL).u64[0];
            v58 += 4;
            v60 = v98 + 784;
            ++v59;
          }
          while (v59 != v55);
          v192 = v56 + 8 * v57;
          v193 = v192 + 8 * v53;
          v194 = *(float64x2_t *)v193;
          v195 = *(float64x2_t *)(v193 + 1568);
          v196 = *(float64x2_t *)(v193 + 3152);
          v197 = *(float64x2_t *)(v193 + 3136);
          v198 = *(float64x2_t *)(v193 + 4720);
          v199 = *(float64x2_t *)(v193 + 4704);
          if (v55 == 1)
          {
            v200 = 0;
          }
          else
          {
            v200 = 0;
            v201 = *(float64x2_t *)(v193 + 16);
            v202 = *(float64x2_t *)(v193 + 1584);
            do
            {
              v203 = v62[1];
              v204 = v62[99];
              v205 = v62[98];
              v206 = v62[197];
              v207 = v62[196];
              v208 = v62[295];
              v209 = v62[294];
              v210 = (float64x2_t)vzip1q_s64((int64x2_t)v207, (int64x2_t)v209);
              *(_QWORD *)&v211.f64[0] = vdupq_laneq_s64((int64x2_t)v207, 1).u64[0];
              v211.f64[1] = v62[294].f64[1];
              v212 = (float64x2_t)vzip1q_s64((int64x2_t)v206, (int64x2_t)v208);
              *(_QWORD *)&v213.f64[0] = vdupq_laneq_s64((int64x2_t)v206, 1).u64[0];
              v214 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v62, (int64x2_t)v205);
              v213.f64[1] = v62[295].f64[1];
              v215 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v62, (int64x2_t)v205);
              v216 = (float64x2_t)vzip1q_s64((int64x2_t)v203, (int64x2_t)v204);
              v217 = (float64x2_t)vzip2q_s64((int64x2_t)v203, (int64x2_t)v204);
              v218 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v214, v62->f64[0]), v215, *v62, 1), v216, v203.f64[0]), v217, v203, 1);
              v219 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v214, v205.f64[0]), v215, v205, 1), v216, v204.f64[0]), v217, v204, 1);
              v220 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v210, v205.f64[0]), v211, v205, 1), v212, v204.f64[0]);
              v221 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v214, v207.f64[0]), v215, v207, 1), v216, v206.f64[0]), v217, v206, 1);
              v222 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v210, v207.f64[0]), v211, v207, 1), v212, v206.f64[0]);
              v223 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v214, v209.f64[0]), v215, v209, 1), v216, v208.f64[0]), v217, v208, 1);
              v224 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v210, v62->f64[0]), v211, *v62, 1), v212, v203.f64[0]), v213, v203, 1);
              v225 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v210, v209.f64[0]), v211, v209, 1), v212, v208.f64[0]);
              v227 = v62[2];
              v226 = v62[3];
              v228 = v62[101];
              v229 = vmlaq_laneq_f64(v220, v213, v204, 1);
              v230 = v62[100];
              v231 = v62[199];
              v232 = v62[198];
              v233 = v62[297];
              v234 = v62[296];
              v235 = vmlaq_laneq_f64(v222, v213, v206, 1);
              v236 = (float64x2_t)vzip1q_s64((int64x2_t)v232, (int64x2_t)v234);
              *(_QWORD *)&v217.f64[0] = vdupq_laneq_s64((int64x2_t)v232, 1).u64[0];
              v217.f64[1] = v62[296].f64[1];
              v237 = vmlaq_laneq_f64(v225, v213, v208, 1);
              v238 = (float64x2_t)vzip1q_s64((int64x2_t)v231, (int64x2_t)v233);
              *(_QWORD *)&v213.f64[0] = vdupq_laneq_s64((int64x2_t)v231, 1).u64[0];
              v213.f64[1] = v62[297].f64[1];
              v239 = vsubq_f64(v194, v218);
              v240 = (float64x2_t)vzip1q_s64((int64x2_t)v227, (int64x2_t)v230);
              v241 = (float64x2_t)vzip2q_s64((int64x2_t)v227, (int64x2_t)v230);
              v242 = (float64x2_t)vzip1q_s64((int64x2_t)v226, (int64x2_t)v228);
              v243 = vsubq_f64(v195, v219);
              v244 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v240, v227.f64[0]), v241, v227, 1), v242, v226.f64[0]);
              v245 = vmlaq_laneq_f64(vmulq_n_f64(v236, v227.f64[0]), v217, v227, 1);
              v246 = (float64x2_t)vzip2q_s64((int64x2_t)v226, (int64x2_t)v228);
              v201 = vsubq_f64(vsubq_f64(v201, v224), vmlaq_laneq_f64(vmlaq_n_f64(v245, v238, v226.f64[0]), v213, v226, 1));
              v194 = vsubq_f64(v239, vmlaq_laneq_f64(v244, v246, v226, 1));
              v202 = vsubq_f64(vsubq_f64(v202, v229), vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v236, v230.f64[0]), v217, v230, 1), v238, v228.f64[0]), v213, v228, 1));
              v195 = vsubq_f64(v243, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v240, v230.f64[0]), v241, v230, 1), v242, v228.f64[0]), v246, v228, 1));
              v196 = vsubq_f64(vsubq_f64(v196, v235), vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v236, v232.f64[0]), v217, v232, 1), v238, v231.f64[0]), v213, v231, 1));
              v197 = vsubq_f64(vsubq_f64(v197, v221), vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v240, v232.f64[0]), v241, v232, 1), v242, v231.f64[0]), v246, v231, 1));
              v199 = vsubq_f64(vsubq_f64(v199, v223), vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v240, v234.f64[0]), v241, v234, 1), v242, v233.f64[0]), v246, v233, 1));
              v198 = vsubq_f64(vsubq_f64(v198, v237), vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v236, v234.f64[0]), v217, v234, 1), v238, v233.f64[0]), v213, v233, 1));
              v200 += 8;
              v62 += 4;
              v61 -= 2;
            }
            while (v61);
          }
          if ((v55 & 1) != 0)
          {
            v247 = v192 + 8 * v200;
            v248 = *(float64x2_t *)(v247 + 16);
            v249 = *(float64x2_t *)(v247 + 1584);
            v250 = *(float64x2_t *)(v247 + 1568);
            v251 = *(float64x2_t *)(v247 + 3152);
            v252 = *(float64x2_t *)(v247 + 3136);
            v253 = *(float64x2_t *)(v247 + 4720);
            v254 = *(float64x2_t *)(v247 + 4704);
            *(_QWORD *)&v255.f64[0] = vdupq_laneq_s64((int64x2_t)v252, 1).u64[0];
            v256 = (float64x2_t)vzip1q_s64((int64x2_t)v252, (int64x2_t)v254);
            v255.f64[1] = *(float64_t *)(v247 + 4712);
            v257 = (float64x2_t)vzip1q_s64((int64x2_t)v251, (int64x2_t)v253);
            *(_QWORD *)&v258.f64[0] = vdupq_laneq_s64((int64x2_t)v251, 1).u64[0];
            v258.f64[1] = *(float64_t *)(v247 + 4728);
            v259 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v247, (int64x2_t)v250);
            v260 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v247, (int64x2_t)v250);
            v261 = (float64x2_t)vzip1q_s64((int64x2_t)v248, (int64x2_t)v249);
            v262 = (float64x2_t)vzip2q_s64((int64x2_t)v248, (int64x2_t)v249);
            *(_QWORD *)&v194.f64[0] = *(_OWORD *)&vsubq_f64(v194, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v259, *(double *)v247), v260, *(float64x2_t *)v247, 1), v261, v248.f64[0]), v262, v248, 1));
            v195 = vsubq_f64(v195, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v259, v250.f64[0]), v260, v250, 1), v261, v249.f64[0]), v262, v249, 1));
            *(_QWORD *)&v196.f64[0] = *(_OWORD *)&vsubq_f64(v196, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v256, v252.f64[0]), v255, v252, 1), v257, v251.f64[0]), v258, v251, 1));
            v197 = vsubq_f64(v197, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v259, v252.f64[0]), v260, v252, 1), v261, v251.f64[0]), v262, v251, 1));
            v198 = vsubq_f64(v198, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v256, v254.f64[0]), v255, v254, 1), v257, v253.f64[0]), v258, v253, 1));
            v199 = vsubq_f64(v199, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v259, v254.f64[0]), v260, v254, 1), v261, v253.f64[0]), v262, v253, 1));
          }
        }
        else
        {
          v193 = v56 + 8 * v53 + 8 * v54;
          v194 = *(float64x2_t *)v193;
          v195 = *(float64x2_t *)(v193 + 1568);
          v196 = *(float64x2_t *)(v193 + 3152);
          v197 = *(float64x2_t *)(v193 + 3136);
          v198 = *(float64x2_t *)(v193 + 4720);
          v199 = *(float64x2_t *)(v193 + 4704);
        }
        if (v194.f64[0] <= 0.0)
          break;
        v263 = sqrt(v194.f64[0]);
        v195.f64[0] = v195.f64[0] / v263;
        v264 = v195.f64[1] - v195.f64[0] * v195.f64[0];
        if (v264 <= 0.0)
          break;
        v265 = sqrt(v264);
        v266 = vdivq_f64((float64x2_t)vzip1q_s64((int64x2_t)v197, (int64x2_t)v199), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v263, 0));
        v267 = v196.f64[0] - vmulq_f64(v266, v266).f64[0];
        v268 = vdivq_f64(vsubq_f64((float64x2_t)vzip2q_s64((int64x2_t)v197, (int64x2_t)v199), vmulq_n_f64(v266, v195.f64[0])), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v265, 0));
        v269 = v267 - vmulq_f64(v268, v268).f64[0];
        if (v269 <= 0.0)
          break;
        v270 = sqrt(v269);
        v271 = (v198.f64[0] - vmuld_lane_f64(v266.f64[0], v266, 1) - vmuld_lane_f64(v268.f64[0], v268, 1)) / v270;
        v272 = v198.f64[1] - vmuld_lane_f64(v266.f64[1], v266, 1) - vmuld_lane_f64(v268.f64[1], v268, 1) - v271 * v271;
        if (v272 <= 0.0)
          break;
        *(double *)v193 = v263;
        *(_QWORD *)(v193 + 8) = 0;
        *(_OWORD *)(v193 + 16) = 0uLL;
        *(float64_t *)(v193 + 1568) = v195.f64[0];
        *(double *)(v193 + 1576) = v265;
        *(_OWORD *)(v193 + 1584) = 0uLL;
        *(float64_t *)(v193 + 3136) = v266.f64[0];
        *(float64_t *)(v193 + 3144) = v268.f64[0];
        *(double *)(v193 + 3152) = v270;
        *(_QWORD *)(v193 + 3160) = 0;
        *(float64_t *)(v193 + 4704) = v266.f64[1];
        *(float64_t *)(v193 + 4712) = v268.f64[1];
        *(double *)(v193 + 4720) = v271;
        *(double *)(v193 + 4728) = sqrt(v272);
        v53 += 4;
        v54 = v57 + 784;
        if (++v55 == v52 >> 2)
          goto LABEL_53;
      }
LABEL_125:
      v372 = 0;
      *(_DWORD *)(v12 + 363820) = 3;
    }
    else
    {
      LODWORD(v53) = 0;
      v54 = 0;
LABEL_53:
      if (v53 < v52)
      {
        v273 = 0;
        v274 = v12 + 8 * v54;
        v275 = (double *)(v274 + 44352);
        v276 = v53;
        v277 = (_OWORD *)(v274 + 44384);
        do
        {
          v278 = v276 >> 2;
          if (v276 >> 2 <= 1)
            v278 = 1;
          v279 = (v53 + v273) >> 2;
          if (v279 <= 1)
            LOBYTE(v279) = 1;
          if (v276)
          {
            v280 = 0;
            v281 = v278 & 0x3FFFFFFE;
            v282 = 4 * v278;
            v283 = v12 + 44352;
            do
            {
              v284 = v280 >> 2;
              if (v280 >> 2 <= 1)
                v284 = 1;
              v285 = v275[v280];
              if (v280 >= 4)
              {
                if (v280 >= 8)
                {
                  v288 = 0;
                  v287 = 0;
                  v289 = v284 & 0x3FFFFFFE;
                  do
                  {
                    _Q2 = *(_OWORD *)&v275[v288];
                    _Q1 = *(_OWORD *)&v275[v288 + 2];
                    _D4 = *(_QWORD *)(v283 + v288 * 8 + 8);
                    __asm { FMLA            D5, D4, V2.D[1] }
                    *(_QWORD *)&_Q2 = *(_QWORD *)(v283 + v288 * 8 + 24);
                    __asm { FMLA            D5, D2, V1.D[1] }
                    v295 = v285 - _D5;
                    _Q2 = *(_OWORD *)&v275[v288 + 4];
                    _Q1 = *(_OWORD *)&v275[v288 + 6];
                    _D4 = *(_QWORD *)(v283 + v288 * 8 + 40);
                    __asm { FMLA            D5, D4, V2.D[1] }
                    *(_QWORD *)&_Q2 = *(_QWORD *)(v283 + v288 * 8 + 56);
                    __asm { FMLA            D5, D2, V1.D[1] }
                    v285 = v295 - _D5;
                    v287 += 8;
                    v288 += 8;
                    v289 -= 2;
                  }
                  while (v289);
                }
                else
                {
                  v287 = 0;
                }
                v286 = 4 * v284;
                if ((v284 & 1) != 0)
                {
                  v301 = 8 * v287;
                  v302 = &v275[v287];
                  v303 = v283 + v301;
                  _Q2 = *(_OWORD *)v302;
                  _Q1 = *((_OWORD *)v302 + 1);
                  _D4 = *(_QWORD *)(v303 + 8);
                  __asm { FMLA            D5, D4, V2.D[1] }
                  *(_QWORD *)&_Q2 = *(_QWORD *)(v303 + 24);
                  __asm { FMLA            D5, D2, V1.D[1] }
                  v285 = v285 - _D5;
                }
              }
              else
              {
                v286 = 0;
              }
              if ((v280 & 3) != 0)
                v285 = v285 - v275[v286] * *(double *)(v283 + 8 * v286);
              if ((v280 & 2) != 0)
                v285 = v285 - v275[v286 | 1] * *(double *)(v283 + 8 * (v286 | 1));
              if ((v280 & 3) == 3)
                v285 = v285 - v275[v286 | 2] * *(double *)(v283 + 8 * (v286 | 2));
              v275[v280] = v285 / *(double *)(v283 + 8 * v280);
              v283 += 1568;
              ++v280;
            }
            while (v280 != v276);
            v309 = &v275[v276];
            v310 = *v309;
            if (v276 >= 4)
            {
              if ((v53 + v273) >= 8)
              {
                v311 = 0;
                v312 = v277;
                do
                {
                  _D4 = *((_QWORD *)v312 - 3);
                  __asm { FMLA            D3, D4, V2.D[1] }
                  _D2 = *((_QWORD *)v312 - 1);
                  __asm { FMLA            D3, D2, V1.D[1] }
                  v317 = v310 - _D3;
                  _Q2 = *v312;
                  _Q1 = v312[1];
                  v312 += 4;
                  _D4 = *((_QWORD *)&_Q2 + 1);
                  __asm { FMLA            D3, D4, V2.D[1] }
                  *(_QWORD *)&_Q2 = *((_QWORD *)&_Q1 + 1);
                  __asm { FMLA            D3, D2, V1.D[1] }
                  v310 = v317 - _D3;
                  v311 += 8;
                  v281 -= 2;
                }
                while (v281);
              }
              else
              {
                v311 = 0;
              }
              if ((v279 & 1) != 0)
              {
                v323 = &v275[v311];
                _Q2 = *(_OWORD *)v323;
                _D4 = *((_QWORD *)v323 + 1);
                __asm { FMLA            D3, D4, V2.D[1] }
                *(double *)&_Q2 = v323[3];
                __asm { FMLA            D3, D2, V1.D[1] }
                v310 = v310 - _D3;
              }
            }
            else
            {
              v282 = 0;
            }
            v328 = v276 & 3;
            if ((v276 & 3) != 0)
              v310 = v310 - v275[v282] * v275[v282];
            if ((v276 & 2) != 0)
            {
              v310 = v310 - v275[v282 | 1] * v275[v282 | 1];
              if (v328 != 3)
              {
LABEL_95:
                if (v310 < 0.0)
                  goto LABEL_125;
                goto LABEL_96;
              }
            }
            else if (v328 != 3)
            {
              goto LABEL_95;
            }
            v310 = v310 - v275[v282 | 2] * v275[v282 | 2];
            if (v310 < 0.0)
              goto LABEL_125;
          }
          else
          {
            v310 = *v275;
            v309 = v275;
            if (*v275 < 0.0)
              goto LABEL_125;
          }
LABEL_96:
          *v309 = sqrt(v310);
          v275 += 196;
          ++v276;
          ++v273;
          v277 += 98;
        }
        while (v276 != v52);
      }
      v329 = vaddq_f64(*(float64x2_t *)(v12 + 44080), (float64x2_t)0);
      *(float64x2_t *)(v12 + 44064) = vaddq_f64(*(float64x2_t *)(v12 + 44064), (float64x2_t)0);
      *(float64x2_t *)(v12 + 44080) = v329;
      if ((_DWORD)v52)
      {
        v330 = 0;
        v331 = v12 + 357392;
        while (1)
        {
          if (v330 >> 2 <= 1)
            v333 = 1;
          else
            v333 = v330 >> 2;
          v334 = v330 & 3;
          if (v330 >= 4)
          {
            if (v333 >= 4)
            {
              v337 = 0;
              v336 = 0;
              v338 = v333 & 0x3FFFFFFC;
              v332 = 0.0;
              do
              {
                _Q4 = *(_OWORD *)&v16[v337];
                _Q3 = *(_OWORD *)&v16[v337 + 2];
                _D6 = *(_QWORD *)(v331 + v337 * 8 - 56);
                __asm { FMLA            D7, D6, V4.D[1] }
                *(_QWORD *)&_Q4 = *(_QWORD *)(v331 + v337 * 8 - 40);
                __asm { FMLA            D7, D4, V3.D[1] }
                v344 = v332 + _D7;
                _Q4 = *(_OWORD *)&v16[v337 + 4];
                _Q3 = *(_OWORD *)&v16[v337 + 6];
                _D6 = *(_QWORD *)(v331 + v337 * 8 - 24);
                __asm { FMLA            D7, D6, V4.D[1] }
                *(_QWORD *)&_Q4 = *(_QWORD *)(v331 + v337 * 8 - 8);
                __asm { FMLA            D7, D4, V3.D[1] }
                v350 = v344 + _D7;
                _Q4 = *(_OWORD *)&v16[v337 + 8];
                _Q3 = *(_OWORD *)&v16[v337 + 10];
                _D6 = *(_QWORD *)(v331 + v337 * 8 + 8);
                __asm { FMLA            D7, D6, V4.D[1] }
                *(_QWORD *)&_Q4 = *(_QWORD *)(v331 + v337 * 8 + 24);
                __asm { FMLA            D7, D4, V3.D[1] }
                v356 = v350 + _D7;
                _Q4 = *(_OWORD *)&v16[v337 + 12];
                _Q3 = *(_OWORD *)&v16[v337 + 14];
                _D6 = *(_QWORD *)(v331 + v337 * 8 + 40);
                __asm { FMLA            D7, D6, V4.D[1] }
                *(_QWORD *)&_Q4 = *(_QWORD *)(v331 + v337 * 8 + 56);
                __asm { FMLA            D7, D4, V3.D[1] }
                v332 = v356 + _D7;
                v336 += 16;
                v337 += 16;
                v338 -= 4;
              }
              while (v338);
            }
            else
            {
              v336 = 0;
              v332 = 0.0;
            }
            v362 = v333 & 3;
            if ((v333 & 3) != 0)
            {
              v363 = v336;
              do
              {
                _Q4 = *(_OWORD *)&v16[v363];
                _Q3 = *(_OWORD *)&v16[v363 + 2];
                _D6 = v743[v363 + 1];
                __asm { FMLA            D7, D6, V4.D[1] }
                *(double *)&_Q4 = v743[v363 + 3];
                __asm { FMLA            D7, D4, V3.D[1] }
                v332 = v332 + _D7;
                v363 += 4;
                --v362;
              }
              while (v362);
            }
            v369 = 4 * (v333 - 1) + 4;
            if ((v330 & 3) != 0)
              v332 = v332 + v16[v369 & 0xFFFFFFFC] * v743[v369 & 0xFFFFFFFC];
            if ((v330 & 2) != 0)
            {
              v370 = (32 * (((unint64_t)(v369 & 0xFFFFFFFC) >> 2) & 0x3FFFFFFF)) | 8;
              v332 = v332 + *(double *)((char *)v16 + v370) * *(double *)((char *)v743 + v370);
            }
            if (v334 != 3)
              goto LABEL_100;
            v371 = (32 * (((unint64_t)(v369 & 0xFFFFFFFC) >> 2) & 0x3FFFFFFF)) | 0x10;
            v335 = *(double *)((char *)v16 + v371) * *(double *)((char *)v743 + v371);
          }
          else if ((v330 & 3) != 0)
          {
            v332 = *v16 * *v743 + 0.0;
            if ((v330 & 2) != 0)
              v332 = v332 + v16[1] * *(double *)(v12 + 357336);
            if (v334 != 3)
              goto LABEL_100;
            v335 = v16[2] * *(double *)(v12 + 357344);
          }
          else
          {
            v332 = 0.0;
            if ((v330 & 2) == 0)
              goto LABEL_100;
            v332 = v16[1] * *(double *)(v12 + 357336);
            v335 = 0.0;
          }
          v332 = v335 + v332;
LABEL_100:
          v743[v330] = (v743[v330] - v332) / v16[v330];
          v16 += 196;
          if (++v330 == v52)
          {
            v373 = 0;
            v374 = 196 * v52;
            v375 = v12 + 44352;
            v376 = 197 * v52 + 195;
            v377 = v52;
            while (1)
            {
              v379 = v377 - 1;
              v380 = 196 * v377;
              if ((int)v377 + 3 < v52)
              {
                v378 = 0.0;
                v381 = v376;
                v382 = v373;
                do
                {
                  v383 = v375 + 8 * v379 + 8 * v380;
                  v384 = &v743[(v52 + v382)];
                  _Q4 = *(_OWORD *)v384;
                  _Q3 = *((_OWORD *)v384 + 1);
                  _D6 = *(_QWORD *)(v383 + 1568);
                  __asm { FMLA            D5, D6, V4.D[1] }
                  *(_QWORD *)&_Q4 = *(_QWORD *)(v383 + 4704);
                  __asm { FMLA            D5, D4, V3.D[1] }
                  v378 = v378 + _D5;
                  v380 += 784;
                  v382 += 4;
                  v381 += 784;
                }
                while ((int)v52 + v382 + 3 < v52);
                if ((-v382 & 3) != 0)
                  v378 = v378 + v743[(v52 + v382)] * *(double *)(v375 + 8 * (v381 - 196));
                if ((-v382 & 2) != 0)
                  v378 = v378 + v743[(v52 + v382 + 1)] * *(double *)(v375 + 8 * v381);
                if ((-v382 & 3) != 3)
                  goto LABEL_128;
                v390 = (v52 + v382 + 2);
                goto LABEL_127;
              }
              if ((((_BYTE)v52 - (_BYTE)v377) & 3) == 0)
                break;
              v378 = v743[v377] * *(double *)(v375 + 8 * (v380 + v379)) + 0.0;
              if ((((_BYTE)v52 - (_BYTE)v377) & 2) != 0)
                goto LABEL_140;
LABEL_141:
              if ((((_BYTE)v52 - (_BYTE)v377) & 3) != 3)
                goto LABEL_128;
              v390 = (v377 + 2);
LABEL_127:
              v378 = v378 + v743[v390] * *(double *)(v375 + 8 * ((_DWORD)v377 + 391 + v380));
LABEL_128:
              v374 -= 196;
              v743[(v377 - 1)] = (v743[(v377 - 1)] - v378)
                                             / *(double *)(v375 + 8 * (v374 + v377 - 1));
              --v373;
              v376 -= 197;
              --v377;
              if (!v379)
                goto LABEL_145;
            }
            v378 = 0.0;
            if ((((_BYTE)v52 - (_BYTE)v377) & 2) == 0)
              goto LABEL_141;
LABEL_140:
            v378 = v378 + v743[(v377 + 1)] * *(double *)(v375 + 8 * ((_DWORD)v377 + 195 + v380));
            goto LABEL_141;
          }
        }
      }
LABEL_145:
      v391 = vaddq_f64(*(float64x2_t *)(v12 + 44112), (float64x2_t)0);
      *(float64x2_t *)(v12 + 44096) = vaddq_f64(*(float64x2_t *)(v12 + 44096), (float64x2_t)0);
      *(float64x2_t *)(v12 + 44112) = v391;
      v372 = 1;
    }
    kdebug_trace();
    if ((v372 & 1) != 0)
    {
      if ((*(_DWORD *)(*((_QWORD *)&v756 + 1) + 8) != -1
         || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 188, (uint64_t)"write_channel != kInvalidChannel && \"DMA write request not permitted.\"", 70, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))&& (**((_DWORD **)&v756 + 1) >= 0x20BCC4u|| !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 191, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)))
      {
        v742 = v12 + 359016;
        *(_DWORD *)(*(_QWORD *)(*((_QWORD *)&v756 + 1) + 16) + 2145472) = 1019;
        v394 = *(unsigned int *)(v12 + 31048);
        v395 = &v743[v394];
        *(_OWORD *)v395 = 0u;
        *((_OWORD *)v395 + 1) = 0u;
        *((_OWORD *)v395 + 2) = 0u;
        *((_OWORD *)v395 + 3) = 0u;
        *((_OWORD *)v395 + 4) = 0u;
        *((_OWORD *)v395 + 5) = 0u;
        *((_OWORD *)v395 + 6) = 0u;
        *((_OWORD *)v395 + 7) = 0u;
        v396 = *(unsigned int *)(v12 + 31052);
        if ((_DWORD)v396)
        {
          v397 = 0;
          v398 = &__dst[4 * v394];
          do
          {
            sub_20FCB082C(*((uint64_t *)&v756 + 1), 780 * v397 + 1257856, (4 * *(_DWORD *)(v12 + 31048)), __dst);
            v399 = vaddq_f64(*(float64x2_t *)(v12 + 43824), (float64x2_t)0);
            *(float64x2_t *)(v12 + 43808) = vaddq_f64(*(float64x2_t *)(v12 + 43808), (float64x2_t)0);
            *(float64x2_t *)(v12 + 43824) = v399;
            *v398 = 0u;
            v398[1] = 0u;
            v398[2] = 0u;
            v398[3] = 0u;
            v400 = *(double *)(v12 + 8 * v394 + 351680 + 8 * v397);
            if ((_DWORD)v394)
            {
              v401 = 0;
              v402 = (float32x4_t *)__dst;
              v403 = (float64x2_t *)(v12 + 357328);
              do
              {
                _Q2 = v403[6];
                _Q1 = v403[7];
                _Q4 = v403[4];
                _Q3 = v403[5];
                _Q6 = v403[2];
                _Q5 = v403[3];
                _Q16 = *v403;
                _Q7 = v403[1];
                v403 += 8;
                v411 = v402[1];
                v412 = v402[2];
                v413 = v402[3];
                _D24 = vcvtq_f64_f32(*(float32x2_t *)v402).f64[1];
                __asm { FMLA            D25, D24, V16.D[1] }
                _Q16.f64[0] = vcvt_hight_f64_f32(*v402).f64[1];
                __asm { FMLA            D25, D16, V7.D[1] }
                _Q16.f64[0] = vcvtq_f64_f32(*(float32x2_t *)&v411).f64[1];
                __asm { FMLA            D25, D16, V6.D[1] }
                _Q6.f64[0] = vcvt_hight_f64_f32(v411).f64[1];
                __asm { FMLA            D25, D6, V5.D[1] }
                _Q6.f64[0] = vcvtq_f64_f32(*(float32x2_t *)&v412).f64[1];
                __asm { FMLA            D25, D6, V4.D[1] }
                _Q4.f64[0] = vcvt_hight_f64_f32(v412).f64[1];
                v393 = vcvtq_f64_f32(*(float32x2_t *)v413.f32);
                __asm { FMLA            D25, D4, V3.D[1] }
                _Q3.f64[0] = v393.f64[1];
                __asm { FMLA            D25, D3, V2.D[1] }
                _Q2.f64[0] = vcvt_hight_f64_f32(v413).f64[1];
                __asm { FMLA            D25, D2, V1.D[1] }
                v400 = v400 - _D25;
                v401 += 16;
                v402 += 4;
              }
              while (v401 < v394);
            }
            *(double *)(v742 + 8 * v397) = *(double *)(v12 + 361416 + 8 * v397) * v400;
            ++v397;
          }
          while (v397 != v396);
        }
        v14 = *((_QWORD *)&v756 + 1);
        v424 = v12 + 359016;
        if ((*(_DWORD *)(*((_QWORD *)&v756 + 1) + 8) != -1
           || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 188, (uint64_t)"write_channel != kInvalidChannel && \"DMA write request not permitted.\"", 70, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))&& (**((_DWORD **)&v756 + 1) >= 0x20BCC4u|| !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 191, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)))
        {
          *(_DWORD *)(*(_QWORD *)(*((_QWORD *)&v756 + 1) + 16) + 2145472) = 1020;
          v425.f64[1] = 0.0;
          v426 = vaddq_f64(*(float64x2_t *)(v12 + 44048), (float64x2_t)0);
          *(float64x2_t *)(v12 + 44032) = vaddq_f64(*(float64x2_t *)(v12 + 44032), (float64x2_t)0);
          *(float64x2_t *)(v12 + 44048) = v426;
          if (!v737)
            goto LABEL_438;
          --*(_DWORD *)(v12 + 363816);
          if (*(_DWORD *)(*((_QWORD *)&v756 + 1) + 8) == -1
            && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 188, (uint64_t)"write_channel != kInvalidChannel && \"DMA write request not permitted.\"", 70, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| **((_DWORD **)&v756 + 1) < 0x20BCC4u&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 191, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          *(_DWORD *)(*(_QWORD *)(*((_QWORD *)&v756 + 1) + 16) + 2145472) = 1032;
          ++*(_DWORD *)(v12 + 363816);
          *(_BYTE *)(v12 + 31280) = 1;
          __src = (_DWORD *)(v12 + 64);
          v735 = (_BYTE *)(v12 + 31064);
          if (!*(_BYTE *)(v12 + 31281))
          {
            *(_BYTE *)(v12 + 31281) = 1;
            if (*(_DWORD *)(*((_QWORD *)&v756 + 1) + 8) == -1
              && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 188, (uint64_t)"write_channel != kInvalidChannel && \"DMA write request not permitted.\"", 70, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| **((_DWORD **)&v756 + 1) >> 7 <= 0xC0Cu&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 191, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              abort();
            }
            memcpy((void *)(*(_QWORD *)(*((_QWORD *)&v756 + 1) + 16) + 363904), __src, 0x7900uLL);
          }
          v427 = *(_DWORD *)(v12 + 1744);
          if (v427)
          {
            v428 = 0;
            v429 = *(unsigned __int8 *)(v12 + 31074);
            v430 = 168 * v427;
            v431 = 31116;
            do
            {
              v432 = *(unsigned int *)(v12 + v431 - 40);
              if ((_DWORD)v432 == -1)
                break;
              v433 = *(unsigned int *)(v12 + v431);
              v434 = v743[v432];
              v437.f64[0] = -v434;
              v435 = v743[v432 + 1];
              v436 = v743[(v432 + 2)];
              v437.f64[1] = -v435;
              *(double *)&v438 = v743[v433];
              *((double *)&v438 + 1) = v743[(v433 + 1)];
              v761 = v438;
              *(double *)&v438 = -v743[(v433 + 2)];
              v758 = (float64x2_t)v438;
              v439 = v12 + v428;
              v440 = sqrt(v434 * v434 + v435 * v435 + v436 * v436);
              v425.f64[0] = 1.0 / v440;
              if (v440 == 0.0)
                v425.f64[0] = 1.0;
              v393.f64[0] = -v436;
              v757 = vmulq_f64(v393, v425).f64[0];
              v755 = (__int128)vmulq_n_f64(v437, v425.f64[0]);
              v442 = __sincos_stret(v440);
              cosval = v442.__cosval;
              v443 = (float64x2_t)v755;
              _Q3.f64[0] = cosval + (1.0 - cosval) * vmuld_n_f64(v443.f64[0], v443.f64[0]);
              v444 = (1.0 - v442.__cosval) * vmuld_lane_f64(v443.f64[0], v443, 1);
              v445 = v444 - v442.__sinval * v757;
              v446 = (1.0 - v442.__cosval) * vmuld_n_f64(*(double *)&v755, v757);
              v447 = vmuld_lane_f64(v442.__sinval, (float64x2_t)v755, 1);
              v448 = v447 + v446;
              v449 = v442.__sinval * v757 + v444;
              v450 = cosval + (1.0 - cosval) * vmuld_lane_f64(*((double *)&v755 + 1), (float64x2_t)v755, 1);
              v451 = (1.0 - v442.__cosval) * vmuld_lane_f64(v757, (float64x2_t)v755, 1);
              v443.f64[0] = v451 - v442.__sinval * *(double *)&v755;
              v452 = v446 - v447;
              v453 = v442.__sinval * *(double *)&v755 + v451;
              v454 = cosval + (1.0 - cosval) * vmuld_n_f64(v757, v757);
              v425.f64[0] = *(float64_t *)(v439 + 80);
              v393 = *(float64x2_t *)(v439 + 64);
              v455 = *(double *)(v439 + 104);
              v456 = *(float64x2_t *)(v439 + 88);
              v457 = *(double *)(v439 + 128);
              v458 = *(float64x2_t *)(v439 + 112);
              v459 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v393, _Q3.f64[0]), v456, v449), v458, v452);
              _Q3.f64[0] = v425.f64[0] * _Q3.f64[0] + v455 * v449 + v457 * v452;
              v460 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v393, v445), v456, v450), v458, v453);
              v461 = v425.f64[0] * v445 + v455 * v450 + v457 * v453;
              v462 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v393, v448), v456, v443.f64[0]), v458, v454);
              *(float64x2_t *)(v439 + 64) = v459;
              *(float64_t *)(v439 + 80) = _Q3.f64[0];
              *(float64x2_t *)(v439 + 88) = v460;
              *(float64_t *)(v439 + 104) = v461;
              *(float64x2_t *)(v439 + 112) = v462;
              *(double *)(v439 + 128) = v425.f64[0] * v448 + v455 * v443.f64[0] + v457 * v454;
              v463.f64[0] = *(float64_t *)(v439 + 224);
              v426 = vaddq_f64(v758, v463);
              v425.f64[1] = *((float64_t *)&v761 + 1);
              *(float64x2_t *)(v439 + 208) = vsubq_f64(*(float64x2_t *)(v439 + 208), (float64x2_t)v761);
              *(float64_t *)(v439 + 224) = v426.f64[0];
              if (v429)
              {
                v464 = *(unsigned int *)(v12 + v431 + 40);
                if ((_DWORD)v464 != -1)
                {
                  v465.f64[0] = v743[(v464 + 6)];
                  v465.f64[1] = v743[(v464 + 7)];
                  v466.f64[0] = v743[(v464 + 2)];
                  v466.f64[1] = v743[(v464 + 3)];
                  v467.f64[0] = v743[(v464 + 4)];
                  v467.f64[1] = v743[(v464 + 5)];
                  v468 = (int8x16_t)vnegq_f64(*(float64x2_t *)&v743[v464]);
                  v469 = (int8x16_t)vnegq_f64(v467);
                  v470 = (int8x16_t)vnegq_f64(v466);
                  v462.f64[0] = -v743[(v464 + 8)];
                  v471 = v12 + v428;
                  v393 = *(float64x2_t *)(v12 + v428 + 184);
                  v460.f64[0] = *(float64_t *)(v12 + v428 + 200);
                  v472 = *(float64x2_t *)(v12 + v428 + 152);
                  v473 = (float64x2_t)vextq_s8(v470, v469, 8uLL);
                  v425 = (float64x2_t)vextq_s8(v469, v468, 8uLL);
                  v426 = vaddq_f64(*(float64x2_t *)(v12 + v428 + 168), (float64x2_t)vextq_s8(v468, v470, 8uLL));
                  _Q3 = vaddq_f64(*(float64x2_t *)(v12 + v428 + 136), v473);
                  *(float64x2_t *)(v471 + 184) = vsubq_f64(v393, v465);
                  *(_QWORD *)(v471 + 200) = *(_OWORD *)&vaddq_f64(v460, v462);
                  *(float64x2_t *)(v471 + 136) = _Q3;
                  *(float64x2_t *)(v471 + 152) = vaddq_f64(v472, v425);
                  *(float64x2_t *)(v471 + 168) = v426;
                }
              }
              v428 += 168;
              v431 += 4;
            }
            while (v430 != v428);
          }
          v474 = *(unsigned int *)(v12 + 2072);
          if ((_DWORD)v474)
          {
            v475 = (double *)(v12 + 2056);
            v476 = (unsigned int *)(v12 + 31248);
            v477 = 0.0;
            do
            {
              v479 = *v476++;
              v478 = v479;
              if (v479 == -1)
                break;
              v480 = v743[v478];
              *v475 = *v475 - v480;
              ++v475;
              v481 = fabs(v480);
              if (v477 < v481)
                v477 = v481;
              --v474;
            }
            while (v474);
          }
          else
          {
            v477 = 0.0;
          }
          *(double *)(v12 + 31288) = v477;
          v14 = *((_QWORD *)&v756 + 1);
          if (*(_DWORD *)(v12 + 18664) && *(_DWORD *)(v12 + 31068))
          {
            v482 = *(_BYTE *)(v12 + 31072) != 0;
            if (*v735)
              _ZF = 0;
            else
              _ZF = *(_BYTE *)(v12 + 31072) == 0;
            if (_ZF)
              goto LABEL_377;
          }
          else
          {
            v482 = 0;
            if (!*v735)
              goto LABEL_377;
          }
          *(_QWORD *)&v751 = *v739;
          if ((_DWORD)v751)
          {
            *(_QWORD *)&v757 = v12 + 31228;
            v749 = (_QWORD **)(v12 + 18408);
            v750 = (_QWORD *)(v12 + 2080);
            if (*v735)
            {
              v484 = 0;
              DWORD2(v752) = 0;
              LODWORD(v755) = *(unsigned __int8 *)(v12 + 31065);
              v485 = v12;
              do
              {
                *((_QWORD *)&v751 + 1) = LODWORD(v750[510 * v484 + 509]);
                *(_QWORD *)&v752 = v484;
                if (DWORD2(v751))
                {
                  v486 = 0;
                  v754 = (uint64_t)&v749[8 * v484];
                  v753 = v754 + 32;
                  v487 = DWORD2(v752);
                  do
                  {
                    v488 = *(unsigned int *)(v12 + 31196 + 4 * v487);
                    if ((_DWORD)v488 != -1)
                    {
                      v489 = *(unsigned int *)(v12 + 31212 + 4 * v487);
                      v490 = v485 + v486;
                      v491 = (float64x2_t *)(v485 + v486 + 2088);
                      v492 = v743[v488];
                      v495.f64[0] = -v492;
                      v493 = v743[v488 + 1];
                      v494 = v743[(v488 + 2)];
                      v495.f64[1] = -v493;
                      v496 = sqrt(v492 * v492 + v493 * v493 + v494 * v494);
                      v425.f64[0] = 1.0 / v496;
                      if (v496 == 0.0)
                        v425.f64[0] = 1.0;
                      v759 = vmulq_n_f64(v495, v425.f64[0]);
                      v393.f64[0] = -v494;
                      v762 = vmulq_f64(v393, v425).f64[0];
                      v497 = __sincos_stret(v496);
                      v498 = v759;
                      _Q3.f64[0] = v497.__cosval + (1.0 - v497.__cosval) * vmuld_n_f64(v498.f64[0], v498.f64[0]);
                      v499 = (1.0 - v497.__cosval) * vmuld_lane_f64(v498.f64[0], v498, 1);
                      v500 = v499 - v497.__sinval * v762;
                      v501 = (1.0 - v497.__cosval) * vmuld_n_f64(v759.f64[0], v762);
                      v502 = vmuld_lane_f64(v497.__sinval, v759, 1);
                      v503 = v502 + v501;
                      v504 = v497.__sinval * v762 + v499;
                      v505 = v497.__cosval + (1.0 - v497.__cosval) * vmuld_lane_f64(v759.f64[1], v759, 1);
                      v506 = (1.0 - v497.__cosval) * vmuld_lane_f64(v762, v759, 1);
                      v498.f64[0] = v506 - v497.__sinval * v759.f64[0];
                      v507 = v501 - v502;
                      v508 = v497.__sinval * v759.f64[0] + v506;
                      v426.f64[0] = v497.__cosval + (1.0 - v497.__cosval) * vmuld_n_f64(v762, v762);
                      v425.f64[0] = *(float64_t *)(v490 + 2104);
                      v393 = *v491;
                      v509 = *(double *)(v490 + 2128);
                      v510 = *(float64x2_t *)(v490 + 2112);
                      v511 = *(double *)(v490 + 2152);
                      v512 = *(float64x2_t *)(v490 + 2136);
                      v513 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*v491, _Q3.f64[0]), v510, v504), v512, v507);
                      _Q3.f64[0] = v425.f64[0] * _Q3.f64[0] + v509 * v504 + v511 * v507;
                      v514 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*v491, v500), v510, v505), v512, v508);
                      v515 = v425.f64[0] * v500 + v509 * v505 + v511 * v508;
                      v516 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*v491, v503), v510, v498.f64[0]), v512, v426.f64[0]);
                      *v491 = v513;
                      v424 = v12 + 359016;
                      *(float64_t *)(v490 + 2104) = _Q3.f64[0];
                      *(float64x2_t *)(v490 + 2112) = v514;
                      *(float64_t *)(v490 + 2128) = v515;
                      *(float64x2_t *)(v490 + 2136) = v516;
                      *(double *)(v490 + 2152) = v425.f64[0] * v503 + v509 * v498.f64[0] + v511 * v426.f64[0];
                      if ((_DWORD)v755)
                      {
                        v426.f64[0] = v743[v489];
                        v426.f64[1] = v743[(v489 + 1)];
                        _Q3.f64[0] = *(float64_t *)(v490 + 2176);
                        v425.f64[0] = -v743[(v489 + 2)];
                        v425 = vaddq_f64(_Q3, v425);
                        *(float64x2_t *)(v490 + 2160) = vsubq_f64(*(float64x2_t *)(v490 + 2160), v426);
                        *(float64_t *)(v490 + 2176) = v425.f64[0];
                      }
                    }
                    if (v482)
                    {
                      v517 = *(unsigned int *)(*(_QWORD *)&v757 + 4 * v487);
                      if ((_DWORD)v517 != -1)
                      {
                        v518 = *(float64x2_t *)&v743[v517];
                        v519.f64[0] = v743[(v517 + 2)];
                        v519.f64[1] = v743[(v517 + 3)];
                        v520 = (float64x2_t *)v754;
                        if (v486)
                          v520 = (float64x2_t *)(v754 + 32);
                        v425 = *v520;
                        _Q3 = v520[1];
                        v426 = vsubq_f64(_Q3, v519);
                        *v520 = vsubq_f64(*v520, v518);
                        v520[1] = v426;
                      }
                    }
                    v486 += 1016;
                    ++v487;
                  }
                  while (1016 * *((_QWORD *)&v751 + 1) != v486);
                }
                DWORD2(v752) += DWORD2(v751);
                v484 = v752 + 1;
                v485 += 4080;
              }
              while ((_QWORD)v752 + 1 != (_QWORD)v751);
            }
            else
            {
              v14 = *((_QWORD *)&v756 + 1);
              if (!v482)
                goto LABEL_377;
              v521 = 0;
              v522 = 0;
              do
              {
                v523 = LODWORD(v750[510 * v521 + 509]);
                if ((_DWORD)v523)
                {
                  v524 = (float64x2_t *)&v749[8 * v521];
                  v525 = *(unsigned int *)(*(_QWORD *)&v757 + 4 * v522);
                  if ((_DWORD)v525 != -1)
                  {
                    v526.f64[0] = v743[(v525 + 2)];
                    v526.f64[1] = v743[(v525 + 3)];
                    _Q3 = v524[1];
                    v426 = vsubq_f64(_Q3, v526);
                    *v524 = vsubq_f64(*v524, *(float64x2_t *)&v743[v525]);
                    v524[1] = v426;
                  }
                  if ((_DWORD)v523 != 1)
                  {
                    v527 = v524 + 2;
                    v528 = v523 - 1;
                    v529 = v522 + 1;
                    do
                    {
                      v530 = *(unsigned int *)(*(_QWORD *)&v757 + 4 * v529);
                      if ((_DWORD)v530 != -1)
                      {
                        v531.f64[0] = v743[(v530 + 2)];
                        v531.f64[1] = v743[(v530 + 3)];
                        _Q3 = v527[1];
                        v426 = vsubq_f64(_Q3, v531);
                        *v527 = vsubq_f64(*v527, *(float64x2_t *)&v743[v530]);
                        v527[1] = v426;
                      }
                      ++v529;
                      --v528;
                    }
                    while (v528);
                  }
                }
                v522 += v523;
                ++v521;
              }
              while (v521 != (_QWORD)v751);
            }
          }
          v14 = *((_QWORD *)&v756 + 1);
          if (v482)
          {
            --*(_DWORD *)(v424 + 4800);
            if (*(_DWORD *)(*((_QWORD *)&v756 + 1) + 8) == -1
              && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 188, (uint64_t)"write_channel != kInvalidChannel && \"DMA write request not permitted.\"", 70, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| **((_DWORD **)&v756 + 1) < 0x20BCC4u&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 191, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              goto LABEL_456;
            }
            *(_DWORD *)(*(_QWORD *)(*((_QWORD *)&v756 + 1) + 16) + 2145472) = 1034;
            ++*(_DWORD *)(v424 + 4800);
            if (*(_DWORD *)(v12 + 31264))
            {
              v781 = 0;
              if (*(_DWORD *)(*((_QWORD *)&v756 + 1) + 4) == -1
                && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 162, (uint64_t)"read_channel != kInvalidChannel && \"DMA write request not permitted.\"", 69, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| **((_DWORD **)&v756 + 1) <= 0x8D48Bu&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 165, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
              {
                abort();
              }
              v532 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v756 + 1) + 16) + 578688);
              v781 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)&v756 + 1) + 16) + 578696);
              v780 = v532;
              v533 = vaddq_f64(*(float64x2_t *)(v12 + 43824), (float64x2_t)0);
              *(float64x2_t *)(v12 + 43808) = vaddq_f64(*(float64x2_t *)(v12 + 43808), (float64x2_t)0);
              *(float64x2_t *)(v12 + 43824) = v533;
              v770 = 0;
              v776 = 0;
              v779 = 0;
              sub_20FA191D0((uint64_t)&v770, __src);
              v733 = v781;
              if (v781)
              {
                v534 = 0;
                v732 = v782;
                v757 = COERCE_DOUBLE(&__dst[16]);
                *(_QWORD *)&v752 = &__dst[2048];
                *((_QWORD *)&v752 + 1) = &__dst[2960];
                *(_QWORD *)&v751 = &v771;
                *((_QWORD *)&v751 + 1) = &__dst[1744];
                v749 = &v787;
                v750 = v778;
                v748 = v12 + 21320;
                v745 = xmmword_210312E20;
                v744 = xmmword_210312E10;
                v746 = vdupq_n_s64(0x7FF8000000000000uLL);
                *(_QWORD *)&v755 = &__dst[2352];
                while (1)
                {
                  v741 = *((unsigned int *)&v780 + v534);
                  if ((_DWORD)v741)
                    break;
LABEL_242:
                  if (++v534 == v733)
                    goto LABEL_371;
                }
                v535 = 0;
                v740 = &v782[339548 * v534 + 4];
                while (1)
                {
                  v760 = v535;
                  if (*(_DWORD *)(v14 + 4) == -1)
                  {
                    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 162, (uint64_t)"read_channel != kInvalidChannel && \"DMA write request not permitted.\"", 69, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                    v536 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                    if ((v536 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                    {
                      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                      __cxa_guard_release(&qword_254A6DE78);
                    }
                    if (!byte_254A6DE68 || byte_254A6DE70)
                    {
                      v537 = qword_254A6DE40;
                      for (i = qword_254A6DE48; v537 != i; v537 += 16)
                        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v537)(*(_QWORD *)(v537 + 8), "read_channel != kInvalidChannel && \"DMA write request not permitted.\"", 69, "", 0);
                    }
                    v539 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                    if ((v539 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                    {
                      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                      __cxa_guard_release(&qword_254A6DE78);
                    }
                    if (!byte_254A6DE68)
LABEL_446:
                      abort();
                    qword_254A6DE58(unk_254A6DE60, "read_channel != kInvalidChannel && \"DMA write request not permitted.\"", 69, "", 0);
                  }
                  v540 = &v740[169772 * v760] - (_BYTE *)&v780;
                  if ((v540 & 3) != 0)
                  {
                    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 164, (uint64_t)"offset % kDefaultGranularity == 0 && length % kDefaultGranularity == 0 && \"Misaligned DMA request.\"", 99, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                    v541 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                    if ((v541 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                    {
                      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                      __cxa_guard_release(&qword_254A6DE78);
                    }
                    if (!byte_254A6DE68 || byte_254A6DE70)
                    {
                      v542 = qword_254A6DE40;
                      for (j = qword_254A6DE48; v542 != j; v542 += 16)
                        (*(void (**)(_QWORD, const char *, ...))v542)(*(_QWORD *)(v542 + 8), "offset % kDefaultGranularity == 0 && length % kDefaultGranularity == 0 && \"Misaligned DMA request.\"", 99, "", 0);
                    }
                    v544 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                    if ((v544 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                    {
                      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                      __cxa_guard_release(&qword_254A6DE78);
                    }
                    if (!byte_254A6DE68)
                      goto LABEL_446;
                    qword_254A6DE58(unk_254A6DE60, "offset % kDefaultGranularity == 0 && length % kDefaultGranularity == 0 && \"Misaligned DMA request.\"", 99, "", 0);
                  }
                  LODWORD(v754) = v540 + 582852;
                  if ((v540 + 582852) > *(_DWORD *)v14)
                  {
                    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 165, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                    v545 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                    if ((v545 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                    {
                      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                      __cxa_guard_release(&qword_254A6DE78);
                    }
                    if (!byte_254A6DE68 || byte_254A6DE70)
                    {
                      v546 = qword_254A6DE40;
                      for (k = qword_254A6DE48; v546 != k; v546 += 16)
                        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v546)(*(_QWORD *)(v546 + 8), "offset + length <= size && \"Out of bounds DMA request.\"", 55, "", 0);
                    }
                    v548 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                    if ((v548 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                    {
                      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                      __cxa_guard_release(&qword_254A6DE78);
                    }
                    if (!byte_254A6DE68)
                      goto LABEL_446;
                    qword_254A6DE58(unk_254A6DE60, "offset + length <= size && \"Out of bounds DMA request.\"", 55, "", 0);
                  }
                  memcpy(__dst, (const void *)(*(_QWORD *)(v14 + 16) + (v540 + 578688)), sizeof(__dst));
                  v549 = vaddq_f64(*(float64x2_t *)(v12 + 43824), (float64x2_t)0);
                  *(float64x2_t *)(v12 + 43808) = vaddq_f64(*(float64x2_t *)(v12 + 43808), (float64x2_t)0);
                  *(float64x2_t *)(v12 + 43824) = v549;
                  v763 = *(unsigned int *)__dst;
                  if (*(_DWORD *)__dst)
                    break;
LABEL_245:
                  v535 = v760 + 1;
                  v14 = *((_QWORD *)&v756 + 1);
                  if (v760 + 1 == v741)
                    goto LABEL_242;
                }
                v550 = 0;
                LODWORD(v753) = v540 + 693256;
                while (1)
                {
                  while (1)
                  {
                    v551 = *(unsigned __int16 *)&__dst[2 * v550 + 2352];
                    if (((*(_DWORD *)&__dst[((v551 >> 4) & 0xFFC) + 16] >> (v551 >> 1)) & 1) != 0)
                      break;
                    if (++v550 == v763)
                      goto LABEL_245;
                  }
                  v552 = v534;
                  v553 = *(unsigned int *)&__dst[4 * v550 + 2960];
                  v554 = __dst[v550 + 2048];
                  v555 = __dst[v550++ + 1744];
                  v556 = (*(unsigned __int16 *)&__dst[2 * v550 + 2352] - v551) >> 1;
                  v557 = v770;
                  sub_20FCB082C(*((uint64_t *)&v756 + 1), v754 + 8 * v551, 8 * v556, v768);
                  sub_20FCB082C(*((uint64_t *)&v756 + 1), v753 + 4 * v551, 4 * v556, v767);
                  v534 = v552;
                  v559 = v760;
                  v560 = v557 + 4080 * v552 + 1016 * v760 + 2120;
                  v561.i64[1] = 0;
                  v562 = vaddq_f64(*(float64x2_t *)(v12 + 43824), (float64x2_t)0);
                  *(float64x2_t *)(v12 + 43808) = vaddq_f64(*(float64x2_t *)(v12 + 43808), (float64x2_t)0);
                  *(float64x2_t *)(v12 + 43824) = v562;
                  v563 = *((_DWORD *)&v771 + v552);
                  v564 = v777;
                  v565 = v768[v555 - v554];
                  v566 = *(_DWORD *)(v560 + 472);
                  if (v566 == -1)
                  {
                    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                    v567 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                    if ((v567 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                    {
                      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                      __cxa_guard_release(&qword_254A6DE78);
                    }
                    if (!byte_254A6DE68 || byte_254A6DE70)
                    {
                      v569 = qword_254A6DE40;
                      for (m = qword_254A6DE48; v569 != m; v569 += 16)
                        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v569)(*(_QWORD *)(v569 + 8), "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, "", 0);
                    }
                    v570 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                    if ((v570 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                    {
                      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                      __cxa_guard_release(&qword_254A6DE78);
                    }
                    if (!byte_254A6DE68)
                      goto LABEL_445;
                    v534 = v552;
                    qword_254A6DE58(unk_254A6DE60, "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, "", 0);
                    v566 = *(_DWORD *)(v560 + 472);
                    v559 = v760;
                  }
                  v571 = (double *)&v778[9 * (v563 + v559 + v564 * v555)];
                  v572 = vcvtq_f64_f32(v565);
                  if (v566 <= 1)
                  {
                    if (!v566)
                      goto LABEL_444;
                    v573 = v571[4];
                    v574 = v571[5];
                    v783 = 1.0 / *v571 * v572.f64[0]
                         - vmuld_lane_f64(v571[1] / (*v571 * v573), v572, 1)
                         - (v573 * v571[2] - v571[1] * v574) / (*v571 * v573);
                    v784 = vmuld_lane_f64(1.0 / v573, v572, 1) - v574 / v573;
                    v785 = &v765;
                    v786 = &v783;
                    v788 = 0;
                    v789 = 0;
                    v787 = 0;
                    goto LABEL_289;
                  }
                  v558.i64[0] = (uint64_t)v571[4];
                  v576 = v571[5];
                  v577 = 1.0 / *v571 * v572.f64[0]
                       - vmuld_lane_f64(v571[1] / (*v571 * *(double *)v558.i64), v572, 1)
                       - (*(double *)v558.i64 * v571[2] - v571[1] * v576) / (*v571 * *(double *)v558.i64);
                  *(double *)v561.i64 = v576 / *(double *)v558.i64;
                  v572.f64[0] = vmuld_lane_f64(1.0 / *(double *)v558.i64, v572, 1) - v576 / *(double *)v558.i64;
                  v783 = v577;
                  v784 = v572.f64[0];
                  v785 = &v765;
                  v786 = &v783;
                  v788 = 0;
                  v789 = 0;
                  v787 = 0;
                  if (v566 != -1)
                    break;
                  sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                  v629 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v629 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  if (!byte_254A6DE68 || byte_254A6DE70)
                  {
                    v630 = qword_254A6DE40;
                    for (n = qword_254A6DE48; v630 != n; v630 += 16)
                      (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v630)(*(_QWORD *)(v630 + 8), "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, "", 0);
                  }
                  v632 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v632 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  if (!byte_254A6DE68)
                    goto LABEL_445;
                  qword_254A6DE58(unk_254A6DE60, "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, "", 0);
                  v633 = *(_DWORD *)(v560 + 472);
                  if (v633 > 1)
                  {
                    v579 = v785;
                    v578 = v786;
                    v639 = v787;
                    v640 = v788;
                    v641 = v789;
                    if (v787)
                    {
                      *v787 = 0;
                      v639[1] = 0;
                      v639[2] = 0;
                    }
                    if (v641)
                    {
                      *(_QWORD *)(v641 + 64) = 0;
                      v572 = 0uLL;
                      *(_OWORD *)(v641 + 32) = 0u;
                      *(_OWORD *)(v641 + 48) = 0u;
                      *(_OWORD *)v641 = 0u;
                      *(_OWORD *)(v641 + 16) = 0u;
                    }
                    v580 = (float64x2_t *)(v560 + 168);
                    v581 = (_BYTE *)(v560 + 468);
                    if (v640)
                    {
                      if (!*(_BYTE *)(v560 + 468))
                      {
                        sub_20EB27C0C(v560 + 204, (double *)(v560 + 168), 0x32uLL, (int8x16_t)v572, v577, v561, v558);
                        *v581 = 1;
                      }
                      _Q1 = *(float64x2_t *)v578;
                      _D2 = *((_QWORD *)v578 + 1);
                      __asm { FMLA            D0, D2, V1.D[1] }
                      v645 = sqrt(_D0);
                      v647 = *(float *)(v560 + 204);
                      v646 = v560 + 204;
                      v648 = v645 * v647;
                      v649 = (unint64_t)v648;
                      if ((unint64_t)v648 >= 0x1F)
                        v649 = 31;
                      v650 = v645 * *(float *)(v646 + 4 * v649 + 8) + *(float *)(v646 + 4 * v649 + 136);
                      v651 = *(int64x2_t *)(v646 - 20);
                      v652 = *(int64x2_t *)(v646 - 36);
                      _Q3 = (float64x2_t)vzip1q_s64(v652, v651);
                      v653 = (float64x2_t)vzip2q_s64(v652, v651);
                      v654 = vmulq_f64(v653, (float64x2_t)xmmword_210312E20);
                      v655 = vmulq_f64(_Q3, (float64x2_t)xmmword_210312E10);
                      if (v648 <= 32.0)
                        goto LABEL_337;
                      v656 = v650 * v650;
                      v657 = vmulq_n_f64(vaddq_f64(v655, vmulq_n_f64(v654, v650 * v650)), v650 * v650);
                      v658 = v656 * v656;
                      v659 = v657.f64[0] + vmuld_lane_f64(v656 * v656, v657, 1) + 1.0;
                      if (v659 != 0.0)
                      {
                        v660 = vmulq_n_f64(vaddq_f64(_Q3, vmulq_n_f64(v653, v656)), v656);
                        v650 = fmax(v650 + (v645 - (v650 + v650 * (v660.f64[0] + vmuld_lane_f64(v658, v660, 1)))) / v659, 0.0);
                        v661 = v650 * v650;
                        v662 = vmulq_n_f64(vaddq_f64(v655, vmulq_n_f64(v654, v650 * v650)), v650 * v650);
                        v663 = v661 * v661;
                        v664 = v662.f64[0] + vmuld_lane_f64(v661 * v661, v662, 1) + 1.0;
                        if (v664 != 0.0)
                        {
                          v665 = vmulq_n_f64(vaddq_f64(_Q3, vmulq_n_f64(v653, v661)), v661);
                          v650 = fmax(v650 + (v645 - (v650 + v650 * (v665.f64[0] + vmuld_lane_f64(v663, v665, 1)))) / v664, 0.0);
                          v666 = v650 * v650;
                          v667 = vmulq_n_f64(vaddq_f64(v655, vmulq_n_f64(v654, v650 * v650)), v650 * v650);
                          v668 = v666 * v666;
                          v669 = v667.f64[0] + vmuld_lane_f64(v666 * v666, v667, 1) + 1.0;
                          if (v669 != 0.0)
                          {
                            v670 = vmulq_n_f64(vaddq_f64(_Q3, vmulq_n_f64(v653, v666)), v666);
                            v650 = fmax(v650+ (v645 - (v650 + v650 * (v670.f64[0] + vmuld_lane_f64(v668, v670, 1)))) / v669, 0.0);
                            v671 = v650 * v650;
                            v672 = vmulq_n_f64(vaddq_f64(v655, vmulq_n_f64(v654, v650 * v650)), v650 * v650);
                            v673 = v671 * v671;
                            v674 = v672.f64[0] + vmuld_lane_f64(v671 * v671, v672, 1) + 1.0;
                            if (v674 != 0.0)
                            {
                              v675 = vmulq_n_f64(vaddq_f64(_Q3, vmulq_n_f64(v653, v671)), v671);
                              v650 = fmax(v650+ (v645 - (v650 + v650 * (v675.f64[0] + vmuld_lane_f64(v673, v675, 1)))) / v674, 0.0);
LABEL_337:
                              v676 = v650 * v650;
                              v677 = vmulq_n_f64(vaddq_f64(v655, vmulq_n_f64(v654, v650 * v650)), v650 * v650);
                              v678 = v677.f64[0] + vmuld_lane_f64(v676 * v676, v677, 1) + 1.0;
                              if (v678 != 0.0)
                              {
                                _Q3 = vmulq_n_f64(vaddq_f64(_Q3, vmulq_n_f64(v653, v676)), v676);
                                v650 = v650
                                     + (v645 - (v650 + v650 * (_Q3.f64[0] + vmuld_lane_f64(v676 * v676, _Q3, 1))))
                                     / v678;
                                _Q3.f64[0] = 0.0;
                                if (v650 <= 0.0)
                                {
LABEL_340:
                                  v679 = _Q3.f64[0] * 0.636619772 + 6.75539944e15 + -6.75539944e15;
                                  v680 = _Q3.f64[0]
                                       + v679 * -1.57079633
                                       + v679 * -5.39030286e-15
                                       + v679 * -8.84372057e-29;
                                  v681 = v680 * v680 * (v680 * v680);
                                  __asm { FMOV            V4.2D, #1.0 }
                                  v682 = vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210312E30, v680 * v680), _Q4), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210312E70, v680 * v680), (float64x2_t)xmmword_210312E80), v681));
                                  v683 = vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210312E40, v680 * v680), (float64x2_t)xmmword_210312E50), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210312E60, v680 * v680), (float64x2_t)xmmword_210312E90), v681)), v681 * v681);
                                  _Q4.f64[0] = v680;
                                  v685 = vaddq_f64(v682, v683);
                                  v686 = (int)v679 & 3;
                                  if (v645 >= 0.0001)
                                  {
                                    LODWORD(v682.f64[0]) = 0;
                                    v683 = xmmword_2103BC090[v686];
                                    v692 = vmulq_f64(_Q4, v683);
                                    v689 = (int8x16_t)vmulq_f64(v685, v692);
                                    v687 = (int)v679 & 1;
                                    LODWORD(v692.f64[0]) = v687;
                                    v693 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v692, (int32x4_t)v682), 0);
                                    v688 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v689, 1);
                                    v690 = *(double *)vbslq_s8(v693, v689, (int8x16_t)v688).i64 / v645;
                                  }
                                  else
                                  {
                                    v687 = (int)v679 & 1;
                                    v688 = xmmword_2103BC090[v686];
                                    v689 = (int8x16_t)vmulq_f64(v685, vmulq_f64(_Q4, v688));
                                    v690 = 1.0;
                                  }
                                  LODWORD(v688.f64[0]) = 0;
                                  LODWORD(v683.f64[0]) = v687;
                                  v694 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v683, (int32x4_t)v688), 0), v689, (int8x16_t)vdupq_lane_s64(v689.i64[0], 0));
                                  *(_QWORD *)&v579[1].f64[0] = v694.i64[1];
                                  *v579 = vmulq_n_f64(_Q1, v690);
                                  v695 = (int64x2_t)vmulq_f64(v580[1], (float64x2_t)xmmword_210312EA0);
                                  v696 = (int64x2_t)vmulq_f64(*v580, (float64x2_t)xmmword_210312EB0);
                                  v697 = _Q3.f64[0] * _Q3.f64[0];
                                  v698 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(v696, v695), vmulq_n_f64((float64x2_t)vzip2q_s64(v696, v695), v697)), v697);
                                  v699 = v698.f64[0] + vmuld_lane_f64(v697 * v697, v698, 1) + 1.0;
                                  if (v645 >= 0.0001)
                                    v700 = (*(double *)&v694.i64[1] / v699 - v690) / (v645 * v645);
                                  else
                                    v700 = -0.333333333;
                                  v701 = vmulq_n_f64(*(float64x2_t *)v578, v700);
                                  v702.f64[0] = 0.0;
                                  v702.f64[1] = v690;
                                  _Q3 = vmlaq_n_f64((float64x2_t)*(unint64_t *)&v690, v701, *v578);
                                  v703 = vmlaq_laneq_f64(v702, v701, *(float64x2_t *)v578, 1);
                                  *v640 = _Q3;
                                  v640[1] = v703;
                                  v575 = vdivq_f64(*v579, (float64x2_t)vdupq_lane_s64(COERCE__INT64(-v699), 0));
                                  v640[2] = v575;
                                  goto LABEL_320;
                                }
                              }
                            }
                          }
                        }
                      }
                      _Q3.f64[0] = v650;
                      if (v650 <= 3.14159265)
                        goto LABEL_340;
                      goto LABEL_342;
                    }
                    if (!*(_BYTE *)(v560 + 468))
                      goto LABEL_294;
LABEL_295:
                    _Q0 = *(float64x2_t *)v578;
                    _D2 = *((_QWORD *)v578 + 1);
                    __asm { FMLA            D1, D2, V0.D[1] }
                    v585 = sqrt(_D1);
                    v587 = *(float *)(v560 + 204);
                    v586 = v560 + 204;
                    v588 = v585 * v587;
                    v589 = (unint64_t)v588;
                    if ((unint64_t)v588 >= 0x1F)
                      v589 = 31;
                    v590 = v585 * *(float *)(v586 + 4 * v589 + 8) + *(float *)(v586 + 4 * v589 + 136);
                    v591 = *(int64x2_t *)(v586 - 20);
                    v592 = *(int64x2_t *)(v586 - 36);
                    _Q3 = (float64x2_t)vzip1q_s64(v592, v591);
                    v593 = (float64x2_t)vzip2q_s64(v592, v591);
                    v594 = vmulq_f64(v593, (float64x2_t)xmmword_210312E20);
                    v595 = vmulq_f64(_Q3, (float64x2_t)xmmword_210312E10);
                    if (v588 <= 32.0)
                      goto LABEL_303;
                    v596 = v590 * v590;
                    v597 = vmulq_n_f64(vaddq_f64(v595, vmulq_n_f64(v594, v590 * v590)), v590 * v590);
                    v598 = v596 * v596;
                    v599 = v597.f64[0] + vmuld_lane_f64(v596 * v596, v597, 1) + 1.0;
                    if (v599 != 0.0)
                    {
                      v600 = vmulq_n_f64(vaddq_f64(_Q3, vmulq_n_f64(v593, v596)), v596);
                      v590 = fmax(v590 + (v585 - (v590 + v590 * (v600.f64[0] + vmuld_lane_f64(v598, v600, 1)))) / v599, 0.0);
                      v601 = v590 * v590;
                      v602 = vmulq_n_f64(vaddq_f64(v595, vmulq_n_f64(v594, v590 * v590)), v590 * v590);
                      v603 = v601 * v601;
                      v604 = v602.f64[0] + vmuld_lane_f64(v601 * v601, v602, 1) + 1.0;
                      if (v604 != 0.0)
                      {
                        v605 = vmulq_n_f64(vaddq_f64(_Q3, vmulq_n_f64(v593, v601)), v601);
                        v590 = fmax(v590 + (v585 - (v590 + v590 * (v605.f64[0] + vmuld_lane_f64(v603, v605, 1)))) / v604, 0.0);
                        v606 = v590 * v590;
                        v607 = vmulq_n_f64(vaddq_f64(v595, vmulq_n_f64(v594, v590 * v590)), v590 * v590);
                        v608 = v606 * v606;
                        v609 = v607.f64[0] + vmuld_lane_f64(v606 * v606, v607, 1) + 1.0;
                        if (v609 != 0.0)
                        {
                          v610 = vmulq_n_f64(vaddq_f64(_Q3, vmulq_n_f64(v593, v606)), v606);
                          v590 = fmax(v590 + (v585 - (v590 + v590 * (v610.f64[0] + vmuld_lane_f64(v608, v610, 1)))) / v609, 0.0);
                          v611 = v590 * v590;
                          v612 = vmulq_n_f64(vaddq_f64(v595, vmulq_n_f64(v594, v590 * v590)), v590 * v590);
                          v613 = v611 * v611;
                          v614 = v612.f64[0] + vmuld_lane_f64(v611 * v611, v612, 1) + 1.0;
                          if (v614 != 0.0)
                          {
                            v615 = vmulq_n_f64(vaddq_f64(_Q3, vmulq_n_f64(v593, v611)), v611);
                            v590 = fmax(v590+ (v585 - (v590 + v590 * (v615.f64[0] + vmuld_lane_f64(v613, v615, 1)))) / v614, 0.0);
LABEL_303:
                            v616 = v590 * v590;
                            v617 = vmulq_n_f64(vaddq_f64(v595, vmulq_n_f64(v594, v590 * v590)), v590 * v590);
                            v618 = v617.f64[0] + vmuld_lane_f64(v616 * v616, v617, 1) + 1.0;
                            if (v618 != 0.0)
                            {
                              v593 = vmulq_n_f64(v593, v616);
                              _Q3 = vmulq_n_f64(vaddq_f64(_Q3, v593), v616);
                              v590 = v590
                                   + (v585 - (v590 + v590 * (_Q3.f64[0] + vmuld_lane_f64(v616 * v616, _Q3, 1)))) / v618;
                              _Q3.f64[0] = 0.0;
                              if (v590 <= 0.0)
                              {
LABEL_306:
                                v593.f64[0] = _Q3.f64[0] * 0.636619772 + 6.75539944e15 + -6.75539944e15;
                                v619 = _Q3.f64[0]
                                     + v593.f64[0] * -1.57079633
                                     + v593.f64[0] * -5.39030286e-15
                                     + v593.f64[0] * -8.84372057e-29;
                                v620 = v619 * v619 * (v619 * v619);
                                __asm { FMOV            V2.2D, #1.0 }
                                v621 = vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210312E30, v619 * v619), _Q2), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210312E70, v619 * v619), (float64x2_t)xmmword_210312E80), v620));
                                _Q2.f64[0] = v619;
                                v623 = vaddq_f64(v621, vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210312E40, v619 * v619), (float64x2_t)xmmword_210312E50), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210312E60, v619 * v619), (float64x2_t)xmmword_210312E90), v620)), v620 * v620));
                                v624 = (int)v593.f64[0];
                                v625 = (int)v593.f64[0] & 3;
                                HIDWORD(v593.f64[0]) = 1058682594;
                                if (v585 >= 0.0001)
                                {
                                  LODWORD(v593.f64[0]) = 0;
                                  v627 = (int8x16_t)vmulq_f64(v623, vmulq_f64(_Q2, xmmword_2103BC090[v625]));
                                  v626 = v624 & 1;
                                  LODWORD(v623.f64[0]) = v626;
                                  v634 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v623, (int32x4_t)v593), 0);
                                  v593 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v627, 1);
                                  v623 = (float64x2_t)vbslq_s8(v634, v627, (int8x16_t)v593);
                                  v628 = v623.f64[0] / v585;
                                }
                                else
                                {
                                  v626 = v624 & 1;
                                  v627 = (int8x16_t)vmulq_f64(v623, vmulq_f64(_Q2, xmmword_2103BC090[v625]));
                                  v628 = 1.0;
                                }
                                LODWORD(v623.f64[0]) = 0;
                                LODWORD(v593.f64[0]) = v626;
                                _Q3 = (float64x2_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v593, (int32x4_t)v623), 0);
                                v575 = vmulq_n_f64(_Q0, v628);
                                *v579 = v575;
                                *(_QWORD *)&v579[1].f64[0] = vbslq_s8(*(int8x16_t *)&_Q3, v627, (int8x16_t)vdupq_lane_s64(*(uint64_t *)&v627, 0)).i64[1];
                                goto LABEL_320;
                              }
                            }
                          }
                        }
                      }
                    }
                    _Q3.f64[0] = v590;
                    if (v590 <= 3.14159265)
                      goto LABEL_306;
LABEL_342:
                    v691 = (int64x2_t *)(v748 + 32 * v553);
                    *v691 = v746;
                    v691[1].i64[0] = 0x7FF8000000000000;
                    if (v550 == v763)
                      goto LABEL_245;
                  }
                  else
                  {
                    if (!v633)
                    {
LABEL_444:
                      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_445:
                      abort();
                    }
LABEL_289:
                    if ((sub_20FA1DC08((uint64_t)&v785, v560) & 1) == 0)
                      goto LABEL_342;
LABEL_320:
                    v575.f64[0] = v766;
                    _Q1 = v765;
                    _Q2 = vmulq_f64(_Q1, _Q1);
                    _D3 = v765.f64[1];
                    __asm { FMLA            D2, D3, V1.D[1] }
                    _Q2.f64[0] = 1.0 / sqrt(_Q2.f64[0] + v575.f64[0] * v575.f64[0]);
                    v638 = v748 + 32 * v553;
                    *(float64x2_t *)v638 = vmulq_n_f64(v765, _Q2.f64[0]);
                    *(_QWORD *)(v638 + 16) = *(_OWORD *)&vmulq_f64(v575, _Q2);
                    if (v550 == v763)
                      goto LABEL_245;
                  }
                }
                v578 = &v783;
                v579 = &v765;
                if (*(_BYTE *)(v560 + 468))
                  goto LABEL_295;
                v580 = (float64x2_t *)(v560 + 168);
                v581 = (_BYTE *)(v560 + 468);
LABEL_294:
                sub_20EB27C0C(v560 + 204, v580->f64, 0x32uLL, (int8x16_t)v572, v577, v561, v558);
                *v581 = 1;
                goto LABEL_295;
              }
LABEL_371:
              v424 = v12 + 359016;
            }
            if (*(_DWORD *)(v14 + 8) == -1
              && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 188, (uint64_t)"write_channel != kInvalidChannel && \"DMA write request not permitted.\"", 70, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *(_DWORD *)v14 < 0x20BCC4u&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 191, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
LABEL_456:
              abort();
            }
            *(_DWORD *)(*(_QWORD *)(v14 + 16) + 2145472) = 1035;
            v426 = vaddq_f64(*(float64x2_t *)(v12 + 44272), (float64x2_t)0);
            *(float64x2_t *)(v12 + 44256) = vaddq_f64(*(float64x2_t *)(v12 + 44256), (float64x2_t)0);
            *(float64x2_t *)(v12 + 44272) = v426;
          }
LABEL_377:
          if (*(_BYTE *)(v12 + 31073))
          {
            v704 = *(unsigned int *)(v12 + 31244);
            if ((_DWORD)v704 != -1)
            {
              v705 = (float64x2_t *)(v12 + 1816);
              v764 = *(_OWORD *)&v743[v704];
              v706 = v743[(v704 + 2)];
              switch(*(_DWORD *)(v12 + 31256))
              {
                case 3:
                  break;
                case 4:
                  v705 = (float64x2_t *)(v12 + 1840);
                  break;
                case 5:
                  goto LABEL_383;
                case 6:
                  v705 = (float64x2_t *)(v12 + 1888);
                  break;
                default:
                  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/SensorModel.h", 600, (uint64_t)"false && \"Shall not reach to an undefined type.\"", 48, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                  {
                    abort();
                  }
LABEL_383:
                  v705 = (float64x2_t *)(v12 + 1864);
                  break;
              }
              v707 = vnegq_f64((float64x2_t)v764);
              v426.f64[0] = -v706;
              _Q3.f64[0] = v705[1].f64[0];
              *(_QWORD *)&v707.f64[1] = vextq_s8((int8x16_t)v707, (int8x16_t)v707, 8uLL).u64[0];
              *v705 = vaddq_f64(v707, *v705);
              *(_QWORD *)&v705[1].f64[0] = *(_OWORD *)&vaddq_f64(v426, _Q3);
            }
          }
          v708 = (_QWORD *)v736;
          if (*(_DWORD *)(v14 + 8) == -1
            && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 188, (uint64_t)"write_channel != kInvalidChannel && \"DMA write request not permitted.\"", 70, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *(_DWORD *)v14 < 0x20BCC4u&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 191, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          *(_DWORD *)(*(_QWORD *)(v14 + 16) + 2145472) = 1033;
          v709 = vaddq_f64(*(float64x2_t *)(v12 + 44240), (float64x2_t)0);
          *(float64x2_t *)(v12 + 44224) = vaddq_f64(*(float64x2_t *)(v12 + 44224), (float64x2_t)0);
          *(float64x2_t *)(v12 + 44240) = v709;
          --*(_DWORD *)(v424 + 4800);
          if (*(_DWORD *)(v14 + 8) == -1
            && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 188, (uint64_t)"write_channel != kInvalidChannel && \"DMA write request not permitted.\"", 70, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *(_DWORD *)v14 < 0x20BCC4u&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 191, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          *(_DWORD *)(*(_QWORD *)(v14 + 16) + 2145472) = 1030;
          ++*(_DWORD *)(v424 + 4800);
          if (!*(_BYTE *)(v12 + 31281))
          {
            *(_BYTE *)(v12 + 31281) = 1;
            if (*(_DWORD *)(v14 + 8) == -1
              && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 188, (uint64_t)"write_channel != kInvalidChannel && \"DMA write request not permitted.\"", 70, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *(_DWORD *)v14 >> 7 <= 0xC0Cu&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 191, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              goto LABEL_451;
            }
            memcpy((void *)(*(_QWORD *)(v14 + 16) + 363904), __src, 0x7900uLL);
          }
          v710 = *(unsigned int *)(v12 + 31052);
          if ((_DWORD)v710)
          {
            v711 = (double *)(v12 + 21344);
            v712 = (double *)v424;
            do
            {
              v713 = *v712++;
              *v711 = *v711 - v713;
              v711 += 4;
              --v710;
            }
            while (v710);
          }
          if ((*(_DWORD *)(v14 + 8) != -1
             || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 188, (uint64_t)"write_channel != kInvalidChannel && \"DMA write request not permitted.\"", 70, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))&& (*(_DWORD *)v14 >= 0x20BCC4u|| !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 191, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)))
          {
            *(_DWORD *)(*(_QWORD *)(v14 + 16) + 2145472) = 1031;
            v714 = vaddq_f64(*(float64x2_t *)(v12 + 44208), (float64x2_t)0);
            *(float64x2_t *)(v12 + 44192) = vaddq_f64(*(float64x2_t *)(v12 + 44192), (float64x2_t)0);
            *(float64x2_t *)(v12 + 44208) = v714;
            *v737 = 0;
            *(_QWORD *)(v736 + 80) = 0;
            *(_OWORD *)(v736 + 48) = 0u;
            *(_OWORD *)(v736 + 64) = 0u;
            *(_OWORD *)(v736 + 16) = 0u;
            *(_OWORD *)(v736 + 32) = 0u;
            *(_OWORD *)v736 = 0u;
            --*(_DWORD *)(v424 + 4800);
            if (*(_DWORD *)(v14 + 8) == -1
              && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 188, (uint64_t)"write_channel != kInvalidChannel && \"DMA write request not permitted.\"", 70, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *(_DWORD *)v14 < 0x20BCC4u&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 191, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              abort();
            }
            *(_DWORD *)(*(_QWORD *)(v14 + 16) + 2145472) = 1010;
            ++*(_DWORD *)(v424 + 4800);
            v715 = *(_QWORD *)(v12 + 31040);
            v716 = *(_DWORD *)(v12 + 31060) != 0;
            v717 = *(_DWORD *)(v12 + 31068) != 0;
            *(_QWORD *)__dst = 0;
            *(_DWORD *)&__dst[168] = 0;
            *(_DWORD *)&__dst[3064] = 0;
            __dst[3072] = 1;
            *(_QWORD *)&__dst[3080] = 0x40C3880000000000;
            *(_OWORD *)&__dst[3088] = xmmword_2103B8420;
            *(_QWORD *)&__dst[3104] = 0x3DDB7CDFD9D7BDBBLL;
            *(_QWORD *)&__dst[3112] = v715;
            __dst[3120] = 1;
            __dst[3121] = v716;
            __dst[3122] = v716;
            __dst[3123] = v717;
            __dst[3124] = *(_BYTE *)(v12 + 31072);
            v718 = *(unsigned __int8 *)(v12 + 31065);
            __dst[3125] = *v735;
            if (__dst[3125])
              v719 = v718 == 0;
            else
              v719 = 1;
            v720 = !v719;
            __dst[3126] = v720;
            sub_20FA191D0((uint64_t)__dst, __src);
            if (*(_DWORD *)(v14 + 8) == -1
              && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 188, (uint64_t)"write_channel != kInvalidChannel && \"DMA write request not permitted.\"", 70, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              goto LABEL_449;
            }
            if (*(_DWORD *)v14 < 0x20BCC4u
              && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 191, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              goto LABEL_449;
            }
            *(_DWORD *)(*(_QWORD *)(v14 + 16) + 2145472) = 1011;
            v770 = v12;
            v771 = v14;
            v772 = __dst;
            v773 = (_BYTE *)v736;
            v774 = v737;
            v775 = v12 + 64;
            sub_20FCB0BA0((uint64_t)&v770, v721, v722, v723, v724, v725, v726, v727, v731, (uint64_t)v732, v733, (uint64_t)__src, (uint64_t)v735, v736, (uint64_t)v737, (uint64_t)v739, (uint64_t)v740, v741, v742,
              (uint64_t)v743,
              v744,
              *((uint64_t *)&v744 + 1),
              v745,
              *((uint64_t *)&v745 + 1),
              v746.i64[0],
              v746.i64[1],
              v747,
              v748,
              (uint64_t)v749,
              (uint64_t)v750,
              v751,
              v752,
              v753,
              v754,
              v755,
              v756,
              SLODWORD(v757));
            if (*(_DWORD *)(v14 + 8) == -1
              && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 188, (uint64_t)"write_channel != kInvalidChannel && \"DMA write request not permitted.\"", 70, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              goto LABEL_449;
            }
            if (*(_DWORD *)v14 < 0x20BCC4u
              && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 191, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              goto LABEL_449;
            }
            *(_DWORD *)(*(_QWORD *)(v14 + 16) + 2145472) = 1014;
            if (*(_DWORD *)(v12 + 31272))
            {
              v770 = v14;
              v771 = v12;
              v772 = (_BYTE *)(v12 + 64);
              v773 = __dst;
              v774 = v708;
              v775 = (uint64_t)v738;
              sub_20FCB3AF8((uint64_t)&v770);
              if (*(_DWORD *)(v14 + 8) == -1)
              {
LABEL_428:
                if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 188, (uint64_t)"write_channel != kInvalidChannel && \"DMA write request not permitted.\"", 70, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                {
                  goto LABEL_449;
                }
              }
            }
            else
            {
              *v708 = 0;
              if (*(_DWORD *)(v14 + 8) == -1)
                goto LABEL_428;
            }
            if (*(_DWORD *)v14 >= 0x20BCC4u
              || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 191, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              *(_DWORD *)(*(_QWORD *)(v14 + 16) + 2145472) = 1015;
              v708[10] = 0;
              if (*(_DWORD *)(v12 + 31276))
              {
                v770 = v12;
                v771 = v14;
                v772 = v738;
                v773 = v708;
                sub_20FCB40D8((uint64_t)&v770);
              }
              if ((*(_DWORD *)(v14 + 8) != -1
                 || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 188, (uint64_t)"write_channel != kInvalidChannel && \"DMA write request not permitted.\"", 70, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))&& (*(_DWORD *)v14 >= 0x20BCC4u|| !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 191, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)))
              {
                *(_DWORD *)(*(_QWORD *)(v14 + 16) + 2145472) = 1016;
                v728 = vaddq_f64(*(float64x2_t *)(v12 + 43920), (float64x2_t)0);
                *(float64x2_t *)(v12 + 43904) = vaddq_f64(*(float64x2_t *)(v12 + 43904), (float64x2_t)0);
                *(float64x2_t *)(v12 + 43920) = v728;
LABEL_438:
                if (*(_DWORD *)(v14 + 8) != -1
                  || (v14 = *((_QWORD *)&v756 + 1),
                      !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 188, (uint64_t)"write_channel != kInvalidChannel && \"DMA write request not permitted.\"", 70, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)))
                {
                  if (*(_DWORD *)v14 >= 0x20BCC4u
                    || (v14 = *((_QWORD *)&v756 + 1),
                        !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 191, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)))
                  {
                    *(_DWORD *)(*(_QWORD *)(v14 + 16) + 2145472) = 1037;
                    goto LABEL_443;
                  }
                }
LABEL_447:
                abort();
              }
            }
LABEL_449:
            abort();
          }
LABEL_451:
          abort();
        }
      }
LABEL_448:
      abort();
    }
    v423 = vaddq_f64(*(float64x2_t *)(v12 + 44048), (float64x2_t)0);
    *(float64x2_t *)(v12 + 44032) = vaddq_f64(*(float64x2_t *)(v12 + 44032), (float64x2_t)0);
    *(float64x2_t *)(v12 + 44048) = v423;
    if (!v737)
      goto LABEL_443;
    *v737 = 0x7FF8000000000000;
    v51 = vdupq_n_s64(0x7FF8000000000000uLL);
    v49 = (int64x2_t *)v736;
    goto LABEL_23;
  }
  v49 = (int64x2_t *)v736;
  if (v5)
  {
    *v5 = 0x7FF8000000000000;
    v50 = vdupq_n_s64(0x7FF8000000000000uLL);
    *v7 = v50;
    v7[1] = v50;
    v7[2] = v50;
    v7[3] = v50;
    v7[4] = v50;
    v7[5].i64[0] = 0x7FF8000000000000;
  }
  if (v737)
  {
    *v737 = 0x7FF8000000000000;
    v51 = vdupq_n_s64(0x7FF8000000000000uLL);
LABEL_23:
    *v49 = v51;
    v49[1] = v51;
    v49[2] = v51;
    v49[3] = v51;
    v49[4] = v51;
    v49[5].i64[0] = 0x7FF8000000000000;
  }
LABEL_443:
  v729 = vaddq_f64(*(float64x2_t *)(v12 + 44304), (float64x2_t)0);
  result = vaddq_f64(*(float64x2_t *)(v12 + 44288), (float64x2_t)0);
  *(float64x2_t *)(v12 + 44288) = result;
  *(float64x2_t *)(v12 + 44304) = v729;
  return result;
}

void sub_20FC92C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,float64x2_t *a39)
{
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;

  v39 = vaddq_f64(a39[2767], (float64x2_t)0);
  a39[2766] = vaddq_f64(a39[2766], (float64x2_t)0);
  a39[2767] = v39;
  v40 = vaddq_f64(a39[2765], (float64x2_t)0);
  a39[2764] = vaddq_f64(a39[2764], (float64x2_t)0);
  a39[2765] = v40;
  v41 = vaddq_f64(a39[2769], (float64x2_t)0);
  a39[2768] = vaddq_f64(a39[2768], (float64x2_t)0);
  a39[2769] = v41;
  _Unwind_Resume(a1);
}

uint64_t sub_20FC92D7C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, char a5)
{
  uint64_t v10;
  uint64_t v11;

  if ((a5 & 1) != 0)
    return 1;
  *(_DWORD *)(a1 + 31296) = 0;
  *(_DWORD *)(a1 + 363820) = 0;
  if (*(_DWORD *)(a2 + 8) == -1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 188, (uint64_t)"write_channel != kInvalidChannel && \"DMA write request not permitted.\"", 70, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *(_DWORD *)a2 < 0x20BCC4u&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 191, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| (*(_DWORD *)(*(_QWORD *)(a2 + 16) + 2145472) = 1001, sub_20FC92F34(a1, a2, a3, a4), v11 = v10,
        *(_DWORD *)(a2 + 8) == -1)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 188, (uint64_t)"write_channel != kInvalidChannel && \"DMA write request not permitted.\"", 70, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *(_DWORD *)a2 < 0x20BCC4u&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 191, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 16) + 2145472) = 1038;
  return v11;
}

float64x2_t sub_20FC92F34(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int *v8;
  uint64_t v9;
  char v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  float64x2_t v21;
  uint64_t v22;
  unsigned int v23;
  char *v24;
  uint64_t v25;
  unsigned int v26;
  char *v27;
  float64x2_t v28;
  double v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t result;
  int v39;
  double *v40;
  char *__dst;
  unsigned int v42;
  int v43;

  if (*(_DWORD *)(a2 + 8) == -1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 188, (uint64_t)"write_channel != kInvalidChannel && \"DMA write request not permitted.\"", 70, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *(_DWORD *)a2 < 0x20BCC4u&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 191, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 16) + 2145472) = 1025;
  ++*(_DWORD *)(a1 + 363816);
  kdebug_trace();
  v8 = (int *)(a1 + 31048);
  *(_DWORD *)(a1 + 43612) = 0;
  v9 = *(unsigned int *)(a1 + 31048);
  --*(_DWORD *)(a1 + 363816);
  sub_20FC935B8(a1);
  if ((v10 & 1) != 0)
  {
    v11 = *v8;
    if (*(_DWORD *)(a2 + 8) == -1
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 188, (uint64_t)"write_channel != kInvalidChannel && \"DMA write request not permitted.\"", 70, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *(_DWORD *)a2 < 0x20BCC4u&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 191, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v12 = a1 + 44352;
    *(_DWORD *)(*(_QWORD *)(a2 + 16) + 2145472) = 1026;
    if ((_DWORD)v9)
    {
      v13 = 0;
      v14 = 0;
      v15 = 1;
      do
      {
        v16 = 0;
        v17 = *(_DWORD *)(a3 + 4 * v14);
        do
        {
          v18 = *(_DWORD *)(a3 + 4 * v16);
          if (v18 <= v17)
            v19 = v17 + 196 * v18;
          else
            v19 = v18 + 196 * v17;
          *(_QWORD *)(v12 + 8 * (v13 + v16++)) = *(_QWORD *)(v12
                                                                           + 8 * (196 - ((v11 + 3) & 0xFFFFFFFC))
                                                                           + 8 * v19);
        }
        while (v15 != v16);
        ++v14;
        ++v15;
        v13 += 196;
      }
      while (v14 != v9);
    }
    v43 = *v8;
    if (*(_DWORD *)(a2 + 8) == -1
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 188, (uint64_t)"write_channel != kInvalidChannel && \"DMA write request not permitted.\"", 70, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *(_DWORD *)a2 < 0x20BCC4u&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 191, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v20 = v9 - a4;
    *(_DWORD *)(*(_QWORD *)(a2 + 16) + 2145472) = 1027;
    if (sub_20E8BE940())
    {
      *(_DWORD *)(a1 + 363820) = 4;
    }
    else
    {
      v21 = vaddq_f64(*(float64x2_t *)(a1 + 44080), (float64x2_t)0);
      *(float64x2_t *)(a1 + 44064) = vaddq_f64(*(float64x2_t *)(a1 + 44064), (float64x2_t)0);
      *(float64x2_t *)(a1 + 44080) = v21;
      if (*(_DWORD *)(a2 + 8) == -1
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 188, (uint64_t)"write_channel != kInvalidChannel && \"DMA write request not permitted.\"", 70, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *(_DWORD *)a2 < 0x20BCC4u&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 191, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_44;
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 16) + 2145472) = 1028;
      __dst = (char *)operator new((8 * v20 * a4 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
      v39 = v43 - a4;
      v40 = (double *)(v12 + 1568 * (v43 - a4));
      v42 = a4;
      if (a4 && (_DWORD)v9 != a4)
      {
        v22 = a4;
        v23 = 196 * v43 - 196 * a4;
        v24 = __dst;
        v25 = v42;
        do
        {
          memcpy(v24, (const void *)(v12 + 8 * v23), 8 * v20);
          v23 += 196;
          v24 += 8 * v20;
          --v25;
        }
        while (v25);
        v26 = 196 * v43 - 196 * v42;
        v27 = __dst;
        do
        {
          memcpy((void *)(v12 + 8 * v26), v27, 8 * v20);
          v26 += 196;
          v27 += 8 * (int)v20;
          --v22;
        }
        while (v22);
      }
      MEMORY[0x212BC6368](__dst, 0x1000C8000313F17);
      sub_20E8BE7C8(0, 0, 1, 1, v20, v42, (double *)(a1 + 44352), 196, 1.0, v28, v29, v30, v31, v32, v33, v34, v40, 196);
      v35 = vaddq_f64(*(float64x2_t *)(a1 + 44112), (float64x2_t)0);
      *(float64x2_t *)(a1 + 44096) = vaddq_f64(*(float64x2_t *)(a1 + 44096), (float64x2_t)0);
      *(float64x2_t *)(a1 + 44112) = v35;
      sub_20E8BE764(0, 1, v42, v20, v40, 196, (double *)(v12 + 8 * (197 * v39)), 196, -1.0, 1.0);
      v36 = vaddq_f64(*(float64x2_t *)(a1 + 44176), (float64x2_t)0);
      *(float64x2_t *)(a1 + 44160) = vaddq_f64(*(float64x2_t *)(a1 + 44160), (float64x2_t)0);
      *(float64x2_t *)(a1 + 44176) = v36;
      *(_DWORD *)(a1 + 43612) = v42;
      if (*(_DWORD *)(a2 + 8) == -1
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 188, (uint64_t)"write_channel != kInvalidChannel && \"DMA write request not permitted.\"", 70, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_44;
      }
      if (*(_DWORD *)a2 < 0x20BCC4u
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 191, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_44:
        abort();
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 16) + 2145472) = 1029;
    }
  }
  v37 = vaddq_f64(*(float64x2_t *)(a1 + 44144), (float64x2_t)0);
  result = vaddq_f64(*(float64x2_t *)(a1 + 44128), (float64x2_t)0);
  *(float64x2_t *)(a1 + 44128) = result;
  *(float64x2_t *)(a1 + 44144) = v37;
  return result;
}

void sub_20FC93580(_Unwind_Exception *a1)
{
  float64x2_t *v1;
  float64x2_t v2;

  v2 = vaddq_f64(v1[2759], (float64x2_t)0);
  v1[2758] = vaddq_f64(v1[2758], (float64x2_t)0);
  v1[2759] = v2;
  _Unwind_Resume(a1);
}

float64x2_t sub_20FC935B8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  int v13;
  BOOL v14;
  char v15;
  float64x2_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float64x2_t *v21;
  uint64_t v22;
  _OWORD *v23;
  unsigned int v24;
  float64x2_t v25;
  float32x4_t *v26;
  float64x2_t *v27;
  double v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  uint64_t v40;
  unsigned int v41;
  float64x2_t v42;
  __int128 v43;
  __int128 v44;
  float64x2_t v45;
  float64x2_t result;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  float64x2_t *__dst;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  __int128 *v54;
  uint64_t *v55;
  char *v56;
  __int128 *v57;
  uint64_t *v58;
  char v59;
  char v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  _QWORD v68[21];
  int v69;
  int v70;
  char v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  BOOL v77;
  BOOL v78;
  BOOL v79;
  char v80;
  char v82;

  MEMORY[0x24BDAC7A8](a1);
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  if (*(_DWORD *)(v5 + 8) == -1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 188, (uint64_t)"write_channel != kInvalidChannel && \"DMA write request not permitted.\"", 70, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *(_DWORD *)v6 < 0x20BCC4u&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 191, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  *(_DWORD *)(*(_QWORD *)(v6 + 16) + 2145472) = 1002;
  __dst = (float64x2_t *)(v8 + 355640);
  ++*(_DWORD *)(v8 + 363816);
  v9 = (_DWORD *)(v8 + 31048);
  v10 = *(_QWORD *)(v8 + 31040);
  v11 = *(_DWORD *)(v8 + 31060) != 0;
  v12 = *(_DWORD *)(v8 + 31068) != 0;
  v68[0] = 0;
  v69 = 0;
  v70 = 0;
  v71 = 1;
  v72 = 0x40C3880000000000;
  v73 = xmmword_2103B8420;
  v74 = 0x3DDB7CDFD9D7BDBBLL;
  v75 = v10;
  v76 = 1;
  v77 = v11;
  v78 = v11;
  v79 = v12;
  v80 = *(_BYTE *)(v8 + 31072);
  v13 = *(unsigned __int8 *)(v8 + 31065);
  if (*(_BYTE *)(v8 + 31064))
    v14 = v13 == 0;
  else
    v14 = 1;
  v15 = !v14;
  v82 = v15;
  sub_20FA191D0((uint64_t)v68, (_DWORD *)(v8 + 64));
  v67 = 0;
  v65 = 0u;
  v66 = 0u;
  v63 = 0u;
  v64 = 0u;
  v62 = 0u;
  v61 = 0;
  if (*(_DWORD *)(v6 + 8) == -1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 188, (uint64_t)"write_channel != kInvalidChannel && \"DMA write request not permitted.\"", 70, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *(_DWORD *)v6 < 0x20BCC4u&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 191, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_51;
  }
  *(_DWORD *)(*(_QWORD *)(v6 + 16) + 2145472) = 1003;
  if (!*(_DWORD *)(v8 + 31272))
    goto LABEL_55;
  v16 = vaddq_f64(*(float64x2_t *)(v8 + 43856), (float64x2_t)0);
  *(float64x2_t *)(v8 + 43840) = vaddq_f64(*(float64x2_t *)(v8 + 43840), (float64x2_t)0);
  *(float64x2_t *)(v8 + 43856) = v16;
  v59 = 0;
  v51 = v6;
  v52 = v8;
  v53 = (uint64_t *)(v8 + 64);
  v54 = (__int128 *)v68;
  v55 = (uint64_t *)&v59;
  v56 = &v60;
  v57 = &v62;
  v58 = &v61;
  sub_20FC93D80((uint64_t)&v51);
  if (!v59)
  {
LABEL_55:
    if ((*(_DWORD *)(v6 + 8) != -1
       || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 188, (uint64_t)"write_channel != kInvalidChannel && \"DMA write request not permitted.\"", 70, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))&& (*(_DWORD *)v6 >= 0x20BCC4u|| !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 191, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)))
    {
      *(_DWORD *)(*(_QWORD *)(v6 + 16) + 2145472) = 1004;
      v49 = v8;
      if (*(_DWORD *)(v8 + 31276))
      {
        v51 = v8;
        v52 = v6;
        v53 = &v61;
        v54 = &v62;
        sub_20FC98308(&v51);
      }
      if ((*(_DWORD *)(v6 + 8) != -1
         || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 188, (uint64_t)"write_channel != kInvalidChannel && \"DMA write request not permitted.\"", 70, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))&& (*(_DWORD *)v6 >= 0x20BCC4u|| !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 191, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)))
      {
        *(_DWORD *)(*(_QWORD *)(v6 + 16) + 2145472) = 1005;
        v51 = v6;
        v52 = v8;
        v53 = v68;
        v54 = &v62;
        v55 = &v61;
        v56 = (char *)(v8 + 64);
        sub_20FCA8F1C((uint64_t)&v51);
        if ((*(_DWORD *)(v6 + 8) != -1
           || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 188, (uint64_t)"write_channel != kInvalidChannel && \"DMA write request not permitted.\"", 70, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))&& (*(_DWORD *)v6 >= 0x20BCC4u|| !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 191, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)))
        {
          v47 = v2;
          v48 = v4;
          *(_DWORD *)(*(_QWORD *)(v6 + 16) + 2145472) = 1008;
          v17 = *(unsigned int *)(v8 + 31052);
          if ((_DWORD)v17)
          {
            v18 = *v9;
            if ((_DWORD)v18)
            {
              v19 = v8 + 351680 + 8 * v18;
              memmove(__dst, (const void *)(v8 + 351680), 8 * v18);
              v20 = 0;
              v21 = (float64x2_t *)(v8 + 43808);
              v22 = v8 + 361416;
              v23 = (_OWORD *)((char *)&v51 + 4 * v18);
              do
              {
                sub_20FCB082C(v6, 780 * v20 + 1257856, (4 * *v9), &v51);
                v24 = 0;
                v25 = vaddq_f64(v21[1], (float64x2_t)0);
                *v21 = vaddq_f64(*v21, (float64x2_t)0);
                v21[1] = v25;
                *v23 = 0u;
                v23[1] = 0u;
                v23[2] = 0u;
                v23[3] = 0u;
                v26 = (float32x4_t *)&v51;
                v27 = __dst;
                do
                {
                  v28 = *(double *)(v22 + 8 * v20) * *(double *)(v19 + 8 * v20);
                  v30 = v26[2];
                  v29 = v26[3];
                  v32 = *v26;
                  v31 = v26[1];
                  v26 += 4;
                  v33 = vmlsq_lane_f64(v27[1], vcvt_hight_f64_f32(v32), v28, 0);
                  v34 = vmlsq_lane_f64(*v27, vcvtq_f64_f32(*(float32x2_t *)v32.f32), v28, 0);
                  v35 = vmlsq_lane_f64(v27[3], vcvt_hight_f64_f32(v31), v28, 0);
                  v36 = vmlsq_lane_f64(v27[2], vcvtq_f64_f32(*(float32x2_t *)v31.f32), v28, 0);
                  v37 = vmlsq_lane_f64(v27[5], vcvt_hight_f64_f32(v30), v28, 0);
                  v38 = vmlsq_lane_f64(v27[4], vcvtq_f64_f32(*(float32x2_t *)v30.f32), v28, 0);
                  v39 = vmlsq_lane_f64(v27[7], vcvt_hight_f64_f32(v29), v28, 0);
                  v27[6] = vmlsq_lane_f64(v27[6], vcvtq_f64_f32(*(float32x2_t *)v29.f32), v28, 0);
                  v27[7] = v39;
                  v27[4] = v38;
                  v27[5] = v37;
                  v27[2] = v36;
                  v27[3] = v35;
                  *v27 = v34;
                  v27[1] = v33;
                  v27 += 8;
                  v24 += 16;
                }
                while (v24 < v18);
                ++v20;
              }
              while (v20 != v17);
            }
            else
            {
              v41 = 1257856;
              do
              {
                sub_20FCB082C(v6, v41, (4 * *v9), &v51);
                v42 = vaddq_f64(*(float64x2_t *)(v8 + 43824), (float64x2_t)0);
                *(float64x2_t *)(v8 + 43808) = vaddq_f64(*(float64x2_t *)(v8 + 43808), (float64x2_t)0);
                *(float64x2_t *)(v8 + 43824) = v42;
                v41 += 780;
                LODWORD(v17) = v17 - 1;
              }
              while ((_DWORD)v17);
            }
          }
          else
          {
            v40 = *v9;
            if ((_DWORD)v40)
              memmove((void *)(v8 + 355640), (const void *)(v8 + 351680), 8 * v40);
          }
          if (v48)
          {
            v43 = v65;
            *(_OWORD *)(v48 + 32) = v64;
            *(_OWORD *)(v48 + 48) = v43;
            *(_OWORD *)(v48 + 64) = v66;
            *(_QWORD *)(v48 + 80) = v67;
            v44 = v63;
            *(_OWORD *)v48 = v62;
            *(_OWORD *)(v48 + 16) = v44;
            *v47 = v61;
          }
          v8 = v49;
          if ((*(_DWORD *)(v6 + 8) != -1
             || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 188, (uint64_t)"write_channel != kInvalidChannel && \"DMA write request not permitted.\"", 70, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))&& (*(_DWORD *)v6 >= 0x20BCC4u|| !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 191, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)))
          {
            *(_DWORD *)(*(_QWORD *)(v6 + 16) + 2145472) = 1009;
            goto LABEL_50;
          }
        }
      }
    }
LABEL_51:
    abort();
  }
  *(_DWORD *)(v8 + 363820) = 1;
LABEL_50:
  v45 = vaddq_f64(*(float64x2_t *)(v8 + 43632), (float64x2_t)0);
  result = vaddq_f64(*(float64x2_t *)(v8 + 43616), (float64x2_t)0);
  *(float64x2_t *)(v8 + 43616) = result;
  *(float64x2_t *)(v8 + 43632) = v45;
  return result;
}

void sub_20FC93D28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, float64x2_t *a12)
{
  float64x2_t v12;

  v12 = vaddq_f64(a12[2727], (float64x2_t)0);
  a12[2726] = vaddq_f64(a12[2726], (float64x2_t)0);
  a12[2727] = v12;
  _Unwind_Resume(a1);
}

float64x2_t **sub_20FC93D80(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  int64x2_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  float64x2_t **result;
  uint64_t v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  float64x2_t v40;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  int v49;
  int v50;
  int v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t *v57;
  float64x2_t **i;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int64x2_t v62;
  int64x2_t v64;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v75;
  float64x2_t v77;
  float64x2_t v79;
  int64x2_t v81;
  int64x2_t v82;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v87;
  float64x2_t v88;
  int64x2_t v89;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v101;
  int64x2_t v103;
  float64x2_t v105;
  int64x2_t v106;
  float64x2_t v109;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v114;
  float64x2_t v116;
  int64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  int64x2_t v123;
  float64x2_t v124;
  int64x2_t v125;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  unint64_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  double *v177;
  double v186;
  uint64_t j;
  unint64_t v188;
  unint64_t *v189;
  unint64_t v190;
  uint64_t v191;
  int64x2_t v192;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v197;
  float64x2_t v202;
  float64x2_t v205;
  float64x2_t *v206;
  float64x2_t v210;
  float64x2_t v214;
  float64x2_t v216;
  float64x2_t v218;
  float64x2_t v220;
  float64x2_t v223;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v234;
  float64x2_t v235;
  float64x2_t v238;
  float64x2_t v240;
  int64x2_t v241;
  float64x2_t v243;
  float64x2_t v244;
  float64x2_t v245;
  float64x2_t v246;
  float64x2_t v247;
  float64x2_t v248;
  float64x2_t v249;
  float64x2_t v250;
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v255;
  float64x2_t v257;
  int64x2_t v259;
  float64x2_t v260;
  float64x2_t v261;
  float64x2_t v262;
  float64x2_t v263;
  float64x2_t v264;
  float64x2_t v265;
  float64x2_t v266;
  float64x2_t v267;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v272;
  float64x2_t v274;
  int64x2_t v275;
  float64x2_t v277;
  float64x2_t v278;
  float64x2_t v279;
  float64x2_t v280;
  float64x2_t v281;
  float64x2_t v282;
  float64x2_t v283;
  float64x2_t v284;
  float64x2_t v285;
  float64x2_t v286;
  float64x2_t v289;
  float64x2_t v291;
  int64x2_t v293;
  float64x2_t v294;
  float64x2_t v295;
  float64x2_t v296;
  float64x2_t v297;
  float64x2_t v298;
  float64x2_t v299;
  float64x2_t v300;
  float64x2_t v301;
  float64x2_t v302;
  float64x2_t v303;
  float64x2_t v306;
  float64x2_t v308;
  int64x2_t v309;
  float64x2_t v312;
  float64x2_t v313;
  float64x2_t v314;
  float64x2_t v315;
  float64x2_t v316;
  float64x2_t v317;
  float64x2_t v318;
  float64x2_t v319;
  float64x2_t v320;
  float64x2_t v322;
  float64x2_t v323;
  float64x2_t v324;
  float64x2_t v325;
  float64x2_t v326;
  float64x2_t v327;
  float64x2_t v328;
  float64x2_t v329;
  float64x2_t v330;
  float64x2_t v331;
  uint64_t v332;
  float64x2_t v333;
  float64x2_t v334;
  float64x2_t v335;
  float64x2_t v336;
  float64x2_t v337;
  float64x2_t v338;
  float64x2_t v339;
  float64x2_t v340;
  float64x2_t v341;
  float64x2_t v342;
  float64x2_t v343;
  uint64_t v344;
  unsigned int v345;
  uint64_t v346;
  int64x2_t v347;
  int64x2_t v348;
  float64x2_t v349;
  float64x2_t v350;
  float64x2_t v351;
  int64x2_t *v352;
  int64x2_t v353;
  int64x2_t v354;
  int64x2_t v355;
  float64x2_t v356;
  float64x2_t v357;
  float64x2_t v358;
  int64x2_t v359;
  int64x2_t v360;
  int64x2_t v361;
  int64x2_t v362;
  float64x2_t v364;
  float64x2_t v365;
  int64x2_t v366;
  int64x2_t v367;
  int64x2_t *v368;
  int64x2_t v369;
  float64x2_t v371;
  float64x2_t v372;
  float64x2_t v377;
  float64x2_t v378;
  float64x2_t v379;
  float64x2_t v380;
  float64x2_t v382;
  float64x2_t v383;
  float64x2_t v384;
  int64x2_t v385;
  float64x2_t v386;
  float64x2_t v388;
  int64x2_t v389;
  float64x2_t v390;
  float64x2_t v391;
  float64x2_t v392;
  float64x2_t v393;
  float64x2_t v394;
  float64x2_t v395;
  float64x2_t v396;
  float64x2_t v397;
  float64x2_t v399;
  float64x2_t v400;
  float64x2_t v401;
  float64x2_t v402;
  float64x2_t v404;
  float64x2_t v405;
  float64x2_t v406;
  float64x2_t v407;
  float64x2_t v410;
  int64x2_t v411;
  float64x2_t v412;
  int64x2_t v413;
  float64x2_t v414;
  int64x2_t v415;
  float64x2_t v416;
  int64x2_t v417;
  float64x2_t v418;
  int64x2_t v419;
  float64x2_t v420;
  int64x2_t v421;
  float64x2_t v422;
  int64x2_t v423;
  float64x2_t v424;
  int64x2_t v425;
  float64x2_t v427;
  float64x2_t v428;
  float64x2_t v429;
  float64x2_t v430;
  float64x2_t v431;
  float64x2_t v432;
  float64x2_t v433;
  float64x2_t v434;
  float64x2_t v436;
  float64x2_t v437;
  float64x2_t v438;
  float64x2_t v439;
  float64x2_t v441;
  float64x2_t v442;
  float64x2_t v443;
  float64x2_t v444;
  float64x2_t v447;
  int64x2_t v448;
  float64x2_t v449;
  int64x2_t v450;
  float64x2_t v451;
  int64x2_t v452;
  float64x2_t v453;
  int64x2_t v454;
  float64x2_t v455;
  int64x2_t v456;
  float64x2_t v457;
  int64x2_t v458;
  float64x2_t v459;
  int64x2_t v460;
  float64x2_t v461;
  int64x2_t v463;
  float64x2_t v464;
  float64x2_t v465;
  float64x2_t v466;
  float64x2_t v467;
  float64x2_t v468;
  float64x2_t v469;
  float64x2_t v470;
  float64x2_t v471;
  float64x2_t v473;
  float64x2_t v474;
  float64x2_t v475;
  float64x2_t v476;
  float64x2_t v478;
  float64x2_t v479;
  float64x2_t v480;
  float64x2_t v481;
  float64x2_t v484;
  int64x2_t v485;
  float64x2_t v486;
  int64x2_t v487;
  float64x2_t v488;
  int64x2_t v489;
  float64x2_t v490;
  int64x2_t v491;
  float64x2_t v492;
  int64x2_t v493;
  float64x2_t v494;
  int64x2_t v495;
  float64x2_t v496;
  int64x2_t v497;
  float64x2_t v498;
  int64x2_t v499;
  float64x2_t v501;
  float64x2_t v502;
  float64x2_t v503;
  float64x2_t v504;
  float64x2_t v505;
  float64x2_t v506;
  float64x2_t v507;
  float64x2_t v508;
  float64x2_t v510;
  float64x2_t v511;
  float64x2_t v512;
  float64x2_t v513;
  float64x2_t v515;
  float64x2_t v516;
  float64x2_t v517;
  float64x2_t v518;
  float64x2_t v521;
  int64x2_t v522;
  float64x2_t v523;
  int64x2_t v524;
  float64x2_t v525;
  int64x2_t v526;
  float64x2_t v527;
  int64x2_t v528;
  float64x2_t v529;
  int64x2_t v530;
  float64x2_t v531;
  int64x2_t v532;
  float64x2_t v533;
  int64x2_t v534;
  float64x2_t v535;
  int64x2_t v537;
  float64x2_t v538;
  float64x2_t v539;
  float64x2_t v540;
  float64x2_t v541;
  float64x2_t v542;
  float64x2_t v543;
  float64x2_t v544;
  float64x2_t v545;
  float64x2_t v547;
  float64x2_t v548;
  float64x2_t v549;
  float64x2_t v550;
  float64x2_t v552;
  float64x2_t v553;
  float64x2_t v554;
  float64x2_t v555;
  float64x2_t v558;
  int64x2_t v559;
  float64x2_t v560;
  int64x2_t v561;
  float64x2_t v562;
  int64x2_t v563;
  float64x2_t v564;
  int64x2_t v565;
  float64x2_t v566;
  int64x2_t v567;
  float64x2_t v568;
  int64x2_t v569;
  float64x2_t v570;
  int64x2_t v571;
  float64x2_t v572;
  int64x2_t v573;
  float64x2_t v575;
  float64x2_t v576;
  float64x2_t v577;
  float64x2_t v578;
  float64x2_t v579;
  float64x2_t v580;
  float64x2_t v582;
  float64x2_t v584;
  float64x2_t v585;
  float64x2_t v586;
  float64x2_t v587;
  float64x2_t v589;
  float64x2_t v590;
  float64x2_t v591;
  float64x2_t v592;
  float64x2_t v594;
  float64x2_t v595;
  float64x2_t v596;
  float64x2_t v597;
  float64x2_t v598;
  float64x2_t v599;
  float64x2_t v600;
  float64x2_t v601;
  float64x2_t v602;
  float64x2_t v603;
  float64x2_t v604;
  float64x2_t v605;
  float64x2_t v606;
  float64x2_t v607;
  float64x2_t v608;
  float64x2_t v609;
  uint64_t v610;
  float64x2_t v611;
  float64x2_t v612;
  float64x2_t v613;
  float64x2_t v614;
  float64x2_t v615;
  float64x2_t v616;
  float64x2_t v617;
  float64x2_t v618;
  float64x2_t v619;
  float64x2_t v620;
  float64x2_t v621;
  float64x2_t v622;
  BOOL v623;
  unint64_t k;
  uint64_t v625;
  uint64_t v626;
  float64x2_t *v627;
  float64x2_t *v628;
  unint64_t v629;
  uint64_t v630;
  int64x2_t v632;
  int64x2_t v633;
  float64x2_t v635;
  float64x2_t v636;
  int64x2_t v637;
  int64x2_t v638;
  float64x2_t v639;
  float64x2_t v640;
  int64x2_t v641;
  float64x2_t v642;
  float64x2_t v643;
  int64x2_t v645;
  float64x2_t v646;
  int64x2_t v647;
  float64x2_t v648;
  float64x2_t v650;
  float64x2_t v651;
  float64x2_t v654;
  float64x2_t v655;
  float64x2_t v658;
  float64x2_t v660;
  float64x2_t v665;
  float64x2_t v666;
  float64x2_t v668;
  float64x2_t v676;
  float64x2_t v678;
  float64x2_t v680;
  float64x2_t v681;
  float64x2_t v682;
  float64x2_t v683;
  float64x2_t v684;
  float64x2_t v685;
  int64x2_t v686;
  int64x2_t v687;
  float64x2_t v689;
  float64x2_t v692;
  float64x2_t v698;
  float64x2_t v700;
  float64x2_t v703;
  float64x2_t v704;
  float64x2_t v708;
  float64x2_t v711;
  float64_t v712;
  float64x2_t v713;
  float64x2_t v716;
  float64x2_t v717;
  int64x2_t v719;
  float64x2_t v721;
  int64x2_t v722;
  int64x2_t v723;
  float64x2_t v724;
  float64x2_t v725;
  int64x2_t v726;
  int64x2_t v727;
  float64x2_t v728;
  float64x2_t v729;
  int64x2_t v730;
  int64x2_t v731;
  float64x2_t v732;
  float64x2_t v733;
  float64x2_t v735;
  float64x2_t v736;
  float64x2_t v737;
  float64x2_t v738;
  float64x2_t v739;
  float64x2_t v741;
  float64x2_t v742;
  float64x2_t v746;
  float64x2_t v747;
  float64x2_t v748;
  float64x2_t v749;
  float64x2_t v750;
  float64x2_t v751;
  float64x2_t v752;
  float64x2_t v753;
  float64x2_t v754;
  float64x2_t v756;
  float64x2_t v757;
  float64x2_t v759;
  int64x2_t v760;
  int64x2_t v761;
  float64x2_t v762;
  int64x2_t v764;
  int64x2_t v765;
  float64x2_t v766;
  float64x2_t v767;
  int64x2_t v768;
  int64x2_t v769;
  float64x2_t v770;
  float64x2_t v771;
  int64x2_t v772;
  int64x2_t v773;
  float64x2_t v774;
  float64x2_t v775;
  float64x2_t v777;
  float64x2_t v778;
  float64x2_t v780;
  float64x2_t v782;
  float64x2_t v783;
  float64x2_t v784;
  float64x2_t v785;
  float64x2_t v786;
  float64x2_t v787;
  float64x2_t v788;
  float64x2_t v789;
  float64x2_t v790;
  float64x2_t v791;
  float64x2_t v792;
  float64x2_t v793;
  float64x2_t v796;
  float64x2_t v797;
  float64x2_t v799;
  float64x2_t v800;
  float64x2_t v801;
  int64x2_t v802;
  int64x2_t v803;
  int64x2_t v806;
  int64x2_t v807;
  float64x2_t v809;
  int64x2_t v810;
  int64x2_t v811;
  int64x2_t v814;
  int64x2_t v815;
  float64x2_t v821;
  float64x2_t v824;
  float64x2_t v825;
  float64x2_t v829;
  float64x2_t v833;
  float64x2_t v836;
  float64x2_t v838;
  float64x2_t v839;
  float64x2_t v840;
  float64x2_t v841;
  float64x2_t v842;
  int64x2_t v843;
  int64x2_t v844;
  float64x2_t v845;
  float64x2_t v846;
  int64x2_t v847;
  int64x2_t v848;
  float64x2_t v849;
  float64x2_t v850;
  int64x2_t v851;
  int64x2_t v852;
  float64x2_t v853;
  float64x2_t v854;
  int64x2_t v855;
  int64x2_t v856;
  float64x2_t v857;
  float64x2_t v858;
  float64x2_t v859;
  float64x2_t v860;
  float64x2_t v861;
  float64x2_t v862;
  float64x2_t v863;
  float64x2_t v864;
  float64x2_t v865;
  float64x2_t v866;
  float64x2_t v867;
  float64x2_t v868;
  int64x2_t v869;
  int64x2_t v870;
  float64x2_t v872;
  int64x2_t v873;
  int64x2_t v874;
  float64x2_t v875;
  int64x2_t v877;
  int64x2_t v878;
  float64x2_t v879;
  float64x2_t v880;
  int64x2_t v881;
  int64x2_t v882;
  float64x2_t v883;
  float64x2_t v884;
  float64x2_t v888;
  float64x2_t v890;
  float64x2_t v891;
  float64x2_t v892;
  float64x2_t v894;
  float64x2_t v895;
  float64x2_t v897;
  float64x2_t v898;
  float64x2_t v900;
  float64x2_t v901;
  float64x2_t v903;
  float64x2_t v904;
  float64x2_t v906;
  float64x2_t v907;
  float64x2_t v908;
  float64x2_t v909;
  float64x2_t v910;
  float64x2_t v911;
  float64x2_t v912;
  float64x2_t v913;
  float64x2_t v914;
  float64x2_t v915;
  float64x2_t v916;
  float64x2_t v917;
  float64x2_t v918;
  float64x2_t v919;
  float64x2_t v920;
  float64x2_t v921;
  float64x2_t v922;
  float64x2_t v923;
  float64x2_t v924;
  float64x2_t v925;
  float64x2_t v926;
  float64x2_t v927;
  float64x2_t v928;
  float64x2_t v929;
  float64x2_t v930;
  float64x2_t v931;
  float64x2_t v932;
  float64x2_t v933;
  float64x2_t v934;
  float64x2_t v935;
  uint64_t v936;
  float64x2_t v937;
  float64x2_t v938;
  float64x2_t v939;
  float64x2_t v940;
  float64x2_t v941;
  float64x2_t v942;
  float64x2_t v943;
  float64x2_t v944;
  float64x2_t v945;
  float64x2_t v946;
  float64x2_t v947;
  float64x2_t v948;
  float64x2_t v949;
  float64x2_t v950;
  float64x2_t v951;
  float64x2_t v952;
  float64x2_t v953;
  float64x2_t v954;
  float64x2_t v955;
  float64x2_t v956;
  float64x2_t v957;
  float64x2_t v958;
  float64x2_t v959;
  float64x2_t v960;
  float64x2_t v961;
  double *v1068;
  double v1089;
  double v1090;
  double v1091;
  double v1092;
  double v1093;
  double v1094;
  double v1095;
  double v1096;
  double v1097;
  double v1098;
  double v1099;
  double v1100;
  double v1101;
  double v1102;
  unint64_t *v1103;
  unint64_t *v1104;
  __int128 *v1105;
  double v1141;
  double v1142;
  double v1143;
  double *v1144;
  double v1145;
  double v1146;
  unint64_t v1147;
  unint64_t v1148;
  int8x16_t v1149;
  int8x16_t v1150;
  int8x16_t v1151;
  int8x16_t v1152;
  int8x16_t v1153;
  int8x16_t v1154;
  int8x16_t v1156;
  uint64_t v1163;
  float64x2_t v1164;
  float64x2_t v1169;
  float64x2_t v1174;
  float64x2_t v1179;
  float64x2_t v1182;
  float64x2_t v1183;
  float64x2_t *v1184;
  int64x2_t **v1214;
  unint64_t *v1215;
  double v1349;
  double v1350;
  double v1351;
  double v1352;
  double v1353;
  double v1354;
  double v1355;
  double v1356;
  double *v1357;
  double v1358;
  double v1359;
  double v1360;
  double v1361;
  double v1362;
  double v1363;
  double v1364;
  double v1365;
  uint64_t v1366;
  unsigned int v1367;
  float64x2_t v1368;
  float64x2_t v1376;
  float64x2_t v1377;
  float64x2_t v1378;
  float64x2_t v1379;
  float64x2_t v1380;
  int64x2_t v1384;
  int64x2_t v1385;
  float64x2_t v1389;
  int64x2_t v1390;
  float64x2_t v1391;
  int64x2_t v1392;
  float64x2_t v1393;
  float64x2_t v1394;
  int64x2_t v1395;
  float64x2_t v1396;
  int64x2_t v1397;
  float64x2_t v1398;
  float64x2_t v1399;
  int64x2_t v1400;
  float64x2_t v1401;
  int64x2_t v1402;
  float64x2_t v1403;
  float64x2_t v1404;
  int64x2_t v1405;
  float64x2_t v1406;
  float64x2_t v1408;
  int64x2_t v1411;
  float64x2_t v1412;
  int64x2_t v1413;
  float64x2_t v1414;
  int64x2_t v1415;
  float64x2_t v1416;
  float64x2_t v1417;
  int64x2_t v1418;
  float64x2_t v1419;
  int64x2_t v1420;
  float64x2_t v1421;
  float64x2_t v1422;
  int64x2_t v1423;
  float64x2_t v1424;
  int64x2_t v1425;
  float64x2_t v1426;
  float64x2_t v1427;
  int64x2_t v1428;
  float64x2_t v1429;
  int64x2_t v1430;
  float64x2_t v1431;
  float64x2_t v1435;
  int64x2_t v1436;
  float64x2_t v1437;
  int64x2_t v1438;
  float64x2_t v1439;
  float64x2_t v1440;
  int64x2_t v1441;
  float64x2_t v1442;
  int64x2_t v1443;
  float64x2_t v1444;
  float64x2_t v1445;
  float64x2_t v1446;
  float64x2_t v1447;
  int64x2_t v1448;
  float64x2_t v1449;
  float64x2_t v1450;
  float64x2_t v1451;
  float64x2_t v1452;
  float64x2_t v1455;
  float64x2_t v1456;
  float64x2_t v1457;
  float64x2_t v1458;
  uint64_t v1459;
  float64x2_t v1460;
  float64x2_t v1461;
  float64x2_t v1462;
  _BYTE *v1463;
  uint64_t v1464;
  unsigned int v1465;
  double *v1466;
  double v1467;
  uint64_t v1468;
  uint64_t v1469;
  double v1470;
  uint64_t v1471;
  uint64_t v1472;
  float64x2_t v1473;
  double v1474;
  unint64_t *v1475;
  uint64_t v1476;
  uint64_t v1477;
  uint64_t v1478;
  double v1479;
  int *v1480;
  float64_t v1481;
  int64x2_t vars0;
  uint64_t vars0_8;
  float64x2_t v1484;
  float64x2_t v1485;
  float64x2_t v1486;
  float64x2_t v1487;
  float64x2_t v1488;
  float64x2_t v1489;
  float64x2_t v1490;
  float64x2_t v1491;
  float64_t v1492;
  float64x2_t v1493;
  float64x2_t v1494;
  float64x2_t v1495;
  float64x2_t v1496;
  float64x2_t v1497;
  float64x2_t v1498;
  float64x2_t v1499;
  float64x2_t v1500;
  float64x2_t v1501;
  float64x2_t v1502;
  float64x2_t v1503;
  float64x2_t v1504;
  float64x2_t v1505;
  float64x2_t v1506;
  float64x2_t v1507;
  float64x2_t v1508;
  float64x2_t v1509;
  float64x2_t v1510;
  float64x2_t v1511;
  float64x2_t v1512;
  float64x2_t v1513;
  float64x2_t v1514;
  float64x2_t v1515;
  float64x2_t v1516;
  float64x2_t v1517;
  float64x2_t v1518;
  float64x2_t v1519;
  double v1520;
  float64x2_t v1521;
  float64x2_t v1522;
  float64x2_t v1523;
  float64x2_t v1524;
  float64x2_t v1525;
  float64x2_t v1526;
  float64x2_t v1527;
  float64x2_t v1528;
  float64x2_t v1529;
  float64x2_t v1530;
  float64x2_t v1531;
  float64x2_t v1532;
  float64x2_t v1533;
  float64x2_t v1534;
  float64x2_t v1535;
  int64x2_t v1536;
  float64x2_t v1537;
  float64x2_t v1538;
  float64x2_t v1539;
  float64x2_t v1540;
  float64x2_t v1541;
  float64x2_t v1542;
  float64x2_t v1543;
  float64x2_t v1544;
  float64x2_t v1545;
  float64x2_t v1546;
  float64x2_t v1547;
  float64x2_t v1548;
  float64x2_t v1549;
  float64x2_t v1550;
  float64x2_t v1551;
  float64x2_t v1552;
  float64x2_t v1553;
  float64x2_t v1554;
  float64x2_t v1555;
  float64x2_t v1556;
  float64x2_t v1557;
  float64x2_t v1558;
  float64x2_t v1559;
  float64x2_t v1560;
  float64x2_t v1561;
  float64x2_t v1562;
  double v1563;
  float64x2_t v1564;
  float64x2_t v1565;
  float64x2_t v1566;
  float64x2_t v1567;
  float64x2_t v1568;
  float64x2_t v1569;
  float64_t v1570;
  int64x2_t v1571;
  float64x2_t v1572;
  float64x2_t v1573;
  float64x2_t v1574;
  float64x2_t v1575;
  float64x2_t v1576;
  float64x2_t v1577;
  float64x2_t v1578;
  int64x2_t v1579;
  float64x2_t v1580;
  float64x2_t v1581;
  float64x2_t v1582;
  float64x2_t v1583;
  float64x2_t v1584;
  float64x2_t v1585;
  int64x2_t v1586;
  float64x2_t v1587;
  float64x2_t v1588;
  float64x2_t v1589;
  float64x2_t v1590;
  float64x2_t v1591;
  float64x2_t v1592;
  int64x2_t v1593;
  float64x2_t v1594;
  float64x2_t v1595;
  float64x2_t v1596;
  float64x2_t v1597;
  float64x2_t v1598;
  float64x2_t v1599;
  float64x2_t v1600;
  float64x2_t v1601;
  float64x2_t v1602;
  float64x2_t v1603;
  float64x2_t v1604;
  float64x2_t v1605;
  float64x2_t v1606;
  float64x2_t v1607;
  float64x2_t v1608;
  float64x2_t v1609;
  float64x2_t v1610;
  float64x2_t v1611;
  float64x2_t v1612;
  float64x2_t v1613;
  float64x2_t v1614;
  float64x2_t v1615;
  float64x2_t v1616;
  float64x2_t v1617;
  float64x2_t v1618;
  float64x2_t v1619;
  float64x2_t v1620;
  float64x2_t v1621;
  float64x2_t v1622;
  float64x2_t v1623;
  float64x2_t v1624;
  float64x2_t v1625;
  float64x2_t v1626;
  float64x2_t v1627;
  float64x2_t v1628;
  float64x2_t v1629;
  float64x2_t v1630;

  MEMORY[0x24BDAC7A8](a1);
  v2 = v1;
  STACK[0x18438] = *MEMORY[0x24BDAC8D0];
  LODWORD(STACK[0x1B60]) = 0;
  LODWORD(STACK[0x1E68]) = 0;
  LODWORD(STACK[0xF930]) = 0;
  v3 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)&STACK[0xF948] = v3;
  LOWORD(STACK[0xF940]) = 0;
  LOWORD(STACK[0x108A0]) = 0;
  *(int64x2_t *)&STACK[0x108A8] = v3;
  LOWORD(STACK[0x11800]) = 0;
  *(int64x2_t *)&STACK[0x11808] = v3;
  LOWORD(STACK[0x12760]) = 0;
  *(int64x2_t *)&STACK[0x12768] = v3;
  LOWORD(STACK[0x136C0]) = 0;
  *(int64x2_t *)&STACK[0x136C8] = v3;
  LOWORD(STACK[0x14620]) = 0;
  *(int64x2_t *)&STACK[0x14628] = v3;
  LOWORD(STACK[0x15580]) = 0;
  *(int64x2_t *)&STACK[0x15588] = v3;
  LOWORD(STACK[0x164E0]) = 0;
  *(int64x2_t *)&STACK[0x164E8] = v3;
  LOWORD(STACK[0x17440]) = 0;
  *(int64x2_t *)&STACK[0x17448] = v3;
  v4 = *v1;
  v5 = v1[1];
  if (*(_DWORD *)(*v1 + 4) == -1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 162, (uint64_t)"read_channel != kInvalidChannel && \"DMA write request not permitted.\"", 69, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *(_DWORD *)v4 < 0x857C0u&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 165, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v1480 = (int *)(v5 + 31048);
  v6 = &STACK[0x1A40];
  result = (float64x2_t **)memcpy(&STACK[0x1A40], (const void *)(*(_QWORD *)(v4 + 16) + 454208), 0x16980uLL);
  LODWORD(STACK[0x1A38]) = 0;
  v8 = v2[2];
  v9 = *(_OWORD *)(v8 + 1704);
  *(_OWORD *)&STACK[0x320] = *(_OWORD *)(v8 + 1688);
  *(_OWORD *)&STACK[0x330] = v9;
  *(_OWORD *)&STACK[0x340] = *(_OWORD *)(v8 + 1720);
  STACK[0x350] = *(_QWORD *)(v8 + 1736);
  STACK[0x358] = *(_QWORD *)(v8 + 1744);
  *(_OWORD *)&STACK[0x360] = *(_OWORD *)(v8 + 1752);
  STACK[0x370] = *(_QWORD *)(v8 + 1768);
  STACK[0x388] = *(_QWORD *)(v8 + 1792);
  *(_OWORD *)&STACK[0x378] = *(_OWORD *)(v8 + 1776);
  v10 = *(_QWORD *)(v8 + 1816);
  *(_OWORD *)&STACK[0x390] = *(_OWORD *)(v8 + 1800);
  v11 = *(_QWORD *)(v8 + 1840);
  STACK[0x3A0] = v10;
  STACK[0x3B8] = v11;
  *(_OWORD *)&STACK[0x3A8] = *(_OWORD *)(v8 + 1824);
  v12 = *(_QWORD *)(v8 + 1912);
  v13 = *(_OWORD *)(v8 + 1896);
  *(_OWORD *)&STACK[0x3E0] = *(_OWORD *)(v8 + 1880);
  *(_OWORD *)&STACK[0x3F0] = v13;
  v14 = *(_OWORD *)(v8 + 1864);
  *(_OWORD *)&STACK[0x3C0] = *(_OWORD *)(v8 + 1848);
  *(_OWORD *)&STACK[0x3D0] = v14;
  v15 = *(_OWORD *)(v8 + 1936);
  v16 = *(_OWORD *)(v8 + 1968);
  *(_OWORD *)&STACK[0x428] = *(_OWORD *)(v8 + 1952);
  *(_OWORD *)&STACK[0x438] = v16;
  v17 = *(_QWORD *)(v8 + 1984);
  *(_OWORD *)&STACK[0x408] = *(_OWORD *)(v8 + 1920);
  STACK[0x400] = v12;
  STACK[0x448] = v17;
  *(_OWORD *)&STACK[0x418] = v15;
  v18 = LODWORD(STACK[0x1B60]);
  if (!(_DWORD)v18)
  {
    v21 = 0.0;
    goto LABEL_63;
  }
  v19 = 0;
  v1478 = v5 + 31076;
  v1477 = v5 + 31116;
  v1476 = v5 + 31156;
  v20 = v5 + 351680;
  v21 = 0.0;
  v1475 = &STACK[0x1A40] + 4 * v18;
  while (1)
  {
    if (*(_BYTE *)(v5 + 31280))
      *(&STACK[0xF940] + 492 * v19 + 1) = 0x7FF8000000000000;
    result = (float64x2_t **)sub_20FA196E4(v2[3], *(unsigned int *)v6, *((unsigned int *)v6 + 1), *((unsigned int *)v6 + 2), *((unsigned __int8 *)v6 + 12), (uint64_t)&STACK[0x1B68], (uint64_t)(&STACK[0xF940] + 492 * v19), (uint64_t)&STACK[0x320], (uint64_t)&STACK[0x458]);
    if ((result & 1) == 0)
      break;
    *((_BYTE *)&STACK[0x183A0] + v19) = 1;
    if (*((_BYTE *)v6 + 12))
      v42 = *(unsigned int *)(v5 + 31248 + 4 * *((unsigned int *)v6 + 2));
    else
      v42 = 0xFFFFFFFFLL;
    v43 = 4 * *(unsigned int *)v6;
    v44 = *(unsigned int *)(v1478 + v43);
    v45 = 4 * *((unsigned int *)v6 + 1);
    v46 = *(unsigned int *)(v1478 + v45);
    v47 = *(unsigned int *)(v1477 + v43);
    v48 = *(unsigned int *)(v1477 + v45);
    v49 = *(_DWORD *)(v1476 + v43);
    v50 = *(_DWORD *)(v1476 + v45);
    v51 = *v1480;
    v52 = &STACK[0xF940] + 492 * v19;
    result = (float64x2_t **)(v52 + 312);
    STACK[0x18418] = (unint64_t)(v52 + 42);
    STACK[0x18420] = (unint64_t)(v52 + 87);
    STACK[0x18428] = (unint64_t)(v52 + 267);
    STACK[0x18430] = (unint64_t)(v52 + 312);
    STACK[0x183F8] = v44;
    STACK[0x18400] = v47;
    STACK[0x18408] = v46;
    STACK[0x18410] = v48;
    v53 = 2 * ((_DWORD)v44 != -1);
    if ((_DWORD)v46 != -1)
    {
      if ((_DWORD)v44 == -1)
      {
        STACK[0x18418] = (unint64_t)(v52 + 267);
        STACK[0x18420] = (unint64_t)result;
        STACK[0x183F8] = v46;
        STACK[0x18400] = v48;
      }
      v53 += 2;
    }
    STACK[0x183E8] = (unint64_t)(v52 + 132);
    STACK[0x183F0] = (unint64_t)(v52 + 357);
    if (v50 == -1)
      v54 = v49 != -1;
    else
      v54 = (v49 != -1) + 1;
    LODWORD(STACK[0x183E0]) = v49;
    LODWORD(STACK[0x183E4]) = v50;
    if (v49 == -1 && (_DWORD)v54)
    {
      STACK[0x183E8] = (unint64_t)(v52 + 357);
      LODWORD(STACK[0x183E0]) = v50;
    }
    v55 = v5 + 44352 + 8 * (196 - ((v51 + 3) & 0xFFFFFFFC));
    v56 = v52 + 12;
    v57 = v52 + 27;
    if (v53)
    {
      for (i = 0; i != (float64x2_t **)v53; i = (float64x2_t **)((char *)i + 1))
      {
        v59 = *(&STACK[0x183F8] + (_QWORD)i);
        v60 = *(&STACK[0x18418] + (_QWORD)i);
        result = i;
        do
        {
          v61 = *(&STACK[0x18418] + (_QWORD)result);
          v62 = *(int64x2_t *)(v61 + 16);
          _Q2 = *(int64x2_t *)(v61 + 136);
          v64 = *(int64x2_t *)(v61 + 120);
          _Q4 = *(float64x2_t *)(v61 + 240);
          _Q3 = *(_OWORD *)(v61 + 256);
          v67 = *(float64x2_t *)(v60 + 120);
          v68 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v61, v64);
          _Q18 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v61, v64);
          v70 = (float64x2_t)vzip1q_s64(v62, _Q2);
          v71 = (float64x2_t)vzip2q_s64(v62, _Q2);
          _Q1 = vmulq_f64(_Q4, *(float64x2_t *)v60);
          _Q2.i64[0] = *(_QWORD *)(v60 + 8);
          __asm { FMLA            D1, D2, V4.D[1] }
          _Q5 = vmulq_f64(_Q4, v67);
          _D19 = *(_QWORD *)(v60 + 128);
          __asm { FMLA            D5, D19, V4.D[1] }
          v75 = vmlaq_laneq_f64(vmulq_n_f64(v68, v67.f64[0]), _Q18, v67, 1);
          _Q19 = *(float64x2_t *)(v60 + 256);
          v77 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v68, *(double *)v60), _Q18, *(float64x2_t *)v60, 1), v70, *(double *)(v60 + 16)), v71, *(float64x2_t *)(v60 + 16), 1);
          _D21 = *(_QWORD *)(v60 + 24);
          v79 = vmlaq_laneq_f64(vmulq_n_f64(v68, *(double *)(v60 + 240)), _Q18, *(float64x2_t *)(v60 + 240), 1);
          _Q18.f64[0] = *(float64_t *)(v60 + 248);
          __asm { FMLA            D16, D18, V4.D[1] }
          v82 = *(int64x2_t *)(v61 + 32);
          v81 = *(int64x2_t *)(v61 + 48);
          __asm { FMLA            D1, D21, V3.D[1] }
          _Q20 = *(float64x2_t *)(v60 + 136);
          v84 = vmlaq_n_f64(v75, v70, _Q20.f64[0]);
          v85 = vmlaq_n_f64(v79, v70, _Q19.f64[0]);
          _Q6 = *(int64x2_t *)(v61 + 168);
          v87 = vmlaq_laneq_f64(v84, v71, _Q20, 1);
          v88 = vmlaq_laneq_f64(v85, v71, _Q19, 1);
          v89 = *(int64x2_t *)(v61 + 152);
          _Q20.f64[0] = *(float64_t *)(v60 + 144);
          __asm { FMLA            D5, D20, V3.D[1] }
          _Q19.f64[0] = *(float64_t *)(v60 + 264);
          __asm { FMLA            D16, D19, V3.D[1] }
          _Q19 = *(_OWORD *)(v61 + 272);
          _Q3 = *(_OWORD *)(v61 + 288);
          v93 = (float64x2_t)vzip1q_s64(v82, v89);
          v94 = (float64x2_t)vzip2q_s64(v82, v89);
          v95 = (float64x2_t)vzip1q_s64(v81, _Q6);
          v96 = (float64x2_t)vzip2q_s64(v81, _Q6);
          _Q6.i64[0] = *(_QWORD *)(v60 + 40);
          __asm { FMLA            D1, D6, V19.D[1] }
          v97 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v77, v93, *(double *)(v60 + 32)), v94, *(float64x2_t *)(v60 + 32), 1), v95, *(double *)(v60 + 48)), v96, *(float64x2_t *)(v60 + 48), 1);
          _Q6.i64[0] = *(_QWORD *)(v60 + 56);
          __asm { FMLA            D1, D6, V3.D[1] }
          _Q6.i64[0] = *(_QWORD *)(v60 + 160);
          __asm { FMLA            D5, D6, V19.D[1] }
          v98 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v87, v93, *(double *)(v60 + 152)), v94, *(float64x2_t *)(v60 + 152), 1), v95, *(double *)(v60 + 168)), v96, *(float64x2_t *)(v60 + 168), 1);
          _Q6.i64[0] = *(_QWORD *)(v60 + 176);
          __asm { FMLA            D5, D6, V3.D[1] }
          v99 = vmlaq_laneq_f64(vmlaq_n_f64(v88, v93, *(double *)(v60 + 272)), v94, *(float64x2_t *)(v60 + 272), 1);
          _Q7 = *(float64x2_t *)(v60 + 288);
          v101 = vmlaq_n_f64(v99, v95, _Q7.f64[0]);
          _Q6.i64[0] = *(_QWORD *)(v60 + 280);
          __asm { FMLA            D16, D6, V19.D[1] }
          _Q18 = *(int64x2_t *)(v61 + 64);
          v103 = *(int64x2_t *)(v61 + 80);
          v105 = vmlaq_laneq_f64(v101, v96, _Q7, 1);
          v106 = *(int64x2_t *)(v61 + 184);
          _Q7.f64[0] = *(float64_t *)(v60 + 296);
          __asm { FMLA            D16, D7, V3.D[1] }
          _Q3 = *(_OWORD *)(v61 + 304);
          v109 = (float64x2_t)vzip1q_s64(_Q18, v106);
          _Q4 = (float64x2_t)vzip2q_s64(_Q18, v106);
          v111 = vmlaq_laneq_f64(vmlaq_n_f64(v97, v109, *(double *)(v60 + 64)), _Q4, *(float64x2_t *)(v60 + 64), 1);
          _Q18.i64[0] = *(_QWORD *)(v60 + 72);
          __asm { FMLA            D1, D18, V3.D[1] }
          v112 = vmlaq_laneq_f64(vmlaq_n_f64(v98, v109, *(double *)(v60 + 184)), _Q4, *(float64x2_t *)(v60 + 184), 1);
          _Q18.i64[0] = *(_QWORD *)(v60 + 192);
          __asm { FMLA            D5, D18, V3.D[1] }
          _Q18 = *(float64x2_t *)(v60 + 304);
          v114 = vmlaq_n_f64(v105, v109, _Q18.f64[0]);
          _Q7 = *(_OWORD *)(v61 + 320);
          v116 = vmlaq_laneq_f64(v114, _Q4, _Q18, 1);
          _Q18.f64[0] = *(float64_t *)(v60 + 312);
          __asm { FMLA            D16, D18, V3.D[1] }
          v118 = *(int64x2_t *)(v61 + 200);
          v119 = (float64x2_t)vzip1q_s64(v103, v118);
          v120 = (float64x2_t)vzip2q_s64(v103, v118);
          v121 = vmlaq_laneq_f64(vmlaq_n_f64(v111, v119, *(double *)(v60 + 80)), v120, *(float64x2_t *)(v60 + 80), 1);
          _Q4.f64[0] = *(float64_t *)(v60 + 88);
          __asm { FMLA            D1, D4, V7.D[1] }
          _Q4.f64[0] = *(float64_t *)(v60 + 208);
          __asm { FMLA            D5, D4, V7.D[1] }
          v122 = vmlaq_laneq_f64(vmlaq_n_f64(v112, v119, *(double *)(v60 + 200)), v120, *(float64x2_t *)(v60 + 200), 1);
          v123 = *(int64x2_t *)(v61 + 96);
          v124 = vmlaq_laneq_f64(vmlaq_n_f64(v116, v119, *(double *)(v60 + 320)), v120, *(float64x2_t *)(v60 + 320), 1);
          v125 = *(int64x2_t *)(v61 + 216);
          _Q4.f64[0] = *(float64_t *)(v60 + 328);
          __asm { FMLA            D16, D4, V7.D[1] }
          v127 = (float64x2_t)vzip1q_s64(v123, v125);
          v128 = (float64x2_t)vzip2q_s64(v123, v125);
          _Q6 = *(_OWORD *)(v61 + 336);
          v130 = vmlaq_laneq_f64(vmlaq_n_f64(v121, v127, *(double *)(v60 + 96)), v128, *(float64x2_t *)(v60 + 96), 1);
          _Q4.f64[0] = *(float64_t *)(v60 + 104);
          __asm { FMLA            D1, D4, V6.D[1] }
          v131 = vmlaq_laneq_f64(vmlaq_n_f64(v122, v127, *(double *)(v60 + 216)), v128, *(float64x2_t *)(v60 + 216), 1);
          _Q4.f64[0] = *(float64_t *)(v60 + 224);
          __asm { FMLA            D5, D4, V6.D[1] }
          v132 = vmlaq_laneq_f64(vmlaq_n_f64(v124, v127, *(double *)(v60 + 336)), v128, *(float64x2_t *)(v60 + 336), 1);
          v128.f64[0] = *(float64_t *)(v61 + 112);
          _Q4.f64[0] = *(float64_t *)(v60 + 344);
          __asm { FMLA            D16, D4, V6.D[1] }
          _Q4.f64[0] = *(float64_t *)(v61 + 352);
          *(_QWORD *)&_Q6 = *(_QWORD *)(v60 + 112);
          v128.f64[1] = *(float64_t *)(v61 + 232);
          v134 = vmlaq_n_f64(v130, v128, *(double *)&_Q6);
          _Q1.f64[0] = _Q1.f64[0] + _Q4.f64[0] * *(double *)&_Q6;
          *(_QWORD *)&_Q6 = *(_QWORD *)(v60 + 232);
          v135 = vmlaq_n_f64(v131, v128, *(double *)&_Q6);
          _Q5.f64[0] = _Q5.f64[0] + _Q4.f64[0] * *(double *)&_Q6;
          *(_QWORD *)&_Q6 = *(_QWORD *)(v60 + 352);
          v136 = vmlaq_n_f64(v132, v128, *(double *)&_Q6);
          v128.f64[0] = _D16 + _Q4.f64[0] * *(double *)&_Q6;
          v137 = v55 + 1568 * v59 + 8 * *(&STACK[0x183F8] + (_QWORD)result);
          v138 = *(float64x2_t *)v137;
          v139 = vaddq_f64(*(float64x2_t *)v137, v134);
          v138.f64[0] = *(float64_t *)(v137 + 16);
          v140 = vaddq_f64(v138, _Q1);
          v138.f64[0] = *(float64_t *)(v137 + 1584);
          *(_QWORD *)&v138.f64[0] = *(_OWORD *)&vaddq_f64(v138, _Q5);
          v141 = vaddq_f64(*(float64x2_t *)(v137 + 1568), v135);
          v142 = vaddq_f64(*(float64x2_t *)(v137 + 3136), v136);
          *(float64_t *)(v137 + 16) = v140.f64[0];
          v140.f64[0] = *(float64_t *)(v137 + 3152);
          *(float64x2_t *)v137 = v139;
          *(float64x2_t *)(v137 + 1568) = v141;
          *(float64_t *)(v137 + 1584) = v138.f64[0];
          *(float64x2_t *)(v137 + 3136) = v142;
          *(_QWORD *)(v137 + 3152) = *(_OWORD *)&vaddq_f64(v140, v128);
          result = (float64x2_t **)((char *)result + 1);
        }
        while ((unint64_t)result < v53);
        _Q2 = *(float64x2_t *)v56;
        _Q0 = vmulq_f64(*(float64x2_t *)v56, *(float64x2_t *)v60);
        _D1 = *(_QWORD *)(v60 + 8);
        __asm { FMLA            D0, D1, V2.D[1] }
        _D3 = *(_QWORD *)(v60 + 128);
        __asm { FMLA            D1, D3, V2.D[1] }
        _D4 = *(_QWORD *)(v60 + 248);
        __asm { FMLA            D3, D4, V2.D[1] }
        _Q2 = *((_OWORD *)v56 + 1);
        _D4 = *(_QWORD *)(v60 + 24);
        __asm { FMLA            D0, D4, V2.D[1] }
        _D4 = *(_QWORD *)(v60 + 144);
        __asm { FMLA            D1, D4, V2.D[1] }
        _D4 = *(_QWORD *)(v60 + 264);
        __asm { FMLA            D3, D4, V2.D[1] }
        _Q2 = *((_OWORD *)v56 + 2);
        _D4 = *(_QWORD *)(v60 + 40);
        __asm { FMLA            D0, D4, V2.D[1] }
        _D4 = *(_QWORD *)(v60 + 160);
        __asm { FMLA            D1, D4, V2.D[1] }
        _D4 = *(_QWORD *)(v60 + 280);
        __asm { FMLA            D3, D4, V2.D[1] }
        _Q2 = *((_OWORD *)v56 + 3);
        _D4 = *(_QWORD *)(v60 + 56);
        __asm { FMLA            D0, D4, V2.D[1] }
        _D4 = *(_QWORD *)(v60 + 176);
        __asm { FMLA            D1, D4, V2.D[1] }
        _D4 = *(_QWORD *)(v60 + 296);
        __asm { FMLA            D3, D4, V2.D[1] }
        _Q2 = *((_OWORD *)v56 + 4);
        _D4 = *(_QWORD *)(v60 + 72);
        __asm { FMLA            D0, D4, V2.D[1] }
        _D4 = *(_QWORD *)(v60 + 192);
        __asm { FMLA            D1, D4, V2.D[1] }
        _D4 = *(_QWORD *)(v60 + 312);
        __asm { FMLA            D3, D4, V2.D[1] }
        _Q2 = *((_OWORD *)v56 + 5);
        _D4 = *(_QWORD *)(v60 + 88);
        __asm { FMLA            D0, D4, V2.D[1] }
        _D4 = *(_QWORD *)(v60 + 208);
        __asm { FMLA            D1, D4, V2.D[1] }
        v177 = (double *)(v20 + 8 * v59);
        _D4 = *(_QWORD *)(v60 + 328);
        __asm { FMLA            D3, D4, V2.D[1] }
        _Q2 = *((_OWORD *)v56 + 6);
        _D4 = *(_QWORD *)(v60 + 104);
        __asm { FMLA            D0, D4, V2.D[1] }
        _D4 = *(_QWORD *)(v60 + 224);
        __asm { FMLA            D1, D4, V2.D[1] }
        _D4 = *(_QWORD *)(v60 + 344);
        __asm { FMLA            D3, D4, V2.D[1] }
        *(_QWORD *)&_Q2 = v56[14];
        _Q0.f64[0] = _Q0.f64[0] + *(double *)&_Q2 * *(double *)(v60 + 112);
        v186 = v177[1] + _D1 + *(double *)&_Q2 * *(double *)(v60 + 232);
        *(double *)&_Q2 = v177[2] + _D3 + *(double *)&_Q2 * *(double *)(v60 + 352);
        *v177 = *v177 + _Q0.f64[0];
        v177[1] = v186;
        *((_QWORD *)v177 + 2) = _Q2;
      }
      if (!(_DWORD)v54)
      {
        if (v42 == 0xFFFFFFFF)
          goto LABEL_7;
        v54 = 0;
        v623 = 1;
        goto LABEL_48;
      }
      for (j = 0; j != v53; ++j)
      {
        v188 = *(&STACK[0x183F8] + j);
        result = (float64x2_t **)&STACK[0x183E8];
        v189 = &STACK[0x183E0];
        v190 = v54;
        do
        {
          while (1)
          {
            v345 = *(_DWORD *)v189;
            v189 = (unint64_t *)((char *)v189 + 4);
            v344 = v345;
            if (v188 <= v345)
              break;
            v191 = *(&STACK[0x18418] + j);
            v192 = *(int64x2_t *)(v191 + 16);
            _Q2 = *(int64x2_t *)(v191 + 120);
            v194 = **result;
            v195 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v191, _Q2);
            _Q20 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v191, _Q2);
            v197 = vmlaq_laneq_f64(vmulq_n_f64(v195, v194.f64[0]), _Q20, v194, 1);
            _Q17 = *(float64x2_t *)(v191 + 240);
            _Q16 = *(_OWORD *)(v191 + 256);
            _Q1 = vmulq_f64(_Q17, v194);
            _Q2.i64[0] = *(_QWORD *)&(*result)->f64[1];
            __asm { FMLA            D1, D2, V17.D[1] }
            _Q4 = *(float64x2_t *)((char *)*result + 120);
            v202 = vmlaq_laneq_f64(vmulq_n_f64(v195, _Q4.f64[0]), _Q20, _Q4, 1);
            _Q3 = vmulq_f64(_Q17, _Q4);
            _Q4.f64[0] = (*result)[8].f64[0];
            __asm { FMLA            D3, D4, V17.D[1] }
            _Q7 = (*result)[15];
            v205 = vmlaq_laneq_f64(vmulq_n_f64(v195, _Q7.f64[0]), _Q20, _Q7, 1);
            v206 = (float64x2_t *)((char *)*result + 360);
            _Q5 = vmulq_f64(_Q17, _Q7);
            _Q7.f64[0] = (*result)[15].f64[1];
            __asm { FMLA            D5, D7, V17.D[1] }
            _Q23 = (*result)[30];
            _Q25 = *(float64x2_t *)((char *)*result + 600);
            v210 = vmlaq_laneq_f64(vmulq_n_f64(v195, v206->f64[0]), _Q20, *v206, 1);
            _Q27 = (*result)[45];
            _Q18 = vmulq_f64(_Q17, *v206);
            _D19 = (*result)[23].f64[0];
            __asm { FMLA            D18, D19, V17.D[1] }
            v214 = vmlaq_laneq_f64(vmulq_n_f64(v195, _Q23.f64[0]), _Q20, _Q23, 1);
            _Q22 = vmulq_f64(_Q17, _Q23);
            _Q23.f64[0] = (*result)[30].f64[1];
            __asm { FMLA            D22, D23, V17.D[1] }
            v216 = vmlaq_laneq_f64(vmulq_n_f64(v195, _Q25.f64[0]), _Q20, _Q25, 1);
            _Q24 = vmulq_f64(_Q17, _Q25);
            _Q25.f64[0] = (*result)[38].f64[0];
            __asm { FMLA            D24, D25, V17.D[1] }
            v218 = vmlaq_laneq_f64(vmulq_n_f64(v195, _Q27.f64[0]), _Q20, _Q27, 1);
            _Q26 = vmulq_f64(_Q17, _Q27);
            _Q27.f64[0] = (*result)[45].f64[1];
            __asm { FMLA            D26, D27, V17.D[1] }
            v220 = vmlaq_laneq_f64(vmulq_n_f64(v195, (*result)[52].f64[1]), _Q20, *(float64x2_t *)((char *)*result + 840), 1);
            _D28 = (*result)[53].f64[0];
            __asm { FMLA            D29, D28, V17.D[1] }
            v223 = vmlaq_laneq_f64(vmulq_n_f64(v195, (*result)[60].f64[0]), _Q20, (*result)[60], 1);
            _D28 = (*result)[60].f64[1];
            __asm { FMLA            D20, D28, V17.D[1] }
            _Q17 = *(int64x2_t *)(v191 + 136);
            v226 = (float64x2_t)vzip1q_s64(v192, _Q17);
            v227 = (float64x2_t)vzip2q_s64(v192, _Q17);
            v228 = vmlaq_laneq_f64(vmlaq_n_f64(v197, v226, (*result)[1].f64[0]), v227, (*result)[1], 1);
            _Q17.i64[0] = *(_QWORD *)&(*result)[1].f64[1];
            __asm { FMLA            D1, D17, V16.D[1] }
            v229 = vmlaq_laneq_f64(vmlaq_n_f64(v202, v226, (*result)[8].f64[1]), v227, *(float64x2_t *)((char *)*result + 136), 1);
            _Q17.i64[0] = *(_QWORD *)&(*result)[9].f64[0];
            __asm { FMLA            D3, D17, V16.D[1] }
            v230 = vmlaq_laneq_f64(vmlaq_n_f64(v205, v226, (*result)[16].f64[0]), v227, (*result)[16], 1);
            _Q17.i64[0] = *(_QWORD *)&(*result)[16].f64[1];
            __asm { FMLA            D5, D17, V16.D[1] }
            v231 = vmlaq_laneq_f64(vmlaq_n_f64(v210, v226, (*result)[23].f64[1]), v227, *(float64x2_t *)((char *)*result + 376), 1);
            _Q17.i64[0] = *(_QWORD *)&(*result)[24].f64[0];
            __asm { FMLA            D18, D17, V16.D[1] }
            v232 = vmlaq_laneq_f64(vmlaq_n_f64(v214, v226, (*result)[31].f64[0]), v227, (*result)[31], 1);
            _Q17.i64[0] = *(_QWORD *)&(*result)[31].f64[1];
            __asm { FMLA            D22, D17, V16.D[1] }
            v233 = vmlaq_laneq_f64(vmlaq_n_f64(v216, v226, (*result)[38].f64[1]), v227, *(float64x2_t *)((char *)*result + 616), 1);
            _Q17.i64[0] = *(_QWORD *)&(*result)[39].f64[0];
            __asm { FMLA            D24, D17, V16.D[1] }
            v234 = vmlaq_laneq_f64(vmlaq_n_f64(v218, v226, (*result)[46].f64[0]), v227, (*result)[46], 1);
            _Q17.i64[0] = *(_QWORD *)&(*result)[46].f64[1];
            __asm { FMLA            D26, D17, V16.D[1] }
            v235 = vmlaq_laneq_f64(vmlaq_n_f64(v220, v226, (*result)[53].f64[1]), v227, *(float64x2_t *)((char *)*result + 856), 1);
            _Q17.i64[0] = *(_QWORD *)&(*result)[54].f64[0];
            __asm { FMLA            D29, D17, V16.D[1] }
            _Q17 = (*result)[61];
            v238 = vmlaq_n_f64(v223, v226, _Q17.f64[0]);
            _Q28 = *(int64x2_t *)(v191 + 32);
            v240 = vmlaq_laneq_f64(v238, v227, _Q17, 1);
            v241 = *(int64x2_t *)(v191 + 152);
            _Q17.f64[0] = (*result)[61].f64[1];
            __asm { FMLA            D20, D17, V16.D[1] }
            _Q16 = *(_OWORD *)(v191 + 272);
            v243 = (float64x2_t)vzip1q_s64(_Q28, v241);
            v244 = (float64x2_t)vzip2q_s64(_Q28, v241);
            v245 = vmlaq_laneq_f64(vmlaq_n_f64(v228, v243, (*result)[2].f64[0]), v244, (*result)[2], 1);
            _Q28.i64[0] = *(_QWORD *)&(*result)[2].f64[1];
            __asm { FMLA            D1, D28, V16.D[1] }
            v246 = vmlaq_laneq_f64(vmlaq_n_f64(v229, v243, (*result)[9].f64[1]), v244, *(float64x2_t *)((char *)*result + 152), 1);
            _Q28.i64[0] = *(_QWORD *)&(*result)[10].f64[0];
            __asm { FMLA            D3, D28, V16.D[1] }
            v247 = vmlaq_laneq_f64(vmlaq_n_f64(v230, v243, (*result)[17].f64[0]), v244, (*result)[17], 1);
            _Q28.i64[0] = *(_QWORD *)&(*result)[17].f64[1];
            __asm { FMLA            D5, D28, V16.D[1] }
            v248 = vmlaq_laneq_f64(vmlaq_n_f64(v231, v243, (*result)[24].f64[1]), v244, *(float64x2_t *)((char *)*result + 392), 1);
            _Q28.i64[0] = *(_QWORD *)&(*result)[25].f64[0];
            __asm { FMLA            D18, D28, V16.D[1] }
            v249 = vmlaq_laneq_f64(vmlaq_n_f64(v232, v243, (*result)[32].f64[0]), v244, (*result)[32], 1);
            _Q28.i64[0] = *(_QWORD *)&(*result)[32].f64[1];
            __asm { FMLA            D22, D28, V16.D[1] }
            v250 = vmlaq_laneq_f64(vmlaq_n_f64(v233, v243, (*result)[39].f64[1]), v244, *(float64x2_t *)((char *)*result + 632), 1);
            _Q28.i64[0] = *(_QWORD *)&(*result)[40].f64[0];
            __asm { FMLA            D24, D28, V16.D[1] }
            v251 = vmlaq_laneq_f64(vmlaq_n_f64(v234, v243, (*result)[47].f64[0]), v244, (*result)[47], 1);
            _Q28.i64[0] = *(_QWORD *)&(*result)[47].f64[1];
            __asm { FMLA            D26, D28, V16.D[1] }
            v252 = vmlaq_laneq_f64(vmlaq_n_f64(v235, v243, (*result)[54].f64[1]), v244, *(float64x2_t *)((char *)*result + 872), 1);
            _Q28.i64[0] = *(_QWORD *)&(*result)[55].f64[0];
            __asm { FMLA            D29, D28, V16.D[1] }
            _Q28 = (*result)[62];
            v255 = vmlaq_n_f64(v240, v243, _Q28.f64[0]);
            _Q17 = *(int64x2_t *)(v191 + 48);
            v257 = vmlaq_laneq_f64(v255, v244, _Q28, 1);
            _Q6 = *(_OWORD *)(v191 + 288);
            _Q28.f64[0] = (*result)[62].f64[1];
            __asm { FMLA            D20, D28, V16.D[1] }
            v259 = *(int64x2_t *)(v191 + 168);
            v260 = (float64x2_t)vzip1q_s64(_Q17, v259);
            v261 = (float64x2_t)vzip2q_s64(_Q17, v259);
            v262 = vmlaq_laneq_f64(vmlaq_n_f64(v245, v260, (*result)[3].f64[0]), v261, (*result)[3], 1);
            _Q17.i64[0] = *(_QWORD *)&(*result)[3].f64[1];
            __asm { FMLA            D1, D17, V6.D[1] }
            v263 = vmlaq_laneq_f64(vmlaq_n_f64(v246, v260, (*result)[10].f64[1]), v261, *(float64x2_t *)((char *)*result + 168), 1);
            _Q17.i64[0] = *(_QWORD *)&(*result)[11].f64[0];
            __asm { FMLA            D3, D17, V6.D[1] }
            v264 = vmlaq_laneq_f64(vmlaq_n_f64(v247, v260, (*result)[18].f64[0]), v261, (*result)[18], 1);
            _Q17.i64[0] = *(_QWORD *)&(*result)[18].f64[1];
            __asm { FMLA            D5, D17, V6.D[1] }
            v265 = vmlaq_laneq_f64(vmlaq_n_f64(v248, v260, (*result)[25].f64[1]), v261, *(float64x2_t *)((char *)*result + 408), 1);
            _Q17.i64[0] = *(_QWORD *)&(*result)[26].f64[0];
            __asm { FMLA            D18, D17, V6.D[1] }
            v266 = vmlaq_laneq_f64(vmlaq_n_f64(v249, v260, (*result)[33].f64[0]), v261, (*result)[33], 1);
            _Q17.i64[0] = *(_QWORD *)&(*result)[33].f64[1];
            __asm { FMLA            D22, D17, V6.D[1] }
            v267 = vmlaq_laneq_f64(vmlaq_n_f64(v250, v260, (*result)[40].f64[1]), v261, *(float64x2_t *)((char *)*result + 648), 1);
            _Q17.i64[0] = *(_QWORD *)&(*result)[41].f64[0];
            __asm { FMLA            D24, D17, V6.D[1] }
            v268 = vmlaq_laneq_f64(vmlaq_n_f64(v251, v260, (*result)[48].f64[0]), v261, (*result)[48], 1);
            _Q17.i64[0] = *(_QWORD *)&(*result)[48].f64[1];
            __asm { FMLA            D26, D17, V6.D[1] }
            v269 = vmlaq_laneq_f64(vmlaq_n_f64(v252, v260, (*result)[55].f64[1]), v261, *(float64x2_t *)((char *)*result + 888), 1);
            _Q17.i64[0] = *(_QWORD *)&(*result)[56].f64[0];
            __asm { FMLA            D29, D17, V6.D[1] }
            _Q17 = (*result)[63];
            v272 = vmlaq_n_f64(v257, v260, _Q17.f64[0]);
            _Q28 = *(int64x2_t *)(v191 + 64);
            v274 = vmlaq_laneq_f64(v272, v261, _Q17, 1);
            v275 = *(int64x2_t *)(v191 + 184);
            _Q17.f64[0] = (*result)[63].f64[1];
            __asm { FMLA            D20, D17, V6.D[1] }
            _Q6 = *(_OWORD *)(v191 + 304);
            v277 = (float64x2_t)vzip1q_s64(_Q28, v275);
            v278 = (float64x2_t)vzip2q_s64(_Q28, v275);
            v279 = vmlaq_laneq_f64(vmlaq_n_f64(v262, v277, (*result)[4].f64[0]), v278, (*result)[4], 1);
            _Q28.i64[0] = *(_QWORD *)&(*result)[4].f64[1];
            __asm { FMLA            D1, D28, V6.D[1] }
            v280 = vmlaq_laneq_f64(vmlaq_n_f64(v263, v277, (*result)[11].f64[1]), v278, *(float64x2_t *)((char *)*result + 184), 1);
            _Q28.i64[0] = *(_QWORD *)&(*result)[12].f64[0];
            __asm { FMLA            D3, D28, V6.D[1] }
            v281 = vmlaq_laneq_f64(vmlaq_n_f64(v264, v277, (*result)[19].f64[0]), v278, (*result)[19], 1);
            _Q28.i64[0] = *(_QWORD *)&(*result)[19].f64[1];
            __asm { FMLA            D5, D28, V6.D[1] }
            v282 = vmlaq_laneq_f64(vmlaq_n_f64(v265, v277, (*result)[26].f64[1]), v278, *(float64x2_t *)((char *)*result + 424), 1);
            _Q28.i64[0] = *(_QWORD *)&(*result)[27].f64[0];
            __asm { FMLA            D18, D28, V6.D[1] }
            v283 = vmlaq_laneq_f64(vmlaq_n_f64(v266, v277, (*result)[34].f64[0]), v278, (*result)[34], 1);
            _Q28.i64[0] = *(_QWORD *)&(*result)[34].f64[1];
            __asm { FMLA            D22, D28, V6.D[1] }
            v284 = vmlaq_laneq_f64(vmlaq_n_f64(v267, v277, (*result)[41].f64[1]), v278, *(float64x2_t *)((char *)*result + 664), 1);
            _Q28.i64[0] = *(_QWORD *)&(*result)[42].f64[0];
            __asm { FMLA            D24, D28, V6.D[1] }
            v285 = vmlaq_laneq_f64(vmlaq_n_f64(v268, v277, (*result)[49].f64[0]), v278, (*result)[49], 1);
            _Q28.i64[0] = *(_QWORD *)&(*result)[49].f64[1];
            __asm { FMLA            D26, D28, V6.D[1] }
            v286 = vmlaq_laneq_f64(vmlaq_n_f64(v269, v277, (*result)[56].f64[1]), v278, *(float64x2_t *)((char *)*result + 904), 1);
            _Q28.i64[0] = *(_QWORD *)&(*result)[57].f64[0];
            __asm { FMLA            D29, D28, V6.D[1] }
            _Q28 = (*result)[64];
            v289 = vmlaq_n_f64(v274, v277, _Q28.f64[0]);
            _Q17 = *(int64x2_t *)(v191 + 80);
            v291 = vmlaq_laneq_f64(v289, v278, _Q28, 1);
            _Q16 = *(_OWORD *)(v191 + 320);
            _Q28.f64[0] = (*result)[64].f64[1];
            __asm { FMLA            D20, D28, V6.D[1] }
            v293 = *(int64x2_t *)(v191 + 200);
            v294 = (float64x2_t)vzip1q_s64(_Q17, v293);
            v295 = (float64x2_t)vzip2q_s64(_Q17, v293);
            v296 = vmlaq_laneq_f64(vmlaq_n_f64(v279, v294, (*result)[5].f64[0]), v295, (*result)[5], 1);
            _Q17.i64[0] = *(_QWORD *)&(*result)[5].f64[1];
            __asm { FMLA            D1, D17, V16.D[1] }
            v297 = vmlaq_laneq_f64(vmlaq_n_f64(v280, v294, (*result)[12].f64[1]), v295, *(float64x2_t *)((char *)*result + 200), 1);
            _Q17.i64[0] = *(_QWORD *)&(*result)[13].f64[0];
            __asm { FMLA            D3, D17, V16.D[1] }
            v298 = vmlaq_laneq_f64(vmlaq_n_f64(v281, v294, (*result)[20].f64[0]), v295, (*result)[20], 1);
            _Q17.i64[0] = *(_QWORD *)&(*result)[20].f64[1];
            __asm { FMLA            D5, D17, V16.D[1] }
            v299 = vmlaq_laneq_f64(vmlaq_n_f64(v282, v294, (*result)[27].f64[1]), v295, *(float64x2_t *)((char *)*result + 440), 1);
            _Q17.i64[0] = *(_QWORD *)&(*result)[28].f64[0];
            __asm { FMLA            D18, D17, V16.D[1] }
            v300 = vmlaq_laneq_f64(vmlaq_n_f64(v283, v294, (*result)[35].f64[0]), v295, (*result)[35], 1);
            _Q17.i64[0] = *(_QWORD *)&(*result)[35].f64[1];
            __asm { FMLA            D22, D17, V16.D[1] }
            v301 = vmlaq_laneq_f64(vmlaq_n_f64(v284, v294, (*result)[42].f64[1]), v295, *(float64x2_t *)((char *)*result + 680), 1);
            _Q17.i64[0] = *(_QWORD *)&(*result)[43].f64[0];
            __asm { FMLA            D24, D17, V16.D[1] }
            v302 = vmlaq_laneq_f64(vmlaq_n_f64(v285, v294, (*result)[50].f64[0]), v295, (*result)[50], 1);
            _Q17.i64[0] = *(_QWORD *)&(*result)[50].f64[1];
            __asm { FMLA            D26, D17, V16.D[1] }
            v303 = vmlaq_laneq_f64(vmlaq_n_f64(v286, v294, (*result)[57].f64[1]), v295, *(float64x2_t *)((char *)*result + 920), 1);
            _Q17.i64[0] = *(_QWORD *)&(*result)[58].f64[0];
            __asm { FMLA            D29, D17, V16.D[1] }
            _Q17 = (*result)[65];
            v306 = vmlaq_n_f64(v291, v294, _Q17.f64[0]);
            _Q28 = *(int64x2_t *)(v191 + 96);
            v308 = vmlaq_laneq_f64(v306, v295, _Q17, 1);
            v309 = *(int64x2_t *)(v191 + 216);
            _Q17.f64[0] = (*result)[65].f64[1];
            __asm { FMLA            D20, D17, V16.D[1] }
            _Q16 = *(float64x2_t *)(v191 + 336);
            _Q17 = (float64x2_t)vzip1q_s64(_Q28, v309);
            v312 = (float64x2_t)vzip2q_s64(_Q28, v309);
            v313 = vmlaq_laneq_f64(vmlaq_n_f64(v296, _Q17, (*result)[6].f64[0]), v312, (*result)[6], 1);
            _Q28.i64[0] = *(_QWORD *)&(*result)[6].f64[1];
            __asm { FMLA            D1, D28, V16.D[1] }
            v314 = vmlaq_laneq_f64(vmlaq_n_f64(v297, _Q17, (*result)[13].f64[1]), v312, *(float64x2_t *)((char *)*result + 216), 1);
            _Q28.i64[0] = *(_QWORD *)&(*result)[14].f64[0];
            __asm { FMLA            D3, D28, V16.D[1] }
            v315 = vmlaq_laneq_f64(vmlaq_n_f64(v298, _Q17, (*result)[21].f64[0]), v312, (*result)[21], 1);
            _Q28.i64[0] = *(_QWORD *)&(*result)[21].f64[1];
            __asm { FMLA            D5, D28, V16.D[1] }
            v316 = vmlaq_laneq_f64(vmlaq_n_f64(v299, _Q17, (*result)[28].f64[1]), v312, *(float64x2_t *)((char *)*result + 456), 1);
            _Q28.i64[0] = *(_QWORD *)&(*result)[29].f64[0];
            __asm { FMLA            D18, D28, V16.D[1] }
            v317 = vmlaq_laneq_f64(vmlaq_n_f64(v300, _Q17, (*result)[36].f64[0]), v312, (*result)[36], 1);
            _Q28.i64[0] = *(_QWORD *)&(*result)[36].f64[1];
            __asm { FMLA            D22, D28, V16.D[1] }
            v318 = vmlaq_laneq_f64(vmlaq_n_f64(v301, _Q17, (*result)[43].f64[1]), v312, *(float64x2_t *)((char *)*result + 696), 1);
            _Q28.i64[0] = *(_QWORD *)&(*result)[44].f64[0];
            __asm { FMLA            D24, D28, V16.D[1] }
            v319 = vmlaq_laneq_f64(vmlaq_n_f64(v302, _Q17, (*result)[51].f64[0]), v312, (*result)[51], 1);
            _Q28.i64[0] = *(_QWORD *)&(*result)[51].f64[1];
            __asm { FMLA            D26, D28, V16.D[1] }
            v320 = vmlaq_laneq_f64(vmlaq_n_f64(v303, _Q17, (*result)[58].f64[1]), v312, *(float64x2_t *)((char *)*result + 936), 1);
            _Q28.i64[0] = *(_QWORD *)&(*result)[59].f64[0];
            __asm { FMLA            D29, D28, V16.D[1] }
            v322 = vmlaq_laneq_f64(vmlaq_n_f64(v308, _Q17, (*result)[66].f64[0]), v312, (*result)[66], 1);
            v312.f64[0] = *(float64_t *)(v191 + 112);
            _Q17.f64[0] = (*result)[66].f64[1];
            __asm { FMLA            D20, D17, V16.D[1] }
            _Q16.f64[0] = *(float64_t *)(v191 + 352);
            _Q17.f64[0] = (*result)[7].f64[0];
            v312.f64[1] = *(float64_t *)(v191 + 232);
            v323 = vmlaq_n_f64(v313, v312, _Q17.f64[0]);
            _Q1.f64[0] = _Q1.f64[0] + _Q16.f64[0] * _Q17.f64[0];
            _Q17.f64[0] = (*result)[14].f64[1];
            v324 = vmlaq_n_f64(v314, v312, _Q17.f64[0]);
            _Q3.f64[0] = _Q3.f64[0] + _Q16.f64[0] * _Q17.f64[0];
            _Q17.f64[0] = (*result)[22].f64[0];
            v325 = vmlaq_n_f64(v315, v312, _Q17.f64[0]);
            _Q5.f64[0] = _Q5.f64[0] + _Q16.f64[0] * _Q17.f64[0];
            _Q17.f64[0] = (*result)[29].f64[1];
            v326 = vmlaq_n_f64(v316, v312, _Q17.f64[0]);
            _Q17.f64[0] = _Q18.f64[0] + _Q16.f64[0] * _Q17.f64[0];
            _Q18.f64[0] = (*result)[37].f64[0];
            v327 = vmlaq_n_f64(v317, v312, _Q18.f64[0]);
            _Q18.f64[0] = _Q22.f64[0] + _Q16.f64[0] * _Q18.f64[0];
            _Q22.f64[0] = (*result)[44].f64[1];
            v328 = vmlaq_n_f64(v318, v312, _Q22.f64[0]);
            _Q22.f64[0] = _Q24.f64[0] + _Q16.f64[0] * _Q22.f64[0];
            _Q24.f64[0] = (*result)[52].f64[0];
            v329 = vmlaq_n_f64(v319, v312, _Q24.f64[0]);
            _Q24.f64[0] = _Q26.f64[0] + _Q16.f64[0] * _Q24.f64[0];
            _Q26.f64[0] = (*result)[59].f64[1];
            v330 = vmlaq_n_f64(v320, v312, _Q26.f64[0]);
            _Q26.f64[0] = _D29 + _Q16.f64[0] * _Q26.f64[0];
            _Q28.i64[0] = *(_QWORD *)&(*result)[67].f64[0];
            v331 = vmlaq_n_f64(v322, v312, *(double *)_Q28.i64);
            v312.f64[0] = _Q20.f64[0] + _Q16.f64[0] * *(double *)_Q28.i64;
            v332 = v55 + 8 * v188 + 1568 * v344;
            _Q16.f64[0] = *(float64_t *)(v332 + 16);
            *(_QWORD *)&_Q1.f64[0] = *(_OWORD *)&vaddq_f64(_Q16, _Q1);
            v333 = *(float64x2_t *)v332;
            v333.f64[0] = *(float64_t *)(v332 + 1584);
            *(_QWORD *)&_Q3.f64[0] = *(_OWORD *)&vaddq_f64(v333, _Q3);
            v334 = *(float64x2_t *)(v332 + 1568);
            v335 = vaddq_f64(v334, v324);
            v334.f64[0] = *(float64_t *)(v332 + 3152);
            *(_QWORD *)&_Q5.f64[0] = *(_OWORD *)&vaddq_f64(v334, _Q5);
            v336 = *(float64x2_t *)(v332 + 3136);
            v337 = vaddq_f64(v336, v325);
            v336.f64[0] = *(float64_t *)(v332 + 4720);
            *(_QWORD *)&v336.f64[0] = *(_OWORD *)&vaddq_f64(v336, _Q17);
            v338 = *(float64x2_t *)(v332 + 4704);
            v339 = vaddq_f64(v338, v326);
            v338.f64[0] = *(float64_t *)(v332 + 6288);
            *(_QWORD *)&v338.f64[0] = *(_OWORD *)&vaddq_f64(v338, _Q18);
            v340 = vaddq_f64(*(float64x2_t *)(v332 + 6272), v327);
            v327.f64[0] = *(float64_t *)(v332 + 7856);
            *(_QWORD *)&v327.f64[0] = *(_OWORD *)&vaddq_f64(v327, _Q22);
            v341 = vaddq_f64(*(float64x2_t *)(v332 + 7840), v328);
            _Q22.f64[0] = *(float64_t *)(v332 + 9424);
            *(_QWORD *)&_Q22.f64[0] = *(_OWORD *)&vaddq_f64(_Q22, _Q24);
            v342 = vaddq_f64(*(float64x2_t *)(v332 + 9408), v329);
            _Q24.f64[0] = *(float64_t *)(v332 + 10992);
            *(_QWORD *)&_Q24.f64[0] = *(_OWORD *)&vaddq_f64(_Q24, _Q26);
            v343 = vaddq_f64(*(float64x2_t *)(v332 + 10976), v330);
            _Q26.f64[0] = *(float64_t *)(v332 + 12560);
            *(float64x2_t *)v332 = vaddq_f64(*(float64x2_t *)v332, v323);
            *(float64_t *)(v332 + 16) = _Q1.f64[0];
            *(float64x2_t *)(v332 + 1568) = v335;
            *(float64_t *)(v332 + 1584) = _Q3.f64[0];
            *(float64x2_t *)(v332 + 3136) = v337;
            *(float64_t *)(v332 + 3152) = _Q5.f64[0];
            *(float64x2_t *)(v332 + 4704) = v339;
            *(float64_t *)(v332 + 4720) = v336.f64[0];
            *(float64x2_t *)(v332 + 6272) = v340;
            *(float64_t *)(v332 + 6288) = v338.f64[0];
            *(float64x2_t *)(v332 + 7840) = v341;
            *(float64_t *)(v332 + 7856) = v327.f64[0];
            *(float64x2_t *)(v332 + 9408) = v342;
            *(float64_t *)(v332 + 9424) = _Q22.f64[0];
            *(float64x2_t *)(v332 + 10976) = v343;
            *(float64_t *)(v332 + 10992) = _Q24.f64[0];
            _Q0 = vaddq_f64(*(float64x2_t *)(v332 + 12544), v331);
            *(float64x2_t *)(v332 + 12544) = _Q0;
            *(_QWORD *)(v332 + 12560) = *(_OWORD *)&vaddq_f64(_Q26, v312);
            ++result;
            if (!--v190)
              goto LABEL_31;
          }
          v346 = *(&STACK[0x18418] + j);
          v347 = *(int64x2_t *)*result;
          v348 = *(int64x2_t *)((char *)&(*result)[7] + 8);
          v349 = (float64x2_t)vzip1q_s64(v347, v348);
          v350 = (float64x2_t)vzip2q_s64(v347, v348);
          v351 = vmlaq_laneq_f64(vmulq_n_f64(v349, *(double *)v346), v350, *(float64x2_t *)v346, 1);
          v352 = (int64x2_t *)&(*result)[22].f64[1];
          v353 = (int64x2_t)(*result)[15];
          v354 = (int64x2_t)(*result)[16];
          v355 = *(int64x2_t *)((char *)&(*result)[23] + 8);
          v356 = (float64x2_t)vzip1q_s64(v353, *v352);
          v357 = (float64x2_t)vzip2q_s64(v353, *v352);
          v358 = vmlaq_laneq_f64(vmulq_n_f64(v356, *(double *)v346), v357, *(float64x2_t *)v346, 1);
          v359 = (int64x2_t)(*result)[30];
          v360 = (int64x2_t)(*result)[31];
          v361 = *(int64x2_t *)((char *)&(*result)[37] + 8);
          v362 = *(int64x2_t *)((char *)&(*result)[38] + 8);
          _Q28 = (float64x2_t)vzip1q_s64(v359, v361);
          v364 = (float64x2_t)vzip2q_s64(v359, v361);
          v365 = vmlaq_laneq_f64(vmulq_n_f64(_Q28, *(double *)v346), v364, *(float64x2_t *)v346, 1);
          v366 = (int64x2_t)(*result)[45];
          v367 = (int64x2_t)(*result)[46];
          v368 = (int64x2_t *)&(*result)[52].f64[1];
          v369 = *(int64x2_t *)((char *)&(*result)[53] + 8);
          _Q31 = (float64x2_t)vzip1q_s64(v366, *v368);
          v371 = (float64x2_t)vzip2q_s64(v366, *v368);
          v372 = vmlaq_laneq_f64(vmulq_n_f64(_Q31, *(double *)v346), v371, *(float64x2_t *)v346, 1);
          _Q25 = (*result)[60];
          _Q4 = vmulq_f64(_Q25, *(float64x2_t *)v346);
          _D7 = *(_QWORD *)(v346 + 8);
          __asm { FMLA            D4, D7, V25.D[1] }
          _Q9 = *(float64x2_t *)(v346 + 120);
          v377 = vmlaq_laneq_f64(vmulq_n_f64(v349, _Q9.f64[0]), v350, _Q9, 1);
          v378 = vmlaq_laneq_f64(vmulq_n_f64(v356, _Q9.f64[0]), v357, _Q9, 1);
          v379 = vmlaq_laneq_f64(vmulq_n_f64(_Q28, _Q9.f64[0]), v364, _Q9, 1);
          v380 = vmlaq_laneq_f64(vmulq_n_f64(_Q31, _Q9.f64[0]), v371, _Q9, 1);
          _Q9.f64[0] = *(float64_t *)(v346 + 128);
          __asm { FMLA            D30, D9, V25.D[1] }
          v382 = *(float64x2_t *)(v346 + 240);
          v383 = vmlaq_laneq_f64(vmulq_n_f64(v349, v382.f64[0]), v350, v382, 1);
          v384 = vmlaq_laneq_f64(vmulq_n_f64(v356, v382.f64[0]), v357, v382, 1);
          v385 = (int64x2_t)(*result)[1];
          v386 = vmlaq_laneq_f64(vmulq_n_f64(_Q28, v382.f64[0]), v364, v382, 1);
          _Q29 = (*result)[61];
          v388 = vmlaq_laneq_f64(vmulq_n_f64(_Q31, v382.f64[0]), v371, v382, 1);
          _Q31.f64[0] = *(float64_t *)(v346 + 248);
          __asm { FMLA            D28, D31, V25.D[1] }
          v389 = *(int64x2_t *)((char *)&(*result)[8] + 8);
          v390 = (float64x2_t)vzip1q_s64(v354, v355);
          v391 = (float64x2_t)vzip2q_s64(v354, v355);
          v392 = (float64x2_t)vzip1q_s64(v360, v362);
          v393 = (float64x2_t)vzip2q_s64(v360, v362);
          v394 = (float64x2_t)vzip1q_s64(v367, v369);
          v395 = (float64x2_t)vzip2q_s64(v367, v369);
          v396 = (float64x2_t)vzip1q_s64(v385, v389);
          v397 = (float64x2_t)vzip2q_s64(v385, v389);
          _Q8 = *(float64x2_t *)(v346 + 16);
          v399 = vmlaq_laneq_f64(vmlaq_n_f64(v351, v396, _Q8.f64[0]), v397, _Q8, 1);
          v400 = vmlaq_laneq_f64(vmlaq_n_f64(v358, v390, _Q8.f64[0]), v391, _Q8, 1);
          v401 = vmlaq_laneq_f64(vmlaq_n_f64(v365, v392, _Q8.f64[0]), v393, _Q8, 1);
          v402 = vmlaq_laneq_f64(vmlaq_n_f64(v372, v394, _Q8.f64[0]), v395, _Q8, 1);
          _Q8.f64[0] = *(float64_t *)(v346 + 24);
          __asm { FMLA            D4, D8, V29.D[1] }
          _Q8 = *(float64x2_t *)(v346 + 136);
          v404 = vmlaq_laneq_f64(vmlaq_n_f64(v377, v396, _Q8.f64[0]), v397, _Q8, 1);
          v405 = vmlaq_laneq_f64(vmlaq_n_f64(v378, v390, _Q8.f64[0]), v391, _Q8, 1);
          v406 = vmlaq_laneq_f64(vmlaq_n_f64(v379, v392, _Q8.f64[0]), v393, _Q8, 1);
          v407 = vmlaq_laneq_f64(vmlaq_n_f64(v380, v394, _Q8.f64[0]), v395, _Q8, 1);
          _Q8.f64[0] = *(float64_t *)(v346 + 144);
          __asm { FMLA            D30, D8, V29.D[1] }
          _Q8 = *(float64x2_t *)(v346 + 256);
          v410 = vmlaq_n_f64(v383, v396, _Q8.f64[0]);
          v411 = (int64x2_t)(*result)[2];
          v412 = vmlaq_laneq_f64(v410, v397, _Q8, 1);
          v413 = *(int64x2_t *)((char *)&(*result)[9] + 8);
          v414 = vmlaq_n_f64(v384, v390, _Q8.f64[0]);
          v415 = (int64x2_t)(*result)[17];
          v416 = vmlaq_laneq_f64(v414, v391, _Q8, 1);
          v417 = *(int64x2_t *)((char *)&(*result)[24] + 8);
          v418 = vmlaq_n_f64(v386, v392, _Q8.f64[0]);
          v419 = (int64x2_t)(*result)[32];
          v420 = vmlaq_laneq_f64(v418, v393, _Q8, 1);
          v421 = *(int64x2_t *)((char *)&(*result)[39] + 8);
          v422 = vmlaq_n_f64(v388, v394, _Q8.f64[0]);
          v423 = (int64x2_t)(*result)[47];
          v424 = vmlaq_laneq_f64(v422, v395, _Q8, 1);
          v425 = *(int64x2_t *)((char *)&(*result)[54] + 8);
          _Q8.f64[0] = *(float64_t *)(v346 + 264);
          __asm { FMLA            D28, D8, V29.D[1] }
          _Q29 = (*result)[62];
          v427 = (float64x2_t)vzip1q_s64(v415, v417);
          v428 = (float64x2_t)vzip2q_s64(v415, v417);
          v429 = (float64x2_t)vzip1q_s64(v419, v421);
          v430 = (float64x2_t)vzip2q_s64(v419, v421);
          v431 = (float64x2_t)vzip1q_s64(v423, v425);
          v432 = (float64x2_t)vzip2q_s64(v423, v425);
          v433 = (float64x2_t)vzip1q_s64(v411, v413);
          v434 = (float64x2_t)vzip2q_s64(v411, v413);
          _Q25 = *(float64x2_t *)(v346 + 32);
          v436 = vmlaq_laneq_f64(vmlaq_n_f64(v399, v433, _Q25.f64[0]), v434, _Q25, 1);
          v437 = vmlaq_laneq_f64(vmlaq_n_f64(v400, v427, _Q25.f64[0]), v428, _Q25, 1);
          v438 = vmlaq_laneq_f64(vmlaq_n_f64(v401, v429, _Q25.f64[0]), v430, _Q25, 1);
          v439 = vmlaq_laneq_f64(vmlaq_n_f64(v402, v431, _Q25.f64[0]), v432, _Q25, 1);
          _Q25.f64[0] = *(float64_t *)(v346 + 40);
          __asm { FMLA            D4, D25, V29.D[1] }
          _Q25 = *(float64x2_t *)(v346 + 152);
          v441 = vmlaq_laneq_f64(vmlaq_n_f64(v404, v433, _Q25.f64[0]), v434, _Q25, 1);
          v442 = vmlaq_laneq_f64(vmlaq_n_f64(v405, v427, _Q25.f64[0]), v428, _Q25, 1);
          v443 = vmlaq_laneq_f64(vmlaq_n_f64(v406, v429, _Q25.f64[0]), v430, _Q25, 1);
          v444 = vmlaq_laneq_f64(vmlaq_n_f64(v407, v431, _Q25.f64[0]), v432, _Q25, 1);
          _Q25.f64[0] = *(float64_t *)(v346 + 160);
          __asm { FMLA            D30, D25, V29.D[1] }
          _Q25 = *(float64x2_t *)(v346 + 272);
          v447 = vmlaq_n_f64(v412, v433, _Q25.f64[0]);
          v448 = (int64x2_t)(*result)[3];
          v449 = vmlaq_laneq_f64(v447, v434, _Q25, 1);
          v450 = (int64x2_t)(*result)[18];
          v451 = vmlaq_n_f64(v416, v427, _Q25.f64[0]);
          v452 = *(int64x2_t *)((char *)&(*result)[25] + 8);
          v453 = vmlaq_laneq_f64(v451, v428, _Q25, 1);
          v454 = (int64x2_t)(*result)[33];
          v455 = vmlaq_n_f64(v420, v429, _Q25.f64[0]);
          v456 = *(int64x2_t *)((char *)&(*result)[40] + 8);
          v457 = vmlaq_laneq_f64(v455, v430, _Q25, 1);
          v458 = (int64x2_t)(*result)[48];
          v459 = vmlaq_n_f64(v424, v431, _Q25.f64[0]);
          v460 = *(int64x2_t *)((char *)&(*result)[55] + 8);
          v461 = vmlaq_laneq_f64(v459, v432, _Q25, 1);
          _Q18 = (*result)[63];
          _Q25.f64[0] = *(float64_t *)(v346 + 280);
          __asm { FMLA            D28, D25, V29.D[1] }
          v463 = *(int64x2_t *)((char *)&(*result)[10] + 8);
          v464 = (float64x2_t)vzip1q_s64(v450, v452);
          v465 = (float64x2_t)vzip2q_s64(v450, v452);
          v466 = (float64x2_t)vzip1q_s64(v454, v456);
          v467 = (float64x2_t)vzip2q_s64(v454, v456);
          v468 = (float64x2_t)vzip1q_s64(v458, v460);
          v469 = (float64x2_t)vzip2q_s64(v458, v460);
          v470 = (float64x2_t)vzip1q_s64(v448, v463);
          v471 = (float64x2_t)vzip2q_s64(v448, v463);
          _Q25 = *(float64x2_t *)(v346 + 48);
          v473 = vmlaq_laneq_f64(vmlaq_n_f64(v436, v470, _Q25.f64[0]), v471, _Q25, 1);
          v474 = vmlaq_laneq_f64(vmlaq_n_f64(v437, v464, _Q25.f64[0]), v465, _Q25, 1);
          v475 = vmlaq_laneq_f64(vmlaq_n_f64(v438, v466, _Q25.f64[0]), v467, _Q25, 1);
          v476 = vmlaq_laneq_f64(vmlaq_n_f64(v439, v468, _Q25.f64[0]), v469, _Q25, 1);
          _Q25.f64[0] = *(float64_t *)(v346 + 56);
          __asm { FMLA            D4, D25, V18.D[1] }
          _Q25 = *(float64x2_t *)(v346 + 168);
          v478 = vmlaq_laneq_f64(vmlaq_n_f64(v441, v470, _Q25.f64[0]), v471, _Q25, 1);
          v479 = vmlaq_laneq_f64(vmlaq_n_f64(v442, v464, _Q25.f64[0]), v465, _Q25, 1);
          v480 = vmlaq_laneq_f64(vmlaq_n_f64(v443, v466, _Q25.f64[0]), v467, _Q25, 1);
          v481 = vmlaq_laneq_f64(vmlaq_n_f64(v444, v468, _Q25.f64[0]), v469, _Q25, 1);
          _Q25.f64[0] = *(float64_t *)(v346 + 176);
          __asm { FMLA            D30, D25, V18.D[1] }
          _Q25 = *(float64x2_t *)(v346 + 288);
          v484 = vmlaq_n_f64(v449, v470, _Q25.f64[0]);
          v485 = (int64x2_t)(*result)[4];
          v486 = vmlaq_laneq_f64(v484, v471, _Q25, 1);
          v487 = *(int64x2_t *)((char *)&(*result)[11] + 8);
          v488 = vmlaq_n_f64(v453, v464, _Q25.f64[0]);
          v489 = (int64x2_t)(*result)[19];
          v490 = vmlaq_laneq_f64(v488, v465, _Q25, 1);
          v491 = *(int64x2_t *)((char *)&(*result)[26] + 8);
          v492 = vmlaq_n_f64(v457, v466, _Q25.f64[0]);
          v493 = (int64x2_t)(*result)[34];
          v494 = vmlaq_laneq_f64(v492, v467, _Q25, 1);
          v495 = *(int64x2_t *)((char *)&(*result)[41] + 8);
          v496 = vmlaq_n_f64(v461, v468, _Q25.f64[0]);
          v497 = (int64x2_t)(*result)[49];
          v498 = vmlaq_laneq_f64(v496, v469, _Q25, 1);
          v499 = *(int64x2_t *)((char *)&(*result)[56] + 8);
          _Q25.f64[0] = *(float64_t *)(v346 + 296);
          __asm { FMLA            D28, D25, V18.D[1] }
          _Q18 = (*result)[64];
          v501 = (float64x2_t)vzip1q_s64(v485, v487);
          v502 = (float64x2_t)vzip2q_s64(v485, v487);
          v503 = (float64x2_t)vzip1q_s64(v489, v491);
          v504 = (float64x2_t)vzip2q_s64(v489, v491);
          v505 = (float64x2_t)vzip1q_s64(v493, v495);
          v506 = (float64x2_t)vzip2q_s64(v493, v495);
          v507 = (float64x2_t)vzip1q_s64(v497, v499);
          v508 = (float64x2_t)vzip2q_s64(v497, v499);
          _Q31 = *(float64x2_t *)(v346 + 64);
          v510 = vmlaq_laneq_f64(vmlaq_n_f64(v473, v501, _Q31.f64[0]), v502, _Q31, 1);
          v511 = vmlaq_laneq_f64(vmlaq_n_f64(v474, v503, _Q31.f64[0]), v504, _Q31, 1);
          v512 = vmlaq_laneq_f64(vmlaq_n_f64(v475, v505, _Q31.f64[0]), v506, _Q31, 1);
          v513 = vmlaq_laneq_f64(vmlaq_n_f64(v476, v507, _Q31.f64[0]), v508, _Q31, 1);
          _Q31.f64[0] = *(float64_t *)(v346 + 72);
          __asm { FMLA            D4, D31, V18.D[1] }
          _Q31 = *(float64x2_t *)(v346 + 184);
          v515 = vmlaq_laneq_f64(vmlaq_n_f64(v478, v501, _Q31.f64[0]), v502, _Q31, 1);
          v516 = vmlaq_laneq_f64(vmlaq_n_f64(v479, v503, _Q31.f64[0]), v504, _Q31, 1);
          v517 = vmlaq_laneq_f64(vmlaq_n_f64(v480, v505, _Q31.f64[0]), v506, _Q31, 1);
          v518 = vmlaq_laneq_f64(vmlaq_n_f64(v481, v507, _Q31.f64[0]), v508, _Q31, 1);
          _Q31.f64[0] = *(float64_t *)(v346 + 192);
          __asm { FMLA            D30, D31, V18.D[1] }
          _Q31 = *(float64x2_t *)(v346 + 304);
          v521 = vmlaq_n_f64(v486, v501, _Q31.f64[0]);
          v522 = (int64x2_t)(*result)[5];
          v523 = vmlaq_laneq_f64(v521, v502, _Q31, 1);
          v524 = (int64x2_t)(*result)[20];
          v525 = vmlaq_n_f64(v490, v503, _Q31.f64[0]);
          v526 = *(int64x2_t *)((char *)&(*result)[27] + 8);
          v527 = vmlaq_laneq_f64(v525, v504, _Q31, 1);
          v528 = (int64x2_t)(*result)[35];
          v529 = vmlaq_n_f64(v494, v505, _Q31.f64[0]);
          v530 = *(int64x2_t *)((char *)&(*result)[42] + 8);
          v531 = vmlaq_laneq_f64(v529, v506, _Q31, 1);
          v532 = (int64x2_t)(*result)[50];
          v533 = vmlaq_n_f64(v498, v507, _Q31.f64[0]);
          v534 = *(int64x2_t *)((char *)&(*result)[57] + 8);
          v535 = vmlaq_laneq_f64(v533, v508, _Q31, 1);
          _Q6 = *(float64x2_t *)(v346 + 80);
          _Q31.f64[0] = *(float64_t *)(v346 + 312);
          __asm { FMLA            D28, D31, V18.D[1] }
          v537 = *(int64x2_t *)((char *)&(*result)[12] + 8);
          v538 = (float64x2_t)vzip1q_s64(v522, v537);
          v539 = (float64x2_t)vzip2q_s64(v522, v537);
          v540 = (float64x2_t)vzip1q_s64(v524, v526);
          v541 = (float64x2_t)vzip2q_s64(v524, v526);
          v542 = (float64x2_t)vzip1q_s64(v528, v530);
          v543 = (float64x2_t)vzip2q_s64(v528, v530);
          v544 = (float64x2_t)vzip1q_s64(v532, v534);
          v545 = (float64x2_t)vzip2q_s64(v532, v534);
          _Q8 = (*result)[65];
          v547 = vmlaq_laneq_f64(vmlaq_n_f64(v510, v538, _Q6.f64[0]), v539, _Q6, 1);
          v548 = vmlaq_laneq_f64(vmlaq_n_f64(v511, v540, _Q6.f64[0]), v541, _Q6, 1);
          v549 = vmlaq_laneq_f64(vmlaq_n_f64(v512, v542, _Q6.f64[0]), v543, _Q6, 1);
          v550 = vmlaq_laneq_f64(vmlaq_n_f64(v513, v544, _Q6.f64[0]), v545, _Q6, 1);
          _Q6.f64[0] = *(float64_t *)(v346 + 88);
          __asm { FMLA            D4, D6, V8.D[1] }
          _Q6 = *(float64x2_t *)(v346 + 200);
          v552 = vmlaq_laneq_f64(vmlaq_n_f64(v515, v538, _Q6.f64[0]), v539, _Q6, 1);
          v553 = vmlaq_laneq_f64(vmlaq_n_f64(v516, v540, _Q6.f64[0]), v541, _Q6, 1);
          v554 = vmlaq_laneq_f64(vmlaq_n_f64(v517, v542, _Q6.f64[0]), v543, _Q6, 1);
          v555 = vmlaq_laneq_f64(vmlaq_n_f64(v518, v544, _Q6.f64[0]), v545, _Q6, 1);
          _Q6.f64[0] = *(float64_t *)(v346 + 208);
          __asm { FMLA            D30, D6, V8.D[1] }
          _Q6 = *(float64x2_t *)(v346 + 320);
          v558 = vmlaq_n_f64(v523, v538, _Q6.f64[0]);
          v559 = (int64x2_t)(*result)[6];
          v560 = vmlaq_laneq_f64(v558, v539, _Q6, 1);
          v561 = *(int64x2_t *)((char *)&(*result)[13] + 8);
          v562 = vmlaq_n_f64(v527, v540, _Q6.f64[0]);
          v563 = (int64x2_t)(*result)[21];
          v564 = vmlaq_laneq_f64(v562, v541, _Q6, 1);
          v565 = *(int64x2_t *)((char *)&(*result)[28] + 8);
          v566 = vmlaq_n_f64(v531, v542, _Q6.f64[0]);
          v567 = (int64x2_t)(*result)[36];
          v568 = vmlaq_laneq_f64(v566, v543, _Q6, 1);
          v569 = *(int64x2_t *)((char *)&(*result)[43] + 8);
          v570 = vmlaq_n_f64(v535, v544, _Q6.f64[0]);
          v571 = (int64x2_t)(*result)[51];
          v572 = vmlaq_laneq_f64(v570, v545, _Q6, 1);
          v573 = *(int64x2_t *)((char *)&(*result)[58] + 8);
          _Q6.f64[0] = *(float64_t *)(v346 + 328);
          __asm { FMLA            D28, D6, V8.D[1] }
          _Q6 = (*result)[66];
          v575 = (float64x2_t)vzip1q_s64(v559, v561);
          v576 = (float64x2_t)vzip2q_s64(v559, v561);
          v577 = (float64x2_t)vzip1q_s64(v563, v565);
          v578 = (float64x2_t)vzip2q_s64(v563, v565);
          v579 = (float64x2_t)vzip1q_s64(v567, v569);
          v580 = (float64x2_t)vzip2q_s64(v567, v569);
          _Q21 = (float64x2_t)vzip1q_s64(v571, v573);
          v582 = (float64x2_t)vzip2q_s64(v571, v573);
          _Q29 = *(float64x2_t *)(v346 + 96);
          v584 = vmlaq_laneq_f64(vmlaq_n_f64(v547, v575, _Q29.f64[0]), v576, _Q29, 1);
          v585 = vmlaq_laneq_f64(vmlaq_n_f64(v548, v577, _Q29.f64[0]), v578, _Q29, 1);
          v586 = vmlaq_laneq_f64(vmlaq_n_f64(v549, v579, _Q29.f64[0]), v580, _Q29, 1);
          v587 = vmlaq_laneq_f64(vmlaq_n_f64(v550, _Q21, _Q29.f64[0]), v582, _Q29, 1);
          _Q29.f64[0] = *(float64_t *)(v346 + 104);
          __asm { FMLA            D4, D29, V6.D[1] }
          _Q29 = *(float64x2_t *)(v346 + 216);
          v589 = vmlaq_laneq_f64(vmlaq_n_f64(v552, v575, _Q29.f64[0]), v576, _Q29, 1);
          v590 = vmlaq_laneq_f64(vmlaq_n_f64(v553, v577, _Q29.f64[0]), v578, _Q29, 1);
          v591 = vmlaq_laneq_f64(vmlaq_n_f64(v554, v579, _Q29.f64[0]), v580, _Q29, 1);
          v592 = vmlaq_laneq_f64(vmlaq_n_f64(v555, _Q21, _Q29.f64[0]), v582, _Q29, 1);
          _Q29.f64[0] = *(float64_t *)(v346 + 224);
          __asm { FMLA            D30, D29, V6.D[1] }
          v594 = *(float64x2_t *)(v346 + 336);
          v595 = vmlaq_laneq_f64(vmlaq_n_f64(v560, v575, v594.f64[0]), v576, v594, 1);
          v596 = vmlaq_laneq_f64(vmlaq_n_f64(v564, v577, v594.f64[0]), v578, v594, 1);
          v578.f64[0] = (*result)[7].f64[0];
          v597 = vmlaq_laneq_f64(vmlaq_n_f64(v568, v579, v594.f64[0]), v580, v594, 1);
          v576.f64[0] = (*result)[22].f64[0];
          v580.f64[0] = (*result)[37].f64[0];
          v598 = vmlaq_laneq_f64(vmlaq_n_f64(v572, _Q21, v594.f64[0]), v582, v594, 1);
          v582.f64[0] = (*result)[52].f64[0];
          _Q21.f64[0] = *(float64_t *)(v346 + 344);
          __asm { FMLA            D28, D21, V6.D[1] }
          _Q6.f64[0] = (*result)[67].f64[0];
          v578.f64[1] = (*result)[14].f64[1];
          v576.f64[1] = (*result)[29].f64[1];
          v580.f64[1] = (*result)[44].f64[1];
          _Q21.f64[0] = *(float64_t *)(v346 + 112);
          v582.f64[1] = (*result)[59].f64[1];
          v599 = vmlaq_n_f64(v584, v578, _Q21.f64[0]);
          v600 = vmlaq_n_f64(v585, v576, _Q21.f64[0]);
          v601 = vmlaq_n_f64(v586, v580, _Q21.f64[0]);
          v602 = vmlaq_n_f64(v587, v582, _Q21.f64[0]);
          _Q4.f64[0] = _Q4.f64[0] + _Q6.f64[0] * _Q21.f64[0];
          _Q21.f64[0] = *(float64_t *)(v346 + 232);
          v603 = vmlaq_n_f64(v589, v578, _Q21.f64[0]);
          v604 = vmlaq_n_f64(v590, v576, _Q21.f64[0]);
          v605 = vmlaq_n_f64(v591, v580, _Q21.f64[0]);
          v606 = vmlaq_n_f64(v592, v582, _Q21.f64[0]);
          _Q21.f64[0] = _D30 + _Q6.f64[0] * _Q21.f64[0];
          v579.f64[0] = *(float64_t *)(v346 + 352);
          v607 = vmlaq_n_f64(v595, v578, v579.f64[0]);
          v608 = vmlaq_n_f64(v596, v576, v579.f64[0]);
          v609 = vmlaq_n_f64(v598, v582, v579.f64[0]);
          v582.f64[0] = _Q28.f64[0] + _Q6.f64[0] * v579.f64[0];
          v610 = v55 + 1568 * v188 + 8 * v344;
          _Q6.f64[0] = *(float64_t *)(v610 + 64);
          *(_QWORD *)&_Q4.f64[0] = *(_OWORD *)&vaddq_f64(_Q6, _Q4);
          v611 = vaddq_f64(*(float64x2_t *)(v610 + 16), v600);
          v612 = vaddq_f64(*(float64x2_t *)(v610 + 48), v602);
          v613 = *(float64x2_t *)v610;
          v614 = vaddq_f64(*(float64x2_t *)v610, v599);
          v613.f64[0] = *(float64_t *)(v610 + 1632);
          *(_QWORD *)&v613.f64[0] = *(_OWORD *)&vaddq_f64(v613, _Q21);
          v615 = vaddq_f64(*(float64x2_t *)(v610 + 1584), v604);
          v616 = vaddq_f64(*(float64x2_t *)(v610 + 1600), v605);
          v617 = vaddq_f64(*(float64x2_t *)(v610 + 1616), v606);
          v618 = *(float64x2_t *)(v610 + 1568);
          v619 = vaddq_f64(v618, v603);
          v618.f64[0] = *(float64_t *)(v610 + 3200);
          *(_QWORD *)&v582.f64[0] = *(_OWORD *)&vaddq_f64(v618, v582);
          v620 = vaddq_f64(*(float64x2_t *)(v610 + 3168), vmlaq_n_f64(v597, v580, v579.f64[0]));
          v621 = vaddq_f64(*(float64x2_t *)(v610 + 3184), v609);
          v622 = vaddq_f64(*(float64x2_t *)(v610 + 3136), v607);
          *(float64x2_t *)(v610 + 32) = vaddq_f64(*(float64x2_t *)(v610 + 32), v601);
          *(float64x2_t *)(v610 + 48) = v612;
          *(float64x2_t *)v610 = v614;
          *(float64x2_t *)(v610 + 16) = v611;
          *(float64_t *)(v610 + 64) = _Q4.f64[0];
          *(float64x2_t *)(v610 + 1568) = v619;
          *(float64x2_t *)(v610 + 1616) = v617;
          *(float64x2_t *)(v610 + 1600) = v616;
          *(float64x2_t *)(v610 + 1584) = v615;
          *(float64_t *)(v610 + 1632) = v613.f64[0];
          *(float64x2_t *)(v610 + 3136) = v622;
          *(float64x2_t *)(v610 + 3184) = v621;
          *(float64x2_t *)(v610 + 3168) = v620;
          _Q0 = vaddq_f64(*(float64x2_t *)(v610 + 3152), v608);
          *(float64x2_t *)(v610 + 3152) = _Q0;
          *(float64_t *)(v610 + 3200) = v582.f64[0];
          ++result;
          --v190;
        }
        while (v190);
LABEL_31:
        ;
      }
    }
    v1479 = v21;
    v623 = (_DWORD)v54 == 0;
    if ((_DWORD)v54)
    {
      for (k = 0; k != v54; ++k)
      {
        v625 = *((unsigned int *)&STACK[0x183E0] + k);
        v626 = *(&STACK[0x183E8] + k);
        v627 = (float64x2_t *)(v626 + 720);
        result = (float64x2_t **)(v626 + 840);
        v628 = (float64x2_t *)(v626 + 960);
        v629 = k;
        do
        {
          v630 = *(&STACK[0x183E8] + v629);
          _Q1 = *(int64x2_t *)v630;
          v632 = *(int64x2_t *)(v630 + 120);
          v633 = *(int64x2_t *)(v630 + 240);
          _Q0 = *(float64x2_t *)v626;
          v635 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v630, v632);
          v636 = vmulq_n_f64(v635, *(double *)v626);
          v637 = *(int64x2_t *)(v630 + 360);
          v1571 = *(int64x2_t *)(v630 + 376);
          v1579 = *(int64x2_t *)(v630 + 256);
          v638 = *(int64x2_t *)(v630 + 480);
          v1536 = *(int64x2_t *)(v630 + 496);
          v639 = (float64x2_t)vzip1q_s64(v633, v637);
          v640 = vmulq_n_f64(v639, *(double *)v626);
          v641 = *(int64x2_t *)(v630 + 600);
          *(_OWORD *)&STACK[0x2C0] = *(_OWORD *)(v630 + 616);
          v642 = (float64x2_t)vzip1q_s64(v638, v641);
          v643 = (float64x2_t)vzip2q_s64(_Q1, v632);
          _Q23 = vmlaq_laneq_f64(v636, v643, _Q0, 1);
          v645 = *(int64x2_t *)(v630 + 720);
          v1593 = *(int64x2_t *)(v630 + 736);
          v646 = (float64x2_t)vzip2q_s64(v633, v637);
          v647 = *(int64x2_t *)(v630 + 840);
          v1511 = vmlaq_laneq_f64(v640, v646, _Q0, 1);
          v1586 = *(int64x2_t *)(v630 + 856);
          v648 = (float64x2_t)vzip1q_s64(v645, v647);
          _Q5 = *(float64x2_t *)(v630 + 960);
          v650 = (float64x2_t)vzip2q_s64(v638, v641);
          v651 = vmlaq_laneq_f64(vmulq_n_f64(v642, _Q0.f64[0]), v650, _Q0, 1);
          _Q1.i64[0] = *(_QWORD *)&_Q0.f64[1];
          __asm { FMLA            D9, D1, V5.D[1] }
          _Q1 = *(float64x2_t *)(v626 + 120);
          v654 = (float64x2_t)vzip2q_s64(v645, v647);
          v655 = vmlaq_laneq_f64(vmulq_n_f64(v648, _Q0.f64[0]), v654, _Q0, 1);
          _Q8 = vmlaq_laneq_f64(vmulq_n_f64(v635, _Q1.f64[0]), v643, _Q1, 1);
          _Q10 = vmlaq_laneq_f64(vmulq_n_f64(v639, _Q1.f64[0]), v646, _Q1, 1);
          v658 = vmlaq_laneq_f64(vmulq_n_f64(v642, _Q1.f64[0]), v650, _Q1, 1);
          _Q0.f64[0] = *(float64_t *)(v626 + 128);
          __asm { FMLA            D11, D0, V5.D[1] }
          v660 = *(float64x2_t *)(v626 + 240);
          _Q12 = vmlaq_laneq_f64(vmulq_n_f64(v648, _Q1.f64[0]), v654, _Q1, 1);
          _Q0 = *(float64x2_t *)(v626 + 360);
          _Q29 = vmlaq_laneq_f64(vmulq_n_f64(v635, v660.f64[0]), v643, v660, 1);
          *(float64x2_t *)&STACK[0x2A0] = vmlaq_laneq_f64(vmulq_n_f64(v639, v660.f64[0]), v646, v660, 1);
          v1489 = vmlaq_laneq_f64(vmulq_n_f64(v642, v660.f64[0]), v650, v660, 1);
          _Q6 = vmulq_f64(_Q5, v660);
          _Q1.f64[0] = v660.f64[1];
          __asm { FMLA            D6, D1, V5.D[1] }
          v1497 = vmlaq_laneq_f64(vmulq_n_f64(v648, v660.f64[0]), v654, v660, 1);
          *(float64x2_t *)&STACK[0x2B0] = vmlaq_laneq_f64(vmulq_n_f64(v635, _Q0.f64[0]), v643, _Q0, 1);
          v665 = vmlaq_laneq_f64(vmulq_n_f64(v639, _Q0.f64[0]), v646, _Q0, 1);
          v1564 = vmlaq_laneq_f64(vmulq_n_f64(v642, _Q0.f64[0]), v650, _Q0, 1);
          v1570 = _Q6.f64[1];
          v666 = vmlaq_laneq_f64(vmulq_n_f64(v648, _Q0.f64[0]), v654, _Q0, 1);
          _Q0.f64[0] = _Q0.f64[1];
          __asm { FMLA            D1, D0, V5.D[1] }
          _Q0 = *(float64x2_t *)(v626 + 480);
          v1558 = vmlaq_laneq_f64(vmulq_n_f64(v635, _Q0.f64[0]), v643, _Q0, 1);
          v1553 = vmlaq_laneq_f64(vmulq_n_f64(v639, _Q0.f64[0]), v646, _Q0, 1);
          v668 = vmlaq_laneq_f64(vmulq_n_f64(v642, _Q0.f64[0]), v650, _Q0, 1);
          v1624 = vmlaq_laneq_f64(vmulq_n_f64(v648, _Q0.f64[0]), v654, _Q0, 1);
          _Q0.f64[0] = *(float64_t *)(v626 + 488);
          __asm { FMLA            D24, D0, V5.D[1] }
          _Q0 = *(float64x2_t *)(v626 + 600);
          v1548 = vmlaq_laneq_f64(vmulq_n_f64(v635, _Q0.f64[0]), v643, _Q0, 1);
          *(float64x2_t *)&STACK[0x310] = vmlaq_laneq_f64(vmulq_n_f64(v639, _Q0.f64[0]), v646, _Q0, 1);
          *(float64x2_t *)&STACK[0x300] = vmlaq_laneq_f64(vmulq_n_f64(v642, _Q0.f64[0]), v650, _Q0, 1);
          v1618 = vmlaq_laneq_f64(vmulq_n_f64(v648, _Q0.f64[0]), v654, _Q0, 1);
          _Q0.f64[0] = _Q0.f64[1];
          __asm { FMLA            D1, D0, V5.D[1] }
          v1543 = vmlaq_laneq_f64(vmulq_n_f64(v635, v627->f64[0]), v643, *v627, 1);
          _Q13 = vmlaq_laneq_f64(vmulq_n_f64(v639, v627->f64[0]), v646, *v627, 1);
          _Q15 = vmlaq_laneq_f64(vmulq_n_f64(v642, v627->f64[0]), v650, *v627, 1);
          v1612 = vmlaq_laneq_f64(vmulq_n_f64(v648, v627->f64[0]), v654, *v627, 1);
          _Q14 = vmulq_f64(_Q5, *v627);
          _Q0.f64[0] = *(float64_t *)(v626 + 728);
          __asm { FMLA            D14, D0, V5.D[1] }
          _Q0 = *(float64x2_t *)result;
          v1606 = vmlaq_laneq_f64(vmulq_n_f64(v635, *(double *)result), v643, *(float64x2_t *)result, 1);
          *(float64x2_t *)&STACK[0x2F0] = vmlaq_laneq_f64(vmulq_n_f64(v639, *(double *)result), v646, *(float64x2_t *)result, 1);
          *(float64x2_t *)&STACK[0x2D0] = vmlaq_laneq_f64(vmulq_n_f64(v642, _Q0.f64[0]), v650, _Q0, 1);
          *(float64x2_t *)&STACK[0x2E0] = vmlaq_laneq_f64(vmulq_n_f64(v648, _Q0.f64[0]), v654, _Q0, 1);
          _Q1 = vmulq_f64(_Q5, _Q0);
          _Q0.f64[0] = _Q0.f64[1];
          __asm { FMLA            D1, D0, V5.D[1] }
          vars0_8 = *(_QWORD *)&_Q1.f64[1];
          v676 = vmlaq_laneq_f64(vmulq_n_f64(v635, v628->f64[0]), v643, *v628, 1);
          v1600 = vmlaq_laneq_f64(vmulq_n_f64(v639, v628->f64[0]), v646, *v628, 1);
          _Q20 = vmlaq_laneq_f64(vmulq_n_f64(v642, v628->f64[0]), v650, *v628, 1);
          v678 = vmlaq_laneq_f64(vmulq_n_f64(v648, v628->f64[0]), v654, *v628, 1);
          _Q19 = vmulq_f64(_Q5, *v628);
          _Q1.f64[0] = *(float64_t *)(v626 + 968);
          __asm { FMLA            D19, D1, V5.D[1] }
          v680 = (float64x2_t)vzip1q_s64(v1579, v1571);
          v681 = (float64x2_t)vzip2q_s64(v1579, v1571);
          v682 = (float64x2_t)vzip1q_s64(v1536, *(int64x2_t *)&STACK[0x2C0]);
          v683 = (float64x2_t)vzip2q_s64(v1536, *(int64x2_t *)&STACK[0x2C0]);
          v684 = (float64x2_t)vzip1q_s64(v1593, v1586);
          v685 = (float64x2_t)vzip2q_s64(v1593, v1586);
          v686 = *(int64x2_t *)(v630 + 16);
          v687 = *(int64x2_t *)(v630 + 136);
          _Q1 = (float64x2_t)vzip1q_s64(v686, v687);
          v689 = (float64x2_t)vzip2q_s64(v686, v687);
          _Q16 = *(float64x2_t *)(v626 + 16);
          v1537 = vmlaq_laneq_f64(vmlaq_n_f64(_Q23, _Q1, _Q16.f64[0]), v689, _Q16, 1);
          v1512 = vmlaq_laneq_f64(vmlaq_n_f64(v1511, v680, _Q16.f64[0]), v681, _Q16, 1);
          _Q28 = vmlaq_laneq_f64(vmlaq_n_f64(v651, v682, _Q16.f64[0]), v683, _Q16, 1);
          v692 = vmlaq_laneq_f64(vmlaq_n_f64(v655, v684, _Q16.f64[0]), v685, _Q16, 1);
          _Q0 = *(_OWORD *)(v630 + 976);
          _Q16.f64[0] = *(float64_t *)(v626 + 24);
          __asm { FMLA            D9, D16, V0.D[1] }
          v1521 = v692;
          _Q16 = *(float64x2_t *)(v626 + 136);
          v1487 = vmlaq_laneq_f64(vmlaq_n_f64(_Q8, _Q1, _Q16.f64[0]), v689, _Q16, 1);
          *(float64x2_t *)&STACK[0x2C0] = vmlaq_laneq_f64(vmlaq_n_f64(_Q10, v680, _Q16.f64[0]), v681, _Q16, 1);
          v1587 = vmlaq_laneq_f64(vmlaq_n_f64(v658, v682, _Q16.f64[0]), v683, _Q16, 1);
          v1594 = _Q28;
          v1531 = vmlaq_laneq_f64(vmlaq_n_f64(_Q12, v684, _Q16.f64[0]), v685, _Q16, 1);
          _Q16.f64[0] = _Q16.f64[1];
          __asm { FMLA            D11, D16, V0.D[1] }
          _Q16 = *(float64x2_t *)(v626 + 256);
          v1572 = vmlaq_laneq_f64(vmlaq_n_f64(_Q29, _Q1, _Q16.f64[0]), v689, _Q16, 1);
          v698 = *(float64x2_t *)&STACK[0x2B0];
          *(float64x2_t *)&STACK[0x2A0] = vmlaq_laneq_f64(vmlaq_n_f64(*(float64x2_t *)&STACK[0x2A0], v680, _Q16.f64[0]), v681, _Q16, 1);
          v1490 = vmlaq_laneq_f64(vmlaq_n_f64(v1489, v682, _Q16.f64[0]), v683, _Q16, 1);
          v1498 = vmlaq_laneq_f64(vmlaq_n_f64(v1497, v684, _Q16.f64[0]), v685, _Q16, 1);
          _Q16.f64[0] = _Q16.f64[1];
          __asm { FMLA            D28, D16, V0.D[1] }
          _Q16 = *(float64x2_t *)(v626 + 376);
          v700 = vmlaq_laneq_f64(vmlaq_n_f64(v698, _Q1, _Q16.f64[0]), v689, _Q16, 1);
          v1526 = vmlaq_laneq_f64(vmlaq_n_f64(v665, v680, _Q16.f64[0]), v681, _Q16, 1);
          _Q30 = vmlaq_laneq_f64(vmlaq_n_f64(v1564, v682, _Q16.f64[0]), v683, _Q16, 1);
          v1503 = vmlaq_laneq_f64(vmlaq_n_f64(v666, v684, _Q16.f64[0]), v685, _Q16, 1);
          _Q16.f64[0] = *(float64_t *)(v626 + 384);
          __asm { FMLA            D29, D16, V0.D[1] }
          _Q16 = *(float64x2_t *)(v626 + 496);
          v703 = vmlaq_laneq_f64(vmlaq_n_f64(v1558, _Q1, _Q16.f64[0]), v689, _Q16, 1);
          v704 = vmlaq_laneq_f64(vmlaq_n_f64(v1553, v680, _Q16.f64[0]), v681, _Q16, 1);
          _Q27 = vmlaq_laneq_f64(vmlaq_n_f64(v668, v682, _Q16.f64[0]), v683, _Q16, 1);
          v1625 = vmlaq_laneq_f64(vmlaq_n_f64(v1624, v684, _Q16.f64[0]), v685, _Q16, 1);
          _Q16.f64[0] = *(float64_t *)(v626 + 504);
          __asm { FMLA            D24, D16, V0.D[1] }
          _Q16 = *(float64x2_t *)(v626 + 616);
          v708 = vmlaq_laneq_f64(vmlaq_n_f64(v1548, _Q1, _Q16.f64[0]), v689, _Q16, 1);
          *(float64x2_t *)&STACK[0x310] = vmlaq_laneq_f64(vmlaq_n_f64(*(float64x2_t *)&STACK[0x310], v680, _Q16.f64[0]), v681, _Q16, 1);
          *(float64x2_t *)&STACK[0x300] = vmlaq_laneq_f64(vmlaq_n_f64(*(float64x2_t *)&STACK[0x300], v682, _Q16.f64[0]), v683, _Q16, 1);
          v1619 = vmlaq_laneq_f64(vmlaq_n_f64(v1618, v684, _Q16.f64[0]), v685, _Q16, 1);
          _Q16.f64[0] = _Q16.f64[1];
          __asm { FMLA            D24, D16, V0.D[1] }
          _Q16 = *(float64x2_t *)(v626 + 736);
          v711 = vmlaq_laneq_f64(vmlaq_n_f64(v1543, _Q1, _Q16.f64[0]), v689, _Q16, 1);
          v1493 = vmlaq_laneq_f64(vmlaq_n_f64(_Q13, v680, _Q16.f64[0]), v681, _Q16, 1);
          v1580 = vmlaq_laneq_f64(vmlaq_n_f64(_Q15, v682, _Q16.f64[0]), v683, _Q16, 1);
          v1613 = vmlaq_laneq_f64(vmlaq_n_f64(v1612, v684, _Q16.f64[0]), v685, _Q16, 1);
          _Q16.f64[0] = *(float64_t *)(v626 + 744);
          __asm { FMLA            D14, D16, V0.D[1] }
          v712 = _Q14.f64[1];
          v713 = *(float64x2_t *)(v626 + 856);
          _Q15.f64[0] = *(float64_t *)(v626 + 864);
          __asm { FMLA            D24, D15, V0.D[1] }
          _Q15 = *(float64x2_t *)(v626 + 976);
          v716 = vmlaq_laneq_f64(vmlaq_n_f64(v1606, _Q1, v713.f64[0]), v689, v713, 1);
          *(float64x2_t *)&STACK[0x2F0] = vmlaq_laneq_f64(vmlaq_n_f64(*(float64x2_t *)&STACK[0x2F0], v680, v713.f64[0]), v681, v713, 1);
          *(float64x2_t *)&STACK[0x2D0] = vmlaq_laneq_f64(vmlaq_n_f64(*(float64x2_t *)&STACK[0x2D0], v682, v713.f64[0]), v683, v713, 1);
          *(float64x2_t *)&STACK[0x2E0] = vmlaq_laneq_f64(vmlaq_n_f64(*(float64x2_t *)&STACK[0x2E0], v684, v713.f64[0]), v685, v713, 1);
          v717 = vmlaq_laneq_f64(vmlaq_n_f64(v676, _Q1, _Q15.f64[0]), v689, _Q15, 1);
          v1601 = vmlaq_laneq_f64(vmlaq_n_f64(v1600, v680, _Q15.f64[0]), v681, _Q15, 1);
          v1515 = vmlaq_laneq_f64(vmlaq_n_f64(_Q20, v682, _Q15.f64[0]), v683, _Q15, 1);
          v1484 = vmlaq_laneq_f64(vmlaq_n_f64(v678, v684, _Q15.f64[0]), v685, _Q15, 1);
          _Q1.f64[0] = _Q15.f64[1];
          __asm { FMLA            D19, D1, V0.D[1] }
          v1492 = _Q19.f64[1];
          _Q0 = *(int64x2_t *)(v630 + 272);
          v719 = *(int64x2_t *)(v630 + 392);
          _Q19 = (float64x2_t)vzip1q_s64(_Q0, v719);
          v721 = (float64x2_t)vzip2q_s64(_Q0, v719);
          v722 = *(int64x2_t *)(v630 + 512);
          v723 = *(int64x2_t *)(v630 + 632);
          v724 = (float64x2_t)vzip1q_s64(v722, v723);
          v725 = (float64x2_t)vzip2q_s64(v722, v723);
          v726 = *(int64x2_t *)(v630 + 752);
          v727 = *(int64x2_t *)(v630 + 872);
          v728 = (float64x2_t)vzip1q_s64(v726, v727);
          v729 = (float64x2_t)vzip2q_s64(v726, v727);
          v730 = *(int64x2_t *)(v630 + 32);
          v731 = *(int64x2_t *)(v630 + 152);
          v732 = (float64x2_t)vzip1q_s64(v730, v731);
          v733 = (float64x2_t)vzip2q_s64(v730, v731);
          _Q7 = *(_OWORD *)(v630 + 992);
          v735 = *(float64x2_t *)(v626 + 32);
          _Q15.f64[0] = *(float64_t *)(v626 + 40);
          __asm { FMLA            D0, D15, V7.D[1] }
          v736 = *(float64x2_t *)(v626 + 152);
          _Q14.f64[0] = *(float64_t *)(v626 + 160);
          __asm { FMLA            D23, D14, V7.D[1] }
          v737 = *(float64x2_t *)(v626 + 272);
          _Q13.f64[0] = *(float64_t *)(v626 + 280);
          __asm { FMLA            D28, D13, V7.D[1] }
          v738 = *(float64x2_t *)(v626 + 392);
          _Q12.f64[0] = *(float64_t *)(v626 + 400);
          __asm { FMLA            D0, D12, V7.D[1] }
          v739 = *(float64x2_t *)(v626 + 512);
          _D11 = *(_QWORD *)(v626 + 520);
          __asm { FMLA            D0, D11, V7.D[1] }
          v741 = *(float64x2_t *)(v626 + 632);
          _Q10.f64[0] = *(float64_t *)(v626 + 640);
          __asm { FMLA            D0, D10, V7.D[1] }
          v742 = *(float64x2_t *)(v626 + 752);
          _D9 = *(_QWORD *)(v626 + 760);
          __asm { FMLA            D0, D9, V7.D[1] }
          v1481 = v712;
          _Q9 = *(float64x2_t *)(v626 + 872);
          _Q0.i64[1] = vars0_8;
          _Q8.f64[0] = *(float64_t *)(v626 + 880);
          __asm { FMLA            D0, D8, V7.D[1] }
          vars0 = _Q0;
          _Q8 = *(float64x2_t *)(v626 + 992);
          v1488 = vmlaq_laneq_f64(vmlaq_n_f64(v1487, v732, v736.f64[0]), v733, v736, 1);
          v1573 = vmlaq_laneq_f64(vmlaq_n_f64(v1572, v732, v737.f64[0]), v733, v737, 1);
          *(float64x2_t *)&STACK[0x2B0] = vmlaq_laneq_f64(vmlaq_n_f64(v700, v732, v738.f64[0]), v733, v738, 1);
          v1559 = vmlaq_laneq_f64(vmlaq_n_f64(v703, v732, v739.f64[0]), v733, v739, 1);
          v1549 = vmlaq_laneq_f64(vmlaq_n_f64(v708, v732, v741.f64[0]), v733, v741, 1);
          v1538 = vmlaq_laneq_f64(vmlaq_n_f64(v1537, v732, v735.f64[0]), v733, v735, 1);
          v1544 = vmlaq_laneq_f64(vmlaq_n_f64(v711, v732, v742.f64[0]), v733, v742, 1);
          v1607 = vmlaq_laneq_f64(vmlaq_n_f64(v716, v732, _Q9.f64[0]), v733, _Q9, 1);
          v1507 = vmlaq_laneq_f64(vmlaq_n_f64(v717, v732, _Q8.f64[0]), v733, _Q8, 1);
          v746 = vmlaq_laneq_f64(vmlaq_n_f64(v1512, _Q19, v735.f64[0]), v721, v735, 1);
          v747 = vmlaq_laneq_f64(vmlaq_n_f64(v1594, v724, v735.f64[0]), v725, v735, 1);
          v748 = vmlaq_laneq_f64(vmlaq_n_f64(v1521, v728, v735.f64[0]), v729, v735, 1);
          *(float64x2_t *)&STACK[0x2C0] = vmlaq_laneq_f64(vmlaq_n_f64(*(float64x2_t *)&STACK[0x2C0], _Q19, v736.f64[0]), v721, v736, 1);
          v1588 = vmlaq_laneq_f64(vmlaq_n_f64(v1587, v724, v736.f64[0]), v725, v736, 1);
          v749 = vmlaq_laneq_f64(vmlaq_n_f64(v1531, v728, v736.f64[0]), v729, v736, 1);
          *(float64x2_t *)&STACK[0x2A0] = vmlaq_laneq_f64(vmlaq_n_f64(*(float64x2_t *)&STACK[0x2A0], _Q19, v737.f64[0]), v721, v737, 1);
          v750 = vmlaq_laneq_f64(vmlaq_n_f64(v1490, v724, v737.f64[0]), v725, v737, 1);
          v751 = vmlaq_laneq_f64(vmlaq_n_f64(v1498, v728, v737.f64[0]), v729, v737, 1);
          v752 = vmlaq_laneq_f64(vmlaq_n_f64(v1526, _Q19, v738.f64[0]), v721, v738, 1);
          v753 = vmlaq_laneq_f64(vmlaq_n_f64(_Q30, v724, v738.f64[0]), v725, v738, 1);
          v1504 = vmlaq_laneq_f64(vmlaq_n_f64(v1503, v728, v738.f64[0]), v729, v738, 1);
          v754 = vmlaq_laneq_f64(vmlaq_n_f64(v704, _Q19, v739.f64[0]), v721, v739, 1);
          _Q26 = vmlaq_laneq_f64(vmlaq_n_f64(_Q27, v724, v739.f64[0]), v725, v739, 1);
          v756 = vmlaq_laneq_f64(vmlaq_n_f64(v1625, v728, v739.f64[0]), v729, v739, 1);
          *(float64x2_t *)&STACK[0x310] = vmlaq_laneq_f64(vmlaq_n_f64(*(float64x2_t *)&STACK[0x310], _Q19, v741.f64[0]), v721, v741, 1);
          *(float64x2_t *)&STACK[0x300] = vmlaq_laneq_f64(vmlaq_n_f64(*(float64x2_t *)&STACK[0x300], v724, v741.f64[0]), v725, v741, 1);
          v757 = vmlaq_laneq_f64(vmlaq_n_f64(v1619, v728, v741.f64[0]), v729, v741, 1);
          v1494 = vmlaq_laneq_f64(vmlaq_n_f64(v1493, _Q19, v742.f64[0]), v721, v742, 1);
          v1581 = vmlaq_laneq_f64(vmlaq_n_f64(v1580, v724, v742.f64[0]), v725, v742, 1);
          _Q10 = vmlaq_laneq_f64(vmlaq_n_f64(v1613, v728, v742.f64[0]), v729, v742, 1);
          *(float64x2_t *)&STACK[0x2F0] = vmlaq_laneq_f64(vmlaq_n_f64(*(float64x2_t *)&STACK[0x2F0], _Q19, _Q9.f64[0]), v721, _Q9, 1);
          *(float64x2_t *)&STACK[0x2D0] = vmlaq_laneq_f64(vmlaq_n_f64(*(float64x2_t *)&STACK[0x2D0], v724, _Q9.f64[0]), v725, _Q9, 1);
          *(float64x2_t *)&STACK[0x2E0] = vmlaq_laneq_f64(vmlaq_n_f64(*(float64x2_t *)&STACK[0x2E0], v728, _Q9.f64[0]), v729, _Q9, 1);
          v1602 = vmlaq_laneq_f64(vmlaq_n_f64(v1601, _Q19, _Q8.f64[0]), v721, _Q8, 1);
          v1516 = vmlaq_laneq_f64(vmlaq_n_f64(v1515, v724, _Q8.f64[0]), v725, _Q8, 1);
          v759 = vmlaq_laneq_f64(vmlaq_n_f64(v1484, v728, _Q8.f64[0]), v729, _Q8, 1);
          _Q0.i64[0] = *(_QWORD *)&_Q8.f64[1];
          __asm { FMLA            D19, D0, V7.D[1] }
          v760 = *(int64x2_t *)(v630 + 288);
          v761 = *(int64x2_t *)(v630 + 408);
          v762 = (float64x2_t)vzip1q_s64(v760, v761);
          _Q0 = (float64x2_t)vzip2q_s64(v760, v761);
          v764 = *(int64x2_t *)(v630 + 528);
          v765 = *(int64x2_t *)(v630 + 648);
          v766 = (float64x2_t)vzip1q_s64(v764, v765);
          v767 = (float64x2_t)vzip2q_s64(v764, v765);
          v768 = *(int64x2_t *)(v630 + 768);
          v769 = *(int64x2_t *)(v630 + 888);
          v770 = (float64x2_t)vzip1q_s64(v768, v769);
          v771 = (float64x2_t)vzip2q_s64(v768, v769);
          v772 = *(int64x2_t *)(v630 + 48);
          v773 = *(int64x2_t *)(v630 + 168);
          v774 = (float64x2_t)vzip1q_s64(v772, v773);
          v775 = (float64x2_t)vzip2q_s64(v772, v773);
          _Q7 = *(_OWORD *)(v630 + 1008);
          v777 = *(float64x2_t *)(v626 + 48);
          _Q8.f64[0] = *(float64_t *)(v626 + 56);
          __asm { FMLA            D20, D8, V7.D[1] }
          v778 = *(float64x2_t *)(v626 + 168);
          _Q9.f64[0] = *(float64_t *)(v626 + 176);
          __asm { FMLA            D23, D9, V7.D[1] }
          _Q22 = vmlaq_laneq_f64(vmlaq_n_f64(v1538, v774, v777.f64[0]), v775, v777, 1);
          v780 = vmlaq_laneq_f64(vmlaq_n_f64(v746, v762, v777.f64[0]), _Q0, v777, 1);
          _Q25 = vmlaq_laneq_f64(vmlaq_n_f64(v747, v766, v777.f64[0]), v767, v777, 1);
          v1522 = vmlaq_laneq_f64(vmlaq_n_f64(v748, v770, v777.f64[0]), v771, v777, 1);
          v782 = *(float64x2_t *)(v626 + 288);
          _Q9.f64[0] = *(float64_t *)(v626 + 296);
          __asm { FMLA            D20, D9, V7.D[1] }
          v783 = vmlaq_laneq_f64(vmlaq_n_f64(v1488, v774, v778.f64[0]), v775, v778, 1);
          *(float64x2_t *)&STACK[0x2C0] = vmlaq_laneq_f64(vmlaq_n_f64(*(float64x2_t *)&STACK[0x2C0], v762, v778.f64[0]), _Q0, v778, 1);
          v1589 = vmlaq_laneq_f64(vmlaq_n_f64(v1588, v766, v778.f64[0]), v767, v778, 1);
          v1595 = _Q25;
          v1532 = vmlaq_laneq_f64(vmlaq_n_f64(v749, v770, v778.f64[0]), v771, v778, 1);
          v784 = *(float64x2_t *)(v626 + 408);
          _Q9.f64[0] = *(float64_t *)(v626 + 416);
          __asm { FMLA            D20, D9, V7.D[1] }
          v1574 = vmlaq_laneq_f64(vmlaq_n_f64(v1573, v774, v782.f64[0]), v775, v782, 1);
          *(float64x2_t *)&STACK[0x2A0] = vmlaq_laneq_f64(vmlaq_n_f64(*(float64x2_t *)&STACK[0x2A0], v762, v782.f64[0]), _Q0, v782, 1);
          v785 = vmlaq_laneq_f64(vmlaq_n_f64(v750, v766, v782.f64[0]), v767, v782, 1);
          v786 = vmlaq_laneq_f64(vmlaq_n_f64(v751, v770, v782.f64[0]), v771, v782, 1);
          v787 = *(float64x2_t *)(v626 + 528);
          _Q9.f64[0] = *(float64_t *)(v626 + 536);
          __asm { FMLA            D30, D9, V7.D[1] }
          v788 = vmlaq_laneq_f64(vmlaq_n_f64(*(float64x2_t *)&STACK[0x2B0], v774, v784.f64[0]), v775, v784, 1);
          v1527 = vmlaq_laneq_f64(vmlaq_n_f64(v752, v762, v784.f64[0]), _Q0, v784, 1);
          v1565 = vmlaq_laneq_f64(vmlaq_n_f64(v753, v766, v784.f64[0]), v767, v784, 1);
          v789 = vmlaq_laneq_f64(vmlaq_n_f64(v1504, v770, v784.f64[0]), v771, v784, 1);
          v790 = *(float64x2_t *)(v626 + 648);
          _Q9.f64[0] = *(float64_t *)(v626 + 656);
          __asm { FMLA            D27, D9, V7.D[1] }
          v791 = vmlaq_laneq_f64(vmlaq_n_f64(v1559, v774, v787.f64[0]), v775, v787, 1);
          v1554 = vmlaq_laneq_f64(vmlaq_n_f64(v754, v762, v787.f64[0]), _Q0, v787, 1);
          v1499 = vmlaq_laneq_f64(vmlaq_n_f64(_Q26, v766, v787.f64[0]), v767, v787, 1);
          v1626 = vmlaq_laneq_f64(vmlaq_n_f64(v756, v770, v787.f64[0]), v771, v787, 1);
          v792 = *(float64x2_t *)(v626 + 768);
          _Q26.f64[1] = v1481;
          _Q9.f64[0] = *(float64_t *)(v626 + 776);
          __asm { FMLA            D26, D9, V7.D[1] }
          v793 = vmlaq_laneq_f64(vmlaq_n_f64(v1549, v774, v790.f64[0]), v775, v790, 1);
          *(float64x2_t *)&STACK[0x310] = vmlaq_laneq_f64(vmlaq_n_f64(*(float64x2_t *)&STACK[0x310], v762, v790.f64[0]), _Q0, v790, 1);
          *(float64x2_t *)&STACK[0x300] = vmlaq_laneq_f64(vmlaq_n_f64(*(float64x2_t *)&STACK[0x300], v766, v790.f64[0]), v767, v790, 1);
          _Q11 = vmlaq_laneq_f64(vmlaq_n_f64(v757, v770, v790.f64[0]), v771, v790, 1);
          _Q8 = *(float64x2_t *)(v626 + 888);
          _Q9.f64[0] = *(float64_t *)(v626 + 896);
          __asm { FMLA            D25, D9, V7.D[1] }
          v796 = vmlaq_laneq_f64(vmlaq_n_f64(v1544, v774, v792.f64[0]), v775, v792, 1);
          v1495 = vmlaq_laneq_f64(vmlaq_n_f64(v1494, v762, v792.f64[0]), _Q0, v792, 1);
          v1582 = vmlaq_laneq_f64(vmlaq_n_f64(v1581, v766, v792.f64[0]), v767, v792, 1);
          v1614 = vmlaq_laneq_f64(vmlaq_n_f64(_Q10, v770, v792.f64[0]), v771, v792, 1);
          v1620 = _Q11;
          v797 = *(float64x2_t *)(v626 + 1008);
          _Q20 = vmlaq_laneq_f64(vmlaq_n_f64(v1607, v774, _Q8.f64[0]), v775, _Q8, 1);
          v799 = vmlaq_laneq_f64(vmlaq_n_f64(v1507, v774, v797.f64[0]), v775, v797, 1);
          v800 = vmlaq_laneq_f64(vmlaq_n_f64(*(float64x2_t *)&STACK[0x2F0], v762, _Q8.f64[0]), _Q0, _Q8, 1);
          *(float64x2_t *)&STACK[0x2D0] = vmlaq_laneq_f64(vmlaq_n_f64(*(float64x2_t *)&STACK[0x2D0], v766, _Q8.f64[0]), v767, _Q8, 1);
          *(float64x2_t *)&STACK[0x2E0] = vmlaq_laneq_f64(vmlaq_n_f64(*(float64x2_t *)&STACK[0x2E0], v770, _Q8.f64[0]), v771, _Q8, 1);
          *(float64x2_t *)&STACK[0x2F0] = v800;
          v1603 = vmlaq_laneq_f64(vmlaq_n_f64(v1602, v762, v797.f64[0]), _Q0, v797, 1);
          v1608 = _Q20;
          v1517 = vmlaq_laneq_f64(vmlaq_n_f64(v1516, v766, v797.f64[0]), v767, v797, 1);
          v801 = vmlaq_laneq_f64(vmlaq_n_f64(v759, v770, v797.f64[0]), v771, v797, 1);
          _Q0.f64[0] = v797.f64[1];
          __asm { FMLA            D19, D0, V7.D[1] }
          v802 = *(int64x2_t *)(v630 + 64);
          v803 = *(int64x2_t *)(v630 + 184);
          _Q2 = (float64x2_t)vzip1q_s64(v802, v803);
          _Q0 = (float64x2_t)vzip2q_s64(v802, v803);
          v806 = *(int64x2_t *)(v630 + 304);
          v807 = *(int64x2_t *)(v630 + 424);
          _Q4 = (float64x2_t)vzip1q_s64(v806, v807);
          v809 = (float64x2_t)vzip2q_s64(v806, v807);
          v810 = *(int64x2_t *)(v630 + 544);
          v811 = *(int64x2_t *)(v630 + 664);
          _Q6 = (float64x2_t)vzip1q_s64(v810, v811);
          _Q3 = (float64x2_t)vzip2q_s64(v810, v811);
          v814 = *(int64x2_t *)(v630 + 784);
          v815 = *(int64x2_t *)(v630 + 904);
          _Q16 = (float64x2_t)vzip1q_s64(v814, v815);
          _Q5 = (float64x2_t)vzip2q_s64(v814, v815);
          _Q7 = *(float64x2_t *)(v626 + 64);
          v1539 = vmlaq_laneq_f64(vmlaq_n_f64(_Q22, _Q2, _Q7.f64[0]), _Q0, _Q7, 1);
          v1513 = vmlaq_laneq_f64(vmlaq_n_f64(v780, _Q4, _Q7.f64[0]), v809, _Q7, 1);
          v1596 = vmlaq_laneq_f64(vmlaq_n_f64(v1595, _Q6, _Q7.f64[0]), _Q3, _Q7, 1);
          v1523 = vmlaq_laneq_f64(vmlaq_n_f64(v1522, _Q16, _Q7.f64[0]), _Q5, _Q7, 1);
          _Q17 = *(_OWORD *)(v630 + 1024);
          _Q7.f64[0] = *(float64_t *)(v626 + 72);
          __asm { FMLA            D20, D7, V17.D[1] }
          _Q7 = *(float64x2_t *)(v626 + 184);
          v821 = vmlaq_laneq_f64(vmlaq_n_f64(v783, _Q2, _Q7.f64[0]), _Q0, _Q7, 1);
          *(float64x2_t *)&STACK[0x2C0] = vmlaq_laneq_f64(vmlaq_n_f64(*(float64x2_t *)&STACK[0x2C0], _Q4, _Q7.f64[0]), v809, _Q7, 1);
          v1590 = vmlaq_laneq_f64(vmlaq_n_f64(v1589, _Q6, _Q7.f64[0]), _Q3, _Q7, 1);
          v1533 = vmlaq_laneq_f64(vmlaq_n_f64(v1532, _Q16, _Q7.f64[0]), _Q5, _Q7, 1);
          _Q7.f64[0] = _Q7.f64[1];
          __asm { FMLA            D11, D7, V17.D[1] }
          _Q7 = *(float64x2_t *)(v626 + 304);
          v1575 = vmlaq_laneq_f64(vmlaq_n_f64(v1574, _Q2, _Q7.f64[0]), _Q0, _Q7, 1);
          _Q21 = vmlaq_laneq_f64(vmlaq_n_f64(*(float64x2_t *)&STACK[0x2A0], _Q4, _Q7.f64[0]), v809, _Q7, 1);
          v824 = vmlaq_laneq_f64(vmlaq_n_f64(v785, _Q6, _Q7.f64[0]), _Q3, _Q7, 1);
          v825 = vmlaq_laneq_f64(vmlaq_n_f64(v786, _Q16, _Q7.f64[0]), _Q5, _Q7, 1);
          _Q7.f64[0] = *(float64_t *)(v626 + 312);
          __asm { FMLA            D10, D7, V17.D[1] }
          _Q7 = *(float64x2_t *)(v626 + 424);
          *(float64x2_t *)&STACK[0x2A0] = _Q21;
          *(float64x2_t *)&STACK[0x2B0] = vmlaq_laneq_f64(vmlaq_n_f64(v788, _Q2, _Q7.f64[0]), _Q0, _Q7, 1);
          v1528 = vmlaq_laneq_f64(vmlaq_n_f64(v1527, _Q4, _Q7.f64[0]), v809, _Q7, 1);
          v1566 = vmlaq_laneq_f64(vmlaq_n_f64(v1565, _Q6, _Q7.f64[0]), _Q3, _Q7, 1);
          v1505 = vmlaq_laneq_f64(vmlaq_n_f64(v789, _Q16, _Q7.f64[0]), _Q5, _Q7, 1);
          _Q7.f64[0] = _Q7.f64[1];
          __asm { FMLA            D21, D7, V17.D[1] }
          _Q7 = *(float64x2_t *)(v626 + 544);
          v1555 = vmlaq_laneq_f64(vmlaq_n_f64(v1554, _Q4, _Q7.f64[0]), v809, _Q7, 1);
          v1560 = vmlaq_laneq_f64(vmlaq_n_f64(v791, _Q2, _Q7.f64[0]), _Q0, _Q7, 1);
          v1500 = vmlaq_laneq_f64(vmlaq_n_f64(v1499, _Q6, _Q7.f64[0]), _Q3, _Q7, 1);
          v1627 = vmlaq_laneq_f64(vmlaq_n_f64(v1626, _Q16, _Q7.f64[0]), _Q5, _Q7, 1);
          _Q7.f64[0] = *(float64_t *)(v626 + 552);
          __asm { FMLA            D30, D7, V17.D[1] }
          _Q7 = *(float64x2_t *)(v626 + 664);
          v829 = vmlaq_laneq_f64(vmlaq_n_f64(v793, _Q2, _Q7.f64[0]), _Q0, _Q7, 1);
          *(float64x2_t *)&STACK[0x310] = vmlaq_laneq_f64(vmlaq_n_f64(*(float64x2_t *)&STACK[0x310], _Q4, _Q7.f64[0]), v809, _Q7, 1);
          *(float64x2_t *)&STACK[0x300] = vmlaq_laneq_f64(vmlaq_n_f64(*(float64x2_t *)&STACK[0x300], _Q6, _Q7.f64[0]), _Q3, _Q7, 1);
          v1621 = vmlaq_laneq_f64(vmlaq_n_f64(v1620, _Q16, _Q7.f64[0]), _Q5, _Q7, 1);
          _Q7.f64[0] = _Q7.f64[1];
          __asm { FMLA            D27, D7, V17.D[1] }
          _Q7 = *(float64x2_t *)(v626 + 784);
          v1545 = vmlaq_laneq_f64(vmlaq_n_f64(v796, _Q2, _Q7.f64[0]), _Q0, _Q7, 1);
          v1550 = v829;
          v1496 = vmlaq_laneq_f64(vmlaq_n_f64(v1495, _Q4, _Q7.f64[0]), v809, _Q7, 1);
          v1583 = vmlaq_laneq_f64(vmlaq_n_f64(v1582, _Q6, _Q7.f64[0]), _Q3, _Q7, 1);
          v1615 = vmlaq_laneq_f64(vmlaq_n_f64(v1614, _Q16, _Q7.f64[0]), _Q5, _Q7, 1);
          _Q7.f64[0] = *(float64_t *)(v626 + 792);
          __asm { FMLA            D26, D7, V17.D[1] }
          _Q7 = *(float64x2_t *)(v626 + 904);
          v1609 = vmlaq_laneq_f64(vmlaq_n_f64(v1608, _Q2, _Q7.f64[0]), _Q0, _Q7, 1);
          *(float64x2_t *)&STACK[0x2F0] = vmlaq_laneq_f64(vmlaq_n_f64(*(float64x2_t *)&STACK[0x2F0], _Q4, _Q7.f64[0]), v809, _Q7, 1);
          *(float64x2_t *)&STACK[0x2D0] = vmlaq_laneq_f64(vmlaq_n_f64(*(float64x2_t *)&STACK[0x2D0], _Q6, _Q7.f64[0]), _Q3, _Q7, 1);
          *(float64x2_t *)&STACK[0x2E0] = vmlaq_laneq_f64(vmlaq_n_f64(*(float64x2_t *)&STACK[0x2E0], _Q16, _Q7.f64[0]), _Q5, _Q7, 1);
          _Q7.f64[0] = _Q7.f64[1];
          __asm { FMLA            D25, D7, V17.D[1] }
          _Q7 = *(float64x2_t *)(v626 + 1024);
          v1508 = vmlaq_laneq_f64(vmlaq_n_f64(v799, _Q2, _Q7.f64[0]), _Q0, _Q7, 1);
          v1604 = vmlaq_laneq_f64(vmlaq_n_f64(v1603, _Q4, _Q7.f64[0]), v809, _Q7, 1);
          v1518 = vmlaq_laneq_f64(vmlaq_n_f64(v1517, _Q6, _Q7.f64[0]), _Q3, _Q7, 1);
          v1485 = vmlaq_laneq_f64(vmlaq_n_f64(v801, _Q16, _Q7.f64[0]), _Q5, _Q7, 1);
          _Q0.f64[0] = *(float64_t *)(v626 + 1032);
          __asm { FMLA            D19, D0, V17.D[1] }
          v833 = *(float64x2_t *)(v626 + 80);
          _Q1 = *(_OWORD *)(v630 + 1040);
          _Q2.f64[0] = *(float64_t *)(v626 + 88);
          __asm { FMLA            D3, D2, V1.D[1] }
          _Q19 = *(float64x2_t *)(v626 + 200);
          _Q3.f64[0] = *(float64_t *)(v626 + 208);
          __asm { FMLA            D22, D3, V1.D[1] }
          v836 = *(float64x2_t *)(v626 + 320);
          _Q4.f64[0] = *(float64_t *)(v626 + 328);
          __asm { FMLA            D10, D4, V1.D[1] }
          _Q21 = *(float64x2_t *)(v626 + 440);
          _Q5.f64[0] = *(float64_t *)(v626 + 448);
          __asm { FMLA            D11, D5, V1.D[1] }
          v838 = *(float64x2_t *)(v626 + 560);
          _Q6.f64[0] = *(float64_t *)(v626 + 568);
          __asm { FMLA            D30, D6, V1.D[1] }
          v839 = *(float64x2_t *)(v626 + 680);
          _Q7.f64[0] = *(float64_t *)(v626 + 688);
          __asm { FMLA            D27, D7, V1.D[1] }
          v840 = *(float64x2_t *)(v626 + 800);
          _Q16.f64[0] = *(float64_t *)(v626 + 808);
          __asm { FMLA            D26, D16, V1.D[1] }
          v841 = *(float64x2_t *)(v626 + 920);
          *(_QWORD *)&_Q17 = *(_QWORD *)(v626 + 928);
          __asm { FMLA            D25, D17, V1.D[1] }
          v842 = *(float64x2_t *)(v626 + 1040);
          _Q8.f64[0] = *(float64_t *)(v626 + 1048);
          __asm { FMLA            D0, D8, V1.D[1] }
          v843 = *(int64x2_t *)(v630 + 80);
          v844 = *(int64x2_t *)(v630 + 200);
          v845 = (float64x2_t)vzip1q_s64(v843, v844);
          v846 = (float64x2_t)vzip2q_s64(v843, v844);
          v847 = *(int64x2_t *)(v630 + 320);
          v848 = *(int64x2_t *)(v630 + 440);
          v849 = (float64x2_t)vzip1q_s64(v847, v848);
          v850 = (float64x2_t)vzip2q_s64(v847, v848);
          v851 = *(int64x2_t *)(v630 + 560);
          v852 = *(int64x2_t *)(v630 + 680);
          v853 = (float64x2_t)vzip1q_s64(v851, v852);
          v854 = (float64x2_t)vzip2q_s64(v851, v852);
          v855 = *(int64x2_t *)(v630 + 800);
          v856 = *(int64x2_t *)(v630 + 920);
          v857 = (float64x2_t)vzip1q_s64(v855, v856);
          v858 = (float64x2_t)vzip2q_s64(v855, v856);
          v859 = vmlaq_laneq_f64(vmlaq_n_f64(v821, v845, _Q19.f64[0]), v846, _Q19, 1);
          v1576 = vmlaq_laneq_f64(vmlaq_n_f64(v1575, v845, v836.f64[0]), v846, v836, 1);
          *(float64x2_t *)&STACK[0x2B0] = vmlaq_laneq_f64(vmlaq_n_f64(*(float64x2_t *)&STACK[0x2B0], v845, _Q21.f64[0]), v846, _Q21, 1);
          v1561 = vmlaq_laneq_f64(vmlaq_n_f64(v1560, v845, v838.f64[0]), v846, v838, 1);
          v1551 = vmlaq_laneq_f64(vmlaq_n_f64(v1550, v845, v839.f64[0]), v846, v839, 1);
          v1540 = vmlaq_laneq_f64(vmlaq_n_f64(v1539, v845, v833.f64[0]), v846, v833, 1);
          v1546 = vmlaq_laneq_f64(vmlaq_n_f64(v1545, v845, v840.f64[0]), v846, v840, 1);
          v1610 = vmlaq_laneq_f64(vmlaq_n_f64(v1609, v845, v841.f64[0]), v846, v841, 1);
          v1509 = vmlaq_laneq_f64(vmlaq_n_f64(v1508, v845, v842.f64[0]), v846, v842, 1);
          v860 = vmlaq_laneq_f64(vmlaq_n_f64(v1513, v849, v833.f64[0]), v850, v833, 1);
          v1597 = vmlaq_laneq_f64(vmlaq_n_f64(v1596, v853, v833.f64[0]), v854, v833, 1);
          v1524 = vmlaq_laneq_f64(vmlaq_n_f64(v1523, v857, v833.f64[0]), v858, v833, 1);
          *(float64x2_t *)&STACK[0x2C0] = vmlaq_laneq_f64(vmlaq_n_f64(*(float64x2_t *)&STACK[0x2C0], v849, _Q19.f64[0]), v850, _Q19, 1);
          v861 = vmlaq_laneq_f64(vmlaq_n_f64(*(float64x2_t *)&STACK[0x2A0], v849, v836.f64[0]), v850, v836, 1);
          v862 = vmlaq_laneq_f64(vmlaq_n_f64(v824, v853, v836.f64[0]), v854, v836, 1);
          v863 = vmlaq_laneq_f64(vmlaq_n_f64(v825, v857, v836.f64[0]), v858, v836, 1);
          v1529 = vmlaq_laneq_f64(vmlaq_n_f64(v1528, v849, _Q21.f64[0]), v850, _Q21, 1);
          v1567 = vmlaq_laneq_f64(vmlaq_n_f64(v1566, v853, _Q21.f64[0]), v854, _Q21, 1);
          v864 = vmlaq_laneq_f64(vmlaq_n_f64(v1505, v857, _Q21.f64[0]), v858, _Q21, 1);
          v1556 = vmlaq_laneq_f64(vmlaq_n_f64(v1555, v849, v838.f64[0]), v850, v838, 1);
          v1501 = vmlaq_laneq_f64(vmlaq_n_f64(v1500, v853, v838.f64[0]), v854, v838, 1);
          v1628 = vmlaq_laneq_f64(vmlaq_n_f64(v1627, v857, v838.f64[0]), v858, v838, 1);
          *(float64x2_t *)&STACK[0x310] = vmlaq_laneq_f64(vmlaq_n_f64(*(float64x2_t *)&STACK[0x310], v849, v839.f64[0]), v850, v839, 1);
          *(float64x2_t *)&STACK[0x300] = vmlaq_laneq_f64(vmlaq_n_f64(*(float64x2_t *)&STACK[0x300], v853, v839.f64[0]), v854, v839, 1);
          v1622 = vmlaq_laneq_f64(vmlaq_n_f64(v1621, v857, v839.f64[0]), v858, v839, 1);
          v865 = vmlaq_laneq_f64(vmlaq_n_f64(v1496, v849, v840.f64[0]), v850, v840, 1);
          v1584 = vmlaq_laneq_f64(vmlaq_n_f64(v1583, v853, v840.f64[0]), v854, v840, 1);
          v1616 = vmlaq_laneq_f64(vmlaq_n_f64(v1615, v857, v840.f64[0]), v858, v840, 1);
          *(float64x2_t *)&STACK[0x2F0] = vmlaq_laneq_f64(vmlaq_n_f64(*(float64x2_t *)&STACK[0x2F0], v849, v841.f64[0]), v850, v841, 1);
          *(float64x2_t *)&STACK[0x2D0] = vmlaq_laneq_f64(vmlaq_n_f64(*(float64x2_t *)&STACK[0x2D0], v853, v841.f64[0]), v854, v841, 1);
          *(float64x2_t *)&STACK[0x2E0] = vmlaq_laneq_f64(vmlaq_n_f64(*(float64x2_t *)&STACK[0x2E0], v857, v841.f64[0]), v858, v841, 1);
          v866 = vmlaq_laneq_f64(vmlaq_n_f64(v1604, v849, v842.f64[0]), v850, v842, 1);
          v867 = vmlaq_laneq_f64(vmlaq_n_f64(v1518, v853, v842.f64[0]), v854, v842, 1);
          v868 = vmlaq_laneq_f64(vmlaq_n_f64(v1485, v857, v842.f64[0]), v858, v842, 1);
          v869 = *(int64x2_t *)(v630 + 96);
          v870 = *(int64x2_t *)(v630 + 216);
          _Q2 = (float64x2_t)vzip1q_s64(v869, v870);
          v872 = (float64x2_t)vzip2q_s64(v869, v870);
          v873 = *(int64x2_t *)(v630 + 336);
          v874 = *(int64x2_t *)(v630 + 456);
          v875 = (float64x2_t)vzip1q_s64(v873, v874);
          _Q1 = (float64x2_t)vzip2q_s64(v873, v874);
          v877 = *(int64x2_t *)(v630 + 576);
          v878 = *(int64x2_t *)(v630 + 696);
          v879 = (float64x2_t)vzip1q_s64(v877, v878);
          v880 = (float64x2_t)vzip2q_s64(v877, v878);
          v881 = *(int64x2_t *)(v630 + 816);
          v882 = *(int64x2_t *)(v630 + 936);
          v883 = (float64x2_t)vzip1q_s64(v881, v882);
          v884 = (float64x2_t)vzip2q_s64(v881, v882);
          _Q7 = *(float64x2_t *)(v626 + 96);
          v1541 = vmlaq_laneq_f64(vmlaq_n_f64(v1540, _Q2, _Q7.f64[0]), v872, _Q7, 1);
          v1514 = vmlaq_laneq_f64(vmlaq_n_f64(v860, v875, _Q7.f64[0]), _Q1, _Q7, 1);
          v1598 = vmlaq_laneq_f64(vmlaq_n_f64(v1597, v879, _Q7.f64[0]), v880, _Q7, 1);
          v1525 = vmlaq_laneq_f64(vmlaq_n_f64(v1524, v883, _Q7.f64[0]), v884, _Q7, 1);
          _Q17 = *(float64x2_t *)(v630 + 1056);
          _Q7.f64[0] = *(float64_t *)(v626 + 104);
          __asm { FMLA            D21, D7, V17.D[1] }
          v1520 = _Q21.f64[0];
          _Q7 = *(float64x2_t *)(v626 + 216);
          v888 = vmlaq_laneq_f64(vmlaq_n_f64(v859, _Q2, _Q7.f64[0]), v872, _Q7, 1);
          *(float64x2_t *)&STACK[0x2C0] = vmlaq_laneq_f64(vmlaq_n_f64(*(float64x2_t *)&STACK[0x2C0], v875, _Q7.f64[0]), _Q1, _Q7, 1);
          v1591 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1590, v853, _Q19.f64[0]), v854, _Q19, 1), v879, _Q7.f64[0]), v880, _Q7, 1);
          v1534 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1533, v857, _Q19.f64[0]), v858, _Q19, 1), v883, _Q7.f64[0]), v884, _Q7, 1);
          _Q7.f64[0] = _Q7.f64[1];
          __asm { FMLA            D19, D7, V17.D[1] }
          v1490.f64[0] = _Q19.f64[0];
          _Q7 = *(float64x2_t *)(v626 + 336);
          v1577 = vmlaq_laneq_f64(vmlaq_n_f64(v1576, _Q2, _Q7.f64[0]), v872, _Q7, 1);
          v890 = vmlaq_laneq_f64(vmlaq_n_f64(v861, v875, _Q7.f64[0]), _Q1, _Q7, 1);
          v891 = vmlaq_laneq_f64(vmlaq_n_f64(v862, v879, _Q7.f64[0]), v880, _Q7, 1);
          v892 = vmlaq_laneq_f64(vmlaq_n_f64(v863, v883, _Q7.f64[0]), v884, _Q7, 1);
          _Q19.f64[1] = v1570;
          _Q7.f64[0] = *(float64_t *)(v626 + 344);
          __asm { FMLA            D19, D7, V17.D[1] }
          v1569 = _Q19;
          _Q7 = *(float64x2_t *)(v626 + 456);
          *(float64x2_t *)&STACK[0x2B0] = vmlaq_laneq_f64(vmlaq_n_f64(*(float64x2_t *)&STACK[0x2B0], _Q2, _Q7.f64[0]), v872, _Q7, 1);
          v894 = vmlaq_laneq_f64(vmlaq_n_f64(v1529, v875, _Q7.f64[0]), _Q1, _Q7, 1);
          v895 = vmlaq_laneq_f64(vmlaq_n_f64(v1567, v879, _Q7.f64[0]), v880, _Q7, 1);
          v1506 = vmlaq_laneq_f64(vmlaq_n_f64(v864, v883, _Q7.f64[0]), v884, _Q7, 1);
          _Q7.f64[0] = _Q7.f64[1];
          __asm { FMLA            D19, D7, V17.D[1] }
          v1563 = _Q19.f64[0];
          _Q7 = *(float64x2_t *)(v626 + 576);
          v1562 = vmlaq_laneq_f64(vmlaq_n_f64(v1561, _Q2, _Q7.f64[0]), v872, _Q7, 1);
          v897 = vmlaq_laneq_f64(vmlaq_n_f64(v1556, v875, _Q7.f64[0]), _Q1, _Q7, 1);
          v898 = vmlaq_laneq_f64(vmlaq_n_f64(v1501, v879, _Q7.f64[0]), v880, _Q7, 1);
          v1629 = vmlaq_laneq_f64(vmlaq_n_f64(v1628, v883, _Q7.f64[0]), v884, _Q7, 1);
          _Q7.f64[0] = *(float64_t *)(v626 + 584);
          __asm { FMLA            D30, D7, V17.D[1] }
          _Q7 = *(float64x2_t *)(v626 + 696);
          v1552 = vmlaq_laneq_f64(vmlaq_n_f64(v1551, _Q2, _Q7.f64[0]), v872, _Q7, 1);
          v900 = *(float64x2_t *)&STACK[0x300];
          *(float64x2_t *)&STACK[0x310] = vmlaq_laneq_f64(vmlaq_n_f64(*(float64x2_t *)&STACK[0x310], v875, _Q7.f64[0]), _Q1, _Q7, 1);
          v901 = vmlaq_laneq_f64(vmlaq_n_f64(v900, v879, _Q7.f64[0]), v880, _Q7, 1);
          v1623 = vmlaq_laneq_f64(vmlaq_n_f64(v1622, v883, _Q7.f64[0]), v884, _Q7, 1);
          _Q7.f64[0] = _Q7.f64[1];
          __asm { FMLA            D27, D7, V17.D[1] }
          _Q7 = *(float64x2_t *)(v626 + 816);
          v903 = vmlaq_laneq_f64(vmlaq_n_f64(v1546, _Q2, _Q7.f64[0]), v872, _Q7, 1);
          v904 = vmlaq_laneq_f64(vmlaq_n_f64(v865, v875, _Q7.f64[0]), _Q1, _Q7, 1);
          v1585 = vmlaq_laneq_f64(vmlaq_n_f64(v1584, v879, _Q7.f64[0]), v880, _Q7, 1);
          v1617 = vmlaq_laneq_f64(vmlaq_n_f64(v1616, v883, _Q7.f64[0]), v884, _Q7, 1);
          _Q7.f64[0] = *(float64_t *)(v626 + 824);
          __asm { FMLA            D26, D7, V17.D[1] }
          _Q7 = *(float64x2_t *)(v626 + 936);
          v906 = vmlaq_laneq_f64(vmlaq_n_f64(v1610, _Q2, _Q7.f64[0]), v872, _Q7, 1);
          *(float64x2_t *)&STACK[0x2F0] = vmlaq_laneq_f64(vmlaq_n_f64(*(float64x2_t *)&STACK[0x2F0], v875, _Q7.f64[0]), _Q1, _Q7, 1);
          *(float64x2_t *)&STACK[0x2D0] = vmlaq_laneq_f64(vmlaq_n_f64(*(float64x2_t *)&STACK[0x2D0], v879, _Q7.f64[0]), v880, _Q7, 1);
          *(float64x2_t *)&STACK[0x2E0] = vmlaq_laneq_f64(vmlaq_n_f64(*(float64x2_t *)&STACK[0x2E0], v883, _Q7.f64[0]), v884, _Q7, 1);
          _Q7.f64[0] = _Q7.f64[1];
          __asm { FMLA            D25, D7, V17.D[1] }
          v907 = *(float64x2_t *)(v626 + 1056);
          v908 = vmlaq_laneq_f64(vmlaq_n_f64(v1509, _Q2, v907.f64[0]), v872, v907, 1);
          v909 = vmlaq_laneq_f64(vmlaq_n_f64(v866, v875, v907.f64[0]), _Q1, v907, 1);
          v1605 = v909;
          v1519 = vmlaq_laneq_f64(vmlaq_n_f64(v867, v879, v907.f64[0]), v880, v907, 1);
          v910 = vmlaq_laneq_f64(vmlaq_n_f64(v868, v883, v907.f64[0]), v884, v907, 1);
          v872.f64[0] = *(float64_t *)(v630 + 112);
          v872.f64[1] = *(float64_t *)(v630 + 232);
          _Q2.f64[1] = v1492;
          _Q1.f64[0] = *(float64_t *)(v626 + 1064);
          v907.f64[0] = *(float64_t *)(v630 + 352);
          v907.f64[1] = *(float64_t *)(v630 + 472);
          __asm { FMLA            D2, D1, V17.D[1] }
          v1491 = _Q2;
          v883.f64[0] = *(float64_t *)(v630 + 592);
          v883.f64[1] = *(float64_t *)(v630 + 712);
          _Q17.f64[0] = *(float64_t *)(v630 + 832);
          _Q17.f64[1] = *(float64_t *)(v630 + 952);
          _Q1.f64[0] = *(float64_t *)(v626 + 112);
          v911 = vmlaq_n_f64(v1541, v872, _Q1.f64[0]);
          v912 = vmlaq_n_f64(v1514, v907, _Q1.f64[0]);
          v1599 = vmlaq_n_f64(v1598, v883, _Q1.f64[0]);
          v913 = vmlaq_n_f64(v1525, _Q17, _Q1.f64[0]);
          v909.f64[0] = *(float64_t *)(v630 + 1072);
          v857.f64[0] = v1520 + v909.f64[0] * _Q1.f64[0];
          _Q1.f64[0] = *(float64_t *)(v626 + 232);
          v914 = vmlaq_n_f64(v888, v872, _Q1.f64[0]);
          v915 = *(float64x2_t *)&STACK[0x2B0];
          *(float64x2_t *)&STACK[0x2C0] = vmlaq_n_f64(*(float64x2_t *)&STACK[0x2C0], v907, _Q1.f64[0]);
          v916 = vmlaq_n_f64(v1591, v883, _Q1.f64[0]);
          v1535 = vmlaq_n_f64(v1534, _Q17, _Q1.f64[0]);
          _Q1.f64[0] = v1490.f64[0] + v909.f64[0] * _Q1.f64[0];
          v1542 = _Q1;
          _Q1.f64[0] = *(float64_t *)(v626 + 352);
          _Q2.f64[1] = v1569.f64[1];
          v917 = vmlaq_n_f64(v1577, v872, _Q1.f64[0]);
          v918 = vmlaq_n_f64(v890, v907, _Q1.f64[0]);
          v919 = vmlaq_n_f64(v891, v883, _Q1.f64[0]);
          v920 = vmlaq_n_f64(v892, _Q17, _Q1.f64[0]);
          _Q1.f64[0] = v1569.f64[0] + v909.f64[0] * _Q1.f64[0];
          _Q2.f64[0] = *(float64_t *)(v626 + 472);
          *(float64x2_t *)&STACK[0x2A0] = v918;
          *(float64x2_t *)&STACK[0x2B0] = vmlaq_n_f64(v915, v872, _Q2.f64[0]);
          v1530 = vmlaq_n_f64(v894, v907, _Q2.f64[0]);
          v1568 = vmlaq_n_f64(v895, v883, _Q2.f64[0]);
          v921 = vmlaq_n_f64(v1506, _Q17, _Q2.f64[0]);
          _Q2.f64[0] = v1563 + v909.f64[0] * _Q2.f64[0];
          v1578 = _Q2;
          _Q2.f64[0] = *(float64_t *)(v626 + 592);
          v922 = vmlaq_n_f64(v1562, v872, _Q2.f64[0]);
          v1557 = vmlaq_n_f64(v897, v907, _Q2.f64[0]);
          v1502 = vmlaq_n_f64(v898, v883, _Q2.f64[0]);
          v923 = vmlaq_n_f64(v1629, _Q17, _Q2.f64[0]);
          _Q2.f64[0] = _Q30.f64[0] + v909.f64[0] * _Q2.f64[0];
          v1592 = _Q2;
          _Q2.f64[0] = *(float64_t *)(v626 + 712);
          v924 = vmlaq_n_f64(v1552, v872, _Q2.f64[0]);
          v925 = vmlaq_n_f64(*(float64x2_t *)&STACK[0x310], v907, _Q2.f64[0]);
          *(float64x2_t *)&STACK[0x300] = vmlaq_n_f64(v901, v883, _Q2.f64[0]);
          v926 = vmlaq_n_f64(v1623, _Q17, _Q2.f64[0]);
          _Q2.f64[0] = _Q27.f64[0] + v909.f64[0] * _Q2.f64[0];
          v1630 = _Q2;
          _Q2.f64[0] = *(float64_t *)(v626 + 832);
          v1547 = vmlaq_n_f64(v903, v872, _Q2.f64[0]);
          v927 = vmlaq_n_f64(v904, v907, _Q2.f64[0]);
          v928 = vmlaq_n_f64(v1585, v883, _Q2.f64[0]);
          v929 = vmlaq_n_f64(v1617, _Q17, _Q2.f64[0]);
          _Q26.f64[0] = _Q26.f64[0] + v909.f64[0] * _Q2.f64[0];
          v915.f64[0] = *(float64_t *)(v626 + 952);
          v930 = vmlaq_n_f64(v906, v872, v915.f64[0]);
          v1611 = v930;
          v897.f64[0] = *(float64_t *)(v626 + 1072);
          v1510 = vmlaq_n_f64(v908, v872, v897.f64[0]);
          v931 = vmlaq_n_f64(*(float64x2_t *)&STACK[0x2F0], v907, v915.f64[0]);
          v932 = vmlaq_n_f64(*(float64x2_t *)&STACK[0x2D0], v883, v915.f64[0]);
          v930.f64[0] = _Q25.f64[0] + v909.f64[0] * v915.f64[0];
          *(float64x2_t *)&STACK[0x310] = v930;
          v933 = vmlaq_n_f64(*(float64x2_t *)&STACK[0x2E0], _Q17, v915.f64[0]);
          v934 = vmlaq_n_f64(v1605, v907, v897.f64[0]);
          v935 = vmlaq_n_f64(v1519, v883, v897.f64[0]);
          v1486 = vmlaq_n_f64(v910, _Q17, v897.f64[0]);
          v907.f64[1] = v1491.f64[1];
          v909.f64[0] = v1491.f64[0] + v909.f64[0] * v897.f64[0];
          v936 = v55 + 1568 * v625 + 8 * *((unsigned int *)&STACK[0x183E0] + v629);
          v907.f64[0] = *(float64_t *)(v936 + 64);
          *(_QWORD *)(v936 + 64) = *(_OWORD *)&vaddq_f64(v907, v857);
          v937 = vaddq_f64(*(float64x2_t *)(v936 + 16), v912);
          v938 = vaddq_f64(*(float64x2_t *)(v936 + 48), v913);
          *(float64x2_t *)(v936 + 32) = vaddq_f64(*(float64x2_t *)(v936 + 32), v1599);
          *(float64x2_t *)(v936 + 48) = v938;
          v939 = vaddq_f64(*(float64x2_t *)v936, v911);
          v940 = vaddq_f64(*(float64x2_t *)(v936 + 1568), v914);
          *(float64x2_t *)v936 = v939;
          *(float64x2_t *)(v936 + 16) = v937;
          *(float64x2_t *)(v936 + 1568) = v940;
          v939.f64[0] = *(float64_t *)(v936 + 1632);
          *(float64x2_t *)(v936 + 1616) = vaddq_f64(*(float64x2_t *)(v936 + 1616), v1535);
          *(_QWORD *)(v936 + 1632) = *(_OWORD *)&vaddq_f64(v939, v1542);
          v941 = vaddq_f64(*(float64x2_t *)(v936 + 3136), v917);
          *(float64x2_t *)(v936 + 1600) = vaddq_f64(*(float64x2_t *)(v936 + 1600), v916);
          *(float64x2_t *)(v936 + 3136) = v941;
          v942 = vaddq_f64(*(float64x2_t *)(v936 + 3184), v920);
          *(float64x2_t *)(v936 + 1584) = vaddq_f64(*(float64x2_t *)(v936 + 1584), *(float64x2_t *)&STACK[0x2C0]);
          *(float64x2_t *)(v936 + 3184) = v942;
          v942.f64[0] = *(float64_t *)(v936 + 3200);
          *(float64x2_t *)(v936 + 3168) = vaddq_f64(*(float64x2_t *)(v936 + 3168), v919);
          *(_QWORD *)(v936 + 3200) = *(_OWORD *)&vaddq_f64(v942, _Q1);
          v943 = vaddq_f64(*(float64x2_t *)(v936 + 4704), *(float64x2_t *)&STACK[0x2B0]);
          *(float64x2_t *)(v936 + 3152) = vaddq_f64(*(float64x2_t *)(v936 + 3152), *(float64x2_t *)&STACK[0x2A0]);
          *(float64x2_t *)(v936 + 4704) = v943;
          v943.f64[0] = *(float64_t *)(v936 + 4768);
          *(float64x2_t *)(v936 + 4752) = vaddq_f64(*(float64x2_t *)(v936 + 4752), v921);
          *(_QWORD *)(v936 + 4768) = *(_OWORD *)&vaddq_f64(v943, v1578);
          v944 = vaddq_f64(*(float64x2_t *)(v936 + 6272), v922);
          *(float64x2_t *)(v936 + 4736) = vaddq_f64(*(float64x2_t *)(v936 + 4736), v1568);
          *(float64x2_t *)(v936 + 6272) = v944;
          v945 = vaddq_f64(*(float64x2_t *)(v936 + 6320), v923);
          *(float64x2_t *)(v936 + 4720) = vaddq_f64(*(float64x2_t *)(v936 + 4720), v1530);
          *(float64x2_t *)(v936 + 6320) = v945;
          v945.f64[0] = *(float64_t *)(v936 + 6336);
          *(float64x2_t *)(v936 + 6304) = vaddq_f64(*(float64x2_t *)(v936 + 6304), v1502);
          *(_QWORD *)(v936 + 6336) = *(_OWORD *)&vaddq_f64(v945, v1592);
          v946 = vaddq_f64(*(float64x2_t *)(v936 + 7840), v924);
          *(float64x2_t *)(v936 + 6288) = vaddq_f64(*(float64x2_t *)(v936 + 6288), v1557);
          *(float64x2_t *)(v936 + 7840) = v946;
          v947 = vaddq_f64(*(float64x2_t *)(v936 + 7856), v925);
          v948 = vaddq_f64(*(float64x2_t *)(v936 + 7872), *(float64x2_t *)&STACK[0x300]);
          v949 = vaddq_f64(*(float64x2_t *)(v936 + 7888), v926);
          v943.f64[0] = *(float64_t *)(v936 + 7904);
          *(_QWORD *)&v913.f64[0] = *(_OWORD *)&vaddq_f64(v943, v1630);
          v950 = vaddq_f64(*(float64x2_t *)(v936 + 9424), v927);
          v951 = vaddq_f64(*(float64x2_t *)(v936 + 9440), v928);
          v952 = vaddq_f64(*(float64x2_t *)(v936 + 9456), v929);
          v953 = vaddq_f64(*(float64x2_t *)(v936 + 9408), v1547);
          v927.f64[0] = *(float64_t *)(v936 + 9472);
          *(_QWORD *)&v912.f64[0] = *(_OWORD *)&vaddq_f64(v927, _Q26);
          v954 = vaddq_f64(*(float64x2_t *)(v936 + 10992), v931);
          v955 = vaddq_f64(*(float64x2_t *)(v936 + 11008), v932);
          v956 = vaddq_f64(*(float64x2_t *)(v936 + 11024), v933);
          v957 = vaddq_f64(*(float64x2_t *)(v936 + 10976), v1611);
          v929.f64[0] = *(float64_t *)(v936 + 11040);
          *(_QWORD *)&v932.f64[0] = *(_OWORD *)&vaddq_f64(v929, *(float64x2_t *)&STACK[0x310]);
          v958 = vaddq_f64(*(float64x2_t *)(v936 + 12560), v934);
          v959 = vaddq_f64(*(float64x2_t *)(v936 + 12576), v935);
          v960 = vaddq_f64(*(float64x2_t *)(v936 + 12592), v1486);
          v961 = vaddq_f64(*(float64x2_t *)(v936 + 12544), v1510);
          *(float64x2_t *)(v936 + 7888) = v949;
          *(float64x2_t *)(v936 + 7872) = v948;
          *(float64_t *)(v936 + 7904) = v913.f64[0];
          *(float64x2_t *)(v936 + 9408) = v953;
          *(float64x2_t *)(v936 + 7856) = v947;
          *(float64x2_t *)(v936 + 9456) = v952;
          *(float64x2_t *)(v936 + 9440) = v951;
          *(float64x2_t *)(v936 + 9424) = v950;
          *(float64_t *)(v936 + 9472) = v912.f64[0];
          *(float64x2_t *)(v936 + 10976) = v957;
          *(float64x2_t *)(v936 + 11024) = v956;
          *(float64x2_t *)(v936 + 11008) = v955;
          *(float64_t *)(v936 + 11040) = v932.f64[0];
          *(float64x2_t *)(v936 + 12544) = v961;
          v947.f64[0] = *(float64_t *)(v936 + 12608);
          *(float64x2_t *)(v936 + 10992) = v954;
          *(float64x2_t *)(v936 + 12592) = v960;
          *(float64x2_t *)(v936 + 12576) = v959;
          *(float64x2_t *)(v936 + 12560) = v958;
          *(_QWORD *)(v936 + 12608) = *(_OWORD *)&vaddq_f64(v947, v909);
          ++v629;
        }
        while (v629 < v54);
        _Q2 = *(float64x2_t *)v56;
        _Q0 = vmulq_f64(*(float64x2_t *)v56, *(float64x2_t *)v626);
        _D1 = *(_QWORD *)(v626 + 8);
        __asm { FMLA            D0, D1, V2.D[1] }
        _D3 = *(_QWORD *)(v626 + 128);
        __asm { FMLA            D1, D3, V2.D[1] }
        _D5 = *(_QWORD *)(v626 + 248);
        __asm { FMLA            D3, D5, V2.D[1] }
        _D7 = *(_QWORD *)(v626 + 368);
        __asm { FMLA            D5, D7, V2.D[1] }
        _D17 = *(_QWORD *)(v626 + 488);
        __asm { FMLA            D7, D17, V2.D[1] }
        _D18 = *(_QWORD *)(v626 + 608);
        __asm { FMLA            D17, D18, V2.D[1] }
        _D16 = *(_QWORD *)(v626 + 728);
        __asm { FMLA            D18, D16, V2.D[1] }
        _D6 = *(_QWORD *)(v626 + 848);
        __asm { FMLA            D16, D6, V2.D[1] }
        _D4 = *(_QWORD *)(v626 + 968);
        __asm { FMLA            D6, D4, V2.D[1] }
        _Q2 = *((_OWORD *)v56 + 1);
        _D4 = *(_QWORD *)(v626 + 24);
        __asm { FMLA            D0, D4, V2.D[1] }
        _D4 = *(_QWORD *)(v626 + 144);
        __asm { FMLA            D1, D4, V2.D[1] }
        _D4 = *(_QWORD *)(v626 + 264);
        __asm { FMLA            D3, D4, V2.D[1] }
        _D4 = *(_QWORD *)(v626 + 384);
        __asm { FMLA            D5, D4, V2.D[1] }
        _D4 = *(_QWORD *)(v626 + 504);
        __asm { FMLA            D7, D4, V2.D[1] }
        _D4 = *(_QWORD *)(v626 + 624);
        __asm { FMLA            D17, D4, V2.D[1] }
        _D4 = *(_QWORD *)(v626 + 744);
        __asm { FMLA            D18, D4, V2.D[1] }
        _D4 = *(_QWORD *)(v626 + 864);
        __asm { FMLA            D16, D4, V2.D[1] }
        _D4 = *(_QWORD *)(v626 + 984);
        __asm { FMLA            D6, D4, V2.D[1] }
        _Q2 = *((_OWORD *)v56 + 2);
        _D4 = *(_QWORD *)(v626 + 40);
        __asm { FMLA            D0, D4, V2.D[1] }
        _D4 = *(_QWORD *)(v626 + 160);
        __asm { FMLA            D1, D4, V2.D[1] }
        _D4 = *(_QWORD *)(v626 + 280);
        __asm { FMLA            D3, D4, V2.D[1] }
        _D4 = *(_QWORD *)(v626 + 400);
        __asm { FMLA            D5, D4, V2.D[1] }
        _D4 = *(_QWORD *)(v626 + 520);
        __asm { FMLA            D7, D4, V2.D[1] }
        _D4 = *(_QWORD *)(v626 + 640);
        __asm { FMLA            D17, D4, V2.D[1] }
        _D4 = *(_QWORD *)(v626 + 760);
        __asm { FMLA            D18, D4, V2.D[1] }
        _D4 = *(_QWORD *)(v626 + 880);
        __asm { FMLA            D16, D4, V2.D[1] }
        _D4 = *(_QWORD *)(v626 + 1000);
        __asm { FMLA            D6, D4, V2.D[1] }
        _Q2 = *((_OWORD *)v56 + 3);
        _D4 = *(_QWORD *)(v626 + 56);
        __asm { FMLA            D0, D4, V2.D[1] }
        _D4 = *(_QWORD *)(v626 + 176);
        __asm { FMLA            D1, D4, V2.D[1] }
        _D4 = *(_QWORD *)(v626 + 296);
        __asm { FMLA            D3, D4, V2.D[1] }
        _D4 = *(_QWORD *)(v626 + 416);
        __asm { FMLA            D5, D4, V2.D[1] }
        _D4 = *(_QWORD *)(v626 + 536);
        __asm { FMLA            D7, D4, V2.D[1] }
        _D4 = *(_QWORD *)(v626 + 656);
        __asm { FMLA            D17, D4, V2.D[1] }
        _D4 = *(_QWORD *)(v626 + 776);
        __asm { FMLA            D18, D4, V2.D[1] }
        _D4 = *(_QWORD *)(v626 + 896);
        __asm { FMLA            D16, D4, V2.D[1] }
        _D4 = *(_QWORD *)(v626 + 1016);
        __asm { FMLA            D6, D4, V2.D[1] }
        _Q2 = *((_OWORD *)v56 + 4);
        _D4 = *(_QWORD *)(v626 + 72);
        __asm { FMLA            D0, D4, V2.D[1] }
        _D4 = *(_QWORD *)(v626 + 192);
        __asm { FMLA            D1, D4, V2.D[1] }
        _D4 = *(_QWORD *)(v626 + 312);
        __asm { FMLA            D3, D4, V2.D[1] }
        _D4 = *(_QWORD *)(v626 + 432);
        __asm { FMLA            D5, D4, V2.D[1] }
        _D4 = *(_QWORD *)(v626 + 552);
        __asm { FMLA            D7, D4, V2.D[1] }
        _D4 = *(_QWORD *)(v626 + 672);
        __asm { FMLA            D17, D4, V2.D[1] }
        _D4 = *(_QWORD *)(v626 + 792);
        __asm { FMLA            D18, D4, V2.D[1] }
        _D4 = *(_QWORD *)(v626 + 912);
        __asm { FMLA            D16, D4, V2.D[1] }
        _D4 = *(_QWORD *)(v626 + 1032);
        __asm { FMLA            D6, D4, V2.D[1] }
        _Q2 = *((_OWORD *)v56 + 5);
        _D4 = *(_QWORD *)(v626 + 88);
        __asm { FMLA            D0, D4, V2.D[1] }
        _D4 = *(_QWORD *)(v626 + 208);
        __asm { FMLA            D1, D4, V2.D[1] }
        _D4 = *(_QWORD *)(v626 + 328);
        __asm { FMLA            D3, D4, V2.D[1] }
        _D4 = *(_QWORD *)(v626 + 448);
        __asm { FMLA            D5, D4, V2.D[1] }
        _D4 = *(_QWORD *)(v626 + 568);
        __asm { FMLA            D7, D4, V2.D[1] }
        _D4 = *(_QWORD *)(v626 + 688);
        __asm { FMLA            D17, D4, V2.D[1] }
        _D4 = *(_QWORD *)(v626 + 808);
        __asm { FMLA            D18, D4, V2.D[1] }
        _D4 = *(_QWORD *)(v626 + 928);
        __asm { FMLA            D16, D4, V2.D[1] }
        v1068 = (double *)(v20 + 8 * v625);
        _D4 = *(_QWORD *)(v626 + 1048);
        __asm { FMLA            D6, D4, V2.D[1] }
        _Q2 = *((_OWORD *)v56 + 6);
        _D4 = *(_QWORD *)(v626 + 104);
        __asm { FMLA            D0, D4, V2.D[1] }
        _D4 = *(_QWORD *)(v626 + 224);
        __asm { FMLA            D1, D4, V2.D[1] }
        _D4 = *(_QWORD *)(v626 + 344);
        __asm { FMLA            D3, D4, V2.D[1] }
        _D4 = *(_QWORD *)(v626 + 464);
        __asm { FMLA            D5, D4, V2.D[1] }
        _D4 = *(_QWORD *)(v626 + 584);
        __asm { FMLA            D7, D4, V2.D[1] }
        _D4 = *(_QWORD *)(v626 + 704);
        __asm { FMLA            D17, D4, V2.D[1] }
        _D4 = *(_QWORD *)(v626 + 824);
        __asm { FMLA            D18, D4, V2.D[1] }
        _D4 = *(_QWORD *)(v626 + 944);
        __asm { FMLA            D16, D4, V2.D[1] }
        _D4 = *(_QWORD *)(v626 + 1064);
        __asm { FMLA            D6, D4, V2.D[1] }
        *(_QWORD *)&_Q2 = v56[14];
        _Q0.f64[0] = _Q0.f64[0] + *(double *)&_Q2 * *(double *)(v626 + 112);
        v1089 = _D1 + *(double *)&_Q2 * *(double *)(v626 + 232);
        v1090 = _D3 + *(double *)&_Q2 * *(double *)(v626 + 352);
        v1091 = _D5 + *(double *)&_Q2 * *(double *)(v626 + 472);
        v1092 = _D7 + *(double *)&_Q2 * *(double *)(v626 + 592);
        v1093 = _D17 + *(double *)&_Q2 * *(double *)(v626 + 712);
        v1094 = _D18 + *(double *)&_Q2 * *(double *)(v626 + 832);
        v1095 = _D16 + *(double *)&_Q2 * *(double *)(v626 + 952);
        *(double *)&_Q2 = _D6 + *(double *)&_Q2 * *(double *)(v626 + 1072);
        v1096 = v1068[1] + v1089;
        v1097 = v1068[2] + v1090;
        v1098 = v1068[3] + v1091;
        v1099 = v1068[4] + v1092;
        v1100 = v1068[5] + v1093;
        v1101 = v1068[6] + v1094;
        v1102 = v1068[7] + v1095;
        *v1068 = *v1068 + _Q0.f64[0];
        v1068[1] = v1096;
        v1068[2] = v1097;
        v1068[3] = v1098;
        _Q0.f64[0] = v1068[8] + *(double *)&_Q2;
        v1068[4] = v1099;
        v1068[5] = v1100;
        v1068[6] = v1101;
        v1068[7] = v1102;
        v1068[8] = _Q0.f64[0];
      }
    }
    if (!v53)
    {
      v21 = v1479;
      goto LABEL_52;
    }
    v21 = v1479;
    if (v42 == 0xFFFFFFFF)
      goto LABEL_7;
LABEL_48:
    v1103 = &STACK[0x18418];
    v1104 = &STACK[0x183F8];
    result = (float64x2_t **)(v55 + 8 * v42);
    do
    {
      while (1)
      {
        v1148 = *v1104++;
        v1147 = v1148;
        *(_QWORD *)&_Q0.f64[0] = v57[14];
        v1150 = *((int8x16_t *)v57 + 5);
        v1149 = *((int8x16_t *)v57 + 6);
        v1152 = *((int8x16_t *)v57 + 3);
        v1151 = *((int8x16_t *)v57 + 4);
        v1154 = *((int8x16_t *)v57 + 1);
        v1153 = *((int8x16_t *)v57 + 2);
        *(_QWORD *)&_D2 = vextq_s8(v1149, v1149, 8uLL).u64[0];
        v1156 = *(int8x16_t *)v57;
        *(_QWORD *)&_D4 = vextq_s8(v1150, v1150, 8uLL).u64[0];
        *(_QWORD *)&_D6 = vextq_s8(v1151, v1151, 8uLL).u64[0];
        *(_QWORD *)&_D16 = vextq_s8(v1152, v1152, 8uLL).u64[0];
        *(_QWORD *)&_D18 = vextq_s8(v1153, v1153, 8uLL).u64[0];
        *(_QWORD *)&_D20 = vextq_s8(v1154, v1154, 8uLL).u64[0];
        *(_QWORD *)&_D22 = vextq_s8(v1156, v1156, 8uLL).u64[0];
        if (v1148 > v42)
          break;
        v1105 = (__int128 *)*v1103++;
        _Q24 = *v1105;
        _Q25 = *(__int128 *)((char *)v1105 + 120);
        __asm
        {
          FMLA            D23, D22, V24.D[1]
          FMLA            D24, D22, V25.D[1]
        }
        _Q25 = v1105[15];
        __asm { FMLA            D21, D22, V25.D[1] }
        _Q22 = v1105[1];
        __asm { FMLA            D23, D20, V22.D[1] }
        _Q22 = *(__int128 *)((char *)v1105 + 136);
        __asm { FMLA            D24, D20, V22.D[1] }
        _Q22 = v1105[16];
        __asm { FMLA            D21, D20, V22.D[1] }
        _Q19 = v1105[2];
        __asm { FMLA            D23, D18, V19.D[1] }
        _Q19 = *(__int128 *)((char *)v1105 + 152);
        __asm { FMLA            D24, D18, V19.D[1] }
        _Q19 = v1105[17];
        __asm { FMLA            D21, D18, V19.D[1] }
        _Q17 = v1105[3];
        __asm { FMLA            D23, D16, V17.D[1] }
        _Q17 = *(__int128 *)((char *)v1105 + 168);
        __asm { FMLA            D24, D16, V17.D[1] }
        _Q17 = v1105[18];
        __asm { FMLA            D21, D16, V17.D[1] }
        _Q7 = v1105[4];
        __asm { FMLA            D23, D6, V7.D[1] }
        _Q7 = *(__int128 *)((char *)v1105 + 184);
        __asm { FMLA            D24, D6, V7.D[1] }
        _Q7 = v1105[19];
        __asm { FMLA            D21, D6, V7.D[1] }
        _Q5 = v1105[5];
        __asm { FMLA            D23, D4, V5.D[1] }
        _Q5 = *(__int128 *)((char *)v1105 + 200);
        __asm { FMLA            D24, D4, V5.D[1] }
        _Q5 = v1105[20];
        __asm { FMLA            D21, D4, V5.D[1] }
        _Q3 = v1105[6];
        __asm { FMLA            D23, D2, V3.D[1] }
        _Q3 = *(__int128 *)((char *)v1105 + 216);
        __asm { FMLA            D24, D2, V3.D[1] }
        _Q3 = v1105[21];
        __asm { FMLA            D21, D2, V3.D[1] }
        v1141 = _D23 + _Q0.f64[0] * *((double *)v1105 + 14);
        v1142 = *(double *)&_Q24 + _Q0.f64[0] * *((double *)v1105 + 29);
        v1143 = _D21 + _Q0.f64[0] * *((double *)v1105 + 44);
        v1144 = (double *)&result[196 * v1147];
        v1145 = v1144[196] + v1142;
        *v1144 = *v1144 + v1141;
        v1146 = v1144[392] + v1143;
        v1144[196] = v1145;
        v1144[392] = v1146;
        if (!--v53)
          goto LABEL_52;
      }
      v1163 = *v1103++;
      v1164 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v1163, *(int64x2_t *)(v1163 + 120)), *(double *)v1156.i64), (float64x2_t)vzip2q_s64(*(int64x2_t *)v1163, *(int64x2_t *)(v1163 + 120)), _D22);
      _Q24 = *(_OWORD *)(v1163 + 240);
      __asm { FMLA            D21, D22, V24.D[1] }
      _Q22 = *(_OWORD *)(v1163 + 256);
      __asm { FMLA            D21, D20, V22.D[1] }
      v1169 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v1164, (float64x2_t)vzip1q_s64(*(int64x2_t *)(v1163 + 16), *(int64x2_t *)(v1163 + 136)), *(double *)v1154.i64), (float64x2_t)vzip2q_s64(*(int64x2_t *)(v1163 + 16), *(int64x2_t *)(v1163 + 136)), _D20), (float64x2_t)vzip1q_s64(*(int64x2_t *)(v1163 + 32), *(int64x2_t *)(v1163 + 152)), *(double *)v1153.i64), (float64x2_t)vzip2q_s64(*(int64x2_t *)(v1163 + 32), *(int64x2_t *)(v1163 + 152)), _D18);
      _Q19 = *(_OWORD *)(v1163 + 272);
      __asm { FMLA            D21, D18, V19.D[1] }
      _Q17 = *(_OWORD *)(v1163 + 288);
      __asm { FMLA            D21, D16, V17.D[1] }
      v1174 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v1169, (float64x2_t)vzip1q_s64(*(int64x2_t *)(v1163 + 48), *(int64x2_t *)(v1163 + 168)), *(double *)v1152.i64), (float64x2_t)vzip2q_s64(*(int64x2_t *)(v1163 + 48), *(int64x2_t *)(v1163 + 168)), _D16), (float64x2_t)vzip1q_s64(*(int64x2_t *)(v1163 + 64), *(int64x2_t *)(v1163 + 184)), *(double *)v1151.i64), (float64x2_t)vzip2q_s64(*(int64x2_t *)(v1163 + 64), *(int64x2_t *)(v1163 + 184)), _D6);
      _Q7 = *(_OWORD *)(v1163 + 304);
      __asm { FMLA            D21, D6, V7.D[1] }
      _Q5 = *(_OWORD *)(v1163 + 320);
      __asm { FMLA            D21, D4, V5.D[1] }
      v1179 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v1174, (float64x2_t)vzip1q_s64(*(int64x2_t *)(v1163 + 80), *(int64x2_t *)(v1163 + 200)), *(double *)v1150.i64), (float64x2_t)vzip2q_s64(*(int64x2_t *)(v1163 + 80), *(int64x2_t *)(v1163 + 200)), _D4), (float64x2_t)vzip1q_s64(*(int64x2_t *)(v1163 + 96), *(int64x2_t *)(v1163 + 216)), *(double *)v1149.i64), (float64x2_t)vzip2q_s64(*(int64x2_t *)(v1163 + 96), *(int64x2_t *)(v1163 + 216)), _D2);
      _Q3 = *(_OWORD *)(v1163 + 336);
      __asm { FMLA            D21, D2, V3.D[1] }
      v1182.f64[0] = *(float64_t *)(v1163 + 112);
      v1182.f64[1] = *(float64_t *)(v1163 + 232);
      v1183 = vmlaq_n_f64(v1179, v1182, _Q0.f64[0]);
      _Q0.f64[0] = _D21 + *(double *)(v1163 + 352) * _Q0.f64[0];
      v1184 = (float64x2_t *)(v55 + 1568 * v42 + 8 * v1147);
      v1182.f64[0] = v1184[1].f64[0];
      _Q0 = vaddq_f64(v1182, _Q0);
      *v1184 = vaddq_f64(*v1184, v1183);
      v1184[1].f64[0] = _Q0.f64[0];
      --v53;
    }
    while (v53);
LABEL_52:
    if (v623)
      goto LABEL_53;
    if (v42 != 0xFFFFFFFF)
    {
      v1214 = (int64x2_t **)&STACK[0x183E8];
      v1215 = &STACK[0x183E0];
      do
      {
        while (1)
        {
          v1367 = *(_DWORD *)v1215;
          v1215 = (unint64_t *)((char *)v1215 + 4);
          v1366 = v1367;
          if (v1367 > v42)
            break;
          result = (float64x2_t **)*v1214;
          _Q5 = *(int8x16_t *)v57;
          _D1 = (*v1214)->i64[1];
          __asm { FMLA            D0, D1, V5.D[1] }
          _D2 = (*v1214)[8].i64[0];
          __asm { FMLA            D1, D2, V5.D[1] }
          _D3 = (*v1214)[15].i64[1];
          __asm { FMLA            D2, D3, V5.D[1] }
          _D4 = (*v1214)[23].i64[0];
          __asm { FMLA            D3, D4, V5.D[1] }
          _D6 = (*v1214)[30].i64[1];
          __asm { FMLA            D4, D6, V5.D[1] }
          _D7 = (*v1214)[38].i64[0];
          __asm { FMLA            D6, D7, V5.D[1] }
          _D18 = (*v1214)[45].i64[1];
          __asm { FMLA            D7, D18, V5.D[1] }
          _D17 = (*v1214)[53].i64[0];
          __asm { FMLA            D18, D17, V5.D[1] }
          _D16 = (*v1214)[60].i64[1];
          __asm { FMLA            D17, D16, V5.D[1] }
          _Q5 = *((_OWORD *)v57 + 1);
          _D16 = (*v1214)[1].i64[1];
          __asm { FMLA            D0, D16, V5.D[1] }
          _D16 = (*v1214)[9].i64[0];
          __asm { FMLA            D1, D16, V5.D[1] }
          _D16 = (*v1214)[16].i64[1];
          __asm { FMLA            D2, D16, V5.D[1] }
          _D16 = (*v1214)[24].i64[0];
          __asm { FMLA            D3, D16, V5.D[1] }
          _D16 = (*v1214)[31].i64[1];
          __asm { FMLA            D4, D16, V5.D[1] }
          _D16 = (*v1214)[39].i64[0];
          __asm { FMLA            D6, D16, V5.D[1] }
          _D16 = (*v1214)[46].i64[1];
          __asm { FMLA            D7, D16, V5.D[1] }
          _D16 = (*v1214)[54].i64[0];
          __asm { FMLA            D18, D16, V5.D[1] }
          _D16 = (*v1214)[61].i64[1];
          __asm { FMLA            D17, D16, V5.D[1] }
          _Q5 = *((_OWORD *)v57 + 2);
          _D16 = (*v1214)[2].i64[1];
          __asm { FMLA            D0, D16, V5.D[1] }
          _D16 = (*v1214)[10].i64[0];
          __asm { FMLA            D1, D16, V5.D[1] }
          _D16 = (*v1214)[17].i64[1];
          __asm { FMLA            D2, D16, V5.D[1] }
          _D16 = (*v1214)[25].i64[0];
          __asm { FMLA            D3, D16, V5.D[1] }
          _D16 = (*v1214)[32].i64[1];
          __asm { FMLA            D4, D16, V5.D[1] }
          _D16 = (*v1214)[40].i64[0];
          __asm { FMLA            D6, D16, V5.D[1] }
          _D16 = (*v1214)[47].i64[1];
          __asm { FMLA            D7, D16, V5.D[1] }
          _D16 = (*v1214)[55].i64[0];
          __asm { FMLA            D18, D16, V5.D[1] }
          _D16 = (*v1214)[62].i64[1];
          __asm { FMLA            D17, D16, V5.D[1] }
          _Q5 = *((_OWORD *)v57 + 3);
          _D16 = (*v1214)[3].i64[1];
          __asm { FMLA            D0, D16, V5.D[1] }
          _D16 = (*v1214)[11].i64[0];
          __asm { FMLA            D1, D16, V5.D[1] }
          _D16 = (*v1214)[18].i64[1];
          __asm { FMLA            D2, D16, V5.D[1] }
          _D16 = (*v1214)[26].i64[0];
          __asm { FMLA            D3, D16, V5.D[1] }
          _D16 = (*v1214)[33].i64[1];
          __asm { FMLA            D4, D16, V5.D[1] }
          _D16 = (*v1214)[41].i64[0];
          __asm { FMLA            D6, D16, V5.D[1] }
          _D16 = (*v1214)[48].i64[1];
          __asm { FMLA            D7, D16, V5.D[1] }
          _D16 = (*v1214)[56].i64[0];
          __asm { FMLA            D18, D16, V5.D[1] }
          _D16 = (*v1214)[63].i64[1];
          __asm { FMLA            D17, D16, V5.D[1] }
          _Q5 = *((_OWORD *)v57 + 4);
          _D16 = (*v1214)[4].i64[1];
          __asm { FMLA            D0, D16, V5.D[1] }
          _D16 = (*v1214)[12].i64[0];
          __asm { FMLA            D1, D16, V5.D[1] }
          _D16 = (*v1214)[19].i64[1];
          __asm { FMLA            D2, D16, V5.D[1] }
          _D16 = (*v1214)[27].i64[0];
          __asm { FMLA            D3, D16, V5.D[1] }
          _D16 = (*v1214)[34].i64[1];
          __asm { FMLA            D4, D16, V5.D[1] }
          _D16 = (*v1214)[42].i64[0];
          __asm { FMLA            D6, D16, V5.D[1] }
          _D16 = (*v1214)[49].i64[1];
          __asm { FMLA            D7, D16, V5.D[1] }
          _D16 = (*v1214)[57].i64[0];
          __asm { FMLA            D18, D16, V5.D[1] }
          _D16 = (*v1214)[64].i64[1];
          __asm { FMLA            D17, D16, V5.D[1] }
          _Q5 = *((_OWORD *)v57 + 5);
          _D16 = (*v1214)[5].i64[1];
          __asm { FMLA            D0, D16, V5.D[1] }
          _D16 = (*v1214)[13].i64[0];
          __asm { FMLA            D1, D16, V5.D[1] }
          _D16 = (*v1214)[20].i64[1];
          __asm { FMLA            D2, D16, V5.D[1] }
          _D16 = (*v1214)[28].i64[0];
          __asm { FMLA            D3, D16, V5.D[1] }
          _D16 = (*v1214)[35].i64[1];
          __asm { FMLA            D4, D16, V5.D[1] }
          _D16 = (*v1214)[43].i64[0];
          __asm { FMLA            D6, D16, V5.D[1] }
          _D16 = (*v1214)[50].i64[1];
          __asm { FMLA            D7, D16, V5.D[1] }
          _D16 = (*v1214)[58].i64[0];
          __asm { FMLA            D18, D16, V5.D[1] }
          _D16 = (*v1214)[65].i64[1];
          __asm { FMLA            D17, D16, V5.D[1] }
          _Q5 = *((_OWORD *)v57 + 6);
          _D16 = (*v1214)[6].i64[1];
          __asm { FMLA            D0, D16, V5.D[1] }
          _D16 = (*v1214)[14].i64[0];
          __asm { FMLA            D1, D16, V5.D[1] }
          _D16 = (*v1214)[21].i64[1];
          __asm { FMLA            D2, D16, V5.D[1] }
          _D16 = (*v1214)[29].i64[0];
          __asm { FMLA            D3, D16, V5.D[1] }
          _D16 = (*v1214)[36].i64[1];
          __asm { FMLA            D4, D16, V5.D[1] }
          _D16 = (*v1214)[44].i64[0];
          __asm { FMLA            D6, D16, V5.D[1] }
          _D16 = (*v1214)[51].i64[1];
          __asm { FMLA            D7, D16, V5.D[1] }
          _D16 = (*v1214)[59].i64[0];
          __asm { FMLA            D18, D16, V5.D[1] }
          _D16 = (*v1214)[66].i64[1];
          __asm { FMLA            D17, D16, V5.D[1] }
          *(_QWORD *)&_Q5 = v57[14];
          v1349 = _D0 + *(double *)&_Q5 * *(double *)(*v1214)[7].i64;
          v1350 = _D1 + *(double *)&_Q5 * *(double *)&(*v1214)[14].i64[1];
          v1351 = _D2 + *(double *)&_Q5 * *(double *)(*v1214)[22].i64;
          v1352 = _D3 + *(double *)&_Q5 * *(double *)&(*v1214)[29].i64[1];
          v1353 = _D4 + *(double *)&_Q5 * *(double *)(*v1214)[37].i64;
          v1354 = _D6 + *(double *)&_Q5 * *(double *)&(*v1214)[44].i64[1];
          v1355 = _D7 + *(double *)&_Q5 * *(double *)(*v1214)[52].i64;
          v1356 = _D18 + *(double *)&_Q5 * *(double *)&(*v1214)[59].i64[1];
          *(double *)&_Q5 = _D17 + *(double *)&_Q5 * *(double *)(*v1214)[67].i64;
          v1357 = (double *)(v55 + 8 * v42 + 1568 * v1366);
          v1358 = v1357[196] + v1350;
          v1359 = v1357[392] + v1351;
          v1360 = v1357[588] + v1352;
          v1361 = v1357[784] + v1353;
          v1362 = v1357[980] + v1354;
          v1363 = v1357[1176] + v1355;
          v1364 = v1357[1372] + v1356;
          *v1357 = *v1357 + v1349;
          v1357[196] = v1358;
          v1357[392] = v1359;
          v1357[588] = v1360;
          v1357[784] = v1361;
          v1357[980] = v1362;
          v1357[1176] = v1363;
          v1365 = v1357[1568] + *(double *)&_Q5;
          v1357[1372] = v1364;
          v1357[1568] = v1365;
          ++v1214;
          if (!--v54)
            goto LABEL_53;
        }
        result = (float64x2_t **)*v1214;
        v1368 = *((float64x2_t *)v57 + 1);
        _Q28 = (*v1214)[60];
        _D26 = v57[1];
        __asm { FMLA            D25, D26, V28.D[1] }
        _Q3 = (*v1214)[61];
        _D17 = v57[3];
        __asm { FMLA            D25, D17, V3.D[1] }
        _Q3 = *((float64x2_t *)v57 + 2);
        v1376 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(**v1214, *(int64x2_t *)((char *)*v1214 + 120)), *(double *)v57), (float64x2_t)vzip2q_s64(**v1214, *(int64x2_t *)((char *)*v1214 + 120)), *(float64x2_t *)v57, 1), (float64x2_t)vzip1q_s64((*v1214)[1], *(int64x2_t *)((char *)*v1214 + 136)), v1368.f64[0]), (float64x2_t)vzip2q_s64((*v1214)[1], *(int64x2_t *)((char *)*v1214 + 136)), v1368, 1), (float64x2_t)vzip1q_s64((*v1214)[2], *(int64x2_t *)((char *)*v1214 + 152)), _Q3.f64[0]), (float64x2_t)vzip2q_s64((*v1214)[2], *(int64x2_t *)((char *)*v1214 + 152)), _Q3,
                  1);
        v1377 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((*v1214)[15], *(int64x2_t *)((char *)*v1214 + 360)), *(double *)v57), (float64x2_t)vzip2q_s64((*v1214)[15], *(int64x2_t *)((char *)*v1214 + 360)), *(float64x2_t *)v57, 1), (float64x2_t)vzip1q_s64((*v1214)[16], *(int64x2_t *)((char *)*v1214 + 376)), v1368.f64[0]), (float64x2_t)vzip2q_s64((*v1214)[16], *(int64x2_t *)((char *)*v1214 + 376)), v1368, 1), (float64x2_t)vzip1q_s64((*v1214)[17], *(int64x2_t *)((char *)*v1214 + 392)), _Q3.f64[0]), (float64x2_t)vzip2q_s64((*v1214)[17], *(int64x2_t *)((char *)*v1214 + 392)), _Q3,
                  1);
        v1378 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((*v1214)[30], *(int64x2_t *)((char *)*v1214 + 600)), *(double *)v57), (float64x2_t)vzip2q_s64((*v1214)[30], *(int64x2_t *)((char *)*v1214 + 600)), *(float64x2_t *)v57, 1), (float64x2_t)vzip1q_s64((*v1214)[31], *(int64x2_t *)((char *)*v1214 + 616)), v1368.f64[0]), (float64x2_t)vzip2q_s64((*v1214)[31], *(int64x2_t *)((char *)*v1214 + 616)), v1368, 1), (float64x2_t)vzip1q_s64((*v1214)[32], *(int64x2_t *)((char *)*v1214 + 632)), _Q3.f64[0]), (float64x2_t)vzip2q_s64((*v1214)[32], *(int64x2_t *)((char *)*v1214 + 632)), _Q3,
                  1);
        v1379 = *((float64x2_t *)v57 + 3);
        v1380 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((*v1214)[45], *(int64x2_t *)((char *)*v1214 + 840)), *(double *)v57), (float64x2_t)vzip2q_s64((*v1214)[45], *(int64x2_t *)((char *)*v1214 + 840)), *(float64x2_t *)v57, 1), (float64x2_t)vzip1q_s64((*v1214)[46], *(int64x2_t *)((char *)*v1214 + 856)), v1368.f64[0]), (float64x2_t)vzip2q_s64((*v1214)[46], *(int64x2_t *)((char *)*v1214 + 856)), v1368, 1), (float64x2_t)vzip1q_s64((*v1214)[47], *(int64x2_t *)((char *)*v1214 + 872)), _Q3.f64[0]), (float64x2_t)vzip2q_s64((*v1214)[47], *(int64x2_t *)((char *)*v1214 + 872)), _Q3,
                  1);
        _Q21 = (*v1214)[62];
        *(_QWORD *)&_Q3.f64[0] = v57[5];
        __asm { FMLA            D25, D3, V21.D[1] }
        _Q3 = (*v1214)[63];
        v1384 = (*v1214)[4];
        v1385 = *(int64x2_t *)((char *)*v1214 + 184);
        _D6 = v57[7];
        __asm { FMLA            D25, D6, V3.D[1] }
        _Q3 = *((float64x2_t *)v57 + 4);
        v1389 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1376, (float64x2_t)vzip1q_s64((*v1214)[3], *(int64x2_t *)((char *)*v1214 + 168)), v1379.f64[0]), (float64x2_t)vzip2q_s64((*v1214)[3], *(int64x2_t *)((char *)*v1214 + 168)), v1379, 1), (float64x2_t)vzip1q_s64(v1384, v1385), _Q3.f64[0]);
        v1390 = (*v1214)[19];
        v1391 = (float64x2_t)vzip2q_s64(v1384, v1385);
        v1392 = *(int64x2_t *)((char *)*v1214 + 424);
        v1393 = vmlaq_laneq_f64(v1389, v1391, _Q3, 1);
        v1394 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1377, (float64x2_t)vzip1q_s64((*v1214)[18], *(int64x2_t *)((char *)*v1214 + 408)), v1379.f64[0]), (float64x2_t)vzip2q_s64((*v1214)[18], *(int64x2_t *)((char *)*v1214 + 408)), v1379, 1), (float64x2_t)vzip1q_s64(v1390, v1392), _Q3.f64[0]);
        v1395 = (*v1214)[34];
        v1396 = (float64x2_t)vzip2q_s64(v1390, v1392);
        v1397 = *(int64x2_t *)((char *)*v1214 + 664);
        v1398 = vmlaq_laneq_f64(v1394, v1396, _Q3, 1);
        v1399 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1378, (float64x2_t)vzip1q_s64((*v1214)[33], *(int64x2_t *)((char *)*v1214 + 648)), v1379.f64[0]), (float64x2_t)vzip2q_s64((*v1214)[33], *(int64x2_t *)((char *)*v1214 + 648)), v1379, 1), (float64x2_t)vzip1q_s64(v1395, v1397), _Q3.f64[0]);
        v1400 = (*v1214)[49];
        v1401 = (float64x2_t)vzip2q_s64(v1395, v1397);
        v1402 = *(int64x2_t *)((char *)*v1214 + 904);
        v1403 = vmlaq_laneq_f64(v1399, v1401, _Q3, 1);
        v1404 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v1380, (float64x2_t)vzip1q_s64((*v1214)[48], *(int64x2_t *)((char *)*v1214 + 888)), v1379.f64[0]), (float64x2_t)vzip2q_s64((*v1214)[48], *(int64x2_t *)((char *)*v1214 + 888)), v1379, 1), (float64x2_t)vzip1q_s64(v1400, v1402), _Q3.f64[0]);
        v1405 = (*v1214)[5];
        v1406 = (float64x2_t)vzip2q_s64(v1400, v1402);
        _Q6 = *((float64x2_t *)v57 + 5);
        v1408 = vmlaq_laneq_f64(v1404, v1406, _Q3, 1);
        _Q5 = (*v1214)[64];
        *(_QWORD *)&_Q3.f64[0] = v57[9];
        __asm { FMLA            D25, D3, V5.D[1] }
        v1411 = *(int64x2_t *)((char *)*v1214 + 200);
        v1412 = vmlaq_n_f64(v1393, (float64x2_t)vzip1q_s64(v1405, v1411), _Q6.f64[0]);
        v1413 = (*v1214)[20];
        v1414 = (float64x2_t)vzip2q_s64(v1405, v1411);
        v1415 = *(int64x2_t *)((char *)*v1214 + 440);
        v1416 = vmlaq_laneq_f64(v1412, v1414, _Q6, 1);
        v1417 = vmlaq_n_f64(v1398, (float64x2_t)vzip1q_s64(v1413, v1415), _Q6.f64[0]);
        v1418 = (*v1214)[35];
        v1419 = (float64x2_t)vzip2q_s64(v1413, v1415);
        v1420 = *(int64x2_t *)((char *)*v1214 + 680);
        v1421 = vmlaq_laneq_f64(v1417, v1419, _Q6, 1);
        v1422 = vmlaq_n_f64(v1403, (float64x2_t)vzip1q_s64(v1418, v1420), _Q6.f64[0]);
        v1423 = (*v1214)[50];
        v1424 = (float64x2_t)vzip2q_s64(v1418, v1420);
        v1425 = *(int64x2_t *)((char *)*v1214 + 920);
        v1426 = vmlaq_laneq_f64(v1422, v1424, _Q6, 1);
        v1427 = vmlaq_n_f64(v1408, (float64x2_t)vzip1q_s64(v1423, v1425), _Q6.f64[0]);
        v1428 = (*v1214)[6];
        v1429 = (float64x2_t)vzip2q_s64(v1423, v1425);
        v1430 = *(int64x2_t *)((char *)*v1214 + 216);
        v1431 = vmlaq_laneq_f64(v1427, v1429, _Q6, 1);
        _Q4 = (*v1214)[65];
        *(_QWORD *)&_Q6.f64[0] = v57[11];
        __asm { FMLA            D25, D6, V4.D[1] }
        _Q4 = *((float64x2_t *)v57 + 6);
        v1435 = vmlaq_n_f64(v1416, (float64x2_t)vzip1q_s64(v1428, v1430), _Q4.f64[0]);
        v1436 = (*v1214)[21];
        v1437 = (float64x2_t)vzip2q_s64(v1428, v1430);
        v1438 = *(int64x2_t *)((char *)*v1214 + 456);
        v1439 = vmlaq_laneq_f64(v1435, v1437, _Q4, 1);
        v1440 = vmlaq_n_f64(v1421, (float64x2_t)vzip1q_s64(v1436, v1438), _Q4.f64[0]);
        v1441 = (*v1214)[36];
        v1442 = (float64x2_t)vzip2q_s64(v1436, v1438);
        v1443 = *(int64x2_t *)((char *)*v1214 + 696);
        v1444 = vmlaq_laneq_f64(v1440, v1442, _Q4, 1);
        v1445 = vmlaq_n_f64(v1426, (float64x2_t)vzip1q_s64(v1441, v1443), _Q4.f64[0]);
        v1446 = (float64x2_t)(*v1214)[51];
        v1447 = (float64x2_t)vzip2q_s64(v1441, v1443);
        v1448 = *(int64x2_t *)((char *)*v1214 + 936);
        v1449 = vmlaq_laneq_f64(v1445, v1447, _Q4, 1);
        v1450 = vmlaq_n_f64(v1431, (float64x2_t)vzip1q_s64((int64x2_t)v1446, v1448), _Q4.f64[0]);
        v1451 = (float64x2_t)vzip2q_s64((int64x2_t)v1446, v1448);
        *(_QWORD *)&v1446.f64[0] = (*v1214)[7].i64[0];
        v1452 = vmlaq_laneq_f64(v1450, v1451, _Q4, 1);
        _Q3 = (float64x2_t)(*v1214)[66];
        *(_QWORD *)&_Q4.f64[0] = v57[13];
        __asm { FMLA            D25, D4, V3.D[1] }
        *(_QWORD *)&_Q3.f64[0] = (*v1214)[22].i64[0];
        *(_QWORD *)&_Q4.f64[0] = v57[14];
        *(_QWORD *)&v1446.f64[1] = (*v1214)[14].i64[1];
        *(_QWORD *)&_Q3.f64[1] = (*v1214)[29].i64[1];
        v1455 = vmlaq_n_f64(v1439, v1446, _Q4.f64[0]);
        v1456 = vmlaq_n_f64(v1444, _Q3, _Q4.f64[0]);
        *(_QWORD *)&_Q3.f64[0] = (*v1214)[37].i64[0];
        *(_QWORD *)&_Q3.f64[1] = (*v1214)[44].i64[1];
        v1457 = vmlaq_n_f64(v1449, _Q3, _Q4.f64[0]);
        *(_QWORD *)&_Q3.f64[0] = (*v1214)[52].i64[0];
        *(_QWORD *)&_Q3.f64[1] = (*v1214)[59].i64[1];
        v1458 = vmlaq_n_f64(v1452, _Q3, _Q4.f64[0]);
        _Q3.f64[0] = _D25 + *(double *)(*v1214)[67].i64 * _Q4.f64[0];
        v1459 = v55 + 1568 * v42 + 8 * v1366;
        _Q4.f64[0] = *(float64_t *)(v1459 + 64);
        *(_QWORD *)&_Q3.f64[0] = *(_OWORD *)&vaddq_f64(_Q4, _Q3);
        v1460 = vaddq_f64(*(float64x2_t *)(v1459 + 48), v1458);
        v1461 = vaddq_f64(*(float64x2_t *)(v1459 + 16), v1456);
        *(float64x2_t *)v1459 = vaddq_f64(*(float64x2_t *)v1459, v1455);
        *(float64x2_t *)(v1459 + 16) = v1461;
        *(float64x2_t *)(v1459 + 32) = vaddq_f64(*(float64x2_t *)(v1459 + 32), v1457);
        *(float64x2_t *)(v1459 + 48) = v1460;
        *(float64_t *)(v1459 + 64) = _Q3.f64[0];
        ++v1214;
        --v54;
      }
      while (v54);
LABEL_53:
      if (v42 != 0xFFFFFFFF)
      {
        _Q7 = *(float64x2_t *)v57;
        _D17 = v57[1];
        __asm { FMLA            D16, D17, V7.D[1] }
        *(_QWORD *)&_Q7.f64[0] = v57[3];
        __asm { FMLA            D16, D7, V6.D[1] }
        _D6 = v57[5];
        __asm { FMLA            D16, D6, V5.D[1] }
        _D5 = v57[7];
        __asm { FMLA            D16, D5, V4.D[1] }
        _D4 = v57[9];
        __asm { FMLA            D16, D4, V3.D[1] }
        _D3 = v57[11];
        __asm { FMLA            D16, D3, V2.D[1] }
        _D2 = v57[13];
        __asm { FMLA            D16, D2, V1.D[1] }
        *(double *)(v55 + 8 * v42 + 1568 * v42) = *(double *)(v55 + 8 * v42 + 1568 * v42)
                                                                + _D16
                                                                + *((double *)v57 + 14) * *((double *)v57 + 14);
        _Q2 = *((_OWORD *)v56 + 5);
        _Q1 = *((_OWORD *)v56 + 6);
        _Q4 = *((_OWORD *)v56 + 3);
        _Q3 = *((_OWORD *)v56 + 4);
        _Q6 = *((_OWORD *)v56 + 1);
        _Q5 = *((_OWORD *)v56 + 2);
        _Q7 = *(float64x2_t *)v56;
        _D23 = v57[1];
        __asm { FMLA            D24, D23, V7.D[1] }
        *(_QWORD *)&_Q7.f64[0] = v57[3];
        __asm { FMLA            D24, D7, V6.D[1] }
        *(_QWORD *)&_Q6 = v57[5];
        __asm { FMLA            D24, D6, V5.D[1] }
        *(_QWORD *)&_Q5 = v57[7];
        __asm { FMLA            D24, D5, V4.D[1] }
        *(_QWORD *)&_Q4 = v57[9];
        __asm { FMLA            D24, D4, V3.D[1] }
        *(_QWORD *)&_Q3 = v57[11];
        __asm { FMLA            D24, D3, V2.D[1] }
        *(_QWORD *)&_Q2 = v57[13];
        __asm { FMLA            D24, D2, V1.D[1] }
        *(double *)(v20 + 8 * v42) = *(double *)(v20 + 8 * v42) + _D24 + *((double *)v56 + 14) * *((double *)v57 + 14);
      }
    }
LABEL_7:
    ++v19;
    _Q7 = *(float64x2_t *)v56;
    _D17 = v56[1];
    __asm { FMLA            D16, D17, V7.D[1] }
    *(_QWORD *)&_Q7.f64[0] = v56[3];
    __asm { FMLA            D16, D7, V6.D[1] }
    _D6 = v56[5];
    __asm { FMLA            D16, D6, V5.D[1] }
    _D5 = v56[7];
    __asm { FMLA            D16, D5, V4.D[1] }
    _D4 = v56[9];
    __asm { FMLA            D16, D4, V3.D[1] }
    _D3 = v56[11];
    __asm { FMLA            D16, D3, V2.D[1] }
    _D2 = v56[13];
    __asm { FMLA            D16, D2, V1.D[1] }
    v21 = v21 + _D16 + *((double *)v56 + 14) * *((double *)v56 + 14);
    v40 = vaddq_f64(*(float64x2_t *)(v5 + 43728), (float64x2_t)0);
    *(float64x2_t *)(v5 + 43712) = vaddq_f64(*(float64x2_t *)(v5 + 43712), (float64x2_t)0);
    *(float64x2_t *)(v5 + 43728) = v40;
    v6 += 4;
    if (v6 == v1475)
      goto LABEL_63;
  }
  *(_BYTE *)v2[4] = 1;
  *((_BYTE *)&STACK[0x183A0] + v19) = 0;
  v1462 = vaddq_f64(*(float64x2_t *)(v5 + 43728), (float64x2_t)0);
  *(float64x2_t *)(v5 + 43712) = vaddq_f64(*(float64x2_t *)(v5 + 43712), (float64x2_t)0);
  *(float64x2_t *)(v5 + 43728) = v1462;
LABEL_63:
  v1463 = (_BYTE *)v2[4];
  *(_BYTE *)(v5 + 31280) = *v1463;
  if (*v1463)
  {
    v1464 = *(unsigned int *)(v5 + 31720);
    if ((_DWORD)v1464)
      goto LABEL_65;
LABEL_74:
    v1467 = 0.0;
  }
  else
  {
    v1472 = *v2;
    if (*(_DWORD *)(*v2 + 8) == -1
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 188, (uint64_t)"write_channel != kInvalidChannel && \"DMA write request not permitted.\"", 70, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *(_DWORD *)v1472 < 0x857C0u&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 191, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    result = (float64x2_t **)memcpy((void *)(*(_QWORD *)(v1472 + 16) + 511296), &STACK[0xF940], 0x8A80uLL);
    v1473 = vaddq_f64(*(float64x2_t *)(v5 + 43856), (float64x2_t)0);
    *(float64x2_t *)(v5 + 43840) = vaddq_f64(*(float64x2_t *)(v5 + 43840), (float64x2_t)0);
    *(float64x2_t *)(v5 + 43856) = v1473;
    *(double *)v2[6] = v21 * 0.5;
    *(double *)v2[7] = v21 * 0.5 + *(double *)v2[7];
    v1464 = *(unsigned int *)(v5 + 31720);
    if (!(_DWORD)v1464)
      goto LABEL_74;
LABEL_65:
    v1465 = (*v1480 + 3) & 0xFFFFFFFC;
    v1466 = (double *)(v5 + 31712);
    v1467 = 0.0;
    do
    {
      v1468 = *((unsigned int *)v1466 - 4);
      v1469 = *(unsigned int *)(v5 + 31248 + 4 * v1468);
      if ((_DWORD)v1469 != -1)
      {
        v1470 = *v1466 * (*(double *)(v2[2] + 8 * v1468 + 1992) - *(v1466 - 1));
        v1471 = 8 * (v1469 - v1465 + 196 * (_DWORD)v1469 + 196);
        *(double *)(v5 + 44352 + v1471) = *(double *)(v5 + 44352 + v1471) + *v1466 * *v1466;
        *(double *)(v5 + 351680 + 8 * v1469) = *(double *)(v5 + 351680 + 8 * v1469) + v1470 * *v1466;
        v1467 = v1467 + v1470 * v1470;
      }
      v1466 += 3;
      --v1464;
    }
    while (v1464);
  }
  v1474 = v1467 * 0.5;
  *(double *)(v2[6] + 32) = v1474;
  *(double *)v2[7] = v1474 + *(double *)v2[7];
  return result;
}

void sub_20FC982E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, float64x2_t *a20)
{
  float64x2_t v20;

  v20 = vaddq_f64(a20[2733], (float64x2_t)0);
  a20[2732] = vaddq_f64(a20[2732], (float64x2_t)0);
  a20[2733] = v20;
  _Unwind_Resume(a1);
}

#error "20FC98308: too big function (funcsize=0)"

void sub_20FCA8EF8(_Unwind_Exception *a1)
{
  float64x2_t *v1;
  float64x2_t v2;

  v2 = vaddq_f64(v1[1], (float64x2_t)0);
  *v1 = vaddq_f64(*v1, (float64x2_t)0);
  v1[1] = v2;
  _Unwind_Resume(a1);
}

void sub_20FCA8F1C(uint64_t a1)
{
  float64x2_t v5;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  float64x2_t v20;
  unint64_t v21;
  double v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  unsigned __int8 v29;
  unsigned __int8 v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  BOOL v36;
  unint64_t *v37;
  float64x2_t v38;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  unsigned __int8 *v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  _OWORD *v63;
  unint64_t v64;
  uint64_t v65;
  int64x2_t v66;
  int64x2_t v67;
  uint64_t v68;
  int v69;
  __int128 v70;
  int v71;
  float32x2_t v72;
  unsigned int v73;
  unsigned __int8 v74;
  unsigned __int8 v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  double v80;
  double v81;
  double v82;
  __int128 v83;
  double v84;
  float64x2_t v89;
  int64x2_t v90;
  float64x2_t v91;
  __int128 v92;
  double v93;
  double v94;
  double v95;
  double v96;
  float64x2_t v98;
  int64x2_t v99;
  int8x16_t v100;
  __int128 v101;
  int8x16_t v102;
  unsigned __int8 v103;
  unsigned __int8 v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v110;
  float v111;
  double v112;
  double v113;
  unint64_t v114;
  double v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  double v122;
  float64x2_t v123;
  double v124;
  double v125;
  float64x2_t v126;
  double v127;
  float64x2_t v128;
  double v129;
  double v130;
  float64x2_t v131;
  double v132;
  float64x2_t v133;
  double v134;
  double v135;
  float64x2_t v136;
  double v137;
  float64x2_t v138;
  double v139;
  double v140;
  float64x2_t v141;
  double v142;
  float64x2_t v143;
  double v144;
  float64x2_t v145;
  double v146;
  double v147;
  double v148;
  double v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v153;
  uint64_t v154;
  int v155;
  float64x2_t v156;
  int8x16_t v157;
  double v158;
  uint64_t v159;
  uint64_t k;
  float64x2_t v161;
  int8x16_t v162;
  int8x16_t v163;
  int64x2_t v164;
  int64x2_t v165;
  float64x2_t v166;
  double v167;
  double v168;
  float64x2_t v169;
  float64x2_t v170;
  double v171;
  double v175;
  double v176;
  double v177;
  double v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  int64x2_t v182;
  int64x2_t v183;
  int64x2_t v184;
  int64x2_t v185;
  unsigned __int8 *v186;
  int v187;
  uint64_t v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  double v192;
  double v193;
  unint64_t v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t *v198;
  int v199;
  unsigned __int8 v200;
  unsigned __int8 v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v205;
  uint64_t v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  unsigned int v214;
  float64x2_t *v215;
  double v216;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v220;
  __int128 v221;
  float64x2_t v222;
  int8x16_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  int8x16_t v227;
  unint64_t v228;
  int8x16_t v229;
  int8x16_t v230;
  int8x16_t v231;
  int8x16_t v232;
  int8x16_t v233;
  int v234;
  unsigned __int8 v235;
  unsigned __int8 v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  float64x2_t v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  float64x2_t v247;
  float64x2_t v248;
  float64x2_t v249;
  int8x16_t v250;
  unint64_t v251;
  int8x16_t v252;
  int8x16_t v253;
  unint64_t *v254;
  float v255;
  unint64_t *v256;
  float32x2_t v257;
  uint64_t v258;
  unint64_t v259;
  unint64_t v260;
  __int128 *v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 *v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  unint64_t v270;
  int8x16_t v271;
  double v273;
  __int128 v274;
  unint64_t v275;
  double v276;
  unsigned __int8 v277;
  unsigned __int8 v278;
  float64x2_t v280;
  float64x2_t v282;
  float64x2_t v284;
  float64x2_t v285;
  float64x2_t v286;
  float64x2_t v287;
  double v290;
  float64x2_t v293;
  double v299;
  float64x2_t v301;
  float64x2_t v302;
  double v303;
  float64x2_t v304;
  double v305;
  double v308;
  float64x2_t v309;
  float64x2_t v310;
  float64x2_t v311;
  float64x2_t v312;
  int8x16_t v313;
  float64x2_t v314;
  float64x2_t v315;
  float64x2_t v316;
  int64x2_t v317;
  int8x16_t v318;
  double v319;
  int8x16_t v320;
  int8x16_t v321;
  double v324;
  double v325;
  float64x2_t v326;
  unint64_t v327;
  float v328;
  float64_t v329;
  long double v330;
  long double v331;
  float64x2_t v332;
  float64x2_t v333;
  long double v334;
  float64x2_t v335;
  float64x2_t v336;
  int v337;
  float64x2_t v338;
  int8x16_t v339;
  float64x2_t v340;
  int8x16_t v341;
  uint64_t v342;
  uint64_t ii;
  uint64_t v344;
  uint64_t jj;
  double v346;
  float64x2_t v348;
  __int128 v349;
  double v350;
  double v353;
  float64x2_t v354;
  float64x2_t v355;
  int8x16_t v356;
  float64x2_t v357;
  float64x2_t v358;
  float64x2_t v359;
  int64x2_t v360;
  int8x16_t v361;
  double v362;
  int8x16_t v363;
  unsigned __int8 v364;
  unsigned __int8 v365;
  __int128 v366;
  float64x2_t v367;
  float64x2_t v369;
  float64x2_t v370;
  int v372;
  long double v374;
  double v375;
  float64x2_t v376;
  float64x2_t v377;
  float64x2_t v378;
  float64x2_t v379;
  unint64_t v380;
  float64x2_t v381;
  int8x16_t v382;
  float64x2_t v383;
  float64x2_t v384;
  int8x16_t v385;
  int8x16_t v386;
  int8x16_t v387;
  int8x16_t v388;
  int8x16_t v389;
  float64x2_t v390;
  double v391;
  double v392;
  int8x16_t v393;
  double v394;
  double v395;
  int8x16_t v396;
  double v397;
  float64x2_t v398;
  float64x2_t v399;
  float64x2_t v400;
  float64x2_t v401;
  float64x2_t v402;
  float64x2_t v403;
  float64x2_t v404;
  float64x2_t v405;
  float64x2_t v406;
  float64x2_t v407;
  float64x2_t v408;
  float64x2_t v409;
  float64x2_t v410;
  float64x2_t v411;
  float64x2_t v412;
  float64x2_t v413;
  float64x2_t v414;
  float64x2_t v415;
  float64x2_t v416;
  float64x2_t v417;
  float64x2_t v418;
  float64x2_t v419;
  float64x2_t v420;
  float64x2_t v421;
  float64x2_t v422;
  float64x2_t v423;
  float64x2_t v424;
  float64x2_t v425;
  float64x2_t v426;
  float64x2_t v427;
  float64x2_t v428;
  float64x2_t v429;
  __int128 v430;
  float64x2_t v431;
  float64x2_t v432;
  float64x2_t v433;
  float64x2_t v434;
  float64x2_t v435;
  float64x2_t v436;
  float64x2_t v437;
  float64x2_t v438;
  float64x2_t v439;
  float64x2_t v440;
  unint64_t v441;
  unint64_t v442;
  unint64_t v443;
  unint64_t v444;
  unint64_t v445;
  unint64_t v446;
  unint64_t v447;
  double v448;
  float64x2_t v449;
  float64x2_t v450;
  float64x2_t v451;
  _BOOL4 v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t kk;
  uint64_t v456;
  float64x2_t v458;
  float64x2_t v459;
  uint64_t v460;
  float64x2_t v461;
  uint64_t v463;
  uint64_t v465;
  float64x2_t v467;
  float64x2_t v468;
  float64x2_t v469;
  uint64_t v470;
  float64x2_t v471;
  uint64_t v472;
  int8x16_t v474;
  uint64_t v475;
  float64x2_t v476;
  float64x2_t v480;
  double v484;
  float64x2_t v486;
  float64x2_t v487;
  float64x2_t v488;
  float64x2_t v493;
  __int128 v495;
  __int128 v496;
  _OWORD *v500;
  float32x4_t *v508;
  float32x4_t v509;
  double *v510;
  uint64_t v517;
  unint64_t v518;
  unint64_t v519;
  uint64_t v520;
  float64x2_t *v521;
  const double *v522;
  const double *v523;
  float64x2_t v524;
  float64x2_t v525;
  float64x2_t v526;
  float64x2_t v527;
  float64x2_t v528;
  float64x2_t v529;
  float64x2_t v530;
  float64x2_t v531;
  float64x2_t v532;
  float64x2_t v533;
  float64x2_t v534;
  float64x2_t v535;
  float64x2_t v536;
  float64x2_t v537;
  float64x2_t v538;
  float64x2_t v539;
  float64x2_t v540;
  float64x2_t v541;
  float64x2_t v542;
  float64x2_t v543;
  float64x2_t *v544;
  float64x2_t v545;
  float64x2_t v546;
  float64x2_t v547;
  float64x2_t v548;
  float64x2_t v549;
  float64x2_t v550;
  float64x2_t v551;
  float64x2_t v552;
  uint64_t mm;
  unint64_t v554;
  unint64_t *v555;
  unint64_t *v556;
  uint64_t v557;
  uint64_t v558;
  float64x2_t *v559;
  uint64_t v560;
  float64x2_t v561;
  const double *v562;
  int64x2_t v563;
  int64x2_t v564;
  float64x2_t v565;
  float64x2_t v566;
  float64x2_t v567;
  float64x2_t v568;
  float64x2_t v569;
  float64x2_t v570;
  float64x2_t v571;
  float64x2_t v572;
  float64x2_t v573;
  float64x2_t v574;
  float64x2_t v575;
  float64x2_t v576;
  float64x2_t v577;
  float64x2_t v578;
  float64x2_t v579;
  unint64_t v580;
  unint64_t v581;
  uint64_t v582;
  float64x2_t *v583;
  uint64_t v584;
  float64x2_t v585;
  float64x2_t v586;
  float64x2_t v587;
  const double *v588;
  int64x2_t v589;
  float64x2_t v590;
  float64x2_t v591;
  float64x2_t v592;
  float64x2_t v593;
  float64x2_t v594;
  float64x2_t v595;
  float64x2_t v596;
  float64x2_t v597;
  float64x2_t v598;
  float64x2_t v599;
  float64x2_t v600;
  float64x2_t v601;
  float64x2_t v602;
  float64x2_t v603;
  float64x2_t v604;
  float64x2_t v605;
  float64x2_t v606;
  float64x2_t v609;
  double v613;
  float64x2_t v617;
  float64x2_t v618;
  float64x2_t v619;
  float64x2_t v623;
  float64x2_t v624;
  unint64_t v628;
  unint64_t v629;
  const double *v630;
  unint64_t v631;
  unint64_t v632;
  const double *v633;
  unint64_t *v634;
  unint64_t *v635;
  uint64_t v636;
  float64x2_t *v637;
  double *v643;
  unint64_t v648;
  unint64_t v649;
  uint64_t v650;
  float64x2_t *v651;
  int64x2_t v652;
  float64x2_t v653;
  float64x2_t v654;
  float64x2_t v655;
  float64x2_t v656;
  float64x2_t v657;
  float64x2_t v658;
  float64x2_t v659;
  float64x2_t v660;
  float64x2_t v661;
  float64x2_t v662;
  float64x2_t v663;
  float64x2_t v664;
  float64x2_t *v665;
  int64x2_t v666;
  float64x2_t v667;
  float64x2_t v668;
  float64x2_t v669;
  float64x2_t v670;
  float64x2_t v671;
  float64x2_t v672;
  float64x2_t v673;
  float64x2_t v674;
  float64x2_t v675;
  float64x2_t v676;
  float64x2_t v677;
  float64x2_t v678;
  uint64_t v682;
  uint64_t n;
  int v684;
  int v685;
  int v686;
  uint64_t v687;
  unint64_t v688;
  double v689;
  unint64_t v690;
  unint64_t v691;
  uint64_t v692;
  int v693;
  unint64_t v694;
  uint64_t v695;
  int v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  float32x2_t v700;
  double v701;
  double v702;
  double v703;
  float64x2_t *v704;
  float64x2_t v705;
  float64x2_t v706;
  float64x2_t v707;
  float64x2_t v708;
  float64x2_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  unint64_t *v715;
  uint64_t v716;
  float32x2_t v717;
  double v718;
  double v719;
  double v720;
  double v721;
  float64x2_t *v722;
  float64x2_t v723;
  float64x2_t v724;
  float64x2_t v725;
  float64x2_t v726;
  uint64_t v727;
  unsigned int v728;
  float32x2_t v729;
  float32x2_t v730;
  double v731;
  double v732;
  double v733;
  float64x2_t *v734;
  float64x2_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  float32x2_t v741;
  float32x2_t v742;
  double v743;
  double v744;
  double v745;
  double v746;
  float64x2_t *v747;
  float64x2_t v748;
  float64x2_t v749;
  float64x2_t v750;
  float64x2_t v751;
  float64x2_t v752;
  float64x2_t v753;
  float64x2_t v754;
  float64x2_t v755;
  float64x2_t v756;
  float64x2_t v757;
  unint64_t v758;
  unsigned __int8 v759;
  unsigned __int8 v760;
  size_t v761;
  size_t v762;
  unsigned __int8 v763;
  unsigned __int8 v764;
  int v765;
  unsigned int v766;
  unsigned __int8 v767;
  unsigned __int8 v768;
  BOOL v770;
  uint64_t v771;
  unint64_t v772;
  unsigned int *v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  int v781;
  unsigned int *v782;
  uint64_t v783;
  uint64_t v784;
  unsigned int v785;
  float32x2_t v786;
  float64x2_t v787;
  float32x2_t v788;
  float64x2_t v789;
  double v790;
  double v791;
  double v792;
  double v793;
  double v794;
  double v795;
  float64x2_t *v796;
  float64x2_t v797;
  float64x2_t v798;
  float64x2_t v799;
  float64x2_t v800;
  float64x2_t v801;
  float64x2_t v802;
  float64x2_t v803;
  float64x2_t v804;
  float64x2_t v805;
  float64x2_t v806;
  uint64_t v807;
  uint64_t v808;
  int v809;
  char v810;
  float32x2_t v811;
  float32x2_t v812;
  float32x2_t v813;
  double v814;
  double v815;
  double v816;
  float64x2_t *v817;
  float64x2_t v818;
  float64x2_t v819;
  float64x2_t v820;
  float64x2_t v821;
  float64x2_t v822;
  float64x2_t v823;
  char v824;
  uint64_t v825;
  float32x2_t v826;
  float64x2_t v827;
  double v828;
  double v829;
  double v830;
  double v831;
  double v832;
  double v833;
  float64x2_t *v834;
  float64x2_t v835;
  float64x2_t v836;
  float64x2_t v837;
  float64x2_t v838;
  char v839;
  unsigned int *v840;
  unint64_t v841;
  float32x2_t v842;
  float32x2_t v843;
  float32x2_t v844;
  double v845;
  double v846;
  double v847;
  double v848;
  float64x2_t *v849;
  float64x2_t v850;
  float64x2_t v851;
  float64x2_t v852;
  float64x2_t v853;
  float64x2_t v854;
  float64x2_t v855;
  uint64_t v856;
  unsigned int v857;
  float32x2_t v858;
  float32x2_t v859;
  double v860;
  double v861;
  double v862;
  double v863;
  double v864;
  double v865;
  float64x2_t *v866;
  float64x2_t v867;
  float64x2_t v868;
  float64x2_t v869;
  size_t v870;
  unsigned __int8 v871;
  unsigned __int8 v872;
  uint64_t i2;
  uint64_t v874;
  uint64_t i3;
  uint64_t v876;
  uint64_t nn;
  uint64_t v878;
  uint64_t i1;
  uint64_t v880;
  uint64_t v881;
  uint64_t m;
  uint64_t v883;
  uint64_t i;
  uint64_t v885;
  uint64_t j;
  uint64_t v887;
  _DWORD *v888;
  uint64_t v889;
  int v891;
  unsigned int v892;
  unsigned int *v893;
  unsigned int v894;
  unint64_t v895;
  unint64_t v896;
  unint64_t v897;
  unint64_t v898;
  float64x2_t v899;
  __int128 v900;
  float32x2_t v901;
  float v902;
  uint64_t *v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  float64x2_t *v907;
  float64x2_t v908;
  float64x2_t v909;
  float64x2_t v910;
  float64x2_t v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t v914;
  uint64_t v915;
  unsigned int v916;
  float64x2_t *v917;
  float64x2_t v918;
  float64x2_t v919;
  float64x2_t v920;
  float64x2_t v921;
  double v922;
  int8x16_t v923;
  float64x2_t v924;
  float64x2_t v925;
  int8x16_t v926;
  float64x2_t v927;
  unint64_t v928;
  int8x16_t v929;
  int v930;
  int8x16_t v931;
  unsigned int v932;
  float64x2_t v933;
  float64x2_t v934;
  float64x2_t v935;
  float64x2_t v936;
  unint64_t v937;
  unint64_t v938;
  unint64_t v939;
  unint64_t v940;
  float64x2_t v941;
  int8x16_t v942;
  float64x2_t v943;
  double v944;
  int8x16_t v945;
  float64x2_t v946;
  unint64_t v947;
  int8x16_t v948;
  int8x16_t v949;
  int8x16_t v950;
  unint64_t v951;
  uint64_t v952;
  int8x16_t v953;
  int8x16_t v954;
  int8x16_t v955;
  int8x16_t v956;
  float64x2_t v957;
  float64x2_t v959;
  float64x2_t v960;
  unint64_t v961;
  unint64_t v962;
  float64x2_t *v963;
  uint64_t v964;
  unint64_t v965;
  unint64_t v966;
  float64x2_t v967;
  float64x2_t v969;
  float64x2_t v970;
  float64x2_t v971;
  __int128 v972;
  float64x2_t v973;
  float64x2_t v975;
  int64x2_t v976;
  float64x2_t v977;
  float64x2_t v978;
  float64x2_t v980;
  float64x2_t v981;
  float64x2_t v982;
  __int128 v984;
  float64x2_t v986;
  double v989;
  float64x2_t v990;
  float64x2_t v991;
  float64x2_t v992;
  float64x2_t v993;
  int8x16_t v994;
  float64x2_t v995;
  float64x2_t v996;
  float64x2_t v997;
  int64x2_t v998;
  int8x16_t v999;
  double v1000;
  int8x16_t v1001;
  int8x16_t v1002;
  double v1006;
  double v1007;
  float64x2_t v1008;
  __int128 v1009;
  double v1010;
  long double v1011;
  long double v1012;
  float64x2_t v1013;
  float64x2_t v1014;
  float64x2_t v1015;
  double v1016;
  float64x2_t v1017;
  int8x16_t v1018;
  float64x2_t v1019;
  int8x16_t v1020;
  __int128 v1021;
  double v1022;
  double v1026;
  double v1027;
  float64x2_t v1028;
  float64x2_t v1029;
  int8x16_t v1030;
  float64x2_t v1031;
  float64x2_t v1032;
  float64x2_t v1033;
  int64x2_t v1034;
  int8x16_t v1035;
  double v1036;
  float64x2_t v1037;
  float64x2_t v1038;
  int8x16_t v1039;
  float64x2_t v1041;
  __int128 v1042;
  double v1043;
  int8x16_t v1044;
  float64x2_t v1049;
  float64x2_t v1050;
  double v1052;
  int8x16_t v1053;
  double v1054;
  float v1056;
  float64x2_t v1057;
  __int128 v1058;
  __int128 v1059;
  float v1060;
  float64x2_t v1062;
  double v1063;
  double v1064;
  double v1065;
  double v1066;
  double v1067;
  float64x2_t v1068;
  float64x2_t v1069;
  float64x2_t v1070;
  float64x2_t v1071;
  float64x2_t v1072;
  float64x2_t v1073;
  float64x2_t v1074;
  float64x2_t v1075;
  float64x2_t v1076;
  float64x2_t v1077;
  float64x2_t v1078;
  float64x2_t v1079;
  float64x2_t v1080;
  float64x2_t v1081;
  float64x2_t v1083;
  double v1085;
  float64x2_t v1086;
  float64x2_t v1087;
  float64x2_t v1088;
  float64x2_t v1089;
  float64x2_t v1090;
  double v1091;
  float64x2_t v1092;
  float64x2_t v1093;
  float64x2_t v1097;
  float64x2_t v1098;
  float64x2_t v1099;
  float64x2_t v1100;
  float64x2_t v1101;
  float64x2_t v1102;
  float64x2_t v1103;
  float64x2_t v1104;
  float64x2_t v1105;
  float64x2_t v1106;
  float64x2_t v1107;
  float64x2_t v1108;
  float64x2_t v1109;
  float64x2_t v1110;
  float64x2_t v1111;
  float64x2_t v1112;
  float64x2_t v1113;
  float64x2_t v1114;
  float64x2_t v1115;
  float64x2_t v1116;
  float64x2_t v1117;
  float64x2_t v1118;
  float64x2_t v1120;
  int v1122;
  float64x2_t v1123;
  unint64_t v1126;
  float64x2_t v1127;
  float64x2_t v1128;
  float64x2_t v1129;
  float64x2_t v1130;
  float64x2_t v1131;
  float64x2_t v1134;
  float64x2_t v1135;
  unint64_t v1137;
  float64x2_t *v1138;
  float64x2_t v1139;
  float64x2_t v1140;
  float64x2_t v1145;
  float64x2_t v1147;
  float64x2_t v1149;
  float64x2_t *v1150;
  float64x2_t v1153;
  float64x2_t v1154;
  unint64_t v1156;
  double *v1157;
  double v1160;
  uint64_t v1161;
  float64_t v1165;
  float64x2_t v1167;
  float64x2_t v1168;
  float64x2_t v1169;
  double *v1170;
  double v1173;
  int64x2_t *v1174;
  unint64_t v1175;
  unint64_t v1176;
  float64x2_t *v1177;
  float64x2_t v1178;
  float64x2_t v1181;
  float64x2_t v1184;
  float64x2_t v1186;
  float64x2_t v1188;
  float64_t v1190;
  float64x2_t v1191;
  float64x2_t v1192;
  float64x2_t v1193;
  float64x2_t v1194;
  float64x2_t v1195;
  float64x2_t *v1196;
  float64x2_t v1197;
  int64x2_t v1198;
  float64x2_t v1199;
  float64x2_t v1200;
  float64x2_t v1201;
  float64x2_t v1202;
  float64x2_t v1203;
  float64x2_t v1204;
  float64x2_t v1205;
  float64x2_t v1206;
  float64x2_t v1207;
  float64x2_t v1208;
  float64x2_t v1209;
  float64x2_t v1210;
  float64x2_t v1211;
  float64x2_t v1212;
  float64x2_t *v1213;
  float64x2_t v1214;
  int64x2_t v1215;
  float64x2_t v1216;
  float64x2_t v1217;
  float64x2_t v1218;
  float64x2_t v1219;
  float64x2_t v1220;
  float64x2_t v1221;
  float64x2_t v1222;
  float64x2_t v1223;
  float64x2_t v1224;
  float64x2_t v1225;
  float64x2_t v1226;
  float64x2_t *v1227;
  float64x2_t v1228;
  float64x2_t v1231;
  float64x2_t v1234;
  float64x2_t v1236;
  float64x2_t v1238;
  float64x2_t v1240;
  float64x2_t v1241;
  float64x2_t *v1243;
  double *v1244;
  float64x2_t v1249;
  float64x2_t v1250;
  float64x2_t v1251;
  float64x2_t v1252;
  float64x2_t v1254;
  float64x2_t v1255;
  float64x2_t v1256;
  float64x2_t v1257;
  float64x2_t v1258;
  double v1260;
  double v1261;
  double v1263;
  uint64_t v1264;
  unint64_t v1265;
  uint64_t v1266;
  uint64_t v1267;
  uint64_t v1268;
  int v1269;
  double v1270;
  unsigned int v1271;
  float64x2_t *v1272;
  double v1273;
  uint64_t v1274;
  unint64_t v1275;
  float64x2_t *v1276;
  float64x2_t *v1277;
  float64x2_t v1278;
  float64_t *v1280;
  float64x2_t v1281;
  float64x2_t v1282;
  float64x2_t v1283;
  float64x2_t v1284;
  float64x2_t *v1285;
  double v1288;
  double *v1289;
  double *v1290;
  unsigned int v1291;
  uint64_t v1292;
  unsigned int *v1293;
  uint64_t v1294;
  uint64_t v1295;
  uint64_t v1296;
  const double *v1298;
  unsigned int v1299;
  uint64_t v1300;
  uint64_t v1301;
  double v1302;
  double v1303;
  double v1304;
  double v1305;
  float64x2_t v1306;
  float64x2_t v1307;
  double v1310;
  float64x2_t v1311;
  float64x2_t v1314;
  double v1315;
  float64_t v1316;
  float64x2_t v1317;
  float64x2_t v1318;
  float64x2_t v1319;
  double v1320;
  float64x2_t v1321;
  float64x2_t v1322;
  float64x2_t v1323;
  double v1324;
  float64x2_t v1325;
  float64x2_t v1326;
  float64x2_t v1327;
  uint64_t v1328;
  int8x16_t v1329;
  float64x2_t v1330;
  float64x2_t v1331;
  float64x2_t v1332;
  double v1333;
  float64x2_t v1334;
  float64_t *v1335;
  float64x2_t v1336;
  float64x2_t v1337;
  float64x2_t v1338;
  float64x2_t *v1339;
  double v1340;
  float64x2_t v1341;
  float64x2_t v1342;
  float64_t *v1343;
  float64x2_t v1344;
  float64x2_t v1345;
  float64x2_t v1346;
  float64x2_t *v1347;
  double v1348;
  unsigned int v1349;
  double v1350;
  double v1351;
  uint64_t v1352;
  uint64_t v1353;
  uint64_t v1354;
  uint64_t v1355;
  uint64_t v1356;
  uint64_t v1357;
  uint64_t v1358;
  uint64_t v1359;
  int64x2_t v1361;
  double v1363;
  double v1365;
  double v1366;
  double v1367;
  float64x2_t v1368;
  float64x2_t v1369;
  float64x2_t v1370;
  float64x2_t v1372;
  float64x2_t v1374;
  double v1376;
  double v1377;
  float64_t v1378;
  float64x2_t v1379;
  float64x2_t v1380;
  int64x2_t v1381;
  float64x2_t v1382;
  float64x2_t v1383;
  float64x2_t v1384;
  float64x2_t v1385;
  float64x2_t v1386;
  float64x2_t v1387;
  float64x2_t v1388;
  float64x2_t v1389;
  float64x2_t v1390;
  uint64_t v1391;
  uint64_t v1392;
  double v1393;
  float64x2_t v1394;
  float64x2_t v1395;
  float64x2_t v1396;
  float64x2_t v1397;
  float64x2_t v1398;
  float64x2_t v1399;
  float64x2_t v1400;
  float64x2_t v1401;
  uint64_t v1402;
  float64x2_t v1403;
  float64x2_t v1404;
  float64x2_t v1405;
  float64x2_t v1406;
  float64x2_t v1407;
  float64x2_t v1408;
  float64x2_t v1409;
  int8x16_t v1410;
  float64x2_t v1411;
  float64x2_t v1412;
  float64_t *v1413;
  float64x2_t v1414;
  float64x2_t v1415;
  float64x2_t v1416;
  float64x2_t *v1417;
  float64x2_t v1418;
  float64x2_t v1419;
  float64_t *v1420;
  float64x2_t v1421;
  float64x2_t v1422;
  float64x2_t v1423;
  float64x2_t *v1424;
  float64x2_t v1425;
  int8x16_t v1426;
  int8x16_t v1427;
  int8x16_t v1428;
  float64x2_t v1429;
  float64x2_t v1430;
  float64x2_t v1431;
  int8x16_t v1432;
  int8x16_t v1433;
  int8x16_t v1434;
  double v1435;
  double v1436;
  int8x16_t v1437;
  double v1438;
  float64x2_t v1439;
  float64x2_t v1440;
  float64x2_t v1441;
  float64x2_t v1442;
  float64_t *v1443;
  float64x2_t v1444;
  float64x2_t v1445;
  float64x2_t v1446;
  float64x2_t v1447;
  float64x2_t v1448;
  float64x2_t v1449;
  float64x2_t v1450;
  float64x2_t v1451;
  float64x2_t v1452;
  float64x2_t *v1453;
  float64x2_t v1454;
  float64x2_t v1455;
  float64x2_t v1456;
  double v1457;
  uint64_t v1458;
  double *v1459;
  float64x2_t *v1460;
  unint64_t v1461;
  float64x2_t v1462;
  float64_t *v1464;
  float64x2_t v1465;
  float64x2_t v1466;
  float64x2_t *v1467;
  uint64_t v1468;
  _BOOL4 v1469;
  unint64_t v1470;
  unint64_t v1471;
  uint64_t v1472;
  float64x2_t v1473;
  float64x2_t v1474;
  float64x2_t v1475;
  double v1476;
  int8x16_t v1477;
  float64x2_t v1478;
  float64x2_t v1479;
  double v1480;
  uint64_t v1481;
  float64_t *v1482;
  float64x2_t v1483;
  float64x2_t v1484;
  float64x2_t *v1485;
  float64x2_t v1486;
  unint64_t v1487;
  float64x2_t v1488;
  uint64_t v1489;
  float64x2_t *v1490;
  uint64_t v1491;
  float64x2_t v1492;
  float64x2_t v1493;
  float64x2_t v1494;
  float64x2_t v1495;
  float64x2_t v1496;
  float64x2_t v1497;
  float64x2_t v1498;
  float64x2_t v1499;
  unint64_t v1500;
  float64x2_t v1501;
  float64x2_t v1502;
  float64x2_t v1503;
  double v1504;
  uint64_t v1505;
  uint64_t v1506;
  unsigned int v1508;
  int v1509;
  float64x2_t *v1510;
  float64x2_t v1511;
  float64x2_t v1512;
  float64x2_t v1513;
  float64x2_t v1514;
  float64x2_t v1515;
  int v1516;
  float64x2_t *v1517;
  float64x2_t v1518;
  float64x2_t v1519;
  float64x2_t v1520;
  float64x2_t v1521;
  float64x2_t v1522;
  float64x2_t *v1523;
  float64x2_t v1524;
  float64x2_t v1525;
  float64x2_t v1526;
  float64x2_t v1527;
  float64x2_t v1528;
  float64x2_t *v1529;
  float64x2_t v1530;
  float64x2_t v1531;
  float64x2_t v1532;
  float64x2_t *v1533;
  float64x2_t v1534;
  float64x2_t *v1535;
  uint64_t v1536;
  char *v1537;
  uint64_t v1538;
  unint64_t v1539;
  int v1540;
  char v1541;
  int v1542;
  uint64_t v1543;
  float64x2_t vars0;
  uint64_t v1545;
  uint64_t v1546;
  uint64_t v1547;
  uint64_t v1548;
  uint64_t v1549;
  int8x16_t v1550;
  uint64_t v1551;
  uint64_t v1552;
  double v1553;
  int *v1554;
  uint64_t v1555;
  unsigned int v1556;
  uint64_t v1557;
  uint64_t *v1558;
  uint64_t v1559;
  uint64_t v1560;
  unint64_t v1561;
  int v1562;
  uint64_t v1563;
  uint64_t v1564;
  unint64_t v1565;
  uint64_t v1566;
  float64x2_t v1567;
  float64x2_t v1568;
  float64x2_t v1569;
  float64x2_t v1570;
  float64x2_t v1571;
  float64x2_t v1572;
  float64x2_t v1573;
  float64x2_t v1574;
  uint64_t v1575;
  int8x16_t v1576;
  int8x16_t v1577;
  int8x16_t v1578;
  int8x16_t v1579;
  int v1580;
  double v1581;
  float64x2x2_t v1582;
  float64x2x2_t v1583;
  float64x2x2_t v1584;
  float64x2x3_t v1585;

  MEMORY[0x24BDAC7A8](a1);
  STACK[0xF5B8] = *MEMORY[0x24BDAC8D0];
  LODWORD(STACK[0xA58]) = 0;
  v16 = *v15;
  v1557 = v15[1];
  v1558 = v15;
  if (*(_DWORD *)(*v15 + 4) == -1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 162, (uint64_t)"read_channel != kInvalidChannel && \"DMA write request not permitted.\"", 69, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *(_DWORD *)v16 <= 0x8D48Bu&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 165, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v1554 = (int *)(v1557 + 31048);
  v17 = *(unsigned int *)(*(_QWORD *)(v16 + 16) + 578696);
  STACK[0xA50] = *(_QWORD *)(*(_QWORD *)(v16 + 16) + 578688);
  LODWORD(STACK[0xA58]) = v17;
  _Q2.f64[1] = 0.0;
  _Q1 = vaddq_f64(*(float64x2_t *)(v1557 + 43824), (float64x2_t)0);
  v20 = vaddq_f64(*(float64x2_t *)(v1557 + 43808), (float64x2_t)0);
  *(float64x2_t *)(v1557 + 43808) = v20;
  *(float64x2_t *)(v1557 + 43824) = _Q1;
  v1536 = v17;
  if ((_DWORD)v17)
  {
    v1575 = v1557 + 31076;
    STACK[0x368] = v1557 + 31196;
    v1566 = v1557 + 31212;
    STACK[0x370] = v1557 + 31228;
    STACK[0x630] = v1557 + 351680;
    v21 = 0;
    v22 = 1.0;
    v1579.i64[0] = *(_QWORD *)&v20.f64[0];
    v1548 = *(_QWORD *)&v20.f64[0];
    v1550.i64[0] = *(_QWORD *)&v20.f64[0];
    v1578.i64[0] = *(_QWORD *)&v20.f64[0];
    v1547 = *(_QWORD *)&v20.f64[0];
    vars0 = v20;
    v1577.i64[0] = *(_QWORD *)&v20.f64[0];
    v1546 = *(_QWORD *)&v20.f64[0];
    v1549 = *(_QWORD *)&v20.f64[0];
    v1576.i64[0] = *(_QWORD *)&v20.f64[0];
    v1545 = *(_QWORD *)&v20.f64[0];
    v1543 = *(_QWORD *)&v20.f64[0];
    *(float64x2_t *)&STACK[0x500] = v20;
    *(float64x2_t *)&STACK[0x310] = v20;
    *(float64x2_t *)&STACK[0x4D0] = v20;
    *(float64x2_t *)&STACK[0x320] = v20;
    *(float64x2_t *)&STACK[0x510] = v20;
    *(float64x2_t *)&STACK[0x4C0] = v20;
    *(float64x2_t *)&STACK[0x340] = v20;
    *(float64x2_t *)&STACK[0x330] = v20;
    *(float64x2_t *)&STACK[0x350] = v20;
    v1581 = v20.f64[0];
    v1553 = 0.0;
    v1564 = v1557 + 361416;
    while (1)
    {
      v23 = *((unsigned int *)&STACK[0xA50] + v21);
      STACK[0x2C0] = v21;
      v1538 = v23;
      if ((_DWORD)v23)
        break;
LABEL_7:
      v21 = STACK[0x2C0] + 1;
      if (v21 == v1536)
        goto LABEL_458;
    }
    v24 = 0;
    v1537 = (char *)&STACK[0xA5C] + 339548 * v21 + 4;
    v1539 = STACK[0x370];
    LODWORD(v21) = v23;
    while (1)
    {
      STACK[0x4B0] = v24;
      if (v24)
        v21 = 1;
      else
        v21 = v21;
      STACK[0x620] = v21;
      LODWORD(STACK[0x14FC]) = 0;
      LODWORD(STACK[0x162C]) = 0;
      LODWORD(STACK[0x188C]) = 0;
      LODWORD(STACK[0x1D40]) = 0;
      STACK[0xD08] = 0;
      STACK[0xD00] = 0;
      v25 = *v1558;
      if (*(_DWORD *)(*v1558 + 4) == -1
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 162, (uint64_t)"read_channel != kInvalidChannel && \"DMA write request not permitted.\"", 69, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_619:
        abort();
      }
      v26 = &v1537[169772 * STACK[0x4B0]] - (char *)&STACK[0xA50];
      if ((v26 & 3) != 0)
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 164, (uint64_t)"offset % kDefaultGranularity == 0 && length % kDefaultGranularity == 0 && \"Misaligned DMA request.\"", 99, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
        v27 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v27 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v883 = qword_254A6DE40;
          for (i = qword_254A6DE48; v883 != i; v883 += 16)
            (*(void (**)(_QWORD, const char *, ...))v883)(*(_QWORD *)(v883 + 8), "offset % kDefaultGranularity == 0 && length % kDefaultGranularity == 0 && \"Misaligned DMA request.\"", 99, "", 0);
        }
        v28 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v28 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          goto LABEL_619;
        qword_254A6DE58(unk_254A6DE60, "offset % kDefaultGranularity == 0 && length % kDefaultGranularity == 0 && \"Misaligned DMA request.\"", 99, "", 0);
      }
      v1542 = v26 + 582852;
      if ((v26 + 582852) > *(_DWORD *)v25)
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 165, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
        v29 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v29 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v885 = qword_254A6DE40;
          for (j = qword_254A6DE48; v885 != j; v885 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v885)(*(_QWORD *)(v885 + 8), "offset + length <= size && \"Out of bounds DMA request.\"", 55, "", 0);
        }
        v30 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v30 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          goto LABEL_619;
        qword_254A6DE58(unk_254A6DE60, "offset + length <= size && \"Out of bounds DMA request.\"", 55, "", 0);
      }
      memcpy(&STACK[0xD00], (const void *)(*(_QWORD *)(v25 + 16) + (v26 + 578688)), 0x1044uLL);
      _Q2.f64[1] = 0.0;
      _Q1 = vaddq_f64(*(float64x2_t *)(v1557 + 43824), (float64x2_t)0);
      v20 = vaddq_f64(*(float64x2_t *)(v1557 + 43808), (float64x2_t)0);
      *(float64x2_t *)(v1557 + 43808) = v20;
      *(float64x2_t *)(v1557 + 43824) = _Q1;
      v1551 = LODWORD(STACK[0xD00]);
      if ((_DWORD)v1551)
        break;
LABEL_10:
      v24 = STACK[0x4B0] + 1;
      v1539 += 4;
      LODWORD(v21) = v1538;
      if (v24 == v1538)
        goto LABEL_7;
    }
    v31 = 0;
    v1540 = v26 + 693256;
    v1541 = STACK[0x620] > 1;
    if (STACK[0x620] <= 1)
      v32 = 1;
    else
      v32 = STACK[0x620];
    STACK[0x520] = v32;
    while (1)
    {
      while (1)
      {
        v33 = *((unsigned __int16 *)&STACK[0x1630] + v31);
        if (((*(_DWORD *)((char *)&STACK[0xD10] + ((v33 >> 4) & 0xFFC)) >> (v33 >> 1)) & 1) != 0)
          break;
        if (++v31 == v1551)
          goto LABEL_10;
      }
      STACK[0x2D0] = *((unsigned int *)&STACK[0x1890] + v31);
      v1559 = *((unsigned __int8 *)&STACK[0x1500] + v31);
      STACK[0x2D8] = *((unsigned __int8 *)&STACK[0x13D0] + v31);
      v1552 = v31 + 1;
      v1556 = *((unsigned __int16 *)&STACK[0x1630] + v31 + 1) - (_DWORD)v33;
      v34 = *v1558;
      v1561 = v1556 >> 1;
      sub_20FCB082C(*v1558, v1542 + 8 * v33, (8 * ((_DWORD)v1561 << v1541)), &STACK[0x9B0]);
      sub_20FCB082C(v34, v1540 + 4 * v33, (4 * ((_DWORD)v1561 << v1541)), &STACK[0x960]);
      v35 = (char *)&STACK[0x960] + 4 * v1561;
      v36 = STACK[0x620] > 1;
      if (STACK[0x620] <= 1)
        v37 = 0;
      else
        v37 = &STACK[0x9B0] + v1561;
      STACK[0x2E0] = (unint64_t)v37;
      if (!v36)
        v35 = 0;
      STACK[0x2B0] = (unint64_t)v35;
      v38 = vaddq_f64(*(float64x2_t *)(v1557 + 43824), (float64x2_t)0);
      *(float64x2_t *)(v1557 + 43808) = vaddq_f64(*(float64x2_t *)(v1557 + 43808), (float64x2_t)0);
      *(float64x2_t *)(v1557 + 43824) = v38;
      bzero(&STACK[0x654], 0x30CuLL);
      v55 = (unsigned __int8 *)v1558[2];
      v56 = *v1554;
      v57 = v55[3123];
      STACK[0x600] = (unint64_t)v55;
      LODWORD(STACK[0x640]) = v56;
      if (!v57)
      {
        v1580 = 0;
        goto LABEL_107;
      }
      if (!v55[3124])
      {
        v1579.i64[0] = 0;
        v1580 = 1;
        v1548 = 0;
        v1550.i64[0] = 0;
        v1578.i64[0] = 0;
        v1547 = 0;
        _Q0.f64[0] = 0.0;
        vars0 = _Q0;
        v1577.i64[0] = 0;
        v1546 = 0;
        v1549 = 0;
        v1576.i64[0] = 0;
        v1545 = 0;
        v1543 = 0;
        goto LABEL_107;
      }
      v58 = *(_QWORD *)v55;
      v59 = STACK[0x2C0];
      v60 = *(_QWORD *)v55 + 4080 * STACK[0x2C0] + 2024;
      v61 = v60 + 1016 * STACK[0x4B0] + 96;
      v62 = *(_DWORD *)(*(_QWORD *)v55 + 21248);
      v63 = (_OWORD *)(*(_QWORD *)v55 + 18344 + (STACK[0x2C0] << 6));
      if (STACK[0x4B0])
      {
        *(_OWORD *)&STACK[0x610] = v63[3];
        *(_OWORD *)&STACK[0x5F0] = v63[2];
        if (v62)
        {
          v64 = STACK[0x2D8];
          v65 = v58 + 264 * STACK[0x2D8] + (v59 << 6);
          v66 = *(int64x2_t *)(v65 + 18640);
          v67 = *(int64x2_t *)(v65 + 18656);
LABEL_51:
          *(_OWORD *)&STACK[0x5E0] = v67.u64[0];
          *(_OWORD *)&STACK[0x5C0] = v66.u64[0];
          *(int64x2_t *)&STACK[0x5D0] = vzip2q_s64(v66, v67);
          goto LABEL_63;
        }
        v69 = *(_DWORD *)(v61 + 472);
        if (v69 == -1)
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_618;
          }
          v69 = *(_DWORD *)(v61 + 472);
        }
        if (!v69)
          goto LABEL_617;
        *(_OWORD *)&STACK[0x5D0] = *(_OWORD *)(v61 + 32);
        *(_OWORD *)&STACK[0x5E0] = *(_OWORD *)(v61 + 16);
        v70 = *(_OWORD *)v61;
      }
      else
      {
        *(_OWORD *)&STACK[0x610] = v63[1];
        *(_OWORD *)&STACK[0x5F0] = *v63;
        if (v62)
        {
          v64 = STACK[0x2D8];
          v68 = v58 + 264 * STACK[0x2D8] + (v59 << 6);
          v66 = *(int64x2_t *)(v68 + 18608);
          v67 = *(int64x2_t *)(v68 + 18624);
          goto LABEL_51;
        }
        v71 = *(_DWORD *)(v60 + 568);
        if (v71 == -1)
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_618;
          }
          v71 = *(_DWORD *)(v60 + 568);
        }
        if (!v71)
        {
LABEL_617:
          sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_618:
          abort();
        }
        *(_OWORD *)&STACK[0x5D0] = *(_OWORD *)(v60 + 128);
        *(_OWORD *)&STACK[0x5E0] = *(_OWORD *)(v60 + 112);
        v70 = *(_OWORD *)(v60 + 96);
      }
      *(_OWORD *)&STACK[0x5C0] = v70;
      v64 = STACK[0x2D8];
LABEL_63:
      v72 = (float32x2_t)*(&STACK[0x9B0] + v64 - v1559);
      v73 = *(_DWORD *)(v61 + 472);
      if (v73 == -1)
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
        v74 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v74 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v159 = qword_254A6DE40;
          for (k = qword_254A6DE48; v159 != k; v159 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v159)(*(_QWORD *)(v159 + 8), "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, "", 0);
        }
        v75 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v75 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        v55 = (unsigned __int8 *)STACK[0x600];
        if (!byte_254A6DE68)
          goto LABEL_618;
        qword_254A6DE58(unk_254A6DE60, "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, "", 0);
        v73 = *(_DWORD *)(v61 + 472);
      }
      v76 = *(float64x2_t *)&STACK[0x5D0];
      *(_QWORD *)&v76.f64[0] = STACK[0x5E0];
      v77 = vaddq_f64(*(float64x2_t *)&STACK[0x610], v76);
      v78 = vaddq_f64(*(float64x2_t *)&STACK[0x5F0], (float64x2_t)vzip1q_s64(*(int64x2_t *)&STACK[0x5C0], *(int64x2_t *)&STACK[0x5D0]));
      v79 = vcvtq_f64_f32(v72);
      if (v73 <= 1)
      {
        if (!v73)
          goto LABEL_617;
        v77.f64[0] = v78.f64[1] * v77.f64[0] - v77.f64[1] * 0.0;
        v80 = v22 / v78.f64[0] * v79.f64[0];
        v81 = vmuld_lane_f64(v22 / v78.f64[1], v79, 1) - v77.f64[1] / v78.f64[1];
        v82 = vmuld_lane_f64(0.0, v79, 1);
        *(double *)&v83 = v77.f64[0] / (v78.f64[1] * (v78.f64[0] * v78.f64[0]))
                        + v82 / (v78.f64[1] * (v78.f64[0] * v78.f64[0]))
                        - v79.f64[0] / (v78.f64[0] * v78.f64[0]);
        v84 = v82 / (v78.f64[1] * (v78.f64[0] * v78.f64[1]))
            - v77.f64[1] * 0.0 / (v78.f64[1] * (v78.f64[0] * v78.f64[1]));
        __asm { FMOV            V17.2D, #-1.0 }
        _Q17.f64[0] = -(v79.f64[1] - v77.f64[1]);
        v89.f64[0] = v78.f64[0];
        v89.f64[1] = v78.f64[0] * v78.f64[1];
        v78.f64[0] = v78.f64[1] * v78.f64[1];
        v90 = (int64x2_t)vdivq_f64(_Q17, v78);
        v91 = vdivq_f64((float64x2_t)xmmword_21030D340, v89);
        *(float64x2_t *)&STACK[0x5F0] = v91;
        *(double *)&STACK[0xBA0] = v80 - vmuld_lane_f64(v91.f64[1], v79, 1) - v77.f64[0] / v89.f64[1];
        *(double *)&STACK[0xBA8] = v81;
        *((double *)&v83 + 1) = v84;
        *(_OWORD *)&STACK[0x610] = v83;
        *(_QWORD *)&v92 = 0;
        *((_QWORD *)&v92 + 1) = v90.i64[1];
        *(_OWORD *)&STACK[0x5E0] = v92;
        STACK[0xF4F0] = (unint64_t)&STACK[0xC00];
        STACK[0xF4F8] = (unint64_t)&STACK[0xBA0];
        STACK[0xF500] = 0;
        *(int64x2_t *)&STACK[0x5D0] = vzip1q_s64((int64x2_t)0, v90);
        STACK[0xF508] = (unint64_t)&STACK[0xF550];
        STACK[0xF510] = 0;
LABEL_73:
        sub_20FA1DC08((uint64_t)&STACK[0xF4F0], v61);
        goto LABEL_106;
      }
      v77.f64[0] = v78.f64[1] * v77.f64[0] - v77.f64[1] * 0.0;
      v93 = v22 / v78.f64[0] * v79.f64[0];
      v94 = vmuld_lane_f64(v22 / v78.f64[1], v79, 1) - v77.f64[1] / v78.f64[1];
      v95 = vmuld_lane_f64(0.0, v79, 1);
      v45.f64[0] = v77.f64[0] / (v78.f64[1] * (v78.f64[0] * v78.f64[0]))
                 + v95 / (v78.f64[1] * (v78.f64[0] * v78.f64[0]))
                 - v79.f64[0] / (v78.f64[0] * v78.f64[0]);
      v96 = v95 / (v78.f64[1] * (v78.f64[0] * v78.f64[1])) - v77.f64[1] * 0.0 / (v78.f64[1] * (v78.f64[0] * v78.f64[1]));
      __asm { FMOV            V17.2D, #-1.0 }
      _Q17.f64[0] = -(v79.f64[1] - v77.f64[1]);
      v98.f64[0] = v78.f64[0];
      v98.f64[1] = v78.f64[0] * v78.f64[1];
      v78.f64[0] = v78.f64[1] * v78.f64[1];
      v99 = (int64x2_t)vdivq_f64(_Q17, v78);
      v100 = (int8x16_t)vdivq_f64((float64x2_t)xmmword_21030D340, v98);
      *(int8x16_t *)&STACK[0x5F0] = v100;
      *(double *)v100.i64 = v77.f64[0] / v98.f64[1];
      *(double *)&STACK[0xBA0] = v93 - vmuld_lane_f64(*(double *)&v100.i64[1], v79, 1) - v77.f64[0] / v98.f64[1];
      *(double *)&STACK[0xBA8] = v94;
      v45.f64[1] = v96;
      *(float64x2_t *)&STACK[0x610] = v45;
      *(_QWORD *)&v101 = 0;
      *((_QWORD *)&v101 + 1) = v99.i64[1];
      *(_OWORD *)&STACK[0x5E0] = v101;
      STACK[0xF4F0] = (unint64_t)&STACK[0xC00];
      STACK[0xF4F8] = (unint64_t)&STACK[0xBA0];
      STACK[0xF500] = 0;
      v102 = (int8x16_t)vzip1q_s64((int64x2_t)0, v99);
      *(int8x16_t *)&STACK[0x5D0] = v102;
      STACK[0xF508] = (unint64_t)&STACK[0xF550];
      STACK[0xF510] = 0;
      if (v73 == -1)
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
        v103 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v103 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v881 = qword_254A6DE40;
          for (m = qword_254A6DE48; v881 != m; v881 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v881)(*(_QWORD *)(v881 + 8), "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, "", 0);
        }
        v104 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v104 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        v55 = (unsigned __int8 *)STACK[0x600];
        if (!byte_254A6DE68)
          goto LABEL_618;
        qword_254A6DE58(unk_254A6DE60, "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, "", 0);
        v105 = *(_DWORD *)(v61 + 472);
        if (v105 <= 1)
        {
          if (!v105)
            goto LABEL_617;
          goto LABEL_73;
        }
      }
      v106 = v61;
      if (!*(_BYTE *)(v61 + 468))
      {
        sub_20EB27C0C(v61 + 204, (double *)(v61 + 168), 0x32uLL, v102, *(double *)v99.i64, v100, (int8x16_t)v98);
        v106 = v61;
        *(_BYTE *)(v61 + 468) = 1;
      }
      _Q0 = *(float64x2_t *)&STACK[0xBA0];
      _D2 = STACK[0xBA8];
      __asm { FMLA            D1, D2, V0.D[1] }
      v111 = *(float *)(v106 + 204);
      v110 = v106 + 204;
      v112 = sqrt(_D1);
      v113 = v112 * v111;
      v114 = (unint64_t)v113;
      if ((unint64_t)v113 >= 0x1F)
        v114 = 31;
      v115 = v112 * *(float *)(v110 + 4 * v114 + 8) + *(float *)(v110 + 4 * v114 + 136);
      v116 = *(float64x2_t *)(v110 - 20);
      v117 = *(float64x2_t *)(v110 - 36);
      v118 = (float64x2_t)vzip1q_s64((int64x2_t)v117, (int64x2_t)v116);
      v119 = (float64x2_t)vzip2q_s64((int64x2_t)v117, (int64x2_t)v116);
      v120 = vmulq_f64(v119, (float64x2_t)xmmword_210312E20);
      v121 = vmulq_f64(v118, (float64x2_t)xmmword_210312E10);
      if (v113 <= 32.0)
        goto LABEL_93;
      v122 = v115 * v115;
      v123 = vmulq_n_f64(vaddq_f64(v121, vmulq_n_f64(v120, v115 * v115)), v115 * v115);
      v124 = v122 * v122;
      v125 = v123.f64[0] + vmuld_lane_f64(v122 * v122, v123, 1) + v22;
      if (v125 != 0.0)
      {
        v45 = vaddq_f64(v118, vmulq_n_f64(v119, v122));
        v126 = vmulq_n_f64(v45, v122);
        v115 = fmax(v115 + (v112 - (v115 + v115 * (v126.f64[0] + vmuld_lane_f64(v124, v126, 1)))) / v125, 0.0);
        v127 = v115 * v115;
        v128 = vmulq_n_f64(vaddq_f64(v121, vmulq_n_f64(v120, v115 * v115)), v115 * v115);
        v129 = v127 * v127;
        v130 = v128.f64[0] + vmuld_lane_f64(v127 * v127, v128, 1) + v22;
        if (v130 != 0.0)
        {
          v45 = vaddq_f64(v118, vmulq_n_f64(v119, v127));
          v131 = vmulq_n_f64(v45, v127);
          v115 = fmax(v115 + (v112 - (v115 + v115 * (v131.f64[0] + vmuld_lane_f64(v129, v131, 1)))) / v130, 0.0);
          v132 = v115 * v115;
          v133 = vmulq_n_f64(vaddq_f64(v121, vmulq_n_f64(v120, v115 * v115)), v115 * v115);
          v134 = v132 * v132;
          v135 = v133.f64[0] + vmuld_lane_f64(v132 * v132, v133, 1) + v22;
          if (v135 != 0.0)
          {
            v45 = vaddq_f64(v118, vmulq_n_f64(v119, v132));
            v136 = vmulq_n_f64(v45, v132);
            v115 = fmax(v115 + (v112 - (v115 + v115 * (v136.f64[0] + vmuld_lane_f64(v134, v136, 1)))) / v135, 0.0);
            v137 = v115 * v115;
            v138 = vmulq_n_f64(vaddq_f64(v121, vmulq_n_f64(v120, v115 * v115)), v115 * v115);
            v139 = v137 * v137;
            v140 = v138.f64[0] + vmuld_lane_f64(v137 * v137, v138, 1) + v22;
            if (v140 != 0.0)
            {
              v45 = vaddq_f64(v118, vmulq_n_f64(v119, v137));
              v141 = vmulq_n_f64(v45, v137);
              v115 = fmax(v115 + (v112 - (v115 + v115 * (v141.f64[0] + vmuld_lane_f64(v139, v141, 1)))) / v140, 0.0);
LABEL_93:
              v142 = v115 * v115;
              v143 = vmulq_n_f64(vaddq_f64(v121, vmulq_n_f64(v120, v115 * v115)), v115 * v115);
              v144 = v143.f64[0] + vmuld_lane_f64(v142 * v142, v143, 1) + v22;
              if (v144 != 0.0)
              {
                v145 = vmulq_n_f64(vaddq_f64(v118, vmulq_n_f64(v119, v142)), v142);
                v115 = v115 + (v112 - (v115 + v115 * (v145.f64[0] + vmuld_lane_f64(v142 * v142, v145, 1)))) / v144;
                v146 = 0.0;
                if (v115 <= 0.0)
                {
LABEL_96:
                  v147 = v146 * 0.636619772 + 6.75539944e15 + -6.75539944e15;
                  v148 = v146 + v147 * -1.57079633 + v147 * -5.39030286e-15 + v147 * -8.84372057e-29;
                  v149 = v148 * v148 * (v148 * v148);
                  v45 = vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210312E40, v148 * v148), (float64x2_t)xmmword_210312E50);
                  __asm { FMOV            V6.2D, #1.0 }
                  v46 = vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210312E60, v148 * v148), (float64x2_t)xmmword_210312E90), v149);
                  v150 = vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210312E30, v148 * v148), _Q6), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210312E70, v148 * v148), (float64x2_t)xmmword_210312E80), v149));
                  v151 = vmulq_n_f64(vaddq_f64(v45, v46), v149 * v149);
                  _Q6.f64[0] = v148;
                  v153 = vaddq_f64(v150, v151);
                  v154 = (int)v147 & 3;
                  if (v112 >= 0.0001)
                  {
                    LODWORD(v150.f64[0]) = 0;
                    v151 = xmmword_2103BC090[v154];
                    v161 = vmulq_f64(_Q6, v151);
                    v157 = (int8x16_t)vmulq_f64(v153, v161);
                    v155 = (int)v147 & 1;
                    LODWORD(v161.f64[0]) = v155;
                    v162 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v161, (int32x4_t)v150), 0);
                    v156 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v157, 1);
                    v158 = *(double *)vbslq_s8(v162, v157, (int8x16_t)v156).i64 / v112;
                  }
                  else
                  {
                    v155 = (int)v147 & 1;
                    v156 = xmmword_2103BC090[v154];
                    v157 = (int8x16_t)vmulq_f64(v153, vmulq_f64(_Q6, v156));
                    v158 = 1.0;
                  }
                  LODWORD(v156.f64[0]) = 0;
                  LODWORD(v151.f64[0]) = v155;
                  v163 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v151, (int32x4_t)v156), 0), v157, (int8x16_t)vdupq_lane_s64(v157.i64[0], 0));
                  *(float64x2_t *)&STACK[0xC00] = vmulq_n_f64(_Q0, v158);
                  STACK[0xC10] = v163.u64[1];
                  v164 = (int64x2_t)vmulq_f64(v116, (float64x2_t)xmmword_210312EA0);
                  v165 = (int64x2_t)vmulq_f64(v117, (float64x2_t)xmmword_210312EB0);
                  v166 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(v165, v164), vmulq_n_f64((float64x2_t)vzip2q_s64(v165, v164), v146 * v146)), v146 * v146);
                  v167 = v166.f64[0] + vmuld_lane_f64(v146 * v146 * (v146 * v146), v166, 1) + v22;
                  if (v112 >= 0.0001)
                    v168 = (*(double *)&v163.i64[1] / v167 - v158) / (v112 * v112);
                  else
                    v168 = -0.333333333;
                  v169 = vmulq_n_f64(_Q0, v168);
                  v170.f64[0] = 0.0;
                  v170.f64[1] = v158;
                  *(float64x2_t *)&STACK[0xF550] = vmlaq_n_f64((float64x2_t)*(unint64_t *)&v158, v169, _Q0.f64[0]);
                  *(float64x2_t *)&STACK[0xF560] = vmlaq_laneq_f64(v170, v169, _Q0, 1);
                  *(float64x2_t *)&STACK[0xF570] = vdivq_f64(*(float64x2_t *)&STACK[0xC00], (float64x2_t)vdupq_lane_s64(COERCE__INT64(-v167), 0));
                  goto LABEL_106;
                }
              }
            }
          }
        }
      }
      v146 = v115;
      if (v115 <= 3.14159265)
        goto LABEL_96;
LABEL_106:
      v171 = *(double *)&STACK[0xC10];
      _Q1 = *(float64x2_t *)&STACK[0xC00];
      _D2 = _Q1.f64[1];
      __asm { FMLA            D3, D2, V1.D[1] }
      v175 = _D3 + v171 * v171;
      v176 = sqrt(v175);
      v177 = v175 * v176;
      v178 = v22 / v176;
      _Q19 = *(float64x2_t *)&STACK[0xF570];
      v179 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)&STACK[0xF550], v178 - vmuld_n_f64(_Q1.f64[0], _Q1.f64[0]) / v177), *(float64x2_t *)&STACK[0xF560], -_Q1.f64[1] * _Q1.f64[0] / v177), *(float64x2_t *)&STACK[0xF570], -*(double *)&STACK[0xC10] * *(double *)&STACK[0xC00] / v177);
      v180 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)&STACK[0xF550], vmuld_lane_f64(-_Q1.f64[0], _Q1, 1) / v177), *(float64x2_t *)&STACK[0xF560], v178 - vmuld_lane_f64(_Q1.f64[1], _Q1, 1) / v177), *(float64x2_t *)&STACK[0xF570], vmuld_lane_f64(-*(double *)&STACK[0xC10], *(float64x2_t *)&STACK[0xC00], 1) / v177);
      v181 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)&STACK[0xF550], -(*(double *)&STACK[0xC00] * *(double *)&STACK[0xC10]) / v177), *(float64x2_t *)&STACK[0xF560], -(*(double *)&STACK[0xC08] * *(double *)&STACK[0xC10]) / v177), *(float64x2_t *)&STACK[0xF570], v178 - v171 * v171 / v177);
      v43 = *(float64x2_t *)&STACK[0x5D0];
      v182 = (int64x2_t)vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&STACK[0x610], v179.f64[0]), *(float64x2_t *)&STACK[0x5D0], v179, 1);
      v42 = *(float64x2_t *)&STACK[0x5F0];
      v183 = (int64x2_t)vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&STACK[0x5F0], v179.f64[0]), *(float64x2_t *)&STACK[0x5E0], v179, 1);
      v184 = (int64x2_t)vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&STACK[0x610], v180.f64[0]), *(float64x2_t *)&STACK[0x5D0], v180, 1);
      v185 = (int64x2_t)vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&STACK[0x5F0], v180.f64[0]), *(float64x2_t *)&STACK[0x5E0], v180, 1);
      _Q6 = vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&STACK[0x5F0], v181.f64[0]), *(float64x2_t *)&STACK[0x5E0], v181, 1);
      v1576 = (int8x16_t)vzip2q_s64(v183, v185);
      v1577 = (int8x16_t)vzip1q_s64(v183, v185);
      v1545 = vextq_s8(v1576, v1576, 8uLL).u64[0];
      v1546 = vextq_s8(v1577, v1577, 8uLL).u64[0];
      v1578 = (int8x16_t)vzip2q_s64(v182, v184);
      v1579 = (int8x16_t)vzip1q_s64(v182, v184);
      v1547 = vextq_s8(v1578, v1578, 8uLL).u64[0];
      v1548 = vextq_s8(v1579, v1579, 8uLL).u64[0];
      v1549 = *(_QWORD *)&_Q6.f64[0];
      v1550 = (int8x16_t)vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&STACK[0x610], v181.f64[0]), *(float64x2_t *)&STACK[0x5D0], v181, 1);
      _Q2 = (float64x2_t)vextq_s8((int8x16_t)_Q6, (int8x16_t)_Q6, 8uLL);
      _Q0 = (float64x2_t)vextq_s8(v1550, v1550, 8uLL);
      v1543 = *(_QWORD *)&_Q2.f64[0];
      vars0 = _Q0;
      v1580 = v55[3123];
LABEL_107:
      v186 = v55;
      v187 = STACK[0x640];
      v188 = v1557 + 44352 + 8 * (196 - ((LODWORD(STACK[0x640]) + 3) & 0xFFFFFFFC));
      v189 = STACK[0x2C0];
      STACK[0x2B8] = (unint64_t)(v186 + 8);
      v1555 = *(unsigned int *)&v186[4 * v189 + 8];
      v190 = STACK[0x4B0] + v1555;
      STACK[0x378] = 0;
      v191 = STACK[0x2D0];
      v1565 = 8 * STACK[0x2D0];
      if (v1556 >= 2)
      {
        STACK[0x360] = 0;
        v194 = (unint64_t)*((unsigned __int16 *)&STACK[0x1630] + v31) >> 1;
        STACK[0x2A8] = (unint64_t)(v186 + 184);
        v1563 = (v187 + v191);
        v195 = v1556 >> 1;
        v1573 = (float64x2_t)vdupq_lane_s64(v1550.i64[0], 0);
        v1574 = (float64x2_t)vdupq_lane_s64(v1548, 0);
        v1571 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&vars0.f64[0], 0);
        v1572 = (float64x2_t)vdupq_lane_s64(v1547, 0);
        v1569 = (float64x2_t)vdupq_lane_s64(v1549, 0);
        v1570 = (float64x2_t)vdupq_lane_s64(v1546, 0);
        if (v1561 <= 1)
          v195 = 1;
        v1560 = v195;
        _Q0 = (float64x2_t)vdupq_lane_s64(v1543, 0);
        v1567 = _Q0;
        v1568 = (float64x2_t)vdupq_lane_s64(v1545, 0);
        STACK[0x378] = 0;
        v196 = STACK[0x2D8];
        STACK[0x2C8] = v190;
        while (1)
        {
          v1562 = v194;
          if (((*(_DWORD *)((char *)&STACK[0xD10] + ((v194 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) >> v194) & 1) != 0)
            break;
LABEL_113:
          v197 = STACK[0x360] + 1;
          v194 = (v1562 + 1);
          STACK[0x360] = v197;
          if (v197 == v1560)
            goto LABEL_108;
        }
        if (STACK[0x620] >= 2)
        {
          v198 = &STACK[0x9B0] + v1561 + STACK[0x360];
          v36 = (*(_DWORD *)v198 & 0x7FFFFFFFu) < 0x7F800000;
          v199 = *((_DWORD *)v198 + 1) & 0x7FFFFFFF;
          if (v36)
          {
            if (v199 >= 2139095040)
            {
LABEL_121:
              sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/BatchLeastSquaresUnsanitized/include/VIO/BatchLeastSquaresUnsanitized/LinearCameraSystemRegularDepthLP.hpp", 332, (uint64_t)"!has_secondary_observations || (meas_secondary[observation_index_in_track].e().isFinite().all() == meas_secondary[observation_index_in_track].e().isFinite().any())", 163, (uint64_t)"Both coordinates in secondary observation track must be finite or not.", 70, (void (*)(void **))sub_21023DDB0);
              v200 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v200 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              if (!byte_254A6DE68 || byte_254A6DE70)
              {
                v682 = qword_254A6DE40;
                for (n = qword_254A6DE48; v682 != n; v682 += 16)
                  (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v682)(*(_QWORD *)(v682 + 8), "!has_secondary_observations || (meas_secondary[observation_index_in_track].e().isFinite().all() == meas_secondary[observation_index_in_track].e().isFinite().any())", 163, "Both coordinates in secondary observation track must be finite or not.", 70);
              }
              v201 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v201 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              v190 = STACK[0x2C8];
              if (!byte_254A6DE68)
                abort();
              qword_254A6DE58(unk_254A6DE60, "!has_secondary_observations || (meas_secondary[observation_index_in_track].e().isFinite().all() == meas_secondary[observation_index_in_track].e().isFinite().any())", 163, "Both coordinates in secondary observation track must be finite or not.", 70);
            }
          }
          else if (v199 < 2139095040)
          {
            goto LABEL_121;
          }
        }
        v202 = 0;
        v203 = STACK[0x360];
        STACK[0x610] = STACK[0x360] + v1559;
        STACK[0x2A0] = STACK[0x2E0] + 8 * v203;
        while (2)
        {
          if (STACK[0x610] == v196 && !v202 || v202 && (*(_DWORD *)STACK[0x2A0] & 0x7FFFFFFFu) > 0x7F7FFFFF)
            goto LABEL_130;
          v205 = STACK[0x600];
          v206 = *(_QWORD *)STACK[0x600];
          v207 = v202;
          v208 = STACK[0x2C0];
          v209 = v206 + 4080 * STACK[0x2C0] + 2024;
          v210 = STACK[0x4B0];
          STACK[0x590] = v207;
          v211 = (v207 + v210);
          STACK[0x640] = v209;
          v212 = v209 + 1016 * v211;
          LODWORD(v210) = *(_DWORD *)(STACK[0x2B8] + 4 * v208);
          LODWORD(v208) = *(_DWORD *)(v205 + 172);
          STACK[0x4A0] = v211;
          v213 = STACK[0x2A8] + 72 * ((_DWORD)v210 + (_DWORD)v211 + v208 * STACK[0x610]);
          v214 = *(_DWORD *)(v212 + 568);
          STACK[0x4F0] = v212;
          LODWORD(STACK[0x390]) = v214;
          if (v214 == -1)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 239, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
            v235 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v235 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v342 = qword_254A6DE40;
              for (ii = qword_254A6DE48; v342 != ii; v342 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v342)(*(_QWORD *)(v342 + 8), "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, "", 0);
            }
            v236 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v236 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            v196 = STACK[0x2D8];
            if (!byte_254A6DE68)
              goto LABEL_614;
            qword_254A6DE58(unk_254A6DE60, "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, "", 0);
            v206 = *(_QWORD *)STACK[0x600];
            v234 = -1;
            v238 = *(float64x2_t *)&STACK[0x340];
            v45 = *(float64x2_t *)&STACK[0x350];
            v239 = *(float64x2_t *)&STACK[0x510];
            v240 = *(float64x2_t *)&STACK[0x4D0];
            v241 = *(float64x2_t *)&STACK[0x500];
            v243 = *(_OWORD *)&STACK[0x320];
            v242 = *(_OWORD *)&STACK[0x330];
            v244 = *(_OWORD *)&STACK[0x4C0];
            v245 = *(_OWORD *)&STACK[0x310];
          }
          else
          {
            v215 = (float64x2_t *)(v212 + 96);
            if (v214 <= 1)
            {
              if (!v214)
              {
                sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1728, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_614:
                abort();
              }
              v216 = 1.0;
              _Q0.f64[0] = *(float64_t *)(v212 + 160);
              v217 = *v215;
              v218 = *(float64x2_t *)(v212 + 112);
              v219 = *(float64x2_t *)(v212 + 128);
              v220 = *(float64x2_t *)(v212 + 144);
              v221 = *(_OWORD *)(v212 + 280);
              v222 = *(float64x2_t *)(v212 + 264);
              *(float64x2_t *)&STACK[0x2F0] = v222;
              *(_OWORD *)&STACK[0x300] = v221;
              v1581 = *(double *)(v212 + 296);
              LODWORD(STACK[0x2E8]) = *(_DWORD *)(v212 + 308);
              v222.f64[0] = *(float64_t *)(v213 + 64);
              v223 = *(int8x16_t *)v213;
              v224 = *(float64x2_t *)(v213 + 16);
              v225 = *(float64x2_t *)(v213 + 32);
              v226 = *(float64x2_t *)(v213 + 48);
              v46 = vabdq_f64(v224, v218);
              v227 = (int8x16_t)vabdq_f64(*(float64x2_t *)v213, v217);
              _Q23 = (float64x2_t)vdupq_n_s64(0x3DDB7CDFD9D7BDBBuLL);
              v45 = (float64x2_t)vcgeq_f64(_Q23, (float64x2_t)vextq_s8(v227, v227, 8uLL));
              if (vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)v45, (int32x4_t)vcgeq_f64(_Q23, v46)), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(_Q23, vabdq_f64(v225, v219)), (int32x4_t)vcgeq_f64(_Q23, vabdq_f64(v226, v220))))))) & 1 | (vabdq_f64(v222, _Q0).f64[0] > 1.0e-10))v228 = -1;
              else
                v228 = 0;
              v43 = (float64x2_t)vdupq_n_s64(v228);
              _Q19 = (float64x2_t)vmvnq_s8((int8x16_t)v43);
              *(int8x8_t *)&_Q0.f64[0] = vorr_s8(vand_s8(*(int8x8_t *)&v222.f64[0], (int8x8_t)v228), vand_s8(*(int8x8_t *)&_Q0.f64[0], *(int8x8_t *)&_Q19.f64[0]));
              *(float64x2_t *)&STACK[0x350] = _Q0;
              v229 = vbslq_s8((int8x16_t)v43, (int8x16_t)v226, (int8x16_t)v220);
              v230 = vbslq_s8((int8x16_t)v43, (int8x16_t)v225, (int8x16_t)v219);
              v231 = vbslq_s8((int8x16_t)v43, (int8x16_t)v224, (int8x16_t)v218);
              v232 = vbslq_s8((int8x16_t)v43, v223, (int8x16_t)v217);
              *(int8x16_t *)&STACK[0x340] = v229;
              *(int8x16_t *)&STACK[0x510] = v230;
              *(int8x16_t *)&STACK[0x4C0] = vextq_s8(v230, v230, 8uLL);
              *(int8x16_t *)&STACK[0x4D0] = v231;
              *(int8x16_t *)&STACK[0x320] = vextq_s8(v231, v231, 8uLL);
              *(int8x16_t *)&STACK[0x330] = vextq_s8(v229, v229, 8uLL);
              *(int8x16_t *)&STACK[0x500] = v232;
              v233 = vextq_s8(v232, v232, 8uLL);
              *(int8x16_t *)&STACK[0x310] = v233;
              v234 = 1;
              LODWORD(STACK[0x490]) = 1;
LABEL_153:
              v254 = &STACK[0x960];
              if (STACK[0x590])
                v254 = (unint64_t *)STACK[0x2B0];
              v255 = *((float *)v254 + STACK[0x360]);
              v256 = &STACK[0x9B0];
              if (STACK[0x590])
                v256 = (unint64_t *)STACK[0x2E0];
              v257 = (float32x2_t)v256[STACK[0x360]];
              LODWORD(STACK[0x380]) = *(unsigned __int8 *)(STACK[0x600] + 3072);
              v258 = v206 + 32 * STACK[0x2D0];
              v233.i64[0] = *(_QWORD *)(v258 + 21280);
              *(int8x16_t *)&STACK[0x4E0] = v233;
              v259 = STACK[0x640];
              v260 = STACK[0x640] + 1016 * STACK[0x4B0];
              v261 = (__int128 *)(v206 + 168 * STACK[0x610]);
              v262 = *v261;
              *(_OWORD *)&STACK[0x5D0] = *v261;
              *(_QWORD *)&v262 = *((_QWORD *)v261 + 2);
              *(_OWORD *)&STACK[0x550] = v262;
              v263 = *(__int128 *)((char *)v261 + 24);
              *(_OWORD *)&STACK[0x5C0] = v263;
              *(_QWORD *)&v263 = *((_QWORD *)v261 + 5);
              *(_OWORD *)&STACK[0x540] = v263;
              v264 = v261[3];
              *(_OWORD *)&STACK[0x5B0] = v264;
              *(_QWORD *)&v264 = *((_QWORD *)v261 + 8);
              *(_OWORD *)&STACK[0x530] = v264;
              *(_QWORD *)&v264 = *((_QWORD *)v261 + 20);
              *(_OWORD *)&STACK[0x460] = v264;
              *(_OWORD *)&STACK[0x450] = v261[9];
              v265 = (__int128 *)(v206 + 168 * v196);
              v266 = *v265;
              *(_OWORD *)&STACK[0x5E0] = *v265;
              *(_QWORD *)&v266 = *((_QWORD *)v265 + 2);
              *(_OWORD *)&STACK[0x570] = v266;
              v267 = *(__int128 *)((char *)v265 + 24);
              *(_OWORD *)&STACK[0x5A0] = v267;
              *(_QWORD *)&v267 = *((_QWORD *)v265 + 5);
              *(_OWORD *)&STACK[0x560] = v267;
              v268 = v265[3];
              *(_OWORD *)&STACK[0x5F0] = v268;
              *(_QWORD *)&v268 = *((_QWORD *)v265 + 8);
              *(_OWORD *)&STACK[0x580] = v268;
              *(_QWORD *)&v268 = *((_QWORD *)v265 + 20);
              *(_OWORD *)&STACK[0x420] = v268;
              v269 = v265[9];
              *(_OWORD *)&STACK[0x410] = v269;
              v270 = v259 + 1016 * STACK[0x4A0];
              STACK[0x388] = v258 + 21256;
              *(_QWORD *)&v269 = *(_QWORD *)(v258 + 21272);
              *(_OWORD *)&STACK[0x3D0] = *(_OWORD *)(v258 + 21256);
              *(_OWORD *)&STACK[0x3E0] = v269;
              v271 = *(int8x16_t *)v260;
              _D11 = *(_QWORD *)(v260 + 40);
              *(_OWORD *)&STACK[0x3B0] = *(_OWORD *)(v260 + 24);
              *(int8x16_t *)&STACK[0x3C0] = v271;
              v273 = *(double *)(v260 + 64);
              v274 = *(_OWORD *)(v260 + 48);
              *(_OWORD *)&STACK[0x3A0] = v274;
              *(_QWORD *)&v274 = *(_QWORD *)(v260 + 88);
              *(_OWORD *)&STACK[0x400] = v274;
              *(_OWORD *)&STACK[0x3F0] = *(_OWORD *)(v260 + 72);
              *(_OWORD *)&STACK[0x480] = *(_OWORD *)(v270 + 72);
              v275 = STACK[0x4F0];
              *(_QWORD *)&v274 = *(_QWORD *)(STACK[0x4F0] + 16);
              *((_QWORD *)&v274 + 1) = *(_QWORD *)(STACK[0x4F0] + 40);
              *(_OWORD *)&STACK[0x640] = v274;
              *(_QWORD *)&v274 = *(_QWORD *)(v270 + 88);
              *(_OWORD *)&STACK[0x4A0] = v274;
              *(_OWORD *)&STACK[0x440] = *(_OWORD *)v275;
              *(_OWORD *)&STACK[0x430] = *(_OWORD *)(v275 + 24);
              v276 = *(double *)(v275 + 64);
              *(_OWORD *)&STACK[0x470] = *(_OWORD *)(v275 + 48);
              if (v234 == -1)
              {
                sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                v277 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                if ((v277 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                {
                  __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A6DE78);
                }
                if (!byte_254A6DE68 || byte_254A6DE70)
                {
                  v344 = qword_254A6DE40;
                  for (jj = qword_254A6DE48; v344 != jj; v344 += 16)
                    (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v344)(*(_QWORD *)(v344 + 8), "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, "", 0);
                }
                v278 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                if ((v278 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                {
                  __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A6DE78);
                }
                v196 = STACK[0x2D8];
                if (!byte_254A6DE68)
LABEL_612:
                  abort();
                qword_254A6DE58(unk_254A6DE60, "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, "", 0);
              }
              _Q2 = vmulq_n_f64(*(float64x2_t *)&STACK[0x3D0], *(double *)&STACK[0x4E0]);
              v280 = vmulq_f64(*(float64x2_t *)&STACK[0x4E0], *(float64x2_t *)&STACK[0x3E0]);
              _Q1 = *(float64x2_t *)&STACK[0x3A0];
              v282 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&STACK[0x3C0], _Q2.f64[0]), *(float64x2_t *)&STACK[0x3B0], _Q2, 1), *(float64x2_t *)&STACK[0x3A0], v280.f64[0]);
              *(float64x2_t *)&STACK[0x3E0] = _Q2;
              __asm { FMLA            D1, D11, V2.D[1] }
              _Q1.f64[0] = vmlad_n_f64(_Q1.f64[0], v273, v280.f64[0]);
              _Q6 = vaddq_f64(v282, *(float64x2_t *)&STACK[0x3F0]);
              v284 = vaddq_f64(_Q1, *(float64x2_t *)&STACK[0x400]);
              v285 = vsubq_f64(*(float64x2_t *)&STACK[0x410], *(float64x2_t *)&STACK[0x450]);
              v286 = vsubq_f64(*(float64x2_t *)&STACK[0x420], *(float64x2_t *)&STACK[0x460]);
              v287 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&STACK[0x5E0], _Q6.f64[0]), *(float64x2_t *)&STACK[0x5A0], _Q6, 1), *(float64x2_t *)&STACK[0x5F0], v284.f64[0]);
              _Q3 = *(float64x2_t *)&STACK[0x570];
              _Q4 = *(_OWORD *)&STACK[0x560];
              *(float64x2_t *)&STACK[0x460] = _Q6;
              __asm { FMLA            D3, D4, V6.D[1] }
              _Q3.f64[0] = vmlad_n_f64(_Q3.f64[0], *(double *)&STACK[0x580], v284.f64[0]);
              *(_QWORD *)&v290 = *(_OWORD *)&vaddq_f64(v286, _Q3);
              _Q0 = vaddq_f64(v285, v287);
              _Q2 = *(float64x2_t *)&STACK[0x550];
              *(_QWORD *)&_Q2.f64[1] = STACK[0x540];
              _Q6 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)&STACK[0x5D0], *(int64x2_t *)&STACK[0x5C0]), _Q0.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)&STACK[0x5D0], *(int64x2_t *)&STACK[0x5C0]), _Q0, 1), _Q2, v290);
              v293 = vsubq_f64(_Q6, *(float64x2_t *)&STACK[0x480]);
              v42 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)&STACK[0x440], *(int64x2_t *)&STACK[0x430]), v293.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)&STACK[0x440], *(int64x2_t *)&STACK[0x430]), v293, 1);
              _Q3 = *(_OWORD *)&STACK[0x470];
              _Q1 = vmulq_f64(*(float64x2_t *)&STACK[0x470], v293);
              _Q2.f64[0] = v293.f64[1];
              __asm { FMLA            D1, D2, V3.D[1] }
              _Q2 = *(_OWORD *)&STACK[0x5B0];
              _Q3 = vmulq_f64(*(float64x2_t *)&STACK[0x5B0], _Q0);
              _Q0.f64[0] = _Q0.f64[1];
              __asm { FMLA            D3, D0, V2.D[1] }
              _Q3.f64[0] = vmlad_n_f64(_Q3.f64[0], *(double *)&STACK[0x530], v290);
              _Q0 = vsubq_f64(_Q3, *(float64x2_t *)&STACK[0x4A0]);
              _Q2 = *(float64x2_t *)&STACK[0x640];
              _Q4 = vmlaq_n_f64(v42, *(float64x2_t *)&STACK[0x640], _Q0.f64[0]);
              _Q1.f64[0] = vmlad_n_f64(_Q1.f64[0], v276, _Q0.f64[0]);
              if (LODWORD(STACK[0x490]))
              {
                v202 = STACK[0x590];
                if (LODWORD(STACK[0x2E8]))
                {
                  if (_Q1.f64[0] >= 0.00000001)
                  {
                    *(float64x2_t *)&STACK[0x3C0] = _Q3;
                    *(float64x2_t *)&STACK[0x3D0] = v280;
                    *(float64x2_t *)&STACK[0x3F0] = _Q6;
                    *(float64x2_t *)&STACK[0x400] = v284;
                    *(float64x2_t *)&STACK[0x470] = _Q1;
                    v299 = 1.0 / _Q1.f64[0];
                    _Q0 = vmulq_n_f64(_Q4, 1.0 / _Q1.f64[0]);
                    v301 = *(float64x2_t *)&STACK[0x2F0];
                    v302 = *(float64x2_t *)&STACK[0x300];
                    v303 = *(double *)&STACK[0x2F8];
                    v304 = _Q4;
                    v305 = *(double *)&STACK[0x308];
                    *(float64x2_t *)&STACK[0x480] = v304;
                    _D5 = vmuld_lane_f64(v299, v304, 1);
                    __asm { FMLA            D6, D5, V0.D[1] }
                    v308 = *(double *)&_D6 * v301.f64[0]
                         + 1.0
                         + *(double *)&_D6 * *(double *)&_D6 * (v303 + *(double *)&_D6 * v302.f64[0]);
                    v309 = vmulq_n_f64((float64x2_t)xmmword_2103B8490, v1581);
                    v310 = vmulq_n_f64(_Q0, v301.f64[0]+ v301.f64[0]+ *(double *)&_D6 * (vmuld_lane_f64(4.0, v301, 1) + 6.0 * v302.f64[0] * *(double *)&_D6));
                    v311 = vmulq_n_f64(v310, _Q0.f64[0]);
                    v312 = vmulq_n_f64(v310, _D5);
                    v313 = (int8x16_t)vmulq_n_f64(_Q0, v305 + v305);
                    v314.f64[1] = v302.f64[1];
                    v314.f64[0] = v1581;
                    v315 = vaddq_f64((float64x2_t)vextq_s8(v313, v313, 8uLL), vmulq_f64(v309, _Q0));
                    v311.f64[0] = v308 + v311.f64[0];
                    *(_QWORD *)&v309.f64[0] = vdupq_laneq_s64((int64x2_t)v309, 1).u64[0];
                    v309.f64[1] = vmuld_lane_f64(6.0, v302, 1);
                    v316 = vmulq_f64(v309, _Q0);
                    *(float64x2_t *)&STACK[0x4A0] = vmlaq_n_f64(vaddq_f64(vmulq_laneq_f64((float64x2_t)vzip1q_s64((int64x2_t)v313, (int64x2_t)v316), _Q0, 1), vmulq_f64(v314, vaddq_f64((float64x2_t)vdupq_lane_s64(_D6, 0), vmulq_f64(_Q0, vaddq_f64(_Q0, _Q0))))), _Q0, v308);
                    v312.f64[1] = v308 + v312.f64[1];
                    v317 = (int64x2_t)vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(vdupq_laneq_s64((int64x2_t)v315, 1), (int64x2_t)vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v316, 1), v316)), v312), v299);
                    v318 = (int8x16_t)vmulq_n_f64(vaddq_f64(v315, v311), v299);
                    *(int8x16_t *)&STACK[0x440] = vextq_s8(v318, v318, 8uLL);
                    *(int8x16_t *)&STACK[0x490] = v318;
                    v319 = -(vmuld_n_f64(*(double *)v318.i64, _Q0.f64[0]) + *(double *)&v318.i64[1] * _Q0.f64[1]);
                    v318.i64[1] = v317.i64[1];
                    *(double *)v318.i64 = v319;
                    *(_QWORD *)&v312.f64[0] = vdupq_laneq_s64(v317, 1).u64[0];
                    v320 = (int8x16_t)vzip1q_s64((int64x2_t)v318, v317);
                    v312.f64[1] = -(vmuld_n_f64(*(double *)v317.i64, _Q0.f64[0]) + *(double *)&v317.i64[1] * _Q0.f64[1]);
                    *(float64x2_t *)&STACK[0x450] = v312;
                    *(int8x16_t *)&STACK[0x410] = vextq_s8((int8x16_t)v312, (int8x16_t)v312, 8uLL);
                    *(int8x16_t *)&STACK[0x430] = v320;
                    v321 = vextq_s8(v320, v320, 8uLL);
                    goto LABEL_181;
                  }
LABEL_219:
                  v22 = 1.0;
                  v190 = STACK[0x2C8];
LABEL_130:
                  if (++v202 == STACK[0x520])
                    goto LABEL_113;
                  continue;
                }
                if (_Q1.f64[0] < 0.00000001)
                  goto LABEL_219;
                *(float64x2_t *)&STACK[0x3C0] = _Q3;
                *(float64x2_t *)&STACK[0x3D0] = v280;
                *(float64x2_t *)&STACK[0x3F0] = _Q6;
                *(float64x2_t *)&STACK[0x400] = v284;
                *(float64x2_t *)&STACK[0x470] = _Q1;
                v346 = 1.0 / _Q1.f64[0];
                _Q1 = vmulq_n_f64(_Q4, 1.0 / _Q1.f64[0]);
                v348 = *(float64x2_t *)&STACK[0x2F0];
                v349 = *(_OWORD *)&STACK[0x300];
                v350 = *(double *)&STACK[0x2F8];
                *(float64x2_t *)&STACK[0x480] = _Q4;
                _D3 = vmuld_lane_f64(v346, _Q4, 1);
                __asm { FMLA            D4, D3, V1.D[1] }
                v353 = _D4 * v348.f64[0] + 1.0 + _D4 * _D4 * (v350 + _D4 * *(double *)&v349);
                v354 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v353, 0);
                *(float64x2_t *)&STACK[0x4A0] = vmulq_n_f64(_Q1, v353);
                v355 = vmulq_n_f64(_Q1, v348.f64[0] + v348.f64[0] + _D4 * (vmuld_lane_f64(4.0, v348, 1) + 6.0 * *(double *)&v349 * _D4));
                v356 = (int8x16_t)vmulq_n_f64(v355, _Q1.f64[0]);
                v357 = vmulq_n_f64(v355, _D3);
                *(_QWORD *)&v358.f64[0] = v356.i64[0];
                v358.f64[1] = v357.f64[1];
                v359 = vaddq_f64(v354, v358);
                v354.f64[0] = v359.f64[0];
                *(_QWORD *)&v354.f64[1] = v356.i64[1];
                v359.f64[0] = v357.f64[0];
                v360 = (int64x2_t)vmulq_n_f64(v359, v346);
                v361 = (int8x16_t)vmulq_n_f64(v354, v346);
                *(int8x16_t *)&STACK[0x440] = vextq_s8(v361, v361, 8uLL);
                *(int8x16_t *)&STACK[0x490] = v361;
                v362 = -(vmuld_n_f64(*(double *)v361.i64, _Q1.f64[0]) + *(double *)&v361.i64[1] * _Q1.f64[1]);
                v361.i64[1] = v360.i64[1];
                *(double *)v361.i64 = v362;
                v356.i64[0] = vdupq_laneq_s64(v360, 1).u64[0];
                v363 = (int8x16_t)vzip1q_s64((int64x2_t)v361, v360);
                *(double *)&v356.i64[1] = -(vmuld_n_f64(*(double *)v360.i64, _Q1.f64[0])
                                          + *(double *)&v360.i64[1] * _Q1.f64[1]);
                *(int8x16_t *)&STACK[0x450] = v356;
                *(int8x16_t *)&STACK[0x410] = vextq_s8(v356, v356, 8uLL);
                *(int8x16_t *)&STACK[0x430] = v363;
                v321 = vextq_s8(v363, v363, 8uLL);
LABEL_181:
                *(int8x16_t *)&STACK[0x420] = v321;
                if (LODWORD(STACK[0x390]) == -1)
                {
LABEL_182:
                  sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                  v364 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v364 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  if (!byte_254A6DE68 || byte_254A6DE70)
                  {
                    v454 = qword_254A6DE40;
                    for (kk = qword_254A6DE48; v454 != kk; v454 += 16)
                      (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v454)(*(_QWORD *)(v454 + 8), "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, "", 0);
                  }
                  v365 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v365 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  v196 = STACK[0x2D8];
                  if (!byte_254A6DE68)
                    goto LABEL_612;
                  qword_254A6DE58(unk_254A6DE60, "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, "", 0);
                }
              }
              else
              {
                _Q2 = vmulq_f64(_Q4, _Q4);
                _D0 = _Q4.f64[1];
                __asm { FMLA            D2, D0, V4.D[1] }
                *(float64x2_t *)&STACK[0x3C0] = _Q3;
                *(float64x2_t *)&STACK[0x3D0] = v280;
                *(float64x2_t *)&STACK[0x3F0] = _Q6;
                *(float64x2_t *)&STACK[0x400] = v284;
                *(float64x2_t *)&STACK[0x480] = _Q4;
                *(float64x2_t *)&STACK[0x470] = _Q1;
                if (_Q2.f64[0] >= 0.00000001)
                {
                  v328 = v255;
                  v329 = _Q1.f64[0] * _Q1.f64[0] + _Q2.f64[0];
                  v330 = sqrt(_Q2.f64[0]);
                  *(float64x2_t *)&STACK[0x640] = _Q2;
                  v331 = atan2(v330, _Q1.f64[0]);
                  v332 = (float64x2_t)vzip2q_s64(*(int64x2_t *)&STACK[0x2F0], *(int64x2_t *)&STACK[0x300]);
                  v333 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&STACK[0x2F0], *(int64x2_t *)&STACK[0x300]);
                  v334 = v331 * v331;
                  v335 = vmulq_n_f64(vaddq_f64(vmulq_f64(v333, (float64x2_t)xmmword_210312E10), vmulq_n_f64(vmulq_f64(v332, (float64x2_t)xmmword_210312E20), v331 * v331)), v331 * v331);
                  v336 = vmulq_n_f64(vaddq_f64(v333, vmulq_n_f64(v332, v331 * v331)), v331 * v331);
                  _Q4 = *(float64x2_t *)&STACK[0x480];
                  v324 = (v331 + v331 * (v336.f64[0] + vmuld_lane_f64(v334 * v334, v336, 1))) / v330;
                  v336.f64[0] = (v335.f64[0] + vmuld_lane_f64(v334 * v334, v335, 1) + v216) / v329;
                  v255 = v328;
                  v326 = vmulq_n_f64(*(float64x2_t *)&STACK[0x480], (*(double *)&STACK[0x470] * v336.f64[0] - v324) / *(double *)&STACK[0x640]);
                  v325 = -v336.f64[0];
                  v327 = vextq_s8((int8x16_t)v326, (int8x16_t)v326, 8uLL).u64[0];
                }
                else
                {
                  v324 = v216 / _Q1.f64[0];
                  v325 = -(v324 * v324);
                  v326.f64[0] = 0.0;
                  v327 = 0;
                }
                v337 = STACK[0x390];
                v338 = vmulq_n_f64(_Q4, v324);
                *(float64x2_t *)&STACK[0x4A0] = v338;
                *(_QWORD *)&v326.f64[1] = v327;
                v339 = (int8x16_t)vmulq_n_f64(v326, _Q4.f64[0]);
                v338.f64[0] = v325 * _Q4.f64[0];
                *(float64x2_t *)&STACK[0x430] = v338;
                v340 = vmulq_laneq_f64(v326, _Q4, 1);
                v341 = (int8x16_t)vdupq_lane_s64(COERCE__INT64(v325 * *(double *)vextq_s8((int8x16_t)_Q4, (int8x16_t)_Q4, 8uLL).i64), 0);
                *(double *)v339.i64 = v324 + *(double *)v339.i64;
                *(float64x2_t *)&STACK[0x420] = v340;
                *(int8x16_t *)&STACK[0x490] = v339;
                *(int8x16_t *)&STACK[0x440] = vextq_s8(v339, v339, 8uLL);
                *(double *)v341.i64 = v324 + v340.f64[1];
                *(int8x16_t *)&STACK[0x450] = v341;
                *(int8x16_t *)&STACK[0x410] = vextq_s8(v341, v341, 8uLL);
                if (v337 == -1)
                  goto LABEL_182;
              }
              v366 = *(_OWORD *)&STACK[0x500];
              *(_QWORD *)&v370.f64[1] = STACK[0x510];
              v367 = *(float64x2_t *)&STACK[0x4D0];
              *(_QWORD *)&v367.f64[1] = STACK[0x4C0];
              _Q3 = vmlaq_f64(v367, v370, *(float64x2_t *)&STACK[0x4A0]);
              v369 = vsubq_f64(_Q3, vcvtq_f64_f32(v257));
              v370.f64[0] = 1.0 / v255;
              _Q1 = vmulq_n_f64(v369, v370.f64[0]);
              v372 = STACK[0x380];
              *(float64x2_t *)&STACK[0x640] = _Q1;
              if (!v372)
                goto LABEL_191;
              _Q3.f64[0] = vmuld_lane_f64(v370.f64[0], v369, 1);
              _Q0 = vmulq_f64(_Q1, _Q1);
              __asm { FMLA            D0, D3, V1.D[1] }
              if (_Q0.f64[0] >= 0.00000000999999994)
              {
                *(float64x2_t *)&STACK[0x3A0] = _Q3;
                *(float64x2_t *)&STACK[0x3B0] = v370;
                *(float64x2_t *)&STACK[0x390] = _Q0;
                v374 = log1p(_Q0.f64[0]);
                v375 = v374 / *(double *)&STACK[0x390];
                v376.f64[0] = 0.0;
                v376.f64[1] = sqrt(v375);
                v377 = vmulq_n_f64(*(float64x2_t *)&STACK[0x640], (1.0 - (v374 + v375))/ (*(double *)&STACK[0x390]* ((*(double *)&STACK[0x390] + 1.0)* v376.f64[1])));
                v378 = vmulq_n_f64(vmlaq_n_f64((float64x2_t)*(unint64_t *)&v376.f64[1], v377, *(double *)&STACK[0x640]), *(double *)&STACK[0x3B0]);
                v379 = vmulq_n_f64(vmlaq_n_f64(v376, v377, *(double *)&STACK[0x3A0]), *(double *)&STACK[0x3B0]);
                *(float64x2_t *)&STACK[0x640] = vmulq_n_f64(*(float64x2_t *)&STACK[0x640], v376.f64[1]);
              }
              else
              {
LABEL_191:
                v379.f64[0] = 0.0;
                v379.f64[1] = 1.0 / v255;
                v378.f64[1] = 0.0;
                v378.f64[0] = v379.f64[1];
              }
              v380 = STACK[0x388];
              v381 = *(float64x2_t *)&STACK[0x3E0];
              v382 = *(int8x16_t *)&STACK[0x460];
              v383 = *(float64x2_t *)&STACK[0x490];
              v384 = *(float64x2_t *)&STACK[0x420];
              _Q9 = (float64x2_t)vextq_s8(*(int8x16_t *)&STACK[0x5D0], *(int8x16_t *)&STACK[0x5D0], 8uLL);
              v385 = vextq_s8(*(int8x16_t *)&STACK[0x5C0], *(int8x16_t *)&STACK[0x5C0], 8uLL);
              v386 = vextq_s8(*(int8x16_t *)&STACK[0x5B0], *(int8x16_t *)&STACK[0x5B0], 8uLL);
              v387 = vextq_s8(*(int8x16_t *)&STACK[0x5E0], *(int8x16_t *)&STACK[0x5E0], 8uLL);
              v388 = vextq_s8(*(int8x16_t *)&STACK[0x5A0], *(int8x16_t *)&STACK[0x5A0], 8uLL);
              v389 = vextq_s8(*(int8x16_t *)&STACK[0x5F0], *(int8x16_t *)&STACK[0x5F0], 8uLL);
              v390 = (float64x2_t)vextq_s8((int8x16_t)v381, (int8x16_t)v381, 8uLL);
              *(_QWORD *)&v391 = vextq_s8(v382, v382, 8uLL).u64[0];
              *(_QWORD *)&v383.f64[1] = STACK[0x440];
              *(_QWORD *)&v392 = *(_OWORD *)&vmulq_f64(*(float64x2_t *)&STACK[0x500], *(float64x2_t *)&STACK[0x430]);
              v393 = (int8x16_t)vmulq_n_f64(v383, *(double *)&STACK[0x500]);
              *(_QWORD *)&v394 = vextq_s8(v393, v393, 8uLL).u64[0];
              *(_QWORD *)&v384.f64[1] = STACK[0x450];
              *(_QWORD *)&v395 = *(_OWORD *)&vmulq_f64(*(float64x2_t *)&STACK[0x510], *(float64x2_t *)&STACK[0x410]);
              v396 = (int8x16_t)vmulq_n_f64(v384, *(double *)&STACK[0x510]);
              *(_QWORD *)&v397 = vextq_s8(v396, v396, 8uLL).u64[0];
              if (v1580)
              {
                v398 = vmulq_f64(v378, (float64x2_t)0);
                v399 = vaddq_f64(v379, v398);
                v400 = vmlaq_laneq_f64(v398, v379, *(float64x2_t *)&STACK[0x4A0], 1);
                *(float64x2_t *)&STACK[0xAA0] = vmlaq_f64(vmulq_n_f64(v378, *(double *)&STACK[0x4A0]), (float64x2_t)0, v379);
                *(float64x2_t *)&STACK[0xAB0] = v400;
                *(float64x2_t *)&STACK[0xAC0] = vmlaq_f64(v378, (float64x2_t)0, v379);
                *(float64x2_t *)&STACK[0xAD0] = v399;
              }
              v401 = vmlaq_n_f64(vmulq_n_f64(v378, *(double *)v393.i64), v379, *(double *)v396.i64);
              v402 = vmlaq_n_f64(vmulq_n_f64(v378, v394), v379, v397);
              v403 = vmlaq_n_f64(vmulq_n_f64(v378, v392), v379, v395);
              v404 = vnegq_f64(v401);
              v405 = *(float64x2_t *)STACK[0x4F0];
              v406 = *(float64x2_t *)(STACK[0x4F0] + 24);
              v407 = vmlsq_lane_f64(vmulq_n_f64(v404, v405.f64[0]), v402, v406.f64[0], 0);
              v408 = vmlsq_laneq_f64(vmulq_laneq_f64(v404, v405, 1), v402, v406, 1);
              v409 = *(float64x2_t *)(STACK[0x4F0] + 48);
              v410 = vmlsq_lane_f64(v407, v403, v409.f64[0], 0);
              _Q24 = vmlsq_laneq_f64(v408, v403, v409, 1);
              v49 = vmlsq_lane_f64(vmlsq_lane_f64(vmulq_n_f64(v404, *(double *)(STACK[0x4F0] + 16)), v402, *(double *)(STACK[0x4F0] + 40), 0), v403, *(double *)(STACK[0x4F0] + 64), 0);
              *(float64x2_t *)&STACK[0xB20] = _Q24;
              *(float64x2_t *)&STACK[0xB30] = v49;
              v411 = vsubq_f64(vmulq_n_f64(v402, *(double *)&STACK[0x470]), vmulq_laneq_f64(v403, *(float64x2_t *)&STACK[0x480], 1));
              v412 = vsubq_f64(vmulq_n_f64(v403, *(double *)&STACK[0x480]), vmulq_n_f64(v401, *(double *)&STACK[0x470]));
              *(float64x2_t *)&STACK[0xB00] = vsubq_f64(vmulq_laneq_f64(v401, *(float64x2_t *)&STACK[0x480], 1), vmulq_n_f64(v402, *(double *)&STACK[0x480]));
              *(float64x2_t *)&STACK[0xB10] = v410;
              *(float64x2_t *)&STACK[0xAE0] = v411;
              *(float64x2_t *)&STACK[0xAF0] = v412;
              _Q6 = vnegq_f64(v410);
              v413 = vsubq_f64(vmulq_laneq_f64(v49, *(float64x2_t *)&STACK[0x3F0], 1), vmulq_n_f64(_Q24, *(double *)&STACK[0x3C0]));
              v414 = vsubq_f64(vmulq_n_f64(_Q24, *(double *)&STACK[0x3F0]), vmulq_laneq_f64(v410, *(float64x2_t *)&STACK[0x3F0], 1));
              *(float64x2_t *)&STACK[0xC10] = vsubq_f64(vmulq_n_f64(v410, *(double *)&STACK[0x3C0]), vmulq_n_f64(v49, *(double *)&STACK[0x3F0]));
              *(float64x2_t *)&STACK[0xC20] = v414;
              v415 = vmlsq_lane_f64(vmlsq_lane_f64(vmulq_n_f64(_Q6, *(double *)&STACK[0x5D0]), _Q24, *(double *)&STACK[0x5C0], 0), v49, *(double *)&STACK[0x5B0], 0);
              v416 = vmlsq_lane_f64(vmlsq_lane_f64(vmulq_n_f64(_Q6, _Q9.f64[0]), _Q24, *(double *)v385.i64, 0), v49, *(double *)v386.i64, 0);
              v417 = vmlsq_lane_f64(vmlsq_lane_f64(vmulq_n_f64(_Q6, *(double *)&STACK[0x550]), _Q24, *(double *)&STACK[0x540], 0), v49, *(double *)&STACK[0x530], 0);
              *(float64x2_t *)&STACK[0xBD0] = v415;
              *(float64x2_t *)&STACK[0xBE0] = v416;
              *(float64x2_t *)&STACK[0xBF0] = v417;
              *(float64x2_t *)&STACK[0xC00] = v413;
              *(float64x2_t *)&STACK[0xC30] = vnegq_f64(v415);
              *(float64x2_t *)&STACK[0xC40] = vnegq_f64(v416);
              *(float64x2_t *)&STACK[0xC50] = vnegq_f64(v417);
              v418 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v415, *(double *)&STACK[0x5E0]), v416, *(double *)v387.i64), v417, *(double *)&STACK[0x570]);
              v419 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v415, *(double *)&STACK[0x5A0]), v416, *(double *)v388.i64), v417, *(double *)&STACK[0x560]);
              v420 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v415, *(double *)&STACK[0x5F0]), v416, *(double *)v389.i64), v417, *(double *)&STACK[0x580]);
              *(float64x2_t *)&STACK[0xB70] = v418;
              *(float64x2_t *)&STACK[0xB80] = v419;
              v421 = vsubq_f64(vmulq_n_f64(v420, v391), vmulq_n_f64(v419, *(double *)&STACK[0x400]));
              v422 = vsubq_f64(vmulq_n_f64(v418, *(double *)&STACK[0x400]), vmulq_n_f64(v420, *(double *)v382.i64));
              v423 = vsubq_f64(vmulq_n_f64(v419, *(double *)v382.i64), vmulq_n_f64(v418, v391));
              *(float64x2_t *)&STACK[0xB90] = v420;
              *(float64x2_t *)&STACK[0xBA0] = v421;
              *(float64x2_t *)&STACK[0xBB0] = v422;
              *(float64x2_t *)&STACK[0xBC0] = v423;
              v423.f64[0] = *(float64_t *)(v260 + 64);
              v43 = *(float64x2_t *)(v260 + 16);
              v425 = *(float64x2_t *)(v260 + 32);
              v424 = *(float64x2_t *)(v260 + 48);
              v426 = (float64x2_t)vextq_s8((int8x16_t)v425, (int8x16_t)v424, 8uLL);
              v427 = (float64x2_t)vzip1q_s64(vdupq_laneq_s64((int64x2_t)v424, 1), (int64x2_t)v423);
              v428 = (float64x2_t)vextq_s8((int8x16_t)v43, (int8x16_t)v425, 8uLL);
              v429 = (float64x2_t)vextq_s8(*(int8x16_t *)v260, (int8x16_t)v43, 8uLL);
              v430 = *(_OWORD *)&STACK[0x3D0];
              v431 = vmulq_n_f64((float64x2_t)vextq_s8((int8x16_t)vdupq_lane_s64(*(_QWORD *)v260, 0), (int8x16_t)v429, 8uLL), *(double *)&STACK[0x3D0]);
              v432 = vmlsq_lane_f64(vmulq_n_f64(v424, v390.f64[0]), v428, *(double *)&STACK[0x3D0], 0);
              *(_QWORD *)&v429.f64[0] = *(_OWORD *)&vmlsq_laneq_f64(vmulq_laneq_f64(*(float64x2_t *)&STACK[0x3D0], v429, 1), v381, v427, 1);
              v433 = vmlsq_lane_f64(v431, (float64x2_t)vextq_s8((int8x16_t)v426, (int8x16_t)v427, 8uLL), v381.f64[0], 0);
              v45 = vmlsq_f64(vmulq_laneq_f64(v381, v425, 1), v390, v43);
              v434 = vmlsq_lane_f64(vmulq_n_f64(v428, v381.f64[0]), *(float64x2_t *)v260, v390.f64[0], 0);
              v436 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v418, v432.f64[0]), v419, v432, 1), v420, vmlsq_f64(vmulq_f64(v390, v423), *(float64x2_t *)&STACK[0x3D0], v426).f64[0]);
              *(float64x2_t *)&STACK[0xB40] = v436;
              *(float64x2_t *)&STACK[0xB50] = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v418, v433.f64[0]), v419, v433, 1), v420, v429.f64[0]);
              *(float64x2_t *)&STACK[0xB60] = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v418, v434.f64[0]), v419, v434, 1), v420, v45.f64[0]);
              *(_QWORD *)&v430 = *(_QWORD *)(v260 + 16);
              v435 = *(float64x2_t *)v260;
              v43.f64[0] = *(float64_t *)(v260 + 40);
              _Q19 = *(float64x2_t *)(v260 + 24);
              v436.f64[0] = *(float64_t *)(v260 + 64);
              v42 = *(float64x2_t *)(v260 + 48);
              v437 = vmulq_n_f64(v418, *(double *)v260);
              *(_OWORD *)&STACK[0x490] = *(_OWORD *)v260;
              *(_OWORD *)&STACK[0x420] = v430;
              v438 = vmlaq_n_f64(vmlaq_laneq_f64(v437, v419, v435, 1), v420, *(double *)&v430);
              *(float64x2_t *)&STACK[0x480] = _Q19;
              *(float64x2_t *)&STACK[0x410] = v43;
              v50 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v418, _Q19.f64[0]), v419, _Q19, 1), v420, v43.f64[0]);
              *(float64x2_t *)&STACK[0x4A0] = v42;
              v51 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v418, v42.f64[0]), v419, v42, 1), v420, v436.f64[0]);
              v46 = vmulq_n_f64(v438, *(double *)&STACK[0x4E0]);
              v439 = vmulq_n_f64(v50, *(double *)&STACK[0x4E0]);
              _Q8 = vmulq_n_f64(v51, *(double *)&STACK[0x4E0]);
              *((_QWORD *)&v430 + 1) = *(_QWORD *)&v1568.f64[1];
              *(_QWORD *)&v430 = *(_QWORD *)(v380 + 16);
              *(_OWORD *)&STACK[0x4E0] = v430;
              v52 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v46, *(double *)v1579.i64), v1574, v439), v1573, _Q8);
              v440 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v46, *(double *)v1578.i64), v1572, v439), v1571, _Q8);
              v53 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v46, *(double *)v1577.i64), v1570, v439), v1569, _Q8);
              _Q31 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v46, *(double *)v1576.i64), v1568, v439), v1567, _Q8);
              *(_OWORD *)&STACK[0x4F0] = *(_OWORD *)v380;
              *(float64x2_t *)&STACK[0xA60] = v52;
              *(float64x2_t *)&STACK[0xA70] = v440;
              *(float64x2_t *)&STACK[0xA80] = v53;
              *(float64x2_t *)&STACK[0xA90] = _Q31;
              v190 = STACK[0x2C8];
              v441 = *(unsigned int *)(STACK[0x368] + 4 * STACK[0x2C8]);
              if ((_DWORD)v441 == -1 || !*(_BYTE *)(STACK[0x600] + 3125))
              {
                *(_OWORD *)&STACK[0xB50] = 0u;
                *(_OWORD *)&STACK[0xB60] = 0u;
                *(_OWORD *)&STACK[0xB40] = 0u;
                v442 = STACK[0x590] + v190;
                v443 = *(unsigned int *)(STACK[0x368] + 4 * v442);
                if ((_DWORD)v443 == -1)
                  goto LABEL_202;
              }
              else
              {
                v442 = STACK[0x590] + v190;
                v443 = *(unsigned int *)(STACK[0x368] + 4 * v442);
                if ((_DWORD)v443 == -1)
                {
LABEL_202:
                  *(_OWORD *)&STACK[0xAF0] = 0u;
                  *(_OWORD *)&STACK[0xB00] = 0u;
                  *(_OWORD *)&STACK[0xAE0] = 0u;
                  if (*(_DWORD *)(v1566 + 4 * v190) != -1)
                    goto LABEL_203;
LABEL_206:
                  *(_OWORD *)&STACK[0xB80] = 0u;
                  *(_OWORD *)&STACK[0xB90] = 0u;
                  *(_OWORD *)&STACK[0xB70] = 0u;
                  if (*(_DWORD *)(v1566 + 4 * v442) != -1)
                    goto LABEL_207;
LABEL_210:
                  *(_OWORD *)&STACK[0xB20] = 0u;
                  *(_OWORD *)&STACK[0xB30] = 0u;
                  *(_OWORD *)&STACK[0xB10] = 0u;
                  v444 = *(unsigned int *)(STACK[0x370] + 4 * v190);
                  if ((_DWORD)v444 != -1)
                    goto LABEL_211;
LABEL_212:
                  *(_OWORD *)&STACK[0xAC0] = 0u;
                  *(_OWORD *)&STACK[0xAD0] = 0u;
                  *(_OWORD *)&STACK[0xAA0] = 0u;
                  *(_OWORD *)&STACK[0xAB0] = 0u;
                  goto LABEL_213;
                }
              }
              if (!*(_BYTE *)(STACK[0x600] + 3125))
                goto LABEL_202;
              if (*(_DWORD *)(v1566 + 4 * v190) == -1)
                goto LABEL_206;
LABEL_203:
              if (!*(_BYTE *)(STACK[0x600] + 3126))
                goto LABEL_206;
              if (*(_DWORD *)(v1566 + 4 * v442) == -1)
                goto LABEL_210;
LABEL_207:
              if (!*(_BYTE *)(STACK[0x600] + 3126))
                goto LABEL_210;
              v444 = *(unsigned int *)(STACK[0x370] + 4 * v190);
              if ((_DWORD)v444 == -1)
                goto LABEL_212;
LABEL_211:
              if (!*(_BYTE *)(STACK[0x600] + 3124))
                goto LABEL_212;
LABEL_213:
              v445 = *(unsigned int *)(v1575 + 4 * v196);
              v446 = *(unsigned int *)(v1575 + 4 * STACK[0x610]);
              v447 = *(unsigned int *)(STACK[0x370] + 4 * v442);
              v448 = *(double *)(STACK[0x600] + 3088);
              *(int8x16_t *)&STACK[0x470] = v389;
              *(int8x16_t *)&STACK[0x460] = v388;
              *(int8x16_t *)&STACK[0x450] = v386;
              *(int8x16_t *)&STACK[0x440] = v385;
              *(float64x2_t *)&STACK[0x430] = _Q9;
              if ((_DWORD)v445 == (_DWORD)v446)
              {
                _Q19 = *(float64x2_t *)&STACK[0xBF0];
                v449 = vaddq_f64(*(float64x2_t *)&STACK[0xC50], *(float64x2_t *)&STACK[0xBF0]);
                _Q9 = vaddq_f64(*(float64x2_t *)&STACK[0xC40], *(float64x2_t *)&STACK[0xBE0]);
                _Q10 = vaddq_f64(*(float64x2_t *)&STACK[0xC30], *(float64x2_t *)&STACK[0xBD0]);
                v450 = vaddq_f64(*(float64x2_t *)&STACK[0xC20], *(float64x2_t *)&STACK[0xBC0]);
                v5 = vaddq_f64(*(float64x2_t *)&STACK[0xC10], *(float64x2_t *)&STACK[0xBB0]);
                _Q11 = vaddq_f64(*(float64x2_t *)&STACK[0xC00], *(float64x2_t *)&STACK[0xBA0]);
                *(float64x2_t *)&STACK[0xF590] = _Q9;
                *(float64x2_t *)&STACK[0xF5A0] = v449;
                *(float64x2_t *)&STACK[0xF570] = v450;
                *(float64x2_t *)&STACK[0xF580] = _Q10;
                *(float64x2_t *)&STACK[0xF550] = _Q11;
                *(float64x2_t *)&STACK[0xF560] = v5;
                if ((_DWORD)v445 == -1)
                {
                  v453 = 0;
                  v452 = 1;
                }
                else
                {
                  STACK[0xCE0] = (unint64_t)&STACK[0xF550];
                  STACK[0xCC0] = v445;
                  *(_QWORD *)&_Q10.f64[1] = vextq_s8((int8x16_t)_Q10, (int8x16_t)_Q10, 8uLL).u64[0];
                  v451 = vmulq_f64(_Q10, _Q10);
                  *(_QWORD *)&v5.f64[1] = vextq_s8((int8x16_t)v5, (int8x16_t)v5, 8uLL).u64[0];
                  _Q19 = vmulq_f64(v5, v5);
                  *(_QWORD *)&v449.f64[1] = vextq_s8((int8x16_t)v449, (int8x16_t)v449, 8uLL).u64[0];
                  *(_QWORD *)&v450.f64[1] = vextq_s8((int8x16_t)v450, (int8x16_t)v450, 8uLL).u64[0];
                  *(_QWORD *)&_Q11.f64[1] = vextq_s8((int8x16_t)_Q11, (int8x16_t)_Q11, 8uLL).u64[0];
                  _Q10 = vmulq_f64(_Q11, _Q11);
                  *(_QWORD *)&_Q9.f64[1] = vextq_s8((int8x16_t)_Q9, (int8x16_t)_Q9, 8uLL).u64[0];
                  v452 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(_Q10, vmulq_f64(_Q9, _Q9)), vmulq_f64(v450, v450)), vmaxnmq_f64(vmaxnmq_f64(_Q19, vmulq_f64(v449, v449)), v451))) <= v448;
                  v453 = 1;
                }
              }
              else
              {
                if ((_DWORD)v445 == -1)
                {
                  v453 = 0;
                  v452 = 1;
                  if ((_DWORD)v446 == -1)
                    goto LABEL_231;
                }
                else
                {
                  STACK[0xCE0] = (unint64_t)&STACK[0xBA0];
                  STACK[0xCC0] = v445;
                  v5 = vmulq_f64(*(float64x2_t *)&STACK[0xBC0], *(float64x2_t *)&STACK[0xBC0]);
                  _Q11 = vmulq_f64(*(float64x2_t *)&STACK[0xBF0], *(float64x2_t *)&STACK[0xBF0]);
                  _Q10 = vmaxnmq_f64(vmaxnmq_f64(vmulq_f64(*(float64x2_t *)&STACK[0xBA0], *(float64x2_t *)&STACK[0xBA0]), vmulq_f64(*(float64x2_t *)&STACK[0xBE0], *(float64x2_t *)&STACK[0xBE0])), v5);
                  _Q9 = vmaxnmq_f64(_Q10, vmaxnmq_f64(vmaxnmq_f64(vmulq_f64(*(float64x2_t *)&STACK[0xBB0], *(float64x2_t *)&STACK[0xBB0]), _Q11), vmulq_f64(*(float64x2_t *)&STACK[0xBD0], *(float64x2_t *)&STACK[0xBD0])));
                  v452 = vmaxnmvq_f64(_Q9) <= v448;
                  v453 = 1;
                  if ((_DWORD)v446 == -1)
                    goto LABEL_231;
                }
                v456 = 8 * v453;
                *(unint64_t *)((char *)&STACK[0xCE0] + v456) = (unint64_t)&STACK[0xC00];
                *(unint64_t *)((char *)&STACK[0xCC0] + v456) = v446;
                ++v453;
                v5 = vmulq_f64(*(float64x2_t *)&STACK[0xC20], *(float64x2_t *)&STACK[0xC20]);
                _Q11 = vmulq_f64(*(float64x2_t *)&STACK[0xC50], *(float64x2_t *)&STACK[0xC50]);
                _Q10 = vmaxnmq_f64(vmaxnmq_f64(vmulq_f64(*(float64x2_t *)&STACK[0xC00], *(float64x2_t *)&STACK[0xC00]), vmulq_f64(*(float64x2_t *)&STACK[0xC40], *(float64x2_t *)&STACK[0xC40])), v5);
                _Q9 = vmaxnmq_f64(_Q10, vmaxnmq_f64(vmaxnmq_f64(vmulq_f64(*(float64x2_t *)&STACK[0xC10], *(float64x2_t *)&STACK[0xC10]), _Q11), vmulq_f64(*(float64x2_t *)&STACK[0xC30], *(float64x2_t *)&STACK[0xC30])));
                _ZF = vmaxnmvq_f64(_Q9) > v448 || !v452;
                v452 = !_ZF;
              }
LABEL_231:
              v22 = 1.0;
              if ((_DWORD)v441 == (_DWORD)v443)
              {
                _Q19 = *(float64x2_t *)&STACK[0xB80];
                v458 = vaddq_f64(*(float64x2_t *)&STACK[0xB90], *(float64x2_t *)&STACK[0xB30]);
                _Q9 = vaddq_f64(*(float64x2_t *)&STACK[0xB80], *(float64x2_t *)&STACK[0xB20]);
                _Q10 = vaddq_f64(*(float64x2_t *)&STACK[0xB70], *(float64x2_t *)&STACK[0xB10]);
                v459 = vaddq_f64(*(float64x2_t *)&STACK[0xB60], *(float64x2_t *)&STACK[0xB00]);
                v5 = vaddq_f64(*(float64x2_t *)&STACK[0xB50], *(float64x2_t *)&STACK[0xAF0]);
                _Q11 = vaddq_f64(*(float64x2_t *)&STACK[0xB40], *(float64x2_t *)&STACK[0xAE0]);
                *(float64x2_t *)&STACK[0xF530] = _Q9;
                *(float64x2_t *)&STACK[0xF540] = v458;
                *(float64x2_t *)&STACK[0xF510] = v459;
                *(float64x2_t *)&STACK[0xF520] = _Q10;
                *(float64x2_t *)&STACK[0xF4F0] = _Q11;
                *(float64x2_t *)&STACK[0xF500] = v5;
                if ((_DWORD)v441 != -1)
                {
                  v460 = 8 * v453;
                  *(unint64_t *)((char *)&STACK[0xCE0] + v460) = (unint64_t)&STACK[0xF4F0];
                  *(unint64_t *)((char *)&STACK[0xCC0] + v460) = v441;
                  ++v453;
                  *(_QWORD *)&_Q10.f64[1] = vextq_s8((int8x16_t)_Q10, (int8x16_t)_Q10, 8uLL).u64[0];
                  v461 = vmulq_f64(_Q10, _Q10);
                  *(_QWORD *)&v5.f64[1] = vextq_s8((int8x16_t)v5, (int8x16_t)v5, 8uLL).u64[0];
                  _Q19 = vmulq_f64(v5, v5);
                  *(_QWORD *)&v458.f64[1] = vextq_s8((int8x16_t)v458, (int8x16_t)v458, 8uLL).u64[0];
                  *(_QWORD *)&v459.f64[1] = vextq_s8((int8x16_t)v459, (int8x16_t)v459, 8uLL).u64[0];
                  *(_QWORD *)&_Q11.f64[1] = vextq_s8((int8x16_t)_Q11, (int8x16_t)_Q11, 8uLL).u64[0];
                  _Q10 = vmulq_f64(_Q11, _Q11);
                  *(_QWORD *)&_Q9.f64[1] = vextq_s8((int8x16_t)_Q9, (int8x16_t)_Q9, 8uLL).u64[0];
                  v452 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(_Q10, vmulq_f64(_Q9, _Q9)), vmulq_f64(v459, v459)), vmaxnmq_f64(vmaxnmq_f64(_Q19, vmulq_f64(v458, v458)), v461))) <= v448&& v452;
                }
                v22 = 1.0;
              }
              else
              {
                if ((_DWORD)v441 != -1)
                {
                  v463 = 8 * v453;
                  *(unint64_t *)((char *)&STACK[0xCE0] + v463) = (unint64_t)&STACK[0xB40];
                  *(unint64_t *)((char *)&STACK[0xCC0] + v463) = v441;
                  ++v453;
                  _Q9 = vmulq_f64(*(float64x2_t *)&STACK[0xB60], *(float64x2_t *)&STACK[0xB60]);
                  _Q19 = vmulq_f64(*(float64x2_t *)&STACK[0xB70], *(float64x2_t *)&STACK[0xB70]);
                  v452 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vmulq_f64(*(float64x2_t *)&STACK[0xB40], *(float64x2_t *)&STACK[0xB40]), vmulq_f64(*(float64x2_t *)&STACK[0xB80], *(float64x2_t *)&STACK[0xB80])), _Q9), vmaxnmq_f64(vmaxnmq_f64(vmulq_f64(*(float64x2_t *)&STACK[0xB50], *(float64x2_t *)&STACK[0xB50]), vmulq_f64(*(float64x2_t *)&STACK[0xB90], *(float64x2_t *)&STACK[0xB90])), _Q19))) <= v448&& v452;
                }
                if ((_DWORD)v443 != -1)
                {
                  v465 = 8 * v453;
                  *(unint64_t *)((char *)&STACK[0xCE0] + v465) = (unint64_t)&STACK[0xAE0];
                  *(unint64_t *)((char *)&STACK[0xCC0] + v465) = v443;
                  ++v453;
                  _Q9 = vmulq_f64(*(float64x2_t *)&STACK[0xB00], *(float64x2_t *)&STACK[0xB00]);
                  _Q19 = vmulq_f64(*(float64x2_t *)&STACK[0xB10], *(float64x2_t *)&STACK[0xB10]);
                  v452 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vmulq_f64(*(float64x2_t *)&STACK[0xAE0], *(float64x2_t *)&STACK[0xAE0]), vmulq_f64(*(float64x2_t *)&STACK[0xB20], *(float64x2_t *)&STACK[0xB20])), _Q9), vmaxnmq_f64(vmaxnmq_f64(vmulq_f64(*(float64x2_t *)&STACK[0xAF0], *(float64x2_t *)&STACK[0xAF0]), vmulq_f64(*(float64x2_t *)&STACK[0xB30], *(float64x2_t *)&STACK[0xB30])), _Q19))) <= v448&& v452;
                }
              }
              if ((_DWORD)v444 != (_DWORD)v447)
              {
                if ((_DWORD)v444 == -1)
                {
                  v470 = 0;
                  v471 = *(float64x2_t *)&STACK[0x4F0];
                  if ((_DWORD)v447 == -1)
                    goto LABEL_264;
                }
                else
                {
                  STACK[0xCB0] = (unint64_t)&STACK[0xA60];
                  STACK[0xCA0] = v444;
                  v470 = 1;
                  v471 = *(float64x2_t *)&STACK[0x4F0];
                  if ((_DWORD)v447 == -1)
                    goto LABEL_264;
                }
                v472 = 8 * v470;
                *(unint64_t *)((char *)&STACK[0xCB0] + v472) = (unint64_t)&STACK[0xAA0];
                *(unint64_t *)((char *)&STACK[0xCA0] + v472) = v447;
                ++v470;
                goto LABEL_264;
              }
              v467 = vaddq_f64(v440, *(float64x2_t *)&STACK[0xAB0]);
              v468 = vaddq_f64(v53, *(float64x2_t *)&STACK[0xAC0]);
              v469 = vaddq_f64(_Q31, *(float64x2_t *)&STACK[0xAD0]);
              *(float64x2_t *)&STACK[0xC60] = vaddq_f64(v52, *(float64x2_t *)&STACK[0xAA0]);
              *(float64x2_t *)&STACK[0xC70] = v467;
              *(float64x2_t *)&STACK[0xC80] = v468;
              *(float64x2_t *)&STACK[0xC90] = v469;
              if ((_DWORD)v444 == -1)
              {
                v470 = 0;
              }
              else
              {
                STACK[0xCB0] = (unint64_t)&STACK[0xC60];
                STACK[0xCA0] = v444;
                v470 = 1;
              }
              v471 = *(float64x2_t *)&STACK[0x4F0];
LABEL_264:
              _Q23 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v438, v471.f64[0]), v50, v471, 1), v51, *(double *)&STACK[0x4E0]);
              if (vmaxnmvq_f64(vmulq_f64(_Q23, _Q23)) > v448 || !v452)
              {
                v202 = STACK[0x590];
                _Q2 = *(float64x2_t *)&STACK[0x640];
              }
              else
              {
                *(float64x2_t *)&STACK[0x3F0] = v436;
                *(int8x16_t *)&STACK[0x400] = v387;
                *(float64x2_t *)&STACK[0x390] = vnegq_f64(_Q24);
                *(float64x2_t *)&STACK[0x3A0] = vnegq_f64(v49);
                v474 = vextq_s8(*(int8x16_t *)&STACK[0x490], *(int8x16_t *)&STACK[0x490], 8uLL);
                *(int8x16_t *)&STACK[0x3B0] = vextq_s8(*(int8x16_t *)&STACK[0x480], *(int8x16_t *)&STACK[0x480], 8uLL);
                *(int8x16_t *)&STACK[0x3C0] = vextq_s8(*(int8x16_t *)&STACK[0x4A0], *(int8x16_t *)&STACK[0x4A0], 8uLL);
                *(int8x16_t *)&STACK[0x3D0] = v474;
                *(int8x16_t *)&STACK[0x3E0] = vextq_s8((int8x16_t)v471, (int8x16_t)v471, 8uLL);
                _Q24 = (float64x2_t)vextq_s8(*(int8x16_t *)&STACK[0x640], *(int8x16_t *)&STACK[0x640], 8uLL);
                if (!v453)
                  goto LABEL_283;
                v475 = 0;
                v476 = *(float64x2_t *)&STACK[0x5D0];
                *(_QWORD *)&v476.f64[1] = STACK[0x430];
                _Q3 = *(float64x2_t *)&STACK[0x5C0];
                *(_QWORD *)&_Q3.f64[1] = STACK[0x440];
                _Q17 = *(_OWORD *)&STACK[0x390];
                _Q16 = *(_OWORD *)&STACK[0x3A0];
                v480 = *(float64x2_t *)&STACK[0x5B0];
                *(_QWORD *)&v480.f64[1] = STACK[0x450];
                _Q4 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v476, _Q6.f64[0]), _Q3, *(double *)&STACK[0x390]), v480, *(double *)&STACK[0x3A0]);
                _Q1 = *(_OWORD *)&STACK[0x540];
                _Q7 = *(_OWORD *)&STACK[0x530];
                v484 = vmlad_n_f64(vmlad_n_f64(*(double *)&STACK[0x550] * _Q6.f64[0], *(double *)&STACK[0x540], *(double *)&STACK[0x390]), *(double *)&STACK[0x530], *(double *)&STACK[0x3A0]);
                _Q2 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v476, _Q6, 1), _Q3, *(float64x2_t *)&STACK[0x390], 1), v480, *(float64x2_t *)&STACK[0x3A0], 1);
                __asm
                {
                  FMLA            D3, D1, V17.D[1]
                  FMLA            D3, D7, V16.D[1]
                }
                v486 = *(float64x2_t *)&STACK[0x5E0];
                *(_QWORD *)&v486.f64[1] = STACK[0x5A0];
                v487 = *(float64x2_t *)&STACK[0x400];
                *(_QWORD *)&v487.f64[1] = STACK[0x460];
                v488 = *(float64x2_t *)&STACK[0x570];
                *(_QWORD *)&v488.f64[1] = STACK[0x560];
                _Q31 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v486, _Q4.f64[0]), v487, _Q4, 1), v488, v484);
                _Q7 = *(_OWORD *)&STACK[0x470];
                __asm { FMLA            D10, D7, V4.D[1] }
                _Q4.f64[0] = _D10 + *(double *)&STACK[0x580] * v484;
                _Q5 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v486, _Q2.f64[0]), v487, _Q2, 1), v488, _Q3.f64[0]);
                __asm { FMLA            D19, D7, V2.D[1] }
                _Q2.f64[0] = _D19 + *(double *)&STACK[0x580] * _Q3.f64[0];
                v493 = *(float64x2_t *)&STACK[0x490];
                *(_QWORD *)&v493.f64[1] = STACK[0x480];
                _Q7 = *(_OWORD *)&STACK[0x3C0];
                v495 = *(_OWORD *)&STACK[0x3D0];
                *(_QWORD *)&_Q19.f64[1] = STACK[0x3B0];
                v496 = *(_OWORD *)&STACK[0x420];
                *(_QWORD *)&_Q9.f64[1] = STACK[0x410];
                __asm { FMLA            D10, D7, V31.D[1] }
                _Q8 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v493, _Q31.f64[0]), _Q19, _Q31, 1), _Q9, _Q4.f64[0]);
                _Q3 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v493, _Q5.f64[0]), _Q19, _Q5, 1), _Q9, _Q2.f64[0]);
                __asm { FMLA            D19, D7, V5.D[1] }
                _Q7 = *(_OWORD *)&STACK[0x3E0];
                __asm
                {
                  FMLA            D5, D7, V8.D[1]
                  FMLA            D4, D7, V3.D[1]
                }
                _Q9.f64[0] = _Q4.f64[0]
                           + *(double *)&STACK[0x4E0] * (_Q19.f64[0] + *(double *)&STACK[0x3F0] * _Q2.f64[0]);
                _Q31.f64[1] = _Q9.f64[0];
                do
                {
                  v517 = 0;
                  v518 = *(&STACK[0xCC0] + v475);
                  do
                  {
                    v519 = *(&STACK[0xCC0] + v517);
                    if (v518 <= v519)
                    {
                      v520 = *(&STACK[0xCE0] + v517);
                      v521 = (float64x2_t *)*(&STACK[0xCE0] + v475);
                      v522 = (const double *)(v520 + 32);
                      *(float64x2x2_t *)_Q11.f64 = vld2q_f64(v522);
                      v523 = (const double *)(v520 + 64);
                      v1582 = vld2q_f64(v523);
                      v524 = v521[1];
                      v525 = v521[2];
                      v526 = v521[3];
                      v527 = v521[4];
                      v528 = v521[5];
                      v529 = vmlaq_laneq_f64(vmulq_n_f64(v1582.val[0], v521->f64[0]), v1582.val[1], *v521, 1);
                      v531 = vmlaq_laneq_f64(vmulq_n_f64(_Q11, v524.f64[0]), v530, v524, 1);
                      v532 = vmlaq_laneq_f64(vmulq_n_f64(v1582.val[0], v524.f64[0]), v1582.val[1], v524, 1);
                      v533 = vmlaq_laneq_f64(vmulq_n_f64(_Q11, v525.f64[0]), v530, v525, 1);
                      v534 = vmlaq_laneq_f64(vmulq_n_f64(v1582.val[0], v525.f64[0]), v1582.val[1], v525, 1);
                      v535 = vmlaq_laneq_f64(vmulq_n_f64(_Q11, v526.f64[0]), v530, v526, 1);
                      v536 = vmlaq_laneq_f64(vmulq_n_f64(v1582.val[0], v526.f64[0]), v1582.val[1], v526, 1);
                      v537 = vmlaq_laneq_f64(vmulq_n_f64(_Q11, v527.f64[0]), v530, v527, 1);
                      v52 = vmlaq_laneq_f64(vmulq_n_f64(v1582.val[0], v527.f64[0]), v1582.val[1], v527, 1);
                      v538 = vmlaq_laneq_f64(vmulq_n_f64(_Q11, v528.f64[0]), v530, v528, 1);
                      v53 = vmlaq_laneq_f64(vmulq_n_f64(v1582.val[0], v528.f64[0]), v1582.val[1], v528, 1);
                      v1582.val[1] = *(float64x2_t *)(v520 + 16);
                      _Q10 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v520, (int64x2_t)v1582.val[1]);
                      v1582.val[0] = (float64x2_t)vzip2q_s64(*(int64x2_t *)v520, (int64x2_t)v1582.val[1]);
                      v539 = vmlaq_laneq_f64(vmulq_n_f64(_Q10, v524.f64[0]), v1582.val[0], v524, 1);
                      v540 = vmlaq_laneq_f64(vmulq_n_f64(_Q10, v525.f64[0]), v1582.val[0], v525, 1);
                      v541 = vmlaq_laneq_f64(vmulq_n_f64(_Q10, v526.f64[0]), v1582.val[0], v526, 1);
                      v542 = vmlaq_laneq_f64(vmulq_n_f64(_Q10, v527.f64[0]), v1582.val[0], v527, 1);
                      v543 = vmlaq_laneq_f64(vmulq_n_f64(_Q10, v528.f64[0]), v1582.val[0], v528, 1);
                      v544 = (float64x2_t *)(v188 + 1568 * v518 + 8 * v519);
                      v1582.val[0] = vaddq_f64(*v544, vmlaq_laneq_f64(vmulq_n_f64(_Q10, v521->f64[0]), v1582.val[0], *v521, 1));
                      v545 = vaddq_f64(v544[2], v529);
                      v546 = vaddq_f64(v544[98], v539);
                      v547 = vaddq_f64(v544[99], v531);
                      v43 = vaddq_f64(v544[100], v532);
                      v548 = vaddq_f64(v544[196], v540);
                      _Q19 = vaddq_f64(v544[197], v533);
                      v45 = vaddq_f64(v544[198], v534);
                      v549 = vaddq_f64(v544[294], v541);
                      v46 = vaddq_f64(v544[295], v535);
                      v550 = vaddq_f64(v544[296], v536);
                      v551 = vaddq_f64(v544[392], v542);
                      v49 = vaddq_f64(v544[393], v537);
                      v50 = vaddq_f64(v544[394], v52);
                      v552 = vaddq_f64(v544[490], v543);
                      v51 = vaddq_f64(v544[491], v538);
                      v544[1] = vaddq_f64(v544[1], vmlaq_laneq_f64(vmulq_n_f64(_Q11, v521->f64[0]), v530, *v521, 1));
                      v544[2] = v545;
                      *v544 = v1582.val[0];
                      v544[98] = v546;
                      v544[100] = v43;
                      v544[99] = v547;
                      v544[196] = v548;
                      v1582.val[0] = vaddq_f64(v544[492], v53);
                      v544[198] = v45;
                      v544[197] = _Q19;
                      v544[294] = v549;
                      v544[296] = v550;
                      v544[295] = v46;
                      v544[392] = v551;
                      v544[394] = v50;
                      v544[393] = v49;
                      v544[490] = v552;
                      v544[492] = v1582.val[0];
                      v544[491] = v51;
                    }
                    ++v517;
                  }
                  while (v453 != v517);
                  v500 = (_OWORD *)*(&STACK[0xCE0] + v475);
                  _Q0 = *(float32x4_t *)v500;
                  _Q1 = *((float64x2_t *)v500 + 1);
                  _Q2 = v500[2];
                  _Q3 = *((float64x2_t *)v500 + 3);
                  _Q4 = v500[4];
                  _Q5 = v500[5];
                  __asm
                  {
                    FMLA            D7, D9, V0.D[1]
                    FMLA            D0, D9, V1.D[1]
                    FMLA            D1, D9, V2.D[1]
                    FMLA            D2, D9, V3.D[1]
                    FMLA            D3, D9, V4.D[1]
                  }
                  *(_QWORD *)&_Q7.f64[1] = _Q0.i64[0];
                  __asm { FMLA            D4, D9, V5.D[1] }
                  *(_QWORD *)&_Q1.f64[1] = _Q2;
                  *(_QWORD *)&_Q3.f64[1] = _Q4;
                  v508 = (float32x4_t *)((char *)&STACK[0x654] + 4 * v518);
                  _Q0.i64[0] = v508[1].i64[0];
                  v509 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(_Q7), _Q1);
                  *(float32x2_t *)&_Q1.f64[0] = vcvt_f32_f64(_Q3);
                  *v508 = vaddq_f32(*v508, v509);
                  v508[1].i64[0] = vaddq_f32(_Q0, (float32x4_t)_Q1).u64[0];
                  v510 = (double *)(STACK[0x630] + 8 * v518);
                  _Q0 = *(float32x4_t *)v500;
                  _Q1 = v500[1];
                  _Q2 = v500[2];
                  _Q3 = v500[3];
                  _Q4 = v500[4];
                  _Q5 = v500[5];
                  v42 = *(float64x2_t *)&STACK[0x640];
                  __asm
                  {
                    FMLA            D7, D24, V0.D[1]
                    FMLA            D0, D24, V1.D[1]
                    FMLA            D1, D24, V2.D[1]
                    FMLA            D2, D24, V3.D[1]
                    FMLA            D3, D24, V4.D[1]
                    FMLA            D4, D24, V5.D[1]
                  }
                  *(double *)_Q0.i64 = v510[1] + *(double *)_Q0.i64;
                  *(double *)&_Q1 = v510[2] + *(double *)&_Q1;
                  *(double *)&_Q2 = v510[3] + *(double *)&_Q2;
                  *(double *)&_Q3 = v510[4] + *(double *)&_Q3;
                  *(double *)&_Q4 = v510[5] + *(double *)&_Q4;
                  *v510 = *v510 + _Q7.f64[0];
                  v510[1] = *(double *)_Q0.i64;
                  *((_QWORD *)v510 + 2) = _Q1;
                  *((_QWORD *)v510 + 3) = _Q2;
                  *((_QWORD *)v510 + 4) = _Q3;
                  *((_QWORD *)v510 + 5) = _Q4;
                  ++v475;
                }
                while (v475 != v453);
                if (v470)
                {
                  for (mm = 0; mm != v453; ++mm)
                  {
                    v554 = *(&STACK[0xCC0] + mm);
                    v555 = &STACK[0xCB0];
                    v556 = &STACK[0xCA0];
                    v557 = v470;
                    do
                    {
                      while (1)
                      {
                        v581 = *v556++;
                        v580 = v581;
                        if (v554 <= v581)
                          break;
                        v558 = *(&STACK[0xCE0] + mm);
                        v559 = (float64x2_t *)*v555++;
                        v560 = v188 + 8 * v554 + 1568 * v580;
                        _Q8 = *(float64x2_t *)(v560 + 1584);
                        _Q9 = *(float64x2_t *)(v560 + 3152);
                        v561 = *(float64x2_t *)(v560 + 4720);
                        v562 = (const double *)(v558 + 32);
                        v1584 = vld2q_f64(v562);
                        v563 = *(int64x2_t *)v558;
                        v564 = *(int64x2_t *)(v558 + 16);
                        v558 += 64;
                        *(float64x2x2_t *)v49.f64 = vld2q_f64((const double *)v558);
                        v565 = v559[1];
                        v566 = v559[2];
                        v567 = v559[3];
                        _Q10 = (float64x2_t)vzip1q_s64(v563, v564);
                        v568 = (float64x2_t)vzip2q_s64(v563, v564);
                        _Q11 = vmlaq_laneq_f64(vmulq_n_f64(_Q10, v559->f64[0]), v568, *v559, 1);
                        v569 = vmlaq_laneq_f64(vmulq_n_f64(_Q10, v565.f64[0]), v568, v565, 1);
                        v570 = vmlaq_laneq_f64(vmulq_n_f64(v1584.val[0], v565.f64[0]), v1584.val[1], v565, 1);
                        v571 = vmlaq_laneq_f64(vmulq_n_f64(v49, v565.f64[0]), v50, v565, 1);
                        v51 = vmlaq_laneq_f64(vmulq_n_f64(_Q10, v566.f64[0]), v568, v566, 1);
                        v5 = vmlaq_laneq_f64(vmulq_n_f64(v1584.val[0], v566.f64[0]), v1584.val[1], v566, 1);
                        v53 = vmlaq_laneq_f64(vmulq_n_f64(v49, v566.f64[0]), v50, v566, 1);
                        v52 = vmlaq_laneq_f64(vmulq_n_f64(_Q10, v567.f64[0]), v568, v567, 1);
                        v45 = vmlaq_laneq_f64(vmulq_n_f64(v1584.val[0], v567.f64[0]), v1584.val[1], v567, 1);
                        v572 = vaddq_f64(*(float64x2_t *)(v560 + 32), vmlaq_laneq_f64(vmulq_n_f64(v49, v559->f64[0]), v50, *v559, 1));
                        v573 = vaddq_f64(*(float64x2_t *)(v560 + 16), vmlaq_laneq_f64(vmulq_n_f64(v1584.val[0], v559->f64[0]), v1584.val[1], *v559, 1));
                        v574 = vaddq_f64(*(float64x2_t *)(v560 + 1568), v569);
                        v575 = vaddq_f64(*(float64x2_t *)(v560 + 1600), v571);
                        v576 = vaddq_f64(*(float64x2_t *)(v560 + 3136), v51);
                        v577 = vaddq_f64(*(float64x2_t *)(v560 + 3168), v53);
                        v46 = vaddq_f64(_Q9, v5);
                        v578 = vaddq_f64(*(float64x2_t *)(v560 + 4704), v52);
                        v579 = vaddq_f64(*(float64x2_t *)(v560 + 4736), vmlaq_laneq_f64(vmulq_n_f64(v49, v567.f64[0]), v50, v567, 1));
                        *(float64x2_t *)v560 = vaddq_f64(*(float64x2_t *)v560, _Q11);
                        *(float64x2_t *)(v560 + 16) = v573;
                        *(float64x2_t *)(v560 + 32) = v572;
                        *(float64x2_t *)(v560 + 1568) = v574;
                        *(float64x2_t *)(v560 + 1584) = vaddq_f64(_Q8, v570);
                        *(float64x2_t *)(v560 + 1600) = v575;
                        *(float64x2_t *)(v560 + 3136) = v576;
                        *(float64x2_t *)(v560 + 3152) = v46;
                        *(float64x2_t *)(v560 + 3168) = v577;
                        *(float64x2_t *)(v560 + 4704) = v578;
                        *(float64x2_t *)(v560 + 4720) = vaddq_f64(v561, v45);
                        *(float64x2_t *)(v560 + 4736) = v579;
                        --v557;
                        v22 = 1.0;
                        if (!v557)
                          goto LABEL_277;
                      }
                      v582 = *v555++;
                      v583 = (float64x2_t *)*(&STACK[0xCE0] + mm);
                      v584 = v188 + 1568 * v554 + 8 * v580;
                      _Q8 = *(float64x2_t *)(v584 + 3152);
                      _Q9 = *(float64x2_t *)(v584 + 4704);
                      _Q10 = *(float64x2_t *)(v584 + 4720);
                      _Q11 = *(float64x2_t *)(v584 + 6272);
                      v585 = *(float64x2_t *)(v584 + 6288);
                      v586 = *(float64x2_t *)(v584 + 7840);
                      v587 = *(float64x2_t *)(v584 + 7856);
                      v589 = *(int64x2_t *)(v582 + 16);
                      v588 = (const double *)(v582 + 32);
                      v1583 = vld2q_f64(v588);
                      v590 = v583[1];
                      v592 = v583[2];
                      v591 = v583[3];
                      v594 = v583[4];
                      v593 = v583[5];
                      v595 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v582, v589);
                      v596 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v582, v589);
                      v45 = vmlaq_laneq_f64(vmulq_n_f64(v595, v583->f64[0]), v596, *v583, 1);
                      v5 = vmlaq_laneq_f64(vmulq_n_f64(v1583.val[0], v583->f64[0]), v1583.val[1], *v583, 1);
                      v52 = vmlaq_laneq_f64(vmulq_n_f64(v595, v590.f64[0]), v596, v590, 1);
                      v597 = vmlaq_laneq_f64(vmulq_n_f64(v1583.val[0], v590.f64[0]), v1583.val[1], v590, 1);
                      v49 = vmlaq_laneq_f64(vmulq_n_f64(v595, v592.f64[0]), v596, v592, 1);
                      v598 = vmlaq_laneq_f64(vmulq_n_f64(v1583.val[0], v592.f64[0]), v1583.val[1], v592, 1);
                      v51 = vmlaq_laneq_f64(vmulq_n_f64(v595, v591.f64[0]), v596, v591, 1);
                      v599 = vmlaq_laneq_f64(vmulq_n_f64(v1583.val[0], v591.f64[0]), v1583.val[1], v591, 1);
                      v600 = vmlaq_laneq_f64(vmulq_n_f64(v595, v594.f64[0]), v596, v594, 1);
                      v601 = vmlaq_laneq_f64(vmulq_n_f64(v1583.val[0], v594.f64[0]), v1583.val[1], v594, 1);
                      v46 = vmlaq_laneq_f64(vmulq_n_f64(v595, v593.f64[0]), v596, v593, 1);
                      v50 = vmlaq_laneq_f64(vmulq_n_f64(v1583.val[0], v593.f64[0]), v1583.val[1], v593, 1);
                      v1583.val[0] = vaddq_f64(*(float64x2_t *)(v584 + 16), v5);
                      v602 = vaddq_f64(*(float64x2_t *)(v584 + 1584), v597);
                      v603 = vaddq_f64(*(float64x2_t *)(v584 + 1568), v52);
                      v604 = vaddq_f64(*(float64x2_t *)(v584 + 3136), v49);
                      *(float64x2_t *)v584 = vaddq_f64(*(float64x2_t *)v584, v45);
                      *(float64x2_t *)(v584 + 16) = v1583.val[0];
                      *(float64x2_t *)(v584 + 1568) = v603;
                      *(float64x2_t *)(v584 + 1584) = v602;
                      *(float64x2_t *)(v584 + 3136) = v604;
                      *(float64x2_t *)(v584 + 3152) = vaddq_f64(_Q8, v598);
                      *(float64x2_t *)(v584 + 4704) = vaddq_f64(_Q9, v51);
                      *(float64x2_t *)(v584 + 4720) = vaddq_f64(_Q10, v599);
                      *(float64x2_t *)(v584 + 6272) = vaddq_f64(_Q11, v600);
                      *(float64x2_t *)(v584 + 6288) = vaddq_f64(v585, v601);
                      *(float64x2_t *)(v584 + 7840) = vaddq_f64(v586, v46);
                      *(float64x2_t *)(v584 + 7856) = vaddq_f64(v587, v50);
                      --v557;
                      v22 = 1.0;
                    }
                    while (v557);
LABEL_277:
                    ;
                  }
LABEL_283:
                  v605 = *(float64x2_t *)&STACK[0x5D0];
                  *(_QWORD *)&v605.f64[1] = STACK[0x430];
                  v606 = *(float64x2_t *)&STACK[0x5C0];
                  *(_QWORD *)&v606.f64[1] = STACK[0x440];
                  _Q18 = *(_OWORD *)&STACK[0x390];
                  _Q17 = *(_OWORD *)&STACK[0x3A0];
                  v609 = *(float64x2_t *)&STACK[0x5B0];
                  *(_QWORD *)&v609.f64[1] = STACK[0x450];
                  _Q0 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v605, _Q6.f64[0]), v606, *(double *)&STACK[0x390]), v609, *(double *)&STACK[0x3A0]);
                  _Q4 = *(_OWORD *)&STACK[0x540];
                  _Q5 = *(_OWORD *)&STACK[0x530];
                  v613 = vmlad_n_f64(vmlad_n_f64(*(double *)&STACK[0x550] * _Q6.f64[0], *(double *)&STACK[0x540], *(double *)&STACK[0x390]), *(double *)&STACK[0x530], *(double *)&STACK[0x3A0]);
                  _Q2 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v605, _Q6, 1), v606, *(float64x2_t *)&STACK[0x390], 1), v609, *(float64x2_t *)&STACK[0x3A0], 1);
                  __asm
                  {
                    FMLA            D3, D4, V18.D[1]
                    FMLA            D3, D5, V17.D[1]
                  }
                  v617 = *(float64x2_t *)&STACK[0x5E0];
                  *(_QWORD *)&v617.f64[1] = STACK[0x5A0];
                  v618 = *(float64x2_t *)&STACK[0x400];
                  *(_QWORD *)&v618.f64[1] = STACK[0x460];
                  v619 = *(float64x2_t *)&STACK[0x570];
                  *(_QWORD *)&v619.f64[1] = STACK[0x560];
                  _Q4 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v617, _Q0.f64[0]), v618, _Q0, 1), v619, v613);
                  _Q19 = *(_OWORD *)&STACK[0x470];
                  __asm { FMLA            D5, D19, V0.D[1] }
                  _Q0.f64[0] = *(double *)&_Q5 + *(double *)&STACK[0x580] * v613;
                  _Q1 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v617, _Q2.f64[0]), v618, _Q2, 1), v619, _D3);
                  __asm { FMLA            D5, D19, V2.D[1] }
                  _Q2.f64[0] = *(double *)&_Q5 + *(double *)&STACK[0x580] * _D3;
                  v623 = *(float64x2_t *)&STACK[0x490];
                  *(_QWORD *)&v623.f64[1] = STACK[0x480];
                  _Q19 = *(float64x2_t *)&STACK[0x3C0];
                  v43 = *(float64x2_t *)&STACK[0x3D0];
                  *(_QWORD *)&v43.f64[1] = STACK[0x3B0];
                  v624 = *(float64x2_t *)&STACK[0x420];
                  *(_QWORD *)&v624.f64[1] = STACK[0x410];
                  _Q3 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v623, _Q4.f64[0]), v43, _Q4, 1), v624, _Q0.f64[0]);
                  v42 = *(float64x2_t *)&STACK[0x4A0];
                  __asm { FMLA            D5, D19, V4.D[1] }
                  _Q4 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v623, _Q1.f64[0]), v43, _Q1, 1), v624, _Q2.f64[0]);
                  __asm { FMLA            D5, D19, V1.D[1] }
                  _Q1.f64[0] = *(double *)&_Q5 + *(double *)&STACK[0x3F0] * _Q2.f64[0];
                  _Q6 = *(float64x2_t *)&STACK[0x3E0];
                  __asm
                  {
                    FMLA            D2, D6, V3.D[1]
                    FMLA            D2, D6, V4.D[1]
                  }
                  _D1 = _Q2.f64[0] + *(double *)&STACK[0x4E0] * _Q1.f64[0];
                  _Q31.f64[1] = _D1;
                  if (v470)
                  {
                    v628 = STACK[0xCA0];
                    v629 = STACK[0xCB0];
                    v630 = (const double *)(STACK[0xCB0] + 32);
                    v631 = STACK[0xCA8];
                    v632 = STACK[0xCB8];
                    v633 = (const double *)(STACK[0xCB8] + 32);
                    v634 = &STACK[0xCB0];
                    v635 = &STACK[0xCA0];
                    v636 = v470;
                    do
                    {
                      v649 = *v635++;
                      v648 = v649;
                      v650 = v188 + 1568 * v649;
                      if (v649 <= v628)
                      {
                        v651 = (float64x2_t *)(v650 + 8 * v628);
                        v652 = *(int64x2_t *)(v629 + 16);
                        *(float64x2x2_t *)v45.f64 = vld2q_f64(v630);
                        v653 = *(float64x2_t *)*v634;
                        v654 = *(float64x2_t *)(*v634 + 16);
                        v655 = *(float64x2_t *)(*v634 + 32);
                        v51 = *(float64x2_t *)(*v634 + 48);
                        v52 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v629, v652);
                        v656 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v629, v652);
                        v657 = vmlaq_laneq_f64(vmulq_n_f64(v52, v653.f64[0]), v656, v653, 1);
                        _Q19 = vmlaq_laneq_f64(vmulq_n_f64(v45, v653.f64[0]), v46, v653, 1);
                        v658 = vmlaq_laneq_f64(vmulq_n_f64(v52, v654.f64[0]), v656, v654, 1);
                        v53 = vmlaq_laneq_f64(vmulq_n_f64(v45, v654.f64[0]), v46, v654, 1);
                        v49 = vmlaq_laneq_f64(vmulq_n_f64(v52, v655.f64[0]), v656, v655, 1);
                        _Q8 = vmlaq_laneq_f64(vmulq_n_f64(v45, v655.f64[0]), v46, v655, 1);
                        v50 = vmlaq_laneq_f64(vmulq_n_f64(v52, v51.f64[0]), v656, v51, 1);
                        v43 = vmlaq_laneq_f64(vmulq_n_f64(v45, v51.f64[0]), v46, v51, 1);
                        v659 = vaddq_f64(v651[1], _Q19);
                        v660 = vaddq_f64(v651[99], v53);
                        v661 = vaddq_f64(v651[98], v658);
                        v662 = vaddq_f64(v651[197], _Q8);
                        v663 = vaddq_f64(v651[196], v49);
                        v664 = vaddq_f64(v651[295], v43);
                        v42 = vaddq_f64(v651[294], v50);
                        *v651 = vaddq_f64(*v651, v657);
                        v651[1] = v659;
                        v651[98] = v661;
                        v651[99] = v660;
                        v651[196] = v663;
                        v651[197] = v662;
                        v651[294] = v42;
                        v651[295] = v664;
                      }
                      if (v470 != 1 && v648 <= v631)
                      {
                        v665 = (float64x2_t *)(v650 + 8 * v631);
                        v666 = *(int64x2_t *)(v632 + 16);
                        *(float64x2x2_t *)v45.f64 = vld2q_f64(v633);
                        v667 = *(float64x2_t *)*v634;
                        v668 = *(float64x2_t *)(*v634 + 16);
                        v669 = *(float64x2_t *)(*v634 + 32);
                        v51 = *(float64x2_t *)(*v634 + 48);
                        v52 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v632, v666);
                        v670 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v632, v666);
                        v671 = vmlaq_laneq_f64(vmulq_n_f64(v52, v667.f64[0]), v670, v667, 1);
                        _Q19 = vmlaq_laneq_f64(vmulq_n_f64(v45, v667.f64[0]), v46, v667, 1);
                        v672 = vmlaq_laneq_f64(vmulq_n_f64(v52, v668.f64[0]), v670, v668, 1);
                        v53 = vmlaq_laneq_f64(vmulq_n_f64(v45, v668.f64[0]), v46, v668, 1);
                        v49 = vmlaq_laneq_f64(vmulq_n_f64(v52, v669.f64[0]), v670, v669, 1);
                        _Q8 = vmlaq_laneq_f64(vmulq_n_f64(v45, v669.f64[0]), v46, v669, 1);
                        v50 = vmlaq_laneq_f64(vmulq_n_f64(v52, v51.f64[0]), v670, v51, 1);
                        v43 = vmlaq_laneq_f64(vmulq_n_f64(v45, v51.f64[0]), v46, v51, 1);
                        v673 = vaddq_f64(v665[1], _Q19);
                        v674 = vaddq_f64(v665[99], v53);
                        v675 = vaddq_f64(v665[98], v672);
                        v676 = vaddq_f64(v665[197], _Q8);
                        v677 = vaddq_f64(v665[196], v49);
                        v678 = vaddq_f64(v665[295], v43);
                        v42 = vaddq_f64(v665[294], v50);
                        *v665 = vaddq_f64(*v665, v671);
                        v665[1] = v673;
                        v665[98] = v675;
                        v665[99] = v674;
                        v665[196] = v677;
                        v665[197] = v676;
                        v665[294] = v42;
                        v665[295] = v678;
                      }
                      v637 = (float64x2_t *)*v634++;
                      _Q2 = *v637;
                      _Q3 = v637[1];
                      _Q4 = v637[2];
                      _Q5 = v637[3];
                      __asm
                      {
                        FMLA            D6, D1, V2.D[1]
                        FMLA            D2, D1, V3.D[1]
                        FMLA            D3, D1, V4.D[1]
                        FMLA            D4, D1, V5.D[1]
                      }
                      _Q6.f64[1] = _Q2.f64[0];
                      _Q3.f64[1] = _Q4.f64[0];
                      *(float32x4_t *)((char *)&STACK[0x654] + 4 * v648) = vaddq_f32(*(float32x4_t *)((char *)&STACK[0x654]+ 4 * v648), vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(_Q6), _Q3));
                      v643 = (double *)(STACK[0x630] + 8 * v648);
                      _Q2 = *v637;
                      _Q3 = v637[1];
                      _Q4 = v637[2];
                      _Q5 = v637[3];
                      _Q6 = vmulq_f64(*(float64x2_t *)&STACK[0x640], *v637);
                      __asm
                      {
                        FMLA            D6, D24, V2.D[1]
                        FMLA            D2, D24, V3.D[1]
                        FMLA            D3, D24, V4.D[1]
                        FMLA            D4, D24, V5.D[1]
                      }
                      _Q2.f64[0] = v643[1] + _Q2.f64[0];
                      _Q3.f64[0] = v643[2] + _Q3.f64[0];
                      _Q4.f64[0] = v643[3] + _Q4.f64[0];
                      *v643 = *v643 + _Q6.f64[0];
                      v643[1] = _Q2.f64[0];
                      v643[2] = _Q3.f64[0];
                      v643[3] = _Q4.f64[0];
                      --v636;
                    }
                    while (v636);
                  }
                }
                _D1 = _Q23.f64[1];
                __asm { FMLA            D0, D1, V31.D[1] }
                *(double *)(v1564 + v1565) = _D0 + *(double *)(v1564 + v1565);
                _Q2 = *(float64x2_t *)&STACK[0x640];
                __asm { FMLA            D0, D24, V23.D[1] }
                *(double *)(STACK[0x630] + 8 * v1563) = _D0 + *(double *)(STACK[0x630] + 8 * v1563);
                v202 = STACK[0x590];
              }
              _Q0 = vmulq_f64(_Q2, _Q2);
              _D1 = _Q2.f64[1];
              __asm { FMLA            D0, D1, V2.D[1] }
              *(double *)&STACK[0x378] = *(double *)&STACK[0x378] + _Q0.f64[0];
              goto LABEL_130;
            }
            v45.f64[0] = *(float64_t *)(v212 + 160);
            v239 = *(float64x2_t *)(v212 + 128);
            v238 = *(float64x2_t *)(v212 + 144);
            v241 = *v215;
            v240 = *(float64x2_t *)(v212 + 112);
            *(_QWORD *)&v242 = vextq_s8((int8x16_t)v238, (int8x16_t)v238, 8uLL).u64[0];
            *(_QWORD *)&v244 = vextq_s8((int8x16_t)v239, (int8x16_t)v239, 8uLL).u64[0];
            *(_QWORD *)&v243 = vextq_s8((int8x16_t)v240, (int8x16_t)v240, 8uLL).u64[0];
            *(_QWORD *)&v245 = vextq_s8((int8x16_t)v241, (int8x16_t)v241, 8uLL).u64[0];
            v246 = *(_OWORD *)(v212 + 280);
            v237 = *(float64x2_t *)(v212 + 264);
            *(float64x2_t *)&STACK[0x2F0] = v237;
            *(_OWORD *)&STACK[0x300] = v246;
            v1581 = *(double *)(v212 + 296);
            LODWORD(STACK[0x2E8]) = *(_DWORD *)(v212 + 308);
            v234 = 2;
          }
          break;
        }
        v216 = 1.0;
        LODWORD(STACK[0x490]) = 0;
        v237.f64[0] = *(float64_t *)(v213 + 64);
        v248 = *(float64x2_t *)(v213 + 32);
        v247 = *(float64x2_t *)(v213 + 48);
        v249 = *(float64x2_t *)(v213 + 16);
        *(_QWORD *)&v241.f64[1] = v245;
        *(_QWORD *)&v238.f64[1] = v242;
        *(_QWORD *)&v239.f64[1] = v244;
        *(_QWORD *)&v240.f64[1] = v243;
        v250 = (int8x16_t)vabdq_f64(*(float64x2_t *)v213, v241);
        v43 = (float64x2_t)vdupq_n_s64(0x3DDB7CDFD9D7BDBBuLL);
        if (vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v43, (float64x2_t)vextq_s8(v250, v250, 8uLL)), (int32x4_t)vcgeq_f64(v43, vabdq_f64(v249, v240))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v43, vabdq_f64(v248, v239)), (int32x4_t)vcgeq_f64(v43, vabdq_f64(v247, v238))))))) & 1 | (vabdq_f64(v237, v45).f64[0] > 1.0e-10))v251 = -1;
        else
          v251 = 0;
        v252 = (int8x16_t)vdupq_n_s64(v251);
        *(int8x8_t *)&v237.f64[0] = vorr_s8(vand_s8(*(int8x8_t *)&v237.f64[0], (int8x8_t)v251), vand_s8(*(int8x8_t *)&v45.f64[0], (int8x8_t)*(_OWORD *)&vmvnq_s8(v252)));
        v46 = (float64x2_t)vbslq_s8(v252, (int8x16_t)v247, (int8x16_t)v238);
        v253 = vbslq_s8(v252, (int8x16_t)v248, (int8x16_t)v239);
        _Q23 = (float64x2_t)vbslq_s8(v252, (int8x16_t)v249, (int8x16_t)v240);
        _Q24 = (float64x2_t)vbslq_s8(v252, *(int8x16_t *)v213, (int8x16_t)v241);
        *(float64x2_t *)&STACK[0x340] = v46;
        *(float64x2_t *)&STACK[0x350] = v237;
        *(int8x16_t *)&STACK[0x510] = v253;
        *(int8x16_t *)&STACK[0x4C0] = vextq_s8(v253, v253, 8uLL);
        *(float64x2_t *)&STACK[0x4D0] = _Q23;
        *(int8x16_t *)&STACK[0x320] = vextq_s8((int8x16_t)_Q23, (int8x16_t)_Q23, 8uLL);
        *(int8x16_t *)&STACK[0x330] = vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL);
        *(float64x2_t *)&STACK[0x500] = _Q24;
        v233 = vextq_s8((int8x16_t)_Q24, (int8x16_t)_Q24, 8uLL);
        *(int8x16_t *)&STACK[0x310] = v233;
        goto LABEL_153;
      }
LABEL_108:
      v192 = *(double *)(STACK[0x600] + 3112);
      if (*(_BYTE *)(STACK[0x600] + 3120))
        v193 = v192 + *(double *)(v1564 + v1565);
      else
        v193 = (v192 + v22) * *(double *)(v1564 + v1565);
      *(double *)(v1564 + v1565) = v193;
      v684 = *(unsigned __int8 *)(STACK[0x600] + 3123);
      v685 = *(unsigned __int8 *)(STACK[0x600] + 3121);
      v686 = *(unsigned __int8 *)(STACK[0x600] + 3122);
      v687 = 4 * v190;
      v688 = STACK[0x368] + 4 * v190;
      v689 = fabs(v193);
      _Q0.f64[0] = v22 / v193;
      if (v689 <= *(double *)(STACK[0x600] + 3096))
        _Q0.f64[0] = 0.0;
      *(float64_t *)(v1564 + 8 * STACK[0x2D0]) = _Q0.f64[0];
      if (v1556 >= 2)
      {
        v771 = 0;
        v772 = STACK[0x370] + 4 * (STACK[0x4B0] + v1555);
        v773 = (unsigned int *)(v1575 + 4 * v1559);
        v774 = v1556 >> 1;
        do
        {
          v775 = *(unsigned int *)(v1575 + 4 * v1559 + 4 * v771);
          if ((_DWORD)v775 != -1)
          {
            v776 = v775 + 1;
            v777 = (v775 + 2);
            v778 = (v775 + 3);
            v779 = (v775 + 4);
            v780 = (v775 + 5);
            v781 = 196 * v775;
            v782 = v773;
            v783 = v774;
            do
            {
              v785 = *v782++;
              v784 = v785;
              if (v785 != -1)
              {
                v786.i32[0] = *((_DWORD *)&STACK[0x654] + (v784 + 2));
                v786.i32[1] = *((_DWORD *)&STACK[0x654] + (v784 + 3));
                v787 = vcvtq_f64_f32(*(float32x2_t *)((char *)&STACK[0x654] + 4 * v784));
                v788.i32[0] = *((_DWORD *)&STACK[0x654] + (v784 + 4));
                v788.i32[1] = *((_DWORD *)&STACK[0x654] + (v784 + 5));
                v789 = vcvtq_f64_f32(v788);
                v790 = *((float *)&STACK[0x654] + v775);
                v791 = *((float *)&STACK[0x654] + v776);
                v792 = *((float *)&STACK[0x654] + v777);
                v793 = *((float *)&STACK[0x654] + v778);
                v794 = *((float *)&STACK[0x654] + v779);
                v795 = *((float *)&STACK[0x654] + v780);
                v796 = (float64x2_t *)(v188 + 8 * (v784 + v781));
                v797.f64[0] = _Q0.f64[0];
                v797.f64[1] = _Q0.f64[0];
                _Q11 = vmulq_f64(v797, v789);
                v798.f64[0] = _Q0.f64[0];
                v798.f64[1] = _Q0.f64[0];
                _Q8 = vmulq_f64(v798, vcvtq_f64_f32(v786));
                v798.f64[0] = _Q0.f64[0];
                v798.f64[1] = _Q0.f64[0];
                _Q31 = vmulq_f64(v798, v787);
                _Q2 = vmlsq_lane_f64(v796[1], _Q8, v790, 0);
                v799 = vmlsq_lane_f64(v796[2], _Q11, v790, 0);
                v800 = vmlsq_lane_f64(*v796, _Q31, v790, 0);
                v801 = vmlsq_lane_f64(v796[99], _Q8, v791, 0);
                _Q6 = vmlsq_lane_f64(v796[100], _Q11, v791, 0);
                v802 = vmlsq_lane_f64(v796[98], _Q31, v791, 0);
                v42 = vmlsq_lane_f64(v796[197], _Q8, v792, 0);
                v803 = vmlsq_lane_f64(v796[198], _Q11, v792, 0);
                v43 = vmlsq_lane_f64(v796[196], _Q31, v792, 0);
                _Q19 = vmlsq_lane_f64(v796[295], _Q8, v793, 0);
                v804 = vmlsq_lane_f64(v796[296], _Q11, v793, 0);
                v46 = vmlsq_lane_f64(v796[294], _Q31, v793, 0);
                v805 = vmlsq_lane_f64(v796[393], _Q8, v794, 0);
                _Q23 = vmlsq_lane_f64(v796[394], _Q11, v794, 0);
                _Q24 = vmlsq_lane_f64(v796[392], _Q31, v794, 0);
                v806 = vmlsq_lane_f64(v796[491], _Q8, v795, 0);
                v49 = vmlsq_lane_f64(v796[492], _Q11, v795, 0);
                v50 = vmlsq_lane_f64(v796[490], _Q31, v795, 0);
                v796[1] = _Q2;
                v796[2] = v799;
                *v796 = v800;
                v796[98] = v802;
                v796[100] = _Q6;
                v796[99] = v801;
                v796[196] = v43;
                v796[198] = v803;
                v796[197] = v42;
                v796[294] = v46;
                v796[296] = v804;
                v796[295] = _Q19;
                v796[392] = _Q24;
                v796[394] = _Q23;
                v796[393] = v805;
                v796[490] = v50;
                v796[492] = v49;
                v796[491] = v806;
              }
              --v783;
            }
            while (v783);
            if (v685)
            {
              v807 = 0;
              do
              {
                v808 = 0;
                v809 = *(_DWORD *)(v688 + 4 * v807);
                LODWORD(STACK[0xF550]) = v809;
                LODWORD(STACK[0xF554]) = v809 + 3;
                v810 = 1;
                do
                {
                  while (1)
                  {
                    v825 = *((unsigned int *)&STACK[0xF550] + v808);
                    if (v775 <= v825)
                      break;
                    v811.i32[0] = *((_DWORD *)&STACK[0x654] + v775);
                    v811.i32[1] = *((_DWORD *)&STACK[0x654] + v776);
                    v812.i32[0] = *((_DWORD *)&STACK[0x654] + v777);
                    v812.i32[1] = *((_DWORD *)&STACK[0x654] + v778);
                    v813.i32[0] = *((_DWORD *)&STACK[0x654] + v779);
                    v813.i32[1] = *((_DWORD *)&STACK[0x654] + v780);
                    v814 = *((float *)&STACK[0x654] + v825);
                    v815 = *((float *)&STACK[0x654] + v825 + 1);
                    v816 = *((float *)&STACK[0x654] + (v825 + 2));
                    v817 = (float64x2_t *)(v188 + 8 * (v775 + 196 * v825));
                    v818.f64[0] = _Q0.f64[0];
                    v818.f64[1] = _Q0.f64[0];
                    v819 = vmulq_f64(v818, vcvtq_f64_f32(v813));
                    v818.f64[0] = _Q0.f64[0];
                    v818.f64[1] = _Q0.f64[0];
                    _Q2 = vmulq_f64(v818, vcvtq_f64_f32(v812));
                    _Q23.f64[0] = _Q0.f64[0];
                    _Q23.f64[1] = _Q0.f64[0];
                    v820 = vmulq_f64(_Q23, vcvtq_f64_f32(v811));
                    v821 = vmlsq_lane_f64(v817[2], v819, v814, 0);
                    v42 = vmlsq_lane_f64(v817[1], _Q2, v814, 0);
                    v822 = vmlsq_lane_f64(v817[100], v819, v815, 0);
                    _Q19 = vmlsq_lane_f64(v817[99], _Q2, v815, 0);
                    v43 = vmlsq_lane_f64(v817[98], v820, v815, 0);
                    _Q24 = vmlsq_lane_f64(v817[198], v819, v816, 0);
                    v823 = vmlsq_lane_f64(v817[197], _Q2, v816, 0);
                    v46 = vmlsq_lane_f64(v817[196], v820, v816, 0);
                    *v817 = vmlsq_lane_f64(*v817, v820, v814, 0);
                    v817[1] = v42;
                    v817[2] = v821;
                    v817[98] = v43;
                    v817[99] = _Q19;
                    v817[100] = v822;
                    v817[196] = v46;
                    v817[197] = v823;
                    v817[198] = _Q24;
                    v824 = (v686 != 0) & v810;
                    v808 = 1;
                    v810 = 0;
                    if ((v824 & 1) == 0)
                      goto LABEL_381;
                  }
                  v826.i32[0] = *((_DWORD *)&STACK[0x654] + v825);
                  v826.i32[1] = *((_DWORD *)&STACK[0x654] + (v825 + 1));
                  v827 = vcvtq_f64_f32(v826);
                  _Q19.f64[0] = *((float *)&STACK[0x654] + (v825 + 2));
                  v828 = *((float *)&STACK[0x654] + v775);
                  v829 = *((float *)&STACK[0x654] + v776);
                  v830 = *((float *)&STACK[0x654] + v777);
                  v831 = *((float *)&STACK[0x654] + v778);
                  v832 = *((float *)&STACK[0x654] + v779);
                  v833 = *((float *)&STACK[0x654] + v780);
                  v834 = (float64x2_t *)(v188 + 8 * (v825 + v781));
                  _Q23.f64[0] = v834[1].f64[0];
                  _Q24.f64[0] = v834[99].f64[0];
                  v49.f64[0] = v834[197].f64[0];
                  v50.f64[0] = v834[295].f64[0];
                  v51.f64[0] = v834[393].f64[0];
                  v52.f64[0] = v834[491].f64[0];
                  v835.f64[0] = _Q0.f64[0];
                  v835.f64[1] = _Q0.f64[0];
                  v43 = vmulq_f64(v835, v827);
                  _Q19 = vmulq_f64(_Q0, _Q19);
                  v835.f64[0] = v828 * _Q19.f64[0];
                  v53.f64[0] = v829 * _Q19.f64[0];
                  _Q31.f64[0] = v830 * _Q19.f64[0];
                  _Q8.f64[0] = v831 * _Q19.f64[0];
                  _Q9.f64[0] = v832 * _Q19.f64[0];
                  _Q19.f64[0] = v833 * _Q19.f64[0];
                  v836 = vmlsq_lane_f64(v834[98], v43, v829, 0);
                  v46 = vsubq_f64(_Q24, v53);
                  _Q6 = vmlsq_lane_f64(v834[196], v43, v830, 0);
                  v837 = vmlsq_lane_f64(v834[294], v43, v831, 0);
                  v42 = vmlsq_lane_f64(v834[392], v43, v832, 0);
                  _Q2 = vsubq_f64(v51, _Q9);
                  v838 = vmlsq_lane_f64(v834[490], v43, v833, 0);
                  *v834 = vmlsq_lane_f64(*v834, v43, v828, 0);
                  *(_QWORD *)&v834[1].f64[0] = *(_OWORD *)&vsubq_f64(_Q23, v835);
                  v834[98] = v836;
                  v834[99].f64[0] = v46.f64[0];
                  v834[196] = _Q6;
                  *(_QWORD *)&v834[197].f64[0] = *(_OWORD *)&vsubq_f64(v49, _Q31);
                  v834[294] = v837;
                  *(_QWORD *)&v834[295].f64[0] = *(_OWORD *)&vsubq_f64(v50, _Q8);
                  v834[392] = v42;
                  v834[393].f64[0] = _Q2.f64[0];
                  v834[490] = v838;
                  *(_QWORD *)&v834[491].f64[0] = *(_OWORD *)&vsubq_f64(v52, _Q19);
                  v839 = (v686 != 0) & v810;
                  v808 = 1;
                  v810 = 0;
                }
                while ((v839 & 1) != 0);
LABEL_381:
                ++v807;
              }
              while (v807 != STACK[0x620]);
            }
            if (v684)
            {
              v840 = (unsigned int *)v772;
              v841 = STACK[0x620];
              do
              {
                while (1)
                {
                  v857 = *v840++;
                  v856 = v857;
                  if (v775 <= v857)
                    break;
                  v842.i32[0] = *((_DWORD *)&STACK[0x654] + v775);
                  v842.i32[1] = *((_DWORD *)&STACK[0x654] + v776);
                  v843.i32[0] = *((_DWORD *)&STACK[0x654] + v777);
                  v843.i32[1] = *((_DWORD *)&STACK[0x654] + v778);
                  v844.i32[0] = *((_DWORD *)&STACK[0x654] + v779);
                  v844.i32[1] = *((_DWORD *)&STACK[0x654] + v780);
                  v845 = *((float *)&STACK[0x654] + v856);
                  v846 = *((float *)&STACK[0x654] + v856 + 1);
                  v847 = *((float *)&STACK[0x654] + (v856 + 2));
                  v848 = *((float *)&STACK[0x654] + (v856 + 3));
                  v849 = (float64x2_t *)(v188 + 8 * (v775 + 196 * v856));
                  v850.f64[0] = _Q0.f64[0];
                  v850.f64[1] = _Q0.f64[0];
                  v851 = vmulq_f64(v850, vcvtq_f64_f32(v844));
                  v850.f64[0] = _Q0.f64[0];
                  v850.f64[1] = _Q0.f64[0];
                  _Q2 = vmulq_f64(v850, vcvtq_f64_f32(v843));
                  v51.f64[0] = _Q0.f64[0];
                  v51.f64[1] = _Q0.f64[0];
                  v852 = vmulq_f64(v51, vcvtq_f64_f32(v842));
                  v43 = vmlsq_lane_f64(v849[2], v851, v845, 0);
                  v853 = vmlsq_lane_f64(v849[1], _Q2, v845, 0);
                  v42 = vmlsq_lane_f64(*v849, v852, v845, 0);
                  v46 = vmlsq_lane_f64(v849[100], v851, v846, 0);
                  v854 = vmlsq_lane_f64(v849[99], _Q2, v846, 0);
                  _Q19 = vmlsq_lane_f64(v849[98], v852, v846, 0);
                  _Q24 = vmlsq_lane_f64(v849[198], v851, v847, 0);
                  _Q23 = vmlsq_lane_f64(v849[197], _Q2, v847, 0);
                  v855 = vmlsq_lane_f64(v849[196], v852, v847, 0);
                  v52 = vmlsq_lane_f64(v849[296], v851, v848, 0);
                  v50 = vmlsq_lane_f64(v849[295], _Q2, v848, 0);
                  v49 = vmlsq_lane_f64(v849[294], v852, v848, 0);
                  *v849 = v42;
                  v849[1] = v853;
                  v849[2] = v43;
                  v849[98] = _Q19;
                  v849[99] = v854;
                  v849[100] = v46;
                  v849[196] = v855;
                  v849[197] = _Q23;
                  v849[198] = _Q24;
                  v849[294] = v49;
                  v849[295] = v50;
                  v849[296] = v52;
                  if (!--v841)
                    goto LABEL_373;
                }
                v858.i32[0] = *((_DWORD *)&STACK[0x654] + v856);
                v858.i32[1] = *((_DWORD *)&STACK[0x654] + (v856 + 1));
                v859.i32[0] = *((_DWORD *)&STACK[0x654] + (v856 + 2));
                v859.i32[1] = *((_DWORD *)&STACK[0x654] + (v856 + 3));
                v860 = *((float *)&STACK[0x654] + v775);
                v861 = *((float *)&STACK[0x654] + v776);
                v862 = *((float *)&STACK[0x654] + v777);
                v863 = *((float *)&STACK[0x654] + v778);
                v864 = *((float *)&STACK[0x654] + v779);
                v865 = *((float *)&STACK[0x654] + v780);
                v866 = (float64x2_t *)(v188 + 8 * (v856 + v781));
                v867 = vmulq_n_f64(vcvtq_f64_f32(v858), _Q0.f64[0]);
                _Q2 = vmulq_n_f64(vcvtq_f64_f32(v859), _Q0.f64[0]);
                v43 = vmlsq_lane_f64(v866[1], _Q2, v860, 0);
                v868 = vmlsq_lane_f64(v866[99], _Q2, v861, 0);
                _Q19 = vmlsq_lane_f64(v866[98], v867, v861, 0);
                v869 = vmlsq_lane_f64(v866[197], _Q2, v862, 0);
                v46 = vmlsq_lane_f64(v866[196], v867, v862, 0);
                _Q24 = vmlsq_lane_f64(v866[295], _Q2, v863, 0);
                _Q23 = vmlsq_lane_f64(v866[294], v867, v863, 0);
                v50 = vmlsq_lane_f64(v866[393], _Q2, v864, 0);
                v49 = vmlsq_lane_f64(v866[392], v867, v864, 0);
                v52 = vmlsq_lane_f64(v866[491], _Q2, v865, 0);
                v51 = vmlsq_lane_f64(v866[490], v867, v865, 0);
                *v866 = vmlsq_lane_f64(*v866, v867, v860, 0);
                v866[1] = v43;
                v866[98] = _Q19;
                v866[99] = v868;
                v866[196] = v46;
                v866[197] = v869;
                v866[294] = _Q23;
                v866[295] = _Q24;
                v866[392] = v49;
                v866[393] = v50;
                v866[490] = v51;
                v866[491] = v52;
                --v841;
              }
              while (v841);
            }
          }
LABEL_373:
          ++v771;
          --v774;
          ++v773;
        }
        while (v771 != v1561);
      }
      v690 = STACK[0x370] + v687;
      if (v685)
      {
        v691 = 0;
        _ZF = v686 == 0;
        v692 = 1;
        if (!_ZF)
          v692 = 2;
        do
        {
          v693 = *(_DWORD *)(v688 + 4 * v691);
          LODWORD(STACK[0xF550]) = v693;
          LODWORD(STACK[0xF554]) = v693 + 3;
          v694 = v691;
          do
          {
            v695 = 0;
            v696 = *(_DWORD *)(v688 + 4 * v694);
            LODWORD(STACK[0xF4F0]) = v696;
            LODWORD(STACK[0xF4F4]) = v696 + 3;
            do
            {
              v697 = 0;
              v698 = *((unsigned int *)&STACK[0xF550] + v695);
              do
              {
                v699 = *((unsigned int *)&STACK[0xF4F0] + v697);
                v700.i32[0] = *((_DWORD *)&STACK[0x654] + v699);
                v700.i32[1] = *((_DWORD *)&STACK[0x654] + (v699 + 1));
                _Q2.f64[0] = *((float *)&STACK[0x654] + (v699 + 2));
                v701 = *((float *)&STACK[0x654] + v698);
                v702 = *((float *)&STACK[0x654] + (v698 + 1));
                v703 = *((float *)&STACK[0x654] + (v698 + 2));
                v704 = (float64x2_t *)(v188 + 8 * (v699 + 196 * v698));
                _Q6.f64[0] = v704[1].f64[0];
                v42.f64[0] = v704[99].f64[0];
                v43.f64[0] = v704[197].f64[0];
                v705.f64[0] = _Q0.f64[0];
                v705.f64[1] = _Q0.f64[0];
                v706 = vmulq_f64(v705, vcvtq_f64_f32(v700));
                _Q2 = vmulq_f64(_Q0, _Q2);
                v705.f64[0] = v701 * _Q2.f64[0];
                v46.f64[0] = v702 * _Q2.f64[0];
                _Q2.f64[0] = v703 * _Q2.f64[0];
                v707 = vmlsq_lane_f64(*v704, v706, v701, 0);
                v708 = vmlsq_lane_f64(v704[98], v706, v702, 0);
                v709 = vmlsq_lane_f64(v704[196], v706, v703, 0);
                *v704 = v707;
                *(_QWORD *)&v704[1].f64[0] = *(_OWORD *)&vsubq_f64(_Q6, v705);
                v704[98] = v708;
                *(_QWORD *)&v704[99].f64[0] = *(_OWORD *)&vsubq_f64(v42, v46);
                v704[196] = v709;
                *(_QWORD *)&v704[197].f64[0] = *(_OWORD *)&vsubq_f64(v43, _Q2);
                ++v697;
              }
              while (v692 != v697);
              ++v695;
            }
            while (v695 != v692);
            ++v694;
          }
          while (v694 < STACK[0x620]);
          if (v684)
          {
            v710 = 0;
            do
            {
              v711 = *(unsigned int *)(v690 + 4 * v710);
              v712 = (v711 + 1);
              v713 = (v711 + 2);
              v714 = (v711 + 3);
              v715 = &STACK[0xF550];
              v716 = v692;
              do
              {
                v728 = *(_DWORD *)v715;
                v715 = (unint64_t *)((char *)v715 + 4);
                v727 = v728;
                if (v728 != -1)
                {
                  if (v727 > v711)
                  {
                    v717.i32[0] = *((_DWORD *)&STACK[0x654] + v727);
                    v717.i32[1] = *((_DWORD *)&STACK[0x654] + (v727 + 1));
                    _Q2.f64[0] = *((float *)&STACK[0x654] + (v727 + 2));
                    v718 = *((float *)&STACK[0x654] + v711);
                    v719 = *((float *)&STACK[0x654] + v712);
                    v720 = *((float *)&STACK[0x654] + v713);
                    v721 = *((float *)&STACK[0x654] + v714);
                    v722 = (float64x2_t *)(v188 + 8 * (v727 + 196 * v711));
                    v707.f64[0] = v722[1].f64[0];
                    v708.f64[0] = v722[99].f64[0];
                    v709.f64[0] = v722[197].f64[0];
                    v46.f64[0] = v722[295].f64[0];
                    v723.f64[0] = _Q0.f64[0];
                    v723.f64[1] = _Q0.f64[0];
                    v724 = vmulq_f64(v723, vcvtq_f64_f32(v717));
                    _Q2 = vmulq_f64(_Q0, _Q2);
                    v723.f64[0] = v718 * _Q2.f64[0];
                    _Q24.f64[0] = v719 * _Q2.f64[0];
                    v49.f64[0] = v720 * _Q2.f64[0];
                    _Q2.f64[0] = v721 * _Q2.f64[0];
                    v42 = vmlsq_lane_f64(*v722, v724, v718, 0);
                    v43 = vmlsq_lane_f64(v722[98], v724, v719, 0);
                    v725 = vmlsq_lane_f64(v722[196], v724, v720, 0);
                    v726 = vmlsq_lane_f64(v722[294], v724, v721, 0);
                    *v722 = v42;
                    *(_QWORD *)&v722[1].f64[0] = *(_OWORD *)&vsubq_f64(v707, v723);
                    v722[98] = v43;
                    *(_QWORD *)&v722[99].f64[0] = *(_OWORD *)&vsubq_f64(v708, _Q24);
                    v722[196] = v725;
                    *(_QWORD *)&v722[197].f64[0] = *(_OWORD *)&vsubq_f64(v709, v49);
                    v722[294] = v726;
                    *(_QWORD *)&v722[295].f64[0] = *(_OWORD *)&vsubq_f64(v46, _Q2);
                  }
                  else
                  {
                    v729.i32[0] = *((_DWORD *)&STACK[0x654] + v711);
                    v729.i32[1] = *((_DWORD *)&STACK[0x654] + v712);
                    v730.i32[0] = *((_DWORD *)&STACK[0x654] + v713);
                    v730.i32[1] = *((_DWORD *)&STACK[0x654] + v714);
                    v731 = *((float *)&STACK[0x654] + v727);
                    v732 = *((float *)&STACK[0x654] + v727 + 1);
                    v733 = *((float *)&STACK[0x654] + (v727 + 2));
                    v734 = (float64x2_t *)(v188 + 8 * (v711 + 196 * v727));
                    v735 = vmulq_n_f64(vcvtq_f64_f32(v729), _Q0.f64[0]);
                    _Q2 = vmulq_n_f64(vcvtq_f64_f32(v730), _Q0.f64[0]);
                    v707 = vmlsq_lane_f64(v734[1], _Q2, v731, 0);
                    _Q6 = vmlsq_lane_f64(*v734, v735, v731, 0);
                    v708 = vmlsq_lane_f64(v734[99], _Q2, v732, 0);
                    v42 = vmlsq_lane_f64(v734[98], v735, v732, 0);
                    v709 = vmlsq_lane_f64(v734[197], _Q2, v733, 0);
                    v43 = vmlsq_lane_f64(v734[196], v735, v733, 0);
                    *v734 = _Q6;
                    v734[1] = v707;
                    v734[98] = v42;
                    v734[99] = v708;
                    v734[196] = v43;
                    v734[197] = v709;
                  }
                }
                --v716;
              }
              while (v716);
              ++v710;
            }
            while (v710 != STACK[0x620]);
          }
          ++v691;
        }
        while (v691 != STACK[0x620]);
      }
      if (v684)
      {
        v736 = 0;
        v737 = 1;
        do
        {
          v738 = 0;
          v739 = *(unsigned int *)(v690 + 4 * v736);
          do
          {
            v740 = *(unsigned int *)(v1539 + 4 * v1555 + 4 * v738);
            v741.i32[0] = *((_DWORD *)&STACK[0x654] + v739);
            v741.i32[1] = *((_DWORD *)&STACK[0x654] + (v739 + 1));
            v742.i32[0] = *((_DWORD *)&STACK[0x654] + (v739 + 2));
            v742.i32[1] = *((_DWORD *)&STACK[0x654] + (v739 + 3));
            v743 = *((float *)&STACK[0x654] + v740);
            v744 = *((float *)&STACK[0x654] + (v740 + 1));
            v745 = *((float *)&STACK[0x654] + (v740 + 2));
            v746 = *((float *)&STACK[0x654] + (v740 + 3));
            v747 = (float64x2_t *)(v188 + 8 * (v739 + 196 * v740));
            v748 = vmulq_n_f64(vcvtq_f64_f32(v741), _Q0.f64[0]);
            v749 = vmulq_n_f64(vcvtq_f64_f32(v742), _Q0.f64[0]);
            v750 = vmlsq_lane_f64(v747[1], v749, v743, 0);
            v751 = vmlsq_lane_f64(v747[99], v749, v744, 0);
            v752 = vmlsq_lane_f64(v747[98], v748, v744, 0);
            v753 = vmlsq_lane_f64(v747[197], v749, v745, 0);
            v754 = vmlsq_lane_f64(v747[196], v748, v745, 0);
            v755 = vmlsq_lane_f64(v747[295], v749, v746, 0);
            v756 = vmlsq_lane_f64(v747[294], v748, v746, 0);
            *v747 = vmlsq_lane_f64(*v747, v748, v743, 0);
            v747[1] = v750;
            v747[98] = v752;
            v747[99] = v751;
            v747[196] = v754;
            v747[197] = v753;
            v747[294] = v756;
            v747[295] = v755;
            ++v738;
          }
          while (v737 != v738);
          ++v736;
          ++v737;
        }
        while (v736 != STACK[0x620]);
      }
      v757 = vaddq_f64(*(float64x2_t *)(v1557 + 43664), (float64x2_t)0);
      *(float64x2_t *)(v1557 + 43648) = vaddq_f64(*(float64x2_t *)(v1557 + 43648), (float64x2_t)0);
      *(float64x2_t *)(v1557 + 43664) = v757;
      v758 = *v1558;
      LODWORD(STACK[0x610]) = *v1554;
      STACK[0x640] = v758;
      if (*(_DWORD *)(v758 + 8) == -1)
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 188, (uint64_t)"write_channel != kInvalidChannel && \"DMA write request not permitted.\"", 70, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
        v759 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v759 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v878 = qword_254A6DE40;
          for (nn = qword_254A6DE48; v878 != nn; v878 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v878)(*(_QWORD *)(v878 + 8), "write_channel != kInvalidChannel && \"DMA write request not permitted.\"", 70, "", 0);
        }
        v760 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v760 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
LABEL_616:
          abort();
        qword_254A6DE58(unk_254A6DE60, "write_channel != kInvalidChannel && \"DMA write request not permitted.\"", 70, "", 0);
      }
      v761 = (4 * LODWORD(STACK[0x610]));
      if (!(_DWORD)v761)
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 189, (uint64_t)"length && \"Zero length DMA request.\"", 36, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
        v762 = v761;
        v763 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v763 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v880 = qword_254A6DE40;
          for (i1 = qword_254A6DE48; v880 != i1; v880 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v880)(*(_QWORD *)(v880 + 8), "length && \"Zero length DMA request.\"", 36, "", 0);
        }
        v764 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v764 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          goto LABEL_616;
        v761 = v762;
        qword_254A6DE58(unk_254A6DE60, "length && \"Zero length DMA request.\"", 36, "", 0);
      }
      v765 = 780 * STACK[0x2D0];
      v766 = v765 + 1257856;
      if ((v761 + v765 + 1257856) > *(_DWORD *)STACK[0x640])
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 191, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
        STACK[0x600] = v761;
        v767 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v767 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v874 = qword_254A6DE40;
          for (i2 = qword_254A6DE48; v874 != i2; v874 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v874)(*(_QWORD *)(v874 + 8), "offset + length <= size && \"Out of bounds DMA request.\"", 55, "", 0);
        }
        v768 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v768 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        v761 = STACK[0x600];
        if (!byte_254A6DE68)
          goto LABEL_616;
        qword_254A6DE58(unk_254A6DE60, "offset + length <= size && \"Out of bounds DMA request.\"", 55, "", 0);
      }
      if ((v765 & 0x3C) != 0 || v761 > 0x80000 || (STACK[0x610] & 0xF) != 0)
      {
        if ((v765 & 4) != 0)
        {
          if (v761 <= 0x2000)
            goto LABEL_402;
        }
        else
        {
          v770 = (STACK[0x610] & 1) == 0 && v761 <= 0x4000;
          if (v761 <= 0x2000 || v770)
            goto LABEL_402;
        }
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 194, (uint64_t)"((offset % 64 == 0 && length % 64 == 0 && length <= 512 * 1024) || (offset % 8 == 0 && length % 8 == 0 && length <= 16384) || length <= 8192) && \"Too large DMA request.\"", 169, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
        v870 = v761;
        v871 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v871 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v876 = qword_254A6DE40;
          for (i3 = qword_254A6DE48; v876 != i3; v876 += 16)
            (*(void (**)(_QWORD, const char *, ...))v876)(*(_QWORD *)(v876 + 8), "((offset % 64 == 0 && length % 64 == 0 && length <= 512 * 1024) || (offset % 8 == 0 && length % 8 == 0 && length <= 16384) || length <= 8192) && \"Too large DMA request.\"", 169, "", 0);
        }
        v872 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v872 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          goto LABEL_616;
        v761 = v870;
        qword_254A6DE58(unk_254A6DE60, "((offset % 64 == 0 && length % 64 == 0 && length <= 512 * 1024) || (offset % 8 == 0 && length % 8 == 0 && length <= 16384) || length <= 8192) && \"Too large DMA request.\"", 169, "", 0);
      }
LABEL_402:
      memcpy((void *)(*(_QWORD *)(STACK[0x640] + 16) + v766), &STACK[0x654], v761);
      v1553 = v1553 + *(double *)&STACK[0x378];
      _Q2.f64[1] = 0.0;
      _Q1 = vaddq_f64(*(float64x2_t *)(v1557 + 43824), (float64x2_t)0);
      v20 = vaddq_f64(*(float64x2_t *)(v1557 + 43808), (float64x2_t)0);
      *(float64x2_t *)(v1557 + 43808) = v20;
      *(float64x2_t *)(v1557 + 43824) = _Q1;
      v31 = v1552;
      if (v1552 == v1551)
        goto LABEL_10;
    }
  }
  v1553 = 0.0;
LABEL_458:
  *(double *)(v1558[3] + 16) = v1553 * 0.5;
  *(double *)v1558[4] = v1553 * 0.5 + *(double *)v1558[4];
  v887 = *v1558;
  v888 = (_DWORD *)(v1557 + 31048);
  if (*(_DWORD *)(*v1558 + 8) == -1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 188, (uint64_t)"write_channel != kInvalidChannel && \"DMA write request not permitted.\"", 70, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (*(_DWORD *)v887 < 0x20BCC4u
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 191, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  *(_DWORD *)(*(_QWORD *)(v887 + 16) + 2145472) = 1006;
  if (*(_DWORD *)(v1557 + 31268))
  {
    STACK[0xD08] = 0;
    STACK[0xD00] = 0;
    LODWORD(STACK[0xEE10]) = 0;
    LODWORD(STACK[0xF3B8]) = 0;
    LODWORD(STACK[0xF3C0]) = 0;
    LODWORD(STACK[0xF428]) = 0;
    v889 = *v1558;
    if (*(_DWORD *)(*v1558 + 4) == -1
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 162, (uint64_t)"read_channel != kInvalidChannel && \"DMA write request not permitted.\"", 69, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *(_DWORD *)v889 <= 0x6EE3Fu&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 165, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    memcpy(&STACK[0xD00], (const void *)(*(_QWORD *)(v889 + 16) + 394880), 0xE7C0uLL);
    _Q2.f64[1] = 0.0;
    _Q1 = vaddq_f64(*(float64x2_t *)(v1557 + 43856), (float64x2_t)0);
    v20 = vaddq_f64(*(float64x2_t *)(v1557 + 43840), (float64x2_t)0);
    *(float64x2_t *)(v1557 + 43840) = v20;
    *(float64x2_t *)(v1557 + 43856) = _Q1;
    v891 = STACK[0xEE10];
    if (LODWORD(STACK[0xEE10]))
    {
      v892 = 0;
      v893 = (unsigned int *)((unint64_t)&STACK[0xD00] | 0x10);
      STACK[0x350] = STACK[0xD00];
      STACK[0x390] = STACK[0xD08];
      do
      {
        *((_DWORD *)&STACK[0x658] + (v892 >> 5)) &= ~(1 << v892);
        ++v892;
      }
      while (v891 != v892);
      v894 = 0;
      LODWORD(STACK[0x654]) = v891;
      do
      {
        *((_DWORD *)&STACK[0x9B4] + (v894 >> 5)) |= 1 << v894;
        ++v894;
      }
      while (v891 != v894);
      v895 = 0;
      v896 = 0;
      LODWORD(STACK[0x9B0]) = v891;
      STACK[0x380] = (unint64_t)&STACK[0xEE18];
      STACK[0x368] = (unint64_t)&v893[18 * v891];
      STACK[0x378] = v1557 + 31076;
      STACK[0x370] = v1557 + 31116;
      STACK[0x340] = v1557 + 31228;
      STACK[0x300] = v1557 + 44352;
      STACK[0x320] = v1557 + 351680;
      STACK[0x2F0] = (unint64_t)&STACK[0xF560];
      STACK[0x2E8] = (unint64_t)&STACK[0xF570];
      STACK[0x2E0] = (unint64_t)&STACK[0xF580];
      STACK[0x330] = 0;
      STACK[0x310] = (unint64_t)&STACK[0x658];
      STACK[0x360] = (unint64_t)&STACK[0x9B4];
      while (1)
      {
        STACK[0x5A0] = v896;
        STACK[0x5B0] = v895;
        v20.f64[0] = *((float64_t *)v893 + 5);
        *(float64x2_t *)&STACK[0x5C0] = v20;
        v900 = *(_OWORD *)(v893 + 6);
        *(_OWORD *)&STACK[0x640] = v900;
        *(_QWORD *)&v900 = *((_QWORD *)v893 + 8);
        *(_OWORD *)&STACK[0x590] = v900;
        *(_OWORD *)&STACK[0x580] = *((_OWORD *)v893 + 3);
        v901 = *(float32x2_t *)(v893 + 4);
        v902 = *((float *)v893 + 3);
        v903 = (uint64_t *)v1558[2];
        v904 = *v893;
        v905 = v893[1];
        v906 = v893[2];
        v907 = (float64x2_t *)(STACK[0x380] + 144 * v904);
        v908 = v907[1];
        *(float64x2_t *)&STACK[0x3A0] = *v907;
        *(float64x2_t *)&STACK[0x3B0] = v908;
        v909 = v907[3];
        *(float64x2_t *)&STACK[0x3C0] = v907[2];
        *(float64x2_t *)&STACK[0x3D0] = v909;
        v911 = v907[4];
        v910 = v907[5];
        *(float64x2_t *)&STACK[0x3E0] = v911;
        *(float64x2_t *)&STACK[0x3F0] = v910;
        *(float64x2_t *)&STACK[0x400] = v907[6];
        *(float64x2_t *)&STACK[0x410] = v907[7];
        *(float64x2_t *)&STACK[0x420] = v907[8];
        LODWORD(STACK[0x388]) = *v1554;
        v912 = *v903;
        v913 = *v903 + 4080 * v905 + 2024;
        v914 = v913 + 1016 * v906;
        v915 = (uint64_t)&v903[9 * (*((_DWORD *)v903 + v905 + 2) + v906 + *((_DWORD *)v903 + 43) * v904)
                            + 23];
        v916 = *(_DWORD *)(v914 + 568);
        if (v916 == -1)
          break;
        v917 = (float64x2_t *)(v914 + 96);
        if (v916 > 1)
        {
          _Q5.f64[0] = *(float64_t *)(v914 + 160);
          v935 = *(float64x2_t *)(v914 + 128);
          v936 = *(float64x2_t *)(v914 + 144);
          v933 = *v917;
          v934 = *(float64x2_t *)(v914 + 112);
          v939 = vextq_s8((int8x16_t)v936, (int8x16_t)v936, 8uLL).u64[0];
          v938 = vextq_s8((int8x16_t)v935, (int8x16_t)v935, 8uLL).u64[0];
          v937 = vextq_s8((int8x16_t)v934, (int8x16_t)v934, 8uLL).u64[0];
          v940 = vextq_s8((int8x16_t)v933, (int8x16_t)v933, 8uLL).u64[0];
          *(_OWORD *)&STACK[0x470] = *(_OWORD *)(v914 + 280);
          *(_OWORD *)&STACK[0x460] = *(_OWORD *)(v914 + 264);
          v922 = *(double *)(v914 + 296);
          v930 = *(_DWORD *)(v914 + 308);
          v932 = 2;
LABEL_485:
          v9.f64[0] = *(float64_t *)(v915 + 64);
          v941 = *(float64x2_t *)(v915 + 32);
          *(_QWORD *)&v933.f64[1] = v940;
          *(_QWORD *)&v936.f64[1] = v939;
          v942 = *(int8x16_t *)v915;
          v943 = *(float64x2_t *)(v915 + 16);
          *(_QWORD *)&v935.f64[1] = v938;
          *(_QWORD *)&v934.f64[1] = v937;
          v944 = vabdq_f64(v9, _Q5).f64[0];
          v945 = (int8x16_t)vabdq_f64(*(float64x2_t *)v915, v933);
          v946 = (float64x2_t)vdupq_n_s64(0x3DDB7CDFD9D7BDBBuLL);
          if (vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v946, (float64x2_t)vextq_s8(v945, v945, 8uLL)), (int32x4_t)vcgeq_f64(v946, vabdq_f64(v943, v934))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v946, vabdq_f64(v941, v935)), (int32x4_t)vcgeq_f64(v946, vabdq_f64(*(float64x2_t *)(v915 + 48), v936))))))) & 1 | (v944 > 1.0e-10))v947 = -1;
          else
            v947 = 0;
          v948 = (int8x16_t)vdupq_n_s64(v947);
          v949 = vbslq_s8(v948, (int8x16_t)v941, (int8x16_t)v935);
          *(int8x16_t *)&STACK[0x570] = vbslq_s8(v948, (int8x16_t)v943, (int8x16_t)v934);
          *(int8x16_t *)&STACK[0x550] = vbslq_s8(v948, v942, (int8x16_t)v933);
          *(int8x16_t *)&STACK[0x560] = v949;
          *(int8x16_t *)&STACK[0x540] = vextq_s8(v949, v949, 8uLL);
          goto LABEL_489;
        }
        if (!v916)
        {
          sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1728, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_621:
          abort();
        }
        v911.f64[0] = *(float64_t *)(v914 + 160);
        v918 = *v917;
        v919 = *(float64x2_t *)(v914 + 112);
        v920 = *(float64x2_t *)(v914 + 128);
        v921 = *(float64x2_t *)(v914 + 144);
        *(_OWORD *)&STACK[0x470] = *(_OWORD *)(v914 + 280);
        *(_OWORD *)&STACK[0x460] = *(_OWORD *)(v914 + 264);
        v922 = *(double *)(v914 + 296);
        _Q6.f64[0] = *(float64_t *)(v915 + 64);
        v923 = *(int8x16_t *)v915;
        v924 = *(float64x2_t *)(v915 + 16);
        v925 = *(float64x2_t *)(v915 + 32);
        v926 = (int8x16_t)vabdq_f64(*(float64x2_t *)v915, v918);
        v927 = (float64x2_t)vdupq_n_s64(0x3DDB7CDFD9D7BDBBuLL);
        if (vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v927, (float64x2_t)vextq_s8(v926, v926, 8uLL)), (int32x4_t)vcgeq_f64(v927, vabdq_f64(v924, v919))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v927, vabdq_f64(v925, v920)), (int32x4_t)vcgeq_f64(v927, vabdq_f64(*(float64x2_t *)(v915 + 48), v921))))))) & 1 | (vabdq_f64(_Q6, v911).f64[0] > 1.0e-10))v928 = -1;
        else
          v928 = 0;
        v929 = (int8x16_t)vdupq_n_s64(v928);
        v930 = *(_DWORD *)(v914 + 308);
        v931 = vbslq_s8(v929, (int8x16_t)v925, (int8x16_t)v920);
        *(int8x16_t *)&STACK[0x570] = vbslq_s8(v929, (int8x16_t)v924, (int8x16_t)v919);
        *(int8x16_t *)&STACK[0x550] = vbslq_s8(v929, v923, (int8x16_t)v918);
        *(int8x16_t *)&STACK[0x560] = v931;
        *(int8x16_t *)&STACK[0x540] = vextq_s8(v931, v931, 8uLL);
        v932 = 1;
LABEL_489:
        v950 = *(int8x16_t *)&STACK[0x640];
        v951 = vextq_s8(v950, v950, 8uLL).u64[0];
        v952 = v912 + 168 * v904;
        v953 = *(int8x16_t *)v952;
        v950.i64[0] = *(_QWORD *)(v952 + 16);
        *(int8x16_t *)&STACK[0x630] = v950;
        *(int8x16_t *)&STACK[0x610] = v953;
        v954 = vextq_s8(v953, v953, 8uLL);
        *(int8x16_t *)&STACK[0x5E0] = v954;
        v955 = *(int8x16_t *)(v952 + 24);
        v954.i64[0] = *(_QWORD *)(v952 + 40);
        *(int8x16_t *)&STACK[0x600] = v954;
        *(int8x16_t *)&STACK[0x5F0] = v955;
        v956 = vextq_s8(v955, v955, 8uLL);
        *(int8x16_t *)&STACK[0x5D0] = v956;
        v960 = *(float64x2_t *)(v952 + 48);
        v956.i64[0] = *(_QWORD *)(v952 + 64);
        *(int8x16_t *)&STACK[0x620] = v956;
        v957.f64[0] = v960.f64[0];
        _D1 = vextq_s8((int8x16_t)v960, (int8x16_t)v960, 8uLL).u64[0];
        v959 = *(float64x2_t *)(v952 + 144);
        v960.f64[0] = *(float64_t *)(v952 + 160);
        v961 = vextq_s8((int8x16_t)v959, (int8x16_t)v959, 8uLL).u64[0];
        if (*((_BYTE *)v903 + 3123))
        {
          v962 = *(unsigned int *)(STACK[0x340] + 4 * (*((unsigned int *)v903 + v905 + 2) + v906));
          v963 = (float64x2_t *)&STACK[0xF550];
        }
        else
        {
          v963 = 0;
          v962 = 0xFFFFFFFFLL;
        }
        v964 = v913 + 1016 * v906 + 72;
        v965 = *(unsigned int *)(STACK[0x378] + 4 * v904);
        v966 = *(unsigned int *)(STACK[0x370] + 4 * v904);
        *(_QWORD *)&v959.f64[1] = v961;
        v967 = *(float64x2_t *)&STACK[0x640];
        *(_QWORD *)&v967.f64[1] = v951;
        _Q2 = vsubq_f64(v967, v959);
        v977 = vsubq_f64(*(float64x2_t *)&STACK[0x5C0], v960);
        v969 = *(float64x2_t *)&STACK[0x610];
        *(_QWORD *)&v969.f64[1] = STACK[0x5F0];
        v970 = vmulq_n_f64(v969, _Q2.f64[0]);
        v971 = *(float64x2_t *)&STACK[0x5E0];
        *(_QWORD *)&v971.f64[1] = STACK[0x5D0];
        v972 = *(_OWORD *)&STACK[0x630];
        *(_QWORD *)&_Q5.f64[1] = STACK[0x600];
        v973 = vmlaq_n_f64(vmlaq_laneq_f64(v970, v971, _Q2, 1), _Q5, v977.f64[0]);
        *(_QWORD *)&v957.f64[1] = _D1;
        *(float64x2_t *)&STACK[0x530] = v957;
        _Q7 = vmulq_f64(v957, _Q2);
        __asm { FMLA            D7, D1, V2.D[1] }
        v975 = *(float64x2_t *)&STACK[0x620];
        _Q7.f64[0] = vmlad_n_f64(_Q7.f64[0], *(double *)&STACK[0x620], v977.f64[0]);
        v971.f64[0] = *(float64_t *)(v914 + 16);
        v9 = *(float64x2_t *)v914;
        _Q5.f64[0] = *(float64_t *)(v914 + 40);
        v976 = *(int64x2_t *)(v914 + 24);
        v977.f64[0] = *(float64_t *)(v914 + 64);
        _Q6 = *(float64x2_t *)(v914 + 48);
        v975.f64[0] = *(float64_t *)(v964 + 16);
        v978 = *(float64x2_t *)v964;
        *(float64x2_t *)&STACK[0x490] = _Q7;
        *(_QWORD *)&v975.f64[0] = *(_OWORD *)&vsubq_f64(_Q7, v975);
        *(float64x2_t *)&STACK[0x520] = v973;
        _Q2 = vsubq_f64(v973, v978);
        v980 = (float64x2_t)vzip1q_s64((int64x2_t)v9, v976);
        *(float64x2_t *)&STACK[0x4D0] = v980;
        v981 = vmulq_n_f64(v980, _Q2.f64[0]);
        *(int64x2_t *)&STACK[0x4B0] = v976;
        *(float64x2_t *)&STACK[0x4A0] = v9;
        v982 = (float64x2_t)vzip2q_s64((int64x2_t)v9, v976);
        *(float64x2_t *)&STACK[0x4C0] = v982;
        *(float64x2_t *)&STACK[0x500] = v971;
        *(float64x2_t *)&STACK[0x4F0] = _Q5;
        v971.f64[1] = _Q5.f64[0];
        *(float64x2_t *)&STACK[0x480] = v971;
        *(float64x2_t *)&STACK[0x5C0] = vmlaq_n_f64(vmlaq_laneq_f64(v981, v982, _Q2, 1), v971, v975.f64[0]);
        _Q4 = vmulq_f64(_Q6, _Q2);
        _Q2.f64[0] = _Q2.f64[1];
        *(float64x2_t *)&STACK[0x4E0] = _Q6;
        __asm { FMLA            D4, D2, V6.D[1] }
        *(float64x2_t *)&STACK[0x510] = v977;
        _Q4.f64[0] = vmlad_n_f64(_Q4.f64[0], v977.f64[0], v975.f64[0]);
        *(float64x2_t *)&STACK[0x640] = _Q4;
        if (v916 == -1)
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_621;
          }
LABEL_498:
          _Q6 = *(float64x2_t *)&STACK[0x5C0];
          _Q2 = vmulq_f64(_Q6, _Q6);
          _D0 = STACK[0x5C8];
          __asm { FMLA            D2, D0, V6.D[1] }
          if (_Q2.f64[0] >= 0.00000001)
          {
            v1009 = *(_OWORD *)&STACK[0x640];
            v1010 = *(double *)&v1009 * *(double *)&v1009 + _Q2.f64[0];
            v1011 = sqrt(_Q2.f64[0]);
            *(float64x2_t *)&STACK[0x450] = _Q2;
            v1012 = atan2(v1011, *(long double *)&v1009);
            v1013 = (float64x2_t)vzip2q_s64(*(int64x2_t *)&STACK[0x460], *(int64x2_t *)&STACK[0x470]);
            v1014 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&STACK[0x460], *(int64x2_t *)&STACK[0x470]);
            v1015 = vmulq_n_f64(vaddq_f64(vmulq_f64(v1014, (float64x2_t)xmmword_210312E10), vmulq_n_f64(vmulq_f64(v1013, (float64x2_t)xmmword_210312E20), v1012 * v1012)), v1012 * v1012);
            v1016 = v1012 * v1012 * (v1012 * v1012);
            v1015.f64[0] = v1015.f64[0] + vmuld_lane_f64(v1016, v1015, 1) + 1.0;
            _Q6 = *(float64x2_t *)&STACK[0x5C0];
            v1017 = vmulq_n_f64(vaddq_f64(v1014, vmulq_n_f64(v1013, v1012 * v1012)), v1012 * v1012);
            v1006 = (v1012 + v1012 * (v1017.f64[0] + vmuld_lane_f64(v1016, v1017, 1))) / v1011;
            v1008 = vmulq_n_f64(*(float64x2_t *)&STACK[0x5C0], (*(double *)&STACK[0x640] * (v1015.f64[0] / v1010) - v1006) / *(double *)&STACK[0x450]);
            v1007 = -(v1015.f64[0] / v1010);
            v977 = (float64x2_t)vextq_s8((int8x16_t)v1008, (int8x16_t)v1008, 8uLL);
          }
          else
          {
            v1006 = 1.0 / *(double *)&STACK[0x640];
            v1007 = -(v1006 * v1006);
            v1008.f64[0] = 0.0;
            v977.f64[0] = 0.0;
          }
          *(float64x2_t *)&STACK[0x640] = vmulq_n_f64(_Q6, v1006);
          v1008.f64[1] = v977.f64[0];
          v1018 = (int8x16_t)vmulq_n_f64(v1008, _Q6.f64[0]);
          v977.f64[0] = v1007 * _Q6.f64[0];
          *(float64x2_t *)&STACK[0x470] = v977;
          v1019 = vmulq_laneq_f64(v1008, _Q6, 1);
          v1020 = (int8x16_t)vdupq_lane_s64(COERCE__INT64(v1007 * *(double *)vextq_s8((int8x16_t)_Q6, (int8x16_t)_Q6, 8uLL).i64), 0);
          *(double *)v1018.i64 = v1006 + *(double *)v1018.i64;
          *(float64x2_t *)&STACK[0x460] = v1019;
          *(int8x16_t *)&STACK[0x440] = v1018;
          *(int8x16_t *)&STACK[0x430] = vextq_s8(v1018, v1018, 8uLL);
          *(double *)v1020.i64 = v1006 + v1019.f64[1];
          *(int8x16_t *)&STACK[0x5C0] = v1020;
          *(int8x16_t *)&STACK[0x450] = vextq_s8(v1020, v1020, 8uLL);
          if (v916 == -1
            && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_621;
          }
          goto LABEL_507;
        }
        if (v932 > 1)
          goto LABEL_498;
        if (v930)
        {
          v984 = *(_OWORD *)&STACK[0x640];
          if (*(double *)&STACK[0x640] < 0.00000001)
            goto LABEL_473;
          _Q1 = vmulq_n_f64(*(float64x2_t *)&STACK[0x5C0], 1.0 / *(double *)&v984);
          v986 = *(float64x2_t *)&STACK[0x470];
          _D6 = vmuld_lane_f64(1.0 / *(double *)&v984, *(float64x2_t *)&STACK[0x5C0], 1);
          __asm { FMLA            D7, D6, V1.D[1] }
          v989 = *(double *)&_D7 * *(double *)&STACK[0x460]
               + 1.0
               + *(double *)&_D7
               * *(double *)&_D7
               * (*(double *)&STACK[0x468] + *(double *)&_D7 * *(double *)&STACK[0x470]);
          v990 = vmulq_n_f64((float64x2_t)xmmword_2103B8490, v922);
          v991 = vmulq_n_f64(_Q1, *(double *)&STACK[0x460]+ *(double *)&STACK[0x460]+ *(double *)&_D7* (vmuld_lane_f64(4.0, *(float64x2_t *)&STACK[0x460], 1)+ 6.0 * *(double *)&STACK[0x470] * *(double *)&_D7));
          v992 = vmulq_n_f64(v991, _Q1.f64[0]);
          v993 = vmulq_n_f64(v991, _D6);
          v994 = (int8x16_t)vmulq_n_f64(_Q1, *(double *)&STACK[0x478] + *(double *)&STACK[0x478]);
          v986.f64[0] = v922;
          v995 = vmulq_f64(v986, vaddq_f64((float64x2_t)vdupq_lane_s64(_D7, 0), vmulq_f64(_Q1, vaddq_f64(_Q1, _Q1))));
          v996 = vaddq_f64((float64x2_t)vextq_s8(v994, v994, 8uLL), vmulq_f64(v990, _Q1));
          v992.f64[0] = v989 + v992.f64[0];
          *(_QWORD *)&v991.f64[0] = vdupq_laneq_s64((int64x2_t)v990, 1).u64[0];
          v991.f64[1] = vmuld_lane_f64(6.0, *(float64x2_t *)&STACK[0x470], 1);
          v997 = vmulq_f64(v991, _Q1);
          *(float64x2_t *)&STACK[0x640] = vmlaq_n_f64(vaddq_f64(vmulq_laneq_f64((float64x2_t)vzip1q_s64((int64x2_t)v994, (int64x2_t)v997), _Q1, 1), v995), _Q1, v989);
          v993.f64[1] = v989 + v993.f64[1];
          v998 = (int64x2_t)vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(vdupq_laneq_s64((int64x2_t)v996, 1), (int64x2_t)vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v997, 1), v997)), v993), 1.0 / *(double *)&v984);
          v999 = (int8x16_t)vmulq_n_f64(vaddq_f64(v996, v992), 1.0 / *(double *)&v984);
          *(int8x16_t *)&STACK[0x430] = vextq_s8(v999, v999, 8uLL);
          *(int8x16_t *)&STACK[0x440] = v999;
          v1000 = -(vmuld_n_f64(*(double *)v999.i64, _Q1.f64[0]) + *(double *)&v999.i64[1] * _Q1.f64[1]);
          v999.i64[1] = v998.i64[1];
          *(double *)v999.i64 = v1000;
          v994.i64[0] = vdupq_laneq_s64(v998, 1).u64[0];
          v1001 = (int8x16_t)vzip1q_s64((int64x2_t)v999, v998);
          *(double *)&v994.i64[1] = -(vmuld_n_f64(*(double *)v998.i64, _Q1.f64[0]) + *(double *)&v998.i64[1]
                                                                                   * _Q1.f64[1]);
          *(int8x16_t *)&STACK[0x5C0] = v994;
          v1002 = vextq_s8(v994, v994, 8uLL);
        }
        else
        {
          v1021 = *(_OWORD *)&STACK[0x640];
          if (*(double *)&STACK[0x640] < 0.00000001)
            goto LABEL_473;
          v1022 = 1.0 / *(double *)&v1021;
          _Q1 = vmulq_n_f64(*(float64x2_t *)&STACK[0x5C0], 1.0 / *(double *)&v1021);
          _D3 = vmuld_lane_f64(v1022, *(float64x2_t *)&STACK[0x5C0], 1);
          __asm { FMLA            D4, D3, V1.D[1] }
          v1026 = _D4 * *(double *)&STACK[0x460]
                + 1.0
                + _D4 * _D4 * (*(double *)&STACK[0x468] + _D4 * *(double *)&STACK[0x470]);
          v1027 = *(double *)&STACK[0x460]
                + *(double *)&STACK[0x460]
                + _D4 * (vmuld_lane_f64(4.0, *(float64x2_t *)&STACK[0x460], 1) + 6.0 * *(double *)&STACK[0x470] * _D4);
          v1028 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v1026, 0);
          *(float64x2_t *)&STACK[0x640] = vmulq_n_f64(_Q1, v1026);
          v1029 = vmulq_n_f64(_Q1, v1027);
          v1030 = (int8x16_t)vmulq_n_f64(v1029, _Q1.f64[0]);
          v1031 = vmulq_n_f64(v1029, _D3);
          *(_QWORD *)&v1032.f64[0] = v1030.i64[0];
          v1032.f64[1] = v1031.f64[1];
          v1033 = vaddq_f64(v1028, v1032);
          v1028.f64[0] = v1033.f64[0];
          *(_QWORD *)&v1028.f64[1] = v1030.i64[1];
          v1033.f64[0] = v1031.f64[0];
          v1034 = (int64x2_t)vmulq_n_f64(v1033, v1022);
          v1035 = (int8x16_t)vmulq_n_f64(v1028, v1022);
          *(int8x16_t *)&STACK[0x430] = vextq_s8(v1035, v1035, 8uLL);
          *(int8x16_t *)&STACK[0x440] = v1035;
          v1036 = -(vmuld_n_f64(*(double *)v1035.i64, _Q1.f64[0]) + *(double *)&v1035.i64[1] * _Q1.f64[1]);
          v1035.i64[1] = v1034.i64[1];
          *(double *)v1035.i64 = v1036;
          v1030.i64[0] = vdupq_laneq_s64(v1034, 1).u64[0];
          v1001 = (int8x16_t)vzip1q_s64((int64x2_t)v1035, v1034);
          *(double *)&v1030.i64[1] = -(vmuld_n_f64(*(double *)v1034.i64, _Q1.f64[0])
                                     + *(double *)&v1034.i64[1] * _Q1.f64[1]);
          *(int8x16_t *)&STACK[0x5C0] = v1030;
          v1002 = vextq_s8(v1030, v1030, 8uLL);
        }
        *(int8x16_t *)&STACK[0x450] = v1002;
        *(int8x16_t *)&STACK[0x470] = v1001;
        *(int8x16_t *)&STACK[0x460] = vextq_s8(v1001, v1001, 8uLL);
LABEL_507:
        v1037 = *(float64x2_t *)&STACK[0x5F0];
        *(_QWORD *)&v1037.f64[1] = STACK[0x5D0];
        v1038 = *(float64x2_t *)&STACK[0x610];
        *(_QWORD *)&v1038.f64[1] = STACK[0x5E0];
        v1039 = (int8x16_t)vmlsq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&STACK[0x4C0], *(double *)&STACK[0x490]), *(float64x2_t *)&STACK[0x480], *(float64x2_t *)&STACK[0x520], 1);
        _Q25 = *(_OWORD *)&STACK[0x4E0];
        v1041 = (float64x2_t)vextq_s8(*(int8x16_t *)&STACK[0x4E0], *(int8x16_t *)&STACK[0x500], 8uLL);
        v1083 = *(float64x2_t *)&STACK[0x4F0];
        v1042 = *(_OWORD *)&STACK[0x510];
        *(_QWORD *)&v1043 = *(_OWORD *)&vmlsq_f64(vmulq_n_f64(*(float64x2_t *)&STACK[0x520], *(double *)&STACK[0x510]), *(float64x2_t *)&STACK[0x490], *(float64x2_t *)&STACK[0x4E0]);
        v1044 = (int8x16_t)vmlsq_lane_f64(vmulq_n_f64((float64x2_t)vextq_s8((int8x16_t)v1041, *(int8x16_t *)&STACK[0x4F0], 8uLL), *(double *)&STACK[0x520]), *(float64x2_t *)&STACK[0x4D0], *(double *)&STACK[0x490], 0);
        _Q6 = *(float64x2_t *)&STACK[0x4A0];
        _Q19 = *(_OWORD *)&STACK[0x600];
        __asm { FMLA            D1, D19, V6.D[1] }
        _Q18 = *(_OWORD *)&STACK[0x4B0];
        v1049 = vmlaq_laneq_f64(vmulq_n_f64(v1038, *(double *)&STACK[0x4B0]), v1037, *(float64x2_t *)&STACK[0x4B0], 1);
        __asm { FMLA            D6, D19, V18.D[1] }
        v1050 = vmlaq_laneq_f64(vmulq_n_f64(v1038, *(double *)&STACK[0x4E0]), v1037, *(float64x2_t *)&STACK[0x4E0], 1);
        __asm { FMLA            D21, D19, V25.D[1] }
        *(_QWORD *)&v1052 = *(_OWORD *)&vmlsq_laneq_f64(vmulq_laneq_f64(*(float64x2_t *)&STACK[0x4E0], *(float64x2_t *)&STACK[0x520], 1), *(float64x2_t *)&STACK[0x520], *(float64x2_t *)&STACK[0x4E0], 1);
        v1053 = (int8x16_t)vmlsq_lane_f64(vmulq_laneq_f64(*(float64x2_t *)&STACK[0x4D0], *(float64x2_t *)&STACK[0x520], 1), *(float64x2_t *)&STACK[0x4C0], *(double *)&STACK[0x520], 0);
        *(_QWORD *)&v1054 = *(_OWORD *)&vmlsq_laneq_f64(vmulq_f64(*(float64x2_t *)&STACK[0x490], v1041), *(float64x2_t *)&STACK[0x510], *(float64x2_t *)&STACK[0x520], 1);
        _Q30 = *(float64x2_t *)&STACK[0x590];
        LODWORD(v1056) = HIDWORD(STACK[0x590]);
        v1057 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1038, *(double *)&STACK[0x4A0]), v1037, *(float64x2_t *)&STACK[0x4A0], 1), *(float64x2_t *)&STACK[0x530], *(double *)&STACK[0x500]);
        v1058 = *(_OWORD *)&STACK[0x620];
        v1037.f64[0] = _D1 + *(double *)&STACK[0x620] * *(double *)&STACK[0x500];
        v1059 = *(_OWORD *)&STACK[0x580];
        LODWORD(v1060) = HIDWORD(*(_OWORD *)&STACK[0x580]);
        _Q16 = vmlaq_n_f64(v1049, *(float64x2_t *)&STACK[0x530], *(double *)&STACK[0x4F0]);
        *(double *)&_Q19 = _Q6.f64[0] + *(double *)&STACK[0x620] * *(double *)&STACK[0x4F0];
        *(float *)_Q6.f64 = COERCE_FLOAT(STACK[0x588]);
        v1062 = vmlaq_n_f64(v1050, *(float64x2_t *)&STACK[0x530], *(double *)&STACK[0x510]);
        LODWORD(v1083.f64[0]) = HIDWORD(STACK[0x580]);
        *(double *)&STACK[0x610] = v902;
        *(float64x2_t *)&STACK[0x630] = vcvtq_f64_f32(v901);
        v1063 = *(float *)&v1059;
        v1064 = *(float *)v1083.f64;
        *(double *)&v1059 = v1060;
        v1065 = *(float *)_Q6.f64;
        v1083.f64[0] = *(float *)_Q30.f64;
        v1066 = v1056;
        v1067 = _D21 + *(double *)&v1058 * *(double *)&v1042;
        *(_QWORD *)&_Q6.f64[0] = STACK[0x550];
        _Q11 = *(float64x2_t *)&STACK[0x560];
        *(_QWORD *)&_Q6.f64[1] = STACK[0x560];
        v1068 = *(float64x2_t *)&STACK[0x570];
        *(_QWORD *)&v1068.f64[1] = STACK[0x540];
        _Q10 = vmlaq_f64(v1068, _Q6, *(float64x2_t *)&STACK[0x640]);
        _Q30.f64[0] = 0.0;
        *(_QWORD *)&_Q30.f64[1] = STACK[0x560];
        *(_QWORD *)&v1069.f64[0] = STACK[0x440];
        *(_QWORD *)&v1069.f64[1] = STACK[0x430];
        v1070 = *(float64x2_t *)&STACK[0x460];
        v1071 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)STACK[0x550], *(double *)&STACK[0x440]), _Q30, *(double *)&STACK[0x460]);
        v1072 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)STACK[0x550], *(double *)&STACK[0x430]), _Q30, *(double *)&STACK[0x5C0]);
        v5 = *(float64x2_t *)&STACK[0x470];
        v1073 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)STACK[0x550], *(double *)&STACK[0x470]), _Q30, *(double *)&STACK[0x450]);
        v1074 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1071, *(double *)v1039.i64), v1072, *(double *)vextq_s8(v1039, v1039, 8uLL).i64), v1073, v1054);
        *(_QWORD *)&_Q30.f64[0] = vextq_s8(v1053, v1053, 8uLL).u64[0];
        _Q5 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1071, v1057.f64[0]), v1072, _Q16.f64[0]), v1073, v1062.f64[0]);
        v1075 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1071, *(double *)v1044.i64), v1072, *(double *)vextq_s8(v1044, v1044, 8uLL).i64), v1073, v1043);
        _Q6 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v1071, v1057, 1), v1072, _Q16, 1), v1073, v1062, 1);
        v1076 = vmulq_n_f64(v1071, *(double *)v1053.i64);
        v1077 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1071, v1037.f64[0]), v1072, *(double *)&_Q19), v1073, v1067);
        v1078 = vmlaq_n_f64(vmlaq_n_f64(v1076, v1072, _Q30.f64[0]), v1073, v1052);
        v1079 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(_Q5, v1063), _Q6, v1064), v1077, *(double *)&v1059);
        v1080 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(_Q5, v1064), _Q6, v1065), v1077, v1083.f64[0]);
        v1081 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(_Q5, *(double *)&v1059), _Q6, v1083.f64[0]), v1077, v1066);
        *(_QWORD *)&v1070.f64[1] = STACK[0x5C0];
        _Q23 = vmlaq_f64(vmulq_n_f64(v1069, *(double *)&STACK[0x550]), (float64x2_t)0, v1070);
        v1083.f64[0] = *(double *)&STACK[0x470] * *(double *)&STACK[0x550] + *(double *)&STACK[0x450] * 0.0;
        _Q22 = vmlaq_n_f64(vmulq_f64(v1069, (float64x2_t)0), v1070, *(double *)&STACK[0x560]);
        v1085 = *(double *)&STACK[0x470] * 0.0 + *(double *)&STACK[0x450] * *(double *)&STACK[0x560];
        v1086 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1057, _Q23.f64[0]), _Q16, _Q23, 1), v1062, v1083.f64[0]);
        __asm { FMLA            D30, D19, V23.D[1] }
        v1087 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1057, _Q22.f64[0]), _Q16, _Q22, 1), v1062, v1085);
        __asm { FMLA            D16, D19, V22.D[1] }
        v1062.f64[0] = _Q16.f64[0] + v1067 * v1085;
        v1088 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1079, v1086.f64[0]), v1080, v1086, 1), v1081, _Q30.f64[0] + v1067 * v1083.f64[0]);
        v1038.f64[0] = v1088.f64[0];
        v1038.f64[1] = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1079, *(double *)&v1087), v1080, v1087, 1), v1081, *(double *)&v1062).f64[1];
        v1089 = vaddq_f64((float64x2_t)vdupq_lane_s64(COERCE__INT64(*(double *)&STACK[0x610] * *(double *)&STACK[0x610]), 0), v1038);
        v1090 = vsubq_f64(_Q10, *(float64x2_t *)&STACK[0x630]);
        *(double *)&_Q19 = vmuld_lane_f64(v1089.f64[0], v1089, 1) - vmuld_lane_f64(v1088.f64[1], v1088, 1);
        v1091 = sqrt(*(double *)&_Q19);
        v1087.f64[0] = v1089.f64[1] + v1091;
        v1038.f64[0] = -v1088.f64[1];
        v1087.f64[1] = -v1088.f64[1];
        v1038.f64[1] = v1089.f64[0] + v1091;
        v1092 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(sqrt(*(double *)&_Q19 * (vaddvq_f64(v1089) + v1091 + v1091))), 0);
        v1093 = vdivq_f64(v1038, v1092);
        v9 = vdivq_f64(v1087, v1092);
        _Q0 = vmlaq_laneq_f64(vmulq_n_f64(v9, v1090.f64[0]), v1093, v1090, 1);
        _D21 = _Q0.f64[1];
        __asm { FMLA            D17, D21, V0.D[1] }
        if (_D17 > *(double *)&STACK[0x390])
          goto LABEL_511;
        *(float64x2_t *)&STACK[0x630] = _Q0;
        v1097 = vcvt_hight_f64_f32(*(float32x4_t *)&STACK[0x3A0]);
        v1098 = vcvtq_f64_f32((float32x2_t)STACK[0x3A0]);
        v1099 = vcvt_hight_f64_f32(*(float32x4_t *)&STACK[0x3B0]);
        v1100 = vcvtq_f64_f32((float32x2_t)STACK[0x3B0]);
        v1101 = vcvt_hight_f64_f32(*(float32x4_t *)&STACK[0x3C0]);
        v1102 = vcvtq_f64_f32((float32x2_t)STACK[0x3C0]);
        v1103 = vcvt_hight_f64_f32(*(float32x4_t *)&STACK[0x3D0]);
        v1104 = vcvtq_f64_f32((float32x2_t)STACK[0x3D0]);
        v1105 = vcvt_hight_f64_f32(*(float32x4_t *)&STACK[0x3E0]);
        v1106 = vcvtq_f64_f32((float32x2_t)STACK[0x3E0]);
        v1107 = vcvt_hight_f64_f32(*(float32x4_t *)&STACK[0x3F0]);
        v1108 = vcvtq_f64_f32((float32x2_t)STACK[0x3F0]);
        v5 = vcvt_hight_f64_f32(*(float32x4_t *)&STACK[0x400]);
        v1109 = vcvtq_f64_f32((float32x2_t)STACK[0x400]);
        _Q11 = vcvt_hight_f64_f32(*(float32x4_t *)&STACK[0x410]);
        v1110 = vcvtq_f64_f32((float32x2_t)STACK[0x410]);
        v1111 = vcvt_hight_f64_f32(*(float32x4_t *)&STACK[0x420]);
        _Q10 = vcvtq_f64_f32((float32x2_t)STACK[0x420]);
        v1112 = vmlsq_laneq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1074, v1098.f64[0]), v1075, v1098, 1), v1078, v1097.f64[0]), _Q5, v1097, 1), _Q6, v1100.f64[0], 0), v1077, v1100, 1);
        v1113 = vmlsq_laneq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1074, v1099.f64[0]), v1075, v1099, 1), v1078, v1102.f64[0]), _Q5, v1102, 1), _Q6, v1101.f64[0], 0), v1077, v1101, 1);
        v1083 = vmlsq_laneq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1074, v1104.f64[0]), v1075, v1104, 1), v1078, v1103.f64[0]), _Q5, v1103, 1), _Q6, v1106.f64[0], 0), v1077, v1106, 1);
        v1114 = vmlsq_laneq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1074, v1105.f64[0]), v1075, v1105, 1), v1078, v1108.f64[0]), _Q5, v1108, 1), _Q6, v1107.f64[0], 0), v1077, v1107, 1);
        _Q0 = *(float64x2_t *)&STACK[0x630];
        v1115 = vmlsq_laneq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1074, v1109.f64[0]), v1075, v1109, 1), v1078, v5.f64[0]), _Q5, v5, 1), _Q6, v1110.f64[0], 0), v1077, v1110, 1);
        v1080 = vmlsq_laneq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1074, _Q11.f64[0]), v1075, _Q11, 1), v1078, _Q10.f64[0]), _Q5, _Q10, 1), _Q6, v1111.f64[0], 0), v1077, v1111, 1);
        v1116 = vmlsq_lane_f64(vmlsq_lane_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1112, v1074.f64[0]), v1113, v1075.f64[0]), v1083, v1078.f64[0]), v1114, _Q5.f64[0], 0), v1115, _Q6.f64[0], 0);
        v1117 = vaddq_f64(vmlsq_laneq_f64(vmlsq_laneq_f64(vmlsq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v1112, v1074, 1), v1113, v1075, 1), v1083, v1078, 1), v1114, _Q5, 1), v1115, _Q6, 1), v1080, v1077, 1), v1089);
        v1089.f64[1] = v1088.f64[1];
        v1118 = vaddq_f64(vmlsq_lane_f64(v1116, v1080, v1077.f64[0], 0), v1089);
        v1117.f64[0] = vmuld_lane_f64(v1118.f64[0], v1117, 1) - vmuld_lane_f64(v1118.f64[1], v1118, 1);
        v1083.f64[0] = sqrt(v1117.f64[0]);
        v1113.f64[0] = v1117.f64[1] + v1083.f64[0];
        _Q20.f64[0] = -v1118.f64[1];
        v1113.f64[1] = -v1118.f64[1];
        _Q20.f64[1] = v1118.f64[0] + v1083.f64[0];
        v1120 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(sqrt(v1117.f64[0] * (v1118.f64[0]+ v1117.f64[1]+ v1083.f64[0]+ v1083.f64[0]))), 0);
        _Q20.f64[0] = vmlaq_laneq_f64(vmulq_n_f64(vdivq_f64(v1113, v1120), *(double *)&v1090), vdivq_f64(_Q20, v1120), v1090, 1).f64[1];
        __asm { FMLA            D1, D20, V16.D[1] }
        if (_D1 > *(double *)&STACK[0x350])
        {
LABEL_511:
          _Q0 = vmulq_n_f64(_Q0, sqrt(*(double *)&STACK[0x390] / _D17));
          v9 = 0uLL;
          v1122 = 1;
          v1093 = 0uLL;
          if (!v963)
            goto LABEL_513;
LABEL_512:
          v1123.f64[0] = 0.0;
          *(_QWORD *)&v1123.f64[1] = STACK[0x648];
          *v963 = vmlaq_laneq_f64(vmulq_n_f64(v9, *(double *)&STACK[0x640]), v1093, (float64x2_t)STACK[0x640], 1);
          v963[1] = vmlaq_laneq_f64(vmulq_n_f64(v9, 0.0), v1093, v1123, 1);
          v963[2] = vmlaq_laneq_f64(vmulq_n_f64(v9, 1.0), v1093, (float64x2_t)xmmword_21030D320, 1);
          v963[3] = vmlaq_laneq_f64(vmulq_n_f64(v9, 0.0), v1093, (float64x2_t)xmmword_2102DD520, 1);
          goto LABEL_513;
        }
        v1122 = 0;
        if (v963)
          goto LABEL_512;
LABEL_513:
        _D1 = _Q0.f64[1];
        if ((*(_QWORD *)&_Q0.f64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
          && (*(_QWORD *)&_Q0.f64[1] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        {
          v1126 = STACK[0x300] + 8 * (196 - ((LODWORD(STACK[0x388]) + 3) & 0xFFFFFFFC));
          v1127 = vnegq_f64(_Q5);
          v1128 = vnegq_f64(_Q6);
          v1129 = vnegq_f64(v1077);
          v1130 = vmlaq_laneq_f64(vmulq_n_f64(v9, v1074.f64[0]), v1093, v1074, 1);
          v1131 = vmlaq_laneq_f64(vmulq_n_f64(v9, v1075.f64[0]), v1093, v1075, 1);
          _Q7 = vmlaq_laneq_f64(vmulq_n_f64(v9, v1078.f64[0]), v1093, v1078, 1);
          _Q23 = (float64x2_t)vextq_s8((int8x16_t)_Q7, (int8x16_t)_Q7, 8uLL);
          v1134 = vmlaq_laneq_f64(vmulq_n_f64(v9, v1127.f64[0]), v1093, v1127, 1);
          v1135 = vmlaq_laneq_f64(vmulq_n_f64(v9, v1128.f64[0]), v1093, v1128, 1);
          _Q2 = vmlaq_laneq_f64(vmulq_n_f64(v9, v1129.f64[0]), v1093, v1129, 1);
          v1137 = v1126 + 1568 * v965;
          v1138 = (float64x2_t *)(v1137 + 8 * v965);
          v1127.f64[0] = v1138[1].f64[0];
          v1083.f64[0] = v1138[99].f64[0];
          v1080.f64[0] = v1138[197].f64[0];
          v9 = (float64x2_t)vzip1q_s64((int64x2_t)v1130, (int64x2_t)v1131);
          v1139 = (float64x2_t)vzip2q_s64((int64x2_t)v1130, (int64x2_t)v1131);
          v1140 = vmlaq_laneq_f64(vmulq_n_f64(v9, v1130.f64[0]), v1139, v1130, 1);
          _Q29 = vmulq_f64(_Q7, v1130);
          _D21 = v1130.f64[1];
          __asm { FMLA            D29, D21, V7.D[1] }
          _Q31 = vmulq_f64(_Q7, v1131);
          _D22 = v1131.f64[1];
          __asm { FMLA            D31, D22, V7.D[1] }
          v1145.f64[0] = _Q7.f64[0];
          v1145.f64[1] = _Q23.f64[0];
          _Q9 = vmulq_f64(v1145, v1145);
          _Q23.f64[0] = _Q7.f64[1];
          __asm { FMLA            D9, D23, V7.D[1] }
          v1147 = vaddq_f64(v1138[98], vmlaq_laneq_f64(vmulq_n_f64(v9, v1131.f64[0]), v1139, v1131, 1));
          _Q24 = vaddq_f64(v1083, _Q31);
          v1149 = vaddq_f64(v1138[196], vmlaq_laneq_f64(vmulq_n_f64(v9, _Q7.f64[0]), v1139, _Q7, 1));
          *v1138 = vaddq_f64(*v1138, v1140);
          *(_QWORD *)&v1138[1].f64[0] = *(_OWORD *)&vaddq_f64(v1127, _Q29);
          v1138[98] = v1147;
          v1138[99].f64[0] = _Q24.f64[0];
          v1138[196] = v1149;
          *(_QWORD *)&v1138[197].f64[0] = *(_OWORD *)&vaddq_f64(v1080, _Q9);
          v1150 = (float64x2_t *)(v1137 + 8 * v966);
          _Q24.f64[0] = v1150[1].f64[0];
          v1149.f64[0] = v1150[99].f64[0];
          v1140.f64[0] = v1150[197].f64[0];
          _Q5 = (float64x2_t)vzip1q_s64((int64x2_t)v1134, (int64x2_t)v1135);
          _Q6 = (float64x2_t)vzip2q_s64((int64x2_t)v1134, (int64x2_t)v1135);
          _Q31 = vmulq_f64(_Q2, v1130);
          __asm { FMLA            D31, D21, V2.D[1] }
          _Q9 = vmulq_f64(_Q2, v1131);
          __asm { FMLA            D9, D22, V2.D[1] }
          _Q11 = vmulq_f64(_Q2, _Q7);
          __asm { FMLA            D11, D23, V2.D[1] }
          v1153 = vaddq_f64(v1150[98], vmlaq_laneq_f64(vmulq_n_f64(_Q5, v1131.f64[0]), _Q6, v1131, 1));
          v1154 = vaddq_f64(v1149, _Q9);
          _Q29 = vaddq_f64(v1150[196], vmlaq_laneq_f64(vmulq_n_f64(_Q5, _Q7.f64[0]), _Q6, _Q7, 1));
          *v1150 = vaddq_f64(*v1150, vmlaq_laneq_f64(vmulq_n_f64(_Q5, v1130.f64[0]), _Q6, v1130, 1));
          *(_QWORD *)&v1150[1].f64[0] = *(_OWORD *)&vaddq_f64(_Q24, _Q31);
          v1150[98] = v1153;
          v1150[99].f64[0] = v1154.f64[0];
          v1150[196] = _Q29;
          *(_QWORD *)&v1150[197].f64[0] = *(_OWORD *)&vaddq_f64(v1140, _Q11);
          v1156 = STACK[0x320];
          v1157 = (double *)(STACK[0x320] + 8 * v965);
          __asm { FMLA            D24, D21, V0.D[1] }
          _Q21 = vmulq_f64(_Q0, v1131);
          __asm
          {
            FMLA            D21, D22, V0.D[1]
            FMLA            D22, D23, V0.D[1]
          }
          _Q21.f64[0] = v1157[1] + _Q21.f64[0];
          v1160 = v1157[2] + _D22;
          *v1157 = *v1157 + _Q24.f64[0];
          v1157[1] = _Q21.f64[0];
          v1157[2] = v1160;
          v1161 = v1126 + 1568 * v966 + 8 * v966;
          _Q21.f64[0] = *(float64_t *)(v1161 + 16);
          _Q23.f64[0] = *(float64_t *)(v1161 + 1584);
          v1154.f64[0] = *(float64_t *)(v1161 + 3152);
          _Q28 = vmulq_f64(_Q2, v1134);
          _Q29.f64[0] = v1134.f64[1];
          __asm { FMLA            D28, D29, V2.D[1] }
          _Q31 = vmulq_f64(_Q2, v1135);
          _D8 = v1135.f64[1];
          __asm { FMLA            D31, D8, V2.D[1] }
          v1165 = _Q2.f64[0];
          *(_QWORD *)&_Q10.f64[1] = vextq_s8((int8x16_t)_Q2, (int8x16_t)_Q2, 8uLL).u64[0];
          _Q20 = vmulq_f64(_Q10, _Q10);
          _Q10.f64[0] = _Q2.f64[1];
          __asm { FMLA            D20, D10, V2.D[1] }
          v1167 = vaddq_f64(*(float64x2_t *)(v1161 + 1568), vmlaq_laneq_f64(vmulq_n_f64(_Q5, v1135.f64[0]), _Q6, v1135, 1));
          v1168 = vaddq_f64(_Q23, _Q31);
          v1169 = vaddq_f64(*(float64x2_t *)(v1161 + 3136), vmlaq_laneq_f64(vmulq_n_f64(_Q5, _Q2.f64[0]), _Q6, _Q2, 1));
          *(float64x2_t *)v1161 = vaddq_f64(*(float64x2_t *)v1161, vmlaq_laneq_f64(vmulq_n_f64(_Q5, v1134.f64[0]), _Q6, v1134, 1));
          *(_QWORD *)(v1161 + 16) = *(_OWORD *)&vaddq_f64(_Q21, _Q28);
          *(float64x2_t *)(v1161 + 1568) = v1167;
          *(float64_t *)(v1161 + 1584) = v1168.f64[0];
          *(float64x2_t *)(v1161 + 3136) = v1169;
          *(_QWORD *)(v1161 + 3152) = *(_OWORD *)&vaddq_f64(v1154, _Q20);
          v1170 = (double *)(v1156 + 8 * v966);
          __asm { FMLA            D20, D29, V0.D[1] }
          _Q21 = vmulq_f64(_Q0, v1135);
          __asm
          {
            FMLA            D21, D8, V0.D[1]
            FMLA            D22, D10, V0.D[1]
          }
          _Q21.f64[0] = v1170[1] + _Q21.f64[0];
          v1173 = v1170[2] + _D22;
          *v1170 = *v1170 + _Q20.f64[0];
          v1170[1] = _Q21.f64[0];
          v1170[2] = v1173;
          if (v962 == 0xFFFFFFFF)
            v1174 = 0;
          else
            v1174 = (int64x2_t *)&STACK[0xF550];
          if (v962 != 0xFFFFFFFF)
          {
            v1175 = v1126 + 8 * v962;
            v1176 = v1126 + 1568 * v962;
            if (v965 <= v962)
            {
              v1213 = (float64x2_t *)(v1175 + 1568 * v965);
              v1214 = v1213[196];
              v1215 = *(int64x2_t *)STACK[0x2F0];
              v1216 = *(float64x2_t *)STACK[0x2E8];
              v1217 = (float64x2_t)vzip1q_s64((int64x2_t)v1216, *(int64x2_t *)STACK[0x2E0]);
              *(_QWORD *)&v1216.f64[0] = vdupq_laneq_s64((int64x2_t)v1216, 1).u64[0];
              v1216.f64[1] = *(float64_t *)(STACK[0x2E0] + 8);
              v1218 = (float64x2_t)vzip1q_s64(*v1174, v1215);
              v1219 = (float64x2_t)vzip2q_s64(*v1174, v1215);
              v1220 = vmlaq_laneq_f64(vmulq_n_f64(v1218, v1130.f64[0]), v1219, v1130, 1);
              v1221 = vmlaq_laneq_f64(vmulq_n_f64(v1217, v1130.f64[0]), v1216, v1130, 1);
              v1222 = vmlaq_laneq_f64(vmulq_n_f64(v1218, v1131.f64[0]), v1219, v1131, 1);
              v1223 = vmlaq_laneq_f64(vmulq_n_f64(v1217, v1131.f64[0]), v1216, v1131, 1);
              v1224 = vmlaq_laneq_f64(vmulq_n_f64(v1218, _Q7.f64[0]), v1219, _Q7, 1);
              v1225 = vmlaq_laneq_f64(vmulq_n_f64(v1217, _Q7.f64[0]), v1216, _Q7, 1);
              v1226 = vaddq_f64(v1213[1], v1221);
              v1194 = vaddq_f64(v1213[99], v1223);
              v1191 = vaddq_f64(v1213[98], v1222);
              v1192 = vaddq_f64(v1213[197], v1225);
              *v1213 = vaddq_f64(*v1213, v1220);
              v1213[1] = v1226;
              v1213[98] = v1191;
              v1195 = vaddq_f64(v1214, v1224);
              v1213[99] = v1194;
              v1213[196] = v1195;
              v1213[197] = v1192;
              if (v966 > v962)
                goto LABEL_526;
LABEL_524:
              v1196 = (float64x2_t *)(v1175 + 1568 * v966);
              v1197 = v1196[196];
              v1198 = *(int64x2_t *)STACK[0x2F0];
              v1199 = *(float64x2_t *)STACK[0x2E8];
              v1200 = (float64x2_t)vzip1q_s64((int64x2_t)v1199, *(int64x2_t *)STACK[0x2E0]);
              *(_QWORD *)&v1199.f64[0] = vdupq_laneq_s64((int64x2_t)v1199, 1).u64[0];
              v1199.f64[1] = *(float64_t *)(STACK[0x2E0] + 8);
              v1201 = (float64x2_t)vzip1q_s64(*v1174, v1198);
              v1202 = (float64x2_t)vzip2q_s64(*v1174, v1198);
              v1203 = vmlaq_laneq_f64(vmulq_n_f64(v1201, v1134.f64[0]), v1202, v1134, 1);
              v1204 = vmlaq_laneq_f64(vmulq_n_f64(v1200, v1134.f64[0]), v1199, v1134, 1);
              v1205 = vmlaq_laneq_f64(vmulq_n_f64(v1201, v1135.f64[0]), v1202, v1135, 1);
              v1206 = vmlaq_laneq_f64(vmulq_n_f64(v1200, v1135.f64[0]), v1199, v1135, 1);
              v1207 = vmlaq_laneq_f64(vmulq_n_f64(v1201, _Q2.f64[0]), v1202, _Q2, 1);
              v1208 = vmlaq_laneq_f64(vmulq_n_f64(v1200, _Q2.f64[0]), v1199, _Q2, 1);
              v1209 = vaddq_f64(v1196[1], v1204);
              v1210 = vaddq_f64(v1196[99], v1206);
              v1211 = vaddq_f64(v1196[98], v1205);
              v1212 = vaddq_f64(v1196[197], v1208);
              *v1196 = vaddq_f64(*v1196, v1203);
              v1196[1] = v1209;
              v1196[98] = v1211;
              v1196[99] = v1210;
              v1196[196] = vaddq_f64(v1197, v1207);
              v1196[197] = v1212;
            }
            else
            {
              v1177 = (float64x2_t *)(v1176 + 8 * v965);
              v1178 = v1177[294];
              _Q27 = *(float64x2_t *)STACK[0x2F0];
              _Q28 = *(float64x2_t *)STACK[0x2E8];
              v1181 = vmlaq_laneq_f64(vmulq_n_f64(v9, *(double *)v1174->i64), v1139, *(float64x2_t *)v1174, 1);
              _Q31 = vmulq_f64(_Q7, *(float64x2_t *)v1174);
              _D26 = v1174->i64[1];
              __asm { FMLA            D31, D26, V7.D[1] }
              v1184 = vmlaq_laneq_f64(vmulq_n_f64(v9, _Q27.f64[0]), v1139, _Q27, 1);
              _Q8 = vmulq_f64(_Q7, _Q27);
              _Q27.f64[0] = *(float64_t *)(STACK[0x2F0] + 8);
              __asm { FMLA            D8, D27, V7.D[1] }
              v1186 = vmlaq_laneq_f64(vmulq_n_f64(v9, _Q28.f64[0]), v1139, _Q28, 1);
              _Q9 = vmulq_f64(_Q7, _Q28);
              _Q28.f64[0] = *(float64_t *)(STACK[0x2E8] + 8);
              __asm { FMLA            D9, D28, V7.D[1] }
              v1188 = vmlaq_laneq_f64(vmulq_n_f64(v9, *(double *)STACK[0x2E0]), v1139, *(float64x2_t *)STACK[0x2E0], 1);
              _Q19 = vmulq_f64(_Q7, *(float64x2_t *)STACK[0x2E0]);
              _Q28.f64[0] = *(float64_t *)(STACK[0x2E0] + 8);
              __asm { FMLA            D19, D28, V7.D[1] }
              v1130.f64[0] = v1177[1].f64[0];
              *(_QWORD *)&v1190 = *(_OWORD *)&vaddq_f64(v1130, _Q31);
              _Q21.f64[0] = v1177[99].f64[0];
              v1191 = vaddq_f64(_Q21, _Q8);
              v1192 = vaddq_f64(v1177[98], v1184);
              v1168.f64[0] = v1177[197].f64[0];
              v1193 = vaddq_f64(v1177[196], v1186);
              v1169.f64[0] = v1177[295].f64[0];
              v1194 = vaddq_f64(v1169, _Q19);
              *v1177 = vaddq_f64(*v1177, v1181);
              v1177[1].f64[0] = v1190;
              v1177[98] = v1192;
              v1177[99].f64[0] = v1191.f64[0];
              v1177[196] = v1193;
              *(_QWORD *)&v1177[197].f64[0] = *(_OWORD *)&vaddq_f64(v1168, _Q9);
              v1195 = vaddq_f64(v1178, v1188);
              v1177[294] = v1195;
              v1177[295].f64[0] = v1194.f64[0];
              if (v966 <= v962)
                goto LABEL_524;
LABEL_526:
              v1227 = (float64x2_t *)(v1176 + 8 * v966);
              v1228 = v1227[294];
              _Q22 = *(float64x2_t *)STACK[0x2F0];
              _Q23 = *(float64x2_t *)STACK[0x2E8];
              v1231 = vmlaq_laneq_f64(vmulq_n_f64(_Q5, *(double *)v1174->i64), _Q6, *(float64x2_t *)v1174, 1);
              _Q26 = vmulq_f64(_Q2, *(float64x2_t *)v1174);
              _D21 = v1174->i64[1];
              __asm { FMLA            D26, D21, V2.D[1] }
              v1234 = vmlaq_laneq_f64(vmulq_n_f64(_Q5, _Q22.f64[0]), _Q6, _Q22, 1);
              _Q27 = vmulq_f64(_Q2, _Q22);
              _Q22.f64[0] = *(float64_t *)(STACK[0x2F0] + 8);
              __asm { FMLA            D27, D22, V2.D[1] }
              v1236 = vmlaq_laneq_f64(vmulq_n_f64(_Q5, _Q23.f64[0]), _Q6, _Q23, 1);
              _Q28 = vmulq_f64(_Q2, _Q23);
              _Q23.f64[0] = *(float64_t *)(STACK[0x2E8] + 8);
              __asm { FMLA            D28, D23, V2.D[1] }
              v1238 = vmlaq_laneq_f64(vmulq_n_f64(_Q5, *(double *)STACK[0x2E0]), _Q6, *(float64x2_t *)STACK[0x2E0], 1);
              _Q6 = vmulq_f64(_Q2, *(float64x2_t *)STACK[0x2E0]);
              _Q23.f64[0] = *(float64_t *)(STACK[0x2E0] + 8);
              __asm { FMLA            D6, D23, V2.D[1] }
              v1195.f64[0] = v1227[1].f64[0];
              v1191.f64[0] = v1227[99].f64[0];
              v1240 = vaddq_f64(v1227[98], v1234);
              v1194.f64[0] = v1227[197].f64[0];
              v1241 = vaddq_f64(v1227[196], v1236);
              v1192.f64[0] = v1227[295].f64[0];
              *v1227 = vaddq_f64(*v1227, v1231);
              *(_QWORD *)&v1227[1].f64[0] = *(_OWORD *)&vaddq_f64(v1195, _Q26);
              v1227[98] = v1240;
              *(_QWORD *)&v1227[99].f64[0] = *(_OWORD *)&vaddq_f64(v1191, _Q27);
              v1227[196] = v1241;
              *(_QWORD *)&v1227[197].f64[0] = *(_OWORD *)&vaddq_f64(v1194, _Q28);
              v1227[294] = vaddq_f64(v1228, v1238);
              *(_QWORD *)&v1227[295].f64[0] = *(_OWORD *)&vaddq_f64(v1192, _Q6);
            }
            _D2 = vextq_s8((int8x16_t)_Q0, (int8x16_t)_Q0, 8uLL).u64[0];
            v1243 = (float64x2_t *)(v1175 + 1568 * v962);
            v1244 = (double *)(STACK[0x320] + 8 * v962);
            _Q19 = *(_OWORD *)&STACK[0xF550];
            _Q20 = *(_OWORD *)&STACK[0xF560];
            _Q21 = *(float64x2_t *)&STACK[0xF570];
            _Q22 = *(float64x2_t *)&STACK[0xF580];
            v1249 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&STACK[0xF570], *(int64x2_t *)&STACK[0xF580]);
            *(_QWORD *)&v1250.f64[0] = vdupq_laneq_s64(*(int64x2_t *)&STACK[0xF570], 1).u64[0];
            *(_QWORD *)&v1250.f64[1] = STACK[0xF588];
            v1251 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&STACK[0xF550], *(int64x2_t *)&STACK[0xF560]);
            v1252 = (float64x2_t)vzip2q_s64(*(int64x2_t *)&STACK[0xF550], *(int64x2_t *)&STACK[0xF560]);
            _Q4 = vaddq_f64(v1243[1], vmlaq_laneq_f64(vmulq_n_f64(v1249, *(double *)&STACK[0xF550]), v1250, *(float64x2_t *)&STACK[0xF550], 1));
            v1254 = vaddq_f64(v1243[99], vmlaq_laneq_f64(vmulq_n_f64(v1249, *(double *)&STACK[0xF560]), v1250, *(float64x2_t *)&STACK[0xF560], 1));
            v1255 = vaddq_f64(v1243[98], vmlaq_laneq_f64(vmulq_n_f64(v1251, *(double *)&STACK[0xF560]), v1252, *(float64x2_t *)&STACK[0xF560], 1));
            v1256 = vaddq_f64(v1243[197], vmlaq_laneq_f64(vmulq_n_f64(v1249, *(double *)&STACK[0xF570]), v1250, *(float64x2_t *)&STACK[0xF570], 1));
            v1257 = vaddq_f64(v1243[196], vmlaq_laneq_f64(vmulq_n_f64(v1251, *(double *)&STACK[0xF570]), v1252, *(float64x2_t *)&STACK[0xF570], 1));
            v9 = vaddq_f64(v1243[295], vmlaq_laneq_f64(vmulq_n_f64(v1249, *(double *)&STACK[0xF580]), v1250, *(float64x2_t *)&STACK[0xF580], 1));
            v1258 = vaddq_f64(v1243[294], vmlaq_laneq_f64(vmulq_n_f64(v1251, *(double *)&STACK[0xF580]), v1252, *(float64x2_t *)&STACK[0xF580], 1));
            *v1243 = vaddq_f64(*v1243, vmlaq_laneq_f64(vmulq_n_f64(v1251, *(double *)&STACK[0xF550]), v1252, *(float64x2_t *)&STACK[0xF550], 1));
            v1243[1] = _Q4;
            v1243[98] = v1255;
            v1243[99] = v1254;
            v1243[196] = v1257;
            v1243[197] = v1256;
            v1243[294] = v1258;
            v1243[295] = v9;
            __asm
            {
              FMLA            D3, D2, V19.D[1]
              FMLA            D4, D2, V20.D[1]
            }
            _Q5 = vmulq_f64(_Q0, _Q21);
            __asm { FMLA            D5, D2, V21.D[1] }
            _Q6 = vmulq_f64(_Q0, _Q22);
            __asm { FMLA            D6, D2, V22.D[1] }
            v1260 = *v1244 + _D3;
            v1261 = v1244[1] + _Q4.f64[0];
            _Q4.f64[0] = v1244[2] + _Q5.f64[0];
            _Q5.f64[0] = v1244[3] + _Q6.f64[0];
            *v1244 = v1260;
            v1244[1] = v1261;
            v1244[2] = _Q4.f64[0];
            v1244[3] = _Q5.f64[0];
          }
          __asm { FMLA            D2, D1, V0.D[1] }
          v898 = STACK[0x5B0];
          *(_DWORD *)(STACK[0x310] + ((STACK[0x5B0] >> 3) & 0x1FFFFFFFFFFFFFFCLL)) = *(_DWORD *)(STACK[0x310]
                                                                                               + ((STACK[0x5B0] >> 3) & 0x1FFFFFFFFFFFFFFCLL)) & ~(1 << STACK[0x5B0]) | (v1122 << STACK[0x5B0]);
          *(double *)&STACK[0x330] = *(double *)&STACK[0x330] + _D2;
          v897 = STACK[0x5A0];
          goto LABEL_474;
        }
LABEL_473:
        v897 = STACK[0x5A0];
        *(_DWORD *)(STACK[0x360] + ((STACK[0x5A0] >> 3) & 0x1FFFFFFFFFFFFFFCLL)) ^= 1 << STACK[0x5A0];
        v898 = STACK[0x5B0];
LABEL_474:
        v895 = (v898 + 1);
        v896 = (v897 + 1);
        v899 = vaddq_f64(*(float64x2_t *)(v1557 + 43696), (float64x2_t)0);
        v20 = vaddq_f64(*(float64x2_t *)(v1557 + 43680), (float64x2_t)0);
        *(float64x2_t *)(v1557 + 43680) = v20;
        *(float64x2_t *)(v1557 + 43696) = v899;
        v893 += 18;
        if (v893 == (unsigned int *)STACK[0x368])
        {
          v1263 = *(double *)&STACK[0x330] * 0.5;
          *(double *)(v1558[3] + 8) = v1263;
          *(double *)v1558[4] = v1263 + *(double *)v1558[4];
          sub_20FCB09EC((__int128 *)&STACK[0x654], (__int128 *)&STACK[0x9B0], *v1558);
          _Q2.f64[1] = 0.0;
          _Q1 = vaddq_f64(*(float64x2_t *)(v1557 + 43856), (float64x2_t)0);
          v20 = vaddq_f64(*(float64x2_t *)(v1557 + 43840), (float64x2_t)0);
          *(float64x2_t *)(v1557 + 43840) = v20;
          *(float64x2_t *)(v1557 + 43856) = _Q1;
          v888 = (_DWORD *)(v1557 + 31048);
          goto LABEL_530;
        }
      }
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 239, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_621;
      }
      v912 = *v903;
      v932 = -1;
      goto LABEL_485;
    }
  }
LABEL_530:
  v1264 = *v1558;
  if (*(_DWORD *)(*v1558 + 8) == -1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 188, (uint64_t)"write_channel != kInvalidChannel && \"DMA write request not permitted.\"", 70, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (*(_DWORD *)v1264 < 0x20BCC4u
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 191, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v1265 = v1557 + 31728;
  *(_DWORD *)(*(_QWORD *)(v1264 + 16) + 2145472) = 1007;
  v1266 = v1557 + 44352;
  v1267 = v1557 + 351680;
  v1268 = v888[144];
  v1269 = *v888;
  v1270 = 0.0;
  if ((_DWORD)v1268)
  {
    v1271 = (v1269 + 3) & 0xFFFFFFFC;
    v1272 = (float64x2_t *)(v888 + 76);
    v1273 = 0.0;
    do
    {
      v1274 = *(unsigned int *)(v1557 + 31228 + 4 * LODWORD(v1272[-3].f64[1]));
      if ((_DWORD)v1274 != -1)
      {
        v1275 = v1558[5] + ((unint64_t)LODWORD(v1272[-3].f64[0]) << 6);
        v1276 = (float64x2_t *)(v1275 + 18376);
        v1277 = (float64x2_t *)(v1275 + 18344);
        if (HIDWORD(v1272[-3].f64[0]))
          v1277 = v1276;
        v1278 = v1272[1];
        _Q1 = vmulq_f64(vsubq_f64(v1277[1], v1272[-1]), v1278);
        _Q3 = vmulq_f64(vsubq_f64(*v1277, v1272[-2]), *v1272);
        v1280 = (float64_t *)(v1266 + 8 * (v1274 - v1271 + 196 * (_DWORD)v1274 + 196));
        v1281.f64[0] = *v1280;
        v1282.f64[0] = v1280[394];
        v1281.f64[1] = v1280[197];
        v1282.f64[1] = v1280[591];
        v1283 = vmlaq_f64(v1282, v1278, v1278);
        v1284 = vmlaq_f64(v1281, *v1272, *v1272);
        *v1280 = v1284.f64[0];
        v1280[197] = v1284.f64[1];
        v1280[394] = v1283.f64[0];
        v1280[591] = v1283.f64[1];
        v1285 = (float64x2_t *)(v1267 + 8 * v1274);
        v7 = *v1272;
        _Q5 = vmlaq_f64(v1285[1], _Q1, v1272[1]);
        *v1285 = vmlaq_f64(*v1285, _Q3, *v1272);
        v1285[1] = _Q5;
        _Q5.f64[0] = _Q3.f64[1];
        __asm { FMLA            D4, D5, V3.D[1] }
        _Q3.f64[0] = _Q1.f64[1];
        __asm { FMLA            D4, D3, V1.D[1] }
        v1273 = v1273 + _D4;
      }
      v1272 += 5;
      --v1268;
    }
    while (v1268);
    v1269 = *v888;
  }
  else
  {
    v1273 = 0.0;
  }
  v1288 = v1273 * 0.5;
  v1289 = (double *)v1558[3];
  v1289[3] = v1288;
  v1290 = (double *)v1558[4];
  *v1290 = v1288 + *v1290;
  v1291 = 196 - ((v1269 + 3) & 0xFFFFFFFC);
  v1292 = *(unsigned int *)(v1557 + 32368);
  if ((_DWORD)v1292)
  {
    v1270 = 0.0;
    v1293 = (unsigned int *)(v1557 + 31728);
    do
    {
      v1294 = 4 * v1293[2];
      v1295 = *(unsigned int *)(v1557 + 31196 + v1294);
      v1296 = *(unsigned int *)(v1557 + 31212 + v1294);
      if ((_DWORD)v1295 != -1 || (_DWORD)v1296 != -1)
      {
        v1298 = (const double *)(v1293 + 4);
        v1585 = vld3q_f64(v1298);
        v1299 = v1293[1];
        v1300 = v1558[5] + 4080 * *v1293 + 2024;
        v1301 = v1300 + 1016 * v1299;
        v1302 = *((double *)v1293 + 10);
        _Q21 = *((float64x2_t *)v1293 + 4);
        v1303 = *(double *)(v1301 + 16);
        v1304 = *(double *)(v1301 + 40);
        _Q17 = *(float64x2_t *)(v1301 + 24);
        v1305 = *(double *)(v1301 + 64);
        v1306 = *(float64x2_t *)(v1301 + 48);
        v1307 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1585.val[0], *(double *)v1301), v1585.val[1], *(float64x2_t *)v1301, 1), v1585.val[2], v1303);
        _D6 = *(_QWORD *)(v1301 + 8);
        __asm { FMLA            D24, D6, V21.D[1] }
        v1310 = _D24 + v1302 * v1303;
        v1311 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1585.val[0], _Q17.f64[0]), v1585.val[1], _Q17, 1), v1585.val[2], v1304);
        _Q17.f64[0] = *(float64_t *)(v1301 + 32);
        __asm { FMLA            D24, D17, V21.D[1] }
        _Q17.f64[0] = _D24 + v1302 * v1304;
        v1314 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1585.val[0], v1306.f64[0]), v1585.val[1], v1306, 1), v1585.val[2], v1305);
        v1585.val[1].f64[0] = *(float64_t *)(v1301 + 56);
        __asm { FMLA            D18, D19, V21.D[1] }
        v1315 = v1585.val[0].f64[0] + v1302 * v1305;
        if (v1315 >= 0.0)
        {
          if (v1307.f64[0] >= -v1311.f64[1])
          {
            v1323 = (float64x2_t)vzip1q_s64((int64x2_t)_Q17, (int64x2_t)v1314);
            *(_QWORD *)&v1314.f64[0] = vdupq_laneq_s64((int64x2_t)v1314, 1).u64[0];
            v1314.f64[1] = v1310;
            v1318 = vsubq_f64(v1323, v1314);
            *(_QWORD *)&v1319.f64[0] = *(_OWORD *)&vsubq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v1307, 1), v1311);
            v1320 = v1315 + 1.0 + v1307.f64[0] + v1311.f64[1];
            _Q17.f64[0] = v1320;
          }
          else
          {
            v1318.f64[0] = v1314.f64[0] + v1310;
            v1318.f64[1] = _Q17.f64[0] + v1314.f64[1];
            _Q17.f64[0] = v1315 + 1.0 - (v1307.f64[0] + v1311.f64[1]);
            v1319.f64[0] = _Q17.f64[0];
            *(_QWORD *)&v1320 = *(_OWORD *)&vsubq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v1307, 1), v1311);
          }
        }
        else if (v1307.f64[0] <= v1311.f64[1])
        {
          v1321.f64[1] = _Q17.f64[0];
          v1321.f64[0] = 1.0 - v1315;
          v1322.f64[1] = v1314.f64[1];
          v1322.f64[0] = v1311.f64[1] - v1307.f64[0];
          _Q17 = vaddq_f64(v1321, v1322);
          v1319.f64[0] = _Q17.f64[1];
          v1318 = (float64x2_t)vzip1q_s64((int64x2_t)vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v1307, 1), v1311), (int64x2_t)_Q17);
          v1320 = v1314.f64[0] - v1310;
        }
        else
        {
          v1316 = v1307.f64[0] - v1311.f64[1];
          v1307.f64[0] = 1.0 - v1315;
          v1317 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v1311.f64[0], 0);
          v1317.f64[0] = v1316;
          v1318 = vaddq_f64(v1307, v1317);
          v1319.f64[0] = v1314.f64[0] + v1310;
          v1320 = _Q17.f64[0] - v1314.f64[1];
          _Q17.f64[0] = v1318.f64[0];
        }
        v1319.f64[1] = v1320;
        v1324 = 0.5 / sqrt(_Q17.f64[0]);
        v1325 = vmulq_n_f64(v1319, v1324);
        v1326 = vmulq_n_f64(v1318, v1324);
        v1327 = vaddq_f64(v1326, v1326);
        v1328 = v1300 + 1016 * v1299;
        v1318.f64[0] = *(float64_t *)(v1328 + 88);
        v1314.f64[0] = *((float64_t *)v1293 + 13);
        v1329 = (int8x16_t)vsubq_f64(*(float64x2_t *)(v1328 + 72), *(float64x2_t *)(v1293 + 22));
        v1330 = *((float64x2_t *)v1293 + 8);
        v9 = *((float64x2_t *)v1293 + 9);
        v1331 = vmulq_f64((float64x2_t)vzip1q_s64((int64x2_t)vaddq_f64(v1325, v1325), (int64x2_t)v1329), v1330);
        v1332 = vmulq_f64(v1327, *((float64x2_t *)v1293 + 7));
        *(_QWORD *)&v1333 = vextq_s8((int8x16_t)v1332, (int8x16_t)v1332, 8uLL).u64[0];
        if ((_DWORD)v1295 != -1)
        {
          v1330.f64[0] = *((float64_t *)v1293 + 16);
          v1334 = *((float64x2_t *)v1293 + 7);
          _Q21.f64[0] = v1332.f64[0];
          _Q21.f64[1] = v1333;
          v1335 = (float64_t *)(v1266 + 8 * (v1295 + v1291 + 196 * (_DWORD)v1295));
          v1336.f64[0] = *v1335;
          v1306.f64[0] = v1335[394];
          v1336.f64[1] = v1335[197];
          v1337 = vmlaq_f64(v1336, v1334, v1334);
          v1338 = vmlaq_f64(v1306, v1330, v1330);
          *v1335 = v1337.f64[0];
          v1335[197] = v1337.f64[1];
          v1335[394] = v1338.f64[0];
          v1339 = (float64x2_t *)(v1267 + 8 * v1295);
          v1338.f64[0] = v1339[1].f64[0];
          v11 = vmlaq_f64(*v1339, v1334, _Q21);
          *v1339 = v11;
          *(_QWORD *)&v1339[1].f64[0] = *(_OWORD *)&vmlaq_f64(v1338, v1330, v1331);
        }
        v7 = vmulq_f64((float64x2_t)vextq_s8(v1329, (int8x16_t)vsubq_f64(v1318, v1314), 8uLL), v9);
        *(_QWORD *)&v1340 = vextq_s8((int8x16_t)v1331, (int8x16_t)v1331, 8uLL).u64[0];
        v8 = (float64x2_t)vextq_s8((int8x16_t)v7, (int8x16_t)v7, 8uLL);
        if ((_DWORD)v1296 != -1)
        {
          v9.f64[0] = *((float64_t *)v1293 + 19);
          v1341 = *(float64x2_t *)(v1293 + 34);
          v1342.f64[0] = v1340;
          v1342.f64[1] = v7.f64[0];
          v1343 = (float64_t *)(v1266 + 8 * (v1296 + v1291 + 196 * (_DWORD)v1296));
          v1344.f64[0] = *v1343;
          v11.f64[0] = v1343[394];
          v1344.f64[1] = v1343[197];
          v1345 = vmlaq_f64(v1344, v1341, v1341);
          v1346 = vmlaq_f64(v11, v9, v9);
          *v1343 = v1345.f64[0];
          v1343[197] = v1345.f64[1];
          v1343[394] = v1346.f64[0];
          v1347 = (float64x2_t *)(v1267 + 8 * v1296);
          v1346.f64[0] = v1347[1].f64[0];
          v11 = vmlaq_f64(v1346, v9, v8);
          _Q21 = vmlaq_f64(*v1347, v1341, v1342);
          *v1347 = _Q21;
          v1347[1].f64[0] = v11.f64[0];
        }
        v1332.f64[1] = v1333;
        _Q5 = vmulq_f64(v1332, v1332);
        v1270 = v1270
              + _Q5.f64[0]
              + v1333 * v1333
              + v1331.f64[0] * v1331.f64[0]
              + v1340 * v1340
              + v7.f64[0] * v7.f64[0]
              + v8.f64[0] * v8.f64[0];
      }
      v1293 += 40;
      --v1292;
    }
    while (v1292);
    v1289 = (double *)v1558[3];
    v1290 = (double *)v1558[4];
    v1291 = 196 - ((*v888 + 3) & 0xFFFFFFFC);
  }
  v1348 = v1270 * 0.5;
  v1289[5] = v1348;
  *v1290 = v1348 + *v1290;
  v1349 = *(_DWORD *)(v1557 + 35336);
  v1350 = 0.0;
  v1351 = 0.0;
  if (v1349)
  {
    v1352 = 0;
    v1353 = 296 * v1349;
    v1354 = v1557 + 32552;
    do
    {
      v1355 = v1354 + v1352;
      v1356 = *(unsigned int *)(v1354 + v1352 - 176);
      v1357 = 4 * v1356;
      v1358 = *(unsigned int *)(v1557 + 31076 + 4 * v1356);
      if ((_DWORD)v1358 != -1)
      {
        v1359 = v1558[5] + 168 * v1356;
        _Q4.f64[0] = *(float64_t *)(v1355 - 152);
        v1361 = *(int64x2_t *)(v1355 - 168);
        _Q6 = *(int64x2_t *)(v1355 - 144);
        v1363 = *(double *)(v1355 - 104);
        _Q18 = *(float64x2_t *)(v1355 - 120);
        v1365 = *(double *)(v1359 + 16);
        _Q16 = *(int64x2_t *)v1359;
        v1366 = *(double *)(v1359 + 40);
        v1367 = *(double *)(v1359 + 64);
        v1368 = (float64x2_t)vzip1q_s64(v1361, _Q6);
        v1369 = (float64x2_t)vzip2q_s64(v1361, _Q6);
        _Q4.f64[1] = *(float64_t *)(v1355 - 128);
        v1370 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1368, *(double *)v1359), v1369, *(float64x2_t *)v1359, 1), _Q4, v1365);
        _Q5 = vmulq_f64(_Q18, *(float64x2_t *)v1359);
        _Q6.i64[0] = *(_QWORD *)(v1359 + 8);
        __asm { FMLA            D5, D6, V18.D[1] }
        _Q5.f64[0] = _Q5.f64[0] + v1363 * v1365;
        v1372 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1368, *(double *)(v1359 + 24)), v1369, *(float64x2_t *)(v1359 + 24), 1), _Q4, v1366);
        _Q16.i64[0] = *(_QWORD *)(v1359 + 32);
        __asm { FMLA            D6, D16, V18.D[1] }
        *(double *)_Q16.i64 = *(double *)_Q6.i64 + v1363 * v1366;
        v1374 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1368, *(double *)(v1359 + 48)), v1369, *(float64x2_t *)(v1359 + 48), 1), _Q4, v1367);
        _D19 = *(_QWORD *)(v1359 + 56);
        __asm { FMLA            D4, D19, V18.D[1] }
        v1376 = _Q4.f64[0] + v1363 * v1367;
        v1377 = v1372.f64[1];
        if (v1376 >= 0.0)
        {
          if (v1370.f64[0] >= -v1372.f64[1])
          {
            v1383 = (float64x2_t)vzip1q_s64(_Q16, (int64x2_t)v1374);
            *(_QWORD *)&v1384.f64[0] = vdupq_laneq_s64((int64x2_t)v1374, 1).u64[0];
            v1384.f64[1] = _Q5.f64[0];
            v1380 = vsubq_f64(v1383, v1384);
            _Q5 = vsubq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v1370, 1), v1372);
            v1370.f64[0] = v1376 + 1.0 + v1370.f64[0] + v1372.f64[1];
          }
          else
          {
            v1380.f64[0] = v1374.f64[0] + _Q5.f64[0];
            _Q5.f64[0] = v1376 + 1.0 - (v1370.f64[0] + v1372.f64[1]);
            v1380.f64[1] = *(double *)_Q16.i64 + v1374.f64[1];
            v1370.f64[0] = _Q5.f64[0];
          }
        }
        else if (v1370.f64[0] <= v1372.f64[1])
        {
          v1381 = (int64x2_t)vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v1370, 1), v1372);
          *(_QWORD *)&v1382.f64[1] = _Q16.i64[0];
          v1382.f64[0] = 1.0 - v1376;
          v1374.f64[0] = v1377 - v1370.f64[0];
          v1370 = vaddq_f64(v1382, v1374);
          v1380 = (float64x2_t)vzip1q_s64(v1381, (int64x2_t)v1370);
          _Q5 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v1370, 1);
        }
        else
        {
          v1378 = v1370.f64[0] - v1372.f64[1];
          v1370.f64[0] = 1.0 - v1376;
          v1379 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v1372.f64[0], 0);
          v1379.f64[0] = v1378;
          v1380 = vaddq_f64(v1370, v1379);
          _Q5.f64[0] = v1374.f64[0] + _Q5.f64[0];
          v1370.f64[0] = v1380.f64[0];
        }
        v1386 = *(float64x2_t *)(v1355 - 32);
        v1385 = *(float64x2_t *)(v1355 - 16);
        v1387 = *(float64x2_t *)(v1355 - 64);
        v1388 = *(float64x2_t *)(v1355 - 48);
        v1390 = *(float64x2_t *)(v1355 - 96);
        v1389 = *(float64x2_t *)(v1355 - 80);
        v1391 = *(unsigned int *)(v1557 + 31156 + v1357);
        v1403 = (float64x2_t)vextq_s8((int8x16_t)v1386, (int8x16_t)v1386, 8uLL);
        v1392 = *(unsigned int *)(v1557 + 31116 + v1357);
        v1393 = 0.5 / sqrt(v1370.f64[0]);
        v1394 = vmulq_n_f64(_Q5, v1393);
        v1395 = vmulq_n_f64(v1380, v1393);
        *(_QWORD *)&v1396.f64[0] = *(_OWORD *)&vaddq_f64(v1394, v1394);
        v1397 = *(float64x2_t *)(v1359 + 104);
        v1398 = *(float64x2_t *)(v1359 + 88);
        v12 = *(float64x2_t *)(v1359 + 72);
        v1399 = *(float64x2_t *)(v1359 + 120);
        *(_QWORD *)&v1385.f64[1] = vextq_s8((int8x16_t)v1385, (int8x16_t)v1385, 8uLL).u64[0];
        v1400 = vsubq_f64(*(float64x2_t *)(v1359 + 152), v1385);
        v1386.f64[1] = v1403.f64[0];
        v1401 = vsubq_f64(*(float64x2_t *)(v1359 + 136), v1386);
        v1396.f64[1] = v1401.f64[1];
        v1402 = v1354 + v1352;
        v1403.f64[0] = *(float64_t *)(v1354 + v1352 + 112);
        v13 = *(float64x2_t *)(v1354 + v1352 + 80);
        v1404 = *(float64x2_t *)(v1354 + v1352 + 96);
        v1405 = *(float64x2_t *)(v1354 + v1352);
        v1412 = *(float64x2_t *)(v1354 + v1352 + 32);
        v1406 = *(float64x2_t *)(v1354 + v1352 + 48);
        v1407 = *(float64x2_t *)(v1354 + v1352 + 64);
        v1408 = vmulq_f64(vaddq_f64(v1395, v1395), v1405);
        v1409 = vmulq_f64(v1396, *(float64x2_t *)(v1354 + v1352 + 16));
        v1410 = (int8x16_t)vmulq_f64(v1400, v1412);
        _Q5 = (float64x2_t)vextq_s8((int8x16_t)v1409, (int8x16_t)v1409, 8uLL);
        v1411 = (float64x2_t)vextq_s8(v1410, v1410, 8uLL);
        v1412.f64[0] = *(float64_t *)(v1354 + v1352 + 16);
        v1413 = (float64_t *)(v1266 + 8 * (v1358 + v1291 + 196 * (_DWORD)v1358));
        v1414.f64[0] = *v1413;
        _Q10.f64[0] = v1413[394];
        v1414.f64[1] = v1413[197];
        v1415 = vmlaq_f64(v1414, v1405, v1405);
        v1416 = vmlaq_f64(_Q10, v1412, v1412);
        *v1413 = v1415.f64[0];
        v1413[197] = v1415.f64[1];
        v1413[394] = v1416.f64[0];
        v1417 = (float64x2_t *)(v1267 + 8 * v1358);
        v1416.f64[0] = v1417[1].f64[0];
        *v1417 = vmlaq_f64(*v1417, v1405, v1408);
        *(_QWORD *)&v1417[1].f64[0] = *(_OWORD *)&vmlaq_f64(v1416, v1412, v1409);
        if ((_DWORD)v1392 != -1)
        {
          v1418 = *(float64x2_t *)(v1402 + 24);
          v1412.f64[0] = *(float64_t *)(v1402 + 40);
          v1419.f64[0] = _Q5.f64[0];
          *(_QWORD *)&v1419.f64[1] = v1410.i64[0];
          v1420 = (float64_t *)(v1266 + 8 * (v1392 + v1291 + 196 * (_DWORD)v1392));
          v1421.f64[0] = *v1420;
          _Q11.f64[0] = v1420[394];
          v1421.f64[1] = v1420[197];
          v1422 = vmlaq_f64(v1421, v1418, v1418);
          v1423 = vmlaq_f64(_Q11, v1412, v1412);
          *v1420 = v1422.f64[0];
          v1420[197] = v1422.f64[1];
          v1420[394] = v1423.f64[0];
          v1424 = (float64x2_t *)(v1267 + 8 * v1392);
          v1423.f64[0] = v1424[1].f64[0];
          _Q11 = vmlaq_f64(v1423, v1412, v1411);
          *v1424 = vmlaq_f64(*v1424, v1418, v1419);
          v1424[1].f64[0] = _Q11.f64[0];
        }
        v14 = (float64x2_t)vextq_s8((int8x16_t)v1388, (int8x16_t)v1388, 8uLL);
        _Q10 = (float64x2_t)vextq_s8((int8x16_t)v1390, (int8x16_t)v1390, 8uLL);
        v1388.f64[1] = v14.f64[0];
        v1425 = vsubq_f64(v1399, v1388);
        v1390.f64[1] = _Q10.f64[0];
        v1426 = (int8x16_t)vsubq_f64(v12, v1390);
        *(_QWORD *)&v1389.f64[1] = vextq_s8((int8x16_t)v1389, (int8x16_t)v1389, 8uLL).u64[0];
        v1427 = (int8x16_t)vsubq_f64(v1398, v1389);
        *(_QWORD *)&v1387.f64[1] = vextq_s8((int8x16_t)v1387, (int8x16_t)v1387, 8uLL).u64[0];
        v1428 = (int8x16_t)vsubq_f64(v1397, v1387);
        v1429 = (float64x2_t)vextq_s8(v1427, v1428, 8uLL);
        v1430 = (float64x2_t)vextq_s8(v1426, v1427, 8uLL);
        v1431 = (float64x2_t)vdupq_lane_s64(v1426.i64[0], 0);
        *(_QWORD *)&v1431.f64[0] = vdupq_laneq_s64((int64x2_t)v1428, 1).u64[0];
        v1432 = (int8x16_t)vmulq_f64(v1430, v13);
        v8 = (float64x2_t)vextq_s8(v1432, v1432, 8uLL);
        v1433 = (int8x16_t)vmulq_f64(v1429, v1406);
        v1434 = (int8x16_t)vmulq_f64(v1431, v1407);
        *(_QWORD *)&v1435 = vextq_s8(v1433, v1433, 8uLL).u64[0];
        *(_QWORD *)&v1436 = vextq_s8(v1434, v1434, 8uLL).u64[0];
        v1437 = (int8x16_t)vmulq_f64(v1425, v1404);
        *(_QWORD *)&v1438 = vextq_s8(v1437, v1437, 8uLL).u64[0];
        v9 = vmulq_f64(v1401, v1403);
        if ((_DWORD)v1391 != -1)
        {
          v1439 = *(float64x2_t *)(v1354 + v1352 + 80);
          v13 = *(float64x2_t *)(v1354 + v1352 + 96);
          v1440 = *(float64x2_t *)(v1354 + v1352 + 48);
          v12 = *(float64x2_t *)(v1354 + v1352 + 64);
          v1425.f64[0] = *(float64_t *)(v1354 + v1352 + 112);
          *(_QWORD *)&v14.f64[0] = v1437.i64[0];
          v14.f64[1] = v1438;
          *(_QWORD *)&v1441.f64[0] = v1432.i64[0];
          v1441.f64[1] = v8.f64[0];
          *(_QWORD *)&v1442.f64[0] = v1434.i64[0];
          v1442.f64[1] = v1436;
          *(_QWORD *)&_Q10.f64[0] = v1433.i64[0];
          _Q10.f64[1] = v1435;
          v1443 = (float64_t *)(v1266 + 8 * (v1391 + v1291 + 196 * (_DWORD)v1391));
          v1444.f64[0] = *v1443;
          v1445.f64[0] = v1443[394];
          v1446.f64[0] = v1443[788];
          v1447.f64[0] = v1443[1182];
          v5.f64[0] = v1443[1576];
          v1444.f64[1] = v1443[197];
          v1445.f64[1] = v1443[591];
          v1446.f64[1] = v1443[985];
          v1447.f64[1] = v1443[1379];
          v1448 = vmlaq_f64(v1447, v13, v13);
          v1449 = vmlaq_f64(v1446, v1439, v1439);
          v1450 = vmlaq_f64(v1445, v12, v12);
          v1451 = vmlaq_f64(v1444, v1440, v1440);
          v1452 = vmlaq_f64(v5, v1425, v1425);
          *v1443 = v1451.f64[0];
          v1443[197] = v1451.f64[1];
          v1443[591] = v1450.f64[1];
          v1443[394] = v1450.f64[0];
          v1443[788] = v1449.f64[0];
          v1443[985] = v1449.f64[1];
          v1443[1379] = v1448.f64[1];
          v1443[1182] = v1448.f64[0];
          v1443[1576] = v1452.f64[0];
          v1453 = (float64x2_t *)(v1267 + 8 * v1391);
          v1452.f64[0] = v1453[4].f64[0];
          v5 = vmlaq_f64(v1452, v1425, v9);
          v1454 = vmlaq_f64(v1453[3], v13, v14);
          v1455 = vmlaq_f64(v1453[2], v1439, v1441);
          v1456 = vmlaq_f64(v1453[1], v12, v1442);
          _Q11 = vmlaq_f64(*v1453, v1440, _Q10);
          *v1453 = _Q11;
          v1453[1] = v1456;
          v1453[2] = v1455;
          v1453[3] = v1454;
          v1453[4].f64[0] = v5.f64[0];
        }
        _Q21 = (float64x2_t)vextq_s8((int8x16_t)v1408, (int8x16_t)v1408, 8uLL);
        v1408.f64[1] = _Q21.f64[0];
        v7 = vmulq_f64(v1408, v1408);
        v1351 = v1351
              + v7.f64[0]
              + _Q21.f64[0] * _Q21.f64[0]
              + v1409.f64[0] * v1409.f64[0]
              + _Q5.f64[0] * _Q5.f64[0]
              + *(double *)v1410.i64 * *(double *)v1410.i64
              + v1411.f64[0] * v1411.f64[0]
              + *(double *)v1433.i64 * *(double *)v1433.i64
              + v1435 * v1435
              + *(double *)v1434.i64 * *(double *)v1434.i64
              + v1436 * v1436
              + *(double *)v1432.i64 * *(double *)v1432.i64
              + v8.f64[0] * v8.f64[0]
              + *(double *)v1437.i64 * *(double *)v1437.i64
              + v1438 * v1438
              + v9.f64[0] * v9.f64[0];
      }
      v1352 += 296;
    }
    while (v1353 != v1352);
    v1289 = (double *)v1558[3];
    v1290 = (double *)v1558[4];
  }
  v1457 = v1351 * 0.5;
  v1289[6] = v1457;
  *v1290 = v1457 + *v1290;
  v1458 = v888[160];
  v1459 = v1289;
  if ((_DWORD)v1458)
  {
    STACK[0x610] = (unint64_t)v1289;
    STACK[0x620] = v1265;
    STACK[0x640] = v1557 + 1888;
    STACK[0x630] = v1557 + 1840;
    v1460 = (float64x2_t *)(v888 + 154);
    v1350 = 0.0;
    do
    {
      v1468 = *(unsigned int *)(v1557 + 31244 + 4 * HIDWORD(v1460[-2].f64[0]));
      if ((_DWORD)v1468 != -1)
      {
        v1461 = v1557 + 1816;
        switch(LODWORD(v1460[-2].f64[0]))
        {
          case 3:
            break;
          case 4:
            v1461 = STACK[0x630];
            break;
          case 5:
            v1461 = v1557 + 1864;
            break;
          case 6:
            v1461 = STACK[0x640];
            break;
          default:
            v1469 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/SensorModel.h", 600, (uint64_t)"false && \"Shall not reach to an undefined type.\"", 48, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
            v1461 = v1557 + 1864;
            if (v1469)
              abort();
            return;
        }
        v20.f64[0] = *(float64_t *)(v1461 + 16);
        _Q2.f64[0] = v1460[-1].f64[1];
        v1462 = vsubq_f64(v20, _Q2);
        _Q2.f64[0] = v1460[1].f64[0];
        _Q3 = *v1460;
        v20 = vmulq_f64(v1462, _Q2);
        _Q1 = vmulq_f64(vsubq_f64(*(float64x2_t *)v1461, *(float64x2_t *)((char *)v1460 - 24)), *v1460);
        v1464 = (float64_t *)(v1266 + 8 * (197 * (_DWORD)v1468 - ((*v1554 + 3) & 0xFFFFFFFC) + 196));
        v1465.f64[0] = *v1464;
        _Q5.f64[0] = v1464[394];
        v1465.f64[1] = v1464[197];
        v1466 = vmlaq_f64(v1465, _Q3, _Q3);
        *v1464 = v1466.f64[0];
        v1464[197] = v1466.f64[1];
        *((_QWORD *)v1464 + 394) = *(_OWORD *)&vmlaq_f64(_Q5, _Q2, _Q2);
        v1467 = (float64x2_t *)(v1267 + 8 * v1468);
        _Q3.f64[0] = v1467[1].f64[0];
        v1466.f64[0] = v1460[1].f64[0];
        _Q5 = *v1460;
        *v1467 = vmlaq_f64(*v1467, _Q1, *v1460);
        *(_QWORD *)&v1467[1].f64[0] = *(_OWORD *)&vmlaq_f64(_Q3, v20, v1466);
        _Q2 = vmulq_f64(_Q1, _Q1);
        _Q3.f64[0] = _Q1.f64[1];
        __asm { FMLA            D2, D3, V1.D[1] }
        v1350 = v1350 + vmlad_n_f64(_Q2.f64[0], v20.f64[0], v20.f64[0]);
      }
      v1460 = (float64x2_t *)((char *)v1460 + 56);
      --v1458;
    }
    while (v1458);
    v1459 = (double *)v1558[3];
    v1290 = (double *)v1558[4];
    v888 = (_DWORD *)(v1557 + 31048);
    v1265 = STACK[0x620];
    v1289 = (double *)STACK[0x610];
  }
  v1289[9] = v1350 * 0.5;
  *v1290 = v1350 + *v1290;
  _Q1.f64[0] = *(float64_t *)(v1265 + 3616);
  v1459[7] = 0.0;
  v1470 = *(unsigned int *)(v1265 + 3632);
  if ((_DWORD)v1470)
  {
    v1471 = 0;
    v1472 = v1557 + 160;
    v7.f64[0] = 0.0;
    v1473.f64[0] = _Q1.f64[0];
    v1473.f64[1] = _Q1.f64[0];
    v1475.f64[0] = _Q1.f64[0];
    v1475.f64[1] = _Q1.f64[0];
    v1476 = 0.0;
    do
    {
      if (((*(_DWORD *)(v1557 + 35364 + 4 * (v1471 >> 5)) >> v1471) & 1) != 0)
      {
        v8.f64[0] = *(float64_t *)(v1472 + 16);
        v1477 = *(int8x16_t *)v1472;
        v1478 = vmulq_f64(_Q1, v8);
        v1479 = vmulq_f64(v1473, *(float64x2_t *)v1472);
        *(_QWORD *)&v1480 = vextq_s8((int8x16_t)v1479, (int8x16_t)v1479, 8uLL).u64[0];
        v1481 = *(unsigned int *)(v1557 + 31156 + 4 * v1471);
        if ((_DWORD)v1481 != -1)
        {
          v1482 = (float64_t *)(v1266 + 8 * (197 * (_DWORD)v1481 - ((*v888 + 3) & 0xFFFFFFFC) + 196));
          v1483.f64[0] = *v1482;
          _Q21.f64[0] = v1482[394];
          v1483.f64[1] = v1482[197];
          v1474.f64[1] = _Q1.f64[0] * _Q1.f64[0];
          v1474.f64[0] = _Q1.f64[0] * _Q1.f64[0];
          v1484 = vaddq_f64(v1474, v1483);
          _Q2.f64[0] = _Q1.f64[0] * _Q1.f64[0];
          *v1482 = v1484.f64[0];
          v1482[197] = v1484.f64[1];
          *((_QWORD *)v1482 + 394) = *(_OWORD *)&vaddq_f64(_Q2, _Q21);
          v1485 = (float64x2_t *)(v1267 + 8 * v1481);
          v1484.f64[0] = v1485[1].f64[0];
          v1486.f64[0] = v1479.f64[0];
          v1486.f64[1] = v1480;
          _Q21 = vmlaq_f64(*v1485, v1475, v1486);
          v7 = vmlaq_f64(v1484, _Q1, v1478);
          *v1485 = _Q21;
          v1485[1].f64[0] = v7.f64[0];
          v7.f64[0] = v1459[7];
          v1470 = *(unsigned int *)(v1265 + 3632);
        }
        v1479.f64[1] = v1480;
        v9 = vmulq_f64(v1479, v1479);
        v7.f64[0] = (v9.f64[0]
                   + _Q1.f64[0] * *(double *)vextq_s8(v1477, v1477, 8uLL).i64 * v1480
                   + _Q1.f64[0] * v8.f64[0] * v1478.f64[0])
                  * 0.5
                  + v7.f64[0];
        v1459[7] = v7.f64[0];
        v1476 = v1476 + v7.f64[0];
      }
      ++v1471;
      v1472 += 168;
    }
    while (v1471 < v1470);
  }
  else
  {
    v1476 = 0.0;
  }
  _Q1.f64[0] = *(float64_t *)(v1265 + 3624);
  v1459[8] = 0.0;
  v1487 = *(unsigned int *)(v1265 + 3640);
  if (v1487 >= 2)
  {
    v1489 = 0;
    v1490 = (float64x2_t *)(v1557 + 376);
    v1491 = v1557 + 35372;
    v1492.f64[0] = 0.0;
    v1492.f64[1] = _Q1.f64[0];
    v1497 = vaddq_f64(vmlaq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&_Q1.f64[0], _Q1.f64[0]), (float64x2_t)0, v1492), (float64x2_t)0);
    v7.f64[0] = _Q1.f64[0] * 0.0 + 0.0 + _Q1.f64[0] * 0.0;
    v1493 = (float64x2_t)vextq_s8((int8x16_t)v1497, (int8x16_t)v1497, 8uLL);
    v1494 = vmulq_f64((float64x2_t)*(unint64_t *)&_Q1.f64[0], (float64x2_t)0);
    v1498 = vaddq_f64(vmlaq_n_f64(v1494, v1492, _Q1.f64[0]), (float64x2_t)0);
    v1499 = vmlaq_n_f64(vmlaq_f64(v1494, (float64x2_t)0, v1492), (float64x2_t)0, _Q1.f64[0]);
    v9.f64[0] = _Q1.f64[0] * _Q1.f64[0] + 0.0;
    v1495 = (float64x2_t)vextq_s8((int8x16_t)v1499, (int8x16_t)v1499, 8uLL);
    v1496.f64[0] = _Q1.f64[0];
    v1496.f64[1] = _Q1.f64[0];
    v1497.f64[1] = v1493.f64[0];
    *(_QWORD *)&v1498.f64[1] = vextq_s8((int8x16_t)v1498, (int8x16_t)v1498, 8uLL).u64[0];
    v1499.f64[1] = v1495.f64[0];
    v12.f64[0] = 0.0;
    do
    {
      if (((*(_DWORD *)(v1491 + 4 * (v1489 >> 5)) >> v1489) & 1) != 0
        && ((*(_DWORD *)(v1491 + 4 * ((v1489 + 1) >> 5)) >> (v1489 + 1)) & 1) != 0)
      {
        v1493.f64[0] = v1490[1].f64[0];
        v1495.f64[0] = v1490[-10].f64[1];
        v1501 = vsubq_f64(v1493, v1495);
        v1502 = vsubq_f64(*v1490, *(float64x2_t *)((char *)v1490 - 168));
        v1493 = vmulq_f64(_Q1, v1501);
        v1503 = vmulq_f64(v1496, v1502);
        *(_QWORD *)&v1504 = vextq_s8((int8x16_t)v1503, (int8x16_t)v1503, 8uLL).u64[0];
        v1505 = *(unsigned int *)(v1557 + 31116 + 4 * v1489);
        v1506 = *(unsigned int *)(v1557 + 31120 + 4 * v1489);
        if ((_DWORD)v1505 != -1 && (_DWORD)v1506 != 0)
        {
          v1508 = 196 - ((*v888 + 3) & 0xFFFFFFFC);
          v1509 = v1508 + v1505;
          v1510 = (float64x2_t *)(v1266 + 8 * (v1508 + v1505 + 196 * (_DWORD)v1505));
          v12.f64[0] = v1510[1].f64[0];
          v13.f64[0] = v1510[99].f64[0];
          v14.f64[0] = v1510[197].f64[0];
          v1511 = vaddq_f64(v7, v12);
          v1512 = vaddq_f64(v1498, v1510[98]);
          v1513 = vaddq_f64(v7, v13);
          v1514 = vaddq_f64(v1499, v1510[196]);
          v1515 = vaddq_f64(v9, v14);
          *v1510 = vaddq_f64(v1497, *v1510);
          v1510[1].f64[0] = v1511.f64[0];
          v1510[98] = v1512;
          v1510[99].f64[0] = v1513.f64[0];
          v1510[196] = v1514;
          v1510[197].f64[0] = v1515.f64[0];
          v1516 = v1508 + v1506;
          v1517 = (float64x2_t *)(v1266 + 8 * (v1516 + 196 * v1506));
          v1511.f64[0] = v1517[1].f64[0];
          v1513.f64[0] = v1517[99].f64[0];
          v1515.f64[0] = v1517[197].f64[0];
          v1518 = vaddq_f64(v7, v1511);
          v1519 = vaddq_f64(v1498, v1517[98]);
          v1520 = vaddq_f64(v7, v1513);
          v1521 = vaddq_f64(v1499, v1517[196]);
          v1522 = vaddq_f64(v9, v1515);
          *v1517 = vaddq_f64(v1497, *v1517);
          v1517[1].f64[0] = v1518.f64[0];
          v1517[98] = v1519;
          v1517[99].f64[0] = v1520.f64[0];
          v1517[196] = v1521;
          v1517[197].f64[0] = v1522.f64[0];
          v1523 = (float64x2_t *)(v1266 + 8 * (v1509 + 196 * v1506));
          v1518.f64[0] = v1523[1].f64[0];
          v1520.f64[0] = v1523[99].f64[0];
          v1522.f64[0] = v1523[197].f64[0];
          v1524 = vsubq_f64(v1518, v7);
          v1525 = vsubq_f64(v1523[98], v1498);
          v1526 = vsubq_f64(v1520, v7);
          v1527 = vsubq_f64(v1523[196], v1499);
          v1528 = vsubq_f64(v1522, v9);
          *v1523 = vsubq_f64(*v1523, v1497);
          v1523[1].f64[0] = v1524.f64[0];
          v1523[98] = v1525;
          v1523[99].f64[0] = v1526.f64[0];
          v1523[196] = v1527;
          v1523[197].f64[0] = v1528.f64[0];
          v1529 = (float64x2_t *)(v1266 + 8 * (v1516 + 196 * v1505));
          v1524.f64[0] = v1529[1].f64[0];
          v1526.f64[0] = v1529[99].f64[0];
          v1528.f64[0] = v1529[197].f64[0];
          v1530 = vsubq_f64(*v1529, v1497);
          v1531 = vsubq_f64(v1529[98], v1498);
          v1532 = vsubq_f64(v1529[196], v1499);
          v14 = vsubq_f64(v1528, v9);
          *v1529 = v1530;
          *(_QWORD *)&v1529[1].f64[0] = *(_OWORD *)&vsubq_f64(v1524, v7);
          v1529[98] = v1531;
          *(_QWORD *)&v1529[99].f64[0] = *(_OWORD *)&vsubq_f64(v1526, v7);
          v1529[196] = v1532;
          v1529[197].f64[0] = v14.f64[0];
          v1533 = (float64x2_t *)(v1267 + 8 * v1505);
          v1530.f64[0] = v1533[1].f64[0];
          v13 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&_Q1.f64[0], v1503.f64[0]), v1492, v1504), (float64x2_t)0, v1493.f64[0]);
          v1531.f64[0] = v1503.f64[0] * 0.0 + v1504 * 0.0 + _Q1.f64[0] * v1493.f64[0];
          v1534 = vsubq_f64(v1530, v1531);
          *v1533 = vsubq_f64(*v1533, v13);
          v1533[1].f64[0] = v1534.f64[0];
          v1535 = (float64x2_t *)(v1267 + 8 * v1506);
          v1534.f64[0] = v1535[1].f64[0];
          v12 = vaddq_f64(v13, *v1535);
          *v1535 = v12;
          *(_QWORD *)&v1535[1].f64[0] = *(_OWORD *)&vaddq_f64(v1531, v1534);
          v12.f64[0] = v1459[8];
          v1487 = *(unsigned int *)(v1265 + 3640);
        }
        v1503.f64[1] = v1504;
        v1495 = vmulq_f64(v1503, v1503);
        v12.f64[0] = (v1495.f64[0]
                    + _Q1.f64[0] * *(double *)vextq_s8((int8x16_t)v1502, (int8x16_t)v1502, 8uLL).i64 * v1504
                    + _Q1.f64[0] * v1501.f64[0] * v1493.f64[0])
                   * 0.5
                   + v12.f64[0];
        v1459[8] = v12.f64[0];
        v1476 = v1476 + v12.f64[0];
      }
      v1500 = v1489 + 2;
      v1490 = (float64x2_t *)((char *)v1490 + 168);
      ++v1489;
    }
    while (v1500 < v1487);
  }
  *(double *)v1558[4] = v1476 + *(double *)v1558[4];
  v1488 = vaddq_f64(*(float64x2_t *)(v1557 + 43792), (float64x2_t)0);
  *(float64x2_t *)(v1557 + 43776) = vaddq_f64(*(float64x2_t *)(v1557 + 43776), (float64x2_t)0);
  *(float64x2_t *)(v1557 + 43792) = v1488;
}

void sub_20FCB0750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,float64x2_t *a49)
{
  float64x2_t v49;

  v49 = vaddq_f64(a49[2737], (float64x2_t)0);
  a49[2736] = vaddq_f64(a49[2736], (float64x2_t)0);
  a49[2737] = v49;
  _Unwind_Resume(a1);
}

void sub_20FCB0780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,float64x2_t *a49)
{
  float64x2_t v49;

  v49 = vaddq_f64(a49[2731], (float64x2_t)0);
  a49[2730] = vaddq_f64(a49[2730], (float64x2_t)0);
  a49[2731] = v49;
  _Unwind_Resume(a1);
}

void sub_20FCB07B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,float64x2_t *a49)
{
  float64x2_t v49;

  v49 = vaddq_f64(a49[2729], (float64x2_t)0);
  a49[2728] = vaddq_f64(a49[2728], (float64x2_t)0);
  a49[2729] = v49;
  _Unwind_Resume(a1);
}

void *sub_20FCB082C(uint64_t a1, unsigned int a2, size_t __n, void *__dst)
{
  unsigned int v5;
  BOOL v9;

  v5 = __n;
  if (*(_DWORD *)(a1 + 4) == -1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 162, (uint64_t)"read_channel != kInvalidChannel && \"DMA write request not permitted.\"", 69, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| !v5&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 163, (uint64_t)"length && \"Zero length DMA request.\"", 36, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| ((v5 | a2) & 3) != 0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h",
         164,
         (uint64_t)"offset % kDefaultGranularity == 0 && length % kDefaultGranularity == 0 && \"Misaligned DMA request.\"",
         99,
         (uint64_t)"",
         0,
         (void (*)(void **))sub_21023DDB0)
    || v5 + a2 > *(_DWORD *)a1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 165, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_26;
  }
  if ((a2 & 0x3F) != 0 || v5 > 0x80000 || (v5 & 0x3F) != 0)
  {
    if ((a2 & 7) != 0)
    {
      if (v5 <= 0x2000)
        return memcpy(__dst, (const void *)(*(_QWORD *)(a1 + 16) + a2), v5);
LABEL_24:
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 168, (uint64_t)"((offset % 64 == 0 && length % 64 == 0 && length <= 512 * 1024) || (offset % 8 == 0 && length % 8 == 0 && length <= 16384) || length <= 8192) && \"Too large DMA request.\"", 169, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))return memcpy(__dst, (const void *)(*(_QWORD *)(a1 + 16) + a2), v5);
LABEL_26:
      abort();
    }
    v9 = (v5 & 7) == 0 && v5 <= 0x4000;
    if (v5 > 0x2000 && !v9)
      goto LABEL_24;
  }
  return memcpy(__dst, (const void *)(*(_QWORD *)(a1 + 16) + a2), v5);
}

__n128 sub_20FCB09EC(__int128 *a1, __int128 *a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __int128 v17;

  if (*(_DWORD *)(a3 + 8) == -1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 188, (uint64_t)"write_channel != kInvalidChannel && \"DMA write request not permitted.\"", 70, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_10;
  }
  if (*(_DWORD *)a3 < 0x6EDA8u
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 191, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_10;
  }
  v6 = *(_QWORD *)(a3 + 16) + 453952;
  v7 = *a1;
  v8 = a1[2];
  *(_OWORD *)(v6 + 16) = a1[1];
  *(_OWORD *)(v6 + 32) = v8;
  *(_OWORD *)v6 = v7;
  v9 = a1[3];
  v10 = a1[4];
  v11 = a1[5];
  *(_QWORD *)(v6 + 96) = *((_QWORD *)a1 + 12);
  *(_OWORD *)(v6 + 64) = v10;
  *(_OWORD *)(v6 + 80) = v11;
  *(_OWORD *)(v6 + 48) = v9;
  if (*(_DWORD *)(a3 + 8) == -1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 188, (uint64_t)"write_channel != kInvalidChannel && \"DMA write request not permitted.\"", 70, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_10;
  }
  if (*(_DWORD *)a3 < 0x6EE10u
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 191, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_10:
    abort();
  }
  v12 = *(_QWORD *)(a3 + 16) + 453952;
  v13 = *a2;
  v14 = a2[1];
  *(_OWORD *)(v12 + 136) = a2[2];
  *(_OWORD *)(v12 + 120) = v14;
  *(_OWORD *)(v12 + 104) = v13;
  result = (__n128)a2[3];
  v16 = a2[4];
  v17 = a2[5];
  *(_QWORD *)(v12 + 200) = *((_QWORD *)a2 + 12);
  *(_OWORD *)(v12 + 184) = v17;
  *(_OWORD *)(v12 + 168) = v16;
  *(__n128 *)(v12 + 152) = result;
  return result;
}

void sub_20FCB0BA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,unsigned int a28,uint64_t a29,uint64_t a30,__int128 a31,__int128 a32,uint64_t a33,uint64_t a34,__int128 a35,__int128 a36,int a37)
{
  int64x2_t v37;
  _QWORD *v38;
  _DWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unsigned int v56;
  unint64_t v57;
  uint64_t v58;
  float64x2_t v59;
  char *v60;
  unint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t *v68;
  int v69;
  int v70;
  unsigned __int8 v71;
  unsigned __int8 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  float64x2_t *v80;
  unsigned int v81;
  float64x2_t *v82;
  int8x16_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  int8x16_t v89;
  float64x2_t v90;
  unint64_t v91;
  int8x16_t v92;
  int8x16_t v93;
  int8x16_t v94;
  int8x16_t v95;
  int8x16_t v96;
  int v97;
  int v98;
  unsigned __int8 v99;
  uint64_t v100;
  uint64_t v101;
  unsigned __int8 v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  unint64_t v108;
  unint64_t v109;
  __int128 v110;
  __int128 v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  int8x16_t v115;
  float64x2_t v116;
  unint64_t v117;
  int8x16_t v118;
  int8x16_t v119;
  int8x16_t v120;
  unint64_t *v121;
  unint64_t *v122;
  uint64_t v123;
  __int128 *v124;
  __int128 v125;
  __int128 v126;
  double v127;
  __int128 v128;
  __int128 v129;
  __int128 *v130;
  __int128 v131;
  __int128 v133;
  double v134;
  __int128 v135;
  __int128 v136;
  uint64_t v137;
  double v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  double v143;
  __int128 v144;
  unsigned __int8 v145;
  uint64_t v146;
  uint64_t v147;
  unsigned __int8 v148;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v158;
  float64x2_t v160;
  float64x2_t v164;
  double v166;
  float64x2_t v170;
  float64x2_t v171;
  double v174;
  double v175;
  double v176;
  double v177;
  double v178;
  int v179;
  int v180;
  uint64_t v181;
  float64x2_t v183;
  double v184;
  double v186;
  double v187;
  int v188;
  double v189;
  float64x2_t v190;
  double v191;
  float64x2_t v195;
  float64x2_t v196;
  unsigned __int8 v197;
  unsigned __int8 v198;
  float64x2_t v199;
  float64x2_t v200;
  double v201;
  uint64_t v204;
  uint64_t i;
  uint64_t v206;
  uint64_t j;
  uint64_t v208;
  uint64_t v209;
  float64x2_t v210;
  int v211;
  unsigned int v212;
  unsigned int *v213;
  double v214;
  double v215;
  unsigned int v216;
  unint64_t v217;
  unint64_t v218;
  uint64_t v219;
  __int128 v220;
  float32x2_t v221;
  float v222;
  uint64_t *v223;
  uint64_t v224;
  unsigned int v225;
  unsigned int v226;
  unint64_t *v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  float64x2_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  unsigned int v237;
  float64x2_t *v238;
  int8x16_t v239;
  float64x2_t v240;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v243;
  float64x2_t v244;
  float64x2_t v245;
  float64x2_t v246;
  int8x16_t v247;
  float64x2_t v248;
  unint64_t v249;
  int8x16_t v250;
  int8x16_t v251;
  int8x16_t v252;
  float64x2_t v253;
  float64x2_t v254;
  unsigned int v255;
  float64x2_t v256;
  float64x2_t v257;
  float64x2_t v258;
  float64x2_t v259;
  __int128 v260;
  float64x2_t v261;
  unint64_t v262;
  unint64_t v263;
  unint64_t v264;
  float64x2_t v265;
  float64x2_t v266;
  int8x16_t v267;
  float64x2_t v268;
  unint64_t v269;
  int8x16_t v270;
  int8x16_t v271;
  int8x16_t v272;
  float64x2_t v273;
  uint64_t v274;
  int64x2_t v275;
  int64x2_t v276;
  double v277;
  float64x2_t v278;
  uint64_t v279;
  float64x2_t v281;
  float64x2_t v282;
  int64x2_t v285;
  float64x2_t v287;
  __int128 v289;
  double v293;
  float64x2_t v294;
  float64x2_t v295;
  float64x2_t v296;
  float64x2_t v297;
  int8x16_t v298;
  float64x2_t v299;
  float64x2_t v300;
  float64x2_t v301;
  int64x2_t v302;
  int8x16_t v303;
  double v304;
  int8x16_t v305;
  double v309;
  double v310;
  float64x2_t v311;
  double v312;
  long double v313;
  long double v314;
  float64x2_t v315;
  float64x2_t v316;
  float64x2_t v317;
  double v318;
  float64x2_t v319;
  int8x16_t v320;
  float64x2_t v321;
  int8x16_t v322;
  int8x16_t v323;
  float64x2_t v326;
  int8x16_t v327;
  int8x16_t v333;
  float64x2_t v334;
  double v335;
  float64x2_t v338;
  double v339;
  float64x2_t v340;
  float64x2_t v341;
  float64x2_t v342;
  float64x2_t v343;
  float64x2_t v344;
  float64x2_t v345;
  float64x2_t v346;
  float64x2_t v347;
  float64x2_t v348;
  float64x2_t v349;
  float64x2_t v350;
  float64x2_t v351;
  float64x2_t v352;
  float64x2_t v353;
  float64x2_t v356;
  float64x2_t v358;
  float64x2_t v359;
  float64x2_t v360;
  float64x2_t v361;
  float64x2_t v362;
  float64x2_t v363;
  float64x2_t v364;
  float64x2_t v365;
  double v366;
  float64x2_t v367;
  double v368;
  float64x2_t v369;
  double v370;
  float64x2_t v371;
  float64x2_t v372;
  float64x2_t v373;
  float64x2_t v374;
  float64x2_t v375;
  float64x2_t v376;
  float64x2_t v377;
  float64x2_t v378;
  float64x2_t v379;
  float64x2_t v380;
  float64x2_t v381;
  float64x2_t v382;
  float64x2_t v383;
  float64x2_t v384;
  float64x2_t v385;
  float64x2_t v386;
  float64x2_t v387;
  float64x2_t v388;
  float64x2_t v389;
  float64x2_t v390;
  float64x2_t v391;
  float64x2_t v392;
  float64x2_t v393;
  float64x2_t v394;
  float64x2_t v395;
  float64x2_t v396;
  float64x2_t v397;
  float64x2_t v398;
  float64x2_t v399;
  float64x2_t v400;
  float64x2_t v401;
  float64x2_t v402;
  float64x2_t v403;
  float64x2_t v404;
  float64x2_t v405;
  float64x2_t v406;
  float64x2_t v407;
  float64x2_t v408;
  float64x2_t v409;
  float64x2_t v410;
  float64x2_t v412;
  float64x2_t v413;
  float64x2_t v414;
  float64x2_t v415;
  float64x2_t v416;
  float64x2_t v417;
  float64x2_t v418;
  float64x2_t v419;
  float64x2_t v421;
  int v423;
  __int128 v427;
  double v428;
  double v432;
  float64x2_t v433;
  float64x2_t v434;
  float64x2_t v435;
  int8x16_t v436;
  float64x2_t v437;
  float64x2_t v438;
  float64x2_t v439;
  int64x2_t v440;
  int8x16_t v441;
  double v442;
  int8x16_t v443;
  uint64_t v444;
  unsigned int *v445;
  uint64_t v446;
  uint64_t v447;
  double v448;
  double v449;
  float64x2_t *v450;
  unint64_t v451;
  float64x2_t *v452;
  float64x2_t *v453;
  double v457;
  double *v458;
  double *v459;
  uint64_t v460;
  unsigned int *v461;
  float64x2_t v462;
  float64x2_t v463;
  float64x2_t v464;
  float64x2_t v465;
  double v466;
  double v468;
  float64x2_t v469;
  float64x2_t v470;
  uint64_t v471;
  int8x16_t v472;
  float64x2_t v473;
  uint64_t v477;
  int v478;
  int v479;
  const double *v481;
  unsigned int v482;
  uint64_t v483;
  uint64_t v484;
  double v485;
  double v487;
  double v488;
  double v489;
  float64x2_t v490;
  double v493;
  float64x2_t v494;
  double v496;
  float64_t v497;
  float64x2_t v498;
  float64x2_t v499;
  float64x2_t v500;
  double v501;
  uint64_t v502;
  double v503;
  double v504;
  float64x2_t v505;
  float64x2_t v506;
  float64x2_t v508;
  double v509;
  float64x2_t v510;
  float64x2_t v511;
  float64x2_t v512;
  float64x2_t v514;
  int8x16_t v515;
  int8x16_t v516;
  float64x2_t v518;
  float64x2_t v519;
  uint64_t v530;
  const double *v531;
  uint64_t v532;
  double v533;
  float64x2_t v535;
  float64x2_t v536;
  float64x2_t v537;
  float64x2_t v538;
  float64x2_t v539;
  float64x2_t v540;
  unint64_t v541;
  unint64_t v542;
  unint64_t v543;
  unint64_t v544;
  unint64_t v545;
  unint64_t v546;
  double v547;
  double v548;
  double v549;
  float64x2_t v550;
  double v553;
  float64x2_t v554;
  float64x2_t v557;
  double v558;
  float64_t v559;
  float64x2_t v560;
  int64x2_t v561;
  float64x2_t v562;
  double v563;
  uint64_t v564;
  double *v565;
  float64x2_t *v566;
  float64x2_t v567;
  _BOOL4 v569;
  uint64_t v570;
  uint64_t v571;
  float64x2_t *v572;
  double v573;
  float64x2_t v574;
  double v575;
  uint64_t v578;
  float64x2_t *v579;
  uint64_t v580;
  double v581;
  uint64_t v582;
  float64x2_t v583;
  uint64_t v586;
  char *v587;
  uint64_t v588;
  _DWORD *v589;
  int v590;
  int vars0;
  int vars0_4;
  uint64_t vars8;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  double v597;
  unint64_t *v598;
  uint64_t v599;
  unsigned int v600;
  uint64_t v601;
  int v602;
  float64_t v603;
  _DWORD *v604;
  uint64_t v605;
  uint64_t v606;
  double v607;
  uint64_t v608;
  double v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  unint64_t v615;
  unint64_t v616;
  float64_t v617;
  __int128 v618;
  unint64_t v619;
  __int128 v620;
  unint64_t v621;
  unint64_t v622;
  __int128 v623;
  double v624;
  __int128 v625;
  __int128 v626;
  double v627;
  double v628;
  float32x2_t v629;
  double v630;
  double v631;
  float v632;
  __int128 v633;
  int v634;
  __int128 v635;
  __int128 v636;
  __int128 v637;
  __int128 v638;
  __int128 v639;
  __int128 v640;
  __int128 v641;
  __int128 v642;
  __int128 v643;
  __int128 v644;
  __int128 v645;
  __int128 v646;
  __int128 v647;
  __int128 v648;
  __int128 v649;
  float64x2x3_t v650;
  float64x2x3_t v651;

  MEMORY[0x24BDAC7A8](a1);
  STACK[0xED18] = *MEMORY[0x24BDAC8D0];
  vars8 = *v38;
  v44 = (_DWORD *)(*v38 + 31264);
  v595 = (uint64_t)v38;
  v589 = v44;
  if (*v44)
  {
    LODWORD(STACK[0x538]) = 0;
    v45 = v38[1];
    if (*(_DWORD *)(v45 + 4) == -1
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 162, (uint64_t)"read_channel != kInvalidChannel && \"DMA write request not permitted.\"", 69, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *(_DWORD *)v45 <= 0x8D48Bu&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 165, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v46 = *(unsigned int *)(*(_QWORD *)(v45 + 16) + 578696);
    STACK[0x530] = *(_QWORD *)(*(_QWORD *)(v45 + 16) + 578688);
    LODWORD(STACK[0x538]) = v46;
    _Q2.f64[1] = 0.0;
    _Q1 = vaddq_f64(*(float64x2_t *)(vars8 + 43824), (float64x2_t)0);
    _Q0 = vaddq_f64(*(float64x2_t *)(vars8 + 43808), (float64x2_t)0);
    *(float64x2_t *)(vars8 + 43808) = _Q0;
    *(float64x2_t *)(vars8 + 43824) = _Q1;
    v586 = v46;
    if ((_DWORD)v46)
    {
      v47 = 0;
      v603 = _Q0.f64[0];
      *(float64x2_t *)&STACK[0x3F0] = _Q0;
      *(float64x2_t *)&STACK[0x3D0] = _Q0;
      *(float64x2_t *)&STACK[0x400] = _Q0;
      v619 = *(_QWORD *)&_Q0.f64[0];
      *(float64x2_t *)&STACK[0x410] = _Q0;
      *(float64x2_t *)&STACK[0x3E0] = _Q0;
      *(float64_t *)&v623 = _Q0.f64[0];
      v621 = *(_QWORD *)&_Q0.f64[0];
      v625 = (__int128)_Q0;
      v597 = 0.0;
      v48 = v595;
      while (1)
      {
        v49 = *((_DWORD *)&STACK[0x530] + v47);
        if (v49)
          break;
LABEL_8:
        if (++v47 == v586)
          goto LABEL_173;
      }
      v50 = 0;
      v588 = *((unsigned int *)&STACK[0x530] + v47);
      v587 = (char *)&STACK[0x53C] + 339548 * v47 + 4;
      v48 = v595;
      v613 = v47;
      while (1)
      {
        if (v50)
          v49 = 1;
        v600 = v49;
        v51 = *(_QWORD *)(v48 + 8);
        if (*(_DWORD *)(v51 + 4) == -1
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 162, (uint64_t)"read_channel != kInvalidChannel && \"DMA write request not permitted.\"", 69, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| (v52 = &v587[169772 * v50] - (char *)&STACK[0x530], (v52 & 3) != 0)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 164, (uint64_t)"offset % kDefaultGranularity == 0 && length % kDefaultGranularity == 0 && \"Misaligned DMA request.\"", 99, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| (vars0_4 = v52 + 582852, (v52 + 582852) > *(_DWORD *)v51)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h",
               165,
               (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"",
               55,
               (uint64_t)"",
               0,
               (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        memcpy(&STACK[0x540], (const void *)(*(_QWORD *)(v51 + 16) + (v52 + 578688)), 0x1044uLL);
        _Q2.f64[1] = 0.0;
        _Q1 = vaddq_f64(*(float64x2_t *)(vars8 + 43824), (float64x2_t)0);
        _Q0 = vaddq_f64(*(float64x2_t *)(vars8 + 43808), (float64x2_t)0);
        *(float64x2_t *)(vars8 + 43808) = _Q0;
        *(float64x2_t *)(vars8 + 43824) = _Q1;
        v594 = LODWORD(STACK[0x540]);
        if ((_DWORD)v594)
          break;
LABEL_11:
        ++v50;
        v49 = v588;
        v48 = v595;
        if (v50 == v588)
          goto LABEL_8;
      }
      v53 = 0;
      v590 = v52 + 693256;
      vars0 = v600 > 1;
      if (v600 <= 1)
        v54 = 1;
      else
        v54 = v600;
      v608 = v54;
      while (1)
      {
        while (1)
        {
          v55 = *((unsigned __int16 *)&STACK[0xE70] + v53);
          if (((*(_DWORD *)((char *)&STACK[0x550] + ((v55 >> 4) & 0xFFC)) >> (v55 >> 1)) & 1) != 0)
            break;
          if (++v53 == v594)
            goto LABEL_11;
        }
        v611 = *((unsigned int *)&STACK[0x10D0] + v53);
        v599 = *((unsigned __int8 *)&STACK[0xD40] + v53);
        a28 = *((unsigned __int8 *)&STACK[0xC10] + v53);
        v596 = v53 + 1;
        v56 = *((unsigned __int16 *)&STACK[0xE70] + v53 + 1) - (_DWORD)v55;
        v57 = v56 >> 1;
        v58 = *(_QWORD *)(v595 + 8);
        sub_20FCB082C(v58, vars0_4 + 8 * v55, (8 * ((_DWORD)v57 << vars0)), &STACK[0x490]);
        sub_20FCB082C(v58, v590 + 4 * v55, (4 * ((_DWORD)v57 << vars0)), &STACK[0x428]);
        v60 = (char *)&STACK[0x428] + 4 * v57;
        v598 = &STACK[0x490] + v57;
        if (v600 <= 1)
          v61 = 0;
        else
          v61 = &STACK[0x490] + v57;
        *(_QWORD *)&a32 = v61;
        if (v600 <= 1)
          v60 = 0;
        v610 = (uint64_t)v60;
        _Q2.f64[1] = 0.0;
        _Q1 = vaddq_f64(*(float64x2_t *)(vars8 + 43824), (float64x2_t)0);
        _Q0 = vaddq_f64(*(float64x2_t *)(vars8 + 43808), (float64x2_t)0);
        *(float64x2_t *)(vars8 + 43808) = _Q0;
        *(float64x2_t *)(vars8 + 43824) = _Q1;
        v627 = 0.0;
        if (v56 >= 2)
          break;
LABEL_25:
        v597 = v597 + v627;
        v44 = v589;
        v47 = v613;
        v53 = v596;
        if (v596 == v594)
          goto LABEL_11;
      }
      v62 = *(uint64_t **)(v595 + 16);
      v63 = *v62 + 4080 * v613 + 2024 + 1016 * v50;
      v64 = (v55 >> 1);
      v65 = 0;
      v606 = (uint64_t)(v62 + 23);
      v605 = (uint64_t)(v62 + 1);
      if (v57 <= 1)
        v66 = 1;
      else
        v66 = v57;
      v601 = v66;
      v627 = 0.0;
      v67 = v608;
      *(_QWORD *)&a31 = *(_QWORD *)(v595 + 16);
      while (1)
      {
        v602 = v64;
        if (((*(_DWORD *)((char *)&STACK[0x550] + ((v64 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) >> v64) & 1) != 0)
          break;
LABEL_37:
        ++v65;
        v64 = (v602 + 1);
        if (v65 == v601)
          goto LABEL_25;
      }
      v614 = v65;
      if (v600 < 2)
        goto LABEL_50;
      v68 = &v598[v65];
      v69 = *(_DWORD *)v68 & 0x7FFFFFFF;
      v70 = *((_DWORD *)v68 + 1) & 0x7FFFFFFF;
      if (v69 >= 2139095040)
      {
        if (v70 >= 2139095040)
        {
LABEL_50:
          v73 = 0;
          v604 = (_DWORD *)(a32 + 8 * v65);
          STACK[0x3C0] = v65 + v599;
          while (1)
          {
            if (!(v73 | v65) || v73 && (*v604 & 0x7FFFFFFFu) > 0x7F7FFFFF)
              goto LABEL_52;
            v74 = *v62;
            v75 = v50;
            v76 = v73 + v50;
            v77 = *v62 + 4080 * v613 + 2024;
            v78 = v73 + v50;
            v79 = v77 + 1016 * (v73 + v50);
            v80 = (float64x2_t *)(v606
                                + 72
                                * (v76
                                 + *(_DWORD *)(v605 + 4 * v613)
                                 + STACK[0x3C0] * *((_DWORD *)v62 + 43)));
            v81 = *(_DWORD *)(v79 + 568);
            if (v81 == -1)
            {
              sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 239, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
              v99 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v99 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              if (!byte_254A6DE68 || byte_254A6DE70)
              {
                v101 = qword_254A6DE40;
                v100 = qword_254A6DE48;
                while (v101 != v100)
                {
                  (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v101)(*(_QWORD *)(v101 + 8), "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, "", 0);
                  v101 += 16;
                }
              }
              v102 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v102 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              v62 = (uint64_t *)a31;
              if (!byte_254A6DE68)
                goto LABEL_294;
              qword_254A6DE58(unk_254A6DE60, "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, "", 0);
              v74 = *(_QWORD *)a31;
              v97 = -1;
              *(_QWORD *)&v104.f64[0] = v623;
              v59 = (float64x2_t)v625;
              v105 = *(float64x2_t *)&STACK[0x410];
              v107 = *(float64x2_t *)&STACK[0x3F0];
              v106 = *(float64x2_t *)&STACK[0x400];
              v109 = v619;
              v108 = v621;
              v111 = *(_OWORD *)&STACK[0x3D0];
              v110 = *(_OWORD *)&STACK[0x3E0];
            }
            else
            {
              v82 = (float64x2_t *)(v79 + 96);
              if (v81 <= 1)
              {
                if (!v81)
                {
                  sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1728, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_294:
                  abort();
                }
                _Q0.f64[0] = *(float64_t *)(v79 + 160);
                v83 = *(int8x16_t *)v82;
                v84 = *(float64x2_t *)(v79 + 112);
                v85 = *(float64x2_t *)(v79 + 128);
                v86 = *(float64x2_t *)(v79 + 144);
                a35 = *(_OWORD *)(v79 + 264);
                _Q5.f64[1] = *(float64_t *)(v79 + 272);
                a36 = *(_OWORD *)(v79 + 280);
                v603 = *(double *)(v79 + 296);
                a37 = *(_DWORD *)(v79 + 308);
                _Q5.f64[0] = v80[4].f64[0];
                _Q7 = v80[1];
                v87 = v80[2];
                v88 = v80[3];
                v89 = (int8x16_t)vabdq_f64(*v80, *v82);
                v90 = (float64x2_t)vdupq_n_s64(0x3DDB7CDFD9D7BDBBuLL);
                v59 = (float64x2_t)vcgeq_f64(v90, (float64x2_t)vextq_s8(v89, v89, 8uLL));
                if (vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)v59, (int32x4_t)vcgeq_f64(v90, vabdq_f64(_Q7, v84))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v90, vabdq_f64(v87, v85)), (int32x4_t)vcgeq_f64(v90, vabdq_f64(v88, v86))))))) & 1 | (vabdq_f64(_Q5, _Q0).f64[0] > 1.0e-10))v91 = -1;
                else
                  v91 = 0;
                v92 = (int8x16_t)vdupq_n_s64(v91);
                *(int8x8_t *)&_Q0.f64[0] = vorr_s8(vand_s8(*(int8x8_t *)&_Q5.f64[0], (int8x8_t)v91), vand_s8(*(int8x8_t *)&_Q0.f64[0], (int8x8_t)*(_OWORD *)&vmvnq_s8(v92)));
                v625 = (__int128)_Q0;
                v93 = vbslq_s8(v92, (int8x16_t)v87, (int8x16_t)v85);
                v94 = vbslq_s8(v92, (int8x16_t)_Q7, (int8x16_t)v84);
                v95 = vbslq_s8(v92, *(int8x16_t *)v80, v83);
                v623 = (__int128)vbslq_s8(v92, (int8x16_t)v88, (int8x16_t)v86);
                *(int8x16_t *)&STACK[0x410] = v93;
                *(int8x16_t *)&STACK[0x3E0] = vextq_s8(v93, v93, 8uLL);
                *(int8x16_t *)&STACK[0x3F0] = v95;
                *(int8x16_t *)&STACK[0x400] = v94;
                v619 = vextq_s8(v94, v94, 8uLL).u64[0];
                v621 = vextq_s8((int8x16_t)v623, (int8x16_t)v623, 8uLL).u64[0];
                v96 = vextq_s8(v95, v95, 8uLL);
                *(int8x16_t *)&STACK[0x3D0] = v96;
                v97 = 1;
                v98 = 1;
                goto LABEL_77;
              }
              v59.f64[0] = *(float64_t *)(v79 + 160);
              v105 = *(float64x2_t *)(v79 + 128);
              v104 = *(float64x2_t *)(v79 + 144);
              v107 = *v82;
              v106 = *(float64x2_t *)(v79 + 112);
              v108 = vextq_s8((int8x16_t)v104, (int8x16_t)v104, 8uLL).u64[0];
              *(_QWORD *)&v110 = vextq_s8((int8x16_t)v105, (int8x16_t)v105, 8uLL).u64[0];
              v109 = vextq_s8((int8x16_t)v106, (int8x16_t)v106, 8uLL).u64[0];
              *(_QWORD *)&v111 = vextq_s8((int8x16_t)v107, (int8x16_t)v107, 8uLL).u64[0];
              a35 = *(_OWORD *)(v79 + 264);
              v103.f64[1] = *(float64_t *)(v79 + 272);
              a36 = *(_OWORD *)(v79 + 280);
              v603 = *(double *)(v79 + 296);
              a37 = *(_DWORD *)(v79 + 308);
              v97 = 2;
            }
            v98 = 0;
            v103.f64[0] = v80[4].f64[0];
            v113 = v80[2];
            v112 = v80[3];
            v114 = v80[1];
            *(_QWORD *)&v107.f64[1] = v111;
            *(_QWORD *)&v104.f64[1] = v108;
            *(_QWORD *)&v105.f64[1] = v110;
            *(_QWORD *)&v106.f64[1] = v109;
            v115 = (int8x16_t)vabdq_f64(*v80, v107);
            v116 = (float64x2_t)vdupq_n_s64(0x3DDB7CDFD9D7BDBBuLL);
            _Q7 = (float64x2_t)vcgeq_f64(v116, vabdq_f64(v112, v104));
            if (vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v116, (float64x2_t)vextq_s8(v115, v115, 8uLL)), (int32x4_t)vcgeq_f64(v116, vabdq_f64(v114, v106))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v116, vabdq_f64(v113, v105)), (int32x4_t)_Q7))))) & 1 | (vabdq_f64(v103, v59).f64[0] > 1.0e-10))v117 = -1;
            else
              v117 = 0;
            _Q5 = (float64x2_t)vdupq_n_s64(v117);
            *(int8x8_t *)&v103.f64[0] = vorr_s8(vand_s8(*(int8x8_t *)&v103.f64[0], (int8x8_t)v117), vand_s8(*(int8x8_t *)&v59.f64[0], (int8x8_t)*(_OWORD *)&vmvnq_s8((int8x16_t)_Q5)));
            v118 = vbslq_s8((int8x16_t)_Q5, (int8x16_t)v113, (int8x16_t)v105);
            v119 = vbslq_s8((int8x16_t)_Q5, (int8x16_t)v114, (int8x16_t)v106);
            v120 = vbslq_s8((int8x16_t)_Q5, *(int8x16_t *)v80, (int8x16_t)v107);
            v623 = (__int128)vbslq_s8((int8x16_t)_Q5, (int8x16_t)v112, (int8x16_t)v104);
            v625 = (__int128)v103;
            *(int8x16_t *)&STACK[0x410] = v118;
            *(int8x16_t *)&STACK[0x3E0] = vextq_s8(v118, v118, 8uLL);
            *(int8x16_t *)&STACK[0x3F0] = v120;
            *(int8x16_t *)&STACK[0x400] = v119;
            v619 = vextq_s8(v119, v119, 8uLL).u64[0];
            v621 = vextq_s8((int8x16_t)v623, (int8x16_t)v623, 8uLL).u64[0];
            v96 = vextq_s8(v120, v120, 8uLL);
            *(int8x16_t *)&STACK[0x3D0] = v96;
LABEL_77:
            v121 = &STACK[0x428];
            if (v73)
              v121 = (unint64_t *)v610;
            v65 = v614;
            v632 = *((float *)v121 + v614);
            v122 = &STACK[0x490];
            if (v73)
              v122 = (unint64_t *)a32;
            v629 = (float32x2_t)v122[v614];
            v634 = *((unsigned __int8 *)v62 + 3072);
            v123 = v74 + 32 * v611;
            v96.i64[0] = *(_QWORD *)(v123 + 21280);
            *(int8x16_t *)&STACK[0x2F0] = v96;
            v124 = (__int128 *)(v74 + 168 * STACK[0x3C0]);
            *(_QWORD *)&v125 = *((_QWORD *)v124 + 2);
            v126 = *v124;
            *(_OWORD *)&STACK[0x370] = *(__int128 *)((char *)v124 + 24);
            *(_OWORD *)&STACK[0x380] = v126;
            v127 = *((double *)v124 + 8);
            v128 = v124[3];
            v129 = v124[9];
            *(_OWORD *)&STACK[0x340] = v129;
            *(_QWORD *)&v129 = *((_QWORD *)v124 + 20);
            *(_OWORD *)&STACK[0x390] = v129;
            *(_OWORD *)&STACK[0x3A0] = v128;
            v130 = (__int128 *)(v74 + 168 * a28);
            v131 = *v130;
            _D9 = *((_QWORD *)v130 + 5);
            v133 = *(__int128 *)((char *)v130 + 24);
            *(_OWORD *)&STACK[0x2B0] = v133;
            *(_OWORD *)&STACK[0x2C0] = v131;
            v134 = *((double *)v130 + 8);
            v135 = v130[3];
            *(_QWORD *)&v133 = *((_QWORD *)v130 + 20);
            *(_OWORD *)&STACK[0x360] = v133;
            v136 = v130[9];
            *(_OWORD *)&STACK[0x2D0] = v135;
            *(_OWORD *)&STACK[0x2E0] = v136;
            v137 = v77 + 1016 * v78;
            *(_QWORD *)&v136 = *(_QWORD *)(v123 + 21272);
            v646 = v136;
            v638 = *(_OWORD *)v63;
            v640 = *(_OWORD *)(v123 + 21256);
            _D11 = *(_QWORD *)(v63 + 40);
            v636 = *(_OWORD *)(v63 + 24);
            *((_QWORD *)&v136 + 1) = *(_QWORD *)(v63 + 32);
            v139 = *(double *)(v63 + 64);
            v140 = *(_OWORD *)(v63 + 48);
            *(_QWORD *)&v136 = *(_QWORD *)(v63 + 88);
            v648 = v136;
            *((_QWORD *)&v125 + 1) = *((_QWORD *)v124 + 5);
            *(_OWORD *)&STACK[0x3B0] = v125;
            v642 = *(_OWORD *)(v63 + 72);
            v644 = v140;
            *(_QWORD *)&v125 = *(_QWORD *)(v79 + 16);
            v141 = *(_OWORD *)v79;
            v142 = *(_OWORD *)(v79 + 24);
            v143 = *(double *)(v79 + 64);
            *((_QWORD *)&v125 + 1) = *(_QWORD *)(v79 + 40);
            *(_OWORD *)&STACK[0x350] = v125;
            *(_OWORD *)&STACK[0x320] = *(_OWORD *)(v79 + 48);
            *(_OWORD *)&STACK[0x330] = v141;
            v144 = *(_OWORD *)(v137 + 72);
            *(_OWORD *)&STACK[0x2A0] = v144;
            *(_QWORD *)&v144 = *(_QWORD *)(v137 + 88);
            *(_OWORD *)&STACK[0x300] = v142;
            *(_OWORD *)&STACK[0x310] = v144;
            v50 = v75;
            v67 = v608;
            if (v97 == -1)
            {
              sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
              v145 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v145 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              if (!byte_254A6DE68 || byte_254A6DE70)
              {
                v146 = qword_254A6DE40;
                v147 = qword_254A6DE48;
                while (v146 != v147)
                {
                  (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v146)(*(_QWORD *)(v146 + 8), "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, "", 0);
                  v146 += 16;
                }
              }
              v148 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v148 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              v62 = (uint64_t *)a31;
              if (!byte_254A6DE68)
LABEL_292:
                abort();
              qword_254A6DE58(unk_254A6DE60, "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, "", 0);
            }
            _Q0 = vmulq_n_f64((float64x2_t)v640, *(double *)&STACK[0x2F0]);
            v150.f64[1] = *((float64_t *)&v636 + 1);
            v151 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v638, _Q0.f64[0]), (float64x2_t)v636, _Q0, 1);
            __asm { FMLA            D2, D11, V0.D[1] }
            *(_QWORD *)&_Q0.f64[0] = *(_OWORD *)&vmulq_f64(*(float64x2_t *)&STACK[0x2F0], (float64x2_t)v646);
            v150.f64[0] = vmlad_n_f64(_D2, v139, _Q0.f64[0]);
            _Q0 = vaddq_f64(vmlaq_n_f64(v151, (float64x2_t)v644, _Q0.f64[0]), (float64x2_t)v642);
            _Q3 = *(float64x2_t *)&STACK[0x2B0];
            v158 = vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&STACK[0x2C0], _Q0.f64[0]), *(float64x2_t *)&STACK[0x2B0], _Q0, 1);
            __asm { FMLA            D3, D9, V0.D[1] }
            *(_QWORD *)&_Q0.f64[0] = *(_OWORD *)&vaddq_f64(v150, (float64x2_t)v648);
            _Q3.f64[0] = vmlad_n_f64(_Q3.f64[0], v134, _Q0.f64[0]);
            _Q0 = vsubq_f64(vaddq_f64(*(float64x2_t *)&STACK[0x2E0], vmlaq_n_f64(v158, *(float64x2_t *)&STACK[0x2D0], _Q0.f64[0])), *(float64x2_t *)&STACK[0x340]);
            v160 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)&STACK[0x380], *(int64x2_t *)&STACK[0x370]), _Q0.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)&STACK[0x380], *(int64x2_t *)&STACK[0x370]), _Q0, 1);
            _Q4 = *(_OWORD *)&STACK[0x3A0];
            _Q2 = vmulq_f64(*(float64x2_t *)&STACK[0x3A0], _Q0);
            _Q0.f64[0] = _Q0.f64[1];
            __asm { FMLA            D2, D0, V4.D[1] }
            *(_QWORD *)&_Q0.f64[0] = *(_OWORD *)&vsubq_f64(vaddq_f64(*(float64x2_t *)&STACK[0x360], _Q3), *(float64x2_t *)&STACK[0x390]);
            _Q2.f64[0] = vmlad_n_f64(_Q2.f64[0], v127, _Q0.f64[0]);
            _Q3 = vsubq_f64(vmlaq_n_f64(v160, *(float64x2_t *)&STACK[0x3B0], _Q0.f64[0]), *(float64x2_t *)&STACK[0x2A0]);
            v164 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)&STACK[0x330], *(int64x2_t *)&STACK[0x300]), _Q3.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)&STACK[0x330], *(int64x2_t *)&STACK[0x300]), _Q3, 1);
            _Q4 = *(_OWORD *)&STACK[0x320];
            _Q1 = vmulq_f64(*(float64x2_t *)&STACK[0x320], _Q3);
            _Q3.f64[0] = _Q3.f64[1];
            __asm { FMLA            D1, D3, V4.D[1] }
            _Q2 = vsubq_f64(_Q2, *(float64x2_t *)&STACK[0x310]);
            _Q0 = vmlaq_n_f64(v164, *(float64x2_t *)&STACK[0x350], _Q2.f64[0]);
            _Q1.f64[0] = vmlad_n_f64(_Q1.f64[0], v143, _Q2.f64[0]);
            if (!v98)
            {
              _D2 = _Q0.f64[1];
              __asm { FMLA            D16, D2, V0.D[1] }
              v174 = sqrt(_D16);
              v175 = fabs(_Q1.f64[0]);
              v176 = fabs(v174);
              v177 = v175 / v176;
              if (v175 >= v176)
                v177 = v176 / v175;
              v178 = (v176 - v175) / (v175 + v176);
              if (v175 >= v176)
                v178 = -v178;
              if (v177 > 0.414213562)
                v179 = 1;
              else
                v179 = 2;
              if (v177 > 0.414213562)
                v180 = -1;
              else
                v180 = 1;
              if (v177 <= 0.414213562)
                v178 = v177;
              if (_D16 < 0.00000001)
              {
                _Q0 = vmulq_n_f64(_Q0, 1.0 / _Q1.f64[0]);
                *(float64x2_t *)&STACK[0x3B0] = _Q0;
                if (v81 == -1)
                  goto LABEL_136;
LABEL_142:
                _Q5 = *(float64x2_t *)&STACK[0x3E0];
                v199 = *(float64x2_t *)&STACK[0x3F0];
                *(_QWORD *)&v199.f64[1] = STACK[0x3D0];
                v199.f64[0] = vaddvq_f64(vmulq_f64(v199, *(float64x2_t *)&STACK[0x3B0]));
                v200 = *(float64x2_t *)&STACK[0x400];
                *(_QWORD *)&v200.f64[1] = STACK[0x3E0];
                v199.f64[1] = vmuld_lane_f64(*(double *)&STACK[0x410], *(float64x2_t *)&STACK[0x3B0], 1);
                _Q1 = vsubq_f64(vaddq_f64(v200, v199), vcvtq_f64_f32(v629));
                v201 = 1.0 / v632;
                _Q3 = vmulq_n_f64(_Q1, v201);
                _D8 = vmuld_lane_f64(v201, _Q1, 1);
                _Q2 = vmulq_f64(_Q3, _Q3);
                __asm { FMLA            D2, D8, V3.D[1] }
                if (v634 && _Q2.f64[0] >= 0.00000000999999994)
                {
                  *(float64x2_t *)&STACK[0x3A0] = _Q2;
                  *(float64x2_t *)&STACK[0x3B0] = _Q3;
                  _Q0.f64[0] = sqrt(log1p(_Q2.f64[0]) / *(double *)&STACK[0x3A0]);
                  _Q1 = vmulq_n_f64(*(float64x2_t *)&STACK[0x3B0], _Q0.f64[0]);
                  _Q0.f64[0] = _D8 * _Q0.f64[0];
                  _Q2 = vmulq_f64(_Q1, _Q1);
                  __asm { FMLA            D2, D0, V1.D[1] }
                }
                v627 = v627 + _Q2.f64[0];
                goto LABEL_52;
              }
              v181 = *(_QWORD *)&_Q1.f64[0];
              if (v175 < v176)
                v180 = -v180;
              else
                v179 = v177 > 0.414213562;
              _ZF = v174 == INFINITY && v175 == INFINITY;
              _Q7.f64[1] = 1.0;
              v183 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v178 * v178), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v178 * v178), (float64x2_t)xmmword_210315370), v178 * v178 * (v178 * v178))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v178 * v178), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v178 * v178), (float64x2_t)xmmword_210315380), v178 * v178 * (v178 * v178))),
                         v178 * v178 * (v178 * v178) * (v178 * v178 * (v178 * v178))));
              v184 = v178 + v178 * vdivq_f64(v183, (float64x2_t)vdupq_laneq_s64((int64x2_t)v183, 1)).f64[0];
              if (_ZF)
                v184 = 0.785398163;
              if (v174 == 0.0 && _Q1.f64[0] == 0.0)
                v186 = 0.0;
              else
                v186 = v184;
              if (v181 < 0)
              {
                v179 = 4 - v179;
                v180 = -v180;
              }
              if (v174 < 0.0)
                v179 = -v179;
              v187 = (double)v179;
              if (v174 >= 0.0)
                v188 = v180;
              else
                v188 = -v180;
              v189 = v187 * 3.061617e-17 + v187 * 0.785398163 + v186 * (double)v188;
              v190 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64((int64x2_t)a35, (int64x2_t)a36), vmulq_n_f64((float64x2_t)vzip2q_s64((int64x2_t)a35, (int64x2_t)a36), v189 * v189)), v189 * v189);
              _Q0 = vmulq_n_f64(_Q0, 1.0 / v174 * (v189 + v189 * (v190.f64[0] + vmuld_lane_f64(v189 * v189 * (v189 * v189), v190, 1))));
              *(float64x2_t *)&STACK[0x3B0] = _Q0;
              if (v81 != -1)
                goto LABEL_142;
LABEL_136:
              sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
              v197 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v197 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              if (!byte_254A6DE68 || byte_254A6DE70)
              {
                v204 = qword_254A6DE40;
                for (i = qword_254A6DE48; v204 != i; v204 += 16)
                  (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v204)(*(_QWORD *)(v204 + 8), "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, "", 0);
              }
              v198 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v198 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              v62 = (uint64_t *)a31;
              if (!byte_254A6DE68)
                goto LABEL_292;
              qword_254A6DE58(unk_254A6DE60, "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, "", 0);
              goto LABEL_142;
            }
            if (a37)
            {
              if (_Q1.f64[0] >= 0.00000001)
              {
                v166 = 1.0 / _Q1.f64[0];
                _Q2 = vmulq_n_f64(_Q0, v166);
                _D0 = vmuld_lane_f64(v166, _Q0, 1);
                __asm { FMLA            D1, D0, V2.D[1] }
                v170 = (float64x2_t)vdupq_laneq_s64((int64x2_t)a36, 1);
                v171.f64[1] = v170.f64[1];
                v171.f64[0] = v603;
                v170.f64[1] = v603;
                _Q0 = vaddq_f64(vaddq_f64(vmulq_laneq_f64(vmulq_n_f64(vaddq_f64(v170, v170), _Q2.f64[0]), _Q2, 1), vmulq_f64(v171, vaddq_f64((float64x2_t)vdupq_lane_s64(_D1, 0), vmulq_f64(_Q2, vaddq_f64(_Q2, _Q2))))), vmulq_n_f64(_Q2, *(double *)&_D1 * *(double *)&a35+ 1.0+ *(double *)&_D1 * vmuld_lane_f64(*(double *)&_D1, (float64x2_t)a35, 1)+ *(double *)&_D1 * (*(double *)&_D1 * (*(double *)&_D1 * *(double *)&a36))));
                *(float64x2_t *)&STACK[0x3B0] = _Q0;
                if (v81 != -1)
                  goto LABEL_142;
                goto LABEL_136;
              }
            }
            else
            {
              if (_Q1.f64[0] >= 0.00000001)
              {
                v191 = 1.0 / _Q1.f64[0];
                _Q2 = vmulq_n_f64(_Q0, v191);
                _D0 = vmuld_lane_f64(v191, _Q0, 1);
                __asm { FMLA            D1, D0, V2.D[1] }
                v195.f64[1] = *((float64_t *)&a35 + 1);
                v195.f64[0] = 1.0;
                v196 = vaddq_f64(v195, vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)a35, (int64x2_t)a36), _D1));
                _Q0 = vmulq_n_f64(_Q2, v196.f64[0] + vmuld_lane_f64(_D1 * _D1, v196, 1));
                *(float64x2_t *)&STACK[0x3B0] = _Q0;
                if (v81 != -1)
                  goto LABEL_142;
                goto LABEL_136;
              }
              a37 = 0;
            }
LABEL_52:
            if (++v73 == v67)
              goto LABEL_37;
          }
        }
      }
      else if (v70 < 2139095040)
      {
        goto LABEL_50;
      }
      sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/BatchLeastSquaresUnsanitized/include/VIO/BatchLeastSquaresUnsanitized/LinearCameraSystemRegularDepthLP.hpp", 156, (uint64_t)"!has_secondary_observations || (meas_secondary[observation_index_in_track].e().isFinite().all() == meas_secondary[observation_index_in_track].e().isFinite().any())", 163, (uint64_t)"Both coordinates in secondary observation track must be finite or not.", 70, (void (*)(void **))sub_21023DDB0);
      v71 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
      if ((v71 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
      {
        __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DE78);
      }
      if (!byte_254A6DE68 || byte_254A6DE70)
      {
        v206 = qword_254A6DE40;
        for (j = qword_254A6DE48; v206 != j; v206 += 16)
          (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v206)(*(_QWORD *)(v206 + 8), "!has_secondary_observations || (meas_secondary[observation_index_in_track].e().isFinite().all() == meas_secondary[observation_index_in_track].e().isFinite().any())", 163, "Both coordinates in secondary observation track must be finite or not.", 70);
      }
      v72 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
      if ((v72 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
      {
        __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DE78);
      }
      v65 = v614;
      if (!byte_254A6DE68)
        abort();
      qword_254A6DE58(unk_254A6DE60, "!has_secondary_observations || (meas_secondary[observation_index_in_track].e().isFinite().all() == meas_secondary[observation_index_in_track].e().isFinite().any())", 163, "Both coordinates in secondary observation track must be finite or not.", 70);
      v62 = (uint64_t *)a31;
      goto LABEL_50;
    }
    v597 = 0.0;
    v48 = v595;
LABEL_173:
    *(double *)(*(_QWORD *)(v48 + 24) + 16) = v597 * 0.5;
    **(double **)(v48 + 32) = v597 * 0.5 + **(double **)(v48 + 32);
    v208 = *(_QWORD *)(v48 + 8);
    if (*(_DWORD *)(v208 + 8) != -1)
      goto LABEL_175;
    goto LABEL_174;
  }
  *(_QWORD *)(v38[3] + 16) = 0;
  v208 = v38[1];
  if (*(_DWORD *)(v208 + 8) == -1)
  {
LABEL_174:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 188, (uint64_t)"write_channel != kInvalidChannel && \"DMA write request not permitted.\"", 70, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
  }
LABEL_175:
  if (*(_DWORD *)v208 < 0x20BCC4u
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 191, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  *(_DWORD *)(*(_QWORD *)(v208 + 16) + 2145472) = 1012;
  if (!v44[1])
    goto LABEL_227;
  STACK[0x548] = 0;
  STACK[0x540] = 0;
  LODWORD(STACK[0xE650]) = 0;
  LODWORD(STACK[0xEBF8]) = 0;
  LODWORD(STACK[0xEC00]) = 0;
  LODWORD(STACK[0xEC68]) = 0;
  v209 = *(_QWORD *)(v595 + 8);
  if (*(_DWORD *)(v209 + 4) == -1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 162, (uint64_t)"read_channel != kInvalidChannel && \"DMA write request not permitted.\"", 69, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *(_DWORD *)v209 <= 0x6EE3Fu&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 165, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  memcpy(&STACK[0x540], (const void *)(*(_QWORD *)(v209 + 16) + 394880), 0xE7C0uLL);
  _Q2.f64[1] = 0.0;
  _Q1 = vaddq_f64(*(float64x2_t *)(vars8 + 43856), (float64x2_t)0);
  _Q0 = vaddq_f64(*(float64x2_t *)(vars8 + 43840), (float64x2_t)0);
  *(float64x2_t *)(vars8 + 43840) = _Q0;
  *(float64x2_t *)(vars8 + 43856) = _Q1;
  v211 = STACK[0xE650];
  if (!LODWORD(STACK[0xE650]))
  {
LABEL_227:
    *(_QWORD *)(*(_QWORD *)(v595 + 24) + 8) = 0;
    v444 = *(_QWORD *)(v595 + 8);
    if (*(_DWORD *)(v444 + 8) == -1)
      goto LABEL_230;
    goto LABEL_231;
  }
  v212 = 0;
  v213 = (unsigned int *)((unint64_t)&STACK[0x540] | 0x10);
  v214 = *(double *)&STACK[0x540];
  v215 = *(double *)&STACK[0x548];
  do
  {
    *((_DWORD *)&STACK[0x494] + (v212 >> 5)) &= ~(1 << v212);
    ++v212;
  }
  while (v211 != v212);
  v216 = 0;
  LODWORD(STACK[0x490]) = v211;
  do
  {
    *((_DWORD *)&STACK[0x42C] + (v216 >> 5)) |= 1 << v216;
    ++v216;
  }
  while (v211 != v216);
  v217 = 0;
  v218 = 0;
  LODWORD(STACK[0x428]) = v211;
  v612 = (uint64_t)&v213[18 * v211];
  *(float64x2_t *)&STACK[0x3E0] = _Q0;
  v615 = *(_QWORD *)&_Q0.f64[0];
  *(float64x2_t *)&STACK[0x3F0] = _Q0;
  v616 = *(_QWORD *)&_Q0.f64[0];
  *(float64x2_t *)&STACK[0x400] = _Q0;
  *(float64x2_t *)&STACK[0x3D0] = _Q0;
  *(float64_t *)&v618 = _Q0.f64[0];
  v617 = _Q0.f64[0];
  v620 = (__int128)_Q0;
  v609 = _Q0.f64[0];
  v607 = 0.0;
  v219 = v595;
  do
  {
    _Q0.f64[0] = *((float64_t *)v213 + 5);
    *(float64x2_t *)&STACK[0x410] = _Q0;
    v220 = *(_OWORD *)(v213 + 6);
    *(_OWORD *)&STACK[0x3C0] = v220;
    *(_QWORD *)&v220 = *((_QWORD *)v213 + 8);
    *(_OWORD *)&STACK[0x350] = v220;
    v221 = *(float32x2_t *)(v213 + 4);
    v222 = *((float *)v213 + 3);
    v223 = *(uint64_t **)(v219 + 16);
    v225 = *v213;
    v224 = v213[1];
    v226 = v213[2];
    v227 = &STACK[0xE658] + 18 * *v213;
    v228 = *(_OWORD *)v227;
    *(_OWORD *)&STACK[0x310] = *((_OWORD *)v213 + 3);
    *(_OWORD *)&STACK[0x320] = v228;
    v229 = *((_OWORD *)v227 + 2);
    *(_OWORD *)&STACK[0x330] = *((_OWORD *)v227 + 1);
    *(_OWORD *)&STACK[0x340] = v229;
    v230 = *((_OWORD *)v227 + 4);
    *(_OWORD *)&STACK[0x360] = *((_OWORD *)v227 + 3);
    *(_OWORD *)&STACK[0x370] = v230;
    v231 = *((_OWORD *)v227 + 6);
    *(_OWORD *)&STACK[0x380] = *((_OWORD *)v227 + 5);
    *(_OWORD *)&STACK[0x390] = v231;
    v232 = *((float64x2_t *)v227 + 8);
    *(_OWORD *)&STACK[0x3A0] = *((_OWORD *)v227 + 7);
    *(float64x2_t *)&STACK[0x3B0] = v232;
    v233 = *v223;
    v234 = *v223 + 4080 * v224 + 2024;
    v235 = v234 + 1016 * v226;
    v236 = (uint64_t)&v223[9 * *((_DWORD *)v223 + v224 + 2) + 23 + 9 * v226 + 9 * *((_DWORD *)v223 + 43) * v225];
    v237 = *(_DWORD *)(v235 + 568);
    if (v237 == -1)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 239, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_299;
      }
      v233 = *v223;
      v255 = -1;
      *(_QWORD *)&v257.f64[0] = v618;
      v210 = (float64x2_t)v620;
      v259 = *(float64x2_t *)&STACK[0x3F0];
      v258 = *(float64x2_t *)&STACK[0x400];
      v260 = *(_OWORD *)&STACK[0x3D0];
      v261 = *(float64x2_t *)&STACK[0x3E0];
      v263 = v616;
      v262 = *(_QWORD *)&v617;
      v264 = v615;
      goto LABEL_200;
    }
    v238 = (float64x2_t *)(v235 + 96);
    if (v237 > 1)
    {
      v210.f64[0] = *(float64_t *)(v235 + 160);
      v258 = *(float64x2_t *)(v235 + 128);
      v257 = *(float64x2_t *)(v235 + 144);
      v261 = *v238;
      v259 = *(float64x2_t *)(v235 + 112);
      v262 = vextq_s8((int8x16_t)v257, (int8x16_t)v257, 8uLL).u64[0];
      *(_QWORD *)&v260 = vextq_s8((int8x16_t)v258, (int8x16_t)v258, 8uLL).u64[0];
      v263 = vextq_s8((int8x16_t)v259, (int8x16_t)v259, 8uLL).u64[0];
      v264 = vextq_s8((int8x16_t)v261, (int8x16_t)v261, 8uLL).u64[0];
      a31 = *(_OWORD *)(v235 + 264);
      v256.f64[1] = *(float64_t *)(v235 + 272);
      a32 = *(_OWORD *)(v235 + 280);
      v609 = *(double *)(v235 + 296);
      a28 = *(_DWORD *)(v235 + 308);
      v255 = 2;
LABEL_200:
      v256.f64[0] = *(float64_t *)(v236 + 64);
      v266 = *(float64x2_t *)(v236 + 32);
      v265 = *(float64x2_t *)(v236 + 48);
      v254 = *(float64x2_t *)(v236 + 16);
      *(_QWORD *)&v261.f64[1] = v264;
      *(_QWORD *)&v257.f64[1] = v262;
      *(_QWORD *)&v258.f64[1] = v260;
      *(_QWORD *)&v259.f64[1] = v263;
      v267 = (int8x16_t)vabdq_f64(*(float64x2_t *)v236, v261);
      v268 = (float64x2_t)vdupq_n_s64(0x3DDB7CDFD9D7BDBBuLL);
      if (vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v268, (float64x2_t)vextq_s8(v267, v267, 8uLL)), (int32x4_t)vcgeq_f64(v268, vabdq_f64(v254, v259))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v268, vabdq_f64(v266, v258)), (int32x4_t)vcgeq_f64(v268, vabdq_f64(v265, v257))))))) & 1 | (vabdq_f64(v256, v210).f64[0] > 1.0e-10))v269 = -1;
      else
        v269 = 0;
      v243 = (float64x2_t)vdupq_n_s64(v269);
      *(int8x8_t *)&v256.f64[0] = vorr_s8(vand_s8(*(int8x8_t *)&v256.f64[0], (int8x8_t)v269), vand_s8(*(int8x8_t *)&v210.f64[0], (int8x8_t)*(_OWORD *)&vmvnq_s8((int8x16_t)v243)));
      v270 = vbslq_s8((int8x16_t)v243, (int8x16_t)v266, (int8x16_t)v258);
      v271 = vbslq_s8((int8x16_t)v243, (int8x16_t)v254, (int8x16_t)v259);
      v272 = vbslq_s8((int8x16_t)v243, *(int8x16_t *)v236, (int8x16_t)v261);
      v618 = (__int128)vbslq_s8((int8x16_t)v243, (int8x16_t)v265, (int8x16_t)v257);
      v620 = (__int128)v256;
      v253 = (float64x2_t)vextq_s8((int8x16_t)v618, (int8x16_t)v618, 8uLL);
      *(int8x16_t *)&STACK[0x3F0] = v271;
      *(int8x16_t *)&STACK[0x400] = v270;
      *(int8x16_t *)&STACK[0x3D0] = vextq_s8(v270, v270, 8uLL);
      *(int8x16_t *)&STACK[0x3E0] = v272;
      v616 = vextq_s8(v271, v271, 8uLL).u64[0];
      v617 = v253.f64[0];
      v615 = vextq_s8(v272, v272, 8uLL).u64[0];
      goto LABEL_204;
    }
    if (!v237)
    {
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1728, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_299:
      abort();
    }
    v232.f64[0] = *(float64_t *)(v235 + 160);
    v239 = *(int8x16_t *)v238;
    v240 = *(float64x2_t *)(v235 + 112);
    v241 = *(float64x2_t *)(v235 + 128);
    v242 = *(float64x2_t *)(v235 + 144);
    a31 = *(_OWORD *)(v235 + 264);
    v243.f64[1] = *(float64_t *)(v235 + 272);
    a32 = *(_OWORD *)(v235 + 280);
    v609 = *(double *)(v235 + 296);
    a28 = *(_DWORD *)(v235 + 308);
    v243.f64[0] = *(float64_t *)(v236 + 64);
    v244 = *(float64x2_t *)(v236 + 16);
    v245 = *(float64x2_t *)(v236 + 32);
    v246 = *(float64x2_t *)(v236 + 48);
    v247 = (int8x16_t)vabdq_f64(*(float64x2_t *)v236, *v238);
    v248 = (float64x2_t)vdupq_n_s64(0x3DDB7CDFD9D7BDBBuLL);
    v210 = (float64x2_t)vcgeq_f64(v248, (float64x2_t)vextq_s8(v247, v247, 8uLL));
    if (vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)v210, (int32x4_t)vcgeq_f64(v248, vabdq_f64(v244, v240))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v248, vabdq_f64(v245, v241)), (int32x4_t)vcgeq_f64(v248, vabdq_f64(v246, v242))))))) & 1 | (vabdq_f64(v243, v232).f64[0] > 1.0e-10))v249 = -1;
    else
      v249 = 0;
    v250 = (int8x16_t)vdupq_n_s64(v249);
    *(int8x8_t *)&v232.f64[0] = vorr_s8(vand_s8(*(int8x8_t *)&v243.f64[0], (int8x8_t)v249), vand_s8(*(int8x8_t *)&v232.f64[0], (int8x8_t)*(_OWORD *)&vmvnq_s8(v250)));
    v620 = (__int128)v232;
    v251 = vbslq_s8(v250, (int8x16_t)v245, (int8x16_t)v241);
    v252 = vbslq_s8(v250, (int8x16_t)v244, (int8x16_t)v240);
    v253 = (float64x2_t)vbslq_s8(v250, *(int8x16_t *)v236, v239);
    v618 = (__int128)vbslq_s8(v250, (int8x16_t)v246, (int8x16_t)v242);
    v254 = (float64x2_t)vextq_s8((int8x16_t)v618, (int8x16_t)v618, 8uLL);
    *(int8x16_t *)&STACK[0x3F0] = v252;
    *(int8x16_t *)&STACK[0x400] = v251;
    *(int8x16_t *)&STACK[0x3D0] = vextq_s8(v251, v251, 8uLL);
    *(float64x2_t *)&STACK[0x3E0] = v253;
    v616 = vextq_s8(v252, v252, 8uLL).u64[0];
    v617 = v254.f64[0];
    v615 = vextq_s8((int8x16_t)v253, (int8x16_t)v253, 8uLL).u64[0];
    v255 = 1;
LABEL_204:
    v273 = *(float64x2_t *)&STACK[0x3C0];
    v274 = v233 + 168 * v225;
    v243.f64[0] = *(float64_t *)(v274 + 16);
    v275 = *(int64x2_t *)v274;
    v254.f64[0] = *(float64_t *)(v274 + 40);
    v276 = *(int64x2_t *)(v274 + 24);
    v277 = *(double *)(v274 + 64);
    _Q3 = *(float64x2_t *)(v274 + 48);
    v253.f64[0] = *(float64_t *)(v274 + 160);
    v278 = *(float64x2_t *)(v274 + 144);
    v279 = v234 + 1016 * v226;
    *(_QWORD *)&v273.f64[1] = vextq_s8((int8x16_t)v273, (int8x16_t)v273, 8uLL).u64[0];
    _Q0 = vsubq_f64(v273, v278);
    v281 = vsubq_f64(*(float64x2_t *)&STACK[0x410], v253);
    *(int64x2_t *)&STACK[0x2C0] = v276;
    *(int64x2_t *)&STACK[0x2D0] = v275;
    *(float64x2_t *)&STACK[0x2E0] = v243;
    *(float64x2_t *)&STACK[0x2F0] = v254;
    v278.f64[0] = v243.f64[0];
    v278.f64[1] = v254.f64[0];
    v282 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v275, v276), _Q0.f64[0]), (float64x2_t)vzip2q_s64(v275, v276), _Q0, 1), v278, v281.f64[0]);
    _Q6 = vmulq_f64(_Q3, _Q0);
    _Q0.f64[0] = _Q0.f64[1];
    *(float64x2_t *)&STACK[0x300] = _Q3;
    __asm { FMLA            D6, D0, V3.D[1] }
    _Q6.f64[0] = vmlad_n_f64(_Q6.f64[0], v277, v281.f64[0]);
    v278.f64[0] = *(float64_t *)(v235 + 16);
    _Q3.f64[0] = *(float64_t *)(v235 + 40);
    v285 = *(int64x2_t *)(v235 + 24);
    v254.f64[0] = *(float64_t *)(v235 + 64);
    _Q5 = *(float64x2_t *)(v235 + 48);
    v287 = *(float64x2_t *)(v279 + 72);
    v281.f64[0] = *(float64_t *)(v279 + 88);
    v635 = (__int128)_Q6;
    v637 = *(_OWORD *)v235;
    *(_QWORD *)&v281.f64[0] = *(_OWORD *)&vsubq_f64(_Q6, v281);
    *(float64x2_t *)&STACK[0x2A0] = v278;
    *(float64x2_t *)&STACK[0x2B0] = v282;
    _Q0 = vsubq_f64(v282, v287);
    v643 = (__int128)vzip1q_s64((int64x2_t)v637, v285);
    v645 = (__int128)_Q5;
    v639 = (__int128)v285;
    v641 = (__int128)vzip2q_s64((int64x2_t)v637, v285);
    v647 = (__int128)v254;
    v649 = (__int128)_Q3;
    v278.f64[1] = _Q3.f64[0];
    v633 = (__int128)v278;
    *(float64x2_t *)&STACK[0x3C0] = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v643, _Q0.f64[0]), (float64x2_t)v641, _Q0, 1), v278, v281.f64[0]);
    _Q2 = vmulq_f64(_Q5, _Q0);
    _Q0.f64[0] = _Q0.f64[1];
    __asm { FMLA            D2, D0, V5.D[1] }
    _Q2.f64[0] = vmlad_n_f64(_Q2.f64[0], v254.f64[0], v281.f64[0]);
    *(float64x2_t *)&STACK[0x410] = _Q2;
    v44 = v589;
    if (v237 == -1)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_297;
      }
    }
    else if (v255 <= 1)
    {
      if (a28)
      {
        v289 = *(_OWORD *)&STACK[0x410];
        if (*(double *)&STACK[0x410] < 0.00000001)
          goto LABEL_188;
        _Q0 = vmulq_n_f64(*(float64x2_t *)&STACK[0x3C0], 1.0 / *(double *)&v289);
        _D5 = vmuld_lane_f64(1.0 / *(double *)&v289, *(float64x2_t *)&STACK[0x3C0], 1);
        __asm { FMLA            D6, D5, V0.D[1] }
        v293 = *(double *)&_D6 * *(double *)&a31
             + 1.0
             + *(double *)&_D6 * *(double *)&_D6 * (*((double *)&a31 + 1) + *(double *)&_D6 * *(double *)&a32);
        v294 = vmulq_n_f64((float64x2_t)xmmword_2103B8490, v609);
        v295 = vmulq_n_f64(_Q0, *(double *)&a31+ *(double *)&a31+ *(double *)&_D6 * (vmuld_lane_f64(4.0, (float64x2_t)a31, 1) + 6.0 * *(double *)&a32 * *(double *)&_D6));
        v296 = vmulq_n_f64(v295, _Q0.f64[0]);
        v297 = vmulq_n_f64(v295, _D5);
        v298 = (int8x16_t)vmulq_n_f64(_Q0, *((double *)&a32 + 1) + *((double *)&a32 + 1));
        v299.f64[1] = *((float64_t *)&a32 + 1);
        v299.f64[0] = v609;
        v300 = vaddq_f64((float64x2_t)vextq_s8(v298, v298, 8uLL), vmulq_f64(v294, _Q0));
        v296.f64[0] = v293 + v296.f64[0];
        *(_QWORD *)&v294.f64[0] = vdupq_laneq_s64((int64x2_t)v294, 1).u64[0];
        v294.f64[1] = vmuld_lane_f64(6.0, (float64x2_t)a32, 1);
        v301 = vmulq_f64(v294, _Q0);
        v626 = (__int128)vmlaq_n_f64(vaddq_f64(vmulq_laneq_f64((float64x2_t)vzip1q_s64((int64x2_t)v298, (int64x2_t)v301), _Q0, 1), vmulq_f64(v299, vaddq_f64((float64x2_t)vdupq_lane_s64(_D6, 0), vmulq_f64(_Q0, vaddq_f64(_Q0, _Q0))))), _Q0, v293);
        v297.f64[1] = v293 + v297.f64[1];
        v302 = (int64x2_t)vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(vdupq_laneq_s64((int64x2_t)v300, 1), (int64x2_t)vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v301, 1), v301)), v297), 1.0 / *(double *)&v289);
        v303 = (int8x16_t)vmulq_n_f64(vaddq_f64(v300, v296), 1.0 / *(double *)&v289);
        v622 = vextq_s8(v303, v303, 8uLL).u64[0];
        v624 = *(double *)v303.i64;
        v304 = -(vmuld_n_f64(*(double *)v303.i64, _Q0.f64[0]) + *(double *)&v303.i64[1] * _Q0.f64[1]);
        v303.i64[1] = v302.i64[1];
        *(double *)v303.i64 = v304;
        *(_QWORD *)&v297.f64[0] = vdupq_laneq_s64(v302, 1).u64[0];
        v305 = (int8x16_t)vzip1q_s64((int64x2_t)v303, v302);
        v297.f64[1] = -(vmuld_n_f64(*(double *)v302.i64, _Q0.f64[0]) + *(double *)&v302.i64[1] * _Q0.f64[1]);
        *(int8x16_t *)&STACK[0x3C0] = vextq_s8((int8x16_t)v297, (int8x16_t)v297, 8uLL);
        *(int8x16_t *)&STACK[0x410] = v305;
        *(_QWORD *)&v628 = vextq_s8(v305, v305, 8uLL).u64[0];
        v630 = v297.f64[0];
      }
      else
      {
        v427 = *(_OWORD *)&STACK[0x410];
        if (*(double *)&STACK[0x410] < 0.00000001)
          goto LABEL_188;
        v428 = 1.0 / *(double *)&v427;
        _Q1 = vmulq_n_f64(*(float64x2_t *)&STACK[0x3C0], 1.0 / *(double *)&v427);
        _D3 = vmuld_lane_f64(v428, *(float64x2_t *)&STACK[0x3C0], 1);
        __asm { FMLA            D4, D3, V1.D[1] }
        v432 = _D4 * *(double *)&a31 + 1.0 + _D4 * _D4 * (*((double *)&a31 + 1) + _D4 * *(double *)&a32);
        v433 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v432, 0);
        v434 = vmulq_n_f64(_Q1, v432);
        v435 = vmulq_n_f64(_Q1, *(double *)&a31+ *(double *)&a31+ _D4 * (vmuld_lane_f64(4.0, (float64x2_t)a31, 1) + 6.0 * *(double *)&a32 * _D4));
        v436 = (int8x16_t)vmulq_n_f64(v435, _Q1.f64[0]);
        v437 = vmulq_n_f64(v435, _D3);
        *(_QWORD *)&v438.f64[0] = v436.i64[0];
        v438.f64[1] = v437.f64[1];
        v439 = vaddq_f64(v433, v438);
        v433.f64[0] = v439.f64[0];
        *(_QWORD *)&v433.f64[1] = v436.i64[1];
        v439.f64[0] = v437.f64[0];
        v440 = (int64x2_t)vmulq_n_f64(v439, v428);
        v441 = (int8x16_t)vmulq_n_f64(v433, v428);
        v622 = vextq_s8(v441, v441, 8uLL).u64[0];
        v624 = *(double *)v441.i64;
        v626 = (__int128)v434;
        v442 = -(vmuld_n_f64(*(double *)v441.i64, _Q1.f64[0]) + *(double *)&v441.i64[1] * _Q1.f64[1]);
        v441.i64[1] = v440.i64[1];
        *(double *)v441.i64 = v442;
        v436.i64[0] = vdupq_laneq_s64(v440, 1).u64[0];
        v443 = (int8x16_t)vzip1q_s64((int64x2_t)v441, v440);
        *(double *)&v436.i64[1] = -(vmuld_n_f64(*(double *)v440.i64, _Q1.f64[0]) + *(double *)&v440.i64[1] * _Q1.f64[1]);
        *(int8x16_t *)&STACK[0x3C0] = vextq_s8(v436, v436, 8uLL);
        *(int8x16_t *)&STACK[0x410] = v443;
        *(_QWORD *)&v628 = vextq_s8(v443, v443, 8uLL).u64[0];
        v630 = *(double *)v436.i64;
      }
      goto LABEL_215;
    }
    _Q6 = *(float64x2_t *)&STACK[0x3C0];
    _D0 = STACK[0x3C8];
    __asm { FMLA            D2, D0, V6.D[1] }
    if (_D2 >= 0.00000001)
    {
      v312 = *(double *)&STACK[0x410] * *(double *)&STACK[0x410] + _D2;
      v313 = sqrt(_D2);
      v631 = _D2;
      v314 = atan2(v313, *(long double *)&STACK[0x410]);
      v315 = (float64x2_t)vzip2q_s64((int64x2_t)a31, (int64x2_t)a32);
      v316 = (float64x2_t)vzip1q_s64((int64x2_t)a31, (int64x2_t)a32);
      v317 = vmulq_n_f64(vaddq_f64(vmulq_f64(v316, (float64x2_t)xmmword_210312E10), vmulq_n_f64(vmulq_f64(v315, (float64x2_t)xmmword_210312E20), v314 * v314)), v314 * v314);
      v318 = v314 * v314 * (v314 * v314);
      _Q6 = *(float64x2_t *)&STACK[0x3C0];
      v319 = vmulq_n_f64(vaddq_f64(v316, vmulq_n_f64(v315, v314 * v314)), v314 * v314);
      v309 = (v314 + v314 * (v319.f64[0] + vmuld_lane_f64(v318, v319, 1))) / v313;
      v319.f64[0] = (v317.f64[0] + vmuld_lane_f64(v318, v317, 1) + 1.0) / v312;
      v311 = vmulq_n_f64(*(float64x2_t *)&STACK[0x3C0], (*(double *)&STACK[0x410] * v319.f64[0] - v309) / v631);
      v310 = -v319.f64[0];
      _Q3 = (float64x2_t)vextq_s8((int8x16_t)v311, (int8x16_t)v311, 8uLL);
    }
    else
    {
      v309 = 1.0 / *(double *)&STACK[0x410];
      v310 = -(v309 * v309);
      v311.f64[0] = 0.0;
      _Q3.f64[0] = 0.0;
    }
    v311.f64[1] = _Q3.f64[0];
    v320 = (int8x16_t)vmulq_n_f64(v311, _Q6.f64[0]);
    _Q3.f64[0] = v310 * _Q6.f64[0];
    *(float64x2_t *)&STACK[0x410] = _Q3;
    v321 = vmulq_laneq_f64(v311, _Q6, 1);
    v322 = (int8x16_t)vdupq_lane_s64(COERCE__INT64(v310 * *(double *)vextq_s8((int8x16_t)_Q6, (int8x16_t)_Q6, 8uLL).i64), 0);
    *(double *)v320.i64 = v309 + *(double *)v320.i64;
    v626 = (__int128)vmulq_n_f64(_Q6, v309);
    v628 = v321.f64[0];
    v622 = vextq_s8(v320, v320, 8uLL).u64[0];
    v624 = *(double *)v320.i64;
    *(double *)v322.i64 = v309 + v321.f64[1];
    v630 = v309 + v321.f64[1];
    *(int8x16_t *)&STACK[0x3C0] = vextq_s8(v322, v322, 8uLL);
    if (v237 == -1
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
LABEL_297:
      abort();
    }
LABEL_215:
    v323 = (int8x16_t)vmlsq_laneq_f64(vmulq_n_f64((float64x2_t)v641, *(double *)&v635), (float64x2_t)v633, *(float64x2_t *)&STACK[0x2B0], 1);
    _V26.D[1] = *((_QWORD *)&v645 + 1);
    _Q0 = (float64x2_t)vextq_s8((int8x16_t)v645, *(int8x16_t *)&STACK[0x2A0], 8uLL);
    v326 = vmulq_f64(_Q0, (float64x2_t)v635);
    v327 = (int8x16_t)vmlsq_lane_f64(vmulq_n_f64((float64x2_t)vextq_s8((int8x16_t)_Q0, (int8x16_t)v649, 8uLL), *(double *)&STACK[0x2B0]), (float64x2_t)v643, *(double *)&v635, 0);
    _V3.D[1] = *((_QWORD *)&v637 + 1);
    _V18.D[1] = *((_QWORD *)&v639 + 1);
    _Q4 = *(_OWORD *)&STACK[0x2F0];
    __asm
    {
      FMLA            D0, D4, V3.D[1]
      FMLA            D3, D4, V18.D[1]
      FMLA            D5, D4, V26.D[1]
    }
    v333 = (int8x16_t)vmlsq_lane_f64(vmulq_laneq_f64((float64x2_t)v643, *(float64x2_t *)&STACK[0x2B0], 1), (float64x2_t)v641, *(double *)&STACK[0x2B0], 0);
    v334 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&STACK[0x2D0], *(double *)&v637), *(float64x2_t *)&STACK[0x2C0], (float64x2_t)v637, 1), *(float64x2_t *)&STACK[0x300], *(double *)&STACK[0x2A0]);
    v335 = _Q0.f64[0] + v277 * *(double *)&STACK[0x2A0];
    _Q19 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&STACK[0x2D0], *(double *)&v639), *(float64x2_t *)&STACK[0x2C0], (float64x2_t)v639, 1), *(float64x2_t *)&STACK[0x300], *(double *)&v649);
    _D22 = _D3 + v277 * *(double *)&v649;
    v338 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&STACK[0x2D0], *(double *)&v645), *(float64x2_t *)&STACK[0x2C0], (float64x2_t)v645, 1), *(float64x2_t *)&STACK[0x300], *(double *)&v647);
    v339 = _D5 + v277 * *(double *)&v647;
    v340 = *(float64x2_t *)&STACK[0x3F0];
    *(_QWORD *)&v341.f64[0] = STACK[0x3E0];
    *(_QWORD *)&v341.f64[1] = STACK[0x400];
    *(_QWORD *)&v340.f64[1] = STACK[0x3D0];
    v342.f64[0] = v628;
    v343 = vmlaq_f64(v340, v341, (float64x2_t)v626);
    v344.f64[0] = 0.0;
    *(_QWORD *)&v344.f64[1] = STACK[0x400];
    v345.f64[0] = v624;
    *(_QWORD *)&v345.f64[1] = v622;
    v346 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)STACK[0x3E0], v624), v344, v628);
    v347 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)STACK[0x3E0], *(double *)&v622), v344, v630);
    v348 = vmlaq_n_f64(vmulq_n_f64(v346, *(double *)v323.i64), v347, *(double *)vextq_s8(v323, v323, 8uLL).i64);
    v349 = vmlaq_n_f64(vmulq_n_f64(v346, *(double *)v327.i64), v347, *(double *)vextq_s8(v327, v327, 8uLL).i64);
    v350 = vmlaq_n_f64(vmulq_n_f64(v346, *(double *)v333.i64), v347, *(double *)vextq_s8(v333, v333, 8uLL).i64);
    v351 = vmlaq_n_f64(vmulq_n_f64(v346, v334.f64[0]), v347, _Q19.f64[0]);
    v352 = vmlaq_laneq_f64(vmulq_laneq_f64(v346, v334, 1), v347, _Q19, 1);
    v353 = vmlaq_n_f64(vmulq_n_f64(v346, v335), v347, _D22);
    v342.f64[1] = v630;
    _Q27 = vmlaq_f64(vmulq_n_f64(v345, *(double *)&STACK[0x3E0]), (float64x2_t)0, v342);
    _Q26 = vmlaq_n_f64(vmulq_f64(v345, (float64x2_t)0), v342, *(double *)&STACK[0x400]);
    v356 = vmlaq_laneq_f64(vmulq_n_f64(v334, _Q27.f64[0]), _Q19, _Q27, 1);
    __asm { FMLA            D29, D22, V27.D[1] }
    v358 = vmlaq_laneq_f64(vmulq_n_f64(v334, _Q26.f64[0]), _Q19, _Q26, 1);
    __asm { FMLA            D19, D22, V26.D[1] }
    v359 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)STACK[0x3E0], *(double *)&STACK[0x410]), v344, *(double *)&STACK[0x3C0]);
    v360 = vmlaq_n_f64(v348, v359, vmlsq_laneq_f64(v326, (float64x2_t)v647, *(float64x2_t *)&STACK[0x2B0], 1).f64[0]);
    v361 = vmlaq_n_f64(v349, v359, vmlsq_f64(vmulq_n_f64(*(float64x2_t *)&STACK[0x2B0], *(double *)&v647), (float64x2_t)v645, (float64x2_t)v635).f64[0]);
    v362 = vmlaq_n_f64(v350, v359, vmlsq_laneq_f64(vmulq_laneq_f64((float64x2_t)v645, *(float64x2_t *)&STACK[0x2B0], 1), *(float64x2_t *)&STACK[0x2B0], (float64x2_t)v645, 1).f64[0]);
    v363 = vmlaq_n_f64(v351, v359, v338.f64[0]);
    v364 = vmlaq_laneq_f64(v352, v359, v338, 1);
    v365 = vmlaq_n_f64(v353, v359, v339);
    v326.f64[0] = *(double *)&STACK[0x410] * *(double *)&STACK[0x3E0] + *(double *)&STACK[0x3C0] * 0.0;
    v366 = *(double *)&STACK[0x410] * 0.0 + *(double *)&STACK[0x3C0] * *(double *)&STACK[0x400];
    v367 = vmlaq_n_f64(v356, v338, v326.f64[0]);
    v368 = _D29 + v339 * v326.f64[0];
    v369 = vmlaq_n_f64(v358, v338, v366);
    v370 = _Q19.f64[0] + v339 * v366;
    _Q19.f64[0] = COERCE_FLOAT(HIDWORD(STACK[0x310]));
    v359.f64[0] = COERCE_FLOAT(HIDWORD(*(_OWORD *)&STACK[0x310]));
    v338.f64[0] = COERCE_FLOAT(*(_OWORD *)&STACK[0x350]);
    v371 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v363, COERCE_FLOAT(*(_OWORD *)&STACK[0x310])), v364, _Q19.f64[0]), v365, v359.f64[0]);
    v372 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v363, _Q19.f64[0]), v364, COERCE_FLOAT(STACK[0x318])), v365, v338.f64[0]);
    v373 = vmlaq_laneq_f64(vmulq_n_f64(v371, v367.f64[0]), v372, v367, 1);
    v374 = vmlaq_laneq_f64(vmulq_n_f64(v371, v369.f64[0]), v372, v369, 1);
    v375 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v363, v359.f64[0]), v364, v338.f64[0]), v365, COERCE_FLOAT(HIDWORD(STACK[0x350])));
    v376 = vmlaq_n_f64(v373, v375, v368);
    v377 = vcvt_hight_f64_f32(*(float32x4_t *)&STACK[0x320]);
    v378 = vcvtq_f64_f32((float32x2_t)STACK[0x320]);
    v379 = vmlaq_n_f64(v374, v375, v370);
    v380 = vcvt_hight_f64_f32(*(float32x4_t *)&STACK[0x330]);
    v381 = vcvtq_f64_f32((float32x2_t)STACK[0x330]);
    v382.f64[0] = v376.f64[0];
    v382.f64[1] = v379.f64[1];
    v383 = vcvt_hight_f64_f32(*(float32x4_t *)&STACK[0x340]);
    v384 = vcvtq_f64_f32((float32x2_t)STACK[0x340]);
    v385 = vaddq_f64((float64x2_t)vdupq_lane_s64(COERCE__INT64(v222 * v222), 0), v382);
    v386 = vcvtq_f64_f32((float32x2_t)STACK[0x360]);
    v387 = vcvt_hight_f64_f32(*(float32x4_t *)&STACK[0x370]);
    v388 = vmlsq_laneq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v360, v378.f64[0]), v361, v378, 1), v362, v377.f64[0]), v363, v377, 1), v364, v381.f64[0], 0), v365, v381, 1);
    v389 = vmlaq_laneq_f64(vmulq_n_f64(v360, v380.f64[0]), v361, v380, 1);
    v390 = vcvtq_f64_f32((float32x2_t)STACK[0x390]);
    v391 = vcvt_hight_f64_f32(*(float32x4_t *)&STACK[0x3A0]);
    v392 = vmlsq_laneq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmlaq_n_f64(v389, v362, v384.f64[0]), v363, v384, 1), v364, v383.f64[0], 0), v365, v383, 1);
    v393 = vmlaq_laneq_f64(vmulq_n_f64(v360, v386.f64[0]), v361, v386, 1);
    v394 = vmlaq_laneq_f64(vmulq_n_f64(v360, v387.f64[0]), v361, v387, 1);
    v395 = vmlaq_laneq_f64(vmulq_n_f64(v360, v390.f64[0]), v361, v390, 1);
    v396 = vmlaq_laneq_f64(vmulq_n_f64(v360, v391.f64[0]), v361, v391, 1);
    v397 = vmlaq_n_f64(vmulq_n_f64(v388, v360.f64[0]), v392, v361.f64[0]);
    v398 = vmlaq_laneq_f64(vmulq_laneq_f64(v388, v360, 1), v392, v361, 1);
    v361.f64[0] = vmuld_lane_f64(v385.f64[0], v385, 1) - vmuld_lane_f64(v376.f64[1], v376, 1);
    v399 = vcvt_hight_f64_f32(*(float32x4_t *)&STACK[0x360]);
    v400 = vmlsq_laneq_f64(vmlaq_n_f64(v393, v362, v399.f64[0]), v363, v399, 1);
    v401 = vcvtq_f64_f32((float32x2_t)STACK[0x370]);
    v402 = vmlsq_laneq_f64(vmlsq_lane_f64(v400, v364, v401.f64[0], 0), v365, v401, 1);
    v403 = vcvtq_f64_f32((float32x2_t)STACK[0x380]);
    v404 = vmlsq_laneq_f64(vmlaq_n_f64(v394, v362, v403.f64[0]), v363, v403, 1);
    v405 = vcvt_hight_f64_f32(*(float32x4_t *)&STACK[0x380]);
    v210 = vmlsq_laneq_f64(vmlsq_lane_f64(v404, v364, v405.f64[0], 0), v365, v405, 1);
    v406 = vcvt_hight_f64_f32(*(float32x4_t *)&STACK[0x390]);
    v407 = vmlsq_laneq_f64(vmlaq_n_f64(v395, v362, v406.f64[0]), v363, v406, 1);
    v408 = vcvtq_f64_f32((float32x2_t)STACK[0x3B0]);
    v409 = vmlsq_laneq_f64(vmlaq_n_f64(v396, v362, v408.f64[0]), v363, v408, 1);
    v410 = vmlsq_lane_f64(vmlaq_n_f64(v397, v402, v362.f64[0]), v210, v363.f64[0], 0);
    _Q3 = vmlsq_laneq_f64(vmlaq_laneq_f64(v398, v402, v362, 1), v210, v363, 1);
    v363.f64[0] = sqrt(v361.f64[0]);
    v362.f64[0] = v385.f64[1] + v363.f64[0];
    v388.f64[0] = -v376.f64[1];
    v362.f64[1] = -v376.f64[1];
    v388.f64[1] = v385.f64[0] + v363.f64[0];
    v412 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(sqrt(v361.f64[0] * (vaddvq_f64(v385) + v363.f64[0] + v363.f64[0]))), 0);
    v413 = vsubq_f64(v343, vcvtq_f64_f32(v221));
    _Q0 = vmlaq_laneq_f64(vmulq_n_f64(vdivq_f64(v362, v412), v413.f64[0]), vdivq_f64(v388, v412), v413, 1);
    v414 = vcvtq_f64_f32((float32x2_t)STACK[0x3A0]);
    v415 = vmlsq_laneq_f64(vmlsq_lane_f64(v407, v364, v414.f64[0], 0), v365, v414, 1);
    v416 = vcvt_hight_f64_f32(*(float32x4_t *)&STACK[0x3B0]);
    v417 = vmlsq_laneq_f64(vmlsq_lane_f64(v409, v364, v416.f64[0], 0), v365, v416, 1);
    v418 = vmlsq_lane_f64(vmlsq_lane_f64(v410, v415, v364.f64[0], 0), v417, v365.f64[0], 0);
    v419 = vaddq_f64(vmlsq_laneq_f64(vmlsq_laneq_f64(_Q3, v415, v364, 1), v417, v365, 1), v385);
    v385.f64[1] = v376.f64[1];
    _Q2 = vaddq_f64(v418, v385);
    v419.f64[0] = vmuld_lane_f64(_Q2.f64[0], v419, 1) - vmuld_lane_f64(_Q2.f64[1], _Q2, 1);
    v376.f64[0] = sqrt(v419.f64[0]);
    v416.f64[0] = v419.f64[1] + v376.f64[0];
    _Q3.f64[0] = -_Q2.f64[1];
    v416.f64[1] = -_Q2.f64[1];
    _Q3.f64[1] = _Q2.f64[0] + v376.f64[0];
    v421 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(sqrt(v419.f64[0] * (_Q2.f64[0] + v419.f64[1] + v376.f64[0] + v376.f64[0]))), 0);
    _Q3.f64[0] = vmlaq_laneq_f64(vmulq_n_f64(vdivq_f64(v416, v421), *(double *)&v413), vdivq_f64(_Q3, v421), v413, 1).f64[1];
    __asm { FMLA            D2, D3, V1.D[1] }
    _Q3.f64[0] = _Q0.f64[1];
    __asm { FMLA            D1, D3, V0.D[1] }
    v423 = _D1 > v215;
    if (_Q2.f64[0] > v214)
      v423 = 1;
    if (v423 == 1)
      _Q0 = vmulq_n_f64(_Q0, sqrt(v215 / _D1));
    _D1 = _Q0.f64[1];
    if ((*(_QWORD *)&_Q0.f64[0] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(_QWORD *)&_Q0.f64[1] & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
LABEL_188:
      *(_DWORD *)((char *)&STACK[0x42C] + ((v218 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) ^= 1 << v218;
      goto LABEL_189;
    }
    __asm { FMLA            D2, D1, V0.D[1] }
    *(_DWORD *)((char *)&STACK[0x494] + ((v217 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) = *(_DWORD *)((_BYTE *)&STACK[0x494]
                                                                                          + ((v217 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) & ~(1 << v217) | (v423 << v217);
    v607 = v607 + _D2;
LABEL_189:
    v217 = (v217 + 1);
    v218 = (v218 + 1);
    v213 += 18;
    v219 = v595;
  }
  while (v213 != (unsigned int *)v612);
  *(double *)(*(_QWORD *)(v595 + 24) + 8) = v607 * 0.5;
  **(double **)(v595 + 32) = v607 * 0.5 + **(double **)(v595 + 32);
  sub_20FCB09EC((__int128 *)&STACK[0x490], (__int128 *)&STACK[0x428], *(_QWORD *)(v595 + 8));
  _Q2.f64[1] = 0.0;
  _Q1 = vaddq_f64(*(float64x2_t *)(vars8 + 43856), (float64x2_t)0);
  _Q0 = vaddq_f64(*(float64x2_t *)(vars8 + 43840), (float64x2_t)0);
  *(float64x2_t *)(vars8 + 43840) = _Q0;
  *(float64x2_t *)(vars8 + 43856) = _Q1;
  v444 = *(_QWORD *)(v595 + 8);
  if (*(_DWORD *)(v444 + 8) == -1)
  {
LABEL_230:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 188, (uint64_t)"write_channel != kInvalidChannel && \"DMA write request not permitted.\"", 70, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
  }
LABEL_231:
  if (*(_DWORD *)v444 < 0x20BCC4u
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 191, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v445 = (unsigned int *)(vars8 + 32376);
  v446 = vars8 + 31632;
  *(_DWORD *)(*(_QWORD *)(v444 + 16) + 2145472) = 1013;
  v447 = v44[90];
  v448 = 0.0;
  v449 = 0.0;
  if ((_DWORD)v447)
  {
    v450 = (float64x2_t *)(v44 + 10);
    do
    {
      if (*(_DWORD *)(vars8 + 31228 + 4 * LODWORD(v450->f64[1])) != -1)
      {
        v451 = *(_QWORD *)(v595 + 40) + ((unint64_t)LODWORD(v450->f64[0]) << 6);
        v452 = (float64x2_t *)(v451 + 18376);
        v453 = (float64x2_t *)(v451 + 18344);
        if (HIDWORD(v450->f64[0]))
          v453 = v452;
        _Q5 = v450[4];
        _Q1 = vmulq_f64(vsubq_f64(v453[1], v450[2]), _Q5);
        _Q5.f64[0] = vmulq_f64(vsubq_f64(*v453, v450[16]), v450[48]).f64[1];
        __asm { FMLA            D4, D5, V3.D[1] }
        _D3 = _Q1.f64[1];
        __asm { FMLA            D4, D3, V1.D[1] }
        v449 = v449 + _D4;
      }
      v450 += 5;
      --v447;
    }
    while (v447);
  }
  v457 = v449 * 0.5;
  v458 = *(double **)(v595 + 24);
  v458[3] = v457;
  v459 = *(double **)(v595 + 32);
  *v459 = v457 + *v459;
  v460 = *(unsigned int *)(vars8 + 32368);
  if ((_DWORD)v460)
  {
    v461 = (unsigned int *)(vars8 + 31728);
    v448 = 0.0;
    do
    {
      v477 = 4 * v461[2];
      v478 = *(_DWORD *)(vars8 + 31196 + v477);
      v479 = *(_DWORD *)(vars8 + 31212 + v477);
      if (v478 != -1 || v479 != -1)
      {
        v481 = (const double *)(v461 + 4);
        v650 = vld3q_f64(v481);
        v482 = v461[1];
        v483 = *(_QWORD *)(v595 + 40) + 4080 * *v461 + 2024;
        v484 = v483 + 1016 * v482;
        v485 = *((double *)v461 + 10);
        _Q21 = *((_OWORD *)v461 + 4);
        v487 = *(double *)(v484 + 16);
        v488 = *(double *)(v484 + 40);
        _Q17 = *(float64x2_t *)(v484 + 24);
        v489 = *(double *)(v484 + 64);
        v490 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v650.val[0], *(double *)v484), v650.val[1], *(float64x2_t *)v484, 1), v650.val[2], v487);
        _D6 = *(_QWORD *)(v484 + 8);
        __asm { FMLA            D24, D6, V21.D[1] }
        v493 = _D24 + v485 * v487;
        v494 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v650.val[0], _Q17.f64[0]), v650.val[1], _Q17, 1), v650.val[2], v488);
        _Q17.f64[0] = *(float64_t *)(v484 + 32);
        __asm { FMLA            D24, D17, V21.D[1] }
        _Q17.f64[0] = _D24 + v485 * v488;
        v463 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v650.val[0], *(double *)(v484 + 48)), v650.val[1], *(float64x2_t *)(v484 + 48), 1), v650.val[2], v489);
        v650.val[1].f64[0] = *(float64_t *)(v484 + 56);
        __asm { FMLA            D18, D19, V21.D[1] }
        v496 = v650.val[0].f64[0] + v485 * v489;
        if (v496 >= 0.0)
        {
          if (v490.f64[0] >= -v494.f64[1])
          {
            v462 = (float64x2_t)vzip1q_s64((int64x2_t)_Q17, (int64x2_t)v463);
            *(_QWORD *)&v463.f64[0] = vdupq_laneq_s64((int64x2_t)v463, 1).u64[0];
            v463.f64[1] = v493;
            v464 = vsubq_f64(v462, v463);
            *(_QWORD *)&v465.f64[0] = *(_OWORD *)&vsubq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v490, 1), v494);
            v466 = v496 + 1.0 + v490.f64[0] + v494.f64[1];
            _Q17.f64[0] = v466;
          }
          else
          {
            v464.f64[0] = v463.f64[0] + v493;
            v464.f64[1] = _Q17.f64[0] + v463.f64[1];
            _Q17.f64[0] = v496 + 1.0 - (v490.f64[0] + v494.f64[1]);
            v465.f64[0] = _Q17.f64[0];
            *(_QWORD *)&v466 = *(_OWORD *)&vsubq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v490, 1), v494);
          }
        }
        else if (v490.f64[0] <= v494.f64[1])
        {
          v499.f64[1] = _Q17.f64[0];
          v499.f64[0] = 1.0 - v496;
          v500.f64[1] = v463.f64[1];
          v500.f64[0] = v494.f64[1] - v490.f64[0];
          _Q17 = vaddq_f64(v499, v500);
          v465.f64[0] = _Q17.f64[1];
          v464 = (float64x2_t)vzip1q_s64((int64x2_t)vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v490, 1), v494), (int64x2_t)_Q17);
          v466 = v463.f64[0] - v493;
        }
        else
        {
          v497 = v490.f64[0] - v494.f64[1];
          v490.f64[0] = 1.0 - v496;
          v498 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v494.f64[0], 0);
          v498.f64[0] = v497;
          v464 = vaddq_f64(v490, v498);
          v465.f64[0] = v463.f64[0] + v493;
          v466 = _Q17.f64[0] - v463.f64[1];
          _Q17.f64[0] = v464.f64[0];
        }
        v465.f64[1] = v466;
        v468 = 0.5 / sqrt(_Q17.f64[0]);
        v469 = vmulq_n_f64(v465, v468);
        v470 = vmulq_n_f64(v464, v468);
        v471 = v483 + 1016 * v482;
        v464.f64[0] = *(float64_t *)(v471 + 88);
        v463.f64[0] = *((float64_t *)v461 + 13);
        v472 = (int8x16_t)vsubq_f64(*(float64x2_t *)(v471 + 72), *(float64x2_t *)(v461 + 22));
        v473 = (float64x2_t)vzip1q_s64((int64x2_t)vaddq_f64(v469, v469), (int64x2_t)v472);
        _Q6 = vmulq_f64((float64x2_t)vextq_s8(v472, (int8x16_t)vsubq_f64(v464, v463), 8uLL), *((float64x2_t *)v461 + 9));
        _Q5 = vmulq_f64(v473, *((float64x2_t *)v461 + 8));
        _Q4 = vmulq_f64(vaddq_f64(v470, v470), *((float64x2_t *)v461 + 7));
        _Q7 = vmulq_f64(_Q4, _Q4);
        _D16 = _Q4.f64[1];
        __asm { FMLA            D7, D16, V4.D[1] }
        _Q4.f64[0] = _Q5.f64[1];
        __asm { FMLA            D7, D4, V5.D[1] }
        _Q4.f64[0] = _Q6.f64[1];
        __asm { FMLA            D7, D4, V6.D[1] }
        v448 = v448 + _Q7.f64[0];
      }
      v461 += 40;
      --v460;
    }
    while (v460);
  }
  v501 = v448 * 0.5;
  v458[5] = v501;
  *v459 = v501 + *v459;
  v502 = *(unsigned int *)(vars8 + 35336);
  v503 = 0.0;
  v504 = 0.0;
  if ((_DWORD)v502)
  {
    do
    {
      v530 = *v445;
      if (*(_DWORD *)(vars8 + 31076 + 4 * v530) != -1)
      {
        v531 = (const double *)(v445 + 2);
        v651 = vld3q_f64(v531);
        v532 = *(_QWORD *)(v595 + 40) + 168 * v530;
        v533 = *((double *)v445 + 9);
        _Q28 = *(float64x2_t *)(v445 + 14);
        v535 = *((float64x2_t *)v445 + 9);
        v536 = *((float64x2_t *)v445 + 10);
        v537 = *((float64x2_t *)v445 + 7);
        v538 = *((float64x2_t *)v445 + 8);
        v540 = *((float64x2_t *)v445 + 5);
        v539 = *((float64x2_t *)v445 + 6);
        v541 = vextq_s8((int8x16_t)v536, (int8x16_t)v536, 8uLL).u64[0];
        v542 = vextq_s8((int8x16_t)v535, (int8x16_t)v535, 8uLL).u64[0];
        v543 = vextq_s8((int8x16_t)v538, (int8x16_t)v538, 8uLL).u64[0];
        v544 = vextq_s8((int8x16_t)v537, (int8x16_t)v537, 8uLL).u64[0];
        v545 = vextq_s8((int8x16_t)v539, (int8x16_t)v539, 8uLL).u64[0];
        v546 = vextq_s8((int8x16_t)v540, (int8x16_t)v540, 8uLL).u64[0];
        v547 = *(double *)(v532 + 16);
        v548 = *(double *)(v532 + 40);
        v549 = *(double *)(v532 + 64);
        v550 = *(float64x2_t *)(v532 + 48);
        v508 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v651.val[0], *(double *)v532), v651.val[1], *(float64x2_t *)v532, 1), v651.val[2], v547);
        _D30 = *(_QWORD *)(v532 + 8);
        __asm { FMLA            D31, D30, V28.D[1] }
        v553 = _D31 + v533 * v547;
        v554 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v651.val[0], *(double *)(v532 + 24)), v651.val[1], *(float64x2_t *)(v532 + 24), 1), v651.val[2], v548);
        _D10 = *(_QWORD *)(v532 + 32);
        __asm { FMLA            D30, D10, V28.D[1] }
        *(double *)v37.i64 = _D30 + v533 * v548;
        v557 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v651.val[0], v550.f64[0]), v651.val[1], v550, 1), v651.val[2], v549);
        _Q25 = vmulq_f64(_Q28, v550);
        v651.val[1].f64[0] = *(float64_t *)(v532 + 56);
        __asm { FMLA            D25, D26, V28.D[1] }
        v558 = _Q25.f64[0] + v533 * v549;
        if (v558 >= 0.0)
        {
          if (v508.f64[0] >= -v554.f64[1])
          {
            *(_QWORD *)&v505.f64[0] = vdupq_laneq_s64((int64x2_t)v557, 1).u64[0];
            v505.f64[1] = v553;
            v506 = vsubq_f64((float64x2_t)vzip1q_s64(v37, (int64x2_t)v557), v505);
            _Q25 = vsubq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v508, 1), v554);
            v508.f64[0] = v558 + 1.0 + v508.f64[0] + v554.f64[1];
          }
          else
          {
            v506.f64[0] = v557.f64[0] + v553;
            _Q25.f64[0] = v558 + 1.0 - (v508.f64[0] + v554.f64[1]);
            v506.f64[1] = *(double *)v37.i64 + v557.f64[1];
            v508.f64[0] = _Q25.f64[0];
          }
        }
        else if (v508.f64[0] <= v554.f64[1])
        {
          v561 = (int64x2_t)vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v508, 1), v554);
          *(_QWORD *)&v562.f64[1] = v37.i64[0];
          v562.f64[0] = 1.0 - v558;
          v557.f64[0] = v554.f64[1] - v508.f64[0];
          v508 = vaddq_f64(v562, v557);
          v506 = (float64x2_t)vzip1q_s64(v561, (int64x2_t)v508);
          _Q25 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v508, 1);
        }
        else
        {
          v559 = v508.f64[0] - v554.f64[1];
          v508.f64[0] = 1.0 - v558;
          v560 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v554.f64[0], 0);
          v560.f64[0] = v559;
          v506 = vaddq_f64(v508, v560);
          _Q25.f64[0] = v557.f64[0] + v553;
          v508.f64[0] = v506.f64[0];
        }
        v509 = 0.5 / sqrt(v508.f64[0]);
        v510 = vmulq_n_f64(_Q25, v509);
        v511 = vmulq_n_f64(v506, v509);
        *(_QWORD *)&v512.f64[0] = *(_OWORD *)&vaddq_f64(v510, v510);
        *(_QWORD *)&v536.f64[1] = v541;
        *(_QWORD *)&v538.f64[1] = v543;
        *(_QWORD *)&v540.f64[1] = v546;
        _Q17 = (int8x16_t)vsubq_f64(*(float64x2_t *)(v532 + 72), v540);
        *(_QWORD *)&v535.f64[1] = v542;
        *(_QWORD *)&v539.f64[1] = v545;
        v514 = vsubq_f64(*(float64x2_t *)(v532 + 136), v535);
        v515 = (int8x16_t)vsubq_f64(*(float64x2_t *)(v532 + 88), v539);
        *(_QWORD *)&v537.f64[1] = v544;
        v516 = (int8x16_t)vsubq_f64(*(float64x2_t *)(v532 + 104), v537);
        _Q6 = (float64x2_t)vextq_s8(v515, v516, 8uLL);
        v518 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v516, 1);
        v512.f64[1] = v514.f64[1];
        v519 = (float64x2_t)vdupq_lane_s64(_Q17.i64[0], 0);
        v519.f64[0] = v518.f64[0];
        v518.f64[0] = *((float64_t *)v445 + 36);
        _Q5 = vmulq_f64((float64x2_t)vextq_s8(_Q17, v515, 8uLL), *((float64x2_t *)v445 + 16));
        *(_QWORD *)&v518.f64[0] = *(_OWORD *)&vmulq_f64(v514, v518);
        _Q4 = vmulq_f64(vsubq_f64(*(float64x2_t *)(v532 + 120), v538), *((float64x2_t *)v445 + 17));
        _Q7 = vmulq_f64(vsubq_f64(*(float64x2_t *)(v532 + 152), v536), *((float64x2_t *)v445 + 13));
        _D20 = vmulq_f64(vaddq_f64(v511, v511), *(float64x2_t *)(v445 + 176)).f64[1];
        __asm { FMLA            D19, D20, V17.D[1] }
        _Q17.i64[0] = *(_QWORD *)&vmulq_f64(v512, *(float64x2_t *)(v445 + 192)).f64[1];
        __asm { FMLA            D19, D17, V16.D[1] }
        _D16 = _Q7.f64[1];
        __asm { FMLA            D19, D16, V7.D[1] }
        _Q7.f64[0] = vmulq_f64(_Q6, *(float64x2_t *)(v445 + 224)).f64[1];
        __asm { FMLA            D19, D7, V6.D[1] }
        _Q6.f64[0] = vmulq_f64(v519, *(float64x2_t *)(v445 + 240)).f64[1];
        __asm { FMLA            D19, D6, V18.D[1] }
        _Q6.f64[0] = _Q5.f64[1];
        __asm { FMLA            D19, D6, V5.D[1] }
        _Q5.f64[0] = _Q4.f64[1];
        __asm { FMLA            D19, D5, V4.D[1] }
        v504 = v504 + vmlad_n_f64(_D19, v518.f64[0], v518.f64[0]);
      }
      v445 += 74;
      --v502;
    }
    while (v502);
  }
  v563 = v504 * 0.5;
  v458[6] = v563;
  *v459 = v563 + *v459;
  v564 = *(unsigned int *)(vars8 + 31688);
  v565 = v458;
  if ((_DWORD)v564)
  {
    STACK[0x410] = (unint64_t)v458;
    v503 = 0.0;
    do
    {
      if (*(_DWORD *)(vars8 + 31244 + 4 * *(unsigned int *)(v446 + 4)) != -1)
      {
        v566 = (float64x2_t *)(vars8 + 1816);
        switch(*(_DWORD *)v446)
        {
          case 3:
            break;
          case 4:
            v566 = (float64x2_t *)(vars8 + 1840);
            break;
          case 5:
            v566 = (float64x2_t *)(vars8 + 1864);
            break;
          case 6:
            v566 = (float64x2_t *)(vars8 + 1888);
            break;
          default:
            v569 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/SensorModel.h", 600, (uint64_t)"false && \"Shall not reach to an undefined type.\"", 48, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
            v566 = (float64x2_t *)(vars8 + 1864);
            if (v569)
              abort();
            return;
        }
        _Q0.f64[0] = v566[1].f64[0];
        _Q2.f64[0] = *(float64_t *)(v446 + 24);
        v567 = vsubq_f64(_Q0, _Q2);
        _Q2.f64[0] = *(float64_t *)(v446 + 48);
        _Q0 = vmulq_f64(v567, _Q2);
        _Q1 = vmulq_f64(vsubq_f64(*v566, *(float64x2_t *)(v446 + 8)), *(float64x2_t *)(v446 + 32));
        _Q2 = vmulq_f64(_Q1, _Q1);
        _D3 = _Q1.f64[1];
        __asm { FMLA            D2, D3, V1.D[1] }
        v503 = v503 + vmlad_n_f64(_Q2.f64[0], _Q0.f64[0], _Q0.f64[0]);
      }
      v446 += 56;
      --v564;
    }
    while (v564);
    v565 = *(double **)(v595 + 24);
    v459 = *(double **)(v595 + 32);
    v458 = (double *)STACK[0x410];
  }
  v458[9] = v503 * 0.5;
  *v459 = v503 + *v459;
  _Q1.f64[0] = *(float64_t *)(vars8 + 35344);
  v565[7] = 0.0;
  v570 = *(unsigned int *)(vars8 + 35360);
  if ((_DWORD)v570)
  {
    v571 = 0;
    v572 = (float64x2_t *)(vars8 + 160);
    v573 = 0.0;
    v574.f64[0] = _Q1.f64[0];
    v574.f64[1] = _Q1.f64[0];
    v575 = 0.0;
    do
    {
      if (((*(_DWORD *)(vars8 + 35364 + 4 * (v571 >> 5)) >> v571) & 1) != 0)
      {
        _Q5.f64[0] = v572[1].f64[0];
        _Q5 = vmulq_f64(_Q1, _Q5);
        _Q6 = vmulq_f64(v574, *v572);
        _Q7 = vmulq_f64(_Q6, _Q6);
        _D16 = _Q6.f64[1];
        __asm { FMLA            D7, D16, V6.D[1] }
        v575 = v575 + vmlad_n_f64(_Q7.f64[0], _Q5.f64[0], _Q5.f64[0]) * 0.5;
        v565[7] = v575;
        v573 = v573 + v575;
      }
      ++v571;
      v572 = (float64x2_t *)((char *)v572 + 168);
    }
    while (v570 != v571);
  }
  else
  {
    v573 = 0.0;
  }
  _Q1.f64[0] = *(float64_t *)(vars8 + 35352);
  v565[8] = 0.0;
  v578 = *(unsigned int *)(vars8 + 35368);
  if (v578 >= 2)
  {
    v579 = (float64x2_t *)(vars8 + 376);
    v580 = vars8 + 35372;
    v581 = 0.0;
    v582 = 1;
    v583.f64[0] = _Q1.f64[0];
    v583.f64[1] = _Q1.f64[0];
    do
    {
      if (((*(_DWORD *)(v580 + 4 * ((v582 - 1) >> 5)) >> (v582 - 1)) & 1) != 0
        && ((*(_DWORD *)(v580 + 4 * (v582 >> 5)) >> v582) & 1) != 0)
      {
        _Q5.f64[0] = v579[1].f64[0];
        _Q7.f64[0] = v579[-10].f64[1];
        _Q5 = vmulq_f64(_Q1, vsubq_f64(_Q5, _Q7));
        _Q6 = vmulq_f64(v583, vsubq_f64(*v579, *(float64x2_t *)((char *)v579 - 168)));
        _Q7 = vmulq_f64(_Q6, _Q6);
        _D16 = _Q6.f64[1];
        __asm { FMLA            D7, D16, V6.D[1] }
        v581 = v581 + vmlad_n_f64(_Q7.f64[0], _Q5.f64[0], _Q5.f64[0]) * 0.5;
        v565[8] = v581;
        v573 = v573 + v581;
      }
      ++v582;
      v579 = (float64x2_t *)((char *)v579 + 168);
    }
    while (v578 != v582);
  }
  *v459 = v573 + *v459;
}

void *sub_20FCB3AF8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  int64x2_t v3;
  uint64_t v4;
  float64x2_t *v5;
  float64x2_t *v6;
  float64x2_t v7;
  uint64_t v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t *v23;
  char *v44;
  float64x2_t v45;
  uint64_t v46;
  void *result;
  float64x2_t v48;
  uint64_t v49;
  double *f64;
  double v51;
  uint64_t v52;
  double v53;
  double v54;
  float64x2_t *v55;
  char v56;
  uint64_t v57;

  MEMORY[0x24BDAC7A8](a1);
  v2 = v1;
  STACK[0x180F8] = *MEMORY[0x24BDAC8D0];
  LODWORD(STACK[0x1860]) = 0;
  LODWORD(STACK[0x1B68]) = 0;
  LODWORD(STACK[0xF630]) = 0;
  v3 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)&STACK[0xF648] = v3;
  LOWORD(STACK[0xF640]) = 0;
  LOWORD(STACK[0x105A0]) = 0;
  *(int64x2_t *)&STACK[0x105A8] = v3;
  LOWORD(STACK[0x11500]) = 0;
  *(int64x2_t *)&STACK[0x11508] = v3;
  LOWORD(STACK[0x12460]) = 0;
  *(int64x2_t *)&STACK[0x12468] = v3;
  LOWORD(STACK[0x133C0]) = 0;
  *(int64x2_t *)&STACK[0x133C8] = v3;
  LOWORD(STACK[0x14320]) = 0;
  *(int64x2_t *)&STACK[0x14328] = v3;
  LOWORD(STACK[0x15280]) = 0;
  *(int64x2_t *)&STACK[0x15288] = v3;
  LOWORD(STACK[0x161E0]) = 0;
  *(int64x2_t *)&STACK[0x161E8] = v3;
  LOWORD(STACK[0x17140]) = 0;
  *(int64x2_t *)&STACK[0x17148] = v3;
  v4 = *v1;
  v5 = (float64x2_t *)v1[1];
  if (*(_DWORD *)(*v1 + 4) == -1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 162, (uint64_t)"read_channel != kInvalidChannel && \"DMA write request not permitted.\"", 69, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *(_DWORD *)v4 < 0x857C0u&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 165, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v6 = v5 + 1955;
  memcpy(&STACK[0x1740], (const void *)(*(_QWORD *)(v4 + 16) + 454208), 0x16980uLL);
  v7 = vaddq_f64(v5[2741], (float64x2_t)0);
  v5[2740] = vaddq_f64(v5[2740], (float64x2_t)0);
  v55 = v5;
  v5[2741] = v7;
  v8 = v2[2];
  v9 = *(_OWORD *)(v8 + 1704);
  *(_OWORD *)&STACK[0x1610] = *(_OWORD *)(v8 + 1688);
  *(_OWORD *)&STACK[0x1620] = v9;
  *(_OWORD *)&STACK[0x1630] = *(_OWORD *)(v8 + 1720);
  STACK[0x1640] = *(_QWORD *)(v8 + 1736);
  STACK[0x1648] = *(_QWORD *)(v8 + 1744);
  *(_OWORD *)&STACK[0x1650] = *(_OWORD *)(v8 + 1752);
  v10 = *(_QWORD *)(v8 + 1792);
  STACK[0x1660] = *(_QWORD *)(v8 + 1768);
  STACK[0x1678] = v10;
  *(_OWORD *)&STACK[0x1668] = *(_OWORD *)(v8 + 1776);
  *(_OWORD *)&STACK[0x1680] = *(_OWORD *)(v8 + 1800);
  v11 = *(_QWORD *)(v8 + 1816);
  *(_OWORD *)&STACK[0x1698] = *(_OWORD *)(v8 + 1824);
  v12 = *(_QWORD *)(v8 + 1840);
  STACK[0x1690] = v11;
  STACK[0x16A8] = v12;
  v13 = *(_OWORD *)(v8 + 1896);
  *(_OWORD *)&STACK[0x16D0] = *(_OWORD *)(v8 + 1880);
  *(_OWORD *)&STACK[0x16E0] = v13;
  v14 = *(_QWORD *)(v8 + 1912);
  v15 = *(_OWORD *)(v8 + 1864);
  *(_OWORD *)&STACK[0x16B0] = *(_OWORD *)(v8 + 1848);
  *(_OWORD *)&STACK[0x16C0] = v15;
  v16 = *(_OWORD *)(v8 + 1968);
  *(_OWORD *)&STACK[0x1718] = *(_OWORD *)(v8 + 1952);
  *(_OWORD *)&STACK[0x1728] = v16;
  *(_OWORD *)&STACK[0x16F8] = *(_OWORD *)(v8 + 1920);
  v17 = *(_QWORD *)(v8 + 1984);
  STACK[0x16F0] = v14;
  STACK[0x1738] = v17;
  *(_OWORD *)&STACK[0x1708] = *(_OWORD *)(v8 + 1936);
  LODWORD(STACK[0x1608]) = 0;
  v18 = LODWORD(STACK[0x1860]);
  if ((_DWORD)v18)
  {
    v19 = 0;
    v56 = 0;
    v20 = 0.0;
    v21 = 92512;
    v22 = &STACK[0xF640];
    v23 = &STACK[0x1740] + 4 * v18;
    do
    {
      if (LOBYTE(v6->f64[0]))
        v22[1] = 0x7FF8000000000000;
      v44 = (char *)&STACK[0x1740] + v19;
      if ((sub_20FA196E4(v2[3], *(unsigned int *)((char *)&STACK[0x1740] + v19), *(unsigned int *)((char *)&STACK[0x1740] + v19 + 4), *(unsigned int *)((char *)&STACK[0x1740] + v19 + 8), *((unsigned __int8 *)&STACK[0x1740] + v19 + 12), (uint64_t)&STACK[0x1868], (uint64_t)v22, (uint64_t)&STACK[0x1610], (uint64_t)&v57) & 1) != 0)
      {
        _X8 = v22 + 996;
        *((_BYTE *)&STACK[0x1740] + v21) = 1;
        __asm { PRFM            #0, [X8] }
        _Q7 = *((_OWORD *)v22 + 6);
        _D17 = v22[13];
        __asm { FMLA            D16, D17, V7.D[1] }
        *(_QWORD *)&_Q7 = v22[15];
        __asm { FMLA            D16, D7, V6.D[1] }
        _D6 = v22[17];
        __asm { FMLA            D16, D6, V5.D[1] }
        _D5 = v22[19];
        __asm { FMLA            D16, D5, V4.D[1] }
        _D4 = v22[21];
        __asm { FMLA            D16, D4, V3.D[1] }
        _D3 = v22[23];
        __asm { FMLA            D16, D3, V2.D[1] }
        _D2 = v22[25];
        __asm { FMLA            D16, D2, V1.D[1] }
        v20 = v20 + _D16 + *((double *)v22 + 26) * *((double *)v22 + 26);
      }
      else
      {
        *((_BYTE *)&STACK[0x1740] + v21) = 0;
        v56 = 1;
      }
      v22 += 492;
      ++v21;
      v19 += 32;
    }
    while (v44 + 32 != (char *)v23);
  }
  else
  {
    v56 = 0;
    v20 = 0.0;
  }
  *(double *)v2[4] = v20 * 0.5;
  *(double *)v2[5] = v20 * 0.5 + *(double *)v2[5];
  v45 = vaddq_f64(v55[2747], (float64x2_t)0);
  v55[2746] = vaddq_f64(v55[2746], (float64x2_t)0);
  v55[2747] = v45;
  LOBYTE(v6->f64[0]) = v56 & 1;
  v46 = *v2;
  if (*(_DWORD *)(*v2 + 8) == -1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 188, (uint64_t)"write_channel != kInvalidChannel && \"DMA write request not permitted.\"", 70, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *(_DWORD *)v46 < 0x857C0u&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 191, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  result = memcpy((void *)(*(_QWORD *)(v46 + 16) + 511296), &STACK[0xF640], 0x8A80uLL);
  v48 = vaddq_f64(v55[2741], (float64x2_t)0);
  v55[2740] = vaddq_f64(v55[2740], (float64x2_t)0);
  v55[2741] = v48;
  v49 = LODWORD(v6[27].f64[1]);
  if ((_DWORD)v49)
  {
    f64 = v55[1982].f64;
    v51 = 0.0;
    do
    {
      v52 = *((unsigned int *)f64 - 4);
      if (*((_DWORD *)v55[1953].f64 + v52) != -1)
      {
        v53 = *f64 * (*(double *)(v2[2] + 8 * v52 + 1992) - *(f64 - 1));
        v51 = v51 + v53 * v53;
      }
      f64 += 3;
      --v49;
    }
    while (v49);
  }
  else
  {
    v51 = 0.0;
  }
  v54 = v51 * 0.5;
  *(double *)(v2[4] + 32) = v54;
  *(double *)v2[5] = v54 + *(double *)v2[5];
  return result;
}

void sub_20FCB40B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, float64x2_t *a12)
{
  float64x2_t v12;

  v12 = vaddq_f64(a12[2747], (float64x2_t)0);
  a12[2746] = vaddq_f64(a12[2746], (float64x2_t)0);
  a12[2747] = v12;
  _Unwind_Resume(a1);
}

float64x2_t sub_20FCB40D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  float64x2_t *v3;
  uint64_t v4;
  float64x2_t v5;
  float64x2_t v6;
  double v7;
  double v8;
  double v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t result;
  uint64_t v13;

  MEMORY[0x24BDAC7A8](a1);
  v2 = v1;
  STACK[0x7CF8] = *MEMORY[0x24BDAC8D0];
  v3 = *(float64x2_t **)v1;
  v4 = *(_QWORD *)(v1 + 8);
  if (*(_DWORD *)(v4 + 4) == -1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 162, (uint64_t)"read_channel != kInvalidChannel && \"DMA write request not permitted.\"", 69, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *(_DWORD *)v4 <= 0x8D47Fu&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 165, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  memcpy(&v13, (const void *)(*(_QWORD *)(v4 + 16) + 546752), 0x7CC0uLL);
  v5 = vaddq_f64(v3[2741], (float64x2_t)0);
  v6 = vaddq_f64(v3[2740], (float64x2_t)0);
  v3[2740] = v6;
  v3[2741] = v5;
  **(double **)(v2 + 16) = sub_20FA29F20((uint64_t)v3, (unsigned int *)&v13, *(_QWORD *)(v2 + 24), v6.f64[0], v5.f64[0], 0.0, v7, v8, v9, v10)+ **(double **)(v2 + 16);
  v11 = vaddq_f64(v3[2749], (float64x2_t)0);
  result = vaddq_f64(v3[2748], (float64x2_t)0);
  v3[2748] = result;
  v3[2749] = v11;
  return result;
}

void sub_20FCB425C(_Unwind_Exception *a1)
{
  float64x2_t *v1;
  float64x2_t v2;

  v2 = vaddq_f64(v1[1], (float64x2_t)0);
  *v1 = vaddq_f64(*v1, (float64x2_t)0);
  v1[1] = v2;
  _Unwind_Resume(a1);
}

void sub_20FCB4274(_Unwind_Exception *a1)
{
  float64x2_t *v1;
  float64x2_t v2;

  v2 = vaddq_f64(v1[1], (float64x2_t)0);
  *v1 = vaddq_f64(*v1, (float64x2_t)0);
  v1[1] = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_20FCB428C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  float64x2_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  uint64_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  float64x2_t v20;
  uint64_t v21;
  unsigned __int16 *v22;
  unsigned int v23;
  unsigned __int16 *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, const char *, ...);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v38;
  unsigned __int8 v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  unsigned __int8 v42;
  unsigned __int8 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, const char *, ...);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  uint64_t v56;
  uint64_t v57;
  float64x2_t *v58;
  uint64_t v59;
  _DWORD *v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  _DWORD __dst[1041];
  uint64_t v66;
  int v67;
  _DWORD v68[3];

  MEMORY[0x24BDAC7A8](a1);
  v59 = v1;
  v3 = v2;
  v5 = v4;
  result = kdebug_trace();
  ++*(_DWORD *)(v5 + 363816);
  if (*(_DWORD *)(v3 + 4) == -1
    && (result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 162, (uint64_t)"read_channel != kInvalidChannel && \"DMA write request not permitted.\"", 69, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0), (result & 1) != 0)|| *(_DWORD *)v3 < 0x8D48Cu&& (result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 165, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0), (_DWORD)result))
  {
LABEL_108:
    abort();
  }
  v7 = *(unsigned int *)(*(_QWORD *)(v3 + 16) + 578696);
  v66 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 578688);
  v67 = v7;
  v8 = vaddq_f64(*(float64x2_t *)(v5 + 43824), (float64x2_t)0);
  *(float64x2_t *)(v5 + 43808) = vaddq_f64(*(float64x2_t *)(v5 + 43808), (float64x2_t)0);
  v58 = (float64x2_t *)v5;
  *(float64x2_t *)(v5 + 43824) = v8;
  v56 = v7;
  if ((_DWORD)v7)
  {
    v9 = 0;
    v10 = 0;
    v63 = v3;
    while (1)
    {
      v61 = *((unsigned int *)&v66 + v9);
      v57 = v9;
      if ((_DWORD)v61)
        break;
LABEL_7:
      v9 = v57 + 1;
      if (v57 + 1 == v56)
        return result;
    }
    v11 = 0;
    v60 = &v68[84887 * v9 + 1];
    while (1)
    {
      if (*(_DWORD *)(v3 + 4) == -1)
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 162, (uint64_t)"read_channel != kInvalidChannel && \"DMA write request not permitted.\"", 69, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
        v13 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v35 = qword_254A6DE40;
          v34 = qword_254A6DE48;
          while (v35 != v34)
          {
            v37 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v35;
            v36 = *(_QWORD *)(v35 + 8);
            v35 += 16;
            v37(v36, "read_channel != kInvalidChannel && \"DMA write request not permitted.\"", 69, "", 0);
          }
        }
        v14 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          goto LABEL_108;
        qword_254A6DE58(unk_254A6DE60, "read_channel != kInvalidChannel && \"DMA write request not permitted.\"", 69, "", 0);
      }
      v15 = (char *)&v60[42443 * v11] - (char *)&v66;
      v62 = v15 & 3;
      v64 = v15;
      if ((v15 & 3) != 0)
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 164, (uint64_t)"offset % kDefaultGranularity == 0 && length % kDefaultGranularity == 0 && \"Misaligned DMA request.\"", 99, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
        v16 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v27 = qword_254A6DE40;
          v26 = qword_254A6DE48;
          while (v27 != v26)
          {
            v29 = *(void (**)(uint64_t, const char *, ...))v27;
            v28 = *(_QWORD *)(v27 + 8);
            v27 += 16;
            v29(v28, "offset % kDefaultGranularity == 0 && length % kDefaultGranularity == 0 && \"Misaligned DMA request.\"", 99, "", 0);
          }
        }
        v17 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        v3 = v63;
        if (!byte_254A6DE68)
          goto LABEL_108;
        qword_254A6DE58(unk_254A6DE60, "offset % kDefaultGranularity == 0 && length % kDefaultGranularity == 0 && \"Misaligned DMA request.\"", 99, "", 0);
        LODWORD(v15) = v64;
      }
      if ((v15 + 582852) > *(_DWORD *)v3)
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 165, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
        v18 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v31 = qword_254A6DE40;
          v30 = qword_254A6DE48;
          while (v31 != v30)
          {
            v33 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v31;
            v32 = *(_QWORD *)(v31 + 8);
            v31 += 16;
            v33(v32, "offset + length <= size && \"Out of bounds DMA request.\"", 55, "", 0);
          }
        }
        v19 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        v3 = v63;
        if (!byte_254A6DE68)
          goto LABEL_108;
        qword_254A6DE58(unk_254A6DE60, "offset + length <= size && \"Out of bounds DMA request.\"", 55, "", 0);
        LODWORD(v15) = v64;
      }
      memcpy(__dst, (const void *)(*(_QWORD *)(v3 + 16) + (v15 + 578688)), sizeof(__dst));
      v20 = vaddq_f64(v58[2739], (float64x2_t)0);
      v58[2738] = vaddq_f64(v58[2738], (float64x2_t)0);
      v58[2739] = v20;
      v21 = __dst[0];
      if (v59)
        break;
      if (__dst[0])
      {
        v24 = (unsigned __int16 *)&__dst[588];
        do
        {
          v25 = *v24++;
          *(_DWORD *)((char *)&__dst[4] + ((v25 >> 4) & 0xFFCLL)) |= 1 << (v25 >> 1);
          --v21;
        }
        while (v21);
        goto LABEL_48;
      }
      if (*(_DWORD *)(v3 + 8) != -1)
      {
LABEL_49:
        if (!v62)
          goto LABEL_67;
LABEL_61:
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 190, (uint64_t)"offset % kDefaultGranularity == 0 && length % kDefaultGranularity == 0 && \"Misaligned DMA request.\"", 99, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
        v40 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v40 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v45 = qword_254A6DE40;
          v44 = qword_254A6DE48;
          while (v45 != v44)
          {
            v47 = *(void (**)(uint64_t, const char *, ...))v45;
            v46 = *(_QWORD *)(v45 + 8);
            v45 += 16;
            v47(v46, "offset % kDefaultGranularity == 0 && length % kDefaultGranularity == 0 && \"Misaligned DMA request.\"", 99, "", 0);
          }
        }
        v41 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v41 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        v3 = v63;
        if (!byte_254A6DE68)
          goto LABEL_108;
        qword_254A6DE58(unk_254A6DE60, "offset % kDefaultGranularity == 0 && length % kDefaultGranularity == 0 && \"Misaligned DMA request.\"", 99, "", 0);
        goto LABEL_67;
      }
LABEL_55:
      sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 188, (uint64_t)"write_channel != kInvalidChannel && \"DMA write request not permitted.\"", 70, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
      v38 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
      if ((v38 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
      {
        __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DE78);
      }
      if (!byte_254A6DE68 || byte_254A6DE70)
      {
        v53 = qword_254A6DE40;
        v52 = qword_254A6DE48;
        while (v53 != v52)
        {
          v55 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v53;
          v54 = *(_QWORD *)(v53 + 8);
          v53 += 16;
          v55(v54, "write_channel != kInvalidChannel && \"DMA write request not permitted.\"", 70, "", 0);
        }
      }
      v39 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
      if ((v39 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
      {
        __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DE78);
      }
      v3 = v63;
      if (!byte_254A6DE68)
        goto LABEL_108;
      qword_254A6DE58(unk_254A6DE60, "write_channel != kInvalidChannel && \"DMA write request not permitted.\"", 70, "", 0);
      if (v62)
        goto LABEL_61;
LABEL_67:
      v12 = v64;
      if ((v64 + 580432) > *(_DWORD *)v3)
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/3rd-party/LPSDMA/include/LPSDMA/DMA.h", 191, (uint64_t)"offset + length <= size && \"Out of bounds DMA request.\"", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
        v42 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v42 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v49 = qword_254A6DE40;
          v48 = qword_254A6DE48;
          while (v49 != v48)
          {
            v51 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v49;
            v50 = *(_QWORD *)(v49 + 8);
            v49 += 16;
            v51(v50, "offset + length <= size && \"Out of bounds DMA request.\"", 55, "", 0);
          }
        }
        v43 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v43 & 1) == 0)
        {
          if (__cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
        }
        v3 = v63;
        if (!byte_254A6DE68)
          goto LABEL_108;
        qword_254A6DE58(unk_254A6DE60, "offset + length <= size && \"Out of bounds DMA request.\"", 55, "", 0);
        v12 = v64;
      }
      result = (uint64_t)memcpy((void *)(*(_QWORD *)(v3 + 16) + (v12 + 578700)), &__dst[3], 0x6C4uLL);
      if (++v11 == v61)
        goto LABEL_7;
    }
    if (__dst[0])
    {
      v22 = (unsigned __int16 *)&__dst[588];
      do
      {
        v23 = *v22++;
        *(_DWORD *)((char *)&__dst[4] + ((v23 >> 4) & 0xFFCLL)) = *(_DWORD *)((char *)&__dst[4] + ((v23 >> 4) & 0xFFCLL)) & ~(1 << (v23 >> 1)) | (((*(_DWORD *)(v59 + 4 + 4 * (v10 >> 5)) >> v10) & 1) << (v23 >> 1));
        ++v10;
        --v21;
      }
      while (v21);
    }
LABEL_48:
    if (*(_DWORD *)(v3 + 8) != -1)
      goto LABEL_49;
    goto LABEL_55;
  }
  return result;
}

uint64_t sub_20FCB4E0C(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[104];
  if (v2)
  {
    a1[105] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[99];
  if (v3)
  {
    a1[100] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[93];
  if (v4)
  {
    a1[94] = v4;
    operator delete(v4);
  }
  return sub_20E990C88((uint64_t)a1);
}

void sub_20FCB4E5C(char **a1, _QWORD *a2, uint64_t *a3, int a4, char **a5)
{
  unint64_t v5;
  char *v8;
  char *v9;
  char *v10;
  uint64_t i;
  char *v12;
  unint64_t v13;
  unsigned int v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, const char *, uint64_t, const char *, uint64_t);
  unsigned __int8 v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, const char *, uint64_t, const char *, uint64_t);
  unsigned __int8 v26;
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, const char *, uint64_t, const char *, uint64_t);
  unsigned __int8 v32;
  unsigned __int8 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, const char *, uint64_t, const char *, uint64_t);
  unsigned __int8 v38;
  unint64_t v39;
  int8x8_t v40;
  uint8x8_t v41;
  unint64_t v42;
  uint64_t **v43;
  uint64_t *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint8x8_t v49;
  _QWORD *v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  float v55;
  float v56;
  _QWORD *v57;
  _QWORD *v58;
  _BOOL8 v59;
  unint64_t v60;
  unint64_t v61;
  size_t prime;
  char *v63;
  char *v64;
  uint64_t v65;
  _QWORD *v66;
  size_t v67;
  size_t v68;
  size_t v69;
  _QWORD *j;
  size_t v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint8x8_t v75;
  uint64_t v76;
  _QWORD *v77;
  char *v78;
  unint64_t v79;
  uint64_t v80;
  size_t v81;
  char *v82;
  void *v83;
  void *v84;
  _QWORD *v85;
  void *v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  char *v109;
  char *v110;
  char *v111;
  uint64_t v112;
  char *v113;
  char *v114;
  char *v115;
  void *v116;
  void *v117;
  void *v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  void *v125;
  void *v126;
  void *v127;
  void *v128;
  void *v129;
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  void *v136;
  void *v137;
  void *v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t *v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  char *v153;
  void *v154;
  void *v155;
  void *v156;
  void *v157;
  void *v158;
  _QWORD *v159;
  uint64_t *v163;
  uint64_t v164;
  _QWORD *v165;
  uint64_t v166;
  __int128 v167[36];
  __int128 v168;
  uint64_t v169;
  __int128 v170;
  uint64_t v171;
  __int128 __p;
  __int128 v173;
  int v174;
  __int128 v175;
  uint64_t v176;
  _QWORD *v177;
  char **v178;
  char v179;

  v9 = *a1;
  v8 = a1[1];
  if (v8 != *a1)
  {
    do
    {
      v8 -= 104;
      sub_20E9905B4(v8);
    }
    while (v8 != v9);
  }
  v10 = a1[3];
  a1[1] = v9;
  v163 = (uint64_t *)(a1 + 3);
  for (i = (uint64_t)a1[4]; (char *)i != v10; sub_20E990F68(i))
    i -= 240;
  v12 = a1[10];
  a1[4] = v10;
  *((_DWORD *)a1 + 12) = 0;
  v165 = a1 + 10;
  for (a1[7] = 0; v12; v12 = *(char **)v12)
  {
    sub_20FCB761C((uint64_t)(v12 + 24));
    *((_QWORD *)v12 + 97) = *((_QWORD *)v12 + 96);
    *((_QWORD *)v12 + 99) = -1;
    *((_QWORD *)v12 + 100) = -1;
    *((_DWORD *)v12 + 202) = -1;
    *((_QWORD *)v12 + 103) = *((_QWORD *)v12 + 102);
    *((_QWORD *)v12 + 105) = 0;
    *((_QWORD *)v12 + 108) = *((_QWORD *)v12 + 107);
    *((_DWORD *)v12 + 212) = 0;
  }
  v164 = a2[1];
  v166 = *a2;
  if (*a2 != v164)
  {
    v159 = a2;
    while (*(_QWORD *)(v166 + 16) == *(_QWORD *)(v166 + 8))
    {
LABEL_9:
      v166 += 104;
      if (v166 == v164)
      {
        a2 = v159;
        v87 = v159[1];
        v166 = *v159;
        goto LABEL_191;
      }
    }
    LODWORD(v13) = 0;
    while (1)
    {
      v14 = *(_DWORD *)v166;
      if (*(_DWORD *)v166 >= 0x10000u)
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
        v15 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v16 = qword_254A6DE40;
          v17 = qword_254A6DE48;
          while (v16 != v17)
          {
            v19 = *(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))v16;
            v18 = *(_QWORD *)(v16 + 8);
            v16 += 16;
            v19(v18, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
          }
        }
        v20 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v20 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
LABEL_300:
          abort();
        qword_254A6DE58(unk_254A6DE60, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
      }
      if (v13 >= 0x10000)
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 39, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
        v21 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v21 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v22 = qword_254A6DE40;
          v23 = qword_254A6DE48;
          while (v22 != v23)
          {
            v25 = *(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))v22;
            v24 = *(_QWORD *)(v22 + 8);
            v22 += 16;
            v25(v24, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
          }
        }
        v26 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v26 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          goto LABEL_300;
        qword_254A6DE58(unk_254A6DE60, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
      }
      if (v14 >= 0x10000)
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
        v27 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v27 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v28 = qword_254A6DE40;
          v29 = qword_254A6DE48;
          while (v28 != v29)
          {
            v31 = *(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))v28;
            v30 = *(_QWORD *)(v28 + 8);
            v28 += 16;
            v31(v30, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
          }
        }
        v32 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v32 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          goto LABEL_300;
        qword_254A6DE58(unk_254A6DE60, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
      }
      if (v13 >= 0x10000)
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
        v33 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v33 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v34 = qword_254A6DE40;
          v35 = qword_254A6DE48;
          while (v34 != v35)
          {
            v37 = *(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))v34;
            v36 = *(_QWORD *)(v34 + 8);
            v34 += 16;
            v37(v36, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
          }
        }
        v38 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v38 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          goto LABEL_300;
        qword_254A6DE58(unk_254A6DE60, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
      }
      v39 = (unsigned __int16)v13 | ((unsigned __int16)v14 << 16);
      v40 = (int8x8_t)a1[9];
      if (v40)
      {
        v41 = (uint8x8_t)vcnt_s8(v40);
        v41.i16[0] = vaddlv_u8(v41);
        if (v41.u32[0] > 1uLL)
        {
          v42 = (unsigned __int16)v13 | ((unsigned __int16)v14 << 16);
          if (*(_QWORD *)&v40 <= v39)
            v42 = v39 % *(_QWORD *)&v40;
        }
        else
        {
          v42 = (v40.i32[0] - 1) & v39;
        }
        v43 = *(uint64_t ***)&a1[8][8 * v42];
        if (v43)
        {
          v44 = *v43;
          if (v44)
          {
            if (v41.u32[0] < 2uLL)
            {
              v45 = *(_QWORD *)&v40 - 1;
              while (1)
              {
                v47 = v44[1];
                if (v47 == v39)
                {
                  if (*((_DWORD *)v44 + 4) == (_DWORD)v39)
                    goto LABEL_171;
                }
                else if ((v47 & v45) != v42)
                {
                  goto LABEL_68;
                }
                v44 = (uint64_t *)*v44;
                if (!v44)
                  goto LABEL_68;
              }
            }
            do
            {
              v46 = v44[1];
              if (v46 == v39)
              {
                if (*((_DWORD *)v44 + 4) == (_DWORD)v39)
                  goto LABEL_171;
              }
              else
              {
                if (v46 >= *(_QWORD *)&v40)
                  v46 %= *(_QWORD *)&v40;
                if (v46 != v42)
                  break;
              }
              v44 = (uint64_t *)*v44;
            }
            while (v44);
          }
        }
      }
LABEL_68:
      bzero(v167, 0x358uLL);
      sub_20F469B44((uint64_t)v167);
      v168 = 0uLL;
      v169 = 0;
      *(_QWORD *)&v170 = -1;
      *((_QWORD *)&v170 + 1) = -1;
      v171 = -1;
      v176 = 0;
      v175 = 0uLL;
      __p = 0u;
      v173 = 0u;
      v174 = 0;
      v48 = (unint64_t)a1[9];
      if (v48)
      {
        v49 = (uint8x8_t)vcnt_s8((int8x8_t)v48);
        v49.i16[0] = vaddlv_u8(v49);
        if (v49.u32[0] > 1uLL)
        {
          v5 = (unsigned __int16)v13 | ((unsigned __int16)v14 << 16);
          if (v48 <= v39)
            v5 = v39 % v48;
        }
        else
        {
          v5 = ((_DWORD)v48 - 1) & v39;
        }
        v50 = *(_QWORD **)&a1[8][8 * v5];
        if (v50)
        {
          v51 = (_QWORD *)*v50;
          if (*v50)
          {
            if (v49.u32[0] < 2uLL)
            {
              while (1)
              {
                v53 = v51[1];
                if (v53 == v39)
                {
                  if (*((_DWORD *)v51 + 4) == (_DWORD)v39)
                    goto LABEL_160;
                }
                else if ((v53 & (v48 - 1)) != v5)
                {
                  goto LABEL_88;
                }
                v51 = (_QWORD *)*v51;
                if (!v51)
                  goto LABEL_88;
              }
            }
            do
            {
              v52 = v51[1];
              if (v52 == v39)
              {
                if (*((_DWORD *)v51 + 4) == (_DWORD)v39)
                  goto LABEL_160;
              }
              else
              {
                if (v52 >= v48)
                  v52 %= v48;
                if (v52 != v5)
                  break;
              }
              v51 = (_QWORD *)*v51;
            }
            while (v51);
          }
        }
      }
LABEL_88:
      v54 = operator new(0x370uLL);
      v177 = v54;
      v178 = a1 + 10;
      v179 = 0;
      *v54 = 0;
      v54[1] = v39;
      *((_DWORD *)v54 + 4) = v39;
      bzero(v54 + 3, 0x358uLL);
      sub_20F469B44((uint64_t)(v54 + 3));
      v54[98] = 0;
      *((_OWORD *)v54 + 48) = 0u;
      v54[99] = -1;
      v54[100] = -1;
      v54[101] = -1;
      v54[107] = 0;
      *((_OWORD *)v54 + 54) = 0u;
      *((_OWORD *)v54 + 51) = 0u;
      *((_OWORD *)v54 + 52) = 0u;
      *((_DWORD *)v54 + 212) = 0;
      v179 = 1;
      v55 = (float)(unint64_t)(a1[11] + 1);
      v56 = *((float *)a1 + 24);
      if (!v48 || (float)(v56 * (float)v48) < v55)
        break;
      v57 = *(_QWORD **)&a1[8][8 * v5];
      v58 = v177;
      if (!v57)
        goto LABEL_140;
LABEL_91:
      *v58 = *v57;
      *v57 = v177;
LABEL_159:
      v51 = v177;
      ++a1[11];
LABEL_160:
      sub_20F287ACC((uint64_t)(v51 + 3), v167);
      v83 = (void *)v51[96];
      if (v83)
      {
        v51[97] = v83;
        operator delete(v83);
        v51[96] = 0;
        v51[97] = 0;
        v51[98] = 0;
      }
      *((_OWORD *)v51 + 48) = v168;
      v51[98] = v169;
      v169 = 0;
      v168 = 0uLL;
      *(_OWORD *)(v51 + 99) = v170;
      *((_DWORD *)v51 + 202) = v171;
      v84 = (void *)v51[102];
      if (v84)
      {
        v51[103] = v84;
        operator delete(v84);
        v51[102] = 0;
        v51[103] = 0;
        v51[104] = 0;
      }
      *((_OWORD *)v51 + 51) = __p;
      v51[104] = v173;
      *(_QWORD *)&v173 = 0;
      __p = 0uLL;
      v51[105] = *((_QWORD *)&v173 + 1);
      *((_DWORD *)v51 + 212) = v174;
      v85 = v51 + 107;
      v86 = (void *)v51[107];
      if (v86)
      {
        v51[108] = v86;
        operator delete(v86);
        *v85 = 0;
        v51[108] = 0;
        v51[109] = 0;
        v86 = (void *)__p;
      }
      *(_OWORD *)v85 = v175;
      v51[109] = v176;
      v176 = 0;
      v175 = 0uLL;
      if (v86)
      {
        *((_QWORD *)&__p + 1) = v86;
        operator delete(v86);
      }
      if ((_QWORD)v168)
      {
        *((_QWORD *)&v168 + 1) = v168;
        operator delete((void *)v168);
      }
      sub_20E990C88((uint64_t)v167);
LABEL_171:
      v13 = (v13 + 1);
      if (0x6FB586FB586FB587 * ((uint64_t)(*(_QWORD *)(v166 + 16) - *(_QWORD *)(v166 + 8)) >> 3) <= v13)
        goto LABEL_9;
    }
    v59 = (v48 & (v48 - 1)) != 0;
    if (v48 < 3)
      v59 = 1;
    v60 = v59 | (2 * v48);
    v61 = vcvtps_u32_f32(v55 / v56);
    if (v60 <= v61)
      prime = v61;
    else
      prime = v60;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v48 = (unint64_t)a1[9];
    if (prime <= v48)
    {
      if (prime >= v48)
        goto LABEL_138;
      v74 = vcvtps_u32_f32((float)(unint64_t)a1[11] / *((float *)a1 + 24));
      if (v48 < 3 || (v75 = (uint8x8_t)vcnt_s8((int8x8_t)v48), v75.i16[0] = vaddlv_u8(v75), v75.u32[0] > 1uLL))
      {
        v74 = std::__next_prime(v74);
      }
      else
      {
        v76 = 1 << -(char)__clz(v74 - 1);
        if (v74 >= 2)
          v74 = v76;
      }
      if (prime <= v74)
        prime = v74;
      if (prime >= v48)
      {
        v48 = (unint64_t)a1[9];
        if ((v48 & (v48 - 1)) != 0)
          goto LABEL_151;
        goto LABEL_139;
      }
      if (!prime)
      {
        v78 = a1[8];
        a1[8] = 0;
        if (v78)
          operator delete(v78);
        v48 = 0;
        a1[9] = 0;
        goto LABEL_139;
      }
    }
    if (prime >> 61)
      sub_20E877A38();
    v63 = (char *)operator new(8 * prime);
    v64 = a1[8];
    a1[8] = v63;
    if (v64)
      operator delete(v64);
    v65 = 0;
    a1[9] = (char *)prime;
    do
      *(_QWORD *)&a1[8][8 * v65++] = 0;
    while (prime != v65);
    v66 = (_QWORD *)*v165;
    if (!*v165)
    {
LABEL_150:
      v48 = prime;
      if ((prime & (prime - 1)) != 0)
      {
LABEL_151:
        if (v48 <= v39)
        {
          v5 = v39 % v48;
          v57 = *(_QWORD **)&a1[8][8 * (v39 % v48)];
          v58 = v177;
          if (v57)
            goto LABEL_91;
        }
        else
        {
          v5 = v39;
          v57 = *(_QWORD **)&a1[8][8 * v39];
          v58 = v177;
          if (v57)
            goto LABEL_91;
        }
        goto LABEL_140;
      }
LABEL_139:
      v5 = ((_DWORD)v48 - 1) & v39;
      v57 = *(_QWORD **)&a1[8][8 * v5];
      v58 = v177;
      if (v57)
        goto LABEL_91;
LABEL_140:
      *v58 = a1[10];
      a1[10] = (char *)v177;
      *(_QWORD *)&a1[8][8 * v5] = v165;
      if (*v177)
      {
        v79 = *(_QWORD *)(*v177 + 8);
        if ((v48 & (v48 - 1)) != 0)
        {
          if (v79 >= v48)
            v79 %= v48;
        }
        else
        {
          v79 &= v48 - 1;
        }
        *(_QWORD *)&a1[8][8 * v79] = v177;
      }
      goto LABEL_159;
    }
    v67 = v66[1];
    v68 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v69 = v67 & v68;
      *(_QWORD *)&a1[8][8 * v69] = v165;
      for (j = (_QWORD *)*v66; *v66; j = (_QWORD *)*v66)
      {
        v71 = j[1] & v68;
        if (v71 == v69)
        {
          v66 = j;
        }
        else
        {
          v72 = a1[8];
          if (*(_QWORD *)&v72[8 * v71])
          {
            *v66 = *j;
            v73 = 8 * v71;
            *j = **(_QWORD **)&a1[8][v73];
            **(_QWORD **)&a1[8][v73] = j;
          }
          else
          {
            *(_QWORD *)&v72[8 * v71] = v66;
            v66 = j;
            v69 = v71;
          }
        }
      }
      goto LABEL_150;
    }
    if (v67 < prime)
    {
      *(_QWORD *)&a1[8][8 * v67] = v165;
      v77 = (_QWORD *)*v66;
      if (*v66)
        goto LABEL_145;
      goto LABEL_137;
    }
    v67 %= prime;
    *(_QWORD *)&a1[8][8 * v67] = v165;
    v77 = (_QWORD *)*v66;
    if (!*v66)
    {
LABEL_137:
      v48 = prime;
LABEL_138:
      if ((v48 & (v48 - 1)) != 0)
        goto LABEL_151;
      goto LABEL_139;
    }
    while (1)
    {
LABEL_145:
      v81 = v77[1];
      if (v81 >= prime)
        v81 %= prime;
      if (v81 == v67)
        goto LABEL_144;
      v82 = a1[8];
      if (*(_QWORD *)&v82[8 * v81])
      {
        *v66 = *v77;
        v80 = 8 * v81;
        *v77 = **(_QWORD **)&a1[8][v80];
        **(_QWORD **)&a1[8][v80] = v77;
        v77 = v66;
LABEL_144:
        v66 = v77;
        v77 = (_QWORD *)*v77;
        if (!v77)
          goto LABEL_150;
      }
      else
      {
        *(_QWORD *)&v82[8 * v81] = v66;
        v66 = v77;
        v77 = (_QWORD *)*v77;
        v67 = v81;
        if (!v77)
          goto LABEL_150;
      }
    }
  }
  v87 = *a2;
LABEL_191:
  v88 = 0x4EC4EC4EC4EC4EC5 * ((v87 - v166) >> 3);
  v89 = *a1;
  if (0x4EC4EC4EC4EC4EC5 * ((a1[2] - *a1) >> 3) >= v88)
    goto LABEL_200;
  if (v88 > 0x276276276276276)
LABEL_303:
    sub_20E867F44();
  v90 = a1[1];
  v91 = (char *)operator new(v87 - v166);
  v92 = &v91[104 * v88];
  v93 = &v91[v90 - v89];
  if (v90 == v89)
  {
    *a1 = v93;
    a1[1] = v93;
    a1[2] = v92;
    if (v89)
LABEL_199:
      operator delete(v89);
  }
  else
  {
    v94 = 0;
    do
    {
      v95 = &v93[v94];
      v96 = &v90[v94];
      *((_DWORD *)v95 - 26) = *(_DWORD *)&v90[v94 - 104];
      *((_OWORD *)v95 - 6) = *(_OWORD *)&v90[v94 - 96];
      *((_QWORD *)v95 - 10) = *(_QWORD *)&v90[v94 - 80];
      *((_QWORD *)v96 - 12) = 0;
      *((_QWORD *)v96 - 11) = 0;
      *((_QWORD *)v96 - 10) = 0;
      *(_OWORD *)(v95 - 72) = *(_OWORD *)&v90[v94 - 72];
      *((_QWORD *)v95 - 7) = *(_QWORD *)&v90[v94 - 56];
      *((_QWORD *)v96 - 9) = 0;
      *((_QWORD *)v96 - 8) = 0;
      *((_QWORD *)v96 - 7) = 0;
      *((_OWORD *)v95 - 3) = *(_OWORD *)&v90[v94 - 48];
      *((_QWORD *)v95 - 4) = *(_QWORD *)&v90[v94 - 32];
      *((_QWORD *)v96 - 6) = 0;
      *((_QWORD *)v96 - 5) = 0;
      *((_QWORD *)v96 - 4) = 0;
      *(_OWORD *)(v95 - 24) = *(_OWORD *)&v90[v94 - 24];
      *((_QWORD *)v95 - 1) = *(_QWORD *)&v90[v94 - 8];
      *((_QWORD *)v96 - 3) = 0;
      *((_QWORD *)v96 - 2) = 0;
      *((_QWORD *)v96 - 1) = 0;
      v94 -= 104;
    }
    while (&v90[v94] != v89);
    v89 = *a1;
    v97 = a1[1];
    *a1 = &v93[v94];
    a1[1] = v93;
    a1[2] = v92;
    while (v97 != v89)
    {
      v97 -= 104;
      sub_20E9905B4(v97);
    }
    if (v89)
      goto LABEL_199;
  }
LABEL_200:
  v98 = *a2;
  v99 = a2[1];
  if (*a2 != v99)
  {
    v100 = a1[1];
    do
    {
      v101 = a1[2];
      if (v100 < v101)
      {
        *(_DWORD *)v100 = *(_DWORD *)v98;
        *((_QWORD *)v100 + 2) = 0;
        *((_QWORD *)v100 + 3) = 0;
        *((_QWORD *)v100 + 1) = 0;
        *(_OWORD *)(v100 + 8) = *(_OWORD *)(v98 + 8);
        *((_QWORD *)v100 + 3) = *(_QWORD *)(v98 + 24);
        *(_QWORD *)(v98 + 8) = 0;
        *(_QWORD *)(v98 + 16) = 0;
        *(_QWORD *)(v98 + 24) = 0;
        *((_QWORD *)v100 + 4) = 0;
        *((_QWORD *)v100 + 5) = 0;
        *((_QWORD *)v100 + 6) = 0;
        *((_OWORD *)v100 + 2) = *(_OWORD *)(v98 + 32);
        *((_QWORD *)v100 + 6) = *(_QWORD *)(v98 + 48);
        *(_QWORD *)(v98 + 32) = 0;
        *(_QWORD *)(v98 + 40) = 0;
        *(_QWORD *)(v98 + 48) = 0;
        *((_QWORD *)v100 + 7) = 0;
        *((_QWORD *)v100 + 8) = 0;
        *((_QWORD *)v100 + 9) = 0;
        *(_OWORD *)(v100 + 56) = *(_OWORD *)(v98 + 56);
        *((_QWORD *)v100 + 9) = *(_QWORD *)(v98 + 72);
        *(_QWORD *)(v98 + 56) = 0;
        *(_QWORD *)(v98 + 64) = 0;
        *(_QWORD *)(v98 + 72) = 0;
        *((_QWORD *)v100 + 10) = 0;
        *((_QWORD *)v100 + 11) = 0;
        *((_QWORD *)v100 + 12) = 0;
        *((_OWORD *)v100 + 5) = *(_OWORD *)(v98 + 80);
        *((_QWORD *)v100 + 12) = *(_QWORD *)(v98 + 96);
        *(_QWORD *)(v98 + 80) = 0;
        *(_QWORD *)(v98 + 88) = 0;
        *(_QWORD *)(v98 + 96) = 0;
        v100 += 104;
      }
      else
      {
        v102 = 0x4EC4EC4EC4EC4EC5 * ((v100 - *a1) >> 3);
        v103 = v102 + 1;
        if ((unint64_t)(v102 + 1) > 0x276276276276276)
          goto LABEL_303;
        v104 = 0x4EC4EC4EC4EC4EC5 * ((v101 - *a1) >> 3);
        if (2 * v104 > v103)
          v103 = 2 * v104;
        if (v104 >= 0x13B13B13B13B13BLL)
          v105 = 0x276276276276276;
        else
          v105 = v103;
        if (v105 > 0x276276276276276)
          goto LABEL_302;
        v106 = 104 * v105;
        v107 = (char *)operator new(104 * v105);
        v108 = &v107[104 * v102];
        v109 = &v107[v106];
        *(_DWORD *)v108 = *(_DWORD *)v98;
        *((_QWORD *)v108 + 2) = 0;
        *((_QWORD *)v108 + 3) = 0;
        *(_OWORD *)(v108 + 8) = *(_OWORD *)(v98 + 8);
        *((_QWORD *)v108 + 3) = *(_QWORD *)(v98 + 24);
        *(_QWORD *)(v98 + 8) = 0;
        *(_QWORD *)(v98 + 16) = 0;
        *(_QWORD *)(v98 + 24) = 0;
        *((_QWORD *)v108 + 5) = 0;
        *((_QWORD *)v108 + 6) = 0;
        *((_OWORD *)v108 + 2) = *(_OWORD *)(v98 + 32);
        *((_QWORD *)v108 + 6) = *(_QWORD *)(v98 + 48);
        *(_QWORD *)(v98 + 32) = 0;
        *(_QWORD *)(v98 + 40) = 0;
        *(_QWORD *)(v98 + 48) = 0;
        *((_QWORD *)v108 + 8) = 0;
        *((_QWORD *)v108 + 9) = 0;
        *(_OWORD *)(v108 + 56) = *(_OWORD *)(v98 + 56);
        *((_QWORD *)v108 + 9) = *(_QWORD *)(v98 + 72);
        *(_QWORD *)(v98 + 56) = 0;
        *(_QWORD *)(v98 + 64) = 0;
        *(_QWORD *)(v98 + 72) = 0;
        *((_QWORD *)v108 + 11) = 0;
        *((_QWORD *)v108 + 12) = 0;
        *((_OWORD *)v108 + 5) = *(_OWORD *)(v98 + 80);
        *((_QWORD *)v108 + 12) = *(_QWORD *)(v98 + 96);
        *(_QWORD *)(v98 + 80) = 0;
        *(_QWORD *)(v98 + 88) = 0;
        *(_QWORD *)(v98 + 96) = 0;
        v100 = v108 + 104;
        v110 = *a1;
        v111 = a1[1];
        if (v111 != *a1)
        {
          v112 = 0;
          do
          {
            v113 = &v108[v112];
            v114 = &v111[v112];
            *((_DWORD *)v113 - 26) = *(_DWORD *)&v111[v112 - 104];
            *((_OWORD *)v113 - 6) = *(_OWORD *)&v111[v112 - 96];
            *((_QWORD *)v113 - 10) = *(_QWORD *)&v111[v112 - 80];
            *((_QWORD *)v114 - 12) = 0;
            *((_QWORD *)v114 - 11) = 0;
            *((_QWORD *)v114 - 10) = 0;
            *(_OWORD *)(v113 - 72) = *(_OWORD *)&v111[v112 - 72];
            *((_QWORD *)v113 - 7) = *(_QWORD *)&v111[v112 - 56];
            *((_QWORD *)v114 - 9) = 0;
            *((_QWORD *)v114 - 8) = 0;
            *((_QWORD *)v114 - 7) = 0;
            *((_OWORD *)v113 - 3) = *(_OWORD *)&v111[v112 - 48];
            *((_QWORD *)v113 - 4) = *(_QWORD *)&v111[v112 - 32];
            *((_QWORD *)v114 - 6) = 0;
            *((_QWORD *)v114 - 5) = 0;
            *((_QWORD *)v114 - 4) = 0;
            *(_OWORD *)(v113 - 24) = *(_OWORD *)&v111[v112 - 24];
            *((_QWORD *)v113 - 1) = *(_QWORD *)&v111[v112 - 8];
            *((_QWORD *)v114 - 3) = 0;
            *((_QWORD *)v114 - 2) = 0;
            *((_QWORD *)v114 - 1) = 0;
            v112 -= 104;
          }
          while (&v111[v112] != v110);
          v111 = *a1;
          v115 = a1[1];
          *a1 = &v108[v112];
          a1[1] = v100;
          a1[2] = v109;
          while (v115 != v111)
          {
            v117 = (void *)*((_QWORD *)v115 - 3);
            if (v117)
            {
              *((_QWORD *)v115 - 2) = v117;
              operator delete(v117);
            }
            v118 = (void *)*((_QWORD *)v115 - 6);
            if (v118)
            {
              *((_QWORD *)v115 - 5) = v118;
              operator delete(v118);
            }
            v119 = (void *)*((_QWORD *)v115 - 9);
            if (v119)
            {
              *((_QWORD *)v115 - 8) = v119;
              operator delete(v119);
            }
            v120 = *((_QWORD *)v115 - 12);
            if (v120)
            {
              v121 = *((_QWORD *)v115 - 11);
              v116 = (void *)*((_QWORD *)v115 - 12);
              if (v121 != v120)
              {
                v122 = v121 - 208;
                do
                {
                  v124 = *(void **)(v122 + 184);
                  if (v124)
                  {
                    *(_QWORD *)(v122 + 192) = v124;
                    operator delete(v124);
                  }
                  v125 = *(void **)(v122 + 160);
                  if (v125)
                  {
                    *(_QWORD *)(v122 + 168) = v125;
                    operator delete(v125);
                  }
                  if (*(_BYTE *)(v122 + 152))
                  {
                    v126 = *(void **)(v122 + 128);
                    if (v126)
                    {
                      *(_QWORD *)(v122 + 136) = v126;
                      operator delete(v126);
                    }
                  }
                  v127 = *(void **)(v122 + 104);
                  if (v127)
                  {
                    *(_QWORD *)(v122 + 112) = v127;
                    operator delete(v127);
                  }
                  if (*(_BYTE *)(v122 + 96))
                  {
                    v128 = *(void **)(v122 + 72);
                    if (v128)
                    {
                      *(_QWORD *)(v122 + 80) = v128;
                      operator delete(v128);
                    }
                  }
                  v129 = *(void **)(v122 + 48);
                  if (v129)
                  {
                    *(_QWORD *)(v122 + 56) = v129;
                    operator delete(v129);
                  }
                  v130 = *(void **)(v122 + 24);
                  if (v130)
                  {
                    *(_QWORD *)(v122 + 32) = v130;
                    operator delete(v130);
                  }
                  v131 = *(void **)v122;
                  if (*(_QWORD *)v122)
                  {
                    *(_QWORD *)(v122 + 8) = v131;
                    operator delete(v131);
                  }
                  v132 = *(void **)(v122 - 24);
                  if (v132)
                  {
                    *(_QWORD *)(v122 - 16) = v132;
                    operator delete(v132);
                  }
                  v133 = *(void **)(v122 - 48);
                  if (v133)
                  {
                    *(_QWORD *)(v122 - 40) = v133;
                    operator delete(v133);
                  }
                  if (*(_BYTE *)(v122 - 56))
                  {
                    v134 = *(void **)(v122 - 80);
                    if (v134)
                    {
                      *(_QWORD *)(v122 - 72) = v134;
                      operator delete(v134);
                    }
                  }
                  v135 = *(void **)(v122 - 104);
                  if (v135)
                  {
                    *(_QWORD *)(v122 - 96) = v135;
                    operator delete(v135);
                  }
                  if (*(_BYTE *)(v122 - 112))
                  {
                    v136 = *(void **)(v122 - 136);
                    if (v136)
                    {
                      *(_QWORD *)(v122 - 128) = v136;
                      operator delete(v136);
                    }
                  }
                  v137 = *(void **)(v122 - 160);
                  if (v137)
                  {
                    *(_QWORD *)(v122 - 152) = v137;
                    operator delete(v137);
                  }
                  v138 = *(void **)(v122 - 184);
                  if (v138)
                  {
                    *(_QWORD *)(v122 - 176) = v138;
                    operator delete(v138);
                  }
                  v139 = *(void **)(v122 - 208);
                  if (v139)
                  {
                    *(_QWORD *)(v122 - 200) = v139;
                    operator delete(v139);
                  }
                  v123 = v122 - 232;
                  v122 -= 440;
                }
                while (v123 != v120);
                v116 = (void *)*((_QWORD *)v115 - 12);
              }
              *((_QWORD *)v115 - 11) = v120;
              operator delete(v116);
            }
            v115 -= 104;
          }
          if (!v111)
            goto LABEL_203;
LABEL_269:
          operator delete(v111);
          goto LABEL_203;
        }
        *a1 = v108;
        a1[1] = v100;
        a1[2] = v109;
        if (v111)
          goto LABEL_269;
      }
LABEL_203:
      a1[1] = v100;
      v98 += 104;
    }
    while (v98 != v99);
  }
  sub_20F027058(v163, 0xEEEEEEEEEEEEEEEFLL * ((a3[1] - *a3) >> 4));
  v140 = *a3;
  v141 = a3[1];
  if (*a3 != v141)
  {
    v142 = (unint64_t *)(a1 + 5);
    v143 = (unint64_t)a1[4];
    while (1)
    {
      while (v143 < *v142)
      {
        v144 = *(_QWORD *)(v140 + 16);
        *(_OWORD *)v143 = *(_OWORD *)v140;
        *(_QWORD *)(v143 + 16) = v144;
        *(_QWORD *)(v143 + 24) = 0;
        *(_QWORD *)(v143 + 32) = 0;
        *(_QWORD *)(v143 + 40) = 0;
        *(_OWORD *)(v143 + 24) = *(_OWORD *)(v140 + 24);
        *(_QWORD *)(v143 + 40) = *(_QWORD *)(v140 + 40);
        *(_QWORD *)(v140 + 24) = 0;
        *(_QWORD *)(v140 + 32) = 0;
        *(_QWORD *)(v140 + 40) = 0;
        *(_QWORD *)(v143 + 48) = 0;
        *(_QWORD *)(v143 + 56) = 0;
        *(_QWORD *)(v143 + 64) = 0;
        *(_OWORD *)(v143 + 48) = *(_OWORD *)(v140 + 48);
        *(_QWORD *)(v143 + 64) = *(_QWORD *)(v140 + 64);
        *(_QWORD *)(v140 + 48) = 0;
        *(_QWORD *)(v140 + 56) = 0;
        *(_QWORD *)(v140 + 64) = 0;
        *(_QWORD *)(v143 + 72) = 0;
        *(_QWORD *)(v143 + 80) = 0;
        *(_QWORD *)(v143 + 88) = 0;
        *(_OWORD *)(v143 + 72) = *(_OWORD *)(v140 + 72);
        *(_QWORD *)(v143 + 88) = *(_QWORD *)(v140 + 88);
        *(_QWORD *)(v140 + 72) = 0;
        *(_QWORD *)(v140 + 80) = 0;
        *(_QWORD *)(v140 + 88) = 0;
        *(_QWORD *)(v143 + 96) = 0;
        *(_QWORD *)(v143 + 104) = 0;
        *(_QWORD *)(v143 + 112) = 0;
        *(_OWORD *)(v143 + 96) = *(_OWORD *)(v140 + 96);
        *(_QWORD *)(v143 + 112) = *(_QWORD *)(v140 + 112);
        *(_QWORD *)(v140 + 96) = 0;
        *(_QWORD *)(v140 + 104) = 0;
        *(_QWORD *)(v140 + 112) = 0;
        *(_QWORD *)(v143 + 120) = 0;
        *(_QWORD *)(v143 + 128) = 0;
        *(_QWORD *)(v143 + 136) = 0;
        *(_OWORD *)(v143 + 120) = *(_OWORD *)(v140 + 120);
        *(_QWORD *)(v143 + 136) = *(_QWORD *)(v140 + 136);
        *(_QWORD *)(v140 + 120) = 0;
        *(_QWORD *)(v140 + 128) = 0;
        *(_QWORD *)(v140 + 136) = 0;
        *(_QWORD *)(v143 + 144) = 0;
        *(_QWORD *)(v143 + 152) = 0;
        *(_QWORD *)(v143 + 160) = 0;
        *(_OWORD *)(v143 + 144) = *(_OWORD *)(v140 + 144);
        *(_QWORD *)(v143 + 160) = *(_QWORD *)(v140 + 160);
        *(_QWORD *)(v140 + 144) = 0;
        *(_QWORD *)(v140 + 152) = 0;
        *(_QWORD *)(v140 + 160) = 0;
        *(_QWORD *)(v143 + 168) = 0;
        *(_QWORD *)(v143 + 176) = 0;
        *(_QWORD *)(v143 + 184) = 0;
        *(_OWORD *)(v143 + 168) = *(_OWORD *)(v140 + 168);
        *(_QWORD *)(v143 + 184) = *(_QWORD *)(v140 + 184);
        *(_QWORD *)(v140 + 168) = 0;
        *(_QWORD *)(v140 + 176) = 0;
        *(_QWORD *)(v140 + 184) = 0;
        *(_QWORD *)(v143 + 192) = 0;
        *(_QWORD *)(v143 + 200) = 0;
        *(_QWORD *)(v143 + 208) = 0;
        *(_OWORD *)(v143 + 192) = *(_OWORD *)(v140 + 192);
        *(_QWORD *)(v143 + 208) = *(_QWORD *)(v140 + 208);
        *(_QWORD *)(v140 + 192) = 0;
        *(_QWORD *)(v140 + 200) = 0;
        *(_QWORD *)(v140 + 208) = 0;
        *(_QWORD *)(v143 + 216) = 0;
        *(_QWORD *)(v143 + 224) = 0;
        *(_QWORD *)(v143 + 232) = 0;
        *(_OWORD *)(v143 + 216) = *(_OWORD *)(v140 + 216);
        *(_QWORD *)(v143 + 232) = *(_QWORD *)(v140 + 232);
        *(_QWORD *)(v140 + 216) = 0;
        *(_QWORD *)(v140 + 224) = 0;
        *(_QWORD *)(v140 + 232) = 0;
        v143 += 240;
        a1[4] = (char *)v143;
        v140 += 240;
        if (v140 == v141)
          goto LABEL_297;
      }
      v145 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v143 - *v163) >> 4);
      v146 = v145 + 1;
      if (v145 + 1 > 0x111111111111111)
        sub_20E867F44();
      if (0xDDDDDDDDDDDDDDDELL * ((uint64_t)(*v142 - *v163) >> 4) > v146)
        v146 = 0xDDDDDDDDDDDDDDDELL * ((uint64_t)(*v142 - *v163) >> 4);
      v147 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*v142 - *v163) >> 4) >= 0x88888888888888 ? 0x111111111111111 : v146;
      if (v147 > 0x111111111111111)
        break;
      v148 = (char *)operator new(240 * v147);
      v149 = (uint64_t)&v148[240 * v145];
      v150 = *(_QWORD *)(v140 + 16);
      *(_OWORD *)v149 = *(_OWORD *)v140;
      *(_QWORD *)(v149 + 16) = v150;
      *(_QWORD *)(v149 + 32) = 0;
      *(_QWORD *)(v149 + 40) = 0;
      *(_OWORD *)(v149 + 24) = *(_OWORD *)(v140 + 24);
      *(_QWORD *)(v149 + 40) = *(_QWORD *)(v140 + 40);
      *(_QWORD *)(v140 + 24) = 0;
      *(_QWORD *)(v140 + 32) = 0;
      *(_QWORD *)(v140 + 40) = 0;
      *(_QWORD *)(v149 + 56) = 0;
      *(_QWORD *)(v149 + 64) = 0;
      *(_OWORD *)(v149 + 48) = *(_OWORD *)(v140 + 48);
      *(_QWORD *)(v149 + 64) = *(_QWORD *)(v140 + 64);
      *(_QWORD *)(v140 + 48) = 0;
      *(_QWORD *)(v140 + 56) = 0;
      *(_QWORD *)(v140 + 64) = 0;
      *(_QWORD *)(v149 + 80) = 0;
      *(_QWORD *)(v149 + 88) = 0;
      *(_OWORD *)(v149 + 72) = *(_OWORD *)(v140 + 72);
      *(_QWORD *)(v149 + 88) = *(_QWORD *)(v140 + 88);
      *(_QWORD *)(v140 + 72) = 0;
      *(_QWORD *)(v140 + 80) = 0;
      *(_QWORD *)(v140 + 88) = 0;
      *(_QWORD *)(v149 + 104) = 0;
      *(_QWORD *)(v149 + 112) = 0;
      *(_OWORD *)(v149 + 96) = *(_OWORD *)(v140 + 96);
      *(_QWORD *)(v149 + 112) = *(_QWORD *)(v140 + 112);
      *(_QWORD *)(v140 + 96) = 0;
      *(_QWORD *)(v140 + 104) = 0;
      *(_QWORD *)(v140 + 112) = 0;
      *(_QWORD *)(v149 + 128) = 0;
      *(_QWORD *)(v149 + 136) = 0;
      *(_OWORD *)(v149 + 120) = *(_OWORD *)(v140 + 120);
      *(_QWORD *)(v149 + 136) = *(_QWORD *)(v140 + 136);
      *(_QWORD *)(v140 + 120) = 0;
      *(_QWORD *)(v140 + 128) = 0;
      *(_QWORD *)(v140 + 136) = 0;
      *(_QWORD *)(v149 + 152) = 0;
      *(_QWORD *)(v149 + 160) = 0;
      *(_OWORD *)(v149 + 144) = *(_OWORD *)(v140 + 144);
      *(_QWORD *)(v149 + 160) = *(_QWORD *)(v140 + 160);
      *(_QWORD *)(v140 + 144) = 0;
      *(_QWORD *)(v140 + 152) = 0;
      *(_QWORD *)(v140 + 160) = 0;
      *(_QWORD *)(v149 + 176) = 0;
      *(_QWORD *)(v149 + 184) = 0;
      *(_OWORD *)(v149 + 168) = *(_OWORD *)(v140 + 168);
      *(_QWORD *)(v149 + 184) = *(_QWORD *)(v140 + 184);
      *(_QWORD *)(v140 + 168) = 0;
      *(_QWORD *)(v140 + 176) = 0;
      *(_QWORD *)(v140 + 184) = 0;
      *(_QWORD *)(v149 + 200) = 0;
      *(_QWORD *)(v149 + 208) = 0;
      *(_OWORD *)(v149 + 192) = *(_OWORD *)(v140 + 192);
      *(_QWORD *)(v149 + 208) = *(_QWORD *)(v140 + 208);
      *(_QWORD *)(v140 + 192) = 0;
      *(_QWORD *)(v140 + 200) = 0;
      *(_QWORD *)(v140 + 208) = 0;
      *(_QWORD *)(v149 + 224) = 0;
      *(_QWORD *)(v149 + 232) = 0;
      *(_OWORD *)(v149 + 216) = *(_OWORD *)(v140 + 216);
      *(_QWORD *)(v149 + 232) = *(_QWORD *)(v140 + 232);
      *(_QWORD *)(v140 + 216) = 0;
      *(_QWORD *)(v140 + 224) = 0;
      *(_QWORD *)(v140 + 232) = 0;
      sub_20F009CC8((uint64_t)(a1 + 5), (uint64_t)a1[4], (uint64_t)a1[4], (uint64_t)a1[3], (uint64_t)a1[3], v149, v149);
      v143 = v149 + 240;
      v151 = a1[3];
      v152 = a1[4];
      a1[3] = v153;
      a1[4] = (char *)v143;
      for (a1[5] = &v148[240 * v147]; v152 != v151; v152 -= 240)
      {
        v154 = (void *)*((_QWORD *)v152 - 3);
        if (v154)
        {
          *((_QWORD *)v152 - 2) = v154;
          operator delete(v154);
        }
        v155 = (void *)*((_QWORD *)v152 - 6);
        if (v155)
        {
          *((_QWORD *)v152 - 5) = v155;
          operator delete(v155);
        }
        v156 = (void *)*((_QWORD *)v152 - 9);
        if (v156)
        {
          *((_QWORD *)v152 - 8) = v156;
          operator delete(v156);
        }
        v157 = (void *)*((_QWORD *)v152 - 12);
        if (v157)
        {
          *((_QWORD *)v152 - 11) = v157;
          operator delete(v157);
        }
        v158 = (void *)*((_QWORD *)v152 - 15);
        if (v158)
        {
          *((_QWORD *)v152 - 14) = v158;
          operator delete(v158);
        }
        sub_20E990FD8((void **)v152 - 27);
      }
      if (v151)
        operator delete(v151);
      a1[4] = (char *)v143;
      v140 += 240;
      if (v140 == v141)
        goto LABEL_297;
    }
LABEL_302:
    sub_20E877A38();
  }
LABEL_297:
  *((_DWORD *)a1 + 12) = a4;
  a1[7] = *a5;
}

void sub_20FCB667C(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  sub_20E990F68(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20FCB6698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v12;
  va_list va;

  va_start(va, a12);
  sub_20FCBCBD0(v12 - 112);
  sub_20FCB4E0C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20FCB66BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_20FCB4E0C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20FCB66D0(int8x8_t *a1, _QWORD *a2, _QWORD *a3, char a4)
{
  int8x8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, const char *, uint64_t, const char *, uint64_t);
  unsigned __int8 v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, const char *, uint64_t, const char *, uint64_t);
  unsigned __int8 v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, const char *, uint64_t, const char *, uint64_t);
  unsigned __int8 v34;
  unsigned __int8 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, const char *, uint64_t, const char *, uint64_t);
  unsigned __int8 v40;
  unint64_t v41;
  int8x8_t v42;
  uint8x8_t v43;
  int v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t **v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int8x8_t v51;
  int8x8_t v52;
  int v53;
  unint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t *p_shared_owners;
  unint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  int **v72;
  uint64_t v73;
  int64_t v74;
  uint64_t v75;
  _BYTE *v76;
  _BYTE *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  __int128 *v87;
  uint64_t v88;
  __int128 v89;
  int v90;
  int *v91;
  int *v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  char *v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  _BYTE *v103;
  _DWORD *v104;
  uint64_t v105;
  int64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  _OWORD *v111;
  char *v112;
  uint64_t v113;
  __int128 v114;
  int v115;
  uint64_t v118;
  uint64_t v119;
  int8x8_t *v120;
  _QWORD *v122;
  _QWORD *v123;
  unsigned int v124;
  uint64_t *v125;
  _QWORD *v126;
  _QWORD *v127;
  _QWORD *v128;
  uint64_t *v129;
  uint64_t v130;
  unsigned int v131;
  unsigned int v132;
  uint64_t v133;
  uint64_t v134;
  unsigned __int32 v135;
  int *v136;
  int8x8_t v137;
  void **v138;

  v4 = a1;
  v5 = (uint64_t)(a2[1] - *a2) >> 5;
  if (v5 != 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)&a1[1] - *(_QWORD *)a1) >> 3))
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/src/CameraSetFeatures.cpp", 161, (uint64_t)"camera_set_sensor_models.size() == camera_feature_samples.size()", 64, (uint64_t)&unk_2102BAB52, 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_180;
    }
    v5 = (uint64_t)(a2[1] - *a2) >> 5;
  }
  if (v5 != 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(_QWORD *)&v4[4] - *(_QWORD *)&v4[3]) >> 4)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/src/CameraSetFeatures.cpp", 162, (uint64_t)"camera_set_sensor_models.size() == camera_descriptor_stores.size()", 66, (uint64_t)&unk_2102BAB52, 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_180;
  }
  v6 = (uint64_t)(a3[1] - *a3) >> 5;
  if (v6 != 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)&v4[1] - *(_QWORD *)v4) >> 3))
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/src/CameraSetFeatures.cpp", 163, (uint64_t)"default_camera_set_sensor_models.size() == camera_feature_samples.size()", 72, (uint64_t)&unk_2102BAB52, 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_180;
    }
    v6 = (uint64_t)(a3[1] - *a3) >> 5;
  }
  if (v6 != 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(_QWORD *)&v4[4] - *(_QWORD *)&v4[3]) >> 4)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/src/CameraSetFeatures.cpp", 164, (uint64_t)"default_camera_set_sensor_models.size() == camera_descriptor_stores.size()", 74, (uint64_t)&unk_2102BAB52, 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_180:
    abort();
  }
  v118 = -991146299 * ((*(_QWORD *)&v4[1] - *(_QWORD *)v4) >> 3);
  if ((_DWORD)v118)
  {
    v7 = 0;
    v120 = v4;
    while (1)
    {
      v119 = v7;
      v8 = *(_QWORD *)v4 + 104 * v7;
      v9 = *(_QWORD *)(v8 + 8);
      v129 = (uint64_t *)(v8 + 8);
      v128 = (_QWORD *)(v8 + 16);
      if (*(_QWORD *)(v8 + 16) != v9)
        break;
LABEL_13:
      v7 = v119 + 1;
      if (v119 + 1 == v118)
        return;
    }
    v10 = 0;
    v11 = 0;
    v126 = (_QWORD *)(*a3 + 32 * v119 + 8);
    v127 = (_QWORD *)(*a2 + 32 * v119 + 8);
    v12 = *(_QWORD *)&v4[3] + 240 * v119;
    v125 = (uint64_t *)(v12 + 24);
    v131 = *(_DWORD *)(*(_QWORD *)v4 + 104 * v119);
    v124 = v131 << 16;
    v122 = (_QWORD *)(v12 + 224);
    v123 = (_QWORD *)(v12 + 216);
    while (1)
    {
      v13 = *v127 + 1664 * v10;
      if (*(_BYTE *)(v13 + 1536))
        v14 = v13 + 96;
      else
        v14 = 0;
      v15 = *v126 + 1664 * v10;
      if (*(_BYTE *)(v15 + 1536))
        v16 = v15 + 96;
      else
        v16 = 0;
      v133 = v16;
      v130 = *v125;
      v137 = v4[7];
      v135 = v4[6].u32[0];
      v132 = v11;
      if (v131 >= 0x10000)
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
        v17 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v18 = qword_254A6DE40;
          v19 = qword_254A6DE48;
          while (v18 != v19)
          {
            v21 = *(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))v18;
            v20 = *(_QWORD *)(v18 + 8);
            v18 += 16;
            v21(v20, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
          }
        }
        v22 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v22 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          goto LABEL_180;
        qword_254A6DE58(unk_254A6DE60, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
      }
      if (v11 >= 0x10000)
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 39, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
        v23 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v23 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v24 = qword_254A6DE40;
          v25 = qword_254A6DE48;
          while (v24 != v25)
          {
            v27 = *(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))v24;
            v26 = *(_QWORD *)(v24 + 8);
            v24 += 16;
            v27(v26, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
          }
        }
        v28 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v28 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          goto LABEL_180;
        qword_254A6DE58(unk_254A6DE60, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
      }
      if (v131 >= 0x10000)
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
        v29 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v29 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v30 = qword_254A6DE40;
          v31 = qword_254A6DE48;
          while (v30 != v31)
          {
            v33 = *(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))v30;
            v32 = *(_QWORD *)(v30 + 8);
            v30 += 16;
            v33(v32, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
          }
        }
        v34 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v34 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          goto LABEL_180;
        qword_254A6DE58(unk_254A6DE60, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
      }
      if (v11 >= 0x10000)
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
        v35 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v35 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v36 = qword_254A6DE40;
          v37 = qword_254A6DE48;
          while (v36 != v37)
          {
            v39 = *(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))v36;
            v38 = *(_QWORD *)(v36 + 8);
            v36 += 16;
            v39(v38, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
          }
        }
        v40 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v40 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          goto LABEL_180;
        qword_254A6DE58(unk_254A6DE60, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
      }
      v41 = (unsigned __int16)v11 | v124;
      v42 = v4[9];
      if (v42)
      {
        v43 = (uint8x8_t)vcnt_s8(v42);
        v43.i16[0] = vaddlv_u8(v43);
        v44 = (unsigned __int16)v131;
        if (v43.u32[0] > 1uLL)
        {
          v45 = (unsigned __int16)v11 | v124;
          if (*(_QWORD *)&v42 <= v41)
            v45 = v41 % *(_QWORD *)&v42;
        }
        else
        {
          v45 = (v42.i32[0] - 1) & v41;
        }
        v47 = *(uint64_t ***)(*(_QWORD *)&v4[8] + 8 * v45);
        if (v47)
        {
          v46 = *v47;
          if (*v47)
          {
            if (v43.u32[0] < 2uLL)
            {
              v48 = *(_QWORD *)&v42 - 1;
              while (1)
              {
                v50 = v46[1];
                if (v50 == v41)
                {
                  if (*((_DWORD *)v46 + 4) == (_DWORD)v41)
                    goto LABEL_81;
                }
                else if ((v50 & v48) != v45)
                {
                  goto LABEL_80;
                }
                v46 = (uint64_t *)*v46;
                if (!v46)
                  goto LABEL_81;
              }
            }
            do
            {
              v49 = v46[1];
              if (v49 == v41)
              {
                if (*((_DWORD *)v46 + 4) == (_DWORD)v41)
                  break;
              }
              else
              {
                if (v49 >= *(_QWORD *)&v42)
                  v49 %= *(_QWORD *)&v42;
                if (v49 != v45)
                  goto LABEL_80;
              }
              v46 = (uint64_t *)*v46;
            }
            while (v46);
          }
        }
        else
        {
LABEL_80:
          v46 = 0;
        }
      }
      else
      {
        v46 = 0;
        v44 = (unsigned __int16)v131;
      }
LABEL_81:
      v51 = *v4;
      v52 = v4[1];
      if (*v4 == *(_QWORD *)&v52)
        goto LABEL_89;
      v53 = 0;
      while (**(_DWORD **)&v51 != v44)
      {
        v54 = 0x6FB586FB586FB587
            * ((uint64_t)(*(_QWORD *)(*(_QWORD *)&v51 + 16) - *(_QWORD *)(*(_QWORD *)&v51 + 8)) >> 3);
LABEL_84:
        v53 += v54;
        *(_QWORD *)&v51 += 104;
        if (*(_QWORD *)&v51 == *(_QWORD *)&v52)
          goto LABEL_89;
      }
      v54 = 0x6FB586FB586FB587
          * ((uint64_t)(*(_QWORD *)(*(_QWORD *)&v51 + 16) - *(_QWORD *)(*(_QWORD *)&v51 + 8)) >> 3);
      if (v54 <= (unsigned __int16)v11)
        goto LABEL_84;
      v55 = v53 + (unsigned __int16)v11;
      if (v55 >= 0)
      {
        v56 = 1 << v55;
        goto LABEL_90;
      }
LABEL_89:
      v56 = 0;
LABEL_90:
      *((_DWORD *)v46 + 212) = v56;
      sub_20FCB761C((uint64_t)(v46 + 3));
      v46[3] = (uint64_t)v137;
      v46[4] = v135;
      *((_DWORD *)v46 + 10) = v41;
      v57 = operator new();
      sub_20E972DB4(v57, v14);
      memcpy((void *)(v57 + 1000), (const void *)(v14 + 1000), 0x1B8uLL);
      v58 = v46[6];
      v46[6] = v57;
      if (v58)
      {
        v59 = *(_DWORD *)(v58 + 992);
        if (v59 != -1)
        {
          if (v59 > 7)
          {
            if (v59 > 0xB)
            {
              if (v59 >= 0xF)
              {
                v60 = *(std::__shared_weak_count **)(v58 + 896);
                if (v60)
                {
                  p_shared_owners = (unint64_t *)&v60->__shared_owners_;
                  do
                    v62 = __ldaxr(p_shared_owners);
                  while (__stlxr(v62 - 1, p_shared_owners));
                  goto LABEL_114;
                }
              }
            }
            else if (v59 > 9)
            {
              if (v59 != 10)
              {
                v60 = *(std::__shared_weak_count **)(v58 + 672);
                if (v60)
                {
                  v65 = (unint64_t *)&v60->__shared_owners_;
                  do
                    v62 = __ldaxr(v65);
                  while (__stlxr(v62 - 1, v65));
                  goto LABEL_114;
                }
              }
            }
            else if (v59 == 9)
            {
              v60 = *(std::__shared_weak_count **)(v58 + 504);
              if (v60)
              {
                v63 = (unint64_t *)&v60->__shared_owners_;
                do
                  v62 = __ldaxr(v63);
                while (__stlxr(v62 - 1, v63));
                goto LABEL_114;
              }
            }
          }
          else if (v59 == 7)
          {
            v60 = *(std::__shared_weak_count **)(v58 + 480);
            if (v60)
            {
              v61 = (unint64_t *)&v60->__shared_owners_;
              do
                v62 = __ldaxr(v61);
              while (__stlxr(v62 - 1, v61));
LABEL_114:
              if (!v62)
              {
                ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                std::__shared_weak_count::__release_weak(v60);
              }
            }
          }
        }
        MEMORY[0x212BC6398](v58, 0x1000C408CB30F5BLL);
      }
      if (*v123 == *v122)
      {
        v46[8] = 0;
        *((_BYTE *)v46 + 72) = 0;
        v68 = v133;
        v69 = v130;
      }
      else
      {
        v66 = *v123 + 12 * v10;
        v67 = *(_QWORD *)v66;
        LODWORD(v66) = *(unsigned __int8 *)(v66 + 8);
        v46[8] = v67;
        *((_BYTE *)v46 + 72) = v66;
        v68 = v133;
        v69 = v130;
        if ((_DWORD)v66)
          *(_WORD *)(v46[10] + 80) = (HIDWORD(v67) * (_DWORD)v67 != 0) | 0x100;
      }
      v70 = (uint64_t *)(v69 + 16 * v10);
      sub_20FCBD95C(v14, v68, a4, v9 + 440 * v10 + 24, (uint64_t)(v46 + 12));
      sub_20FCBEC9C(*v70, (uint64_t)(v46 + 75));
      v138 = (void **)(v46 + 96);
      v71 = v9 + 440 * v10;
      v73 = *(_QWORD *)(v71 + 136);
      v72 = (int **)(v71 + 136);
      v74 = v73 - (_QWORD)*(v72 - 1);
      v75 = v74 >> 2;
      v76 = (_BYTE *)v46[96];
      if (v74 >> 2 > (unint64_t)((v46[98] - (uint64_t)v76) >> 2))
      {
        if (v74 < 0)
LABEL_178:
          sub_20EABADD4();
        v77 = (_BYTE *)v46[97];
        v78 = (char *)operator new(v74);
        v79 = v77 - v76;
        v80 = &v78[(v77 - v76) & 0xFFFFFFFFFFFFFFFCLL];
        v81 = v80;
        if (v77 != v76)
        {
          if ((unint64_t)(v79 - 4) < 0x2C)
          {
            v81 = &v78[(v77 - v76) & 0xFFFFFFFFFFFFFFFCLL];
            goto LABEL_130;
          }
          v81 = &v78[(v77 - v76) & 0xFFFFFFFFFFFFFFFCLL];
          if ((unint64_t)(&v77[-(v79 & 0xFFFFFFFFFFFFFFFCLL)] - v78) < 0x20)
            goto LABEL_183;
          v82 = v79 >> 2;
          v83 = ((unint64_t)(v79 - 4) >> 2) + 1;
          v84 = 4 * (v83 & 0x7FFFFFFFFFFFFFF8);
          v85 = &v77[-v84];
          v81 = &v80[-v84];
          v86 = &v78[4 * v82 - 16];
          v87 = (__int128 *)(v77 - 16);
          v88 = v83 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v89 = *v87;
            *((_OWORD *)v86 - 1) = *(v87 - 1);
            *(_OWORD *)v86 = v89;
            v86 -= 32;
            v87 -= 2;
            v88 -= 8;
          }
          while (v88);
          v77 = v85;
          if (v83 != (v83 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_183:
            do
            {
LABEL_130:
              v90 = *((_DWORD *)v77 - 1);
              v77 -= 4;
              *((_DWORD *)v81 - 1) = v90;
              v81 -= 4;
            }
            while (v77 != v76);
          }
        }
        v46[96] = (uint64_t)v81;
        v46[97] = (uint64_t)v80;
        v46[98] = (uint64_t)&v78[4 * v75];
        if (v76)
          operator delete(v76);
      }
      v91 = *(v72 - 1);
      v92 = *v72;
      if (v91 != *v72)
      {
        v93 = 0;
        v94 = v9 + 440 * v10 + 152;
        v134 = v94;
        v136 = v92;
        while (1)
        {
          while (1)
          {
            if (!*(_BYTE *)(v94 + 24) || (v95 = *(_DWORD *)(*(_QWORD *)v94 + 4 * v93), v95 == -1))
              v95 = *v91;
            v96 = (char *)v46[97];
            v97 = v46[98];
            if ((unint64_t)v96 >= v97)
              break;
            *(_DWORD *)v96 = v95;
            v46[97] = (uint64_t)(v96 + 4);
            ++v91;
            ++v93;
            if (v91 == v92)
              goto LABEL_16;
          }
          v98 = (char *)*v138;
          v99 = (v96 - (_BYTE *)*v138) >> 2;
          v100 = v99 + 1;
          if ((unint64_t)(v99 + 1) >> 62)
            goto LABEL_178;
          v101 = v97 - (_QWORD)v98;
          if (v101 >> 1 > v100)
            v100 = v101 >> 1;
          v102 = (unint64_t)v101 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v100;
          if (v102)
            break;
          v103 = 0;
          v104 = (_DWORD *)(4 * v99);
          *(_DWORD *)(4 * v99) = v95;
          v105 = 4 * v99 + 4;
          v106 = v96 - v98;
          if (v96 != v98)
            goto LABEL_151;
LABEL_157:
          v46[96] = (uint64_t)v104;
          v46[97] = v105;
          v46[98] = (uint64_t)&v103[4 * v102];
          if (v98)
            operator delete(v98);
          v94 = v134;
          v92 = v136;
          v46[97] = v105;
          ++v91;
          ++v93;
          if (v91 == v136)
            goto LABEL_16;
        }
        if (v102 >> 62)
          sub_20E877A38();
        v103 = operator new(4 * v102);
        v104 = &v103[4 * v99];
        *v104 = v95;
        v105 = (uint64_t)(v104 + 1);
        v106 = v96 - v98;
        if (v96 == v98)
          goto LABEL_157;
LABEL_151:
        v107 = v106 - 4;
        if (v107 < 0x2C)
          goto LABEL_184;
        if ((unint64_t)(v98 - v103) < 0x20)
          goto LABEL_184;
        v108 = (v107 >> 2) + 1;
        v109 = 4 * (v108 & 0x7FFFFFFFFFFFFFF8);
        v110 = &v96[-v109];
        v104 = (_DWORD *)((char *)v104 - v109);
        v111 = &v103[4 * v99 - 16];
        v112 = v96 - 16;
        v113 = v108 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v114 = *(_OWORD *)v112;
          *(v111 - 1) = *((_OWORD *)v112 - 1);
          *v111 = v114;
          v111 -= 2;
          v112 -= 32;
          v113 -= 8;
        }
        while (v113);
        v96 = v110;
        if (v108 != (v108 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_184:
          do
          {
            v115 = *((_DWORD *)v96 - 1);
            v96 -= 4;
            *--v104 = v115;
          }
          while (v96 != v98);
        }
        goto LABEL_157;
      }
LABEL_16:
      v10 = v132 + 1;
      v9 = *v129;
      v11 = v132 + 1;
      v4 = v120;
      if (0x6FB586FB586FB587 * ((*v128 - *v129) >> 3) <= v10)
        goto LABEL_13;
    }
  }
}

void sub_20FCB75F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x1000C408CB30F5BLL);
  _Unwind_Resume(a1);
}

__n128 sub_20FCB761C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  __n128 result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = -1;
  v4 = *(_QWORD *)(a1 + 24);
  v2 = (_QWORD *)(a1 + 24);
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_20E8E931C((uint64_t)v2, v3);
  v5 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v5)
    sub_20E8E931C(a1 + 32, v5);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  if (*(_BYTE *)(a1 + 280))
  {
    sub_20E990EA4((uint64_t *)(a1 + 232));
    v6 = *(void **)(a1 + 208);
    if (v6)
    {
      *(_QWORD *)(a1 + 216) = v6;
      operator delete(v6);
    }
    v7 = *(void **)(a1 + 128);
    if (v7)
    {
      *(_QWORD *)(a1 + 136) = v7;
      operator delete(v7);
    }
    *(_BYTE *)(a1 + 280) = 0;
  }
  if (*(_BYTE *)(a1 + 456))
  {
    sub_20E990EA4((uint64_t *)(a1 + 408));
    v8 = *(void **)(a1 + 384);
    if (v8)
    {
      *(_QWORD *)(a1 + 392) = v8;
      operator delete(v8);
    }
    v9 = *(void **)(a1 + 304);
    if (v9)
    {
      *(_QWORD *)(a1 + 312) = v9;
      operator delete(v9);
    }
    *(_BYTE *)(a1 + 456) = 0;
  }
  if (*(_BYTE *)(a1 + 488))
  {
    v10 = *(_QWORD *)(a1 + 464);
    if (v10)
    {
      v11 = *(_QWORD *)(a1 + 472);
      v12 = *(void **)(a1 + 464);
      if (v11 != v10)
      {
        do
        {
          v13 = *(void **)(v11 - 32);
          if (v13)
          {
            *(_QWORD *)(v11 - 24) = v13;
            operator delete(v13);
          }
          v14 = *(void **)(v11 - 56);
          if (v14)
          {
            *(_QWORD *)(v11 - 48) = v14;
            operator delete(v14);
          }
          v11 -= 64;
        }
        while (v11 != v10);
        v12 = *(void **)(a1 + 464);
      }
      *(_QWORD *)(a1 + 472) = v10;
      operator delete(v12);
    }
    *(_BYTE *)(a1 + 488) = 0;
  }
  if (*(_BYTE *)(a1 + 520))
  {
    v15 = *(_QWORD *)(a1 + 496);
    if (v15)
    {
      v16 = *(_QWORD *)(a1 + 504);
      v17 = *(void **)(a1 + 496);
      if (v16 != v15)
      {
        do
        {
          v18 = *(void **)(v16 - 32);
          if (v18)
          {
            *(_QWORD *)(v16 - 24) = v18;
            operator delete(v18);
          }
          v19 = *(void **)(v16 - 56);
          if (v19)
          {
            *(_QWORD *)(v16 - 48) = v19;
            operator delete(v19);
          }
          v16 -= 64;
        }
        while (v16 != v15);
        v17 = *(void **)(a1 + 496);
      }
      *(_QWORD *)(a1 + 504) = v15;
      operator delete(v17);
    }
    *(_BYTE *)(a1 + 520) = 0;
  }
  *(_QWORD *)(a1 + 536) = *(_QWORD *)(a1 + 528);
  *(_QWORD *)(a1 + 560) = *(_QWORD *)(a1 + 552);
  *(_QWORD *)(a1 + 584) = *(_QWORD *)(a1 + 576);
  *(_QWORD *)(a1 + 600) = 0;
  *(_BYTE *)(a1 + 608) = 0;
  *(_QWORD *)(a1 + 624) = *(_QWORD *)(a1 + 616);
  *(_QWORD *)(a1 + 640) = 0;
  *(_BYTE *)(a1 + 648) = 0;
  *(_QWORD *)(a1 + 664) = *(_QWORD *)(a1 + 656);
  *(_QWORD *)(a1 + 680) = 0;
  *(_BYTE *)(a1 + 688) = 0;
  *(_QWORD *)(a1 + 728) = -1;
  result.n128_u64[0] = -1;
  result.n128_u64[1] = -1;
  *(__n128 *)(a1 + 696) = result;
  *(__n128 *)(a1 + 712) = result;
  *(_BYTE *)(a1 + 736) = 0;
  return result;
}

__n128 sub_20FCB7808(int8x8_t *a1, __int128 *a2)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  void *v13;
  __n128 result;
  uint64_t v15;

  v3 = a1[9];
  if (v3)
  {
    v4 = *((unsigned int *)a2 + 4);
    v5 = (uint8x8_t)vcnt_s8(v3);
    v5.i16[0] = vaddlv_u8(v5);
    if (v5.u32[0] > 1uLL)
    {
      v6 = *((unsigned int *)a2 + 4);
      if (*(_QWORD *)&v3 <= v4)
        v6 = v4 % *(_QWORD *)&v3;
    }
    else
    {
      v6 = (v3.i32[0] - 1) & v4;
    }
    v7 = *(uint64_t ***)(*(_QWORD *)&a1[8] + 8 * v6);
    if (v7)
    {
      v8 = *v7;
      if (*v7)
      {
        if (v5.u32[0] < 2uLL)
        {
          v9 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v11 = v8[1];
            if (v11 == v4)
            {
              if (*((_DWORD *)v8 + 4) == (_DWORD)v4)
                goto LABEL_22;
            }
            else if ((v11 & v9) != v6)
            {
              goto LABEL_21;
            }
            v8 = (uint64_t *)*v8;
            if (!v8)
              goto LABEL_21;
          }
        }
        do
        {
          v10 = v8[1];
          if (v10 == v4)
          {
            if (*((_DWORD *)v8 + 4) == (_DWORD)v4)
              goto LABEL_22;
          }
          else
          {
            if (v10 >= *(_QWORD *)&v3)
              v10 %= *(_QWORD *)&v3;
            if (v10 != v6)
              break;
          }
          v8 = (uint64_t *)*v8;
        }
        while (v8);
      }
    }
  }
LABEL_21:
  v8 = 0;
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/src/CameraSetFeatures.cpp", 309, (uint64_t)"camera_frame_bundle_iter != camera_frame_bundles_.end()", 55, (uint64_t)&unk_2102BAB52, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_22:
  v12 = *a2;
  *((_DWORD *)v8 + 202) = *((_DWORD *)a2 + 4);
  *(_OWORD *)(v8 + 99) = v12;
  v13 = (void *)v8[102];
  if (v13)
  {
    v8[103] = (uint64_t)v13;
    operator delete(v13);
    v8[102] = 0;
    v8[103] = 0;
    v8[104] = 0;
  }
  result = *(__n128 *)((char *)a2 + 24);
  *((__n128 *)v8 + 51) = result;
  v15 = *((_QWORD *)a2 + 6);
  v8[104] = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  v8[105] = v15;
  return result;
}

void sub_20FCB7984(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v6;
  __int128 v7;
  __int128 v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  char *v12;
  unint64_t v13;
  uint8x8_t v14;
  unint64_t v15;
  uint64_t **v16;
  uint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  char *v22;
  __int128 v23;
  __int128 v24;
  _BYTE *v25;
  _BYTE *v26;
  int64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  int v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  __int128 v52;
  char *v53;
  uint64_t v54;
  uint64_t *v55;
  _BYTE *v56;
  char *v57;
  char *v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *p_shared_owners;
  unint64_t v82;
  _BYTE *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  _QWORD *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  _BYTE *v97;
  _BYTE *v98;
  int64_t v99;
  char *v100;
  char *v101;
  char *v102;
  _QWORD *v103;
  const void *v104;
  int64_t v105;
  char *v106;
  char *v107;
  _QWORD *v108;
  _QWORD *v109;
  unint64_t v110;
  unint64_t v111;
  const void *v112;
  uint64_t v113;
  unint64_t v114;
  char *v115;
  char *v116;
  int64_t v117;
  const void *v118;
  char *v119;
  char *v120;
  char *v121;
  __int128 v122;
  _QWORD *v123;
  _QWORD *v124;
  void *v125;
  void *v126;
  uint64_t v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  unint64_t *v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t *v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  char *v140;
  char *v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  uint64_t v145;
  unint64_t *v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t *v149;
  unint64_t v150;
  char *v151;
  char *v152;
  char *v153;
  uint64_t v154;
  char *v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  char *v159;
  char *v160;
  char *v161;
  char *v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  char *v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  char *v180;
  char *v181;
  void *v182;
  void *v183;
  char *v184;
  void *v185;
  void *v186;
  char *v187;
  char *v188;
  char *v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  __int128 v194;
  void *__p;
  char *v196;
  unint64_t v197;
  _OWORD v198[2];
  __int128 v199;
  _OWORD v200[5];
  __int128 v201;
  __int128 v202;
  _BYTE v203[288];
  char v204;
  char *v205;
  _BYTE v206[24];
  char *v207;

  __p = 0;
  v196 = 0;
  v197 = 0;
  v4 = *a2;
  v3 = a2[1];
  if (*a2 == v3)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 96) = 0;
    return;
  }
  while (2)
  {
    v7 = *(_OWORD *)v4;
    v8 = *(_OWORD *)(v4 + 16);
    *(_QWORD *)((char *)&v200[1] + 13) = *(_QWORD *)(v4 + 29);
    v200[0] = v7;
    v200[1] = v8;
    v200[3] = 0uLL;
    *((_QWORD *)&v200[2] + 1) = 0;
    v10 = *(_BYTE **)(v4 + 40);
    v9 = *(_BYTE **)(v4 + 48);
    v11 = v9 - v10;
    if (v9 == v10)
    {
      v12 = 0;
      v13 = a1[9];
      if (!v13)
        goto LABEL_30;
    }
    else
    {
      if (v11 < 0)
        sub_20E867F44();
      v12 = (char *)operator new(v9 - v10);
      *((_QWORD *)&v200[2] + 1) = v12;
      *((_QWORD *)&v200[3] + 1) = &v12[4 * (v11 >> 2)];
      memcpy(v12, v10, v11);
      *(_QWORD *)&v200[3] = &v12[4 * (v11 >> 2)];
      v13 = a1[9];
      if (!v13)
      {
LABEL_30:
        v21 = 0;
        if (!v12)
          goto LABEL_32;
LABEL_31:
        *(_QWORD *)&v200[3] = v12;
        operator delete(v12);
        goto LABEL_32;
      }
    }
    v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      v15 = LODWORD(v200[1]);
      if (v13 <= LODWORD(v200[1]))
        v15 = LODWORD(v200[1]) % v13;
    }
    else
    {
      v15 = (v13 - 1) & v200[1];
    }
    v16 = *(uint64_t ***)(a1[8] + 8 * v15);
    if (!v16)
      goto LABEL_30;
    v17 = *v16;
    if (!v17)
      goto LABEL_30;
    if (v14.u32[0] < 2uLL)
    {
      v18 = v13 - 1;
      while (1)
      {
        v20 = v17[1];
        if (v20 == LODWORD(v200[1]))
        {
          if (*((_DWORD *)v17 + 4) == LODWORD(v200[1]))
            goto LABEL_38;
        }
        else if ((v20 & v18) != v15)
        {
          goto LABEL_30;
        }
        v17 = (uint64_t *)*v17;
        if (!v17)
          goto LABEL_30;
      }
    }
    while (1)
    {
      v19 = v17[1];
      if (v19 == LODWORD(v200[1]))
        break;
      if (v19 >= v13)
        v19 %= v13;
      if (v19 != v15)
        goto LABEL_30;
LABEL_20:
      v17 = (uint64_t *)*v17;
      if (!v17)
        goto LABEL_30;
    }
    if (*((_DWORD *)v17 + 4) != LODWORD(v200[1]))
      goto LABEL_20;
LABEL_38:
    v21 = v17[81] == v17[80];
    if (v12)
      goto LABEL_31;
LABEL_32:
    if (v21)
    {
      v22 = v196;
      if ((unint64_t)v196 >= v197)
      {
        v6 = sub_20FCBCE70(&__p, v4);
      }
      else
      {
        v23 = *(_OWORD *)v4;
        v24 = *(_OWORD *)(v4 + 16);
        *(_QWORD *)(v196 + 29) = *(_QWORD *)(v4 + 29);
        *((_QWORD *)v22 + 5) = 0;
        *(_OWORD *)v22 = v23;
        *((_OWORD *)v22 + 1) = v24;
        *((_QWORD *)v22 + 6) = 0;
        *((_QWORD *)v22 + 7) = 0;
        v26 = *(_BYTE **)(v4 + 40);
        v25 = *(_BYTE **)(v4 + 48);
        v27 = v25 - v26;
        if (v25 != v26)
        {
          if (v27 < 0)
            sub_20E867F44();
          v28 = (char *)operator new(v25 - v26);
          *((_QWORD *)v22 + 5) = v28;
          *((_QWORD *)v22 + 6) = v28;
          v29 = &v28[4 * (v27 >> 2)];
          *((_QWORD *)v22 + 7) = v29;
          memcpy(v28, v26, v27);
          *((_QWORD *)v22 + 6) = v29;
        }
        v6 = v22 + 64;
      }
      v196 = v6;
    }
    v4 += 64;
    if (v4 != v3)
      continue;
    break;
  }
  v30 = v196;
  if (__p == v196)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 96) = 0;
    if (v30)
      goto LABEL_236;
    return;
  }
  memset(v198, 0, 24);
  sub_20ED9C3C4((uint64_t)v198, (v196 - (_BYTE *)__p) >> 6);
  v31 = (char *)__p;
  v192 = v196;
  if (__p != v196)
  {
    while (1)
    {
      v32 = *((unsigned int *)v31 + 4);
      v33 = a1[3];
      if (0xEEEEEEEEEEEEEEEFLL * ((a1[4] - v33) >> 4) <= v32 >> 16)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/src/CameraSetFeatures.cpp", 342, (uint64_t)"camera_stream.camera_id < camera_descriptor_stores.size()", 57, (uint64_t)&unk_2102BAB52, 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_248;
        }
        v33 = a1[3];
      }
      v34 = v33 + 240 * (v32 >> 16);
      v35 = *(_QWORD *)(v34 + 24);
      v36 = *(_QWORD *)(v34 + 32);
      v37 = (uint64_t *)(v34 + 24);
      if ((unsigned __int16)v32 >= (unint64_t)((v36 - v35) >> 4))
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/src/CameraSetFeatures.cpp", 344, (uint64_t)"camera_stream.stream_id < store.NumStreams()", 44, (uint64_t)&unk_2102BAB52, 0, (void (*)(void **))sub_21023DDB0))
        {
LABEL_248:
          abort();
        }
        v35 = *v37;
      }
      v38 = *(_QWORD *)(v35 + 16 * (unsigned __int16)v32);
      v39 = *(_QWORD *)(v38 + 56);
      v40 = *(_QWORD *)(v38 + 64);
      memset(v200, 0, 24);
      v41 = v40 - v39;
      if (v40 != v39)
        break;
      v54 = 0;
      v42 = 0;
      v205 = (char *)(v40 - v39);
      *(_QWORD *)v206 = 0;
      *(_QWORD *)&v206[8] = 0;
      v55 = (uint64_t *)*((_QWORD *)&v198[0] + 1);
      if (*((_QWORD *)&v198[0] + 1) < *(_QWORD *)&v198[1])
        goto LABEL_43;
LABEL_78:
      *((_QWORD *)&v198[0] + 1) = sub_20ED9C854((char **)v198, (uint64_t)&v205);
      if (v205)
        operator delete(v205);
LABEL_44:
      v31 += 64;
      if (v31 == v192)
      {
        v31 = (char *)__p;
        v56 = v196;
        goto LABEL_85;
      }
    }
    if (v41 < 0)
      sub_20E867F44();
    v42 = operator new(v40 - v39);
    *((_QWORD *)&v200[0] + 1) = v42;
    *(_QWORD *)&v200[1] = &v42[8 * (v41 >> 5)];
    v41 = (uint64_t)v42;
    while (2)
    {
      while (1)
      {
        v44 = *(_DWORD *)(v39 + 8);
        v43 = *(_DWORD *)(v39 + 12);
        v199 = *(_OWORD *)(v39 + 16);
        if ((unint64_t)v42 >= *(_QWORD *)&v200[1])
          break;
        *v42 = v44;
        v42[1] = v43;
        v42[2] = v44;
        v42[3] = v43;
        *((_OWORD *)v42 + 1) = v199;
        v42 += 8;
        v39 += 32;
        if (v39 == v40)
          goto LABEL_75;
      }
      v45 = ((uint64_t)v42 - v41) >> 5;
      v46 = v45 + 1;
      if ((unint64_t)(v45 + 1) >> 59)
      {
        *(_QWORD *)&v200[0] = v41;
        *((_QWORD *)&v200[0] + 1) = v42;
        sub_20E867F44();
      }
      v47 = *(_QWORD *)&v200[1] - v41;
      if ((*(_QWORD *)&v200[1] - v41) >> 4 > v46)
        v46 = v47 >> 4;
      if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFE0)
        v48 = 0x7FFFFFFFFFFFFFFLL;
      else
        v48 = v46;
      if (v48)
      {
        if (v48 >> 59)
        {
          *(_QWORD *)&v200[0] = v41;
          *((_QWORD *)&v200[0] + 1) = v42;
          sub_20E877A38();
        }
        v49 = (char *)operator new(32 * v48);
      }
      else
      {
        v49 = 0;
      }
      v50 = &v49[32 * v45];
      *(_DWORD *)v50 = v44;
      *((_DWORD *)v50 + 1) = v43;
      *((_DWORD *)v50 + 2) = v44;
      *((_DWORD *)v50 + 3) = v43;
      *((_OWORD *)v50 + 1) = v199;
      if (v42 == (_DWORD *)v41)
      {
        v53 = &v49[32 * v45];
        v42 = v50 + 32;
        *(_QWORD *)&v200[1] = &v49[32 * v48];
        if (v41)
          goto LABEL_70;
      }
      else
      {
        v51 = &v49[32 * v45];
        do
        {
          v52 = *((_OWORD *)v42 - 1);
          v53 = v51 - 32;
          *((_OWORD *)v51 - 2) = *((_OWORD *)v42 - 2);
          *((_OWORD *)v51 - 1) = v52;
          v42 -= 8;
          v51 -= 32;
        }
        while (v42 != (_DWORD *)v41);
        v42 = v50 + 32;
        *(_QWORD *)&v200[1] = &v49[32 * v48];
        if (v41)
LABEL_70:
          operator delete((void *)v41);
      }
      v41 = (uint64_t)v53;
      v39 += 32;
      if (v39 == v40)
      {
LABEL_75:
        v54 = *(_QWORD *)&v200[1];
        v205 = (char *)v41;
        *(_QWORD *)v206 = v42;
        *(_QWORD *)&v206[8] = *(_QWORD *)&v200[1];
        v55 = (uint64_t *)*((_QWORD *)&v198[0] + 1);
        if (*((_QWORD *)&v198[0] + 1) >= *(_QWORD *)&v198[1])
          goto LABEL_78;
LABEL_43:
        *v55 = v41;
        v55[1] = (uint64_t)v42;
        v55[2] = v54;
        *((_QWORD *)&v198[0] + 1) = v55 + 3;
        goto LABEL_44;
      }
      continue;
    }
  }
  v56 = __p;
LABEL_85:
  v188 = *(char **)&v198[0];
  v194 = v198[0];
  v205 = 0;
  *(_QWORD *)v206 = 0;
  *(_QWORD *)&v206[8] = 0;
  sub_20FCBCC44((uint64_t)&v205, (v56 - v31) >> 6);
  v57 = (char *)__p;
  v58 = v196;
  if (__p != v196)
  {
    while (2)
    {
      v59 = *((unsigned int *)v57 + 4);
      v60 = v59 >> 16;
      v61 = a1[3];
      if (0xEEEEEEEEEEEEEEEFLL * ((a1[4] - v61) >> 4) <= v59 >> 16)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/src/CameraSetFeatures.cpp", 363, (uint64_t)"camera_stream.camera_id < camera_descriptor_stores.size()", 57, (uint64_t)&unk_2102BAB52, 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_247;
        }
        v61 = a1[3];
      }
      if ((unsigned __int16)v59 >= (unint64_t)((uint64_t)(*(_QWORD *)(v61 + 240 * v60 + 32)
                                                               - *(_QWORD *)(v61 + 240 * v60 + 24)) >> 4)
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/src/CameraSetFeatures.cpp", 365, (uint64_t)"camera_stream.stream_id < store.NumStreams()", 44, (uint64_t)&unk_2102BAB52, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_247:
        abort();
      }
      v62 = *(_QWORD *)(v61 + 240 * v60 + 72) + 408 * (unsigned __int16)v59;
      LOBYTE(v200[0]) = 0;
      v204 = 0;
      if (*(_BYTE *)(v62 + 400))
      {
        v200[0] = *(_OWORD *)v62;
        v63 = *(_OWORD *)(v62 + 16);
        v64 = *(_OWORD *)(v62 + 32);
        v65 = *(_OWORD *)(v62 + 48);
        *(_OWORD *)((char *)&v200[3] + 9) = *(_OWORD *)(v62 + 57);
        v200[2] = v64;
        v200[3] = v65;
        v200[1] = v63;
        *(_QWORD *)&v201 = *(_QWORD *)(v62 + 80);
        v66 = *(_QWORD *)(v62 + 88);
        *((_QWORD *)&v201 + 1) = v66;
        if (v66)
        {
          v67 = (unint64_t *)(v66 + 8);
          do
            v68 = __ldxr(v67);
          while (__stxr(v68 + 1, v67));
        }
        *(_QWORD *)&v202 = *(_QWORD *)(v62 + 96);
        v69 = *(_QWORD *)(v62 + 104);
        *((_QWORD *)&v202 + 1) = v69;
        if (v69)
        {
          v70 = (unint64_t *)(v69 + 8);
          do
            v71 = __ldxr(v70);
          while (__stxr(v71 + 1, v70));
        }
        memcpy(v203, (const void *)(v62 + 112), sizeof(v203));
        v204 = 1;
      }
      v72 = *(_QWORD *)v206;
      if (*(_QWORD *)v206 >= *(_QWORD *)&v206[8])
      {
        v76 = sub_20F0271DC((uint64_t *)&v205, (uint64_t)v200);
      }
      else
      {
        **(_BYTE **)v206 = 0;
        *(_BYTE *)(v72 + 400) = 0;
        if (v204)
        {
          *(_OWORD *)v72 = v200[0];
          v73 = v200[1];
          v74 = v200[2];
          v75 = v200[3];
          *(_OWORD *)(v72 + 57) = *(_OWORD *)((char *)&v200[3] + 9);
          *(_OWORD *)(v72 + 32) = v74;
          *(_OWORD *)(v72 + 48) = v75;
          *(_OWORD *)(v72 + 16) = v73;
          *(_OWORD *)(v72 + 80) = v201;
          v201 = 0uLL;
          *(_OWORD *)(v72 + 96) = v202;
          v202 = 0uLL;
          memcpy((void *)(v72 + 112), v203, 0x120uLL);
          *(_BYTE *)(v72 + 400) = 1;
        }
        v76 = v72 + 408;
      }
      *(_QWORD *)v206 = v76;
      if (v204)
      {
        v77 = (std::__shared_weak_count *)*((_QWORD *)&v202 + 1);
        if (!*((_QWORD *)&v202 + 1))
          goto LABEL_111;
        v78 = (unint64_t *)(*((_QWORD *)&v202 + 1) + 8);
        do
          v79 = __ldaxr(v78);
        while (__stlxr(v79 - 1, v78));
        if (!v79)
        {
          ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
          std::__shared_weak_count::__release_weak(v77);
          v80 = (std::__shared_weak_count *)*((_QWORD *)&v201 + 1);
          if (*((_QWORD *)&v201 + 1))
          {
LABEL_112:
            p_shared_owners = (unint64_t *)&v80->__shared_owners_;
            do
              v82 = __ldaxr(p_shared_owners);
            while (__stlxr(v82 - 1, p_shared_owners));
            if (!v82)
            {
              ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
              std::__shared_weak_count::__release_weak(v80);
            }
          }
        }
        else
        {
LABEL_111:
          v80 = (std::__shared_weak_count *)*((_QWORD *)&v201 + 1);
          if (*((_QWORD *)&v201 + 1))
            goto LABEL_112;
        }
      }
      v57 += 64;
      if (v57 == v58)
      {
        v57 = (char *)__p;
        v83 = v196;
        goto LABEL_120;
      }
      continue;
    }
  }
  v83 = __p;
LABEL_120:
  v84 = v205;
  *(_QWORD *)&v198[0] = v205;
  v187 = *(char **)v206;
  *(_OWORD *)((char *)v198 + 8) = *(_OWORD *)v206;
  v201 = 0u;
  memset(v200, 0, sizeof(v200));
  v85 = v83 - v57;
  if (!v85)
    goto LABEL_210;
  v86 = 0;
  v87 = v85 >> 6;
  v190 = v205;
  v88 = v188;
  v193 = v85 >> 6;
  while (2)
  {
    v90 = &v88[24 * v86];
    v91 = v90 + 8;
    if (*(_QWORD *)v90 == *((_QWORD *)v90 + 1))
      goto LABEL_124;
    v92 = &v84[408 * v86];
    if (!v92[400])
      goto LABEL_124;
    v93 = (char *)__p + 64 * v86;
    v94 = *((_QWORD *)&v200[0] + 1);
    if (*((_QWORD *)&v200[0] + 1) >= *(_QWORD *)&v200[1])
    {
      v102 = sub_20FCBCE70(v200, (uint64_t)v93);
    }
    else
    {
      v95 = *(_OWORD *)v93;
      v96 = *((_OWORD *)v93 + 1);
      *(_QWORD *)(*((_QWORD *)&v200[0] + 1) + 29) = *(_QWORD *)(v93 + 29);
      *(_QWORD *)(v94 + 40) = 0;
      *(_OWORD *)v94 = v95;
      *(_OWORD *)(v94 + 16) = v96;
      *(_QWORD *)(v94 + 48) = 0;
      *(_QWORD *)(v94 + 56) = 0;
      v98 = (_BYTE *)*((_QWORD *)v93 + 5);
      v97 = (_BYTE *)*((_QWORD *)v93 + 6);
      v99 = v97 - v98;
      if (v97 != v98)
      {
        if (v99 < 0)
          sub_20E867F44();
        v100 = (char *)operator new(v97 - v98);
        *(_QWORD *)(v94 + 40) = v100;
        *(_QWORD *)(v94 + 48) = v100;
        v101 = &v100[4 * (v99 >> 2)];
        *(_QWORD *)(v94 + 56) = v101;
        memcpy(v100, v98, v99);
        *(_QWORD *)(v94 + 48) = v101;
      }
      v102 = (char *)(v94 + 64);
    }
    *((_QWORD *)&v200[0] + 1) = v102;
    v103 = *(_QWORD **)&v200[2];
    if (*(_QWORD *)&v200[2] >= *((_QWORD *)&v200[2] + 1))
    {
      v109 = (_QWORD *)*((_QWORD *)&v200[1] + 1);
      v110 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v200[2] - *((_QWORD *)&v200[1] + 1)) >> 3);
      v111 = v110 + 1;
      if (v110 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20E867F44();
      v112 = *(const void **)v90;
      v113 = *((_QWORD *)v90 + 1);
      if (0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v200[2] + 1) - *((_QWORD *)&v200[1] + 1)) >> 3) > v111)
        v111 = 0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v200[2] + 1) - *((_QWORD *)&v200[1] + 1)) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v200[2] + 1) - *((_QWORD *)&v200[1] + 1)) >> 3) >= 0x555555555555555)
        v114 = 0xAAAAAAAAAAAAAAALL;
      else
        v114 = v111;
      v207 = (char *)&v200[2] + 8;
      if (v114)
      {
        if (v114 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_251;
        v115 = (char *)operator new(24 * v114);
      }
      else
      {
        v115 = 0;
      }
      v116 = &v115[24 * v110];
      v205 = v115;
      *(_QWORD *)v206 = v116;
      *((_QWORD *)v116 + 1) = 0;
      *(_QWORD *)&v206[8] = v116;
      *(_QWORD *)&v206[16] = &v115[24 * v114];
      v191 = *(_QWORD *)&v206[16];
      *((_QWORD *)v116 + 2) = 0;
      *(_QWORD *)v116 = 0;
      v117 = v113 - (_QWORD)v112;
      if (v117)
      {
        if (v117 < 0)
          sub_20E867F44();
        v118 = v112;
        v119 = (char *)operator new(v117);
        *(_QWORD *)v116 = v119;
        v120 = &v119[32 * (v117 >> 5)];
        *((_QWORD *)v116 + 2) = v120;
        memcpy(v119, v118, v117);
        *((_QWORD *)v116 + 1) = v120;
      }
      v108 = v116 + 24;
      *(_QWORD *)&v206[8] = v116 + 24;
      if (v103 == v109)
      {
        *((_QWORD *)&v200[1] + 1) = v116;
        *(_QWORD *)&v200[2] = v116 + 24;
        *((_QWORD *)&v200[2] + 1) = v191;
        v84 = v190;
      }
      else
      {
        do
        {
          v121 = v116;
          *((_QWORD *)v116 - 2) = 0;
          *((_QWORD *)v116 - 1) = 0;
          v122 = *(_OWORD *)(v103 - 3);
          v103 -= 3;
          *(_OWORD *)(v116 - 24) = v122;
          v116 -= 24;
          *((_QWORD *)v121 - 1) = v103[2];
          *v103 = 0;
          v103[1] = 0;
          v103[2] = 0;
        }
        while (v103 != v109);
        v103 = (_QWORD *)*((_QWORD *)&v200[1] + 1);
        v123 = *(_QWORD **)&v200[2];
        *((_QWORD *)&v200[1] + 1) = v116;
        v200[2] = *(_OWORD *)&v206[8];
        v108 = *(_QWORD **)&v206[8];
        v84 = v190;
        if (v123 != v103)
        {
          v124 = v123;
          do
          {
            v126 = (void *)*(v124 - 3);
            v124 -= 3;
            v125 = v126;
            if (v126)
            {
              *(v123 - 2) = v125;
              operator delete(v125);
            }
            v123 = v124;
          }
          while (v124 != v103);
        }
      }
      if (v103)
        operator delete(v103);
    }
    else
    {
      **(_OWORD **)&v200[2] = 0uLL;
      v103[2] = 0;
      v104 = *(const void **)v90;
      v105 = *v91 - *(_QWORD *)v90;
      if (*v91 != *(_QWORD *)v90)
      {
        if (v105 < 0)
          sub_20E867F44();
        v106 = (char *)operator new(*v91 - *(_QWORD *)v90);
        *v103 = v106;
        v103[1] = v106;
        v107 = &v106[32 * (v105 >> 5)];
        v103[2] = v107;
        memcpy(v106, v104, v105);
        v103[1] = v107;
      }
      v108 = v103 + 3;
    }
    *(_QWORD *)&v200[2] = v108;
    v127 = *((_QWORD *)&v200[3] + 1);
    if (*((_QWORD *)&v200[3] + 1) < *(_QWORD *)&v200[4])
    {
      **((_OWORD **)&v200[3] + 1) = *(_OWORD *)v92;
      v128 = *((_OWORD *)v92 + 1);
      v129 = *((_OWORD *)v92 + 2);
      v130 = *((_OWORD *)v92 + 3);
      *(_OWORD *)(v127 + 57) = *(_OWORD *)(v92 + 57);
      *(_OWORD *)(v127 + 32) = v129;
      *(_OWORD *)(v127 + 48) = v130;
      *(_OWORD *)(v127 + 16) = v128;
      *(_QWORD *)(v127 + 80) = *((_QWORD *)v92 + 10);
      v131 = *((_QWORD *)v92 + 11);
      *(_QWORD *)(v127 + 88) = v131;
      if (v131)
      {
        v132 = (unint64_t *)(v131 + 8);
        do
          v133 = __ldxr(v132);
        while (__stxr(v133 + 1, v132));
      }
      *(_QWORD *)(v127 + 96) = *((_QWORD *)v92 + 12);
      v134 = *((_QWORD *)v92 + 13);
      *(_QWORD *)(v127 + 104) = v134;
      if (v134)
      {
        v135 = (unint64_t *)(v134 + 8);
        do
          v136 = __ldxr(v135);
        while (__stxr(v136 + 1, v135));
      }
      memcpy((void *)(v127 + 112), v92 + 112, 0x120uLL);
      v89 = (char *)(v127 + 400);
      goto LABEL_123;
    }
    v137 = 0x8F5C28F5C28F5C29 * ((uint64_t)(*((_QWORD *)&v200[3] + 1) - *(_QWORD *)&v200[3]) >> 4);
    v138 = v137 + 1;
    if (v137 + 1 > 0xA3D70A3D70A3D7)
      sub_20E867F44();
    if (0x1EB851EB851EB852 * ((uint64_t)(*(_QWORD *)&v200[4] - *(_QWORD *)&v200[3]) >> 4) > v138)
      v138 = 0x1EB851EB851EB852 * ((uint64_t)(*(_QWORD *)&v200[4] - *(_QWORD *)&v200[3]) >> 4);
    if (0x8F5C28F5C28F5C29 * ((uint64_t)(*(_QWORD *)&v200[4] - *(_QWORD *)&v200[3]) >> 4) >= 0x51EB851EB851EBLL)
      v139 = 0xA3D70A3D70A3D7;
    else
      v139 = v138;
    if (v139)
    {
      if (v139 > 0xA3D70A3D70A3D7)
LABEL_251:
        sub_20E877A38();
      v140 = (char *)operator new(400 * v139);
    }
    else
    {
      v140 = 0;
    }
    v141 = &v140[400 * v137];
    *(_OWORD *)v141 = *(_OWORD *)v92;
    v142 = *((_OWORD *)v92 + 1);
    v143 = *((_OWORD *)v92 + 2);
    v144 = *((_OWORD *)v92 + 3);
    *(_OWORD *)(v141 + 57) = *(_OWORD *)(v92 + 57);
    *((_OWORD *)v141 + 2) = v143;
    *((_OWORD *)v141 + 3) = v144;
    *((_OWORD *)v141 + 1) = v142;
    *((_QWORD *)v141 + 10) = *((_QWORD *)v92 + 10);
    v145 = *((_QWORD *)v92 + 11);
    *((_QWORD *)v141 + 11) = v145;
    if (v145)
    {
      v146 = (unint64_t *)(v145 + 8);
      do
        v147 = __ldxr(v146);
      while (__stxr(v147 + 1, v146));
    }
    *((_QWORD *)v141 + 12) = *((_QWORD *)v92 + 12);
    v148 = *((_QWORD *)v92 + 13);
    *((_QWORD *)v141 + 13) = v148;
    if (v148)
    {
      v149 = (unint64_t *)(v148 + 8);
      do
        v150 = __ldxr(v149);
      while (__stxr(v150 + 1, v149));
    }
    v151 = &v140[400 * v139];
    memcpy(&v140[400 * v137 + 112], v92 + 112, 0x120uLL);
    v89 = v141 + 400;
    v153 = (char *)*((_QWORD *)&v200[3] + 1);
    v152 = *(char **)&v200[3];
    if (*((_QWORD *)&v200[3] + 1) == *(_QWORD *)&v200[3])
    {
      *(_QWORD *)&v200[3] = v141;
      *((_QWORD *)&v200[3] + 1) = v141 + 400;
      *(_QWORD *)&v200[4] = v151;
      goto LABEL_203;
    }
    v154 = 0;
    do
    {
      v155 = &v141[v154 - 400];
      *(_OWORD *)v155 = *(_OWORD *)&v153[v154 - 400];
      v156 = *(_OWORD *)&v153[v154 - 384];
      v157 = *(_OWORD *)&v153[v154 - 368];
      v158 = *(_OWORD *)&v153[v154 - 352];
      *(_OWORD *)(v155 + 57) = *(_OWORD *)&v153[v154 - 343];
      *((_OWORD *)v155 + 2) = v157;
      *((_OWORD *)v155 + 3) = v158;
      *((_OWORD *)v155 + 1) = v156;
      v159 = &v153[v154 - 320];
      *(_OWORD *)&v141[v154 - 320] = *(_OWORD *)v159;
      *(_QWORD *)&v153[v154 - 312] = 0;
      *(_QWORD *)v159 = 0;
      v160 = &v153[v154 - 304];
      *(_OWORD *)&v141[v154 - 304] = *(_OWORD *)v160;
      *(_QWORD *)&v153[v154 - 296] = 0;
      *(_QWORD *)v160 = 0;
      memcpy(&v141[v154 - 288], &v153[v154 - 288], 0x120uLL);
      v154 -= 400;
    }
    while (&v153[v154] != v152);
    v161 = (char *)*((_QWORD *)&v200[3] + 1);
    v153 = *(char **)&v200[3];
    *(_QWORD *)&v200[3] = &v141[v154];
    *((_QWORD *)&v200[3] + 1) = v141 + 400;
    *(_QWORD *)&v200[4] = v151;
    if (v161 != v153)
    {
      do
      {
        v162 = v161 - 400;
        v163 = (std::__shared_weak_count *)*((_QWORD *)v161 - 37);
        if (!v163)
          goto LABEL_195;
        v164 = (unint64_t *)&v163->__shared_owners_;
        do
          v165 = __ldaxr(v164);
        while (__stlxr(v165 - 1, v164));
        if (!v165)
        {
          ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
          std::__shared_weak_count::__release_weak(v163);
          v166 = (std::__shared_weak_count *)*((_QWORD *)v161 - 39);
          if (v166)
          {
LABEL_196:
            v167 = (unint64_t *)&v166->__shared_owners_;
            do
              v168 = __ldaxr(v167);
            while (__stlxr(v168 - 1, v167));
            if (!v168)
            {
              ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
              std::__shared_weak_count::__release_weak(v166);
            }
          }
        }
        else
        {
LABEL_195:
          v166 = (std::__shared_weak_count *)*((_QWORD *)v161 - 39);
          if (v166)
            goto LABEL_196;
        }
        v161 -= 400;
      }
      while (v162 != v153);
    }
LABEL_203:
    if (v153)
      operator delete(v153);
LABEL_123:
    *((_QWORD *)&v200[3] + 1) = v89;
    v88 = v188;
    v87 = v193;
LABEL_124:
    if (++v86 != v87)
      continue;
    break;
  }
  if (*(_QWORD *)&v200[0] == *((_QWORD *)&v200[0] + 1))
  {
LABEL_210:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 96) = 0;
    sub_20EE62D7C((void **)v200);
    v172 = v188;
    if (!v84)
      goto LABEL_228;
LABEL_211:
    v173 = v187;
    if (v187 == v84)
    {
LABEL_227:
      operator delete(v84);
      goto LABEL_228;
    }
    while (1)
    {
      if (*(v173 - 8))
      {
        v174 = (std::__shared_weak_count *)*((_QWORD *)v173 - 38);
        if (!v174)
          goto LABEL_219;
        v175 = (unint64_t *)&v174->__shared_owners_;
        do
          v176 = __ldaxr(v175);
        while (__stlxr(v176 - 1, v175));
        if (!v176)
        {
          ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
          std::__shared_weak_count::__release_weak(v174);
          v177 = (std::__shared_weak_count *)*((_QWORD *)v173 - 40);
          if (v177)
          {
LABEL_220:
            v178 = (unint64_t *)&v177->__shared_owners_;
            do
              v179 = __ldaxr(v178);
            while (__stlxr(v179 - 1, v178));
            if (!v179)
            {
              ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
              std::__shared_weak_count::__release_weak(v177);
            }
          }
        }
        else
        {
LABEL_219:
          v177 = (std::__shared_weak_count *)*((_QWORD *)v173 - 40);
          if (v177)
            goto LABEL_220;
        }
      }
      v173 -= 408;
      if (v173 == v84)
      {
        v84 = *(char **)&v198[0];
        v172 = (char *)v194;
        goto LABEL_227;
      }
    }
  }
  v169 = 0;
  v170 = (uint64_t)(*((_QWORD *)&v200[0] + 1) - *(_QWORD *)&v200[0]) >> 6;
  v171 = 24;
  do
  {
    kdebug_trace();
    v169 += 24;
    v171 += 64;
    --v170;
  }
  while (v170);
  *((_BYTE *)sub_20EE64874((_QWORD *)a3, (uint64_t)v200) + 96) = 1;
  sub_20EE62D7C((void **)v200);
  v172 = v188;
  if (v84)
    goto LABEL_211;
LABEL_228:
  if (v172)
  {
    v180 = (char *)*((_QWORD *)&v194 + 1);
    if (*((char **)&v194 + 1) != v172)
    {
      v181 = (char *)*((_QWORD *)&v194 + 1);
      do
      {
        v183 = (void *)*((_QWORD *)v181 - 3);
        v181 -= 24;
        v182 = v183;
        if (v183)
        {
          *((_QWORD *)v180 - 2) = v182;
          operator delete(v182);
        }
        v180 = v181;
      }
      while (v181 != v172);
    }
    operator delete(v172);
  }
  v30 = (char *)__p;
  if (__p)
  {
LABEL_236:
    v184 = v196;
    v185 = v30;
    if (v196 != v30)
    {
      do
      {
        v186 = (void *)*((_QWORD *)v184 - 3);
        if (v186)
        {
          *((_QWORD *)v184 - 2) = v186;
          operator delete(v186);
        }
        v184 -= 64;
      }
      while (v184 != v30);
      v185 = __p;
    }
    v196 = v30;
    operator delete(v185);
  }
}

void sub_20FCB8A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33)
{
  sub_20EE62D7C(&a33);
  sub_20FCB8BE4(&a27);
  sub_20E9DD680(&a21);
  sub_20EE62F10(&a24);
  _Unwind_Resume(a1);
}

void sub_20FCB8B68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39)
{
  if (__p)
  {
    a39 = (uint64_t)__p;
    operator delete(__p);
    sub_20EE62F10(&a24);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20FCB8BD4);
}

void sub_20FCB8B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  sub_20EE62F10((void **)va);
  _Unwind_Resume(a1);
}

void sub_20FCB8BA8()
{
  uint64_t v0;

  if (v0)
    JUMPOUT(0x20FCB8BC8);
  JUMPOUT(0x20FCB8BCCLL);
}

void **sub_20FCB8BE4(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 == v2)
    {
LABEL_18:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      if (*(v3 - 8))
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 38);
        if (!v5)
          goto LABEL_10;
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
          v8 = (std::__shared_weak_count *)*((_QWORD *)v3 - 40);
          if (v8)
          {
LABEL_11:
            v9 = (unint64_t *)&v8->__shared_owners_;
            do
              v10 = __ldaxr(v9);
            while (__stlxr(v10 - 1, v9));
            if (!v10)
            {
              ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
              std::__shared_weak_count::__release_weak(v8);
            }
          }
        }
        else
        {
LABEL_10:
          v8 = (std::__shared_weak_count *)*((_QWORD *)v3 - 40);
          if (v8)
            goto LABEL_11;
        }
      }
      v3 -= 408;
      if (v3 == v2)
      {
        v4 = *a1;
        goto LABEL_18;
      }
    }
  }
  return a1;
}

void sub_20FCB8CD4(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  int v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  __int128 v55;
  char *v56;
  void *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  void *v66;
  char *v67;
  void *v68;
  void *v69;
  char *v70;
  void *v71;
  char *v72;
  void (***v73)(char *);
  void (**v74)(char *);
  BOOL v75;
  char *v76;
  _QWORD *v77;
  char *v78;
  char *v79;
  void *v80;
  void *v81;
  void (***v82)(_QWORD);
  void *v83;
  void (***v84)(_QWORD);
  void (***v85)(_QWORD);
  void (**v86)(_QWORD);
  char *v87;
  _QWORD *v88;
  char *v89;
  void *v90;
  void *v91;
  char *v92;
  char *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t *v101;
  uint64_t v102;
  void *__p[2];
  void *v104;
  void *v105;
  char *v106;
  void *v107;
  char *v108;
  void *v109[2];
  unint64_t v110;
  void *v111[2];
  void *v112;
  __int128 v113;
  unint64_t v114;
  void *v115[2];
  void *v116[2];
  __int128 v117;
  void *v118[4];
  __int128 v119;
  __int128 v120;
  _BYTE v121[288];
  char v122;
  __int128 v123;

  v5 = (a2[1] - *a2) >> 5;
  __p[1] = 0;
  v104 = 0;
  __p[0] = 0;
  sub_20FCBCC44((uint64_t)__p, v5);
  v101 = a2;
  v6 = *a2;
  v7 = a2[1];
  if (v6 == v7)
  {
    v33 = v6;
    v32 = v101;
    goto LABEL_36;
  }
  do
  {
    v8 = *(unsigned int *)(v6 + 16);
    v9 = v8 >> 16;
    v10 = *(_QWORD *)(a1 + 24);
    if (0xEEEEEEEEEEEEEEEFLL * ((*(_QWORD *)(a1 + 32) - v10) >> 4) <= v8 >> 16)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/src/CameraSetFeatures.cpp", 404, (uint64_t)"camera_stream.camera_id < camera_descriptor_stores.size()", 57, (uint64_t)&unk_2102BAB52, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_146;
      }
      v10 = *(_QWORD *)(a1 + 24);
    }
    if ((unsigned __int16)v8 >= (unint64_t)((uint64_t)(*(_QWORD *)(v10 + 240 * v9 + 32)
                                                            - *(_QWORD *)(v10 + 240 * v9 + 24)) >> 4)
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/src/CameraSetFeatures.cpp", 406, (uint64_t)"camera_stream.stream_id < store.NumStreams()", 44, (uint64_t)&unk_2102BAB52, 0, (void (*)(void **))sub_21023DDB0))
    {
LABEL_146:
      abort();
    }
    v11 = *(_QWORD *)(v10 + 240 * v9 + 72) + 408 * (unsigned __int16)v8;
    LOBYTE(v115[0]) = 0;
    v122 = 0;
    if (*(_BYTE *)(v11 + 400))
    {
      *(_OWORD *)v115 = *(_OWORD *)v11;
      v12 = *(_OWORD *)(v11 + 16);
      v13 = *(_OWORD *)(v11 + 32);
      v14 = *(_OWORD *)(v11 + 48);
      *(_OWORD *)((char *)&v118[1] + 1) = *(_OWORD *)(v11 + 57);
      v117 = v13;
      *(_OWORD *)v118 = v14;
      *(_OWORD *)v116 = v12;
      *(_QWORD *)&v119 = *(_QWORD *)(v11 + 80);
      v15 = *(_QWORD *)(v11 + 88);
      *((_QWORD *)&v119 + 1) = v15;
      if (v15)
      {
        v16 = (unint64_t *)(v15 + 8);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      *(_QWORD *)&v120 = *(_QWORD *)(v11 + 96);
      v18 = *(_QWORD *)(v11 + 104);
      *((_QWORD *)&v120 + 1) = v18;
      if (v18)
      {
        v19 = (unint64_t *)(v18 + 8);
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
      memcpy(v121, (const void *)(v11 + 112), sizeof(v121));
      v122 = 1;
    }
    v21 = (char *)__p[1];
    if (__p[1] >= v104)
    {
      v25 = (void *)sub_20F0271DC((uint64_t *)__p, (uint64_t)v115);
    }
    else
    {
      *(_BYTE *)__p[1] = 0;
      v21[400] = 0;
      if (v122)
      {
        *(_OWORD *)v21 = *(_OWORD *)v115;
        v22 = *(_OWORD *)v116;
        v23 = v117;
        v24 = *(_OWORD *)v118;
        *(_OWORD *)(v21 + 57) = *(_OWORD *)((char *)&v118[1] + 1);
        *((_OWORD *)v21 + 2) = v23;
        *((_OWORD *)v21 + 3) = v24;
        *((_OWORD *)v21 + 1) = v22;
        *((_OWORD *)v21 + 5) = v119;
        v119 = 0uLL;
        *((_OWORD *)v21 + 6) = v120;
        v120 = 0uLL;
        memcpy(v21 + 112, v121, 0x120uLL);
        v21[400] = 1;
      }
      v25 = v21 + 408;
    }
    __p[1] = v25;
    if (v122)
    {
      v26 = (std::__shared_weak_count *)*((_QWORD *)&v120 + 1);
      if (!*((_QWORD *)&v120 + 1))
        goto LABEL_27;
      v27 = (unint64_t *)(*((_QWORD *)&v120 + 1) + 8);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
        v29 = (std::__shared_weak_count *)*((_QWORD *)&v119 + 1);
        if (!*((_QWORD *)&v119 + 1))
          goto LABEL_3;
      }
      else
      {
LABEL_27:
        v29 = (std::__shared_weak_count *)*((_QWORD *)&v119 + 1);
        if (!*((_QWORD *)&v119 + 1))
          goto LABEL_3;
      }
      p_shared_owners = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldaxr(p_shared_owners);
      while (__stlxr(v31 - 1, p_shared_owners));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
LABEL_3:
    v6 += 32;
  }
  while (v6 != v7);
  v32 = v101;
  v6 = *v101;
  v33 = v101[1];
LABEL_36:
  *(_OWORD *)v111 = *(_OWORD *)__p;
  v112 = v104;
  v113 = 0uLL;
  v114 = 0;
  sub_20ED9C3C4((uint64_t)&v113, (v33 - v6) >> 5);
  v34 = *v32;
  v102 = v32[1];
  if (*v32 == v102)
  {
    v59 = *v32;
    goto LABEL_77;
  }
  while (2)
  {
    v35 = *(unsigned int *)(v34 + 16);
    v36 = *(_QWORD *)(a1 + 24);
    if (0xEEEEEEEEEEEEEEEFLL * ((*(_QWORD *)(a1 + 32) - v36) >> 4) <= v35 >> 16)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/src/CameraSetFeatures.cpp", 414, (uint64_t)"camera_stream.camera_id < camera_descriptor_stores.size()", 57, (uint64_t)&unk_2102BAB52, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_147;
      }
      v36 = *(_QWORD *)(a1 + 24);
    }
    v37 = v36 + 240 * (v35 >> 16);
    v38 = *(_QWORD *)(v37 + 24);
    v39 = *(_QWORD *)(v37 + 32);
    v40 = (uint64_t *)(v37 + 24);
    if ((unsigned __int16)v35 >= (unint64_t)((v39 - v38) >> 4))
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/src/CameraSetFeatures.cpp", 416, (uint64_t)"camera_stream.stream_id < store.NumStreams()", 44, (uint64_t)&unk_2102BAB52, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_147:
        abort();
      }
      v38 = *v40;
    }
    v41 = *(_QWORD *)(v38 + 16 * (unsigned __int16)v35);
    v42 = *(_QWORD *)(v41 + 56);
    v43 = *(_QWORD *)(v41 + 64);
    v115[0] = 0;
    v115[1] = 0;
    v116[0] = 0;
    v44 = v43 - v42;
    if (v43 != v42)
    {
      if (v44 < 0)
        sub_20E867F44();
      v45 = operator new(v43 - v42);
      v116[0] = &v45[8 * (v44 >> 5)];
      v44 = (uint64_t)v45;
      while (1)
      {
        while (1)
        {
          v47 = *(_DWORD *)(v42 + 8);
          v46 = *(_DWORD *)(v42 + 12);
          v123 = *(_OWORD *)(v42 + 16);
          if (v45 >= v116[0])
            break;
          *v45 = v47;
          v45[1] = v46;
          v45[2] = v47;
          v45[3] = v46;
          *((_OWORD *)v45 + 1) = v123;
          v45 += 8;
          v42 += 32;
          if (v42 == v43)
            goto LABEL_70;
        }
        v48 = ((uint64_t)v45 - v44) >> 5;
        v49 = v48 + 1;
        if ((unint64_t)(v48 + 1) >> 59)
        {
          v115[0] = (void *)v44;
          v115[1] = v45;
          sub_20E867F44();
        }
        v50 = (uint64_t)v116[0] - v44;
        if (((uint64_t)v116[0] - v44) >> 4 > v49)
          v49 = v50 >> 4;
        if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFE0)
          v51 = 0x7FFFFFFFFFFFFFFLL;
        else
          v51 = v49;
        if (v51)
        {
          if (v51 >> 59)
          {
            v115[0] = (void *)v44;
            v115[1] = v45;
            sub_20E877A38();
          }
          v52 = (char *)operator new(32 * v51);
        }
        else
        {
          v52 = 0;
        }
        v53 = &v52[32 * v48];
        *(_DWORD *)v53 = v47;
        *((_DWORD *)v53 + 1) = v46;
        *((_DWORD *)v53 + 2) = v47;
        *((_DWORD *)v53 + 3) = v46;
        *((_OWORD *)v53 + 1) = v123;
        if (v45 == (_DWORD *)v44)
        {
          v56 = &v52[32 * v48];
          v45 = v53 + 32;
          v116[0] = &v52[32 * v51];
          if (!v44)
            goto LABEL_66;
        }
        else
        {
          v54 = &v52[32 * v48];
          do
          {
            v55 = *((_OWORD *)v45 - 1);
            v56 = v54 - 32;
            *((_OWORD *)v54 - 2) = *((_OWORD *)v45 - 2);
            *((_OWORD *)v54 - 1) = v55;
            v45 -= 8;
            v54 -= 32;
          }
          while (v45 != (_DWORD *)v44);
          v45 = v53 + 32;
          v116[0] = &v52[32 * v51];
          if (!v44)
            goto LABEL_66;
        }
        operator delete((void *)v44);
LABEL_66:
        v44 = (uint64_t)v56;
        v42 += 32;
        if (v42 == v43)
        {
LABEL_70:
          v57 = v116[0];
          __p[0] = (void *)v44;
          __p[1] = v45;
          v104 = v116[0];
          v58 = (uint64_t *)*((_QWORD *)&v113 + 1);
          if (*((_QWORD *)&v113 + 1) >= v114)
            goto LABEL_73;
LABEL_38:
          *v58 = v44;
          v58[1] = (uint64_t)v45;
          v58[2] = (uint64_t)v57;
          *((_QWORD *)&v113 + 1) = v58 + 3;
          goto LABEL_39;
        }
      }
    }
    v57 = 0;
    v45 = 0;
    __p[0] = (void *)(v43 - v42);
    __p[1] = 0;
    v104 = 0;
    v58 = (uint64_t *)*((_QWORD *)&v113 + 1);
    if (*((_QWORD *)&v113 + 1) < v114)
      goto LABEL_38;
LABEL_73:
    *((_QWORD *)&v113 + 1) = sub_20ED9C854((char **)&v113, (uint64_t)__p);
    if (__p[0])
      operator delete(__p[0]);
LABEL_39:
    v34 += 32;
    if (v34 != v102)
      continue;
    break;
  }
  v34 = *v101;
  v59 = v101[1];
LABEL_77:
  *(_OWORD *)v109 = v113;
  v110 = v114;
  v117 = 0u;
  memset(v118, 0, 24);
  *(_OWORD *)v115 = 0u;
  *(_OWORD *)v116 = 0u;
  v60 = v59 - v34;
  if (!v60)
    goto LABEL_101;
  v61 = 0;
  v62 = v60 >> 5;
  do
  {
    v63 = (char *)v111[0] + 408 * v61;
    if (v63[400])
    {
      sub_20FD8B0E8(__p, (_OWORD *)(*v101 + 32 * v61), v63, (uint64_t)v109[0] + 24 * v61);
      sub_20F2FC1D4((uint64_t)v115, (uint64_t)__p);
      v64 = (char *)v107;
      if (v107)
      {
        v65 = v108;
        v66 = v107;
        if (v108 != v107)
        {
          v67 = v108;
          do
          {
            v69 = (void *)*((_QWORD *)v67 - 3);
            v67 -= 24;
            v68 = v69;
            if (v69)
            {
              *((_QWORD *)v65 - 2) = v68;
              operator delete(v68);
            }
            v65 = v67;
          }
          while (v67 != v64);
          v66 = v107;
        }
        v108 = v64;
        operator delete(v66);
      }
      v70 = (char *)v105;
      if (v105)
      {
        v71 = v105;
        if (v106 != v105)
        {
          v72 = v106 - 24;
          v73 = (void (***)(char *))(v106 - 24);
          do
          {
            v74 = *v73;
            v73 -= 3;
            (*v74)(v72);
            v75 = v72 == v70;
            v72 = (char *)v73;
          }
          while (!v75);
          v71 = v105;
        }
        v106 = v70;
        operator delete(v71);
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    ++v61;
  }
  while (v61 != v62);
  if (v115[0] == v115[1])
  {
LABEL_101:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 72) = 0;
    v76 = (char *)v118[0];
    if (!v118[0])
      goto LABEL_109;
  }
  else
  {
    *((_BYTE *)sub_20EE65B84((_QWORD *)a3, (uint64_t)v115) + 72) = 1;
    v76 = (char *)v118[0];
    if (!v118[0])
      goto LABEL_109;
  }
  v77 = v118[1];
  v78 = v76;
  if (v118[1] != v76)
  {
    v79 = (char *)v118[1];
    do
    {
      v81 = (void *)*((_QWORD *)v79 - 3);
      v79 -= 24;
      v80 = v81;
      if (v81)
      {
        *(v77 - 2) = v80;
        operator delete(v80);
      }
      v77 = v79;
    }
    while (v79 != v76);
    v78 = (char *)v118[0];
  }
  v118[1] = v76;
  operator delete(v78);
LABEL_109:
  v82 = (void (***)(_QWORD))v116[1];
  if (v116[1])
  {
    v83 = v116[1];
    if ((void *)v117 != v116[1])
    {
      v84 = (void (***)(_QWORD))(v117 - 24);
      v85 = (void (***)(_QWORD))(v117 - 24);
      do
      {
        v86 = *v85;
        v85 -= 3;
        (*v86)(v84);
        v75 = v84 == v82;
        v84 = v85;
      }
      while (!v75);
      v83 = v116[1];
    }
    *(_QWORD *)&v117 = v82;
    operator delete(v83);
  }
  if (v115[0])
  {
    v115[1] = v115[0];
    operator delete(v115[0]);
  }
  v87 = (char *)v109[0];
  if (v109[0])
  {
    v88 = v109[1];
    if (v109[1] != v109[0])
    {
      v89 = (char *)v109[1];
      do
      {
        v91 = (void *)*((_QWORD *)v89 - 3);
        v89 -= 24;
        v90 = v91;
        if (v91)
        {
          *(v88 - 2) = v90;
          operator delete(v90);
        }
        v88 = v89;
      }
      while (v89 != v87);
    }
    operator delete(v87);
  }
  v92 = (char *)v111[0];
  if (v111[0])
  {
    v93 = (char *)v111[1];
    if (v111[1] == v111[0])
    {
LABEL_142:
      operator delete(v92);
      return;
    }
    while (2)
    {
      if (*(v93 - 8))
      {
        v94 = (std::__shared_weak_count *)*((_QWORD *)v93 - 38);
        if (!v94)
          goto LABEL_134;
        v95 = (unint64_t *)&v94->__shared_owners_;
        do
          v96 = __ldaxr(v95);
        while (__stlxr(v96 - 1, v95));
        if (!v96)
        {
          ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
          std::__shared_weak_count::__release_weak(v94);
          v97 = (std::__shared_weak_count *)*((_QWORD *)v93 - 40);
          if (v97)
            goto LABEL_135;
        }
        else
        {
LABEL_134:
          v97 = (std::__shared_weak_count *)*((_QWORD *)v93 - 40);
          if (v97)
          {
LABEL_135:
            v98 = (unint64_t *)&v97->__shared_owners_;
            do
              v99 = __ldaxr(v98);
            while (__stlxr(v99 - 1, v98));
            if (!v99)
            {
              ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
              std::__shared_weak_count::__release_weak(v97);
            }
          }
        }
      }
      v93 -= 408;
      if (v93 == v92)
      {
        v92 = (char *)v111[0];
        goto LABEL_142;
      }
      continue;
    }
  }
}

void sub_20FCB9604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  sub_20FCB9730((uint64_t)&a35);
  sub_20E9DD680(&a23);
  sub_20FCB8BE4(&a27);
  _Unwind_Resume(a1);
}

void sub_20FCB9698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20FCB8BE4((void **)va);
  _Unwind_Resume(a1);
}

void sub_20FCB96AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20FCB8BE4((void **)va);
  _Unwind_Resume(a1);
}

void sub_20FCB96C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31)
{
  sub_20E9DD680(&a31);
  sub_20FCB8BE4(&a27);
  _Unwind_Resume(a1);
}

void sub_20FCB96DC()
{
  uint64_t v0;

  if (!v0)
    JUMPOUT(0x20FCB96F4);
  JUMPOUT(0x20FCB9714);
}

uint64_t sub_20FCB9730(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void (***v8)(_QWORD);
  void (***v9)(_QWORD);
  void *v10;
  void (***v11)(_QWORD);
  void (***v12)(_QWORD);
  void (**v13)(_QWORD);
  BOOL v14;
  void *v15;

  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 56);
    v4 = *(void **)(a1 + 48);
    if (v3 != v2)
    {
      v5 = *(_QWORD *)(a1 + 56);
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *(void **)(a1 + 48);
    }
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v4);
  }
  v8 = *(void (****)(_QWORD))(a1 + 24);
  if (v8)
  {
    v9 = *(void (****)(_QWORD))(a1 + 32);
    v10 = *(void **)(a1 + 24);
    if (v9 != v8)
    {
      v11 = v9 - 3;
      v12 = v9 - 3;
      do
      {
        v13 = *v12;
        v12 -= 3;
        (*v13)(v11);
        v14 = v11 == v8;
        v11 = v12;
      }
      while (!v14);
      v10 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v8;
    operator delete(v10);
  }
  v15 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v15;
    operator delete(v15);
  }
  return a1;
}

void sub_20FCB97FC(int8x8_t *a1@<X0>, char **a2@<X1>, _BYTE *a3@<X8>)
{
  char *v5;
  char *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  void **v11;
  _QWORD *v12;
  uint64_t (**v13)();
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  _QWORD *v18;
  void **v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;
  _QWORD *v26;
  _QWORD *v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  int8x8_t *v34;
  _QWORD *v35;
  _BYTE *v36;
  _QWORD *v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  _QWORD *v66;
  char *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  __int128 v81;
  char *v82;
  char *v83;
  void *v84;
  void *v85;
  _DWORD *v86;
  int v87;
  char v88;
  uint64_t v89;
  _BYTE *v90;
  _BYTE *v91;
  size_t v92;
  unint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  char *v98;
  char *v99;
  void *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  _BYTE *v104;
  char *v105;
  uint64_t v106;
  __int128 v108;
  char *v109;
  _QWORD v110[3];
  _QWORD *v111;
  __int128 v112;
  _QWORD v113[3];
  _QWORD *v114;
  char *v115;
  void *v116[2];
  void *__p[2];
  _BYTE v118[24];
  _QWORD v119[3];
  _QWORD *v120;
  char *v121;
  char *v122;
  _QWORD v123[3];
  _QWORD *v124;
  char *v125;
  char *i;
  _QWORD v127[3];
  _QWORD *v128;
  char *v129;
  __int128 v130;
  char *v131;
  uint64_t v132;

  v132 = *MEMORY[0x24BDAC8D0];
  v5 = *a2;
  v6 = a2[1];
  v7 = v127;
  i = v5;
  v127[0] = &off_24CA04F60;
  v127[1] = a1;
  v128 = v127;
  v129 = v6;
  if (v5 == v6)
  {
    v9 = v127;
  }
  else
  {
    v8 = v127;
    while (!(*(unsigned int (**)(_QWORD *))(*v8 + 48))(v8))
    {
      v5 = i + 288;
      i = v5;
      if (v5 == v129)
        goto LABEL_9;
      v8 = v128;
      if (!v128)
        sub_20E86D37C();
    }
    v5 = i;
LABEL_9:
    v9 = v128;
  }
  v10 = v123;
  v122 = v6;
  v123[0] = &off_24CA04F60;
  v123[1] = a1;
  v124 = v123;
  v125 = v6;
  v116[0] = v5;
  v11 = &v116[1];
  if (!v9)
  {
    v12 = v118;
    goto LABEL_14;
  }
  if (v9 != v127)
  {
    v12 = &v128;
    *(_QWORD *)v118 = v9;
LABEL_14:
    *v12 = 0;
    *(_QWORD *)&v118[8] = v129;
    *(_QWORD *)&v118[16] = v6;
    v13 = &off_24CA04F60;
    goto LABEL_15;
  }
  *(_QWORD *)v118 = &v116[1];
  (*(void (**)(_QWORD *, void **))(v127[0] + 24))(v127, &v116[1]);
  *(_QWORD *)&v118[8] = v129;
  *(_QWORD *)&v118[16] = v122;
  if (!v124)
  {
    v120 = 0;
    v14 = 0;
    v121 = v125;
    if (v123)
      goto LABEL_16;
    goto LABEL_21;
  }
  if (v124 != v123)
  {
    v120 = v124;
    v124 = 0;
    v14 = 0;
    v121 = v125;
    if (v123)
      goto LABEL_16;
LABEL_21:
    v15 = 4;
    goto LABEL_22;
  }
  v13 = (uint64_t (**)())v123[0];
LABEL_15:
  v120 = v119;
  ((void (*)(_QWORD *))v13[3])(v123);
  v14 = v124;
  v121 = v125;
  if (v124 == v123)
    goto LABEL_21;
LABEL_16:
  if (!v14)
    goto LABEL_23;
  v15 = 5;
  v10 = v14;
LABEL_22:
  (*(void (**)(_QWORD *))(*v10 + 8 * v15))(v10);
LABEL_23:
  if (v128 == v127)
  {
    v16 = 4;
  }
  else
  {
    if (!v128)
      goto LABEL_28;
    v16 = 5;
    v7 = v128;
  }
  (*(void (**)(_QWORD *))(*v7 + 8 * v16))(v7);
LABEL_28:
  v109 = (char *)v116[0];
  v17 = (void **)&v109;
  v18 = v110;
  if (!*(_QWORD *)v118)
  {
LABEL_31:
    v17[4] = 0;
    goto LABEL_33;
  }
  if (*(void ***)v118 != &v116[1])
  {
    v17 = v116;
    v111 = *(_QWORD **)v118;
    goto LABEL_31;
  }
  v111 = v110;
  (*((void (**)(void **, _QWORD *))v116[1] + 3))(&v116[1], v110);
LABEL_33:
  v112 = *(_OWORD *)&v118[8];
  v19 = (void **)&v109;
  v20 = v113;
  if (!v120)
  {
LABEL_36:
    v19[10] = 0;
    goto LABEL_38;
  }
  v19 = v116;
  if (v120 != v119)
  {
    v114 = v120;
    goto LABEL_36;
  }
  v114 = v113;
  (*(void (**)(void))(v119[0] + 24))();
LABEL_38:
  v21 = v120;
  v115 = v121;
  if (v120 == v119)
  {
    v22 = 4;
    v21 = v119;
  }
  else
  {
    if (!v120)
      goto LABEL_43;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_43:
  if (*(void ***)v118 == &v116[1])
  {
    v23 = 4;
  }
  else
  {
    if (!*(_QWORD *)v118)
      goto LABEL_48;
    v23 = 5;
    v11 = *(void ***)v118;
  }
  (*((void (**)(void **))*v11 + v23))(v11);
LABEL_48:
  v24 = (uint64_t)v111;
  v116[0] = v109;
  v25 = &v116[1];
  if (!v111)
  {
LABEL_51:
    *(_QWORD *)v118 = v24;
    goto LABEL_53;
  }
  if (v111 != v110)
  {
    v24 = (*(uint64_t (**)(void))(*v111 + 16))();
    goto LABEL_51;
  }
  *(_QWORD *)v118 = &v116[1];
  (*(void (**)(_QWORD *, void **))(v110[0] + 24))(v110, &v116[1]);
LABEL_53:
  i = (char *)*((_QWORD *)&v112 + 1);
  *(_QWORD *)&v118[8] = v112;
  if (!v114)
  {
    v28 = v116[0] == *((void **)&v112 + 1);
    goto LABEL_63;
  }
  v26 = v127;
  if (v114 == v113)
  {
    v128 = v127;
    (*(void (**)(_QWORD *, _QWORD *))(v113[0] + 24))(v113, v127);
    v27 = v128;
  }
  else
  {
    v27 = (_QWORD *)(*(uint64_t (**)(void))(*v114 + 16))();
    v128 = v27;
  }
  v129 = v115;
  v28 = v116[0] == i;
  if (v27 == v127)
  {
    v29 = 4;
  }
  else
  {
    if (!v27)
      goto LABEL_63;
    v29 = 5;
    v26 = v27;
  }
  (*(void (**)(_QWORD *))(*v26 + 8 * v29))(v26);
LABEL_63:
  if (*(void ***)v118 == &v116[1])
  {
    v30 = 4;
  }
  else
  {
    if (!*(_QWORD *)v118)
      goto LABEL_68;
    v30 = 5;
    v25 = *(void ***)v118;
  }
  (*((void (**)(void **))*v25 + v30))(v25);
LABEL_68:
  if (v28)
  {
    *a3 = 0;
    a3[48] = 0;
    goto LABEL_181;
  }
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v118 = 0u;
  *(_OWORD *)v116 = 0u;
  v31 = (uint64_t)v111;
  i = v109;
  if (!v111)
    goto LABEL_73;
  if (v111 != v110)
  {
    v31 = (*(uint64_t (**)(_QWORD *))(*v111 + 16))(v111);
LABEL_73:
    v128 = (_QWORD *)v31;
    goto LABEL_75;
  }
  v128 = v127;
  (*(void (**)(_QWORD *, _QWORD *))(v110[0] + 24))(v110, v127);
LABEL_75:
  v122 = (char *)*((_QWORD *)&v112 + 1);
  v129 = (char *)v112;
  v32 = (uint64_t)v114;
  if (!v114)
  {
LABEL_78:
    v124 = (_QWORD *)v32;
    goto LABEL_80;
  }
  if (v114 != v113)
  {
    v32 = (*(uint64_t (**)(void))(*v114 + 16))();
    goto LABEL_78;
  }
  v124 = v123;
  (*(void (**)(_QWORD *, _QWORD *))(v113[0] + 24))(v113, v123);
LABEL_80:
  v104 = a3;
  v125 = v115;
  v33 = i;
  v34 = a1;
  while (v33 != v122)
  {
    v39 = HIWORD(*((_DWORD *)v33 + 4));
    v40 = (unsigned __int16)*((_DWORD *)v33 + 4);
    v41 = sub_20FCBA6DC(v34, v39, v40);
    if (!v42)
      goto LABEL_153;
    v43 = v41;
    v44 = *(_QWORD *)(v41 + 72);
    v45 = *(_QWORD *)(v41 + 80);
    v130 = 0uLL;
    v131 = 0;
    if (v45 == v44)
      goto LABEL_153;
    if ((0xCCCCCCCCCCCCCCCDLL * ((v45 - v44) >> 3)) >> 60)
      sub_20E867F44();
    v46 = (char *)operator new(0xCCCCCCCCCCCCCCD0 * ((v45 - v44) >> 3));
    *(_QWORD *)&v130 = v46;
    *((_QWORD *)&v130 + 1) = v46;
    v131 = &v46[0xCCCCCCCCCCCCCCD0 * ((v45 - v44) >> 3)];
    do
    {
      while (1)
      {
        while (1)
        {
          v108 = *(_OWORD *)(v44 + 16);
          if (v46 >= v131)
            break;
          *(_OWORD *)v46 = *(_OWORD *)(v44 + 16);
          v46 += 16;
          *((_QWORD *)&v130 + 1) = v46;
          v44 += 40;
          if (v44 == v45)
            goto LABEL_108;
        }
        v47 = (char *)v130;
        v48 = (uint64_t)&v46[-v130] >> 4;
        v49 = v48 + 1;
        if ((unint64_t)(v48 + 1) >> 60)
          sub_20E867F44();
        v50 = (uint64_t)&v131[-v130];
        if ((uint64_t)&v131[-v130] >> 3 > v49)
          v49 = v50 >> 3;
        if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF0)
          v51 = 0xFFFFFFFFFFFFFFFLL;
        else
          v51 = v49;
        if (v51)
        {
          if (v51 >> 60)
            sub_20E877A38();
          v52 = (char *)operator new(16 * v51);
        }
        else
        {
          v52 = 0;
        }
        v53 = &v52[16 * v48];
        *(_OWORD *)v53 = v108;
        v54 = v53 + 16;
        if (v46 == v47)
        {
          *(_QWORD *)&v130 = v53;
          *((_QWORD *)&v130 + 1) = v53 + 16;
          v131 = &v52[16 * v51];
          break;
        }
        do
        {
          *((_OWORD *)v53 - 1) = *((_OWORD *)v46 - 1);
          v53 -= 16;
          v46 -= 16;
        }
        while (v46 != v47);
        v46 = (char *)v130;
        *(_QWORD *)&v130 = v53;
        *((_QWORD *)&v130 + 1) = v54;
        v131 = &v52[16 * v51];
        if (v46)
          break;
        v46 = v54;
        *((_QWORD *)&v130 + 1) = v54;
        v44 += 40;
        if (v44 == v45)
          goto LABEL_108;
      }
      operator delete(v46);
      v46 = v54;
      *((_QWORD *)&v130 + 1) = v54;
      v44 += 40;
    }
    while (v44 != v45);
LABEL_108:
    if ((char *)v130 != v46)
    {
      v106 = v130;
      v105 = v131;
      v55 = *(uint64_t **)(v43 + 24);
      v56 = *((_DWORD *)v55 + 248);
      if (v56 != -1)
        goto LABEL_112;
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_2102BAB52, 0, (void (*)(void **))sub_21023DDB0))
      {
        v56 = *((_DWORD *)v55 + 248);
LABEL_112:
        if (v56)
        {
          v57 = *v55;
          v58 = v55[1];
          v59 = v55[2];
          v60 = v55[3];
          v61 = v55[4];
          v62 = v55[5];
          v130 = *((_OWORD *)v55 + 3);
          v131 = (char *)v55[8];
          v63 = (char *)v116[1];
          if (v116[1] >= __p[0])
          {
            v67 = (char *)v116[0];
            v68 = 0x8E38E38E38E38E39 * (((char *)v116[1] - (char *)v116[0]) >> 5);
            v69 = v68 + 1;
            if (v68 + 1 > 0xE38E38E38E38E3)
              sub_20E867F44();
            if (0x1C71C71C71C71C72 * (((char *)__p[0] - (char *)v116[0]) >> 5) > v69)
              v69 = 0x1C71C71C71C71C72 * (((char *)__p[0] - (char *)v116[0]) >> 5);
            if (0x8E38E38E38E38E39 * (((char *)__p[0] - (char *)v116[0]) >> 5) >= 0x71C71C71C71C71)
              v70 = 0xE38E38E38E38E3;
            else
              v70 = v69;
            if (v70)
            {
              if (v70 > 0xE38E38E38E38E3)
                sub_20E877A38();
              v71 = (char *)operator new(288 * v70);
            }
            else
            {
              v71 = 0;
            }
            v72 = &v71[288 * v68];
            memcpy(v72, v33, 0x120uLL);
            v73 = v72;
            if (v63 != v67)
            {
              do
              {
                v63 -= 288;
                v73 -= 288;
                memcpy(v73, v63, 0x120uLL);
              }
              while (v63 != v67);
              v63 = v67;
            }
            v116[0] = v73;
            v116[1] = v72 + 288;
            __p[0] = &v71[288 * v70];
            if (v63)
              operator delete(v63);
            v116[1] = v72 + 288;
            v64 = *(_QWORD *)&v118[8];
            v65 = *(char **)v118;
            if (*(_QWORD *)v118 >= *(_QWORD *)&v118[8])
              goto LABEL_134;
LABEL_115:
            v34 = a1;
            *(_QWORD *)v65 = v106;
            *((_QWORD *)v65 + 1) = v46;
            v66 = v65 + 24;
            *((_QWORD *)v65 + 2) = v105;
          }
          else
          {
            memcpy(v116[1], v33, 0x120uLL);
            v116[1] = v63 + 288;
            v64 = *(_QWORD *)&v118[8];
            v65 = *(char **)v118;
            if (*(_QWORD *)v118 < *(_QWORD *)&v118[8])
              goto LABEL_115;
LABEL_134:
            v74 = (char *)__p[1];
            v75 = 0xAAAAAAAAAAAAAAABLL * ((v65 - (char *)__p[1]) >> 3);
            v76 = v75 + 1;
            if (v75 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_20E867F44();
            v77 = 0xAAAAAAAAAAAAAAABLL * ((int64_t)(v64 - (unint64_t)__p[1]) >> 3);
            if (2 * v77 > v76)
              v76 = 2 * v77;
            if (v77 >= 0x555555555555555)
              v78 = 0xAAAAAAAAAAAAAAALL;
            else
              v78 = v76;
            if (v78 > 0xAAAAAAAAAAAAAAALL)
              sub_20E877A38();
            v79 = (char *)operator new(24 * v78);
            v80 = &v79[24 * v75];
            *(_QWORD *)v80 = v106;
            *((_QWORD *)v80 + 1) = v46;
            *((_QWORD *)v80 + 2) = v105;
            v66 = v80 + 24;
            if (v65 == v74)
            {
              __p[1] = v80;
              *(_QWORD *)v118 = v80 + 24;
              *(_QWORD *)&v118[8] = &v79[24 * v78];
              v34 = a1;
            }
            else
            {
              v34 = a1;
              do
              {
                v81 = *(_OWORD *)(v65 - 24);
                v65 -= 24;
                *(_OWORD *)(v80 - 24) = v81;
                v80 -= 24;
                *((_QWORD *)v80 + 2) = *((_QWORD *)v65 + 2);
                *(_QWORD *)v65 = 0;
                *((_QWORD *)v65 + 1) = 0;
                *((_QWORD *)v65 + 2) = 0;
              }
              while (v65 != v74);
              v65 = (char *)__p[1];
              v82 = *(char **)v118;
              __p[1] = v80;
              *(_QWORD *)v118 = v66;
              *(_QWORD *)&v118[8] = &v79[24 * v78];
              if (v82 != v65)
              {
                v83 = v82;
                do
                {
                  v85 = (void *)*((_QWORD *)v83 - 3);
                  v83 -= 24;
                  v84 = v85;
                  if (v85)
                  {
                    *((_QWORD *)v82 - 2) = v84;
                    operator delete(v84);
                  }
                  v82 = v83;
                }
                while (v83 != v65);
              }
            }
            if (v65)
              operator delete(v65);
          }
          *(_QWORD *)v118 = v66;
          v86 = v116[1];
          *((_DWORD *)v116[1] - 64) = v39;
          *(v86 - 63) = v40;
          v87 = *((unsigned __int8 *)v86 - 104);
          *((_QWORD *)v86 - 31) = v57;
          *((_QWORD *)v86 - 30) = v58;
          *((_QWORD *)v86 - 29) = v59;
          *((_QWORD *)v86 - 28) = v60;
          *((_QWORD *)v86 - 27) = v61;
          *((_QWORD *)v86 - 26) = v62;
          *(_OWORD *)(v86 - 50) = v130;
          *((_QWORD *)v86 - 23) = v131;
          *((_QWORD *)v86 - 22) = v57;
          *((_QWORD *)v86 - 21) = v58;
          *((_QWORD *)v86 - 20) = v59;
          *((_QWORD *)v86 - 19) = v60;
          *((_QWORD *)v86 - 18) = v61;
          *((_QWORD *)v86 - 17) = v62;
          *((_QWORD *)v86 - 16) = 0;
          *((_QWORD *)v86 - 15) = 0;
          *((_QWORD *)v86 - 14) = 0x3FF0000000000000;
          if (v87)
          {
LABEL_153:
            v33 = i + 288;
            i = v33;
            if (v33 != v129)
              goto LABEL_154;
          }
          else
          {
            *((_BYTE *)v86 - 104) = 1;
            v33 = i + 288;
            i = v33;
            if (v33 != v129)
              goto LABEL_154;
          }
          continue;
        }
        sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)&unk_2102BAB52, 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
      }
      abort();
    }
    operator delete(v46);
    v34 = a1;
    v33 = i + 288;
    for (i = v33; v33 != v129; i = v33)
    {
LABEL_154:
      if (!v128)
        sub_20E86D37C();
      v88 = (*(uint64_t (**)(_QWORD *, char *))(*v128 + 48))(v128, v33);
      v33 = i;
      if ((v88 & 1) != 0)
        break;
      v33 = i + 288;
    }
  }
  v35 = v123;
  if (v124 == v123)
  {
    v38 = 4;
    v36 = v104;
    v37 = v127;
  }
  else
  {
    v36 = v104;
    v37 = v127;
    if (!v124)
      goto LABEL_162;
    v38 = 5;
    v35 = v124;
  }
  (*(void (**)(void))(*v35 + 8 * v38))();
LABEL_162:
  if (v128 == v127)
  {
    v89 = 4;
  }
  else
  {
    if (!v128)
      goto LABEL_167;
    v89 = 5;
    v37 = v128;
  }
  (*(void (**)(_QWORD *))(*v37 + 8 * v89))(v37);
LABEL_167:
  v91 = v116[0];
  v90 = v116[1];
  if (v116[0] != v116[1])
  {
    *(_QWORD *)v36 = 0;
    *((_QWORD *)v36 + 1) = 0;
    *((_QWORD *)v36 + 2) = 0;
    v92 = v90 - v91;
    v93 = 0x8E38E38E38E38E39 * ((v90 - v91) >> 5);
    if (v93 > 0xE38E38E38E38E3)
      sub_20E867F44();
    v94 = (char *)operator new(v92);
    *(_QWORD *)v36 = v94;
    v95 = &v94[288 * v93];
    *((_QWORD *)v36 + 2) = v95;
    memcpy(v94, v91, v92);
    *((_QWORD *)v36 + 1) = v95;
    sub_20EE65438((_QWORD *)v36 + 3, (uint64_t *)&__p[1]);
    v36[48] = 1;
    v96 = (char *)__p[1];
    v20 = v113;
    v18 = v110;
    if (!__p[1])
      goto LABEL_179;
    goto LABEL_172;
  }
  *v36 = 0;
  v36[48] = 0;
  v96 = (char *)__p[1];
  v20 = v113;
  v18 = v110;
  if (__p[1])
  {
LABEL_172:
    v97 = *(char **)v118;
    v98 = v96;
    if (*(char **)v118 != v96)
    {
      v99 = *(char **)v118;
      do
      {
        v101 = (void *)*((_QWORD *)v99 - 3);
        v99 -= 24;
        v100 = v101;
        if (v101)
        {
          *((_QWORD *)v97 - 2) = v100;
          operator delete(v100);
        }
        v97 = v99;
      }
      while (v99 != v96);
      v98 = (char *)__p[1];
    }
    *(_QWORD *)v118 = v96;
    operator delete(v98);
  }
LABEL_179:
  if (v116[0])
  {
    v116[1] = v116[0];
    operator delete(v116[0]);
  }
LABEL_181:
  if (v114 == v113)
  {
    v102 = 4;
  }
  else
  {
    if (!v114)
      goto LABEL_186;
    v102 = 5;
    v20 = v114;
  }
  (*(void (**)(_QWORD *))(*v20 + 8 * v102))(v20);
LABEL_186:
  if (v111 == v110)
  {
    v103 = 4;
  }
  else
  {
    if (!v111)
      return;
    v103 = 5;
    v18 = v111;
  }
  (*(void (**)(_QWORD *))(*v18 + 8 * v103))(v18);
}

void sub_20FCBA510(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FCBA630(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  void *v15;
  uint64_t v16;

  if (v15)
  {
    *(_QWORD *)(v16 - 168) = v15;
    operator delete(v15);
  }
  JUMPOUT(0x20FCBA664);
}

void sub_20FCBA658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14, _QWORD *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,_QWORD *a49)
{
  uint64_t v49;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;

  v52 = a14;
  v51 = a15;
  if (a49 == a14)
  {
    v53 = 4;
  }
  else
  {
    if (!a49)
      goto LABEL_6;
    v53 = 5;
    v52 = a49;
  }
  (*(void (**)(_QWORD *))(*v52 + 8 * v53))(v52);
LABEL_6:
  v54 = *(_QWORD **)(v49 - 192);
  if (v54 == a15)
  {
    v55 = 4;
  }
  else
  {
    if (!v54)
      goto LABEL_11;
    v55 = 5;
    v51 = *(_QWORD **)(v49 - 192);
  }
  (*(void (**)(_QWORD *))(*v51 + 8 * v55))(v51);
LABEL_11:
  sub_20FCBA900(&a33);
  sub_20EA737F0(&a21);
  _Unwind_Resume(a1);
}

uint64_t sub_20FCBA6DC(int8x8_t *a1, unsigned int a2, unsigned int a3)
{
  int8x8_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  if (a2 >= 0x10000
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0)|| a3 >= 0x10000&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 39, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0)|| a2 >= 0x10000
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0)|| a3 >= 0x10000&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v6 = a1[9];
  if (!*(_QWORD *)&v6)
    return (uint64_t)v6;
  v7 = (unsigned __int16)a3 | ((unsigned __int16)a2 << 16);
  v8 = (uint8x8_t)vcnt_s8(v6);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    v9 = v7;
    if (*(_QWORD *)&v6 <= v7)
      v9 = v7 % *(_QWORD *)&v6;
  }
  else
  {
    v9 = (v6.i32[0] - 1) & v7;
  }
  v10 = *(uint64_t ***)(*(_QWORD *)&a1[8] + 8 * v9);
  if (!v10 || (v11 = *v10) == 0)
    return 0;
  if (v8.u32[0] < 2uLL)
  {
    v12 = *(_QWORD *)&v6 - 1;
    while (1)
    {
      v14 = v11[1];
      if (v14 == v7)
      {
        if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
          return ((_BYTE)v11 + 24);
      }
      else if ((v14 & v12) != v9)
      {
        return 0;
      }
      v11 = (uint64_t *)*v11;
      if (!v11)
        return 0;
    }
  }
  while (1)
  {
    v13 = v11[1];
    if (v13 == v7)
      break;
    if (v13 >= *(_QWORD *)&v6)
      v13 %= *(_QWORD *)&v6;
    if (v13 != v9)
      return 0;
LABEL_19:
    v11 = (uint64_t *)*v11;
    if (!v11)
      return 0;
  }
  if (*((_DWORD *)v11 + 4) != (_DWORD)v7)
    goto LABEL_19;
  return ((_BYTE)v11 + 24);
}

uint64_t sub_20FCBA900(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(a1 + 24);
    if (v3 != v2)
    {
      v5 = *(_QWORD *)(a1 + 32);
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v4);
  }
  v8 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v8;
    operator delete(v8);
  }
  return a1;
}

void sub_20FCBA984(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X8>)
{
  float v6;
  size_t prime;
  void *v8;
  BOOL v9;
  unint64_t v10;
  uint8x8_t v11;
  uint64_t v12;
  _QWORD *i;
  void *v14;
  char *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t *v18;
  char *v19;
  _OWORD *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  _QWORD *v32;
  _QWORD *v33;
  void *v34;
  uint64_t *v35;
  uint64_t *v36;
  void *v37[2];
  void *__p[2];
  float v39;

  *(_OWORD *)v37 = 0u;
  *(_OWORD *)__p = 0u;
  v39 = 1.0;
  v6 = (float)*(unint64_t *)(a1 + 88);
  prime = (unint64_t)v6;
  if ((unint64_t)v6 == 1)
  {
    prime = 2;
LABEL_17:
    sub_20E8D2B3C((uint64_t)v37, prime);
    goto LABEL_18;
  }
  if ((prime & ((unint64_t)v6 - 1)) != 0)
  {
    prime = std::__next_prime((unint64_t)v6);
    v8 = v37[1];
    v9 = (void *)prime >= v37[1];
    if ((void *)prime > v37[1])
      goto LABEL_17;
  }
  else
  {
    v8 = 0;
    v9 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v9)
  {
    v10 = vcvtps_u32_f32((float)(unint64_t)__p[1] / v39);
    if ((unint64_t)v8 < 3
      || (v11 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v11.i16[0] = vaddlv_u8(v11), v11.u32[0] > 1uLL))
    {
      v10 = std::__next_prime(v10);
    }
    else
    {
      v12 = 1 << -(char)__clz(v10 - 1);
      if (v10 >= 2)
        v10 = v12;
    }
    if (prime <= v10)
      prime = v10;
    if (prime < (unint64_t)v8)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(_QWORD **)(a1 + 80); i; i = (_QWORD *)*i)
  {
    sub_20FCC2C1C((uint64_t)(i + 99), a2, (uint64_t *)&v35);
    v17 = v35;
    v18 = v36;
    if (v35 != v36)
    {
      do
      {
        sub_20F28FE1C((uint64_t)v37, v17, v17);
        v17 += 2;
      }
      while (v17 != v18);
      v17 = v35;
    }
    if (v17)
    {
      v36 = v17;
      operator delete(v17);
    }
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v14 = __p[1];
  if (__p[1])
  {
    if ((unint64_t)__p[1] >> 60)
      sub_20E867F44();
    v15 = (char *)operator new(16 * (uint64_t)__p[1]);
    *a3 = (uint64_t)v15;
    a3[1] = (uint64_t)v15;
    a3[2] = (uint64_t)&v15[16 * (_QWORD)v14];
    v16 = __p[0];
    if (!__p[0])
      goto LABEL_51;
LABEL_33:
    while (1)
    {
      v20 = v16 + 2;
      v21 = a3[2];
      if ((unint64_t)v15 >= v21)
        break;
      *(_OWORD *)v15 = *v20;
      v19 = v15 + 16;
LABEL_32:
      a3[1] = (uint64_t)v19;
      v16 = (_QWORD *)*v16;
      v15 = v19;
      if (!v16)
      {
        v32 = __p[0];
        if (__p[0])
        {
          do
          {
            v33 = (_QWORD *)*v32;
            operator delete(v32);
            v32 = v33;
          }
          while (v33);
        }
        goto LABEL_51;
      }
    }
    v22 = (char *)*a3;
    v23 = (uint64_t)&v15[-*a3] >> 4;
    v24 = v23 + 1;
    if ((unint64_t)(v23 + 1) >> 60)
      sub_20E867F44();
    v25 = v21 - (_QWORD)v22;
    if (v25 >> 3 > v24)
      v24 = v25 >> 3;
    if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0)
      v26 = 0xFFFFFFFFFFFFFFFLL;
    else
      v26 = v24;
    if (v26)
    {
      if (v26 >> 60)
        sub_20E877A38();
      v27 = (char *)operator new(16 * v26);
      v28 = &v27[16 * v23];
      *(_OWORD *)v28 = *v20;
      v29 = (uint64_t)v28;
      if (v15 == v22)
      {
LABEL_43:
        v19 = v28 + 16;
        *a3 = v29;
        a3[1] = (uint64_t)(v28 + 16);
        a3[2] = (uint64_t)&v27[16 * v26];
        if (!v15)
          goto LABEL_32;
        goto LABEL_48;
      }
    }
    else
    {
      v27 = 0;
      v28 = (char *)(16 * v23);
      *(_OWORD *)(16 * v23) = *v20;
      v29 = 16 * v23;
      if (v15 == v22)
        goto LABEL_43;
    }
    do
    {
      v30 = *((_QWORD *)v15 - 2);
      v15 -= 16;
      v31 = *((_DWORD *)v15 + 2);
      *(_QWORD *)(v29 - 16) = v30;
      v29 -= 16;
      *(_DWORD *)(v29 + 8) = v31;
    }
    while (v15 != v22);
    v15 = (char *)*a3;
    v19 = v28 + 16;
    *a3 = v29;
    a3[1] = (uint64_t)(v28 + 16);
    a3[2] = (uint64_t)&v27[16 * v26];
    if (!v15)
      goto LABEL_32;
LABEL_48:
    operator delete(v15);
    goto LABEL_32;
  }
  v15 = 0;
  v16 = __p[0];
  if (__p[0])
    goto LABEL_33;
LABEL_51:
  v34 = v37[0];
  v37[0] = 0;
  if (v34)
    operator delete(v34);
}

void sub_20FCBAC98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E8C25A8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FCBACAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  void *v7;
  va_list va;

  va_start(va, a5);
  v7 = *(void **)v5;
  if (*(_QWORD *)v5)
  {
    *(_QWORD *)(v5 + 8) = v7;
    operator delete(v7);
  }
  sub_20E8C25A8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FCBAD00(uint64_t *a1@<X0>, char **a2@<X8>)
{
  uint64_t v3;
  char *v4;
  const char *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  char *v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  uint64_t j;
  uint64_t v37;
  uint64_t k;
  uint64_t v39;
  uint64_t m;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  _OWORD *v45;
  char *v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  char **v51;
  unint64_t v52;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = *a1;
  v50 = a1[1];
  if (v50 != *a1)
  {
    if ((0x9D89D89D89D89D8ALL * ((v50 - v3) >> 3)) >> 61)
      sub_20E92CED8();
    v4 = (char *)operator new(0xEC4EC4EC4EC4EC50 * ((v50 - v3) >> 3));
    *a2 = v4;
    a2[1] = v4;
    a2[2] = &v4[0xEC4EC4EC4EC4EC50 * ((v50 - v3) >> 3)];
    v5 = "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes"
         "/CameraStreamId.h";
    v51 = a2;
    while (*(_QWORD *)(v3 + 16) == *(_QWORD *)(v3 + 8))
    {
LABEL_4:
      v3 += 104;
      if (v3 == v50)
        return;
    }
    LODWORD(v52) = 0;
    while (1)
    {
      v7 = *(_DWORD *)v3;
      if (*(_DWORD *)v3 >= 0x10000u)
      {
        sub_21023D70C(v5, 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
        v8 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v33 = qword_254A6DE40;
          for (i = qword_254A6DE48; v33 != i; v33 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v33)(*(_QWORD *)(v33 + 8), "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
        }
        v9 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
LABEL_88:
          abort();
        qword_254A6DE58(unk_254A6DE60, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
      }
      if (v52 >= 0x10000)
      {
        sub_21023D70C(v5, 39, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
        v10 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v35 = qword_254A6DE40;
          for (j = qword_254A6DE48; v35 != j; v35 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v35)(*(_QWORD *)(v35 + 8), "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
        }
        v11 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          goto LABEL_88;
        qword_254A6DE58(unk_254A6DE60, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
      }
      if (v7 >= 0x10000)
      {
        sub_21023D70C(v5, 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
        v12 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v37 = qword_254A6DE40;
          for (k = qword_254A6DE48; v37 != k; v37 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v37)(*(_QWORD *)(v37 + 8), "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
        }
        v13 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          goto LABEL_88;
        qword_254A6DE58(unk_254A6DE60, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
      }
      if (v52 >= 0x10000)
      {
        sub_21023D70C(v5, 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
        v14 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v39 = qword_254A6DE40;
          for (m = qword_254A6DE48; v39 != m; v39 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v39)(*(_QWORD *)(v39 + 8), "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
        }
        v15 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          goto LABEL_88;
        qword_254A6DE58(unk_254A6DE60, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
      }
      v16 = v5;
      v17 = v3;
      v18 = (unsigned __int16)v52 | ((unsigned __int16)v7 << 16);
      v19 = *v51;
      v20 = v51[1];
      v21 = v20 - *v51;
      v22 = v21 >> 3;
      v23 = (1 << (v21 >> 3));
      v24 = (unint64_t)v51[2];
      if ((unint64_t)v20 < v24)
      {
        *(_QWORD *)v20 = v18 | (v23 << 32);
        v6 = (uint64_t)(v20 + 8);
        v3 = v17;
        v5 = v16;
        goto LABEL_8;
      }
      v25 = v22 + 1;
      if ((unint64_t)(v22 + 1) >> 61)
        sub_20E92CED8();
      v26 = v24 - (_QWORD)v19;
      if (v26 >> 2 > v25)
        v25 = v26 >> 2;
      v27 = (unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v25;
      if (v27)
      {
        if (v27 >> 61)
          sub_20E877A38();
        v28 = v27;
        v29 = operator new(8 * v27);
        v27 = v28;
        v30 = &v29[8 * v22];
        *(_QWORD *)v30 = v18 | (v23 << 32);
        v6 = (uint64_t)(v30 + 8);
        v31 = (char *)(v20 - v19);
        if (v20 == v19)
        {
LABEL_62:
          v3 = v17;
          v5 = v16;
          *v51 = v30;
          v51[1] = (char *)v6;
          v51[2] = &v29[8 * v27];
          if (!v20)
            goto LABEL_8;
LABEL_70:
          operator delete(v20);
          goto LABEL_8;
        }
      }
      else
      {
        v29 = 0;
        v30 = (char *)(8 * v22);
        *(_QWORD *)(8 * v22) = v18 | (v23 << 32);
        v6 = 8 * v22 + 8;
        v31 = (char *)(v20 - v19);
        if (v20 == v19)
          goto LABEL_62;
      }
      v32 = (unint64_t)(v31 - 8);
      if (v32 < 0x58)
        break;
      v41 = v20 - v29 - (v21 & 0xFFFFFFFFFFFFFFF8);
      v3 = v17;
      v5 = v16;
      if (v41 < 0x20)
        goto LABEL_68;
      v42 = (v32 >> 3) + 1;
      v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
      v44 = &v20[-v43];
      v30 -= v43;
      v45 = &v29[8 * v22 - 16];
      v46 = v20 - 16;
      v47 = v42 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v48 = *(_OWORD *)v46;
        *(v45 - 1) = *((_OWORD *)v46 - 1);
        *v45 = v48;
        v45 -= 2;
        v46 -= 32;
        v47 -= 4;
      }
      while (v47);
      v20 = v44;
      if (v42 != (v42 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_68;
LABEL_69:
      v20 = *v51;
      *v51 = v30;
      v51[1] = (char *)v6;
      v51[2] = &v29[8 * v27];
      if (v20)
        goto LABEL_70;
LABEL_8:
      v51[1] = (char *)v6;
      v52 = (v52 + 1);
      if (0x6FB586FB586FB587 * ((uint64_t)(*(_QWORD *)(v3 + 16) - *(_QWORD *)(v3 + 8)) >> 3) <= v52)
        goto LABEL_4;
    }
    v3 = v17;
    v5 = v16;
    do
    {
LABEL_68:
      v49 = *((_QWORD *)v20 - 1);
      v20 -= 8;
      *((_QWORD *)v30 - 1) = v49;
      v30 -= 8;
    }
    while (v20 != v19);
    goto LABEL_69;
  }
}

void sub_20FCBB500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  void *v13;

  v13 = *(void **)v11;
  if (*(_QWORD *)v11)
  {
    *(_QWORD *)(v11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20FCBB544(uint64_t *a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t **v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t **v23;
  uint64_t *v24;
  _QWORD *v25;
  char *v26;
  uint64_t v27;
  uint64_t i;
  char *v29;
  __int128 v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;
  _BYTE *v34;
  _BYTE *v35;
  int64_t v36;
  char *v37;
  char *v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  __int128 v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  BOOL v56;
  BOOL v57;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  _OWORD *v62;
  __int128 *v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  char *v69;
  void *v70;
  void *v71;
  void *v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 *v77;
  _QWORD *v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t ***v83;
  uint64_t ***v84;
  uint64_t **v85;
  _QWORD *v86;
  uint64_t *v87;
  uint64_t *v88;
  int64_t v89;
  unint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  int64_t v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  uint64_t *v109;
  _QWORD *v110;
  uint64_t v112;
  _QWORD *v113;
  _QWORD *v114;
  uint64_t ***j;
  uint64_t ***v116;
  uint64_t *v117;
  _QWORD *v118;
  uint64_t **v119;
  uint64_t *v120;
  std::__shared_weak_count *v121;

  *(_OWORD *)(a1 + 9) = 0u;
  *(_OWORD *)(a1 + 7) = 0u;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  a1[11] = -1;
  v4 = operator new(0x68uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24C9D0DF0;
  v4[3] = 850045863;
  *((_OWORD *)v4 + 2) = 0u;
  *((_OWORD *)v4 + 3) = 0u;
  *((_OWORD *)v4 + 4) = 0u;
  v4[10] = 0;
  v4[11] = a1 + 6;
  v110 = a1 + 6;
  a1[12] = (uint64_t)(v4 + 3);
  a1[13] = (uint64_t)v4;
  sub_20F050130(a1, *((unsigned int *)a2 + 10));
  if (a2[5])
  {
    v112 = 0;
    v109 = a2;
    do
    {
      v5 = a2[3];
      v6 = *a2;
      v7 = a2[1];
      sub_20FCBC128(v110, (uint64_t *)&v120);
      v8 = a1[4];
      v9 = *a1;
      v11 = v120;
      v10 = (uint64_t *)v121;
      if (v121)
      {
        p_shared_owners = (unint64_t *)&v121->__shared_owners_;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }
      v14 = (uint64_t **)(v9 + 16 * v8);
      v15 = (std::__shared_weak_count *)v14[1];
      *v14 = v11;
      v14[1] = v10;
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v18 = (a1[1] - *a1) >> 4;
      v19 = a1[5];
      v20 = a1[4] + 1;
      if (v20 >= v18)
        v21 = (a1[1] - *a1) >> 4;
      else
        v21 = 0;
      a1[4] = v20 - v21;
      if (v19 == v18)
      {
        v22 = a1[3] + 1;
        if (v22 < v18)
          v18 = 0;
        a1[3] = v22 - v18;
      }
      else
      {
        a1[5] = v19 + 1;
      }
      v23 = (uint64_t **)(v6 + 16 * ((v5 + v112) % (unint64_t)((v7 - v6) >> 4)));
      v24 = *v23;
      v117 = v120;
      if (v120 != *v23)
      {
        sub_20F13D910(v120, *v24, v24[1], 0x4EC4EC4EC4EC4EC5 * ((v24[1] - *v24) >> 3));
        sub_20EE5F0C0(v117 + 3, (__int128 *)v24[3], (__int128 *)v24[4], 0xEEEEEEEEEEEEEEEFLL * ((v24[4] - v24[3]) >> 4));
        *((_OWORD *)v117 + 3) = *((_OWORD *)v24 + 3);
        v25 = v117 + 8;
        *((_DWORD *)v117 + 24) = *((_DWORD *)v24 + 24);
        v26 = (char *)v24[10];
        v27 = v117[9];
        if (!v27)
          goto LABEL_29;
        for (i = 0; i != v27; ++i)
          *(_QWORD *)(*v25 + 8 * i) = 0;
        v29 = (char *)v117[10];
        v117[10] = 0;
        v117[11] = 0;
        if (v29)
        {
          while (v26)
          {
            *((_DWORD *)v29 + 4) = *((_DWORD *)v26 + 4);
            sub_20F287ACC((uint64_t)(v29 + 24), (__int128 *)(v26 + 24));
            if (v29 != v26)
            {
              sub_20F0E80A4((_QWORD *)v29 + 96, *((char **)v26 + 96), *((char **)v26 + 97), (uint64_t)(*((_QWORD *)v26 + 97) - *((_QWORD *)v26 + 96)) >> 2);
              v30 = *(_OWORD *)(v26 + 792);
              *((_DWORD *)v29 + 202) = *((_DWORD *)v26 + 202);
              *(_OWORD *)(v29 + 792) = v30;
              sub_20F04CF00((char **)v29 + 102, *((__int128 **)v26 + 102), *((__int128 **)v26 + 103), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)v26 + 103) - *((_QWORD *)v26 + 102)) >> 3));
              *((_QWORD *)v29 + 105) = *((_QWORD *)v26 + 105);
              *((_DWORD *)v29 + 212) = *((_DWORD *)v26 + 212);
              sub_20F439D6C((char **)v29 + 107, *((_QWORD *)v26 + 107), *((char **)v26 + 108), (uint64_t)(*((_QWORD *)v26 + 108) - *((_QWORD *)v26 + 107)) >> 3);
            }
            v31 = *(char **)v29;
            sub_20FCBC600((uint64_t)(v117 + 8), (uint64_t)v29);
            v26 = *(char **)v26;
            v29 = v31;
            if (!v31)
              goto LABEL_29;
          }
          do
          {
            v69 = *(char **)v29;
            v70 = (void *)*((_QWORD *)v29 + 107);
            if (v70)
            {
              *((_QWORD *)v29 + 108) = v70;
              operator delete(v70);
            }
            v71 = (void *)*((_QWORD *)v29 + 102);
            if (v71)
            {
              *((_QWORD *)v29 + 103) = v71;
              operator delete(v71);
            }
            v72 = (void *)*((_QWORD *)v29 + 96);
            if (v72)
            {
              *((_QWORD *)v29 + 97) = v72;
              operator delete(v72);
            }
            sub_20E990C88((uint64_t)(v29 + 24));
            operator delete(v29);
            v29 = v69;
          }
          while (v69);
        }
        else
        {
LABEL_29:
          while (v26)
          {
            v32 = operator new(0x370uLL);
            *v32 = 0;
            v32[1] = 0;
            *((_DWORD *)v32 + 4) = *((_DWORD *)v26 + 4);
            v33 = (uint64_t)v32;
            sub_20F2878BC((uint64_t)(v32 + 3), (__int128 *)(v26 + 24));
            *(_QWORD *)(v33 + 784) = 0;
            *(_OWORD *)(v33 + 768) = 0u;
            v34 = (_BYTE *)*((_QWORD *)v26 + 96);
            v35 = (_BYTE *)*((_QWORD *)v26 + 97);
            v36 = v35 - v34;
            if (v35 != v34)
            {
              if (v36 < 0)
                sub_20EABADD4();
              v37 = (char *)operator new(v35 - v34);
              *(_QWORD *)(v33 + 768) = v37;
              *(_QWORD *)(v33 + 776) = v37;
              v38 = &v37[4 * (v36 >> 2)];
              *(_QWORD *)(v33 + 784) = v38;
              memcpy(v37, v34, v36);
              *(_QWORD *)(v33 + 776) = v38;
            }
            v39 = *(_OWORD *)(v26 + 792);
            *(_QWORD *)(v33 + 808) = *((_QWORD *)v26 + 101);
            *(_OWORD *)(v33 + 792) = v39;
            *(_QWORD *)(v33 + 816) = 0;
            *(_QWORD *)(v33 + 832) = 0;
            *(_QWORD *)(v33 + 824) = 0;
            v40 = *((_QWORD *)v26 + 102);
            v41 = *((_QWORD *)v26 + 103);
            v42 = v41 - v40;
            if (v41 != v40)
            {
              v43 = 0xCCCCCCCCCCCCCCCDLL * (v42 >> 3);
              if (v43 >= 0x666666666666667)
                sub_20E867F44();
              v44 = (char *)operator new(v42);
              v45 = 0;
              *(_QWORD *)(v33 + 816) = v44;
              *(_QWORD *)(v33 + 824) = v44;
              *(_QWORD *)(v33 + 832) = &v44[40 * v43];
              do
              {
                v46 = v40 + v45;
                v47 = &v44[v45];
                v48 = *(_OWORD *)(v40 + v45);
                *((_QWORD *)v47 + 2) = *(_QWORD *)(v40 + v45 + 16);
                *(_OWORD *)v47 = v48;
                *(_OWORD *)(v47 + 24) = *(_OWORD *)(v40 + v45 + 24);
                v45 += 40;
              }
              while (v46 + 40 != v41);
              *(_QWORD *)(v33 + 824) = &v44[v45];
            }
            *(_QWORD *)(v33 + 840) = *((_QWORD *)v26 + 105);
            *(_DWORD *)(v33 + 848) = *((_DWORD *)v26 + 212);
            *(_QWORD *)(v33 + 856) = 0;
            *(_QWORD *)(v33 + 872) = 0;
            *(_QWORD *)(v33 + 864) = 0;
            v49 = (char *)*((_QWORD *)v26 + 107);
            v50 = (char *)*((_QWORD *)v26 + 108);
            v51 = v50 - v49;
            if (v50 != v49)
            {
              if (v51 < 0)
                sub_20E92CED8();
              v52 = (char *)operator new(v50 - v49);
              *(_QWORD *)(v33 + 856) = v52;
              *(_QWORD *)(v33 + 864) = v52;
              *(_QWORD *)(v33 + 872) = &v52[8 * (v51 >> 3)];
              v53 = v51 - 8;
              if ((unint64_t)(v51 - 8) < 0x78)
                goto LABEL_41;
              v56 = v52 + 4 >= &v49[(v53 & 0xFFFFFFFFFFFFFFF8) + 8]
                 || v49 + 4 >= &v52[(v53 & 0xFFFFFFFFFFFFFFF8) + 8];
              v57 = !v56;
              if (v49 < &v52[(v53 & 0xFFFFFFFFFFFFFFF8) + 4] && v52 < &v49[(v53 & 0xFFFFFFFFFFFFFFF8) + 4])
                goto LABEL_41;
              if (v57)
                goto LABEL_41;
              v59 = (v53 >> 3) + 1;
              v60 = 8 * (v59 & 0x3FFFFFFFFFFFFFF8);
              v61 = &v49[v60];
              v54 = &v52[v60];
              v62 = v52 + 32;
              v63 = (__int128 *)(v49 + 32);
              v64 = v59 & 0x3FFFFFFFFFFFFFF8;
              do
              {
                v66 = *(v63 - 2);
                v65 = *(v63 - 1);
                v68 = *v63;
                v67 = v63[1];
                v63 += 4;
                *(v62 - 2) = v66;
                *(v62 - 1) = v65;
                *v62 = v68;
                v62[1] = v67;
                v62 += 4;
                v64 -= 8;
              }
              while (v64);
              v49 = v61;
              v52 = v54;
              if (v59 != (v59 & 0x3FFFFFFFFFFFFFF8))
              {
LABEL_41:
                v54 = v52;
                do
                {
                  v55 = *(_QWORD *)v49;
                  v49 += 8;
                  *(_QWORD *)v54 = v55;
                  v54 += 8;
                }
                while (v49 != v50);
              }
              *(_QWORD *)(v33 + 864) = v54;
            }
            *(_QWORD *)(v33 + 8) = *(unsigned int *)(v33 + 16);
            sub_20FCBC600((uint64_t)v25, v33);
            v26 = *(char **)v26;
          }
        }
      }
      v74 = (_QWORD *)v117[3];
      v73 = (_QWORD *)v117[4];
      v113 = v73;
      while (v74 != v73)
      {
        v75 = v74[3];
        v76 = v74[4];
        while (v75 != v76)
        {
          v77 = *(__int128 **)v75;
          if (*(_QWORD *)v75)
          {
            v78 = operator new(0xD8uLL);
            v78[2] = 0;
            *v78 = &off_24C9EDD70;
            v78[1] = 0;
            v79 = sub_20EDB6310((uint64_t)(v78 + 3), v77);
            v80 = *(std::__shared_weak_count **)(v75 + 8);
            *(_QWORD *)v75 = v79;
            *(_QWORD *)(v75 + 8) = v78;
            if (v80)
            {
              v81 = (unint64_t *)&v80->__shared_owners_;
              do
                v82 = __ldaxr(v81);
              while (__stlxr(v82 - 1, v81));
              if (!v82)
              {
                ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                std::__shared_weak_count::__release_weak(v80);
              }
            }
          }
          v75 += 16;
        }
        v83 = (uint64_t ***)v74[6];
        v84 = (uint64_t ***)v74[7];
        v114 = v74;
        for (j = v84; v83 != v84; v83 += 2)
        {
          v85 = *v83;
          if (*v83)
          {
            v86 = operator new(0x30uLL);
            v86[1] = 0;
            v86[2] = 0;
            v86[3] = 0;
            v119 = (uint64_t **)(v86 + 3);
            *v86 = &off_24C9EDDC0;
            v86[4] = 0;
            v86[5] = 0;
            v87 = *v85;
            v88 = v85[1];
            v89 = (char *)v88 - (char *)*v85;
            if (v88 != *v85)
            {
              v90 = 0xAAAAAAAAAAAAAAABLL * (v89 >> 3);
              if (v90 >= 0xAAAAAAAAAAAAAABLL)
                sub_20E867F44();
              v91 = operator new(v89);
              v116 = v83;
              v118 = v86;
              v92 = 0;
              v86[3] = v91;
              v86[4] = v91;
              v86[5] = &v91[3 * v90];
              v93 = v91;
              do
              {
                *v93 = 0;
                v93[1] = 0;
                v93[2] = 0;
                v95 = *v87;
                v94 = v87[1];
                v96 = v94 - *v87;
                if (v94 != *v87)
                {
                  v97 = 0x51B3BEA3677D46CFLL * (v96 >> 3);
                  if (v97 >= 0xAE4C415C9882BALL)
                    sub_20E867F44();
                  v98 = (char *)operator new(v96);
                  v99 = 0;
                  *v93 = v98;
                  v93[1] = v98;
                  v93[2] = &v98[376 * v97];
                  do
                  {
                    v100 = v95 + v99;
                    v101 = &v98[v99];
                    *(_OWORD *)v101 = *(_OWORD *)(v95 + v99);
                    *((_OWORD *)v101 + 1) = *(_OWORD *)(v95 + v99 + 16);
                    memcpy(&v98[v99 + 32], (const void *)(v95 + v99 + 32), 0x158uLL);
                    v99 += 376;
                  }
                  while (v100 + 376 != v94);
                  v93[1] = &v98[v99];
                }
                v87 += 3;
                v93 += 3;
                v92 += 24;
              }
              while (v87 != v88);
              v83 = v116;
              v118[4] = v93;
              v86 = v118;
              v84 = j;
            }
            v102 = (std::__shared_weak_count *)v83[1];
            *v83 = v119;
            v83[1] = (uint64_t **)v86;
            if (v102)
            {
              v103 = (unint64_t *)&v102->__shared_owners_;
              do
                v104 = __ldaxr(v103);
              while (__stlxr(v104 - 1, v103));
              if (!v104)
              {
                ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                std::__shared_weak_count::__release_weak(v102);
              }
            }
          }
        }
        v73 = v113;
        v74 = v114 + 30;
      }
      v105 = v121;
      if (v121)
      {
        v106 = (unint64_t *)&v121->__shared_owners_;
        do
          v107 = __ldaxr(v106);
        while (__stlxr(v107 - 1, v106));
        if (!v107)
        {
          ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
          std::__shared_weak_count::__release_weak(v105);
        }
      }
      a2 = v109;
      ++v112;
    }
    while (v112 != v109[5]);
  }
  return a1;
}

void sub_20FCBBE0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11)
{
  sub_20EAFDF54(a10);
  sub_20E8C3144(a11);
  _Unwind_Resume(a1);
}

void sub_20FCBBE44(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  sub_20FCBCB60(v1);
  __cxa_rethrow();
}

void sub_20FCBBF0C()
{
  __cxa_end_catch();
  JUMPOUT(0x20FCBBFECLL);
}

void sub_20FCBBF1C()
{
  JUMPOUT(0x20FCBBF68);
}

void sub_20FCBBF2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86665C((uint64_t)va);
  sub_20EAFDF54(a3);
  sub_20E8C3144(a4);
  _Unwind_Resume(a1);
}

void sub_20FCBC00C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;

  v2 = *a1;
  v3 = a1[1];
  v4 = (v3 - *a1) >> 4;
  if (v3 == *a1)
  {
    a1[1] = v2;
    v5 = (v2 - v3) >> 4;
    v6 = v4 >= v5;
    v7 = v4 - v5;
    if (v4 > v5)
    {
LABEL_3:
      sub_20EE68A10((uint64_t)a1, v7);
      goto LABEL_21;
    }
  }
  else
  {
    do
    {
      v8 = *(std::__shared_weak_count **)(v3 - 8);
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v3 -= 16;
    }
    while (v3 != v2);
    v3 = *a1;
    a1[1] = v2;
    v11 = (v2 - v3) >> 4;
    v6 = v4 >= v11;
    v7 = v4 - v11;
    if (v4 > v11)
      goto LABEL_3;
  }
  if (!v6)
  {
    v12 = v3 + 16 * v4;
    while (v2 != v12)
    {
      v13 = *(std::__shared_weak_count **)(v2 - 8);
      if (v13)
      {
        v14 = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *, unint64_t))v13->__on_zero_shared)(v13, v7);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v2 -= 16;
    }
    a1[1] = v12;
  }
LABEL_21:
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
}

void sub_20FCBC128(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t *v19;
  unint64_t v20;
  std::runtime_error *exception;
  _QWORD v22[3];

  v5 = a1[6];
  v4 = (std::__shared_weak_count *)a1[7];
  v22[1] = v5;
  v22[2] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = a1[2];
  if (a1[1] != v8)
  {
    v9 = *(_QWORD *)(v8 - 8);
    *(_QWORD *)(v8 - 8) = 0;
    v10 = a1[2];
    v13 = *(_QWORD **)(v10 - 8);
    v12 = (_QWORD *)(v10 - 8);
    v11 = v13;
    *v12 = 0;
    if (v13)
      sub_20E990B40((uint64_t)v12, v11);
    a1[2] = v12;
    v22[0] = 0;
    if (!v4)
      goto LABEL_13;
LABEL_11:
    v15 = (unint64_t *)&v4->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    goto LABEL_13;
  }
  v14 = a1[4];
  if (v14 >= a1[5])
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Allocated object exceeds max pool size.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  a1[4] = v14 + 1;
  v9 = operator new();
  *(_QWORD *)(v9 + 96) = 0;
  *(_OWORD *)(v9 + 64) = 0u;
  *(_OWORD *)(v9 + 80) = 0u;
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_OWORD *)v9 = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_DWORD *)(v9 + 96) = 1065353216;
  v22[0] = 0;
  if (v4)
    goto LABEL_11;
LABEL_13:
  *a2 = v9;
  v17 = (_QWORD *)operator new();
  *v17 = &off_24CA04FF0;
  v17[1] = 0;
  v17[2] = 0;
  v17[3] = v9;
  v17[4] = v5;
  v17[5] = v4;
  a2[1] = (uint64_t)v17;
  v18 = (_QWORD *)v22[0];
  v22[0] = 0;
  if (v18)
    sub_20E990B40((uint64_t)v22, v18);
  if (v4)
  {
    v19 = (unint64_t *)&v4->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_20FCBC2F4()
{
  __break(1u);
}

void sub_20FCBC340(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v3;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  _QWORD *v7;
  va_list va1;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD *);
  __cxa_end_catch();
  sub_20E86665C((uint64_t)va);
  v3 = v7;
  v7 = 0;
  if (v3)
    sub_20E990B40((uint64_t)va1, v3);
  sub_20E86665C((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20FCBC378(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X2>, int a4@<W3>, char **a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;

  sub_20FCBC128(a1 + 6, a6);
  sub_20FCB4E5C((char **)*a6, a2, a3, a4, a5);
  v12 = (uint64_t *)(*a1 + 16 * a1[4]);
  v14 = *a6;
  v13 = a6[1];
  if (v13)
  {
    v15 = (unint64_t *)(v13 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = (std::__shared_weak_count *)v12[1];
  *v12 = v14;
  v12[1] = v13;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (uint64_t)(a1[1] - *a1) >> 4;
  v21 = a1[5];
  v22 = a1[4] + 1;
  if (v22 >= v20)
    v23 = (uint64_t)(a1[1] - *a1) >> 4;
  else
    v23 = 0;
  a1[4] = v22 - v23;
  if (v21 == v20)
  {
    v24 = a1[3] + 1;
    if (v24 < v20)
      v20 = 0;
    a1[3] = v24 - v20;
  }
  else
  {
    a1[5] = v21 + 1;
  }
}

void sub_20FCBC49C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86665C(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FCBC4B0(_QWORD *a1)
{
  char *v2;
  char *v3;
  void *v4;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  int v9;
  unsigned int v10;
  char *v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  unsigned int v17;
  _DWORD v18[2];

  v2 = (char *)a1[93];
  v3 = (char *)a1[94];
  if (v2 != v3)
  {
    v4 = (void *)a1[104];
    if (v4 == (void *)a1[105])
    {
      v6 = v3 - v2;
      v7 = (v3 - v2) >> 2;
      if (v7 > (uint64_t)(a1[106] - (_QWORD)v4) >> 3)
      {
        if (v6 >= 0x7FFFFFFFFFFFFFFDLL)
          sub_20E92CED8();
        v8 = (char *)operator new(2 * v6);
        a1[104] = v8;
        a1[105] = v8;
        a1[106] = &v8[8 * v7];
        if (v4)
        {
          operator delete(v4);
          v2 = (char *)a1[93];
          v3 = (char *)a1[94];
        }
      }
      if (v2 != v3)
      {
        v9 = 0;
        do
        {
          v10 = *(_DWORD *)v2;
          if ((*(_DWORD *)v2 & 0x80000000) == 0)
          {
            v18[0] = *(_DWORD *)v2;
            v18[1] = v9;
            v11 = (char *)a1[104];
            v12 = (char *)a1[105];
            if (v12 == v11)
            {
              v11 = (char *)a1[105];
            }
            else
            {
              v13 = (v12 - v11) >> 3;
              do
              {
                v14 = v13 >> 1;
                v15 = &v11[8 * (v13 >> 1)];
                v17 = *(_DWORD *)v15;
                v16 = v15 + 8;
                v13 += ~(v13 >> 1);
                if (v17 < v10)
                  v11 = v16;
                else
                  v13 = v14;
              }
              while (v13);
              if (v12 != v11 && *(_DWORD *)v11 == v10)
                goto LABEL_11;
            }
            sub_20F9B999C(a1 + 104, (uint64_t)v11, (uint64_t)v18);
          }
LABEL_11:
          ++v9;
          v2 += 4;
        }
        while (v2 != v3);
      }
    }
  }
  return a1 + 104;
}

void sub_20FCBC600(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  float v6;
  float v7;
  _BOOL8 v8;
  unint64_t v9;
  unint64_t v10;
  int8x8_t prime;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t **v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  size_t v25;
  uint8x8_t v26;
  uint64_t v27;
  uint8x8_t v28;
  unint64_t v29;
  uint64_t *i;
  uint8x8_t v31;
  unint64_t v32;
  uint64_t *v33;
  unsigned __int8 v34;
  int v35;
  int v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  size_t v45;
  void *v46;
  uint8x8_t v47;
  uint8x8_t v48;
  uint64_t v49;
  uint64_t *v50;
  char v51;
  int v52;
  char v53;
  uint64_t v54;
  unint64_t v55;

  v4 = *(unsigned int *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = v4;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v7 = *(float *)(a1 + 32);
  if (v5 && (float)(v7 * (float)v5) >= v6)
    goto LABEL_76;
  v8 = 1;
  if (v5 >= 3)
    v8 = (v5 & (v5 - 1)) != 0;
  v9 = v8 | (2 * v5);
  v10 = vcvtps_u32_f32(v6 / v7);
  if (v9 <= v10)
    prime = (int8x8_t)v10;
  else
    prime = (int8x8_t)v9;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v5 = *(_QWORD *)(a1 + 8);
  }
  if (*(_QWORD *)&prime <= v5)
  {
    if (*(_QWORD *)&prime >= v5)
      goto LABEL_76;
    v25 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v5 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v5), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
    {
      v45 = std::__next_prime(v25);
      if (*(_QWORD *)&prime <= v45)
        prime = (int8x8_t)v45;
      if (*(_QWORD *)&prime >= v5)
      {
LABEL_38:
        v5 = *(_QWORD *)(a1 + 8);
        v28 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
        v28.i16[0] = vaddlv_u8(v28);
        v29 = v28.u32[0];
        if (v28.u32[0] >= 2uLL)
          goto LABEL_44;
        goto LABEL_77;
      }
    }
    else
    {
      v27 = 1 << -(char)__clz(v25 - 1);
      if (v25 >= 2)
        v25 = v27;
      if (*(_QWORD *)&prime <= v25)
        prime = (int8x8_t)v25;
      if (*(_QWORD *)&prime >= v5)
        goto LABEL_38;
    }
    if (!*(_QWORD *)&prime)
    {
      v46 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v46)
        operator delete(v46);
      v5 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      v47 = (uint8x8_t)vcnt_s8(0);
      v47.i16[0] = vaddlv_u8(v47);
      v29 = v47.u32[0];
      if (v47.u32[0] >= 2uLL)
        goto LABEL_44;
      goto LABEL_77;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    sub_20E877A38();
  v12 = operator new(8 * *(_QWORD *)&prime);
  v13 = *(void **)a1;
  *(_QWORD *)a1 = v12;
  if (v13)
    operator delete(v13);
  v14 = 0;
  *(int8x8_t *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v14++) = 0;
  while (*(_QWORD *)&prime != v14);
  v16 = a1 + 16;
  v15 = *(uint64_t ***)(a1 + 16);
  if (v15)
  {
    v17 = (unint64_t)v15[1];
    v18 = *(_QWORD *)&prime - 1;
    if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) == 0)
    {
      v19 = v17 & v18;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v19) = v16;
      v20 = *v15;
      if (!*v15)
        goto LABEL_43;
      do
      {
        v21 = v20[1] & v18;
        if (v21 == v19)
        {
          v15 = (uint64_t **)v20;
        }
        else
        {
          v22 = v20;
          if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v21))
          {
            do
            {
              v23 = v22;
              v22 = (uint64_t *)*v22;
            }
            while (v22 && *((_DWORD *)v20 + 4) == *((_DWORD *)v22 + 4));
            *v15 = v22;
            v24 = 8 * v21;
            *v23 = **(_QWORD **)(*(_QWORD *)a1 + v24);
            **(_QWORD **)(*(_QWORD *)a1 + v24) = v20;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v21) = v15;
            v15 = (uint64_t **)v20;
            v19 = v21;
          }
        }
        v20 = *v15;
      }
      while (*v15);
      v5 = (unint64_t)prime;
LABEL_76:
      v48 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
      v48.i16[0] = vaddlv_u8(v48);
      v29 = v48.u32[0];
      if (v48.u32[0] >= 2uLL)
        goto LABEL_44;
      goto LABEL_77;
    }
    if (v17 >= *(_QWORD *)&prime)
      v17 %= *(_QWORD *)&prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v17) = v16;
    for (i = *v15; *v15; i = *v15)
    {
      v40 = i[1];
      if (v40 >= *(_QWORD *)&prime)
        v40 %= *(_QWORD *)&prime;
      if (v40 == v17)
      {
        v15 = (uint64_t **)i;
      }
      else
      {
        v41 = i;
        if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v40))
        {
          do
          {
            v42 = v41;
            v41 = (uint64_t *)*v41;
          }
          while (v41 && *((_DWORD *)i + 4) == *((_DWORD *)v41 + 4));
          *v15 = v41;
          v43 = 8 * v40;
          *v42 = **(_QWORD **)(*(_QWORD *)a1 + v43);
          **(_QWORD **)(*(_QWORD *)a1 + v43) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v40) = v15;
          v15 = (uint64_t **)i;
          v17 = v40;
        }
      }
    }
  }
LABEL_43:
  v5 = (unint64_t)prime;
  v31 = (uint8x8_t)vcnt_s8(prime);
  v31.i16[0] = vaddlv_u8(v31);
  v29 = v31.u32[0];
  if (v31.u32[0] >= 2uLL)
  {
LABEL_44:
    v32 = v4;
    if (v5 <= v4)
      v32 = v4 % v5;
    v33 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v32);
    if (!v33)
    {
      v37 = 0;
      v44 = *(_QWORD *)(a2 + 8);
      goto LABEL_85;
    }
    v34 = 0;
    v35 = *(_DWORD *)(a2 + 16);
    while (1)
    {
      v37 = v33;
      v33 = (uint64_t *)*v33;
      if (!v33)
        goto LABEL_84;
      v38 = v33[1];
      v39 = v38;
      if (v38 >= v5)
        v39 = v38 % v5;
      if (v39 != v32)
        goto LABEL_84;
      if (v38 == v4)
      {
        v36 = v34 & (*((_DWORD *)v33 + 4) != v35);
        v34 |= *((_DWORD *)v33 + 4) == v35;
        if (v36 == 1)
          goto LABEL_84;
      }
      else if ((v34 & 1) == 1)
      {
        goto LABEL_84;
      }
    }
  }
LABEL_77:
  v49 = (v5 - 1) & v4;
  v50 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v49);
  if (!v50)
  {
    v37 = 0;
    v44 = *(_QWORD *)(a2 + 8);
LABEL_96:
    v44 &= v5 - 1;
    if (v37)
      goto LABEL_88;
LABEL_97:
    *(_QWORD *)a2 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = a2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v44) = a1 + 16;
    if (!*(_QWORD *)a2)
      goto LABEL_103;
    v55 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (v29 > 1)
    {
      if (v55 >= v5)
        v55 %= v5;
    }
    else
    {
      v55 &= v5 - 1;
    }
LABEL_102:
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v55) = a2;
    goto LABEL_103;
  }
  v51 = 0;
  v52 = *(_DWORD *)(a2 + 16);
  while (1)
  {
    v37 = v50;
    v50 = (uint64_t *)*v50;
    if (!v50)
      break;
    v54 = v50[1];
    if ((v54 & (v5 - 1)) != v49)
      break;
    if (v54 == v4)
    {
      v53 = v51 & (*((_DWORD *)v50 + 4) != v52);
      v51 |= *((_DWORD *)v50 + 4) == v52;
      if ((v53 & 1) != 0)
        break;
    }
    else if ((v51 & 1) != 0)
    {
      break;
    }
  }
LABEL_84:
  v44 = *(_QWORD *)(a2 + 8);
  if (v29 <= 1)
    goto LABEL_96;
LABEL_85:
  if (v44 >= v5)
    v44 %= v5;
  if (!v37)
    goto LABEL_97;
LABEL_88:
  *(_QWORD *)a2 = *v37;
  *v37 = a2;
  if (*(_QWORD *)a2)
  {
    v55 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (v29 > 1)
    {
      if (v55 >= v5)
        v55 %= v5;
    }
    else
    {
      v55 &= v5 - 1;
    }
    if (v55 != v44)
      goto LABEL_102;
  }
LABEL_103:
  ++*(_QWORD *)(a1 + 24);
}

void sub_20FCBCB60(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  void *v5;

  do
  {
    v2 = (_QWORD *)*a1;
    v3 = (void *)a1[107];
    if (v3)
    {
      a1[108] = v3;
      operator delete(v3);
    }
    v4 = (void *)a1[102];
    if (v4)
    {
      a1[103] = v4;
      operator delete(v4);
    }
    v5 = (void *)a1[96];
    if (v5)
    {
      a1[97] = v5;
      operator delete(v5);
    }
    sub_20E990C88((uint64_t)(a1 + 3));
    operator delete(a1);
    a1 = v2;
  }
  while (v2);
}

uint64_t sub_20FCBCBD0(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (void *)v2[107];
      if (v3)
      {
        v2[108] = v3;
        operator delete(v3);
      }
      v4 = (void *)v2[102];
      if (v4)
      {
        v2[103] = v4;
        operator delete(v4);
      }
      v5 = (void *)v2[96];
      if (v5)
      {
        v2[97] = v5;
        operator delete(v5);
      }
      sub_20E990C88((uint64_t)(v2 + 3));
    }
    operator delete(v2);
  }
  return a1;
}

void sub_20FCBCC44(uint64_t a1, unint64_t a2)
{
  char *v2;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  char *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;

  v2 = *(char **)a1;
  if (0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a2)
  {
    if (a2 >= 0xA0A0A0A0A0A0A1)
      sub_20E867F44();
    v4 = *(_BYTE **)(a1 + 8);
    v5 = 408 * a2;
    v6 = (char *)operator new(408 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 != v2)
    {
      v9 = 0;
      do
      {
        v10 = &v8[v9];
        v11 = &v8[v9 - 408];
        v12 = &v4[v9];
        *v11 = 0;
        v8[v9 - 8] = 0;
        if (v4[v9 - 8])
        {
          *(_OWORD *)v11 = *(_OWORD *)(v12 - 408);
          v13 = *(_OWORD *)(v12 - 392);
          v14 = *(_OWORD *)(v12 - 376);
          v15 = *(_OWORD *)(v12 - 360);
          *(_OWORD *)&v8[v9 - 351] = *(_OWORD *)(v12 - 351);
          *(_OWORD *)&v8[v9 - 376] = v14;
          *(_OWORD *)&v8[v9 - 360] = v15;
          *(_OWORD *)&v8[v9 - 392] = v13;
          *(_OWORD *)(v10 - 328) = *(_OWORD *)(v12 - 328);
          *((_QWORD *)v12 - 40) = 0;
          *((_QWORD *)v12 - 41) = 0;
          *(_OWORD *)(v10 - 312) = *(_OWORD *)(v12 - 312);
          *((_QWORD *)v12 - 38) = 0;
          *((_QWORD *)v12 - 39) = 0;
          memcpy(v10 - 296, v12 - 296, 0x120uLL);
          *(v10 - 8) = 1;
        }
        v9 -= 408;
      }
      while (&v4[v9] != v2);
      v2 = *(char **)a1;
      v16 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = &v8[v9];
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      while (1)
      {
        if (v16 == v2)
          goto LABEL_24;
        if (*(v16 - 8))
        {
          v17 = (std::__shared_weak_count *)*((_QWORD *)v16 - 38);
          if (!v17)
            goto LABEL_16;
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldaxr(p_shared_owners);
          while (__stlxr(v19 - 1, p_shared_owners));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
            v20 = (std::__shared_weak_count *)*((_QWORD *)v16 - 40);
            if (!v20)
              goto LABEL_9;
          }
          else
          {
LABEL_16:
            v20 = (std::__shared_weak_count *)*((_QWORD *)v16 - 40);
            if (!v20)
              goto LABEL_9;
          }
          v21 = (unint64_t *)&v20->__shared_owners_;
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
LABEL_9:
        v16 -= 408;
      }
    }
    *(_QWORD *)a1 = v8;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v7;
LABEL_24:
    if (v2)
      operator delete(v2);
  }
}

char *sub_20FCBCE70(_QWORD *a1, uint64_t a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  char **v14;
  _BYTE *v15;
  _BYTE *v16;
  int64_t v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  char *v23;
  void *v24;
  __int128 v26;

  v4 = (char *)*a1;
  v3 = (char *)a1[1];
  v5 = (uint64_t)&v3[-*a1] >> 6;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 58)
    sub_20E867F44();
  v8 = a1[2] - (_QWORD)v4;
  if (v8 >> 5 > v6)
    v6 = v8 >> 5;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0)
    v9 = 0x3FFFFFFFFFFFFFFLL;
  else
    v9 = v6;
  if (v9)
  {
    if (v9 >> 58)
      sub_20E877A38();
    v10 = (char *)operator new(v9 << 6);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[64 * v5];
  v12 = &v10[64 * v9];
  *((_QWORD *)&v26 + 1) = v12;
  v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = v13;
  *(_QWORD *)(v11 + 29) = *(_QWORD *)(a2 + 29);
  *((_QWORD *)v11 + 5) = 0;
  *((_QWORD *)v11 + 6) = 0;
  v14 = (char **)(v11 + 48);
  *((_QWORD *)v11 + 7) = 0;
  v16 = *(_BYTE **)(a2 + 40);
  v15 = *(_BYTE **)(a2 + 48);
  v17 = v15 - v16;
  if (v15 != v16)
  {
    if (v17 < 0)
      sub_20E867F44();
    v18 = (char *)operator new(v15 - v16);
    *((_QWORD *)v11 + 5) = v18;
    *v14 = v18;
    v19 = &v18[4 * (v17 >> 2)];
    *((_QWORD *)v11 + 7) = v19;
    memcpy(v18, v16, v17);
    *v14 = v19;
  }
  v20 = v11 + 64;
  *(_QWORD *)&v26 = v11 + 64;
  if (v3 == v4)
  {
    *a1 = v11;
    a1[1] = v20;
    a1[2] = v12;
  }
  else
  {
    do
    {
      v21 = *((_OWORD *)v3 - 4);
      v22 = *((_OWORD *)v3 - 3);
      *(_QWORD *)(v11 - 35) = *(_QWORD *)(v3 - 35);
      *((_OWORD *)v11 - 4) = v21;
      *((_OWORD *)v11 - 3) = v22;
      *((_QWORD *)v11 - 2) = 0;
      *((_QWORD *)v11 - 1) = 0;
      *(_OWORD *)(v11 - 24) = *(_OWORD *)(v3 - 24);
      *((_QWORD *)v11 - 1) = *((_QWORD *)v3 - 1);
      v11 -= 64;
      *((_QWORD *)v3 - 3) = 0;
      *((_QWORD *)v3 - 2) = 0;
      *((_QWORD *)v3 - 1) = 0;
      v3 -= 64;
    }
    while (v3 != v4);
    v3 = (char *)*a1;
    v23 = (char *)a1[1];
    *a1 = v11;
    *(_OWORD *)(a1 + 1) = v26;
    v20 = (char *)v26;
    while (v23 != v3)
    {
      v24 = (void *)*((_QWORD *)v23 - 3);
      if (v24)
      {
        *((_QWORD *)v23 - 2) = v24;
        operator delete(v24);
      }
      v23 -= 64;
    }
  }
  if (v3)
    operator delete(v3);
  return v20;
}

void sub_20FCBD044(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  _QWORD *v3;
  void *v5;
  va_list va;

  va_start(va, a2);
  v5 = *v2;
  if (*v2)
  {
    *v3 = v5;
    operator delete(v5);
  }
  sub_20F3116F0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FCBD06C()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20FCBD080(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24CA04F60;
  result[1] = v3;
  return result;
}

uint64_t sub_20FCBD0B4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24CA04F60;
  a2[1] = v2;
  return result;
}

BOOL sub_20FCBD0D0(uint64_t a1, uint64_t a2)
{
  int8x8_t *v2;
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v2 = *(int8x8_t **)(a1 + 8);
  v3 = v2[9];
  if (!*(_QWORD *)&v3)
  {
    v7 = 0;
    return v7 != 0;
  }
  v4 = *(unsigned int *)(a2 + 16);
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = *(unsigned int *)(a2 + 16);
    if (*(_QWORD *)&v3 <= v4)
      v6 = v4 % *(_QWORD *)&v3;
  }
  else
  {
    v6 = (v3.i32[0] - 1) & v4;
  }
  v7 = *(uint64_t **)(*(_QWORD *)&v2[8] + 8 * v6);
  if (!v7)
    return v7 != 0;
  v7 = (uint64_t *)*v7;
  if (!v7)
    return v7 != 0;
  if (v5.u32[0] >= 2uLL)
  {
    do
    {
      v10 = v7[1];
      if (v10 == v4)
      {
        if (*((_DWORD *)v7 + 4) == (_DWORD)v4)
          return v7 != 0;
      }
      else
      {
        if (v10 >= *(_QWORD *)&v3)
          v10 %= *(_QWORD *)&v3;
        if (v10 != v6)
          return 0;
      }
      v7 = (uint64_t *)*v7;
    }
    while (v7);
    return v7 != 0;
  }
  v9 = *(_QWORD *)&v3 - 1;
  while (1)
  {
    v11 = v7[1];
    if (v11 == v4)
    {
      if (*((_DWORD *)v7 + 4) == (_DWORD)v4)
        return v7 != 0;
      goto LABEL_20;
    }
    if ((v11 & v9) != v6)
      return 0;
LABEL_20:
    v7 = (uint64_t *)*v7;
    if (!v7)
      return v7 != 0;
  }
}

uint64_t sub_20FCBD1D0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3vio17CameraSetFeaturesINS0_13MapDataTraitsILb0EEEE23CreateDepthFeatureEventERKNSt3__16vect"
                     "orINS0_17feature_detection19DepthEventFrameInfoENS5_9allocatorIS8_EEEEEUlT_E_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3vio17CameraSetFeaturesINS0_13MapDataTraitsILb0EEEE23CreateDepthFeatureEventERKN"
                                "St3__16vectorINS0_17feature_detection19DepthEventFrameInfoENS5_9allocatorIS8_EEEEEUlT_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3vio17CameraSetFeaturesINS0_13MapDataTraitsILb0EEEE23CreateDepthFeatureEventERKNSt3__16vectorINS0_17feature_detection19DepthEventFrameInfoENS5_9allocatorIS8_EEEEEUlT_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3vio17CameraSetFeaturesINS0_13MapDataTraitsILb0EEEE23CreateDepthFeatureEventERKNSt3__16vectorINS0_17feature_detection19DepthEventFrameInfoENS5_9allocatorIS8_EEEEEUlT_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20FCBD23C()
{
  return &unk_24CA04FD0;
}

void sub_20FCBD248(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;

  if (*(_BYTE *)(a2 + 8))
  {
    if (*(_BYTE *)(a3 + 8))
    {
LABEL_3:
      *(_OWORD *)a4 = *(_OWORD *)a3;
      v7 = *(_QWORD *)(a3 + 16);
      goto LABEL_39;
    }
    v10 = *(_QWORD *)(a3 + 16);
    v8 = *(_QWORD *)(a2 + 16);
    if (!v10)
    {
      v11 = *(_QWORD *)(*(_QWORD *)a3 + 40);
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  v8 = *(_QWORD *)(a2 + 16);
  if (*(_BYTE *)(a3 + 8))
  {
    if (v8)
      v9 = (_QWORD *)(a3 + 16);
    else
      v9 = (_QWORD *)(*(_QWORD *)a3 + 40);
    v11 = v8 - *v9;
    goto LABEL_21;
  }
  v10 = *(_QWORD *)(a3 + 16);
  if (v8 == v10)
    goto LABEL_3;
  if (v10 | v8)
  {
LABEL_11:
    v11 = v8 - v10;
    goto LABEL_12;
  }
  v11 = 0;
LABEL_12:
  v12 = *(_QWORD **)a3;
  v13 = *(_QWORD **)a2;
  do
  {
    v14 = *v12 + 16 * ((v12[3] + v10) % (unint64_t)((uint64_t)(v12[1] - *v12) >> 4));
    v15 = *v13 + 16 * ((v13[3] + v8) % (unint64_t)((uint64_t)(v13[1] - *v13) >> 4));
    v16 = *(_OWORD *)v14;
    *(_QWORD *)v14 = 0;
    *(_QWORD *)(v14 + 8) = 0;
    v17 = *(std::__shared_weak_count **)(v15 + 8);
    *(_OWORD *)v15 = v16;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    ++v10;
    ++v8;
  }
  while (v10 != v12[5]);
LABEL_21:
  if (v11)
  {
    v20 = -v11;
    v21 = a1[4];
    while (1)
    {
      if (v21)
      {
        v24 = *a1 + 16 * v21;
        v25 = *(std::__shared_weak_count **)(v24 - 8);
        *(_QWORD *)(v24 - 16) = 0;
        *(_QWORD *)(v24 - 8) = 0;
        if (v25)
          goto LABEL_31;
      }
      else
      {
        v27 = *a1 + 16 * ((uint64_t)(a1[1] - *a1) >> 4);
        v25 = *(std::__shared_weak_count **)(v27 - 8);
        *(_QWORD *)(v27 - 16) = 0;
        *(_QWORD *)(v27 - 8) = 0;
        if (v25)
        {
LABEL_31:
          v28 = (unint64_t *)&v25->__shared_owners_;
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
      }
      v22 = a1[4];
      if (v22)
      {
        v21 = v22 - 1;
        v23 = a1[5] - 1;
        a1[4] = v21;
        a1[5] = v23;
        if (!--v20)
          goto LABEL_36;
      }
      else
      {
        v21 = ((uint64_t)(a1[1] - *a1) >> 4) - 1;
        v26 = a1[5] - 1;
        a1[4] = v21;
        a1[5] = v26;
        if (!--v20)
          goto LABEL_36;
      }
    }
  }
  v21 = a1[4];
LABEL_36:
  if ((a1[3] + *(_QWORD *)(a2 + 16)) % (unint64_t)((uint64_t)(a1[1] - *a1) >> 4) == v21)
  {
    v7 = a1[5];
    *(_QWORD *)a4 = a1;
    *(_BYTE *)(a4 + 8) = 1;
  }
  else
  {
    *(_OWORD *)a4 = *(_OWORD *)a2;
    v7 = *(_QWORD *)(a2 + 16);
  }
LABEL_39:
  *(_QWORD *)(a4 + 16) = v7;
}

void sub_20FCBD4C4(std::mutex *a1, _QWORD *a2)
{
  _QWORD *sig;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  char *v33;
  char *v34;
  BOOL v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;

  std::mutex::lock(a1);
  sig = (_QWORD *)a1[1].__m_.__sig;
  if (sig)
  {
    v38 = a2;
    v6 = (char *)sig[2];
    v5 = sig[3];
    if ((unint64_t)v6 >= v5)
    {
      v13 = (char *)sig[1];
      v14 = (v6 - v13) >> 3;
      v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 61)
        sub_20E867F44();
      v16 = v5 - (_QWORD)v13;
      if (v16 >> 2 > v15)
        v15 = v16 >> 2;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
        v17 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v17 = v15;
      if (v17)
      {
        if (v17 >> 61)
          sub_20E877A38();
        v18 = (char *)operator new(8 * v17);
      }
      else
      {
        v18 = 0;
      }
      v19 = &v18[8 * v14];
      v20 = &v18[8 * v17];
      v38 = 0;
      *(_QWORD *)v19 = a2;
      v21 = v19 + 8;
      if (v6 == v13)
      {
        sig[1] = v19;
        sig[2] = v21;
        sig[3] = v20;
      }
      else
      {
        v22 = v6 - v13 - 8;
        if (v22 < 0x78)
          goto LABEL_54;
        if (&v6[-(v22 & 0xFFFFFFFFFFFFFFF8) - 8] < v19 && &v18[v6 - v13 - (v22 & 0xFFFFFFFFFFFFFFF8) - 8] < v6)
          goto LABEL_54;
        v24 = (v22 >> 3) + 1;
        v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        v19 -= v25;
        v26 = &v6[-v25];
        v27 = v6 - 16;
        v28 = &v18[8 * v14 - 16];
        v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v31 = *((_OWORD *)v27 - 1);
          v30 = *(_OWORD *)v27;
          *((_OWORD *)v27 - 1) = 0uLL;
          *(_OWORD *)v27 = 0uLL;
          *((_OWORD *)v28 - 1) = v31;
          *(_OWORD *)v28 = v30;
          v27 -= 32;
          v28 -= 32;
          v29 -= 4;
        }
        while (v29);
        v6 = v26;
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_54:
          do
          {
            v32 = *((_QWORD *)v6 - 1);
            v6 -= 8;
            *(_QWORD *)v6 = 0;
            *((_QWORD *)v19 - 1) = v32;
            v19 -= 8;
          }
          while (v6 != v13);
        }
        v6 = (char *)sig[1];
        v33 = (char *)sig[2];
        sig[1] = v19;
        sig[2] = v21;
        sig[3] = v20;
        if (v33 != v6)
        {
          v34 = v33 - 8;
          do
          {
            v36 = *(_QWORD **)v34;
            *(_QWORD *)v34 = 0;
            if (v36)
              sub_20E990B40((uint64_t)v34, v36);
            v35 = v34 == v6;
            v34 -= 8;
          }
          while (!v35);
        }
      }
      if (v6)
        operator delete(v6);
      v37 = v38;
      sig[2] = v21;
      v38 = 0;
      if (v37)
        sub_20E990B40((uint64_t)&v38, v37);
    }
    else
    {
      *(_QWORD *)v6 = a2;
      sig[2] = v6 + 8;
    }
    std::mutex::unlock(a1);
  }
  else
  {
    std::mutex::unlock(a1);
    if (a2)
    {
      sub_20E990BF8((uint64_t)(a2 + 8));
      v7 = a2[3];
      if (v7)
      {
        v8 = a2[4];
        v9 = (void *)a2[3];
        if (v8 != v7)
        {
          do
          {
            v8 -= 240;
            sub_20E990F68(v8);
          }
          while (v8 != v7);
          v9 = (void *)a2[3];
        }
        a2[4] = v7;
        operator delete(v9);
      }
      v10 = (_QWORD *)*a2;
      if (*a2)
      {
        v11 = (_QWORD *)a2[1];
        v12 = (void *)*a2;
        if (v11 != v10)
        {
          do
          {
            v11 -= 13;
            sub_20E9905B4(v11);
          }
          while (v11 != v10);
          v12 = (void *)*a2;
        }
        a2[1] = v10;
        operator delete(v12);
      }
      JUMPOUT(0x212BC6398);
    }
  }
}

void sub_20FCBD770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10)
{
  std::mutex *v10;
  _QWORD *v12;

  v12 = a10;
  a10 = 0;
  if (v12)
    sub_20E990B40((uint64_t)&a10, v12);
  std::mutex::unlock(v10);
  _Unwind_Resume(a1);
}

void sub_20FCBD798(std::__shared_weak_count *this)
{
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *p_shared_owners;
  unint64_t v4;

  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA04FF0;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (!shared_weak_owners)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&shared_weak_owners->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
    std::__shared_weak_count::__release_weak(shared_weak_owners);
    std::__shared_weak_count::~__shared_weak_count(this);
  }
  else
  {
LABEL_5:
    std::__shared_weak_count::~__shared_weak_count(this);
  }
}

void sub_20FCBD80C(std::__shared_weak_count *this)
{
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *p_shared_owners;
  unint64_t v4;

  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA04FF0;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    p_shared_owners = (unint64_t *)&shared_weak_owners->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
      std::__shared_weak_count::__release_weak(shared_weak_owners);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(this);
  JUMPOUT(0x212BC6398);
}

void sub_20FCBD884(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  sub_20FCBD4C4(*(std::mutex **)(a1 + 32), *(_QWORD **)(a1 + 24));
  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

uint64_t sub_20FCBD8EC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3kit6memory10ObjectPoolINS_3vio17CameraSetFeaturesINS3_13MapDataTraitsILb0EEEEENS1_18AutoRetu"
                     "rningMakeTIS7_NS1_21PoolObjectInitializerIS7_EENS1_23PoolObjectDeinitializerIS7_EEEENSt3__110shared"
                     "_ptrIS7_EENS1_19ObjectBorrowingPoolINSE_10unique_ptrIS7_NSE_14default_deleteIS7_EEEESD_EEE13ObjectDeleterE")
    return a1 + 32;
  if (((v3 & (unint64_t)"N4cv3d3kit6memory10ObjectPoolINS_3vio17CameraSetFeaturesINS3_13MapDataTraitsILb0EEEEENS1"
                                "_18AutoReturningMakeTIS7_NS1_21PoolObjectInitializerIS7_EENS1_23PoolObjectDeinitializerI"
                                "S7_EEEENSt3__110shared_ptrIS7_EENS1_19ObjectBorrowingPoolINSE_10unique_ptrIS7_NSE_14defa"
                                "ult_deleteIS7_EEEESD_EEE13ObjectDeleterE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3kit6memory10ObjectPoolINS_3vio17CameraSetFeaturesINS3_13MapDataTraitsILb0EEEEENS1_18AutoReturningMakeTIS7_NS1_21PoolObjectInitializerIS7_EENS1_23PoolObjectDeinitializerIS7_EEEENSt3__110shared_ptrIS7_EENS1_19ObjectBorrowingPoolINSE_10unique_ptrIS7_NSE_14default_deleteIS7_EEEESD_EEE13ObjectDeleterE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit6memory10ObjectPoolINS_3vio17CameraSetFeaturesINS3_13MapDataTraitsILb0EEEEENS1_18AutoReturningMakeTIS7_NS1_21PoolObjectInitializerIS7_EENS1_23PoolObjectDeinitializerIS7_EEEENSt3__110shared_ptrIS7_EENS1_19ObjectBorrowingPoolINSE_10unique_ptrIS7_NSE_14default_deleteIS7_EEEESD_EEE13ObjectDeleterE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 32;
  return 0;
}

_QWORD *sub_20FCBD95C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  _OWORD *v17;
  char *v18;
  __int128 v19;
  char *v20;
  __int128 v21;
  char *v22;
  __int128 v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  void *v46;
  _QWORD *v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  _QWORD *result;
  uint64_t v108;
  _QWORD v109[3];
  _QWORD *v110;
  uint64_t v111;
  _QWORD v112[3];
  char *v113;
  uint64_t v114;
  _BYTE v115[24];
  _BYTE *v116;
  unint64_t v117;
  _BYTE v118[24];
  _BYTE *v119;
  unint64_t v120;
  _QWORD v121[3];
  _QWORD *v122;
  uint64_t v123;
  _QWORD v124[3];
  _QWORD *v125;
  uint64_t v126;
  _QWORD v127[3];
  _QWORD *v128;
  uint64_t v129;
  _QWORD v130[3];
  _QWORD *v131;
  uint64_t v132;
  _QWORD v133[3];
  _QWORD *v134;
  uint64_t v135;
  _QWORD v136[3];
  _QWORD *v137;
  uint64_t v138;
  _QWORD v139[3];
  _QWORD *v140;
  uint64_t v141;
  _QWORD v142[3];
  _QWORD *v143;
  uint64_t v144;
  _QWORD v145[3];
  _QWORD *v146;
  uint64_t v147;
  _QWORD v148[3];
  _QWORD *v149;
  uint64_t v150;
  _BYTE v151[24];
  _BYTE *v152;
  uint64_t v153;
  _BYTE v154[24];
  _BYTE *v155;
  uint64_t v156;
  _BYTE v157[24];
  _BYTE *v158;
  uint64_t v159;
  uint64_t v160;

  v160 = *MEMORY[0x24BDAC8D0];
  v10 = (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 4;
  v11 = *(_QWORD *)(a4 + 24);
  v12 = (*(_QWORD *)(a4 + 32) - v11) >> 4;
  if (v10 <= v12)
  {
    if (v10 < v12)
      *(_QWORD *)(a4 + 32) = v11 + 16 * v10;
  }
  else
  {
    sub_20E99C28C((char **)(a4 + 24), v10 - v12);
  }
  v13 = *(_QWORD *)(a4 + 184);
  v14 = (*(_QWORD *)(a4 + 192) - v13) >> 3;
  if (v10 <= v14)
  {
    if (v10 < v14)
      *(_QWORD *)(a4 + 192) = v13 + 8 * v10;
  }
  else
  {
    sub_20E93D8FC(a4 + 184, v10 - v14);
  }
  sub_20EE6BAB0(a5, v10);
  v15 = (char *)operator new(0x28uLL);
  *(_QWORD *)v15 = &off_24CA05040;
  *((_QWORD *)v15 + 1) = a1;
  *((_QWORD *)v15 + 2) = a2;
  *((_QWORD *)v15 + 3) = a4;
  v15[32] = a3;
  v16 = (char *)operator new(0x28uLL);
  *(_QWORD *)v16 = &off_24CA05040;
  *((_QWORD *)v16 + 1) = a1;
  v17 = v16 + 8;
  *((_QWORD *)v16 + 2) = a2;
  *((_QWORD *)v16 + 3) = a4;
  v16[32] = a3;
  v114 = 0;
  v116 = v15;
  v117 = v10;
  v119 = v16;
  v111 = 0;
  v18 = (char *)operator new(0x28uLL);
  *(_QWORD *)v18 = &off_24CA05040;
  v19 = *(_OWORD *)(v15 + 24);
  *(_OWORD *)(v18 + 8) = *(_OWORD *)(v15 + 8);
  *(_OWORD *)(v18 + 24) = v19;
  v113 = v18;
  v20 = (char *)operator new(0x28uLL);
  *(_QWORD *)v20 = &off_24CA05040;
  v21 = v17[1];
  *(_OWORD *)(v20 + 8) = *v17;
  *(_OWORD *)(v20 + 24) = v21;
  v110 = v20;
  v22 = (char *)operator new(0x28uLL);
  *(_QWORD *)v22 = &off_24CA05040;
  v23 = *(_OWORD *)(v15 + 24);
  *(_OWORD *)(v22 + 8) = *(_OWORD *)(v15 + 8);
  *(_OWORD *)(v22 + 24) = v23;
  operator delete(v22);
  if (*(_BYTE *)(a5 + 32) && v10 <= *(_QWORD *)(a5 + 24))
  {
    v123 = 0;
    v24 = v124;
    goto LABEL_15;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/FixedSizeVector.h", 86, (uint64_t)"allocated_ && newSize <= max_capacity_", 38, (uint64_t)&unk_2102BAE5D, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v18 = v113;
  v123 = v111;
  v24 = v124;
  if (!v113)
  {
    v25 = 0;
    goto LABEL_17;
  }
  if (v113 != (char *)v112)
  {
LABEL_15:
    v25 = (*(uint64_t (**)(char *))(*(_QWORD *)v18 + 16))(v18);
LABEL_17:
    v125 = (_QWORD *)v25;
    goto LABEL_18;
  }
  v125 = v124;
  (*(void (**)(_QWORD *, _QWORD *))(v112[0] + 24))(v112, v124);
LABEL_18:
  v26 = (uint64_t)v110;
  v120 = v10;
  v27 = v121;
  if (!v110)
  {
    v28 = v109;
    goto LABEL_22;
  }
  v28 = v109;
  if (v110 != v109)
  {
    v26 = (*(uint64_t (**)(void))(*v110 + 16))();
LABEL_22:
    v122 = (_QWORD *)v26;
    goto LABEL_24;
  }
  v122 = v121;
  (*(void (**)(_QWORD *, _QWORD *))(v109[0] + 24))(v109, v121);
LABEL_24:
  v29 = (uint64_t)v125;
  v135 = v123;
  if (!v125)
  {
LABEL_27:
    v137 = (_QWORD *)v29;
    goto LABEL_29;
  }
  if (v125 != v124)
  {
    v29 = (*(uint64_t (**)(void))(*v125 + 16))();
    goto LABEL_27;
  }
  v137 = v136;
  (*(void (**)(_QWORD *, _QWORD *))(v124[0] + 24))(v124, v136);
LABEL_29:
  v30 = (uint64_t)v122;
  v132 = v120;
  if (!v122)
  {
LABEL_32:
    v134 = (_QWORD *)v30;
    goto LABEL_34;
  }
  if (v122 != v121)
  {
    v30 = (*(uint64_t (**)(void))(*v122 + 16))();
    goto LABEL_32;
  }
  v134 = v133;
  (*(void (**)(_QWORD *, _QWORD *))(v121[0] + 24))(v121, v133);
LABEL_34:
  v31 = (uint64_t)v125;
  v129 = v123;
  v32 = v130;
  if (!v125)
  {
LABEL_37:
    v131 = (_QWORD *)v31;
    goto LABEL_39;
  }
  if (v125 != v124)
  {
    v31 = (*(uint64_t (**)(void))(*v125 + 16))();
    goto LABEL_37;
  }
  v131 = v130;
  (*(void (**)(_QWORD *, _QWORD *))(v124[0] + 24))(v124, v130);
LABEL_39:
  v33 = (uint64_t)v122;
  v126 = v120;
  v34 = v127;
  if (!v122)
  {
LABEL_42:
    v128 = (_QWORD *)v33;
    goto LABEL_44;
  }
  if (v122 != v121)
  {
    v33 = (*(uint64_t (**)(void))(*v122 + 16))();
    goto LABEL_42;
  }
  v128 = v127;
  (*(void (**)(_QWORD *, _QWORD *))(v121[0] + 24))(v121, v127);
LABEL_44:
  v35 = (uint64_t)v131;
  v156 = v129;
  v36 = v157;
  if (!v131)
  {
LABEL_47:
    v158 = (_BYTE *)v35;
    goto LABEL_49;
  }
  if (v131 != v130)
  {
    v35 = (*(uint64_t (**)(_QWORD *))(*v131 + 16))(v131);
    goto LABEL_47;
  }
  v158 = v157;
  (*(void (**)(_QWORD *, _BYTE *))(v130[0] + 24))(v130, v157);
LABEL_49:
  v37 = v126;
  v153 = v126;
  if (!v128)
  {
    v155 = 0;
    v40 = v156;
    goto LABEL_55;
  }
  v38 = v154;
  if (v128 != v127)
  {
    v39 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v128 + 16))(v128);
    v155 = v39;
    v40 = v156;
    v37 = v153;
    if (v39 != v154)
      goto LABEL_52;
LABEL_59:
    v41 = 4;
LABEL_60:
    (*(void (**)(_QWORD *))(*v38 + 8 * v41))(v38);
    v42 = v158;
    if (v158 == v157)
      goto LABEL_61;
    goto LABEL_56;
  }
  v155 = v154;
  (*(void (**)(_QWORD *, _BYTE *))(v127[0] + 24))(v127, v154);
  v39 = v155;
  v40 = v156;
  v37 = v153;
  if (v155 == v154)
    goto LABEL_59;
LABEL_52:
  if (v39)
  {
    v41 = 5;
    v38 = v39;
    goto LABEL_60;
  }
LABEL_55:
  v42 = v158;
  if (v158 == v157)
  {
LABEL_61:
    v43 = 4;
    goto LABEL_62;
  }
LABEL_56:
  if (!v42)
    goto LABEL_63;
  v43 = 5;
  v36 = v42;
LABEL_62:
  (*(void (**)(_QWORD *))(*v36 + 8 * v43))(v36);
LABEL_63:
  v44 = v37 - v40;
  v45 = *(_QWORD *)(a5 + 16);
  v46 = *(void **)a5;
  if (0xCCCCCCCCCCCCCCCDLL * ((v45 - *(_QWORD *)a5) >> 3) < v37 - v40)
  {
    if (v46)
    {
      *(_QWORD *)(a5 + 8) = v46;
      operator delete(v46);
      v45 = 0;
      *(_QWORD *)a5 = 0;
      *(_QWORD *)(a5 + 8) = 0;
      *(_QWORD *)(a5 + 16) = 0;
    }
    v47 = v136;
    if (v44 > 0x666666666666666)
      goto LABEL_257;
    v48 = 0xCCCCCCCCCCCCCCCDLL * (v45 >> 3);
    v49 = 2 * v48;
    if (2 * v48 <= v44)
      v49 = v44;
    v50 = v48 >= 0x333333333333333 ? 0x666666666666666 : v49;
    if (v50 > 0x666666666666666)
LABEL_257:
      sub_20E867F44();
    v51 = (char *)operator new(40 * v50);
    *(_QWORD *)a5 = v51;
    *(_QWORD *)(a5 + 8) = v51;
    *(_QWORD *)(a5 + 16) = &v51[40 * v50];
    v52 = (uint64_t)v137;
    v156 = v135;
    v53 = v157;
    if (v137)
    {
      if (v137 == v136)
      {
        v158 = v157;
        (*(void (**)(_QWORD *, _BYTE *))(v136[0] + 24))(v136, v157);
LABEL_87:
        v59 = (uint64_t)v134;
        v153 = v132;
        v60 = v154;
        if (v134)
        {
          if (v134 == v133)
          {
            v155 = v154;
            (*(void (**)(_QWORD *, _BYTE *))(v133[0] + 24))(v133, v154);
LABEL_92:
            sub_20FCC07AC(a5, &v156, &v153);
            if (v155 == v154)
            {
              v61 = 4;
            }
            else
            {
              if (!v155)
              {
LABEL_97:
                if (v158 == v157)
                {
                  v63 = 4;
                  v62 = v133;
                }
                else
                {
                  v62 = v133;
                  if (!v158)
                    goto LABEL_206;
                  v63 = 5;
                  v53 = v158;
                }
                (*(void (**)(_QWORD *))(*v53 + 8 * v63))(v53);
                goto LABEL_206;
              }
              v61 = 5;
              v60 = v155;
            }
            (*(void (**)(_QWORD *))(*v60 + 8 * v61))(v60);
            goto LABEL_97;
          }
          v59 = (*(uint64_t (**)(void))(*v134 + 16))();
        }
        v155 = (_BYTE *)v59;
        goto LABEL_92;
      }
      v52 = (*(uint64_t (**)(void))(*v137 + 16))();
    }
    v158 = (_BYTE *)v52;
    goto LABEL_87;
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a5 + 8) - (_QWORD)v46) >> 3) >= v44)
  {
    v57 = (uint64_t)v137;
    v153 = v135;
    v58 = v154;
    if (v137)
    {
      if (v137 == v136)
      {
        v155 = v154;
        (*(void (**)(_QWORD *, _BYTE *))(v136[0] + 24))(v136, v154);
LABEL_109:
        v65 = (uint64_t)v134;
        v150 = v132;
        v66 = v151;
        if (v134)
        {
          if (v134 == v133)
          {
            v152 = v151;
            (*(void (**)(_QWORD *, _BYTE *))(v133[0] + 24))(v133, v151);
LABEL_124:
            sub_20FCC0D88(&v156, &v153, &v150, *(_QWORD *)a5);
            v70 = v158;
            v71 = v159;
            if (v158 == v157)
            {
              v72 = 4;
              v70 = v157;
            }
            else
            {
              if (!v158)
                goto LABEL_129;
              v72 = 5;
            }
            (*(void (**)(void))(*v70 + 8 * v72))();
LABEL_129:
            if (v152 == v151)
            {
              v73 = 4;
            }
            else
            {
              if (!v152)
                goto LABEL_134;
              v73 = 5;
              v66 = v152;
            }
            (*(void (**)(_QWORD *))(*v66 + 8 * v73))(v66);
LABEL_134:
            if (v155 == v154)
            {
              v74 = 4;
              v62 = v133;
            }
            else
            {
              v62 = v133;
              if (!v155)
              {
LABEL_139:
                *(_QWORD *)(a5 + 8) = v71;
                v47 = v136;
                goto LABEL_206;
              }
              v74 = 5;
              v58 = v155;
            }
            (*(void (**)(_QWORD *))(*v58 + 8 * v74))(v58);
            goto LABEL_139;
          }
          v65 = (*(uint64_t (**)(_QWORD *))(*v134 + 16))(v134);
        }
        v152 = (_BYTE *)v65;
        goto LABEL_124;
      }
      v57 = (*(uint64_t (**)(_QWORD *))(*v137 + 16))(v137);
    }
    v155 = (_BYTE *)v57;
    goto LABEL_109;
  }
  v54 = v135;
  v55 = v137;
  v144 = v135;
  v56 = v145;
  if (v137)
  {
    if (v137 == v136)
    {
      v146 = v145;
      (*(void (**)(_QWORD *, _QWORD *))(v136[0] + 24))(v136, v145);
      v54 = v144;
      v55 = v146;
    }
    else
    {
      v55 = (_QWORD *)(*(uint64_t (**)(void))(*v137 + 16))();
      v146 = v55;
    }
  }
  else
  {
    v146 = 0;
  }
  v144 = v54 - 0x3333333333333333 * ((uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 3);
  v147 = v144;
  v64 = &v147;
  if (!v55)
    goto LABEL_107;
  if (v55 != v145)
  {
    v64 = &v144;
    v149 = v55;
LABEL_107:
    v64[4] = 0;
    goto LABEL_114;
  }
  v149 = v148;
  (*(void (**)(_QWORD *))(v145[0] + 24))(v145);
LABEL_114:
  if (v146 == v145)
  {
    v67 = 4;
  }
  else
  {
    if (!v146)
      goto LABEL_119;
    v67 = 5;
    v56 = v146;
  }
  (*(void (**)(_QWORD *))(*v56 + 8 * v67))(v56);
LABEL_119:
  v68 = (uint64_t)v137;
  v141 = v135;
  v69 = v142;
  if (!v137)
  {
LABEL_122:
    v143 = (_QWORD *)v68;
    goto LABEL_141;
  }
  if (v137 != v136)
  {
    v68 = (*(uint64_t (**)(void))(*v137 + 16))();
    goto LABEL_122;
  }
  v143 = v142;
  (*(void (**)(_QWORD *, _QWORD *))(v136[0] + 24))(v136, v142);
LABEL_141:
  v75 = (uint64_t)v149;
  v138 = v147;
  v76 = v139;
  if (!v149)
  {
LABEL_144:
    v140 = (_QWORD *)v75;
    goto LABEL_146;
  }
  if (v149 != v148)
  {
    v75 = (*(uint64_t (**)(void))(*v149 + 16))();
    goto LABEL_144;
  }
  v140 = v139;
  (*(void (**)(_QWORD *, _QWORD *))(v148[0] + 24))(v148, v139);
LABEL_146:
  v77 = *(_QWORD *)a5;
  v78 = (uint64_t)v143;
  v153 = v141;
  v79 = v154;
  if (!v143)
  {
LABEL_149:
    v155 = (_BYTE *)v78;
    goto LABEL_151;
  }
  if (v143 != v142)
  {
    v78 = (*(uint64_t (**)(void))(*v143 + 16))();
    goto LABEL_149;
  }
  v155 = v154;
  (*(void (**)(_QWORD *, _BYTE *))(v142[0] + 24))(v142, v154);
LABEL_151:
  v80 = (uint64_t)v140;
  v150 = v138;
  v81 = v151;
  if (!v140)
  {
LABEL_154:
    v152 = (_BYTE *)v80;
    goto LABEL_156;
  }
  if (v140 != v139)
  {
    v80 = (*(uint64_t (**)(void))(*v140 + 16))();
    goto LABEL_154;
  }
  v152 = v151;
  (*(void (**)(_QWORD *, _BYTE *))(v139[0] + 24))(v139, v151);
LABEL_156:
  sub_20FCC0D88(&v156, &v153, &v150, v77);
  v82 = v158;
  if (v158 == v157)
  {
    v83 = 4;
    v82 = v157;
  }
  else
  {
    if (!v158)
      goto LABEL_161;
    v83 = 5;
  }
  (*(void (**)(void))(*v82 + 8 * v83))();
LABEL_161:
  if (v152 == v151)
  {
    v84 = 4;
  }
  else
  {
    if (!v152)
      goto LABEL_166;
    v84 = 5;
    v81 = v152;
  }
  (*(void (**)(_QWORD *))(*v81 + 8 * v84))(v81);
LABEL_166:
  if (v155 == v154)
  {
    v85 = 4;
    v47 = v136;
  }
  else
  {
    v47 = v136;
    if (!v155)
      goto LABEL_171;
    v85 = 5;
    v79 = v155;
  }
  (*(void (**)(_QWORD *))(*v79 + 8 * v85))(v79);
LABEL_171:
  if (v140 == v139)
  {
    v86 = 4;
  }
  else
  {
    if (!v140)
      goto LABEL_176;
    v86 = 5;
    v76 = v140;
  }
  (*(void (**)(_QWORD *))(*v76 + 8 * v86))(v76);
LABEL_176:
  if (v143 == v142)
  {
    v87 = 4;
    v28 = v109;
    v24 = v124;
  }
  else
  {
    v28 = v109;
    v24 = v124;
    if (!v143)
      goto LABEL_181;
    v87 = 5;
    v69 = v143;
  }
  (*(void (**)(_QWORD *))(*v69 + 8 * v87))(v69);
LABEL_181:
  v88 = (uint64_t)v149;
  v156 = v147;
  v89 = v157;
  if (!v149)
  {
LABEL_184:
    v158 = (_BYTE *)v88;
    goto LABEL_186;
  }
  if (v149 != v148)
  {
    v88 = (*(uint64_t (**)(void))(*v149 + 16))();
    goto LABEL_184;
  }
  v158 = v157;
  (*(void (**)(_QWORD *, _BYTE *))(v148[0] + 24))(v148, v157);
LABEL_186:
  v90 = (uint64_t)v134;
  v153 = v132;
  v91 = v154;
  if (!v134)
  {
LABEL_189:
    v155 = (_BYTE *)v90;
    goto LABEL_191;
  }
  if (v134 != v133)
  {
    v90 = (*(uint64_t (**)(void))(*v134 + 16))();
    goto LABEL_189;
  }
  v155 = v154;
  (*(void (**)(_QWORD *, _BYTE *))(v133[0] + 24))(v133, v154);
LABEL_191:
  sub_20FCC07AC(a5, &v156, &v153);
  if (v155 == v154)
  {
    v92 = 4;
  }
  else
  {
    if (!v155)
      goto LABEL_196;
    v92 = 5;
    v91 = v155;
  }
  (*(void (**)(_QWORD *))(*v91 + 8 * v92))(v91);
LABEL_196:
  if (v158 == v157)
  {
    v93 = 4;
    v62 = v133;
    goto LABEL_200;
  }
  v62 = v133;
  if (v158)
  {
    v93 = 5;
    v89 = v158;
LABEL_200:
    (*(void (**)(_QWORD *))(*v89 + 8 * v93))(v89);
  }
  v94 = v148;
  if (v149 == v148)
  {
    v95 = 4;
  }
  else
  {
    if (!v149)
      goto LABEL_206;
    v95 = 5;
    v94 = v149;
  }
  (*(void (**)(_QWORD *))(*v94 + 8 * v95))(v94);
LABEL_206:
  if (v128 == v127)
  {
    v96 = 4;
  }
  else
  {
    if (!v128)
      goto LABEL_211;
    v96 = 5;
    v34 = v128;
  }
  (*(void (**)(_QWORD *))(*v34 + 8 * v96))(v34);
LABEL_211:
  if (v131 == v130)
  {
    v97 = 4;
  }
  else
  {
    if (!v131)
      goto LABEL_216;
    v97 = 5;
    v32 = v131;
  }
  (*(void (**)(_QWORD *))(*v32 + 8 * v97))(v32);
LABEL_216:
  if (v134 == v133)
  {
    v98 = 4;
  }
  else
  {
    if (!v134)
      goto LABEL_221;
    v98 = 5;
    v62 = v134;
  }
  (*(void (**)(_QWORD *))(*v62 + 8 * v98))(v62);
LABEL_221:
  if (v137 == v136)
  {
    v99 = 4;
  }
  else
  {
    if (!v137)
      goto LABEL_226;
    v99 = 5;
    v47 = v137;
  }
  (*(void (**)(_QWORD *))(*v47 + 8 * v99))(v47);
LABEL_226:
  if (v122 == v121)
  {
    v100 = 4;
  }
  else
  {
    if (!v122)
      goto LABEL_231;
    v100 = 5;
    v27 = v122;
  }
  (*(void (**)(_QWORD *))(*v27 + 8 * v100))(v27);
LABEL_231:
  if (v125 == v124)
  {
    v102 = 4;
    v101 = (char *)v112;
  }
  else
  {
    v101 = (char *)v112;
    if (!v125)
      goto LABEL_236;
    v102 = 5;
    v24 = v125;
  }
  (*(void (**)(_QWORD *))(*v24 + 8 * v102))(v24);
LABEL_236:
  if (v110 == v109)
  {
    v103 = 4;
  }
  else
  {
    if (!v110)
      goto LABEL_241;
    v103 = 5;
    v28 = v110;
  }
  (*(void (**)(_QWORD *))(*v28 + 8 * v103))(v28);
LABEL_241:
  if (v113 == (char *)v112)
  {
    v104 = 4;
  }
  else
  {
    if (!v113)
      goto LABEL_246;
    v104 = 5;
    v101 = v113;
  }
  (*(void (**)(char *))(*(_QWORD *)v101 + 8 * v104))(v101);
LABEL_246:
  v105 = v119;
  if (v119 == v118)
  {
    v106 = 4;
    v105 = v118;
  }
  else
  {
    if (!v119)
      goto LABEL_251;
    v106 = 5;
  }
  (*(void (**)(void))(*v105 + 8 * v106))();
LABEL_251:
  result = v116;
  if (v116 == v115)
  {
    v108 = 4;
    result = v115;
  }
  else
  {
    if (!v116)
      return result;
    v108 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v108))();
}

void sub_20FCBE834(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  _Unwind_Resume(a1);
}

uint64_t sub_20FCBEC9C(uint64_t a1, uint64_t a2)
{
  int64_t v4;
  unint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char *v15;
  char *v16;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80);
  v5 = v4 >> 6;
  if (*(_BYTE *)(a2 + 32))
  {
    v6 = *(_BYTE **)a2;
    *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
    *(_BYTE *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 24) = v5;
    if (v5 <= (uint64_t)(*(_QWORD *)(a2 + 16) - (_QWORD)v6) >> 6)
      goto LABEL_11;
  }
  else
  {
    v6 = *(_BYTE **)a2;
    *(_QWORD *)(a2 + 24) = v5;
    if (v5 <= (uint64_t)(*(_QWORD *)(a2 + 16) - (_QWORD)v6) >> 6)
      goto LABEL_11;
  }
  if (v4 < 0)
    sub_20ED343A8();
  v7 = *(_BYTE **)(a2 + 8);
  v8 = (char *)operator new(v4);
  v9 = &v8[(v7 - v6) & 0xFFFFFFFFFFFFFFC0];
  v10 = v9;
  if (v7 != v6)
  {
    v11 = &v8[(v7 - v6) & 0xFFFFFFFFFFFFFFC0];
    do
    {
      v12 = *((_OWORD *)v7 - 4);
      v13 = *((_OWORD *)v7 - 3);
      v14 = *((_OWORD *)v7 - 1);
      v10 = v11 - 64;
      *((_OWORD *)v11 - 2) = *((_OWORD *)v7 - 2);
      *((_OWORD *)v11 - 1) = v14;
      *((_OWORD *)v11 - 4) = v12;
      *((_OWORD *)v11 - 3) = v13;
      v7 -= 64;
      v11 -= 64;
    }
    while (v7 != v6);
  }
  *(_QWORD *)a2 = v10;
  *(_QWORD *)(a2 + 8) = v9;
  *(_QWORD *)(a2 + 16) = &v8[64 * v5];
  if (v6)
  {
    operator delete(v6);
    v5 = *(_QWORD *)(a2 + 24);
  }
LABEL_11:
  *(_BYTE *)(a2 + 32) = 1;
  v15 = *(char **)(a1 + 80);
  v16 = *(char **)(a1 + 88);
  if ((v16 - v15) >> 6 > v5
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/FixedSizeVector.h", 86, (uint64_t)"allocated_ && newSize <= max_capacity_", 38, (uint64_t)&unk_2102BAE5D, 0, (void (*)(void **))sub_21023DDB0)|| (result = (uint64_t)sub_20FCC1FF8((_QWORD *)a2, v15, v16, (v16 - v15) >> 6), *(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != *(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80))&& (result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/src/CameraSetFeaturesUtil.cpp", 98, (uint64_t)"descriptors.size() == point_descriptor_store.descriptors().size()", 65, (uint64_t)&unk_2102BAE5D, 0, (void (*)(void **))sub_21023DDB0), (_DWORD)result))
  {
    abort();
  }
  return result;
}

uint64_t sub_20FCBEE40(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];
  int v9;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v8[0] = 0;
  v8[1] = 0;
  v10[0] = &off_24CA050D0;
  v10[1] = v8;
  v2 = v10;
  v11 = v10;
  v3 = (uint64_t *)a1[10];
  if (!v3)
  {
    v6 = 4;
    goto LABEL_21;
  }
  if (*a1 == a1[1])
  {
    v6 = 4;
    do
      v3 = (uint64_t *)*v3;
    while (v3);
    goto LABEL_20;
  }
  do
  {
    v4 = *a1;
    v5 = a1[1];
    if (*a1 != v5)
    {
      while ((unsigned __int16)HIWORD(*((_DWORD *)v3 + 4)) != *(_DWORD *)v4
           || 0x6FB586FB586FB587 * ((uint64_t)(*(_QWORD *)(v4 + 16) - *(_QWORD *)(v4 + 8)) >> 3) <= (unint64_t)(unsigned __int16)*((_DWORD *)v3 + 4))
      {
        v4 += 104;
        if (v4 == v5)
          goto LABEL_4;
      }
      v9 = *((_DWORD *)v3 + 4);
      if (!v11)
        sub_20E86D37C();
      (*(void (**)(_QWORD *, int *, uint64_t *))(*v11 + 48))(v11, &v9, v3 + 3);
    }
LABEL_4:
    v3 = (uint64_t *)*v3;
  }
  while (v3);
  v2 = v11;
  if (v11 == v10)
  {
    v6 = 4;
LABEL_20:
    v2 = v10;
    goto LABEL_21;
  }
  if (v11)
  {
    v6 = 5;
LABEL_21:
    (*(void (**)(void))(*v2 + 8 * v6))();
  }
  return v8[0];
}

void sub_20FCBEFA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_20FCBEFE8(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  int v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  uint64_t v17;
  const char *v18;
  int v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  const char *v22;
  int v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unsigned int v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  unsigned int v32;
  int v33;
  const char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  int v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  int v46;
  uint64_t v47;
  uint64_t i;
  uint64_t v49;
  uint64_t j;
  uint64_t v51;
  uint64_t k;
  uint64_t v53;
  uint64_t m;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  __int128 v61;
  char *v62;
  char *v63;
  char *v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  char *v72;
  unint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  int64_t v77;
  char *v78;
  char *v79;
  int v80;
  unint64_t v81;
  char *v82;
  char *v83;
  unint64_t v84;
  BOOL v86;
  uint64_t v88;
  uint64_t v89;
  _OWORD *v90;
  __int128 *v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  char *__p;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;

  v3 = a2;
  v4 = a3;
  v109 = 0;
  v110 = 0;
  v111 = 0;
  __p = 0;
  v5 = *a2;
  v100 = a2[1];
  if (*a2 != v100)
  {
    v97 = a1;
    v6 = 0;
    v103 = 0;
    v7 = 0;
    v8 = 0;
    v9 = "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes"
         "/CameraStreamId.h";
    while (1)
    {
      v10 = *(_QWORD *)(v5 + 8);
      v104 = *(_QWORD *)(v5 + 16);
      if (v10 != v104)
        break;
LABEL_3:
      v5 += 104;
      if (v5 == v100)
      {
        v62 = v7;
        v63 = v109;
        v64 = v110;
        v3 = a2;
        v4 = a3;
        a1 = v97;
        goto LABEL_106;
      }
    }
    v107 = 0;
    v101 = v5;
    while (1)
    {
      v105 = *(_QWORD *)(v10 + 24);
      v106 = *(_QWORD *)(v10 + 32);
      v12 = *(_DWORD *)v5;
      if (*(_DWORD *)v5 >= 0x10000u)
      {
        sub_21023D70C(v9, 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
        v13 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v47 = qword_254A6DE40;
          for (i = qword_254A6DE48; v47 != i; v47 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v47)(*(_QWORD *)(v47 + 8), "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
        }
        v14 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
LABEL_137:
          abort();
        qword_254A6DE58(unk_254A6DE60, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
      }
      if (v107 >= 0x10000)
      {
        sub_21023D70C(v9, 39, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
        v15 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v49 = qword_254A6DE40;
          for (j = qword_254A6DE48; v49 != j; v49 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v49)(*(_QWORD *)(v49 + 8), "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
        }
        v16 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          goto LABEL_137;
        qword_254A6DE58(unk_254A6DE60, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
      }
      v17 = (*(_QWORD *)(v10 + 32) - *(_QWORD *)(v10 + 24)) >> 4;
      if ((unint64_t)(0x6FB586FB586FB587 * ((uint64_t)(*(_QWORD *)(v5 + 16) - *(_QWORD *)(v5 + 8)) >> 3)) >= 2)
      {
        v102 = v7;
        if (v12 >= 0x10000)
        {
          sub_21023D70C(v9, 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
          v18 = v9;
          v19 = v17;
          v20 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v20 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68 || byte_254A6DE70)
          {
            v51 = qword_254A6DE40;
            for (k = qword_254A6DE48; v51 != k; v51 += 16)
              (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v51)(*(_QWORD *)(v51 + 8), "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
          }
          v21 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v21 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          LODWORD(v17) = v19;
          v9 = v18;
          v7 = v102;
          if (!byte_254A6DE68)
            goto LABEL_137;
          qword_254A6DE58(unk_254A6DE60, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
        }
        if (v107 >= 0x10000)
        {
          sub_21023D70C(v9, 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
          v22 = v9;
          v23 = v17;
          v24 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v24 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68 || byte_254A6DE70)
          {
            v53 = qword_254A6DE40;
            for (m = qword_254A6DE48; v53 != m; v53 += 16)
              (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v53)(*(_QWORD *)(v53 + 8), "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
          }
          v25 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v25 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          LODWORD(v17) = v23;
          v9 = v22;
          v7 = v102;
          if (!byte_254A6DE68)
            goto LABEL_137;
          qword_254A6DE58(unk_254A6DE60, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
        }
        v26 = (unsigned __int16)v107 | ((unsigned __int16)v12 << 16);
        v27 = v109;
        if (v110 != v109)
        {
          v28 = (v110 - v109) >> 3;
          do
          {
            v29 = v28 >> 1;
            v30 = &v27[8 * (v28 >> 1)];
            v32 = *(_DWORD *)v30;
            v31 = v30 + 8;
            v28 += ~(v28 >> 1);
            if (v32 < v26)
              v27 = v31;
            else
              v28 = v29;
          }
          while (v28);
          if (v110 == v27 || *(_DWORD *)v27 != v26)
          {
LABEL_70:
            v112 = v26;
            v27 = sub_20F9B999C((unint64_t *)&v109, (uint64_t)v27, (uint64_t)&v112);
          }
          *((_DWORD *)v27 + 1) = v17;
          ++v107;
          goto LABEL_8;
        }
        v27 = v110;
        goto LABEL_70;
      }
      if (v7 >= v103)
        break;
      *(_DWORD *)v7 = v17;
      v11 = (uint64_t)(v7 + 4);
LABEL_7:
      v7 = (char *)v11;
LABEL_8:
      v8 += (unint64_t)(v106 - v105) >> 4;
      v10 += 440;
      if (v10 == v104)
        goto LABEL_3;
    }
    v33 = v8;
    v34 = v9;
    v35 = v7;
    v36 = v7 - v6;
    v37 = v36 >> 2;
    v38 = (v36 >> 2) + 1;
    if (v38 >> 62)
      sub_20E867F44();
    if ((v103 - v6) >> 1 > v38)
      v38 = (v103 - v6) >> 1;
    if ((unint64_t)(v103 - v6) >= 0x7FFFFFFFFFFFFFFCLL)
      v39 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v39 = v38;
    if (v39)
    {
      if (v39 >> 62)
        sub_20E877A38();
      v40 = (char *)operator new(4 * v39);
      v41 = v17;
      v42 = &v40[4 * v37];
      *(_DWORD *)v42 = v41;
      v11 = (uint64_t)(v42 + 4);
      v43 = v35 - v6;
      if (v35 != v6)
      {
LABEL_56:
        v44 = v43 - 4;
        if (v44 < 0xBC
          || (v55 = (v35 - 4 - v6) & 0xFFFFFFFFFFFFFFFCLL, &v40[v36 - 4 - v55] > &v40[v36 - 4])
          || &v35[-v55 - 4] > v35 - 4
          || (unint64_t)(v35 - &v40[v36]) < 0x20)
        {
          v45 = v35;
          v9 = v34;
        }
        else
        {
          v56 = (v44 >> 2) + 1;
          v57 = 4 * (v56 & 0x7FFFFFFFFFFFFFF8);
          v45 = &v35[-v57];
          v42 -= v57;
          v58 = &v40[4 * v37 - 16];
          v59 = v35 - 16;
          v60 = v56 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v61 = *(_OWORD *)v59;
            *((_OWORD *)v58 - 1) = *((_OWORD *)v59 - 1);
            *(_OWORD *)v58 = v61;
            v58 -= 32;
            v59 -= 32;
            v60 -= 8;
          }
          while (v60);
          v9 = v34;
          if (v56 == (v56 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_59:
            __p = v42;
            v103 = &v40[4 * v39];
            v8 = v33;
            if (!v6)
            {
LABEL_61:
              v6 = v42;
              v5 = v101;
              goto LABEL_7;
            }
LABEL_60:
            operator delete(v6);
            goto LABEL_61;
          }
        }
        do
        {
          v46 = *((_DWORD *)v45 - 1);
          v45 -= 4;
          *((_DWORD *)v42 - 1) = v46;
          v42 -= 4;
        }
        while (v45 != v6);
        goto LABEL_59;
      }
    }
    else
    {
      v40 = 0;
      v42 = (char *)(4 * v37);
      *(_DWORD *)(4 * v37) = (*(_QWORD *)(v10 + 32) - *(_QWORD *)(v10 + 24)) >> 4;
      v11 = 4 * v37 + 4;
      v43 = v35 - v6;
      if (v35 != v6)
        goto LABEL_56;
    }
    v9 = v34;
    __p = v42;
    v103 = &v40[4 * v39];
    v8 = v33;
    if (!v6)
      goto LABEL_61;
    goto LABEL_60;
  }
  v62 = 0;
  v64 = 0;
  v63 = 0;
  v8 = 0;
LABEL_106:
  v65 = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(v4 + 160) = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(v4 + 176) = v65;
  *(_WORD *)(v4 + 192) = *(_WORD *)(a1 + 192);
  v66 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v4 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v4 + 112) = v66;
  v67 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(v4 + 128) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(v4 + 144) = v67;
  v68 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v4 + 48) = v68;
  v69 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v4 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v4 + 80) = v69;
  v70 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v4 = *(_OWORD *)a1;
  *(_OWORD *)(v4 + 16) = v70;
  *(_QWORD *)(v4 + 200) = 0;
  *(_QWORD *)(v4 + 208) = 0;
  *(_QWORD *)(v4 + 216) = 0;
  v71 = v64 - v63;
  if (v64 != v63)
  {
    if (v71 < 0)
      sub_20E92CED8();
    v72 = (char *)operator new(v64 - v63);
    *(_QWORD *)(v4 + 200) = v72;
    *(_QWORD *)(v4 + 208) = v72;
    *(_QWORD *)(v4 + 216) = &v72[8 * (v71 >> 3)];
    v73 = v71 - 8;
    if ((unint64_t)(v71 - 8) >= 0x78)
    {
      v81 = v73 & 0xFFFFFFFFFFFFFFF8 | 4;
      v82 = &v72[v81];
      v83 = &v63[v81];
      v84 = (v73 & 0xFFFFFFFFFFFFFFF8) + 8;
      v86 = v72 + 4 < &v63[v84] && v63 + 4 < &v72[v84];
      v74 = v63;
      if ((v63 >= v82 || v72 >= v83) && !v86)
      {
        v88 = (v73 >> 3) + 1;
        v89 = 8 * (v88 & 0x3FFFFFFFFFFFFFF8);
        v74 = &v63[v89];
        v75 = &v72[v89];
        v90 = v72 + 32;
        v91 = (__int128 *)(v63 + 32);
        v92 = v88 & 0x3FFFFFFFFFFFFFF8;
        do
        {
          v94 = *(v91 - 2);
          v93 = *(v91 - 1);
          v96 = *v91;
          v95 = v91[1];
          v91 += 4;
          *(v90 - 2) = v94;
          *(v90 - 1) = v93;
          *v90 = v96;
          v90[1] = v95;
          v90 += 4;
          v92 -= 8;
        }
        while (v92);
        v72 = v75;
        if (v88 == (v88 & 0x3FFFFFFFFFFFFFF8))
          goto LABEL_112;
      }
    }
    else
    {
      v74 = v63;
    }
    v75 = v72;
    do
    {
      v76 = *(_QWORD *)v74;
      v74 += 8;
      *(_QWORD *)v75 = v76;
      v75 += 8;
    }
    while (v74 != v64);
LABEL_112:
    *(_QWORD *)(v4 + 208) = v75;
  }
  *(_QWORD *)(v4 + 224) = 0;
  *(_QWORD *)(v4 + 232) = 0;
  *(_QWORD *)(v4 + 240) = 0;
  v77 = v62 - __p;
  if (v77)
  {
    if (v77 < 0)
      sub_20E867F44();
    v78 = (char *)operator new(v77);
    *(_QWORD *)(v4 + 224) = v78;
    *(_QWORD *)(v4 + 232) = v78;
    v79 = &v78[4 * (v77 >> 2)];
    *(_QWORD *)(v4 + 240) = v79;
    memcpy(v78, __p, v77);
    *(_QWORD *)(v4 + 232) = v79;
  }
  v80 = -991146299 * ((v3[1] - *v3) >> 3);
  *(_DWORD *)(v4 + 248) = v8;
  *(_DWORD *)(v4 + 252) = v80;
  if (__p)
  {
    operator delete(__p);
    v63 = v109;
  }
  if (v63)
  {
    v110 = v63;
    operator delete(v63);
  }
}

void sub_20FCBFAE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  void **v24;
  void **v25;
  uint64_t v26;
  void *v28;
  void *v29;
  void *v30;
  void *v31;

  v28 = *v25;
  if (*v25)
  {
    *(_QWORD *)(v26 + 232) = v28;
    operator delete(v28);
    v29 = *v24;
    if (!*v24)
    {
LABEL_3:
      v30 = __p;
      if (!__p)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else
  {
    v29 = *v24;
    if (!*v24)
      goto LABEL_3;
  }
  *(_QWORD *)(v26 + 208) = v29;
  operator delete(v29);
  v30 = __p;
  if (!__p)
  {
LABEL_4:
    v31 = a23;
    if (!a23)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  operator delete(v30);
  v31 = a23;
  if (!a23)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_9:
  operator delete(v31);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FCBFBDC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t *v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t *v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t *v35;
  unint64_t v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  uint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  int v52;

  v2 = *(_QWORD **)result;
  v3 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(result + 8) - *(_QWORD *)result) >> 3);
  v4 = 4;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  if (v3 < 4)
    v4 = v3;
  *(_OWORD *)(a2 + 32) = 0uLL;
  *(_OWORD *)(a2 + 48) = 0uLL;
  if (v4)
  {
    v5 = *(_QWORD **)(result + 24);
    *(_DWORD *)a2 = 0;
    *(_DWORD *)(a2 + 16) = 0;
    *(_DWORD *)(a2 + 32) = 0;
    *(_DWORD *)(a2 + 48) = 0;
    result = v2[1];
    v6 = v2[2];
    v7 = v6 - result;
    if (v6 != result)
    {
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v12 = (uint64_t *)v5[3];
      v13 = 0x6FB586FB586FB587 * (v7 >> 3);
      result += 72;
      v14 = 1;
      do
      {
        v11 += (*(_QWORD *)(result - 40) - *(_QWORD *)(result - 48)) >> 4;
        v15 = *v12;
        v12 += 2;
        v10 += *(_DWORD *)(v15 + 24);
        v9 += (*(_QWORD *)(result + 8) - *(_QWORD *)result) >> 3;
        if (*(_BYTE *)(result + 48))
          v16 = (*(_QWORD *)(result + 32) - *(_QWORD *)(result + 24)) >> 3;
        else
          v16 = 0;
        v8 += v16;
        v17 = v13 > v14++;
        result += 440;
      }
      while (v17);
      *(_DWORD *)a2 = v11;
      *(_DWORD *)(a2 + 16) = v10;
      *(_DWORD *)(a2 + 32) = v9;
      *(_DWORD *)(a2 + 48) = v8;
    }
    if (v4 != 1)
    {
      *(_DWORD *)(a2 + 4) = 0;
      *(_DWORD *)(a2 + 20) = 0;
      *(_DWORD *)(a2 + 36) = 0;
      *(_DWORD *)(a2 + 52) = 0;
      result = v2[14];
      v18 = v2[15];
      v19 = v18 - result;
      if (v18 != result)
      {
        v20 = 0;
        v21 = 0;
        v22 = 0;
        v23 = 0;
        v24 = (uint64_t *)v5[33];
        v25 = 0x6FB586FB586FB587 * (v19 >> 3);
        result += 72;
        v26 = 1;
        do
        {
          v23 += (*(_QWORD *)(result - 40) - *(_QWORD *)(result - 48)) >> 4;
          v27 = *v24;
          v24 += 2;
          v22 += *(_DWORD *)(v27 + 24);
          v21 += (*(_QWORD *)(result + 8) - *(_QWORD *)result) >> 3;
          if (*(_BYTE *)(result + 48))
            v28 = (*(_QWORD *)(result + 32) - *(_QWORD *)(result + 24)) >> 3;
          else
            v28 = 0;
          v20 += v28;
          v17 = v25 > v26++;
          result += 440;
        }
        while (v17);
        *(_DWORD *)(a2 + 4) = v23;
        *(_DWORD *)(a2 + 20) = v22;
        *(_DWORD *)(a2 + 36) = v21;
        *(_DWORD *)(a2 + 52) = v20;
      }
      if (v4 != 2)
      {
        *(_DWORD *)(a2 + 8) = 0;
        *(_DWORD *)(a2 + 24) = 0;
        *(_DWORD *)(a2 + 40) = 0;
        *(_DWORD *)(a2 + 56) = 0;
        result = v2[27];
        v29 = v2[28];
        v30 = v29 - result;
        if (v29 != result)
        {
          v31 = 0;
          v32 = 0;
          v33 = 0;
          v34 = 0;
          v35 = (uint64_t *)v5[63];
          v36 = 0x6FB586FB586FB587 * (v30 >> 3);
          result += 72;
          v37 = 1;
          do
          {
            v34 += (*(_QWORD *)(result - 40) - *(_QWORD *)(result - 48)) >> 4;
            v38 = *v35;
            v35 += 2;
            v33 += *(_DWORD *)(v38 + 24);
            v32 += (*(_QWORD *)(result + 8) - *(_QWORD *)result) >> 3;
            if (*(_BYTE *)(result + 48))
              v39 = (*(_QWORD *)(result + 32) - *(_QWORD *)(result + 24)) >> 3;
            else
              v39 = 0;
            v31 += v39;
            v17 = v36 > v37++;
            result += 440;
          }
          while (v17);
          *(_DWORD *)(a2 + 8) = v34;
          *(_DWORD *)(a2 + 24) = v33;
          *(_DWORD *)(a2 + 40) = v32;
          *(_DWORD *)(a2 + 56) = v31;
        }
        if (v4 != 3)
        {
          *(_DWORD *)(a2 + 12) = 0;
          *(_DWORD *)(a2 + 28) = 0;
          *(_DWORD *)(a2 + 44) = 0;
          *(_DWORD *)(a2 + 60) = 0;
          v41 = v2[40];
          v40 = v2[41];
          v42 = v40 - v41;
          if (v40 != v41)
          {
            v43 = 0;
            v44 = 0;
            v45 = 0;
            v46 = 0;
            v47 = (uint64_t *)v5[93];
            v48 = 0x6FB586FB586FB587 * (v42 >> 3);
            v49 = v41 + 72;
            v50 = 1;
            do
            {
              v46 += (*(_QWORD *)(v49 - 40) - *(_QWORD *)(v49 - 48)) >> 4;
              v51 = *v47;
              v47 += 2;
              v45 += *(_DWORD *)(v51 + 24);
              v44 += (*(_QWORD *)(v49 + 8) - *(_QWORD *)v49) >> 3;
              result = (*(_QWORD *)(v49 + 32) - *(_QWORD *)(v49 + 24)) >> 3;
              if (*(_BYTE *)(v49 + 48))
                v52 = (*(_QWORD *)(v49 + 32) - *(_QWORD *)(v49 + 24)) >> 3;
              else
                v52 = 0;
              v43 += v52;
              v17 = v48 > v50++;
              v49 += 440;
            }
            while (v17);
            *(_DWORD *)(a2 + 12) = v46;
            *(_DWORD *)(a2 + 28) = v45;
            *(_DWORD *)(a2 + 44) = v44;
            *(_DWORD *)(a2 + 60) = v43;
          }
        }
      }
    }
  }
  return result;
}

void sub_20FCBFF1C()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20FCBFF30(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24CA05040;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_20FCBFF70(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24CA05040;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20FCBFF98(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>, float64x2_t a4@<Q0>, int32x4_t a5@<Q3>, int32x4_t a6@<Q4>, float64x2_t a7@<Q5>, float64x2_t a8@<Q6>)
{
  uint64_t v10;
  float64x2_t v11;
  uint64_t v12;
  unsigned int v13;
  float64x2_t v14;
  double v15;
  float64x2_t v16;
  int v17;
  double v18;
  double v26;
  double v27;
  int v28;
  double v29;
  double v30;
  double v31;
  float64x2_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  double v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  float v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  double v44;
  float64x2_t *v45;
  float64x2_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  float64x2_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v10 = *a2;
  v11 = *(float64x2_t *)(**(_QWORD **)(a1 + 24) + 16 * v10);
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(_DWORD *)(v12 + 992);
  v42 = v11;
  if (v13 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_2102BAE5D, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v13 = *(_DWORD *)(v12 + 992);
    v11 = v42;
    if (v13 <= 7)
    {
LABEL_3:
      if (v13 <= 1)
      {
        if (!v13)
        {
          sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)&unk_2102BAE5D, 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
          abort();
        }
        goto LABEL_11;
      }
LABEL_9:
      v14 = *(float64x2_t *)(v12 + 72);
LABEL_12:
      a4 = vmulq_f64(v11, v14);
      *(double *)a5.i64 = *(double *)(v12 + 88) + vaddvq_f64(a4);
      v15 = *(double *)(v12 + 112);
      a4.f64[0] = vmuld_lane_f64(*(double *)(v12 + 104), v11, 1) + v15;
      *(_QWORD *)&v50.f64[0] = a5.i64[0];
      v50.f64[1] = a4.f64[0];
      goto LABEL_13;
    }
  }
  else if (v13 <= 7)
  {
    goto LABEL_3;
  }
  if (v13 <= 0xB)
    goto LABEL_9;
  if (v13 <= 0xD)
  {
LABEL_11:
    v14 = *(float64x2_t *)(v12 + 72);
    v11 = v42;
    goto LABEL_12;
  }
  a5 = (int32x4_t)v42;
  a4.f64[0] = *(double *)(v12 + 88) + *(double *)(v12 + 72) * v42.f64[0] + vmuld_lane_f64(*(double *)(v12 + 80), v42, 1);
  v11.f64[0] = *(float64_t *)(v12 + 112);
  v15 = vmuld_lane_f64(*(double *)(v12 + 104), v42, 1) + v11.f64[0];
  v50.f64[0] = a4.f64[0];
  v50.f64[1] = v15;
  if (v13 == 14)
  {
LABEL_13:
    v45 = &v43;
    v46 = &v50;
    v48 = 0;
    v49 = 0;
    v47 = 0;
    if (v13 <= 7)
      goto LABEL_14;
    goto LABEL_25;
  }
  v45 = &v43;
  v46 = &v50;
  v48 = 0;
  v49 = 0;
  v47 = 0;
  if (v13 != -1)
    goto LABEL_43;
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_2102BAE5D, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v13 = *(_DWORD *)(v12 + 992);
  if (v13 > 7)
  {
LABEL_25:
    if (v13 <= 0xB)
    {
      if (v13 > 9)
      {
        if (v13 == 10)
          v17 = sub_20EB24F38((uint64_t)&v43, (uint64_t)&v50, v12 + 168, (double *)(v12 + 280), 0x14u, (*(double *)v12 + *(double *)(v12 + 32)) * 0.5);
        else
          v17 = sub_20EB38E20(v12, (uint64_t)&v43, &v50, 0, 0, 0);
      }
      else if (v13 == 9)
      {
        v17 = sub_20EB35004(v12, (uint64_t)&v43, &v50, 0, 0, 0, a4.f64[0], v15, v11.f64[0], a5, a6);
      }
      else
      {
        v27 = sqrt(v50.f64[0] * v50.f64[0] + v50.f64[1] * v50.f64[1]);
        v17 = sub_20EB24018((uint64_t)&v43, v50.f64, (double *)(v12 + 168), 20, v27, v27, v11.f64[0], a5, a6);
      }
      goto LABEL_50;
    }
    if (v13 <= 0xD)
    {
      if (v13 != 13)
      {
        v28 = 0;
        v43 = 0uLL;
        v44 = 0.0;
        goto LABEL_51;
      }
      v18 = (*(double *)v12 + *(double *)(v12 + 32)) * 0.5;
      _V0.D[1] = v50.f64[1];
      _D3 = v50.f64[1];
      __asm { FMLA            D2, D3, V0.D[1] }
      v26 = v18 * (v18 * _D2);
      v16 = vdivq_f64(v50, (float64x2_t)vdupq_lane_s64(COERCE__INT64(v26* (*(double *)(v12 + 280)+ v18 * *(double *)(v12 + 336)+ v26* (*(double *)(v12 + 288)+ v18 * *(double *)(v12 + 344)+ v26* (*(double *)(v12 + 296)+ v18 * *(double *)(v12 + 352)+ v26* (*(double *)(v12 + 304)+ v18 * *(double *)(v12 + 360)+ v26* (*(double *)(v12 + 312)+ v18 * *(double *)(v12 + 368)+ v26
                                  * (*(double *)(v12 + 320)
                                   + v18 * *(double *)(v12 + 376)
                                   + v26 * (*(double *)(v12 + 328) + v18 * *(double *)(v12 + 384) + v26 * 0.0)))))))
                             / 100.0
                             + 1.0),
                             0));
      goto LABEL_34;
    }
    if (v13 == 14)
    {
      v17 = sub_20EB253A0((uint64_t)&v43, (uint64_t)&v50, (double *)(v12 + 168), (double *)(v12 + 392), 0x14u, (*(double *)v12 + *(double *)(v12 + 32)) * 0.5);
      goto LABEL_50;
    }
LABEL_43:
    v17 = sub_20EB3CED8(v12, (uint64_t)&v43, &v50, 0, 0, 0);
    goto LABEL_50;
  }
LABEL_14:
  if (v13 > 3)
  {
    if (v13 > 5)
    {
      if (v13 == 6)
        v17 = sub_20EB41C58((double *)v12, (uint64_t)&v43, v50.f64, 0, 0, 0);
      else
        v17 = sub_20EB306CC(v12, (uint64_t)&v43, &v50, 0, 0, 0, a4.f64[0], v15, (int8x16_t)v11, (int8x16_t)a5, *(double *)a6.i64, a7.f64[0], a8);
    }
    else if (v13 == 5)
    {
      v17 = sub_20EB2886C((uint64_t)&v43, v50.f64, v12 + 168, 5);
    }
    else
    {
      if (!*(_BYTE *)(v12 + 468))
      {
        *(_QWORD *)&a4.f64[0] = sub_20EB27C0C(v12 + 204, (double *)(v12 + 168), 0x32uLL, (int8x16_t)a4, v15, (int8x16_t)v11, (int8x16_t)a5).u64[0];
        *(_BYTE *)(v12 + 468) = 1;
      }
      v17 = sub_20EA8D684((uint64_t)&v43, (uint64_t)&v50, (int64x2_t *)(v12 + 168), (float *)(v12 + 204), 0, 5, a4.f64[0], v15, v11.f64[0], *(double *)a5.i64, *(double *)a6.i64, a7.f64[0], a8);
    }
  }
  else
  {
    if (v13 <= 1)
    {
      if (!v13)
      {
        sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)&unk_2102BAE5D, 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
        abort();
      }
      v16 = v50;
LABEL_34:
      v43 = v16;
      v44 = 1.0;
      v28 = 1;
      goto LABEL_51;
    }
    if (v13 == 2)
      v17 = sub_20EA8D22C((uint64_t)&v45, v12);
    else
      v17 = sub_20EB23DF0((uint64_t)&v43, v50.f64, (int64x2_t *)(v12 + 168), 20, a4.f64[0], v15, v11.f64[0], *(double *)a5.i64, (int64x2_t)a6, a7);
  }
LABEL_50:
  v28 = v17;
LABEL_51:
  v29 = v44;
  v30 = 1.0;
  v31 = 1.0 / v44;
  if (v44 == 0.0)
    v31 = 1.0;
  v32 = vmulq_n_f64(v43, v31);
  v43 = v32;
  v44 = 1.0;
  v33 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
  if (v28 && v29 > 0.00000001)
  {
    *(float64x2_t *)(v33 + 16 * v10) = v32;
    if (*(_BYTE *)(a1 + 32))
    {
      v34 = *(_QWORD *)(a1 + 16);
      v41 = v32;
      v35 = sqrt(vaddvq_f64(vmulq_f64(v32, v32)));
      v36 = 0.0;
      if (v35 > 0.0)
      {
        v36 = (1.0 - v35)
            / (v35 + 1.0)
            * ((1.0 - v35) / (v35 + 1.0) * ((1.0 - v35) / (v35 + 1.0) * 0.191950753) + -0.972395424)
            + 0.785398163;
        if (v36 < 0.0
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.hpp", 621, (uint64_t)"theta >= 0", 10, (uint64_t)&unk_2102BAE5D, 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
      }
      v37 = *(_DWORD *)(v34 + 992);
      if (v37 == -1)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_2102BAE5D, 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v37 = *(_DWORD *)(v34 + 992);
      }
      if (!v37)
      {
        sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)&unk_2102BAE5D, 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
        abort();
      }
      if (!*(_BYTE *)(v34 + 160))
        sub_20EB82370(v34, 2);
      v38 = (int)(v36 * 11.4591559) & ~((int)(v36 * 11.4591559) >> 31);
      if (v38 >= 0x10)
        v38 = 16;
      v30 = *(double *)(v34 + 24 * v38 + 1024)
          + (v36 - *(double *)(v34 + 24 * v38 + 1016)) * *(double *)(v34 + 24 * v38 + 1032);
      v32 = v41;
    }
  }
  else
  {
    *(int64x2_t *)(v33 + 16 * v10) = vdupq_n_s64(0x7FF8000000000000uLL);
  }
  v39 = *(_QWORD *)(a1 + 24);
  *(double *)(*(_QWORD *)(v39 + 184) + 8 * v10) = v30;
  v40 = *(double *)(*(_QWORD *)(v39 + 160) + 8 * v10);
  *(_DWORD *)a3 = 0;
  *(_DWORD *)(a3 + 4) = v10;
  *(float32x2_t *)(a3 + 8) = vcvt_f32_f64(v42);
  *(float64x2_t *)(a3 + 16) = v32;
  *(float *)(a3 + 32) = v40;
  if ((v28 & 1) == 0)
  {
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_DWORD *)(a3 + 32) = 1148846080;
  }
}

uint64_t sub_20FCC0734(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio33ConvertPointFeaturesToMapFeaturesEPKNS0_8geometry13LensModelCRTPINS1_14VariantVIOLensE"
                     "EES6_bRNS0_8cv_types25FeatureSampleObservationsINS0_4math7Point2DIdEEEERNS0_4util15FixedSizeVectorI"
                     "NS0_13VIOPoint2DNSPEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio33ConvertPointFeaturesToMapFeaturesEPKNS0_8geometry13LensModelCRTPINS1_14Vari"
                                "antVIOLensEEES6_bRNS0_8cv_types25FeatureSampleObservationsINS0_4math7Point2DIdEEEERNS0_4"
                                "util15FixedSizeVectorINS0_13VIOPoint2DNSPEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio33ConvertPointFeaturesToMapFeaturesEPKNS0_8geometry13LensModelCRTPINS1_14VariantVIOLensEEES6_bRNS0_8cv_types25FeatureSampleObservationsINS0_4math7Point2DIdEEEERNS0_4util15FixedSizeVectorINS0_13VIOPoint2DNSPEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio33ConvertPointFeaturesToMapFeaturesEPKNS0_8geometry13LensModelCRTPINS1_14VariantVIOLensEEES6_bRNS0_8cv_types25FeatureSampleObservationsINS0_4math7Point2DIdEEEERNS0_4util15FixedSizeVectorINS0_13VIOPoint2DNSPEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20FCC07A0()
{
  return &unk_24CA050B0;
}

_QWORD *sub_20FCC07AC(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[2];
  __int128 v31;
  int v32;
  int v33;
  uint64_t v34;
  _QWORD v35[3];
  _QWORD *v36;
  uint64_t v37;
  _QWORD v38[3];
  _QWORD *v39;
  uint64_t v40;
  _BYTE v41[24];
  _BYTE *v42;
  uint64_t v43;
  _BYTE v44[24];
  _BYTE *v45;
  uint64_t v46;
  _BYTE v47[24];
  _BYTE *v48;
  uint64_t v49;
  _BYTE v50[24];
  _BYTE *v51;
  uint64_t v52;
  _BYTE v53[24];
  _BYTE *v54;
  uint64_t v55;
  _BYTE v56[24];
  _BYTE *v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a1 + 8);
  v37 = *a2;
  v6 = v38;
  v7 = a2[4];
  if (!v7)
    goto LABEL_4;
  if ((uint64_t *)v7 != a2 + 1)
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
LABEL_4:
    v39 = (_QWORD *)v7;
    goto LABEL_6;
  }
  v39 = v38;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v7 + 24))(v7, v38);
LABEL_6:
  v34 = *a3;
  v8 = v35;
  v9 = a3[4];
  if (!v9)
  {
LABEL_9:
    v36 = (_QWORD *)v9;
    goto LABEL_11;
  }
  if ((uint64_t *)v9 != a3 + 1)
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    goto LABEL_9;
  }
  v36 = v35;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v9 + 24))(v9, v35);
LABEL_11:
  v10 = (uint64_t)v39;
  v49 = v37;
  v11 = v50;
  if (!v39)
  {
LABEL_14:
    v51 = (_BYTE *)v10;
    goto LABEL_16;
  }
  if (v39 != v38)
  {
    v10 = (*(uint64_t (**)(_QWORD *))(*v39 + 16))(v39);
    goto LABEL_14;
  }
  v51 = v50;
  (*(void (**)(_QWORD *, _BYTE *))(v38[0] + 24))(v38, v50);
LABEL_16:
  v12 = (uint64_t)v36;
  v46 = v34;
  v13 = v47;
  if (!v36)
  {
LABEL_19:
    v48 = (_BYTE *)v12;
    goto LABEL_21;
  }
  if (v36 != v35)
  {
    v12 = (*(uint64_t (**)(void))(*v36 + 16))();
    goto LABEL_19;
  }
  v48 = v47;
  (*(void (**)(_QWORD *, _BYTE *))(v35[0] + 24))(v35, v47);
LABEL_21:
  sub_20FCC1A64(&v52, &v49, &v46);
  if (v48 == v47)
  {
    v14 = 4;
  }
  else
  {
    if (!v48)
      goto LABEL_26;
    v14 = 5;
    v13 = v48;
  }
  (*(void (**)(_QWORD *))(*v13 + 8 * v14))(v13);
LABEL_26:
  if (v51 == v50)
  {
    v15 = 4;
  }
  else
  {
    if (!v51)
      goto LABEL_31;
    v15 = 5;
    v11 = v51;
  }
  (*(void (**)(_QWORD *))(*v11 + 8 * v15))(v11);
LABEL_31:
  v16 = (uint64_t)v54;
  v43 = v52;
  v17 = v44;
  if (!v54)
  {
LABEL_34:
    v45 = (_BYTE *)v16;
    goto LABEL_36;
  }
  if (v54 != v53)
  {
    v16 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v54 + 16))(v54);
    goto LABEL_34;
  }
  v45 = v44;
  (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)v54 + 24))(v54, v44);
LABEL_36:
  v18 = (uint64_t)v57;
  v40 = v55;
  v19 = v41;
  if (!v57)
  {
LABEL_39:
    v42 = (_BYTE *)v18;
    goto LABEL_41;
  }
  if (v57 != v56)
  {
    v18 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v57 + 16))(v57);
    goto LABEL_39;
  }
  v42 = v41;
  (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)v57 + 24))(v57, v41);
LABEL_41:
  LODWORD(v20) = v43;
  if (v43 != v40)
  {
    v21 = v5;
    do
    {
      v33 = v20;
      if (!v45)
        sub_20E86D37C();
      (*(void (**)(_QWORD *__return_ptr, _BYTE *, int *))(*(_QWORD *)v45 + 48))(v30, v45, &v33);
      *(_QWORD *)v21 = v30[0];
      *(_QWORD *)(v21 + 8) = v30[1];
      *(_OWORD *)(v21 + 16) = v31;
      *(_DWORD *)(v21 + 32) = v32;
      v20 = v43 + 1;
      v43 = v20;
      v21 += 40;
    }
    while (v20 != v40);
    v5 = v21;
  }
  if (v42 == v41)
  {
    v22 = 4;
  }
  else
  {
    if (!v42)
      goto LABEL_51;
    v22 = 5;
    v19 = v42;
  }
  (*(void (**)(_QWORD *))(*v19 + 8 * v22))(v19);
LABEL_51:
  if (v45 == v44)
  {
    v23 = 4;
  }
  else
  {
    if (!v45)
      goto LABEL_56;
    v23 = 5;
    v17 = v45;
  }
  (*(void (**)(_QWORD *))(*v17 + 8 * v23))(v17);
LABEL_56:
  v24 = v57;
  if (v57 == v56)
  {
    v25 = 4;
    v24 = v56;
  }
  else
  {
    if (!v57)
      goto LABEL_61;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_61:
  result = v54;
  if (v54 == v53)
  {
    v27 = 4;
    result = v53;
  }
  else
  {
    if (!v54)
      goto LABEL_66;
    v27 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v27))();
LABEL_66:
  if (v36 == v35)
  {
    v28 = 4;
  }
  else
  {
    if (!v36)
      goto LABEL_71;
    v28 = 5;
    v8 = v36;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v8 + 8 * v28))(v8);
LABEL_71:
  if (v39 == v38)
  {
    v29 = 4;
    goto LABEL_75;
  }
  if (v39)
  {
    v29 = 5;
    v6 = v39;
LABEL_75:
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v6 + 8 * v29))(v6);
  }
  *(_QWORD *)(a1 + 8) = v5;
  return result;
}

void sub_20FCC0C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, _QWORD *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,_QWORD *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,_QWORD *a35)
{
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  if (a35 == v38)
  {
    v42 = 4;
  }
  else
  {
    if (!a35)
      goto LABEL_6;
    v42 = 5;
    v38 = a35;
  }
  (*(void (**)(_QWORD *))(*v38 + 8 * v42))(v38);
LABEL_6:
  sub_20F27A82C((_QWORD *)(v40 - 168));
  if (a20 == v37)
  {
    v43 = 4;
  }
  else
  {
    if (!a20)
      goto LABEL_11;
    v43 = 5;
    v37 = a20;
  }
  (*(void (**)(_QWORD *))(*v37 + 8 * v43))(v37);
LABEL_11:
  if (a25 == v36)
  {
    v44 = 4;
  }
  else
  {
    if (!a25)
      goto LABEL_16;
    v44 = 5;
    v36 = a25;
  }
  (*(void (**)(_QWORD *))(*v36 + 8 * v44))(v36);
LABEL_16:
  *(_QWORD *)(v35 + 8) = v39;
  _Unwind_Resume(a1);
}

_QWORD *sub_20FCC0D88(_QWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  __int128 v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  _QWORD *v28;
  uint64_t *v29;
  _QWORD *v30;
  uint64_t *v31;
  _QWORD *v32;
  uint64_t *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *result;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD v73[3];
  _QWORD *v74;
  uint64_t v75;
  _QWORD v76[3];
  _QWORD *v77;
  uint64_t v78;
  _QWORD v79[3];
  _QWORD *v80;
  uint64_t v81;
  _QWORD v82[3];
  _QWORD *v83;
  uint64_t v84;
  _QWORD v85[3];
  _QWORD *v86;
  uint64_t v87;
  _QWORD v88[3];
  _QWORD *v89;
  uint64_t v90;
  _QWORD v91[3];
  _QWORD *v92;
  uint64_t v93;
  _BYTE v94[24];
  _BYTE *v95;
  uint64_t v96;
  _QWORD v97[3];
  _QWORD *v98;
  uint64_t v99;
  _QWORD v100[3];
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  _BYTE v104[24];
  _BYTE *v105;
  uint64_t v106;
  _BYTE v107[24];
  _BYTE *v108;
  uint64_t v109;
  _BYTE v110[24];
  _BYTE *v111;
  uint64_t v112;
  _BYTE v113[24];
  _BYTE *v114;
  uint64_t v115;
  _QWORD v116[3];
  _QWORD *v117;
  uint64_t v118;
  _QWORD v119[3];
  _QWORD *v120;
  uint64_t v121;
  _QWORD v122[3];
  _QWORD *v123;
  uint64_t v124;
  _QWORD v125[3];
  _QWORD *v126;
  uint64_t v127;
  _QWORD v128[3];
  _QWORD *v129;
  _OWORD v130[2];
  _OWORD *v131;
  uint64_t v132;

  v132 = *MEMORY[0x24BDAC8D0];
  v75 = *a2;
  v7 = (uint64_t *)a2[4];
  if (v7)
  {
    if (v7 == a2 + 1)
    {
      v77 = v76;
      (*(void (**)(uint64_t *, _QWORD *))(*v7 + 24))(v7, v76);
    }
    else
    {
      v77 = (_QWORD *)a2[4];
      a2[4] = 0;
    }
  }
  else
  {
    v77 = 0;
  }
  v72 = *a3;
  v8 = (uint64_t *)a3[4];
  if (v8)
  {
    if (v8 == a3 + 1)
    {
      v74 = v73;
      (*(void (**)(uint64_t *, _QWORD *))(*v8 + 24))(v8, v73);
    }
    else
    {
      v74 = (_QWORD *)a3[4];
      a3[4] = 0;
    }
  }
  else
  {
    v74 = 0;
  }
  v81 = v75;
  v9 = &v81;
  if (!v77)
    goto LABEL_14;
  if (v77 != v76)
  {
    v9 = &v75;
    v83 = v77;
LABEL_14:
    v9[4] = 0;
    goto LABEL_16;
  }
  v83 = v82;
  (*(void (**)(_QWORD *, _QWORD *))(v76[0] + 24))(v76, v82);
LABEL_16:
  v78 = v72;
  v10 = &v78;
  if (!v74)
  {
LABEL_19:
    v10[4] = 0;
    goto LABEL_21;
  }
  if (v74 != v73)
  {
    v10 = &v72;
    v80 = v74;
    goto LABEL_19;
  }
  v80 = v79;
  (*(void (**)(_QWORD *, _QWORD *))(v73[0] + 24))(v73, v79);
LABEL_21:
  v11 = (uint64_t)v83;
  v106 = v81;
  v12 = v107;
  if (!v83)
  {
LABEL_24:
    v108 = (_BYTE *)v11;
    goto LABEL_26;
  }
  if (v83 != v82)
  {
    v11 = (*(uint64_t (**)(void))(*v83 + 16))();
    goto LABEL_24;
  }
  v108 = v107;
  (*(void (**)(_QWORD *, _BYTE *))(v82[0] + 24))(v82, v107);
LABEL_26:
  v103 = v78;
  v13 = &v103;
  v14 = v104;
  if (!v80)
  {
LABEL_29:
    v13[4] = 0;
    goto LABEL_31;
  }
  if (v80 != v79)
  {
    v13 = &v78;
    v105 = v80;
    goto LABEL_29;
  }
  v105 = v104;
  (*(void (**)(_QWORD *, _BYTE *))(v79[0] + 24))(v79, v104);
LABEL_31:
  sub_20FCC1A64(&v109, &v106, &v103);
  if (v105 == v104)
  {
    v15 = 4;
  }
  else
  {
    if (!v105)
      goto LABEL_36;
    v15 = 5;
    v14 = v105;
  }
  (*(void (**)(_QWORD *))(*v14 + 8 * v15))(v14);
LABEL_36:
  if (v108 == v107)
  {
    v16 = 4;
  }
  else
  {
    if (!v108)
      goto LABEL_41;
    v16 = 5;
    v12 = v108;
  }
  (*(void (**)(_QWORD *))(*v12 + 8 * v16))(v12);
LABEL_41:
  v96 = v109;
  v17 = &v96;
  v18 = v97;
  if (!v111)
  {
LABEL_44:
    v17[4] = 0;
    goto LABEL_46;
  }
  v17 = &v109;
  if (v111 != v110)
  {
    v98 = v111;
    goto LABEL_44;
  }
  v98 = v97;
  (*(void (**)(void))(*(_QWORD *)v111 + 24))();
LABEL_46:
  v19 = v112;
  v93 = v112;
  v20 = v94;
  if (v114)
  {
    if (v114 == v113)
    {
      v95 = v94;
      (*(void (**)(void))(*(_QWORD *)v114 + 24))();
      v19 = v93;
      v21 = v96;
      if (v96 == v93)
        goto LABEL_56;
    }
    else
    {
      v95 = v114;
      v114 = 0;
      v21 = v96;
      if (v96 == v112)
        goto LABEL_56;
    }
  }
  else
  {
    v95 = 0;
    v21 = v96;
    if (v96 == v112)
      goto LABEL_56;
  }
  LODWORD(v19) = v21;
  do
  {
    LODWORD(v127) = v19;
    if (!v98)
      sub_20E86D37C();
    (*(void (**)(_OWORD *__return_ptr, _QWORD *, uint64_t *))(*v98 + 48))(v130, v98, &v127);
    v22 = v130[1];
    *(_OWORD *)a4 = v130[0];
    *(_OWORD *)(a4 + 16) = v22;
    *(_DWORD *)(a4 + 32) = (_DWORD)v131;
    v19 = v96 + 1;
    v96 = v19;
    a4 += 40;
  }
  while (v19 != v93);
LABEL_56:
  v99 = v19;
  v23 = &v99;
  if (!v98)
  {
LABEL_59:
    v23[4] = 0;
    goto LABEL_61;
  }
  if (v98 != v97)
  {
    v23 = &v96;
    v101 = v98;
    goto LABEL_59;
  }
  v101 = v100;
  (*(void (**)(_QWORD *, _QWORD *))(v97[0] + 24))(v97, v100);
LABEL_61:
  v102 = a4;
  if (v95 == v94)
  {
    v24 = 4;
  }
  else
  {
    if (!v95)
      goto LABEL_66;
    v24 = 5;
    v20 = v95;
  }
  (*(void (**)(_QWORD *))(*v20 + 8 * v24))(v20);
LABEL_66:
  if (v98 == v97)
  {
    v25 = 4;
  }
  else
  {
    if (!v98)
      goto LABEL_71;
    v25 = 5;
    v18 = v98;
  }
  (*(void (**)(_QWORD *))(*v18 + 8 * v25))(v18);
LABEL_71:
  v87 = v81;
  v26 = &v87;
  if (!v83)
  {
LABEL_74:
    v26[4] = 0;
    goto LABEL_76;
  }
  if (v83 != v82)
  {
    v26 = &v81;
    v89 = v83;
    goto LABEL_74;
  }
  v89 = v88;
  (*(void (**)(_QWORD *, _QWORD *))(v82[0] + 24))(v82, v88);
LABEL_76:
  v84 = v99;
  v27 = &v84;
  v28 = v85;
  v71 = a1;
  if (!v101)
  {
LABEL_79:
    v27[4] = 0;
    goto LABEL_81;
  }
  if (v101 != v100)
  {
    v27 = &v99;
    v86 = v101;
    goto LABEL_79;
  }
  v86 = v85;
  (*(void (**)(void))(v100[0] + 24))();
LABEL_81:
  v118 = v87;
  v29 = &v118;
  v30 = v119;
  if (!v89)
  {
LABEL_84:
    v29[4] = 0;
    goto LABEL_86;
  }
  if (v89 != v88)
  {
    v29 = &v87;
    v120 = v89;
    goto LABEL_84;
  }
  v120 = v119;
  (*(void (**)(_QWORD *, _QWORD *))(v88[0] + 24))(v88, v119);
LABEL_86:
  v115 = v84;
  v31 = &v115;
  v32 = v116;
  if (!v86)
  {
LABEL_89:
    v31[4] = 0;
    goto LABEL_91;
  }
  if (v86 != v85)
  {
    v31 = &v84;
    v117 = v86;
    goto LABEL_89;
  }
  v117 = v116;
  (*(void (**)(_QWORD *, _QWORD *))(v85[0] + 24))(v85, v116);
LABEL_91:
  v124 = v118;
  v33 = &v124;
  v34 = v125;
  if (!v120)
  {
LABEL_94:
    v33[4] = 0;
    goto LABEL_96;
  }
  if (v120 != v119)
  {
    v33 = &v118;
    v126 = v120;
    goto LABEL_94;
  }
  v126 = v125;
  (*(void (**)(_QWORD *, _QWORD *))(v119[0] + 24))(v119, v125);
LABEL_96:
  v121 = v115;
  v35 = v122;
  if (!v117)
  {
    v36 = &v123;
    goto LABEL_100;
  }
  if (v117 != v116)
  {
    v36 = &v117;
    v123 = v117;
LABEL_100:
    *v36 = 0;
    goto LABEL_102;
  }
  v123 = v122;
  (*(void (**)(_QWORD *, _QWORD *))(v116[0] + 24))(v116, v122);
LABEL_102:
  *(_QWORD *)&v130[0] = v124;
  v37 = (uint64_t *)v130;
  v38 = (_QWORD *)v130 + 1;
  if (!v126)
  {
LABEL_105:
    v37[4] = 0;
    goto LABEL_107;
  }
  if (v126 != v125)
  {
    v37 = &v124;
    v131 = v126;
    goto LABEL_105;
  }
  v131 = (_OWORD *)((char *)v130 + 8);
  (*(void (**)(_QWORD *, char *))(v125[0] + 24))(v125, (char *)v130 + 8);
LABEL_107:
  v39 = v121;
  v127 = v121;
  v40 = &v127;
  v41 = v128;
  if (!v123)
    goto LABEL_110;
  if (v123 != v122)
  {
    v40 = &v121;
    v129 = v123;
LABEL_110:
    v40[4] = 0;
    v90 = v39;
    v42 = v91;
    v43 = v129;
    if (v129)
      goto LABEL_111;
LABEL_114:
    v92 = 0;
    goto LABEL_116;
  }
  v129 = v128;
  (*(void (**)(_QWORD *, _QWORD *))(v122[0] + 24))(v122, v128);
  v90 = v127;
  v42 = v91;
  v43 = v129;
  if (!v129)
    goto LABEL_114;
LABEL_111:
  if (v43 == v128)
  {
    v92 = v91;
    (*(void (**)(_QWORD *, _QWORD *))(v128[0] + 24))(v128, v91);
  }
  else
  {
    v92 = v43;
    v129 = 0;
  }
LABEL_116:
  if (v129 == v128)
  {
    v44 = 4;
  }
  else
  {
    if (!v129)
      goto LABEL_121;
    v44 = 5;
    v41 = v129;
  }
  (*(void (**)(_QWORD *))(*v41 + 8 * v44))(v41);
LABEL_121:
  if (v131 == (_OWORD *)((char *)v130 + 8))
  {
    v45 = 4;
  }
  else
  {
    if (!v131)
      goto LABEL_126;
    v45 = 5;
    v38 = v131;
  }
  (*(void (**)(_QWORD *))(*v38 + 8 * v45))(v38);
LABEL_126:
  if (v123 == v122)
  {
    v48 = 4;
    v46 = v76;
    v47 = v73;
  }
  else
  {
    v46 = v76;
    v47 = v73;
    if (!v123)
      goto LABEL_131;
    v48 = 5;
    v35 = v123;
  }
  (*(void (**)(_QWORD *))(*v35 + 8 * v48))(v35);
LABEL_131:
  if (v126 == v125)
  {
    v49 = 4;
  }
  else
  {
    if (!v126)
      goto LABEL_136;
    v49 = 5;
    v34 = v126;
  }
  (*(void (**)(_QWORD *))(*v34 + 8 * v49))(v34);
LABEL_136:
  if (v117 == v116)
  {
    v50 = 4;
  }
  else
  {
    if (!v117)
      goto LABEL_141;
    v50 = 5;
    v32 = v117;
  }
  (*(void (**)(_QWORD *))(*v32 + 8 * v50))(v32);
LABEL_141:
  if (v120 == v119)
  {
    v53 = 4;
    v52 = v79;
    v51 = v82;
  }
  else
  {
    v52 = v79;
    v51 = v82;
    if (!v120)
      goto LABEL_146;
    v53 = 5;
    v30 = v120;
  }
  (*(void (**)(_QWORD *))(*v30 + 8 * v53))(v30);
LABEL_146:
  v54 = v102;
  v55 = v92;
  *v71 = v90;
  v56 = v71 + 1;
  if (v55)
  {
    if (v55 == v91)
    {
      v71[4] = v56;
      (*(void (**)(_QWORD *))(v91[0] + 24))(v91);
    }
    else
    {
      v71[4] = v55;
      v92 = 0;
    }
  }
  else
  {
    v71[4] = 0;
  }
  v71[5] = v54;
  if (v92 == v91)
  {
    v57 = 4;
  }
  else
  {
    if (!v92)
      goto LABEL_156;
    v57 = 5;
    v42 = v92;
  }
  (*(void (**)(_QWORD *, _QWORD *))(*v42 + 8 * v57))(v42, v56);
LABEL_156:
  if (v86 == v85)
  {
    v59 = 4;
    v58 = v88;
  }
  else
  {
    v58 = v88;
    if (!v86)
      goto LABEL_161;
    v59 = 5;
    v28 = v86;
  }
  (*(void (**)(_QWORD *, _QWORD *))(*v28 + 8 * v59))(v28, v56);
LABEL_161:
  if (v89 == v88)
  {
    v61 = 4;
    v60 = v100;
  }
  else
  {
    v60 = v100;
    if (!v89)
      goto LABEL_166;
    v61 = 5;
    v58 = v89;
  }
  (*(void (**)(_QWORD *, _QWORD *))(*v58 + 8 * v61))(v58, v56);
LABEL_166:
  if (v101 == v100)
  {
    v62 = 4;
  }
  else
  {
    if (!v101)
      goto LABEL_171;
    v62 = 5;
    v60 = v101;
  }
  (*(void (**)(_QWORD *, _QWORD *))(*v60 + 8 * v62))(v60, v56);
LABEL_171:
  v63 = v114;
  if (v114 == v113)
  {
    v64 = 4;
    v63 = v113;
  }
  else
  {
    if (!v114)
      goto LABEL_176;
    v64 = 5;
  }
  (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_176:
  result = v111;
  if (v111 == v110)
  {
    v66 = 4;
    result = v110;
  }
  else
  {
    if (!v111)
      goto LABEL_181;
    v66 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v66))();
LABEL_181:
  if (v80 == v79)
  {
    v67 = 4;
  }
  else
  {
    if (!v80)
      goto LABEL_186;
    v67 = 5;
    v52 = v80;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *))(*v52 + 8 * v67))(v52, v56);
LABEL_186:
  if (v83 == v82)
  {
    v68 = 4;
  }
  else
  {
    if (!v83)
      goto LABEL_191;
    v68 = 5;
    v51 = v83;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *))(*v51 + 8 * v68))(v51, v56);
LABEL_191:
  if (v74 == v73)
  {
    v69 = 4;
  }
  else
  {
    if (!v74)
      goto LABEL_196;
    v69 = 5;
    v47 = v74;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *))(*v47 + 8 * v69))(v47, v56);
LABEL_196:
  if (v77 == v76)
  {
    v70 = 4;
  }
  else
  {
    if (!v77)
      return result;
    v70 = 5;
    v46 = v77;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *))(*v46 + 8 * v70))(v46, v56);
}

void sub_20FCC185C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FCC1A64(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  _QWORD *v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[3];
  _QWORD *v36;
  uint64_t v37;
  _QWORD v38[3];
  _QWORD *v39;
  uint64_t v40;
  _QWORD v41[3];
  _QWORD *v42;
  uint64_t v43;
  _QWORD v44[3];
  _QWORD *v45;
  uint64_t v46;
  _QWORD v47[3];
  _QWORD *v48;
  uint64_t v49;
  _QWORD v50[3];
  _QWORD *v51;
  uint64_t v52;
  _QWORD v53[3];
  _QWORD *v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v37 = *a2;
  v5 = v38;
  v6 = (uint64_t *)a2[4];
  if (v6)
  {
    if (v6 == a2 + 1)
    {
      v39 = v38;
      (*(void (**)(uint64_t *, _QWORD *))(*v6 + 24))(v6, v38);
    }
    else
    {
      v39 = (_QWORD *)a2[4];
      a2[4] = 0;
    }
  }
  else
  {
    v39 = 0;
  }
  v34 = *a3;
  v7 = v35;
  v8 = (uint64_t *)a3[4];
  if (v8)
  {
    if (v8 == a3 + 1)
    {
      v36 = v35;
      (*(void (**)(uint64_t *, _QWORD *))(*v8 + 24))(v8, v35);
    }
    else
    {
      v36 = (_QWORD *)a3[4];
      a3[4] = 0;
    }
  }
  else
  {
    v36 = 0;
  }
  v9 = v37;
  v46 = v37;
  v10 = &v46;
  v11 = v47;
  if (!v39)
  {
LABEL_14:
    v10[4] = 0;
    v52 = v9;
    v12 = v53;
    v13 = v48;
    if (v48)
      goto LABEL_15;
LABEL_19:
    v54 = 0;
    v49 = v9;
    goto LABEL_20;
  }
  if (v39 != v38)
  {
    v10 = &v37;
    v48 = v39;
    goto LABEL_14;
  }
  v48 = v47;
  (*(void (**)(_QWORD *, _QWORD *))(v38[0] + 24))(v38, v47);
  v9 = v46;
  v52 = v46;
  v12 = v53;
  v13 = v48;
  if (!v48)
    goto LABEL_19;
LABEL_15:
  if (v13 == v47)
  {
    v54 = v53;
    (*(void (**)(_QWORD *, _QWORD *))(v47[0] + 24))(v47, v53);
    v14 = v54;
    v49 = v52;
    if (v54)
      goto LABEL_22;
LABEL_20:
    v51 = 0;
    goto LABEL_25;
  }
  v14 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v13 + 16))(v13);
  v54 = v14;
  v49 = v52;
  if (!v14)
    goto LABEL_20;
LABEL_22:
  if (v14 == v53)
  {
    v51 = v50;
    (*(void (**)(_QWORD *))(v53[0] + 24))(v53);
  }
  else
  {
    v51 = v14;
    v54 = 0;
  }
LABEL_25:
  if (v54 == v53)
  {
    v15 = 4;
  }
  else
  {
    if (!v54)
      goto LABEL_30;
    v15 = 5;
    v12 = v54;
  }
  (*(void (**)(_QWORD *))(*v12 + 8 * v15))(v12);
LABEL_30:
  v16 = v34;
  v40 = v34;
  v17 = &v40;
  v18 = v41;
  if (!v36)
    goto LABEL_33;
  if (v36 != v35)
  {
    v17 = &v34;
    v42 = v36;
LABEL_33:
    v17[4] = 0;
    v52 = v16;
    v19 = v53;
    v20 = v42;
    if (v42)
      goto LABEL_34;
LABEL_38:
    v54 = 0;
    v43 = v16;
    goto LABEL_39;
  }
  v42 = v41;
  (*(void (**)(_QWORD *, _QWORD *))(v35[0] + 24))(v35, v41);
  v16 = v40;
  v52 = v40;
  v19 = v53;
  v20 = v42;
  if (!v42)
    goto LABEL_38;
LABEL_34:
  if (v20 == v41)
  {
    v54 = v53;
    (*(void (**)(_QWORD *, _QWORD *))(v41[0] + 24))(v41, v53);
    v21 = v54;
    v43 = v52;
    if (v54)
      goto LABEL_41;
LABEL_39:
    v45 = 0;
    goto LABEL_44;
  }
  v21 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v20 + 16))(v20);
  v54 = v21;
  v43 = v52;
  if (!v21)
    goto LABEL_39;
LABEL_41:
  if (v21 == v53)
  {
    v45 = v44;
    (*(void (**)(_QWORD *))(v53[0] + 24))(v53);
  }
  else
  {
    v45 = v21;
    v54 = 0;
  }
LABEL_44:
  if (v54 == v53)
  {
    v22 = 4;
  }
  else
  {
    if (!v54)
      goto LABEL_49;
    v22 = 5;
    v19 = v54;
  }
  (*(void (**)(_QWORD *))(*v19 + 8 * v22))(v19);
LABEL_49:
  v23 = v51;
  *a1 = v49;
  v24 = a1 + 1;
  if (v23)
  {
    if (v23 == v50)
    {
      a1[4] = v24;
      (*(void (**)(void))(v50[0] + 24))();
    }
    else
    {
      a1[4] = v23;
      v51 = 0;
    }
  }
  else
  {
    a1[4] = 0;
  }
  v25 = v45;
  a1[5] = v43;
  if (v25)
  {
    if (v25 == v44)
    {
      a1[9] = a1 + 6;
      (*(void (**)(void))(v44[0] + 24))();
    }
    else
    {
      a1[9] = v25;
      v45 = 0;
    }
  }
  else
  {
    a1[9] = 0;
  }
  v26 = v45;
  if (v45 == v44)
  {
    v27 = 4;
    v26 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_64;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_64:
  if (v42 == v41)
  {
    v28 = 4;
  }
  else
  {
    if (!v42)
      goto LABEL_69;
    v28 = 5;
    v18 = v42;
  }
  (*(void (**)(_QWORD *, _QWORD *))(*v18 + 8 * v28))(v18, v24);
LABEL_69:
  result = v51;
  if (v51 == v50)
  {
    v30 = 4;
    result = v50;
  }
  else
  {
    if (!v51)
      goto LABEL_74;
    v30 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v30))();
LABEL_74:
  if (v48 == v47)
  {
    v31 = 4;
  }
  else
  {
    if (!v48)
      goto LABEL_79;
    v31 = 5;
    v11 = v48;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *))(*v11 + 8 * v31))(v11, v24);
LABEL_79:
  if (v36 == v35)
  {
    v32 = 4;
  }
  else
  {
    if (!v36)
      goto LABEL_84;
    v32 = 5;
    v7 = v36;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *))(*v7 + 8 * v32))(v7, v24);
LABEL_84:
  if (v39 == v38)
  {
    v33 = 4;
  }
  else
  {
    if (!v39)
      return result;
    v33 = 5;
    v5 = v39;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *))(*v5 + 8 * v33))(v5, v24);
}

void sub_20FCC1FA8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FCC1FF8(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 6)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 58)
      goto LABEL_22;
    v10 = v8 >> 5;
    if (v8 >> 5 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0;
    v12 = 0x3FFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 58)
LABEL_22:
      sub_20ED343A8();
    v13 = v12 << 6;
    result = operator new(v12 << 6);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    v14 = a3 - v6;
    if (v14)
      result = memmove(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 6;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = (void *)*result;
LABEL_20:
    result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  v18 = &__src[64 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v17 << 6);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

void sub_20FCC2144()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20FCC2158(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24CA050D0;
  result[1] = v3;
  return result;
}

uint64_t sub_20FCC218C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24CA050D0;
  a2[1] = v2;
  return result;
}

uint64_t sub_20FCC21A8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint32x2_t *v3;
  uint32x2_t *v4;
  int64x2_t *v5;
  int64x2_t v6;
  unint64_t v7;
  uint32x2_t *v8;
  unint64_t v9;
  uint32x2_t *v10;
  int64x2_t v11;
  uint64_t v12;
  uint32x2_t v13;
  uint32x2_t v14;

  v3 = *(uint32x2_t **)(a3 + 792);
  v4 = *(uint32x2_t **)(a3 + 800);
  if (v3 != v4)
  {
    v5 = *(int64x2_t **)(result + 8);
    v6 = *v5;
    v7 = (char *)v4 - (char *)v3 - 40;
    if (v7 >= 0x28)
    {
      v9 = v7 / 0x28 + 1;
      v8 = &v3[5 * (v9 & 0xFFFFFFFFFFFFFFELL)];
      v10 = v3 + 9;
      v11 = 0uLL;
      v12 = v9 & 0xFFFFFFFFFFFFFFELL;
      do
      {
        v13 = v10[-5];
        v14 = *v10;
        v10 += 10;
        v6 = (int64x2_t)vaddw_u32((uint64x2_t)v6, v13);
        v11 = (int64x2_t)vaddw_u32((uint64x2_t)v11, v14);
        v12 -= 2;
      }
      while (v12);
      v6 = vaddq_s64(v11, v6);
      if (v9 == (v9 & 0xFFFFFFFFFFFFFFELL))
        goto LABEL_8;
    }
    else
    {
      v8 = *(uint32x2_t **)(a3 + 792);
    }
    do
    {
      v6 = (int64x2_t)vaddw_u32((uint64x2_t)v6, v8[4]);
      v8 += 5;
    }
    while (v8 != v4);
LABEL_8:
    *v5 = v6;
  }
  return result;
}

uint64_t sub_20FCC2244(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio31ComputeBAHealthMapTrackingStatsERKNS0_17CameraSetFeaturesINS0_13MapDataTraitsILb0EEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio31ComputeBAHealthMapTrackingStatsERKNS0_17CameraSetFeaturesINS0_13MapDataTrai"
                                "tsILb0EEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio31ComputeBAHealthMapTrackingStatsERKNS0_17CameraSetFeaturesINS0_13MapDataTraitsILb0EEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio31ComputeBAHealthMapTrackingStatsERKNS0_17CameraSetFeaturesINS0_13MapDataTraitsILb0EEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20FCC22B0()
{
  return &unk_24CA05130;
}

void sub_20FCC22C0(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20FCC22E4(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t **a4, __int128 *a5, __int128 *a6, uint64_t a7)
{
  uint64_t v7;
  __int128 *v8;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  void *v30;
  __int128 v31;
  __int128 v32;
  uint64_t **v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  __int128 v52;
  char *v53;
  char *v54;
  uint64_t *v55;
  uint64_t *v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  _DWORD *v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unsigned int v76;
  BOOL v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  void *__p;
  char *v85;

  v7 = a7;
  v8 = a6;
  v14 = a1 + 216;
  v15 = *(_QWORD *)(a1 + 216);
  if (v15)
  {
    v17 = *(_QWORD *)(a1 + 224);
    v18 = *(void **)(a1 + 216);
    if (v17 != v15)
    {
      do
      {
        v19 = *(_QWORD *)(v17 - 24);
        if (v19)
        {
          v20 = *(_QWORD *)(v17 - 16);
          v21 = *(void **)(v17 - 24);
          if (v20 != v19)
          {
            do
              v20 = sub_20EB8188C(v20 - 1664);
            while (v20 != v19);
            v21 = *(void **)(v17 - 24);
          }
          *(_QWORD *)(v17 - 16) = v19;
          operator delete(v21);
        }
        v17 -= 32;
      }
      while (v17 != v15);
      v18 = *(void **)v14;
    }
    *(_QWORD *)(a1 + 224) = v15;
    operator delete(v18);
    *(_QWORD *)v14 = 0;
    *(_QWORD *)(v14 + 8) = 0;
    *(_QWORD *)(v14 + 16) = 0;
    v7 = a7;
    v8 = a6;
  }
  *(_OWORD *)(a1 + 216) = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v22 = *a3;
  v23 = a3[2];
  *(_OWORD *)(a1 + 256) = a3[1];
  *(_OWORD *)(a1 + 272) = v23;
  *(_OWORD *)(a1 + 240) = v22;
  v24 = a3[3];
  v25 = a3[4];
  v26 = a3[6];
  *(_OWORD *)(a1 + 320) = a3[5];
  *(_OWORD *)(a1 + 336) = v26;
  *(_OWORD *)(a1 + 288) = v24;
  *(_OWORD *)(a1 + 304) = v25;
  v27 = a3[7];
  v28 = a3[8];
  v29 = a3[9];
  *(_QWORD *)(a1 + 400) = *((_QWORD *)a3 + 20);
  *(_OWORD *)(a1 + 368) = v28;
  *(_OWORD *)(a1 + 384) = v29;
  *(_OWORD *)(a1 + 352) = v27;
  memcpy((void *)(a1 + 408), (char *)a3 + 168, 0x120uLL);
  memcpy((void *)(a1 + 696), (char *)a3 + 456, 0x120uLL);
  v30 = *(void **)(a1 + 984);
  if (v30)
  {
    *(_QWORD *)(a1 + 992) = v30;
    operator delete(v30);
    *(_QWORD *)(a1 + 984) = 0;
    *(_QWORD *)(a1 + 992) = 0;
    *(_QWORD *)(a1 + 1000) = 0;
  }
  *(_QWORD *)(a1 + 984) = *((_QWORD *)a3 + 93);
  *(_QWORD *)(a1 + 992) = *((_QWORD *)a3 + 94);
  *(_QWORD *)(a1 + 1000) = *((_QWORD *)a3 + 95);
  *((_QWORD *)a3 + 95) = 0;
  *(__int128 *)((char *)a3 + 744) = 0u;
  v31 = a3[48];
  *(_QWORD *)(a1 + 1024) = *((_QWORD *)a3 + 98);
  *(_OWORD *)(a1 + 1008) = v31;
  v32 = *(__int128 *)((char *)a3 + 792);
  *(_QWORD *)(a1 + 1048) = *((_QWORD *)a3 + 101);
  *(_OWORD *)(a1 + 1032) = v32;
  *(_OWORD *)(a1 + 1056) = a3[51];
  v33 = (uint64_t **)(a1 + 1096);
  v34 = *a5;
  *(_QWORD *)a5 = 0;
  *((_QWORD *)a5 + 1) = 0;
  v35 = *(std::__shared_weak_count **)(a1 + 1104);
  *(_OWORD *)(a1 + 1096) = v34;
  if (v35)
  {
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldaxr(p_shared_owners);
    while (__stlxr(v37 - 1, p_shared_owners));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  sub_20F341F0C(a1 + 1112, v8);
  sub_20F04DA80(a1 + 4296, v7);
  v38 = (char *)a4[1] - (char *)*a4;
  v39 = v38 >> 4;
  v40 = *(char **)(a1 + 1080);
  v41 = *(char **)(a1 + 1072);
  v42 = (v40 - v41) >> 5;
  v43 = (v38 >> 4) - v42;
  if (v38 >> 4 <= v42)
  {
    if (v38 >> 4 >= v42)
      goto LABEL_36;
    v53 = &v41[32 * v39];
    goto LABEL_35;
  }
  v44 = *(_QWORD *)(a1 + 1088);
  if (v43 <= (v44 - (uint64_t)v40) >> 5)
  {
    bzero(*(void **)(a1 + 1080), 32 * v43);
    v53 = &v40[32 * v43];
LABEL_35:
    *(_QWORD *)(a1 + 1080) = v53;
    goto LABEL_36;
  }
  if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF1)
    sub_20E867F44();
  v45 = v44 - (_QWORD)v41;
  v46 = (v44 - (uint64_t)v41) >> 4;
  if (v46 > v39)
    v39 = v46;
  if (v45 >= 0x7FFFFFFFFFFFFFE0)
    v39 = 0x7FFFFFFFFFFFFFFLL;
  if (v39 >> 59)
    sub_20E877A38();
  v47 = 32 * v39;
  v48 = (char *)operator new(32 * v39);
  v49 = &v48[32 * v42];
  v50 = &v48[v47];
  bzero(v49, 32 * v43);
  v51 = &v49[32 * v43];
  if (v40 != v41)
  {
    do
    {
      v52 = *((_OWORD *)v40 - 2);
      *((_QWORD *)v49 - 2) = *((_QWORD *)v40 - 2);
      *((_OWORD *)v49 - 2) = v52;
      *((_QWORD *)v49 - 1) = *((_QWORD *)v40 - 1);
      v49 -= 32;
      v40 -= 32;
    }
    while (v40 != v41);
    v40 = v41;
  }
  *(_QWORD *)(a1 + 1072) = v49;
  *(_QWORD *)(a1 + 1080) = v51;
  *(_QWORD *)(a1 + 1088) = v50;
  if (v40)
    operator delete(v40);
LABEL_36:
  sub_20FCBAD00(*v33, (char **)&__p);
  v54 = (char *)__p;
  v55 = *a4;
  v56 = a4[1];
  if (*a4 != v56)
  {
    if (((v85 - (_BYTE *)__p) & 0x7FFFFFFF8) != 0)
    {
      v57 = 0;
      v58 = *((_DWORD *)*v33 + 12);
      v59 = ((unint64_t)(v85 - (_BYTE *)__p) >> 3);
      while (1)
      {
        v60 = *(_QWORD *)(a1 + 1072) + 32 * v57;
        v61 = *(_BYTE *)(*v55 + 488) ? *v55 + 40 : 0;
        v62 = *(_OWORD *)(v61 + 8);
        *(_QWORD *)(v60 + 16) = *(_QWORD *)(v61 + 24);
        *(_OWORD *)v60 = v62;
        v63 = *v55;
        v64 = *(_QWORD *)(*v55 + 24);
        v65 = *(_QWORD *)(*v55 + 32);
        *(_DWORD *)(v60 + 28) = 0;
        v66 = (_DWORD *)(v60 + 28);
        *(v66 - 1) = v65;
        v54 = (char *)__p;
        v67 = *(_QWORD *)(v63 + 496);
        v68 = *(_QWORD *)(v63 + 504);
        if (v68 != v67)
          break;
LABEL_39:
        ++v57;
        v55 += 2;
        if (v55 == v56)
          goto LABEL_67;
      }
      v69 = 0;
      v70 = 0;
LABEL_46:
      v71 = *(_DWORD *)&v54[8 * v70];
      v72 = v67;
      v73 = (v68 - v67) >> 6;
      while (1)
      {
        v74 = v73 >> 1;
        v75 = v72 + (v73 >> 1 << 6);
        v76 = *(_DWORD *)(v75 + 16);
        v77 = v76 >= v71;
        if (v76 != v71)
          goto LABEL_53;
        if (*(_QWORD *)v75 >= v64)
          break;
LABEL_47:
        v72 = v75 + 64;
        v74 = v73 + ~v74;
LABEL_48:
        v73 = v74;
        if (!v74)
        {
          if (v72 != v68 && *(_DWORD *)(v72 + 16) == v71 && *(_QWORD *)v72 == v64 && *(_DWORD *)(v72 + 8) == v58)
          {
            v69 |= *(_DWORD *)&v54[8 * v70 + 4];
            *v66 = v69;
          }
          if (++v70 == v59)
            goto LABEL_39;
          goto LABEL_46;
        }
      }
      if (*(_QWORD *)v75 != v64)
        goto LABEL_48;
      v77 = *(_DWORD *)(v75 + 8) >= v58;
LABEL_53:
      if (v77)
        goto LABEL_48;
      goto LABEL_47;
    }
    v78 = 0;
    do
    {
      v79 = *(_QWORD *)(a1 + 1072) + 32 * v78;
      if (*(_BYTE *)(*v55 + 488))
        v80 = *v55 + 40;
      else
        v80 = 0;
      v81 = *(_OWORD *)(v80 + 8);
      *(_QWORD *)(v79 + 16) = *(_QWORD *)(v80 + 24);
      *(_OWORD *)v79 = v81;
      v82 = *v55;
      v55 += 2;
      *(_QWORD *)(v79 + 24) = *(_QWORD *)(v82 + 32);
      ++v78;
    }
    while (v55 != v56);
    v54 = (char *)__p;
  }
LABEL_67:
  if (v54)
  {
    v85 = v54;
    operator delete(v54);
  }
}

uint64_t sub_20FCC27E4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t *v18;
  _QWORD *v19;
  int v20;
  void **v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  size_t v27;
  void *v28;
  uint64_t v29;
  unint64_t v30;
  const void **v31;
  const void *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  _QWORD *__dst;
  _QWORD *i;
  uint64_t v40;
  std::ios_base v41;
  uint64_t v42;
  int v43;
  uint64_t __sb;
  _QWORD v45[3];
  uint64_t v46;
  unint64_t v47;
  void *__p[2];
  __int128 v49;
  int v50;
  void *v51[2];
  unsigned __int8 v52;
  uint64_t v53;
  int v54;

  std::streambuf::basic_streambuf();
  __sb = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)__p = 0u;
  v49 = 0u;
  v50 = 24;
  v40 = MEMORY[0x24BEDB828] + 24;
  v41.__vftable = (std::ios_base_vtbl *)(MEMORY[0x24BEDB828] + 64);
  std::ios_base::init(&v41, &__sb);
  v42 = 0;
  v43 = -1;
  v5 = *(char *)(a2 + 23);
  if (v5 >= 0)
    v6 = a2;
  else
    v6 = *(_QWORD *)a2;
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(a2 + 23);
  else
    v7 = *(_QWORD *)(a2 + 8);
  v8 = sub_20E86A980(&v40, v6, v7);
  sub_20E86A980(v8, (uint64_t)": \n", 3);
  v9 = (_QWORD *)a1[15];
  __dst = a3;
  for (i = (_QWORD *)a1[16]; v9 != i; v9 += 4)
  {
    sub_20E86A980(&v40, (uint64_t)" Submap: ", 9);
    v10 = (_QWORD *)std::ostream::operator<<();
    v11 = sub_20E86A980(v10, (uint64_t)" tracks ", 8);
    sub_20E86A980(v11, (uint64_t)" sampled: ", 10);
    v12 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v12, (uint64_t)" projected: ", 12);
    v13 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v13, (uint64_t)" candidate: ", 12);
    v14 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v14, (uint64_t)" matched: ", 10);
    v15 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v15, (uint64_t)" inlier: ", 9);
    v16 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v16, (uint64_t)"\n", 1);
    v17 = (uint64_t *)a1[12];
    v18 = (uint64_t *)a1[13];
    while (v17 != v18)
    {
      if (*v17 == *v9)
      {
        v19 = sub_20E86A980(&v40, (uint64_t)"---- kd_id:{", 12);
        v20 = *((_DWORD *)v17 + 2);
        v53 = *v17;
        v54 = v20;
        sub_210216370((uint64_t)&v53);
        if ((v52 & 0x80u) == 0)
          v21 = v51;
        else
          v21 = (void **)v51[0];
        if ((v52 & 0x80u) == 0)
          v22 = v52;
        else
          v22 = (uint64_t)v51[1];
        sub_20E86A980(v19, (uint64_t)v21, v22);
        if ((char)v52 < 0)
          operator delete(v51[0]);
        sub_20E86A980(v19, (uint64_t)",", 1);
        v23 = (_QWORD *)std::ostream::operator<<();
        v24 = sub_20E86A980(v23, (uint64_t)"}", 1);
        sub_20E86A980(v24, (uint64_t)" 2d-3d matches: ", 16);
        v25 = (_QWORD *)std::ostream::operator<<();
        sub_20E86A980(v25, (uint64_t)" inlier: ", 9);
        v26 = (_QWORD *)std::ostream::operator<<();
        sub_20E86A980(v26, (uint64_t)"\n", 1);
      }
      v17 += 5;
    }
  }
  if ((v50 & 0x10) != 0)
  {
    v30 = *((_QWORD *)&v49 + 1);
    if (*((_QWORD *)&v49 + 1) < v47)
    {
      *((_QWORD *)&v49 + 1) = v47;
      v30 = v47;
    }
    v31 = (const void **)&v46;
  }
  else
  {
    if ((v50 & 8) == 0)
    {
      v27 = 0;
      v28 = __dst;
      *((_BYTE *)__dst + 23) = 0;
      v29 = MEMORY[0x24BEDB848];
      goto LABEL_38;
    }
    v31 = (const void **)v45;
    v30 = v45[2];
  }
  v28 = __dst;
  v29 = MEMORY[0x24BEDB848];
  v32 = *v31;
  v27 = v30 - (_QWORD)*v31;
  if (v27 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  if (v27 >= 0x17)
  {
    v33 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v33 = v27 | 7;
    v34 = v33 + 1;
    v35 = operator new(v33 + 1);
    __dst[1] = v27;
    __dst[2] = v34 | 0x8000000000000000;
    *__dst = v35;
    v28 = v35;
    goto LABEL_37;
  }
  *((_BYTE *)__dst + 23) = v27;
  if (v27)
LABEL_37:
    memmove(v28, v32, v27);
LABEL_38:
  *((_BYTE *)v28 + v27) = 0;
  std::ostream::~ostream();
  __sb = v29 + 16;
  if (SBYTE7(v49) < 0)
    operator delete(__p[0]);
  return std::streambuf::~streambuf();
}

void sub_20FCC2C1C(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X8>)
{
  unint64_t v3;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  void **v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v17;
  unint64_t v19;
  uint8x8_t v20;
  void **v21;
  uint64_t v22;
  unint64_t v24;
  unint64_t v26;
  float v27;
  _QWORD *v28;
  _QWORD *v29;
  _BOOL8 v30;
  unint64_t v31;
  unint64_t v32;
  size_t prime;
  unint64_t v34;
  uint8x8_t v35;
  uint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  char *v39;
  char *v40;
  char *v41;
  _OWORD *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  _QWORD *v53;
  _QWORD *v54;
  void *v55;
  void *v56[2];
  void *__p[2];
  float v58;

  *(_OWORD *)v56 = 0u;
  *(_OWORD *)__p = 0u;
  v58 = 1.0;
  v6 = *(uint64_t **)(a1 + 24);
  v7 = *(uint64_t **)(a1 + 32);
  if (v6 == v7)
  {
    v39 = 0;
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v38 = a3 + 2;
    v40 = (char *)__p[0];
    if (__p[0])
      goto LABEL_114;
    goto LABEL_134;
  }
  v8 = 0;
  v9 = 0;
  do
  {
    v10 = *((unsigned int *)v6 + 2);
    if (!v9)
      goto LABEL_29;
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v12 = *((unsigned int *)v6 + 2);
      if (v9 <= v10)
        v12 = v10 % v9;
    }
    else
    {
      v12 = ((_DWORD)v9 - 1) & v10;
    }
    v13 = (void **)*((_QWORD *)v56[0] + v12);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = *v6;
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v19 = v14[1];
            if (v19 == v10)
            {
              if (v14[2] == v15 && *((_DWORD *)v14 + 6) == (_DWORD)v10)
                goto LABEL_30;
            }
            else if ((v19 & (v9 - 1)) != v12)
            {
              goto LABEL_29;
            }
            v14 = (_QWORD *)*v14;
            if (!v14)
              goto LABEL_30;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            if (v14[2] == v15 && *((_DWORD *)v14 + 6) == (_DWORD)v10)
              break;
          }
          else
          {
            if (v17 >= v9)
              v17 %= v9;
            if (v17 != v12)
              goto LABEL_29;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
    else
    {
LABEL_29:
      v14 = 0;
    }
LABEL_30:
    if (*((_DWORD *)v6 + 7) || *((_DWORD *)v6 + 9) || *((_DWORD *)v6 + 6) || *((_DWORD *)v6 + 8))
    {
      if (v14)
      {
LABEL_101:
        *((_DWORD *)v14 + 8) += *((_DWORD *)v6 + 8);
        goto LABEL_102;
      }
      if (v9)
      {
        v20 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
        v20.i16[0] = vaddlv_u8(v20);
        if (v20.u32[0] > 1uLL)
        {
          v3 = *((unsigned int *)v6 + 2);
          if (v9 <= v10)
            v3 = v10 % v9;
        }
        else
        {
          v3 = ((_DWORD)v9 - 1) & v10;
        }
        v21 = (void **)*((_QWORD *)v56[0] + v3);
        if (v21)
        {
          v14 = *v21;
          if (*v21)
          {
            v22 = *v6;
            if (v20.u32[0] < 2uLL)
            {
              while (1)
              {
                v26 = v14[1];
                if (v26 == v10)
                {
                  if (v14[2] == v22 && *((_DWORD *)v14 + 6) == (_DWORD)v10)
                    goto LABEL_101;
                }
                else if ((v26 & (v9 - 1)) != v3)
                {
                  goto LABEL_61;
                }
                v14 = (_QWORD *)*v14;
                if (!v14)
                  goto LABEL_61;
              }
            }
            do
            {
              v24 = v14[1];
              if (v24 == v10)
              {
                if (v14[2] == v22 && *((_DWORD *)v14 + 6) == (_DWORD)v10)
                  goto LABEL_101;
              }
              else
              {
                if (v24 >= v9)
                  v24 %= v9;
                if (v24 != v3)
                  break;
              }
              v14 = (_QWORD *)*v14;
            }
            while (v14);
          }
        }
      }
LABEL_61:
      v14 = operator new(0x28uLL);
      *v14 = 0;
      v14[1] = v10;
      *((_OWORD *)v14 + 1) = *(_OWORD *)v6;
      *((_DWORD *)v14 + 8) = 0;
      v27 = (float)(v8 + 1);
      if (v9 && (float)(v58 * (float)v9) >= v27)
      {
        v28 = v56[0];
        v29 = (_QWORD *)*((_QWORD *)v56[0] + v3);
        if (v29)
        {
LABEL_64:
          *v14 = *v29;
          goto LABEL_99;
        }
      }
      else
      {
        v30 = (v9 & (v9 - 1)) != 0;
        if (v9 < 3)
          v30 = 1;
        v31 = v30 | (2 * v9);
        v32 = vcvtps_u32_f32(v27 / v58);
        if (v31 <= v32)
          prime = v32;
        else
          prime = v31;
        if (prime == 1)
        {
          prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          prime = std::__next_prime(prime);
          v9 = (unint64_t)v56[1];
        }
        if (prime > v9)
          goto LABEL_75;
        if (prime < v9)
        {
          v34 = vcvtps_u32_f32((float)(unint64_t)__p[1] / v58);
          if (v9 < 3 || (v35 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
          {
            v34 = std::__next_prime(v34);
          }
          else
          {
            v36 = 1 << -(char)__clz(v34 - 1);
            if (v34 >= 2)
              v34 = v36;
          }
          if (prime <= v34)
            prime = v34;
          if (prime < v9)
LABEL_75:
            sub_20E8D2B3C((uint64_t)v56, prime);
        }
        v9 = (unint64_t)v56[1];
        if (((unint64_t)v56[1] & ((unint64_t)v56[1] - 1)) != 0)
        {
          if (v56[1] <= (void *)v10)
          {
            v3 = v10 % (unint64_t)v56[1];
            v28 = v56[0];
            v29 = (_QWORD *)*((_QWORD *)v56[0] + v10 % (unint64_t)v56[1]);
            if (v29)
              goto LABEL_64;
          }
          else
          {
            v3 = v10;
            v28 = v56[0];
            v29 = (_QWORD *)*((_QWORD *)v56[0] + v10);
            if (v29)
              goto LABEL_64;
          }
        }
        else
        {
          v3 = (LODWORD(v56[1]) - 1) & v10;
          v28 = v56[0];
          v29 = (_QWORD *)*((_QWORD *)v56[0] + v3);
          if (v29)
            goto LABEL_64;
        }
      }
      *v14 = __p[0];
      __p[0] = v14;
      v28[v3] = __p;
      if (!*v14)
      {
LABEL_100:
        v8 = (unint64_t)++__p[1];
        goto LABEL_101;
      }
      v37 = *(_QWORD *)(*v14 + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v37 >= v9)
          v37 %= v9;
      }
      else
      {
        v37 &= v9 - 1;
      }
      v29 = (char *)v56[0] + 8 * v37;
LABEL_99:
      *v29 = v14;
      goto LABEL_100;
    }
LABEL_102:
    v6 += 5;
  }
  while (v6 != v7);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v38 = a3 + 2;
  if (v8)
  {
    if (v8 >> 60)
      sub_20E867F44();
    v39 = (char *)operator new(16 * v8);
    *a3 = (uint64_t)v39;
    a3[1] = (uint64_t)v39;
    a3[2] = (uint64_t)&v39[16 * v8];
    v40 = (char *)__p[0];
    if (!__p[0])
      goto LABEL_134;
LABEL_114:
    while (2)
    {
      if (*((_DWORD *)v40 + 8) >= a2)
      {
        v42 = v40 + 16;
        if ((unint64_t)v39 < *v38)
        {
          *(_OWORD *)v39 = *v42;
          v41 = v39 + 16;
          goto LABEL_112;
        }
        v43 = (char *)*a3;
        v44 = (uint64_t)&v39[-*a3] >> 4;
        v45 = v44 + 1;
        if ((unint64_t)(v44 + 1) >> 60)
          sub_20E867F44();
        v46 = *v38 - (_QWORD)v43;
        if (v46 >> 3 > v45)
          v45 = v46 >> 3;
        if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF0)
          v47 = 0xFFFFFFFFFFFFFFFLL;
        else
          v47 = v45;
        if (v47)
        {
          if (v47 >> 60)
            sub_20E877A38();
          v48 = (char *)operator new(16 * v47);
          v49 = &v48[16 * v44];
          *(_OWORD *)v49 = *v42;
          v50 = (uint64_t)v49;
          if (v39 == v43)
          {
LABEL_130:
            v41 = v49 + 16;
            *a3 = v50;
            a3[1] = (uint64_t)(v49 + 16);
            a3[2] = (uint64_t)&v48[16 * v47];
            if (v39)
              goto LABEL_131;
            goto LABEL_112;
          }
        }
        else
        {
          v48 = 0;
          v49 = (char *)(16 * v44);
          *(_OWORD *)(16 * v44) = *v42;
          v50 = 16 * v44;
          if (v39 == v43)
            goto LABEL_130;
        }
        do
        {
          v51 = *((_QWORD *)v39 - 2);
          v39 -= 16;
          v52 = *((_DWORD *)v39 + 2);
          *(_QWORD *)(v50 - 16) = v51;
          v50 -= 16;
          *(_DWORD *)(v50 + 8) = v52;
        }
        while (v39 != v43);
        v39 = (char *)*a3;
        v41 = v49 + 16;
        *a3 = v50;
        a3[1] = (uint64_t)(v49 + 16);
        a3[2] = (uint64_t)&v48[16 * v47];
        if (v39)
LABEL_131:
          operator delete(v39);
LABEL_112:
        a3[1] = (uint64_t)v41;
        v39 = v41;
      }
      v40 = *(char **)v40;
      if (!v40)
      {
        v53 = __p[0];
        if (__p[0])
        {
          do
          {
            v54 = (_QWORD *)*v53;
            operator delete(v53);
            v53 = v54;
          }
          while (v54);
        }
        goto LABEL_134;
      }
      continue;
    }
  }
  v39 = 0;
  v40 = (char *)__p[0];
  if (__p[0])
    goto LABEL_114;
LABEL_134:
  v55 = v56[0];
  v56[0] = 0;
  if (v55)
    operator delete(v55);
}

void sub_20FCC3230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_20E8C25A8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20FCC327C(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  char *v8;
  char *v9;
  _BYTE *v10;
  _BYTE *v11;
  int64_t v12;
  char *v13;
  char *v14;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v6 = *(_BYTE **)(a2 + 40);
  v5 = *(_BYTE **)(a2 + 48);
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0)
      sub_20E867F44();
    v8 = (char *)operator new(v5 - v6);
    *(_QWORD *)(a1 + 40) = v8;
    *(_QWORD *)(a1 + 48) = v8;
    v9 = &v8[4 * (v7 >> 2)];
    *(_QWORD *)(a1 + 56) = v9;
    memcpy(v8, v6, v7);
    *(_QWORD *)(a1 + 48) = v9;
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  v11 = *(_BYTE **)(a2 + 64);
  v10 = *(_BYTE **)(a2 + 72);
  v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0)
      sub_20E867F44();
    v13 = (char *)operator new(v10 - v11);
    *(_QWORD *)(a1 + 64) = v13;
    *(_QWORD *)(a1 + 72) = v13;
    v14 = &v13[4 * (v12 >> 2)];
    *(_QWORD *)(a1 + 80) = v14;
    memcpy(v13, v11, v12);
    *(_QWORD *)(a1 + 72) = v14;
  }
  return a1;
}

void sub_20FCC3368(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 72) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 48) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

char **sub_20FCC339C(char **a1, uint64_t **a2)
{
  _QWORD *v3;
  uint64_t *v4;
  int64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char *v23;
  void *v24;
  void *v25;
  uint64_t **v28;
  uint64_t **v29;
  uint64_t **v30;
  char *v31;
  char *v32;

  *((_OWORD *)a1 + 5) = 0u;
  v28 = (uint64_t **)(a1 + 10);
  v29 = (uint64_t **)(a1 + 7);
  v30 = (uint64_t **)(a1 + 3);
  *(_OWORD *)((char *)a1 + 90) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  v3 = a1 + 2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 != *a2)
  {
    v6 = 0x6DB6DB6DB6DB6DB7 * (v5 >> 4);
    if (v6 > 0x249249249249249)
      sub_20EABADD4();
    v7 = (char *)operator new(v5);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[112 * v6];
    v9 = *a2;
    v8 = a2[1];
    if (*a2 != v8)
    {
      do
      {
        v10 = *v9;
        v11 = *((_DWORD *)v9 + 2);
        v12 = *((_DWORD *)v9 + 4);
        if ((unint64_t)v7 >= *v3)
        {
          v13 = 0x6DB6DB6DB6DB6DB7 * ((v7 - *a1) >> 4);
          v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) > 0x249249249249249)
            sub_20EABADD4();
          if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*v3 - (_QWORD)*a1) >> 4) > v14)
            v14 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*v3 - (_QWORD)*a1) >> 4);
          if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*v3 - (_QWORD)*a1) >> 4)) >= 0x124924924924924)
            v15 = 0x249249249249249;
          else
            v15 = v14;
          if (v15)
          {
            if (v15 > 0x249249249249249)
              sub_20E877A38();
            v16 = (char *)operator new(112 * v15);
          }
          else
          {
            v16 = 0;
          }
          v31 = &v16[112 * v13];
          v32 = &v16[112 * v15];
          *(_QWORD *)v31 = v10;
          *((_DWORD *)v31 + 2) = v11;
          *((_DWORD *)v31 + 4) = v12;
          sub_20FCC327C((uint64_t)(v31 + 24), (uint64_t)(v9 + 3));
          v17 = v31;
          v7 = v31 + 112;
          v18 = *a1;
          v19 = a1[1];
          if (v19 != *a1)
          {
            do
            {
              v20 = *((_OWORD *)v19 - 7);
              *((_QWORD *)v17 - 12) = *((_QWORD *)v19 - 12);
              *((_OWORD *)v17 - 7) = v20;
              v21 = *(_OWORD *)(v19 - 88);
              v22 = *((_QWORD *)v19 - 7);
              *(_OWORD *)(v17 - 72) = *(_OWORD *)(v19 - 72);
              *(_OWORD *)(v17 - 88) = v21;
              *((_QWORD *)v17 - 7) = v22;
              *((_QWORD *)v17 - 6) = 0;
              *((_QWORD *)v17 - 5) = 0;
              *((_QWORD *)v17 - 4) = 0;
              *((_OWORD *)v17 - 3) = *((_OWORD *)v19 - 3);
              *((_QWORD *)v17 - 4) = *((_QWORD *)v19 - 4);
              *((_QWORD *)v19 - 6) = 0;
              *((_QWORD *)v19 - 5) = 0;
              *((_QWORD *)v19 - 4) = 0;
              *((_QWORD *)v17 - 3) = 0;
              *((_QWORD *)v17 - 2) = 0;
              *((_QWORD *)v17 - 1) = 0;
              *(_OWORD *)(v17 - 24) = *(_OWORD *)(v19 - 24);
              *((_QWORD *)v17 - 1) = *((_QWORD *)v19 - 1);
              v17 -= 112;
              *((_QWORD *)v19 - 3) = 0;
              *((_QWORD *)v19 - 2) = 0;
              *((_QWORD *)v19 - 1) = 0;
              v19 -= 112;
            }
            while (v19 != v18);
            v19 = *a1;
            v23 = a1[1];
            *a1 = v17;
            a1[1] = v7;
            for (a1[2] = v32; v23 != v19; v23 -= 112)
            {
              v24 = (void *)*((_QWORD *)v23 - 3);
              if (v24)
              {
                *((_QWORD *)v23 - 2) = v24;
                operator delete(v24);
              }
              v25 = (void *)*((_QWORD *)v23 - 6);
              if (v25)
              {
                *((_QWORD *)v23 - 5) = v25;
                operator delete(v25);
              }
            }
            if (!v19)
              goto LABEL_7;
LABEL_32:
            operator delete(v19);
            goto LABEL_7;
          }
          *a1 = v31;
          a1[1] = v7;
          a1[2] = v32;
          if (v19)
            goto LABEL_32;
        }
        else
        {
          *(_QWORD *)v7 = v10;
          *((_DWORD *)v7 + 2) = v11;
          *((_DWORD *)v7 + 4) = v12;
          sub_20FCC327C((uint64_t)(v7 + 24), (uint64_t)(v9 + 3));
          v7 += 112;
          a1[1] = v7;
        }
LABEL_7:
        a1[1] = v7;
        v9 += 14;
      }
      while (v9 != v8);
    }
  }
  if (v30 != a2 + 3)
    sub_20E86811C(v30, (char *)a2[3], (char *)a2[4], a2[4] - a2[3]);
  a1[6] = (char *)a2[6];
  if (v29 != a2 + 7)
    sub_20E867E00(v29, (char *)a2[7], (char *)a2[8], ((char *)a2[8] - (char *)a2[7]) >> 2);
  if (v28 != a2 + 10)
    sub_20E867E00(v28, (char *)a2[10], (char *)a2[11], ((char *)a2[11] - (char *)a2[10]) >> 2);
  *((_WORD *)a1 + 52) = *((_WORD *)a2 + 52);
  return a1;
}

void sub_20FCC3778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, void **a12, void **a13)
{
  uint64_t v13;
  void *v15;
  void *v16;
  void *v17;

  v15 = *a11;
  if (*a11)
  {
    *(_QWORD *)(v13 + 88) = v15;
    operator delete(v15);
    v16 = *a12;
    if (!*a12)
    {
LABEL_3:
      v17 = *a13;
      if (!*a13)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v16 = *a12;
    if (!*a12)
      goto LABEL_3;
  }
  *(_QWORD *)(v13 + 64) = v16;
  operator delete(v16);
  v17 = *a13;
  if (!*a13)
  {
LABEL_4:
    sub_20EAB9C54((void **)v13);
    _Unwind_Resume(a1);
  }
LABEL_7:
  *(_QWORD *)(v13 + 32) = v17;
  operator delete(v17);
  sub_20EAB9C54((void **)v13);
  _Unwind_Resume(a1);
}

void sub_20FCC3814(uint64_t **a1@<X0>, _OWORD *a2@<X8>)
{
  char **v2;
  uint64_t *v3;
  uint64_t *v4;
  int64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  _BYTE *v11;
  _BYTE *v12;
  int64_t v13;
  char *v14;
  _BYTE *v15;
  _BYTE *v16;
  int64_t v17;
  uint64_t v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  _BYTE *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  char *v36;
  void *v37;
  void *v38;
  char **v40;
  uint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  _BYTE v44[40];
  void *__p[2];
  char *v46;
  __int128 v47;
  unint64_t v48;

  v2 = (char **)a2;
  *(_OWORD *)((char *)a2 + 90) = 0u;
  a2[4] = 0u;
  a2[5] = 0u;
  a2[2] = 0u;
  a2[3] = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  v4 = *a1;
  v3 = a1[1];
  v5 = (char *)v3 - (char *)*a1;
  if (v3 != v4)
  {
    v41 = v3;
    v6 = 0x6DB6DB6DB6DB6DB7 * (v5 >> 4);
    if (v6 > 0x249249249249249)
      sub_20E867F44();
    v7 = (char *)operator new(v5);
    *v2 = v7;
    v2[1] = v7;
    v2[2] = &v7[112 * v6];
    v8 = v41;
    if (v41 != v4)
    {
      v40 = v2;
      do
      {
        v9 = *((unsigned int *)v4 + 2);
        v10 = *((_DWORD *)v4 + 4);
        *(_WORD *)v44 = *((_WORD *)v4 + 12);
        *(_OWORD *)&v44[8] = *((_OWORD *)v4 + 2);
        *(_OWORD *)&v44[24] = *((_OWORD *)v4 + 3);
        v46 = 0;
        *(_OWORD *)__p = 0uLL;
        v12 = (_BYTE *)v4[8];
        v11 = (_BYTE *)v4[9];
        v13 = v11 - v12;
        v43 = *v4;
        if (v11 == v12)
        {
          v42 = 0;
          v14 = 0;
          v47 = 0uLL;
          v48 = 0;
          v16 = (_BYTE *)v4[11];
          v24 = (_BYTE *)v4[12];
          v17 = v24 - v16;
          if (v24 == v16)
            goto LABEL_13;
        }
        else
        {
          if (v13 < 0)
            sub_20E867F44();
          v14 = (char *)operator new(v11 - v12);
          __p[0] = v14;
          v46 = &v14[4 * (v13 >> 2)];
          memcpy(v14, v12, v13);
          v42 = (unint64_t)v46;
          __p[1] = v46;
          v47 = 0uLL;
          v48 = 0;
          v16 = (_BYTE *)v4[11];
          v15 = (_BYTE *)v4[12];
          v17 = v15 - v16;
          if (v15 == v16)
          {
LABEL_13:
            v18 = v9;
            v20 = 0;
            v19 = 0;
            v22 = v2[1];
            v21 = (unint64_t)v2[2];
            if ((unint64_t)v22 >= v21)
              goto LABEL_14;
            goto LABEL_11;
          }
        }
        if (v17 < 0)
          sub_20E867F44();
        v18 = v9;
        v19 = operator new(v17);
        v20 = (unint64_t)v19 + 4 * (v17 >> 2);
        *(_QWORD *)&v47 = v19;
        v48 = v20;
        memcpy(v19, v16, v17);
        *((_QWORD *)&v47 + 1) = v20;
        v22 = v2[1];
        v21 = (unint64_t)v2[2];
        if ((unint64_t)v22 >= v21)
        {
LABEL_14:
          v25 = *v2;
          v26 = 0x6DB6DB6DB6DB6DB7 * ((v22 - *v2) >> 4);
          v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) > 0x249249249249249)
            sub_20E867F44();
          v28 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v21 - (_QWORD)v25) >> 4);
          if (2 * v28 > v27)
            v27 = 2 * v28;
          if (v28 >= 0x124924924924924)
            v29 = 0x249249249249249;
          else
            v29 = v27;
          if (v29 > 0x249249249249249)
            sub_20E877A38();
          v30 = (char *)operator new(112 * v29);
          v31 = &v30[112 * v26];
          *(_OWORD *)(v31 + 24) = *(_OWORD *)v44;
          v32 = &v30[112 * v29];
          *(_QWORD *)v31 = v43;
          *((_QWORD *)v31 + 1) = v18;
          *((_DWORD *)v31 + 4) = v10;
          *(_OWORD *)(v31 + 40) = *(_OWORD *)&v44[16];
          *((_QWORD *)v31 + 9) = 0;
          *((_QWORD *)v31 + 10) = 0;
          *((_QWORD *)v31 + 7) = *(_QWORD *)&v44[32];
          *((_QWORD *)v31 + 8) = v14;
          *(int64x2_t *)(v31 + 72) = vdupq_n_s64(v42);
          *((_QWORD *)v31 + 12) = 0;
          *((_QWORD *)v31 + 13) = 0;
          *((_QWORD *)v31 + 11) = v19;
          *((int64x2_t *)v31 + 6) = vdupq_n_s64(v20);
          v23 = v31 + 112;
          if (v22 == v25)
          {
            v2 = v40;
            v8 = v41;
            *v40 = v31;
            v40[1] = v23;
            v40[2] = v32;
          }
          else
          {
            v2 = v40;
            v8 = v41;
            do
            {
              v33 = *((_OWORD *)v22 - 7);
              *((_QWORD *)v31 - 12) = *((_QWORD *)v22 - 12);
              *((_OWORD *)v31 - 7) = v33;
              v34 = *(_OWORD *)(v22 - 88);
              v35 = *(_OWORD *)(v22 - 72);
              *((_QWORD *)v31 - 7) = *((_QWORD *)v22 - 7);
              *(_OWORD *)(v31 - 72) = v35;
              *(_OWORD *)(v31 - 88) = v34;
              *((_OWORD *)v31 - 3) = *((_OWORD *)v22 - 3);
              *((_QWORD *)v31 - 4) = *((_QWORD *)v22 - 4);
              *((_QWORD *)v22 - 6) = 0;
              *((_QWORD *)v22 - 5) = 0;
              *((_QWORD *)v22 - 4) = 0;
              *(_OWORD *)(v31 - 24) = *(_OWORD *)(v22 - 24);
              *((_QWORD *)v31 - 1) = *((_QWORD *)v22 - 1);
              v31 -= 112;
              *((_QWORD *)v22 - 3) = 0;
              *((_QWORD *)v22 - 2) = 0;
              *((_QWORD *)v22 - 1) = 0;
              v22 -= 112;
            }
            while (v22 != v25);
            v22 = *v40;
            v36 = v40[1];
            *v40 = v31;
            v40[1] = v23;
            v40[2] = v32;
            while (v36 != v22)
            {
              v37 = (void *)*((_QWORD *)v36 - 3);
              if (v37)
              {
                *((_QWORD *)v36 - 2) = v37;
                operator delete(v37);
              }
              v38 = (void *)*((_QWORD *)v36 - 6);
              if (v38)
              {
                *((_QWORD *)v36 - 5) = v38;
                operator delete(v38);
              }
              v36 -= 112;
            }
          }
          if (v22)
            operator delete(v22);
          goto LABEL_34;
        }
LABEL_11:
        *(_QWORD *)v22 = v43;
        *((_QWORD *)v22 + 1) = v18;
        *((_DWORD *)v22 + 4) = v10;
        *(_OWORD *)(v22 + 24) = *(_OWORD *)v44;
        *((_QWORD *)v22 + 7) = *(_QWORD *)&v44[32];
        *(_OWORD *)(v22 + 40) = *(_OWORD *)&v44[16];
        *((_OWORD *)v22 + 4) = *(_OWORD *)__p;
        *((_QWORD *)v22 + 10) = v46;
        *(_OWORD *)(v22 + 88) = v47;
        *((_QWORD *)v22 + 13) = v48;
        v23 = v22 + 112;
LABEL_34:
        v2[1] = v23;
        v4 += 14;
      }
      while (v4 != v8);
    }
  }
  if (v2 != (char **)a1)
    sub_20E86811C(v2 + 3, (char *)a1[3], (char *)a1[4], a1[4] - a1[3]);
  v2[6] = (char *)a1[6];
  if (v2 != (char **)a1)
  {
    sub_20E867E00(v2 + 7, (char *)a1[7], (char *)a1[8], ((char *)a1[8] - (char *)a1[7]) >> 2);
    sub_20E867E00(v2 + 10, (char *)a1[10], (char *)a1[11], ((char *)a1[11] - (char *)a1[10]) >> 2);
  }
  *((_WORD *)v2 + 52) = *((_WORD *)a1 + 52);
}

void sub_20FCC3CC4(_Unwind_Exception *a1)
{
  void **v1;

  sub_20E991750(v1);
  _Unwind_Resume(a1);
}

void sub_20FCC3CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  if (__p)
  {
    operator delete(__p);
    sub_20E991750(a10);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20FCC3D30);
}

uint64_t sub_20FCC3D40(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t *v9;
  uint64_t *i;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  _QWORD *v36;
  _QWORD *v37;
  char *v38;
  char *v39;

  *(_OWORD *)(a1 + 8) = 0u;
  v37 = (_QWORD *)(a1 + 8);
  v36 = (_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = 0u;
  v3 = (_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = v5 - v4;
  if (v5 != v4)
  {
    v7 = 0xF0F0F0F0F0F0F0F1 * (v6 >> 3);
    if (v7 > 0x1E1E1E1E1E1E1E1)
      sub_20EABADD4();
    v8 = (char *)operator new(v6);
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 24) = &v8[136 * v7];
    v9 = *(uint64_t **)(a2 + 8);
    for (i = *(uint64_t **)(a2 + 16); v9 != i; v9 += 17)
    {
      v11 = *v9;
      v12 = *((_DWORD *)v9 + 2);
      v13 = *((_DWORD *)v9 + 4);
      if ((unint64_t)v8 >= *v3)
      {
        v14 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)&v8[-*v37] >> 3);
        v15 = v14 + 1;
        if (v14 + 1 > 0x1E1E1E1E1E1E1E1)
          sub_20EABADD4();
        if (0xE1E1E1E1E1E1E1E2 * ((uint64_t)(*v3 - *v37) >> 3) > v15)
          v15 = 0xE1E1E1E1E1E1E1E2 * ((uint64_t)(*v3 - *v37) >> 3);
        if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*v3 - *v37) >> 3) >= 0xF0F0F0F0F0F0F0)
          v16 = 0x1E1E1E1E1E1E1E1;
        else
          v16 = v15;
        if (v16)
        {
          if (v16 > 0x1E1E1E1E1E1E1E1)
            sub_20E877A38();
          v17 = (char *)operator new(136 * v16);
        }
        else
        {
          v17 = 0;
        }
        v38 = &v17[136 * v14];
        v39 = &v17[136 * v16];
        *(_QWORD *)v38 = v11;
        *((_DWORD *)v38 + 2) = v12;
        *((_DWORD *)v38 + 4) = v13;
        sub_20FCC339C((char **)v38 + 3, (uint64_t **)v9 + 3);
        v8 = v38 + 136;
        v18 = *(char **)(a1 + 8);
        v19 = *(char **)(a1 + 16);
        if (v19 != v18)
        {
          v20 = 0;
          do
          {
            v21 = &v38[v20];
            v22 = &v19[v20];
            v23 = *(_QWORD *)&v19[v20 - 120];
            *(_OWORD *)(v21 - 136) = *(_OWORD *)&v19[v20 - 136];
            *((_QWORD *)v21 - 15) = v23;
            *((_QWORD *)v21 - 14) = 0;
            *((_QWORD *)v21 - 13) = 0;
            *((_QWORD *)v21 - 12) = 0;
            *((_OWORD *)v21 - 7) = *(_OWORD *)&v19[v20 - 112];
            *((_QWORD *)v21 - 12) = *(_QWORD *)&v19[v20 - 96];
            *((_QWORD *)v22 - 14) = 0;
            *((_QWORD *)v22 - 13) = 0;
            *((_QWORD *)v22 - 12) = 0;
            *((_QWORD *)v21 - 11) = 0;
            *((_QWORD *)v21 - 10) = 0;
            *((_QWORD *)v21 - 9) = 0;
            *(_OWORD *)(v21 - 88) = *(_OWORD *)&v19[v20 - 88];
            *((_QWORD *)v21 - 9) = *(_QWORD *)&v19[v20 - 72];
            *((_QWORD *)v22 - 10) = 0;
            *((_QWORD *)v22 - 9) = 0;
            *((_QWORD *)v22 - 11) = 0;
            v24 = *(_QWORD *)&v19[v20 - 64];
            *((_QWORD *)v21 - 6) = 0;
            *((_QWORD *)v21 - 5) = 0;
            *((_QWORD *)v21 - 8) = v24;
            *((_QWORD *)v21 - 7) = 0;
            *(_OWORD *)(v21 - 56) = *(_OWORD *)&v19[v20 - 56];
            *((_QWORD *)v21 - 5) = *(_QWORD *)&v19[v20 - 40];
            *((_QWORD *)v22 - 7) = 0;
            *((_QWORD *)v22 - 6) = 0;
            *((_QWORD *)v22 - 5) = 0;
            *((_QWORD *)v21 - 3) = 0;
            *((_QWORD *)v21 - 2) = 0;
            *((_QWORD *)v21 - 4) = 0;
            *((_OWORD *)v21 - 2) = *(_OWORD *)&v19[v20 - 32];
            *((_QWORD *)v21 - 2) = *(_QWORD *)&v19[v20 - 16];
            *((_QWORD *)v22 - 4) = 0;
            *((_QWORD *)v22 - 3) = 0;
            *((_QWORD *)v22 - 2) = 0;
            *((_WORD *)v21 - 4) = *(_WORD *)&v19[v20 - 8];
            v20 -= 136;
          }
          while (&v19[v20] != v18);
          v19 = *(char **)(a1 + 8);
          v25 = *(char **)(a1 + 16);
          *(_QWORD *)(a1 + 8) = &v38[v20];
          *(_QWORD *)(a1 + 16) = v8;
          for (*(_QWORD *)(a1 + 24) = v39; v25 != v19; v25 -= 136)
          {
            v27 = (void *)*((_QWORD *)v25 - 4);
            if (v27)
            {
              *((_QWORD *)v25 - 3) = v27;
              operator delete(v27);
            }
            v28 = (void *)*((_QWORD *)v25 - 7);
            if (v28)
            {
              *((_QWORD *)v25 - 6) = v28;
              operator delete(v28);
            }
            v29 = (void *)*((_QWORD *)v25 - 11);
            if (v29)
            {
              *((_QWORD *)v25 - 10) = v29;
              operator delete(v29);
            }
            v30 = *((_QWORD *)v25 - 14);
            if (v30)
            {
              v31 = *((_QWORD *)v25 - 13);
              v26 = (void *)*((_QWORD *)v25 - 14);
              if (v31 != v30)
              {
                do
                {
                  v32 = *(void **)(v31 - 24);
                  if (v32)
                  {
                    *(_QWORD *)(v31 - 16) = v32;
                    operator delete(v32);
                  }
                  v33 = *(void **)(v31 - 48);
                  if (v33)
                  {
                    *(_QWORD *)(v31 - 40) = v33;
                    operator delete(v33);
                  }
                  v31 -= 112;
                }
                while (v31 != v30);
                v26 = (void *)*((_QWORD *)v25 - 14);
              }
              *((_QWORD *)v25 - 13) = v30;
              operator delete(v26);
            }
          }
          if (!v19)
            goto LABEL_7;
LABEL_45:
          operator delete(v19);
          goto LABEL_7;
        }
        *(_QWORD *)(a1 + 8) = v38;
        *(_QWORD *)(a1 + 16) = v8;
        *(_QWORD *)(a1 + 24) = v39;
        if (v19)
          goto LABEL_45;
      }
      else
      {
        *(_QWORD *)v8 = v11;
        *((_DWORD *)v8 + 2) = v12;
        *((_DWORD *)v8 + 4) = v13;
        sub_20FCC339C((char **)v8 + 3, (uint64_t **)v9 + 3);
        v8 += 136;
        *(_QWORD *)(a1 + 16) = v8;
      }
LABEL_7:
      *(_QWORD *)(a1 + 16) = v8;
    }
  }
  if (v36 != (_QWORD *)(a2 + 32))
    sub_20E867E00(v36, *(char **)(a2 + 32), *(char **)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2);
  return a1;
}

void sub_20FCC4118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11)
{
  uint64_t v11;
  void *v13;

  v13 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v11 + 40) = v13;
    operator delete(v13);
  }
  sub_20FCC4164(a11);
  _Unwind_Resume(a1);
}

void **sub_20FCC4164(void **a1)
{
  void **v2;
  void **v3;
  void *v4;
  void **v5;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 17;
        sub_20E991750(v3 - 14);
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_20FCC41C8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t *v4;
  int64_t v5;
  unint64_t v6;
  char *v7;
  void **v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  void **v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  _QWORD *v31;
  __int128 v32;
  _QWORD *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  void *v42;
  char *v43;
  char *v44;
  void *v45;
  void *v46;
  _QWORD *v48;
  void *__p[2];
  uint64_t v51;
  void *v52[2];
  uint64_t v53;
  uint64_t v54;
  void *v55[2];
  uint64_t v56;
  void *v57[2];
  uint64_t v58;
  __int16 v59;

  v2 = (_QWORD *)a2;
  *(_OWORD *)(a2 + 8) = 0u;
  v48 = (_QWORD *)(a2 + 8);
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_BYTE *)a2 = *(_BYTE *)a1;
  v3 = *(uint64_t **)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 16);
  v5 = (char *)v4 - (char *)v3;
  if (v4 != v3)
  {
    v6 = 0xF0F0F0F0F0F0F0F1 * (v5 >> 3);
    if (v6 > 0x1E1E1E1E1E1E1E1)
      sub_20E867F44();
    v7 = (char *)operator new(v5);
    v2[1] = v7;
    v2[2] = v7;
    v2[3] = &v7[136 * v6];
    if (v4 != v3)
    {
      v8 = v52;
      do
      {
        v10 = *v3;
        v11 = *((unsigned int *)v3 + 2);
        v12 = *((_DWORD *)v3 + 4);
        sub_20FCC3814((uint64_t **)v3 + 3, __p);
        v14 = (_QWORD *)v2[2];
        v13 = v2[3];
        if ((unint64_t)v14 >= v13)
        {
          v17 = (_QWORD *)*v48;
          v18 = 0xF0F0F0F0F0F0F0F1 * (((uint64_t)v14 - *v48) >> 3);
          v19 = v18 + 1;
          if (v18 + 1 > 0x1E1E1E1E1E1E1E1)
            sub_20E867F44();
          v20 = v8;
          v21 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v13 - (_QWORD)v17) >> 3);
          if (2 * v21 > v19)
            v19 = 2 * v21;
          if (v21 >= 0xF0F0F0F0F0F0F0)
            v22 = 0x1E1E1E1E1E1E1E1;
          else
            v22 = v19;
          if (v22 > 0x1E1E1E1E1E1E1E1)
            sub_20E877A38();
          v23 = (char *)operator new(136 * v22);
          v24 = &v23[136 * v18];
          *(_QWORD *)v24 = v10;
          *((_QWORD *)v24 + 1) = v11;
          *((_DWORD *)v24 + 4) = v12;
          v25 = &v23[136 * v22];
          *(_OWORD *)(v24 + 24) = *(_OWORD *)__p;
          *((_QWORD *)v24 + 5) = v51;
          __p[0] = 0;
          __p[1] = 0;
          v51 = 0;
          *((_OWORD *)v24 + 3) = *(_OWORD *)v52;
          v26 = v53;
          v27 = v54;
          v8 = v20;
          v20[1] = 0;
          v20[2] = 0;
          *v20 = 0;
          *((_QWORD *)v24 + 8) = v26;
          *((_QWORD *)v24 + 9) = v27;
          *((_QWORD *)v24 + 11) = 0;
          *((_QWORD *)v24 + 12) = 0;
          *((_OWORD *)v24 + 5) = *(_OWORD *)v55;
          *((_QWORD *)v24 + 12) = v56;
          v55[0] = 0;
          v55[1] = 0;
          v56 = 0;
          *((_QWORD *)v24 + 14) = 0;
          *((_QWORD *)v24 + 15) = 0;
          *(_OWORD *)(v24 + 104) = *(_OWORD *)v57;
          *((_QWORD *)v24 + 15) = v58;
          v57[0] = 0;
          v57[1] = 0;
          v58 = 0;
          v28 = v24 + 136;
          *((_WORD *)v24 + 64) = v59;
          if (v14 == v17)
          {
            v2 = (_QWORD *)a2;
            *(_QWORD *)(a2 + 8) = v24;
            *(_QWORD *)(a2 + 16) = v28;
            *(_QWORD *)(a2 + 24) = v25;
          }
          else
          {
            v29 = 0;
            v2 = (_QWORD *)a2;
            do
            {
              v30 = &v24[v29 * 8];
              v31 = &v14[v29];
              v32 = *(_OWORD *)&v14[v29 - 17];
              *((_QWORD *)v30 - 15) = v14[v29 - 15];
              *(_OWORD *)(v30 - 136) = v32;
              *((_OWORD *)v30 - 7) = *(_OWORD *)&v14[v29 - 14];
              *((_QWORD *)v30 - 12) = v14[v29 - 12];
              *(v31 - 14) = 0;
              *(v31 - 13) = 0;
              *(v31 - 12) = 0;
              *(_OWORD *)(v30 - 88) = *(_OWORD *)&v14[v29 - 11];
              *((_QWORD *)v30 - 9) = v14[v29 - 9];
              *(v31 - 11) = 0;
              *(v31 - 10) = 0;
              *(v31 - 9) = 0;
              *((_QWORD *)v30 - 8) = v14[v29 - 8];
              *(_OWORD *)(v30 - 56) = *(_OWORD *)&v14[v29 - 7];
              *((_QWORD *)v30 - 5) = v14[v29 - 5];
              *(v31 - 7) = 0;
              *(v31 - 6) = 0;
              *(v31 - 5) = 0;
              *((_OWORD *)v30 - 2) = *(_OWORD *)&v14[v29 - 4];
              *((_QWORD *)v30 - 2) = v14[v29 - 2];
              *(v31 - 4) = 0;
              *(v31 - 3) = 0;
              *(v31 - 2) = 0;
              *((_WORD *)v30 - 4) = v14[v29 - 1];
              v29 -= 17;
            }
            while (&v14[v29] != v17);
            v14 = *(_QWORD **)(a2 + 8);
            v33 = *(_QWORD **)(a2 + 16);
            *(_QWORD *)(a2 + 8) = &v24[v29 * 8];
            *(_QWORD *)(a2 + 16) = v28;
            *(_QWORD *)(a2 + 24) = v25;
            while (v33 != v14)
            {
              v35 = (void *)*(v33 - 4);
              if (v35)
              {
                *(v33 - 3) = v35;
                operator delete(v35);
              }
              v36 = (void *)*(v33 - 7);
              if (v36)
              {
                *(v33 - 6) = v36;
                operator delete(v36);
              }
              v37 = (void *)*(v33 - 11);
              if (v37)
              {
                *(v33 - 10) = v37;
                operator delete(v37);
              }
              v38 = *(v33 - 14);
              if (v38)
              {
                v39 = *(v33 - 13);
                v34 = (void *)*(v33 - 14);
                if (v39 != v38)
                {
                  do
                  {
                    v40 = *(void **)(v39 - 24);
                    if (v40)
                    {
                      *(_QWORD *)(v39 - 16) = v40;
                      operator delete(v40);
                    }
                    v41 = *(void **)(v39 - 48);
                    if (v41)
                    {
                      *(_QWORD *)(v39 - 40) = v41;
                      operator delete(v41);
                    }
                    v39 -= 112;
                  }
                  while (v39 != v38);
                  v34 = (void *)*(v33 - 14);
                }
                *(v33 - 13) = v38;
                operator delete(v34);
              }
              v33 -= 17;
            }
          }
          if (v14)
            operator delete(v14);
          v42 = v57[0];
          v2[2] = v28;
          if (v42)
          {
            v57[1] = v42;
            operator delete(v42);
          }
        }
        else
        {
          *v14 = v10;
          v14[1] = v11;
          *((_DWORD *)v14 + 4) = v12;
          *(_OWORD *)(v14 + 3) = *(_OWORD *)__p;
          v14[5] = v51;
          __p[1] = 0;
          v51 = 0;
          __p[0] = 0;
          *((_OWORD *)v14 + 3) = *(_OWORD *)v52;
          v15 = v53;
          v16 = v54;
          v8[1] = 0;
          v8[2] = 0;
          *v8 = 0;
          v14[8] = v15;
          v14[9] = v16;
          *((_OWORD *)v14 + 5) = *(_OWORD *)v55;
          v14[12] = v56;
          v55[1] = 0;
          v56 = 0;
          v55[0] = 0;
          *(_OWORD *)(v14 + 13) = *(_OWORD *)v57;
          v14[15] = v58;
          v57[0] = 0;
          v57[1] = 0;
          v58 = 0;
          *((_WORD *)v14 + 64) = v59;
          v2[2] = v14 + 17;
        }
        if (v55[0])
        {
          v55[1] = v55[0];
          operator delete(v55[0]);
        }
        if (v52[0])
        {
          v52[1] = v52[0];
          operator delete(v52[0]);
        }
        v43 = (char *)__p[0];
        if (__p[0])
        {
          v44 = (char *)__p[1];
          v9 = __p[0];
          if (__p[1] != __p[0])
          {
            do
            {
              v45 = (void *)*((_QWORD *)v44 - 3);
              if (v45)
              {
                *((_QWORD *)v44 - 2) = v45;
                operator delete(v45);
              }
              v46 = (void *)*((_QWORD *)v44 - 6);
              if (v46)
              {
                *((_QWORD *)v44 - 5) = v46;
                operator delete(v46);
              }
              v44 -= 112;
            }
            while (v44 != v43);
            v9 = __p[0];
          }
          __p[1] = v43;
          operator delete(v9);
        }
        v3 += 17;
      }
      while (v3 != v4);
    }
  }
  if (v2 != (_QWORD *)a1)
    sub_20E867E00(v2 + 4, *(char **)(a1 + 32), *(char **)(a1 + 40), (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 2);
}

void sub_20FCC467C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD *a12)
{
  sub_20F27A8AC(a12);
  _Unwind_Resume(a1);
}

uint64_t sub_20FCC46B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;
  void *v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 112;
    v4 = *(void **)(i - 24);
    if (v4)
    {
      *(_QWORD *)(i - 16) = v4;
      operator delete(v4);
    }
    v5 = *(void **)(i - 48);
    if (v5)
    {
      *(_QWORD *)(i - 40) = v5;
      operator delete(v5);
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20FCC4728(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 136;
    sub_20E991750((void **)(i - 112));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20FCC477C(_QWORD *a1)
{
  void **v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t j;
  void **v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t k;
  uint64_t v13;
  uint64_t m;
  uint64_t v15;
  uint64_t n;
  uint64_t v17;
  uint64_t ii;

  if (a1[3])
  {
    v2 = (void **)a1[2];
    if (v2)
    {
      do
      {
        v7 = (void **)*v2;
        if (*((char *)v2 + 39) < 0)
          operator delete(v2[2]);
        operator delete(v2);
        v2 = v7;
      }
      while (v7);
    }
    a1[2] = 0;
    v3 = a1[1];
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*a1 + 8 * i) = 0;
    }
    a1[3] = 0;
  }
  v5 = a1[5];
  for (j = a1[6]; j != v5; j -= 40)
  {
    v9 = *(_QWORD *)(j - 24);
    if (v9)
    {
      v10 = *(_QWORD *)(j - 16);
      v8 = *(void **)(j - 24);
      if (v10 != v9)
      {
        do
        {
          if (*(char *)(v10 - 9) < 0)
            operator delete(*(void **)(v10 - 32));
          v10 -= 32;
        }
        while (v10 != v9);
        v8 = *(void **)(j - 24);
      }
      *(_QWORD *)(j - 16) = v9;
      operator delete(v8);
    }
  }
  a1[6] = v5;
  v11 = a1[8];
  for (k = a1[9]; k != v11; k -= 24)
  {
    if (*(char *)(k - 1) < 0)
      operator delete(*(void **)(k - 24));
  }
  a1[9] = v11;
  v13 = a1[11];
  for (m = a1[12]; m != v13; m -= 24)
  {
    if (*(char *)(m - 1) < 0)
      operator delete(*(void **)(m - 24));
  }
  a1[12] = v13;
  v15 = a1[14];
  for (n = a1[15]; n != v15; n -= 24)
  {
    if (*(char *)(n - 1) < 0)
      operator delete(*(void **)(n - 24));
  }
  a1[15] = v15;
  v17 = a1[17];
  for (ii = a1[18]; ii != v17; ii -= 24)
  {
    if (*(char *)(ii - 1) < 0)
      operator delete(*(void **)(ii - 24));
  }
  a1[18] = v17;
}

uint64_t sub_20FCC4918(_QWORD *a1, uint64_t a2, _QWORD *a3, float64x2_t *a4, uint64_t *a5, __int128 *a6, double a7, double a8, double a9, float64x2_t a10)
{
  int v16;
  unint64_t v17;
  unint64_t v18;
  const char *v20;
  char *v21;
  const char *v22;
  size_t v23;
  unsigned __int8 v24;
  unint64_t v25;
  float64x2_t v26;
  int v27;
  uint64_t *v28;
  float64x2_t v30;
  uint64_t v31;
  float64x2_t v32;
  float64x2_t v34;
  uint64_t v36;
  double v37;
  double v39;
  double v41;
  float64x2_t *v43;
  float64x2_t v45;
  float64x2_t *v50;
  double v51;
  float64x2_t v52;
  int64x2_t v53;
  float64x2_t v55;
  int64x2_t v56;
  double v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  int8x16_t v64;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  unint64_t v70;
  __int128 v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  unint64_t v76;
  __int128 v77;
  unint64_t v78;
  __int128 v79;
  int v80;
  unint64_t v81;
  unint64_t v82;
  char *v83;
  size_t v84;
  const char *v85;
  uint64_t v86;
  int v87;
  int v88;
  unint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  unsigned __int8 v96;
  const char *v97;
  size_t v98;
  _BYTE *v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  _BYTE *p_p;
  uint64_t v104;
  uint64_t v105;
  NSObject *v106;
  size_t v107;
  void *v108;
  _QWORD *v109;
  size_t v110;
  size_t v111;
  __int128 **p_dst;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  __int128 *v116;
  char v117;
  _QWORD *v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *p_shared_owners;
  unint64_t v122;
  float64_t v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  const char *v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  __int128 *v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  const char *v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  int v163;
  unsigned __int8 v165;
  const char *v166;
  size_t v167;
  _BYTE *v168;
  unint64_t v169;
  const char *v170;
  char *v171;
  int v172;
  uint64_t v173;
  uint64_t v174;
  __int128 *v175;
  uint64_t v176;
  uint64_t v177;
  NSObject *v178;
  size_t v179;
  std::__shared_weak_count_vtbl *v180;
  std::__shared_weak_count *v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  char *v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  void *v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  unsigned __int8 v214;
  uint64_t v215;
  const char *v216;
  NSObject *v217;
  const char *v218;
  char *v219;
  uint64_t v220;
  __int128 v221;
  char v222;
  uint64_t v223;
  char v224;
  uint64_t v225;
  char **v226;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v228;
  int v229;
  const char *v230;
  int v231;
  const char *v232;
  uint64_t v233;
  std::__shared_weak_count *v234;
  char *category[2];
  _BYTE v236[32];
  std::__shared_weak_count *v237;
  __int128 *__dst;
  __int128 v239;
  _BYTE object[40];
  float64x2_t __p;
  float64x2_t v242;
  float64x2_t v243;
  float64x2_t v244;
  float64x2_t v245;
  float64x2_t v246;
  float64x2_t v247;
  float64x2_t v248;
  float64x2_t v249;
  float64x2_t v250;
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v253;
  float64x2_t v254;
  float64x2_t v255;
  char v256;
  __int128 v257;
  uint64_t v258;
  __int128 v259;
  uint64_t v260;

  v260 = *MEMORY[0x24BDAC8D0];
  if (a1[3] && sub_20FCCAD50(a1, a2))
  {
    sub_20FCC62D0(category);
    if (**((int **)category[0] + 7) > 2
      || ((v16 = *((unsigned __int8 *)category[0] + 72),
           v17 = sub_20E8C31DC((uint64_t)category[0], "OSLogSurrogateAppender", 1, 0),
           v18 = v17,
           !v16)
        ? (_ZF = v17 == 0)
        : (_ZF = 0),
          _ZF))
    {
LABEL_164:
      v87 = 0;
      goto LABEL_165;
    }
    v226 = category;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v228 = std::chrono::system_clock::now().__d_.__rep_;
    v229 = 2;
    v230 = "unknown file";
    v231 = 36;
    v233 = 0;
    v234 = 0;
    v232 = "unknown function";
    if (*(char *)(a2 + 23) >= 0)
      v20 = (const char *)a2;
    else
      v20 = *(const char **)a2;
    v21 = *v226;
    v22 = *v226 + 16;
    v218 = v22;
    v219 = *v226;
    if ((*v226)[39] < 0)
    {
      v22 = (const char *)*((_QWORD *)v21 + 2);
      v23 = *((_QWORD *)v21 + 3);
      v96 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v96 & 1) != 0)
        goto LABEL_51;
    }
    else
    {
      v23 = (*v226)[39];
      v24 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v24 & 1) != 0)
        goto LABEL_51;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
      if (object[24] && (object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_51:
    if (byte_254A4A4F8[23] >= 0)
      v97 = byte_254A4A4F8;
    else
      v97 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v98 = byte_254A4A4F8[23];
    else
      v98 = *(_QWORD *)&byte_254A4A4F8[8];
    *(_QWORD *)object = os_log_create(v97, v22);
    v99 = &object[8];
    if (v98 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v98 >= 0x17)
    {
      v100 = v16;
      v101 = (v98 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v98 | 7) != 0x17)
        v101 = v98 | 7;
      v102 = v101 + 1;
      v99 = operator new(v101 + 1);
      *(_QWORD *)&object[16] = v98;
      *(_QWORD *)&object[24] = v102 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v99;
      v16 = v100;
    }
    else
    {
      object[31] = v98;
      if (!v98)
      {
LABEL_65:
        v99[v98] = 0;
        object[32] = 1;
        p_p = &__p;
        if (v23 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v23 >= 0x17)
        {
          v104 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v23 | 7) != 0x17)
            v104 = v23 | 7;
          v105 = v104 + 1;
          p_p = operator new(v104 + 1);
          *(_QWORD *)&__p.f64[1] = v23;
          *(_QWORD *)&v242.f64[0] = v105 | 0x8000000000000000;
          *(_QWORD *)&__p.f64[0] = p_p;
        }
        else
        {
          HIBYTE(v242.f64[0]) = v23;
          if (!v23)
          {
LABEL_73:
            p_p[v23] = 0;
            LOBYTE(v242.f64[1]) = 1;
            v106 = *(NSObject **)object;
            if (SHIBYTE(v242.f64[0]) < 0)
              operator delete(*(void **)&__p.f64[0]);
            if (object[32] && (object[31] & 0x80000000) != 0)
              operator delete(*(void **)&object[8]);
            if (*(_QWORD *)object)
              os_release(*(void **)object);
            if (!v18 || !*(_QWORD *)(v18 + 24))
            {
              os_log_type_enabled(v106, OS_LOG_TYPE_DEBUG);
              *(_DWORD *)object = 136315138;
              *(_QWORD *)&object[4] = v20;
              v113 = (void *)_os_log_send_and_compose_impl();
              if (v113)
                free(v113);
              goto LABEL_154;
            }
            v107 = _os_log_pack_size();
            v108 = operator new(v107, (std::align_val_t)8uLL);
            v109 = (_QWORD *)operator new();
            *v109 = &off_24C9ABB80;
            v109[1] = 0;
            v109[2] = 0;
            v109[3] = v108;
            *(_QWORD *)v236 = v108;
            *(_QWORD *)&v236[8] = v108;
            *(_QWORD *)&v236[24] = 0;
            v237 = 0;
            *(_QWORD *)&v236[16] = v109;
            v110 = strlen(v20);
            if (v110 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            v111 = v110;
            if (v110 >= 0x17)
            {
              v114 = (v110 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v110 | 7) != 0x17)
                v114 = v110 | 7;
              v115 = v114 + 1;
              p_dst = (__int128 **)operator new(v114 + 1);
              *(_QWORD *)&v239 = v111;
              *((_QWORD *)&v239 + 1) = v115 | 0x8000000000000000;
              __dst = (__int128 *)p_dst;
            }
            else
            {
              HIBYTE(v239) = v110;
              p_dst = &__dst;
              if (!v110)
              {
LABEL_92:
                *((_BYTE *)p_dst + v111) = 0;
                v116 = __dst;
                *(_QWORD *)&v259 = v239;
                *(_QWORD *)((char *)&v259 + 7) = *(_QWORD *)((char *)&v239 + 7);
                v117 = HIBYTE(v239);
                v118 = operator new(0x38uLL);
                v118[1] = 0;
                v118[2] = 0;
                v118[3] = off_24C9ABC20;
                *v118 = &off_24C9ABBD0;
                v119 = v259;
                v118[4] = v116;
                v118[5] = v119;
                *(_QWORD *)((char *)v118 + 47) = *(_QWORD *)((char *)&v259 + 7);
                *((_BYTE *)v118 + 55) = v117;
                *(_QWORD *)&v259 = 0;
                *(_QWORD *)((char *)&v259 + 7) = 0;
                v120 = v237;
                *(_QWORD *)&v236[24] = v118 + 3;
                v237 = (std::__shared_weak_count *)v118;
                if (v120)
                {
                  p_shared_owners = (unint64_t *)&v120->__shared_owners_;
                  do
                    v122 = __ldaxr(p_shared_owners);
                  while (__stlxr(v122 - 1, p_shared_owners));
                  if (!v122)
                  {
                    ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
                    std::__shared_weak_count::__release_weak(v120);
                  }
                }
                *(_OWORD *)object = *(_OWORD *)v236;
                v123 = *(double *)&v236[24];
                *(_QWORD *)&object[16] = *(_QWORD *)&v236[16];
                if (*(_QWORD *)&v236[16])
                {
                  v124 = (unint64_t *)(*(_QWORD *)&v236[16] + 8);
                  do
                    v125 = __ldxr(v124);
                  while (__stxr(v125 + 1, v124));
                }
                v126 = v237;
                *(float64_t *)&object[24] = v123;
                *(_QWORD *)&object[32] = v237;
                if (v237)
                {
                  v127 = (unint64_t *)&v237->__shared_owners_;
                  do
                    v128 = __ldxr(v127);
                  while (__stxr(v128 + 1, v127));
                  __p.f64[0] = v123;
                  do
                    v129 = __ldaxr(v127);
                  while (__stlxr(v129 - 1, v127));
                  if (!v129)
                  {
                    ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
                    std::__shared_weak_count::__release_weak(v126);
                  }
                }
                else
                {
                  __p.f64[0] = v123;
                }
                v130 = *(std::__shared_weak_count **)&v236[16];
                if (*(_QWORD *)&v236[16])
                {
                  v131 = (unint64_t *)(*(_QWORD *)&v236[16] + 8);
                  do
                    v132 = __ldaxr(v131);
                  while (__stlxr(v132 - 1, v131));
                  if (!v132)
                  {
                    ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
                    std::__shared_weak_count::__release_weak(v130);
                  }
                }
                v133 = *(_QWORD *)object;
                if (*(char *)(*(_QWORD *)&__p.f64[0] + 31) >= 0)
                  v134 = *(_QWORD *)&__p.f64[0] + 8;
                else
                  v134 = *(_QWORD *)(*(_QWORD *)&__p.f64[0] + 8);
                v135 = _os_log_pack_fill();
                *(_DWORD *)v135 = 136315138;
                *(_QWORD *)(v135 + 4) = v134;
                v136 = operator new();
                v137 = v219[39];
                v138 = v218;
                if ((v137 & 0x80u) != 0)
                {
                  v138 = (const char *)*((_QWORD *)v219 + 2);
                  v137 = *((_QWORD *)v219 + 3);
                }
                *(_QWORD *)v136 = v133;
                *(_OWORD *)(v136 + 8) = *(_OWORD *)&object[8];
                *(_QWORD *)&object[8] = 0;
                *(_QWORD *)&object[16] = 0;
                *(_OWORD *)(v136 + 24) = *(_OWORD *)&object[24];
                *(_QWORD *)&object[24] = 0;
                *(_QWORD *)&object[32] = 0;
                *(_QWORD *)(v136 + 40) = v138;
                *(_QWORD *)(v136 + 48) = v137;
                *(_BYTE *)(v136 + 56) = 2;
                __dst = 0;
                *(_QWORD *)v236 = v136;
                (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v18 + 24) + 40))(*(_QWORD *)(v18 + 24), v236);
                v139 = *(_QWORD *)v236;
                *(_QWORD *)v236 = 0;
                if (v139)
                {
                  v140 = *(std::__shared_weak_count **)(v139 + 32);
                  if (v140)
                  {
                    v141 = (unint64_t *)&v140->__shared_owners_;
                    do
                      v142 = __ldaxr(v141);
                    while (__stlxr(v142 - 1, v141));
                    if (!v142)
                    {
                      ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
                      std::__shared_weak_count::__release_weak(v140);
                    }
                  }
                  v143 = *(std::__shared_weak_count **)(v139 + 16);
                  if (v143)
                  {
                    v144 = (unint64_t *)&v143->__shared_owners_;
                    do
                      v145 = __ldaxr(v144);
                    while (__stlxr(v145 - 1, v144));
                    if (!v145)
                    {
                      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
                      std::__shared_weak_count::__release_weak(v143);
                    }
                  }
                  MEMORY[0x212BC6398](v139, 0x10F0C40B62ED6C6);
                  v146 = __dst;
                  __dst = 0;
                  if (v146)
                  {
                    v147 = (std::__shared_weak_count *)*((_QWORD *)v146 + 4);
                    if (v147)
                    {
                      v148 = (unint64_t *)&v147->__shared_owners_;
                      do
                        v149 = __ldaxr(v148);
                      while (__stlxr(v149 - 1, v148));
                      if (!v149)
                      {
                        ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
                        std::__shared_weak_count::__release_weak(v147);
                      }
                    }
                    v150 = (std::__shared_weak_count *)*((_QWORD *)v146 + 2);
                    if (v150)
                    {
                      v151 = (unint64_t *)&v150->__shared_owners_;
                      do
                        v152 = __ldaxr(v151);
                      while (__stlxr(v152 - 1, v151));
                      if (!v152)
                      {
                        ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
                        std::__shared_weak_count::__release_weak(v150);
                      }
                    }
                    MEMORY[0x212BC6398](v146, 0x10F0C40B62ED6C6);
                  }
                }
                v153 = *(std::__shared_weak_count **)&object[32];
                if (*(_QWORD *)&object[32])
                {
                  v154 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                  do
                    v155 = __ldaxr(v154);
                  while (__stlxr(v155 - 1, v154));
                  if (!v155)
                  {
                    ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
                    std::__shared_weak_count::__release_weak(v153);
                  }
                }
                v156 = *(std::__shared_weak_count **)&object[16];
                if (*(_QWORD *)&object[16])
                {
                  v157 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                  do
                    v158 = __ldaxr(v157);
                  while (__stlxr(v158 - 1, v157));
                  if (!v158)
                  {
                    ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
                    std::__shared_weak_count::__release_weak(v156);
                  }
                }
LABEL_154:
                if (v16)
                {
                  if (*(char *)(a2 + 23) >= 0)
                    v159 = (const char *)a2;
                  else
                    v159 = *(const char **)a2;
                  sub_20E8C003C((uint64_t)&v226, "object_id (%s) already exists", v159);
                  sub_20E863570((uint64_t)&v226);
                }
                sub_20E863570((uint64_t)&v226);
                v160 = v234;
                if (v234)
                {
                  v161 = (unint64_t *)&v234->__shared_owners_;
                  do
                    v162 = __ldaxr(v161);
                  while (__stlxr(v162 - 1, v161));
                  if (!v162)
                  {
                    ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
                    std::__shared_weak_count::__release_weak(v160);
                  }
                }
                goto LABEL_164;
              }
            }
            memcpy(p_dst, v20, v111);
            goto LABEL_92;
          }
        }
        memmove(p_p, v22, v23);
        goto LABEL_73;
      }
    }
    memmove(v99, v97, v98);
    goto LABEL_65;
  }
  if (a3 && a3[8])
  {
    v239 = 0uLL;
    __dst = &v239;
    v25 = *(_QWORD *)a6;
    sub_20FCCC4A4(a3, a4, (_DWORD *)a6 + 2, a5, *(_QWORD *)a6, 1, (uint64_t)v236, a10);
    LODWORD(v226) = 0;
    v27 = v236[24];
    if (!v236[24] && *((_DWORD *)a6 + 2))
    {
      sub_20FCCC4A4(a3, a4, &v226, a5, v25, 1, (uint64_t)object, v26);
      *(_OWORD *)&v236[9] = *(_OWORD *)&object[9];
      *(_OWORD *)v236 = *(_OWORD *)object;
      v27 = object[24];
    }
    if (v27)
    {
      v28 = sub_20E9DF85C(a3 + 223, (uint64_t *)v236);
      if (v28)
      {
        v31 = v28[5];
        v32 = *(float64x2_t *)v31;
        _D3 = *(_QWORD *)(v31 + 40);
        v34 = *(float64x2_t *)(v31 + 24);
        _Q5.f64[0] = *(float64_t *)(v31 + 64);
        _Q6 = *(float64x2_t *)(v31 + 48);
        v36 = v28[9];
        v37 = *(double *)(v36 + 16);
        _Q7 = *(float64x2_t *)v36;
        v39 = *(double *)(v36 + 40);
        _Q17 = *(float64x2_t *)(v36 + 24);
        v41 = *(double *)(v36 + 64);
        _Q19 = *(float64x2_t *)(v36 + 48);
        v43 = (float64x2_t *)v28[11];
        v30.f64[0] = v43[1].f64[0];
        _Q21 = *v43;
        v45 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v32, v43->f64[0]), v34, *v43, 1), _Q6, v30.f64[0]);
        __asm { FMLA            D23, D3, V21.D[1] }
        v30.f64[0] = _D23 + _Q5.f64[0] * v30.f64[0];
        v50 = (float64x2_t *)v28[7];
        _Q21.f64[0] = v50[1].f64[0];
        *(_QWORD *)&v51 = *(_OWORD *)&vaddq_f64(v30, _Q21);
        v52 = vaddq_f64(v45, *v50);
        v53 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v32, _Q7.f64[0]), v34, _Q7, 1), _Q6, v37);
        __asm { FMLA            D23, D3, V7.D[1] }
        v55.f64[0] = _D23 + _Q5.f64[0] * v37;
        v56 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v32, _Q17.f64[0]), v34, _Q17, 1), _Q6, v39);
        __asm { FMLA            D23, D3, V17.D[1] }
        _Q17 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v32, _Q19.f64[0]), v34, _Q19, 1), _Q6, v41);
        __asm { FMLA            D1, D3, V19.D[1] }
        v60 = _D1 + _Q5.f64[0] * v41;
        v61 = (float64x2_t)vzip1q_s64(v53, v56);
        v62 = (float64x2_t)vzip2q_s64(v53, v56);
        v55.f64[1] = _D23 + _Q5.f64[0] * v39;
        v63 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v61, v52.f64[0]), v62, v52, 1), v55, v51);
        _Q6.f64[0] = v52.f64[1];
        __asm { FMLA            D5, D6, V17.D[1] }
        _Q5.f64[0] = vmlad_n_f64(_Q5.f64[0], v60, v51);
        *(_QWORD *)&_Q6.f64[0] = _Q17.i64[0];
        v64 = vextq_s8((int8x16_t)v62, (int8x16_t)vdupq_laneq_s64(_Q17, 1), 8uLL);
        *(_QWORD *)&v62.f64[1] = v64.i64[0];
        __asm { FMOV            V7.2D, #1.0 }
        *(_QWORD *)&_Q7.f64[0] = *(_OWORD *)&vnegq_f64(_Q5);
        v66 = a4[6];
        v255 = a4[7];
        v67 = a4[5];
        v252 = a4[4];
        v253 = v67;
        v254 = v66;
        v68 = a4[1];
        v248 = *a4;
        v249 = v68;
        v69 = a4[3];
        v250 = a4[2];
        v251 = v69;
        v257 = *a6;
        v258 = *((_QWORD *)a6 + 2);
        *(float64x2_t *)&object[24] = vmlsq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v61, v248.f64[0]), v62, v248, 1), v55, v249.f64[0]), v63, v249, 1);
        __p = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&_Q6.f64[0], v248.f64[0]), (float64x2_t)v64.u64[1], v248, 1), (float64x2_t)*(unint64_t *)&v60, v249.f64[0]), _Q7, v249, 1);
        v242 = vmlsq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v61, v250.f64[0]), v62, v250, 1), v55, v69.f64[0]), v63, v69, 1);
        v243 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&_Q6.f64[0], v250.f64[0]), (float64x2_t)v64.u64[1], v250, 1), (float64x2_t)*(unint64_t *)&v60, v69.f64[0]), _Q7, v69, 1);
        v244 = vmlsq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v61, v252.f64[0]), v62, v252, 1), v55, v67.f64[0]), v63, v67, 1);
        v245 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&_Q6.f64[0], v252.f64[0]), (float64x2_t)v64.u64[1], v252, 1), (float64x2_t)*(unint64_t *)&v60, v253.f64[0]), _Q7, v253, 1);
        v246 = vmlsq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v61, v254.f64[0]), v62, v254, 1), v55, v255.f64[0]), v63, v255, 1);
        v247 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&_Q6.f64[0], v254.f64[0]), (float64x2_t)v64.u64[1], v254, 1), (float64x2_t)*(unint64_t *)&v60, v255.f64[0]), _Q7, v255, 1);
        *(_OWORD *)object = *(_OWORD *)v236;
        *(_DWORD *)&object[20] = -1;
        *(_DWORD *)&object[16] = *(_DWORD *)&v236[16];
        v256 = 1;
        sub_20FCCAF7C((uint64_t)a1, a2, a2, (uint64_t)object);
        v70 = a1[12];
        if (v70 >= a1[13])
        {
          v95 = sub_20E8ADE68(a1 + 11, (__int128 *)a2);
        }
        else
        {
          if (*(char *)(a2 + 23) < 0)
          {
            sub_20E860C04((_BYTE *)a1[12], *(void **)a2, *(_QWORD *)(a2 + 8));
          }
          else
          {
            v71 = *(_OWORD *)a2;
            *(_QWORD *)(v70 + 16) = *(_QWORD *)(a2 + 16);
            *(_OWORD *)v70 = v71;
          }
          v95 = v70 + 24;
          a1[12] = v70 + 24;
        }
        a1[12] = v95;
        LOBYTE(v223) = 0;
        v224 = 0;
        v221 = *(_OWORD *)v236;
        v87 = 1;
        v222 = 1;
        sub_20FCC63C4((uint64_t)a1, a2, &v223, (uint64_t)&v221);
        goto LABEL_259;
      }
      sub_20FCC62D0(&v225);
      if (**(int **)(v225 + 56) <= 4)
      {
        v88 = *(unsigned __int8 *)(v225 + 72);
        v89 = sub_20E8C31DC(v225, "OSLogSurrogateAppender", 1, 0);
        v90 = v89 ? v89 + 16 : 0;
        if (v88 || v89)
        {
          v226 = (char **)&v225;
          rep = std::chrono::steady_clock::now().__d_.__rep_;
          v228 = std::chrono::system_clock::now().__d_.__rep_;
          v229 = 4;
          v230 = "unknown file";
          v231 = 68;
          v233 = 0;
          v234 = 0;
          v232 = "unknown function";
          v91 = *v226;
          v92 = (uint64_t *)(*v226 + 16);
          if ((*v226)[39] < 0)
          {
            v94 = (char *)*((_QWORD *)v91 + 2);
            v93 = (char *)*((_QWORD *)v91 + 3);
          }
          else
          {
            v93 = (char *)(*v226)[39];
            v94 = *v226 + 16;
          }
          category[0] = v94;
          category[1] = v93;
          v214 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v214 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)object);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
            if (object[24] && (object[23] & 0x80000000) != 0)
              operator delete(*(void **)object);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
          v215 = byte_254A4A4F8[23];
          if (byte_254A4A4F8[23] >= 0)
          {
            v216 = byte_254A4A4F8;
          }
          else
          {
            v215 = *(_QWORD *)&byte_254A4A4F8[8];
            v216 = *(const char **)byte_254A4A4F8;
          }
          *(_QWORD *)&v259 = v216;
          *((_QWORD *)&v259 + 1) = v215;
          *(_QWORD *)object = os_log_create(v216, category[0]);
          sub_20E86E5A8(&object[8], (uint64_t)&v259);
          sub_20E86E5A8(&__p, (uint64_t)category);
          v217 = *(NSObject **)object;
          sub_20E86E44C((uint64_t)object);
          sub_20FCCB614(v90, v92, v217, OS_LOG_TYPE_ERROR);
          if (v88)
          {
            sub_20E8C003C((uint64_t)&v226, "Failed to find the projection ref of the keyframe");
            sub_20E863570((uint64_t)&v226);
          }
          sub_20E863714((uint64_t)&v226);
        }
      }
LABEL_258:
      v87 = 0;
LABEL_259:
      sub_20E86872C((uint64_t)&__dst, (_QWORD *)v239);
      v163 = v87;
      return v87 | (v163 << 8);
    }
    sub_20FCC62D0(&v225);
    if (**(int **)(v225 + 56) > 4)
      goto LABEL_258;
    v80 = *(unsigned __int8 *)(v225 + 72);
    v81 = sub_20E8C31DC(v225, "OSLogSurrogateAppender", 1, 0);
    v82 = v81;
    if (!v80 && !v81)
      goto LABEL_258;
    v226 = (char **)&v225;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v228 = std::chrono::system_clock::now().__d_.__rep_;
    v229 = 4;
    v230 = "unknown file";
    v231 = 61;
    v233 = 0;
    v234 = 0;
    v232 = "unknown function";
    v83 = *v226;
    if ((*v226)[39] < 0)
    {
      v85 = (const char *)*((_QWORD *)v83 + 2);
      v84 = *((_QWORD *)v83 + 3);
    }
    else
    {
      v84 = (*v226)[39];
      v85 = *v226 + 16;
    }
    v220 = (uint64_t)(*v226 + 16);
    v165 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v165 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
      if (object[24] && (object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v166 = byte_254A4A4F8;
    else
      v166 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v167 = byte_254A4A4F8[23];
    else
      v167 = *(_QWORD *)&byte_254A4A4F8[8];
    *(_QWORD *)object = os_log_create(v166, v85);
    v168 = &object[8];
    if (v167 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v167 >= 0x17)
    {
      v169 = v82;
      v170 = v85;
      v171 = v83;
      v172 = v80;
      v173 = (v167 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v167 | 7) != 0x17)
        v173 = v167 | 7;
      v174 = v173 + 1;
      v168 = operator new(v173 + 1);
      *(_QWORD *)&object[16] = v167;
      *(_QWORD *)&object[24] = v174 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v168;
      v80 = v172;
      v83 = v171;
      v85 = v170;
      v82 = v169;
    }
    else
    {
      object[31] = v167;
      if (!v167)
      {
LABEL_183:
        v168[v167] = 0;
        object[32] = 1;
        v175 = (__int128 *)&__p;
        if (v84 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v84 >= 0x17)
        {
          v176 = (v84 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v84 | 7) != 0x17)
            v176 = v84 | 7;
          v177 = v176 + 1;
          v175 = (__int128 *)operator new(v176 + 1);
          *(_QWORD *)&__p.f64[1] = v84;
          *(_QWORD *)&v242.f64[0] = v177 | 0x8000000000000000;
          *(_QWORD *)&__p.f64[0] = v175;
        }
        else
        {
          HIBYTE(v242.f64[0]) = v84;
          if (!v84)
            goto LABEL_191;
        }
        memmove(v175, v85, v84);
LABEL_191:
        *((_BYTE *)v175 + v84) = 0;
        LOBYTE(v242.f64[1]) = 1;
        v178 = *(NSObject **)object;
        if (SHIBYTE(v242.f64[0]) < 0)
          operator delete(*(void **)&__p.f64[0]);
        if (object[32] && (object[31] & 0x80000000) != 0)
          operator delete(*(void **)&object[8]);
        if (*(_QWORD *)object)
          os_release(*(void **)object);
        if (v82 && *(_QWORD *)(v82 + 24))
        {
          v179 = _os_log_pack_size();
          v180 = (std::__shared_weak_count_vtbl *)operator new(v179, (std::align_val_t)8uLL);
          v181 = (std::__shared_weak_count *)operator new();
          v182 = v181;
          v181->__shared_owners_ = 0;
          v183 = (unint64_t *)&v181->__shared_owners_;
          v181->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v181->__shared_weak_owners_ = 0;
          v181[1].__vftable = v180;
          *(_QWORD *)object = v180;
          *(_QWORD *)&object[8] = v180;
          *(_QWORD *)&object[16] = v181;
          do
            v184 = __ldxr(v183);
          while (__stxr(v184 + 1, v183));
          *(_QWORD *)&object[24] = 0;
          *(_QWORD *)&object[32] = 0;
          __p.f64[0] = 0.0;
          do
            v185 = __ldaxr(v183);
          while (__stlxr(v185 - 1, v183));
          if (!v185)
          {
            ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
            std::__shared_weak_count::__release_weak(v182);
          }
          v186 = *(_QWORD *)object;
          *(_WORD *)_os_log_pack_fill() = 0;
          v187 = operator new();
          v188 = v83[39];
          v189 = v220;
          if ((v188 & 0x80u) != 0)
          {
            v189 = *((_QWORD *)v83 + 2);
            v188 = *((_QWORD *)v83 + 3);
          }
          *(_QWORD *)v187 = v186;
          *(_OWORD *)(v187 + 8) = *(_OWORD *)&object[8];
          *(_QWORD *)&object[8] = 0;
          *(_QWORD *)&object[16] = 0;
          *(_OWORD *)(v187 + 24) = *(_OWORD *)&object[24];
          *(_QWORD *)&object[24] = 0;
          *(_QWORD *)&object[32] = 0;
          *(_QWORD *)(v187 + 40) = v189;
          *(_QWORD *)(v187 + 48) = v188;
          *(_BYTE *)(v187 + 56) = 16;
          category[0] = 0;
          *(_QWORD *)&v259 = v187;
          (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v82 + 24) + 40))(*(_QWORD *)(v82 + 24), &v259);
          v190 = v259;
          *(_QWORD *)&v259 = 0;
          if (v190)
          {
            v191 = *(std::__shared_weak_count **)(v190 + 32);
            if (v191)
            {
              v192 = (unint64_t *)&v191->__shared_owners_;
              do
                v193 = __ldaxr(v192);
              while (__stlxr(v193 - 1, v192));
              if (!v193)
              {
                ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
                std::__shared_weak_count::__release_weak(v191);
              }
            }
            v194 = *(std::__shared_weak_count **)(v190 + 16);
            if (v194)
            {
              v195 = (unint64_t *)&v194->__shared_owners_;
              do
                v196 = __ldaxr(v195);
              while (__stlxr(v196 - 1, v195));
              if (!v196)
              {
                ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
                std::__shared_weak_count::__release_weak(v194);
              }
            }
            MEMORY[0x212BC6398](v190, 0x10F0C40B62ED6C6);
            v197 = category[0];
            category[0] = 0;
            if (v197)
            {
              v198 = (std::__shared_weak_count *)*((_QWORD *)v197 + 4);
              if (v198)
              {
                v199 = (unint64_t *)&v198->__shared_owners_;
                do
                  v200 = __ldaxr(v199);
                while (__stlxr(v200 - 1, v199));
                if (!v200)
                {
                  ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
                  std::__shared_weak_count::__release_weak(v198);
                }
              }
              v201 = (std::__shared_weak_count *)*((_QWORD *)v197 + 2);
              if (v201)
              {
                v202 = (unint64_t *)&v201->__shared_owners_;
                do
                  v203 = __ldaxr(v202);
                while (__stlxr(v203 - 1, v202));
                if (!v203)
                {
                  ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
                  std::__shared_weak_count::__release_weak(v201);
                }
              }
              MEMORY[0x212BC6398](v197, 0x10F0C40B62ED6C6);
            }
          }
          v204 = *(std::__shared_weak_count **)&object[32];
          if (*(_QWORD *)&object[32])
          {
            v205 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
            do
              v206 = __ldaxr(v205);
            while (__stlxr(v206 - 1, v205));
            if (!v206)
            {
              ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
              std::__shared_weak_count::__release_weak(v204);
            }
          }
          v207 = *(std::__shared_weak_count **)&object[16];
          if (*(_QWORD *)&object[16])
          {
            v208 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
            do
              v209 = __ldaxr(v208);
            while (__stlxr(v209 - 1, v208));
            if (!v209)
            {
              ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
              std::__shared_weak_count::__release_weak(v207);
            }
          }
        }
        else
        {
          os_log_type_enabled(v178, OS_LOG_TYPE_ERROR);
          *(_WORD *)object = 0;
          v210 = (void *)_os_log_send_and_compose_impl();
          if (v210)
            free(v210);
        }
        if (v80)
        {
          sub_20E8C003C((uint64_t)&v226, "Failed to find the anchor base keyframe");
          sub_20E863570((uint64_t)&v226);
        }
        sub_20E863570((uint64_t)&v226);
        v211 = v234;
        if (v234)
        {
          v212 = (unint64_t *)&v234->__shared_owners_;
          do
            v213 = __ldaxr(v212);
          while (__stlxr(v213 - 1, v212));
          if (!v213)
          {
            ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
            std::__shared_weak_count::__release_weak(v211);
          }
        }
        goto LABEL_258;
      }
    }
    memmove(v168, v166, v167);
    goto LABEL_183;
  }
  v72 = a4[6];
  v255 = a4[7];
  v73 = a4[5];
  v252 = a4[4];
  v253 = v73;
  v254 = v72;
  v74 = a4[1];
  v248 = *a4;
  v249 = v74;
  v75 = a4[3];
  v250 = a4[2];
  v251 = v75;
  v257 = *a6;
  v244 = (float64x2_t)xmmword_2103BC920;
  v245 = (float64x2_t)unk_2103BC930;
  v246 = (float64x2_t)xmmword_2103BC940;
  v247 = (float64x2_t)unk_2103BC950;
  *(_OWORD *)&object[24] = xmmword_2103BC8E0;
  __p = *(float64x2_t *)algn_2103BC8F0;
  v242 = (float64x2_t)xmmword_2103BC900;
  v256 = 0;
  v258 = *((_QWORD *)a6 + 2);
  memset(object, 255, 24);
  v243 = *(float64x2_t *)dbl_2103BC910;
  sub_20FCCAF7C((uint64_t)a1, a2, a2, (uint64_t)object);
  v76 = a1[9];
  if (v76 < a1[10])
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_20E860C04((_BYTE *)a1[9], *(void **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      v77 = *(_OWORD *)a2;
      *(_QWORD *)(v76 + 16) = *(_QWORD *)(a2 + 16);
      *(_OWORD *)v76 = v77;
    }
    a1[9] = v76 + 24;
    a1[9] = v76 + 24;
    v78 = a1[12];
    if (v78 >= a1[13])
      goto LABEL_37;
LABEL_28:
    if (*(char *)(a2 + 23) < 0)
    {
      sub_20E860C04((_BYTE *)v78, *(void **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      v79 = *(_OWORD *)a2;
      *(_QWORD *)(v78 + 16) = *(_QWORD *)(a2 + 16);
      *(_OWORD *)v78 = v79;
    }
    v86 = v78 + 24;
    a1[12] = v78 + 24;
    goto LABEL_40;
  }
  a1[9] = sub_20E8ADE68(a1 + 8, (__int128 *)a2);
  v78 = a1[12];
  if (v78 < a1[13])
    goto LABEL_28;
LABEL_37:
  v86 = sub_20E8ADE68(a1 + 11, (__int128 *)a2);
LABEL_40:
  a1[12] = v86;
  v87 = 1;
LABEL_165:
  v163 = 1;
  return v87 | (v163 << 8);
}

