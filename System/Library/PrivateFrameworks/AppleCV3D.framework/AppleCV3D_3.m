void sub_20E95FF94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_20E8C25A8((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_20E95FFA8(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  sub_20E86665C(v3 - 248);
  sub_20E86665C(v3 - 208);
  sub_20E91E748(v2);
  sub_20E91E690(v1);
  _Unwind_Resume(a1);
}

void sub_20E95FFD4(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  sub_20E91E748(v2);
  sub_20E91E690(v1);
  _Unwind_Resume(a1);
}

void sub_20E95FFF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E91E690(v1);
  _Unwind_Resume(a1);
}

void sub_20E960004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  void *v36;

  operator delete(v36);
  if (a36 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20E96006C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_20E8C25A8((uint64_t)&a31);
  _Unwind_Resume(a1);
}

uint64_t sub_20E960080(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;

  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  sub_20E969B50(a1 + 40, (uint64_t)a2 + 40);
  *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
  sub_20E96A108(a1 + 88, (uint64_t)a2 + 88);
  sub_20E96A108(a1 + 128, (uint64_t)(a2 + 8));
  *(_BYTE *)(a1 + 168) = *((_BYTE *)a2 + 168);
  return a1;
}

void sub_20E960100(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;
  void **v3;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;

  v5 = *(_QWORD **)(v2 + 104);
  if (v5)
  {
    do
    {
      v6 = (_QWORD *)*v5;
      operator delete(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = *v3;
  *v3 = 0;
  if (v7)
    operator delete(v7);
  v8 = *(_QWORD **)(v2 + 56);
  if (v8)
  {
    do
    {
      v10 = (_QWORD *)*v8;
      v11 = (_QWORD *)v8[6];
      if (v11)
      {
        do
        {
          v12 = (_QWORD *)*v11;
          operator delete(v11);
          v11 = v12;
        }
        while (v12);
      }
      v13 = (void *)v8[4];
      v8[4] = 0;
      if (v13)
        operator delete(v13);
      operator delete(v8);
      v8 = v10;
    }
    while (v10);
  }
  v9 = *v1;
  *v1 = 0;
  if (v9)
    operator delete(v9);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E960194(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  std::__shared_weak_count_vtbl *v4;
  __int128 v5;
  int8x16_t v6;
  std::__shared_weak_count *v7;
  CFUUIDRef v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int Orientation;
  char v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  int64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _BYTE *v32;
  _QWORD *v33;
  uint64_t v34;
  int64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD *v42;
  __int128 *v43;
  uint64_t v44;
  __int128 v45;
  float32x2_t *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  unint64_t *v51;
  unint64_t *v52;
  float v53;
  float v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  const double *v75;
  double *v76;
  uint64_t v77;
  const double *v78;
  double *v79;
  unint64_t v80;
  char *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  void *v103;
  void *v104;
  uint64_t v105;
  char *v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  char *v110;
  char *v111;
  void *v112;
  int v115;
  int v116;
  int8x16_t v117;
  unint64_t v118;
  __int128 v119;
  uint64_t v120;
  void *v121[2];
  void *v122;
  CFUUIDRef uuid;
  std::__shared_weak_count *v124;
  void *__p;
  char *v126;
  char *v127;
  CFUUIDBytes v128;
  unint64_t v129;
  __int128 v130;
  _BYTE v131[24];
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  char v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  char v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  uint64_t v148;
  __int128 v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char v158;
  CFUUIDBytes v159;
  unint64_t v160;
  char v161;
  CFUUIDBytes v162;
  unint64_t v163;
  char v164;
  __int128 v165;
  uint64_t v166;
  char v167;
  __int16 v168;
  uint64_t v169;
  float64x2x2_t v170;
  float64x2x2_t v171;

  v169 = *MEMORY[0x24BDAC8D0];
  v1 = CV3DPlaneDetectionPlaneListLength();
  if (!v1)
    return 1;
  v2 = v1;
  v121[0] = 0;
  v121[1] = 0;
  v122 = 0;
  sub_20E960EB0((char **)v121, v1);
  v3 = 0;
  v116 = *MEMORY[0x24BE7CFF8];
  v115 = *MEMORY[0x24BE7D000];
  v118 = v2;
  while (2)
  {
    if (!CV3DPlaneDetectionPlaneAtIndex())
      goto LABEL_3;
    v4 = (std::__shared_weak_count_vtbl *)CV3DPlaneDetectionPlaneCopyUUID();
    sub_20EA68D1C((std::__shared_weak_count_vtbl **)&uuid, v4, 0);
    CV3DPlaneDetectionPlaneSupport();
    v119 = v5;
    CV3DPlaneDetectionPlaneNormal();
    v117 = v6;
    v8 = uuid;
    v7 = v124;
    if (!v124)
      goto LABEL_10;
    p_shared_owners = (unint64_t *)&v124->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if (!v8)
      {
LABEL_11:
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Foundation/src/UUIDRef.cpp", 61, (uint64_t)"IsValid()", 9, (uint64_t)&unk_21024EC5A, 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
      }
    }
    else
    {
LABEL_10:
      if (!v8)
        goto LABEL_11;
    }
    v128 = CFUUIDGetUUIDBytes(uuid);
    *(_QWORD *)&v130 = sub_20EA68D10((uint64_t)&v128);
    *((_QWORD *)&v130 + 1) = v12;
    v13 = v119;
    HIDWORD(v13) = v117.i32[0];
    *(_OWORD *)v131 = v13;
    *(_QWORD *)&v131[16] = vextq_s8(v117, v117, 4uLL).u64[0];
    CV3DPlaneDetectionPlaneTransformationToWorld();
    v132 = v14;
    v133 = v15;
    v134 = v16;
    v135 = v17;
    Orientation = CV3DPlaneDetectionPlaneGetOrientation();
    if (v115 == Orientation)
      v19 = 2;
    else
      v19 = 4;
    if (v116 == Orientation)
      v19 = 1;
    LOBYTE(v136) = v19;
    HIDWORD(v136) = 0;
    v137 = 0;
    v144 = 0;
    LODWORD(v145) = CV3DPlaneDetectionPlaneAge();
    LOBYTE(v147) = 0;
    LOBYTE(v148) = 0;
    v153 = 0;
    LOBYTE(v154) = 0;
    v158 = 0;
    *((_QWORD *)&v145 + 1) = 0;
    *(_QWORD *)&v146 = 0;
    DWORD2(v146) = 0;
    v150 = 0;
    v149 = 0uLL;
    LOBYTE(v151) = 0;
    v120 = v3;
    if (!CV3DPlaneDetectionPlaneConvexHull2D() || (v20 = CV3DPlaneDetectionConvexHullPointsNum(), (v21 = v20) == 0))
    {
      v159.byte0 = 0;
      v161 = 0;
      goto LABEL_56;
    }
    __p = 0;
    v126 = 0;
    v127 = 0;
    if (v20 >> 61)
      sub_20E969238();
    __p = operator new(8 * v20);
    v126 = (char *)__p;
    v127 = (char *)__p + 8 * v21;
    v22 = CV3DPlaneDetectionConvexHullPointsRawPtr();
    v23 = 0;
    v24 = v126;
    do
    {
      while (1)
      {
        v25 = *(_QWORD *)(v22 + 8 * v23);
        if (v24 >= v127)
          break;
        *(_QWORD *)v24 = v25;
        v24 += 8;
        v126 = v24;
        if (++v23 == v21)
          goto LABEL_52;
      }
      v26 = (char *)__p;
      v27 = v24 - (_BYTE *)__p;
      v28 = (v24 - (_BYTE *)__p) >> 3;
      v29 = v28 + 1;
      if ((unint64_t)(v28 + 1) >> 61)
        sub_20E969238();
      v30 = v127 - (_BYTE *)__p;
      if ((v127 - (_BYTE *)__p) >> 2 > v29)
        v29 = v30 >> 2;
      if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
        v31 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v31 = v29;
      if (v31)
      {
        if (v31 >> 61)
          sub_20E877A38();
        v32 = operator new(8 * v31);
        v33 = &v32[8 * v28];
        *v33 = v25;
        v34 = (uint64_t)(v33 + 1);
        v35 = v24 - v26;
        if (v24 != v26)
        {
LABEL_34:
          v36 = v35 - 8;
          if (v36 < 0x168
            || (v39 = (v24 - 8 - v26) & 0xFFFFFFFFFFFFFFF8, &v32[v27 - 8 - v39] > &v32[v27 - 8])
            || &v24[-v39 - 8] > v24 - 8
            || (unint64_t)(v24 - v32 - v27) < 0x20)
          {
            v37 = v24;
            v2 = v118;
            v3 = v120;
          }
          else
          {
            v40 = (v36 >> 3) + 1;
            v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
            v37 = &v24[-v41];
            v33 = (_QWORD *)((char *)v33 - v41);
            v42 = &v32[8 * v28 - 16];
            v43 = (__int128 *)(v24 - 16);
            v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
            v3 = v120;
            do
            {
              v45 = *v43;
              *(v42 - 1) = *(v43 - 1);
              *v42 = v45;
              v42 -= 2;
              v43 -= 2;
              v44 -= 4;
            }
            while (v44);
            v2 = v118;
            if (v40 == (v40 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_37:
              v24 = (char *)__p;
              __p = v33;
              v127 = &v32[8 * v31];
              if (!v24)
                goto LABEL_39;
LABEL_38:
              operator delete(v24);
              goto LABEL_39;
            }
          }
          do
          {
            v38 = *((_QWORD *)v37 - 1);
            v37 -= 8;
            *--v33 = v38;
          }
          while (v37 != v26);
          goto LABEL_37;
        }
      }
      else
      {
        v32 = 0;
        v33 = (_QWORD *)(8 * v28);
        *(_QWORD *)(8 * v28) = v25;
        v34 = 8 * v28 + 8;
        v35 = v24 - v26;
        if (v24 != v26)
          goto LABEL_34;
      }
      v2 = v118;
      v3 = v120;
      __p = v33;
      v127 = &v32[8 * v31];
      if (v24)
        goto LABEL_38;
LABEL_39:
      v24 = (char *)v34;
      v126 = (char *)v34;
      ++v23;
    }
    while (v23 != v21);
LABEL_52:
    v46 = (float32x2_t *)__p;
    if (!__p
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    sub_20FDC59E8((v24 - (char *)v46) >> 3, v46, (uint64_t)&v128);
    v159 = v128;
    v160 = v129;
    v161 = 1;
    if (__p)
    {
      v126 = (char *)__p;
      operator delete(__p);
    }
LABEL_56:
    v47 = CV3DPlaneDetectionExtentGridLength();
    v48 = v47;
    if (!v47)
    {
      v162.byte0 = 0;
      v164 = 0;
      LOBYTE(v165) = 0;
      v167 = 0;
      v168 = 0;
      v82 = v124;
      if (!v124)
        goto LABEL_97;
      goto LABEL_94;
    }
    v128 = (CFUUIDBytes)0;
    v129 = 0;
    if (v47 >> 60)
      sub_20E969238();
    v49 = 0;
    *(_QWORD *)&v128.byte0 = operator new(16 * v47);
    *(_QWORD *)&v128.byte8 = *(_QWORD *)&v128.byte0;
    v129 = *(_QWORD *)&v128.byte0 + 16 * v48;
    while (2)
    {
      if (CV3DPlaneDetectionExtentGridAtIndex())
      {
        v51 = (unint64_t *)CV3DPlaneDetectionAlignedBoundingBoxMin();
        v52 = (unint64_t *)CV3DPlaneDetectionAlignedBoundingBoxMax();
        LODWORD(v53) = HIDWORD(*v51);
        LODWORD(v54) = HIDWORD(*v52);
        v55 = *v51 & 0xFFFFFFFF00000000 | *v52;
        v56 = *v52 & 0xFFFFFFFF00000000 | *v51;
        if (COERCE_FLOAT(*v51) <= COERCE_FLOAT(*v52))
        {
          v56 = *v52;
          v55 = *v51;
        }
        if (v53 <= v54)
          v57 = v56;
        else
          v57 = *v51 & 0xFFFFFFFF00000000 | v56;
        if (v53 <= v54)
          v58 = v55;
        else
          v58 = *v52 & 0xFFFFFFFF00000000 | v55;
        v59 = *(_QWORD *)&v128.byte8;
        if (*(_QWORD *)&v128.byte8 < v129)
        {
          **(_QWORD **)&v128.byte8 = v58;
          *(_QWORD *)(v59 + 8) = v57;
          v50 = (_QWORD *)(v59 + 16);
          v3 = v120;
        }
        else
        {
          v60 = *(void **)&v128.byte0;
          v61 = *(_QWORD *)&v128.byte8 - *(_QWORD *)&v128.byte0;
          v62 = (uint64_t)(*(_QWORD *)&v128.byte8 - *(_QWORD *)&v128.byte0) >> 4;
          v63 = v62 + 1;
          if ((unint64_t)(v62 + 1) >> 60)
            sub_20E969238();
          v64 = v129 - *(_QWORD *)&v128.byte0;
          if ((uint64_t)(v129 - *(_QWORD *)&v128.byte0) >> 3 > v63)
            v63 = v64 >> 3;
          if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF0)
            v65 = 0xFFFFFFFFFFFFFFFLL;
          else
            v65 = v63;
          if (v65 >> 60)
            sub_20E877A38();
          v66 = (char *)operator new(16 * v65);
          v67 = (unint64_t *)&v66[16 * v62];
          *v67 = v58;
          v67[1] = v57;
          v68 = v59 - (_QWORD)v60;
          if ((void *)v59 == v60)
          {
            v70 = (unint64_t *)&v66[16 * v62];
            v2 = v118;
            v3 = v120;
          }
          else
          {
            v69 = v68 - 16;
            v2 = v118;
            v3 = v120;
            if (v68 - 16 < 0xB0)
            {
              v70 = v67;
              goto LABEL_88;
            }
            v71 = (v59 - 16 - (_QWORD)v60) & 0xFFFFFFFFFFFFFFF0;
            if ((unint64_t)&v66[v61 - v71 - 16] < v59)
            {
              v70 = v67;
              if (v59 - 16 - v71 < (unint64_t)v67)
                goto LABEL_150;
            }
            v72 = (v69 >> 4) + 1;
            v73 = 16 * (v72 & 0x1FFFFFFFFFFFFFFCLL);
            v74 = v59 - v73;
            v70 = &v67[v73 / 0xFFFFFFFFFFFFFFF8];
            v75 = (const double *)(v59 - 32);
            v76 = (double *)(v67 - 4);
            v77 = v72 & 0x1FFFFFFFFFFFFFFCLL;
            do
            {
              v170 = vld2q_f64(v75);
              v78 = v75 - 4;
              v171 = vld2q_f64(v78);
              vst2q_f64(v76, v170);
              v79 = v76 - 4;
              vst2q_f64(v79, v171);
              v76 -= 8;
              v75 -= 8;
              v77 -= 4;
            }
            while (v77);
            v59 = v74;
            if (v72 != (v72 & 0x1FFFFFFFFFFFFFFCLL))
            {
LABEL_150:
              do
              {
LABEL_88:
                v80 = *(_QWORD *)(v59 - 16);
                v59 -= 16;
                *(v70 - 2) = v80;
                v70 -= 2;
                v70[1] = *(_QWORD *)(v59 + 8);
              }
              while ((void *)v59 != v60);
            }
          }
          v81 = &v66[16 * v65];
          v50 = v67 + 2;
          *(_QWORD *)&v128.byte0 = v70;
          v129 = (unint64_t)v81;
          if (v60)
            operator delete(v60);
        }
        *(_QWORD *)&v128.byte8 = v50;
      }
      if (++v49 != v48)
        continue;
      break;
    }
    v162 = v128;
    v163 = v129;
    v164 = 1;
    LOBYTE(v165) = 0;
    v167 = 0;
    v168 = 0;
    v82 = v124;
    if (!v124)
      goto LABEL_97;
LABEL_94:
    v83 = (unint64_t *)&v82->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (v84)
    {
LABEL_97:
      v85 = (char *)v121[1];
      if (v121[1] < v122)
        goto LABEL_98;
LABEL_112:
      v98 = (void *)sub_20E96ADA4(v121, (uint64_t)&v130);
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
      v85 = (char *)v121[1];
      if (v121[1] >= v122)
        goto LABEL_112;
LABEL_98:
      *(_OWORD *)v85 = v130;
      v86 = *(_QWORD *)v131;
      *((_DWORD *)v85 + 6) = *(_DWORD *)&v131[8];
      *((_QWORD *)v85 + 2) = v86;
      v87 = *(_QWORD *)&v131[12];
      *((_DWORD *)v85 + 9) = *(_DWORD *)&v131[20];
      *(_QWORD *)(v85 + 28) = v87;
      v88 = v132;
      v89 = v133;
      v90 = v134;
      *(_OWORD *)(v85 + 88) = v135;
      *(_OWORD *)(v85 + 72) = v90;
      *(_OWORD *)(v85 + 56) = v89;
      *(_OWORD *)(v85 + 40) = v88;
      *((_QWORD *)v85 + 13) = v136;
      v85[112] = 0;
      v85[216] = 0;
      if (v144)
      {
        v85[112] = v137;
        v91 = v138;
        *(_OWORD *)(v85 + 136) = v139;
        *(_OWORD *)(v85 + 120) = v91;
        v92 = v140;
        v93 = v141;
        v94 = v142;
        *(_OWORD *)(v85 + 200) = v143;
        *(_OWORD *)(v85 + 184) = v94;
        *(_OWORD *)(v85 + 168) = v93;
        *(_OWORD *)(v85 + 152) = v92;
        v85[216] = 1;
      }
      v95 = v145;
      v96 = v146;
      v97 = v147;
      *((_QWORD *)v85 + 34) = v148;
      *((_OWORD *)v85 + 15) = v96;
      *((_OWORD *)v85 + 16) = v97;
      *((_OWORD *)v85 + 14) = v95;
      *((_QWORD *)v85 + 36) = 0;
      *((_QWORD *)v85 + 37) = 0;
      *((_QWORD *)v85 + 35) = 0;
      *(_OWORD *)(v85 + 280) = v149;
      *((_QWORD *)v85 + 37) = v150;
      v149 = 0uLL;
      v150 = 0;
      v85[304] = 0;
      v85[320] = 0;
      if (v153)
      {
        *((_QWORD *)v85 + 38) = v151;
        *((_QWORD *)v85 + 39) = v152;
        v85[320] = 1;
      }
      v85[324] = 0;
      v85[356] = 0;
      if (v158)
      {
        *(_QWORD *)(v85 + 324) = v154;
        *(_QWORD *)(v85 + 332) = v155;
        *(_QWORD *)(v85 + 340) = v156;
        *(_QWORD *)(v85 + 348) = v157;
        v85[356] = 1;
      }
      v85[360] = 0;
      v85[384] = 0;
      if (v161)
      {
        *((_QWORD *)v85 + 45) = 0;
        *((_QWORD *)v85 + 46) = 0;
        *((_QWORD *)v85 + 47) = 0;
        *(CFUUIDBytes *)(v85 + 360) = v159;
        *((_QWORD *)v85 + 47) = v160;
        v159 = (CFUUIDBytes)0;
        v160 = 0;
        v85[384] = 1;
      }
      v85[392] = 0;
      v85[416] = 0;
      if (v164)
      {
        *((_QWORD *)v85 + 49) = 0;
        *((_QWORD *)v85 + 50) = 0;
        *((_QWORD *)v85 + 51) = 0;
        *(CFUUIDBytes *)(v85 + 392) = v162;
        *((_QWORD *)v85 + 51) = v163;
        v162 = (CFUUIDBytes)0;
        v163 = 0;
        v85[416] = 1;
      }
      v85[424] = 0;
      v85[448] = 0;
      if (v167)
      {
        *((_QWORD *)v85 + 53) = 0;
        *((_QWORD *)v85 + 54) = 0;
        *((_QWORD *)v85 + 55) = 0;
        *(_OWORD *)(v85 + 424) = v165;
        *((_QWORD *)v85 + 55) = v166;
        v165 = 0uLL;
        v166 = 0;
        v85[448] = 1;
      }
      *((_WORD *)v85 + 228) = v168;
      v98 = v85 + 464;
    }
    v121[1] = v98;
    if (v167)
    {
      v99 = v165;
      if ((_QWORD)v165)
      {
        v100 = *((_QWORD *)&v165 + 1);
        v101 = (void *)v165;
        if (*((_QWORD *)&v165 + 1) != (_QWORD)v165)
        {
          v102 = *((_QWORD *)&v165 + 1);
          do
          {
            v104 = *(void **)(v102 - 24);
            v102 -= 24;
            v103 = v104;
            if (v104)
            {
              *(_QWORD *)(v100 - 16) = v103;
              operator delete(v103);
            }
            v100 = v102;
          }
          while (v102 != v99);
          v101 = (void *)v165;
        }
        *((_QWORD *)&v165 + 1) = v99;
        operator delete(v101);
      }
    }
    if (v164 && *(_QWORD *)&v162.byte0)
    {
      *(_QWORD *)&v162.byte8 = *(_QWORD *)&v162.byte0;
      operator delete(*(void **)&v162.byte0);
    }
    if (v161 && *(_QWORD *)&v159.byte0)
    {
      *(_QWORD *)&v159.byte8 = *(_QWORD *)&v159.byte0;
      operator delete(*(void **)&v159.byte0);
    }
    if ((_QWORD)v149)
    {
      *((_QWORD *)&v149 + 1) = v149;
      operator delete((void *)v149);
    }
LABEL_3:
    if (++v3 != v2)
      continue;
    break;
  }
  v105 = *(_QWORD *)(*(_QWORD *)a1 + 96);
  v106 = (char *)operator new(0x30uLL);
  *((_QWORD *)v106 + 1) = 0;
  *((_QWORD *)v106 + 2) = 0;
  *(_QWORD *)v106 = &off_24C9B20B0;
  *(_OWORD *)(v106 + 24) = *(_OWORD *)v121;
  *((_QWORD *)v106 + 5) = v122;
  v121[1] = 0;
  v122 = 0;
  v121[0] = 0;
  *(_QWORD *)&v130 = v106 + 24;
  *((_QWORD *)&v130 + 1) = v106;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)(v105 + 88) + 16))(v105 + 88, &v130);
  v107 = (std::__shared_weak_count *)*((_QWORD *)&v130 + 1);
  if (*((_QWORD *)&v130 + 1))
  {
    v108 = (unint64_t *)(*((_QWORD *)&v130 + 1) + 8);
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  v110 = (char *)v121[0];
  if (v121[0])
  {
    v111 = (char *)v121[1];
    v112 = v121[0];
    if (v121[1] != v121[0])
    {
      do
      {
        v111 -= 464;
        sub_20E96ACE0((uint64_t)v111);
      }
      while (v111 != v110);
      v112 = v121[0];
    }
    v121[1] = v110;
    operator delete(v112);
  }
  return 1;
}

void sub_20E960D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  sub_20E86665C((uint64_t)&a40);
  sub_20E9610AC(&a29);
  _Unwind_Resume(a1);
}

void sub_20E960D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
  sub_20E9610AC(&a29);
  _Unwind_Resume(a1);
}

void sub_20E960D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
  sub_20E9610AC(&a29);
  _Unwind_Resume(a1);
}

void sub_20E960DA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,void *__p,uint64_t a35)
{
  if (__p)
  {
    a35 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_20E86665C((uint64_t)&a32);
  sub_20E9610AC(&a29);
  _Unwind_Resume(a1);
}

void sub_20E960EB0(char **a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  __int128 v12;

  v2 = *a1;
  if (0x34F72C234F72C235 * ((a1[2] - *a1) >> 4) < a2)
  {
    if (a2 >= 0x8D3DCB08D3DCB1)
      sub_20E969238();
    v4 = a1[1];
    v5 = 464 * a2;
    v6 = (char *)operator new(464 * a2);
    v7 = 0;
    v8 = &v6[v4 - v2];
    *(_QWORD *)&v12 = v8;
    *((_QWORD *)&v12 + 1) = &v6[v5];
    while (&v4[v7] != v2)
    {
      v7 -= 464;
      sub_20E96A598((uint64_t)&v8[v7], (uint64_t)&v4[v7]);
    }
    v9 = &v8[v7];
    v10 = *a1;
    v11 = (uint64_t)a1[1];
    *a1 = v9;
    *(_OWORD *)(a1 + 1) = v12;
    while ((char *)v11 != v10)
    {
      v11 -= 464;
      sub_20E96ACE0(v11);
    }
    if (v10)
      operator delete(v10);
  }
}

uint64_t sub_20E960FF0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  if (*(_BYTE *)(a1 + 448))
  {
    v2 = *(_QWORD *)(a1 + 424);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 432);
      v4 = *(void **)(a1 + 424);
      if (v3 != v2)
      {
        v5 = *(_QWORD *)(a1 + 432);
        do
        {
          v7 = *(void **)(v5 - 24);
          v5 -= 24;
          v6 = v7;
          if (v7)
          {
            *(_QWORD *)(v3 - 16) = v6;
            operator delete(v6);
          }
          v3 = v5;
        }
        while (v5 != v2);
        v4 = *(void **)(a1 + 424);
      }
      *(_QWORD *)(a1 + 432) = v2;
      operator delete(v4);
    }
  }
  if (*(_BYTE *)(a1 + 416))
  {
    v8 = *(void **)(a1 + 392);
    if (v8)
    {
      *(_QWORD *)(a1 + 400) = v8;
      operator delete(v8);
    }
  }
  if (*(_BYTE *)(a1 + 384))
  {
    v9 = *(void **)(a1 + 360);
    if (v9)
    {
      *(_QWORD *)(a1 + 368) = v9;
      operator delete(v9);
    }
  }
  v10 = *(void **)(a1 + 280);
  if (v10)
  {
    *(_QWORD *)(a1 + 288) = v10;
    operator delete(v10);
  }
  return a1;
}

void **sub_20E9610AC(void **a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v2)
    {
      do
      {
        v3 -= 464;
        sub_20E96ACE0(v3);
      }
      while ((void *)v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_20E96110C(uint64_t a1, int32x4_t a2, int32x4_t a3, int8x16_t a4, float32x4_t a5)
{
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t i;
  uint64_t MeshUUIDAtIndex;
  std::__shared_weak_count_vtbl *v13;
  uint64_t VerticesCount;
  uint64_t FacesCount;
  unint64_t v16;
  uint64_t VerticesRawPtr;
  uint64_t v18;
  uint64_t FacesRawPtr;
  uint64_t v20;
  uint64_t VertexNormalsRawPtr;
  int v22;
  __int128 *v23;
  __int128 *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  CFUUIDRef v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint8x8_t v35;
  _QWORD **v36;
  _QWORD *v37;
  unint64_t v39;
  uint64_t v41;
  float v42;
  _QWORD *v43;
  _QWORD *v44;
  _BOOL8 v45;
  unint64_t v46;
  unint64_t v47;
  size_t prime;
  unint64_t v49;
  uint8x8_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  unint64_t *p_shared_owners;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int8x16_t v74;
  float32x2_t v75;
  uint64_t v76;
  void *v77;
  unint64_t v78;
  float v79;
  unint64_t v80;
  unint64_t v81;
  BOOL v82;
  _QWORD *v83;
  void *v84;
  _QWORD *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  _QWORD *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t Count;
  void *v99[2];
  void *v100;
  void *v101;
  _BYTE v102[24];
  double v103;
  _BYTE v104[24];
  double v105;
  uint64_t v106;
  float64x2_t v107;
  double v108;
  uint64_t v109;
  float64x2_t v110;
  double v111;
  uint64_t v112;
  CFUUIDRef v113;
  int v114;
  uint64_t v115;
  int v116;
  __int128 v117;
  char v118;
  void *__p[2];
  void *v120[2];
  float v121;
  uint64_t v122;
  CFUUIDRef uuid;
  _BYTE v124[12];
  int v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  double v129;
  __int128 v130;
  uint64_t v131;
  double v132;
  __int128 v133;
  void *v134;
  void *v135;
  uint64_t v136;
  _QWORD v137[3];
  _QWORD *v138;
  __int128 v139;
  uint64_t v140;
  __int128 *v141;
  uint64_t v142;

  v142 = *MEMORY[0x24BDAC8D0];
  v122 = 0;
  v137[0] = &off_24C9B2100;
  v137[1] = &v122;
  v137[2] = 0;
  v138 = v137;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v120 = 0u;
  v121 = 1.0;
  Count = CV3DReconMeshListGetCount();
  if (v122)
  {
LABEL_2:
    v6 = 0;
    v7 = v120[0];
    if (!v120[0])
      goto LABEL_3;
    goto LABEL_143;
  }
  if (Count)
  {
    for (i = 0; i != Count; ++i)
    {
      MeshUUIDAtIndex = CV3DReconMeshListGetMeshUUIDAtIndex();
      if (v122)
        goto LABEL_2;
      v13 = (std::__shared_weak_count_vtbl *)MeshUUIDAtIndex;
      CV3DReconMeshListCopyMeshAtIndex();
      if (v122)
        goto LABEL_2;
      v136 = 0;
      *(_QWORD *)&v139 = &off_24C9B1EF0;
      *((_QWORD *)&v139 + 1) = &v136;
      v140 = 0;
      v141 = &v139;
      VerticesCount = CV3DReconMeshGetVerticesCount();
      if (v136)
        goto LABEL_19;
      v5 = VerticesCount;
      FacesCount = CV3DReconMeshGetFacesCount();
      if (v136
        || (v16 = FacesCount, VerticesRawPtr = CV3DReconMeshGetVerticesRawPtr(), v136)
        || (v18 = VerticesRawPtr, FacesRawPtr = CV3DReconMeshGetFacesRawPtr(), v136)
        || (v20 = FacesRawPtr, VertexNormalsRawPtr = CV3DReconMeshGetVertexNormalsRawPtr(), v136))
      {
LABEL_19:
        LOBYTE(v113) = 0;
        v118 = 0;
        v22 = 1;
        v23 = v141;
        if (!v141)
          goto LABEL_127;
      }
      else
      {
        v64 = VertexNormalsRawPtr;
        sub_20E96B15C((uint64_t)&v133, v5);
        sub_20E96B15C((uint64_t)&v130, v5);
        sub_20E96B258((uint64_t)&v127, v16);
        if (v5)
        {
          v65 = 0;
          do
          {
            v66 = v133 + v65;
            v67 = *(_QWORD *)(v18 + v65);
            *(_DWORD *)(v66 + 8) = *(_DWORD *)(v18 + v65 + 8);
            *(_QWORD *)v66 = v67;
            v68 = v130 + v65;
            v69 = *(_QWORD *)(v64 + v65);
            *(_DWORD *)(v68 + 8) = *(_DWORD *)(v64 + v65 + 8);
            *(_QWORD *)v68 = v69;
            v65 += 12;
            --v5;
          }
          while (v5);
        }
        if (v16)
        {
          v70 = 0;
          do
          {
            if (v20 != (_QWORD)v127)
            {
              v71 = v127 + v70;
              v72 = *(_QWORD *)(v20 + v70);
              *(_DWORD *)(v71 + 8) = *(_DWORD *)(v20 + v70 + 8);
              *(_QWORD *)v71 = v72;
            }
            v70 += 12;
            --v16;
          }
          while (v16);
        }
        sub_20E96B354((float *)&uuid, (float **)&v133);
        *(_OWORD *)v99 = v133;
        v100 = v134;
        v101 = v135;
        v133 = 0uLL;
        v134 = 0;
        *(_OWORD *)v102 = v130;
        *(_QWORD *)&v102[16] = v131;
        v103 = v132;
        v130 = 0uLL;
        v131 = 0;
        *(_OWORD *)v104 = v127;
        *(_QWORD *)&v104[16] = v128;
        v105 = v129;
        v127 = 0uLL;
        v128 = 0;
        sub_20E96B410(&v126, (__int128 *)v99);
        v113 = uuid;
        v114 = *(_DWORD *)v124;
        v115 = *(_QWORD *)&v124[4];
        v116 = v125;
        v117 = v126;
        v126 = 0uLL;
        v118 = 1;
        sub_20E96B498((uint64_t)&uuid);
        sub_20E96B860((uint64_t *)v99);
        sub_20E96B500((uint64_t *)&v127);
        sub_20E96B58C((uint64_t *)&v130);
        sub_20E96B58C((uint64_t *)&v133);
        v22 = 0;
        v23 = v141;
        if (!v141)
LABEL_127:
          sub_20E86D37C();
      }
      (*(void (**)(__int128 *))(*(_QWORD *)v23 + 48))(v23);
      v24 = v141;
      if (v141 == &v139)
      {
        v24 = &v139;
        v25 = 4;
      }
      else
      {
        if (!v141)
          goto LABEL_25;
        v25 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
LABEL_25:
      if (v22)
      {
        CV3DReconMeshRelease();
        goto LABEL_2;
      }
      sub_20EA68D1C((std::__shared_weak_count_vtbl **)&uuid, v13, 0);
      v27 = uuid;
      v26 = *(std::__shared_weak_count **)v124;
      if (!*(_QWORD *)v124)
        goto LABEL_31;
      v28 = (unint64_t *)(*(_QWORD *)v124 + 8);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
      do
        v30 = __ldaxr(v28);
      while (__stlxr(v30 - 1, v28));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
        if (v27)
          goto LABEL_35;
      }
      else
      {
LABEL_31:
        if (v27)
          goto LABEL_35;
      }
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Foundation/src/UUIDRef.cpp", 61, (uint64_t)"IsValid()", 9, (uint64_t)&unk_21024EC5A, 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
LABEL_35:
      *(CFUUIDBytes *)v99 = CFUUIDGetUUIDBytes(uuid);
      *(_QWORD *)&v139 = sub_20EA68D10((uint64_t)v99);
      *((_QWORD *)&v139 + 1) = v31;
      v32 = sub_2102322B4((unsigned __int8 *)&v139);
      v33 = v32;
      v34 = (unint64_t)__p[1];
      if (__p[1])
      {
        v35 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
        v35.i16[0] = vaddlv_u8(v35);
        if (v35.u32[0] > 1uLL)
        {
          v5 = v32;
          if ((void *)v32 >= __p[1])
            v5 = v32 % (unint64_t)__p[1];
        }
        else
        {
          v5 = ((unint64_t)__p[1] - 1) & v32;
        }
        v36 = (_QWORD **)*((_QWORD *)__p[0] + v5);
        if (v36)
        {
          v37 = *v36;
          if (*v36)
          {
            if (v35.u32[0] < 2uLL)
            {
              while (1)
              {
                v41 = v37[1];
                if (v41 == v32)
                {
                  if (v37[2] == (_QWORD)v139 && v37[3] == *((_QWORD *)&v139 + 1))
                    goto LABEL_102;
                }
                else if ((v41 & ((uint64_t)__p[1] - 1)) != v5)
                {
                  goto LABEL_61;
                }
                v37 = (_QWORD *)*v37;
                if (!v37)
                  goto LABEL_61;
              }
            }
            do
            {
              v39 = v37[1];
              if (v39 == v32)
              {
                if (v37[2] == (_QWORD)v139 && v37[3] == *((_QWORD *)&v139 + 1))
                  goto LABEL_102;
              }
              else
              {
                if ((void *)v39 >= __p[1])
                  v39 %= (unint64_t)__p[1];
                if (v39 != v5)
                  break;
              }
              v37 = (_QWORD *)*v37;
            }
            while (v37);
          }
        }
      }
LABEL_61:
      v37 = operator new(0x48uLL);
      v99[0] = v37;
      v99[1] = v120;
      *v37 = 0;
      v37[1] = v33;
      *((_OWORD *)v37 + 1) = v139;
      *((_OWORD *)v37 + 2) = 0u;
      *((_OWORD *)v37 + 3) = 0u;
      v37[8] = 0;
      LOBYTE(v100) = 1;
      v42 = (float)((unint64_t)v120[1] + 1);
      if (v34 && (float)(v121 * (float)v34) >= v42)
      {
        v43 = __p[0];
        v44 = (_QWORD *)*((_QWORD *)__p[0] + v5);
        if (v44)
          goto LABEL_64;
      }
      else
      {
        v45 = v34 < 3 || (v34 & (v34 - 1)) != 0;
        v46 = v45 | (2 * v34);
        v47 = vcvtps_u32_f32(v42 / v121);
        if (v46 <= v47)
          prime = v47;
        else
          prime = v46;
        if (prime == 1)
        {
          prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          prime = std::__next_prime(prime);
          v34 = (unint64_t)__p[1];
        }
        if (prime > v34)
          goto LABEL_76;
        if (prime < v34)
        {
          v49 = vcvtps_u32_f32((float)(unint64_t)v120[1] / v121);
          if (v34 < 3 || (v50 = (uint8x8_t)vcnt_s8((int8x8_t)v34), v50.i16[0] = vaddlv_u8(v50), v50.u32[0] > 1uLL))
          {
            v49 = std::__next_prime(v49);
          }
          else
          {
            v51 = 1 << -(char)__clz(v49 - 1);
            if (v49 >= 2)
              v49 = v51;
          }
          if (prime <= v49)
            prime = v49;
          if (prime < v34)
LABEL_76:
            sub_20E8D2B3C((uint64_t)__p, prime);
        }
        v34 = (unint64_t)__p[1];
        v52 = (unint64_t)__p[1] - 1;
        if (((unint64_t)__p[1] & ((unint64_t)__p[1] - 1)) != 0)
        {
          if ((void *)v33 >= __p[1])
          {
            v5 = v33 % (unint64_t)__p[1];
            v43 = __p[0];
            v44 = (_QWORD *)*((_QWORD *)__p[0] + v33 % (unint64_t)__p[1]);
            if (v44)
            {
LABEL_64:
              *v37 = *v44;
              goto LABEL_100;
            }
          }
          else
          {
            v5 = v33;
            v43 = __p[0];
            v44 = (_QWORD *)*((_QWORD *)__p[0] + v33);
            if (v44)
              goto LABEL_64;
          }
        }
        else
        {
          v5 = v52 & v33;
          v43 = __p[0];
          v44 = (_QWORD *)*((_QWORD *)__p[0] + (v52 & v33));
          if (v44)
            goto LABEL_64;
        }
      }
      *v37 = v120[0];
      v120[0] = v37;
      v43[v5] = v120;
      if (!*v37)
        goto LABEL_101;
      v53 = *(_QWORD *)(*v37 + 8);
      if ((v34 & (v34 - 1)) != 0)
      {
        if (v53 >= v34)
          v53 %= v34;
      }
      else
      {
        v53 &= v34 - 1;
      }
      v44 = (char *)__p[0] + 8 * v53;
LABEL_100:
      *v44 = v37;
LABEL_101:
      ++v120[1];
LABEL_102:
      v37[4] = v113;
      *((_DWORD *)v37 + 10) = v114;
      *(_QWORD *)((char *)v37 + 44) = v115;
      *((_DWORD *)v37 + 13) = v116;
      v54 = v117;
      v117 = 0uLL;
      v55 = (std::__shared_weak_count *)v37[8];
      *(_OWORD *)(v37 + 7) = v54;
      if (v55)
      {
        p_shared_owners = (unint64_t *)&v55->__shared_owners_;
        do
          v57 = __ldaxr(p_shared_owners);
        while (__stlxr(v57 - 1, p_shared_owners));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      CV3DReconMeshRelease();
      v58 = *(std::__shared_weak_count **)v124;
      if (*(_QWORD *)v124)
      {
        v59 = (unint64_t *)(*(_QWORD *)v124 + 8);
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
      }
      if (v118)
      {
        v61 = (std::__shared_weak_count *)*((_QWORD *)&v117 + 1);
        if (*((_QWORD *)&v117 + 1))
        {
          v62 = (unint64_t *)(*((_QWORD *)&v117 + 1) + 8);
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 - 1, v62));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
      }
    }
  }
  v74 = (int8x16_t)vnegq_f32(a5);
  v75 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32(*(int32x2_t *)a2.i8, *(int32x2_t *)a3.i8), *(float *)v74.i32), (float32x2_t)vzip2_s32(*(int32x2_t *)a2.i8, *(int32x2_t *)a3.i8), *(float32x2_t *)a5.f32, 1), (float32x2_t)*(_OWORD *)&vzip2q_s32(a2, a3), a5, 2);
  v76 = *(_QWORD *)(*(_QWORD *)a1 + 256);
  v77 = __p[0];
  v78 = (unint64_t)__p[1];
  LODWORD(v79) = vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)a4.i8, *(float32x2_t *)v74.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a4.i8, 1), *(float32x2_t *)a5.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v74, v74, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(a4, a4, 8uLL)).u32[0];
  __p[0] = 0;
  __p[1] = 0;
  v99[0] = v77;
  v99[1] = (void *)v78;
  v100 = v120[0];
  v101 = v120[1];
  *(float *)v102 = v121;
  if (v120[1])
  {
    v80 = *((_QWORD *)v120[0] + 1);
    if ((v78 & (v78 - 1)) != 0)
    {
      v82 = v80 >= v78;
      v81 = v80 % v78;
      if (!v82)
        v81 = *((_QWORD *)v120[0] + 1);
    }
    else
    {
      v81 = v80 & (v78 - 1);
    }
    *((_QWORD *)v77 + v81) = &v100;
    v120[0] = 0;
    v120[1] = 0;
  }
  *(float64x2_t *)&v102[8] = vcvtq_f64_f32((float32x2_t)vzip1_s32(*(int32x2_t *)a2.i8, *(int32x2_t *)a3.i8));
  v103 = *(float *)a4.i32;
  *(_QWORD *)v104 = 0;
  *(float64x2_t *)&v104[8] = vcvtq_f64_f32((float32x2_t)vzip2_s32(*(int32x2_t *)a2.i8, *(int32x2_t *)a3.i8));
  v105 = *(float *)&a4.i32[1];
  v106 = 0;
  v107 = vcvtq_f64_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(a2, a3));
  v108 = *(float *)&a4.i32[2];
  v109 = 0;
  v110 = vcvtq_f64_f32(v75);
  v111 = v79;
  v112 = 0x3FF0000000000000;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)(v76 + 88) + 16))(v76 + 88, v99);
  v83 = v100;
  if (v100)
  {
    do
    {
      v89 = v83;
      v83 = (_QWORD *)*v83;
      v90 = (std::__shared_weak_count *)v89[8];
      if (v90)
      {
        v91 = (unint64_t *)&v90->__shared_owners_;
        do
          v92 = __ldaxr(v91);
        while (__stlxr(v92 - 1, v91));
        if (!v92)
        {
          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
          std::__shared_weak_count::__release_weak(v90);
        }
      }
      operator delete(v89);
    }
    while (v83);
  }
  v84 = v99[0];
  v99[0] = 0;
  if (v84)
    operator delete(v84);
  v6 = 1;
  v7 = v120[0];
  if (v120[0])
  {
    do
    {
LABEL_143:
      v85 = v7;
      v7 = (_QWORD *)*v7;
      v86 = (std::__shared_weak_count *)v85[8];
      if (v86)
      {
        v87 = (unint64_t *)&v86->__shared_owners_;
        do
          v88 = __ldaxr(v87);
        while (__stlxr(v88 - 1, v87));
        if (!v88)
        {
          ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
          std::__shared_weak_count::__release_weak(v86);
        }
      }
      operator delete(v85);
    }
    while (v7);
  }
LABEL_3:
  v8 = __p[0];
  __p[0] = 0;
  if (v8)
    operator delete(v8);
  if (!v138)
    sub_20E86D37C();
  (*(void (**)(_QWORD *))(*v138 + 48))(v138);
  v9 = v138;
  if (v138 == v137)
  {
    v10 = 4;
    v9 = v137;
    goto LABEL_129;
  }
  if (v138)
  {
    v10 = 5;
LABEL_129:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  return v6;
}

void sub_20E961BC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a65;
  uint64_t v65;

  sub_20E96B860(&a25);
  sub_20E96B500(&a65);
  sub_20E96B58C((uint64_t *)(v65 - 240));
  sub_20E96B58C((uint64_t *)(v65 - 208));
  sub_20E961DB0((_QWORD *)(v65 - 136));
  sub_20E961D20((uint64_t)&a53);
  sub_20E961DB0((_QWORD *)(v65 - 168));
  _Unwind_Resume(a1);
}

uint64_t sub_20E961CB0(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  if (*(_BYTE *)(result + 40))
  {
    v2 = *(std::__shared_weak_count **)(result + 32);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
        return v1;
      }
    }
  }
  return result;
}

uint64_t sub_20E961D20(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(_QWORD **)(a1 + 16);
  while (v2)
  {
    v5 = v2;
    v2 = (_QWORD *)*v2;
    v6 = (std::__shared_weak_count *)v5[8];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    operator delete(v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

_QWORD *sub_20E961DB0(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = a1[3];
  if (!v2)
    sub_20E86D37C();
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  v3 = (_QWORD *)a1[3];
  if (v3 == a1)
  {
    v4 = 4;
    v3 = a1;
    goto LABEL_6;
  }
  if (v3)
  {
    v4 = 5;
LABEL_6:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_20E961E1C(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  std::mutex *v8;
  int v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  float32x4_t v34;
  const __CFAllocator *Default;
  std::__shared_weak_count_vtbl *v36;
  uint64_t v37;
  const void *v38;
  float32x4_t v39;
  float32x4_t v40;
  int8x16_t v41;
  int32x4_t v42;
  float32x4_t v43;
  unsigned __int32 v44;
  int8x16_t v45;
  float32x4_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _QWORD *v58;
  std::runtime_error *exception;
  std::runtime_error *v60;
  std::exception_ptr v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  int32x4_t v66;
  float64x2_t v67;
  int32x4_t v68;
  float64x2_t v69;
  float32x4_t v70;
  float64x2_t v71;
  int8x16_t v72;
  float64x2_t v73;
  uint64_t v74;
  std::exception_ptr v75;
  _BYTE __lk[20];
  int v77;
  std::exception_ptr v78[2];
  __int128 v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  int v83;
  __int128 v84;
  int v85;
  _BYTE v86[28];
  _BYTE v87[72];
  char *v88;
  char *v89;
  char *v90;
  __int128 v91;
  uint64_t v92;

  v92 = *MEMORY[0x24BDAC8D0];
  v80 = *(_QWORD *)(a2 + 8);
  v3 = *(_DWORD *)(a2 + 16);
  v82 = *(_QWORD *)(a2 + 20);
  v4 = *(_DWORD *)(a2 + 28);
  v81 = v3;
  v83 = v4;
  v84 = *(_OWORD *)(a2 + 32);
  v85 = *(_DWORD *)(a2 + 48);
  *(_OWORD *)&v86[12] = *(_OWORD *)(a2 + 64);
  *(_OWORD *)v86 = *(_OWORD *)(a2 + 52);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 496);
  v6 = operator new();
  *(_QWORD *)(v6 + 8) = 0;
  v7 = (unint64_t *)(v6 + 8);
  *(_QWORD *)(v6 + 24) = 850045863;
  v8 = (std::mutex *)(v6 + 24);
  *(_QWORD *)(v6 + 16) = 0;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 1018212795;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 124) = 0u;
  *(_QWORD *)v6 = &off_24C9B2180;
  v74 = v6;
  std::mutex::lock((std::mutex *)(v6 + 24));
  v9 = *(_DWORD *)(v6 + 136);
  if ((v9 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v10 = __ldxr(v7);
  while (__stxr(v10 + 1, v7));
  *(_DWORD *)(v6 + 136) = v9 | 2;
  std::mutex::unlock(v8);
  *(_QWORD *)v87 = 0;
  *(_QWORD *)&v87[8] = 0;
  v11 = *(std::__shared_weak_count **)(v5 + 784);
  if (!v11
    || (v12 = std::__shared_weak_count::lock(v11), (*(_QWORD *)&v87[8] = v12) == 0)
    || (v13 = v12, v14 = *(_QWORD *)(v5 + 776), (*(_QWORD *)v87 = v14) == 0))
  {
    std::runtime_error::runtime_error((std::runtime_error *)__lk, "ChannelInputWithPromise: Invalid operation. Processor is released.");
    *(_QWORD *)__lk = &off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v60 = std::runtime_error::runtime_error(exception, (const std::runtime_error *)__lk);
    v60->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v60, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  *(_QWORD *)__lk = v74;
  v74 = 0;
  (*(void (**)(uint64_t, uint64_t *, _BYTE *))(*(_QWORD *)v14 + 56))(v14, &v80, __lk);
  sub_20E96CED4((uint64_t *)__lk);
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  sub_20E96CED4(&v74);
  *(_QWORD *)__lk = v6 + 24;
  __lk[8] = 1;
  std::mutex::lock(v8);
  std::__assoc_sub_state::__sub_wait((std::__assoc_sub_state *)v6, (std::unique_lock<std::mutex> *)__lk);
  v17 = *(_QWORD *)(v6 + 16);
  *(_QWORD *)v87 = 0;
  std::exception_ptr::~exception_ptr((std::exception_ptr *)v87);
  if (v17)
  {
    std::exception_ptr::exception_ptr(&v75, (const std::exception_ptr *)(v6 + 16));
    v61.__ptr_ = &v75;
    std::rethrow_exception(v61);
    __break(1u);
    return;
  }
  v18 = *(char **)(v6 + 144);
  v19 = *(char **)(v6 + 152);
  v20 = *(_QWORD *)(v6 + 160);
  *(_QWORD *)(v6 + 152) = 0;
  *(_QWORD *)(v6 + 160) = 0;
  *(_QWORD *)(v6 + 144) = 0;
  *(_OWORD *)&v78[0].__ptr_ = *(_OWORD *)(v6 + 168);
  if (__lk[8])
    std::mutex::unlock(*(std::mutex **)__lk);
  do
    v21 = __ldaxr(v7);
  while (__stlxr(v21 - 1, v7));
  if (!v21)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    v22 = v18;
    if (v18 == v19)
      goto LABEL_35;
LABEL_18:
    if (v86[16])
    {
      v23 = *(_QWORD *)(*(_QWORD *)a1 + 576);
      *(_QWORD *)v87 = v80;
      *(_QWORD *)&v87[12] = v82;
      *(_DWORD *)&v87[8] = v81;
      *(_DWORD *)&v87[20] = v83;
      *(_OWORD *)&v87[24] = v84;
      *(_DWORD *)&v87[40] = v85;
      *(_OWORD *)&v87[56] = *(_OWORD *)&v86[12];
      *(_OWORD *)&v87[44] = *(_OWORD *)v86;
      v89 = 0;
      v90 = 0;
      v88 = 0;
      if (0x8E38E38E38E38E39 * ((v19 - v18) >> 4) >= 0x1C71C71C71C71C8)
        sub_20E969238();
      v24 = (char *)operator new(v19 - v18);
      v25 = 0;
      v88 = v24;
      v89 = v24;
      v90 = &v24[16 * ((v19 - v18) >> 4)];
      do
      {
        v26 = &v18[v25];
        v27 = &v24[v25];
        v28 = *(_OWORD *)&v18[v25];
        v29 = *(_OWORD *)&v18[v25 + 16];
        v30 = *(_OWORD *)&v18[v25 + 48];
        *((_OWORD *)v27 + 2) = *(_OWORD *)&v18[v25 + 32];
        *((_OWORD *)v27 + 3) = v30;
        *(_OWORD *)v27 = v28;
        *((_OWORD *)v27 + 1) = v29;
        v32 = *(_OWORD *)&v18[v25 + 96];
        v31 = *(_OWORD *)&v18[v25 + 112];
        v33 = *(_OWORD *)&v18[v25 + 80];
        *(_OWORD *)(v27 + 121) = *(_OWORD *)&v18[v25 + 121];
        *((_OWORD *)v27 + 6) = v32;
        *((_OWORD *)v27 + 7) = v31;
        *((_OWORD *)v27 + 5) = v33;
        *((_OWORD *)v27 + 4) = *(_OWORD *)&v18[v25 + 64];
        v25 += 144;
      }
      while (v26 + 144 != v19);
      v89 = &v24[v25];
      v91 = *(_OWORD *)&v78[0].__ptr_;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(v23 + 760) + 16))(v23 + 760, v87);
      if (v88)
      {
        v89 = v88;
        operator delete(v88);
      }
      *(_QWORD *)__lk = v80;
      *(_DWORD *)&__lk[8] = v81;
      *(_QWORD *)&__lk[12] = v82;
      v77 = v83;
      sub_20EEE82B4((uint64_t)__lk, (float32x4_t *)v87, v34);
      if (*(_QWORD *)(a1 + 48) && *(_QWORD *)(a1 + 64))
      {
        v66 = *(int32x4_t *)&v87[16];
        v68 = *(int32x4_t *)v87;
        v70 = *(float32x4_t *)&v87[48];
        v72 = *(int8x16_t *)&v87[32];
        Default = CFAllocatorGetDefault();
        v36 = (std::__shared_weak_count_vtbl *)CFUUIDCreateFromUUIDBytes(Default, *(CFUUIDBytes *)v86);
        sub_20EA68D1C((std::__shared_weak_count_vtbl **)__lk, v36, 0);
        v37 = v20;
        v38 = *(const void **)__lk;
        if (*(_QWORD *)__lk)
          CFRetain(*(CFTypeRef *)__lk);
        v39.i64[0] = vzip1q_s32(v68, v66).u64[0];
        v40 = vnegq_f32(v70);
        v39.i64[1] = v72.u32[0];
        v41 = (int8x16_t)vtrn2q_s32(v68, v66);
        v41.i32[2] = v72.i32[1];
        v42 = vzip2q_s32(v68, v66);
        *(float32x2_t *)v43.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)v39.f32, v40.f32[0]), *(float32x2_t *)v41.i8, *(float32x2_t *)v70.f32, 1), *(float32x2_t *)v42.i8, v70, 2);
        v42.i32[2] = v72.i32[2];
        v44 = vdupq_laneq_s32(v42, 2).u32[0];
        v45 = vextq_s8(vextq_s8(v41, v41, 0xCuLL), (int8x16_t)v42, 8uLL);
        v43.i64[1] = __PAIR64__(1.0, vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)v72.i8, *(float32x2_t *)v40.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v72.i8, 1), *(float32x2_t *)v70.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(v72, v72, 8uLL)).u32[0]);
        v46.i64[0] = __PAIR64__(v45.u32[0], v41.u32[0]);
        v46.i64[1] = v45.u32[1];
        v40.i64[0] = v45.i64[1];
        v40.i64[1] = v44;
        v47 = vcvt_hight_f64_f32(v46);
        v48 = vcvtq_f64_f32((float32x2_t)__PAIR64__(v45.u32[0], v41.u32[0]));
        v49 = vcvt_hight_f64_f32(v40);
        v50 = vcvtq_f64_f32((float32x2_t)v45.u64[1]);
        v51 = vcvt_hight_f64_f32(v43);
        v52 = vcvtq_f64_f32(*(float32x2_t *)v43.f32);
        v53 = vcvt_hight_f64_f32(v39);
        v54 = vcvtq_f64_f32(*(float32x2_t *)v39.f32);
        v55 = *(std::__shared_weak_count **)&__lk[8];
        if (*(_QWORD *)&__lk[8])
        {
          v56 = (unint64_t *)(*(_QWORD *)&__lk[8] + 8);
          do
            v57 = __ldaxr(v56);
          while (__stlxr(v57 - 1, v56));
          if (!v57)
          {
            v71 = v49;
            v73 = v51;
            v67 = v52;
            v69 = v47;
            v64 = v48;
            v65 = v50;
            v62 = v54;
            v63 = v53;
            ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
            std::__shared_weak_count::__release_weak(v55);
            v54 = v62;
            v53 = v63;
            v48 = v64;
            v50 = v65;
            v52 = v67;
            v47 = v69;
            v49 = v71;
            v51 = v73;
          }
        }
        (*(void (**)(__n128, __n128, __n128, __n128))(**(_QWORD **)(a1 + 48) + 16))((__n128)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v54), v53), (__n128)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v48), v47), (__n128)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v50), v49), (__n128)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v52), v51));
        v20 = v37;
        CFRelease(v38);
      }
    }
    v22 = v19;
    goto LABEL_35;
  }
  v22 = v18;
  if (v18 != v19)
    goto LABEL_18;
LABEL_35:
  v79 = *(_OWORD *)&v78[0].__ptr_;
  v58 = operator new(0x38uLL, MEMORY[0x24BEDB6B8]);
  if (v58)
  {
    v58[2] = v22;
    v58[3] = v20;
    *((_OWORD *)v58 + 2) = v79;
    *((_DWORD *)v58 + 12) = 1;
    *v58 = &off_24C9B7970;
    v58[1] = v18;
  }
  else if (v18)
  {
    operator delete(v18);
  }
}

void sub_20E962750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::exception_ptr a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::runtime_error a32,uint64_t a33,std::exception_ptr a34)
{
  uint64_t v34;
  unint64_t *v35;
  uint64_t v36;
  unint64_t v38;
  uint64_t v39;

  std::exception_ptr::~exception_ptr(&a27);
  std::runtime_error::~runtime_error(&a32);
  sub_20E86665C(v36 - 224);
  do
    v38 = __ldaxr(v35);
  while (__stlxr(v38 - 1, v35));
  if (!v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 16))(v34);
  sub_20E96CED4(&v39);
  _Unwind_Resume(a1);
}

void sub_20E962778(void *a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  JUMPOUT(0x20E9626ACLL);
}

uint64_t sub_20E9627C8(_QWORD *a1, const __CFUUID *a2, CFTypeRef *a3)
{
  CFTypeID v6;
  CFUUIDBytes v7;
  uint64_t v8;
  uint64_t v9;
  char *v11;
  CFTypeRef v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void *__p;
  __int128 v17;
  CFTypeRef cf;
  std::__shared_weak_count *v19;
  std::error_condition v20;
  _QWORD v21[2];
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  if (a2 && (v6 = CFUUIDGetTypeID(), CFGetTypeID(a2) == v6))
  {
    v7 = CFUUIDGetUUIDBytes(a2);
    __p = *(void **)&v7.byte0;
    *(_QWORD *)&v17 = *(_QWORD *)&v7.byte8;
    v21[0] = sub_20EA68D10((uint64_t)&__p);
    v21[1] = v8;
    v22 = 1;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)(*(_QWORD *)(*a1 + 576) + 928) + 16))(*(_QWORD *)(*a1 + 576) + 928, v21);
    if (a1[6])
    {
      v9 = a1[8];
      if (v9)
        (*(void (**)(void))(*(_QWORD *)v9 + 16))();
    }
    return 1;
  }
  else
  {
    LOBYTE(v21[0]) = 0;
    v22 = 0;
    __p = operator new(0x28uLL);
    v17 = xmmword_2102DC8F0;
    strcpy((char *)__p, "Input identifier is not valid UUID");
    v11 = (char *)operator new(0x70uLL);
    strcpy(v11, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/Raycast/Session.cpp");
    if (a3)
    {
      *(_QWORD *)&v20.__val_ = 22;
      v20.__cat_ = std::generic_category();
      sub_20EA67538(&v20, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v12 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v12;
      v13 = v19;
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
    operator delete(v11);
    if (SHIBYTE(v17) < 0)
      operator delete(__p);
    return 0;
  }
}

void sub_20E9629E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20E962A2C(uint64_t a1, const void *a2)
{
  std::__shared_weak_count *v4;
  _QWORD *v5;
  _QWORD *v6;
  char *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;

  if (a2)
  {
    v4 = (std::__shared_weak_count *)operator new(0x20uLL);
    v4->__shared_owners_ = 0;
    v4->__shared_weak_owners_ = 0;
    v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9AFFA0;
    v4[1].__vftable = (std::__shared_weak_count_vtbl *)_Block_copy(a2);
    v5 = &v4[1].__vftable;
    v11 = &v4[1].__vftable;
    v12 = v4;
    v6 = *(_QWORD **)(a1 + 32);
    if ((unint64_t)v6 < *(_QWORD *)(a1 + 40))
    {
LABEL_3:
      *v6 = v5;
      v6[1] = v4;
      *(_QWORD *)(a1 + 32) = v6 + 2;
      return;
    }
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v11 = 0;
    v12 = 0;
    v6 = *(_QWORD **)(a1 + 32);
    if ((unint64_t)v6 < *(_QWORD *)(a1 + 40))
      goto LABEL_3;
  }
  v7 = sub_20E96B9AC((char **)(a1 + 24), (uint64_t)&v11);
  v8 = v12;
  *(_QWORD *)(a1 + 32) = v7;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_20E962B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E962B30(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_20E962B48(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  std::mutex *v7;
  int v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  void *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  unint64_t *v26;
  std::mutex *v27;
  int v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  void *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void *v39;
  std::runtime_error *exception;
  std::runtime_error *v41;
  std::runtime_error *v42;
  std::runtime_error *v43;
  std::exception_ptr v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  std::runtime_error v49;
  std::exception_ptr v50;
  std::__shared_weak_count *v51;
  char v52;
  std::exception_ptr v53;
  std::unique_lock<std::mutex> __lk;

  if (a2)
    v3 = a2 + 8;
  else
    v3 = 0;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 496);
  v52 = 1;
  v5 = operator new();
  *(_QWORD *)(v5 + 8) = 0;
  v6 = (unint64_t *)(v5 + 8);
  *(_QWORD *)(v5 + 24) = 850045863;
  v7 = (std::mutex *)(v5 + 24);
  *(_QWORD *)(v5 + 16) = 0;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_QWORD *)(v5 + 80) = 0;
  *(_QWORD *)(v5 + 88) = 1018212795;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 124) = 0u;
  *(_QWORD *)v5 = &off_24C9B21C8;
  v53.__ptr_ = (void *)v5;
  std::mutex::lock((std::mutex *)(v5 + 24));
  v8 = *(_DWORD *)(v5 + 136);
  if ((v8 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v9 = __ldxr(v6);
  while (__stxr(v9 + 1, v6));
  *(_DWORD *)(v5 + 136) = v8 | 2;
  std::mutex::unlock(v7);
  v50.__ptr_ = 0;
  v51 = 0;
  v10 = *(std::__shared_weak_count **)(v4 + 952);
  if (!v10
    || (v11 = std::__shared_weak_count::lock(v10), (v51 = v11) == 0)
    || (v12 = v11, v13 = *(void **)(v4 + 944), (v50.__ptr_ = v13) == 0))
  {
    std::runtime_error::runtime_error(&v49, "ChannelInputWithPromise: Invalid operation. Processor is released.");
    v49.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v41 = std::runtime_error::runtime_error(exception, &v49);
    v41->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v41, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v49.__vftable = (std::runtime_error_vtbl *)v53.__ptr_;
  v53.__ptr_ = 0;
  (*(void (**)(void *, char *, std::runtime_error *))(*(_QWORD *)v13 + 56))(v13, &v52, &v49);
  sub_20E96D150((uint64_t *)&v49);
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  sub_20E96D150((uint64_t *)&v53);
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v5 + 24);
  __lk.__owns_ = 1;
  std::mutex::lock(v7);
  std::__assoc_sub_state::__sub_wait((std::__assoc_sub_state *)v5, &__lk);
  v16 = *(_QWORD *)(v5 + 16);
  v50.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v50);
  if (v16)
    goto LABEL_48;
  v17 = *(_OWORD *)(v5 + 144);
  v18 = *(_QWORD *)(v5 + 160);
  *(_QWORD *)(v5 + 144) = 0;
  *(_QWORD *)(v5 + 152) = 0;
  v45 = v17;
  v46 = *(_OWORD *)(v5 + 168);
  *(_QWORD *)(v5 + 160) = 0;
  *(_QWORD *)(v5 + 168) = 0;
  v19 = *(_QWORD *)(v5 + 184);
  *(_QWORD *)(v5 + 176) = 0;
  *(_QWORD *)(v5 + 184) = 0;
  v47 = *(_OWORD *)(v5 + 192);
  v20 = *(_QWORD *)(v5 + 208);
  *(_QWORD *)(v5 + 192) = 0;
  *(_QWORD *)(v5 + 200) = 0;
  *(_QWORD *)(v5 + 208) = 0;
  if (__lk.__owns_)
    std::mutex::unlock(__lk.__m_);
  do
    v21 = __ldaxr(v6);
  while (__stlxr(v21 - 1, v6));
  if (!v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  v22 = *(void **)(v3 + 24);
  if (v22)
  {
    *(_QWORD *)(v3 + 32) = v22;
    operator delete(v22);
    *(_QWORD *)(v3 + 24) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0;
  }
  v23 = *(void **)(v3 + 48);
  *(_OWORD *)(v3 + 24) = v45;
  *(_QWORD *)(v3 + 40) = v18;
  if (v23)
  {
    *(_QWORD *)(v3 + 56) = v23;
    operator delete(v23);
    *(_QWORD *)(v3 + 48) = 0;
    *(_QWORD *)(v3 + 56) = 0;
    *(_QWORD *)(v3 + 64) = 0;
  }
  v24 = *(void **)(v3 + 72);
  *(_OWORD *)(v3 + 48) = v46;
  *(_QWORD *)(v3 + 64) = v19;
  if (v24)
  {
    *(_QWORD *)(v3 + 80) = v24;
    operator delete(v24);
    *(_QWORD *)(v3 + 72) = 0;
    *(_QWORD *)(v3 + 80) = 0;
    *(_QWORD *)(v3 + 88) = 0;
  }
  *(_OWORD *)(v3 + 72) = v47;
  *(_QWORD *)(v3 + 88) = v20;
  v25 = *(_QWORD *)(*(_QWORD *)a1 + 576);
  v52 = 1;
  v5 = operator new();
  *(_QWORD *)(v5 + 8) = 0;
  v26 = (unint64_t *)(v5 + 8);
  *(_QWORD *)(v5 + 24) = 850045863;
  v27 = (std::mutex *)(v5 + 24);
  *(_QWORD *)(v5 + 16) = 0;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_QWORD *)(v5 + 80) = 0;
  *(_QWORD *)(v5 + 88) = 1018212795;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 124) = 0u;
  *(_QWORD *)v5 = &off_24C9B2210;
  v53.__ptr_ = (void *)v5;
  std::mutex::lock((std::mutex *)(v5 + 24));
  v28 = *(_DWORD *)(v5 + 136);
  if ((v28 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v29 = __ldxr(v26);
  while (__stxr(v29 + 1, v26));
  *(_DWORD *)(v5 + 136) = v28 | 2;
  std::mutex::unlock(v27);
  v50.__ptr_ = 0;
  v51 = 0;
  v30 = *(std::__shared_weak_count **)(v25 + 1456);
  if (!v30
    || (v31 = std::__shared_weak_count::lock(v30), (v51 = v31) == 0)
    || (v32 = v31, v33 = *(void **)(v25 + 1448), (v50.__ptr_ = v33) == 0))
  {
    std::runtime_error::runtime_error(&v49, "ChannelInputWithPromise: Invalid operation. Processor is released.");
    v49.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    v42 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v43 = std::runtime_error::runtime_error(v42, &v49);
    v43->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v43, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v49.__vftable = (std::runtime_error_vtbl *)v53.__ptr_;
  v53.__ptr_ = 0;
  (*(void (**)(void *, char *, std::runtime_error *))(*(_QWORD *)v33 + 56))(v33, &v52, &v49);
  sub_20E96D364((uint64_t *)&v49);
  v34 = (unint64_t *)&v32->__shared_owners_;
  do
    v35 = __ldaxr(v34);
  while (__stlxr(v35 - 1, v34));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
  sub_20E96D364((uint64_t *)&v53);
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v5 + 24);
  __lk.__owns_ = 1;
  std::mutex::lock(v27);
  std::__assoc_sub_state::__sub_wait((std::__assoc_sub_state *)v5, &__lk);
  v36 = *(_QWORD *)(v5 + 16);
  v50.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v50);
  if (v36)
  {
LABEL_48:
    v44.__ptr_ = std::exception_ptr::exception_ptr(&v53, (const std::exception_ptr *)(v5 + 16));
    std::rethrow_exception(v44);
    __break(1u);
  }
  else
  {
    v48 = *(_OWORD *)(v5 + 144);
    v37 = *(_QWORD *)(v5 + 160);
    *(_QWORD *)(v5 + 152) = 0;
    *(_QWORD *)(v5 + 160) = 0;
    *(_QWORD *)(v5 + 144) = 0;
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
    do
      v38 = __ldaxr(v26);
    while (__stlxr(v38 - 1, v26));
    if (!v38)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    v39 = *(void **)v3;
    if (*(_QWORD *)v3)
    {
      *(_QWORD *)(v3 + 8) = v39;
      operator delete(v39);
      *(_QWORD *)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
      *(_QWORD *)(v3 + 16) = 0;
    }
    *(_OWORD *)v3 = v48;
    *(_QWORD *)(v3 + 16) = v37;
  }
}

void sub_20E963424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::runtime_error a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::exception_ptr a22)
{
  uint64_t v22;
  unint64_t *v23;
  uint64_t v24;
  unint64_t v26;
  uint64_t v27;

  std::exception_ptr::~exception_ptr(&a22);
  std::runtime_error::~runtime_error(&a16);
  sub_20E86665C((uint64_t)&v27);
  do
    v26 = __ldaxr(v23);
  while (__stlxr(v26 - 1, v23));
  if (!v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
  sub_20E96D150((uint64_t *)(v24 - 104));
  _Unwind_Resume(a1);
}

uint64_t sub_20E963490(uint64_t a1)
{
  sub_20E95F094((uint64_t *)(a1 + 8));
  return a1;
}

void sub_20E9634B8(uint64_t a1)
{
  sub_20E95F094((uint64_t *)(a1 + 8));
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E9634F0(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 24;
  sub_20E963580(a1 + 664);
  sub_20E963BF0(a1 + 584);
  sub_20E96421C(a1 + 504);
  sub_20E966148(a1 + 424);
  sub_20E966BF8(a1 + 344);
  sub_20E967668(a1 + 264);
  sub_20E967F98(a1 + 184);
  sub_20E968524(a1 + 104);
  sub_20E968AB0(v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20E963580(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)a1 = &off_24C9B22B0;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
  {
    v3 = sub_20E9636E0(v2);
    MEMORY[0x212BC6398](v3, 0x10B2C4085F70915);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      v7 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = 0;
      if (!v7)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  v7 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v7)
  {
LABEL_8:
    v8 = sub_20E9636E0(v7);
    MEMORY[0x212BC6398](v8, 0x10B2C4085F70915);
  }
LABEL_9:
  v9 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v9)
    goto LABEL_13;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
  {
LABEL_13:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_19:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_19;
LABEL_14:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_20:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20E9636B8(uint64_t a1)
{
  sub_20E963580(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E9636E0(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9B22E0;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9B2348;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9B2380;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_20E9638C4(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9B2310;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

_QWORD *sub_20E9638FC(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9B2348;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20E963934(uint64_t a1)
{
  sub_20E9636E0(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E963958(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9B2310;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20E9639A0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20E963A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E963A44(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9B2348;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20E963A8C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C9B2380;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C9B2380;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20E963B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E963B8C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B2380;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E963BDC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20E963BF0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)a1 = &off_24C9B23B8;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
  {
    v3 = sub_20E963D50(v2);
    MEMORY[0x212BC6398](v3, 0x10B2C4085F70915);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      v7 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = 0;
      if (!v7)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  v7 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v7)
  {
LABEL_8:
    v8 = sub_20E963D50(v7);
    MEMORY[0x212BC6398](v8, 0x10B2C4085F70915);
  }
LABEL_9:
  v9 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v9)
    goto LABEL_13;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
  {
LABEL_13:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_19:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_19;
LABEL_14:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_20:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20E963D28(uint64_t a1)
{
  sub_20E963BF0(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E963D50(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9B23E8;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9B2418;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9B2488;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_20E963F34(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9B2418;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

_QWORD *sub_20E963F6C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B2488;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20E963FAC(uint64_t a1)
{
  sub_20E963D50(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E963FD0(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9B2418;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20E964018(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C9B2450;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C9B2450;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20E9640EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E964118(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B2450;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20E964158(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B2450;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E9641A8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_20E9641B8(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B2488;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E964208(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20E96421C(uint64_t a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)a1 = &off_24C9B24C0;
  v2 = (uint64_t *)(a1 + 72);
  sub_20E964334((uint64_t *)(a1 + 72), 0);
  v3 = *(std::__shared_weak_count **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    sub_20E964334(v2, 0);
    v6 = *(std::__shared_weak_count **)(a1 + 64);
    if (!v6)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    sub_20E964334(v2, 0);
    v6 = *(std::__shared_weak_count **)(a1 + 64);
    if (!v6)
      goto LABEL_11;
  }
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_11:
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t *sub_20E964334(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    sub_20E9643EC(v2 + 1512);
    sub_20E9647BC(v2 + 1344);
    sub_20E964C88(v2 + 1176);
    sub_20E964F34(v2 + 1008);
    sub_20E965140(v2 + 840);
    sub_20E9653EC(v2 + 672);
    sub_20E965698(v2 + 504);
    sub_20E965944(v2 + 336);
    sub_20E965BF0(v2 + 168);
    sub_20E965E9C(v2);
    JUMPOUT(0x212BC6398);
  }
  return result;
}

void sub_20E9643C4(uint64_t a1)
{
  sub_20E96421C(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E9643EC(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9B24F0;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9B2520;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9B2558;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_20E9645D0(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9B2520;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

_QWORD *sub_20E964608(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B2558;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20E964648(uint64_t a1)
{
  sub_20E9643EC(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E96466C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9B2520;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20E9646B4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20E964744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E964758(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B2558;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E9647A8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20E9647BC(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9B2590;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9B25C0;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9B2630;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_20E9649A0(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9B25C0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

_QWORD *sub_20E9649D8(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B2630;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20E964A18(uint64_t a1)
{
  sub_20E9647BC(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E964A3C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9B25C0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20E964A84(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C9B25F8;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C9B25F8;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20E964B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E964B84(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B25F8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20E964BC4(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B25F8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E964C14(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_20E964C24(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B2630;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E964C74(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20E964C88(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9B2668;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9B2520;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9B2698;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_20E964E6C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B2698;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20E964EAC(uint64_t a1)
{
  sub_20E964C88(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E964ED0(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B2698;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E964F20(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20E964F34(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9B26D0;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9B2348;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9B2450;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20E965118(uint64_t a1)
{
  sub_20E964F34(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E965140(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9B2700;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9B2520;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9B2730;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_20E965324(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B2730;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20E965364(uint64_t a1)
{
  sub_20E965140(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E965388(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B2730;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E9653D8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20E9653EC(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9B2768;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9B2520;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9B2798;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_20E9655D0(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B2798;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20E965610(uint64_t a1)
{
  sub_20E9653EC(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E965634(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B2798;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E965684(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20E965698(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9B27D0;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9B2520;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9B2800;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_20E96587C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B2800;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20E9658BC(uint64_t a1)
{
  sub_20E965698(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E9658E0(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B2800;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E965930(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20E965944(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9B2838;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9B2520;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9B2868;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_20E965B28(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B2868;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20E965B68(uint64_t a1)
{
  sub_20E965944(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E965B8C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B2868;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E965BDC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20E965BF0(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9B28A0;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9B2520;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9B28D0;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_20E965DD4(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B28D0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20E965E14(uint64_t a1)
{
  sub_20E965BF0(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E965E38(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B28D0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E965E88(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20E965E9C(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9B2908;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9B2520;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9B2938;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_20E966080(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B2938;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20E9660C0(uint64_t a1)
{
  sub_20E965E9C(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E9660E4(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B2938;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E966134(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20E966148(uint64_t a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)a1 = &off_24C9B2970;
  v2 = (uint64_t *)(a1 + 72);
  sub_20E966260((uint64_t *)(a1 + 72), 0);
  v3 = *(std::__shared_weak_count **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    sub_20E966260(v2, 0);
    v6 = *(std::__shared_weak_count **)(a1 + 64);
    if (!v6)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    sub_20E966260(v2, 0);
    v6 = *(std::__shared_weak_count **)(a1 + 64);
    if (!v6)
      goto LABEL_11;
  }
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_11:
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t *sub_20E966260(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    sub_20E9643EC(v2 + 1008);
    sub_20E966300(v2 + 840);
    sub_20E96672C(v2 + 672);
    sub_20E965698(v2 + 504);
    sub_20E965944(v2 + 336);
    sub_20E965BF0(v2 + 168);
    sub_20E965E9C(v2);
    JUMPOUT(0x212BC6398);
  }
  return result;
}

void sub_20E9662D8(uint64_t a1)
{
  sub_20E966148(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E966300(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9B29A0;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9B29D0;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9B2630;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_20E9664E4(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9B29D0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20E96651C(uint64_t a1)
{
  sub_20E966300(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E966540(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9B29D0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20E966588(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C9B2A08;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C9B2A08;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20E96665C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E966688(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B2A08;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20E9666C8(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B2A08;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E966718(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20E96672C(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9B2A40;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9B2A70;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9B2AE0;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_20E966910(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9B2A70;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

_QWORD *sub_20E966948(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B2AE0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20E966988(uint64_t a1)
{
  sub_20E96672C(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E9669AC(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9B2A70;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20E9669F4(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C9B2AA8;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C9B2AA8;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20E966AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E966AF4(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B2AA8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20E966B34(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B2AA8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E966B84(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_20E966B94(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B2AE0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E966BE4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20E966BF8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)a1 = &off_24C9B2B18;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
  {
    sub_20E966D70(v2 + 168);
    v3 = sub_20E96701C(v2);
    MEMORY[0x212BC6398](v3, 0x10B2C4059065CFELL);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      v7 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = 0;
      if (!v7)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  v7 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v7)
  {
LABEL_8:
    sub_20E966D70(v7 + 168);
    v8 = sub_20E96701C(v7);
    MEMORY[0x212BC6398](v8, 0x10B2C4059065CFELL);
  }
LABEL_9:
  v9 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v9)
    goto LABEL_13;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
  {
LABEL_13:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_19:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_19;
LABEL_14:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_20:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20E966D48(uint64_t a1)
{
  sub_20E966BF8(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E966D70(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9B2B48;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9B2520;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9B2B78;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_20E966F54(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B2B78;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20E966F94(uint64_t a1)
{
  sub_20E966D70(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E966FB8(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B2B78;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E967008(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20E96701C(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9B2BB0;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2BE0;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9B2C50;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9B2C88;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_20E967200(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9B2BE0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

_QWORD *sub_20E967238(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9B2C50;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

_QWORD *sub_20E967270(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B2C88;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20E9672B0(uint64_t a1)
{
  sub_20E96701C(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E9672D4(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9B2BE0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20E96731C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C9B2C18;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C9B2C18;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20E9673F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E96741C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B2C18;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20E96745C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B2C18;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E9674AC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_20E9674BC(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9B2C50;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20E967504(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C9B28D0;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C9B28D0;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20E9675D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E967604(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B2C88;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E967654(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20E967668(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)a1 = &off_24C9B2CC0;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
  {
    sub_20E9677E0(v2 + 168);
    v3 = sub_20E967B6C(v2);
    MEMORY[0x212BC6398](v3, 0x10B2C4059065CFELL);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      v7 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = 0;
      if (!v7)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  v7 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v7)
  {
LABEL_8:
    sub_20E9677E0(v7 + 168);
    v8 = sub_20E967B6C(v7);
    MEMORY[0x212BC6398](v8, 0x10B2C4059065CFELL);
  }
LABEL_9:
  v9 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v9)
    goto LABEL_13;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
  {
LABEL_13:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_19:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_19;
LABEL_14:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_20:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20E9677B8(uint64_t a1)
{
  sub_20E967668(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E9677E0(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9B2CF0;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9B2D20;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9B2558;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_20E9679C4(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9B2D20;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20E9679FC(uint64_t a1)
{
  sub_20E9677E0(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E967A20(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9B2D20;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20E967A68(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C9B2558;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C9B2558;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20E967B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20E967B6C(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9B2D58;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9B2D88;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9B2DC0;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_20E967D50(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9B2D88;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

_QWORD *sub_20E967D88(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B2DC0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20E967DC8(uint64_t a1)
{
  sub_20E967B6C(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E967DEC(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9B2D88;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20E967E34(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C9B2800;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C9B2800;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20E967F08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E967F34(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B2DC0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E967F84(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20E967F98(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)a1 = &off_24C9B2DF8;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
  {
    v3 = sub_20E9680F8(v2);
    MEMORY[0x212BC6398](v3, 0x10B2C4085F70915);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      v7 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = 0;
      if (!v7)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  v7 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v7)
  {
LABEL_8:
    v8 = sub_20E9680F8(v7);
    MEMORY[0x212BC6398](v8, 0x10B2C4085F70915);
  }
LABEL_9:
  v9 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v9)
    goto LABEL_13;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
  {
LABEL_13:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_19:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_19;
LABEL_14:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_20:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20E9680D0(uint64_t a1)
{
  sub_20E967F98(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E9680F8(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9B2E28;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9B2E58;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9B2E90;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_20E9682DC(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9B2E58;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

_QWORD *sub_20E968314(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B2E90;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20E968354(uint64_t a1)
{
  sub_20E9680F8(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E968378(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9B2E58;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20E9683C0(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C9B2868;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C9B2868;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20E968494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E9684C0(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B2E90;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E968510(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20E968524(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)a1 = &off_24C9B2EC8;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
  {
    v3 = sub_20E968684(v2);
    MEMORY[0x212BC6398](v3, 0x10B2C4085F70915);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      v7 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = 0;
      if (!v7)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  v7 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v7)
  {
LABEL_8:
    v8 = sub_20E968684(v7);
    MEMORY[0x212BC6398](v8, 0x10B2C4085F70915);
  }
LABEL_9:
  v9 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v9)
    goto LABEL_13;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
  {
LABEL_13:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_19:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_19;
LABEL_14:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_20:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20E96865C(uint64_t a1)
{
  sub_20E968524(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E968684(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9B2EF8;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9B2F28;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9B2F60;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_20E968868(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9B2F28;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

_QWORD *sub_20E9688A0(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B2F60;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20E9688E0(uint64_t a1)
{
  sub_20E968684(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E968904(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9B2F28;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20E96894C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C9B2C88;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C9B2C88;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20E968A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E968A4C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B2F60;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E968A9C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20E968AB0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)a1 = &off_24C9B2F98;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
  {
    v3 = sub_20E968C10(v2);
    MEMORY[0x212BC6398](v3, 0x10B2C4085F70915);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      v7 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = 0;
      if (!v7)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  v7 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v7)
  {
LABEL_8:
    v8 = sub_20E968C10(v7);
    MEMORY[0x212BC6398](v8, 0x10B2C4085F70915);
  }
LABEL_9:
  v9 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v9)
    goto LABEL_13;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
  {
LABEL_13:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_19:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_19;
LABEL_14:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_20:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20E968BE8(uint64_t a1)
{
  sub_20E968AB0(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E968C10(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9B2FC8;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9B2FF8;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9B3030;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_20E968DF4(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9B2FF8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

_QWORD *sub_20E968E2C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B3030;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20E968E6C(uint64_t a1)
{
  sub_20E968C10(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E968E90(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9B2FF8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20E968ED8(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C9B2938;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C9B2938;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20E968FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E968FD8(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B3030;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E969028(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

_QWORD *sub_20E969038(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  unint64_t v6;
  char *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 != *a2)
  {
    v6 = 0xEEEEEEEEEEEEEEEFLL * (v5 >> 3);
    if (v6 >= 0x222222222222223)
      sub_20E969238();
    v7 = (char *)operator new(v5);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[120 * v6];
    sub_20E96912C((uint64_t)a1, v3, v4);
  }
  return a1;
}

void sub_20E9690CC(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v3;
  char *v4;
  void *v5;
  char *v6;

  v3 = (char *)*v1;
  if (*v1)
  {
    v4 = (char *)v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      do
      {
        if (*((_QWORD *)v4 - 13))
        {
          v6 = (char *)*((_QWORD *)v4 - 15);
          if (v4 - 96 != v6)
            operator delete(v6);
        }
        v4 -= 120;
      }
      while (v4 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_20E96912C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;

  v4 = *(_QWORD *)(a1 + 8);
  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      v8 = v4 + v7;
      v9 = a2 + v7;
      *(_QWORD *)v8 = v4 + v7 + 24;
      *(_OWORD *)(v8 + 8) = xmmword_2102E0CB0;
      v10 = *(_QWORD *)(a2 + v7 + 8);
      v12 = *(uint64_t **)(a2 + v7);
      v11 = &v12[4 * v10];
      sub_20E96924C((_QWORD *)(v4 + v7), &v12, &v11);
      v7 += 120;
    }
    while (v9 + 120 != a3);
    v4 += v7;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_20E9691E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v7;
  uint64_t v8;
  void *v9;

  if (*(_QWORD *)(v2 + 16))
  {
    v7 = *(void **)(v3 + v4);
    if (v5 != v7)
      operator delete(v7);
  }
  for (; v4; v4 -= 120)
  {
    v8 = v3 + v4;
    if (*(_QWORD *)(v3 + v4 - 104))
    {
      v9 = *(void **)(v8 - 120);
      if ((void *)(v8 - 96) != v9)
        operator delete(v9);
    }
  }
  *(_QWORD *)(v1 + 8) = v3;
  _Unwind_Resume(exception_object);
}

void sub_20E969238()
{
  sub_20E860B90("vector");
}

void sub_20E96924C(_QWORD *a1, uint64_t **a2, uint64_t **a3)
{
  uint64_t *v4;
  int64_t v5;
  unint64_t v6;
  _DWORD *v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t *v12;
  _DWORD *i;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = *a2;
  v5 = (char *)*a3 - (char *)*a2;
  v6 = v5 >> 5;
  if ((unint64_t)(v5 >> 5) <= a1[2])
  {
    v16 = (_QWORD *)*a1;
    v17 = a1[1];
    v18 = v17 - v6;
    if (v17 >= v6)
    {
      if (*a3 != v4)
      {
        v25 = v5 >> 5;
        do
        {
          v26 = *v4;
          *((_DWORD *)v16 + 2) = *((_DWORD *)v4 + 2);
          *v16 = v26;
          v27 = v4[2];
          *((_DWORD *)v16 + 6) = *((_DWORD *)v4 + 6);
          v16[2] = v27;
          v16 += 4;
          v4 += 4;
          --v25;
        }
        while (v25);
      }
    }
    else
    {
      if (v17)
      {
        v19 = a1[1];
        do
        {
          v20 = *v4;
          *((_DWORD *)v16 + 2) = *((_DWORD *)v4 + 2);
          *v16 = v20;
          v21 = v4[2];
          *((_DWORD *)v16 + 6) = *((_DWORD *)v4 + 6);
          v16[2] = v21;
          v4 += 4;
          v16 += 4;
          --v19;
        }
        while (v19);
      }
      if (v6 != v17)
      {
        do
        {
          v22 = *v4;
          *((_DWORD *)v16 + 2) = *((_DWORD *)v4 + 2);
          *v16 = v22;
          v23 = v4[2];
          *((_DWORD *)v16 + 6) = *((_DWORD *)v4 + 6);
          v16[2] = v23;
          v16 += 4;
          v4 += 4;
        }
        while (!__CFADD__(v18++, 1));
      }
    }
    a1[1] = v6;
  }
  else
  {
    if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFE1)
      sub_20E969408((uint64_t)"get_next_capacity, allocator's max size reached");
    v9 = operator new(v5);
    v10 = (_QWORD *)*a1;
    if (*a1)
    {
      a1[1] = 0;
      if (a1 + 3 != v10)
        operator delete(v10);
    }
    a1[1] = 0;
    a1[2] = v6;
    *a1 = v9;
    v11 = *a2;
    v12 = *a3;
    for (i = v9; v11 != v12; v11 += 4)
    {
      v14 = *v11;
      i[2] = *((_DWORD *)v11 + 2);
      *(_QWORD *)i = v14;
      v15 = v11[2];
      i[6] = *((_DWORD *)v11 + 6);
      *((_QWORD *)i + 2) = v15;
      i += 8;
    }
    a1[1] = ((char *)i - (char *)v9) >> 5;
  }
}

void sub_20E969408(uint64_t a1)
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  *exception = &unk_24C9B2288;
  exception[1] = a1;
  __cxa_throw(exception, (struct type_info *)&unk_24C9B2260, (void (*)(void *))std::exception::~exception);
}

void sub_20E969448(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x212BC6398);
}

const char *sub_20E96946C(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 8))
    return *(const char **)(a1 + 8);
  else
    return "unknown boost::container exception";
}

uint64_t sub_20E969484(uint64_t a1, _BYTE *a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 72) = 0;
  if (a2[72])
  {
    sub_20E969678((_QWORD *)a1, (uint64_t)a2);
    *(_BYTE *)(a1 + 72) = 1;
  }
  *(_BYTE *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  if (a2[152])
  {
    sub_20E969814((_QWORD *)(a1 + 80), (uint64_t)(a2 + 80));
    *(_BYTE *)(a1 + 152) = 1;
  }
  *(_BYTE *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  if (a2[208])
  {
    sub_20E9699B0((_QWORD *)(a1 + 160), (uint64_t)(a2 + 160));
    *(_BYTE *)(a1 + 208) = 1;
  }
  return a1;
}

void sub_20E969524(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void *v5;
  void *v6;

  if (*(_BYTE *)(v1 + 208))
  {
    v5 = *(void **)(v1 + 184);
    if (v5)
    {
      *(_QWORD *)(v1 + 192) = v5;
      operator delete(v5);
    }
    v6 = *v3;
    if (*v3)
    {
      *(_QWORD *)(v1 + 168) = v6;
      operator delete(v6);
    }
  }
  sub_20E969620(v2);
  sub_20E969620(v1);
  _Unwind_Resume(a1);
}

void sub_20E969568(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;
  void *v6;

  if (*(_BYTE *)(v1 + 152))
  {
    v4 = *(void **)(v1 + 128);
    if (v4)
    {
      *(_QWORD *)(v1 + 136) = v4;
      operator delete(v4);
      v5 = *(void **)(v1 + 104);
      if (!v5)
      {
LABEL_4:
        v6 = *v2;
        if (!*v2)
          goto LABEL_6;
        goto LABEL_5;
      }
    }
    else
    {
      v5 = *(void **)(v1 + 104);
      if (!v5)
        goto LABEL_4;
    }
    *(_QWORD *)(v1 + 112) = v5;
    operator delete(v5);
    v6 = *v2;
    if (*v2)
    {
LABEL_5:
      *(_QWORD *)(v1 + 88) = v6;
      operator delete(v6);
    }
  }
LABEL_6:
  sub_20E969620(v1);
  _Unwind_Resume(a1);
}

void sub_20E9695C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;
  void *v4;
  void *v5;

  if (*(_BYTE *)(v1 + 72))
  {
    v3 = *(void **)(v1 + 48);
    if (v3)
    {
      *(_QWORD *)(v1 + 56) = v3;
      operator delete(v3);
      v4 = *(void **)(v1 + 24);
      if (!v4)
      {
LABEL_4:
        v5 = *(void **)v1;
        if (!*(_QWORD *)v1)
          goto LABEL_6;
        goto LABEL_5;
      }
    }
    else
    {
      v4 = *(void **)(v1 + 24);
      if (!v4)
        goto LABEL_4;
    }
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
    v5 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
LABEL_5:
      *(_QWORD *)(v1 + 8) = v5;
      operator delete(v5);
    }
  }
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E969620(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  if (*(_BYTE *)(a1 + 72))
  {
    v2 = *(void **)(a1 + 48);
    if (v2)
    {
      *(_QWORD *)(a1 + 56) = v2;
      operator delete(v2);
    }
    v3 = *(void **)(a1 + 24);
    if (v3)
    {
      *(_QWORD *)(a1 + 32) = v3;
      operator delete(v3);
    }
    v4 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v4;
      operator delete(v4);
    }
  }
  return a1;
}

_QWORD *sub_20E969678(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v7;
  char *v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  _BYTE *v14;
  _BYTE *v15;
  int64_t v16;
  char *v17;
  char *v18;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v5 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD *)a2)
  {
    if (v6 < 0)
      sub_20E92CED8();
    v7 = (char *)operator new(v4 - *(_QWORD *)a2);
    *a1 = v7;
    a1[1] = v7;
    v8 = &v7[8 * (v6 >> 3)];
    a1[2] = v8;
    memcpy(v7, v5, v6);
    a1[1] = v8;
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  v10 = *(_BYTE **)(a2 + 24);
  v9 = *(_BYTE **)(a2 + 32);
  v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0)
      sub_20E95E0B0();
    v12 = (char *)operator new(v9 - v10);
    a1[3] = v12;
    a1[4] = v12;
    a1[5] = &v12[32 * (v11 >> 5)];
    v13 = v11 & 0xFFFFFFFFFFFFFFE0;
    memcpy(v12, v10, v13);
    a1[4] = &v12[v13];
  }
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  v15 = *(_BYTE **)(a2 + 48);
  v14 = *(_BYTE **)(a2 + 56);
  v16 = v14 - v15;
  if (v14 != v15)
  {
    if (v16 < 0)
      sub_20E867F44();
    v17 = (char *)operator new(v14 - v15);
    a1[6] = v17;
    a1[7] = v17;
    v18 = &v17[8 * (v16 >> 3)];
    a1[8] = v18;
    memcpy(v17, v15, v16);
    a1[7] = v18;
  }
  return a1;
}

void sub_20E9697A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;
  void *v7;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 56) = v5;
    operator delete(v5);
    v6 = *v2;
    if (!*v2)
    {
LABEL_3:
      v7 = *(void **)v1;
      if (!*(_QWORD *)v1)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v6 = *v2;
    if (!*v2)
      goto LABEL_3;
  }
  *(_QWORD *)(v1 + 32) = v6;
  operator delete(v6);
  v7 = *(void **)v1;
  if (!*(_QWORD *)v1)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_4:
  *(_QWORD *)(v1 + 8) = v7;
  operator delete(v7);
  goto LABEL_5;
}

void sub_20E969804()
{
  _QWORD *v0;

  if (!*v0)
    JUMPOUT(0x20E9697C8);
  JUMPOUT(0x20E9697C0);
}

_QWORD *sub_20E969814(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v7;
  char *v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  _BYTE *v14;
  _BYTE *v15;
  int64_t v16;
  char *v17;
  char *v18;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v5 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD *)a2)
  {
    if (v6 < 0)
      sub_20E92CED8();
    v7 = (char *)operator new(v4 - *(_QWORD *)a2);
    *a1 = v7;
    a1[1] = v7;
    v8 = &v7[8 * (v6 >> 3)];
    a1[2] = v8;
    memcpy(v7, v5, v6);
    a1[1] = v8;
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  v10 = *(_BYTE **)(a2 + 24);
  v9 = *(_BYTE **)(a2 + 32);
  v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0)
      sub_20E95E0B0();
    v12 = (char *)operator new(v9 - v10);
    a1[3] = v12;
    a1[4] = v12;
    a1[5] = &v12[32 * (v11 >> 5)];
    v13 = v11 & 0xFFFFFFFFFFFFFFE0;
    memcpy(v12, v10, v13);
    a1[4] = &v12[v13];
  }
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  v15 = *(_BYTE **)(a2 + 48);
  v14 = *(_BYTE **)(a2 + 56);
  v16 = v14 - v15;
  if (v14 != v15)
  {
    if (v16 < 0)
      sub_20E867F44();
    v17 = (char *)operator new(v14 - v15);
    a1[6] = v17;
    a1[7] = v17;
    v18 = &v17[8 * (v16 >> 3)];
    a1[8] = v18;
    memcpy(v17, v15, v16);
    a1[7] = v18;
  }
  return a1;
}

void sub_20E969940(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;
  void *v7;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 56) = v5;
    operator delete(v5);
    v6 = *v2;
    if (!*v2)
    {
LABEL_3:
      v7 = *(void **)v1;
      if (!*(_QWORD *)v1)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v6 = *v2;
    if (!*v2)
      goto LABEL_3;
  }
  *(_QWORD *)(v1 + 32) = v6;
  operator delete(v6);
  v7 = *(void **)v1;
  if (!*(_QWORD *)v1)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_4:
  *(_QWORD *)(v1 + 8) = v7;
  operator delete(v7);
  goto LABEL_5;
}

void sub_20E9699A0()
{
  _QWORD *v0;

  if (!*v0)
    JUMPOUT(0x20E969964);
  JUMPOUT(0x20E96995CLL);
}

_QWORD *sub_20E9699B0(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v7;
  size_t v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  char *v12;
  size_t v13;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v5 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD *)a2)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v6 >> 3) >= 0xAAAAAAAAAAAAAABLL)
      sub_20E969238();
    v7 = (char *)operator new(v6);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[8 * (v6 >> 3)];
    v8 = 24 * ((v6 - 24) / 0x18uLL) + 24;
    memcpy(v7, v5, v8);
    a1[1] = &v7[v8];
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  v10 = *(_BYTE **)(a2 + 24);
  v9 = *(_BYTE **)(a2 + 32);
  v11 = v9 - v10;
  if (v9 != v10)
  {
    if (0x8E38E38E38E38E39 * (v11 >> 2) >= 0x71C71C71C71C71DLL)
      sub_20E867F44();
    v12 = (char *)operator new(v11);
    a1[3] = v12;
    a1[4] = v12;
    a1[5] = &v12[4 * (v11 >> 2)];
    v13 = 36 * ((v11 - 36) / 0x24uLL) + 36;
    memcpy(v12, v10, v13);
    a1[4] = &v12[v13];
  }
  return a1;
}

void sub_20E969B1C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  v5 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E969B50(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  unsigned int *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_20E8D2B3C(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(unsigned int **)(a2 + 16); i; i = *(unsigned int **)i)
    sub_20E969D10(a1, i + 4, (uint64_t)(i + 4));
  return a1;
}

void sub_20E969C68(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E969C90(v1);
  _Unwind_Resume(a1);
}

void sub_20E969C7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E969C90(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20E969C90(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = (_QWORD *)v2[6];
      if (v6)
      {
        do
        {
          v7 = (_QWORD *)*v6;
          operator delete(v6);
          v6 = v7;
        }
        while (v7);
      }
      v8 = (void *)v2[4];
      v2[4] = 0;
      if (v8)
        operator delete(v8);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

_QWORD *sub_20E969D10(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *result;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _QWORD *v15;
  _QWORD *v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  int8x8_t v21;
  unint64_t v22;
  uint8x8_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      result = (_QWORD *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = result[1];
            if (v12 == v6)
            {
              if (*((_DWORD *)result + 4) == (_DWORD)v6)
                return result;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            result = (_QWORD *)*result;
            if (!result)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = result[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)result + 4) == (_DWORD)v6)
              return result;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          result = (_QWORD *)*result;
        }
        while (result);
      }
    }
  }
LABEL_23:
  v26 = operator new(0x48uLL);
  *v26 = 0;
  v26[1] = v6;
  *((_DWORD *)v26 + 4) = *(_DWORD *)a3;
  *((_DWORD *)v26 + 6) = *(_DWORD *)(a3 + 8);
  *((_BYTE *)v26 + 28) = *(_BYTE *)(a3 + 12);
  sub_20E96A108((uint64_t)(v26 + 4), a3 + 16);
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v17 = 1;
    if (v7 >= 3)
      v17 = (v7 & (v7 - 1)) != 0;
    v18 = v17 | (2 * v7);
    v19 = vcvtps_u32_f32(v13 / v14);
    if (v18 <= v19)
      prime = v19;
    else
      prime = v18;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v21 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v21)
      goto LABEL_37;
    if (prime < *(_QWORD *)&v21)
    {
      v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v21 < 3uLL || (v23 = (uint8x8_t)vcnt_s8(v21), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
      {
        v22 = std::__next_prime(v22);
      }
      else
      {
        v24 = 1 << -(char)__clz(v22 - 1);
        if (v22 >= 2)
          v22 = v24;
      }
      if (prime <= v22)
        prime = v22;
      if (prime < *(_QWORD *)&v21)
LABEL_37:
        sub_20E8D2B3C(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
      {
        v3 = v6 % v7;
        v15 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
        v16 = v26;
        if (v15)
          goto LABEL_26;
      }
      else
      {
        v3 = v6;
        v15 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
        v16 = v26;
        if (v15)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
      v15 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
      v16 = v26;
      if (v15)
        goto LABEL_26;
    }
LABEL_50:
    *v16 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*v26)
    {
      v25 = *(_QWORD *)(*v26 + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v25 >= v7)
          v25 %= v7;
      }
      else
      {
        v25 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v26;
    }
    goto LABEL_61;
  }
  v15 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v16 = v26;
  if (!v15)
    goto LABEL_50;
LABEL_26:
  *v16 = *v15;
  *v15 = v26;
LABEL_61:
  result = v26;
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_20E96A074(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E96A09C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E96A088(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E96A09C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20E96A09C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (_QWORD *)v2[6];
      if (v3)
      {
        do
        {
          v4 = (_QWORD *)*v3;
          operator delete(v3);
          v3 = v4;
        }
        while (v4);
      }
      v5 = (void *)v2[4];
      v2[4] = 0;
      if (v5)
        operator delete(v5);
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_20E96A108(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  unsigned int *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_20E8D2B3C(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(unsigned int **)(a2 + 16); i; i = *(unsigned int **)i)
    sub_20E96A248(a1, i + 4, (_QWORD *)i + 2);
  return a1;
}

void sub_20E96A220(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8C25A8(v1);
  _Unwind_Resume(a1);
}

void sub_20E96A234(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8C25A8(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20E96A248(uint64_t a1, unsigned int *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  unint64_t v21;
  uint8x8_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == v6)
            {
              if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = (uint64_t *)*v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v14 = operator new(0x18uLL);
  *v14 = 0;
  v14[1] = v6;
  v14[2] = *a3;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    v6 = v3;
  }
  else
  {
    v17 = 1;
    if (v7 >= 3)
      v17 = (v7 & (v7 - 1)) != 0;
    v18 = v17 | (2 * v7);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = v19;
    else
      prime = v18;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_36;
    if (prime < v7)
    {
      v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v22 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        v21 = std::__next_prime(v21);
      }
      else
      {
        v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2)
          v21 = v23;
      }
      if (prime <= v21)
        prime = v21;
      if (prime < v7)
LABEL_36:
        sub_20E8D2B3C(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v6 %= v7;
    }
    else
    {
      v6 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
  if (v25)
  {
    *v14 = *v25;
LABEL_59:
    *v25 = v14;
    goto LABEL_60;
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v24 + 8 * v6) = a1 + 16;
  if (*v14)
  {
    v26 = *(_QWORD *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v26 >= v7)
        v26 %= v7;
    }
    else
    {
      v26 &= v7 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_20E96A534(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20E96A548(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 464;
    sub_20E96ACE0(i - 464);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20E96A598(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  int64_t v18;
  char *v19;
  char *v20;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 28) = v5;
  v6 = *(_OWORD *)(a2 + 40);
  v7 = *(_OWORD *)(a2 + 56);
  v8 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v8;
  *(_OWORD *)(a1 + 56) = v7;
  *(_OWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 216) = 0;
  if (*(_BYTE *)(a2 + 216))
  {
    *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
    v9 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = v9;
    v10 = *(_OWORD *)(a2 + 152);
    v11 = *(_OWORD *)(a2 + 168);
    v12 = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 184) = v12;
    *(_OWORD *)(a1 + 168) = v11;
    *(_OWORD *)(a1 + 152) = v10;
    *(_BYTE *)(a1 + 216) = 1;
  }
  v13 = *(_OWORD *)(a2 + 224);
  v14 = *(_OWORD *)(a2 + 256);
  v15 = *(_QWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = v14;
  *(_OWORD *)(a1 + 224) = v13;
  *(_QWORD *)(a1 + 272) = v15;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  v17 = *(_BYTE **)(a2 + 280);
  v16 = *(_BYTE **)(a2 + 288);
  v18 = v16 - v17;
  if (v16 != v17)
  {
    if (v18 < 0)
      sub_20E969238();
    v19 = (char *)operator new(v16 - v17);
    *(_QWORD *)(a1 + 280) = v19;
    *(_QWORD *)(a1 + 288) = v19;
    v20 = &v19[16 * (v18 >> 4)];
    *(_QWORD *)(a1 + 296) = v20;
    memcpy(v19, v17, v18);
    *(_QWORD *)(a1 + 288) = v20;
  }
  *(_BYTE *)(a1 + 304) = 0;
  *(_BYTE *)(a1 + 320) = 0;
  if (*(_BYTE *)(a2 + 320))
  {
    *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
    *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
    *(_BYTE *)(a1 + 320) = 1;
  }
  *(_BYTE *)(a1 + 324) = 0;
  *(_BYTE *)(a1 + 356) = 0;
  if (*(_BYTE *)(a2 + 356))
  {
    *(_QWORD *)(a1 + 324) = *(_QWORD *)(a2 + 324);
    *(_QWORD *)(a1 + 332) = *(_QWORD *)(a2 + 332);
    *(_QWORD *)(a1 + 340) = *(_QWORD *)(a2 + 340);
    *(_QWORD *)(a1 + 348) = *(_QWORD *)(a2 + 348);
    *(_BYTE *)(a1 + 356) = 1;
  }
  sub_20E96A844(a1 + 360, a2 + 360);
  sub_20E96A910(a1 + 392, a2 + 392);
  *(_BYTE *)(a1 + 424) = 0;
  *(_BYTE *)(a1 + 448) = 0;
  if (*(_BYTE *)(a2 + 448))
  {
    sub_20E96AA5C((_QWORD *)(a1 + 424), (uint64_t *)(a2 + 424));
    *(_BYTE *)(a1 + 448) = 1;
  }
  *(_WORD *)(a1 + 456) = *(_WORD *)(a2 + 456);
  return a1;
}

void sub_20E96A790(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  char *v7;
  char *v8;
  void *v9;
  char *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  if (*(_BYTE *)(v1 + 448))
  {
    v7 = (char *)*v5;
    if (*v5)
    {
      v8 = *(char **)(v1 + 432);
      v9 = *v5;
      if (v8 != v7)
      {
        v10 = *(char **)(v1 + 432);
        do
        {
          v12 = (void *)*((_QWORD *)v10 - 3);
          v10 -= 24;
          v11 = v12;
          if (v12)
          {
            *((_QWORD *)v8 - 2) = v11;
            operator delete(v11);
          }
          v8 = v10;
        }
        while (v10 != v7);
        v9 = *v5;
      }
      *(_QWORD *)(v1 + 432) = v7;
      operator delete(v9);
    }
  }
  if (*(_BYTE *)(v1 + 416))
  {
    v13 = *v4;
    if (*v4)
    {
      *(_QWORD *)(v1 + 400) = v13;
      operator delete(v13);
    }
  }
  if (*(_BYTE *)(v1 + 384))
  {
    v14 = *v3;
    if (*v3)
    {
      *(_QWORD *)(v1 + 368) = v14;
      operator delete(v14);
    }
  }
  v15 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 288) = v15;
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E96A844(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  uint64_t v5;
  char *v6;
  size_t v7;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    v4 = *(const void **)a2;
    v3 = *(_QWORD *)(a2 + 8);
    v5 = v3 - *(_QWORD *)a2;
    if (v3 != *(_QWORD *)a2)
    {
      if (v5 < 0)
        sub_20E969238();
      v6 = (char *)operator new(v3 - *(_QWORD *)a2);
      *(_QWORD *)a1 = v6;
      *(_QWORD *)(a1 + 8) = v6;
      *(_QWORD *)(a1 + 16) = &v6[8 * (v5 >> 3)];
      v7 = v5 & 0xFFFFFFFFFFFFFFF8;
      memcpy(v6, v4, v7);
      *(_QWORD *)(a1 + 8) = &v6[v7];
    }
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

void sub_20E96A8DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;
  void *v4;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  if (*(_BYTE *)(v1 + 24))
  {
    v4 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v4;
      operator delete(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E96A910(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _OWORD *v14;
  __int128 *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    v4 = *(_QWORD **)a2;
    v3 = *(_QWORD **)(a2 + 8);
    v5 = (uint64_t)v3 - *(_QWORD *)a2;
    if (v3 != *(_QWORD **)a2)
    {
      if (v5 < 0)
        sub_20E969238();
      v6 = operator new((size_t)v3 - *(_QWORD *)a2);
      *(_QWORD *)a1 = v6;
      *(_QWORD *)(a1 + 8) = v6;
      *(_QWORD *)(a1 + 16) = &v6[2 * (v5 >> 4)];
      v7 = v5 - 16;
      if ((unint64_t)(v5 - 16) < 0x90)
        goto LABEL_21;
      v8 = (v7 & 0xFFFFFFFFFFFFFFF0) + 16;
      if (v6 < (_QWORD *)((char *)v4 + v8) && v4 < (_QWORD *)((char *)v6 + v8))
        goto LABEL_21;
      v10 = (v7 >> 4) + 1;
      v11 = 2 * (v10 & 0x1FFFFFFFFFFFFFFCLL);
      v12 = &v4[v11];
      v13 = &v6[v11];
      v14 = v6 + 4;
      v15 = (__int128 *)(v4 + 4);
      v16 = v10 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        v18 = *(v15 - 2);
        v17 = *(v15 - 1);
        v20 = *v15;
        v19 = v15[1];
        v15 += 4;
        *(v14 - 2) = v18;
        *(v14 - 1) = v17;
        *v14 = v20;
        v14[1] = v19;
        v14 += 4;
        v16 -= 4;
      }
      while (v16);
      v4 = v12;
      v6 = v13;
      if (v10 != (v10 & 0x1FFFFFFFFFFFFFFCLL))
      {
LABEL_21:
        do
        {
          *v6 = *v4;
          v6[1] = v4[1];
          v6 += 2;
          v4 += 2;
        }
        while (v4 != v3);
        v13 = v6;
      }
      *(_QWORD *)(a1 + 8) = v13;
    }
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

void sub_20E96AA28(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;
  void *v4;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  if (*(_BYTE *)(v1 + 24))
  {
    v4 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v4;
      operator delete(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20E96AA5C(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  _QWORD *v8;

  a1[2] = 0;
  v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = v5 - *a2;
  if (v5 != *a2)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    if (v7 >= 0xAAAAAAAAAAAAAABLL)
      sub_20E969238();
    v8 = operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[3 * v7];
    a1[1] = sub_20E96AB68(v3, v4, v5, v8);
  }
  return a1;
}

void sub_20E96AB04(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v2;
  char *v4;
  char *v5;
  void *v6;
  char *v7;
  void *v8;
  void *v9;

  v1[1] = v2;
  v4 = (char *)*v1;
  if (*v1)
  {
    v5 = (char *)v1[1];
    v6 = *v1;
    if (v5 != v4)
    {
      v7 = (char *)v1[1];
      do
      {
        v9 = (void *)*((_QWORD *)v7 - 3);
        v7 -= 24;
        v8 = v9;
        if (v9)
        {
          *((_QWORD *)v5 - 2) = v8;
          operator delete(v8);
        }
        v5 = v7;
      }
      while (v7 != v4);
      v6 = *v1;
    }
    v1[1] = v4;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20E96AB68(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  char *v7;
  size_t v8;
  uint64_t v9;
  const void *v10;
  uint64_t v11;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      v10 = *(const void **)v6;
      v9 = *(_QWORD *)(v6 + 8);
      v11 = v9 - *(_QWORD *)v6;
      if (v9 != *(_QWORD *)v6)
      {
        if (v11 < 0)
          sub_20E969238();
        v7 = (char *)operator new(v9 - *(_QWORD *)v6);
        *a4 = v7;
        a4[1] = v7;
        a4[2] = &v7[8 * (v11 >> 3)];
        v8 = v11 & 0xFFFFFFFFFFFFFFF8;
        memcpy(v7, v10, v8);
        a4[1] = &v7[v8];
      }
      a4 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_20E96AC3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E96AC74((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E96AC50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_20E96AC74((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20E96AC74(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    if (v3 != v4)
    {
      v5 = **(_QWORD **)(a1 + 16);
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v4);
    }
  }
  return a1;
}

void sub_20E96ACE0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  if (*(_BYTE *)(a1 + 448))
  {
    v2 = *(_QWORD *)(a1 + 424);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 432);
      v4 = *(void **)(a1 + 424);
      if (v3 != v2)
      {
        v5 = *(_QWORD *)(a1 + 432);
        do
        {
          v7 = *(void **)(v5 - 24);
          v5 -= 24;
          v6 = v7;
          if (v7)
          {
            *(_QWORD *)(v3 - 16) = v6;
            operator delete(v6);
          }
          v3 = v5;
        }
        while (v5 != v2);
        v4 = *(void **)(a1 + 424);
      }
      *(_QWORD *)(a1 + 432) = v2;
      operator delete(v4);
    }
  }
  if (*(_BYTE *)(a1 + 416))
  {
    v8 = *(void **)(a1 + 392);
    if (v8)
    {
      *(_QWORD *)(a1 + 400) = v8;
      operator delete(v8);
    }
  }
  if (*(_BYTE *)(a1 + 384))
  {
    v9 = *(void **)(a1 + 360);
    if (v9)
    {
      *(_QWORD *)(a1 + 368) = v9;
      operator delete(v9);
    }
  }
  v10 = *(void **)(a1 + 280);
  if (v10)
  {
    *(_QWORD *)(a1 + 288) = v10;
    operator delete(v10);
  }
}

uint64_t sub_20E96ADA4(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v15;
  __int128 v16;

  v3 = 0x34F72C234F72C235 * ((uint64_t)(a1[1] - *a1) >> 4);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x8D3DCB08D3DCB0)
    sub_20E969238();
  if (0x69EE58469EE5846ALL * ((uint64_t)(a1[2] - *a1) >> 4) > v4)
    v4 = 0x69EE58469EE5846ALL * ((uint64_t)(a1[2] - *a1) >> 4);
  if ((unint64_t)(0x34F72C234F72C235 * ((uint64_t)(a1[2] - *a1) >> 4)) >= 0x469EE58469EE58)
    v6 = 0x8D3DCB08D3DCB0;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x8D3DCB08D3DCB0)
      sub_20E877A38();
    v7 = (char *)operator new(464 * v6);
  }
  else
  {
    v7 = 0;
  }
  v15 = (uint64_t)&v7[464 * v3];
  *((_QWORD *)&v16 + 1) = &v7[464 * v6];
  sub_20E96AF60(v15, a2);
  v8 = 0;
  v10 = (void *)*a1;
  for (i = a1[1]; (void *)(i + v8) != v10; sub_20E96A598(v8 + v15, v8 + i))
    v8 -= 464;
  v11 = v15 + v8;
  v12 = (void *)*a1;
  v13 = a1[1];
  *a1 = v11;
  *(_QWORD *)&v16 = v15 + 464;
  *(_OWORD *)(a1 + 1) = v16;
  while ((void *)v13 != v12)
  {
    v13 -= 464;
    sub_20E96ACE0(v13);
  }
  if (v12)
    operator delete(v12);
  return v15 + 464;
}

void sub_20E96AF1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E96A548((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20E96AF60(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_OWORD *)result = *(_OWORD *)a2;
  v2 = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(result + 16) = v2;
  v3 = *(_QWORD *)(a2 + 28);
  *(_DWORD *)(result + 36) = *(_DWORD *)(a2 + 36);
  *(_QWORD *)(result + 28) = v3;
  v4 = *(_OWORD *)(a2 + 40);
  v5 = *(_OWORD *)(a2 + 56);
  v6 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(result + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(result + 72) = v6;
  *(_OWORD *)(result + 56) = v5;
  *(_OWORD *)(result + 40) = v4;
  *(_QWORD *)(result + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(result + 112) = 0;
  *(_BYTE *)(result + 216) = 0;
  if (*(_BYTE *)(a2 + 216))
  {
    *(_BYTE *)(result + 112) = *(_BYTE *)(a2 + 112);
    v7 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(result + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(result + 120) = v7;
    v8 = *(_OWORD *)(a2 + 152);
    v9 = *(_OWORD *)(a2 + 168);
    v10 = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(result + 200) = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(result + 184) = v10;
    *(_OWORD *)(result + 168) = v9;
    *(_OWORD *)(result + 152) = v8;
    *(_BYTE *)(result + 216) = 1;
  }
  v11 = *(_OWORD *)(a2 + 224);
  v12 = *(_OWORD *)(a2 + 256);
  v13 = *(_QWORD *)(a2 + 272);
  *(_OWORD *)(result + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(result + 256) = v12;
  *(_OWORD *)(result + 224) = v11;
  *(_QWORD *)(result + 272) = v13;
  *(_QWORD *)(result + 280) = 0;
  *(_QWORD *)(result + 288) = 0;
  *(_QWORD *)(result + 296) = 0;
  v14 = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(result + 280) = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(result + 288) = v14;
  *(_QWORD *)(result + 296) = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a2 + 280) = 0;
  *(_QWORD *)(a2 + 288) = 0;
  *(_QWORD *)(a2 + 296) = 0;
  *(_BYTE *)(result + 304) = 0;
  *(_BYTE *)(result + 320) = 0;
  if (*(_BYTE *)(a2 + 320))
  {
    *(_QWORD *)(result + 304) = *(_QWORD *)(a2 + 304);
    *(_QWORD *)(result + 312) = *(_QWORD *)(a2 + 312);
    *(_BYTE *)(result + 320) = 1;
  }
  *(_BYTE *)(result + 324) = 0;
  *(_BYTE *)(result + 356) = 0;
  if (*(_BYTE *)(a2 + 356))
  {
    *(_QWORD *)(result + 324) = *(_QWORD *)(a2 + 324);
    *(_QWORD *)(result + 332) = *(_QWORD *)(a2 + 332);
    *(_QWORD *)(result + 340) = *(_QWORD *)(a2 + 340);
    *(_QWORD *)(result + 348) = *(_QWORD *)(a2 + 348);
    *(_BYTE *)(result + 356) = 1;
  }
  *(_BYTE *)(result + 360) = 0;
  *(_BYTE *)(result + 384) = 0;
  if (*(_BYTE *)(a2 + 384))
  {
    *(_QWORD *)(result + 360) = 0;
    *(_QWORD *)(result + 368) = 0;
    *(_QWORD *)(result + 376) = 0;
    v15 = *(_QWORD *)(a2 + 368);
    *(_QWORD *)(result + 360) = *(_QWORD *)(a2 + 360);
    *(_QWORD *)(result + 368) = v15;
    *(_QWORD *)(result + 376) = *(_QWORD *)(a2 + 376);
    *(_QWORD *)(a2 + 360) = 0;
    *(_QWORD *)(a2 + 368) = 0;
    *(_QWORD *)(a2 + 376) = 0;
    *(_BYTE *)(result + 384) = 1;
  }
  *(_BYTE *)(result + 392) = 0;
  *(_BYTE *)(result + 416) = 0;
  if (*(_BYTE *)(a2 + 416))
  {
    *(_QWORD *)(result + 392) = 0;
    *(_QWORD *)(result + 400) = 0;
    *(_QWORD *)(result + 408) = 0;
    v16 = *(_QWORD *)(a2 + 400);
    *(_QWORD *)(result + 392) = *(_QWORD *)(a2 + 392);
    *(_QWORD *)(result + 400) = v16;
    *(_QWORD *)(result + 408) = *(_QWORD *)(a2 + 408);
    *(_QWORD *)(a2 + 392) = 0;
    *(_QWORD *)(a2 + 400) = 0;
    *(_QWORD *)(a2 + 408) = 0;
    *(_BYTE *)(result + 416) = 1;
  }
  *(_BYTE *)(result + 424) = 0;
  *(_BYTE *)(result + 448) = 0;
  if (*(_BYTE *)(a2 + 448))
  {
    *(_QWORD *)(result + 424) = 0;
    *(_QWORD *)(result + 432) = 0;
    *(_QWORD *)(result + 440) = 0;
    v17 = *(_QWORD *)(a2 + 432);
    *(_QWORD *)(result + 424) = *(_QWORD *)(a2 + 424);
    *(_QWORD *)(result + 432) = v17;
    *(_QWORD *)(result + 440) = *(_QWORD *)(a2 + 440);
    *(_QWORD *)(a2 + 424) = 0;
    *(_QWORD *)(a2 + 432) = 0;
    *(_QWORD *)(a2 + 440) = 0;
    *(_BYTE *)(result + 448) = 1;
  }
  *(_WORD *)(result + 456) = *(_WORD *)(a2 + 456);
  return result;
}

uint64_t sub_20E96B15C(uint64_t a1, unint64_t a2)
{
  int v4;
  char *v5;

  *(_DWORD *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  if (a2)
  {
    if (a2 >= 0x1555555555555556)
      sub_20E969238();
    v4 = a2;
    v5 = (char *)operator new(12 * a2);
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = &v5[12 * a2];
    *(_QWORD *)(a1 + 16) = &v5[12 * v4];
  }
  return a1;
}

void sub_20E96B1E0()
{
  __break(1u);
  JUMPOUT(0x20E96B230);
}

uint64_t sub_20E96B258(uint64_t a1, unint64_t a2)
{
  int v4;
  char *v5;

  *(_DWORD *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  if (a2)
  {
    if (a2 >= 0x1555555555555556)
      sub_20E969238();
    v4 = a2;
    v5 = (char *)operator new(12 * a2);
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = &v5[12 * a2];
    *(_QWORD *)(a1 + 16) = &v5[12 * v4];
  }
  return a1;
}

void sub_20E96B2DC()
{
  __break(1u);
  JUMPOUT(0x20E96B32CLL);
}

float *sub_20E96B354(float *result, float **a2)
{
  float *v2;
  uint64_t v3;
  uint64_t v4;
  float *v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;

  *(_QWORD *)result = 0;
  *((_QWORD *)result + 1) = 0;
  *((_QWORD *)result + 2) = 0;
  v2 = *a2;
  if (*a2 != a2[1])
  {
    v3 = *(_QWORD *)v2;
    result[5] = v2[2];
    *(_QWORD *)(result + 3) = v3;
    v4 = *(_QWORD *)v2;
    result[2] = v2[2];
    *(_QWORD *)result = v4;
    v5 = a2[1];
    if (v2 != v5)
    {
      v6 = *result;
      v7 = result[1];
      v8 = result[2];
      v9 = result[3];
      v10 = result[4];
      v11 = result[5];
      do
      {
        if (*v2 < v6)
          v6 = *v2;
        *result = v6;
        if (v2[1] < v7)
          v7 = v2[1];
        result[1] = v7;
        if (v2[2] < v8)
          v8 = v2[2];
        result[2] = v8;
        if (v9 < *v2)
          v9 = *v2;
        result[3] = v9;
        if (v10 < v2[1])
          v10 = v2[1];
        result[4] = v10;
        if (v11 < v2[2])
          v11 = v2[2];
        result[5] = v11;
        v2 += 3;
      }
      while (v2 != v5);
    }
  }
  return result;
}

char *sub_20E96B410(_QWORD *a1, __int128 *a2)
{
  char *v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *result;

  v4 = (char *)operator new(0x78uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &off_24C9B1F90;
  *(_OWORD *)(v4 + 56) = a2[2];
  *(_OWORD *)(v4 + 88) = a2[4];
  v5 = *a2;
  v6 = *((_QWORD *)a2 + 3);
  *((_QWORD *)v4 + 5) = *((_QWORD *)a2 + 2);
  *((_QWORD *)v4 + 6) = v6;
  v7 = *((_QWORD *)a2 + 7);
  *((_QWORD *)v4 + 9) = *((_QWORD *)a2 + 6);
  *((_QWORD *)v4 + 10) = v7;
  v8 = *((_QWORD *)a2 + 11);
  *((_QWORD *)v4 + 13) = *((_QWORD *)a2 + 10);
  *((_QWORD *)v4 + 14) = v8;
  a1[1] = v4;
  *(_OWORD *)(v4 + 24) = v5;
  result = v4 + 24;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *((_QWORD *)a2 + 5) = 0;
  *((_QWORD *)a2 + 6) = 0;
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 8) = 0;
  *((_QWORD *)a2 + 9) = 0;
  *((_QWORD *)a2 + 10) = 0;
  *a1 = result;
  return result;
}

uint64_t sub_20E96B498(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 32);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t *sub_20E96B500(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t *v8;

  v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    v3 = -1431655765 * ((unint64_t)(a1[2] - v2) >> 2);
    v6 = v2;
    v7 = v3;
    v4 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v4 == -1)
      sub_20E877AB8();
    v8 = &v6;
    ((void (*)(uint64_t **, uint64_t *))off_24C9B1F70[v4])(&v8, a1 + 3);
  }
  return a1;
}

uint64_t *sub_20E96B58C(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t *v8;

  v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    v3 = -1431655765 * ((unint64_t)(a1[2] - v2) >> 2);
    v6 = v2;
    v7 = v3;
    v4 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v4 == -1)
      sub_20E877AB8();
    v8 = &v6;
    ((void (*)(uint64_t **, uint64_t *))off_24C9B1F60[v4])(&v8, a1 + 3);
  }
  return a1;
}

void sub_20E96B61C()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20E96B630(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C9B1EF0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20E96B668(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C9B1EF0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20E96B688(uint64_t a1)
{
  const void *v1;

  v1 = **(const void ***)(a1 + 8);
  if (v1)
    CFRelease(v1);
}

uint64_t sub_20E96B69C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_9applecv3d7raycast12_GLOBAL__N_120ComputeFromReco"
                     "nMeshEPK13CV3DReconMeshE3$_0JEEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_9applecv3d7raycast12_GLOBAL__N_120Comp"
                                "uteFromReconMeshEPK13CV3DReconMeshE3$_0JEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_9applecv3d7raycast12_GLOBAL__N_120ComputeFromReconMeshEPK13CV3DReconMeshE3$_0JEEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_9applecv3d7raycast12_GLOBAL__N_120ComputeFromReconMeshEPK13CV3DReconMeshE3$_0JEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E96B708()
{
  return &unk_24C9B1F50;
}

void sub_20E96B714(void ***a1)
{
  operator delete(**a1);
}

uint64_t sub_20E96B720(_QWORD **a1)
{
  uint64_t result;

  result = MEMORY[0x212BC7130](*MEMORY[0x24BDAEC58], **a1, 12 * *((unsigned int *)*a1 + 2));
  if ((_DWORD)result)
  {
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Memory/include/Kit/Memory/VMAllocator.hpp", 81, (uint64_t)"", 0, (uint64_t)"Illegal or non-allocated address specified.", 43, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  return result;
}

void sub_20E96B794(void ***a1)
{
  operator delete(**a1);
}

uint64_t sub_20E96B7A0(_QWORD **a1)
{
  uint64_t result;

  result = MEMORY[0x212BC7130](*MEMORY[0x24BDAEC58], **a1, 12 * *((unsigned int *)*a1 + 2));
  if ((_DWORD)result)
  {
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Memory/include/Kit/Memory/VMAllocator.hpp", 81, (uint64_t)"", 0, (uint64_t)"Illegal or non-allocated address specified.", 43, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  return result;
}

void sub_20E96B814(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B1F90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20E96B824(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B1F90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t *sub_20E96B854(uint64_t a1)
{
  return sub_20E96B860((uint64_t *)(a1 + 24));
}

uint64_t *sub_20E96B860(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v12;
  int v13;
  uint64_t *v14;

  v2 = a1[8];
  if (v2)
  {
    a1[9] = v2;
    v3 = -1431655765 * ((unint64_t)(a1[10] - v2) >> 2);
    v12 = v2;
    v13 = v3;
    v4 = *((unsigned int *)a1 + 23);
    if ((_DWORD)v4 == -1)
      sub_20E877AB8();
    v14 = &v12;
    ((void (*)(uint64_t **, uint64_t *))off_24C9B1F70[v4])(&v14, a1 + 11);
  }
  v5 = a1[4];
  if (v5)
  {
    a1[5] = v5;
    v6 = -1431655765 * ((unint64_t)(a1[6] - v5) >> 2);
    v12 = v5;
    v13 = v6;
    v7 = *((unsigned int *)a1 + 15);
    if ((_DWORD)v7 == -1)
      sub_20E877AB8();
    v14 = &v12;
    ((void (*)(uint64_t **, uint64_t *))off_24C9B1F60[v7])(&v14, a1 + 7);
  }
  v8 = *a1;
  if (*a1)
  {
    a1[1] = v8;
    v9 = -1431655765 * ((unint64_t)(a1[2] - v8) >> 2);
    v12 = v8;
    v13 = v9;
    v10 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v10 == -1)
      sub_20E877AB8();
    v14 = &v12;
    ((void (*)(uint64_t **, uint64_t *))off_24C9B1F60[v10])(&v14, a1 + 3);
  }
  return a1;
}

char *sub_20E96B9AC(char **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 v14;
  char *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;

  v2 = (a1[1] - *a1) >> 4;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 60)
    sub_20E969238();
  v6 = a1[2] - *a1;
  if (v6 >> 3 > v3)
    v3 = v6 >> 3;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0)
    v7 = 0xFFFFFFFFFFFFFFFLL;
  else
    v7 = v3;
  if (v7)
  {
    if (v7 >> 60)
      sub_20E877A38();
    v8 = (char *)operator new(16 * v7);
  }
  else
  {
    v8 = 0;
  }
  v9 = &v8[16 * v2];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  v10 = v9 + 16;
  v11 = &v8[16 * v7];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v12 = *a1;
  v13 = a1[1];
  if (v13 == *a1)
  {
    *a1 = v9;
    a1[1] = v10;
    a1[2] = v11;
  }
  else
  {
    do
    {
      v14 = *((_OWORD *)v13 - 1);
      v13 -= 16;
      *((_OWORD *)v9 - 1) = v14;
      v9 -= 16;
      *(_QWORD *)v13 = 0;
      *((_QWORD *)v13 + 1) = 0;
    }
    while (v13 != v12);
    v13 = *a1;
    v15 = a1[1];
    *a1 = v9;
    a1[1] = v10;
    a1[2] = v11;
    while (v15 != v13)
    {
      v16 = (std::__shared_weak_count *)*((_QWORD *)v15 - 1);
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v15 -= 16;
    }
  }
  if (v13)
    operator delete(v13);
  return v10;
}

uint64_t sub_20E96BADC(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 32);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_20E96BB2C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  v2 = *(_QWORD **)(a1 + 32);
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E96BB8C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;

  v4 = (_QWORD *)operator new();
  *v4 = &off_24C9B30B8;
  v5 = v4 + 1;
  result = *(_QWORD *)(a1 + 32);
  if (!result)
    goto LABEL_4;
  if (result != a1 + 8)
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 16))(result, v5);
LABEL_4:
    v4[4] = result;
    *a2 = v4;
    return result;
  }
  v4[4] = v5;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  *a2 = v4;
  return result;
}

void sub_20E96BC2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10A1C400AA0B987);
  _Unwind_Resume(a1);
}

void sub_20E96BC50()
{
  sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 274, (uint64_t)"", 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_21023DDB0);
  abort();
}

void sub_20E96BC8C()
{
  sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 280, (uint64_t)"", 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_21023DDB0);
  abort();
}

uint64_t sub_20E96BCC8()
{
  return 1;
}

uint64_t sub_20E96BCD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 301, (uint64_t)"processor_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(_QWORD *)(a1 + 32);
    if (!v4)
      sub_20E86D37C();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, a2);
}

void sub_20E96BD50()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20E96BD64(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9B1FE0;
  result[1] = v3;
  return result;
}

uint64_t sub_20E96BD98(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9B1FE0;
  a2[1] = v2;
  return result;
}

_QWORD *sub_20E96BDB4(uint64_t a1, uint64_t a2)
{
  _QWORD **v3;
  _QWORD *result;
  unsigned int *v5;
  uint64_t *v6;
  uint64_t *i;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;

  v3 = *(_QWORD ***)(a1 + 8);
  result = sub_20E96BF00(&v12, a2);
  v5 = v12;
  v6 = v3[3];
  for (i = v3[4]; v6 != i; result = (_QWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v8 + 16))())
  {
    v8 = *v6;
    v6 += 2;
  }
  if (v5)
  {
    v9 = v5 + 8;
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
      result = (_QWORD *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
  }
  if (v3[1])
  {
    sub_20E96BF00(&v12, a2);
    return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v3[1] + 16))(v3[1]);
  }
  return result;
}

uint64_t sub_20E96BE88(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d9applecv3d7raycast7SessionC1ERK24CV3DRaycastConfigurationE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d9applecv3d7raycast7SessionC1ERK24CV3DRaycastConfigurationE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d9applecv3d7raycast7SessionC1ERK24CV3DRaycastConfigurationE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d9applecv3d7raycast7SessionC1ERK24CV3DRaycastConfigurationE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E96BEF4()
{
  return &unk_24C9B2040;
}

_QWORD *sub_20E96BF00(_QWORD *a1, uint64_t a2)
{
  _QWORD *result;
  _QWORD *v5;

  result = operator new(0x28uLL, MEMORY[0x24BEDB6B8]);
  v5 = result;
  if (result)
  {
    result[2] = 0;
    result[1] = result + 2;
    result[3] = 0;
    result = sub_20E96BFB4(result + 1, *(unsigned __int8 **)a2, (unsigned __int8 *)(a2 + 8));
    *((_DWORD *)v5 + 8) = 1;
    *v5 = &off_24C9B79E0;
  }
  *a1 = v5;
  return result;
}

void sub_20E96BF7C(void *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  sub_20E96C574(v3, *(_QWORD **)(v2 + 16));
  MEMORY[0x212BC6380](v2, MEMORY[0x24BEDB6B8]);
  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x20E96BF6CLL);
}

_QWORD *sub_20E96BFB4(_QWORD *result, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  unsigned __int8 *v6;
  _QWORD **v7;
  uint64_t *v8;
  unsigned __int8 *v9;
  uint64_t **v10;
  unsigned __int8 *v11;
  uint64_t *v12;
  _QWORD *v13;
  unsigned __int8 *v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned __int8 *v18[9];

  if (a2 != a3)
  {
    v18[7] = v3;
    v18[8] = v4;
    v6 = a2;
    v7 = (_QWORD **)result;
    v8 = result + 1;
    do
    {
      result = sub_20E96C0BC(v7, v8, v18, &v17, v6 + 32);
      if (*result)
      {
        v9 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
        if (v9)
          goto LABEL_10;
      }
      else
      {
        v10 = (uint64_t **)result;
        sub_20E96C2C8((uint64_t)v7, (__int128 *)v6 + 2, (uint64_t)&v16);
        v11 = v18[0];
        v12 = v16;
        *v16 = 0;
        v12[1] = 0;
        v12[2] = (uint64_t)v11;
        *v10 = v12;
        v13 = (_QWORD *)**v7;
        if (v13)
        {
          *v7 = v13;
          v12 = *v10;
        }
        result = sub_20E868578(v7[1], v12);
        v7[2] = (_QWORD *)((char *)v7[2] + 1);
        v9 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
        if (v9)
        {
          do
          {
LABEL_10:
            v14 = v9;
            v9 = *(unsigned __int8 **)v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        v14 = (unsigned __int8 *)*((_QWORD *)v6 + 2);
        v15 = *(_QWORD *)v14 == (_QWORD)v6;
        v6 = v14;
      }
      while (!v15);
LABEL_3:
      v6 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

unsigned __int8 *sub_20E96C0BC(_QWORD *a1, uint64_t *a2, unsigned __int8 **a3, uint64_t *a4, unsigned __int8 *a5)
{
  unsigned __int8 *v9;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  uint64_t *v16;
  BOOL v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;

  v9 = (unsigned __int8 *)(a1 + 1);
  if (a1 + 1 == a2 || (sub_20E96C45C(a5, (unsigned __int8 *)a2 + 32) & 0x80) != 0)
  {
    if ((uint64_t *)*a1 == a2)
    {
      v12 = (unsigned __int8 *)a2;
    }
    else
    {
      v11 = (unsigned __int8 *)*a2;
      if (*a2)
      {
        do
        {
          v12 = v11;
          v11 = (unsigned __int8 *)*((_QWORD *)v11 + 1);
        }
        while (v11);
      }
      else
      {
        v16 = a2;
        do
        {
          v12 = (unsigned __int8 *)v16[2];
          v17 = *(_QWORD *)v12 == (_QWORD)v16;
          v16 = (uint64_t *)v12;
        }
        while (v17);
      }
      if ((sub_20E96C45C(v12 + 32, a5) & 0x80) == 0)
      {
        v18 = *(unsigned __int8 **)v9;
        if (*(_QWORD *)v9)
        {
          do
          {
            while (1)
            {
              v19 = v18;
              v20 = v18 + 32;
              if ((sub_20E96C45C(a5, v18 + 32) & 0x80) == 0)
                break;
              v18 = *(unsigned __int8 **)v19;
              v9 = v19;
              if (!*(_QWORD *)v19)
                goto LABEL_23;
            }
            if ((sub_20E96C45C(v20, a5) & 0x80) == 0)
              break;
            v9 = v19 + 8;
            v18 = (unsigned __int8 *)*((_QWORD *)v19 + 1);
          }
          while (v18);
          goto LABEL_23;
        }
        goto LABEL_18;
      }
    }
    if (*a2)
    {
      *a3 = v12;
      return v12 + 8;
    }
    else
    {
      *a3 = (unsigned __int8 *)a2;
      return (unsigned __int8 *)a2;
    }
  }
  else
  {
    if ((sub_20E96C45C((unsigned __int8 *)a2 + 32, a5) & 0x80) == 0)
    {
      *a3 = (unsigned __int8 *)a2;
      *a4 = (uint64_t)a2;
      return (unsigned __int8 *)a4;
    }
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (unsigned __int8 *)a2[1];
      do
      {
        v15 = v14;
        v14 = *(unsigned __int8 **)v14;
      }
      while (v14);
    }
    else
    {
      v21 = (unsigned __int8 *)a2;
      do
      {
        v15 = (unsigned __int8 *)*((_QWORD *)v21 + 2);
        v17 = *(_QWORD *)v15 == (_QWORD)v21;
        v21 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if ((sub_20E96C45C(a5, v15 + 32) & 0x80) == 0)
      {
        v22 = *(unsigned __int8 **)v9;
        if (*(_QWORD *)v9)
        {
          do
          {
            while (1)
            {
              v19 = v22;
              v23 = v22 + 32;
              if ((sub_20E96C45C(a5, v22 + 32) & 0x80) == 0)
                break;
              v22 = *(unsigned __int8 **)v19;
              v9 = v19;
              if (!*(_QWORD *)v19)
                goto LABEL_23;
            }
            if ((sub_20E96C45C(v23, a5) & 0x80) == 0)
              break;
            v9 = v19 + 8;
            v22 = (unsigned __int8 *)*((_QWORD *)v19 + 1);
          }
          while (v22);
          goto LABEL_23;
        }
LABEL_18:
        v19 = v9;
LABEL_23:
        *a3 = v19;
        return v9;
      }
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = (unsigned __int8 *)a2;
    }
  }
  return (unsigned __int8 *)a4;
}

__n128 sub_20E96C2C8@<Q0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __n128 result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x58uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = *a2;
  *((_QWORD *)v6 + 6) = 0;
  *((_OWORD *)v6 + 2) = v7;
  *((_QWORD *)v6 + 7) = 0;
  *((_QWORD *)v6 + 8) = 0;
  v8 = *((_QWORD *)a2 + 2);
  v9 = *((_QWORD *)a2 + 3);
  v10 = v9 - v8;
  if (v9 != v8)
  {
    v11 = 0x8E38E38E38E38E39 * (v10 >> 4);
    if (v11 >= 0x1C71C71C71C71C8)
      sub_20E969238();
    v12 = (char *)operator new(v10);
    v13 = 0;
    *((_QWORD *)v6 + 6) = v12;
    *((_QWORD *)v6 + 7) = v12;
    *((_QWORD *)v6 + 8) = &v12[144 * v11];
    do
    {
      v14 = v8 + v13;
      v15 = &v12[v13];
      v16 = *(_OWORD *)(v8 + v13);
      v17 = *(_OWORD *)(v8 + v13 + 16);
      v18 = *(_OWORD *)(v8 + v13 + 48);
      *((_OWORD *)v15 + 2) = *(_OWORD *)(v8 + v13 + 32);
      *((_OWORD *)v15 + 3) = v18;
      *(_OWORD *)v15 = v16;
      *((_OWORD *)v15 + 1) = v17;
      v20 = *(_OWORD *)(v8 + v13 + 96);
      v19 = *(_OWORD *)(v8 + v13 + 112);
      v21 = *(_OWORD *)(v8 + v13 + 80);
      *(_OWORD *)(v15 + 121) = *(_OWORD *)(v8 + v13 + 121);
      *((_OWORD *)v15 + 6) = v20;
      *((_OWORD *)v15 + 7) = v19;
      *((_OWORD *)v15 + 5) = v21;
      *((_OWORD *)v15 + 4) = *(_OWORD *)(v8 + v13 + 64);
      v13 += 144;
    }
    while (v14 + 144 != v9);
    *((_QWORD *)v6 + 7) = &v12[v13];
  }
  result = *(__n128 *)((char *)a2 + 40);
  *(__n128 *)(v6 + 72) = result;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20E96C3EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 56) = v5;
    operator delete(v5);
  }
  sub_20E96C410(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20E96C410(uint64_t a1)
{
  _QWORD *v2;
  void *v3;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (void *)v2[6];
      if (v3)
      {
        v2[7] = v3;
        operator delete(v3);
      }
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_20E96C45C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v2;
  unsigned int v3;

  v2 = *a1;
  v3 = *a2;
  if (v2 == v3)
  {
    v2 = a1[1];
    v3 = a2[1];
    if (v2 == v3)
    {
      v2 = a1[2];
      v3 = a2[2];
      if (v2 == v3)
      {
        v2 = a1[3];
        v3 = a2[3];
        if (v2 == v3)
        {
          v2 = a1[4];
          v3 = a2[4];
          if (v2 == v3)
          {
            v2 = a1[5];
            v3 = a2[5];
            if (v2 == v3)
            {
              v2 = a1[6];
              v3 = a2[6];
              if (v2 == v3)
              {
                v2 = a1[7];
                v3 = a2[7];
                if (v2 == v3)
                {
                  v2 = a1[8];
                  v3 = a2[8];
                  if (v2 == v3)
                  {
                    v2 = a1[9];
                    v3 = a2[9];
                    if (v2 == v3)
                    {
                      v2 = a1[10];
                      v3 = a2[10];
                      if (v2 == v3)
                      {
                        v2 = a1[11];
                        v3 = a2[11];
                        if (v2 == v3)
                        {
                          v2 = a1[12];
                          v3 = a2[12];
                          if (v2 == v3)
                          {
                            v2 = a1[13];
                            v3 = a2[13];
                            if (v2 == v3)
                            {
                              v2 = a1[14];
                              v3 = a2[14];
                              if (v2 == v3)
                              {
                                v2 = a1[15];
                                v3 = a2[15];
                                if (v2 == v3)
                                  return 0;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (v2 < v3)
    return 0xFFFFFFFFLL;
  return 1;
}

void sub_20E96C574(uint64_t a1, _QWORD *a2)
{
  void *v4;

  if (a2)
  {
    sub_20E96C574(a1, *a2);
    sub_20E96C574(a1, a2[1]);
    v4 = (void *)a2[6];
    if (v4)
    {
      a2[7] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

uint64_t sub_20E96C5C4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD **v4;
  _QWORD **v5;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1[9] + 72) + 64))(*(_QWORD *)(a1[9] + 72));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1[19] + 72) + 64))(*(_QWORD *)(a1[19] + 72));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1[29] + 72) + 64))(*(_QWORD *)(a1[29] + 72));
  v2 = a1[39];
  (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 72) + 64))(*(_QWORD *)(v2 + 72));
  (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 240) + 64))(*(_QWORD *)(v2 + 240));
  v3 = a1[49];
  (*(void (**)(_QWORD))(**(_QWORD **)(v3 + 72) + 64))(*(_QWORD *)(v3 + 72));
  (*(void (**)(_QWORD))(**(_QWORD **)(v3 + 240) + 64))(*(_QWORD *)(v3 + 240));
  v4 = (_QWORD **)a1[59];
  (*(void (**)(_QWORD *))(*v4[9] + 64))(v4[9]);
  (*(void (**)(_QWORD *))(*v4[30] + 64))(v4[30]);
  (*(void (**)(_QWORD *))(*v4[51] + 64))(v4[51]);
  (*(void (**)(_QWORD *))(*v4[72] + 64))(v4[72]);
  (*(void (**)(_QWORD *))(*v4[93] + 64))(v4[93]);
  (*(void (**)(_QWORD *))(*v4[114] + 64))(v4[114]);
  (*(void (**)(_QWORD *))(*v4[135] + 64))(v4[135]);
  v5 = (_QWORD **)a1[69];
  (*(void (**)(_QWORD *))(*v5[9] + 64))(v5[9]);
  (*(void (**)(_QWORD *))(*v5[30] + 64))(v5[30]);
  (*(void (**)(_QWORD *))(*v5[51] + 64))(v5[51]);
  (*(void (**)(_QWORD *))(*v5[72] + 64))(v5[72]);
  (*(void (**)(_QWORD *))(*v5[93] + 64))(v5[93]);
  (*(void (**)(_QWORD *))(*v5[114] + 64))(v5[114]);
  (*(void (**)(_QWORD *))(*v5[135] + 64))(v5[135]);
  (*(void (**)(_QWORD *))(*v5[156] + 64))(v5[156]);
  (*(void (**)(_QWORD *))(*v5[177] + 64))(v5[177]);
  (*(void (**)(_QWORD *))(*v5[198] + 64))(v5[198]);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1[79] + 72) + 64))(*(_QWORD *)(a1[79] + 72));
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1[89] + 72) + 64))(*(_QWORD *)(a1[89] + 72));
}

void sub_20E96C7A0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B2060;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20E96C7B0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B2060;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E96C7E0(uint64_t a1)
{
  sub_20E91E748((_QWORD *)(a1 + 320));
  return sub_20E91E690(a1 + 32);
}

_QWORD *sub_20E96C80C(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  void **v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v16;
  __int128 v18;
  float v19;
  float v20;
  uint64_t v21;
  _QWORD *v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t prime;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;

  v8 = sub_2102322B4((unsigned __int8 *)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v10)
        v4 = v8 % v10;
    }
    else
    {
      v4 = (v10 - 1) & v8;
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = v13[1];
            if (v16 == v8)
            {
              if (v13[2] == *(_QWORD *)a2 && v13[3] == *(_QWORD *)(a2 + 8))
                return v13;
            }
            else if ((v16 & (v10 - 1)) != v4)
            {
              goto LABEL_31;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_31;
          }
        }
        do
        {
          v14 = v13[1];
          if (v14 == v8)
          {
            if (v13[2] == *(_QWORD *)a2 && v13[3] == *(_QWORD *)(a2 + 8))
              return v13;
          }
          else
          {
            if (v14 >= v10)
              v14 %= v10;
            if (v14 != v4)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_31:
  v13 = operator new(0xA0uLL);
  *v13 = 0;
  v13[1] = v9;
  v18 = **a4;
  *((_OWORD *)v13 + 7) = unk_2102E1100;
  *((_OWORD *)v13 + 8) = xmmword_2102E1110;
  *((_OWORD *)v13 + 9) = unk_2102E1120;
  *((_OWORD *)v13 + 1) = v18;
  *((_OWORD *)v13 + 2) = xmmword_2102E10B0;
  *((_OWORD *)v13 + 3) = unk_2102E10C0;
  *((_OWORD *)v13 + 4) = xmmword_2102E10D0;
  *((_OWORD *)v13 + 5) = unk_2102E10E0;
  *((_OWORD *)v13 + 6) = xmmword_2102E10F0;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (v10 && (float)(v20 * (float)v10) >= v19)
  {
    v21 = *(_QWORD *)a1;
    v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v22)
    {
LABEL_34:
      *v13 = *v22;
LABEL_69:
      *v22 = v13;
      goto LABEL_70;
    }
  }
  else
  {
    v23 = 1;
    if (v10 >= 3)
      v23 = (v10 & (v10 - 1)) != 0;
    v24 = v23 | (2 * v10);
    v25 = vcvtps_u32_f32(v19 / v20);
    if (v24 <= v25)
      prime = v25;
    else
      prime = v24;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v10 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v10)
      goto LABEL_45;
    if (prime < v10)
    {
      v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (v28 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        v27 = std::__next_prime(v27);
      }
      else
      {
        v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2)
          v27 = v29;
      }
      if (prime <= v27)
        prime = v27;
      if (prime < v10)
LABEL_45:
        sub_20E8D2B3C(a1, prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    v30 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        v4 = v9 % v10;
        v21 = *(_QWORD *)a1;
        v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v9 % v10));
        if (v22)
          goto LABEL_34;
      }
      else
      {
        v4 = v9;
        v21 = *(_QWORD *)a1;
        v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
        if (v22)
          goto LABEL_34;
      }
    }
    else
    {
      v4 = v30 & v9;
      v21 = *(_QWORD *)a1;
      v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v30 & v9));
      if (v22)
        goto LABEL_34;
    }
  }
  *v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*v13)
  {
    v31 = *(_QWORD *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v31 >= v10)
        v31 %= v10;
    }
    else
    {
      v31 &= v10 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_69;
  }
LABEL_70:
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_20E96CB54(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20E96CB68(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B20B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20E96CB78(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B20B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E96CBA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(a1 + 24);
    if (v3 != v1)
    {
      do
      {
        v3 -= 464;
        sub_20E96ACE0(v3);
      }
      while (v3 != v1);
      v4 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v1;
    operator delete(v4);
  }
}

void sub_20E96CC18()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20E96CC2C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C9B2100;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20E96CC64(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C9B2100;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20E96CC84(uint64_t a1)
{
  const void *v1;

  v1 = **(const void ***)(a1 + 8);
  if (v1)
    CFRelease(v1);
}

uint64_t sub_20E96CC98(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNKS_9applecv3d7raycast7Session17pushMeshChunkListEPK"
                     "17CV3DReconMeshList13simd_float4x4E3$_0JEEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNKS_9applecv3d7raycast7Session17pushMeshC"
                                "hunkListEPK17CV3DReconMeshList13simd_float4x4E3$_0JEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNKS_9applecv3d7raycast7Session17pushMeshChunkListEPK17CV3DReconMeshList13simd_float4x4E3$_0JEEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNKS_9applecv3d7raycast7Session17pushMeshChunkListEPK17CV3DReconMeshList13simd_float4x4E3$_0JEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E96CD04()
{
  return &unk_24C9B2160;
}

uint64_t sub_20E96CD10(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (std::__shared_weak_count *)v2[8];
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
    }
    operator delete(v2);
  }
  return a1;
}

void sub_20E96CD8C(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_20E96CDD8(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E96CE38(uint64_t a1)
{
  void *v2;

  if ((*(_BYTE *)(a1 + 136) & 1) != 0)
  {
    v2 = *(void **)(a1 + 144);
    if (v2)
    {
      *(_QWORD *)(a1 + 152) = v2;
      operator delete(v2);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

void sub_20E96CE78(unsigned int a1)
{
  void *exception;
  const std::error_category *v3;

  exception = __cxa_allocate_exception(0x20uLL);
  v3 = std::future_category();
  MEMORY[0x212BC5AF8](exception, a1, v3);
  __cxa_throw(exception, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
}

void sub_20E96CEC0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20E96CED4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x212BC5AF8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20E96CFC0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, std::logic_error a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::logic_error::~logic_error(&a11);
  JUMPOUT(0x20E96CF1CLL);
}

void sub_20E96CFFC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B3068;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20E96D00C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B3068;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E96D044(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_20E96D090(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E96D0F0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  if ((*(_BYTE *)(a1 + 136) & 1) != 0)
  {
    v2 = *(void **)(a1 + 192);
    if (v2)
    {
      *(_QWORD *)(a1 + 200) = v2;
      operator delete(v2);
    }
    v3 = *(void **)(a1 + 168);
    if (v3)
    {
      *(_QWORD *)(a1 + 176) = v3;
      operator delete(v3);
    }
    v4 = *(void **)(a1 + 144);
    if (v4)
    {
      *(_QWORD *)(a1 + 152) = v4;
      operator delete(v4);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

uint64_t *sub_20E96D150(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x212BC5AF8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20E96D23C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, std::logic_error a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::logic_error::~logic_error(&a11);
  JUMPOUT(0x20E96D198);
}

void sub_20E96D278(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_20E96D2C4(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E96D324(uint64_t a1)
{
  void *v2;

  if ((*(_BYTE *)(a1 + 136) & 1) != 0)
  {
    v2 = *(void **)(a1 + 144);
    if (v2)
    {
      *(_QWORD *)(a1 + 152) = v2;
      operator delete(v2);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

uint64_t *sub_20E96D364(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x212BC5AF8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20E96D450(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, std::logic_error a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::logic_error::~logic_error(&a11);
  JUMPOUT(0x20E96D3ACLL);
}

uint64_t CV3DSLAMAnchorUpdateRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 172);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

uint64_t CV3DSLAMAnchorUpdateRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 172);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

CFTypeRef CV3DSLAMAnchorUpdateCopyUpdatedAnchors(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  char *v8;
  CFTypeRef v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  CFTypeRef cf;
  __int128 v14;
  CFTypeRef v15;
  std::__shared_weak_count *v16;
  std::error_condition v17;

  if (a1)
  {
    sub_20EAA937C((char **)(a1 + 8), &cf);
    v2 = cf;
    if (cf)
      CFRetain(cf);
    v3 = (std::__shared_weak_count *)v14;
    if (!(_QWORD)v14)
      return v2;
    v4 = (unint64_t *)(v14 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      return v2;
    }
    else
    {
      return v2;
    }
  }
  else
  {
    cf = operator new(0x30uLL);
    v14 = xmmword_2102DC8E0;
    v8 = (char *)operator new(0x78uLL);
    strcpy(v8, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/CV3DSLAMAnchorUpdate.cpp");
    if (a2)
    {
      *(_QWORD *)&v17.__val_ = 22;
      v17.__cat_ = std::generic_category();
      sub_20EA67538(&v17, (uint64_t)&cf, (CFErrorRef *)&v15);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v9 = v15;
      if (v15)
        CFRetain(v15);
      *a2 = v9;
      v10 = v16;
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
    operator delete(v8);
    if (SHIBYTE(v14) < 0)
      operator delete((void *)cf);
    return 0;
  }
}

void sub_20E96D6BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

CFTypeRef CV3DSLAMAnchorUpdateCopyRemovedAnchors(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  char *v8;
  CFTypeRef v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  CFTypeRef cf;
  __int128 v14;
  CFTypeRef v15;
  std::__shared_weak_count *v16;
  std::error_condition v17;

  if (a1)
  {
    sub_20EAA9460(&cf, (uint64_t *)(a1 + 56));
    v2 = cf;
    if (cf)
      CFRetain(cf);
    v3 = (std::__shared_weak_count *)v14;
    if (!(_QWORD)v14)
      return v2;
    v4 = (unint64_t *)(v14 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      return v2;
    }
    else
    {
      return v2;
    }
  }
  else
  {
    cf = operator new(0x30uLL);
    v14 = xmmword_2102DC8E0;
    v8 = (char *)operator new(0x78uLL);
    strcpy(v8, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/CV3DSLAMAnchorUpdate.cpp");
    if (a2)
    {
      *(_QWORD *)&v17.__val_ = 22;
      v17.__cat_ = std::generic_category();
      sub_20EA67538(&v17, (uint64_t)&cf, (CFErrorRef *)&v15);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v9 = v15;
      if (v15)
        CFRetain(v15);
      *a2 = v9;
      v10 = v16;
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
    operator delete(v8);
    if (SHIBYTE(v14) < 0)
      operator delete((void *)cf);
    return 0;
  }
}

void sub_20E96D8F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

CFTypeRef CV3DSLAMAnchorUpdateCopyExternalAnchors(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  char *v8;
  CFTypeRef v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  CFTypeRef cf;
  __int128 v14;
  CFTypeRef v15;
  std::__shared_weak_count *v16;
  std::error_condition v17;

  if (a1)
  {
    sub_20EAA9680(a1 + 8, &cf);
    v2 = cf;
    if (cf)
      CFRetain(cf);
    v3 = (std::__shared_weak_count *)v14;
    if (!(_QWORD)v14)
      return v2;
    v4 = (unint64_t *)(v14 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      return v2;
    }
    else
    {
      return v2;
    }
  }
  else
  {
    cf = operator new(0x30uLL);
    v14 = xmmword_2102DC8E0;
    v8 = (char *)operator new(0x78uLL);
    strcpy(v8, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/CV3DSLAMAnchorUpdate.cpp");
    if (a2)
    {
      *(_QWORD *)&v17.__val_ = 22;
      v17.__cat_ = std::generic_category();
      sub_20EA67538(&v17, (uint64_t)&cf, (CFErrorRef *)&v15);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v9 = v15;
      if (v15)
        CFRetain(v15);
      *a2 = v9;
      v10 = v16;
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
    operator delete(v8);
    if (SHIBYTE(v14) < 0)
      operator delete((void *)cf);
    return 0;
  }
}

void sub_20E96DB2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

CFTypeRef CV3DSLAMAnchorUpdateCopyRequestIds(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  char *v8;
  CFTypeRef v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  CFTypeRef cf;
  __int128 v14;
  CFTypeRef v15;
  std::__shared_weak_count *v16;
  std::error_condition v17;

  if (a1)
  {
    sub_20EAA988C(a1 + 8, &cf);
    v2 = cf;
    if (cf)
      CFRetain(cf);
    v3 = (std::__shared_weak_count *)v14;
    if (!(_QWORD)v14)
      return v2;
    v4 = (unint64_t *)(v14 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      return v2;
    }
    else
    {
      return v2;
    }
  }
  else
  {
    cf = operator new(0x30uLL);
    v14 = xmmword_2102DC8E0;
    v8 = (char *)operator new(0x78uLL);
    strcpy(v8, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/CV3DSLAMAnchorUpdate.cpp");
    if (a2)
    {
      *(_QWORD *)&v17.__val_ = 22;
      v17.__cat_ = std::generic_category();
      sub_20EA67538(&v17, (uint64_t)&cf, (CFErrorRef *)&v15);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v9 = v15;
      if (v15)
        CFRetain(v15);
      *a2 = v9;
      v10 = v16;
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
    operator delete(v8);
    if (SHIBYTE(v14) < 0)
      operator delete((void *)cf);
    return 0;
  }
}

void sub_20E96DD64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

BOOL CV3DSLAMAnchorUpdateCopySessionID(uint64_t a1, _QWORD *a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
  {
    *a2 = *(_QWORD *)(a1 + 152);
  }
  else
  {
    __p = operator new(0x30uLL);
    v12 = xmmword_2102DC8E0;
    v5 = (char *)operator new(0x78uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/CV3DSLAMAnchorUpdate.cpp");
    if (a3)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_20EA67538(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (SHIBYTE(v12) < 0)
      operator delete(__p);
  }
  return a1 != 0;
}

void sub_20E96DF28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DSLAMAnchorUpdateIsPauseFinished(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return *(_BYTE *)(a1 + 168) != 0;
  __p = operator new(0x30uLL);
  v10 = xmmword_2102DC8E0;
  v4 = (char *)operator new(0x78uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/CV3DSLAMAnchorUpdate.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_20EA67538(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return 0;
}

void sub_20E96E0FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

double sub_20E96E138@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  double result;
  uint64_t v9;
  double v10;
  _BYTE v11[16];
  void *v12;
  void *v13;
  void *__p;
  void *v15;
  std::__shared_weak_count *v16;

  sub_20E89E538((uint64_t)v11, (uint64_t *)a1);
  sub_20E96E2C8((uint64_t)v11, a2);
  v5 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  if (v12)
  {
    v13 = v12;
    operator delete(v12);
  }
  result = *(double *)(a1 + 392);
  if (result >= 0.0)
  {
    v9 = *a2;
    LODWORD(v4) = *(_DWORD *)(a1 + 4);
    v10 = (double)v4;
    *(double *)(v9 + 1424) = result / v10;
    result = v10 * 0.5;
    *(double *)(v9 + 1432) = v10 * 0.5;
  }
  return result;
}

void sub_20E96E204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E9700EC(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20E96E218(uint64_t a1)
{
  if (*(char *)(a1 + 143) < 0)
  {
    operator delete(*(void **)(a1 + 120));
    if ((*(char *)(a1 + 119) & 0x80000000) == 0)
    {
LABEL_3:
      if (!*(_BYTE *)(a1 + 88))
        goto LABEL_8;
      goto LABEL_7;
    }
  }
  else if ((*(char *)(a1 + 119) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 96));
  if (!*(_BYTE *)(a1 + 88))
    goto LABEL_8;
LABEL_7:
  if (*(char *)(a1 + 87) < 0)
  {
    operator delete(*(void **)(a1 + 64));
    if (!*(_BYTE *)(a1 + 56))
      goto LABEL_12;
    goto LABEL_9;
  }
LABEL_8:
  if (!*(_BYTE *)(a1 + 56))
    goto LABEL_12;
LABEL_9:
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
LABEL_12:
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20E96E2C8(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  double *v4;
  double *v5;
  double v6;
  _BOOL4 v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  _BOOL4 v14;
  double v15;
  double v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  int v22;
  __int128 *v23;
  uint64_t v24;
  float64x2_t v25;
  double v26;
  double v27;
  double v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  float64_t v32;
  __int128 *v33;
  uint64_t v34;
  float64x2_t v35;
  double v36;
  double v37;
  double v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  float64_t v42;
  __int128 *v43;
  uint64_t v44;
  float64x2_t v45;
  double v46;
  double v47;
  double v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  float64_t v52;
  uint64_t v53;
  uint64_t v54;
  float64x2_t v55;
  double v56;
  double v57;
  double v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  float64_t v62;
  __int128 *v63;
  _OWORD *v64;
  std::__shared_weak_count *v65;
  uint64_t v66;
  unint64_t *p_shared_owners;
  unint64_t v68;
  uint64_t v69;
  int64x2_t v70;
  __int128 v71;
  int64x2_t v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  unint64_t *v85;
  unint64_t v86;
  __int128 v87;
  __int128 v88;
  unint64_t *v89;
  unint64_t v90;
  __int128 *v91;
  uint64_t v92;
  double v93;
  double v94;
  double v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  int8x16_t v99;
  float64x2_t v100;
  int8x16_t v101;
  int8x16_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  const void *v106;
  __int128 *v107;
  void *v108;
  _OWORD *v109;
  uint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  int64x2_t v114;
  __int128 v115;
  int64x2_t v116;
  uint64_t v117;
  __int128 v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  uint64_t v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  unint64_t *v126;
  unint64_t v127;
  uint64_t *v128;
  uint64_t *v129;
  uint64_t v130;
  double v131;
  double v132;
  double v133;
  uint64_t v134;
  uint64_t v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  uint64_t v142;
  uint64_t *v143;
  int8x16_t v144;
  float64x2_t v145;
  int8x16_t v146;
  int8x16_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  const void *v151;
  __int128 *v152;
  void *v153;
  _OWORD *v154;
  uint64_t v155;
  unint64_t *v156;
  unint64_t v157;
  uint64_t v158;
  int64x2_t v159;
  __int128 v160;
  int64x2_t v161;
  uint64_t v162;
  __int128 v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  uint64_t v167;
  __int128 v168;
  __int128 v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  __int128 *v173;
  _OWORD *v174;
  uint64_t v175;
  unint64_t *v176;
  unint64_t v177;
  uint64_t v178;
  int64x2_t v179;
  __int128 v180;
  int64x2_t v181;
  uint64_t v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  uint64_t v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  uint64_t v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  unint64_t *v196;
  unint64_t v197;
  __int128 v198;
  __int128 v199;
  unint64_t *v200;
  __int128 v201;
  __int128 v202;
  double v203;
  double v204;
  double v205;
  double v206;
  double v207;
  float64_t v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  double v214;
  double v215;
  double v216;
  double v217;
  double v218;
  float64_t v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  int64x2_t v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  unint64_t *v233;
  __int128 v234;
  __int128 v235;
  unint64_t *v236;
  unint64_t v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  unint64_t v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t v257;
  unint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  float64x2_t v277;
  uint64_t v278;
  uint64_t v279;
  __int128 v280;
  uint64_t v281;
  uint64_t v282;
  float64x2_t v283;
  float64x2_t v284;
  float64x2_t v285;
  float64x2_t v286;
  __int128 v287;
  uint64_t v288;
  uint64_t v289;
  float64x2_t v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  int8x16_t v296;
  float64x2_t v297;
  int8x16_t v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  int8x16_t v305;
  __int128 v306;
  int8x16_t v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  float64x2_t v314;
  __int128 v315;
  float64x2_t v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  int8x16_t v323;
  __int128 v324;
  int8x16_t v325;
  int64x2_t *v326;
  uint64_t v327;
  __int128 *v328;
  __int128 v329;
  _BYTE v330[32];
  float64x2_t v331;
  __int128 v332;
  _BYTE v333[80];
  int64x2_t v334;
  _BYTE v335[721];
  uint64_t v336;
  std::__shared_weak_count *v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  uint64_t v342;
  __int128 v343;
  __int128 v344;
  unint64_t v345;
  __int128 v346;
  unint64_t v347;
  unint64_t v348;
  unint64_t v349;
  unint64_t v350;
  int64x2_t v351;
  _OWORD v352[2];
  __int128 v353;
  __int128 v354;
  __int128 v355;
  uint64_t v356;
  uint64_t v357;

  v357 = *MEMORY[0x24BDAC8D0];
  switch(*(_DWORD *)(a1 + 8))
  {
    case 0:
      v4 = *(double **)(a1 + 16);
      if (*(_QWORD *)(a1 + 24) - (_QWORD)v4 > 0x10uLL)
        goto LABEL_5;
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Calibration/include/VIO/Calibration/CalibrationUtil.h", 60, (uint64_t)"camera.radial_distortion_.size() >= 3", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_162;
      }
      v4 = *(double **)(a1 + 16);
LABEL_5:
      if (!v4
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_162;
      }
      v5 = (double *)(a1 + 64);
      v6 = *v4;
      v7 = *v4 == 0.0;
      if (*v4 < 0.0)
        v6 = 0.0 - v6;
      if (v6 <= 2.22044605e-16)
        v7 = 1;
      if (v7)
      {
        v8 = v4[1];
        v7 = v8 == 0.0;
        v9 = 0.0 - v8;
        if (v8 >= 0.0)
          v9 = v4[1];
        if (v9 <= 2.22044605e-16)
          v7 = 1;
        if (v7)
        {
          v10 = v4[2];
          v7 = v10 == 0.0;
          if (v10 < 0.0)
            v10 = 0.0 - v10;
          if (v10 <= 2.22044605e-16)
            v7 = 1;
          if (v7)
          {
            v11 = v4[3];
            v7 = v11 == 0.0;
            v12 = 0.0 - v11;
            if (v11 >= 0.0)
              v12 = v4[3];
            if (v12 <= 2.22044605e-16)
              v7 = 1;
          }
        }
      }
      if (v7)
      {
        v13 = *v5;
        v14 = *v5 == 0.0;
        if (*v5 < 0.0)
          v13 = 0.0 - v13;
        if (v13 <= 2.22044605e-16)
          v14 = 1;
        if (v14)
        {
          v15 = *(double *)(a1 + 72);
          v14 = v15 == 0.0;
          v16 = 0.0 - v15;
          if (v15 >= 0.0)
            v16 = *(double *)(a1 + 72);
          if (v16 <= 2.22044605e-16)
            v14 = 1;
        }
        if (v14)
        {
LABEL_37:
          v17 = *(_QWORD *)(a1 + 176);
          v290 = *(float64x2_t *)(a1 + 144);
          v299 = *(_OWORD *)(a1 + 128);
          v308 = *(_OWORD *)(a1 + 112);
          v317 = *(_OWORD *)(a1 + 160);
          v18 = vmuld_n_f64(v290.f64[0], *(double *)&v308);
          v19 = -*((double *)&v308 + 1) / v18;
          v20 = -(vmuld_n_f64(v290.f64[0], *(double *)&v299) - vmuld_lane_f64(*((double *)&v308 + 1), v290, 1)) / v18;
          v21 = operator new();
          *(float64x2_t *)(v21 + 32) = v290;
          *(_OWORD *)(v21 + 48) = v317;
          *(_OWORD *)v21 = v308;
          *(_OWORD *)(v21 + 16) = v299;
          *(_QWORD *)(v21 + 64) = v17;
          *(double *)(v21 + 72) = 1.0 / *(double *)&v308;
          *(double *)(v21 + 80) = v19;
          *(double *)(v21 + 88) = v20;
          *(_QWORD *)(v21 + 96) = 0;
          *(double *)(v21 + 104) = 1.0 / v290.f64[0];
          *(double *)(v21 + 112) = -v290.f64[1] / v290.f64[0];
          *(_QWORD *)(v21 + 120) = 0;
          *(_QWORD *)(v21 + 128) = 0;
          *(_OWORD *)(v21 + 136) = xmmword_2102E3C70;
          *(_QWORD *)(v21 + 152) = 0x7FF8000000000000;
          *(_BYTE *)(v21 + 160) = 0;
          v22 = 1;
          goto LABEL_148;
        }
      }
      v351.i64[0] = *(_QWORD *)a1;
      v328 = *(__int128 **)(a1 + 16);
      *(_QWORD *)&v329 = a1 + 112;
      v327 = a1 + 64;
      v326 = &v351;
      sub_20E970310((uint64_t)v330, (__int128 **)&v329, &v328, &v327, (_DWORD **)&v326);
      v21 = operator new();
      v201 = v332;
      *(float64x2_t *)(v21 + 32) = v331;
      *(_OWORD *)(v21 + 48) = v201;
      *(_QWORD *)(v21 + 64) = *(_QWORD *)v333;
      v202 = *(_OWORD *)&v330[16];
      *(_OWORD *)v21 = *(_OWORD *)v330;
      *(_OWORD *)(v21 + 16) = v202;
      *(_OWORD *)(v21 + 88) = *(_OWORD *)&v333[24];
      *(_OWORD *)(v21 + 104) = *(_OWORD *)&v333[40];
      *(_OWORD *)(v21 + 120) = *(_OWORD *)&v333[56];
      *(_QWORD *)(v21 + 136) = *(_QWORD *)&v333[72];
      *(_OWORD *)(v21 + 72) = *(_OWORD *)&v333[8];
      *(_BYTE *)(v21 + 160) = v335[0];
      *(int64x2_t *)(v21 + 144) = v334;
      *(_OWORD *)(v21 + 168) = *(_OWORD *)&v335[8];
      *(_OWORD *)(v21 + 232) = *(_OWORD *)&v335[72];
      *(_OWORD *)(v21 + 216) = *(_OWORD *)&v335[56];
      *(_OWORD *)(v21 + 200) = *(_OWORD *)&v335[40];
      *(_OWORD *)(v21 + 184) = *(_OWORD *)&v335[24];
      *(_DWORD *)(v21 + 992) = 2;
      goto LABEL_149;
    case 1:
      v23 = *(__int128 **)(a1 + 16);
      if (*(_QWORD *)(a1 + 24) - (_QWORD)v23 > 0x18uLL)
        goto LABEL_41;
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Calibration/include/VIO/Calibration/CalibrationUtil.h", 81, (uint64_t)"camera.radial_distortion_.size() >= 4", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_162;
      }
      v23 = *(__int128 **)(a1 + 16);
LABEL_41:
      v24 = *(_QWORD *)(a1 + 176);
      v25 = *(float64x2_t *)(a1 + 144);
      v291 = *(_OWORD *)(a1 + 128);
      v300 = *(_OWORD *)(a1 + 112);
      v26 = vmuld_n_f64(v25.f64[0], *(double *)&v300);
      v27 = -*((double *)&v300 + 1) / v26;
      v28 = -(vmuld_n_f64(v25.f64[0], *(double *)&v291) - vmuld_lane_f64(*((double *)&v300 + 1), v25, 1)) / v26;
      v29 = 1.0 / v25.f64[0];
      v283 = v25;
      v309 = *v23;
      v318 = *(_OWORD *)(a1 + 160);
      v30 = *((_QWORD *)v23 + 2);
      v31 = *((_QWORD *)v23 + 3);
      v32 = -v25.f64[1] / v25.f64[0];
      v21 = operator new();
      *(float64x2_t *)(v21 + 32) = v283;
      *(_OWORD *)(v21 + 48) = v318;
      *(_OWORD *)v21 = v300;
      *(_OWORD *)(v21 + 16) = v291;
      *(_QWORD *)(v21 + 64) = v24;
      *(double *)(v21 + 72) = 1.0 / *(double *)&v300;
      *(double *)(v21 + 80) = v27;
      *(double *)(v21 + 88) = v28;
      *(_QWORD *)(v21 + 96) = 0;
      *(double *)(v21 + 104) = v29;
      *(float64_t *)(v21 + 112) = v32;
      *(_QWORD *)(v21 + 120) = 0;
      *(_QWORD *)(v21 + 128) = 0;
      *(_OWORD *)(v21 + 136) = xmmword_2102E3C70;
      *(_QWORD *)(v21 + 152) = 0x7FF8000000000000;
      *(_BYTE *)(v21 + 160) = 0;
      *(_OWORD *)(v21 + 168) = v309;
      *(_QWORD *)(v21 + 184) = v30;
      *(_QWORD *)(v21 + 192) = v31;
      *(_BYTE *)(v21 + 468) = 0;
      v22 = 3;
      goto LABEL_148;
    case 2:
      v33 = *(__int128 **)(a1 + 16);
      if (*(_QWORD *)(a1 + 24) - (_QWORD)v33 > 0x18uLL)
        goto LABEL_45;
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Calibration/include/VIO/Calibration/CalibrationUtil.h", 86, (uint64_t)"camera.radial_distortion_.size() >= 4", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_162;
      }
      v33 = *(__int128 **)(a1 + 16);
LABEL_45:
      v34 = *(_QWORD *)(a1 + 176);
      v35 = *(float64x2_t *)(a1 + 144);
      v292 = *(_OWORD *)(a1 + 128);
      v301 = *(_OWORD *)(a1 + 112);
      v36 = vmuld_n_f64(v35.f64[0], *(double *)&v301);
      v37 = -*((double *)&v301 + 1) / v36;
      v38 = -(vmuld_n_f64(v35.f64[0], *(double *)&v292) - vmuld_lane_f64(*((double *)&v301 + 1), v35, 1)) / v36;
      v39 = 1.0 / v35.f64[0];
      v284 = v35;
      v310 = *v33;
      v319 = *(_OWORD *)(a1 + 160);
      v40 = *((_QWORD *)v33 + 2);
      v41 = *((_QWORD *)v33 + 3);
      v42 = -v35.f64[1] / v35.f64[0];
      v21 = operator new();
      *(float64x2_t *)(v21 + 32) = v284;
      *(_OWORD *)(v21 + 48) = v319;
      *(_OWORD *)v21 = v301;
      *(_OWORD *)(v21 + 16) = v292;
      *(_QWORD *)(v21 + 64) = v34;
      *(double *)(v21 + 72) = 1.0 / *(double *)&v301;
      *(double *)(v21 + 80) = v37;
      *(double *)(v21 + 88) = v38;
      *(_QWORD *)(v21 + 96) = 0;
      *(double *)(v21 + 104) = v39;
      *(float64_t *)(v21 + 112) = v42;
      *(_QWORD *)(v21 + 120) = 0;
      *(_QWORD *)(v21 + 128) = 0;
      *(_OWORD *)(v21 + 136) = xmmword_2102E3C70;
      *(_QWORD *)(v21 + 152) = 0x7FF8000000000000;
      *(_BYTE *)(v21 + 160) = 0;
      *(_OWORD *)(v21 + 168) = v310;
      *(_QWORD *)(v21 + 184) = v40;
      *(_QWORD *)(v21 + 192) = v41;
      *(_BYTE *)(v21 + 468) = 0;
      v22 = 4;
      goto LABEL_148;
    case 3:
      v43 = *(__int128 **)(a1 + 16);
      if (*(_QWORD *)(a1 + 24) - (_QWORD)v43 > 0x18uLL)
        goto LABEL_49;
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Calibration/include/VIO/Calibration/CalibrationUtil.h", 91, (uint64_t)"camera.radial_distortion_.size() >= 4", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_162;
      }
      v43 = *(__int128 **)(a1 + 16);
LABEL_49:
      v44 = *(_QWORD *)(a1 + 176);
      v45 = *(float64x2_t *)(a1 + 144);
      v293 = *(_OWORD *)(a1 + 128);
      v302 = *(_OWORD *)(a1 + 112);
      v46 = vmuld_n_f64(v45.f64[0], *(double *)&v302);
      v47 = -*((double *)&v302 + 1) / v46;
      v48 = -(vmuld_n_f64(v45.f64[0], *(double *)&v293) - vmuld_lane_f64(*((double *)&v302 + 1), v45, 1)) / v46;
      v49 = 1.0 / v45.f64[0];
      v285 = v45;
      v311 = *v43;
      v320 = *(_OWORD *)(a1 + 160);
      v50 = *((_QWORD *)v43 + 2);
      v51 = *((_QWORD *)v43 + 3);
      v52 = -v45.f64[1] / v45.f64[0];
      v21 = operator new();
      *(float64x2_t *)(v21 + 32) = v285;
      *(_OWORD *)(v21 + 48) = v320;
      *(_OWORD *)v21 = v302;
      *(_OWORD *)(v21 + 16) = v293;
      *(_QWORD *)(v21 + 64) = v44;
      *(double *)(v21 + 72) = 1.0 / *(double *)&v302;
      *(double *)(v21 + 80) = v47;
      *(double *)(v21 + 88) = v48;
      *(_QWORD *)(v21 + 96) = 0;
      *(double *)(v21 + 104) = v49;
      *(float64_t *)(v21 + 112) = v52;
      *(_QWORD *)(v21 + 120) = 0;
      *(_QWORD *)(v21 + 128) = 0;
      *(_OWORD *)(v21 + 136) = xmmword_2102E3C70;
      *(_QWORD *)(v21 + 152) = 0x7FF8000000000000;
      *(_BYTE *)(v21 + 160) = 0;
      *(_OWORD *)(v21 + 168) = v311;
      *(_QWORD *)(v21 + 184) = v50;
      *(_QWORD *)(v21 + 192) = v51;
      *(_BYTE *)(v21 + 468) = 0;
      v22 = 5;
      goto LABEL_148;
    case 4:
      v53 = *(_QWORD *)(a1 + 16);
      if ((unint64_t)(*(_QWORD *)(a1 + 24) - v53) > 0x10)
        goto LABEL_53;
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Calibration/include/VIO/Calibration/CalibrationUtil.h", 75, (uint64_t)"camera.radial_distortion_.size() >= 3", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_162;
      }
      v53 = *(_QWORD *)(a1 + 16);
LABEL_53:
      v54 = *(_QWORD *)(a1 + 176);
      v55 = *(float64x2_t *)(a1 + 144);
      v321 = *(_OWORD *)(a1 + 160);
      v294 = *(_OWORD *)(a1 + 128);
      v303 = *(_OWORD *)(a1 + 112);
      v56 = vmuld_n_f64(v55.f64[0], *(double *)&v303);
      v57 = -*((double *)&v303 + 1) / v56;
      v58 = -(vmuld_n_f64(v55.f64[0], *(double *)&v294) - vmuld_lane_f64(*((double *)&v303 + 1), v55, 1)) / v56;
      v59 = 1.0 / v55.f64[0];
      v286 = v55;
      *(_OWORD *)&v330[7] = *(_OWORD *)v53;
      *(_QWORD *)&v330[23] = *(_QWORD *)(v53 + 16);
      v312 = *(_OWORD *)(a1 + 80);
      v60 = *(_QWORD *)(a1 + 96);
      v61 = *(_QWORD *)(a1 + 104);
      v62 = -v55.f64[1] / v55.f64[0];
      v21 = operator new();
      *(float64x2_t *)(v21 + 32) = v286;
      *(_OWORD *)(v21 + 48) = v321;
      *(_OWORD *)v21 = v303;
      *(_OWORD *)(v21 + 16) = v294;
      *(_QWORD *)(v21 + 64) = v54;
      *(double *)(v21 + 72) = 1.0 / *(double *)&v303;
      *(double *)(v21 + 80) = v57;
      *(double *)(v21 + 88) = v58;
      *(_QWORD *)(v21 + 96) = 0;
      *(double *)(v21 + 104) = v59;
      *(float64_t *)(v21 + 112) = v62;
      *(_QWORD *)(v21 + 120) = 0;
      *(_QWORD *)(v21 + 128) = 0;
      *(_OWORD *)(v21 + 136) = xmmword_2102E3C70;
      *(_QWORD *)(v21 + 152) = 0x7FF8000000000000;
      *(_BYTE *)(v21 + 160) = 0;
      *(_OWORD *)(v21 + 168) = *(_OWORD *)&v330[7];
      *(_QWORD *)(v21 + 184) = *(_QWORD *)&v330[23];
      *(_OWORD *)(v21 + 192) = v312;
      *(_QWORD *)(v21 + 208) = v60;
      *(_QWORD *)(v21 + 216) = v61;
      v22 = 6;
      goto LABEL_148;
    case 5:
      v63 = *(__int128 **)(a1 + 16);
      if (*(_QWORD *)(a1 + 24) - (_QWORD)v63 > 0x18uLL)
        goto LABEL_57;
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Calibration/include/VIO/Calibration/CalibrationUtil.h", 96, (uint64_t)"camera.radial_distortion_.size() >= 4", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_162;
      }
      v63 = *(__int128 **)(a1 + 16);
LABEL_57:
      v64 = (_OWORD *)(a1 + 200);
      v66 = *(_QWORD *)(a1 + 184);
      v65 = *(std::__shared_weak_count **)(a1 + 192);
      if (v65)
      {
        p_shared_owners = (unint64_t *)&v65->__shared_owners_;
        do
          v68 = __ldxr(p_shared_owners);
        while (__stxr(v68 + 1, p_shared_owners));
      }
      v70 = *(int64x2_t *)(a1 + 216);
      v69 = a1 + 216;
      *(_QWORD *)&v71 = *(_QWORD *)(v69 + 16);
      v72 = *(int64x2_t *)(v69 + 24);
      v73 = *(_QWORD *)(v69 + 64);
      v74 = *(_OWORD *)(v69 + 48);
      *((_QWORD *)&v71 + 1) = *(_QWORD *)(v69 + 40);
      v75 = *(_OWORD *)(v69 - 104);
      v76 = *(_OWORD *)(v69 - 88);
      v77 = *(_OWORD *)(v69 - 56);
      v78 = *(_QWORD *)(v69 - 40);
      v331 = *(float64x2_t *)(v69 - 72);
      v332 = v77;
      *(_OWORD *)v330 = v75;
      *(_OWORD *)&v330[16] = v76;
      *(double *)&v77 = vmuld_n_f64(v331.f64[0], *(double *)&v75);
      *(_QWORD *)v333 = v78;
      *(double *)&v333[8] = 1.0 / *(double *)&v75;
      *(double *)&v333[16] = -*((double *)&v75 + 1) / *(double *)&v77;
      *(double *)&v333[24] = -(vmuld_n_f64(v331.f64[0], *(double *)&v76) - vmuld_lane_f64(*((double *)&v75 + 1), v331, 1))/ *(double *)&v77;
      *(_QWORD *)&v333[32] = 0;
      *(double *)&v333[40] = 1.0 / v331.f64[0];
      *(double *)&v333[48] = -v331.f64[1] / v331.f64[0];
      *(_QWORD *)&v333[64] = 0;
      *(_QWORD *)&v333[56] = 0;
      *(_QWORD *)&v333[72] = 0x3FF0000000000000;
      *(_QWORD *)&v335[312] = v66;
      *(_QWORD *)&v335[320] = v65;
      *(_QWORD *)&v335[344] = v74;
      *(int64x2_t *)&v335[328] = vzip1q_s64(v70, v72);
      *(_QWORD *)&v335[368] = *((_QWORD *)&v74 + 1);
      *(int64x2_t *)&v335[352] = vzip2q_s64(v70, v72);
      *(_QWORD *)&v335[392] = v73;
      *(_OWORD *)&v335[376] = v71;
      *(_OWORD *)&v335[400] = *v64;
      v79 = *v63;
      *(_OWORD *)&v335[24] = v63[1];
      *(_OWORD *)&v335[8] = v79;
      v335[308] = 0;
      v334 = vdupq_n_s64(0x7FF8000000000000uLL);
      v335[0] = 0;
      *(_OWORD *)&v335[416] = xmmword_2102E3C50;
      *((_QWORD *)&v344 + 1) = 0xBFF0000000000000;
      v345 = 0xFFEFFFFFFFFFFFFFLL;
      v80 = operator new();
      v81 = v332;
      *(float64x2_t *)(v80 + 32) = v331;
      *(_OWORD *)(v80 + 48) = v81;
      v82 = *(_OWORD *)&v330[16];
      *(_OWORD *)v80 = *(_OWORD *)v330;
      *(_OWORD *)(v80 + 16) = v82;
      v83 = *(_OWORD *)&v333[8];
      *(_OWORD *)(v80 + 88) = *(_OWORD *)&v333[24];
      v84 = *(_OWORD *)&v333[56];
      *(_OWORD *)(v80 + 104) = *(_OWORD *)&v333[40];
      *(_OWORD *)(v80 + 120) = v84;
      *(_QWORD *)(v80 + 64) = *(_QWORD *)v333;
      *(_QWORD *)(v80 + 136) = *(_QWORD *)&v333[72];
      *(_OWORD *)(v80 + 72) = v83;
      *(_BYTE *)(v80 + 160) = v335[0];
      *(int64x2_t *)(v80 + 144) = v334;
      memcpy((void *)(v80 + 168), &v335[8], 0x12DuLL);
      *(_QWORD *)(v80 + 472) = v66;
      *(_QWORD *)(v80 + 480) = v65;
      if (v65)
      {
        v85 = (unint64_t *)&v65->__shared_owners_;
        do
          v86 = __ldxr(v85);
        while (__stxr(v86 + 1, v85));
      }
      v87 = *(_OWORD *)&v335[376];
      *(_OWORD *)(v80 + 520) = *(_OWORD *)&v335[360];
      *(_OWORD *)(v80 + 536) = v87;
      *(_QWORD *)(v80 + 552) = *(_QWORD *)&v335[392];
      v88 = *(_OWORD *)&v335[344];
      *(_OWORD *)(v80 + 488) = *(_OWORD *)&v335[328];
      *(_OWORD *)(v80 + 504) = v88;
      *(_OWORD *)(v80 + 560) = *(_OWORD *)&v335[400];
      *(_DWORD *)(v80 + 992) = 7;
      *(_QWORD *)(v80 + 1000) = 0x7FF8000000000000;
      *(_QWORD *)(v80 + 1008) = 0xFFEFFFFFFFFFFFFFLL;
      *(_OWORD *)(v80 + 1424) = xmmword_2102E3C60;
      *a2 = v80;
      if (!v65)
        return;
      v89 = (unint64_t *)&v65->__shared_owners_;
      do
        v90 = __ldaxr(v89);
      while (__stlxr(v90 - 1, v89));
      goto LABEL_160;
    case 6:
      goto LABEL_37;
    case 7:
      v91 = *(__int128 **)(a1 + 16);
      if (*(_QWORD *)(a1 + 24) - (_QWORD)v91 > 0x30uLL)
        goto LABEL_70;
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Calibration/include/VIO/Calibration/CalibrationUtil.h", 103, (uint64_t)"camera.radial_distortion_.size() >= 7", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_162;
      }
      v91 = *(__int128 **)(a1 + 16);
LABEL_70:
      v92 = *(_QWORD *)(a1 + 176);
      v322 = *(_OWORD *)(a1 + 160);
      v277 = *(float64x2_t *)(a1 + 144);
      v280 = *(_OWORD *)(a1 + 128);
      v287 = *(_OWORD *)(a1 + 112);
      v93 = vmuld_n_f64(v277.f64[0], *(double *)&v287);
      v94 = -*((double *)&v287 + 1) / v93;
      v95 = -(vmuld_n_f64(v277.f64[0], *(double *)&v280) - vmuld_lane_f64(*((double *)&v287 + 1), v277, 1)) / v93;
      v304 = v91[1];
      v313 = *v91;
      v295 = v91[2];
      v96 = *((_QWORD *)v91 + 6);
      v21 = operator new();
      *(float64x2_t *)(v21 + 32) = v277;
      *(_OWORD *)(v21 + 48) = v322;
      *(_OWORD *)v21 = v287;
      *(_OWORD *)(v21 + 16) = v280;
      *(_QWORD *)(v21 + 64) = v92;
      *(double *)(v21 + 72) = 1.0 / *(double *)&v287;
      *(double *)(v21 + 80) = v94;
      *(double *)(v21 + 88) = v95;
      *(_QWORD *)(v21 + 96) = 0;
      *(double *)(v21 + 104) = 1.0 / v277.f64[0];
      *(double *)(v21 + 112) = -v277.f64[1] / v277.f64[0];
      *(_QWORD *)(v21 + 120) = 0;
      *(_QWORD *)(v21 + 128) = 0;
      *(_OWORD *)(v21 + 136) = xmmword_2102E3C70;
      *(_QWORD *)(v21 + 152) = 0x7FF8000000000000;
      *(_BYTE *)(v21 + 160) = 0;
      *(_OWORD *)(v21 + 168) = v313;
      *(_OWORD *)(v21 + 184) = v304;
      *(_OWORD *)(v21 + 200) = v295;
      *(_QWORD *)(v21 + 216) = v96;
      *(_BYTE *)(v21 + 492) = 0;
      v22 = 8;
      goto LABEL_148;
    case 8:
      v173 = *(__int128 **)(a1 + 16);
      if (*(_QWORD *)(a1 + 24) - (_QWORD)v173 > 0x30uLL)
        goto LABEL_131;
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Calibration/include/VIO/Calibration/CalibrationUtil.h", 108, (uint64_t)"camera.radial_distortion_.size() >= 7", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_162;
      }
      v173 = *(__int128 **)(a1 + 16);
LABEL_131:
      v174 = (_OWORD *)(a1 + 200);
      v175 = *(_QWORD *)(a1 + 184);
      v65 = *(std::__shared_weak_count **)(a1 + 192);
      if (v65)
      {
        v176 = (unint64_t *)&v65->__shared_owners_;
        do
          v177 = __ldxr(v176);
        while (__stxr(v177 + 1, v176));
      }
      v179 = *(int64x2_t *)(a1 + 216);
      v178 = a1 + 216;
      *(_QWORD *)&v180 = *(_QWORD *)(v178 + 16);
      v181 = *(int64x2_t *)(v178 + 24);
      v182 = *(_QWORD *)(v178 + 64);
      *((_QWORD *)&v180 + 1) = *(_QWORD *)(v178 + 40);
      v183 = *(_OWORD *)(v178 + 48);
      v184 = *(_OWORD *)(v178 - 104);
      v185 = *(_OWORD *)(v178 - 88);
      v186 = *(_OWORD *)(v178 - 56);
      v187 = *(_QWORD *)(v178 - 40);
      v331 = *(float64x2_t *)(v178 - 72);
      v332 = v186;
      *(_OWORD *)v330 = v184;
      *(_OWORD *)&v330[16] = v185;
      *(double *)&v186 = vmuld_n_f64(v331.f64[0], *(double *)&v184);
      *(_QWORD *)v333 = v187;
      *(double *)&v333[8] = 1.0 / *(double *)&v184;
      *(double *)&v333[16] = -*((double *)&v184 + 1) / *(double *)&v186;
      *(double *)&v333[24] = -(vmuld_n_f64(v331.f64[0], *(double *)&v185)
                             - vmuld_lane_f64(*((double *)&v184 + 1), v331, 1))
                           / *(double *)&v186;
      *(_QWORD *)&v333[32] = 0;
      *(double *)&v333[40] = 1.0 / v331.f64[0];
      *(double *)&v333[48] = -v331.f64[1] / v331.f64[0];
      *(_QWORD *)&v333[64] = 0;
      *(_QWORD *)&v333[56] = 0;
      *(_QWORD *)&v333[72] = 0x3FF0000000000000;
      *(_QWORD *)&v335[336] = v175;
      *(_QWORD *)&v335[344] = v65;
      *(_QWORD *)&v335[368] = v183;
      *(int64x2_t *)&v335[352] = vzip1q_s64(v179, v181);
      *(_QWORD *)&v335[392] = *((_QWORD *)&v183 + 1);
      *(int64x2_t *)&v335[376] = vzip2q_s64(v179, v181);
      *(_QWORD *)&v335[416] = v182;
      *(_OWORD *)&v335[400] = v180;
      *(_OWORD *)&v335[424] = *v174;
      v189 = v173[1];
      v188 = v173[2];
      v190 = *v173;
      *(_QWORD *)&v335[56] = *((_QWORD *)v173 + 6);
      *(_OWORD *)&v335[8] = v190;
      *(_OWORD *)&v335[24] = v189;
      *(_OWORD *)&v335[40] = v188;
      v335[332] = 0;
      v334 = vdupq_n_s64(0x7FF8000000000000uLL);
      v335[0] = 0;
      *(_QWORD *)&v335[440] = 0x7FF8000000000000;
      *(_QWORD *)&v335[448] = 0xFFEFFFFFFFFFFFFFLL;
      v346 = xmmword_2102E3C60;
      v191 = operator new();
      v192 = v332;
      *(float64x2_t *)(v191 + 32) = v331;
      *(_OWORD *)(v191 + 48) = v192;
      v193 = *(_OWORD *)&v330[16];
      *(_OWORD *)v191 = *(_OWORD *)v330;
      *(_OWORD *)(v191 + 16) = v193;
      v194 = *(_OWORD *)&v333[8];
      *(_OWORD *)(v191 + 88) = *(_OWORD *)&v333[24];
      v195 = *(_OWORD *)&v333[56];
      *(_OWORD *)(v191 + 104) = *(_OWORD *)&v333[40];
      *(_OWORD *)(v191 + 120) = v195;
      *(_QWORD *)(v191 + 64) = *(_QWORD *)v333;
      *(_QWORD *)(v191 + 136) = *(_QWORD *)&v333[72];
      *(_OWORD *)(v191 + 72) = v194;
      *(_BYTE *)(v191 + 160) = v335[0];
      *(int64x2_t *)(v191 + 144) = v334;
      memcpy((void *)(v191 + 168), &v335[8], 0x145uLL);
      *(_QWORD *)(v191 + 496) = v175;
      *(_QWORD *)(v191 + 504) = v65;
      if (v65)
      {
        v196 = (unint64_t *)&v65->__shared_owners_;
        do
          v197 = __ldxr(v196);
        while (__stxr(v197 + 1, v196));
      }
      v198 = *(_OWORD *)&v335[400];
      *(_OWORD *)(v191 + 544) = *(_OWORD *)&v335[384];
      *(_OWORD *)(v191 + 560) = v198;
      *(_QWORD *)(v191 + 576) = *(_QWORD *)&v335[416];
      v199 = *(_OWORD *)&v335[368];
      *(_OWORD *)(v191 + 512) = *(_OWORD *)&v335[352];
      *(_OWORD *)(v191 + 528) = v199;
      *(_OWORD *)(v191 + 584) = *(_OWORD *)&v335[424];
      *(_DWORD *)(v191 + 992) = 9;
      *(_QWORD *)(v191 + 1000) = 0x7FF8000000000000;
      *(_QWORD *)(v191 + 1008) = 0xFFEFFFFFFFFFFFFFLL;
      *(_OWORD *)(v191 + 1424) = xmmword_2102E3C60;
      *a2 = v191;
      if (!v65)
        return;
      v200 = (unint64_t *)&v65->__shared_owners_;
      do
        v90 = __ldaxr(v200);
      while (__stlxr(v90 - 1, v200));
      goto LABEL_160;
    case 9:
      if (*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16) <= 0x68uLL
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Calibration/include/VIO/Calibration/CalibrationUtil.h", 115, (uint64_t)"camera.radial_distortion_.size() >= 14", 38, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_162;
      }
      v97 = *(_QWORD *)(a1 + 40);
      if ((unint64_t)(*(_QWORD *)(a1 + 48) - v97) > 0x68)
        goto LABEL_76;
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Calibration/include/VIO/Calibration/CalibrationUtil.h", 116, (uint64_t)"camera.radial_undistortion_.size() >= 14", 40, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_162;
      }
      v97 = *(_QWORD *)(a1 + 40);
LABEL_76:
      v98 = *(uint64_t **)(a1 + 16);
      v259 = *(_QWORD *)(a1 + 176);
      v100 = *(float64x2_t *)(a1 + 144);
      v99 = *(int8x16_t *)(a1 + 160);
      v102 = *(int8x16_t *)(a1 + 112);
      v101 = *(int8x16_t *)(a1 + 128);
      v103 = *v98;
      v104 = v98[1];
      v105 = v98[2];
      v269 = v98[9];
      v271 = v98[8];
      v265 = v98[11];
      v267 = v98[10];
      v261 = v98[13];
      v263 = v98[12];
      v288 = v98[3];
      v281 = v98[4];
      v275 = v98[6];
      v278 = v98[5];
      v273 = v98[7];
      v314 = v100;
      v323 = v99;
      v296 = v102;
      v305 = v101;
      if (!v97)
      {
        if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.hpp", 668, (uint64_t)"inverse_radial", 14, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          *(_OWORD *)v333 = MEMORY[0x40];
          *(_OWORD *)&v333[16] = MEMORY[0x50];
          *(_OWORD *)&v333[32] = MEMORY[0x60];
          *(_OWORD *)v330 = MEMORY[0];
          *(_OWORD *)&v330[16] = MEMORY[0x10];
          v331 = (float64x2_t)MEMORY[0x20];
          v332 = MEMORY[0x30];
          v100 = v314;
          v99 = v323;
          v102 = v296;
          v101 = v305;
          goto LABEL_144;
        }
LABEL_162:
        abort();
      }
      v332 = *(_OWORD *)(v97 + 48);
      *(_OWORD *)v333 = *(_OWORD *)(v97 + 64);
      *(_OWORD *)&v333[16] = *(_OWORD *)(v97 + 80);
      *(_OWORD *)&v333[32] = *(_OWORD *)(v97 + 96);
      *(_OWORD *)v330 = *(_OWORD *)v97;
      *(_OWORD *)&v330[16] = *(_OWORD *)(v97 + 16);
      v331 = *(float64x2_t *)(v97 + 32);
LABEL_144:
      v256 = vextq_s8((int8x16_t)v100, (int8x16_t)v100, 8uLL).u64[0];
      v258 = vextq_s8(v99, v99, 8uLL).u64[0];
      v252 = vextq_s8(v102, v102, 8uLL).u64[0];
      v254 = vextq_s8(v101, v101, 8uLL).u64[0];
      v203 = vmuld_n_f64(v100.f64[0], *(double *)v102.i64);
      v204 = 1.0 / *(double *)v102.i64;
      v205 = -*(double *)&v102.i64[1] / v203;
      v206 = -(vmuld_n_f64(v100.f64[0], *(double *)v101.i64) - vmuld_lane_f64(*(double *)&v102.i64[1], v100, 1)) / v203;
      v207 = 1.0 / v100.f64[0];
      v208 = -v100.f64[1] / v100.f64[0];
      v21 = operator new();
      *(_QWORD *)&v210 = v296.i64[0];
      *(_QWORD *)&v209 = v305.i64[0];
      *((_QWORD *)&v210 + 1) = v252;
      *((_QWORD *)&v209 + 1) = v254;
      *(_OWORD *)v21 = v210;
      *(_OWORD *)(v21 + 16) = v209;
      *(float64_t *)&v210 = v314.f64[0];
      *(_QWORD *)&v209 = v323.i64[0];
      *((_QWORD *)&v210 + 1) = v256;
      *((_QWORD *)&v209 + 1) = v258;
      *(_OWORD *)(v21 + 32) = v210;
      *(_OWORD *)(v21 + 48) = v209;
      *(_QWORD *)(v21 + 64) = v259;
      *(double *)(v21 + 72) = v204;
      *(double *)(v21 + 80) = v205;
      *(double *)(v21 + 88) = v206;
      *(_QWORD *)(v21 + 96) = 0;
      *(double *)(v21 + 104) = v207;
      *(float64_t *)(v21 + 112) = v208;
      *(_QWORD *)(v21 + 120) = 0;
      *(_QWORD *)(v21 + 128) = 0;
      *(_OWORD *)(v21 + 136) = xmmword_2102E3C70;
      *(_QWORD *)(v21 + 152) = 0x7FF8000000000000;
      *(_BYTE *)(v21 + 160) = 0;
      *(_QWORD *)(v21 + 168) = v103;
      *(_QWORD *)(v21 + 176) = v104;
      *(_QWORD *)(v21 + 184) = v105;
      *(_QWORD *)(v21 + 192) = v288;
      *(_QWORD *)(v21 + 200) = v281;
      *(_QWORD *)(v21 + 208) = v278;
      *(_QWORD *)(v21 + 216) = v275;
      *(_QWORD *)(v21 + 224) = v273;
      *(_QWORD *)(v21 + 232) = v271;
      *(_QWORD *)(v21 + 240) = v269;
      *(_QWORD *)(v21 + 248) = v267;
      *(_QWORD *)(v21 + 256) = v265;
      *(_QWORD *)(v21 + 264) = v263;
      *(_QWORD *)(v21 + 272) = v261;
      v211 = *(_OWORD *)&v333[16];
      *(_OWORD *)(v21 + 344) = *(_OWORD *)v333;
      *(_OWORD *)(v21 + 360) = v211;
      *(_OWORD *)(v21 + 376) = *(_OWORD *)&v333[32];
      v212 = *(_OWORD *)&v330[16];
      *(_OWORD *)(v21 + 280) = *(_OWORD *)v330;
      *(_OWORD *)(v21 + 296) = v212;
      v213 = v332;
      *(float64x2_t *)(v21 + 312) = v331;
      *(_OWORD *)(v21 + 328) = v213;
      *(_BYTE *)(v21 + 656) = 0;
      v22 = 10;
LABEL_148:
      *(_DWORD *)(v21 + 992) = v22;
LABEL_149:
      *(_QWORD *)(v21 + 1000) = 0x7FF8000000000000;
      *(_QWORD *)(v21 + 1008) = 0xFFEFFFFFFFFFFFFFLL;
      *(_OWORD *)(v21 + 1424) = xmmword_2102E3C60;
      *a2 = v21;
      return;
    case 0xA:
      if (*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16) <= 0x68uLL
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Calibration/include/VIO/Calibration/CalibrationUtil.h", 122, (uint64_t)"camera.radial_distortion_.size() >= 14", 38, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_162;
      }
      v106 = *(const void **)(a1 + 40);
      if (*(_QWORD *)(a1 + 48) - (_QWORD)v106 > 0x68uLL)
        goto LABEL_83;
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Calibration/include/VIO/Calibration/CalibrationUtil.h", 123, (uint64_t)"camera.radial_undistortion_.size() >= 14", 40, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_162;
      }
      v106 = *(const void **)(a1 + 40);
LABEL_83:
      v107 = (__int128 *)(a1 + 112);
      v108 = *(void **)(a1 + 16);
      v109 = (_OWORD *)(a1 + 200);
      v110 = *(_QWORD *)(a1 + 192);
      *(_QWORD *)&v329 = *(_QWORD *)(a1 + 184);
      *((_QWORD *)&v329 + 1) = v110;
      if (v110)
      {
        v111 = (unint64_t *)(v110 + 8);
        do
          v112 = __ldxr(v111);
        while (__stxr(v112 + 1, v111));
      }
      v114 = *(int64x2_t *)(a1 + 216);
      v113 = a1 + 216;
      *(_QWORD *)&v115 = *(_QWORD *)(v113 + 16);
      v116 = *(int64x2_t *)(v113 + 24);
      v117 = *(_QWORD *)(v113 + 64);
      v118 = *(_OWORD *)(v113 + 48);
      *((_QWORD *)&v115 + 1) = *(_QWORD *)(v113 + 40);
      v351 = vzip1q_s64(v114, v116);
      *((_QWORD *)&v352[1] + 1) = *((_QWORD *)&v118 + 1);
      *(int64x2_t *)((char *)v352 + 8) = vzip2q_s64(v114, v116);
      *(_QWORD *)&v352[0] = v118;
      *(_QWORD *)&v354 = v117;
      v353 = v115;
      sub_20EB38854((uint64_t)v330, v107, v108, &v329, (uint64_t)&v351, v109, v106);
      v119 = (std::__shared_weak_count *)*((_QWORD *)&v329 + 1);
      if (*((_QWORD *)&v329 + 1))
      {
        v120 = (unint64_t *)(*((_QWORD *)&v329 + 1) + 8);
        do
          v121 = __ldaxr(v120);
        while (__stlxr(v121 - 1, v120));
        if (!v121)
        {
          ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
          std::__shared_weak_count::__release_weak(v119);
        }
      }
      *(_OWORD *)&v335[608] = xmmword_2102E3C50;
      v347 = 0xBFF0000000000000;
      v348 = 0xFFEFFFFFFFFFFFFFLL;
      v122 = operator new();
      v123 = v332;
      *(float64x2_t *)(v122 + 32) = v331;
      *(_OWORD *)(v122 + 48) = v123;
      *(_QWORD *)(v122 + 64) = *(_QWORD *)v333;
      v124 = *(_OWORD *)&v330[16];
      *(_OWORD *)v122 = *(_OWORD *)v330;
      *(_OWORD *)(v122 + 16) = v124;
      *(_OWORD *)(v122 + 88) = *(_OWORD *)&v333[24];
      *(_OWORD *)(v122 + 104) = *(_OWORD *)&v333[40];
      *(_OWORD *)(v122 + 120) = *(_OWORD *)&v333[56];
      *(_QWORD *)(v122 + 136) = *(_QWORD *)&v333[72];
      *(_OWORD *)(v122 + 72) = *(_OWORD *)&v333[8];
      *(_BYTE *)(v122 + 160) = v335[0];
      *(int64x2_t *)(v122 + 144) = v334;
      memcpy((void *)(v122 + 168), &v335[8], 0x1E9uLL);
      *(_QWORD *)(v122 + 664) = *(_QWORD *)&v335[504];
      v125 = *(_QWORD *)&v335[512];
      *(_QWORD *)(v122 + 672) = *(_QWORD *)&v335[512];
      if (v125)
      {
        v126 = (unint64_t *)(v125 + 8);
        do
          v127 = __ldxr(v126);
        while (__stxr(v127 + 1, v126));
        v65 = *(std::__shared_weak_count **)&v335[512];
      }
      else
      {
        v65 = 0;
      }
      *(_QWORD *)(v122 + 744) = *(_QWORD *)&v335[584];
      v231 = *(_OWORD *)&v335[568];
      *(_OWORD *)(v122 + 712) = *(_OWORD *)&v335[552];
      *(_OWORD *)(v122 + 728) = v231;
      v232 = *(_OWORD *)&v335[536];
      *(_OWORD *)(v122 + 680) = *(_OWORD *)&v335[520];
      *(_OWORD *)(v122 + 696) = v232;
      *(_OWORD *)(v122 + 752) = *(_OWORD *)&v335[592];
      *(_DWORD *)(v122 + 992) = 11;
      *(_QWORD *)(v122 + 1000) = 0x7FF8000000000000;
      *(_QWORD *)(v122 + 1008) = 0xFFEFFFFFFFFFFFFFLL;
      *(_OWORD *)(v122 + 1424) = xmmword_2102E3C60;
      *a2 = v122;
      if (!v65)
        return;
      v233 = (unint64_t *)&v65->__shared_owners_;
      do
        v90 = __ldaxr(v233);
      while (__stlxr(v90 - 1, v233));
      goto LABEL_160;
    case 0xB:
      if (*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16) <= 0x68uLL
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Calibration/include/VIO/Calibration/CalibrationUtil.h", 130, (uint64_t)"camera.radial_distortion_.size() >= 14", 38, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_162;
      }
      if (*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40) <= 0x68uLL
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Calibration/include/VIO/Calibration/CalibrationUtil.h", 131, (uint64_t)"camera.radial_undistortion_.size() >= 14", 40, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_162;
      }
      v128 = *(uint64_t **)(a1 + 16);
      if (*(_QWORD *)(a1 + 24) - (_QWORD)v128 != 112
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 319, (uint64_t)"std::size(c) == extent", 22, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_162;
      }
      v129 = *(uint64_t **)(a1 + 40);
      if (*(_QWORD *)(a1 + 48) - (_QWORD)v129 != 112
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 319, (uint64_t)"std::size(c) == extent", 22, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_162;
      }
      v130 = *(_QWORD *)(a1 + 176);
      v297 = *(float64x2_t *)(a1 + 144);
      v306 = *(_OWORD *)(a1 + 128);
      v315 = *(_OWORD *)(a1 + 112);
      v324 = *(_OWORD *)(a1 + 160);
      v131 = vmuld_n_f64(v297.f64[0], *(double *)&v315);
      v132 = -*((double *)&v315 + 1) / v131;
      v133 = -(vmuld_n_f64(v297.f64[0], *(double *)&v306) - vmuld_lane_f64(*((double *)&v315 + 1), v297, 1)) / v131;
      v134 = *v128;
      v332 = *(_OWORD *)(v128 + 7);
      *(_OWORD *)v333 = *(_OWORD *)(v128 + 9);
      *(_OWORD *)&v333[16] = *(_OWORD *)(v128 + 11);
      *(_QWORD *)&v333[32] = v128[13];
      *(_OWORD *)v330 = *(_OWORD *)(v128 + 1);
      *(_OWORD *)&v330[16] = *(_OWORD *)(v128 + 3);
      v331 = *(float64x2_t *)(v128 + 5);
      v135 = *v129;
      v353 = *(_OWORD *)(v129 + 7);
      v354 = *(_OWORD *)(v129 + 9);
      v355 = *(_OWORD *)(v129 + 11);
      v356 = v129[13];
      v351 = *(int64x2_t *)(v129 + 1);
      v352[0] = *(_OWORD *)(v129 + 3);
      v352[1] = *(_OWORD *)(v129 + 5);
      v21 = operator new();
      *(float64x2_t *)(v21 + 32) = v297;
      *(_OWORD *)(v21 + 48) = v324;
      *(_OWORD *)v21 = v315;
      *(_OWORD *)(v21 + 16) = v306;
      *(_QWORD *)(v21 + 64) = v130;
      *(double *)(v21 + 72) = 1.0 / *(double *)&v315;
      *(double *)(v21 + 80) = v132;
      *(double *)(v21 + 88) = v133;
      *(_QWORD *)(v21 + 96) = 0;
      *(double *)(v21 + 104) = 1.0 / v297.f64[0];
      *(double *)(v21 + 112) = -v297.f64[1] / v297.f64[0];
      *(_QWORD *)(v21 + 120) = 0;
      *(_QWORD *)(v21 + 128) = 0;
      *(_OWORD *)(v21 + 136) = xmmword_2102E3C70;
      *(_QWORD *)(v21 + 152) = 0x7FF8000000000000;
      *(_BYTE *)(v21 + 160) = 0;
      *(_QWORD *)(v21 + 168) = v134;
      v136 = *(_OWORD *)&v333[16];
      *(_OWORD *)(v21 + 240) = *(_OWORD *)v333;
      *(_OWORD *)(v21 + 256) = v136;
      *(_QWORD *)(v21 + 272) = *(_QWORD *)&v333[32];
      v137 = *(_OWORD *)&v330[16];
      *(_OWORD *)(v21 + 176) = *(_OWORD *)v330;
      *(_OWORD *)(v21 + 192) = v137;
      v138 = v332;
      *(float64x2_t *)(v21 + 208) = v331;
      *(_OWORD *)(v21 + 224) = v138;
      *(_QWORD *)(v21 + 280) = v135;
      v139 = v355;
      *(_OWORD *)(v21 + 352) = v354;
      *(_OWORD *)(v21 + 368) = v139;
      *(_QWORD *)(v21 + 384) = v356;
      v140 = v352[0];
      *(int64x2_t *)(v21 + 288) = v351;
      *(_OWORD *)(v21 + 304) = v140;
      v141 = v353;
      *(_OWORD *)(v21 + 320) = v352[1];
      *(_OWORD *)(v21 + 336) = v141;
      v22 = 13;
      goto LABEL_148;
    case 0xC:
      if (*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16) <= 0xD8uLL
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Calibration/include/VIO/Calibration/CalibrationUtil.h", 135, (uint64_t)"camera.radial_distortion_.size() >= 28", 38, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_162;
      }
      v142 = *(_QWORD *)(a1 + 40);
      if ((unint64_t)(*(_QWORD *)(a1 + 48) - v142) > 0xD8)
        goto LABEL_109;
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Calibration/include/VIO/Calibration/CalibrationUtil.h", 136, (uint64_t)"camera.radial_undistortion_.size() >= 28", 40, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_162;
      }
      v142 = *(_QWORD *)(a1 + 40);
LABEL_109:
      v143 = *(uint64_t **)(a1 + 16);
      v241 = *(_QWORD *)(a1 + 176);
      v145 = *(float64x2_t *)(a1 + 144);
      v144 = *(int8x16_t *)(a1 + 160);
      v147 = *(int8x16_t *)(a1 + 112);
      v146 = *(int8x16_t *)(a1 + 128);
      v148 = *v143;
      v149 = v143[1];
      v150 = v143[2];
      v270 = v143[9];
      v272 = v143[8];
      v266 = v143[11];
      v268 = v143[10];
      v262 = v143[13];
      v264 = v143[12];
      v260 = v143[14];
      v257 = v143[15];
      v255 = v143[16];
      v253 = v143[17];
      v250 = v143[19];
      v251 = v143[18];
      v248 = v143[21];
      v249 = v143[20];
      v246 = v143[23];
      v247 = v143[22];
      v244 = v143[25];
      v245 = v143[24];
      v242 = v143[27];
      v243 = v143[26];
      v289 = v143[3];
      v282 = v143[4];
      v276 = v143[6];
      v279 = v143[5];
      v274 = v143[7];
      v316 = v145;
      v325 = v144;
      v298 = v147;
      v307 = v146;
      if (v142)
      {
        *(_OWORD *)v335 = *(_OWORD *)(v142 + 160);
        *(_OWORD *)&v335[16] = *(_OWORD *)(v142 + 176);
        *(_OWORD *)&v335[32] = *(_OWORD *)(v142 + 192);
        *(_OWORD *)&v335[48] = *(_OWORD *)(v142 + 208);
        *(_OWORD *)&v333[32] = *(_OWORD *)(v142 + 96);
        *(_OWORD *)&v333[48] = *(_OWORD *)(v142 + 112);
        *(_OWORD *)&v333[64] = *(_OWORD *)(v142 + 128);
        v334 = *(int64x2_t *)(v142 + 144);
        v331 = *(float64x2_t *)(v142 + 32);
        v332 = *(_OWORD *)(v142 + 48);
        *(_OWORD *)v333 = *(_OWORD *)(v142 + 64);
        *(_OWORD *)&v333[16] = *(_OWORD *)(v142 + 80);
        *(_OWORD *)v330 = *(_OWORD *)v142;
        *(_OWORD *)&v330[16] = *(_OWORD *)(v142 + 16);
      }
      else
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.hpp", 668, (uint64_t)"inverse_radial", 14, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_162;
        }
        *(_OWORD *)v335 = MEMORY[0xA0];
        *(_OWORD *)&v335[16] = MEMORY[0xB0];
        *(_OWORD *)&v335[32] = MEMORY[0xC0];
        *(_OWORD *)&v335[48] = MEMORY[0xD0];
        *(_OWORD *)&v333[32] = MEMORY[0x60];
        *(_OWORD *)&v333[48] = MEMORY[0x70];
        *(_OWORD *)&v333[64] = MEMORY[0x80];
        v334 = (int64x2_t)MEMORY[0x90];
        v331 = (float64x2_t)MEMORY[0x20];
        v332 = MEMORY[0x30];
        *(_OWORD *)v333 = MEMORY[0x40];
        *(_OWORD *)&v333[16] = MEMORY[0x50];
        *(_OWORD *)v330 = MEMORY[0];
        *(_OWORD *)&v330[16] = MEMORY[0x10];
        v145 = v316;
        v144 = v325;
        v147 = v298;
        v146 = v307;
      }
      v239 = vextq_s8((int8x16_t)v145, (int8x16_t)v145, 8uLL).u64[0];
      v240 = vextq_s8(v144, v144, 8uLL).u64[0];
      v237 = vextq_s8(v147, v147, 8uLL).u64[0];
      v238 = vextq_s8(v146, v146, 8uLL).u64[0];
      v214 = vmuld_n_f64(v145.f64[0], *(double *)v147.i64);
      v215 = 1.0 / *(double *)v147.i64;
      v216 = -*(double *)&v147.i64[1] / v214;
      v217 = -(vmuld_n_f64(v145.f64[0], *(double *)v146.i64) - vmuld_lane_f64(*(double *)&v147.i64[1], v145, 1)) / v214;
      v218 = 1.0 / v145.f64[0];
      v219 = -v145.f64[1] / v145.f64[0];
      v21 = operator new();
      *(_QWORD *)&v220 = v298.i64[0];
      *(_QWORD *)&v221 = v307.i64[0];
      *((_QWORD *)&v220 + 1) = v237;
      *((_QWORD *)&v221 + 1) = v238;
      *(_OWORD *)v21 = v220;
      *(_OWORD *)(v21 + 16) = v221;
      *(float64_t *)&v222 = v316.f64[0];
      *((_QWORD *)&v222 + 1) = v239;
      *(_QWORD *)&v223 = v325.i64[0];
      *((_QWORD *)&v223 + 1) = v240;
      *(_OWORD *)(v21 + 32) = v222;
      *(_OWORD *)(v21 + 48) = v223;
      *(_QWORD *)(v21 + 64) = v241;
      *(double *)(v21 + 72) = v215;
      *(double *)(v21 + 80) = v216;
      *(double *)(v21 + 88) = v217;
      *(_QWORD *)(v21 + 96) = 0;
      *(double *)(v21 + 104) = v218;
      *(float64_t *)(v21 + 112) = v219;
      *(_QWORD *)(v21 + 120) = 0;
      *(_QWORD *)(v21 + 128) = 0;
      *(_OWORD *)(v21 + 136) = xmmword_2102E3C70;
      *(_QWORD *)(v21 + 152) = 0x7FF8000000000000;
      *(_BYTE *)(v21 + 160) = 0;
      *(_QWORD *)(v21 + 168) = v148;
      *(_QWORD *)(v21 + 176) = v149;
      *(_QWORD *)(v21 + 184) = v150;
      *(_QWORD *)(v21 + 192) = v289;
      *(_QWORD *)(v21 + 200) = v282;
      *(_QWORD *)(v21 + 208) = v279;
      *(_QWORD *)(v21 + 216) = v276;
      *(_QWORD *)(v21 + 224) = v274;
      *(_QWORD *)(v21 + 232) = v272;
      *(_QWORD *)(v21 + 240) = v270;
      *(_QWORD *)(v21 + 248) = v268;
      *(_QWORD *)(v21 + 256) = v266;
      *(_QWORD *)(v21 + 264) = v264;
      *(_QWORD *)(v21 + 272) = v262;
      *(_QWORD *)(v21 + 280) = v260;
      *(_QWORD *)(v21 + 288) = v257;
      *(_QWORD *)(v21 + 296) = v255;
      *(_QWORD *)(v21 + 304) = v253;
      *(_QWORD *)(v21 + 312) = v251;
      *(_QWORD *)(v21 + 320) = v250;
      *(_QWORD *)(v21 + 328) = v249;
      *(_QWORD *)(v21 + 336) = v248;
      *(_QWORD *)(v21 + 344) = v247;
      *(_QWORD *)(v21 + 352) = v246;
      *(_QWORD *)(v21 + 360) = v245;
      *(_QWORD *)(v21 + 368) = v244;
      *(_QWORD *)(v21 + 376) = v243;
      *(_QWORD *)(v21 + 384) = v242;
      v224 = *(_OWORD *)&v335[16];
      *(_OWORD *)(v21 + 552) = *(_OWORD *)v335;
      *(_OWORD *)(v21 + 568) = v224;
      v225 = *(_OWORD *)&v335[48];
      *(_OWORD *)(v21 + 584) = *(_OWORD *)&v335[32];
      *(_OWORD *)(v21 + 600) = v225;
      v226 = *(_OWORD *)&v333[48];
      *(_OWORD *)(v21 + 488) = *(_OWORD *)&v333[32];
      *(_OWORD *)(v21 + 504) = v226;
      v227 = v334;
      *(_OWORD *)(v21 + 520) = *(_OWORD *)&v333[64];
      *(int64x2_t *)(v21 + 536) = v227;
      v228 = v332;
      *(float64x2_t *)(v21 + 424) = v331;
      *(_OWORD *)(v21 + 440) = v228;
      v229 = *(_OWORD *)&v333[16];
      *(_OWORD *)(v21 + 456) = *(_OWORD *)v333;
      *(_OWORD *)(v21 + 472) = v229;
      v230 = *(_OWORD *)&v330[16];
      *(_OWORD *)(v21 + 392) = *(_OWORD *)v330;
      *(_OWORD *)(v21 + 408) = v230;
      *(_BYTE *)(v21 + 880) = 0;
      v22 = 14;
      goto LABEL_148;
    case 0xD:
      if (*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16) <= 0xD8uLL
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Calibration/include/VIO/Calibration/CalibrationUtil.h", 142, (uint64_t)"camera.radial_distortion_.size() >= 28", 38, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_162;
      }
      v151 = *(const void **)(a1 + 40);
      if (*(_QWORD *)(a1 + 48) - (_QWORD)v151 > 0xD8uLL)
        goto LABEL_116;
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Calibration/include/VIO/Calibration/CalibrationUtil.h", 143, (uint64_t)"camera.radial_undistortion_.size() >= 28", 40, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_162;
      }
      v151 = *(const void **)(a1 + 40);
LABEL_116:
      v152 = (__int128 *)(a1 + 112);
      v153 = *(void **)(a1 + 16);
      v154 = (_OWORD *)(a1 + 200);
      v155 = *(_QWORD *)(a1 + 192);
      *(_QWORD *)&v329 = *(_QWORD *)(a1 + 184);
      *((_QWORD *)&v329 + 1) = v155;
      if (v155)
      {
        v156 = (unint64_t *)(v155 + 8);
        do
          v157 = __ldxr(v156);
        while (__stxr(v157 + 1, v156));
      }
      v159 = *(int64x2_t *)(a1 + 216);
      v158 = a1 + 216;
      *(_QWORD *)&v160 = *(_QWORD *)(v158 + 16);
      v161 = *(int64x2_t *)(v158 + 24);
      v162 = *(_QWORD *)(v158 + 64);
      v163 = *(_OWORD *)(v158 + 48);
      *((_QWORD *)&v160 + 1) = *(_QWORD *)(v158 + 40);
      v351 = vzip1q_s64(v159, v161);
      *((_QWORD *)&v352[1] + 1) = *((_QWORD *)&v163 + 1);
      *(int64x2_t *)((char *)v352 + 8) = vzip2q_s64(v159, v161);
      *(_QWORD *)&v352[0] = v163;
      *(_QWORD *)&v354 = v162;
      v353 = v160;
      sub_20EB3C668((uint64_t)v330, v152, v153, &v329, (uint64_t)&v351, v154, v151);
      v164 = (std::__shared_weak_count *)*((_QWORD *)&v329 + 1);
      if (*((_QWORD *)&v329 + 1))
      {
        v165 = (unint64_t *)(*((_QWORD *)&v329 + 1) + 8);
        do
          v166 = __ldaxr(v165);
        while (__stlxr(v166 - 1, v165));
        if (!v166)
        {
          ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
          std::__shared_weak_count::__release_weak(v164);
        }
      }
      v344 = xmmword_2102E3C50;
      v349 = 0xBFF0000000000000;
      v350 = 0xFFEFFFFFFFFFFFFFLL;
      v167 = operator new();
      v168 = v332;
      *(float64x2_t *)(v167 + 32) = v331;
      *(_OWORD *)(v167 + 48) = v168;
      *(_QWORD *)(v167 + 64) = *(_QWORD *)v333;
      v169 = *(_OWORD *)&v330[16];
      *(_OWORD *)v167 = *(_OWORD *)v330;
      *(_OWORD *)(v167 + 16) = v169;
      *(_OWORD *)(v167 + 88) = *(_OWORD *)&v333[24];
      *(_OWORD *)(v167 + 104) = *(_OWORD *)&v333[40];
      *(_OWORD *)(v167 + 120) = *(_OWORD *)&v333[56];
      *(_QWORD *)(v167 + 136) = *(_QWORD *)&v333[72];
      *(_OWORD *)(v167 + 72) = *(_OWORD *)&v333[8];
      *(_BYTE *)(v167 + 160) = v335[0];
      *(int64x2_t *)(v167 + 144) = v334;
      memcpy((void *)(v167 + 168), &v335[8], 0x2C9uLL);
      *(_QWORD *)(v167 + 888) = v336;
      v170 = v337;
      *(_QWORD *)(v167 + 896) = v337;
      if (v170)
      {
        v171 = (unint64_t *)&v170->__shared_owners_;
        do
          v172 = __ldxr(v171);
        while (__stxr(v172 + 1, v171));
        v65 = v337;
      }
      else
      {
        v65 = 0;
      }
      *(_QWORD *)(v167 + 968) = v342;
      v234 = v341;
      *(_OWORD *)(v167 + 936) = v340;
      *(_OWORD *)(v167 + 952) = v234;
      v235 = v339;
      *(_OWORD *)(v167 + 904) = v338;
      *(_OWORD *)(v167 + 920) = v235;
      *(_OWORD *)(v167 + 976) = v343;
      *(_DWORD *)(v167 + 992) = 15;
      *(_QWORD *)(v167 + 1000) = 0x7FF8000000000000;
      *(_QWORD *)(v167 + 1008) = 0xFFEFFFFFFFFFFFFFLL;
      *(_OWORD *)(v167 + 1424) = xmmword_2102E3C60;
      *a2 = v167;
      if (!v65)
        return;
      v236 = (unint64_t *)&v65->__shared_owners_;
      do
        v90 = __ldaxr(v236);
      while (__stlxr(v90 - 1, v236));
LABEL_160:
      if (!v90)
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
      return;
    default:
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Calibration/include/VIO/Calibration/CalibrationUtil.h", 150, (uint64_t)"", 0, (uint64_t)"Invalid lens model", 18, (void (*)(void **))sub_21023DDB0);
      abort();
  }
}

void sub_20E970028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;

  sub_20E9702A8((uint64_t)&a67);
  _Unwind_Resume(a1);
}

void sub_20E97003C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;

  sub_20E970240((uint64_t)&a67);
  _Unwind_Resume(a1);
}

void sub_20E970050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;

  sub_20E9701D8((uint64_t)&a67);
  _Unwind_Resume(a1);
}

void sub_20E970064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__shared_weak_count *a66;
  unint64_t *p_shared_owners;
  unint64_t v68;

  if (a66)
  {
    p_shared_owners = (unint64_t *)&a66->__shared_owners_;
    do
      v68 = __ldaxr(p_shared_owners);
    while (__stlxr(v68 - 1, p_shared_owners));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))a66->__on_zero_shared)(a66);
      std::__shared_weak_count::__release_weak(a66);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_20E9700EC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  void *v6;

  v2 = (std::__shared_weak_count *)a1[24];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (void *)a1[5];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (void *)a1[5];
  if (v5)
  {
LABEL_6:
    a1[6] = v5;
    operator delete(v5);
  }
LABEL_7:
  v6 = (void *)a1[2];
  if (v6)
  {
    a1[3] = v6;
    operator delete(v6);
  }
  return a1;
}

uint64_t sub_20E970170(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 480);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20E9701D8(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 504);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20E970240(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 672);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20E9702A8(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 896);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20E970310(uint64_t a1, __int128 **a2, __int128 **a3, uint64_t *a4, _DWORD **a5)
{
  __int128 *v6;
  __int128 *v7;
  uint64_t v8;
  _DWORD *v9;
  int64x2_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  double v15;
  uint64_t v16;
  double v17;
  double v18;
  _OWORD *v19;
  __int128 v20;
  int v21;
  int v22;
  uint64_t v23;
  _BOOL4 v24;
  uint64_t v26;
  _BOOL4 v27;
  unint64_t v28;
  double v29;
  _BOOL4 v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  double v38;
  double v39;
  double v40;
  float64x2_t v41;
  double v42;
  double v43;
  double v44;
  double v45;
  uint64_t v46;
  float64x2_t v47;
  float64x2_t v48;
  double *v49;
  double v50;
  double v51;
  float64x2_t v52;
  float64x2_t v53;
  uint64_t v54;
  float64x2_t v55;
  float64x2_t v56;
  uint64_t v57;
  double v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  int8x16_t v62;
  uint64_t v64;
  double v65;
  double v66;
  double *v67;
  double v68;
  double v69;
  double v70;
  uint64_t v71;
  double v72;
  double v73;
  double v74;
  uint64_t v75;
  double v76;
  double v77;
  __int128 v78;
  uint64_t v79;
  unint64_t v80;
  double v81;
  __int128 v82;
  uint64_t v83;
  double v84;
  uint64_t v85;
  unint64_t v86;
  double v87;
  uint64_t v88;
  double v89;
  double v90;
  double v91;

  v6 = *a2;
  v7 = *a3;
  v8 = *a4;
  v9 = *a5;
  v10 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(a1 + 144) = v10;
  *(_BYTE *)(a1 + 160) = 0;
  v11 = *((_QWORD *)v6 + 8);
  v12 = v6[3];
  v13 = *v6;
  v14 = v6[1];
  *(_OWORD *)(a1 + 32) = v6[2];
  *(_OWORD *)(a1 + 48) = v12;
  *(_QWORD *)(a1 + 64) = v11;
  *(_OWORD *)a1 = v13;
  *(_OWORD *)(a1 + 16) = v14;
  v15 = *(double *)v6;
  *(_QWORD *)&v12 = *((_QWORD *)v6 + 4);
  *(double *)(a1 + 72) = 1.0 / *(double *)v6;
  v16 = a1 + 72;
  v17 = v15 * *(double *)&v12;
  *(double *)(a1 + 80) = -*((double *)v6 + 1) / v17;
  *(double *)(a1 + 88) = -(*((double *)v6 + 4) * *((double *)v6 + 2) - *((double *)v6 + 1) * *((double *)v6 + 5)) / v17;
  *(_QWORD *)(a1 + 96) = 0;
  *(double *)(a1 + 104) = 1.0 / *((double *)v6 + 4);
  v18 = -*((double *)v6 + 5) / *((double *)v6 + 4);
  *(int64x2_t *)(a1 + 192) = v10;
  v19 = (_OWORD *)(a1 + 192);
  *(double *)(a1 + 112) = v18;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 144) = 0x7FF8000000000000;
  *(_QWORD *)(a1 + 152) = 0x7FF8000000000000;
  *(_BYTE *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 184) = 0x7FF8000000000000;
  *(_OWORD *)(a1 + 168) = xmmword_2102E3D20;
  *(_QWORD *)(a1 + 208) = 0x200000003;
  *(int64x2_t *)(a1 + 216) = v10;
  *(int64x2_t *)(a1 + 232) = v10;
  v20 = *v7;
  *(_QWORD *)(a1 + 184) = *((_QWORD *)v7 + 2);
  *(_OWORD *)(a1 + 168) = v20;
  *(_QWORD *)&v20 = *((_QWORD *)v7 + 2);
  v21 = 2;
  if (*(double *)&v20 == 0.0)
    v22 = 2;
  else
    v22 = 3;
  *(_DWORD *)(a1 + 208) = v22;
  *(int64x2_t *)(a1 + 144) = v10;
  *(_BYTE *)(a1 + 160) = 0;
  *v19 = *(_OWORD *)v8;
  if (*(double *)v8 == 0.0)
    v21 = 2 * (*(double *)(v8 + 8) != 0.0);
  *(_DWORD *)(a1 + 212) = v21;
  *(int64x2_t *)(a1 + 144) = v10;
  *(_BYTE *)(a1 + 160) = 0;
  if (!v9
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.hpp", 1026, (uint64_t)"image_plane_size", 16, (uint64_t)"image_plane_size must not be nullptr", 36, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_66;
  }
  v23 = 0;
  do
  {
    v24 = (*(_QWORD *)(a1 + v23) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    if ((*(_QWORD *)(a1 + v23) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      break;
    _ZF = v23 == 64;
    v23 += 8;
  }
  while (!_ZF);
  if (!v24)
    goto LABEL_69;
  v26 = 0;
  do
  {
    v27 = (*(_QWORD *)(v16 + v26) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    if ((*(_QWORD *)(v16 + v26) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      break;
    _ZF = v26 == 64;
    v26 += 8;
  }
  while (!_ZF);
  if (!v27)
    goto LABEL_69;
  HIDWORD(v28) = 1044740494;
  if (fabs(*(double *)(a1 + 48)) >= 0.00000001)
    goto LABEL_69;
  if (fabs(*(double *)(a1 + 56)) >= 0.00000001)
    goto LABEL_69;
  v29 = fabs(*(double *)(a1 + 64) + -1.0);
  if (v29 >= 0.00000001)
    goto LABEL_69;
  v30 = (*((_QWORD *)v19 - 3) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
  if ((*((_QWORD *)v19 - 3) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v30 = (*(_QWORD *)(a1 + 176) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    if ((*(_QWORD *)(a1 + 176) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      v30 = (*(_QWORD *)(a1 + 184) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
  }
  if (!v30)
    goto LABEL_69;
  v31 = (*(_QWORD *)v19 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
  if ((*(_QWORD *)v19 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    v31 = (*(_QWORD *)(a1 + 200) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
  if (!v31)
  {
LABEL_69:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.hpp", 1027, (uint64_t)"validate()", 10, (uint64_t)"Must have valid lens model to compute frustum extrema.", 54, (void (*)(void **))sub_21023DDB0))
    {
LABEL_66:
      abort();
    }
  }
  LODWORD(v29) = *v9;
  LODWORD(v28) = v9[1];
  v32 = *(_QWORD *)(a1 + 16);
  v33 = *(_QWORD *)(a1 + 40);
  __asm { FMOV            V4.2D, #-0.5 }
  v78 = _Q4;
  v79 = v32;
  v80 = 0xBFE0000000000000;
  v81 = (double)*(unint64_t *)&v29 + -0.5;
  v82 = _Q4;
  v83 = v33;
  v84 = v81;
  v85 = v33;
  v86 = 0xBFE0000000000000;
  v87 = (double)v28 + -0.5;
  v88 = v32;
  v89 = v87;
  v90 = v81;
  v91 = v87;
  v38 = *(double *)(a1 + 72);
  v39 = *(double *)(a1 + 80);
  v40 = *(double *)(a1 + 104);
  v41.f64[0] = *(float64_t *)(a1 + 112);
  v43 = *(double *)(a1 + 216);
  v42 = *(double *)(a1 + 224);
  v45 = *(double *)(a1 + 232);
  v44 = *(double *)(a1 + 240);
  if (*(_DWORD *)(a1 + 212))
  {
    v46 = 0;
    v47 = *(float64x2_t *)(a1 + 192);
    v48 = vaddq_f64(v47, v47);
    do
    {
      v49 = (double *)(&v78 + v46);
      v50 = v49[1];
      v51 = v38 * *v49 + v39 * v50;
      v52.f64[0] = v40 * v50;
      v52.f64[1] = v51;
      v41.f64[1] = *(float64_t *)(a1 + 88);
      v53 = vaddq_f64(v41, v52);
      v54 = 20;
      v55 = v53;
      do
      {
        v56 = vmulq_f64(v55, v55);
        v57 = *(_OWORD *)&vaddq_f64(v56, (float64x2_t)vdupq_laneq_s64((int64x2_t)v56, 1));
        v56.f64[0] = vaddvq_f64(v56);
        v58 = *(double *)(a1 + 168) * v56.f64[0]
            + 1.0
            + v56.f64[0] * (*(double *)(a1 + 176) * v56.f64[0])
            + v56.f64[0] * (v56.f64[0] * (*(double *)(a1 + 184) * v56.f64[0]));
        v59 = vmulq_laneq_f64(v48, v55, 1);
        v60 = vaddq_f64(v55, v55);
        if (v58 == 0.0)
          v58 = 1.0;
        v61 = vmulq_f64(v47, vaddq_f64(vmulq_f64(v55, v60), (float64x2_t)vdupq_lane_s64(v57, 0)));
        v62 = (int8x16_t)vmulq_n_f64(v59, v55.f64[0]);
        v55 = vdivq_f64(vsubq_f64(v53, vaddq_f64((float64x2_t)vextq_s8(v62, v62, 8uLL), v61)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v58, 0));
        --v54;
      }
      while (v54);
      if (v43 >= v55.f64[1])
        v43 = v55.f64[1];
      if (v55.f64[1] >= v42)
        v42 = v55.f64[1];
      if (v45 >= v55.f64[0])
        v45 = v55.f64[0];
      if (v55.f64[0] >= v44)
        v44 = v55.f64[0];
      ++v46;
    }
    while (v46 != 8);
  }
  else
  {
    v64 = 0;
    v65 = *(double *)(a1 + 168);
    v66 = *(double *)(a1 + 176);
    do
    {
      v67 = (double *)(&v78 + v64);
      v68 = v67[1];
      v69 = *(double *)(a1 + 88) + v38 * *v67 + v39 * v68;
      v70 = v41.f64[0] + v40 * v68;
      if (*(_DWORD *)(a1 + 208) > 2u)
      {
        v75 = 20;
        v72 = v70;
        v73 = v69;
        do
        {
          v76 = v72 * v72 + v73 * v73;
          v77 = v65 * v76 + 1.0 + v76 * (v66 * v76) + v76 * (v76 * (*(double *)(a1 + 184) * v76));
          if (v77 == 0.0)
            v77 = 1.0;
          v73 = v69 / v77;
          v72 = v70 / v77;
          --v75;
        }
        while (v75);
      }
      else
      {
        v71 = 20;
        v72 = v70;
        v73 = v69;
        do
        {
          v74 = v65 * (v72 * v72 + v73 * v73) + 1.0 + (v72 * v72 + v73 * v73) * (v66 * (v72 * v72 + v73 * v73));
          if (v74 == 0.0)
            v74 = 1.0;
          v73 = v69 / v74;
          v72 = v70 / v74;
          --v71;
        }
        while (v71);
      }
      if (v43 >= v73)
        v43 = v73;
      if (v73 >= v42)
        v42 = v73;
      if (v45 >= v72)
        v45 = v72;
      if (v72 >= v44)
        v44 = v72;
      ++v64;
    }
    while (v64 != 8);
  }
  *(double *)(a1 + 216) = v43;
  *(double *)(a1 + 224) = v42;
  *(double *)(a1 + 232) = v45;
  *(double *)(a1 + 240) = v44;
  *(_OWORD *)(a1 + 248) = xmmword_2102E3C50;
  *(_OWORD *)(a1 + 672) = xmmword_2102E3C60;
  return a1;
}

uint64_t sub_20E9708B8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  unsigned int v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unsigned int v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unsigned int v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  unint64_t *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  unsigned int v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  unsigned int v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  unsigned int v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  __int128 v85;
  unint64_t *v86;
  unsigned int v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  unint64_t *v113;
  int v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  unint64_t *v142;
  unint64_t *v143;
  unint64_t *v144;
  unint64_t *v145;
  unint64_t *v146;
  unint64_t *v147;
  unint64_t *v148;
  unint64_t *v149;
  unint64_t *v150;
  unint64_t *v151;
  unint64_t *v152;
  unint64_t *v153;
  unint64_t *v154;
  unint64_t *v155;
  unint64_t *v156;
  unint64_t *v157;
  unint64_t *v158;
  unint64_t *v159;
  unint64_t *v160;
  unint64_t *v161;
  unint64_t *v162;
  unint64_t *v163;
  unint64_t *v164;
  unint64_t *v165;
  unint64_t *v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  uint64_t v172;
  __int128 v173;
  unint64_t *v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  uint64_t v180;
  __int128 v181;
  unint64_t *v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  uint64_t v188;
  __int128 v189;
  unint64_t *v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  uint64_t v196;
  __int128 v197;
  unint64_t *v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  uint64_t v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  unint64_t *v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  uint64_t v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  unint64_t *v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  uint64_t v233;
  __int128 v234;
  unint64_t *v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  uint64_t v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  unint64_t *v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  uint64_t v252;
  __int128 v253;
  unint64_t *v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  uint64_t v260;
  __int128 v261;
  unint64_t *v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  uint64_t v268;
  __int128 v269;
  unint64_t *v270;
  uint64_t v271;

  v2 = result;
  v3 = *(_DWORD *)(a2 + 992);
  if (v3 == -1)
  {
    v13 = *(_DWORD *)(result + 992);
    if (v13 == -1)
      return result;
    if (v13 <= 7)
    {
      if (v13 == 7)
      {
        v14 = *(std::__shared_weak_count **)(result + 480);
        if (v14)
        {
          p_shared_owners = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldaxr(p_shared_owners);
          while (__stlxr(v16 - 1, p_shared_owners));
          goto LABEL_97;
        }
      }
LABEL_99:
      v114 = -1;
LABEL_100:
      *(_DWORD *)(v2 + 992) = v114;
      return v2;
    }
    if (v13 > 0xB)
    {
      if (v13 < 0xF)
        goto LABEL_99;
      v14 = *(std::__shared_weak_count **)(result + 896);
      if (!v14)
        goto LABEL_99;
      v86 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(v86);
      while (__stlxr(v16 - 1, v86));
    }
    else if (v13 > 9)
    {
      if (v13 == 10)
        goto LABEL_99;
      v14 = *(std::__shared_weak_count **)(result + 672);
      if (!v14)
        goto LABEL_99;
      v113 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(v113);
      while (__stlxr(v16 - 1, v113));
    }
    else
    {
      if (v13 != 9)
        goto LABEL_99;
      v14 = *(std::__shared_weak_count **)(result + 504);
      if (!v14)
        goto LABEL_99;
      v40 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(v40);
      while (__stlxr(v16 - 1, v40));
    }
LABEL_97:
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    goto LABEL_99;
  }
  v271 = result;
  if (v3 > 7)
  {
    if (v3 <= 0xB)
    {
      if (v3 <= 9)
      {
        if (v3 == 9)
        {
          sub_20E972270(&v271, a2);
          return v2;
        }
        v87 = *(_DWORD *)(result + 992);
        if (v87 == -1)
          goto LABEL_366;
        if (v87 == 8)
        {
          *(_OWORD *)result = *(_OWORD *)a2;
          v88 = *(_OWORD *)(a2 + 16);
          v89 = *(_OWORD *)(a2 + 32);
          v90 = *(_OWORD *)(a2 + 48);
          *(_QWORD *)(result + 64) = *(_QWORD *)(a2 + 64);
          *(_OWORD *)(result + 32) = v89;
          *(_OWORD *)(result + 48) = v90;
          *(_OWORD *)(result + 16) = v88;
          v91 = *(_OWORD *)(a2 + 104);
          v92 = *(_OWORD *)(a2 + 120);
          v93 = *(_QWORD *)(a2 + 136);
          *(_OWORD *)(result + 88) = *(_OWORD *)(a2 + 88);
          *(_QWORD *)(result + 136) = v93;
          *(_OWORD *)(result + 120) = v92;
          *(_OWORD *)(result + 104) = v91;
          *(_OWORD *)(result + 72) = *(_OWORD *)(a2 + 72);
          v94 = *(_OWORD *)(a2 + 144);
          *(_BYTE *)(result + 160) = *(_BYTE *)(a2 + 160);
          *(_OWORD *)(result + 144) = v94;
          v95 = *(_OWORD *)(a2 + 168);
          v96 = *(_OWORD *)(a2 + 184);
          v97 = *(_OWORD *)(a2 + 200);
          *(_OWORD *)(result + 209) = *(_OWORD *)(a2 + 209);
          *(_OWORD *)(result + 200) = v97;
          *(_OWORD *)(result + 184) = v96;
          *(_OWORD *)(result + 168) = v95;
          memcpy((void *)(result + 228), (const void *)(a2 + 228), 0x108uLL);
          *(_BYTE *)(v2 + 492) = *(_BYTE *)(a2 + 492);
          return v2;
        }
        if (v87 <= 7)
        {
          if (v87 == 7)
          {
            v133 = *(std::__shared_weak_count **)(result + 480);
            if (v133)
            {
              v134 = (unint64_t *)&v133->__shared_owners_;
              do
                v135 = __ldaxr(v134);
              while (__stlxr(v135 - 1, v134));
              goto LABEL_364;
            }
          }
LABEL_366:
          *(_DWORD *)(v2 + 992) = -1;
          *(_OWORD *)v2 = *(_OWORD *)a2;
          v255 = *(_OWORD *)(a2 + 16);
          v256 = *(_OWORD *)(a2 + 32);
          v257 = *(_OWORD *)(a2 + 48);
          *(_QWORD *)(v2 + 64) = *(_QWORD *)(a2 + 64);
          *(_OWORD *)(v2 + 32) = v256;
          *(_OWORD *)(v2 + 48) = v257;
          *(_OWORD *)(v2 + 16) = v255;
          v258 = *(_OWORD *)(a2 + 104);
          v259 = *(_OWORD *)(a2 + 120);
          v260 = *(_QWORD *)(a2 + 136);
          *(_OWORD *)(v2 + 88) = *(_OWORD *)(a2 + 88);
          *(_QWORD *)(v2 + 136) = v260;
          *(_OWORD *)(v2 + 120) = v259;
          *(_OWORD *)(v2 + 104) = v258;
          *(_OWORD *)(v2 + 72) = *(_OWORD *)(a2 + 72);
          v261 = *(_OWORD *)(a2 + 144);
          *(_BYTE *)(v2 + 160) = *(_BYTE *)(a2 + 160);
          *(_OWORD *)(v2 + 144) = v261;
          memcpy((void *)(v2 + 168), (const void *)(a2 + 168), 0x145uLL);
          v114 = 8;
          goto LABEL_100;
        }
        if (v87 > 0xB)
        {
          if (v87 < 0xF)
            goto LABEL_366;
          v133 = *(std::__shared_weak_count **)(result + 896);
          if (!v133)
            goto LABEL_366;
          v163 = (unint64_t *)&v133->__shared_owners_;
          do
            v135 = __ldaxr(v163);
          while (__stlxr(v135 - 1, v163));
        }
        else if (v87 > 9)
        {
          if (v87 == 10)
            goto LABEL_366;
          v133 = *(std::__shared_weak_count **)(result + 672);
          if (!v133)
            goto LABEL_366;
          v254 = (unint64_t *)&v133->__shared_owners_;
          do
            v135 = __ldaxr(v254);
          while (__stlxr(v135 - 1, v254));
        }
        else
        {
          v133 = *(std::__shared_weak_count **)(result + 504);
          if (!v133)
            goto LABEL_366;
          v151 = (unint64_t *)&v133->__shared_owners_;
          do
            v135 = __ldaxr(v151);
          while (__stlxr(v135 - 1, v151));
        }
LABEL_364:
        if (!v135)
        {
          ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
          std::__shared_weak_count::__release_weak(v133);
        }
        goto LABEL_366;
      }
      if (v3 != 10)
      {
        sub_20E972534(&v271, a2);
        return v2;
      }
      v51 = *(_DWORD *)(result + 992);
      if (v51 != -1)
      {
        if (v51 == 10)
        {
          *(_OWORD *)result = *(_OWORD *)a2;
          v52 = *(_OWORD *)(a2 + 16);
          v53 = *(_OWORD *)(a2 + 32);
          v54 = *(_OWORD *)(a2 + 48);
          *(_QWORD *)(result + 64) = *(_QWORD *)(a2 + 64);
          *(_OWORD *)(result + 32) = v53;
          *(_OWORD *)(result + 48) = v54;
          *(_OWORD *)(result + 16) = v52;
          v55 = *(_OWORD *)(a2 + 104);
          v56 = *(_OWORD *)(a2 + 120);
          v57 = *(_QWORD *)(a2 + 136);
          *(_OWORD *)(result + 88) = *(_OWORD *)(a2 + 88);
          *(_QWORD *)(result + 136) = v57;
          *(_OWORD *)(result + 120) = v56;
          *(_OWORD *)(result + 104) = v55;
          *(_OWORD *)(result + 72) = *(_OWORD *)(a2 + 72);
          v58 = *(_OWORD *)(a2 + 144);
          *(_BYTE *)(result + 160) = *(_BYTE *)(a2 + 160);
          *(_OWORD *)(result + 144) = v58;
          v59 = *(_OWORD *)(a2 + 216);
          v60 = *(_OWORD *)(a2 + 232);
          v61 = *(_OWORD *)(a2 + 248);
          *(_OWORD *)(result + 200) = *(_OWORD *)(a2 + 200);
          *(_OWORD *)(result + 248) = v61;
          *(_OWORD *)(result + 232) = v60;
          *(_OWORD *)(result + 216) = v59;
          v62 = *(_OWORD *)(a2 + 312);
          v64 = *(_OWORD *)(a2 + 264);
          v63 = *(_OWORD *)(a2 + 280);
          *(_OWORD *)(result + 296) = *(_OWORD *)(a2 + 296);
          *(_OWORD *)(result + 312) = v62;
          *(_OWORD *)(result + 264) = v64;
          *(_OWORD *)(result + 280) = v63;
          v65 = *(_OWORD *)(a2 + 376);
          v67 = *(_OWORD *)(a2 + 328);
          v66 = *(_OWORD *)(a2 + 344);
          *(_OWORD *)(result + 360) = *(_OWORD *)(a2 + 360);
          *(_OWORD *)(result + 376) = v65;
          *(_OWORD *)(result + 328) = v67;
          *(_OWORD *)(result + 344) = v66;
          v68 = *(_OWORD *)(a2 + 168);
          *(_OWORD *)(result + 184) = *(_OWORD *)(a2 + 184);
          *(_OWORD *)(result + 168) = v68;
          memcpy((void *)(result + 392), (const void *)(a2 + 392), 0x108uLL);
          *(_BYTE *)(v2 + 656) = *(_BYTE *)(a2 + 656);
          return v2;
        }
        if (v51 > 7)
        {
          if (v51 > 0xB)
          {
            if (v51 < 0xF)
              goto LABEL_345;
            v124 = *(std::__shared_weak_count **)(result + 896);
            if (!v124)
              goto LABEL_345;
            v160 = (unint64_t *)&v124->__shared_owners_;
            do
              v126 = __ldaxr(v160);
            while (__stlxr(v126 - 1, v160));
          }
          else if (v51 > 9)
          {
            v124 = *(std::__shared_weak_count **)(result + 672);
            if (!v124)
              goto LABEL_345;
            v227 = (unint64_t *)&v124->__shared_owners_;
            do
              v126 = __ldaxr(v227);
            while (__stlxr(v126 - 1, v227));
          }
          else
          {
            if (v51 != 9)
              goto LABEL_345;
            v124 = *(std::__shared_weak_count **)(result + 504);
            if (!v124)
              goto LABEL_345;
            v148 = (unint64_t *)&v124->__shared_owners_;
            do
              v126 = __ldaxr(v148);
            while (__stlxr(v126 - 1, v148));
          }
LABEL_343:
          if (!v126)
          {
            ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
            std::__shared_weak_count::__release_weak(v124);
          }
          goto LABEL_345;
        }
        if (v51 == 7)
        {
          v124 = *(std::__shared_weak_count **)(result + 480);
          if (v124)
          {
            v125 = (unint64_t *)&v124->__shared_owners_;
            do
              v126 = __ldaxr(v125);
            while (__stlxr(v126 - 1, v125));
            goto LABEL_343;
          }
        }
      }
LABEL_345:
      *(_DWORD *)(v2 + 992) = -1;
      *(_OWORD *)v2 = *(_OWORD *)a2;
      v228 = *(_OWORD *)(a2 + 16);
      v229 = *(_OWORD *)(a2 + 32);
      v230 = *(_OWORD *)(a2 + 48);
      *(_QWORD *)(v2 + 64) = *(_QWORD *)(a2 + 64);
      *(_OWORD *)(v2 + 32) = v229;
      *(_OWORD *)(v2 + 48) = v230;
      *(_OWORD *)(v2 + 16) = v228;
      v231 = *(_OWORD *)(a2 + 104);
      v232 = *(_OWORD *)(a2 + 120);
      v233 = *(_QWORD *)(a2 + 136);
      *(_OWORD *)(v2 + 88) = *(_OWORD *)(a2 + 88);
      *(_QWORD *)(v2 + 136) = v233;
      *(_OWORD *)(v2 + 120) = v232;
      *(_OWORD *)(v2 + 104) = v231;
      *(_OWORD *)(v2 + 72) = *(_OWORD *)(a2 + 72);
      v234 = *(_OWORD *)(a2 + 144);
      *(_BYTE *)(v2 + 160) = *(_BYTE *)(a2 + 160);
      *(_OWORD *)(v2 + 144) = v234;
      memcpy((void *)(v2 + 168), (const void *)(a2 + 168), 0x1E9uLL);
      v114 = 10;
      goto LABEL_100;
    }
    if (v3 <= 0xD)
    {
      v21 = *(_DWORD *)(result + 992);
      if (v3 == 13)
      {
        if (v21 != -1)
        {
          if (v21 == 13)
          {
            *(_OWORD *)result = *(_OWORD *)a2;
            v22 = *(_OWORD *)(a2 + 16);
            v23 = *(_OWORD *)(a2 + 32);
            v24 = *(_OWORD *)(a2 + 48);
            *(_QWORD *)(result + 64) = *(_QWORD *)(a2 + 64);
            *(_OWORD *)(result + 32) = v23;
            *(_OWORD *)(result + 48) = v24;
            *(_OWORD *)(result + 16) = v22;
            v25 = *(_OWORD *)(a2 + 104);
            v26 = *(_OWORD *)(a2 + 120);
            v27 = *(_QWORD *)(a2 + 136);
            *(_OWORD *)(result + 88) = *(_OWORD *)(a2 + 88);
            *(_QWORD *)(result + 136) = v27;
            *(_OWORD *)(result + 120) = v26;
            *(_OWORD *)(result + 104) = v25;
            *(_OWORD *)(result + 72) = *(_OWORD *)(a2 + 72);
            v28 = *(_OWORD *)(a2 + 144);
            *(_BYTE *)(result + 160) = *(_BYTE *)(a2 + 160);
            *(_OWORD *)(result + 144) = v28;
            v29 = *(_OWORD *)(a2 + 216);
            v30 = *(_OWORD *)(a2 + 232);
            v31 = *(_OWORD *)(a2 + 248);
            *(_OWORD *)(result + 200) = *(_OWORD *)(a2 + 200);
            *(_OWORD *)(result + 248) = v31;
            *(_OWORD *)(result + 232) = v30;
            *(_OWORD *)(result + 216) = v29;
            v32 = *(_OWORD *)(a2 + 312);
            v34 = *(_OWORD *)(a2 + 264);
            v33 = *(_OWORD *)(a2 + 280);
            *(_OWORD *)(result + 296) = *(_OWORD *)(a2 + 296);
            *(_OWORD *)(result + 312) = v32;
            *(_OWORD *)(result + 264) = v34;
            *(_OWORD *)(result + 280) = v33;
            v35 = *(_OWORD *)(a2 + 376);
            v37 = *(_OWORD *)(a2 + 328);
            v36 = *(_OWORD *)(a2 + 344);
            *(_OWORD *)(result + 360) = *(_OWORD *)(a2 + 360);
            *(_OWORD *)(result + 376) = v35;
            *(_OWORD *)(result + 328) = v37;
            *(_OWORD *)(result + 344) = v36;
            v38 = *(_OWORD *)(a2 + 168);
            v39 = *(_OWORD *)(a2 + 184);
LABEL_54:
            *(_OWORD *)(result + 184) = v39;
            goto LABEL_55;
          }
          if (v21 > 7)
          {
            if (v21 > 0xB)
            {
              if (v21 < 0xF)
                goto LABEL_332;
              v118 = *(std::__shared_weak_count **)(result + 896);
              if (!v118)
                goto LABEL_332;
              v158 = (unint64_t *)&v118->__shared_owners_;
              do
                v120 = __ldaxr(v158);
              while (__stlxr(v120 - 1, v158));
            }
            else if (v21 > 9)
            {
              if (v21 == 10)
                goto LABEL_332;
              v118 = *(std::__shared_weak_count **)(result + 672);
              if (!v118)
                goto LABEL_332;
              v198 = (unint64_t *)&v118->__shared_owners_;
              do
                v120 = __ldaxr(v198);
              while (__stlxr(v120 - 1, v198));
            }
            else
            {
              if (v21 != 9)
                goto LABEL_332;
              v118 = *(std::__shared_weak_count **)(result + 504);
              if (!v118)
                goto LABEL_332;
              v146 = (unint64_t *)&v118->__shared_owners_;
              do
                v120 = __ldaxr(v146);
              while (__stlxr(v120 - 1, v146));
            }
LABEL_330:
            if (!v120)
            {
              ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
              std::__shared_weak_count::__release_weak(v118);
            }
            goto LABEL_332;
          }
          if (v21 == 7)
          {
            v118 = *(std::__shared_weak_count **)(result + 480);
            if (v118)
            {
              v119 = (unint64_t *)&v118->__shared_owners_;
              do
                v120 = __ldaxr(v119);
              while (__stlxr(v120 - 1, v119));
              goto LABEL_330;
            }
          }
        }
LABEL_332:
        *(_DWORD *)(v2 + 992) = -1;
        *(_OWORD *)v2 = *(_OWORD *)a2;
        v199 = *(_OWORD *)(a2 + 16);
        v200 = *(_OWORD *)(a2 + 32);
        v201 = *(_OWORD *)(a2 + 48);
        *(_QWORD *)(v2 + 64) = *(_QWORD *)(a2 + 64);
        *(_OWORD *)(v2 + 32) = v200;
        *(_OWORD *)(v2 + 48) = v201;
        *(_OWORD *)(v2 + 16) = v199;
        v202 = *(_OWORD *)(a2 + 104);
        v203 = *(_OWORD *)(a2 + 120);
        v204 = *(_QWORD *)(a2 + 136);
        *(_OWORD *)(v2 + 88) = *(_OWORD *)(a2 + 88);
        *(_QWORD *)(v2 + 136) = v204;
        *(_OWORD *)(v2 + 120) = v203;
        *(_OWORD *)(v2 + 104) = v202;
        *(_OWORD *)(v2 + 72) = *(_OWORD *)(a2 + 72);
        v205 = *(_OWORD *)(a2 + 144);
        *(_BYTE *)(v2 + 160) = *(_BYTE *)(a2 + 160);
        *(_OWORD *)(v2 + 144) = v205;
        v206 = *(_OWORD *)(a2 + 184);
        *(_OWORD *)(v2 + 168) = *(_OWORD *)(a2 + 168);
        *(_OWORD *)(v2 + 184) = v206;
        v207 = *(_OWORD *)(a2 + 200);
        v208 = *(_OWORD *)(a2 + 216);
        v209 = *(_OWORD *)(a2 + 232);
        *(_OWORD *)(v2 + 248) = *(_OWORD *)(a2 + 248);
        *(_OWORD *)(v2 + 232) = v209;
        *(_OWORD *)(v2 + 216) = v208;
        *(_OWORD *)(v2 + 200) = v207;
        v210 = *(_OWORD *)(a2 + 264);
        v211 = *(_OWORD *)(a2 + 280);
        v212 = *(_OWORD *)(a2 + 312);
        *(_OWORD *)(v2 + 296) = *(_OWORD *)(a2 + 296);
        *(_OWORD *)(v2 + 312) = v212;
        *(_OWORD *)(v2 + 264) = v210;
        *(_OWORD *)(v2 + 280) = v211;
        v213 = *(_OWORD *)(a2 + 328);
        v214 = *(_OWORD *)(a2 + 344);
        v215 = *(_OWORD *)(a2 + 376);
        *(_OWORD *)(v2 + 360) = *(_OWORD *)(a2 + 360);
        *(_OWORD *)(v2 + 376) = v215;
        *(_OWORD *)(v2 + 328) = v213;
        *(_OWORD *)(v2 + 344) = v214;
        v114 = 13;
        goto LABEL_100;
      }
      if (v21 != -1)
      {
        if (v21 == 12)
          goto LABEL_86;
        if (v21 > 7)
        {
          if (v21 > 0xB)
          {
            if (v21 < 0xF)
              goto LABEL_325;
            v101 = *(std::__shared_weak_count **)(result + 896);
            if (!v101)
              goto LABEL_325;
            v157 = (unint64_t *)&v101->__shared_owners_;
            do
              v103 = __ldaxr(v157);
            while (__stlxr(v103 - 1, v157));
          }
          else if (v21 > 9)
          {
            if (v21 == 10)
              goto LABEL_325;
            v101 = *(std::__shared_weak_count **)(result + 672);
            if (!v101)
              goto LABEL_325;
            v190 = (unint64_t *)&v101->__shared_owners_;
            do
              v103 = __ldaxr(v190);
            while (__stlxr(v103 - 1, v190));
          }
          else
          {
            if (v21 != 9)
              goto LABEL_325;
            v101 = *(std::__shared_weak_count **)(result + 504);
            if (!v101)
              goto LABEL_325;
            v145 = (unint64_t *)&v101->__shared_owners_;
            do
              v103 = __ldaxr(v145);
            while (__stlxr(v103 - 1, v145));
          }
LABEL_323:
          if (!v103)
          {
            ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
            std::__shared_weak_count::__release_weak(v101);
          }
          goto LABEL_325;
        }
        if (v21 == 7)
        {
          v101 = *(std::__shared_weak_count **)(result + 480);
          if (v101)
          {
            v102 = (unint64_t *)&v101->__shared_owners_;
            do
              v103 = __ldaxr(v102);
            while (__stlxr(v103 - 1, v102));
            goto LABEL_323;
          }
        }
      }
LABEL_325:
      *(_DWORD *)(v2 + 992) = -1;
      *(_OWORD *)v2 = *(_OWORD *)a2;
      v191 = *(_OWORD *)(a2 + 16);
      v192 = *(_OWORD *)(a2 + 32);
      v193 = *(_OWORD *)(a2 + 48);
      *(_QWORD *)(v2 + 64) = *(_QWORD *)(a2 + 64);
      *(_OWORD *)(v2 + 32) = v192;
      *(_OWORD *)(v2 + 48) = v193;
      *(_OWORD *)(v2 + 16) = v191;
      v194 = *(_OWORD *)(a2 + 104);
      v195 = *(_OWORD *)(a2 + 120);
      v196 = *(_QWORD *)(a2 + 136);
      *(_OWORD *)(v2 + 88) = *(_OWORD *)(a2 + 88);
      *(_QWORD *)(v2 + 136) = v196;
      *(_OWORD *)(v2 + 120) = v195;
      *(_OWORD *)(v2 + 104) = v194;
      *(_OWORD *)(v2 + 72) = *(_OWORD *)(a2 + 72);
      v197 = *(_OWORD *)(a2 + 144);
      *(_BYTE *)(v2 + 160) = *(_BYTE *)(a2 + 160);
      *(_OWORD *)(v2 + 144) = v197;
      memcpy((void *)(v2 + 168), (const void *)(a2 + 168), 0x12DuLL);
      v114 = 12;
      goto LABEL_100;
    }
    if (v3 != 14)
    {
      sub_20E972870(&v271, a2);
      return v2;
    }
    v78 = *(_DWORD *)(result + 992);
    if (v78 != -1)
    {
      if (v78 == 14)
      {
        *(_OWORD *)result = *(_OWORD *)a2;
        v79 = *(_OWORD *)(a2 + 16);
        v80 = *(_OWORD *)(a2 + 32);
        v81 = *(_OWORD *)(a2 + 48);
        *(_QWORD *)(result + 64) = *(_QWORD *)(a2 + 64);
        *(_OWORD *)(result + 32) = v80;
        *(_OWORD *)(result + 48) = v81;
        *(_OWORD *)(result + 16) = v79;
        v82 = *(_OWORD *)(a2 + 104);
        v83 = *(_OWORD *)(a2 + 120);
        v84 = *(_QWORD *)(a2 + 136);
        *(_OWORD *)(result + 88) = *(_OWORD *)(a2 + 88);
        *(_QWORD *)(result + 136) = v84;
        *(_OWORD *)(result + 120) = v83;
        *(_OWORD *)(result + 104) = v82;
        *(_OWORD *)(result + 72) = *(_OWORD *)(a2 + 72);
        v85 = *(_OWORD *)(a2 + 144);
        *(_BYTE *)(result + 160) = *(_BYTE *)(a2 + 160);
        *(_OWORD *)(result + 144) = v85;
        memcpy((void *)(result + 168), (const void *)(a2 + 168), 0x1C0uLL);
        memcpy((void *)(v2 + 616), (const void *)(a2 + 616), 0x109uLL);
        return v2;
      }
      if (v78 > 7)
      {
        if (v78 > 0xB)
        {
          if (v78 < 0xF)
            goto LABEL_359;
          v130 = *(std::__shared_weak_count **)(result + 896);
          if (!v130)
            goto LABEL_359;
          v162 = (unint64_t *)&v130->__shared_owners_;
          do
            v132 = __ldaxr(v162);
          while (__stlxr(v132 - 1, v162));
        }
        else if (v78 > 9)
        {
          if (v78 == 10)
            goto LABEL_359;
          v130 = *(std::__shared_weak_count **)(result + 672);
          if (!v130)
            goto LABEL_359;
          v246 = (unint64_t *)&v130->__shared_owners_;
          do
            v132 = __ldaxr(v246);
          while (__stlxr(v132 - 1, v246));
        }
        else
        {
          if (v78 != 9)
            goto LABEL_359;
          v130 = *(std::__shared_weak_count **)(result + 504);
          if (!v130)
            goto LABEL_359;
          v150 = (unint64_t *)&v130->__shared_owners_;
          do
            v132 = __ldaxr(v150);
          while (__stlxr(v132 - 1, v150));
        }
LABEL_357:
        if (!v132)
        {
          ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
          std::__shared_weak_count::__release_weak(v130);
        }
        goto LABEL_359;
      }
      if (v78 == 7)
      {
        v130 = *(std::__shared_weak_count **)(result + 480);
        if (v130)
        {
          v131 = (unint64_t *)&v130->__shared_owners_;
          do
            v132 = __ldaxr(v131);
          while (__stlxr(v132 - 1, v131));
          goto LABEL_357;
        }
      }
    }
LABEL_359:
    *(_DWORD *)(v2 + 992) = -1;
    *(_OWORD *)v2 = *(_OWORD *)a2;
    v247 = *(_OWORD *)(a2 + 16);
    v248 = *(_OWORD *)(a2 + 32);
    v249 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(v2 + 64) = *(_QWORD *)(a2 + 64);
    *(_OWORD *)(v2 + 32) = v248;
    *(_OWORD *)(v2 + 48) = v249;
    *(_OWORD *)(v2 + 16) = v247;
    v250 = *(_OWORD *)(a2 + 104);
    v251 = *(_OWORD *)(a2 + 120);
    v252 = *(_QWORD *)(a2 + 136);
    *(_OWORD *)(v2 + 88) = *(_OWORD *)(a2 + 88);
    *(_QWORD *)(v2 + 136) = v252;
    *(_OWORD *)(v2 + 120) = v251;
    *(_OWORD *)(v2 + 104) = v250;
    *(_OWORD *)(v2 + 72) = *(_OWORD *)(a2 + 72);
    v253 = *(_OWORD *)(a2 + 144);
    *(_BYTE *)(v2 + 160) = *(_BYTE *)(a2 + 160);
    *(_OWORD *)(v2 + 144) = v253;
    memcpy((void *)(v2 + 168), (const void *)(a2 + 168), 0x2C9uLL);
    v114 = 14;
    goto LABEL_100;
  }
  if (v3 > 3)
  {
    if (v3 <= 5)
    {
      v17 = *(_DWORD *)(result + 992);
      if (v3 == 5)
      {
        if (v17 == -1)
          goto LABEL_311;
        if (v17 != 5)
        {
          if (v17 > 7)
          {
            if (v17 > 0xB)
            {
              if (v17 < 0xF)
                goto LABEL_311;
              v18 = *(std::__shared_weak_count **)(result + 896);
              if (!v18)
                goto LABEL_311;
              v155 = (unint64_t *)&v18->__shared_owners_;
              do
                v20 = __ldaxr(v155);
              while (__stlxr(v20 - 1, v155));
            }
            else if (v17 > 9)
            {
              if (v17 == 10)
                goto LABEL_311;
              v18 = *(std::__shared_weak_count **)(result + 672);
              if (!v18)
                goto LABEL_311;
              v174 = (unint64_t *)&v18->__shared_owners_;
              do
                v20 = __ldaxr(v174);
              while (__stlxr(v20 - 1, v174));
            }
            else
            {
              if (v17 != 9)
                goto LABEL_311;
              v18 = *(std::__shared_weak_count **)(result + 504);
              if (!v18)
                goto LABEL_311;
              v143 = (unint64_t *)&v18->__shared_owners_;
              do
                v20 = __ldaxr(v143);
              while (__stlxr(v20 - 1, v143));
            }
LABEL_309:
            if (!v20)
            {
              ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
              std::__shared_weak_count::__release_weak(v18);
            }
            goto LABEL_311;
          }
          if (v17 == 7)
          {
            v18 = *(std::__shared_weak_count **)(result + 480);
            if (v18)
            {
              v19 = (unint64_t *)&v18->__shared_owners_;
              do
                v20 = __ldaxr(v19);
              while (__stlxr(v20 - 1, v19));
              goto LABEL_309;
            }
          }
LABEL_311:
          *(_DWORD *)(v2 + 992) = -1;
          *(_OWORD *)v2 = *(_OWORD *)a2;
          v175 = *(_OWORD *)(a2 + 16);
          v176 = *(_OWORD *)(a2 + 32);
          v177 = *(_OWORD *)(a2 + 48);
          *(_QWORD *)(v2 + 64) = *(_QWORD *)(a2 + 64);
          *(_OWORD *)(v2 + 32) = v176;
          *(_OWORD *)(v2 + 48) = v177;
          *(_OWORD *)(v2 + 16) = v175;
          v178 = *(_OWORD *)(a2 + 104);
          v179 = *(_OWORD *)(a2 + 120);
          v180 = *(_QWORD *)(a2 + 136);
          *(_OWORD *)(v2 + 88) = *(_OWORD *)(a2 + 88);
          *(_QWORD *)(v2 + 136) = v180;
          *(_OWORD *)(v2 + 120) = v179;
          *(_OWORD *)(v2 + 104) = v178;
          *(_OWORD *)(v2 + 72) = *(_OWORD *)(a2 + 72);
          v181 = *(_OWORD *)(a2 + 144);
          *(_BYTE *)(v2 + 160) = *(_BYTE *)(a2 + 160);
          *(_OWORD *)(v2 + 144) = v181;
          memcpy((void *)(v2 + 168), (const void *)(a2 + 168), 0x12DuLL);
          v114 = 5;
          goto LABEL_100;
        }
LABEL_86:
        *(_OWORD *)result = *(_OWORD *)a2;
        v104 = *(_OWORD *)(a2 + 16);
        v105 = *(_OWORD *)(a2 + 32);
        v106 = *(_OWORD *)(a2 + 48);
        *(_QWORD *)(result + 64) = *(_QWORD *)(a2 + 64);
        *(_OWORD *)(result + 32) = v105;
        *(_OWORD *)(result + 48) = v106;
        *(_OWORD *)(result + 16) = v104;
        v107 = *(_OWORD *)(a2 + 104);
        v108 = *(_OWORD *)(a2 + 120);
        v109 = *(_QWORD *)(a2 + 136);
        *(_OWORD *)(result + 88) = *(_OWORD *)(a2 + 88);
        *(_QWORD *)(result + 136) = v109;
        *(_OWORD *)(result + 120) = v108;
        *(_OWORD *)(result + 104) = v107;
        *(_OWORD *)(result + 72) = *(_OWORD *)(a2 + 72);
        v110 = *(_OWORD *)(a2 + 144);
        *(_BYTE *)(result + 160) = *(_BYTE *)(a2 + 160);
        *(_OWORD *)(result + 144) = v110;
        v111 = *(_OWORD *)(a2 + 168);
        v112 = *(_OWORD *)(a2 + 184);
        *(_BYTE *)(result + 200) = *(_BYTE *)(a2 + 200);
        *(_OWORD *)(result + 184) = v112;
        *(_OWORD *)(result + 168) = v111;
        memcpy((void *)(result + 204), (const void *)(a2 + 204), 0x108uLL);
        *(_BYTE *)(v2 + 468) = *(_BYTE *)(a2 + 468);
        return v2;
      }
      if (v17 != -1)
      {
        if (v17 == 4)
          goto LABEL_86;
        if (v17 > 7)
        {
          if (v17 > 0xB)
          {
            if (v17 < 0xF)
              goto LABEL_318;
            v98 = *(std::__shared_weak_count **)(result + 896);
            if (!v98)
              goto LABEL_318;
            v156 = (unint64_t *)&v98->__shared_owners_;
            do
              v100 = __ldaxr(v156);
            while (__stlxr(v100 - 1, v156));
          }
          else if (v17 > 9)
          {
            if (v17 == 10)
              goto LABEL_318;
            v98 = *(std::__shared_weak_count **)(result + 672);
            if (!v98)
              goto LABEL_318;
            v182 = (unint64_t *)&v98->__shared_owners_;
            do
              v100 = __ldaxr(v182);
            while (__stlxr(v100 - 1, v182));
          }
          else
          {
            if (v17 != 9)
              goto LABEL_318;
            v98 = *(std::__shared_weak_count **)(result + 504);
            if (!v98)
              goto LABEL_318;
            v144 = (unint64_t *)&v98->__shared_owners_;
            do
              v100 = __ldaxr(v144);
            while (__stlxr(v100 - 1, v144));
          }
LABEL_316:
          if (!v100)
          {
            ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
            std::__shared_weak_count::__release_weak(v98);
          }
          goto LABEL_318;
        }
        if (v17 == 7)
        {
          v98 = *(std::__shared_weak_count **)(result + 480);
          if (v98)
          {
            v99 = (unint64_t *)&v98->__shared_owners_;
            do
              v100 = __ldaxr(v99);
            while (__stlxr(v100 - 1, v99));
            goto LABEL_316;
          }
        }
      }
LABEL_318:
      *(_DWORD *)(v2 + 992) = -1;
      *(_OWORD *)v2 = *(_OWORD *)a2;
      v183 = *(_OWORD *)(a2 + 16);
      v184 = *(_OWORD *)(a2 + 32);
      v185 = *(_OWORD *)(a2 + 48);
      *(_QWORD *)(v2 + 64) = *(_QWORD *)(a2 + 64);
      *(_OWORD *)(v2 + 32) = v184;
      *(_OWORD *)(v2 + 48) = v185;
      *(_OWORD *)(v2 + 16) = v183;
      v186 = *(_OWORD *)(a2 + 104);
      v187 = *(_OWORD *)(a2 + 120);
      v188 = *(_QWORD *)(a2 + 136);
      *(_OWORD *)(v2 + 88) = *(_OWORD *)(a2 + 88);
      *(_QWORD *)(v2 + 136) = v188;
      *(_OWORD *)(v2 + 120) = v187;
      *(_OWORD *)(v2 + 104) = v186;
      *(_OWORD *)(v2 + 72) = *(_OWORD *)(a2 + 72);
      v189 = *(_OWORD *)(a2 + 144);
      *(_BYTE *)(v2 + 160) = *(_BYTE *)(a2 + 160);
      *(_OWORD *)(v2 + 144) = v189;
      memcpy((void *)(v2 + 168), (const void *)(a2 + 168), 0x12DuLL);
      v114 = 4;
      goto LABEL_100;
    }
    if (v3 != 6)
    {
      sub_20E971FA4(&v271, a2);
      return v2;
    }
    v69 = *(_DWORD *)(result + 992);
    if (v69 != -1)
    {
      if (v69 == 6)
      {
        *(_OWORD *)result = *(_OWORD *)a2;
        v70 = *(_OWORD *)(a2 + 16);
        v71 = *(_OWORD *)(a2 + 32);
        v72 = *(_OWORD *)(a2 + 48);
        *(_QWORD *)(result + 64) = *(_QWORD *)(a2 + 64);
        *(_OWORD *)(result + 32) = v71;
        *(_OWORD *)(result + 48) = v72;
        *(_OWORD *)(result + 16) = v70;
        v73 = *(_OWORD *)(a2 + 104);
        v74 = *(_OWORD *)(a2 + 120);
        v75 = *(_QWORD *)(a2 + 136);
        *(_OWORD *)(result + 88) = *(_OWORD *)(a2 + 88);
        *(_QWORD *)(result + 136) = v75;
        *(_OWORD *)(result + 120) = v74;
        *(_OWORD *)(result + 104) = v73;
        *(_OWORD *)(result + 72) = *(_OWORD *)(a2 + 72);
        v76 = *(_OWORD *)(a2 + 144);
        *(_BYTE *)(result + 160) = *(_BYTE *)(a2 + 160);
        *(_OWORD *)(result + 144) = v76;
        v38 = *(_OWORD *)(a2 + 168);
        v39 = *(_OWORD *)(a2 + 184);
        v77 = *(_OWORD *)(a2 + 200);
        *(_QWORD *)(result + 216) = *(_QWORD *)(a2 + 216);
        *(_OWORD *)(result + 200) = v77;
        goto LABEL_54;
      }
      if (v69 > 7)
      {
        if (v69 > 0xB)
        {
          if (v69 < 0xF)
            goto LABEL_352;
          v127 = *(std::__shared_weak_count **)(result + 896);
          if (!v127)
            goto LABEL_352;
          v161 = (unint64_t *)&v127->__shared_owners_;
          do
            v129 = __ldaxr(v161);
          while (__stlxr(v129 - 1, v161));
        }
        else if (v69 > 9)
        {
          if (v69 == 10)
            goto LABEL_352;
          v127 = *(std::__shared_weak_count **)(result + 672);
          if (!v127)
            goto LABEL_352;
          v235 = (unint64_t *)&v127->__shared_owners_;
          do
            v129 = __ldaxr(v235);
          while (__stlxr(v129 - 1, v235));
        }
        else
        {
          if (v69 != 9)
            goto LABEL_352;
          v127 = *(std::__shared_weak_count **)(result + 504);
          if (!v127)
            goto LABEL_352;
          v149 = (unint64_t *)&v127->__shared_owners_;
          do
            v129 = __ldaxr(v149);
          while (__stlxr(v129 - 1, v149));
        }
LABEL_350:
        if (!v129)
        {
          ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
          std::__shared_weak_count::__release_weak(v127);
        }
        goto LABEL_352;
      }
      if (v69 == 7)
      {
        v127 = *(std::__shared_weak_count **)(result + 480);
        if (v127)
        {
          v128 = (unint64_t *)&v127->__shared_owners_;
          do
            v129 = __ldaxr(v128);
          while (__stlxr(v129 - 1, v128));
          goto LABEL_350;
        }
      }
    }
LABEL_352:
    *(_DWORD *)(v2 + 992) = -1;
    *(_OWORD *)v2 = *(_OWORD *)a2;
    v236 = *(_OWORD *)(a2 + 16);
    v237 = *(_OWORD *)(a2 + 32);
    v238 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(v2 + 64) = *(_QWORD *)(a2 + 64);
    *(_OWORD *)(v2 + 32) = v237;
    *(_OWORD *)(v2 + 48) = v238;
    *(_OWORD *)(v2 + 16) = v236;
    v239 = *(_OWORD *)(a2 + 104);
    v240 = *(_OWORD *)(a2 + 120);
    v241 = *(_QWORD *)(a2 + 136);
    *(_OWORD *)(v2 + 88) = *(_OWORD *)(a2 + 88);
    *(_QWORD *)(v2 + 136) = v241;
    *(_OWORD *)(v2 + 120) = v240;
    *(_OWORD *)(v2 + 104) = v239;
    *(_OWORD *)(v2 + 72) = *(_OWORD *)(a2 + 72);
    v242 = *(_OWORD *)(a2 + 144);
    *(_BYTE *)(v2 + 160) = *(_BYTE *)(a2 + 160);
    *(_OWORD *)(v2 + 144) = v242;
    v243 = *(_OWORD *)(a2 + 168);
    v244 = *(_OWORD *)(a2 + 184);
    v245 = *(_OWORD *)(a2 + 200);
    *(_QWORD *)(v2 + 216) = *(_QWORD *)(a2 + 216);
    *(_OWORD *)(v2 + 200) = v245;
    *(_OWORD *)(v2 + 184) = v244;
    *(_OWORD *)(v2 + 168) = v243;
    v114 = 6;
    goto LABEL_100;
  }
  v5 = *(_DWORD *)(result + 992);
  if (v3 > 1)
  {
    if (v3 == 2)
    {
      if (v5 != -1)
      {
        if (v5 == 2)
        {
          *(_OWORD *)result = *(_OWORD *)a2;
          v41 = *(_OWORD *)(a2 + 16);
          v42 = *(_OWORD *)(a2 + 32);
          v43 = *(_OWORD *)(a2 + 48);
          *(_QWORD *)(result + 64) = *(_QWORD *)(a2 + 64);
          *(_OWORD *)(result + 32) = v42;
          *(_OWORD *)(result + 48) = v43;
          *(_OWORD *)(result + 16) = v41;
          v44 = *(_OWORD *)(a2 + 104);
          v45 = *(_OWORD *)(a2 + 120);
          v46 = *(_QWORD *)(a2 + 136);
          *(_OWORD *)(result + 88) = *(_OWORD *)(a2 + 88);
          *(_QWORD *)(result + 136) = v46;
          *(_OWORD *)(result + 120) = v45;
          *(_OWORD *)(result + 104) = v44;
          *(_OWORD *)(result + 72) = *(_OWORD *)(a2 + 72);
          v47 = *(_OWORD *)(a2 + 144);
          *(_BYTE *)(result + 160) = *(_BYTE *)(a2 + 160);
          *(_OWORD *)(result + 144) = v47;
          v48 = *(_OWORD *)(a2 + 200);
          v49 = *(_OWORD *)(a2 + 216);
          v50 = *(_OWORD *)(a2 + 232);
          *(_OWORD *)(result + 184) = *(_OWORD *)(a2 + 184);
          *(_OWORD *)(result + 232) = v50;
          *(_OWORD *)(result + 216) = v49;
          *(_OWORD *)(result + 200) = v48;
          v38 = *(_OWORD *)(a2 + 168);
LABEL_55:
          *(_OWORD *)(result + 168) = v38;
          return result;
        }
        if (v5 > 7)
        {
          if (v5 > 0xB)
          {
            if (v5 < 0xF)
              goto LABEL_339;
            v121 = *(std::__shared_weak_count **)(result + 896);
            if (!v121)
              goto LABEL_339;
            v159 = (unint64_t *)&v121->__shared_owners_;
            do
              v123 = __ldaxr(v159);
            while (__stlxr(v123 - 1, v159));
          }
          else if (v5 > 9)
          {
            if (v5 == 10)
              goto LABEL_339;
            v121 = *(std::__shared_weak_count **)(result + 672);
            if (!v121)
              goto LABEL_339;
            v216 = (unint64_t *)&v121->__shared_owners_;
            do
              v123 = __ldaxr(v216);
            while (__stlxr(v123 - 1, v216));
          }
          else
          {
            if (v5 != 9)
              goto LABEL_339;
            v121 = *(std::__shared_weak_count **)(result + 504);
            if (!v121)
              goto LABEL_339;
            v147 = (unint64_t *)&v121->__shared_owners_;
            do
              v123 = __ldaxr(v147);
            while (__stlxr(v123 - 1, v147));
          }
LABEL_337:
          if (!v123)
          {
            ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
            std::__shared_weak_count::__release_weak(v121);
          }
          goto LABEL_339;
        }
        if (v5 == 7)
        {
          v121 = *(std::__shared_weak_count **)(result + 480);
          if (v121)
          {
            v122 = (unint64_t *)&v121->__shared_owners_;
            do
              v123 = __ldaxr(v122);
            while (__stlxr(v123 - 1, v122));
            goto LABEL_337;
          }
        }
      }
LABEL_339:
      *(_DWORD *)(v2 + 992) = -1;
      *(_OWORD *)v2 = *(_OWORD *)a2;
      v217 = *(_OWORD *)(a2 + 16);
      v218 = *(_OWORD *)(a2 + 32);
      v219 = *(_OWORD *)(a2 + 48);
      *(_QWORD *)(v2 + 64) = *(_QWORD *)(a2 + 64);
      *(_OWORD *)(v2 + 32) = v218;
      *(_OWORD *)(v2 + 48) = v219;
      *(_OWORD *)(v2 + 16) = v217;
      v220 = *(_OWORD *)(a2 + 104);
      v221 = *(_OWORD *)(a2 + 120);
      v222 = *(_QWORD *)(a2 + 136);
      *(_OWORD *)(v2 + 88) = *(_OWORD *)(a2 + 88);
      *(_QWORD *)(v2 + 136) = v222;
      *(_OWORD *)(v2 + 120) = v221;
      *(_OWORD *)(v2 + 104) = v220;
      *(_OWORD *)(v2 + 72) = *(_OWORD *)(a2 + 72);
      v223 = *(_OWORD *)(a2 + 144);
      *(_BYTE *)(v2 + 160) = *(_BYTE *)(a2 + 160);
      *(_OWORD *)(v2 + 144) = v223;
      v224 = *(_OWORD *)(a2 + 184);
      v225 = *(_OWORD *)(a2 + 200);
      v226 = *(_OWORD *)(a2 + 216);
      *(_OWORD *)(v2 + 232) = *(_OWORD *)(a2 + 232);
      *(_OWORD *)(v2 + 216) = v226;
      *(_OWORD *)(v2 + 200) = v225;
      *(_OWORD *)(v2 + 184) = v224;
      *(_OWORD *)(v2 + 168) = *(_OWORD *)(a2 + 168);
      v114 = 2;
      goto LABEL_100;
    }
    if (v5 != -1)
    {
      if (v5 == 3)
        goto LABEL_86;
      if (v5 > 7)
      {
        if (v5 > 0xB)
        {
          if (v5 < 0xF)
            goto LABEL_373;
          v136 = *(std::__shared_weak_count **)(result + 896);
          if (!v136)
            goto LABEL_373;
          v164 = (unint64_t *)&v136->__shared_owners_;
          do
            v138 = __ldaxr(v164);
          while (__stlxr(v138 - 1, v164));
        }
        else if (v5 > 9)
        {
          if (v5 == 10)
            goto LABEL_373;
          v136 = *(std::__shared_weak_count **)(result + 672);
          if (!v136)
            goto LABEL_373;
          v262 = (unint64_t *)&v136->__shared_owners_;
          do
            v138 = __ldaxr(v262);
          while (__stlxr(v138 - 1, v262));
        }
        else
        {
          if (v5 != 9)
            goto LABEL_373;
          v136 = *(std::__shared_weak_count **)(result + 504);
          if (!v136)
            goto LABEL_373;
          v152 = (unint64_t *)&v136->__shared_owners_;
          do
            v138 = __ldaxr(v152);
          while (__stlxr(v138 - 1, v152));
        }
LABEL_371:
        if (!v138)
        {
          ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
          std::__shared_weak_count::__release_weak(v136);
        }
        goto LABEL_373;
      }
      if (v5 == 7)
      {
        v136 = *(std::__shared_weak_count **)(result + 480);
        if (v136)
        {
          v137 = (unint64_t *)&v136->__shared_owners_;
          do
            v138 = __ldaxr(v137);
          while (__stlxr(v138 - 1, v137));
          goto LABEL_371;
        }
      }
    }
LABEL_373:
    *(_DWORD *)(v2 + 992) = -1;
    *(_OWORD *)v2 = *(_OWORD *)a2;
    v263 = *(_OWORD *)(a2 + 16);
    v264 = *(_OWORD *)(a2 + 32);
    v265 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(v2 + 64) = *(_QWORD *)(a2 + 64);
    *(_OWORD *)(v2 + 32) = v264;
    *(_OWORD *)(v2 + 48) = v265;
    *(_OWORD *)(v2 + 16) = v263;
    v266 = *(_OWORD *)(a2 + 104);
    v267 = *(_OWORD *)(a2 + 120);
    v268 = *(_QWORD *)(a2 + 136);
    *(_OWORD *)(v2 + 88) = *(_OWORD *)(a2 + 88);
    *(_QWORD *)(v2 + 136) = v268;
    *(_OWORD *)(v2 + 120) = v267;
    *(_OWORD *)(v2 + 104) = v266;
    *(_OWORD *)(v2 + 72) = *(_OWORD *)(a2 + 72);
    v269 = *(_OWORD *)(a2 + 144);
    *(_BYTE *)(v2 + 160) = *(_BYTE *)(a2 + 160);
    *(_OWORD *)(v2 + 144) = v269;
    memcpy((void *)(v2 + 168), (const void *)(a2 + 168), 0x12DuLL);
    v114 = 3;
    goto LABEL_100;
  }
  if (v3)
  {
    if (v5 != -1)
    {
      if (v5 == 1)
      {
        *(_OWORD *)result = *(_OWORD *)a2;
        v6 = *(_OWORD *)(a2 + 16);
        v7 = *(_OWORD *)(a2 + 32);
        v8 = *(_OWORD *)(a2 + 48);
        *(_QWORD *)(result + 64) = *(_QWORD *)(a2 + 64);
        *(_OWORD *)(result + 32) = v7;
        *(_OWORD *)(result + 48) = v8;
        *(_OWORD *)(result + 16) = v6;
        v9 = *(_OWORD *)(a2 + 104);
        v10 = *(_OWORD *)(a2 + 120);
        v11 = *(_QWORD *)(a2 + 136);
        *(_OWORD *)(result + 88) = *(_OWORD *)(a2 + 88);
        *(_QWORD *)(result + 136) = v11;
        *(_OWORD *)(result + 120) = v10;
        *(_OWORD *)(result + 104) = v9;
        *(_OWORD *)(result + 72) = *(_OWORD *)(a2 + 72);
        v12 = *(_OWORD *)(a2 + 144);
        *(_BYTE *)(result + 160) = *(_BYTE *)(a2 + 160);
        *(_OWORD *)(result + 144) = v12;
        return result;
      }
      if (v5 > 7)
      {
        if (v5 > 0xB)
        {
          if (v5 < 0xF)
            goto LABEL_304;
          v115 = *(std::__shared_weak_count **)(result + 896);
          if (!v115)
            goto LABEL_304;
          v154 = (unint64_t *)&v115->__shared_owners_;
          do
            v117 = __ldaxr(v154);
          while (__stlxr(v117 - 1, v154));
        }
        else if (v5 > 9)
        {
          if (v5 == 10)
            goto LABEL_304;
          v115 = *(std::__shared_weak_count **)(result + 672);
          if (!v115)
            goto LABEL_304;
          v166 = (unint64_t *)&v115->__shared_owners_;
          do
            v117 = __ldaxr(v166);
          while (__stlxr(v117 - 1, v166));
        }
        else
        {
          if (v5 != 9)
            goto LABEL_304;
          v115 = *(std::__shared_weak_count **)(result + 504);
          if (!v115)
            goto LABEL_304;
          v142 = (unint64_t *)&v115->__shared_owners_;
          do
            v117 = __ldaxr(v142);
          while (__stlxr(v117 - 1, v142));
        }
      }
      else
      {
        if (v5 != 7)
          goto LABEL_304;
        v115 = *(std::__shared_weak_count **)(result + 480);
        if (!v115)
          goto LABEL_304;
        v116 = (unint64_t *)&v115->__shared_owners_;
        do
          v117 = __ldaxr(v116);
        while (__stlxr(v117 - 1, v116));
      }
      if (!v117)
      {
        ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
        std::__shared_weak_count::__release_weak(v115);
      }
    }
LABEL_304:
    *(_DWORD *)(v2 + 992) = -1;
    *(_OWORD *)v2 = *(_OWORD *)a2;
    v167 = *(_OWORD *)(a2 + 16);
    v168 = *(_OWORD *)(a2 + 32);
    v169 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(v2 + 64) = *(_QWORD *)(a2 + 64);
    *(_OWORD *)(v2 + 32) = v168;
    *(_OWORD *)(v2 + 48) = v169;
    *(_OWORD *)(v2 + 16) = v167;
    v170 = *(_OWORD *)(a2 + 104);
    v171 = *(_OWORD *)(a2 + 120);
    v172 = *(_QWORD *)(a2 + 136);
    *(_OWORD *)(v2 + 88) = *(_OWORD *)(a2 + 88);
    *(_QWORD *)(v2 + 136) = v172;
    *(_OWORD *)(v2 + 120) = v171;
    *(_OWORD *)(v2 + 104) = v170;
    *(_OWORD *)(v2 + 72) = *(_OWORD *)(a2 + 72);
    v173 = *(_OWORD *)(a2 + 144);
    *(_BYTE *)(v2 + 160) = *(_BYTE *)(a2 + 160);
    *(_OWORD *)(v2 + 144) = v173;
    v114 = 1;
    goto LABEL_100;
  }
  if (v5 == -1)
    goto LABEL_380;
  if (v5)
  {
    if (v5 <= 7)
    {
      if (v5 == 7)
      {
        v139 = *(std::__shared_weak_count **)(result + 480);
        if (v139)
        {
          v140 = (unint64_t *)&v139->__shared_owners_;
          do
            v141 = __ldaxr(v140);
          while (__stlxr(v141 - 1, v140));
          goto LABEL_378;
        }
      }
LABEL_380:
      *(_DWORD *)(v2 + 992) = 0;
      return v2;
    }
    if (v5 > 0xB)
    {
      if (v5 < 0xF)
        goto LABEL_380;
      v139 = *(std::__shared_weak_count **)(result + 896);
      if (!v139)
        goto LABEL_380;
      v165 = (unint64_t *)&v139->__shared_owners_;
      do
        v141 = __ldaxr(v165);
      while (__stlxr(v141 - 1, v165));
    }
    else if (v5 > 9)
    {
      if (v5 == 10)
        goto LABEL_380;
      v139 = *(std::__shared_weak_count **)(result + 672);
      if (!v139)
        goto LABEL_380;
      v270 = (unint64_t *)&v139->__shared_owners_;
      do
        v141 = __ldaxr(v270);
      while (__stlxr(v141 - 1, v270));
    }
    else
    {
      if (v5 != 9)
        goto LABEL_380;
      v139 = *(std::__shared_weak_count **)(result + 504);
      if (!v139)
        goto LABEL_380;
      v153 = (unint64_t *)&v139->__shared_owners_;
      do
        v141 = __ldaxr(v153);
      while (__stlxr(v141 - 1, v153));
    }
LABEL_378:
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
    goto LABEL_380;
  }
  return result;
}

__n128 sub_20E971FA4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __n128 result;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t *v42;

  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 992);
  if (v4 != -1)
  {
    if (v4 == 7)
    {
      *(_OWORD *)v3 = *(_OWORD *)a2;
      v5 = *(_OWORD *)(a2 + 16);
      v6 = *(_OWORD *)(a2 + 32);
      v7 = *(_OWORD *)(a2 + 48);
      *(_QWORD *)(v3 + 64) = *(_QWORD *)(a2 + 64);
      *(_OWORD *)(v3 + 32) = v6;
      *(_OWORD *)(v3 + 48) = v7;
      *(_OWORD *)(v3 + 16) = v5;
      v8 = *(_OWORD *)(a2 + 104);
      v9 = *(_OWORD *)(a2 + 120);
      v10 = *(_QWORD *)(a2 + 136);
      *(_OWORD *)(v3 + 88) = *(_OWORD *)(a2 + 88);
      *(_QWORD *)(v3 + 136) = v10;
      *(_OWORD *)(v3 + 120) = v9;
      *(_OWORD *)(v3 + 104) = v8;
      *(_OWORD *)(v3 + 72) = *(_OWORD *)(a2 + 72);
      v11 = *(_OWORD *)(a2 + 144);
      *(_BYTE *)(v3 + 160) = *(_BYTE *)(a2 + 160);
      *(_OWORD *)(v3 + 144) = v11;
      v12 = *(_OWORD *)(a2 + 168);
      v13 = *(_OWORD *)(a2 + 184);
      *(_BYTE *)(v3 + 200) = *(_BYTE *)(a2 + 200);
      *(_OWORD *)(v3 + 184) = v13;
      *(_OWORD *)(v3 + 168) = v12;
      memcpy((void *)(v3 + 204), (const void *)(a2 + 204), 0x108uLL);
      *(_BYTE *)(v3 + 468) = *(_BYTE *)(a2 + 468);
      v15 = *(_QWORD *)(a2 + 472);
      v14 = *(_QWORD *)(a2 + 480);
      if (v14)
      {
        v16 = (unint64_t *)(v14 + 8);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      v18 = *(std::__shared_weak_count **)(v3 + 480);
      *(_QWORD *)(v3 + 472) = v15;
      *(_QWORD *)(v3 + 480) = v14;
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      *(_OWORD *)(v3 + 488) = *(_OWORD *)(a2 + 488);
      v21 = *(_OWORD *)(a2 + 504);
      v22 = *(_OWORD *)(a2 + 520);
      v23 = *(_OWORD *)(a2 + 536);
      *(_QWORD *)(v3 + 552) = *(_QWORD *)(a2 + 552);
      *(_OWORD *)(v3 + 520) = v22;
      *(_OWORD *)(v3 + 536) = v23;
      *(_OWORD *)(v3 + 504) = v21;
      result = *(__n128 *)(a2 + 560);
      *(__n128 *)(v3 + 560) = result;
      return result;
    }
    if (v4 >= 8)
    {
      if (v4 > 0xB)
      {
        if (v4 < 0xF)
          goto LABEL_13;
        v38 = *(std::__shared_weak_count **)(v3 + 896);
        if (!v38)
          goto LABEL_13;
        v41 = (unint64_t *)&v38->__shared_owners_;
        do
          v40 = __ldaxr(v41);
        while (__stlxr(v40 - 1, v41));
      }
      else if (v4 > 9)
      {
        if (v4 == 10)
          goto LABEL_13;
        v38 = *(std::__shared_weak_count **)(v3 + 672);
        if (!v38)
          goto LABEL_13;
        v42 = (unint64_t *)&v38->__shared_owners_;
        do
          v40 = __ldaxr(v42);
        while (__stlxr(v40 - 1, v42));
      }
      else
      {
        if (v4 != 9)
          goto LABEL_13;
        v38 = *(std::__shared_weak_count **)(v3 + 504);
        if (!v38)
          goto LABEL_13;
        v39 = (unint64_t *)&v38->__shared_owners_;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
      }
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
  }
LABEL_13:
  *(_DWORD *)(v3 + 992) = -1;
  *(_OWORD *)v3 = *(_OWORD *)a2;
  v25 = *(_OWORD *)(a2 + 16);
  v26 = *(_OWORD *)(a2 + 32);
  v27 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(v3 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(v3 + 32) = v26;
  *(_OWORD *)(v3 + 48) = v27;
  *(_OWORD *)(v3 + 16) = v25;
  v28 = *(_OWORD *)(a2 + 104);
  v29 = *(_OWORD *)(a2 + 120);
  v30 = *(_QWORD *)(a2 + 136);
  *(_OWORD *)(v3 + 88) = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(v3 + 136) = v30;
  *(_OWORD *)(v3 + 120) = v29;
  *(_OWORD *)(v3 + 104) = v28;
  *(_OWORD *)(v3 + 72) = *(_OWORD *)(a2 + 72);
  v31 = *(_OWORD *)(a2 + 144);
  *(_BYTE *)(v3 + 160) = *(_BYTE *)(a2 + 160);
  *(_OWORD *)(v3 + 144) = v31;
  memcpy((void *)(v3 + 168), (const void *)(a2 + 168), 0x12DuLL);
  v32 = *(_QWORD *)(a2 + 480);
  *(_QWORD *)(v3 + 472) = *(_QWORD *)(a2 + 472);
  *(_QWORD *)(v3 + 480) = v32;
  if (v32)
  {
    v33 = (unint64_t *)(v32 + 8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  *(_OWORD *)(v3 + 488) = *(_OWORD *)(a2 + 488);
  v35 = *(_OWORD *)(a2 + 504);
  v36 = *(_OWORD *)(a2 + 520);
  v37 = *(_OWORD *)(a2 + 536);
  *(_QWORD *)(v3 + 552) = *(_QWORD *)(a2 + 552);
  *(_OWORD *)(v3 + 520) = v36;
  *(_OWORD *)(v3 + 536) = v37;
  *(_OWORD *)(v3 + 504) = v35;
  result = *(__n128 *)(a2 + 560);
  *(__n128 *)(v3 + 560) = result;
  *(_DWORD *)(v3 + 992) = 7;
  return result;
}

__n128 sub_20E972270(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __n128 result;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;

  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 992);
  if (v4 == -1)
    goto LABEL_30;
  if (v4 == 9)
  {
    *(_OWORD *)v3 = *(_OWORD *)a2;
    v5 = *(_OWORD *)(a2 + 16);
    v6 = *(_OWORD *)(a2 + 32);
    v7 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(v3 + 64) = *(_QWORD *)(a2 + 64);
    *(_OWORD *)(v3 + 32) = v6;
    *(_OWORD *)(v3 + 48) = v7;
    *(_OWORD *)(v3 + 16) = v5;
    v8 = *(_OWORD *)(a2 + 104);
    v9 = *(_OWORD *)(a2 + 120);
    v10 = *(_QWORD *)(a2 + 136);
    *(_OWORD *)(v3 + 88) = *(_OWORD *)(a2 + 88);
    *(_QWORD *)(v3 + 136) = v10;
    *(_OWORD *)(v3 + 120) = v9;
    *(_OWORD *)(v3 + 104) = v8;
    *(_OWORD *)(v3 + 72) = *(_OWORD *)(a2 + 72);
    v11 = *(_OWORD *)(a2 + 144);
    *(_BYTE *)(v3 + 160) = *(_BYTE *)(a2 + 160);
    *(_OWORD *)(v3 + 144) = v11;
    v12 = *(_OWORD *)(a2 + 168);
    v13 = *(_OWORD *)(a2 + 184);
    v14 = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(v3 + 209) = *(_OWORD *)(a2 + 209);
    *(_OWORD *)(v3 + 200) = v14;
    *(_OWORD *)(v3 + 184) = v13;
    *(_OWORD *)(v3 + 168) = v12;
    memcpy((void *)(v3 + 228), (const void *)(a2 + 228), 0x108uLL);
    *(_BYTE *)(v3 + 492) = *(_BYTE *)(a2 + 492);
    v16 = *(_QWORD *)(a2 + 496);
    v15 = *(_QWORD *)(a2 + 504);
    if (v15)
    {
      v17 = (unint64_t *)(v15 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    v19 = *(std::__shared_weak_count **)(v3 + 504);
    *(_QWORD *)(v3 + 496) = v16;
    *(_QWORD *)(v3 + 504) = v15;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldaxr(p_shared_owners);
      while (__stlxr(v21 - 1, p_shared_owners));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    *(_OWORD *)(v3 + 512) = *(_OWORD *)(a2 + 512);
    v22 = *(_OWORD *)(a2 + 528);
    v23 = *(_OWORD *)(a2 + 544);
    v24 = *(_OWORD *)(a2 + 560);
    *(_QWORD *)(v3 + 576) = *(_QWORD *)(a2 + 576);
    *(_OWORD *)(v3 + 544) = v23;
    *(_OWORD *)(v3 + 560) = v24;
    *(_OWORD *)(v3 + 528) = v22;
    result = *(__n128 *)(a2 + 584);
    *(__n128 *)(v3 + 584) = result;
    return result;
  }
  if (v4 > 7)
  {
    if (v4 > 0xB)
    {
      if (v4 < 0xF)
        goto LABEL_30;
      v26 = *(std::__shared_weak_count **)(v3 + 896);
      if (!v26)
        goto LABEL_30;
      v30 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldaxr(v30);
      while (__stlxr(v28 - 1, v30));
    }
    else
    {
      if (v4 != 11)
        goto LABEL_30;
      v26 = *(std::__shared_weak_count **)(v3 + 672);
      if (!v26)
        goto LABEL_30;
      v29 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldaxr(v29);
      while (__stlxr(v28 - 1, v29));
    }
LABEL_28:
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
    goto LABEL_30;
  }
  if (v4 == 7)
  {
    v26 = *(std::__shared_weak_count **)(v3 + 480);
    if (v26)
    {
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      goto LABEL_28;
    }
  }
LABEL_30:
  *(_DWORD *)(v3 + 992) = -1;
  *(_OWORD *)v3 = *(_OWORD *)a2;
  v31 = *(_OWORD *)(a2 + 16);
  v32 = *(_OWORD *)(a2 + 32);
  v33 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(v3 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(v3 + 32) = v32;
  *(_OWORD *)(v3 + 48) = v33;
  *(_OWORD *)(v3 + 16) = v31;
  v34 = *(_OWORD *)(a2 + 104);
  v35 = *(_OWORD *)(a2 + 120);
  v36 = *(_QWORD *)(a2 + 136);
  *(_OWORD *)(v3 + 88) = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(v3 + 136) = v36;
  *(_OWORD *)(v3 + 120) = v35;
  *(_OWORD *)(v3 + 104) = v34;
  *(_OWORD *)(v3 + 72) = *(_OWORD *)(a2 + 72);
  v37 = *(_OWORD *)(a2 + 144);
  *(_BYTE *)(v3 + 160) = *(_BYTE *)(a2 + 160);
  *(_OWORD *)(v3 + 144) = v37;
  memcpy((void *)(v3 + 168), (const void *)(a2 + 168), 0x145uLL);
  v38 = *(_QWORD *)(a2 + 504);
  *(_QWORD *)(v3 + 496) = *(_QWORD *)(a2 + 496);
  *(_QWORD *)(v3 + 504) = v38;
  if (v38)
  {
    v39 = (unint64_t *)(v38 + 8);
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
  }
  *(_OWORD *)(v3 + 512) = *(_OWORD *)(a2 + 512);
  v41 = *(_OWORD *)(a2 + 528);
  v42 = *(_OWORD *)(a2 + 544);
  v43 = *(_OWORD *)(a2 + 560);
  *(_QWORD *)(v3 + 576) = *(_QWORD *)(a2 + 576);
  *(_OWORD *)(v3 + 544) = v42;
  *(_OWORD *)(v3 + 560) = v43;
  *(_OWORD *)(v3 + 528) = v41;
  result = *(__n128 *)(a2 + 584);
  *(__n128 *)(v3 + 584) = result;
  *(_DWORD *)(v3 + 992) = 9;
  return result;
}

__n128 sub_20E972534(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __n128 result;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;

  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 992);
  if (v4 == -1)
    goto LABEL_30;
  if (v4 == 11)
  {
    *(_OWORD *)v3 = *(_OWORD *)a2;
    v5 = *(_OWORD *)(a2 + 16);
    v6 = *(_OWORD *)(a2 + 32);
    v7 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(v3 + 64) = *(_QWORD *)(a2 + 64);
    *(_OWORD *)(v3 + 32) = v6;
    *(_OWORD *)(v3 + 48) = v7;
    *(_OWORD *)(v3 + 16) = v5;
    v8 = *(_OWORD *)(a2 + 104);
    v9 = *(_OWORD *)(a2 + 120);
    v10 = *(_QWORD *)(a2 + 136);
    *(_OWORD *)(v3 + 88) = *(_OWORD *)(a2 + 88);
    *(_QWORD *)(v3 + 136) = v10;
    *(_OWORD *)(v3 + 120) = v9;
    *(_OWORD *)(v3 + 104) = v8;
    *(_OWORD *)(v3 + 72) = *(_OWORD *)(a2 + 72);
    v11 = *(_OWORD *)(a2 + 144);
    *(_BYTE *)(v3 + 160) = *(_BYTE *)(a2 + 160);
    *(_OWORD *)(v3 + 144) = v11;
    v12 = *(_OWORD *)(a2 + 216);
    v13 = *(_OWORD *)(a2 + 232);
    v14 = *(_OWORD *)(a2 + 248);
    *(_OWORD *)(v3 + 200) = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(v3 + 248) = v14;
    *(_OWORD *)(v3 + 232) = v13;
    *(_OWORD *)(v3 + 216) = v12;
    v15 = *(_OWORD *)(a2 + 312);
    v17 = *(_OWORD *)(a2 + 264);
    v16 = *(_OWORD *)(a2 + 280);
    *(_OWORD *)(v3 + 296) = *(_OWORD *)(a2 + 296);
    *(_OWORD *)(v3 + 312) = v15;
    *(_OWORD *)(v3 + 264) = v17;
    *(_OWORD *)(v3 + 280) = v16;
    v18 = *(_OWORD *)(a2 + 376);
    v20 = *(_OWORD *)(a2 + 328);
    v19 = *(_OWORD *)(a2 + 344);
    *(_OWORD *)(v3 + 360) = *(_OWORD *)(a2 + 360);
    *(_OWORD *)(v3 + 376) = v18;
    *(_OWORD *)(v3 + 328) = v20;
    *(_OWORD *)(v3 + 344) = v19;
    v21 = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(v3 + 184) = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(v3 + 168) = v21;
    memcpy((void *)(v3 + 392), (const void *)(a2 + 392), 0x108uLL);
    *(_BYTE *)(v3 + 656) = *(_BYTE *)(a2 + 656);
    v22 = *(_QWORD *)(a2 + 664);
    v23 = *(_QWORD *)(a2 + 672);
    if (v23)
    {
      v24 = (unint64_t *)(v23 + 8);
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
    *(_QWORD *)(v3 + 664) = v22;
    v26 = *(std::__shared_weak_count **)(v3 + 672);
    *(_QWORD *)(v3 + 672) = v23;
    if (v26)
    {
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldaxr(p_shared_owners);
      while (__stlxr(v28 - 1, p_shared_owners));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    *(_OWORD *)(v3 + 680) = *(_OWORD *)(a2 + 680);
    v29 = *(_OWORD *)(a2 + 696);
    v30 = *(_OWORD *)(a2 + 712);
    v31 = *(_OWORD *)(a2 + 728);
    *(_QWORD *)(v3 + 744) = *(_QWORD *)(a2 + 744);
    *(_OWORD *)(v3 + 712) = v30;
    *(_OWORD *)(v3 + 728) = v31;
    *(_OWORD *)(v3 + 696) = v29;
    result = *(__n128 *)(a2 + 752);
    *(__n128 *)(v3 + 752) = result;
    return result;
  }
  if (v4 > 7)
  {
    if (v4 > 0xB)
    {
      if (v4 < 0xF)
        goto LABEL_30;
      v33 = *(std::__shared_weak_count **)(v3 + 896);
      if (!v33)
        goto LABEL_30;
      v37 = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldaxr(v37);
      while (__stlxr(v35 - 1, v37));
    }
    else
    {
      if (v4 != 9)
        goto LABEL_30;
      v33 = *(std::__shared_weak_count **)(v3 + 504);
      if (!v33)
        goto LABEL_30;
      v36 = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldaxr(v36);
      while (__stlxr(v35 - 1, v36));
    }
LABEL_28:
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
    goto LABEL_30;
  }
  if (v4 == 7)
  {
    v33 = *(std::__shared_weak_count **)(v3 + 480);
    if (v33)
    {
      v34 = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      goto LABEL_28;
    }
  }
LABEL_30:
  *(_DWORD *)(v3 + 992) = -1;
  *(_OWORD *)v3 = *(_OWORD *)a2;
  v38 = *(_OWORD *)(a2 + 16);
  v39 = *(_OWORD *)(a2 + 32);
  v40 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(v3 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(v3 + 32) = v39;
  *(_OWORD *)(v3 + 48) = v40;
  *(_OWORD *)(v3 + 16) = v38;
  v41 = *(_OWORD *)(a2 + 104);
  v42 = *(_OWORD *)(a2 + 120);
  v43 = *(_QWORD *)(a2 + 136);
  *(_OWORD *)(v3 + 88) = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(v3 + 136) = v43;
  *(_OWORD *)(v3 + 120) = v42;
  *(_OWORD *)(v3 + 104) = v41;
  *(_OWORD *)(v3 + 72) = *(_OWORD *)(a2 + 72);
  v44 = *(_OWORD *)(a2 + 144);
  *(_BYTE *)(v3 + 160) = *(_BYTE *)(a2 + 160);
  *(_OWORD *)(v3 + 144) = v44;
  memcpy((void *)(v3 + 168), (const void *)(a2 + 168), 0x1E9uLL);
  *(_QWORD *)(v3 + 664) = *(_QWORD *)(a2 + 664);
  v45 = *(_QWORD *)(a2 + 672);
  *(_QWORD *)(v3 + 672) = v45;
  if (v45)
  {
    v46 = (unint64_t *)(v45 + 8);
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
  }
  *(_OWORD *)(v3 + 680) = *(_OWORD *)(a2 + 680);
  v48 = *(_OWORD *)(a2 + 696);
  v49 = *(_OWORD *)(a2 + 712);
  v50 = *(_OWORD *)(a2 + 728);
  *(_QWORD *)(v3 + 744) = *(_QWORD *)(a2 + 744);
  *(_OWORD *)(v3 + 712) = v49;
  *(_OWORD *)(v3 + 728) = v50;
  *(_OWORD *)(v3 + 696) = v48;
  result = *(__n128 *)(a2 + 752);
  *(__n128 *)(v3 + 752) = result;
  *(_DWORD *)(v3 + 992) = 11;
  return result;
}

__n128 sub_20E972870(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __n128 result;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t *v27;
  unint64_t *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;

  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 992);
  if (v4 == -1)
    goto LABEL_36;
  if (v4 == 15)
  {
    *(_OWORD *)v3 = *(_OWORD *)a2;
    v5 = *(_OWORD *)(a2 + 16);
    v6 = *(_OWORD *)(a2 + 32);
    v7 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(v3 + 64) = *(_QWORD *)(a2 + 64);
    *(_OWORD *)(v3 + 32) = v6;
    *(_OWORD *)(v3 + 48) = v7;
    *(_OWORD *)(v3 + 16) = v5;
    v8 = *(_OWORD *)(a2 + 104);
    v9 = *(_OWORD *)(a2 + 120);
    v10 = *(_QWORD *)(a2 + 136);
    *(_OWORD *)(v3 + 88) = *(_OWORD *)(a2 + 88);
    *(_QWORD *)(v3 + 136) = v10;
    *(_OWORD *)(v3 + 120) = v9;
    *(_OWORD *)(v3 + 104) = v8;
    *(_OWORD *)(v3 + 72) = *(_OWORD *)(a2 + 72);
    v11 = *(_OWORD *)(a2 + 144);
    *(_BYTE *)(v3 + 160) = *(_BYTE *)(a2 + 160);
    *(_OWORD *)(v3 + 144) = v11;
    memcpy((void *)(v3 + 168), (const void *)(a2 + 168), 0x1C0uLL);
    memcpy((void *)(v3 + 616), (const void *)(a2 + 616), 0x109uLL);
    v12 = *(_QWORD *)(a2 + 888);
    v13 = *(_QWORD *)(a2 + 896);
    if (v13)
    {
      v14 = (unint64_t *)(v13 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    *(_QWORD *)(v3 + 888) = v12;
    v16 = *(std::__shared_weak_count **)(v3 + 896);
    *(_QWORD *)(v3 + 896) = v13;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    *(_OWORD *)(v3 + 904) = *(_OWORD *)(a2 + 904);
    v19 = *(_OWORD *)(a2 + 920);
    v20 = *(_OWORD *)(a2 + 936);
    v21 = *(_OWORD *)(a2 + 952);
    *(_QWORD *)(v3 + 968) = *(_QWORD *)(a2 + 968);
    *(_OWORD *)(v3 + 936) = v20;
    *(_OWORD *)(v3 + 952) = v21;
    *(_OWORD *)(v3 + 920) = v19;
    result = *(__n128 *)(a2 + 976);
    *(__n128 *)(v3 + 976) = result;
    return result;
  }
  if (v4 > 7)
  {
    if (v4 > 0xB)
    {
      if (v4 < 0xF)
        goto LABEL_36;
      v23 = *(std::__shared_weak_count **)(v3 + 896);
      if (!v23)
        goto LABEL_36;
      v27 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldaxr(v27);
      while (__stlxr(v25 - 1, v27));
    }
    else if (v4 > 9)
    {
      if (v4 == 10)
        goto LABEL_36;
      v23 = *(std::__shared_weak_count **)(v3 + 672);
      if (!v23)
        goto LABEL_36;
      v28 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldaxr(v28);
      while (__stlxr(v25 - 1, v28));
    }
    else
    {
      if (v4 != 9)
        goto LABEL_36;
      v23 = *(std::__shared_weak_count **)(v3 + 504);
      if (!v23)
        goto LABEL_36;
      v26 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldaxr(v26);
      while (__stlxr(v25 - 1, v26));
    }
LABEL_34:
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
    goto LABEL_36;
  }
  if (v4 == 7)
  {
    v23 = *(std::__shared_weak_count **)(v3 + 480);
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      goto LABEL_34;
    }
  }
LABEL_36:
  *(_DWORD *)(v3 + 992) = -1;
  *(_OWORD *)v3 = *(_OWORD *)a2;
  v29 = *(_OWORD *)(a2 + 16);
  v30 = *(_OWORD *)(a2 + 32);
  v31 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(v3 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(v3 + 32) = v30;
  *(_OWORD *)(v3 + 48) = v31;
  *(_OWORD *)(v3 + 16) = v29;
  v32 = *(_OWORD *)(a2 + 104);
  v33 = *(_OWORD *)(a2 + 120);
  v34 = *(_QWORD *)(a2 + 136);
  *(_OWORD *)(v3 + 88) = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(v3 + 136) = v34;
  *(_OWORD *)(v3 + 120) = v33;
  *(_OWORD *)(v3 + 104) = v32;
  *(_OWORD *)(v3 + 72) = *(_OWORD *)(a2 + 72);
  v35 = *(_OWORD *)(a2 + 144);
  *(_BYTE *)(v3 + 160) = *(_BYTE *)(a2 + 160);
  *(_OWORD *)(v3 + 144) = v35;
  memcpy((void *)(v3 + 168), (const void *)(a2 + 168), 0x2C9uLL);
  *(_QWORD *)(v3 + 888) = *(_QWORD *)(a2 + 888);
  v36 = *(_QWORD *)(a2 + 896);
  *(_QWORD *)(v3 + 896) = v36;
  if (v36)
  {
    v37 = (unint64_t *)(v36 + 8);
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }
  *(_OWORD *)(v3 + 904) = *(_OWORD *)(a2 + 904);
  v39 = *(_OWORD *)(a2 + 920);
  v40 = *(_OWORD *)(a2 + 936);
  v41 = *(_OWORD *)(a2 + 952);
  *(_QWORD *)(v3 + 968) = *(_QWORD *)(a2 + 968);
  *(_OWORD *)(v3 + 936) = v40;
  *(_OWORD *)(v3 + 952) = v41;
  *(_OWORD *)(v3 + 920) = v39;
  result = *(__n128 *)(a2 + 976);
  *(__n128 *)(v3 + 976) = result;
  *(_DWORD *)(v3 + 992) = 15;
  return result;
}

uint64_t sub_20E972B64(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t *p_shared_owners;
  unint64_t *v8;

  v1 = result;
  if (*(_BYTE *)(result + 1440))
  {
    v2 = *(_DWORD *)(result + 992);
    if (v2 != -1)
    {
      if (v2 > 7)
      {
        if (v2 > 0xB)
        {
          if (v2 >= 0xF)
          {
            v3 = *(std::__shared_weak_count **)(result + 896);
            if (v3)
            {
              p_shared_owners = (unint64_t *)&v3->__shared_owners_;
              do
                v5 = __ldaxr(p_shared_owners);
              while (__stlxr(v5 - 1, p_shared_owners));
              goto LABEL_25;
            }
          }
        }
        else if (v2 > 9)
        {
          if (v2 != 10)
          {
            v3 = *(std::__shared_weak_count **)(result + 672);
            if (v3)
            {
              v8 = (unint64_t *)&v3->__shared_owners_;
              do
                v5 = __ldaxr(v8);
              while (__stlxr(v5 - 1, v8));
              goto LABEL_25;
            }
          }
        }
        else if (v2 == 9)
        {
          v3 = *(std::__shared_weak_count **)(result + 504);
          if (v3)
          {
            v6 = (unint64_t *)&v3->__shared_owners_;
            do
              v5 = __ldaxr(v6);
            while (__stlxr(v5 - 1, v6));
            goto LABEL_25;
          }
        }
      }
      else if (v2 == 7)
      {
        v3 = *(std::__shared_weak_count **)(result + 480);
        if (v3)
        {
          v4 = (unint64_t *)&v3->__shared_owners_;
          do
            v5 = __ldaxr(v4);
          while (__stlxr(v5 - 1, v4));
LABEL_25:
          if (!v5)
          {
            ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
            std::__shared_weak_count::__release_weak(v3);
            return v1;
          }
        }
      }
    }
  }
  return result;
}

_BYTE *sub_20E972C70(_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1440] = 0;
  if (*(_BYTE *)(a2 + 1440))
  {
    sub_20E972DB4((uint64_t)a1, a2);
    memcpy(a1 + 1000, (const void *)(a2 + 1000), 0x1B8uLL);
    a1[1440] = 1;
  }
  return a1;
}

void sub_20E972CC4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  unsigned int v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *p_shared_owners;
  unint64_t *v9;

  if (!*(_BYTE *)(v1 + 1440) || (v3 = *(_DWORD *)(v1 + 992), v3 == -1))
LABEL_3:
    _Unwind_Resume(exception_object);
  if (v3 > 7)
  {
    if (v3 > 0xB)
    {
      if (v3 < 0xF)
        goto LABEL_3;
      v4 = *(std::__shared_weak_count **)(v1 + 896);
      if (!v4)
        goto LABEL_3;
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
    }
    else if (v3 > 9)
    {
      if (v3 == 10)
        goto LABEL_3;
      v4 = *(std::__shared_weak_count **)(v1 + 672);
      if (!v4)
        goto LABEL_3;
      v9 = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(v9);
      while (__stlxr(v6 - 1, v9));
    }
    else
    {
      if (v3 != 9)
        goto LABEL_3;
      v4 = *(std::__shared_weak_count **)(v1 + 504);
      if (!v4)
        goto LABEL_3;
      v7 = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(v7);
      while (__stlxr(v6 - 1, v7));
    }
  }
  else
  {
    if (v3 != 7)
      goto LABEL_3;
    v4 = *(std::__shared_weak_count **)(v1 + 480);
    if (!v4)
      goto LABEL_3;
    v5 = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
  }
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    _Unwind_Resume(exception_object);
  }
  goto LABEL_3;
}

uint64_t sub_20E972DB4(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  void *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  void *v33;
  const void *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  void *v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;

  v2 = result;
  v3 = *(_DWORD *)(a2 + 992);
  if (v3 == -1)
    goto LABEL_45;
  if (v3 <= 7)
  {
    if (v3 > 3)
    {
      *(_DWORD *)(result + 992) = -1;
      *(_OWORD *)result = *(_OWORD *)a2;
      v26 = *(_OWORD *)(a2 + 16);
      v27 = *(_OWORD *)(a2 + 32);
      v28 = *(_OWORD *)(a2 + 48);
      *(_QWORD *)(result + 64) = *(_QWORD *)(a2 + 64);
      *(_OWORD *)(result + 32) = v27;
      *(_OWORD *)(result + 48) = v28;
      *(_OWORD *)(result + 16) = v26;
      v29 = *(_OWORD *)(a2 + 104);
      v30 = *(_OWORD *)(a2 + 120);
      v31 = *(_QWORD *)(a2 + 136);
      *(_OWORD *)(result + 88) = *(_OWORD *)(a2 + 88);
      *(_QWORD *)(result + 136) = v31;
      *(_OWORD *)(result + 120) = v30;
      *(_OWORD *)(result + 104) = v29;
      *(_OWORD *)(result + 72) = *(_OWORD *)(a2 + 72);
      v32 = *(_OWORD *)(a2 + 144);
      *(_BYTE *)(result + 160) = *(_BYTE *)(a2 + 160);
      *(_OWORD *)(result + 144) = v32;
      if (v3 > 5)
      {
        if (v3 == 6)
        {
          v55 = *(_OWORD *)(a2 + 168);
          v56 = *(_OWORD *)(a2 + 184);
          v57 = *(_OWORD *)(a2 + 200);
          *(_QWORD *)(result + 216) = *(_QWORD *)(a2 + 216);
          *(_OWORD *)(result + 200) = v57;
          *(_OWORD *)(result + 184) = v56;
          *(_OWORD *)(result + 168) = v55;
          *(_DWORD *)(result + 992) = 6;
        }
        else
        {
          memcpy((void *)(result + 168), (const void *)(a2 + 168), 0x12DuLL);
          v65 = *(_QWORD *)(a2 + 480);
          *(_QWORD *)(v2 + 472) = *(_QWORD *)(a2 + 472);
          *(_QWORD *)(v2 + 480) = v65;
          if (v65)
          {
            v66 = (unint64_t *)(v65 + 8);
            do
              v67 = __ldxr(v66);
            while (__stxr(v67 + 1, v66));
          }
          *(_OWORD *)(v2 + 488) = *(_OWORD *)(a2 + 488);
          v68 = *(_OWORD *)(a2 + 504);
          v69 = *(_OWORD *)(a2 + 520);
          v70 = *(_OWORD *)(a2 + 536);
          *(_QWORD *)(v2 + 552) = *(_QWORD *)(a2 + 552);
          *(_OWORD *)(v2 + 520) = v69;
          *(_OWORD *)(v2 + 536) = v70;
          *(_OWORD *)(v2 + 504) = v68;
          *(_OWORD *)(v2 + 560) = *(_OWORD *)(a2 + 560);
          *(_DWORD *)(v2 + 992) = 7;
          return v2;
        }
      }
      else
      {
        v33 = (void *)(result + 168);
        v34 = (const void *)(a2 + 168);
        if (v3 == 5)
        {
          memcpy(v33, v34, 0x12DuLL);
          *(_DWORD *)(v2 + 992) = 5;
        }
        else
        {
          memcpy(v33, v34, 0x12DuLL);
          *(_DWORD *)(v2 + 992) = 4;
        }
        return v2;
      }
    }
    else if (v3 > 1)
    {
      *(_DWORD *)(result + 992) = -1;
      *(_OWORD *)result = *(_OWORD *)a2;
      v45 = *(_OWORD *)(a2 + 16);
      v46 = *(_OWORD *)(a2 + 32);
      v47 = *(_OWORD *)(a2 + 48);
      *(_QWORD *)(result + 64) = *(_QWORD *)(a2 + 64);
      *(_OWORD *)(result + 32) = v46;
      *(_OWORD *)(result + 48) = v47;
      *(_OWORD *)(result + 16) = v45;
      v48 = *(_OWORD *)(a2 + 104);
      v49 = *(_OWORD *)(a2 + 120);
      v50 = *(_QWORD *)(a2 + 136);
      *(_OWORD *)(result + 88) = *(_OWORD *)(a2 + 88);
      *(_QWORD *)(result + 136) = v50;
      *(_OWORD *)(result + 120) = v49;
      *(_OWORD *)(result + 104) = v48;
      *(_OWORD *)(result + 72) = *(_OWORD *)(a2 + 72);
      v51 = *(_OWORD *)(a2 + 144);
      *(_BYTE *)(result + 160) = *(_BYTE *)(a2 + 160);
      *(_OWORD *)(result + 144) = v51;
      if (v3 == 2)
      {
        *(_OWORD *)(result + 168) = *(_OWORD *)(a2 + 168);
        v52 = *(_OWORD *)(a2 + 184);
        v53 = *(_OWORD *)(a2 + 200);
        v54 = *(_OWORD *)(a2 + 216);
        *(_OWORD *)(result + 232) = *(_OWORD *)(a2 + 232);
        *(_OWORD *)(result + 216) = v54;
        *(_OWORD *)(result + 200) = v53;
        *(_OWORD *)(result + 184) = v52;
        *(_DWORD *)(result + 992) = 2;
      }
      else
      {
        memcpy((void *)(result + 168), (const void *)(a2 + 168), 0x12DuLL);
        *(_DWORD *)(v2 + 992) = 3;
        return v2;
      }
    }
    else if (v3)
    {
      *(_DWORD *)(result + 992) = -1;
      *(_OWORD *)result = *(_OWORD *)a2;
      v5 = *(_OWORD *)(a2 + 16);
      v6 = *(_OWORD *)(a2 + 32);
      v7 = *(_OWORD *)(a2 + 48);
      *(_QWORD *)(result + 64) = *(_QWORD *)(a2 + 64);
      *(_OWORD *)(result + 32) = v6;
      *(_OWORD *)(result + 48) = v7;
      *(_OWORD *)(result + 16) = v5;
      v8 = *(_OWORD *)(a2 + 104);
      v9 = *(_OWORD *)(a2 + 120);
      v10 = *(_QWORD *)(a2 + 136);
      *(_OWORD *)(result + 88) = *(_OWORD *)(a2 + 88);
      *(_QWORD *)(result + 136) = v10;
      *(_OWORD *)(result + 120) = v9;
      *(_OWORD *)(result + 104) = v8;
      *(_OWORD *)(result + 72) = *(_OWORD *)(a2 + 72);
      v11 = *(_OWORD *)(a2 + 144);
      *(_BYTE *)(result + 160) = *(_BYTE *)(a2 + 160);
      *(_OWORD *)(result + 144) = v11;
      *(_DWORD *)(result + 992) = 1;
    }
    else
    {
      *(_DWORD *)(result + 992) = 0;
    }
    return result;
  }
  *(_DWORD *)(result + 992) = -1;
  *(_OWORD *)result = *(_OWORD *)a2;
  v12 = *(_OWORD *)(a2 + 16);
  v13 = *(_OWORD *)(a2 + 32);
  v14 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(result + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(result + 32) = v13;
  *(_OWORD *)(result + 48) = v14;
  *(_OWORD *)(result + 16) = v12;
  v15 = *(_OWORD *)(a2 + 104);
  v16 = *(_OWORD *)(a2 + 120);
  v17 = *(_QWORD *)(a2 + 136);
  *(_OWORD *)(result + 88) = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(result + 136) = v17;
  *(_OWORD *)(result + 120) = v16;
  *(_OWORD *)(result + 104) = v15;
  *(_OWORD *)(result + 72) = *(_OWORD *)(a2 + 72);
  v18 = *(_OWORD *)(a2 + 144);
  *(_BYTE *)(result + 160) = *(_BYTE *)(a2 + 160);
  *(_OWORD *)(result + 144) = v18;
  if (v3 > 0xB)
  {
    if (v3 <= 0xD)
    {
      if (v3 == 13)
      {
        v35 = *(_OWORD *)(a2 + 168);
        *(_OWORD *)(result + 184) = *(_OWORD *)(a2 + 184);
        *(_OWORD *)(result + 168) = v35;
        v36 = *(_OWORD *)(a2 + 200);
        v37 = *(_OWORD *)(a2 + 216);
        v38 = *(_OWORD *)(a2 + 232);
        *(_OWORD *)(result + 248) = *(_OWORD *)(a2 + 248);
        *(_OWORD *)(result + 232) = v38;
        *(_OWORD *)(result + 216) = v37;
        *(_OWORD *)(result + 200) = v36;
        v39 = *(_OWORD *)(a2 + 264);
        v40 = *(_OWORD *)(a2 + 280);
        v41 = *(_OWORD *)(a2 + 312);
        *(_OWORD *)(result + 296) = *(_OWORD *)(a2 + 296);
        *(_OWORD *)(result + 312) = v41;
        *(_OWORD *)(result + 264) = v39;
        *(_OWORD *)(result + 280) = v40;
        v42 = *(_OWORD *)(a2 + 328);
        v43 = *(_OWORD *)(a2 + 344);
        v44 = *(_OWORD *)(a2 + 376);
        *(_OWORD *)(result + 360) = *(_OWORD *)(a2 + 360);
        *(_OWORD *)(result + 376) = v44;
        *(_OWORD *)(result + 328) = v42;
        *(_OWORD *)(result + 344) = v43;
        *(_DWORD *)(result + 992) = 13;
      }
      else
      {
        memcpy((void *)(result + 168), (const void *)(a2 + 168), 0x12DuLL);
        *(_DWORD *)(v2 + 992) = 12;
        return v2;
      }
      return result;
    }
    v58 = (void *)(result + 168);
    if (v3 == 14)
    {
      memcpy(v58, (const void *)(a2 + 168), 0x2C9uLL);
      *(_DWORD *)(v2 + 992) = 14;
      return v2;
    }
    memcpy(v58, (const void *)(a2 + 168), 0x2C9uLL);
    *(_QWORD *)(v2 + 888) = *(_QWORD *)(a2 + 888);
    v71 = *(_QWORD *)(a2 + 896);
    *(_QWORD *)(v2 + 896) = v71;
    if (v71)
    {
      v72 = (unint64_t *)(v71 + 8);
      do
        v73 = __ldxr(v72);
      while (__stxr(v73 + 1, v72));
    }
    *(_OWORD *)(v2 + 904) = *(_OWORD *)(a2 + 904);
    v74 = *(_OWORD *)(a2 + 920);
    v75 = *(_OWORD *)(a2 + 936);
    v76 = *(_OWORD *)(a2 + 952);
    *(_QWORD *)(v2 + 968) = *(_QWORD *)(a2 + 968);
    *(_OWORD *)(v2 + 936) = v75;
    *(_OWORD *)(v2 + 952) = v76;
    *(_OWORD *)(v2 + 920) = v74;
    *(_OWORD *)(v2 + 976) = *(_OWORD *)(a2 + 976);
    v3 = 15;
LABEL_45:
    *(_DWORD *)(v2 + 992) = v3;
    return v2;
  }
  v19 = (void *)(result + 168);
  if (v3 > 9)
  {
    if (v3 == 10)
    {
      memcpy(v19, (const void *)(a2 + 168), 0x1E9uLL);
      *(_DWORD *)(v2 + 992) = 10;
      return v2;
    }
    else
    {
      memcpy(v19, (const void *)(a2 + 168), 0x1E9uLL);
      *(_QWORD *)(v2 + 664) = *(_QWORD *)(a2 + 664);
      v59 = *(_QWORD *)(a2 + 672);
      *(_QWORD *)(v2 + 672) = v59;
      if (v59)
      {
        v60 = (unint64_t *)(v59 + 8);
        do
          v61 = __ldxr(v60);
        while (__stxr(v61 + 1, v60));
      }
      *(_OWORD *)(v2 + 680) = *(_OWORD *)(a2 + 680);
      v62 = *(_OWORD *)(a2 + 696);
      v63 = *(_OWORD *)(a2 + 712);
      v64 = *(_OWORD *)(a2 + 728);
      *(_QWORD *)(v2 + 744) = *(_QWORD *)(a2 + 744);
      *(_OWORD *)(v2 + 712) = v63;
      *(_OWORD *)(v2 + 728) = v64;
      *(_OWORD *)(v2 + 696) = v62;
      *(_OWORD *)(v2 + 752) = *(_OWORD *)(a2 + 752);
      *(_DWORD *)(v2 + 992) = 11;
      return v2;
    }
  }
  else if (v3 == 9)
  {
    memcpy(v19, (const void *)(a2 + 168), 0x145uLL);
    v20 = *(_QWORD *)(a2 + 504);
    *(_QWORD *)(v2 + 496) = *(_QWORD *)(a2 + 496);
    *(_QWORD *)(v2 + 504) = v20;
    if (v20)
    {
      v21 = (unint64_t *)(v20 + 8);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    *(_OWORD *)(v2 + 512) = *(_OWORD *)(a2 + 512);
    v23 = *(_OWORD *)(a2 + 528);
    v24 = *(_OWORD *)(a2 + 544);
    v25 = *(_OWORD *)(a2 + 560);
    *(_QWORD *)(v2 + 576) = *(_QWORD *)(a2 + 576);
    *(_OWORD *)(v2 + 544) = v24;
    *(_OWORD *)(v2 + 560) = v25;
    *(_OWORD *)(v2 + 528) = v23;
    *(_OWORD *)(v2 + 584) = *(_OWORD *)(a2 + 584);
    *(_DWORD *)(v2 + 992) = 9;
    return v2;
  }
  else
  {
    memcpy(v19, (const void *)(a2 + 168), 0x145uLL);
    *(_DWORD *)(v2 + 992) = 8;
    return v2;
  }
}

void sub_20E9733B8(float64x2_t *a1, double *a2)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  _BOOL4 v13;
  double v15;
  long double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  float64_t v28;
  double v29;
  double v30;
  double v31;
  double v32;
  float64x2_t v33;

  v4 = (a1[2].f64[1] - a1[3].f64[1]) * 0.5;
  *a2 = v4;
  v5 = (a1[3].f64[0] - a1[1].f64[0]) * 0.5;
  a2[1] = v5;
  v6 = (a1->f64[1] - a1[1].f64[1]) * 0.5;
  a2[2] = v6;
  v7 = a1->f64[0];
  v8 = a1[2].f64[0];
  v9 = a1[4].f64[0];
  v10 = -1.0;
  v11 = (a1->f64[0] + v8 + v9 + -1.0) * 0.5;
  v12 = v4 * v4 + v5 * v5 + v6 * v6;
  if (v11 >= -1.0 || v11 + 1.0 <= -0.00001)
  {
    v13 = v11 > 1.0;
    if (v11 + -1.0 >= 0.00001)
      v13 = 0;
    if (v11 > 0.99 || v13)
    {
      v15 = v12 * (v12 * (v12 * 5.0 / 112.0 + 0.075) + 0.166666667) + 1.0;
      *a2 = v4 * v15;
      a2[1] = v5 * v15;
LABEL_12:
      a2[2] = v6 * v15;
      return;
    }
    if (v11 > -0.99)
    {
      v15 = acos(v11) / sqrt(v12);
      *a2 = v4 * v15;
      a2[1] = v5 * v15;
      goto LABEL_12;
    }
    v10 = (a1->f64[0] + v8 + v9 + -1.0) * 0.5;
  }
  v16 = asin(sqrt(v12));
  v17 = (3.14159265 - v16) * (3.14159265 - v16) / (1.0 - v10);
  v18 = (v7 - v10) * v17;
  v19 = (v8 - v10) * v17;
  v20 = (v9 - v10) * v17;
  if (v18 <= v19)
  {
    v25 = v17 * 0.5;
    if (v19 <= v20)
    {
      v32 = sqrt(v20);
      if (v6 < 0.0)
        v32 = -v32;
      a2[2] = v32;
      v33.f64[0] = a1[1].f64[0];
      v33.f64[1] = a1[2].f64[1];
      *(float64x2_t *)a2 = vmulq_n_f64(vmulq_n_f64(vaddq_f64(a1[3], v33), v25), 1.0 / v32);
    }
    else
    {
      v26 = sqrt(v19);
      if (v5 < 0.0)
        v26 = -v26;
      a2[1] = v26;
      v27 = 1.0 / v26;
      v28 = a1[3].f64[1] + a1[2].f64[1];
      *a2 = v27 * (v25 * (a1[1].f64[1] + a1->f64[1]));
      a2[2] = v27 * (v25 * v28);
    }
  }
  else
  {
    v21 = v17 * 0.5;
    v22 = v21 * (a1[3].f64[0] + a1[1].f64[0]);
    if (v18 <= v20)
    {
      v29 = sqrt(v20);
      if (v6 < 0.0)
        v29 = -v29;
      a2[2] = v29;
      v30 = 1.0 / v29;
      v31 = v30 * (v21 * (a1[3].f64[1] + a1[2].f64[1]));
      *a2 = v30 * v22;
      a2[1] = v31;
    }
    else
    {
      v23 = sqrt(v18);
      if (v4 < 0.0)
        v23 = -v23;
      *a2 = v23;
      v24 = 1.0 / v23;
      a2[1] = v24 * (v21 * (a1[1].f64[1] + a1->f64[1]));
      a2[2] = v24 * v22;
    }
  }
}

uint64_t sub_20E9736C8(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(char *)(result + 31) < 0)
  {
    operator delete(*(void **)(result + 8));
    return v1;
  }
  return result;
}

void sub_20E973708(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B3178;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20E973718(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B3178;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E973748(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void sub_20E973760(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x212BC6398);
}

_DWORD *sub_20E9737A0(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C9B3150[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

uint64_t sub_20E973890(uint64_t a1)
{
  if (*(char *)(a1 + 143) < 0)
  {
    operator delete(*(void **)(a1 + 120));
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 47) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 24));
  return a1;
}

uint64_t sub_20E9738E8@<X0>(const __CFData **a1@<X0>, CFTypeRef *a2@<X1>, _QWORD *a3@<X8>)
{
  void *v5;
  const std::error_category *v6;
  const void *v7;
  std::__shared_weak_count *cat;
  unint64_t *v9;
  unint64_t v10;
  UInt8 *v11;
  char *v13;
  const std::error_category *v14;
  CFErrorRef v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  _QWORD *v19;
  _QWORD v20[2];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  __int128 v28;
  void *__p;
  __int128 v30;
  UInt8 *v31;
  __int128 v32;
  CFErrorRef v33;
  std::__shared_weak_count *v34;
  std::error_condition v35;

  v20[0] = 0;
  v20[1] = 0;
  v19 = v20;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0;
  v26 = 3;
  if (sub_20E9DA7E0(*a1, (uint64_t)&v19) < 2)
  {
    sub_20E9DDEB8((uint64_t)&v19, &v31);
    if (v31 != (UInt8 *)v32)
    {
      sub_20EA5EE78(v31, v32 - (_QWORD)v31, a3);
      v11 = v31;
      if (!v31)
        return sub_20E8FB5B8((uint64_t)&v19);
LABEL_19:
      *(_QWORD *)&v32 = v11;
      operator delete(v11);
      return sub_20E8FB5B8((uint64_t)&v19);
    }
    __p = operator new(0x20uLL);
    v30 = xmmword_2102DB480;
    strcpy((char *)__p, "No points found in the map");
    v13 = (char *)operator new(0x78uLL);
    v27 = (uint64_t)v13;
    v28 = xmmword_2102DD650;
    strcpy(v13, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/MapEditInterface.cpp");
    if (a2)
    {
      v14 = std::generic_category();
      *(_QWORD *)&v35.__val_ = 22;
      v35.__cat_ = v14;
      sub_20EA67538(&v35, (uint64_t)&__p, &v33);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v15 = v33;
      if (v33)
        CFRetain(v33);
      *a2 = v15;
      v16 = v34;
      if (v34)
      {
        p_shared_owners = (unint64_t *)&v34->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      if ((SHIBYTE(v28) & 0x80000000) == 0)
      {
LABEL_34:
        if (SHIBYTE(v30) < 0)
        {
          operator delete(__p);
          *a3 = 0;
          a3[1] = 0;
          v11 = v31;
          if (!v31)
            return sub_20E8FB5B8((uint64_t)&v19);
        }
        else
        {
          *a3 = 0;
          a3[1] = 0;
          v11 = v31;
          if (!v31)
            return sub_20E8FB5B8((uint64_t)&v19);
        }
        goto LABEL_19;
      }
      v13 = (char *)v27;
    }
    operator delete(v13);
    goto LABEL_34;
  }
  v31 = (UInt8 *)operator new(0x20uLL);
  v32 = xmmword_2102DBFE0;
  strcpy((char *)v31, "Unable to deserialize map");
  v5 = operator new(0x78uLL);
  __p = v5;
  v30 = xmmword_2102DD650;
  strcpy((char *)v5, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/MapEditInterface.cpp");
  if (!a2)
  {
LABEL_13:
    operator delete(v5);
    goto LABEL_14;
  }
  v6 = std::generic_category();
  v27 = 5;
  *(_QWORD *)&v28 = v6;
  sub_20EA67538((const std::error_condition *)&v27, (uint64_t)&v31, (CFErrorRef *)&v35);
  if (*a2)
    CFRelease(*a2);
  *a2 = 0;
  v7 = *(const void **)&v35.__val_;
  if (*(_QWORD *)&v35.__val_)
    CFRetain(*(CFTypeRef *)&v35.__val_);
  *a2 = v7;
  cat = (std::__shared_weak_count *)v35.__cat_;
  if (v35.__cat_)
  {
    v9 = (unint64_t *)&v35.__cat_[1];
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))cat->__on_zero_shared)(cat);
      std::__shared_weak_count::__release_weak(cat);
      if ((SHIBYTE(v30) & 0x80000000) == 0)
        goto LABEL_14;
      goto LABEL_12;
    }
  }
  if (SHIBYTE(v30) < 0)
  {
LABEL_12:
    v5 = __p;
    goto LABEL_13;
  }
LABEL_14:
  if (SHIBYTE(v32) < 0)
    operator delete(v31);
  *a3 = 0;
  a3[1] = 0;
  return sub_20E8FB5B8((uint64_t)&v19);
}

void sub_20E973C38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  uint64_t v31;
  void *v33;

  operator delete(v30);
  if (a30 < 0)
    operator delete(__p);
  v33 = *(void **)(v31 - 104);
  if (v33)
  {
    *(_QWORD *)(v31 - 96) = v33;
    operator delete(v33);
    sub_20E8FB5B8((uint64_t)&a9);
    _Unwind_Resume(a1);
  }
  sub_20E8FB5B8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E973CF4(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24C9B3200;
  v2 = (uint64_t)(a1 + 1);
  sub_21021A3F8((uint64_t)(a1 + 423));
  sub_20EBCC1EC(v2);
  return a1;
}

void sub_20E973D34(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_24C9B3200;
  v1 = (uint64_t)(a1 + 1);
  sub_21021A3F8((uint64_t)(a1 + 423));
  sub_20EBCC1EC(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20E973D84(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _BYTE *v6;
  uint64_t *v7;
  uint64_t *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  const char *v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  const char *v18;
  unsigned __int8 v19;
  const char *v20;
  size_t v21;
  void *v22;
  unint64_t v23;
  const char *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  void *p_p;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  size_t v32;
  std::__shared_weak_count_vtbl *v33;
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  void *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  unsigned __int8 v67;
  const char *v68;
  size_t v69;
  void *v70;
  unint64_t v71;
  const char *v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  NSObject *v79;
  size_t v80;
  std::__shared_weak_count_vtbl *v81;
  std::__shared_weak_count *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  void *v111;
  unint64_t *v112;
  uint64_t *v113;
  uint64_t *v114;
  int v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  size_t v119;
  const char *v120;
  int v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  size_t v125;
  const char *v126;
  unsigned __int8 v127;
  const char *v128;
  size_t v129;
  void *v130;
  unint64_t v131;
  const char *v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  NSObject *v139;
  size_t v140;
  std::__shared_weak_count_vtbl *v141;
  std::__shared_weak_count *v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  unint64_t v146;
  void *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  uint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  void *v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  unsigned __int8 v175;
  const char *v176;
  size_t v177;
  void *v178;
  unint64_t v179;
  const char *v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  void *v184;
  uint64_t v185;
  uint64_t v186;
  NSObject *v187;
  size_t v188;
  std::__shared_weak_count_vtbl *v189;
  std::__shared_weak_count *v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  unint64_t v194;
  void *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  uint64_t v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  void *v219;
  unint64_t *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t *v229;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v231;
  int v232;
  const char *v233;
  int v234;
  const char *v235;
  uint64_t v236;
  std::__shared_weak_count *v237;
  uint64_t v238;
  void *object;
  void *v240[2];
  __int128 v241;
  void *__p;
  size_t v243;
  unint64_t v244;
  char v245;
  uint64_t v246;
  _QWORD v247[2];

  sub_20E8A1408((uint64_t)a3, a1);
  v6 = a3 + 304;
  if (*(char *)(a1 + 2455) < 0)
  {
    sub_20E860C04(v6, *(void **)(a1 + 2432), *(_QWORD *)(a1 + 2440));
  }
  else
  {
    *(_OWORD *)v6 = *(_OWORD *)(a1 + 2432);
    a3[306] = *(_QWORD *)(a1 + 2448);
  }
  v7 = *(uint64_t **)(a2 + 10704);
  v8 = *(uint64_t **)(a2 + 10712);
  if (v7 == v8)
    goto LABEL_181;
  if ((char *)v8 - (char *)v7 == 72)
  {
    a3[15] = *v7;
    a3[16] = v7[1];
    a3[17] = v7[2];
    a3[18] = v7[3];
    a3[19] = v7[4];
    a3[20] = v7[5];
    a3[21] = v7[6];
    a3[22] = v7[7];
    a3[23] = v7[8];
    sub_20E975C18(&v238);
    if (**(int **)(v238 + 56) > 3)
      goto LABEL_181;
    v9 = *(unsigned __int8 *)(v238 + 72);
    v10 = sub_20E8C31DC(v238, "OSLogSurrogateAppender", 1, 0);
    v11 = v10;
    if (!v9 && !v10)
      goto LABEL_181;
    v229 = &v238;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v231 = std::chrono::system_clock::now().__d_.__rep_;
    v232 = 3;
    v233 = "unknown file";
    v234 = 214;
    v236 = 0;
    v237 = 0;
    v235 = "unknown function";
    v225 = v238;
    if (*(char *)(v238 + 39) < 0)
    {
      v13 = *(const char **)(v238 + 16);
      v12 = *(_QWORD *)(v238 + 24);
    }
    else
    {
      v12 = *(unsigned __int8 *)(v238 + 39);
      v13 = (const char *)(v238 + 16);
    }
    v221 = v238 + 16;
    v19 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
      if ((_BYTE)v241 && SHIBYTE(v240[1]) < 0)
        operator delete(object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v20 = byte_254A4A4F8;
    else
      v20 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v21 = byte_254A4A4F8[23];
    else
      v21 = *(_QWORD *)&byte_254A4A4F8[8];
    object = os_log_create(v20, v13);
    v22 = v240;
    if (v21 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v21 >= 0x17)
    {
      v23 = v11;
      v24 = v13;
      v25 = v9;
      v26 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v21 | 7) != 0x17)
        v26 = v21 | 7;
      v27 = v26 + 1;
      v22 = operator new(v26 + 1);
      v240[1] = (void *)v21;
      *(_QWORD *)&v241 = v27 | 0x8000000000000000;
      v240[0] = v22;
      v9 = v25;
      v13 = v24;
      v11 = v23;
    }
    else
    {
      BYTE7(v241) = v21;
      if (!v21)
      {
LABEL_32:
        *((_BYTE *)v22 + v21) = 0;
        BYTE8(v241) = 1;
        p_p = &__p;
        if (v12 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v12 >= 0x17)
        {
          v29 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v12 | 7) != 0x17)
            v29 = v12 | 7;
          v30 = v29 + 1;
          p_p = operator new(v29 + 1);
          v243 = v12;
          v244 = v30 | 0x8000000000000000;
          __p = p_p;
        }
        else
        {
          HIBYTE(v244) = v12;
          if (!v12)
          {
LABEL_40:
            *((_BYTE *)p_p + v12) = 0;
            v245 = 1;
            v31 = object;
            if (SHIBYTE(v244) < 0)
              operator delete(__p);
            if (BYTE8(v241) && SBYTE7(v241) < 0)
              operator delete(v240[0]);
            if (object)
              os_release(object);
            if (v11 && *(_QWORD *)(v11 + 24))
            {
              v32 = _os_log_pack_size();
              v33 = (std::__shared_weak_count_vtbl *)operator new(v32, (std::align_val_t)8uLL);
              v34 = (std::__shared_weak_count *)operator new();
              v35 = v34;
              v34->__shared_owners_ = 0;
              p_shared_owners = (unint64_t *)&v34->__shared_owners_;
              v34->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v34->__shared_weak_owners_ = 0;
              v34[1].__vftable = v33;
              object = v33;
              v240[0] = v33;
              v240[1] = v34;
              do
                v37 = __ldxr(p_shared_owners);
              while (__stxr(v37 + 1, p_shared_owners));
              v241 = 0uLL;
              __p = 0;
              do
                v38 = __ldaxr(p_shared_owners);
              while (__stlxr(v38 - 1, p_shared_owners));
              if (!v38)
              {
                ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
                std::__shared_weak_count::__release_weak(v35);
              }
              v39 = object;
              *(_WORD *)_os_log_pack_fill() = 0;
              v40 = operator new();
              v41 = *(unsigned __int8 *)(v225 + 39);
              v42 = v221;
              if ((v41 & 0x80u) != 0)
              {
                v42 = *(_QWORD *)(v225 + 16);
                v41 = *(_QWORD *)(v225 + 24);
              }
              *(_QWORD *)v40 = v39;
              *(_OWORD *)(v40 + 8) = *(_OWORD *)v240;
              v240[0] = 0;
              v240[1] = 0;
              *(_OWORD *)(v40 + 24) = v241;
              v241 = 0uLL;
              *(_QWORD *)(v40 + 40) = v42;
              *(_QWORD *)(v40 + 48) = v41;
              *(_BYTE *)(v40 + 56) = 1;
              v246 = 0;
              v247[0] = v40;
              (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v11 + 24) + 40))(*(_QWORD *)(v11 + 24), v247);
              v43 = v247[0];
              v247[0] = 0;
              if (v43)
              {
                v44 = *(std::__shared_weak_count **)(v43 + 32);
                if (v44)
                {
                  v45 = (unint64_t *)&v44->__shared_owners_;
                  do
                    v46 = __ldaxr(v45);
                  while (__stlxr(v46 - 1, v45));
                  if (!v46)
                  {
                    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
                    std::__shared_weak_count::__release_weak(v44);
                  }
                }
                v47 = *(std::__shared_weak_count **)(v43 + 16);
                if (v47)
                {
                  v48 = (unint64_t *)&v47->__shared_owners_;
                  do
                    v49 = __ldaxr(v48);
                  while (__stlxr(v49 - 1, v48));
                  if (!v49)
                  {
                    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                    std::__shared_weak_count::__release_weak(v47);
                  }
                }
                MEMORY[0x212BC6398](v43, 0x10F0C40B62ED6C6);
                v50 = v246;
                v246 = 0;
                if (v50)
                {
                  v51 = *(std::__shared_weak_count **)(v50 + 32);
                  if (v51)
                  {
                    v52 = (unint64_t *)&v51->__shared_owners_;
                    do
                      v53 = __ldaxr(v52);
                    while (__stlxr(v53 - 1, v52));
                    if (!v53)
                    {
                      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                      std::__shared_weak_count::__release_weak(v51);
                    }
                  }
                  v54 = *(std::__shared_weak_count **)(v50 + 16);
                  if (v54)
                  {
                    v55 = (unint64_t *)&v54->__shared_owners_;
                    do
                      v56 = __ldaxr(v55);
                    while (__stlxr(v56 - 1, v55));
                    if (!v56)
                    {
                      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                      std::__shared_weak_count::__release_weak(v54);
                    }
                  }
                  MEMORY[0x212BC6398](v50, 0x10F0C40B62ED6C6);
                }
              }
              v57 = (std::__shared_weak_count *)*((_QWORD *)&v241 + 1);
              if (*((_QWORD *)&v241 + 1))
              {
                v58 = (unint64_t *)(*((_QWORD *)&v241 + 1) + 8);
                do
                  v59 = __ldaxr(v58);
                while (__stlxr(v59 - 1, v58));
                if (!v59)
                {
                  ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                  std::__shared_weak_count::__release_weak(v57);
                }
              }
              v60 = (std::__shared_weak_count *)v240[1];
              if (v240[1])
              {
                v61 = (unint64_t *)((char *)v240[1] + 8);
                do
                  v62 = __ldaxr(v61);
                while (__stlxr(v62 - 1, v61));
                if (!v62)
                {
                  ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                  std::__shared_weak_count::__release_weak(v60);
                }
              }
            }
            else
            {
              os_log_type_enabled(v31, OS_LOG_TYPE_INFO);
              LOWORD(object) = 0;
              v63 = (void *)_os_log_send_and_compose_impl();
              if (v63)
                free(v63);
            }
            if (v9)
            {
              sub_20E863570((uint64_t)&v229);
            }
            sub_20E863570((uint64_t)&v229);
            v64 = v237;
            if (v237)
            {
              v65 = (unint64_t *)&v237->__shared_owners_;
              do
                v66 = __ldaxr(v65);
              while (__stlxr(v66 - 1, v65));
              goto LABEL_179;
            }
            goto LABEL_181;
          }
        }
        memmove(p_p, v13, v12);
        goto LABEL_40;
      }
    }
    memmove(v22, v20, v21);
    goto LABEL_32;
  }
  sub_20E975C18(&v238);
  if (**(int **)(v238 + 56) > 4)
    goto LABEL_181;
  v14 = *(unsigned __int8 *)(v238 + 72);
  v15 = sub_20E8C31DC(v238, "OSLogSurrogateAppender", 1, 0);
  v16 = v15;
  if (!v14 && !v15)
    goto LABEL_181;
  v229 = &v238;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v231 = std::chrono::system_clock::now().__d_.__rep_;
  v232 = 4;
  v233 = "unknown file";
  v234 = 218;
  v236 = 0;
  v237 = 0;
  v235 = "unknown function";
  v226 = v238;
  if (*(char *)(v238 + 39) < 0)
  {
    v18 = *(const char **)(v238 + 16);
    v17 = *(_QWORD *)(v238 + 24);
  }
  else
  {
    v17 = *(unsigned __int8 *)(v238 + 39);
    v18 = (const char *)(v238 + 16);
  }
  v222 = v238 + 16;
  v67 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v67 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)&object);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
    if ((_BYTE)v241 && SHIBYTE(v240[1]) < 0)
      operator delete(object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v68 = byte_254A4A4F8;
  else
    v68 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v69 = byte_254A4A4F8[23];
  else
    v69 = *(_QWORD *)&byte_254A4A4F8[8];
  object = os_log_create(v68, v18);
  v70 = v240;
  if (v69 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v69 >= 0x17)
  {
    v71 = v16;
    v72 = v18;
    v73 = v14;
    v74 = (v69 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v69 | 7) != 0x17)
      v74 = v69 | 7;
    v75 = v74 + 1;
    v70 = operator new(v74 + 1);
    v240[1] = (void *)v69;
    *(_QWORD *)&v241 = v75 | 0x8000000000000000;
    v240[0] = v70;
    v14 = v73;
    v18 = v72;
    v16 = v71;
    goto LABEL_113;
  }
  BYTE7(v241) = v69;
  if (v69)
LABEL_113:
    memmove(v70, v68, v69);
  *((_BYTE *)v70 + v69) = 0;
  BYTE8(v241) = 1;
  v76 = &__p;
  if (v17 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v17 >= 0x17)
  {
    v77 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v77 = v17 | 7;
    v78 = v77 + 1;
    v76 = operator new(v77 + 1);
    v243 = v17;
    v244 = v78 | 0x8000000000000000;
    __p = v76;
    goto LABEL_121;
  }
  HIBYTE(v244) = v17;
  if (v17)
LABEL_121:
    memmove(v76, v18, v17);
  *((_BYTE *)v76 + v17) = 0;
  v245 = 1;
  v79 = object;
  if (SHIBYTE(v244) < 0)
    operator delete(__p);
  if (BYTE8(v241) && SBYTE7(v241) < 0)
    operator delete(v240[0]);
  if (object)
    os_release(object);
  if (v16 && *(_QWORD *)(v16 + 24))
  {
    v80 = _os_log_pack_size();
    v81 = (std::__shared_weak_count_vtbl *)operator new(v80, (std::align_val_t)8uLL);
    v82 = (std::__shared_weak_count *)operator new();
    v83 = v82;
    v82->__shared_owners_ = 0;
    v84 = (unint64_t *)&v82->__shared_owners_;
    v82->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v82->__shared_weak_owners_ = 0;
    v82[1].__vftable = v81;
    object = v81;
    v240[0] = v81;
    v240[1] = v82;
    do
      v85 = __ldxr(v84);
    while (__stxr(v85 + 1, v84));
    v241 = 0uLL;
    __p = 0;
    do
      v86 = __ldaxr(v84);
    while (__stlxr(v86 - 1, v84));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v83);
    }
    v87 = object;
    *(_WORD *)_os_log_pack_fill() = 0;
    v88 = operator new();
    v89 = *(unsigned __int8 *)(v226 + 39);
    v90 = v222;
    if ((v89 & 0x80u) != 0)
    {
      v90 = *(_QWORD *)(v226 + 16);
      v89 = *(_QWORD *)(v226 + 24);
    }
    *(_QWORD *)v88 = v87;
    *(_OWORD *)(v88 + 8) = *(_OWORD *)v240;
    v240[0] = 0;
    v240[1] = 0;
    *(_OWORD *)(v88 + 24) = v241;
    v241 = 0uLL;
    *(_QWORD *)(v88 + 40) = v90;
    *(_QWORD *)(v88 + 48) = v89;
    *(_BYTE *)(v88 + 56) = 16;
    v246 = 0;
    v247[0] = v88;
    (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v16 + 24) + 40))(*(_QWORD *)(v16 + 24), v247);
    v91 = v247[0];
    v247[0] = 0;
    if (v91)
    {
      v92 = *(std::__shared_weak_count **)(v91 + 32);
      if (v92)
      {
        v93 = (unint64_t *)&v92->__shared_owners_;
        do
          v94 = __ldaxr(v93);
        while (__stlxr(v94 - 1, v93));
        if (!v94)
        {
          ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
          std::__shared_weak_count::__release_weak(v92);
        }
      }
      v95 = *(std::__shared_weak_count **)(v91 + 16);
      if (v95)
      {
        v96 = (unint64_t *)&v95->__shared_owners_;
        do
          v97 = __ldaxr(v96);
        while (__stlxr(v97 - 1, v96));
        if (!v97)
        {
          ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
          std::__shared_weak_count::__release_weak(v95);
        }
      }
      MEMORY[0x212BC6398](v91, 0x10F0C40B62ED6C6);
      v98 = v246;
      v246 = 0;
      if (v98)
      {
        v99 = *(std::__shared_weak_count **)(v98 + 32);
        if (v99)
        {
          v100 = (unint64_t *)&v99->__shared_owners_;
          do
            v101 = __ldaxr(v100);
          while (__stlxr(v101 - 1, v100));
          if (!v101)
          {
            ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
            std::__shared_weak_count::__release_weak(v99);
          }
        }
        v102 = *(std::__shared_weak_count **)(v98 + 16);
        if (v102)
        {
          v103 = (unint64_t *)&v102->__shared_owners_;
          do
            v104 = __ldaxr(v103);
          while (__stlxr(v104 - 1, v103));
          if (!v104)
          {
            ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
            std::__shared_weak_count::__release_weak(v102);
          }
        }
        MEMORY[0x212BC6398](v98, 0x10F0C40B62ED6C6);
      }
    }
    v105 = (std::__shared_weak_count *)*((_QWORD *)&v241 + 1);
    if (*((_QWORD *)&v241 + 1))
    {
      v106 = (unint64_t *)(*((_QWORD *)&v241 + 1) + 8);
      do
        v107 = __ldaxr(v106);
      while (__stlxr(v107 - 1, v106));
      if (!v107)
      {
        ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
        std::__shared_weak_count::__release_weak(v105);
      }
    }
    v108 = (std::__shared_weak_count *)v240[1];
    if (v240[1])
    {
      v109 = (unint64_t *)((char *)v240[1] + 8);
      do
        v110 = __ldaxr(v109);
      while (__stlxr(v110 - 1, v109));
      if (!v110)
      {
        ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
        std::__shared_weak_count::__release_weak(v108);
      }
    }
  }
  else
  {
    os_log_type_enabled(v79, OS_LOG_TYPE_ERROR);
    LOWORD(object) = 0;
    v111 = (void *)_os_log_send_and_compose_impl();
    if (v111)
      free(v111);
  }
  if (v14)
  {
    sub_20E863570((uint64_t)&v229);
  }
  sub_20E863570((uint64_t)&v229);
  v64 = v237;
  if (v237)
  {
    v112 = (unint64_t *)&v237->__shared_owners_;
    do
      v66 = __ldaxr(v112);
    while (__stlxr(v66 - 1, v112));
LABEL_179:
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
LABEL_181:
  v113 = *(uint64_t **)(a2 + 10728);
  v114 = *(uint64_t **)(a2 + 10736);
  if (v113 == v114)
    goto LABEL_358;
  if ((char *)v114 - (char *)v113 == 72)
  {
    a3[24] = *v113;
    a3[25] = v113[1];
    a3[26] = v113[2];
    a3[27] = v113[3];
    a3[28] = v113[4];
    a3[29] = v113[5];
    a3[30] = v113[6];
    a3[31] = v113[7];
    a3[32] = v113[8];
    sub_20E975C18(&v238);
    if (**(int **)(v238 + 56) > 3)
      goto LABEL_358;
    v115 = *(unsigned __int8 *)(v238 + 72);
    v116 = sub_20E8C31DC(v238, "OSLogSurrogateAppender", 1, 0);
    v117 = v116;
    if (!v115 && !v116)
      goto LABEL_358;
    v229 = &v238;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v231 = std::chrono::system_clock::now().__d_.__rep_;
    v232 = 3;
    v233 = "unknown file";
    v234 = 233;
    v236 = 0;
    v237 = 0;
    v235 = "unknown function";
    v118 = *v229;
    v227 = *v229;
    if (*(char *)(*v229 + 39) < 0)
    {
      v120 = *(const char **)(v118 + 16);
      v119 = *(_QWORD *)(v118 + 24);
    }
    else
    {
      v119 = *(unsigned __int8 *)(*v229 + 39);
      v120 = (const char *)(*v229 + 16);
    }
    v223 = *v229 + 16;
    v127 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v127 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
      if ((_BYTE)v241 && SHIBYTE(v240[1]) < 0)
        operator delete(object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v128 = byte_254A4A4F8;
    else
      v128 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v129 = byte_254A4A4F8[23];
    else
      v129 = *(_QWORD *)&byte_254A4A4F8[8];
    object = os_log_create(v128, v120);
    v130 = v240;
    if (v129 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v129 >= 0x17)
    {
      v131 = v117;
      v132 = v120;
      v133 = v115;
      v134 = (v129 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v129 | 7) != 0x17)
        v134 = v129 | 7;
      v135 = v134 + 1;
      v130 = operator new(v134 + 1);
      v240[1] = (void *)v129;
      *(_QWORD *)&v241 = v135 | 0x8000000000000000;
      v240[0] = v130;
      v115 = v133;
      v120 = v132;
      v117 = v131;
    }
    else
    {
      BYTE7(v241) = v129;
      if (!v129)
      {
LABEL_209:
        *((_BYTE *)v130 + v129) = 0;
        BYTE8(v241) = 1;
        v136 = &__p;
        if (v119 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v119 >= 0x17)
        {
          v137 = (v119 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v119 | 7) != 0x17)
            v137 = v119 | 7;
          v138 = v137 + 1;
          v136 = operator new(v137 + 1);
          v243 = v119;
          v244 = v138 | 0x8000000000000000;
          __p = v136;
        }
        else
        {
          HIBYTE(v244) = v119;
          if (!v119)
          {
LABEL_217:
            *((_BYTE *)v136 + v119) = 0;
            v245 = 1;
            v139 = object;
            if (SHIBYTE(v244) < 0)
              operator delete(__p);
            if (BYTE8(v241) && SBYTE7(v241) < 0)
              operator delete(v240[0]);
            if (object)
              os_release(object);
            if (v117 && *(_QWORD *)(v117 + 24))
            {
              v140 = _os_log_pack_size();
              v141 = (std::__shared_weak_count_vtbl *)operator new(v140, (std::align_val_t)8uLL);
              v142 = (std::__shared_weak_count *)operator new();
              v143 = v142;
              v142->__shared_owners_ = 0;
              v144 = (unint64_t *)&v142->__shared_owners_;
              v142->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v142->__shared_weak_owners_ = 0;
              v142[1].__vftable = v141;
              object = v141;
              v240[0] = v141;
              v240[1] = v142;
              do
                v145 = __ldxr(v144);
              while (__stxr(v145 + 1, v144));
              v241 = 0uLL;
              __p = 0;
              do
                v146 = __ldaxr(v144);
              while (__stlxr(v146 - 1, v144));
              if (!v146)
              {
                ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
                std::__shared_weak_count::__release_weak(v143);
              }
              v147 = object;
              *(_WORD *)_os_log_pack_fill() = 0;
              v148 = operator new();
              v149 = *(unsigned __int8 *)(v227 + 39);
              v150 = v223;
              if ((v149 & 0x80u) != 0)
              {
                v150 = *(_QWORD *)(v227 + 16);
                v149 = *(_QWORD *)(v227 + 24);
              }
              *(_QWORD *)v148 = v147;
              *(_OWORD *)(v148 + 8) = *(_OWORD *)v240;
              v240[0] = 0;
              v240[1] = 0;
              *(_OWORD *)(v148 + 24) = v241;
              v241 = 0uLL;
              *(_QWORD *)(v148 + 40) = v150;
              *(_QWORD *)(v148 + 48) = v149;
              *(_BYTE *)(v148 + 56) = 1;
              v246 = 0;
              v247[0] = v148;
              (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v117 + 24) + 40))(*(_QWORD *)(v117 + 24), v247);
              v151 = v247[0];
              v247[0] = 0;
              if (v151)
              {
                v152 = *(std::__shared_weak_count **)(v151 + 32);
                if (v152)
                {
                  v153 = (unint64_t *)&v152->__shared_owners_;
                  do
                    v154 = __ldaxr(v153);
                  while (__stlxr(v154 - 1, v153));
                  if (!v154)
                  {
                    ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
                    std::__shared_weak_count::__release_weak(v152);
                  }
                }
                v155 = *(std::__shared_weak_count **)(v151 + 16);
                if (v155)
                {
                  v156 = (unint64_t *)&v155->__shared_owners_;
                  do
                    v157 = __ldaxr(v156);
                  while (__stlxr(v157 - 1, v156));
                  if (!v157)
                  {
                    ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
                    std::__shared_weak_count::__release_weak(v155);
                  }
                }
                MEMORY[0x212BC6398](v151, 0x10F0C40B62ED6C6);
                v158 = v246;
                v246 = 0;
                if (v158)
                {
                  v159 = *(std::__shared_weak_count **)(v158 + 32);
                  if (v159)
                  {
                    v160 = (unint64_t *)&v159->__shared_owners_;
                    do
                      v161 = __ldaxr(v160);
                    while (__stlxr(v161 - 1, v160));
                    if (!v161)
                    {
                      ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
                      std::__shared_weak_count::__release_weak(v159);
                    }
                  }
                  v162 = *(std::__shared_weak_count **)(v158 + 16);
                  if (v162)
                  {
                    v163 = (unint64_t *)&v162->__shared_owners_;
                    do
                      v164 = __ldaxr(v163);
                    while (__stlxr(v164 - 1, v163));
                    if (!v164)
                    {
                      ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
                      std::__shared_weak_count::__release_weak(v162);
                    }
                  }
                  MEMORY[0x212BC6398](v158, 0x10F0C40B62ED6C6);
                }
              }
              v165 = (std::__shared_weak_count *)*((_QWORD *)&v241 + 1);
              if (*((_QWORD *)&v241 + 1))
              {
                v166 = (unint64_t *)(*((_QWORD *)&v241 + 1) + 8);
                do
                  v167 = __ldaxr(v166);
                while (__stlxr(v167 - 1, v166));
                if (!v167)
                {
                  ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
                  std::__shared_weak_count::__release_weak(v165);
                }
              }
              v168 = (std::__shared_weak_count *)v240[1];
              if (v240[1])
              {
                v169 = (unint64_t *)((char *)v240[1] + 8);
                do
                  v170 = __ldaxr(v169);
                while (__stlxr(v170 - 1, v169));
                if (!v170)
                {
                  ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
                  std::__shared_weak_count::__release_weak(v168);
                }
              }
            }
            else
            {
              os_log_type_enabled(v139, OS_LOG_TYPE_INFO);
              LOWORD(object) = 0;
              v171 = (void *)_os_log_send_and_compose_impl();
              if (v171)
                free(v171);
            }
            if (v115)
            {
              sub_20E863570((uint64_t)&v229);
            }
            sub_20E863570((uint64_t)&v229);
            v172 = v237;
            if (v237)
            {
              v173 = (unint64_t *)&v237->__shared_owners_;
              do
                v174 = __ldaxr(v173);
              while (__stlxr(v174 - 1, v173));
              goto LABEL_356;
            }
            goto LABEL_358;
          }
        }
        memmove(v136, v120, v119);
        goto LABEL_217;
      }
    }
    memmove(v130, v128, v129);
    goto LABEL_209;
  }
  sub_20E975C18(&v238);
  if (**(int **)(v238 + 56) > 4)
    goto LABEL_358;
  v121 = *(unsigned __int8 *)(v238 + 72);
  v122 = sub_20E8C31DC(v238, "OSLogSurrogateAppender", 1, 0);
  v123 = v122;
  if (!v121 && !v122)
    goto LABEL_358;
  v229 = &v238;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v231 = std::chrono::system_clock::now().__d_.__rep_;
  v232 = 4;
  v233 = "unknown file";
  v234 = 237;
  v236 = 0;
  v237 = 0;
  v235 = "unknown function";
  v124 = *v229;
  v228 = *v229;
  if (*(char *)(*v229 + 39) < 0)
  {
    v126 = *(const char **)(v124 + 16);
    v125 = *(_QWORD *)(v124 + 24);
  }
  else
  {
    v125 = *(unsigned __int8 *)(*v229 + 39);
    v126 = (const char *)(*v229 + 16);
  }
  v224 = *v229 + 16;
  v175 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v175 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)&object);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
    if ((_BYTE)v241 && SHIBYTE(v240[1]) < 0)
      operator delete(object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v176 = byte_254A4A4F8;
  else
    v176 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v177 = byte_254A4A4F8[23];
  else
    v177 = *(_QWORD *)&byte_254A4A4F8[8];
  object = os_log_create(v176, v126);
  v178 = v240;
  if (v177 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v177 >= 0x17)
  {
    v179 = v123;
    v180 = v126;
    v181 = v121;
    v182 = (v177 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v177 | 7) != 0x17)
      v182 = v177 | 7;
    v183 = v182 + 1;
    v178 = operator new(v182 + 1);
    v240[1] = (void *)v177;
    *(_QWORD *)&v241 = v183 | 0x8000000000000000;
    v240[0] = v178;
    v121 = v181;
    v126 = v180;
    v123 = v179;
    goto LABEL_290;
  }
  BYTE7(v241) = v177;
  if (v177)
LABEL_290:
    memmove(v178, v176, v177);
  *((_BYTE *)v178 + v177) = 0;
  BYTE8(v241) = 1;
  v184 = &__p;
  if (v125 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v125 >= 0x17)
  {
    v185 = (v125 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v125 | 7) != 0x17)
      v185 = v125 | 7;
    v186 = v185 + 1;
    v184 = operator new(v185 + 1);
    v243 = v125;
    v244 = v186 | 0x8000000000000000;
    __p = v184;
    goto LABEL_298;
  }
  HIBYTE(v244) = v125;
  if (v125)
LABEL_298:
    memmove(v184, v126, v125);
  *((_BYTE *)v184 + v125) = 0;
  v245 = 1;
  v187 = object;
  if (SHIBYTE(v244) < 0)
    operator delete(__p);
  if (BYTE8(v241) && SBYTE7(v241) < 0)
    operator delete(v240[0]);
  if (object)
    os_release(object);
  if (v123 && *(_QWORD *)(v123 + 24))
  {
    v188 = _os_log_pack_size();
    v189 = (std::__shared_weak_count_vtbl *)operator new(v188, (std::align_val_t)8uLL);
    v190 = (std::__shared_weak_count *)operator new();
    v191 = v190;
    v190->__shared_owners_ = 0;
    v192 = (unint64_t *)&v190->__shared_owners_;
    v190->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v190->__shared_weak_owners_ = 0;
    v190[1].__vftable = v189;
    object = v189;
    v240[0] = v189;
    v240[1] = v190;
    do
      v193 = __ldxr(v192);
    while (__stxr(v193 + 1, v192));
    v241 = 0uLL;
    __p = 0;
    do
      v194 = __ldaxr(v192);
    while (__stlxr(v194 - 1, v192));
    if (!v194)
    {
      ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
      std::__shared_weak_count::__release_weak(v191);
    }
    v195 = object;
    *(_WORD *)_os_log_pack_fill() = 0;
    v196 = operator new();
    v197 = *(unsigned __int8 *)(v228 + 39);
    v198 = v224;
    if ((v197 & 0x80u) != 0)
    {
      v198 = *(_QWORD *)(v228 + 16);
      v197 = *(_QWORD *)(v228 + 24);
    }
    *(_QWORD *)v196 = v195;
    *(_OWORD *)(v196 + 8) = *(_OWORD *)v240;
    v240[0] = 0;
    v240[1] = 0;
    *(_OWORD *)(v196 + 24) = v241;
    v241 = 0uLL;
    *(_QWORD *)(v196 + 40) = v198;
    *(_QWORD *)(v196 + 48) = v197;
    *(_BYTE *)(v196 + 56) = 16;
    v246 = 0;
    v247[0] = v196;
    (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v123 + 24) + 40))(*(_QWORD *)(v123 + 24), v247);
    v199 = v247[0];
    v247[0] = 0;
    if (v199)
    {
      v200 = *(std::__shared_weak_count **)(v199 + 32);
      if (v200)
      {
        v201 = (unint64_t *)&v200->__shared_owners_;
        do
          v202 = __ldaxr(v201);
        while (__stlxr(v202 - 1, v201));
        if (!v202)
        {
          ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
          std::__shared_weak_count::__release_weak(v200);
        }
      }
      v203 = *(std::__shared_weak_count **)(v199 + 16);
      if (v203)
      {
        v204 = (unint64_t *)&v203->__shared_owners_;
        do
          v205 = __ldaxr(v204);
        while (__stlxr(v205 - 1, v204));
        if (!v205)
        {
          ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
          std::__shared_weak_count::__release_weak(v203);
        }
      }
      MEMORY[0x212BC6398](v199, 0x10F0C40B62ED6C6);
      v206 = v246;
      v246 = 0;
      if (v206)
      {
        v207 = *(std::__shared_weak_count **)(v206 + 32);
        if (v207)
        {
          v208 = (unint64_t *)&v207->__shared_owners_;
          do
            v209 = __ldaxr(v208);
          while (__stlxr(v209 - 1, v208));
          if (!v209)
          {
            ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
            std::__shared_weak_count::__release_weak(v207);
          }
        }
        v210 = *(std::__shared_weak_count **)(v206 + 16);
        if (v210)
        {
          v211 = (unint64_t *)&v210->__shared_owners_;
          do
            v212 = __ldaxr(v211);
          while (__stlxr(v212 - 1, v211));
          if (!v212)
          {
            ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
            std::__shared_weak_count::__release_weak(v210);
          }
        }
        MEMORY[0x212BC6398](v206, 0x10F0C40B62ED6C6);
      }
    }
    v213 = (std::__shared_weak_count *)*((_QWORD *)&v241 + 1);
    if (*((_QWORD *)&v241 + 1))
    {
      v214 = (unint64_t *)(*((_QWORD *)&v241 + 1) + 8);
      do
        v215 = __ldaxr(v214);
      while (__stlxr(v215 - 1, v214));
      if (!v215)
      {
        ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
        std::__shared_weak_count::__release_weak(v213);
      }
    }
    v216 = (std::__shared_weak_count *)v240[1];
    if (v240[1])
    {
      v217 = (unint64_t *)((char *)v240[1] + 8);
      do
        v218 = __ldaxr(v217);
      while (__stlxr(v218 - 1, v217));
      if (!v218)
      {
        ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
        std::__shared_weak_count::__release_weak(v216);
      }
    }
  }
  else
  {
    os_log_type_enabled(v187, OS_LOG_TYPE_ERROR);
    LOWORD(object) = 0;
    v219 = (void *)_os_log_send_and_compose_impl();
    if (v219)
      free(v219);
  }
  if (v121)
  {
    sub_20E863570((uint64_t)&v229);
  }
  sub_20E863570((uint64_t)&v229);
  v172 = v237;
  if (v237)
  {
    v220 = (unint64_t *)&v237->__shared_owners_;
    do
      v174 = __ldaxr(v220);
    while (__stlxr(v174 - 1, v220));
LABEL_356:
    if (!v174)
    {
      ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
      std::__shared_weak_count::__release_weak(v172);
    }
  }
LABEL_358:
  if (*(_BYTE *)(a2 + 10752))
    sub_20EA93BD0(a3);
}

void sub_20E975868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  uint64_t v29;

  if (a29)
  {
    if (a28 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a13);
  sub_20E8FE4F0(v29);
  _Unwind_Resume(a1);
}

void sub_20E9758C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  sub_20E86E8C4((uint64_t *)(v6 - 96));
  sub_20E86E8C4((uint64_t *)(v6 - 104));
  sub_20E86E658((uint64_t)va1);
  sub_20E863714((uint64_t)va);
  sub_20E8FE4F0(v5);
  _Unwind_Resume(a1);
}

void sub_20E97595C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v6;
  va_list va;

  va_start(va, a5);
  MEMORY[0x212BC6398](v6, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t *)va);
  sub_20E8FE4F0(v5);
  _Unwind_Resume(a1);
}

void sub_20E975994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  sub_20E863714((uint64_t)va);
  sub_20E8FE4F0(v5);
  _Unwind_Resume(a1);
}

void sub_20E9759B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  sub_20E863714((uint64_t)va);
  sub_20E8FE4F0(v5);
  _Unwind_Resume(a1);
}

void sub_20E9759EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  sub_20E863714((uint64_t)va);
  sub_20E8FE4F0(v5);
  _Unwind_Resume(a1);
}

void sub_20E975A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  sub_20E863714((uint64_t)va);
  sub_20E8FE4F0(v5);
  _Unwind_Resume(a1);
}

void sub_20E975A24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  sub_20E863714((uint64_t)va);
  sub_20E8FE4F0(v5);
  _Unwind_Resume(a1);
}

void sub_20E975A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  sub_20E863714((uint64_t)va);
  sub_20E8FE4F0(v5);
  _Unwind_Resume(a1);
}

void sub_20E975A5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *object,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  uint64_t v30;

  if (a30 && a29 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714((uint64_t)&a13);
  sub_20E8FE4F0(v30);
  _Unwind_Resume(a1);
}

void sub_20E975B50(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8FE4F0(v1);
  _Unwind_Resume(a1);
}

void sub_20E975B64(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8FE4F0(v1);
  _Unwind_Resume(a1);
}

void sub_20E975B78(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8FE4F0(v1);
  _Unwind_Resume(a1);
}

void sub_20E975B8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8FE4F0(v1);
  _Unwind_Resume(a1);
}

void sub_20E975BA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8FE4F0(v1);
  _Unwind_Resume(a1);
}

void sub_20E975BB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8FE4F0(v1);
  _Unwind_Resume(a1);
}

void sub_20E975BC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8FE4F0(v1);
  _Unwind_Resume(a1);
}

void sub_20E975BDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8FE4F0(v1);
  _Unwind_Resume(a1);
}

void sub_20E975BF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86A810(v1);
  _Unwind_Resume(a1);
}

void sub_20E975C04(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8FE4F0(v1);
  _Unwind_Resume(a1);
}

void sub_20E975C18(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5AC48);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5AC48))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.applecv3d.slam");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A5AC40);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A5AC48);
  }
  *a1 = qword_254A5AC40;
}

void sub_20E975CB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5AC48);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5AC48);
  _Unwind_Resume(a1);
}

void sub_20E975D0C(uint64_t a1)
{
  char *v1;
  uint64_t v2;
  _OWORD *v4;
  __int128 v5;
  const char *v6;
  const std::string::value_type *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  _QWORD v13[2];
  _OWORD v14[2];
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v1 = (char *)(a1 + 9455);
  v2 = *(unsigned __int8 *)(a1 + 9455);
  if ((v2 & 0x80u) != 0)
    v2 = *(_QWORD *)(a1 + 9440);
  if (!v2)
  {
    sub_20E8965F4();
    v12 = v10;
    sub_20E893368((unsigned int *)v14, &v12);
    v13[0] = (LODWORD(v14[0]) | ((unint64_t)BYTE4(v14[0]) << 32) | ((unint64_t)BYTE5(v14[0]) << 40)) & 0xFFFFFFFFFFFFFFLL | ((unint64_t)BYTE7(v14[0]) << 56) | ((unint64_t)(HIWORD(DWORD1(v14[0])) & 0xF | 0x40u) << 48);
    v13[1] = ((unint64_t)BYTE12(v14[0]) << 32) | ((unint64_t)BYTE13(v14[0]) << 40) | DWORD2(v14[0]) & 0xFFFFFF00 | ((unint64_t)HIDWORD(v14[0]) << 32) & 0xFF00000000000000 | ((unint64_t)BYTE14(v14[0]) << 48) | BYTE8(v14[0]) & 0x3F | 0x80;
    sub_2102323F4((unsigned __int8 *)v13, v14);
    v4 = operator new(0x28uLL);
    v5 = v14[1];
    *v4 = v14[0];
    v4[1] = v5;
    *((_DWORD *)v4 + 8) = v15;
    *((_BYTE *)v4 + 36) = 0;
    if (*v1 < 0)
      operator delete(*(void **)(a1 + 9432));
    *(_QWORD *)(a1 + 9432) = v4;
    *(_OWORD *)(a1 + 9440) = xmmword_2102E0950;
    if (*(_BYTE *)(a1 + 25))
      v6 = "-MS";
    else
      v6 = "-NS";
    if (*(_BYTE *)(a1 + 280))
      v7 = "-VS";
    else
      v7 = v6;
    std::string::append((std::string *)(a1 + 9432), v7, 3uLL);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)())v11->__on_zero_shared)();
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
}

void sub_20E975ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E896798((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E975EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E896798((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20E975EFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int32 *v6;
  __int32 *v7;
  uint64_t v8;
  __int128 v9;
  std::chrono::steady_clock::time_point v10;
  uint64_t *v11;
  _QWORD *v12;
  unsigned __int8 v13;
  unint64_t v14;
  char *v15;
  char *v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  uint64_t *v22;
  double v23;
  std::chrono::steady_clock::time_point v24;
  unsigned __int8 v25;
  unint64_t v26;
  double v27;
  char *v28;
  size_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t j;
  uint64_t v33;
  _QWORD *v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  uint64_t *v38;
  double v39;
  std::chrono::steady_clock::time_point v40;
  unsigned __int8 v41;
  unint64_t v42;
  double v43;
  char *v44;
  size_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t k;
  uint64_t v49;
  uint64_t *v50;
  double v51;
  std::chrono::steady_clock::time_point v52;
  unsigned __int8 v53;
  unint64_t v54;
  double v55;
  char *v56;
  size_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t m;
  uint64_t v61;
  _QWORD *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t *v66;
  double v67;
  std::chrono::steady_clock::time_point v68;
  unsigned __int8 v69;
  unint64_t v70;
  double v71;
  char *v72;
  size_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t n;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  double v81;
  unsigned __int8 v82;
  unint64_t v83;
  double v84;
  char *v85;
  size_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t ii;
  uint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  void *v103[2];
  uint64_t v104;
  __uint64_t v105[2];
  uint64_t v106;
  __uint64_t v107[2];
  void *v108;
  char v109;
  int64x2_t v110;
  void *v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  char v116;
  void *v117;
  char v118;
  char v119;
  void *v120;
  char v121;
  void *v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  void *__p[3];
  char v128;
  void *v129;
  char v130;
  char v131;
  void *v132;
  char v133;
  char v134;
  void *v135;
  char v136;
  void *v137;
  char v138;
  __int128 v139[34];
  uint64_t v140;
  __int128 v141[75];
  __int128 v142[108];
  void *v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;

  v0 = MEMORY[0x24BDAC7A8]();
  v149 = *MEMORY[0x24BDAC8D0];
  v3 = 4;
  if (!v1)
    return v3;
  v4 = v2;
  if (!v2)
    return v3;
  v5 = v1;
  memset(__p, 0, sizeof(__p));
  v6 = *(__int32 **)v1;
  v7 = *(__int32 **)(v1 + 8);
  v107[0] = (__uint64_t)__p;
  if (v6 == v7)
    return 4;
  v8 = v0;
  do
  {
    v110.i32[0] = *v6;
    sub_20EA9AB98((uint64_t *)v107, &v110);
    v6 += 272;
  }
  while (v6 != v7);
  v9 = *(_OWORD *)__p;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
    if ((_QWORD)v9 != *((_QWORD *)&v9 + 1))
      goto LABEL_8;
    return 4;
  }
  if (!__p[1])
    return 4;
LABEL_8:
  v10.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v11 = sub_210219C18();
  v12 = (_QWORD *)(v8 + 2480);
  if (*(char *)(v8 + 2503) < 0)
    v12 = (_QWORD *)*v12;
  v13 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  v14 = atomic_load(&qword_254A5A450);
  v15 = "s/AppleCV3D/library/Essentials/Log/src/APILogging.cpp";
  if (v14)
  {
    LODWORD(__p[0]) = 136315138;
    *(void **)((char *)__p + 4) = v12;
    v16 = (char *)_os_log_send_and_compose_impl();
    v17 = strlen(v16);
    v107[0] = 0;
    pthread_threadid_np(0, v107);
    v18 = v107[0];
    timespec_get((timespec *)v107, 1);
    sub_210219E20(__p, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v11 + 1), (__int128 *)(v11 + 5), "Start initialization for SLAM session %s", 0x28uLL, v16, v17, v18, v107);
    std::mutex::lock(&stru_254A5A410);
    v19 = qword_254A5A458;
    for (i = unk_254A5A460; v19 != i; v19 += 40)
    {
      v21 = *(_QWORD *)(v19 + 32);
      if (!v21)
        sub_20E86D37C();
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v21 + 48))(v21, __p);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v138 < 0)
    {
      operator delete(v137);
      v15 = "s/AppleCV3D/library/Essentials/Log/src/APILogging.cpp";
      if ((v136 & 0x80000000) == 0)
      {
LABEL_17:
        if (!v134)
        {
LABEL_25:
          if (v131 && v130 < 0)
            operator delete(v129);
          if (v128 < 0)
            operator delete(__p[1]);
          if (v16)
            free(v16);
          goto LABEL_32;
        }
LABEL_23:
        if (v133 < 0)
          operator delete(v132);
        goto LABEL_25;
      }
    }
    else
    {
      v15 = "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Log/src/APILogging.cpp" + 36;
      if ((v136 & 0x80000000) == 0)
        goto LABEL_17;
    }
    operator delete(v135);
    if (!v134)
      goto LABEL_25;
    goto LABEL_23;
  }
LABEL_32:
  if (os_signpost_enabled((os_log_t)*v11))
  {
    LODWORD(__p[0]) = *((_QWORD *)v15 + 427);
    *(void **)((char *)__p + 4) = v12;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  sub_20E909008((uint64_t)__p, v4);
  sub_20E864994((uint64_t)__p);
  sub_20E973D84(v5, (uint64_t)__p, (uint64_t *)v107);
  v22 = sub_210219C18();
  v23 = (double)(std::chrono::steady_clock::now().__d_.__rep_ - v10.__d_.__rep_);
  v24.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v25 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v25 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  v26 = atomic_load(&qword_254A5A450);
  v27 = v23 / 1000000.0;
  if (v26)
  {
    v110.i32[0] = 134217984;
    *(double *)((char *)v110.i64 + 4) = v27;
    v28 = (char *)_os_log_send_and_compose_impl();
    v29 = strlen(v28);
    v105[0] = 0;
    pthread_threadid_np(0, v105);
    v30 = v105[0];
    timespec_get((timespec *)v105, 1);
    sub_210219E20(&v110, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v22 + 1), (__int128 *)(v22 + 5), "MapEngineConfig overrides completed in %f ms", 0x2CuLL, v28, v29, v30, v105);
    std::mutex::lock(&stru_254A5A410);
    v31 = qword_254A5A458;
    for (j = unk_254A5A460; v31 != j; v31 += 40)
    {
      v33 = *(_QWORD *)(v31 + 32);
      if (!v33)
        sub_20E86D37C();
      (*(void (**)(uint64_t, int64x2_t *))(*(_QWORD *)v33 + 48))(v33, &v110);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v123 < 0)
    {
      operator delete(v122);
      if ((v121 & 0x80000000) == 0)
      {
LABEL_41:
        if (!v119)
        {
LABEL_47:
          if (v116 && SHIBYTE(v115) < 0)
            operator delete(v113);
          if (SHIBYTE(v112) < 0)
            operator delete((void *)v110.i64[1]);
          if (v28)
            free(v28);
          goto LABEL_54;
        }
LABEL_45:
        if (v118 < 0)
          operator delete(v117);
        goto LABEL_47;
      }
    }
    else if ((v121 & 0x80000000) == 0)
    {
      goto LABEL_41;
    }
    operator delete(v120);
    if (!v119)
      goto LABEL_47;
    goto LABEL_45;
  }
LABEL_54:
  if (os_signpost_enabled((os_log_t)*v22))
  {
    v110.i32[0] = 134217984;
    *(double *)((char *)v110.i64 + 4) = v27;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  v34 = operator new(0x28uLL);
  v34[1] = 0;
  v34[2] = 0;
  *v34 = &off_24C9B04B8;
  v34[4] = 0;
  v34[3] = &off_24CA07120;
  *(_QWORD *)(v8 + 2528) = v34 + 3;
  v35 = *(std::__shared_weak_count **)(v8 + 2536);
  *(_QWORD *)(v8 + 2536) = v34;
  if (v35)
  {
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldaxr(p_shared_owners);
    while (__stlxr(v37 - 1, p_shared_owners));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = sub_210219C18();
  v39 = (double)(std::chrono::steady_clock::now().__d_.__rep_ - v24.__d_.__rep_);
  v40.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v41 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v41 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  v42 = atomic_load(&qword_254A5A450);
  v43 = v39 / 1000000.0;
  if (v42)
  {
    v110.i32[0] = 134217984;
    *(double *)((char *)v110.i64 + 4) = v43;
    v44 = (char *)_os_log_send_and_compose_impl();
    v45 = strlen(v44);
    v105[0] = 0;
    pthread_threadid_np(0, v105);
    v46 = v105[0];
    timespec_get((timespec *)v105, 1);
    sub_210219E20(&v110, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v38 + 1), (__int128 *)(v38 + 5), "AuxiliaryTelemetryDataContainer creation completed in %f ms", 0x3BuLL, v44, v45, v46, v105);
    std::mutex::lock(&stru_254A5A410);
    v47 = qword_254A5A458;
    for (k = unk_254A5A460; v47 != k; v47 += 40)
    {
      v49 = *(_QWORD *)(v47 + 32);
      if (!v49)
        sub_20E86D37C();
      (*(void (**)(uint64_t, int64x2_t *))(*(_QWORD *)v49 + 48))(v49, &v110);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v123 < 0)
    {
      operator delete(v122);
      if ((v121 & 0x80000000) == 0)
      {
LABEL_68:
        if (!v119)
        {
LABEL_74:
          if (v116 && SHIBYTE(v115) < 0)
            operator delete(v113);
          if (SHIBYTE(v112) < 0)
            operator delete((void *)v110.i64[1]);
          if (v44)
            free(v44);
          goto LABEL_81;
        }
LABEL_72:
        if (v118 < 0)
          operator delete(v117);
        goto LABEL_74;
      }
    }
    else if ((v121 & 0x80000000) == 0)
    {
      goto LABEL_68;
    }
    operator delete(v120);
    if (!v119)
      goto LABEL_74;
    goto LABEL_72;
  }
LABEL_81:
  if (os_signpost_enabled((os_log_t)*v38))
  {
    v110.i32[0] = 134217984;
    *(double *)((char *)v110.i64 + 4) = v43;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  sub_20E975D0C((uint64_t)__p);
  v50 = sub_210219C18();
  v51 = (double)(std::chrono::steady_clock::now().__d_.__rep_ - v40.__d_.__rep_);
  v52.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v53 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v53 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  v54 = atomic_load(&qword_254A5A450);
  v55 = v51 / 1000000.0;
  if (v54)
  {
    v110.i32[0] = 134217984;
    *(double *)((char *)v110.i64 + 4) = v55;
    v56 = (char *)_os_log_send_and_compose_impl();
    v57 = strlen(v56);
    v105[0] = 0;
    pthread_threadid_np(0, v105);
    v58 = v105[0];
    timespec_get((timespec *)v105, 1);
    sub_210219E20(&v110, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v50 + 1), (__int128 *)(v50 + 5), "UpdateAnalyticsConfig completed in %f ms", 0x28uLL, v56, v57, v58, v105);
    std::mutex::lock(&stru_254A5A410);
    v59 = qword_254A5A458;
    for (m = unk_254A5A460; v59 != m; v59 += 40)
    {
      v61 = *(_QWORD *)(v59 + 32);
      if (!v61)
        sub_20E86D37C();
      (*(void (**)(uint64_t, int64x2_t *))(*(_QWORD *)v61 + 48))(v61, &v110);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v123 < 0)
    {
      operator delete(v122);
      if ((v121 & 0x80000000) == 0)
      {
LABEL_90:
        if (!v119)
        {
LABEL_96:
          if (v116 && SHIBYTE(v115) < 0)
            operator delete(v113);
          if (SHIBYTE(v112) < 0)
            operator delete((void *)v110.i64[1]);
          if (v56)
            free(v56);
          goto LABEL_103;
        }
LABEL_94:
        if (v118 < 0)
          operator delete(v117);
        goto LABEL_96;
      }
    }
    else if ((v121 & 0x80000000) == 0)
    {
      goto LABEL_90;
    }
    operator delete(v120);
    if (!v119)
      goto LABEL_96;
    goto LABEL_94;
  }
LABEL_103:
  if (os_signpost_enabled((os_log_t)*v50))
  {
    v110.i32[0] = 134217984;
    *(double *)((char *)v110.i64 + 4) = v55;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  v62 = operator new(0xA0uLL);
  sub_20E909C5C(v62, (uint64_t)&v140, (uint64_t *)(v8 + 2528));
  *(_QWORD *)(v8 + 2544) = v62 + 3;
  v63 = *(std::__shared_weak_count **)(v8 + 2552);
  *(_QWORD *)(v8 + 2552) = v62;
  if (v63)
  {
    v64 = (unint64_t *)&v63->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v66 = sub_210219C18();
  v67 = (double)(std::chrono::steady_clock::now().__d_.__rep_ - v52.__d_.__rep_);
  v68.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v69 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v69 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  v70 = atomic_load(&qword_254A5A450);
  v71 = v67 / 1000000.0;
  if (v70)
  {
    v110.i32[0] = 134217984;
    *(double *)((char *)v110.i64 + 4) = v71;
    v72 = (char *)_os_log_send_and_compose_impl();
    v73 = strlen(v72);
    v105[0] = 0;
    pthread_threadid_np(0, v105);
    v74 = v105[0];
    timespec_get((timespec *)v105, 1);
    sub_210219E20(&v110, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v66 + 1), (__int128 *)(v66 + 5), "CoreAnalytics creation completed in %f ms", 0x29uLL, v72, v73, v74, v105);
    std::mutex::lock(&stru_254A5A410);
    v75 = qword_254A5A458;
    for (n = unk_254A5A460; v75 != n; v75 += 40)
    {
      v77 = *(_QWORD *)(v75 + 32);
      if (!v77)
        sub_20E86D37C();
      (*(void (**)(uint64_t, int64x2_t *))(*(_QWORD *)v77 + 48))(v77, &v110);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v123 < 0)
    {
      operator delete(v122);
      if ((v121 & 0x80000000) == 0)
      {
LABEL_117:
        if (!v119)
        {
LABEL_123:
          if (v116 && SHIBYTE(v115) < 0)
            operator delete(v113);
          if (SHIBYTE(v112) < 0)
            operator delete((void *)v110.i64[1]);
          if (v72)
            free(v72);
          goto LABEL_130;
        }
LABEL_121:
        if (v118 < 0)
          operator delete(v117);
        goto LABEL_123;
      }
    }
    else if ((v121 & 0x80000000) == 0)
    {
      goto LABEL_117;
    }
    operator delete(v120);
    if (!v119)
      goto LABEL_123;
    goto LABEL_121;
  }
LABEL_130:
  if (os_signpost_enabled((os_log_t)*v66))
  {
    v110.i32[0] = 134217984;
    *(double *)((char *)v110.i64 + 4) = v71;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  sub_20E86184C(v103);
  *(_OWORD *)v105 = *(_OWORD *)v103;
  v106 = v104;
  v103[1] = 0;
  v104 = 0;
  v103[0] = 0;
  sub_20EFF89E0((uint64_t)&v110, v142, v139, (__int128 *)v105, v141);
  sub_20EFF9990(v8 + 2560, (uint64_t)&v110);
  if (v126)
  {
    v78 = v125;
    v125 = 0;
    if (v78)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v78 + 8))(v78);
      v79 = v125;
      v125 = 0;
      if (v79)
        (*(void (**)(uint64_t))(*(_QWORD *)v79 + 8))(v79);
    }
    sub_20EFFAFE4((uint64_t)&v124);
  }
  sub_20EFFB150((uint64_t)&v117);
  if (v114)
  {
    v115 = v114;
    operator delete(v114);
  }
  if (v111)
  {
    v112 = v111;
    operator delete(v111);
  }
  if (SHIBYTE(v106) < 0)
  {
    operator delete((void *)v105[0]);
    if ((SHIBYTE(v104) & 0x80000000) == 0)
      goto LABEL_143;
LABEL_153:
    operator delete(v103[0]);
    goto LABEL_143;
  }
  if (SHIBYTE(v104) < 0)
    goto LABEL_153;
LABEL_143:
  v80 = sub_210219C18();
  v81 = (double)(std::chrono::steady_clock::now().__d_.__rep_ - v68.__d_.__rep_);
  std::chrono::steady_clock::now();
  v82 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v82 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  v83 = atomic_load(&qword_254A5A450);
  v84 = v81 / 1000000.0;
  if (!v83)
    goto LABEL_165;
  v110.i32[0] = 134217984;
  *(double *)((char *)v110.i64 + 4) = v84;
  v85 = (char *)_os_log_send_and_compose_impl();
  v86 = strlen(v85);
  v105[0] = 0;
  pthread_threadid_np(0, v105);
  v87 = v105[0];
  timespec_get((timespec *)v105, 1);
  sub_210219E20(&v110, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v80 + 1), (__int128 *)(v80 + 5), "Data Collection Diagnostics creation completed in %f ms", 0x37uLL, v85, v86, v87, v105);
  std::mutex::lock(&stru_254A5A410);
  v88 = qword_254A5A458;
  for (ii = unk_254A5A460; v88 != ii; v88 += 40)
  {
    v90 = *(_QWORD *)(v88 + 32);
    if (!v90)
      sub_20E86D37C();
    (*(void (**)(uint64_t, int64x2_t *))(*(_QWORD *)v90 + 48))(v90, &v110);
  }
  std::mutex::unlock(&stru_254A5A410);
  if ((v123 & 0x80000000) == 0)
  {
    if ((v121 & 0x80000000) == 0)
      goto LABEL_150;
LABEL_155:
    operator delete(v120);
    if (!v119)
      goto LABEL_158;
LABEL_156:
    if (v118 < 0)
      operator delete(v117);
    goto LABEL_158;
  }
  operator delete(v122);
  if (v121 < 0)
    goto LABEL_155;
LABEL_150:
  if (v119)
    goto LABEL_156;
LABEL_158:
  if (v116 && SHIBYTE(v115) < 0)
    operator delete(v113);
  if (SHIBYTE(v112) < 0)
    operator delete((void *)v110.i64[1]);
  if (v85)
    free(v85);
LABEL_165:
  if (os_signpost_enabled((os_log_t)*v80))
  {
    v110.i32[0] = 134217984;
    *(double *)((char *)v110.i64 + 4) = v84;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  v91 = *(std::__shared_weak_count **)(v8 + 2552);
  if (v91)
  {
    v92 = (unint64_t *)&v91->__shared_owners_;
    do
      v93 = __ldxr(v92);
    while (__stxr(v93 + 1, v92));
  }
  sub_20E97A074();
  v3 = sub_20E977544((uint64_t *)v8, (uint64_t)__p, (uint64_t)v107, &v110);
  v94 = v114;
  v114 = 0;
  if (v94)
    (*(void (**)(void *))(*(_QWORD *)v94 + 8))(v94);
  v95 = v113;
  v113 = 0;
  if (v95)
    (*(void (**)(void *))(*(_QWORD *)v95 + 8))(v95);
  v96 = v112;
  v112 = 0;
  if (v96)
    (*(void (**)(void *))(*(_QWORD *)v96 + 8))(v96);
  v97 = v111;
  v111 = 0;
  if (v97)
    (*(void (**)(void *))(*(_QWORD *)v97 + 8))(v97);
  v98 = v110.i64[1];
  v110.i64[1] = 0;
  if (v98)
    (*(void (**)(uint64_t))(*(_QWORD *)v98 + 8))(v98);
  v99 = v110.i64[0];
  v110.i64[0] = 0;
  if (v99)
    (*(void (**)(uint64_t))(*(_QWORD *)v99 + 8))(v99);
  if (v91)
  {
    v100 = (unint64_t *)&v91->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  if (v109 < 0)
    operator delete(v108);
  sub_20E86A810((uint64_t)v107);
  if (v148)
    MEMORY[0x212BC6368](v148, 0x1000C8000313F17);
  if (v147)
    MEMORY[0x212BC6368](v147, 0x1000C8000313F17);
  if (v146)
    MEMORY[0x212BC6368](v146, 0x1000C8000313F17);
  if (v145)
    MEMORY[0x212BC6368](v145, 0x1000C8000313F17);
  if (v143)
  {
    v144 = v143;
    operator delete(v143);
  }
  sub_20E869418((uint64_t)&__p[1]);
  return v3;
}

void sub_20E9772A4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  void *v16;
  va_list va;

  va_start(va, a16);
  sub_20E96E218((uint64_t)&STACK[0xA10]);
  if (v16)
    free(v16);
  if (a2 == 2 || a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (SLOBYTE(STACK[0xA07]) < 0)
      JUMPOUT(0x20E97702CLL);
    JUMPOUT(0x20E977034);
  }
  sub_20E8FE4F0((uint64_t)va);
  sub_20E8FE530(&STACK[0xE10]);
  _Unwind_Resume(a1);
}

void sub_20E9774F0()
{
  std::mutex::unlock(&stru_254A5A410);
  JUMPOUT(0x20E977504);
}

void sub_20E977520(_Unwind_Exception *a1)
{
  void *v2;

  v2 = (void *)STACK[0xE10];
  if (!STACK[0xE10])
    JUMPOUT(0x20E97752CLL);
  STACK[0xE18] = (unint64_t)v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_20E977544(uint64_t *a1, uint64_t a2, uint64_t a3, int64x2_t *a4)
{
  uint64_t result;
  std::chrono::steady_clock::time_point v8;
  _QWORD *v9;
  uint64_t *v10;
  double v11;
  std::chrono::steady_clock::time_point v12;
  unsigned __int8 v13;
  unint64_t v14;
  double v15;
  char *v16;
  size_t v17;
  __darwin_time_t tv_sec;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  uint64_t *v22;
  double v23;
  std::chrono::steady_clock::time_point v24;
  unsigned __int8 v25;
  unint64_t v26;
  double v27;
  char *v28;
  size_t v29;
  __darwin_time_t v30;
  uint64_t v31;
  uint64_t j;
  uint64_t v33;
  void **v34;
  void **v35;
  char v36;
  __int128 v37;
  __int128 v38;
  void *v39;
  size_t v40;
  uint64_t *v47;
  double v48;
  std::chrono::steady_clock::time_point v49;
  unsigned __int8 v50;
  unint64_t v51;
  double v52;
  char *v53;
  size_t v54;
  __darwin_time_t v55;
  uint64_t v56;
  uint64_t k;
  uint64_t v58;
  int64x2_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  __CFError *v72;
  std::__shared_weak_count *v73;
  std::__shared_weak_count *v74;
  unint64_t *p_shared_owners;
  unint64_t v76;
  unint64_t v77;
  int v78;
  unint64_t v79;
  unint64_t v80;
  std::string *v82;
  std::__shared_weak_count *v83;
  CFDictionaryRef v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  const void *v88;
  std::string *v89;
  const char *v90;
  uint64_t v91;
  size_t v92;
  const char *v93;
  unsigned __int8 v94;
  const char *v95;
  size_t v96;
  _BYTE *v97;
  int v98;
  const char *v99;
  uint64_t v100;
  uint64_t v101;
  void **v102;
  int v103;
  const char *v104;
  uint64_t v105;
  uint64_t v106;
  NSObject *v107;
  size_t v108;
  std::__shared_weak_count_vtbl *v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  char *v112;
  std::__shared_weak_count *v113;
  unint64_t v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  uint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  char *v144;
  void *v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  unint64_t *v161;
  unint64_t v162;
  uint64_t *v163;
  double v164;
  std::chrono::steady_clock::time_point v165;
  unsigned __int8 v166;
  unint64_t v167;
  double v168;
  char *v169;
  size_t v170;
  __darwin_time_t v171;
  uint64_t v172;
  uint64_t jj;
  uint64_t v174;
  _QWORD *v175;
  _QWORD *v176;
  _QWORD *v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  std::string::size_type v181;
  std::string *p_dst;
  unint64_t v183;
  const void *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  timespec *v188;
  uint64_t v189;
  char *v190;
  size_t v191;
  std::string::size_type v192;
  std::string *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t *v203;
  double v204;
  std::chrono::steady_clock::time_point v205;
  unsigned __int8 v206;
  unint64_t v207;
  double v208;
  char *v209;
  size_t v210;
  __darwin_time_t v211;
  uint64_t v212;
  uint64_t ii;
  uint64_t v214;
  std::__assoc_sub_state *v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t *v218;
  unint64_t v219;
  uint64_t *v220;
  double v221;
  unsigned __int8 v222;
  unint64_t v223;
  double v224;
  char *v225;
  size_t v226;
  __darwin_time_t v227;
  uint64_t v228;
  uint64_t n;
  uint64_t v230;
  uint64_t v231;
  unsigned __int8 v232;
  void **v233;
  uint64_t *v234;
  unsigned __int8 v235;
  char *v237;
  size_t v238;
  __darwin_time_t v239;
  uint64_t v240;
  uint64_t m;
  uint64_t v242;
  std::string::size_type v243;
  unint64_t *v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  int v248;
  uint64_t v249;
  uint64_t v250;
  char *v251;
  unint64_t v252;
  uint64_t v253;
  char *__s[2];
  std::__shared_weak_count *v255;
  int v256;
  const char *v257;
  CFDictionaryRef theDict;
  std::__shared_weak_count *v259;
  std::string v260;
  char v261;
  std::string *v262;
  std::string __dst;
  char v264;
  uint64_t v265;
  __CFError *v266;
  std::__shared_weak_count *v267;
  __CFError *v268;
  timespec v269;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  timespec *v271;
  const char *v272;
  int v273;
  const char *v274;
  uint64_t v275;
  std::__shared_weak_count *v276;
  _BYTE v277[24];
  __int128 v278;
  char *v279;
  _QWORD v280[2];
  std::__shared_weak_count *v281;
  _QWORD *v282;
  char *v283;
  _BYTE value[24];
  const char *v285;
  void *v286[2];
  size_t v287;
  __int128 v288;
  unint64_t v289;
  char v290;
  void *v291;
  void *v292;
  char v293;
  unint64_t v294;
  void *__p;
  uint64_t v296;
  char v297;
  uint64_t v298;

  v298 = *MEMORY[0x24BDAC8D0];
  if (*a1 && a1[1] && a1[2] && a1[3] && a1[4])
  {
    result = 4;
    if (!a3)
      return result;
    if (!a2)
      return result;
    v253 = a3;
    if (a1[5])
      return result;
  }
  else
  {
    result = 4;
    if (!a2)
      return result;
    v253 = a3;
    if (!a3)
      return result;
  }
  v8.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  *(_QWORD *)value = &off_24C9BFE70;
  v9 = (_QWORD *)operator new();
  *v9 = &off_24C9BFDA8;
  v9[1] = 1024;
  *(_QWORD *)&value[8] = v9;
  sub_20EA59D8C((uint64_t)value);
  if (*(_QWORD *)&value[8])
    (*(void (**)(_QWORD))(**(_QWORD **)&value[8] + 8))(*(_QWORD *)&value[8]);
  v10 = sub_210219C18();
  v11 = (double)(std::chrono::steady_clock::now().__d_.__rep_ - v8.__d_.__rep_);
  v12.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v13 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  v14 = atomic_load(&qword_254A5A450);
  v15 = v11 / 1000000.0;
  if (v14)
  {
    *(_DWORD *)value = 134217984;
    *(double *)&value[4] = v15;
    v16 = (char *)_os_log_send_and_compose_impl();
    v17 = strlen(v16);
    v269.tv_sec = 0;
    pthread_threadid_np(0, (__uint64_t *)&v269);
    tv_sec = v269.tv_sec;
    timespec_get(&v269, 1);
    sub_210219E20(value, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v10 + 1), (__int128 *)(v10 + 5), "Diagnostics context initialization completed in %f ms", 0x35uLL, v16, v17, tv_sec, &v269);
    std::mutex::lock(&stru_254A5A410);
    v19 = qword_254A5A458;
    for (i = unk_254A5A460; v19 != i; v19 += 40)
    {
      v21 = *(_QWORD *)(v19 + 32);
      if (!v21)
        sub_20E86D37C();
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v21 + 48))(v21, value);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v297 < 0)
    {
      operator delete(__p);
      if ((SHIBYTE(v294) & 0x80000000) == 0)
      {
LABEL_21:
        if (!(_BYTE)v291)
        {
LABEL_27:
          if ((_BYTE)v288 && SHIBYTE(v287) < 0)
            operator delete(v286[0]);
          if (SHIBYTE(v285) < 0)
            operator delete(*(void **)&value[8]);
          if (v16)
            free(v16);
          goto LABEL_34;
        }
LABEL_25:
        if (v290 < 0)
          operator delete(*((void **)&v288 + 1));
        goto LABEL_27;
      }
    }
    else if ((SHIBYTE(v294) & 0x80000000) == 0)
    {
      goto LABEL_21;
    }
    operator delete(v292);
    if (!(_BYTE)v291)
      goto LABEL_27;
    goto LABEL_25;
  }
LABEL_34:
  if (os_signpost_enabled((os_log_t)*v10))
  {
    *(_DWORD *)value = 134217984;
    *(double *)&value[4] = v15;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  *((_BYTE *)a1 + 2520) = sub_20E865E9C(a2);
  *((_BYTE *)a1 + 2521) = sub_20E865EF8((_BYTE *)(a2 + 10755), "com.apple.arkit.worldTracking.disableSemanticsInputs", 0x34uLL);
  *((_BYTE *)a1 + 2522) = sub_20E865EF8((_BYTE *)(a2 + 10757), "com.apple.arkit.worldTracking.disablePaPDInputs", 0x2FuLL);
  *((_BYTE *)a1 + 2523) = sub_20E865EF8((_BYTE *)(a2 + 10759), "com.apple.arkit.worldTracking.disableLuxInputs", 0x2EuLL);
  v22 = sub_210219C18();
  v23 = (double)(std::chrono::steady_clock::now().__d_.__rep_ - v12.__d_.__rep_);
  v24.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v25 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v25 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  v26 = atomic_load(&qword_254A5A450);
  v27 = v23 / 1000000.0;
  if (v26)
  {
    *(_DWORD *)value = 134217984;
    *(double *)&value[4] = v27;
    v28 = (char *)_os_log_send_and_compose_impl();
    v29 = strlen(v28);
    v269.tv_sec = 0;
    pthread_threadid_np(0, (__uint64_t *)&v269);
    v30 = v269.tv_sec;
    timespec_get(&v269, 1);
    sub_210219E20(value, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v22 + 1), (__int128 *)(v22 + 5), "Advanced dependency enablement completed in %f ms", 0x31uLL, v28, v29, v30, &v269);
    std::mutex::lock(&stru_254A5A410);
    v31 = qword_254A5A458;
    for (j = unk_254A5A460; v31 != j; v31 += 40)
    {
      v33 = *(_QWORD *)(v31 + 32);
      if (!v33)
        sub_20E86D37C();
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v33 + 48))(v33, value);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v297 < 0)
    {
      operator delete(__p);
      if ((SHIBYTE(v294) & 0x80000000) == 0)
      {
LABEL_43:
        if (!(_BYTE)v291)
        {
LABEL_49:
          if ((_BYTE)v288 && SHIBYTE(v287) < 0)
            operator delete(v286[0]);
          if (SHIBYTE(v285) < 0)
            operator delete(*(void **)&value[8]);
          if (v28)
            free(v28);
          goto LABEL_56;
        }
LABEL_47:
        if (v290 < 0)
          operator delete(*((void **)&v288 + 1));
        goto LABEL_49;
      }
    }
    else if ((SHIBYTE(v294) & 0x80000000) == 0)
    {
      goto LABEL_43;
    }
    operator delete(v292);
    if (!(_BYTE)v291)
      goto LABEL_49;
    goto LABEL_47;
  }
LABEL_56:
  if (os_signpost_enabled((os_log_t)*v22))
  {
    *(_DWORD *)value = 134217984;
    *(double *)&value[4] = v27;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  if (*(_BYTE *)(a2 + 9424))
  {
    v34 = (void **)(a2 + 9432);
    v35 = (void **)(a1 + 474);
    if (*((_BYTE *)a1 + 3816))
    {
      if (v35 != v34)
      {
        v36 = *(_BYTE *)(a2 + 9455);
        if (*((char *)a1 + 3815) < 0)
        {
          if (v36 >= 0)
            v39 = (void *)(a2 + 9432);
          else
            v39 = *(void **)(a2 + 9432);
          if (v36 >= 0)
            v40 = *(unsigned __int8 *)(a2 + 9455);
          else
            v40 = *(_QWORD *)(a2 + 9440);
          sub_20E867CBC(v35, v39, v40);
        }
        else if ((*(_BYTE *)(a2 + 9455) & 0x80) != 0)
        {
          sub_20E867BF8(v35, *(void **)(a2 + 9432), *(_QWORD *)(a2 + 9440));
        }
        else
        {
          v37 = *(_OWORD *)v34;
          a1[476] = *(_QWORD *)(a2 + 9448);
          *(_OWORD *)v35 = v37;
        }
      }
    }
    else
    {
      if (*(char *)(a2 + 9455) < 0)
      {
        sub_20E860C04(v35, *(void **)(a2 + 9432), *(_QWORD *)(a2 + 9440));
      }
      else
      {
        v38 = *(_OWORD *)v34;
        a1[476] = *(_QWORD *)(a2 + 9448);
        *(_OWORD *)v35 = v38;
      }
      *((_BYTE *)a1 + 3816) = 1;
    }
  }
  *((_BYTE *)a1 + 3824) = *(_BYTE *)(a2 + 10752);
  _Q1 = *(_OWORD *)(v253 + 56);
  _D3 = *(_QWORD *)(v253 + 64);
  __asm { FMLA            D2, D3, V1.D[1] }
  *((double *)a1 + 448) = sqrt(_D2 + *(double *)(v253 + 72) * *(double *)(v253 + 72));
  sub_20E92CB74((uint64_t)(a1 + 6), v253);
  v47 = sub_210219C18();
  v48 = (double)(std::chrono::steady_clock::now().__d_.__rep_ - v24.__d_.__rep_);
  v49.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v50 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v50 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  v51 = atomic_load(&qword_254A5A450);
  v52 = v48 / 1000000.0;
  if (v51)
  {
    *(_DWORD *)value = 134217984;
    *(double *)&value[4] = v52;
    v53 = (char *)_os_log_send_and_compose_impl();
    v54 = strlen(v53);
    v269.tv_sec = 0;
    pthread_threadid_np(0, (__uint64_t *)&v269);
    v55 = v269.tv_sec;
    timespec_get(&v269, 1);
    sub_210219E20(value, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v47 + 1), (__int128 *)(v47 + 5), "Calibration setup completed in %f ms", 0x24uLL, v53, v54, v55, &v269);
    std::mutex::lock(&stru_254A5A410);
    v56 = qword_254A5A458;
    for (k = unk_254A5A460; v56 != k; v56 += 40)
    {
      v58 = *(_QWORD *)(v56 + 32);
      if (!v58)
        sub_20E86D37C();
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v58 + 48))(v58, value);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v297 < 0)
    {
      operator delete(__p);
      if ((SHIBYTE(v294) & 0x80000000) == 0)
      {
LABEL_82:
        if (!(_BYTE)v291)
        {
LABEL_88:
          if ((_BYTE)v288 && SHIBYTE(v287) < 0)
            operator delete(v286[0]);
          if (SHIBYTE(v285) < 0)
            operator delete(*(void **)&value[8]);
          if (v53)
            free(v53);
          goto LABEL_95;
        }
LABEL_86:
        if (v290 < 0)
          operator delete(*((void **)&v288 + 1));
        goto LABEL_88;
      }
    }
    else if ((SHIBYTE(v294) & 0x80000000) == 0)
    {
      goto LABEL_82;
    }
    operator delete(v292);
    if (!(_BYTE)v291)
      goto LABEL_88;
    goto LABEL_86;
  }
LABEL_95:
  if (os_signpost_enabled((os_log_t)*v47))
  {
    *(_DWORD *)value = 134217984;
    *(double *)&value[4] = v52;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  v59 = *a4;
  result = 4;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vceqzq_s64(*a4), (int32x4_t)vceqzq_s64(a4[1])))) & 1) == 0
    && a4[2].i64[0]
    && a4[2].i64[1])
  {
    a4->i64[0] = 0;
    v60 = *a1;
    *a1 = v59.i64[0];
    if (v60)
      (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
    v61 = a4->i64[1];
    a4->i64[1] = 0;
    v62 = a1[1];
    a1[1] = v61;
    if (v62)
      (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
    v63 = a4[1].i64[0];
    a4[1].i64[0] = 0;
    v64 = a1[2];
    a1[2] = v63;
    if (v64)
      (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
    v65 = a4[1].i64[1];
    a4[1].i64[1] = 0;
    v66 = a1[3];
    a1[3] = v65;
    if (v66)
      (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
    v67 = a4[2].i64[0];
    a4[2].i64[0] = 0;
    v68 = a1[4];
    a1[4] = v67;
    if (v68)
      (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
    v69 = a4[2].i64[1];
    a4[2].i64[1] = 0;
    v70 = a1[5];
    a1[5] = v69;
    if (v70)
      (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
    v71 = (std::__shared_weak_count *)operator new(0x70uLL);
    v71->__shared_owners_ = 0;
    v71->__shared_weak_owners_ = 0;
    v71->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B01A8;
    *(_OWORD *)&v71[1].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v71[2].__shared_owners_ = 0u;
    v71[3].std::__shared_count = 0u;
    *(_OWORD *)&v71[3].__shared_weak_owners_ = 0u;
    v71[4].__shared_owners_ = 0;
    v71[1].std::__shared_count = 0u;
    v71[1].__shared_weak_owners_ = 1;
    __s[1] = (char *)&v71[1];
    v255 = v71;
    v256 = 1;
    __s[0] = (char *)&off_24C9C3858;
    if (*(_BYTE *)(a2 + 8944))
      goto LABEL_268;
    v268 = 0;
    if (sub_20E981890(a1, (uint64_t)__s, (CFTypeRef *)&v268))
      goto LABEL_268;
    v72 = v268;
    v73 = (std::__shared_weak_count *)operator new();
    v74 = v73;
    v73->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v73->__shared_owners_;
    v73->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9AD888;
    v73->__shared_weak_owners_ = 0;
    v73[1].__vftable = (std::__shared_weak_count_vtbl *)v72;
    v266 = v72;
    v267 = v73;
    do
      v76 = __ldxr(p_shared_owners);
    while (__stxr(v76 + 1, p_shared_owners));
    do
      v77 = __ldaxr(p_shared_owners);
    while (__stlxr(v77 - 1, p_shared_owners));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v74);
    }
    sub_20E98F460(&v265);
    if (**(int **)(v265 + 56) > 5
      || ((v78 = *(unsigned __int8 *)(v265 + 72),
           v79 = sub_20E8C31DC(v265, "OSLogSurrogateAppender", 1, 0),
           v80 = v79,
           !v78)
        ? (_ZF = v79 == 0)
        : (_ZF = 0),
          _ZF))
    {
LABEL_262:
      v158 = v267;
      if (v267)
      {
        v159 = (unint64_t *)&v267->__shared_owners_;
        do
          v160 = __ldaxr(v159);
        while (__stlxr(v160 - 1, v159));
        if (!v160)
        {
          ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
          std::__shared_weak_count::__release_weak(v158);
        }
      }
      v71 = v255;
      if (!v255)
      {
LABEL_272:
        v163 = sub_210219C18();
        v164 = (double)(std::chrono::steady_clock::now().__d_.__rep_ - v49.__d_.__rep_);
        v165.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        v166 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
        if ((v166 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
        {
          __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DDD0);
        }
        v167 = atomic_load(&qword_254A5A450);
        v168 = v164 / 1000000.0;
        if (!v167)
        {
LABEL_292:
          if (os_signpost_enabled((os_log_t)*v163))
          {
            *(_DWORD *)value = 134217984;
            *(double *)&value[4] = v168;
            _os_signpost_emit_unreliably_with_name_impl();
          }
          sub_20E975C18(value);
          if (**(int **)(*(_QWORD *)value + 56) > 3)
          {
LABEL_348:
            v203 = sub_210219C18();
            v204 = (double)(std::chrono::steady_clock::now().__d_.__rep_ - v165.__d_.__rep_);
            v205.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
            v206 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
            if ((v206 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
            {
              __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DDD0);
            }
            v207 = atomic_load(&qword_254A5A450);
            v208 = v204 / 1000000.0;
            if (!v207)
            {
LABEL_368:
              if (os_signpost_enabled((os_log_t)*v203))
              {
                *(_DWORD *)value = 134217984;
                *(double *)&value[4] = v208;
                _os_signpost_emit_unreliably_with_name_impl();
              }
              (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*a1 + 352))(&__dst);
              v215 = (std::__assoc_sub_state *)__dst.__r_.__value_.__r.__words[0];
              if (__dst.__r_.__value_.__r.__words[0])
              {
                __dst.__r_.__value_.__r.__words[0] = 0;
                sub_20E991998(v215);
                v217 = v216;
                v218 = (unint64_t *)&v215->__shared_owners_;
                do
                  v219 = __ldaxr(v218);
                while (__stlxr(v219 - 1, v218));
                if (!v219)
                  ((void (*)(std::__assoc_sub_state *))v215->__on_zero_shared)(v215);
                a1[314] = v217;
              }
              v220 = sub_210219C18();
              v221 = (double)(std::chrono::steady_clock::now().__d_.__rep_ - v205.__d_.__rep_);
              std::chrono::steady_clock::now();
              v222 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
              if ((v222 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
              {
                __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DDD0);
              }
              v223 = atomic_load(&qword_254A5A450);
              v224 = v221 / 1000000.0;
              if (!v223)
              {
LABEL_396:
                if (os_signpost_enabled((os_log_t)*v220))
                {
                  *(_DWORD *)value = 134217984;
                  *(double *)&value[4] = v224;
                  _os_signpost_emit_unreliably_with_name_impl();
                }
                v260.__r_.__value_.__r.__words[0] = 0;
                v231 = mach_continuous_time();
                v232 = atomic_load((unsigned __int8 *)&qword_254A6D7C8);
                if ((v232 & 1) == 0 && __cxa_guard_acquire(&qword_254A6D7C8))
                {
                  mach_timebase_info((mach_timebase_info_t)value);
                  LODWORD(v247) = *(_DWORD *)&value[4];
                  LODWORD(v246) = *(_DWORD *)value;
                  *(double *)&qword_254A6D7C0 = (double)v246 / (double)v247;
                  __cxa_guard_release(&qword_254A6D7C8);
                }
                *(double *)&v260.__r_.__value_.__l.__data_ = (double)(uint64_t)round(*(double *)&qword_254A6D7C0* (double)v231)* 0.000000001;
                LODWORD(v271) = 0;
                sub_20E991A58(&v269, "[in SLAM session created at ");
                sub_20E87876C((uint64_t)__s, (uint64_t)&v269, (double *)&v260);
                *(_QWORD *)value = &v269;
                *(_QWORD *)&value[8] = "]";
                *(_QWORD *)&value[16] = &v269;
                v285 = "]";
                v286[0] = "]";
                if ((_DWORD)v271 == -1)
                  sub_20E877AB8();
                v280[0] = value;
                ((void (*)(_QWORD *, timespec *))off_24C9B3438[v271])(v280, &v269);
                if ((_DWORD)v271 == -1)
                  sub_20E877AB8();
                *(_QWORD *)value = v280;
                ((void (*)(_BYTE *__return_ptr, _BYTE *, timespec *))off_24C9B3450[v271])(v277, value, &v269);
                if ((_DWORD)v271 != -1)
                  ((void (*)(_BYTE *, timespec *))off_24C9B33F0[v271])(value, &v269);
                v233 = (void **)(a1 + 310);
                if (*((char *)a1 + 2503) < 0)
                  operator delete(*v233);
                *(_OWORD *)v233 = *(_OWORD *)v277;
                a1[312] = *(_QWORD *)&v277[16];
                v234 = sub_210219C18();
                v235 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
                if ((v235 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
                {
                  __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A6DDD0);
                }
                if (!atomic_load(&qword_254A5A450))
                  goto LABEL_425;
                *(_DWORD *)value = 134217984;
                *(_QWORD *)&value[4] = v260.__r_.__value_.__r.__words[0];
                v237 = (char *)_os_log_send_and_compose_impl();
                v238 = strlen(v237);
                v269.tv_sec = 0;
                pthread_threadid_np(0, (__uint64_t *)&v269);
                v239 = v269.tv_sec;
                timespec_get(&v269, 1);
                sub_210219E20(value, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v234 + 1), (__int128 *)(v234 + 5), "Create SLAM session at system time %.10g", 0x28uLL, v237, v238, v239, &v269);
                std::mutex::lock(&stru_254A5A410);
                v240 = qword_254A5A458;
                for (m = unk_254A5A460; v240 != m; v240 += 40)
                {
                  v242 = *(_QWORD *)(v240 + 32);
                  if (!v242)
                    sub_20E86D37C();
                  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v242 + 48))(v242, value);
                }
                std::mutex::unlock(&stru_254A5A410);
                if (v297 < 0)
                {
                  operator delete(__p);
                  if ((SHIBYTE(v294) & 0x80000000) == 0)
                  {
LABEL_412:
                    if (!(_BYTE)v291)
                    {
LABEL_418:
                      if ((_BYTE)v288 && SHIBYTE(v287) < 0)
                        operator delete(v286[0]);
                      if (SHIBYTE(v285) < 0)
                        operator delete(*(void **)&value[8]);
                      if (v237)
                        free(v237);
LABEL_425:
                      if (os_signpost_enabled((os_log_t)*v234))
                      {
                        *(_DWORD *)value = 134217984;
                        *(_QWORD *)&value[4] = v260.__r_.__value_.__r.__words[0];
                        _os_signpost_emit_unreliably_with_name_impl();
                      }
                      v243 = __dst.__r_.__value_.__r.__words[0];
                      if (__dst.__r_.__value_.__r.__words[0])
                      {
                        v244 = (unint64_t *)(__dst.__r_.__value_.__r.__words[0] + 8);
                        do
                          v245 = __ldaxr(v244);
                        while (__stlxr(v245 - 1, v244));
                        if (!v245)
                          (*(void (**)(std::string::size_type))(*(_QWORD *)v243 + 16))(v243);
                      }
                      return 0;
                    }
LABEL_416:
                    if (v290 < 0)
                      operator delete(*((void **)&v288 + 1));
                    goto LABEL_418;
                  }
                }
                else if ((SHIBYTE(v294) & 0x80000000) == 0)
                {
                  goto LABEL_412;
                }
                operator delete(v292);
                if (!(_BYTE)v291)
                  goto LABEL_418;
                goto LABEL_416;
              }
              *(_DWORD *)value = 134217984;
              *(double *)&value[4] = v224;
              v225 = (char *)_os_log_send_and_compose_impl();
              v226 = strlen(v225);
              v269.tv_sec = 0;
              pthread_threadid_np(0, (__uint64_t *)&v269);
              v227 = v269.tv_sec;
              timespec_get(&v269, 1);
              sub_210219E20(value, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v220 + 1), (__int128 *)(v220 + 5), "UserSessionID retrieval completed in %f ms", 0x2AuLL, v225, v226, v227, &v269);
              std::mutex::lock(&stru_254A5A410);
              v228 = qword_254A5A458;
              for (n = unk_254A5A460; v228 != n; v228 += 40)
              {
                v230 = *(_QWORD *)(v228 + 32);
                if (!v230)
                  sub_20E86D37C();
                (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v230 + 48))(v230, value);
              }
              std::mutex::unlock(&stru_254A5A410);
              if (v297 < 0)
              {
                operator delete(__p);
                if ((SHIBYTE(v294) & 0x80000000) == 0)
                {
LABEL_383:
                  if (!(_BYTE)v291)
                  {
LABEL_389:
                    if ((_BYTE)v288 && SHIBYTE(v287) < 0)
                      operator delete(v286[0]);
                    if (SHIBYTE(v285) < 0)
                      operator delete(*(void **)&value[8]);
                    if (v225)
                      free(v225);
                    goto LABEL_396;
                  }
LABEL_387:
                  if (v290 < 0)
                    operator delete(*((void **)&v288 + 1));
                  goto LABEL_389;
                }
              }
              else if ((SHIBYTE(v294) & 0x80000000) == 0)
              {
                goto LABEL_383;
              }
              operator delete(v292);
              if (!(_BYTE)v291)
                goto LABEL_389;
              goto LABEL_387;
            }
            *(_DWORD *)value = 134217984;
            *(double *)&value[4] = v208;
            v209 = (char *)_os_log_send_and_compose_impl();
            v210 = strlen(v209);
            v269.tv_sec = 0;
            pthread_threadid_np(0, (__uint64_t *)&v269);
            v211 = v269.tv_sec;
            timespec_get(&v269, 1);
            sub_210219E20(value, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v203 + 1), (__int128 *)(v203 + 5), "Config and calibration logging completed in %f ms", 0x31uLL, v209, v210, v211, &v269);
            std::mutex::lock(&stru_254A5A410);
            v212 = qword_254A5A458;
            for (ii = unk_254A5A460; v212 != ii; v212 += 40)
            {
              v214 = *(_QWORD *)(v212 + 32);
              if (!v214)
                sub_20E86D37C();
              (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v214 + 48))(v214, value);
            }
            std::mutex::unlock(&stru_254A5A410);
            if (v297 < 0)
            {
              operator delete(__p);
              if ((SHIBYTE(v294) & 0x80000000) == 0)
              {
LABEL_355:
                if (!(_BYTE)v291)
                {
LABEL_361:
                  if ((_BYTE)v288 && SHIBYTE(v287) < 0)
                    operator delete(v286[0]);
                  if (SHIBYTE(v285) < 0)
                    operator delete(*(void **)&value[8]);
                  if (v209)
                    free(v209);
                  goto LABEL_368;
                }
LABEL_359:
                if (v290 < 0)
                  operator delete(*((void **)&v288 + 1));
                goto LABEL_361;
              }
            }
            else if ((SHIBYTE(v294) & 0x80000000) == 0)
            {
              goto LABEL_355;
            }
            operator delete(v292);
            if (!(_BYTE)v291)
              goto LABEL_361;
            goto LABEL_359;
          }
          sub_20E863438((uint64_t)value);
          *(void **)((char *)v286 + *(_QWORD *)(*(_QWORD *)&value[16] - 24)) = (void *)20;
          v175 = sub_20E86A980(&value[16], (uint64_t)"SLAM calibration:\n ", 19);
          v176 = sub_20EA946D0(v175, v253);
          sub_20E86A980(v176, (uint64_t)"; ", 2);
          v177 = sub_20E86A980(v175, (uint64_t)"Source: ", 8);
          v178 = *(char *)(v253 + 2455);
          if (v178 >= 0)
            v179 = v253 + 2432;
          else
            v179 = *(_QWORD *)(v253 + 2432);
          if (v178 >= 0)
            v180 = *(unsigned __int8 *)(v253 + 2455);
          else
            v180 = *(_QWORD *)(v253 + 2440);
          sub_20E86A980(v177, v179, v180);
          sub_20E86A980(v175, (uint64_t)"\nDid push location on construction? ", 36);
          std::ostream::operator<<();
          if ((__p & 0x10) != 0)
          {
            v183 = v294;
            if (v294 < v289)
            {
              v294 = v289;
              v183 = v289;
            }
            v184 = (const void *)*((_QWORD *)&v288 + 1);
            v181 = v183 - *((_QWORD *)&v288 + 1);
            if (v183 - *((_QWORD *)&v288 + 1) > 0x7FFFFFFFFFFFFFF7)
              goto LABEL_325;
          }
          else
          {
            if ((__p & 8) == 0)
            {
              v181 = 0;
              *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
              p_dst = &__dst;
              goto LABEL_314;
            }
            v184 = v286[1];
            v181 = v288 - (unint64_t)v286[1];
            if ((unint64_t)v288 - (unint64_t)v286[1] > 0x7FFFFFFFFFFFFFF7)
LABEL_325:
              sub_20E860B7C();
          }
          if (v181 >= 0x17)
          {
            v185 = (v181 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v181 | 7) != 0x17)
              v185 = v181 | 7;
            v186 = v185 + 1;
            p_dst = (std::string *)operator new(v185 + 1);
            __dst.__r_.__value_.__l.__size_ = v181;
            __dst.__r_.__value_.__r.__words[2] = v186 | 0x8000000000000000;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
          }
          else
          {
            *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v181;
            p_dst = &__dst;
            if (!v181)
            {
LABEL_314:
              p_dst->__r_.__value_.__s.__data_[v181] = 0;
              v269.tv_sec = (__darwin_time_t)&off_24C9B3B78;
              v271 = &v269;
              sub_20E98E058((uint64_t)&__dst, (uint64_t)&v269);
              v188 = v271;
              if (v271 == &v269)
              {
                v189 = 4;
                v188 = &v269;
              }
              else
              {
                if (!v271)
                  goto LABEL_319;
                v189 = 5;
              }
              (*(void (**)(timespec *, uint64_t))(v188->tv_sec + 8 * v189))(v188, v187);
LABEL_319:
              __s[0] = 0;
              if (CV3DSLAMConfigAsString(a2, __s))
                goto LABEL_343;
              *(_QWORD *)v277 = &off_24C9B3C08;
              *(_QWORD *)&v277[8] = __s;
              *(_QWORD *)&v277[16] = 0;
              *(_QWORD *)&v278 = v277;
              v190 = __s[0];
              v191 = strlen(__s[0]);
              if (v191 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              v192 = v191;
              if (v191 >= 0x17)
              {
                v194 = (v191 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v191 | 7) != 0x17)
                  v194 = v191 | 7;
                v195 = v194 + 1;
                v193 = (std::string *)operator new(v194 + 1);
                v260.__r_.__value_.__l.__size_ = v192;
                v260.__r_.__value_.__r.__words[2] = v195 | 0x8000000000000000;
                v260.__r_.__value_.__r.__words[0] = (std::string::size_type)v193;
              }
              else
              {
                *((_BYTE *)&v260.__r_.__value_.__s + 23) = v191;
                v193 = &v260;
                if (!v191)
                {
LABEL_330:
                  v193->__r_.__value_.__s.__data_[v192] = 0;
                  v280[0] = &off_24C9B3C88;
                  v282 = v280;
                  sub_20E98E058((uint64_t)&v260, (uint64_t)v280);
                  v197 = v282;
                  if (v282 == v280)
                  {
                    v198 = 4;
                    v197 = v280;
                  }
                  else
                  {
                    if (!v282)
                    {
LABEL_335:
                      if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v260.__r_.__value_.__l.__data_);
                      if (!(_QWORD)v278)
                        sub_20E86D37C();
                      (*(void (**)(_QWORD))(*(_QWORD *)v278 + 48))(v278);
                      v200 = (_QWORD *)v278;
                      if ((_BYTE *)v278 == v277)
                      {
                        v201 = 4;
                        v200 = v277;
                        goto LABEL_342;
                      }
                      if ((_QWORD)v278)
                      {
                        v201 = 5;
LABEL_342:
                        (*(void (**)(_QWORD *, uint64_t))(*v200 + 8 * v201))(v200, v199);
                      }
LABEL_343:
                      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(__dst.__r_.__value_.__l.__data_);
                      *(_QWORD *)value = *MEMORY[0x24BEDB7F0];
                      v202 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                      *(_QWORD *)&value[*(_QWORD *)(*(_QWORD *)value - 24)] = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                      *(_QWORD *)&value[16] = v202;
                      v285 = (const char *)(MEMORY[0x24BEDB848] + 16);
                      if (v293 < 0)
                        operator delete(v291);
                      std::streambuf::~streambuf();
                      std::iostream::~basic_iostream();
                      MEMORY[0x212BC6290](&v296);
                      goto LABEL_348;
                    }
                    v198 = 5;
                  }
                  (*(void (**)(_QWORD *, uint64_t))(*v197 + 8 * v198))(v197, v196);
                  goto LABEL_335;
                }
              }
              memmove(v193, v190, v192);
              goto LABEL_330;
            }
          }
          memmove(p_dst, v184, v181);
          goto LABEL_314;
        }
        *(_DWORD *)value = 134217984;
        *(double *)&value[4] = v168;
        v169 = (char *)_os_log_send_and_compose_impl();
        v170 = strlen(v169);
        v269.tv_sec = 0;
        pthread_threadid_np(0, (__uint64_t *)&v269);
        v171 = v269.tv_sec;
        timespec_get(&v269, 1);
        sub_210219E20(value, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v163 + 1), (__int128 *)(v163 + 5), "Process location at construction completed in %f ms", 0x33uLL, v169, v170, v171, &v269);
        std::mutex::lock(&stru_254A5A410);
        v172 = qword_254A5A458;
        for (jj = unk_254A5A460; v172 != jj; v172 += 40)
        {
          v174 = *(_QWORD *)(v172 + 32);
          if (!v174)
            sub_20E86D37C();
          (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v174 + 48))(v174, value);
        }
        std::mutex::unlock(&stru_254A5A410);
        if (v297 < 0)
        {
          operator delete(__p);
          if ((SHIBYTE(v294) & 0x80000000) == 0)
          {
LABEL_279:
            if (!(_BYTE)v291)
            {
LABEL_285:
              if ((_BYTE)v288 && SHIBYTE(v287) < 0)
                operator delete(v286[0]);
              if (SHIBYTE(v285) < 0)
                operator delete(*(void **)&value[8]);
              if (v169)
                free(v169);
              goto LABEL_292;
            }
LABEL_283:
            if (v290 < 0)
              operator delete(*((void **)&v288 + 1));
            goto LABEL_285;
          }
        }
        else if ((SHIBYTE(v294) & 0x80000000) == 0)
        {
          goto LABEL_279;
        }
        operator delete(v292);
        if (!(_BYTE)v291)
          goto LABEL_285;
        goto LABEL_283;
      }
LABEL_268:
      v161 = (unint64_t *)&v71->__shared_owners_;
      do
        v162 = __ldaxr(v161);
      while (__stlxr(v162 - 1, v161));
      if (!v162)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
      goto LABEL_272;
    }
    v269.tv_sec = (__darwin_time_t)&v265;
    v269.tv_nsec = std::chrono::steady_clock::now().__d_.__rep_;
    rep = std::chrono::system_clock::now().__d_.__rep_;
    LODWORD(v271) = 5;
    v272 = "unknown file";
    v273 = 430;
    v275 = 0;
    v276 = 0;
    v274 = "unknown function";
    sub_20EA67338(&v266, &__dst);
    if (!v264)
      sub_20E866B34();
    v82 = &__dst;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v82 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    v251 = (char *)v82;
    sub_20EA66E78(&v266, &theDict);
    v84 = theDict;
    v83 = v259;
    if (v259)
    {
      v85 = (unint64_t *)&v259->__shared_owners_;
      do
        v86 = __ldxr(v85);
      while (__stxr(v86 + 1, v85));
      do
        v87 = __ldaxr(v85);
      while (__stlxr(v87 - 1, v85));
      if (!v87)
      {
        ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
        std::__shared_weak_count::__release_weak(v83);
      }
    }
    if (v84
      && (v88 = (const void *)*MEMORY[0x24BDBD378], *(_QWORD *)value = 0, v88)
      && CFDictionaryGetValueIfPresent(theDict, v88, (const void **)value))
    {
      sub_20EA5E5C4(*(CFIndex *)value, &v260);
      if (v261)
      {
        v89 = &v260;
        if ((v260.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v89 = (std::string *)v260.__r_.__value_.__r.__words[0];
        v262 = v89;
        v90 = (const char *)(a1 + 310);
        if (*((char *)a1 + 2503) < 0)
          v90 = *(const char **)v90;
        v257 = v90;
        v91 = *(_QWORD *)v269.tv_sec;
        if (*(char *)(*(_QWORD *)v269.tv_sec + 39) < 0)
        {
          v93 = *(const char **)(v91 + 16);
          v92 = *(_QWORD *)(v91 + 24);
        }
        else
        {
          v92 = *(unsigned __int8 *)(*(_QWORD *)v269.tv_sec + 39);
          v93 = (const char *)(*(_QWORD *)v269.tv_sec + 16);
        }
        v249 = *(_QWORD *)v269.tv_sec + 16;
        v250 = *(_QWORD *)v269.tv_sec;
        v252 = v80;
        v94 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v94 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)value);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)value);
          if ((_BYTE)v285 && (value[23] & 0x80000000) != 0)
            operator delete(*(void **)value);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        if (byte_254A4A4F8[23] >= 0)
          v95 = byte_254A4A4F8;
        else
          v95 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v96 = byte_254A4A4F8[23];
        else
          v96 = *(_QWORD *)&byte_254A4A4F8[8];
        *(_QWORD *)value = os_log_create(v95, v93);
        v97 = &value[8];
        if (v96 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v96 >= 0x17)
        {
          v98 = v78;
          v99 = v93;
          v100 = (v96 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v96 | 7) != 0x17)
            v100 = v96 | 7;
          v101 = v100 + 1;
          v97 = operator new(v100 + 1);
          *(_QWORD *)&value[16] = v96;
          v285 = (const char *)(v101 | 0x8000000000000000);
          *(_QWORD *)&value[8] = v97;
          v93 = v99;
          v78 = v98;
        }
        else
        {
          HIBYTE(v285) = v96;
          if (!v96)
          {
LABEL_160:
            v97[v96] = 0;
            LOBYTE(v286[0]) = 1;
            v102 = &v286[1];
            if (v92 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v92 >= 0x17)
            {
              v103 = v78;
              v104 = v93;
              v105 = (v92 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v92 | 7) != 0x17)
                v105 = v92 | 7;
              v106 = v105 + 1;
              v102 = (void **)operator new(v105 + 1);
              v287 = v92;
              *(_QWORD *)&v288 = v106 | 0x8000000000000000;
              v286[1] = v102;
              v93 = v104;
              v78 = v103;
            }
            else
            {
              BYTE7(v288) = v92;
              if (!v92)
                goto LABEL_168;
            }
            memmove(v102, v93, v92);
LABEL_168:
            *((_BYTE *)v102 + v92) = 0;
            BYTE8(v288) = 1;
            v107 = *(NSObject **)value;
            if (SBYTE7(v288) < 0)
              operator delete(v286[1]);
            if (LOBYTE(v286[0]) && SHIBYTE(v285) < 0)
              operator delete(*(void **)&value[8]);
            if (*(_QWORD *)value)
              os_release(*(void **)value);
            if (v252 && *(_QWORD *)(v252 + 24))
            {
              v108 = _os_log_pack_size();
              v109 = (std::__shared_weak_count_vtbl *)operator new(v108, (std::align_val_t)8uLL);
              v110 = (std::__shared_weak_count *)operator new();
              v110->__shared_owners_ = 0;
              v111 = (unint64_t *)&v110->__shared_owners_;
              v110->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v110->__shared_weak_owners_ = 0;
              v110[1].__vftable = v109;
              v280[0] = v109;
              v280[1] = v109;
              v282 = 0;
              v283 = 0;
              v281 = v110;
              sub_20E98F554((uint64_t)value, v251, (const char **)&v262, &v257);
              v112 = (char *)operator new(0x68uLL);
              v113 = (std::__shared_weak_count *)v112;
              *((_QWORD *)v112 + 3) = off_24C9B3310;
              *(_QWORD *)v112 = &off_24C9B32C0;
              *((_QWORD *)v112 + 6) = v285;
              v114 = v289;
              *((_QWORD *)v112 + 9) = v287;
              *((_QWORD *)v112 + 1) = 0;
              v115 = (unint64_t *)(v112 + 8);
              *((_QWORD *)v112 + 2) = 0;
              *((_OWORD *)v112 + 2) = *(_OWORD *)&value[8];
              *(_OWORD *)(v112 + 56) = *(_OWORD *)v286;
              *((_QWORD *)v112 + 12) = v114;
              *((_OWORD *)v112 + 5) = v288;
              v282 = v112 + 24;
              v283 = v112;
              *(_QWORD *)v277 = v109;
              *(_QWORD *)&v277[8] = v109;
              *(_QWORD *)&v277[16] = v110;
              do
                v116 = __ldxr(v111);
              while (__stxr(v116 + 1, v111));
              *(_QWORD *)&v278 = v112 + 24;
              *((_QWORD *)&v278 + 1) = v112;
              do
                v117 = __ldxr(v115);
              while (__stxr(v117 + 1, v115));
              v279 = v112 + 24;
              do
                v118 = __ldaxr(v115);
              while (__stlxr(v118 - 1, v115));
              if (!v118)
              {
                (*(void (**)(char *))(*(_QWORD *)v112 + 16))(v112);
                std::__shared_weak_count::__release_weak(v113);
              }
              v248 = v78;
              v119 = v281;
              if (v281)
              {
                v120 = (unint64_t *)&v281->__shared_owners_;
                do
                  v121 = __ldaxr(v120);
                while (__stlxr(v121 - 1, v120));
                if (!v121)
                {
                  ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
                  std::__shared_weak_count::__release_weak(v119);
                }
              }
              v122 = *(_QWORD *)v277;
              if (v279[31] >= 0)
                v123 = v279 + 8;
              else
                v123 = (char *)*((_QWORD *)v279 + 1);
              if (v279[55] >= 0)
                v124 = v279 + 32;
              else
                v124 = (char *)*((_QWORD *)v279 + 4);
              if (v279[79] >= 0)
                v125 = v279 + 56;
              else
                v125 = (char *)*((_QWORD *)v279 + 7);
              v126 = _os_log_pack_fill();
              *(_DWORD *)v126 = 136446722;
              *(_QWORD *)(v126 + 4) = v123;
              *(_WORD *)(v126 + 12) = 2082;
              *(_QWORD *)(v126 + 14) = v124;
              *(_WORD *)(v126 + 22) = 2082;
              *(_QWORD *)(v126 + 24) = v125;
              v127 = operator new();
              v128 = *(unsigned __int8 *)(v250 + 39);
              v129 = v249;
              if ((v128 & 0x80u) != 0)
              {
                v129 = *(_QWORD *)(v250 + 16);
                v128 = *(_QWORD *)(v250 + 24);
              }
              *(_QWORD *)v127 = v122;
              *(_OWORD *)(v127 + 8) = *(_OWORD *)&v277[8];
              *(_QWORD *)&v277[8] = 0;
              *(_QWORD *)&v277[16] = 0;
              *(_OWORD *)(v127 + 24) = v278;
              v278 = 0uLL;
              *(_QWORD *)(v127 + 40) = v129;
              *(_QWORD *)(v127 + 48) = v128;
              *(_BYTE *)(v127 + 56) = 16;
              v280[0] = 0;
              *(_QWORD *)value = v127;
              (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v252 + 24) + 40))(*(_QWORD *)(v252 + 24), value);
              v78 = v248;
              v130 = *(_QWORD *)value;
              *(_QWORD *)value = 0;
              if (v130)
              {
                v131 = *(std::__shared_weak_count **)(v130 + 32);
                if (v131)
                {
                  v132 = (unint64_t *)&v131->__shared_owners_;
                  do
                    v133 = __ldaxr(v132);
                  while (__stlxr(v133 - 1, v132));
                  if (!v133)
                  {
                    ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
                    std::__shared_weak_count::__release_weak(v131);
                  }
                }
                v134 = *(std::__shared_weak_count **)(v130 + 16);
                if (v134)
                {
                  v135 = (unint64_t *)&v134->__shared_owners_;
                  do
                    v136 = __ldaxr(v135);
                  while (__stlxr(v136 - 1, v135));
                  if (!v136)
                  {
                    ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
                    std::__shared_weak_count::__release_weak(v134);
                  }
                }
                MEMORY[0x212BC6398](v130, 0x10F0C40B62ED6C6);
                v137 = v280[0];
                v280[0] = 0;
                if (v137)
                {
                  v138 = *(std::__shared_weak_count **)(v137 + 32);
                  if (v138)
                  {
                    v139 = (unint64_t *)&v138->__shared_owners_;
                    do
                      v140 = __ldaxr(v139);
                    while (__stlxr(v140 - 1, v139));
                    if (!v140)
                    {
                      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                      std::__shared_weak_count::__release_weak(v138);
                    }
                  }
                  v141 = *(std::__shared_weak_count **)(v137 + 16);
                  if (v141)
                  {
                    v142 = (unint64_t *)&v141->__shared_owners_;
                    do
                      v143 = __ldaxr(v142);
                    while (__stlxr(v143 - 1, v142));
                    if (!v143)
                    {
                      ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
                      std::__shared_weak_count::__release_weak(v141);
                    }
                  }
                  MEMORY[0x212BC6398](v137, 0x10F0C40B62ED6C6);
                }
              }
              if (v248)
              {
                *(_DWORD *)value = 136446722;
                *(_QWORD *)&value[4] = v251;
                *(_WORD *)&value[12] = 2082;
                *(_QWORD *)&value[14] = v262;
                *(_WORD *)&value[22] = 2082;
                v285 = v257;
                v144 = (char *)_os_log_send_and_compose_impl();
              }
              else
              {
                v144 = 0;
              }
              v146 = (std::__shared_weak_count *)*((_QWORD *)&v278 + 1);
              if (*((_QWORD *)&v278 + 1))
              {
                v147 = (unint64_t *)(*((_QWORD *)&v278 + 1) + 8);
                do
                  v148 = __ldaxr(v147);
                while (__stlxr(v148 - 1, v147));
                if (!v148)
                {
                  ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
                  std::__shared_weak_count::__release_weak(v146);
                }
              }
              v149 = *(std::__shared_weak_count **)&v277[16];
              if (*(_QWORD *)&v277[16])
              {
                v150 = (unint64_t *)(*(_QWORD *)&v277[16] + 8);
                do
                  v151 = __ldaxr(v150);
                while (__stlxr(v151 - 1, v150));
                if (!v151)
                {
                  ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
                  std::__shared_weak_count::__release_weak(v149);
                }
              }
            }
            else
            {
              os_log_type_enabled(v107, OS_LOG_TYPE_ERROR);
              if (v78)
              {
                *(_DWORD *)value = 136446722;
                *(_QWORD *)&value[4] = v251;
                *(_WORD *)&value[12] = 2082;
                *(_QWORD *)&value[14] = v262;
                *(_WORD *)&value[22] = 2082;
                v285 = v257;
                v144 = (char *)_os_log_send_and_compose_impl();
              }
              else
              {
                *(_DWORD *)value = 136446722;
                *(_QWORD *)&value[4] = v251;
                *(_WORD *)&value[12] = 2082;
                *(_QWORD *)&value[14] = v262;
                *(_WORD *)&value[22] = 2082;
                v285 = v257;
                v145 = (void *)_os_log_send_and_compose_impl();
                if (v145)
                  free(v145);
                v144 = 0;
              }
            }
            if (v261 && SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v260.__r_.__value_.__l.__data_);
            v152 = v259;
            if (v259)
            {
              v153 = (unint64_t *)&v259->__shared_owners_;
              do
                v154 = __ldaxr(v153);
              while (__stlxr(v154 - 1, v153));
              if (!v154)
              {
                ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
                std::__shared_weak_count::__release_weak(v152);
              }
            }
            if (v264 && SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__dst.__r_.__value_.__l.__data_);
            if (v78)
            {
              sub_20E8C003C((uint64_t)&v269, v144);
              sub_20E863570((uint64_t)&v269);
            }
            if (v144)
              free(v144);
            sub_20E863570((uint64_t)&v269);
            v155 = v276;
            if (v276)
            {
              v156 = (unint64_t *)&v276->__shared_owners_;
              do
                v157 = __ldaxr(v156);
              while (__stlxr(v157 - 1, v156));
              if (!v157)
              {
                ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
                std::__shared_weak_count::__release_weak(v155);
              }
            }
            goto LABEL_262;
          }
        }
        memmove(v97, v95, v96);
        goto LABEL_160;
      }
    }
    else
    {
      v260.__r_.__value_.__s.__data_[0] = 0;
      v261 = 0;
    }
    sub_20E866B34();
  }
  return result;
}

void sub_20E979B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a72;
  char a73;

  if (a73 && a72 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_254A4A510);
  if (a36 && a35 < 0)
    operator delete(a30);
  sub_20E86665C((uint64_t)&a28);
  if (a44)
  {
    if (a43 < 0)
      operator delete(a38);
  }
  sub_20E863714((uint64_t)&a49);
  sub_20E86665C((uint64_t)&a46);
  sub_20EAB0F68((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void sub_20E979D48(_Unwind_Exception *exception_object, int a2)
{
  const void *v2;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    if (v2)
      CFRelease(v2);
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_20E979D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  __cxa_end_catch();
  sub_20EAB0F68((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E979DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a66;

  if ((a40 & 0x80000000) == 0)
    JUMPOUT(0x20E979DB8);
  operator delete(a35);
  sub_20E863784(&a66);
  _Unwind_Resume(a1);
}

void sub_20E979DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,char *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a66;
  char *v66;
  char *v68;
  uint64_t v69;

  v68 = a49;
  if (a49 == v66)
  {
    v69 = 4;
    v68 = &a46;
  }
  else
  {
    if (!a49)
    {
      if (a40 < 0)
        goto LABEL_6;
      goto LABEL_5;
    }
    v69 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v68 + 8 * v69))();
  if (a40 < 0)
  {
LABEL_6:
    operator delete(a35);
    sub_20E863784(&a66);
    _Unwind_Resume(a1);
  }
LABEL_5:
  sub_20E863784(&a66);
  _Unwind_Resume(a1);
}

void sub_20E979E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  sub_20E863784((uint64_t)&a63);
  _Unwind_Resume(a1);
}

void sub_20E979E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,unint64_t *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  void *v63;
  unint64_t *v65;
  unint64_t v66;

  sub_20E96E218((uint64_t)&a63);
  if (v63)
    free(v63);
  if (a35)
  {
    v65 = a35 + 1;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      (*(void (**)(unint64_t *))(*a35 + 16))(a35);
      _Unwind_Resume(a1);
    }
  }
  JUMPOUT(0x20E97A03CLL);
}

void sub_20E979E40(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  _Unwind_Resume(a1);
}

void sub_20E979E50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,unint64_t *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  uint64_t v63;
  unint64_t *v65;
  unint64_t v66;

  sub_20E96E218((uint64_t)&a63);
  if (v63)
    JUMPOUT(0x20E979F9CLL);
  if (a35)
  {
    v65 = a35 + 1;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      (*(void (**)(unint64_t *))(*a35 + 16))(a35);
      _Unwind_Resume(a1);
    }
  }
  JUMPOUT(0x20E97A03CLL);
}

void sub_20E979E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,unint64_t *a35)
{
  unint64_t *v35;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;

  v37 = v35 + 1;
  do
    v38 = __ldaxr(v37);
  while (__stlxr(v38 - 1, v37));
  if (!v38)
    (*(void (**)(unint64_t *))(*v35 + 16))(v35);
  if (a35)
  {
    v39 = a35 + 1;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      (*(void (**)(unint64_t *))(*a35 + 16))(a35);
      _Unwind_Resume(a1);
    }
  }
  JUMPOUT(0x20E97A03CLL);
}

void sub_20E979E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  void *v63;

  sub_20E96E218((uint64_t)&a63);
  if (v63)
  {
    free(v63);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20E979E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  void *v63;

  sub_20E96E218((uint64_t)&a63);
  if (!v63)
    JUMPOUT(0x20E97A03CLL);
  free(v63);
  _Unwind_Resume(a1);
}

void sub_20E979E98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,unint64_t *a35)
{
  unint64_t *v36;
  unint64_t v37;

  if (a35)
  {
    v36 = a35 + 1;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      (*(void (**)(unint64_t *))(*a35 + 16))(a35);
      _Unwind_Resume(a1);
    }
  }
  JUMPOUT(0x20E97A03CLL);
}

void sub_20E979EB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t v63;

  sub_20E96E218(&a63);
  if (!v63)
    JUMPOUT(0x20E97A03CLL);
  JUMPOUT(0x20E97A064);
}

void sub_20E979EB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t v63;

  sub_20E96E218(&a63);
  if (!v63)
    JUMPOUT(0x20E97A03CLL);
  JUMPOUT(0x20E97A064);
}

void sub_20E979EC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  uint64_t v63;

  sub_20E96E218((uint64_t)&a63);
  if (v63)
    JUMPOUT(0x20E97A064);
  _Unwind_Resume(a1);
}

void sub_20E979EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,unint64_t *a35)
{
  void *v35;
  unint64_t *v37;
  unint64_t v38;

  if (v35)
    free(v35);
  if (a35)
  {
    v37 = a35 + 1;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      (*(void (**)(unint64_t *))(*a35 + 16))(a35);
      _Unwind_Resume(a1);
    }
  }
  JUMPOUT(0x20E97A03CLL);
}

void sub_20E979ED4()
{
  JUMPOUT(0x20E979F98);
}

void sub_20E979EDC()
{
  JUMPOUT(0x20E979FF4);
}

void sub_20E979EE4(_Unwind_Exception *a1)
{
  void *v1;

  if (!v1)
    _Unwind_Resume(a1);
  free(v1);
  _Unwind_Resume(a1);
}

void sub_20E979EF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  sub_20E877A60((uint64_t)&a43);
  JUMPOUT(0x20E979FA4);
}

void sub_20E979F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;

  if (a64)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a64 + 8))(a64);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20E979F24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  sub_20E863784((uint64_t)&a63);
  _Unwind_Resume(a1);
}

void sub_20E979F38(_Unwind_Exception *a1)
{
  void *v1;

  if (!v1)
    _Unwind_Resume(a1);
  free(v1);
  _Unwind_Resume(a1);
}

void sub_20E979F44(_Unwind_Exception *a1)
{
  void *v1;

  if (!v1)
    _Unwind_Resume(a1);
  free(v1);
  _Unwind_Resume(a1);
}

void sub_20E979F50()
{
  JUMPOUT(0x20E97A060);
}

void sub_20E979F58()
{
  std::mutex::unlock(&stru_254A5A410);
  JUMPOUT(0x20E979F6CLL);
}

void sub_20E979F7C()
{
  std::mutex::unlock(&stru_254A5A410);
  JUMPOUT(0x20E979F90);
}

void sub_20E979FD8()
{
  std::mutex::unlock(&stru_254A5A410);
  JUMPOUT(0x20E979FECLL);
}

void sub_20E97A008()
{
  std::mutex::unlock(&stru_254A5A410);
  JUMPOUT(0x20E97A030);
}

void sub_20E97A044()
{
  std::mutex::unlock(&stru_254A5A410);
  JUMPOUT(0x20E97A058);
}

uint64_t sub_20E97A074()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  uint64_t *v9;
  double v10;
  std::chrono::steady_clock::time_point v11;
  unsigned __int8 v12;
  unint64_t v13;
  double v14;
  char *v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  uint64_t *v21;
  double v22;
  std::chrono::steady_clock::time_point v23;
  unsigned __int8 v24;
  unint64_t v25;
  double v26;
  char *v27;
  size_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t j;
  uint64_t v32;
  uint64_t *v33;
  double v34;
  std::chrono::steady_clock::time_point v35;
  unsigned __int8 v36;
  unint64_t v37;
  double v38;
  char *v39;
  size_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t k;
  uint64_t v44;
  unsigned int v45;
  BOOL v46;
  unsigned __int8 v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *tv_nsec;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *p_shared_owners;
  unint64_t v55;
  uint64_t *v56;
  double v57;
  std::chrono::steady_clock::time_point v58;
  unsigned __int8 v59;
  unint64_t v60;
  double v61;
  char *v62;
  size_t v63;
  __darwin_time_t tv_sec;
  uint64_t v65;
  uint64_t m;
  uint64_t v67;
  BOOL v68;
  char v69;
  uint64_t v70;
  std::logic_error *exception;
  __int128 *v72;
  __int128 v73;
  int64x2_t v74;
  int64x2_t v75;
  unint64_t v76;
  __int128 v77;
  int64x2_t v78;
  int64x2_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 *v83;
  __int128 v84;
  int64x2_t v85;
  int64x2_t v86;
  unint64_t v87;
  __int128 v88;
  int64x2_t v89;
  int64x2_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t *v103;
  double v104;
  std::chrono::steady_clock::time_point v105;
  unsigned __int8 v106;
  unint64_t v107;
  double v108;
  char *v109;
  size_t v110;
  __darwin_time_t v111;
  uint64_t v112;
  uint64_t n;
  uint64_t v114;
  int v115;
  unint64_t v116;
  unint64_t v117;
  size_t v118;
  void **v119;
  char *v120;
  const void *v121;
  uint64_t v122;
  uint64_t v123;
  void **v124;
  uint64_t v125;
  const char *v126;
  size_t v127;
  _QWORD *v128;
  unsigned __int8 v129;
  unsigned __int8 v130;
  const char *v131;
  size_t v132;
  _BYTE *v133;
  uint64_t v134;
  uint64_t v135;
  void **v136;
  uint64_t v137;
  uint64_t v138;
  NSObject *v139;
  size_t v140;
  std::__shared_weak_count_vtbl *v141;
  std::__shared_weak_count *v142;
  size_t v143;
  size_t v144;
  _QWORD *v145;
  void *v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  char v151;
  _QWORD *v152;
  uint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  void *v157;
  unint64_t *v158;
  unint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  unint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  const char *v172;
  uint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  _QWORD *v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  const char *v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  uint64_t v197;
  unsigned __int16 v198;
  BOOL v199;
  char v200;
  char v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  uint64_t *v205;
  double v206;
  std::chrono::steady_clock::time_point v207;
  unsigned __int8 v208;
  unint64_t v209;
  double v210;
  char *v211;
  size_t v212;
  __darwin_time_t v213;
  uint64_t v214;
  uint64_t ii;
  uint64_t v216;
  uint64_t v217;
  int v218;
  uint64_t v219;
  unsigned int v220;
  unsigned int v221;
  uint64_t v222;
  uint64_t v223;
  void *v224;
  void *v225;
  unint64_t *v226;
  unint64_t v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  uint64_t *v231;
  double v232;
  std::chrono::steady_clock::time_point v233;
  unsigned __int8 v234;
  unint64_t v235;
  double v236;
  char *v237;
  size_t v238;
  __darwin_time_t v239;
  uint64_t v240;
  uint64_t i1;
  uint64_t v242;
  uint64_t v243;
  uint64_t *v244;
  double v245;
  std::chrono::steady_clock::time_point v246;
  unsigned __int8 v247;
  unint64_t v248;
  double v249;
  char *v250;
  size_t v251;
  __darwin_time_t v252;
  uint64_t v253;
  uint64_t nn;
  uint64_t v255;
  uint64_t *v256;
  double v257;
  std::chrono::steady_clock::time_point v258;
  unsigned __int8 v259;
  unint64_t v260;
  double v261;
  char *v262;
  size_t v263;
  __darwin_time_t v264;
  uint64_t v265;
  uint64_t mm;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  _QWORD *v270;
  char *v271;
  uint64_t *v272;
  double v273;
  std::chrono::steady_clock::time_point v274;
  unsigned __int8 v275;
  unint64_t v276;
  double v277;
  char *v278;
  size_t v279;
  __darwin_time_t v280;
  uint64_t v281;
  uint64_t kk;
  uint64_t v283;
  uint64_t *v284;
  double v285;
  unsigned __int8 v286;
  unint64_t v287;
  double v288;
  char *v289;
  size_t v290;
  __darwin_time_t v291;
  uint64_t v292;
  uint64_t jj;
  uint64_t v294;
  uint64_t v295;
  std::__shared_weak_count *v296;
  unint64_t *v297;
  unint64_t v298;
  uint64_t v299;
  uint64_t v300;
  void *v301;
  const char *v303;
  uint64_t v304;
  int v305;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v306;
  unint64_t v307;
  _QWORD *v308;
  _BYTE *v309;
  uint64_t *v310;
  void *v311;
  char *__s;
  char *__sa;
  uint64_t v314;
  uint64_t v315;
  _QWORD *v316;
  char v317[8];
  uint64_t v318[4];
  std::__shared_weak_count *v319;
  int64x2_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  _QWORD v324[3];
  int v325;
  const char *v326;
  int v327;
  const char *v328;
  uint64_t v329;
  std::__shared_weak_count *v330;
  void *__dst[2];
  int64_t v332;
  uint64_t v333;
  timespec v334;
  void *v335;
  void *v336;
  void *v337;
  void *v338;
  std::__shared_weak_count *v339;
  char v340;
  __int128 v341;
  std::__shared_weak_count *v342;
  char *v343;
  std::__shared_weak_count *v344;
  _QWORD *v345;
  __int128 v346;
  int v347;
  _BYTE v348[12];
  char v349;
  void *v350;
  char v351;
  char v352;
  void *v353;
  char v354;
  char v355;
  void *v356;
  char v357;
  void *__p;
  char v359;
  char v360;
  char v361;
  char v362;
  __int16 v363;
  __int128 __src;
  uint64_t v365;
  char v366;
  __int128 v367;
  uint64_t v368;
  int v369;
  unsigned int v370;
  int v371;
  char v372;
  void *v373;
  char v374;
  uint64_t v375;
  unsigned int v376;
  void *v377;
  void *v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  char v383;
  uint64_t v384;
  _BYTE v385[24];
  uint64_t v386;
  _BYTE v387[24];
  __int128 v388;
  unint64_t v389;
  void *v390[2];
  void *v391[2];
  void *v392[2];
  char v393[15];
  char v394;
  char v395;
  _BYTE v396[24];
  __int128 v397;
  void *v398[2];
  unint64_t v399;
  char v400;
  _QWORD v401[5];

  v0 = (_QWORD *)MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v5 = (uint64_t)v0;
  v7 = v6;
  v401[2] = *MEMORY[0x24BDAC8D0];
  if (v0[1] == *v0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp", 2309, (uint64_t)"hardware_params.num_cameras()", 29, (uint64_t)"No cameras in calbration", 24, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  sub_20EBDEDA8(v5, *(_DWORD *)v4, *(_DWORD *)(v4 + 12876) == 3, (uint64_t)&v321);
  v9 = sub_210219C18();
  v10 = (double)(std::chrono::steady_clock::now().__d_.__rep_ - rep);
  v11.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v12 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  v13 = atomic_load(&qword_254A5A450);
  v14 = v10 / 1000000.0;
  v315 = v4;
  if (v13)
  {
    v347 = 134217984;
    *(double *)v348 = v14;
    v15 = (char *)_os_log_send_and_compose_impl();
    v16 = strlen(v15);
    *(_QWORD *)v385 = 0;
    pthread_threadid_np(0, (__uint64_t *)v385);
    v17 = *(_QWORD *)v385;
    timespec_get((timespec *)v385, 1);
    sub_210219E20(&v347, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v9 + 1), (__int128 *)(v9 + 5), "Scaling HardwareParams completed in %f ms", 0x29uLL, v15, v16, v17, v385);
    std::mutex::lock(&stru_254A5A410);
    v18 = qword_254A5A458;
    for (i = unk_254A5A460; v18 != i; v18 += 40)
    {
      v20 = *(_QWORD *)(v18 + 32);
      if (!v20)
        sub_20E86D37C();
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v20 + 48))(v20, &v347);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v359 < 0)
    {
      operator delete(__p);
      v4 = v315;
      if ((v357 & 0x80000000) == 0)
      {
LABEL_10:
        if (!v355)
        {
LABEL_16:
          if (v352 && v351 < 0)
            operator delete(v350);
          if (v349 < 0)
            operator delete(*(void **)&v348[4]);
          if (v15)
            free(v15);
          goto LABEL_23;
        }
LABEL_14:
        if (v354 < 0)
          operator delete(v353);
        goto LABEL_16;
      }
    }
    else
    {
      v4 = v315;
      if ((v357 & 0x80000000) == 0)
        goto LABEL_10;
    }
    operator delete(v356);
    if (!v355)
      goto LABEL_16;
    goto LABEL_14;
  }
LABEL_23:
  if (os_signpost_enabled((os_log_t)*v9))
  {
    v347 = 134217984;
    *(double *)v348 = v14;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  sub_20EA8FB14(&v321);
  v21 = sub_210219C18();
  v22 = (double)(std::chrono::steady_clock::now().__d_.__rep_ - v11.__d_.__rep_);
  v23.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v24 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v24 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  v25 = atomic_load(&qword_254A5A450);
  v26 = v22 / 1000000.0;
  if (v25)
  {
    v347 = 134217984;
    *(double *)v348 = v26;
    v27 = (char *)_os_log_send_and_compose_impl();
    v28 = strlen(v27);
    *(_QWORD *)v385 = 0;
    pthread_threadid_np(0, (__uint64_t *)v385);
    v29 = *(_QWORD *)v385;
    timespec_get((timespec *)v385, 1);
    sub_210219E20(&v347, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v21 + 1), (__int128 *)(v21 + 5), "External lens undistortion instantiation completed in %f ms", 0x3BuLL, v27, v28, v29, v385);
    std::mutex::lock(&stru_254A5A410);
    v30 = qword_254A5A458;
    for (j = unk_254A5A460; v30 != j; v30 += 40)
    {
      v32 = *(_QWORD *)(v30 + 32);
      if (!v32)
        sub_20E86D37C();
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v32 + 48))(v32, &v347);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v359 < 0)
    {
      operator delete(__p);
      v4 = v315;
      if ((v357 & 0x80000000) == 0)
      {
LABEL_32:
        if (!v355)
        {
LABEL_38:
          if (v352 && v351 < 0)
            operator delete(v350);
          if (v349 < 0)
            operator delete(*(void **)&v348[4]);
          if (v27)
            free(v27);
          goto LABEL_45;
        }
LABEL_36:
        if (v354 < 0)
          operator delete(v353);
        goto LABEL_38;
      }
    }
    else
    {
      v4 = v315;
      if ((v357 & 0x80000000) == 0)
        goto LABEL_32;
    }
    operator delete(v356);
    if (!v355)
      goto LABEL_38;
    goto LABEL_36;
  }
LABEL_45:
  if (os_signpost_enabled((os_log_t)*v21))
  {
    v347 = 134217984;
    *(double *)v348 = v26;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  sub_20EBDE848((unsigned int *)(v4 + 12884), &v320);
  sub_2102176BC((uint64_t)v317, *(_DWORD *)(v4 + 12880), "SLAMTG", 6uLL, v320.i64);
  v33 = sub_210219C18();
  v34 = (double)(std::chrono::steady_clock::now().__d_.__rep_ - v23.__d_.__rep_);
  v35.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v36 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v36 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  v37 = atomic_load(&qword_254A5A450);
  v38 = v34 / 1000000.0;
  if (v37)
  {
    v347 = 134217984;
    *(double *)v348 = v38;
    v39 = (char *)_os_log_send_and_compose_impl();
    v40 = strlen(v39);
    *(_QWORD *)v385 = 0;
    pthread_threadid_np(0, (__uint64_t *)v385);
    v41 = *(_QWORD *)v385;
    timespec_get((timespec *)v385, 1);
    sub_210219E20(&v347, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v33 + 1), (__int128 *)(v33 + 5), "Scheduler creation completed in %f ms", 0x25uLL, v39, v40, v41, v385);
    std::mutex::lock(&stru_254A5A410);
    v42 = qword_254A5A458;
    for (k = unk_254A5A460; v42 != k; v42 += 40)
    {
      v44 = *(_QWORD *)(v42 + 32);
      if (!v44)
        sub_20E86D37C();
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v44 + 48))(v44, &v347);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v359 < 0)
    {
      operator delete(__p);
      v4 = v315;
      if ((v357 & 0x80000000) == 0)
      {
LABEL_54:
        if (!v355)
        {
LABEL_60:
          if (v352 && v351 < 0)
            operator delete(v350);
          if (v349 < 0)
            operator delete(*(void **)&v348[4]);
          if (v39)
            free(v39);
          goto LABEL_67;
        }
LABEL_58:
        if (v354 < 0)
          operator delete(v353);
        goto LABEL_60;
      }
    }
    else
    {
      v4 = v315;
      if ((v357 & 0x80000000) == 0)
        goto LABEL_54;
    }
    operator delete(v356);
    if (!v355)
      goto LABEL_60;
    goto LABEL_58;
  }
LABEL_67:
  if (os_signpost_enabled((os_log_t)*v33))
  {
    v347 = 134217984;
    *(double *)v348 = v38;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  v310 = v2;
  sub_20E909008((uint64_t)&v347, v4);
  v383 = *(_BYTE *)(v4 + 12892);
  v309 = (_BYTE *)(v4 + 8687);
  v362 = *(_BYTE *)(v4 + 9064);
  v45 = (unsigned __int16)sub_20E9E4E00();
  if (v45 <= 0x100)
    LOBYTE(v45) = 0;
  if ((_BYTE)v45)
    v46 = v360 == 0;
  else
    v46 = 1;
  v47 = !v46;
  sub_210218050("MLFeatureDetectionNodeGroup", 0x1BuLL, (uint64_t)v317, 0, v396);
  *(_WORD *)v385 = v363;
  if (SHIBYTE(v365) < 0)
  {
    sub_20E860C04(&v385[8], (void *)__src, *((unint64_t *)&__src + 1));
  }
  else
  {
    *(_OWORD *)&v385[8] = __src;
    v386 = v365;
  }
  v387[0] = v366;
  if (SHIBYTE(v368) < 0)
  {
    sub_20E860C04(&v387[8], (void *)v367, *((unint64_t *)&v367 + 1));
  }
  else
  {
    *(_OWORD *)&v387[8] = v367;
    *(_QWORD *)&v388 = v368;
  }
  DWORD2(v388) = v369;
  v389 = v370;
  LODWORD(v390[0]) = v371;
  BYTE4(v390[0]) = v372;
  v390[1] = v373;
  v316 = (_QWORD *)operator new();
  v334 = *(timespec *)v396;
  if (*(_QWORD *)&v396[8])
  {
    v48 = (unint64_t *)(*(_QWORD *)&v396[8] + 8);
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 1, v48));
  }
  sub_20ED51D4C((uint64_t)v316, &v334.tv_sec, v47, (uint64_t)v385);
  tv_nsec = (std::__shared_weak_count *)v334.tv_nsec;
  if (!v334.tv_nsec)
    goto LABEL_90;
  v51 = (unint64_t *)(v334.tv_nsec + 8);
  do
    v52 = __ldaxr(v51);
  while (__stlxr(v52 - 1, v51));
  if (!v52)
  {
    ((void (*)(std::__shared_weak_count *))tv_nsec->__on_zero_shared)(tv_nsec);
    std::__shared_weak_count::__release_weak(tv_nsec);
    if ((SBYTE7(v388) & 0x80000000) == 0)
    {
LABEL_91:
      if ((SHIBYTE(v386) & 0x80000000) == 0)
        goto LABEL_92;
LABEL_96:
      operator delete(*(void **)&v385[8]);
      v53 = *(std::__shared_weak_count **)&v396[8];
      if (!*(_QWORD *)&v396[8])
        goto LABEL_101;
      goto LABEL_97;
    }
  }
  else
  {
LABEL_90:
    if ((SBYTE7(v388) & 0x80000000) == 0)
      goto LABEL_91;
  }
  operator delete(*(void **)&v387[8]);
  if (SHIBYTE(v386) < 0)
    goto LABEL_96;
LABEL_92:
  v53 = *(std::__shared_weak_count **)&v396[8];
  if (!*(_QWORD *)&v396[8])
    goto LABEL_101;
LABEL_97:
  p_shared_owners = (unint64_t *)&v53->__shared_owners_;
  do
    v55 = __ldaxr(p_shared_owners);
  while (__stlxr(v55 - 1, p_shared_owners));
  if (!v55)
  {
    ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
    std::__shared_weak_count::__release_weak(v53);
  }
LABEL_101:
  v56 = sub_210219C18();
  v57 = (double)(std::chrono::steady_clock::now().__d_.__rep_ - v35.__d_.__rep_);
  v58.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v59 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v59 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  v60 = atomic_load(&qword_254A5A450);
  v61 = v57 / 1000000.0;
  if (v60)
  {
    *(_DWORD *)v385 = 134217984;
    *(double *)&v385[4] = v61;
    v62 = (char *)_os_log_send_and_compose_impl();
    v63 = strlen(v62);
    v334.tv_sec = 0;
    pthread_threadid_np(0, (__uint64_t *)&v334);
    tv_sec = v334.tv_sec;
    timespec_get(&v334, 1);
    sub_210219E20(v385, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v56 + 1), (__int128 *)(v56 + 5), "MLDescExtractionNode creation completed in %f ms", 0x30uLL, v62, v63, tv_sec, &v334);
    std::mutex::lock(&stru_254A5A410);
    v65 = qword_254A5A458;
    for (m = unk_254A5A460; v65 != m; v65 += 40)
    {
      v67 = *(_QWORD *)(v65 + 32);
      if (!v67)
        sub_20E86D37C();
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v67 + 48))(v67, v385);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v394 < 0)
    {
      operator delete(v392[1]);
      if ((SHIBYTE(v392[0]) & 0x80000000) == 0)
      {
LABEL_108:
        if (!LOBYTE(v390[1]))
        {
LABEL_114:
          if ((_BYTE)v388 && (v387[23] & 0x80000000) != 0)
            operator delete(*(void **)v387);
          if (SHIBYTE(v386) < 0)
            operator delete(*(void **)&v385[8]);
          if (v62)
            free(v62);
          goto LABEL_121;
        }
LABEL_112:
        if (SHIBYTE(v390[0]) < 0)
          operator delete(*((void **)&v388 + 1));
        goto LABEL_114;
      }
    }
    else if ((SHIBYTE(v392[0]) & 0x80000000) == 0)
    {
      goto LABEL_108;
    }
    operator delete(v391[0]);
    if (!LOBYTE(v390[1]))
      goto LABEL_114;
    goto LABEL_112;
  }
LABEL_121:
  if (os_signpost_enabled((os_log_t)*v56))
  {
    *(_DWORD *)v385 = 134217984;
    *(double *)&v385[4] = v61;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  if (*(_BYTE *)(v316[7] + 80))
    v68 = v374 == 0;
  else
    v68 = 1;
  v69 = !v68;
  sub_210218050("SemanticsNodeGroup", 0x12uLL, (uint64_t)v317, 0, v396);
  LOBYTE(v390[0]) = 0;
  v393[0] = 0;
  v70 = v321;
  if (v321 != v322)
  {
    while (*(_DWORD *)v70)
    {
      v70 += 1088;
      if (v70 == v322)
        goto LABEL_132;
    }
  }
  if (v70 == v322)
  {
LABEL_132:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Requested camera id not found.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  v72 = *(__int128 **)(v70 + 24);
  if (*(_QWORD *)(v70 + 32) - (_QWORD)v72 <= 0x18uLL)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/src/Camera.cpp", 45, (uint64_t)"calib.radial_distortion_.size() >= 4", 36, (uint64_t)&unk_2102BAAAD, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v72 = *(__int128 **)(v70 + 24);
  }
  *(_QWORD *)&v73 = *(_QWORD *)(v70 + 136);
  v74 = *(int64x2_t *)(v70 + 120);
  v75 = *(int64x2_t *)(v70 + 144);
  v76 = *(_QWORD *)(v70 + 184);
  v77 = *(_OWORD *)(v70 + 168);
  v78 = vzip1q_s64(v74, v75);
  v79 = vzip2q_s64(v74, v75);
  *((_QWORD *)&v73 + 1) = *(_QWORD *)(v70 + 160);
  v81 = *v72;
  v80 = v72[1];
  v82 = *(_OWORD *)(v70 + 72);
  *(_QWORD *)v385 = *(_QWORD *)(v70 + 8);
  *(int64x2_t *)&v385[8] = v78;
  *(_QWORD *)&v387[16] = *((_QWORD *)&v77 + 1);
  v386 = v77;
  *(int64x2_t *)v387 = v79;
  v388 = v73;
  v389 = v76;
  *(_OWORD *)v390 = v81;
  *(_OWORD *)v391 = v80;
  *(_OWORD *)v392 = v82;
  v393[0] = 1;
  if (*(_DWORD *)(v70 + 4) == 2)
  {
    v83 = *(__int128 **)(v70 + 552);
    if (*(_QWORD *)(v70 + 560) - (_QWORD)v83 <= 0x18uLL)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/src/Camera.cpp", 45, (uint64_t)"calib.radial_distortion_.size() >= 4", 36, (uint64_t)&unk_2102BAAAD, 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v83 = *(__int128 **)(v70 + 552);
    }
    *(_QWORD *)&v84 = *(_QWORD *)(v70 + 664);
    v85 = *(int64x2_t *)(v70 + 648);
    v86 = *(int64x2_t *)(v70 + 672);
    v87 = *(_QWORD *)(v70 + 712);
    v88 = *(_OWORD *)(v70 + 696);
    v89 = vzip1q_s64(v85, v86);
    v90 = vzip2q_s64(v85, v86);
    *((_QWORD *)&v84 + 1) = *(_QWORD *)(v70 + 688);
    v92 = *v83;
    v91 = v83[1];
    v93 = *(_OWORD *)(v70 + 600);
    *(_QWORD *)v385 = *(_QWORD *)(v70 + 536);
    *(int64x2_t *)&v385[8] = v89;
    *(_QWORD *)&v387[16] = *((_QWORD *)&v88 + 1);
    v386 = v88;
    *(int64x2_t *)v387 = v90;
    v388 = v84;
    v389 = v87;
    *(_OWORD *)v390 = v92;
    *(_OWORD *)v391 = v91;
    *(_OWORD *)v392 = v93;
  }
  v94 = operator new();
  v334 = *(timespec *)v396;
  if (*(_QWORD *)&v396[8])
  {
    v95 = (unint64_t *)(*(_QWORD *)&v396[8] + 8);
    do
      v96 = __ldxr(v95);
    while (__stxr(v96 + 1, v95));
  }
  v314 = v94;
  sub_20EBA0FE0(v94, (uint64_t)&v334, (uint64_t)v385, v69);
  v97 = (std::__shared_weak_count *)v334.tv_nsec;
  if (v334.tv_nsec)
  {
    v98 = (unint64_t *)(v334.tv_nsec + 8);
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = *(std::__shared_weak_count **)&v396[8];
  if (*(_QWORD *)&v396[8])
  {
    v101 = (unint64_t *)(*(_QWORD *)&v396[8] + 8);
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v103 = sub_210219C18();
  v104 = (double)(std::chrono::steady_clock::now().__d_.__rep_ - v58.__d_.__rep_);
  v105.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v106 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v106 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  v107 = atomic_load(&qword_254A5A450);
  v108 = v104 / 1000000.0;
  if (v107)
  {
    *(_DWORD *)v385 = 134217984;
    *(double *)&v385[4] = v108;
    v109 = (char *)_os_log_send_and_compose_impl();
    v110 = strlen(v109);
    v334.tv_sec = 0;
    pthread_threadid_np(0, (__uint64_t *)&v334);
    v111 = v334.tv_sec;
    timespec_get(&v334, 1);
    sub_210219E20(v385, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v103 + 1), (__int128 *)(v103 + 5), "MLSemanticsNode creation completed in %f ms", 0x2BuLL, v109, v110, v111, &v334);
    std::mutex::lock(&stru_254A5A410);
    v112 = qword_254A5A458;
    for (n = unk_254A5A460; v112 != n; v112 += 40)
    {
      v114 = *(_QWORD *)(v112 + 32);
      if (!v114)
        sub_20E86D37C();
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v114 + 48))(v114, v385);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v394 < 0)
    {
      operator delete(v392[1]);
      if ((SHIBYTE(v392[0]) & 0x80000000) == 0)
      {
LABEL_162:
        if (!LOBYTE(v390[1]))
        {
LABEL_168:
          if ((_BYTE)v388 && (v387[23] & 0x80000000) != 0)
            operator delete(*(void **)v387);
          if (SHIBYTE(v386) < 0)
            operator delete(*(void **)&v385[8]);
          if (v109)
            free(v109);
          goto LABEL_175;
        }
LABEL_166:
        if (SHIBYTE(v390[0]) < 0)
          operator delete(*((void **)&v388 + 1));
        goto LABEL_168;
      }
    }
    else if ((SHIBYTE(v392[0]) & 0x80000000) == 0)
    {
      goto LABEL_162;
    }
    operator delete(v391[0]);
    if (!LOBYTE(v390[1]))
      goto LABEL_168;
    goto LABEL_166;
  }
LABEL_175:
  if (os_signpost_enabled((os_log_t)*v103))
  {
    *(_DWORD *)v385 = 134217984;
    *(double *)&v385[4] = v108;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  sub_20E8A2514((uint64_t)&v334, (uint64_t)&v323);
  if (v361)
  {
    if (!v340)
    {
      sub_20E975C18(&v333);
      if (**(int **)(v333 + 56) <= 5)
      {
        v115 = *(unsigned __int8 *)(v333 + 72);
        v116 = sub_20E8C31DC(v333, "OSLogSurrogateAppender", 1, 0);
        v117 = v116;
        if (v115 || v116)
        {
          sub_20E863438((uint64_t)v385);
          sub_20E86A980(&v385[16], (uint64_t)"Jasper Map Densification is enabled, but no Jasper calibration found in HW parameters, disabling Jasper Map Densification.", 122);
          if (((uint64_t)v392[1] & 0x10) != 0)
          {
            v120 = (char *)v392[0];
            if (v392[0] < (void *)v389)
            {
              v392[0] = (void *)v389;
              v120 = (char *)v389;
            }
            v121 = (const void *)*((_QWORD *)&v388 + 1);
            v118 = (size_t)&v120[-*((_QWORD *)&v388 + 1)];
            if ((unint64_t)&v120[-*((_QWORD *)&v388 + 1)] > 0x7FFFFFFFFFFFFFF7)
              goto LABEL_239;
          }
          else
          {
            if (((uint64_t)v392[1] & 8) == 0)
            {
              v118 = 0;
              HIBYTE(v332) = 0;
              v119 = __dst;
              goto LABEL_195;
            }
            v121 = *(const void **)&v387[8];
            v118 = v388 - *(_QWORD *)&v387[8];
            if ((_QWORD)v388 - *(_QWORD *)&v387[8] > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_239:
              sub_20E860B7C();
          }
          if (v118 >= 0x17)
          {
            v122 = (v118 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v118 | 7) != 0x17)
              v122 = v118 | 7;
            v123 = v122 + 1;
            v119 = (void **)operator new(v122 + 1);
            v332 = v123 | 0x8000000000000000;
            __dst[0] = v119;
            __dst[1] = (void *)v118;
          }
          else
          {
            HIBYTE(v332) = v118;
            v119 = __dst;
            if (!v118)
            {
LABEL_195:
              v307 = v117;
              *((_BYTE *)v119 + v118) = 0;
              v324[0] = &v333;
              v324[1] = std::chrono::steady_clock::now().__d_.__rep_;
              v324[2] = std::chrono::system_clock::now().__d_.__rep_;
              v325 = 5;
              v326 = "unknown file";
              v327 = 158;
              v330 = 0;
              v328 = "unknown function";
              v329 = 0;
              v124 = __dst;
              if (v332 < 0)
                v124 = (void **)__dst[0];
              __s = (char *)v124;
              v125 = *(_QWORD *)v324[0];
              v126 = (const char *)(*(_QWORD *)v324[0] + 16);
              v305 = v115;
              v303 = v126;
              if (*(char *)(*(_QWORD *)v324[0] + 39) < 0)
              {
                v126 = *(const char **)(v125 + 16);
                v127 = *(_QWORD *)(v125 + 24);
                v304 = *(_QWORD *)v324[0];
                v128 = v7;
                v130 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                if ((v130 & 1) != 0)
                  goto LABEL_201;
              }
              else
              {
                v127 = *(unsigned __int8 *)(*(_QWORD *)v324[0] + 39);
                v304 = *(_QWORD *)v324[0];
                v128 = v7;
                v129 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                if ((v129 & 1) != 0)
                  goto LABEL_201;
              }
              if (__cxa_guard_acquire(&qword_254A4A510))
              {
                sub_20E9E46F8((uint64_t)v396);
                sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v396);
                if ((_BYTE)v397 && (v396[23] & 0x80000000) != 0)
                  operator delete(*(void **)v396);
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                __cxa_guard_release(&qword_254A4A510);
              }
LABEL_201:
              if (byte_254A4A4F8[23] >= 0)
                v131 = byte_254A4A4F8;
              else
                v131 = *(const char **)byte_254A4A4F8;
              if (byte_254A4A4F8[23] >= 0)
                v132 = byte_254A4A4F8[23];
              else
                v132 = *(_QWORD *)&byte_254A4A4F8[8];
              *(_QWORD *)v396 = os_log_create(v131, v126);
              v133 = &v396[8];
              if (v132 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v132 >= 0x17)
              {
                v134 = (v132 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v132 | 7) != 0x17)
                  v134 = v132 | 7;
                v135 = v134 + 1;
                v133 = operator new(v134 + 1);
                *(_QWORD *)&v396[16] = v132;
                *(_QWORD *)&v397 = v135 | 0x8000000000000000;
                *(_QWORD *)&v396[8] = v133;
              }
              else
              {
                BYTE7(v397) = v132;
                if (!v132)
                {
LABEL_215:
                  v133[v132] = 0;
                  BYTE8(v397) = 1;
                  v136 = v398;
                  if (v127 > 0x7FFFFFFFFFFFFFF7)
                    sub_20E860B7C();
                  v7 = v128;
                  if (v127 >= 0x17)
                  {
                    v137 = (v127 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v127 | 7) != 0x17)
                      v137 = v127 | 7;
                    v138 = v137 + 1;
                    v136 = (void **)operator new(v137 + 1);
                    v398[1] = (void *)v127;
                    v399 = v138 | 0x8000000000000000;
                    v398[0] = v136;
                  }
                  else
                  {
                    HIBYTE(v399) = v127;
                    if (!v127)
                    {
LABEL_223:
                      *((_BYTE *)v136 + v127) = 0;
                      v400 = 1;
                      v139 = *(NSObject **)v396;
                      if (SHIBYTE(v399) < 0)
                        operator delete(v398[0]);
                      if (BYTE8(v397) && SBYTE7(v397) < 0)
                        operator delete(*(void **)&v396[8]);
                      if (*(_QWORD *)v396)
                        os_release(*(void **)v396);
                      if (!v307 || !*(_QWORD *)(v307 + 24))
                      {
                        os_log_type_enabled(v139, OS_LOG_TYPE_ERROR);
                        *(_DWORD *)v396 = 136315138;
                        *(_QWORD *)&v396[4] = __s;
                        v146 = (void *)_os_log_send_and_compose_impl();
                        v147 = v305;
                        if (v146)
                          free(v146);
                        goto LABEL_303;
                      }
                      v140 = _os_log_pack_size();
                      v141 = (std::__shared_weak_count_vtbl *)operator new(v140, (std::align_val_t)8uLL);
                      v142 = (std::__shared_weak_count *)operator new();
                      v142->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                      v142->__shared_owners_ = 0;
                      v142->__shared_weak_owners_ = 0;
                      v142[1].__vftable = v141;
                      *(_QWORD *)&v341 = v141;
                      *((_QWORD *)&v341 + 1) = v141;
                      v344 = 0;
                      v342 = v142;
                      v343 = 0;
                      v143 = strlen(__s);
                      if (v143 > 0x7FFFFFFFFFFFFFF7)
                        sub_20E860B7C();
                      v144 = v143;
                      if (v143 >= 0x17)
                      {
                        v148 = (v143 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v143 | 7) != 0x17)
                          v148 = v143 | 7;
                        v149 = v148 + 1;
                        v145 = operator new(v148 + 1);
                        *((_QWORD *)&v346 + 1) = v149 | 0x8000000000000000;
                        v345 = v145;
                        *(_QWORD *)&v346 = v144;
                      }
                      else
                      {
                        HIBYTE(v346) = v143;
                        v145 = &v345;
                        if (!v143)
                        {
LABEL_244:
                          *((_BYTE *)v145 + v144) = 0;
                          v150 = v345;
                          v401[0] = v346;
                          *(_QWORD *)((char *)v401 + 7) = *(_QWORD *)((char *)&v346 + 7);
                          v151 = HIBYTE(v346);
                          v152 = operator new(0x38uLL);
                          v152[1] = 0;
                          v152[2] = 0;
                          v152[3] = off_24C9ABC20;
                          *v152 = &off_24C9ABBD0;
                          v153 = v401[0];
                          v152[4] = v150;
                          v152[5] = v153;
                          *(_QWORD *)((char *)v152 + 47) = *(_QWORD *)((char *)v401 + 7);
                          *((_BYTE *)v152 + 55) = v151;
                          v401[0] = 0;
                          *(_QWORD *)((char *)v401 + 7) = 0;
                          v154 = v344;
                          v343 = (char *)(v152 + 3);
                          v344 = (std::__shared_weak_count *)v152;
                          if (v154)
                          {
                            v155 = (unint64_t *)&v154->__shared_owners_;
                            do
                              v156 = __ldaxr(v155);
                            while (__stlxr(v156 - 1, v155));
                            if (!v156)
                            {
                              ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
                              std::__shared_weak_count::__release_weak(v154);
                            }
                          }
                          *(_OWORD *)v396 = v341;
                          v157 = v343;
                          *(_QWORD *)&v396[16] = v342;
                          if (v342)
                          {
                            v158 = (unint64_t *)&v342->__shared_owners_;
                            do
                              v159 = __ldxr(v158);
                            while (__stxr(v159 + 1, v158));
                          }
                          v160 = v344;
                          *(_QWORD *)&v397 = v157;
                          *((_QWORD *)&v397 + 1) = v344;
                          if (v344)
                          {
                            v161 = (unint64_t *)&v344->__shared_owners_;
                            do
                              v162 = __ldxr(v161);
                            while (__stxr(v162 + 1, v161));
                            v398[0] = v157;
                            do
                              v163 = __ldaxr(v161);
                            while (__stlxr(v163 - 1, v161));
                            if (!v163)
                            {
                              ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
                              std::__shared_weak_count::__release_weak(v160);
                            }
                          }
                          else
                          {
                            v398[0] = v157;
                          }
                          v164 = v342;
                          if (v342)
                          {
                            v165 = (unint64_t *)&v342->__shared_owners_;
                            do
                              v166 = __ldaxr(v165);
                            while (__stlxr(v166 - 1, v165));
                            if (!v166)
                            {
                              ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
                              std::__shared_weak_count::__release_weak(v164);
                            }
                          }
                          v167 = *(_QWORD *)v396;
                          if (*((char *)v398[0] + 31) >= 0)
                            v168 = (char *)v398[0] + 8;
                          else
                            v168 = (char *)*((_QWORD *)v398[0] + 1);
                          v169 = _os_log_pack_fill();
                          *(_DWORD *)v169 = 136315138;
                          *(_QWORD *)(v169 + 4) = v168;
                          v170 = operator new();
                          v171 = *(unsigned __int8 *)(v304 + 39);
                          v172 = v303;
                          if ((v171 & 0x80u) != 0)
                          {
                            v172 = *(const char **)(v304 + 16);
                            v171 = *(_QWORD *)(v304 + 24);
                          }
                          *(_QWORD *)v170 = v167;
                          *(_OWORD *)(v170 + 8) = *(_OWORD *)&v396[8];
                          *(_QWORD *)&v396[8] = 0;
                          *(_QWORD *)&v396[16] = 0;
                          *(_OWORD *)(v170 + 24) = v397;
                          v397 = 0uLL;
                          *(_QWORD *)(v170 + 40) = v172;
                          *(_QWORD *)(v170 + 48) = v171;
                          *(_BYTE *)(v170 + 56) = 16;
                          v345 = 0;
                          *(_QWORD *)&v341 = v170;
                          (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v307 + 24) + 40))(*(_QWORD *)(v307 + 24), &v341);
                          v173 = v341;
                          *(_QWORD *)&v341 = 0;
                          v147 = v305;
                          if (v173)
                          {
                            v174 = *(std::__shared_weak_count **)(v173 + 32);
                            if (v174)
                            {
                              v175 = (unint64_t *)&v174->__shared_owners_;
                              do
                                v176 = __ldaxr(v175);
                              while (__stlxr(v176 - 1, v175));
                              if (!v176)
                              {
                                ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
                                std::__shared_weak_count::__release_weak(v174);
                              }
                            }
                            v177 = *(std::__shared_weak_count **)(v173 + 16);
                            if (v177)
                            {
                              v178 = (unint64_t *)&v177->__shared_owners_;
                              do
                                v179 = __ldaxr(v178);
                              while (__stlxr(v179 - 1, v178));
                              if (!v179)
                              {
                                ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
                                std::__shared_weak_count::__release_weak(v177);
                              }
                            }
                            MEMORY[0x212BC6398](v173, 0x10F0C40B62ED6C6);
                            v180 = v345;
                            v345 = 0;
                            if (v180)
                            {
                              v181 = (std::__shared_weak_count *)v180[4];
                              if (v181)
                              {
                                v182 = (unint64_t *)&v181->__shared_owners_;
                                do
                                  v183 = __ldaxr(v182);
                                while (__stlxr(v183 - 1, v182));
                                if (!v183)
                                {
                                  ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
                                  std::__shared_weak_count::__release_weak(v181);
                                }
                              }
                              v184 = (std::__shared_weak_count *)v180[2];
                              if (v184)
                              {
                                v185 = (unint64_t *)&v184->__shared_owners_;
                                do
                                  v186 = __ldaxr(v185);
                                while (__stlxr(v186 - 1, v185));
                                if (!v186)
                                {
                                  ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
                                  std::__shared_weak_count::__release_weak(v184);
                                }
                              }
                              MEMORY[0x212BC6398](v180, 0x10F0C40B62ED6C6);
                            }
                          }
                          v187 = (std::__shared_weak_count *)*((_QWORD *)&v397 + 1);
                          if (*((_QWORD *)&v397 + 1))
                          {
                            v188 = (unint64_t *)(*((_QWORD *)&v397 + 1) + 8);
                            do
                              v189 = __ldaxr(v188);
                            while (__stlxr(v189 - 1, v188));
                            if (!v189)
                            {
                              ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
                              std::__shared_weak_count::__release_weak(v187);
                            }
                          }
                          v190 = *(std::__shared_weak_count **)&v396[16];
                          if (*(_QWORD *)&v396[16])
                          {
                            v191 = (unint64_t *)(*(_QWORD *)&v396[16] + 8);
                            do
                              v192 = __ldaxr(v191);
                            while (__stlxr(v192 - 1, v191));
                            if (!v192)
                            {
                              ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
                              std::__shared_weak_count::__release_weak(v190);
                            }
                          }
LABEL_303:
                          if (v147)
                          {
                            v193 = (const char *)__dst;
                            if (v332 < 0)
                              v193 = (const char *)__dst[0];
                            sub_20E8C003C((uint64_t)v324, "%s", v193);
                            sub_20E863570((uint64_t)v324);
                          }
                          sub_20E863570((uint64_t)v324);
                          v194 = v330;
                          if (v330)
                          {
                            v195 = (unint64_t *)&v330->__shared_owners_;
                            do
                              v196 = __ldaxr(v195);
                            while (__stlxr(v196 - 1, v195));
                            if (!v196)
                            {
                              ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
                              std::__shared_weak_count::__release_weak(v194);
                            }
                          }
                          if (SHIBYTE(v332) < 0)
                            operator delete(__dst[0]);
                          *(_QWORD *)v385 = *MEMORY[0x24BEDB7F0];
                          v197 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                          *(_QWORD *)&v385[*(_QWORD *)(*(_QWORD *)v385 - 24)] = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                          *(_QWORD *)&v385[16] = v197;
                          v386 = MEMORY[0x24BEDB848] + 16;
                          if (SHIBYTE(v391[1]) < 0)
                            operator delete(v390[1]);
                          std::streambuf::~streambuf();
                          std::iostream::~basic_iostream();
                          MEMORY[0x212BC6290](v393);
                          goto LABEL_317;
                        }
                      }
                      memcpy(v145, __s, v144);
                      goto LABEL_244;
                    }
                  }
                  memmove(v136, v126, v127);
                  goto LABEL_223;
                }
              }
              memmove(v133, v131, v132);
              goto LABEL_215;
            }
          }
          memmove(v119, v121, v118);
          goto LABEL_195;
        }
      }
    }
  }
LABEL_317:
  v198 = sub_20E8746F0("com.apple.arkit.worldTracking.jasperDisabled", 0x2CuLL);
  if ((_BYTE)v198)
    v199 = v198 >= 0x100u;
  else
    v199 = 0;
  v200 = !v199;
  sub_20E8A1408((uint64_t)v385, (uint64_t)&v321);
  v201 = v361;
  if (v361)
  {
    if (v340)
      v201 = v200;
    else
      v201 = 0;
  }
  v395 = v201;
  __sa = (char *)operator new();
  sub_20EBC2490((uint64_t)__sa, (uint64_t)v385);
  sub_20E86A810((uint64_t)v385);
  if (v340)
  {
    v202 = v339;
    if (v339)
    {
      v203 = (unint64_t *)&v339->__shared_owners_;
      do
        v204 = __ldaxr(v203);
      while (__stlxr(v204 - 1, v203));
      if (!v204)
      {
        ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
        std::__shared_weak_count::__release_weak(v202);
      }
    }
    if (v337)
    {
      v338 = v337;
      operator delete(v337);
    }
    if (v335)
    {
      v336 = v335;
      operator delete(v335);
    }
  }
  v205 = sub_210219C18();
  v206 = (double)(std::chrono::steady_clock::now().__d_.__rep_ - v105.__d_.__rep_);
  v207.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v208 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v208 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  v209 = atomic_load(&qword_254A5A450);
  v210 = v206 / 1000000.0;
  if (v209)
  {
    *(_DWORD *)v385 = 134217984;
    *(double *)&v385[4] = v210;
    v211 = (char *)_os_log_send_and_compose_impl();
    v212 = strlen(v211);
    v334.tv_sec = 0;
    pthread_threadid_np(0, (__uint64_t *)&v334);
    v213 = v334.tv_sec;
    timespec_get(&v334, 1);
    sub_210219E20(v385, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v205 + 1), (__int128 *)(v205 + 5), "DenseDepthNode creation completed in %f ms", 0x2AuLL, v211, v212, v213, &v334);
    std::mutex::lock(&stru_254A5A410);
    v214 = qword_254A5A458;
    for (ii = unk_254A5A460; v214 != ii; v214 += 40)
    {
      v216 = *(_QWORD *)(v214 + 32);
      if (!v216)
        sub_20E86D37C();
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v216 + 48))(v216, v385);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v394 < 0)
    {
      operator delete(v392[1]);
      if ((SHIBYTE(v392[0]) & 0x80000000) == 0)
      {
LABEL_344:
        if (!LOBYTE(v390[1]))
        {
LABEL_350:
          if ((_BYTE)v388 && (v387[23] & 0x80000000) != 0)
            operator delete(*(void **)v387);
          if (SHIBYTE(v386) < 0)
            operator delete(*(void **)&v385[8]);
          if (v211)
            free(v211);
          goto LABEL_357;
        }
LABEL_348:
        if (SHIBYTE(v390[0]) < 0)
          operator delete(*((void **)&v388 + 1));
        goto LABEL_350;
      }
    }
    else if ((SHIBYTE(v392[0]) & 0x80000000) == 0)
    {
      goto LABEL_344;
    }
    operator delete(v391[0]);
    if (!LOBYTE(v390[1]))
      goto LABEL_350;
    goto LABEL_348;
  }
LABEL_357:
  if (os_signpost_enabled((os_log_t)*v205))
  {
    *(_DWORD *)v385 = 134217984;
    *(double *)&v385[4] = v210;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  v217 = v316[7];
  v218 = *(unsigned __int8 *)(v217 + 80);
  v219 = sub_20ED540E0(v217);
  v221 = v220;
  v375 = v219;
  v376 = v220;
  v223 = *v310;
  v222 = v310[1];
  v224 = operator new(0x48uLL, MEMORY[0x24BEDB6B8]);
  if (v224)
  {
    v225 = v224;
    *(_QWORD *)v385 = v223;
    *(_QWORD *)&v385[8] = v222;
    if (v222)
    {
      v226 = (unint64_t *)(v222 + 8);
      do
        v227 = __ldxr(v226);
      while (__stxr(v227 + 1, v226));
    }
    v311 = v224;
    sub_20EBD1074((uint64_t)v224, (uint64_t)&v321, (uint64_t)v317, (uint64_t)&v347, v218 != 0, (uint64_t)v385);
    v228 = *(std::__shared_weak_count **)&v385[8];
    if (*(_QWORD *)&v385[8])
    {
      v229 = (unint64_t *)(*(_QWORD *)&v385[8] + 8);
      do
        v230 = __ldaxr(v229);
      while (__stlxr(v230 - 1, v229));
      if (!v230)
      {
        ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
        std::__shared_weak_count::__release_weak(v228);
      }
    }
    v231 = sub_210219C18();
    v232 = (double)(std::chrono::steady_clock::now().__d_.__rep_ - v207.__d_.__rep_);
    v233.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    v234 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
    if ((v234 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
    {
      __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DDD0);
    }
    v235 = atomic_load(&qword_254A5A450);
    v236 = v232 / 1000000.0;
    if (!v235)
    {
LABEL_390:
      if (os_signpost_enabled((os_log_t)*v231))
      {
        *(_DWORD *)v385 = 134217984;
        *(double *)&v385[4] = v236;
        _os_signpost_emit_unreliably_with_name_impl();
      }
      (*(void (**)(_BYTE *__return_ptr, void *, int *, char *, BOOL, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v225 + 416))(v396, v225, &v347, v317, v218 != 0, v219, v221, v384);
      v244 = sub_210219C18();
      v245 = (double)(std::chrono::steady_clock::now().__d_.__rep_ - v233.__d_.__rep_);
      v246.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      v247 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
      if ((v247 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
      {
        __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DDD0);
      }
      v248 = atomic_load(&qword_254A5A450);
      v249 = v245 / 1000000.0;
      if (!v248)
      {
LABEL_412:
        if (os_signpost_enabled((os_log_t)*v244))
        {
          *(_DWORD *)v385 = 134217984;
          *(double *)&v385[4] = v249;
          _os_signpost_emit_unreliably_with_name_impl();
        }
        (*(void (**)(void *, int *, _QWORD *, uint64_t, char *, _QWORD))(*(_QWORD *)v225 + 424))(v225, &v347, v316, v314, __sa, *(_QWORD *)v396);
        v256 = sub_210219C18();
        v257 = (double)(std::chrono::steady_clock::now().__d_.__rep_ - v246.__d_.__rep_);
        v258.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        v259 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
        if ((v259 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
        {
          __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DDD0);
        }
        v260 = atomic_load(&qword_254A5A450);
        v261 = v257 / 1000000.0;
        if (!v260)
        {
LABEL_434:
          if (os_signpost_enabled((os_log_t)*v256))
          {
            *(_DWORD *)v385 = 134217984;
            *(double *)&v385[4] = v261;
            _os_signpost_emit_unreliably_with_name_impl();
          }
          v268 = (*(uint64_t (**)(void *))(*(_QWORD *)v225 + 440))(v225);
          v269 = v384;
          if ((char)v309[208] < 0)
          {
            sub_20E860C04(v385, *(void **)(v315 + 8872), *(_QWORD *)(v315 + 8880));
          }
          else
          {
            *(_OWORD *)v385 = *(_OWORD *)(v315 + 8872);
            *(_QWORD *)&v385[16] = *(_QWORD *)(v315 + 8888);
          }
          LOBYTE(v386) = *(_BYTE *)(v315 + 280);
          *(_QWORD *)v387 = *(_QWORD *)(v315 + 8688);
          v387[8] = *v309;
          v270 = (_QWORD *)operator new();
          *v270 = &off_24C9EB158;
          v271 = (char *)operator new();
          sub_20EE2DD88(v271, (uint64_t)v385, v268, v269);
          v270[1] = v271;
          v270[2] = sub_20EE45298;
          if ((v385[23] & 0x80000000) != 0)
            operator delete(*(void **)v385);
          v272 = sub_210219C18();
          v273 = (double)(std::chrono::steady_clock::now().__d_.__rep_ - v258.__d_.__rep_);
          v274.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
          v275 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
          if ((v275 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
          {
            __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DDD0);
          }
          v276 = atomic_load(&qword_254A5A450);
          v277 = v273 / 1000000.0;
          if (!v276)
          {
LABEL_461:
            if (os_signpost_enabled((os_log_t)*v272))
            {
              *(_DWORD *)v385 = 134217984;
              *(double *)&v385[4] = v277;
              _os_signpost_emit_unreliably_with_name_impl();
            }
            (*(void (**)(void *, uint64_t, _QWORD *))(*(_QWORD *)v225 + 432))(v225, v315, v270);
            v284 = sub_210219C18();
            v285 = (double)(std::chrono::steady_clock::now().__d_.__rep_ - v274.__d_.__rep_);
            std::chrono::steady_clock::now();
            v286 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
            if ((v286 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
            {
              __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DDD0);
            }
            v287 = atomic_load(&qword_254A5A450);
            v288 = v285 / 1000000.0;
            if (!v287)
            {
LABEL_483:
              if (os_signpost_enabled((os_log_t)*v284))
              {
                *(_DWORD *)v385 = 134217984;
                *(double *)&v385[4] = v288;
                _os_signpost_emit_unreliably_with_name_impl();
              }
              v295 = *(_QWORD *)v396;
              *v7 = v225;
              v7[1] = v295;
              v7[2] = v316;
              v7[3] = v314;
              v7[4] = __sa;
              v7[5] = v270;
              v243 = v382;
              if (v382)
                goto LABEL_486;
              goto LABEL_487;
            }
            *(_DWORD *)v385 = 134217984;
            *(double *)&v385[4] = v288;
            v289 = (char *)_os_log_send_and_compose_impl();
            v290 = strlen(v289);
            v334.tv_sec = 0;
            pthread_threadid_np(0, (__uint64_t *)&v334);
            v291 = v334.tv_sec;
            timespec_get(&v334, 1);
            sub_210219E20(v385, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v284 + 1), (__int128 *)(v284 + 5), "ConnectUserAnchorNodeGroups completed in %f ms", 0x2EuLL, v289, v290, v291, &v334);
            std::mutex::lock(&stru_254A5A410);
            v292 = qword_254A5A458;
            for (jj = unk_254A5A460; v292 != jj; v292 += 40)
            {
              v294 = *(_QWORD *)(v292 + 32);
              if (!v294)
                sub_20E86D37C();
              (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v294 + 48))(v294, v385);
            }
            std::mutex::unlock(&stru_254A5A410);
            if (v394 < 0)
            {
              operator delete(v392[1]);
              v225 = v311;
              if ((SHIBYTE(v392[0]) & 0x80000000) == 0)
              {
LABEL_470:
                if (!LOBYTE(v390[1]))
                {
LABEL_476:
                  if ((_BYTE)v388 && (v387[23] & 0x80000000) != 0)
                    operator delete(*(void **)v387);
                  if (SHIBYTE(v386) < 0)
                    operator delete(*(void **)&v385[8]);
                  if (v289)
                    free(v289);
                  goto LABEL_483;
                }
LABEL_474:
                if (SHIBYTE(v390[0]) < 0)
                  operator delete(*((void **)&v388 + 1));
                goto LABEL_476;
              }
            }
            else
            {
              v225 = v311;
              if ((SHIBYTE(v392[0]) & 0x80000000) == 0)
                goto LABEL_470;
            }
            operator delete(v391[0]);
            if (!LOBYTE(v390[1]))
              goto LABEL_476;
            goto LABEL_474;
          }
          *(_DWORD *)v385 = 134217984;
          *(double *)&v385[4] = v277;
          v278 = (char *)_os_log_send_and_compose_impl();
          v279 = strlen(v278);
          v334.tv_sec = 0;
          pthread_threadid_np(0, (__uint64_t *)&v334);
          v280 = v334.tv_sec;
          timespec_get(&v334, 1);
          sub_210219E20(v385, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v272 + 1), (__int128 *)(v272 + 5), "UserAnchorNode creation completed in %f ms", 0x2AuLL, v278, v279, v280, &v334);
          std::mutex::lock(&stru_254A5A410);
          v281 = qword_254A5A458;
          for (kk = unk_254A5A460; v281 != kk; v281 += 40)
          {
            v283 = *(_QWORD *)(v281 + 32);
            if (!v283)
              sub_20E86D37C();
            (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v283 + 48))(v283, v385);
          }
          std::mutex::unlock(&stru_254A5A410);
          if (v394 < 0)
          {
            operator delete(v392[1]);
            v225 = v311;
            if ((SHIBYTE(v392[0]) & 0x80000000) == 0)
            {
LABEL_448:
              if (!LOBYTE(v390[1]))
              {
LABEL_454:
                if ((_BYTE)v388 && (v387[23] & 0x80000000) != 0)
                  operator delete(*(void **)v387);
                if (SHIBYTE(v386) < 0)
                  operator delete(*(void **)&v385[8]);
                if (v278)
                  free(v278);
                goto LABEL_461;
              }
LABEL_452:
              if (SHIBYTE(v390[0]) < 0)
                operator delete(*((void **)&v388 + 1));
              goto LABEL_454;
            }
          }
          else
          {
            v225 = v311;
            if ((SHIBYTE(v392[0]) & 0x80000000) == 0)
              goto LABEL_448;
          }
          operator delete(v391[0]);
          if (!LOBYTE(v390[1]))
            goto LABEL_454;
          goto LABEL_452;
        }
        *(_DWORD *)v385 = 134217984;
        *(double *)&v385[4] = v261;
        v262 = (char *)_os_log_send_and_compose_impl();
        v263 = strlen(v262);
        v334.tv_sec = 0;
        pthread_threadid_np(0, (__uint64_t *)&v334);
        v264 = v334.tv_sec;
        timespec_get(&v334, 1);
        sub_210219E20(v385, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v256 + 1), (__int128 *)(v256 + 5), "ConnectMLSemanticsAndDepthNodeGroups completed in %f ms", 0x37uLL, v262, v263, v264, &v334);
        std::mutex::lock(&stru_254A5A410);
        v265 = qword_254A5A458;
        for (mm = unk_254A5A460; v265 != mm; v265 += 40)
        {
          v267 = *(_QWORD *)(v265 + 32);
          if (!v267)
            sub_20E86D37C();
          (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v267 + 48))(v267, v385);
        }
        std::mutex::unlock(&stru_254A5A410);
        if (v394 < 0)
        {
          operator delete(v392[1]);
          v225 = v311;
          if ((SHIBYTE(v392[0]) & 0x80000000) == 0)
          {
LABEL_421:
            if (!LOBYTE(v390[1]))
            {
LABEL_427:
              if ((_BYTE)v388 && (v387[23] & 0x80000000) != 0)
                operator delete(*(void **)v387);
              if (SHIBYTE(v386) < 0)
                operator delete(*(void **)&v385[8]);
              if (v262)
                free(v262);
              goto LABEL_434;
            }
LABEL_425:
            if (SHIBYTE(v390[0]) < 0)
              operator delete(*((void **)&v388 + 1));
            goto LABEL_427;
          }
        }
        else
        {
          v225 = v311;
          if ((SHIBYTE(v392[0]) & 0x80000000) == 0)
            goto LABEL_421;
        }
        operator delete(v391[0]);
        if (!LOBYTE(v390[1]))
          goto LABEL_427;
        goto LABEL_425;
      }
      *(_DWORD *)v385 = 134217984;
      *(double *)&v385[4] = v249;
      v250 = (char *)_os_log_send_and_compose_impl();
      v251 = strlen(v250);
      v334.tv_sec = 0;
      pthread_threadid_np(0, (__uint64_t *)&v334);
      v252 = v334.tv_sec;
      timespec_get(&v334, 1);
      sub_210219E20(v385, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v244 + 1), (__int128 *)(v244 + 5), "MappingIONodeGroup creation completed in %f ms", 0x2EuLL, v250, v251, v252, &v334);
      std::mutex::lock(&stru_254A5A410);
      v253 = qword_254A5A458;
      for (nn = unk_254A5A460; v253 != nn; v253 += 40)
      {
        v255 = *(_QWORD *)(v253 + 32);
        if (!v255)
          sub_20E86D37C();
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v255 + 48))(v255, v385);
      }
      std::mutex::unlock(&stru_254A5A410);
      if (v394 < 0)
      {
        operator delete(v392[1]);
        v225 = v311;
        if ((SHIBYTE(v392[0]) & 0x80000000) == 0)
        {
LABEL_399:
          if (!LOBYTE(v390[1]))
          {
LABEL_405:
            if ((_BYTE)v388 && (v387[23] & 0x80000000) != 0)
              operator delete(*(void **)v387);
            if (SHIBYTE(v386) < 0)
              operator delete(*(void **)&v385[8]);
            if (v250)
              free(v250);
            goto LABEL_412;
          }
LABEL_403:
          if (SHIBYTE(v390[0]) < 0)
            operator delete(*((void **)&v388 + 1));
          goto LABEL_405;
        }
      }
      else
      {
        v225 = v311;
        if ((SHIBYTE(v392[0]) & 0x80000000) == 0)
          goto LABEL_399;
      }
      operator delete(v391[0]);
      if (!LOBYTE(v390[1]))
        goto LABEL_405;
      goto LABEL_403;
    }
    v306 = v233.__d_.__rep_;
    v308 = v7;
    *(_DWORD *)v385 = 134217984;
    *(double *)&v385[4] = v236;
    v237 = (char *)_os_log_send_and_compose_impl();
    v238 = strlen(v237);
    v334.tv_sec = 0;
    pthread_threadid_np(0, (__uint64_t *)&v334);
    v239 = v334.tv_sec;
    timespec_get(&v334, 1);
    sub_210219E20(v385, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v231 + 1), (__int128 *)(v231 + 5), "SlamNodeGroup creation completed in %f ms", 0x29uLL, v237, v238, v239, &v334);
    std::mutex::lock(&stru_254A5A410);
    v240 = qword_254A5A458;
    for (i1 = unk_254A5A460; v240 != i1; v240 += 40)
    {
      v242 = *(_QWORD *)(v240 + 32);
      if (!v242)
        sub_20E86D37C();
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v242 + 48))(v242, v385);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v394 < 0)
    {
      operator delete(v392[1]);
      v233.__d_.__rep_ = v306;
      v7 = v308;
      v225 = v311;
      if ((SHIBYTE(v392[0]) & 0x80000000) == 0)
      {
LABEL_375:
        if (!LOBYTE(v390[1]))
        {
LABEL_383:
          if ((_BYTE)v388 && (v387[23] & 0x80000000) != 0)
            operator delete(*(void **)v387);
          if (SHIBYTE(v386) < 0)
            operator delete(*(void **)&v385[8]);
          if (v237)
            free(v237);
          goto LABEL_390;
        }
LABEL_381:
        if (SHIBYTE(v390[0]) < 0)
          operator delete(*((void **)&v388 + 1));
        goto LABEL_383;
      }
    }
    else
    {
      v233.__d_.__rep_ = v306;
      v7 = v308;
      v225 = v311;
      if ((SHIBYTE(v392[0]) & 0x80000000) == 0)
        goto LABEL_375;
    }
    operator delete(v391[0]);
    if (!LOBYTE(v390[1]))
      goto LABEL_383;
    goto LABEL_381;
  }
  *((_OWORD *)v7 + 1) = 0u;
  *((_OWORD *)v7 + 2) = 0u;
  *(_OWORD *)v7 = 0u;
  (*(void (**)(char *))(*(_QWORD *)__sa + 8))(__sa);
  (*(void (**)(uint64_t))(*(_QWORD *)v314 + 8))(v314);
  (*(void (**)(_QWORD *))(*v316 + 8))(v316);
  v243 = v382;
  if (v382)
LABEL_486:
    MEMORY[0x212BC6368](v243, 0x1000C8000313F17);
LABEL_487:
  if (v381)
    MEMORY[0x212BC6368](v381, 0x1000C8000313F17);
  if (v380)
    MEMORY[0x212BC6368](v380, 0x1000C8000313F17);
  if (v379)
    MEMORY[0x212BC6368](v379, 0x1000C8000313F17);
  if (v377)
  {
    v378 = v377;
    operator delete(v377);
  }
  sub_20E869418((uint64_t)&v348[4]);
  v296 = v319;
  if (v319)
  {
    v297 = (unint64_t *)&v319->__shared_owners_;
    do
      v298 = __ldaxr(v297);
    while (__stlxr(v298 - 1, v297));
    if (!v298)
    {
      ((void (*)(std::__shared_weak_count *))v296->__on_zero_shared)(v296);
      std::__shared_weak_count::__release_weak(v296);
    }
  }
  sub_20E8D1F68((uint64_t)v318, v318[1]);
  v299 = v320.i64[0];
  if (v320.i64[0])
  {
    v300 = v320.i64[1];
    v301 = (void *)v320.i64[0];
    if (v320.i64[1] != v320.i64[0])
    {
      do
      {
        if (*(char *)(v300 - 17) < 0)
          operator delete(*(void **)(v300 - 40));
        v300 -= 40;
      }
      while (v300 != v299);
      v301 = (void *)v320.i64[0];
    }
    v320.i64[1] = v299;
    operator delete(v301);
  }
  return sub_20E86A810((uint64_t)&v321);
}

void sub_20E97D194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;
  uint64_t v33;

  if (*(_BYTE *)(v32 + 2472) && *(char *)(v32 + 2471) < 0)
    operator delete(*(void **)(v33 - 208));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0xA38]);
  if (SLOBYTE(STACK[0xA97]) < 0)
    operator delete((void *)STACK[0xA80]);
  sub_20E863784((uint64_t)&STACK[0x3EF0]);
  sub_20E8A1388((uint64_t)&STACK[0xAA0]);
  (*(void (**)(uint64_t))(*(_QWORD *)a20 + 8))(a20);
  (*(void (**)(uint64_t))(*(_QWORD *)a22 + 8))(a22);
  sub_20E8FE530(&STACK[0xC80]);
  sub_20E95F030((uint64_t)&a23);
  sub_20E92DA24(&a29);
  sub_20E86A810((uint64_t)&a32);
  _Unwind_Resume(a1);
}

void sub_20E97D738()
{
  std::mutex::unlock(&stru_254A5A410);
  JUMPOUT(0x20E97D74CLL);
}

void sub_20E97D768()
{
  void *v0;

  __cxa_free_exception(v0);
  JUMPOUT(0x20E97D77CLL);
}

void sub_20E97D788()
{
  std::mutex::unlock(&stru_254A5A410);
  JUMPOUT(0x20E97D79CLL);
}

void sub_20E97D7B8()
{
  std::mutex::unlock(&stru_254A5A410);
  JUMPOUT(0x20E97D7CCLL);
}

void sub_20E97D7E8()
{
  std::mutex::unlock(&stru_254A5A410);
  JUMPOUT(0x20E97D7FCLL);
}

void sub_20E97D818()
{
  std::mutex::unlock(&stru_254A5A410);
  JUMPOUT(0x20E97D82CLL);
}

void sub_20E97D844()
{
  std::mutex::unlock(&stru_254A5A410);
  JUMPOUT(0x20E97D858);
}

void sub_20E97D868()
{
  std::mutex::unlock(&stru_254A5A410);
  JUMPOUT(0x20E97D87CLL);
}

uint64_t sub_20E97D8A0(uint64_t *a1, CFTypeRef *a2)
{
  uint64_t v4;
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  v4 = *a1;
  if (v4 && a1[1] && a1[2] && a1[3] && a1[4] && a1[5])
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    (*(void (**)(uint64_t))(*(_QWORD *)a1[1] + 24))(a1[1]);
    (*(void (**)(uint64_t))(*(_QWORD *)a1[2] + 24))(a1[2]);
    (*(void (**)(uint64_t))(*(_QWORD *)a1[3] + 24))(a1[3]);
    (*(void (**)(uint64_t))(*(_QWORD *)a1[4] + 24))(a1[4]);
    return 1;
  }
  else
  {
    __p = operator new(0x68uLL);
    v12 = xmmword_2102E3F40;
    strcpy((char *)__p, "The session has not been initialized. You need to call CV3DSLAMInitialize before calling this method");
    v6 = (char *)operator new(0x70uLL);
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
    if (a2)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_20EA67538(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v7 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v7;
      v8 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    operator delete(v6);
    if (SHIBYTE(v12) < 0)
      operator delete(__p);
    return 0;
  }
}

void sub_20E97DAC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20E97DB00(uint64_t *a1, const void *a2, CFTypeRef *a3)
{
  uint64_t v4;
  _QWORD *v6;
  char *v7;
  CFTypeRef v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  void *__p;
  __int128 v17;
  CFTypeRef cf;
  std::__shared_weak_count *v19;
  std::error_condition v20;

  v4 = *a1;
  if (*a1 && a1[1] && a1[2] && a1[3] && a1[4] && a1[5])
  {
    if (a2)
    {
      v6 = operator new(0x20uLL);
      v6[1] = 0;
      v6[2] = 0;
      *v6 = &off_24C9B3478;
      v6[3] = _Block_copy(a2);
      __p = v6 + 3;
      *(_QWORD *)&v17 = v6;
    }
    else
    {
      __p = 0;
      *(_QWORD *)&v17 = 0;
    }
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v4 + 448))(v4, &__p);
    v13 = (std::__shared_weak_count *)v17;
    if ((_QWORD)v17)
    {
      v14 = (unint64_t *)(v17 + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    return 1;
  }
  else
  {
    __p = operator new(0x68uLL);
    v17 = xmmword_2102E3F40;
    strcpy((char *)__p, "The session has not been initialized. You need to call CV3DSLAMInitialize before calling this method");
    v7 = (char *)operator new(0x70uLL);
    strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
    if (a3)
    {
      *(_QWORD *)&v20.__val_ = 22;
      v20.__cat_ = std::generic_category();
      sub_20EA67538(&v20, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v8 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v8;
      v9 = v19;
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    operator delete(v7);
    if (SHIBYTE(v17) < 0)
      operator delete(__p);
    return 0;
  }
}

void sub_20E97DD48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  void *v21;

  v19 = v18;
  std::__shared_weak_count::~__shared_weak_count(v19);
  operator delete(v21);
  _Unwind_Resume(a1);
}

uint64_t sub_20E97DDAC(uint64_t *a1, const void *a2, CFTypeRef *a3)
{
  uint64_t v4;
  _QWORD *v6;
  char *v7;
  CFTypeRef v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  void *__p;
  __int128 v18;
  CFTypeRef cf;
  std::__shared_weak_count *v20;
  std::error_condition v21;

  v4 = *a1;
  if (!*a1 || !a1[1] || !a1[2] || !a1[3] || !a1[4] || !a1[5])
  {
    __p = operator new(0x68uLL);
    v18 = xmmword_2102E3F40;
    strcpy((char *)__p, "The session has not been initialized. You need to call CV3DSLAMInitialize before calling this method");
    v7 = (char *)operator new(0x70uLL);
    strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
    if (a3)
    {
      *(_QWORD *)&v21.__val_ = 22;
      v21.__cat_ = std::generic_category();
      sub_20EA67538(&v21, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v8 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v8;
      v9 = v20;
      if (v20)
      {
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    operator delete(v7);
    if (SHIBYTE(v18) < 0)
      operator delete(__p);
    return 0;
  }
  if (a2)
  {
    v6 = operator new(0x20uLL);
    v6[1] = 0;
    v6[2] = 0;
    *v6 = &off_24C9B3478;
    v6[3] = _Block_copy(a2);
    __p = v6 + 3;
    *(_QWORD *)&v18 = v6;
  }
  else
  {
    __p = 0;
    *(_QWORD *)&v18 = 0;
  }
  v12 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v4 + 448))(v4, &__p);
  v14 = (std::__shared_weak_count *)v18;
  if (!(_QWORD)v18)
    return v12;
  v15 = (unint64_t *)(v18 + 8);
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (v16)
    return v12;
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  return v12;
}

void sub_20E97DFFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  void *v21;

  v19 = v18;
  std::__shared_weak_count::~__shared_weak_count(v19);
  operator delete(v21);
  _Unwind_Resume(a1);
}

uint64_t sub_20E97E060(uint64_t *a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v5;
  char *v7;
  CFTypeRef v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  __int128 v13;
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  v5 = *a1;
  if (v5 && a1[1] && a1[2] && a1[3] && a1[4] && a1[5])
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 456))(v5);
  __p = operator new(0x68uLL);
  v13 = xmmword_2102E3F40;
  strcpy((char *)__p, "The session has not been initialized. You need to call CV3DSLAMInitialize before calling this method");
  v7 = (char *)operator new(0x70uLL);
  strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
  if (a3)
  {
    *(_QWORD *)&v16.__val_ = 22;
    v16.__cat_ = std::generic_category();
    sub_20EA67538(&v16, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v8 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v8;
    v9 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  operator delete(v7);
  if (SHIBYTE(v13) < 0)
    operator delete(__p);
  return 0;
}

void sub_20E97E240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20E97E27C(uint64_t *a1, const void *a2, CFTypeRef *a3)
{
  uint64_t v5;
  uint64_t v7;
  char *v8;
  CFTypeRef v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  char v18;
  std::__shared_weak_count *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  void *v29[3];
  _QWORD *v30;
  std::__shared_weak_count *v31;
  CFTypeRef cf;
  std::__shared_weak_count *v33;
  std::error_condition v34;
  _BYTE v35[24];
  _BYTE __p[24];
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v5 = *a1;
  if (v5 && a1[1] && a1[2] && a1[3] && a1[4] && a1[5])
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 360))(v5);
    if (*((char *)a1 + 2503) < 0)
    {
      sub_20E860C04(v29, (void *)a1[310], a1[311]);
    }
    else
    {
      *(_OWORD *)v29 = *((_OWORD *)a1 + 155);
      v29[2] = (void *)a1[312];
    }
    if (a2)
    {
      v14 = (std::__shared_weak_count *)operator new(0x20uLL);
      v14->__shared_owners_ = 0;
      v14->__shared_weak_owners_ = 0;
      v14->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B34C8;
      v14[1].__vftable = (std::__shared_weak_count_vtbl *)_Block_copy(a2);
      v30 = &v14[1].__vftable;
      v31 = v14;
    }
    else
    {
      v30 = 0;
      v31 = 0;
    }
    v15 = (_QWORD *)operator new();
    *(void **)&v35[7] = *(void **)((char *)&v29[1] + 7);
    v17 = v29[0];
    v16 = v29[1];
    v35[7] = HIBYTE(v29[1]);
    v18 = HIBYTE(v29[2]);
    memset(v29, 0, sizeof(v29));
    v20 = v30;
    v19 = v31;
    v30 = 0;
    v31 = 0;
    *v15 = &off_24C9B48D0;
    *(_QWORD *)__p = v16;
    *(_QWORD *)&__p[7] = *(_QWORD *)&v35[7];
    *(_QWORD *)v35 = 0;
    *(_QWORD *)&v35[7] = 0;
    v15[4] = 0;
    v21 = operator new(0x30uLL);
    *v21 = off_24C9B3518;
    v21[1] = v17;
    v21[2] = *(_QWORD *)__p;
    *(_QWORD *)((char *)v21 + 23) = *(_QWORD *)&__p[7];
    *((_BYTE *)v21 + 31) = v18;
    v21[4] = v20;
    v21[5] = v19;
    v15[4] = v21;
    *(_QWORD *)__p = &off_24C9B4888;
    v22 = (_QWORD *)operator new();
    *v22 = &off_24C9B48D0;
    v23 = v22 + 1;
    v24 = v15[4];
    if (v24)
    {
      if ((_QWORD *)v24 == v15 + 1)
      {
        v22[4] = v23;
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 24))(v24);
        goto LABEL_36;
      }
      v24 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v24 + 16))(v24, v23);
    }
    v22[4] = v24;
LABEL_36:
    *(_QWORD *)&__p[8] = v22;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v7 + 16))(v7, __p);
    v25 = *(_QWORD *)&__p[8];
    *(_QWORD *)__p = &off_24C9B4888;
    *(_QWORD *)&__p[8] = 0;
    if (v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
    (*(void (**)(_QWORD *))(*v15 + 8))(v15);
    v26 = v31;
    if (v31)
    {
      p_shared_owners = (unint64_t *)&v31->__shared_owners_;
      do
        v28 = __ldaxr(p_shared_owners);
      while (__stlxr(v28 - 1, p_shared_owners));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    if (SHIBYTE(v29[2]) < 0)
      operator delete(v29[0]);
    return 1;
  }
  *(_QWORD *)__p = operator new(0x68uLL);
  *(_OWORD *)&__p[8] = xmmword_2102E3F40;
  strcpy(*(char **)__p, "The session has not been initialized. You need to call CV3DSLAMInitialize before calling this method");
  v8 = (char *)operator new(0x70uLL);
  *(_QWORD *)v35 = v8;
  *(_OWORD *)&v35[8] = xmmword_2102E3F50;
  strcpy(v8, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
  if (!a3)
    goto LABEL_20;
  *(_QWORD *)&v34.__val_ = 22;
  v34.__cat_ = std::generic_category();
  sub_20EA67538(&v34, (uint64_t)__p, (CFErrorRef *)&cf);
  if (*a3)
    CFRelease(*a3);
  *a3 = 0;
  v9 = cf;
  if (cf)
    CFRetain(cf);
  *a3 = v9;
  v10 = v33;
  if (v33)
  {
    v11 = (unint64_t *)&v33->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      if ((v35[23] & 0x80000000) == 0)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  if ((v35[23] & 0x80000000) != 0)
  {
LABEL_19:
    v8 = *(char **)v35;
LABEL_20:
    operator delete(v8);
  }
LABEL_21:
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_20E97E68C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v25;
  uint64_t v26;

  MEMORY[0x212BC6398](v26, 0x10A1C400AA0B987);
  (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  sub_20E8CADF8((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void sub_20E97E720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  int v12;
  unint64_t *p_shared_owners;
  unint64_t v15;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v12 < 0)
    operator delete(v10);
  MEMORY[0x212BC6398](v9, 0x10A1C400AA0B987);
  sub_20E8CADF8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E97E78C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E8CADF8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E97E7A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;

  operator delete(v26);
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E97E7DC(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B4888;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t sub_20E97E81C(uint64_t a1, const void *a2, CFTypeRef *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  char *v8;
  unint64_t v9;
  char *v10;
  CFTypeRef v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  _QWORD *v24;
  __int128 v25;
  char *v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  void *__p;
  __int128 v34;
  CFTypeRef cf;
  std::__shared_weak_count *v36;
  std::error_condition v37;

  if (*(_QWORD *)a1
    && *(_QWORD *)(a1 + 8)
    && *(_QWORD *)(a1 + 16)
    && *(_QWORD *)(a1 + 24)
    && *(_QWORD *)(a1 + 32)
    && *(_QWORD *)(a1 + 40))
  {
    std::mutex::lock((std::mutex *)(a1 + 4224));
    if (a2)
    {
      v6 = operator new(0x20uLL);
      v6[1] = 0;
      v6[2] = 0;
      *v6 = &off_24C9B3598;
      v6[3] = _Block_copy(a2);
      v7 = v6 + 3;
      __p = v6 + 3;
      *(_QWORD *)&v34 = v6;
      v8 = *(char **)(a1 + 4296);
      v9 = *(_QWORD *)(a1 + 4304);
      if ((unint64_t)v8 < v9)
      {
LABEL_9:
        *(_QWORD *)v8 = v7;
        *((_QWORD *)v8 + 1) = v6;
        *(_QWORD *)(a1 + 4296) = v8 + 16;
LABEL_52:
        std::mutex::unlock((std::mutex *)(a1 + 4224));
        return 1;
      }
    }
    else
    {
      v6 = 0;
      v7 = 0;
      __p = 0;
      *(_QWORD *)&v34 = 0;
      v8 = *(char **)(a1 + 4296);
      v9 = *(_QWORD *)(a1 + 4304);
      if ((unint64_t)v8 < v9)
        goto LABEL_9;
    }
    v16 = *(char **)(a1 + 4288);
    v17 = (v8 - v16) >> 4;
    v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 60)
      sub_20E867F44();
    v19 = v9 - (_QWORD)v16;
    if (v19 >> 3 > v18)
      v18 = v19 >> 3;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0)
      v20 = 0xFFFFFFFFFFFFFFFLL;
    else
      v20 = v18;
    if (v20)
    {
      if (v20 >> 60)
        sub_20E877A38();
      v21 = (char *)operator new(16 * v20);
    }
    else
    {
      v21 = 0;
    }
    v22 = &v21[16 * v17];
    *(_QWORD *)v22 = v7;
    *((_QWORD *)v22 + 1) = v6;
    v23 = &v21[16 * v20];
    __p = 0;
    *(_QWORD *)&v34 = 0;
    v24 = v22 + 16;
    if (v8 == v16)
    {
      *(_QWORD *)(a1 + 4288) = v22;
      *(_QWORD *)(a1 + 4296) = v24;
      *(_QWORD *)(a1 + 4304) = v23;
    }
    else
    {
      do
      {
        v25 = *((_OWORD *)v8 - 1);
        v8 -= 16;
        *((_OWORD *)v22 - 1) = v25;
        v22 -= 16;
        *(_QWORD *)v8 = 0;
        *((_QWORD *)v8 + 1) = 0;
      }
      while (v8 != v16);
      v8 = *(char **)(a1 + 4288);
      v26 = *(char **)(a1 + 4296);
      *(_QWORD *)(a1 + 4288) = v22;
      *(_QWORD *)(a1 + 4296) = v24;
      *(_QWORD *)(a1 + 4304) = v23;
      while (v26 != v8)
      {
        v27 = (std::__shared_weak_count *)*((_QWORD *)v26 - 1);
        if (v27)
        {
          p_shared_owners = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldaxr(p_shared_owners);
          while (__stlxr(v29 - 1, p_shared_owners));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v26 -= 16;
      }
    }
    if (v8)
      operator delete(v8);
    v30 = (std::__shared_weak_count *)v34;
    *(_QWORD *)(a1 + 4296) = v24;
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    goto LABEL_52;
  }
  __p = operator new(0x68uLL);
  v34 = xmmword_2102E3F40;
  strcpy((char *)__p, "The session has not been initialized. You need to call CV3DSLAMInitialize before calling this method");
  v10 = (char *)operator new(0x70uLL);
  strcpy(v10, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
  if (a3)
  {
    *(_QWORD *)&v37.__val_ = 22;
    v37.__cat_ = std::generic_category();
    sub_20EA67538(&v37, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v11 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v11;
    v12 = v36;
    if (v36)
    {
      v13 = (unint64_t *)&v36->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  operator delete(v10);
  if (SHIBYTE(v34) < 0)
    operator delete(__p);
  return 0;
}

void sub_20E97EBB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  std::mutex *v12;
  std::__shared_weak_count *v13;
  void *v15;

  std::__shared_weak_count::~__shared_weak_count(v13);
  operator delete(v15);
  std::mutex::unlock(v12);
  _Unwind_Resume(a1);
}

void sub_20E97EBE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E97EC24(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B46D8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

_QWORD *sub_20E97EC64(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B4780;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

_QWORD *sub_20E97ECA4(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B4748;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

_QWORD *sub_20E97ECE4(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B4710;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

_QWORD *sub_20E97ED24(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B46A0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t sub_20E97ED64(_QWORD *a1, const void *a2, CFTypeRef *a3)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  char *v9;
  CFTypeRef v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  void *__p;
  __int128 v22;
  CFTypeRef cf;
  std::__shared_weak_count *v24;
  std::error_condition v25;

  if (*a1)
  {
    v4 = a1[1];
    if (v4)
    {
      if (a1[2] && a1[3] && a1[4] && a1[5])
      {
        v6 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 240);
        if (a2)
        {
          v7 = operator new(0x20uLL);
          v7[1] = 0;
          v7[2] = 0;
          *v7 = &off_24C9B35E8;
          v7[3] = _Block_copy(a2);
          v8 = v7 + 3;
        }
        else
        {
          v7 = 0;
          v8 = 0;
        }
        v15 = (_QWORD *)operator new();
        *v15 = &off_24C9B3638;
        v15[1] = &off_24C9B36B0;
        v16 = v15 + 1;
        v15[2] = v8;
        v15[3] = v7;
        v15[4] = v15 + 1;
        __p = &off_24C9B4668;
        v17 = (_QWORD *)operator new();
        *v17 = &off_24C9B3638;
        v18 = v17 + 1;
        v19 = v15[4];
        if (v19)
        {
          if ((_QWORD *)v19 == v16)
          {
            v17[4] = v18;
            (*(void (**)(_QWORD *))(*v16 + 24))(v16);
            goto LABEL_28;
          }
          v19 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v19 + 16))(v19, v18);
        }
        v17[4] = v19;
LABEL_28:
        *(_QWORD *)&v22 = v17;
        (*(void (**)(uint64_t, void **))(*(_QWORD *)(v6 + 792) + 16))(v6 + 792, &__p);
        v20 = v22;
        __p = &off_24C9B4668;
        *(_QWORD *)&v22 = 0;
        if (v20)
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        (*(void (**)(_QWORD *))(*v15 + 8))(v15);
        return 1;
      }
    }
  }
  __p = operator new(0x68uLL);
  v22 = xmmword_2102E3F40;
  strcpy((char *)__p, "The session has not been initialized. You need to call CV3DSLAMInitialize before calling this method");
  v9 = (char *)operator new(0x70uLL);
  strcpy(v9, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
  if (a3)
  {
    *(_QWORD *)&v25.__val_ = 22;
    v25.__cat_ = std::generic_category();
    sub_20EA67538(&v25, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v10 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v10;
    v11 = v24;
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  operator delete(v9);
  if (SHIBYTE(v22) < 0)
    operator delete(__p);
  return 0;
}

void sub_20E97F068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  MEMORY[0x212BC6398](v10, 0x10A1C400AA0B987);
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E97F0DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E97F0F0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a19 < 0)
    JUMPOUT(0x20E97F120);
  JUMPOUT(0x20E97F124);
}

_QWORD *sub_20E97F12C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B4668;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

_QWORD *sub_20E97F16C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B47B8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t sub_20E97F1AC(_QWORD *a1, unsigned int *a2, CFTypeRef *a3, int a4)
{
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _DWORD *v11;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  std::logic_error *exception;
  char *v16;
  const void *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int *v23;
  unint64_t *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  size_t v35;
  size_t v36;
  size_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  char *v41;
  const std::error_category *v42;
  std::__shared_weak_count *size;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  const std::error_category *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  unsigned int v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  const std::error_category *v64;
  unint64_t *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  _BYTE __p[32];
  __int128 v89;
  _BYTE v90[40];
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  char v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  unsigned int v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  double v115;
  char v116;
  _BYTE cf[32];
  __int128 v118;
  _BYTE v119[25];
  uint64_t v120;
  std::__shared_weak_count *v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  _BYTE v124[32];
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  char v132;
  _BYTE v133[32];
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  uint64_t v142;
  uint64_t (**v143)();
  std::__shared_weak_count *v144;
  std::__shared_weak_count *v145;
  std::string v146;
  _QWORD v147[3];

  if (*a1 && a1[1] && a1[2] && a1[3] && a1[4] && a1[5])
  {
    if (a2)
    {
      __p[0] = 0;
      LOBYTE(v95) = 0;
      if (*((_BYTE *)a2 + 184))
      {
        v8 = *((_OWORD *)a2 + 8);
        v9 = *((_OWORD *)a2 + 10);
        v89 = *((_OWORD *)a2 + 9);
        *(_OWORD *)v90 = v9;
        v10 = *((_OWORD *)a2 + 8);
        *(_OWORD *)__p = *((_OWORD *)a2 + 7);
        *(_OWORD *)&__p[16] = v10;
        *(_OWORD *)&v90[24] = *(_OWORD *)__p;
        v91 = v8;
        *(_QWORD *)&v90[16] = *((_QWORD *)a2 + 22);
        v93 = 0;
        *(_QWORD *)&v94 = 0;
        v92 = v89;
        *((_QWORD *)&v94 + 1) = 0x3FF0000000000000;
        LOBYTE(v95) = 1;
      }
      v11 = sub_20EA93A0C((uint64_t)(a1 + 6), *a2, a2[1]);
      sub_20EA8451C((uint64_t)__p, (uint64_t)(a2 + 16), (uint64_t)(a2 + 64), (uint64_t)v11, (uint64_t)v133);
      v129 = v138;
      v130 = v139;
      v131 = v140;
      v125 = v134;
      v126 = v135;
      v127 = v136;
      v128 = v137;
      *(_OWORD *)v124 = *(_OWORD *)v133;
      *(_OWORD *)&v124[16] = *(_OWORD *)&v133[16];
      v132 = 1;
      v12 = *a2;
      if (a2[1])
      {
        v13 = (_DWORD *)a1[6];
        v14 = (_DWORD *)a1[7];
        if (v13 != v14)
        {
          while (*v13 != (_DWORD)v12)
          {
            v13 += 272;
            if (v13 == v14)
              goto LABEL_14;
          }
        }
        if (v13 == v14)
        {
LABEL_14:
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "Requested camera id not found.");
          exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
          __cxa_throw(exception, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
        }
        v23 = v13 + 134;
      }
      else
      {
        v23 = sub_20EA8F258((uint64_t)(a1 + 6), v12) + 2;
      }
      v25 = *((_QWORD *)a2 + 1);
      v26 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
      if (v26)
      {
        p_shared_owners = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldxr(p_shared_owners);
        while (__stxr(v28 + 1, p_shared_owners));
      }
      v143 = &off_24CA1A9A0;
      if (v25)
      {
        v30 = *(std::__shared_weak_count **)(v25 + 8);
        v29 = *(std::__shared_weak_count **)(v25 + 16);
        v144 = v30;
        v145 = v29;
        if (v29)
        {
          v31 = (unint64_t *)&v29->__shared_owners_;
          do
            v32 = __ldxr(v31);
          while (__stxr(v32 + 1, v31));
        }
      }
      else
      {
        v144 = 0;
        v145 = 0;
      }
      if (v26)
      {
        v33 = (unint64_t *)&v26->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v26->__on_zero_shared)(v26, v12);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      v35 = sub_21015DA88((uint64_t)&v143, 0);
      v36 = sub_21015DD08((uint64_t)&v143, 0);
      v37 = sub_21015DF88((uint64_t)&v143, 0);
      if (v35)
      {
        if (v36)
        {
          if (v37)
          {
            if (*((_BYTE *)a1 + 2504) || v35 == *v23 && v36 == v23[1])
            {
              cf[0] = 0;
              cf[24] = 0;
LABEL_85:
              v143 = &off_24CA1A9A0;
              v38 = v145;
              if (v145)
              {
                v39 = (unint64_t *)&v145->__shared_owners_;
                do
                  v40 = __ldaxr(v39);
                while (__stlxr(v40 - 1, v39));
                if (!v40)
                {
                  ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
                  std::__shared_weak_count::__release_weak(v38);
                }
              }
              if (cf[24])
              {
                v41 = (char *)operator new(0x70uLL);
                *(_QWORD *)__p = v41;
                *(_OWORD *)&__p[8] = xmmword_2102E3F50;
                strcpy(v41, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
                if (a3)
                {
                  v42 = std::generic_category();
                  *(_QWORD *)v133 = 22;
                  *(_QWORD *)&v133[8] = v42;
                  sub_20EA67538((const std::error_condition *)v133, (uint64_t)cf, (CFErrorRef *)&v146);
                  sub_20EA66CF0((const void **)&v146.__r_.__value_.__l.__data_, a3);
                  size = (std::__shared_weak_count *)v146.__r_.__value_.__l.__size_;
                  if (v146.__r_.__value_.__l.__size_)
                  {
                    v44 = (unint64_t *)(v146.__r_.__value_.__l.__size_ + 8);
                    do
                      v45 = __ldaxr(v44);
                    while (__stlxr(v45 - 1, v44));
                    if (!v45)
                    {
                      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                      std::__shared_weak_count::__release_weak(size);
                    }
                  }
                  if ((__p[23] & 0x80000000) == 0)
                    goto LABEL_100;
                  v41 = *(char **)__p;
                }
                operator delete(v41);
LABEL_100:
                if (cf[24] && (cf[23] & 0x80000000) != 0)
                  operator delete(*(void **)cf);
                v21 = 0;
LABEL_104:
                if (!v132 && (v124[23] & 0x80000000) != 0)
                  operator delete(*(void **)v124);
                return v21;
              }
              *(_QWORD *)&v141 = 0;
              *(_QWORD *)&v141 = sub_210215600(3);
              if (a2[1] >= 0xA
                && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 55, (uint64_t)"stream_id < 10", 14, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
              {
                abort();
              }
              kdebug_trace();
              sub_20EAAC4AC((uint64_t)(a1 + 519), (double *)&v141, (unint64_t)a2);
              sub_20EAAD228(a1 + 519, a2);
              sub_210107D4C((uint64_t *)a2 + 1, 1, (uint64_t)cf);
              if (!*((_QWORD *)a2 + 12) || !a4)
                goto LABEL_115;
              v46 = a1[526];
              if (!v46)
              {
                if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp", 797, (uint64_t)"infield_calibration()", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                {
                  abort();
                }
                v46 = a1[526];
              }
              if (((*(uint64_t (**)(uint64_t, unsigned int *, _BYTE *, _BYTE *))(*(_QWORD *)v46 + 16))(v46, a2, v124, cf) & 1) == 0)
              {
                *(_QWORD *)__p = operator new(0x30uLL);
                *(_OWORD *)&__p[8] = xmmword_2102DC900;
                strcpy(*(char **)__p, "Failed to push camera to infield calibration");
                v47 = (char *)operator new(0x70uLL);
                *(_QWORD *)v133 = v47;
                *(_OWORD *)&v133[8] = xmmword_2102E3F50;
                strcpy(v47, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
                if (!a3)
                  goto LABEL_138;
                v64 = std::generic_category();
                v146.__r_.__value_.__r.__words[0] = 22;
                v146.__r_.__value_.__l.__size_ = (std::string::size_type)v64;
                sub_20EA67538((const std::error_condition *)&v146, (uint64_t)__p, (CFErrorRef *)&v143);
                sub_20EA66CF0((const void **)&v143, a3);
                v49 = v144;
                if (!v144)
                {
LABEL_136:
                  if ((v133[23] & 0x80000000) == 0)
                  {
LABEL_139:
                    if ((__p[23] & 0x80000000) != 0)
                      operator delete(*(void **)__p);
                    v21 = 0;
LABEL_173:
                    v82 = v123;
                    if (v123)
                    {
                      v83 = (unint64_t *)&v123->__shared_owners_;
                      do
                        v84 = __ldaxr(v83);
                      while (__stlxr(v84 - 1, v83));
                      if (!v84)
                      {
                        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                        std::__shared_weak_count::__release_weak(v82);
                      }
                    }
                    v85 = v121;
                    if (v121)
                    {
                      v86 = (unint64_t *)&v121->__shared_owners_;
                      do
                        v87 = __ldaxr(v86);
                      while (__stlxr(v87 - 1, v86));
                      if (!v87)
                      {
                        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                        std::__shared_weak_count::__release_weak(v85);
                      }
                    }
                    goto LABEL_104;
                  }
                  v47 = *(char **)v133;
LABEL_138:
                  operator delete(v47);
                  goto LABEL_139;
                }
                v65 = (unint64_t *)&v144->__shared_owners_;
                do
                  v51 = __ldaxr(v65);
                while (__stlxr(v51 - 1, v65));
              }
              else
              {
LABEL_115:
                kdebug_trace();
                v119[24] = *((_BYTE *)a2 + 200);
                *(_QWORD *)&v119[16] = *((_QWORD *)a2 + 24);
                if (!v119[24] || !sub_210215748((double *)&v119[16]))
                {
                  v52 = *((_QWORD *)a2 + 3);
                  v138 = v129;
                  v139 = v130;
                  v140 = v131;
                  v134 = v125;
                  v135 = v126;
                  v136 = v127;
                  v137 = v128;
                  *(_OWORD *)v133 = *(_OWORD *)v124;
                  *(_OWORD *)&v133[16] = *(_OWORD *)&v124[16];
                  v53 = *((_OWORD *)a2 + 2);
                  v54 = *((_OWORD *)a2 + 3);
                  v55 = *(_QWORD *)a2;
                  v57 = *((_OWORD *)a2 + 4);
                  v56 = *((_OWORD *)a2 + 5);
                  v58 = *((_QWORD *)a2 + 28);
                  v59 = a2[58];
                  v89 = v118;
                  *(_OWORD *)v90 = *(_OWORD *)v119;
                  *(_OWORD *)&v90[9] = *(_OWORD *)&v119[9];
                  *(_OWORD *)__p = *(_OWORD *)cf;
                  *(_OWORD *)&__p[16] = *(_OWORD *)&cf[16];
                  *(_QWORD *)&v90[32] = v120;
                  *(_QWORD *)&v91 = v121;
                  if (v121)
                  {
                    v60 = (unint64_t *)&v121->__shared_owners_;
                    do
                      v61 = __ldxr(v60);
                    while (__stxr(v61 + 1, v60));
                  }
                  *((_QWORD *)&v91 + 1) = v122;
                  *(_QWORD *)&v92 = v123;
                  if (v123)
                  {
                    v62 = (unint64_t *)&v123->__shared_owners_;
                    do
                      v63 = __ldxr(v62);
                    while (__stxr(v63 + 1, v62));
                  }
                  *((_QWORD *)&v92 + 1) = v52;
                  v93 = 0;
                  v100 = v138;
                  v101 = v139;
                  v102 = v140;
                  v96 = v134;
                  v97 = v135;
                  v98 = v136;
                  v99 = v137;
                  v94 = *(_OWORD *)v133;
                  v95 = *(_OWORD *)&v133[16];
                  v103 = 1;
                  v104 = v53;
                  v105 = v54;
                  v106 = v57;
                  v107 = v56;
                  v108 = v58;
                  v109 = v59;
                  v110 = 0u;
                  v111 = 0u;
                  v116 = 0;
                  v113 = 0;
                  v114 = 0;
                  v112 = v55;
                  LOBYTE(v115) = 0;
                  if (!*((_QWORD *)a2 + 12))
                    goto LABEL_157;
                  kdebug_trace();
                  v66 = *((_QWORD *)a2 + 12);
                  v67 = (std::__shared_weak_count *)*((_QWORD *)a2 + 13);
                  if (v67)
                  {
                    v68 = (unint64_t *)&v67->__shared_owners_;
                    do
                      v69 = __ldxr(v68);
                    while (__stxr(v69 + 1, v68));
                  }
                  v70 = v114;
                  v113 = v66;
                  v114 = v67;
                  if (v70)
                  {
                    v71 = (unint64_t *)&v70->__shared_owners_;
                    do
                      v72 = __ldaxr(v71);
                    while (__stlxr(v72 - 1, v71));
                    if (!v72)
                    {
                      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                      std::__shared_weak_count::__release_weak(v70);
                    }
                  }
                  v116 = *((_BYTE *)a2 + 216);
                  v115 = *((double *)a2 + 26);
                  if (v116 && sub_210215748(&v115))
                  {
                    sub_20E8610C0(v133, "Expired HWFP");
                    sub_20E8610C0(&v146, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
                    sub_20E8EAB0C(a3, 0x16u, (uint64_t)v133);
                    if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v146.__r_.__value_.__l.__data_);
                    if ((v133[23] & 0x80000000) != 0)
                      operator delete(*(void **)v133);
                    v21 = 0;
                  }
                  else
                  {
LABEL_157:
                    (*(void (**)(_QWORD, _BYTE *))(*(_QWORD *)*a1 + 40))(*a1, __p);
                    v21 = 1;
                    kdebug_trace();
                  }
                  v73 = v114;
                  if (v114)
                  {
                    v74 = (unint64_t *)&v114->__shared_owners_;
                    do
                      v75 = __ldaxr(v74);
                    while (__stlxr(v75 - 1, v74));
                    if (!v75)
                    {
                      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                      std::__shared_weak_count::__release_weak(v73);
                    }
                  }
                  v76 = (std::__shared_weak_count *)v92;
                  if ((_QWORD)v92)
                  {
                    v77 = (unint64_t *)(v92 + 8);
                    do
                      v78 = __ldaxr(v77);
                    while (__stlxr(v78 - 1, v77));
                    if (!v78)
                    {
                      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                      std::__shared_weak_count::__release_weak(v76);
                    }
                  }
                  v79 = (std::__shared_weak_count *)v91;
                  if ((_QWORD)v91)
                  {
                    v80 = (unint64_t *)(v91 + 8);
                    do
                      v81 = __ldaxr(v80);
                    while (__stlxr(v81 - 1, v80));
                    if (!v81)
                    {
                      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                      std::__shared_weak_count::__release_weak(v79);
                    }
                  }
                  goto LABEL_173;
                }
                __p[23] = 13;
                strcpy(__p, "Expired image");
                v47 = (char *)operator new(0x70uLL);
                *(_QWORD *)v133 = v47;
                *(_OWORD *)&v133[8] = xmmword_2102E3F50;
                strcpy(v47, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
                if (!a3)
                  goto LABEL_138;
                v48 = std::generic_category();
                v146.__r_.__value_.__r.__words[0] = 22;
                v146.__r_.__value_.__l.__size_ = (std::string::size_type)v48;
                sub_20EA67538((const std::error_condition *)&v146, (uint64_t)__p, (CFErrorRef *)&v143);
                sub_20EA66CF0((const void **)&v143, a3);
                v49 = v144;
                if (!v144)
                  goto LABEL_136;
                v50 = (unint64_t *)&v144->__shared_owners_;
                do
                  v51 = __ldaxr(v50);
                while (__stlxr(v51 - 1, v50));
              }
              if (!v51)
              {
                ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                std::__shared_weak_count::__release_weak(v49);
              }
              goto LABEL_136;
            }
            *(_DWORD *)&v133[24] = 0;
            sub_20E9955EC(v133, "The camera frame's width (");
            std::to_string(&v146, v35);
            *(_QWORD *)__p = v133;
            *(_QWORD *)&__p[8] = &v146;
            *(_QWORD *)&__p[16] = v133;
            *(_QWORD *)&__p[24] = &v146;
            *(_QWORD *)&v89 = &v146;
            if (*(_DWORD *)&v133[24] == -1)
              sub_20E877AB8();
            v147[0] = __p;
            ((void (*)(_QWORD *, _BYTE *))off_24C9B3420[*(unsigned int *)&v133[24]])(v147, v133);
            if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v146.__r_.__value_.__l.__data_);
            *(_QWORD *)__p = v133;
            *(_QWORD *)&__p[8] = ") and height (";
            *(_QWORD *)&__p[16] = v133;
            *(_QWORD *)&__p[24] = ") and height (";
            *(_QWORD *)&v89 = ") and height (";
            if (*(_DWORD *)&v133[24] == -1)
              sub_20E877AB8();
            v146.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
            ((void (*)(std::string *, _BYTE *))off_24C9B3838[*(unsigned int *)&v133[24]])(&v146, v133);
            std::to_string(&v146, v36);
            *(_QWORD *)__p = v133;
            *(_QWORD *)&__p[8] = &v146;
            *(_QWORD *)&__p[16] = v133;
            *(_QWORD *)&__p[24] = &v146;
            *(_QWORD *)&v89 = &v146;
            if (*(_DWORD *)&v133[24] == -1)
              sub_20E877AB8();
            v147[0] = __p;
            ((void (*)(_QWORD *, _BYTE *))off_24C9B3420[*(unsigned int *)&v133[24]])(v147, v133);
            if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v146.__r_.__value_.__l.__data_);
            *(_QWORD *)__p = v133;
            *(_QWORD *)&__p[8] = ") do not match the calibration width (";
            *(_QWORD *)&__p[16] = v133;
            *(_QWORD *)&__p[24] = ") do not match the calibration width (";
            *(_QWORD *)&v89 = ") do not match the calibration width (";
            if (*(_DWORD *)&v133[24] == -1)
              sub_20E877AB8();
            v146.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
            ((void (*)(std::string *, _BYTE *))off_24C9B3850[*(unsigned int *)&v133[24]])(&v146, v133);
            std::to_string(&v146, *v23);
            *(_QWORD *)__p = v133;
            *(_QWORD *)&__p[8] = &v146;
            *(_QWORD *)&__p[16] = v133;
            *(_QWORD *)&__p[24] = &v146;
            *(_QWORD *)&v89 = &v146;
            if (*(_DWORD *)&v133[24] == -1)
              sub_20E877AB8();
            v147[0] = __p;
            ((void (*)(_QWORD *, _BYTE *))off_24C9B3420[*(unsigned int *)&v133[24]])(v147, v133);
            if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v146.__r_.__value_.__l.__data_);
            *(_QWORD *)__p = v133;
            *(_QWORD *)&__p[8] = ") and height (";
            *(_QWORD *)&__p[16] = v133;
            *(_QWORD *)&__p[24] = ") and height (";
            *(_QWORD *)&v89 = ") and height (";
            if (*(_DWORD *)&v133[24] == -1)
              sub_20E877AB8();
            v146.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
            ((void (*)(std::string *, _BYTE *))off_24C9B3838[*(unsigned int *)&v133[24]])(&v146, v133);
            std::to_string(&v146, v23[1]);
            *(_QWORD *)__p = v133;
            *(_QWORD *)&__p[8] = &v146;
            *(_QWORD *)&__p[16] = v133;
            *(_QWORD *)&__p[24] = &v146;
            *(_QWORD *)&v89 = &v146;
            if (*(_DWORD *)&v133[24] == -1)
              sub_20E877AB8();
            v147[0] = __p;
            ((void (*)(_QWORD *, _BYTE *))off_24C9B3420[*(unsigned int *)&v133[24]])(v147, v133);
            if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v146.__r_.__value_.__l.__data_);
            *(_QWORD *)__p = v133;
            *(_QWORD *)&__p[8] = ")";
            *(_QWORD *)&__p[16] = v133;
            *(_QWORD *)&__p[24] = ")";
            *(_QWORD *)&v89 = ")";
            if (*(_DWORD *)&v133[24] == -1)
              sub_20E877AB8();
            v146.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
            ((void (*)(std::string *, _BYTE *))off_24C9B3438[*(unsigned int *)&v133[24]])(&v146, v133);
            if (*(_DWORD *)&v133[24] == -1)
              sub_20E877AB8();
            *(_QWORD *)__p = &v146;
            ((void (*)(__int128 *__return_ptr, _BYTE *, _BYTE *))off_24C9B3450[*(unsigned int *)&v133[24]])(&v141, __p, v133);
            if (*(_DWORD *)&v133[24] != -1)
              ((void (*)(_BYTE *, _BYTE *))off_24C9B33F0[*(unsigned int *)&v133[24]])(__p, v133);
            *(_OWORD *)cf = v141;
            *(_QWORD *)&cf[16] = v142;
          }
          else
          {
            *(_QWORD *)cf = operator new(0x30uLL);
            *(_OWORD *)&cf[8] = xmmword_2102E3F60;
            strcpy(*(char **)cf, "The camera frame must have a positive stride ");
          }
        }
        else
        {
          *(_QWORD *)cf = operator new(0x30uLL);
          *(_OWORD *)&cf[8] = xmmword_2102DC900;
          strcpy(*(char **)cf, "The camera frame must have a positive heigth");
        }
      }
      else
      {
        *(_QWORD *)cf = operator new(0x30uLL);
        *(_OWORD *)&cf[8] = xmmword_2102DC8E0;
        strcpy(*(char **)cf, "The camera frame must have a positive width");
      }
      cf[24] = 1;
      goto LABEL_85;
    }
    *(_QWORD *)__p = operator new(0x20uLL);
    *(_OWORD *)&__p[8] = xmmword_2102DCC80;
    strcpy(*(char **)__p, "Pushed camera frame is NULL");
    v16 = (char *)operator new(0x70uLL);
    *(_QWORD *)v124 = v16;
    *(_OWORD *)&v124[8] = xmmword_2102E3F50;
    strcpy(v16, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
    if (!a3)
      goto LABEL_27;
    *(_QWORD *)v133 = 22;
    *(_QWORD *)&v133[8] = std::generic_category();
    sub_20EA67538((const std::error_condition *)v133, (uint64_t)__p, (CFErrorRef *)cf);
    sub_20EA66CF0((const void **)cf, a3);
    v18 = *(std::__shared_weak_count **)&cf[8];
    if (*(_QWORD *)&cf[8])
    {
      v24 = (unint64_t *)(*(_QWORD *)&cf[8] + 8);
      do
        v20 = __ldaxr(v24);
      while (__stlxr(v20 - 1, v24));
      goto LABEL_23;
    }
  }
  else
  {
    *(_QWORD *)__p = operator new(0x68uLL);
    *(_OWORD *)&__p[8] = xmmword_2102E3F40;
    strcpy(*(char **)__p, "The session has not been initialized. You need to call CV3DSLAMInitialize before calling this method");
    v16 = (char *)operator new(0x70uLL);
    *(_QWORD *)v124 = v16;
    *(_OWORD *)&v124[8] = xmmword_2102E3F50;
    strcpy(v16, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
    if (!a3)
    {
LABEL_27:
      operator delete(v16);
      goto LABEL_28;
    }
    *(_QWORD *)v133 = 22;
    *(_QWORD *)&v133[8] = std::generic_category();
    sub_20EA67538((const std::error_condition *)v133, (uint64_t)__p, (CFErrorRef *)cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v17 = *(const void **)cf;
    if (*(_QWORD *)cf)
      CFRetain(*(CFTypeRef *)cf);
    *a3 = v17;
    v18 = *(std::__shared_weak_count **)&cf[8];
    if (*(_QWORD *)&cf[8])
    {
      v19 = (unint64_t *)(*(_QWORD *)&cf[8] + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
LABEL_23:
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  if ((v124[23] & 0x80000000) != 0)
  {
    v16 = *(char **)v124;
    goto LABEL_27;
  }
LABEL_28:
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_20E980288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  uint64_t v63;

  if (*(char *)(v63 - 105) < 0)
    operator delete(*(void **)(v63 - 128));
  if (SLOBYTE(STACK[0x2D7]) < 0)
    operator delete((void *)STACK[0x2C0]);
  sub_20E98046C(&a9);
  sub_20E8E5AE4((uint64_t)&a63);
  if (!LOBYTE(STACK[0x2B0]) && SLOBYTE(STACK[0x237]) < 0)
    operator delete((void *)STACK[0x220]);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E98046C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (std::__shared_weak_count *)a1[51];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[13];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[13];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[11];
  if (!v8)
    return a1;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
    return a1;
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

uint64_t sub_20E980550(char **a1, double *a2, CFTypeRef *a3)
{
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  CFTypeRef v10;
  unint64_t *v11;
  unint64_t v12;
  void **v14;
  uint64_t v15;
  char *v16;
  CFTypeRef cf;
  std::__shared_weak_count *v18;
  std::error_condition v19;
  void *__p;
  __int128 v21;
  void **p_p;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  if (*a1 && a1[1] && a1[2] && a1[3] && a1[4] && a1[5])
  {
    if (*a2 < 0.0)
    {
      __p = operator new(0x38uLL);
      v21 = xmmword_2102DCA30;
      strcpy((char *)__p, "SLAM Mag timestamp must be greater than or equal to 0");
      v6 = (char *)operator new(0x70uLL);
      v16 = v6;
      strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
      if (a3)
      {
        *(_QWORD *)&v19.__val_ = 22;
        v19.__cat_ = std::generic_category();
        sub_20EA67538(&v19, (uint64_t)&__p, (CFErrorRef *)&cf);
        sub_20EA66CF0(&cf, a3);
        v7 = v18;
        if (!v18)
          goto LABEL_24;
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (v9)
          goto LABEL_24;
        goto LABEL_23;
      }
      goto LABEL_25;
    }
    __p = &off_24C9F6CD8;
    *(_QWORD *)&v21 = a1 + 320;
    p_p = &__p;
    sub_20EFF8618(a1 + 325, (uint64_t)a2);
    if ((char *)(0xAAAAAAAAAAAAAAABLL * ((a1[326] - a1[325]) >> 3)) == a1[321])
    {
      if (!p_p)
        sub_20E86D37C();
      (*((void (**)(void **, char **))*p_p + 6))(p_p, a1 + 325);
      a1[326] = a1[325];
    }
    v14 = p_p;
    if (p_p == &__p)
    {
      v15 = 4;
      v14 = &__p;
    }
    else
    {
      if (!p_p)
      {
LABEL_36:
        (*(void (**)(char *, double *))(*(_QWORD *)*a1 + 80))(*a1, a2);
        return 1;
      }
      v15 = 5;
    }
    (*((void (**)(void))*v14 + v15))();
    goto LABEL_36;
  }
  __p = operator new(0x68uLL);
  v21 = xmmword_2102E3F40;
  strcpy((char *)__p, "The session has not been initialized. You need to call CV3DSLAMInitialize before calling this method");
  v6 = (char *)operator new(0x70uLL);
  v16 = v6;
  strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
  if (a3)
  {
    *(_QWORD *)&v19.__val_ = 22;
    v19.__cat_ = std::generic_category();
    sub_20EA67538(&v19, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v10 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v10;
    v7 = v18;
    if (!v18)
      goto LABEL_24;
    v11 = (unint64_t *)&v18->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (v12)
      goto LABEL_24;
LABEL_23:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
LABEL_24:
    v6 = v16;
  }
LABEL_25:
  operator delete(v6);
  if (SHIBYTE(v21) < 0)
    operator delete(__p);
  return 0;
}

void sub_20E980900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  void *v22;

  sub_20E86665C((uint64_t)&a12);
  operator delete(v22);
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20E980980(uint64_t *a1, CFTypeRef *a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6)
{
  void *v8;
  char *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  CFTypeRef v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  void *__p;
  __int128 v24;
  double v25;
  char *v26;
  __int128 v27;
  CFTypeRef cf;
  std::__shared_weak_count *v29;
  std::error_condition v30;

  if (!*a1 || !a1[1] || !a1[2] || !a1[3] || !a1[4] || !a1[5])
  {
    __p = operator new(0x68uLL);
    v24 = xmmword_2102E3F40;
    strcpy((char *)__p, "The session has not been initialized. You need to call CV3DSLAMInitialize before calling this method");
    v9 = (char *)operator new(0x70uLL);
    v26 = v9;
    v27 = xmmword_2102E3F50;
    strcpy(v9, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
    if (a2)
    {
      *(_QWORD *)&v30.__val_ = 22;
      v30.__cat_ = std::generic_category();
      sub_20EA67538(&v30, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v13 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v13;
      v14 = v29;
      if (v29)
      {
        p_shared_owners = (unint64_t *)&v29->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
          if ((SHIBYTE(v27) & 0x80000000) == 0)
            goto LABEL_26;
LABEL_24:
          v9 = v26;
          goto LABEL_25;
        }
      }
LABEL_23:
      if ((SHIBYTE(v27) & 0x80000000) == 0)
      {
LABEL_26:
        if (SHIBYTE(v24) < 0)
          operator delete(__p);
        return 0;
      }
      goto LABEL_24;
    }
LABEL_25:
    operator delete(v9);
    goto LABEL_26;
  }
  v8 = (void *)a6.n128_u64[0];
  if (a6.n128_f64[0] < 0.0)
  {
    __p = operator new(0x38uLL);
    v24 = xmmword_2102DCEA0;
    strcpy((char *)__p, "SLAM Gyro timestamp must be greater than or equal to 0");
    v9 = (char *)operator new(0x70uLL);
    v26 = v9;
    v27 = xmmword_2102E3F50;
    strcpy(v9, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
    if (a2)
    {
      *(_QWORD *)&v30.__val_ = 22;
      v30.__cat_ = std::generic_category();
      sub_20EA67538(&v30, (uint64_t)&__p, (CFErrorRef *)&cf);
      sub_20EA66CF0(&cf, a2);
      v10 = v29;
      if (v29)
      {
        v11 = (unint64_t *)&v29->__shared_owners_;
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      goto LABEL_23;
    }
    goto LABEL_25;
  }
  v18 = a5.n128_f64[0];
  v19 = a4.n128_f64[0];
  v20 = a3.n128_f64[0];
  v21 = a1[526];
  if (!v21
    || ((*(uint64_t (**)(uint64_t, CFTypeRef *, __n128, __n128, __n128, __n128))(*(_QWORD *)v21 + 24))(v21, a2, a3, a4, a5, a6) & 1) == 0)
  {
    kdebug_trace();
    sub_210215600(3);
    kdebug_trace();
    kdebug_trace();
    v22 = *a1;
    __p = v8;
    *(double *)&v24 = v20 * 0.0174532925;
    *((double *)&v24 + 1) = v19 * 0.0174532925;
    v25 = v18 * 0.0174532925;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v22 + 56))(v22, &__p);
    kdebug_trace();
  }
  return 1;
}

void sub_20E980D48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  void *v20;

  sub_20E86665C((uint64_t)&a20);
  operator delete(v20);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20E980D90(double *a1, CFTypeRef *a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6)
{
  void *v8;
  char *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  CFTypeRef v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  double v22;
  double v23;
  void *__p;
  __int128 v25;
  double v26;
  char *v27;
  __int128 v28;
  CFTypeRef cf;
  std::__shared_weak_count *v30;
  std::error_condition v31;

  if (!*(_QWORD *)a1
    || !*((_QWORD *)a1 + 1)
    || !*((_QWORD *)a1 + 2)
    || !*((_QWORD *)a1 + 3)
    || !*((_QWORD *)a1 + 4)
    || !*((_QWORD *)a1 + 5))
  {
    __p = operator new(0x68uLL);
    v25 = xmmword_2102E3F40;
    strcpy((char *)__p, "The session has not been initialized. You need to call CV3DSLAMInitialize before calling this method");
    v9 = (char *)operator new(0x70uLL);
    v27 = v9;
    v28 = xmmword_2102E3F50;
    strcpy(v9, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
    if (a2)
    {
      *(_QWORD *)&v31.__val_ = 22;
      v31.__cat_ = std::generic_category();
      sub_20EA67538(&v31, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v13 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v13;
      v14 = v30;
      if (v30)
      {
        p_shared_owners = (unint64_t *)&v30->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
          if ((SHIBYTE(v28) & 0x80000000) == 0)
            goto LABEL_26;
LABEL_24:
          v9 = v27;
          goto LABEL_25;
        }
      }
LABEL_23:
      if ((SHIBYTE(v28) & 0x80000000) == 0)
      {
LABEL_26:
        if (SHIBYTE(v25) < 0)
          operator delete(__p);
        return 0;
      }
      goto LABEL_24;
    }
LABEL_25:
    operator delete(v9);
    goto LABEL_26;
  }
  v8 = (void *)a6.n128_u64[0];
  if (a6.n128_f64[0] < 0.0)
  {
    __p = operator new(0x38uLL);
    v25 = xmmword_2102DBEE0;
    strcpy((char *)__p, "SLAM Accel timestamp must be greater than or equal to 0");
    v9 = (char *)operator new(0x70uLL);
    v27 = v9;
    v28 = xmmword_2102E3F50;
    strcpy(v9, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
    if (a2)
    {
      *(_QWORD *)&v31.__val_ = 22;
      v31.__cat_ = std::generic_category();
      sub_20EA67538(&v31, (uint64_t)&__p, (CFErrorRef *)&cf);
      sub_20EA66CF0(&cf, a2);
      v10 = v30;
      if (v30)
      {
        v11 = (unint64_t *)&v30->__shared_owners_;
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      goto LABEL_23;
    }
    goto LABEL_25;
  }
  v18 = a5.n128_f64[0];
  v19 = a4.n128_f64[0];
  v20 = a3.n128_f64[0];
  v21 = *((_QWORD *)a1 + 526);
  if (!v21
    || ((*(uint64_t (**)(uint64_t, CFTypeRef *, __n128, __n128, __n128, __n128))(*(_QWORD *)v21 + 32))(v21, a2, a3, a4, a5, a6) & 1) == 0)
  {
    kdebug_trace();
    sub_210215600(3);
    kdebug_trace();
    kdebug_trace();
    v22 = *a1;
    v23 = a1[448];
    __p = v8;
    *(double *)&v25 = -(v23 * v20);
    *((double *)&v25 + 1) = -(v23 * v19);
    v26 = -(v23 * v18);
    (*(void (**)(double, void **))(**(_QWORD **)&v22 + 48))(COERCE_DOUBLE(*(_QWORD *)&v22), &__p);
    kdebug_trace();
  }
  return 1;
}

void sub_20E981154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  void *v20;

  sub_20E86665C((uint64_t)&a20);
  operator delete(v20);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20E98119C(_QWORD *a1, uint64_t a2, CFTypeRef *a3, double a4)
{
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  CFTypeRef v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count_vtbl *v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count_vtbl *v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  void *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  std::__shared_weak_count_vtbl *v50;
  char *v51;
  std::__shared_weak_count *v52;
  char *v53;
  __int128 v54;
  void *__p;
  __int128 v56;
  CFTypeRef cf;
  std::__shared_weak_count *v58;
  std::error_condition v59;

  if (!*a1 || !a1[1] || !a1[2] || !a1[3] || !a1[4] || !a1[5])
  {
    __p = operator new(0x68uLL);
    v56 = xmmword_2102E3F40;
    strcpy((char *)__p, "The session has not been initialized. You need to call CV3DSLAMInitialize before calling this method");
    v8 = (char *)operator new(0x70uLL);
    v53 = v8;
    v54 = xmmword_2102E3F50;
    strcpy(v8, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
    if (a3)
    {
      *(_QWORD *)&v59.__val_ = 22;
      v59.__cat_ = std::generic_category();
      sub_20EA67538(&v59, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v12 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v12;
      v13 = v58;
      if (v58)
      {
        p_shared_owners = (unint64_t *)&v58->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
          if ((SHIBYTE(v54) & 0x80000000) == 0)
            goto LABEL_26;
LABEL_24:
          v8 = v53;
          goto LABEL_25;
        }
      }
LABEL_23:
      if ((SHIBYTE(v54) & 0x80000000) == 0)
      {
LABEL_26:
        if (SHIBYTE(v56) < 0)
          operator delete(__p);
        return 0;
      }
      goto LABEL_24;
    }
    goto LABEL_25;
  }
  if (!a2)
  {
    __p = operator new(0x38uLL);
    v56 = xmmword_2102DCEA0;
    strcpy((char *)__p, "Pushing a NULL jasper point cloud to a CV3DSLAMSession");
    v8 = (char *)operator new(0x70uLL);
    v53 = v8;
    v54 = xmmword_2102E3F50;
    strcpy(v8, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
    if (!a3)
      goto LABEL_25;
    *(_QWORD *)&v59.__val_ = 22;
    v59.__cat_ = std::generic_category();
    sub_20EA67538(&v59, (uint64_t)&__p, (CFErrorRef *)&cf);
    sub_20EA66CF0(&cf, a3);
    v9 = v58;
    if (!v58)
      goto LABEL_23;
    v17 = (unint64_t *)&v58->__shared_owners_;
    do
      v11 = __ldaxr(v17);
    while (__stlxr(v11 - 1, v17));
LABEL_35:
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    goto LABEL_23;
  }
  if (a4 < 0.0)
  {
    __p = operator new(0x48uLL);
    v56 = xmmword_2102DBC20;
    strcpy((char *)__p, "Invalid timestamp when pushing jasper data. Timestamp must be positive");
    v8 = (char *)operator new(0x70uLL);
    v53 = v8;
    v54 = xmmword_2102E3F50;
    strcpy(v8, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
    if (a3)
    {
      *(_QWORD *)&v59.__val_ = 22;
      v59.__cat_ = std::generic_category();
      sub_20EA67538(&v59, (uint64_t)&__p, (CFErrorRef *)&cf);
      sub_20EA66CF0(&cf, a3);
      v9 = v58;
      if (!v58)
        goto LABEL_23;
      v10 = (unint64_t *)&v58->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      goto LABEL_35;
    }
LABEL_25:
    operator delete(v8);
    goto LABEL_26;
  }
  v18 = a1[97];
  v19 = a1[111];
  v20 = (std::__shared_weak_count_vtbl *)a1[112];
  v21 = a1[113];
  v22 = a1[114];
  v23 = (std::__shared_weak_count_vtbl *)a1[115];
  v24 = a1[116];
  v25 = a1[117];
  v49 = a1[119];
  v50 = (std::__shared_weak_count_vtbl *)a1[118];
  v26 = (std::__shared_weak_count *)operator new(0x208uLL);
  v26->__shared_owners_ = 0;
  v27 = (unint64_t *)&v26->__shared_owners_;
  v26->__shared_weak_owners_ = 0;
  v26->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B3878;
  sub_20E996340((uint64_t)&v26[1], a2 + 8);
  v53 = (char *)&v26[1];
  *(_QWORD *)&v54 = v26;
  *(double *)&v26[1].__vftable = a4;
  v26[2].__shared_owners_ = v18;
  v26[2].__shared_weak_owners_ = v19;
  v26[3].__vftable = v20;
  v26[3].__shared_owners_ = v21;
  v26[3].__shared_weak_owners_ = v22;
  v26[4].__vftable = v23;
  v26[4].__shared_owners_ = v24;
  v26[4].__shared_weak_owners_ = v25;
  v26[5].__vftable = v50;
  v26[5].__shared_owners_ = v49;
  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a1 + 464))(*a1))
  {
    v28 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 200))(*a1);
    __p = &v26[1];
    *(_QWORD *)&v56 = v26;
    do
      v29 = __ldxr(v27);
    while (__stxr(v29 + 1, v27));
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v28 + 16))(v28, &__p);
    v30 = (std::__shared_weak_count *)v56;
    if ((_QWORD)v56)
    {
      v31 = (unint64_t *)(v56 + 8);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    v26 = (std::__shared_weak_count *)v54;
  }
  if (**(_BYTE **)(a1[4] + 56))
  {
    v33 = *a1;
    v51 = v53;
    v52 = v26;
    if (v26)
    {
      v34 = (unint64_t *)&v26->__shared_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    (*(void (**)(void **__return_ptr, uint64_t, char **))(*(_QWORD *)v33 + 208))(&__p, v33, &v51);
    v36 = v52;
    if (v52)
    {
      v37 = (unint64_t *)&v52->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    v39 = (char *)__p;
    v40 = (char *)v56;
    if (__p != (void *)v56)
    {
      do
      {
        v41 = *(_QWORD *)(*(_QWORD *)(a1[4] + 56) + 80) + 256;
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v41 + 16))(v41, v39);
        v39 += 16;
      }
      while (v39 != v40);
      v39 = (char *)__p;
    }
    if (v39)
    {
      v42 = (char *)v56;
      v43 = v39;
      if ((char *)v56 != v39)
      {
        do
        {
          v44 = (std::__shared_weak_count *)*((_QWORD *)v42 - 1);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          v42 -= 16;
        }
        while (v42 != v39);
        v43 = __p;
      }
      *(_QWORD *)&v56 = v39;
      operator delete(v43);
    }
    v26 = (std::__shared_weak_count *)v54;
  }
  if (v26)
  {
    v47 = (unint64_t *)&v26->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  return 1;
}

void sub_20E9817C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va1);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E9817DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20E9817F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  void *v22;

  sub_20E86665C((uint64_t)&a22);
  operator delete(v22);
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20E981890(_QWORD *a1, uint64_t a2, CFTypeRef *a3)
{
  int v6;
  unint64_t v7;
  unint64_t v8;
  size_t v9;
  const char *v10;
  char *v11;
  CFErrorRef v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned __int8 v17;
  const char *v18;
  size_t v19;
  void *v20;
  unint64_t v21;
  const char *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  size_t v30;
  std::__shared_weak_count_vtbl *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  CFErrorRef v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  void *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  __int128 v75;
  int v76;
  const char *v77;
  int v78;
  const char *v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  uint64_t v82;
  void *__p;
  void *v84[2];
  __int128 v85;
  void *v86[2];
  unint64_t v87;
  char v88;
  CFErrorRef v89;
  std::__shared_weak_count *v90;
  std::error_condition v91;

  if (*a1 && a1[1] && a1[2] && a1[3] && a1[4] && a1[5])
  {
    sub_20E975C18(&v82);
    if (**(int **)(v82 + 56) > 2
      || (v6 = *(unsigned __int8 *)(v82 + 72), v7 = sub_20E8C31DC(v82, "OSLogSurrogateAppender", 1, 0), v8 = v7, !v6)
      && !v7)
    {
LABEL_112:
      v65 = *(unint64_t **)(a2 + 16);
      __p = *(void **)(a2 + 8);
      v84[0] = v65;
      if (v65)
      {
        v66 = v65 + 1;
        do
          v67 = __ldxr(v66);
        while (__stxr(v67 + 1, v66));
      }
      v68 = *(_QWORD *)(*(_QWORD *)(a1[1] + 56) + 240);
      (*(void (**)(uint64_t, void **))(*(_QWORD *)(v68 + 88) + 16))(v68 + 88, &__p);
      v69 = (std::__shared_weak_count *)v84[0];
      if (v84[0])
      {
        v70 = (unint64_t *)((char *)v84[0] + 8);
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
          std::__shared_weak_count::__release_weak(v69);
        }
      }
      return 1;
    }
    v74 = &v82;
    *(std::chrono::steady_clock::time_point *)&v75 = std::chrono::steady_clock::now();
    *((std::chrono::system_clock::time_point *)&v75 + 1) = std::chrono::system_clock::now();
    v76 = 2;
    v77 = "unknown file";
    v78 = 1025;
    v80 = 0;
    v81 = 0;
    v79 = "unknown function";
    v73 = v82;
    if (*(char *)(v82 + 39) < 0)
    {
      v10 = *(const char **)(v82 + 16);
      v9 = *(_QWORD *)(v82 + 24);
    }
    else
    {
      v9 = *(unsigned __int8 *)(v82 + 39);
      v10 = (const char *)(v82 + 16);
    }
    v72 = v82 + 16;
    v17 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&__p);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&__p);
      if ((_BYTE)v85 && SHIBYTE(v84[1]) < 0)
        operator delete(__p);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v18 = byte_254A4A4F8;
    else
      v18 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v19 = byte_254A4A4F8[23];
    else
      v19 = *(_QWORD *)&byte_254A4A4F8[8];
    __p = os_log_create(v18, v10);
    v20 = v84;
    if (v19 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v19 >= 0x17)
    {
      v21 = v8;
      v22 = v10;
      v23 = v6;
      v24 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v19 | 7) != 0x17)
        v24 = v19 | 7;
      v25 = v24 + 1;
      v20 = operator new(v24 + 1);
      v84[1] = (void *)v19;
      *(_QWORD *)&v85 = v25 | 0x8000000000000000;
      v84[0] = v20;
      v6 = v23;
      v10 = v22;
      v8 = v21;
    }
    else
    {
      BYTE7(v85) = v19;
      if (!v19)
      {
LABEL_45:
        *((_BYTE *)v20 + v19) = 0;
        BYTE8(v85) = 1;
        v26 = v86;
        if (v9 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v9 >= 0x17)
        {
          v27 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v9 | 7) != 0x17)
            v27 = v9 | 7;
          v28 = v27 + 1;
          v26 = operator new(v27 + 1);
          v86[1] = (void *)v9;
          v87 = v28 | 0x8000000000000000;
          v86[0] = v26;
        }
        else
        {
          HIBYTE(v87) = v9;
          if (!v9)
            goto LABEL_53;
        }
        memmove(v26, v10, v9);
LABEL_53:
        *((_BYTE *)v26 + v9) = 0;
        v88 = 1;
        v29 = __p;
        if (SHIBYTE(v87) < 0)
          operator delete(v86[0]);
        if (BYTE8(v85) && SBYTE7(v85) < 0)
          operator delete(v84[0]);
        if (__p)
          os_release(__p);
        if (v8 && *(_QWORD *)(v8 + 24))
        {
          v30 = _os_log_pack_size();
          v31 = (std::__shared_weak_count_vtbl *)operator new(v30, (std::align_val_t)8uLL);
          v32 = (std::__shared_weak_count *)operator new();
          v33 = v32;
          v32->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v32->__shared_owners_;
          v32->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v32->__shared_weak_owners_ = 0;
          v32[1].__vftable = v31;
          __p = v31;
          v84[0] = v31;
          v84[1] = v32;
          do
            v35 = __ldxr(p_shared_owners);
          while (__stxr(v35 + 1, p_shared_owners));
          v85 = 0uLL;
          v86[0] = 0;
          do
            v36 = __ldaxr(p_shared_owners);
          while (__stlxr(v36 - 1, p_shared_owners));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v33);
          }
          v37 = __p;
          *(_WORD *)_os_log_pack_fill() = 0;
          v38 = operator new();
          v39 = *(unsigned __int8 *)(v73 + 39);
          v40 = v72;
          if ((v39 & 0x80u) != 0)
          {
            v40 = *(_QWORD *)(v73 + 16);
            v39 = *(_QWORD *)(v73 + 24);
          }
          *(_QWORD *)v38 = v37;
          *(_OWORD *)(v38 + 8) = *(_OWORD *)v84;
          v84[0] = 0;
          v84[1] = 0;
          *(_OWORD *)(v38 + 24) = v85;
          v85 = 0uLL;
          *(_QWORD *)(v38 + 40) = v40;
          *(_QWORD *)(v38 + 48) = v39;
          *(_BYTE *)(v38 + 56) = 2;
          v89 = 0;
          *(_QWORD *)&v91.__val_ = v38;
          (*(void (**)(_QWORD, std::error_condition *))(**(_QWORD **)(v8 + 24) + 40))(*(_QWORD *)(v8 + 24), &v91);
          v41 = *(_QWORD *)&v91.__val_;
          *(_QWORD *)&v91.__val_ = 0;
          if (v41)
          {
            v42 = *(std::__shared_weak_count **)(v41 + 32);
            if (v42)
            {
              v43 = (unint64_t *)&v42->__shared_owners_;
              do
                v44 = __ldaxr(v43);
              while (__stlxr(v44 - 1, v43));
              if (!v44)
              {
                ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                std::__shared_weak_count::__release_weak(v42);
              }
            }
            v45 = *(std::__shared_weak_count **)(v41 + 16);
            if (v45)
            {
              v46 = (unint64_t *)&v45->__shared_owners_;
              do
                v47 = __ldaxr(v46);
              while (__stlxr(v47 - 1, v46));
              if (!v47)
              {
                ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
                std::__shared_weak_count::__release_weak(v45);
              }
            }
            MEMORY[0x212BC6398](v41, 0x10F0C40B62ED6C6);
            v48 = v89;
            v89 = 0;
            if (v48)
            {
              v49 = (std::__shared_weak_count *)*((_QWORD *)v48 + 4);
              if (v49)
              {
                v50 = (unint64_t *)&v49->__shared_owners_;
                do
                  v51 = __ldaxr(v50);
                while (__stlxr(v51 - 1, v50));
                if (!v51)
                {
                  ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                  std::__shared_weak_count::__release_weak(v49);
                }
              }
              v52 = (std::__shared_weak_count *)*((_QWORD *)v48 + 2);
              if (v52)
              {
                v53 = (unint64_t *)&v52->__shared_owners_;
                do
                  v54 = __ldaxr(v53);
                while (__stlxr(v54 - 1, v53));
                if (!v54)
                {
                  ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                  std::__shared_weak_count::__release_weak(v52);
                }
              }
              MEMORY[0x212BC6398](v48, 0x10F0C40B62ED6C6);
            }
          }
          v55 = (std::__shared_weak_count *)*((_QWORD *)&v85 + 1);
          if (*((_QWORD *)&v85 + 1))
          {
            v56 = (unint64_t *)(*((_QWORD *)&v85 + 1) + 8);
            do
              v57 = __ldaxr(v56);
            while (__stlxr(v57 - 1, v56));
            if (!v57)
            {
              ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
              std::__shared_weak_count::__release_weak(v55);
            }
          }
          v58 = (std::__shared_weak_count *)v84[1];
          if (v84[1])
          {
            v59 = (unint64_t *)((char *)v84[1] + 8);
            do
              v60 = __ldaxr(v59);
            while (__stlxr(v60 - 1, v59));
            if (!v60)
            {
              ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
              std::__shared_weak_count::__release_weak(v58);
            }
          }
        }
        else
        {
          os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG);
          LOWORD(__p) = 0;
          v61 = (void *)_os_log_send_and_compose_impl();
          if (v61)
            free(v61);
        }
        if (v6)
        {
          sub_20E8C003C((uint64_t)&v74, "SLAM received location data");
          sub_20E863570((uint64_t)&v74);
        }
        sub_20E863570((uint64_t)&v74);
        v62 = v81;
        if (v81)
        {
          v63 = (unint64_t *)&v81->__shared_owners_;
          do
            v64 = __ldaxr(v63);
          while (__stlxr(v64 - 1, v63));
          if (!v64)
          {
            ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
            std::__shared_weak_count::__release_weak(v62);
          }
        }
        goto LABEL_112;
      }
    }
    memmove(v20, v18, v19);
    goto LABEL_45;
  }
  __p = operator new(0x68uLL);
  *(_OWORD *)v84 = xmmword_2102E3F40;
  strcpy((char *)__p, "The session has not been initialized. You need to call CV3DSLAMInitialize before calling this method");
  v11 = (char *)operator new(0x70uLL);
  v74 = (uint64_t *)v11;
  v75 = xmmword_2102E3F50;
  strcpy(v11, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
  if (!a3)
    goto LABEL_23;
  *(_QWORD *)&v91.__val_ = 22;
  v91.__cat_ = std::generic_category();
  sub_20EA67538(&v91, (uint64_t)&__p, &v89);
  if (*a3)
    CFRelease(*a3);
  *a3 = 0;
  v12 = v89;
  if (v89)
    CFRetain(v89);
  *a3 = v12;
  v13 = v90;
  if (v90)
  {
    v14 = (unint64_t *)&v90->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      if ((SHIBYTE(v75) & 0x80000000) == 0)
        goto LABEL_24;
      goto LABEL_22;
    }
  }
  if (SHIBYTE(v75) < 0)
  {
LABEL_22:
    v11 = (char *)v74;
LABEL_23:
    operator delete(v11);
  }
LABEL_24:
  if (SHIBYTE(v84[1]) < 0)
    operator delete(__p);
  return 0;
}

void sub_20E982140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a29)
  {
    if (a28 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_20E982180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  sub_20E86E8C4((uint64_t *)(v5 - 104));
  sub_20E86E8C4((uint64_t *)(v5 - 120));
  sub_20E86E658((uint64_t)va1);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E9821AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  sub_20E86E658((uint64_t)va1);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E9821C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  MEMORY[0x212BC6398](v5, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E9821F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E982210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E982224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *object,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  if (a30 && a29 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_20E98226C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E982280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;

  operator delete(v28);
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9822BC(_QWORD *a1, uint64_t a2, CFTypeRef *a3)
{
  char *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  char *v26;
  CFTypeRef v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  char *v31;
  void *__p;
  __int128 v33;
  CFTypeRef cf;
  std::__shared_weak_count *v35;
  std::error_condition v36;

  if (*a1 && a1[1] && a1[2] && a1[3] && a1[4] && a1[5])
  {
    v6 = (char *)operator new(0x120uLL);
    *((_QWORD *)v6 + 1) = 0;
    *((_QWORD *)v6 + 2) = 0;
    *(_QWORD *)v6 = &off_24C9B38C8;
    *((_QWORD *)v6 + 3) = &off_24CA1A9A0;
    v7 = *(_QWORD *)(a2 + 24);
    *((_QWORD *)v6 + 4) = *(_QWORD *)(a2 + 16);
    *((_QWORD *)v6 + 5) = v7;
    if (v7)
    {
      v8 = (unint64_t *)(v7 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    v11 = *(_QWORD *)(a2 + 40);
    v10 = *(_QWORD *)(a2 + 48);
    *((_QWORD *)v6 + 6) = &off_24CA1A9A0;
    *((_QWORD *)v6 + 7) = v11;
    *((_QWORD *)v6 + 8) = v10;
    if (v10)
    {
      v12 = (unint64_t *)(v10 + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    v15 = *(_QWORD *)(a2 + 64);
    v14 = *(_QWORD *)(a2 + 72);
    *((_QWORD *)v6 + 9) = &off_24CA1A9A0;
    *((_QWORD *)v6 + 10) = v15;
    *((_QWORD *)v6 + 11) = v14;
    if (v14)
    {
      v16 = (unint64_t *)(v14 + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v6[208] = 0;
    v18 = *(_OWORD *)(a2 + 96);
    *((_OWORD *)v6 + 6) = *(_OWORD *)(a2 + 80);
    *((_OWORD *)v6 + 7) = v18;
    *((_DWORD *)v6 + 32) = *(_DWORD *)(a2 + 112);
    *(_OWORD *)(v6 + 132) = *(_OWORD *)(a2 + 116);
    *(_OWORD *)(v6 + 148) = *(_OWORD *)(a2 + 132);
    *(_OWORD *)(v6 + 164) = *(_OWORD *)(a2 + 148);
    *(_OWORD *)(v6 + 180) = *(_OWORD *)(a2 + 164);
    *((_QWORD *)v6 + 25) = *(_QWORD *)(a2 + 184);
    v6[272] = 0;
    if (*(_BYTE *)(a2 + 256))
    {
      v19 = *(_OWORD *)(a2 + 208);
      *((_OWORD *)v6 + 13) = *(_OWORD *)(a2 + 192);
      *((_OWORD *)v6 + 14) = v19;
      v20 = *(_OWORD *)(a2 + 240);
      *((_OWORD *)v6 + 15) = *(_OWORD *)(a2 + 224);
      *((_OWORD *)v6 + 16) = v20;
      v6[272] = 1;
    }
    *(_QWORD *)(v6 + 276) = *(_QWORD *)(a2 + 260);
    __p = v6 + 24;
    *(_QWORD *)&v33 = v6;
    v21 = *(_QWORD *)(a1[3] + 56);
    if (*(_BYTE *)v21)
      (*(void (**)(uint64_t, void **))(*(_QWORD *)(*(_QWORD *)(v21 + 80) + 256) + 16))(*(_QWORD *)(v21 + 80) + 256, &__p);
    (*(void (**)(_QWORD, void **))(*(_QWORD *)*a1 + 64))(*a1, &__p);
    v22 = (std::__shared_weak_count *)v33;
    if ((_QWORD)v33)
    {
      v23 = (unint64_t *)(v33 + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    return 1;
  }
  else
  {
    __p = operator new(0x68uLL);
    v33 = xmmword_2102E3F40;
    strcpy((char *)__p, "The session has not been initialized. You need to call CV3DSLAMInitialize before calling this method");
    v26 = (char *)operator new(0x70uLL);
    v31 = v26;
    strcpy(v26, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
    if (a3)
    {
      *(_QWORD *)&v36.__val_ = 22;
      v36.__cat_ = std::generic_category();
      sub_20EA67538(&v36, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v27 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v27;
      v28 = v35;
      if (v35)
      {
        p_shared_owners = (unint64_t *)&v35->__shared_owners_;
        do
          v30 = __ldaxr(p_shared_owners);
        while (__stlxr(v30 - 1, p_shared_owners));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      v26 = v31;
    }
    operator delete(v26);
    if (SHIBYTE(v33) < 0)
      operator delete(__p);
    return 0;
  }
}

void sub_20E982618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E98262C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20E982668(uint64_t *a1, __CFData *a2, CFTypeRef *a3)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  void *ptr;
  CFTypeRef v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::exception_ptr v22;
  uint64_t v23;
  std::exception_ptr v24;
  __int128 v25;
  _BYTE __p[24];
  CFTypeRef cf;
  std::__shared_weak_count *v28;
  std::unique_lock<std::mutex> __lk;

  v5 = *a1;
  if (v5 && a1[1] && a1[2] && a1[3] && a1[4] && a1[5])
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v5 + 320))(&v23);
    v7 = v23;
    v23 = 0;
    __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v7 + 24);
    __lk.__owns_ = 1;
    std::mutex::lock((std::mutex *)(v7 + 24));
    std::__assoc_sub_state::__sub_wait((std::__assoc_sub_state *)v7, &__lk);
    v8 = *(_QWORD *)(v7 + 16);
    v24.__ptr_ = 0;
    std::exception_ptr::~exception_ptr(&v24);
    if (v8)
    {
      std::exception_ptr::exception_ptr((std::exception_ptr *)&cf, (const std::exception_ptr *)(v7 + 16));
      v22.__ptr_ = &cf;
      std::rethrow_exception(v22);
      __break(1u);
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)(v7 + 144);
      *(_QWORD *)(v7 + 144) = 0;
      *(_QWORD *)(v7 + 152) = 0;
      if (__lk.__owns_)
        std::mutex::unlock(__lk.__m_);
      v9 = (unint64_t *)(v7 + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
      CFDataAppendBytes(a2, **(const UInt8 ***)__p, *(_QWORD *)(*(_QWORD *)__p + 8) - **(_QWORD **)__p);
      v11 = *(std::__shared_weak_count **)&__p[8];
      if (*(_QWORD *)&__p[8])
      {
        v12 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      v14 = v23;
      if (v23)
      {
        v15 = (unint64_t *)(v23 + 8);
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
      }
    }
    return;
  }
  *(_QWORD *)__p = operator new(0x68uLL);
  *(_OWORD *)&__p[8] = xmmword_2102E3F40;
  strcpy(*(char **)__p, "The session has not been initialized. You need to call CV3DSLAMInitialize before calling this method");
  ptr = operator new(0x70uLL);
  v24.__ptr_ = ptr;
  v25 = xmmword_2102E3F50;
  strcpy((char *)ptr, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
  if (!a3)
    goto LABEL_35;
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)22;
  *(_QWORD *)&__lk.__owns_ = std::generic_category();
  sub_20EA67538((const std::error_condition *)&__lk, (uint64_t)__p, (CFErrorRef *)&cf);
  if (*a3)
    CFRelease(*a3);
  *a3 = 0;
  v18 = cf;
  if (cf)
    CFRetain(cf);
  *a3 = v18;
  v19 = v28;
  if (!v28)
    goto LABEL_33;
  p_shared_owners = (unint64_t *)&v28->__shared_owners_;
  do
    v21 = __ldaxr(p_shared_owners);
  while (__stlxr(v21 - 1, p_shared_owners));
  if (v21)
  {
LABEL_33:
    if ((SHIBYTE(v25) & 0x80000000) == 0)
      goto LABEL_36;
    goto LABEL_34;
  }
  ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
  std::__shared_weak_count::__release_weak(v19);
  if (SHIBYTE(v25) < 0)
  {
LABEL_34:
    ptr = v24.__ptr_;
LABEL_35:
    operator delete(ptr);
  }
LABEL_36:
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
}

void sub_20E98294C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,std::exception_ptr a25)
{
  CFTypeRef *v25;
  void *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;

  sub_20E86665C((uint64_t)&a18);
  if (a2 == 1)
  {
    v28 = __cxa_begin_catch(a1);
    a10 = (*(uint64_t (**)(void *))(*(_QWORD *)v28 + 16))(v28);
    sub_20E982B08("Error while serializing the map", (const char *)&a10);
    sub_20E8610C0(&__p, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
    sub_20E8EAB0C(v25, 0x16u, (uint64_t)&a18);
    if (a17 < 0)
      operator delete(__p);
    if (a23 < 0)
      operator delete(a18);
    __cxa_end_catch();
    if (!a11)
      JUMPOUT(0x20E9828F4);
    JUMPOUT(0x20E9827A8);
  }
  v29 = a11;
  if (a11)
  {
    v30 = (unint64_t *)(a11 + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20E982B08(char *__s, const char *a2)
{
  uint64_t result;
  _DWORD v4[6];
  int v5;
  _QWORD **v6;
  const char *v7;
  _DWORD *v8;
  const char *v9;
  const char *v10;
  _QWORD *v11;

  v5 = 0;
  sub_20E9966B8(v4, __s);
  if (*(_QWORD *)a2)
  {
    v6 = (_QWORD **)v4;
    v7 = a2;
    v8 = v4;
    v9 = a2;
    v10 = a2;
    if (v5 != -1)
    {
      v11 = &v6;
      ((void (*)(_QWORD **, _DWORD *))off_24C9B3908[v5])(&v11, v4);
      goto LABEL_6;
    }
LABEL_10:
    sub_20E877AB8();
  }
  v6 = (_QWORD **)v4;
  v7 = "nullptr";
  v8 = v4;
  v9 = "nullptr";
  v10 = "nullptr";
  if (v5 == -1)
    goto LABEL_10;
  v11 = &v6;
  ((void (*)(_QWORD **, _DWORD *))off_24C9B3408[v5])(&v11, v4);
LABEL_6:
  if (v5 == -1)
    sub_20E877AB8();
  v6 = &v11;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C9B3450[v5])(&v6, v4);
  if (v5 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C9B33F0[v5])(&v6, v4);
  return result;
}

void sub_20E982C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E982C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E982C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20E982C70(uint64_t *a1, CFTypeRef *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v7;
  CFTypeRef v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  __int128 v13;
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  v4 = *a1;
  if (v4 && a1[1] && a1[2] && a1[3] && a1[4] && a1[5])
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 136))(v4);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v5 + 16))(v5, &__p);
    return 1;
  }
  else
  {
    __p = operator new(0x68uLL);
    v13 = xmmword_2102E3F40;
    strcpy((char *)__p, "The session has not been initialized. You need to call CV3DSLAMInitialize before calling this method");
    v7 = (char *)operator new(0x70uLL);
    strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
    if (a2)
    {
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_20EA67538(&v16, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v8 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v8;
      v9 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    operator delete(v7);
    if (SHIBYTE(v13) < 0)
      operator delete(__p);
    return 0;
  }
}

void sub_20E982E64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20E982EA0(_QWORD *a1, CFTypeRef *a2)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p[4];
  int v11;
  char *v12;
  __int128 v13;
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  if (*a1 && a1[1] && a1[2] && a1[3] && a1[4] && a1[5])
  {
    memset(__p, 0, sizeof(__p));
    v11 = 733223412;
    kdebug_trace();
    (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 144))(*a1);
    kdebug_trace();
    return 1;
  }
  __p[0] = operator new(0x68uLL);
  *(_OWORD *)&__p[1] = xmmword_2102E3F40;
  strcpy((char *)__p[0], "The session has not been initialized. You need to call CV3DSLAMInitialize before calling this method");
  v5 = (char *)operator new(0x70uLL);
  v12 = v5;
  v13 = xmmword_2102E3F50;
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
  if (!a2)
  {
LABEL_22:
    operator delete(v5);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      return 0;
    goto LABEL_23;
  }
  *(_QWORD *)&v16.__val_ = 22;
  v16.__cat_ = std::generic_category();
  sub_20EA67538(&v16, (uint64_t)__p, (CFErrorRef *)&cf);
  if (*a2)
    CFRelease(*a2);
  *a2 = 0;
  v6 = cf;
  if (cf)
    CFRetain(cf);
  *a2 = v6;
  v7 = v15;
  if (!v15)
    goto LABEL_17;
  p_shared_owners = (unint64_t *)&v15->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
  {
LABEL_17:
    if ((SHIBYTE(v13) & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_21;
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  if (SHIBYTE(v13) < 0)
  {
LABEL_21:
    v5 = v12;
    goto LABEL_22;
  }
LABEL_18:
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
    return 0;
LABEL_23:
  operator delete(__p[0]);
  return 0;
}

void sub_20E9830DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E8E69C4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E9830F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20E983130(uint64_t *a1, CFTypeRef *a2)
{
  uint64_t v4;
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  v4 = *a1;
  if (v4 && a1[1] && a1[2] && a1[3] && a1[4] && a1[5])
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 152))(v4);
    return 1;
  }
  else
  {
    __p = operator new(0x68uLL);
    v12 = xmmword_2102E3F40;
    strcpy((char *)__p, "The session has not been initialized. You need to call CV3DSLAMInitialize before calling this method");
    v6 = (char *)operator new(0x70uLL);
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
    if (a2)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_20EA67538(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v7 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v7;
      v8 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    operator delete(v6);
    if (SHIBYTE(v12) < 0)
      operator delete(__p);
    return 0;
  }
}

void sub_20E983314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20E983350(uint64_t *a1, CFTypeRef *a2)
{
  uint64_t v4;
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  v4 = *a1;
  if (v4 && a1[1] && a1[2] && a1[3] && a1[4] && a1[5])
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 160))(v4);
    return 1;
  }
  else
  {
    __p = operator new(0x68uLL);
    v12 = xmmword_2102E3F40;
    strcpy((char *)__p, "The session has not been initialized. You need to call CV3DSLAMInitialize before calling this method");
    v6 = (char *)operator new(0x70uLL);
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
    if (a2)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_20EA67538(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v7 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v7;
      v8 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    operator delete(v6);
    if (SHIBYTE(v12) < 0)
      operator delete(__p);
    return 0;
  }
}

void sub_20E983534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20E983570(uint64_t *a1, CFTypeRef *a2)
{
  uint64_t v4;
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  v4 = *a1;
  if (v4 && a1[1] && a1[2] && a1[3] && a1[4] && a1[5])
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 160))(v4);
    return 1;
  }
  else
  {
    __p = operator new(0x68uLL);
    v12 = xmmword_2102E3F40;
    strcpy((char *)__p, "The session has not been initialized. You need to call CV3DSLAMInitialize before calling this method");
    v6 = (char *)operator new(0x70uLL);
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
    if (a2)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_20EA67538(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v7 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v7;
      v8 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    operator delete(v6);
    if (SHIBYTE(v12) < 0)
      operator delete(__p);
    return 0;
  }
}

void sub_20E983754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20E983790(_QWORD *a1, CFTypeRef *a2)
{
  uint64_t v3;
  char *v4;
  unint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  char *v15;
  CFTypeRef v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  char *v20;
  __int128 v21;
  void *__p;
  __int128 v23;
  CFTypeRef cf;
  std::__shared_weak_count *v25;
  std::error_condition v26;

  if (!*a1 || (v3 = a1[1]) == 0 || !a1[2] || !a1[3] || !a1[4] || !a1[5])
  {
    __p = operator new(0x68uLL);
    v23 = xmmword_2102E3F40;
    strcpy((char *)__p, "The session has not been initialized. You need to call CV3DSLAMInitialize before calling this method");
    v15 = (char *)operator new(0x70uLL);
    v20 = v15;
    v21 = xmmword_2102E3F50;
    strcpy(v15, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
    if (a2)
    {
      *(_QWORD *)&v26.__val_ = 22;
      v26.__cat_ = std::generic_category();
      sub_20EA67538(&v26, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v16 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v16;
      v17 = v25;
      if (!v25)
        goto LABEL_29;
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
        if ((SHIBYTE(v21) & 0x80000000) == 0)
        {
LABEL_30:
          if ((SHIBYTE(v23) & 0x80000000) == 0)
            return 0;
LABEL_35:
          operator delete(__p);
          return 0;
        }
      }
      else
      {
LABEL_29:
        if ((SHIBYTE(v21) & 0x80000000) == 0)
          goto LABEL_30;
      }
      v15 = v20;
    }
    operator delete(v15);
    if ((SHIBYTE(v23) & 0x80000000) == 0)
      return 0;
    goto LABEL_35;
  }
  v4 = (char *)operator new(0xA0uLL);
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &off_24C9B3930;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *((_QWORD *)v4 + 19) = 0;
  *(_OWORD *)(v4 + 24) = 0u;
  __p = v4 + 24;
  *(_QWORD *)&v23 = v4;
  v4[120] = 1;
  v20 = v4 + 24;
  *(_QWORD *)&v21 = v4;
  *((_QWORD *)v4 + 1) = 0;
  v5 = (unint64_t *)(v4 + 8);
  v6 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 240) + 256;
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  (*(void (**)(uint64_t, char **))(*(_QWORD *)v6 + 16))(v6, &v20);
  v8 = (std::__shared_weak_count *)v21;
  if ((_QWORD)v21)
  {
    v9 = (unint64_t *)(v21 + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (std::__shared_weak_count *)v23;
  if ((_QWORD)v23)
  {
    v12 = (unint64_t *)(v23 + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return 1;
}

void sub_20E983A60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  sub_20E86665C((uint64_t)&a9);
  sub_20E86665C((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_20E983A7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20E983AB8(uint64_t *a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v5;
  uint64_t v7;
  char *v9;
  CFTypeRef v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p;
  __int128 v15;
  CFTypeRef cf;
  std::__shared_weak_count *v17;
  std::error_condition v18;

  v5 = *a1;
  if (v5 && a1[1] && a1[2] && a1[3] && a1[4] && a1[5])
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 264))(v5);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
    return 1;
  }
  else
  {
    __p = operator new(0x68uLL);
    v15 = xmmword_2102E3F40;
    strcpy((char *)__p, "The session has not been initialized. You need to call CV3DSLAMInitialize before calling this method");
    v9 = (char *)operator new(0x70uLL);
    strcpy(v9, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
    if (a3)
    {
      *(_QWORD *)&v18.__val_ = 22;
      v18.__cat_ = std::generic_category();
      sub_20EA67538(&v18, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v10 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v10;
      v11 = v17;
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
    operator delete(v9);
    if (SHIBYTE(v15) < 0)
      operator delete(__p);
    return 0;
  }
}

void sub_20E983CB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20E983CEC(uint64_t *a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v5;
  uint64_t v7;
  char *v9;
  CFTypeRef v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p;
  __int128 v15;
  CFTypeRef cf;
  std::__shared_weak_count *v17;
  std::error_condition v18;

  v5 = *a1;
  if (v5 && a1[1] && a1[2] && a1[3] && a1[4] && a1[5])
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 272))(v5);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
    return 1;
  }
  else
  {
    __p = operator new(0x68uLL);
    v15 = xmmword_2102E3F40;
    strcpy((char *)__p, "The session has not been initialized. You need to call CV3DSLAMInitialize before calling this method");
    v9 = (char *)operator new(0x70uLL);
    strcpy(v9, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
    if (a3)
    {
      *(_QWORD *)&v18.__val_ = 22;
      v18.__cat_ = std::generic_category();
      sub_20EA67538(&v18, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v10 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v10;
      v11 = v17;
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
    operator delete(v9);
    if (SHIBYTE(v15) < 0)
      operator delete(__p);
    return 0;
  }
}

void sub_20E983EE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20E983F20(uint64_t *a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v5;
  uint64_t v7;
  char *v9;
  CFTypeRef v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p;
  __int128 v15;
  CFTypeRef cf;
  std::__shared_weak_count *v17;
  std::error_condition v18;

  v5 = *a1;
  if (v5 && a1[1] && a1[2] && a1[3] && a1[4] && a1[5])
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 288))(v5);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
    return 1;
  }
  else
  {
    __p = operator new(0x68uLL);
    v15 = xmmword_2102E3F40;
    strcpy((char *)__p, "The session has not been initialized. You need to call CV3DSLAMInitialize before calling this method");
    v9 = (char *)operator new(0x70uLL);
    strcpy(v9, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
    if (a3)
    {
      *(_QWORD *)&v18.__val_ = 22;
      v18.__cat_ = std::generic_category();
      sub_20EA67538(&v18, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v10 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v10;
      v11 = v17;
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
    operator delete(v9);
    if (SHIBYTE(v15) < 0)
      operator delete(__p);
    return 0;
  }
}

void sub_20E984118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20E984154(uint64_t *a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v5;
  char *v7;
  CFTypeRef v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  __int128 v13;
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  v5 = *a1;
  if (v5 && a1[1] && a1[2] && a1[3] && a1[4] && a1[5])
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 408))(v5);
  __p = operator new(0x68uLL);
  v13 = xmmword_2102E3F40;
  strcpy((char *)__p, "The session has not been initialized. You need to call CV3DSLAMInitialize before calling this method");
  v7 = (char *)operator new(0x70uLL);
  strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
  if (a3)
  {
    *(_QWORD *)&v16.__val_ = 22;
    v16.__cat_ = std::generic_category();
    sub_20EA67538(&v16, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v8 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v8;
    v9 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  operator delete(v7);
  if (SHIBYTE(v13) < 0)
    operator delete(__p);
  return 0;
}

void sub_20E984334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20E984370(_QWORD *a1, const __CFUUID *a2, CFTypeRef *a3, int8x16_t a4, int8x16_t a5, __n128 a6, __n128 a7)
{
  CFTypeID v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  char *v24;
  const void *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  unint64_t *v29;
  unint64_t *v30;
  __int128 v35;
  char v36;
  char v37;
  float64x2_t v38;
  double v39;
  double v40;
  _QWORD v41[8];
  const void *v42;
  std::__shared_weak_count *v43;
  __int128 v44;
  __int128 __p;
  uint64_t v46;
  char v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  char v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  char v65;
  __int128 v66;
  uint64_t v67;
  _BYTE v68[32];
  uint64_t v69;
  char v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  char v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  char v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  const void *v93;
  std::__shared_weak_count *v94;
  char v95;
  uint64_t v96;

  v96 = *MEMORY[0x24BDAC8D0];
  if (!*a1 || !a1[1] || !a1[2] || !a1[3] || !a1[4] || !a1[5])
  {
    *(_QWORD *)v68 = operator new(0x68uLL);
    *(_OWORD *)&v68[8] = xmmword_2102E3F40;
    strcpy(*(char **)v68, "The session has not been initialized. You need to call CV3DSLAMInitialize before calling this method");
    v24 = (char *)operator new(0x70uLL);
    v40 = *(double *)&v24;
    *(_OWORD *)v41 = xmmword_2102E3F50;
    strcpy(v24, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
    if (!a3)
    {
LABEL_53:
      operator delete(v24);
      goto LABEL_54;
    }
    *(_QWORD *)&v38.f64[0] = 22;
    *(_QWORD *)&v38.f64[1] = std::generic_category();
    sub_20EA67538((const std::error_condition *)&v38, (uint64_t)v68, (CFErrorRef *)&v93);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v25 = v93;
    if (v93)
      CFRetain(v93);
    *a3 = v25;
    v26 = v94;
    if (!v94)
      goto LABEL_51;
    p_shared_owners = (unint64_t *)&v94->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
LABEL_49:
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
    goto LABEL_51;
  }
  if (!a2)
  {
    *(_QWORD *)v68 = operator new(0x38uLL);
    *(_OWORD *)&v68[8] = xmmword_2102DCA50;
    strcpy(*(char **)v68, "Trying to add an anchor to SLAM with a NULL UUID");
    v24 = (char *)operator new(0x70uLL);
    v40 = *(double *)&v24;
    *(_OWORD *)v41 = xmmword_2102E3F50;
    strcpy(v24, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
    if (!a3)
      goto LABEL_53;
    *(_QWORD *)&v38.f64[0] = 22;
    *(_QWORD *)&v38.f64[1] = std::generic_category();
    sub_20EA67538((const std::error_condition *)&v38, (uint64_t)v68, (CFErrorRef *)&v93);
    sub_20EA66CF0(&v93, a3);
    v26 = v94;
    if (!v94)
      goto LABEL_51;
    v29 = (unint64_t *)&v94->__shared_owners_;
    do
      v28 = __ldaxr(v29);
    while (__stlxr(v28 - 1, v29));
    goto LABEL_49;
  }
  v10 = CFUUIDGetTypeID();
  if (CFGetTypeID(a2) == v10)
  {
    *(CFUUIDBytes *)v68 = CFUUIDGetUUIDBytes(a2);
    v11 = (const void *)sub_20EA68D10((uint64_t)v68);
    v13 = 0;
    v93 = v11;
    v94 = (std::__shared_weak_count *)v12;
    v95 = 1;
    do
    {
      v14 = *((unsigned __int8 *)&v93 + v13);
      if (*((_BYTE *)&v93 + v13))
        v15 = 1;
      else
        v15 = v13 == 15;
      ++v13;
    }
    while (!v15);
    if (v14)
    {
      v40 = *(float *)a4.i32;
      *(double *)v41 = *(float *)a5.i32;
      *(float64x2_t *)&v41[1] = vcvtq_f64_f32((float32x2_t)__PAIR64__(a4.u32[1], a6.n128_u32[0]));
      *(float64x2_t *)&v41[3] = vcvtq_f64_f32((float32x2_t)vzip2_s32(*(int32x2_t *)a5.i8, (int32x2_t)a6.n128_u64[0]));
      *(float64x2_t *)&v41[5] = vcvtq_f64_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(a4, a4, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(a5, a5, 8uLL)));
      *(double *)&v41[7] = a6.n128_f32[2];
      v38 = vcvtq_f64_f32((float32x2_t)a7.n128_u64[0]);
      v39 = a7.n128_f32[2];
      LOBYTE(v35) = 0;
      v37 = 0;
      sub_20EAAD408((uint64_t)&v44, (uint64_t)v93, v12, &v35, (uint64_t)&v40, (__int128 *)&v38, 1);
      *(_OWORD *)v68 = v44;
      v68[16] = 0;
      v70 = 0;
      if (v47)
      {
        *(_OWORD *)&v68[16] = __p;
        v69 = v46;
        v46 = 0;
        __p = 0uLL;
        v70 = 1;
      }
      v83 = v60;
      v84 = v61;
      v85 = v62;
      v79 = v56;
      v80 = v57;
      v81 = v58;
      v82 = v59;
      v75 = v52;
      v76 = v53;
      v77 = v54;
      v78 = v55;
      v71 = v48;
      v72 = v49;
      v73 = v50;
      v74 = v51;
      LOBYTE(v86) = 0;
      v88 = 0;
      if (v65)
      {
        v86 = v63;
        v87 = v64;
        v63 = 0;
        v64 = 0;
        v88 = 1;
      }
      v89 = v66;
      v92 = 0;
      v90 = v67;
      v91 = 0;
      if (v47 && SHIBYTE(v46) < 0)
        operator delete((void *)__p);
      if (v37 && v36 < 0)
        operator delete((void *)v35);
      v16 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 168))(*a1);
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v16 + 16))(v16, v68);
      v17 = v92;
      if (v92)
      {
        v18 = (unint64_t *)&v92->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      if (v88)
      {
        v20 = v87;
        if (v87)
        {
          v21 = (unint64_t *)&v87->__shared_owners_;
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
      }
      if (v70)
      {
        if (SHIBYTE(v69) < 0)
          operator delete(*(void **)&v68[16]);
      }
      return 1;
    }
  }
  else
  {
    LOBYTE(v93) = 0;
    v95 = 0;
  }
  *(_QWORD *)v68 = operator new(0x38uLL);
  *(_OWORD *)&v68[8] = xmmword_2102DBF10;
  strcpy(*(char **)v68, "Trying to add an anchor to SLAM with an invalid UUID");
  v24 = (char *)operator new(0x70uLL);
  v40 = *(double *)&v24;
  *(_OWORD *)v41 = xmmword_2102E3F50;
  strcpy(v24, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
  if (!a3)
    goto LABEL_53;
  *(_QWORD *)&v38.f64[0] = 22;
  *(_QWORD *)&v38.f64[1] = std::generic_category();
  sub_20EA67538((const std::error_condition *)&v38, (uint64_t)v68, (CFErrorRef *)&v42);
  sub_20EA66CF0(&v42, a3);
  v26 = v43;
  if (v43)
  {
    v30 = (unint64_t *)&v43->__shared_owners_;
    do
      v28 = __ldaxr(v30);
    while (__stlxr(v28 - 1, v30));
    goto LABEL_49;
  }
LABEL_51:
  if (SHIBYTE(v41[1]) < 0)
  {
    v24 = *(char **)&v40;
    goto LABEL_53;
  }
LABEL_54:
  if ((v68[23] & 0x80000000) != 0)
    operator delete(*(void **)v68);
  return 0;
}

void sub_20E984990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a23)
  {
    if (a22 < 0)
    {
      operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20E984A28(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 336);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if (!*(_BYTE *)(a1 + 296))
      goto LABEL_12;
  }
  else
  {
LABEL_5:
    if (!*(_BYTE *)(a1 + 296))
      goto LABEL_12;
  }
  v5 = *(std::__shared_weak_count **)(a1 + 288);
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
LABEL_12:
  if (!*(_BYTE *)(a1 + 40) || (*(char *)(a1 + 39) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 16));
  return a1;
}

BOOL sub_20E984AF4(_QWORD *a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v4;
  void **v6;
  const void *v7;
  std::__shared_weak_count *cat;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  const char *v13;
  size_t v14;
  size_t v15;
  void **p_dst;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  _QWORD *exception;
  uint64_t v24;
  __int128 v25;
  void *__p;
  __int128 v27;
  char v28;
  void **__dst;
  __int128 v30;
  const void *v31;
  std::__shared_weak_count *v32;
  std::error_condition v33;

  if (!*a1 || !a1[1] || !a1[2] || !a1[3] || !a1[4] || (v4 = a1[5]) == 0)
  {
    __p = operator new(0x68uLL);
    v27 = xmmword_2102E3F40;
    strcpy((char *)__p, "The session has not been initialized. You need to call CV3DSLAMInitialize before calling this method");
    v6 = (void **)operator new(0x70uLL);
    __dst = v6;
    v30 = xmmword_2102E3F50;
    strcpy((char *)v6, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
    if (a3)
    {
      v24 = 22;
      *(_QWORD *)&v25 = std::generic_category();
      sub_20EA67538((const std::error_condition *)&v24, (uint64_t)&__p, (CFErrorRef *)&v33);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v7 = *(const void **)&v33.__val_;
      if (*(_QWORD *)&v33.__val_)
        CFRetain(*(CFTypeRef *)&v33.__val_);
      *a3 = v7;
      cat = (std::__shared_weak_count *)v33.__cat_;
      if (!v33.__cat_)
        goto LABEL_18;
      v9 = (unint64_t *)&v33.__cat_[1];
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))cat->__on_zero_shared)(cat);
        std::__shared_weak_count::__release_weak(cat);
        if ((SHIBYTE(v30) & 0x80000000) == 0)
        {
LABEL_21:
          if (SHIBYTE(v27) < 0)
            operator delete(__p);
          return 0;
        }
      }
      else
      {
LABEL_18:
        if ((SHIBYTE(v30) & 0x80000000) == 0)
          goto LABEL_21;
      }
      v6 = __dst;
    }
    operator delete(v6);
    goto LABEL_21;
  }
  (*(void (**)(void **__return_ptr))(*(_QWORD *)v4 + 16))(&__p);
  if (v28)
    return (_BYTE)__p != 0;
  v11 = DWORD2(v27);
  v12 = atomic_load((unsigned __int8 *)&qword_254A5AC38);
  if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_254A5AC38))
  {
    __cxa_atexit((void (*)(void *))std::error_category::~error_category, &off_254A50050, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5AC38);
  }
  if (v28)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C9B4620;
    __cxa_throw(exception, (struct type_info *)&unk_24C9AD070, (void (*)(void *))std::exception::~exception);
  }
  v13 = (const char *)(*((uint64_t (**)(void **))__p + 2))(&__p);
  v14 = strlen(v13);
  if (v14 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v15 = v14;
  if (v14 >= 0x17)
  {
    v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v17 = v14 | 7;
    v18 = v17 + 1;
    p_dst = (void **)operator new(v17 + 1);
    *(_QWORD *)&v30 = v15;
    *((_QWORD *)&v30 + 1) = v18 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_35;
  }
  HIBYTE(v30) = v14;
  p_dst = (void **)&__dst;
  if (v14)
LABEL_35:
    memmove(p_dst, v13, v15);
  *((_BYTE *)p_dst + v15) = 0;
  v19 = (char *)operator new(0x70uLL);
  v24 = (uint64_t)v19;
  v25 = xmmword_2102E3F50;
  strcpy(v19, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
  *(_QWORD *)&v33.__val_ = v11;
  v33.__cat_ = (const std::error_category *)&off_254A50050;
  if (a3)
  {
    sub_20EA67538(&v33, (uint64_t)&__dst, (CFErrorRef *)&v31);
    sub_20EA66CF0(&v31, a3);
    v20 = v32;
    if (v32)
    {
      p_shared_owners = (unint64_t *)&v32->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    if ((SHIBYTE(v25) & 0x80000000) == 0)
    {
      if ((SHIBYTE(v30) & 0x80000000) == 0)
        goto LABEL_44;
      goto LABEL_48;
    }
    v19 = (char *)v24;
  }
  operator delete(v19);
  if ((SHIBYTE(v30) & 0x80000000) == 0)
  {
LABEL_44:
    if (!v28)
      goto LABEL_49;
    return 0;
  }
LABEL_48:
  operator delete(__dst);
  if (!v28)
LABEL_49:
    (*(void (**)(void **))__p)(&__p);
  return 0;
}

void sub_20E984EF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void (**a12)(_QWORD), uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  void *v25;

  sub_20E86665C((uint64_t)&a25);
  operator delete(v25);
  if (a24 < 0)
    operator delete(__p);
  if (!a18)
  {
    (*a12)(&a12);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

BOOL sub_20E984F90(_QWORD *a1, CFTypeRef *a2)
{
  uint64_t v3;
  void **v5;
  const void *v6;
  std::__shared_weak_count *cat;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  const char *v12;
  size_t v13;
  size_t v14;
  void **p_dst;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  _QWORD *exception;
  uint64_t v23;
  __int128 v24;
  void *__p;
  __int128 v26;
  char v27;
  void **__dst;
  __int128 v29;
  const void *v30;
  std::__shared_weak_count *v31;
  std::error_condition v32;

  if (!*a1 || !a1[1] || !a1[2] || !a1[3] || !a1[4] || (v3 = a1[5]) == 0)
  {
    __p = operator new(0x68uLL);
    v26 = xmmword_2102E3F40;
    strcpy((char *)__p, "The session has not been initialized. You need to call CV3DSLAMInitialize before calling this method");
    v5 = (void **)operator new(0x70uLL);
    __dst = v5;
    v29 = xmmword_2102E3F50;
    strcpy((char *)v5, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
    if (a2)
    {
      v23 = 22;
      *(_QWORD *)&v24 = std::generic_category();
      sub_20EA67538((const std::error_condition *)&v23, (uint64_t)&__p, (CFErrorRef *)&v32);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v6 = *(const void **)&v32.__val_;
      if (*(_QWORD *)&v32.__val_)
        CFRetain(*(CFTypeRef *)&v32.__val_);
      *a2 = v6;
      cat = (std::__shared_weak_count *)v32.__cat_;
      if (!v32.__cat_)
        goto LABEL_18;
      v8 = (unint64_t *)&v32.__cat_[1];
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))cat->__on_zero_shared)(cat);
        std::__shared_weak_count::__release_weak(cat);
        if ((SHIBYTE(v29) & 0x80000000) == 0)
        {
LABEL_21:
          if (SHIBYTE(v26) < 0)
            operator delete(__p);
          return 0;
        }
      }
      else
      {
LABEL_18:
        if ((SHIBYTE(v29) & 0x80000000) == 0)
          goto LABEL_21;
      }
      v5 = __dst;
    }
    operator delete(v5);
    goto LABEL_21;
  }
  (*(void (**)(void **__return_ptr))(*(_QWORD *)v3 + 80))(&__p);
  if (v27)
    return (_BYTE)__p != 0;
  v10 = DWORD2(v26);
  v11 = atomic_load((unsigned __int8 *)&qword_254A5AC38);
  if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A5AC38))
  {
    __cxa_atexit((void (*)(void *))std::error_category::~error_category, &off_254A50050, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5AC38);
  }
  if (v27)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C9B4620;
    __cxa_throw(exception, (struct type_info *)&unk_24C9AD070, (void (*)(void *))std::exception::~exception);
  }
  v12 = (const char *)(*((uint64_t (**)(void **))__p + 2))(&__p);
  v13 = strlen(v12);
  if (v13 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v14 = v13;
  if (v13 >= 0x17)
  {
    v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v16 = v13 | 7;
    v17 = v16 + 1;
    p_dst = (void **)operator new(v16 + 1);
    *(_QWORD *)&v29 = v14;
    *((_QWORD *)&v29 + 1) = v17 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_35;
  }
  HIBYTE(v29) = v13;
  p_dst = (void **)&__dst;
  if (v13)
LABEL_35:
    memmove(p_dst, v12, v14);
  *((_BYTE *)p_dst + v14) = 0;
  v18 = (char *)operator new(0x70uLL);
  v23 = (uint64_t)v18;
  v24 = xmmword_2102E3F50;
  strcpy(v18, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
  *(_QWORD *)&v32.__val_ = v10;
  v32.__cat_ = (const std::error_category *)&off_254A50050;
  if (a2)
  {
    sub_20EA67538(&v32, (uint64_t)&__dst, (CFErrorRef *)&v30);
    sub_20EA66CF0(&v30, a2);
    v19 = v31;
    if (v31)
    {
      p_shared_owners = (unint64_t *)&v31->__shared_owners_;
      do
        v21 = __ldaxr(p_shared_owners);
      while (__stlxr(v21 - 1, p_shared_owners));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if ((SHIBYTE(v24) & 0x80000000) == 0)
    {
      if ((SHIBYTE(v29) & 0x80000000) == 0)
        goto LABEL_44;
      goto LABEL_48;
    }
    v18 = (char *)v23;
  }
  operator delete(v18);
  if ((SHIBYTE(v29) & 0x80000000) == 0)
  {
LABEL_44:
    if (!v27)
      goto LABEL_49;
    return 0;
  }
LABEL_48:
  operator delete(__dst);
  if (!v27)
LABEL_49:
    (*(void (**)(void **))__p)(&__p);
  return 0;
}

void sub_20E985394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void (**a12)(_QWORD), uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  void *v25;

  sub_20E86665C((uint64_t)&a25);
  operator delete(v25);
  if (a24 < 0)
    operator delete(__p);
  if (!a18)
  {
    (*a12)(&a12);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

BOOL sub_20E98542C(_QWORD *a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v4;
  void **v6;
  const void *v7;
  std::__shared_weak_count *cat;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  const char *v13;
  size_t v14;
  size_t v15;
  void **p_dst;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  _QWORD *exception;
  uint64_t v24;
  __int128 v25;
  void *__p;
  __int128 v27;
  char v28;
  void **__dst;
  __int128 v30;
  const void *v31;
  std::__shared_weak_count *v32;
  std::error_condition v33;

  if (!*a1 || !a1[1] || !a1[2] || !a1[3] || !a1[4] || (v4 = a1[5]) == 0)
  {
    __p = operator new(0x68uLL);
    v27 = xmmword_2102E3F40;
    strcpy((char *)__p, "The session has not been initialized. You need to call CV3DSLAMInitialize before calling this method");
    v6 = (void **)operator new(0x70uLL);
    __dst = v6;
    v30 = xmmword_2102E3F50;
    strcpy((char *)v6, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
    if (a3)
    {
      v24 = 22;
      *(_QWORD *)&v25 = std::generic_category();
      sub_20EA67538((const std::error_condition *)&v24, (uint64_t)&__p, (CFErrorRef *)&v33);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v7 = *(const void **)&v33.__val_;
      if (*(_QWORD *)&v33.__val_)
        CFRetain(*(CFTypeRef *)&v33.__val_);
      *a3 = v7;
      cat = (std::__shared_weak_count *)v33.__cat_;
      if (!v33.__cat_)
        goto LABEL_18;
      v9 = (unint64_t *)&v33.__cat_[1];
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))cat->__on_zero_shared)(cat);
        std::__shared_weak_count::__release_weak(cat);
        if ((SHIBYTE(v30) & 0x80000000) == 0)
        {
LABEL_21:
          if (SHIBYTE(v27) < 0)
            operator delete(__p);
          return 0;
        }
      }
      else
      {
LABEL_18:
        if ((SHIBYTE(v30) & 0x80000000) == 0)
          goto LABEL_21;
      }
      v6 = __dst;
    }
    operator delete(v6);
    goto LABEL_21;
  }
  (*(void (**)(void **__return_ptr))(*(_QWORD *)v4 + 56))(&__p);
  if (v28)
    return (_BYTE)__p != 0;
  v11 = DWORD2(v27);
  v12 = atomic_load((unsigned __int8 *)&qword_254A5AC38);
  if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_254A5AC38))
  {
    __cxa_atexit((void (*)(void *))std::error_category::~error_category, &off_254A50050, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5AC38);
  }
  if (v28)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C9B4620;
    __cxa_throw(exception, (struct type_info *)&unk_24C9AD070, (void (*)(void *))std::exception::~exception);
  }
  v13 = (const char *)(*((uint64_t (**)(void **))__p + 2))(&__p);
  v14 = strlen(v13);
  if (v14 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v15 = v14;
  if (v14 >= 0x17)
  {
    v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v17 = v14 | 7;
    v18 = v17 + 1;
    p_dst = (void **)operator new(v17 + 1);
    *(_QWORD *)&v30 = v15;
    *((_QWORD *)&v30 + 1) = v18 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_35;
  }
  HIBYTE(v30) = v14;
  p_dst = (void **)&__dst;
  if (v14)
LABEL_35:
    memmove(p_dst, v13, v15);
  *((_BYTE *)p_dst + v15) = 0;
  v19 = (char *)operator new(0x70uLL);
  v24 = (uint64_t)v19;
  v25 = xmmword_2102E3F50;
  strcpy(v19, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
  *(_QWORD *)&v33.__val_ = v11;
  v33.__cat_ = (const std::error_category *)&off_254A50050;
  if (a3)
  {
    sub_20EA67538(&v33, (uint64_t)&__dst, (CFErrorRef *)&v31);
    sub_20EA66CF0(&v31, a3);
    v20 = v32;
    if (v32)
    {
      p_shared_owners = (unint64_t *)&v32->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    if ((SHIBYTE(v25) & 0x80000000) == 0)
    {
      if ((SHIBYTE(v30) & 0x80000000) == 0)
        goto LABEL_44;
      goto LABEL_48;
    }
    v19 = (char *)v24;
  }
  operator delete(v19);
  if ((SHIBYTE(v30) & 0x80000000) == 0)
  {
LABEL_44:
    if (!v28)
      goto LABEL_49;
    return 0;
  }
LABEL_48:
  operator delete(__dst);
  if (!v28)
LABEL_49:
    (*(void (**)(void **))__p)(&__p);
  return 0;
}

void sub_20E985830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void (**a12)(_QWORD), uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  void *v25;

  sub_20E86665C((uint64_t)&a25);
  operator delete(v25);
  if (a24 < 0)
    operator delete(__p);
  if (!a18)
  {
    (*a12)(&a12);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

BOOL sub_20E9858C8(_QWORD *a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v4;
  void **v6;
  const void *v7;
  std::__shared_weak_count *cat;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  const char *v13;
  size_t v14;
  size_t v15;
  void **p_dst;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  _QWORD *exception;
  uint64_t v24;
  __int128 v25;
  void *__p;
  __int128 v27;
  char v28;
  void **__dst;
  __int128 v30;
  const void *v31;
  std::__shared_weak_count *v32;
  std::error_condition v33;

  if (!*a1 || !a1[1] || !a1[2] || !a1[3] || !a1[4] || (v4 = a1[5]) == 0)
  {
    __p = operator new(0x68uLL);
    v27 = xmmword_2102E3F40;
    strcpy((char *)__p, "The session has not been initialized. You need to call CV3DSLAMInitialize before calling this method");
    v6 = (void **)operator new(0x70uLL);
    __dst = v6;
    v30 = xmmword_2102E3F50;
    strcpy((char *)v6, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
    if (a3)
    {
      v24 = 22;
      *(_QWORD *)&v25 = std::generic_category();
      sub_20EA67538((const std::error_condition *)&v24, (uint64_t)&__p, (CFErrorRef *)&v33);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v7 = *(const void **)&v33.__val_;
      if (*(_QWORD *)&v33.__val_)
        CFRetain(*(CFTypeRef *)&v33.__val_);
      *a3 = v7;
      cat = (std::__shared_weak_count *)v33.__cat_;
      if (!v33.__cat_)
        goto LABEL_18;
      v9 = (unint64_t *)&v33.__cat_[1];
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))cat->__on_zero_shared)(cat);
        std::__shared_weak_count::__release_weak(cat);
        if ((SHIBYTE(v30) & 0x80000000) == 0)
        {
LABEL_21:
          if (SHIBYTE(v27) < 0)
            operator delete(__p);
          return 0;
        }
      }
      else
      {
LABEL_18:
        if ((SHIBYTE(v30) & 0x80000000) == 0)
          goto LABEL_21;
      }
      v6 = __dst;
    }
    operator delete(v6);
    goto LABEL_21;
  }
  (*(void (**)(void **__return_ptr))(*(_QWORD *)v4 + 64))(&__p);
  if (v28)
    return (_BYTE)__p != 0;
  v11 = DWORD2(v27);
  v12 = atomic_load((unsigned __int8 *)&qword_254A5AC38);
  if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_254A5AC38))
  {
    __cxa_atexit((void (*)(void *))std::error_category::~error_category, &off_254A50050, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5AC38);
  }
  if (v28)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C9B4620;
    __cxa_throw(exception, (struct type_info *)&unk_24C9AD070, (void (*)(void *))std::exception::~exception);
  }
  v13 = (const char *)(*((uint64_t (**)(void **))__p + 2))(&__p);
  v14 = strlen(v13);
  if (v14 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v15 = v14;
  if (v14 >= 0x17)
  {
    v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v17 = v14 | 7;
    v18 = v17 + 1;
    p_dst = (void **)operator new(v17 + 1);
    *(_QWORD *)&v30 = v15;
    *((_QWORD *)&v30 + 1) = v18 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_35;
  }
  HIBYTE(v30) = v14;
  p_dst = (void **)&__dst;
  if (v14)
LABEL_35:
    memmove(p_dst, v13, v15);
  *((_BYTE *)p_dst + v15) = 0;
  v19 = (char *)operator new(0x70uLL);
  v24 = (uint64_t)v19;
  v25 = xmmword_2102E3F50;
  strcpy(v19, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
  *(_QWORD *)&v33.__val_ = v11;
  v33.__cat_ = (const std::error_category *)&off_254A50050;
  if (a3)
  {
    sub_20EA67538(&v33, (uint64_t)&__dst, (CFErrorRef *)&v31);
    sub_20EA66CF0(&v31, a3);
    v20 = v32;
    if (v32)
    {
      p_shared_owners = (unint64_t *)&v32->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    if ((SHIBYTE(v25) & 0x80000000) == 0)
    {
      if ((SHIBYTE(v30) & 0x80000000) == 0)
        goto LABEL_44;
      goto LABEL_48;
    }
    v19 = (char *)v24;
  }
  operator delete(v19);
  if ((SHIBYTE(v30) & 0x80000000) == 0)
  {
LABEL_44:
    if (!v28)
      goto LABEL_49;
    return 0;
  }
LABEL_48:
  operator delete(__dst);
  if (!v28)
LABEL_49:
    (*(void (**)(void **))__p)(&__p);
  return 0;
}

void sub_20E985CCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void (**a12)(_QWORD), uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  void *v25;

  sub_20E86665C((uint64_t)&a25);
  operator delete(v25);
  if (a24 < 0)
    operator delete(__p);
  if (!a18)
  {
    (*a12)(&a12);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

BOOL sub_20E985D64(_QWORD *a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v4;
  void **v6;
  const void *v7;
  std::__shared_weak_count *cat;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  const char *v13;
  size_t v14;
  size_t v15;
  void **p_dst;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  _QWORD *exception;
  uint64_t v24;
  __int128 v25;
  void *__p;
  __int128 v27;
  char v28;
  void **__dst;
  __int128 v30;
  const void *v31;
  std::__shared_weak_count *v32;
  std::error_condition v33;

  if (!*a1 || !a1[1] || !a1[2] || !a1[3] || !a1[4] || (v4 = a1[5]) == 0)
  {
    __p = operator new(0x68uLL);
    v27 = xmmword_2102E3F40;
    strcpy((char *)__p, "The session has not been initialized. You need to call CV3DSLAMInitialize before calling this method");
    v6 = (void **)operator new(0x70uLL);
    __dst = v6;
    v30 = xmmword_2102E3F50;
    strcpy((char *)v6, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
    if (a3)
    {
      v24 = 22;
      *(_QWORD *)&v25 = std::generic_category();
      sub_20EA67538((const std::error_condition *)&v24, (uint64_t)&__p, (CFErrorRef *)&v33);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v7 = *(const void **)&v33.__val_;
      if (*(_QWORD *)&v33.__val_)
        CFRetain(*(CFTypeRef *)&v33.__val_);
      *a3 = v7;
      cat = (std::__shared_weak_count *)v33.__cat_;
      if (!v33.__cat_)
        goto LABEL_18;
      v9 = (unint64_t *)&v33.__cat_[1];
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))cat->__on_zero_shared)(cat);
        std::__shared_weak_count::__release_weak(cat);
        if ((SHIBYTE(v30) & 0x80000000) == 0)
        {
LABEL_21:
          if (SHIBYTE(v27) < 0)
            operator delete(__p);
          return 0;
        }
      }
      else
      {
LABEL_18:
        if ((SHIBYTE(v30) & 0x80000000) == 0)
          goto LABEL_21;
      }
      v6 = __dst;
    }
    operator delete(v6);
    goto LABEL_21;
  }
  (*(void (**)(void **__return_ptr))(*(_QWORD *)v4 + 72))(&__p);
  if (v28)
    return (_BYTE)__p != 0;
  v11 = DWORD2(v27);
  v12 = atomic_load((unsigned __int8 *)&qword_254A5AC38);
  if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_254A5AC38))
  {
    __cxa_atexit((void (*)(void *))std::error_category::~error_category, &off_254A50050, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5AC38);
  }
  if (v28)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C9B4620;
    __cxa_throw(exception, (struct type_info *)&unk_24C9AD070, (void (*)(void *))std::exception::~exception);
  }
  v13 = (const char *)(*((uint64_t (**)(void **))__p + 2))(&__p);
  v14 = strlen(v13);
  if (v14 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v15 = v14;
  if (v14 >= 0x17)
  {
    v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v17 = v14 | 7;
    v18 = v17 + 1;
    p_dst = (void **)operator new(v17 + 1);
    *(_QWORD *)&v30 = v15;
    *((_QWORD *)&v30 + 1) = v18 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_35;
  }
  HIBYTE(v30) = v14;
  p_dst = (void **)&__dst;
  if (v14)
LABEL_35:
    memmove(p_dst, v13, v15);
  *((_BYTE *)p_dst + v15) = 0;
  v19 = (char *)operator new(0x70uLL);
  v24 = (uint64_t)v19;
  v25 = xmmword_2102E3F50;
  strcpy(v19, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
  *(_QWORD *)&v33.__val_ = v11;
  v33.__cat_ = (const std::error_category *)&off_254A50050;
  if (a3)
  {
    sub_20EA67538(&v33, (uint64_t)&__dst, (CFErrorRef *)&v31);
    sub_20EA66CF0(&v31, a3);
    v20 = v32;
    if (v32)
    {
      p_shared_owners = (unint64_t *)&v32->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    if ((SHIBYTE(v25) & 0x80000000) == 0)
    {
      if ((SHIBYTE(v30) & 0x80000000) == 0)
        goto LABEL_44;
      goto LABEL_48;
    }
    v19 = (char *)v24;
  }
  operator delete(v19);
  if ((SHIBYTE(v30) & 0x80000000) == 0)
  {
LABEL_44:
    if (!v28)
      goto LABEL_49;
    return 0;
  }
LABEL_48:
  operator delete(__dst);
  if (!v28)
LABEL_49:
    (*(void (**)(void **))__p)(&__p);
  return 0;
}

void sub_20E986168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void (**a12)(_QWORD), uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  void *v25;

  sub_20E86665C((uint64_t)&a25);
  operator delete(v25);
  if (a24 < 0)
    operator delete(__p);
  if (!a18)
  {
    (*a12)(&a12);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20E986200(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  _QWORD *v7;
  char *v9;
  const void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  uint64_t *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  int v36;
  int v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  std::mutex *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  char *v80;
  std::error_condition v81;
  __int128 v82;
  uint64_t v83;
  unsigned __int8 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  char v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  unsigned __int8 v102;
  __int128 v103;
  uint64_t v104;
  __int128 v105;
  __int16 v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  char v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  char v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  char v128;
  __int128 v129;
  uint64_t v130;
  __int128 v131;
  __int16 v132;
  _BYTE v133[32];
  uint64_t v134;
  char v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  char v150;
  uint64_t v151;
  std::__shared_weak_count *v152;
  unsigned __int8 v153;
  __int128 v154;
  uint64_t v155;
  __int128 v156;
  __int16 v157;
  __int128 v158;
  __int128 v159;
  uint64_t v160;
  char v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  char v176;
  uint64_t v177;
  std::__shared_weak_count *v178;
  char v179;
  __int128 v180;
  uint64_t v181;
  __int128 cf;
  __int128 v183;
  uint64_t v184;
  char v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  char v200;
  uint64_t v201;
  std::__shared_weak_count *v202;
  char v203;
  __int128 v204;
  uint64_t v205;
  uint64_t v206;
  std::__shared_weak_count *v207;
  _BYTE __p[32];
  uint64_t v209;
  char v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  char v225;
  uint64_t v226;
  std::__shared_weak_count *v227;
  char v228;
  __int128 v229;
  uint64_t v230;
  __int128 v231;
  __int16 i;
  _QWORD v233[3];
  _QWORD *v234;
  uint64_t v235;

  v235 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)a1
    || !*(_QWORD *)(a1 + 8)
    || !*(_QWORD *)(a1 + 16)
    || !*(_QWORD *)(a1 + 24)
    || !*(_QWORD *)(a1 + 32)
    || !*(_QWORD *)(a1 + 40))
  {
    *(_QWORD *)__p = operator new(0x68uLL);
    *(_OWORD *)&__p[8] = xmmword_2102E3F40;
    strcpy(*(char **)__p, "The session has not been initialized. You need to call CV3DSLAMInitialize before calling this method");
    v9 = (char *)operator new(0x70uLL);
    *(_QWORD *)v133 = v9;
    *(_OWORD *)&v133[8] = xmmword_2102E3F50;
    strcpy(v9, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
    if (!a4)
    {
LABEL_24:
      operator delete(v9);
      goto LABEL_25;
    }
    *(_QWORD *)&v81.__val_ = 22;
    v81.__cat_ = std::generic_category();
    sub_20EA67538(&v81, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a4)
      CFRelease(*a4);
    *a4 = 0;
    v10 = (const void *)cf;
    if ((_QWORD)cf)
      CFRetain((CFTypeRef)cf);
    *a4 = v10;
    v11 = (std::__shared_weak_count *)*((_QWORD *)&cf + 1);
    if (*((_QWORD *)&cf + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&cf + 1) + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
        if ((v133[23] & 0x80000000) == 0)
          goto LABEL_25;
        goto LABEL_23;
      }
    }
    goto LABEL_22;
  }
  if (!a3)
  {
    *(_QWORD *)__p = operator new(0x38uLL);
    *(_OWORD *)&__p[8] = xmmword_2102DC7C0;
    strcpy(*(char **)__p, "Trying to add an anchor to SLAM with a NULL state");
    v9 = (char *)operator new(0x70uLL);
    *(_QWORD *)v133 = v9;
    *(_OWORD *)&v133[8] = xmmword_2102E3F50;
    strcpy(v9, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
    if (!a4)
      goto LABEL_24;
    *(_QWORD *)&v81.__val_ = 22;
    v81.__cat_ = std::generic_category();
    sub_20EA67538(&v81, (uint64_t)__p, (CFErrorRef *)&cf);
    sub_20EA66CF0((const void **)&cf, a4);
    v15 = (std::__shared_weak_count *)*((_QWORD *)&cf + 1);
    if (!*((_QWORD *)&cf + 1))
      goto LABEL_22;
    v16 = (unint64_t *)(*((_QWORD *)&cf + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
LABEL_44:
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    goto LABEL_22;
  }
  v7 = *(_QWORD **)(a3 + 8);
  if (!v7)
  {
    *(_QWORD *)__p = operator new(0x48uLL);
    *(_OWORD *)&__p[8] = xmmword_2102E3F80;
    strcpy(*(char **)__p, "Trying to add an anchor to SLAM with an invalid state (no metadata)");
    v9 = (char *)operator new(0x70uLL);
    *(_QWORD *)v133 = v9;
    *(_OWORD *)&v133[8] = xmmword_2102E3F50;
    strcpy(v9, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
    if (!a4)
      goto LABEL_24;
    *(_QWORD *)&v81.__val_ = 22;
    v81.__cat_ = std::generic_category();
    sub_20EA67538(&v81, (uint64_t)__p, (CFErrorRef *)&cf);
    sub_20EA66CF0((const void **)&cf, a4);
    v15 = (std::__shared_weak_count *)*((_QWORD *)&cf + 1);
    if (!*((_QWORD *)&cf + 1))
      goto LABEL_22;
    v18 = (unint64_t *)(*((_QWORD *)&cf + 1) + 8);
    do
      v17 = __ldaxr(v18);
    while (__stlxr(v17 - 1, v18));
    goto LABEL_44;
  }
  if (*v7)
  {
    v158 = *(_OWORD *)(a2 + 8);
    LOBYTE(v159) = 0;
    v161 = 0;
    if (*(_BYTE *)(a2 + 48))
    {
      if (*(char *)(a2 + 47) < 0)
      {
        sub_20E860C04(&v159, *(void **)(a2 + 24), *(_QWORD *)(a2 + 32));
      }
      else
      {
        v159 = *(_OWORD *)(a2 + 24);
        v160 = *(_QWORD *)(a2 + 40);
      }
      v161 = 1;
    }
    v20 = *(_OWORD *)(a2 + 232);
    v21 = *(_OWORD *)(a2 + 248);
    v176 = *(_BYTE *)(a2 + 280);
    v22 = *(_OWORD *)(a2 + 168);
    v23 = *(_OWORD *)(a2 + 200);
    v170 = *(_OWORD *)(a2 + 184);
    v171 = v23;
    v172 = *(_OWORD *)(a2 + 216);
    v173 = v20;
    v24 = *(_OWORD *)(a2 + 104);
    v25 = *(_OWORD *)(a2 + 136);
    v166 = *(_OWORD *)(a2 + 120);
    v167 = v25;
    v168 = *(_OWORD *)(a2 + 152);
    v169 = v22;
    v26 = *(_OWORD *)(a2 + 72);
    v162 = *(_OWORD *)(a2 + 56);
    v163 = v26;
    v164 = *(_OWORD *)(a2 + 88);
    v165 = v24;
    v27 = *(_OWORD *)(a2 + 264);
    v174 = v21;
    v175 = v27;
    LOBYTE(v177) = 0;
    v179 = 0;
    if (*(_BYTE *)(a2 + 304))
    {
      v28 = *(std::__shared_weak_count **)(a2 + 296);
      v177 = *(_QWORD *)(a2 + 288);
      v178 = v28;
      if (v28)
      {
        p_shared_owners = (unint64_t *)&v28->__shared_owners_;
        do
          v30 = __ldxr(p_shared_owners);
        while (__stxr(v30 + 1, p_shared_owners));
      }
      v179 = 1;
    }
    v181 = *(_QWORD *)(a2 + 328);
    v180 = *(_OWORD *)(a2 + 312);
    v31 = *(uint64_t **)(a3 + 8);
    v33 = *v31;
    v32 = (std::__shared_weak_count *)v31[1];
    if (v32)
    {
      v34 = (unint64_t *)&v32->__shared_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    cf = v158;
    LOBYTE(v183) = 0;
    v185 = 0;
    if (v161)
    {
      v183 = v159;
      v184 = v160;
      v160 = 0;
      v159 = 0uLL;
      v185 = 1;
    }
    v198 = v174;
    v199 = v175;
    v200 = v176;
    v194 = v170;
    v195 = v171;
    v196 = v172;
    v197 = v173;
    v190 = v166;
    v191 = v167;
    v192 = v168;
    v193 = v169;
    v186 = v162;
    v187 = v163;
    v188 = v164;
    v189 = v165;
    LOBYTE(v201) = 0;
    v203 = 0;
    if (v179)
    {
      v201 = v177;
      v202 = v178;
      v177 = 0;
      v178 = 0;
      v203 = 1;
    }
    v204 = v180;
    v205 = v181;
    v206 = v33;
    v207 = v32;
    if (v161 && SHIBYTE(v160) < 0)
      operator delete((void *)v159);
    (*(void (**)(_BYTE *__return_ptr, _QWORD, __int128 *))(**(_QWORD **)(a1 + 40) + 24))(v133, *(_QWORD *)(a1 + 40), &cf);
    std::mutex::lock((std::mutex *)(a1 + 4224));
    v81 = *(std::error_condition *)v133;
    LOBYTE(v82) = 0;
    v84 = 0;
    if (v135)
    {
      if (SHIBYTE(v134) < 0)
      {
        sub_20E860C04(&v82, *(void **)&v133[16], *(unint64_t *)&v133[24]);
      }
      else
      {
        v82 = *(_OWORD *)&v133[16];
        v83 = v134;
      }
      v36 = 1;
      v84 = 1;
    }
    else
    {
      v36 = 0;
    }
    v96 = v147;
    v97 = v148;
    v98 = v149;
    v92 = v143;
    v93 = v144;
    v94 = v145;
    v95 = v146;
    v99 = v150;
    v90 = v141;
    v91 = v142;
    v85 = v136;
    v86 = v137;
    v88 = v139;
    v89 = v140;
    v87 = v138;
    LOBYTE(v100) = 0;
    v102 = 0;
    v37 = v153;
    if (v153)
    {
      v100 = v151;
      v101 = v152;
      if (v152)
      {
        v38 = (unint64_t *)&v152->__shared_owners_;
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
        v36 = v84;
      }
      v37 = 1;
      v102 = 1;
    }
    v103 = v154;
    v104 = v155;
    v105 = v156;
    v106 = v157;
    v40 = *(_QWORD *)(a1 + 4288);
    v41 = *(_QWORD *)(a1 + 4296);
    *(std::error_condition *)__p = v81;
    __p[16] = 0;
    v210 = 0;
    if (v36)
    {
      if (SHIBYTE(v83) < 0)
      {
        sub_20E860C04(&__p[16], (void *)v82, *((unint64_t *)&v82 + 1));
        v37 = v102;
      }
      else
      {
        *(_OWORD *)&__p[16] = v82;
        v209 = v83;
      }
      v210 = 1;
    }
    v223 = v97;
    v224 = v98;
    v225 = v99;
    v219 = v93;
    v220 = v94;
    v221 = v95;
    v222 = v96;
    v215 = v89;
    v216 = v90;
    v217 = v91;
    v218 = v92;
    v211 = v85;
    v212 = v86;
    v213 = v87;
    v214 = v88;
    LOBYTE(v226) = 0;
    v228 = 0;
    if (v37)
    {
      v226 = v100;
      v227 = v101;
      if (v101)
      {
        v42 = (unint64_t *)&v101->__shared_owners_;
        do
          v43 = __ldxr(v42);
        while (__stxr(v43 + 1, v42));
      }
      v228 = 1;
    }
    v229 = v103;
    v230 = v104;
    v231 = v105;
    for (i = v106; v40 != v41; v40 += 16)
    {
      v80 = 0;
      v46 = (char *)operator new(0x158uLL, MEMORY[0x24BEDB6B8]);
      v47 = v46;
      if (v46)
      {
        v48 = *(_OWORD *)__p;
        v46[24] = 0;
        *(_OWORD *)(v46 + 8) = v48;
        v46[48] = 0;
        if (v210)
        {
          if (SHIBYTE(v209) < 0)
          {
            sub_20E860C04(v46 + 24, *(void **)&__p[16], *(unint64_t *)&__p[24]);
          }
          else
          {
            *(_OWORD *)(v46 + 24) = *(_OWORD *)&__p[16];
            *((_QWORD *)v46 + 5) = v209;
          }
          v47[48] = 1;
        }
        v49 = v221;
        *(_OWORD *)(v47 + 232) = v222;
        v50 = v224;
        *(_OWORD *)(v47 + 248) = v223;
        *(_OWORD *)(v47 + 264) = v50;
        v51 = v217;
        *(_OWORD *)(v47 + 168) = v218;
        v52 = v220;
        *(_OWORD *)(v47 + 184) = v219;
        *(_OWORD *)(v47 + 200) = v52;
        *(_OWORD *)(v47 + 216) = v49;
        v53 = v213;
        *(_OWORD *)(v47 + 104) = v214;
        v54 = v216;
        *(_OWORD *)(v47 + 120) = v215;
        *(_OWORD *)(v47 + 136) = v54;
        *(_OWORD *)(v47 + 152) = v51;
        v55 = v212;
        *(_OWORD *)(v47 + 56) = v211;
        *(_OWORD *)(v47 + 72) = v55;
        v47[280] = v225;
        *(_OWORD *)(v47 + 88) = v53;
        v47[288] = 0;
        v47[304] = 0;
        if (v228)
        {
          v56 = v227;
          *((_QWORD *)v47 + 36) = v226;
          *((_QWORD *)v47 + 37) = v56;
          if (v56)
          {
            v57 = (unint64_t *)&v56->__shared_owners_;
            do
              v58 = __ldxr(v57);
            while (__stxr(v58 + 1, v57));
          }
          v47[304] = 1;
        }
        *(_OWORD *)(v47 + 312) = v229;
        *((_QWORD *)v47 + 41) = v230;
        *((_DWORD *)v47 + 84) = 1;
        *(_QWORD *)v47 = off_24C9C3740;
      }
      v80 = v47;
      v233[0] = &off_24C9B3348;
      v233[1] = &v80;
      v233[2] = 0;
      v234 = v233;
      if (v231 >= 6u
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp", 1367, (uint64_t)"code", 4, (uint64_t)"Invalid Anchor Added Result", 27, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      (*(void (**)(void))(**(_QWORD **)v40 + 16))();
      if (!v234)
        sub_20E86D37C();
      (*(void (**)(_QWORD *))(*v234 + 48))(v234);
      v44 = v234;
      if (v234 == v233)
      {
        v44 = v233;
        v45 = 4;
      }
      else
      {
        if (!v234)
          continue;
        v45 = 5;
      }
      (*(void (**)(void))(*v44 + 8 * v45))();
    }
    v107 = *(_OWORD *)__p;
    LOBYTE(v108) = 0;
    v110 = 0;
    if (v210)
    {
      if (SHIBYTE(v209) < 0)
      {
        sub_20E860C04(&v108, *(void **)&__p[16], *(unint64_t *)&__p[24]);
      }
      else
      {
        v108 = *(_OWORD *)&__p[16];
        v109 = v209;
      }
      v110 = 1;
    }
    v123 = v223;
    v124 = v224;
    v125 = v225;
    v119 = v219;
    v120 = v220;
    v121 = v221;
    v122 = v222;
    v115 = v215;
    v116 = v216;
    v117 = v217;
    v118 = v218;
    v111 = v211;
    v112 = v212;
    v113 = v213;
    v114 = v214;
    LOBYTE(v126) = 0;
    v128 = 0;
    if (v228)
    {
      v126 = v226;
      v127 = v227;
      if (v227)
      {
        v59 = (unint64_t *)&v227->__shared_owners_;
        do
          v60 = __ldxr(v59);
        while (__stxr(v60 + 1, v59));
        v128 = 1;
        v129 = v229;
        v130 = v230;
        v61 = (std::mutex *)(a1 + 4224);
        v131 = v231;
        v132 = i;
        if (v228)
        {
          v62 = v227;
          if (v227)
          {
            v63 = (unint64_t *)&v227->__shared_owners_;
            do
              v64 = __ldaxr(v63);
            while (__stlxr(v64 - 1, v63));
            if (!v64)
            {
              ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
              std::__shared_weak_count::__release_weak(v62);
            }
          }
        }
        goto LABEL_125;
      }
      v128 = 1;
    }
    v129 = v229;
    v130 = v230;
    v61 = (std::mutex *)(a1 + 4224);
    v131 = v231;
    v132 = i;
LABEL_125:
    if (v210 && SHIBYTE(v209) < 0)
      operator delete(*(void **)&__p[16]);
    if (v128)
    {
      v65 = v127;
      if (v127)
      {
        v66 = (unint64_t *)&v127->__shared_owners_;
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
    }
    if (v110 && SHIBYTE(v109) < 0)
      operator delete((void *)v108);
    if (v102)
    {
      v68 = v101;
      if (v101)
      {
        v69 = (unint64_t *)&v101->__shared_owners_;
        do
          v70 = __ldaxr(v69);
        while (__stlxr(v70 - 1, v69));
        if (!v70)
        {
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
        }
      }
    }
    if (v84 && SHIBYTE(v83) < 0)
      operator delete((void *)v82);
    std::mutex::unlock(v61);
    if (v153)
    {
      v71 = v152;
      if (v152)
      {
        v72 = (unint64_t *)&v152->__shared_owners_;
        do
          v73 = __ldaxr(v72);
        while (__stlxr(v73 - 1, v72));
        if (!v73)
        {
          ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
          std::__shared_weak_count::__release_weak(v71);
        }
      }
    }
    if (v135 && SHIBYTE(v134) < 0)
      operator delete(*(void **)&v133[16]);
    v74 = v207;
    if (v207)
    {
      v75 = (unint64_t *)&v207->__shared_owners_;
      do
        v76 = __ldaxr(v75);
      while (__stlxr(v76 - 1, v75));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
        std::__shared_weak_count::__release_weak(v74);
      }
    }
    if (v203)
    {
      v77 = v202;
      if (v202)
      {
        v78 = (unint64_t *)&v202->__shared_owners_;
        do
          v79 = __ldaxr(v78);
        while (__stlxr(v79 - 1, v78));
        if (!v79)
        {
          ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
          std::__shared_weak_count::__release_weak(v77);
        }
      }
    }
    if (v185)
    {
      if (SHIBYTE(v184) < 0)
        operator delete((void *)v183);
    }
    return 1;
  }
  *(_QWORD *)__p = operator new(0x50uLL);
  *(_OWORD *)&__p[8] = xmmword_2102E3F70;
  strcpy(*(char **)__p, "Trying to add an anchor to SLAM with an invalid state (no pose metadata)");
  v9 = (char *)operator new(0x70uLL);
  *(_QWORD *)v133 = v9;
  *(_OWORD *)&v133[8] = xmmword_2102E3F50;
  strcpy(v9, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
  if (!a4)
    goto LABEL_24;
  *(_QWORD *)&v81.__val_ = 22;
  v81.__cat_ = std::generic_category();
  sub_20EA67538(&v81, (uint64_t)__p, (CFErrorRef *)&cf);
  sub_20EA66CF0((const void **)&cf, a4);
  v15 = (std::__shared_weak_count *)*((_QWORD *)&cf + 1);
  if (*((_QWORD *)&cf + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&cf + 1) + 8);
    do
      v17 = __ldaxr(v19);
    while (__stlxr(v17 - 1, v19));
    goto LABEL_44;
  }
LABEL_22:
  if ((v133[23] & 0x80000000) != 0)
  {
LABEL_23:
    v9 = *(char **)v133;
    goto LABEL_24;
  }
LABEL_25:
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_20E9870C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::mutex *a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  char a65;

  if (a65)
  {
    if (a64 < 0)
      operator delete(__p);
  }
  sub_20E987268((uint64_t)&STACK[0x6F0]);
  sub_20E987268((uint64_t)&a13);
  std::mutex::unlock(a10);
  sub_20E987268((uint64_t)&STACK[0x2E0]);
  sub_20E984A28((uint64_t)&STACK[0x590]);
  _Unwind_Resume(a1);
}

void sub_20E9870E0()
{
  if (LOBYTE(STACK[0x718]))
  {
    if (SLOBYTE(STACK[0x717]) < 0)
      operator delete((void *)STACK[0x700]);
  }
  JUMPOUT(0x20E9871F4);
}

void sub_20E987100(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a21)
  {
    if (a20 < 0)
      operator delete(__p);
  }
  JUMPOUT(0x20E9871FCLL);
}

void sub_20E987120(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x468]))
  {
    if (SLOBYTE(STACK[0x467]) < 0)
      operator delete((void *)STACK[0x450]);
  }
  _Unwind_Resume(a1);
}

void sub_20E98715C(_Unwind_Exception *a1)
{
  sub_20E987268((uint64_t)&STACK[0x2E0]);
  sub_20E984A28((uint64_t)&STACK[0x590]);
  _Unwind_Resume(a1);
}

void sub_20E987178(_Unwind_Exception *a1)
{
  sub_20E984A28((uint64_t)&STACK[0x590]);
  _Unwind_Resume(a1);
}

void sub_20E987190(_Unwind_Exception *a1, uint64_t a2, std::mutex *a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  va_list va;

  va_start(va, a5);
  v7 = *(_QWORD *)(v5 - 112);
  if (!v7)
    sub_20E86D37C();
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7);
  v8 = *(_QWORD **)(v5 - 112);
  if (v8 == (_QWORD *)(v5 - 136))
  {
    v9 = 4;
    v8 = (_QWORD *)(v5 - 136);
  }
  else
  {
    if (!v8)
      goto LABEL_8;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_8:
  sub_20E987268((uint64_t)&STACK[0x6F0]);
  sub_20E987268((uint64_t)va);
  std::mutex::unlock(a3);
  sub_20E987268((uint64_t)&STACK[0x2E0]);
  sub_20E984A28((uint64_t)&STACK[0x590]);
  _Unwind_Resume(a1);
}

void sub_20E98721C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  _Unwind_Resume(a1);
}

void sub_20E98722C()
{
  JUMPOUT(0x20E987240);
}

void sub_20E987234(_Unwind_Exception *a1)
{
  void *v1;

  sub_20E86665C((uint64_t)&STACK[0x590]);
  operator delete(v1);
  if (SLOBYTE(STACK[0x707]) < 0)
    JUMPOUT(0x20E98725CLL);
  _Unwind_Resume(a1);
}

uint64_t sub_20E987268(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (*(_BYTE *)(a1 + 296))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 288);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  if (!*(_BYTE *)(a1 + 40) || (*(char *)(a1 + 39) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 16));
  return a1;
}

BOOL sub_20E9872F0(_QWORD *a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v5;
  uint64_t v7;
  int v8;
  BOOL v9;
  void **v11;
  const void *v12;
  std::__shared_weak_count *cat;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  const char *v22;
  size_t v23;
  size_t v24;
  void **p_dst;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  _QWORD *exception;
  uint64_t v33;
  __int128 v34;
  void *__p;
  __int128 v36;
  char v37;
  void **__dst;
  __int128 v39;
  const void *v40;
  std::__shared_weak_count *v41;
  std::error_condition v42;

  if (!*a1 || !a1[1] || !a1[2] || !a1[3] || !a1[4] || (v5 = a1[5]) == 0)
  {
    __p = operator new(0x68uLL);
    v36 = xmmword_2102E3F40;
    strcpy((char *)__p, "The session has not been initialized. You need to call CV3DSLAMInitialize before calling this method");
    v11 = (void **)operator new(0x70uLL);
    __dst = v11;
    v39 = xmmword_2102E3F50;
    strcpy((char *)v11, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
    if (!a3)
    {
LABEL_28:
      operator delete(v11);
      goto LABEL_29;
    }
    v33 = 22;
    *(_QWORD *)&v34 = std::generic_category();
    sub_20EA67538((const std::error_condition *)&v33, (uint64_t)&__p, (CFErrorRef *)&v42);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v12 = *(const void **)&v42.__val_;
    if (*(_QWORD *)&v42.__val_)
      CFRetain(*(CFTypeRef *)&v42.__val_);
    *a3 = v12;
    cat = (std::__shared_weak_count *)v42.__cat_;
    if (v42.__cat_)
    {
      v14 = (unint64_t *)&v42.__cat_[1];
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))cat->__on_zero_shared)(cat);
        std::__shared_weak_count::__release_weak(cat);
        if ((SHIBYTE(v39) & 0x80000000) == 0)
        {
LABEL_29:
          if (SHIBYTE(v36) < 0)
            operator delete(__p);
          return 0;
        }
        goto LABEL_27;
      }
    }
LABEL_26:
    if ((SHIBYTE(v39) & 0x80000000) == 0)
      goto LABEL_29;
LABEL_27:
    v11 = __dst;
    goto LABEL_28;
  }
  v7 = 0;
  do
  {
    v8 = *(unsigned __int8 *)(a2 + v7);
    if (*(_BYTE *)(a2 + v7))
      v9 = 1;
    else
      v9 = v7 == 15;
    ++v7;
  }
  while (!v9);
  if (!v8)
  {
    __p = operator new(0x40uLL);
    v36 = xmmword_2102D7440;
    strcpy((char *)__p, "Trying to remove an anchor from SLAM with an invalid UUID");
    v11 = (void **)operator new(0x70uLL);
    __dst = v11;
    v39 = xmmword_2102E3F50;
    strcpy((char *)v11, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
    if (!a3)
      goto LABEL_28;
    v33 = 22;
    *(_QWORD *)&v34 = std::generic_category();
    sub_20EA67538((const std::error_condition *)&v33, (uint64_t)&__p, (CFErrorRef *)&v42);
    sub_20EA66CF0((const void **)&v42, a3);
    v16 = (std::__shared_weak_count *)v42.__cat_;
    if (v42.__cat_)
    {
      v17 = (unint64_t *)&v42.__cat_[1];
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    goto LABEL_26;
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 88))(v5))
  {
    (*(void (**)(void **__return_ptr, _QWORD, uint64_t))(*(_QWORD *)a1[5] + 48))(&__p, a1[5], a2);
    if (v37)
      return (_BYTE)__p != 0;
    v20 = DWORD2(v36);
    v21 = atomic_load((unsigned __int8 *)&qword_254A5AC38);
    if ((v21 & 1) == 0 && __cxa_guard_acquire(&qword_254A5AC38))
    {
      __cxa_atexit((void (*)(void *))std::error_category::~error_category, &off_254A50050, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5AC38);
    }
    if (v37)
    {
      exception = __cxa_allocate_exception(8uLL);
      *exception = &off_24C9B4620;
      __cxa_throw(exception, (struct type_info *)&unk_24C9AD070, (void (*)(void *))std::exception::~exception);
    }
    v22 = (const char *)(*((uint64_t (**)(void **))__p + 2))(&__p);
    v23 = strlen(v22);
    if (v23 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v24 = v23;
    if (v23 >= 0x17)
    {
      v26 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v23 | 7) != 0x17)
        v26 = v23 | 7;
      v27 = v26 + 1;
      p_dst = (void **)operator new(v26 + 1);
      *(_QWORD *)&v39 = v24;
      *((_QWORD *)&v39 + 1) = v27 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v39) = v23;
      p_dst = (void **)&__dst;
      if (!v23)
      {
LABEL_51:
        *((_BYTE *)p_dst + v24) = 0;
        v28 = (char *)operator new(0x70uLL);
        v33 = (uint64_t)v28;
        v34 = xmmword_2102E3F50;
        strcpy(v28, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
        *(_QWORD *)&v42.__val_ = v20;
        v42.__cat_ = (const std::error_category *)&off_254A50050;
        if (a3)
        {
          sub_20EA67538(&v42, (uint64_t)&__dst, (CFErrorRef *)&v40);
          sub_20EA66CF0(&v40, a3);
          v29 = v41;
          if (v41)
          {
            p_shared_owners = (unint64_t *)&v41->__shared_owners_;
            do
              v31 = __ldaxr(p_shared_owners);
            while (__stlxr(v31 - 1, p_shared_owners));
            if (!v31)
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              std::__shared_weak_count::__release_weak(v29);
            }
          }
          if ((SHIBYTE(v34) & 0x80000000) == 0)
          {
            if ((SHIBYTE(v39) & 0x80000000) == 0)
              goto LABEL_59;
            goto LABEL_63;
          }
          v28 = (char *)v33;
        }
        operator delete(v28);
        if ((SHIBYTE(v39) & 0x80000000) == 0)
        {
LABEL_59:
          if (!v37)
            goto LABEL_64;
          return 0;
        }
LABEL_63:
        operator delete(__dst);
        if (!v37)
LABEL_64:
          (*(void (**)(void **))__p)(&__p);
        return 0;
      }
    }
    memmove(p_dst, v22, v24);
    goto LABEL_51;
  }
  v19 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 176))(*a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, a2);
  return 1;
}

void sub_20E987860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void (**a12)(_QWORD), uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  void *v25;

  sub_20E86665C((uint64_t)&a25);
  operator delete(v25);
  if (a24 < 0)
    operator delete(__p);
  if (!a18)
  {
    (*a12)(&a12);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20E987904(_QWORD *a1, _QWORD *a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  char *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p;
  __int128 v15;
  CFTypeRef cf;
  std::__shared_weak_count *v17;
  std::error_condition v18;

  if (*a1 && a1[1] && a1[2] && a1[3] && a1[4] && a1[5])
  {
    if (a2)
    {
      *a2 = a1[314];
      return 1;
    }
    __p = operator new(0x48uLL);
    v15 = xmmword_2102DC240;
    strcpy((char *)__p, "Session ID pointer can not be null when requesting for the session id");
    v10 = (char *)operator new(0x70uLL);
    strcpy(v10, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
    if (a3)
    {
      *(_QWORD *)&v18.__val_ = 22;
      v18.__cat_ = std::generic_category();
      sub_20EA67538(&v18, (uint64_t)&__p, (CFErrorRef *)&cf);
      sub_20EA66CF0(&cf, a3);
      v11 = v17;
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
    operator delete(v10);
    if (SHIBYTE(v15) < 0)
      goto LABEL_30;
    return 0;
  }
  __p = operator new(0x68uLL);
  v15 = xmmword_2102E3F40;
  strcpy((char *)__p, "The session has not been initialized. You need to call CV3DSLAMInitialize before calling this method");
  v5 = (char *)operator new(0x70uLL);
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
  if (a3)
  {
    *(_QWORD *)&v18.__val_ = 22;
    v18.__cat_ = std::generic_category();
    sub_20EA67538(&v18, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v6;
    v7 = v17;
    if (v17)
    {
      v8 = (unint64_t *)&v17->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  operator delete(v5);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
    return 0;
LABEL_30:
  operator delete(__p);
  return 0;
}

void sub_20E987C14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  sub_20E86665C((uint64_t)&a18);
  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20E987C5C(_QWORD *a1, const void *a2, CFTypeRef *a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  CFTypeRef v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *__p;
  __int128 v27;
  CFTypeRef cf;
  std::__shared_weak_count *v29;
  std::error_condition v30;

  if (*a1 && a1[1] && a1[2] && a1[3] && a1[4] && a1[5])
  {
    if (a2)
    {
      v6 = (std::__shared_weak_count *)operator new(0x20uLL);
      v6->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      v6->__shared_weak_owners_ = 0;
      v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B3980;
      v6[1].__vftable = (std::__shared_weak_count_vtbl *)_Block_copy(a2);
      v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 328))(*a1);
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
      v10 = (_QWORD *)operator new();
      *v10 = &off_24C9B39D0;
      v10[1] = &off_24C9B3A48;
      v11 = v10 + 1;
      v10[2] = v6 + 1;
      v10[3] = v6;
      v10[4] = v10 + 1;
      __p = &off_24C9B33C8;
      v12 = (_QWORD *)operator new();
      *v12 = &off_24C9B39D0;
      v13 = v12 + 1;
      v14 = v10[4];
      if (v14)
      {
        if ((_QWORD *)v14 == v11)
        {
          v12[4] = v13;
          (*(void (**)(_QWORD *))(*v11 + 24))(v11);
          goto LABEL_35;
        }
        v14 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v14 + 16))(v14, v13);
      }
      v12[4] = v14;
LABEL_35:
      *(_QWORD *)&v27 = v12;
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v8 + 16))(v8, &__p);
      v23 = v27;
      __p = &off_24C9B33C8;
      *(_QWORD *)&v27 = 0;
      if (v23)
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
      (*(void (**)(_QWORD *))(*v10 + 8))(v10);
      do
        v24 = __ldaxr(p_shared_owners);
      while (__stlxr(v24 - 1, p_shared_owners));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      return 1;
    }
    __p = operator new(0x30uLL);
    v27 = xmmword_2102E3F90;
    strcpy((char *)__p, "Trying to set a CM block with a NULL block");
    v15 = (char *)operator new(0x70uLL);
    v25 = v15;
    strcpy(v15, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
    if (a3)
    {
      *(_QWORD *)&v30.__val_ = 22;
      v30.__cat_ = std::generic_category();
      sub_20EA67538(&v30, (uint64_t)&__p, (CFErrorRef *)&cf);
      sub_20EA66CF0(&cf, a3);
      v17 = v29;
      if (!v29)
        goto LABEL_24;
      v21 = (unint64_t *)&v29->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (v22)
        goto LABEL_24;
      goto LABEL_23;
    }
  }
  else
  {
    __p = operator new(0x68uLL);
    v27 = xmmword_2102E3F40;
    strcpy((char *)__p, "The session has not been initialized. You need to call CV3DSLAMInitialize before calling this method");
    v15 = (char *)operator new(0x70uLL);
    v25 = v15;
    strcpy(v15, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
    if (a3)
    {
      *(_QWORD *)&v30.__val_ = 22;
      v30.__cat_ = std::generic_category();
      sub_20EA67538(&v30, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v16 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v16;
      v17 = v29;
      if (!v29)
        goto LABEL_24;
      v18 = (unint64_t *)&v29->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (v19)
        goto LABEL_24;
LABEL_23:
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
LABEL_24:
      v15 = v25;
    }
  }
  operator delete(v15);
  if (SHIBYTE(v27) < 0)
    operator delete(__p);
  return 0;
}

void sub_20E988088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  void *v20;

  sub_20E86665C((uint64_t)&a20);
  operator delete(v20);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E98817C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B33C8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t sub_20E9881BC(_QWORD *a1, unsigned int a2, const void *a3, CFTypeRef *a4)
{
  char v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  char *v19;
  const void *v20;
  std::__shared_weak_count *cat;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v26;
  char *v27;
  const std::error_category *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t *v37;
  __int128 v38;
  _BYTE __p[24];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  _OWORD v49[2];
  int v50;
  const void *v51;
  std::__shared_weak_count *v52;
  std::error_condition v53;

  if (!*a1 || !a1[1] || !a1[2] || !a1[3] || !a1[4] || !a1[5])
  {
    *(_QWORD *)__p = operator new(0x68uLL);
    *(_OWORD *)&__p[8] = xmmword_2102E3F40;
    strcpy(*(char **)__p, "The session has not been initialized. You need to call CV3DSLAMInitialize before calling this method");
    v19 = (char *)operator new(0x70uLL);
    *(_QWORD *)&v49[0] = v19;
    *(_OWORD *)((char *)v49 + 8) = xmmword_2102E3F50;
    strcpy(v19, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
    if (!a4)
    {
LABEL_40:
      operator delete(v19);
      goto LABEL_41;
    }
    v45 = 22;
    *(_QWORD *)&v46 = std::generic_category();
    sub_20EA67538((const std::error_condition *)&v45, (uint64_t)__p, (CFErrorRef *)&v53);
    if (*a4)
      CFRelease(*a4);
    *a4 = 0;
    v20 = *(const void **)&v53.__val_;
    if (*(_QWORD *)&v53.__val_)
      CFRetain(*(CFTypeRef *)&v53.__val_);
    *a4 = v20;
    cat = (std::__shared_weak_count *)v53.__cat_;
    if (!v53.__cat_)
      goto LABEL_38;
    v22 = (unint64_t *)&v53.__cat_[1];
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
LABEL_36:
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))cat->__on_zero_shared)(cat);
      std::__shared_weak_count::__release_weak(cat);
    }
    goto LABEL_38;
  }
  if (!a3)
  {
    *(_QWORD *)__p = operator new(0x38uLL);
    *(_OWORD *)&__p[8] = xmmword_2102DC7C0;
    strcpy(*(char **)__p, "Trying to push CM Data when the CFDataRef is NULL");
    v19 = (char *)operator new(0x70uLL);
    *(_QWORD *)&v49[0] = v19;
    *(_OWORD *)((char *)v49 + 8) = xmmword_2102E3F50;
    strcpy(v19, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
    if (!a4)
      goto LABEL_40;
    v45 = 22;
    *(_QWORD *)&v46 = std::generic_category();
    sub_20EA67538((const std::error_condition *)&v45, (uint64_t)__p, (CFErrorRef *)&v53);
    sub_20EA66CF0((const void **)&v53, a4);
    cat = (std::__shared_weak_count *)v53.__cat_;
    if (!v53.__cat_)
      goto LABEL_38;
    v26 = (unint64_t *)&v53.__cat_[1];
    do
      v23 = __ldaxr(v26);
    while (__stlxr(v23 - 1, v26));
    goto LABEL_36;
  }
  v7 = a2;
  if (a2 > 9)
    goto LABEL_76;
  if (((1 << a2) & 0x33F) != 0)
  {
    memset(v49, 0, sizeof(v49));
    v50 = 733222292;
    kdebug_trace();
    sub_20E8E2770(__p, a3);
    v8 = *(_QWORD *)__p;
    v47 = *(_QWORD *)__p;
    v48 = *(std::__shared_weak_count **)&__p[8];
    if (*(_QWORD *)&__p[8])
    {
      v9 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
      v11 = *(std::__shared_weak_count **)&__p[8];
      if (*(_QWORD *)&__p[8])
      {
        v12 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      v8 = v47;
      v14 = v48;
      if (v48)
      {
        p_shared_owners = (unint64_t *)&v48->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
    }
    if (v8)
    {
      if (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)a1[5] + 88))(a1[5]))
      {
        v32 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 192))(*a1);
        sub_20E90EE08(&v38, (uint64_t)&v47);
        *(_OWORD *)__p = v38;
        v38 = 0uLL;
        __p[16] = v7;
        v44 = 0;
        v41 = 0;
        v42 = 0;
        v40 = 0;
        v43 = 0;
        sub_20E988A44(&v45, (uint64_t)__p);
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v32 + 16))(v32, &v45);
        sub_20E86665C((uint64_t)&v45);
        sub_20E988AE4((uint64_t)__p);
        sub_20E86665C((uint64_t)&v38);
        v24 = 1;
LABEL_64:
        v33 = v48;
        if (v48)
        {
          v34 = (unint64_t *)&v48->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
        kdebug_trace();
        return v24;
      }
      sub_20E8610C0(__p, "Collaborate mapping is disabled on VisionOS.");
      sub_20E8610C0(&v45, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
      sub_20E8EAB0C(a4, 0x16u, (uint64_t)__p);
      if ((SHIBYTE(v46) & 0x80000000) == 0)
      {
LABEL_60:
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        v24 = 0;
        goto LABEL_64;
      }
      v18 = (void *)v45;
    }
    else
    {
      *(_QWORD *)__p = operator new(0x38uLL);
      *(_OWORD *)&__p[8] = xmmword_2102DC7C0;
      strcpy(*(char **)__p, "Trying to push CM Data with an invalid CFDataRef.");
      v27 = (char *)operator new(0x70uLL);
      v45 = (uint64_t)v27;
      v46 = xmmword_2102E3F50;
      strcpy(v27, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
      if (a4)
      {
        v28 = std::generic_category();
        *(_QWORD *)&v53.__val_ = 22;
        v53.__cat_ = v28;
        sub_20EA67538(&v53, (uint64_t)__p, (CFErrorRef *)&v51);
        sub_20EA66CF0(&v51, a4);
        v29 = v52;
        if (v52)
        {
          v30 = (unint64_t *)&v52->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        if ((SHIBYTE(v46) & 0x80000000) == 0)
          goto LABEL_60;
        v27 = (char *)v45;
      }
      v18 = v27;
    }
    operator delete(v18);
    goto LABEL_60;
  }
  if (a2 != 7)
  {
LABEL_76:
    *(_QWORD *)__p = operator new(0x38uLL);
    *(_OWORD *)&__p[8] = xmmword_2102DB420;
    strcpy(*(char **)__p, "Trying to push CM Data with an invalid CM data type");
    v19 = (char *)operator new(0x70uLL);
    *(_QWORD *)&v49[0] = v19;
    *(_OWORD *)((char *)v49 + 8) = xmmword_2102E3F50;
    strcpy(v19, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
    if (!a4)
      goto LABEL_40;
    v45 = 22;
    *(_QWORD *)&v46 = std::generic_category();
    sub_20EA67538((const std::error_condition *)&v45, (uint64_t)__p, (CFErrorRef *)&v53);
    sub_20EA66CF0((const void **)&v53, a4);
    cat = (std::__shared_weak_count *)v53.__cat_;
    if (!v53.__cat_)
      goto LABEL_38;
    v37 = (unint64_t *)&v53.__cat_[1];
    do
      v23 = __ldaxr(v37);
    while (__stlxr(v23 - 1, v37));
    goto LABEL_36;
  }
  *(_QWORD *)__p = operator new(0x28uLL);
  *(_OWORD *)&__p[8] = xmmword_2102DC910;
  strcpy(*(char **)__p, "You cannot push a pose anchor to SLAM");
  v19 = (char *)operator new(0x70uLL);
  *(_QWORD *)&v49[0] = v19;
  *(_OWORD *)((char *)v49 + 8) = xmmword_2102E3F50;
  strcpy(v19, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
  if (!a4)
    goto LABEL_40;
  v45 = 22;
  *(_QWORD *)&v46 = std::generic_category();
  sub_20EA67538((const std::error_condition *)&v45, (uint64_t)__p, (CFErrorRef *)&v53);
  sub_20EA66CF0((const void **)&v53, a4);
  cat = (std::__shared_weak_count *)v53.__cat_;
  if (v53.__cat_)
  {
    v36 = (unint64_t *)&v53.__cat_[1];
    do
      v23 = __ldaxr(v36);
    while (__stlxr(v23 - 1, v36));
    goto LABEL_36;
  }
LABEL_38:
  if (SBYTE7(v49[1]) < 0)
  {
    v19 = *(char **)&v49[0];
    goto LABEL_40;
  }
LABEL_41:
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_20E988934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  void *v31;
  uint64_t v32;

  sub_20E86665C(v32 - 64);
  operator delete(v31);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

char *sub_20E988A44(_QWORD *a1, uint64_t a2)
{
  char *result;

  result = (char *)operator new(0x68uLL);
  *((_QWORD *)result + 1) = 0;
  *((_QWORD *)result + 2) = 0;
  *(_QWORD *)result = &off_24C9B3AD8;
  *(_OWORD *)(result + 24) = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  result[40] = *(_BYTE *)(a2 + 16);
  *((_OWORD *)result + 3) = *(_OWORD *)(a2 + 24);
  *((_QWORD *)result + 8) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  result[72] = 0;
  result[96] = 0;
  if (*(_BYTE *)(a2 + 72))
  {
    *(_OWORD *)(result + 72) = *(_OWORD *)(a2 + 48);
    *((_QWORD *)result + 11) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    result[96] = 1;
  }
  *a1 = result + 24;
  a1[1] = result;
  return result;
}

uint64_t sub_20E988AE4(uint64_t a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  if (*(_BYTE *)(a1 + 72) && *(char *)(a1 + 71) < 0)
  {
    operator delete(*(void **)(a1 + 48));
    v2 = *(void **)(a1 + 24);
    if (!v2)
      goto LABEL_5;
    goto LABEL_4;
  }
  v2 = *(void **)(a1 + 24);
  if (v2)
  {
LABEL_4:
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
LABEL_5:
  v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v3)
    return a1;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return a1;
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

uint64_t sub_20E988B80(_QWORD *a1, uint64_t a2, CFTypeRef *a3)
{
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  const void *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  char *v26;
  void *__p;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  int v31;
  const void *v32;
  std::__shared_weak_count *v33;
  std::error_condition v34;

  v29 = 0u;
  v30 = 0u;
  v31 = 733222292;
  kdebug_trace();
  if (!*a1 || !a1[1] || !a1[2] || !a1[3] || !a1[4] || !a1[5])
  {
    __p = operator new(0x68uLL);
    v28 = xmmword_2102E3F40;
    strcpy((char *)__p, "The session has not been initialized. You need to call CV3DSLAMInitialize before calling this method");
    v6 = (char *)operator new(0x70uLL);
    v26 = v6;
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
    if (a3)
    {
      *(_QWORD *)&v34.__val_ = 22;
      v34.__cat_ = std::generic_category();
      sub_20EA67538(&v34, (uint64_t)&__p, (CFErrorRef *)&v32);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v10 = v32;
      if (v32)
        CFRetain(v32);
      *a3 = v10;
      v7 = v33;
      if (!v33)
        goto LABEL_23;
      p_shared_owners = (unint64_t *)&v33->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (v12)
        goto LABEL_23;
LABEL_22:
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      goto LABEL_23;
    }
    goto LABEL_24;
  }
  if (*(_BYTE *)(a2 + 16) == 7)
  {
    __p = operator new(0x28uLL);
    v28 = xmmword_2102DC910;
    strcpy((char *)__p, "You cannot push a pose anchor to SLAM");
    v6 = (char *)operator new(0x70uLL);
    v26 = v6;
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
    if (a3)
    {
      *(_QWORD *)&v34.__val_ = 22;
      v34.__cat_ = std::generic_category();
      sub_20EA67538(&v34, (uint64_t)&__p, (CFErrorRef *)&v32);
      sub_20EA66CF0(&v32, a3);
      v7 = v33;
      if (!v33)
      {
LABEL_23:
        v6 = v26;
        goto LABEL_24;
      }
      v8 = (unint64_t *)&v33->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      goto LABEL_45;
    }
LABEL_24:
    operator delete(v6);
    if (SHIBYTE(v28) < 0)
      operator delete(__p);
    v13 = 0;
    goto LABEL_27;
  }
  v16 = *(_QWORD *)a2;
  v15 = *(std::__shared_weak_count **)(a2 + 8);
  if (v15)
  {
    v17 = (unint64_t *)&v15->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (!v16)
  {
    __p = operator new(0x38uLL);
    v28 = xmmword_2102DC7C0;
    strcpy((char *)__p, "Trying to push CM Data with an invalid CFDataRef.");
    v6 = (char *)operator new(0x70uLL);
    v26 = v6;
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
    if (!a3)
      goto LABEL_24;
    *(_QWORD *)&v34.__val_ = 22;
    v34.__cat_ = std::generic_category();
    sub_20EA67538(&v34, (uint64_t)&__p, (CFErrorRef *)&v32);
    sub_20EA66CF0(&v32, a3);
    v7 = v33;
    if (!v33)
      goto LABEL_23;
    v25 = (unint64_t *)&v33->__shared_owners_;
    do
      v9 = __ldaxr(v25);
    while (__stlxr(v9 - 1, v25));
LABEL_45:
    if (v9)
      goto LABEL_23;
    goto LABEL_22;
  }
  v20 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 192))(*a1);
  v21 = operator new(0x68uLL);
  v21[1] = 0;
  v21[2] = 0;
  *v21 = &off_24C9B3AD8;
  __p = (void *)sub_20E997620((uint64_t)(v21 + 3), a2);
  *(_QWORD *)&v28 = v21;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v20 + 16))(v20, &__p);
  v22 = (std::__shared_weak_count *)v28;
  if ((_QWORD)v28)
  {
    v23 = (unint64_t *)(v28 + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v13 = 1;
LABEL_27:
  kdebug_trace();
  return v13;
}

void sub_20E989020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;
  uint64_t v19;

  sub_20E86665C(v19 - 80);
  operator delete(v18);
  if (a17 < 0)
  {
    operator delete(__p);
    sub_20E8E69C4((uint64_t)&a18);
    _Unwind_Resume(a1);
  }
  sub_20E8E69C4((uint64_t)&a18);
  _Unwind_Resume(a1);
}

BOOL sub_20E9890E4(uint64_t *a1, uint64_t a2, CFDataRef *a3, CFTypeRef *a4)
{
  uint64_t v6;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  CFTypeRef v12;
  unint64_t *v13;
  char *v14;
  _BOOL8 v15;
  unint64_t *v17;
  void *v18;
  void *v19;
  std::__shared_weak_count *cat;
  unint64_t *v21;
  unint64_t v22;
  void *v23;
  const std::error_category *v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  CFTypeRef cf;
  __int128 v29;
  void *__p;
  __int128 v31;
  const void *v32;
  std::__shared_weak_count *v33;
  std::error_condition v34;
  void *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  char *v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  char v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v6 = *a1;
  if (!v6 || !a1[1] || !a1[2] || !a1[3] || !a1[4] || !a1[5])
  {
    v46 = (char *)operator new(0x68uLL);
    v47 = xmmword_2102E3F40;
    strcpy(v46, "The session has not been initialized. You need to call CV3DSLAMInitialize before calling this method");
    v8 = operator new(0x70uLL);
    v35 = v8;
    v36 = xmmword_2102E3F50;
    strcpy((char *)v8, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
    if (!a4)
      goto LABEL_26;
    __p = (void *)22;
    *(_QWORD *)&v31 = std::generic_category();
    sub_20EA67538((const std::error_condition *)&__p, (uint64_t)&v46, (CFErrorRef *)&cf);
    if (*a4)
      CFRelease(*a4);
    *a4 = 0;
    v12 = cf;
    if (cf)
      CFRetain(cf);
    *a4 = v12;
    v9 = (std::__shared_weak_count *)v29;
    if (!(_QWORD)v29)
      goto LABEL_24;
    v13 = (unint64_t *)(v29 + 8);
    do
      v11 = __ldaxr(v13);
    while (__stlxr(v11 - 1, v13));
    goto LABEL_22;
  }
  if (!a3)
  {
    v46 = (char *)operator new(0x40uLL);
    v47 = xmmword_2102D7440;
    strcpy(v46, "Trying to push create a pose anchor with NULL parameters.");
    v8 = operator new(0x70uLL);
    v35 = v8;
    v36 = xmmword_2102E3F50;
    strcpy((char *)v8, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
    if (!a4)
      goto LABEL_26;
    __p = (void *)22;
    *(_QWORD *)&v31 = std::generic_category();
    sub_20EA67538((const std::error_condition *)&__p, (uint64_t)&v46, (CFErrorRef *)&cf);
    sub_20EA66CF0(&cf, a4);
    v9 = (std::__shared_weak_count *)v29;
    if (!(_QWORD)v29)
      goto LABEL_24;
    v17 = (unint64_t *)(v29 + 8);
    do
      v11 = __ldaxr(v17);
    while (__stlxr(v11 - 1, v17));
    goto LABEL_22;
  }
  if (!*a3)
  {
    (*(void (**)(char **__return_ptr))(*(_QWORD *)v6 + 336))(&v46);
    if (v57)
    {
      v36 = v47;
      v41 = v53;
      v42 = v54;
      v43 = v55;
      v44 = v56;
      v37 = v49;
      v38 = v50;
      v39 = v51;
      v35 = v46;
      v40 = v52;
      v45 = v48;
      cf = 0;
      v29 = 0uLL;
      sub_20E989884((__int128 *)&v35, (uint64_t)&cf, &__p);
      if (SHIBYTE(v29) < 0)
        operator delete((void *)cf);
      v15 = __p != (void *)v31;
      if (__p != (void *)v31)
      {
        *a3 = CFDataCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], (const UInt8 *)__p, v31 - (_QWORD)__p);
        v18 = __p;
        if (!__p)
          return v15;
        goto LABEL_63;
      }
      v35 = operator new(0x38uLL);
      v36 = xmmword_2102DCA50;
      strcpy((char *)v35, "Unable to serialize the anchor to the CFDataRef.");
      v23 = operator new(0x70uLL);
      cf = v23;
      v29 = xmmword_2102E3F50;
      strcpy((char *)v23, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
      if (a4)
      {
        v24 = std::generic_category();
        *(_QWORD *)&v34.__val_ = 22;
        v34.__cat_ = v24;
        sub_20EA67538(&v34, (uint64_t)&v35, (CFErrorRef *)&v32);
        sub_20EA66CF0(&v32, a4);
        v25 = v33;
        if (v33)
        {
          p_shared_owners = (unint64_t *)&v33->__shared_owners_;
          do
            v27 = __ldaxr(p_shared_owners);
          while (__stlxr(v27 - 1, p_shared_owners));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        if ((SHIBYTE(v29) & 0x80000000) == 0)
        {
          if ((SHIBYTE(v36) & 0x80000000) == 0)
            goto LABEL_62;
          goto LABEL_66;
        }
        v23 = (void *)cf;
      }
      operator delete(v23);
      if ((SHIBYTE(v36) & 0x80000000) == 0)
      {
LABEL_62:
        v18 = __p;
        if (!__p)
          return v15;
LABEL_63:
        *(_QWORD *)&v31 = v18;
        operator delete(v18);
        return v15;
      }
LABEL_66:
      operator delete(v35);
      v18 = __p;
      if (!__p)
        return v15;
      goto LABEL_63;
    }
    v35 = operator new(0x48uLL);
    v36 = xmmword_2102E3F80;
    strcpy((char *)v35, "Trying to push create a pose anchor when the anchor is not present.");
    v19 = operator new(0x70uLL);
    __p = v19;
    v31 = xmmword_2102E3F50;
    strcpy((char *)v19, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
    if (a4)
    {
      cf = (CFTypeRef)22;
      *(_QWORD *)&v29 = std::generic_category();
      sub_20EA67538((const std::error_condition *)&cf, (uint64_t)&v35, (CFErrorRef *)&v34);
      sub_20EA66CF0((const void **)&v34, a4);
      cat = (std::__shared_weak_count *)v34.__cat_;
      if (v34.__cat_)
      {
        v21 = (unint64_t *)&v34.__cat_[1];
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))cat->__on_zero_shared)(cat);
          std::__shared_weak_count::__release_weak(cat);
        }
      }
      if ((SHIBYTE(v31) & 0x80000000) == 0)
        goto LABEL_52;
      v19 = __p;
    }
    operator delete(v19);
LABEL_52:
    if ((SHIBYTE(v36) & 0x80000000) == 0)
      return 0;
    v14 = (char *)v35;
    goto LABEL_29;
  }
  v46 = (char *)operator new(0x40uLL);
  v47 = xmmword_2102DBBF0;
  strcpy(v46, "Trying to push create a pose anchor with a non-empty CFDataRef.");
  v8 = operator new(0x70uLL);
  v35 = v8;
  v36 = xmmword_2102E3F50;
  strcpy((char *)v8, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
  if (!a4)
    goto LABEL_26;
  __p = (void *)22;
  *(_QWORD *)&v31 = std::generic_category();
  sub_20EA67538((const std::error_condition *)&__p, (uint64_t)&v46, (CFErrorRef *)&cf);
  sub_20EA66CF0(&cf, a4);
  v9 = (std::__shared_weak_count *)v29;
  if ((_QWORD)v29)
  {
    v10 = (unint64_t *)(v29 + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
LABEL_22:
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
LABEL_24:
  if ((SHIBYTE(v36) & 0x80000000) == 0)
    goto LABEL_27;
  v8 = v35;
LABEL_26:
  operator delete(v8);
LABEL_27:
  if (SHIBYTE(v47) < 0)
  {
    v14 = v46;
LABEL_29:
    operator delete(v14);
  }
  return 0;
}

void sub_20E98977C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;

  sub_20E86665C((uint64_t)&a18);
  operator delete(v27);
  if (a27 < 0)
    operator delete(__p);
  if (a15)
  {
    operator delete(a15);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20E989884@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  size_t v21;
  __int128 *p_dst;
  unint64_t v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  size_t v28;
  char *v29;
  __int128 *v30;
  void *v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const void *v36;
  uint64_t v37;
  const void *v38;
  unint64_t v39;
  void *__p[2];
  __int128 v41;
  int v42;
  uint64_t v43[19];
  char v44;
  __int128 __dst;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  unint64_t v54[3];
  _BYTE v55[9];
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v6 = MEMORY[0x24BEDB870];
  v7 = MEMORY[0x24BEDB870] + 64;
  v8 = (uint64_t *)MEMORY[0x24BEDB800];
  v9 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  v10 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v43[0] = MEMORY[0x24BEDB870] + 64;
  v34 = v9;
  *(uint64_t *)((char *)&v34 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = (std::ios_base *)((char *)&v34 + *(_QWORD *)(v34 - 24));
  std::ios_base::init(v11, &v35);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v34 = v6 + 24;
  v43[0] = v7;
  std::streambuf::basic_streambuf();
  v12 = MEMORY[0x24BEDB848];
  v35 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)__p = 0u;
  v41 = 0u;
  v42 = 16;
  v13 = operator new();
  *(_QWORD *)(v13 + 8) = &v34;
  v14 = v13 + 8;
  *(_BYTE *)(v13 + 16) = 0;
  *(_QWORD *)v13 = &v34;
  *(_BYTE *)(v13 + 40) = 0;
  *(_BYTE *)(v13 + 48) = 0;
  *(_BYTE *)(v13 + 72) = 0;
  *(_QWORD *)(v13 + 88) = 0;
  *(_QWORD *)(v13 + 96) = 0;
  *(_QWORD *)(v13 + 80) = 0;
  v33 = v13;
  v15 = *(unsigned __int8 *)(a2 + 23);
  if ((v15 & 0x80u) != 0)
    v15 = *(_QWORD *)(a2 + 8);
  if (v15 && (sub_20E9F5254((uint64_t)&__dst, v14, a2), *(_BYTE *)(v13 + 40)))
  {
    *(_QWORD *)&__dst = v13 + 16;
    sub_20E9F3D4C((uint64_t **)&__dst, 1u);
  }
  else
  {
    sub_20E9F3FC0((uint64_t)&__dst, v14);
  }
  v16 = a1[7];
  v51 = a1[6];
  v52 = v16;
  v17 = a1[9];
  v53 = a1[8];
  *(_OWORD *)v54 = v17;
  v18 = a1[3];
  v47 = a1[2];
  v48 = v18;
  v19 = a1[5];
  v49 = a1[4];
  v50 = v19;
  v20 = a1[1];
  __dst = *a1;
  v46 = v20;
  if (*(_BYTE *)(v13 + 40))
  {
    *(_QWORD *)v55 = v13 + 16;
    sub_20E9F472C((uint64_t **)v55, __dst);
  }
  else
  {
    sub_20E9F4A34();
  }
  if (*(_BYTE *)(v13 + 40))
  {
    *(_QWORD *)v55 = v13 + 16;
    sub_20E9F3164((uint64_t **)v55, SBYTE8(__dst));
    sub_20E9F3164((uint64_t **)v55, SBYTE9(__dst));
    sub_20E9F3164((uint64_t **)v55, SBYTE10(__dst));
    sub_20E9F3164((uint64_t **)v55, SBYTE11(__dst));
    sub_20E9F3164((uint64_t **)v55, SBYTE12(__dst));
    sub_20E9F3164((uint64_t **)v55, SBYTE13(__dst));
    sub_20E9F3164((uint64_t **)v55, SBYTE14(__dst));
    sub_20E9F3164((uint64_t **)v55, SHIBYTE(__dst));
    sub_20E9F3164((uint64_t **)v55, v46);
    sub_20E9F3164((uint64_t **)v55, SBYTE1(v46));
    sub_20E9F3164((uint64_t **)v55, SBYTE2(v46));
    sub_20E9F3164((uint64_t **)v55, SBYTE3(v46));
    sub_20E9F3164((uint64_t **)v55, SBYTE4(v46));
    sub_20E9F3164((uint64_t **)v55, SBYTE5(v46));
    sub_20E9F3164((uint64_t **)v55, SBYTE6(v46));
    sub_20E9F3164((uint64_t **)v55, SBYTE7(v46));
  }
  else
  {
    if (SBYTE8(__dst) < 0)
    {
      v55[0] = -52;
      v55[1] = BYTE8(__dst);
    }
    else
    {
      v55[0] = BYTE8(__dst);
    }
    std::ostream::write();
    if (SBYTE9(__dst) < 0)
    {
      v55[0] = -52;
      v55[1] = BYTE9(__dst);
    }
    else
    {
      v55[0] = BYTE9(__dst);
    }
    std::ostream::write();
    if (SBYTE10(__dst) < 0)
    {
      v55[0] = -52;
      v55[1] = BYTE10(__dst);
    }
    else
    {
      v55[0] = BYTE10(__dst);
    }
    std::ostream::write();
    if (SBYTE11(__dst) < 0)
    {
      v55[0] = -52;
      v55[1] = BYTE11(__dst);
    }
    else
    {
      v55[0] = BYTE11(__dst);
    }
    std::ostream::write();
    if (SBYTE12(__dst) < 0)
    {
      v55[0] = -52;
      v55[1] = BYTE12(__dst);
    }
    else
    {
      v55[0] = BYTE12(__dst);
    }
    std::ostream::write();
    if (SBYTE13(__dst) < 0)
    {
      v55[0] = -52;
      v55[1] = BYTE13(__dst);
    }
    else
    {
      v55[0] = BYTE13(__dst);
    }
    std::ostream::write();
    if (SBYTE14(__dst) < 0)
    {
      v55[0] = -52;
      v55[1] = BYTE14(__dst);
    }
    else
    {
      v55[0] = BYTE14(__dst);
    }
    std::ostream::write();
    if (SHIBYTE(__dst) < 0)
    {
      v55[0] = -52;
      v55[1] = HIBYTE(__dst);
    }
    else
    {
      v55[0] = HIBYTE(__dst);
    }
    std::ostream::write();
    if ((char)v46 < 0)
    {
      v55[0] = -52;
      v55[1] = v46;
    }
    else
    {
      v55[0] = v46;
    }
    std::ostream::write();
    if (SBYTE1(v46) < 0)
    {
      v55[0] = -52;
      v55[1] = BYTE1(v46);
    }
    else
    {
      v55[0] = BYTE1(v46);
    }
    std::ostream::write();
    if (SBYTE2(v46) < 0)
    {
      v55[0] = -52;
      v55[1] = BYTE2(v46);
    }
    else
    {
      v55[0] = BYTE2(v46);
    }
    std::ostream::write();
    if (SBYTE3(v46) < 0)
    {
      v55[0] = -52;
      v55[1] = BYTE3(v46);
    }
    else
    {
      v55[0] = BYTE3(v46);
    }
    std::ostream::write();
    if (SBYTE4(v46) < 0)
    {
      v55[0] = -52;
      v55[1] = BYTE4(v46);
    }
    else
    {
      v55[0] = BYTE4(v46);
    }
    std::ostream::write();
    if (SBYTE5(v46) < 0)
    {
      v55[0] = -52;
      v55[1] = BYTE5(v46);
    }
    else
    {
      v55[0] = BYTE5(v46);
    }
    std::ostream::write();
    if (SBYTE6(v46) < 0)
    {
      v55[0] = -52;
      v55[1] = BYTE6(v46);
    }
    else
    {
      v55[0] = BYTE6(v46);
    }
    std::ostream::write();
    if (SBYTE7(v46) < 0)
    {
      v55[0] = -52;
      v55[1] = BYTE7(v46);
    }
    else
    {
      v55[0] = BYTE7(v46);
    }
    std::ostream::write();
  }
  if (*(_BYTE *)(v13 + 40))
  {
    *(_QWORD *)v55 = v13 + 16;
    sub_20E9F4C08((uint64_t)&v44, (uint64_t **)v55, (unint64_t *)&v46 + 1);
    sub_20E9F4C08((uint64_t)&v44, (uint64_t **)v55, (unint64_t *)&v47);
    sub_20E9F4C08((uint64_t)&v44, (uint64_t **)v55, (unint64_t *)&v47 + 1);
    sub_20E9F4C08((uint64_t)&v44, (uint64_t **)v55, (unint64_t *)&v48);
    sub_20E9F4C08((uint64_t)&v44, (uint64_t **)v55, (unint64_t *)&v48 + 1);
    sub_20E9F4C08((uint64_t)&v44, (uint64_t **)v55, (unint64_t *)&v49);
    sub_20E9F4C08((uint64_t)&v44, (uint64_t **)v55, (unint64_t *)&v49 + 1);
    sub_20E9F4C08((uint64_t)&v44, (uint64_t **)v55, (unint64_t *)&v50);
    sub_20E9F4C08((uint64_t)&v44, (uint64_t **)v55, (unint64_t *)&v50 + 1);
    sub_20E9F4C08((uint64_t)&v44, (uint64_t **)v55, (unint64_t *)&v51);
    sub_20E9F4C08((uint64_t)&v44, (uint64_t **)v55, (unint64_t *)&v51 + 1);
    sub_20E9F4C08((uint64_t)&v44, (uint64_t **)v55, (unint64_t *)&v52);
    sub_20E9F4C08((uint64_t)&v44, (uint64_t **)v55, (unint64_t *)&v52 + 1);
    sub_20E9F4C08((uint64_t)&v44, (uint64_t **)v55, (unint64_t *)&v53);
    sub_20E9F4C08((uint64_t)&v44, (uint64_t **)v55, (unint64_t *)&v53 + 1);
    sub_20E9F4C08((uint64_t)&v44, (uint64_t **)v55, v54);
  }
  else
  {
    v55[0] = -53;
    *(_QWORD *)&v55[1] = bswap64(*((unint64_t *)&v46 + 1));
    std::ostream::write();
    v55[0] = -53;
    *(_QWORD *)&v55[1] = bswap64(v47);
    std::ostream::write();
    v55[0] = -53;
    *(_QWORD *)&v55[1] = bswap64(*((unint64_t *)&v47 + 1));
    std::ostream::write();
    v55[0] = -53;
    *(_QWORD *)&v55[1] = bswap64(v48);
    std::ostream::write();
    v55[0] = -53;
    *(_QWORD *)&v55[1] = bswap64(*((unint64_t *)&v48 + 1));
    std::ostream::write();
    v55[0] = -53;
    *(_QWORD *)&v55[1] = bswap64(v49);
    std::ostream::write();
    v55[0] = -53;
    *(_QWORD *)&v55[1] = bswap64(*((unint64_t *)&v49 + 1));
    std::ostream::write();
    v55[0] = -53;
    *(_QWORD *)&v55[1] = bswap64(v50);
    std::ostream::write();
    v55[0] = -53;
    *(_QWORD *)&v55[1] = bswap64(*((unint64_t *)&v50 + 1));
    std::ostream::write();
    v55[0] = -53;
    *(_QWORD *)&v55[1] = bswap64(v51);
    std::ostream::write();
    v55[0] = -53;
    *(_QWORD *)&v55[1] = bswap64(*((unint64_t *)&v51 + 1));
    std::ostream::write();
    v55[0] = -53;
    *(_QWORD *)&v55[1] = bswap64(v52);
    std::ostream::write();
    v55[0] = -53;
    *(_QWORD *)&v55[1] = bswap64(*((unint64_t *)&v52 + 1));
    std::ostream::write();
    v55[0] = -53;
    *(_QWORD *)&v55[1] = bswap64(v53);
    std::ostream::write();
    v55[0] = -53;
    *(_QWORD *)&v55[1] = bswap64(*((unint64_t *)&v53 + 1));
    std::ostream::write();
    v55[0] = -53;
    *(_QWORD *)&v55[1] = bswap64(v54[0]);
    std::ostream::write();
  }
  if (*(_BYTE *)(v13 + 40))
  {
    *(_QWORD *)v55 = v13 + 16;
    sub_20E9F4C08((uint64_t)&v44, (uint64_t **)v55, &v54[1]);
  }
  else
  {
    v55[0] = -53;
    *(_QWORD *)&v55[1] = bswap64(v54[1]);
    std::ostream::write();
  }
  if ((v42 & 0x10) != 0)
  {
    v23 = *((_QWORD *)&v41 + 1);
    if (*((_QWORD *)&v41 + 1) < v39)
    {
      *((_QWORD *)&v41 + 1) = v39;
      v23 = v39;
    }
    v24 = v38;
    v21 = v23 - (_QWORD)v38;
    if (v23 - (unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_103;
  }
  else
  {
    if ((v42 & 8) == 0)
    {
      v21 = 0;
      BYTE7(v46) = 0;
      p_dst = &__dst;
      goto LABEL_80;
    }
    v24 = v36;
    v21 = v37 - (_QWORD)v36;
    if ((unint64_t)(v37 - (_QWORD)v36) >= 0x7FFFFFFFFFFFFFF8)
LABEL_103:
      sub_20E860B7C();
  }
  if (v21 >= 0x17)
  {
    v25 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17)
      v25 = v21 | 7;
    v26 = v25 + 1;
    p_dst = (__int128 *)operator new(v25 + 1);
    *((_QWORD *)&__dst + 1) = v21;
    *(_QWORD *)&v46 = v26 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_79;
  }
  BYTE7(v46) = v21;
  p_dst = &__dst;
  if (v21)
LABEL_79:
    memmove(p_dst, v24, v21);
LABEL_80:
  *((_BYTE *)p_dst + v21) = 0;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v27 = SBYTE7(v46);
  if ((SBYTE7(v46) & 0x80u) == 0)
    v28 = BYTE7(v46);
  else
    v28 = *((_QWORD *)&__dst + 1);
  if (v28)
  {
    if ((v28 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v29 = (char *)operator new(v28);
    bzero(v29, v28);
    *a3 = v29;
    a3[1] = &v29[v28];
    a3[2] = &v29[v28];
    if (v27 >= 0)
      v30 = &__dst;
    else
      v30 = (__int128 *)__dst;
    memmove(v29, v30, v28);
  }
  if (v27 < 0)
    operator delete((void *)__dst);
  if (v33)
  {
    v31 = *(void **)(v33 + 80);
    if (v31)
    {
      *(_QWORD *)(v33 + 88) = v31;
      operator delete(v31);
    }
    if (*(_BYTE *)(v33 + 72))
      free(*(void **)(v33 + 56));
    if (*(_BYTE *)(v33 + 40))
      free(*(void **)(v33 + 24));
    MEMORY[0x212BC6398](v33, 0x1030C408C1A3048);
  }
  v34 = *v8;
  *(uint64_t *)((char *)&v34 + *(_QWORD *)(v34 - 24)) = v8[3];
  v35 = v12 + 16;
  if (SBYTE7(v41) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x212BC6290](v43);
}

void sub_20E98A498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E9977BC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E98A4AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x212BC6290](v1);
  _Unwind_Resume(a1);
}

BOOL sub_20E98A548(uint64_t *a1, uint64_t a2, _OWORD *a3, void **a4, uint64_t a5, uint64_t a6, CFTypeRef *a7)
{
  uint64_t v9;
  _BOOL8 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  int64x2_t v18;
  int64x2_t v19;
  void *v20;
  const void *v21;
  std::__shared_weak_count *cat;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t *v30;
  char *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  uint64_t v35;
  __int128 v36;
  void *v37[4];
  const void *v38;
  std::__shared_weak_count *v39;
  std::error_condition cf;
  void *__p[4];
  int64x2_t v42;
  uint64_t v43;
  int64x2_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  char v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v9 = *a1;
  if (!v9 || !a1[1] || !a1[2] || !a1[3] || !a1[4] || !a1[5])
  {
    __p[0] = operator new(0x68uLL);
    *(_OWORD *)&__p[1] = xmmword_2102E3F40;
    strcpy((char *)__p[0], "The session has not been initialized. You need to call CV3DSLAMInitialize before calling this method");
    v20 = operator new(0x70uLL);
    v37[0] = v20;
    *(_OWORD *)&v37[1] = xmmword_2102E3F50;
    strcpy((char *)v20, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
    if (!a7)
    {
LABEL_24:
      operator delete(v20);
      goto LABEL_25;
    }
    v35 = 22;
    *(_QWORD *)&v36 = std::generic_category();
    sub_20EA67538((const std::error_condition *)&v35, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a7)
      CFRelease(*a7);
    *a7 = 0;
    v21 = *(const void **)&cf.__val_;
    if (*(_QWORD *)&cf.__val_)
      CFRetain(*(CFTypeRef *)&cf.__val_);
    *a7 = v21;
    cat = (std::__shared_weak_count *)cf.__cat_;
    if (cf.__cat_)
    {
      v23 = (unint64_t *)&cf.__cat_[1];
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))cat->__on_zero_shared)(cat);
        std::__shared_weak_count::__release_weak(cat);
        if ((SHIBYTE(v37[2]) & 0x80000000) == 0)
          goto LABEL_25;
        goto LABEL_23;
      }
    }
    goto LABEL_22;
  }
  if (!a5 || !a6)
  {
    __p[0] = operator new(0x40uLL);
    *(_OWORD *)&__p[1] = xmmword_2102DBBD0;
    strcpy((char *)__p[0], "Trying to get pose anchor metadata with NULL parameters.");
    v20 = operator new(0x70uLL);
    v37[0] = v20;
    *(_OWORD *)&v37[1] = xmmword_2102E3F50;
    strcpy((char *)v20, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
    if (!a7)
      goto LABEL_24;
    v35 = 22;
    *(_QWORD *)&v36 = std::generic_category();
    sub_20EA67538((const std::error_condition *)&v35, (uint64_t)__p, (CFErrorRef *)&cf);
    sub_20EA66CF0((const void **)&cf, a7);
    v26 = (std::__shared_weak_count *)cf.__cat_;
    if (!cf.__cat_)
      goto LABEL_22;
    v27 = (unint64_t *)&cf.__cat_[1];
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
LABEL_45:
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
    goto LABEL_22;
  }
  if (!a4)
  {
    HIBYTE(__p[2]) = 21;
    strcpy((char *)__p, "Timestamp is nullptr.");
    v20 = operator new(0x70uLL);
    v37[0] = v20;
    *(_OWORD *)&v37[1] = xmmword_2102E3F50;
    strcpy((char *)v20, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
    if (!a7)
      goto LABEL_24;
    v35 = 22;
    *(_QWORD *)&v36 = std::generic_category();
    sub_20EA67538((const std::error_condition *)&v35, (uint64_t)__p, (CFErrorRef *)&cf);
    sub_20EA66CF0((const void **)&cf, a7);
    v26 = (std::__shared_weak_count *)cf.__cat_;
    if (!cf.__cat_)
      goto LABEL_22;
    v29 = (unint64_t *)&cf.__cat_[1];
    do
      v28 = __ldaxr(v29);
    while (__stlxr(v28 - 1, v29));
    goto LABEL_45;
  }
  if (a3)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v9 + 344))(__p);
    v14 = v51 != 0;
    if (v51)
    {
      *a3 = *(_OWORD *)&__p[1];
      *a4 = __p[3];
      *(_QWORD *)&v15 = v43;
      v16 = v48;
      v17 = v47;
      v18 = vzip1q_s64(v42, v44);
      v19 = vzip2q_s64(v42, v44);
      *((_QWORD *)&v15 + 1) = v45;
      *(_QWORD *)(a5 + 16) = v46;
      *(int64x2_t *)a5 = v18;
      *(_QWORD *)(a5 + 40) = v17;
      *(int64x2_t *)(a5 + 24) = v19;
      *(_QWORD *)(a5 + 64) = v16;
      *(_OWORD *)(a5 + 48) = v15;
      v19.i64[0] = v50;
      *(_OWORD *)a6 = v49;
      *(_QWORD *)(a6 + 16) = v19.i64[0];
      return v14;
    }
    HIBYTE(v37[2]) = 21;
    strcpy((char *)v37, "CM Map not available.");
    v31 = (char *)operator new(0x70uLL);
    v35 = (uint64_t)v31;
    v36 = xmmword_2102E3F50;
    strcpy(v31, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
    if (a7)
    {
      *(_QWORD *)&cf.__val_ = 102;
      cf.__cat_ = std::generic_category();
      sub_20EA67538(&cf, (uint64_t)v37, (CFErrorRef *)&v38);
      sub_20EA66CF0(&v38, a7);
      v32 = v39;
      if (v39)
      {
        p_shared_owners = (unint64_t *)&v39->__shared_owners_;
        do
          v34 = __ldaxr(p_shared_owners);
        while (__stlxr(v34 - 1, p_shared_owners));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      if ((SHIBYTE(v36) & 0x80000000) == 0)
      {
        if ((SHIBYTE(v37[2]) & 0x80000000) == 0)
          return v14;
LABEL_58:
        operator delete(v37[0]);
        return v14;
      }
      v31 = (char *)v35;
    }
    operator delete(v31);
    if ((SHIBYTE(v37[2]) & 0x80000000) == 0)
      return v14;
    goto LABEL_58;
  }
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "Anchor ID is nullptr.");
  v20 = operator new(0x70uLL);
  v37[0] = v20;
  *(_OWORD *)&v37[1] = xmmword_2102E3F50;
  strcpy((char *)v20, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
  if (!a7)
    goto LABEL_24;
  v35 = 22;
  *(_QWORD *)&v36 = std::generic_category();
  sub_20EA67538((const std::error_condition *)&v35, (uint64_t)__p, (CFErrorRef *)&cf);
  sub_20EA66CF0((const void **)&cf, a7);
  v26 = (std::__shared_weak_count *)cf.__cat_;
  if (cf.__cat_)
  {
    v30 = (unint64_t *)&cf.__cat_[1];
    do
      v28 = __ldaxr(v30);
    while (__stlxr(v28 - 1, v30));
    goto LABEL_45;
  }
LABEL_22:
  if (SHIBYTE(v37[2]) < 0)
  {
LABEL_23:
    v20 = v37[0];
    goto LABEL_24;
  }
LABEL_25:
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_20E98AB5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;

  sub_20E86665C((uint64_t)&a20);
  operator delete(v29);
  if (a18 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20E98ABFC(uint64_t *a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v5;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  const std::error_category *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  char *v15;
  CFTypeRef v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  const std::error_category *v21;
  CFTypeRef v22;
  unint64_t *v23;
  char *v24;
  void *__p;
  __int128 v26;
  CFTypeRef cf;
  std::__shared_weak_count *v28;
  std::error_condition v29;

  v5 = *a1;
  if (v5 && a1[1] && a1[2] && a1[3] && a1[4] && a1[5])
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v5 + 232))(&__p);
    v7 = __p;
    v8 = (_QWORD *)v26;
    if (__p != (void *)v26)
    {
      do
      {
        (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v7 + 16))(*v7, a2);
        ++v7;
      }
      while (v7 != v8);
      v7 = __p;
    }
    if (v7)
    {
      *(_QWORD *)&v26 = v7;
      operator delete(v7);
    }
    if (*a1 && a1[1] && a1[2] && a1[3] && a1[4] && (v9 = a1[5]) != 0)
    {
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 88))(v9))
        return 1;
      __p = operator new(0x20uLL);
      v26 = xmmword_2102DB470;
      strcpy((char *)__p, "User anchors are not enabled");
      v10 = (char *)operator new(0x70uLL);
      v24 = v10;
      strcpy(v10, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
      if (!a3)
      {
LABEL_48:
        operator delete(v10);
        if (SHIBYTE(v26) < 0)
          operator delete(__p);
        return 1;
      }
      v11 = std::generic_category();
      *(_QWORD *)&v29.__val_ = 22;
      v29.__cat_ = v11;
      sub_20EA67538(&v29, (uint64_t)&__p, (CFErrorRef *)&cf);
      sub_20EA66CF0(&cf, a3);
      v12 = v28;
      if (!v28)
      {
LABEL_47:
        v10 = v24;
        goto LABEL_48;
      }
      p_shared_owners = (unint64_t *)&v28->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
    }
    else
    {
      __p = operator new(0x68uLL);
      v26 = xmmword_2102E3F40;
      strcpy((char *)__p, "The session has not been initialized. You need to call CV3DSLAMInitialize before calling this method");
      v10 = (char *)operator new(0x70uLL);
      v24 = v10;
      strcpy(v10, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
      if (!a3)
        goto LABEL_48;
      v21 = std::generic_category();
      *(_QWORD *)&v29.__val_ = 22;
      v29.__cat_ = v21;
      sub_20EA67538(&v29, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v22 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v22;
      v12 = v28;
      if (!v28)
        goto LABEL_47;
      v23 = (unint64_t *)&v28->__shared_owners_;
      do
        v14 = __ldaxr(v23);
      while (__stlxr(v14 - 1, v23));
    }
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    goto LABEL_47;
  }
  __p = operator new(0x68uLL);
  v26 = xmmword_2102E3F40;
  strcpy((char *)__p, "The session has not been initialized. You need to call CV3DSLAMInitialize before calling this method");
  v15 = (char *)operator new(0x70uLL);
  strcpy(v15, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
  if (a3)
  {
    *(_QWORD *)&v29.__val_ = 22;
    v29.__cat_ = std::generic_category();
    sub_20EA67538(&v29, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v16 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v16;
    v17 = v28;
    if (v28)
    {
      v18 = (unint64_t *)&v28->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  operator delete(v15);
  if (SHIBYTE(v26) < 0)
    operator delete(__p);
  return 0;
}

void sub_20E98B064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  sub_20E86665C((uint64_t)&a18);
  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL sub_20E98B0DC(uint64_t *a1, unsigned int a2, CFTypeRef *a3)
{
  uint64_t v5;
  _BOOL8 v6;
  __int16 v7;
  uint64_t v8;
  char *v10;
  CFTypeRef v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  __int16 v19;
  char *v20;
  __int128 v21;
  void *__p;
  __int128 v23;
  CFTypeRef cf;
  std::__shared_weak_count *v25;
  std::error_condition v26;

  v5 = *a1;
  if (v5 && a1[1] && a1[2] && a1[3] && a1[4] && a1[5])
  {
    v6 = a2 < 3;
    if (a2 >= 3)
      v7 = 0;
    else
      v7 = a2;
    v19 = v7 | (v6 << 8);
    if (a2 < 3)
    {
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 224))(v5);
      (*(void (**)(uint64_t, __int16 *))(*(_QWORD *)v8 + 16))(v8, &v19);
      return v6;
    }
    __p = operator new(0x38uLL);
    v23 = xmmword_2102DCA50;
    strcpy((char *)__p, "CV3DSLAMLineEnablementPolicy is an invalid valid");
    v15 = (char *)operator new(0x70uLL);
    v20 = v15;
    v21 = xmmword_2102E3F50;
    strcpy(v15, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
    if (a3)
    {
      *(_QWORD *)&v26.__val_ = 22;
      v26.__cat_ = std::generic_category();
      sub_20EA67538(&v26, (uint64_t)&__p, (CFErrorRef *)&cf);
      sub_20EA66CF0(&cf, a3);
      v16 = v25;
      if (v25)
      {
        p_shared_owners = (unint64_t *)&v25->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      if ((SHIBYTE(v21) & 0x80000000) == 0)
      {
        if ((SHIBYTE(v23) & 0x80000000) == 0)
          return v6;
        goto LABEL_40;
      }
      v15 = v20;
    }
    operator delete(v15);
    if ((SHIBYTE(v23) & 0x80000000) == 0)
      return v6;
LABEL_40:
    operator delete(__p);
    return v6;
  }
  __p = operator new(0x68uLL);
  v23 = xmmword_2102E3F40;
  strcpy((char *)__p, "The session has not been initialized. You need to call CV3DSLAMInitialize before calling this method");
  v10 = (char *)operator new(0x70uLL);
  v20 = v10;
  v21 = xmmword_2102E3F50;
  strcpy(v10, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
  if (!a3)
    goto LABEL_23;
  *(_QWORD *)&v26.__val_ = 22;
  v26.__cat_ = std::generic_category();
  sub_20EA67538(&v26, (uint64_t)&__p, (CFErrorRef *)&cf);
  if (*a3)
    CFRelease(*a3);
  *a3 = 0;
  v11 = cf;
  if (cf)
    CFRetain(cf);
  *a3 = v11;
  v12 = v25;
  if (v25)
  {
    v13 = (unint64_t *)&v25->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
      if ((SHIBYTE(v21) & 0x80000000) == 0)
        goto LABEL_24;
      goto LABEL_22;
    }
  }
  if (SHIBYTE(v21) < 0)
  {
LABEL_22:
    v10 = v20;
LABEL_23:
    operator delete(v10);
  }
LABEL_24:
  if (SHIBYTE(v23) < 0)
    operator delete(__p);
  return 0;
}

void sub_20E98B418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  void *v20;

  sub_20E86665C((uint64_t)&a20);
  operator delete(v20);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20E98B478(_QWORD *a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  char *v17;
  CFTypeRef v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  char *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  void *__p;
  __int128 v27;
  CFTypeRef cf;
  std::__shared_weak_count *v29;
  std::error_condition v30;

  if (!*a1 || !a1[1] || !a1[2] || (v4 = a1[3]) == 0 || !a1[4] || !a1[5])
  {
    __p = operator new(0x68uLL);
    v27 = xmmword_2102E3F40;
    strcpy((char *)__p, "The session has not been initialized. You need to call CV3DSLAMInitialize before calling this method");
    v17 = (char *)operator new(0x70uLL);
    strcpy(v17, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
    if (a3)
    {
      *(_QWORD *)&v30.__val_ = 22;
      v30.__cat_ = std::generic_category();
      sub_20EA67538(&v30, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v18 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v18;
      v19 = v29;
      if (v29)
      {
        p_shared_owners = (unint64_t *)&v29->__shared_owners_;
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
    }
    operator delete(v17);
    if (SHIBYTE(v27) < 0)
      goto LABEL_35;
    return 0;
  }
  if (!a2)
  {
    __p = operator new(0x28uLL);
    v27 = xmmword_2102DC910;
    strcpy((char *)__p, "Semantics calibration can not be null");
    v22 = (char *)operator new(0x70uLL);
    strcpy(v22, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
    if (a3)
    {
      *(_QWORD *)&v30.__val_ = 22;
      v30.__cat_ = std::generic_category();
      sub_20EA67538(&v30, (uint64_t)&__p, (CFErrorRef *)&cf);
      sub_20EA66CF0(&cf, a3);
      v23 = v29;
      if (v29)
      {
        v24 = (unint64_t *)&v29->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
    }
    operator delete(v22);
    if (SHIBYTE(v27) < 0)
    {
LABEL_35:
      operator delete(__p);
      return 0;
    }
    return 0;
  }
  v6 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 160);
  v7 = operator new(0xA0uLL);
  v7[1] = 0;
  v7[2] = 0;
  *v7 = &off_24C9B3B28;
  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(_OWORD *)(a2 + 128);
  *((_OWORD *)v7 + 8) = *(_OWORD *)(a2 + 112);
  *((_OWORD *)v7 + 9) = v9;
  v10 = *(_OWORD *)(a2 + 96);
  *((_OWORD *)v7 + 6) = *(_OWORD *)(a2 + 80);
  *((_OWORD *)v7 + 7) = v10;
  v11 = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v7 + 2) = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v7 + 3) = v11;
  v12 = *(_OWORD *)(a2 + 64);
  *((_OWORD *)v7 + 4) = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v7 + 5) = v12;
  *(_QWORD *)&v27 = v7;
  v7[3] = v8;
  __p = v7 + 3;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)(v6 + 424) + 16))(v6 + 424, &__p);
  v13 = (std::__shared_weak_count *)v27;
  if ((_QWORD)v27)
  {
    v14 = (unint64_t *)(v27 + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return 1;
}

void sub_20E98B81C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  sub_20E86665C((uint64_t)&a18);
  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20E98B878(uint64_t *a1, CFTypeRef *a2)
{
  uint64_t v4;
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  v4 = *a1;
  if (v4 && a1[1] && a1[2] && a1[3] && a1[4] && a1[5])
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 96))(v4);
    return 1;
  }
  else
  {
    __p = operator new(0x68uLL);
    v12 = xmmword_2102E3F40;
    strcpy((char *)__p, "The session has not been initialized. You need to call CV3DSLAMInitialize before calling this method");
    v6 = (char *)operator new(0x70uLL);
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
    if (a2)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_20EA67538(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v7 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v7;
      v8 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    operator delete(v6);
    if (SHIBYTE(v12) < 0)
      operator delete(__p);
    return 0;
  }
}

void sub_20E98BA5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20E98BA98(uint64_t *a1, CFTypeRef *a2)
{
  uint64_t v4;
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  v4 = *a1;
  if (v4 && a1[1] && a1[2] && a1[3] && a1[4] && a1[5])
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
    return 1;
  }
  else
  {
    __p = operator new(0x68uLL);
    v12 = xmmword_2102E3F40;
    strcpy((char *)__p, "The session has not been initialized. You need to call CV3DSLAMInitialize before calling this method");
    v6 = (char *)operator new(0x70uLL);
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
    if (a2)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_20EA67538(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v7 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v7;
      v8 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    operator delete(v6);
    if (SHIBYTE(v12) < 0)
      operator delete(__p);
    return 0;
  }
}

void sub_20E98BC7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20E98BCB8(uint64_t *a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v5;
  char *v7;
  CFTypeRef v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  __int128 v13;
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  v5 = *a1;
  if (v5 && a1[1] && a1[2] && a1[3] && a1[4] && a1[5])
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 112))(v5);
    return 1;
  }
  else
  {
    __p = operator new(0x68uLL);
    v13 = xmmword_2102E3F40;
    strcpy((char *)__p, "The session has not been initialized. You need to call CV3DSLAMInitialize before calling this method");
    v7 = (char *)operator new(0x70uLL);
    strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
    if (a3)
    {
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_20EA67538(&v16, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v8 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v8;
      v9 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    operator delete(v7);
    if (SHIBYTE(v13) < 0)
      operator delete(__p);
    return 0;
  }
}

void sub_20E98BE9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20E98BED8(uint64_t *a1, CFTypeRef *a2)
{
  uint64_t v4;
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  v4 = *a1;
  if (v4 && a1[1] && a1[2] && a1[3] && a1[4] && a1[5])
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 120))(v4);
    return 1;
  }
  else
  {
    __p = operator new(0x68uLL);
    v12 = xmmword_2102E3F40;
    strcpy((char *)__p, "The session has not been initialized. You need to call CV3DSLAMInitialize before calling this method");
    v6 = (char *)operator new(0x70uLL);
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
    if (a2)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_20EA67538(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v7 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v7;
      v8 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    operator delete(v6);
    if (SHIBYTE(v12) < 0)
      operator delete(__p);
    return 0;
  }
}

void sub_20E98C0BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20E98C0F8(uint64_t *a1, char a2, CFTypeRef *a3)
{
  uint64_t v5;
  uint64_t v7;
  char *v9;
  CFTypeRef v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p;
  __int128 v15;
  CFTypeRef cf;
  std::__shared_weak_count *v17;
  std::error_condition v18;

  v5 = *a1;
  if (v5 && a1[1] && a1[2] && a1[3] && a1[4] && a1[5])
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 216))(v5);
    LOBYTE(__p) = a2;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v7 + 16))(v7, &__p);
    return 1;
  }
  else
  {
    __p = operator new(0x68uLL);
    v15 = xmmword_2102E3F40;
    strcpy((char *)__p, "The session has not been initialized. You need to call CV3DSLAMInitialize before calling this method");
    v9 = (char *)operator new(0x70uLL);
    strcpy(v9, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
    if (a3)
    {
      *(_QWORD *)&v18.__val_ = 22;
      v18.__cat_ = std::generic_category();
      sub_20EA67538(&v18, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v10 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v10;
      v11 = v17;
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
    operator delete(v9);
    if (SHIBYTE(v15) < 0)
      operator delete(__p);
    return 0;
  }
}

void sub_20E98C2F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20E98C330(uint64_t *a1, __CFData *a2, __CFDictionary *a3, __CFData *a4, CFTypeRef *a5)
{
  uint64_t v7;
  char *v11;
  char *v12;
  const void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _BYTE *v18;
  _BYTE *v19;
  size_t v20;
  char *v21;
  const void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *cat;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  char *v32;
  void *v33;
  char *v34;
  void *v35;
  unint64_t *v36;
  unint64_t *v37;
  _BYTE v38[24];
  void *v39;
  _BYTE *v40;
  char *v41;
  void *__p;
  __int128 v43;
  void *v44;
  void *v45;
  void *v46;
  _BYTE *v47;
  char v48;
  const void *v49;
  std::__shared_weak_count *v50;
  std::error_condition v51;

  v7 = *a1;
  if (!v7 || !a1[1] || !a1[2] || !a1[3] || !a1[4] || !a1[5])
  {
    __p = operator new(0x68uLL);
    v43 = xmmword_2102E3F40;
    strcpy((char *)__p, "The session has not been initialized. You need to call CV3DSLAMInitialize before calling this method");
    v12 = (char *)operator new(0x70uLL);
    *(_QWORD *)v38 = v12;
    *(_OWORD *)&v38[8] = xmmword_2102E3F50;
    strcpy(v12, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
    if (!a5)
    {
LABEL_23:
      operator delete(v12);
      goto LABEL_24;
    }
    *(_QWORD *)&v51.__val_ = 22;
    v51.__cat_ = std::generic_category();
    sub_20EA67538(&v51, (uint64_t)&__p, (CFErrorRef *)&v49);
    if (*a5)
      CFRelease(*a5);
    *a5 = 0;
    v13 = v49;
    if (v49)
      CFRetain(v49);
    *a5 = v13;
    v14 = v50;
    if (v50)
    {
      p_shared_owners = (unint64_t *)&v50->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        if ((v38[23] & 0x80000000) == 0)
          goto LABEL_24;
        goto LABEL_22;
      }
    }
    goto LABEL_21;
  }
  if (!a2)
  {
    __p = operator new(0x30uLL);
    v43 = xmmword_2102DC8E0;
    strcpy((char *)__p, "The optimized map pointer must not be NULL.");
    v12 = (char *)operator new(0x70uLL);
    *(_QWORD *)v38 = v12;
    *(_OWORD *)&v38[8] = xmmword_2102E3F50;
    strcpy(v12, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
    if (!a5)
      goto LABEL_23;
    *(_QWORD *)&v51.__val_ = 22;
    v51.__cat_ = std::generic_category();
    sub_20EA67538(&v51, (uint64_t)&__p, (CFErrorRef *)&v49);
    sub_20EA66CF0(&v49, a5);
    v29 = v50;
    if (!v50)
      goto LABEL_21;
    v30 = (unint64_t *)&v50->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
LABEL_77:
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
    goto LABEL_21;
  }
  if (!a3)
  {
    __p = operator new(0x38uLL);
    v43 = xmmword_2102DC7C0;
    strcpy((char *)__p, "The pointer to the trajectories must not be NULL.");
    v12 = (char *)operator new(0x70uLL);
    *(_QWORD *)v38 = v12;
    *(_OWORD *)&v38[8] = xmmword_2102E3F50;
    strcpy(v12, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
    if (!a5)
      goto LABEL_23;
    *(_QWORD *)&v51.__val_ = 22;
    v51.__cat_ = std::generic_category();
    sub_20EA67538(&v51, (uint64_t)&__p, (CFErrorRef *)&v49);
    sub_20EA66CF0(&v49, a5);
    v29 = v50;
    if (!v50)
      goto LABEL_21;
    v36 = (unint64_t *)&v50->__shared_owners_;
    do
      v31 = __ldaxr(v36);
    while (__stlxr(v31 - 1, v36));
    goto LABEL_77;
  }
  if (a4)
  {
    (*(void (**)(void **__return_ptr, uint64_t, char *))(*(_QWORD *)v7 + 368))(&__p, v7, &v48);
    CFDataAppendBytes(a2, (const UInt8 *)__p, v43 - (_QWORD)__p);
    CFDataAppendBytes(a4, (const UInt8 *)v46, v47 - (_BYTE *)v46);
    v11 = (char *)v45;
    if (v45)
    {
      do
      {
        if (v11[39] < 0)
        {
          sub_20E860C04(v38, *((void **)v11 + 2), *((_QWORD *)v11 + 3));
        }
        else
        {
          *(_OWORD *)v38 = *((_OWORD *)v11 + 1);
          *(_QWORD *)&v38[16] = *((_QWORD *)v11 + 4);
        }
        v40 = 0;
        v41 = 0;
        v39 = 0;
        v19 = (_BYTE *)*((_QWORD *)v11 + 5);
        v18 = (_BYTE *)*((_QWORD *)v11 + 6);
        v20 = v18 - v19;
        if (v18 != v19)
        {
          if ((v20 & 0x8000000000000000) != 0)
            sub_20E867F44();
          v39 = operator new(v18 - v19);
          v40 = v39;
          v21 = (char *)v39 + v20;
          v41 = (char *)v39 + v20;
          memcpy(v39, v19, v20);
          v40 = v21;
        }
        sub_20EA5E4B8((uint64_t)v38, (CFStringRef *)&v51);
        v22 = *(const void **)&v51.__val_;
        sub_20EA5EE78((const UInt8 *)v39, v40 - (_BYTE *)v39, &v49);
        CFDictionaryAddValue(a3, v22, v49);
        v23 = v50;
        if (v50)
        {
          v24 = (unint64_t *)&v50->__shared_owners_;
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        cat = (std::__shared_weak_count *)v51.__cat_;
        if (v51.__cat_)
        {
          v27 = (unint64_t *)&v51.__cat_[1];
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))cat->__on_zero_shared)(cat);
            std::__shared_weak_count::__release_weak(cat);
          }
        }
        if (v39)
        {
          v40 = v39;
          operator delete(v39);
        }
        if ((v38[23] & 0x80000000) != 0)
          operator delete(*(void **)v38);
        v11 = *(char **)v11;
      }
      while (v11);
    }
    if (v46)
    {
      v47 = v46;
      operator delete(v46);
    }
    v32 = (char *)v45;
    if (v45)
    {
      do
      {
        v34 = *(char **)v32;
        v35 = (void *)*((_QWORD *)v32 + 5);
        if (v35)
        {
          *((_QWORD *)v32 + 6) = v35;
          operator delete(v35);
        }
        if (v32[39] < 0)
          operator delete(*((void **)v32 + 2));
        operator delete(v32);
        v32 = v34;
      }
      while (v34);
    }
    v33 = v44;
    v44 = 0;
    if (v33)
      operator delete(v33);
    if (__p)
    {
      *(_QWORD *)&v43 = __p;
      operator delete(__p);
    }
    return 1;
  }
  __p = operator new(0x30uLL);
  v43 = xmmword_2102DC8D0;
  strcpy((char *)__p, "The IMU buffer pointer must not be NULL.");
  v12 = (char *)operator new(0x70uLL);
  *(_QWORD *)v38 = v12;
  *(_OWORD *)&v38[8] = xmmword_2102E3F50;
  strcpy(v12, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
  if (!a5)
    goto LABEL_23;
  *(_QWORD *)&v51.__val_ = 22;
  v51.__cat_ = std::generic_category();
  sub_20EA67538(&v51, (uint64_t)&__p, (CFErrorRef *)&v49);
  sub_20EA66CF0(&v49, a5);
  v29 = v50;
  if (v50)
  {
    v37 = (unint64_t *)&v50->__shared_owners_;
    do
      v31 = __ldaxr(v37);
    while (__stlxr(v31 - 1, v37));
    goto LABEL_77;
  }
LABEL_21:
  if ((v38[23] & 0x80000000) != 0)
  {
LABEL_22:
    v12 = *(char **)v38;
    goto LABEL_23;
  }
LABEL_24:
  if (SHIBYTE(v43) < 0)
    operator delete(__p);
  return 0;
}

void sub_20E98C99C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  uint64_t v24;

  sub_20E86665C(v24 - 80);
  operator delete(v23);
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20E98CA78(uint64_t a1)
{
  void *v2;
  char *v3;
  void *v4;
  void *v5;
  char *v7;
  void *v8;

  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v2);
  }
  v3 = *(char **)(a1 + 40);
  if (v3)
  {
    do
    {
      v7 = *(char **)v3;
      v8 = (void *)*((_QWORD *)v3 + 5);
      if (v8)
      {
        *((_QWORD *)v3 + 6) = v8;
        operator delete(v8);
      }
      if (v3[39] < 0)
        operator delete(*((void **)v3 + 2));
      operator delete(v3);
      v3 = v7;
    }
    while (v7);
  }
  v4 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v4)
    operator delete(v4);
  v5 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v5;
    operator delete(v5);
  }
  return a1;
}

uint64_t sub_20E98CB10(uint64_t *a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t v6;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  CFTypeRef v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  __int128 v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  _QWORD *v36;
  uint64_t *v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t i;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  void *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t j;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  void *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  char *v76;
  void *__p;
  __int128 v78;
  CFTypeRef cf;
  std::__shared_weak_count *v80;
  std::error_condition v81;

  v6 = *a1;
  if (v6 && a1[1] && a1[2] && a1[3] && a1[4] && a1[5])
  {
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 312))(&__p, v6, a3);
    v8 = __p;
    v9 = a2 + 8;
    sub_20E9903D4(a2, *(_QWORD **)(a2 + 8));
    *(_QWORD *)a2 = *v8;
    v10 = v8 + 1;
    v11 = v8[1];
    *(_QWORD *)(a2 + 8) = v11;
    v12 = v8[2];
    *(_QWORD *)(a2 + 16) = v12;
    if (v12)
    {
      *(_QWORD *)(v11 + 16) = v9;
      *v8 = v10;
      *v10 = 0;
      v8[2] = 0;
    }
    else
    {
      *(_QWORD *)a2 = v9;
    }
    v19 = a2 + 32;
    sub_20E990534(a2 + 24, *(_QWORD **)(a2 + 32));
    *(_QWORD *)(a2 + 24) = v8[3];
    v20 = v8 + 4;
    v21 = v8[4];
    *(_QWORD *)(a2 + 32) = v21;
    v22 = v8[5];
    *(_QWORD *)(a2 + 40) = v22;
    if (v22)
    {
      *(_QWORD *)(v21 + 16) = v19;
      v8[3] = v20;
      *v20 = 0;
      v8[5] = 0;
      v23 = *((_OWORD *)v8 + 3);
      v8[6] = 0;
      v8[7] = 0;
      v24 = *(std::__shared_weak_count **)(a2 + 56);
      *(_OWORD *)(a2 + 48) = v23;
      if (!v24)
        goto LABEL_32;
    }
    else
    {
      *(_QWORD *)(a2 + 24) = v19;
      v25 = *((_OWORD *)v8 + 3);
      v8[6] = 0;
      v8[7] = 0;
      v24 = *(std::__shared_weak_count **)(a2 + 56);
      *(_OWORD *)(a2 + 48) = v25;
      if (!v24)
      {
LABEL_32:
        sub_20E9907F4(a2 + 64, (uint64_t)(v8 + 8));
        sub_20E990708((void **)(a2 + 112), (uint64_t)(v8 + 14));
        sub_20E991220((char **)(a2 + 224), (uint64_t)(v8 + 28));
        sub_20E98FDF0(a2 + 544, (uint64_t)(v8 + 68));
        v28 = *(void **)(a2 + 888);
        if (v28)
        {
          *(_QWORD *)(a2 + 896) = v28;
          operator delete(v28);
          *(_QWORD *)(a2 + 888) = 0;
          *(_QWORD *)(a2 + 896) = 0;
          *(_QWORD *)(a2 + 904) = 0;
        }
        *(_QWORD *)(a2 + 888) = v8[111];
        *(_QWORD *)(a2 + 896) = v8[112];
        *(_QWORD *)(a2 + 904) = v8[113];
        v8[111] = 0;
        v8[112] = 0;
        v8[113] = 0;
        v29 = *(void **)(a2 + 912);
        if (v29)
        {
          *(_QWORD *)(a2 + 920) = v29;
          operator delete(v29);
          *(_QWORD *)(a2 + 912) = 0;
          *(_QWORD *)(a2 + 920) = 0;
          *(_QWORD *)(a2 + 928) = 0;
        }
        *(_OWORD *)(a2 + 912) = *((_OWORD *)v8 + 57);
        *(_QWORD *)(a2 + 928) = v8[116];
        v8[115] = 0;
        v8[114] = 0;
        v8[116] = 0;
        v30 = *(_QWORD *)(a2 + 936);
        if (v30)
        {
          v31 = (void **)(a2 + 936);
          v32 = *(_QWORD *)(a2 + 944);
          v33 = *(void **)(a2 + 936);
          if (v32 != v30)
          {
            do
              v32 = sub_20E991850(v32 - 280);
            while (v32 != v30);
            v33 = *v31;
          }
          *(_QWORD *)(a2 + 944) = v30;
          operator delete(v33);
          *v31 = 0;
          *(_QWORD *)(a2 + 944) = 0;
          *(_QWORD *)(a2 + 952) = 0;
        }
        *(_QWORD *)(a2 + 936) = v8[117];
        *(_QWORD *)(a2 + 944) = v8[118];
        *(_QWORD *)(a2 + 952) = v8[119];
        v8[117] = 0;
        v8[118] = 0;
        v8[119] = 0;
        v34 = *(void **)(a2 + 960);
        if (v34)
        {
          *(_QWORD *)(a2 + 968) = v34;
          operator delete(v34);
          *(_QWORD *)(a2 + 960) = 0;
          *(_QWORD *)(a2 + 968) = 0;
          *(_QWORD *)(a2 + 976) = 0;
        }
        *(_OWORD *)(a2 + 960) = *((_OWORD *)v8 + 60);
        *(_QWORD *)(a2 + 976) = v8[122];
        v8[120] = 0;
        v8[121] = 0;
        v8[122] = 0;
        v35 = *(void **)(a2 + 984);
        if (v35)
        {
          *(_QWORD *)(a2 + 992) = v35;
          operator delete(v35);
          *(_QWORD *)(a2 + 984) = 0;
          *(_QWORD *)(a2 + 992) = 0;
          *(_QWORD *)(a2 + 1000) = 0;
        }
        *(_QWORD *)(a2 + 984) = v8[123];
        *(_QWORD *)(a2 + 992) = v8[124];
        *(_QWORD *)(a2 + 1000) = v8[125];
        v8[123] = 0;
        v8[124] = 0;
        v8[125] = 0;
        v36 = (_QWORD *)(a2 + 1008);
        v37 = v8 + 126;
        if (*(unsigned __int8 *)(a2 + 1152) == *((unsigned __int8 *)v8 + 1152))
        {
          if (*(_BYTE *)(a2 + 1152))
          {
            v38 = *v37;
            *(_DWORD *)(a2 + 1016) = *((_DWORD *)v8 + 254);
            *v36 = v38;
            v39 = *((_OWORD *)v8 + 69);
            v40 = *((_OWORD *)v8 + 70);
            v41 = *((_OWORD *)v8 + 71);
            *(_OWORD *)(a2 + 1088) = *((_OWORD *)v8 + 68);
            *(_OWORD *)(a2 + 1136) = v41;
            *(_OWORD *)(a2 + 1120) = v40;
            *(_OWORD *)(a2 + 1104) = v39;
            v42 = *((_OWORD *)v8 + 64);
            v43 = *((_OWORD *)v8 + 65);
            v44 = *((_OWORD *)v8 + 66);
            *(_OWORD *)(a2 + 1072) = *((_OWORD *)v8 + 67);
            *(_OWORD *)(a2 + 1056) = v44;
            *(_OWORD *)(a2 + 1040) = v43;
            *(_OWORD *)(a2 + 1024) = v42;
          }
        }
        else if (*(_BYTE *)(a2 + 1152))
        {
          *(_BYTE *)(a2 + 1152) = 0;
        }
        else
        {
          *(_OWORD *)v36 = *(_OWORD *)v37;
          v45 = *((_OWORD *)v8 + 65);
          v46 = *((_OWORD *)v8 + 66);
          v47 = *((_OWORD *)v8 + 67);
          *(_OWORD *)(a2 + 1024) = *((_OWORD *)v8 + 64);
          *(_OWORD *)(a2 + 1072) = v47;
          *(_OWORD *)(a2 + 1056) = v46;
          *(_OWORD *)(a2 + 1040) = v45;
          v48 = *((_OWORD *)v8 + 68);
          v49 = *((_OWORD *)v8 + 69);
          v50 = *((_OWORD *)v8 + 70);
          *(_OWORD *)(a2 + 1136) = *((_OWORD *)v8 + 71);
          *(_OWORD *)(a2 + 1120) = v50;
          *(_OWORD *)(a2 + 1104) = v49;
          *(_OWORD *)(a2 + 1088) = v48;
          *(_BYTE *)(a2 + 1152) = 1;
        }
        *(_QWORD *)(a2 + 1160) = v8[145];
        sub_20E99015C((_QWORD *)(a2 + 1168), (uint64_t)(v8 + 146));
        if (*(_QWORD *)(a2 + 1336))
        {
          v51 = *(_QWORD **)(a2 + 1328);
          if (v51)
          {
            do
            {
              v60 = (_QWORD *)*v51;
              v61 = (void *)v51[3];
              if (v61)
              {
                v51[4] = v61;
                operator delete(v61);
              }
              operator delete(v51);
              v51 = v60;
            }
            while (v60);
          }
          *(_QWORD *)(a2 + 1328) = 0;
          v52 = *(_QWORD *)(a2 + 1320);
          if (v52)
          {
            for (i = 0; i != v52; ++i)
              *(_QWORD *)(*(_QWORD *)(a2 + 1312) + 8 * i) = 0;
          }
          *(_QWORD *)(a2 + 1336) = 0;
        }
        v54 = v8[164];
        v8[164] = 0;
        v55 = *(void **)(a2 + 1312);
        *(_QWORD *)(a2 + 1312) = v54;
        if (v55)
          operator delete(v55);
        *(_QWORD *)(a2 + 1320) = v8[165];
        v8[165] = 0;
        v56 = v8[167];
        *(_QWORD *)(a2 + 1336) = v56;
        *(_DWORD *)(a2 + 1344) = *((_DWORD *)v8 + 336);
        v57 = v8[166];
        *(_QWORD *)(a2 + 1328) = v57;
        if (v56)
        {
          v58 = *(_QWORD *)(v57 + 8);
          v59 = *(_QWORD *)(a2 + 1320);
          if ((v59 & (v59 - 1)) != 0)
          {
            if (v58 >= v59)
              v58 %= v59;
          }
          else
          {
            v58 &= v59 - 1;
          }
          *(_QWORD *)(*(_QWORD *)(a2 + 1312) + 8 * v58) = a2 + 1328;
          v8[166] = 0;
          v8[167] = 0;
        }
        if (*(_QWORD *)(a2 + 1376))
        {
          v62 = *(_QWORD **)(a2 + 1368);
          if (v62)
          {
            do
            {
              v71 = (_QWORD *)*v62;
              v72 = (void *)v62[3];
              if (v72)
              {
                v62[4] = v72;
                operator delete(v72);
              }
              operator delete(v62);
              v62 = v71;
            }
            while (v71);
          }
          *(_QWORD *)(a2 + 1368) = 0;
          v63 = *(_QWORD *)(a2 + 1360);
          if (v63)
          {
            for (j = 0; j != v63; ++j)
              *(_QWORD *)(*(_QWORD *)(a2 + 1352) + 8 * j) = 0;
          }
          *(_QWORD *)(a2 + 1376) = 0;
        }
        v65 = v8[169];
        v8[169] = 0;
        v66 = *(void **)(a2 + 1352);
        *(_QWORD *)(a2 + 1352) = v65;
        if (v66)
          operator delete(v66);
        *(_QWORD *)(a2 + 1360) = v8[170];
        v8[170] = 0;
        v67 = v8[172];
        *(_QWORD *)(a2 + 1376) = v67;
        *(_DWORD *)(a2 + 1384) = *((_DWORD *)v8 + 346);
        v68 = v8[171];
        *(_QWORD *)(a2 + 1368) = v68;
        if (v67)
        {
          v69 = *(_QWORD *)(v68 + 8);
          v70 = *(_QWORD *)(a2 + 1360);
          if ((v70 & (v70 - 1)) != 0)
          {
            if (v69 >= v70)
              v69 %= v70;
          }
          else
          {
            v69 &= v70 - 1;
          }
          *(_QWORD *)(*(_QWORD *)(a2 + 1352) + 8 * v69) = a2 + 1368;
          v8[171] = 0;
          v8[172] = 0;
        }
        v73 = (std::__shared_weak_count *)v78;
        if ((_QWORD)v78)
        {
          v74 = (unint64_t *)(v78 + 8);
          do
            v75 = __ldaxr(v74);
          while (__stlxr(v75 - 1, v74));
          if (!v75)
          {
            ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
            std::__shared_weak_count::__release_weak(v73);
          }
        }
        return 1;
      }
    }
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
    goto LABEL_32;
  }
  __p = operator new(0x68uLL);
  v78 = xmmword_2102E3F40;
  strcpy((char *)__p, "The session has not been initialized. You need to call CV3DSLAMInitialize before calling this method");
  v13 = (char *)operator new(0x70uLL);
  v76 = v13;
  strcpy(v13, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
  if (a4)
  {
    *(_QWORD *)&v81.__val_ = 22;
    v81.__cat_ = std::generic_category();
    sub_20EA67538(&v81, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a4)
      CFRelease(*a4);
    *a4 = 0;
    v14 = cf;
    if (cf)
      CFRetain(cf);
    *a4 = v14;
    v15 = v80;
    if (v80)
    {
      v16 = (unint64_t *)&v80->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v13 = v76;
  }
  operator delete(v13);
  if (SHIBYTE(v78) < 0)
    operator delete(__p);
  return 0;
}

void sub_20E98D240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E98D258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20E98D294(_QWORD *a1@<X0>, CFTypeRef *a2@<X1>, _QWORD *a3@<X8>)
{
  int *v6;
  int *v7;
  _DWORD *v8;
  _DWORD *v9;
  std::logic_error *exception;
  char *v11;
  CFTypeRef v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::error_condition v16[3];
  void **v17;
  __int128 v18;
  CFTypeRef cf;
  std::__shared_weak_count *v20;
  void *v21;
  __int128 v22;

  if (*a1 && a1[1] && a1[2] && a1[3] && a1[4] && a1[5])
  {
    v21 = 0;
    v22 = 0uLL;
    v6 = (int *)a1[6];
    v7 = (int *)a1[7];
    v17 = &v21;
    if (v6 != v7)
    {
      do
      {
        v16[0].__val_ = *v6;
        sub_20EA9AB98((uint64_t *)&v17, v16);
        v6 += 272;
      }
      while (v6 != v7);
      v9 = (_DWORD *)a1[6];
      v8 = (_DWORD *)a1[7];
      if (v9 != v8)
      {
        while (*v9 != *(_DWORD *)(v22 - 4))
        {
          v9 += 272;
          if (v9 == v8)
            goto LABEL_12;
        }
        if (v9 != v8)
        {
          if (v21)
          {
            *(_QWORD *)&v22 = v21;
            operator delete(v21);
          }
          __asm { BR              X10 }
        }
      }
    }
LABEL_12:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Requested camera id not found.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  v21 = operator new(0x68uLL);
  v22 = xmmword_2102E3F40;
  strcpy((char *)v21, "The session has not been initialized. You need to call CV3DSLAMInitialize before calling this method");
  v11 = (char *)operator new(0x70uLL);
  v17 = (void **)v11;
  v18 = xmmword_2102E3F50;
  strcpy(v11, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
  if (!a2)
    goto LABEL_24;
  *(_QWORD *)&v16[0].__val_ = 22;
  v16[0].__cat_ = std::generic_category();
  sub_20EA67538(v16, (uint64_t)&v21, (CFErrorRef *)&cf);
  if (*a2)
    CFRelease(*a2);
  *a2 = 0;
  v12 = cf;
  if (cf)
    CFRetain(cf);
  *a2 = v12;
  v13 = v20;
  if (!v20)
    goto LABEL_22;
  p_shared_owners = (unint64_t *)&v20->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (v15)
  {
LABEL_22:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
      goto LABEL_25;
    goto LABEL_23;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  if (SHIBYTE(v18) < 0)
  {
LABEL_23:
    v11 = (char *)v17;
LABEL_24:
    operator delete(v11);
  }
LABEL_25:
  if (SHIBYTE(v22) < 0)
    operator delete(v21);
  *a3 = 0;
  a3[1] = 0;
}

void sub_20E98D52C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, __int128 a15, __int128 __p, __int16 a17, char a18, int a19, char cf,CFTypeRef a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  _QWORD *v35;
  CFTypeRef *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  const std::error_category *v41;
  CFErrorRef v42;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  _BYTE v49[24];
  __int128 v50;
  void *v51[2];
  char v52;
  CFErrorRef v53;
  std::__shared_weak_count *v54;
  std::error_condition v55;

  v52 = 7;
  strcpy((char *)v51, "Fisheye");
  *(_QWORD *)(v38 - 64) = 0;
  *(_QWORD *)(v38 - 56) = 0;
  *(_QWORD *)(v38 - 72) = v38 - 64;
  sub_20EA65D20((_QWORD *)(v38 - 72), v49);
  v50 = *(_OWORD *)v49;
  sub_20E866BE0(v38 - 72, *(char **)(v38 - 64));
  if (!CV3DVIOAddCameraCalibrationToDictionaryV2_0((const void *)v50, *(_DWORD *)(v37 + 8), *(_DWORD *)(v37 + 12), *(double **)(v37 + 24), (uint64_t *)(v37 + 72), (char *)(v37 + 296), (char *)(v37 + 320), (const char *)v51, *(CGFloat *)(v37 + 120), *(CGFloat *)(v37 + 152), *(CGFloat *)(v37 + 136), *(CGFloat *)(v37 + 160), *(double *)(v37 + 392)))
  {
    sub_20E998B0C(v35, (uint64_t)&v50);
    goto LABEL_19;
  }
  v39 = (char *)operator new(0x40uLL);
  *(_QWORD *)(v38 - 72) = v39;
  *(_OWORD *)(v38 - 64) = xmmword_2102DBC10;
  strcpy(v39, "Error while adding the camera calibration to the dictionary");
  v40 = (char *)operator new(0x70uLL);
  *(_QWORD *)v49 = v40;
  *(_OWORD *)&v49[8] = xmmword_2102E3F50;
  strcpy(v40, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
  if (v36)
  {
    v41 = std::generic_category();
    *(_QWORD *)&v55.__val_ = 22;
    v55.__cat_ = v41;
    sub_20EA67538(&v55, v38 - 72, &v53);
    if (*v36)
      CFRelease(*v36);
    *v36 = 0;
    v42 = v53;
    if (v53)
      CFRetain(v53);
    *v36 = v42;
    v43 = v54;
    if (v54)
    {
      p_shared_owners = (unint64_t *)&v54->__shared_owners_;
      do
        v45 = __ldaxr(p_shared_owners);
      while (__stlxr(v45 - 1, p_shared_owners));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    if ((v49[23] & 0x80000000) == 0)
      goto LABEL_15;
    v40 = *(char **)v49;
  }
  operator delete(v40);
LABEL_15:
  if (*(char *)(v38 - 49) < 0)
    operator delete(*(void **)(v38 - 72));
  *v35 = 0;
  v35[1] = 0;
LABEL_19:
  v46 = (std::__shared_weak_count *)*((_QWORD *)&v50 + 1);
  if (*((_QWORD *)&v50 + 1))
  {
    v47 = (unint64_t *)(*((_QWORD *)&v50 + 1) + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  if ((v52 & 0x80000000) == 0)
    JUMPOUT(0x20E98D4B8);
  operator delete(v51[0]);
}

void sub_20E98D918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,char a23)
{
  void *v23;
  uint64_t v24;

  operator delete(v23);
  if (*(char *)(v24 - 49) < 0)
    operator delete(*(void **)(v24 - 72));
  sub_20E86665C((uint64_t)&a13);
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20E98D9E8(uint64_t a1, void *__dst, _DWORD *a3, CFTypeRef *a4)
{
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  char *v16;
  void *__p;
  __int128 v18;
  CFTypeRef cf;
  std::__shared_weak_count *v20;
  std::error_condition v21;

  if (!*(_QWORD *)a1
    || !*(_QWORD *)(a1 + 8)
    || !*(_QWORD *)(a1 + 16)
    || !*(_QWORD *)(a1 + 24)
    || !*(_QWORD *)(a1 + 32)
    || !*(_QWORD *)(a1 + 40))
  {
    __p = operator new(0x68uLL);
    v18 = xmmword_2102E3F40;
    strcpy((char *)__p, "The session has not been initialized. You need to call CV3DSLAMInitialize before calling this method");
    v6 = (char *)operator new(0x70uLL);
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
    if (a4)
    {
      *(_QWORD *)&v21.__val_ = 22;
      v21.__cat_ = std::generic_category();
      sub_20EA67538(&v21, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v7 = cf;
      if (cf)
        CFRetain(cf);
      *a4 = v7;
      v8 = v20;
      if (v20)
      {
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    operator delete(v6);
    if (SHIBYTE(v18) < 0)
      goto LABEL_37;
    return 0;
  }
  if (!__dst)
  {
    __p = operator new(0x28uLL);
    v18 = xmmword_2102DBA80;
    strcpy((char *)__p, "Output intrinsics pointer is null");
    v11 = (char *)operator new(0x70uLL);
    v16 = v11;
    strcpy(v11, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
    if (!a4)
      goto LABEL_36;
    *(_QWORD *)&v21.__val_ = 22;
    v21.__cat_ = std::generic_category();
    sub_20EA67538(&v21, (uint64_t)&__p, (CFErrorRef *)&cf);
    sub_20EA66CF0(&cf, a4);
    v12 = v20;
    if (!v20)
      goto LABEL_35;
    v13 = (unint64_t *)&v20->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    goto LABEL_33;
  }
  if (a3)
  {
    *a3 = *(_DWORD *)(a1 + 780);
    a3[1] = *(_DWORD *)(a1 + 776);
    memmove(__dst, (const void *)(a1 + 888), 0x48uLL);
    return 1;
  }
  __p = operator new(0x20uLL);
  v18 = xmmword_2102DBFF0;
  strcpy((char *)__p, "Output img_size pointer is null");
  v11 = (char *)operator new(0x70uLL);
  v16 = v11;
  strcpy(v11, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
  if (a4)
  {
    *(_QWORD *)&v21.__val_ = 22;
    v21.__cat_ = std::generic_category();
    sub_20EA67538(&v21, (uint64_t)&__p, (CFErrorRef *)&cf);
    sub_20EA66CF0(&cf, a4);
    v12 = v20;
    if (!v20)
    {
LABEL_35:
      v11 = v16;
      goto LABEL_36;
    }
    v15 = (unint64_t *)&v20->__shared_owners_;
    do
      v14 = __ldaxr(v15);
    while (__stlxr(v14 - 1, v15));
LABEL_33:
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    goto LABEL_35;
  }
LABEL_36:
  operator delete(v11);
  if ((SHIBYTE(v18) & 0x80000000) == 0)
    return 0;
LABEL_37:
  operator delete(__p);
  return 0;
}

void sub_20E98DDDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  sub_20E86665C((uint64_t)&a18);
  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20E98DE30(_QWORD *a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v7;
  CFTypeRef v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  __int128 v13;
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  if (*a1 && (v4 = a1[1]) != 0 && a1[2] && a1[3] && a1[4] && a1[5])
  {
    v5 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 240) + 1096;
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    return 1;
  }
  else
  {
    __p = operator new(0x68uLL);
    v13 = xmmword_2102E3F40;
    strcpy((char *)__p, "The session has not been initialized. You need to call CV3DSLAMInitialize before calling this method");
    v7 = (char *)operator new(0x70uLL);
    strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
    if (a3)
    {
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_20EA67538(&v16, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v8 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v8;
      v9 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    operator delete(v7);
    if (SHIBYTE(v13) < 0)
      operator delete(__p);
    return 0;
  }
}

void sub_20E98E01C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20E98E058(uint64_t a1, uint64_t a2)
{
  int v4;
  std::string::value_type *v5;
  uint64_t v6;
  void *v7;
  char *v8;
  char *v9;
  size_t size;
  std::string *v11;
  _BYTE *v12;
  char v13;
  std::string *v14;
  size_t v15;
  unint64_t v16;
  uint64_t v17;
  std::string *v18;
  const char *v19;
  size_t v20;
  std::string *v21;
  _BYTE *v22;
  int v23;
  char *v24;
  int v25;
  char *v26;
  char *v27;
  char *v28;
  char v29;
  unsigned __int8 v30;
  std::string *v31;
  size_t v32;
  size_t v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  std::string::size_type v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  char v42;
  unsigned __int8 v43;
  std::string *v44;
  size_t v45;
  size_t v46;
  unint64_t v47;
  uint64_t v48;
  void *v49;
  std::string::size_type v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  char **v56;
  BOOL v57;
  char **v58;
  char *v59;
  char **v60;
  char *v61;
  unsigned __int8 v62;
  std::string *v63;
  char *v64;
  char v65;
  unsigned __int8 v66;
  std::string *v67;
  size_t v68;
  size_t v69;
  unint64_t v70;
  uint64_t v71;
  void *v72;
  std::string::size_type v73;
  char *v74;
  size_t v75;
  unint64_t v76;
  uint64_t v77;
  std::string *v78;
  char *v79;
  char *v80;
  char *v81;
  char v82;
  unsigned __int8 v83;
  std::string *v84;
  size_t v85;
  size_t v86;
  unint64_t v87;
  uint64_t v88;
  void *v89;
  std::string::size_type v90;
  char *v91;
  std::string::value_type *v92;
  std::string::value_type *v93;
  int v94;
  int v95;
  void **v96;
  void **v97;
  char *v98;
  void *v99;
  char v100;
  int v101;
  std::__shared_weak_count *v102;
  unint64_t *p_shared_owners;
  unint64_t v104;
  int v105;
  std::string::size_type v106;
  std::string::size_type v107;
  std::string *v108;
  std::string::size_type v109;
  std::string::size_type v110;
  std::string::size_type v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  std::string *v115;
  __int128 v116;
  std::string *v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  std::string __dst[2];
  std::__shared_weak_count *v122;
  std::string v123;
  int v124;
  void *v125[2];
  std::string *v126;
  int v127;
  void *__p[2];
  _OWORD v129[2];
  char *v130;
  char *v131;
  char v132;
  char *v133;
  char *v134;
  char v135;
  char v136;
  uint64_t v137;
  std::string v138[2];
  uint64_t v139;
  uint64_t v140;
  char v141;
  uint64_t v142;
  uint64_t v143;
  char v144;
  char v145;
  uint64_t v146;

  sub_20E998D5C((uint64_t)__dst, "\n", 0);
  memset(&v123, 0, sizeof(v123));
  v4 = *(char *)(a1 + 23);
  if (v4 >= 0)
    v5 = (std::string::value_type *)a1;
  else
    v5 = *(std::string::value_type **)a1;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a1 + 23);
  else
    v6 = *(_QWORD *)(a1 + 8);
  v125[0] = v5;
  v125[1] = &v5[v6];
  v126 = __dst;
  v127 = 0;
  v130 = 0;
  v131 = 0;
  v132 = 0;
  v133 = 0;
  v134 = 0;
  v135 = 0;
  v136 = 0;
  v137 = 0;
  *(_OWORD *)__p = 0u;
  memset(v129, 0, 25);
  v139 = 0;
  v140 = 0;
  v141 = 0;
  v142 = 0;
  v143 = 0;
  v144 = 0;
  v145 = 0;
  v146 = 0;
  memset(v138, 0, 41);
  sub_20E9A3204((uint64_t)__dst, (uint64_t)v5, (uint64_t)&v5[v6], (uint64_t)v138, 0);
  sub_20E9A3510((uint64_t)__p, (uint64_t)v5, (uint64_t)&v5[v6], (uint64_t *)v138, 0);
  if (v138[0].__r_.__value_.__r.__words[0])
  {
    v138[0].__r_.__value_.__l.__size_ = v138[0].__r_.__value_.__r.__words[0];
    operator delete(v138[0].__r_.__value_.__l.__data_);
  }
  v7 = __p[1];
  if (__p[1] == __p[0])
  {
    for (; v6; --v6)
      std::string::push_back(&v123, *v5++);
    goto LABEL_198;
  }
  v120 = a2;
  do
  {
    v8 = v130;
    v9 = v131;
    while (v8 != v9)
    {
      v13 = *v8;
      if ((SHIBYTE(v123.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if (HIBYTE(v123.__r_.__value_.__r.__words[2]) != 22)
        {
          size = HIBYTE(v123.__r_.__value_.__r.__words[2]);
          *((_BYTE *)&v123.__r_.__value_.__s + 23) = (*((_BYTE *)&v123.__r_.__value_.__s + 23) + 1) & 0x7F;
          v11 = &v123;
          goto LABEL_16;
        }
        v14 = &v123;
        size = 22;
LABEL_24:
        if (size + 1 > 2 * size)
          v16 = size + 1;
        else
          v16 = 2 * size;
        v17 = (v16 & 0x7FFFFFFFFFFFFFF8) + 8;
        if ((v16 | 7) != 0x17)
          v17 = v16 | 7;
        if (v16 >= 0x17)
          v15 = v17 + 1;
        else
          v15 = 23;
LABEL_32:
        v18 = (std::string *)operator new(v15);
        v11 = v18;
        if (!size || (memmove(v18, v14, size), size != 22))
          operator delete(v14);
        v123.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
        v123.__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
        goto LABEL_37;
      }
      size = (v123.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v123.__r_.__value_.__l.__size_ == size)
      {
        if ((v123.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
          sub_20E860B7C();
        v14 = (std::string *)v123.__r_.__value_.__r.__words[0];
        v15 = 0x7FFFFFFFFFFFFFF7;
        if (size < 0x3FFFFFFFFFFFFFF3)
          goto LABEL_24;
        goto LABEL_32;
      }
      size = v123.__r_.__value_.__l.__size_;
      v11 = (std::string *)v123.__r_.__value_.__r.__words[0];
LABEL_37:
      v123.__r_.__value_.__l.__size_ = size + 1;
LABEL_16:
      v12 = (char *)v11 + size;
      *v12 = v13;
      v12[1] = 0;
      ++v8;
    }
    v19 = "\\n";
    do
    {
      while (1)
      {
        v23 = *(unsigned __int8 *)v19;
        if (v23 != 36)
          goto LABEL_108;
        v24 = (char *)(v19 + 1);
        if (v19 + 1 == "")
          goto LABEL_107;
        v25 = *v24;
        v23 = *v24;
        if (v25 > 38)
        {
          if (v25 != 39)
          {
            if (v25 != 96)
              goto LABEL_96;
            v39 = v130;
            v40 = v131;
            if (v130 == v131)
              goto LABEL_174;
            while (2)
            {
              while (2)
              {
                v42 = *v39;
                v43 = HIBYTE(v123.__r_.__value_.__r.__words[2]);
                if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
                {
                  v45 = (v123.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                  if (v123.__r_.__value_.__l.__size_ == v45)
                  {
                    if ((v123.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
                      goto LABEL_236;
                    v44 = (std::string *)v123.__r_.__value_.__r.__words[0];
                    v46 = 0x7FFFFFFFFFFFFFF7;
                    if (v45 < 0x3FFFFFFFFFFFFFF3)
                      goto LABEL_81;
                    goto LABEL_89;
                  }
                  v45 = v123.__r_.__value_.__l.__size_;
                  v50 = v123.__r_.__value_.__r.__words[0];
                }
                else
                {
                  if (HIBYTE(v123.__r_.__value_.__r.__words[2]) != 22)
                  {
                    *((_BYTE *)&v123.__r_.__value_.__s + 23) = (*((_BYTE *)&v123.__r_.__value_.__s + 23) + 1) & 0x7F;
                    v41 = (char *)&v123 + v43;
                    *v41 = v42;
                    v41[1] = 0;
                    if (++v39 == v40)
                      goto LABEL_174;
                    continue;
                  }
                  v44 = &v123;
                  v45 = 22;
LABEL_81:
                  if (v45 + 1 > 2 * v45)
                    v47 = v45 + 1;
                  else
                    v47 = 2 * v45;
                  v48 = (v47 & 0x7FFFFFFFFFFFFFF8) + 8;
                  if ((v47 | 7) != 0x17)
                    v48 = v47 | 7;
                  if (v47 >= 0x17)
                    v46 = v48 + 1;
                  else
                    v46 = 23;
LABEL_89:
                  v49 = operator new(v46);
                  v50 = (std::string::size_type)v49;
                  if (!v45 || (memmove(v49, v44, v45), v45 != 22))
                    operator delete(v44);
                  v123.__r_.__value_.__r.__words[0] = v50;
                  v123.__r_.__value_.__r.__words[2] = v46 | 0x8000000000000000;
                }
                break;
              }
              v123.__r_.__value_.__l.__size_ = v45 + 1;
              v51 = (char *)(v50 + v45);
              *v51 = v42;
              v51[1] = 0;
              if (++v39 == v40)
                goto LABEL_174;
              continue;
            }
          }
          v79 = v133;
          v80 = v134;
          if (v133 == v134)
            goto LABEL_174;
          while (2)
          {
            while (2)
            {
              v82 = *v79;
              v83 = HIBYTE(v123.__r_.__value_.__r.__words[2]);
              if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
              {
                v85 = (v123.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                if (v123.__r_.__value_.__l.__size_ == v85)
                {
                  if ((v123.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
                    goto LABEL_236;
                  v84 = (std::string *)v123.__r_.__value_.__r.__words[0];
                  v86 = 0x7FFFFFFFFFFFFFF7;
                  if (v85 < 0x3FFFFFFFFFFFFFF3)
                    goto LABEL_160;
                  goto LABEL_168;
                }
                v85 = v123.__r_.__value_.__l.__size_;
                v90 = v123.__r_.__value_.__r.__words[0];
              }
              else
              {
                if (HIBYTE(v123.__r_.__value_.__r.__words[2]) != 22)
                {
                  *((_BYTE *)&v123.__r_.__value_.__s + 23) = (*((_BYTE *)&v123.__r_.__value_.__s + 23) + 1) & 0x7F;
                  v81 = (char *)&v123 + v83;
                  *v81 = v82;
                  v81[1] = 0;
                  if (++v79 == v80)
                    goto LABEL_174;
                  continue;
                }
                v84 = &v123;
                v85 = 22;
LABEL_160:
                if (v85 + 1 > 2 * v85)
                  v87 = v85 + 1;
                else
                  v87 = 2 * v85;
                v88 = (v87 & 0x7FFFFFFFFFFFFFF8) + 8;
                if ((v87 | 7) != 0x17)
                  v88 = v87 | 7;
                if (v87 >= 0x17)
                  v86 = v88 + 1;
                else
                  v86 = 23;
LABEL_168:
                v89 = operator new(v86);
                v90 = (std::string::size_type)v89;
                if (!v85 || (memmove(v89, v84, v85), v85 != 22))
                  operator delete(v84);
                v123.__r_.__value_.__r.__words[0] = v90;
                v123.__r_.__value_.__r.__words[2] = v86 | 0x8000000000000000;
              }
              break;
            }
            v123.__r_.__value_.__l.__size_ = v85 + 1;
            v91 = (char *)(v90 + v85);
            *v91 = v82;
            v91[1] = 0;
            if (++v79 == v80)
              goto LABEL_174;
            continue;
          }
        }
        if (v25 != 36)
          break;
        ++v19;
        v62 = HIBYTE(v123.__r_.__value_.__r.__words[2]);
        if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
        {
LABEL_134:
          v20 = (v123.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if (v123.__r_.__value_.__l.__size_ != v20)
          {
            v20 = v123.__r_.__value_.__l.__size_;
            v21 = (std::string *)v123.__r_.__value_.__r.__words[0];
LABEL_150:
            v123.__r_.__value_.__l.__size_ = v20 + 1;
            goto LABEL_40;
          }
          if ((v123.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
LABEL_236:
            sub_20E860B7C();
          v63 = (std::string *)v123.__r_.__value_.__r.__words[0];
          v75 = 0x7FFFFFFFFFFFFFF7;
          if (v20 >= 0x3FFFFFFFFFFFFFF3)
          {
LABEL_145:
            v78 = (std::string *)operator new(v75);
            v21 = v78;
            if (!v20 || (memmove(v78, v63, v20), v20 != 22))
              operator delete(v63);
            v123.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
            v123.__r_.__value_.__r.__words[2] = v75 | 0x8000000000000000;
            goto LABEL_150;
          }
LABEL_137:
          if (v20 + 1 > 2 * v20)
            v76 = v20 + 1;
          else
            v76 = 2 * v20;
          v77 = (v76 & 0x7FFFFFFFFFFFFFF8) + 8;
          if ((v76 | 7) != 0x17)
            v77 = v76 | 7;
          if (v76 >= 0x17)
            v75 = v77 + 1;
          else
            v75 = 23;
          goto LABEL_145;
        }
LABEL_109:
        if (v62 == 22)
        {
          v63 = &v123;
          v20 = 22;
          goto LABEL_137;
        }
        v20 = v62;
        *((_BYTE *)&v123.__r_.__value_.__s + 23) = (v62 + 1) & 0x7F;
        v21 = &v123;
LABEL_40:
        v22 = (char *)v21 + v20;
        *v22 = v23;
        v22[1] = 0;
        if (++v19 == "")
          goto LABEL_175;
      }
      if (v25 == 38)
      {
        v26 = *(char **)__p[0];
        v27 = (char *)*((_QWORD *)__p[0] + 1);
        if (*(char **)__p[0] == v27)
          goto LABEL_174;
        while (1)
        {
          while (1)
          {
            v29 = *v26;
            v30 = HIBYTE(v123.__r_.__value_.__r.__words[2]);
            if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
              break;
            if (HIBYTE(v123.__r_.__value_.__r.__words[2]) == 22)
            {
              v31 = &v123;
              v32 = 22;
              goto LABEL_55;
            }
            *((_BYTE *)&v123.__r_.__value_.__s + 23) = (*((_BYTE *)&v123.__r_.__value_.__s + 23) + 1) & 0x7F;
            v28 = (char *)&v123 + v30;
            *v28 = v29;
            v28[1] = 0;
            if (++v26 == v27)
              goto LABEL_174;
          }
          v32 = (v123.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if (v123.__r_.__value_.__l.__size_ == v32)
            break;
          v32 = v123.__r_.__value_.__l.__size_;
          v37 = v123.__r_.__value_.__r.__words[0];
LABEL_68:
          v123.__r_.__value_.__l.__size_ = v32 + 1;
          v38 = (char *)(v37 + v32);
          *v38 = v29;
          v38[1] = 0;
          if (++v26 == v27)
            goto LABEL_174;
        }
        if ((v123.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
          goto LABEL_236;
        v31 = (std::string *)v123.__r_.__value_.__r.__words[0];
        v33 = 0x7FFFFFFFFFFFFFF7;
        if (v32 < 0x3FFFFFFFFFFFFFF3)
        {
LABEL_55:
          if (v32 + 1 > 2 * v32)
            v34 = v32 + 1;
          else
            v34 = 2 * v32;
          v35 = (v34 & 0x7FFFFFFFFFFFFFF8) + 8;
          if ((v34 | 7) != 0x17)
            v35 = v34 | 7;
          if (v34 >= 0x17)
            v33 = v35 + 1;
          else
            v33 = 23;
        }
        v36 = operator new(v33);
        v37 = (std::string::size_type)v36;
        if (!v32 || (memmove(v36, v31, v32), v32 != 22))
          operator delete(v31);
        v123.__r_.__value_.__r.__words[0] = v37;
        v123.__r_.__value_.__r.__words[2] = v33 | 0x8000000000000000;
        goto LABEL_68;
      }
LABEL_96:
      if ((v23 - 48) > 9)
      {
LABEL_107:
        LOBYTE(v23) = 36;
LABEL_108:
        v62 = HIBYTE(v123.__r_.__value_.__r.__words[2]);
        if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_134;
        goto LABEL_109;
      }
      v52 = *v24 - 48;
      if (v19 != "\\n")
      {
        v53 = *((unsigned __int8 *)v19 + 2);
        v54 = v53 - 48;
        v55 = v53 + 10 * (int)v52 - 48;
        if (v54 > 9)
        {
          v24 = (char *)(v19 + 1);
        }
        else
        {
          v52 = v55;
          v24 = (char *)(v19 + 2);
        }
      }
      v56 = (char **)((char *)__p[0] + 24 * (int)v52);
      v57 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3) > v52;
      v58 = (char **)v129 + 1;
      if (v57)
        v58 = v56;
      v59 = *v58;
      v60 = v56 + 1;
      if (!v57)
        v60 = (char **)&v129[1];
      v61 = *v60;
      if (v59 != *v60)
      {
        while (1)
        {
          while (1)
          {
            v65 = *v59;
            v66 = HIBYTE(v123.__r_.__value_.__r.__words[2]);
            if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
              break;
            if (HIBYTE(v123.__r_.__value_.__r.__words[2]) == 22)
            {
              v67 = &v123;
              v68 = 22;
              goto LABEL_118;
            }
            *((_BYTE *)&v123.__r_.__value_.__s + 23) = (*((_BYTE *)&v123.__r_.__value_.__s + 23) + 1) & 0x7F;
            v64 = (char *)&v123 + v66;
            *v64 = v65;
            v64[1] = 0;
            if (++v59 == v61)
              goto LABEL_174;
          }
          v68 = (v123.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if (v123.__r_.__value_.__l.__size_ == v68)
            break;
          v68 = v123.__r_.__value_.__l.__size_;
          v73 = v123.__r_.__value_.__r.__words[0];
LABEL_131:
          v123.__r_.__value_.__l.__size_ = v68 + 1;
          v74 = (char *)(v73 + v68);
          *v74 = v65;
          v74[1] = 0;
          if (++v59 == v61)
            goto LABEL_174;
        }
        if ((v123.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
          goto LABEL_236;
        v67 = (std::string *)v123.__r_.__value_.__r.__words[0];
        v69 = 0x7FFFFFFFFFFFFFF7;
        if (v68 < 0x3FFFFFFFFFFFFFF3)
        {
LABEL_118:
          if (v68 + 1 > 2 * v68)
            v70 = v68 + 1;
          else
            v70 = 2 * v68;
          v71 = (v70 & 0x7FFFFFFFFFFFFFF8) + 8;
          if ((v70 | 7) != 0x17)
            v71 = v70 | 7;
          if (v70 >= 0x17)
            v69 = v71 + 1;
          else
            v69 = 23;
        }
        v72 = operator new(v69);
        v73 = (std::string::size_type)v72;
        if (!v68 || (memmove(v72, v67, v68), v68 != 22))
          operator delete(v67);
        v123.__r_.__value_.__r.__words[0] = v73;
        v123.__r_.__value_.__r.__words[2] = v69 | 0x8000000000000000;
        goto LABEL_131;
      }
LABEL_174:
      v19 = v24 + 1;
    }
    while (v24 + 1 != "");
LABEL_175:
    v92 = v133;
    v93 = v134;
    v94 = v127;
    v95 = v127 | 0x800;
    v127 |= 0x800u;
    v7 = __p[0];
    v96 = (void **)v129 + 1;
    if (__p[1] != __p[0])
      v96 = (void **)__p[0];
    v97 = (void **)((char *)__p[0] + 8);
    if (__p[1] == __p[0])
      v97 = (void **)&v129[1];
    v98 = (char *)*v97;
    v99 = v125[1];
    if (*v96 == *v97)
    {
      if (v125[1] == v98)
      {
        if (!__p[0])
          goto LABEL_12;
        __p[1] = __p[0];
LABEL_11:
        operator delete(v7);
LABEL_12:
        v7 = 0;
        v136 = 0;
        *(_OWORD *)__p = 0u;
        memset(v129, 0, 25);
        v130 = 0;
        v131 = 0;
        v132 = 0;
        v133 = 0;
        v134 = 0;
        v135 = 0;
        v137 = 0;
        continue;
      }
      v139 = 0;
      v140 = 0;
      v141 = 0;
      v142 = 0;
      v143 = 0;
      v144 = 0;
      v145 = 0;
      v146 = 0;
      memset(v138, 0, 41);
      v101 = sub_20E9A3204((uint64_t)v126, (uint64_t)v98, (uint64_t)v125[1], (uint64_t)v138, v94 | 0x860u);
      sub_20E9A3510((uint64_t)__p, (uint64_t)v98, (uint64_t)v99, (uint64_t *)v138, 1);
      if (v138[0].__r_.__value_.__r.__words[0])
      {
        v138[0].__r_.__value_.__l.__size_ = v138[0].__r_.__value_.__r.__words[0];
        operator delete(v138[0].__r_.__value_.__l.__data_);
      }
      if (v101)
      {
        v7 = __p[0];
        continue;
      }
      ++v98;
      v95 = v127;
      v99 = v125[1];
    }
    v127 = v95 | 0x80;
    v139 = 0;
    v140 = 0;
    v141 = 0;
    v142 = 0;
    v143 = 0;
    v144 = 0;
    v145 = 0;
    v146 = 0;
    memset(v138, 0, 41);
    v100 = sub_20E9A3204((uint64_t)v126, (uint64_t)v98, (uint64_t)v99, (uint64_t)v138, v95 | 0x80u);
    sub_20E9A3510((uint64_t)__p, (uint64_t)v98, (uint64_t)v99, (uint64_t *)v138, (v95 & 0x800) != 0);
    if (v138[0].__r_.__value_.__r.__words[0])
    {
      v138[0].__r_.__value_.__l.__size_ = v138[0].__r_.__value_.__r.__words[0];
      operator delete(v138[0].__r_.__value_.__l.__data_);
    }
    v7 = __p[0];
    if ((v100 & 1) == 0)
    {
      if (!__p[0])
        goto LABEL_12;
      goto LABEL_11;
    }
  }
  while (__p[1] != v7);
  while (v92 != v93)
    std::string::push_back(&v123, *v92++);
  a2 = v120;
LABEL_198:
  if (v7)
  {
    __p[1] = v7;
    operator delete(v7);
  }
  v102 = v122;
  if (v122)
  {
    p_shared_owners = (unint64_t *)&v122->__shared_owners_;
    do
      v104 = __ldaxr(p_shared_owners);
    while (__stlxr(v104 - 1, p_shared_owners));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  std::locale::~locale((std::locale *)__dst);
  v105 = 0;
  v106 = 0;
  while ((SHIBYTE(v123.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v107 = HIBYTE(v123.__r_.__value_.__r.__words[2]);
    if (v106 >= HIBYTE(v123.__r_.__value_.__r.__words[2]))
      return;
    v108 = &v123;
    v109 = HIBYTE(v123.__r_.__value_.__r.__words[2]);
LABEL_216:
    v110 = v109 - v106;
    if (v110 >= v107 - v106)
      v111 = v107 - v106;
    else
      v111 = v110;
    if (v111 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v111 >= 0x17)
    {
      v113 = (v111 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v111 | 7) != 0x17)
        v113 = v111 | 7;
      v114 = v113 + 1;
      v112 = operator new(v113 + 1);
      __dst[0].__r_.__value_.__l.__size_ = v111;
      __dst[0].__r_.__value_.__r.__words[2] = v114 | 0x8000000000000000;
      __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v112;
LABEL_226:
      memmove(v112, (char *)v108 + v106, v111);
      goto LABEL_227;
    }
    *((_BYTE *)&__dst[0].__r_.__value_.__s + 23) = v111;
    v112 = __dst;
    if (v111)
      goto LABEL_226;
LABEL_227:
    *((_BYTE *)v112 + v111) = 0;
    v115 = std::string::insert(__dst, 0, "{", 1uLL);
    v116 = *(_OWORD *)&v115->__r_.__value_.__l.__data_;
    v138[0].__r_.__value_.__r.__words[2] = v115->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v138[0].__r_.__value_.__l.__data_ = v116;
    v115->__r_.__value_.__l.__size_ = 0;
    v115->__r_.__value_.__r.__words[2] = 0;
    v115->__r_.__value_.__r.__words[0] = 0;
    v117 = std::string::append(v138, "}", 1uLL);
    v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
    v126 = (std::string *)v117->__r_.__value_.__r.__words[2];
    *(_OWORD *)v125 = v118;
    v117->__r_.__value_.__l.__size_ = 0;
    v117->__r_.__value_.__r.__words[2] = 0;
    v117->__r_.__value_.__r.__words[0] = 0;
    v124 = v105;
    v119 = *(_QWORD *)(a2 + 24);
    if (!v119)
      sub_20E86D37C();
    (*(void (**)(uint64_t, int *, void **))(*(_QWORD *)v119 + 48))(v119, &v124, v125);
    if (SHIBYTE(v126) < 0)
    {
      operator delete(v125[0]);
      if ((SHIBYTE(v138[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_232:
        if ((SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_207;
        goto LABEL_233;
      }
    }
    else if ((SHIBYTE(v138[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_232;
    }
    operator delete(v138[0].__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_207;
LABEL_233:
    operator delete(__dst[0].__r_.__value_.__l.__data_);
LABEL_207:
    ++v105;
    v106 = v107;
  }
  v109 = v123.__r_.__value_.__l.__size_;
  if (v106 < v123.__r_.__value_.__l.__size_)
  {
    if (v106 + 800 >= v123.__r_.__value_.__l.__size_)
      v107 = v123.__r_.__value_.__l.__size_;
    else
      v107 = v106 + 800;
    v108 = (std::string *)v123.__r_.__value_.__r.__words[0];
    goto LABEL_216;
  }
  operator delete(v123.__r_.__value_.__l.__data_);
}

void sub_20E98EDB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::locale a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42)
{
  uint64_t v42;
  void *v44;
  void *v45;

  v44 = *(void **)(v42 - 208);
  if (v44)
  {
    *(_QWORD *)(v42 - 200) = v44;
    operator delete(v44);
    v45 = a42;
    if (!a42)
    {
LABEL_3:
      if (a33 < 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v45 = a42;
    if (!a42)
      goto LABEL_3;
  }
  operator delete(v45);
  if (a33 < 0)
  {
LABEL_4:
    operator delete(__p);
    sub_20E98EEFC(&a17);
    _Unwind_Resume(a1);
  }
LABEL_7:
  sub_20E98EEFC(&a17);
  _Unwind_Resume(a1);
}

void sub_20E98EEFC(std::locale *this)
{
  std::locale::__imp *locale;
  unint64_t *v3;
  unint64_t v4;

  locale = this[6].__locale_;
  if (!locale)
    goto LABEL_5;
  v3 = (unint64_t *)((char *)locale + 8);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 - 1, v3));
  if (!v4)
  {
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 16))(locale);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)locale);
    std::locale::~locale(this);
  }
  else
  {
LABEL_5:
    std::locale::~locale(this);
  }
}

uint64_t CV3DSLAMSessionGetCMOjbectAnchorMetadata_0(uint64_t a1, _BYTE *a2, uint64_t a3, CFTypeRef *a4)
{
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  CFTypeRef v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  char *v16;
  CFTypeRef v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  void *__p;
  __int128 v22;
  CFTypeRef cf;
  std::__shared_weak_count *v24;
  std::error_condition v25;

  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        *a2 = *(_BYTE *)(a1 + 24);
        if (*(_BYTE *)(a1 + 24))
        {
          *(_OWORD *)a3 = *(_OWORD *)(a1 + 8);
        }
        else
        {
          *(_QWORD *)a3 = 0;
          *(_QWORD *)(a3 + 8) = 0;
        }
        return 1;
      }
      __p = operator new(0x20uLL);
      v22 = xmmword_2102DBFE0;
      strcpy((char *)__p, "cf_uuid_bytes is nullptr.");
      v16 = (char *)operator new(0x70uLL);
      strcpy(v16, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
      if (a4)
      {
        *(_QWORD *)&v25.__val_ = 22;
        v25.__cat_ = std::generic_category();
        sub_20EA67538(&v25, (uint64_t)&__p, (CFErrorRef *)&cf);
        if (*a4)
          CFRelease(*a4);
        *a4 = 0;
        v17 = cf;
        if (cf)
          CFRetain(cf);
        *a4 = v17;
        v18 = v24;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v20 = __ldaxr(p_shared_owners);
          while (__stlxr(v20 - 1, p_shared_owners));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
      }
      operator delete(v16);
      if ((SHIBYTE(v22) & 0x80000000) == 0)
        return 0;
    }
    else
    {
      __p = operator new(0x28uLL);
      v22 = xmmword_2102DB450;
      strcpy((char *)__p, "user_created_object_anchor is nullptr.");
      v11 = (char *)operator new(0x70uLL);
      strcpy(v11, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
      if (a4)
      {
        *(_QWORD *)&v25.__val_ = 22;
        v25.__cat_ = std::generic_category();
        sub_20EA67538(&v25, (uint64_t)&__p, (CFErrorRef *)&cf);
        if (*a4)
          CFRelease(*a4);
        *a4 = 0;
        v12 = cf;
        if (cf)
          CFRetain(cf);
        *a4 = v12;
        v13 = v24;
        if (v24)
        {
          v14 = (unint64_t *)&v24->__shared_owners_;
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
      }
      operator delete(v11);
      if ((SHIBYTE(v22) & 0x80000000) == 0)
        return 0;
    }
    operator delete(__p);
    return 0;
  }
  __p = operator new(0x28uLL);
  v22 = xmmword_2102DBA80;
  strcpy((char *)__p, "Data metadata pointer is nullptr.");
  v6 = (char *)operator new(0x70uLL);
  strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp");
  if (a4)
  {
    *(_QWORD *)&v25.__val_ = 22;
    v25.__cat_ = std::generic_category();
    sub_20EA67538(&v25, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a4)
      CFRelease(*a4);
    *a4 = 0;
    v7 = cf;
    if (cf)
      CFRetain(cf);
    *a4 = v7;
    v8 = v24;
    if (v24)
    {
      v9 = (unint64_t *)&v24->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  operator delete(v6);
  if (SHIBYTE(v22) < 0)
    operator delete(__p);
  return 0;
}

void sub_20E98F3AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20E98F400(uint64_t a1)
{
  sub_20E866774((uint64_t *)(a1 + 8));
  return a1;
}

void sub_20E98F428(uint64_t a1)
{
  sub_20E866774((uint64_t *)(a1 + 8));
  JUMPOUT(0x212BC6398);
}

void sub_20E98F460(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5AC58);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5AC58))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3dapi.applecv3d.slam");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A5AC50);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A5AC58);
  }
  *a1 = qword_254A5AC50;
}

void sub_20E98F4FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5AC58);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5AC58);
  _Unwind_Resume(a1);
}

unint64_t sub_20E98F554(uint64_t a1, char *__s, const char **a3, const char **a4)
{
  size_t v8;
  size_t v9;
  _QWORD *p_dst;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  size_t v14;
  size_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  unint64_t result;
  size_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  __int128 v33;
  _QWORD *v34;
  __int128 v35;
  _QWORD *__dst;
  __int128 v37;

  v8 = strlen(__s);
  if (v8 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v9 = v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    p_dst = operator new(v11 + 1);
    *(_QWORD *)&v37 = v9;
    *((_QWORD *)&v37 + 1) = v12 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v37) = v8;
  p_dst = &__dst;
  if (v8)
LABEL_8:
    memcpy(p_dst, __s, v9);
  *((_BYTE *)p_dst + v9) = 0;
  v13 = *a3;
  v14 = strlen(*a3);
  if (v14 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v15 = v14;
  if (v14 >= 0x17)
  {
    v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v17 = v14 | 7;
    v18 = v17 + 1;
    v16 = operator new(v17 + 1);
    *(_QWORD *)&v35 = v15;
    *((_QWORD *)&v35 + 1) = v18 | 0x8000000000000000;
    v34 = v16;
    goto LABEL_16;
  }
  HIBYTE(v35) = v14;
  v16 = &v34;
  if (v14)
LABEL_16:
    memcpy(v16, v13, v15);
  *((_BYTE *)v16 + v15) = 0;
  v19 = *a4;
  result = strlen(*a4);
  if (result > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v21 = result;
  if (result >= 0x17)
  {
    v23 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v23 = result | 7;
    v24 = v23 + 1;
    v22 = operator new(v23 + 1);
    *(_QWORD *)&v33 = v21;
    *((_QWORD *)&v33 + 1) = v24 | 0x8000000000000000;
    v32 = v22;
  }
  else
  {
    HIBYTE(v33) = result;
    v22 = &v32;
    if (!result)
      goto LABEL_25;
  }
  result = (unint64_t)memcpy(v22, v19, v21);
LABEL_25:
  *((_BYTE *)v22 + v21) = 0;
  v25 = HIBYTE(v37);
  v26 = HIBYTE(v35);
  v27 = HIBYTE(v33);
  v28 = __dst;
  v29 = v37;
  *(_QWORD *)a1 = off_24C9B3310;
  *(_QWORD *)(a1 + 8) = v28;
  *(_QWORD *)(a1 + 16) = v29;
  *(_QWORD *)(a1 + 23) = *(_QWORD *)((char *)&v37 + 7);
  *(_BYTE *)(a1 + 31) = v25;
  v30 = v35;
  *(_QWORD *)(a1 + 32) = v34;
  *(_QWORD *)(a1 + 40) = v30;
  *(_QWORD *)(a1 + 47) = *(_QWORD *)((char *)&v35 + 7);
  *(_BYTE *)(a1 + 55) = v26;
  v31 = v33;
  *(_QWORD *)(a1 + 56) = v32;
  *(_QWORD *)(a1 + 64) = v31;
  *(_QWORD *)(a1 + 71) = *(_QWORD *)((char *)&v33 + 7);
  *(_BYTE *)(a1 + 79) = v27;
  return result;
}

void sub_20E98F770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E98F7BC(uint64_t a1)
{
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_6;
LABEL_3:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_7:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20E98F82C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B32C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20E98F83C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B32C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E98F86C(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0)
  {
    operator delete(*(void **)(a1 + 80));
    if ((*(char *)(a1 + 79) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
        return;
LABEL_7:
      operator delete(*(void **)(a1 + 32));
      return;
    }
  }
  else if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_7;
}

void sub_20E98F8D4(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0)
  {
    operator delete(*(void **)(a1 + 56));
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 31) & 0x80000000) == 0)
        goto LABEL_8;
      goto LABEL_7;
    }
  }
  else if ((*(char *)(a1 + 55) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 32));
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
LABEL_8:
    JUMPOUT(0x212BC6398);
LABEL_7:
  operator delete(*(void **)(a1 + 8));
  goto LABEL_8;
}

void sub_20E98F948(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B4888;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E98F998(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_20E98F9A8(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B46D8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E98F9F8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_20E98FA08(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B4780;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E98FA58(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_20E98FA68(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B4748;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E98FAB8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_20E98FAC8(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B4710;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E98FB18(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_20E98FB28(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B46A0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E98FB78(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_20E98FB88(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B4668;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E98FBD8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_20E98FBE8(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B47B8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E98FC38(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_20E98FC50(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E98FC78()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20E98FC8C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C9B3348;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20E98FCC4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C9B3348;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20E98FCE4(uint64_t a1)
{
  uint64_t result;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  result = **(_QWORD **)(a1 + 8);
  if (result)
  {
    v2 = (unsigned int *)(result + 336);
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t sub_20E98FD18(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZZNS_9applecv3d4slam7Session18AddAnchorWithStateERK14"
                     "CV3DSLAMAnchorPK20CV3DSLAMStateContextPP9__CFErrorENK3$_0clERKNS_3kit4capi5BlockIU13block_pointerFv"
                     "PS9_hEEEEUlvE_JEEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZZNS_9applecv3d4slam7Session18AddAnchorWit"
                                "hStateERK14CV3DSLAMAnchorPK20CV3DSLAMStateContextPP9__CFErrorENK3$_0clERKNS_3kit4capi5Bl"
                                "ockIU13block_pointerFvPS9_hEEEEUlvE_JEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZZNS_9applecv3d4slam7Session18AddAnchorWithStateERK14CV3DSLAMAnchorPK20CV3DSLAMStateContextPP9__CFErrorENK3$_0clERKNS_3kit4capi5BlockIU13block_pointerFvPS9_hEEEEUlvE_JEEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZZNS_9applecv3d4slam7Session18AddAnchorWithStateERK14CV3DSLAMAnchorPK20CV3DSLAMStateContextPP9__CFErrorENK3$_0clERKNS_3kit4capi5BlockIU13block_pointerFvPS9_hEEEEUlvE_JEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E98FD84()
{
  return &unk_24C9B33A8;
}

void sub_20E98FD90(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B33C8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E98FDE0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20E98FDF0(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  __int128 v13;
  void *v14;
  void *v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = (_QWORD *)(a1 + 8);
  v5 = (_QWORD *)(a1 + 16);
  sub_20E991500(a1 + 8, *(_QWORD **)(a1 + 16));
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = (_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 16);
  *v5 = v7;
  v8 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  if (v8)
  {
    *(_QWORD *)(v7 + 16) = v5;
    *(_QWORD *)(a2 + 8) = v6;
    *v6 = 0;
    *(_QWORD *)(a2 + 24) = 0;
    v10 = (_QWORD *)(a1 + 32);
    v9 = *(void **)(a1 + 32);
    v11 = (_QWORD *)(a2 + 32);
    if (!v9)
      goto LABEL_4;
    goto LABEL_3;
  }
  *v4 = v5;
  v10 = (_QWORD *)(a1 + 32);
  v9 = *(void **)(a1 + 32);
  v11 = (_QWORD *)(a2 + 32);
  if (v9)
  {
LABEL_3:
    *(_QWORD *)(a1 + 40) = v9;
    operator delete(v9);
    *v10 = 0;
    v10[1] = 0;
    v10[2] = 0;
  }
LABEL_4:
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *v11 = 0;
  v11[1] = 0;
  v11[2] = 0;
  v12 = *(void **)(a1 + 56);
  if (v12)
  {
    *(_QWORD *)(a1 + 64) = v12;
    operator delete(v12);
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
  }
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v13 = *(_OWORD *)(a2 + 80);
  v14 = *(void **)(a1 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = v13;
  if (v14)
  {
    *(_QWORD *)(a1 + 112) = v14;
    operator delete(v14);
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 120) = 0;
  }
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  v15 = *(void **)(a1 + 128);
  if (v15)
  {
    *(_QWORD *)(a1 + 136) = v15;
    operator delete(v15);
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    *(_QWORD *)(a1 + 144) = 0;
  }
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  v16 = (void **)(a1 + 152);
  v17 = *(_QWORD *)(a1 + 152);
  if (v17)
  {
    v18 = *(_QWORD *)(a1 + 160);
    v19 = *(void **)(a1 + 152);
    if (v18 != v17)
    {
      do
      {
        v20 = v18 - 176;
        sub_20E991548((_QWORD *)(v18 - 168));
        v18 = v20;
      }
      while (v20 != v17);
      v19 = *v16;
    }
    *(_QWORD *)(a1 + 160) = v17;
    operator delete(v19);
    *v16 = 0;
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 168) = 0;
  }
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a2 + 168) = 0;
  v21 = *(void **)(a1 + 176);
  if (v21)
  {
    *(_QWORD *)(a1 + 184) = v21;
    operator delete(v21);
    *(_QWORD *)(a1 + 176) = 0;
    *(_QWORD *)(a1 + 184) = 0;
    *(_QWORD *)(a1 + 192) = 0;
  }
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a2 + 184) = 0;
  *(_QWORD *)(a2 + 192) = 0;
  v22 = *(void **)(a1 + 200);
  if (v22)
  {
    *(_QWORD *)(a1 + 208) = v22;
    operator delete(v22);
    *(_QWORD *)(a1 + 200) = 0;
    *(_QWORD *)(a1 + 208) = 0;
    *(_QWORD *)(a1 + 216) = 0;
  }
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a2 + 200) = 0;
  *(_QWORD *)(a2 + 208) = 0;
  *(_QWORD *)(a2 + 216) = 0;
  v23 = (void **)(a1 + 224);
  v24 = *(_QWORD *)(a1 + 224);
  if (v24)
  {
    v25 = *(_QWORD *)(a1 + 232);
    v26 = *(void **)(a1 + 224);
    if (v25 != v24)
    {
      v27 = *(_QWORD *)(a1 + 232);
      do
      {
        v29 = *(void **)(v27 - 24);
        v27 -= 24;
        v28 = v29;
        if (v29)
        {
          *(_QWORD *)(v25 - 16) = v28;
          operator delete(v28);
        }
        v25 = v27;
      }
      while (v27 != v24);
      v26 = *v23;
    }
    *(_QWORD *)(a1 + 232) = v24;
    operator delete(v26);
    *v23 = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 240) = 0;
  }
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a2 + 224) = 0;
  *(_QWORD *)(a2 + 232) = 0;
  *(_QWORD *)(a2 + 240) = 0;
  v30 = a1 + 256;
  sub_20E86872C(a1 + 248, *(_QWORD **)(a1 + 256));
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  v31 = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 256) = v31;
  v32 = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 264) = v32;
  if (v32)
  {
    *(_QWORD *)(v31 + 16) = v30;
    *(_QWORD *)(a2 + 248) = a2 + 256;
    *(_QWORD *)(a2 + 256) = 0;
    *(_QWORD *)(a2 + 264) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 248) = v30;
  }
  v33 = a1 + 280;
  sub_20E991800(a1 + 272, *(_QWORD **)(a1 + 280));
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  v34 = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 280) = v34;
  v35 = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 288) = v35;
  if (v35)
  {
    *(_QWORD *)(v34 + 16) = v33;
    *(_QWORD *)(a2 + 272) = a2 + 280;
    *(_QWORD *)(a2 + 280) = 0;
    *(_QWORD *)(a2 + 288) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 272) = v33;
  }
  sub_20E9907F4(a1 + 296, a2 + 296);
  return a1;
}

_QWORD *sub_20E99015C(_QWORD *a1, uint64_t a2)
{
  void **v4;
  void **v5;
  void **v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;

  v4 = (void **)*a1;
  if (*a1)
  {
    v5 = (void **)a1[1];
    v6 = (void **)*a1;
    if (v5 != v4)
    {
      do
      {
        if (*((_BYTE *)v5 - 8) && *((char *)v5 - 9) < 0)
          operator delete(*(v5 - 4));
        v5 -= 52;
      }
      while (v5 != v4);
      v6 = (void **)*a1;
    }
    a1[1] = v4;
    operator delete(v6);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v7 = (void **)(a1 + 3);
  v8 = a1[3];
  if (v8)
  {
    v9 = a1[4];
    v10 = (void *)a1[3];
    if (v9 != v8)
    {
      do
      {
        if (*(_BYTE *)(v9 - 8) && *(char *)(v9 - 9) < 0)
          operator delete(*(void **)(v9 - 32));
        v9 -= 416;
      }
      while (v9 != v8);
      v10 = *v7;
    }
    a1[4] = v8;
    operator delete(v10);
    *v7 = 0;
    a1[4] = 0;
    a1[5] = 0;
  }
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  a1[5] = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v11 = (void **)(a1 + 6);
  v12 = a1[6];
  if (v12)
  {
    v13 = a1[7];
    v14 = (void *)a1[6];
    if (v13 != v12)
    {
      do
      {
        if (*(_BYTE *)(v13 - 8) && *(char *)(v13 - 9) < 0)
          operator delete(*(void **)(v13 - 32));
        v13 -= 416;
      }
      while (v13 != v12);
      v14 = *v11;
    }
    a1[7] = v12;
    operator delete(v14);
    *v11 = 0;
    a1[7] = 0;
    a1[8] = 0;
  }
  *((_OWORD *)a1 + 3) = *(_OWORD *)(a2 + 48);
  a1[8] = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  v15 = (void **)(a1 + 9);
  v16 = a1[9];
  if (v16)
  {
    v17 = a1[10];
    v18 = (void *)a1[9];
    if (v17 != v16)
    {
      do
      {
        if (*(_BYTE *)(v17 - 8) && *(char *)(v17 - 9) < 0)
          operator delete(*(void **)(v17 - 32));
        v17 -= 48;
      }
      while (v17 != v16);
      v18 = *v15;
    }
    a1[10] = v16;
    operator delete(v18);
    *v15 = 0;
    a1[10] = 0;
    a1[11] = 0;
  }
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 72);
  a1[11] = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  v19 = (void *)a1[12];
  if (v19)
  {
    a1[13] = v19;
    operator delete(v19);
    a1[12] = 0;
    a1[13] = 0;
    a1[14] = 0;
  }
  *((_OWORD *)a1 + 6) = *(_OWORD *)(a2 + 96);
  a1[14] = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  v20 = (void *)a1[15];
  if (v20)
  {
    a1[16] = v20;
    operator delete(v20);
    a1[15] = 0;
    a1[16] = 0;
    a1[17] = 0;
  }
  *(_OWORD *)(a1 + 15) = *(_OWORD *)(a2 + 120);
  a1[17] = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  return a1;
}

void sub_20E9903D4(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  void *v6;

  if (a2)
  {
    sub_20E9903D4(a1, *a2);
    sub_20E9903D4(a1, a2[1]);
    v4 = (_QWORD *)a2[5];
    if (v4)
    {
      v5 = (_QWORD *)a2[6];
      v6 = (void *)a2[5];
      if (v5 != v4)
      {
        do
        {
          v5 -= 14;
          sub_20E990454(v5);
        }
        while (v5 != v4);
        v6 = (void *)a2[5];
      }
      a2[6] = v4;
      operator delete(v6);
    }
    operator delete(a2);
  }
}

void sub_20E990454(_QWORD *a1)
{
  void *v2;
  void *v3;
  void (***v4)(_QWORD);
  void (***v5)(_QWORD);
  void *v6;
  void (***v7)(_QWORD);
  void (***v8)(_QWORD);
  void (**v9)(_QWORD);
  BOOL v10;
  void (***v11)(_QWORD);
  void (***v12)(_QWORD);
  void *v13;
  void (***v14)(_QWORD);
  void (***v15)(_QWORD);
  void (**v16)(_QWORD);

  v2 = (void *)a1[11];
  if (v2)
  {
    a1[12] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[8];
  if (v3)
  {
    a1[9] = v3;
    operator delete(v3);
  }
  v4 = (void (***)(_QWORD))a1[5];
  if (v4)
  {
    v5 = (void (***)(_QWORD))a1[6];
    v6 = (void *)a1[5];
    if (v5 != v4)
    {
      v7 = v5 - 18;
      v8 = v5 - 18;
      do
      {
        v9 = *v8;
        v8 -= 18;
        (*v9)(v7);
        v10 = v7 == v4;
        v7 = v8;
      }
      while (!v10);
      v6 = (void *)a1[5];
    }
    a1[6] = v4;
    operator delete(v6);
  }
  v11 = (void (***)(_QWORD))a1[2];
  if (v11)
  {
    v12 = (void (***)(_QWORD))a1[3];
    v13 = (void *)a1[2];
    if (v12 != v11)
    {
      v14 = v12 - 18;
      v15 = v12 - 18;
      do
      {
        v16 = *v15;
        v15 -= 18;
        (*v16)(v14);
        v10 = v14 == v11;
        v14 = v15;
      }
      while (!v10);
      v13 = (void *)a1[2];
    }
    a1[3] = v11;
    operator delete(v13);
  }
}

void sub_20E990534(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  void *v6;

  if (a2)
  {
    sub_20E990534(a1, *a2);
    sub_20E990534(a1, a2[1]);
    v4 = (_QWORD *)a2[5];
    if (v4)
    {
      v5 = (_QWORD *)a2[6];
      v6 = (void *)a2[5];
      if (v5 != v4)
      {
        do
        {
          v5 -= 13;
          sub_20E9905B4(v5);
        }
        while (v5 != v4);
        v6 = (void *)a2[5];
      }
      a2[6] = v4;
      operator delete(v6);
    }
    operator delete(a2);
  }
}

void sub_20E9905B4(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[7];
  if (v3)
  {
    a1[8] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[4];
  if (v4)
  {
    a1[5] = v4;
    operator delete(v4);
  }
  v5 = a1[1];
  if (v5)
  {
    v6 = a1[2];
    v7 = (void *)a1[1];
    if (v6 != v5)
    {
      do
      {
        sub_20E990658(v6 - 208);
        sub_20E990658(v6 - 416);
        v6 -= 440;
      }
      while (v6 != v5);
      v7 = (void *)a1[1];
    }
    a1[2] = v5;
    operator delete(v7);
  }
}

uint64_t sub_20E990658(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = *(void **)(a1 + 184);
  if (v2)
  {
    *(_QWORD *)(a1 + 192) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 160);
  if (v3)
  {
    *(_QWORD *)(a1 + 168) = v3;
    operator delete(v3);
  }
  if (*(_BYTE *)(a1 + 152))
  {
    v4 = *(void **)(a1 + 128);
    if (v4)
    {
      *(_QWORD *)(a1 + 136) = v4;
      operator delete(v4);
    }
  }
  v5 = *(void **)(a1 + 104);
  if (v5)
  {
    *(_QWORD *)(a1 + 112) = v5;
    operator delete(v5);
  }
  if (*(_BYTE *)(a1 + 96))
  {
    v6 = *(void **)(a1 + 72);
    if (v6)
    {
      *(_QWORD *)(a1 + 80) = v6;
      operator delete(v6);
    }
  }
  v7 = *(void **)(a1 + 48);
  if (v7)
  {
    *(_QWORD *)(a1 + 56) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 24);
  if (v8)
  {
    *(_QWORD *)(a1 + 32) = v8;
    operator delete(v8);
  }
  v9 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v9;
    operator delete(v9);
  }
  return a1;
}

void **sub_20E990708(void **a1, uint64_t a2)
{
  char *v4;
  char *v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *v10;
  void *v11;
  void *v12;

  v4 = (char *)*a1;
  if (*a1)
  {
    v5 = (char *)a1[1];
    v6 = *a1;
    if (v5 != v4)
    {
      do
      {
        v7 = (std::__shared_weak_count *)*((_QWORD *)v5 - 1);
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v9 = __ldaxr(p_shared_owners);
          while (__stlxr(v9 - 1, p_shared_owners));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        v5 -= 16;
      }
      while (v5 != v4);
      v6 = *a1;
    }
    a1[1] = v4;
    operator delete(v6);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v10 = *(void **)(a2 + 24);
  a1[2] = *(void **)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  a1[3] = v10;
  v11 = *(void **)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  a1[4] = v11;
  v12 = *(void **)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  a1[5] = v12;
  sub_20E990A10((uint64_t)(a1 + 6), a2 + 48);
  return a1;
}

void sub_20E9907F4(uint64_t a1, uint64_t a2)
{
  void **v3;
  void *v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  if (*(unsigned __int8 *)(a1 + 40) == *(unsigned __int8 *)(a2 + 40))
  {
    if (*(_BYTE *)(a1 + 40))
      sub_20E99090C(a1, (uint64_t *)a2);
  }
  else if (*(_BYTE *)(a1 + 40))
  {
    v3 = *(void ***)(a1 + 16);
    if (v3)
    {
      do
      {
        v5 = (void **)*v3;
        if (*((char *)v3 + 39) < 0)
          operator delete(v3[2]);
        operator delete(v3);
        v3 = v5;
      }
      while (v5);
    }
    v4 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v4)
      operator delete(v4);
    *(_BYTE *)(a1 + 40) = 0;
  }
  else
  {
    v6 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v9 = *(_QWORD *)(a2 + 16);
    v7 = a2 + 16;
    v8 = v9;
    *(_QWORD *)(a1 + 16) = v9;
    v10 = *(_QWORD *)(v7 + 8);
    *(_QWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(v7 + 16);
    if (v10)
    {
      v11 = *(_QWORD *)(v8 + 8);
      v12 = *(_QWORD *)(a1 + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v11 >= v12)
          v11 %= v12;
      }
      else
      {
        v11 &= v12 - 1;
      }
      *(_QWORD *)(v6 + 8 * v11) = a1 + 16;
      *(_QWORD *)v7 = 0;
      *(_QWORD *)(v7 + 8) = 0;
    }
    *(_BYTE *)(a1 + 40) = 1;
  }
}

void sub_20E99090C(uint64_t a1, uint64_t *a2)
{
  void **v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void **v16;

  if (*(_QWORD *)(a1 + 24))
  {
    v4 = *(void ***)(a1 + 16);
    if (v4)
    {
      do
      {
        v16 = (void **)*v4;
        if (*((char *)v4 + 39) < 0)
          operator delete(v4[2]);
        operator delete(v4);
        v4 = v16;
      }
      while (v16);
    }
    *(_QWORD *)(a1 + 16) = 0;
    v5 = *(_QWORD *)(a1 + 8);
    if (v5)
    {
      for (i = 0; i != v5; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
  v7 = *a2;
  *a2 = 0;
  v8 = *(void **)a1;
  *(_QWORD *)a1 = v7;
  if (v8)
    operator delete(v8);
  v11 = a2[2];
  v10 = a2 + 2;
  v9 = v11;
  v12 = *(v10 - 1);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(a1 + 8) = v12;
  *(v10 - 1) = 0;
  v13 = v10[1];
  *(_QWORD *)(a1 + 24) = v13;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v10 + 4);
  if (v13)
  {
    v14 = *(_QWORD *)(v9 + 8);
    v15 = *(_QWORD *)(a1 + 8);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v14 >= v15)
        v14 %= v15;
    }
    else
    {
      v14 &= v15 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v14) = a1 + 16;
    *v10 = 0;
    v10[1] = 0;
  }
}

uint64_t sub_20E990A10(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  _QWORD *v5;
  void **v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;

  if (a1 != a2)
  {
    v5 = (_QWORD *)(a2 + 48);
    v4 = *(std::mutex **)(a2 + 48);
    std::mutex::lock(v4);
    *(_WORD *)a1 = *(_WORD *)a2;
    v6 = (void **)(a1 + 8);
    v7 = *(_QWORD **)(a1 + 8);
    if (v7)
    {
      v8 = *(_QWORD **)(a1 + 16);
      v9 = *(void **)(a1 + 8);
      if (v8 != v7)
      {
        v10 = v8 - 1;
        do
        {
          v12 = (_QWORD *)*v10;
          *v10 = 0;
          if (v12)
            sub_20E990B40((uint64_t)v10, v12);
        }
        while (v10-- != v7);
        v9 = *v6;
      }
      *(_QWORD *)(a1 + 16) = v7;
      operator delete(v9);
      *v6 = 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = 0;
    }
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    v13 = *(_OWORD *)(a2 + 48);
    *v5 = 0;
    v5[1] = 0;
    v14 = *(std::__shared_weak_count **)(a1 + 56);
    *(_OWORD *)(a1 + 48) = v13;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 48) + 64) = a1;
    std::mutex::unlock(v4);
  }
  return a1;
}

void sub_20E990B40(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;

  if (a2)
  {
    sub_20E990BF8((uint64_t)(a2 + 8));
    v3 = a2[3];
    if (v3)
    {
      v4 = a2[4];
      v5 = (void *)a2[3];
      if (v4 != v3)
      {
        do
        {
          v4 -= 240;
          sub_20E990F68(v4);
        }
        while (v4 != v3);
        v5 = (void *)a2[3];
      }
      a2[4] = v3;
      operator delete(v5);
    }
    v6 = (_QWORD *)*a2;
    if (*a2)
    {
      v7 = (_QWORD *)a2[1];
      v8 = (_QWORD *)*a2;
      if (v7 != v6)
      {
        do
        {
          v7 -= 13;
          sub_20E9905B4(v7);
        }
        while (v7 != v6);
        v8 = (_QWORD *)*a2;
      }
      a2[1] = v6;
      operator delete(v8);
    }
    JUMPOUT(0x212BC6398);
  }
}

uint64_t sub_20E990BF8(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = (void *)v2[107];
      if (v6)
      {
        v2[108] = v6;
        operator delete(v6);
      }
      v7 = (void *)v2[102];
      if (v7)
      {
        v2[103] = v7;
        operator delete(v7);
      }
      v8 = (void *)v2[96];
      if (v8)
      {
        v2[97] = v8;
        operator delete(v8);
      }
      sub_20E990C88((uint64_t)(v2 + 3));
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t sub_20E990C88(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *(void **)(a1 + 656);
  if (v2)
  {
    *(_QWORD *)(a1 + 664) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 616);
  if (v3)
  {
    *(_QWORD *)(a1 + 624) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 576);
  if (v4)
  {
    *(_QWORD *)(a1 + 584) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 552);
  if (v5)
  {
    *(_QWORD *)(a1 + 560) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 528);
  if (v6)
  {
    *(_QWORD *)(a1 + 536) = v6;
    operator delete(v6);
  }
  if (*(_BYTE *)(a1 + 520))
  {
    v7 = *(_QWORD *)(a1 + 496);
    if (v7)
    {
      v8 = *(_QWORD *)(a1 + 504);
      v9 = *(void **)(a1 + 496);
      if (v8 != v7)
      {
        do
        {
          v10 = *(void **)(v8 - 32);
          if (v10)
          {
            *(_QWORD *)(v8 - 24) = v10;
            operator delete(v10);
          }
          v11 = *(void **)(v8 - 56);
          if (v11)
          {
            *(_QWORD *)(v8 - 48) = v11;
            operator delete(v11);
          }
          v8 -= 64;
        }
        while (v8 != v7);
        v9 = *(void **)(a1 + 496);
      }
      *(_QWORD *)(a1 + 504) = v7;
      operator delete(v9);
    }
  }
  if (*(_BYTE *)(a1 + 488))
  {
    v12 = *(_QWORD *)(a1 + 464);
    if (v12)
    {
      v13 = *(_QWORD *)(a1 + 472);
      v14 = *(void **)(a1 + 464);
      if (v13 != v12)
      {
        do
        {
          v15 = *(void **)(v13 - 32);
          if (v15)
          {
            *(_QWORD *)(v13 - 24) = v15;
            operator delete(v15);
          }
          v16 = *(void **)(v13 - 56);
          if (v16)
          {
            *(_QWORD *)(v13 - 48) = v16;
            operator delete(v16);
          }
          v13 -= 64;
        }
        while (v13 != v12);
        v14 = *(void **)(a1 + 464);
      }
      *(_QWORD *)(a1 + 472) = v12;
      operator delete(v14);
    }
  }
  if (*(_BYTE *)(a1 + 456))
  {
    sub_20E990EA4((uint64_t *)(a1 + 408));
    v17 = *(void **)(a1 + 384);
    if (v17)
    {
      *(_QWORD *)(a1 + 392) = v17;
      operator delete(v17);
    }
    v18 = *(void **)(a1 + 304);
    if (v18)
    {
      *(_QWORD *)(a1 + 312) = v18;
      operator delete(v18);
    }
  }
  if (*(_BYTE *)(a1 + 280))
  {
    sub_20E990EA4((uint64_t *)(a1 + 232));
    v19 = *(void **)(a1 + 208);
    if (v19)
    {
      *(_QWORD *)(a1 + 216) = v19;
      operator delete(v19);
    }
    v20 = *(void **)(a1 + 128);
    if (v20)
    {
      *(_QWORD *)(a1 + 136) = v20;
      operator delete(v20);
    }
  }
  v21 = *(void **)(a1 + 72);
  if (v21)
  {
    *(_QWORD *)(a1 + 80) = v21;
    operator delete(v21);
  }
  v22 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v22)
    goto LABEL_49;
  p_shared_owners = (unint64_t *)&v22->__shared_owners_;
  do
    v24 = __ldaxr(p_shared_owners);
  while (__stlxr(v24 - 1, p_shared_owners));
  if (v24)
  {
LABEL_49:
    v25 = a1 + 32;
    v26 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    if (!v26)
      goto LABEL_51;
    goto LABEL_50;
  }
  ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
  std::__shared_weak_count::__release_weak(v22);
  v25 = a1 + 32;
  v26 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v26)
LABEL_50:
    sub_20E8E931C(v25, v26);
LABEL_51:
  v27 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v27)
    sub_20E8E931C(a1 + 24, v27);
  return a1;
}

void sub_20E990EA4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  void *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        v7 = v3[2];
        if (v7)
        {
          v8 = v3[3];
          v5 = (void *)v3[2];
          if (v8 != v7)
          {
            do
            {
              v9 = *(void **)(v8 - 96);
              if (v9)
              {
                *(_QWORD *)(v8 - 88) = v9;
                operator delete(v9);
              }
              v10 = *(void **)(v8 - 120);
              if (v10)
              {
                *(_QWORD *)(v8 - 112) = v10;
                operator delete(v10);
              }
              v8 -= 120;
            }
            while (v8 != v7);
            v5 = (void *)v3[2];
          }
          v3[3] = v7;
          operator delete(v5);
        }
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != a1);
    }
  }
}

void **sub_20E990F68(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = *(void **)(a1 + 216);
  if (v2)
  {
    *(_QWORD *)(a1 + 224) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 192);
  if (v3)
  {
    *(_QWORD *)(a1 + 200) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 168);
  if (v4)
  {
    *(_QWORD *)(a1 + 176) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 144);
  if (v5)
  {
    *(_QWORD *)(a1 + 152) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 120);
  if (v6)
  {
    *(_QWORD *)(a1 + 128) = v6;
    operator delete(v6);
  }
  return sub_20E990FD8((void **)(a1 + 24));
}

void **sub_20E990FD8(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char *v8;
  char *v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  char *v17;
  char *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;

  v2 = (char *)a1[9];
  if (v2)
  {
    v3 = (char *)a1[10];
    v4 = a1[9];
    if (v3 != v2)
    {
      do
      {
        if (*(v3 - 8))
        {
          v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 2);
          if (v5)
          {
            p_shared_owners = (unint64_t *)&v5->__shared_owners_;
            do
              v7 = __ldaxr(p_shared_owners);
            while (__stlxr(v7 - 1, p_shared_owners));
            if (!v7)
            {
              ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
              std::__shared_weak_count::__release_weak(v5);
            }
          }
        }
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = a1[9];
    }
    a1[10] = v2;
    operator delete(v4);
  }
  v8 = (char *)a1[6];
  if (v8)
  {
    v9 = (char *)a1[7];
    v10 = a1[6];
    if (v9 == v8)
    {
LABEL_30:
      a1[7] = v8;
      operator delete(v10);
      goto LABEL_31;
    }
    while (1)
    {
      if (*(v9 - 8))
      {
        v11 = (std::__shared_weak_count *)*((_QWORD *)v9 - 38);
        if (!v11)
          goto LABEL_22;
        v12 = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
          v14 = (std::__shared_weak_count *)*((_QWORD *)v9 - 40);
          if (v14)
          {
LABEL_23:
            v15 = (unint64_t *)&v14->__shared_owners_;
            do
              v16 = __ldaxr(v15);
            while (__stlxr(v16 - 1, v15));
            if (!v16)
            {
              ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
              std::__shared_weak_count::__release_weak(v14);
            }
          }
        }
        else
        {
LABEL_22:
          v14 = (std::__shared_weak_count *)*((_QWORD *)v9 - 40);
          if (v14)
            goto LABEL_23;
        }
      }
      v9 -= 408;
      if (v9 == v8)
      {
        v10 = a1[6];
        goto LABEL_30;
      }
    }
  }
LABEL_31:
  v17 = (char *)a1[3];
  if (v17)
  {
    v18 = (char *)a1[4];
    v19 = a1[3];
    if (v18 != v17)
    {
      do
      {
        v20 = (std::__shared_weak_count *)*((_QWORD *)v18 - 1);
        if (v20)
        {
          v21 = (unint64_t *)&v20->__shared_owners_;
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        v18 -= 16;
      }
      while (v18 != v17);
      v19 = a1[3];
    }
    a1[4] = v17;
    operator delete(v19);
  }
  v23 = (char *)*a1;
  if (*a1)
  {
    v24 = (char *)a1[1];
    v25 = *a1;
    if (v24 != v23)
    {
      do
      {
        v26 = (std::__shared_weak_count *)*((_QWORD *)v24 - 1);
        if (v26)
        {
          v27 = (unint64_t *)&v26->__shared_owners_;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        v24 -= 16;
      }
      while (v24 != v23);
      v25 = *a1;
    }
    a1[1] = v23;
    operator delete(v25);
  }
  return a1;
}

__n128 sub_20E991220(char **a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  void *v7;
  char *v8;
  char *v9;
  char *v10;
  void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __n128 result;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  char *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _OWORD *v32;
  _OWORD *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;

  if (*((unsigned __int8 *)a1 + 312) == *(unsigned __int8 *)(a2 + 312))
  {
    if (*((_BYTE *)a1 + 312))
    {
      v4 = *a1;
      if (*a1)
      {
        v5 = a1[1];
        v6 = *a1;
        if (v5 != v4)
        {
          do
          {
            v7 = (void *)*((_QWORD *)v5 - 22);
            if (v7)
            {
              *((_QWORD *)v5 - 21) = v7;
              operator delete(v7);
            }
            v5 -= 272;
          }
          while (v5 != v4);
          v6 = *a1;
        }
        a1[1] = v4;
        operator delete(v6);
        *a1 = 0;
        a1[1] = 0;
        a1[2] = 0;
      }
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = *(char **)(a2 + 16);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *((_DWORD *)a1 + 6) = *(_DWORD *)(a2 + 24);
      v25 = *(_OWORD *)(a2 + 32);
      a1[6] = *(char **)(a2 + 48);
      *((_OWORD *)a1 + 2) = v25;
      v26 = *(_OWORD *)(a2 + 88);
      v27 = *(_OWORD *)(a2 + 104);
      v28 = *(char **)(a2 + 120);
      *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 72);
      a1[15] = v28;
      *(_OWORD *)(a1 + 13) = v27;
      *(_OWORD *)(a1 + 11) = v26;
      *(_OWORD *)(a1 + 7) = *(_OWORD *)(a2 + 56);
      v30 = *(_OWORD *)(a2 + 160);
      v29 = *(_OWORD *)(a2 + 176);
      v31 = *(_OWORD *)(a2 + 144);
      a1[24] = *(char **)(a2 + 192);
      *((_OWORD *)a1 + 10) = v30;
      *((_OWORD *)a1 + 11) = v29;
      *((_OWORD *)a1 + 9) = v31;
      *((_OWORD *)a1 + 8) = *(_OWORD *)(a2 + 128);
      v32 = a1 + 25;
      v33 = (_OWORD *)(a2 + 200);
      if (*((unsigned __int8 *)a1 + 272) == *(unsigned __int8 *)(a2 + 272))
      {
        if (*((_BYTE *)a1 + 272))
        {
          *v32 = *v33;
          v34 = *(_OWORD *)(a2 + 216);
          v35 = *(_OWORD *)(a2 + 232);
          v36 = *(_OWORD *)(a2 + 248);
          a1[33] = *(char **)(a2 + 264);
          *(_OWORD *)(a1 + 29) = v35;
          *(_OWORD *)(a1 + 31) = v36;
          *(_OWORD *)(a1 + 27) = v34;
        }
      }
      else if (*((_BYTE *)a1 + 272))
      {
        *((_BYTE *)a1 + 272) = 0;
      }
      else
      {
        *v32 = *v33;
        v37 = *(_OWORD *)(a2 + 216);
        v38 = *(_OWORD *)(a2 + 232);
        v39 = *(_OWORD *)(a2 + 248);
        a1[33] = *(char **)(a2 + 264);
        *(_OWORD *)(a1 + 29) = v38;
        *(_OWORD *)(a1 + 31) = v39;
        *(_OWORD *)(a1 + 27) = v37;
        *((_BYTE *)a1 + 272) = 1;
      }
      result = *(__n128 *)(a2 + 280);
      *(_OWORD *)((char *)a1 + 289) = *(_OWORD *)(a2 + 289);
      *(__n128 *)(a1 + 35) = result;
    }
  }
  else if (*((_BYTE *)a1 + 312))
  {
    v8 = *a1;
    if (*a1)
    {
      v9 = a1[1];
      v10 = *a1;
      if (v9 != v8)
      {
        do
        {
          v11 = (void *)*((_QWORD *)v9 - 22);
          if (v11)
          {
            *((_QWORD *)v9 - 21) = v11;
            operator delete(v11);
          }
          v9 -= 272;
        }
        while (v9 != v8);
        v10 = *a1;
      }
      a1[1] = v8;
      operator delete(v10);
    }
    *((_BYTE *)a1 + 312) = 0;
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = *(char **)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *((_DWORD *)a1 + 6) = *(_DWORD *)(a2 + 24);
    v12 = *(_OWORD *)(a2 + 32);
    a1[6] = *(char **)(a2 + 48);
    *((_OWORD *)a1 + 2) = v12;
    v13 = *(_OWORD *)(a2 + 88);
    v14 = *(_OWORD *)(a2 + 104);
    v15 = *(char **)(a2 + 120);
    *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 72);
    a1[15] = v15;
    *(_OWORD *)(a1 + 13) = v14;
    *(_OWORD *)(a1 + 11) = v13;
    *(_OWORD *)(a1 + 7) = *(_OWORD *)(a2 + 56);
    v16 = *(_OWORD *)(a2 + 128);
    v17 = *(_OWORD *)(a2 + 144);
    v18 = *(_OWORD *)(a2 + 160);
    v19 = *(_OWORD *)(a2 + 176);
    v20 = *(char **)(a2 + 192);
    *((_BYTE *)a1 + 200) = 0;
    a1[24] = v20;
    *((_OWORD *)a1 + 11) = v19;
    *((_OWORD *)a1 + 10) = v18;
    *((_OWORD *)a1 + 9) = v17;
    *((_OWORD *)a1 + 8) = v16;
    *((_BYTE *)a1 + 272) = 0;
    if (*(_BYTE *)(a2 + 272))
    {
      *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 200);
      v21 = *(_OWORD *)(a2 + 216);
      v22 = *(_OWORD *)(a2 + 232);
      v23 = *(_OWORD *)(a2 + 248);
      a1[33] = *(char **)(a2 + 264);
      *(_OWORD *)(a1 + 29) = v22;
      *(_OWORD *)(a1 + 31) = v23;
      *(_OWORD *)(a1 + 27) = v21;
      *((_BYTE *)a1 + 272) = 1;
    }
    result = *(__n128 *)(a2 + 280);
    *(_OWORD *)((char *)a1 + 289) = *(_OWORD *)(a2 + 289);
    *(__n128 *)(a1 + 35) = result;
    *((_BYTE *)a1 + 312) = 1;
  }
  return result;
}

void sub_20E991500(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20E991500(a1, *a2);
    sub_20E991500(a1, a2[1]);
    sub_20E9545B0((uint64_t)(a2 + 5));
    operator delete(a2);
  }
}

_QWORD *sub_20E991548(_QWORD *a1)
{
  uint64_t v2;
  void **v3;
  void *v4;
  void *v5;
  void **v6;
  void **v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;

  v3 = (void **)(a1 + 17);
  v2 = a1[17];
  if (v2)
  {
    sub_20E991630((uint64_t)(a1 + 17), v2);
    operator delete(*v3);
  }
  v4 = (void *)a1[14];
  if (v4)
  {
    a1[15] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[11];
  if (v5)
  {
    a1[12] = v5;
    operator delete(v5);
  }
  v6 = (void **)a1[8];
  if (v6)
  {
    v7 = (void **)a1[9];
    v8 = (void *)a1[8];
    if (v7 != v6)
    {
      do
        v7 = sub_20E991750(v7 - 14);
      while (v7 != v6);
      v8 = (void *)a1[8];
    }
    a1[9] = v6;
    operator delete(v8);
  }
  v9 = a1[5];
  if (v9)
  {
    v10 = a1[6];
    v11 = (void *)a1[5];
    if (v10 != v9)
    {
      v12 = a1[6];
      do
      {
        v14 = *(void **)(v12 - 24);
        v12 -= 24;
        v13 = v14;
        if (v14)
        {
          *(_QWORD *)(v10 - 16) = v13;
          operator delete(v13);
        }
        v10 = v12;
      }
      while (v12 != v9);
      v11 = (void *)a1[5];
    }
    a1[6] = v9;
    operator delete(v11);
  }
  return a1;
}

void sub_20E991630(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;

  for (i = *(_QWORD *)(a1 + 8); i != a2; i -= 56)
  {
    v6 = *(void **)(i - 24);
    if (v6)
    {
      *(_QWORD *)(i - 16) = v6;
      operator delete(v6);
    }
    v7 = *(_QWORD *)(i - 48);
    if (v7)
    {
      v8 = *(_QWORD *)(i - 40);
      v5 = *(void **)(i - 48);
      if (v8 != v7)
      {
        do
        {
          v10 = *(void **)(v8 - 32);
          if (v10)
          {
            *(_QWORD *)(v8 - 24) = v10;
            operator delete(v10);
          }
          v11 = *(void **)(v8 - 56);
          if (v11)
          {
            *(_QWORD *)(v8 - 48) = v11;
            operator delete(v11);
          }
          v12 = *(void **)(v8 - 88);
          if (v12)
          {
            *(_QWORD *)(v8 - 80) = v12;
            operator delete(v12);
          }
          v13 = *(_QWORD *)(v8 - 112);
          if (v13)
          {
            v14 = *(_QWORD *)(v8 - 104);
            v9 = *(void **)(v8 - 112);
            if (v14 != v13)
            {
              do
              {
                v15 = *(void **)(v14 - 24);
                if (v15)
                {
                  *(_QWORD *)(v14 - 16) = v15;
                  operator delete(v15);
                }
                v16 = *(void **)(v14 - 48);
                if (v16)
                {
                  *(_QWORD *)(v14 - 40) = v16;
                  operator delete(v16);
                }
                v14 -= 112;
              }
              while (v14 != v13);
              v9 = *(void **)(v8 - 112);
            }
            *(_QWORD *)(v8 - 104) = v13;
            operator delete(v9);
          }
          v8 -= 136;
        }
        while (v8 != v7);
        v5 = *(void **)(i - 48);
      }
      *(_QWORD *)(i - 40) = v7;
      operator delete(v5);
    }
  }
  *(_QWORD *)(a1 + 8) = a2;
}

void **sub_20E991750(void **a1)
{
  void *v2;
  void *v3;
  void *v4;
  char *v5;
  char *v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  v3 = a1[7];
  if (v3)
  {
    a1[8] = v3;
    operator delete(v3);
  }
  v4 = a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  v5 = (char *)*a1;
  if (*a1)
  {
    v6 = (char *)a1[1];
    v7 = *a1;
    if (v6 != v5)
    {
      do
      {
        v8 = (void *)*((_QWORD *)v6 - 3);
        if (v8)
        {
          *((_QWORD *)v6 - 2) = v8;
          operator delete(v8);
        }
        v9 = (void *)*((_QWORD *)v6 - 6);
        if (v9)
        {
          *((_QWORD *)v6 - 5) = v9;
          operator delete(v9);
        }
        v6 -= 112;
      }
      while (v6 != v5);
      v7 = *a1;
    }
    a1[1] = v5;
    operator delete(v7);
  }
  return a1;
}

void sub_20E991800(uint64_t a1, _QWORD *a2)
{
  void *v4;

  if (a2)
  {
    sub_20E991800(a1, *a2);
    sub_20E991800(a1, a2[1]);
    v4 = (void *)a2[5];
    if (v4)
    {
      a2[6] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

uint64_t sub_20E991850(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;

  if (*(_BYTE *)(a1 + 136))
  {
    v2 = *(_QWORD *)(a1 + 112);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 120);
      v4 = *(void **)(a1 + 112);
      if (v3 != v2)
      {
        do
        {
          if (*(_BYTE *)(v3 - 8) && *(char *)(v3 - 9) < 0)
            operator delete(*(void **)(v3 - 32));
          v3 -= 192;
        }
        while (v3 != v2);
        v4 = *(void **)(a1 + 112);
      }
      *(_QWORD *)(a1 + 120) = v2;
      operator delete(v4);
    }
  }
  v5 = *(_QWORD *)(a1 + 88);
  if (v5)
  {
    v6 = *(_QWORD *)(a1 + 96);
    v7 = *(void **)(a1 + 88);
    if (v6 != v5)
    {
      do
      {
        if (*(_BYTE *)(v6 - 8) && *(char *)(v6 - 9) < 0)
          operator delete(*(void **)(v6 - 32));
        v6 -= 192;
      }
      while (v6 != v5);
      v7 = *(void **)(a1 + 88);
    }
    *(_QWORD *)(a1 + 96) = v5;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 64);
  if (v8)
  {
    *(_QWORD *)(a1 + 72) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(a1 + 40);
  if (v9)
  {
    *(_QWORD *)(a1 + 48) = v9;
    operator delete(v9);
  }
  return a1;
}

uint64_t sub_20E991940(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
  {
    operator delete(*(void **)(a1 + 40));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20E991998(std::__assoc_sub_state *a1)
{
  void *ptr;
  std::exception_ptr v3;
  std::exception_ptr v4;
  std::exception_ptr v5;
  std::unique_lock<std::mutex> __lk;

  __lk.__m_ = &a1->__mut_;
  __lk.__owns_ = 1;
  std::mutex::lock(&a1->__mut_);
  std::__assoc_sub_state::__sub_wait(a1, &__lk);
  ptr = a1->__exception_.__ptr_;
  v5.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v5);
  if (ptr)
  {
    std::exception_ptr::exception_ptr(&v4, &a1->__exception_);
    v3.__ptr_ = &v4;
    std::rethrow_exception(v3);
    __break(1u);
  }
  else if (__lk.__owns_)
  {
    std::mutex::unlock(__lk.__m_);
  }
}

void sub_20E991A2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12)
{
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  if (a12)
    std::mutex::unlock(a11);
  _Unwind_Resume(a1);
}

_DWORD *sub_20E991A58(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C9B33F0[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

_DWORD *sub_20E991B48(_DWORD ***a1)
{
  return sub_20E9737A0(**a1, (char *)(*a1)[1]);
}

void sub_20E991B54(uint64_t a1, uint64_t a2)
{
  sub_20E991B64((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

void sub_20E991B64(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C9B33F0[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_20E877C80((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_20E991D18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_20E991D5C(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20E991E54((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_20E991E4C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_20E991E54(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_20E992050(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877E3C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E992064(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B3478;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20E992074(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B3478;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E9920A4(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    _Block_release(v1);
}

void sub_20E9920C8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B34C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20E9920D8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B34C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E992108(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    _Block_release(v1);
}

uint64_t sub_20E99212C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 32);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_20E99217C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  v2 = *(_QWORD **)(a1 + 32);
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E9921DC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;

  v4 = (_QWORD *)operator new();
  *v4 = &off_24C9B48D0;
  v5 = v4 + 1;
  result = *(_QWORD *)(a1 + 32);
  if (!result)
    goto LABEL_4;
  if (result != a1 + 8)
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 16))(result, v5);
LABEL_4:
    v4[4] = result;
    *a2 = v4;
    return result;
  }
  v4[4] = v5;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  *a2 = v4;
  return result;
}

void sub_20E99227C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10A1C400AA0B987);
  _Unwind_Resume(a1);
}

void sub_20E9922A0()
{
  sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 274, (uint64_t)"", 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_21023DDB0);
  abort();
}

void sub_20E9922DC()
{
  sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 280, (uint64_t)"", 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_21023DDB0);
  abort();
}

uint64_t sub_20E992318()
{
  return 1;
}

uint64_t sub_20E992324(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 301, (uint64_t)"processor_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(_QWORD *)(a1 + 32);
    if (!v4)
      sub_20E86D37C();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, a2);
}

uint64_t sub_20E99239C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)a1 = off_24C9B3518;
  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
  }
  else
  {
LABEL_5:
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20E992428(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)a1 = off_24C9B3518;
  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
LABEL_10:
      JUMPOUT(0x212BC6398);
  }
  else
  {
LABEL_5:
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      goto LABEL_10;
  }
  operator delete(*(void **)(a1 + 8));
  goto LABEL_10;
}

_QWORD *sub_20E9924B8(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v2 = operator new(0x30uLL);
  *v2 = off_24C9B3518;
  v3 = v2 + 1;
  if (*(char *)(a1 + 31) < 0)
  {
    sub_20E860C04(v3, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  v4 = *(_QWORD *)(a1 + 40);
  v2[4] = *(_QWORD *)(a1 + 32);
  v2[5] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return v2;
}

void sub_20E992538(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_BYTE *sub_20E99254C(uint64_t a1, _QWORD *a2)
{
  _BYTE *result;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  *a2 = off_24C9B3518;
  result = a2 + 1;
  if (*(char *)(a1 + 31) < 0)
  {
    result = sub_20E860C04(result, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
    v6 = *(_QWORD *)(a1 + 40);
    a2[4] = *(_QWORD *)(a1 + 32);
    a2[5] = v6;
    if (!v6)
      return result;
  }
  else
  {
    v5 = *(_OWORD *)(a1 + 8);
    a2[3] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)result = v5;
    v6 = *(_QWORD *)(a1 + 40);
    a2[4] = *(_QWORD *)(a1 + 32);
    a2[5] = v6;
    if (!v6)
      return result;
  }
  v7 = (unint64_t *)(v6 + 8);
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
  return result;
}

void sub_20E9925D0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return;
LABEL_8:
    operator delete(*(void **)(a1 + 8));
    return;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  if (*(char *)(a1 + 31) < 0)
    goto LABEL_8;
}

void sub_20E992644(char *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)*((_QWORD *)__p + 5);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      if ((__p[31] & 0x80000000) == 0)
        goto LABEL_6;
LABEL_9:
      operator delete(*((void **)__p + 1));
      operator delete(__p);
      return;
    }
  }
  if (__p[31] < 0)
    goto LABEL_9;
LABEL_6:
  operator delete(__p);
}

uint64_t sub_20E9926C4(uint64_t result, __CFError ***a2)
{
  __CFError **v2;
  __CFError **v3;
  uint64_t v4;
  uint64_t *v5;
  std::string *v6;
  unsigned __int8 v7;
  char *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  std::string *v18;
  std::__shared_weak_count *v19;
  CFDictionaryRef v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t v23;
  std::string *v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  size_t v28;
  unsigned __int8 v29;
  unsigned __int8 v30;
  const char *v31;
  size_t v32;
  std::string::size_type *p_size;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  size_t v40;
  std::__shared_weak_count_vtbl *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  char *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  char *v47;
  char *v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  unint64_t v54;
  char *v55;
  char *v56;
  char *shared_owners;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  const char *v63;
  std::string::size_type v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  void *v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::string *p_value;
  __int128 v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  std::string *v80;
  const char *v81;
  std::__shared_weak_count *size;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  __CFError *v88;
  char *v89;
  char *v90;
  int v91;
  char *v92;
  char *v93;
  std::__shared_weak_count *v94;
  uint64_t v95;
  const char *v96;
  uint64_t v97;
  __CFError **v98;
  const char *v99;
  void *key;
  const char *v101;
  CFDictionaryRef theDict;
  std::__shared_weak_count *v103;
  std::string v104;
  char v105;
  std::string *v106;
  std::string v107;
  char v108;
  std::string v109;
  int v110;
  const char *v111;
  int v112;
  const char *v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  uint64_t v116;
  std::string v117;
  char v118;
  std::string value;
  const char *v120;
  __int128 v121;
  size_t v122;
  __int128 v123;
  uint64_t v124;
  char v125;
  char v126;
  void *v127;
  char v128;
  void *__p;
  char v130;
  uint64_t v131;

  v131 = *MEMORY[0x24BDAC8D0];
  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v4 = result;
    v99 = (const char *)(result + 8);
    key = (void *)*MEMORY[0x24BDBD378];
    v95 = result;
    v98 = a2[1];
    do
    {
      v5 = sub_210219C18();
      sub_20EA67338(v2, &v109);
      if (!(_BYTE)v110)
        sub_20E866B34();
      if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v6 = &v109;
      else
        v6 = (std::string *)v109.__r_.__value_.__r.__words[0];
      v7 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
      if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
      {
        __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DDD0);
      }
      if (!atomic_load(&qword_254A5A450))
        goto LABEL_26;
      LODWORD(value.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)value.__r_.__value_.__r.__words + 4) = (std::string::size_type)v6;
      v9 = (char *)_os_log_send_and_compose_impl();
      v10 = strlen(v9);
      v117.__r_.__value_.__r.__words[0] = 0;
      pthread_threadid_np(0, (__uint64_t *)&v117);
      v11 = v117.__r_.__value_.__r.__words[0];
      timespec_get((timespec *)&v117, 1);
      sub_210219E20(&value, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v5 + 1), (__int128 *)(v5 + 5), "SO:E:%s", 7uLL, v9, v10, v11, &v117);
      std::mutex::lock(&stru_254A5A410);
      v12 = qword_254A5A458;
      for (i = unk_254A5A460; v12 != i; v12 += 40)
      {
        v14 = *(_QWORD *)(v12 + 32);
        if (!v14)
          sub_20E86D37C();
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v14 + 48))(v14, &value);
      }
      std::mutex::unlock(&stru_254A5A410);
      if (v130 < 0)
      {
        operator delete(__p);
        if ((v128 & 0x80000000) == 0)
        {
LABEL_14:
          if (v126)
            goto LABEL_18;
          goto LABEL_20;
        }
      }
      else if ((v128 & 0x80000000) == 0)
      {
        goto LABEL_14;
      }
      operator delete(v127);
      if (v126)
      {
LABEL_18:
        if (v125 < 0)
          operator delete(*((void **)&v123 + 1));
      }
LABEL_20:
      if ((_BYTE)v123 && SHIBYTE(v122) < 0)
        operator delete((void *)v121);
      if ((SHIBYTE(v120) & 0x80000000) == 0)
      {
        if (!v9)
          goto LABEL_26;
LABEL_25:
        free(v9);
        goto LABEL_26;
      }
      operator delete((void *)value.__r_.__value_.__l.__size_);
      if (v9)
        goto LABEL_25;
LABEL_26:
      if (os_signpost_enabled((os_log_t)*v5))
      {
        LODWORD(value.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)value.__r_.__value_.__r.__words + 4) = (std::string::size_type)v6;
        _os_signpost_emit_unreliably_with_name_impl();
      }
      if ((_BYTE)v110 && SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v109.__r_.__value_.__l.__data_);
      sub_20E98F460(&v116);
      if (**(int **)(v116 + 56) <= 5)
      {
        v15 = *(unsigned __int8 *)(v116 + 72);
        v16 = sub_20E8C31DC(v116, "OSLogSurrogateAppender", 1, 0);
        v17 = v16;
        if (v15 || v16)
        {
          v109.__r_.__value_.__r.__words[0] = (std::string::size_type)&v116;
          v109.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
          v109.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
          v110 = 5;
          v111 = "unknown file";
          v112 = 490;
          v113 = "unknown function";
          v114 = 0;
          v115 = 0;
          sub_20EA67338(v2, &v107);
          if (!v108)
            sub_20E866B34();
          if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v18 = &v107;
          else
            v18 = (std::string *)v107.__r_.__value_.__r.__words[0];
          sub_20EA66E78(v2, &theDict);
          v20 = theDict;
          v19 = v103;
          if (v103)
          {
            p_shared_owners = (unint64_t *)&v103->__shared_owners_;
            do
              v22 = __ldxr(p_shared_owners);
            while (__stxr(v22 + 1, p_shared_owners));
            do
              v23 = __ldaxr(p_shared_owners);
            while (__stlxr(v23 - 1, p_shared_owners));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
              std::__shared_weak_count::__release_weak(v19);
            }
          }
          if (!v20
            || (value.__r_.__value_.__r.__words[0] = 0, !key)
            || !CFDictionaryGetValueIfPresent(theDict, key, (const void **)&value.__r_.__value_.__l.__data_))
          {
            v104.__r_.__value_.__s.__data_[0] = 0;
            v105 = 0;
LABEL_184:
            sub_20E866B34();
          }
          sub_20EA5E5C4((CFIndex)value.__r_.__value_.__l.__data_, &v104);
          if (!v105)
            goto LABEL_184;
          v24 = &v104;
          if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v24 = (std::string *)v104.__r_.__value_.__r.__words[0];
          v106 = v24;
          v25 = v99;
          if (*(char *)(v4 + 31) < 0)
            v25 = *(const char **)(v4 + 8);
          v101 = v25;
          v26 = *(_QWORD *)v109.__r_.__value_.__l.__data_;
          v27 = (const char *)(*(_QWORD *)v109.__r_.__value_.__l.__data_ + 16);
          v96 = v27;
          v97 = *(_QWORD *)v109.__r_.__value_.__l.__data_;
          if (*(char *)(*(_QWORD *)v109.__r_.__value_.__l.__data_ + 39) < 0)
          {
            v27 = *(const char **)(v26 + 16);
            v28 = *(_QWORD *)(v26 + 24);
            v30 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v30 & 1) == 0)
            {
LABEL_175:
              if (__cxa_guard_acquire(&qword_254A4A510))
              {
                sub_20E9E46F8((uint64_t)&v117);
                if (v118)
                {
                  *(std::string *)byte_254A4A4F8 = v117;
                }
                else
                {
                  byte_254A4A4F8[23] = 14;
                  strcpy(byte_254A4A4F8, "com.apple.cv3d");
                }
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                __cxa_guard_release(&qword_254A4A510);
                v4 = v95;
              }
            }
          }
          else
          {
            v28 = *(unsigned __int8 *)(*(_QWORD *)v109.__r_.__value_.__l.__data_ + 39);
            v29 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v29 & 1) == 0)
              goto LABEL_175;
          }
          if (byte_254A4A4F8[23] >= 0)
            v31 = byte_254A4A4F8;
          else
            v31 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v32 = byte_254A4A4F8[23];
          else
            v32 = *(_QWORD *)&byte_254A4A4F8[8];
          value.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v31, v27);
          if (v32 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v32 >= 0x17)
          {
            v34 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v32 | 7) != 0x17)
              v34 = v32 | 7;
            v35 = v34 + 1;
            p_size = (std::string::size_type *)operator new(v34 + 1);
            value.__r_.__value_.__r.__words[2] = v32;
            v120 = (const char *)(v35 | 0x8000000000000000);
            value.__r_.__value_.__l.__size_ = (std::string::size_type)p_size;
            v4 = v95;
          }
          else
          {
            HIBYTE(v120) = v32;
            p_size = &value.__r_.__value_.__l.__size_;
            if (!v32)
            {
LABEL_72:
              *((_BYTE *)p_size + v32) = 0;
              LOBYTE(v121) = 1;
              if (v28 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v28 >= 0x17)
              {
                v38 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v28 | 7) != 0x17)
                  v38 = v28 | 7;
                v39 = v38 + 1;
                v36 = (char *)operator new(v38 + 1);
                v122 = v28;
                *(_QWORD *)&v123 = v39 | 0x8000000000000000;
                *((_QWORD *)&v121 + 1) = v36;
                v3 = v98;
              }
              else
              {
                BYTE7(v123) = v28;
                v36 = (char *)&v121 + 8;
                v3 = v98;
                if (!v28)
                {
                  BYTE8(v121) = 0;
                  BYTE8(v123) = 1;
                  v37 = value.__r_.__value_.__r.__words[0];
                  if ((SBYTE7(v123) & 0x80000000) == 0)
                    goto LABEL_76;
LABEL_82:
                  operator delete(*((void **)&v121 + 1));
                  if ((_BYTE)v121)
                    goto LABEL_83;
                  goto LABEL_85;
                }
              }
              memmove(v36, v27, v28);
              v36[v28] = 0;
              BYTE8(v123) = 1;
              v37 = value.__r_.__value_.__r.__words[0];
              if (SBYTE7(v123) < 0)
                goto LABEL_82;
LABEL_76:
              if ((_BYTE)v121)
              {
LABEL_83:
                if (SHIBYTE(v120) < 0)
                  operator delete((void *)value.__r_.__value_.__l.__size_);
              }
LABEL_85:
              if (value.__r_.__value_.__r.__words[0])
                os_release(value.__r_.__value_.__l.__data_);
              if (v17 && *(_QWORD *)(v17 + 24))
              {
                v40 = _os_log_pack_size();
                v41 = (std::__shared_weak_count_vtbl *)operator new(v40, (std::align_val_t)8uLL);
                v42 = (std::__shared_weak_count *)operator new();
                v42->__shared_owners_ = 0;
                v43 = (unint64_t *)&v42->__shared_owners_;
                v42->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v42->__shared_weak_owners_ = 0;
                v42[1].__vftable = v41;
                sub_20E98F554((uint64_t)&value, (char *)v18, (const char **)&v106, &v101);
                v44 = (char *)operator new(0x68uLL);
                v45 = (std::__shared_weak_count *)v44;
                *((_QWORD *)v44 + 1) = 0;
                v46 = (unint64_t *)(v44 + 8);
                *((_QWORD *)v44 + 2) = 0;
                *(_QWORD *)v44 = &off_24C9B32C0;
                *((_QWORD *)v44 + 3) = off_24C9B3310;
                v89 = v44 + 24;
                v47 = v44 + 32;
                *((_OWORD *)v44 + 2) = *(_OWORD *)&value.__r_.__value_.__r.__words[1];
                *((_QWORD *)v44 + 6) = v120;
                v48 = v44 + 56;
                *(_OWORD *)(v44 + 56) = v121;
                *((_QWORD *)v44 + 9) = v122;
                v49 = v44 + 80;
                *((_QWORD *)v44 + 12) = v124;
                *((_OWORD *)v44 + 5) = v123;
                do
                  v50 = __ldxr(v43);
                while (__stxr(v50 + 1, v43));
                do
                  v51 = __ldxr(v46);
                while (__stxr(v51 + 1, v46));
                do
                  v52 = __ldaxr(v46);
                while (__stlxr(v52 - 1, v46));
                if (!v52)
                {
                  v90 = v44 + 56;
                  v92 = v44 + 32;
                  v53 = v44 + 80;
                  (*(void (**)(char *))(*(_QWORD *)v44 + 16))(v44);
                  std::__shared_weak_count::__release_weak(v45);
                  v49 = v53;
                  v48 = v90;
                  v47 = v92;
                }
                do
                  v54 = __ldaxr(v43);
                while (__stlxr(v54 - 1, v43));
                v91 = v15;
                if (!v54)
                {
                  v93 = v47;
                  v55 = v48;
                  v56 = v49;
                  ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                  std::__shared_weak_count::__release_weak(v42);
                  v49 = v56;
                  v48 = v55;
                  v47 = v93;
                }
                v94 = v42;
                if (SHIBYTE(v45[2].__vftable) >= 0)
                  shared_owners = v47;
                else
                  shared_owners = (char *)v45[1].__shared_owners_;
                if (SHIBYTE(v45[3].__vftable) >= 0)
                  v58 = v48;
                else
                  v58 = (char *)v45[2].__shared_owners_;
                if (SHIBYTE(v45[4].__vftable) >= 0)
                  v59 = v49;
                else
                  v59 = (char *)v45[3].__shared_owners_;
                v60 = _os_log_pack_fill();
                *(_DWORD *)v60 = 136315650;
                *(_QWORD *)(v60 + 4) = shared_owners;
                *(_WORD *)(v60 + 12) = 2080;
                *(_QWORD *)(v60 + 14) = v58;
                *(_WORD *)(v60 + 22) = 2080;
                *(_QWORD *)(v60 + 24) = v59;
                v61 = operator new();
                v62 = *(unsigned __int8 *)(v97 + 39);
                v63 = v96;
                if ((v62 & 0x80u) != 0)
                {
                  v63 = *(const char **)(v97 + 16);
                  v62 = *(_QWORD *)(v97 + 24);
                }
                *(_QWORD *)v61 = v41;
                *(_QWORD *)(v61 + 8) = v41;
                *(_QWORD *)(v61 + 16) = v94;
                *(_QWORD *)(v61 + 24) = v89;
                *(_QWORD *)(v61 + 32) = v45;
                *(_QWORD *)(v61 + 40) = v63;
                *(_QWORD *)(v61 + 48) = v62;
                *(_BYTE *)(v61 + 56) = 16;
                value.__r_.__value_.__r.__words[0] = v61;
                (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v17 + 24) + 40))(*(_QWORD *)(v17 + 24), &value);
                v4 = v95;
                v15 = v91;
                v64 = value.__r_.__value_.__r.__words[0];
                value.__r_.__value_.__r.__words[0] = 0;
                v3 = v98;
                if (v64)
                {
                  v65 = *(std::__shared_weak_count **)(v64 + 32);
                  if (v65)
                  {
                    v66 = (unint64_t *)&v65->__shared_owners_;
                    do
                      v67 = __ldaxr(v66);
                    while (__stlxr(v67 - 1, v66));
                    if (!v67)
                    {
                      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
                      std::__shared_weak_count::__release_weak(v65);
                    }
                  }
                  v68 = *(std::__shared_weak_count **)(v64 + 16);
                  if (v68)
                  {
                    v69 = (unint64_t *)&v68->__shared_owners_;
                    do
                      v70 = __ldaxr(v69);
                    while (__stlxr(v70 - 1, v69));
                    if (!v70)
                    {
                      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                      std::__shared_weak_count::__release_weak(v68);
                    }
                  }
                  MEMORY[0x212BC6398](v64, 0x10F0C40B62ED6C6);
                }
              }
              else
              {
                os_log_type_enabled(v37, OS_LOG_TYPE_ERROR);
                LODWORD(value.__r_.__value_.__l.__data_) = 136315650;
                *(std::string::size_type *)((char *)value.__r_.__value_.__r.__words + 4) = (std::string::size_type)v18;
                WORD2(value.__r_.__value_.__r.__words[1]) = 2080;
                *(std::string::size_type *)((char *)&value.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v106;
                HIWORD(value.__r_.__value_.__r.__words[2]) = 2080;
                v120 = v101;
                v71 = (void *)_os_log_send_and_compose_impl();
                if (v71)
                  free(v71);
              }
              if (v105 && SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v104.__r_.__value_.__l.__data_);
              v72 = v103;
              if (v103)
              {
                v73 = (unint64_t *)&v103->__shared_owners_;
                do
                  v74 = __ldaxr(v73);
                while (__stlxr(v74 - 1, v73));
                if (!v74)
                {
                  ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
                  std::__shared_weak_count::__release_weak(v72);
                }
              }
              if (v108 && SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v107.__r_.__value_.__l.__data_);
              if (v15)
              {
                sub_20EA67338(v2, &value);
                if (!(_BYTE)v120)
                  sub_20E866B34();
                if ((value.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  p_value = &value;
                else
                  p_value = (std::string *)value.__r_.__value_.__r.__words[0];
                sub_20EA66E78(v2, (CFMutableDictionaryRef *)&v107);
                v76 = *(_OWORD *)&v107.__r_.__value_.__l.__data_;
                if (v107.__r_.__value_.__l.__size_)
                {
                  v77 = (unint64_t *)(v107.__r_.__value_.__l.__size_ + 8);
                  do
                    v78 = __ldxr(v77);
                  while (__stxr(v78 + 1, v77));
                  do
                    v79 = __ldaxr(v77);
                  while (__stlxr(v79 - 1, v77));
                  if (!v79)
                  {
                    (*(void (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1));
                    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v76 + 1));
                  }
                }
                if (!(_QWORD)v76
                  || (v104.__r_.__value_.__r.__words[0] = 0,
                      !CFDictionaryGetValueIfPresent((CFDictionaryRef)v107.__r_.__value_.__l.__data_, key, (const void **)&v104.__r_.__value_.__l.__data_)))
                {
                  v117.__r_.__value_.__s.__data_[0] = 0;
                  v118 = 0;
LABEL_186:
                  sub_20E866B34();
                }
                sub_20EA5E5C4((CFIndex)v104.__r_.__value_.__l.__data_, &v117);
                if (!v118)
                  goto LABEL_186;
                v80 = &v117;
                if ((v117.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v80 = (std::string *)v117.__r_.__value_.__r.__words[0];
                v81 = v99;
                if (*(char *)(v4 + 31) < 0)
                  v81 = *(const char **)(v4 + 8);
                sub_20E8C003C((uint64_t)&v109, "%s (%s) %s", (const char *)p_value, (const char *)v80, v81);
                if (v118 && SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v117.__r_.__value_.__l.__data_);
                size = (std::__shared_weak_count *)v107.__r_.__value_.__l.__size_;
                if (v107.__r_.__value_.__l.__size_)
                {
                  v83 = (unint64_t *)(v107.__r_.__value_.__l.__size_ + 8);
                  do
                    v84 = __ldaxr(v83);
                  while (__stlxr(v84 - 1, v83));
                  if (!v84)
                  {
                    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                    std::__shared_weak_count::__release_weak(size);
                  }
                }
                if ((_BYTE)v120 && SHIBYTE(value.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(value.__r_.__value_.__l.__data_);
                sub_20E863570((uint64_t)&v109);
              }
              sub_20E863570((uint64_t)&v109);
              v85 = v115;
              if (v115)
              {
                v86 = (unint64_t *)&v115->__shared_owners_;
                do
                  v87 = __ldaxr(v86);
                while (__stlxr(v87 - 1, v86));
                if (!v87)
                {
                  ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                  std::__shared_weak_count::__release_weak(v85);
                }
              }
              goto LABEL_169;
            }
          }
          memmove(p_size, v31, v32);
          goto LABEL_72;
        }
      }
LABEL_169:
      sub_20EA66D38(v2);
      kdebug_trace();
      v88 = *v2;
      if (*v2)
        CFRetain(*v2);
      result = (*(uint64_t (**)(_QWORD, __CFError *))(**(_QWORD **)(v4 + 32) + 16))(**(_QWORD **)(v4 + 32), v88);
      v2 += 2;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_20E993454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,std::__shared_weak_count *a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,char a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  unint64_t *p_shared_owners;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;

  __cxa_guard_abort(&qword_254A4A510);
  if (a40 && a39 < 0)
    operator delete(__p);
  if (a33)
  {
    p_shared_owners = (unint64_t *)&a33->__shared_owners_;
    do
      v59 = __ldaxr(p_shared_owners);
    while (__stlxr(v59 - 1, p_shared_owners));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))a33->__on_zero_shared)(a33);
      std::__shared_weak_count::__release_weak(a33);
    }
  }
  if (a48 && a47 < 0)
    operator delete(a42);
  sub_20E863570((uint64_t)&a49);
  v60 = (std::__shared_weak_count *)a57;
  if (a57)
  {
    v61 = (unint64_t *)(a57 + 8);
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20E9938D0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d9applecv3d4slam7Session13SetErrorBlockEU13block_pointerFvP9__CFErrorEPS4_E3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d9applecv3d4slam7Session13SetErrorBlockEU13block_pointerFvP9__CFErrorEPS4_E3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d9applecv3d4slam7Session13SetErrorBlockEU13block_pointerFvP9__CFErrorEPS4_E3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d9applecv3d4slam7Session13SetErrorBlockEU13block_pointerFvP9__CFErrorEPS4_E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E99393C()
{
  return &unk_24C9B3578;
}

void sub_20E993948(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B3598;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20E993958(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B3598;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E993988(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    _Block_release(v1);
}

uint64_t sub_20E9939AC(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 32);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_20E9939FC(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  v2 = *(_QWORD **)(a1 + 32);
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E993A5C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;

  v4 = (_QWORD *)operator new();
  *v4 = &off_24C9B47F0;
  v5 = v4 + 1;
  result = *(_QWORD *)(a1 + 32);
  if (!result)
    goto LABEL_4;
  if (result != a1 + 8)
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 16))(result, v5);
LABEL_4:
    v4[4] = result;
    *a2 = v4;
    return result;
  }
  v4[4] = v5;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  *a2 = v4;
  return result;
}

void sub_20E993AFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10A1C400AA0B987);
  _Unwind_Resume(a1);
}

void sub_20E993B20()
{
  sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 274, (uint64_t)"", 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_21023DDB0);
  abort();
}

void sub_20E993B5C()
{
  sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 280, (uint64_t)"", 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_21023DDB0);
  abort();
}

uint64_t sub_20E993B98()
{
  return 1;
}

uint64_t sub_20E993BA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 301, (uint64_t)"processor_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(_QWORD *)(a1 + 32);
    if (!v4)
      sub_20E86D37C();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, a2);
}

void sub_20E993C1C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B35E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20E993C2C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B35E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E993C5C(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    _Block_release(v1);
}

uint64_t sub_20E993C80(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 32);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_20E993CD0(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  v2 = *(_QWORD **)(a1 + 32);
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E993D30@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;

  v4 = (_QWORD *)operator new();
  *v4 = &off_24C9B3638;
  v5 = v4 + 1;
  result = *(_QWORD *)(a1 + 32);
  if (!result)
    goto LABEL_4;
  if (result != a1 + 8)
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 16))(result, v5);
LABEL_4:
    v4[4] = result;
    *a2 = v4;
    return result;
  }
  v4[4] = v5;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  *a2 = v4;
  return result;
}

void sub_20E993DD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10A1C400AA0B987);
  _Unwind_Resume(a1);
}

void sub_20E993DF4()
{
  sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 274, (uint64_t)"", 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_21023DDB0);
  abort();
}

void sub_20E993E30()
{
  sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 280, (uint64_t)"", 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_21023DDB0);
  abort();
}

uint64_t sub_20E993E6C()
{
  return 1;
}

uint64_t sub_20E993E78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 301, (uint64_t)"processor_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(_QWORD *)(a1 + 32);
    if (!v4)
      sub_20E86D37C();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, a2);
}

_QWORD *sub_20E993EF0(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C9B36B0;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20E993F64(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C9B36B0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20E993FD8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9B36B0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20E994028(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9B36B0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20E994058(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_20E9940B0(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

_QWORD *sub_20E994118(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  _QWORD *v10;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD **)(a1 + 8);
  v3 = *a2;
  v4 = a2[1];
  v5 = operator new(0x20uLL, MEMORY[0x24BEDB6B8]);
  if (v5)
  {
    v5[1] = v3;
    v5[2] = v4;
    *((_DWORD *)v5 + 6) = 1;
    *v5 = &off_24C9C38C8;
  }
  v10 = v5;
  v11[0] = &off_24C9B3730;
  v11[1] = &v10;
  v11[2] = 0;
  v12 = v11;
  (*(void (**)(_QWORD, _QWORD *, uint64_t, uint64_t))(*v2 + 16))(*v2, v5, v6, v7);
  if (!v12)
    sub_20E86D37C();
  (*(void (**)(_QWORD *))(*v12 + 48))(v12);
  result = v12;
  if (v12 == v11)
  {
    v9 = 4;
    result = v11;
  }
  else
  {
    if (!v12)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20E994218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  if (!a13)
    sub_20E86D37C();
  (*(void (**)(char *))(*(_QWORD *)a13 + 48))(a13);
  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      _Unwind_Resume(a1);
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
  _Unwind_Resume(a1);
}

void sub_20E994270(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x20E99427CLL);
  sub_20E860DA4(a1);
}

uint64_t sub_20E99428C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d9applecv3d4slam7Session23SetLocationRequestBlockEU13block_pointerFvPK23CV3DSLAMLocationReque"
                     "stEPP9__CFErrorE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d9applecv3d4slam7Session23SetLocationRequestBlockEU13block_pointerFvPK23CV3DSLAMLo"
                                "cationRequestEPP9__CFErrorE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d9applecv3d4slam7Session23SetLocationRequestBlockEU13block_pointerFvPK23CV3DSLAMLocationRequestEPP9__CFErrorE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d9applecv3d4slam7Session23SetLocationRequestBlockEU13block_pointerFvPK23CV3DSLAMLocationRequestEPP9__CFErrorE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E9942F8()
{
  return &unk_24C9B37A0;
}

void sub_20E994308()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20E99431C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C9B3730;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20E994354(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C9B3730;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20E994374(uint64_t a1)
{
  uint64_t result;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  result = **(_QWORD **)(a1 + 8);
  if (result)
  {
    v2 = (unsigned int *)(result + 24);
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t sub_20E9943A8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZZNS_9applecv3d4slam7Session23SetLocationRequestBlock"
                     "EU13block_pointerFvPK23CV3DSLAMLocationRequestEPP9__CFErrorENK3$_0clENS_3vio10mapping_io15LocationR"
                     "equestEEUlvE_JEEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZZNS_9applecv3d4slam7Session23SetLocationR"
                                "equestBlockEU13block_pointerFvPK23CV3DSLAMLocationRequestEPP9__CFErrorENK3$_0clENS_3vio1"
                                "0mapping_io15LocationRequestEEUlvE_JEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZZNS_9applecv3d4slam7Session23SetLocationRequestBlockEU13block_pointerFvPK23CV3DSLAMLocationRequestEPP9__CFErrorENK3$_0clENS_3vio10mapping_io15LocationRequestEEUlvE_JEEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZZNS_9applecv3d4slam7Session23SetLocationRequestBlockEU13block_pointerFvPK23CV3DSLAMLocationRequestEPP9__CFErrorENK3$_0clENS_3vio10mapping_io15LocationRequestEEUlvE_JEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E994414()
{
  return &unk_24C9B3790;
}

uint64_t sub_20E994420(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 32);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_20E994470(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  v2 = *(_QWORD **)(a1 + 32);
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E9944D0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;

  v4 = (_QWORD *)operator new();
  *v4 = &off_24C9B37C0;
  v5 = v4 + 1;
  result = *(_QWORD *)(a1 + 32);
  if (!result)
    goto LABEL_4;
  if (result != a1 + 8)
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 16))(result, v5);
LABEL_4:
    v4[4] = result;
    *a2 = v4;
    return result;
  }
  v4[4] = v5;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  *a2 = v4;
  return result;
}

void sub_20E994570(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10A1C400AA0B987);
  _Unwind_Resume(a1);
}

void sub_20E994594()
{
  sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 274, (uint64_t)"", 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_21023DDB0);
  abort();
}

void sub_20E9945D0()
{
  sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 280, (uint64_t)"", 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_21023DDB0);
  abort();
}

uint64_t sub_20E99460C()
{
  return 1;
}

uint64_t sub_20E994618(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 301, (uint64_t)"processor_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(_QWORD *)(a1 + 32);
    if (!v4)
      sub_20E86D37C();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, a2);
}

void ***sub_20E994690(void ***a1)
{
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void *v6;
  char *v7;
  char *v8;
  char *v9;
  void *v10;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = a1[1];
      do
      {
        v8 = (char *)*(v5 - 3);
        v5 -= 3;
        v7 = v8;
        if (v8)
        {
          v9 = (char *)*(v3 - 2);
          v6 = v7;
          if (v9 != v7)
          {
            do
            {
              v10 = (void *)*((_QWORD *)v9 - 3);
              if (v10)
              {
                *((_QWORD *)v9 - 2) = v10;
                operator delete(v10);
              }
              v9 -= 48;
            }
            while (v9 != v7);
            v6 = *v5;
          }
          *(v3 - 2) = v7;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void ***sub_20E994740(void ***a1)
{
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  void *v11;
  void *v12;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = a1[1];
      do
      {
        sub_20E86872C((uint64_t)(v3 - 10), *(v3 - 9));
        v8 = (char *)*(v5 - 13);
        v5 -= 13;
        v7 = v8;
        if (v8)
        {
          v9 = (char *)*(v3 - 12);
          v6 = v7;
          if (v9 != v7)
          {
            v10 = (char *)*(v3 - 12);
            do
            {
              v12 = (void *)*((_QWORD *)v10 - 6);
              v10 -= 48;
              v11 = v12;
              if (v12)
              {
                *((_QWORD *)v9 - 5) = v11;
                operator delete(v11);
              }
              v9 = v10;
            }
            while (v10 != v7);
            v6 = *v5;
          }
          *(v3 - 12) = v7;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **sub_20E994800(void **a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        v3 = sub_20E94FADC(v3 - 448);
      while ((void *)v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **sub_20E994858(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 4);
        if (v5)
        {
          *((_QWORD *)v3 - 3) = v5;
          operator delete(v5);
        }
        sub_20E866B68((uint64_t)(v3 - 56), *((_QWORD *)v3 - 6));
        v6 = (void *)*((_QWORD *)v3 - 10);
        if (v6)
        {
          *((_QWORD *)v3 - 9) = v6;
          operator delete(v6);
        }
        v3 -= 88;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

const void ***sub_20E9948E4(const void ***a1, const void ***a2)
{
  const void **v4;
  const void **v5;
  const void **v6;
  int64_t v7;
  const void **v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  char *v15;
  __int128 v16;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  BOOL v22;
  BOOL v23;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  _OWORD *v28;
  __int128 *v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  v4 = *a2;
  a1[1] = 0;
  *a1 = v4;
  a1[2] = 0;
  a1[3] = 0;
  v6 = a2[1];
  v5 = a2[2];
  v7 = (char *)v5 - (char *)v6;
  if (v5 != v6)
  {
    if (0xCBEEA4E1A08AD8F3 * (v7 >> 3) >= 0x8AD8F2FBA93869)
      sub_20E92CED8();
    v8 = (const void **)operator new(v7);
    a1[1] = v8;
    a1[2] = v8;
    v9 = (char *)&v8[v7 >> 3];
    a1[3] = (const void **)v9;
    memcpy(v8, v6, v7 - 4);
    a1[2] = (const void **)v9;
  }
  a1[5] = 0;
  a1[4] = (const void **)(a1 + 5);
  a1[6] = 0;
  sub_20E94F3B4((uint64_t *)a1 + 4, a2[4], a2 + 5);
  a1[7] = 0;
  a1[8] = 0;
  a1[9] = 0;
  v11 = (char *)a2[7];
  v10 = (char *)a2[8];
  v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0)
      sub_20E92CED8();
    v13 = (char *)operator new(v10 - v11);
    a1[7] = (const void **)v13;
    a1[8] = (const void **)v13;
    a1[9] = (const void **)&v13[16 * (v12 >> 4)];
    v14 = v12 - 16;
    if ((unint64_t)(v12 - 16) < 0xF0)
      goto LABEL_7;
    v18 = v14 & 0xFFFFFFFFFFFFFFF0 | 8;
    v19 = &v13[v18];
    v20 = &v11[v18];
    v21 = (v14 & 0xFFFFFFFFFFFFFFF0) + 16;
    v22 = v13 + 8 >= &v11[v21] || v11 + 8 >= &v13[v21];
    v23 = !v22;
    if (v11 < v19 && v13 < v20)
      goto LABEL_7;
    if (v23)
      goto LABEL_7;
    v25 = (v14 >> 4) + 1;
    v26 = 16 * (v25 & 0x1FFFFFFFFFFFFFFCLL);
    v27 = &v11[v26];
    v15 = &v13[v26];
    v28 = v13 + 32;
    v29 = (__int128 *)(v11 + 32);
    v30 = v25 & 0x1FFFFFFFFFFFFFFCLL;
    do
    {
      v32 = *(v29 - 2);
      v31 = *(v29 - 1);
      v34 = *v29;
      v33 = v29[1];
      v29 += 4;
      *(v28 - 2) = v32;
      *(v28 - 1) = v31;
      *v28 = v34;
      v28[1] = v33;
      v28 += 4;
      v30 -= 4;
    }
    while (v30);
    v11 = v27;
    v13 = v15;
    if (v25 != (v25 & 0x1FFFFFFFFFFFFFFCLL))
    {
LABEL_7:
      v15 = v13;
      do
      {
        v16 = *(_OWORD *)v11;
        v11 += 16;
        *(_OWORD *)v15 = v16;
        v15 += 16;
      }
      while (v11 != v10);
    }
    a1[8] = (const void **)v15;
  }
  a1[10] = a2[10];
  return a1;
}

void sub_20E994ACC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  uint64_t *v4;
  void *v6;

  sub_20E866B68(v3, *v4);
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20E994B14(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  char *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  unint64_t v24;
  char *v25;
  char *v26;
  unint64_t v27;
  BOOL v28;
  BOOL v29;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  _OWORD *v34;
  __int128 *v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;

  sub_20E94DF68((uint64_t *)(a1 + 8), a2 + 8);
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  v5 = *(char **)(a2 + 248);
  v4 = *(char **)(a2 + 256);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      sub_20E92CED8();
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a1 + 248) = v7;
    *(_QWORD *)(a1 + 256) = v7;
    *(_QWORD *)(a1 + 264) = &v7[16 * (v6 >> 4)];
    v8 = v6 - 16;
    if ((unint64_t)(v6 - 16) < 0xF0)
      goto LABEL_4;
    v24 = v8 & 0xFFFFFFFFFFFFFFF0 | 8;
    v25 = &v7[v24];
    v26 = &v5[v24];
    v27 = (v8 & 0xFFFFFFFFFFFFFFF0) + 16;
    v28 = v7 + 8 >= &v5[v27] || v5 + 8 >= &v7[v27];
    v29 = !v28;
    if (v5 < v25 && v7 < v26)
      goto LABEL_4;
    if (v29)
      goto LABEL_4;
    v31 = (v8 >> 4) + 1;
    v32 = 16 * (v31 & 0x1FFFFFFFFFFFFFFCLL);
    v33 = &v5[v32];
    v9 = &v7[v32];
    v34 = v7 + 32;
    v35 = (__int128 *)(v5 + 32);
    v36 = v31 & 0x1FFFFFFFFFFFFFFCLL;
    do
    {
      v38 = *(v35 - 2);
      v37 = *(v35 - 1);
      v40 = *v35;
      v39 = v35[1];
      v35 += 4;
      *(v34 - 2) = v38;
      *(v34 - 1) = v37;
      *v34 = v40;
      v34[1] = v39;
      v34 += 4;
      v36 -= 4;
    }
    while (v36);
    v5 = v33;
    v7 = v9;
    if (v31 != (v31 & 0x1FFFFFFFFFFFFFFCLL))
    {
LABEL_4:
      v9 = v7;
      do
      {
        v10 = *(_OWORD *)v5;
        v5 += 16;
        *(_OWORD *)v9 = v10;
        v9 += 16;
      }
      while (v5 != v4);
    }
    *(_QWORD *)(a1 + 256) = v9;
  }
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  v11 = *(_QWORD *)(a2 + 272);
  v12 = *(_QWORD *)(a2 + 280);
  v13 = v12 - v11;
  if (v12 != v11)
  {
    v14 = 0x641511E8D2B3183BLL * (v13 >> 3);
    if (v14 >= 0x21B641511E8D2CLL)
      sub_20E92CED8();
    v15 = (char *)operator new(v13);
    v16 = 0;
    *(_QWORD *)(a1 + 272) = v15;
    *(_QWORD *)(a1 + 280) = v15;
    *(_QWORD *)(a1 + 288) = &v15[1944 * v14];
    do
    {
      v17 = v11 + v16;
      *(_OWORD *)&v15[v16] = *(_OWORD *)(v11 + v16);
      memcpy(&v15[v16 + 16], (const void *)(v11 + v16 + 16), 0x788uLL);
      v16 += 1944;
    }
    while (v17 + 1944 != v12);
    *(_QWORD *)(a1 + 280) = &v15[v16];
  }
  v18 = *(_OWORD *)(a2 + 296);
  v19 = *(_OWORD *)(a2 + 328);
  *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 328) = v19;
  *(_OWORD *)(a1 + 296) = v18;
  sub_20E994E3C((_QWORD *)(a1 + 344), (uint64_t *)(a2 + 344));
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 368) = a1 + 376;
  sub_20E94F000((uint64_t *)(a1 + 368), *(_QWORD **)(a2 + 368), (_QWORD *)(a2 + 376));
  v20 = *(_OWORD *)(a2 + 392);
  v21 = *(_OWORD *)(a2 + 408);
  v22 = *(_OWORD *)(a2 + 424);
  *(_DWORD *)(a1 + 440) = *(_DWORD *)(a2 + 440);
  *(_OWORD *)(a1 + 408) = v21;
  *(_OWORD *)(a1 + 424) = v22;
  *(_OWORD *)(a1 + 392) = v20;
  return a1;
}

void sub_20E994D6C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  void **v3;
  void **v4;
  void **v5;
  uint64_t v6;
  _QWORD **v7;
  char *v9;
  void *v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  void *v16;

  sub_20E86872C(v6, *v7);
  v9 = (char *)*v5;
  if (*v5)
  {
    v12 = (char *)v1[44];
    v13 = *v5;
    if (v12 != v9)
    {
      v14 = (char *)v1[44];
      do
      {
        v16 = (void *)*((_QWORD *)v14 - 6);
        v14 -= 48;
        v15 = v16;
        if (v16)
        {
          *((_QWORD *)v12 - 5) = v15;
          operator delete(v15);
        }
        v12 = v14;
      }
      while (v14 != v9);
      v13 = *v5;
    }
    v1[44] = v9;
    operator delete(v13);
    v10 = *v4;
    if (!*v4)
    {
LABEL_3:
      v11 = *v3;
      if (!*v3)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else
  {
    v10 = *v4;
    if (!*v4)
      goto LABEL_3;
  }
  v1[35] = v10;
  operator delete(v10);
  v11 = *v3;
  if (!*v3)
  {
LABEL_4:
    sub_20E94DEFC(v2);
    _Unwind_Resume(a1);
  }
LABEL_13:
  v1[32] = v11;
  operator delete(v11);
  sub_20E94DEFC(v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E994E3C(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  char *v8;

  a1[2] = 0;
  v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = v5 - *a2;
  if (v5 != *a2)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 4);
    if (v7 >= 0x555555555555556)
      sub_20E92CED8();
    v8 = (char *)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[48 * v7];
    a1[1] = sub_20E994F48(v3, v4, v5, (uint64_t)v8);
  }
  return a1;
}

void sub_20E994EE4(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v2;
  char *v4;
  char *v5;
  void *v6;
  char *v7;
  void *v8;
  void *v9;

  v1[1] = v2;
  v4 = (char *)*v1;
  if (*v1)
  {
    v5 = (char *)v1[1];
    v6 = *v1;
    if (v5 != v4)
    {
      v7 = (char *)v1[1];
      do
      {
        v9 = (void *)*((_QWORD *)v7 - 6);
        v7 -= 48;
        v8 = v9;
        if (v9)
        {
          *((_QWORD *)v5 - 5) = v8;
          operator delete(v8);
        }
        v5 = v7;
      }
      while (v7 != v4);
      v6 = *v1;
    }
    v1[1] = v4;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E994F48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  char *v7;
  __int128 v8;
  uint64_t v9;
  const void *v10;
  int64_t v11;
  char *v12;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_QWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      v10 = *(const void **)v6;
      v9 = *(_QWORD *)(v6 + 8);
      v11 = v9 - *(_QWORD *)v6;
      if (v9 != *(_QWORD *)v6)
      {
        if (v11 < 0)
          sub_20E92CED8();
        v12 = (char *)operator new(v9 - *(_QWORD *)v6);
        *(_QWORD *)a4 = v12;
        *(_QWORD *)(a4 + 8) = v12;
        v7 = &v12[64 * (v11 >> 6)];
        *(_QWORD *)(a4 + 16) = v7;
        memcpy(v12, v10, v11);
        *(_QWORD *)(a4 + 8) = v7;
      }
      v8 = *(_OWORD *)(v6 + 24);
      *(_QWORD *)(a4 + 40) = *(_QWORD *)(v6 + 40);
      *(_OWORD *)(a4 + 24) = v8;
      a4 += 48;
      v6 += 48;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_20E995020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E995058((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E995034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_20E995058((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20E995058(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    if (v3 != v4)
    {
      v5 = **(_QWORD **)(a1 + 16);
      do
      {
        v7 = *(void **)(v5 - 48);
        v5 -= 48;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 40) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v4);
    }
  }
  return a1;
}

uint64_t sub_20E9950C4(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v4 = sub_20E994E3C((_QWORD *)a1, (uint64_t *)a2);
  v4[4] = 0;
  v4[3] = (uint64_t)(v4 + 4);
  v4[5] = 0;
  sub_20E94F000(v4 + 3, *(_QWORD **)(a2 + 24), (_QWORD *)(a2 + 32));
  v5 = *(_OWORD *)(a2 + 48);
  v6 = *(_OWORD *)(a2 + 64);
  v7 = *(_OWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 48) = v5;
  return a1;
}

void sub_20E995130(_Unwind_Exception *a1)
{
  char **v1;
  uint64_t v2;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  void *v8;
  void *v9;

  sub_20E86872C(v2, v1[4]);
  v4 = *v1;
  if (*v1)
  {
    v5 = v1[1];
    v6 = *v1;
    if (v5 != v4)
    {
      v7 = v1[1];
      do
      {
        v9 = (void *)*((_QWORD *)v7 - 6);
        v7 -= 48;
        v8 = v9;
        if (v9)
        {
          *((_QWORD *)v5 - 5) = v8;
          operator delete(v8);
        }
        v5 = v7;
      }
      while (v7 != v4);
      v6 = *v1;
    }
    v1[1] = v4;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_20E995194(_QWORD *a1, __int128 **a2)
{
  uint64_t v3;
  __int128 *v4;
  __int128 *v5;
  int64_t v6;
  unint64_t v7;
  char *v8;

  a1[2] = 0;
  v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = (char *)v5 - (char *)*a2;
  if (v5 != *a2)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 4);
    if (v7 >= 0x555555555555556)
      sub_20E867F44();
    v8 = (char *)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[48 * v7];
    a1[1] = sub_20E99529C(v3, v4, v5, (uint64_t)v8);
  }
  return a1;
}

void sub_20E99523C(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v2;
  char *v4;
  char *v5;
  void *v6;
  void *v7;

  v1[1] = v2;
  v4 = (char *)*v1;
  if (*v1)
  {
    v5 = (char *)v1[1];
    v6 = *v1;
    if (v5 != v4)
    {
      do
      {
        v7 = (void *)*((_QWORD *)v5 - 3);
        if (v7)
        {
          *((_QWORD *)v5 - 2) = v7;
          operator delete(v7);
        }
        v5 -= 48;
      }
      while (v5 != v4);
      v6 = *v1;
    }
    v1[1] = v4;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20E99529C(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  __int128 *v5;
  _QWORD *v6;
  char *v7;
  __int128 v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  char *v12;

  if (a2 != a3)
  {
    v5 = a2;
    v6 = (_QWORD *)(a4 + 24);
    do
    {
      v8 = *v5;
      *(v6 - 1) = *((_QWORD *)v5 + 2);
      *v6 = 0;
      *(_OWORD *)(v6 - 3) = v8;
      v6[1] = 0;
      v6[2] = 0;
      v10 = (_BYTE *)*((_QWORD *)v5 + 3);
      v9 = (_BYTE *)*((_QWORD *)v5 + 4);
      v11 = v9 - v10;
      if (v9 != v10)
      {
        if (v11 < 0)
          sub_20E867F44();
        v12 = (char *)operator new(v9 - v10);
        *v6 = v12;
        v6[1] = v12;
        v7 = &v12[8 * (v11 >> 3)];
        v6[2] = v7;
        memcpy(v12, v10, v11);
        v6[1] = v7;
      }
      v6 += 6;
      v5 += 3;
    }
    while (v5 != a3);
    return v6 - 3;
  }
  return (_QWORD *)a4;
}

void sub_20E995378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_20E9953A0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9953A0(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      v5 = *(void **)(v3 - 24);
      if (v5)
      {
        *(_QWORD *)(v3 - 16) = v5;
        operator delete(v5);
      }
      v3 -= 48;
    }
  }
  return a1;
}

void **sub_20E995400(void **a1)
{
  void *v2;
  void **v3;
  void **v4;
  void *v5;
  void **v6;
  void *v7;
  char *v8;
  char *v9;
  char *v10;
  void *v11;
  void **v12;
  void **v13;
  void *v14;
  void **v15;
  void *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  char *v26;
  char *v27;
  void *v28;
  void *v29;
  void *v30;

  v2 = a1[13];
  if (v2)
  {
    a1[14] = v2;
    operator delete(v2);
  }
  v3 = (void **)a1[9];
  if (v3)
  {
    v4 = (void **)a1[10];
    v5 = a1[9];
    if (v4 != v3)
    {
      v6 = (void **)a1[10];
      do
      {
        v9 = (char *)*(v6 - 3);
        v6 -= 3;
        v8 = v9;
        if (v9)
        {
          v10 = (char *)*(v4 - 2);
          v7 = v8;
          if (v10 != v8)
          {
            do
            {
              v11 = (void *)*((_QWORD *)v10 - 3);
              if (v11)
              {
                *((_QWORD *)v10 - 2) = v11;
                operator delete(v11);
              }
              v10 -= 48;
            }
            while (v10 != v8);
            v7 = *v6;
          }
          *(v4 - 2) = v8;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = a1[9];
    }
    a1[10] = v3;
    operator delete(v5);
  }
  v12 = (void **)a1[6];
  if (v12)
  {
    v13 = (void **)a1[7];
    v14 = a1[6];
    if (v13 != v12)
    {
      v15 = (void **)a1[7];
      do
      {
        sub_20E86872C((uint64_t)(v13 - 10), *(v13 - 9));
        v18 = (char *)*(v15 - 13);
        v15 -= 13;
        v17 = v18;
        if (v18)
        {
          v19 = (char *)*(v13 - 12);
          v16 = v17;
          if (v19 != v17)
          {
            v20 = (char *)*(v13 - 12);
            do
            {
              v22 = (void *)*((_QWORD *)v20 - 6);
              v20 -= 48;
              v21 = v22;
              if (v22)
              {
                *((_QWORD *)v19 - 5) = v21;
                operator delete(v21);
              }
              v19 = v20;
            }
            while (v20 != v17);
            v16 = *v15;
          }
          *(v13 - 12) = v17;
          operator delete(v16);
        }
        v13 = v15;
      }
      while (v15 != v12);
      v14 = a1[6];
    }
    a1[7] = v12;
    operator delete(v14);
  }
  v23 = a1[3];
  if (v23)
  {
    v24 = (uint64_t)a1[4];
    v25 = a1[3];
    if ((void *)v24 != v23)
    {
      do
        v24 = sub_20E94FADC(v24 - 448);
      while ((void *)v24 != v23);
      v25 = a1[3];
    }
    a1[4] = v23;
    operator delete(v25);
  }
  v26 = (char *)*a1;
  if (*a1)
  {
    v27 = (char *)a1[1];
    v28 = *a1;
    if (v27 != v26)
    {
      do
      {
        v29 = (void *)*((_QWORD *)v27 - 4);
        if (v29)
        {
          *((_QWORD *)v27 - 3) = v29;
          operator delete(v29);
        }
        sub_20E866B68((uint64_t)(v27 - 56), *((_QWORD *)v27 - 6));
        v30 = (void *)*((_QWORD *)v27 - 10);
        if (v30)
        {
          *((_QWORD *)v27 - 9) = v30;
          operator delete(v30);
        }
        v27 -= 88;
      }
      while (v27 != v26);
      v28 = *a1;
    }
    a1[1] = v26;
    operator delete(v28);
  }
  return a1;
}

_DWORD *sub_20E9955EC(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C9B33F0[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

_DWORD *sub_20E9956DC(_DWORD ***a1)
{
  return sub_20E9956F8(**a1, (char *)(*a1)[1]);
}

void sub_20E9956E8(uint64_t a1, uint64_t a2)
{
  sub_20E9957E8((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

_DWORD *sub_20E9956F8(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C9B33F0[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_20E9957E8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C9B33F0[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_20E877C80((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_20E99599C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_20E9959E0(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20E995AD8((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_20E995AD0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_20E995AD8(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_20E995CD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877E3C((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_20E995CE8(_DWORD ***a1)
{
  return sub_20E995D04(**a1, (char *)(*a1)[1]);
}

void sub_20E995CF4(uint64_t a1, uint64_t a2)
{
  sub_20E995DF4((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

_DWORD *sub_20E995D04(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C9B33F0[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_20E995DF4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C9B33F0[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_20E877C80((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_20E995FA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_20E995FEC(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20E9960E4((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_20E9960DC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_20E9960E4(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_20E9962E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877E3C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E9962F4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B3878;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20E996304(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B3878;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E996334(uint64_t a1)
{
  sub_20E996498(a1 + 24);
}

uint64_t sub_20E996340(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  char v7;
  int v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  sub_20E969038((_QWORD *)(a1 + 8), (uint64_t *)(a2 + 8));
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v4 = *(_OWORD *)(a2 + 56);
  v5 = *(_OWORD *)(a2 + 72);
  v6 = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v6;
  *(_OWORD *)(a1 + 72) = v5;
  *(_OWORD *)(a1 + 56) = v4;
  v7 = *(_BYTE *)(a2 + 116);
  v8 = *(_DWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 112) = v8;
  *(_BYTE *)(a1 + 116) = v7;
  *(_BYTE *)(a1 + 184) = 0;
  if (*(_BYTE *)(a2 + 184))
  {
    v9 = *(_OWORD *)(a2 + 120);
    v10 = *(_OWORD *)(a2 + 136);
    v11 = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 168) = v11;
    *(_OWORD *)(a1 + 120) = v9;
    *(_OWORD *)(a1 + 136) = v10;
    *(_BYTE *)(a1 + 184) = 1;
  }
  *(_BYTE *)(a1 + 192) = 0;
  *(_BYTE *)(a1 + 488) = 0;
  if (*(_BYTE *)(a2 + 488))
  {
    sub_20E8A049C((_QWORD *)(a1 + 192), (uint64_t *)(a2 + 192));
    v12 = *(_QWORD *)(a2 + 472);
    *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
    *(_QWORD *)(a1 + 472) = v12;
    if (v12)
    {
      v13 = (unint64_t *)(v12 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    *(_BYTE *)(a1 + 480) = *(_BYTE *)(a2 + 480);
    *(_BYTE *)(a1 + 488) = 1;
  }
  return a1;
}

void sub_20E99643C(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  if (*(_BYTE *)(v1 + 488))
  {
    v4 = *(std::__shared_weak_count **)(v1 + 472);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    sub_20E86177C(v2);
  }
  sub_20E95F4EC(v1);
  _Unwind_Resume(a1);
}

void sub_20E996498(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;

  if (*(_BYTE *)(a1 + 488))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 472);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    sub_20E86177C((_QWORD *)(a1 + 192));
  }
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a1 + 16);
    v7 = *(void **)(a1 + 8);
    if (v6 == v5)
    {
      *(_QWORD *)(a1 + 16) = v5;
      operator delete(v7);
    }
    else
    {
      do
      {
        if (*(_QWORD *)(v6 - 104))
        {
          v8 = *(void **)(v6 - 120);
          if ((void *)(v6 - 96) != v8)
            operator delete(v8);
        }
        v6 -= 120;
      }
      while (v6 != v5);
      v9 = *(void **)(a1 + 8);
      *(_QWORD *)(a1 + 16) = v5;
      operator delete(v9);
    }
  }
}

void sub_20E996578(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B38C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20E996588(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B38C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E9965B8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  a1[9] = &off_24CA1A9A0;
  v2 = (std::__shared_weak_count *)a1[11];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    a1[6] = &off_24CA1A9A0;
    v5 = (std::__shared_weak_count *)a1[8];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    a1[6] = &off_24CA1A9A0;
    v5 = (std::__shared_weak_count *)a1[8];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  a1[3] = &off_24CA1A9A0;
  v8 = (std::__shared_weak_count *)a1[5];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

_DWORD *sub_20E9966B8(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C9B33F0[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

_DWORD *sub_20E9967A8(_DWORD ***a1)
{
  return sub_20E9967C4(**a1, (const char **)(*a1)[1]);
}

void sub_20E9967B4(uint64_t a1, uint64_t a2)
{
  sub_20E9968B8((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

_DWORD *sub_20E9967C4(_DWORD *a1, const char **a2)
{
  uint64_t v4;
  const char *v5;
  size_t v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  char v12;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C9B33F0[v4])(&v12, a1);
  a1[6] = -1;
  v5 = *a2;
  v6 = strlen(*a2);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v8 = operator new(v9 + 1);
    *((_QWORD *)a1 + 1) = v7;
    *((_QWORD *)a1 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)a1 = v8;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v6;
    v8 = a1;
    if (!v6)
      goto LABEL_11;
  }
  memmove(v8, v5, v7);
LABEL_11:
  *((_BYTE *)v8 + v7) = 0;
  a1[6] = 1;
  return a1;
}

void sub_20E9968B8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = *(const char **)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C9B33F0[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_20E877C80((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_20E996A70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_20E996AB4(uint64_t a1, uint64_t a2)
{
  const char **v3;
  char *v4;
  const char *v5;
  size_t v6;
  size_t v7;
  void *v8;
  char *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(const char ***)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20E996BAC((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = *v3;
  v6 = strlen(*v3);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v10 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v10 = v6 | 7;
    v11 = v10 + 1;
    v8 = operator new(v10 + 1);
    *((_QWORD *)v4 + 1) = v7;
    *((_QWORD *)v4 + 2) = v11 | 0x8000000000000000;
    *(_QWORD *)v4 = v8;
  }
  else
  {
    v4[23] = v6;
    v8 = v4;
    if (!v6)
      goto LABEL_11;
  }
  memmove(v8, v5, v7);
LABEL_11:
  *((_BYTE *)v8 + v7) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_20E996BA4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_20E996BAC(void **a1, const char **a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  const char *v9;
  size_t v10;
  size_t v11;
  char *v12;
  char *v13;
  void **v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  void **v20;
  char *v22;
  char *v23;
  char *v24;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v22 = v8;
  v23 = v8;
  v24 = &v7[24 * v6];
  v9 = *a2;
  v10 = strlen(*a2);
  if (v10 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v11 = v10;
  if (v10 >= 0x17)
  {
    v16 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v16 = v10 | 7;
    v17 = v16 + 1;
    v18 = (char *)operator new(v16 + 1);
    *((_QWORD *)v8 + 1) = v11;
    *((_QWORD *)v8 + 2) = v17 | 0x8000000000000000;
    *(_QWORD *)v8 = v18;
    v8 = v18;
  }
  else
  {
    v8[23] = v10;
    if (!v10)
    {
      *v8 = 0;
      v12 = v8;
      v13 = v8 + 24;
      v14 = (void **)*a1;
      v15 = (void **)a1[1];
      if (v15 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, v9, v11);
  v8[v11] = 0;
  v12 = v22;
  v13 = v23 + 24;
  v14 = (void **)*a1;
  v15 = (void **)a1[1];
  if (v15 == *a1)
  {
LABEL_26:
    *a1 = v12;
    a1[1] = v13;
    a1[2] = v24;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v19 = *(_OWORD *)(v15 - 3);
    *((_QWORD *)v12 - 1) = *(v15 - 1);
    *(_OWORD *)(v12 - 24) = v19;
    v12 -= 24;
    *(v15 - 2) = 0;
    *(v15 - 1) = 0;
    *(v15 - 3) = 0;
    v15 -= 3;
  }
  while (v15 != v14);
  v15 = (void **)*a1;
  v20 = (void **)a1[1];
  *a1 = v12;
  a1[1] = v13;
  a1[2] = v24;
  while (v20 != v15)
  {
    if (*((char *)v20 - 1) < 0)
      operator delete(*(v20 - 3));
    v20 -= 3;
  }
LABEL_27:
  if (v15)
    operator delete(v15);
  return v13;
}

void sub_20E996DAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877E3C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E996DC0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B3930;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20E996DD0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B3930;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void **sub_20E996E00(uint64_t a1)
{
  return sub_20E995400((void **)(a1 + 24));
}

void sub_20E996E0C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B3980;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20E996E1C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B3980;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E996E4C(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    _Block_release(v1);
}

uint64_t sub_20E996E70(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 32);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_20E996EC0(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  v2 = *(_QWORD **)(a1 + 32);
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E996F20@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;

  v4 = (_QWORD *)operator new();
  *v4 = &off_24C9B39D0;
  v5 = v4 + 1;
  result = *(_QWORD *)(a1 + 32);
  if (!result)
    goto LABEL_4;
  if (result != a1 + 8)
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 16))(result, v5);
LABEL_4:
    v4[4] = result;
    *a2 = v4;
    return result;
  }
  v4[4] = v5;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  *a2 = v4;
  return result;
}

void sub_20E996FC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10A1C400AA0B987);
  _Unwind_Resume(a1);
}

void sub_20E996FE4()
{
  sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 274, (uint64_t)"", 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_21023DDB0);
  abort();
}

void sub_20E997020()
{
  sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 280, (uint64_t)"", 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_21023DDB0);
  abort();
}

uint64_t sub_20E99705C()
{
  return 1;
}

uint64_t sub_20E997068(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 301, (uint64_t)"processor_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(_QWORD *)(a1 + 32);
    if (!v4)
      sub_20E86D37C();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, a2);
}

_QWORD *sub_20E9970E0(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C9B3A48;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20E997154(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C9B3A48;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20E9971C8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9B3A48;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20E997218(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9B3A48;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20E997248(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_20E9972A0(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

void sub_20E997308(uint64_t a1, const UInt8 ****a2)
{
  unsigned __int8 *v2;
  const UInt8 **v3;
  const __CFAllocator *v5;
  unsigned int v6;
  int v8;
  CFDataRef v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  v3 = **a2;
  v2 = (unsigned __int8 *)(*a2)[1];
  if (v3 != (const UInt8 **)v2)
  {
    v5 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    do
    {
      v6 = *(unsigned __int8 *)v3;
      if (v6 > 9 || v6 == 6)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Session.cpp", 1442, (uint64_t)"cm_data_type", 12, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v8 = 1;
      }
      else
      {
        v8 = 0;
      }
      v9 = CFDataCreate(v5, v3[1], v3[2] - v3[1]);
      v10 = (std::__shared_weak_count *)operator new();
      v10->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      v10->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9AFBA0;
      v10->__shared_weak_owners_ = 0;
      v10[1].__vftable = (std::__shared_weak_count_vtbl *)v9;
      if (v8)
        sub_20E866B34();
      (*(void (**)(void))(**(_QWORD **)(a1 + 8) + 16))();
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
      v3 += 7;
    }
    while (v3 != (const UInt8 **)v2);
  }
}

void sub_20E997470(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20E997488(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_20E9974D4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d9applecv3d4slam7Session14SetCMDataBlockEU13block_pointerFvhPK8__CFDataPKvEPP9__CFErrorE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d9applecv3d4slam7Session14SetCMDataBlockEU13block_pointerFvhPK8__CFDataPKvEPP9__CFErrorE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d9applecv3d4slam7Session14SetCMDataBlockEU13block_pointerFvhPK8__CFDataPKvEPP9__CFErrorE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d9applecv3d4slam7Session14SetCMDataBlockEU13block_pointerFvhPK8__CFDataPKvEPP9__CFErrorE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E997540()
{
  return &unk_24C9B3AB8;
}

void sub_20E99754C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B3AD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20E99755C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B3AD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E99758C(uint64_t a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  if (!*(_BYTE *)(a1 + 96) || (*(char *)(a1 + 95) & 0x80000000) == 0)
  {
    v2 = *(void **)(a1 + 48);
    if (!v2)
      goto LABEL_5;
    goto LABEL_4;
  }
  operator delete(*(void **)(a1 + 72));
  v2 = *(void **)(a1 + 48);
  if (v2)
  {
LABEL_4:
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
LABEL_5:
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

uint64_t sub_20E997620(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  char v5;
  _BYTE *v6;
  _BYTE *v7;
  size_t v8;
  char *v9;
  char *v10;
  __int128 v11;

  v4 = sub_20E90EE08((_QWORD *)a1, a2);
  v5 = *(_BYTE *)(a2 + 16);
  v4[3] = 0;
  *((_BYTE *)v4 + 16) = v5;
  v4[4] = 0;
  v4[5] = 0;
  v7 = *(_BYTE **)(a2 + 24);
  v6 = *(_BYTE **)(a2 + 32);
  v8 = v6 - v7;
  if (v6 != v7)
  {
    if ((v8 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v9 = (char *)operator new(v6 - v7);
    *(_QWORD *)(a1 + 24) = v9;
    *(_QWORD *)(a1 + 32) = v9;
    v10 = &v9[v8];
    *(_QWORD *)(a1 + 40) = &v9[v8];
    memcpy(v9, v7, v8);
    *(_QWORD *)(a1 + 32) = v10;
  }
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  if (*(_BYTE *)(a2 + 72))
  {
    if (*(char *)(a2 + 71) < 0)
    {
      sub_20E860C04((_BYTE *)(a1 + 48), *(void **)(a2 + 48), *(_QWORD *)(a2 + 56));
    }
    else
    {
      v11 = *(_OWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 48) = v11;
    }
    *(_BYTE *)(a1 + 72) = 1;
  }
  return a1;
}

void sub_20E9976F4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;

  if (*(_BYTE *)(v1 + 72) && *(char *)(v1 + 71) < 0)
    operator delete(*v3);
  v5 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v5;
    operator delete(v5);
  }
  sub_20E86665C(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E997738(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  *a1 = &off_24C9B7040;
  v2 = a1[3];
  a1[2] = &unk_24C9B7190;
  a1[3] = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 80);
    if (v3)
    {
      *(_QWORD *)(v2 + 88) = v3;
      operator delete(v3);
    }
    if (*(_BYTE *)(v2 + 72))
      free(*(void **)(v2 + 56));
    if (*(_BYTE *)(v2 + 40))
      free(*(void **)(v2 + 24));
    MEMORY[0x212BC6398](v2, 0x1030C408C1A3048);
  }
  return a1;
}

uint64_t sub_20E9977BC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x212BC6290](a1 + 112);
  return a1;
}

void sub_20E997840(_QWORD *a1)
{
  uint64_t v1;
  void *v2;

  *a1 = &off_24C9B7040;
  v1 = a1[3];
  a1[2] = &unk_24C9B7190;
  a1[3] = 0;
  if (v1)
  {
    v2 = *(void **)(v1 + 80);
    if (v2)
    {
      *(_QWORD *)(v1 + 88) = v2;
      operator delete(v2);
    }
    if (*(_BYTE *)(v1 + 72))
      free(*(void **)(v1 + 56));
    if (*(_BYTE *)(v1 + 40))
      free(*(void **)(v1 + 24));
    MEMORY[0x212BC6398](v1, 0x1030C408C1A3048);
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E9978D4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 304))(a1);
}

void sub_20E9978E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  size_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 24);
  v2 = *(_QWORD *)(*(_QWORD *)(v1 + 88) - 8);
  sub_20E9EE4D0((uint64_t *)(v1 + 48), *(_QWORD *)(v1 + 16) - v2 - 9);
  v3 = *(_QWORD *)(v1 + 48);
  if (v3)
    memmove((void *)(*(_QWORD *)(v1 + 24) + v2), *(const void **)(v1 + 56), v3);
  *(_QWORD *)(v1 + 48) = 0;
  v4 = *(_QWORD *)(v1 + 80);
  v5 = *(_QWORD *)(v1 + 88) - 8;
  *(_QWORD *)(v1 + 88) = v5;
  if (v4 == v5)
  {
    std::ostream::write();
    if (*(_BYTE *)(v1 + 40))
    {
      free(*(void **)(v1 + 24));
      *(_BYTE *)(v1 + 40) = 0;
    }
  }
}

uint64_t **sub_20E997974(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  uint64_t *v4;
  _BYTE v5[3];

  v2 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v2 + 40))
  {
    v4 = (uint64_t *)(v2 + 16);
    return sub_20E9F4CE4((uint64_t)v5, &v4, a2);
  }
  else
  {
    if (*a2)
      v5[1] = -61;
    else
      v5[2] = -62;
    return (uint64_t **)std::ostream::write();
  }
}

char *sub_20E997A00(uint64_t a1, char *a2)
{
  uint64_t v2;
  int v4;
  uint64_t *v5;
  char v6;
  char v7;
  char v8;

  v2 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v2 + 40))
  {
    v5 = (uint64_t *)(v2 + 16);
    return sub_20E9F301C(&v5, *a2);
  }
  else
  {
    v4 = *a2;
    if (v4 > -33)
    {
      v6 = *a2;
    }
    else
    {
      v7 = -48;
      v8 = v4;
    }
    return (char *)std::ostream::write();
  }
}

_BYTE *sub_20E997A8C(uint64_t a1, __int16 *a2)
{
  uint64_t v2;
  uint64_t *v4;

  v2 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v2 + 40))
    return (_BYTE *)sub_20E9F356C();
  v4 = (uint64_t *)(v2 + 16);
  return sub_20E9F32A8(&v4, *a2);
}

_BYTE *sub_20E997AD8(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t *v4;

  v2 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v2 + 40))
    return (_BYTE *)sub_20E9F3C50();
  v4 = (uint64_t *)(v2 + 16);
  return sub_20E9F3834(&v4, *a2);
}

_BYTE *sub_20E997B24(uint64_t a1, unint64_t *a2)
{
  uint64_t v2;
  uint64_t *v4;

  v2 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v2 + 40))
    return (_BYTE *)sub_20E9F45EC();
  v4 = (uint64_t *)(v2 + 16);
  return sub_20E9F40B0(&v4, *a2);
}

_BYTE *sub_20E997B70(uint64_t a1, unint64_t *a2)
{
  uint64_t v2;
  uint64_t *v4;

  v2 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v2 + 40))
    return (_BYTE *)sub_20E9F45EC();
  v4 = (uint64_t *)(v2 + 16);
  return sub_20E9F40B0(&v4, *a2);
}

char *sub_20E997BBC(uint64_t a1, char *a2)
{
  uint64_t v2;
  int v4;
  uint64_t *v5;
  char v6;
  char v7;
  char v8;

  v2 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v2 + 40))
  {
    v5 = (uint64_t *)(v2 + 16);
    return sub_20E9F3164(&v5, *a2);
  }
  else
  {
    v4 = *a2;
    if (v4 < 0)
    {
      v6 = -52;
      v7 = v4;
    }
    else
    {
      v8 = *a2;
    }
    return (char *)std::ostream::write();
  }
}

char *sub_20E997C44(uint64_t a1, char *a2)
{
  uint64_t v2;
  int v4;
  uint64_t *v5;
  char v6;
  char v7;
  char v8;

  v2 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v2 + 40))
  {
    v5 = (uint64_t *)(v2 + 16);
    return sub_20E9F301C(&v5, *a2);
  }
  else
  {
    v4 = *a2;
    if (v4 > -33)
    {
      v6 = *a2;
    }
    else
    {
      v7 = -48;
      v8 = v4;
    }
    return (char *)std::ostream::write();
  }
}

_BYTE *sub_20E997CD0(uint64_t a1, _WORD *a2)
{
  return sub_20E9ED1C4(*(_QWORD *)(a1 + 24), a2);
}

_BYTE *sub_20E997CD8(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t *v4;
  char v5;

  v2 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v2 + 40))
    return (_BYTE *)sub_20E9F3FC0((uint64_t)&v5, v2 + 8);
  v4 = (uint64_t *)(v2 + 16);
  return sub_20E9F3D4C(&v4, *a2);
}

_BYTE *sub_20E997D30(uint64_t a1, unint64_t *a2)
{
  uint64_t v2;
  uint64_t *v4;

  v2 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v2 + 40))
    return (_BYTE *)sub_20E9F4A34();
  v4 = (uint64_t *)(v2 + 16);
  return sub_20E9F472C(&v4, *a2);
}

_BYTE *sub_20E997D7C(uint64_t a1, unint64_t *a2)
{
  uint64_t v2;
  uint64_t *v4;

  v2 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v2 + 40))
    return (_BYTE *)sub_20E9F4A34();
  v4 = (uint64_t *)(v2 + 16);
  return sub_20E9F472C(&v4, *a2);
}

uint64_t **sub_20E997DC8(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t *v4;
  char v5;

  v2 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v2 + 40))
    return (uint64_t **)std::ostream::write();
  v4 = (uint64_t *)(v2 + 16);
  return sub_20E9F4B2C((uint64_t)&v5, &v4, a2);
}

uint64_t **sub_20E997E34(uint64_t a1, unint64_t *a2)
{
  uint64_t v2;
  char v4;
  uint64_t *v5[3];

  v5[2] = *(uint64_t **)MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v2 + 40))
    return (uint64_t **)std::ostream::write();
  v5[0] = (uint64_t *)(v2 + 16);
  return sub_20E9F4C08((uint64_t)&v4, v5, a2);
}

uint64_t **sub_20E997ED8(uint64_t a1, const void **a2)
{
  uint64_t v2;
  uint64_t *v4;
  char v5;
  char v6;

  v2 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v2 + 40))
    return (uint64_t **)sub_20E9F5254((uint64_t)&v6, v2 + 8, (uint64_t)a2);
  v4 = (uint64_t *)(v2 + 16);
  return sub_20E9F4E1C((uint64_t)&v5, &v4, a2);
}

uint64_t sub_20E997F2C(uint64_t result, uint64_t a2, _BYTE *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  _BYTE v7[3];

  v4 = a2;
  v5 = *(_QWORD *)(result + 24);
  if (*(_BYTE *)(v5 + 40))
  {
    v6 = (uint64_t *)(v5 + 16);
    if (a2)
    {
      do
      {
        result = (uint64_t)sub_20E9F4CE4((uint64_t)v7, &v6, a3++);
        --v4;
      }
      while (v4);
    }
  }
  else if (a2)
  {
    do
    {
      while (!*a3)
      {
        v7[2] = -62;
        result = std::ostream::write();
        ++a3;
        if (!--v4)
          return result;
      }
      v7[1] = -61;
      result = std::ostream::write();
      ++a3;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_20E997FF4(uint64_t result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t *v8;
  char v9;
  char v10;
  char v11;

  v4 = a2;
  v5 = *(_QWORD *)(result + 24);
  if (*(_BYTE *)(v5 + 40))
  {
    v8 = (uint64_t *)(v5 + 16);
    if (a2)
    {
      do
      {
        v6 = *a3++;
        result = (uint64_t)sub_20E9F301C(&v8, v6);
        --v4;
      }
      while (v4);
    }
  }
  else if (a2)
  {
    do
    {
      while (1)
      {
        v7 = *a3;
        if (v7 <= -33)
          break;
        v9 = *a3;
        result = std::ostream::write();
        ++a3;
        if (!--v4)
          return result;
      }
      v10 = -48;
      v11 = v7;
      result = std::ostream::write();
      ++a3;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_20E9980B0(uint64_t result, uint64_t a2, __int16 *a3)
{
  uint64_t v4;
  uint64_t v5;
  signed int v6;
  uint64_t v7;
  uint64_t *v8;

  v4 = *(_QWORD *)(result + 24);
  if (*(_BYTE *)(v4 + 40))
  {
    v8 = (uint64_t *)(v4 + 16);
    if (a2)
    {
      v5 = 2 * a2;
      do
      {
        v6 = *a3++;
        result = (uint64_t)sub_20E9F32A8(&v8, v6);
        v5 -= 2;
      }
      while (v5);
    }
  }
  else if (a2)
  {
    v7 = 2 * a2;
    do
    {
      ++a3;
      result = sub_20E9F356C();
      v7 -= 2;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_20E998130(uint64_t result, uint64_t a2, unsigned int *a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t *v8;

  v4 = *(_QWORD *)(result + 24);
  if (*(_BYTE *)(v4 + 40))
  {
    v8 = (uint64_t *)(v4 + 16);
    if (a2)
    {
      v5 = 4 * a2;
      do
      {
        v6 = *a3++;
        result = (uint64_t)sub_20E9F3834(&v8, v6);
        v5 -= 4;
      }
      while (v5);
    }
  }
  else if (a2)
  {
    v7 = 4 * a2;
    do
    {
      ++a3;
      result = sub_20E9F3C50();
      v7 -= 4;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_20E9981B0(uint64_t result, uint64_t a2, unint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  v4 = *(_QWORD *)(result + 24);
  if (*(_BYTE *)(v4 + 40))
  {
    v8 = (uint64_t *)(v4 + 16);
    if (a2)
    {
      v5 = 8 * a2;
      do
      {
        v6 = *a3++;
        result = (uint64_t)sub_20E9F40B0(&v8, v6);
        v5 -= 8;
      }
      while (v5);
    }
  }
  else if (a2)
  {
    v7 = 8 * a2;
    do
    {
      ++a3;
      result = sub_20E9F45EC();
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_20E998230(uint64_t result, uint64_t a2, unint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  v4 = *(_QWORD *)(result + 24);
  if (*(_BYTE *)(v4 + 40))
  {
    v8 = (uint64_t *)(v4 + 16);
    if (a2)
    {
      v5 = 8 * a2;
      do
      {
        v6 = *a3++;
        result = (uint64_t)sub_20E9F40B0(&v8, v6);
        v5 -= 8;
      }
      while (v5);
    }
  }
  else if (a2)
  {
    v7 = 8 * a2;
    do
    {
      ++a3;
      result = sub_20E9F45EC();
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_20E9982B0(uint64_t result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  int v7;
  uint64_t *v8;
  char v9;
  char v10;
  char v11;

  v4 = a2;
  v5 = *(_QWORD *)(result + 24);
  if (*(_BYTE *)(v5 + 40))
  {
    v8 = (uint64_t *)(v5 + 16);
    if (a2)
    {
      do
      {
        v6 = *a3++;
        result = (uint64_t)sub_20E9F3164(&v8, v6);
        --v4;
      }
      while (v4);
    }
  }
  else if (a2)
  {
    do
    {
      while (1)
      {
        v7 = *a3;
        if ((v7 & 0x80000000) == 0)
          break;
        v9 = -52;
        v10 = v7;
        result = std::ostream::write();
        ++a3;
        if (!--v4)
          return result;
      }
      v11 = *a3;
      result = std::ostream::write();
      ++a3;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_20E998368(uint64_t result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t *v8;
  char v9;
  char v10;
  char v11;

  v4 = a2;
  v5 = *(_QWORD *)(result + 24);
  if (*(_BYTE *)(v5 + 40))
  {
    v8 = (uint64_t *)(v5 + 16);
    if (a2)
    {
      do
      {
        v6 = *a3++;
        result = (uint64_t)sub_20E9F301C(&v8, v6);
        --v4;
      }
      while (v4);
    }
  }
  else if (a2)
  {
    do
    {
      while (1)
      {
        v7 = *a3;
        if (v7 <= -33)
          break;
        v9 = *a3;
        result = std::ostream::write();
        ++a3;
        if (!--v4)
          return result;
      }
      v10 = -48;
      v11 = v7;
      result = std::ostream::write();
      ++a3;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_20E998424(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[2];

  v4[0] = a2;
  v4[1] = a3;
  return sub_20E9ED4BC(*(_QWORD *)(a1 + 24), v4);
}

uint64_t sub_20E99844C(uint64_t result, uint64_t a2, unsigned int *a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  char v10;

  v4 = *(_QWORD *)(result + 24);
  if (*(_BYTE *)(v4 + 40))
  {
    v9 = (uint64_t *)(v4 + 16);
    if (a2)
    {
      v5 = 4 * a2;
      do
      {
        v6 = *a3++;
        result = (uint64_t)sub_20E9F3D4C(&v9, v6);
        v5 -= 4;
      }
      while (v5);
    }
  }
  else if (a2)
  {
    v7 = v4 + 8;
    v8 = 4 * a2;
    do
    {
      ++a3;
      result = sub_20E9F3FC0((uint64_t)&v10, v7);
      v8 -= 4;
    }
    while (v8);
  }
  return result;
}

uint64_t sub_20E9984D0(uint64_t result, uint64_t a2, unint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  v4 = *(_QWORD *)(result + 24);
  if (*(_BYTE *)(v4 + 40))
  {
    v8 = (uint64_t *)(v4 + 16);
    if (a2)
    {
      v5 = 8 * a2;
      do
      {
        v6 = *a3++;
        result = (uint64_t)sub_20E9F472C(&v8, v6);
        v5 -= 8;
      }
      while (v5);
    }
  }
  else if (a2)
  {
    v7 = 8 * a2;
    do
    {
      ++a3;
      result = sub_20E9F4A34();
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_20E998550(uint64_t result, uint64_t a2, unint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  v4 = *(_QWORD *)(result + 24);
  if (*(_BYTE *)(v4 + 40))
  {
    v8 = (uint64_t *)(v4 + 16);
    if (a2)
    {
      v5 = 8 * a2;
      do
      {
        v6 = *a3++;
        result = (uint64_t)sub_20E9F472C(&v8, v6);
        v5 -= 8;
      }
      while (v5);
    }
  }
  else if (a2)
  {
    v7 = 8 * a2;
    do
    {
      ++a3;
      result = sub_20E9F4A34();
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_20E9985D0(uint64_t result, uint64_t a2, unsigned int *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  _BYTE v9[2];
  unsigned int v10;

  v4 = *(_QWORD *)(result + 24);
  if (*(_BYTE *)(v4 + 40))
  {
    v8 = (uint64_t *)(v4 + 16);
    if (a2)
    {
      v5 = 4 * a2;
      do
      {
        result = (uint64_t)sub_20E9F4B2C((uint64_t)v9, &v8, a3++);
        v5 -= 4;
      }
      while (v5);
    }
  }
  else if (a2)
  {
    v6 = 4 * a2;
    do
    {
      v7 = *a3++;
      v9[1] = -54;
      v10 = bswap32(v7);
      result = std::ostream::write();
      v6 -= 4;
    }
    while (v6);
  }
  return result;
}

uint64_t sub_20E99866C(uint64_t result, uint64_t a2, unint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t *v9[3];

  v9[2] = *(uint64_t **)MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(result + 24);
  if (*(_BYTE *)(v4 + 40))
  {
    v9[0] = (uint64_t *)(v4 + 16);
    if (a2)
    {
      v5 = 8 * a2;
      do
      {
        result = (uint64_t)sub_20E9F4C08((uint64_t)&v8, v9, a3++);
        v5 -= 8;
      }
      while (v5);
    }
  }
  else if (a2)
  {
    v6 = 8 * a2;
    do
    {
      v7 = *a3++;
      LOBYTE(v9[0]) = -53;
      *(uint64_t **)((char *)v9 + 1) = (uint64_t *)bswap64(v7);
      result = std::ostream::write();
      v6 -= 8;
    }
    while (v6);
  }
  return result;
}

uint64_t sub_20E998734(uint64_t result, uint64_t a2, const void **a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  char v9;
  char v10;

  v4 = *(_QWORD *)(result + 24);
  if (*(_BYTE *)(v4 + 40))
  {
    v8 = (uint64_t *)(v4 + 16);
    if (a2)
    {
      v5 = 24 * a2;
      do
      {
        result = (uint64_t)sub_20E9F4E1C((uint64_t)&v9, &v8, a3);
        a3 += 3;
        v5 -= 24;
      }
      while (v5);
    }
  }
  else if (a2)
  {
    v6 = v4 + 8;
    v7 = 24 * a2;
    do
    {
      result = sub_20E9F5254((uint64_t)&v10, v6, (uint64_t)a3);
      a3 += 3;
      v7 -= 24;
    }
    while (v7);
  }
  return result;
}

uint64_t **sub_20E9987CC(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v6;
  unsigned int v7[2];
  uint64_t v8;
  char v9;

  v2 = *(_DWORD *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v4 + 40))
  {
    v6 = (uint64_t *)(v4 + 16);
    v7[0] = v2;
    v8 = v3;
    return sub_20E9F2D20((uint64_t)&v9, &v6, v7);
  }
  else
  {
    if (v2 > 0xFF)
    {
      if (HIWORD(v2))
      {
        LOBYTE(v7[0]) = -58;
        *(unsigned int *)((char *)v7 + 1) = bswap32(v2);
      }
      else
      {
        LOBYTE(v7[0]) = -59;
        *(_WORD *)((char *)v7 + 1) = bswap32(v2) >> 16;
      }
    }
    else
    {
      LOBYTE(v7[0]) = -60;
      BYTE1(v7[0]) = v2;
    }
    std::ostream::write();
    return (uint64_t **)std::ostream::write();
  }
}

uint64_t **sub_20E9988BC(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v6;
  unsigned int v7[2];
  uint64_t v8;
  char v9;

  v2 = *(_DWORD *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v4 + 40))
  {
    v6 = (uint64_t *)(v4 + 16);
    v7[0] = v2;
    v8 = v3;
    return sub_20E9F2D20((uint64_t)&v9, &v6, v7);
  }
  else
  {
    if (v2 > 0xFF)
    {
      if (HIWORD(v2))
      {
        LOBYTE(v7[0]) = -58;
        *(unsigned int *)((char *)v7 + 1) = bswap32(v2);
      }
      else
      {
        LOBYTE(v7[0]) = -59;
        *(_WORD *)((char *)v7 + 1) = bswap32(v2) >> 16;
      }
    }
    else
    {
      LOBYTE(v7[0]) = -60;
      BYTE1(v7[0]) = v2;
    }
    std::ostream::write();
    return (uint64_t **)std::ostream::write();
  }
}

_QWORD *sub_20E9989B4(_QWORD *result)
{
  uint64_t v1;
  void *v2;

  *(result - 2) = &off_24C9B7040;
  v1 = result[1];
  *result = &unk_24C9B7190;
  result[1] = 0;
  if (v1)
  {
    v2 = *(void **)(v1 + 80);
    if (v2)
    {
      *(_QWORD *)(v1 + 88) = v2;
      operator delete(v2);
    }
    if (*(_BYTE *)(v1 + 72))
      free(*(void **)(v1 + 56));
    if (*(_BYTE *)(v1 + 40))
      free(*(void **)(v1 + 24));
    return (_QWORD *)MEMORY[0x212BC6398](v1, 0x1030C408C1A3048);
  }
  return result;
}

void sub_20E998A30(_QWORD *a1)
{
  uint64_t v1;
  void *v2;

  v1 = a1[1];
  *a1 = &unk_24C9B7190;
  a1[1] = 0;
  *(a1 - 2) = &off_24C9B7040;
  if (v1)
  {
    v2 = *(void **)(v1 + 80);
    if (v2)
    {
      *(_QWORD *)(v1 + 88) = v2;
      operator delete(v2);
    }
    if (*(_BYTE *)(v1 + 72))
      free(*(void **)(v1 + 56));
    if (*(_BYTE *)(v1 + 40))
      free(*(void **)(v1 + 24));
    MEMORY[0x212BC6398](v1, 0x1030C408C1A3048);
  }
  JUMPOUT(0x212BC6398);
}

void sub_20E998AC4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B3B28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20E998AD4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B3B28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20E998B0C(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  CFTypeRef v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v3 = *(std::__shared_weak_count **)(a2 + 8);
  v16 = *(CFTypeRef *)a2;
  v17 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  sub_20E998C18(&v18, &v16);
  v6 = v19;
  *a1 = v18;
  a1[1] = v6;
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    v9 = v19;
    if (v19)
    {
      v10 = (unint64_t *)&v19->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  v12 = v17;
  if (!v17)
    return a1;
  v13 = (unint64_t *)&v17->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  return a1;
}

void sub_20E998C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E998C18(_QWORD *a1, CFTypeRef *a2)
{
  CFTypeRef v3;
  _QWORD *v4;

  v3 = *a2;
  if (*a2)
    CFRetain(*a2);
  *a1 = v3;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24C9B4418;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = v3;
  a1[1] = v4;
  return a1;
}

void sub_20E998C78(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20E998C90(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20E998CA8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E998CCC(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    CFRelease(v1);
}

uint64_t sub_20E998CEC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIPK14__CFDictionaryEC1ES5_EUlS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIPK14__CFDictionaryEC1ES5_EUlS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIPK14__CFDictionaryEC1ES5_EUlS5_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIPK14__CFDictionaryEC1ES5_EUlS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20E998D5C(uint64_t a1, char *a2, int a3)
{
  const std::locale *v6;
  size_t v7;

  v6 = (const std::locale *)MEMORY[0x212BC61AC]();
  *(_QWORD *)(a1 + 8) = std::locale::use_facet(v6, MEMORY[0x24BEDB350]);
  *(_QWORD *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, MEMORY[0x24BEDB4B0]);
  *(_DWORD *)(a1 + 24) = a3;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  v7 = strlen(a2);
  if (sub_20E998E28(a1, a2, &a2[v7]) != &a2[v7])
    sub_20E9992F0();
  return a1;
}

void sub_20E998DF8(_Unwind_Exception *a1)
{
  std::locale *v1;
  uint64_t v2;

  sub_20E86665C(v2);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void sub_20E998E14(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

char *sub_20E998E28(uint64_t a1, char *a2, char *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  char *v15;
  char *v16;
  uint64_t v17;
  int v18;
  unsigned __int8 *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  int v33;
  unsigned __int8 *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;

  v6 = (_QWORD *)operator new();
  *v6 = &unk_24C9B3D28;
  v7 = (_QWORD *)operator new();
  *v7 = &unk_24C9B3DD0;
  v7[1] = v6;
  v8 = (_QWORD *)operator new();
  *v8 = &unk_24C9B3D80;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = v7;
  v9 = *(std::__shared_weak_count **)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      v12 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 56) = v12;
      v13 = *(_DWORD *)(a1 + 24) & 0x1F0;
      if (v13 <= 0x3F)
        goto LABEL_6;
LABEL_11:
      if (v13 != 64)
      {
        if (v13 == 128)
          return sub_20E99991C(a1, a2, a3);
        if (v13 == 256)
          return sub_20E999B2C(a1, a2, a3);
LABEL_38:
        sub_20E999D3C();
      }
      return sub_20E999780(a1, a2, a3);
    }
  }
  v12 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 56) = v12;
  v13 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v13 > 0x3F)
    goto LABEL_11;
LABEL_6:
  if (v13)
  {
    if (v13 == 16)
      return sub_20E9995E8(a1, (unsigned __int8 *)a2, a3);
    if (v13 != 32)
      goto LABEL_38;
    return sub_20E999780(a1, a2, a3);
  }
  v15 = a2;
  while (1)
  {
    v16 = v15;
    v15 = sub_20E999FB8(a1, v15, a3);
    if (v15 == v16)
      break;
LABEL_17:
    if (v15 == v16)
      goto LABEL_23;
  }
  v17 = *(_QWORD *)(a1 + 56);
  v18 = *(_DWORD *)(a1 + 28);
  v19 = sub_20E99A32C(a1, v16, a3);
  if (v19 != (unsigned __int8 *)v16)
  {
    v15 = sub_20E99A5A8(a1, (char *)v19, a3, v17, v18 + 1, *(_DWORD *)(a1 + 28) + 1);
    goto LABEL_17;
  }
LABEL_23:
  if (v16 == a2)
  {
    v20 = (_QWORD *)operator new();
    v21 = *(_QWORD *)(a1 + 56);
    v22 = *(_QWORD *)(v21 + 8);
    *v20 = &unk_24C9B3DD0;
    v20[1] = v22;
    *(_QWORD *)(v21 + 8) = v20;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  }
  if (v16 == a3)
    return a3;
  while (2)
  {
    if (*v16 != 124)
      return v16;
    v29 = *(_QWORD *)(a1 + 56);
    v30 = v16 + 1;
    v31 = v16 + 1;
    while (2)
    {
      v16 = v31;
      v31 = sub_20E999FB8(a1, v31, a3);
      if (v31 != v16)
      {
LABEL_32:
        if (v31 == v16)
          goto LABEL_27;
        continue;
      }
      break;
    }
    v32 = *(_QWORD *)(a1 + 56);
    v33 = *(_DWORD *)(a1 + 28);
    v34 = sub_20E99A32C(a1, v16, a3);
    if (v34 != (unsigned __int8 *)v16)
    {
      v31 = sub_20E99A5A8(a1, (char *)v34, a3, v32, v33 + 1, *(_DWORD *)(a1 + 28) + 1);
      goto LABEL_32;
    }
LABEL_27:
    if (v16 == v30)
    {
      v35 = (_QWORD *)operator new();
      v36 = *(_QWORD *)(a1 + 56);
      v37 = *(_QWORD *)(v36 + 8);
      *v35 = &unk_24C9B3DD0;
      v35[1] = v37;
      *(_QWORD *)(v36 + 8) = v35;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    v23 = (_QWORD *)operator new();
    v24 = *(_QWORD *)(v29 + 8);
    v23[1] = *(_QWORD *)(v12 + 8);
    v23[2] = v24;
    *v23 = &unk_24C9B4340;
    *(_QWORD *)(v12 + 8) = v23;
    *(_QWORD *)(v29 + 8) = 0;
    v25 = (_QWORD *)operator new();
    v26 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    *v25 = &unk_24C9B3DD0;
    v25[1] = v26;
    *(_QWORD *)(v29 + 8) = v25;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
    v27 = (_QWORD *)operator new();
    v28 = *(_QWORD *)(v29 + 8);
    *v27 = &unk_24C9B4388;
    v27[1] = v28;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v27;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(v29 + 8);
    if (v16 != a3)
      continue;
    return a3;
  }
}

void sub_20E9992A8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_20E9992D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_20E9992F0()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x212BC5A14](exception, 17);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_20E999328(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *sub_20E99933C(uint64_t a1, char *a2, char *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  int v25;
  char *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = a2;
  while (1)
  {
    v8 = v7;
    v7 = sub_20E999FB8(a1, v7, a3);
    if (v7 == v8)
      break;
LABEL_2:
    if (v7 == v8)
      goto LABEL_6;
  }
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_DWORD *)(a1 + 28);
  v11 = (char *)sub_20E99A32C(a1, v8, a3);
  if (v11 != v8)
  {
    v7 = sub_20E99A5A8(a1, v11, a3, v9, v10 + 1, *(_DWORD *)(a1 + 28) + 1);
    goto LABEL_2;
  }
LABEL_6:
  if (v8 == a2)
  {
    v12 = (_QWORD *)operator new();
    v13 = *(_QWORD *)(a1 + 56);
    v14 = *(_QWORD *)(v13 + 8);
    *v12 = &unk_24C9B3DD0;
    v12[1] = v14;
    *(_QWORD *)(v13 + 8) = v12;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  }
  if (v8 == a3)
    return a3;
  while (2)
  {
    if (*v8 != 124)
      return v8;
    v21 = *(_QWORD *)(a1 + 56);
    v22 = v8 + 1;
    v23 = v8 + 1;
    while (2)
    {
      v8 = v23;
      v23 = sub_20E999FB8(a1, v23, a3);
      if (v23 != v8)
      {
LABEL_14:
        if (v23 == v8)
          goto LABEL_17;
        continue;
      }
      break;
    }
    v24 = *(_QWORD *)(a1 + 56);
    v25 = *(_DWORD *)(a1 + 28);
    v26 = (char *)sub_20E99A32C(a1, v8, a3);
    if (v26 != v8)
    {
      v23 = sub_20E99A5A8(a1, v26, a3, v24, v25 + 1, *(_DWORD *)(a1 + 28) + 1);
      goto LABEL_14;
    }
LABEL_17:
    if (v8 == v22)
    {
      v27 = (_QWORD *)operator new();
      v28 = *(_QWORD *)(a1 + 56);
      v29 = *(_QWORD *)(v28 + 8);
      *v27 = &unk_24C9B3DD0;
      v27[1] = v29;
      *(_QWORD *)(v28 + 8) = v27;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    v15 = (_QWORD *)operator new();
    v16 = *(_QWORD *)(v21 + 8);
    v15[1] = *(_QWORD *)(v6 + 8);
    v15[2] = v16;
    *v15 = &unk_24C9B4340;
    *(_QWORD *)(v6 + 8) = v15;
    *(_QWORD *)(v21 + 8) = 0;
    v17 = (_QWORD *)operator new();
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    *v17 = &unk_24C9B3DD0;
    v17[1] = v18;
    *(_QWORD *)(v21 + 8) = v17;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
    v19 = (_QWORD *)operator new();
    v20 = *(_QWORD *)(v21 + 8);
    *v19 = &unk_24C9B4388;
    v19[1] = v20;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v19;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(v21 + 8);
    if (v8 != a3)
      continue;
    return a3;
  }
}

char *sub_20E9995E8(uint64_t a1, unsigned __int8 *a2, char *a3)
{
  unsigned __int8 *v3;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;

  v3 = a2;
  if (a2 == (unsigned __int8 *)a3)
    return (char *)a2;
  if (*a2 == 94)
  {
    v6 = operator new();
    v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)v6 = &unk_24C9B3E78;
    *(_QWORD *)(v6 + 8) = v9;
    *(_BYTE *)(v6 + 16) = v7;
    *(_QWORD *)(v8 + 8) = v6;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    ++v3;
  }
  if (v3 != (unsigned __int8 *)a3)
  {
    while (v3 != (unsigned __int8 *)a3)
    {
      v10 = v3;
      v11 = *(_QWORD *)(a1 + 56);
      v12 = *(_DWORD *)(a1 + 28);
      v13 = (unsigned __int8 *)sub_20E9A239C(a1, (uint64_t)v10, a3);
      if (v13 != v10)
      {
        v3 = sub_20E9A25E0(a1, v13, (unsigned __int8 *)a3, v11, v12 + 1, *(_DWORD *)(a1 + 28) + 1);
        if (v3 != v10)
          continue;
      }
      if (v10 + 1 != (unsigned __int8 *)a3 || *v10 != 36)
        sub_20E9A2350();
      v14 = operator new();
      v15 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v16 = *(_QWORD *)(a1 + 56);
      v17 = *(_QWORD *)(v16 + 8);
      *(_QWORD *)v14 = &unk_24C9B3EC0;
      *(_QWORD *)(v14 + 8) = v17;
      *(_BYTE *)(v14 + 16) = v15;
      *(_QWORD *)(v16 + 8) = v14;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      return a3;
    }
  }
  return a3;
}

char *sub_20E999780(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  v3 = a3;
  v6 = *(_QWORD *)(a1 + 56);
  v7 = sub_20E9A2DF8(a1, a2, a3);
  if (v7 == a2)
    goto LABEL_13;
  do
  {
    v8 = v7;
    v7 = sub_20E9A2DF8(a1, v7, v3);
  }
  while (v7 != v8);
  if (v8 == a2)
LABEL_13:
    sub_20E9A2350();
  if (v8 != v3)
  {
    while (*v8 == 124)
    {
      v9 = *(_QWORD *)(a1 + 56);
      v10 = v8 + 1;
      v11 = sub_20E9A2DF8(a1, v8 + 1, v3);
      if (v11 == v8 + 1)
        goto LABEL_13;
      do
      {
        v8 = v11;
        v11 = sub_20E9A2DF8(a1, v11, v3);
      }
      while (v11 != v8);
      if (v8 == v10)
        goto LABEL_13;
      v12 = (_QWORD *)operator new();
      v13 = *(_QWORD *)(v9 + 8);
      v12[1] = *(_QWORD *)(v6 + 8);
      v12[2] = v13;
      *v12 = &unk_24C9B4340;
      *(_QWORD *)(v6 + 8) = v12;
      *(_QWORD *)(v9 + 8) = 0;
      v14 = (_QWORD *)operator new();
      v15 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      *v14 = &unk_24C9B3DD0;
      v14[1] = v15;
      *(_QWORD *)(v9 + 8) = v14;
      *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
      v16 = (_QWORD *)operator new();
      v17 = *(_QWORD *)(v9 + 8);
      *v16 = &unk_24C9B4388;
      v16[1] = v17;
      *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v16;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(v9 + 8);
      if (v8 == v3)
        return v3;
    }
    return v8;
  }
  return v3;
}

char *sub_20E99991C(uint64_t a1, char *__s, char *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  char *v24;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = (char *)memchr(__s, 10, a3 - __s);
  if (v7)
    v8 = v7;
  else
    v8 = a3;
  if (v8 == __s)
  {
    v10 = (_QWORD *)operator new();
    v11 = *(_QWORD *)(a1 + 56);
    v12 = *(_QWORD *)(v11 + 8);
    *v10 = &unk_24C9B3DD0;
    v10[1] = v12;
    *(_QWORD *)(v11 + 8) = v10;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    if (v8 == a3)
      v9 = v8;
    else
      v9 = v8 + 1;
    if (v9 == a3)
      return a3;
  }
  else
  {
    sub_20E9995E8(a1, (unsigned __int8 *)__s, v8);
    if (v8 == a3)
      v9 = v8;
    else
      v9 = v8 + 1;
    if (v9 == a3)
      return a3;
  }
  v13 = *(_QWORD *)(a1 + 56);
  do
  {
    v23 = (char *)memchr(v9, 10, a3 - v9);
    if (v23)
      v24 = v23;
    else
      v24 = a3;
    if (v24 == v9)
    {
      v14 = (_QWORD *)operator new();
      v15 = *(_QWORD *)(a1 + 56);
      v16 = *(_QWORD *)(v15 + 8);
      *v14 = &unk_24C9B3DD0;
      v14[1] = v16;
      *(_QWORD *)(v15 + 8) = v14;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    else
    {
      sub_20E9995E8(a1, (unsigned __int8 *)v9, v24);
    }
    v17 = (_QWORD *)operator new();
    v18 = *(_QWORD *)(v13 + 8);
    v17[1] = *(_QWORD *)(v6 + 8);
    v17[2] = v18;
    *v17 = &unk_24C9B4340;
    *(_QWORD *)(v6 + 8) = v17;
    *(_QWORD *)(v13 + 8) = 0;
    v19 = (_QWORD *)operator new();
    v20 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    *v19 = &unk_24C9B3DD0;
    v19[1] = v20;
    *(_QWORD *)(v13 + 8) = v19;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
    v21 = (_QWORD *)operator new();
    v22 = *(_QWORD *)(v13 + 8);
    *v21 = &unk_24C9B4388;
    v21[1] = v22;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v21;
    v13 = *(_QWORD *)(v13 + 8);
    *(_QWORD *)(a1 + 56) = v13;
    if (v24 == a3)
      v9 = v24;
    else
      v9 = v24 + 1;
  }
  while (v9 != a3);
  return a3;
}

char *sub_20E999B2C(uint64_t a1, char *__s, char *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  char *v24;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = (char *)memchr(__s, 10, a3 - __s);
  if (v7)
    v8 = v7;
  else
    v8 = a3;
  if (v8 == __s)
  {
    v10 = (_QWORD *)operator new();
    v11 = *(_QWORD *)(a1 + 56);
    v12 = *(_QWORD *)(v11 + 8);
    *v10 = &unk_24C9B3DD0;
    v10[1] = v12;
    *(_QWORD *)(v11 + 8) = v10;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    if (v8 == a3)
      v9 = v8;
    else
      v9 = v8 + 1;
    if (v9 == a3)
      return a3;
  }
  else
  {
    sub_20E999780(a1, __s, v8);
    if (v8 == a3)
      v9 = v8;
    else
      v9 = v8 + 1;
    if (v9 == a3)
      return a3;
  }
  v13 = *(_QWORD *)(a1 + 56);
  do
  {
    v23 = (char *)memchr(v9, 10, a3 - v9);
    if (v23)
      v24 = v23;
    else
      v24 = a3;
    if (v24 == v9)
    {
      v14 = (_QWORD *)operator new();
      v15 = *(_QWORD *)(a1 + 56);
      v16 = *(_QWORD *)(v15 + 8);
      *v14 = &unk_24C9B3DD0;
      v14[1] = v16;
      *(_QWORD *)(v15 + 8) = v14;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    else
    {
      sub_20E999780(a1, v9, v24);
    }
    v17 = (_QWORD *)operator new();
    v18 = *(_QWORD *)(v13 + 8);
    v17[1] = *(_QWORD *)(v6 + 8);
    v17[2] = v18;
    *v17 = &unk_24C9B4340;
    *(_QWORD *)(v6 + 8) = v17;
    *(_QWORD *)(v13 + 8) = 0;
    v19 = (_QWORD *)operator new();
    v20 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    *v19 = &unk_24C9B3DD0;
    v19[1] = v20;
    *(_QWORD *)(v13 + 8) = v19;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
    v21 = (_QWORD *)operator new();
    v22 = *(_QWORD *)(v13 + 8);
    *v21 = &unk_24C9B4388;
    v21[1] = v22;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v21;
    v13 = *(_QWORD *)(v13 + 8);
    *(_QWORD *)(a1 + 56) = v13;
    if (v24 == a3)
      v9 = v24;
    else
      v9 = v24 + 1;
  }
  while (v9 != a3);
  return a3;
}

void sub_20E999D3C()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x212BC5A14](exception, 14);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_20E999D74(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20E999D8C()
{
  JUMPOUT(0x212BC6398);
}

void sub_20E999DA0(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

void sub_20E999DB8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E999DDC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20E999DF4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000002102E5A2FLL)
    return a1 + 24;
  if (((v3 & 0x80000002102E5A2FLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000002102E5A2FLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000002102E5A2FLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

_QWORD *sub_20E999E74(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24C9B3E48;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20E999EB8(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_24C9B3E48;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E999F0C(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *sub_20E999F20(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24C9B3E48;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20E999F64(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_24C9B3E48;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x212BC6398);
}

char *sub_20E999FB8(uint64_t a1, char *a2, char *a3)
{
  int v6;
  char *v7;
  BOOL v8;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int v20;
  char *v21;
  int v22;
  uint64_t v23;
  int v24;
  std::locale v25[3];
  int v26;
  int v27;

  if (a2 == a3)
    return a2;
  v6 = *a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 != a3)
      {
        v15 = a2[1];
        if (v15 == 66)
        {
          v16 = operator new();
          v23 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          *(_QWORD *)v16 = &unk_24C9B3F08;
          *(_QWORD *)(v16 + 8) = v23;
          std::locale::locale((std::locale *)(v16 + 16), (const std::locale *)a1);
          *(_OWORD *)(v16 + 24) = *(_OWORD *)(a1 + 8);
          *(_BYTE *)(v16 + 40) = 1;
        }
        else
        {
          if (v15 != 98)
            return a2;
          v16 = operator new();
          v17 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          *(_QWORD *)v16 = &unk_24C9B3F08;
          *(_QWORD *)(v16 + 8) = v17;
          std::locale::locale((std::locale *)(v16 + 16), (const std::locale *)a1);
          *(_OWORD *)(v16 + 24) = *(_OWORD *)(a1 + 8);
          *(_BYTE *)(v16 + 40) = 0;
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v16;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        return a2 + 2;
      }
      return a2;
    }
    if (v6 != 94)
      return a2;
    v10 = operator new();
    v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v12 = *(_QWORD *)(a1 + 56);
    v13 = *(_QWORD *)(v12 + 8);
    v14 = (char *)&unk_24C9B3E68;
LABEL_14:
    *(_QWORD *)v10 = v14 + 16;
    *(_QWORD *)(v10 + 8) = v13;
    *(_BYTE *)(v10 + 16) = v11;
    *(_QWORD *)(v12 + 8) = v10;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    return a2 + 1;
  }
  if (v6 == 36)
  {
    v10 = operator new();
    v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v12 = *(_QWORD *)(a1 + 56);
    v13 = *(_QWORD *)(v12 + 8);
    v14 = (char *)&unk_24C9B3EB0;
    goto LABEL_14;
  }
  v8 = v6 == 40;
  v7 = a2 + 1;
  v8 = !v8 || v7 == a3;
  if (v8)
    return a2;
  v8 = *v7 == 63;
  v18 = a2 + 2;
  if (!v8 || v18 == a3)
    return a2;
  v20 = *v18;
  if (v20 == 33)
  {
    sub_20E99AF6C((uint64_t)v25);
    v26 = *(_DWORD *)(a1 + 24);
    v21 = (char *)sub_20E998E28(v25, a2 + 3, a3);
    v24 = v27;
    sub_20E99AFD8(a1, (uint64_t)v25, 1, *(_DWORD *)(a1 + 28));
    *(_DWORD *)(a1 + 28) += v24;
    if (v21 == a3 || *v21 != 41)
      sub_20E99B0A0();
    goto LABEL_32;
  }
  if (v20 != 61)
    return a2;
  sub_20E99AF6C((uint64_t)v25);
  v26 = *(_DWORD *)(a1 + 24);
  v21 = (char *)sub_20E998E28(v25, a2 + 3, a3);
  v22 = v27;
  sub_20E99AFD8(a1, (uint64_t)v25, 0, *(_DWORD *)(a1 + 28));
  *(_DWORD *)(a1 + 28) += v22;
  if (v21 == a3 || *v21 != 41)
    sub_20E99B0A0();
LABEL_32:
  sub_20E98EEFC(v25);
  return v21 + 1;
}

void sub_20E99A2DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  sub_20E98EEFC(&a9);
  _Unwind_Resume(a1);
}

void sub_20E99A2F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  sub_20E98EEFC(&a9);
  _Unwind_Resume(a1);
}

void sub_20E99A304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  sub_20E98EEFC(&a9);
  _Unwind_Resume(a1);
}

void sub_20E99A318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  sub_20E98EEFC(&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_20E99A32C(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  _DWORD *v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = a2;
  if (a2 != a3)
  {
    switch(*a2)
    {
      case '(':
        if (a2 + 1 == a3)
          goto LABEL_26;
        if (a2 + 2 != a3 && a2[1] == 63 && a2[2] == 58)
        {
          v6 = (_DWORD *)(a1 + 36);
          ++*(_DWORD *)(a1 + 36);
          v7 = sub_20E99933C(a1, a2 + 3, a3);
          if (v7 == a3)
            goto LABEL_26;
          v3 = v7;
          if (*v7 != 41)
            goto LABEL_26;
        }
        else
        {
          if ((*(_BYTE *)(a1 + 24) & 2) != 0)
          {
            v13 = *(_DWORD *)(a1 + 28);
          }
          else
          {
            v12 = operator new();
            v13 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v13;
            v14 = *(_QWORD *)(a1 + 56);
            v15 = *(_QWORD *)(v14 + 8);
            *(_QWORD *)v12 = &unk_24C9B41D8;
            *(_QWORD *)(v12 + 8) = v15;
            *(_DWORD *)(v12 + 16) = v13;
            *(_QWORD *)(v14 + 8) = v12;
            *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          }
          v6 = (_DWORD *)(a1 + 36);
          ++*(_DWORD *)(a1 + 36);
          v16 = sub_20E99933C(a1, v3 + 1, a3);
          if (v16 == a3 || (v3 = v16, *v16 != 41))
LABEL_26:
            sub_20E99B0A0();
          if ((*(_BYTE *)(a1 + 24) & 2) == 0)
          {
            v17 = operator new();
            v18 = *(_QWORD *)(a1 + 56);
            v19 = *(_QWORD *)(v18 + 8);
            *(_QWORD *)v17 = &unk_24C9B4220;
            *(_QWORD *)(v17 + 8) = v19;
            *(_DWORD *)(v17 + 16) = v13;
            *(_QWORD *)(v18 + 8) = v17;
            *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          }
        }
        --*v6;
LABEL_23:
        ++v3;
        break;
      case ')':
      case ',':
      case '-':
      case '/':
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
      case ':':
      case ';':
      case '<':
      case '=':
      case '>':
      case '@':
      case 'A':
      case 'B':
      case 'C':
      case 'D':
      case 'E':
      case 'F':
      case 'G':
      case 'H':
      case 'I':
      case 'J':
      case 'K':
      case 'L':
      case 'M':
      case 'N':
      case 'O':
      case 'P':
      case 'Q':
      case 'R':
      case 'S':
      case 'T':
      case 'U':
      case 'V':
      case 'W':
      case 'X':
      case 'Y':
      case 'Z':
        return sub_20E99C908(a1, a2, a3);
      case '*':
      case '+':
      case '?':
        goto LABEL_25;
      case '.':
        v8 = (_QWORD *)operator new();
        v9 = *(_QWORD *)(a1 + 56);
        v10 = *(_QWORD *)(v9 + 8);
        *v8 = &unk_24C9B3F98;
        v8[1] = v10;
        *(_QWORD *)(v9 + 8) = v8;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        goto LABEL_23;
      case '[':
        return (unsigned __int8 *)sub_20E99C74C(a1, a2, a3);
      case '\\':
        return sub_20E99C5D4(a1, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
      default:
        if (*a2 == 123)
LABEL_25:
          sub_20E99C8BC();
        return sub_20E99C908(a1, a2, a3);
    }
  }
  return (unsigned __int8 *)v3;
}

char *sub_20E99A5A8(uint64_t a1, char *a2, char *a3, uint64_t a4, int a5, int a6)
{
  int v11;
  int v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  char *v21;
  int v22;
  int v23;
  char *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  BOOL v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  char *v56;
  int v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  int v63;
  char *v64;
  int v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;

  if (a2 == a3)
    return a2;
  v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  v12 = *a2;
  if (v12 <= 62)
  {
    if (v12 == 42)
    {
      v13 = a2 + 1;
      if (v11)
        v29 = 1;
      else
        v29 = v13 == a3;
      if (v29 || *v13 != 63)
      {
        v46 = (_QWORD *)operator new();
        v47 = *(_QWORD *)(a1 + 56);
        v48 = *(_QWORD *)(v47 + 8);
        *v46 = &unk_24C9B3DD0;
        v46[1] = v48;
        *(_QWORD *)(v47 + 8) = 0;
        v17 = operator new();
        v49 = *(_DWORD *)(a1 + 32);
        v50 = *(_QWORD *)(a4 + 8);
        *(_QWORD *)(v17 + 16) = v46;
        *(_QWORD *)v17 = &unk_24C9B4268;
        *(_QWORD *)(v17 + 8) = v50;
        *(_OWORD *)(v17 + 24) = xmmword_2102E3FC0;
        *(_DWORD *)(v17 + 40) = v49;
        *(_DWORD *)(v17 + 44) = a5;
        *(_DWORD *)(v17 + 48) = a6;
        *(_BYTE *)(v17 + 52) = 1;
        *(_QWORD *)(a4 + 8) = 0;
        v20 = (_QWORD *)operator new();
        goto LABEL_71;
      }
      v30 = (_QWORD *)operator new();
      v31 = *(_QWORD *)(a1 + 56);
      v32 = *(_QWORD *)(v31 + 8);
      *v30 = &unk_24C9B3DD0;
      v30[1] = v32;
      *(_QWORD *)(v31 + 8) = 0;
      v17 = operator new();
      v33 = *(_DWORD *)(a1 + 32);
      *(_QWORD *)(v17 + 16) = v30;
      v34 = *(_QWORD *)(a4 + 8);
      *(_QWORD *)v17 = &unk_24C9B4268;
      *(_QWORD *)(v17 + 8) = v34;
      *(_OWORD *)(v17 + 24) = xmmword_2102E3FC0;
      *(_DWORD *)(v17 + 40) = v33;
      *(_DWORD *)(v17 + 44) = a5;
      *(_DWORD *)(v17 + 48) = a6;
      *(_BYTE *)(v17 + 52) = 0;
      *(_QWORD *)(a4 + 8) = 0;
      v20 = (_QWORD *)operator new();
      goto LABEL_41;
    }
    if (v12 == 43)
    {
      v13 = a2 + 1;
      if (v11 || v13 == a3 || *v13 != 63)
      {
        v41 = (_QWORD *)operator new();
        v42 = *(_QWORD *)(a1 + 56);
        v43 = *(_QWORD *)(v42 + 8);
        *v41 = &unk_24C9B3DD0;
        v41[1] = v43;
        *(_QWORD *)(v42 + 8) = 0;
        v17 = operator new();
        v44 = *(_DWORD *)(a1 + 32);
        v45 = *(_QWORD *)(a4 + 8);
        *(_QWORD *)(v17 + 16) = v41;
        *(_QWORD *)v17 = &unk_24C9B4268;
        *(_QWORD *)(v17 + 8) = v45;
        *(_OWORD *)(v17 + 24) = xmmword_2102E3FB0;
        *(_DWORD *)(v17 + 40) = v44;
        *(_DWORD *)(v17 + 44) = a5;
        *(_DWORD *)(v17 + 48) = a6;
        *(_BYTE *)(v17 + 52) = 1;
        *(_QWORD *)(a4 + 8) = 0;
        v20 = (_QWORD *)operator new();
        goto LABEL_71;
      }
      v14 = (_QWORD *)operator new();
      v15 = *(_QWORD *)(a1 + 56);
      v16 = *(_QWORD *)(v15 + 8);
      *v14 = &unk_24C9B3DD0;
      v14[1] = v16;
      *(_QWORD *)(v15 + 8) = 0;
      v17 = operator new();
      v18 = *(_DWORD *)(a1 + 32);
      *(_QWORD *)(v17 + 16) = v14;
      v19 = *(_QWORD *)(a4 + 8);
      *(_QWORD *)v17 = &unk_24C9B4268;
      *(_QWORD *)(v17 + 8) = v19;
      *(_OWORD *)(v17 + 24) = xmmword_2102E3FB0;
      *(_DWORD *)(v17 + 40) = v18;
      *(_DWORD *)(v17 + 44) = a5;
      *(_DWORD *)(v17 + 48) = a6;
      *(_BYTE *)(v17 + 52) = 0;
      *(_QWORD *)(a4 + 8) = 0;
      v20 = (_QWORD *)operator new();
LABEL_41:
      v13 = a2 + 2;
LABEL_71:
      *v20 = &unk_24C9B42F8;
      v20[1] = v17;
      *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v20;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(v17 + 16);
      *(_QWORD *)(a4 + 8) = v17;
      ++*(_DWORD *)(a1 + 32);
      return v13;
    }
    return a2;
  }
  if (v12 == 63)
  {
    v13 = a2 + 1;
    if (v11)
      v35 = 1;
    else
      v35 = v13 == a3;
    if (v35 || *v13 != 63)
    {
      v51 = (_QWORD *)operator new();
      v52 = *(_QWORD *)(a1 + 56);
      v53 = *(_QWORD *)(v52 + 8);
      *v51 = &unk_24C9B3DD0;
      v51[1] = v53;
      *(_QWORD *)(v52 + 8) = 0;
      v17 = operator new();
      v54 = *(_DWORD *)(a1 + 32);
      v55 = *(_QWORD *)(a4 + 8);
      *(_QWORD *)(v17 + 16) = v51;
      *(_QWORD *)v17 = &unk_24C9B4268;
      *(_QWORD *)(v17 + 8) = v55;
      *(_OWORD *)(v17 + 24) = xmmword_2102E3FA0;
      *(_DWORD *)(v17 + 40) = v54;
      *(_DWORD *)(v17 + 44) = a5;
      *(_DWORD *)(v17 + 48) = a6;
      *(_BYTE *)(v17 + 52) = 1;
      *(_QWORD *)(a4 + 8) = 0;
      v20 = (_QWORD *)operator new();
      goto LABEL_71;
    }
    v36 = (_QWORD *)operator new();
    v37 = *(_QWORD *)(a1 + 56);
    v38 = *(_QWORD *)(v37 + 8);
    *v36 = &unk_24C9B3DD0;
    v36[1] = v38;
    *(_QWORD *)(v37 + 8) = 0;
    v17 = operator new();
    v39 = *(_DWORD *)(a1 + 32);
    *(_QWORD *)(v17 + 16) = v36;
    v40 = *(_QWORD *)(a4 + 8);
    *(_QWORD *)v17 = &unk_24C9B4268;
    *(_QWORD *)(v17 + 8) = v40;
    *(_OWORD *)(v17 + 24) = xmmword_2102E3FA0;
    *(_DWORD *)(v17 + 40) = v39;
    *(_DWORD *)(v17 + 44) = a5;
    *(_DWORD *)(v17 + 48) = a6;
    *(_BYTE *)(v17 + 52) = 0;
    *(_QWORD *)(a4 + 8) = 0;
    v20 = (_QWORD *)operator new();
    goto LABEL_41;
  }
  if (v12 != 123)
    return a2;
  v21 = a2 + 1;
  if (a2 + 1 == a3)
    goto LABEL_73;
  v22 = *v21;
  if ((v22 & 0xF8) != 0x30 && (v22 & 0xFE) != 0x38)
    goto LABEL_73;
  v23 = v22 - 48;
  v24 = a2 + 2;
  if (a2 + 2 == a3)
  {
LABEL_19:
    v24 = a3;
  }
  else
  {
    while (1)
    {
      v25 = *v24;
      if ((v25 & 0xF8) != 0x30 && (v25 & 0xFE) != 0x38)
        break;
      if (v23 >= 214748364)
        goto LABEL_73;
      v23 = v25 + 10 * v23 - 48;
      if (++v24 == a3)
        goto LABEL_19;
    }
  }
  if (v24 == v21)
    goto LABEL_73;
  if (v24 == a3)
    goto LABEL_74;
  v26 = *v24;
  if (v26 != 44)
  {
    if (v26 == 125)
    {
      v13 = v24 + 1;
      if (v11 || v13 == a3 || *v13 != 63)
      {
        v58 = (_QWORD *)operator new();
        v59 = *(_QWORD *)(a1 + 56);
        v60 = *(_QWORD *)(v59 + 8);
        *v58 = &unk_24C9B3DD0;
        v58[1] = v60;
        *(_QWORD *)(v59 + 8) = 0;
        v17 = operator new();
        v61 = *(_DWORD *)(a1 + 32);
        v62 = *(_QWORD *)(a4 + 8);
        *(_QWORD *)v17 = &unk_24C9B4268;
        *(_QWORD *)(v17 + 8) = v62;
        *(_QWORD *)(v17 + 16) = v58;
        *(_QWORD *)(v17 + 24) = v23;
        *(_QWORD *)(v17 + 32) = v23;
        *(_DWORD *)(v17 + 40) = v61;
        *(_DWORD *)(v17 + 44) = a5;
        *(_DWORD *)(v17 + 48) = a6;
        *(_BYTE *)(v17 + 52) = 1;
        *(_QWORD *)(a4 + 8) = 0;
        v20 = (_QWORD *)operator new();
        goto LABEL_71;
      }
      v27 = v23;
      v13 = v24 + 2;
      v28 = v23;
      goto LABEL_68;
    }
    goto LABEL_73;
  }
  v56 = v24 + 1;
  if (v24 + 1 == a3)
    goto LABEL_73;
  v57 = *v56;
  if (v57 != 125)
  {
    if ((v57 & 0xF8) == 0x30 || (v57 & 0xFE) == 0x38)
    {
      v63 = v57 - 48;
      v64 = v24 + 2;
      if (v64 == a3)
      {
LABEL_59:
        v64 = a3;
      }
      else
      {
        while (1)
        {
          v65 = *v64;
          if ((v65 & 0xF8) != 0x30 && (v65 & 0xFE) != 0x38)
            break;
          if (v63 >= 214748364)
            goto LABEL_73;
          v63 = v65 + 10 * v63 - 48;
          if (++v64 == a3)
            goto LABEL_59;
        }
      }
      if (v64 != v56 && v64 != a3 && *v64 == 125)
      {
        if (v63 >= v23)
        {
          v13 = v64 + 1;
          if (v11 || v13 == a3 || *v13 != 63)
          {
            v71 = (_QWORD *)operator new();
            v72 = *(_QWORD *)(a1 + 56);
            v73 = *(_QWORD *)(v72 + 8);
            *v71 = &unk_24C9B3DD0;
            v71[1] = v73;
            *(_QWORD *)(v72 + 8) = 0;
            v17 = operator new();
            v74 = *(_DWORD *)(a1 + 32);
            v75 = *(_QWORD *)(a4 + 8);
            *(_QWORD *)v17 = &unk_24C9B4268;
            *(_QWORD *)(v17 + 8) = v75;
            *(_QWORD *)(v17 + 16) = v71;
            *(_QWORD *)(v17 + 24) = v23;
            *(_QWORD *)(v17 + 32) = v63;
            *(_DWORD *)(v17 + 40) = v74;
            *(_DWORD *)(v17 + 44) = a5;
            *(_DWORD *)(v17 + 48) = a6;
            *(_BYTE *)(v17 + 52) = 1;
            *(_QWORD *)(a4 + 8) = 0;
            v20 = (_QWORD *)operator new();
            goto LABEL_71;
          }
          v27 = v23;
          v28 = v63;
          v13 = v64 + 2;
LABEL_68:
          sub_20E9A1B88(a1, v27, v28, a4, a5, a6, 0);
          return v13;
        }
LABEL_73:
        sub_20E9A1CE4();
      }
    }
LABEL_74:
    sub_20E9A1D30();
  }
  v13 = v24 + 2;
  if (v11 || v13 == a3 || *v13 != 63)
  {
    v66 = (_QWORD *)operator new();
    v67 = *(_QWORD *)(a1 + 56);
    v68 = *(_QWORD *)(v67 + 8);
    *v66 = &unk_24C9B3DD0;
    v66[1] = v68;
    *(_QWORD *)(v67 + 8) = 0;
    v17 = operator new();
    v69 = *(_DWORD *)(a1 + 32);
    v70 = *(_QWORD *)(a4 + 8);
    *(_QWORD *)v17 = &unk_24C9B4268;
    *(_QWORD *)(v17 + 8) = v70;
    *(_QWORD *)(v17 + 16) = v66;
    *(_QWORD *)(v17 + 24) = v23;
    *(_QWORD *)(v17 + 32) = -1;
    *(_DWORD *)(v17 + 40) = v69;
    *(_DWORD *)(v17 + 44) = a5;
    *(_DWORD *)(v17 + 48) = a6;
    *(_BYTE *)(v17 + 52) = 1;
    *(_QWORD *)(a4 + 8) = 0;
    v20 = (_QWORD *)operator new();
    goto LABEL_71;
  }
  v13 = v24 + 3;
  sub_20E9A1A38(a1, v23, a4, a5, a6);
  return v13;
}

void sub_20E99AED4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20E99AF6C(uint64_t a1)
{
  const std::locale *v2;

  v2 = (const std::locale *)MEMORY[0x212BC61AC]();
  *(_QWORD *)(a1 + 8) = std::locale::use_facet(v2, MEMORY[0x24BEDB350]);
  *(_QWORD *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, MEMORY[0x24BEDB4B0]);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  return a1;
}

void sub_20E99AFC4(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

std::locale *sub_20E99AFD8(uint64_t a1, uint64_t a2, char a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  std::locale *result;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  v8 = operator new();
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  *(_QWORD *)v8 = &unk_24C9B3F50;
  *(_QWORD *)(v8 + 8) = v9;
  result = std::locale::locale((std::locale *)(v8 + 16), (const std::locale *)a2);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v8 + 40) = *(_OWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(v8 + 56) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(v8 + 64) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_QWORD *)(v8 + 72) = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(v8 + 80) = a4;
  *(_BYTE *)(v8 + 84) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v8;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  return result;
}

void sub_20E99B0A0()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x212BC5A14](exception, 6);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_20E99B0D8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E99B0EC(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24C9B3E48;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20E99B130(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_24C9B3E48;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E99B184(uint64_t result, uint64_t a2)
{
  int v2;

  if (!*(_BYTE *)(a2 + 92))
  {
    if (!*(_BYTE *)(result + 16))
      goto LABEL_12;
    v2 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10)
      goto LABEL_12;
LABEL_11:
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
    return result;
  }
  if (*(_QWORD *)(a2 + 16) == *(_QWORD *)(a2 + 8) && (*(_BYTE *)(a2 + 88) & 1) == 0)
    goto LABEL_11;
LABEL_12:
  *(_DWORD *)a2 = -993;
  *(_QWORD *)(a2 + 80) = 0;
  return result;
}

_QWORD *sub_20E99B1E4(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24C9B3E48;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20E99B228(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_24C9B3E48;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E99B27C(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  int v3;
  BOOL v4;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(_BYTE *)(a2 + 88) & 2) == 0
    || *(_BYTE *)(result + 16) && ((v3 = *v2, v3 != 13) ? (v4 = v3 == 10) : (v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  else
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  return result;
}

std::locale *sub_20E99B2CC(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24C9B3F08;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_24C9B3E48;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void sub_20E99B324(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24C9B3F08;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_24C9B3E48;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E99B38C(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v2 = *(unsigned __int8 **)(a2 + 8);
  v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3)
    goto LABEL_19;
  v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 != v3)
  {
    if (v4 == v2)
    {
      v5 = *(_DWORD *)(a2 + 88);
      if ((v5 & 0x80) == 0)
      {
        if ((v5 & 4) == 0)
        {
          v6 = *v2;
          if (v6 == 95)
            goto LABEL_17;
          goto LABEL_15;
        }
        goto LABEL_19;
      }
    }
    v7 = *(v4 - 1);
    v8 = *v4;
    if (v7 == 95
      || (v7 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v7) & 0x500) != 0)
    {
      v9 = 1;
      if ((_DWORD)v8 == 95)
        goto LABEL_24;
    }
    else
    {
      v9 = 0;
      if ((_DWORD)v8 == 95)
        goto LABEL_24;
    }
    if ((v8 & 0x80) != 0 || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v8) & 0x500) == 0)
    {
      if (*(_BYTE *)(result + 40) == (v9 != 0))
        goto LABEL_20;
      goto LABEL_27;
    }
LABEL_24:
    if (*(_BYTE *)(result + 40) != (v9 != 1))
      goto LABEL_27;
    goto LABEL_20;
  }
  if ((*(_BYTE *)(a2 + 88) & 8) == 0)
  {
    v6 = *(v3 - 1);
    if (v6 == 95)
      goto LABEL_17;
LABEL_15:
    if ((v6 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
    {
LABEL_17:
      if (*(_BYTE *)(result + 40) != 1)
        goto LABEL_27;
LABEL_20:
      *(_DWORD *)a2 = -993;
      *(_QWORD *)(a2 + 80) = 0;
      return result;
    }
  }
LABEL_19:
  if (!*(_BYTE *)(result + 40))
    goto LABEL_20;
LABEL_27:
  v10 = *(_QWORD *)(result + 8);
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = v10;
  return result;
}

std::locale *sub_20E99B4E0(std::locale *a1)
{
  std::locale *v2;
  std::__shared_weak_count *locale;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::locale::__imp *v6;

  a1->__locale_ = (std::locale::__imp *)&unk_24C9B3F50;
  v2 = a1 + 2;
  locale = (std::__shared_weak_count *)a1[8].__locale_;
  if (locale)
  {
    p_shared_owners = (unint64_t *)&locale->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
      std::__shared_weak_count::__release_weak(locale);
    }
  }
  std::locale::~locale(v2);
  a1->__locale_ = (std::locale::__imp *)&unk_24C9B3E48;
  v6 = a1[1].__locale_;
  if (v6)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v6 + 8))(v6);
  return a1;
}

void sub_20E99B580(std::locale *a1)
{
  std::locale *v2;
  std::__shared_weak_count *locale;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::locale::__imp *v6;

  a1->__locale_ = (std::locale::__imp *)&unk_24C9B3F50;
  v2 = a1 + 2;
  locale = (std::__shared_weak_count *)a1[8].__locale_;
  if (locale)
  {
    p_shared_owners = (unint64_t *)&locale->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
      std::__shared_weak_count::__release_weak(locale);
    }
  }
  std::locale::~locale(v2);
  a1->__locale_ = (std::locale::__imp *)&unk_24C9B3E48;
  v6 = a1[1].__locale_;
  if (v6)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v6 + 8))(v6);
  JUMPOUT(0x212BC6398);
}

void sub_20E99B630(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char v9;
  char *v10;
  unint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  void *__p;
  char *v19;
  uint64_t v20;
  __int128 v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  char v27;
  char v28;
  uint64_t v29;

  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0uLL;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  __p = 0;
  v19 = 0;
  v4 = (*(_DWORD *)(a1 + 44) + 1);
  v6 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v20 = 0;
  *(_QWORD *)&v21 = v5;
  *((_QWORD *)&v21 + 1) = v5;
  v22 = 0;
  sub_20E99BC2C((uint64_t)&__p, v4, &v21);
  v23 = v6;
  v24 = v6;
  v25 = 0;
  v26 = v21;
  v27 = v22;
  v29 = v6;
  v28 = 1;
  v7 = *(_QWORD *)(a2 + 16);
  if (*(_BYTE *)(a2 + 92))
    v8 = v7 == *(_QWORD *)(a2 + 8);
  else
    v8 = 0;
  v9 = v8;
  if (*(unsigned __int8 *)(a1 + 84) == sub_20E99B7B8(a1 + 16, v7, *(_QWORD *)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v9))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    v10 = (char *)__p;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 8);
  v10 = (char *)__p;
  v11 = 0xAAAAAAAAAAAAAAABLL * ((v19 - (_BYTE *)__p) >> 3);
  if (v11 < 2)
  {
LABEL_13:
    if (!v10)
      return;
    goto LABEL_14;
  }
  v12 = 0;
  v13 = *(_DWORD *)(a1 + 80);
  v14 = *(_QWORD *)(a2 + 32);
  v15 = 1;
  do
  {
    v16 = &v10[24 * v15];
    v17 = v14 + 24 * (v13 + v12);
    *(_OWORD *)v17 = *(_OWORD *)v16;
    *(_BYTE *)(v17 + 16) = v16[16];
    v15 = (v12 + 2);
    ++v12;
  }
  while (v11 > v15);
LABEL_14:
  v19 = v10;
  operator delete(v10);
}

void sub_20E99B798(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E99B7B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void *v25;
  void *v26;
  char *v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  void *v32;
  void *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _BYTE *v39;
  unsigned int v40;
  uint64_t v41;
  char v42;
  _BYTE v44[56];
  void *__p[2];
  _QWORD v46[3];
  __int128 v47;
  char v48;
  char *v49;
  char *v50;
  unint64_t v51;

  v49 = 0;
  v50 = 0;
  v51 = 0;
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    *(_QWORD *)&v47 = a3;
    *((_QWORD *)&v47 + 1) = a3;
    v48 = 0;
    *(_DWORD *)v44 = 0;
    memset(&v44[8], 0, 48);
    *(_OWORD *)__p = 0u;
    memset(v46, 0, 21);
    v50 = sub_20E99BF1C((void **)&v49, (uint64_t)v44);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(_QWORD *)&v44[32])
    {
      *(_QWORD *)&v44[40] = *(_QWORD *)&v44[32];
      operator delete(*(void **)&v44[32]);
    }
    v13 = v50;
    *((_DWORD *)v50 - 24) = 0;
    *((_QWORD *)v13 - 11) = a2;
    *((_QWORD *)v13 - 10) = a2;
    *((_QWORD *)v13 - 9) = a3;
    v14 = *((_QWORD *)v13 - 8);
    v15 = *(unsigned int *)(a1 + 28);
    v16 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v13 - 7) - v14) >> 3);
    if (v15 <= v16)
    {
      if (v15 < v16)
        *((_QWORD *)v13 - 7) = v14 + 24 * v15;
    }
    else
    {
      sub_20E99C0EC((void **)v13 - 8, v15 - v16, &v47);
      v13 = v50;
    }
    v17 = *((_QWORD *)v13 - 5);
    v18 = *(unsigned int *)(a1 + 32);
    v19 = (*((_QWORD *)v13 - 4) - v17) >> 4;
    if (v18 <= v19)
    {
      if (v18 < v19)
        *((_QWORD *)v13 - 4) = v17 + 16 * v18;
    }
    else
    {
      sub_20E99C28C((char **)v13 - 5, v18 - v19);
      v13 = v50;
    }
    *((_QWORD *)v13 - 2) = v6;
    *((_DWORD *)v13 - 2) = a5;
    *(v13 - 4) = a6;
    v20 = 1;
    while (2)
    {
      if ((v20 & 0xFFF) == 0 && (int)(v20 >> 12) >= (int)a3 - (int)a2)
        sub_20E99BE04();
      v22 = *((_QWORD *)v13 - 2);
      if (v22)
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v22 + 16))(v22, v13 - 96);
      switch(*((_DWORD *)v13 - 24))
      {
        case 0xFFFFFC18:
          v23 = *((_QWORD *)v13 - 10);
          if ((a5 & 0x20) != 0 && v23 == a2 || (a5 & 0x1000) != 0 && v23 != a3)
            goto LABEL_26;
          v35 = *a4;
          *(_QWORD *)v35 = a2;
          *(_QWORD *)(v35 + 8) = v23;
          *(_BYTE *)(v35 + 16) = 1;
          v36 = *((_QWORD *)v13 - 8);
          v37 = *((_QWORD *)v13 - 7) - v36;
          if (v37)
          {
            v38 = 0xAAAAAAAAAAAAAAABLL * (v37 >> 3);
            v39 = (_BYTE *)(v36 + 16);
            v40 = 1;
            do
            {
              v41 = v35 + 24 * v40;
              *(_OWORD *)v41 = *((_OWORD *)v39 - 1);
              v42 = *v39;
              v39 += 24;
              *(_BYTE *)(v41 + 16) = v42;
            }
            while (v38 > v40++);
          }
          v6 = 1;
          v21 = v49;
          if (!v49)
            return v6;
          goto LABEL_37;
        case 0xFFFFFC1D:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_16;
        case 0xFFFFFC1F:
LABEL_26:
          v24 = v50;
          v25 = (void *)*((_QWORD *)v50 - 5);
          if (v25)
          {
            *((_QWORD *)v50 - 4) = v25;
            operator delete(v25);
          }
          v26 = (void *)*((_QWORD *)v24 - 8);
          if (v26)
          {
            *((_QWORD *)v24 - 7) = v26;
            operator delete(v26);
          }
          v50 = v24 - 96;
          goto LABEL_16;
        case 0xFFFFFC20:
          sub_20E99C3B4((uint64_t)v44, (__int128 *)v13 - 6);
          (*(void (**)(_QWORD, uint64_t, char *))(**((_QWORD **)v13 - 2) + 24))(*((_QWORD *)v13 - 2), 1, v13 - 96);
          (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v46[1] + 24))(v46[1], 0, v44);
          v27 = v50;
          if ((unint64_t)v50 >= v51)
          {
            v50 = sub_20E99BF1C((void **)&v49, (uint64_t)v44);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          else
          {
            v28 = *(_OWORD *)&v44[16];
            *(_OWORD *)v50 = *(_OWORD *)v44;
            *((_OWORD *)v27 + 1) = v28;
            *((_QWORD *)v27 + 4) = 0;
            *((_QWORD *)v27 + 5) = 0;
            *((_QWORD *)v27 + 6) = 0;
            *((_QWORD *)v27 + 7) = 0;
            *((_OWORD *)v27 + 2) = *(_OWORD *)&v44[32];
            *((_QWORD *)v27 + 6) = *(_QWORD *)&v44[48];
            memset(&v44[32], 0, 24);
            *((_QWORD *)v27 + 8) = 0;
            *((_QWORD *)v27 + 9) = 0;
            *(_OWORD *)(v27 + 56) = *(_OWORD *)__p;
            *((_QWORD *)v27 + 9) = v46[0];
            __p[0] = 0;
            __p[1] = 0;
            v46[0] = 0;
            v29 = v46[1];
            *(_QWORD *)(v27 + 85) = *(_QWORD *)((char *)&v46[1] + 5);
            *((_QWORD *)v27 + 10) = v29;
            v50 = v27 + 96;
          }
          if (*(_QWORD *)&v44[32])
          {
            *(_QWORD *)&v44[40] = *(_QWORD *)&v44[32];
            operator delete(*(void **)&v44[32]);
          }
LABEL_16:
          v21 = v49;
          v13 = v50;
          ++v20;
          if (v49 != v50)
            continue;
          v6 = 0;
          if (v49)
          {
LABEL_37:
            v30 = v50;
            v31 = v21;
            if (v50 != v21)
            {
              do
              {
                v32 = (void *)*((_QWORD *)v30 - 5);
                if (v32)
                {
                  *((_QWORD *)v30 - 4) = v32;
                  operator delete(v32);
                }
                v33 = (void *)*((_QWORD *)v30 - 8);
                if (v33)
                {
                  *((_QWORD *)v30 - 7) = v33;
                  operator delete(v33);
                }
                v30 -= 96;
              }
              while (v30 != v21);
              v31 = v49;
            }
            v50 = v21;
            operator delete(v31);
          }
          break;
        default:
          sub_20E99BE50();
      }
      break;
    }
  }
  return v6;
}

void sub_20E99BBA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E99BE9C((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_20E99BBBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  sub_20E99BDC4((uint64_t *)va);
  sub_20E99BE9C((void **)(v4 - 112));
  _Unwind_Resume(a1);
}

void sub_20E99BC04(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E99BE9C((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_20E99BC18(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E99BE9C((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

_QWORD *sub_20E99BC2C(uint64_t a1, unint64_t a2, __int128 *a3)
{
  uint64_t v6;
  _QWORD *result;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;

  v6 = *(_QWORD *)(a1 + 16);
  result = *(_QWORD **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - (uint64_t)result) >> 3) < a2)
  {
    if (result)
    {
      *(_QWORD *)(a1 + 8) = result;
      operator delete(result);
      v6 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (a2 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_26;
    v8 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= a2)
      v9 = a2;
    v10 = v8 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v9;
    if (v10 > 0xAAAAAAAAAAAAAAALL)
LABEL_26:
      sub_20E867F44();
    v11 = 3 * v10;
    result = operator new(24 * v10);
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 8) = result;
    *(_QWORD *)(a1 + 16) = &result[v11];
    v12 = 24 * a2;
    v13 = &result[3 * a2];
    do
    {
      *(_OWORD *)result = *a3;
      result[2] = *((_QWORD *)a3 + 2);
      result += 3;
      v12 -= 24;
    }
    while (v12);
    goto LABEL_25;
  }
  v14 = *(_QWORD *)(a1 + 8);
  v15 = (v14 - (uint64_t)result) / 24;
  if (v15 >= a2)
    v16 = a2;
  else
    v16 = (v14 - (uint64_t)result) / 24;
  if (v16)
  {
    v17 = result;
    do
    {
      *(_OWORD *)v17 = *a3;
      *((_BYTE *)v17 + 16) = *((_BYTE *)a3 + 16);
      v17 += 3;
      --v16;
    }
    while (v16);
  }
  if (a2 <= v15)
  {
    v13 = &result[3 * a2];
LABEL_25:
    *(_QWORD *)(a1 + 8) = v13;
    return result;
  }
  v18 = v14 + 24 * (a2 - v15);
  v19 = 24 * a2 - 24 * v15;
  do
  {
    v20 = *a3;
    *(_QWORD *)(v14 + 16) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v14 = v20;
    v14 += 24;
    v19 -= 24;
  }
  while (v19);
  *(_QWORD *)(a1 + 8) = v18;
  return result;
}

_QWORD *sub_20E99BDC4(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_20E99BE04()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x212BC5A14](exception, 12);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_20E99BE3C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20E99BE50()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x212BC5A14](exception, 16);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_20E99BE88(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void **sub_20E99BE9C(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 5);
        if (v5)
        {
          *((_QWORD *)v3 - 4) = v5;
          operator delete(v5);
        }
        v6 = (void *)*((_QWORD *)v3 - 8);
        if (v6)
        {
          *((_QWORD *)v3 - 7) = v6;
          operator delete(v6);
        }
        v3 -= 96;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

char *sub_20E99BF1C(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  __int128 v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  char *v21;
  void *v22;
  void *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 5);
  v4 = v3 + 1;
  if (v3 + 1 > 0x2AAAAAAAAAAAAAALL)
    sub_20E867F44();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) >= 0x155555555555555)
    v6 = 0x2AAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL)
      sub_20E877A38();
    v7 = (char *)operator new(96 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = *(_OWORD *)(a2 + 16);
  v9 = &v7[96 * v3];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v8;
  v10 = &v7[96 * v6];
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v9 + 6) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(v9 + 85) = *(_QWORD *)(a2 + 85);
  v11 = *(_QWORD *)(a2 + 72);
  v12 = *(_QWORD *)(a2 + 80);
  *((_QWORD *)v9 + 9) = 0;
  *((_QWORD *)v9 + 10) = v12;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(a2 + 56);
  *((_QWORD *)v9 + 9) = v11;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v13 = v9 + 96;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v9;
    a1[1] = v13;
    a1[2] = v10;
  }
  else
  {
    v16 = 0;
    do
    {
      v17 = &v9[v16];
      v18 = &v15[v16];
      v19 = *(_OWORD *)&v15[v16 - 80];
      *((_OWORD *)v17 - 6) = *(_OWORD *)&v15[v16 - 96];
      *((_OWORD *)v17 - 5) = v19;
      *((_QWORD *)v17 - 7) = 0;
      *((_QWORD *)v17 - 6) = 0;
      *((_OWORD *)v17 - 4) = *(_OWORD *)&v15[v16 - 64];
      *((_QWORD *)v17 - 6) = *(_QWORD *)&v15[v16 - 48];
      *((_QWORD *)v18 - 8) = 0;
      *((_QWORD *)v18 - 7) = 0;
      *((_QWORD *)v18 - 6) = 0;
      *((_QWORD *)v17 - 4) = 0;
      *((_QWORD *)v17 - 3) = 0;
      *(_OWORD *)(v17 - 40) = *(_OWORD *)&v15[v16 - 40];
      *((_QWORD *)v17 - 3) = *(_QWORD *)&v15[v16 - 24];
      *((_QWORD *)v18 - 5) = 0;
      *((_QWORD *)v18 - 4) = 0;
      *((_QWORD *)v18 - 3) = 0;
      v20 = *(_QWORD *)&v15[v16 - 16];
      *(_QWORD *)(v17 - 11) = *(_QWORD *)&v15[v16 - 11];
      *((_QWORD *)v17 - 2) = v20;
      v16 -= 96;
    }
    while (&v15[v16] != v14);
    v15 = (char *)*a1;
    v21 = (char *)a1[1];
    *a1 = &v9[v16];
    a1[1] = v13;
    a1[2] = v10;
    while (v21 != v15)
    {
      v22 = (void *)*((_QWORD *)v21 - 5);
      if (v22)
      {
        *((_QWORD *)v21 - 4) = v22;
        operator delete(v22);
      }
      v23 = (void *)*((_QWORD *)v21 - 8);
      if (v23)
      {
        *((_QWORD *)v21 - 7) = v23;
        operator delete(v23);
      }
      v21 -= 96;
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

void sub_20E99C0EC(void **a1, unint64_t a2, __int128 *a3)
{
  _BYTE *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  __int128 v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  char *v21;
  __int128 v22;

  v7 = (char *)a1[1];
  v6 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = &v7[24 * a2];
      v14 = 24 * a2;
      do
      {
        v15 = *a3;
        *((_QWORD *)v7 + 2) = *((_QWORD *)a3 + 2);
        *(_OWORD *)v7 = v15;
        v7 += 24;
        v14 -= 24;
      }
      while (v14);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (_BYTE *)*a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_20E867F44();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v6 - (_BYTE *)*a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 > 0xAAAAAAAAAAAAAAALL)
        sub_20E877A38();
      v12 = (char *)operator new(24 * v11);
    }
    else
    {
      v12 = 0;
    }
    v16 = &v12[24 * v8];
    v17 = 24 * a2;
    v18 = &v16[24 * a2];
    v19 = v16;
    do
    {
      v20 = *a3;
      *((_QWORD *)v19 + 2) = *((_QWORD *)a3 + 2);
      *(_OWORD *)v19 = v20;
      v19 += 24;
      v17 -= 24;
    }
    while (v17);
    v21 = (char *)*a1;
    if (v7 != *a1)
    {
      do
      {
        v22 = *(_OWORD *)(v7 - 24);
        *((_QWORD *)v16 - 1) = *((_QWORD *)v7 - 1);
        *(_OWORD *)(v16 - 24) = v22;
        v16 -= 24;
        v7 -= 24;
      }
      while (v7 != v21);
      v7 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v18;
    a1[2] = &v12[24 * v11];
    if (v7)
      operator delete(v7);
  }
}

void sub_20E99C28C(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  char *v15;
  char *v16;

  v5 = a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - v5) >> 4)
  {
    if (a2)
    {
      v12 = 16 * a2;
      bzero(a1[1], 16 * a2);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = (v5 - *a1) >> 4;
    v8 = v7 + a2;
    if ((v7 + a2) >> 60)
      sub_20E867F44();
    v9 = v4 - v6;
    if (v9 >> 3 > v8)
      v8 = v9 >> 3;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v10 = 0xFFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 60)
        sub_20E877A38();
      v11 = (char *)operator new(16 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[16 * v7];
    v14 = 16 * a2;
    v15 = &v11[16 * v10];
    bzero(v13, v14);
    v16 = &v13[v14];
    if (v5 != v6)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v5 - 1);
        v13 -= 16;
        v5 -= 16;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v15;
    if (v5)
      operator delete(v5);
  }
}

uint64_t sub_20E99C3B4(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  char *v9;
  size_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  BOOL v25;
  BOOL v26;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  double *v31;
  const double *v32;
  uint64_t v33;
  const double *v34;
  double *v35;
  float64x2x2_t v36;
  float64x2x2_t v37;

  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v7 = (_BYTE *)*((_QWORD *)a2 + 4);
  v6 = (_BYTE *)*((_QWORD *)a2 + 5);
  v8 = v6 - v7;
  if (v6 != v7)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v8 >> 3) >= 0xAAAAAAAAAAAAAABLL)
      sub_20E867F44();
    v9 = (char *)operator new(v8);
    *(_QWORD *)(a1 + 32) = v9;
    *(_QWORD *)(a1 + 40) = v9;
    *(_QWORD *)(a1 + 48) = &v9[8 * (v8 >> 3)];
    v10 = 24 * ((v8 - 24) / 0x18uLL) + 24;
    memcpy(v9, v7, v10);
    *(_QWORD *)(a1 + 40) = &v9[v10];
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v12 = (char *)*((_QWORD *)a2 + 7);
  v11 = (char *)*((_QWORD *)a2 + 8);
  v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0)
      sub_20E867F44();
    v14 = (char *)operator new(v11 - v12);
    *(_QWORD *)(a1 + 56) = v14;
    *(_QWORD *)(a1 + 64) = v14;
    *(_QWORD *)(a1 + 72) = &v14[16 * (v13 >> 4)];
    v15 = v13 - 16;
    if ((unint64_t)(v13 - 16) < 0xF0)
      goto LABEL_31;
    v21 = v15 & 0xFFFFFFFFFFFFFFF0 | 8;
    v22 = &v14[v21];
    v23 = &v12[v21];
    v24 = (v15 & 0xFFFFFFFFFFFFFFF0) + 16;
    v25 = v14 + 8 >= &v12[v24] || v12 + 8 >= &v14[v24];
    v26 = !v25;
    if (v12 < v22 && v14 < v23)
      goto LABEL_31;
    if (v26)
      goto LABEL_31;
    v28 = (v15 >> 4) + 1;
    v29 = 16 * (v28 & 0x1FFFFFFFFFFFFFFCLL);
    v30 = &v12[v29];
    v18 = &v14[v29];
    v31 = (double *)(v14 + 32);
    v32 = (const double *)(v12 + 32);
    v33 = v28 & 0x1FFFFFFFFFFFFFFCLL;
    do
    {
      v34 = v32 - 4;
      v36 = vld2q_f64(v34);
      v37 = vld2q_f64(v32);
      v35 = v31 - 4;
      vst2q_f64(v35, v36);
      vst2q_f64(v31, v37);
      v31 += 8;
      v32 += 8;
      v33 -= 4;
    }
    while (v33);
    v12 = v30;
    v14 = v18;
    if (v28 != (v28 & 0x1FFFFFFFFFFFFFFCLL))
    {
LABEL_31:
      do
      {
        v16 = *(_QWORD *)v12;
        v17 = *((_QWORD *)v12 + 1);
        v12 += 16;
        *(_QWORD *)v14 = v16;
        *((_QWORD *)v14 + 1) = v17;
        v14 += 16;
      }
      while (v12 != v11);
      v18 = v14;
    }
    *(_QWORD *)(a1 + 64) = v18;
  }
  v19 = *((_QWORD *)a2 + 10);
  *(_QWORD *)(a1 + 85) = *(_QWORD *)((char *)a2 + 85);
  *(_QWORD *)(a1 + 80) = v19;
  return a1;
}

void sub_20E99C5A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 64) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 40) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *sub_20E99C5D4(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v5;
  int v7;
  uint64_t v8;
  unsigned __int8 *v10;
  int v11;
  unsigned __int8 *v12;

  if (a2 == a3 || *a2 != 92)
    return a2;
  v5 = a2 + 1;
  if (a2 + 1 == a3)
    sub_20E99CA10();
  v7 = *v5;
  v8 = (v7 - 48);
  if (v7 == 48)
  {
    sub_20E99D188(a1, v8);
    return a2 + 2;
  }
  if ((v7 - 49) > 8)
    goto LABEL_18;
  v10 = a2 + 2;
  if (a2 + 2 == a3)
  {
    v10 = a3;
  }
  else
  {
    while (1)
    {
      v11 = *v10;
      if ((v11 - 48) > 9)
        break;
      if (v8 >= 0x19999999)
        goto LABEL_23;
      ++v10;
      LODWORD(v8) = v11 + 10 * v8 - 48;
      if (v10 == a3)
      {
        v10 = a3;
        break;
      }
    }
    if (!(_DWORD)v8)
LABEL_23:
      sub_20E99D30C();
  }
  if (v8 > *(_DWORD *)(a1 + 28))
    goto LABEL_23;
  sub_20E99D358(a1, v8);
  if (v10 == v5)
  {
LABEL_18:
    v10 = sub_20E99CA5C(a1, a2 + 1, a3);
    if (v10 == v5)
    {
      v12 = sub_20E99CCC4(a1, a2 + 1, a3, 0);
      if (v12 == v5)
        return a2;
      else
        return v12;
    }
  }
  return v10;
}

char *sub_20E99C74C(uint64_t a1, char *a2, char *a3)
{
  int v5;
  char v6;
  char *v7;
  uint64_t *v8;
  char *v9;

  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3)
      goto LABEL_20;
    v5 = a2[1];
    v6 = v5 == 94;
    v7 = v5 == 94 ? a2 + 2 : a2 + 1;
    v8 = (uint64_t *)operator new();
    sub_20E99E064((uint64_t)v8, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), v6, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v8;
    *(_QWORD *)(a1 + 56) = v8;
    if (v7 == a3)
      goto LABEL_20;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *v7 == 93)
    {
      sub_20E99DBEC((uint64_t)v8, 93);
      ++v7;
    }
    if (v7 == a3)
      goto LABEL_20;
    do
    {
      v9 = v7;
      v7 = sub_20E99F298(a1, v7, a3, v8);
    }
    while (v7 != v9);
    if (v9 == a3)
      goto LABEL_20;
    if (*v9 == 45)
    {
      sub_20E99DBEC((uint64_t)v8, 45);
      ++v9;
    }
    if (v9 == a3 || *v9 != 93)
LABEL_20:
      sub_20E99F24C();
    return v9 + 1;
  }
  return a2;
}

void sub_20E99C898(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10F1C4061CF1F02);
  _Unwind_Resume(a1);
}

void sub_20E99C8BC()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x212BC5A14](exception, 11);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_20E99C8F4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_BYTE *sub_20E99C908(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  _BYTE *result;

  if (a2 == a3)
    return a2;
  switch(*a2)
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '{':
    case '|':
    case '}':
      return a2;
    default:
      sub_20E99D188(a1, (char)*a2);
      result = a2 + 1;
      break;
  }
  return result;
}

_QWORD *sub_20E99C978(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24C9B3E48;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20E99C9BC(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_24C9B3E48;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20E99CA10()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x212BC5A14](exception, 3);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_20E99CA48(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_BYTE *sub_20E99CA5C(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  _BYTE *v3;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v3 = a2;
  if (a2 != a3)
  {
    switch(*a2)
    {
      case 'D':
        v5 = operator new();
        sub_20E99E064(v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_7;
      case 'S':
        v5 = operator new();
        sub_20E99E064(v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_11;
      case 'W':
        v6 = operator new();
        sub_20E99E064(v6, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_9;
      case 'd':
        v5 = operator new();
        sub_20E99E064(v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_7:
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v5;
        *(_QWORD *)(a1 + 56) = v5;
        v7 = *(_DWORD *)(v5 + 160) | 0x400;
        goto LABEL_12;
      case 's':
        v5 = operator new();
        sub_20E99E064(v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_11:
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v5;
        *(_QWORD *)(a1 + 56) = v5;
        v7 = *(_DWORD *)(v5 + 160) | 0x4000;
LABEL_12:
        *(_DWORD *)(v5 + 160) = v7;
        goto LABEL_13;
      case 'w':
        v6 = operator new();
        sub_20E99E064(v6, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_9:
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v6;
        *(_QWORD *)(a1 + 56) = v6;
        *(_DWORD *)(v6 + 160) |= 0x500u;
        sub_20E99DBEC(v6, 95);
LABEL_13:
        ++v3;
        break;
      default:
        return v3;
    }
  }
  return v3;
}

void sub_20E99CC8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10F1C4061CF1F02);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_20E99CCC4(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t *a4)
{
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *result;
  uint64_t v8;
  int v9;
  int v10;
  unsigned __int8 v11;
  char v12;
  unsigned __int8 v13;
  char v14;
  char v15;

  v4 = a2;
  if (a2 == a3)
    return v4;
  v5 = *a2;
  v6 = (char)v5;
  switch((char)v5)
  {
    case '0':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 0;
        return v4 + 1;
      }
      else
      {
        sub_20E99D188(a1, 0);
        return v4 + 1;
      }
    case 'c':
      if (v4 + 1 == a3 || ((v4[1] & 0xDF) - 65) > 0x19u)
        goto LABEL_81;
      v8 = v4[1] & 0x1F;
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_BYTE *)a4 = v8;
        *((_BYTE *)a4 + 1) = 0;
        return v4 + 2;
      }
      else
      {
        sub_20E99D188(a1, v8);
        return v4 + 2;
      }
    case 'f':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 12;
        return v4 + 1;
      }
      else
      {
        sub_20E99D188(a1, 12);
        return v4 + 1;
      }
    case 'n':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 10;
        return v4 + 1;
      }
      else
      {
        sub_20E99D188(a1, 10);
        return v4 + 1;
      }
    case 'r':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 13;
        return v4 + 1;
      }
      else
      {
        sub_20E99D188(a1, 13);
        return v4 + 1;
      }
    case 't':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 9;
        return v4 + 1;
      }
      else
      {
        sub_20E99D188(a1, 9);
        return v4 + 1;
      }
    case 'u':
      if (v4 + 1 != a3)
      {
        v9 = v4[1];
        if ((v9 & 0xF8) == 0x30 || (v9 & 0xFE) == 0x38 || (v9 | 0x20u) - 97 < 6)
        {
          v4 += 2;
          if (v4 != a3)
          {
            v10 = *v4;
            if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38 || (v10 | 0x20u) - 97 < 6)
              goto LABEL_38;
          }
        }
      }
      goto LABEL_81;
    case 'v':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 11;
        return v4 + 1;
      }
      else
      {
        v6 = 11;
LABEL_65:
        sub_20E99D188(a1, v6);
        return v4 + 1;
      }
    case 'x':
LABEL_38:
      if (v4 + 1 == a3)
        goto LABEL_81;
      v11 = v4[1];
      v12 = -48;
      if ((v11 & 0xF8) == 0x30 || (v11 & 0xFE) == 0x38)
        goto LABEL_43;
      v11 |= 0x20u;
      if ((v11 - 97) >= 6u)
        goto LABEL_81;
      v12 = -87;
LABEL_43:
      if (v4 + 2 == a3)
        goto LABEL_81;
      v13 = v4[2];
      v14 = -48;
      if ((v13 & 0xF8) != 0x30 && (v13 & 0xFE) != 0x38)
      {
        v13 |= 0x20u;
        if ((v13 - 97) >= 6u)
LABEL_81:
          sub_20E99CA10();
        v14 = -87;
      }
      v15 = v13 + 16 * (v11 + v12) + v14;
      if (!a4)
      {
        sub_20E99D188(a1, v15);
        v4 += 3;
        return v4;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      *(_BYTE *)a4 = v15;
      *((_BYTE *)a4 + 1) = 0;
      result = v4 + 3;
      break;
    default:
      if ((_DWORD)v6 == 95
        || (v6 & 0x80000000) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16) + 4 * v5) & 0x500) != 0)
      {
        goto LABEL_81;
      }
      if (!a4)
        goto LABEL_65;
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      *(_WORD *)a4 = v5;
      return v4 + 1;
  }
  return result;
}

uint64_t sub_20E99D188(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_DWORD *)(a1 + 24);
  if ((v4 & 1) != 0)
  {
    v8 = operator new();
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    *(_QWORD *)v8 = &unk_24C9B3FE0;
    *(_QWORD *)(v8 + 8) = v9;
    std::locale::locale((std::locale *)(v8 + 16), (const std::locale *)a1);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)(a1 + 8);
    result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), a2);
    *(_BYTE *)(v8 + 40) = result;
LABEL_6:
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v8;
    goto LABEL_7;
  }
  if ((v4 & 8) != 0)
  {
    v8 = operator new();
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    *(_QWORD *)v8 = &unk_24C9B4028;
    *(_QWORD *)(v8 + 8) = v10;
    result = (uint64_t)std::locale::locale((std::locale *)(v8 + 16), (const std::locale *)a1);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)(a1 + 8);
    *(_BYTE *)(v8 + 40) = a2;
    goto LABEL_6;
  }
  result = operator new();
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(v6 + 8);
  *(_QWORD *)result = &unk_24C9B4070;
  *(_QWORD *)(result + 8) = v7;
  *(_BYTE *)(result + 16) = a2;
  *(_QWORD *)(v6 + 8) = result;
LABEL_7:
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  return result;
}

void sub_20E99D2BC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::locale *v2;
  uint64_t v4;

  std::locale::~locale(v2);
  *v1 = &unk_24C9B3E48;
  v4 = v1[1];
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  MEMORY[0x212BC6398](v1, 0x10E1C4010F5D982);
  _Unwind_Resume(a1);
}

void sub_20E99D30C()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x212BC5A14](exception, 4);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_20E99D344(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20E99D358(uint64_t a1, int a2)
{
  int v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  std::locale *v8;
  std::locale *v9;
  std::locale::__imp *v10;
  char *v11;

  v4 = *(_DWORD *)(a1 + 24);
  if ((v4 & 1) != 0)
  {
    v8 = (std::locale *)operator new();
    v9 = v8;
    v10 = *(std::locale::__imp **)(*(_QWORD *)(a1 + 56) + 8);
    v11 = (char *)&unk_24C9B40A8;
LABEL_6:
    v8->__locale_ = (std::locale::__imp *)(v11 + 16);
    v8[1].__locale_ = v10;
    result = (uint64_t)std::locale::locale(v8 + 2, (const std::locale *)a1);
    *(_OWORD *)&v9[3].__locale_ = *(_OWORD *)(a1 + 8);
    LODWORD(v9[5].__locale_) = a2;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v9;
    goto LABEL_7;
  }
  if ((v4 & 8) != 0)
  {
    v8 = (std::locale *)operator new();
    v9 = v8;
    v10 = *(std::locale::__imp **)(*(_QWORD *)(a1 + 56) + 8);
    v11 = (char *)&unk_24C9B40F0;
    goto LABEL_6;
  }
  result = operator new();
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(v6 + 8);
  *(_QWORD *)result = &unk_24C9B4148;
  *(_QWORD *)(result + 8) = v7;
  *(_DWORD *)(result + 16) = a2;
  *(_QWORD *)(v6 + 8) = result;
LABEL_7:
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  return result;
}

std::locale *sub_20E99D454(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24C9B3FE0;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_24C9B3E48;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void sub_20E99D4AC(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24C9B3FE0;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_24C9B3E48;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E99D514(uint64_t result, uint64_t a2)
{
  char *v3;
  uint64_t v4;

  v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (v4 = result,
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(result + 24) + 40))(*(_QWORD *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(v4 + 8);
  }
  return result;
}

std::locale *sub_20E99D598(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24C9B4028;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_24C9B3E48;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void sub_20E99D5F0(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24C9B4028;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_24C9B3E48;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E99D658(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  return result;
}

_QWORD *sub_20E99D6A0(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24C9B3E48;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20E99D6E4(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_24C9B3E48;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E99D738(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  return result;
}

std::locale *sub_20E99D780(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24C9B40B8;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_24C9B3E48;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void sub_20E99D7D8(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24C9B40B8;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_24C9B3E48;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E99D840(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v3 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (!*(_BYTE *)(v3 + 16)
    || (v4 = *(_QWORD *)(v3 + 8) - *(_QWORD *)v3, v5 = *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24) - v5 < v4))
  {
LABEL_3:
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    return result;
  }
  v6 = result;
  if (v4 >= 1)
  {
    v7 = 0;
    while (1)
    {
      v8 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v6 + 24) + 40))(*(_QWORD *)(v6 + 24), *(char *)(*(_QWORD *)v3 + v7));
      result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v6 + 24) + 40))(*(_QWORD *)(v6 + 24), *(char *)(*(_QWORD *)(a2 + 16) + v7));
      if (v8 != (_DWORD)result)
        goto LABEL_3;
      if (v4 == ++v7)
      {
        v5 = *(_QWORD *)(a2 + 16);
        break;
      }
    }
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 16) = v5 + v4;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(v6 + 8);
  return result;
}

std::locale *sub_20E99D938(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24C9B4100;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_24C9B3E48;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void sub_20E99D990(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24C9B4100;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_24C9B3E48;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E99D9F8(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  int v12;

  v2 = *(_DWORD *)(result + 40) - 1;
  v3 = *(_QWORD *)(a2 + 32);
  if (!*(_BYTE *)(v3 + 24 * v2 + 16)
    || (v4 = (unsigned __int8 **)(v3 + 24 * v2),
        v5 = *v4,
        v6 = v4[1] - *v4,
        v7 = *(_QWORD *)(a2 + 16),
        *(_QWORD *)(a2 + 24) - v7 < v6))
  {
LABEL_3:
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    return result;
  }
  if (v6 >= 1)
  {
    v8 = v6;
    v9 = *(unsigned __int8 **)(a2 + 16);
    do
    {
      v11 = *v5++;
      v10 = v11;
      v12 = *v9++;
      if (v10 != v12)
        goto LABEL_3;
    }
    while (--v8);
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 16) = v7 + v6;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *sub_20E99DA88(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24C9B3E48;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20E99DACC(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_24C9B3E48;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x212BC6398);
}

unsigned int *sub_20E99DB20(unsigned int *result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v5;
  unsigned int *v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;

  v2 = result[4];
  v3 = *(_QWORD *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 40) - v3) >> 3) < v2)
    sub_20E99D30C();
  v5 = v2 - 1;
  if (*(_BYTE *)(v3 + 24 * v5 + 16)
    && (v6 = result,
        v7 = v3 + 24 * v5,
        result = *(unsigned int **)v7,
        v8 = *(_QWORD *)(v7 + 8) - *(_QWORD *)v7,
        v9 = *(_QWORD *)(a2 + 16),
        *(_QWORD *)(a2 + 24) - v9 >= v8)
    && (result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !(_DWORD)result))
  {
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 16) = v9 + v8;
    *(_QWORD *)(a2 + 80) = *((_QWORD *)v6 + 1);
  }
  else
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  return result;
}

void sub_20E99DBEC(uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  _BYTE *v5;
  _QWORD *v6;
  _BYTE *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  unint64_t v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  unint64_t v28;
  unint64_t v29;
  __int128 *v30;
  _OWORD *v31;
  unint64_t v32;
  __int128 v33;
  char *v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  __int128 *v38;
  _OWORD *v39;
  unint64_t v40;
  __int128 v41;
  char *v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  __int128 *v46;
  _OWORD *v47;
  unint64_t v48;
  __int128 v49;
  char *v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  char v55;
  char *v56;
  char v57;
  char *v58;
  char v59;

  v2 = a2;
  if (!*(_BYTE *)(a1 + 169))
  {
    v6 = (_QWORD *)(a1 + 40);
    v5 = *(_BYTE **)(a1 + 48);
    v16 = *(_QWORD *)(a1 + 56);
    if (*(_BYTE *)(a1 + 170))
    {
      if ((unint64_t)v5 < v16)
        goto LABEL_24;
      v17 = (_BYTE *)*v6;
      v18 = (unint64_t)&v5[-*v6];
      v19 = v18 + 1;
      if ((uint64_t)(v18 + 1) >= 0)
      {
        v20 = v16 - (_QWORD)v17;
        if (2 * v20 > v19)
          v19 = 2 * v20;
        if (v20 >= 0x3FFFFFFFFFFFFFFFLL)
          v21 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (v21)
        {
          v12 = operator new(v21);
          v13 = &v12[v18];
          v14 = &v12[v21];
          v12[v18] = v2;
          v15 = (uint64_t)&v12[v18 + 1];
          if (v5 == v17)
            goto LABEL_49;
        }
        else
        {
          v12 = 0;
          v13 = &v5[-*v6];
          v14 = 0;
          *(_BYTE *)v18 = a2;
          v15 = v18 + 1;
          if (v5 == v17)
            goto LABEL_49;
        }
        if (v18 >= 8 && (unint64_t)(v17 - v12) >= 0x20)
        {
          if (v18 >= 0x20)
          {
            v28 = v18 & 0xFFFFFFFFFFFFFFE0;
            v38 = (__int128 *)(v5 - 16);
            v39 = &v12[v5 - 16 - v17];
            v40 = v18 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v41 = *v38;
              *(v39 - 1) = *(v38 - 1);
              *v39 = v41;
              v39 -= 2;
              v38 -= 2;
              v40 -= 32;
            }
            while (v40);
            if (v18 == v28)
              goto LABEL_86;
            if ((v18 & 0x18) == 0)
            {
              v13 -= v28;
              v5 -= v28;
              goto LABEL_80;
            }
          }
          else
          {
            v28 = 0;
          }
          v13 -= v18 & 0xFFFFFFFFFFFFFFF8;
          v42 = &v5[-v28 - 8];
          v43 = &v12[v42 - v17];
          v44 = v28 - (v18 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v45 = *(_QWORD *)v42;
            v42 -= 8;
            *v43-- = v45;
            v44 += 8;
          }
          while (v44);
          v5 -= v18 & 0xFFFFFFFFFFFFFFF8;
          if (v18 == (v18 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_86;
        }
LABEL_80:
        v56 = v13 - 1;
        do
        {
          v57 = *--v5;
          *v56-- = v57;
        }
        while (v5 != v17);
        goto LABEL_86;
      }
LABEL_89:
      sub_20E867F44();
    }
    if ((unint64_t)v5 < v16)
      goto LABEL_24;
    v23 = (_BYTE *)*v6;
    v24 = (unint64_t)&v5[-*v6];
    v25 = v24 + 1;
    if ((uint64_t)(v24 + 1) < 0)
      goto LABEL_89;
    v26 = v16 - (_QWORD)v23;
    if (2 * v26 > v25)
      v25 = 2 * v26;
    if (v26 >= 0x3FFFFFFFFFFFFFFFLL)
      v27 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v27 = v25;
    if (v27)
    {
      v12 = operator new(v27);
      v13 = &v12[v24];
      v14 = &v12[v27];
      v12[v24] = v2;
      v15 = (uint64_t)&v12[v24 + 1];
      if (v5 == v23)
      {
LABEL_49:
        *(_QWORD *)(a1 + 40) = v13;
        *(_QWORD *)(a1 + 48) = v15;
        *(_QWORD *)(a1 + 56) = v14;
        if (!v5)
          goto LABEL_88;
        goto LABEL_87;
      }
    }
    else
    {
      v12 = 0;
      v13 = &v5[-*v6];
      v14 = 0;
      *(_BYTE *)v24 = a2;
      v15 = v24 + 1;
      if (v5 == v23)
        goto LABEL_49;
    }
    if (v24 >= 8 && (unint64_t)(v23 - v12) >= 0x20)
    {
      if (v24 >= 0x20)
      {
        v29 = v24 & 0xFFFFFFFFFFFFFFE0;
        v46 = (__int128 *)(v5 - 16);
        v47 = &v12[v5 - 16 - v23];
        v48 = v24 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v49 = *v46;
          *(v47 - 1) = *(v46 - 1);
          *v47 = v49;
          v47 -= 2;
          v46 -= 2;
          v48 -= 32;
        }
        while (v48);
        if (v24 == v29)
          goto LABEL_86;
        if ((v24 & 0x18) == 0)
        {
          v13 -= v29;
          v5 -= v29;
          goto LABEL_84;
        }
      }
      else
      {
        v29 = 0;
      }
      v13 -= v24 & 0xFFFFFFFFFFFFFFF8;
      v50 = &v5[-v29 - 8];
      v51 = &v12[v50 - v23];
      v52 = v29 - (v24 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v53 = *(_QWORD *)v50;
        v50 -= 8;
        *v51-- = v53;
        v52 += 8;
      }
      while (v52);
      v5 -= v24 & 0xFFFFFFFFFFFFFFF8;
      if (v24 == (v24 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_86;
    }
LABEL_84:
    v58 = v13 - 1;
    do
    {
      v59 = *--v5;
      *v58-- = v59;
    }
    while (v5 != v23);
    goto LABEL_86;
  }
  v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
  v5 = *(_BYTE **)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56);
  if ((unint64_t)v5 < v4)
  {
LABEL_24:
    *v5 = v2;
    v15 = (uint64_t)(v5 + 1);
    goto LABEL_88;
  }
  v6 = (_QWORD *)(a1 + 40);
  v7 = *(_BYTE **)(a1 + 40);
  v8 = v5 - v7;
  v9 = v5 - v7 + 1;
  if (v9 < 0)
    goto LABEL_89;
  v10 = v4 - (_QWORD)v7;
  if (2 * v10 > v9)
    v9 = 2 * v10;
  if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
    v11 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v11 = v9;
  if (v11)
  {
    v12 = operator new(v11);
    v13 = &v12[v8];
    v14 = &v12[v11];
    v12[v8] = v2;
    v15 = (uint64_t)&v12[v8 + 1];
    if (v5 == v7)
      goto LABEL_49;
  }
  else
  {
    v12 = 0;
    v13 = (char *)(v5 - v7);
    v14 = 0;
    *(_BYTE *)v8 = v2;
    v15 = v8 + 1;
    if (v5 == v7)
      goto LABEL_49;
  }
  if (v8 < 8 || (unint64_t)(v7 - v12) < 0x20)
    goto LABEL_76;
  if (v8 < 0x20)
  {
    v22 = 0;
    goto LABEL_55;
  }
  v22 = v8 & 0xFFFFFFFFFFFFFFE0;
  v30 = (__int128 *)(v5 - 16);
  v31 = &v12[v5 - 16 - v7];
  v32 = v8 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v33 = *v30;
    *(v31 - 1) = *(v30 - 1);
    *v31 = v33;
    v31 -= 2;
    v30 -= 2;
    v32 -= 32;
  }
  while (v32);
  if (v8 != v22)
  {
    if ((v8 & 0x18) == 0)
    {
      v13 -= v22;
      v5 -= v22;
      goto LABEL_76;
    }
LABEL_55:
    v13 -= v8 & 0xFFFFFFFFFFFFFFF8;
    v34 = &v5[-v22 - 8];
    v35 = &v12[v34 - v7];
    v36 = v22 - (v8 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v37 = *(_QWORD *)v34;
      v34 -= 8;
      *v35-- = v37;
      v36 += 8;
    }
    while (v36);
    v5 -= v8 & 0xFFFFFFFFFFFFFFF8;
    if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_86;
LABEL_76:
    v54 = v13 - 1;
    do
    {
      v55 = *--v5;
      *v54-- = v55;
    }
    while (v5 != v7);
  }
LABEL_86:
  v5 = (_BYTE *)*v6;
  *(_QWORD *)(a1 + 40) = v12;
  *(_QWORD *)(a1 + 48) = v15;
  *(_QWORD *)(a1 + 56) = v14;
  if (v5)
LABEL_87:
    operator delete(v5);
LABEL_88:
  *(_QWORD *)(a1 + 48) = v15;
}

uint64_t sub_20E99E064(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  const std::locale *v11;
  __int128 v12;
  std::string::size_type size;
  std::string *v14;
  BOOL v15;
  std::locale v17;
  std::string v18;

  *(_QWORD *)a1 = &unk_24C9B4190;
  *(_QWORD *)(a1 + 8) = a3;
  v11 = (const std::locale *)(a1 + 16);
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  v12 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 24) = v12;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_BYTE *)(a1 + 168) = a4;
  *(_BYTE *)(a1 + 169) = a5;
  *(_BYTE *)(a1 + 170) = a6;
  std::locale::locale(&v17, v11);
  std::locale::name(&v18, &v17);
  size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v18.__r_.__value_.__l.__size_;
  if (size == 1)
  {
    v14 = (std::string *)v18.__r_.__value_.__r.__words[0];
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = &v18;
    v15 = v14->__r_.__value_.__s.__data_[0] != 67;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_9;
  }
  else
  {
    v15 = 1;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
LABEL_9:
      operator delete(v18.__r_.__value_.__l.__data_);
  }
  std::locale::~locale(&v17);
  *(_BYTE *)(a1 + 171) = v15;
  return a1;
}

void sub_20E99E178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  uint64_t v9;
  std::locale *v10;
  void **v11;
  void **v12;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;

  std::locale::~locale(&a9);
  sub_20E89FB98((void **)(v9 + 136));
  v14 = *(void **)(v9 + 112);
  if (v14)
  {
    *(_QWORD *)(v9 + 120) = v14;
    operator delete(v14);
    sub_20E90F568(v11);
    v15 = *(void **)(v9 + 64);
    if (!v15)
    {
LABEL_3:
      v16 = *v12;
      if (!*v12)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    sub_20E90F568(v11);
    v15 = *(void **)(v9 + 64);
    if (!v15)
      goto LABEL_3;
  }
  *(_QWORD *)(v9 + 72) = v15;
  operator delete(v15);
  v16 = *v12;
  if (!*v12)
  {
LABEL_5:
    std::locale::~locale(v10);
    *(_QWORD *)v9 = &unk_24C9B3E48;
    v17 = *(_QWORD *)(v9 + 8);
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    _Unwind_Resume(a1);
  }
LABEL_4:
  *(_QWORD *)(v9 + 48) = v16;
  operator delete(v16);
  goto LABEL_5;
}

void sub_20E99E21C(std::locale *a1)
{
  sub_20E99ECE4(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E99E240(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char *v4;
  char *v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  const void *v19;
  char v20;
  size_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  BOOL v24;
  uint64_t v25;
  int v26;
  size_t v27;
  unsigned __int8 v28;
  unsigned __int8 *v29;
  unint64_t v30;
  int v31;
  unsigned int v32;
  char v33;
  int v34;
  void *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  const void *v44;
  size_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  BOOL v48;
  int v49;
  char *v50;
  size_t v51;
  size_t v52;
  int v53;
  int v54;
  char *v55;
  size_t v56;
  size_t v57;
  int v58;
  int v59;
  char *v60;
  size_t v61;
  size_t v62;
  int v63;
  int v64;
  char *v65;
  size_t v66;
  size_t v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  void *v76;
  size_t v77;
  size_t v78;
  uint64_t v79;
  BOOL v80;
  unsigned __int8 **v81;
  unsigned __int8 *v82;
  int v83;
  unsigned __int8 *v84;
  uint64_t v85;
  void *v86;
  size_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  unint64_t v92;
  size_t v93;
  size_t v94;
  uint64_t v95;
  uint64_t v96;
  BOOL v97;
  unsigned __int8 *v98;
  uint64_t v99;
  int v100;
  void **p_p;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  const void *v108;
  int v109;
  uint64_t v110;
  int v111;
  int v112;
  int v113;
  uint64_t v114;
  unsigned int v115;
  int v116;
  uint64_t v117;
  int v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  BOOL v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  int v132;
  int v133;
  uint64_t v134;
  int v135;
  void *v136;
  size_t v137;
  char v138;
  __int16 __src;
  void *__p;
  size_t __n;
  char v142;

  v2 = a2;
  v4 = *(char **)(a2 + 16);
  v5 = *(char **)(a2 + 24);
  if (v4 == v5)
  {
    v25 = 0;
    v26 = *(unsigned __int8 *)(a1 + 168);
    goto LABEL_245;
  }
  if (!*(_BYTE *)(a1 + 171) || v4 + 1 == v5)
    goto LABEL_34;
  v6 = *v4;
  LOBYTE(__src) = *v4;
  v7 = v4[1];
  HIBYTE(__src) = v7;
  if (*(_BYTE *)(a1 + 169))
  {
    LOBYTE(__src) = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v6);
    HIBYTE(__src) = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v7);
  }
  v8 = a1 + 16;
  sub_20E99EE24(&__src, a1 + 16, &__p, (uint64_t)&__p);
  if (v142 < 0)
  {
    v27 = __n;
    operator delete(__p);
    if (v27)
      goto LABEL_8;
LABEL_34:
    v26 = 0;
    v25 = 1;
    v28 = **(_BYTE **)(v2 + 16);
    LOBYTE(__src) = v28;
    if (!*(_BYTE *)(a1 + 169))
      goto LABEL_36;
    goto LABEL_35;
  }
  if (!v142)
    goto LABEL_34;
LABEL_8:
  v9 = *(_QWORD *)(a1 + 112);
  v10 = *(_QWORD *)(a1 + 120) - v9;
  if (v10)
  {
    v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1)
      v11 = 1;
    v12 = (unsigned __int8 *)(v9 + 1);
    while (__src != *(v12 - 1) || HIBYTE(__src) != *v12)
    {
      v12 += 2;
      if (!--v11)
        goto LABEL_17;
    }
    goto LABEL_227;
  }
LABEL_17:
  if (!*(_BYTE *)(a1 + 170) || *(_QWORD *)(a1 + 88) == *(_QWORD *)(a1 + 96))
  {
    v26 = 0;
    goto LABEL_167;
  }
  v142 = 2;
  LOWORD(__p) = __src;
  BYTE2(__p) = 0;
  (*(void (**)(void **__return_ptr, _QWORD, void **, char *))(**(_QWORD **)(a1 + 32) + 32))(&v136, *(_QWORD *)(a1 + 32), &__p, (char *)&__p + 2);
  if (v142 < 0)
    operator delete(__p);
  v14 = *(_QWORD *)(a1 + 88);
  v15 = v138;
  v16 = *(_QWORD *)(a1 + 96) - v14;
  if (!v16)
  {
    v24 = 0;
    v70 = 0;
    v69 = 0;
    goto LABEL_164;
  }
  v128 = v2;
  v17 = 0;
  v18 = v16 / 48;
  if (v138 >= 0)
    v19 = &v136;
  else
    v19 = v136;
  v20 = v138;
  if (v138 >= 0)
    v21 = v138;
  else
    v21 = v137;
  if (v18 <= 1)
    v22 = 1;
  else
    v22 = v16 / 48;
  v23 = (unsigned __int8 *)(v14 + 47);
  v24 = 1;
  do
  {
    v59 = (char)*(v23 - 24);
    if (v59 >= 0)
      v60 = (char *)(v23 - 47);
    else
      v60 = *(char **)(v23 - 47);
    if (v59 >= 0)
      v61 = *(v23 - 24);
    else
      v61 = *(_QWORD *)(v23 - 39);
    if (v21 >= v61)
      v62 = v61;
    else
      v62 = v21;
    v63 = memcmp(v60, v19, v62);
    if (v63)
    {
      if ((v63 & 0x80000000) == 0)
        goto LABEL_98;
    }
    else if (v61 > v21)
    {
      goto LABEL_98;
    }
    v64 = (char)*v23;
    if (v64 >= 0)
      v65 = (char *)(v23 - 23);
    else
      v65 = *(char **)(v23 - 23);
    if (v64 >= 0)
      v66 = *v23;
    else
      v66 = *(_QWORD *)(v23 - 15);
    if (v66 >= v21)
      v67 = v21;
    else
      v67 = v66;
    v68 = memcmp(v19, v65, v67);
    if (v68)
    {
      if (v68 < 0)
      {
LABEL_123:
        v69 = 1;
        v70 = 5;
        goto LABEL_162;
      }
    }
    else if (v21 <= v66)
    {
      goto LABEL_123;
    }
LABEL_98:
    v24 = ++v17 < v18;
    v23 += 48;
  }
  while (v22 != v17);
  v70 = 0;
  v69 = 0;
LABEL_162:
  v2 = v128;
  v8 = a1 + 16;
  v15 = v20;
LABEL_164:
  if (v15 < 0)
    operator delete(v136);
  v26 = v69;
  if (v24)
    goto LABEL_207;
LABEL_167:
  if (*(_QWORD *)(a1 + 136) == *(_QWORD *)(a1 + 144))
    goto LABEL_209;
  v133 = v26;
  v88 = v2;
  sub_20E99F0B8(&__src, v8, &__p, (uint64_t)&__p);
  v89 = *(_QWORD *)(a1 + 136);
  v90 = v142;
  v91 = *(_QWORD *)(a1 + 144) - v89;
  if (!v91)
    goto LABEL_188;
  v92 = v91 / 24;
  v93 = __n;
  if (v142 >= 0)
    v94 = v142;
  else
    v94 = __n;
  if (v142 < 0)
  {
    v135 = v142;
    v103 = 0;
    v104 = __p;
    if (v92 <= 1)
      v105 = 1;
    else
      v105 = v91 / 24;
    v97 = 1;
    do
    {
      v106 = *(unsigned __int8 *)(v89 + 23);
      v107 = (char)v106;
      if ((v106 & 0x80u) != 0)
        v106 = *(_QWORD *)(v89 + 8);
      if (v94 == v106)
      {
        v108 = v107 >= 0 ? (const void *)v89 : *(const void **)v89;
        if (!memcmp(v104, v108, v93))
        {
          v133 = 1;
          v70 = 5;
          goto LABEL_203;
        }
      }
      v97 = ++v103 < v92;
      v89 += 24;
    }
    while (v105 != v103);
    v70 = 0;
LABEL_203:
    v2 = v88;
    v90 = v135;
    goto LABEL_204;
  }
  if (!v142)
  {
    v114 = *(unsigned __int8 *)(v89 + 23);
    if ((v114 & 0x80u) != 0)
      v114 = *(_QWORD *)(v89 + 8);
    if (v114 != v142)
    {
      v119 = 0;
      if (v92 <= 1)
        v120 = 1;
      else
        v120 = v92;
      v121 = v120 - 1;
      v122 = (uint64_t *)(v89 + 32);
      v2 = v88;
      while (v121 != v119)
      {
        ++v119;
        v123 = *((unsigned __int8 *)v122 + 15);
        v125 = *v122;
        v122 += 3;
        v124 = v125;
        if ((v123 & 0x80u) != 0)
          v123 = v124;
        if (v94 == v123)
        {
          v97 = v119 < v92;
          v133 = 1;
          v70 = 5;
          goto LABEL_204;
        }
      }
      v97 = 0;
      v70 = 0;
      goto LABEL_204;
    }
    v2 = v88;
    v26 = 1;
LABEL_208:
    v25 = 2;
    goto LABEL_245;
  }
  v95 = 0;
  v96 = v92 <= 1 ? 1 : v91 / 24;
  v97 = 1;
  do
  {
    v98 = (unsigned __int8 *)(v89 + 24 * v95);
    v99 = v98[23];
    v100 = (char)v99;
    if ((v99 & 0x80u) != 0)
      v99 = *((_QWORD *)v98 + 1);
    if (v94 == v99)
    {
      if (v100 < 0)
        v98 = *(unsigned __int8 **)v98;
      p_p = &__p;
      v102 = v142;
      while (*(unsigned __int8 *)p_p == *v98)
      {
        p_p = (void **)((char *)p_p + 1);
        ++v98;
        if (!--v102)
        {
          v133 = 1;
          v70 = 5;
          v2 = v88;
          goto LABEL_204;
        }
      }
    }
    v97 = ++v95 < v92;
  }
  while (v95 != v96);
LABEL_188:
  v97 = 0;
  v70 = 0;
  v2 = v88;
LABEL_204:
  if (v90 < 0)
    operator delete(__p);
  v26 = v133;
  if (!v97)
  {
LABEL_209:
    if ((char)__src < 0)
    {
      v112 = *(_DWORD *)(a1 + 164);
    }
    else
    {
      v109 = *(_DWORD *)(a1 + 160);
      v110 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16);
      v111 = *(_DWORD *)(v110 + 4 * __src);
      if (((v111 & v109) != 0 || __src == 95 && (v109 & 0x80) != 0)
        && (SHIBYTE(__src) & 0x80000000) == 0
        && ((*(_DWORD *)(v110 + 4 * HIBYTE(__src)) & v109) != 0 || (v109 & 0x80) != 0 && HIBYTE(__src) == 95))
      {
        goto LABEL_227;
      }
      v112 = *(_DWORD *)(a1 + 164);
      if ((v112 & v111) != 0 || __src == 95 && (v112 & 0x80) != 0)
      {
LABEL_226:
        v113 = v26;
LABEL_228:
        v26 = v113;
        v25 = 2;
        goto LABEL_245;
      }
    }
    if ((SHIBYTE(__src) & 0x80000000) == 0)
    {
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 4 * HIBYTE(__src)) & v112) == 0)
      {
        v113 = 1;
        if (HIBYTE(__src) != 95 || (v112 & 0x80) == 0)
          goto LABEL_228;
      }
      goto LABEL_226;
    }
LABEL_227:
    v113 = 1;
    goto LABEL_228;
  }
LABEL_207:
  if (v70)
    goto LABEL_208;
  v25 = 2;
  v28 = **(_BYTE **)(v2 + 16);
  LOBYTE(__src) = v28;
  if (*(_BYTE *)(a1 + 169))
  {
LABEL_35:
    v28 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), (char)v28);
    LOBYTE(__src) = v28;
  }
LABEL_36:
  v29 = *(unsigned __int8 **)(a1 + 40);
  v30 = *(_QWORD *)(a1 + 48) - (_QWORD)v29;
  if (v30)
  {
    if (v30 <= 1)
      v30 = 1;
    while (1)
    {
      v31 = *v29++;
      if (v31 == v28)
        break;
      if (!--v30)
        goto LABEL_41;
    }
LABEL_244:
    v26 = 1;
    goto LABEL_245;
  }
LABEL_41:
  v32 = *(_DWORD *)(a1 + 164);
  if (v32 || *(_QWORD *)(a1 + 64) != *(_QWORD *)(a1 + 72))
  {
    if ((v28 & 0x80) != 0 || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 4 * v28) & v32) == 0)
    {
      v34 = (v32 >> 7) & 1;
      v33 = v28 == 95 ? v34 : 0;
    }
    else
    {
      v33 = 1;
    }
    v35 = *(void **)(a1 + 72);
    v36 = memchr(*(void **)(a1 + 64), (char)v28, (size_t)v35 - *(_QWORD *)(a1 + 64));
    v37 = v36 ? v36 : v35;
    if ((v33 & 1) == 0 && v37 == v35)
      goto LABEL_244;
  }
  v38 = *(_QWORD *)(a1 + 88);
  v39 = *(_QWORD *)(a1 + 96);
  if (v38 == v39)
    goto LABEL_128;
  if (!*(_BYTE *)(a1 + 170))
  {
    v40 = 1;
    v138 = 1;
    LOWORD(v136) = v28;
    v41 = v39 - v38;
    if (v41)
      goto LABEL_59;
LABEL_155:
    v48 = 0;
    if ((v40 & 0x80) != 0)
      goto LABEL_126;
    goto LABEL_127;
  }
  v142 = 1;
  LOWORD(__p) = v28;
  (*(void (**)(void **__return_ptr, _QWORD, void **, char *))(**(_QWORD **)(a1 + 32) + 32))(&v136, *(_QWORD *)(a1 + 32), &__p, (char *)&__p + 1);
  if (v142 < 0)
    operator delete(__p);
  v38 = *(_QWORD *)(a1 + 88);
  v40 = v138;
  v41 = *(_QWORD *)(a1 + 96) - v38;
  if (!v41)
    goto LABEL_155;
LABEL_59:
  v134 = v25;
  v131 = v26;
  v129 = v2;
  v42 = 0;
  v43 = v41 / 48;
  v126 = v40;
  if ((v40 & 0x80u) == 0)
    v44 = &v136;
  else
    v44 = v136;
  if ((v40 & 0x80u) == 0)
    v45 = v40;
  else
    v45 = v137;
  if (v43 <= 1)
    v46 = 1;
  else
    v46 = v41 / 48;
  v47 = (unsigned __int8 *)(v38 + 47);
  v48 = 1;
  while (2)
  {
    v49 = (char)*(v47 - 24);
    if (v49 >= 0)
      v50 = (char *)(v47 - 47);
    else
      v50 = *(char **)(v47 - 47);
    if (v49 >= 0)
      v51 = *(v47 - 24);
    else
      v51 = *(_QWORD *)(v47 - 39);
    if (v45 >= v51)
      v52 = v51;
    else
      v52 = v45;
    v53 = memcmp(v50, v44, v52);
    if (v53)
    {
      if (v53 < 0)
        goto LABEL_84;
    }
    else if (v51 <= v45)
    {
LABEL_84:
      v54 = (char)*v47;
      if (v54 >= 0)
        v55 = (char *)(v47 - 23);
      else
        v55 = *(char **)(v47 - 23);
      if (v54 >= 0)
        v56 = *v47;
      else
        v56 = *(_QWORD *)(v47 - 15);
      if (v56 >= v45)
        v57 = v45;
      else
        v57 = v56;
      v58 = memcmp(v44, v55, v57);
      if (v58)
      {
        if (v58 < 0)
        {
LABEL_95:
          v26 = 1;
          v2 = v129;
          v25 = v134;
          if ((v126 & 0x80) == 0)
            goto LABEL_127;
          goto LABEL_126;
        }
      }
      else if (v45 <= v56)
      {
        goto LABEL_95;
      }
    }
    v48 = ++v42 < v43;
    v47 += 48;
    if (v46 != v42)
      continue;
    break;
  }
  v2 = v129;
  v26 = v131;
  v25 = v134;
  if ((v126 & 0x80) == 0)
    goto LABEL_127;
LABEL_126:
  operator delete(v136);
LABEL_127:
  if (v48)
    goto LABEL_245;
LABEL_128:
  if (*(_QWORD *)(a1 + 136) == *(_QWORD *)(a1 + 144))
  {
LABEL_239:
    if ((v28 & 0x80) != 0)
      goto LABEL_245;
    v115 = *(_DWORD *)(a1 + 160);
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 4 * v28) & v115) == 0)
    {
      v116 = (v115 >> 7) & 1;
      if (v28 != 95)
        v116 = 0;
      if (v116 != 1)
        goto LABEL_245;
    }
    goto LABEL_244;
  }
  sub_20E99F0B8(&__src, a1 + 16, (_BYTE *)&__src + 1, (uint64_t)&__p);
  v71 = *(_QWORD *)(a1 + 136);
  v72 = v142;
  v73 = *(_QWORD *)(a1 + 144) - v71;
  if (!v73)
  {
    if (v142 < 0)
      operator delete(__p);
LABEL_238:
    v28 = __src;
    goto LABEL_239;
  }
  v132 = v26;
  v130 = v2;
  v74 = 0;
  v75 = v73 / 24;
  v76 = __p;
  v77 = __n;
  if (v142 >= 0)
    v78 = v142;
  else
    v78 = __n;
  if (v75 <= 1)
    v79 = 1;
  else
    v79 = v73 / 24;
  v80 = 1;
  while (2)
  {
    v81 = (unsigned __int8 **)(v71 + 24 * v74);
    v82 = (unsigned __int8 *)*((unsigned __int8 *)v81 + 23);
    v83 = (char)v82;
    if ((char)v82 < 0)
      v82 = v81[1];
    if ((unsigned __int8 *)v78 != v82)
    {
LABEL_149:
      if (++v74 == v79)
      {
        if ((v72 & 0x80) != 0)
LABEL_236:
          operator delete(__p);
        v2 = v130;
        v26 = v132;
        goto LABEL_238;
      }
      goto LABEL_153;
    }
    if (v83 >= 0)
      v84 = (unsigned __int8 *)(v71 + 24 * v74);
    else
      v84 = *v81;
    if ((v72 & 0x80) == 0)
    {
      if (!(_DWORD)v72)
      {
LABEL_157:
        v2 = v130;
        v26 = 1;
        if (!v80)
          goto LABEL_238;
        goto LABEL_245;
      }
      v85 = 0;
      while (*((unsigned __int8 *)&__p + v85) == v84[v85])
      {
        if (v72 == ++v85)
          goto LABEL_157;
      }
      goto LABEL_149;
    }
    v127 = v80;
    v86 = v76;
    v87 = v77;
    if (memcmp(v76, v84, v77))
    {
      ++v74;
      v77 = v87;
      v76 = v86;
      if (v74 == v79)
        goto LABEL_236;
LABEL_153:
      v80 = v74 < v75;
      continue;
    }
    break;
  }
  operator delete(__p);
  v2 = v130;
  v26 = 1;
  if (!v127)
    goto LABEL_238;
LABEL_245:
  if (v26 == *(unsigned __int8 *)(a1 + 168))
  {
    v117 = 0;
    v118 = -993;
  }
  else
  {
    *(_QWORD *)(v2 + 16) += v25;
    v117 = *(_QWORD *)(a1 + 8);
    v118 = -995;
  }
  *(_DWORD *)v2 = v118;
  *(_QWORD *)(v2 + 80) = v117;
}

void sub_20E99ECC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::locale *sub_20E99ECE4(std::locale *a1)
{
  std::locale::__imp *locale;
  std::locale::__imp *v3;
  std::locale::__imp *v4;
  std::locale::__imp *v5;
  std::locale::__imp *v6;
  std::locale::__imp *v7;
  std::locale::__imp *v8;
  std::locale::__imp *v9;
  std::locale::__imp *v10;
  std::locale::__imp *v11;

  a1->__locale_ = (std::locale::__imp *)&unk_24C9B4190;
  locale = a1[17].__locale_;
  if (locale)
  {
    v3 = a1[18].__locale_;
    v4 = a1[17].__locale_;
    if (v3 != locale)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*((void **)v3 - 3));
        v3 = (std::locale::__imp *)((char *)v3 - 24);
      }
      while (v3 != locale);
      v4 = a1[17].__locale_;
    }
    a1[18].__locale_ = locale;
    operator delete(v4);
  }
  v5 = a1[14].__locale_;
  if (v5)
  {
    a1[15].__locale_ = v5;
    operator delete(v5);
  }
  v6 = a1[11].__locale_;
  if (v6)
  {
    v7 = a1[12].__locale_;
    v8 = a1[11].__locale_;
    if (v7 == v6)
    {
LABEL_21:
      a1[12].__locale_ = v6;
      operator delete(v8);
      goto LABEL_22;
    }
    while (1)
    {
      if (*((char *)v7 - 1) < 0)
      {
        operator delete(*((void **)v7 - 3));
        if (*((char *)v7 - 25) < 0)
LABEL_19:
          operator delete(*((void **)v7 - 6));
      }
      else if (*((char *)v7 - 25) < 0)
      {
        goto LABEL_19;
      }
      v7 = (std::locale::__imp *)((char *)v7 - 48);
      if (v7 == v6)
      {
        v8 = a1[11].__locale_;
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v9 = a1[8].__locale_;
  if (v9)
  {
    a1[9].__locale_ = v9;
    operator delete(v9);
  }
  v10 = a1[5].__locale_;
  if (v10)
  {
    a1[6].__locale_ = v10;
    operator delete(v10);
  }
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_24C9B3E48;
  v11 = a1[1].__locale_;
  if (v11)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v11 + 8))(v11);
  return a1;
}

void sub_20E99EE24(_BYTE *__src@<X1>, uint64_t a2@<X0>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  size_t v5;
  __int128 *p_dst;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  int v17;
  uint64_t v18;
  __int128 *v19;
  size_t v20;
  std::string v21;
  __int128 __dst;
  int64_t v23;

  v5 = a3 - __src;
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  if (v5 <= 0x16)
  {
    HIBYTE(v23) = (_BYTE)a3 - (_BYTE)__src;
    p_dst = &__dst;
    if (__src == a3)
      goto LABEL_9;
LABEL_8:
    memcpy(p_dst, __src, v5);
    p_dst = (__int128 *)((char *)p_dst + v5);
    goto LABEL_9;
  }
  v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17)
    v10 = v5 | 7;
  v11 = v10 + 1;
  p_dst = (__int128 *)operator new(v10 + 1);
  *((_QWORD *)&__dst + 1) = v5;
  v23 = v11 | 0x8000000000000000;
  *(_QWORD *)&__dst = p_dst;
  if (__src != a3)
    goto LABEL_8;
LABEL_9:
  *(_BYTE *)p_dst = 0;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  if (SHIBYTE(v23) < 0)
  {
    if (!*((_QWORD *)&__dst + 1))
      goto LABEL_17;
    v12 = (const char *)__dst;
  }
  else
  {
    if (!HIBYTE(v23))
      return;
    v12 = (const char *)&__dst;
  }
  std::__get_collation_name(&v21, v12);
  *(_OWORD *)a4 = *(_OWORD *)&v21.__r_.__value_.__l.__data_;
  v13 = v21.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a4 + 16) = *((_QWORD *)&v21.__r_.__value_.__l + 2);
  v14 = HIBYTE(v13);
  if ((v14 & 0x80u) != 0)
    v14 = *(_QWORD *)(a4 + 8);
  if (v14)
    goto LABEL_17;
  if ((SHIBYTE(v23) & 0x80000000) == 0)
  {
    v15 = HIBYTE(v23);
    if (HIBYTE(v23) >= 3u)
      return;
    v16 = (char *)&__dst;
    goto LABEL_25;
  }
  v15 = *((_QWORD *)&__dst + 1);
  if (*((_QWORD *)&__dst + 1) < 3uLL)
  {
    v16 = (char *)__dst;
LABEL_25:
    (*(void (**)(std::string *__return_ptr, _QWORD, char *, char *))(**(_QWORD **)(a2 + 16) + 32))(&v21, *(_QWORD *)(a2 + 16), v16, &v16[v15]);
    if (*(char *)(a4 + 23) < 0)
      operator delete(*(void **)a4);
    *(std::string *)a4 = v21;
    if (*(char *)(a4 + 23) < 0)
    {
      v18 = *(_QWORD *)(a4 + 8);
      if (v18 == 1 || v18 == 12)
      {
        if (&__dst != (__int128 *)a4)
        {
          if (v23 >= 0)
            v19 = &__dst;
          else
            v19 = (__int128 *)__dst;
          if (v23 >= 0)
            v20 = HIBYTE(v23);
          else
            v20 = *((_QWORD *)&__dst + 1);
          sub_20E867CBC((void **)a4, v19, v20);
        }
      }
      else
      {
        **(_BYTE **)a4 = 0;
        *(_QWORD *)(a4 + 8) = 0;
      }
    }
    else
    {
      v17 = *(unsigned __int8 *)(a4 + 23);
      if (v17 == 1 || v17 == 12)
      {
        if (&__dst != (__int128 *)a4)
        {
          if (SHIBYTE(v23) < 0)
          {
            sub_20E867BF8((_QWORD *)a4, (void *)__dst, *((size_t *)&__dst + 1));
          }
          else
          {
            *(_OWORD *)a4 = __dst;
            *(_QWORD *)(a4 + 16) = v23;
          }
        }
      }
      else
      {
        *(_BYTE *)a4 = 0;
        *(_BYTE *)(a4 + 23) = 0;
      }
    }
  }
LABEL_17:
  if (SHIBYTE(v23) < 0)
    operator delete((void *)__dst);
}

void sub_20E99F074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 23) < 0)
  {
    operator delete(*(void **)v17);
    if ((a17 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a17 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20E99F0B8(_BYTE *__src@<X1>, uint64_t a2@<X0>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  size_t v5;
  void **p_dst;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  void **v13;
  uint64_t v14;
  int v15;
  _BYTE *v16;
  void **__dst;
  size_t v18;
  int64_t v19;

  v5 = a3 - __src;
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  if (v5 <= 0x16)
  {
    HIBYTE(v19) = (_BYTE)a3 - (_BYTE)__src;
    p_dst = (void **)&__dst;
    if (__src == a3)
      goto LABEL_9;
LABEL_8:
    memcpy(p_dst, __src, v5);
    p_dst = (void **)((char *)p_dst + v5);
    goto LABEL_9;
  }
  v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17)
    v10 = v5 | 7;
  v11 = v10 + 1;
  p_dst = (void **)operator new(v10 + 1);
  v18 = v5;
  v19 = v11 | 0x8000000000000000;
  __dst = p_dst;
  if (__src != a3)
    goto LABEL_8;
LABEL_9:
  *(_BYTE *)p_dst = 0;
  v12 = HIBYTE(v19);
  if (v19 >= 0)
    v13 = (void **)&__dst;
  else
    v13 = __dst;
  if (v19 < 0)
    v12 = v18;
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a2 + 16) + 32))(*(_QWORD *)(a2 + 16), v13, (char *)v13 + v12);
  v14 = *(unsigned __int8 *)(a4 + 23);
  v15 = (char)v14;
  if ((v14 & 0x80u) != 0)
    v14 = *(_QWORD *)(a4 + 8);
  if (v14 == 1)
  {
LABEL_25:
    if ((SHIBYTE(v19) & 0x80000000) == 0)
      return;
    goto LABEL_26;
  }
  if (v14 == 12)
  {
    if (v15 >= 0)
      v16 = (_BYTE *)a4;
    else
      v16 = *(_BYTE **)a4;
    v16[11] = v16[3];
    if (SHIBYTE(v19) < 0)
      goto LABEL_26;
    return;
  }
  if ((v15 & 0x80000000) == 0)
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 23) = 0;
    goto LABEL_25;
  }
  **(_BYTE **)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  if (SHIBYTE(v19) < 0)
LABEL_26:
    operator delete(__dst);
}

void sub_20E99F230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20E99F24C()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x212BC5A14](exception, 5);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_20E99F284(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *sub_20E99F298(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  char *v4;
  int v5;
  char *v6;
  int v9;
  int v10;
  char v11;
  _BYTE *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  char *v15;
  int v16;
  _BYTE *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  int v21;
  char *v22;
  uint64_t v23;
  int v24;
  int v25;
  char *v26;
  char *v27;
  char *v28;
  int v29;
  void **v30;
  _BYTE *v31;
  char *v32;
  _BYTE *v34;
  void *v35[2];
  uint64_t v36;
  void *v37[2];
  uint64_t v38;
  void *__p[2];
  uint64_t v40;
  __int128 v41;
  int64_t v42;

  v4 = a2;
  if (a2 == a3)
    return v4;
  v5 = *a2;
  if (v5 == 93)
    return v4;
  v6 = (char *)a4;
  v9 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v40 = 0;
  if (a2 + 1 == a3 || v5 != 91)
  {
LABEL_38:
    v24 = *(_DWORD *)(a1 + 24) & 0x1F0;
    goto LABEL_33;
  }
  v10 = a2[1];
  if (v10 != 46)
  {
    if (v10 != 58)
    {
      if (v10 == 61)
      {
        v6 = sub_20E99F82C(a1, a2 + 2, a3, a4);
        v11 = 0;
        if ((SHIBYTE(v40) & 0x80000000) == 0)
          goto LABEL_64;
        goto LABEL_63;
      }
      v9 = 0;
      goto LABEL_38;
    }
    v12 = a2 + 2;
    if (a3 - (v4 + 2) >= 2)
    {
      v13 = 0;
      v14 = (unsigned __int8 *)v4;
      if (v4[2] == 58)
        goto LABEL_14;
      do
      {
        do
        {
          if (a3 - v4 - 4 == v13)
            goto LABEL_89;
          v14 = (unsigned __int8 *)&v4[++v13];
        }
        while (v4[v13 + 2] != 58);
LABEL_14:
        ;
      }
      while (v14[3] != 93);
      v15 = &v4[v13 + 2];
      if (v15 != a3)
      {
        v16 = sub_20E9A0F68(a1, v12, v15, *(_DWORD *)(a1 + 24) & 1);
        if (!v16)
          sub_20E9A0F1C();
        v11 = 0;
        *((_DWORD *)v6 + 40) |= v16;
        v6 = &v4[v13 + 4];
        if (SHIBYTE(v40) < 0)
          goto LABEL_63;
        goto LABEL_64;
      }
    }
LABEL_89:
    sub_20E99F24C();
  }
  v17 = a2 + 2;
  if (a3 - (v4 + 2) < 2)
    goto LABEL_89;
  v18 = a3 - v4 - 4;
  v19 = v4 + 2;
  v20 = v17 + 1;
  if (*v17 == 46)
    goto LABEL_23;
  do
  {
    do
    {
      if (!v18)
        goto LABEL_89;
      --v18;
      v19 = v20;
      v21 = *v20++;
    }
    while (v21 != 46);
LABEL_23:
    ;
  }
  while (*v20 != 93);
  if (v19 == a3)
    goto LABEL_89;
  sub_20E9A0A94(v17, a1, v19, (uint64_t)&v41);
  if (SHIBYTE(v40) < 0)
    operator delete(__p[0]);
  v40 = v42;
  *(_OWORD *)__p = v41;
  v22 = (char *)HIBYTE(v42);
  v9 = SHIBYTE(v42);
  v23 = *((_QWORD *)&v41 + 1);
  if (v42 < 0)
    v22 = (char *)__p[1];
  if ((unint64_t)(v22 - 1) >= 2)
    sub_20E9A0A48();
  v4 = v19 + 2;
  v24 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v42 >= 0)
    v23 = HIBYTE(v42);
  if (v23)
  {
    v28 = v4;
    if (v4 == a3)
      goto LABEL_41;
    goto LABEL_40;
  }
LABEL_33:
  if ((v24 | 0x40) != 0x40)
  {
    LOBYTE(v25) = *v4;
LABEL_57:
    if (v9 < 0)
    {
      v34 = __p[0];
      __p[1] = (void *)1;
      *(_BYTE *)__p[0] = v25;
      v34[1] = 0;
      v28 = v4 + 1;
      if (v4 + 1 == a3)
        goto LABEL_41;
    }
    else
    {
      HIBYTE(v40) = 1;
      LOWORD(__p[0]) = v25;
      v28 = v4 + 1;
      if (v4 + 1 == a3)
        goto LABEL_41;
    }
    goto LABEL_40;
  }
  v25 = *v4;
  if (v25 != 92)
    goto LABEL_57;
  v26 = v4 + 1;
  if (v24)
    v27 = sub_20E99FD50(a1, v26, a3, (uint64_t *)__p);
  else
    v27 = (char *)sub_20E99FB94(a1, (unsigned __int8 *)v26, (unsigned __int8 *)a3, (uint64_t)__p, (uint64_t)v6);
  v28 = v27;
  if (v27 == a3)
  {
LABEL_41:
    if (SHIBYTE(v40) < 0)
    {
      if (!__p[1])
        goto LABEL_62;
      if (__p[1] != (void *)1)
      {
        v30 = (void **)__p[0];
LABEL_61:
        sub_20E9A0680((uint64_t)v6, *(char *)v30, *((char *)v30 + 1));
LABEL_62:
        v11 = 1;
        v4 = v28;
        if ((SHIBYTE(v40) & 0x80000000) == 0)
          goto LABEL_64;
        goto LABEL_63;
      }
      v30 = (void **)__p[0];
    }
    else
    {
      if (!HIBYTE(v40))
        goto LABEL_62;
      v30 = __p;
      if (HIBYTE(v40) != 1)
        goto LABEL_61;
    }
    sub_20E99DBEC((uint64_t)v6, *(char *)v30);
    goto LABEL_62;
  }
LABEL_40:
  v29 = *v28;
  if (v29 == 93)
    goto LABEL_41;
  v31 = v28 + 1;
  if (v28 + 1 == a3 || v29 != 45 || *v31 == 93)
    goto LABEL_41;
  v41 = 0uLL;
  v42 = 0;
  v4 = v28 + 2;
  if (v28 + 2 == a3 || *v31 != 91 || *v4 != 46)
  {
    if ((v24 | 0x40) == 0x40)
    {
      LODWORD(v31) = *v31;
      if ((_DWORD)v31 == 92)
      {
        if (v24)
          v32 = sub_20E99FD50(a1, v28 + 2, a3, (uint64_t *)&v41);
        else
          v32 = (char *)sub_20E99FB94(a1, (unsigned __int8 *)v28 + 2, (unsigned __int8 *)a3, (uint64_t)&v41, (uint64_t)v6);
        goto LABEL_79;
      }
    }
    else
    {
      LOBYTE(v31) = *v31;
    }
    HIBYTE(v42) = 1;
    LOWORD(v41) = v31;
    goto LABEL_80;
  }
  v32 = sub_20E99FA98(a1, v28 + 3, a3, (uint64_t)&v41);
LABEL_79:
  v4 = v32;
LABEL_80:
  *(_OWORD *)v37 = *(_OWORD *)__p;
  v38 = v40;
  __p[1] = 0;
  v40 = 0;
  __p[0] = 0;
  *(_OWORD *)v35 = v41;
  v36 = v42;
  v41 = 0uLL;
  v42 = 0;
  sub_20E9A0154((uint64_t)v6, (char *)v37, (uint64_t)v35);
  if (SHIBYTE(v36) < 0)
  {
    operator delete(v35[0]);
    if ((SHIBYTE(v38) & 0x80000000) == 0)
    {
LABEL_82:
      if ((SHIBYTE(v42) & 0x80000000) == 0)
        goto LABEL_83;
LABEL_87:
      operator delete((void *)v41);
      v11 = 1;
      if (SHIBYTE(v40) < 0)
        goto LABEL_63;
      goto LABEL_64;
    }
  }
  else if ((SHIBYTE(v38) & 0x80000000) == 0)
  {
    goto LABEL_82;
  }
  operator delete(v37[0]);
  if (SHIBYTE(v42) < 0)
    goto LABEL_87;
LABEL_83:
  v11 = 1;
  if (SHIBYTE(v40) < 0)
LABEL_63:
    operator delete(__p[0]);
LABEL_64:
  if ((v11 & 1) != 0)
    return v4;
  return v6;
}

void sub_20E99F79C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (*(char *)(v28 - 49) < 0)
  {
    operator delete(*(void **)(v28 - 72));
    if (a28 < 0)
    {
LABEL_5:
      operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
  else if (a28 < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

char *sub_20E99F82C(uint64_t a1, char *__src, char *a3, uint64_t *a4)
{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void *v11;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  char *v15;
  char *v16;
  void *__p[2];
  uint64_t v19;
  void *v20;
  uint64_t v21;
  unsigned __int8 v22;

  if (a3 - __src < 2 || a3 - 1 == __src)
    goto LABEL_39;
  v7 = 0;
  v8 = __src;
  if (*__src != 61)
    goto LABEL_5;
LABEL_4:
  if (v8[1] != 93)
  {
LABEL_5:
    while (a3 - __src - 2 != v7)
    {
      v8 = &__src[++v7];
      if (__src[v7] == 61)
        goto LABEL_4;
    }
LABEL_39:
    sub_20E99F24C();
  }
  if (&__src[v7] == a3)
    goto LABEL_39;
  sub_20E9A0A94(__src, a1, &__src[v7], (uint64_t)&v20);
  if (((char)v22 & 0x80000000) == 0)
  {
    v9 = v22;
    if (v22)
    {
      v10 = (char *)&v20;
      goto LABEL_14;
    }
LABEL_40:
    sub_20E9A0A48();
  }
  v9 = v21;
  if (!v21)
    goto LABEL_40;
  v10 = (char *)v20;
LABEL_14:
  sub_20E9A0D28(a1, (uint64_t)v10, &v10[v9], (uint64_t)__p);
  v11 = (void *)HIBYTE(v19);
  if (v19 < 0)
    v11 = __p[1];
  if (v11)
  {
    v12 = a4[18];
    if (v12 >= a4[19])
    {
      a4[18] = sub_20E8ADE68(a4 + 17, (__int128 *)__p);
      if (SHIBYTE(v19) < 0)
        goto LABEL_37;
    }
    else
    {
      if (SHIBYTE(v19) < 0)
      {
        sub_20E860C04((_BYTE *)a4[18], __p[0], (unint64_t)__p[1]);
      }
      else
      {
        v13 = *(_OWORD *)__p;
        *(_QWORD *)(v12 + 16) = v19;
        *(_OWORD *)v12 = v13;
      }
      a4[18] = v12 + 24;
      a4[18] = v12 + 24;
      if (SHIBYTE(v19) < 0)
        goto LABEL_37;
    }
  }
  else
  {
    v14 = v22;
    if ((v22 & 0x80u) != 0)
      v14 = v21;
    if (v14 == 2)
    {
      v16 = (char *)&v20;
      if ((v22 & 0x80u) != 0)
        v16 = (char *)v20;
      sub_20E9A0680((uint64_t)a4, *v16, v16[1]);
    }
    else
    {
      if (v14 != 1)
        sub_20E9A0A48();
      v15 = (char *)&v20;
      if ((v22 & 0x80u) != 0)
        v15 = (char *)v20;
      sub_20E99DBEC((uint64_t)a4, *v15);
    }
    if (SHIBYTE(v19) < 0)
    {
LABEL_37:
      operator delete(__p[0]);
      if ((char)v22 < 0)
        goto LABEL_38;
      return &__src[v7 + 2];
    }
  }
  if ((char)v22 < 0)
LABEL_38:
    operator delete(v20);
  return &__src[v7 + 2];
}

void sub_20E99FA3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)(v20 + 144) = v21;
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

char *sub_20E99FA98(uint64_t a1, char *__src, char *a3, uint64_t a4)
{
  uint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v11;
  unint64_t v12;

  if (a3 - __src < 2 || a3 - 1 == __src)
    goto LABEL_15;
  v6 = 0;
  v7 = __src;
  if (*__src != 46)
    goto LABEL_5;
LABEL_4:
  if (v7[1] != 93)
  {
LABEL_5:
    while (a3 - __src - 2 != v6)
    {
      v7 = &__src[++v6];
      if (__src[v6] == 46)
        goto LABEL_4;
    }
LABEL_15:
    sub_20E99F24C();
  }
  if (&__src[v6] == a3)
    goto LABEL_15;
  sub_20E9A0A94(__src, a1, &__src[v6], (uint64_t)&v11);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(_OWORD *)a4 = v11;
  v8 = v12;
  *(_QWORD *)(a4 + 16) = v12;
  v9 = HIBYTE(v8);
  if ((v9 & 0x80u) != 0)
    v9 = *(_QWORD *)(a4 + 8);
  if (v9 - 1 >= 2)
    sub_20E9A0A48();
  return &__src[v6 + 2];
}

unsigned __int8 *sub_20E99FB94(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 *result;

  if (a2 == a3)
    sub_20E99CA10();
  switch(*a2)
  {
    case 'D':
      *(_DWORD *)(a5 + 164) |= 0x400u;
      result = a2 + 1;
      break;
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'T':
    case 'U':
    case 'V':
    case 'X':
    case 'Y':
    case 'Z':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
    case 'a':
    case 'c':
    case 'e':
    case 'f':
    case 'g':
    case 'h':
    case 'i':
    case 'j':
    case 'k':
    case 'l':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'q':
    case 'r':
    case 't':
    case 'u':
    case 'v':
      goto LABEL_8;
    case 'S':
      *(_DWORD *)(a5 + 164) |= 0x4000u;
      result = a2 + 1;
      break;
    case 'W':
      *(_DWORD *)(a5 + 164) |= 0x500u;
      sub_20E9A10B0(a5, 95);
      result = a2 + 1;
      break;
    case 'b':
      if (*(char *)(a4 + 23) < 0)
      {
        *(_QWORD *)(a4 + 8) = 1;
        a4 = *(_QWORD *)a4;
      }
      else
      {
        *(_BYTE *)(a4 + 23) = 1;
      }
      *(_WORD *)a4 = 8;
      result = a2 + 1;
      break;
    case 'd':
      *(_DWORD *)(a5 + 160) |= 0x400u;
      result = a2 + 1;
      break;
    case 's':
      *(_DWORD *)(a5 + 160) |= 0x4000u;
      result = a2 + 1;
      break;
    case 'w':
      *(_DWORD *)(a5 + 160) |= 0x500u;
      sub_20E99DBEC(a5, 95);
      result = a2 + 1;
      break;
    default:
      if (*a2)
      {
LABEL_8:
        result = sub_20E99CCC4(a1, a2, a3, (uint64_t *)a4);
      }
      else
      {
        if (*(char *)(a4 + 23) < 0)
        {
          *(_QWORD *)(a4 + 8) = 1;
          a4 = *(_QWORD *)a4;
        }
        else
        {
          *(_BYTE *)(a4 + 23) = 1;
        }
        *(_BYTE *)a4 = 0;
        *(_BYTE *)(a4 + 1) = 0;
        result = a2 + 1;
      }
      break;
  }
  return result;
}

char *sub_20E99FD50(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  char v5;
  char v7;
  char *v8;
  char v9;
  int v10;
  char v11;

  if (a2 == a3)
LABEL_70:
    sub_20E99CA10();
  v5 = *a2;
  switch(*a2)
  {
    case '"':
    case '/':
    case '\\':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_BYTE *)a4 = v5;
        *((_BYTE *)a4 + 1) = 0;
        return a2 + 1;
      }
      else
      {
        sub_20E99D188(a1, v5);
        return a2 + 1;
      }
    case 'a':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 7;
        return a2 + 1;
      }
      else
      {
        sub_20E99D188(a1, 7);
        return a2 + 1;
      }
    case 'b':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 8;
        return a2 + 1;
      }
      else
      {
        sub_20E99D188(a1, 8);
        return a2 + 1;
      }
    case 'f':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 12;
        return a2 + 1;
      }
      else
      {
        sub_20E99D188(a1, 12);
        return a2 + 1;
      }
    case 'n':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 10;
        return a2 + 1;
      }
      else
      {
        sub_20E99D188(a1, 10);
        return a2 + 1;
      }
    case 'r':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 13;
        return a2 + 1;
      }
      else
      {
        sub_20E99D188(a1, 13);
        return a2 + 1;
      }
    case 't':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 9;
        return a2 + 1;
      }
      else
      {
        sub_20E99D188(a1, 9);
        return a2 + 1;
      }
    case 'v':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 11;
        return a2 + 1;
      }
      else
      {
        sub_20E99D188(a1, 11);
        return a2 + 1;
      }
    default:
      if ((v5 & 0xF8) != 0x30)
        goto LABEL_70;
      v7 = *a2 - 48;
      v8 = a2 + 1;
      if (a2 + 1 == a3)
      {
        v8 = a3;
LABEL_42:
        if (a4)
          goto LABEL_43;
LABEL_69:
        sub_20E99D188(a1, v7);
        return v8;
      }
      if ((*v8 & 0xF8) != 0x30)
        goto LABEL_42;
      v7 = *v8 + 8 * v7 - 48;
      if (a2 + 2 == a3)
      {
        v8 = a3;
        if (a4)
          goto LABEL_43;
        goto LABEL_69;
      }
      v9 = a2[2];
      v10 = v9 & 0xF8;
      v11 = v9 + 8 * v7 - 48;
      if (v10 == 48)
        v8 = a2 + 3;
      else
        v8 = a2 + 2;
      if (v10 == 48)
        v7 = v11;
      if (!a4)
        goto LABEL_69;
LABEL_43:
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      *(_BYTE *)a4 = v7;
      *((_BYTE *)a4 + 1) = 0;
      return v8;
  }
}

void sub_20E9A0154(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  unint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t j;
  unint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t k;
  char *v18;
  unint64_t v19;
  char *v20;
  unint64_t m;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  int v33;
  char *v34;
  char v35;
  char *v36;
  char v37;
  _BYTE *v38;
  unint64_t v39;
  __int128 v40;
  uint64_t v41;
  char *v42;
  int v43;
  void *v44[2];
  uint64_t v45;
  void *v46[2];
  uint64_t v47;
  void *__p[2];
  uint64_t v49;
  void *v50[2];
  uint64_t v51;

  v3 = a3;
  v4 = (uint64_t)a2;
  if (!*(_BYTE *)(a1 + 170))
  {
    v16 = a2[23];
    if (a2[23] < 0)
    {
      if (*((_QWORD *)a2 + 1) != 1)
        goto LABEL_74;
    }
    else if (v16 != 1)
    {
LABEL_74:
      sub_20E9A16B8();
    }
    if (*(char *)(a3 + 23) < 0)
    {
      if (*(_QWORD *)(a3 + 8) != 1)
        goto LABEL_74;
    }
    else if (*(_BYTE *)(a3 + 23) != 1)
    {
      goto LABEL_74;
    }
    if (!*(_BYTE *)(a1 + 169))
    {
LABEL_67:
      *(_OWORD *)__p = *(_OWORD *)v4;
      v49 = *(_QWORD *)(v4 + 16);
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      *(_QWORD *)v4 = 0;
      *(_OWORD *)v50 = *(_OWORD *)v3;
      v51 = *(_QWORD *)(v3 + 16);
      *(_QWORD *)(v3 + 8) = 0;
      *(_QWORD *)(v3 + 16) = 0;
      *(_QWORD *)v3 = 0;
      v39 = *(_QWORD *)(a1 + 96);
      if (v39 < *(_QWORD *)(a1 + 104))
      {
        v40 = *(_OWORD *)__p;
        *(_QWORD *)(v39 + 16) = v49;
        *(_OWORD *)v39 = v40;
        __p[1] = 0;
        v49 = 0;
        __p[0] = 0;
        v41 = v51;
        *(_OWORD *)(v39 + 24) = *(_OWORD *)v50;
        *(_QWORD *)(v39 + 40) = v41;
        v50[1] = 0;
        v51 = 0;
        v50[0] = 0;
        *(_QWORD *)(a1 + 96) = v39 + 48;
        if (SHIBYTE(v49) < 0)
          goto LABEL_69;
        return;
      }
      v42 = sub_20E9A1704((void **)(a1 + 88), (uint64_t)__p);
      v43 = SHIBYTE(v51);
      *(_QWORD *)(a1 + 96) = v42;
      if ((v43 & 0x80000000) == 0)
      {
        if (SHIBYTE(v49) < 0)
          goto LABEL_69;
        return;
      }
      operator delete(v50[0]);
      if ((SHIBYTE(v49) & 0x80000000) == 0)
        return;
LABEL_69:
      operator delete(__p[0]);
      return;
    }
    v34 = a2;
    if ((v16 & 0x80) != 0)
      v34 = *(char **)a2;
    v35 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *v34);
    if (*(char *)(v4 + 23) < 0)
    {
      **(_BYTE **)v4 = v35;
      v36 = (char *)v3;
      if ((*(char *)(v3 + 23) & 0x80000000) == 0)
        goto LABEL_64;
    }
    else
    {
      *(_BYTE *)v4 = v35;
      v36 = (char *)v3;
      if ((*(char *)(v3 + 23) & 0x80000000) == 0)
      {
LABEL_64:
        v37 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *v36);
        v38 = (_BYTE *)v3;
        if (*(char *)(v3 + 23) < 0)
          v38 = *(_BYTE **)v3;
        *v38 = v37;
        goto LABEL_67;
      }
    }
    v36 = *(char **)v3;
    goto LABEL_64;
  }
  if (*(_BYTE *)(a1 + 169))
  {
    for (i = 0; ; ++i)
    {
      v7 = *(unsigned __int8 *)(v4 + 23);
      if (*(char *)(v4 + 23) < 0)
      {
        if (i >= *(_QWORD *)(v4 + 8))
        {
LABEL_13:
          for (j = 0; ; ++j)
          {
            v12 = *(unsigned __int8 *)(v3 + 23);
            if (*(char *)(v3 + 23) < 0)
            {
              if (j >= *(_QWORD *)(v3 + 8))
                goto LABEL_44;
            }
            else if (j >= v12)
            {
              goto LABEL_44;
            }
            v13 = v3;
            if ((v12 & 0x80) != 0)
              v13 = *(_QWORD *)v3;
            v14 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *(char *)(v13 + j));
            v15 = v3;
            if (*(char *)(v3 + 23) < 0)
              v15 = *(_QWORD *)v3;
            *(_BYTE *)(v15 + j) = v14;
          }
        }
      }
      else if (i >= v7)
      {
        goto LABEL_13;
      }
      v8 = v4;
      if ((v7 & 0x80) != 0)
        v8 = *(_QWORD *)v4;
      v9 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *(char *)(v8 + i));
      v10 = v4;
      if (*(char *)(v4 + 23) < 0)
        v10 = *(_QWORD *)v4;
      *(_BYTE *)(v10 + i) = v9;
    }
  }
  for (k = 0; ; ++k)
  {
    v19 = a2[23];
    if (a2[23] < 0)
      break;
    if (k >= v19)
      goto LABEL_35;
LABEL_33:
    v18 = a2;
    if ((v19 & 0x80) != 0)
    {
      v18 = *(char **)a2;
      v20 = *(char **)a2;
    }
    else
    {
      v20 = a2;
    }
    v20[k] = v18[k];
  }
  if (k < *((_QWORD *)a2 + 1))
    goto LABEL_33;
LABEL_35:
  for (m = 0; ; ++m)
  {
    v23 = *(unsigned __int8 *)(a3 + 23);
    if (*(char *)(a3 + 23) < 0)
      break;
    if (m >= v23)
      goto LABEL_44;
LABEL_42:
    v22 = a3;
    if ((v23 & 0x80) != 0)
    {
      v22 = *(_QWORD *)a3;
      v24 = *(_QWORD *)a3;
    }
    else
    {
      v24 = a3;
    }
    *(_BYTE *)(v24 + m) = *(_BYTE *)(v22 + m);
  }
  if (m < *(_QWORD *)(a3 + 8))
    goto LABEL_42;
LABEL_44:
  if (*(char *)(v4 + 23) < 0)
  {
    v26 = v4;
    v4 = *(_QWORD *)v4;
    v25 = *(_QWORD *)(v26 + 8);
  }
  else
  {
    v25 = *(unsigned __int8 *)(v4 + 23);
  }
  sub_20E9A1528(a1 + 16, v4, (char *)(v4 + v25));
  if (*(char *)(v3 + 23) < 0)
  {
    v28 = v3;
    v3 = *(_QWORD *)v3;
    v27 = *(_QWORD *)(v28 + 8);
  }
  else
  {
    v27 = *(unsigned __int8 *)(v3 + 23);
  }
  sub_20E9A1528(a1 + 16, v3, (char *)(v3 + v27));
  *(_OWORD *)__p = *(_OWORD *)v46;
  v49 = v47;
  *(_OWORD *)v50 = *(_OWORD *)v44;
  v51 = v45;
  v29 = *(_QWORD *)(a1 + 96);
  if (v29 >= *(_QWORD *)(a1 + 104))
  {
    v32 = sub_20E9A1704((void **)(a1 + 88), (uint64_t)__p);
    v33 = SHIBYTE(v51);
    *(_QWORD *)(a1 + 96) = v32;
    if (v33 < 0)
    {
      operator delete(v50[0]);
      if ((SHIBYTE(v49) & 0x80000000) == 0)
        return;
    }
    else if ((SHIBYTE(v49) & 0x80000000) == 0)
    {
      return;
    }
    goto LABEL_69;
  }
  v30 = *(_OWORD *)__p;
  *(_QWORD *)(v29 + 16) = v49;
  *(_OWORD *)v29 = v30;
  __p[1] = 0;
  v49 = 0;
  __p[0] = 0;
  v31 = v51;
  *(_OWORD *)(v29 + 24) = *(_OWORD *)v50;
  *(_QWORD *)(v29 + 40) = v31;
  v50[1] = 0;
  v51 = 0;
  v50[0] = 0;
  *(_QWORD *)(a1 + 96) = v29 + 48;
  if (SHIBYTE(v49) < 0)
    goto LABEL_69;
}

void sub_20E9A0630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20E8ACFE0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E9A0644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_20E8ACFE0((uint64_t)&a21);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(a1);
}

void sub_20E9A0680(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v5;
  __int16 v6;
  unint64_t v7;
  char *v8;
  char **v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _WORD *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  _OWORD *v34;
  char *v35;
  unint64_t v36;
  __int128 v37;
  __int16 v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  _OWORD *v51;
  char *v52;
  unint64_t v53;
  __int128 v54;
  __int16 v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  _OWORD *v60;
  char *v61;
  unint64_t v62;
  __int128 v63;
  __int16 v64;

  if (*(_BYTE *)(a1 + 169))
  {
    v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
    v6 = v5 | (unsigned __int16)((*(unsigned __int16 (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a3) << 8);
    v8 = *(char **)(a1 + 120);
    v7 = *(_QWORD *)(a1 + 128);
    if ((unint64_t)v8 >= v7)
    {
      v9 = (char **)(a1 + 112);
      v10 = *(char **)(a1 + 112);
      v11 = v8 - v10;
      if (v8 - v10 > -3)
      {
        v12 = v11 >> 1;
        v13 = v7 - (_QWORD)v10;
        if (v13 <= (v11 >> 1) + 1)
          v14 = v12 + 1;
        else
          v14 = v13;
        if (v13 >= 0x7FFFFFFFFFFFFFFELL)
          v15 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (!v15)
        {
          v16 = 0;
          v17 = (_WORD *)(2 * v12);
          v18 = 0;
          *(_WORD *)(2 * v12) = v6;
          v19 = 2 * v12 + 2;
          v20 = (char *)(v8 - v10);
          if (v8 == v10)
            goto LABEL_64;
LABEL_30:
          v30 = (unint64_t)(v20 - 2);
          if (v30 < 0x1E)
            goto LABEL_71;
          if ((unint64_t)(v8 - &v16[v11 & 0xFFFFFFFFFFFFFFFELL]) < 0x20)
            goto LABEL_71;
          v31 = (v30 >> 1) + 1;
          v32 = 2 * (v31 & 0xFFFFFFFFFFFFFFF0);
          v33 = &v8[-v32];
          v17 = (_WORD *)((char *)v17 - v32);
          v34 = &v16[2 * v12 - 16];
          v35 = v8 - 16;
          v36 = v31 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v37 = *(_OWORD *)v35;
            *(v34 - 1) = *((_OWORD *)v35 - 1);
            *v34 = v37;
            v34 -= 2;
            v35 -= 32;
            v36 -= 16;
          }
          while (v36);
          v8 = v33;
          if (v31 != (v31 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_71:
            do
            {
              v38 = *((_WORD *)v8 - 1);
              v8 -= 2;
              *--v17 = v38;
            }
            while (v8 != v10);
          }
LABEL_63:
          v8 = *v9;
          goto LABEL_64;
        }
        if ((v15 & 0x8000000000000000) == 0)
        {
          v16 = operator new(2 * v15);
          v17 = &v16[2 * v12];
          v18 = &v16[2 * v15];
          *v17 = v6;
          v19 = (uint64_t)(v17 + 1);
          v20 = (char *)(v8 - v10);
          if (v8 == v10)
            goto LABEL_64;
          goto LABEL_30;
        }
LABEL_68:
        sub_20E877A38();
      }
LABEL_67:
      sub_20E867F44();
    }
LABEL_28:
    *(_WORD *)v8 = v6;
    v19 = (uint64_t)(v8 + 2);
    goto LABEL_66;
  }
  v9 = (char **)(a1 + 112);
  v6 = a2 | (unsigned __int16)((_WORD)a3 << 8);
  v8 = *(char **)(a1 + 120);
  v21 = *(_QWORD *)(a1 + 128);
  if (*(_BYTE *)(a1 + 170))
  {
    if ((unint64_t)v8 < v21)
      goto LABEL_28;
    v22 = *v9;
    v23 = v8 - *v9;
    if (v23 <= -3)
      goto LABEL_67;
    v24 = v23 >> 1;
    v25 = v21 - (_QWORD)v22;
    if (v25 <= (v23 >> 1) + 1)
      v26 = v24 + 1;
    else
      v26 = v25;
    if (v25 >= 0x7FFFFFFFFFFFFFFELL)
      v27 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v27 = v26;
    if (v27)
    {
      if (v27 < 0)
        goto LABEL_68;
      v28 = operator new(2 * v27);
      v17 = &v28[2 * v24];
      v18 = &v28[2 * v27];
      *v17 = v6;
      v19 = (uint64_t)(v17 + 1);
      v29 = (char *)(v8 - v22);
      if (v8 == v22)
        goto LABEL_64;
    }
    else
    {
      v28 = 0;
      v17 = (_WORD *)(2 * v24);
      v18 = 0;
      *(_WORD *)(2 * v24) = v6;
      v19 = 2 * v24 + 2;
      v29 = (char *)(v8 - v22);
      if (v8 == v22)
        goto LABEL_64;
    }
    v47 = (unint64_t)(v29 - 2);
    if (v47 < 0x1E)
      goto LABEL_72;
    if ((unint64_t)(v8 - &v28[v23 & 0xFFFFFFFFFFFFFFFELL]) < 0x20)
      goto LABEL_72;
    v48 = (v47 >> 1) + 1;
    v49 = 2 * (v48 & 0xFFFFFFFFFFFFFFF0);
    v50 = &v8[-v49];
    v17 = (_WORD *)((char *)v17 - v49);
    v51 = &v28[2 * v24 - 16];
    v52 = v8 - 16;
    v53 = v48 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v54 = *(_OWORD *)v52;
      *(v51 - 1) = *((_OWORD *)v52 - 1);
      *v51 = v54;
      v51 -= 2;
      v52 -= 32;
      v53 -= 16;
    }
    while (v53);
    v8 = v50;
    if (v48 != (v48 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_72:
      do
      {
        v55 = *((_WORD *)v8 - 1);
        v8 -= 2;
        *--v17 = v55;
      }
      while (v8 != v22);
    }
    goto LABEL_63;
  }
  if ((unint64_t)v8 < v21)
    goto LABEL_28;
  v39 = *v9;
  v40 = v8 - *v9;
  if (v40 <= -3)
    goto LABEL_67;
  v41 = v40 >> 1;
  v42 = v21 - (_QWORD)v39;
  if (v42 <= (v40 >> 1) + 1)
    v43 = v41 + 1;
  else
    v43 = v42;
  if (v42 >= 0x7FFFFFFFFFFFFFFELL)
    v44 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v44 = v43;
  if (!v44)
  {
    v45 = 0;
    v17 = (_WORD *)(2 * v41);
    v18 = 0;
    *(_WORD *)(2 * v41) = v6;
    v19 = 2 * v41 + 2;
    v46 = (char *)(v8 - v39);
    if (v8 == v39)
      goto LABEL_64;
    goto LABEL_57;
  }
  if (v44 < 0)
    goto LABEL_68;
  v45 = operator new(2 * v44);
  v17 = &v45[2 * v41];
  v18 = &v45[2 * v44];
  *v17 = v6;
  v19 = (uint64_t)(v17 + 1);
  v46 = (char *)(v8 - v39);
  if (v8 != v39)
  {
LABEL_57:
    v56 = (unint64_t)(v46 - 2);
    if (v56 < 0x1E)
      goto LABEL_73;
    if ((unint64_t)(v8 - &v45[v40 & 0xFFFFFFFFFFFFFFFELL]) < 0x20)
      goto LABEL_73;
    v57 = (v56 >> 1) + 1;
    v58 = 2 * (v57 & 0xFFFFFFFFFFFFFFF0);
    v59 = &v8[-v58];
    v17 = (_WORD *)((char *)v17 - v58);
    v60 = &v45[2 * v41 - 16];
    v61 = v8 - 16;
    v62 = v57 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v63 = *(_OWORD *)v61;
      *(v60 - 1) = *((_OWORD *)v61 - 1);
      *v60 = v63;
      v60 -= 2;
      v61 -= 32;
      v62 -= 16;
    }
    while (v62);
    v8 = v59;
    if (v57 != (v57 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_73:
      do
      {
        v64 = *((_WORD *)v8 - 1);
        v8 -= 2;
        *--v17 = v64;
      }
      while (v8 != v39);
    }
    goto LABEL_63;
  }
LABEL_64:
  *(_QWORD *)(a1 + 112) = v17;
  *(_QWORD *)(a1 + 120) = v19;
  *(_QWORD *)(a1 + 128) = v18;
  if (v8)
    operator delete(v8);
LABEL_66:
  *(_QWORD *)(a1 + 120) = v19;
}

void sub_20E9A0A48()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x212BC5A14](exception, 1);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_20E9A0A80(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20E9A0A94(_BYTE *__src@<X1>, uint64_t a2@<X0>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  size_t v5;
  __int128 *p_dst;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  int v17;
  uint64_t v18;
  __int128 *v19;
  size_t v20;
  std::string v21;
  __int128 __dst;
  int64_t v23;

  v5 = a3 - __src;
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  if (v5 <= 0x16)
  {
    HIBYTE(v23) = (_BYTE)a3 - (_BYTE)__src;
    p_dst = &__dst;
    if (__src == a3)
      goto LABEL_9;
LABEL_8:
    memcpy(p_dst, __src, v5);
    p_dst = (__int128 *)((char *)p_dst + v5);
    goto LABEL_9;
  }
  v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17)
    v10 = v5 | 7;
  v11 = v10 + 1;
  p_dst = (__int128 *)operator new(v10 + 1);
  *((_QWORD *)&__dst + 1) = v5;
  v23 = v11 | 0x8000000000000000;
  *(_QWORD *)&__dst = p_dst;
  if (__src != a3)
    goto LABEL_8;
LABEL_9:
  *(_BYTE *)p_dst = 0;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  if (SHIBYTE(v23) < 0)
  {
    if (!*((_QWORD *)&__dst + 1))
      goto LABEL_17;
    v12 = (const char *)__dst;
  }
  else
  {
    if (!HIBYTE(v23))
      return;
    v12 = (const char *)&__dst;
  }
  std::__get_collation_name(&v21, v12);
  *(_OWORD *)a4 = *(_OWORD *)&v21.__r_.__value_.__l.__data_;
  v13 = v21.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a4 + 16) = *((_QWORD *)&v21.__r_.__value_.__l + 2);
  v14 = HIBYTE(v13);
  if ((v14 & 0x80u) != 0)
    v14 = *(_QWORD *)(a4 + 8);
  if (v14)
    goto LABEL_17;
  if ((SHIBYTE(v23) & 0x80000000) == 0)
  {
    v15 = HIBYTE(v23);
    if (HIBYTE(v23) >= 3u)
      return;
    v16 = (char *)&__dst;
    goto LABEL_25;
  }
  v15 = *((_QWORD *)&__dst + 1);
  if (*((_QWORD *)&__dst + 1) < 3uLL)
  {
    v16 = (char *)__dst;
LABEL_25:
    (*(void (**)(std::string *__return_ptr, _QWORD, char *, char *))(**(_QWORD **)(a2 + 16) + 32))(&v21, *(_QWORD *)(a2 + 16), v16, &v16[v15]);
    if (*(char *)(a4 + 23) < 0)
      operator delete(*(void **)a4);
    *(std::string *)a4 = v21;
    if (*(char *)(a4 + 23) < 0)
    {
      v18 = *(_QWORD *)(a4 + 8);
      if (v18 == 1 || v18 == 12)
      {
        if (&__dst != (__int128 *)a4)
        {
          if (v23 >= 0)
            v19 = &__dst;
          else
            v19 = (__int128 *)__dst;
          if (v23 >= 0)
            v20 = HIBYTE(v23);
          else
            v20 = *((_QWORD *)&__dst + 1);
          sub_20E867CBC((void **)a4, v19, v20);
        }
      }
      else
      {
        **(_BYTE **)a4 = 0;
        *(_QWORD *)(a4 + 8) = 0;
      }
    }
    else
    {
      v17 = *(unsigned __int8 *)(a4 + 23);
      if (v17 == 1 || v17 == 12)
      {
        if (&__dst != (__int128 *)a4)
        {
          if (SHIBYTE(v23) < 0)
          {
            sub_20E867BF8((_QWORD *)a4, (void *)__dst, *((size_t *)&__dst + 1));
          }
          else
          {
            *(_OWORD *)a4 = __dst;
            *(_QWORD *)(a4 + 16) = v23;
          }
        }
      }
      else
      {
        *(_BYTE *)a4 = 0;
        *(_BYTE *)(a4 + 23) = 0;
      }
    }
  }
LABEL_17:
  if (SHIBYTE(v23) < 0)
    operator delete((void *)__dst);
}

void sub_20E9A0CE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 23) < 0)
  {
    operator delete(*(void **)v17);
    if ((a17 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a17 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20E9A0D28(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v5;
  _OWORD *p_p;
  _BYTE *v10;
  char *v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  int v22;
  _BYTE *v23;
  void *__p;
  unint64_t v25;
  int64_t v26;

  v5 = (unint64_t)&a3[-a2];
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  if (v5 > 0x16)
  {
    v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v16 = v5 | 7;
    v17 = v16 + 1;
    p_p = operator new(v16 + 1);
    v25 = v5;
    v26 = v17 | 0x8000000000000000;
    __p = p_p;
    if ((char *)a2 != a3)
      goto LABEL_4;
LABEL_13:
    v10 = p_p;
    goto LABEL_16;
  }
  HIBYTE(v26) = (_BYTE)a3 - a2;
  p_p = &__p;
  if ((char *)a2 == a3)
    goto LABEL_13;
LABEL_4:
  if (v5 < 0x20 || (unint64_t)p_p - a2 < 0x20)
  {
    v10 = p_p;
    v11 = (char *)a2;
  }
  else
  {
    v10 = (char *)p_p + (v5 & 0xFFFFFFFFFFFFFFE0);
    v11 = (char *)(a2 + (v5 & 0xFFFFFFFFFFFFFFE0));
    v12 = (__int128 *)(a2 + 16);
    v13 = p_p + 1;
    v14 = v5 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v15 = *v12;
      *(v13 - 1) = *(v12 - 1);
      *v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 32;
    }
    while (v14);
    if (v5 == (v5 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_16;
  }
  do
  {
    v18 = *v11++;
    *v10++ = v18;
  }
  while (v11 != a3);
LABEL_16:
  *v10 = 0;
  v19 = HIBYTE(v26);
  if (v26 >= 0)
    v20 = (char *)&__p;
  else
    v20 = (char *)__p;
  if (v26 < 0)
    v19 = v25;
  (*(void (**)(_QWORD, char *, char *))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v20, &v20[v19]);
  v21 = *(unsigned __int8 *)(a4 + 23);
  v22 = (char)v21;
  if ((v21 & 0x80u) != 0)
    v21 = *(_QWORD *)(a4 + 8);
  if (v21 == 1)
    goto LABEL_32;
  if (v21 != 12)
  {
    if (v22 < 0)
    {
      **(_BYTE **)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      if ((SHIBYTE(v26) & 0x80000000) == 0)
        return;
LABEL_35:
      operator delete(__p);
      return;
    }
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 23) = 0;
LABEL_32:
    if ((SHIBYTE(v26) & 0x80000000) == 0)
      return;
    goto LABEL_35;
  }
  if (v22 >= 0)
    v23 = (_BYTE *)a4;
  else
    v23 = *(_BYTE **)a4;
  v23[11] = v23[3];
  if (SHIBYTE(v26) < 0)
    goto LABEL_35;
}

void sub_20E9A0F00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20E9A0F1C()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x212BC5A14](exception, 2);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_20E9A0F54(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9A0F68(uint64_t a1, _BYTE *__src, _BYTE *a3, BOOL a4)
{
  size_t v4;
  void **p_dst;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  void **v13;
  const char *v14;
  uint64_t classname;
  void **__dst;
  size_t v18;
  int64_t v19;

  v4 = a3 - __src;
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  if (v4 <= 0x16)
  {
    HIBYTE(v19) = (_BYTE)a3 - (_BYTE)__src;
    p_dst = (void **)&__dst;
    if (__src == a3)
      goto LABEL_9;
LABEL_8:
    memcpy(p_dst, __src, v4);
    p_dst = (void **)((char *)p_dst + v4);
    goto LABEL_9;
  }
  v10 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v4 | 7) != 0x17)
    v10 = v4 | 7;
  v11 = v10 + 1;
  p_dst = (void **)operator new(v10 + 1);
  v18 = v4;
  v19 = v11 | 0x8000000000000000;
  __dst = p_dst;
  if (__src != a3)
    goto LABEL_8;
LABEL_9:
  *(_BYTE *)p_dst = 0;
  v12 = HIBYTE(v19);
  if (v19 >= 0)
    v13 = (void **)&__dst;
  else
    v13 = __dst;
  if (v19 < 0)
    v12 = v18;
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), v13, (char *)v13 + v12);
  if (v19 >= 0)
    v14 = (const char *)&__dst;
  else
    v14 = (const char *)__dst;
  classname = std::__get_classname(v14, a4);
  if (SHIBYTE(v19) < 0)
    operator delete(__dst);
  return classname;
}

void sub_20E9A1094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20E9A10B0(uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  _BYTE *v5;
  _QWORD *v6;
  _BYTE *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  unint64_t v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  unint64_t v28;
  unint64_t v29;
  __int128 *v30;
  _OWORD *v31;
  unint64_t v32;
  __int128 v33;
  char *v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  __int128 *v38;
  _OWORD *v39;
  unint64_t v40;
  __int128 v41;
  char *v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  __int128 *v46;
  _OWORD *v47;
  unint64_t v48;
  __int128 v49;
  char *v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  char v55;
  char *v56;
  char v57;
  char *v58;
  char v59;

  v2 = a2;
  if (!*(_BYTE *)(a1 + 169))
  {
    v6 = (_QWORD *)(a1 + 64);
    v5 = *(_BYTE **)(a1 + 72);
    v16 = *(_QWORD *)(a1 + 80);
    if (*(_BYTE *)(a1 + 170))
    {
      if ((unint64_t)v5 < v16)
        goto LABEL_24;
      v17 = (_BYTE *)*v6;
      v18 = (unint64_t)&v5[-*v6];
      v19 = v18 + 1;
      if ((uint64_t)(v18 + 1) >= 0)
      {
        v20 = v16 - (_QWORD)v17;
        if (2 * v20 > v19)
          v19 = 2 * v20;
        if (v20 >= 0x3FFFFFFFFFFFFFFFLL)
          v21 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (v21)
        {
          v12 = operator new(v21);
          v13 = &v12[v18];
          v14 = &v12[v21];
          v12[v18] = v2;
          v15 = (uint64_t)&v12[v18 + 1];
          if (v5 == v17)
            goto LABEL_49;
        }
        else
        {
          v12 = 0;
          v13 = &v5[-*v6];
          v14 = 0;
          *(_BYTE *)v18 = a2;
          v15 = v18 + 1;
          if (v5 == v17)
            goto LABEL_49;
        }
        if (v18 >= 8 && (unint64_t)(v17 - v12) >= 0x20)
        {
          if (v18 >= 0x20)
          {
            v28 = v18 & 0xFFFFFFFFFFFFFFE0;
            v38 = (__int128 *)(v5 - 16);
            v39 = &v12[v5 - 16 - v17];
            v40 = v18 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v41 = *v38;
              *(v39 - 1) = *(v38 - 1);
              *v39 = v41;
              v39 -= 2;
              v38 -= 2;
              v40 -= 32;
            }
            while (v40);
            if (v18 == v28)
              goto LABEL_86;
            if ((v18 & 0x18) == 0)
            {
              v13 -= v28;
              v5 -= v28;
              goto LABEL_80;
            }
          }
          else
          {
            v28 = 0;
          }
          v13 -= v18 & 0xFFFFFFFFFFFFFFF8;
          v42 = &v5[-v28 - 8];
          v43 = &v12[v42 - v17];
          v44 = v28 - (v18 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v45 = *(_QWORD *)v42;
            v42 -= 8;
            *v43-- = v45;
            v44 += 8;
          }
          while (v44);
          v5 -= v18 & 0xFFFFFFFFFFFFFFF8;
          if (v18 == (v18 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_86;
        }
LABEL_80:
        v56 = v13 - 1;
        do
        {
          v57 = *--v5;
          *v56-- = v57;
        }
        while (v5 != v17);
        goto LABEL_86;
      }
LABEL_89:
      sub_20E867F44();
    }
    if ((unint64_t)v5 < v16)
      goto LABEL_24;
    v23 = (_BYTE *)*v6;
    v24 = (unint64_t)&v5[-*v6];
    v25 = v24 + 1;
    if ((uint64_t)(v24 + 1) < 0)
      goto LABEL_89;
    v26 = v16 - (_QWORD)v23;
    if (2 * v26 > v25)
      v25 = 2 * v26;
    if (v26 >= 0x3FFFFFFFFFFFFFFFLL)
      v27 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v27 = v25;
    if (v27)
    {
      v12 = operator new(v27);
      v13 = &v12[v24];
      v14 = &v12[v27];
      v12[v24] = v2;
      v15 = (uint64_t)&v12[v24 + 1];
      if (v5 == v23)
      {
LABEL_49:
        *(_QWORD *)(a1 + 64) = v13;
        *(_QWORD *)(a1 + 72) = v15;
        *(_QWORD *)(a1 + 80) = v14;
        if (!v5)
          goto LABEL_88;
        goto LABEL_87;
      }
    }
    else
    {
      v12 = 0;
      v13 = &v5[-*v6];
      v14 = 0;
      *(_BYTE *)v24 = a2;
      v15 = v24 + 1;
      if (v5 == v23)
        goto LABEL_49;
    }
    if (v24 >= 8 && (unint64_t)(v23 - v12) >= 0x20)
    {
      if (v24 >= 0x20)
      {
        v29 = v24 & 0xFFFFFFFFFFFFFFE0;
        v46 = (__int128 *)(v5 - 16);
        v47 = &v12[v5 - 16 - v23];
        v48 = v24 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v49 = *v46;
          *(v47 - 1) = *(v46 - 1);
          *v47 = v49;
          v47 -= 2;
          v46 -= 2;
          v48 -= 32;
        }
        while (v48);
        if (v24 == v29)
          goto LABEL_86;
        if ((v24 & 0x18) == 0)
        {
          v13 -= v29;
          v5 -= v29;
          goto LABEL_84;
        }
      }
      else
      {
        v29 = 0;
      }
      v13 -= v24 & 0xFFFFFFFFFFFFFFF8;
      v50 = &v5[-v29 - 8];
      v51 = &v12[v50 - v23];
      v52 = v29 - (v24 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v53 = *(_QWORD *)v50;
        v50 -= 8;
        *v51-- = v53;
        v52 += 8;
      }
      while (v52);
      v5 -= v24 & 0xFFFFFFFFFFFFFFF8;
      if (v24 == (v24 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_86;
    }
LABEL_84:
    v58 = v13 - 1;
    do
    {
      v59 = *--v5;
      *v58-- = v59;
    }
    while (v5 != v23);
    goto LABEL_86;
  }
  v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
  v5 = *(_BYTE **)(a1 + 72);
  v4 = *(_QWORD *)(a1 + 80);
  if ((unint64_t)v5 < v4)
  {
LABEL_24:
    *v5 = v2;
    v15 = (uint64_t)(v5 + 1);
    goto LABEL_88;
  }
  v6 = (_QWORD *)(a1 + 64);
  v7 = *(_BYTE **)(a1 + 64);
  v8 = v5 - v7;
  v9 = v5 - v7 + 1;
  if (v9 < 0)
    goto LABEL_89;
  v10 = v4 - (_QWORD)v7;
  if (2 * v10 > v9)
    v9 = 2 * v10;
  if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
    v11 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v11 = v9;
  if (v11)
  {
    v12 = operator new(v11);
    v13 = &v12[v8];
    v14 = &v12[v11];
    v12[v8] = v2;
    v15 = (uint64_t)&v12[v8 + 1];
    if (v5 == v7)
      goto LABEL_49;
  }
  else
  {
    v12 = 0;
    v13 = (char *)(v5 - v7);
    v14 = 0;
    *(_BYTE *)v8 = v2;
    v15 = v8 + 1;
    if (v5 == v7)
      goto LABEL_49;
  }
  if (v8 < 8 || (unint64_t)(v7 - v12) < 0x20)
    goto LABEL_76;
  if (v8 < 0x20)
  {
    v22 = 0;
    goto LABEL_55;
  }
  v22 = v8 & 0xFFFFFFFFFFFFFFE0;
  v30 = (__int128 *)(v5 - 16);
  v31 = &v12[v5 - 16 - v7];
  v32 = v8 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v33 = *v30;
    *(v31 - 1) = *(v30 - 1);
    *v31 = v33;
    v31 -= 2;
    v30 -= 2;
    v32 -= 32;
  }
  while (v32);
  if (v8 != v22)
  {
    if ((v8 & 0x18) == 0)
    {
      v13 -= v22;
      v5 -= v22;
      goto LABEL_76;
    }
LABEL_55:
    v13 -= v8 & 0xFFFFFFFFFFFFFFF8;
    v34 = &v5[-v22 - 8];
    v35 = &v12[v34 - v7];
    v36 = v22 - (v8 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v37 = *(_QWORD *)v34;
      v34 -= 8;
      *v35-- = v37;
      v36 += 8;
    }
    while (v36);
    v5 -= v8 & 0xFFFFFFFFFFFFFFF8;
    if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_86;
LABEL_76:
    v54 = v13 - 1;
    do
    {
      v55 = *--v5;
      *v54-- = v55;
    }
    while (v5 != v7);
  }
LABEL_86:
  v5 = (_BYTE *)*v6;
  *(_QWORD *)(a1 + 64) = v12;
  *(_QWORD *)(a1 + 72) = v15;
  *(_QWORD *)(a1 + 80) = v14;
  if (v5)
LABEL_87:
    operator delete(v5);
LABEL_88:
  *(_QWORD *)(a1 + 72) = v15;
}

void sub_20E9A1528(uint64_t a1, uint64_t a2, char *a3)
{
  unint64_t v3;
  _OWORD *p_p;
  _BYTE *v8;
  char *v9;
  __int128 *v10;
  _OWORD *v11;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  char *v18;
  void *__p;
  unint64_t v20;
  int64_t v21;

  v3 = (unint64_t)&a3[-a2];
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  if (v3 > 0x16)
  {
    v14 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v14 = v3 | 7;
    v15 = v14 + 1;
    p_p = operator new(v14 + 1);
    v20 = v3;
    v21 = v15 | 0x8000000000000000;
    __p = p_p;
    if ((char *)a2 != a3)
      goto LABEL_4;
LABEL_13:
    v8 = p_p;
    goto LABEL_16;
  }
  HIBYTE(v21) = (_BYTE)a3 - a2;
  p_p = &__p;
  if ((char *)a2 == a3)
    goto LABEL_13;
LABEL_4:
  if (v3 < 0x20 || (unint64_t)p_p - a2 < 0x20)
  {
    v8 = p_p;
    v9 = (char *)a2;
  }
  else
  {
    v8 = (char *)p_p + (v3 & 0xFFFFFFFFFFFFFFE0);
    v9 = (char *)(a2 + (v3 & 0xFFFFFFFFFFFFFFE0));
    v10 = (__int128 *)(a2 + 16);
    v11 = p_p + 1;
    v12 = v3 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v13 = *v10;
      *(v11 - 1) = *(v10 - 1);
      *v11 = v13;
      v10 += 2;
      v11 += 2;
      v12 -= 32;
    }
    while (v12);
    if (v3 == (v3 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_16;
  }
  do
  {
    v16 = *v9++;
    *v8++ = v16;
  }
  while (v9 != a3);
LABEL_16:
  *v8 = 0;
  v17 = HIBYTE(v21);
  if (v21 >= 0)
    v18 = (char *)&__p;
  else
    v18 = (char *)__p;
  if (v21 < 0)
    v17 = v20;
  (*(void (**)(_QWORD, char *, char *))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v18, &v18[v17]);
  if (SHIBYTE(v21) < 0)
    operator delete(__p);
}

void sub_20E9A169C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20E9A16B8()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x212BC5A14](exception, 9);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_20E9A16F0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *sub_20E9A1704(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;
  void **v12;
  void **v13;
  __int128 v14;
  __int128 v15;
  void **v16;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555)
    sub_20E867F44();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v6 = 0x555555555555555;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x555555555555555)
      sub_20E877A38();
    v7 = (char *)operator new(48 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[48 * v3];
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  v9 = &v7[48 * v6];
  v10 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)(v8 + 24) = v10;
  *((_QWORD *)v8 + 5) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v11 = v8 + 48;
  v12 = (void **)*a1;
  v13 = (void **)a1[1];
  if (v13 != *a1)
  {
    do
    {
      v14 = *((_OWORD *)v13 - 3);
      *((_QWORD *)v8 - 4) = *(v13 - 4);
      *((_OWORD *)v8 - 3) = v14;
      *(v13 - 5) = 0;
      *(v13 - 4) = 0;
      *(v13 - 6) = 0;
      v15 = *(_OWORD *)(v13 - 3);
      *((_QWORD *)v8 - 1) = *(v13 - 1);
      *(_OWORD *)(v8 - 24) = v15;
      v8 -= 48;
      *(v13 - 2) = 0;
      *(v13 - 1) = 0;
      *(v13 - 3) = 0;
      v13 -= 6;
    }
    while (v13 != v12);
    v13 = (void **)*a1;
    v16 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v11;
    a1[2] = v9;
    while (1)
    {
      if (v16 == v13)
        goto LABEL_22;
      if (*((char *)v16 - 1) < 0)
      {
        operator delete(*(v16 - 3));
        if ((*((char *)v16 - 25) & 0x80000000) == 0)
          goto LABEL_14;
      }
      else if ((*((char *)v16 - 25) & 0x80000000) == 0)
      {
        goto LABEL_14;
      }
      operator delete(*(v16 - 6));
LABEL_14:
      v16 -= 6;
    }
  }
  *a1 = v8;
  a1[1] = v11;
  a1[2] = v9;
LABEL_22:
  if (v13)
    operator delete(v13);
  return v11;
}

_QWORD *sub_20E9A18A0(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24C9B3E48;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20E9A18E4(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_24C9B3E48;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E9A1938(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(*(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *sub_20E9A1968(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24C9B3E48;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20E9A19AC(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_24C9B3E48;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E9A1A00(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_DWORD *)a2 = -994;
  v2 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(_QWORD *)(v2 + 8) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(v2 + 16) = 1;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *sub_20E9A1A38(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _QWORD *result;

  v10 = (_QWORD *)operator new();
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_QWORD *)(v11 + 8);
  *v10 = &unk_24C9B3DD0;
  v10[1] = v12;
  *(_QWORD *)(v11 + 8) = 0;
  v13 = operator new();
  v14 = *(_DWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)v13 = &unk_24C9B4268;
  *(_QWORD *)(v13 + 8) = v15;
  *(_QWORD *)(v13 + 16) = v10;
  *(_QWORD *)(v13 + 24) = a2;
  *(_QWORD *)(v13 + 32) = -1;
  *(_DWORD *)(v13 + 40) = v14;
  *(_DWORD *)(v13 + 44) = a4;
  *(_DWORD *)(v13 + 48) = a5;
  *(_BYTE *)(v13 + 52) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  result = (_QWORD *)operator new();
  *result = &unk_24C9B42F8;
  result[1] = v13;
  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = result;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(v13 + 16);
  *(_QWORD *)(a3 + 8) = v13;
  ++*(_DWORD *)(a1 + 32);
  return result;
}

void sub_20E9A1B4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_20E9A1B68(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E9A1B88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, char a7)
{
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  _QWORD *result;

  v14 = (_QWORD *)operator new();
  v15 = *(_QWORD *)(a1 + 56);
  v16 = *(_QWORD *)(v15 + 8);
  *v14 = &unk_24C9B3DD0;
  v14[1] = v16;
  *(_QWORD *)(v15 + 8) = 0;
  v17 = operator new();
  v18 = *(_DWORD *)(a1 + 32);
  v19 = *(_QWORD *)(a4 + 8);
  *(_QWORD *)v17 = &unk_24C9B4268;
  *(_QWORD *)(v17 + 8) = v19;
  *(_QWORD *)(v17 + 16) = v14;
  *(_QWORD *)(v17 + 24) = a2;
  *(_QWORD *)(v17 + 32) = a3;
  *(_DWORD *)(v17 + 40) = v18;
  *(_DWORD *)(v17 + 44) = a5;
  *(_DWORD *)(v17 + 48) = a6;
  *(_BYTE *)(v17 + 52) = a7;
  *(_QWORD *)(a4 + 8) = 0;
  result = (_QWORD *)operator new();
  *result = &unk_24C9B42F8;
  result[1] = v17;
  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = result;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(v17 + 16);
  *(_QWORD *)(a4 + 8) = v17;
  ++*(_DWORD *)(a1 + 32);
  return result;
}

void sub_20E9A1CA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_20E9A1CC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_20E9A1CE4()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x212BC5A14](exception, 8);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_20E9A1D1C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20E9A1D30()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x212BC5A14](exception, 7);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_20E9A1D68(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E9A1D7C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &unk_24C9B42C8;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = &unk_24C9B3E48;
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void sub_20E9A1DE4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &unk_24C9B42C8;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = &unk_24C9B3E48;
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E9A1E5C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BOOL4 v8;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _BYTE *v35;

  v2 = *(unsigned int *)(result + 40);
  v3 = *(_QWORD *)(a2 + 56);
  v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 != -991)
  {
    *v4 = 0;
    if (!*(_QWORD *)(result + 32))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_28;
    }
    if (*(_QWORD *)(result + 24))
    {
      *(_DWORD *)a2 = -994;
      *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
      *(_QWORD *)(v3 + 16 * v2 + 8) = *(_QWORD *)(a2 + 16);
      v20 = *(_DWORD *)(result + 44);
      v21 = *(_DWORD *)(result + 48);
      if (v20 == v21)
        return result;
      v22 = (v21 - 1);
      v23 = (v20 - 1);
      v24 = *(_QWORD *)(a2 + 24);
      v25 = *(_QWORD *)(a2 + 32);
      v26 = v22 - v23;
      if ((unint64_t)(v22 - v23) >= 2)
      {
        v27 = (v26 & 0xFFFFFFFFFFFFFFFELL) + v23;
        v28 = v25 + 24 * v23 + 24;
        v29 = v26 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          *(_QWORD *)(v28 - 24) = v24;
          *(_QWORD *)(v28 - 16) = v24;
          *(_QWORD *)v28 = v24;
          *(_QWORD *)(v28 + 8) = v24;
          *(_BYTE *)(v28 - 8) = 0;
          *(_BYTE *)(v28 + 16) = 0;
          v28 += 48;
          v29 -= 2;
        }
        while (v29);
        if (v26 == (v26 & 0xFFFFFFFFFFFFFFFELL))
          return result;
      }
      else
      {
        v27 = v23;
      }
      v30 = v22 - v27;
      v31 = (_BYTE *)(v25 + 24 * v27 + 16);
      do
      {
        *((_QWORD *)v31 - 2) = v24;
        *((_QWORD *)v31 - 1) = v24;
        *v31 = 0;
        v31 += 24;
        --v30;
      }
      while (v30);
      return result;
    }
LABEL_26:
    *(_DWORD *)a2 = -992;
    return result;
  }
  v5 = *v4 + 1;
  *v4 = v5;
  v6 = *(_QWORD *)(result + 24);
  v7 = *(_QWORD *)(result + 32);
  v8 = v5 < v7;
  if (v5 < v7 && v5 >= v6)
    v8 = v5 < v7 && *(_QWORD *)(v3 + 16 * v2 + 8) != *(_QWORD *)(a2 + 16);
  if (v8 && v5 >= v6)
    goto LABEL_26;
  *(_DWORD *)a2 = -994;
  if (!v8)
  {
LABEL_28:
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 16);
    return result;
  }
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  *(_QWORD *)(v3 + 16 * v2 + 8) = *(_QWORD *)(a2 + 16);
  v12 = *(_DWORD *)(result + 44);
  v13 = *(_DWORD *)(result + 48);
  if (v12 == v13)
    return result;
  v14 = (v13 - 1);
  v15 = (v12 - 1);
  v16 = *(_QWORD *)(a2 + 24);
  v17 = *(_QWORD *)(a2 + 32);
  v18 = v14 - v15;
  if ((unint64_t)(v14 - v15) < 2)
  {
    v19 = v15;
LABEL_39:
    v34 = v14 - v19;
    v35 = (_BYTE *)(v17 + 24 * v19 + 16);
    do
    {
      *((_QWORD *)v35 - 2) = v16;
      *((_QWORD *)v35 - 1) = v16;
      *v35 = 0;
      v35 += 24;
      --v34;
    }
    while (v34);
    return result;
  }
  v19 = (v18 & 0xFFFFFFFFFFFFFFFELL) + v15;
  v32 = v17 + 24 * v15 + 24;
  v33 = v18 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    *(_QWORD *)(v32 - 24) = v16;
    *(_QWORD *)(v32 - 16) = v16;
    *(_QWORD *)v32 = v16;
    *(_QWORD *)(v32 + 8) = v16;
    *(_BYTE *)(v32 - 8) = 0;
    *(_BYTE *)(v32 + 16) = 0;
    v32 += 48;
    v33 -= 2;
  }
  while (v33);
  if (v18 != (v18 & 0xFFFFFFFFFFFFFFFELL))
    goto LABEL_39;
  return result;
}

uint64_t sub_20E9A2040(uint64_t result, int a2, uint64_t a3)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;

  *(_DWORD *)a3 = -994;
  if (*(unsigned __int8 *)(result + 52) == a2)
  {
    *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + 16);
    return result;
  }
  *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + 8);
  v3 = *(_DWORD *)(result + 44);
  *(_QWORD *)(*(_QWORD *)(a3 + 56) + 16 * *(unsigned int *)(result + 40) + 8) = *(_QWORD *)(a3 + 16);
  v4 = *(_DWORD *)(result + 48);
  if (v3 != v4)
  {
    v5 = (v4 - 1);
    v6 = (v3 - 1);
    v7 = *(_QWORD *)(a3 + 24);
    v8 = *(_QWORD *)(a3 + 32);
    v9 = v5 - v6;
    if ((unint64_t)(v5 - v6) < 2)
    {
      v10 = v6;
LABEL_9:
      v13 = v5 - v10;
      v14 = (_BYTE *)(v8 + 24 * v10 + 16);
      do
      {
        *((_QWORD *)v14 - 2) = v7;
        *((_QWORD *)v14 - 1) = v7;
        *v14 = 0;
        v14 += 24;
        --v13;
      }
      while (v13);
      return result;
    }
    v10 = (v9 & 0xFFFFFFFFFFFFFFFELL) + v6;
    v11 = v8 + 24 * v6 + 24;
    v12 = v9 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      *(_QWORD *)(v11 - 24) = v7;
      *(_QWORD *)(v11 - 16) = v7;
      *(_QWORD *)v11 = v7;
      *(_QWORD *)(v11 + 8) = v7;
      *(_BYTE *)(v11 - 8) = 0;
      *(_BYTE *)(v11 + 16) = 0;
      v11 += 48;
      v12 -= 2;
    }
    while (v12);
    if (v9 != (v9 & 0xFFFFFFFFFFFFFFFELL))
      goto LABEL_9;
  }
  return result;
}

_QWORD *sub_20E9A2108(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &unk_24C9B42C8;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = &unk_24C9B3E48;
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void sub_20E9A2170(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &unk_24C9B42C8;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = &unk_24C9B3E48;
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  JUMPOUT(0x212BC6398);
}

void sub_20E9A21EC()
{
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E9A2200(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *sub_20E9A2214(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &unk_24C9B42C8;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = &unk_24C9B3E48;
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void sub_20E9A227C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &unk_24C9B42C8;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = &unk_24C9B3E48;
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  JUMPOUT(0x212BC6398);
}

void sub_20E9A22F4(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t sub_20E9A2300(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3;

  *(_DWORD *)a3 = -994;
  v3 = 8;
  if (a2)
    v3 = 16;
  *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + v3);
  return result;
}

void sub_20E9A2328()
{
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E9A233C(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void sub_20E9A2350()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x212BC5A14](exception, 15);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_20E9A2388(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *sub_20E9A239C(uint64_t a1, uint64_t a2, char *a3)
{
  char *v6;
  char *v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v15;
  uint64_t v16;
  int v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = sub_20E9A2B74(a1, (char *)a2, a3);
  v7 = v6;
  if (v6 != (char *)a2 || v6 == a3)
    return v7;
  if ((char *)(a2 + 1) == a3)
    return (char *)a2;
  if (*(_BYTE *)a2 != 92)
    return (char *)a2;
  v8 = *(unsigned __int8 *)(a2 + 1);
  if (v8 == 40)
  {
    v9 = (unsigned __int8 *)(a2 + 2);
    if ((*(_BYTE *)(a1 + 24) & 2) != 0)
    {
      v11 = *(_DWORD *)(a1 + 28);
    }
    else
    {
      v10 = operator new();
      v11 = *(_DWORD *)(a1 + 28) + 1;
      *(_DWORD *)(a1 + 28) = v11;
      v12 = *(_QWORD *)(a1 + 56);
      v13 = *(_QWORD *)(v12 + 8);
      *(_QWORD *)v10 = &unk_24C9B41D8;
      *(_QWORD *)(v10 + 8) = v13;
      *(_DWORD *)(v10 + 16) = v11;
      *(_QWORD *)(v12 + 8) = v10;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    do
    {
      if (v9 == (unsigned __int8 *)a3)
        goto LABEL_25;
      v15 = v9;
      v16 = *(_QWORD *)(a1 + 56);
      v17 = *(_DWORD *)(a1 + 28);
      v18 = (unsigned __int8 *)sub_20E9A239C(a1, v15, a3);
      if (v18 == v15)
        break;
      v9 = sub_20E9A25E0(a1, v18, (unsigned __int8 *)a3, v16, v17 + 1, *(_DWORD *)(a1 + 28) + 1);
    }
    while (v9 != v15);
    if (v15 + 1 == (unsigned __int8 *)a3 || *v15 != 92 || v15[1] != 41)
LABEL_25:
      sub_20E99B0A0();
    v7 = (char *)&v15[2 * (v15[1] == 41)];
    if ((*(_BYTE *)(a1 + 24) & 2) == 0)
    {
      v19 = operator new();
      v20 = *(_QWORD *)(a1 + 56);
      v21 = *(_QWORD *)(v20 + 8);
      *(_QWORD *)v19 = &unk_24C9B4220;
      *(_QWORD *)(v19 + 8) = v21;
      *(_DWORD *)(v19 + 16) = v11;
      *(_QWORD *)(v20 + 8) = v19;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      return v7;
    }
    return v7;
  }
  if ((v8 & 0xF8) != 0x30 && (v8 & 0xFE) != 0x38 || (v8 - 49) > 8)
    return (char *)a2;
  if ((v8 - 48) > *(_DWORD *)(a1 + 28))
    sub_20E99D30C();
  sub_20E99D358(a1, v8 - 48);
  return (char *)(a2 + 2);
}

unsigned __int8 *sub_20E9A25E0(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, int a5, int a6)
{
  unsigned __int8 *v6;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  unsigned __int8 *v22;
  int v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  int v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  _QWORD *v34;
  int v35;
  _BOOL4 v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;

  v6 = a2;
  if (a2 != a3)
  {
    v11 = *a2;
    if (v11 == 42)
    {
      v12 = (_QWORD *)operator new();
      v13 = *(_QWORD *)(a1 + 56);
      v14 = *(_QWORD *)(v13 + 8);
      *v12 = &unk_24C9B3DD0;
      v12[1] = v14;
      *(_QWORD *)(v13 + 8) = 0;
      v15 = operator new();
      v16 = *(_DWORD *)(a1 + 32);
      v17 = *(_QWORD *)(a4 + 8);
      *(_QWORD *)(v15 + 16) = v12;
      *(_QWORD *)v15 = &unk_24C9B4268;
      *(_QWORD *)(v15 + 8) = v17;
      *(_OWORD *)(v15 + 24) = xmmword_2102E3FC0;
      *(_DWORD *)(v15 + 40) = v16;
      *(_DWORD *)(v15 + 44) = a5;
      *(_DWORD *)(v15 + 48) = a6;
      *(_BYTE *)(v15 + 52) = 1;
      *(_QWORD *)(a4 + 8) = 0;
      v18 = (_QWORD *)operator new();
      *v18 = &unk_24C9B42F8;
      v18[1] = v15;
      *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v18;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(v15 + 16);
      *(_QWORD *)(a4 + 8) = v15;
      ++*(_DWORD *)(a1 + 32);
      return ++v6;
    }
    if (a2 + 1 != a3 && v11 == 92 && a2[1] == 123)
    {
      v19 = &a2[2 * (a2[1] == 123)];
      if (v19 == a3)
        goto LABEL_44;
      v20 = *v19;
      if ((v20 & 0xF8) != 0x30 && (v20 & 0xFE) != 0x38)
        goto LABEL_44;
      v21 = v20 - 48;
      v22 = v19 + 1;
      if (v19 + 1 == a3)
      {
LABEL_15:
        v22 = a3;
      }
      else
      {
        while (1)
        {
          v23 = *v22;
          if ((v23 & 0xF8) != 0x30 && (v23 & 0xFE) != 0x38)
            break;
          if (v21 >= 214748364)
            goto LABEL_44;
          v21 = v23 + 10 * v21 - 48;
          if (++v22 == a3)
            goto LABEL_15;
        }
      }
      if (v22 == v19)
        goto LABEL_44;
      if (v22 != a3)
      {
        v24 = v22 + 1;
        v25 = *v22;
        if (v25 == 44)
        {
          if (v24 == a3)
            goto LABEL_40;
          v26 = *v24;
          if ((v26 & 0xF8) == 0x30 || (v26 & 0xFE) == 0x38)
          {
            v24 = v22 + 2;
            if (v22 + 2 == a3)
              goto LABEL_40;
            v27 = v26 - 48;
            while (1)
            {
              v26 = *v24;
              if ((v26 & 0xF8) != 0x30 && (v26 & 0xFE) != 0x38)
                break;
              if (v27 >= 214748364)
                goto LABEL_44;
              v27 = v26 + 10 * v27 - 48;
              if (++v24 == a3)
                goto LABEL_40;
            }
          }
          else
          {
            v27 = -1;
          }
          if (v24 != a3 && v24 + 1 != a3 && v26 == 92 && v24[1] == 125)
          {
            v6 = &v24[2 * (v24[1] == 125)];
            if (v27 == -1)
            {
              v42 = (_QWORD *)operator new();
              v43 = *(_QWORD *)(a1 + 56);
              v44 = *(_QWORD *)(v43 + 8);
              *v42 = &unk_24C9B3DD0;
              v42[1] = v44;
              *(_QWORD *)(v43 + 8) = 0;
              v31 = operator new();
              v45 = *(_DWORD *)(a1 + 32);
              v46 = *(_QWORD *)(a4 + 8);
              *(_QWORD *)v31 = &unk_24C9B4268;
              *(_QWORD *)(v31 + 8) = v46;
              *(_QWORD *)(v31 + 16) = v42;
              *(_QWORD *)(v31 + 24) = v21;
              *(_QWORD *)(v31 + 32) = -1;
              *(_DWORD *)(v31 + 40) = v45;
              *(_DWORD *)(v31 + 44) = a5;
              *(_DWORD *)(v31 + 48) = a6;
              *(_BYTE *)(v31 + 52) = 1;
              *(_QWORD *)(a4 + 8) = 0;
              v34 = (_QWORD *)operator new();
              goto LABEL_42;
            }
            if (v27 >= v21)
            {
              v28 = (_QWORD *)operator new();
              v29 = *(_QWORD *)(a1 + 56);
              v30 = *(_QWORD *)(v29 + 8);
              *v28 = &unk_24C9B3DD0;
              v28[1] = v30;
              *(_QWORD *)(v29 + 8) = 0;
              v31 = operator new();
              v32 = *(_DWORD *)(a1 + 32);
              v33 = *(_QWORD *)(a4 + 8);
              *(_QWORD *)v31 = &unk_24C9B4268;
              *(_QWORD *)(v31 + 8) = v33;
              *(_QWORD *)(v31 + 16) = v28;
              *(_QWORD *)(v31 + 24) = v21;
              *(_QWORD *)(v31 + 32) = v27;
              *(_DWORD *)(v31 + 40) = v32;
              *(_DWORD *)(v31 + 44) = a5;
              *(_DWORD *)(v31 + 48) = a6;
              *(_BYTE *)(v31 + 52) = 1;
              *(_QWORD *)(a4 + 8) = 0;
              v34 = (_QWORD *)operator new();
LABEL_42:
              *v34 = &unk_24C9B42F8;
              v34[1] = v31;
              *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v34;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(v31 + 16);
              *(_QWORD *)(a4 + 8) = v31;
              ++*(_DWORD *)(a1 + 32);
              return v6;
            }
LABEL_44:
            sub_20E9A1CE4();
          }
        }
        else if (v24 != a3 && v25 == 92)
        {
          v35 = v22[1];
          v36 = v35 == 125;
          if (v35 == 125)
          {
            v37 = (_QWORD *)operator new();
            v38 = *(_QWORD *)(a1 + 56);
            v39 = *(_QWORD *)(v38 + 8);
            *v37 = &unk_24C9B3DD0;
            v37[1] = v39;
            *(_QWORD *)(v38 + 8) = 0;
            v31 = operator new();
            v40 = *(_DWORD *)(a1 + 32);
            v41 = *(_QWORD *)(a4 + 8);
            *(_QWORD *)v31 = &unk_24C9B4268;
            *(_QWORD *)(v31 + 8) = v41;
            *(_QWORD *)(v31 + 16) = v37;
            *(_QWORD *)(v31 + 24) = v21;
            *(_QWORD *)(v31 + 32) = v21;
            *(_DWORD *)(v31 + 40) = v40;
            *(_DWORD *)(v31 + 44) = a5;
            *(_DWORD *)(v31 + 48) = a6;
            *(_BYTE *)(v31 + 52) = 1;
            *(_QWORD *)(a4 + 8) = 0;
            v34 = (_QWORD *)operator new();
            v6 = &v22[2 * v36];
            goto LABEL_42;
          }
        }
      }
LABEL_40:
      sub_20E9A1D30();
    }
  }
  return v6;
}

void sub_20E9A2B04(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

char *sub_20E9A2B74(uint64_t a1, char *a2, char *a3)
{
  int v5;
  char *v6;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  if (a2 == a3)
    return sub_20E99C74C(a1, a2, a3);
  v6 = a2 + 1;
  v5 = *a2;
  if (a2 + 1 == a3 && v5 == 36)
    return sub_20E99C74C(a1, a2, a3);
  if ((v5 - 46) > 0x2E || ((1 << (v5 - 46)) & 0x600000000001) == 0)
  {
    sub_20E99D188(a1, (char)v5);
    return a2 + 1;
  }
  else
  {
    if (v6 != a3 && v5 == 92)
    {
      v9 = *v6;
      if ((v9 - 36) <= 0x3A && ((1 << (v9 - 36)) & 0x580000000000441) != 0)
      {
        sub_20E99D188(a1, (char)v9);
        return a2 + 2;
      }
      return sub_20E99C74C(a1, a2, a3);
    }
    if (v5 != 46)
      return sub_20E99C74C(a1, a2, a3);
    v10 = (_QWORD *)operator new();
    v11 = *(_QWORD *)(a1 + 56);
    v12 = *(_QWORD *)(v11 + 8);
    *v10 = &unk_24C9B43D0;
    v10[1] = v12;
    *(_QWORD *)(v11 + 8) = v10;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    return a2 + 1;
  }
}

_QWORD *sub_20E9A2CC0(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24C9B3E48;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20E9A2D04(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_24C9B3E48;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E9A2D58(uint64_t result, uint64_t a2)
{
  _BYTE *v2;

  v2 = *(_BYTE **)(a2 + 16);
  if (v2 == *(_BYTE **)(a2 + 24) || !*v2)
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  return result;
}

uint64_t sub_20E9A2D98(uint64_t a1, unsigned __int8 a2)
{
  if ((a2 & 0xF8) != 0x30 && (a2 & 0xFE) != 0x38 || a2 - 49 > 8)
    return 0;
  if (a2 - 48 > *(_DWORD *)(a1 + 28))
    sub_20E99D30C();
  sub_20E99D358(a1, a2 - 48);
  return 1;
}

char *sub_20E9A2DF8(uint64_t a1, char *a2, char *a3)
{
  uint64_t v6;
  int v7;
  char *v8;
  int v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_DWORD *)(a1 + 28);
  v8 = sub_20E9A30CC(a1, a2, a3);
  if (v8 == a2 && (v8 = sub_20E9A3144(a1, a2, a3), v8 == a2))
  {
    if (a2 != a3 && *a2 == 46)
    {
      v14 = (_QWORD *)operator new();
      v15 = *(_QWORD *)(a1 + 56);
      v16 = *(_QWORD *)(v15 + 8);
      *v14 = &unk_24C9B43D0;
      v14[1] = v16;
      *(_QWORD *)(v15 + 8) = v14;
LABEL_14:
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v8 = a2 + 1;
      return sub_20E99A5A8(a1, v8, a3, v6, v7 + 1, *(_DWORD *)(a1 + 28) + 1);
    }
    v8 = sub_20E99C74C(a1, a2, a3);
    if (v8 != a2)
      goto LABEL_25;
  }
  else if (v8 != a2)
  {
    goto LABEL_25;
  }
  if (v8 == a3)
  {
LABEL_25:
    if (v8 != a2)
      return sub_20E99A5A8(a1, v8, a3, v6, v7 + 1, *(_DWORD *)(a1 + 28) + 1);
    return a2;
  }
  v9 = *a2;
  switch(v9)
  {
    case '$':
      v10 = operator new();
      v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v12 = *(_QWORD *)(a1 + 56);
      v13 = (char *)&unk_24C9B3EB0;
      goto LABEL_13;
    case '(':
      if ((*(_BYTE *)(a1 + 24) & 2) != 0)
      {
        v19 = *(_DWORD *)(a1 + 28);
      }
      else
      {
        v18 = operator new();
        v19 = *(_DWORD *)(a1 + 28) + 1;
        *(_DWORD *)(a1 + 28) = v19;
        v20 = *(_QWORD *)(a1 + 56);
        v21 = *(_QWORD *)(v20 + 8);
        *(_QWORD *)v18 = &unk_24C9B41D8;
        *(_QWORD *)(v18 + 8) = v21;
        *(_DWORD *)(v18 + 16) = v19;
        *(_QWORD *)(v20 + 8) = v18;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      }
      ++*(_DWORD *)(a1 + 36);
      v22 = (char *)sub_20E999780(a1, a2 + 1, a3);
      if (v22 == a3 || (v23 = v22, *v22 != 41))
        sub_20E99B0A0();
      if ((*(_BYTE *)(a1 + 24) & 2) == 0)
      {
        v24 = operator new();
        v25 = *(_QWORD *)(a1 + 56);
        v26 = *(_QWORD *)(v25 + 8);
        *(_QWORD *)v24 = &unk_24C9B4220;
        *(_QWORD *)(v24 + 8) = v26;
        *(_DWORD *)(v24 + 16) = v19;
        *(_QWORD *)(v25 + 8) = v24;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      }
      --*(_DWORD *)(a1 + 36);
      v8 = v23 + 1;
      goto LABEL_25;
    case '^':
      v10 = operator new();
      v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v12 = *(_QWORD *)(a1 + 56);
      v13 = (char *)&unk_24C9B3E68;
LABEL_13:
      v17 = *(_QWORD *)(v12 + 8);
      *(_QWORD *)v10 = v13 + 16;
      *(_QWORD *)(v10 + 8) = v17;
      *(_BYTE *)(v10 + 16) = v11;
      *(_QWORD *)(v12 + 8) = v10;
      goto LABEL_14;
  }
  return a2;
}

_BYTE *sub_20E9A30CC(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  if (a2 == a3)
    return a2;
  switch(*a2)
  {
    case '$':
    case '(':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
      return a2;
    case ')':
      if (*(_DWORD *)(a1 + 36))
        return a2;
      break;
    default:
      break;
  }
  sub_20E99D188(a1, (char)*a2);
  return a2 + 1;
}

char *sub_20E9A3144(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  char *v4;
  signed __int8 v5;
  char *result;
  int v7;
  uint64_t v8;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v4 = a2 + 1;
  if (v3 + 1 == a3 || *v3 != 92)
    return v3;
  v5 = *v4;
  switch(*v4)
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
    case '}':
      sub_20E99D188(a1, v5);
      v3 += 2;
      return v3;
    default:
      if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
      {
        result = sub_20E99FD50(a1, v4, a3, 0);
      }
      else
      {
        v7 = sub_20E9A2D98(a1, v5);
        v8 = 2;
        if (!v7)
          v8 = 0;
        result = &v3[v8];
      }
      break;
  }
  return result;
}

uint64_t sub_20E9A3204(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v9;
  int v10;
  __int128 *v11;
  int v12;
  uint64_t i;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;

  if ((a5 & 0x80) != 0)
    v9 = a5 & 0xFFA;
  else
    v9 = a5;
  v10 = *(_DWORD *)(a1 + 28);
  *(_QWORD *)(a4 + 24) = a3;
  v11 = (__int128 *)(a4 + 24);
  *(_QWORD *)(a4 + 32) = a3;
  *(_BYTE *)(a4 + 40) = 0;
  sub_20E99BC2C(a4, (v10 + 1), (__int128 *)(a4 + 24));
  *(_QWORD *)(a4 + 48) = a2;
  *(_QWORD *)(a4 + 56) = a2;
  *(_BYTE *)(a4 + 64) = 0;
  *(_OWORD *)(a4 + 72) = *v11;
  *(_BYTE *)(a4 + 88) = *(_BYTE *)(a4 + 40);
  if ((v9 & 0x800) == 0)
    *(_QWORD *)(a4 + 104) = a2;
  *(_BYTE *)(a4 + 96) = 1;
  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0)
  {
    if ((sub_20E99B7B8(a1, a2, a3, (uint64_t *)a4, v9, (v9 & 0x800) == 0) & 1) != 0)
      goto LABEL_28;
    goto LABEL_13;
  }
  if (*(_DWORD *)(a1 + 28))
  {
    if (sub_20E9A412C(a1, a2, a3, (uint64_t *)a4, v9, (v9 & 0x800) == 0))
      goto LABEL_28;
LABEL_13:
    if (a2 != a3 && (v9 & 0x40) == 0)
    {
      v12 = v9 | 0x80;
      for (i = a2 + 1; i != a3; ++i)
      {
        sub_20E99BC2C(a4, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3), v11);
        if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0)
        {
          if (*(_DWORD *)(a1 + 28))
          {
            if (sub_20E9A412C(a1, i, a3, (uint64_t *)a4, v12, 0))
              goto LABEL_28;
          }
          else if ((sub_20E9A3820(a1, i, a3, (uint64_t *)a4, v12, 0) & 1) != 0)
          {
            goto LABEL_28;
          }
        }
        else if ((sub_20E99B7B8(a1, i, a3, (uint64_t *)a4, v12, 0) & 1) != 0)
        {
          goto LABEL_28;
        }
        sub_20E99BC2C(a4, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3), v11);
      }
      sub_20E99BC2C(a4, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3), v11);
      if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0)
      {
        if (*(_DWORD *)(a1 + 28))
        {
          if (sub_20E9A412C(a1, a3, a3, (uint64_t *)a4, v12, 0))
            goto LABEL_28;
        }
        else if ((sub_20E9A3820(a1, a3, a3, (uint64_t *)a4, v12, 0) & 1) != 0)
        {
          goto LABEL_28;
        }
      }
      else if ((sub_20E99B7B8(a1, a3, a3, (uint64_t *)a4, v12, 0) & 1) != 0)
      {
        goto LABEL_28;
      }
    }
    result = 0;
    *(_QWORD *)(a4 + 8) = *(_QWORD *)a4;
    return result;
  }
  if ((sub_20E9A3820(a1, a2, a3, (uint64_t *)a4, v9, (v9 & 0x800) == 0) & 1) == 0)
    goto LABEL_13;
LABEL_28:
  if (*(_QWORD *)(a4 + 8) == *(_QWORD *)a4)
    v14 = v11;
  else
    v14 = *(__int128 **)a4;
  v15 = *(_QWORD *)v14;
  *(_QWORD *)(a4 + 56) = *(_QWORD *)v14;
  *(_BYTE *)(a4 + 64) = *(_QWORD *)(a4 + 48) != v15;
  v16 = *((_QWORD *)v14 + 1);
  *(_QWORD *)(a4 + 72) = v16;
  *(_BYTE *)(a4 + 88) = v16 != *(_QWORD *)(a4 + 80);
  return 1;
}

void sub_20E9A3510(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, char a5)
{
  char v5;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;

  v5 = a5;
  v10 = a4[6];
  v11 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
  v13 = *(char **)a1;
  v12 = *(char **)(a1 + 8);
  v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v12[-*(_QWORD *)a1] >> 3);
  v15 = v11 - v14;
  if (v11 > v14)
  {
    v16 = *(_QWORD *)(a1 + 16);
    if (0xAAAAAAAAAAAAAAABLL * ((v16 - (uint64_t)v12) >> 3) >= v15)
    {
      v22 = &v12[24 * v15];
      v27 = 8 * ((a4[1] - *a4) >> 3) - 8 * ((uint64_t)&v12[-*(_QWORD *)a1] >> 3);
      do
      {
        *(_QWORD *)v12 = 0;
        *((_QWORD *)v12 + 1) = 0;
        v12[16] = 0;
        v12 += 24;
        v27 -= 24;
      }
      while (v27);
      *(_QWORD *)(a1 + 8) = v22;
      goto LABEL_24;
    }
    if (v11 > 0xAAAAAAAAAAAAAAALL)
      sub_20E867F44();
    v17 = 0xAAAAAAAAAAAAAAABLL * ((v16 - (uint64_t)v13) >> 3);
    v18 = 0x5555555555555556 * ((v16 - (uint64_t)v13) >> 3);
    if (v18 <= v11)
      v18 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
    if (v17 >= 0x555555555555555)
      v19 = 0xAAAAAAAAAAAAAAALL;
    else
      v19 = v18;
    if (v19 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v20 = (char *)operator new(24 * v19);
    v21 = &v20[24 * v14];
    v22 = &v20[24 * v11];
    v23 = 24 * v11 - 24 * v14;
    v24 = v21;
    do
    {
      *(_QWORD *)v24 = 0;
      *((_QWORD *)v24 + 1) = 0;
      v24[16] = 0;
      v24 += 24;
      v23 -= 24;
    }
    while (v23);
    v25 = &v20[24 * v19];
    if (v12 == v13)
    {
      v5 = a5;
      *(_QWORD *)a1 = v21;
      *(_QWORD *)(a1 + 8) = v22;
      *(_QWORD *)(a1 + 16) = v25;
      if (!v12)
      {
LABEL_24:
        v13 = *(char **)a1;
        v12 = v22;
        goto LABEL_25;
      }
    }
    else
    {
      v5 = a5;
      do
      {
        v26 = *(_OWORD *)(v12 - 24);
        *((_QWORD *)v21 - 1) = *((_QWORD *)v12 - 1);
        *(_OWORD *)(v21 - 24) = v26;
        v21 -= 24;
        v12 -= 24;
      }
      while (v12 != v13);
      v12 = v13;
      *(_QWORD *)a1 = v21;
      *(_QWORD *)(a1 + 8) = v22;
      *(_QWORD *)(a1 + 16) = v25;
      if (!v13)
        goto LABEL_24;
    }
    operator delete(v12);
    v22 = *(char **)(a1 + 8);
    goto LABEL_24;
  }
  if (v11 < v14)
  {
    v12 = &v13[8 * ((a4[1] - *a4) >> 3)];
    *(_QWORD *)(a1 + 8) = v12;
  }
LABEL_25:
  if (v12 != v13)
  {
    v28 = 0;
    v29 = 0;
    v31 = *a4;
    v30 = a4[1];
    do
    {
      v32 = 0xAAAAAAAAAAAAAAABLL * ((v30 - v31) >> 3);
      v33 = (_QWORD *)(v31 + v28);
      if (v32 <= v29)
        v34 = a4 + 3;
      else
        v34 = v33;
      *(_QWORD *)&v13[v28] = a2 + *v34 - v10;
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v29)
        v35 = a4 + 3;
      else
        v35 = (uint64_t *)(*a4 + v28);
      *(_QWORD *)(*(_QWORD *)a1 + v28 + 8) = a2 + v35[1] - v10;
      v31 = *a4;
      v30 = a4[1];
      if (0xAAAAAAAAAAAAAAABLL * ((v30 - *a4) >> 3) <= v29)
        v36 = a4 + 3;
      else
        v36 = (uint64_t *)(*a4 + v28);
      v13 = *(char **)a1;
      v37 = *(_QWORD *)(a1 + 8);
      *(_BYTE *)(*(_QWORD *)a1 + v28 + 16) = *((_BYTE *)v36 + 16);
      ++v29;
      v28 += 24;
    }
    while (v29 < 0xAAAAAAAAAAAAAAABLL * ((v37 - (uint64_t)v13) >> 3));
  }
  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 32) = a3;
  *(_BYTE *)(a1 + 40) = 0;
  v38 = a2 + a4[6] - v10;
  *(_QWORD *)(a1 + 48) = v38;
  *(_QWORD *)(a1 + 56) = a2 + a4[7] - v10;
  *(_BYTE *)(a1 + 64) = *((_BYTE *)a4 + 64);
  *(_QWORD *)(a1 + 72) = a2 + a4[9] - v10;
  *(_QWORD *)(a1 + 80) = a2 + a4[10] - v10;
  *(_BYTE *)(a1 + 88) = *((_BYTE *)a4 + 88);
  if ((v5 & 1) == 0)
    *(_QWORD *)(a1 + 104) = v38;
  *(_BYTE *)(a1 + 96) = *((_BYTE *)a4 + 96);
}

uint64_t sub_20E9A3820(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  __int128 v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void **v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  unint64_t v70;
  void *v71;
  void *v72;
  _QWORD *v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  void *v77;
  void *v78;
  uint64_t v79;
  __int128 v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void **v84;
  void **v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t *v91;
  uint64_t v92;
  char v93;
  _BYTE v96[56];
  void *__p[2];
  _QWORD v98[3];
  __int128 v99;
  __int128 v100;
  __int128 v101;

  v100 = 0u;
  v101 = 0u;
  v99 = 0u;
  v6 = *(_QWORD *)(a1 + 40);
  if (!v6)
  {
LABEL_79:
    v84 = (void **)*((_QWORD *)&v99 + 1);
    v85 = (void **)v100;
    *((_QWORD *)&v101 + 1) = 0;
    v86 = v100 - *((_QWORD *)&v99 + 1);
    if ((_QWORD)v100 - *((_QWORD *)&v99 + 1) < 0x11uLL)
      goto LABEL_81;
    do
    {
LABEL_80:
      operator delete(*v84);
      v85 = (void **)v100;
      v84 = (void **)(*((_QWORD *)&v99 + 1) + 8);
      *((_QWORD *)&v99 + 1) = v84;
      v86 = v100 - (_QWORD)v84;
    }
    while ((_QWORD)v100 - (_QWORD)v84 > 0x10uLL);
    goto LABEL_81;
  }
  *(_DWORD *)v96 = 0;
  memset(&v96[8], 0, 48);
  *(_OWORD *)__p = 0uLL;
  memset(v98, 0, 21);
  sub_20E9A48DC((uint64_t)&v99);
  v11 = *(_QWORD *)(*((_QWORD *)&v99 + 1) + 8 * (((_QWORD)v101 + *((_QWORD *)&v101 + 1)) / 0x2AuLL))
      + 96 * (((_QWORD)v101 + *((_QWORD *)&v101 + 1)) % 0x2AuLL);
  v12 = *(_OWORD *)&v96[16];
  *(_OWORD *)v11 = *(_OWORD *)v96;
  *(_OWORD *)(v11 + 16) = v12;
  *(_QWORD *)(v11 + 40) = 0;
  *(_QWORD *)(v11 + 48) = 0;
  *(_QWORD *)(v11 + 32) = 0;
  memset(&v96[32], 0, 24);
  *(_QWORD *)(v11 + 56) = 0;
  *(_QWORD *)(v11 + 64) = 0;
  *(_QWORD *)(v11 + 72) = 0;
  __p[0] = 0;
  __p[1] = 0;
  v98[0] = 0;
  v13 = v98[1];
  *(_QWORD *)(v11 + 85) = *(_QWORD *)((char *)&v98[1] + 5);
  *(_QWORD *)(v11 + 80) = v13;
  v15 = *((_QWORD *)&v101 + 1);
  v14 = v101;
  v16 = ++*((_QWORD *)&v101 + 1);
  v17 = *((_QWORD *)&v99 + 1);
  v18 = *(unsigned int *)(a1 + 32);
  v19 = v101 + v15;
  v20 = 8 * (v19 / 0x2A);
  v21 = 96 * (v19 % 0x2A);
  v22 = *(_QWORD *)(*((_QWORD *)&v99 + 1) + v20) + v21;
  *(_DWORD *)v22 = 0;
  *(_QWORD *)(v22 + 8) = a2;
  *(_QWORD *)(*(_QWORD *)(v17 + v20) + v21 + 16) = a2;
  *(_QWORD *)(*(_QWORD *)(v17 + v20) + v21 + 24) = a3;
  v23 = *(_QWORD *)(v17 + v20) + v21;
  v26 = *(_QWORD *)(v23 + 56);
  v24 = v23 + 56;
  v25 = v26;
  v27 = (*(_QWORD *)(v24 + 8) - v26) >> 4;
  v91 = a4;
  if (v18 <= v27)
  {
    if (v18 < v27)
      *(_QWORD *)(v24 + 8) = v25 + 16 * v18;
  }
  else
  {
    sub_20E99C28C((char **)v24, v18 - v27);
    v16 = *((_QWORD *)&v101 + 1);
    v14 = v101;
    v17 = *((_QWORD *)&v99 + 1);
  }
  v93 = 0;
  v28 = 0;
  v92 = 0;
  v29 = v14 + v16 - 1;
  v30 = 8 * (v29 / 0x2A);
  v31 = 96 * (v29 % 0x2A);
  *(_QWORD *)(*(_QWORD *)(v17 + v30) + v31 + 80) = v6;
  v32 = a3 - a2;
  v33 = *(_QWORD *)(v17 + v30) + v31;
  *(_DWORD *)(v33 + 88) = a5;
  *(_BYTE *)(v33 + 92) = a6;
  while (2)
  {
    if ((++v28 & 0xFFF) == 0 && (int)(v28 >> 12) >= (int)v32)
      sub_20E99BE04();
    v35 = v16 + v101 - 1;
    v36 = *(_QWORD *)(*((_QWORD *)&v99 + 1) + 8 * (v35 / 0x2A));
    v37 = v35 % 0x2A;
    v38 = v36 + 96 * (v35 % 0x2A);
    v40 = (_QWORD *)(v38 + 80);
    v39 = *(_QWORD *)(v38 + 80);
    if (v39)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v39 + 16))(v39, v36 + 96 * v37);
    switch(*(_DWORD *)v38)
    {
      case 0xFFFFFC18:
        v41 = *(_QWORD *)(v36 + 96 * v37 + 16);
        if ((a5 & 0x20) != 0 && v41 == a2 || (a5 & 0x1000) != 0 && v41 != a3)
          goto LABEL_21;
        v64 = v41 - *(_QWORD *)(v36 + 96 * v37 + 8);
        v65 = v92;
        if ((v93 & (v92 >= v64)) == 0)
          v65 = v64;
        if (v65 == v32)
        {
          v66 = (void **)*((_QWORD *)&v99 + 1);
          v67 = v100;
          if ((_QWORD)v100 == *((_QWORD *)&v99 + 1))
          {
            *((_QWORD *)&v101 + 1) = 0;
            v81 = 0;
          }
          else
          {
            v68 = (_QWORD *)(*((_QWORD *)&v99 + 1) + 8 * ((unint64_t)v101 / 0x2A));
            v69 = (_QWORD *)(*v68 + 96 * ((unint64_t)v101 % 0x2A));
            v70 = *(_QWORD *)(*((_QWORD *)&v99 + 1) + 8 * ((*((_QWORD *)&v101 + 1) + (_QWORD)v101) / 0x2AuLL))
                + 96 * ((*((_QWORD *)&v101 + 1) + (_QWORD)v101) % 0x2AuLL);
            if (v69 != (_QWORD *)v70)
            {
              do
              {
                v71 = (void *)v69[7];
                if (v71)
                {
                  v69[8] = v71;
                  operator delete(v71);
                }
                v72 = (void *)v69[4];
                if (v72)
                {
                  v69[5] = v72;
                  operator delete(v72);
                }
                v69 += 12;
                if ((_QWORD *)((char *)v69 - *v68) == (_QWORD *)4032)
                {
                  v73 = (_QWORD *)v68[1];
                  ++v68;
                  v69 = v73;
                }
              }
              while (v69 != (_QWORD *)v70);
              v66 = (void **)*((_QWORD *)&v99 + 1);
              v67 = v100;
            }
            *((_QWORD *)&v101 + 1) = 0;
            v81 = v67 - (_QWORD)v66;
            if (v81 >= 0x11)
            {
              do
              {
                operator delete(*v66);
                v66 = (void **)(*((_QWORD *)&v99 + 1) + 8);
                *((_QWORD *)&v99 + 1) = v66;
                v81 = v100 - (_QWORD)v66;
              }
              while ((_QWORD)v100 - (_QWORD)v66 > 0x10uLL);
            }
          }
          if (v81 >> 3 == 1)
          {
            v82 = 21;
          }
          else
          {
            if (v81 >> 3 != 2)
            {
LABEL_76:
              v93 = 1;
              v92 = a3 - a2;
              goto LABEL_8;
            }
            v82 = 42;
          }
          *(_QWORD *)&v101 = v82;
          goto LABEL_76;
        }
        v92 = v65;
        v74 = *((_QWORD *)&v101 + 1) + v101 - 1;
        v75 = *(_QWORD *)(*((_QWORD *)&v99 + 1) + 8 * (v74 / 0x2A));
        v76 = v74 % 0x2A;
        v77 = *(void **)(v75 + 96 * (v74 % 0x2A) + 56);
        if (v77)
        {
          *(_QWORD *)(v75 + 96 * v76 + 64) = v77;
          operator delete(v77);
        }
        v78 = *(void **)(v75 + 96 * v76 + 32);
        if (v78)
        {
          *(_QWORD *)(v75 + 96 * v76 + 40) = v78;
          operator delete(v78);
        }
        v79 = 42 * ((uint64_t)(v100 - *((_QWORD *)&v99 + 1)) >> 3) - 1;
        v80 = v101;
        --*((_QWORD *)&v101 + 1);
        if ((_QWORD)v100 == *((_QWORD *)&v99 + 1))
          v79 = 0;
        if ((unint64_t)(v79 - (*((_QWORD *)&v80 + 1) + v80) + 1) >= 0x54)
        {
          operator delete(*(void **)(v100 - 8));
          *(_QWORD *)&v100 = v100 - 8;
        }
        v93 = 1;
LABEL_8:
        v16 = *((_QWORD *)&v101 + 1);
        if (*((_QWORD *)&v101 + 1))
          continue;
        if ((v93 & 1) != 0)
        {
          v83 = *v91;
          *(_QWORD *)v83 = a2;
          *(_QWORD *)(v83 + 8) = a2 + v92;
          v6 = 1;
          *(_BYTE *)(v83 + 16) = 1;
          goto LABEL_79;
        }
        v6 = 0;
        v84 = (void **)*((_QWORD *)&v99 + 1);
        v85 = (void **)v100;
        *((_QWORD *)&v101 + 1) = 0;
        v86 = v100 - *((_QWORD *)&v99 + 1);
        if ((_QWORD)v100 - *((_QWORD *)&v99 + 1) >= 0x11uLL)
          goto LABEL_80;
LABEL_81:
        v87 = v86 >> 3;
        if (v87 == 1)
        {
          v88 = 21;
LABEL_85:
          *(_QWORD *)&v101 = v88;
        }
        else if (v87 == 2)
        {
          v88 = 42;
          goto LABEL_85;
        }
        if (v84 != v85)
        {
          do
          {
            v89 = *v84++;
            operator delete(v89);
          }
          while (v84 != v85);
          if ((_QWORD)v100 != *((_QWORD *)&v99 + 1))
            *(_QWORD *)&v100 = v100 + ((*((_QWORD *)&v99 + 1) - v100 + 7) & 0xFFFFFFFFFFFFFFF8);
        }
        if ((_QWORD)v99)
          operator delete((void *)v99);
        return v6;
      case 0xFFFFFC19:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        goto LABEL_8;
      case 0xFFFFFC1D:
        v49 = v101;
        if (!(_QWORD)v101)
        {
          sub_20E9A4E7C((uint64_t)&v99);
          v49 = v101;
        }
        v50 = (_QWORD *)(*((_QWORD *)&v99 + 1) + 8 * (v49 / 0x2A));
        v51 = *v50 + 96 * (v49 % 0x2A);
        if ((_QWORD)v100 == *((_QWORD *)&v99 + 1))
          v51 = 0;
        if (v51 == *v50)
          v51 = *(v50 - 1) + 4032;
        v52 = *(_OWORD *)(v38 + 16);
        *(_OWORD *)(v51 - 96) = *(_OWORD *)v38;
        *(_OWORD *)(v51 - 80) = v52;
        v53 = v36 + 96 * v37;
        *(_QWORD *)(v51 - 56) = 0;
        *(_QWORD *)(v51 - 48) = 0;
        *(_QWORD *)(v51 - 64) = 0;
        *(_OWORD *)(v51 - 64) = *(_OWORD *)(v53 + 32);
        *(_QWORD *)(v51 - 48) = *(_QWORD *)(v53 + 48);
        *(_QWORD *)(v53 + 32) = 0;
        *(_QWORD *)(v53 + 40) = 0;
        *(_QWORD *)(v53 + 48) = 0;
        *(_QWORD *)(v51 - 40) = 0;
        *(_QWORD *)(v51 - 32) = 0;
        *(_QWORD *)(v51 - 24) = 0;
        *(_OWORD *)(v51 - 40) = *(_OWORD *)(v53 + 56);
        *(_QWORD *)(v51 - 24) = *(_QWORD *)(v53 + 72);
        *(_QWORD *)(v53 + 56) = 0;
        *(_QWORD *)(v53 + 64) = 0;
        *(_QWORD *)(v53 + 72) = 0;
        v54 = *v40;
        *(_QWORD *)(v51 - 11) = *(_QWORD *)(v38 + 85);
        *(_QWORD *)(v51 - 16) = v54;
        v55 = *((_QWORD *)&v101 + 1);
        *(_QWORD *)&v101 = v101 - 1;
        ++*((_QWORD *)&v101 + 1);
        v56 = v55 + v101;
        v57 = (v55 + (uint64_t)v101) / 0x2AuLL;
        v43 = *(_QWORD *)(*((_QWORD *)&v99 + 1) + 8 * v57);
        v44 = v56 - 42 * v57;
        v45 = *(void **)(v43 + 96 * v44 + 56);
        if (!v45)
          goto LABEL_23;
        goto LABEL_22;
      case 0xFFFFFC1F:
LABEL_21:
        v42 = *((_QWORD *)&v101 + 1) + v101 - 1;
        v43 = *(_QWORD *)(*((_QWORD *)&v99 + 1) + 8 * (v42 / 0x2A));
        v44 = v42 % 0x2A;
        v45 = *(void **)(v43 + 96 * (v42 % 0x2A) + 56);
        if (v45)
        {
LABEL_22:
          *(_QWORD *)(v43 + 96 * v44 + 64) = v45;
          operator delete(v45);
        }
LABEL_23:
        v46 = *(void **)(v43 + 96 * v44 + 32);
        if (v46)
        {
          *(_QWORD *)(v43 + 96 * v44 + 40) = v46;
          operator delete(v46);
        }
        v47 = 42 * ((uint64_t)(v100 - *((_QWORD *)&v99 + 1)) >> 3) - 1;
        v48 = v101;
        --*((_QWORD *)&v101 + 1);
        if ((_QWORD)v100 == *((_QWORD *)&v99 + 1))
          v47 = 0;
        if ((unint64_t)(v47 - (*((_QWORD *)&v48 + 1) + v48) + 1) >= 0x54)
        {
          operator delete(*(void **)(v100 - 8));
          *(_QWORD *)&v100 = v100 - 8;
        }
        goto LABEL_8;
      case 0xFFFFFC20:
        sub_20E99C3B4((uint64_t)v96, (__int128 *)(v36 + 96 * v37));
        (*(void (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)*v40 + 24))(*v40, 1, v36 + 96 * v37);
        (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v98[1] + 24))(v98[1], 0, v96);
        v58 = *((_QWORD *)&v99 + 1);
        if ((_QWORD)v100 == *((_QWORD *)&v99 + 1))
          v59 = 0;
        else
          v59 = 42 * ((uint64_t)(v100 - *((_QWORD *)&v99 + 1)) >> 3) - 1;
        v60 = *((_QWORD *)&v101 + 1) + v101;
        if (v59 == *((_QWORD *)&v101 + 1) + (_QWORD)v101)
        {
          sub_20E9A48DC((uint64_t)&v99);
          v58 = *((_QWORD *)&v99 + 1);
          v60 = *((_QWORD *)&v101 + 1) + v101;
        }
        v61 = *(_QWORD *)(v58 + 8 * (v60 / 0x2A)) + 96 * (v60 % 0x2A);
        v62 = *(_OWORD *)&v96[16];
        *(_OWORD *)v61 = *(_OWORD *)v96;
        *(_OWORD *)(v61 + 16) = v62;
        *(_QWORD *)(v61 + 40) = 0;
        *(_QWORD *)(v61 + 48) = 0;
        *(_QWORD *)(v61 + 32) = 0;
        *(_OWORD *)(v61 + 32) = *(_OWORD *)&v96[32];
        *(_QWORD *)(v61 + 48) = *(_QWORD *)&v96[48];
        memset(&v96[32], 0, 24);
        *(_QWORD *)(v61 + 56) = 0;
        *(_QWORD *)(v61 + 64) = 0;
        *(_QWORD *)(v61 + 72) = 0;
        *(_OWORD *)(v61 + 56) = *(_OWORD *)__p;
        *(_QWORD *)(v61 + 72) = v98[0];
        __p[0] = 0;
        __p[1] = 0;
        v98[0] = 0;
        v63 = v98[1];
        *(_QWORD *)(v61 + 85) = *(_QWORD *)((char *)&v98[1] + 5);
        *(_QWORD *)(v61 + 80) = v63;
        ++*((_QWORD *)&v101 + 1);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        if (*(_QWORD *)&v96[32])
        {
          *(_QWORD *)&v96[40] = *(_QWORD *)&v96[32];
          operator delete(*(void **)&v96[32]);
        }
        goto LABEL_8;
      default:
        sub_20E99BE50();
    }
  }
}

void sub_20E9A40A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E9A4868((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

void sub_20E9A40BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  sub_20E99BDC4((uint64_t *)va);
  sub_20E9A4868((void **)(v11 - 144));
  _Unwind_Resume(a1);
}

void sub_20E9A4104(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E9A4868((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

void sub_20E9A4118(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E9A4868((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

uint64_t sub_20E9A412C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  void *v28;
  void *v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  void *v36;
  char *v37;
  char *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  uint64_t v43;
  unint64_t v44;
  _BYTE *v45;
  unsigned int v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  void *v50;
  char *v51;
  char *v52;
  char *v53;
  void *v54;
  void *v55;
  uint64_t *v57;
  uint64_t v58;
  char v59;
  _BYTE v61[56];
  void *__p[2];
  _QWORD v63[3];
  __int128 v64;
  char v65;
  _BYTE v66[40];
  __int128 v67;
  void *v68[6];
  char *v69;
  char *v70;
  unint64_t v71;

  v69 = 0;
  v70 = 0;
  v71 = 0;
  *(_DWORD *)v66 = 0;
  memset(&v66[8], 0, 32);
  v67 = 0u;
  memset(v68, 0, 37);
  v6 = *(_QWORD *)(a1 + 40);
  if (!v6)
    goto LABEL_63;
  *(_QWORD *)&v64 = a3;
  *((_QWORD *)&v64 + 1) = a3;
  v65 = 0;
  *(_DWORD *)v61 = 0;
  memset(&v61[8], 0, 48);
  *(_OWORD *)__p = 0uLL;
  memset(v63, 0, 21);
  v70 = sub_20E99BF1C((void **)&v69, (uint64_t)v61);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (*(_QWORD *)&v61[32])
  {
    *(_QWORD *)&v61[40] = *(_QWORD *)&v61[32];
    operator delete(*(void **)&v61[32]);
  }
  v12 = v70;
  *((_DWORD *)v70 - 24) = 0;
  *((_QWORD *)v12 - 11) = a2;
  *((_QWORD *)v12 - 10) = a2;
  *((_QWORD *)v12 - 9) = a3;
  v13 = *((_QWORD *)v12 - 8);
  v14 = *(unsigned int *)(a1 + 28);
  v15 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v12 - 7) - v13) >> 3);
  if (v14 <= v15)
  {
    if (v14 < v15)
      *((_QWORD *)v12 - 7) = v13 + 24 * v14;
  }
  else
  {
    sub_20E99C0EC((void **)v12 - 8, v14 - v15, &v64);
    v12 = v70;
  }
  v16 = *((_QWORD *)v12 - 5);
  v17 = *(unsigned int *)(a1 + 32);
  v18 = (*((_QWORD *)v12 - 4) - v16) >> 4;
  v57 = a4;
  if (v17 <= v18)
  {
    if (v17 < v18)
      *((_QWORD *)v12 - 4) = v16 + 16 * v17;
  }
  else
  {
    sub_20E99C28C((char **)v12 - 5, v17 - v18);
    v12 = v70;
  }
  v19 = 0;
  v59 = 0;
  v20 = 0;
  v21 = a3 - a2;
  *((_QWORD *)v12 - 2) = v6;
  *((_DWORD *)v12 - 2) = a5;
  v58 = a3;
  *(v12 - 4) = a6;
  do
  {
    v22 = (++v20 & 0xFFF) != 0 || (int)(v20 >> 12) < (int)v21;
    if (!v22)
      sub_20E99BE04();
    v24 = v12 - 16;
    v23 = *((_QWORD *)v12 - 2);
    v25 = v12 - 96;
    if (v23)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v23 + 16))(v23, v12 - 96);
    switch(*(_DWORD *)v25)
    {
      case 0xFFFFFC18:
        v26 = *((_QWORD *)v12 - 10);
        if ((a5 & 0x20) != 0 && v26 == a2 || (a5 & 0x1000) != 0 && v26 != v58)
          goto LABEL_29;
        v33 = v19;
        v34 = v26 - *((_QWORD *)v12 - 11);
        if ((v59 & (v33 >= v34)) == 0)
        {
          v35 = *(_OWORD *)v25;
          *(_OWORD *)&v66[16] = *((_OWORD *)v12 - 5);
          *(_OWORD *)v66 = v35;
          if (v66 != v25)
          {
            sub_20E9A5234((char **)&v66[32], *((char **)v12 - 8), *((char **)v12 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v12 - 7) - *((_QWORD *)v12 - 8)) >> 3));
            sub_20E9A5430((double **)v68, *((_QWORD *)v12 - 5), *((char **)v12 - 4), (uint64_t)(*((_QWORD *)v12 - 4) - *((_QWORD *)v12 - 5)) >> 4);
          }
          v36 = *(void **)v24;
          *(void **)((char *)&v68[3] + 5) = *(void **)(v12 - 11);
          v68[3] = v36;
          v33 = v34;
        }
        v37 = v70;
        if (v33 == v21)
        {
          v38 = v69;
          while (v37 != v38)
          {
            v39 = (void *)*((_QWORD *)v37 - 5);
            if (v39)
            {
              *((_QWORD *)v37 - 4) = v39;
              operator delete(v39);
            }
            v40 = (void *)*((_QWORD *)v37 - 8);
            if (v40)
            {
              *((_QWORD *)v37 - 7) = v40;
              operator delete(v40);
            }
            v37 -= 96;
          }
          v70 = v38;
          v59 = 1;
          v19 = v21;
        }
        else
        {
          v19 = v33;
          v41 = (void *)*((_QWORD *)v70 - 5);
          if (v41)
          {
            *((_QWORD *)v70 - 4) = v41;
            operator delete(v41);
          }
          v42 = (void *)*((_QWORD *)v37 - 8);
          if (v42)
          {
            *((_QWORD *)v37 - 7) = v42;
            operator delete(v42);
          }
          v70 = v37 - 96;
          v59 = 1;
        }
        break;
      case 0xFFFFFC1D:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        break;
      case 0xFFFFFC1F:
LABEL_29:
        v27 = v70;
        v28 = (void *)*((_QWORD *)v70 - 5);
        if (v28)
        {
          *((_QWORD *)v70 - 4) = v28;
          operator delete(v28);
        }
        v29 = (void *)*((_QWORD *)v27 - 8);
        if (v29)
        {
          *((_QWORD *)v27 - 7) = v29;
          operator delete(v29);
        }
        v70 = v27 - 96;
        break;
      case 0xFFFFFC20:
        sub_20E99C3B4((uint64_t)v61, (__int128 *)v12 - 6);
        (*(void (**)(_QWORD, uint64_t, char *))(**(_QWORD **)v24 + 24))(*(_QWORD *)v24, 1, v12 - 96);
        (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v63[1] + 24))(v63[1], 0, v61);
        v30 = v70;
        if ((unint64_t)v70 >= v71)
        {
          v70 = sub_20E99BF1C((void **)&v69, (uint64_t)v61);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
        }
        else
        {
          v31 = *(_OWORD *)&v61[16];
          *(_OWORD *)v70 = *(_OWORD *)v61;
          *((_OWORD *)v30 + 1) = v31;
          *((_QWORD *)v30 + 4) = 0;
          *((_QWORD *)v30 + 5) = 0;
          *((_QWORD *)v30 + 6) = 0;
          *((_QWORD *)v30 + 7) = 0;
          *((_OWORD *)v30 + 2) = *(_OWORD *)&v61[32];
          *((_QWORD *)v30 + 6) = *(_QWORD *)&v61[48];
          memset(&v61[32], 0, 24);
          *((_QWORD *)v30 + 8) = 0;
          *((_QWORD *)v30 + 9) = 0;
          *(_OWORD *)(v30 + 56) = *(_OWORD *)__p;
          *((_QWORD *)v30 + 9) = v63[0];
          __p[0] = 0;
          __p[1] = 0;
          v63[0] = 0;
          v32 = v63[1];
          *(_QWORD *)(v30 + 85) = *(_QWORD *)((char *)&v63[1] + 5);
          *((_QWORD *)v30 + 10) = v32;
          v70 = v30 + 96;
        }
        if (*(_QWORD *)&v61[32])
        {
          *(_QWORD *)&v61[40] = *(_QWORD *)&v61[32];
          operator delete(*(void **)&v61[32]);
        }
        break;
      default:
        sub_20E99BE50();
    }
    v12 = v70;
  }
  while (v69 != v70);
  if ((v59 & 1) == 0)
  {
LABEL_63:
    v49 = 0;
    v50 = v68[0];
    if (!v68[0])
      goto LABEL_65;
    goto LABEL_64;
  }
  v43 = *v57;
  *(_QWORD *)v43 = a2;
  *(_QWORD *)(v43 + 8) = a2 + v19;
  *(_BYTE *)(v43 + 16) = 1;
  if ((_QWORD)v67 != *(_QWORD *)&v66[32])
  {
    v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v67 - *(_QWORD *)&v66[32]) >> 3);
    v45 = (_BYTE *)(*(_QWORD *)&v66[32] + 16);
    v46 = 1;
    do
    {
      v47 = v43 + 24 * v46;
      *(_OWORD *)v47 = *((_OWORD *)v45 - 1);
      v48 = *v45;
      v45 += 24;
      *(_BYTE *)(v47 + 16) = v48;
      v22 = v44 > v46++;
    }
    while (v22);
  }
  v49 = 1;
  v50 = v68[0];
  if (v68[0])
  {
LABEL_64:
    v68[1] = v50;
    operator delete(v50);
  }
LABEL_65:
  if (*(_QWORD *)&v66[32])
  {
    *(_QWORD *)&v67 = *(_QWORD *)&v66[32];
    operator delete(*(void **)&v66[32]);
  }
  v51 = v69;
  if (v69)
  {
    v52 = v70;
    v53 = v69;
    if (v70 != v69)
    {
      do
      {
        v54 = (void *)*((_QWORD *)v52 - 5);
        if (v54)
        {
          *((_QWORD *)v52 - 4) = v54;
          operator delete(v54);
        }
        v55 = (void *)*((_QWORD *)v52 - 8);
        if (v55)
        {
          *((_QWORD *)v52 - 7) = v55;
          operator delete(v55);
        }
        v52 -= 96;
      }
      while (v52 != v51);
      v53 = v69;
    }
    v70 = v51;
    operator delete(v53);
  }
  return v49;
}

void sub_20E9A46BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v33;

  sub_20E99BDC4(&a33);
  sub_20E99BE9C((void **)(v33 - 120));
  _Unwind_Resume(a1);
}

void sub_20E9A4710(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  char *v6;
  unint64_t v7;
  void *v8;
  void *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    a1[5] = 0;
    v11 = 0;
  }
  else
  {
    v4 = a1[4];
    v5 = &v2[v4 / 0x2A];
    v6 = (char *)*v5 + 96 * (v4 % 0x2A);
    v7 = (unint64_t)v2[(a1[5] + v4) / 0x2A] + 96 * ((a1[5] + v4) % 0x2A);
    if (v6 != (char *)v7)
    {
      do
      {
        v8 = (void *)*((_QWORD *)v6 + 7);
        if (v8)
        {
          *((_QWORD *)v6 + 8) = v8;
          operator delete(v8);
        }
        v9 = (void *)*((_QWORD *)v6 + 4);
        if (v9)
        {
          *((_QWORD *)v6 + 5) = v9;
          operator delete(v9);
        }
        v6 += 96;
        if (v6 - (_BYTE *)*v5 == 4032)
        {
          v10 = (char *)v5[1];
          ++v5;
          v6 = v10;
        }
      }
      while (v6 != (char *)v7);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
    a1[5] = 0;
    v11 = (char *)v3 - (char *)v2;
    if (v11 >= 0x11)
    {
      do
      {
        operator delete(*v2);
        v12 = a1[2];
        v2 = (void **)(a1[1] + 8);
        a1[1] = v2;
        v11 = v12 - (_QWORD)v2;
      }
      while (v11 > 0x10);
    }
  }
  if (v11 >> 3 == 1)
  {
    v13 = 21;
  }
  else
  {
    if (v11 >> 3 != 2)
      return;
    v13 = 42;
  }
  a1[4] = v13;
}

void **sub_20E9A4868(void **a1)
{
  void **v2;
  void **v3;
  void *v4;
  _BYTE *v5;
  _BYTE *v6;

  sub_20E9A4710(a1);
  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v2 != v3)
  {
    do
    {
      v4 = *v2++;
      operator delete(v4);
    }
    while (v2 != v3);
    v6 = a1[1];
    v5 = a1[2];
    if (v5 != v6)
      a1[2] = &v5[(v6 - v5 + 7) & 0xFFFFFFFFFFFFFFF8];
  }
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_20E9A48DC(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  void *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  BOOL v41;
  int64_t v42;
  unint64_t v43;
  char *v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int64_t v49;
  unint64_t v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  unint64_t v60;
  int64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 *v68;
  char *v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  __int128 *v76;
  _OWORD *v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  __int128 *v84;
  _OWORD *v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  void *v89;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x2A;
  v4 = v2 - 42;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_76:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v35 = (v5 - v9) >> 2;
      if (v5 == v9)
        v35 = 1;
      if (!(v35 >> 61))
      {
        v36 = v35 >> 2;
        v37 = 8 * v35;
        v38 = (char *)operator new(8 * v35);
        v39 = &v38[8 * v36];
        v40 = &v38[v37];
        v42 = v5 - v7;
        v41 = v5 == v7;
        v5 = v39;
        if (!v41)
        {
          v5 = &v39[v42 & 0xFFFFFFFFFFFFFFF8];
          v43 = v42 - 8;
          if ((unint64_t)(v42 - 8) >= 0x38)
          {
            v73 = &v38[8 * v36];
            v44 = v73;
            if ((unint64_t)(v73 - v7) >= 0x20)
            {
              v74 = (v43 >> 3) + 1;
              v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
              v44 = &v39[v75];
              v7 += v75;
              v76 = (__int128 *)(v6 + 3);
              v77 = v73 + 16;
              v78 = v74 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v79 = *v76;
                *(v77 - 1) = *(v76 - 1);
                *v77 = v79;
                v76 += 2;
                v77 += 2;
                v78 -= 4;
              }
              while (v78);
              if (v74 == (v74 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_74;
            }
          }
          else
          {
            v44 = &v38[8 * v36];
          }
          do
          {
            v80 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v44 = v80;
            v44 += 8;
          }
          while (v44 != v5);
        }
        goto LABEL_74;
      }
LABEL_85:
      sub_20E877A38();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_76;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v89 = operator new(0xFC0uLL);
      sub_20E8D0C84((char **)a1, &v89);
      return;
    }
    v89 = operator new(0xFC0uLL);
    sub_20E8D0E10((void **)a1, &v89);
    v45 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v45 + 1);
    v8 = *v45;
    *(_QWORD *)(a1 + 8) = v45 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_76;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v46 = (v5 - v9) >> 2;
      if (v5 == v9)
        v46 = 1;
      if (!(v46 >> 61))
      {
        v47 = v46 >> 2;
        v48 = 8 * v46;
        v38 = (char *)operator new(8 * v46);
        v39 = &v38[8 * v47];
        v40 = &v38[v48];
        v49 = v5 - v7;
        v41 = v5 == v7;
        v5 = v39;
        if (!v41)
        {
          v5 = &v39[v49 & 0xFFFFFFFFFFFFFFF8];
          v50 = v49 - 8;
          if ((unint64_t)(v49 - 8) >= 0x38)
          {
            v81 = &v38[8 * v47];
            v51 = v81;
            if ((unint64_t)(v81 - v7) >= 0x20)
            {
              v82 = (v50 >> 3) + 1;
              v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
              v51 = &v39[v83];
              v7 += v83;
              v84 = (__int128 *)(v45 + 3);
              v85 = v81 + 16;
              v86 = v82 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v87 = *v84;
                *(v85 - 1) = *(v84 - 1);
                *v85 = v87;
                v84 += 2;
                v85 += 2;
                v86 -= 4;
              }
              while (v86);
              if (v82 == (v82 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_74;
            }
          }
          else
          {
            v51 = &v38[8 * v47];
          }
          do
          {
            v88 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v51 = v88;
            v51 += 8;
          }
          while (v51 != v5);
        }
LABEL_74:
        *(_QWORD *)a1 = v38;
        *(_QWORD *)(a1 + 8) = v39;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v40;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_76;
      }
      goto LABEL_85;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_85;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0xFC0uLL);
  v27 = v26;
  v28 = &v25[8 * v21];
  v29 = &v25[8 * v24];
  if (v21 == v24)
  {
    if (v20 < 1)
    {
      if (v18 == v19)
        v52 = 1;
      else
        v52 = v20 >> 2;
      if (v52 >> 61)
        sub_20E877A38();
      v28 = (char *)operator new(8 * v52);
      v29 = &v28[8 * v52];
      operator delete(v25);
      v53 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v28;
      *(_QWORD *)v28 = v27;
      v31 = v28 + 8;
      if (v18 == v53)
        goto LABEL_24;
      do
      {
LABEL_49:
        if (v28 == v25)
        {
          if (v31 >= v29)
          {
            if (v29 == v28)
              v58 = 1;
            else
              v58 = (v29 - v28) >> 2;
            if (v58 >> 61)
              sub_20E877A38();
            v59 = (char *)operator new(8 * v58);
            v25 = v59;
            v60 = (v58 + 3) >> 2;
            v54 = &v59[8 * v60];
            v33 = v54;
            v61 = v31 - v28;
            if (v31 != v28)
            {
              v33 = &v54[v61 & 0xFFFFFFFFFFFFFFF8];
              v62 = v61 - 8;
              v63 = &v59[8 * v60];
              v64 = v28;
              if (v62 < 0x38)
                goto LABEL_89;
              v65 = 8 * v60;
              v63 = &v59[8 * v60];
              v64 = v28;
              if ((unint64_t)(v63 - v28) < 0x20)
                goto LABEL_89;
              v66 = (v62 >> 3) + 1;
              v67 = 8 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
              v63 = &v54[v67];
              v64 = &v28[v67];
              v68 = (__int128 *)(v28 + 16);
              v69 = &v59[v65 + 16];
              v70 = v66 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v71 = *v68;
                *((_OWORD *)v69 - 1) = *(v68 - 1);
                *(_OWORD *)v69 = v71;
                v68 += 2;
                v69 += 32;
                v70 -= 4;
              }
              while (v70);
              if (v66 != (v66 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_89:
                do
                {
                  v72 = *(_QWORD *)v64;
                  v64 += 8;
                  *(_QWORD *)v63 = v72;
                  v63 += 8;
                }
                while (v63 != v33);
              }
            }
            v29 = &v59[8 * v58];
            operator delete(v28);
          }
          else
          {
            v56 = (v29 - v31) >> 3;
            if (v56 >= -1)
              v57 = v56 + 1;
            else
              v57 = v56 + 2;
            v33 = &v31[8 * (v57 >> 1)];
            v54 = &v28[8 * (v57 >> 1)];
            if (v31 == v28)
            {
              v25 = v31;
            }
            else
            {
              memmove(&v28[8 * (v57 >> 1)], v28, v31 - v28);
              v25 = v28;
            }
          }
        }
        else
        {
          v54 = v28;
          v33 = v31;
        }
        v55 = *(_QWORD *)(v18 - 8);
        v18 -= 8;
        *((_QWORD *)v54 - 1) = v55;
        v32 = v54 - 8;
        v31 = v33;
        v28 = v32;
      }
      while (v18 != *(_QWORD *)(a1 + 8));
      goto LABEL_25;
    }
    v30 = v21 + 2;
    if (v21 >= -1)
      v30 = v21 + 1;
    v28 -= 8 * (v30 >> 1);
  }
  *(_QWORD *)v28 = v26;
  v31 = v28 + 8;
  if (v18 != v19)
    goto LABEL_49;
LABEL_24:
  v32 = v28;
  v33 = v31;
LABEL_25:
  v34 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v32;
  *(_QWORD *)(a1 + 16) = v33;
  *(_QWORD *)(a1 + 24) = v29;
  if (v34)
    operator delete(v34);
}

void sub_20E9A4E1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20E9A4E38(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20E9A4E4C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20E9A4E64(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20E9A4E7C(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  char *v21;
  char *v22;
  void *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  unint64_t v35;
  int64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 *v44;
  char *v45;
  uint64_t v46;
  __int128 v47;
  void *v48;

  v3 = *(uint64_t **)(a1 + 8);
  v2 = *(uint64_t **)(a1 + 16);
  v4 = v2 - v3;
  if (v2 == v3)
    v5 = 0;
  else
    v5 = 42 * v4 - 1;
  v6 = *(_QWORD *)(a1 + 32);
  if ((unint64_t)(v5 - (*(_QWORD *)(a1 + 40) + v6)) >= 0x2A)
  {
    *(_QWORD *)(a1 + 32) = v6 + 42;
    v48 = (void *)*(v2 - 1);
    *(_QWORD *)(a1 + 16) = v2 - 1;
    sub_20E8D0E10((void **)a1, &v48);
    return;
  }
  v7 = *(uint64_t **)(a1 + 24);
  v8 = *(uint64_t **)a1;
  v9 = (uint64_t)v7 - *(_QWORD *)a1;
  if (v4 < v9 >> 3)
  {
    if (v3 == v8)
    {
      v48 = operator new(0xFC0uLL);
      sub_20E8D0C84((char **)a1, &v48);
      v18 = *(_QWORD *)(a1 + 16);
      v48 = *(void **)(v18 - 8);
      *(_QWORD *)(a1 + 16) = v18 - 8;
      sub_20E8D0E10((void **)a1, &v48);
      if (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) == 8)
        goto LABEL_9;
    }
    else
    {
      v48 = operator new(0xFC0uLL);
      sub_20E8D0E10((void **)a1, &v48);
      if (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) == 8)
      {
LABEL_9:
        v10 = 21;
LABEL_19:
        *(_QWORD *)(a1 + 32) = v10;
        return;
      }
    }
    v10 = *(_QWORD *)(a1 + 32) + 42;
    goto LABEL_19;
  }
  if (v7 == v8)
    v11 = 1;
  else
    v11 = v9 >> 2;
  if (v11 >> 61)
    sub_20E877A38();
  v12 = (char *)operator new(8 * v11);
  v13 = operator new(0xFC0uLL);
  v14 = v13;
  if (v11)
  {
    v15 = &v12[8 * v11];
    *(_QWORD *)v12 = v13;
    v16 = v12 + 8;
    v17 = v12;
    if (v3 != v2)
      goto LABEL_27;
    goto LABEL_21;
  }
  v19 = (char *)operator new(8uLL);
  v15 = v19 + 8;
  operator delete(v12);
  v3 = *(uint64_t **)(a1 + 8);
  v20 = *(uint64_t **)(a1 + 16);
  v12 = v19;
  *(_QWORD *)v19 = v14;
  v16 = v19 + 8;
  v17 = v19;
  if (v3 != v20)
  {
    while (1)
    {
LABEL_27:
      if (v16 == v15)
      {
        if (v12 <= v17)
        {
          if (v16 == v17)
            v32 = 1;
          else
            v32 = (v16 - v17) >> 2;
          if (v32 >> 61)
            sub_20E877A38();
          v33 = (char *)operator new(8 * v32);
          v34 = v33;
          v35 = v32 >> 2;
          v21 = &v33[8 * (v32 >> 2)];
          v24 = v21;
          v36 = v16 - v12;
          if (v16 != v12)
          {
            v24 = &v21[v36 & 0xFFFFFFFFFFFFFFF8];
            v37 = v36 - 8;
            if (v37 < 0x38 || (v38 = 8 * v35, (unint64_t)(&v33[8 * v35] - v12) < 0x20))
            {
              v39 = &v33[8 * (v32 >> 2)];
              v40 = v12;
              goto LABEL_43;
            }
            v42 = (v37 >> 3) + 1;
            v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
            v39 = &v21[v43];
            v40 = &v12[v43];
            v44 = (__int128 *)(v12 + 16);
            v45 = &v33[v38 + 16];
            v46 = v42 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v47 = *v44;
              *((_OWORD *)v45 - 1) = *(v44 - 1);
              *(_OWORD *)v45 = v47;
              v44 += 2;
              v45 += 32;
              v46 -= 4;
            }
            while (v46);
            if (v42 != (v42 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_43:
                v41 = *(_QWORD *)v40;
                v40 += 8;
                *(_QWORD *)v39 = v41;
                v39 += 8;
              }
              while (v39 != v24);
            }
          }
          v16 = &v33[8 * v32];
          if (v17)
            operator delete(v17);
          v17 = v34;
          goto LABEL_26;
        }
        v26 = (v12 - v17) >> 3;
        if (v26 >= -1)
          v27 = v26 + 1;
        else
          v27 = v26 + 2;
        v28 = v27 >> 1;
        v29 = &v12[-8 * (v27 >> 1)];
        v30 = v16;
        if (v16 != v12)
        {
          memmove(v29, v12, v16 - v12);
          v30 = v12;
        }
        v31 = -v28;
        v24 = &v29[v16 - v12];
        v21 = &v30[8 * v31];
      }
      else
      {
        v21 = v12;
        v24 = v16;
        v16 = v15;
      }
LABEL_26:
      v15 = v16;
      v25 = *v3++;
      *(_QWORD *)v24 = v25;
      v22 = v24 + 8;
      v16 = v22;
      v12 = v21;
      if (v3 == *(uint64_t **)(a1 + 16))
        goto LABEL_22;
    }
  }
LABEL_21:
  v21 = v12;
  v22 = v16;
LABEL_22:
  v23 = *(void **)a1;
  *(_QWORD *)a1 = v17;
  *(_QWORD *)(a1 + 8) = v21;
  *(_QWORD *)(a1 + 16) = v22;
  *(_QWORD *)(a1 + 24) = v15;
  if (v22 - v21 == 8)
  {
    *(_QWORD *)(a1 + 32) = 21;
    if (v23)
LABEL_24:
      operator delete(v23);
  }
  else
  {
    *(_QWORD *)(a1 + 32) += 42;
    if (v23)
      goto LABEL_24;
  }
}

void sub_20E9A51F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v1);
  operator delete(v2);
  _Unwind_Resume(a1);
}

char *sub_20E9A5234(char **a1, char *a2, char *a3, size_t __sz)
{
  char *v6;
  uint64_t v8;
  char *result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  int64_t v16;
  _QWORD *v17;
  char *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;
  char *v24;
  char *v25;

  v6 = a2;
  v8 = (uint64_t)a1[2];
  result = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 3) >= __sz)
  {
    v18 = a1[1];
    v17 = a1 + 1;
    v14 = v18;
    v19 = 0xAAAAAAAAAAAAAAABLL * ((v18 - result) >> 3);
    if (v19 >= __sz)
    {
      v24 = result;
      if (a2 != a3)
      {
        v25 = result;
        do
        {
          *(_OWORD *)v25 = *(_OWORD *)v6;
          v25[16] = v6[16];
          v24 += 24;
          v6 += 24;
          v25 += 24;
        }
        while (v6 != a3);
      }
      v16 = v24 - result;
      v14 = result;
    }
    else
    {
      v20 = &a2[24 * v19];
      if (v14 != result)
      {
        do
        {
          *(_OWORD *)result = *(_OWORD *)v6;
          result[16] = v6[16];
          v6 += 24;
          result += 24;
        }
        while (v6 != v20);
      }
      v21 = v14;
      if (v20 != a3)
      {
        v22 = v14;
        do
        {
          v23 = *(_OWORD *)v20;
          *((_QWORD *)v22 + 2) = *((_QWORD *)v20 + 2);
          *(_OWORD *)v22 = v23;
          v22 += 24;
          v20 += 24;
          v21 += 24;
        }
        while (v20 != a3);
      }
      v16 = v21 - v14;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_26;
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= __sz)
      v11 = __sz;
    v12 = v10 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v11;
    if (v12 > 0xAAAAAAAAAAAAAAALL)
LABEL_26:
      sub_20E867F44();
    v13 = 24 * v12;
    result = (char *)operator new(24 * v12);
    v14 = result;
    *a1 = result;
    a1[1] = result;
    a1[2] = &result[v13];
    v15 = result;
    if (v6 != a3)
    {
      result = (char *)memcpy(result, v6, 24 * ((a3 - v6 - 24) / 0x18uLL) + 24);
      v15 = &v14[24 * ((a3 - v6 - 24) / 0x18uLL) + 24];
    }
    v16 = v15 - v14;
    v17 = a1 + 1;
  }
  *v17 = &v14[v16];
  return result;
}

double *sub_20E9A5430(double **a1, unint64_t a2, char *a3, size_t __sz)
{
  uint64_t v8;
  double *v9;
  double *v10;
  unint64_t v11;
  uint64_t v12;
  double *result;
  double **v14;
  double *v15;
  unint64_t v16;
  char *v17;
  int64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double *v35;
  const double *v36;
  uint64_t v37;
  const double *v38;
  double *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  unint64_t v44;
  BOOL v46;
  unint64_t v48;
  uint64_t v49;
  const double *v50;
  double *v51;
  uint64_t v52;
  const double *v53;
  double *v54;
  char *v55;
  unint64_t v56;
  BOOL v58;
  uint64_t v60;
  uint64_t v61;
  double *v62;
  const double *v63;
  uint64_t v64;
  const double *v65;
  double *v66;
  unint64_t v67;
  char *v68;
  unint64_t v69;
  unint64_t v70;
  BOOL v71;
  char v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  const double *v76;
  double *v77;
  uint64_t v78;
  const double *v79;
  float64x2x2_t v80;
  float64x2x2_t v81;
  float64x2x2_t v82;
  float64x2x2_t v83;
  float64x2x2_t v84;
  float64x2x2_t v85;
  float64x2x2_t v86;
  float64x2x2_t v87;

  v8 = (uint64_t)a1[2];
  v9 = *a1;
  v10 = *a1;
  if (__sz > (v8 - (uint64_t)*a1) >> 4)
  {
    if (v10)
    {
      a1[1] = v10;
      operator delete(v10);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz >> 60)
      goto LABEL_85;
    v11 = v8 >> 3;
    if (v8 >> 3 <= __sz)
      v11 = __sz;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    if (v11 >> 60)
LABEL_85:
      sub_20E867F44();
    v12 = 2 * v11;
    result = (double *)operator new(16 * v11);
    *a1 = result;
    v14 = a1 + 1;
    a1[2] = &result[v12];
    v15 = result;
    if ((char *)a2 == a3)
      goto LABEL_34;
    v16 = (unint64_t)&a3[-a2 - 16];
    if (v16 >= 0x30)
    {
      v33 = (v16 >> 4) + 1;
      v34 = 2 * (v33 & 0x1FFFFFFFFFFFFFFCLL);
      v17 = (char *)(a2 + v34 * 8);
      v15 = &result[v34];
      v35 = result + 4;
      v36 = (const double *)(a2 + 32);
      v37 = v33 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        v38 = v36 - 4;
        v80 = vld2q_f64(v38);
        v84 = vld2q_f64(v36);
        v39 = v35 - 4;
        vst2q_f64(v39, v80);
        vst2q_f64(v35, v84);
        v35 += 8;
        v36 += 8;
        v37 -= 4;
      }
      while (v37);
      if (v33 == (v33 & 0x1FFFFFFFFFFFFFFCLL))
        goto LABEL_34;
    }
    else
    {
      v17 = (char *)a2;
      v15 = result;
    }
    do
    {
      v40 = *(_QWORD *)v17;
      v41 = *((_QWORD *)v17 + 1);
      v17 += 16;
      *(_QWORD *)v15 = v40;
      *((_QWORD *)v15 + 1) = v41;
      v15 += 2;
    }
    while (v17 != a3);
LABEL_34:
    *v14 = v15;
    return result;
  }
  result = a1[1];
  v14 = a1 + 1;
  v18 = (char *)result - (char *)v9;
  v19 = ((char *)result - (char *)v9) >> 4;
  if (v19 < __sz)
  {
    v20 = (char *)(a2 + 16 * v19);
    if (result == v9)
      goto LABEL_18;
    if ((unint64_t)(v18 - 16) >= 0xF0)
    {
      v42 = (v18 & 0xFFFFFFFFFFFFFFF0) - 8;
      v43 = (char *)v9 + v42;
      v44 = a2 + v42;
      v46 = (unint64_t)(v9 + 1) < a2 + (v18 & 0xFFFFFFFFFFFFFFF0)
         && a2 + 8 < (unint64_t)v9 + (v18 & 0xFFFFFFFFFFFFFFF0);
      v21 = (char *)a2;
      if (((unint64_t)v43 <= a2 || (unint64_t)v9 >= v44) && !v46)
      {
        v48 = ((unint64_t)(v18 - 16) >> 4) + 1;
        v49 = 2 * (v48 & 0x1FFFFFFFFFFFFFFCLL);
        v10 = &v9[v49];
        v21 = (char *)(a2 + v49 * 8);
        v50 = (const double *)(a2 + 32);
        v51 = v9 + 4;
        v52 = v48 & 0x1FFFFFFFFFFFFFFCLL;
        do
        {
          v53 = v50 - 4;
          v81 = vld2q_f64(v53);
          v85 = vld2q_f64(v50);
          v54 = v51 - 4;
          vst2q_f64(v54, v81);
          vst2q_f64(v51, v85);
          v50 += 8;
          v51 += 8;
          v52 -= 4;
        }
        while (v52);
        if (v48 == (v48 & 0x1FFFFFFFFFFFFFFCLL))
        {
LABEL_18:
          if (v20 == a3)
          {
            v15 = result;
          }
          else
          {
            v24 = (char *)(v18 + a2);
            v25 = (unint64_t)&a3[-v18 - a2 - 16];
            if (v25 >= 0x170)
            {
              v55 = &v24[v25 & 0xFFFFFFFFFFFFFFF0];
              v56 = (unint64_t)(v24 + 8);
              v58 = result + 1 < (double *)v55 + 2 && v56 < (unint64_t)result + (v25 & 0xFFFFFFFFFFFFFFF0) + 16;
              v15 = result;
              if ((v20 >= (char *)result + (v25 & 0xFFFFFFFFFFFFFFF0) + 8 || result >= (double *)v55 + 1) && !v58)
              {
                v60 = (v25 >> 4) + 1;
                v61 = 2 * (v60 & 0x1FFFFFFFFFFFFFFCLL);
                v20 += v61 * 8;
                v15 = &result[v61];
                v62 = result + 4;
                v63 = (const double *)(a2 + 16 * v19 + 32);
                v64 = v60 & 0x1FFFFFFFFFFFFFFCLL;
                do
                {
                  v65 = v63 - 4;
                  v82 = vld2q_f64(v65);
                  v86 = vld2q_f64(v63);
                  v66 = v62 - 4;
                  vst2q_f64(v66, v82);
                  vst2q_f64(v62, v86);
                  v62 += 8;
                  v63 += 8;
                  v64 -= 4;
                }
                while (v64);
                if (v60 == (v60 & 0x1FFFFFFFFFFFFFFCLL))
                  goto LABEL_34;
              }
            }
            else
            {
              v15 = result;
            }
            do
            {
              v26 = *(_QWORD *)v20;
              v27 = *((_QWORD *)v20 + 1);
              v20 += 16;
              *(_QWORD *)v15 = v26;
              *((_QWORD *)v15 + 1) = v27;
              v15 += 2;
            }
            while (v20 != a3);
          }
          goto LABEL_34;
        }
      }
    }
    else
    {
      v21 = (char *)a2;
    }
    do
    {
      v22 = *(_QWORD *)v21;
      v23 = *((_QWORD *)v21 + 1);
      v21 += 16;
      *(_QWORD *)v10 = v22;
      *((_QWORD *)v10 + 1) = v23;
      v10 += 2;
    }
    while (v21 != v20);
    goto LABEL_18;
  }
  if ((char *)a2 == a3)
  {
    v29 = (char *)v10;
  }
  else
  {
    v28 = (unint64_t)&a3[-a2 - 16];
    if (v28 < 0xF0
      || ((v67 = v28 & 0xFFFFFFFFFFFFFFF0 | 8,
           v68 = (char *)v9 + v67,
           v69 = a2 + v67,
           v70 = (v28 & 0xFFFFFFFFFFFFFFF0) + 16,
           (unint64_t)(v9 + 1) < a2 + v70)
        ? (v71 = a2 + 8 >= (unint64_t)v9 + v70)
        : (v71 = 1),
          v71 ? (v72 = 0) : (v72 = 1),
          (unint64_t)v68 > a2 ? (v73 = (unint64_t)v9 >= v69) : (v73 = 1),
          !v73 || (v72 & 1) != 0))
    {
      v29 = (char *)v10;
      v30 = (char *)a2;
    }
    else
    {
      v74 = (v28 >> 4) + 1;
      v75 = 2 * (v74 & 0x1FFFFFFFFFFFFFFCLL);
      v29 = (char *)&v9[v75];
      v30 = (char *)(a2 + v75 * 8);
      v76 = (const double *)(a2 + 32);
      v77 = v9 + 4;
      v78 = v74 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        v79 = v76 - 4;
        v83 = vld2q_f64(v79);
        v87 = vld2q_f64(v76);
        result = v77 - 4;
        vst2q_f64(result, v83);
        vst2q_f64(v77, v87);
        v76 += 8;
        v77 += 8;
        v78 -= 4;
      }
      while (v78);
      if (v74 == (v74 & 0x1FFFFFFFFFFFFFFCLL))
        goto LABEL_36;
    }
    do
    {
      v31 = *(_QWORD *)v30;
      v32 = *((_QWORD *)v30 + 1);
      v30 += 16;
      *(_QWORD *)v29 = v31;
      *((_QWORD *)v29 + 1) = v32;
      v29 += 16;
    }
    while (v30 != a3);
  }
LABEL_36:
  *v14 = (double *)((char *)v10 + v29 - (char *)v9);
  return result;
}

void sub_20E9A5824()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20E9A5838()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C9B3B78;
  return result;
}

void sub_20E9A585C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C9B3B78;
}

void sub_20E9A5874(uint64_t a1, int *a2, uint64_t a3)
{
  int v4;
  int v5;
  unint64_t v6;
  unint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  size_t v12;
  unsigned __int8 v13;
  const char *v14;
  size_t v15;
  _BYTE *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  std::__shared_weak_count_vtbl *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  size_t v28;
  size_t v29;
  _BYTE *v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  _QWORD *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  char *v40;
  char *shared_owners;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  const char *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  int v61;
  std::__shared_weak_count_vtbl *v62;
  std::__shared_weak_count *v63;
  const char *v64;
  uint64_t v65;
  int v66;
  _QWORD v67[3];
  int v68;
  const char *v69;
  int v70;
  const char *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  uint64_t v74;
  _BYTE object[24];
  unint64_t v76;
  char v77;
  void *__p[2];
  unint64_t v79;
  char v80;
  _QWORD v81[5];

  v81[2] = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  sub_20E975C18(&v74);
  if (**(int **)(v74 + 56) > 3)
    return;
  v5 = *(unsigned __int8 *)(v74 + 72);
  v6 = sub_20E8C31DC(v74, "OSLogSurrogateAppender", 1, 0);
  if (!v5 && v6 == 0)
    return;
  v8 = v6;
  v67[0] = &v74;
  v67[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v67[2] = std::chrono::system_clock::now().__d_.__rep_;
  v68 = 3;
  v69 = "unknown file";
  v70 = 2208;
  v72 = 0;
  v73 = 0;
  v71 = "unknown function";
  if (*(char *)(a3 + 23) >= 0)
    v9 = (const char *)a3;
  else
    v9 = *(const char **)a3;
  v10 = *(_QWORD *)v67[0];
  v11 = (const char *)(*(_QWORD *)v67[0] + 16);
  v64 = v11;
  v65 = *(_QWORD *)v67[0];
  if (*(char *)(*(_QWORD *)v67[0] + 39) < 0)
  {
    v11 = *(const char **)(v10 + 16);
    v12 = *(_QWORD *)(v10 + 24);
  }
  else
  {
    v12 = *(unsigned __int8 *)(*(_QWORD *)v67[0] + 39);
  }
  v66 = v5;
  v13 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)object);
    if ((_BYTE)v76)
    {
      *(_OWORD *)byte_254A4A4F8 = *(_OWORD *)object;
      *(_QWORD *)&byte_254A4A4F8[16] = *(_QWORD *)&object[16];
    }
    else
    {
      byte_254A4A4F8[23] = 14;
      strcpy(byte_254A4A4F8, "com.apple.cv3d");
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v14 = byte_254A4A4F8;
  else
    v14 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v15 = byte_254A4A4F8[23];
  else
    v15 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)object = os_log_create(v14, v11);
  v16 = &object[8];
  if (v15 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v15 >= 0x17)
  {
    v17 = v9;
    v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v18 = v15 | 7;
    v19 = v18 + 1;
    v16 = operator new(v18 + 1);
    *(_QWORD *)&object[16] = v15;
    v76 = v19 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v16;
    v9 = v17;
    goto LABEL_26;
  }
  HIBYTE(v76) = v15;
  if (v15)
LABEL_26:
    memmove(v16, v14, v15);
  v16[v15] = 0;
  v77 = 1;
  v20 = __p;
  if (v12 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v12 >= 0x17)
  {
    v22 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v22 = v12 | 7;
    v23 = v22 + 1;
    v20 = operator new(v22 + 1);
    __p[1] = (void *)v12;
    v79 = v23 | 0x8000000000000000;
    __p[0] = v20;
  }
  else
  {
    HIBYTE(v79) = v12;
    if (!v12)
    {
      LOBYTE(__p[0]) = 0;
      v80 = 1;
      v21 = *(NSObject **)object;
      if ((SHIBYTE(v79) & 0x80000000) == 0)
        goto LABEL_31;
      goto LABEL_37;
    }
  }
  memmove(v20, v11, v12);
  *((_BYTE *)v20 + v12) = 0;
  v80 = 1;
  v21 = *(NSObject **)object;
  if ((SHIBYTE(v79) & 0x80000000) == 0)
  {
LABEL_31:
    if (!v77)
      goto LABEL_40;
    goto LABEL_38;
  }
LABEL_37:
  operator delete(__p[0]);
  if (!v77)
    goto LABEL_40;
LABEL_38:
  if (SHIBYTE(v76) < 0)
    operator delete(*(void **)&object[8]);
LABEL_40:
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  if (!v8 || !*(_QWORD *)(v8 + 24))
  {
    os_log_type_enabled(v21, OS_LOG_TYPE_INFO);
    *(_DWORD *)object = 67109378;
    *(_DWORD *)&object[4] = v4;
    *(_WORD *)&object[8] = 2080;
    *(_QWORD *)&object[10] = v9;
    v31 = (void *)_os_log_send_and_compose_impl();
    if (v31)
      free(v31);
    goto LABEL_80;
  }
  v24 = _os_log_pack_size();
  v25 = (std::__shared_weak_count_vtbl *)operator new(v24, (std::align_val_t)8uLL);
  v26 = (std::__shared_weak_count *)operator new();
  v26->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v26->__shared_owners_;
  v26->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
  v26->__shared_weak_owners_ = 0;
  v26[1].__vftable = v25;
  v62 = v25;
  v28 = strlen(v9);
  v63 = v26;
  if (v28 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v29 = v28;
  v61 = v4;
  if (v28 >= 0x17)
  {
    v32 = v9;
    v33 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17)
      v33 = v28 | 7;
    v34 = v33 + 1;
    v30 = operator new(v33 + 1);
    *(_QWORD *)&object[8] = v29;
    *(_QWORD *)&object[16] = v34 | 0x8000000000000000;
    *(_QWORD *)object = v30;
    v9 = v32;
    goto LABEL_53;
  }
  object[23] = v28;
  v30 = object;
  if (v28)
LABEL_53:
    memcpy(v30, v9, v29);
  v30[v29] = 0;
  v35 = *(_QWORD *)object;
  v81[0] = *(_QWORD *)&object[8];
  *(_QWORD *)((char *)v81 + 7) = *(_QWORD *)&object[15];
  v36 = object[23];
  v37 = operator new(0x38uLL);
  v38 = (std::__shared_weak_count *)v37;
  v37[1] = 0;
  v39 = v37 + 1;
  v37[3] = off_24C9B31C8;
  v40 = (char *)(v37 + 3);
  v37[2] = 0;
  v37[4] = v35;
  shared_owners = (char *)(v37 + 4);
  *v37 = &off_24C9B3178;
  v37[5] = v81[0];
  *(_QWORD *)((char *)v37 + 47) = *(_QWORD *)((char *)v81 + 7);
  *((_BYTE *)v37 + 55) = v36;
  do
    v42 = __ldxr(p_shared_owners);
  while (__stxr(v42 + 1, p_shared_owners));
  v4 = v61;
  do
    v43 = __ldxr(v39);
  while (__stxr(v43 + 1, v39));
  do
    v44 = __ldaxr(v39);
  while (__stlxr(v44 - 1, v39));
  if (!v44)
  {
    (*(void (**)(_QWORD *))(*v37 + 16))(v37);
    std::__shared_weak_count::__release_weak(v38);
  }
  do
    v45 = __ldaxr(p_shared_owners);
  while (__stlxr(v45 - 1, p_shared_owners));
  if (!v45)
  {
    ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
    std::__shared_weak_count::__release_weak(v63);
  }
  if (SHIBYTE(v38[2].__vftable) < 0)
    shared_owners = (char *)v38[1].__shared_owners_;
  v46 = _os_log_pack_fill();
  *(_DWORD *)v46 = 67109378;
  *(_DWORD *)(v46 + 4) = v61;
  *(_WORD *)(v46 + 8) = 2080;
  *(_QWORD *)(v46 + 10) = shared_owners;
  v47 = operator new();
  v48 = *(unsigned __int8 *)(v65 + 39);
  v49 = v64;
  if ((v48 & 0x80u) != 0)
  {
    v49 = *(const char **)(v65 + 16);
    v48 = *(_QWORD *)(v65 + 24);
  }
  *(_QWORD *)v47 = v62;
  *(_QWORD *)(v47 + 8) = v62;
  *(_QWORD *)(v47 + 16) = v63;
  *(_QWORD *)(v47 + 24) = v40;
  *(_QWORD *)(v47 + 32) = v38;
  *(_QWORD *)(v47 + 40) = v49;
  *(_QWORD *)(v47 + 48) = v48;
  *(_BYTE *)(v47 + 56) = 1;
  *(_QWORD *)object = v47;
  (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v8 + 24) + 40))(*(_QWORD *)(v8 + 24), object);
  v50 = *(_QWORD *)object;
  *(_QWORD *)object = 0;
  if (v50)
  {
    v51 = *(std::__shared_weak_count **)(v50 + 32);
    if (v51)
    {
      v52 = (unint64_t *)&v51->__shared_owners_;
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    v54 = *(std::__shared_weak_count **)(v50 + 16);
    if (v54)
    {
      v55 = (unint64_t *)&v54->__shared_owners_;
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    MEMORY[0x212BC6398](v50, 0x10F0C40B62ED6C6);
  }
LABEL_80:
  if (v66)
  {
    if (*(char *)(a3 + 23) >= 0)
      v57 = (const char *)a3;
    else
      v57 = *(const char **)a3;
    sub_20E8C003C((uint64_t)v67, "SLAMCalibration (%d): %s", v4, v57);
    sub_20E863570((uint64_t)v67);
  }
  sub_20E863570((uint64_t)v67);
  v58 = v73;
  if (v73)
  {
    v59 = (unint64_t *)&v73->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
}

void sub_20E9A5FEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27,uint64_t a28,void *object,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;

  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863570((uint64_t)&a19);
  v37 = a27;
  if (a27)
  {
    p_shared_owners = (unint64_t *)&a27->__shared_owners_;
    do
      v39 = __ldaxr(p_shared_owners);
    while (__stlxr(v39 - 1, p_shared_owners));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20E9A6218(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d9applecv3d4slam7Session23LogConfigAndCalibrationEPK14CV3DSLAMConfigPK19CV3DSLAMCalibrationbE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d9applecv3d4slam7Session23LogConfigAndCalibrationEPK14CV3DSLAMConfigPK19CV3DSLAMC"
                                "alibrationbE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d9applecv3d4slam7Session23LogConfigAndCalibrationEPK14CV3DSLAMConfigPK19CV3DSLAMCalibrationbE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d9applecv3d4slam7Session23LogConfigAndCalibrationEPK14CV3DSLAMConfigPK19CV3DSLAMCalibrationbE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E9A6284()
{
  return &unk_24C9B3BE8;
}

void sub_20E9A6294()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20E9A62A8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C9B3C08;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20E9A62E0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C9B3C08;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20E9A6300(uint64_t a1)
{
  free(**(void ***)(a1 + 8));
}

uint64_t sub_20E9A630C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNKS_9applecv3d4slam7Session23LogConfigAndCalibration"
                     "EPK14CV3DSLAMConfigPK19CV3DSLAMCalibrationbE3$_1JEEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNKS_9applecv3d4slam7Session23LogConfigAnd"
                                "CalibrationEPK14CV3DSLAMConfigPK19CV3DSLAMCalibrationbE3$_1JEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNKS_9applecv3d4slam7Session23LogConfigAndCalibrationEPK14CV3DSLAMConfigPK19CV3DSLAMCalibrationbE3$_1JEEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNKS_9applecv3d4slam7Session23LogConfigAndCalibrationEPK14CV3DSLAMConfigPK19CV3DSLAMCalibrationbE3$_1JEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E9A6378()
{
  return &unk_24C9B3C68;
}

void sub_20E9A6388()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20E9A639C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C9B3C88;
  return result;
}

void sub_20E9A63C0(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C9B3C88;
}

void sub_20E9A63D8(uint64_t a1, int *a2, uint64_t a3)
{
  int v4;
  int v5;
  unint64_t v6;
  unint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  size_t v12;
  unsigned __int8 v13;
  const char *v14;
  size_t v15;
  _BYTE *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  std::__shared_weak_count_vtbl *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  size_t v28;
  size_t v29;
  _BYTE *v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  _QWORD *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  char *v40;
  char *shared_owners;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  const char *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  int v61;
  std::__shared_weak_count_vtbl *v62;
  std::__shared_weak_count *v63;
  const char *v64;
  uint64_t v65;
  int v66;
  _QWORD v67[3];
  int v68;
  const char *v69;
  int v70;
  const char *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  uint64_t v74;
  _BYTE object[24];
  unint64_t v76;
  char v77;
  void *__p[2];
  unint64_t v79;
  char v80;
  _QWORD v81[5];

  v81[2] = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  sub_20E975C18(&v74);
  if (**(int **)(v74 + 56) > 3)
    return;
  v5 = *(unsigned __int8 *)(v74 + 72);
  v6 = sub_20E8C31DC(v74, "OSLogSurrogateAppender", 1, 0);
  if (!v5 && v6 == 0)
    return;
  v8 = v6;
  v67[0] = &v74;
  v67[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v67[2] = std::chrono::system_clock::now().__d_.__rep_;
  v68 = 3;
  v69 = "unknown file";
  v70 = 2218;
  v72 = 0;
  v73 = 0;
  v71 = "unknown function";
  if (*(char *)(a3 + 23) >= 0)
    v9 = (const char *)a3;
  else
    v9 = *(const char **)a3;
  v10 = *(_QWORD *)v67[0];
  v11 = (const char *)(*(_QWORD *)v67[0] + 16);
  v64 = v11;
  v65 = *(_QWORD *)v67[0];
  if (*(char *)(*(_QWORD *)v67[0] + 39) < 0)
  {
    v11 = *(const char **)(v10 + 16);
    v12 = *(_QWORD *)(v10 + 24);
  }
  else
  {
    v12 = *(unsigned __int8 *)(*(_QWORD *)v67[0] + 39);
  }
  v66 = v5;
  v13 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)object);
    if ((_BYTE)v76)
    {
      *(_OWORD *)byte_254A4A4F8 = *(_OWORD *)object;
      *(_QWORD *)&byte_254A4A4F8[16] = *(_QWORD *)&object[16];
    }
    else
    {
      byte_254A4A4F8[23] = 14;
      strcpy(byte_254A4A4F8, "com.apple.cv3d");
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v14 = byte_254A4A4F8;
  else
    v14 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v15 = byte_254A4A4F8[23];
  else
    v15 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)object = os_log_create(v14, v11);
  v16 = &object[8];
  if (v15 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v15 >= 0x17)
  {
    v17 = v9;
    v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v18 = v15 | 7;
    v19 = v18 + 1;
    v16 = operator new(v18 + 1);
    *(_QWORD *)&object[16] = v15;
    v76 = v19 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v16;
    v9 = v17;
    goto LABEL_26;
  }
  HIBYTE(v76) = v15;
  if (v15)
LABEL_26:
    memmove(v16, v14, v15);
  v16[v15] = 0;
  v77 = 1;
  v20 = __p;
  if (v12 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v12 >= 0x17)
  {
    v22 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v22 = v12 | 7;
    v23 = v22 + 1;
    v20 = operator new(v22 + 1);
    __p[1] = (void *)v12;
    v79 = v23 | 0x8000000000000000;
    __p[0] = v20;
  }
  else
  {
    HIBYTE(v79) = v12;
    if (!v12)
    {
      LOBYTE(__p[0]) = 0;
      v80 = 1;
      v21 = *(NSObject **)object;
      if ((SHIBYTE(v79) & 0x80000000) == 0)
        goto LABEL_31;
      goto LABEL_37;
    }
  }
  memmove(v20, v11, v12);
  *((_BYTE *)v20 + v12) = 0;
  v80 = 1;
  v21 = *(NSObject **)object;
  if ((SHIBYTE(v79) & 0x80000000) == 0)
  {
LABEL_31:
    if (!v77)
      goto LABEL_40;
    goto LABEL_38;
  }
LABEL_37:
  operator delete(__p[0]);
  if (!v77)
    goto LABEL_40;
LABEL_38:
  if (SHIBYTE(v76) < 0)
    operator delete(*(void **)&object[8]);
LABEL_40:
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  if (!v8 || !*(_QWORD *)(v8 + 24))
  {
    os_log_type_enabled(v21, OS_LOG_TYPE_INFO);
    *(_DWORD *)object = 67109378;
    *(_DWORD *)&object[4] = v4;
    *(_WORD *)&object[8] = 2080;
    *(_QWORD *)&object[10] = v9;
    v31 = (void *)_os_log_send_and_compose_impl();
    if (v31)
      free(v31);
    goto LABEL_80;
  }
  v24 = _os_log_pack_size();
  v25 = (std::__shared_weak_count_vtbl *)operator new(v24, (std::align_val_t)8uLL);
  v26 = (std::__shared_weak_count *)operator new();
  v26->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v26->__shared_owners_;
  v26->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
  v26->__shared_weak_owners_ = 0;
  v26[1].__vftable = v25;
  v62 = v25;
  v28 = strlen(v9);
  v63 = v26;
  if (v28 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v29 = v28;
  v61 = v4;
  if (v28 >= 0x17)
  {
    v32 = v9;
    v33 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17)
      v33 = v28 | 7;
    v34 = v33 + 1;
    v30 = operator new(v33 + 1);
    *(_QWORD *)&object[8] = v29;
    *(_QWORD *)&object[16] = v34 | 0x8000000000000000;
    *(_QWORD *)object = v30;
    v9 = v32;
    goto LABEL_53;
  }
  object[23] = v28;
  v30 = object;
  if (v28)
LABEL_53:
    memcpy(v30, v9, v29);
  v30[v29] = 0;
  v35 = *(_QWORD *)object;
  v81[0] = *(_QWORD *)&object[8];
  *(_QWORD *)((char *)v81 + 7) = *(_QWORD *)&object[15];
  v36 = object[23];
  v37 = operator new(0x38uLL);
  v38 = (std::__shared_weak_count *)v37;
  v37[1] = 0;
  v39 = v37 + 1;
  v37[3] = off_24C9B31C8;
  v40 = (char *)(v37 + 3);
  v37[2] = 0;
  v37[4] = v35;
  shared_owners = (char *)(v37 + 4);
  *v37 = &off_24C9B3178;
  v37[5] = v81[0];
  *(_QWORD *)((char *)v37 + 47) = *(_QWORD *)((char *)v81 + 7);
  *((_BYTE *)v37 + 55) = v36;
  do
    v42 = __ldxr(p_shared_owners);
  while (__stxr(v42 + 1, p_shared_owners));
  v4 = v61;
  do
    v43 = __ldxr(v39);
  while (__stxr(v43 + 1, v39));
  do
    v44 = __ldaxr(v39);
  while (__stlxr(v44 - 1, v39));
  if (!v44)
  {
    (*(void (**)(_QWORD *))(*v37 + 16))(v37);
    std::__shared_weak_count::__release_weak(v38);
  }
  do
    v45 = __ldaxr(p_shared_owners);
  while (__stlxr(v45 - 1, p_shared_owners));
  if (!v45)
  {
    ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
    std::__shared_weak_count::__release_weak(v63);
  }
  if (SHIBYTE(v38[2].__vftable) < 0)
    shared_owners = (char *)v38[1].__shared_owners_;
  v46 = _os_log_pack_fill();
  *(_DWORD *)v46 = 67109378;
  *(_DWORD *)(v46 + 4) = v61;
  *(_WORD *)(v46 + 8) = 2080;
  *(_QWORD *)(v46 + 10) = shared_owners;
  v47 = operator new();
  v48 = *(unsigned __int8 *)(v65 + 39);
  v49 = v64;
  if ((v48 & 0x80u) != 0)
  {
    v49 = *(const char **)(v65 + 16);
    v48 = *(_QWORD *)(v65 + 24);
  }
  *(_QWORD *)v47 = v62;
  *(_QWORD *)(v47 + 8) = v62;
  *(_QWORD *)(v47 + 16) = v63;
  *(_QWORD *)(v47 + 24) = v40;
  *(_QWORD *)(v47 + 32) = v38;
  *(_QWORD *)(v47 + 40) = v49;
  *(_QWORD *)(v47 + 48) = v48;
  *(_BYTE *)(v47 + 56) = 1;
  *(_QWORD *)object = v47;
  (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v8 + 24) + 40))(*(_QWORD *)(v8 + 24), object);
  v50 = *(_QWORD *)object;
  *(_QWORD *)object = 0;
  if (v50)
  {
    v51 = *(std::__shared_weak_count **)(v50 + 32);
    if (v51)
    {
      v52 = (unint64_t *)&v51->__shared_owners_;
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    v54 = *(std::__shared_weak_count **)(v50 + 16);
    if (v54)
    {
      v55 = (unint64_t *)&v54->__shared_owners_;
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    MEMORY[0x212BC6398](v50, 0x10F0C40B62ED6C6);
  }
LABEL_80:
  if (v66)
  {
    if (*(char *)(a3 + 23) >= 0)
      v57 = (const char *)a3;
    else
      v57 = *(const char **)a3;
    sub_20E8C003C((uint64_t)v67, "SLAMConfig (%d): %s", v4, v57);
    sub_20E863570((uint64_t)v67);
  }
  sub_20E863570((uint64_t)v67);
  v58 = v73;
  if (v73)
  {
    v59 = (unint64_t *)&v73->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
}

void sub_20E9A6B50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27,uint64_t a28,void *object,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;

  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863570((uint64_t)&a19);
  v37 = a27;
  if (a27)
  {
    p_shared_owners = (unint64_t *)&a27->__shared_owners_;
    do
      v39 = __ldaxr(p_shared_owners);
    while (__stlxr(v39 - 1, p_shared_owners));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20E9A6D7C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d9applecv3d4slam7Session23LogConfigAndCalibrationEPK14CV3DSLAMConfigPK19CV3DSLAMCalibrationbE3$_2")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d9applecv3d4slam7Session23LogConfigAndCalibrationEPK14CV3DSLAMConfigPK19CV3DSLAMC"
                                "alibrationbE3$_2" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d9applecv3d4slam7Session23LogConfigAndCalibrationEPK14CV3DSLAMConfigPK19CV3DSLAMCalibrationbE3$_2"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d9applecv3d4slam7Session23LogConfigAndCalibrationEPK14CV3DSLAMConfigPK19CV3DSLAMCalibrationbE3$_2" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E9A6DE8()
{
  return &unk_24C9B3CE8;
}

uint64_t sub_20E9A6DF4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  sub_20E9BCAA8(*(_QWORD **)(a1 + 16088));
  sub_20E86872C(a1 + 16056, *(_QWORD **)(a1 + 16064));
  v2 = *(_QWORD *)(a1 + 16048);
  *(_QWORD *)(a1 + 16048) = 0;
  if (v2)
  {
    v3 = sub_20E9634F0(v2);
    MEMORY[0x212BC6398](v3, 0x10B2C40014240CFLL);
  }
  v4 = *(_QWORD **)(a1 + 16040);
  *(_QWORD *)(a1 + 16040) = 0;
  if (v4)
  {
    v5 = (_QWORD *)v4[3];
    if (v5 == v4)
    {
      v6 = 4;
      v5 = v4;
    }
    else
    {
      if (!v5)
      {
LABEL_9:
        MEMORY[0x212BC6398](v4, 0x1020C40A5B76CDFLL);
        goto LABEL_10;
      }
      v6 = 5;
    }
    (*(void (**)(void))(*v5 + 8 * v6))();
    goto LABEL_9;
  }
LABEL_10:
  sub_20E86A810(a1 + 13504);
  v7 = *(_QWORD **)(a1 + 13488);
  if (v7 == (_QWORD *)(a1 + 13464))
  {
    v8 = 4;
    v7 = (_QWORD *)(a1 + 13464);
  }
  else
  {
    if (!v7)
      goto LABEL_15;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_15:
  v9 = *(_QWORD **)(a1 + 13456);
  if (v9 == (_QWORD *)(a1 + 13432))
  {
    v10 = 4;
    v9 = (_QWORD *)(a1 + 13432);
  }
  else
  {
    if (!v9)
      goto LABEL_20;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_20:
  v11 = *(_QWORD **)(a1 + 13424);
  if (v11 == (_QWORD *)(a1 + 13400))
  {
    v12 = 4;
    v11 = (_QWORD *)(a1 + 13400);
  }
  else
  {
    if (!v11)
      goto LABEL_25;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_25:
  v13 = *(_QWORD **)(a1 + 13392);
  if (v13 == (_QWORD *)(a1 + 13368))
  {
    v14 = 4;
    v13 = (_QWORD *)(a1 + 13368);
  }
  else
  {
    if (!v13)
      goto LABEL_30;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_30:
  std::mutex::~mutex((std::mutex *)(a1 + 13296));
  v15 = *(_QWORD *)(a1 + 13184);
  *(_QWORD *)(a1 + 13184) = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = *(_QWORD *)(a1 + 13176);
  *(_QWORD *)(a1 + 13176) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = *(_QWORD *)(a1 + 13168);
  *(_QWORD *)(a1 + 13168) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(_QWORD *)(a1 + 13160);
  *(_QWORD *)(a1 + 13160) = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = *(uint64_t **)(a1 + 13152);
  *(_QWORD *)(a1 + 13152) = 0;
  if (v19)
    sub_20E9ACCB8(v19);
  v20 = *(_QWORD *)(a1 + 13144);
  *(_QWORD *)(a1 + 13144) = 0;
  if (v20)
  {
    sub_20E86872C(v20 + 704, *(_QWORD **)(v20 + 712));
    MEMORY[0x212BC6398](v20, 0x1020C4035D8B18FLL);
  }
  v21 = *(_QWORD *)(a1 + 13136);
  *(_QWORD *)(a1 + 13136) = 0;
  if (v21)
  {
    sub_20E9ACDD8(v21 + 104);
    sub_20E9AD324(v21 + 24);
    if (*(char *)(v21 + 23) < 0)
      operator delete(*(void **)v21);
    MEMORY[0x212BC6398](v21, 0x10B2C4068F3FCD1);
  }
  v22 = *(_QWORD *)(a1 + 13128);
  *(_QWORD *)(a1 + 13128) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v23 = *(_QWORD *)(a1 + 13120);
  *(_QWORD *)(a1 + 13120) = 0;
  if (v23)
  {
    v24 = sub_20E9ADF68(v23);
    MEMORY[0x212BC6398](v24, 0x1022C40F9F6AF91);
  }
  v25 = *(_QWORD *)(a1 + 13112);
  *(_QWORD *)(a1 + 13112) = 0;
  if (v25)
  {
    v26 = sub_20E9AE1D4(v25);
    MEMORY[0x212BC6398](v26, 0x10A2C407DEB9901);
  }
  return sub_20E937AF4(a1);
}

_QWORD *sub_20E9A70D8(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)*a1;
  *a1 = 0;
  if (v2)
  {
    v3 = (_QWORD *)v2[3];
    if (v3 == v2)
    {
      v4 = 4;
      v3 = v2;
    }
    else
    {
      if (!v3)
      {
LABEL_7:
        MEMORY[0x212BC6398](v2, 0x1020C40A5B76CDFLL);
        return a1;
      }
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
    goto LABEL_7;
  }
  return a1;
}

uint64_t *sub_20E9A7148(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_20E86872C(v2 + 704, *(_QWORD **)(v2 + 712));
    MEMORY[0x212BC6398](v2, 0x1020C4035D8B18FLL);
  }
  return a1;
}

uint64_t *sub_20E9A7198(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_20E9ACDD8(v2 + 104);
    sub_20E9AD324(v2 + 24);
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x212BC6398](v2, 0x10B2C4068F3FCD1);
  }
  return a1;
}

uint64_t *sub_20E9A7208(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_20E9ADF68(v2);
    MEMORY[0x212BC6398](v3, 0x1022C40F9F6AF91);
  }
  return a1;
}

uint64_t *sub_20E9A724C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_20E9AE1D4(v2);
    MEMORY[0x212BC6398](v3, 0x10A2C407DEB9901);
  }
  return a1;
}

uint64_t sub_20E9A7290(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  unsigned __int16 v33;
  char v34;
  unsigned __int8 v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t **v59;
  int *v60;
  int *v61;
  unsigned int *v62;
  unsigned int *v63;
  uint64_t *v64;
  unsigned int v65;
  unsigned int v66;
  int v67;
  int *v68;
  int *v69;
  uint64_t v70;
  unsigned int v71;
  __int128 *v72;
  int v73;
  uint64_t *v74;
  uint64_t **v75;
  uint64_t **v76;
  __int128 v77;
  int v78;
  char *v79;
  uint64_t *v80;
  uint64_t v81;
  int8x16_t v82;
  int8x16_t v83;
  uint64_t v84;
  _DWORD *v85;
  _DWORD *v86;
  int *v87;
  int *v88;
  int v89;
  _DWORD *v90;
  _DWORD *v91;
  unsigned int v92;
  unsigned int v93;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  uint64_t v95;
  __int128 v96;
  uint64_t *v97;
  std::__shared_weak_count *v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  unint64_t *v112;
  unint64_t *v113;
  _QWORD *v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  uint64_t (**v117)();
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  float64x2_t v135;
  double v136;
  float64x2_t v137;
  float64x2_t v138;
  int8x16_t v139;
  __int128 v140;
  float64x2_t v141;
  float64x2_t v142;
  int v143;
  char v144;
  uint64_t v145;
  double v146;
  double v147;
  uint64_t v148;
  uint64_t v149;
  double v150;
  uint64_t v151;
  _QWORD *v152;
  char *v153;
  _OWORD *v154;
  char *v155;
  _OWORD *v156;
  __int16 v157;
  _QWORD *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  void *v164;
  int64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unsigned __int8 *v170;
  uint64_t (*v171)(void);
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t *v179;
  uint64_t v180;
  __int128 *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t *v189;
  unint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  _QWORD *v193;
  uint64_t **v194;
  _QWORD *v195;
  _QWORD *v196;
  _QWORD *v197;
  _QWORD *v198;
  _QWORD *v199;
  _QWORD *v200;
  _QWORD *v201;
  _QWORD *v203;
  uint64_t v204;
  _QWORD *v205;
  uint64_t v206;
  _QWORD *v207;
  uint64_t v208;
  uint64_t (***v209)();
  uint64_t v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  _QWORD *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  _QWORD *v222;
  _QWORD *v223;
  _QWORD *v224;
  _QWORD *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  _QWORD *v229;
  _QWORD *v230;
  _QWORD *v231;
  _QWORD *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  _QWORD *v236;
  _QWORD *v237;
  _QWORD *v238;
  _QWORD *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  _QWORD *v243;
  _QWORD *v244;
  _QWORD *v245;
  _QWORD *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  _QWORD *v250;
  _QWORD *v251;
  _QWORD *v252;
  _QWORD *v253;
  uint64_t v254;
  uint64_t v255;
  std::__shared_weak_count *v256;
  unint64_t *v257;
  unint64_t v258;
  std::__shared_weak_count *v259;
  unint64_t *v260;
  unint64_t v261;
  std::logic_error *v263;
  std::logic_error *exception;
  void *v265;
  _QWORD *v266;
  uint64_t v267;
  _QWORD *v268;
  _QWORD *v269;
  _QWORD *v270;
  __int128 v271;
  uint64_t v272;
  uint64_t *v273;
  uint64_t *v274;
  double *v275;
  uint64_t *v276;
  char *v277;
  uint64_t *v278;
  uint64_t v279;
  std::mutex *v280;
  uint64_t *v281;
  uint64_t v282;
  __int128 v283;
  __int128 v284;
  float64x2_t v285;
  __int128 v286;
  float64x2_t v287;
  int64x2_t v288;
  double v289;
  int64x2_t v290;
  float64_t v291;
  int8x16_t v292;
  float64_t v293;
  uint64_t v294;
  int8x16_t v295;
  uint64_t v296;
  float64x2_t v297;
  uint64_t v298;
  double v299;
  _QWORD *v300;
  char *v301;
  _OWORD *v302;
  void *v303;
  std::__shared_weak_count *v304;
  void *v305;
  void *v306;
  void *v307;
  void *v308;
  void *v309;
  _BYTE *v310;
  uint64_t (**v311)();
  std::__shared_weak_count *v312;
  __int128 v313;
  uint64_t v314;
  _QWORD v315[3];
  _QWORD *v316;
  _BYTE v317[32];
  _BYTE __p[24];
  uint64_t v319;
  __int128 v320;
  uint64_t v321;
  __int128 v322;
  uint64_t v323;
  __int128 v324;
  uint64_t v325;
  __int128 v326;
  uint64_t v327;
  uint64_t v328;
  __int128 v329;
  uint64_t v330;
  uint64_t v331;
  __int128 v332;
  uint64_t v333;
  __int128 v334;
  __int128 v335;
  uint64_t v336;
  uint64_t v337;
  __int128 v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  __int128 v343;
  int v344;
  __int128 v345;
  __int128 v346;
  uint64_t v347;
  double v348;
  __int128 v349[3];
  __int128 v350[349];
  int v351;
  double v352;
  std::__shared_weak_count *v353;
  uint64_t v354;
  uint64_t v355;
  __int128 v356;
  uint64_t v357;
  uint64_t v358;
  __int128 v359;
  uint64_t v360;
  __int128 v361;
  uint64_t v362;
  int v363;
  char v364;
  char v365;
  __int16 v366;
  char v367;
  _QWORD v368[3];
  _QWORD *v369;
  _QWORD v370[3];
  _QWORD *v371;
  _QWORD v372[3];
  _QWORD *v373;
  uint64_t (**v374)();
  std::__shared_weak_count *v375;
  uint64_t *v376;
  __int128 v377;
  __int128 v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int16 v382;
  uint64_t v383;

  v12 = MEMORY[0x24BDAC7A8]();
  v14 = v13;
  v269 = v15;
  v270 = v16;
  v268 = v17;
  v19 = v18;
  v21 = v20;
  v22 = v12;
  v383 = *MEMORY[0x24BDAC8D0];
  v278 = v23;
  v24 = sub_20E92CEEC(v12, v23);
  v273 = (uint64_t *)(v24 + 13112);
  v274 = (uint64_t *)(v24 + 13120);
  *(_OWORD *)(v24 + 13112) = 0u;
  v25 = operator new(0x108uLL);
  v25[1] = 0;
  v25[2] = 0;
  *v25 = &off_24C9B6098;
  sub_20F215F9C((uint64_t)(v25 + 3));
  v26 = operator new();
  *(_QWORD *)v317 = v25 + 3;
  *(_QWORD *)&v317[8] = v25;
  v353 = 0;
  v352 = 0.0;
  sub_20E9AE8C4(v26, (uint64_t *)v317);
  *(_QWORD *)(v22 + 13128) = v26;
  v27 = *(std::__shared_weak_count **)&v317[8];
  if (*(_QWORD *)&v317[8])
  {
    v28 = (unint64_t *)(*(_QWORD *)&v317[8] + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = v353;
  if (v353)
  {
    p_shared_owners = (unint64_t *)&v353->__shared_owners_;
    do
      v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v272 = v22 + 13136;
  v276 = (uint64_t *)(v22 + 13144);
  *(_OWORD *)(v22 + 13152) = 0u;
  *(_OWORD *)(v22 + 13136) = 0u;
  v33 = sub_20E9E4E00();
  v34 = v33;
  if (v33 <= 0x100u)
    v34 = 0;
  if (v34)
    _ZF = *(_BYTE *)(v22 + 8612) == 0;
  else
    _ZF = 1;
  v36 = !_ZF;
  sub_210218050("MLFeatureDetectionNodeGroup", 0x1BuLL, a12, 0, &v303);
  *(_WORD *)v317 = *(_WORD *)(v22 + 8624);
  if (*(char *)(v22 + 8655) < 0)
  {
    sub_20E860C04(&v317[8], *(void **)(v22 + 8632), *(_QWORD *)(v22 + 8640));
  }
  else
  {
    *(_OWORD *)&v317[8] = *(_OWORD *)(v22 + 8632);
    *(_QWORD *)&v317[24] = *(_QWORD *)(v22 + 8648);
  }
  __p[0] = *(_BYTE *)(v22 + 8656);
  if (*(char *)(v22 + 8687) < 0)
  {
    sub_20E860C04(&__p[8], *(void **)(v22 + 8664), *(_QWORD *)(v22 + 8672));
  }
  else
  {
    *(_OWORD *)&__p[8] = *(_OWORD *)(v22 + 8664);
    v319 = *(_QWORD *)(v22 + 8680);
  }
  LODWORD(v320) = *(_DWORD *)(v22 + 8688);
  *((_QWORD *)&v320 + 1) = *(unsigned int *)(v22 + 8692);
  LODWORD(v321) = *(_DWORD *)(v22 + 8696);
  BYTE4(v321) = *(_BYTE *)(v22 + 8700);
  *(_QWORD *)&v322 = *(_QWORD *)(v22 + 8704);
  v37 = operator new();
  v38 = v37;
  v352 = *(double *)&v303;
  v353 = v304;
  if (v304)
  {
    v39 = (unint64_t *)&v304->__shared_owners_;
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
  }
  sub_20ED51D4C(v37, (uint64_t *)&v352, v36, (uint64_t)v317);
  *(_QWORD *)(v22 + 13168) = v38;
  v41 = v353;
  if (!v353)
    goto LABEL_32;
  v42 = (unint64_t *)&v353->__shared_owners_;
  do
    v43 = __ldaxr(v42);
  while (__stlxr(v43 - 1, v42));
  if (!v43)
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
    if ((SHIBYTE(v319) & 0x80000000) == 0)
    {
LABEL_33:
      v44 = v22 + 13192;
      if ((v317[31] & 0x80000000) == 0)
        goto LABEL_34;
      goto LABEL_38;
    }
  }
  else
  {
LABEL_32:
    if ((SHIBYTE(v319) & 0x80000000) == 0)
      goto LABEL_33;
  }
  operator delete(*(void **)&__p[8]);
  v44 = v22 + 13192;
  if ((v317[31] & 0x80000000) == 0)
  {
LABEL_34:
    v45 = v304;
    if (!v304)
      goto LABEL_43;
    goto LABEL_39;
  }
LABEL_38:
  operator delete(*(void **)&v317[8]);
  v45 = v304;
  if (!v304)
    goto LABEL_43;
LABEL_39:
  v46 = (unint64_t *)&v45->__shared_owners_;
  do
    v47 = __ldaxr(v46);
  while (__stlxr(v47 - 1, v46));
  if (!v47)
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
  }
LABEL_43:
  *(_OWORD *)(v22 + 13256) = 0u;
  *(_OWORD *)(v22 + 13272) = 0u;
  *(_OWORD *)(v22 + 13224) = 0u;
  *(_OWORD *)(v22 + 13240) = 0u;
  *(_OWORD *)(v22 + 13192) = 0u;
  *(_OWORD *)(v22 + 13208) = 0u;
  v275 = (double *)(v22 + 13176);
  *(_OWORD *)(v22 + 13176) = 0u;
  *(_BYTE *)(v44 + 96) = 1;
  *(_QWORD *)(v22 + 13296) = 850045863;
  *(_OWORD *)(v22 + 13304) = 0u;
  *(_OWORD *)(v22 + 13320) = 0u;
  *(_OWORD *)(v22 + 13336) = 0u;
  *(_OWORD *)(v22 + 13352) = 0u;
  v48 = (_QWORD *)(v19 + 24);
  v49 = *(_QWORD *)(v19 + 24);
  if (v49)
  {
    if (v49 == v19)
    {
      *(_QWORD *)(v22 + 13392) = v22 + 13368;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v48 + 24))(*v48, v22 + 13368);
    }
    else
    {
      *(_QWORD *)(v22 + 13392) = v49;
      *v48 = 0;
    }
  }
  else
  {
    *(_QWORD *)(v22 + 13392) = 0;
  }
  v50 = (_QWORD *)(a11 + 24);
  v51 = *(_QWORD *)(a11 + 24);
  if (v51)
  {
    if (v51 == a11)
    {
      *(_QWORD *)(v22 + 13424) = v22 + 13400;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v50 + 24))(*v50, v22 + 13400);
    }
    else
    {
      *(_QWORD *)(v22 + 13424) = v51;
      *v50 = 0;
    }
  }
  else
  {
    *(_QWORD *)(v22 + 13424) = 0;
  }
  v280 = (std::mutex *)(v22 + 13296);
  v52 = *(_QWORD *)(a9 + 24);
  if (v52)
  {
    if (v52 == a9)
    {
      *(_QWORD *)(v22 + 13456) = v22 + 13432;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a9 + 24) + 24))(*(_QWORD *)(a9 + 24), v22 + 13432);
      goto LABEL_58;
    }
    v52 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v52 + 16))(v52);
  }
  *(_QWORD *)(v22 + 13456) = v52;
LABEL_58:
  v53 = (_QWORD *)(v14 + 24);
  v54 = *(_QWORD *)(v14 + 24);
  v267 = v22 + 13464;
  if (v54)
  {
    if (v54 == v14)
    {
      *(_QWORD *)(v22 + 13488) = v22 + 13464;
      (*(void (**)(_QWORD))(*(_QWORD *)*v53 + 24))(*v53);
    }
    else
    {
      *(_QWORD *)(v22 + 13488) = v54;
      *v53 = 0;
    }
  }
  else
  {
    *(_QWORD *)(v22 + 13488) = 0;
  }
  *(_DWORD *)(v22 + 13496) = 0;
  *(_OWORD *)(v22 + 13504) = 0u;
  *(_OWORD *)(v22 + 13520) = 0u;
  *(_OWORD *)(v22 + 13536) = 0u;
  *(_OWORD *)(v22 + 13552) = 0u;
  *(_OWORD *)(v22 + 13568) = 0u;
  *(_OWORD *)(v22 + 13584) = 0u;
  *(_QWORD *)(v22 + 13600) = 0x7FEFFFFFFFFFFFFFLL;
  *(_BYTE *)(v44 + 416) = 0;
  *(_BYTE *)(v44 + 424) = 0;
  *(_QWORD *)(v22 + 13688) = 0x3FF0000000000000;
  *(_OWORD *)(v22 + 13624) = xmmword_2102E89C0;
  *(_OWORD *)(v22 + 13640) = *(_OWORD *)algn_2102E89D0;
  *(_OWORD *)(v22 + 13656) = xmmword_2102E89E0;
  *(_OWORD *)(v22 + 13672) = unk_2102E89F0;
  *(_QWORD *)(v22 + 13760) = 0x3FF0000000000000;
  *(_OWORD *)(v22 + 13696) = xmmword_2102E89C0;
  *(_OWORD *)(v22 + 13712) = *(_OWORD *)algn_2102E89D0;
  *(_OWORD *)(v22 + 13728) = xmmword_2102E89E0;
  *(_OWORD *)(v22 + 13744) = unk_2102E89F0;
  *(_QWORD *)(v22 + 13832) = 0x3FF0000000000000;
  *(_OWORD *)(v22 + 13768) = xmmword_2102E89C0;
  *(_OWORD *)(v22 + 13784) = *(_OWORD *)algn_2102E89D0;
  *(_OWORD *)(v22 + 13800) = xmmword_2102E89E0;
  *(_OWORD *)(v22 + 13816) = unk_2102E89F0;
  *(_QWORD *)(v22 + 13904) = 0x3FF0000000000000;
  *(_OWORD *)(v22 + 13840) = xmmword_2102E89C0;
  *(_OWORD *)(v22 + 13856) = *(_OWORD *)algn_2102E89D0;
  *(_OWORD *)(v22 + 13872) = xmmword_2102E89E0;
  *(_OWORD *)(v22 + 13888) = unk_2102E89F0;
  *(_QWORD *)(v22 + 13976) = 0x3FF0000000000000;
  *(_OWORD *)(v22 + 13944) = xmmword_2102E89E0;
  *(_OWORD *)(v22 + 13960) = unk_2102E89F0;
  *(_OWORD *)(v22 + 13912) = xmmword_2102E89C0;
  *(_OWORD *)(v22 + 13928) = *(_OWORD *)algn_2102E89D0;
  *(_QWORD *)(v22 + 14048) = 0x3FF0000000000000;
  *(_OWORD *)(v22 + 14032) = unk_2102E89F0;
  *(_OWORD *)(v22 + 14016) = xmmword_2102E89E0;
  *(_OWORD *)(v22 + 14000) = *(_OWORD *)algn_2102E89D0;
  *(_OWORD *)(v22 + 13984) = xmmword_2102E89C0;
  *(_OWORD *)(v22 + 14064) = 0u;
  *(_OWORD *)(v22 + 14080) = 0u;
  *(_OWORD *)(v22 + 14096) = 0u;
  *(_QWORD *)(v22 + 14112) = 0;
  *(_QWORD *)(v22 + 14056) = 0x3FF0000000000000;
  *(_QWORD *)(v22 + 14088) = 0x3FF0000000000000;
  __asm { FMOV            V1.2D, #1.0 }
  v279 = v44;
  *(_OWORD *)(v44 + 928) = _Q1;
  *(_QWORD *)(v22 + 14136) = 0x3FF0000000000000;
  *(_OWORD *)(v22 + 14144) = _Q1;
  v271 = _Q1;
  *(_OWORD *)(v22 + 14160) = _Q1;
  v281 = (uint64_t *)(v22 + 13504);
  *(_WORD *)(v22 + 14224) = 0;
  *(_OWORD *)(v22 + 14208) = 0u;
  *(_OWORD *)(v22 + 14192) = 0u;
  *(_OWORD *)(v22 + 14176) = 0u;
  *(_BYTE *)(v22 + 14232) = 0;
  *(_BYTE *)(v22 + 14640) = 0;
  *(_BYTE *)(v22 + 14648) = 0;
  *(_BYTE *)(v22 + 15736) = 0;
  *(_BYTE *)(v22 + 15744) = 0;
  *(_BYTE *)(v22 + 15784) = 0;
  *(_BYTE *)(v22 + 15792) = 0;
  *(_BYTE *)(v22 + 15796) = 0;
  *(_BYTE *)(v22 + 15800) = 0;
  *(_BYTE *)(v22 + 15928) = 0;
  *(_QWORD *)(v22 + 15936) = 0;
  *(_DWORD *)(v22 + 15944) = 1;
  *(_DWORD *)(v22 + 15964) = 0;
  *(_OWORD *)(v22 + 15948) = 0u;
  *(_BYTE *)(v22 + 15968) = 1;
  *(_QWORD *)(v22 + 15976) = 0x4004000000000000;
  *(_OWORD *)(v22 + 15984) = xmmword_2102E6700;
  *(_OWORD *)(v22 + 16000) = xmmword_2102E6710;
  *(_QWORD *)(v22 + 16016) = 0x500000014;
  v277 = (char *)(v22 + 15968);
  *(_OWORD *)(v22 + 16024) = xmmword_2102E6720;
  *(_OWORD *)(v22 + 16040) = 0u;
  sub_20E9DF978((int **)v21, (uint64_t **)(v22 + 16056));
  v59 = (uint64_t **)(v22 + 16088);
  *(_QWORD *)(v22 + 16096) = 0;
  *(_QWORD *)(v22 + 16088) = 0;
  *(_QWORD *)(v22 + 16080) = v22 + 16088;
  memset(v317, 0, 24);
  v60 = *(int **)v21;
  v61 = *(int **)(v21 + 8);
  v352 = COERCE_DOUBLE(v317);
  if (v60 == v61)
    goto LABEL_104;
  do
  {
    LODWORD(v303) = *v60;
    sub_20EA9AB98((uint64_t *)&v352, &v303);
    v60 += 272;
  }
  while (v60 != v61);
  v62 = *(unsigned int **)v317;
  v63 = *(unsigned int **)&v317[8];
  if (*(_QWORD *)v317 == *(_QWORD *)&v317[8])
    goto LABEL_102;
  v282 = v21;
  do
  {
    v64 = *(uint64_t **)(v22 + 16064);
    if (!v64)
LABEL_384:
      sub_20E89FD20("map::at:  key not found");
    v65 = *v62;
    while (1)
    {
      while (1)
      {
        v66 = *((_DWORD *)v64 + 7);
        if (v65 >= v66)
          break;
        v64 = (uint64_t *)*v64;
        if (!v64)
          goto LABEL_384;
      }
      if (v66 >= v65)
        break;
      v64 = (uint64_t *)v64[1];
      if (!v64)
        goto LABEL_384;
    }
    v67 = *((_DWORD *)v64 + 8);
    v68 = *(int **)v21;
    v69 = *(int **)(v21 + 8);
    if (*(int **)v21 != v69)
    {
      while (*v68 != v65)
      {
        v68 += 272;
        if (v68 == v69)
          goto LABEL_386;
      }
    }
    if (v68 == v69)
    {
LABEL_386:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Requested camera id not found.");
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
      __cxa_throw(exception, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
    }
    v70 = *((_QWORD *)v68 + 1);
    v298 = *((_QWORD *)v68 + 17);
    v296 = *((_QWORD *)v68 + 20);
    v288 = *((int64x2_t *)v68 + 9);
    v290 = *(int64x2_t *)(v68 + 30);
    v294 = *((_QWORD *)v68 + 23);
    v292 = *(int8x16_t *)(v68 + 42);
    v71 = v68[4];
    if (v71 < 4)
    {
      v72 = (__int128 *)*((_QWORD *)v68 + 3);
      v284 = v72[1];
      v286 = *v72;
      v283 = *(_OWORD *)(v68 + 18);
      v73 = 1;
      v74 = *v59;
      v75 = (uint64_t **)(v22 + 16088);
      v76 = (uint64_t **)(v22 + 16088);
      if (*v59)
        goto LABEL_88;
LABEL_92:
      v79 = (char *)operator new(0xB0uLL);
      *((_DWORD *)v79 + 8) = v67;
      *(_OWORD *)(v79 + 40) = 0u;
      *(_OWORD *)(v79 + 56) = 0u;
      *(_OWORD *)(v79 + 72) = 0u;
      *(_OWORD *)(v79 + 88) = 0u;
      *(_OWORD *)(v79 + 104) = 0u;
      *(_OWORD *)(v79 + 120) = 0u;
      *(_OWORD *)(v79 + 136) = 0u;
      *(_OWORD *)(v79 + 152) = 0u;
      *((_QWORD *)v79 + 21) = 0;
      *(_QWORD *)v79 = 0;
      *((_QWORD *)v79 + 1) = 0;
      *((_QWORD *)v79 + 2) = v76;
      *v75 = (uint64_t *)v79;
      v80 = (uint64_t *)v79;
      v81 = **(_QWORD **)(v22 + 16080);
      if (v81)
      {
        *(_QWORD *)(v22 + 16080) = v81;
        v80 = *v75;
      }
      sub_20E868578(*(uint64_t **)(v22 + 16088), v80);
      ++*(_QWORD *)(v22 + 16096);
      goto LABEL_96;
    }
    if (v71 != 6)
    {
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/internal/SensorCameraConversion.cpp", 112, (uint64_t)&unk_21024DEE7, 0, (uint64_t)"Unknown VIO lens type, update for every new lens type", 53, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    v73 = 0;
    v77 = v286;
    LOBYTE(v77) = 0;
    v286 = v77;
    v74 = *v59;
    v75 = (uint64_t **)(v22 + 16088);
    v76 = (uint64_t **)(v22 + 16088);
    if (!*v59)
      goto LABEL_92;
    while (1)
    {
LABEL_88:
      while (1)
      {
        v76 = (uint64_t **)v74;
        v78 = *((_DWORD *)v74 + 8);
        if (v67 >= v78)
          break;
        v74 = *v76;
        v75 = v76;
        if (!*v76)
          goto LABEL_92;
      }
      if (v78 >= v67)
        break;
      v74 = v76[1];
      if (!v74)
      {
        v75 = v76 + 1;
        goto LABEL_92;
      }
    }
    v79 = (char *)v76;
LABEL_96:
    v82 = (int8x16_t)vzip1q_s64(v290, v288);
    v83 = (int8x16_t)vzip2q_s64(v290, v288);
    *((_QWORD *)v79 + 5) = v70;
    v82.i64[1] = vextq_s8(v82, v82, 8uLL).u64[0];
    *((_QWORD *)v79 + 8) = v292.i64[0];
    *((int8x16_t *)v79 + 3) = v82;
    *((_QWORD *)v79 + 11) = vextq_s8(v292, v292, 8uLL).u64[0];
    v83.i64[1] = vextq_s8(v83, v83, 8uLL).u64[0];
    *(int8x16_t *)(v79 + 72) = v83;
    *((_QWORD *)v79 + 14) = v294;
    v82.i64[0] = v298;
    v82.i64[1] = v296;
    *((int8x16_t *)v79 + 6) = v82;
    v21 = v282;
    if (v79[168] == v73)
    {
      if (v79[168])
      {
        *(_OWORD *)(v79 + 120) = v286;
        *(_OWORD *)(v79 + 136) = v284;
        *(_OWORD *)(v79 + 152) = v283;
      }
    }
    else if (v79[168])
    {
      v79[168] = 0;
    }
    else
    {
      *(_OWORD *)(v79 + 120) = v286;
      *(_OWORD *)(v79 + 136) = v284;
      *(_OWORD *)(v79 + 152) = v283;
      v79[168] = 1;
    }
    ++v62;
  }
  while (v62 != v63);
  v63 = *(unsigned int **)v317;
LABEL_102:
  if (v63)
  {
    *(_QWORD *)&v317[8] = v63;
    operator delete(v63);
  }
LABEL_104:
  if (!*(_DWORD *)v22
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/VIOEngineAndPosePrediction.cpp", 258, (uint64_t)"config_.image_processing_width_for_points", 41, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| !*(_DWORD *)(v22 + 4)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/VIOEngineAndPosePrediction.cpp", 259, (uint64_t)"config_.image_processing_width_for_lines", 40, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| ((v84 = *(_QWORD *)(v21 + 8) - *(_QWORD *)v21) == 0 || 0xF0F0F0F0F0F0F0F1 * (v84 >> 6) >= 3)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/VIOEngineAndPosePrediction.cpp",
         260,
         (uint64_t)"hardware_params.num_cameras() > 0 && hardware_params.num_cameras() <= 2",
         71,
         (uint64_t)"",
         0,
         (void (*)(void **))sub_21023DDB0)
    || *(_DWORD *)v22 < *(_DWORD *)(v22 + 4)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/VIOEngineAndPosePrediction.cpp", 262, (uint64_t)"config_.image_processing_width_for_points >= config_.image_processing_width_for_lines", 85, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  sub_20E92CB74((uint64_t)v281, v21);
  memset(v317, 0, 24);
  v85 = *(_DWORD **)(v22 + 13504);
  v86 = *(_DWORD **)(v22 + 13512);
  v352 = COERCE_DOUBLE(v317);
  if (v85 != v86)
  {
    do
    {
      LODWORD(v303) = *v85;
      sub_20EA9AB98((uint64_t *)&v352, &v303);
      v85 += 272;
    }
    while (v85 != v86);
    v87 = *(int **)v317;
    v88 = *(int **)&v317[8];
    if (*(_QWORD *)v317 != *(_QWORD *)&v317[8])
    {
      do
      {
        v89 = *v87;
        v90 = *(_DWORD **)(v22 + 13504);
        v91 = *(_DWORD **)(v22 + 13512);
        if (v90 != v91)
        {
          while (*v90 != v89)
          {
            v90 += 272;
            if (v90 == v91)
              goto LABEL_385;
          }
        }
        if (v90 == v91)
        {
LABEL_385:
          v263 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v263, "Requested camera id not found.");
          v263->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
          __cxa_throw(v263, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
        }
        if (v90[1] != 1)
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/VIOEngineAndPosePrediction.cpp", 269, (uint64_t)"camera_set.camera_mode == calibration::CameraMode::Mono", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_387;
          }
          v89 = *v87;
        }
        v92 = v90[2];
        if (v89 == *(_DWORD *)(v22 + 15944))
        {
          if (v92 <= 0x13F
            && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/VIOEngineAndPosePrediction.cpp", 272, (uint64_t)"camera_set.primary.image_width_ >= kSecondaryCameraRes", 54, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
LABEL_387:
            abort();
          }
          v93 = 320;
        }
        else
        {
          v93 = *(_DWORD *)v22;
          if (v92 < *(_DWORD *)v22)
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/VIOEngineAndPosePrediction.cpp", 276, (uint64_t)"camera_set.primary.image_width_ >= config_.image_processing_width_for_points", 76, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              goto LABEL_387;
            }
            v93 = *(_DWORD *)v22;
          }
        }
        sub_20EA8ED20((uint64_t)v90, v93, -1);
        ++v87;
      }
      while (v87 != v88);
      v88 = *(int **)v317;
    }
    if (v88)
    {
      *(_QWORD *)&v317[8] = v88;
      operator delete(v88);
    }
  }
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v95 = *(_QWORD *)(v22 + 13584);
  v320 = v271;
  v321 = 0x3FF0000000000000;
  v322 = 0uLL;
  v323 = 0;
  v324 = v271;
  v327 = 0;
  v330 = 0;
  v326 = 0u;
  v329 = 0u;
  v332 = 0u;
  v325 = 0x3FF0000000000000;
  v328 = 0x3FF0000000000000;
  v333 = 0;
  v331 = 0x3FF0000000000000;
  v336 = 0;
  v338 = 0u;
  v334 = v271;
  v335 = 0u;
  v339 = 0;
  v337 = 0x3FF0000000000000;
  v340 = 0x3FF0000000000000;
  v96 = *(_OWORD *)(v22 + 13544);
  *(_OWORD *)v317 = *(_OWORD *)(v22 + 13528);
  *(_OWORD *)&v317[16] = v96;
  *(_QWORD *)&__p[16] = *(_QWORD *)(v22 + 13576);
  *(_OWORD *)__p = *(_OWORD *)(v22 + 13560);
  v319 = v95;
  sub_20EB842DC((uint64_t)v317, (float64x2_t *)(v22 + 14056));
  v324 = *(_OWORD *)(v22 + 14128);
  v325 = *(_QWORD *)(v22 + 14144);
  v320 = *(_OWORD *)(v22 + 14152);
  v321 = *(_QWORD *)(v22 + 14168);
  v326 = *(_OWORD *)(v22 + 14176);
  v327 = *(_QWORD *)(v22 + 14192);
  v323 = *(_QWORD *)(v22 + 14216);
  v322 = *(_OWORD *)(v22 + 14200);
  v97 = sub_210219C18();
  v352 = (double)(std::chrono::steady_clock::now().__d_.__rep_ - rep) / 1000000.0;
  sub_20E9BA7EC((uint64_t)&v377, (uint64_t)v97, 0xEEEEB0B5B2B2EEEELL, (uint64_t *)&v352);
  v98 = (std::__shared_weak_count *)operator new(0x2F8uLL);
  v98->__shared_owners_ = 0;
  v98->__shared_weak_owners_ = 0;
  v98->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B60E8;
  sub_20EBC90B0((uint64_t)&v98[1], (__int128 *)v278 + 579, (uint64_t)v317);
  v303 = &v98[1];
  v304 = v98;
  v99 = operator new();
  *(_QWORD *)&v352 = &v98[1];
  v353 = v98;
  *(double *)&v303 = 0.0;
  v304 = 0;
  sub_20E9B58F0(v99, (uint64_t *)&v352);
  v100 = v353;
  if (v353)
  {
    v101 = (unint64_t *)&v353->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v103 = *(_QWORD *)(v22 + 13184);
  *(_QWORD *)(v22 + 13184) = v99;
  if (v103)
    (*(void (**)(uint64_t))(*(_QWORD *)v103 + 8))(v103);
  v104 = v304;
  if (v304)
  {
    v105 = (unint64_t *)&v304->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  *(_QWORD *)(v22 + 15952) = *(_QWORD *)(v22 + 15936);
  v107 = 15936;
  if (*(_QWORD *)(v22 + 13512) - *(_QWORD *)(v22 + 13504) == 2176)
    v107 = 15944;
  *(_QWORD *)(v22 + 15960) = *(_QWORD *)(v22 + v107);
  *(_QWORD *)(v22 + 13360) = *(_QWORD *)(v22 + 13576);
  v108 = operator new();
  memcpy((void *)v108, (const void *)(v22 + 13528), 0x210uLL);
  v109 = *(_OWORD *)(v22 + 14104);
  *(_OWORD *)(v108 + 560) = *(_OWORD *)(v22 + 14088);
  *(_OWORD *)(v108 + 576) = v109;
  *(_QWORD *)(v108 + 592) = *(_QWORD *)(v22 + 14120);
  v110 = *(_OWORD *)(v22 + 14072);
  *(_OWORD *)(v108 + 528) = *(_OWORD *)(v22 + 14056);
  *(_OWORD *)(v108 + 544) = v110;
  *(_OWORD *)(v108 + 600) = *(_OWORD *)(v22 + 14128);
  *(_QWORD *)(v108 + 616) = *(_QWORD *)(v22 + 14144);
  *(_QWORD *)(v108 + 640) = *(_QWORD *)(v22 + 14168);
  *(_OWORD *)(v108 + 624) = *(_OWORD *)(v22 + 14152);
  *(_OWORD *)(v108 + 648) = *(_OWORD *)(v22 + 14176);
  *(_QWORD *)(v108 + 664) = *(_QWORD *)(v22 + 14192);
  *(_OWORD *)(v108 + 672) = *(_OWORD *)(v22 + 14200);
  *(_QWORD *)(v108 + 688) = *(_QWORD *)(v22 + 14216);
  *(_WORD *)(v108 + 696) = *(_WORD *)(v279 + 1032);
  sub_20EA940EC(v281, (uint64_t **)(v108 + 704));
  v111 = *v276;
  *v276 = v108;
  if (v111)
  {
    sub_20E86872C(v111 + 704, *(_QWORD **)(v111 + 712));
    MEMORY[0x212BC6398](v111, 0x1020C4035D8B18FLL);
  }
  v112 = (unint64_t *)operator new(0x28uLL);
  v112[1] = 0;
  v113 = v112 + 1;
  v112[2] = 0;
  *v112 = (unint64_t)&off_24C9B04B8;
  v112[3] = (unint64_t)&off_24CA07120;
  v112[4] = 0;
  v303 = v112 + 3;
  v304 = (std::__shared_weak_count *)v112;
  v114 = operator new(0xA0uLL);
  v115 = (std::__shared_weak_count *)v114;
  v114[1] = 0;
  v116 = v114 + 1;
  v114[2] = 0;
  *v114 = &off_24C9B0458;
  *(_QWORD *)&v352 = v112 + 3;
  v353 = (std::__shared_weak_count *)v112;
  v117 = (uint64_t (**)())(v114 + 3);
  do
    v118 = __ldxr(v113);
  while (__stxr(v118 + 1, v113));
  sub_20FDBC538((uint64_t)(v114 + 3), v22 + 9472, (uint64_t)&v352);
  v119 = v353;
  if (v353)
  {
    v120 = (unint64_t *)&v353->__shared_owners_;
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  *(_QWORD *)&v377 = v117;
  *((_QWORD *)&v377 + 1) = v115;
  sub_20E86AC88((uint64_t)&v352, v22 + 56);
  v374 = v117;
  v375 = v115;
  do
    v122 = __ldxr(v116);
  while (__stxr(v122 + 1, v116));
  sub_20EE71298((int **)v281, (uint64_t)&v352, (uint64_t)&v374, (uint64_t)v317);
  v123 = v375;
  if (v375)
  {
    v124 = (unint64_t *)&v375->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  sub_20E869418((uint64_t)&v352);
  v126 = (std::__shared_weak_count *)*((_QWORD *)&v377 + 1);
  if (*((_QWORD *)&v377 + 1))
  {
    v127 = (unint64_t *)(*((_QWORD *)&v377 + 1) + 8);
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
      v129 = v304;
      if (v304)
        goto LABEL_170;
      goto LABEL_173;
    }
  }
  v129 = v304;
  if (!v304)
    goto LABEL_173;
LABEL_170:
  v130 = (unint64_t *)&v129->__shared_owners_;
  do
    v131 = __ldaxr(v130);
  while (__stlxr(v131 - 1, v130));
  if (v131)
  {
LABEL_173:
    v132 = v351;
    if (v351 != 2)
      goto LABEL_174;
LABEL_180:
    *(_DWORD *)(v22 + 13496) = 1;
    v133 = *(_QWORD *)v317;
    if (!*(_QWORD *)v317)
      goto LABEL_181;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
    std::__shared_weak_count::__release_weak(v129);
    v132 = v351;
    if (v351 == 2)
      goto LABEL_180;
LABEL_174:
    if (v132 == 1)
    {
      v265 = __cxa_allocate_exception(0x580uLL);
      v266 = (_QWORD *)sub_20EA59064((uint64_t)v265, "Failed to build SLAM engine.", "Unknown");
      *v266 = &off_24C9B6BB8;
      __cxa_throw(v266, (struct type_info *)&unk_24C9B6BD0, (void (*)(void *))std::exception::~exception);
    }
    v133 = *(_QWORD *)v317;
    if (!*(_QWORD *)v317)
    {
LABEL_181:
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/VIOEngineAndPosePrediction.cpp", 317, (uint64_t)"engine_result.engine != nullptr", 31, (uint64_t)"Instantiated SLAM engine is null.", 33, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v133 = *(_QWORD *)v317;
    }
  }
  v134 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v133 + 8) + 432))(*(_QWORD *)(v133 + 8))
                               + 4824)
                   + 32 * *(unsigned int *)(v22 + 15960)
                   + 8)
       + 1664 * *(unsigned int *)(v22 + 15964);
  v287 = *(float64x2_t *)(v134 + 72);
  v289 = *(double *)(v134 + 88);
  v285 = *(float64x2_t *)v134;
  v291 = *(double *)(v134 + 16);
  v293 = *(double *)(v134 + 40);
  v295 = *(int8x16_t *)(v134 + 24);
  v297 = *(float64x2_t *)(v134 + 48);
  v299 = *(double *)(v134 + 64);
  std::mutex::lock(v280);
  v135 = v285;
  v136 = *(double *)vextq_s8((int8x16_t)v287, (int8x16_t)v287, 8uLL).i64;
  *(_QWORD *)&v137.f64[0] = vextq_s8((int8x16_t)v135, (int8x16_t)v135, 8uLL).u64[0];
  v139 = v295;
  v138 = v297;
  v138.f64[1] = *(double *)vextq_s8((int8x16_t)v138, (int8x16_t)v138, 8uLL).i64;
  *(float64_t *)&v140 = v285.f64[0];
  *((_QWORD *)&v140 + 1) = *(_QWORD *)&v137.f64[0];
  *(_QWORD *)&v135.f64[1] = v295.i64[0];
  v139.i64[1] = vextq_s8(v139, v139, 8uLL).u64[0];
  *(_QWORD *)&v137.f64[1] = v139.i64[1];
  v141.f64[0] = v291;
  v141.f64[1] = v293;
  v142 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v135, v287.f64[0]), v137, v136), v141, v289);
  v143 = *(unsigned __int8 *)(v279 + 96);
  *(_OWORD *)v279 = v140;
  *(float64_t *)(v22 + 13208) = v291;
  *(double *)(v22 + 13216) = -v142.f64[0];
  *(int8x16_t *)(v279 + 32) = v139;
  *(float64_t *)(v22 + 13240) = v293;
  *(double *)(v22 + 13248) = -v142.f64[1];
  *(float64x2_t *)(v279 + 64) = v138;
  *(double *)(v22 + 13272) = v299;
  *(double *)(v22 + 13280) = -(vmulq_f64(v138, v287).f64[0] + v138.f64[1] * v136 + v299 * v289);
  if (!v143)
    *(_BYTE *)(v279 + 96) = 1;
  std::mutex::unlock(v280);
  sub_210217D58("FeatureExtractor", 0x10uLL, a12, 0, &v311);
  if ((_BYTE)v337 && BYTE1(v337))
  {
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/LineTrackingEnablerConfig.h", 65, (uint64_t)"", 0, (uint64_t)"Cannot enable lines both 'always' and 'when needed'.", 52, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  if ((_BYTE)v337)
    v144 = 1;
  else
    v144 = 2 * (BYTE1(v337) != 0);
  v145 = v341;
  *v277 = v144;
  *(_QWORD *)(v22 + 15976) = v145;
  *(_OWORD *)(v22 + 15984) = v345;
  *(_OWORD *)(v22 + 16000) = v346;
  *(_QWORD *)(v22 + 16016) = 0x500000014;
  *(_OWORD *)(v22 + 16024) = xmmword_2102E6720;
  sub_20EEB3B80((uint64_t)v277, (uint64_t *)&v352);
  v146 = v352;
  v352 = 0.0;
  v147 = *v275;
  *v275 = v146;
  if (v147 != 0.0)
  {
    (*(void (**)(double))(**(_QWORD **)&v147 + 8))(COERCE_DOUBLE(*(_QWORD *)&v147));
    v148 = *(_QWORD *)&v352;
    v352 = 0.0;
    if (v148)
      (*(void (**)(uint64_t))(*(_QWORD *)v148 + 8))(v148);
  }
  sub_20EA8F3C4((char **)v281, *(_DWORD *)(v22 + 4), (char **)&v309);
  sub_20E92D224((uint64_t)&v303, v22 + 12920);
  v149 = *(_QWORD *)(v22 + 15936);
  v150 = *(double *)&v303;
  if (*(_QWORD *)(v22 + 13512) - *(_QWORD *)(v22 + 13504) == 2176)
  {
    if (v305 == v303)
    {
      if (v305)
      {
        v304 = (std::__shared_weak_count *)v305;
        operator delete(v305);
        *(double *)&v303 = 0.0;
        v304 = 0;
        v305 = 0;
      }
      v150 = COERCE_DOUBLE(operator new(8uLL));
      *(double *)&v303 = v150;
      v304 = *(std::__shared_weak_count **)&v150;
      v305 = (void *)(*(_QWORD *)&v150 + 8);
    }
    **(_QWORD **)&v150 = v149;
    v304 = (std::__shared_weak_count *)(*(_QWORD *)&v150 + 8);
    v151 = *(_QWORD *)(v22 + 15944);
    v152 = v306;
    if (v308 == v306)
    {
      if (v308)
      {
        v307 = v308;
        operator delete(v308);
        v306 = 0;
        v307 = 0;
        v308 = 0;
      }
      v152 = operator new(8uLL);
      v306 = v152;
      v307 = v152;
      v308 = v152 + 1;
    }
    *v152 = v151;
    v307 = v152 + 1;
    v154 = operator new(0x10uLL);
    *v154 = *(_OWORD *)(v22 + 12904);
    v156 = v154 + 1;
    v302 = v154;
    v157 = *(_WORD *)(v22 + 12918);
    v158 = operator new(0x20uLL);
    v159 = (char *)(v158 + 2);
    v158[2] = *(_QWORD *)(v22 + 12904);
    *(_QWORD *)((char *)v158 + 21) = *(_QWORD *)(v22 + 12909);
    *((_BYTE *)v158 + 29) = 0;
    *((_WORD *)v158 + 15) = v157;
    v155 = (char *)(v158 + 4);
    if (v156 == v302)
    {
      v301 = (char *)(v158 + 2);
    }
    else
    {
      do
      {
        v160 = *((_QWORD *)v156-- - 2);
        v161 = *(_QWORD *)((char *)v156 + 7);
        *((_QWORD *)v159 - 2) = v160;
        v159 -= 16;
        *(_QWORD *)(v159 + 7) = v161;
      }
      while (v156 != v302);
      v156 = v302;
      v301 = v159;
      if (!v156)
        goto LABEL_214;
    }
    operator delete(v156);
    goto LABEL_214;
  }
  if (v305 == v303)
  {
    if (v305)
    {
      v304 = (std::__shared_weak_count *)v305;
      operator delete(v305);
      *(double *)&v303 = 0.0;
      v304 = 0;
      v305 = 0;
    }
    v150 = COERCE_DOUBLE(operator new(8uLL));
    *(double *)&v303 = v150;
    v304 = *(std::__shared_weak_count **)&v150;
    v305 = (void *)(*(_QWORD *)&v150 + 8);
  }
  **(_QWORD **)&v150 = v149;
  v304 = (std::__shared_weak_count *)(*(_QWORD *)&v150 + 8);
  v153 = (char *)operator new(0x10uLL);
  *(_OWORD *)v153 = *(_OWORD *)(v22 + 12904);
  v155 = v153 + 16;
  v301 = v153;
LABEL_214:
  LODWORD(v352) = 0;
  sub_20E8A1408((uint64_t)&v353, (uint64_t)v281);
  *(_QWORD *)&v377 = 0x64FFFFFFFFLL;
  WORD4(v377) = 0;
  HIDWORD(v377) = 1500;
  v378 = xmmword_2102E6730;
  LOBYTE(v379) = 0;
  *(_QWORD *)((char *)&v379 + 4) = 0x3F80000000000005;
  HIDWORD(v379) = 0;
  sub_20EEB13E0((uint64_t)&v354, v344, (uint64_t)&v342, v349, &v377, v350, v348);
  sub_20E92D224((uint64_t)&v355, (uint64_t)&v303);
  v356 = 0u;
  v357 = 0;
  v162 = v155 - v301;
  if (v155 != v301)
  {
    if (v162 < 0)
      sub_20E867F44();
    *(_QWORD *)&v356 = operator new(v155 - v301);
    *((_QWORD *)&v356 + 1) = v356;
    v163 = v356 + 16 * (v162 >> 4);
    v357 = v163;
    memcpy((void *)v356, v301, v162 - 1);
    *((_QWORD *)&v356 + 1) = v163;
  }
  sub_20E86C2D0((uint64_t)&v358, &v343);
  v359 = 0u;
  v360 = 0;
  v164 = v309;
  v165 = v310 - (_BYTE *)v309;
  if (v310 != v309)
  {
    if (0xCCCCCCCCCCCCCCCDLL * (v165 >> 3) >= 0x666666666666667)
      sub_20E867F44();
    *(_QWORD *)&v359 = operator new(v310 - (_BYTE *)v309);
    *((_QWORD *)&v359 + 1) = v359;
    v166 = v359 + 8 * (v165 >> 3);
    v360 = v166;
    memcpy((void *)v359, v164, v165);
    *((_QWORD *)&v359 + 1) = v166;
  }
  v361 = xmmword_2102E6740;
  v362 = v347;
  v363 = 1;
  v364 = BYTE2(v337);
  v365 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v22 + 13168) + 56) + 80);
  v366 = 0;
  v367 = 0;
  v167 = operator new();
  *(_OWORD *)(v167 + 40) = 0u;
  *(_OWORD *)(v167 + 24) = 0u;
  *(_OWORD *)(v167 + 8) = 0u;
  *(_QWORD *)v167 = off_24C9E4AD0;
  v168 = operator new();
  sub_20ED63434(v168, (uint64_t)&v352, &v311);
  *(_QWORD *)(v167 + 56) = v168;
  *(_QWORD *)(v167 + 64) = sub_20ED92128;
  v169 = *(_QWORD *)(v22 + 13160);
  *(_QWORD *)(v22 + 13160) = v167;
  if (v169)
    (*(void (**)(uint64_t))(*(_QWORD *)v169 + 8))(v169);
  v170 = (unsigned __int8 *)(v278 + 1435);
  v171 = *(uint64_t (**)(void))(**(_QWORD **)(*(_QWORD *)v317 + 8) + 432);
  if (*((_BYTE *)v278 + 12336))
  {
    v172 = *(_QWORD *)(v171() + 4864);
    v173 = operator new();
    sub_20F1D0DB4(v173, v172 + 4752, v170);
    v174 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v317 + 8) + 432))(*(_QWORD *)(*(_QWORD *)v317 + 8))
                     + 4864);
    v175 = operator new();
    sub_20F1D0DB4(v175, v174 + 4752, v170);
  }
  else
  {
    v177 = *(_QWORD *)(v171() + 4864);
    v173 = operator new();
    sub_20F1AFA8C(v173, v177 + 4752);
    v178 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v317 + 8) + 432))(*(_QWORD *)(*(_QWORD *)v317 + 8))
                     + 4864);
    v175 = operator new();
    sub_20F1AFA8C(v175, v178 + 4752);
  }
  v176 = operator new();
  *(_QWORD *)&v377 = v175;
  sub_20E9BAAF8(v176, (uint64_t *)&v377);
  if ((_QWORD)v377)
    (*(void (**)(_QWORD))(*(_QWORD *)v377 + 8))(v377);
  v179 = *(uint64_t **)(v22 + 13152);
  *(_QWORD *)(v22 + 13152) = v176;
  if (v179)
    sub_20E9ACCB8(v179);
  v180 = operator new();
  v374 = (uint64_t (**)())v173;
  *(_QWORD *)&v377 = &off_24C9B5D98;
  *((_QWORD *)&v377 + 1) = v22;
  *((_QWORD *)&v378 + 1) = &v377;
  sub_20EAF7F90(v180, (uint64_t *)&v374, (uint64_t)&v377, a10);
  v181 = (__int128 *)*((_QWORD *)&v378 + 1);
  if (*((__int128 **)&v378 + 1) == &v377)
  {
    v182 = 4;
    v181 = &v377;
LABEL_233:
    (*(void (**)(void))(*(_QWORD *)v181 + 8 * v182))();
  }
  else if (*((_QWORD *)&v378 + 1))
  {
    v182 = 5;
    goto LABEL_233;
  }
  v183 = (uint64_t)v374;
  v374 = 0;
  if (v183)
    (*(void (**)(uint64_t))(*(_QWORD *)v183 + 8))(v183);
  v184 = *v274;
  *v274 = v180;
  if (v184)
  {
    v185 = sub_20E9ADF68(v184);
    MEMORY[0x212BC6398](v185, 0x1022C40F9F6AF91);
  }
  v186 = *(_QWORD *)(v22 + 13488);
  if (v186)
  {
    if (v186 != v267)
    {
      v186 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v186 + 16))(v186);
      goto LABEL_241;
    }
    v316 = v315;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v267 + 24))(v267, v315);
  }
  else
  {
LABEL_241:
    v316 = (_QWORD *)v186;
  }
  v187 = operator new();
  v188 = v187;
  v313 = *(_OWORD *)v317;
  if (*(_QWORD *)&v317[8])
  {
    v189 = (unint64_t *)(*(_QWORD *)&v317[8] + 8);
    do
      v190 = __ldxr(v189);
    while (__stxr(v190 + 1, v189));
  }
  v374 = &off_24C9B5E28;
  v375 = (std::__shared_weak_count *)v22;
  v376 = (uint64_t *)&v374;
  v372[0] = &off_24C9B5F08;
  v372[1] = v22;
  v373 = v372;
  v370[0] = &off_24C9B5F88;
  v370[1] = v22;
  v371 = v370;
  v368[0] = &off_24C9B6018;
  v368[1] = v22;
  v369 = v368;
  *(_BYTE *)v187 = 0;
  *(_BYTE *)(v187 + 24) = 0;
  *(_QWORD *)(v187 + 32) = 850045863;
  *(_OWORD *)(v187 + 40) = 0u;
  *(_OWORD *)(v187 + 56) = 0u;
  *(_OWORD *)(v187 + 72) = 0u;
  *(_QWORD *)(v187 + 88) = 0;
  v191 = (_QWORD *)operator new();
  sub_210219020(v191, "VIOEngineGroup", 0xEuLL);
  *(_QWORD *)(v188 + 96) = v191;
  sub_210218568("VIOEngine", 0, 0, -10, 1, v188 + 96, &v314);
  v192 = v314;
  *(_QWORD *)&v377 = &off_24CA1E2F8;
  *((_QWORD *)&v377 + 1) = v314;
  *(_QWORD *)(v188 + 104) = &off_24C9B1898;
  v193 = (_QWORD *)operator new();
  *v193 = &off_24CA1E2F8;
  v193[1] = v192;
  *(_QWORD *)(v188 + 112) = v193;
  *(_OWORD *)(v188 + 120) = v313;
  v313 = 0uLL;
  *(_BYTE *)(v188 + 136) = 1;
  if (v376)
  {
    if (v376 != (uint64_t *)&v374)
    {
      v194 = &v376;
      *(_QWORD *)(v188 + 168) = v376;
      goto LABEL_250;
    }
    *(_QWORD *)(v188 + 168) = v188 + 144;
    ((void (*)(uint64_t (***)(), uint64_t))v374[3])(&v374, v188 + 144);
    v195 = v270;
  }
  else
  {
    v194 = (uint64_t **)(v188 + 168);
LABEL_250:
    *v194 = 0;
    v195 = v270;
  }
  v300 = (_QWORD *)(v188 + 176);
  if (v373)
  {
    if (v373 != v372)
    {
      v196 = &v373;
      *(_QWORD *)(v188 + 200) = v373;
      goto LABEL_256;
    }
    *(_QWORD *)(v188 + 200) = v300;
    (*(void (**)(uint64_t, _QWORD *))(v372[0] + 24))((uint64_t)v372, v300);
    v198 = v268;
    v197 = v269;
  }
  else
  {
    v196 = (_QWORD *)(v188 + 200);
LABEL_256:
    *v196 = 0;
    v198 = v268;
    v197 = v269;
  }
  v199 = (_QWORD *)v195[3];
  if (v199)
  {
    if (v199 == v195)
    {
      *(_QWORD *)(v188 + 232) = v188 + 208;
      (*(void (**)(_QWORD *))(*v195 + 24))(v195);
    }
    else
    {
      *(_QWORD *)(v188 + 232) = v199;
      v195[3] = 0;
    }
  }
  else
  {
    *(_QWORD *)(v188 + 232) = 0;
  }
  v200 = (_QWORD *)v198[3];
  if (v200)
  {
    if (v200 == v198)
    {
      *(_QWORD *)(v188 + 264) = v188 + 240;
      (*(void (**)(_QWORD *, uint64_t))(*v198 + 24))(v198, v188 + 240);
    }
    else
    {
      *(_QWORD *)(v188 + 264) = v200;
      v198[3] = 0;
    }
  }
  else
  {
    *(_QWORD *)(v188 + 264) = 0;
  }
  v201 = (_QWORD *)v197[3];
  if (v201)
  {
    if (v201 == v197)
    {
      *(_QWORD *)(v188 + 296) = v188 + 272;
      (*(void (**)(_QWORD *, uint64_t))(*v197 + 24))(v197, v188 + 272);
    }
    else
    {
      *(_QWORD *)(v188 + 296) = v201;
      v197[3] = 0;
    }
  }
  else
  {
    *(_QWORD *)(v188 + 296) = 0;
  }
  __asm { FMOV            V0.2D, #-1.0 }
  v380 = _Q0;
  v381 = xmmword_2102E6750;
  v377 = xmmword_2102E6760;
  v378 = _Q0;
  v379 = xmmword_2102E6770;
  v382 = 0;
  sub_20EAFC798(v188 + 304, (uint64_t)&v377);
  if (v316)
  {
    if (v316 == v315)
    {
      *(_QWORD *)(v188 + 464) = v188 + 440;
      (*(void (**)(_QWORD *, uint64_t))(v315[0] + 24))(v315, v188 + 440);
    }
    else
    {
      *(_QWORD *)(v188 + 464) = v316;
      v316 = 0;
    }
  }
  else
  {
    *(_QWORD *)(v188 + 464) = 0;
  }
  if (v369)
  {
    if (v369 == v368)
    {
      *(_QWORD *)(v188 + 496) = v188 + 472;
      (*(void (**)(uint64_t, _QWORD *))(v368[0] + 24))((uint64_t)v368, (_QWORD *)(v188 + 472));
    }
    else
    {
      *(_QWORD *)(v188 + 496) = v369;
      v369 = 0;
    }
  }
  else
  {
    *(_QWORD *)(v188 + 496) = 0;
  }
  *(_BYTE *)(v188 + 504) = 0;
  *(_BYTE *)(v188 + 512) = 0;
  if (v371)
  {
    if (v371 == v370)
    {
      *(_QWORD *)(v188 + 544) = v188 + 520;
      (*(void (**)(uint64_t, _QWORD *))(v370[0] + 24))((uint64_t)v370, (_QWORD *)(v188 + 520));
    }
    else
    {
      *(_QWORD *)(v188 + 544) = v371;
      v371 = 0;
    }
  }
  else
  {
    *(_QWORD *)(v188 + 544) = 0;
  }
  *(_BYTE *)(v188 + 552) = 0;
  *(_BYTE *)(v188 + 576) = 0;
  if (!*(_QWORD *)(v188 + 120)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryEngine/include/VIO/OdometryEngine/VIOEngineNode.hpp", 67, (uint64_t)"engine_", 7, (uint64_t)"Invalid PosePredictor", 21, (void (*)(void **))sub_21023DDB0)|| !*(_QWORD *)(v188 + 168)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryEngine/include/VIO/OdometryEngine/VIOEngineNode.hpp", 68, (uint64_t)"internal_state_callback_", 24, (uint64_t)"Invalid callback", 16, (void (*)(void **))sub_21023DDB0)|| !*(_QWORD *)(v188 + 464)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryEngine/include/VIO/OdometryEngine/VIOEngineNode.hpp",
         69,
         (uint64_t)"error_callback_",
         15,
         (uint64_t)"Invalid callback",
         16,
         (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v203 = v369;
  if (v369 == v368)
  {
    v204 = 4;
    v203 = v368;
LABEL_298:
    (*(void (**)(void))(*v203 + 8 * v204))();
  }
  else if (v369)
  {
    v204 = 5;
    goto LABEL_298;
  }
  v205 = v371;
  if (v371 == v370)
  {
    v206 = 4;
    v205 = v370;
LABEL_303:
    (*(void (**)(void))(*v205 + 8 * v206))();
  }
  else if (v371)
  {
    v206 = 5;
    goto LABEL_303;
  }
  v207 = v373;
  if (v373 == v372)
  {
    v208 = 4;
    v207 = v372;
LABEL_308:
    (*(void (**)(void))(*v207 + 8 * v208))();
  }
  else if (v373)
  {
    v208 = 5;
    goto LABEL_308;
  }
  v209 = (uint64_t (***)())v376;
  if (v376 == (uint64_t *)&v374)
  {
    v210 = 4;
    v209 = &v374;
LABEL_313:
    (*v209)[v210]();
  }
  else if (v376)
  {
    v210 = 5;
    goto LABEL_313;
  }
  v211 = (std::__shared_weak_count *)*((_QWORD *)&v313 + 1);
  if (*((_QWORD *)&v313 + 1))
  {
    v212 = (unint64_t *)(*((_QWORD *)&v313 + 1) + 8);
    do
      v213 = __ldaxr(v212);
    while (__stlxr(v213 - 1, v212));
    if (!v213)
    {
      ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
      std::__shared_weak_count::__release_weak(v211);
    }
  }
  v214 = *v273;
  *v273 = v188;
  if (v214)
  {
    v215 = sub_20E9AE1D4(v214);
    MEMORY[0x212BC6398](v215, 0x10A2C407DEB9901);
  }
  v216 = v316;
  if (v316 == v315)
  {
    v217 = 4;
    v216 = v315;
LABEL_325:
    (*(void (**)(void))(*v216 + 8 * v217))();
  }
  else if (v316)
  {
    v217 = 5;
    goto LABEL_325;
  }
  v218 = *(_QWORD *)(*(_QWORD *)(v22 + 13176) + 72);
  v219 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v22 + 13160) + 56) + 168);
  *(_QWORD *)&v377 = &off_24C9B6B70;
  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(v219 + 264) + 16))((_QWORD *)&v377 + 1);
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)(v218 + 120) + 16))(v218 + 120, &v377);
  v220 = *((_QWORD *)&v377 + 1);
  *(_QWORD *)&v377 = &off_24C9B6B70;
  *((_QWORD *)&v377 + 1) = 0;
  if (v220)
    (*(void (**)(uint64_t))(*(_QWORD *)v220 + 8))(v220);
  v221 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v22 + 13160) + 56) + 64) + 72);
  v222 = (_QWORD *)operator new();
  v222[1] = &off_24C9B61B0;
  v223 = v222 + 1;
  *v222 = &off_24C9B6138;
  v222[2] = v22;
  v222[4] = v222 + 1;
  *(_QWORD *)&v377 = &off_24C9B6B38;
  v224 = (_QWORD *)operator new();
  *v224 = &off_24C9B6138;
  v225 = v224 + 1;
  v226 = v222[4];
  if (v226)
  {
    if ((_QWORD *)v226 != v223)
    {
      v226 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v226 + 16))(v226, v225);
      goto LABEL_331;
    }
    v224[4] = v225;
    (*(void (**)(_QWORD *))(*v223 + 24))(v223);
  }
  else
  {
LABEL_331:
    v224[4] = v226;
  }
  *((_QWORD *)&v377 + 1) = v224;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)(v221 + 120) + 16))(v221 + 120, &v377);
  v227 = *((_QWORD *)&v377 + 1);
  *(_QWORD *)&v377 = &off_24C9B6B38;
  *((_QWORD *)&v377 + 1) = 0;
  if (v227)
    (*(void (**)(uint64_t))(*(_QWORD *)v227 + 8))(v227);
  (*(void (**)(_QWORD *))(*v222 + 8))(v222);
  v228 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v22 + 13160) + 56) + 80) + 72);
  v229 = (_QWORD *)operator new();
  *v229 = &off_24C9B6138;
  v229[1] = &off_24C9B61B0;
  v230 = v229 + 1;
  v229[2] = v22;
  v229[4] = v229 + 1;
  *(_QWORD *)&v377 = &off_24C9B6B38;
  v231 = (_QWORD *)operator new();
  *v231 = &off_24C9B6138;
  v232 = v231 + 1;
  v233 = v229[4];
  if (v233)
  {
    if ((_QWORD *)v233 != v230)
    {
      v233 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v233 + 16))(v233, v232);
      goto LABEL_338;
    }
    v231[4] = v232;
    (*(void (**)(_QWORD *))(*v230 + 24))(v230);
  }
  else
  {
LABEL_338:
    v231[4] = v233;
  }
  *((_QWORD *)&v377 + 1) = v231;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)(v228 + 120) + 16))(v228 + 120, &v377);
  v234 = *((_QWORD *)&v377 + 1);
  *(_QWORD *)&v377 = &off_24C9B6B38;
  *((_QWORD *)&v377 + 1) = 0;
  if (v234)
    (*(void (**)(uint64_t))(*(_QWORD *)v234 + 8))(v234);
  (*(void (**)(_QWORD *))(*v229 + 8))(v229);
  v235 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v22 + 13168) + 56) + 72);
  v236 = (_QWORD *)operator new();
  v236[1] = &off_24C9B6258;
  v237 = v236 + 1;
  *v236 = &off_24C9B37C0;
  v236[2] = v22;
  v236[4] = v236 + 1;
  *(_QWORD *)&v377 = &off_24C9B47B8;
  v238 = (_QWORD *)operator new();
  *v238 = &off_24C9B37C0;
  v239 = v238 + 1;
  v240 = v236[4];
  if (v240)
  {
    if ((_QWORD *)v240 != v237)
    {
      v240 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v240 + 16))(v240, v239);
      goto LABEL_345;
    }
    v238[4] = v239;
    (*(void (**)(_QWORD *))(*v237 + 24))(v237);
  }
  else
  {
LABEL_345:
    v238[4] = v240;
  }
  *((_QWORD *)&v377 + 1) = v238;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)(v235 + 120) + 16))(v235 + 120, &v377);
  v241 = *((_QWORD *)&v377 + 1);
  *(_QWORD *)&v377 = &off_24C9B47B8;
  *((_QWORD *)&v377 + 1) = 0;
  if (v241)
    (*(void (**)(uint64_t))(*(_QWORD *)v241 + 8))(v241);
  (*(void (**)(_QWORD *))(*v236 + 8))(v236);
  v242 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v22 + 13160) + 56) + 72);
  v243 = (_QWORD *)operator new();
  v243[1] = &off_24C9B6340;
  v244 = v243 + 1;
  *v243 = &off_24C9B62D8;
  v243[2] = v22;
  v243[4] = v243 + 1;
  *(_QWORD *)&v377 = &off_24C9B6AE0;
  v245 = (_QWORD *)operator new();
  *v245 = &off_24C9B62D8;
  v246 = v245 + 1;
  v247 = v243[4];
  if (v247)
  {
    if ((_QWORD *)v247 != v244)
    {
      v247 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v247 + 16))(v247, v246);
      goto LABEL_352;
    }
    v245[4] = v246;
    (*(void (**)(_QWORD *))(*v244 + 24))(v244);
  }
  else
  {
LABEL_352:
    v245[4] = v247;
  }
  *((_QWORD *)&v377 + 1) = v245;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)(v242 + 120) + 16))(v242 + 120, &v377);
  v248 = *((_QWORD *)&v377 + 1);
  *(_QWORD *)&v377 = &off_24C9B6AE0;
  *((_QWORD *)&v377 + 1) = 0;
  if (v248)
    (*(void (**)(uint64_t))(*(_QWORD *)v248 + 8))(v248);
  (*(void (**)(_QWORD *))(*v243 + 8))(v243);
  if (*(_QWORD *)v272)
  {
    v249 = *(_QWORD *)(*(_QWORD *)v272 + 176);
    v250 = (_QWORD *)operator new();
    *v250 = &off_24C9B6450;
    v250[1] = &off_24C9B64C8;
    v251 = v250 + 1;
    v250[4] = v250 + 1;
    *(_QWORD *)&v377 = &off_24C9B49F0;
    v252 = (_QWORD *)operator new();
    *v252 = &off_24C9B6450;
    v253 = v252 + 1;
    v254 = v250[4];
    if (!v254)
      goto LABEL_360;
    if ((_QWORD *)v254 == v251)
    {
      v252[4] = v253;
      (*(void (**)(_QWORD *))(*v251 + 24))(v251);
    }
    else
    {
      v254 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v254 + 16))(v254, v253);
LABEL_360:
      v252[4] = v254;
    }
    *((_QWORD *)&v377 + 1) = v252;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)(v249 + 120) + 16))(v249 + 120, &v377);
    v255 = *((_QWORD *)&v377 + 1);
    *(_QWORD *)&v377 = &off_24C9B49F0;
    *((_QWORD *)&v377 + 1) = 0;
    if (v255)
      (*(void (**)(uint64_t))(*(_QWORD *)v255 + 8))(v255);
    (*(void (**)(_QWORD *))(*v250 + 8))(v250);
  }
  sub_20E9BC9D8((uint64_t)&v352);
  if (v301)
    operator delete(v301);
  if (v306)
  {
    v307 = v306;
    operator delete(v306);
  }
  if (*(double *)&v303 != 0.0)
  {
    v304 = (std::__shared_weak_count *)v303;
    operator delete(v303);
  }
  if (v309)
  {
    v310 = v309;
    operator delete(v309);
  }
  v256 = v312;
  if (v312)
  {
    v257 = (unint64_t *)&v312->__shared_owners_;
    do
      v258 = __ldaxr(v257);
    while (__stlxr(v258 - 1, v257));
    if (!v258)
    {
      ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
      std::__shared_weak_count::__release_weak(v256);
    }
  }
  sub_20E869418((uint64_t)&v317[16]);
  v259 = *(std::__shared_weak_count **)&v317[8];
  if (*(_QWORD *)&v317[8])
  {
    v260 = (unint64_t *)(*(_QWORD *)&v317[8] + 8);
    do
      v261 = __ldaxr(v260);
    while (__stlxr(v261 - 1, v260));
    if (!v261)
    {
      ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
      std::__shared_weak_count::__release_weak(v259);
    }
  }
  return v22;
}

void sub_20E9A9D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11, _QWORD *a12, _QWORD *a13, _QWORD *a14, _QWORD *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t *a26,uint64_t *a27,uint64_t *a28,uint64_t *a29,uint64_t *a30,uint64_t a31,uint64_t a32,uint64_t a33,std::mutex *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,uint64_t a57,char a58)
{
  uint64_t v58;
  void *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;

  if (__p)
    operator delete(__p);
  sub_20E9AA8C8((uint64_t)&a58);
  v60 = (void *)STACK[0x248];
  if (STACK[0x248])
  {
    STACK[0x250] = (unint64_t)v60;
    operator delete(v60);
  }
  sub_20E86665C((uint64_t)&STACK[0x260]);
  sub_20E9AAA14((uint64_t)&STACK[0x2B0]);
  v62 = a13;
  v61 = a14;
  v63 = a12;
  sub_20E9BCAA8(*(_QWORD **)(v58 + 16088));
  sub_20E86872C(a10, *(_QWORD **)(v58 + 16064));
  sub_20E95EFAC((uint64_t *)(v58 + 16048));
  sub_20E9A70D8(a11);
  sub_20E86A810(a35);
  v64 = *(_QWORD **)(v58 + 13488);
  v65 = a15;
  if (v64 == a15)
  {
    v66 = 4;
  }
  else
  {
    if (!v64)
      goto LABEL_10;
    v66 = 5;
    v65 = *(_QWORD **)(v58 + 13488);
  }
  (*(void (**)(void))(*v65 + 8 * v66))();
LABEL_10:
  v67 = *(_QWORD **)(v58 + 13456);
  if (v67 == a12)
  {
    v68 = 4;
  }
  else
  {
    if (!v67)
      goto LABEL_15;
    v68 = 5;
    v63 = *(_QWORD **)(v58 + 13456);
  }
  (*(void (**)(_QWORD *))(*v63 + 8 * v68))(v63);
LABEL_15:
  v69 = *(_QWORD **)(v58 + 13424);
  if (v69 == a13)
  {
    v70 = 4;
  }
  else
  {
    if (!v69)
      goto LABEL_20;
    v70 = 5;
    v62 = *(_QWORD **)(v58 + 13424);
  }
  (*(void (**)(_QWORD *))(*v62 + 8 * v70))(v62);
LABEL_20:
  v71 = *(_QWORD **)(v58 + 13392);
  if (v71 == a14)
  {
    v72 = 4;
  }
  else
  {
    if (!v71)
    {
      std::mutex::~mutex(a34);
      v73 = *(_QWORD *)(v58 + 13184);
      *(_QWORD *)(v58 + 13184) = 0;
      if (v73)
        goto LABEL_34;
      goto LABEL_24;
    }
    v72 = 5;
    v61 = *(_QWORD **)(v58 + 13392);
  }
  (*(void (**)(_QWORD *))(*v61 + 8 * v72))(v61);
  std::mutex::~mutex(a34);
  v73 = *(_QWORD *)(v58 + 13184);
  *(_QWORD *)(v58 + 13184) = 0;
  if (v73)
  {
LABEL_34:
    (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
    v74 = *a29;
    *a29 = 0;
    if (v74)
    {
LABEL_35:
      (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
      v75 = *(_QWORD *)(v58 + 13168);
      *(_QWORD *)(v58 + 13168) = 0;
      if (v75)
      {
LABEL_36:
        (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
        v76 = *(_QWORD *)(v58 + 13160);
        *(_QWORD *)(v58 + 13160) = 0;
        if (v76)
        {
LABEL_37:
          (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
          v77 = *(uint64_t **)(v58 + 13152);
          *(_QWORD *)(v58 + 13152) = 0;
          if (!v77)
          {
LABEL_29:
            sub_20E9A7148(a30);
            sub_20E9A7198(a26);
            v78 = *(_QWORD *)(v58 + 13128);
            *(_QWORD *)(v58 + 13128) = 0;
            if (v78)
              (*(void (**)(uint64_t))(*(_QWORD *)v78 + 8))(v78);
            sub_20E9A7208(a28);
            sub_20E9A724C(a27);
            sub_20E937AF4(v58);
            _Unwind_Resume(a1);
          }
LABEL_28:
          sub_20E9ACCB8(v77);
        }
LABEL_27:
        v77 = *(uint64_t **)(v58 + 13152);
        *(_QWORD *)(v58 + 13152) = 0;
        if (!v77)
          goto LABEL_29;
        goto LABEL_28;
      }
LABEL_26:
      v76 = *(_QWORD *)(v58 + 13160);
      *(_QWORD *)(v58 + 13160) = 0;
      if (v76)
        goto LABEL_37;
      goto LABEL_27;
    }
LABEL_25:
    v75 = *(_QWORD *)(v58 + 13168);
    *(_QWORD *)(v58 + 13168) = 0;
    if (v75)
      goto LABEL_36;
    goto LABEL_26;
  }
LABEL_24:
  v74 = *a29;
  *a29 = 0;
  if (v74)
    goto LABEL_35;
  goto LABEL_25;
}

uint64_t sub_20E9AA8C8(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_20E9AA908(uint64_t a1)
{
  void *v2;

  if (*(char *)(a1 + 247) < 0)
  {
    operator delete(*(void **)(a1 + 224));
    v2 = *(void **)(a1 + 176);
    if (!v2)
      return a1;
    goto LABEL_3;
  }
  v2 = *(void **)(a1 + 176);
  if (v2)
  {
LABEL_3:
    *(_QWORD *)(a1 + 184) = v2;
    operator delete(v2);
  }
  return a1;
}

_QWORD *sub_20E9AA954(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B6B38;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

_QWORD *sub_20E9AA994(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B6AE0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

_QWORD *sub_20E9AA9D4(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B49F0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t sub_20E9AAA14(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  sub_20E869418(a1 + 16);
  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

uint64_t sub_20E9AAA84(uint64_t a1, double a2, double a3, double a4, double a5)
{
  uint64_t v6;
  const double *v7;
  float64x2_t v9;
  float64_t v15;
  float64_t v16;
  unsigned __int8 v17;
  double v18;
  float64x2_t *v19;
  double v20;
  _QWORD *f64;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  double v26;
  float64x2_t v27;
  double v28;
  _BYTE v29[24];
  float64x2_t *v30;
  uint64_t v31;
  float64x2x3_t v32;

  v31 = *MEMORY[0x24BDAC8D0];
  v27.f64[0] = a2 * 0.0174532925;
  v27.f64[1] = a3 * 0.0174532925;
  v28 = a4 * 0.0174532925;
  v6 = *(_QWORD *)(a1 + 13144);
  v7 = (const double *)(v6 + 168);
  v32 = vld3q_f64(v7);
  _Q7 = *(_OWORD *)(v6 + 216);
  v9 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v32.val[0], a2 * 0.0174532925), v32.val[1], v27, 1), v32.val[2], a4 * 0.0174532925);
  _D1 = a3 * 0.0174532925;
  __asm { FMLA            D4, D1, V7.D[1] }
  v15 = v32.val[0].f64[0] + *(double *)(v6 + 232) * (a4 * 0.0174532925);
  v26 = *(double *)(v6 + 64) + a5;
  v28 = v15;
  v27 = v9;
  v16 = *(double *)(a1 + 13112);
  v17 = atomic_load((unsigned __int8 *)(*(_QWORD *)&v16 + 136));
  if ((v17 & 1) != 0)
  {
    v18 = v26;
    v19 = (float64x2_t *)operator new(0x30uLL);
    *(_QWORD *)&v19->f64[0] = &off_24C9B6558;
    v19->f64[1] = v18;
    v20 = v28;
    v19[1] = v27;
    v19[2].f64[0] = v20;
    v19[2].f64[1] = v16;
    v30 = v19;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(*(_QWORD *)&v16 + 104) + 40))(*(_QWORD *)&v16 + 104, v29);
    f64 = (_QWORD *)v30->f64;
    if (v30 == (float64x2_t *)v29)
    {
      v22 = 4;
      f64 = v29;
    }
    else
    {
      if (!v30)
        goto LABEL_7;
      v22 = 5;
    }
    (*(void (**)(void))(*f64 + 8 * v22))();
  }
LABEL_7:
  v23 = *(_QWORD *)(a1 + 13120);
  std::mutex::lock((std::mutex *)(v23 + 160));
  (*(void (**)(_QWORD, double *))(**(_QWORD **)(v23 + 224) + 16))(*(_QWORD *)(v23 + 224), &v26);
  kdebug_trace();
  sub_20EAF86CC(v23);
  std::mutex::unlock((std::mutex *)(v23 + 160));
  if (*(_BYTE *)(a1 + 8))
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 13112) + 112) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 13112) + 112));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 13168) + 24))(*(_QWORD *)(a1 + 13168));
  }
  v24 = *(_QWORD **)(a1 + 13152);
  std::mutex::lock((std::mutex *)(v24 + 1));
  (*(void (**)(_QWORD, double *))(*(_QWORD *)*v24 + 16))(*v24, &v26);
  std::mutex::unlock((std::mutex *)(v24 + 1));
  return v17 & 1;
}

void sub_20E9AAC80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;

  if (a17 == v17)
  {
    (*(void (**)(void))(a14 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a17)
  {
    (*(void (**)(void))(*(_QWORD *)a17 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E9AAD0C(uint64_t a1, double a2, double a3, double a4, double a5)
{
  double v6;
  uint64_t v7;
  const double *v8;
  float64x2_t v10;
  float64_t v16;
  float64_t v17;
  unsigned __int8 v18;
  double v19;
  float64x2_t *v20;
  double v21;
  _QWORD *f64;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  double v27;
  float64x2_t v28;
  double v29;
  _BYTE v30[24];
  float64x2_t *v31;
  uint64_t v32;
  float64x2x3_t v33;

  v32 = *MEMORY[0x24BDAC8D0];
  v6 = *(double *)(a1 + 13360);
  v7 = *(_QWORD *)(a1 + 13144);
  v8 = (const double *)(v7 + 96);
  v33 = vld3q_f64(v8);
  v28.f64[0] = -(v6 * a2);
  v28.f64[1] = -(v6 * a3);
  v29 = -(v6 * a4);
  _Q4 = *(_OWORD *)(v7 + 144);
  v10 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v33.val[0], v28.f64[0]), v33.val[1], v28, 1), v33.val[2], v29);
  _D1 = v28.f64[1];
  __asm { FMLA            D5, D1, V4.D[1] }
  v16 = v33.val[0].f64[0] + *(double *)(v7 + 160) * v29;
  v27 = *(double *)(v7 + 56) + *(double *)(v7 + 64) + a5;
  v28 = v10;
  v29 = v16;
  v17 = *(double *)(a1 + 13112);
  v18 = atomic_load((unsigned __int8 *)(*(_QWORD *)&v17 + 136));
  if ((v18 & 1) != 0)
  {
    v19 = v27;
    v20 = (float64x2_t *)operator new(0x30uLL);
    *(_QWORD *)&v20->f64[0] = &off_24C9B65D8;
    v20->f64[1] = v19;
    v21 = v29;
    v20[1] = v28;
    v20[2].f64[0] = v21;
    v20[2].f64[1] = v17;
    v31 = v20;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(*(_QWORD *)&v17 + 104) + 40))(*(_QWORD *)&v17 + 104, v30);
    f64 = (_QWORD *)v31->f64;
    if (v31 == (float64x2_t *)v30)
    {
      v23 = 4;
      f64 = v30;
    }
    else
    {
      if (!v31)
        goto LABEL_7;
      v23 = 5;
    }
    (*(void (**)(void))(*f64 + 8 * v23))();
  }
LABEL_7:
  if (*(_BYTE *)(a1 + 8))
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 13112) + 112) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 13112) + 112));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 13168) + 24))(*(_QWORD *)(a1 + 13168));
  }
  v24 = *(_QWORD *)(a1 + 13120);
  std::mutex::lock((std::mutex *)(v24 + 160));
  (*(void (**)(_QWORD, double *))(**(_QWORD **)(v24 + 224) + 24))(*(_QWORD *)(v24 + 224), &v27);
  kdebug_trace();
  sub_20EAF86CC(v24);
  std::mutex::unlock((std::mutex *)(v24 + 160));
  v25 = *(_QWORD **)(a1 + 13152);
  std::mutex::lock((std::mutex *)(v25 + 1));
  (*(void (**)(_QWORD, double *))(*(_QWORD *)*v25 + 24))(*v25, &v27);
  std::mutex::unlock((std::mutex *)(v25 + 1));
  return v18 & 1;
}

void sub_20E9AAF08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;

  if (a17 == v17)
  {
    (*(void (**)(void))(a14 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a17)
  {
    (*(void (**)(void))(*(_QWORD *)a17 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E9AAF94(uint64_t a1, __int128 *a2, uint64_t *a3)
{
  __int128 v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  double v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  unsigned __int8 v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  unsigned int v65;
  unsigned int v66;
  _BOOL4 v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _BYTE v73[25];
  double v74[36];
  uint64_t v75;
  std::__shared_weak_count *v76;
  __int128 v77;
  __int128 v78;
  _BYTE __dst[288];
  __int128 v80;
  __int128 v81;
  __int128 v82;
  _OWORD v83[2];
  uint64_t v84;
  std::__shared_weak_count *v85;
  __int128 v86;
  _OWORD v87[18];
  uint64_t v88;
  std::__shared_weak_count *v89;
  __int128 v90;

  LOBYTE(v87[10]) = 0;
  BYTE8(v87[10]) = 0;
  LOBYTE(v87[11]) = 0;
  BYTE8(v87[11]) = 0;
  LOBYTE(v87[12]) = 0;
  BYTE8(v87[12]) = 0;
  LOBYTE(v87[13]) = 0;
  BYTE8(v87[13]) = 0;
  LOBYTE(v87[14]) = 0;
  BYTE8(v87[14]) = 0;
  LOBYTE(v87[15]) = 0;
  BYTE8(v87[15]) = 0;
  LOBYTE(v87[16]) = 0;
  BYTE8(v87[16]) = 0;
  LOBYTE(v87[17]) = 0;
  v86 = 0u;
  memset(v87, 0, 17);
  BYTE8(v90) = 0;
  v88 = 0;
  *((_QWORD *)&v87[17] + 1) = 0;
  LOBYTE(v90) = 0;
  v89 = 0;
  v6 = a2[3];
  v82 = a2[2];
  v83[0] = v6;
  *(_OWORD *)((char *)v83 + 9) = *(__int128 *)((char *)a2 + 57);
  v7 = a2[1];
  v80 = *a2;
  v81 = v7;
  v9 = *((_QWORD *)a2 + 10);
  v8 = (std::__shared_weak_count *)*((_QWORD *)a2 + 11);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v84 = v9;
  v85 = v8;
  v13 = *((_QWORD *)a2 + 12);
  v12 = *((_QWORD *)a2 + 13);
  if (v12)
  {
    v14 = (unint64_t *)(v12 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    v16 = (std::__shared_weak_count *)*((_QWORD *)&v86 + 1);
    *(_QWORD *)&v86 = v13;
    *((_QWORD *)&v86 + 1) = v12;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
    v86 = v13;
  }
  memcpy(v87, a2 + 7, sizeof(v87));
  v20 = *a3;
  v19 = (std::__shared_weak_count *)a3[1];
  if (v19)
  {
    v21 = (unint64_t *)&v19->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = v89;
  v88 = v20;
  v89 = v19;
  if (!v23)
    goto LABEL_20;
  v24 = (unint64_t *)&v23->__shared_owners_;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
    if (!*((_BYTE *)a2 + 304))
      goto LABEL_56;
  }
  else
  {
LABEL_20:
    if (!*((_BYTE *)a2 + 304))
      goto LABEL_56;
  }
  v26 = *(_QWORD *)(a1 + 13144);
  v72 = v82;
  *(_OWORD *)v73 = v83[0];
  *(_OWORD *)&v73[9] = *(_OWORD *)((char *)v83 + 9);
  v70 = v80;
  v71 = v81;
  v27 = v85;
  v68 = v84;
  if (v85)
  {
    v28 = (unint64_t *)&v85->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v30 = *((_QWORD *)&v86 + 1);
  v69 = v86;
  if (*((_QWORD *)&v86 + 1))
  {
    v31 = (unint64_t *)(*((_QWORD *)&v86 + 1) + 8);
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  memcpy(v74, v87, sizeof(v74));
  v33 = v88;
  v34 = v89;
  v75 = v88;
  v76 = v89;
  if (v89)
  {
    v35 = (unint64_t *)&v89->__shared_owners_;
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  v77 = v90;
  if (LOBYTE(v74[24]))
  {
    if (LOBYTE(v74[28]))
    {
      v37 = v74[27];
      if (v74[27] < 0.0)
        goto LABEL_34;
    }
    else
    {
      v62 = *(uint64_t **)(v26 + 712);
      v63 = (uint64_t *)(v26 + 712);
      if (!v62)
        goto LABEL_86;
      v64 = v63;
      do
      {
        while (1)
        {
          v65 = *((_DWORD *)v62 + 8);
          if (v65 >= LODWORD(v74[35]) && (v65 != LODWORD(v74[35]) || *((_DWORD *)v62 + 9) >= HIDWORD(v74[35])))
            break;
          v62 = (uint64_t *)v62[1];
          if (!v62)
            goto LABEL_84;
        }
        v64 = v62;
        v62 = (uint64_t *)*v62;
      }
      while (v62);
LABEL_84:
      if (v64 == v63
        || (v66 = *((_DWORD *)v64 + 8), LODWORD(v74[35]) < v66)
        || LODWORD(v74[35]) == v66 && HIDWORD(v74[35]) < *((_DWORD *)v64 + 9))
      {
LABEL_86:
        v67 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/DataCorrection/src/DataCorrection.cpp", 43, (uint64_t)"rt != camera_readout_times_.end()", 33, (uint64_t)"Readout time not found in calibration.", 38, (void (*)(void **))sub_21023DDB0);
        v64 = v63;
        if (v67)
          abort();
      }
      v37 = *((double *)v64 + 5);
      if (v37 < 0.0)
        goto LABEL_34;
    }
    v74[1] = (v37 - v74[23]) * 0.5;
  }
LABEL_34:
  memcpy(__dst, v74, sizeof(__dst));
  v75 = 0;
  v76 = 0;
  v78 = v77;
  v82 = v72;
  v83[0] = *(_OWORD *)v73;
  *(_OWORD *)((char *)v83 + 9) = *(_OWORD *)&v73[9];
  v80 = v70;
  v81 = v71;
  v38 = v85;
  v84 = v68;
  v85 = v27;
  if (v38)
  {
    v39 = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v41 = (std::__shared_weak_count *)*((_QWORD *)&v86 + 1);
  *(_QWORD *)&v86 = v69;
  *((_QWORD *)&v86 + 1) = v30;
  if (v41)
  {
    v42 = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  memcpy(v87, __dst, sizeof(v87));
  v44 = v89;
  v88 = v33;
  v89 = v34;
  if (v44)
  {
    v45 = (unint64_t *)&v44->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  *(_QWORD *)&v90 = v78;
  BYTE8(v90) = BYTE8(v78);
  v47 = v76;
  if (v76)
  {
    v48 = (unint64_t *)&v76->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
LABEL_56:
  v50 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 13160) + 56) + 168);
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)(v50 + 88) + 16))(v50 + 88, &v80);
  if (*(_BYTE *)(a1 + 8))
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 13160) + 24))(*(_QWORD *)(a1 + 13160));
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 13112) + 112) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 13112) + 112));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 13168) + 24))(*(_QWORD *)(a1 + 13168));
  }
  if (*((_DWORD *)a2 + 98) == *(_DWORD *)(a1 + 15960) && *((_DWORD *)a2 + 99) == *(_DWORD *)(a1 + 15964))
    sub_20EAF84C4(*(_QWORD *)(a1 + 13120), (uint64_t)&v80);
  v51 = atomic_load((unsigned __int8 *)(*(_QWORD *)(a1 + 13112) + 136));
  v52 = v89;
  if (v89)
  {
    v53 = (unint64_t *)&v89->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v86 + 1);
  if (*((_QWORD *)&v86 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v86 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v58 = v85;
  if (v85)
  {
    v59 = (unint64_t *)&v85->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  return v51 & 1;
}

void sub_20E9AB648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E98046C(va);
  sub_20E98046C(&STACK[0x2F0]);
  _Unwind_Resume(a1);
}

void sub_20E9AB664(_Unwind_Exception *a1)
{
  sub_20E98046C(&STACK[0x2F0]);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9AB678(uint64_t a1, uint64_t a2, double *a3, double a4)
{
  _QWORD *v8;
  std::mutex *v9;
  uint64_t v10;
  int v11;
  double v12;
  double v13;
  double v14;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v19;
  float64_t v25;
  double v26;
  double v27;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  uint64_t v38;
  int64x2_t v39[3];
  float64x2_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  float64x2_t v46;
  double v47;

  v47 = 0.0;
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v40 = 0u;
  memset(v39, 0, sizeof(v39));
  v8 = *(_QWORD **)(a1 + 13152);
  v9 = (std::mutex *)(v8 + 1);
  v38 = 0;
  std::mutex::lock((std::mutex *)(v8 + 1));
  (*(void (**)(_QWORD))(*(_QWORD *)*v8 + 64))(*v8);
  v10 = (*(uint64_t (**)(_QWORD, int64x2_t *, uint64_t *, uint64_t, _QWORD, double))(*(_QWORD *)*v8 + 56))(*v8, v39, &v38, 1, 0, a4);
  std::mutex::unlock(v9);
  if (!(_DWORD)v10)
  {
    std::mutex::lock((std::mutex *)(a1 + 13296));
    v11 = *(unsigned __int8 *)(a1 + 13288);
    std::mutex::unlock((std::mutex *)(a1 + 13296));
    if (!v11
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/VIOEngineAndPosePrediction.cpp", 674, (uint64_t)"imu_to_camera_.Valid()", 22, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    std::mutex::lock((std::mutex *)(a1 + 13296));
    v29 = *(double *)(a1 + 13192);
    v34 = *(double *)(a1 + 13200);
    v32 = *(double *)(a1 + 13208);
    v12 = *(double *)(a1 + 13216);
    v30 = *(double *)(a1 + 13224);
    v36 = *(double *)(a1 + 13232);
    v33 = *(double *)(a1 + 13240);
    v13 = *(double *)(a1 + 13248);
    v31 = *(double *)(a1 + 13256);
    v37 = *(double *)(a1 + 13264);
    v35 = *(double *)(a1 + 13272);
    v14 = *(double *)(a1 + 13280);
    std::mutex::unlock((std::mutex *)(a1 + 13296));
    *(_QWORD *)&_Q3.f64[0] = v39[1].i64[0];
    v16 = (float64x2_t)v39[0];
    v17 = *(float64x2_t *)((char *)&v39[1] + 8);
    *(_QWORD *)&_Q3.f64[1] = v39[2].i64[1];
    _Q19 = v40;
    v19 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v39[0], *(int64x2_t *)((char *)&v39[1] + 8)), v46.f64[0]), (float64x2_t)vzip2q_s64(v39[0], *(int64x2_t *)((char *)&v39[1] + 8)), v46, 1), _Q3, v47);
    _D2 = v46.f64[1];
    __asm { FMLA            D3, D2, V19.D[1] }
    v25 = _Q3.f64[0] + *(double *)&v41 * v47;
    _Q3.f64[0] = v34 * *(double *)&v39[2].i64[1] + v29 * *(double *)v39[1].i64 + v32 * *(double *)&v41;
    v26 = v36 * *(double *)&v39[2].i64[1] + v30 * *(double *)v39[1].i64 + v33 * *(double *)&v41;
    v27 = v37 * *(double *)&v39[2].i64[1] + v31 * *(double *)v39[1].i64 + v35 * *(double *)&v41;
    *(float64x2_t *)a2 = vaddq_f64(vmulq_n_f64(v40, v32), vaddq_f64(vmulq_n_f64((float64x2_t)v39[0], v29), vmulq_n_f64(*(float64x2_t *)((char *)&v39[1] + 8), v34)));
    *(float64_t *)(a2 + 16) = _Q3.f64[0];
    *(float64x2_t *)(a2 + 24) = vaddq_f64(vmulq_n_f64(_Q19, v33), vaddq_f64(vmulq_n_f64(v16, v30), vmulq_n_f64(v17, v36)));
    *(double *)(a2 + 40) = v26;
    *(float64x2_t *)(a2 + 48) = vaddq_f64(vmulq_n_f64(v17, v37), vaddq_f64(vmulq_n_f64(v16, v31), vmulq_n_f64(_Q19, v35)));
    *(double *)(a2 + 64) = v27;
    *a3 = v12 - v29 * v19.f64[0] - v32 * v25 - vmuld_lane_f64(v34, v19, 1);
    a3[1] = v13 - v30 * v19.f64[0] - v33 * v25 - vmuld_lane_f64(v36, v19, 1);
    a3[2] = v14 - v35 * v25 - v31 * v19.f64[0] - vmuld_lane_f64(v37, v19, 1);
  }
  return v10;
}

void sub_20E9AB96C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9AB980(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v5;
  std::mutex *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  std::mutex *v34;
  uint64_t v35;
  double *v36;
  __int128 v37;
  __int128 v38;
  double v39;
  float64x2_t v41;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  float64x2_t v58;
  double v59;
  _BYTE v60[9];
  float64x2x3_t v61;

  v5 = *(_QWORD *)(a1 + 13152);
  v6 = (std::mutex *)(v5 + 8);
  std::mutex::lock((std::mutex *)(v5 + 8));
  v8 = *(_QWORD *)(v5 + 72);
  v7 = *(_QWORD *)(v5 + 80);
  *(_QWORD *)&v49 = v8;
  *((_QWORD *)&v49 + 1) = v7;
  if (v7)
  {
    v9 = (unint64_t *)(v7 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v12 = *(_QWORD *)(v5 + 88);
  v11 = *(_QWORD *)(v5 + 96);
  *(_QWORD *)&v50 = v12;
  *((_QWORD *)&v50 + 1) = v11;
  if (v11)
  {
    v13 = (unint64_t *)(v11 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = *(_QWORD *)(v5 + 104);
  v16 = *(_QWORD *)(v5 + 112);
  *(_QWORD *)&v51 = v15;
  *((_QWORD *)&v51 + 1) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = *(_BYTE *)(v5 + 120);
  LOBYTE(v52) = v19;
  std::mutex::unlock(v6);
  v20 = operator new(0x50uLL);
  v21 = v20;
  v20[1] = 0;
  v20[2] = 0;
  *v20 = &off_24C9B0848;
  v20[3] = v8;
  v22 = (char *)(v20 + 3);
  v49 = 0uLL;
  v20[4] = v7;
  v20[5] = v12;
  v50 = 0uLL;
  v20[6] = v11;
  v20[7] = v15;
  v20[8] = v16;
  v51 = 0uLL;
  *((_BYTE *)v20 + 72) = v19;
  v23 = *(unsigned int *)(a2 + 1080);
  if ((_DWORD)v23 == -1)
    goto LABEL_18;
  if ((_DWORD)v23)
  {
    ((void (*)(_BYTE *, uint64_t))off_24C9B6648[v23])(v60, a2);
LABEL_18:
    *(_QWORD *)a2 = v22;
    *(_QWORD *)(a2 + 8) = v21;
    *(_DWORD *)(a2 + 1080) = 0;
    goto LABEL_19;
  }
  v24 = *(std::__shared_weak_count **)(a2 + 8);
  *(_QWORD *)a2 = v22;
  *(_QWORD *)(a2 + 8) = v20;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
LABEL_19:
  if (*((_QWORD *)&v51 + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v51 + 1) + 16))(*((_QWORD *)&v51 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v51 + 1));
    }
  }
  if (*((_QWORD *)&v50 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v50 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v50 + 1) + 16))(*((_QWORD *)&v50 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v50 + 1));
    }
  }
  if (*((_QWORD *)&v49 + 1))
  {
    v31 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v49 + 1) + 16))(*((_QWORD *)&v49 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v49 + 1));
    }
  }
  v59 = 0.0;
  v57 = 0u;
  v58 = 0u;
  v55 = 0u;
  v56 = 0u;
  v53 = 0u;
  v54 = 0u;
  v51 = 0u;
  v52 = 0u;
  v33 = *(_QWORD **)(a1 + 13152);
  v34 = (std::mutex *)(v33 + 1);
  v49 = 0u;
  v50 = 0u;
  std::mutex::lock((std::mutex *)(v33 + 1));
  (*(void (**)(_QWORD))(*(_QWORD *)*v33 + 64))(*v33);
  v35 = (*(uint64_t (**)(_QWORD, __int128 *, uint64_t, uint64_t, _QWORD, double))(*(_QWORD *)*v33 + 56))(*v33, &v49, a2 + 1208, 1, 0, a3);
  std::mutex::unlock(v34);
  if (!(_DWORD)v35)
  {
    v36 = (double *)(a2 + 1088);
    *(_OWORD *)(a2 + 1152) = 0u;
    *(_OWORD *)(a2 + 1168) = 0u;
    *(_OWORD *)(a2 + 1120) = 0u;
    *(_OWORD *)(a2 + 1136) = 0u;
    *(_OWORD *)(a2 + 1088) = 0u;
    *(_OWORD *)(a2 + 1104) = 0u;
    if (!*(_BYTE *)(a2 + 1184))
      *(_BYTE *)(a2 + 1184) = 1;
    *(_QWORD *)(a2 + 1152) = v53;
    v37 = v52;
    *(_OWORD *)(a2 + 1120) = v51;
    *(_OWORD *)(a2 + 1136) = v37;
    v38 = v50;
    *(_OWORD *)v36 = v49;
    *(_OWORD *)(a2 + 1104) = v38;
    *(double *)&v38 = v59;
    v61 = vld3q_f64(v36);
    v39 = *(double *)(a2 + 1152);
    _Q6 = *(_OWORD *)(a2 + 1136);
    v41 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v61.val[0], v58.f64[0]), v61.val[1], v58, 1), v61.val[2], v59);
    _D1 = v58.f64[1];
    __asm { FMLA            D2, D1, V6.D[1] }
    *(float64x2_t *)(a2 + 1160) = vnegq_f64(v41);
    *(double *)(a2 + 1176) = -(v61.val[0].f64[0] + v39 * *(double *)&v38);
  }
  *(double *)(a2 + 1192) = a3;
  *(_QWORD *)(a2 + 1200) = 0;
  return v35;
}

void sub_20E9ABCB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E91D88C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20E9ABCC4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20E9ABCD8(uint64_t a1, char *__s)
{
  size_t v4;
  size_t v5;
  char *p_p;
  size_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  char v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  void *__p;
  __int128 v21;
  _QWORD v22[2];
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (__s)
  {
    v4 = strlen(__s);
    if (v4 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    v5 = v4;
    if (v4 >= 0x17)
    {
      v10 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17)
        v10 = v4 | 7;
      v11 = v10 + 1;
      p_p = (char *)operator new(v10 + 1);
      *(_QWORD *)&v21 = v5;
      *((_QWORD *)&v21 + 1) = v11 | 0x8000000000000000;
      __p = p_p;
    }
    else
    {
      HIBYTE(v21) = v4;
      p_p = (char *)&__p;
      if (!v4)
        goto LABEL_15;
    }
    memcpy(p_p, __s, v5);
LABEL_15:
    v12 = &p_p[v5];
    goto LABEL_21;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryEngine/include/VIO/OdometryEngine/VIOEngineNode.hpp", 461, (uint64_t)"map_file_path", 13, (uint64_t)"Path to map file is nullptr", 27, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v7 = strlen(0);
  if (v7 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v8 = v7;
  if (v7 >= 0x17)
  {
    v13 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v13 = v7 | 7;
    v14 = v13 + 1;
    v9 = (char *)operator new(v13 + 1);
    *(_QWORD *)&v21 = v8;
    *((_QWORD *)&v21 + 1) = v14 | 0x8000000000000000;
    __p = v9;
  }
  else
  {
    HIBYTE(v21) = v7;
    v9 = (char *)&__p;
    if (!v7)
      goto LABEL_20;
  }
  memcpy(v9, 0, v8);
LABEL_20:
  v12 = &v9[v8];
LABEL_21:
  *v12 = 0;
  v15 = __p;
  v22[0] = v21;
  *(_QWORD *)((char *)v22 + 7) = *(_QWORD *)((char *)&v21 + 7);
  v16 = HIBYTE(v21);
  v21 = 0uLL;
  __p = 0;
  v17 = operator new(0x28uLL);
  *v17 = off_24C9B6768;
  v17[1] = v15;
  v17[2] = v22[0];
  *(_QWORD *)((char *)v17 + 23) = *(_QWORD *)((char *)v22 + 7);
  *((_BYTE *)v17 + 31) = v16;
  v17[4] = a1;
  v24 = v17;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(a1 + 104) + 40))(a1 + 104, v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
  }
  else
  {
    if (!v24)
      goto LABEL_26;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_26:
  if (SHIBYTE(v21) < 0)
    operator delete(__p);
}

void sub_20E9ABF28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char *a20)
{
  char *v20;
  char *v22;
  uint64_t v23;

  v22 = a20;
  if (a20 == v20)
  {
    v23 = 4;
    v22 = &a17;
  }
  else
  {
    if (!a20)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20E9ABF90(uint64_t a1)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 13112);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/VIOEngineAndPosePrediction.cpp", 735, (uint64_t)"engine_node_", 12, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(_QWORD *)(a1 + 13112);
  }
  v5[0] = &off_24C9B67E8;
  v5[1] = v2;
  v6 = v5;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)(v2 + 104) + 40))(v2 + 104, v5);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      goto LABEL_9;
    v4 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
LABEL_9:
  if (*(_BYTE *)(a1 + 8))
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 13160) + 24))(*(_QWORD *)(a1 + 13160));
    return (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 13112) + 112) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 13112) + 112));
  }
  return result;
}

void sub_20E9AC0A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20E9AC0F4(uint64_t a1, __CFData *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  uint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  const UInt8 **v13;
  std::__shared_weak_count *v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;

  v4 = (std::__shared_weak_count *)operator new(0x30uLL);
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9B0508;
  v4[1].__shared_owners_ = 0;
  v4[1].__shared_weak_owners_ = 0;
  v13 = (const UInt8 **)&v4[1];
  v14 = v4;
  v15 = &v4[1].__vftable;
  v16 = v4;
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v6 = *(_QWORD *)(a1 + 13112);
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  v17 = v6;
  sub_20E9C7240(v6 + 104, (uint64_t *)&v15);
  (*(void (**)(_QWORD))(**(_QWORD **)(v6 + 112) + 24))(*(_QWORD *)(v6 + 112));
  v8 = v16;
  if (v16)
  {
    v9 = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  CFDataAppendBytes(a2, *v13, v13[1] - *v13);
  if (v14)
  {
    v11 = (unint64_t *)&v14->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_20E9AC218(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E9AC22C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va1);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E9AC248(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5AC68);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5AC68))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.applecv3d");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A5AC60);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A5AC68);
  }
  *a1 = qword_254A5AC60;
}

void sub_20E9AC2E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5AC68);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5AC68);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9AC33C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t result;
  unint64_t *v8;
  unint64_t v9;
  void *__p[2];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  char v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  sub_20E9C7EA0((uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 13128) + 72) + 272), a2, &v12);
  v4 = v12;
  v12 = 0;
  sub_20E9C822C(v4, (uint64_t)&v24);
  if (!v4)
    goto LABEL_5;
  v5 = (unint64_t *)(v4 + 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 - 1, v5));
  if (v6)
  {
LABEL_5:
    if (v35)
      goto LABEL_6;
LABEL_9:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    goto LABEL_10;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  if (!v35)
    goto LABEL_9;
LABEL_6:
  v14 = v25;
  v19 = v31;
  v20 = v32;
  v21 = v33;
  v22 = v34;
  v15 = v27;
  v16 = v28;
  v17 = v29;
  v13 = v24;
  v18 = v30;
  v23 = v26;
  __p[0] = 0;
  __p[1] = 0;
  v11 = 0;
  sub_20E989884((__int128 *)&v13, (uint64_t)__p, a3);
  if (SHIBYTE(v11) < 0)
    operator delete(__p[0]);
LABEL_10:
  result = v12;
  if (v12)
  {
    v8 = (unint64_t *)(v12 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  }
  return result;
}

void sub_20E9AC4A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, unint64_t *a15)
{
  unint64_t *v16;
  unint64_t v17;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
  {
    v16 = a15 + 1;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      (*(void (**)(unint64_t *))(*a15 + 16))(a15);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E9AC52C@<X0>(void *__src@<X1>, size_t __n@<X2>, uint64_t a3@<X0>, uint64_t a4@<X8>)
{
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t result;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14[14];
  void *__p;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  void *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v35 = 0u;
  v34 = 0u;
  v33 = 0u;
  v32 = 0u;
  v31 = 0u;
  v30 = 0u;
  v29 = 0u;
  v28 = 0u;
  if (__n >= 0xC00)
    v6 = 3072;
  else
    v6 = __n;
  __p = 0;
  v16 = 0uLL;
  sub_20E9061AC(__src, __n, (uint64_t)&v26, (unsigned __int8 *)&__p, v6);
  if (SHIBYTE(v16) < 0)
    operator delete(__p);
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 13128) + 72);
  __p = v26;
  v16 = v27;
  v24 = v34;
  v25 = v35;
  v22 = v32;
  v23 = v33;
  v20 = v30;
  v21 = v31;
  v18 = v28;
  v19 = v29;
  v17 = v36;
  sub_20E9C8D18((uint64_t *)(v7 + 440), (uint64_t)&__p, v14);
  v8 = v14[0];
  v14[0] = 0;
  sub_20E9C90A4(v8, a4);
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  }
  result = v14[0];
  if (v14[0])
  {
    v12 = (unint64_t *)(v14[0] + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  }
  return result;
}

void sub_20E9AC6CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t *a12, uint64_t a13, uint64_t a14, int a15, uint64_t a16, int a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char *category,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,void *a27,int a28,__int16 a29,char a30,char a31,char a32,int a33,__int16 a34,char a35,char a36)
{
  unint64_t *v36;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;

  if (v36)
  {
    v38 = v36 + 1;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
      (*(void (**)(unint64_t *))(*v36 + 16))(v36);
  }
  if (a12)
  {
    v40 = a12 + 1;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      (*(void (**)(unint64_t *))(*a12 + 16))(a12);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20E9ACCB8(uint64_t *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;

  v2 = (std::__shared_weak_count *)a1[14];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[12];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[12];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[10];
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    std::mutex::~mutex((std::mutex *)(a1 + 1));
    v11 = *a1;
    *a1 = 0;
    if (!v11)
      goto LABEL_19;
  }
  else
  {
LABEL_15:
    std::mutex::~mutex((std::mutex *)(a1 + 1));
    v11 = *a1;
    *a1 = 0;
    if (!v11)
      goto LABEL_19;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
LABEL_19:
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E9ACDD8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)a1 = &off_24C9B4958;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
  {
    v3 = sub_20E9ACF38(v2);
    MEMORY[0x212BC6398](v3, 0x10B2C4085F70915);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      v7 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = 0;
      if (!v7)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  v7 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v7)
  {
LABEL_8:
    v8 = sub_20E9ACF38(v7);
    MEMORY[0x212BC6398](v8, 0x10B2C4085F70915);
  }
LABEL_9:
  v9 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v9)
    goto LABEL_13;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
  {
LABEL_13:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_19:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_19;
LABEL_14:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_20:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20E9ACF10(uint64_t a1)
{
  sub_20E9ACDD8(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E9ACF38(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9B4988;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9B49B8;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9B49F0;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_20E9AD11C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9B49B8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20E9AD154(uint64_t a1)
{
  sub_20E9ACF38(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E9AD178(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9B49B8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20E9AD1C0(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C9B49F0;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C9B49F0;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20E9AD294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E9AD2C0(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B49F0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E9AD310(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20E9AD324(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)a1 = &off_24C9B4A28;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
  {
    sub_20E9AD4BC(v2 + 504);
    sub_20E9AD768(v2 + 336);
    sub_20E9ADA14(v2 + 168);
    v3 = sub_20E9ADCC0(v2);
    MEMORY[0x212BC6398](v3, 0x10B2C408B1DF574);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      v7 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = 0;
      if (!v7)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  v7 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v7)
  {
LABEL_8:
    sub_20E9AD4BC(v7 + 504);
    sub_20E9AD768(v7 + 336);
    sub_20E9ADA14(v7 + 168);
    v8 = sub_20E9ADCC0(v7);
    MEMORY[0x212BC6398](v8, 0x10B2C408B1DF574);
  }
LABEL_9:
  v9 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v9)
    goto LABEL_13;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
  {
LABEL_13:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_19:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_19;
LABEL_14:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_20:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20E9AD494(uint64_t a1)
{
  sub_20E9AD324(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E9AD4BC(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9B4A58;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9B49B8;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9B4A88;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_20E9AD6A0(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B4A88;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20E9AD6E0(uint64_t a1)
{
  sub_20E9AD4BC(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E9AD704(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B4A88;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E9AD754(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20E9AD768(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9B4AC0;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9B2520;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9B4AF0;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_20E9AD94C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B4AF0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20E9AD98C(uint64_t a1)
{
  sub_20E9AD768(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E9AD9B0(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B4AF0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E9ADA00(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20E9ADA14(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9B4B28;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9B49B8;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9B4B58;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_20E9ADBF8(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B4B58;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20E9ADC38(uint64_t a1)
{
  sub_20E9ADA14(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E9ADC5C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B4B58;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E9ADCAC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20E9ADCC0(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9B4B90;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9B49B8;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9B4BC0;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_20E9ADEA4(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B4BC0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20E9ADEE4(uint64_t a1)
{
  sub_20E9ADCC0(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E9ADF08(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B4BC0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E9ADF58(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20E9ADF68(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;

  if (*(_BYTE *)(a1 + 312))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 296);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    v5 = *(std::__shared_weak_count **)(a1 + 280);
    if (v5)
    {
      v6 = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v8 = *(std::__shared_weak_count **)(a1 + 264);
    if (v8)
    {
      v9 = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  v11 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 224) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  std::mutex::~mutex((std::mutex *)(a1 + 160));
  v12 = *(_QWORD *)(a1 + 112);
  if (v12)
  {
    v13 = *(_QWORD *)(a1 + 120);
    v14 = *(void **)(a1 + 112);
    if (v13 != v12)
    {
      do
      {
        v15 = *(std::__shared_weak_count **)(v13 - 24);
        if (v15)
          std::__shared_weak_count::__release_weak(v15);
        v16 = *(std::__shared_weak_count **)(v13 - 40);
        if (v16)
          std::__shared_weak_count::__release_weak(v16);
        v13 -= 80;
      }
      while (v13 != v12);
      v14 = *(void **)(a1 + 112);
    }
    *(_QWORD *)(a1 + 120) = v12;
    operator delete(v14);
  }
  v17 = *(_QWORD *)(a1 + 64);
  if (v17)
  {
    v18 = *(_QWORD *)(a1 + 72);
    v19 = *(void **)(a1 + 64);
    if (v18 == v17)
    {
LABEL_45:
      *(_QWORD *)(a1 + 72) = v17;
      operator delete(v19);
      goto LABEL_46;
    }
    while (1)
    {
      v20 = v18 - 400;
      v21 = *(std::__shared_weak_count **)(v18 - 296);
      if (!v21)
        goto LABEL_37;
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
        v24 = *(std::__shared_weak_count **)(v18 - 312);
        if (v24)
        {
LABEL_38:
          v25 = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
      }
      else
      {
LABEL_37:
        v24 = *(std::__shared_weak_count **)(v18 - 312);
        if (v24)
          goto LABEL_38;
      }
      v18 -= 400;
      if (v20 == v17)
      {
        v19 = *(void **)(a1 + 64);
        goto LABEL_45;
      }
    }
  }
LABEL_46:
  v27 = *(_QWORD **)(a1 + 56);
  if (v27 == (_QWORD *)(a1 + 32))
  {
    v28 = 4;
    v27 = (_QWORD *)(a1 + 32);
  }
  else
  {
    if (!v27)
      goto LABEL_51;
    v28 = 5;
  }
  (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_51:
  v29 = *(_QWORD **)(a1 + 24);
  if (v29 == (_QWORD *)a1)
  {
    v30 = 4;
    v29 = (_QWORD *)a1;
    goto LABEL_55;
  }
  if (v29)
  {
    v30 = 5;
LABEL_55:
    (*(void (**)(void))(*v29 + 8 * v30))();
  }
  return a1;
}

uint64_t sub_20E9AE1D4(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = (_QWORD *)(a1 + 520);
  v3 = *(_QWORD **)(a1 + 544);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *(_QWORD **)(a1 + 496);
  if (v5 == (_QWORD *)(a1 + 472))
  {
    v6 = 4;
    v5 = (_QWORD *)(a1 + 472);
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = *(_QWORD **)(a1 + 464);
  if (v7 == (_QWORD *)(a1 + 440))
  {
    v8 = 4;
    v7 = (_QWORD *)(a1 + 440);
  }
  else
  {
    if (!v7)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_16:
  v9 = *(_QWORD **)(a1 + 296);
  if (v9 == (_QWORD *)(a1 + 272))
  {
    v10 = 4;
    v9 = (_QWORD *)(a1 + 272);
  }
  else
  {
    if (!v9)
      goto LABEL_21;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_21:
  v11 = *(_QWORD **)(a1 + 264);
  if (v11 == (_QWORD *)(a1 + 240))
  {
    v12 = 4;
    v11 = (_QWORD *)(a1 + 240);
  }
  else
  {
    if (!v11)
      goto LABEL_26;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_26:
  v13 = *(_QWORD **)(a1 + 232);
  if (v13 == (_QWORD *)(a1 + 208))
  {
    v14 = 4;
    v13 = (_QWORD *)(a1 + 208);
  }
  else
  {
    if (!v13)
      goto LABEL_31;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_31:
  v15 = *(_QWORD **)(a1 + 200);
  if (v15 == (_QWORD *)(a1 + 176))
  {
    v16 = 4;
    v15 = (_QWORD *)(a1 + 176);
  }
  else
  {
    if (!v15)
      goto LABEL_36;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_36:
  v17 = *(_QWORD **)(a1 + 168);
  if (v17 == (_QWORD *)(a1 + 144))
  {
    v18 = 4;
    v17 = (_QWORD *)(a1 + 144);
    goto LABEL_40;
  }
  if (v17)
  {
    v18 = 5;
LABEL_40:
    (*(void (**)(void))(*v17 + 8 * v18))();
  }
  v19 = *(std::__shared_weak_count **)(a1 + 128);
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = 0;
  if (v22)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    v23 = *(_QWORD *)(a1 + 112);
    *(_QWORD *)(a1 + 112) = 0;
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  }
  v24 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  if (v24)
  {
    os_workgroup_cancel(*(os_workgroup_t *)(v24 + 24));
    os_release(*(void **)(v24 + 24));
    if (*(char *)(v24 + 23) < 0)
      operator delete(*(void **)v24);
    MEMORY[0x212BC6398](v24, 0x1032C402ED93987);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 32));
  if (*(_BYTE *)(a1 + 24) && *(_QWORD *)a1)
  {
    sub_20E9AE494(a1, *(void ***)a1);
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_20E9AE44C(uint64_t a1)
{
  std::mutex::~mutex((std::mutex *)(a1 + 32));
  if (*(_BYTE *)(a1 + 24) && *(_QWORD *)a1)
  {
    sub_20E9AE494(a1, *(void ***)a1);
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_20E9AE494(uint64_t a1, void **a2)
{
  void **v4;
  void **v5;
  void *v6;
  char *v7;
  char *v8;
  char *v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;

  v4 = *(void ***)(a1 + 8);
  if (v4 != a2)
  {
    v5 = *(void ***)(a1 + 8);
    while (1)
    {
      v8 = (char *)*(v5 - 3);
      v5 -= 3;
      v7 = v8;
      if (!v8)
        goto LABEL_5;
      v9 = (char *)*(v4 - 2);
      v6 = v7;
      if (v9 != v7)
        break;
LABEL_4:
      *(v4 - 2) = v7;
      operator delete(v6);
LABEL_5:
      v4 = v5;
      if (v5 == a2)
        goto LABEL_41;
    }
    while (1)
    {
      if (*(v9 - 24))
      {
        v10 = (void *)*((_QWORD *)v9 - 6);
        if (v10)
        {
          *((_QWORD *)v9 - 5) = v10;
          operator delete(v10);
        }
      }
      if (*(v9 - 56))
      {
        v11 = (std::__shared_weak_count *)*((_QWORD *)v9 - 44);
        if (!v11)
          goto LABEL_18;
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
          v14 = (std::__shared_weak_count *)*((_QWORD *)v9 - 46);
          if (!v14)
            goto LABEL_24;
        }
        else
        {
LABEL_18:
          v14 = (std::__shared_weak_count *)*((_QWORD *)v9 - 46);
          if (!v14)
            goto LABEL_24;
        }
        v15 = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      if (!*(v9 - 464))
        goto LABEL_29;
      v17 = (std::__shared_weak_count *)*((_QWORD *)v9 - 59);
      if (!v17)
        goto LABEL_29;
LABEL_24:
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
        v20 = (std::__shared_weak_count *)*((_QWORD *)v9 - 61);
        if (v20)
        {
LABEL_30:
          v21 = (unint64_t *)&v20->__shared_owners_;
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
      }
      else
      {
LABEL_29:
        v20 = (std::__shared_weak_count *)*((_QWORD *)v9 - 61);
        if (v20)
          goto LABEL_30;
      }
      v23 = (std::__shared_weak_count *)*((_QWORD *)v9 - 63);
      if (v23)
      {
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v9 -= 712;
      if (v9 == v7)
      {
        v6 = *v5;
        goto LABEL_4;
      }
    }
  }
LABEL_41:
  *(_QWORD *)(a1 + 8) = a2;
}

uint64_t sub_20E9AE6A0(uint64_t a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;

  if (*(_BYTE *)(a1 + 688))
  {
    v2 = *(void **)(a1 + 664);
    if (v2)
    {
      *(_QWORD *)(a1 + 672) = v2;
      operator delete(v2);
    }
  }
  if (*(_BYTE *)(a1 + 656))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 360);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v6 = *(std::__shared_weak_count **)(a1 + 344);
    if (v6)
    {
      v7 = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  if (*(_BYTE *)(a1 + 248))
  {
    v9 = *(std::__shared_weak_count **)(a1 + 240);
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  v12 = *(std::__shared_weak_count **)(a1 + 224);
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
      v15 = *(std::__shared_weak_count **)(a1 + 208);
      if (v15)
        goto LABEL_26;
      return a1;
    }
  }
  v15 = *(std::__shared_weak_count **)(a1 + 208);
  if (!v15)
    return a1;
LABEL_26:
  v16 = (unint64_t *)&v15->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (v17)
    return a1;
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  return a1;
}

uint64_t sub_20E9AE81C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  if (!*(_BYTE *)(a1 + 400))
    return a1;
  v2 = *(std::__shared_weak_count **)(a1 + 104);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 88);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

uint64_t sub_20E9AE8C4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  *(_QWORD *)a1 = &off_24C9B4BF8;
  v4 = *a2;
  if (*(char *)(*a2 + 191) < 0)
  {
    sub_20E860C04((_BYTE *)(a1 + 8), *(void **)(v4 + 168), *(_QWORD *)(v4 + 176));
    v6 = a1 + 32;
    v7 = *a2;
    if ((*(char *)(*a2 + 215) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_5:
    sub_20E860C04((_BYTE *)v6, *(void **)(v7 + 192), *(_QWORD *)(v7 + 200));
    goto LABEL_6;
  }
  v5 = *(_OWORD *)(v4 + 168);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(v4 + 184);
  *(_OWORD *)(a1 + 8) = v5;
  v6 = a1 + 32;
  v7 = *a2;
  if (*(char *)(*a2 + 215) < 0)
    goto LABEL_5;
LABEL_3:
  v8 = *(_OWORD *)(v7 + 192);
  *(_QWORD *)(v6 + 16) = *(_QWORD *)(v7 + 208);
  *(_OWORD *)v6 = v8;
LABEL_6:
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  sub_20E9AE9D8(a2, (uint64_t *)(a1 + 72));
  return a1;
}

void sub_20E9AE984(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if ((*(char *)(v2 + 31) & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void sub_20E9AE9D8(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  _QWORD *v56;
  std::__shared_weak_count *v57;
  char v58[8];
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  _QWORD *v71;
  std::__shared_weak_count *v72;
  char v73[8];
  __int128 v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  _QWORD *v86;
  std::__shared_weak_count *v87;
  char v88[8];
  __int128 v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  _QWORD *v99;
  std::__shared_weak_count *v100;

  v4 = (std::__shared_weak_count *)operator new(0x58uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9B6A90;
  MEMORY[0x212BC5E10](&v4[1]);
  v99 = &v4[1].__vftable;
  v100 = v4;
  v86 = &v4[1].__vftable;
  v87 = v4;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  v7 = (std::__shared_weak_count *)a1[1];
  v84 = *a1;
  v85 = v7;
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  sub_20E9AEFA0((uint64_t)v88, (uint64_t)&v86, &v84);
  v71 = &v4[1].__vftable;
  v72 = v4;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  v11 = (std::__shared_weak_count *)a1[1];
  if (*a1)
    v12 = *a1 + 56;
  else
    v12 = 0;
  v69 = v12;
  v70 = v11;
  if (v11)
  {
    v13 = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  sub_20E9AF1D0((uint64_t)v73, (uint64_t)&v71, &v69);
  v56 = &v4[1].__vftable;
  v57 = v4;
  do
    v15 = __ldxr(p_shared_owners);
  while (__stxr(v15 + 1, p_shared_owners));
  v16 = (std::__shared_weak_count *)a1[1];
  if (*a1)
    v17 = *a1 + 112;
  else
    v17 = 0;
  v54 = v17;
  v55 = v16;
  if (v16)
  {
    v18 = (unint64_t *)&v16->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  sub_20E9AF400((uint64_t)v58, (uint64_t)&v56, &v54);
  v20 = operator new();
  *(_QWORD *)v20 = &off_24C9B4C28;
  *(_OWORD *)(v20 + 8) = v89;
  *(_QWORD *)(v20 + 24) = v90;
  v89 = 0uLL;
  *(_OWORD *)(v20 + 32) = v91;
  *(_QWORD *)(v20 + 48) = v92;
  v90 = 0;
  v91 = 0uLL;
  v92 = 0;
  *(_OWORD *)(v20 + 56) = v93;
  v93 = 0uLL;
  *(_OWORD *)(v20 + 72) = v94;
  v94 = 0uLL;
  *(_QWORD *)(v20 + 88) = &off_24C9B4C58;
  v21 = v95;
  v95 = 0uLL;
  *(_OWORD *)(v20 + 96) = v21;
  *(_QWORD *)(v20 + 112) = v96;
  *(_QWORD *)(v20 + 120) = &off_24C9B2520;
  *(_OWORD *)(v20 + 128) = v97;
  v96 = 0;
  *(_QWORD *)&v97 = 0;
  *(_QWORD *)(v20 + 144) = &off_24C9B2310;
  *(_OWORD *)(v20 + 152) = v98;
  *((_QWORD *)&v97 + 1) = 0;
  v98 = 0uLL;
  *(_QWORD *)(v20 + 168) = &off_24C9B4C90;
  v22 = v74;
  v23 = v77;
  *(_QWORD *)(v20 + 192) = v75;
  *(_OWORD *)(v20 + 176) = v22;
  v74 = 0uLL;
  v24 = v76;
  *(_QWORD *)(v20 + 216) = v23;
  *(_OWORD *)(v20 + 200) = v24;
  v75 = 0;
  v76 = 0uLL;
  v77 = 0;
  v25 = v78;
  v78 = 0uLL;
  v26 = v79;
  *(_OWORD *)(v20 + 224) = v25;
  *(_OWORD *)(v20 + 240) = v26;
  v79 = 0uLL;
  *(_QWORD *)(v20 + 256) = &off_24C9B4CC0;
  v27 = v80;
  v80 = 0uLL;
  *(_OWORD *)(v20 + 264) = v27;
  *(_QWORD *)(v20 + 280) = v81;
  *(_QWORD *)(v20 + 288) = &off_24C9B4CF8;
  *(_OWORD *)(v20 + 296) = v82;
  v81 = 0;
  v82 = 0uLL;
  *(_QWORD *)(v20 + 312) = &off_24C9B2310;
  *(_OWORD *)(v20 + 320) = v83;
  v83 = 0uLL;
  *(_QWORD *)(v20 + 336) = &off_24C9B4D68;
  v28 = v59;
  *(_QWORD *)(v20 + 360) = v60;
  *(_OWORD *)(v20 + 344) = v28;
  v59 = 0uLL;
  v29 = v61;
  *(_QWORD *)(v20 + 384) = v62;
  *(_OWORD *)(v20 + 368) = v29;
  v60 = 0;
  v61 = 0uLL;
  v62 = 0;
  v30 = v63;
  v31 = v64;
  v63 = 0uLL;
  *(_OWORD *)(v20 + 392) = v30;
  *(_OWORD *)(v20 + 408) = v31;
  v64 = 0uLL;
  *(_QWORD *)(v20 + 424) = &off_24C9B4D30;
  v32 = v65;
  v65 = 0uLL;
  *(_OWORD *)(v20 + 432) = v32;
  *(_QWORD *)(v20 + 448) = v66;
  *(_QWORD *)(v20 + 456) = &off_24C9B4D98;
  *(_OWORD *)(v20 + 464) = v67;
  v66 = 0;
  v67 = 0uLL;
  *(_QWORD *)(v20 + 480) = &off_24C9B2310;
  *(_OWORD *)(v20 + 488) = v68;
  v68 = 0uLL;
  *a2 = v20;
  sub_20E9B51E4((uint64_t)v58);
  v33 = v55;
  if (v55)
  {
    v34 = (unint64_t *)&v55->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = v57;
  if (v57)
  {
    v37 = (unint64_t *)&v57->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  sub_20E9B53C8((uint64_t)v73);
  v39 = v70;
  if (v70)
  {
    v40 = (unint64_t *)&v70->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = v72;
  if (v72)
  {
    v43 = (unint64_t *)&v72->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  sub_20E9B55AC((uint64_t)v88);
  v45 = v85;
  if (v85)
  {
    v46 = (unint64_t *)&v85->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v48 = v87;
  if (v87)
  {
    v49 = (unint64_t *)&v87->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v51 = v100;
  if (v100)
  {
    v52 = (unint64_t *)&v100->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
}

void sub_20E9AEEEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,char a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60,uint64_t a61,char a62,uint64_t a63)
{
  char a64;
  uint64_t v64;

  sub_20E9B51E4((uint64_t)&a14);
  sub_20E86665C((uint64_t)&a10);
  sub_20E9AF634((uint64_t)&a12);
  sub_20E9B53C8((uint64_t)&a39);
  sub_20E86665C((uint64_t)&a35);
  sub_20E9AF634((uint64_t)&a37);
  sub_20E9B55AC((uint64_t)&a64);
  sub_20E86665C((uint64_t)&a60);
  sub_20E9AF634((uint64_t)&a62);
  sub_20E9AF634(v64 - 96);
  _Unwind_Resume(a1);
}

void sub_20E9AEF60(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_20E9AEF7C(uint64_t a1)
{
  sub_20E9B5790(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E9AEFA0(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v18;
  std::__shared_weak_count *v19;
  __int128 v20;
  void *__p[2];
  uint64_t v22;
  void *__dst[2];
  uint64_t v24;

  v6 = *a3;
  if (*(char *)(*a3 + 31) < 0)
  {
    sub_20E860C04(__dst, *(void **)(v6 + 8), *(_QWORD *)(v6 + 16));
    v6 = *a3;
    if ((*(char *)(*a3 + 55) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v7 = *(_OWORD *)(v6 + 8);
    v24 = *(_QWORD *)(v6 + 24);
    *(_OWORD *)__dst = v7;
    if ((*(char *)(v6 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      *(_OWORD *)__p = *(_OWORD *)(v6 + 32);
      v22 = *(_QWORD *)(v6 + 48);
      goto LABEL_6;
    }
  }
  sub_20E860C04(__p, *(void **)(v6 + 32), *(_QWORD *)(v6 + 40));
LABEL_6:
  v20 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v8 = (std::__shared_weak_count *)a3[1];
  v18 = *a3;
  v19 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  sub_20E9AFC44(a1, (uint64_t)__dst, (uint64_t)__p, &v20, (uint64_t)&v18);
  v11 = v19;
  if (!v19)
    goto LABEL_13;
  v12 = (unint64_t *)&v19->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
    if (!*((_QWORD *)&v20 + 1))
      goto LABEL_17;
  }
  else
  {
LABEL_13:
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
    if (!*((_QWORD *)&v20 + 1))
      goto LABEL_17;
  }
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (v16)
  {
LABEL_17:
    if ((SHIBYTE(v22) & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_24;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  if ((SHIBYTE(v22) & 0x80000000) == 0)
  {
LABEL_18:
    if ((SHIBYTE(v24) & 0x80000000) == 0)
      goto LABEL_19;
    goto LABEL_25;
  }
LABEL_24:
  operator delete(__p[0]);
  if ((SHIBYTE(v24) & 0x80000000) == 0)
  {
LABEL_19:
    if (*a3)
      return a1;
    goto LABEL_26;
  }
LABEL_25:
  operator delete(__dst[0]);
  if (*a3)
    return a1;
LABEL_26:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 534, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  return a1;
}

void sub_20E9AF178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E9AF1D0(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v18;
  std::__shared_weak_count *v19;
  __int128 v20;
  void *__p[2];
  uint64_t v22;
  void *__dst[2];
  uint64_t v24;

  v6 = *a3;
  if (*(char *)(*a3 + 31) < 0)
  {
    sub_20E860C04(__dst, *(void **)(v6 + 8), *(_QWORD *)(v6 + 16));
    v6 = *a3;
    if ((*(char *)(*a3 + 55) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v7 = *(_OWORD *)(v6 + 8);
    v24 = *(_QWORD *)(v6 + 24);
    *(_OWORD *)__dst = v7;
    if ((*(char *)(v6 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      *(_OWORD *)__p = *(_OWORD *)(v6 + 32);
      v22 = *(_QWORD *)(v6 + 48);
      goto LABEL_6;
    }
  }
  sub_20E860C04(__p, *(void **)(v6 + 32), *(_QWORD *)(v6 + 40));
LABEL_6:
  v20 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v8 = (std::__shared_weak_count *)a3[1];
  v18 = *a3;
  v19 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  sub_20E9B1834(a1, (uint64_t)__dst, (uint64_t)__p, &v20, (uint64_t)&v18);
  v11 = v19;
  if (!v19)
    goto LABEL_13;
  v12 = (unint64_t *)&v19->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
    if (!*((_QWORD *)&v20 + 1))
      goto LABEL_17;
  }
  else
  {
LABEL_13:
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
    if (!*((_QWORD *)&v20 + 1))
      goto LABEL_17;
  }
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (v16)
  {
LABEL_17:
    if ((SHIBYTE(v22) & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_24;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  if ((SHIBYTE(v22) & 0x80000000) == 0)
  {
LABEL_18:
    if ((SHIBYTE(v24) & 0x80000000) == 0)
      goto LABEL_19;
    goto LABEL_25;
  }
LABEL_24:
  operator delete(__p[0]);
  if ((SHIBYTE(v24) & 0x80000000) == 0)
  {
LABEL_19:
    if (*a3)
      return a1;
    goto LABEL_26;
  }
LABEL_25:
  operator delete(__dst[0]);
  if (*a3)
    return a1;
LABEL_26:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 534, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  return a1;
}

void sub_20E9AF3A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E9AF400(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v18;
  std::__shared_weak_count *v19;
  __int128 v20;
  void *__p[2];
  uint64_t v22;
  void *__dst[2];
  uint64_t v24;

  v6 = *a3;
  if (*(char *)(*a3 + 31) < 0)
  {
    sub_20E860C04(__dst, *(void **)(v6 + 8), *(_QWORD *)(v6 + 16));
    v6 = *a3;
    if ((*(char *)(*a3 + 55) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v7 = *(_OWORD *)(v6 + 8);
    v24 = *(_QWORD *)(v6 + 24);
    *(_OWORD *)__dst = v7;
    if ((*(char *)(v6 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      *(_OWORD *)__p = *(_OWORD *)(v6 + 32);
      v22 = *(_QWORD *)(v6 + 48);
      goto LABEL_6;
    }
  }
  sub_20E860C04(__p, *(void **)(v6 + 32), *(_QWORD *)(v6 + 40));
LABEL_6:
  v20 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v8 = (std::__shared_weak_count *)a3[1];
  v18 = *a3;
  v19 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  sub_20E9B35C4(a1, (uint64_t)__dst, (uint64_t)__p, &v20, (uint64_t)&v18);
  v11 = v19;
  if (!v19)
    goto LABEL_13;
  v12 = (unint64_t *)&v19->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
    if (!*((_QWORD *)&v20 + 1))
      goto LABEL_17;
  }
  else
  {
LABEL_13:
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
    if (!*((_QWORD *)&v20 + 1))
      goto LABEL_17;
  }
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (v16)
  {
LABEL_17:
    if ((SHIBYTE(v22) & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_24;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  if ((SHIBYTE(v22) & 0x80000000) == 0)
  {
LABEL_18:
    if ((SHIBYTE(v24) & 0x80000000) == 0)
      goto LABEL_19;
    goto LABEL_25;
  }
LABEL_24:
  operator delete(__p[0]);
  if ((SHIBYTE(v24) & 0x80000000) == 0)
  {
LABEL_19:
    if (*a3)
      return a1;
    goto LABEL_26;
  }
LABEL_25:
  operator delete(__dst[0]);
  if (*a3)
    return a1;
LABEL_26:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 534, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  return a1;
}

void sub_20E9AF5D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E9AF634(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20E9AF6A4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9B6A90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20E9AF6B8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9B6A90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E9AF6EC(uint64_t a1)
{
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)(a1 + 24));
}

void sub_20E9AF6F8(uint64_t a1)
{
  sub_20E9B55AC(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20E9AF71C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B4C58;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20E9AF75C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B4C58;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E9AF7AC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_20E9AF7BC(uint64_t a1)
{
  sub_20E9B53C8(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20E9AF7E0(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B4CC0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20E9AF820(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B4CC0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E9AF870(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

_QWORD *sub_20E9AF880(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9B4CF8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20E9AF8B8(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9B4CF8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20E9AF900(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C9B4D30;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C9B4D30;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20E9AF9D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E9AFA00(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B4D30;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20E9AFA40(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B4D30;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E9AFA90(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_20E9AFAA0(uint64_t a1)
{
  sub_20E9B51E4(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20E9AFAC4(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9B4D98;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20E9AFAFC(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9B4D98;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20E9AFB44(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C9B4CC0;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C9B4CC0;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20E9AFC18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9AFC44(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5)
{
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v17;
  std::__shared_weak_count *v18;
  __int128 v19;
  void *__p[2];
  uint64_t v21;
  __int128 v22;
  void *v23[2];
  uint64_t v24;
  __int128 v25;
  uint64_t v26;

  v25 = *(_OWORD *)a2;
  v26 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_OWORD *)v23 = *(_OWORD *)a3;
  v24 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v6 = *(_OWORD *)a2;
  v21 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v19 = *a4;
  *(_OWORD *)__p = v6;
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  sub_20E9AFE64((__int128 *)__p, (uint64_t)&v19, a5, &v22);
  v17 = 0;
  v18 = 0;
  sub_20E9B1194(a1, &v25, (__int128 *)v23, (uint64_t)&v22, (uint64_t)&v17);
  v7 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (!*((_QWORD *)&v19 + 1))
    goto LABEL_15;
  v14 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if ((SHIBYTE(v21) & 0x80000000) == 0)
    {
LABEL_16:
      if ((SHIBYTE(v24) & 0x80000000) == 0)
        goto LABEL_17;
LABEL_21:
      operator delete(v23[0]);
      if ((SHIBYTE(v26) & 0x80000000) == 0)
        return a1;
      goto LABEL_22;
    }
  }
  else
  {
LABEL_15:
    if ((SHIBYTE(v21) & 0x80000000) == 0)
      goto LABEL_16;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v24) < 0)
    goto LABEL_21;
LABEL_17:
  if ((SHIBYTE(v26) & 0x80000000) == 0)
    return a1;
LABEL_22:
  operator delete((void *)v25);
  return a1;
}

void sub_20E9AFDF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  sub_20E86665C((uint64_t)&a9);
  sub_20E86665C((uint64_t)&a20);
  sub_20E9AF634((uint64_t)&a11);
  if (a18 < 0)
  {
    operator delete(__p);
    if ((a27 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v27 - 25) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a27 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a22);
  if ((*(char *)(v27 - 25) & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(*(void **)(v27 - 48));
  _Unwind_Resume(a1);
}

void sub_20E9AFE64(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  void *__p[2];
  uint64_t v11;
  __int128 v12;

  v5 = *a1;
  v11 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  *(_QWORD *)a1 = 0;
  v9 = *(_OWORD *)a2;
  *(_OWORD *)__p = v5;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  sub_20E9AFF48((__int128 *)__p, &v9, a3, (uint64_t *)&v12);
  *a4 = v12;
  v12 = 0uLL;
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
  if (!*((_QWORD *)&v9 + 1))
    goto LABEL_5;
  v7 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
  {
LABEL_5:
    if ((SHIBYTE(v11) & 0x80000000) == 0)
      return;
LABEL_8:
    operator delete(__p[0]);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  if (SHIBYTE(v11) < 0)
    goto LABEL_8;
}

void sub_20E9AFF24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  sub_20E9AF634((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20E9AFF48(__int128 *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v12;
  unint64_t v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  void *__p[2];
  uint64_t v25;

  v8 = operator new();
  v9 = *a1;
  v25 = *((_QWORD *)a1 + 2);
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  v23 = *a2;
  *(_OWORD *)__p = v9;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  sub_20E9B017C(v8, (__int128 *)__p, (uint64_t)&v23, a3);
  *a4 = v8;
  v10 = (std::__shared_weak_count *)operator new();
  v10->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B5050;
  v10->__shared_weak_owners_ = 0;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)v8;
  a4[1] = (uint64_t)v10;
  v12 = *(std::__shared_weak_count **)(v8 + 40);
  if (v12)
  {
    if (v12->__shared_owners_ != -1)
      goto LABEL_14;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v15 = __ldxr(p_shared_weak_owners);
    while (__stxr(v15 + 1, p_shared_weak_owners));
    *(_QWORD *)(v8 + 32) = v8;
    *(_QWORD *)(v8 + 40) = v10;
    std::__shared_weak_count::__release_weak(v12);
  }
  else
  {
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    v17 = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    *(_QWORD *)(v8 + 32) = v8;
    *(_QWORD *)(v8 + 40) = v10;
  }
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
LABEL_14:
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
  if (!*((_QWORD *)&v23 + 1))
    goto LABEL_18;
  v21 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (v22)
  {
LABEL_18:
    if ((SHIBYTE(v25) & 0x80000000) == 0)
      return;
LABEL_21:
    operator delete(__p[0]);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  if (SHIBYTE(v25) < 0)
    goto LABEL_21;
}

void sub_20E9B0110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  sub_20E9AF634((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9B017C(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  __int128 v6;
  uint64_t v7;

  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = &off_24C9B4DD0;
  *(_QWORD *)(a1 + 16) = &unk_24C9B4E48;
  *(_QWORD *)(a1 + 24) = &unk_24C9B4E88;
  v6 = *a2;
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 48) = v6;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v7 = operator new();
  *(_QWORD *)v7 = &off_24C9B4F70;
  *(_OWORD *)(v7 + 8) = *(_OWORD *)a4;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a1 + 88) = v7;
  *(_QWORD *)(a1 + 96) = a1 + 96;
  *(_QWORD *)(a1 + 104) = a1 + 96;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = a1 + 120;
  *(_QWORD *)(a1 + 128) = a1 + 120;
  *(_QWORD *)(a1 + 136) = 0;
  return a1;
}

void sub_20E9B0240(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  std::__shared_weak_count *v5;

  sub_20E9AF634(v2);
  if (*(char *)(v1 + 71) < 0)
  {
    operator delete(*v3);
    v5 = *(std::__shared_weak_count **)(v1 + 40);
    if (!v5)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else
  {
    v5 = *(std::__shared_weak_count **)(v1 + 40);
    if (!v5)
      goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v5);
  _Unwind_Resume(a1);
}

void sub_20E9B0284(uint64_t a1)
{
  sub_20E9B0A0C(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E9B02A8(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _BYTE v5[8];
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    v5[0] = 0;
    v6 = 0;
    sub_20E9B0B54(a1 + 11, a2, (uint64_t)v5);
    if (v6)
      MEMORY[0x212BC623C](v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_20E9B0364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    MEMORY[0x212BC623C](&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9B038C(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20E9B039C(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20E9B03A8(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20E9B03B8(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_20E8778D4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v13, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_20E9B0B54(a1 + 11, a2, (uint64_t)&v14);
  if (v15)
    MEMORY[0x212BC623C](&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_20E9B0550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19)
{
  std::promise<void> *v19;
  std::exception_ptr v20;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v20.__ptr_ = &a19;
    std::promise<void>::set_exception(v19, v20);
    std::exception_ptr::~exception_ptr(&a19);
    std::runtime_error::~runtime_error(&a18);
    if (a17 < 0)
      operator delete(__p);
    JUMPOUT(0x20E9B047CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_20E9B05EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14)
{
  std::recursive_mutex *v14;

  if ((_BYTE)a12)
    MEMORY[0x212BC623C](&a10);
  std::recursive_mutex::unlock(v14);
  _Unwind_Resume(a1);
}

void sub_20E9B0610(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_20E9B0694(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 96);
  v4 = (_QWORD *)(a1 + 96);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20E9B0724(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20E9B0738(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20E9B07C8(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20E9B07DC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

void sub_20E9B0810(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20E9B0844(uint64_t a1)
{
  return sub_20E9B0A0C(a1 - 16);
}

void sub_20E9B084C(uint64_t a1)
{
  sub_20E9B0A0C(a1 - 16);
  JUMPOUT(0x212BC6398);
}

void sub_20E9B0874(uint64_t a1)
{
  sub_20E9B0694(a1 - 16);
}

void sub_20E9B087C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

void sub_20E9B08B0(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20E9B08E4(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20E9B08EC(uint64_t a1)
{
  return sub_20E9B0A0C(a1 - 24);
}

void sub_20E9B08F4(uint64_t a1)
{
  sub_20E9B0A0C(a1 - 24);
  JUMPOUT(0x212BC6398);
}

void sub_20E9B091C(uint64_t a1)
{
  sub_20E9B0738(a1 - 24);
}

uint64_t sub_20E9B0924(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20E9B092C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20E9B0994(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E9B09FC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20E9B0A0C(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = &off_24C9B4DD0;
  *(_QWORD *)(a1 + 16) = &unk_24C9B4E48;
  *(_QWORD *)(a1 + 24) = &unk_24C9B4E88;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v8 = *(_QWORD *)(a1 + 96);
    v7 = *(uint64_t **)(a1 + 104);
    v9 = *v7;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v8 + 8);
    **(_QWORD **)(v8 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v7 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v7[1];
        operator delete(v7);
        v7 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20E9B0B54(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = *a1;
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 276, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  if (*(_BYTE *)(a3 + 8))
    std::promise<void>::set_value((std::promise<void> *)a3);
}

void sub_20E9B0BEC()
{
  __break(1u);
}

void sub_20E9B0C98(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20E9B0CB8);
}

uint64_t sub_20E9B0CC4(char *__s, const char *a2, const char *a3, const char *a4, const char *a5, const char *a6)
{
  uint64_t result;
  _DWORD v12[6];
  int v13;
  _QWORD **v14;
  const char *v15;
  _DWORD *v16;
  const char *v17;
  const char *v18;
  _QWORD *v19;

  v13 = 0;
  sub_20E9B0FF4(v12, __s);
  if (*(_QWORD *)a2)
  {
    v14 = (_QWORD **)v12;
    v15 = a2;
    v16 = v12;
    v17 = a2;
    v18 = a2;
    if (v13 != -1)
    {
      v19 = &v14;
      ((void (*)(_QWORD **, _DWORD *))off_24C9B4FE0[v13])(&v19, v12);
      goto LABEL_6;
    }
LABEL_18:
    sub_20E877AB8();
  }
  v14 = (_QWORD **)v12;
  v15 = "nullptr";
  v16 = v12;
  v17 = "nullptr";
  v18 = "nullptr";
  if (v13 == -1)
    goto LABEL_18;
  v19 = &v14;
  ((void (*)(_QWORD **, _DWORD *))off_24C9B4FC8[v13])(&v19, v12);
LABEL_6:
  v14 = (_QWORD **)v12;
  v15 = a3;
  v16 = v12;
  v17 = a3;
  v18 = a3;
  if (v13 == -1)
    sub_20E877AB8();
  v19 = &v14;
  ((void (*)(_QWORD **, _DWORD *))off_24C9B4FF8[v13])(&v19, v12);
  v14 = (_QWORD **)v12;
  v15 = a4;
  v16 = v12;
  v17 = a4;
  v18 = a4;
  if (v13 == -1)
    sub_20E877AB8();
  v19 = &v14;
  ((void (*)(_QWORD **, _DWORD *))off_24C9B5010[v13])(&v19, v12);
  if (*(_QWORD *)a5)
  {
    v14 = (_QWORD **)v12;
    v15 = a5;
    v16 = v12;
    v17 = a5;
    v18 = a5;
    if (v13 != -1)
    {
      v19 = &v14;
      ((void (*)(_QWORD **, _DWORD *))off_24C9B4FE0[v13])(&v19, v12);
      goto LABEL_13;
    }
LABEL_21:
    sub_20E877AB8();
  }
  v14 = (_QWORD **)v12;
  v15 = "nullptr";
  v16 = v12;
  v17 = "nullptr";
  v18 = "nullptr";
  if (v13 == -1)
    goto LABEL_21;
  v19 = &v14;
  ((void (*)(_QWORD **, _DWORD *))off_24C9B4FC8[v13])(&v19, v12);
LABEL_13:
  v14 = (_QWORD **)v12;
  v15 = a6;
  v16 = v12;
  v17 = a6;
  v18 = a6;
  if (v13 == -1)
    sub_20E877AB8();
  v19 = &v14;
  ((void (*)(_QWORD **, _DWORD *))off_24C9B4FF8[v13])(&v19, v12);
  if (v13 == -1)
    sub_20E877AB8();
  v14 = &v19;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C9B5028[v13])(&v14, v12);
  if (v13 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C9B4FB0[v13])(&v14, v12);
  return result;
}

void sub_20E9B0F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E9B0F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E9B0F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E9B0FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E9B0FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E9B0FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E9B0FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_DWORD *sub_20E9B0FF4(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C9B4FB0[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_20E9B10E8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E9B110C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20E9B1124(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS_6vectorINS_4pairIyN3cva"
                     "15SE3GroupStorageIdNS8_6MatrixIdLj4ELj4ELb1EEEEEEENS_9allocatorISD_EEEEvvvLb0EEEE27__shared_ptr_def"
                     "ault_deleteISH_SH_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS_6vectorINS_4"
                                "pairIyN3cva15SE3GroupStorageIdNS8_6MatrixIdLj4ELj4ELb1EEEEEEENS_9allocatorISD_EEEEvvvLb0"
                                "EEEE27__shared_ptr_default_deleteISH_SH_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS_6vectorINS_4pairIyN3cva15SE3GroupStorageIdNS8_6MatrixIdLj4ELj4ELb1EEEEEEENS_9allocatorISD_EEEEvvvLb0EEEE27__shared_ptr_default_deleteISH_SH_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS_6vectorINS_4pairIyN3cva15SE3GroupStorageIdNS8_6MatrixIdLj4ELj4ELb1EEEEEEENS_9allocatorISD_EEEEvvvLb0EEEE27__shared_ptr_default_deleteISH_SH_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20E9B1194(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;

  *(_QWORD *)a1 = &off_24C9B4C28;
  v6 = *a2;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 8) = v6;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v7 = *a3;
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(a1 + 32) = v7;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)a5;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a4;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v9 = *(_QWORD *)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 80);
  if (v8)
  {
    v10 = (unint64_t *)(v8 + 16);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *(_QWORD *)(a1 + 88) = &off_24C9B4C58;
  v12 = (_QWORD *)operator new();
  *v12 = &off_24C9B50A0;
  v12[1] = v9;
  v12[2] = v8;
  *(_QWORD *)(a1 + 96) = v12;
  v13 = *(_QWORD *)(a1 + 72);
  v14 = *(_QWORD *)(a1 + 80);
  if (!v14)
  {
    *(_QWORD *)(a1 + 104) = v13;
    *(_QWORD *)(a1 + 112) = 0;
    if (v13)
      v19 = v13 + 16;
    else
      v19 = 0;
    goto LABEL_21;
  }
  v15 = (unint64_t *)(v14 + 16);
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  v18 = *(_QWORD *)(a1 + 72);
  v17 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 104) = v13;
  *(_QWORD *)(a1 + 112) = v14;
  if (v18)
    v19 = v18 + 16;
  else
    v19 = 0;
  if (!v17)
  {
    v13 = v18;
LABEL_21:
    v22 = 0;
    *(_QWORD *)(a1 + 120) = &off_24C9B2520;
    *(_QWORD *)(a1 + 128) = v19;
    *(_QWORD *)(a1 + 136) = 0;
    goto LABEL_22;
  }
  v20 = (unint64_t *)(v17 + 16);
  do
    v21 = __ldxr(v20);
  while (__stxr(v21 + 1, v20));
  v13 = *(_QWORD *)(a1 + 72);
  v22 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 120) = &off_24C9B2520;
  *(_QWORD *)(a1 + 128) = v19;
  *(_QWORD *)(a1 + 136) = v17;
  if (v22)
  {
    v23 = (unint64_t *)(v22 + 16);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
LABEL_22:
  if (v13)
    v25 = v13 + 24;
  else
    v25 = 0;
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  *(_QWORD *)(a1 + 152) = v25;
  *(_QWORD *)(a1 + 160) = v22;
  return a1;
}

void sub_20E9B1344(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  void **v5;
  void **v6;

  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
    sub_20E86665C(v3);
    sub_20E86665C(v2);
    if ((*(char *)(v1 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 31) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    sub_20E86665C(v3);
    sub_20E86665C(v2);
    if ((*(char *)(v1 + 55) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete(*v6);
  if ((*(char *)(v1 + 31) & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(*v5);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9B13B4(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20E9B13E0(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20E9B141C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9B50A0;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20E9B1484(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20E9B1514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E9B1528(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20E9B15B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9B15CC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20E9B1690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9B16A4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20E9B1768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E9B177C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20E9B1820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9B1834(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5)
{
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v17;
  std::__shared_weak_count *v18;
  __int128 v19;
  void *__p[2];
  uint64_t v21;
  __int128 v22;
  void *v23[2];
  uint64_t v24;
  __int128 v25;
  uint64_t v26;

  v25 = *(_OWORD *)a2;
  v26 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_OWORD *)v23 = *(_OWORD *)a3;
  v24 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v6 = *(_OWORD *)a2;
  v21 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v19 = *a4;
  *(_OWORD *)__p = v6;
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  sub_20E9B1A54((__int128 *)__p, (uint64_t)&v19, a5, &v22);
  v17 = 0;
  v18 = 0;
  sub_20E9B2F24(a1, &v25, (__int128 *)v23, (uint64_t)&v22, (uint64_t)&v17);
  v7 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (!*((_QWORD *)&v19 + 1))
    goto LABEL_15;
  v14 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if ((SHIBYTE(v21) & 0x80000000) == 0)
    {
LABEL_16:
      if ((SHIBYTE(v24) & 0x80000000) == 0)
        goto LABEL_17;
LABEL_21:
      operator delete(v23[0]);
      if ((SHIBYTE(v26) & 0x80000000) == 0)
        return a1;
      goto LABEL_22;
    }
  }
  else
  {
LABEL_15:
    if ((SHIBYTE(v21) & 0x80000000) == 0)
      goto LABEL_16;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v24) < 0)
    goto LABEL_21;
LABEL_17:
  if ((SHIBYTE(v26) & 0x80000000) == 0)
    return a1;
LABEL_22:
  operator delete((void *)v25);
  return a1;
}

void sub_20E9B19E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  sub_20E86665C((uint64_t)&a9);
  sub_20E86665C((uint64_t)&a20);
  sub_20E9AF634((uint64_t)&a11);
  if (a18 < 0)
  {
    operator delete(__p);
    if ((a27 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v27 - 25) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a27 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a22);
  if ((*(char *)(v27 - 25) & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(*(void **)(v27 - 48));
  _Unwind_Resume(a1);
}

void sub_20E9B1A54(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  void *__p[2];
  uint64_t v11;
  __int128 v12;

  v5 = *a1;
  v11 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  *(_QWORD *)a1 = 0;
  v9 = *(_OWORD *)a2;
  *(_OWORD *)__p = v5;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  sub_20E9B1B38((__int128 *)__p, &v9, a3, (uint64_t *)&v12);
  *a4 = v12;
  v12 = 0uLL;
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
  if (!*((_QWORD *)&v9 + 1))
    goto LABEL_5;
  v7 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
  {
LABEL_5:
    if ((SHIBYTE(v11) & 0x80000000) == 0)
      return;
LABEL_8:
    operator delete(__p[0]);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  if (SHIBYTE(v11) < 0)
    goto LABEL_8;
}

void sub_20E9B1B14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  sub_20E9AF634((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20E9B1B38(__int128 *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v12;
  unint64_t v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  void *__p[2];
  uint64_t v25;

  v8 = operator new();
  v9 = *a1;
  v25 = *((_QWORD *)a1 + 2);
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  v23 = *a2;
  *(_OWORD *)__p = v9;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  sub_20E9B1D6C(v8, (__int128 *)__p, (uint64_t)&v23, a3);
  *a4 = v8;
  v10 = (std::__shared_weak_count *)operator new();
  v10->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B5318;
  v10->__shared_weak_owners_ = 0;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)v8;
  a4[1] = (uint64_t)v10;
  v12 = *(std::__shared_weak_count **)(v8 + 40);
  if (v12)
  {
    if (v12->__shared_owners_ != -1)
      goto LABEL_14;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v15 = __ldxr(p_shared_weak_owners);
    while (__stxr(v15 + 1, p_shared_weak_owners));
    *(_QWORD *)(v8 + 32) = v8;
    *(_QWORD *)(v8 + 40) = v10;
    std::__shared_weak_count::__release_weak(v12);
  }
  else
  {
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    v17 = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    *(_QWORD *)(v8 + 32) = v8;
    *(_QWORD *)(v8 + 40) = v10;
  }
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
LABEL_14:
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
  if (!*((_QWORD *)&v23 + 1))
    goto LABEL_18;
  v21 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (v22)
  {
LABEL_18:
    if ((SHIBYTE(v25) & 0x80000000) == 0)
      return;
LABEL_21:
    operator delete(__p[0]);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  if (SHIBYTE(v25) < 0)
    goto LABEL_21;
}

void sub_20E9B1D00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  sub_20E9AF634((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9B1D6C(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  __int128 v6;
  uint64_t v7;

  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = &off_24C9B5118;
  *(_QWORD *)(a1 + 16) = &unk_24C9B5190;
  *(_QWORD *)(a1 + 24) = &unk_24C9B51D0;
  v6 = *a2;
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 48) = v6;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v7 = operator new();
  *(_QWORD *)v7 = &off_24C9B52C8;
  *(_OWORD *)(v7 + 8) = *(_OWORD *)a4;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a1 + 88) = v7;
  *(_QWORD *)(a1 + 96) = a1 + 96;
  *(_QWORD *)(a1 + 104) = a1 + 96;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = a1 + 120;
  *(_QWORD *)(a1 + 128) = a1 + 120;
  *(_QWORD *)(a1 + 136) = 0;
  return a1;
}

void sub_20E9B1E30(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  std::__shared_weak_count *v5;

  sub_20E9AF634(v2);
  if (*(char *)(v1 + 71) < 0)
  {
    operator delete(*v3);
    v5 = *(std::__shared_weak_count **)(v1 + 40);
    if (!v5)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else
  {
    v5 = *(std::__shared_weak_count **)(v1 + 40);
    if (!v5)
      goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v5);
  _Unwind_Resume(a1);
}

void sub_20E9B1E74(uint64_t a1)
{
  sub_20E9B269C(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E9B1E98(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    LOBYTE(v5) = 0;
    v6 = 0;
    sub_20E9B27F8(a1 + 11, a2, (uint64_t)&v5);
    if (v6)
      sub_20E9B2AE0(&v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_20E9B1F54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    sub_20E9B2AE0(&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9B1F7C(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20E9B1F8C(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20E9B1F98(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20E9B1FA8(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_20E8778D4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v13, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_20E9B27F8(a1 + 11, a2, (uint64_t)&v14);
  if (v15)
    sub_20E9B2AE0(&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_20E9B2140(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::__assoc_sub_state **v20;
  std::__assoc_sub_state *v21;
  std::exception_ptr v22;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v21 = *v20;
    if (v21)
    {
      std::exception_ptr::exception_ptr(&a20, &a19);
      v22.__ptr_ = &a20;
      std::__assoc_sub_state::set_exception(v21, v22);
      std::exception_ptr::~exception_ptr(&a20);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (a17 < 0)
        operator delete(__p);
      JUMPOUT(0x20E9B206CLL);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20E9B21B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20E9B2214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13)
{
  std::recursive_mutex *v13;

  if ((_BYTE)a11)
    sub_20E9B2AE0(&a10);
  std::recursive_mutex::unlock(v13);
  _Unwind_Resume(a1);
}

void sub_20E9B2238(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_20E9B22BC(uint64_t a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v4);
  v5 = operator new(0x20uLL);
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5[2] = &off_24C9B4D30;
  v5[3] = v6;
  v8 = *(_QWORD *)(a1 + 96);
  v7 = (_QWORD *)(a1 + 96);
  *v5 = v8;
  v5[1] = v7;
  *(_QWORD *)(v8 + 8) = v5;
  *v7 = v5;
  ++v7[2];
  std::recursive_mutex::unlock(v4);
}

void sub_20E9B236C(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20E9B2380(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20E9B2410(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20E9B2424(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v4);
  sub_20E9B2C08(a1 + 96, a2);
  std::recursive_mutex::unlock(v4);
}

void sub_20E9B2468(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20E9B247C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20E9B24B0(uint64_t a1)
{
  return sub_20E9B269C(a1 - 16);
}

void sub_20E9B24B8(uint64_t a1)
{
  sub_20E9B269C(a1 - 16);
  JUMPOUT(0x212BC6398);
}

void sub_20E9B24E0(uint64_t a1, uint64_t a2)
{
  sub_20E9B22BC(a1 - 16, a2);
}

void sub_20E9B24E8(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v4);
  sub_20E9B2C08(a1 + 80, a2);
  std::recursive_mutex::unlock(v4);
}

void sub_20E9B252C(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20E9B2540(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20E9B2574(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20E9B257C(uint64_t a1)
{
  return sub_20E9B269C(a1 - 24);
}

void sub_20E9B2584(uint64_t a1)
{
  sub_20E9B269C(a1 - 24);
  JUMPOUT(0x212BC6398);
}

void sub_20E9B25AC(uint64_t a1)
{
  sub_20E9B2380(a1 - 24);
}

uint64_t sub_20E9B25B4(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20E9B25BC(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20E9B2624(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E9B268C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20E9B269C(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = &off_24C9B5118;
  *(_QWORD *)(a1 + 16) = &unk_24C9B5190;
  *(_QWORD *)(a1 + 24) = &unk_24C9B51D0;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v7 = *(_QWORD *)(a1 + 96);
    v8 = *(uint64_t **)(a1 + 104);
    v9 = *v8;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v8 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v8[1];
        (*(void (**)(uint64_t *))v8[2])(v8 + 2);
        operator delete(v8);
        v8 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20E9B27F8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *i;
  _QWORD v9[20];
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v6 = *a1;
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 251, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v9, v6, a2);
  if (v10)
  {
    v7 = a1 + 1;
    for (i = (_QWORD *)a1[2]; i != v7; i = (_QWORD *)i[1])
      (*(void (**)(_QWORD *, _QWORD *))(i[2] + 16))(i + 2, v9);
  }
  if (*(_BYTE *)(a3 + 8))
  {
    if (!*(_QWORD *)a3)
      sub_20E96CE78(3u);
    sub_20E9B2A04(*(_QWORD *)a3, (uint64_t)v9);
  }
}

void sub_20E9B2910(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, int a14, __int16 a15, char a16, unsigned __int8 a17)
{
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;

  if (a2 == 1)
  {
    v17 = (uint64_t *)__cxa_begin_catch(exception_object);
    v18 = *v17;
    a11 = *(_QWORD *)(*(_QWORD *)(*v17 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a10 = (*(uint64_t (**)(void))(v18 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a11, "\n", "message: ", (const char *)&a10, "\n");
    if ((a17 & 0x80u) == 0)
      v19 = (uint64_t *)&a12;
    else
      v19 = a12;
    if ((a17 & 0x80u) == 0)
      v20 = a17;
    else
      v20 = a13;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v19, v20, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(exception_object);
}

void sub_20E9B29C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20E9B29EC(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x20E9B29F4);
  sub_20E860DA4(a1);
}

void sub_20E9B2A04(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  std::exception_ptr v13;

  v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if ((*(_BYTE *)(a1 + 136) & 1) != 0
    || (v13.__ptr_ = 0, v5 = *(_QWORD *)(a1 + 16), std::exception_ptr::~exception_ptr(&v13), v5))
  {
    sub_20E96CE78(2u);
  }
  *(_BYTE *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 304) = 0;
  if (*(_BYTE *)(a2 + 160))
  {
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 160) = v6;
    v7 = *(_OWORD *)(a2 + 80);
    v9 = *(_OWORD *)(a2 + 32);
    v8 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 224) = v7;
    *(_OWORD *)(a1 + 176) = v9;
    *(_OWORD *)(a1 + 192) = v8;
    v10 = *(_OWORD *)(a2 + 96);
    v11 = *(_OWORD *)(a2 + 112);
    v12 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 288) = v12;
    *(_OWORD *)(a1 + 240) = v10;
    *(_OWORD *)(a1 + 256) = v11;
    *(_BYTE *)(a1 + 304) = 1;
  }
  *(_DWORD *)(a1 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 88));
  std::mutex::unlock(v4);
}

void sub_20E9B2ACC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20E9B2AE0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x212BC5AF8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20E9B2BCC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, std::logic_error a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::logic_error::~logic_error(&a11);
  JUMPOUT(0x20E9B2B28);
}

char *sub_20E9B2C08@<X0>(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  unint64_t v4;
  char *result;
  char *v6;
  uint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  char *v10;
  uint64_t v11;
  int64x2_t *v12;

  v4 = *(_QWORD *)(a1 + 16);
  v10 = 0;
  v9 = 0uLL;
  if (v4)
  {
    if (v4 >> 61)
      sub_20E92CED8();
    result = (char *)operator new(8 * v4);
    v6 = &result[8 * v4];
    v9.i64[0] = (uint64_t)result;
    v9.i64[1] = (uint64_t)result;
    v10 = v6;
    v7 = *(_QWORD *)(a1 + 8);
    v12 = &v9;
    if (v7 != a1)
      goto LABEL_4;
LABEL_7:
    v8 = vdupq_n_s64((unint64_t)result);
    goto LABEL_8;
  }
  v6 = 0;
  result = 0;
  v7 = *(_QWORD *)(a1 + 8);
  v12 = &v9;
  if (v7 == a1)
    goto LABEL_7;
  do
  {
LABEL_4:
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 24) + 48))(*(_QWORD *)(v7 + 24));
    result = (char *)sub_20E9B2D04((uint64_t *)&v12, &v11);
    v7 = *(_QWORD *)(v7 + 8);
  }
  while (v7 != a1);
  v8 = v9;
  v6 = v10;
LABEL_8:
  *a2 = v8;
  a2[1].i64[0] = (uint64_t)v6;
  return result;
}

void sub_20E9B2CE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20E9B2D04(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  char *v6;
  char *v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v4 = *a1;
  v6 = *(char **)(*a1 + 8);
  v5 = *(_QWORD *)(*a1 + 16);
  v7 = v6;
  if ((unint64_t)v6 >= v5)
  {
    v9 = *(char **)v4;
    v10 = (uint64_t)&v6[-*(_QWORD *)v4];
    v11 = v10 >> 3;
    v12 = (v10 >> 3) + 1;
    if (v12 >> 61)
      sub_20E92CED8();
    v13 = v5 - (_QWORD)v9;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 61)
        sub_20E877A38();
      v15 = operator new(8 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[8 * v11];
    *v16 = *a2;
    v8 = v16 + 1;
    if (v6 != v9)
    {
      v17 = v6 - v9 - 8;
      if (v17 < 0x58)
        goto LABEL_27;
      if ((unint64_t)(v6 - v15 - v10) < 0x20)
        goto LABEL_27;
      v18 = (v17 >> 3) + 1;
      v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
      v7 = &v6[-v19];
      v16 = (_QWORD *)((char *)v16 - v19);
      v20 = &v15[8 * v11 - 16];
      v21 = v6 - 16;
      v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v23 = *(_OWORD *)v21;
        *(v20 - 1) = *((_OWORD *)v21 - 1);
        *v20 = v23;
        v20 -= 2;
        v21 -= 32;
        v22 -= 4;
      }
      while (v22);
      if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_27:
        do
        {
          v24 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *--v16 = v24;
        }
        while (v7 != v9);
      }
    }
    *(_QWORD *)v4 = v16;
    *(_QWORD *)(v4 + 8) = v8;
    *(_QWORD *)(v4 + 16) = &v15[8 * v14];
    if (v9)
      operator delete(v9);
  }
  else
  {
    *(_QWORD *)v6 = *a2;
    v8 = v6 + 8;
  }
  *(_QWORD *)(v4 + 8) = v8;
  return a1;
}

void sub_20E9B2E78(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E9B2E9C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20E9B2EB4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio13mapping_types16G"
                     "lobalPoseAnchorENS7_18OriginToPoseAnchorEvNS_8optionalIS9_EELb0EEEE27__shared_ptr_default_deleteISC_SC_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio13mappi"
                                "ng_types16GlobalPoseAnchorENS7_18OriginToPoseAnchorEvNS_8optionalIS9_EELb0EEEE27__shared"
                                "_ptr_default_deleteISC_SC_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio13mapping_types16GlobalPoseAnchorENS7_18OriginToPoseAnchorEvNS_8optionalIS9_EELb0EEEE27__shared_ptr_default_deleteISC_SC_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio13mapping_types16GlobalPoseAnchorENS7_18OriginToPoseAnchorEvNS_8optionalIS9_EELb0EEEE27__shared_ptr_default_deleteISC_SC_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20E9B2F24(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;

  *(_QWORD *)a1 = &off_24C9B4C90;
  v6 = *a2;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 8) = v6;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v7 = *a3;
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(a1 + 32) = v7;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)a5;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a4;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v9 = *(_QWORD *)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 80);
  if (v8)
  {
    v10 = (unint64_t *)(v8 + 16);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *(_QWORD *)(a1 + 88) = &off_24C9B4CC0;
  v12 = (_QWORD *)operator new();
  *v12 = &off_24C9B5368;
  v12[1] = v9;
  v12[2] = v8;
  *(_QWORD *)(a1 + 96) = v12;
  v13 = *(_QWORD *)(a1 + 72);
  v14 = *(_QWORD *)(a1 + 80);
  if (!v14)
  {
    *(_QWORD *)(a1 + 104) = v13;
    *(_QWORD *)(a1 + 112) = 0;
    if (v13)
      v19 = v13 + 16;
    else
      v19 = 0;
    goto LABEL_21;
  }
  v15 = (unint64_t *)(v14 + 16);
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  v18 = *(_QWORD *)(a1 + 72);
  v17 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 104) = v13;
  *(_QWORD *)(a1 + 112) = v14;
  if (v18)
    v19 = v18 + 16;
  else
    v19 = 0;
  if (!v17)
  {
    v13 = v18;
LABEL_21:
    v22 = 0;
    *(_QWORD *)(a1 + 120) = &off_24C9B4CF8;
    *(_QWORD *)(a1 + 128) = v19;
    *(_QWORD *)(a1 + 136) = 0;
    goto LABEL_22;
  }
  v20 = (unint64_t *)(v17 + 16);
  do
    v21 = __ldxr(v20);
  while (__stxr(v21 + 1, v20));
  v13 = *(_QWORD *)(a1 + 72);
  v22 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 120) = &off_24C9B4CF8;
  *(_QWORD *)(a1 + 128) = v19;
  *(_QWORD *)(a1 + 136) = v17;
  if (v22)
  {
    v23 = (unint64_t *)(v22 + 16);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
LABEL_22:
  if (v13)
    v25 = v13 + 24;
  else
    v25 = 0;
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  *(_QWORD *)(a1 + 152) = v25;
  *(_QWORD *)(a1 + 160) = v22;
  return a1;
}

void sub_20E9B30D4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  void **v5;
  void **v6;

  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
    sub_20E86665C(v3);
    sub_20E86665C(v2);
    if ((*(char *)(v1 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 31) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    sub_20E86665C(v3);
    sub_20E86665C(v2);
    if ((*(char *)(v1 + 55) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete(*v6);
  if ((*(char *)(v1 + 31) & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(*v5);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9B3144(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20E9B3170(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20E9B31AC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9B5368;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20E9B3214(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20E9B32A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E9B32B8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20E9B3348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9B335C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20E9B3420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9B3434(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20E9B34F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E9B350C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20E9B35B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9B35C4(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5)
{
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v17;
  std::__shared_weak_count *v18;
  __int128 v19;
  void *__p[2];
  uint64_t v21;
  __int128 v22;
  void *v23[2];
  uint64_t v24;
  __int128 v25;
  uint64_t v26;

  v25 = *(_OWORD *)a2;
  v26 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_OWORD *)v23 = *(_OWORD *)a3;
  v24 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v6 = *(_OWORD *)a2;
  v21 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v19 = *a4;
  *(_OWORD *)__p = v6;
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  sub_20E9B37E4((__int128 *)__p, (uint64_t)&v19, a5, &v22);
  v17 = 0;
  v18 = 0;
  sub_20E9B4B44(a1, &v25, (__int128 *)v23, (uint64_t)&v22, (uint64_t)&v17);
  v7 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (!*((_QWORD *)&v19 + 1))
    goto LABEL_15;
  v14 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if ((SHIBYTE(v21) & 0x80000000) == 0)
    {
LABEL_16:
      if ((SHIBYTE(v24) & 0x80000000) == 0)
        goto LABEL_17;
LABEL_21:
      operator delete(v23[0]);
      if ((SHIBYTE(v26) & 0x80000000) == 0)
        return a1;
      goto LABEL_22;
    }
  }
  else
  {
LABEL_15:
    if ((SHIBYTE(v21) & 0x80000000) == 0)
      goto LABEL_16;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v24) < 0)
    goto LABEL_21;
LABEL_17:
  if ((SHIBYTE(v26) & 0x80000000) == 0)
    return a1;
LABEL_22:
  operator delete((void *)v25);
  return a1;
}

void sub_20E9B3770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  sub_20E86665C((uint64_t)&a9);
  sub_20E86665C((uint64_t)&a20);
  sub_20E9AF634((uint64_t)&a11);
  if (a18 < 0)
  {
    operator delete(__p);
    if ((a27 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v27 - 25) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a27 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a22);
  if ((*(char *)(v27 - 25) & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(*(void **)(v27 - 48));
  _Unwind_Resume(a1);
}

void sub_20E9B37E4(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  void *__p[2];
  uint64_t v11;
  __int128 v12;

  v5 = *a1;
  v11 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  *(_QWORD *)a1 = 0;
  v9 = *(_OWORD *)a2;
  *(_OWORD *)__p = v5;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  sub_20E9B38C8((__int128 *)__p, &v9, a3, (uint64_t *)&v12);
  *a4 = v12;
  v12 = 0uLL;
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
  if (!*((_QWORD *)&v9 + 1))
    goto LABEL_5;
  v7 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
  {
LABEL_5:
    if ((SHIBYTE(v11) & 0x80000000) == 0)
      return;
LABEL_8:
    operator delete(__p[0]);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  if (SHIBYTE(v11) < 0)
    goto LABEL_8;
}

void sub_20E9B38A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  sub_20E9AF634((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20E9B38C8(__int128 *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v12;
  unint64_t v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  void *__p[2];
  uint64_t v25;

  v8 = operator new();
  v9 = *a1;
  v25 = *((_QWORD *)a1 + 2);
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  v23 = *a2;
  *(_OWORD *)__p = v9;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  sub_20E9B3AFC(v8, (__int128 *)__p, (uint64_t)&v23, a3);
  *a4 = v8;
  v10 = (std::__shared_weak_count *)operator new();
  v10->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B55E0;
  v10->__shared_weak_owners_ = 0;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)v8;
  a4[1] = (uint64_t)v10;
  v12 = *(std::__shared_weak_count **)(v8 + 40);
  if (v12)
  {
    if (v12->__shared_owners_ != -1)
      goto LABEL_14;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v15 = __ldxr(p_shared_weak_owners);
    while (__stxr(v15 + 1, p_shared_weak_owners));
    *(_QWORD *)(v8 + 32) = v8;
    *(_QWORD *)(v8 + 40) = v10;
    std::__shared_weak_count::__release_weak(v12);
  }
  else
  {
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    v17 = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    *(_QWORD *)(v8 + 32) = v8;
    *(_QWORD *)(v8 + 40) = v10;
  }
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
LABEL_14:
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
  if (!*((_QWORD *)&v23 + 1))
    goto LABEL_18;
  v21 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (v22)
  {
LABEL_18:
    if ((SHIBYTE(v25) & 0x80000000) == 0)
      return;
LABEL_21:
    operator delete(__p[0]);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  if (SHIBYTE(v25) < 0)
    goto LABEL_21;
}

void sub_20E9B3A90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  sub_20E9AF634((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9B3AFC(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  __int128 v6;
  uint64_t v7;

  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = &off_24C9B53E0;
  *(_QWORD *)(a1 + 16) = &unk_24C9B5458;
  *(_QWORD *)(a1 + 24) = &unk_24C9B5498;
  v6 = *a2;
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 48) = v6;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v7 = operator new();
  *(_QWORD *)v7 = &off_24C9B5590;
  *(_OWORD *)(v7 + 8) = *(_OWORD *)a4;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a1 + 88) = v7;
  *(_QWORD *)(a1 + 96) = a1 + 96;
  *(_QWORD *)(a1 + 104) = a1 + 96;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = a1 + 120;
  *(_QWORD *)(a1 + 128) = a1 + 120;
  *(_QWORD *)(a1 + 136) = 0;
  return a1;
}

void sub_20E9B3BC0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  std::__shared_weak_count *v5;

  sub_20E9AF634(v2);
  if (*(char *)(v1 + 71) < 0)
  {
    operator delete(*v3);
    v5 = *(std::__shared_weak_count **)(v1 + 40);
    if (!v5)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else
  {
    v5 = *(std::__shared_weak_count **)(v1 + 40);
    if (!v5)
      goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v5);
  _Unwind_Resume(a1);
}

void sub_20E9B3C04(uint64_t a1)
{
  sub_20E9B442C(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E9B3C28(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    LOBYTE(v5) = 0;
    v6 = 0;
    sub_20E9B4588(a1 + 11, a2, (uint64_t)&v5);
    if (v6)
      sub_20E9B4870(&v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_20E9B3CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    sub_20E9B4870(&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9B3D0C(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20E9B3D1C(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20E9B3D28(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20E9B3D38(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_20E8778D4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v13, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_20E9B4588(a1 + 11, a2, (uint64_t)&v14);
  if (v15)
    sub_20E9B4870(&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_20E9B3ED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::__assoc_sub_state **v20;
  std::__assoc_sub_state *v21;
  std::exception_ptr v22;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v21 = *v20;
    if (v21)
    {
      std::exception_ptr::exception_ptr(&a20, &a19);
      v22.__ptr_ = &a20;
      std::__assoc_sub_state::set_exception(v21, v22);
      std::exception_ptr::~exception_ptr(&a20);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (a17 < 0)
        operator delete(__p);
      JUMPOUT(0x20E9B3DFCLL);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20E9B3F44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20E9B3FA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13)
{
  std::recursive_mutex *v13;

  if ((_BYTE)a11)
    sub_20E9B4870(&a10);
  std::recursive_mutex::unlock(v13);
  _Unwind_Resume(a1);
}

void sub_20E9B3FC8(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_20E9B404C(uint64_t a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v4);
  v5 = operator new(0x20uLL);
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5[2] = &off_24C9B4CC0;
  v5[3] = v6;
  v8 = *(_QWORD *)(a1 + 96);
  v7 = (_QWORD *)(a1 + 96);
  *v5 = v8;
  v5[1] = v7;
  *(_QWORD *)(v8 + 8) = v5;
  *v7 = v5;
  ++v7[2];
  std::recursive_mutex::unlock(v4);
}

void sub_20E9B40FC(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20E9B4110(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20E9B41A0(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20E9B41B4(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v4);
  sub_20E9B4998(a1 + 96, a2);
  std::recursive_mutex::unlock(v4);
}

void sub_20E9B41F8(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20E9B420C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20E9B4240(uint64_t a1)
{
  return sub_20E9B442C(a1 - 16);
}

void sub_20E9B4248(uint64_t a1)
{
  sub_20E9B442C(a1 - 16);
  JUMPOUT(0x212BC6398);
}

void sub_20E9B4270(uint64_t a1, uint64_t a2)
{
  sub_20E9B404C(a1 - 16, a2);
}

void sub_20E9B4278(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v4);
  sub_20E9B4998(a1 + 80, a2);
  std::recursive_mutex::unlock(v4);
}

void sub_20E9B42BC(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20E9B42D0(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20E9B4304(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20E9B430C(uint64_t a1)
{
  return sub_20E9B442C(a1 - 24);
}

void sub_20E9B4314(uint64_t a1)
{
  sub_20E9B442C(a1 - 24);
  JUMPOUT(0x212BC6398);
}

void sub_20E9B433C(uint64_t a1)
{
  sub_20E9B4110(a1 - 24);
}

uint64_t sub_20E9B4344(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20E9B434C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20E9B43B4(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E9B441C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20E9B442C(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = &off_24C9B53E0;
  *(_QWORD *)(a1 + 16) = &unk_24C9B5458;
  *(_QWORD *)(a1 + 24) = &unk_24C9B5498;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v7 = *(_QWORD *)(a1 + 96);
    v8 = *(uint64_t **)(a1 + 104);
    v9 = *v8;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v8 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v8[1];
        (*(void (**)(uint64_t *))v8[2])(v8 + 2);
        operator delete(v8);
        v8 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20E9B4588(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *i;
  _QWORD v9[20];
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v6 = *a1;
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 251, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v9, v6, a2);
  if (v10)
  {
    v7 = a1 + 1;
    for (i = (_QWORD *)a1[2]; i != v7; i = (_QWORD *)i[1])
      (*(void (**)(_QWORD *, _QWORD *))(i[2] + 16))(i + 2, v9);
  }
  if (*(_BYTE *)(a3 + 8))
  {
    if (!*(_QWORD *)a3)
      sub_20E96CE78(3u);
    sub_20E9B4794(*(_QWORD *)a3, (uint64_t)v9);
  }
}

void sub_20E9B46A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, int a14, __int16 a15, char a16, unsigned __int8 a17)
{
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;

  if (a2 == 1)
  {
    v17 = (uint64_t *)__cxa_begin_catch(exception_object);
    v18 = *v17;
    a11 = *(_QWORD *)(*(_QWORD *)(*v17 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a10 = (*(uint64_t (**)(void))(v18 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a11, "\n", "message: ", (const char *)&a10, "\n");
    if ((a17 & 0x80u) == 0)
      v19 = (uint64_t *)&a12;
    else
      v19 = a12;
    if ((a17 & 0x80u) == 0)
      v20 = a17;
    else
      v20 = a13;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v19, v20, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(exception_object);
}

void sub_20E9B4758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20E9B477C(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x20E9B4784);
  sub_20E860DA4(a1);
}

void sub_20E9B4794(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  std::exception_ptr v13;

  v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if ((*(_BYTE *)(a1 + 136) & 1) != 0
    || (v13.__ptr_ = 0, v5 = *(_QWORD *)(a1 + 16), std::exception_ptr::~exception_ptr(&v13), v5))
  {
    sub_20E96CE78(2u);
  }
  *(_BYTE *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 304) = 0;
  if (*(_BYTE *)(a2 + 160))
  {
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 160) = v6;
    v7 = *(_OWORD *)(a2 + 80);
    v9 = *(_OWORD *)(a2 + 32);
    v8 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 224) = v7;
    *(_OWORD *)(a1 + 176) = v9;
    *(_OWORD *)(a1 + 192) = v8;
    v10 = *(_OWORD *)(a2 + 96);
    v11 = *(_OWORD *)(a2 + 112);
    v12 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 288) = v12;
    *(_OWORD *)(a1 + 240) = v10;
    *(_OWORD *)(a1 + 256) = v11;
    *(_BYTE *)(a1 + 304) = 1;
  }
  *(_DWORD *)(a1 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 88));
  std::mutex::unlock(v4);
}

void sub_20E9B485C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20E9B4870(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x212BC5AF8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20E9B495C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, std::logic_error a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::logic_error::~logic_error(&a11);
  JUMPOUT(0x20E9B48B8);
}

char *sub_20E9B4998@<X0>(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  unint64_t v4;
  char *result;
  char *v6;
  uint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  char *v10;
  uint64_t v11;
  int64x2_t *v12;

  v4 = *(_QWORD *)(a1 + 16);
  v10 = 0;
  v9 = 0uLL;
  if (v4)
  {
    if (v4 >> 61)
      sub_20E92CED8();
    result = (char *)operator new(8 * v4);
    v6 = &result[8 * v4];
    v9.i64[0] = (uint64_t)result;
    v9.i64[1] = (uint64_t)result;
    v10 = v6;
    v7 = *(_QWORD *)(a1 + 8);
    v12 = &v9;
    if (v7 != a1)
      goto LABEL_4;
LABEL_7:
    v8 = vdupq_n_s64((unint64_t)result);
    goto LABEL_8;
  }
  v6 = 0;
  result = 0;
  v7 = *(_QWORD *)(a1 + 8);
  v12 = &v9;
  if (v7 == a1)
    goto LABEL_7;
  do
  {
LABEL_4:
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 24) + 48))(*(_QWORD *)(v7 + 24));
    result = (char *)sub_20E9B2D04((uint64_t *)&v12, &v11);
    v7 = *(_QWORD *)(v7 + 8);
  }
  while (v7 != a1);
  v8 = v9;
  v6 = v10;
LABEL_8:
  *a2 = v8;
  a2[1].i64[0] = (uint64_t)v6;
  return result;
}

void sub_20E9B4A74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20E9B4A98(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E9B4ABC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20E9B4AD4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio13mapping_types18O"
                     "riginToPoseAnchorENS7_16GlobalPoseAnchorEvNS_8optionalIS9_EELb0EEEE27__shared_ptr_default_deleteISC_SC_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio13mappi"
                                "ng_types18OriginToPoseAnchorENS7_16GlobalPoseAnchorEvNS_8optionalIS9_EELb0EEEE27__shared"
                                "_ptr_default_deleteISC_SC_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio13mapping_types18OriginToPoseAnchorENS7_16GlobalPoseAnchorEvNS_8optionalIS9_EELb0EEEE27__shared_ptr_default_deleteISC_SC_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio13mapping_types18OriginToPoseAnchorENS7_16GlobalPoseAnchorEvNS_8optionalIS9_EELb0EEEE27__shared_ptr_default_deleteISC_SC_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20E9B4B44(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;

  *(_QWORD *)a1 = &off_24C9B4D68;
  v6 = *a2;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 8) = v6;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v7 = *a3;
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(a1 + 32) = v7;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)a5;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a4;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v9 = *(_QWORD *)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 80);
  if (v8)
  {
    v10 = (unint64_t *)(v8 + 16);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *(_QWORD *)(a1 + 88) = &off_24C9B4D30;
  v12 = (_QWORD *)operator new();
  *v12 = &off_24C9B5630;
  v12[1] = v9;
  v12[2] = v8;
  *(_QWORD *)(a1 + 96) = v12;
  v13 = *(_QWORD *)(a1 + 72);
  v14 = *(_QWORD *)(a1 + 80);
  if (!v14)
  {
    *(_QWORD *)(a1 + 104) = v13;
    *(_QWORD *)(a1 + 112) = 0;
    if (v13)
      v19 = v13 + 16;
    else
      v19 = 0;
    goto LABEL_21;
  }
  v15 = (unint64_t *)(v14 + 16);
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  v18 = *(_QWORD *)(a1 + 72);
  v17 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 104) = v13;
  *(_QWORD *)(a1 + 112) = v14;
  if (v18)
    v19 = v18 + 16;
  else
    v19 = 0;
  if (!v17)
  {
    v13 = v18;
LABEL_21:
    v22 = 0;
    *(_QWORD *)(a1 + 120) = &off_24C9B4D98;
    *(_QWORD *)(a1 + 128) = v19;
    *(_QWORD *)(a1 + 136) = 0;
    goto LABEL_22;
  }
  v20 = (unint64_t *)(v17 + 16);
  do
    v21 = __ldxr(v20);
  while (__stxr(v21 + 1, v20));
  v13 = *(_QWORD *)(a1 + 72);
  v22 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 120) = &off_24C9B4D98;
  *(_QWORD *)(a1 + 128) = v19;
  *(_QWORD *)(a1 + 136) = v17;
  if (v22)
  {
    v23 = (unint64_t *)(v22 + 16);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
LABEL_22:
  if (v13)
    v25 = v13 + 24;
  else
    v25 = 0;
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  *(_QWORD *)(a1 + 152) = v25;
  *(_QWORD *)(a1 + 160) = v22;
  return a1;
}

void sub_20E9B4CF4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  void **v5;
  void **v6;

  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
    sub_20E86665C(v3);
    sub_20E86665C(v2);
    if ((*(char *)(v1 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 31) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    sub_20E86665C(v3);
    sub_20E86665C(v2);
    if ((*(char *)(v1 + 55) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete(*v6);
  if ((*(char *)(v1 + 31) & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(*v5);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9B4D64(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20E9B4D90(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20E9B4DCC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9B5630;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20E9B4E34(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20E9B4EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E9B4ED8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20E9B4F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9B4F7C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20E9B5040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9B5054(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20E9B5118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E9B512C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20E9B51D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9B51E4(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9B4D68;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9B4D98;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9B4D30;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20E9B53C8(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9B4C90;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9B4CF8;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9B4CC0;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20E9B55AC(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9B4C28;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9B2520;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9B4C58;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20E9B5790(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)a1 = &off_24C9B4BF8;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
  {
    sub_20E9B51E4(v2 + 336);
    sub_20E9B53C8(v2 + 168);
    v3 = sub_20E9B55AC(v2);
    MEMORY[0x212BC6398](v3, 0x10B2C40EC6BA667);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      v7 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = 0;
      if (!v7)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  v7 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v7)
  {
LABEL_8:
    sub_20E9B51E4(v7 + 336);
    sub_20E9B53C8(v7 + 168);
    v8 = sub_20E9B55AC(v7);
    MEMORY[0x212BC6398](v8, 0x10B2C40EC6BA667);
  }
LABEL_9:
  v9 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v9)
    goto LABEL_13;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
  {
LABEL_13:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_19:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_19;
LABEL_14:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_20:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20E9B58F0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  *(_QWORD *)a1 = &off_24C9B56A8;
  v4 = *a2;
  if (*(char *)(*a2 + 135) < 0)
  {
    sub_20E860C04((_BYTE *)(a1 + 8), *(void **)(v4 + 112), *(_QWORD *)(v4 + 120));
    v6 = a1 + 32;
    v7 = *a2;
    if ((*(char *)(*a2 + 159) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_5:
    sub_20E860C04((_BYTE *)v6, *(void **)(v7 + 136), *(_QWORD *)(v7 + 144));
    goto LABEL_6;
  }
  v5 = *(_OWORD *)(v4 + 112);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(v4 + 128);
  *(_OWORD *)(a1 + 8) = v5;
  v6 = a1 + 32;
  v7 = *a2;
  if (*(char *)(*a2 + 159) < 0)
    goto LABEL_5;
LABEL_3:
  v8 = *(_OWORD *)(v7 + 136);
  *(_QWORD *)(v6 + 16) = *(_QWORD *)(v7 + 152);
  *(_OWORD *)v6 = v8;
LABEL_6:
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  sub_20E9B5A04(a2, (uint64_t *)(a1 + 72));
  return a1;
}

void sub_20E9B59B0(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if ((*(char *)(v2 + 31) & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void sub_20E9B5A04(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  _QWORD *v40;
  std::__shared_weak_count *v41;
  char v42[8];
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  _QWORD *v55;
  std::__shared_weak_count *v56;
  char v57[8];
  __int128 v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  _QWORD *v68;
  std::__shared_weak_count *v69;

  v4 = (std::__shared_weak_count *)operator new(0x58uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9B6A90;
  MEMORY[0x212BC5E10](&v4[1]);
  v68 = &v4[1].__vftable;
  v69 = v4;
  v55 = &v4[1].__vftable;
  v56 = v4;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  v7 = (std::__shared_weak_count *)a1[1];
  v53 = *a1;
  v54 = v7;
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  sub_20E9B5E28((uint64_t)v57, (uint64_t)&v55, &v53);
  v40 = &v4[1].__vftable;
  v41 = v4;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  v11 = (std::__shared_weak_count *)a1[1];
  if (*a1)
    v12 = *a1 + 56;
  else
    v12 = 0;
  v38 = v12;
  v39 = v11;
  if (v11)
  {
    v13 = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  sub_20E9B6058((uint64_t)v42, (uint64_t)&v40, &v38);
  v15 = operator new();
  *(_QWORD *)v15 = &off_24C9B56D8;
  *(_OWORD *)(v15 + 8) = v58;
  v16 = v61;
  *(_QWORD *)(v15 + 24) = v59;
  v58 = 0uLL;
  *(_OWORD *)(v15 + 32) = v60;
  *(_QWORD *)(v15 + 48) = v16;
  v59 = 0;
  v60 = 0uLL;
  v61 = 0;
  *(_OWORD *)(v15 + 56) = v62;
  v62 = 0uLL;
  *(_OWORD *)(v15 + 72) = v63;
  v63 = 0uLL;
  *(_QWORD *)(v15 + 88) = &off_24C9B5708;
  v17 = v64;
  v64 = 0uLL;
  *(_OWORD *)(v15 + 96) = v17;
  *(_QWORD *)(v15 + 112) = v65;
  *(_QWORD *)(v15 + 120) = &off_24C9B2520;
  *(_OWORD *)(v15 + 128) = v66;
  v65 = 0;
  v66 = 0uLL;
  *(_QWORD *)(v15 + 144) = &off_24C9B2310;
  *(_OWORD *)(v15 + 152) = v67;
  v67 = 0uLL;
  *(_QWORD *)(v15 + 168) = &off_24C9B5740;
  v18 = v43;
  *(_QWORD *)(v15 + 192) = v44;
  *(_OWORD *)(v15 + 176) = v18;
  v43 = 0uLL;
  v19 = v45;
  *(_QWORD *)(v15 + 216) = v46;
  *(_OWORD *)(v15 + 200) = v19;
  v44 = 0;
  v45 = 0uLL;
  v46 = 0;
  v20 = v47;
  v47 = 0uLL;
  v21 = v48;
  *(_OWORD *)(v15 + 224) = v20;
  *(_OWORD *)(v15 + 240) = v21;
  v48 = 0uLL;
  *(_QWORD *)(v15 + 256) = &off_24C9B5770;
  v22 = v49;
  v49 = 0uLL;
  *(_OWORD *)(v15 + 264) = v22;
  *(_QWORD *)(v15 + 280) = v50;
  *(_QWORD *)(v15 + 288) = &off_24C9B57A8;
  *(_OWORD *)(v15 + 296) = v51;
  v50 = 0;
  v51 = 0uLL;
  *(_QWORD *)(v15 + 312) = &off_24C9B2310;
  *(_OWORD *)(v15 + 320) = v52;
  v52 = 0uLL;
  *a2 = v15;
  sub_20E9BA2D4((uint64_t)v42);
  v23 = v39;
  if (v39)
  {
    v24 = (unint64_t *)&v39->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = v41;
  if (v41)
  {
    v27 = (unint64_t *)&v41->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  sub_20E9BA4B8((uint64_t)v57);
  v29 = v54;
  if (v54)
  {
    v30 = (unint64_t *)&v54->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = v56;
  if (v56)
  {
    v33 = (unint64_t *)&v56->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = v69;
  if (v69)
  {
    v36 = (unint64_t *)&v69->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void sub_20E9B5D94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,char a36,uint64_t a37,char a38)
{
  uint64_t v38;

  sub_20E9BA2D4((uint64_t)&a13);
  sub_20E86665C((uint64_t)&a9);
  sub_20E9AF634((uint64_t)&a11);
  sub_20E9BA4B8((uint64_t)&a38);
  sub_20E86665C((uint64_t)&a34);
  sub_20E9AF634((uint64_t)&a36);
  sub_20E9AF634(v38 - 80);
  _Unwind_Resume(a1);
}

void sub_20E9B5DE8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_20E9B5E04(uint64_t a1)
{
  sub_20E9BA69C(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E9B5E28(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v18;
  std::__shared_weak_count *v19;
  __int128 v20;
  void *__p[2];
  uint64_t v22;
  void *__dst[2];
  uint64_t v24;

  v6 = *a3;
  if (*(char *)(*a3 + 31) < 0)
  {
    sub_20E860C04(__dst, *(void **)(v6 + 8), *(_QWORD *)(v6 + 16));
    v6 = *a3;
    if ((*(char *)(*a3 + 55) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v7 = *(_OWORD *)(v6 + 8);
    v24 = *(_QWORD *)(v6 + 24);
    *(_OWORD *)__dst = v7;
    if ((*(char *)(v6 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      *(_OWORD *)__p = *(_OWORD *)(v6 + 32);
      v22 = *(_QWORD *)(v6 + 48);
      goto LABEL_6;
    }
  }
  sub_20E860C04(__p, *(void **)(v6 + 32), *(_QWORD *)(v6 + 40));
LABEL_6:
  v20 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v8 = (std::__shared_weak_count *)a3[1];
  v18 = *a3;
  v19 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  sub_20E9B6638(a1, (uint64_t)__dst, (uint64_t)__p, &v20, (uint64_t)&v18);
  v11 = v19;
  if (!v19)
    goto LABEL_13;
  v12 = (unint64_t *)&v19->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
    if (!*((_QWORD *)&v20 + 1))
      goto LABEL_17;
  }
  else
  {
LABEL_13:
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
    if (!*((_QWORD *)&v20 + 1))
      goto LABEL_17;
  }
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (v16)
  {
LABEL_17:
    if ((SHIBYTE(v22) & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_24;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  if ((SHIBYTE(v22) & 0x80000000) == 0)
  {
LABEL_18:
    if ((SHIBYTE(v24) & 0x80000000) == 0)
      goto LABEL_19;
    goto LABEL_25;
  }
LABEL_24:
  operator delete(__p[0]);
  if ((SHIBYTE(v24) & 0x80000000) == 0)
  {
LABEL_19:
    if (*a3)
      return a1;
    goto LABEL_26;
  }
LABEL_25:
  operator delete(__dst[0]);
  if (*a3)
    return a1;
LABEL_26:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 534, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  return a1;
}

void sub_20E9B6000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E9B6058(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v18;
  std::__shared_weak_count *v19;
  __int128 v20;
  void *__p[2];
  uint64_t v22;
  void *__dst[2];
  uint64_t v24;

  v6 = *a3;
  if (*(char *)(*a3 + 31) < 0)
  {
    sub_20E860C04(__dst, *(void **)(v6 + 8), *(_QWORD *)(v6 + 16));
    v6 = *a3;
    if ((*(char *)(*a3 + 55) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v7 = *(_OWORD *)(v6 + 8);
    v24 = *(_QWORD *)(v6 + 24);
    *(_OWORD *)__dst = v7;
    if ((*(char *)(v6 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      *(_OWORD *)__p = *(_OWORD *)(v6 + 32);
      v22 = *(_QWORD *)(v6 + 48);
      goto LABEL_6;
    }
  }
  sub_20E860C04(__p, *(void **)(v6 + 32), *(_QWORD *)(v6 + 40));
LABEL_6:
  v20 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v8 = (std::__shared_weak_count *)a3[1];
  v18 = *a3;
  v19 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  sub_20E9B7E08(a1, (uint64_t)__dst, (uint64_t)__p, &v20, (uint64_t)&v18);
  v11 = v19;
  if (!v19)
    goto LABEL_13;
  v12 = (unint64_t *)&v19->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
    if (!*((_QWORD *)&v20 + 1))
      goto LABEL_17;
  }
  else
  {
LABEL_13:
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
    if (!*((_QWORD *)&v20 + 1))
      goto LABEL_17;
  }
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (v16)
  {
LABEL_17:
    if ((SHIBYTE(v22) & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_24;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  if ((SHIBYTE(v22) & 0x80000000) == 0)
  {
LABEL_18:
    if ((SHIBYTE(v24) & 0x80000000) == 0)
      goto LABEL_19;
    goto LABEL_25;
  }
LABEL_24:
  operator delete(__p[0]);
  if ((SHIBYTE(v24) & 0x80000000) == 0)
  {
LABEL_19:
    if (*a3)
      return a1;
    goto LABEL_26;
  }
LABEL_25:
  operator delete(__dst[0]);
  if (*a3)
    return a1;
LABEL_26:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 534, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  return a1;
}

void sub_20E9B6230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20E9B6290(uint64_t a1)
{
  sub_20E9BA4B8(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20E9B62B4(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B5708;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20E9B62F4(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B5708;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E9B6344(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_20E9B6354(uint64_t a1)
{
  sub_20E9BA2D4(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20E9B6378(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B5770;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20E9B63B8(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B5770;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E9B6408(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

_QWORD *sub_20E9B6418(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9B57A8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20E9B6450(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9B57A8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20E9B6498(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C9B57E0;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C9B57E0;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20E9B656C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E9B6598(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B57E0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20E9B65D8(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B57E0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E9B6628(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20E9B6638(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5)
{
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v17;
  std::__shared_weak_count *v18;
  __int128 v19;
  void *__p[2];
  uint64_t v21;
  __int128 v22;
  void *v23[2];
  uint64_t v24;
  __int128 v25;
  uint64_t v26;

  v25 = *(_OWORD *)a2;
  v26 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_OWORD *)v23 = *(_OWORD *)a3;
  v24 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v6 = *(_OWORD *)a2;
  v21 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v19 = *a4;
  *(_OWORD *)__p = v6;
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  sub_20E9B6858((__int128 *)__p, (uint64_t)&v19, a5, &v22);
  v17 = 0;
  v18 = 0;
  sub_20E9B7768(a1, &v25, (__int128 *)v23, (uint64_t)&v22, (uint64_t)&v17);
  v7 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (!*((_QWORD *)&v19 + 1))
    goto LABEL_15;
  v14 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if ((SHIBYTE(v21) & 0x80000000) == 0)
    {
LABEL_16:
      if ((SHIBYTE(v24) & 0x80000000) == 0)
        goto LABEL_17;
LABEL_21:
      operator delete(v23[0]);
      if ((SHIBYTE(v26) & 0x80000000) == 0)
        return a1;
      goto LABEL_22;
    }
  }
  else
  {
LABEL_15:
    if ((SHIBYTE(v21) & 0x80000000) == 0)
      goto LABEL_16;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v24) < 0)
    goto LABEL_21;
LABEL_17:
  if ((SHIBYTE(v26) & 0x80000000) == 0)
    return a1;
LABEL_22:
  operator delete((void *)v25);
  return a1;
}

void sub_20E9B67E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  sub_20E86665C((uint64_t)&a9);
  sub_20E86665C((uint64_t)&a20);
  sub_20E9AF634((uint64_t)&a11);
  if (a18 < 0)
  {
    operator delete(__p);
    if ((a27 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v27 - 25) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a27 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a22);
  if ((*(char *)(v27 - 25) & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(*(void **)(v27 - 48));
  _Unwind_Resume(a1);
}

void sub_20E9B6858(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  void *__p[2];
  uint64_t v11;
  __int128 v12;

  v5 = *a1;
  v11 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  *(_QWORD *)a1 = 0;
  v9 = *(_OWORD *)a2;
  *(_OWORD *)__p = v5;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  sub_20E9B693C((__int128 *)__p, &v9, a3, (uint64_t *)&v12);
  *a4 = v12;
  v12 = 0uLL;
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
  if (!*((_QWORD *)&v9 + 1))
    goto LABEL_5;
  v7 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
  {
LABEL_5:
    if ((SHIBYTE(v11) & 0x80000000) == 0)
      return;
LABEL_8:
    operator delete(__p[0]);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  if (SHIBYTE(v11) < 0)
    goto LABEL_8;
}

void sub_20E9B6918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  sub_20E9AF634((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20E9B693C(__int128 *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v12;
  unint64_t v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  void *__p[2];
  uint64_t v25;

  v8 = operator new();
  v9 = *a1;
  v25 = *((_QWORD *)a1 + 2);
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  v23 = *a2;
  *(_OWORD *)__p = v9;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  sub_20E9B6B70(v8, (__int128 *)__p, (uint64_t)&v23, a3);
  *a4 = v8;
  v10 = (std::__shared_weak_count *)operator new();
  v10->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B5A08;
  v10->__shared_weak_owners_ = 0;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)v8;
  a4[1] = (uint64_t)v10;
  v12 = *(std::__shared_weak_count **)(v8 + 40);
  if (v12)
  {
    if (v12->__shared_owners_ != -1)
      goto LABEL_14;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v15 = __ldxr(p_shared_weak_owners);
    while (__stxr(v15 + 1, p_shared_weak_owners));
    *(_QWORD *)(v8 + 32) = v8;
    *(_QWORD *)(v8 + 40) = v10;
    std::__shared_weak_count::__release_weak(v12);
  }
  else
  {
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    v17 = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    *(_QWORD *)(v8 + 32) = v8;
    *(_QWORD *)(v8 + 40) = v10;
  }
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
LABEL_14:
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
  if (!*((_QWORD *)&v23 + 1))
    goto LABEL_18;
  v21 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (v22)
  {
LABEL_18:
    if ((SHIBYTE(v25) & 0x80000000) == 0)
      return;
LABEL_21:
    operator delete(__p[0]);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  if (SHIBYTE(v25) < 0)
    goto LABEL_21;
}

void sub_20E9B6B04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  sub_20E9AF634((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9B6B70(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  __int128 v6;
  uint64_t v7;

  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = &off_24C9B5818;
  *(_QWORD *)(a1 + 16) = &unk_24C9B5890;
  *(_QWORD *)(a1 + 24) = &unk_24C9B58D0;
  v6 = *a2;
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 48) = v6;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v7 = operator new();
  *(_QWORD *)v7 = &off_24C9B59B8;
  *(_OWORD *)(v7 + 8) = *(_OWORD *)a4;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a1 + 88) = v7;
  *(_QWORD *)(a1 + 96) = a1 + 96;
  *(_QWORD *)(a1 + 104) = a1 + 96;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = a1 + 120;
  *(_QWORD *)(a1 + 128) = a1 + 120;
  *(_QWORD *)(a1 + 136) = 0;
  return a1;
}

void sub_20E9B6C34(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  std::__shared_weak_count *v5;

  sub_20E9AF634(v2);
  if (*(char *)(v1 + 71) < 0)
  {
    operator delete(*v3);
    v5 = *(std::__shared_weak_count **)(v1 + 40);
    if (!v5)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else
  {
    v5 = *(std::__shared_weak_count **)(v1 + 40);
    if (!v5)
      goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v5);
  _Unwind_Resume(a1);
}

void sub_20E9B6C78(uint64_t a1)
{
  sub_20E9B7400(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E9B6C9C(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _BYTE v5[8];
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    v5[0] = 0;
    v6 = 0;
    sub_20E9B7548(a1 + 11, a2, (uint64_t)v5);
    if (v6)
      MEMORY[0x212BC623C](v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_20E9B6D58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    MEMORY[0x212BC623C](&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9B6D80(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20E9B6D90(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20E9B6D9C(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20E9B6DAC(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_20E8778D4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v13, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_20E9B7548(a1 + 11, a2, (uint64_t)&v14);
  if (v15)
    MEMORY[0x212BC623C](&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_20E9B6F44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19)
{
  std::promise<void> *v19;
  std::exception_ptr v20;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v20.__ptr_ = &a19;
    std::promise<void>::set_exception(v19, v20);
    std::exception_ptr::~exception_ptr(&a19);
    std::runtime_error::~runtime_error(&a18);
    if (a17 < 0)
      operator delete(__p);
    JUMPOUT(0x20E9B6E70);
  }
  _Unwind_Resume(exception_object);
}

void sub_20E9B6FE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14)
{
  std::recursive_mutex *v14;

  if ((_BYTE)a12)
    MEMORY[0x212BC623C](&a10);
  std::recursive_mutex::unlock(v14);
  _Unwind_Resume(a1);
}

void sub_20E9B7004(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_20E9B7088(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 96);
  v4 = (_QWORD *)(a1 + 96);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20E9B7118(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20E9B712C(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20E9B71BC(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20E9B71D0(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

void sub_20E9B7204(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20E9B7238(uint64_t a1)
{
  return sub_20E9B7400(a1 - 16);
}

void sub_20E9B7240(uint64_t a1)
{
  sub_20E9B7400(a1 - 16);
  JUMPOUT(0x212BC6398);
}

void sub_20E9B7268(uint64_t a1)
{
  sub_20E9B7088(a1 - 16);
}

void sub_20E9B7270(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

void sub_20E9B72A4(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20E9B72D8(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20E9B72E0(uint64_t a1)
{
  return sub_20E9B7400(a1 - 24);
}

void sub_20E9B72E8(uint64_t a1)
{
  sub_20E9B7400(a1 - 24);
  JUMPOUT(0x212BC6398);
}

void sub_20E9B7310(uint64_t a1)
{
  sub_20E9B712C(a1 - 24);
}

uint64_t sub_20E9B7318(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20E9B7320(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20E9B7388(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E9B73F0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20E9B7400(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = &off_24C9B5818;
  *(_QWORD *)(a1 + 16) = &unk_24C9B5890;
  *(_QWORD *)(a1 + 24) = &unk_24C9B58D0;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v8 = *(_QWORD *)(a1 + 96);
    v7 = *(uint64_t **)(a1 + 104);
    v9 = *v7;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v8 + 8);
    **(_QWORD **)(v8 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v7 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v7[1];
        operator delete(v7);
        v7 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20E9B7548(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = *a1;
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 276, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  if (*(_BYTE *)(a3 + 8))
    std::promise<void>::set_value((std::promise<void> *)a3);
}

void sub_20E9B75E0()
{
  __break(1u);
}

void sub_20E9B768C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20E9B76ACLL);
}

void sub_20E9B76BC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E9B76E0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20E9B76F8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio15odometry_e"
                     "ngine11VIOMetadataEEEvvvLb0EEEE27__shared_ptr_default_deleteISB_SB_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio1"
                                "5odometry_engine11VIOMetadataEEEvvvLb0EEEE27__shared_ptr_default_deleteISB_SB_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio15odometry_engine11VIOMetadataEEEvvvLb0EEEE27__shared_ptr_default_deleteISB_SB_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio15odometry_engine11VIOMetadataEEEvvvLb0EEEE27__shared_ptr_default_deleteISB_SB_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20E9B7768(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;

  *(_QWORD *)a1 = &off_24C9B56D8;
  v6 = *a2;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 8) = v6;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v7 = *a3;
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(a1 + 32) = v7;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)a5;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a4;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v9 = *(_QWORD *)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 80);
  if (v8)
  {
    v10 = (unint64_t *)(v8 + 16);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *(_QWORD *)(a1 + 88) = &off_24C9B5708;
  v12 = (_QWORD *)operator new();
  *v12 = &off_24C9B5A58;
  v12[1] = v9;
  v12[2] = v8;
  *(_QWORD *)(a1 + 96) = v12;
  v13 = *(_QWORD *)(a1 + 72);
  v14 = *(_QWORD *)(a1 + 80);
  if (!v14)
  {
    *(_QWORD *)(a1 + 104) = v13;
    *(_QWORD *)(a1 + 112) = 0;
    if (v13)
      v19 = v13 + 16;
    else
      v19 = 0;
    goto LABEL_21;
  }
  v15 = (unint64_t *)(v14 + 16);
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  v18 = *(_QWORD *)(a1 + 72);
  v17 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 104) = v13;
  *(_QWORD *)(a1 + 112) = v14;
  if (v18)
    v19 = v18 + 16;
  else
    v19 = 0;
  if (!v17)
  {
    v13 = v18;
LABEL_21:
    v22 = 0;
    *(_QWORD *)(a1 + 120) = &off_24C9B2520;
    *(_QWORD *)(a1 + 128) = v19;
    *(_QWORD *)(a1 + 136) = 0;
    goto LABEL_22;
  }
  v20 = (unint64_t *)(v17 + 16);
  do
    v21 = __ldxr(v20);
  while (__stxr(v21 + 1, v20));
  v13 = *(_QWORD *)(a1 + 72);
  v22 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 120) = &off_24C9B2520;
  *(_QWORD *)(a1 + 128) = v19;
  *(_QWORD *)(a1 + 136) = v17;
  if (v22)
  {
    v23 = (unint64_t *)(v22 + 16);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
LABEL_22:
  if (v13)
    v25 = v13 + 24;
  else
    v25 = 0;
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  *(_QWORD *)(a1 + 152) = v25;
  *(_QWORD *)(a1 + 160) = v22;
  return a1;
}

void sub_20E9B7918(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  void **v5;
  void **v6;

  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
    sub_20E86665C(v3);
    sub_20E86665C(v2);
    if ((*(char *)(v1 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 31) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    sub_20E86665C(v3);
    sub_20E86665C(v2);
    if ((*(char *)(v1 + 55) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete(*v6);
  if ((*(char *)(v1 + 31) & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(*v5);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9B7988(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20E9B79B4(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20E9B79F0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9B5A58;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20E9B7A58(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20E9B7AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E9B7AFC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20E9B7B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9B7BA0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20E9B7C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9B7C78(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20E9B7D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E9B7D50(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20E9B7DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9B7E08(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5)
{
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v17;
  std::__shared_weak_count *v18;
  __int128 v19;
  void *__p[2];
  uint64_t v21;
  __int128 v22;
  void *v23[2];
  uint64_t v24;
  __int128 v25;
  uint64_t v26;

  v25 = *(_OWORD *)a2;
  v26 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_OWORD *)v23 = *(_OWORD *)a3;
  v24 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v6 = *(_OWORD *)a2;
  v21 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v19 = *a4;
  *(_OWORD *)__p = v6;
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  sub_20E9B8028((__int128 *)__p, (uint64_t)&v19, a5, &v22);
  v17 = 0;
  v18 = 0;
  sub_20E9B9C34(a1, &v25, (__int128 *)v23, (uint64_t)&v22, (uint64_t)&v17);
  v7 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (!*((_QWORD *)&v19 + 1))
    goto LABEL_15;
  v14 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if ((SHIBYTE(v21) & 0x80000000) == 0)
    {
LABEL_16:
      if ((SHIBYTE(v24) & 0x80000000) == 0)
        goto LABEL_17;
LABEL_21:
      operator delete(v23[0]);
      if ((SHIBYTE(v26) & 0x80000000) == 0)
        return a1;
      goto LABEL_22;
    }
  }
  else
  {
LABEL_15:
    if ((SHIBYTE(v21) & 0x80000000) == 0)
      goto LABEL_16;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v24) < 0)
    goto LABEL_21;
LABEL_17:
  if ((SHIBYTE(v26) & 0x80000000) == 0)
    return a1;
LABEL_22:
  operator delete((void *)v25);
  return a1;
}

void sub_20E9B7FB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  sub_20E86665C((uint64_t)&a9);
  sub_20E86665C((uint64_t)&a20);
  sub_20E9AF634((uint64_t)&a11);
  if (a18 < 0)
  {
    operator delete(__p);
    if ((a27 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v27 - 25) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a27 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a22);
  if ((*(char *)(v27 - 25) & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(*(void **)(v27 - 48));
  _Unwind_Resume(a1);
}

void sub_20E9B8028(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  void *__p[2];
  uint64_t v11;
  __int128 v12;

  v5 = *a1;
  v11 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  *(_QWORD *)a1 = 0;
  v9 = *(_OWORD *)a2;
  *(_OWORD *)__p = v5;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  sub_20E9B810C((__int128 *)__p, &v9, a3, (uint64_t *)&v12);
  *a4 = v12;
  v12 = 0uLL;
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
  if (!*((_QWORD *)&v9 + 1))
    goto LABEL_5;
  v7 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
  {
LABEL_5:
    if ((SHIBYTE(v11) & 0x80000000) == 0)
      return;
LABEL_8:
    operator delete(__p[0]);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  if (SHIBYTE(v11) < 0)
    goto LABEL_8;
}

void sub_20E9B80E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  sub_20E9AF634((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20E9B810C(__int128 *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v12;
  unint64_t v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  void *__p[2];
  uint64_t v25;

  v8 = operator new();
  v9 = *a1;
  v25 = *((_QWORD *)a1 + 2);
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  v23 = *a2;
  *(_OWORD *)__p = v9;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  sub_20E9B8340(v8, (__int128 *)__p, (uint64_t)&v23, a3);
  *a4 = v8;
  v10 = (std::__shared_weak_count *)operator new();
  v10->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B5CD0;
  v10->__shared_weak_owners_ = 0;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)v8;
  a4[1] = (uint64_t)v10;
  v12 = *(std::__shared_weak_count **)(v8 + 40);
  if (v12)
  {
    if (v12->__shared_owners_ != -1)
      goto LABEL_14;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v15 = __ldxr(p_shared_weak_owners);
    while (__stxr(v15 + 1, p_shared_weak_owners));
    *(_QWORD *)(v8 + 32) = v8;
    *(_QWORD *)(v8 + 40) = v10;
    std::__shared_weak_count::__release_weak(v12);
  }
  else
  {
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    v17 = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    *(_QWORD *)(v8 + 32) = v8;
    *(_QWORD *)(v8 + 40) = v10;
  }
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
LABEL_14:
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
  if (!*((_QWORD *)&v23 + 1))
    goto LABEL_18;
  v21 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (v22)
  {
LABEL_18:
    if ((SHIBYTE(v25) & 0x80000000) == 0)
      return;
LABEL_21:
    operator delete(__p[0]);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  if (SHIBYTE(v25) < 0)
    goto LABEL_21;
}

void sub_20E9B82D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  sub_20E9AF634((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9B8340(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  __int128 v6;
  uint64_t v7;

  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = &off_24C9B5AD0;
  *(_QWORD *)(a1 + 16) = &unk_24C9B5B48;
  *(_QWORD *)(a1 + 24) = &unk_24C9B5B88;
  v6 = *a2;
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 48) = v6;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v7 = operator new();
  *(_QWORD *)v7 = &off_24C9B5C80;
  *(_OWORD *)(v7 + 8) = *(_OWORD *)a4;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a1 + 88) = v7;
  *(_QWORD *)(a1 + 96) = a1 + 96;
  *(_QWORD *)(a1 + 104) = a1 + 96;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = a1 + 120;
  *(_QWORD *)(a1 + 128) = a1 + 120;
  *(_QWORD *)(a1 + 136) = 0;
  return a1;
}

void sub_20E9B8404(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  std::__shared_weak_count *v5;

  sub_20E9AF634(v2);
  if (*(char *)(v1 + 71) < 0)
  {
    operator delete(*v3);
    v5 = *(std::__shared_weak_count **)(v1 + 40);
    if (!v5)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else
  {
    v5 = *(std::__shared_weak_count **)(v1 + 40);
    if (!v5)
      goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v5);
  _Unwind_Resume(a1);
}

void sub_20E9B8448(uint64_t a1)
{
  sub_20E9B8C70(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E9B846C(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    LOBYTE(v5) = 0;
    v6 = 0;
    sub_20E9B8DCC(a1 + 11, a2, (uint64_t)&v5);
    if (v6)
      sub_20E9B9960(&v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_20E9B8528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    sub_20E9B9960(&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9B8550(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20E9B8560(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20E9B856C(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20E9B857C(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_20E8778D4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v13, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_20E9B8DCC(a1 + 11, a2, (uint64_t)&v14);
  if (v15)
    sub_20E9B9960(&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_20E9B8714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::__assoc_sub_state **v20;
  std::__assoc_sub_state *v21;
  std::exception_ptr v22;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v21 = *v20;
    if (v21)
    {
      std::exception_ptr::exception_ptr(&a20, &a19);
      v22.__ptr_ = &a20;
      std::__assoc_sub_state::set_exception(v21, v22);
      std::exception_ptr::~exception_ptr(&a20);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (a17 < 0)
        operator delete(__p);
      JUMPOUT(0x20E9B8640);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20E9B8788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20E9B87E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13)
{
  std::recursive_mutex *v13;

  if ((_BYTE)a11)
    sub_20E9B9960(&a10);
  std::recursive_mutex::unlock(v13);
  _Unwind_Resume(a1);
}

void sub_20E9B880C(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_20E9B8890(uint64_t a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v4);
  v5 = operator new(0x20uLL);
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5[2] = &off_24C9B57E0;
  v5[3] = v6;
  v8 = *(_QWORD *)(a1 + 96);
  v7 = (_QWORD *)(a1 + 96);
  *v5 = v8;
  v5[1] = v7;
  *(_QWORD *)(v8 + 8) = v5;
  *v7 = v5;
  ++v7[2];
  std::recursive_mutex::unlock(v4);
}

void sub_20E9B8940(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20E9B8954(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20E9B89E4(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20E9B89F8(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v4);
  sub_20E9B9A88(a1 + 96, a2);
  std::recursive_mutex::unlock(v4);
}

void sub_20E9B8A3C(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20E9B8A50(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20E9B8A84(uint64_t a1)
{
  return sub_20E9B8C70(a1 - 16);
}

void sub_20E9B8A8C(uint64_t a1)
{
  sub_20E9B8C70(a1 - 16);
  JUMPOUT(0x212BC6398);
}

void sub_20E9B8AB4(uint64_t a1, uint64_t a2)
{
  sub_20E9B8890(a1 - 16, a2);
}

void sub_20E9B8ABC(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v4);
  sub_20E9B9A88(a1 + 80, a2);
  std::recursive_mutex::unlock(v4);
}

void sub_20E9B8B00(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20E9B8B14(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20E9B8B48(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20E9B8B50(uint64_t a1)
{
  return sub_20E9B8C70(a1 - 24);
}

void sub_20E9B8B58(uint64_t a1)
{
  sub_20E9B8C70(a1 - 24);
  JUMPOUT(0x212BC6398);
}

void sub_20E9B8B80(uint64_t a1)
{
  sub_20E9B8954(a1 - 24);
}

uint64_t sub_20E9B8B88(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20E9B8B90(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20E9B8BF8(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E9B8C60(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20E9B8C70(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = &off_24C9B5AD0;
  *(_QWORD *)(a1 + 16) = &unk_24C9B5B48;
  *(_QWORD *)(a1 + 24) = &unk_24C9B5B88;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v7 = *(_QWORD *)(a1 + 96);
    v8 = *(uint64_t **)(a1 + 104);
    v9 = *v8;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v8 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v8[1];
        (*(void (**)(uint64_t *))v8[2])(v8 + 2);
        operator delete(v8);
        v8 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20E9B8DCC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  sub_20E9B8EC4(a1, a2, a3);
}

void sub_20E9B8EC4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *i;
  char *v9;
  void *v10;
  char *v11;
  void *v12;
  void *v13[3];
  void *v14;
  void *v15;
  void *__p;
  void *v17;

  v6 = *a1;
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v13, v6, a2);
  v7 = a1 + 1;
  for (i = (_QWORD *)a1[2]; i != v7; i = (_QWORD *)i[1])
    (*(void (**)(_QWORD *, void **))(i[2] + 16))(i + 2, v13);
  if (*(_BYTE *)(a3 + 8))
  {
    if (!*(_QWORD *)a3)
      sub_20E96CE78(3u);
    sub_20E9B903C(*(_QWORD *)a3, (uint64_t)v13);
  }
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  v9 = (char *)v15;
  if (v15)
  {
    do
    {
      v11 = *(char **)v9;
      v12 = (void *)*((_QWORD *)v9 + 5);
      if (v12)
      {
        *((_QWORD *)v9 + 6) = v12;
        operator delete(v12);
      }
      if (v9[39] < 0)
        operator delete(*((void **)v9 + 2));
      operator delete(v9);
      v9 = v11;
    }
    while (v11);
  }
  v10 = v14;
  v14 = 0;
  if (v10)
    operator delete(v10);
  if (v13[0])
  {
    v13[1] = v13[0];
    operator delete(v13[0]);
  }
}

void sub_20E9B9014(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E98CA78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E9B9028(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E98CA78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E9B903C(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  uint64_t v5;
  std::exception_ptr v6;

  v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if ((*(_BYTE *)(a1 + 136) & 1) != 0
    || (v6.__ptr_ = 0, v5 = *(_QWORD *)(a1 + 16), std::exception_ptr::~exception_ptr(&v6), v5))
  {
    sub_20E96CE78(2u);
  }
  sub_20E9B90E0((_QWORD *)(a1 + 144), a2);
  *(_DWORD *)(a1 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 88));
  std::mutex::unlock(v4);
}

void sub_20E9B90CC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E9B90E0(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  size_t v6;
  char *v7;
  char *v8;
  _BYTE *v9;
  _BYTE *v10;
  size_t v11;
  char *v12;
  char *v13;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v5 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD *)a2)
  {
    if ((v6 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v7 = (char *)operator new(v4 - *(_QWORD *)a2);
    *a1 = v7;
    a1[1] = v7;
    v8 = &v7[v6];
    a1[2] = &v7[v6];
    memcpy(v7, v5, v6);
    a1[1] = v8;
  }
  sub_20E9B9270((uint64_t)(a1 + 3), a2 + 24);
  a1[8] = 0;
  a1[9] = 0;
  a1[10] = 0;
  v10 = *(_BYTE **)(a2 + 64);
  v9 = *(_BYTE **)(a2 + 72);
  v11 = v9 - v10;
  if (v9 != v10)
  {
    if ((v11 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v12 = (char *)operator new(v9 - v10);
    a1[8] = v12;
    a1[9] = v12;
    v13 = &v12[v11];
    a1[10] = &v12[v11];
    memcpy(v12, v10, v11);
    a1[9] = v13;
  }
  return a1;
}

void sub_20E9B91B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E9B91F8(uint64_t a1)
{
  char *v2;
  void *v3;
  char *v5;
  void *v6;

  v2 = *(char **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = *(char **)v2;
      v6 = (void *)*((_QWORD *)v2 + 5);
      if (v6)
      {
        *((_QWORD *)v2 + 6) = v6;
        operator delete(v6);
      }
      if (v2[39] < 0)
        operator delete(*((void **)v2 + 2));
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t sub_20E9B9270(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  __int128 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_20E8D2B3C(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(__int128 **)(a2 + 16); i; i = *(__int128 **)i)
    sub_20E9B93B0(a1, (uint64_t)(i + 1), i + 1);
  return a1;
}

void sub_20E9B9388(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E9B91F8(v1);
  _Unwind_Resume(a1);
}

void sub_20E9B939C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E9B91F8(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20E9B93B0(uint64_t a1, uint64_t a2, __int128 *a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  float v26;
  float v27;
  _QWORD *v28;
  _QWORD *v29;
  _BOOL8 v30;
  unint64_t v31;
  unint64_t v32;
  size_t prime;
  int8x8_t v34;
  unint64_t v35;
  uint8x8_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD v41[2];
  char v42;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_20E8D177C((uint64_t)v41, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = v14[1];
            if (v21 == v10)
            {
              v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v14 + 39);
              else
                v23 = v14[3];
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = operator new(0x40uLL);
  v41[0] = v25;
  v41[1] = a1 + 16;
  v42 = 0;
  *v25 = 0;
  v25[1] = v10;
  sub_20E9B985C(v25 + 2, a3);
  v42 = 1;
  v26 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v27 = *(float *)(a1 + 32);
  if (!v11 || (float)(v27 * (float)v11) < v26)
  {
    v30 = 1;
    if (v11 >= 3)
      v30 = (v11 & (v11 - 1)) != 0;
    v31 = v30 | (2 * v11);
    v32 = vcvtps_u32_f32(v26 / v27);
    if (v31 <= v32)
      prime = v32;
    else
      prime = v31;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v34 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v34)
      goto LABEL_65;
    if (prime < *(_QWORD *)&v34)
    {
      v35 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v34 < 3uLL || (v36 = (uint8x8_t)vcnt_s8(v34), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        v35 = std::__next_prime(v35);
      }
      else
      {
        v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2)
          v35 = v37;
      }
      if (prime <= v35)
        prime = v35;
      if (prime < *(_QWORD *)&v34)
LABEL_65:
        sub_20E8D2B3C(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v38 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        v29 = (_QWORD *)v41[0];
        if (v28)
          goto LABEL_54;
      }
      else
      {
        v3 = v10;
        v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        v29 = (_QWORD *)v41[0];
        if (v28)
          goto LABEL_54;
      }
    }
    else
    {
      v3 = v38 & v10;
      v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v38 & v10));
      v29 = (_QWORD *)v41[0];
      if (v28)
        goto LABEL_54;
    }
LABEL_78:
    *v29 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v41[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v41[0])
    {
      v39 = *(_QWORD *)(*(_QWORD *)v41[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v39 >= v11)
          v39 %= v11;
      }
      else
      {
        v39 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v39) = v41[0];
    }
    goto LABEL_89;
  }
  v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v29 = (_QWORD *)v41[0];
  if (!v28)
    goto LABEL_78;
LABEL_54:
  *v29 = *v28;
  *v28 = v41[0];
LABEL_89:
  v14 = (uint64_t *)v41[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_20E9B97D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E9B9800((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20E9B97E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E9B9800((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20E9B9800(uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(void **)(v2 + 40);
      if (v3)
      {
        *(_QWORD *)(v2 + 48) = v3;
        operator delete(v3);
      }
      if (*(char *)(v2 + 39) < 0)
        operator delete(*(void **)(v2 + 16));
    }
    operator delete((void *)v2);
  }
  return a1;
}

_QWORD *sub_20E9B985C(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;
  _BYTE *v5;
  _BYTE *v6;
  size_t v7;
  _BYTE *v9;
  char *v10;
  char *v11;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    __dst[3] = 0;
    __dst[4] = 0;
    __dst[5] = 0;
    v6 = (_BYTE *)*((_QWORD *)a2 + 3);
    v9 = (_BYTE *)*((_QWORD *)a2 + 4);
    v7 = v9 - v6;
    if (v9 == v6)
      return __dst;
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
    __dst[3] = 0;
    __dst[4] = 0;
    __dst[5] = 0;
    v6 = (_BYTE *)*((_QWORD *)a2 + 3);
    v5 = (_BYTE *)*((_QWORD *)a2 + 4);
    v7 = v5 - v6;
    if (v5 == v6)
      return __dst;
  }
  if ((v7 & 0x8000000000000000) != 0)
    sub_20E867F44();
  v10 = (char *)operator new(v7);
  __dst[3] = v10;
  __dst[4] = v10;
  v11 = &v10[v7];
  __dst[5] = &v10[v7];
  memcpy(v10, v6, v7);
  __dst[4] = v11;
  return __dst;
}

void sub_20E9B9924(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
    if ((*(char *)(v1 + 23) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v1 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20E9B9960(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x212BC5AF8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20E9B9A4C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, std::logic_error a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::logic_error::~logic_error(&a11);
  JUMPOUT(0x20E9B99A8);
}

char *sub_20E9B9A88@<X0>(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  unint64_t v4;
  char *result;
  char *v6;
  uint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  char *v10;
  uint64_t v11;
  int64x2_t *v12;

  v4 = *(_QWORD *)(a1 + 16);
  v10 = 0;
  v9 = 0uLL;
  if (v4)
  {
    if (v4 >> 61)
      sub_20E92CED8();
    result = (char *)operator new(8 * v4);
    v6 = &result[8 * v4];
    v9.i64[0] = (uint64_t)result;
    v9.i64[1] = (uint64_t)result;
    v10 = v6;
    v7 = *(_QWORD *)(a1 + 8);
    v12 = &v9;
    if (v7 != a1)
      goto LABEL_4;
LABEL_7:
    v8 = vdupq_n_s64((unint64_t)result);
    goto LABEL_8;
  }
  v6 = 0;
  result = 0;
  v7 = *(_QWORD *)(a1 + 8);
  v12 = &v9;
  if (v7 == a1)
    goto LABEL_7;
  do
  {
LABEL_4:
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 24) + 48))(*(_QWORD *)(v7 + 24));
    result = (char *)sub_20E9B2D04((uint64_t *)&v12, &v11);
    v7 = *(_QWORD *)(v7 + 8);
  }
  while (v7 != a1);
  v8 = v9;
  v6 = v10;
LABEL_8:
  *a2 = v8;
  a2[1].i64[0] = (uint64_t)v6;
  return result;
}

void sub_20E9B9B64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20E9B9B88(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E9B9BAC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20E9B9BC4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_INS1_3vio13mapping_typ"
                     "es7MapDataEEENS6_22slam_engine_node_group30OptimizeMapAndTrajectoryResultEvSB_Lb0EEEE27__shared_ptr"
                     "_default_deleteISC_SC_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_INS1_3vio13"
                                "mapping_types7MapDataEEENS6_22slam_engine_node_group30OptimizeMapAndTrajectoryResultEvSB"
                                "_Lb0EEEE27__shared_ptr_default_deleteISC_SC_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_INS1_3vio13mapping_types7MapDataEEENS6_22slam_engine_node_group30OptimizeMapAndTrajectoryResultEvSB_Lb0EEEE27__shared_ptr_default_deleteISC_SC_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_INS1_3vio13mapping_types7MapDataEEENS6_22slam_engine_node_group30OptimizeMapAndTrajectoryResultEvSB_Lb0EEEE27__shared_ptr_default_deleteISC_SC_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20E9B9C34(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;

  *(_QWORD *)a1 = &off_24C9B5740;
  v6 = *a2;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 8) = v6;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v7 = *a3;
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(a1 + 32) = v7;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)a5;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a4;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v9 = *(_QWORD *)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 80);
  if (v8)
  {
    v10 = (unint64_t *)(v8 + 16);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *(_QWORD *)(a1 + 88) = &off_24C9B5770;
  v12 = (_QWORD *)operator new();
  *v12 = &off_24C9B5D20;
  v12[1] = v9;
  v12[2] = v8;
  *(_QWORD *)(a1 + 96) = v12;
  v13 = *(_QWORD *)(a1 + 72);
  v14 = *(_QWORD *)(a1 + 80);
  if (!v14)
  {
    *(_QWORD *)(a1 + 104) = v13;
    *(_QWORD *)(a1 + 112) = 0;
    if (v13)
      v19 = v13 + 16;
    else
      v19 = 0;
    goto LABEL_21;
  }
  v15 = (unint64_t *)(v14 + 16);
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  v18 = *(_QWORD *)(a1 + 72);
  v17 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 104) = v13;
  *(_QWORD *)(a1 + 112) = v14;
  if (v18)
    v19 = v18 + 16;
  else
    v19 = 0;
  if (!v17)
  {
    v13 = v18;
LABEL_21:
    v22 = 0;
    *(_QWORD *)(a1 + 120) = &off_24C9B57A8;
    *(_QWORD *)(a1 + 128) = v19;
    *(_QWORD *)(a1 + 136) = 0;
    goto LABEL_22;
  }
  v20 = (unint64_t *)(v17 + 16);
  do
    v21 = __ldxr(v20);
  while (__stxr(v21 + 1, v20));
  v13 = *(_QWORD *)(a1 + 72);
  v22 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 120) = &off_24C9B57A8;
  *(_QWORD *)(a1 + 128) = v19;
  *(_QWORD *)(a1 + 136) = v17;
  if (v22)
  {
    v23 = (unint64_t *)(v22 + 16);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
LABEL_22:
  if (v13)
    v25 = v13 + 24;
  else
    v25 = 0;
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  *(_QWORD *)(a1 + 152) = v25;
  *(_QWORD *)(a1 + 160) = v22;
  return a1;
}

void sub_20E9B9DE4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  void **v5;
  void **v6;

  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
    sub_20E86665C(v3);
    sub_20E86665C(v2);
    if ((*(char *)(v1 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 31) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    sub_20E86665C(v3);
    sub_20E86665C(v2);
    if ((*(char *)(v1 + 55) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete(*v6);
  if ((*(char *)(v1 + 31) & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(*v5);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9B9E54(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20E9B9E80(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20E9B9EBC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9B5D20;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20E9B9F24(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20E9B9FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E9B9FC8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20E9BA058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9BA06C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20E9BA130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9BA144(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20E9BA208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E9BA21C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20E9BA2C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9BA2D4(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9B5740;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9B57A8;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9B5770;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20E9BA4B8(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9B56D8;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9B2520;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9B5708;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20E9BA69C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)a1 = &off_24C9B56A8;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
  {
    sub_20E9BA2D4(v2 + 168);
    v3 = sub_20E9BA4B8(v2);
    MEMORY[0x212BC6398](v3, 0x10B2C4059065CFELL);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      v7 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = 0;
      if (!v7)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  v7 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v7)
  {
LABEL_8:
    sub_20E9BA2D4(v7 + 168);
    v8 = sub_20E9BA4B8(v7);
    MEMORY[0x212BC6398](v8, 0x10B2C4059065CFELL);
  }
LABEL_9:
  v9 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v9)
    goto LABEL_13;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
  {
LABEL_13:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_19:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_19;
LABEL_14:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_20:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20E9BA7EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unsigned __int8 v7;
  uint64_t v9;
  char *v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  uint64_t v16;
  __uint64_t v17[2];
  int v18;
  _QWORD v19[3];
  char v20;
  void *v21;
  char v22;
  char v23;
  void *v24;
  char v25;
  char v26;
  void *v27;
  char v28;
  void *__p;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v7 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    v9 = *a4;
    v18 = 134217984;
    v19[0] = v9;
    v10 = (char *)_os_log_send_and_compose_impl();
    v11 = strlen(v10);
    v17[0] = 0;
    pthread_threadid_np(0, v17);
    v12 = v17[0];
    timespec_get((timespec *)v17, 1);
    sub_210219E20(&v18, a3, "Trace", 5uLL, (__int128 *)(a2 + 8), (__int128 *)(a2 + 40), "BuildInertialSensorModel completed in %f ms", 0x2BuLL, v10, v11, v12, v17);
    std::mutex::lock(&stru_254A5A410);
    v13 = qword_254A5A458;
    for (i = unk_254A5A460; v13 != i; v13 += 40)
    {
      v15 = *(_QWORD *)(v13 + 32);
      if (!v15)
        sub_20E86D37C();
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v15 + 48))(v15, &v18);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v30 < 0)
    {
      operator delete(__p);
      if ((v28 & 0x80000000) == 0)
      {
LABEL_8:
        if (!v26)
        {
LABEL_14:
          if (v23 && v22 < 0)
            operator delete(v21);
          if (v20 < 0)
            operator delete(*(void **)((char *)v19 + 4));
          if (v10)
            free(v10);
          goto LABEL_21;
        }
LABEL_12:
        if (v25 < 0)
          operator delete(v24);
        goto LABEL_14;
      }
    }
    else if ((v28 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(v27);
    if (!v26)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_21:
  if ((unint64_t)(a3 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(*(os_log_t *)a2))
  {
    v16 = *a4;
    v18 = 134217984;
    v19[0] = v16;
    _os_signpost_emit_unreliably_with_name_impl();
  }
}

void sub_20E9BAAB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  sub_20E96E218((uint64_t)va);
  if (v7)
    free(v7);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9BAAF8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = 850045863;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 105) = 0u;
  if (!v3
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryEngine/include/VIO/OdometryEngine/PosePredictionThreadsafe.hpp", 33, (uint64_t)"pose_predictor_", 15, (uint64_t)"Invalid PosePredictor", 21, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  return a1;
}

void sub_20E9BAB90(_Unwind_Exception *a1)
{
  uint64_t *v1;
  std::mutex *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;

  v4 = (std::__shared_weak_count *)v1[14];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = (std::__shared_weak_count *)v1[12];
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (std::__shared_weak_count *)v1[10];
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  std::mutex::~mutex(v2);
  v13 = *v1;
  *v1 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  _Unwind_Resume(a1);
}

void sub_20E9BAC68()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20E9BAC7C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9B5D98;
  result[1] = v3;
  return result;
}

uint64_t sub_20E9BACB0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9B5D98;
  a2[1] = v2;
  return result;
}

void sub_20E9BACCC(uint64_t a1, uint64_t a2, uint64_t a3, float64x2_t **a4)
{
  double v4;
  float64x2_t v5;
  uint64_t v7;
  int v10;
  float64x2_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v20;
  float64x2_t v21;
  double v22;
  double v24;
  double v25;
  double v26;
  double v27;
  float64x2_t v28;
  float64_t v34;
  double v35;
  float64x2_t v36;
  float64x2_t v37;
  double v38;
  double v39;
  float64x2_t v40;
  double v41;
  double v42;
  char v43;
  double v44;
  float64x2_t v46;
  float64x2_t v47;
  double v48;
  float64_t v50;
  double v51;
  float64x2_t v52;
  double v53;
  double v54;
  double v55;
  double v56;
  float64x2_t v57;
  double v59;
  double v60;
  __int128 v61;
  double v62;
  unint64_t *v63;
  unint64_t v64;
  float64_t v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  float64x2_t v79;
  float64x2_t v80;
  double v81;
  double v82;
  float64x2_t v83;
  float64x2_t v84;
  double v85;
  double v86;
  double v87;
  double v88;
  float64x2_t v89;
  float64x2_t v90;
  __int128 v91;
  std::__shared_weak_count *v92;
  double v93;
  double v94;
  unint64_t *p_shared_weak_owners;
  unint64_t v96;
  float64x2_t v97;
  double v98;
  float64x2_t v99;
  double v100;
  float64x2_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  float64x2_t *v105;
  unint64_t *v106;
  unint64_t v107;
  float64x2_t *v108;
  unint64_t *v109;
  unint64_t v110;
  float64x2_t *v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *p_shared_owners;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  float64x2_t v129;
  double v130;
  double v131;
  double v132;
  double v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  double v137;
  double v138;
  double v139;
  float64x2_t v140;
  double v141;
  double v142;
  double v143;
  double v144;
  double v145;
  std::__shared_weak_count *v146;
  std::__shared_weak_count *v147;
  char v148;
  _OWORD v149[2];
  uint64_t v150;
  std::__shared_weak_count *v151;
  uint64_t v152;
  std::__shared_weak_count *v153;
  __int128 v154;
  char v155;
  _BYTE v156[32];
  float64x2_t *v157;
  std::__shared_weak_count *v158;
  float64x2_t *v159;
  std::__shared_weak_count *v160;
  float64x2_t *v161;
  std::__shared_weak_count *v162;
  char v163;
  char v164;
  char v165;
  _QWORD v166[3];
  char v167;
  float64x2_t v168;
  double v169;
  float64x2_t v170;
  double v171;
  float64x2_t v172;
  double v173;
  char v174;
  float64x2_t v175;
  _BYTE v176[24];
  double v177;
  float64x2_t v178;
  __int128 v179;

  v7 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(a3 + 168))
  {
    std::mutex::lock((std::mutex *)(v7 + 13296));
    v10 = *(unsigned __int8 *)(v7 + 13288);
    std::mutex::unlock((std::mutex *)(v7 + 13296));
    if (!v10
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/VIOEngineAndPosePrediction.cpp", 422, (uint64_t)"imu_to_camera_.Valid()", 22, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    std::mutex::lock((std::mutex *)(v7 + 13296));
    v11.f64[0] = *(float64_t *)(v7 + 13192);
    v129 = v11;
    v128 = *(double *)(v7 + 13200);
    v127 = *(double *)(v7 + 13208);
    v12 = *(double *)(v7 + 13216);
    v130 = *(double *)(v7 + 13224);
    v132 = *(double *)(v7 + 13232);
    v126 = *(double *)(v7 + 13240);
    v13 = *(double *)(v7 + 13248);
    v131 = *(double *)(v7 + 13256);
    v142 = *(double *)(v7 + 13264);
    v133 = *(double *)(v7 + 13272);
    v14 = *(double *)(v7 + 13280);
    std::mutex::unlock((std::mutex *)(v7 + 13296));
    v17 = v126;
    v16 = v127;
    v18 = *(double *)(a3 + 160);
    _Q7.f64[0] = *(float64_t *)(a3 + 16);
    v20 = *(double *)(a3 + 40);
    v21 = *(float64x2_t *)(a3 + 24);
    v22 = *(double *)(a3 + 64);
    _Q3 = *(float64x2_t *)(a3 + 48);
    v24 = v128;
    v25 = v129.f64[0] * _Q7.f64[0];
    v26 = v130 * _Q7.f64[0];
    v27 = v131 * _Q7.f64[0];
    _Q7.f64[1] = v20;
    v28 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)a3, (int64x2_t)v21), *(double *)(a3 + 144)), (float64x2_t)vzip2q_s64(*(int64x2_t *)a3, (int64x2_t)v21), *(float64x2_t *)(a3 + 144), 1), _Q7, v18);
    _D5 = *(_QWORD *)(a3 + 152);
    __asm { FMLA            D7, D5, V3.D[1] }
    v34 = _Q7.f64[0] + v22 * v18;
    v35 = v132;
    v36 = vmulq_n_f64(*(float64x2_t *)a3, v129.f64[0]);
    v37 = vmulq_n_f64(v21, v128);
    v38 = v127 * v22;
    v141 = v12 - v129.f64[0] * v28.f64[0];
    v39 = v127 * v34;
    v140 = vmulq_n_f64(*(float64x2_t *)a3, v130);
    v40 = vmulq_n_f64(v21, v132);
    v139 = v126 * v22;
    v137 = v13 - v130 * v28.f64[0];
    v41 = v126 * v34;
    v136 = vmulq_n_f64(*(float64x2_t *)a3, v131);
    v135 = vmulq_n_f64(_Q3, v133);
    v138 = v133 * v22;
    v42 = v14 - v133 * v34;
    v43 = *((_BYTE *)a4 + 56);
    if (v43)
    {
      v44 = (*a4)[13].f64[0];
      _Q12.f64[0] = (*a4)[4].f64[0];
      v46 = (*a4)[3];
      v47 = *(float64x2_t *)((char *)*a4 + 72);
      v48 = (*a4)[7].f64[0];
      v124 = v38;
      _Q11 = (*a4)[6];
      v125 = v27;
      v50 = v129.f64[0] * _Q12.f64[0];
      v51 = v130 * _Q12.f64[0];
      v52 = v36;
      v53 = v41;
      v54 = v26;
      v55 = v25;
      v56 = v131 * _Q12.f64[0];
      _Q12.f64[1] = (*a4)[5].f64[1];
      v57 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v46, (int64x2_t)v47), (*a4)[12].f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v46, (int64x2_t)v47), (*a4)[12], 1), _Q12, v44);
      _D31 = (*a4)[12].f64[1];
      __asm { FMLA            D12, D31, V11.D[1] }
      _Q12.f64[0] = _Q12.f64[0] + v48 * v44;
      v134 = vaddq_f64(vmulq_n_f64(_Q11, v127), vaddq_f64(vmulq_n_f64(v46, v129.f64[0]), vmulq_n_f64(v47, v128)));
      v15 = v128 * _Q12.f64[1] + v50 + v127 * v48;
      v59 = v12 - v129.f64[0] * v57.f64[0] - v127 * _Q12.f64[0] - vmuld_lane_f64(v128, v57, 1);
      v129 = vaddq_f64(vmulq_n_f64(_Q11, v126), vaddq_f64(vmulq_n_f64(v46, v130), vmulq_n_f64(v47, v132)));
      v12 = v132 * _Q12.f64[1] + v51 + v126 * v48;
      v13 = v13 - v130 * v57.f64[0] - v126 * _Q12.f64[0] - vmuld_lane_f64(v132, v57, 1);
      v35 = v132;
      v16 = v127;
      v17 = v126;
      v5 = vaddq_f64(vmulq_n_f64(v47, v142), vaddq_f64(vmulq_n_f64(v46, v131), vmulq_n_f64(_Q11, v133)));
      v24 = v128;
      v47.f64[0] = v56 + v133 * v48;
      v25 = v55;
      v26 = v54;
      v41 = v53;
      v36 = v52;
      v20 = *(double *)(a3 + 40);
      v4 = v142 * _Q12.f64[1] + v47.f64[0];
      v38 = v124;
      v47.f64[0] = v14 - v133 * _Q12.f64[0] - v131 * v57.f64[0];
      v60 = vmuld_lane_f64(v142, v57, 1);
      v27 = v125;
      v14 = v47.f64[0] - v60;
      v43 = 1;
    }
    else
    {
      v134 = 0u;
      v59 = 0.0;
    }
    v79 = vaddq_f64(v36, v37);
    v80 = vmulq_n_f64(_Q3, v16);
    v81 = v25 + v38;
    v82 = vmuld_lane_f64(v24, v28, 1);
    v83 = vaddq_f64(v140, v40);
    v84 = vmulq_n_f64(_Q3, v17);
    v85 = v26 + v139;
    v86 = v35 * v20;
    v87 = v137 - v41;
    v88 = vmuld_lane_f64(v35, v28, 1);
    v89 = vaddq_f64(v136, v135);
    v90 = vmulq_n_f64(v21, v142);
    v91 = *(_OWORD *)(a2 + 16);
    v149[0] = *(_OWORD *)a2;
    v149[1] = v91;
    v92 = *(std::__shared_weak_count **)(a2 + 40);
    v93 = v42 - v131 * v28.f64[0];
    v150 = *(_QWORD *)(a2 + 32);
    v151 = v92;
    v94 = vmuld_lane_f64(v142, v28, 1);
    if (v92)
    {
      p_shared_weak_owners = (unint64_t *)&v92->__shared_weak_owners_;
      do
        v96 = __ldxr(p_shared_weak_owners);
      while (__stxr(v96 + 1, p_shared_weak_owners));
    }
    v97 = vaddq_f64(v80, v79);
    v98 = v24 * v20 + v81;
    v99 = vaddq_f64(v84, v83);
    v100 = v86 + v85;
    v101 = vaddq_f64(v90, v89);
    v102 = *(std::__shared_weak_count **)(a2 + 56);
    v152 = *(_QWORD *)(a2 + 48);
    v153 = v102;
    if (v102)
    {
      v103 = (unint64_t *)&v102->__shared_weak_owners_;
      do
        v104 = __ldxr(v103);
      while (__stxr(v104 + 1, v103));
    }
    v154 = *(_OWORD *)(a2 + 64);
    v175 = v97;
    *(float64x2_t *)&v176[8] = v99;
    *(double *)v176 = v98;
    v177 = v100;
    v178 = v101;
    *(double *)&v179 = v142 * v20 + v27 + v138;
    BYTE8(v179) = 1;
    v143 = v141 - v39 - v82;
    v144 = v87 - v88;
    v145 = v93 - v94;
    LOBYTE(v146) = 1;
    v168 = v134;
    v170 = v129;
    v169 = v15;
    v171 = v12;
    v172 = v5;
    v173 = v4;
    v174 = v43;
    *(double *)v166 = v59;
    *(double *)&v166[1] = v13;
    *(double *)&v166[2] = v14;
    v167 = v43;
    LOBYTE(v157) = 0;
    v164 = 0;
    if (*((_BYTE *)a4 + 56))
    {
      v105 = a4[1];
      v157 = *a4;
      v158 = (std::__shared_weak_count *)v105;
      if (v105)
      {
        v106 = (unint64_t *)&v105->f64[1];
        do
          v107 = __ldxr(v106);
        while (__stxr(v107 + 1, v106));
      }
      v108 = a4[3];
      v159 = a4[2];
      v160 = (std::__shared_weak_count *)v108;
      if (v108)
      {
        v109 = (unint64_t *)&v108->f64[1];
        do
          v110 = __ldxr(v109);
        while (__stxr(v110 + 1, v109));
      }
      v111 = a4[5];
      v161 = a4[4];
      v162 = (std::__shared_weak_count *)v111;
      if (v111)
      {
        v112 = (unint64_t *)&v111->f64[1];
        do
          v113 = __ldxr(v112);
        while (__stxr(v113 + 1, v112));
      }
      v163 = *((_BYTE *)a4 + 48);
      v164 = 1;
    }
    v114 = *(_QWORD *)(v7 + 13392);
    if (!v114)
      sub_20E86D37C();
    (*(void (**)(uint64_t, _OWORD *, float64x2_t *, double *, float64x2_t *, _QWORD *, uint64_t, float64x2_t **))(*(_QWORD *)v114 + 48))(v114, v149, &v175, &v143, &v168, v166, a3, &v157);
    if (v164)
    {
      v115 = v162;
      if (v162)
      {
        p_shared_owners = (unint64_t *)&v162->__shared_owners_;
        do
          v117 = __ldaxr(p_shared_owners);
        while (__stlxr(v117 - 1, p_shared_owners));
        if (!v117)
        {
          ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
          std::__shared_weak_count::__release_weak(v115);
        }
      }
      v118 = v160;
      if (v160)
      {
        v119 = (unint64_t *)&v160->__shared_owners_;
        do
          v120 = __ldaxr(v119);
        while (__stlxr(v120 - 1, v119));
        if (!v120)
        {
          ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
          std::__shared_weak_count::__release_weak(v118);
        }
      }
      v121 = v158;
      if (v158)
      {
        v122 = (unint64_t *)&v158->__shared_owners_;
        do
          v123 = __ldaxr(v122);
        while (__stlxr(v123 - 1, v122));
        if (!v123)
        {
          ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
          std::__shared_weak_count::__release_weak(v121);
        }
      }
    }
    if (v153)
      std::__shared_weak_count::__release_weak(v153);
    v78 = v151;
    if (v151)
LABEL_71:
      std::__shared_weak_count::__release_weak(v78);
  }
  else
  {
    v61 = *(_OWORD *)(a2 + 16);
    v175 = *(float64x2_t *)a2;
    *(_OWORD *)v176 = v61;
    v62 = *(double *)(a2 + 40);
    *(_QWORD *)&v176[16] = *(_QWORD *)(a2 + 32);
    v177 = v62;
    if (v62 != 0.0)
    {
      v63 = (unint64_t *)(*(_QWORD *)&v62 + 16);
      do
        v64 = __ldxr(v63);
      while (__stxr(v64 + 1, v63));
    }
    v65 = *(double *)(a2 + 56);
    v178.f64[0] = *(float64_t *)(a2 + 48);
    v178.f64[1] = v65;
    if (v65 != 0.0)
    {
      v66 = (unint64_t *)(*(_QWORD *)&v65 + 16);
      do
        v67 = __ldxr(v66);
      while (__stxr(v67 + 1, v66));
    }
    v179 = *(_OWORD *)(a2 + 64);
    LOBYTE(v168.f64[0]) = 0;
    v174 = 0;
    LOBYTE(v166[0]) = 0;
    v167 = 0;
    LOBYTE(v157) = 0;
    v165 = 0;
    v156[0] = 0;
    v156[24] = 0;
    LOBYTE(v149[0]) = 0;
    v155 = 0;
    LOBYTE(v143) = 0;
    v148 = 0;
    v68 = *(_QWORD *)(v7 + 13392);
    if (!v68)
      sub_20E86D37C();
    (*(void (**)(uint64_t, float64x2_t *, float64x2_t *, _QWORD *, float64x2_t **, _BYTE *, _OWORD *, double *))(*(_QWORD *)v68 + 48))(v68, &v175, &v168, v166, &v157, v156, v149, &v143);
    if (v148)
    {
      v69 = v147;
      if (v147)
      {
        v70 = (unint64_t *)&v147->__shared_owners_;
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
          std::__shared_weak_count::__release_weak(v69);
        }
      }
      v72 = v146;
      if (v146)
      {
        v73 = (unint64_t *)&v146->__shared_owners_;
        do
          v74 = __ldaxr(v73);
        while (__stlxr(v74 - 1, v73));
        if (!v74)
        {
          ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
          std::__shared_weak_count::__release_weak(v72);
        }
      }
      v75 = *(std::__shared_weak_count **)&v144;
      if (v144 != 0.0)
      {
        v76 = (unint64_t *)(*(_QWORD *)&v144 + 8);
        do
          v77 = __ldaxr(v76);
        while (__stlxr(v77 - 1, v76));
        if (!v77)
        {
          ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
          std::__shared_weak_count::__release_weak(v75);
        }
      }
    }
    if (*(_QWORD *)&v178.f64[1])
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v178.f64[1]);
    v78 = *(std::__shared_weak_count **)&v177;
    if (v177 != 0.0)
      goto LABEL_71;
  }
}

void sub_20E9BB4D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,std::__shared_weak_count *a48,uint64_t a49,std::__shared_weak_count *a50,uint64_t a51,std::__shared_weak_count *a52,uint64_t a53,char a54)
{
  uint64_t v54;
  unint64_t *p_shared_owners;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  std::__shared_weak_count *v63;

  if (a54)
  {
    if (a52)
    {
      p_shared_owners = (unint64_t *)&a52->__shared_owners_;
      do
        v57 = __ldaxr(p_shared_owners);
      while (__stlxr(v57 - 1, p_shared_owners));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))a52->__on_zero_shared)(a52);
        std::__shared_weak_count::__release_weak(a52);
      }
    }
    if (a50)
    {
      v58 = (unint64_t *)&a50->__shared_owners_;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))a50->__on_zero_shared)(a50);
        std::__shared_weak_count::__release_weak(a50);
      }
    }
    if (a48)
    {
      v60 = (unint64_t *)&a48->__shared_owners_;
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))a48->__on_zero_shared)(a48);
        std::__shared_weak_count::__release_weak(a48);
      }
    }
  }
  v62 = *(std::__shared_weak_count **)(v54 - 152);
  if (v62)
    std::__shared_weak_count::__release_weak(v62);
  v63 = *(std::__shared_weak_count **)(v54 - 168);
  if (v63)
    std::__shared_weak_count::__release_weak(v63);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9BB674(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d9applecv3d26VIOEngineAndPosePredictionC1ERKNS0_32VIOEngineAndPosePredictionConfigERKNS_3vio1"
                     "1calibration14HardwareParamsEONSt3__18functionIFvNS5_8cv_types13WeakFrameDataIhEENSA_8optionalINSA_"
                     "5arrayIdLm9EEEEENSF_INSG_IdLm3EEEEESI_SK_RKNSF_INSC_14InertialStateTIdLj9EEEEENSF_INS5_15odometry_e"
                     "ngine11VIOMetadataEEEEEEONSB_IFvRKNSA_6vectorINS5_4math17Point3DHomogenousIdEENSA_9allocatorISZ_EEE"
                     "ERKNSW_IyNS10_IyEEEERKNSW_IdNS10_IdEEEEdEEES1F_ONSB_IFvRKSH_dEEEONSB_IFvNSQ_19OdometryEngineErrorEd"
                     "EEEONSB_IFvdRKNSA_13unordered_mapINS_3esn6random4UUIDEN3cva15SE3GroupStorageIdNS1T_6MatrixIdLj4ELj4"
                     "ELb1EEEEENSA_4hashIS1S_EENSA_8equal_toIS1S_EENS10_INSA_4pairIKS1S_S1X_EEEEEEEEEONSB_IFvNS5_8metadat"
                     "a32VIOEngineNodeRelocalizationEventEEEEONSB_IFvhRKNSW_IhNS10_IhEEEES2K_EEERNS_3kit11concurrency21No"
                     "deTaskSchedulerPoolEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d9applecv3d26VIOEngineAndPosePredictionC1ERKNS0_32VIOEngineAndPosePredictionConfig"
                                "ERKNS_3vio11calibration14HardwareParamsEONSt3__18functionIFvNS5_8cv_types13WeakFrameData"
                                "IhEENSA_8optionalINSA_5arrayIdLm9EEEEENSF_INSG_IdLm3EEEEESI_SK_RKNSF_INSC_14InertialStat"
                                "eTIdLj9EEEEENSF_INS5_15odometry_engine11VIOMetadataEEEEEEONSB_IFvRKNSA_6vectorINS5_4math"
                                "17Point3DHomogenousIdEENSA_9allocatorISZ_EEEERKNSW_IyNS10_IyEEEERKNSW_IdNS10_IdEEEEdEEES"
                                "1F_ONSB_IFvRKSH_dEEEONSB_IFvNSQ_19OdometryEngineErrorEdEEEONSB_IFvdRKNSA_13unordered_map"
                                "INS_3esn6random4UUIDEN3cva15SE3GroupStorageIdNS1T_6MatrixIdLj4ELj4ELb1EEEEENSA_4hashIS1S"
                                "_EENSA_8equal_toIS1S_EENS10_INSA_4pairIKS1S_S1X_EEEEEEEEEONSB_IFvNS5_8metadata32VIOEngin"
                                "eNodeRelocalizationEventEEEEONSB_IFvhRKNSW_IhNS10_IhEEEES2K_EEERNS_3kit11concurrency21No"
                                "deTaskSchedulerPoolEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d9applecv3d26VIOEngineAndPosePredictionC1ERKNS0_32VIOEngineAndPosePredictionConfigERKNS_3vio11calibration14HardwareParamsEONSt3__18functionIFvNS5_8cv_types13WeakFrameDataIhEENSA_8optionalINSA_5arrayIdLm9EEEEENSF_INSG_IdLm3EEEEESI_SK_RKNSF_INSC_14InertialStateTIdLj9EEEEENSF_INS5_15odometry_engine11VIOMetadataEEEEEEONSB_IFvRKNSA_6vectorINS5_4math17Point3DHomogenousIdEENSA_9allocatorISZ_EEEERKNSW_IyNS10_IyEEEERKNSW_IdNS10_IdEEEEdEEES1F_ONSB_IFvRKSH_dEEEONSB_IFvNSQ_19OdometryEngineErrorEdEEEONSB_IFvdRKNSA_13unordered_mapINS_3esn6random4UUIDEN3cva15SE3GroupStorageIdNS1T_6MatrixIdLj4ELj4ELb1EEEEENSA_4hashIS1S_EENSA_8equal_toIS1S_EENS10_INSA_4pairIKS1S_S1X_EEEEEEEEEONSB_IFvNS5_8metadata32VIOEngineNodeRelocalizationEventEEEEONSB_IFvhRKNSW_IhNS10_IhEEEES2K_EEERNS_3kit11concurrency21NodeTaskSchedulerPoolEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d9applecv3d26VIOEngineAndPosePredictionC1ERKNS0_32VIOEngineAndPosePredictionConfigERKNS_3vio11calibration14HardwareParamsEONSt3__18functionIFvNS5_8cv_types13WeakFrameDataIhEENSA_8optionalINSA_5arrayIdLm9EEEEENSF_INSG_IdLm3EEEEESI_SK_RKNSF_INSC_14InertialStateTIdLj9EEEEENSF_INS5_15odometry_engine11VIOMetadataEEEEEEONSB_IFvRKNSA_6vectorINS5_4math17Point3DHomogenousIdEENSA_9allocatorISZ_EEEERKNSW_IyNS10_IyEEEERKNSW_IdNS10_IdEEEEdEEES1F_ONSB_IFvRKSH_dEEEONSB_IFvNSQ_19OdometryEngineErrorEdEEEONSB_IFvdRKNSA_13unordered_mapINS_3esn6random4UUIDEN3cva15SE3GroupStorageIdNS1T_6MatrixIdLj4ELj4ELb1EEEEENSA_4hashIS1S_EENSA_8equal_toIS1S_EENS10_INSA_4pairIKS1S_S1X_EEEEEEEEEONSB_IFvNS5_8metadata32VIOEngineNodeRelocalizationEventEEEEONSB_IFvhRKNSW_IhNS10_IhEEEES2K_EEERNS_3kit11concurrency21NodeTaskSchedulerPoolEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E9BB6E0()
{
  return &unk_24C9B5E08;
}

void sub_20E9BB6F0()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20E9BB704(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9B5E28;
  result[1] = v3;
  return result;
}

uint64_t sub_20E9BB738(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9B5E28;
  a2[1] = v2;
  return result;
}

void sub_20E9BB754(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  std::mutex *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  double v36;
  double v37;
  double v38;
  __int128 v39;
  double v40;
  double v41;
  double v42;
  double v43;
  int v44;
  uint64_t v45;
  float64x2_t v47;
  double v48;
  float64x2_t v49;
  double v50;
  double v52;
  double v53;
  double v54;
  double v55;
  float64x2_t v56;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  _QWORD *v71;
  uint64_t v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  _QWORD *v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  float v117;
  double v118;
  float v119;
  double v120;
  float v121;
  __int128 v122;
  double v123;
  float v124;
  __int128 v125;
  double v126;
  float v127;
  __int128 v128;
  double v129;
  char *v130;
  std::__shared_weak_count *v131;
  char *v132;
  std::__shared_weak_count *v133;
  uint64_t v134;
  __int128 v135[2];
  uint64_t v136;
  char *v137;
  __int128 v138;
  uint64_t v139;
  __int128 v140;
  uint64_t v141;
  __int128 v142;
  uint64_t v143;
  char v144;
  __int128 v145;
  uint64_t v146;
  __int128 v147;
  uint64_t v148;
  __int128 v149;
  uint64_t v150;
  char v151;
  __int128 v152;
  uint64_t v153;
  __int128 v154;
  uint64_t v155;
  char v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  char v161;
  _OWORD v162[2];
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  char v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  int v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  char v180;
  uint64_t v181;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)a2;
  if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(_QWORD *)(v3 + 13512) - *(_QWORD *)(v3 + 13504)) >> 6) >= 2)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 13160) + 56) + 168) + 760;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, a2);
  }
  if (*(_BYTE *)(v3 + 9264))
  {
    v6 = *(_QWORD *)(*(_QWORD *)(v3 + 13184) + 72);
    v7 = operator new(0x50uLL);
    v7[1] = 0;
    v7[2] = 0;
    *v7 = &off_24C9B0848;
    v8 = *(_QWORD *)(a2 + 8);
    v7[3] = *(_QWORD *)a2;
    v7[4] = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = *(_QWORD *)(a2 + 24);
    v7[5] = *(_QWORD *)(a2 + 16);
    v7[6] = v11;
    if (v11)
    {
      v12 = (unint64_t *)(v11 + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    v14 = *(_QWORD *)(a2 + 40);
    v7[7] = *(_QWORD *)(a2 + 32);
    v7[8] = v14;
    if (v14)
    {
      v15 = (unint64_t *)(v14 + 8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    *((_BYTE *)v7 + 72) = *(_BYTE *)(a2 + 48);
    v137 = (char *)(v7 + 3);
    *(_QWORD *)&v138 = v7;
    (*(void (**)(uint64_t, char **))(*(_QWORD *)(v6 + 88) + 16))(v6 + 88, &v137);
    v17 = (std::__shared_weak_count *)v138;
    if ((_QWORD)v138)
    {
      v18 = (unint64_t *)(v138 + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  sub_20EAF8900(*(_QWORD *)(v3 + 13120), a2);
  v20 = *(_QWORD *)(v3 + 13152);
  std::mutex::lock((std::mutex *)(v20 + 8));
  sub_20E9BC310(v20 + 72, (uint64_t *)a2);
  std::mutex::unlock((std::mutex *)(v20 + 8));
  v21 = *(uint64_t **)(v3 + 13152);
  v22 = (std::mutex *)(v21 + 1);
  std::mutex::lock((std::mutex *)(v21 + 1));
  v23 = *v21;
  v24 = *(_QWORD *)a2;
  v25 = *(_QWORD *)(a2 + 32);
  v26 = *(std::__shared_weak_count **)(a2 + 40);
  v134 = v25;
  *(_QWORD *)&v135[0] = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldxr(p_shared_owners);
    while (__stxr(v28 + 1, p_shared_owners));
  }
  sub_20F3E82C0((uint64_t)&v137, v24, (uint64_t)&v134);
  (*(void (**)(uint64_t, char **))(*(_QWORD *)v23 + 48))(v23, &v137);
  if (v26)
  {
    v29 = (unint64_t *)&v26->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  std::mutex::unlock(v22);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 13128) + 72) + 88) + 16))(*(_QWORD *)(*(_QWORD *)(v3 + 13128) + 72) + 88, v4 + 4128);
  v31 = *(_QWORD *)(*(_QWORD *)(v3 + 13176) + 72);
  v32 = *(_QWORD *)(v4 + 392);
  v137 = *(char **)(v4 + 376);
  *(_QWORD *)&v138 = v32;
  (*(void (**)(uint64_t, char **))(*(_QWORD *)(v31 + 88) + 16))(v31 + 88, &v137);
  v33 = *(_QWORD *)(v3 + 13136);
  if (v33)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v33 + 96) + 592) + 16))(*(_QWORD *)(v33 + 96) + 592, v4);
  v34 = *(_QWORD *)(*(_QWORD *)(v4 + 776) + 24 * *(unsigned int *)(v3 + 15960))
      + 216 * *(unsigned int *)(v3 + 15964);
  v36 = *(double *)(v34 + 48);
  v35 = *(double *)(v34 + 56);
  v38 = *(double *)(v34 + 64);
  v37 = *(double *)(v34 + 72);
  *(_QWORD *)&v39 = *(_QWORD *)v34;
  *((_QWORD *)&v39 + 1) = *(_QWORD *)(v34 + 24);
  v128 = v39;
  *(_QWORD *)&v39 = *(_QWORD *)(v34 + 8);
  *((_QWORD *)&v39 + 1) = *(_QWORD *)(v34 + 32);
  v125 = v39;
  *(_QWORD *)&v39 = *(_QWORD *)(v34 + 16);
  *((_QWORD *)&v39 + 1) = *(_QWORD *)(v34 + 40);
  v120 = *(double *)&v39;
  v122 = v39;
  *(_QWORD *)&v39 = *(_QWORD *)(v34 + 80);
  v40 = *(double *)(v34 + 88);
  v113 = *(double *)(v34 + 24);
  v114 = *(double *)v34;
  v41 = -(*(double *)v34 * v37 + v113 * *(double *)&v39 + v36 * v40);
  v115 = *(double *)(v34 + 32);
  v116 = *(double *)(v34 + 8);
  v42 = -(v116 * v37 + v115 * *(double *)&v39 + v35 * v40);
  v118 = *((double *)&v39 + 1);
  v43 = -(v120 * v37 + *((double *)&v39 + 1) * *(double *)&v39 + v38 * v40);
  std::mutex::lock((std::mutex *)(v3 + 13296));
  v44 = *(unsigned __int8 *)(v3 + 13288);
  *(double *)(v3 + 13208) = v36;
  *(_OWORD *)(v3 + 13192) = v128;
  *(double *)(v3 + 13216) = v41;
  *(double *)(v3 + 13240) = v35;
  *(_OWORD *)(v3 + 13224) = v125;
  *(double *)(v3 + 13248) = v42;
  *(double *)(v3 + 13272) = v38;
  *(_OWORD *)(v3 + 13256) = v122;
  *(double *)(v3 + 13280) = v43;
  if (v44)
  {
    std::mutex::unlock((std::mutex *)(v3 + 13296));
    v45 = *(_QWORD *)(v3 + 16048);
    if (!v45)
      return;
  }
  else
  {
    *(_BYTE *)(v3 + 13288) = 1;
    std::mutex::unlock((std::mutex *)(v3 + 13296));
    v45 = *(_QWORD *)(v3 + 16048);
    if (!v45)
      return;
  }
  _Q6.f64[0] = *(float64_t *)(v4 + 64);
  v47 = *(float64x2_t *)(v4 + 48);
  v48 = *(double *)(v4 + 88);
  v49 = *(float64x2_t *)(v4 + 72);
  v50 = *(double *)(v4 + 112);
  _Q5 = *(float64x2_t *)(v4 + 96);
  v52 = *(double *)(v4 + 208);
  v53 = v114 * _Q6.f64[0];
  v54 = v116 * _Q6.f64[0];
  v55 = v120 * _Q6.f64[0];
  _Q6.f64[1] = v48;
  v56 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v47, (int64x2_t)v49), *(double *)(v4 + 192)), (float64x2_t)vzip2q_s64((int64x2_t)v47, (int64x2_t)v49), *(float64x2_t *)(v4 + 192), 1), _Q6, v52);
  _D16 = *(_QWORD *)(v4 + 200);
  __asm { FMLA            D6, D16, V5.D[1] }
  _Q6.f64[0] = _Q6.f64[0] + v50 * v52;
  v112 = v36 * _Q5.f64[0] + v113 * v49.f64[0] + v114 * v47.f64[0];
  v123 = vmuld_lane_f64(v36, _Q5, 1) + vmuld_lane_f64(v113, v49, 1) + vmuld_lane_f64(v114, v47, 1);
  v126 = v113 * v48 + v36 * v50 + v53;
  v129 = v41 - v114 * v56.f64[0] - v36 * _Q6.f64[0] - vmuld_lane_f64(v113, v56, 1);
  v62 = v35 * _Q5.f64[0] + v115 * v49.f64[0] + v116 * v47.f64[0];
  v63 = vmuld_lane_f64(v35, _Q5, 1) + vmuld_lane_f64(v115, v49, 1) + vmuld_lane_f64(v116, v47, 1);
  v64 = v115 * v48 + v35 * v50 + v54;
  v65 = v42 - v116 * v56.f64[0] - v35 * _Q6.f64[0] - vmuld_lane_f64(v115, v56, 1);
  v66 = v43;
  v67 = v118 * v49.f64[0] + v38 * _Q5.f64[0] + v120 * v47.f64[0];
  v68 = vmuld_lane_f64(v118, v49, 1) + vmuld_lane_f64(v38, _Q5, 1) + vmuld_lane_f64(v120, v47, 1);
  v69 = v118 * v48 + v38 * v50 + v55;
  v70 = v66 - v38 * _Q6.f64[0] - v120 * v56.f64[0] - vmuld_lane_f64(v118, v56, 1);
  v71 = operator new(0x60uLL);
  v71[1] = 0;
  v71[2] = 0;
  *v71 = &off_24C9B3068;
  v72 = *(_QWORD *)(v4 + 32);
  v73 = v112;
  v74 = v62;
  v119 = v73;
  *((float *)v71 + 8) = v73;
  *((float *)v71 + 9) = v74;
  v117 = v74;
  v75 = v67;
  *((float *)v71 + 10) = v75;
  *((_DWORD *)v71 + 11) = 0;
  v76 = v123;
  v77 = v63;
  v124 = v76;
  *((float *)v71 + 12) = v76;
  *((float *)v71 + 13) = v77;
  v121 = v77;
  v78 = v68;
  *((float *)v71 + 14) = v78;
  *((_DWORD *)v71 + 15) = 0;
  v79 = v126;
  v80 = v64;
  v127 = v79;
  *((float *)v71 + 16) = v79;
  *((float *)v71 + 17) = v80;
  *(float *)&v67 = v69;
  *((_DWORD *)v71 + 18) = LODWORD(v67);
  *((_DWORD *)v71 + 19) = 0;
  *(float *)&v64 = v129;
  v81 = v65;
  *((_DWORD *)v71 + 20) = LODWORD(v64);
  *((float *)v71 + 21) = v81;
  v82 = v70;
  *((float *)v71 + 22) = v82;
  *((_DWORD *)v71 + 23) = 1065353216;
  v71[3] = v72;
  v132 = (char *)(v71 + 3);
  v133 = (std::__shared_weak_count *)v71;
  (*(void (**)(uint64_t, char **))(*(_QWORD *)(*(_QWORD *)(v45 + 656) + 88) + 16))(*(_QWORD *)(v45 + 656) + 88, &v132);
  if (*(unsigned __int8 *)(v4 + 368) <= 2u && *(unsigned __int8 *)(v4 + 624) | *(unsigned __int8 *)(v4 + 704))
  {
    LOBYTE(v134) = *(_BYTE *)(v4 + 368);
    sub_20E960080((uint64_t)v135, (__int128 *)(v4 + 376));
    v136 = *(_QWORD *)(v4 + 20);
    v137 = *(char **)(v4 + 32);
    sub_20E969484((uint64_t)&v138, (_BYTE *)(v4 + 552));
    *(_QWORD *)&v157 = __PAIR64__(LODWORD(v117), LODWORD(v119));
    *((_QWORD *)&v157 + 1) = LODWORD(v75);
    *(_QWORD *)&v158 = __PAIR64__(LODWORD(v121), LODWORD(v124));
    *((_QWORD *)&v158 + 1) = LODWORD(v78);
    *(_QWORD *)&v159 = __PAIR64__(LODWORD(v80), LODWORD(v127));
    *((float *)&v159 + 2) = v69;
    HIDWORD(v159) = 0;
    *(float *)&v160 = v129;
    *((float *)&v160 + 1) = v81;
    v161 = v134;
    *((_QWORD *)&v160 + 1) = LODWORD(v82) | 0x3F80000000000000;
    sub_20E960080((uint64_t)v162, v135);
    v181 = v136;
    v83 = (char *)operator new(0x1F8uLL);
    *((_QWORD *)v83 + 1) = 0;
    *((_QWORD *)v83 + 2) = 0;
    *(_QWORD *)v83 = &off_24C9B5EA8;
    *((_QWORD *)v83 + 3) = v137;
    v83[32] = 0;
    v83[104] = 0;
    if (v144)
    {
      *((_QWORD *)v83 + 6) = v139;
      v84 = v143;
      *((_QWORD *)v83 + 9) = v141;
      *((_OWORD *)v83 + 2) = v138;
      v139 = 0;
      v138 = 0uLL;
      *(_OWORD *)(v83 + 56) = v140;
      v140 = 0uLL;
      *((_OWORD *)v83 + 5) = v142;
      *((_QWORD *)v83 + 12) = v84;
      v141 = 0;
      v142 = 0uLL;
      v143 = 0;
      v83[104] = 1;
    }
    v83[112] = 0;
    v83[184] = 0;
    if (v151)
    {
      *((_QWORD *)v83 + 16) = v146;
      v85 = v150;
      *((_QWORD *)v83 + 19) = v148;
      *((_OWORD *)v83 + 7) = v145;
      v145 = 0uLL;
      *(_OWORD *)(v83 + 136) = v147;
      v146 = 0;
      v147 = 0uLL;
      v148 = 0;
      *((_OWORD *)v83 + 10) = v149;
      *((_QWORD *)v83 + 22) = v85;
      v150 = 0;
      v149 = 0uLL;
      v83[184] = 1;
    }
    v83[192] = 0;
    v83[240] = 0;
    if (v156)
    {
      *((_OWORD *)v83 + 12) = v152;
      *((_QWORD *)v83 + 26) = v153;
      v152 = 0uLL;
      *(_OWORD *)(v83 + 216) = v154;
      *((_QWORD *)v83 + 29) = v155;
      v153 = 0;
      v154 = 0uLL;
      v155 = 0;
      v83[240] = 1;
    }
    v86 = v158;
    *(_OWORD *)(v83 + 248) = v157;
    v87 = v159;
    v88 = v160;
    *(_OWORD *)(v83 + 264) = v86;
    *(_OWORD *)(v83 + 280) = v87;
    *(_OWORD *)(v83 + 296) = v88;
    v83[312] = v161;
    v89 = v162[1];
    *((_OWORD *)v83 + 20) = v162[0];
    *((_OWORD *)v83 + 21) = v89;
    v90 = v164;
    v91 = v165;
    *((_QWORD *)v83 + 44) = v163;
    *((_QWORD *)v83 + 45) = v90;
    v164 = 0;
    v165 = 0;
    v92 = v166;
    v93 = v167;
    *((_QWORD *)v83 + 46) = v91;
    *((_QWORD *)v83 + 47) = v92;
    *((_QWORD *)v83 + 48) = v93;
    *((_DWORD *)v83 + 98) = v168;
    if (v93)
    {
      v94 = *(_QWORD *)(v92 + 8);
      if ((v91 & (v91 - 1)) != 0)
      {
        if (v94 >= v91)
          v94 %= v91;
      }
      else
      {
        v94 &= v91 - 1;
      }
      *(_QWORD *)(v90 + 8 * v94) = v83 + 376;
      v166 = 0;
      v167 = 0;
    }
    v83[400] = v169;
    v95 = v170;
    v96 = v171;
    v171 = 0;
    v170 = 0;
    *((_QWORD *)v83 + 51) = v95;
    *((_QWORD *)v83 + 52) = v96;
    v97 = v172;
    v98 = v173;
    *((_QWORD *)v83 + 53) = v172;
    *((_QWORD *)v83 + 54) = v98;
    *((_DWORD *)v83 + 110) = v174;
    if (v98)
    {
      v99 = *(_QWORD *)(v97 + 8);
      if ((v96 & (v96 - 1)) != 0)
      {
        if (v99 >= v96)
          v99 %= v96;
      }
      else
      {
        v99 &= v96 - 1;
      }
      *(_QWORD *)(v95 + 8 * v99) = v83 + 424;
      v172 = 0;
      v173 = 0;
    }
    v100 = v175;
    v101 = v176;
    v176 = 0;
    v175 = 0;
    *((_QWORD *)v83 + 56) = v100;
    *((_QWORD *)v83 + 57) = v101;
    v102 = v177;
    v103 = v178;
    *((_QWORD *)v83 + 58) = v177;
    *((_QWORD *)v83 + 59) = v103;
    *((_DWORD *)v83 + 120) = v179;
    if (v103)
    {
      v104 = *(_QWORD *)(v102 + 8);
      if ((v101 & (v101 - 1)) != 0)
      {
        if (v104 >= v101)
          v104 %= v101;
      }
      else
      {
        v104 &= v101 - 1;
      }
      *(_QWORD *)(v100 + 8 * v104) = v83 + 464;
      v177 = 0;
      v178 = 0;
    }
    v83[488] = v180;
    *((_QWORD *)v83 + 62) = v181;
    v130 = v83 + 24;
    v131 = (std::__shared_weak_count *)v83;
    sub_20E91E748(v162);
    sub_20E91E690((uint64_t)&v138);
    sub_20E91E748(v135);
    (*(void (**)(uint64_t, char **))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16048) + 176) + 88) + 16))(*(_QWORD *)(*(_QWORD *)(v3 + 16048) + 176) + 88, &v130);
  }
  else
  {
    v130 = 0;
    v131 = 0;
  }
  if (*(_BYTE *)(v3 + 8))
  {
    v105 = (_QWORD *)(*(_QWORD *)(v3 + 16048) + 24);
    v137 = *(char **)(v3 + 16048);
    sub_20E96C5C4(v105);
  }
  v106 = v131;
  if (v131)
  {
    v107 = (unint64_t *)&v131->__shared_owners_;
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  v109 = v133;
  if (v133)
  {
    v110 = (unint64_t *)&v133->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
}

void sub_20E9BC1A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,std::__shared_weak_count *a33)
{
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  unint64_t *p_shared_owners;
  unint64_t v38;

  sub_20E91E748(v35);
  sub_20E91E690(v33);
  sub_20E91E748(v34);
  if (a33)
  {
    p_shared_owners = (unint64_t *)&a33->__shared_owners_;
    do
      v38 = __ldaxr(p_shared_owners);
    while (__stlxr(v38 - 1, p_shared_owners));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))a33->__on_zero_shared)(a33);
      std::__shared_weak_count::__release_weak(a33);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20E9BC27C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::mutex *v34;

  sub_20E86665C((uint64_t)&a34);
  std::mutex::unlock(v34);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9BC298(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d9applecv3d26VIOEngineAndPosePredictionC1ERKNS0_32VIOEngineAndPosePredictionConfigERKNS_3vio1"
                     "1calibration14HardwareParamsEONSt3__18functionIFvNS5_8cv_types13WeakFrameDataIhEENSA_8optionalINSA_"
                     "5arrayIdLm9EEEEENSF_INSG_IdLm3EEEEESI_SK_RKNSF_INSC_14InertialStateTIdLj9EEEEENSF_INS5_15odometry_e"
                     "ngine11VIOMetadataEEEEEEONSB_IFvRKNSA_6vectorINS5_4math17Point3DHomogenousIdEENSA_9allocatorISZ_EEE"
                     "ERKNSW_IyNS10_IyEEEERKNSW_IdNS10_IdEEEEdEEES1F_ONSB_IFvRKSH_dEEEONSB_IFvNSQ_19OdometryEngineErrorEd"
                     "EEEONSB_IFvdRKNSA_13unordered_mapINS_3esn6random4UUIDEN3cva15SE3GroupStorageIdNS1T_6MatrixIdLj4ELj4"
                     "ELb1EEEEENSA_4hashIS1S_EENSA_8equal_toIS1S_EENS10_INSA_4pairIKS1S_S1X_EEEEEEEEEONSB_IFvNS5_8metadat"
                     "a32VIOEngineNodeRelocalizationEventEEEEONSB_IFvhRKNSW_IhNS10_IhEEEES2K_EEERNS_3kit11concurrency21No"
                     "deTaskSchedulerPoolEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d9applecv3d26VIOEngineAndPosePredictionC1ERKNS0_32VIOEngineAndPosePredictionConfig"
                                "ERKNS_3vio11calibration14HardwareParamsEONSt3__18functionIFvNS5_8cv_types13WeakFrameData"
                                "IhEENSA_8optionalINSA_5arrayIdLm9EEEEENSF_INSG_IdLm3EEEEESI_SK_RKNSF_INSC_14InertialStat"
                                "eTIdLj9EEEEENSF_INS5_15odometry_engine11VIOMetadataEEEEEEONSB_IFvRKNSA_6vectorINS5_4math"
                                "17Point3DHomogenousIdEENSA_9allocatorISZ_EEEERKNSW_IyNS10_IyEEEERKNSW_IdNS10_IdEEEEdEEES"
                                "1F_ONSB_IFvRKSH_dEEEONSB_IFvNSQ_19OdometryEngineErrorEdEEEONSB_IFvdRKNSA_13unordered_map"
                                "INS_3esn6random4UUIDEN3cva15SE3GroupStorageIdNS1T_6MatrixIdLj4ELj4ELb1EEEEENSA_4hashIS1S"
                                "_EENSA_8equal_toIS1S_EENS10_INSA_4pairIKS1S_S1X_EEEEEEEEEONSB_IFvNS5_8metadata32VIOEngin"
                                "eNodeRelocalizationEventEEEEONSB_IFvhRKNSW_IhNS10_IhEEEES2K_EEERNS_3kit11concurrency21No"
                                "deTaskSchedulerPoolEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d9applecv3d26VIOEngineAndPosePredictionC1ERKNS0_32VIOEngineAndPosePredictionConfigERKNS_3vio11calibration14HardwareParamsEONSt3__18functionIFvNS5_8cv_types13WeakFrameDataIhEENSA_8optionalINSA_5arrayIdLm9EEEEENSF_INSG_IdLm3EEEEESI_SK_RKNSF_INSC_14InertialStateTIdLj9EEEEENSF_INS5_15odometry_engine11VIOMetadataEEEEEEONSB_IFvRKNSA_6vectorINS5_4math17Point3DHomogenousIdEENSA_9allocatorISZ_EEEERKNSW_IyNS10_IyEEEERKNSW_IdNS10_IdEEEEdEEES1F_ONSB_IFvRKSH_dEEEONSB_IFvNSQ_19OdometryEngineErrorEdEEEONSB_IFvdRKNSA_13unordered_mapINS_3esn6random4UUIDEN3cva15SE3GroupStorageIdNS1T_6MatrixIdLj4ELj4ELb1EEEEENSA_4hashIS1S_EENSA_8equal_toIS1S_EENS10_INSA_4pairIKS1S_S1X_EEEEEEEEEONSB_IFvNS5_8metadata32VIOEngineNodeRelocalizationEventEEEEONSB_IFvhRKNSW_IhNS10_IhEEEES2K_EEERNS_3kit11concurrency21NodeTaskSchedulerPoolEE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d9applecv3d26VIOEngineAndPosePredictionC1ERKNS0_32VIOEngineAndPosePredictionConfigERKNS_3vio11calibration14HardwareParamsEONSt3__18functionIFvNS5_8cv_types13WeakFrameDataIhEENSA_8optionalINSA_5arrayIdLm9EEEEENSF_INSG_IdLm3EEEEESI_SK_RKNSF_INSC_14InertialStateTIdLj9EEEEENSF_INS5_15odometry_engine11VIOMetadataEEEEEEONSB_IFvRKNSA_6vectorINS5_4math17Point3DHomogenousIdEENSA_9allocatorISZ_EEEERKNSW_IyNS10_IyEEEERKNSW_IdNS10_IdEEEEdEEES1F_ONSB_IFvRKSH_dEEEONSB_IFvNSQ_19OdometryEngineErrorEdEEEONSB_IFvdRKNSA_13unordered_mapINS_3esn6random4UUIDEN3cva15SE3GroupStorageIdNS1T_6MatrixIdLj4ELj4ELb1EEEEENSA_4hashIS1S_EENSA_8equal_toIS1S_EENS10_INSA_4pairIKS1S_S1X_EEEEEEEEEONSB_IFvNS5_8metadata32VIOEngineNodeRelocalizationEventEEEEONSB_IFvhRKNSW_IhNS10_IhEEEES2K_EEERNS_3kit11concurrency21NodeTaskSchedulerPoolEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E9BC304()
{
  return &unk_24C9B5EE8;
}

uint64_t sub_20E9BC310(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;

  v5 = *a2;
  v4 = a2[1];
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *(std::__shared_weak_count **)(a1 + 8);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v4;
  if (!v8)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v12 = a2[2];
    v11 = a2[3];
    if (!v11)
      goto LABEL_11;
  }
  else
  {
LABEL_8:
    v12 = a2[2];
    v11 = a2[3];
    if (!v11)
      goto LABEL_11;
  }
  v13 = (unint64_t *)(v11 + 8);
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
LABEL_11:
  v15 = *(std::__shared_weak_count **)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 24) = v11;
  if (!v15)
    goto LABEL_15;
  v16 = (unint64_t *)&v15->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    v19 = a2[4];
    v18 = a2[5];
    if (!v18)
      goto LABEL_18;
  }
  else
  {
LABEL_15:
    v19 = a2[4];
    v18 = a2[5];
    if (!v18)
      goto LABEL_18;
  }
  v20 = (unint64_t *)(v18 + 8);
  do
    v21 = __ldxr(v20);
  while (__stxr(v21 + 1, v20));
LABEL_18:
  v22 = *(std::__shared_weak_count **)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v19;
  *(_QWORD *)(a1 + 40) = v18;
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  return a1;
}

void sub_20E9BC464(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B5EA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20E9BC474(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B5EA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E9BC4A4(uint64_t a1)
{
  sub_20E91E748((_QWORD *)(a1 + 320));
  return sub_20E91E690(a1 + 32);
}

void sub_20E9BC4D4()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20E9BC4E8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9B5F08;
  result[1] = v3;
  return result;
}

uint64_t sub_20E9BC51C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9B5F08;
  a2[1] = v2;
  return result;
}

uint64_t sub_20E9BC538(uint64_t a1, char *a2)
{
  uint64_t v2;
  char v4;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 13424);
  v4 = *a2;
  if (!v2)
    sub_20E86D37C();
  return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v2 + 48))(v2, &v4);
}

uint64_t sub_20E9BC578(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d9applecv3d26VIOEngineAndPosePredictionC1ERKNS0_32VIOEngineAndPosePredictionConfigERKNS_3vio1"
                     "1calibration14HardwareParamsEONSt3__18functionIFvNS5_8cv_types13WeakFrameDataIhEENSA_8optionalINSA_"
                     "5arrayIdLm9EEEEENSF_INSG_IdLm3EEEEESI_SK_RKNSF_INSC_14InertialStateTIdLj9EEEEENSF_INS5_15odometry_e"
                     "ngine11VIOMetadataEEEEEEONSB_IFvRKNSA_6vectorINS5_4math17Point3DHomogenousIdEENSA_9allocatorISZ_EEE"
                     "ERKNSW_IyNS10_IyEEEERKNSW_IdNS10_IdEEEEdEEES1F_ONSB_IFvRKSH_dEEEONSB_IFvNSQ_19OdometryEngineErrorEd"
                     "EEEONSB_IFvdRKNSA_13unordered_mapINS_3esn6random4UUIDEN3cva15SE3GroupStorageIdNS1T_6MatrixIdLj4ELj4"
                     "ELb1EEEEENSA_4hashIS1S_EENSA_8equal_toIS1S_EENS10_INSA_4pairIKS1S_S1X_EEEEEEEEEONSB_IFvNS5_8metadat"
                     "a32VIOEngineNodeRelocalizationEventEEEEONSB_IFvhRKNSW_IhNS10_IhEEEES2K_EEERNS_3kit11concurrency21No"
                     "deTaskSchedulerPoolEE3$_2")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d9applecv3d26VIOEngineAndPosePredictionC1ERKNS0_32VIOEngineAndPosePredictionConfig"
                                "ERKNS_3vio11calibration14HardwareParamsEONSt3__18functionIFvNS5_8cv_types13WeakFrameData"
                                "IhEENSA_8optionalINSA_5arrayIdLm9EEEEENSF_INSG_IdLm3EEEEESI_SK_RKNSF_INSC_14InertialStat"
                                "eTIdLj9EEEEENSF_INS5_15odometry_engine11VIOMetadataEEEEEEONSB_IFvRKNSA_6vectorINS5_4math"
                                "17Point3DHomogenousIdEENSA_9allocatorISZ_EEEERKNSW_IyNS10_IyEEEERKNSW_IdNS10_IdEEEEdEEES"
                                "1F_ONSB_IFvRKSH_dEEEONSB_IFvNSQ_19OdometryEngineErrorEdEEEONSB_IFvdRKNSA_13unordered_map"
                                "INS_3esn6random4UUIDEN3cva15SE3GroupStorageIdNS1T_6MatrixIdLj4ELj4ELb1EEEEENSA_4hashIS1S"
                                "_EENSA_8equal_toIS1S_EENS10_INSA_4pairIKS1S_S1X_EEEEEEEEEONSB_IFvNS5_8metadata32VIOEngin"
                                "eNodeRelocalizationEventEEEEONSB_IFvhRKNSW_IhNS10_IhEEEES2K_EEERNS_3kit11concurrency21No"
                                "deTaskSchedulerPoolEE3$_2" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d9applecv3d26VIOEngineAndPosePredictionC1ERKNS0_32VIOEngineAndPosePredictionConfigERKNS_3vio11calibration14HardwareParamsEONSt3__18functionIFvNS5_8cv_types13WeakFrameDataIhEENSA_8optionalINSA_5arrayIdLm9EEEEENSF_INSG_IdLm3EEEEESI_SK_RKNSF_INSC_14InertialStateTIdLj9EEEEENSF_INS5_15odometry_engine11VIOMetadataEEEEEEONSB_IFvRKNSA_6vectorINS5_4math17Point3DHomogenousIdEENSA_9allocatorISZ_EEEERKNSW_IyNS10_IyEEEERKNSW_IdNS10_IdEEEEdEEES1F_ONSB_IFvRKSH_dEEEONSB_IFvNSQ_19OdometryEngineErrorEdEEEONSB_IFvdRKNSA_13unordered_mapINS_3esn6random4UUIDEN3cva15SE3GroupStorageIdNS1T_6MatrixIdLj4ELj4ELb1EEEEENSA_4hashIS1S_EENSA_8equal_toIS1S_EENS10_INSA_4pairIKS1S_S1X_EEEEEEEEEONSB_IFvNS5_8metadata32VIOEngineNodeRelocalizationEventEEEEONSB_IFvhRKNSW_IhNS10_IhEEEES2K_EEERNS_3kit11concurrency21NodeTaskSchedulerPoolEE3$_2"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d9applecv3d26VIOEngineAndPosePredictionC1ERKNS0_32VIOEngineAndPosePredictionConfigERKNS_3vio11calibration14HardwareParamsEONSt3__18functionIFvNS5_8cv_types13WeakFrameDataIhEENSA_8optionalINSA_5arrayIdLm9EEEEENSF_INSG_IdLm3EEEEESI_SK_RKNSF_INSC_14InertialStateTIdLj9EEEEENSF_INS5_15odometry_engine11VIOMetadataEEEEEEONSB_IFvRKNSA_6vectorINS5_4math17Point3DHomogenousIdEENSA_9allocatorISZ_EEEERKNSW_IyNS10_IyEEEERKNSW_IdNS10_IdEEEEdEEES1F_ONSB_IFvRKSH_dEEEONSB_IFvNSQ_19OdometryEngineErrorEdEEEONSB_IFvdRKNSA_13unordered_mapINS_3esn6random4UUIDEN3cva15SE3GroupStorageIdNS1T_6MatrixIdLj4ELj4ELb1EEEEENSA_4hashIS1S_EENSA_8equal_toIS1S_EENS10_INSA_4pairIKS1S_S1X_EEEEEEEEEONSB_IFvNS5_8metadata32VIOEngineNodeRelocalizationEventEEEEONSB_IFvhRKNSW_IhNS10_IhEEEES2K_EEERNS_3kit11concurrency21NodeTaskSchedulerPoolEE3$_2" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E9BC5E4()
{
  return &unk_24C9B5F68;
}

void sub_20E9BC5F4()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20E9BC608(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9B5F88;
  result[1] = v3;
  return result;
}

uint64_t sub_20E9BC63C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9B5F88;
  a2[1] = v2;
  return result;
}

void sub_20E9BC658(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double v3;
  char v4;
  int v5;
  uint64_t v6;
  _BYTE v7[14];
  double v8;
  char v9;
  char v10;
  _BYTE v11[14];

  if (*(_BYTE *)(a2 + 24))
  {
    v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 13120);
    v3 = *(double *)a2;
    v4 = *(_BYTE *)(a2 + 8);
    v5 = *(unsigned __int8 *)(a2 + 9);
    *(_QWORD *)v7 = *(_QWORD *)(a2 + 10);
    *(_QWORD *)&v7[6] = *(_QWORD *)(a2 + 16);
    std::mutex::lock((std::mutex *)(v2 + 160));
    if (!*(_BYTE *)(v2 + 240) || *(double *)(v2 + 232) != v3 || v5 != *(unsigned __int8 *)(v2 + 248))
    {
      v8 = v3;
      v9 = v4;
      v10 = v5;
      *(_QWORD *)v11 = *(_QWORD *)v7;
      *(_QWORD *)&v11[6] = *(_QWORD *)&v7[6];
      v6 = *(_QWORD *)(v2 + 56);
      if (!v6)
        sub_20E86D37C();
      (*(void (**)(uint64_t, double *))(*(_QWORD *)v6 + 48))(v6, &v8);
    }
    *(double *)(v2 + 232) = v3;
    *(_BYTE *)(v2 + 240) = 1;
    *(_BYTE *)(v2 + 248) = v5;
    std::mutex::unlock((std::mutex *)(v2 + 160));
  }
}

void sub_20E9BC734(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9BC748(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d9applecv3d26VIOEngineAndPosePredictionC1ERKNS0_32VIOEngineAndPosePredictionConfigERKNS_3vio1"
                     "1calibration14HardwareParamsEONSt3__18functionIFvNS5_8cv_types13WeakFrameDataIhEENSA_8optionalINSA_"
                     "5arrayIdLm9EEEEENSF_INSG_IdLm3EEEEESI_SK_RKNSF_INSC_14InertialStateTIdLj9EEEEENSF_INS5_15odometry_e"
                     "ngine11VIOMetadataEEEEEEONSB_IFvRKNSA_6vectorINS5_4math17Point3DHomogenousIdEENSA_9allocatorISZ_EEE"
                     "ERKNSW_IyNS10_IyEEEERKNSW_IdNS10_IdEEEEdEEES1F_ONSB_IFvRKSH_dEEEONSB_IFvNSQ_19OdometryEngineErrorEd"
                     "EEEONSB_IFvdRKNSA_13unordered_mapINS_3esn6random4UUIDEN3cva15SE3GroupStorageIdNS1T_6MatrixIdLj4ELj4"
                     "ELb1EEEEENSA_4hashIS1S_EENSA_8equal_toIS1S_EENS10_INSA_4pairIKS1S_S1X_EEEEEEEEEONSB_IFvNS5_8metadat"
                     "a32VIOEngineNodeRelocalizationEventEEEEONSB_IFvhRKNSW_IhNS10_IhEEEES2K_EEERNS_3kit11concurrency21No"
                     "deTaskSchedulerPoolEE3$_3")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d9applecv3d26VIOEngineAndPosePredictionC1ERKNS0_32VIOEngineAndPosePredictionConfig"
                                "ERKNS_3vio11calibration14HardwareParamsEONSt3__18functionIFvNS5_8cv_types13WeakFrameData"
                                "IhEENSA_8optionalINSA_5arrayIdLm9EEEEENSF_INSG_IdLm3EEEEESI_SK_RKNSF_INSC_14InertialStat"
                                "eTIdLj9EEEEENSF_INS5_15odometry_engine11VIOMetadataEEEEEEONSB_IFvRKNSA_6vectorINS5_4math"
                                "17Point3DHomogenousIdEENSA_9allocatorISZ_EEEERKNSW_IyNS10_IyEEEERKNSW_IdNS10_IdEEEEdEEES"
                                "1F_ONSB_IFvRKSH_dEEEONSB_IFvNSQ_19OdometryEngineErrorEdEEEONSB_IFvdRKNSA_13unordered_map"
                                "INS_3esn6random4UUIDEN3cva15SE3GroupStorageIdNS1T_6MatrixIdLj4ELj4ELb1EEEEENSA_4hashIS1S"
                                "_EENSA_8equal_toIS1S_EENS10_INSA_4pairIKS1S_S1X_EEEEEEEEEONSB_IFvNS5_8metadata32VIOEngin"
                                "eNodeRelocalizationEventEEEEONSB_IFvhRKNSW_IhNS10_IhEEEES2K_EEERNS_3kit11concurrency21No"
                                "deTaskSchedulerPoolEE3$_3" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d9applecv3d26VIOEngineAndPosePredictionC1ERKNS0_32VIOEngineAndPosePredictionConfigERKNS_3vio11calibration14HardwareParamsEONSt3__18functionIFvNS5_8cv_types13WeakFrameDataIhEENSA_8optionalINSA_5arrayIdLm9EEEEENSF_INSG_IdLm3EEEEESI_SK_RKNSF_INSC_14InertialStateTIdLj9EEEEENSF_INS5_15odometry_engine11VIOMetadataEEEEEEONSB_IFvRKNSA_6vectorINS5_4math17Point3DHomogenousIdEENSA_9allocatorISZ_EEEERKNSW_IyNS10_IyEEEERKNSW_IdNS10_IdEEEEdEEES1F_ONSB_IFvRKSH_dEEEONSB_IFvNSQ_19OdometryEngineErrorEdEEEONSB_IFvdRKNSA_13unordered_mapINS_3esn6random4UUIDEN3cva15SE3GroupStorageIdNS1T_6MatrixIdLj4ELj4ELb1EEEEENSA_4hashIS1S_EENSA_8equal_toIS1S_EENS10_INSA_4pairIKS1S_S1X_EEEEEEEEEONSB_IFvNS5_8metadata32VIOEngineNodeRelocalizationEventEEEEONSB_IFvhRKNSW_IhNS10_IhEEEES2K_EEERNS_3kit11concurrency21NodeTaskSchedulerPoolEE3$_3"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d9applecv3d26VIOEngineAndPosePredictionC1ERKNS0_32VIOEngineAndPosePredictionConfigERKNS_3vio11calibration14HardwareParamsEONSt3__18functionIFvNS5_8cv_types13WeakFrameDataIhEENSA_8optionalINSA_5arrayIdLm9EEEEENSF_INSG_IdLm3EEEEESI_SK_RKNSF_INSC_14InertialStateTIdLj9EEEEENSF_INS5_15odometry_engine11VIOMetadataEEEEEEONSB_IFvRKNSA_6vectorINS5_4math17Point3DHomogenousIdEENSA_9allocatorISZ_EEEERKNSW_IyNS10_IyEEEERKNSW_IdNS10_IdEEEEdEEES1F_ONSB_IFvRKSH_dEEEONSB_IFvNSQ_19OdometryEngineErrorEdEEEONSB_IFvdRKNSA_13unordered_mapINS_3esn6random4UUIDEN3cva15SE3GroupStorageIdNS1T_6MatrixIdLj4ELj4ELb1EEEEENSA_4hashIS1S_EENSA_8equal_toIS1S_EENS10_INSA_4pairIKS1S_S1X_EEEEEEEEEONSB_IFvNS5_8metadata32VIOEngineNodeRelocalizationEventEEEEONSB_IFvhRKNSW_IhNS10_IhEEEES2K_EEERNS_3kit11concurrency21NodeTaskSchedulerPoolEE3$_3" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E9BC7B4()
{
  return &unk_24C9B5FF8;
}

void sub_20E9BC7C4()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20E9BC7D8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9B6018;
  result[1] = v3;
  return result;
}

uint64_t sub_20E9BC80C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9B6018;
  a2[1] = v2;
  return result;
}

uint64_t sub_20E9BC828(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *a2;
  v6 = *(_QWORD *)(v4 + 16048);
  if (v6)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v6 + 576) + 1264) + 16))(*(_QWORD *)(v6 + 576) + 1264, a3);
  v9 = v5;
  v7 = *(_QWORD *)(v4 + 13456);
  if (!v7)
    sub_20E86D37C();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v7 + 48))(v7, &v9, a3);
}

uint64_t sub_20E9BC8A0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d9applecv3d26VIOEngineAndPosePredictionC1ERKNS0_32VIOEngineAndPosePredictionConfigERKNS_3vio1"
                     "1calibration14HardwareParamsEONSt3__18functionIFvNS5_8cv_types13WeakFrameDataIhEENSA_8optionalINSA_"
                     "5arrayIdLm9EEEEENSF_INSG_IdLm3EEEEESI_SK_RKNSF_INSC_14InertialStateTIdLj9EEEEENSF_INS5_15odometry_e"
                     "ngine11VIOMetadataEEEEEEONSB_IFvRKNSA_6vectorINS5_4math17Point3DHomogenousIdEENSA_9allocatorISZ_EEE"
                     "ERKNSW_IyNS10_IyEEEERKNSW_IdNS10_IdEEEEdEEES1F_ONSB_IFvRKSH_dEEEONSB_IFvNSQ_19OdometryEngineErrorEd"
                     "EEEONSB_IFvdRKNSA_13unordered_mapINS_3esn6random4UUIDEN3cva15SE3GroupStorageIdNS1T_6MatrixIdLj4ELj4"
                     "ELb1EEEEENSA_4hashIS1S_EENSA_8equal_toIS1S_EENS10_INSA_4pairIKS1S_S1X_EEEEEEEEEONSB_IFvNS5_8metadat"
                     "a32VIOEngineNodeRelocalizationEventEEEEONSB_IFvhRKNSW_IhNS10_IhEEEES2K_EEERNS_3kit11concurrency21No"
                     "deTaskSchedulerPoolEE3$_4")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d9applecv3d26VIOEngineAndPosePredictionC1ERKNS0_32VIOEngineAndPosePredictionConfig"
                                "ERKNS_3vio11calibration14HardwareParamsEONSt3__18functionIFvNS5_8cv_types13WeakFrameData"
                                "IhEENSA_8optionalINSA_5arrayIdLm9EEEEENSF_INSG_IdLm3EEEEESI_SK_RKNSF_INSC_14InertialStat"
                                "eTIdLj9EEEEENSF_INS5_15odometry_engine11VIOMetadataEEEEEEONSB_IFvRKNSA_6vectorINS5_4math"
                                "17Point3DHomogenousIdEENSA_9allocatorISZ_EEEERKNSW_IyNS10_IyEEEERKNSW_IdNS10_IdEEEEdEEES"
                                "1F_ONSB_IFvRKSH_dEEEONSB_IFvNSQ_19OdometryEngineErrorEdEEEONSB_IFvdRKNSA_13unordered_map"
                                "INS_3esn6random4UUIDEN3cva15SE3GroupStorageIdNS1T_6MatrixIdLj4ELj4ELb1EEEEENSA_4hashIS1S"
                                "_EENSA_8equal_toIS1S_EENS10_INSA_4pairIKS1S_S1X_EEEEEEEEEONSB_IFvNS5_8metadata32VIOEngin"
                                "eNodeRelocalizationEventEEEEONSB_IFvhRKNSW_IhNS10_IhEEEES2K_EEERNS_3kit11concurrency21No"
                                "deTaskSchedulerPoolEE3$_4" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d9applecv3d26VIOEngineAndPosePredictionC1ERKNS0_32VIOEngineAndPosePredictionConfigERKNS_3vio11calibration14HardwareParamsEONSt3__18functionIFvNS5_8cv_types13WeakFrameDataIhEENSA_8optionalINSA_5arrayIdLm9EEEEENSF_INSG_IdLm3EEEEESI_SK_RKNSF_INSC_14InertialStateTIdLj9EEEEENSF_INS5_15odometry_engine11VIOMetadataEEEEEEONSB_IFvRKNSA_6vectorINS5_4math17Point3DHomogenousIdEENSA_9allocatorISZ_EEEERKNSW_IyNS10_IyEEEERKNSW_IdNS10_IdEEEEdEEES1F_ONSB_IFvRKSH_dEEEONSB_IFvNSQ_19OdometryEngineErrorEdEEEONSB_IFvdRKNSA_13unordered_mapINS_3esn6random4UUIDEN3cva15SE3GroupStorageIdNS1T_6MatrixIdLj4ELj4ELb1EEEEENSA_4hashIS1S_EENSA_8equal_toIS1S_EENS10_INSA_4pairIKS1S_S1X_EEEEEEEEEONSB_IFvNS5_8metadata32VIOEngineNodeRelocalizationEventEEEEONSB_IFvhRKNSW_IhNS10_IhEEEES2K_EEERNS_3kit11concurrency21NodeTaskSchedulerPoolEE3$_4"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d9applecv3d26VIOEngineAndPosePredictionC1ERKNS0_32VIOEngineAndPosePredictionConfigERKNS_3vio11calibration14HardwareParamsEONSt3__18functionIFvNS5_8cv_types13WeakFrameDataIhEENSA_8optionalINSA_5arrayIdLm9EEEEENSF_INSG_IdLm3EEEEESI_SK_RKNSF_INSC_14InertialStateTIdLj9EEEEENSF_INS5_15odometry_engine11VIOMetadataEEEEEEONSB_IFvRKNSA_6vectorINS5_4math17Point3DHomogenousIdEENSA_9allocatorISZ_EEEERKNSW_IyNS10_IyEEEERKNSW_IdNS10_IdEEEEdEEES1F_ONSB_IFvRKSH_dEEEONSB_IFvNSQ_19OdometryEngineErrorEdEEEONSB_IFvdRKNSA_13unordered_mapINS_3esn6random4UUIDEN3cva15SE3GroupStorageIdNS1T_6MatrixIdLj4ELj4ELb1EEEEENSA_4hashIS1S_EENSA_8equal_toIS1S_EENS10_INSA_4pairIKS1S_S1X_EEEEEEEEEONSB_IFvNS5_8metadata32VIOEngineNodeRelocalizationEventEEEEONSB_IFvhRKNSW_IhNS10_IhEEEES2K_EEERNS_3kit11concurrency21NodeTaskSchedulerPoolEE3$_4" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E9BC90C()
{
  return &unk_24C9B6078;
}

void sub_20E9BC918(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B6B38;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E9BC968(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_20E9BC978(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B6AE0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E9BC9C8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20E9BC9D8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = *(void **)(a1 + 3304);
  if (v2)
  {
    *(_QWORD *)(a1 + 3312) = v2;
    operator delete(v2);
  }
  if ((*(char *)(a1 + 3159) & 0x80000000) == 0)
  {
    v3 = *(void **)(a1 + 3072);
    if (!v3)
      goto LABEL_6;
    goto LABEL_5;
  }
  operator delete(*(void **)(a1 + 3136));
  v3 = *(void **)(a1 + 3072);
  if (v3)
  {
LABEL_5:
    *(_QWORD *)(a1 + 3080) = v3;
    operator delete(v3);
  }
LABEL_6:
  v4 = *(void **)(a1 + 3040);
  if (v4)
  {
    *(_QWORD *)(a1 + 3048) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 2888);
  if (v5)
  {
    *(_QWORD *)(a1 + 2896) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 2720);
  if (v6)
  {
    *(_QWORD *)(a1 + 2728) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 2696);
  if (v7)
  {
    *(_QWORD *)(a1 + 2704) = v7;
    operator delete(v7);
  }
  if (*(char *)(a1 + 2687) < 0)
  {
    operator delete(*(void **)(a1 + 2664));
    v8 = *(void **)(a1 + 2616);
    if (!v8)
      goto LABEL_17;
    goto LABEL_16;
  }
  v8 = *(void **)(a1 + 2616);
  if (v8)
  {
LABEL_16:
    *(_QWORD *)(a1 + 2624) = v8;
    operator delete(v8);
  }
LABEL_17:
  sub_20E86A810(a1 + 8);
  return a1;
}

void sub_20E9BCAA8(_QWORD *a1)
{
  if (a1)
  {
    sub_20E9BCAA8(*a1);
    sub_20E9BCAA8(a1[1]);
    operator delete(a1);
  }
}

void sub_20E9BCAE0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B6098;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20E9BCAF0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B6098;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E9BCB20(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_20E9BCB30(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B60E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20E9BCB40(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B60E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E9BCB70(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_20E9BCB80(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B6B70;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20E9BCBC0(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9B6B70;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E9BCC10(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20E9BCC20(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 32);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_20E9BCC70(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  v2 = *(_QWORD **)(a1 + 32);
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E9BCCD0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;

  v4 = (_QWORD *)operator new();
  *v4 = &off_24C9B6138;
  v5 = v4 + 1;
  result = *(_QWORD *)(a1 + 32);
  if (!result)
    goto LABEL_4;
  if (result != a1 + 8)
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 16))(result, v5);
LABEL_4:
    v4[4] = result;
    *a2 = v4;
    return result;
  }
  v4[4] = v5;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  *a2 = v4;
  return result;
}

void sub_20E9BCD70(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10A1C400AA0B987);
  _Unwind_Resume(a1);
}

void sub_20E9BCD94()
{
  sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 274, (uint64_t)"", 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_21023DDB0);
  abort();
}

void sub_20E9BCDD0()
{
  sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 280, (uint64_t)"", 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_21023DDB0);
  abort();
}

uint64_t sub_20E9BCE0C()
{
  return 1;
}

uint64_t sub_20E9BCE18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 301, (uint64_t)"processor_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(_QWORD *)(a1 + 32);
    if (!v4)
      sub_20E86D37C();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, a2);
}

void sub_20E9BCE94()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20E9BCEA8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9B61B0;
  result[1] = v3;
  return result;
}

uint64_t sub_20E9BCEDC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9B61B0;
  a2[1] = v2;
  return result;
}

uint64_t sub_20E9BCEF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;

  v4 = *(_QWORD *)(a1 + 8);
  v2 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v2 == -1)
    sub_20E877AB8();
  v5 = &v4;
  return ((uint64_t (*)(uint64_t **))off_24C9B6220[v2])(&v5);
}

uint64_t sub_20E9BCF44(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d9applecv3d26VIOEngineAndPosePredictionC1ERKNS0_32VIOEngineAndPosePredictionConfigERKNS_3vio1"
                     "1calibration14HardwareParamsEONSt3__18functionIFvNS5_8cv_types13WeakFrameDataIhEENSA_8optionalINSA_"
                     "5arrayIdLm9EEEEENSF_INSG_IdLm3EEEEESI_SK_RKNSF_INSC_14InertialStateTIdLj9EEEEENSF_INS5_15odometry_e"
                     "ngine11VIOMetadataEEEEEEONSB_IFvRKNSA_6vectorINS5_4math17Point3DHomogenousIdEENSA_9allocatorISZ_EEE"
                     "ERKNSW_IyNS10_IyEEEERKNSW_IdNS10_IdEEEEdEEES1F_ONSB_IFvRKSH_dEEEONSB_IFvNSQ_19OdometryEngineErrorEd"
                     "EEEONSB_IFvdRKNSA_13unordered_mapINS_3esn6random4UUIDEN3cva15SE3GroupStorageIdNS1T_6MatrixIdLj4ELj4"
                     "ELb1EEEEENSA_4hashIS1S_EENSA_8equal_toIS1S_EENS10_INSA_4pairIKS1S_S1X_EEEEEEEEEONSB_IFvNS5_8metadat"
                     "a32VIOEngineNodeRelocalizationEventEEEEONSB_IFvhRKNSW_IhNS10_IhEEEES2K_EEERNS_3kit11concurrency21No"
                     "deTaskSchedulerPoolEE3$_5")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d9applecv3d26VIOEngineAndPosePredictionC1ERKNS0_32VIOEngineAndPosePredictionConfig"
                                "ERKNS_3vio11calibration14HardwareParamsEONSt3__18functionIFvNS5_8cv_types13WeakFrameData"
                                "IhEENSA_8optionalINSA_5arrayIdLm9EEEEENSF_INSG_IdLm3EEEEESI_SK_RKNSF_INSC_14InertialStat"
                                "eTIdLj9EEEEENSF_INS5_15odometry_engine11VIOMetadataEEEEEEONSB_IFvRKNSA_6vectorINS5_4math"
                                "17Point3DHomogenousIdEENSA_9allocatorISZ_EEEERKNSW_IyNS10_IyEEEERKNSW_IdNS10_IdEEEEdEEES"
                                "1F_ONSB_IFvRKSH_dEEEONSB_IFvNSQ_19OdometryEngineErrorEdEEEONSB_IFvdRKNSA_13unordered_map"
                                "INS_3esn6random4UUIDEN3cva15SE3GroupStorageIdNS1T_6MatrixIdLj4ELj4ELb1EEEEENSA_4hashIS1S"
                                "_EENSA_8equal_toIS1S_EENS10_INSA_4pairIKS1S_S1X_EEEEEEEEEONSB_IFvNS5_8metadata32VIOEngin"
                                "eNodeRelocalizationEventEEEEONSB_IFvhRKNSW_IhNS10_IhEEEES2K_EEERNS_3kit11concurrency21No"
                                "deTaskSchedulerPoolEE3$_5" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d9applecv3d26VIOEngineAndPosePredictionC1ERKNS0_32VIOEngineAndPosePredictionConfigERKNS_3vio11calibration14HardwareParamsEONSt3__18functionIFvNS5_8cv_types13WeakFrameDataIhEENSA_8optionalINSA_5arrayIdLm9EEEEENSF_INSG_IdLm3EEEEESI_SK_RKNSF_INSC_14InertialStateTIdLj9EEEEENSF_INS5_15odometry_engine11VIOMetadataEEEEEEONSB_IFvRKNSA_6vectorINS5_4math17Point3DHomogenousIdEENSA_9allocatorISZ_EEEERKNSW_IyNS10_IyEEEERKNSW_IdNS10_IdEEEEdEEES1F_ONSB_IFvRKSH_dEEEONSB_IFvNSQ_19OdometryEngineErrorEdEEEONSB_IFvdRKNSA_13unordered_mapINS_3esn6random4UUIDEN3cva15SE3GroupStorageIdNS1T_6MatrixIdLj4ELj4ELb1EEEEENSA_4hashIS1S_EENSA_8equal_toIS1S_EENS10_INSA_4pairIKS1S_S1X_EEEEEEEEEONSB_IFvNS5_8metadata32VIOEngineNodeRelocalizationEventEEEEONSB_IFvhRKNSW_IhNS10_IhEEEES2K_EEERNS_3kit11concurrency21NodeTaskSchedulerPoolEE3$_5"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d9applecv3d26VIOEngineAndPosePredictionC1ERKNS0_32VIOEngineAndPosePredictionConfigERKNS_3vio11calibration14HardwareParamsEONSt3__18functionIFvNS5_8cv_types13WeakFrameDataIhEENSA_8optionalINSA_5arrayIdLm9EEEEENSF_INSG_IdLm3EEEEESI_SK_RKNSF_INSC_14InertialStateTIdLj9EEEEENSF_INS5_15odometry_engine11VIOMetadataEEEEEEONSB_IFvRKNSA_6vectorINS5_4math17Point3DHomogenousIdEENSA_9allocatorISZ_EEEERKNSW_IyNS10_IyEEEERKNSW_IdNS10_IdEEEEdEEES1F_ONSB_IFvRKSH_dEEEONSB_IFvNSQ_19OdometryEngineErrorEdEEEONSB_IFvdRKNSA_13unordered_mapINS_3esn6random4UUIDEN3cva15SE3GroupStorageIdNS1T_6MatrixIdLj4ELj4ELb1EEEEENSA_4hashIS1S_EENSA_8equal_toIS1S_EENS10_INSA_4pairIKS1S_S1X_EEEEEEEEEONSB_IFvNS5_8metadata32VIOEngineNodeRelocalizationEventEEEEONSB_IFvhRKNSW_IhNS10_IhEEEES2K_EEERNS_3kit11concurrency21NodeTaskSchedulerPoolEE3$_5" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E9BCFB0()
{
  return &unk_24C9B6238;
}

uint64_t sub_20E9BCFBC(uint64_t **a1, uint64_t a2)
{
  double v2;
  uint64_t v3;
  int v4;
  int v5;
  unint64_t v6;
  unint64_t v8;
  const char *v9;
  size_t v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  const char *v13;
  size_t v14;
  _BYTE *v15;
  int v16;
  const char *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[3];
  int v53;
  const char *v54;
  int v55;
  const char *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  uint64_t v59;
  _BYTE object[24];
  unint64_t v61;
  char v62;
  void *__p[2];
  unint64_t v64;
  char v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v2 = *(double *)(a2 + 32);
  v3 = **a1;
  if (*(_DWORD *)a2 < 2u)
    v4 = 10;
  else
    v4 = 11;
  sub_20E9BE08C(&v59);
  if (**(int **)(v59 + 56) > 5)
    goto LABEL_72;
  v5 = *(unsigned __int8 *)(v59 + 72);
  v6 = sub_20E8C31DC(v59, "OSLogSurrogateAppender", 1, 0);
  if (!v5 && v6 == 0)
    goto LABEL_72;
  v8 = v6;
  v52[0] = &v59;
  v52[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v52[2] = std::chrono::system_clock::now().__d_.__rep_;
  v53 = 5;
  v54 = "unknown file";
  v55 = 554;
  v57 = 0;
  v58 = 0;
  v56 = "unknown function";
  v9 = (const char *)(v59 + 16);
  v50 = v59 + 16;
  v51 = v59;
  if (*(char *)(v59 + 39) < 0)
  {
    v9 = *(const char **)(v59 + 16);
    v10 = *(_QWORD *)(v59 + 24);
    v12 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v12 & 1) != 0)
      goto LABEL_13;
  }
  else
  {
    v10 = *(unsigned __int8 *)(v59 + 39);
    v11 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v11 & 1) != 0)
      goto LABEL_13;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)object);
    if ((_BYTE)v61)
    {
      *(_OWORD *)byte_254A4A4F8 = *(_OWORD *)object;
      *(_QWORD *)&byte_254A4A4F8[16] = *(_QWORD *)&object[16];
    }
    else
    {
      byte_254A4A4F8[23] = 14;
      strcpy(byte_254A4A4F8, "com.apple.cv3d");
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_13:
  if (byte_254A4A4F8[23] >= 0)
    v13 = byte_254A4A4F8;
  else
    v13 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v14 = byte_254A4A4F8[23];
  else
    v14 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)object = os_log_create(v13, v9);
  v15 = &object[8];
  if (v14 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v14 >= 0x17)
  {
    v16 = v4;
    v17 = v9;
    v18 = v5;
    v19 = v3;
    v20 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v20 = v14 | 7;
    v21 = v20 + 1;
    v15 = operator new(v20 + 1);
    *(_QWORD *)&object[16] = v14;
    v61 = v21 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v15;
    v3 = v19;
    v5 = v18;
    v9 = v17;
    v4 = v16;
    goto LABEL_26;
  }
  HIBYTE(v61) = v14;
  if (v14)
LABEL_26:
    memmove(v15, v13, v14);
  v15[v14] = 0;
  v62 = 1;
  v22 = __p;
  if (v10 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v10 >= 0x17)
  {
    v24 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v24 = v10 | 7;
    v25 = v24 + 1;
    v22 = operator new(v24 + 1);
    __p[1] = (void *)v10;
    v64 = v25 | 0x8000000000000000;
    __p[0] = v22;
  }
  else
  {
    HIBYTE(v64) = v10;
    if (!v10)
    {
      LOBYTE(__p[0]) = 0;
      v65 = 1;
      v23 = *(NSObject **)object;
      if ((SHIBYTE(v64) & 0x80000000) == 0)
        goto LABEL_31;
      goto LABEL_37;
    }
  }
  memmove(v22, v9, v10);
  *((_BYTE *)v22 + v10) = 0;
  v65 = 1;
  v23 = *(NSObject **)object;
  if ((SHIBYTE(v64) & 0x80000000) == 0)
  {
LABEL_31:
    if (!v62)
      goto LABEL_40;
LABEL_38:
    if (SHIBYTE(v61) < 0)
      operator delete(*(void **)&object[8]);
    goto LABEL_40;
  }
LABEL_37:
  operator delete(__p[0]);
  if (v62)
    goto LABEL_38;
LABEL_40:
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  if (v8 && *(_QWORD *)(v8 + 24))
  {
    v26 = _os_log_pack_size();
    v27 = (std::__shared_weak_count_vtbl *)operator new(v26, (std::align_val_t)8uLL);
    v28 = (std::__shared_weak_count *)operator new();
    v29 = v28;
    v28->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    v28->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v28->__shared_weak_owners_ = 0;
    v28[1].__vftable = v27;
    do
      v31 = __ldxr(p_shared_owners);
    while (__stxr(v31 + 1, p_shared_owners));
    do
      v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v29);
    }
    v33 = _os_log_pack_fill();
    *(_DWORD *)v33 = 67109376;
    *(_DWORD *)(v33 + 4) = v4;
    *(_WORD *)(v33 + 8) = 2048;
    *(double *)(v33 + 10) = v2;
    v34 = operator new();
    v35 = *(unsigned __int8 *)(v51 + 39);
    v36 = v50;
    if ((v35 & 0x80u) != 0)
    {
      v36 = *(_QWORD *)(v51 + 16);
      v35 = *(_QWORD *)(v51 + 24);
    }
    *(_QWORD *)v34 = v27;
    *(_QWORD *)(v34 + 8) = v27;
    *(_QWORD *)(v34 + 16) = v29;
    *(_QWORD *)(v34 + 24) = 0;
    *(_QWORD *)(v34 + 32) = 0;
    *(_QWORD *)(v34 + 40) = v36;
    *(_QWORD *)(v34 + 48) = v35;
    *(_BYTE *)(v34 + 56) = 16;
    *(_QWORD *)object = v34;
    (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v8 + 24) + 40))(*(_QWORD *)(v8 + 24), object);
    v37 = *(_QWORD *)object;
    *(_QWORD *)object = 0;
    if (v37)
    {
      v38 = *(std::__shared_weak_count **)(v37 + 32);
      if (v38)
      {
        v39 = (unint64_t *)&v38->__shared_owners_;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      v41 = *(std::__shared_weak_count **)(v37 + 16);
      if (v41)
      {
        v42 = (unint64_t *)&v41->__shared_owners_;
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      MEMORY[0x212BC6398](v37, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);
    *(_DWORD *)object = 67109376;
    *(_DWORD *)&object[4] = v4;
    *(_WORD *)&object[8] = 2048;
    *(double *)&object[10] = v2;
    v44 = (void *)_os_log_send_and_compose_impl();
    if (v44)
      free(v44);
  }
  if (v5)
  {
    sub_20E8C003C((uint64_t)v52, "VIO received error %d at timestamp %f", v4, v2);
    sub_20E863570((uint64_t)v52);
  }
  sub_20E863570((uint64_t)v52);
  v45 = v58;
  if (v58)
  {
    v46 = (unint64_t *)&v58->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
LABEL_72:
  LODWORD(v52[0]) = v4;
  *(double *)object = v2;
  v48 = *(_QWORD *)(v3 + 13488);
  if (!v48)
    sub_20E86D37C();
  return (*(uint64_t (**)(uint64_t, _QWORD *, _BYTE *))(*(_QWORD *)v48 + 48))(v48, v52, object);
}

void sub_20E9BD634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,void *object,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;

  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863570((uint64_t)&a13);
  v31 = a21;
  if (a21)
  {
    p_shared_owners = (unint64_t *)&a21->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20E9BD7E8(uint64_t **a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  unint64_t v6;
  unint64_t v8;
  uint64_t v9;
  const char *v10;
  size_t v11;
  unsigned __int8 v12;
  const char *v13;
  size_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  size_t v23;
  std::__shared_weak_count_vtbl *v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  void *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const char *__src;
  _QWORD v51[3];
  int v52;
  const char *v53;
  int v54;
  const char *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  _BYTE object[24];
  unint64_t v60;
  char v61;
  void *__p[2];
  unint64_t v63;
  char v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v2 = *(_DWORD *)(a2 + 16);
  v3 = **a1;
  if (v2)
  {
    if (v2 != 2 && v2 != 1)
    {
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/VIOEngineAndPosePrediction.cpp", 192, (uint64_t)"", 0, (uint64_t)"Unexpected JasperFrameSelectorErrorType value.", 46, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    v4 = 15;
  }
  else
  {
    v4 = 16;
  }
  sub_20E9BE08C(&v58);
  if (**(int **)(v58 + 56) <= 5)
  {
    v5 = *(unsigned __int8 *)(v58 + 72);
    v6 = sub_20E8C31DC(v58, "OSLogSurrogateAppender", 1, 0);
    if (v5 || v6 != 0)
    {
      v8 = v6;
      v51[0] = &v58;
      v51[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v51[2] = std::chrono::system_clock::now().__d_.__rep_;
      v52 = 5;
      v53 = "unknown file";
      v54 = 554;
      v56 = 0;
      v57 = 0;
      v55 = "unknown function";
      v9 = v58;
      v10 = (const char *)(v58 + 16);
      v48 = v58 + 16;
      if (*(char *)(v58 + 39) < 0)
      {
        v10 = *(const char **)(v58 + 16);
        v11 = *(_QWORD *)(v58 + 24);
      }
      else
      {
        v11 = *(unsigned __int8 *)(v58 + 39);
      }
      v49 = v3;
      v12 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)object);
        if ((_BYTE)v60)
        {
          *(_OWORD *)byte_254A4A4F8 = *(_OWORD *)object;
          *(_QWORD *)&byte_254A4A4F8[16] = *(_QWORD *)&object[16];
        }
        else
        {
          byte_254A4A4F8[23] = 14;
          strcpy(byte_254A4A4F8, "com.apple.cv3d");
        }
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v13 = byte_254A4A4F8;
      else
        v13 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v14 = byte_254A4A4F8[23];
      else
        v14 = *(_QWORD *)&byte_254A4A4F8[8];
      __src = v10;
      *(_QWORD *)object = os_log_create(v13, v10);
      v15 = &object[8];
      if (v14 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v14 >= 0x17)
      {
        v47 = v8;
        v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v14 | 7) != 0x17)
          v16 = v14 | 7;
        v17 = v16 + 1;
        v15 = operator new(v16 + 1);
        *(_QWORD *)&object[16] = v14;
        v60 = v17 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v15;
        v8 = v47;
      }
      else
      {
        HIBYTE(v60) = v14;
        if (!v14)
        {
LABEL_29:
          v15[v14] = 0;
          v61 = 1;
          v18 = __p;
          if (v11 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v11 >= 0x17)
          {
            v20 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v11 | 7) != 0x17)
              v20 = v11 | 7;
            v21 = v20 + 1;
            v18 = operator new(v20 + 1);
            __p[1] = (void *)v11;
            v63 = v21 | 0x8000000000000000;
            __p[0] = v18;
          }
          else
          {
            HIBYTE(v63) = v11;
            if (!v11)
            {
              LOBYTE(__p[0]) = 0;
              v64 = 1;
              v19 = *(NSObject **)object;
              if ((SHIBYTE(v63) & 0x80000000) == 0)
                goto LABEL_33;
              goto LABEL_39;
            }
          }
          memmove(v18, __src, v11);
          *((_BYTE *)v18 + v11) = 0;
          v64 = 1;
          v19 = *(NSObject **)object;
          if ((SHIBYTE(v63) & 0x80000000) == 0)
          {
LABEL_33:
            if (!v61)
              goto LABEL_42;
            goto LABEL_40;
          }
LABEL_39:
          operator delete(__p[0]);
          if (!v61)
          {
LABEL_42:
            if (*(_QWORD *)object)
              os_release(*(void **)object);
            if (v8 && *(_QWORD *)(v8 + 24))
            {
              v22 = v5;
              v23 = _os_log_pack_size();
              v24 = (std::__shared_weak_count_vtbl *)operator new(v23, (std::align_val_t)8uLL);
              v25 = (std::__shared_weak_count *)operator new();
              v26 = v25;
              v25->__shared_owners_ = 0;
              p_shared_owners = (unint64_t *)&v25->__shared_owners_;
              v25->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v25->__shared_weak_owners_ = 0;
              v25[1].__vftable = v24;
              do
                v28 = __ldxr(p_shared_owners);
              while (__stxr(v28 + 1, p_shared_owners));
              do
                v29 = __ldaxr(p_shared_owners);
              while (__stlxr(v29 - 1, p_shared_owners));
              if (!v29)
              {
                ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
                std::__shared_weak_count::__release_weak(v26);
              }
              v30 = _os_log_pack_fill();
              *(_DWORD *)v30 = 67109376;
              *(_DWORD *)(v30 + 4) = v4;
              *(_WORD *)(v30 + 8) = 2048;
              *(_QWORD *)(v30 + 10) = 0;
              v31 = operator new();
              v32 = *(unsigned __int8 *)(v9 + 39);
              v33 = v48;
              if ((v32 & 0x80u) != 0)
              {
                v33 = *(_QWORD *)(v9 + 16);
                v32 = *(_QWORD *)(v9 + 24);
              }
              *(_QWORD *)v31 = v24;
              *(_QWORD *)(v31 + 8) = v24;
              *(_QWORD *)(v31 + 16) = v26;
              *(_QWORD *)(v31 + 24) = 0;
              *(_QWORD *)(v31 + 32) = 0;
              *(_QWORD *)(v31 + 40) = v33;
              *(_QWORD *)(v31 + 48) = v32;
              *(_BYTE *)(v31 + 56) = 16;
              *(_QWORD *)object = v31;
              (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v8 + 24) + 40))(*(_QWORD *)(v8 + 24), object);
              v34 = *(_QWORD *)object;
              *(_QWORD *)object = 0;
              v5 = v22;
              if (v34)
              {
                v35 = *(std::__shared_weak_count **)(v34 + 32);
                if (v35)
                {
                  v36 = (unint64_t *)&v35->__shared_owners_;
                  do
                    v37 = __ldaxr(v36);
                  while (__stlxr(v37 - 1, v36));
                  if (!v37)
                  {
                    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
                    std::__shared_weak_count::__release_weak(v35);
                  }
                }
                v38 = *(std::__shared_weak_count **)(v34 + 16);
                if (v38)
                {
                  v39 = (unint64_t *)&v38->__shared_owners_;
                  do
                    v40 = __ldaxr(v39);
                  while (__stlxr(v40 - 1, v39));
                  if (!v40)
                  {
                    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
                    std::__shared_weak_count::__release_weak(v38);
                  }
                }
                MEMORY[0x212BC6398](v34, 0x10F0C40B62ED6C6);
              }
            }
            else
            {
              os_log_type_enabled(v19, OS_LOG_TYPE_ERROR);
              *(_DWORD *)object = 67109376;
              *(_DWORD *)&object[4] = v4;
              *(_WORD *)&object[8] = 2048;
              *(_QWORD *)&object[10] = 0;
              v41 = (void *)_os_log_send_and_compose_impl();
              if (v41)
                free(v41);
            }
            if (v5)
            {
              sub_20E8C003C((uint64_t)v51, "VIO received error %d at timestamp %f", v4, 0.0);
              sub_20E863570((uint64_t)v51);
            }
            sub_20E863570((uint64_t)v51);
            v42 = v57;
            if (v57)
            {
              v43 = (unint64_t *)&v57->__shared_owners_;
              do
                v44 = __ldaxr(v43);
              while (__stlxr(v44 - 1, v43));
              if (!v44)
              {
                ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                std::__shared_weak_count::__release_weak(v42);
              }
            }
            v3 = v49;
            goto LABEL_75;
          }
LABEL_40:
          if (SHIBYTE(v60) < 0)
            operator delete(*(void **)&object[8]);
          goto LABEL_42;
        }
      }
      memmove(v15, v13, v14);
      goto LABEL_29;
    }
  }
LABEL_75:
  LODWORD(v51[0]) = v4;
  *(_QWORD *)object = 0;
  v45 = *(_QWORD *)(v3 + 13488);
  if (!v45)
    sub_20E86D37C();
  return (*(uint64_t (**)(uint64_t, _QWORD *, _BYTE *))(*(_QWORD *)v45 + 48))(v45, v51, object);
}

void sub_20E9BDE9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,void *object,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;

  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863570((uint64_t)&a17);
  v35 = a25;
  if (a25)
  {
    p_shared_owners = (unint64_t *)&a25->__shared_owners_;
    do
      v37 = __ldaxr(p_shared_owners);
    while (__stlxr(v37 - 1, p_shared_owners));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20E9BE050()
{
  sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/VIOEngineAndPosePrediction.cpp", 197, (uint64_t)"", 0, (uint64_t)"Unexpected error value.", 23, (void (*)(void **))sub_21023DDB0);
  abort();
}

void sub_20E9BE08C(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5AC78);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5AC78))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3dapi.applecv3d");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A5AC70);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A5AC78);
  }
  *a1 = qword_254A5AC70;
}

void sub_20E9BE128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5AC78);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5AC78);
  _Unwind_Resume(a1);
}

void sub_20E9BE184()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20E9BE198(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9B6258;
  result[1] = v3;
  return result;
}

uint64_t sub_20E9BE1CC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9B6258;
  a2[1] = v2;
  return result;
}

uint64_t sub_20E9BE1EC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d9applecv3d26VIOEngineAndPosePredictionC1ERKNS0_32VIOEngineAndPosePredictionConfigERKNS_3vio1"
                     "1calibration14HardwareParamsEONSt3__18functionIFvNS5_8cv_types13WeakFrameDataIhEENSA_8optionalINSA_"
                     "5arrayIdLm9EEEEENSF_INSG_IdLm3EEEEESI_SK_RKNSF_INSC_14InertialStateTIdLj9EEEEENSF_INS5_15odometry_e"
                     "ngine11VIOMetadataEEEEEEONSB_IFvRKNSA_6vectorINS5_4math17Point3DHomogenousIdEENSA_9allocatorISZ_EEE"
                     "ERKNSW_IyNS10_IyEEEERKNSW_IdNS10_IdEEEEdEEES1F_ONSB_IFvRKSH_dEEEONSB_IFvNSQ_19OdometryEngineErrorEd"
                     "EEEONSB_IFvdRKNSA_13unordered_mapINS_3esn6random4UUIDEN3cva15SE3GroupStorageIdNS1T_6MatrixIdLj4ELj4"
                     "ELb1EEEEENSA_4hashIS1S_EENSA_8equal_toIS1S_EENS10_INSA_4pairIKS1S_S1X_EEEEEEEEEONSB_IFvNS5_8metadat"
                     "a32VIOEngineNodeRelocalizationEventEEEEONSB_IFvhRKNSW_IhNS10_IhEEEES2K_EEERNS_3kit11concurrency21No"
                     "deTaskSchedulerPoolEE3$_6")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d9applecv3d26VIOEngineAndPosePredictionC1ERKNS0_32VIOEngineAndPosePredictionConfig"
                                "ERKNS_3vio11calibration14HardwareParamsEONSt3__18functionIFvNS5_8cv_types13WeakFrameData"
                                "IhEENSA_8optionalINSA_5arrayIdLm9EEEEENSF_INSG_IdLm3EEEEESI_SK_RKNSF_INSC_14InertialStat"
                                "eTIdLj9EEEEENSF_INS5_15odometry_engine11VIOMetadataEEEEEEONSB_IFvRKNSA_6vectorINS5_4math"
                                "17Point3DHomogenousIdEENSA_9allocatorISZ_EEEERKNSW_IyNS10_IyEEEERKNSW_IdNS10_IdEEEEdEEES"
                                "1F_ONSB_IFvRKSH_dEEEONSB_IFvNSQ_19OdometryEngineErrorEdEEEONSB_IFvdRKNSA_13unordered_map"
                                "INS_3esn6random4UUIDEN3cva15SE3GroupStorageIdNS1T_6MatrixIdLj4ELj4ELb1EEEEENSA_4hashIS1S"
                                "_EENSA_8equal_toIS1S_EENS10_INSA_4pairIKS1S_S1X_EEEEEEEEEONSB_IFvNS5_8metadata32VIOEngin"
                                "eNodeRelocalizationEventEEEEONSB_IFvhRKNSW_IhNS10_IhEEEES2K_EEERNS_3kit11concurrency21No"
                                "deTaskSchedulerPoolEE3$_6" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d9applecv3d26VIOEngineAndPosePredictionC1ERKNS0_32VIOEngineAndPosePredictionConfigERKNS_3vio11calibration14HardwareParamsEONSt3__18functionIFvNS5_8cv_types13WeakFrameDataIhEENSA_8optionalINSA_5arrayIdLm9EEEEENSF_INSG_IdLm3EEEEESI_SK_RKNSF_INSC_14InertialStateTIdLj9EEEEENSF_INS5_15odometry_engine11VIOMetadataEEEEEEONSB_IFvRKNSA_6vectorINS5_4math17Point3DHomogenousIdEENSA_9allocatorISZ_EEEERKNSW_IyNS10_IyEEEERKNSW_IdNS10_IdEEEEdEEES1F_ONSB_IFvRKSH_dEEEONSB_IFvNSQ_19OdometryEngineErrorEdEEEONSB_IFvdRKNSA_13unordered_mapINS_3esn6random4UUIDEN3cva15SE3GroupStorageIdNS1T_6MatrixIdLj4ELj4ELb1EEEEENSA_4hashIS1S_EENSA_8equal_toIS1S_EENS10_INSA_4pairIKS1S_S1X_EEEEEEEEEONSB_IFvNS5_8metadata32VIOEngineNodeRelocalizationEventEEEEONSB_IFvhRKNSW_IhNS10_IhEEEES2K_EEERNS_3kit11concurrency21NodeTaskSchedulerPoolEE3$_6"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d9applecv3d26VIOEngineAndPosePredictionC1ERKNS0_32VIOEngineAndPosePredictionConfigERKNS_3vio11calibration14HardwareParamsEONSt3__18functionIFvNS5_8cv_types13WeakFrameDataIhEENSA_8optionalINSA_5arrayIdLm9EEEEENSF_INSG_IdLm3EEEEESI_SK_RKNSF_INSC_14InertialStateTIdLj9EEEEENSF_INS5_15odometry_engine11VIOMetadataEEEEEEONSB_IFvRKNSA_6vectorINS5_4math17Point3DHomogenousIdEENSA_9allocatorISZ_EEEERKNSW_IyNS10_IyEEEERKNSW_IdNS10_IdEEEEdEEES1F_ONSB_IFvRKSH_dEEEONSB_IFvNSQ_19OdometryEngineErrorEdEEEONSB_IFvdRKNSA_13unordered_mapINS_3esn6random4UUIDEN3cva15SE3GroupStorageIdNS1T_6MatrixIdLj4ELj4ELb1EEEEENSA_4hashIS1S_EENSA_8equal_toIS1S_EENS10_INSA_4pairIKS1S_S1X_EEEEEEEEEONSB_IFvNS5_8metadata32VIOEngineNodeRelocalizationEventEEEEONSB_IFvhRKNSW_IhNS10_IhEEEES2K_EEERNS_3kit11concurrency21NodeTaskSchedulerPoolEE3$_6" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E9BE258()
{
  return &unk_24C9B62B8;
}

uint64_t sub_20E9BE264(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 32);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_20E9BE2B4(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  v2 = *(_QWORD **)(a1 + 32);
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E9BE314@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;

  v4 = (_QWORD *)operator new();
  *v4 = &off_24C9B62D8;
  v5 = v4 + 1;
  result = *(_QWORD *)(a1 + 32);
  if (!result)
    goto LABEL_4;
  if (result != a1 + 8)
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 16))(result, v5);
LABEL_4:
    v4[4] = result;
    *a2 = v4;
    return result;
  }
  v4[4] = v5;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  *a2 = v4;
  return result;
}

void sub_20E9BE3B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10A1C400AA0B987);
  _Unwind_Resume(a1);
}

void sub_20E9BE3D8()
{
  sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 274, (uint64_t)"", 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_21023DDB0);
  abort();
}

void sub_20E9BE414()
{
  sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 280, (uint64_t)"", 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_21023DDB0);
  abort();
}

uint64_t sub_20E9BE450()
{
  return 1;
}

uint64_t sub_20E9BE45C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 301, (uint64_t)"processor_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(_QWORD *)(a1 + 32);
    if (!v4)
      sub_20E86D37C();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, a2);
}

void sub_20E9BE4D8()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20E9BE4EC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9B6340;
  result[1] = v3;
  return result;
}

uint64_t sub_20E9BE520(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9B6340;
  a2[1] = v2;
  return result;
}

_QWORD *sub_20E9BE53C(_QWORD *result, uint64_t **a2)
{
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t *v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(result[1] + 13112);
  v3 = atomic_load((unsigned __int8 *)(v2 + 136));
  if ((v3 & 1) == 0)
    return result;
  std::mutex::lock((std::mutex *)(v2 + 32));
  if (*(_BYTE *)(v2 + 24))
  {
    if ((uint64_t **)v2 != a2)
      sub_20E9BE81C(v2, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
    std::mutex::unlock((std::mutex *)(v2 + 32));
    v5 = *a2;
    if (*a2 != a2[1])
    {
LABEL_6:
      v6 = *v5;
      if (*v5 == v5[1])
        goto LABEL_11;
      goto LABEL_13;
    }
  }
  else
  {
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 16) = 0;
    sub_20E9BFAE0(v2, (uint64_t)*a2, (uint64_t)a2[1], 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
    *(_BYTE *)(v2 + 24) = 1;
    std::mutex::unlock((std::mutex *)(v2 + 32));
    v5 = *a2;
    if (*a2 != a2[1])
      goto LABEL_6;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/src/NodeCameraSystemFeatures.cpp", 39, (uint64_t)"!camera_set_features_.empty()", 29, (uint64_t)&unk_2102C5146, 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_19;
  }
  v5 = *a2;
  v6 = **a2;
  if (v6 == (*a2)[1])
  {
LABEL_11:
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/src/NodeCameraSetFeatures.cpp", 77, (uint64_t)"!sequence_camera_stream_features_.empty()", 41, (uint64_t)&unk_2102C50BE, 0, (void (*)(void **))sub_21023DDB0))
    {
      v6 = *v5;
      goto LABEL_13;
    }
LABEL_19:
    abort();
  }
LABEL_13:
  v7 = *(double *)(v6 + 8) + *(double *)(v6 + 16);
  v9[0] = &off_24C9B63C0;
  v9[1] = v2;
  *(double *)&v9[2] = v7;
  v10 = v9;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)(v2 + 104) + 40))(v2 + 104, v9);
  result = v10;
  if (v10 == v9)
  {
    v8 = 4;
    result = v9;
  }
  else
  {
    if (!v10)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

void sub_20E9BE730(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20E9BE744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E9BE7A4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d9applecv3d26VIOEngineAndPosePredictionC1ERKNS0_32VIOEngineAndPosePredictionConfigERKNS_3vio1"
                     "1calibration14HardwareParamsEONSt3__18functionIFvNS5_8cv_types13WeakFrameDataIhEENSA_8optionalINSA_"
                     "5arrayIdLm9EEEEENSF_INSG_IdLm3EEEEESI_SK_RKNSF_INSC_14InertialStateTIdLj9EEEEENSF_INS5_15odometry_e"
                     "ngine11VIOMetadataEEEEEEONSB_IFvRKNSA_6vectorINS5_4math17Point3DHomogenousIdEENSA_9allocatorISZ_EEE"
                     "ERKNSW_IyNS10_IyEEEERKNSW_IdNS10_IdEEEEdEEES1F_ONSB_IFvRKSH_dEEEONSB_IFvNSQ_19OdometryEngineErrorEd"
                     "EEEONSB_IFvdRKNSA_13unordered_mapINS_3esn6random4UUIDEN3cva15SE3GroupStorageIdNS1T_6MatrixIdLj4ELj4"
                     "ELb1EEEEENSA_4hashIS1S_EENSA_8equal_toIS1S_EENS10_INSA_4pairIKS1S_S1X_EEEEEEEEEONSB_IFvNS5_8metadat"
                     "a32VIOEngineNodeRelocalizationEventEEEEONSB_IFvhRKNSW_IhNS10_IhEEEES2K_EEERNS_3kit11concurrency21No"
                     "deTaskSchedulerPoolEE3$_7")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d9applecv3d26VIOEngineAndPosePredictionC1ERKNS0_32VIOEngineAndPosePredictionConfig"
                                "ERKNS_3vio11calibration14HardwareParamsEONSt3__18functionIFvNS5_8cv_types13WeakFrameData"
                                "IhEENSA_8optionalINSA_5arrayIdLm9EEEEENSF_INSG_IdLm3EEEEESI_SK_RKNSF_INSC_14InertialStat"
                                "eTIdLj9EEEEENSF_INS5_15odometry_engine11VIOMetadataEEEEEEONSB_IFvRKNSA_6vectorINS5_4math"
                                "17Point3DHomogenousIdEENSA_9allocatorISZ_EEEERKNSW_IyNS10_IyEEEERKNSW_IdNS10_IdEEEEdEEES"
                                "1F_ONSB_IFvRKSH_dEEEONSB_IFvNSQ_19OdometryEngineErrorEdEEEONSB_IFvdRKNSA_13unordered_map"
                                "INS_3esn6random4UUIDEN3cva15SE3GroupStorageIdNS1T_6MatrixIdLj4ELj4ELb1EEEEENSA_4hashIS1S"
                                "_EENSA_8equal_toIS1S_EENS10_INSA_4pairIKS1S_S1X_EEEEEEEEEONSB_IFvNS5_8metadata32VIOEngin"
                                "eNodeRelocalizationEventEEEEONSB_IFvhRKNSW_IhNS10_IhEEEES2K_EEERNS_3kit11concurrency21No"
                                "deTaskSchedulerPoolEE3$_7" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d9applecv3d26VIOEngineAndPosePredictionC1ERKNS0_32VIOEngineAndPosePredictionConfigERKNS_3vio11calibration14HardwareParamsEONSt3__18functionIFvNS5_8cv_types13WeakFrameDataIhEENSA_8optionalINSA_5arrayIdLm9EEEEENSF_INSG_IdLm3EEEEESI_SK_RKNSF_INSC_14InertialStateTIdLj9EEEEENSF_INS5_15odometry_engine11VIOMetadataEEEEEEONSB_IFvRKNSA_6vectorINS5_4math17Point3DHomogenousIdEENSA_9allocatorISZ_EEEERKNSW_IyNS10_IyEEEERKNSW_IdNS10_IdEEEEdEEES1F_ONSB_IFvRKSH_dEEEONSB_IFvNSQ_19OdometryEngineErrorEdEEEONSB_IFvdRKNSA_13unordered_mapINS_3esn6random4UUIDEN3cva15SE3GroupStorageIdNS1T_6MatrixIdLj4ELj4ELb1EEEEENSA_4hashIS1S_EENSA_8equal_toIS1S_EENS10_INSA_4pairIKS1S_S1X_EEEEEEEEEONSB_IFvNS5_8metadata32VIOEngineNodeRelocalizationEventEEEEONSB_IFvhRKNSW_IhNS10_IhEEEES2K_EEERNS_3kit11concurrency21NodeTaskSchedulerPoolEE3$_7"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d9applecv3d26VIOEngineAndPosePredictionC1ERKNS0_32VIOEngineAndPosePredictionConfigERKNS_3vio11calibration14HardwareParamsEONSt3__18functionIFvNS5_8cv_types13WeakFrameDataIhEENSA_8optionalINSA_5arrayIdLm9EEEEENSF_INSG_IdLm3EEEEESI_SK_RKNSF_INSC_14InertialStateTIdLj9EEEEENSF_INS5_15odometry_engine11VIOMetadataEEEEEEONSB_IFvRKNSA_6vectorINS5_4math17Point3DHomogenousIdEENSA_9allocatorISZ_EEEERKNSW_IyNS10_IyEEEERKNSW_IdNS10_IdEEEEdEEES1F_ONSB_IFvRKSH_dEEEONSB_IFvNSQ_19OdometryEngineErrorEdEEEONSB_IFvdRKNSA_13unordered_mapINS_3esn6random4UUIDEN3cva15SE3GroupStorageIdNS1T_6MatrixIdLj4ELj4ELb1EEEEENSA_4hashIS1S_EENSA_8equal_toIS1S_EENS10_INSA_4pairIKS1S_S1X_EEEEEEEEEONSB_IFvNS5_8metadata32VIOEngineNodeRelocalizationEventEEEEONSB_IFvhRKNSW_IhNS10_IhEEEES2K_EEERNS_3kit11concurrency21NodeTaskSchedulerPoolEE3$_7" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E9BE810()
{
  return &unk_24C9B6430;
}

void sub_20E9BE81C(uint64_t a1, uint64_t *a2, uint64_t *a3, size_t __sz)
{
  uint64_t *v6;
  uint64_t v8;
  void **v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  void **v18;
  uint64_t *v19;
  uint64_t v20;
  void **v21;
  void **v22;
  uint64_t v23;
  void **v24;
  uint64_t *v25;

  v6 = a2;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(void ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)a1) >> 3) >= __sz)
  {
    v18 = *(void ***)(a1 + 8);
    if (0xAAAAAAAAAAAAAAABLL * (v18 - v9) >= __sz)
    {
      if (a2 == a3)
      {
        v21 = *(void ***)a1;
      }
      else
      {
        v21 = *(void ***)a1;
        do
        {
          if (v6 != (uint64_t *)v9)
            sub_20E9BF150((uint64_t *)v9, *v6, v6[1], 0xF47E8FD1FA3F47E9 * ((v6[1] - *v6) >> 3));
          v6 += 3;
          v9 += 3;
          v21 += 3;
        }
        while (v6 != a3);
      }
      sub_20E9AE494(a1, v21);
    }
    else
    {
      v19 = &a2[v18 - v9];
      if (v18 != v9)
      {
        v20 = 8 * (v18 - v9);
        do
        {
          if (v6 != (uint64_t *)v9)
            sub_20E9BF150((uint64_t *)v9, *v6, v6[1], 0xF47E8FD1FA3F47E9 * ((v6[1] - *v6) >> 3));
          v6 += 3;
          v9 += 3;
          v20 -= 24;
        }
        while (v20);
        v9 = *(void ***)(a1 + 8);
      }
      v22 = v9;
      if (v19 != a3)
      {
        v23 = 0;
        do
        {
          v24 = &v9[v23];
          v25 = &v19[v23];
          *v24 = 0;
          v24[1] = 0;
          v24[2] = 0;
          sub_20E9BEB30((uint64_t)&v9[v23], v19[v23], v19[v23 + 1], 0xF47E8FD1FA3F47E9 * ((v19[v23 + 1] - v19[v23]) >> 3));
          v23 += 3;
        }
        while (v25 + 3 != a3);
        v22 = &v9[v23];
      }
      *(_QWORD *)(a1 + 8) = v22;
    }
  }
  else
  {
    if (v9)
    {
      sub_20E9AE494(a1, *(void ***)a1);
      operator delete(*(void **)a1);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_35;
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= __sz)
      v11 = __sz;
    v12 = v10 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v11;
    if (v12 > 0xAAAAAAAAAAAAAAALL)
LABEL_35:
      sub_20E867F44();
    v13 = 24 * v12;
    v14 = (char *)operator new(24 * v12);
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v14;
    *(_QWORD *)(a1 + 16) = &v14[v13];
    if (v6 != a3)
    {
      v15 = 0;
      do
      {
        v16 = &v14[v15 * 8];
        v17 = &v6[v15];
        *(_QWORD *)v16 = 0;
        *((_QWORD *)v16 + 1) = 0;
        *((_QWORD *)v16 + 2) = 0;
        sub_20E9BEB30((uint64_t)&v14[v15 * 8], v6[v15], v6[v15 + 1], 0xF47E8FD1FA3F47E9 * ((v6[v15 + 1] - v6[v15]) >> 3));
        v15 += 3;
      }
      while (v17 + 3 != a3);
      v14 += v15 * 8;
    }
    *(_QWORD *)(a1 + 8) = v14;
  }
}

void sub_20E9BEAE0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void **v4;

  sub_20E9BEF54(v2, (uint64_t)v3, v3, (uint64_t)v4, v4);
  *(_QWORD *)(v1 + 8) = v4;
  _Unwind_Resume(a1);
}

uint64_t sub_20E9BEB30(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;

  if (a4)
  {
    v5 = (_QWORD *)result;
    if (a4 >= 0x5C0B81702E05C1)
      sub_20E867F44();
    result = (uint64_t)operator new(712 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = result + 712 * a4;
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = sub_20E9BECB8(v8 + v9, a2 + v9);
        v9 += 712;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_20E9BEBF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20E9BEC34(&a9);
  _Unwind_Resume(a1);
}

void sub_20E9BEC04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  for (; v11; v11 -= 712)
    sub_20E9AE6A0(v10 - 712 + v11);
  *(_QWORD *)(v9 + 8) = v10;
  sub_20E9BEC34(&a9);
  _Unwind_Resume(a1);
}

void ***sub_20E9BEC34(void ***result)
{
  void ***v1;
  void **v2;
  void *v3;
  uint64_t v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = **result;
    if (v3)
    {
      v4 = (uint64_t)v2[1];
      v5 = **v1;
      if ((void *)v4 != v3)
      {
        do
          v4 = sub_20E9AE6A0(v4 - 712);
        while ((void *)v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20E9BECB8(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_OWORD *)(a2 + 16);
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  v7 = *(_OWORD *)(a2 + 80);
  v8 = *(_OWORD *)(a2 + 96);
  v9 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v9;
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 96) = v8;
  v10 = *(_OWORD *)(a2 + 144);
  v11 = *(_OWORD *)(a2 + 160);
  v12 = *(_OWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_OWORD *)(a1 + 160) = v11;
  *(_OWORD *)(a1 + 176) = v12;
  *(_OWORD *)(a1 + 144) = v10;
  v13 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  *(_BYTE *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 248) = 0;
  if (*(_BYTE *)(a2 + 248))
  {
    v19 = *(_QWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
    *(_QWORD *)(a1 + 240) = v19;
    if (v19)
    {
      v20 = (unint64_t *)(v19 + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    *(_BYTE *)(a1 + 248) = 1;
  }
  *(_BYTE *)(a1 + 256) = 0;
  *(_BYTE *)(a1 + 656) = 0;
  if (*(_BYTE *)(a2 + 656))
  {
    *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
    v22 = *(_OWORD *)(a2 + 272);
    v23 = *(_OWORD *)(a2 + 288);
    v24 = *(_OWORD *)(a2 + 304);
    *(_OWORD *)(a1 + 313) = *(_OWORD *)(a2 + 313);
    *(_OWORD *)(a1 + 288) = v23;
    *(_OWORD *)(a1 + 304) = v24;
    *(_OWORD *)(a1 + 272) = v22;
    v25 = *(_QWORD *)(a2 + 344);
    *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
    *(_QWORD *)(a1 + 344) = v25;
    if (v25)
    {
      v26 = (unint64_t *)(v25 + 8);
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    v28 = *(_QWORD *)(a2 + 360);
    *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
    *(_QWORD *)(a1 + 360) = v28;
    if (v28)
    {
      v29 = (unint64_t *)(v28 + 8);
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    memcpy((void *)(a1 + 368), (const void *)(a2 + 368), 0x120uLL);
    *(_BYTE *)(a1 + 656) = 1;
  }
  sub_20E9BEE88(a1 + 664, a2 + 664);
  v31 = *(_QWORD *)(a2 + 696);
  *(_DWORD *)(a1 + 704) = *(_DWORD *)(a2 + 704);
  *(_QWORD *)(a1 + 696) = v31;
  return a1;
}

void sub_20E9BEE5C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_20E9AE81C(v4);
  sub_20E869AA8(v3);
  sub_20E86665C(v2);
  sub_20E86665C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9BEE88(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  uint64_t v5;
  char *v6;
  size_t v7;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    v4 = *(const void **)a2;
    v3 = *(_QWORD *)(a2 + 8);
    v5 = v3 - *(_QWORD *)a2;
    if (v3 != *(_QWORD *)a2)
    {
      if (v5 < 0)
        sub_20E867F44();
      v6 = (char *)operator new(v3 - *(_QWORD *)a2);
      *(_QWORD *)a1 = v6;
      *(_QWORD *)(a1 + 8) = v6;
      *(_QWORD *)(a1 + 16) = &v6[16 * (v5 >> 4)];
      v7 = v5 & 0xFFFFFFFFFFFFFFF0;
      memcpy(v6, v4, v7);
      *(_QWORD *)(a1 + 8) = &v6[v7];
    }
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

void sub_20E9BEF20(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;
  void *v4;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  if (*(_BYTE *)(v1 + 24))
  {
    v4 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v4;
      operator delete(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20E9BEF54(uint64_t a1, uint64_t a2, void **a3, uint64_t a4, void **a5)
{
  void **v6;
  void **v7;
  void *v8;
  char *v9;
  char *v10;
  char *v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;

  if (a3 != a5)
  {
    v6 = a3;
    v7 = a3;
    while (1)
    {
      v10 = (char *)*(v7 - 3);
      v7 -= 3;
      v9 = v10;
      if (!v10)
        goto LABEL_5;
      v11 = (char *)*(v6 - 2);
      v8 = v9;
      if (v11 != v9)
        break;
LABEL_4:
      *(v6 - 2) = v9;
      operator delete(v8);
LABEL_5:
      v6 = v7;
      if (v7 == a5)
        return;
    }
    while (1)
    {
      if (*(v11 - 24))
      {
        v12 = (void *)*((_QWORD *)v11 - 6);
        if (v12)
        {
          *((_QWORD *)v11 - 5) = v12;
          operator delete(v12);
        }
      }
      if (*(v11 - 56))
      {
        v13 = (std::__shared_weak_count *)*((_QWORD *)v11 - 44);
        if (!v13)
          goto LABEL_18;
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
          v16 = (std::__shared_weak_count *)*((_QWORD *)v11 - 46);
          if (!v16)
            goto LABEL_24;
        }
        else
        {
LABEL_18:
          v16 = (std::__shared_weak_count *)*((_QWORD *)v11 - 46);
          if (!v16)
            goto LABEL_24;
        }
        v17 = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      if (!*(v11 - 464))
        goto LABEL_29;
      v19 = (std::__shared_weak_count *)*((_QWORD *)v11 - 59);
      if (!v19)
        goto LABEL_29;
LABEL_24:
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
        v22 = (std::__shared_weak_count *)*((_QWORD *)v11 - 61);
        if (v22)
        {
LABEL_30:
          v23 = (unint64_t *)&v22->__shared_owners_;
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
      }
      else
      {
LABEL_29:
        v22 = (std::__shared_weak_count *)*((_QWORD *)v11 - 61);
        if (v22)
          goto LABEL_30;
      }
      v25 = (std::__shared_weak_count *)*((_QWORD *)v11 - 63);
      if (v25)
      {
        v26 = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      v11 -= 712;
      if (v11 == v9)
      {
        v8 = *v7;
        goto LABEL_4;
      }
    }
  }
}

uint64_t sub_20E9BF150(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = a2;
  v8 = a1[2];
  v9 = *a1;
  if (0xF47E8FD1FA3F47E9 * ((v8 - *a1) >> 3) >= a4)
  {
    result = a1[1];
    if (0xF47E8FD1FA3F47E9 * ((result - v9) >> 3) >= a4)
    {
      if (a2 == a3)
      {
        v23 = v9;
      }
      else
      {
        v23 = v9;
        do
        {
          sub_20E9BF3F4(v9, v6);
          v6 += 712;
          v9 += 712;
          v23 += 712;
        }
        while (v6 != a3);
        result = a1[1];
      }
      while (result != v23)
        result = sub_20E9AE6A0(result - 712);
      a1[1] = v23;
    }
    else
    {
      v19 = a2 + 8 * ((result - v9) >> 3);
      if (result != v9)
      {
        v20 = 8 * ((result - v9) >> 3);
        do
        {
          result = sub_20E9BF3F4(v9, v6);
          v6 += 712;
          v9 += 712;
          v20 -= 712;
        }
        while (v20);
        v9 = a1[1];
      }
      v21 = v9;
      if (v19 != a3)
      {
        v22 = 0;
        do
        {
          result = sub_20E9BECB8(v9 + v22, v19 + v22);
          v22 += 712;
        }
        while (v19 + v22 != a3);
        v21 = v9 + v22;
      }
      a1[1] = v21;
    }
  }
  else
  {
    if (v9)
    {
      v10 = a1[1];
      v11 = (void *)v9;
      if (v10 != v9)
      {
        do
          v10 = sub_20E9AE6A0(v10 - 712);
        while (v10 != v9);
        v11 = (void *)*a1;
      }
      a1[1] = v9;
      operator delete(v11);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x5C0B81702E05C0)
      goto LABEL_37;
    v12 = 0xF47E8FD1FA3F47E9 * (v8 >> 3);
    v13 = 2 * v12;
    if (2 * v12 <= a4)
      v13 = a4;
    v14 = v12 >= 0x2E05C0B81702E0 ? 0x5C0B81702E05C0 : v13;
    if (v14 > 0x5C0B81702E05C0)
LABEL_37:
      sub_20E867F44();
    v15 = 712 * v14;
    result = (uint64_t)operator new(712 * v14);
    v17 = result;
    *a1 = result;
    a1[1] = result;
    a1[2] = result + v15;
    if (v6 != a3)
    {
      v18 = 0;
      do
      {
        result = sub_20E9BECB8(v17 + v18, v6 + v18);
        v18 += 712;
      }
      while (v6 + v18 != a3);
      v17 += v18;
    }
    a1[1] = v17;
  }
  return result;
}

uint64_t sub_20E9BF3F4(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_OWORD *)(a2 + 16);
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  v7 = *(_OWORD *)(a2 + 80);
  v8 = *(_OWORD *)(a2 + 96);
  v9 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v9;
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 96) = v8;
  v10 = *(_OWORD *)(a2 + 144);
  v11 = *(_OWORD *)(a2 + 160);
  v12 = *(_OWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_OWORD *)(a1 + 160) = v11;
  *(_OWORD *)(a1 + 176) = v12;
  *(_OWORD *)(a1 + 144) = v10;
  v14 = *(_QWORD *)(a2 + 200);
  v13 = *(_QWORD *)(a2 + 208);
  if (v13)
  {
    v15 = (unint64_t *)(v13 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = *(std::__shared_weak_count **)(a1 + 208);
  *(_QWORD *)(a1 + 200) = v14;
  *(_QWORD *)(a1 + 208) = v13;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v21 = *(_QWORD *)(a2 + 216);
  v20 = *(_QWORD *)(a2 + 224);
  if (v20)
  {
    v22 = (unint64_t *)(v20 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v24 = *(std::__shared_weak_count **)(a1 + 224);
  *(_QWORD *)(a1 + 216) = v21;
  *(_QWORD *)(a1 + 224) = v20;
  if (!v24)
    goto LABEL_16;
  v25 = (unint64_t *)&v24->__shared_owners_;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
    v27 = *(unsigned __int8 *)(a1 + 248);
    if (v27 == *(unsigned __int8 *)(a2 + 248))
    {
LABEL_17:
      if (v27)
      {
        v29 = *(_QWORD *)(a2 + 232);
        v28 = *(_QWORD *)(a2 + 240);
        if (v28)
        {
          v30 = (unint64_t *)(v28 + 8);
          do
            v31 = __ldxr(v30);
          while (__stxr(v31 + 1, v30));
        }
        v32 = *(std::__shared_weak_count **)(a1 + 240);
        *(_QWORD *)(a1 + 232) = v29;
        *(_QWORD *)(a1 + 240) = v28;
        if (v32)
        {
          v33 = (unint64_t *)&v32->__shared_owners_;
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
      }
      goto LABEL_38;
    }
  }
  else
  {
LABEL_16:
    v27 = *(unsigned __int8 *)(a1 + 248);
    if (v27 == *(unsigned __int8 *)(a2 + 248))
      goto LABEL_17;
  }
  if (v27)
  {
    v35 = *(std::__shared_weak_count **)(a1 + 240);
    if (v35)
    {
      v36 = (unint64_t *)&v35->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    *(_BYTE *)(a1 + 248) = 0;
  }
  else
  {
    v38 = *(_QWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
    *(_QWORD *)(a1 + 240) = v38;
    if (v38)
    {
      v39 = (unint64_t *)(v38 + 8);
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    *(_BYTE *)(a1 + 248) = 1;
  }
LABEL_38:
  sub_20E9BF624(a1 + 256, a2 + 256);
  sub_20E9BF84C(a1 + 664, a2 + 664);
  v41 = *(_QWORD *)(a2 + 696);
  *(_BYTE *)(a1 + 704) = *(_BYTE *)(a2 + 704);
  *(_QWORD *)(a1 + 696) = v41;
  return a1;
}

void sub_20E9BF624(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;

  if (*(unsigned __int8 *)(a1 + 400) == *(unsigned __int8 *)(a2 + 400))
  {
    if (*(_BYTE *)(a1 + 400))
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v4 = *(_OWORD *)(a2 + 16);
      v5 = *(_OWORD *)(a2 + 32);
      v6 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
      *(_OWORD *)(a1 + 32) = v5;
      *(_OWORD *)(a1 + 48) = v6;
      *(_OWORD *)(a1 + 16) = v4;
      v8 = *(_QWORD *)(a2 + 80);
      v7 = *(_QWORD *)(a2 + 88);
      if (v7)
      {
        v9 = (unint64_t *)(v7 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      v11 = *(std::__shared_weak_count **)(a1 + 88);
      *(_QWORD *)(a1 + 80) = v8;
      *(_QWORD *)(a1 + 88) = v7;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      v15 = *(_QWORD *)(a2 + 96);
      v14 = *(_QWORD *)(a2 + 104);
      if (v14)
      {
        v16 = (unint64_t *)(v14 + 8);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      v18 = *(std::__shared_weak_count **)(a1 + 104);
      *(_QWORD *)(a1 + 96) = v15;
      *(_QWORD *)(a1 + 104) = v14;
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      memcpy((void *)(a1 + 112), (const void *)(a2 + 112), 0x120uLL);
    }
  }
  else if (*(_BYTE *)(a1 + 400))
  {
    v21 = *(std::__shared_weak_count **)(a1 + 104);
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = *(std::__shared_weak_count **)(a1 + 88);
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    *(_BYTE *)(a1 + 400) = 0;
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v27 = *(_OWORD *)(a2 + 16);
    v28 = *(_OWORD *)(a2 + 32);
    v29 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
    *(_OWORD *)(a1 + 32) = v28;
    *(_OWORD *)(a1 + 48) = v29;
    *(_OWORD *)(a1 + 16) = v27;
    v30 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = v30;
    if (v30)
    {
      v31 = (unint64_t *)(v30 + 8);
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    v33 = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 104) = v33;
    if (v33)
    {
      v34 = (unint64_t *)(v33 + 8);
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    memcpy((void *)(a1 + 112), (const void *)(a2 + 112), 0x120uLL);
    *(_BYTE *)(a1 + 400) = 1;
  }
}

void sub_20E9BF84C(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  size_t v8;

  if (*(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (a1 != a2)
    {
      if (*(_BYTE *)(a1 + 24))
        sub_20E9BF954((_QWORD *)a1, *(char **)a2, *(char **)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
    }
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v3;
      operator delete(v3);
    }
    *(_BYTE *)(a1 + 24) = 0;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    v5 = *(char **)a2;
    v4 = *(_QWORD *)(a2 + 8);
    v6 = v4 - *(_QWORD *)a2;
    if (v4 != *(_QWORD *)a2)
    {
      if (v6 < 0)
        sub_20E867F44();
      v7 = (char *)operator new(v4 - *(_QWORD *)a2);
      *(_QWORD *)a1 = v7;
      *(_QWORD *)(a1 + 8) = v7;
      *(_QWORD *)(a1 + 16) = &v7[16 * (v6 >> 4)];
      v8 = v6 & 0xFFFFFFFFFFFFFFF0;
      memcpy(v7, v5, v8);
      *(_QWORD *)(a1 + 8) = &v7[v8];
    }
    *(_BYTE *)(a1 + 24) = 1;
  }
}

void sub_20E9BF938(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20E9BF954(_QWORD *result, char *a2, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  int64_t v15;
  char **v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  char *v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  _OWORD *v26;
  __int128 v27;

  v6 = a2;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz <= (v8 - *result) >> 4)
  {
    v16 = (char **)(result + 1);
    v17 = (char *)result[1];
    v18 = (v17 - v9) >> 4;
    if (v18 >= __sz)
    {
      v25 = *result;
      if (a2 != a3)
      {
        v26 = (_OWORD *)*result;
        do
        {
          v27 = *(_OWORD *)v6;
          v6 += 16;
          *v26++ = v27;
          v25 += 16;
        }
        while (v6 != a3);
      }
      v15 = v25 - (_QWORD)v9;
    }
    else
    {
      v19 = &a2[16 * v18];
      if (v17 != v9)
      {
        v20 = 16 * v18;
        do
        {
          v21 = *(_OWORD *)v6;
          v6 += 16;
          *(_OWORD *)v9 = v21;
          v9 += 16;
          v20 -= 16;
        }
        while (v20);
        v9 = *v16;
      }
      v22 = v9;
      if (v19 != a3)
      {
        v22 = v9;
        v23 = v9;
        do
        {
          v24 = *(_OWORD *)v19;
          v19 += 16;
          *(_OWORD *)v23 = v24;
          v23 += 16;
          v22 += 16;
        }
        while (v19 != a3);
      }
      v15 = v22 - v9;
    }
  }
  else
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 60)
      goto LABEL_27;
    v10 = v8 >> 3;
    if (v8 >> 3 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    v12 = 0xFFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 60)
LABEL_27:
      sub_20E867F44();
    v13 = 2 * v12;
    result = operator new(16 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = (char *)result;
    if (v6 != a3)
    {
      result = memcpy(result, v6, (a3 - v6) & 0xFFFFFFFFFFFFFFF0);
      v14 = &v9[(a3 - v6) & 0xFFFFFFFFFFFFFFF0];
    }
    v15 = v14 - v9;
    v16 = (char **)(v7 + 1);
  }
  *v16 = &v9[v15];
  return result;
}

uint64_t sub_20E9BFAE0(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  if (a4)
  {
    v5 = (_QWORD *)result;
    if (a4 >= 0xAAAAAAAAAAAAAABLL)
      sub_20E867F44();
    result = (uint64_t)operator new(24 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = result + 24 * a4;
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        v10 = (_QWORD *)(v8 + v9);
        v11 = a2 + v9;
        *v10 = 0;
        v10[1] = 0;
        v10[2] = 0;
        result = sub_20E9BEB30(v8 + v9, *(_QWORD *)(a2 + v9), *(_QWORD *)(a2 + v9 + 8), 0xF47E8FD1FA3F47E9 * ((uint64_t)(*(_QWORD *)(a2 + v9 + 8) - *(_QWORD *)(a2 + v9)) >> 3));
        v9 += 24;
      }
      while (v11 + 24 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_20E9BFBDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20E9BFC24(&a9);
  _Unwind_Resume(a1);
}

void sub_20E9BFBF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  void **v10;
  uint64_t v11;
  void **v12;

  sub_20E9BEF54(v11, (uint64_t)v12, v12, (uint64_t)v10, v10);
  *(_QWORD *)(v9 + 8) = v10;
  sub_20E9BFC24(&a9);
  _Unwind_Resume(a1);
}

void ***sub_20E9BFC24(void ***a1)
{
  void **v3;
  void **v4;

  if (*((_BYTE *)a1 + 8))
    return a1;
  v3 = *a1;
  v4 = (void **)**a1;
  if (!v4)
    return a1;
  sub_20E9AE494((uint64_t)v3, v4);
  operator delete(**a1);
  return a1;
}

void sub_20E9BFC7C()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20E9BFC90(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C9B63C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20E9BFCC8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C9B63C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20E9BFCE8(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  int v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  int v21;
  uint64_t *v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  double v28;
  double v29;
  BOOL v30;
  __int128 v31;
  uint64_t v32;
  _OWORD v33[2];
  void *__p[3];
  void *v35;
  _BYTE *v36;
  uint64_t v37;
  char v38;
  uint64_t v39[16];
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 8);
  std::mutex::lock((std::mutex *)(v2 + 32));
  LOBYTE(v35) = 0;
  v38 = 0;
  if (*(_BYTE *)(v2 + 24))
  {
    v35 = 0;
    v36 = 0;
    v37 = 0;
    sub_20E9BFAE0((uint64_t)&v35, *(_QWORD *)v2, *(_QWORD *)(v2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v2 + 8) - *(_QWORD *)v2) >> 3));
    v38 = 1;
  }
  std::mutex::unlock((std::mutex *)(v2 + 32));
  if (!v38
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryEngine/include/VIO/OdometryEngine/VIOEngineNode.hpp", 88, (uint64_t)"optional_features", 17, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v3 = v35;
  if (v35 != v36)
  {
    v4 = *(_QWORD *)v35;
    if (*(_QWORD *)v35 != *((_QWORD *)v35 + 1))
      goto LABEL_7;
    goto LABEL_11;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/src/NodeCameraSystemFeatures.cpp", 39, (uint64_t)"!camera_set_features_.empty()", 29, (uint64_t)&unk_2102C5146, 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_78;
  }
  v3 = v35;
  v4 = *(_QWORD *)v35;
  if (*(_QWORD *)v35 == *((_QWORD *)v35 + 1))
  {
LABEL_11:
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/src/NodeCameraSetFeatures.cpp", 77, (uint64_t)"!sequence_camera_stream_features_.empty()", 41, (uint64_t)&unk_2102C50BE, 0, (void (*)(void **))sub_21023DDB0))
    {
      if (*(double *)(*(_QWORD *)v3 + 8) + *(double *)(*(_QWORD *)v3 + 16) != *(double *)(a1 + 16))
        goto LABEL_70;
      goto LABEL_13;
    }
LABEL_78:
    abort();
  }
LABEL_7:
  if (*(double *)(v4 + 8) + *(double *)(v4 + 16) != *(double *)(a1 + 16))
    goto LABEL_70;
LABEL_13:
  v5 = (uint64_t *)v35;
  if (v35 == v36)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/src/NodeCameraSystemFeatures.cpp", 39, (uint64_t)"!camera_set_features_.empty()", 29, (uint64_t)&unk_2102C5146, 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_79;
    }
    v5 = (uint64_t *)v35;
    v6 = *(_QWORD *)v35;
    if (*(_QWORD *)v35 == *((_QWORD *)v35 + 1))
    {
LABEL_18:
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/src/NodeCameraSetFeatures.cpp", 77, (uint64_t)"!sequence_camera_stream_features_.empty()", 41, (uint64_t)&unk_2102C50BE, 0, (void (*)(void **))sub_21023DDB0))
      {
        v6 = *v5;
        goto LABEL_20;
      }
LABEL_79:
      abort();
    }
  }
  else
  {
    v6 = *(_QWORD *)v35;
    if (*(_QWORD *)v35 == *((_QWORD *)v35 + 1))
      goto LABEL_18;
  }
LABEL_20:
  v7 = *(double *)(v6 + 8);
  v8 = *(double *)(v6 + 16);
  v10 = *(double *)(v2 + 336);
  v9 = *(double *)(v2 + 344);
  v11 = *(double *)(v2 + 352);
  v12 = *(double *)(v2 + 360);
  v13 = *(unsigned __int8 *)(v2 + 384);
  v14 = *(double *)(v2 + 368);
  v15 = *(double *)(v2 + 376);
  v16 = sub_210215600(3);
  v17 = v7 + v8;
  if (v7 + v8 < 0.0)
    goto LABEL_27;
  if (!*(_BYTE *)(v2 + 432))
  {
    v28 = v10 * 0.1;
    v19 = 0.0;
    goto LABEL_52;
  }
  v18 = *(double *)(v2 + 424);
  v19 = v17 - v18;
  if (v18 >= v17 || v19 < v15)
  {
LABEL_27:
    v21 = 5;
    goto LABEL_28;
  }
  v28 = v10 * 0.1;
  if (v19 - v14 > v10 * 0.1)
  {
    *(double *)(v2 + 424) = v17;
    *(_BYTE *)(v2 + 432) = 1;
    v21 = 7;
    goto LABEL_28;
  }
LABEL_52:
  *(double *)(v2 + 424) = v17;
  *(_BYTE *)(v2 + 432) = 1;
  if (!v13 || ((v29 = v16 - v17, v29 > v12) ? (v21 = 4) : (v21 = 3), v29 >= v11 ? (v30 = v29 <= v12) : (v30 = 0), v30))
  {
    if (v19 <= 0.0)
      goto LABEL_76;
    if (v10 - v19 > v28)
    {
      v21 = 2;
      goto LABEL_28;
    }
    if (v19 - v9 <= v28)
LABEL_76:
      v21 = 0;
    else
      v21 = 1;
  }
LABEL_28:
  v22 = (uint64_t *)v35;
  if (v35 == v36)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/src/NodeCameraSystemFeatures.cpp", 39, (uint64_t)"!camera_set_features_.empty()", 29, (uint64_t)&unk_2102C5146, 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_80;
    }
    v22 = (uint64_t *)v35;
    v23 = *(_QWORD *)v35;
    if (*(_QWORD *)v35 != *((_QWORD *)v35 + 1))
      goto LABEL_35;
  }
  else
  {
    v23 = *(_QWORD *)v35;
    if (*(_QWORD *)v35 != *((_QWORD *)v35 + 1))
      goto LABEL_35;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/src/NodeCameraSetFeatures.cpp", 77, (uint64_t)"!sequence_camera_stream_features_.empty()", 41, (uint64_t)&unk_2102C50BE, 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_80:
    abort();
  }
  v23 = *v22;
LABEL_35:
  sub_20E9C1904(v2, v21, *(double *)(v23 + 8) + *(double *)(v23 + 16));
  if (v21 == 7)
  {
    if (*(_BYTE *)(v2 + 400))
      *(_BYTE *)(v2 + 400) = 0;
    if (*(_BYTE *)(v2 + 416))
      *(_BYTE *)(v2 + 416) = 0;
    if (*(_BYTE *)(v2 + 432))
      *(_BYTE *)(v2 + 432) = 0;
  }
  else if ((v21 | 0xFFFFFFF8) <= 0xFFFFFFFC)
  {
    memset(__p, 0, sizeof(__p));
    sub_20E9BFAE0((uint64_t)__p, (uint64_t)v35, (uint64_t)v36, 0xAAAAAAAAAAAAAAABLL * ((v36 - (_BYTE *)v35) >> 3));
    (*(void (**)(uint64_t *__return_ptr, _QWORD, void **))(**(_QWORD **)(v2 + 120) + 56))(v39, *(_QWORD *)(v2 + 120), __p);
    if (v40)
    {
      sub_20E9C19AC(v2, v39);
      v24 = (_BYTE *)v39[7];
      v25 = v39[8];
      while (v24 != (_BYTE *)v25)
      {
        LOBYTE(v33[0]) = *v24;
        v26 = *(_QWORD *)(v2 + 200);
        if (!v26)
          sub_20E86D37C();
        v27 = v24 + 32;
        (*(void (**)(uint64_t, _OWORD *, _BYTE *, _BYTE *))(*(_QWORD *)v26 + 48))(v26, v33, v24 + 8, v24 + 32);
        v24 = v27 + 24;
      }
    }
    else
    {
      v31 = *(_OWORD *)(v2 + 568);
      v33[0] = *(_OWORD *)(v2 + 552);
      v33[1] = v31;
      v32 = *(_QWORD *)(v2 + 544);
      if (!v32)
        sub_20E86D37C();
      (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v32 + 48))(v32, v33);
    }
    if (v40)
      sub_20E9C1D58(v39);
    if (__p[0])
    {
      sub_20E9AE494((uint64_t)__p, (void **)__p[0]);
      operator delete(__p[0]);
    }
  }
LABEL_70:
  if (v38)
  {
    if (v35)
    {
      sub_20E9AE494((uint64_t)&v35, (void **)v35);
      operator delete(v35);
    }
  }
}

#error "20E9C0A54: call analysis failed (funcsize=1052)"

void sub_20E9C14C8(void *a1, int a2)
{
  if (a2)
  {
    __cxa_guard_abort(&qword_254A4A510);
    sub_20E860DA4(a1);
  }
  JUMPOUT(0x20E9C187CLL);
}

void sub_20E9C14EC(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;

  if (a2)
  {
    if (a41)
    {
      v42 = *(std::__shared_weak_count **)(a41 + 32);
      if (v42)
      {
        p_shared_owners = (unint64_t *)&v42->__shared_owners_;
        do
          v44 = __ldaxr(p_shared_owners);
        while (__stlxr(v44 - 1, p_shared_owners));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      v45 = *(std::__shared_weak_count **)(a41 + 16);
      if (v45)
      {
        v46 = (unint64_t *)&v45->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      MEMORY[0x212BC6398](a41, 0x10F0C40B62ED6C6);
      sub_20E860DA4(a1);
    }
    JUMPOUT(0x20E9C1884);
  }
  JUMPOUT(0x20E9C187CLL);
}

void sub_20E9C16DC(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t *v15;
  unint64_t v17;
  unint64_t v18;

  if (a2)
  {
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    do
      v18 = __ldaxr(v14);
    while (__stlxr(v18 - 1, v14));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
      std::__shared_weak_count::__release_weak(a13);
      sub_20E860DA4(a1);
    }
    JUMPOUT(0x20E9C1884);
  }
  JUMPOUT(0x20E9C187CLL);
}

void sub_20E9C1724(uint64_t a1, int a2)
{
  int v2;
  unint64_t *v3;
  void *v4;
  unint64_t v5;

  if (a2)
  {
    if (v2 < 0)
      operator delete(v4);
    do
      v5 = __ldaxr(v3);
    while (__stlxr(v5 - 1, v3));
    JUMPOUT(0x20E9C1784);
  }
  JUMPOUT(0x20E9C187CLL);
}

void sub_20E9C173C(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x20E9C1748);
  JUMPOUT(0x20E9C187CLL);
}

void sub_20E9C176C(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x20E9C1774);
  JUMPOUT(0x20E9C187CLL);
}

void sub_20E9C17B0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *object,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,char a48)
{
  if (a2)
  {
    if (a48 && a47 < 0)
      operator delete(__p);
    if (object)
      os_release(object);
    JUMPOUT(0x20E9C1884);
  }
  JUMPOUT(0x20E9C187CLL);
}

void sub_20E9C1814(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x20E9C181CLL);
  JUMPOUT(0x20E9C187CLL);
}

void sub_20E9C1834(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *object,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,char a48)
{
  if (a2)
  {
    if (a48 && a47 < 0)
      operator delete(__p);
    if (object)
      os_release(object);
    JUMPOUT(0x20E9C1884);
  }
  JUMPOUT(0x20E9C187CLL);
}

void sub_20E9C1874(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_20E860DA4(exception_object);
}

uint64_t sub_20E9C188C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE22AddFeatureMeasure"
                     "mentsERKNS0_17feature_detection24NodeCameraSystemFeaturesEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE22AddFea"
                                "tureMeasurementsERKNS0_17feature_detection24NodeCameraSystemFeaturesEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE22AddFeatureMeasurementsERKNS0_17feature_detection24NodeCameraSystemFeaturesEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE22AddFeatureMeasurementsERKNS0_17feature_detection24NodeCameraSystemFeaturesEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E9C18F8()
{
  return &unk_24C9B6420;
}

uint64_t sub_20E9C1904(uint64_t result, int a2, double a3)
{
  int v3;
  uint64_t v4;
  double v5;
  int v6;

  switch(a2)
  {
    case 1:
      v3 = 4;
      goto LABEL_11;
    case 2:
      v3 = 5;
      goto LABEL_11;
    case 3:
      v3 = 6;
      goto LABEL_11;
    case 4:
      v3 = 7;
      goto LABEL_11;
    case 5:
      v3 = 9;
      goto LABEL_11;
    case 6:
      v3 = 11;
      goto LABEL_11;
    case 7:
      v3 = 12;
      goto LABEL_11;
    case 8:
      v3 = 13;
      goto LABEL_11;
    case 9:
      v3 = 19;
LABEL_11:
      v6 = v3;
      v5 = a3;
      v4 = *(_QWORD *)(result + 464);
      if (!v4)
        sub_20E86D37C();
      result = (*(uint64_t (**)(uint64_t, int *, double *))(*(_QWORD *)v4 + 48))(v4, &v6, &v5);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_20E9C19AC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float64x2_t *v11;
  float64x2_t v12;
  int64x2_t v14;
  float64x2_t v15;
  float64x2_t v17;
  int8x16_t v18;
  int64x2_t v19;
  float64x2_t v26;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  int64x2_t v37;
  int8x16_t v38;
  unint64_t v39;
  float64x2_t v40;
  int8x16_t v41;
  double v42;
  int64x2_t v43;
  _OWORD v44[2];
  __int128 v45;
  __int128 v46;
  int v47;
  __int128 *v48;

  v4 = *a2;
  v5 = *(double *)(*a2 + 32);
  if (!*(_BYTE *)(a1 + 512) || v5 > *(double *)(a1 + 504))
  {
    *(double *)(a1 + 504) = v5;
    *(_BYTE *)(a1 + 512) = 1;
    v6 = *(_QWORD *)(a1 + 168);
    if (!v6)
      goto LABEL_22;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 48))(v6, a2);
    v7 = *(_QWORD *)(a1 + 264);
    v4 = *a2;
    if (v7 && *(_BYTE *)(v4 + 624))
    {
      *(_QWORD *)&v45 = *(_QWORD *)(v4 + 32);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __int128 *))(*(_QWORD *)v7 + 48))(v7, v4 + 576, v4 + 552, v4 + 600, &v45);
      v4 = *a2;
    }
    v8 = *(_QWORD *)(a1 + 296);
    if (v8 && *(_BYTE *)(v4 + 704))
    {
      *(_QWORD *)&v45 = *(_QWORD *)(v4 + 32);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __int128 *))(*(_QWORD *)v8 + 48))(v8, v4 + 656, v4 + 632, v4 + 680, &v45);
      v4 = *a2;
    }
  }
  if (*(_QWORD *)(a1 + 496))
  {
    v9 = *(_QWORD *)(v4 + 4296);
    v10 = *(_QWORD *)(v4 + 4304);
    if (v9 != v10)
    {
      v45 = 0u;
      v46 = 0u;
      v47 = 1065353216;
      do
      {
        v37 = *(int64x2_t *)(v9 + 32);
        v38 = *(int8x16_t *)(v9 + 48);
        v39 = *(_QWORD *)(v9 + 80);
        v42 = *(double *)(v9 + 104);
        v43 = *(int64x2_t *)(v9 + 64);
        v40 = *(float64x2_t *)(v9 + 88);
        v41 = *(int8x16_t *)(v9 + 16);
        v48 = (__int128 *)v9;
        v11 = (float64x2_t *)sub_20E96C80C((uint64_t)&v45, v9, (uint64_t)&unk_2102DB95C, &v48);
        _V19.D[1] = v40.f64[1];
        *(_QWORD *)&v12.f64[0] = v41.i64[0];
        v14 = (int64x2_t)vextq_s8(v41, v38, 8uLL);
        _D17 = v42;
        *(_QWORD *)&v15.f64[0] = v43.i64[0];
        *(_QWORD *)&v12.f64[1] = v14.i64[0];
        v17 = (float64x2_t)vzip2q_s64(v37, v14);
        *(_QWORD *)&v15.f64[1] = vdupq_laneq_s64(v43, 1).u64[0];
        v18 = vextq_s8((int8x16_t)v17, (int8x16_t)vdupq_laneq_s64((int64x2_t)v38, 1), 8uLL);
        v19.i64[0] = v37.i64[0];
        v19.i64[1] = *(_QWORD *)&v17.f64[0];
        _D5 = v38.i64[1];
        __asm { FMLS            D3, D5, V19.D[1] }
        *(_QWORD *)&v26.f64[0] = vdupq_laneq_s64(v19, 1).u64[0];
        *(_QWORD *)&v26.f64[1] = v18.i64[0];
        _D7 = v39;
        __asm { FMLS            D3, D7, V17.D[0] }
        _Q3.f64[1] = 1.0;
        v11[6] = v15;
        v11[7] = (float64x2_t)v39;
        v11[2] = v12;
        v11[3] = (float64x2_t)v37.u64[0];
        v11[8] = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v12, vnegq_f64(v40).f64[0]), v17, v40, 1), v15, v42, 0);
        v11[9] = _Q3;
        v11[4] = v26;
        v11[5] = (float64x2_t)v18.u64[1];
        v9 += 416;
      }
      while (v9 != v10);
      v48 = *(__int128 **)(*a2 + 32);
      v29 = *(_QWORD *)(a1 + 496);
      if (!v29)
        sub_20E86D37C();
      (*(void (**)(uint64_t, __int128 **, __int128 *))(*(_QWORD *)v29 + 48))(v29, &v48, &v45);
      v30 = (_QWORD *)v46;
      if ((_QWORD)v46)
      {
        do
        {
          v31 = (_QWORD *)*v30;
          operator delete(v30);
          v30 = v31;
        }
        while (v31);
      }
      v32 = (void *)v45;
      *(_QWORD *)&v45 = 0;
      if (v32)
        operator delete(v32);
      v4 = *a2;
    }
  }
  v33 = *(_OWORD *)(v4 + 3808);
  *(_OWORD *)(a1 + 561) = *(_OWORD *)(v4 + 3817);
  *(_OWORD *)(a1 + 552) = v33;
  v34 = *(_OWORD *)(a1 + 568);
  v44[0] = *(_OWORD *)(a1 + 552);
  v44[1] = v34;
  v35 = *(_QWORD *)(a1 + 544);
  if (!v35)
LABEL_22:
    sub_20E86D37C();
  return (*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)v35 + 48))(v35, v44);
}

void sub_20E9C1C3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8C25A8(v1 - 112);
  _Unwind_Resume(a1);
}

void sub_20E9C1C50(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8C25A8(v1 - 112);
  _Unwind_Resume(a1);
}

void sub_20E9C1C64(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5AC88);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5AC88))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.odometry_engine");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A5AC80);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A5AC88);
  }
  *a1 = qword_254A5AC80;
}

void sub_20E9C1D00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5AC88);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5AC88);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E9C1D58(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  void *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;

  v2 = (std::__shared_weak_count *)a1[15];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[13];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[13];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[11];
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (char *)a1[7];
    if (!v11)
      goto LABEL_25;
  }
  else
  {
LABEL_15:
    v11 = (char *)a1[7];
    if (!v11)
      goto LABEL_25;
  }
  v12 = (char *)a1[8];
  v13 = v11;
  if (v12 != v11)
  {
    do
    {
      v14 = (void *)*((_QWORD *)v12 - 3);
      if (v14)
      {
        *((_QWORD *)v12 - 2) = v14;
        operator delete(v14);
      }
      v15 = (void *)*((_QWORD *)v12 - 6);
      if (v15)
      {
        *((_QWORD *)v12 - 5) = v15;
        operator delete(v15);
      }
      v12 -= 56;
    }
    while (v12 != v11);
    v13 = (char *)a1[7];
  }
  a1[8] = v11;
  operator delete(v13);
LABEL_25:
  v16 = (std::__shared_weak_count *)a1[5];
  if (!v16)
    goto LABEL_29;
  v17 = (unint64_t *)&v16->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    v19 = (std::__shared_weak_count *)a1[3];
    if (!v19)
      goto LABEL_37;
  }
  else
  {
LABEL_29:
    v19 = (std::__shared_weak_count *)a1[3];
    if (!v19)
      goto LABEL_37;
  }
  v20 = (unint64_t *)&v19->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
LABEL_37:
  v22 = (std::__shared_weak_count *)a1[1];
  if (!v22)
    return a1;
  v23 = (unint64_t *)&v22->__shared_owners_;
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (v24)
    return a1;
  ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
  std::__shared_weak_count::__release_weak(v22);
  return a1;
}

uint64_t sub_20E9C1F60(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 32);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_20E9C1FB0(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  v2 = *(_QWORD **)(a1 + 32);
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E9C2010@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;

  v4 = (_QWORD *)operator new();
  *v4 = &off_24C9B6450;
  v5 = v4 + 1;
  result = *(_QWORD *)(a1 + 32);
  if (!result)
    goto LABEL_4;
  if (result != a1 + 8)
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 16))(result, v5);
LABEL_4:
    v4[4] = result;
    *a2 = v4;
    return result;
  }
  v4[4] = v5;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  *a2 = v4;
  return result;
}

void sub_20E9C20B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10A1C400AA0B987);
  _Unwind_Resume(a1);
}

void sub_20E9C20D4()
{
  sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 274, (uint64_t)"", 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_21023DDB0);
  abort();
}

void sub_20E9C2110()
{
  sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 280, (uint64_t)"", 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_21023DDB0);
  abort();
}

uint64_t sub_20E9C214C()
{
  return 1;
}

uint64_t sub_20E9C2158(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 301, (uint64_t)"processor_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(_QWORD *)(a1 + 32);
    if (!v4)
      sub_20E86D37C();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, a2);
}

void sub_20E9C21D4()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20E9C21E8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C9B64C8;
  return result;
}

void sub_20E9C220C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C9B64C8;
}

void sub_20E9C2224()
{
  int v0;
  unint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  const char *v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  const char *v10;
  size_t v11;
  void **v12;
  const char *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  std::__shared_weak_count_vtbl *v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  void *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  _QWORD v44[3];
  int v45;
  const char *v46;
  int v47;
  const char *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  uint64_t v51;
  void *object[2];
  size_t v53;
  unint64_t v54;
  char v55;
  void *__p[2];
  unint64_t v57;
  char v58;

  sub_20E9AC248(&v51);
  if (**(int **)(v51 + 56) > 5)
    return;
  v0 = *(unsigned __int8 *)(v51 + 72);
  v1 = sub_20E8C31DC(v51, "OSLogSurrogateAppender", 1, 0);
  if (!v0 && v1 == 0)
    return;
  v3 = v1;
  v44[0] = &v51;
  v44[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v44[2] = std::chrono::system_clock::now().__d_.__rep_;
  v45 = 5;
  v46 = "unknown file";
  v47 = 581;
  v49 = 0;
  v50 = 0;
  v48 = "unknown function";
  v4 = v51;
  v5 = v51 + 16;
  if (*(char *)(v51 + 39) < 0)
  {
    v7 = *(const char **)(v51 + 16);
    v6 = *(_QWORD *)(v51 + 24);
    v9 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v9 & 1) != 0)
      goto LABEL_10;
  }
  else
  {
    v6 = *(unsigned __int8 *)(v51 + 39);
    v7 = (const char *)(*(_QWORD *)v44[0] + 16);
    v8 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v8 & 1) != 0)
      goto LABEL_10;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)object);
    if ((_BYTE)v54)
    {
      *(_OWORD *)byte_254A4A4F8 = *(_OWORD *)object;
      *(_QWORD *)&byte_254A4A4F8[16] = v53;
    }
    else
    {
      byte_254A4A4F8[23] = 14;
      strcpy(byte_254A4A4F8, "com.apple.cv3d");
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_10:
  if (byte_254A4A4F8[23] >= 0)
    v10 = byte_254A4A4F8;
  else
    v10 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v11 = byte_254A4A4F8[23];
  else
    v11 = *(_QWORD *)&byte_254A4A4F8[8];
  object[0] = os_log_create(v10, v7);
  v12 = &object[1];
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v11 >= 0x17)
  {
    v13 = v7;
    v14 = v4;
    v15 = v0;
    v16 = v5;
    v17 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v17 = v11 | 7;
    v18 = v17 + 1;
    v12 = (void **)operator new(v17 + 1);
    v53 = v11;
    v54 = v18 | 0x8000000000000000;
    object[1] = v12;
    v5 = v16;
    v0 = v15;
    v4 = v14;
    v7 = v13;
    goto LABEL_23;
  }
  HIBYTE(v54) = v11;
  if (v11)
LABEL_23:
    memmove(v12, v10, v11);
  *((_BYTE *)v12 + v11) = 0;
  v55 = 1;
  v19 = __p;
  if (v6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v6 >= 0x17)
  {
    v21 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v21 = v6 | 7;
    v22 = v21 + 1;
    v19 = operator new(v21 + 1);
    __p[1] = (void *)v6;
    v57 = v22 | 0x8000000000000000;
    __p[0] = v19;
  }
  else
  {
    HIBYTE(v57) = v6;
    if (!v6)
    {
      LOBYTE(__p[0]) = 0;
      v58 = 1;
      v20 = object[0];
      if ((SHIBYTE(v57) & 0x80000000) == 0)
        goto LABEL_28;
      goto LABEL_34;
    }
  }
  memmove(v19, v7, v6);
  *((_BYTE *)v19 + v6) = 0;
  v58 = 1;
  v20 = object[0];
  if ((SHIBYTE(v57) & 0x80000000) == 0)
  {
LABEL_28:
    if (!v55)
      goto LABEL_37;
LABEL_35:
    if (SHIBYTE(v54) < 0)
      operator delete(object[1]);
    goto LABEL_37;
  }
LABEL_34:
  operator delete(__p[0]);
  if (v55)
    goto LABEL_35;
LABEL_37:
  if (object[0])
    os_release(object[0]);
  if (v3 && *(_QWORD *)(v3 + 24))
  {
    v23 = _os_log_pack_size();
    v24 = (std::__shared_weak_count_vtbl *)operator new(v23, (std::align_val_t)8uLL);
    v25 = (std::__shared_weak_count *)operator new();
    v26 = v25;
    v25->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    v25->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v25->__shared_weak_owners_ = 0;
    v25[1].__vftable = v24;
    do
      v28 = __ldxr(p_shared_owners);
    while (__stxr(v28 + 1, p_shared_owners));
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v26);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v30 = (_QWORD *)operator new();
    v31 = *(unsigned __int8 *)(v4 + 39);
    if ((v31 & 0x80u) == 0)
      v32 = v5;
    else
      v32 = *(_QWORD *)(v4 + 16);
    if ((v31 & 0x80u) != 0)
      v31 = *(_QWORD *)(v4 + 24);
    *v30 = v24;
    v30[1] = v24;
    v30[2] = v26;
    v30[3] = 0;
    v30[4] = 0;
    v30[5] = v32;
    v30[6] = v31;
    *((_BYTE *)v30 + 56) = 16;
    object[0] = v30;
    (*(void (**)(_QWORD, void **))(**(_QWORD **)(v3 + 24) + 40))(*(_QWORD *)(v3 + 24), object);
    v33 = object[0];
    object[0] = 0;
    if (v33)
    {
      v34 = (std::__shared_weak_count *)*((_QWORD *)v33 + 4);
      if (v34)
      {
        v35 = (unint64_t *)&v34->__shared_owners_;
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      v37 = (std::__shared_weak_count *)*((_QWORD *)v33 + 2);
      if (v37)
      {
        v38 = (unint64_t *)&v37->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      MEMORY[0x212BC6398](v33, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);
    LOWORD(object[0]) = 0;
    v40 = (void *)_os_log_send_and_compose_impl();
    if (v40)
      free(v40);
  }
  if (v0)
  {
    sub_20E8C003C((uint64_t)v44, "Range relocalization is not supported");
    sub_20E863570((uint64_t)v44);
  }
  sub_20E863570((uint64_t)v44);
  v41 = v50;
  if (v50)
  {
    v42 = (unint64_t *)&v50->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
}

void sub_20E9C27DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,void *object,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;

  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863570((uint64_t)&a11);
  v29 = a19;
  if (a19)
  {
    p_shared_owners = (unint64_t *)&a19->__shared_owners_;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20E9C2978(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d9applecv3d26VIOEngineAndPosePredictionC1ERKNS0_32VIOEngineAndPosePredictionConfigERKNS_3vio1"
                     "1calibration14HardwareParamsEONSt3__18functionIFvNS5_8cv_types13WeakFrameDataIhEENSA_8optionalINSA_"
                     "5arrayIdLm9EEEEENSF_INSG_IdLm3EEEEESI_SK_RKNSF_INSC_14InertialStateTIdLj9EEEEENSF_INS5_15odometry_e"
                     "ngine11VIOMetadataEEEEEEONSB_IFvRKNSA_6vectorINS5_4math17Point3DHomogenousIdEENSA_9allocatorISZ_EEE"
                     "ERKNSW_IyNS10_IyEEEERKNSW_IdNS10_IdEEEEdEEES1F_ONSB_IFvRKSH_dEEEONSB_IFvNSQ_19OdometryEngineErrorEd"
                     "EEEONSB_IFvdRKNSA_13unordered_mapINS_3esn6random4UUIDEN3cva15SE3GroupStorageIdNS1T_6MatrixIdLj4ELj4"
                     "ELb1EEEEENSA_4hashIS1S_EENSA_8equal_toIS1S_EENS10_INSA_4pairIKS1S_S1X_EEEEEEEEEONSB_IFvNS5_8metadat"
                     "a32VIOEngineNodeRelocalizationEventEEEEONSB_IFvhRKNSW_IhNS10_IhEEEES2K_EEERNS_3kit11concurrency21No"
                     "deTaskSchedulerPoolEE3$_8")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d9applecv3d26VIOEngineAndPosePredictionC1ERKNS0_32VIOEngineAndPosePredictionConfig"
                                "ERKNS_3vio11calibration14HardwareParamsEONSt3__18functionIFvNS5_8cv_types13WeakFrameData"
                                "IhEENSA_8optionalINSA_5arrayIdLm9EEEEENSF_INSG_IdLm3EEEEESI_SK_RKNSF_INSC_14InertialStat"
                                "eTIdLj9EEEEENSF_INS5_15odometry_engine11VIOMetadataEEEEEEONSB_IFvRKNSA_6vectorINS5_4math"
                                "17Point3DHomogenousIdEENSA_9allocatorISZ_EEEERKNSW_IyNS10_IyEEEERKNSW_IdNS10_IdEEEEdEEES"
                                "1F_ONSB_IFvRKSH_dEEEONSB_IFvNSQ_19OdometryEngineErrorEdEEEONSB_IFvdRKNSA_13unordered_map"
                                "INS_3esn6random4UUIDEN3cva15SE3GroupStorageIdNS1T_6MatrixIdLj4ELj4ELb1EEEEENSA_4hashIS1S"
                                "_EENSA_8equal_toIS1S_EENS10_INSA_4pairIKS1S_S1X_EEEEEEEEEONSB_IFvNS5_8metadata32VIOEngin"
                                "eNodeRelocalizationEventEEEEONSB_IFvhRKNSW_IhNS10_IhEEEES2K_EEERNS_3kit11concurrency21No"
                                "deTaskSchedulerPoolEE3$_8" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d9applecv3d26VIOEngineAndPosePredictionC1ERKNS0_32VIOEngineAndPosePredictionConfigERKNS_3vio11calibration14HardwareParamsEONSt3__18functionIFvNS5_8cv_types13WeakFrameDataIhEENSA_8optionalINSA_5arrayIdLm9EEEEENSF_INSG_IdLm3EEEEESI_SK_RKNSF_INSC_14InertialStateTIdLj9EEEEENSF_INS5_15odometry_engine11VIOMetadataEEEEEEONSB_IFvRKNSA_6vectorINS5_4math17Point3DHomogenousIdEENSA_9allocatorISZ_EEEERKNSW_IyNS10_IyEEEERKNSW_IdNS10_IdEEEEdEEES1F_ONSB_IFvRKSH_dEEEONSB_IFvNSQ_19OdometryEngineErrorEdEEEONSB_IFvdRKNSA_13unordered_mapINS_3esn6random4UUIDEN3cva15SE3GroupStorageIdNS1T_6MatrixIdLj4ELj4ELb1EEEEENSA_4hashIS1S_EENSA_8equal_toIS1S_EENS10_INSA_4pairIKS1S_S1X_EEEEEEEEEONSB_IFvNS5_8metadata32VIOEngineNodeRelocalizationEventEEEEONSB_IFvhRKNSW_IhNS10_IhEEEES2K_EEERNS_3kit11concurrency21NodeTaskSchedulerPoolEE3$_8"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d9applecv3d26VIOEngineAndPosePredictionC1ERKNS0_32VIOEngineAndPosePredictionConfigERKNS_3vio11calibration14HardwareParamsEONSt3__18functionIFvNS5_8cv_types13WeakFrameDataIhEENSA_8optionalINSA_5arrayIdLm9EEEEENSF_INSG_IdLm3EEEEESI_SK_RKNSF_INSC_14InertialStateTIdLj9EEEEENSF_INS5_15odometry_engine11VIOMetadataEEEEEEONSB_IFvRKNSA_6vectorINS5_4math17Point3DHomogenousIdEENSA_9allocatorISZ_EEEERKNSW_IyNS10_IyEEEERKNSW_IdNS10_IdEEEEdEEES1F_ONSB_IFvRKSH_dEEEONSB_IFvNSQ_19OdometryEngineErrorEdEEEONSB_IFvdRKNSA_13unordered_mapINS_3esn6random4UUIDEN3cva15SE3GroupStorageIdNS1T_6MatrixIdLj4ELj4ELb1EEEEENSA_4hashIS1S_EENSA_8equal_toIS1S_EENS10_INSA_4pairIKS1S_S1X_EEEEEEEEEONSB_IFvNS5_8metadata32VIOEngineNodeRelocalizationEventEEEEONSB_IFvhRKNSW_IhNS10_IhEEEES2K_EEERNS_3kit11concurrency21NodeTaskSchedulerPoolEE3$_8" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E9C29E4()
{
  return &unk_24C9B6538;
}

void sub_20E9C29F4()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20E9C2A08(__n128 *a1)
{
  __n128 *v2;
  __n128 result;
  unint64_t v4;

  v2 = (__n128 *)operator new(0x30uLL);
  v2->n128_u64[0] = (unint64_t)&off_24C9B6558;
  v2->n128_u64[1] = a1->n128_u64[1];
  result = a1[1];
  v2[1] = result;
  v4 = a1[2].n128_u64[1];
  v2[2].n128_u64[0] = a1[2].n128_u64[0];
  v2[2].n128_u64[1] = v4;
  return result;
}

__n128 sub_20E9C2A50(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a2->n128_u64[0] = (unint64_t)&off_24C9B6558;
  a2->n128_u64[1] = a1->n128_u64[1];
  result = a1[1];
  a2[2].n128_u64[0] = a1[2].n128_u64[0];
  a2[1] = result;
  a2[2].n128_u64[1] = a1[2].n128_u64[1];
  return result;
}

_QWORD *sub_20E9C2A88(uint64_t a1)
{
  double *v1;
  double v2;
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  int v9;
  double v10;
  int v11;
  _QWORD *result;
  double v13;
  double v14;
  double v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  double v20;
  BOOL v21;
  __int128 v22;
  uint64_t v23;
  _OWORD v24[2];
  uint64_t v25[16];
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v1 = (double *)(a1 + 8);
  v2 = *(double *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 40);
  v5 = *(double *)(v3 + 304);
  v4 = *(double *)(v3 + 312);
  v6 = *(double *)(v3 + 320);
  v7 = *(double *)(v3 + 328);
  v8 = *(double *)(v3 + 368);
  v9 = *(unsigned __int8 *)(v3 + 384);
  v10 = sub_210215600(3);
  if (v2 < 0.0)
  {
    v11 = 5;
    goto LABEL_3;
  }
  if (*(_BYTE *)(v3 + 416))
  {
    v13 = *(double *)(v3 + 408);
    v11 = 5;
    if (v13 >= v2)
      goto LABEL_3;
    v14 = v2 - v13;
    if (v14 < 0.0)
      goto LABEL_3;
    v15 = v5 * 0.1;
    if (v14 - v8 > v5 * 0.1)
    {
      *(double *)(v3 + 408) = v2;
      *(_BYTE *)(v3 + 416) = 1;
      v11 = 7;
      goto LABEL_3;
    }
  }
  else
  {
    v15 = v5 * 0.1;
    v14 = 0.0;
  }
  *(double *)(v3 + 408) = v2;
  *(_BYTE *)(v3 + 416) = 1;
  if (!v9 || ((v20 = v10 - v2, v20 > v7) ? (v11 = 4) : (v11 = 3), v20 >= v6 ? (v21 = v20 <= v7) : (v21 = 0), v21))
  {
    if (v14 <= 0.0)
      goto LABEL_42;
    if (v5 - v14 > v15)
    {
      v11 = 2;
      goto LABEL_3;
    }
    if (v14 - v4 <= v15)
LABEL_42:
      v11 = 0;
    else
      v11 = 1;
  }
LABEL_3:
  result = (_QWORD *)sub_20E9C4354(v3, v11, *v1);
  if (v11 == 7)
  {
    if (*(_BYTE *)(v3 + 400))
      *(_BYTE *)(v3 + 400) = 0;
    if (*(_BYTE *)(v3 + 416))
      *(_BYTE *)(v3 + 416) = 0;
    if (*(_BYTE *)(v3 + 432))
      *(_BYTE *)(v3 + 432) = 0;
  }
  else if ((v11 | 0xFFFFFFF8) <= 0xFFFFFFFC)
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, double *))(**(_QWORD **)(v3 + 120) + 16))(v25, *(_QWORD *)(v3 + 120), v1);
    if (v26)
    {
      result = (_QWORD *)sub_20E9C19AC(v3, v25);
      v16 = (_BYTE *)v25[7];
      v17 = v25[8];
      while (v16 != (_BYTE *)v17)
      {
        LOBYTE(v24[0]) = *v16;
        v18 = *(_QWORD *)(v3 + 200);
        if (!v18)
          sub_20E86D37C();
        v19 = v16 + 32;
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, _OWORD *, _BYTE *, _BYTE *))(*(_QWORD *)v18 + 48))(v18, v24, v16 + 8, v16 + 32);
        v16 = v19 + 24;
      }
    }
    else
    {
      v22 = *(_OWORD *)(v3 + 568);
      v24[0] = *(_OWORD *)(v3 + 552);
      v24[1] = v22;
      v23 = *(_QWORD *)(v3 + 544);
      if (!v23)
        sub_20E86D37C();
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)v23 + 48))(v23, v24);
    }
    if (v26)
      return sub_20E9C1D58(v25);
  }
  return result;
}

#error "20E9C34A4: call analysis failed (funcsize=1055)"

void sub_20E9C3F18(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_guard_abort(&qword_254A4A510);
    sub_20E860DA4(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20E9C3F3C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;

  if (a2)
  {
    if (a33)
    {
      v34 = *(std::__shared_weak_count **)(a33 + 32);
      if (v34)
      {
        p_shared_owners = (unint64_t *)&v34->__shared_owners_;
        do
          v36 = __ldaxr(p_shared_owners);
        while (__stlxr(v36 - 1, p_shared_owners));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      v37 = *(std::__shared_weak_count **)(a33 + 16);
      if (v37)
      {
        v38 = (unint64_t *)&v37->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      MEMORY[0x212BC6398](a33, 0x10F0C40B62ED6C6);
      sub_20E860DA4(a1);
    }
    sub_20E860DA4(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20E9C412C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t *v15;
  unint64_t v17;
  unint64_t v18;

  if (a2)
  {
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    do
      v18 = __ldaxr(v14);
    while (__stlxr(v18 - 1, v14));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
      std::__shared_weak_count::__release_weak(a13);
      sub_20E860DA4(a1);
    }
    sub_20E860DA4(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20E9C4174(_Unwind_Exception *a1, int a2)
{
  int v2;
  unint64_t *v3;
  void *v4;
  unint64_t v5;

  if (a2)
  {
    if (v2 < 0)
      operator delete(v4);
    do
      v5 = __ldaxr(v3);
    while (__stlxr(v5 - 1, v3));
    JUMPOUT(0x20E9C41D4);
  }
  _Unwind_Resume(a1);
}

void sub_20E9C418C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x20E9C4198);
  _Unwind_Resume(a1);
}

void sub_20E9C41BC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x20E9C41C4);
  _Unwind_Resume(a1);
}

void sub_20E9C4200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *object,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40)
{
  if (a2)
  {
    if (a40 && a39 < 0)
      operator delete(__p);
    if (object)
      os_release(object);
    sub_20E860DA4(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20E9C4264(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x20E9C426CLL);
  _Unwind_Resume(a1);
}

void sub_20E9C4284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *object,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40)
{
  if (a2)
  {
    if (a40 && a39 < 0)
      operator delete(__p);
    if (object)
      os_release(object);
    sub_20E860DA4(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20E9C42C4(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x20E9C42CCLL);
  JUMPOUT(0x20E9C42D4);
}

uint64_t sub_20E9C42DC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE18AddGyroMeasuremen"
                     "tERKNS0_8cv_types15GyroMeasurementEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE18AddGyr"
                                "oMeasurementERKNS0_8cv_types15GyroMeasurementEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE18AddGyroMeasurementERKNS0_8cv_types15GyroMeasurementEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE18AddGyroMeasurementERKNS0_8cv_types15GyroMeasurementEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E9C4348()
{
  return &unk_24C9B65B8;
}

uint64_t sub_20E9C4354(uint64_t result, int a2, double a3)
{
  int v3;
  uint64_t v4;
  double v5;
  int v6;

  switch(a2)
  {
    case 1:
      v6 = 0;
      goto LABEL_12;
    case 2:
      v3 = 1;
      goto LABEL_11;
    case 3:
      v3 = 2;
      goto LABEL_11;
    case 4:
      v3 = 3;
      goto LABEL_11;
    case 5:
      v3 = 8;
      goto LABEL_11;
    case 6:
      v3 = 11;
      goto LABEL_11;
    case 7:
      v3 = 12;
      goto LABEL_11;
    case 8:
      v3 = 13;
      goto LABEL_11;
    case 9:
      v3 = 19;
LABEL_11:
      v6 = v3;
LABEL_12:
      v5 = a3;
      v4 = *(_QWORD *)(result + 464);
      if (!v4)
        sub_20E86D37C();
      result = (*(uint64_t (**)(uint64_t, int *, double *))(*(_QWORD *)v4 + 48))(v4, &v6, &v5);
      break;
    default:
      return result;
  }
  return result;
}

void sub_20E9C4400()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20E9C4414(__n128 *a1)
{
  __n128 *v2;
  __n128 result;
  unint64_t v4;

  v2 = (__n128 *)operator new(0x30uLL);
  v2->n128_u64[0] = (unint64_t)&off_24C9B65D8;
  v2->n128_u64[1] = a1->n128_u64[1];
  result = a1[1];
  v2[1] = result;
  v4 = a1[2].n128_u64[1];
  v2[2].n128_u64[0] = a1[2].n128_u64[0];
  v2[2].n128_u64[1] = v4;
  return result;
}

__n128 sub_20E9C445C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a2->n128_u64[0] = (unint64_t)&off_24C9B65D8;
  a2->n128_u64[1] = a1->n128_u64[1];
  result = a1[1];
  a2[2].n128_u64[0] = a1[2].n128_u64[0];
  a2[1] = result;
  a2[2].n128_u64[1] = a1[2].n128_u64[1];
  return result;
}

_QWORD *sub_20E9C4494(uint64_t a1)
{
  double *v1;
  double v2;
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  int v9;
  double v10;
  int v11;
  _QWORD *result;
  double v13;
  double v14;
  double v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  double v20;
  BOOL v21;
  __int128 v22;
  uint64_t v23;
  _OWORD v24[2];
  uint64_t v25[16];
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v1 = (double *)(a1 + 8);
  v2 = *(double *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 40);
  v5 = *(double *)(v3 + 304);
  v4 = *(double *)(v3 + 312);
  v6 = *(double *)(v3 + 320);
  v7 = *(double *)(v3 + 328);
  v8 = *(double *)(v3 + 368);
  v9 = *(unsigned __int8 *)(v3 + 384);
  v10 = sub_210215600(3);
  if (v2 < 0.0)
  {
    v11 = 5;
    goto LABEL_3;
  }
  if (*(_BYTE *)(v3 + 400))
  {
    v13 = *(double *)(v3 + 392);
    v11 = 5;
    if (v13 >= v2)
      goto LABEL_3;
    v14 = v2 - v13;
    if (v14 < 0.0)
      goto LABEL_3;
    v15 = v5 * 0.1;
    if (v14 - v8 > v5 * 0.1)
    {
      *(double *)(v3 + 392) = v2;
      *(_BYTE *)(v3 + 400) = 1;
      v11 = 7;
      goto LABEL_3;
    }
  }
  else
  {
    v15 = v5 * 0.1;
    v14 = 0.0;
  }
  *(double *)(v3 + 392) = v2;
  *(_BYTE *)(v3 + 400) = 1;
  if (!v9 || ((v20 = v10 - v2, v20 > v7) ? (v11 = 4) : (v11 = 3), v20 >= v6 ? (v21 = v20 <= v7) : (v21 = 0), v21))
  {
    if (v14 <= 0.0)
      goto LABEL_42;
    if (v5 - v14 > v15)
    {
      v11 = 2;
      goto LABEL_3;
    }
    if (v14 - v4 <= v15)
LABEL_42:
      v11 = 0;
    else
      v11 = 1;
  }
LABEL_3:
  result = (_QWORD *)sub_20E9C4354(v3, v11, *v1);
  if (v11 == 7)
  {
    if (*(_BYTE *)(v3 + 400))
      *(_BYTE *)(v3 + 400) = 0;
    if (*(_BYTE *)(v3 + 416))
      *(_BYTE *)(v3 + 416) = 0;
    if (*(_BYTE *)(v3 + 432))
      *(_BYTE *)(v3 + 432) = 0;
  }
  else if ((v11 | 0xFFFFFFF8) <= 0xFFFFFFFC)
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, double *))(**(_QWORD **)(v3 + 120) + 32))(v25, *(_QWORD *)(v3 + 120), v1);
    if (v26)
    {
      result = (_QWORD *)sub_20E9C19AC(v3, v25);
      v16 = (_BYTE *)v25[7];
      v17 = v25[8];
      while (v16 != (_BYTE *)v17)
      {
        LOBYTE(v24[0]) = *v16;
        v18 = *(_QWORD *)(v3 + 200);
        if (!v18)
          sub_20E86D37C();
        v19 = v16 + 32;
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, _OWORD *, _BYTE *, _BYTE *))(*(_QWORD *)v18 + 48))(v18, v24, v16 + 8, v16 + 32);
        v16 = v19 + 24;
      }
    }
    else
    {
      v22 = *(_OWORD *)(v3 + 568);
      v24[0] = *(_OWORD *)(v3 + 552);
      v24[1] = v22;
      v23 = *(_QWORD *)(v3 + 544);
      if (!v23)
        sub_20E86D37C();
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)v23 + 48))(v23, v24);
    }
    if (v26)
      return sub_20E9C1D58(v25);
  }
  return result;
}

#error "20E9C4EB0: call analysis failed (funcsize=1055)"

void sub_20E9C5924(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_guard_abort(&qword_254A4A510);
    sub_20E860DA4(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20E9C5948(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;

  if (a2)
  {
    if (a33)
    {
      v34 = *(std::__shared_weak_count **)(a33 + 32);
      if (v34)
      {
        p_shared_owners = (unint64_t *)&v34->__shared_owners_;
        do
          v36 = __ldaxr(p_shared_owners);
        while (__stlxr(v36 - 1, p_shared_owners));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      v37 = *(std::__shared_weak_count **)(a33 + 16);
      if (v37)
      {
        v38 = (unint64_t *)&v37->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      MEMORY[0x212BC6398](a33, 0x10F0C40B62ED6C6);
      sub_20E860DA4(a1);
    }
    sub_20E860DA4(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20E9C5B38(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t *v15;
  unint64_t v17;
  unint64_t v18;

  if (a2)
  {
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    do
      v18 = __ldaxr(v14);
    while (__stlxr(v18 - 1, v14));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
      std::__shared_weak_count::__release_weak(a13);
      sub_20E860DA4(a1);
    }
    sub_20E860DA4(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20E9C5B80(_Unwind_Exception *a1, int a2)
{
  int v2;
  unint64_t *v3;
  void *v4;
  unint64_t v5;

  if (a2)
  {
    if (v2 < 0)
      operator delete(v4);
    do
      v5 = __ldaxr(v3);
    while (__stlxr(v5 - 1, v3));
    JUMPOUT(0x20E9C5BE0);
  }
  _Unwind_Resume(a1);
}

void sub_20E9C5B98(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x20E9C5BA4);
  _Unwind_Resume(a1);
}

void sub_20E9C5BC8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x20E9C5BD0);
  _Unwind_Resume(a1);
}

void sub_20E9C5C0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *object,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40)
{
  if (a2)
  {
    if (a40 && a39 < 0)
      operator delete(__p);
    if (object)
      os_release(object);
    sub_20E860DA4(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20E9C5C70(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x20E9C5C78);
  _Unwind_Resume(a1);
}

void sub_20E9C5C90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *object,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40)
{
  if (a2)
  {
    if (a40 && a39 < 0)
      operator delete(__p);
    if (object)
      os_release(object);
    sub_20E860DA4(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20E9C5CD0(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x20E9C5CD8);
  JUMPOUT(0x20E9C5CE0);
}

uint64_t sub_20E9C5CE8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE27AddAccelerometerM"
                     "easurementERKNS0_8cv_types24AccelerometerMeasurementEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE27AddAcc"
                                "elerometerMeasurementERKNS0_8cv_types24AccelerometerMeasurementEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE27AddAccelerometerMeasurementERKNS0_8cv_types24AccelerometerMeasurementEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE27AddAccelerometerMeasurementERKNS0_8cv_types24AccelerometerMeasurementEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E9C5D54()
{
  return &unk_24C9B6638;
}

void sub_20E9C5D60(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  char *v10;
  _BYTE *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _QWORD *v16;
  uint64_t v17;
  void *__p[2];
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _BYTE v30[24];
  _BYTE *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_20E860C04(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v19 = *(_QWORD *)(a2 + 16);
  }
  v4 = *(_QWORD *)(a2 + 24);
  v20 = v4;
  v5 = *(_OWORD *)(a2 + 112);
  v25 = *(_OWORD *)(a2 + 96);
  v26 = v5;
  v6 = *(_OWORD *)(a2 + 144);
  v27 = *(_OWORD *)(a2 + 128);
  v28 = v6;
  v7 = *(_OWORD *)(a2 + 48);
  v21 = *(_OWORD *)(a2 + 32);
  v22 = v7;
  v8 = *(_OWORD *)(a2 + 80);
  v23 = *(_OWORD *)(a2 + 64);
  v24 = v8;
  v9 = *(_QWORD *)(a2 + 160);
  v29 = v9;
  v31 = 0;
  v10 = (char *)operator new(0xB0uLL);
  *(_QWORD *)v10 = off_24C9B6668;
  v11 = v10 + 8;
  if (SHIBYTE(v19) < 0)
  {
    sub_20E860C04(v11, __p[0], (unint64_t)__p[1]);
    v4 = v20;
    v9 = v29;
  }
  else
  {
    *(_OWORD *)v11 = *(_OWORD *)__p;
    *((_QWORD *)v10 + 3) = v19;
  }
  *((_QWORD *)v10 + 4) = v4;
  v12 = v26;
  *(_OWORD *)(v10 + 104) = v25;
  *(_OWORD *)(v10 + 120) = v12;
  v13 = v28;
  *(_OWORD *)(v10 + 136) = v27;
  *(_OWORD *)(v10 + 152) = v13;
  v14 = v22;
  *(_OWORD *)(v10 + 40) = v21;
  *(_OWORD *)(v10 + 56) = v14;
  v15 = v24;
  *(_OWORD *)(v10 + 72) = v23;
  *(_OWORD *)(v10 + 88) = v15;
  *((_QWORD *)v10 + 21) = v9;
  v31 = v10;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 40))(a1, v30);
  v16 = v31;
  if (v31 == v30)
  {
    v17 = 4;
    v16 = v30;
  }
  else
  {
    if (!v31)
      goto LABEL_12;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_12:
  if (SHIBYTE(v19) < 0)
    operator delete(__p[0]);
}

void sub_20E9C5EFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  operator delete(v14);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9C5F60(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  *(_QWORD *)result = off_24C9B6668;
  if (*(char *)(result + 31) < 0)
  {
    operator delete(*(void **)(result + 8));
    return v1;
  }
  return result;
}

void sub_20E9C5FAC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C9B6668;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x212BC6398);
}

char *sub_20E9C5FF8(uint64_t a1)
{
  char *v2;
  _BYTE *v3;

  v2 = (char *)operator new(0xB0uLL);
  *(_QWORD *)v2 = off_24C9B6668;
  v3 = v2 + 8;
  if (*(char *)(a1 + 31) < 0)
  {
    sub_20E860C04(v3, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)(a1 + 8);
    *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  }
  *((_QWORD *)v2 + 4) = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(v2 + 120) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(v2 + 136) = *(_OWORD *)(a1 + 136);
  *(_OWORD *)(v2 + 152) = *(_OWORD *)(a1 + 152);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *((_QWORD *)v2 + 21) = *(_QWORD *)(a1 + 168);
  return v2;
}

void sub_20E9C60A8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 sub_20E9C60BC(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  *(_QWORD *)a2 = off_24C9B6668;
  v4 = (_BYTE *)(a2 + 8);
  if (*(char *)(a1 + 31) < 0)
  {
    sub_20E860C04(v4, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(a1 + 8);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
    *(_OWORD *)v4 = v5;
  }
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  v6 = *(_OWORD *)(a1 + 40);
  v7 = *(_OWORD *)(a1 + 56);
  v8 = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 72) = v8;
  *(_OWORD *)(a2 + 56) = v7;
  *(_OWORD *)(a2 + 40) = v6;
  result = *(__n128 *)(a1 + 104);
  v10 = *(_OWORD *)(a1 + 120);
  v11 = *(_OWORD *)(a1 + 136);
  *(_OWORD *)(a2 + 152) = *(_OWORD *)(a1 + 152);
  *(_OWORD *)(a2 + 136) = v11;
  *(_OWORD *)(a2 + 120) = v10;
  *(__n128 *)(a2 + 104) = result;
  *(_QWORD *)(a2 + 168) = *(_QWORD *)(a1 + 168);
  return result;
}

void sub_20E9C6164(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void sub_20E9C6178(void **__p)
{
  void **v1;

  v1 = __p;
  if (*((char *)__p + 31) < 0)
  {
    operator delete(__p[1]);
    __p = v1;
  }
  operator delete(__p);
}

uint64_t sub_20E9C61B8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, double))(**(_QWORD **)(*(_QWORD *)(a1 + 168) + 120)
                                                                     + 144))(*(_QWORD *)(*(_QWORD *)(a1 + 168) + 120), a1 + 8, a1 + 40, *(double *)(a1 + 32));
}

uint64_t sub_20E9C61F0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE9AddAnchorERKNSt3__"
                     "112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEdRKNS_3esn4spanIKdLm9EEERKNSG_ISH_Lm3EEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE9AddAnch"
                                "orERKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEdRKNS_3esn4spanIKdL"
                                "m9EEERKNSG_ISH_Lm3EEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE9AddAnchorERKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEdRKNS_3esn4spanIKdLm9EEERKNSG_ISH_Lm3EEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE9AddAnchorERKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEdRKNS_3esn4spanIKdLm9EEERKNSG_ISH_Lm3EEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E9C625C()
{
  return &unk_24C9B66C8;
}

void sub_20E9C6268(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _BYTE *v6;
  _QWORD *v7;
  uint64_t v8;
  void *__p[2];
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_20E860C04(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v10 = *(_QWORD *)(a2 + 16);
  }
  v4 = *(_QWORD *)(a2 + 24);
  v11 = v4;
  v13 = 0;
  v5 = operator new(0x28uLL);
  *v5 = off_24C9B66E8;
  v6 = v5 + 1;
  if (SHIBYTE(v10) < 0)
  {
    sub_20E860C04(v6, __p[0], (unint64_t)__p[1]);
    v4 = v11;
  }
  else
  {
    *(_OWORD *)v6 = *(_OWORD *)__p;
    v5[3] = v10;
  }
  v5[4] = v4;
  v13 = v5;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 40))(a1, v12);
  v7 = v13;
  if (v13 == v12)
  {
    v8 = 4;
    v7 = v12;
  }
  else
  {
    if (!v13)
      goto LABEL_12;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_12:
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
}

void sub_20E9C6394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  void *v20;

  operator delete(v20);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9C63F8(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  *(_QWORD *)result = off_24C9B66E8;
  if (*(char *)(result + 31) < 0)
  {
    operator delete(*(void **)(result + 8));
    return v1;
  }
  return result;
}

void sub_20E9C6444(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C9B66E8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20E9C6490(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;

  v2 = operator new(0x28uLL);
  *v2 = off_24C9B66E8;
  v3 = v2 + 1;
  if (*(char *)(a1 + 31) < 0)
  {
    sub_20E860C04(v3, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  v2[4] = *(_QWORD *)(a1 + 32);
  return v2;
}

void sub_20E9C650C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_BYTE *sub_20E9C6520(uint64_t a1, _QWORD *a2)
{
  _BYTE *result;
  __int128 v5;

  *a2 = off_24C9B66E8;
  result = a2 + 1;
  if (*(char *)(a1 + 31) < 0)
  {
    result = sub_20E860C04(result, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
    a2[4] = *(_QWORD *)(a1 + 32);
  }
  else
  {
    v5 = *(_OWORD *)(a1 + 8);
    a2[3] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)result = v5;
    a2[4] = *(_QWORD *)(a1 + 32);
  }
  return result;
}

void sub_20E9C6590(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void sub_20E9C65A4(void **__p)
{
  void **v1;

  v1 = __p;
  if (*((char *)__p + 31) < 0)
  {
    operator delete(__p[1]);
    __p = v1;
  }
  operator delete(__p);
}

uint64_t sub_20E9C65E4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 120) + 184))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 120), a1 + 8);
}

uint64_t sub_20E9C6610(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE12RemoveAnchorERKNS"
                     "t3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE12Remove"
                                "AnchorERKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE12RemoveAnchorERKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE12RemoveAnchorERKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E9C667C()
{
  return &unk_24C9B6748;
}

uint64_t sub_20E9C6688(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  *(_QWORD *)result = off_24C9B6768;
  if (*(char *)(result + 31) < 0)
  {
    operator delete(*(void **)(result + 8));
    return v1;
  }
  return result;
}

void sub_20E9C66D4(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C9B6768;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20E9C6720(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;

  v2 = operator new(0x28uLL);
  *v2 = off_24C9B6768;
  v3 = v2 + 1;
  if (*(char *)(a1 + 31) < 0)
  {
    sub_20E860C04(v3, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  v2[4] = *(_QWORD *)(a1 + 32);
  return v2;
}

void sub_20E9C679C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_BYTE *sub_20E9C67B0(uint64_t a1, _QWORD *a2)
{
  _BYTE *result;
  __int128 v5;

  *a2 = off_24C9B6768;
  result = a2 + 1;
  if (*(char *)(a1 + 31) < 0)
  {
    result = sub_20E860C04(result, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
    a2[4] = *(_QWORD *)(a1 + 32);
  }
  else
  {
    v5 = *(_OWORD *)(a1 + 8);
    a2[3] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)result = v5;
    a2[4] = *(_QWORD *)(a1 + 32);
  }
  return result;
}

void sub_20E9C6820(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void sub_20E9C6834(void **__p)
{
  void **v1;

  v1 = __p;
  if (*((char *)__p + 31) < 0)
  {
    operator delete(__p[1]);
    __p = v1;
  }
  operator delete(__p);
}

void sub_20E9C6874(uint64_t a1)
{
  uint64_t v1;
  std::string *v2;
  std::string *v3;
  std::string *v4;

  v3 = *(std::string **)(a1 + 8);
  v1 = a1 + 8;
  v2 = v3;
  if (*(char *)(v1 + 23) >= 0)
    v4 = (std::string *)v1;
  else
    v4 = v2;
  sub_20EE5C3A4(*(_QWORD *)(*(_QWORD *)(v1 + 24) + 120), v4);
  sub_20E9C6924();
}

uint64_t sub_20E9C68AC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE7SaveMapEPKcEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE7SaveMapEPKcEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE7SaveMapEPKcEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE7SaveMapEPKcEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E9C6918()
{
  return &unk_24C9B67C8;
}

void sub_20E9C6924()
{
  int v0;
  unint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  const char *v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  const char *v10;
  size_t v11;
  void *v12;
  unint64_t v13;
  const char *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  std::__shared_weak_count_vtbl *v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  void *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  _QWORD v59[3];
  int v60;
  const char *v61;
  int v62;
  const char *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  uint64_t v66;
  void *object;
  void *v68[2];
  __int128 v69;
  void *__p[2];
  unint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;

  sub_20E9C1C64(&v66);
  if (**(int **)(v66 + 56) > 2)
    return;
  v0 = *(unsigned __int8 *)(v66 + 72);
  v1 = sub_20E8C31DC(v66, "OSLogSurrogateAppender", 1, 0);
  if (!v0 && v1 == 0)
    return;
  v3 = v1;
  v59[0] = &v66;
  v59[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v59[2] = std::chrono::system_clock::now().__d_.__rep_;
  v60 = 2;
  v61 = "unknown file";
  v62 = 428;
  v64 = 0;
  v65 = 0;
  v63 = "unknown function";
  v4 = v66;
  v5 = v66 + 16;
  if (*(char *)(v66 + 39) < 0)
  {
    v7 = *(const char **)(v66 + 16);
    v6 = *(_QWORD *)(v66 + 24);
    v9 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v9 & 1) != 0)
      goto LABEL_10;
  }
  else
  {
    v6 = *(unsigned __int8 *)(v66 + 39);
    v7 = (const char *)(*(_QWORD *)v59[0] + 16);
    v8 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v8 & 1) != 0)
      goto LABEL_10;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)&object);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
    if ((_BYTE)v69 && SHIBYTE(v68[1]) < 0)
      operator delete(object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_10:
  if (byte_254A4A4F8[23] >= 0)
    v10 = byte_254A4A4F8;
  else
    v10 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v11 = byte_254A4A4F8[23];
  else
    v11 = *(_QWORD *)&byte_254A4A4F8[8];
  object = os_log_create(v10, v7);
  v12 = v68;
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v11 >= 0x17)
  {
    v13 = v3;
    v14 = v7;
    v15 = v4;
    v16 = v0;
    v17 = v5;
    v18 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v18 = v11 | 7;
    v19 = v18 + 1;
    v12 = operator new(v18 + 1);
    v68[1] = (void *)v11;
    *(_QWORD *)&v69 = v19 | 0x8000000000000000;
    v68[0] = v12;
    v5 = v17;
    v0 = v16;
    v4 = v15;
    v7 = v14;
    v3 = v13;
    goto LABEL_23;
  }
  BYTE7(v69) = v11;
  if (v11)
LABEL_23:
    memmove(v12, v10, v11);
  *((_BYTE *)v12 + v11) = 0;
  BYTE8(v69) = 1;
  v20 = __p;
  if (v6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v6 >= 0x17)
  {
    v22 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v22 = v6 | 7;
    v23 = v22 + 1;
    v20 = operator new(v22 + 1);
    __p[1] = (void *)v6;
    v71 = v23 | 0x8000000000000000;
    __p[0] = v20;
  }
  else
  {
    HIBYTE(v71) = v6;
    if (!v6)
    {
      LOBYTE(__p[0]) = 0;
      v72 = 1;
      v21 = object;
      if ((SHIBYTE(v71) & 0x80000000) == 0)
        goto LABEL_28;
      goto LABEL_34;
    }
  }
  memmove(v20, v7, v6);
  *((_BYTE *)v20 + v6) = 0;
  v72 = 1;
  v21 = object;
  if ((SHIBYTE(v71) & 0x80000000) == 0)
  {
LABEL_28:
    if (!BYTE8(v69))
      goto LABEL_37;
LABEL_35:
    if (SBYTE7(v69) < 0)
      operator delete(v68[0]);
    goto LABEL_37;
  }
LABEL_34:
  operator delete(__p[0]);
  if (BYTE8(v69))
    goto LABEL_35;
LABEL_37:
  if (object)
    os_release(object);
  if (v3 && *(_QWORD *)(v3 + 24))
  {
    v24 = _os_log_pack_size();
    v25 = (std::__shared_weak_count_vtbl *)operator new(v24, (std::align_val_t)8uLL);
    v26 = (std::__shared_weak_count *)operator new();
    v27 = v26;
    v26->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    v26->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v26->__shared_weak_owners_ = 0;
    v26[1].__vftable = v25;
    object = v25;
    v68[0] = v25;
    v68[1] = v26;
    do
      v29 = __ldxr(p_shared_owners);
    while (__stxr(v29 + 1, p_shared_owners));
    v69 = 0uLL;
    __p[0] = 0;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v27);
    }
    v31 = object;
    *(_WORD *)_os_log_pack_fill() = 0;
    v32 = operator new();
    v33 = *(unsigned __int8 *)(v4 + 39);
    if ((v33 & 0x80u) == 0)
      v34 = v5;
    else
      v34 = *(_QWORD *)(v4 + 16);
    if ((v33 & 0x80u) != 0)
      v33 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)v32 = v31;
    *(_OWORD *)(v32 + 8) = *(_OWORD *)v68;
    v68[0] = 0;
    v68[1] = 0;
    *(_OWORD *)(v32 + 24) = v69;
    v69 = 0uLL;
    *(_QWORD *)(v32 + 40) = v34;
    *(_QWORD *)(v32 + 48) = v33;
    *(_BYTE *)(v32 + 56) = 2;
    v73 = 0;
    v74 = v32;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v3 + 24) + 40))(*(_QWORD *)(v3 + 24), &v74);
    v35 = v74;
    v74 = 0;
    if (v35)
    {
      v36 = *(std::__shared_weak_count **)(v35 + 32);
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      v39 = *(std::__shared_weak_count **)(v35 + 16);
      if (v39)
      {
        v40 = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      MEMORY[0x212BC6398](v35, 0x10F0C40B62ED6C6);
      v42 = v73;
      v73 = 0;
      if (v42)
      {
        v43 = *(std::__shared_weak_count **)(v42 + 32);
        if (v43)
        {
          v44 = (unint64_t *)&v43->__shared_owners_;
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
        }
        v46 = *(std::__shared_weak_count **)(v42 + 16);
        if (v46)
        {
          v47 = (unint64_t *)&v46->__shared_owners_;
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
        MEMORY[0x212BC6398](v42, 0x10F0C40B62ED6C6);
      }
    }
    v49 = (std::__shared_weak_count *)*((_QWORD *)&v69 + 1);
    if (*((_QWORD *)&v69 + 1))
    {
      v50 = (unint64_t *)(*((_QWORD *)&v69 + 1) + 8);
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    v52 = (std::__shared_weak_count *)v68[1];
    if (v68[1])
    {
      v53 = (unint64_t *)((char *)v68[1] + 8);
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
  }
  else
  {
    os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG);
    LOWORD(object) = 0;
    v55 = (void *)_os_log_send_and_compose_impl();
    if (v55)
      free(v55);
  }
  if (v0)
  {
    sub_20E8C003C((uint64_t)v59, "PropagateAnchorUpdates not supported. If you need this switch to SLAMSession");
    sub_20E863570((uint64_t)v59);
  }
  sub_20E863570((uint64_t)v59);
  v56 = v65;
  if (v65)
  {
    v57 = (unint64_t *)&v65->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
}

void sub_20E9C7004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a27)
  {
    if (a26 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20E9C7044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  sub_20E86E8C4((uint64_t *)(v3 - 96));
  sub_20E86E8C4((uint64_t *)(v3 - 104));
  sub_20E86E658((uint64_t)va1);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E9C7078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  MEMORY[0x212BC6398](v3, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E9C70A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E9C70C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E9C70D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *object,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a28 && a27 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20E9C711C()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20E9C7130(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9B67E8;
  result[1] = v3;
  return result;
}

uint64_t sub_20E9C7164(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9B67E8;
  a2[1] = v2;
  return result;
}

uint64_t sub_20E9C7180(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 120);
  v3 = 0;
  return sub_20EE560F4(v1, &v3);
}

void sub_20E9C71B4(void *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20EE56630((void ***)va);
  sub_20E860DA4(a1);
}

uint64_t sub_20E9C71C8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE8ClearMapEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE8ClearMapEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE8ClearMapEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE8ClearMapEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E9C7234()
{
  return &unk_24C9B6848;
}

void sub_20E9C7240(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _BYTE v17[24];
  _BYTE *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  v3 = (std::__shared_weak_count *)a2[1];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = a2[2];
  v18 = 0;
  v8 = operator new(0x20uLL);
  *v8 = &off_24C9B6868;
  v8[1] = v4;
  v8[2] = v3;
  if (v3)
  {
    v9 = (unint64_t *)&v3->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v8[3] = v7;
  v18 = v8;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 40))(a1, v17);
  v13 = v18;
  if (v18 == v17)
  {
    v14 = 4;
    v13 = v17;
  }
  else
  {
    if (!v18)
      goto LABEL_12;
    v14 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v13 + 8 * v14))(v13, v11, v12);
LABEL_12:
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20E9C7374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
    {
      sub_20E86665C((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E9C73C8(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C9B6868;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20E9C743C(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C9B6868;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20E9C74B0(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9B6868;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20E9C7508(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9B6868;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20E9C7540(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_20E9C7598(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

void sub_20E9C7600(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  __int128 v4;
  uint64_t v5;

  (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 120) + 192))(&v4);
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(void **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(v2 + 8) = v3;
    operator delete(v3);
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 16) = 0;
  }
  *(_OWORD *)v2 = v4;
  *(_QWORD *)(v2 + 16) = v5;
  sub_20E9C6924();
}

uint64_t sub_20E9C7670(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE12SerializeMapERKNS"
                     "t3__110shared_ptrINS6_6vectorIhNS6_9allocatorIhEEEEEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE12Serial"
                                "izeMapERKNSt3__110shared_ptrINS6_6vectorIhNS6_9allocatorIhEEEEEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE12SerializeMapERKNSt3__110shared_ptrINS6_6vectorIhNS6_9allocatorIhEEEEEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE12SerializeMapERKNSt3__110shared_ptrINS6_6vectorIhNS6_9allocatorIhEEEEEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E9C76DC()
{
  return &unk_24C9B68C8;
}

void sub_20E9C76E8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B6A40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20E9C76F8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B6A40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E9C7728(uint64_t a1)
{
  return sub_20E9545B0(a1 + 24);
}

uint64_t *sub_20E9C7734@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  unint64_t *v7;
  int v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::runtime_error *exception;
  std::runtime_error *v18;
  std::runtime_error v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;

  v6 = operator new();
  *(_QWORD *)(v6 + 8) = 0;
  v7 = (unint64_t *)(v6 + 8);
  *(_QWORD *)(v6 + 24) = 850045863;
  *(_QWORD *)(v6 + 16) = 0;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 1018212795;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 124) = 0u;
  *(_QWORD *)v6 = &off_24C9B68E8;
  v23 = v6;
  *a3 = v6;
  std::mutex::lock((std::mutex *)(v6 + 24));
  v8 = *(_DWORD *)(v6 + 136);
  if ((v8 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v9 = __ldxr(v7);
  while (__stxr(v9 + 1, v7));
  *(_DWORD *)(v6 + 136) = v8 | 2;
  std::mutex::unlock((std::mutex *)(v6 + 24));
  v21 = 0;
  v22 = 0;
  v10 = (std::__shared_weak_count *)a1[1];
  if (!v10
    || (v11 = std::__shared_weak_count::lock(v10), (v22 = v11) == 0)
    || (v12 = v11, v13 = *a1, (v21 = v13) == 0))
  {
    std::runtime_error::runtime_error(&v19, "ChannelInputWithPromise: Invalid operation. Processor is released.");
    v19.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v18 = std::runtime_error::runtime_error(exception, &v19);
    v18->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v18, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v20 = v23;
  v23 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v13 + 56))(v13, a2, &v20);
  sub_20E9B9960(&v20);
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  return sub_20E9B9960(&v23);
}

void sub_20E9C78E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  unint64_t *v4;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  va_list va2;

  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  sub_20E9B9960((uint64_t *)va);
  sub_20E86665C((uint64_t)va1);
  v6 = v4 + 1;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
    (*(void (**)(unint64_t *))(*v4 + 16))(v4);
  sub_20E9B9960((uint64_t *)va2);
  _Unwind_Resume(a1);
}

void sub_20E9C78F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  std::mutex *v15;

  std::mutex::unlock(v15);
  sub_20E9B9960(&a15);
  _Unwind_Resume(a1);
}

void sub_20E9C7914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20E9B9960((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20E9C7928(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__assoc_sub_state *a14, std::exception_ptr a15)
{
  std::__assoc_sub_state *v15;
  std::exception_ptr v16;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v15 = a14;
  if (a14)
  {
    std::exception_ptr::exception_ptr(&a15, &a10);
    v16.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v15, v16);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a10);
    std::runtime_error::~runtime_error(&a9);
    if (!a13)
      JUMPOUT(0x20E9C7874);
    JUMPOUT(0x20E9C7844);
  }
  sub_20E96CE78(3u);
}

void sub_20E9C7988(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, std::exception_ptr a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t *v15;
  uint64_t v16;

  std::exception_ptr::~exception_ptr(&a10);
  std::runtime_error::~runtime_error(&a9);
  v16 = *v15;
  sub_20E86665C((uint64_t)&a12);
  if (!v16)
    JUMPOUT(0x20E9C79F8);
  JUMPOUT(0x20E9C79D0);
}

void sub_20E9C7A08(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_20E9C7A54(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E9C7AB4(uint64_t a1)
{
  void *v2;
  char *v3;
  void *v4;
  void *v5;
  char *v7;
  void *v8;

  if ((*(_BYTE *)(a1 + 136) & 1) != 0)
  {
    v2 = *(void **)(a1 + 208);
    if (v2)
    {
      *(_QWORD *)(a1 + 216) = v2;
      operator delete(v2);
    }
    v3 = *(char **)(a1 + 184);
    if (v3)
    {
      do
      {
        v7 = *(char **)v3;
        v8 = (void *)*((_QWORD *)v3 + 5);
        if (v8)
        {
          *((_QWORD *)v3 + 6) = v8;
          operator delete(v8);
        }
        if (v3[39] < 0)
          operator delete(*((void **)v3 + 2));
        operator delete(v3);
        v3 = v7;
      }
      while (v7);
    }
    v4 = *(void **)(a1 + 168);
    *(_QWORD *)(a1 + 168) = 0;
    if (v4)
      operator delete(v4);
    v5 = *(void **)(a1 + 144);
    if (v5)
    {
      *(_QWORD *)(a1 + 152) = v5;
      operator delete(v5);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

void sub_20E9C7B5C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  std::exception_ptr v11;
  std::exception_ptr v12;
  std::exception_ptr v13;
  std::unique_lock<std::mutex> __lk;

  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 24);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 24));
  std::__assoc_sub_state::__sub_wait((std::__assoc_sub_state *)a1, &__lk);
  v4 = *(_QWORD *)(a1 + 16);
  v13.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v13);
  if (v4)
  {
    std::exception_ptr::exception_ptr(&v12, (const std::exception_ptr *)(a1 + 16));
    v11.__ptr_ = &v12;
    std::rethrow_exception(v11);
    __break(1u);
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 184);
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 144);
    *(_QWORD *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 152) = 0;
    v7 = *(_QWORD *)(a1 + 160);
    v6 = *(_QWORD *)(a1 + 168);
    v8 = *(_QWORD *)(a1 + 176);
    *(_QWORD *)(a1 + 168) = 0;
    *(_QWORD *)(a1 + 176) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a2 + 16) = v7;
    *(_QWORD *)(a2 + 24) = v6;
    *(_QWORD *)(a2 + 32) = v8;
    *(_QWORD *)(a2 + 40) = v5;
    v9 = *(_QWORD *)(a1 + 192);
    *(_QWORD *)(a2 + 48) = v9;
    *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 200);
    if (v9)
    {
      v10 = *(_QWORD *)(v5 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v10 >= v8)
          v10 %= v8;
      }
      else
      {
        v10 &= v8 - 1;
      }
      *(_QWORD *)(v6 + 8 * v10) = a2 + 40;
      *(_QWORD *)(a1 + 184) = 0;
      *(_QWORD *)(a1 + 192) = 0;
    }
    *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 208);
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 224);
    *(_QWORD *)(a1 + 216) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 208) = 0;
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
  }
}

void sub_20E9C7C7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12)
{
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  if (a12)
    std::mutex::unlock(a11);
  _Unwind_Resume(a1);
}

void sub_20E9C7CAC()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20E9C7CC0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9B6930;
  result[1] = v3;
  return result;
}

uint64_t sub_20E9C7CF4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9B6930;
  a2[1] = v2;
  return result;
}

_QWORD *sub_20E9C7D10(uint64_t a1)
{
  uint64_t v1;
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 120);
  *(_BYTE *)(v1 + 284) = 1;
  result = *(_QWORD **)(v1 + 11472);
  if (!result[5] || !result[7] || !result[8] || !result[9])
  {
    v3 = *(_QWORD *)(v1 + 11488) + 40;
    v5[0] = &off_24C9FDC80;
    v5[1] = result;
    v6 = v5;
    sub_20F300190(result, v5, v3);
    result = v6;
    if (v6 == v5)
    {
      v4 = 4;
      result = v5;
    }
    else
    {
      if (!v6)
        return result;
      v4 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
  }
  return result;
}

void sub_20E9C7DE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  if (!a2)
    _Unwind_Resume(exception_object);
  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_8;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_8:
  sub_20E860DA4(exception_object);
}

uint64_t sub_20E9C7E28(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE26EnableCollaborati"
                     "veMappingEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE26Enable"
                                "CollaborativeMappingEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE26EnableCollaborativeMappingEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE26EnableCollaborativeMappingEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E9C7E94()
{
  return &unk_24C9B6990;
}

uint64_t *sub_20E9C7EA0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  unint64_t *v7;
  int v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::runtime_error *exception;
  std::runtime_error *v18;
  std::runtime_error v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;

  v6 = operator new();
  *(_QWORD *)(v6 + 8) = 0;
  v7 = (unint64_t *)(v6 + 8);
  *(_QWORD *)(v6 + 24) = 850045863;
  *(_QWORD *)(v6 + 16) = 0;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 1018212795;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 124) = 0u;
  *(_QWORD *)v6 = &off_24C9B69B0;
  v23 = v6;
  *a3 = v6;
  std::mutex::lock((std::mutex *)(v6 + 24));
  v8 = *(_DWORD *)(v6 + 136);
  if ((v8 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v9 = __ldxr(v7);
  while (__stxr(v9 + 1, v7));
  *(_DWORD *)(v6 + 136) = v8 | 2;
  std::mutex::unlock((std::mutex *)(v6 + 24));
  v21 = 0;
  v22 = 0;
  v10 = (std::__shared_weak_count *)a1[1];
  if (!v10
    || (v11 = std::__shared_weak_count::lock(v10), (v22 = v11) == 0)
    || (v12 = v11, v13 = *a1, (v21 = v13) == 0))
  {
    std::runtime_error::runtime_error(&v19, "ChannelInputWithPromise: Invalid operation. Processor is released.");
    v19.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v18 = std::runtime_error::runtime_error(exception, &v19);
    v18->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v18, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v20 = v23;
  v23 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v13 + 56))(v13, a2, &v20);
  sub_20E9B2AE0(&v20);
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  return sub_20E9B2AE0(&v23);
}

void sub_20E9C8054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  unint64_t *v4;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  va_list va2;

  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  sub_20E9B2AE0((uint64_t *)va);
  sub_20E86665C((uint64_t)va1);
  v6 = v4 + 1;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
    (*(void (**)(unint64_t *))(*v4 + 16))(v4);
  sub_20E9B2AE0((uint64_t *)va2);
  _Unwind_Resume(a1);
}

void sub_20E9C8064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  std::mutex *v15;

  std::mutex::unlock(v15);
  sub_20E9B2AE0(&a15);
  _Unwind_Resume(a1);
}

void sub_20E9C8080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20E9B2AE0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20E9C8094(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__assoc_sub_state *a14, std::exception_ptr a15)
{
  std::__assoc_sub_state *v15;
  std::exception_ptr v16;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v15 = a14;
  if (a14)
  {
    std::exception_ptr::exception_ptr(&a15, &a10);
    v16.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v15, v16);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a10);
    std::runtime_error::~runtime_error(&a9);
    if (!a13)
      JUMPOUT(0x20E9C7FE0);
    JUMPOUT(0x20E9C7FB0);
  }
  sub_20E96CE78(3u);
}

void sub_20E9C80F4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, std::exception_ptr a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t *v15;
  uint64_t v16;

  std::exception_ptr::~exception_ptr(&a10);
  std::runtime_error::~runtime_error(&a9);
  v16 = *v15;
  sub_20E86665C((uint64_t)&a12);
  if (!v16)
    JUMPOUT(0x20E9C8164);
  JUMPOUT(0x20E9C813CLL);
}

void sub_20E9C8174(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_20E9C81C0(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E9C8220(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

void sub_20E9C822C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  std::exception_ptr v10;
  std::exception_ptr v11;
  std::exception_ptr v12;
  std::unique_lock<std::mutex> __lk;

  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 24);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 24));
  std::__assoc_sub_state::__sub_wait((std::__assoc_sub_state *)a1, &__lk);
  v4 = *(_QWORD *)(a1 + 16);
  v12.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v12);
  if (v4)
  {
    std::exception_ptr::exception_ptr(&v11, (const std::exception_ptr *)(a1 + 16));
    v10.__ptr_ = &v11;
    std::rethrow_exception(v10);
    __break(1u);
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 160) = 0;
    if (*(_BYTE *)(a1 + 304))
    {
      v5 = *(_OWORD *)(a1 + 160);
      *(_OWORD *)a2 = *(_OWORD *)(a1 + 144);
      *(_OWORD *)(a2 + 16) = v5;
      v6 = *(_OWORD *)(a1 + 256);
      *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 240);
      *(_OWORD *)(a2 + 112) = v6;
      v7 = *(_OWORD *)(a1 + 288);
      *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 272);
      *(_OWORD *)(a2 + 144) = v7;
      v8 = *(_OWORD *)(a1 + 192);
      *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 176);
      *(_OWORD *)(a2 + 48) = v8;
      v9 = *(_OWORD *)(a1 + 224);
      *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 208);
      *(_OWORD *)(a2 + 80) = v9;
      *(_BYTE *)(a2 + 160) = 1;
    }
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
  }
}

void sub_20E9C82FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12)
{
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  if (a12)
    std::mutex::unlock(a11);
  _Unwind_Resume(a1);
}

void sub_20E9C8328(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20E9C889C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20E9C88C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E9C88D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20E9C892C(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

