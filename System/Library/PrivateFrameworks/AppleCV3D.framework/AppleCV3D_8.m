__n128 sub_20EB53AA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v3;
  __n128 result;
  double v5;
  __int128 *v6;
  __int128 *v7;
  __int128 *v8;
  __int128 *v9;
  __int128 *v10;
  __n128 *v11;
  __int128 *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __n128 v30;
  __int128 v31;
  __n128 v32;
  __int128 v33;
  __int128 v34;
  __n128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v3 = *(double *)a2;
  result.n128_u64[0] = *(_QWORD *)a1;
  v5 = *(double *)a3;
  if (*(double *)a2 >= *(double *)a1)
  {
    if (v5 < v3)
    {
      v61 = *(_OWORD *)(a2 + 40);
      v65 = *(_OWORD *)(a2 + 56);
      v69 = *(_QWORD *)(a2 + 72);
      v53 = *(_OWORD *)(a2 + 8);
      v57 = *(_OWORD *)(a2 + 24);
      v45 = *(_OWORD *)(a2 + 96);
      v49 = *(_OWORD *)(a2 + 80);
      v37 = *(_OWORD *)(a2 + 128);
      v41 = *(_OWORD *)(a2 + 112);
      v29 = *(_OWORD *)(a2 + 160);
      v33 = *(_OWORD *)(a2 + 144);
      *(double *)a2 = v5;
      *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
      v16 = *(_OWORD *)(a3 + 24);
      v17 = *(_OWORD *)(a3 + 40);
      v18 = *(_OWORD *)(a3 + 56);
      *(_QWORD *)(a2 + 72) = *(_QWORD *)(a3 + 72);
      *(_OWORD *)(a2 + 56) = v18;
      *(_OWORD *)(a2 + 40) = v17;
      *(_OWORD *)(a2 + 24) = v16;
      *(_OWORD *)(a2 + 80) = *(_OWORD *)(a3 + 80);
      *(_OWORD *)(a2 + 96) = *(_OWORD *)(a3 + 96);
      *(_OWORD *)(a2 + 112) = *(_OWORD *)(a3 + 112);
      *(_OWORD *)(a2 + 128) = *(_OWORD *)(a3 + 128);
      *(_OWORD *)(a2 + 144) = *(_OWORD *)(a3 + 144);
      *(_OWORD *)(a2 + 160) = *(_OWORD *)(a3 + 160);
      *(double *)a3 = v3;
      *(_OWORD *)(a3 + 8) = v53;
      *(_OWORD *)(a3 + 56) = v65;
      *(_OWORD *)(a3 + 40) = v61;
      *(_OWORD *)(a3 + 24) = v57;
      *(_QWORD *)(a3 + 72) = v69;
      *(_OWORD *)(a3 + 80) = v49;
      *(_OWORD *)(a3 + 96) = v45;
      *(_OWORD *)(a3 + 112) = v41;
      *(_OWORD *)(a3 + 128) = v37;
      result.n128_u64[1] = *((_QWORD *)&v33 + 1);
      *(_OWORD *)(a3 + 144) = v33;
      *(_OWORD *)(a3 + 160) = v29;
      result.n128_u64[0] = *(_QWORD *)a1;
      if (*(double *)a2 < *(double *)a1)
      {
        v62 = *(_OWORD *)(a1 + 40);
        v66 = *(_OWORD *)(a1 + 56);
        v70 = *(_QWORD *)(a1 + 72);
        v54 = *(_OWORD *)(a1 + 8);
        v58 = *(_OWORD *)(a1 + 24);
        v46 = *(_OWORD *)(a1 + 96);
        v50 = *(_OWORD *)(a1 + 80);
        v38 = *(_OWORD *)(a1 + 128);
        v42 = *(_OWORD *)(a1 + 112);
        v30 = *(__n128 *)(a1 + 160);
        v34 = *(_OWORD *)(a1 + 144);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
        v19 = *(_OWORD *)(a2 + 24);
        v20 = *(_OWORD *)(a2 + 40);
        v21 = *(_OWORD *)(a2 + 56);
        *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
        *(_OWORD *)(a1 + 56) = v21;
        *(_OWORD *)(a1 + 40) = v20;
        *(_OWORD *)(a1 + 24) = v19;
        *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
        *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
        *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
        *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
        *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
        *(_QWORD *)a2 = result.n128_u64[0];
        *(_QWORD *)(a2 + 72) = v70;
        *(_OWORD *)(a2 + 40) = v62;
        *(_OWORD *)(a2 + 56) = v66;
        *(_OWORD *)(a2 + 8) = v54;
        *(_OWORD *)(a2 + 24) = v58;
        *(_OWORD *)(a2 + 80) = v50;
        *(_OWORD *)(a2 + 96) = v46;
        *(_OWORD *)(a2 + 112) = v42;
        *(_OWORD *)(a2 + 128) = v38;
        *(_OWORD *)(a2 + 144) = v34;
        result = v30;
        *(__n128 *)(a2 + 160) = v30;
      }
    }
  }
  else
  {
    v6 = (__int128 *)(a1 + 8);
    v7 = (__int128 *)(a1 + 80);
    v8 = (__int128 *)(a1 + 96);
    v9 = (__int128 *)(a1 + 112);
    v10 = (__int128 *)(a1 + 128);
    v11 = (__n128 *)(a1 + 144);
    v12 = (__int128 *)(a1 + 160);
    if (v5 >= v3)
    {
      v63 = *(_OWORD *)(a1 + 40);
      v67 = *(_OWORD *)(a1 + 56);
      v71 = *(_QWORD *)(a1 + 72);
      v55 = *v6;
      v59 = *(_OWORD *)(a1 + 24);
      v47 = *v8;
      v51 = *v7;
      v39 = *v10;
      v43 = *v9;
      v31 = *v12;
      v35 = *v11;
      *(double *)a1 = v3;
      *v6 = *(_OWORD *)(a2 + 8);
      v22 = *(_OWORD *)(a2 + 24);
      v23 = *(_OWORD *)(a2 + 40);
      v24 = *(_OWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      *(_OWORD *)(a1 + 40) = v23;
      *(_OWORD *)(a1 + 56) = v24;
      *(_OWORD *)(a1 + 24) = v22;
      *v7 = *(_OWORD *)(a2 + 80);
      *v8 = *(_OWORD *)(a2 + 96);
      *v9 = *(_OWORD *)(a2 + 112);
      *v10 = *(_OWORD *)(a2 + 128);
      *v11 = *(__n128 *)(a2 + 144);
      *v12 = *(_OWORD *)(a2 + 160);
      *(_QWORD *)a2 = result.n128_u64[0];
      *(_OWORD *)(a2 + 8) = v55;
      *(_OWORD *)(a2 + 56) = v67;
      *(_OWORD *)(a2 + 40) = v63;
      *(_OWORD *)(a2 + 24) = v59;
      *(_QWORD *)(a2 + 72) = v71;
      *(_OWORD *)(a2 + 80) = v51;
      *(_OWORD *)(a2 + 96) = v47;
      *(_OWORD *)(a2 + 112) = v43;
      *(_OWORD *)(a2 + 128) = v39;
      *(__n128 *)(a2 + 144) = v35;
      *(_OWORD *)(a2 + 160) = v31;
      if (*(double *)a3 >= result.n128_f64[0])
        return result;
      v60 = *(_OWORD *)(a2 + 40);
      v64 = *(_OWORD *)(a2 + 56);
      v68 = *(_QWORD *)(a2 + 72);
      v52 = *(_OWORD *)(a2 + 8);
      v56 = *(_OWORD *)(a2 + 24);
      v44 = *(_OWORD *)(a2 + 96);
      v48 = *(_OWORD *)(a2 + 80);
      v36 = *(_OWORD *)(a2 + 128);
      v40 = *(_OWORD *)(a2 + 112);
      v28 = *(_OWORD *)(a2 + 160);
      v32 = *(__n128 *)(a2 + 144);
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
      v25 = *(_OWORD *)(a3 + 24);
      v26 = *(_OWORD *)(a3 + 40);
      v27 = *(_OWORD *)(a3 + 56);
      *(_QWORD *)(a2 + 72) = *(_QWORD *)(a3 + 72);
      *(_OWORD *)(a2 + 40) = v26;
      *(_OWORD *)(a2 + 56) = v27;
      *(_OWORD *)(a2 + 24) = v25;
      *(_OWORD *)(a2 + 80) = *(_OWORD *)(a3 + 80);
      *(_OWORD *)(a2 + 96) = *(_OWORD *)(a3 + 96);
      *(_OWORD *)(a2 + 112) = *(_OWORD *)(a3 + 112);
      *(_OWORD *)(a2 + 128) = *(_OWORD *)(a3 + 128);
      *(_OWORD *)(a2 + 144) = *(_OWORD *)(a3 + 144);
      *(_OWORD *)(a2 + 160) = *(_OWORD *)(a3 + 160);
    }
    else
    {
      v60 = *(_OWORD *)(a1 + 40);
      v64 = *(_OWORD *)(a1 + 56);
      v68 = *(_QWORD *)(a1 + 72);
      v52 = *v6;
      v56 = *(_OWORD *)(a1 + 24);
      v44 = *v8;
      v48 = *v7;
      v36 = *v10;
      v40 = *v9;
      v28 = *v12;
      v32 = *v11;
      *(double *)a1 = v5;
      *v6 = *(_OWORD *)(a3 + 8);
      v13 = *(_OWORD *)(a3 + 24);
      v14 = *(_OWORD *)(a3 + 40);
      v15 = *(_OWORD *)(a3 + 56);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a3 + 72);
      *(_OWORD *)(a1 + 40) = v14;
      *(_OWORD *)(a1 + 56) = v15;
      *(_OWORD *)(a1 + 24) = v13;
      *v7 = *(_OWORD *)(a3 + 80);
      *v8 = *(_OWORD *)(a3 + 96);
      *v9 = *(_OWORD *)(a3 + 112);
      *v10 = *(_OWORD *)(a3 + 128);
      *v11 = *(__n128 *)(a3 + 144);
      *v12 = *(_OWORD *)(a3 + 160);
    }
    *(_QWORD *)a3 = result.n128_u64[0];
    *(_OWORD *)(a3 + 8) = v52;
    *(_OWORD *)(a3 + 56) = v64;
    *(_OWORD *)(a3 + 40) = v60;
    *(_OWORD *)(a3 + 24) = v56;
    *(_QWORD *)(a3 + 72) = v68;
    *(_OWORD *)(a3 + 80) = v48;
    *(_OWORD *)(a3 + 96) = v44;
    *(_OWORD *)(a3 + 112) = v40;
    *(_OWORD *)(a3 + 128) = v36;
    result = v32;
    *(__n128 *)(a3 + 144) = v32;
    *(_OWORD *)(a3 + 160) = v28;
  }
  return result;
}

BOOL sub_20EB53F68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  double v6;
  double v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  double *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  double *v15;
  double v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;

  v4 = 0x2E8BA2E8BA2E8BA3 * ((a2 - a1) >> 4);
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(double *)(a2 - 176);
      v7 = *(double *)a1;
      if (v6 < *(double *)a1)
      {
        v39 = *(_OWORD *)(a1 + 40);
        v41 = *(_OWORD *)(a1 + 56);
        v43 = *(_QWORD *)(a1 + 72);
        v35 = *(_OWORD *)(a1 + 8);
        v37 = *(_OWORD *)(a1 + 24);
        v31 = *(_OWORD *)(a1 + 96);
        v33 = *(_OWORD *)(a1 + 80);
        v27 = *(_OWORD *)(a1 + 128);
        v29 = *(_OWORD *)(a1 + 112);
        v23 = *(_OWORD *)(a1 + 160);
        v25 = *(_OWORD *)(a1 + 144);
        *(double *)a1 = v6;
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 - 168);
        v8 = *(_OWORD *)(a2 - 152);
        v9 = *(_OWORD *)(a2 - 136);
        v10 = *(_OWORD *)(a2 - 120);
        *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 - 104);
        *(_OWORD *)(a1 + 56) = v10;
        *(_OWORD *)(a1 + 40) = v9;
        *(_OWORD *)(a1 + 24) = v8;
        *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 - 96);
        *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 - 80);
        *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 - 64);
        *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 - 16);
        *(double *)(a2 - 176) = v7;
        *(_OWORD *)(a2 - 168) = v35;
        *(_OWORD *)(a2 - 120) = v41;
        *(_OWORD *)(a2 - 136) = v39;
        *(_OWORD *)(a2 - 152) = v37;
        *(_QWORD *)(a2 - 104) = v43;
        *(_OWORD *)(a2 - 96) = v33;
        *(_OWORD *)(a2 - 80) = v31;
        *(_OWORD *)(a2 - 64) = v29;
        *(_OWORD *)(a2 - 48) = v27;
        *(_OWORD *)(a2 - 32) = v25;
        *(_OWORD *)(a2 - 16) = v23;
      }
      return result;
    case 3:
      sub_20EB53AA8(a1, a1 + 176, a2 - 176);
      return 1;
    case 4:
      sub_20EB542B4(a1, a1 + 176, a1 + 352, a2 - 176);
      return 1;
    case 5:
      sub_20EB5460C(a1, a1 + 176, a1 + 352, a1 + 528, a2 - 176);
      return 1;
    default:
      v11 = (double *)(a1 + 352);
      sub_20EB53AA8(a1, a1 + 176, a1 + 352);
      v12 = a1 + 528;
      if (a1 + 528 == a2)
        return 1;
      v13 = 0;
      v14 = 352;
      break;
  }
  while (1)
  {
    v16 = *(double *)v12;
    if (*(double *)v12 < *v11)
    {
      v40 = *(_OWORD *)(v12 + 40);
      v42 = *(_OWORD *)(v12 + 56);
      v36 = *(_OWORD *)(v12 + 8);
      v38 = *(_OWORD *)(v12 + 24);
      v32 = *(_OWORD *)(v12 + 96);
      v34 = *(_OWORD *)(v12 + 80);
      v28 = *(_OWORD *)(v12 + 128);
      v30 = *(_OWORD *)(v12 + 112);
      v24 = *(_OWORD *)(v12 + 160);
      v26 = *(_OWORD *)(v12 + 144);
      v44 = *(_QWORD *)(v12 + 72);
      v17 = v14;
      v18 = *v11;
      do
      {
        v19 = a1 + v17;
        *(double *)(v19 + 176) = v18;
        *(_OWORD *)(v19 + 200) = *(_OWORD *)(a1 + v17 + 24);
        *(_OWORD *)(v19 + 216) = *(_OWORD *)(a1 + v17 + 40);
        *(_OWORD *)(v19 + 232) = *(_OWORD *)(a1 + v17 + 56);
        *(_QWORD *)(v19 + 248) = *(_QWORD *)(a1 + v17 + 72);
        *(_OWORD *)(v19 + 184) = *(_OWORD *)(a1 + v17 + 8);
        v20 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v19 + 256) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v19 + 272) = v20;
        v21 = *(_OWORD *)(a1 + v17 + 128);
        *(_OWORD *)(v19 + 288) = *(_OWORD *)(a1 + v17 + 112);
        *(_OWORD *)(v19 + 304) = v21;
        v22 = *(_OWORD *)(a1 + v17 + 160);
        *(_OWORD *)(v19 + 320) = *(_OWORD *)(a1 + v17 + 144);
        *(_OWORD *)(v19 + 336) = v22;
        if (!v17)
        {
          v15 = (double *)a1;
          goto LABEL_7;
        }
        v18 = *(double *)(v19 - 176);
        v17 -= 176;
      }
      while (v16 < v18);
      v15 = (double *)(a1 + v17 + 176);
LABEL_7:
      *v15 = v16;
      *(_OWORD *)(v19 + 24) = v38;
      *(_OWORD *)(v19 + 40) = v40;
      *(_OWORD *)(v19 + 56) = v42;
      *(_QWORD *)(v19 + 72) = v44;
      *(_OWORD *)(v19 + 8) = v36;
      *(_OWORD *)(v19 + 80) = v34;
      *(_OWORD *)(v19 + 96) = v32;
      *(_OWORD *)(v19 + 112) = v30;
      *(_OWORD *)(v19 + 128) = v28;
      ++v13;
      *(_OWORD *)(v19 + 144) = v26;
      *(_OWORD *)(v19 + 160) = v24;
      if (v13 == 8)
        return v12 + 176 == a2;
    }
    v11 = (double *)v12;
    v14 += 176;
    v12 += 176;
    if (v12 == a2)
      return 1;
  }
}

__n128 sub_20EB542B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __n128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  sub_20EB53AA8(a1, a2, a3);
  result.n128_u64[0] = *(_QWORD *)a3;
  if (*(double *)a4 < *(double *)a3)
  {
    v42 = *(_OWORD *)(a3 + 40);
    v45 = *(_OWORD *)(a3 + 56);
    v48 = *(_QWORD *)(a3 + 72);
    v36 = *(_OWORD *)(a3 + 8);
    v39 = *(_OWORD *)(a3 + 24);
    v30 = *(_OWORD *)(a3 + 96);
    v33 = *(_OWORD *)(a3 + 80);
    v24 = *(_OWORD *)(a3 + 128);
    v27 = *(_OWORD *)(a3 + 112);
    v18 = *(_OWORD *)(a3 + 160);
    v21 = *(_OWORD *)(a3 + 144);
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *(_OWORD *)(a3 + 8) = *(_OWORD *)(a4 + 8);
    v9 = *(_OWORD *)(a4 + 24);
    v10 = *(_OWORD *)(a4 + 40);
    v11 = *(_OWORD *)(a4 + 56);
    *(_QWORD *)(a3 + 72) = *(_QWORD *)(a4 + 72);
    *(_OWORD *)(a3 + 56) = v11;
    *(_OWORD *)(a3 + 40) = v10;
    *(_OWORD *)(a3 + 24) = v9;
    *(_OWORD *)(a3 + 80) = *(_OWORD *)(a4 + 80);
    *(_OWORD *)(a3 + 96) = *(_OWORD *)(a4 + 96);
    *(_OWORD *)(a3 + 112) = *(_OWORD *)(a4 + 112);
    *(_OWORD *)(a3 + 128) = *(_OWORD *)(a4 + 128);
    *(_OWORD *)(a3 + 144) = *(_OWORD *)(a4 + 144);
    *(_OWORD *)(a3 + 160) = *(_OWORD *)(a4 + 160);
    *(_QWORD *)a4 = result.n128_u64[0];
    *(_OWORD *)(a4 + 8) = v36;
    *(_OWORD *)(a4 + 56) = v45;
    *(_OWORD *)(a4 + 40) = v42;
    *(_OWORD *)(a4 + 24) = v39;
    *(_QWORD *)(a4 + 72) = v48;
    *(_OWORD *)(a4 + 80) = v33;
    *(_OWORD *)(a4 + 96) = v30;
    *(_OWORD *)(a4 + 112) = v27;
    *(_OWORD *)(a4 + 128) = v24;
    result.n128_u64[1] = *((_QWORD *)&v21 + 1);
    *(_OWORD *)(a4 + 144) = v21;
    *(_OWORD *)(a4 + 160) = v18;
    result.n128_u64[0] = *(_QWORD *)a2;
    if (*(double *)a3 < *(double *)a2)
    {
      v43 = *(_OWORD *)(a2 + 40);
      v46 = *(_OWORD *)(a2 + 56);
      v49 = *(_QWORD *)(a2 + 72);
      v37 = *(_OWORD *)(a2 + 8);
      v40 = *(_OWORD *)(a2 + 24);
      v31 = *(_OWORD *)(a2 + 96);
      v34 = *(_OWORD *)(a2 + 80);
      v25 = *(_OWORD *)(a2 + 128);
      v28 = *(_OWORD *)(a2 + 112);
      v19 = *(_OWORD *)(a2 + 160);
      v22 = *(_OWORD *)(a2 + 144);
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
      v12 = *(_OWORD *)(a3 + 24);
      v13 = *(_OWORD *)(a3 + 40);
      v14 = *(_OWORD *)(a3 + 56);
      *(_QWORD *)(a2 + 72) = *(_QWORD *)(a3 + 72);
      *(_OWORD *)(a2 + 56) = v14;
      *(_OWORD *)(a2 + 40) = v13;
      *(_OWORD *)(a2 + 24) = v12;
      *(_OWORD *)(a2 + 80) = *(_OWORD *)(a3 + 80);
      *(_OWORD *)(a2 + 96) = *(_OWORD *)(a3 + 96);
      *(_OWORD *)(a2 + 112) = *(_OWORD *)(a3 + 112);
      *(_OWORD *)(a2 + 128) = *(_OWORD *)(a3 + 128);
      *(_OWORD *)(a2 + 144) = *(_OWORD *)(a3 + 144);
      *(_OWORD *)(a2 + 160) = *(_OWORD *)(a3 + 160);
      *(_QWORD *)a3 = result.n128_u64[0];
      *(_QWORD *)(a3 + 72) = v49;
      *(_OWORD *)(a3 + 40) = v43;
      *(_OWORD *)(a3 + 56) = v46;
      *(_OWORD *)(a3 + 8) = v37;
      *(_OWORD *)(a3 + 24) = v40;
      *(_OWORD *)(a3 + 80) = v34;
      *(_OWORD *)(a3 + 96) = v31;
      *(_OWORD *)(a3 + 112) = v28;
      *(_OWORD *)(a3 + 128) = v25;
      *(_OWORD *)(a3 + 144) = v22;
      result.n128_u64[1] = *((_QWORD *)&v19 + 1);
      *(_OWORD *)(a3 + 160) = v19;
      result.n128_u64[0] = *(_QWORD *)a1;
      if (*(double *)a2 < *(double *)a1)
      {
        v44 = *(_OWORD *)(a1 + 40);
        v47 = *(_OWORD *)(a1 + 56);
        v50 = *(_QWORD *)(a1 + 72);
        v38 = *(_OWORD *)(a1 + 8);
        v41 = *(_OWORD *)(a1 + 24);
        v32 = *(_OWORD *)(a1 + 96);
        v35 = *(_OWORD *)(a1 + 80);
        v26 = *(_OWORD *)(a1 + 128);
        v29 = *(_OWORD *)(a1 + 112);
        v20 = *(__n128 *)(a1 + 160);
        v23 = *(_OWORD *)(a1 + 144);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
        v15 = *(_OWORD *)(a2 + 24);
        v16 = *(_OWORD *)(a2 + 40);
        v17 = *(_OWORD *)(a2 + 56);
        *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
        *(_OWORD *)(a1 + 56) = v17;
        *(_OWORD *)(a1 + 40) = v16;
        *(_OWORD *)(a1 + 24) = v15;
        *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
        *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
        *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
        *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
        *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
        *(_QWORD *)a2 = result.n128_u64[0];
        *(_QWORD *)(a2 + 72) = v50;
        *(_OWORD *)(a2 + 40) = v44;
        *(_OWORD *)(a2 + 56) = v47;
        *(_OWORD *)(a2 + 8) = v38;
        *(_OWORD *)(a2 + 24) = v41;
        *(_OWORD *)(a2 + 80) = v35;
        *(_OWORD *)(a2 + 96) = v32;
        *(_OWORD *)(a2 + 112) = v29;
        *(_OWORD *)(a2 + 128) = v26;
        *(_OWORD *)(a2 + 144) = v23;
        result = v20;
        *(__n128 *)(a2 + 160) = v20;
      }
    }
  }
  return result;
}

__n128 sub_20EB5460C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __n128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  sub_20EB542B4(a1, a2, a3, a4);
  result.n128_u64[0] = *(_QWORD *)a4;
  if (*(double *)a5 < *(double *)a4)
  {
    v55 = *(_OWORD *)(a4 + 40);
    v59 = *(_OWORD *)(a4 + 56);
    v63 = *(_QWORD *)(a4 + 72);
    v47 = *(_OWORD *)(a4 + 8);
    v51 = *(_OWORD *)(a4 + 24);
    v39 = *(_OWORD *)(a4 + 96);
    v43 = *(_OWORD *)(a4 + 80);
    v31 = *(_OWORD *)(a4 + 128);
    v35 = *(_OWORD *)(a4 + 112);
    v23 = *(_OWORD *)(a4 + 160);
    v27 = *(_OWORD *)(a4 + 144);
    *(_QWORD *)a4 = *(_QWORD *)a5;
    *(_OWORD *)(a4 + 8) = *(_OWORD *)(a5 + 8);
    v11 = *(_OWORD *)(a5 + 24);
    v12 = *(_OWORD *)(a5 + 40);
    v13 = *(_OWORD *)(a5 + 56);
    *(_QWORD *)(a4 + 72) = *(_QWORD *)(a5 + 72);
    *(_OWORD *)(a4 + 56) = v13;
    *(_OWORD *)(a4 + 40) = v12;
    *(_OWORD *)(a4 + 24) = v11;
    *(_OWORD *)(a4 + 80) = *(_OWORD *)(a5 + 80);
    *(_OWORD *)(a4 + 96) = *(_OWORD *)(a5 + 96);
    *(_OWORD *)(a4 + 112) = *(_OWORD *)(a5 + 112);
    *(_OWORD *)(a4 + 128) = *(_OWORD *)(a5 + 128);
    *(_OWORD *)(a4 + 144) = *(_OWORD *)(a5 + 144);
    *(_OWORD *)(a4 + 160) = *(_OWORD *)(a5 + 160);
    *(_QWORD *)a5 = result.n128_u64[0];
    *(_OWORD *)(a5 + 8) = v47;
    *(_OWORD *)(a5 + 56) = v59;
    *(_OWORD *)(a5 + 40) = v55;
    *(_OWORD *)(a5 + 24) = v51;
    *(_QWORD *)(a5 + 72) = v63;
    *(_OWORD *)(a5 + 80) = v43;
    *(_OWORD *)(a5 + 96) = v39;
    *(_OWORD *)(a5 + 112) = v35;
    *(_OWORD *)(a5 + 128) = v31;
    result.n128_u64[1] = *((_QWORD *)&v27 + 1);
    *(_OWORD *)(a5 + 144) = v27;
    *(_OWORD *)(a5 + 160) = v23;
    result.n128_u64[0] = *(_QWORD *)a3;
    if (*(double *)a4 < *(double *)a3)
    {
      v56 = *(_OWORD *)(a3 + 40);
      v60 = *(_OWORD *)(a3 + 56);
      v64 = *(_QWORD *)(a3 + 72);
      v48 = *(_OWORD *)(a3 + 8);
      v52 = *(_OWORD *)(a3 + 24);
      v40 = *(_OWORD *)(a3 + 96);
      v44 = *(_OWORD *)(a3 + 80);
      v32 = *(_OWORD *)(a3 + 128);
      v36 = *(_OWORD *)(a3 + 112);
      v24 = *(_OWORD *)(a3 + 160);
      v28 = *(_OWORD *)(a3 + 144);
      *(_QWORD *)a3 = *(_QWORD *)a4;
      *(_OWORD *)(a3 + 8) = *(_OWORD *)(a4 + 8);
      v14 = *(_OWORD *)(a4 + 24);
      v15 = *(_OWORD *)(a4 + 40);
      v16 = *(_OWORD *)(a4 + 56);
      *(_QWORD *)(a3 + 72) = *(_QWORD *)(a4 + 72);
      *(_OWORD *)(a3 + 56) = v16;
      *(_OWORD *)(a3 + 40) = v15;
      *(_OWORD *)(a3 + 24) = v14;
      *(_OWORD *)(a3 + 80) = *(_OWORD *)(a4 + 80);
      *(_OWORD *)(a3 + 96) = *(_OWORD *)(a4 + 96);
      *(_OWORD *)(a3 + 112) = *(_OWORD *)(a4 + 112);
      *(_OWORD *)(a3 + 128) = *(_OWORD *)(a4 + 128);
      *(_OWORD *)(a3 + 144) = *(_OWORD *)(a4 + 144);
      *(_OWORD *)(a3 + 160) = *(_OWORD *)(a4 + 160);
      *(_QWORD *)a4 = result.n128_u64[0];
      *(_QWORD *)(a4 + 72) = v64;
      *(_OWORD *)(a4 + 40) = v56;
      *(_OWORD *)(a4 + 56) = v60;
      *(_OWORD *)(a4 + 8) = v48;
      *(_OWORD *)(a4 + 24) = v52;
      *(_OWORD *)(a4 + 80) = v44;
      *(_OWORD *)(a4 + 96) = v40;
      *(_OWORD *)(a4 + 112) = v36;
      *(_OWORD *)(a4 + 128) = v32;
      *(_OWORD *)(a4 + 144) = v28;
      result.n128_u64[1] = *((_QWORD *)&v24 + 1);
      *(_OWORD *)(a4 + 160) = v24;
      result.n128_u64[0] = *(_QWORD *)a2;
      if (*(double *)a3 < *(double *)a2)
      {
        v57 = *(_OWORD *)(a2 + 40);
        v61 = *(_OWORD *)(a2 + 56);
        v65 = *(_QWORD *)(a2 + 72);
        v49 = *(_OWORD *)(a2 + 8);
        v53 = *(_OWORD *)(a2 + 24);
        v41 = *(_OWORD *)(a2 + 96);
        v45 = *(_OWORD *)(a2 + 80);
        v33 = *(_OWORD *)(a2 + 128);
        v37 = *(_OWORD *)(a2 + 112);
        v25 = *(_OWORD *)(a2 + 160);
        v29 = *(_OWORD *)(a2 + 144);
        *(_QWORD *)a2 = *(_QWORD *)a3;
        *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
        v17 = *(_OWORD *)(a3 + 24);
        v18 = *(_OWORD *)(a3 + 40);
        v19 = *(_OWORD *)(a3 + 56);
        *(_QWORD *)(a2 + 72) = *(_QWORD *)(a3 + 72);
        *(_OWORD *)(a2 + 56) = v19;
        *(_OWORD *)(a2 + 40) = v18;
        *(_OWORD *)(a2 + 24) = v17;
        *(_OWORD *)(a2 + 80) = *(_OWORD *)(a3 + 80);
        *(_OWORD *)(a2 + 96) = *(_OWORD *)(a3 + 96);
        *(_OWORD *)(a2 + 112) = *(_OWORD *)(a3 + 112);
        *(_OWORD *)(a2 + 128) = *(_OWORD *)(a3 + 128);
        *(_OWORD *)(a2 + 144) = *(_OWORD *)(a3 + 144);
        *(_OWORD *)(a2 + 160) = *(_OWORD *)(a3 + 160);
        *(_QWORD *)a3 = result.n128_u64[0];
        *(_QWORD *)(a3 + 72) = v65;
        *(_OWORD *)(a3 + 40) = v57;
        *(_OWORD *)(a3 + 56) = v61;
        *(_OWORD *)(a3 + 8) = v49;
        *(_OWORD *)(a3 + 24) = v53;
        *(_OWORD *)(a3 + 80) = v45;
        *(_OWORD *)(a3 + 96) = v41;
        *(_OWORD *)(a3 + 112) = v37;
        *(_OWORD *)(a3 + 128) = v33;
        *(_OWORD *)(a3 + 144) = v29;
        result.n128_u64[1] = *((_QWORD *)&v25 + 1);
        *(_OWORD *)(a3 + 160) = v25;
        result.n128_u64[0] = *(_QWORD *)a1;
        if (*(double *)a2 < *(double *)a1)
        {
          v58 = *(_OWORD *)(a1 + 40);
          v62 = *(_OWORD *)(a1 + 56);
          v66 = *(_QWORD *)(a1 + 72);
          v50 = *(_OWORD *)(a1 + 8);
          v54 = *(_OWORD *)(a1 + 24);
          v42 = *(_OWORD *)(a1 + 96);
          v46 = *(_OWORD *)(a1 + 80);
          v34 = *(_OWORD *)(a1 + 128);
          v38 = *(_OWORD *)(a1 + 112);
          v26 = *(__n128 *)(a1 + 160);
          v30 = *(_OWORD *)(a1 + 144);
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
          v20 = *(_OWORD *)(a2 + 24);
          v21 = *(_OWORD *)(a2 + 40);
          v22 = *(_OWORD *)(a2 + 56);
          *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
          *(_OWORD *)(a1 + 56) = v22;
          *(_OWORD *)(a1 + 40) = v21;
          *(_OWORD *)(a1 + 24) = v20;
          *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
          *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
          *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
          *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
          *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
          *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
          *(_QWORD *)a2 = result.n128_u64[0];
          *(_QWORD *)(a2 + 72) = v66;
          *(_OWORD *)(a2 + 40) = v58;
          *(_OWORD *)(a2 + 56) = v62;
          *(_OWORD *)(a2 + 8) = v50;
          *(_OWORD *)(a2 + 24) = v54;
          *(_OWORD *)(a2 + 80) = v46;
          *(_OWORD *)(a2 + 96) = v42;
          *(_OWORD *)(a2 + 112) = v38;
          *(_OWORD *)(a2 + 128) = v34;
          *(_OWORD *)(a2 + 144) = v30;
          result = v26;
          *(__n128 *)(a2 + 160) = v26;
        }
      }
    }
  }
  return result;
}

void sub_20EB54A78(__int128 *a1@<X0>, uint64_t a2@<X8>, float64x2_t a3@<Q1>, float64x2_t a4@<Q2>, float64x2_t a5@<Q3>, float64x2_t a6@<Q4>, float64x2_t a7@<Q5>, float64x2_t a8@<Q6>)
{
  double v10;
  double v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  double v16;
  double v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  _BOOL4 v23;
  BOOL v24;
  float64x2_t *v25;
  _OWORD *v26;
  double v27;
  double v28;
  __int128 v29;
  __int128 v30;
  double v31;
  float64x2_t v32;
  double v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  float64x2_t v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  _OWORD v42[4];
  float64x2_t v43;
  _OWORD v44[4];
  float64x2_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v40 = *(__int128 *)((char *)a1 + 72);
  v41 = 0x3FF0000000000000;
  v38 = *(__int128 *)((char *)a1 + 88);
  v39 = 0x3FF0000000000000;
  sub_20EB54C14((float64x2_t *)&v31, a1, (uint64_t)&v40, (uint64_t)&v38, *(double *)&v38, a3, a4, a5, a6, a7, a8);
  v10 = v31;
  v11 = v33;
  v44[0] = v34;
  v44[1] = v35;
  v44[2] = v36;
  v44[3] = v37;
  v45 = v32;
  v40 = *(__int128 *)((char *)a1 + 104);
  v41 = 0x3FF0000000000000;
  v38 = *(__int128 *)((char *)a1 + 120);
  v39 = 0x3FF0000000000000;
  sub_20EB54C14((float64x2_t *)&v31, a1, (uint64_t)&v40, (uint64_t)&v38, *(double *)&v38, v37, v32, v12, v13, v14, v15);
  v16 = v31;
  v43 = v32;
  v17 = v33;
  v42[0] = v34;
  v42[1] = v35;
  v42[2] = v36;
  v42[3] = v37;
  v40 = *(__int128 *)((char *)a1 + 136);
  v41 = 0x3FF0000000000000;
  v38 = *(__int128 *)((char *)a1 + 152);
  v39 = 0x3FF0000000000000;
  sub_20EB54C14((float64x2_t *)&v31, a1, (uint64_t)&v40, (uint64_t)&v38, *(double *)&v38, v37, v18, v19, v20, v21, v22);
  v23 = v10 * v11 == v16 * v17;
  if (v10 * v11 == v31 * v33)
    v23 = 1;
  v24 = !v23;
  v25 = &v43;
  if (!v24)
    v25 = &v45;
  v26 = v42;
  if (v24)
  {
    v27 = v16;
  }
  else
  {
    v26 = v44;
    v27 = v10;
  }
  if (v24)
    v28 = v17;
  else
    v28 = v11;
  *(float64x2_t *)(a2 + 8) = *v25;
  v29 = v26[1];
  *(_OWORD *)(a2 + 32) = *v26;
  *(_OWORD *)(a2 + 48) = v29;
  v30 = v26[3];
  *(_OWORD *)(a2 + 64) = v26[2];
  *(_OWORD *)(a2 + 80) = v30;
  *(double *)a2 = v27;
  *(double *)(a2 + 24) = v28;
}

double sub_20EB54C14(float64x2_t *a1, __int128 *a2, uint64_t a3, uint64_t a4, double a5, float64x2_t a6, float64x2_t a7, float64x2_t a8, float64x2_t a9, float64x2_t a10, float64x2_t a11)
{
  double v15;
  double v16;
  double v17;
  double v18;
  double result;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v36;
  double v43;
  double v46;
  double v47;
  double v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v54;
  float64x2_t v56;
  double v57;
  double v61;
  double v62;
  float64x2_t v63;
  float64x2_t v64;
  double v65;
  float64x2_t v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;

  sub_20EB54EF0((uint64_t)&v67, (uint64_t)&v76, (double *)a2, a5, a6, a7, a8, a9, a10, a11);
  v16 = v67;
  v15 = v68;
  v17 = v76;
  v18 = v77;
  result = v78;
  v20 = v79;
  v21 = v69;
  v22 = v70;
  a1->f64[0] = v68 * v76 - v67 * v77 + v69 * v78;
  v24 = v80;
  v23 = v81;
  a1->f64[1] = v15 * v20 - v16 * v80 + v21 * v81;
  v25 = v82;
  v26 = v83;
  v27 = v15 * v82 - v16 * v83;
  v28 = v84;
  a1[1].f64[0] = v27 + v21 * v84;
  a1[1].f64[1] = v21;
  v29 = v71;
  v30 = v72;
  a1[2].f64[0] = v17 * v71 - v18 * v22 + result * v72;
  a1[2].f64[1] = v20 * v29 - v24 * v22 + v23 * v30;
  a1[3].f64[0] = v25 * v29 - v26 * v22 + v28 * v30;
  a1[3].f64[1] = v30;
  v32 = v73;
  v31 = v74;
  v33 = v17 * v74 - v18 * v73;
  v34 = v75;
  a1[4].f64[0] = v33 + result * v75;
  a1[4].f64[1] = v20 * v31 - v24 * v32 + v23 * v34;
  a1[5].f64[0] = v25 * v31 - v26 * v32 + v28 * v34;
  a1[5].f64[1] = v34;
  _Q4 = *a2;
  v36 = *(double *)(a3 + 16);
  _D6 = *(_QWORD *)(a3 + 8);
  __asm { FMLA            D5, D6, V4.D[1] }
  v43 = _D5 + *((double *)a2 + 2) * v36;
  _Q5 = *(__int128 *)((char *)a2 + 24);
  __asm { FMLA            D16, D6, V5.D[1] }
  *(double *)&_Q4 = _D16 + *((double *)a2 + 5) * v36;
  *(_QWORD *)&_Q5 = *(_QWORD *)(a4 + 16);
  v46 = -(*(double *)&_Q5 * *(double *)&_Q4);
  v47 = *(double *)&_Q5 * v43;
  v48 = *(double *)a4 * *(double *)&_Q4 - v43 * *(double *)(a4 + 8);
  v49 = a1[1];
  v51 = a1[2];
  v50 = a1[3];
  _Q5 = a1[4];
  _Q3 = a1[5];
  v54 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v49, v46), v50, v47), _Q3, v48);
  _D6 = v36 * v54.f64[0]
      + vaddvq_f64(vmulq_f64(*(float64x2_t *)a3, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*a1, v46), v51, v47), _Q5, v48)));
  v56 = vmulq_laneq_f64(*(float64x2_t *)a3, v54, 1);
  v57 = vmuld_lane_f64(v36, v54, 1);
  _D21 = v56.f64[1];
  __asm
  {
    FMLA            D20, D21, V5.D[1]
    FMLS            D20, D6, V3.D[1]
  }
  v61 = -(_D6 * v57);
  v62 = -(_D6 * _D20);
  if (v61 <= 0.0 || v62 <= 0.0)
  {
    if (v61 < 0.0 && v62 < 0.0)
      goto LABEL_7;
    v63.f64[0] = result;
    v63.f64[1] = v23;
    v64 = vaddq_f64(v63, v63);
    *a1 = vsubq_f64(vmulq_laneq_f64(v64, v49, 1), *a1);
    v65 = v28 + v28;
    a1[1].f64[0] = v65 * v49.f64[1] - v49.f64[0];
    a1[2] = vsubq_f64(vmulq_laneq_f64(v64, v50, 1), v51);
    a1[3].f64[0] = v65 * v50.f64[1] - v50.f64[0];
    a1[4] = vsubq_f64(vmulq_laneq_f64(v64, _Q3, 1), _Q5);
    a1[5].f64[0] = v65 * _Q3.f64[1] - _Q3.f64[0];
    v64.f64[0] = result * -2.0;
    v66 = vmulq_f64(v64, v56);
    result = v57 * (_D6 + vsubq_f64(v66, (float64x2_t)vdupq_laneq_s64((int64x2_t)v66, 1)).f64[0] - v65 * v57);
    if (result <= 0.0)
    {
LABEL_7:
      a1[1].f64[1] = -v49.f64[1];
      a1[3].f64[1] = -v50.f64[1];
      result = -_Q3.f64[1];
      a1[5].f64[1] = -_Q3.f64[1];
    }
  }
  return result;
}

int64x2_t sub_20EB54EF0(uint64_t a1, uint64_t a2, double *a3, double a4, float64x2_t a5, float64x2_t a6, float64x2_t a7, float64x2_t a8, float64x2_t a9, float64x2_t a10)
{
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  float64x2_t v20;
  double v21;
  float64x2_t v22;
  double v23;
  float64x2_t v24;
  double v25;
  double v26;
  double v27;
  float64x2_t v28;
  float64x2_t *v29;
  double v30;
  double v31;
  unint64_t v32;
  double v33;
  double v34;
  float64x2_t v35;
  double v36;
  unint64_t v37;
  double v38;
  float64x2_t v39;
  double v41;
  float64x2_t v42;
  double v43;
  double v44;
  double v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  double v50;
  double v52;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v63;
  double v68;
  double v70;
  int64x2_t v71;
  float64x2_t v72;
  double v82;
  float64x2_t v83;
  int64x2_t v84;
  double v85;
  double v86;
  double v87;
  int64x2_t result;
  float64x2_t v89;
  double v90[2];

  v90[1] = *(double *)MEMORY[0x24BDAC8D0];
  v13.f64[0] = *a3;
  v14 = a3[1];
  a6.f64[0] = a3[2];
  v15 = a3[3];
  v16 = a3[4];
  a10.f64[0] = a3[5];
  v17 = a3[6];
  v18 = a3[7];
  v19 = a3[8];
  v20.f64[0] = v14 * a10.f64[0] - a6.f64[0] * v16;
  v21 = a6.f64[0] * v15 - *a3 * a10.f64[0];
  a7.f64[0] = *a3 * v16 - v14 * v15;
  v22.f64[0] = v14 * v19 - a6.f64[0] * v18;
  v23 = a6.f64[0] * v17 - *a3 * v19;
  v10.f64[0] = *a3 * v18 - v14 * v17;
  v24.f64[0] = v16 * v19 - a10.f64[0] * v18;
  v25 = a10.f64[0] * v17 - v15 * v19;
  v11.f64[0] = v15 * v18 - v16 * v17;
  v26 = v20.f64[0] * v20.f64[0] + v21 * v21 + a7.f64[0] * a7.f64[0];
  v27 = v22.f64[0] * v22.f64[0] + v23 * v23 + v10.f64[0] * v10.f64[0];
  v28.f64[0] = v26;
  v28.f64[1] = v27;
  v89 = v28;
  v29 = (float64x2_t *)&v89.f64[1];
  v30 = v24.f64[0] * v24.f64[0] + v25 * v25 + v11.f64[0] * v11.f64[0];
  v90[0] = v30;
  if (v26 >= v27)
    v31 = v20.f64[0] * v20.f64[0] + v21 * v21 + a7.f64[0] * a7.f64[0];
  else
    v31 = v22.f64[0] * v22.f64[0] + v23 * v23 + v10.f64[0] * v10.f64[0];
  if (v26 >= v27)
    v29 = &v89;
  if (v31 < v30)
    v29 = (float64x2_t *)v90;
  v32 = (unint64_t)((char *)v29 - (char *)&v89) >> 3;
  if ((_DWORD)v32 == 2)
  {
    v24.f64[1] = v25;
    v42.f64[0] = v15;
    v42.f64[1] = v16;
    v43 = sqrt(v30);
    a6.f64[0] = 1.0;
    if (v43 == 0.0)
      a5.f64[0] = 1.0;
    else
      a5.f64[0] = 1.0 / v43;
    *(_QWORD *)&v34 = *(_OWORD *)&vmulq_f64(v11, a5);
    v35 = vmulq_n_f64(v24, a5.f64[0]);
    v37 = vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL).u64[0];
    v44 = sqrt(v15 * v15 + v16 * v16 + a10.f64[0] * a10.f64[0]);
    if (v44 != 0.0)
      a6.f64[0] = 1.0 / v44;
    v39 = vmulq_n_f64(v42, a6.f64[0]);
    _Q1 = (float64x2_t)vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL);
    *(_QWORD *)&v41 = *(_OWORD *)&vmulq_f64(a10, a6);
  }
  else
  {
    if ((_DWORD)v32 == 1)
    {
      v22.f64[1] = v23;
      v36 = sqrt(v27);
      a10.f64[0] = 1.0;
      a8.f64[0] = 1.0 / v36;
      if (v36 == 0.0)
        a8.f64[0] = 1.0;
      *(_QWORD *)&v34 = *(_OWORD *)&vmulq_f64(v10, a8);
      v35 = vmulq_n_f64(v22, a8.f64[0]);
    }
    else
    {
      if ((_DWORD)v32)
      {
        sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Math/include/VIO/Math/SVD3x3.h", 304, (uint64_t)"", 0, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
        abort();
      }
      v20.f64[1] = v21;
      v33 = sqrt(v26);
      a10.f64[0] = 1.0;
      if (v33 == 0.0)
        a9.f64[0] = 1.0;
      else
        a9.f64[0] = 1.0 / v33;
      *(_QWORD *)&v34 = *(_OWORD *)&vmulq_f64(a7, a9);
      v35 = vmulq_n_f64(v20, a9.f64[0]);
    }
    v37 = vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL).u64[0];
    v38 = sqrt(v13.f64[0] * v13.f64[0] + v14 * v14 + a6.f64[0] * a6.f64[0]);
    if (v38 != 0.0)
      a10.f64[0] = a10.f64[0] / v38;
    v13.f64[1] = v14;
    v39 = vmulq_n_f64(v13, a10.f64[0]);
    _Q1 = (float64x2_t)vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL);
    *(_QWORD *)&v41 = *(_OWORD *)&vmulq_f64(a6, a10);
  }
  v89.f64[0] = vmuld_lane_f64(v41, v35, 1) - vmuld_lane_f64(v34, v39, 1);
  v89.f64[1] = vmuld_n_f64(v39.f64[0], v34) - vmuld_n_f64(v41, v35.f64[0]);
  v45 = vmuld_lane_f64(v35.f64[0], v39, 1) - vmuld_lane_f64(v39.f64[0], v35, 1);
  *((_QWORD *)&v46 + 1) = *(_QWORD *)&v35.f64[0];
  *((_QWORD *)&v47 + 1) = v37;
  *(float64_t *)&v47 = v89.f64[1];
  *(float64_t *)&v46 = v89.f64[0];
  *(double *)&v48 = v45;
  *((double *)&v48 + 1) = v34;
  *(float64_t *)a2 = v39.f64[0];
  *(float64_t *)(a2 + 24) = v39.f64[1];
  *(double *)(a2 + 48) = v41;
  *(_OWORD *)(a2 + 8) = v46;
  *(_OWORD *)(a2 + 32) = v47;
  *(_OWORD *)(a2 + 56) = v48;
  v63.f64[0] = a3[2];
  _Q20 = *(int64x2_t *)a3;
  v50 = a3[5];
  _Q5 = *(int64x2_t *)(a3 + 3);
  v52 = a3[8];
  _Q7 = *((_OWORD *)a3 + 3);
  v54 = (float64x2_t)vzip1q_s64(*(int64x2_t *)a3, _Q5);
  v55 = (float64x2_t)vzip2q_s64(*(int64x2_t *)a3, _Q5);
  __asm { FMLA            D21, D1, V20.D[1] }
  _V22.D[1] = v89.f64[1];
  _Q20.i64[0] = (uint64_t)a3[1];
  __asm { FMLA            D23, D20, V22.D[1] }
  v63.f64[1] = v50;
  _Q19 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v54, v39.f64[0]), v55, _Q1.f64[0]), v63, v41);
  __asm { FMLA            D23, D1, V7.D[1] }
  v12.f64[0] = _D23 + v52 * v41;
  __asm { FMLA            D0, D1, V5.D[1] }
  _D0 = _D0 + v41 * v50;
  v68 = _D23 + v41 * v52;
  __asm { FMLA            D2, D0, V19.D[1] }
  v70 = sqrt(_D2 + v68 * v12.f64[0]);
  _Q1.f64[0] = 1.0;
  if (v70 == 0.0)
    v39.f64[0] = 1.0;
  else
    v39.f64[0] = 1.0 / v70;
  v71 = (int64x2_t)vmulq_f64(v12, v39);
  v72 = vmulq_n_f64(_Q19, v39.f64[0]);
  _Q16 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v54, v89.f64[0]), v55, v89, 1), v63, v45);
  _D18 = v89.f64[1];
  __asm { FMLA            D19, D18, V7.D[1] }
  v55.f64[0] = _D19 + v52 * v45;
  _D5 = *((_QWORD *)a3 + 4);
  __asm { FMLA            D19, D5, V22.D[1] }
  _D4 = _D19 + v45 * v50;
  _D5 = *((_QWORD *)a3 + 7);
  __asm
  {
    FMLA            D17, D5, V22.D[1]
    FMLA            D5, D4, V16.D[1]
  }
  v82 = sqrt(_D5 + (_D17 + v45 * v52) * v55.f64[0]);
  if (v82 != 0.0)
    _Q1.f64[0] = 1.0 / v82;
  v83 = vmulq_n_f64(_Q16, _Q1.f64[0]);
  v84 = (int64x2_t)vmulq_f64(v55, _Q1);
  v85 = vmuld_lane_f64(*(double *)v84.i64, v72, 1) - vmuld_lane_f64(*(double *)v71.i64, v83, 1);
  v86 = vmuld_n_f64(*(double *)v71.i64, v83.f64[0]) - vmuld_n_f64(v72.f64[0], *(double *)v84.i64);
  v87 = vmuld_lane_f64(v72.f64[0], v83, 1) - vmuld_lane_f64(v83.f64[0], v72, 1);
  *(int64x2_t *)a1 = vzip1q_s64((int64x2_t)v72, (int64x2_t)v83);
  *(int64x2_t *)(a1 + 24) = vzip2q_s64((int64x2_t)v72, (int64x2_t)v83);
  result = vzip1q_s64(v71, v84);
  *(int64x2_t *)(a1 + 48) = result;
  *(double *)(a1 + 16) = v85;
  *(double *)(a1 + 40) = v86;
  *(double *)(a1 + 64) = v87;
  return result;
}

uint64_t sub_20EB552C0(uint64_t a1, _DWORD *a2, void **a3, uint64_t a4, uint64_t a5, char **a6)
{
  unint64_t v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t *v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  size_t v21;
  const char *v22;
  unsigned __int8 v23;
  void *v24;
  int8x16_t v25;
  __int128 v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  int64_t v31;
  unint64_t v32;
  _QWORD *v33;
  int64_t v34;
  char *v35;
  char *v36;
  __int128 v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  unsigned int v41;
  char *v42;
  __int128 v43;
  __int128 v44;
  _BYTE *v45;
  char *v46;
  double *v47;
  float64x2_t v48;
  float64x2_t v50;
  float64x2_t v51;
  __n128 v53;
  double **v54;
  double *v55;
  unsigned int v56;
  double *v57;
  double *v58;
  double *v59;
  double *v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double *v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  int64_t v78;
  unint64_t v79;
  unint64_t v80;
  double *v81;
  unint64_t v82;
  uint64_t v83;
  double *v84;
  double v85;
  unint64_t v86;
  double *v87;
  unint64_t v88;
  double *v89;
  uint64_t v90;
  unint64_t v91;
  int v92;
  double *v93;
  double *v94;
  double v95;
  double v96;
  double v97;
  double *v98;
  double v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  float64x2_t v103;
  float64x2_t v104;
  __int128 v105;
  __int128 v106;
  float64x2_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  float64x2_t v118;
  float64x2_t v119;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v120;
  __int128 v121;
  uint64_t v122;
  float64_t *v123;
  __int128 v124;
  float64x2_t v125;
  float64x2_t v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  float64x2_t v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  float64x2_t v142;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v143;
  __int128 v144;
  double v145;
  __int128 v146;
  float64x2_t v147;
  float64x2_t v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  float64x2_t v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  double v167;
  double v168;
  double *v169;
  double v170;
  double *v171;
  double v172;
  double v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  float64x2_t v177;
  float64x2_t v178;
  __int128 v179;
  __int128 v180;
  float64x2_t v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  float64x2_t v192;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v193;
  __int128 v194;
  double v195;
  double v196;
  double v197;
  double *v198;
  double v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  float64x2_t v203;
  float64x2_t v204;
  __int128 v205;
  __int128 v206;
  float64x2_t v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  float64x2_t v218;
  float64x2_t v219;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v220;
  __int128 v221;
  double v222;
  __int128 v223;
  float64x2_t v224;
  float64x2_t v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  float64x2_t v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  float64x2_t v241;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v242;
  __int128 v243;
  unint64_t v244;
  unint64_t v245;
  unint64_t v246;
  char *v247;
  double *v248;
  double v249;
  double v250;
  double *v251;
  double *v252;
  double *v253;
  double v254;
  __int128 v255;
  float64x2_t v256;
  float64x2_t v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  float64x2_t v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  char *v276;
  size_t v277;
  double *v278;
  double *v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  unint64_t v289;
  double *v290;
  double v291;
  double *v292;
  unint64_t v293;
  uint64_t v294;
  double *v295;
  double v296;
  unint64_t v297;
  uint64_t v298;
  double v299;
  double v300;
  __n128 v301;
  double v302;
  char v303;
  uint64_t v304;
  char **v305;
  double v306;
  char *v307;
  char *v308;
  char *v309;
  int v310;
  double v311;
  float64x2_t v312;
  uint64_t v313;
  float64x2_t v314;
  double v315;
  double v320;
  double v321;
  unint64_t v322;
  char *v323;
  uint64_t v324;
  uint64_t v325;
  unint64_t v326;
  uint64_t v327;
  unint64_t v328;
  _BYTE *v329;
  char *v330;
  int64_t v331;
  unint64_t v332;
  char *v333;
  int v334;
  unint64_t v335;
  uint64_t v336;
  uint64_t v337;
  _OWORD *v338;
  char *v339;
  uint64_t v340;
  __int128 v341;
  int v342;
  unint64_t v343;
  unint64_t v344;
  uint64_t v345;
  size_t v346;
  const char *v347;
  char *v348;
  unsigned __int8 v349;
  const char *v350;
  size_t v351;
  void **v352;
  unint64_t v353;
  const char *v354;
  int v355;
  unint64_t v356;
  uint64_t v357;
  uint64_t v358;
  void **v359;
  uint64_t v360;
  uint64_t v361;
  NSObject *v362;
  size_t v363;
  std::__shared_weak_count_vtbl *v364;
  std::__shared_weak_count *v365;
  std::__shared_weak_count *v366;
  unint64_t *p_shared_owners;
  unint64_t v368;
  unint64_t v369;
  void *v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  std::__shared_weak_count *v376;
  unint64_t *v377;
  unint64_t v378;
  std::__shared_weak_count *v379;
  unint64_t *v380;
  unint64_t v381;
  float64_t v382;
  std::__shared_weak_count *v383;
  unint64_t *v384;
  unint64_t v385;
  std::__shared_weak_count *v386;
  unint64_t *v387;
  unint64_t v388;
  std::__shared_weak_count *v389;
  unint64_t *v390;
  unint64_t v391;
  std::__shared_weak_count *v392;
  unint64_t *v393;
  unint64_t v394;
  void *v395;
  std::__shared_weak_count *v396;
  unint64_t *v397;
  unint64_t v398;
  uint64_t v399;
  uint64_t v400;
  int8x16_t v401;
  float64x2_t v402;
  int8x16_t v403;
  int8x16_t v404;
  uint64_t v405;
  uint64_t v406;
  float64x2_t v407;
  unint64_t v408;
  unint64_t i;
  unint64_t v410;
  double *v411;
  double v412;
  double v413;
  double v414;
  double v415;
  double v416;
  double *v417;
  double v418;
  double v419;
  double v420;
  double v421;
  double v422;
  double v423;
  double v424;
  double v425;
  double v426;
  double v427;
  double v428;
  double v429;
  double v430;
  double v431;
  double v432;
  double v433;
  double v434;
  double v435;
  double v436;
  double v437;
  double v438;
  double *v439;
  double v440;
  double v441;
  double v442;
  double v443;
  double v444;
  double v445;
  double v446;
  double v447;
  char v448;
  double v449;
  double v450;
  float64x2_t v451;
  double v452;
  double v453;
  double v454;
  double v455;
  double v456;
  double v457;
  double v458;
  double v459;
  double v460;
  double v461;
  float64x2_t v462;
  float64x2_t v463;
  float64x2_t v464;
  double v465;
  double v466;
  float64x2_t v467;
  double v468;
  double v469;
  double v470;
  double v471;
  double v472;
  double v473;
  double v474;
  double v475;
  double v476;
  double v477;
  float64x2_t v478;
  float64x2_t v479;
  float64x2_t v480;
  double v481;
  double v482;
  double v483;
  double v484;
  double v485;
  double v486;
  double v487;
  double v488;
  BOOL v489;
  double v490;
  double v491;
  double v492;
  double v493;
  double v494;
  _BOOL8 v495;
  void **v496;
  void *v497;
  void *v498;
  void *v499;
  void *v500;
  void *v501;
  void *v502;
  void *v503;
  void *v504;
  void *v505;
  void *v506;
  void *v507;
  uint64_t v508;
  char *v509;
  unint64_t v510;
  unint64_t v511;
  char *v512;
  char *v513;
  char *v514;
  double *v515;
  __int128 v516;
  __int128 v517;
  __int128 v518;
  __int128 v519;
  __int128 v520;
  __int128 v521;
  __int128 v522;
  __int128 v523;
  __int128 v524;
  __int128 v525;
  __int128 v526;
  unint64_t v527;
  unint64_t *v528;
  unint64_t v529;
  unint64_t v530;
  double *v531;
  uint64_t v532;
  unint64_t v533;
  unint64_t v534;
  unint64_t v535;
  int v536;
  unint64_t v537;
  unint64_t v538;
  double v540;
  uint64_t v541;
  size_t v542;
  const char *v543;
  __int128 v544;
  int v545;
  unint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t *v549;
  float64_t v550;
  uint64_t v551;
  unsigned __int8 v552;
  const char *v553;
  size_t v554;
  void **v555;
  unint64_t v556;
  const char *v557;
  uint64_t v558;
  int v559;
  uint64_t v560;
  uint64_t v561;
  void **v562;
  uint64_t v563;
  uint64_t v564;
  NSObject *v565;
  size_t v566;
  std::__shared_weak_count_vtbl *v567;
  std::__shared_weak_count *v568;
  std::__shared_weak_count *v569;
  unint64_t *v570;
  unint64_t v571;
  unint64_t v572;
  void *v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  std::__shared_weak_count *v578;
  unint64_t *v579;
  unint64_t v580;
  std::__shared_weak_count *v581;
  unint64_t *v582;
  unint64_t v583;
  float64_t v584;
  std::__shared_weak_count *v585;
  unint64_t *v586;
  unint64_t v587;
  std::__shared_weak_count *v588;
  unint64_t *v589;
  unint64_t v590;
  std::__shared_weak_count *v591;
  unint64_t *v592;
  unint64_t v593;
  std::__shared_weak_count *v594;
  unint64_t *v595;
  unint64_t v596;
  void *v597;
  std::__shared_weak_count *v598;
  unint64_t *v599;
  unint64_t v600;
  unsigned __int8 v601;
  const char *v602;
  size_t v603;
  void **v604;
  uint64_t v605;
  uint64_t v606;
  void **v607;
  uint64_t v608;
  uint64_t v609;
  NSObject *v610;
  double v611;
  size_t v612;
  std::__shared_weak_count_vtbl *v613;
  std::__shared_weak_count *v614;
  std::__shared_weak_count *v615;
  unint64_t *v616;
  unint64_t v617;
  unint64_t v618;
  void *v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  std::__shared_weak_count *v625;
  unint64_t *v626;
  unint64_t v627;
  std::__shared_weak_count *v628;
  unint64_t *v629;
  unint64_t v630;
  float64_t v631;
  std::__shared_weak_count *v632;
  unint64_t *v633;
  unint64_t v634;
  std::__shared_weak_count *v635;
  unint64_t *v636;
  unint64_t v637;
  std::__shared_weak_count *v638;
  int v639;
  unint64_t *v640;
  unint64_t v641;
  std::__shared_weak_count *v642;
  unint64_t *v643;
  unint64_t v644;
  void *v645;
  double v646;
  unint64_t *v647;
  char *v648;
  unsigned __int8 v650;
  uint64_t v651;
  const char *v652;
  NSObject *v653;
  unint64_t v654;
  void *v655;
  void *v656;
  void *v657;
  void *v658;
  void *v659;
  void *v660;
  void *v661;
  void *v662;
  void *v663;
  void *v664;
  void *v665;
  void *v666;
  uint64_t v667;
  double v668;
  double v669;
  unint64_t v670;
  uint64_t v671;
  unint64_t v672;
  int8x16_t v673;
  unint64_t v674;
  double v676;
  float64x2_t v677;
  double v678;
  float64x2_t v679;
  float64x2_t v680;
  float64x2_t v681;
  double v682;
  float64x2_t v683;
  float64x2_t v684;
  double v686;
  double v687;
  double v688;
  double v689;
  double v690;
  double v691;
  double v692;
  uint64_t v693;
  uint64_t v694;
  char *v695;
  double v696;
  unint64_t v697;
  double v698;
  double v699;
  double v700;
  double v701;
  double v702;
  double v703;
  double **v704;
  float64x2_t v705;
  double v706;
  double *__p;
  void *__pa[2];
  __n128 v709;
  double v710;
  double v711;
  unint64_t v712;
  double v713;
  int8x16_t v714;
  double v715;
  double v716;
  int8x16_t v717;
  double v718;
  double v719;
  __int128 v720;
  double v721;
  float64x2_t v722;
  int8x16_t v723;
  double v724;
  double v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  double v729;
  unint64_t v730;
  double v731;
  uint64_t v732;
  uint64_t v733;
  double v734;
  unsigned int v735;
  float64x2_t v736;
  double v737;
  int v738;
  uint64_t v739;
  void *v740;
  char *v741;
  uint64_t v742;
  void *v743;
  double **v744;
  void *v745;
  _BYTE *v746;
  char *v747;
  __int128 v748;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v750;
  const char *v751;
  int v752;
  const char *v753;
  uint64_t v754;
  std::__shared_weak_count *v755;
  void *object[6];
  __int128 v757;
  float64x2_t v758;
  float64x2_t v759;
  float64x2_t v760;
  double v761;
  double v762;
  float64x2_t v763;
  double v764;
  double v765;
  float64x2_t v766;
  double v767;
  double v768;
  float64x2_t category;
  uint64_t v770;
  __int128 v771;
  __int128 v772;
  uint64_t v773;
  float64x2_t v774;
  __int128 v775;
  uint64_t v776;

  v776 = *MEMORY[0x24BDAC8D0];
  if (((a2[2] - *a2) & 8) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/RANSAC/P2PVerticalPreemptiveRansac.cpp", 43, (uint64_t)"xs.size() % 2 == 0", 18, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_581;
  }
  v10 = ((_BYTE *)a3[1] - (_BYTE *)*a3) >> 3;
  if (0xAAAAAAAAAAAAAAABLL * v10 >= 0x5555555555555556)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/RANSAC/P2PVerticalPreemptiveRansac.cpp", 44, (uint64_t)"Xs.size() % 3 == 0", 18, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_581;
    }
    v10 = ((_BYTE *)a3[1] - (_BYTE *)*a3) >> 3;
  }
  v11 = *(void **)a2;
  v12 = *((_QWORD *)a2 + 1) - *(_QWORD *)a2;
  v13 = (unint64_t)(v12 >> 3) >> 1;
  if (v13 == v10 / 3)
    goto LABEL_9;
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/RANSAC/P2PVerticalPreemptiveRansac.cpp", 45, (uint64_t)"xs.size() / 2 == Xs.size() / 3", 30, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_581:
    abort();
  }
  v11 = *(void **)a2;
  v12 = *((_QWORD *)a2 + 1) - *(_QWORD *)a2;
  v13 = (unint64_t)(v12 >> 3) >> 1;
LABEL_9:
  v14 = *(unint64_t **)(a1 + 32);
  v15 = *(unint64_t **)(a1 + 40);
  if (v14 == v15)
  {
LABEL_12:
    sub_20EB59580(&v745);
    if (**((int **)v745 + 7) > 2)
      return 0;
    v16 = *((unsigned __int8 *)v745 + 72);
    v17 = sub_20E8C31DC((uint64_t)v745, "OSLogSurrogateAppender", 1, 0);
    v18 = v17;
    _ZF = !v16 && v17 == 0;
    if (_ZF)
      return 0;
    *(_QWORD *)&v748 = &v745;
    *((std::chrono::steady_clock::time_point *)&v748 + 1) = std::chrono::steady_clock::now();
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v750 = 2;
    v751 = "unknown file";
    v752 = 56;
    v755 = 0;
    v753 = "unknown function";
    v754 = 0;
    v20 = *(_QWORD *)v748;
    v733 = *(_QWORD *)v748;
    if (*(char *)(*(_QWORD *)v748 + 39) < 0)
    {
      v22 = *(const char **)(v20 + 16);
      v21 = *(_QWORD *)(v20 + 24);
      v727 = *(_QWORD *)v748 + 16;
      v349 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v349 & 1) != 0)
        goto LABEL_224;
    }
    else
    {
      v21 = *(unsigned __int8 *)(*(_QWORD *)v748 + 39);
      v22 = (const char *)(*(_QWORD *)v748 + 16);
      v727 = (uint64_t)v22;
      v23 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v23 & 1) != 0)
        goto LABEL_224;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
      if (LOBYTE(object[3]) && SHIBYTE(object[2]) < 0)
        operator delete(object[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_224:
    if (byte_254A4A4F8[23] >= 0)
      v350 = byte_254A4A4F8;
    else
      v350 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v351 = byte_254A4A4F8[23];
    else
      v351 = *(_QWORD *)&byte_254A4A4F8[8];
    object[0] = os_log_create(v350, v22);
    v352 = &object[1];
    if (v351 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v351 >= 0x17)
    {
      v353 = v18;
      v354 = v22;
      v355 = v16;
      v356 = v13;
      v357 = (v351 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v351 | 7) != 0x17)
        v357 = v351 | 7;
      v358 = v357 + 1;
      v352 = (void **)operator new(v357 + 1);
      object[3] = (void *)(v358 | 0x8000000000000000);
      object[1] = v352;
      object[2] = (void *)v351;
      v13 = v356;
      v16 = v355;
      v22 = v354;
      v18 = v353;
    }
    else
    {
      HIBYTE(object[3]) = v351;
      if (!v351)
      {
LABEL_238:
        *((_BYTE *)v352 + v351) = 0;
        LOBYTE(object[4]) = 1;
        v359 = &object[5];
        if (v21 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v21 >= 0x17)
        {
          v360 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v21 | 7) != 0x17)
            v360 = v21 | 7;
          v361 = v360 + 1;
          v359 = (void **)operator new(v360 + 1);
          *((_QWORD *)&v757 + 1) = v361 | 0x8000000000000000;
          object[5] = v359;
          *(_QWORD *)&v757 = v21;
        }
        else
        {
          HIBYTE(v757) = v21;
          if (!v21)
            goto LABEL_246;
        }
        memmove(v359, v22, v21);
LABEL_246:
        *((_BYTE *)v359 + v21) = 0;
        LOBYTE(v758.f64[0]) = 1;
        v362 = object[0];
        if (SHIBYTE(v757) < 0)
          operator delete(object[5]);
        if (LOBYTE(object[4]) && SHIBYTE(object[3]) < 0)
          operator delete(object[1]);
        if (object[0])
          os_release(object[0]);
        if (v18 && *(_QWORD *)(v18 + 24))
        {
          v363 = _os_log_pack_size();
          v364 = (std::__shared_weak_count_vtbl *)operator new(v363, (std::align_val_t)8uLL);
          v365 = (std::__shared_weak_count *)operator new();
          v366 = v365;
          v365->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v365->__shared_owners_;
          v365->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v365->__shared_weak_owners_ = 0;
          v365[1].__vftable = v364;
          object[0] = v364;
          object[1] = v364;
          object[2] = v365;
          do
            v368 = __ldxr(p_shared_owners);
          while (__stxr(v368 + 1, p_shared_owners));
          memset(&object[3], 0, 24);
          do
            v369 = __ldaxr(p_shared_owners);
          while (__stlxr(v369 - 1, p_shared_owners));
          if (!v369)
          {
            ((void (*)(std::__shared_weak_count *))v365->__on_zero_shared)(v365);
            std::__shared_weak_count::__release_weak(v366);
          }
          v370 = object[0];
          v371 = _os_log_pack_fill();
          *(_DWORD *)v371 = 134217984;
          *(_QWORD *)(v371 + 4) = v13;
          v372 = operator new();
          v373 = *(unsigned __int8 *)(v733 + 39);
          v374 = v727;
          if ((v373 & 0x80u) != 0)
          {
            v374 = *(_QWORD *)(v733 + 16);
            v373 = *(_QWORD *)(v733 + 24);
          }
          *(_QWORD *)v372 = v370;
          *(_OWORD *)(v372 + 8) = *(_OWORD *)&object[1];
          object[1] = 0;
          object[2] = 0;
          *(_OWORD *)(v372 + 24) = *(_OWORD *)&object[3];
          object[3] = 0;
          object[4] = 0;
          *(_QWORD *)(v372 + 40) = v374;
          *(_QWORD *)(v372 + 48) = v373;
          *(_BYTE *)(v372 + 56) = 2;
          category.f64[0] = 0.0;
          *(_QWORD *)&v772 = v372;
          (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v18 + 24) + 40))(*(_QWORD *)(v18 + 24), &v772);
          v375 = v772;
          *(_QWORD *)&v772 = 0;
          if (v375)
          {
            v376 = *(std::__shared_weak_count **)(v375 + 32);
            if (v376)
            {
              v377 = (unint64_t *)&v376->__shared_owners_;
              do
                v378 = __ldaxr(v377);
              while (__stlxr(v378 - 1, v377));
              if (!v378)
              {
                ((void (*)(std::__shared_weak_count *))v376->__on_zero_shared)(v376);
                std::__shared_weak_count::__release_weak(v376);
              }
            }
            v379 = *(std::__shared_weak_count **)(v375 + 16);
            if (v379)
            {
              v380 = (unint64_t *)&v379->__shared_owners_;
              do
                v381 = __ldaxr(v380);
              while (__stlxr(v381 - 1, v380));
              if (!v381)
              {
                ((void (*)(std::__shared_weak_count *))v379->__on_zero_shared)(v379);
                std::__shared_weak_count::__release_weak(v379);
              }
            }
            MEMORY[0x212BC6398](v375, 0x10F0C40B62ED6C6);
            v382 = category.f64[0];
            category.f64[0] = 0.0;
            if (v382 != 0.0)
            {
              v383 = *(std::__shared_weak_count **)(*(_QWORD *)&v382 + 32);
              if (v383)
              {
                v384 = (unint64_t *)&v383->__shared_owners_;
                do
                  v385 = __ldaxr(v384);
                while (__stlxr(v385 - 1, v384));
                if (!v385)
                {
                  ((void (*)(std::__shared_weak_count *))v383->__on_zero_shared)(v383);
                  std::__shared_weak_count::__release_weak(v383);
                }
              }
              v386 = *(std::__shared_weak_count **)(*(_QWORD *)&v382 + 16);
              if (v386)
              {
                v387 = (unint64_t *)&v386->__shared_owners_;
                do
                  v388 = __ldaxr(v387);
                while (__stlxr(v388 - 1, v387));
                if (!v388)
                {
                  ((void (*)(std::__shared_weak_count *))v386->__on_zero_shared)(v386);
                  std::__shared_weak_count::__release_weak(v386);
                }
              }
              MEMORY[0x212BC6398](*(_QWORD *)&v382, 0x10F0C40B62ED6C6);
            }
          }
          v389 = (std::__shared_weak_count *)object[4];
          if (object[4])
          {
            v390 = (unint64_t *)((char *)object[4] + 8);
            do
              v391 = __ldaxr(v390);
            while (__stlxr(v391 - 1, v390));
            if (!v391)
            {
              ((void (*)(std::__shared_weak_count *))v389->__on_zero_shared)(v389);
              std::__shared_weak_count::__release_weak(v389);
            }
          }
          v392 = (std::__shared_weak_count *)object[2];
          if (object[2])
          {
            v393 = (unint64_t *)((char *)object[2] + 8);
            do
              v394 = __ldaxr(v393);
            while (__stlxr(v394 - 1, v393));
            if (!v394)
            {
              ((void (*)(std::__shared_weak_count *))v392->__on_zero_shared)(v392);
              std::__shared_weak_count::__release_weak(v392);
            }
          }
        }
        else
        {
          os_log_type_enabled(v362, OS_LOG_TYPE_DEBUG);
          LODWORD(object[0]) = 134217984;
          *(void **)((char *)object + 4) = (void *)v13;
          v395 = (void *)_os_log_send_and_compose_impl();
          if (v395)
            free(v395);
        }
        if (v16)
        {
          sub_20E8C003C((uint64_t)&v748, "Not enough correspondences available (%zu)", v13);
          sub_20E863570((uint64_t)&v748);
        }
        sub_20E863570((uint64_t)&v748);
        v396 = v755;
        if (v755)
        {
          v397 = (unint64_t *)&v755->__shared_owners_;
          do
            v398 = __ldaxr(v397);
          while (__stlxr(v398 - 1, v397));
          if (!v398)
          {
            ((void (*)(std::__shared_weak_count *))v396->__on_zero_shared)(v396);
            std::__shared_weak_count::__release_weak(v396);
          }
        }
        return 0;
      }
    }
    memmove(v352, v350, v351);
    goto LABEL_238;
  }
  while (v13 < *v14)
  {
    if (++v14 == v15)
      goto LABEL_12;
  }
  v671 = a5;
  v741 = 0;
  v740 = 0;
  v742 = 0;
  v24 = *a3;
  object[0] = v11;
  object[1] = v24;
  sub_20EB59674((uint64_t)&v740, object, v13);
  v728 = *(uint64_t *)(a4 + 16);
  *(_QWORD *)&v26 = *(_QWORD *)(a4 + 40);
  v720 = v26;
  v723 = *(int8x16_t *)a4;
  v694 = *(uint64_t *)(a4 + 64);
  v714 = *(int8x16_t *)(a4 + 48);
  v717 = *(int8x16_t *)(a4 + 24);
  v669 = *(double *)(a1 + 24);
  v27 = *(_QWORD *)a1;
  v697 = *(_QWORD *)(a1 + 8);
  v28 = *(_QWORD *)(a1 + 16);
  v746 = 0;
  v745 = 0;
  v747 = 0;
  v29 = (char *)v740;
  v30 = v741;
  v31 = v741 - (_BYTE *)v740;
  v654 = v12;
  v672 = v28;
  if (v741 == v740)
  {
    v41 = 12345;
    if (v27)
      goto LABEL_33;
  }
  else
  {
    v32 = 0xCCCCCCCCCCCCCCCDLL * (v31 >> 3);
    if (v32 >= 0x666666666666667)
      sub_20E867F44();
    v33 = operator new(v31);
    v34 = 0;
    v745 = v33;
    v747 = (char *)&v33[5 * v32];
    do
    {
      v35 = &v29[v34];
      v36 = (char *)&v33[(unint64_t)v34 / 8];
      *(_OWORD *)v36 = *(_OWORD *)&v29[v34];
      v37 = *(_OWORD *)&v29[v34 + 16];
      *((_QWORD *)v36 + 4) = *(_QWORD *)&v29[v34 + 32];
      *((_OWORD *)v36 + 1) = v37;
      v34 += 40;
    }
    while (v35 + 40 != v30);
    v38 = v34 / 40;
    v746 = &v33[5 * (v34 / 40)];
    if (v34)
    {
      v39 = 0;
      v40 = v33 + 4;
      v41 = 12345;
      do
      {
        v41 = 214013 * v41 + 2531011;
        v42 = (char *)&v33[5 * ((HIWORD(v41) & 0x7FFF) % v38) + 5 * v39];
        v43 = *(_OWORD *)v42;
        *(_OWORD *)v42 = *((_OWORD *)v40 - 2);
        *((_OWORD *)v40 - 2) = v43;
        v44 = *((_OWORD *)v42 + 1);
        *((_OWORD *)v42 + 1) = *((_OWORD *)v40 - 1);
        *((_OWORD *)v40 - 1) = v44;
        *(_QWORD *)&v44 = *((_QWORD *)v42 + 4);
        *((_QWORD *)v42 + 4) = *v40;
        *v40 = v44;
        v40 += 5;
        ++v39;
        --v38;
      }
      while (v38);
      if (v27)
        goto LABEL_33;
    }
    else
    {
      v41 = 12345;
      if (v27)
        goto LABEL_33;
    }
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/RANSAC/HypothesisUtil.h", 104, (uint64_t)"max_hypothesis > 0", 18, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_586;
  }
LABEL_33:
  if (v27 > v697
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/RANSAC/HypothesisUtil.h", 105, (uint64_t)"max_hypothesis <= max_trials", 28, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_586:
    abort();
  }
  v45 = v746;
  v46 = (char *)v745;
  v670 = v13;
  if (0xCCCCCCCCCCCCCCCDLL * ((v746 - (_BYTE *)v745) >> 3) < 3)
  {
    __p = 0;
    v47 = 0;
    v695 = 0;
    goto LABEL_37;
  }
  if (!v27)
  {
    v47 = 0;
    v695 = 0;
    __p = 0;
    if (!v697)
      goto LABEL_37;
    goto LABEL_307;
  }
  if (v27 > 0x11A7B9611A7B961)
    sub_20E867F44();
  v290 = (double *)operator new(232 * v27);
  v695 = (char *)&v290[29 * v27];
  v47 = v290;
  __p = v290;
  if (v697)
  {
LABEL_307:
    v674 = v27;
    v400 = 0;
    v401 = v723;
    v402 = (float64x2_t)vextq_s8(v401, v401, 8uLL);
    v404 = v714;
    v403 = v717;
    COERCE_DOUBLE(v405 = vextq_s8(v403, v403, 8uLL).i64[0]);
    COERCE_DOUBLE(v406 = vextq_s8(v404, v404, 8uLL).i64[0]);
    v702 = *(double *)v404.i64 + *(double *)v404.i64;
    v703 = *(double *)v401.i64 + *(double *)v401.i64;
    v700 = *(double *)&v406 + *(double *)&v406;
    v701 = v402.f64[0] + v402.f64[0];
    v698 = *(double *)&v405 + *(double *)&v405;
    v699 = *(double *)v403.i64 + *(double *)v403.i64;
    v684 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v402.f64[0], 0);
    v683 = (float64x2_t)vdupq_lane_s64(v728, 0);
    v710 = *(double *)&v405;
    v713 = v402.f64[0];
    v682 = *(double *)&v728 + *(double *)v723.i64 * 0.0 + v402.f64[0] * 0.0;
    v681 = (float64x2_t)vdupq_lane_s64(v405, 0);
    v680 = (float64x2_t)vdupq_lane_s64(v720, 0);
    v679 = (float64x2_t)vdupq_lane_s64(v406, 0);
    v678 = *(double *)&v720 + *(double *)v717.i64 * 0.0 + *(double *)&v405 * 0.0;
    v677 = (float64x2_t)vdupq_lane_s64(v694, 0);
    v706 = *(double *)&v406;
    v676 = *(double *)&v694 + *(double *)v714.i64 * 0.0 + *(double *)&v406 * 0.0;
    v407.f64[0] = NAN;
    v407.f64[1] = NAN;
    v673 = (int8x16_t)vnegq_f64(v407);
    while (1)
    {
      v408 = 0xCCCCCCCCCCCCCCCDLL * ((v45 - v46) >> 3);
      if (v408 <= 2)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/RANSAC/DataPointCorrespondenceUtil.h", 92, (uint64_t)"correspondences.size() >= SampleSize", 36, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v46 = (char *)v745;
        v408 = 0xCCCCCCCCCCCCCCCDLL * ((v746 - (_BYTE *)v745) >> 3);
      }
      for (i = 0; i < 3; ++i)
      {
        v41 = 214013 * v41 + 2531011;
        v410 = (HIWORD(v41) & 0x7FFF) % v408;
        object[i] = (void *)v410;
        if (i && (object[0] == (void *)v410 || i != 1 && object[1] == (void *)v410))
          --i;
      }
      v411 = (double *)&v46[40 * (uint64_t)object[0]];
      v412 = v411[2];
      v413 = v411[3];
      v414 = v411[4];
      v415 = *v411;
      v416 = v411[1];
      v417 = (double *)&v46[40 * (uint64_t)object[1]];
      v419 = v417[2];
      v418 = v417[3];
      v420 = v417[4];
      v421 = *v417;
      v422 = v417[1];
      v423 = v412 * (*(double *)v723.i64 - *(double *)v714.i64 * v415) + v413 * (v713 - v706 * v415);
      v424 = *(double *)&v694 * v415;
      v425 = v414 * (*(double *)&v728 - *(double *)&v694 * v415);
      v426 = v419 * (*(double *)v723.i64 - *(double *)v714.i64 * *v417);
      v427 = v418 * (v713 - v706 * *v417);
      v428 = *(double *)&v694 * *v417;
      v429 = v420 * (*(double *)&v728 - v428);
      v430 = v415 - *v417;
      v431 = v412 * (*(double *)v717.i64 - *(double *)v714.i64 * v416) + v413 * (v710 - v706 * v416);
      v432 = *(double *)&v694 * v416;
      v737 = v414;
      v433 = v414 * (*(double *)&v720 - *(double *)&v694 * v416);
      v434 = v419 * (*(double *)v717.i64 - *(double *)v714.i64 * v422);
      v435 = v418 * (v710 - v706 * v422);
      v436 = v420 * (*(double *)&v720 - *(double *)&v694 * v422);
      v437 = (v416 - v422) * (v429 + v423 - v425 - v426 - v427) - v430 * (v436 + v431 - v433 - v434 - v435);
      *(double *)v25.i64 = (v416 - v422)
                         * (v419 * (v701 - v700 * v421)
                          + v413 * (v703 - v702 * v415)
                          - v412 * (v701 - v700 * v415)
                          - v418 * (v703 - v702 * v421))
                         - v430
                         * (v419 * (v698 - v700 * v422)
                          + v413 * (v699 - v702 * v416)
                          - v412 * (v698 - v700 * v416)
                          - v418 * (v699 - v702 * v422));
      v438 = v433 + v431 - v434 - v435 - v436;
      v439 = (double *)&v46[40 * (uint64_t)object[2]];
      v440 = v425 + v423 - v426 - v427;
      v441 = v439[2];
      v442 = v439[3];
      v443 = v439[4];
      v444 = v430 * v438 - (v416 - v422) * (v440 - v429);
      v446 = *v439;
      v445 = v439[1];
      if (v437 == 0.0)
      {
        v447 = v737;
        if (*(double *)v25.i64 == 0.0)
          goto LABEL_370;
        v690 = v439[2];
        v692 = v439[4];
        v686 = *v439;
        v688 = v439[1];
        *(double *)&v748 = -v444 / *(double *)v25.i64;
        v448 = 1;
      }
      else
      {
        v402.f64[0] = *(double *)v25.i64 * *(double *)v25.i64 + v444 * (v437 * -4.0);
        v447 = v737;
        if (v402.f64[0] < 0.0)
          goto LABEL_370;
        v402.f64[0] = sqrt(v402.f64[0]);
        v402.f64[0] = (*(double *)v25.i64 + *(double *)vbslq_s8(v673, (int8x16_t)v402, v25).i64) * -0.5;
        *(double *)&v748 = v402.f64[0] / v437;
        v690 = v441;
        v692 = v443;
        v686 = v446;
        v688 = v445;
        if (v402.f64[0] == 0.0)
        {
          v448 = 1;
        }
        else
        {
          v448 = 0;
          *((double *)&v748 + 1) = v444 / v402.f64[0];
        }
      }
      v449 = *(double *)&v748;
      v450 = v449 * v449 + 1.0;
      v451.f64[0] = (1.0 - v449 * v449) / v450;
      v402.f64[0] = (v449 + v449) / v450;
      v402.f64[1] = v451.f64[0];
      v451.f64[1] = -v402.f64[0];
      v452 = v449 * v449 + -1.0;
      v453 = v700 * *(double *)&v748 - *(double *)v714.i64 * v452;
      v454 = v702 * *(double *)&v748 + v706 * v452;
      v455 = v413 * (v710 * v452 + v699 * *(double *)&v748 - v416 * v454)
           + v412 * (*(double *)v717.i64 * v452 + v416 * v453 - v698 * *(double *)&v748)
           - v447 * (*(double *)&v720 * v450 - v432 * v450);
      v456 = *(double *)v723.i64 * v452;
      v457 = v447 * (*(double *)&v728 * v450 - v424 * v450)
           - v412 * (*(double *)v723.i64 * v452 + v415 * v453 - v701 * *(double *)&v748);
      v458 = v713 * v452;
      v459 = v457 - v413 * (v458 + v703 * *(double *)&v748 - v415 * v454);
      v460 = (v459
            - (v420 * (*(double *)&v728 * v450 - v428 * v450)
             - v419 * (v456 + v421 * v453 - v701 * *(double *)&v748)
             - v418 * (v458 + v703 * *(double *)&v748 - v421 * v454)))
           / (v430
            * v450);
      v461 = (v455 + v450 * (v416 * v460)) / v450;
      v462 = vmlaq_f64(vmulq_n_f64(v451, *(double *)v723.i64), v684, v402);
      v463 = vmlaq_f64(vmulq_n_f64(v451, *(double *)v717.i64), v681, v402);
      v464 = vmlaq_f64(vmulq_n_f64(v451, *(double *)v714.i64), v679, v402);
      v25.i64[1] = 0;
      *(float64x2_t *)object = vmlaq_f64(v462, (float64x2_t)0, v683);
      *(double *)&object[3] = (v450 * (v415 * v460) - v459) / v450;
      *(float64x2_t *)&object[4] = vmlaq_f64(v463, (float64x2_t)0, v680);
      *((double *)&v757 + 1) = v461;
      v402.f64[1] = v677.f64[1];
      v758 = vmlaq_f64(v464, (float64x2_t)0, v677);
      object[2] = *(void **)&v682;
      *(double *)&v757 = v678;
      v759.f64[0] = v676;
      v759.f64[1] = v460;
      if ((v448 & 1) == 0)
      {
        v465 = *((double *)&v748 + 1);
        v466 = v465 * v465 + 1.0;
        v467.f64[0] = (1.0 - v465 * v465) / v466;
        v402.f64[0] = (v465 + v465) / v466;
        v402.f64[1] = v467.f64[0];
        v467.f64[1] = -v402.f64[0];
        v468 = v465 * v465 + -1.0;
        v469 = v700 * *((double *)&v748 + 1) - *(double *)v714.i64 * v468;
        v25.i64[1] = *((_QWORD *)&v720 + 1);
        *(double *)v25.i64 = v702 * *((double *)&v748 + 1) + v706 * v468;
        v470 = v413 * (v710 * v468 + v699 * *((double *)&v748 + 1) - v416 * *(double *)v25.i64)
             + v412 * (*(double *)v717.i64 * v468 + v416 * v469 - v698 * *((double *)&v748 + 1))
             - v447 * (*(double *)&v720 * v466 - v432 * v466);
        v471 = *(double *)v723.i64 * v468;
        v472 = v447 * (*(double *)&v728 * v466 - v424 * v466)
             - v412 * (*(double *)v723.i64 * v468 + v415 * v469 - v701 * *((double *)&v748 + 1));
        v473 = v713 * v468;
        v474 = v472 - v413 * (v473 + v703 * *((double *)&v748 + 1) - v415 * *(double *)v25.i64);
        v475 = (v474
              - (v420 * (*(double *)&v728 * v466 - v428 * v466)
               - v419 * (v471 + v421 * v469 - v701 * *((double *)&v748 + 1))
               - v418 * (v473 + v703 * *((double *)&v748 + 1) - v421 * *(double *)v25.i64)))
             / (v430
              * v466);
        v476 = (v470 + v466 * (v416 * v475)) / v466;
        v477 = (v466 * (v415 * v475) - v474) / v466;
        v478 = vmlaq_f64(vmulq_n_f64(v467, *(double *)v723.i64), v684, v402);
        v479 = vmlaq_f64(vmulq_n_f64(v467, *(double *)v717.i64), v681, v402);
        v480 = vmlaq_f64(vmulq_n_f64(v467, *(double *)v714.i64), v679, v402);
        v402.f64[1] = v683.f64[1];
        v760 = vmlaq_f64(v478, (float64x2_t)0, v683);
        v761 = v682;
        v762 = v477;
        v763 = vmlaq_f64(v479, (float64x2_t)0, v680);
        v764 = v678;
        v765 = v476;
        v766 = vmlaq_f64(v480, (float64x2_t)0, v677);
        v767 = v676;
        v768 = v475;
      }
      if (v759.f64[1] + v412 * v758.f64[0] + v413 * v758.f64[1] + v447 * v759.f64[0] <= 0.0)
      {
        v489 = 0;
        v488 = 1.79769313e308;
        v482 = v688;
        v481 = v690;
        v483 = v686;
        *(double *)v25.i64 = v692;
        if ((v448 & 1) != 0)
          goto LABEL_351;
      }
      else
      {
        v482 = v688;
        v481 = v690;
        v483 = v686;
        *(double *)v25.i64 = v692;
        if (v759.f64[1] + v419 * v758.f64[0] + v418 * v758.f64[1] + v420 * v759.f64[0] <= 0.0
          || (v484 = v759.f64[1] + v690 * v758.f64[0] + v442 * v758.f64[1] + v692 * v759.f64[0], v484 <= 0.0))
        {
          v489 = 0;
          v488 = 1.79769313e308;
          if ((v448 & 1) != 0)
            goto LABEL_351;
        }
        else
        {
          if (v484 == 0.0)
            v487 = 1.0;
          else
            v487 = 1.0 / v484;
          v485 = *(double *)&object[3]
               + v690 * *(double *)object
               + v442 * *(double *)&object[1]
               + v692 * *(double *)&object[2];
          v486 = *((double *)&v757 + 1)
               + v690 * *(double *)&object[4]
               + v442 * *(double *)&object[5]
               + v692 * *(double *)&v757;
          v488 = (v487 * v485 - v686) * (v487 * v485 - v686) + (v487 * v486 - v688) * (v487 * v486 - v688);
          v489 = v488 < 1.79769313e308;
          if (v488 >= 1.79769313e308)
            v488 = 1.79769313e308;
          if ((v448 & 1) != 0)
          {
LABEL_351:
            v495 = 0;
            if (!v489)
              goto LABEL_370;
            goto LABEL_352;
          }
        }
      }
      if (v768 + v412 * v766.f64[0] + v413 * v766.f64[1] + v447 * v767 <= 0.0)
        goto LABEL_351;
      if (v768 + v419 * v766.f64[0] + v418 * v766.f64[1] + v420 * v767 <= 0.0)
        goto LABEL_351;
      v490 = v768 + v481 * v766.f64[0] + v442 * v766.f64[1] + *(double *)v25.i64 * v767;
      if (v490 <= 0.0)
        goto LABEL_351;
      if (v490 == 0.0)
        v493 = 1.0;
      else
        v493 = 1.0 / v490;
      v491 = v762 + v481 * v760.f64[0] + v442 * v760.f64[1] + *(double *)v25.i64 * v761;
      v492 = v765 + v481 * v763.f64[0] + v442 * v763.f64[1] + *(double *)v25.i64 * v764;
      v494 = (v493 * v491 - v483) * (v493 * v491 - v483) + (v493 * v492 - v482) * (v493 * v492 - v482);
      v495 = v494 < v488;
      if (v494 < v488)
        v489 = 1;
      if (!v489)
        goto LABEL_370;
LABEL_352:
      v496 = &object[12 * v495];
      v498 = *v496;
      v497 = v496[1];
      v500 = v496[2];
      v499 = v496[3];
      v502 = v496[4];
      v501 = v496[5];
      v503 = v496[6];
      *(_QWORD *)&v402.f64[0] = v496[7];
      v505 = v496[8];
      v504 = v496[9];
      v507 = v496[10];
      v506 = v496[11];
      v508 = *((_QWORD *)&v748 + v495);
      if (v47 < (double *)v695)
      {
        *v47 = 0.0;
        *((_QWORD *)v47 + 1) = v498;
        *((_QWORD *)v47 + 2) = v497;
        *((_QWORD *)v47 + 3) = v500;
        *((_QWORD *)v47 + 4) = v499;
        *((_QWORD *)v47 + 5) = v502;
        *((_QWORD *)v47 + 6) = v501;
        *((_QWORD *)v47 + 7) = v503;
        v47[8] = v402.f64[0];
        *((_QWORD *)v47 + 9) = v505;
        *((_QWORD *)v47 + 10) = v504;
        *((_QWORD *)v47 + 11) = v507;
        *((_QWORD *)v47 + 12) = v506;
        *((_QWORD *)v47 + 13) = v508;
        v47[14] = v415;
        v47[15] = v416;
        v47[16] = v412;
        v47[17] = v413;
        v47[18] = v447;
        v47[19] = v421;
        v47[20] = v422;
        v47[21] = v419;
        v47[22] = v418;
        v47[23] = v420;
        v47[24] = v483;
        v47[25] = v482;
        v47[26] = v481;
        v47[27] = v442;
        v47[28] = *(double *)v25.i64;
        v47 += 29;
        v509 = (char *)__p;
        goto LABEL_369;
      }
      v510 = 0x34F72C234F72C235 * (v47 - __p) + 1;
      if (v510 > 0x11A7B9611A7B961)
        sub_20E867F44();
      if (0x69EE58469EE5846ALL * ((v695 - (char *)__p) >> 3) > v510)
        v510 = 0x69EE58469EE5846ALL * ((v695 - (char *)__p) >> 3);
      if ((unint64_t)(0x34F72C234F72C235 * ((v695 - (char *)__p) >> 3)) >= 0x8D3DCB08D3DCB0)
        v511 = 0x11A7B9611A7B961;
      else
        v511 = v510;
      if (v511)
      {
        v655 = *v496;
        v656 = v496[1];
        v657 = v496[2];
        v658 = v496[3];
        v659 = v496[4];
        v660 = v496[5];
        v661 = v496[6];
        v662 = v496[7];
        v663 = v496[8];
        v664 = v496[9];
        v665 = v496[10];
        v666 = v496[11];
        v667 = v508;
        v668 = v442;
        v687 = v483;
        v689 = v482;
        v691 = v481;
        v693 = v25.i64[0];
        v696 = v420;
        if (v511 > 0x11A7B9611A7B961)
          sub_20E877A38();
        v512 = (char *)operator new(232 * v511);
        v420 = v696;
        v447 = v737;
        v481 = v691;
        v25.i64[0] = v693;
        v508 = v667;
        v442 = v668;
        v483 = v687;
        v482 = v689;
        v507 = v665;
        v506 = v666;
        v505 = v663;
        v504 = v664;
        v503 = v661;
        *(_QWORD *)&v402.f64[0] = v662;
        v502 = v659;
        v501 = v660;
        v500 = v657;
        v499 = v658;
        v498 = v655;
        v497 = v656;
      }
      else
      {
        v512 = 0;
      }
      v513 = &v512[8 * (v47 - __p)];
      *(_QWORD *)v513 = 0;
      *((_QWORD *)v513 + 1) = v498;
      *((_QWORD *)v513 + 2) = v497;
      *((_QWORD *)v513 + 3) = v500;
      *((_QWORD *)v513 + 4) = v499;
      *((_QWORD *)v513 + 5) = v502;
      *((_QWORD *)v513 + 6) = v501;
      *((_QWORD *)v513 + 7) = v503;
      *((_QWORD *)v513 + 8) = *(_QWORD *)&v402.f64[0];
      *((_QWORD *)v513 + 9) = v505;
      *((_QWORD *)v513 + 10) = v504;
      *((_QWORD *)v513 + 11) = v507;
      *((_QWORD *)v513 + 12) = v506;
      *((_QWORD *)v513 + 13) = v508;
      *((double *)v513 + 14) = v415;
      *((double *)v513 + 15) = v416;
      *((double *)v513 + 16) = v412;
      *((double *)v513 + 17) = v413;
      *((double *)v513 + 18) = v447;
      *((double *)v513 + 19) = v421;
      *((double *)v513 + 20) = v422;
      *((double *)v513 + 21) = v419;
      *((double *)v513 + 22) = v418;
      *((double *)v513 + 23) = v420;
      *((double *)v513 + 24) = v483;
      *((double *)v513 + 25) = v482;
      *((double *)v513 + 26) = v481;
      *((double *)v513 + 27) = v442;
      *((_QWORD *)v513 + 28) = v25.i64[0];
      if (v47 == __p)
      {
        v509 = &v512[8 * (v47 - __p)];
        v515 = __p;
        v695 = &v512[232 * v511];
        v47 = (double *)(v513 + 232);
        if (__p)
          goto LABEL_368;
      }
      else
      {
        v514 = &v512[8 * (v47 - __p)];
        v515 = __p;
        do
        {
          v509 = v514 - 232;
          v516 = *(_OWORD *)(v47 - 29);
          v517 = *(_OWORD *)(v47 - 27);
          *(_OWORD *)(v514 - 200) = *(_OWORD *)(v47 - 25);
          *(_OWORD *)(v514 - 216) = v517;
          *(_OWORD *)(v514 - 232) = v516;
          v518 = *(_OWORD *)(v47 - 23);
          v519 = *(_OWORD *)(v47 - 21);
          v520 = *(_OWORD *)(v47 - 19);
          *(_OWORD *)(v514 - 136) = *(_OWORD *)(v47 - 17);
          *(_OWORD *)(v514 - 152) = v520;
          *(_OWORD *)(v514 - 168) = v519;
          *(_OWORD *)(v514 - 184) = v518;
          v521 = *(_OWORD *)(v47 - 15);
          v522 = *(_OWORD *)(v47 - 13);
          v523 = *(_OWORD *)(v47 - 11);
          *(_OWORD *)(v514 - 72) = *(_OWORD *)(v47 - 9);
          *(_OWORD *)(v514 - 88) = v523;
          *(_OWORD *)(v514 - 104) = v522;
          *(_OWORD *)(v514 - 120) = v521;
          v524 = *(_OWORD *)(v47 - 7);
          v525 = *(_OWORD *)(v47 - 5);
          v526 = *(_OWORD *)(v47 - 3);
          *((double *)v514 - 1) = *(v47 - 1);
          *(_OWORD *)(v514 - 24) = v526;
          *(_OWORD *)(v514 - 40) = v525;
          *(_OWORD *)(v514 - 56) = v524;
          v47 -= 29;
          v514 -= 232;
        }
        while (v47 != __p);
        v695 = &v512[232 * v511];
        v47 = (double *)(v513 + 232);
        if (__p)
LABEL_368:
          operator delete(v515);
      }
LABEL_369:
      __p = (double *)v509;
      if (0x34F72C234F72C235 * (((char *)v47 - v509) >> 3) == v674)
        break;
LABEL_370:
      if (++v400 == v697)
        break;
      v45 = v746;
      v46 = (char *)v745;
    }
  }
LABEL_37:
  sub_20EB5F7B8((uint64_t *)&v745, v672, (char **)&v743);
  v54 = (double **)v743;
  v704 = v744;
  if (v743 != v744)
  {
    v55 = __p;
    if (__p == v47)
      goto LABEL_175;
    v56 = 0;
    v57 = v47;
    while (v55 == v57)
    {
      v59 = *v54;
      v58 = v54[1];
      v78 = (char *)v57 - (char *)v55;
      v79 = 0x34F72C234F72C235 * (v57 - v55);
      if (v79 >= 2)
        goto LABEL_58;
LABEL_152:
      v56 -= 858993459 * ((unint64_t)((char *)v58 - (char *)v59) >> 3);
      v289 = (char *)v57 - (char *)v55 - 232;
      if ((char *)v57 - (char *)v55 != 232)
      {
        v54 += 2;
        if (v54 != v704)
          continue;
      }
      if (v56)
      {
        if (v55 != v57)
        {
          v291 = (double)v56;
          v292 = v55;
          if (v289 < 0xE8)
            goto LABEL_620;
          v293 = v289 / 0xE8 + 1;
          v292 = &v55[29 * (v293 & 0x3FFFFFFFFFFFFFELL)];
          v294 = v293 & 0x3FFFFFFFFFFFFFELL;
          v295 = v55;
          do
          {
            v296 = v295[29] / v291;
            *v295 = *v295 / v291;
            v295[29] = v296;
            v295 += 58;
            v294 -= 2;
          }
          while (v294);
          if (v293 != (v293 & 0x3FFFFFFFFFFFFFELL))
          {
LABEL_620:
            do
            {
              *v292 = *v292 / v291;
              v292 += 29;
            }
            while (v292 != v57);
          }
        }
        v297 = 126 - 2 * __clz(0x34F72C234F72C235 * (v57 - v55));
        if (v55 == v57)
          v298 = 0;
        else
          v298 = v297;
        sub_20EB6014C((uint64_t)v55, (unint64_t)v57, v298, 1);
      }
      v55 = __p;
      if (__p != v47)
      {
        v722 = *(float64x2_t *)(__p + 1);
        v299 = __p[4];
        v716 = __p[3];
        *(_QWORD *)&v719 = vextq_s8((int8x16_t)v722, (int8x16_t)v722, 8uLL).u64[0];
        v736 = *(float64x2_t *)(__p + 5);
        v300 = __p[8];
        v725 = __p[7];
        *(_QWORD *)&v731 = vextq_s8((int8x16_t)v736, (int8x16_t)v736, 8uLL).u64[0];
        v301 = *(__n128 *)(__p + 9);
        _Q6 = (__n128)vextq_s8((int8x16_t)v301, (int8x16_t)v301, 8uLL);
        v53.n128_f64[0] = __p[11];
        v302 = __p[12];
        v303 = 1;
        v304 = a1;
        v54 = (double **)v743;
        v709 = _Q6;
        v712 = v301.n128_u64[0];
        *(__n128 *)__pa = v53;
        if (!v743)
          goto LABEL_177;
LABEL_176:
        v744 = v54;
        operator delete(v54);
        v53 = *(__n128 *)__pa;
        _Q6 = v709;
        v301.n128_u64[0] = v712;
        goto LABEL_177;
      }
LABEL_175:
      v303 = 0;
      v302 = 0.0;
      v301.n128_u64[0] = 0;
      _Q6.n128_u64[0] = 0;
      v53.n128_u64[0] = 0;
      v48.f64[0] = 0.0;
      v736 = v48;
      v731 = 0.0;
      v725 = 0.0;
      v48.f64[0] = 0.0;
      v722 = v48;
      v719 = 0.0;
      v716 = 0.0;
      v300 = 0.0;
      v299 = 0.0;
      v304 = a1;
      v54 = (double **)v743;
      v709 = _Q6;
      v712 = 0;
      *(__n128 *)__pa = v53;
      if (!v743)
        goto LABEL_177;
      goto LABEL_176;
    }
    v59 = *v54;
    v58 = v54[1];
    v60 = v55;
    if (*v54 == v58)
    {
      v80 = (char *)v57 - (char *)v55 - 232;
      v81 = v55;
      _Q2.f64[0] = 0.0;
      if (v80 < 0xE8)
        goto LABEL_621;
      v82 = v80 / 0xE8 + 1;
      v81 = &v55[29 * (v82 & 0x3FFFFFFFFFFFFFELL)];
      v83 = v82 & 0x3FFFFFFFFFFFFFELL;
      v84 = v55;
      do
      {
        v85 = v84[29] + 0.0;
        *v84 = *v84 + 0.0;
        v84[29] = v85;
        v84 += 58;
        v83 -= 2;
      }
      while (v83);
      if (v82 != (v82 & 0x3FFFFFFFFFFFFFELL))
      {
LABEL_621:
        do
        {
          *v81 = *v81 + 0.0;
          v81 += 29;
        }
        while (v81 != v57);
      }
      v58 = v59;
      v78 = (char *)v57 - (char *)v55;
      v79 = 0x34F72C234F72C235 * (v57 - v55);
      if (v79 < 2)
        goto LABEL_152;
    }
    else
    {
      do
      {
        v734 = v60[1];
        v729 = v60[2];
        v724 = v60[3];
        v721 = v60[4];
        v718 = v60[5];
        v715 = v60[6];
        v61 = v60[8];
        v711 = v60[7];
        v62 = v60[9];
        v63 = v60[10];
        v64 = 0.0;
        v65 = v59;
        v66 = v60[11];
        v67 = v60[12];
        do
        {
          v68 = v65[2];
          v69 = v65[3];
          v70 = v65[4];
          v71 = v721 + v734 * v68 + v729 * v69 + v724 * v70;
          v72 = v61 + v718 * v68 + v715 * v69 + v711 * v70;
          v73 = v67 + v62 * v68 + v63 * v69 + v66 * v70;
          if (v73 == 0.0)
            v74 = 1.0;
          else
            v74 = 1.0 / v73;
          v75 = v71 * v74;
          v76 = *v65;
          v77 = v65[1];
          v65 += 5;
          v64 = v64 + log1p(1.0 / (v669 * v669) * ((v75 - v76) * (v75 - v76) + (v72 * v74 - v77) * (v72 * v74 - v77)));
        }
        while (v65 != v58);
        *v60 = v64 + *v60;
        v60 += 29;
      }
      while (v60 != v57);
      v78 = (char *)v57 - (char *)v55;
      v79 = 0x34F72C234F72C235 * (v57 - v55);
      if (v79 < 2)
        goto LABEL_152;
    }
LABEL_58:
    v86 = (v79 - 1) >> 1;
    if (v78 == 464)
      v86 = 1;
    v87 = &v55[29 * v86];
    v735 = v56;
    if (v87 != v57)
    {
      v730 = v86;
      do
      {
        v88 = 0x34F72C234F72C235 * (v57 - v55);
        if (v88 < 2)
          break;
        if (v88 == 3)
        {
          sub_20EB5F9B0((uint64_t)v55, (uint64_t)(v55 + 29), (uint64_t)(v57 - 29));
          break;
        }
        if (v88 == 2)
        {
          v222 = *v55;
          if (*(v57 - 29) < *v55)
          {
            v223 = *(_OWORD *)(v55 + 7);
            v224 = *(float64x2_t *)(v55 + 9);
            v225 = *(float64x2_t *)(v55 + 11);
            v760.f64[0] = v55[13];
            v51 = *(float64x2_t *)(v55 + 1);
            v226 = *(_OWORD *)(v55 + 3);
            _Q6 = *(__n128 *)(v55 + 5);
            *(float64x2_t *)object = v51;
            *(_OWORD *)&object[2] = v226;
            v758 = v224;
            v759 = v225;
            *(__n128 *)&object[4] = _Q6;
            v757 = v223;
            v227 = *((_OWORD *)v55 + 7);
            v228 = *((_OWORD *)v55 + 8);
            rep = *((_QWORD *)v55 + 18);
            v748 = v228;
            v774 = *(float64x2_t *)(v55 + 19);
            v775 = v227;
            v229 = *(_OWORD *)(v55 + 21);
            v773 = *((_QWORD *)v55 + 23);
            v230 = *(float64x2_t *)(v55 + 26);
            v771 = *((_OWORD *)v55 + 12);
            v772 = v229;
            v770 = *((_QWORD *)v55 + 28);
            category = v230;
            *v55 = *(v57 - 29);
            v231 = *((_OWORD *)v57 - 14);
            v232 = *((_OWORD *)v57 - 13);
            *(_OWORD *)(v55 + 5) = *((_OWORD *)v57 - 12);
            *(_OWORD *)(v55 + 3) = v232;
            *(_OWORD *)(v55 + 1) = v231;
            v233 = *((_OWORD *)v57 - 11);
            v234 = *((_OWORD *)v57 - 10);
            v50 = *(float64x2_t *)(v57 - 18);
            v55[13] = *(v57 - 16);
            *(float64x2_t *)(v55 + 11) = v50;
            *(_OWORD *)(v55 + 9) = v234;
            *(_OWORD *)(v55 + 7) = v233;
            *((_OWORD *)v55 + 7) = *(_OWORD *)(v57 - 15);
            v235 = *(_OWORD *)(v57 - 13);
            v55[18] = *(v57 - 11);
            *((_OWORD *)v55 + 8) = v235;
            *(_OWORD *)(v55 + 19) = *((_OWORD *)v57 - 5);
            v236 = *((_OWORD *)v57 - 4);
            v55[23] = *(v57 - 6);
            *(_OWORD *)(v55 + 21) = v236;
            *((_OWORD *)v55 + 12) = *(_OWORD *)(v57 - 5);
            v237 = *(_OWORD *)(v57 - 3);
            v55[28] = *(v57 - 1);
            *((_OWORD *)v55 + 13) = v237;
            *(v57 - 29) = v222;
            v239 = *(_OWORD *)&object[2];
            v238 = *(_OWORD *)&object[4];
            *((_OWORD *)v57 - 14) = *(_OWORD *)object;
            *((_OWORD *)v57 - 13) = v239;
            *((_OWORD *)v57 - 12) = v238;
            v240 = v757;
            v241 = v758;
            _Q2 = v759;
            *(v57 - 16) = v760.f64[0];
            *((float64x2_t *)v57 - 10) = v241;
            *((float64x2_t *)v57 - 9) = _Q2;
            *((_OWORD *)v57 - 11) = v240;
            *(_OWORD *)(v57 - 15) = v775;
            v242 = rep;
            *(_OWORD *)(v57 - 13) = v748;
            *((_QWORD *)v57 - 11) = v242;
            *((float64x2_t *)v57 - 5) = v774;
            v243 = v772;
            *((_QWORD *)v57 - 6) = v773;
            *((_OWORD *)v57 - 4) = v243;
            *(_OWORD *)(v57 - 5) = v771;
            v48 = category;
            *((_QWORD *)v57 - 1) = v770;
            *(float64x2_t *)(v57 - 3) = v48;
          }
          break;
        }
        if ((char *)v57 - (char *)v55 <= 1855)
        {
          while (v55 != v57 - 29)
          {
            v248 = v55;
            v55 += 29;
            if (v248 != v57 && v55 != v57)
            {
              v249 = *v248;
              v250 = *v248;
              v251 = v55;
              v252 = v248;
              v253 = v55;
              do
              {
                v254 = *v253;
                v253 += 29;
                _Q2.f64[0] = v254;
                if (v254 < v250)
                {
                  v250 = _Q2.f64[0];
                  v252 = v251;
                }
                v251 = v253;
              }
              while (v253 != v57);
              if (v252 != v248)
              {
                v255 = *(_OWORD *)(v248 + 7);
                v256 = *(float64x2_t *)(v248 + 9);
                v257 = *(float64x2_t *)(v248 + 11);
                v760.f64[0] = v248[13];
                v258 = *(_OWORD *)(v248 + 3);
                _Q6 = *(__n128 *)(v248 + 5);
                *(_OWORD *)object = *(_OWORD *)(v248 + 1);
                *(_OWORD *)&object[2] = v258;
                v758 = v256;
                v759 = v257;
                *(__n128 *)&object[4] = _Q6;
                v757 = v255;
                v259 = *((_OWORD *)v248 + 7);
                v260 = *((_OWORD *)v248 + 8);
                rep = *((_QWORD *)v248 + 18);
                v748 = v260;
                v774 = *(float64x2_t *)(v248 + 19);
                v775 = v259;
                v261 = *(_OWORD *)(v248 + 21);
                v773 = *((_QWORD *)v248 + 23);
                v262 = *(float64x2_t *)(v248 + 26);
                v771 = *((_OWORD *)v248 + 12);
                v772 = v261;
                v770 = *((_QWORD *)v248 + 28);
                category = v262;
                *v248 = *v252;
                v263 = *(_OWORD *)(v252 + 1);
                v264 = *(_OWORD *)(v252 + 3);
                *(_OWORD *)(v248 + 5) = *(_OWORD *)(v252 + 5);
                *(_OWORD *)(v248 + 3) = v264;
                *(_OWORD *)(v248 + 1) = v263;
                v265 = *(_OWORD *)(v252 + 7);
                v266 = *(_OWORD *)(v252 + 9);
                v267 = *(_OWORD *)(v252 + 11);
                v248[13] = v252[13];
                *(_OWORD *)(v248 + 11) = v267;
                *(_OWORD *)(v248 + 9) = v266;
                *(_OWORD *)(v248 + 7) = v265;
                *((_OWORD *)v248 + 7) = *((_OWORD *)v252 + 7);
                v268 = *((_OWORD *)v252 + 8);
                v248[18] = v252[18];
                *((_OWORD *)v248 + 8) = v268;
                *(_OWORD *)(v248 + 19) = *(_OWORD *)(v252 + 19);
                v269 = *(_OWORD *)(v252 + 21);
                v248[23] = v252[23];
                *(_OWORD *)(v248 + 21) = v269;
                *((_OWORD *)v248 + 12) = *((_OWORD *)v252 + 12);
                v270 = *((_OWORD *)v252 + 13);
                v248[28] = v252[28];
                *((_OWORD *)v248 + 13) = v270;
                *v252 = v249;
                v272 = *(_OWORD *)&object[2];
                v271 = *(_OWORD *)&object[4];
                *(_OWORD *)(v252 + 1) = *(_OWORD *)object;
                v273 = v757;
                v50 = v758;
                v51 = v759;
                v252[13] = v760.f64[0];
                *(_OWORD *)(v252 + 5) = v271;
                *(_OWORD *)(v252 + 3) = v272;
                *(float64x2_t *)(v252 + 11) = v51;
                *(float64x2_t *)(v252 + 9) = v50;
                *(_OWORD *)(v252 + 7) = v273;
                v274 = v748;
                *((_QWORD *)v252 + 18) = rep;
                _Q2 = v774;
                *((_OWORD *)v252 + 7) = v775;
                *((_OWORD *)v252 + 8) = v274;
                *(float64x2_t *)(v252 + 19) = _Q2;
                *((_QWORD *)v252 + 23) = v773;
                v275 = v771;
                *(_OWORD *)(v252 + 21) = v772;
                v48 = category;
                *((_QWORD *)v252 + 28) = v770;
                *((_OWORD *)v252 + 12) = v275;
                *((float64x2_t *)v252 + 13) = v48;
              }
            }
          }
          break;
        }
        v89 = v87;
        v90 = (uint64_t)&v55[29 * (v88 >> 1)];
        v91 = (unint64_t)(v57 - 29);
        v92 = sub_20EB5F9B0((uint64_t)v55, v90, (uint64_t)(v57 - 29));
        v48.f64[0] = *v55;
        if (*v55 >= *(double *)v90)
        {
          v122 = 0;
          v87 = v89;
          while (1)
          {
            v123 = &v57[v122 - 58];
            if (v123 == v55)
              break;
            _Q2.f64[0] = *v123;
            v122 -= 29;
            if (*v123 < *(double *)v90)
            {
              v124 = *(_OWORD *)(v55 + 7);
              v125 = *(float64x2_t *)(v55 + 9);
              v126 = *(float64x2_t *)(v55 + 11);
              v760.f64[0] = v55[13];
              v51 = *(float64x2_t *)(v55 + 1);
              v127 = *(_OWORD *)(v55 + 3);
              _Q6 = *(__n128 *)(v55 + 5);
              *(float64x2_t *)object = v51;
              *(_OWORD *)&object[2] = v127;
              v758 = v125;
              v759 = v126;
              *(__n128 *)&object[4] = _Q6;
              v757 = v124;
              v128 = *((_OWORD *)v55 + 7);
              v129 = *((_OWORD *)v55 + 8);
              rep = *((_QWORD *)v55 + 18);
              v748 = v129;
              v774 = *(float64x2_t *)(v55 + 19);
              v775 = v128;
              v130 = *(_OWORD *)(v55 + 21);
              v773 = *((_QWORD *)v55 + 23);
              v131 = *(float64x2_t *)(v55 + 26);
              v771 = *((_OWORD *)v55 + 12);
              v772 = v130;
              v770 = *((_QWORD *)v55 + 28);
              category = v131;
              v91 = (unint64_t)&v57[v122 - 29];
              *v55 = *(double *)v91;
              v132 = *(_OWORD *)&v57[v122 - 28];
              v133 = *(_OWORD *)&v57[v122 - 26];
              *(_OWORD *)(v55 + 5) = *(_OWORD *)&v57[v122 - 24];
              *(_OWORD *)(v55 + 3) = v133;
              *(_OWORD *)(v55 + 1) = v132;
              v134 = *(_OWORD *)&v57[v122 - 22];
              v135 = *(_OWORD *)&v57[v122 - 20];
              v50 = *(float64x2_t *)&v57[v122 - 18];
              v55[13] = v57[v122 - 16];
              *(float64x2_t *)(v55 + 11) = v50;
              *(_OWORD *)(v55 + 9) = v135;
              *(_OWORD *)(v55 + 7) = v134;
              *((_OWORD *)v55 + 7) = *(_OWORD *)&v57[v122 - 15];
              v136 = *(_OWORD *)&v57[v122 - 13];
              v55[18] = v57[v122 - 11];
              *((_OWORD *)v55 + 8) = v136;
              *(_OWORD *)(v55 + 19) = *(_OWORD *)&v57[v122 - 10];
              v137 = *(_OWORD *)&v57[v122 - 8];
              v55[23] = v57[v122 - 6];
              *(_OWORD *)(v55 + 21) = v137;
              *((_OWORD *)v55 + 12) = *(_OWORD *)&v57[v122 - 5];
              v138 = *(_OWORD *)&v57[v122 - 3];
              v55[28] = v57[v122 - 1];
              *((_OWORD *)v55 + 13) = v138;
              *(float64_t *)v91 = v48.f64[0];
              v140 = *(_OWORD *)&object[2];
              v139 = *(_OWORD *)&object[4];
              *(_OWORD *)(v91 + 8) = *(_OWORD *)object;
              *(_OWORD *)(v91 + 24) = v140;
              *(_OWORD *)(v91 + 40) = v139;
              v141 = v757;
              v142 = v758;
              _Q2 = v759;
              *(float64_t *)(v91 + 104) = v760.f64[0];
              *(float64x2_t *)(v91 + 88) = _Q2;
              *(float64x2_t *)(v91 + 72) = v142;
              *(_OWORD *)(v91 + 56) = v141;
              *(_OWORD *)(v91 + 112) = v775;
              v143 = rep;
              *(_OWORD *)(v91 + 128) = v748;
              *(_QWORD *)(v91 + 144) = v143;
              *(float64x2_t *)(v91 + 152) = v774;
              v144 = v772;
              *(_QWORD *)(v91 + 184) = v773;
              *(_OWORD *)(v91 + 168) = v144;
              *(_OWORD *)(v91 + 192) = v771;
              v48 = category;
              *(_QWORD *)(v91 + 224) = v770;
              *(float64x2_t *)(v91 + 208) = v48;
              ++v92;
              v93 = v55 + 29;
              if ((unint64_t)(v55 + 29) < v91)
                goto LABEL_68;
              goto LABEL_81;
            }
          }
          v169 = v55 + 29;
          v56 = v735;
          if (v48.f64[0] >= *(double *)v91)
          {
            if (v169 == (double *)v91)
              break;
            v169 = v55 + 58;
            while (1)
            {
              v170 = *(v169 - 29);
              if (v48.f64[0] < v170)
                break;
              _ZF = v169 == (double *)v91;
              v169 += 29;
              if (_ZF)
                goto LABEL_120;
            }
            v174 = *((_OWORD *)v169 - 14);
            v175 = *((_OWORD *)v169 - 12);
            *(_OWORD *)&object[2] = *((_OWORD *)v169 - 13);
            *(_OWORD *)&object[4] = v175;
            *(_OWORD *)object = v174;
            v176 = *((_OWORD *)v169 - 11);
            v177 = *(float64x2_t *)(v169 - 20);
            v178 = *(float64x2_t *)(v169 - 18);
            v760.f64[0] = *(v169 - 16);
            v758 = v177;
            v759 = v178;
            v757 = v176;
            v775 = *(_OWORD *)(v169 - 15);
            v179 = *(_OWORD *)(v169 - 13);
            rep = *((_QWORD *)v169 - 11);
            v748 = v179;
            v774 = *(float64x2_t *)(v169 - 10);
            v180 = *((_OWORD *)v169 - 4);
            v773 = *((_QWORD *)v169 - 6);
            v772 = v180;
            v771 = *(_OWORD *)(v169 - 5);
            v181 = *(float64x2_t *)(v169 - 3);
            v770 = *((_QWORD *)v169 - 1);
            category = v181;
            *(v169 - 29) = *(v57 - 29);
            v182 = *((_OWORD *)v57 - 14);
            v183 = *((_OWORD *)v57 - 12);
            *((_OWORD *)v169 - 13) = *((_OWORD *)v57 - 13);
            *((_OWORD *)v169 - 12) = v183;
            *((_OWORD *)v169 - 14) = v182;
            v184 = *((_OWORD *)v57 - 11);
            v185 = *((_OWORD *)v57 - 10);
            v50 = *(float64x2_t *)(v57 - 18);
            *(v169 - 16) = *(v57 - 16);
            *((_OWORD *)v169 - 10) = v185;
            *((float64x2_t *)v169 - 9) = v50;
            *((_OWORD *)v169 - 11) = v184;
            *(_OWORD *)(v169 - 15) = *(_OWORD *)(v57 - 15);
            v186 = *(_OWORD *)(v57 - 13);
            *(v169 - 11) = *(v57 - 11);
            *(_OWORD *)(v169 - 13) = v186;
            *((_OWORD *)v169 - 5) = *((_OWORD *)v57 - 5);
            v187 = *((_OWORD *)v57 - 4);
            *(v169 - 6) = *(v57 - 6);
            *((_OWORD *)v169 - 4) = v187;
            *(_OWORD *)(v169 - 5) = *(_OWORD *)(v57 - 5);
            v188 = *(_OWORD *)(v57 - 3);
            *(v169 - 1) = *(v57 - 1);
            *(_OWORD *)(v169 - 3) = v188;
            *(v57 - 29) = v170;
            v190 = *(_OWORD *)&object[2];
            v189 = *(_OWORD *)&object[4];
            *((_OWORD *)v57 - 14) = *(_OWORD *)object;
            *((_OWORD *)v57 - 13) = v190;
            *((_OWORD *)v57 - 12) = v189;
            v191 = v757;
            v192 = v758;
            _Q2 = v759;
            *(v57 - 16) = v760.f64[0];
            *((float64x2_t *)v57 - 10) = v192;
            *((float64x2_t *)v57 - 9) = _Q2;
            *((_OWORD *)v57 - 11) = v191;
            *(_OWORD *)(v57 - 15) = v775;
            v193 = rep;
            *(_OWORD *)(v57 - 13) = v748;
            *((_QWORD *)v57 - 11) = v193;
            *((float64x2_t *)v57 - 5) = v774;
            v194 = v772;
            *((_QWORD *)v57 - 6) = v773;
            *((_OWORD *)v57 - 4) = v194;
            *(_OWORD *)(v57 - 5) = v771;
            v48 = category;
            *((_QWORD *)v57 - 1) = v770;
            *(float64x2_t *)(v57 - 3) = v48;
          }
          if (v169 == (double *)v91)
            break;
          while (1)
          {
            v195 = *v55;
            do
            {
              v196 = *v169;
              v169 += 29;
              v197 = v196;
            }
            while (v195 >= v196);
            v198 = v169 - 29;
            do
            {
              v199 = *(double *)(v91 - 232);
              v91 -= 232;
              _Q2.f64[0] = v199;
            }
            while (v195 < v199);
            if ((unint64_t)v198 >= v91)
              break;
            v200 = *((_OWORD *)v169 - 14);
            v201 = *((_OWORD *)v169 - 12);
            *(_OWORD *)&object[2] = *((_OWORD *)v169 - 13);
            *(_OWORD *)&object[4] = v201;
            *(_OWORD *)object = v200;
            v202 = *((_OWORD *)v169 - 11);
            v203 = *(float64x2_t *)(v169 - 20);
            v204 = *(float64x2_t *)(v169 - 18);
            v760.f64[0] = *(v169 - 16);
            v758 = v203;
            v759 = v204;
            v757 = v202;
            v775 = *(_OWORD *)(v169 - 15);
            v205 = *(_OWORD *)(v169 - 13);
            rep = *((_QWORD *)v169 - 11);
            v748 = v205;
            v774 = *(float64x2_t *)(v169 - 10);
            v206 = *((_OWORD *)v169 - 4);
            v773 = *((_QWORD *)v169 - 6);
            v772 = v206;
            v771 = *(_OWORD *)(v169 - 5);
            v207 = *(float64x2_t *)(v169 - 3);
            v770 = *((_QWORD *)v169 - 1);
            category = v207;
            *(v169 - 29) = *(double *)v91;
            v208 = *(_OWORD *)(v91 + 8);
            v209 = *(_OWORD *)(v91 + 40);
            *((_OWORD *)v169 - 13) = *(_OWORD *)(v91 + 24);
            *((_OWORD *)v169 - 12) = v209;
            *((_OWORD *)v169 - 14) = v208;
            v210 = *(_OWORD *)(v91 + 56);
            v211 = *(_OWORD *)(v91 + 72);
            v50 = *(float64x2_t *)(v91 + 88);
            *(v169 - 16) = *(double *)(v91 + 104);
            *((_OWORD *)v169 - 10) = v211;
            *((float64x2_t *)v169 - 9) = v50;
            *((_OWORD *)v169 - 11) = v210;
            *(_OWORD *)(v169 - 15) = *(_OWORD *)(v91 + 112);
            v212 = *(_OWORD *)(v91 + 128);
            *(v169 - 11) = *(double *)(v91 + 144);
            *(_OWORD *)(v169 - 13) = v212;
            *((_OWORD *)v169 - 5) = *(_OWORD *)(v91 + 152);
            v213 = *(_OWORD *)(v91 + 168);
            *(v169 - 6) = *(double *)(v91 + 184);
            *((_OWORD *)v169 - 4) = v213;
            *(_OWORD *)(v169 - 5) = *(_OWORD *)(v91 + 192);
            v214 = *(_OWORD *)(v91 + 208);
            *(v169 - 1) = *(double *)(v91 + 224);
            *(_OWORD *)(v169 - 3) = v214;
            *(double *)v91 = v197;
            v216 = *(_OWORD *)&object[2];
            v215 = *(_OWORD *)&object[4];
            *(_OWORD *)(v91 + 8) = *(_OWORD *)object;
            *(_OWORD *)(v91 + 24) = v216;
            *(_OWORD *)(v91 + 40) = v215;
            v217 = v757;
            v218 = v758;
            v219 = v759;
            *(float64_t *)(v91 + 104) = v760.f64[0];
            *(float64x2_t *)(v91 + 88) = v219;
            *(float64x2_t *)(v91 + 72) = v218;
            *(_OWORD *)(v91 + 56) = v217;
            *(_OWORD *)(v91 + 112) = v775;
            v220 = rep;
            *(_OWORD *)(v91 + 128) = v748;
            *(_QWORD *)(v91 + 144) = v220;
            *(float64x2_t *)(v91 + 152) = v774;
            v221 = v772;
            *(_QWORD *)(v91 + 184) = v773;
            *(_OWORD *)(v91 + 168) = v221;
            *(_OWORD *)(v91 + 192) = v771;
            v48 = category;
            *(_QWORD *)(v91 + 224) = v770;
            *(float64x2_t *)(v91 + 208) = v48;
          }
          v55 = v169 - 29;
          if (v198 > v89)
            break;
        }
        else
        {
          v87 = v89;
          v93 = v55 + 29;
          if ((unint64_t)(v55 + 29) >= v91)
          {
LABEL_81:
            v98 = v93;
          }
          else
          {
LABEL_68:
            v94 = v93;
            while (1)
            {
              v95 = *(double *)v90;
              do
              {
                v96 = *v94;
                v94 += 29;
                v97 = v96;
              }
              while (v96 < v95);
              v98 = v94 - 29;
              do
              {
                v99 = *(double *)(v91 - 232);
                v91 -= 232;
                _Q2.f64[0] = v99;
              }
              while (v99 >= v95);
              if ((unint64_t)v98 >= v91)
                break;
              v100 = *((_OWORD *)v94 - 14);
              v101 = *((_OWORD *)v94 - 12);
              *(_OWORD *)&object[2] = *((_OWORD *)v94 - 13);
              *(_OWORD *)&object[4] = v101;
              *(_OWORD *)object = v100;
              v102 = *((_OWORD *)v94 - 11);
              v103 = *(float64x2_t *)(v94 - 20);
              v104 = *(float64x2_t *)(v94 - 18);
              v760.f64[0] = *(v94 - 16);
              v758 = v103;
              v759 = v104;
              v757 = v102;
              v775 = *(_OWORD *)(v94 - 15);
              v105 = *(_OWORD *)(v94 - 13);
              rep = *((_QWORD *)v94 - 11);
              v748 = v105;
              v774 = *(float64x2_t *)(v94 - 10);
              v106 = *((_OWORD *)v94 - 4);
              v773 = *((_QWORD *)v94 - 6);
              v772 = v106;
              v771 = *(_OWORD *)(v94 - 5);
              v107 = *(float64x2_t *)(v94 - 3);
              v770 = *((_QWORD *)v94 - 1);
              category = v107;
              *(v94 - 29) = *(double *)v91;
              v108 = *(_OWORD *)(v91 + 8);
              v109 = *(_OWORD *)(v91 + 40);
              *((_OWORD *)v94 - 13) = *(_OWORD *)(v91 + 24);
              *((_OWORD *)v94 - 12) = v109;
              *((_OWORD *)v94 - 14) = v108;
              v110 = *(_OWORD *)(v91 + 56);
              v111 = *(_OWORD *)(v91 + 72);
              v50 = *(float64x2_t *)(v91 + 88);
              *(v94 - 16) = *(double *)(v91 + 104);
              *((_OWORD *)v94 - 10) = v111;
              *((float64x2_t *)v94 - 9) = v50;
              *((_OWORD *)v94 - 11) = v110;
              *(_OWORD *)(v94 - 15) = *(_OWORD *)(v91 + 112);
              v112 = *(_OWORD *)(v91 + 128);
              *(v94 - 11) = *(double *)(v91 + 144);
              *(_OWORD *)(v94 - 13) = v112;
              *((_OWORD *)v94 - 5) = *(_OWORD *)(v91 + 152);
              v113 = *(_OWORD *)(v91 + 168);
              *(v94 - 6) = *(double *)(v91 + 184);
              *((_OWORD *)v94 - 4) = v113;
              *(_OWORD *)(v94 - 5) = *(_OWORD *)(v91 + 192);
              v114 = *(_OWORD *)(v91 + 208);
              *(v94 - 1) = *(double *)(v91 + 224);
              *(_OWORD *)(v94 - 3) = v114;
              *(double *)v91 = v97;
              v116 = *(_OWORD *)&object[2];
              v115 = *(_OWORD *)&object[4];
              *(_OWORD *)(v91 + 8) = *(_OWORD *)object;
              *(_OWORD *)(v91 + 24) = v116;
              *(_OWORD *)(v91 + 40) = v115;
              v117 = v757;
              v118 = v758;
              v119 = v759;
              *(float64_t *)(v91 + 104) = v760.f64[0];
              *(float64x2_t *)(v91 + 88) = v119;
              *(float64x2_t *)(v91 + 72) = v118;
              *(_OWORD *)(v91 + 56) = v117;
              *(_OWORD *)(v91 + 112) = v775;
              v120 = rep;
              *(_OWORD *)(v91 + 128) = v748;
              *(_QWORD *)(v91 + 144) = v120;
              *(float64x2_t *)(v91 + 152) = v774;
              v121 = v772;
              *(_QWORD *)(v91 + 184) = v773;
              *(_OWORD *)(v91 + 168) = v121;
              *(_OWORD *)(v91 + 192) = v771;
              v48 = category;
              *(_QWORD *)(v91 + 224) = v770;
              *(float64x2_t *)(v91 + 208) = v48;
              ++v92;
              if (v98 == (double *)v90)
                v90 = v91;
            }
          }
          if (v98 != (double *)v90)
          {
            v145 = *v98;
            if (*(double *)v90 < *v98)
            {
              v146 = *(_OWORD *)(v98 + 7);
              v147 = *(float64x2_t *)(v98 + 9);
              v148 = *(float64x2_t *)(v98 + 11);
              v760.f64[0] = v98[13];
              v149 = *(_OWORD *)(v98 + 3);
              _Q6 = *(__n128 *)(v98 + 5);
              *(_OWORD *)object = *(_OWORD *)(v98 + 1);
              *(_OWORD *)&object[2] = v149;
              v758 = v147;
              v759 = v148;
              *(__n128 *)&object[4] = _Q6;
              v757 = v146;
              v150 = *((_OWORD *)v98 + 7);
              v151 = *((_OWORD *)v98 + 8);
              rep = *((_QWORD *)v98 + 18);
              v748 = v151;
              v774 = *(float64x2_t *)(v98 + 19);
              v775 = v150;
              v152 = *(_OWORD *)(v98 + 21);
              v773 = *((_QWORD *)v98 + 23);
              v153 = *(float64x2_t *)(v98 + 26);
              v771 = *((_OWORD *)v98 + 12);
              v772 = v152;
              v770 = *((_QWORD *)v98 + 28);
              category = v153;
              *v98 = *(double *)v90;
              v154 = *(_OWORD *)(v90 + 8);
              v155 = *(_OWORD *)(v90 + 24);
              *(_OWORD *)(v98 + 5) = *(_OWORD *)(v90 + 40);
              *(_OWORD *)(v98 + 3) = v155;
              *(_OWORD *)(v98 + 1) = v154;
              v156 = *(_OWORD *)(v90 + 56);
              v157 = *(_OWORD *)(v90 + 72);
              v158 = *(_OWORD *)(v90 + 88);
              v98[13] = *(double *)(v90 + 104);
              *(_OWORD *)(v98 + 11) = v158;
              *(_OWORD *)(v98 + 9) = v157;
              *(_OWORD *)(v98 + 7) = v156;
              *((_OWORD *)v98 + 7) = *(_OWORD *)(v90 + 112);
              v159 = *(_OWORD *)(v90 + 128);
              v98[18] = *(double *)(v90 + 144);
              *((_OWORD *)v98 + 8) = v159;
              *(_OWORD *)(v98 + 19) = *(_OWORD *)(v90 + 152);
              v160 = *(_OWORD *)(v90 + 168);
              v98[23] = *(double *)(v90 + 184);
              *(_OWORD *)(v98 + 21) = v160;
              *((_OWORD *)v98 + 12) = *(_OWORD *)(v90 + 192);
              v161 = *(_OWORD *)(v90 + 208);
              v98[28] = *(double *)(v90 + 224);
              *((_OWORD *)v98 + 13) = v161;
              *(double *)v90 = v145;
              v163 = *(_OWORD *)&object[2];
              v162 = *(_OWORD *)&object[4];
              *(_OWORD *)(v90 + 8) = *(_OWORD *)object;
              v164 = v757;
              v50 = v758;
              v51 = v759;
              *(float64_t *)(v90 + 104) = v760.f64[0];
              *(_OWORD *)(v90 + 40) = v162;
              *(_OWORD *)(v90 + 24) = v163;
              *(float64x2_t *)(v90 + 88) = v51;
              *(float64x2_t *)(v90 + 72) = v50;
              *(_OWORD *)(v90 + 56) = v164;
              v165 = v748;
              *(_QWORD *)(v90 + 144) = rep;
              _Q2 = v774;
              *(_OWORD *)(v90 + 112) = v775;
              *(_OWORD *)(v90 + 128) = v165;
              *(float64x2_t *)(v90 + 152) = _Q2;
              *(_QWORD *)(v90 + 184) = v773;
              v166 = v771;
              *(_OWORD *)(v90 + 168) = v772;
              v48 = category;
              *(_QWORD *)(v90 + 224) = v770;
              *(_OWORD *)(v90 + 192) = v166;
              *(float64x2_t *)(v90 + 208) = v48;
              ++v92;
            }
          }
          v56 = v735;
          if (v98 == v87)
            break;
          if (!v92)
          {
            if (v98 <= v87)
            {
              v171 = v98 + 29;
              while (v171 != v57)
              {
                v172 = *v171;
                v173 = *(v171 - 29);
                v171 += 29;
                if (v172 < v173)
                  goto LABEL_87;
              }
            }
            else
            {
              while (v93 != v98)
              {
                v167 = *v93;
                v168 = *(v93 - 29);
                v93 += 29;
                if (v167 < v168)
                  goto LABEL_87;
              }
            }
            break;
          }
LABEL_87:
          if (v98 <= v87)
            v55 = v98 + 29;
          else
            v57 = v98;
        }
      }
      while (v57 != v87);
LABEL_120:
      v55 = __p;
      v79 = 0x34F72C234F72C235 * (v47 - __p);
      v57 = v47;
      v86 = v730;
    }
    v244 = v86 - v79;
    if (v86 <= v79)
    {
      if (v86 < v79)
      {
        v47 = &v55[29 * v86];
        v57 = v47;
      }
      goto LABEL_152;
    }
    if (0x34F72C234F72C235 * ((v695 - (char *)v57) >> 3) >= v244)
    {
      bzero(v57, 232 * ((232 * v244 - 232) / 0xE8) + 232);
      v47 = &v57[29 * ((232 * v244 - 232) / 0xE8) + 29];
      v55 = __p;
      v57 = v47;
      goto LABEL_152;
    }
    v245 = 0x34F72C234F72C235 * (v57 - __p) + v244;
    if (v245 > 0x11A7B9611A7B961)
      sub_20E867F44();
    if (0x69EE58469EE5846ALL * ((v695 - (char *)__p) >> 3) > v245)
      v245 = 0x69EE58469EE5846ALL * ((v695 - (char *)__p) >> 3);
    if ((unint64_t)(0x34F72C234F72C235 * ((v695 - (char *)__p) >> 3)) >= 0x8D3DCB08D3DCB0)
      v246 = 0x11A7B9611A7B961;
    else
      v246 = v245;
    if (v246)
    {
      if (v246 > 0x11A7B9611A7B961)
        sub_20E877A38();
      v247 = (char *)operator new(232 * v246);
    }
    else
    {
      v247 = 0;
    }
    v276 = &v247[8 * (v57 - __p)];
    v277 = 232 * ((232 * v244 - 232) / 0xE8) + 232;
    bzero(v276, v277);
    if (v57 == __p)
    {
      v55 = (double *)&v247[8 * (v57 - __p)];
      v279 = __p;
      v695 = &v247[232 * v246];
      v47 = (double *)&v276[v277];
      if (!__p)
        goto LABEL_151;
    }
    else
    {
      v278 = (double *)&v247[8 * (v57 - __p)];
      v279 = __p;
      do
      {
        v55 = v278 - 29;
        v280 = *(_OWORD *)(v57 - 29);
        v281 = *(_OWORD *)(v57 - 27);
        *(_OWORD *)(v278 - 25) = *(_OWORD *)(v57 - 25);
        *(_OWORD *)(v278 - 27) = v281;
        *(_OWORD *)(v278 - 29) = v280;
        v282 = *(_OWORD *)(v57 - 23);
        v283 = *(_OWORD *)(v57 - 21);
        v284 = *(_OWORD *)(v57 - 19);
        *(_OWORD *)(v278 - 17) = *(_OWORD *)(v57 - 17);
        *(_OWORD *)(v278 - 19) = v284;
        *(_OWORD *)(v278 - 21) = v283;
        *(_OWORD *)(v278 - 23) = v282;
        v285 = *(_OWORD *)(v57 - 15);
        v286 = *(_OWORD *)(v57 - 13);
        v287 = *(_OWORD *)(v57 - 11);
        v50 = *(float64x2_t *)(v57 - 9);
        *(float64x2_t *)(v278 - 9) = v50;
        *(_OWORD *)(v278 - 11) = v287;
        *(_OWORD *)(v278 - 13) = v286;
        *(_OWORD *)(v278 - 15) = v285;
        v48 = *(float64x2_t *)(v57 - 7);
        v288 = *(_OWORD *)(v57 - 5);
        _Q2 = *(float64x2_t *)(v57 - 3);
        *(v278 - 1) = *(v57 - 1);
        *(float64x2_t *)(v278 - 3) = _Q2;
        *(_OWORD *)(v278 - 5) = v288;
        *(float64x2_t *)(v278 - 7) = v48;
        v57 -= 29;
        v278 -= 29;
      }
      while (v57 != __p);
      v695 = &v247[232 * v246];
      v47 = (double *)&v276[v277];
      if (!__p)
        goto LABEL_151;
    }
    operator delete(v279);
LABEL_151:
    __p = v55;
    v57 = v47;
    v56 = v735;
    goto LABEL_152;
  }
  v303 = 0;
  v302 = 0.0;
  v301.n128_u64[0] = 0;
  _Q6.n128_u64[0] = 0;
  v53.n128_u64[0] = 0;
  v48.f64[0] = 0.0;
  v736 = v48;
  v731 = 0.0;
  v725 = 0.0;
  v48.f64[0] = 0.0;
  v722 = v48;
  v719 = 0.0;
  v716 = 0.0;
  v300 = 0.0;
  v299 = 0.0;
  v304 = a1;
  v55 = __p;
  v709 = _Q6;
  v712 = 0;
  *(__n128 *)__pa = v53;
  if (v743)
    goto LABEL_176;
LABEL_177:
  if (v55)
  {
    operator delete(v55);
    v53 = *(__n128 *)__pa;
    _Q6 = v709;
    v301.n128_u64[0] = v712;
  }
  v305 = a6;
  if (v745)
  {
    v746 = v745;
    operator delete(v745);
    v53 = *(__n128 *)__pa;
    _Q6 = v709;
    v301.n128_u64[0] = v712;
  }
  if ((v303 & 1) == 0)
  {
    sub_20EB59580(&v745);
    if (**((int **)v745 + 7) > 2)
      goto LABEL_568;
    v342 = *((unsigned __int8 *)v745 + 72);
    v343 = sub_20E8C31DC((uint64_t)v745, "OSLogSurrogateAppender", 1, 0);
    v344 = v343;
    if (!v342 && !v343)
      goto LABEL_568;
    *(_QWORD *)&v748 = &v745;
    *((std::chrono::steady_clock::time_point *)&v748 + 1) = std::chrono::steady_clock::now();
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v750 = 2;
    v751 = "unknown file";
    v752 = 71;
    v755 = 0;
    v753 = "unknown function";
    v754 = 0;
    v345 = *(_QWORD *)v748;
    if (*(char *)(*(_QWORD *)v748 + 39) < 0)
    {
      v347 = *(const char **)(v345 + 16);
      v346 = *(_QWORD *)(v345 + 24);
    }
    else
    {
      v346 = *(unsigned __int8 *)(*(_QWORD *)v748 + 39);
      v347 = (const char *)(*(_QWORD *)v748 + 16);
    }
    v739 = *(_QWORD *)v748 + 16;
    v552 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v552 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
      if (LOBYTE(object[3]) && SHIBYTE(object[2]) < 0)
        operator delete(object[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v553 = byte_254A4A4F8;
    else
      v553 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v554 = byte_254A4A4F8[23];
    else
      v554 = *(_QWORD *)&byte_254A4A4F8[8];
    object[0] = os_log_create(v553, v347);
    v555 = &object[1];
    if (v554 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v554 >= 0x17)
    {
      v556 = v344;
      v557 = v347;
      v558 = v345;
      v559 = v342;
      v560 = (v554 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v554 | 7) != 0x17)
        v560 = v554 | 7;
      v561 = v560 + 1;
      v555 = (void **)operator new(v560 + 1);
      object[3] = (void *)(v561 | 0x8000000000000000);
      object[1] = v555;
      object[2] = (void *)v554;
      v342 = v559;
      v345 = v558;
      v347 = v557;
      v344 = v556;
    }
    else
    {
      HIBYTE(object[3]) = v554;
      if (!v554)
      {
LABEL_417:
        *((_BYTE *)v555 + v554) = 0;
        LOBYTE(object[4]) = 1;
        v562 = &object[5];
        if (v346 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v346 >= 0x17)
        {
          v563 = (v346 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v346 | 7) != 0x17)
            v563 = v346 | 7;
          v564 = v563 + 1;
          v562 = (void **)operator new(v563 + 1);
          *((_QWORD *)&v757 + 1) = v564 | 0x8000000000000000;
          object[5] = v562;
          *(_QWORD *)&v757 = v346;
        }
        else
        {
          HIBYTE(v757) = v346;
          if (!v346)
          {
LABEL_425:
            *((_BYTE *)v562 + v346) = 0;
            LOBYTE(v758.f64[0]) = 1;
            v565 = object[0];
            if (SHIBYTE(v757) < 0)
              operator delete(object[5]);
            if (LOBYTE(object[4]) && SHIBYTE(object[3]) < 0)
              operator delete(object[1]);
            if (object[0])
              os_release(object[0]);
            if (v344 && *(_QWORD *)(v344 + 24))
            {
              v566 = _os_log_pack_size();
              v567 = (std::__shared_weak_count_vtbl *)operator new(v566, (std::align_val_t)8uLL);
              v568 = (std::__shared_weak_count *)operator new();
              v569 = v568;
              v568->__shared_owners_ = 0;
              v570 = (unint64_t *)&v568->__shared_owners_;
              v568->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v568->__shared_weak_owners_ = 0;
              v568[1].__vftable = v567;
              object[0] = v567;
              object[1] = v567;
              object[2] = v568;
              do
                v571 = __ldxr(v570);
              while (__stxr(v571 + 1, v570));
              memset(&object[3], 0, 24);
              do
                v572 = __ldaxr(v570);
              while (__stlxr(v572 - 1, v570));
              if (!v572)
              {
                ((void (*)(std::__shared_weak_count *))v568->__on_zero_shared)(v568);
                std::__shared_weak_count::__release_weak(v569);
              }
              v573 = object[0];
              *(_WORD *)_os_log_pack_fill() = 0;
              v574 = operator new();
              v575 = *(unsigned __int8 *)(v345 + 39);
              v576 = v739;
              if ((v575 & 0x80u) != 0)
              {
                v576 = *(_QWORD *)(v345 + 16);
                v575 = *(_QWORD *)(v345 + 24);
              }
              *(_QWORD *)v574 = v573;
              *(_OWORD *)(v574 + 8) = *(_OWORD *)&object[1];
              object[1] = 0;
              object[2] = 0;
              *(_OWORD *)(v574 + 24) = *(_OWORD *)&object[3];
              object[3] = 0;
              object[4] = 0;
              *(_QWORD *)(v574 + 40) = v576;
              *(_QWORD *)(v574 + 48) = v575;
              *(_BYTE *)(v574 + 56) = 2;
              category.f64[0] = 0.0;
              *(_QWORD *)&v772 = v574;
              (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v344 + 24) + 40))(*(_QWORD *)(v344 + 24), &v772);
              v577 = v772;
              *(_QWORD *)&v772 = 0;
              if (v577)
              {
                v578 = *(std::__shared_weak_count **)(v577 + 32);
                if (v578)
                {
                  v579 = (unint64_t *)&v578->__shared_owners_;
                  do
                    v580 = __ldaxr(v579);
                  while (__stlxr(v580 - 1, v579));
                  if (!v580)
                  {
                    ((void (*)(std::__shared_weak_count *))v578->__on_zero_shared)(v578);
                    std::__shared_weak_count::__release_weak(v578);
                  }
                }
                v581 = *(std::__shared_weak_count **)(v577 + 16);
                if (v581)
                {
                  v582 = (unint64_t *)&v581->__shared_owners_;
                  do
                    v583 = __ldaxr(v582);
                  while (__stlxr(v583 - 1, v582));
                  if (!v583)
                  {
                    ((void (*)(std::__shared_weak_count *))v581->__on_zero_shared)(v581);
                    std::__shared_weak_count::__release_weak(v581);
                  }
                }
                MEMORY[0x212BC6398](v577, 0x10F0C40B62ED6C6);
                v584 = category.f64[0];
                category.f64[0] = 0.0;
                if (v584 != 0.0)
                {
                  v585 = *(std::__shared_weak_count **)(*(_QWORD *)&v584 + 32);
                  if (v585)
                  {
                    v586 = (unint64_t *)&v585->__shared_owners_;
                    do
                      v587 = __ldaxr(v586);
                    while (__stlxr(v587 - 1, v586));
                    if (!v587)
                    {
                      ((void (*)(std::__shared_weak_count *))v585->__on_zero_shared)(v585);
                      std::__shared_weak_count::__release_weak(v585);
                    }
                  }
                  v588 = *(std::__shared_weak_count **)(*(_QWORD *)&v584 + 16);
                  if (v588)
                  {
                    v589 = (unint64_t *)&v588->__shared_owners_;
                    do
                      v590 = __ldaxr(v589);
                    while (__stlxr(v590 - 1, v589));
                    if (!v590)
                    {
                      ((void (*)(std::__shared_weak_count *))v588->__on_zero_shared)(v588);
                      std::__shared_weak_count::__release_weak(v588);
                    }
                  }
                  MEMORY[0x212BC6398](*(_QWORD *)&v584, 0x10F0C40B62ED6C6);
                }
              }
              v591 = (std::__shared_weak_count *)object[4];
              if (object[4])
              {
                v592 = (unint64_t *)((char *)object[4] + 8);
                do
                  v593 = __ldaxr(v592);
                while (__stlxr(v593 - 1, v592));
                if (!v593)
                {
                  ((void (*)(std::__shared_weak_count *))v591->__on_zero_shared)(v591);
                  std::__shared_weak_count::__release_weak(v591);
                }
              }
              v594 = (std::__shared_weak_count *)object[2];
              if (object[2])
              {
                v595 = (unint64_t *)((char *)object[2] + 8);
                do
                  v596 = __ldaxr(v595);
                while (__stlxr(v596 - 1, v595));
                if (!v596)
                {
                  ((void (*)(std::__shared_weak_count *))v594->__on_zero_shared)(v594);
                  std::__shared_weak_count::__release_weak(v594);
                }
              }
            }
            else
            {
              os_log_type_enabled(v565, OS_LOG_TYPE_DEBUG);
              LOWORD(object[0]) = 0;
              v597 = (void *)_os_log_send_and_compose_impl();
              if (v597)
                free(v597);
            }
            if (v342)
            {
              sub_20E8C003C((uint64_t)&v748, "PreemptiveRansac failed");
              sub_20E863570((uint64_t)&v748);
            }
            sub_20E863570((uint64_t)&v748);
            v598 = v755;
            if (v755)
            {
              v599 = (unint64_t *)&v755->__shared_owners_;
              do
                v600 = __ldaxr(v599);
              while (__stlxr(v600 - 1, v599));
LABEL_566:
              if (!v600)
              {
                ((void (*)(std::__shared_weak_count *))v598->__on_zero_shared)(v598);
                std::__shared_weak_count::__release_weak(v598);
              }
            }
LABEL_568:
            v399 = 0;
            v648 = (char *)v740;
            if (!v740)
              return v399;
LABEL_569:
            v741 = v648;
            operator delete(v648);
            return v399;
          }
        }
        memmove(v562, v347, v346);
        goto LABEL_425;
      }
    }
    memmove(v555, v553, v554);
    goto LABEL_417;
  }
  v306 = *(double *)(v304 + 24);
  v307 = (char *)v740;
  v308 = v741;
  v309 = *a6;
  a6[1] = *a6;
  if (v307 != v308)
  {
    v310 = 0;
    v311 = v306 + v306;
    *(_QWORD *)&v312.f64[0] = _Q6.n128_u64[0];
    *(_QWORD *)&v312.f64[1] = v53.n128_u64[0];
    v705 = v312;
    while (1)
    {
      v314 = vmulq_f64(v312, *(float64x2_t *)(v307 + 24));
      if (v302 + v301.n128_f64[0] * *((double *)v307 + 2) + v314.f64[0] + v314.f64[1] <= 0.0)
        goto LABEL_186;
      v315 = *((double *)v307 + 4);
      _Q2 = *((float64x2_t *)v307 + 1);
      __asm { FMLA            D0, D6, V2.D[1] }
      v320 = v302 + _D0 + v53.n128_f64[0] * v315;
      if (v320 < 0.00000001)
        goto LABEL_186;
      _Q2.f64[1] = *(double *)vextq_s8((int8x16_t)_Q2, (int8x16_t)_Q2, 8uLL).i64;
      v51.f64[0] = v300 + vmulq_f64(v736, _Q2).f64[0] + v731 * _Q2.f64[1] + v725 * v315;
      v50.f64[0] = *((float64_t *)v307 + 1);
      v321 = v320 * *(double *)v307 - (v299 + vmulq_f64(v722, _Q2).f64[0] + v719 * _Q2.f64[1] + v716 * v315);
      _Q2.f64[0] = (v320 * v50.f64[0] - v51.f64[0]) * (v320 * v50.f64[0] - v51.f64[0]);
      if (v321 * v321 + _Q2.f64[0] >= v311 * v320 * (v311 * v320))
        goto LABEL_186;
      v322 = (unint64_t)v305[2];
      if ((unint64_t)v309 < v322)
      {
        *(_DWORD *)v309 = v310;
        v313 = (uint64_t)(v309 + 4);
      }
      else
      {
        v323 = *v305;
        v324 = v309 - *v305;
        v325 = v324 >> 2;
        v326 = (v324 >> 2) + 1;
        if (v326 >> 62)
          sub_20E867F44();
        v327 = v322 - (_QWORD)v323;
        if (v327 >> 1 > v326)
          v326 = v327 >> 1;
        if ((unint64_t)v327 >= 0x7FFFFFFFFFFFFFFCLL)
          v328 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v328 = v326;
        if (v328)
        {
          if (v328 >> 62)
            sub_20E877A38();
          v329 = operator new(4 * v328);
          _Q6 = v709;
          v301.n128_u64[0] = v712;
          v312 = v705;
          v53 = *(__n128 *)__pa;
          v330 = &v329[4 * v325];
          *(_DWORD *)v330 = v310;
          v313 = (uint64_t)(v330 + 4);
          v331 = v309 - v323;
          if (v309 != v323)
          {
LABEL_200:
            v332 = v331 - 4;
            if (v332 < 0xBC
              || (v335 = (v309 - 4 - v323) & 0xFFFFFFFFFFFFFFFCLL, &v329[v324 - 4 - v335] > &v329[v324 - 4])
              || &v309[-v335 - 4] > v309 - 4
              || (unint64_t)(v309 - v329 - v324) < 0x20)
            {
              v333 = v309;
              v305 = a6;
              v304 = a1;
            }
            else
            {
              v336 = (v332 >> 2) + 1;
              v337 = 4 * (v336 & 0x7FFFFFFFFFFFFFF8);
              v333 = &v309[-v337];
              v330 -= v337;
              v338 = &v329[4 * v325 - 16];
              v339 = v309 - 16;
              v340 = v336 & 0x7FFFFFFFFFFFFFF8;
              v304 = a1;
              do
              {
                v341 = *(_OWORD *)v339;
                *(v338 - 1) = *((_OWORD *)v339 - 1);
                *v338 = v341;
                v338 -= 2;
                v339 -= 32;
                v340 -= 8;
              }
              while (v340);
              v305 = a6;
              if (v336 == (v336 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_203:
                *v305 = v330;
                v305[1] = (char *)v313;
                v305[2] = &v329[4 * v328];
                if (!v323)
                  goto LABEL_185;
LABEL_207:
                operator delete(v323);
                v312 = v705;
                v53 = *(__n128 *)__pa;
                _Q6 = v709;
                v301.n128_u64[0] = v712;
                goto LABEL_185;
              }
            }
            do
            {
              v334 = *((_DWORD *)v333 - 1);
              v333 -= 4;
              *((_DWORD *)v330 - 1) = v334;
              v330 -= 4;
            }
            while (v333 != v323);
            goto LABEL_203;
          }
        }
        else
        {
          v329 = 0;
          v330 = (char *)(4 * v325);
          *(_DWORD *)(4 * v325) = v310;
          v313 = 4 * v325 + 4;
          v331 = v309 - v323;
          if (v309 != v323)
            goto LABEL_200;
        }
        v305 = a6;
        v304 = a1;
        *a6 = v330;
        a6[1] = (char *)v313;
        a6[2] = &v329[4 * v328];
        if (v323)
          goto LABEL_207;
      }
LABEL_185:
      v305[1] = (char *)v313;
      v309 = (char *)v313;
LABEL_186:
      ++v310;
      v307 += 40;
      if (v307 == v308)
      {
        v348 = *v305;
        goto LABEL_375;
      }
    }
  }
  v348 = v309;
LABEL_375:
  v527 = (v309 - v348) >> 2;
  v528 = *(unint64_t **)(v304 + 32);
  v529 = *(_QWORD *)(v304 + 40) - (_QWORD)v528;
  v530 = v670;
  if ((v529 & 0x7FFFFFFF8) == 0)
  {
LABEL_381:
    sub_20EB59580(&v745);
    if (**((int **)v745 + 7) > 2)
      goto LABEL_568;
    v536 = *((unsigned __int8 *)v745 + 72);
    v537 = sub_20E8C31DC((uint64_t)v745, "OSLogSurrogateAppender", 1, 0);
    v538 = v537;
    if (!v536 && v537 == 0)
      goto LABEL_568;
    v738 = v536;
    *(_QWORD *)&v748 = &v745;
    *((std::chrono::steady_clock::time_point *)&v748 + 1) = std::chrono::steady_clock::now();
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v750 = 2;
    v751 = "unknown file";
    v752 = 89;
    v755 = 0;
    v753 = "unknown function";
    v754 = 0;
    if (v654 >= 0x10)
      v540 = (double)v670;
    else
      v540 = 1.0;
    v541 = *(_QWORD *)v748;
    v732 = *(_QWORD *)v748;
    if (*(char *)(*(_QWORD *)v748 + 39) < 0)
    {
      v543 = *(const char **)(v541 + 16);
      v542 = *(_QWORD *)(v541 + 24);
    }
    else
    {
      v542 = *(unsigned __int8 *)(*(_QWORD *)v748 + 39);
      v543 = (const char *)(*(_QWORD *)v748 + 16);
    }
    v726 = *(_QWORD *)v748 + 16;
    v601 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v601 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
      if (LOBYTE(object[3]) && SHIBYTE(object[2]) < 0)
        operator delete(object[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v602 = byte_254A4A4F8;
    else
      v602 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v603 = byte_254A4A4F8[23];
    else
      v603 = *(_QWORD *)&byte_254A4A4F8[8];
    object[0] = os_log_create(v602, v543);
    v604 = &object[1];
    if (v603 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v603 >= 0x17)
    {
      v605 = (v603 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v603 | 7) != 0x17)
        v605 = v603 | 7;
      v606 = v605 + 1;
      v604 = (void **)operator new(v605 + 1);
      object[3] = (void *)(v606 | 0x8000000000000000);
      object[1] = v604;
      object[2] = (void *)v603;
      v530 = v670;
    }
    else
    {
      HIBYTE(object[3]) = v603;
      if (!v603)
      {
LABEL_499:
        *((_BYTE *)v604 + v603) = 0;
        LOBYTE(object[4]) = 1;
        v607 = &object[5];
        if (v542 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v542 >= 0x17)
        {
          v608 = (v542 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v542 | 7) != 0x17)
            v608 = v542 | 7;
          v609 = v608 + 1;
          v607 = (void **)operator new(v608 + 1);
          *((_QWORD *)&v757 + 1) = v609 | 0x8000000000000000;
          object[5] = v607;
          *(_QWORD *)&v757 = v542;
        }
        else
        {
          HIBYTE(v757) = v542;
          if (!v542)
          {
LABEL_507:
            *((_BYTE *)v607 + v542) = 0;
            LOBYTE(v758.f64[0]) = 1;
            v610 = object[0];
            if (SHIBYTE(v757) < 0)
              operator delete(object[5]);
            if (LOBYTE(object[4]) && SHIBYTE(object[3]) < 0)
              operator delete(object[1]);
            if (object[0])
              os_release(object[0]);
            v611 = (double)v527 / v540;
            if (v538 && *(_QWORD *)(v538 + 24))
            {
              v612 = _os_log_pack_size();
              v613 = (std::__shared_weak_count_vtbl *)operator new(v612, (std::align_val_t)8uLL);
              v614 = (std::__shared_weak_count *)operator new();
              v615 = v614;
              v614->__shared_owners_ = 0;
              v616 = (unint64_t *)&v614->__shared_owners_;
              v614->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v614->__shared_weak_owners_ = 0;
              v614[1].__vftable = v613;
              object[0] = v613;
              object[1] = v613;
              object[2] = v614;
              do
                v617 = __ldxr(v616);
              while (__stxr(v617 + 1, v616));
              memset(&object[3], 0, 24);
              do
                v618 = __ldaxr(v616);
              while (__stlxr(v618 - 1, v616));
              if (!v618)
              {
                ((void (*)(std::__shared_weak_count *))v614->__on_zero_shared)(v614);
                std::__shared_weak_count::__release_weak(v615);
              }
              v619 = object[0];
              v620 = _os_log_pack_fill();
              *(_DWORD *)v620 = 134218240;
              *(_QWORD *)(v620 + 4) = v527;
              *(_WORD *)(v620 + 12) = 2048;
              *(double *)(v620 + 14) = v611;
              v621 = operator new();
              v622 = *(unsigned __int8 *)(v732 + 39);
              v623 = v726;
              if ((v622 & 0x80u) != 0)
              {
                v623 = *(_QWORD *)(v732 + 16);
                v622 = *(_QWORD *)(v732 + 24);
              }
              *(_QWORD *)v621 = v619;
              *(_OWORD *)(v621 + 8) = *(_OWORD *)&object[1];
              object[1] = 0;
              object[2] = 0;
              *(_OWORD *)(v621 + 24) = *(_OWORD *)&object[3];
              object[3] = 0;
              object[4] = 0;
              *(_QWORD *)(v621 + 40) = v623;
              *(_QWORD *)(v621 + 48) = v622;
              *(_BYTE *)(v621 + 56) = 2;
              category.f64[0] = 0.0;
              *(_QWORD *)&v772 = v621;
              (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v538 + 24) + 40))(*(_QWORD *)(v538 + 24), &v772);
              v624 = v772;
              *(_QWORD *)&v772 = 0;
              if (v624)
              {
                v625 = *(std::__shared_weak_count **)(v624 + 32);
                if (v625)
                {
                  v626 = (unint64_t *)&v625->__shared_owners_;
                  do
                    v627 = __ldaxr(v626);
                  while (__stlxr(v627 - 1, v626));
                  if (!v627)
                  {
                    ((void (*)(std::__shared_weak_count *))v625->__on_zero_shared)(v625);
                    std::__shared_weak_count::__release_weak(v625);
                  }
                }
                v628 = *(std::__shared_weak_count **)(v624 + 16);
                if (v628)
                {
                  v629 = (unint64_t *)&v628->__shared_owners_;
                  do
                    v630 = __ldaxr(v629);
                  while (__stlxr(v630 - 1, v629));
                  if (!v630)
                  {
                    ((void (*)(std::__shared_weak_count *))v628->__on_zero_shared)(v628);
                    std::__shared_weak_count::__release_weak(v628);
                  }
                }
                MEMORY[0x212BC6398](v624, 0x10F0C40B62ED6C6);
                v631 = category.f64[0];
                category.f64[0] = 0.0;
                if (v631 != 0.0)
                {
                  v632 = *(std::__shared_weak_count **)(*(_QWORD *)&v631 + 32);
                  if (v632)
                  {
                    v633 = (unint64_t *)&v632->__shared_owners_;
                    do
                      v634 = __ldaxr(v633);
                    while (__stlxr(v634 - 1, v633));
                    if (!v634)
                    {
                      ((void (*)(std::__shared_weak_count *))v632->__on_zero_shared)(v632);
                      std::__shared_weak_count::__release_weak(v632);
                    }
                  }
                  v635 = *(std::__shared_weak_count **)(*(_QWORD *)&v631 + 16);
                  if (v635)
                  {
                    v636 = (unint64_t *)&v635->__shared_owners_;
                    do
                      v637 = __ldaxr(v636);
                    while (__stlxr(v637 - 1, v636));
                    if (!v637)
                    {
                      ((void (*)(std::__shared_weak_count *))v635->__on_zero_shared)(v635);
                      std::__shared_weak_count::__release_weak(v635);
                    }
                  }
                  MEMORY[0x212BC6398](*(_QWORD *)&v631, 0x10F0C40B62ED6C6);
                }
              }
              v638 = (std::__shared_weak_count *)object[4];
              v639 = v738;
              if (object[4])
              {
                v640 = (unint64_t *)((char *)object[4] + 8);
                do
                  v641 = __ldaxr(v640);
                while (__stlxr(v641 - 1, v640));
                if (!v641)
                {
                  ((void (*)(std::__shared_weak_count *))v638->__on_zero_shared)(v638);
                  std::__shared_weak_count::__release_weak(v638);
                }
              }
              v642 = (std::__shared_weak_count *)object[2];
              if (object[2])
              {
                v643 = (unint64_t *)((char *)object[2] + 8);
                do
                  v644 = __ldaxr(v643);
                while (__stlxr(v644 - 1, v643));
                if (!v644)
                {
                  ((void (*)(std::__shared_weak_count *))v642->__on_zero_shared)(v642);
                  std::__shared_weak_count::__release_weak(v642);
                }
              }
            }
            else
            {
              os_log_type_enabled(v610, OS_LOG_TYPE_DEBUG);
              LODWORD(object[0]) = 134218240;
              *(void **)((char *)object + 4) = (void *)v527;
              WORD2(object[1]) = 2048;
              *(void **)((char *)&object[1] + 6) = *(void **)&v611;
              v645 = (void *)_os_log_send_and_compose_impl();
              v639 = v738;
              if (v645)
                free(v645);
            }
            if (v639)
            {
              v646 = 1.0;
              if (v530)
                v646 = (double)v670;
              sub_20E8C003C((uint64_t)&v748, "Not enough inliers available (inlier: %lu, ratio: %f)", v527, (double)v527 / v646);
              sub_20E863570((uint64_t)&v748);
            }
            sub_20E863570((uint64_t)&v748);
            v598 = v755;
            if (v755)
            {
              v647 = (unint64_t *)&v755->__shared_owners_;
              do
                v600 = __ldaxr(v647);
              while (__stlxr(v600 - 1, v647));
              goto LABEL_566;
            }
            goto LABEL_568;
          }
        }
        memmove(v607, v543, v542);
        goto LABEL_507;
      }
    }
    memmove(v604, v602, v603);
    goto LABEL_499;
  }
  v531 = *(double **)(v304 + 56);
  v532 = (v529 >> 3);
  while (1)
  {
    v533 = (unint64_t)(*v531 * (double)v670);
    v535 = *v528++;
    v534 = v535;
    if (v535 > v533)
      v533 = v534;
    if (v527 >= v533)
      break;
    ++v531;
    if (!--v532)
      goto LABEL_381;
  }
  *(float64_t *)&v544 = v722.f64[0];
  *((double *)&v544 + 1) = v719;
  *(_OWORD *)v671 = v544;
  *(double *)(v671 + 16) = v716;
  *(double *)(v671 + 24) = v299;
  *(float64_t *)&v544 = v736.f64[0];
  *((double *)&v544 + 1) = v731;
  *(_OWORD *)(v671 + 32) = v544;
  *(double *)(v671 + 48) = v725;
  *(double *)(v671 + 56) = v300;
  v301.n128_u64[1] = _Q6.n128_u64[0];
  *(__n128 *)(v671 + 64) = v301;
  *(_QWORD *)(v671 + 80) = v53.n128_u64[0];
  *(double *)(v671 + 88) = v302;
  if (*(_BYTE *)(v304 + 80))
  {
    if ((sub_20EB5989C(v304, &v740, v305, (_QWORD *)v671, v725, v731, _Q2.f64[0], v50.f64[0], v51.f64[0], v301, _Q6, v53) & 1) == 0)
    {
      sub_20EB59580(&v745);
      if (**((int **)v745 + 7) <= 2)
      {
        v545 = *((unsigned __int8 *)v745 + 72);
        v546 = sub_20E8C31DC((uint64_t)v745, "OSLogSurrogateAppender", 1, 0);
        v547 = v546 ? v546 + 16 : 0;
        if (v545 || v546)
        {
          *(_QWORD *)&v748 = &v745;
          *((std::chrono::steady_clock::time_point *)&v748 + 1) = std::chrono::steady_clock::now();
          rep = std::chrono::system_clock::now().__d_.__rep_;
          v750 = 2;
          v751 = "unknown file";
          v752 = 103;
          v755 = 0;
          v753 = "unknown function";
          v754 = 0;
          v548 = *(_QWORD *)v748;
          v549 = (uint64_t *)(*(_QWORD *)v748 + 16);
          if (*(char *)(*(_QWORD *)v748 + 39) < 0)
          {
            v551 = *(_QWORD *)(v548 + 16);
            v550 = *(double *)(v548 + 24);
          }
          else
          {
            *(_QWORD *)&v550 = *(unsigned __int8 *)(*(_QWORD *)v748 + 39);
            v551 = *(_QWORD *)v748 + 16;
          }
          *(_QWORD *)&category.f64[0] = v551;
          category.f64[1] = v550;
          v650 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v650 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)object);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
            if (LOBYTE(object[3]) && SHIBYTE(object[2]) < 0)
              operator delete(object[0]);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
          v651 = byte_254A4A4F8[23];
          if (byte_254A4A4F8[23] >= 0)
          {
            v652 = byte_254A4A4F8;
          }
          else
          {
            v651 = *(_QWORD *)&byte_254A4A4F8[8];
            v652 = *(const char **)byte_254A4A4F8;
          }
          *(_QWORD *)&v772 = v652;
          *((_QWORD *)&v772 + 1) = v651;
          object[0] = os_log_create(v652, *(const char **)&category.f64[0]);
          sub_20E86E5A8(&object[1], (uint64_t)&v772);
          sub_20E86E5A8(&object[5], (uint64_t)&category);
          v653 = object[0];
          sub_20E86E44C((uint64_t)object);
          sub_20EB62F1C(v547, v549, v653, OS_LOG_TYPE_DEBUG);
          if (v545)
          {
            sub_20E8C003C((uint64_t)&v748, "4-DoF Pose refinement failed. Estimated pose will be used as-is");
            sub_20E863570((uint64_t)&v748);
          }
          sub_20E863714((uint64_t)&v748);
        }
      }
    }
  }
  v399 = 1;
  v648 = (char *)v740;
  if (v740)
    goto LABEL_569;
  return v399;
}

void sub_20EB591F0(_Unwind_Exception *a1)
{
  void *v2;

  if (LOBYTE(STACK[0x338]) && SLOBYTE(STACK[0x337]) < 0)
    operator delete((void *)STACK[0x320]);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0x2D0]);
  v2 = (void *)STACK[0x288];
  if (!STACK[0x288])
    _Unwind_Resume(a1);
  STACK[0x290] = (unint64_t)v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_20EB59560(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;

  if (__p)
  {
    operator delete(__p);
    if (!STACK[0x2B8])
      JUMPOUT(0x20EB59524);
    JUMPOUT(0x20EB5951CLL);
  }
  JUMPOUT(0x20EB59514);
}

void sub_20EB59580(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5B290);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5B290))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.geometry");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A5B288);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A5B290);
  }
  *a1 = qword_254A5B288;
}

void sub_20EB5961C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5B290);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5B290);
  _Unwind_Resume(a1);
}

void sub_20EB59674(uint64_t a1, _QWORD *a2, unint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  char *v28;
  _QWORD *v29;

  v6 = *(_QWORD **)a1;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v6) >> 3) < a3)
  {
    if (a3 > 0x666666666666666)
      goto LABEL_28;
    v7 = 5 * a3;
    v8 = operator new(40 * a3);
    *(_QWORD *)a1 = v8;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = &v8[v7];
    if (v6)
    {
      operator delete(v6);
      v6 = *(_QWORD **)(a1 + 8);
    }
    else
    {
      v6 = v8;
    }
LABEL_8:
    v9 = 0;
    while (1)
    {
      while (1)
      {
        v10 = (uint64_t *)(*a2 + 16 * v9);
        v12 = *v10;
        v11 = v10[1];
        v13 = (uint64_t *)(a2[1] + 24 * v9);
        v15 = *v13;
        v14 = v13[1];
        v16 = v13[2];
        v17 = *(_QWORD *)(a1 + 16);
        if ((unint64_t)v6 >= v17)
          break;
        *v6 = v12;
        v6[1] = v11;
        v6[2] = v15;
        v6[3] = v14;
        v6[4] = v16;
        *(_QWORD *)(a1 + 8) = v6 + 5;
        ++v9;
        v6 += 5;
        if (v9 == a3)
          return;
      }
      v18 = *(_QWORD **)a1;
      v19 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v6 - *(_QWORD *)a1) >> 3);
      v20 = v19 + 1;
      if (v19 + 1 > 0x666666666666666)
        break;
      v21 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - (_QWORD)v18) >> 3);
      if (2 * v21 > v20)
        v20 = 2 * v21;
      if (v21 >= 0x333333333333333)
        v22 = 0x666666666666666;
      else
        v22 = v20;
      if (v22)
      {
        if (v22 > 0x666666666666666)
          sub_20E877A38();
        v23 = (char *)operator new(40 * v22);
      }
      else
      {
        v23 = 0;
      }
      v24 = &v23[40 * v19];
      *(_QWORD *)v24 = v12;
      *((_QWORD *)v24 + 1) = v11;
      *((_QWORD *)v24 + 2) = v15;
      *((_QWORD *)v24 + 3) = v14;
      *((_QWORD *)v24 + 4) = v16;
      v25 = v24;
      if (v6 != v18)
      {
        do
        {
          v26 = *(_OWORD *)(v6 - 5);
          v27 = *(_OWORD *)(v6 - 3);
          *((_QWORD *)v25 - 1) = *(v6 - 1);
          *(_OWORD *)(v25 - 24) = v27;
          *(_OWORD *)(v25 - 40) = v26;
          v25 -= 40;
          v6 -= 5;
        }
        while (v6 != v18);
        v6 = *(_QWORD **)a1;
      }
      v28 = &v23[40 * v22];
      v29 = v24 + 40;
      *(_QWORD *)a1 = v25;
      *(_QWORD *)(a1 + 8) = v24 + 40;
      *(_QWORD *)(a1 + 16) = v28;
      if (v6)
        operator delete(v6);
      *(_QWORD *)(a1 + 8) = v29;
      ++v9;
      v6 = v29;
      if (v9 == a3)
        return;
    }
LABEL_28:
    sub_20E867F44();
  }
  if (a3)
    goto LABEL_8;
}

uint64_t sub_20EB5989C(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, double a5, double a6, double a7, double a8, double a9, __n128 a10, __n128 a11, __n128 a12)
{
  uint64_t v12;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  int8x16_t v19;
  float64x2_t v25;
  float64x2_t v27;
  double v30;
  _QWORD *v31;
  double v32;
  double v33;
  __double2 v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _OWORD *v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  _QWORD *v50;
  _OWORD *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  __int128 v57;
  __int128 v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  unint64_t v62;
  char *v63;
  _OWORD *v64;
  float64x2_t v65;
  int8x16_t v66;
  double v67;
  float64x2_t v68;
  float64x2_t v69;
  double v70;
  double v71;
  double cosval;
  double v73;
  __double2 v74;
  float64x2_t v75;
  double v76;
  float64_t v77;
  unint64_t v78;
  float64_t v79;
  float64_t v80;
  float64_t v81;
  double v82;
  float64_t v83;
  float64_t v84;
  float64_t v85;
  float64_t v86;
  float64_t v87;
  float64_t v88;
  float64_t v89;
  unint64_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  unsigned int v101;
  double v102;
  unint64_t v103;
  float64x2_t *v104;
  void *v105;
  float64x2_t v107;
  float64x2_t v108;
  double v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v120;
  float64x2_t v122;
  float64x2_t v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  float64x2_t v130;
  float64x2_t v131;
  double v132;
  double v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  double v143;
  double v144;
  double v145;
  float v146;
  void *v147;
  float64x2_t v148;
  double v149;
  float64x2_t v150;
  double v151;
  double v152;
  double v153;
  double v154;
  double v155;
  double v156;
  double v157;
  double v158;
  __double2 v159;
  double v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  double v167;
  double v168;
  float64x2_t v169;
  float64x2_t v170;
  double v171;
  float64x2_t v172;
  double v173;
  float64x2_t v174;
  double v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  float64x2_t v179;
  float64x2_t v180;
  double v184;
  double v185;
  double v186;
  __double2 v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  double v207;
  double v208;
  double v209;
  __double2 v210;
  float64_t v211;
  double v212;
  unint64_t v213;
  double v214;
  float64_t v215;
  float64_t v216;
  float64_t v217;
  double v218;
  float64_t v219;
  double v220;
  float64_t v221;
  double v222;
  float64_t v223;
  float64_t v224;
  unint64_t v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v234;
  float64x2_t v235;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  double v246;
  std::locale::__imp *v247;
  float64x2_t v248;
  float64x2_t v249;
  float64x2_t v250;
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v253;
  float64x2_t *v254;
  void *v255;
  unint64_t v257;
  double v258;
  float64x2_t v260;
  float64x2_t v262;
  double v263;
  double v266;
  double v267;
  double v268;
  const char *v269;
  _QWORD *v270;
  _QWORD *v271;
  _QWORD *v272;
  _QWORD *v273;
  _QWORD *v279;
  _QWORD *v280;
  const std::locale::facet *v281;
  float64x2_t v287;
  float64x2_t v288;
  double v289;
  double v290;
  double v291;
  double v292;
  float v293;
  double v294;
  __double2 v295;
  float64x2_t v296;
  double v297;
  float64_t v298;
  unint64_t v299;
  float64_t v300;
  float64_t v301;
  float64_t v302;
  double v303;
  float64_t v304;
  float64_t v305;
  float64_t v306;
  float64_t v307;
  float64_t v308;
  float64_t v309;
  float64_t v310;
  unint64_t v311;
  float64x2_t v312;
  float64x2_t v313;
  float64x2_t v314;
  float64x2_t v315;
  float64x2_t v316;
  float64x2_t v317;
  float64x2_t v318;
  float64x2_t v319;
  float64x2_t v320;
  float64x2_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  float64x2_t v325;
  float64x2_t v326;
  double v327;
  double v328;
  float64x2_t v329;
  float64x2_t v330;
  double v331;
  double v332;
  double v333;
  int v334;
  unint64_t v335;
  unint64_t v336;
  uint64_t v337;
  const char *v338;
  size_t v339;
  unsigned __int8 v340;
  double v341;
  __double2 v342;
  double v343;
  float64_t v344;
  double v345;
  float64_t v346;
  double v347;
  double v348;
  double v349;
  float64_t v350;
  double v351;
  float64_t v352;
  double v353;
  float64_t v354;
  double v355;
  double v356;
  float64x2_t v357;
  float64x2_t v358;
  float64x2_t v359;
  float64x2_t v360;
  __int128 v361;
  float64x2_t v362;
  float64x2_t v363;
  float64x2_t v364;
  float64x2_t v365;
  float64x2_t v366;
  float64x2_t v367;
  float64x2_t v368;
  float64x2_t v369;
  int64x2_t v370;
  int64x2_t v371;
  int64x2_t v372;
  __int128 v373;
  _OWORD *v374;
  unsigned __int8 v375;
  const char *v376;
  size_t v377;
  _BYTE *v378;
  uint64_t v379;
  uint64_t v380;
  _BYTE *v381;
  uint64_t v382;
  uint64_t v383;
  NSObject *v384;
  size_t v385;
  std::__shared_weak_count_vtbl *v386;
  std::__shared_weak_count *v387;
  std::__shared_weak_count *v388;
  unint64_t *p_shared_owners;
  unint64_t v390;
  unint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  const char *v396;
  float64_t v397;
  std::__shared_weak_count *v398;
  unint64_t *v399;
  unint64_t v400;
  std::__shared_weak_count *v401;
  unint64_t *v402;
  unint64_t v403;
  float64x2_t *v404;
  std::__shared_weak_count *v405;
  unint64_t *v406;
  unint64_t v407;
  std::__shared_weak_count *v408;
  unint64_t *v409;
  unint64_t v410;
  std::__shared_weak_count *v411;
  unint64_t *v412;
  unint64_t v413;
  std::__shared_weak_count *v414;
  unint64_t *v415;
  unint64_t v416;
  void *v417;
  std::__shared_weak_count *v418;
  unint64_t *v419;
  unint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  void *v428;
  _QWORD *v429;
  float v430;
  float v431;
  float64x2_t v432;
  double v433;
  float64x2_t v434;
  float64x2_t v435;
  float64x2_t v436;
  float64x2_t v437;
  int8x16_t v438;
  float64x2_t v439;
  float64x2_t v440;
  float64x2_t v441;
  float64x2_t v442;
  float64x2_t v443;
  float64x2_t v444;
  float64x2_t v445;
  float64x2_t v446;
  float64x2_t v447;
  float64x2_t v448;
  float64x2_t v449;
  float64x2_t v450;
  float64x2_t v451;
  float64x2_t v452;
  float64x2_t v453;
  double v454;
  std::locale::__imp *locale;
  float64_t v456;
  float64x2_t v457;
  unint64_t v458;
  double v459;
  float64x2_t v460;
  int8x16_t v461;
  double v462;
  float64_t v463;
  float64x2_t v464;
  float64_t v465;
  float64x2_t v466;
  float64x2_t v467;
  __int128 v468;
  float64x2_t v469;
  float64x2_t v471;
  const char *v472;
  std::locale v473[2];
  _OWORD v474[2];
  const char *v475;
  uint64_t v476;
  std::__shared_weak_count *v477;
  _BYTE v478[56];
  __int128 v479;
  __int128 v480;
  __int128 v481;
  float64x2_t v482;
  __int128 v483;
  _BYTE v484[32];
  uint64_t v485;
  __int128 v486;
  __int128 v487;
  uint64_t v488;
  __int16 v489;
  char v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  void **v494;
  unint64_t v495;
  __int128 v496;
  __int128 v497;
  __int128 v498;
  unint64_t v499;
  double *v500;
  void *v501;
  char *v502;
  char *v503;
  float64x2_t v504;
  void *v505;
  _OWORD *v506;
  _OWORD *v507;
  __int128 v508;
  double v509;
  double v510;
  double v511;
  void *v512;
  _BYTE *v513;
  char *v514;
  __int128 v515;
  _BYTE v516[32];
  uint64_t (**v517)();
  _OWORD v518[6];
  int8x16_t v519;
  __int128 v520;
  _BYTE v521[32];
  uint64_t v522;
  __int128 v523;
  __int128 v524;
  uint64_t v525;
  __int16 v526;
  char v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  float64x2_t v531;
  float64x2_t v532;
  double *v533[2];
  float64x2_t *v534[2];
  _BYTE object[136];
  _BYTE v536[32];
  uint64_t v537;
  __int128 v538;
  __int128 v539;
  uint64_t v540;
  __int16 v541;
  char v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;

  v546 = *MEMORY[0x24BDAC8D0];
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2[1] - *a2) >> 3) < 4)
    return 0;
  *(_QWORD *)&v16 = *a4;
  *(_QWORD *)&v17 = a4[1];
  *(_QWORD *)&v18 = a4[2];
  v19.i64[0] = a4[3];
  *((_QWORD *)&v16 + 1) = a4[4];
  *((_QWORD *)&v17 + 1) = a4[5];
  *((_QWORD *)&v18 + 1) = a4[6];
  v19.i64[1] = a4[7];
  __asm { FMOV            V4.2D, #1.0 }
  v468 = _Q4;
  *(_QWORD *)&_Q4 = a4[11];
  a10.n128_u64[0] = a4[8];
  a11.n128_u64[0] = a4[9];
  a12.n128_u64[0] = a4[10];
  v520 = _Q4;
  v519 = v19;
  v518[5] = a12;
  v518[4] = v18;
  v518[3] = a11;
  v518[2] = v17;
  v518[1] = a10;
  v518[0] = v16;
  v527 = 0;
  memset(v521, 0, sizeof(v521));
  v517 = &off_24C9C5008;
  v522 = 0;
  v523 = 0u;
  v524 = 0u;
  v525 = 0;
  v526 = 3;
  sub_20EB5C370((uint64_t)v521);
  v529 = 0;
  v528 = 0;
  v530 = 0;
  memset(v478, 0, 48);
  *(_QWORD *)object = v518;
  *(_QWORD *)&object[8] = 0;
  v473[0].__locale_ = (std::locale::__imp *)v478;
  v473[1].__locale_ = 0;
  sub_20E95B988((float64x2_t **)object, (double **)v473);
  v25.f64[0] = *(float64_t *)&v478[16];
  _Q17 = *(float64x2_t *)v478;
  v27 = (float64x2_t)vextq_s8((int8x16_t)_Q17, (int8x16_t)_Q17, 8uLL);
  _Q0 = vmulq_f64(_Q17, _Q17);
  _Q1.f64[0] = *(float64_t *)&v478[8];
  __asm { FMLA            D0, D1, V17.D[1] }
  v30 = _Q0.f64[0] + v25.f64[0] * v25.f64[0];
  v31 = a2;
  if (v30 >= 0.0000002635)
  {
    v33 = sqrt(v30);
    v457 = *(float64x2_t *)v478;
    v463 = *(double *)&v478[16];
    v452 = v27;
    v34 = __sincos_stret(v33);
    v27 = v452;
    _Q17 = v457;
    v25.f64[0] = v463;
    v32 = v34.__sinval / v33;
    _Q0.f64[0] = 1.0 / v30 * (1.0 - v34.__cosval);
    _Q1.f64[0] = 1.0 / v30 * (1.0 - v34.__sinval / v33);
  }
  else
  {
    _Q0.f64[0] = 0.5 - v30 * (v30 / -720.0 + 0.0416666667);
    _Q1.f64[0] = 0.166666667 - v30 * (v30 / -5040.0 + 0.00833333333);
    v32 = 1.0 - v30 * _Q1.f64[0];
  }
  v429 = a4;
  if (v30 >= 2.775e-15)
  {
    if (v30 <= 9.0)
      _Q0.f64[0] = (_Q0.f64[0] * 0.5 - _Q1.f64[0]) / v32;
    else
      _Q0.f64[0] = (_Q0.f64[0] + v32 * -0.5) / (v30 * _Q0.f64[0]);
  }
  else
  {
    _Q0.f64[0] = v30 * 0.0000330687831 + v30 * 0.00138888889 + 0.0833333333;
  }
  *(_QWORD *)&_Q1.f64[0] = v520;
  v35.f64[0] = v27.f64[0];
  v35.f64[1] = v25.f64[0];
  v36 = (float64x2_t)vextq_s8(v519, (int8x16_t)_Q1, 8uLL);
  v37 = vsubq_f64(vmulq_laneq_f64(_Q17, (float64x2_t)v519, 1), vmulq_f64(v27, (float64x2_t)v519));
  __asm { FMOV            V7.2D, #-0.5 }
  v39 = vaddq_f64(_Q1, vmulq_f64(v37, _Q7));
  *(_QWORD *)&_Q1.f64[1] = v519.i64[0];
  v25.f64[1] = _Q17.f64[0];
  v40 = vsubq_f64(vmulq_f64(v35, _Q1), vmulq_f64(v25, v36));
  v432 = _Q7;
  v41 = (float64x2_t)vextq_s8((int8x16_t)v40, (int8x16_t)v37, 8uLL);
  v37.f64[1] = v40.f64[0];
  *(_QWORD *)&v478[40] = *(_OWORD *)&vaddq_f64(v39, vmulq_f64(_Q0, vsubq_f64(vmulq_laneq_f64(_Q17, v40, 1), vmulq_f64(v27, v40))));
  *(float64x2_t *)&v478[24] = vaddq_f64(vaddq_f64((float64x2_t)v519, vmulq_f64(v40, _Q7)), vmulq_n_f64(vsubq_f64(vmulq_f64(v35, v37), vmulq_f64(v25, v41)), _Q0.f64[0]));
  v436 = *(float64x2_t *)&v478[32];
  v438 = *(int8x16_t *)v478;
  v439 = *(float64x2_t *)&v478[16];
  v42 = *(_QWORD *)(a1 + 96);
  DWORD1(v515) = *(_QWORD *)(a1 + 88);
  LODWORD(v515) = v42;
  v43 = *(_QWORD *)(a1 + 104);
  v516[0] = *(_QWORD *)(a1 + 112) != 0;
  *(_OWORD *)&v516[8] = *(_OWORD *)(a1 + 120);
  *(_QWORD *)&v516[24] = *(_QWORD *)(a1 + 136);
  *((double *)&v515 + 1) = *(double *)(a1 + 24) + *(double *)(a1 + 24);
  if (v43 >= (uint64_t)(a3[1] - *a3) >> 2)
    v44 = (uint64_t)(a3[1] - *a3) >> 2;
  else
    v44 = v43;
  v513 = 0;
  v512 = 0;
  v514 = 0;
  if (v44)
  {
    if (v44 > 0x666666666666666)
      sub_20E867F44();
    v45 = operator new(40 * v44);
    v46 = 0;
    v512 = v45;
    v513 = v45;
    v514 = (char *)v45 + 40 * v44;
    do
    {
      while (1)
      {
        v49 = *v31 + 40 * *(unsigned int *)(*a3 + 4 * v46);
        if (v45 >= (_OWORD *)v514)
          break;
        v47 = *(_OWORD *)v49;
        v48 = *(_OWORD *)(v49 + 16);
        *((_QWORD *)v45 + 4) = *(_QWORD *)(v49 + 32);
        *v45 = v47;
        v45[1] = v48;
        v513 = (char *)v45 + 40;
        ++v46;
        v45 = (_OWORD *)((char *)v45 + 40);
        if (v46 == v44)
          goto LABEL_36;
      }
      v50 = a3;
      v51 = v512;
      v52 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v45 - (_BYTE *)v512) >> 3);
      v53 = v52 + 1;
      if (v52 + 1 > 0x666666666666666)
        sub_20E867F44();
      if (0x999999999999999ALL * ((v514 - (_BYTE *)v512) >> 3) > v53)
        v53 = 0x999999999999999ALL * ((v514 - (_BYTE *)v512) >> 3);
      if (0xCCCCCCCCCCCCCCCDLL * ((v514 - (_BYTE *)v512) >> 3) >= 0x333333333333333)
        v54 = 0x666666666666666;
      else
        v54 = v53;
      if (v54)
      {
        if (v54 > 0x666666666666666)
          sub_20E877A38();
        v55 = (char *)operator new(40 * v54);
      }
      else
      {
        v55 = 0;
      }
      v56 = &v55[40 * v52];
      v57 = *(_OWORD *)v49;
      v58 = *(_OWORD *)(v49 + 16);
      *((_QWORD *)v56 + 4) = *(_QWORD *)(v49 + 32);
      *(_OWORD *)v56 = v57;
      *((_OWORD *)v56 + 1) = v58;
      v59 = v56 + 40;
      if (v45 == v51)
      {
        v512 = &v55[40 * v52];
        v513 = v56 + 40;
        v51 = v45;
        v514 = &v55[40 * v54];
      }
      else
      {
        do
        {
          v60 = *(_OWORD *)((char *)v45 - 40);
          v61 = *(_OWORD *)((char *)v45 - 24);
          *((_QWORD *)v56 - 1) = *((_QWORD *)v45 - 1);
          *(_OWORD *)(v56 - 24) = v61;
          *(_OWORD *)(v56 - 40) = v60;
          v56 -= 40;
          v45 = (_OWORD *)((char *)v45 - 40);
        }
        while (v45 != v51);
        v512 = v56;
        v513 = v59;
        v514 = &v55[40 * v54];
        if (!v51)
          goto LABEL_35;
      }
      operator delete(v51);
LABEL_35:
      a3 = v50;
      v31 = a2;
      v513 = v59;
      ++v46;
      v45 = v59;
    }
    while (v46 != v44);
  }
LABEL_36:
  *(_QWORD *)v478 = &off_24C9C5008;
  v480 = xmmword_2103157C8;
  v481 = unk_2103157D8;
  v482 = (float64x2_t)xmmword_2103157E8;
  v483 = unk_2103157F8;
  *(_OWORD *)&v478[8] = xmmword_210315788;
  *(_OWORD *)&v478[24] = unk_210315798;
  *(_OWORD *)&v478[40] = xmmword_2103157A8;
  v479 = unk_2103157B8;
  v490 = 0;
  v485 = 0;
  memset(v484, 0, sizeof(v484));
  v486 = 0u;
  v487 = 0u;
  v488 = 0;
  v489 = 3;
  sub_20EB5C370((uint64_t)v484);
  v492 = 0;
  v491 = 0;
  v493 = 0;
  v494 = &v512;
  v496 = v515;
  v497 = *(_OWORD *)v516;
  v498 = *(_OWORD *)&v516[16];
  v500 = (double *)&v515;
  v501 = 0;
  v503 = 0;
  v502 = 0;
  v62 = 0xCCCCCCCCCCCCCCCDLL * ((v513 - (_BYTE *)v512) >> 3);
  v495 = v62;
  v499 = v62;
  if (v513 != v512)
  {
    if (v62 >> 61)
      sub_20E867F44();
    v63 = (char *)operator new(0x6666666666666668 * ((v513 - (_BYTE *)v512) >> 3));
    v501 = v63;
    v503 = &v63[8 * v62];
    bzero(v63, 8 * v62);
    v502 = &v63[8 * v62];
  }
  v506 = 0;
  v505 = 0;
  v507 = 0;
  v64 = operator new(0x20uLL);
  v65 = v439;
  v66 = vextq_s8(v438, v438, 8uLL);
  v434 = (float64x2_t)vextq_s8((int8x16_t)v65, (int8x16_t)v65, 8uLL);
  v435 = (float64x2_t)vextq_s8((int8x16_t)v436, (int8x16_t)v436, 8uLL);
  v507 = v64 + 2;
  *v64 = 0u;
  v64[1] = 0u;
  v505 = v64;
  v506 = v64 + 2;
  v67 = *((double *)&v496 + 1);
  v508 = v468;
  v509 = *((double *)&v496 + 1);
  v510 = v67 * v67;
  v511 = v67 + v67;
  *(_QWORD *)&v68.f64[0] = v438.i64[0];
  *(_QWORD *)&v68.f64[1] = v66.i64[0];
  v69 = vmulq_f64(v68, v68);
  v437 = (float64x2_t)v66;
  v70 = v69.f64[0] + *(double *)v66.i64 * *(double *)v66.i64 + v65.f64[0] * v65.f64[0];
  if (v70 >= 0.0000002635)
  {
    v73 = sqrt(v70);
    v74 = __sincos_stret(v73);
    cosval = v74.__cosval;
    v71 = v74.__sinval / v73;
    v65.f64[0] = 1.0 / v70 * (1.0 - v74.__cosval);
    v69.f64[0] = 1.0 / v70 * (1.0 - v74.__sinval / v73);
  }
  else
  {
    v65.f64[0] = 0.5 - v70 * (v70 / -720.0 + 0.0416666667);
    v69.f64[0] = 0.166666667 - v70 * (v70 / -5040.0 + 0.00833333333);
    v71 = 1.0 - v70 * v69.f64[0];
    cosval = 1.0 - v70 * v65.f64[0];
  }
  v75.f64[0] = v439.f64[0];
  v76 = *(double *)v438.i64 * (*(double *)v438.i64 * v65.f64[0]) + cosval;
  v77 = v437.f64[0] * (v437.f64[0] * v65.f64[0]) + cosval;
  *(double *)&v78 = v439.f64[0] * (v439.f64[0] * v65.f64[0]) + cosval;
  v79 = v437.f64[0] * (*(double *)v438.i64 * v65.f64[0]);
  v80 = v439.f64[0] * (*(double *)v438.i64 * v65.f64[0]);
  v81 = v439.f64[0] * (v437.f64[0] * v65.f64[0]);
  v82 = *(double *)v438.i64 * v71;
  v83 = v437.f64[0] * v71;
  v84 = v439.f64[0] * v71;
  v85 = v79 - v84;
  v86 = v80 + v83;
  v87 = v79 + v84;
  v88 = v81 - v82;
  v89 = v80 - v83;
  *(double *)&v90 = v81 + v82;
  *(_QWORD *)&v91.f64[0] = v438.i64[0];
  v91.f64[1] = v437.f64[0];
  v92.f64[0] = v437.f64[0];
  v92.f64[1] = v439.f64[0];
  v93.f64[0] = v435.f64[0];
  v93.f64[1] = v434.f64[0];
  v94.f64[0] = v434.f64[0];
  v94.f64[1] = v436.f64[0];
  *(_QWORD *)&v75.f64[1] = v438.i64[0];
  v95.f64[0] = v436.f64[0];
  v95.f64[1] = v435.f64[0];
  v96 = vsubq_f64(vmulq_f64(v92, v93), vmulq_f64(v75, v95));
  v97 = vsubq_f64(vmulq_f64(v91, v436), vmulq_f64(v437, v434));
  v98 = vaddq_f64(v94, vmulq_n_f64(v96, v65.f64[0]));
  v99 = vaddq_f64(v435, vmulq_f64(v97, v65));
  v100 = (float64x2_t)vextq_s8((int8x16_t)v96, (int8x16_t)v97, 8uLL);
  v97.f64[1] = v96.f64[0];
  *(double *)&v478[8] = v76;
  *(float64_t *)&v478[16] = v87;
  *(float64_t *)&v478[24] = v89;
  *(_QWORD *)&v478[32] = 0;
  *(float64_t *)&v478[40] = v85;
  *(float64_t *)&v478[48] = v77;
  v479 = v90;
  *(float64_t *)&v480 = v86;
  *((float64_t *)&v480 + 1) = v88;
  v481 = v78;
  *(_QWORD *)&v483 = *(_OWORD *)&vaddq_f64(v99, vmulq_f64(vsubq_f64(vmulq_laneq_f64(v91, v96, 1), vmulq_f64(v437, v96)), v69));
  v482 = vaddq_f64(v98, vmulq_n_f64(vsubq_f64(vmulq_f64(v92, v97), vmulq_f64(v75, v100)), v69.f64[0]));
  *((_QWORD *)&v483 + 1) = 0x3FF0000000000000;
  v492 = 0;
  v493 = 0;
  v491 = 0;
  if (!DWORD1(v496))
  {
    v430 = -1.0;
    v431 = -1.0;
    goto LABEL_126;
  }
  v101 = 0;
  v430 = -1.0;
  v431 = -1.0;
  v102 = 0.5;
  v433 = 0.0;
  do
  {
    memset(object, 0, 128);
    v104 = (float64x2_t *)*v494;
    v105 = v494[1];
    if (*v494 == v105)
    {
      v108.f64[0] = 0.0;
      v469 = 0u;
      v471 = 0u;
      v143 = 0.0;
      v114.f64[0] = 0.0;
      v144 = 0.0;
      v109 = 0.0;
      if (v101)
        goto LABEL_57;
    }
    else
    {
      _D5 = v479;
      v107.f64[1] = v482.f64[1];
      *(_QWORD *)&v107.f64[0] = v483;
      v453 = v107;
      v458 = vextq_s8((int8x16_t)v482, (int8x16_t)v482, 8uLL).u64[0];
      v108 = 0uLL;
      v109 = 0.0;
      v110 = 0uLL;
      v111 = 0uLL;
      v112 = 0uLL;
      v447 = (float64x2_t)vdupq_laneq_s64(*(int64x2_t *)&v478[8], 1);
      v444 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v478[24], 0);
      v113 = 0uLL;
      v114 = 0uLL;
      v115 = 0uLL;
      v116 = 0uLL;
      v441 = (float64x2_t)vdupq_lane_s64(v479, 0);
      v442 = (float64x2_t)vdupq_laneq_s64(*(int64x2_t *)&v478[40], 1);
      v440 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v480, 1);
      v117.f64[1] = 0.0;
      v469 = 0u;
      v471 = 0u;
      v118 = (float64x2_t)vdupq_lane_s64(v481, 0);
      do
      {
        v117.f64[0] = v104[2].f64[0];
        _Q21 = v104[1];
        v120 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v478[8], _Q21.f64[0]), *(float64x2_t *)&v478[40], _Q21, 1), (float64x2_t)v480, v117.f64[0]);
        __asm { FMLA            D25, D5, V21.D[1] }
        v117.f64[0] = _D25 + *(double *)&v481 * v117.f64[0];
        v122.f64[0] = v482.f64[0];
        *(_QWORD *)&v122.f64[1] = v458;
        v123 = vaddq_f64(v122, v120);
        v117.f64[0] = vaddq_f64(v453, v117).f64[0];
        v124 = 1.0;
        if (v117.f64[0] == 0.0)
          v125 = 1.0;
        else
          v125 = 1.0 / v117.f64[0];
        v126 = v125 * v123.f64[0] - v104->f64[0];
        v127 = vmuld_lane_f64(v125, v123, 1) - v104->f64[1];
        v128 = *((double *)&v508 + 1) * (v126 * v126 + v127 * v127);
        if (v128 > v510)
        {
          v129 = sqrt(v128);
          v128 = v129 * v511 - v510;
          v124 = v509 / v129;
        }
        v130 = vmulq_n_f64(vnegq_f64(v123), v125 * v125);
        v131 = vmlaq_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)&v478[8], -_Q21.f64[1]), *(float64x2_t *)&v478[40], _Q21.f64[0]), (float64x2_t)0, (float64x2_t)v480);
        v132 = vmlad_n_f64(-(_Q21.f64[1] * *(double *)&v478[24]), *(double *)&v479, _Q21.f64[0]);
        v133 = v125;
        v134.f64[0] = 0.0;
        v134.f64[1] = v125;
        v135 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v125, v131.f64[0]), v134, v131, 1), v130, v132 + *(double *)&v481 * 0.0);
        v136 = vmlaq_f64(vmlaq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v125, *(double *)&v478[8]), v447, v134), v444, v130);
        v137 = vmlaq_f64(vmlaq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v133, *(double *)&v478[40]), v442, v134), v441, v130);
        v138 = vmlaq_f64(vmlaq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v133, *(double *)&v480), v440, v134), v118, v130);
        v139 = (float64x2_t)vzip1q_s64((int64x2_t)v137, (int64x2_t)v138);
        v140 = (float64x2_t)vzip1q_s64((int64x2_t)v135, (int64x2_t)v136);
        v141 = (float64x2_t)vzip2q_s64((int64x2_t)v137, (int64x2_t)v138);
        v142 = (float64x2_t)vzip2q_s64((int64x2_t)v135, (int64x2_t)v136);
        if (vabdd_f64(1.0, v124) > 2.22044605e-16)
        {
          v139 = vmulq_n_f64(v139, v124);
          v140 = vmulq_n_f64(v140, v124);
          v141 = vmulq_n_f64(v141, v124);
          v142 = vmulq_n_f64(v142, v124);
        }
        v109 = v109 + v128;
        v110 = vaddq_f64(v110, vmlaq_laneq_f64(vmulq_n_f64(v139, v135.f64[0]), v141, v135, 1));
        v108 = vaddq_f64(v108, vmlaq_laneq_f64(vmulq_n_f64(v140, v135.f64[0]), v142, v135, 1));
        v112 = vaddq_f64(v112, vmlaq_laneq_f64(vmulq_n_f64(v139, v136.f64[0]), v141, v136, 1));
        v111 = vaddq_f64(v111, vmlaq_laneq_f64(vmulq_n_f64(v140, v136.f64[0]), v142, v136, 1));
        v114 = vaddq_f64(v114, vmlaq_laneq_f64(vmulq_n_f64(v139, v137.f64[0]), v141, v137, 1));
        v113 = vaddq_f64(v113, vmlaq_laneq_f64(vmulq_n_f64(v140, v137.f64[0]), v142, v137, 1));
        v116 = vaddq_f64(v116, vmlaq_laneq_f64(vmulq_n_f64(v139, v138.f64[0]), v141, v138, 1));
        v115 = vaddq_f64(v115, vmlaq_laneq_f64(vmulq_n_f64(v140, v138.f64[0]), v142, v138, 1));
        *(float64x2_t *)object = v108;
        *(float64x2_t *)&object[16] = v110;
        *(float64x2_t *)&object[32] = v111;
        *(float64x2_t *)&object[48] = v112;
        *(float64x2_t *)&object[64] = v113;
        *(float64x2_t *)&object[80] = v114;
        *(float64x2_t *)&object[96] = v115;
        *(float64x2_t *)&object[112] = v116;
        v117 = vsubq_f64(v471, vmlaq_n_f64(vmulq_n_f64(v139, v126), v141, v127));
        v469 = vsubq_f64(v469, vmlaq_n_f64(vmulq_n_f64(v140, v126), v142, v127));
        v471 = v117;
        v104 = (float64x2_t *)((char *)v104 + 40);
      }
      while (v104 != v105);
      v143 = v116.f64[1];
      v144 = v111.f64[1];
      v102 = 0.5;
      if (v101)
      {
LABEL_57:
        v145 = v504.f64[0];
        goto LABEL_60;
      }
    }
    v504 = (float64x2_t)xmmword_210315720;
    v433 = v109 * v102;
    v146 = v109 * v102;
    v145 = 0.001;
    v430 = v146;
    v431 = v146;
LABEL_60:
    *(double *)object = v108.f64[0] + v145;
    *(double *)&object[40] = v144 + v145;
    *(double *)&object[80] = v114.f64[0] + v145;
    *(double *)&object[120] = v143 + v145;
    v531 = v469;
    v532 = v471;
    v147 = operator new(0x20uLL, (std::align_val_t)0x20uLL);
    LODWORD(v534[0]) = 0;
    v473[0].__locale_ = 0;
    sub_20E8BEDE0();
    if (!LODWORD(v534[0]))
    {
      v428 = operator new((8 * (int)*(double *)&v473[0].__locale_ + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
      sub_20E8BEDE0();
      MEMORY[0x212BC6368](v428, 0x1000C8000313F17);
    }
    MEMORY[0x212BC6368](v147, 0x1000C8052888210);
    v150.f64[0] = v531.f64[1];
    v149 = v531.f64[0];
    v152 = v532.f64[1];
    v151 = v532.f64[0];
    v153 = v149 * v149 + 0.0;
    if (v153 >= 0.0000002635)
    {
      v158 = sqrt(v153);
      v459 = v532.f64[0];
      v464 = v150;
      v454 = v532.f64[1];
      v159 = __sincos_stret(v158);
      v157 = v159.__cosval;
      v152 = v454;
      v151 = v459;
      v150 = v464;
      v155 = v159.__sinval / v158;
      v156 = 1.0;
      v154 = 1.0 / v153 * (1.0 - v159.__cosval);
    }
    else
    {
      v154 = v102 - v153 * (v153 / -720.0 + 0.0416666667);
      v155 = 1.0 - v153 * (0.166666667 - v153 * (v153 / -5040.0 + 0.00833333333));
      v156 = 1.0;
      v157 = 1.0 - v153 * v154;
    }
    v148.f64[0] = v154 * 0.0;
    v160 = v154 * 0.0 * 0.0;
    v161 = v157 + v160;
    v162 = v157 + v149 * (v149 * v154);
    v163 = v149 * v148.f64[0];
    v148.f64[0] = v155 * 0.0;
    v164 = v149 * v155;
    v165 = v160 - v164;
    v166 = v148.f64[0] + v163;
    v167 = v160 + v164;
    v168 = v163 - v148.f64[0];
    *(_QWORD *)&v148.f64[0] = v483;
    v169 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)&v478[8], v150.f64[0]), *(float64x2_t *)&v478[40], v151), (float64x2_t)v480, v152);
    v150.f64[0] = *(double *)&v478[24] * v150.f64[0] + *(double *)&v479 * v151 + *(double *)&v481 * v152;
    v482 = vaddq_f64(v482, v169);
    *(_QWORD *)&v483 = *(_OWORD *)&vaddq_f64(v148, v150);
    v170 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)&v478[8], v161), *(float64x2_t *)&v478[40], v167), (float64x2_t)v480, v168);
    v171 = *(double *)&v478[24] * v161 + *(double *)&v479 * v167 + *(double *)&v481 * v168;
    v172 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)&v478[8], v165), *(float64x2_t *)&v478[40], v161), (float64x2_t)v480, v166);
    v173 = *(double *)&v478[24] * v165 + *(double *)&v479 * v161 + *(double *)&v481 * v166;
    v174 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)&v478[8], v166), *(float64x2_t *)&v478[40], v168), (float64x2_t)v480, v162);
    v175 = *(double *)&v478[24] * v166 + *(double *)&v479 * v168 + *(double *)&v481 * v162;
    *(double *)&v478[24] = v171;
    *(float64x2_t *)&v478[8] = v170;
    *(float64x2_t *)&v478[40] = v172;
    *(double *)&v479 = v173;
    *(double *)&v481 = v175;
    v480 = (__int128)v174;
    v176 = v491;
    v491 = 0;
    if (v176)
      MEMORY[0x212BC6398](v176, 0x1000C40FF89C88ELL);
    v177 = v492;
    v492 = 0;
    if (v177)
      MEMORY[0x212BC6398](v177, 0x1000C40504FFAC1);
    v178 = v493;
    v493 = 0;
    if (v178)
      MEMORY[0x212BC6398](v178, 0x1000C40FF89C88ELL);
    memset(v474, 0, sizeof(v474));
    *(_OWORD *)&v473[0].__locale_ = 0u;
    v534[0] = (float64x2_t *)&v478[8];
    v534[1] = 0;
    v533[0] = (double *)v473;
    v533[1] = 0;
    sub_20E95B988(v534, v533);
    v180.f64[0] = *(float64_t *)v474;
    _Q18 = *(float64x2_t *)&v473[0].__locale_;
    _Q0 = vmulq_f64(_Q18, _Q18);
    _D1 = v473[1].__locale_;
    __asm { FMLA            D0, D1, V18.D[1] }
    v184 = _Q0.f64[0] + v180.f64[0] * v180.f64[0];
    if (v184 >= 0.0000002635)
    {
      v186 = sqrt(v184);
      v460 = *(float64x2_t *)&v473[0].__locale_;
      v465 = *(double *)v474;
      v187 = __sincos_stret(v186);
      _Q18 = v460;
      v180.f64[0] = v465;
      v179.f64[0] = v187.__sinval / v186;
      _Q0.f64[0] = 1.0 / v184 * (1.0 - v187.__cosval);
      v185 = 1.0 / v184 * (1.0 - v187.__sinval / v186);
      if (v184 >= 2.775e-15)
      {
LABEL_73:
        if (v184 <= 9.0)
          _Q0.f64[0] = (_Q0.f64[0] * v102 - v185) / v179.f64[0];
        else
          _Q0.f64[0] = (_Q0.f64[0] + v179.f64[0] * -0.5) / (v184 * _Q0.f64[0]);
        goto LABEL_78;
      }
    }
    else
    {
      _Q0.f64[0] = v102 - v184 * (v184 / -720.0 + 0.0416666667);
      v185 = 0.166666667 - v184 * (v184 / -5040.0 + 0.00833333333);
      v179.f64[0] = v156 - v184 * v185;
      if (v184 >= 2.775e-15)
        goto LABEL_73;
    }
    _Q0.f64[0] = v184 * 0.0000330687831 + v184 * 0.00138888889 + 0.0833333333;
LABEL_78:
    v188 = (float64x2_t)vextq_s8((int8x16_t)_Q18, (int8x16_t)_Q18, 8uLL);
    *(_QWORD *)&v179.f64[0] = v483;
    v189.f64[0] = v188.f64[0];
    v189.f64[1] = v180.f64[0];
    v190 = (float64x2_t)vextq_s8((int8x16_t)v482, (int8x16_t)v179, 8uLL);
    v191 = vsubq_f64(vmulq_laneq_f64(_Q18, v482, 1), vmulq_f64(v188, v482));
    v192 = vaddq_f64(v179, vmulq_f64(v191, v432));
    v179.f64[1] = v482.f64[0];
    v180.f64[1] = _Q18.f64[0];
    v193 = vsubq_f64(vmulq_f64(v189, v179), vmulq_f64(v180, v190));
    v194 = (float64x2_t)vextq_s8((int8x16_t)v193, (int8x16_t)v191, 8uLL);
    v191.f64[1] = v193.f64[0];
    v195 = vaddq_f64(v482, vmulq_f64(v193, v432));
    v196 = vmulq_laneq_f64(_Q18, v193, 1);
    v197 = vmulq_f64(v188, v193);
    v198 = vsubq_f64(vmulq_f64(v189, v191), vmulq_f64(v180, v194));
    *((_QWORD *)&v474[1] + 1) = *(_OWORD *)&vaddq_f64(v192, vmulq_f64(_Q0, vsubq_f64(v196, v197)));
    *(float64x2_t *)((char *)v474 + 8) = vaddq_f64(v195, vmulq_n_f64(v198, _Q0.f64[0]));
    _Q24 = *(float64x2_t *)&v473[0].__locale_;
    v199.f64[0] = *(float64_t *)v474;
    v201 = (float64x2_t)vextq_s8((int8x16_t)_Q24, (int8x16_t)_Q24, 8uLL);
    v461 = (int8x16_t)v474[0];
    v466 = v201;
    v202 = (float64x2_t)v474[1];
    v203 = (float64x2_t)vextq_s8((int8x16_t)v202, (int8x16_t)v202, 8uLL);
    v204 = (float64x2_t)vextq_s8(v461, v461, 8uLL);
    _Q5 = vmulq_f64(_Q24, _Q24);
    _D9 = v473[1].__locale_;
    __asm { FMLA            D5, D9, V24.D[1] }
    _Q5.f64[0] = vmlad_n_f64(_Q5.f64[0], *(double *)v461.i64, *(double *)v461.i64);
    v450 = v203;
    locale = v473[0].__locale_;
    v445 = (float64x2_t)v474[1];
    v448 = v204;
    if (_Q5.f64[0] >= 0.0000002635)
    {
      v209 = sqrt(_Q5.f64[0]);
      v443 = _Q5;
      v210 = __sincos_stret(v209);
      v208 = v210.__cosval;
      v202 = v445;
      v204 = v448;
      v203 = v450;
      *(_QWORD *)&_Q24.f64[0] = locale;
      *(_QWORD *)&v199.f64[0] = v461.i64[0];
      v198.f64[1] = v443.f64[1];
      v207 = v210.__sinval / v209;
      v198.f64[0] = 1.0 / v443.f64[0] * (1.0 - v210.__cosval);
      v201.f64[0] = 1.0 / v443.f64[0] * (1.0 - v210.__sinval / v209);
    }
    else
    {
      v198.f64[0] = v102 - _Q5.f64[0] * (_Q5.f64[0] / -720.0 + 0.0416666667);
      v201.f64[0] = 0.166666667 - _Q5.f64[0] * (_Q5.f64[0] / -5040.0 + 0.00833333333);
      v207 = 1.0 - _Q5.f64[0] * v201.f64[0];
      v208 = 1.0 - _Q5.f64[0] * v198.f64[0];
    }
    v211 = _Q24.f64[0] * (_Q24.f64[0] * v198.f64[0]) + v208;
    v212 = *(double *)&_D9 * (*(double *)&_D9 * v198.f64[0]) + v208;
    *(double *)&v213 = v199.f64[0] * (v199.f64[0] * v198.f64[0]) + v208;
    v214 = *(double *)&_D9 * (_Q24.f64[0] * v198.f64[0]);
    v215 = v199.f64[0] * (_Q24.f64[0] * v198.f64[0]);
    v216 = v199.f64[0] * (*(double *)&_D9 * v198.f64[0]);
    v217 = _Q24.f64[0] * v207;
    v218 = *(double *)&_D9 * v207;
    v219 = v199.f64[0] * v207;
    v220 = v214 - v219;
    v221 = v215 + v218;
    v222 = v214 + v219;
    v223 = v216 - v217;
    v224 = v215 - v218;
    *(double *)&v225 = v216 + v217;
    v226.f64[0] = _Q24.f64[0];
    v226.f64[1] = v466.f64[0];
    v227.f64[0] = v466.f64[0];
    v227.f64[1] = v199.f64[0];
    v228.f64[0] = v203.f64[0];
    v228.f64[1] = v204.f64[0];
    v229.f64[0] = v204.f64[0];
    v229.f64[1] = v202.f64[0];
    v199.f64[1] = _Q24.f64[0];
    v230.f64[0] = v202.f64[0];
    v230.f64[1] = v203.f64[0];
    v231 = vsubq_f64(vmulq_f64(v227, v228), vmulq_f64(v199, v230));
    v232 = vsubq_f64(vmulq_f64(v226, v202), vmulq_f64(v466, v204));
    v233 = vaddq_f64(v229, vmulq_n_f64(v231, v198.f64[0]));
    v234 = vaddq_f64(v203, vmulq_f64(v232, v198));
    v235 = (float64x2_t)vextq_s8((int8x16_t)v231, (int8x16_t)v232, 8uLL);
    v232.f64[1] = v231.f64[0];
    _Q23 = vmulq_f64(v199, v235);
    *(float64_t *)&v478[8] = v211;
    *(double *)&v478[16] = v222;
    *(float64_t *)&v478[24] = v224;
    *(_QWORD *)&v478[32] = 0;
    *(double *)&v478[40] = v220;
    *(double *)&v478[48] = v212;
    v479 = v225;
    *(float64_t *)&v480 = v221;
    *((float64_t *)&v480 + 1) = v223;
    v481 = v213;
    *(_QWORD *)&v483 = *(_OWORD *)&vaddq_f64(v234, vmulq_f64(vsubq_f64(vmulq_laneq_f64(v226, v231, 1), vmulq_f64(v466, v231)), v201));
    v482 = vaddq_f64(v233, vmulq_n_f64(vsubq_f64(vmulq_f64(v227, v232), _Q23), v201.f64[0]));
    v237 = v491;
    *((_QWORD *)&v483 + 1) = 0x3FF0000000000000;
    v491 = 0;
    if (v237)
      MEMORY[0x212BC6398](v237, 0x1000C40FF89C88ELL);
    v238 = v492;
    v492 = 0;
    if (v238)
      MEMORY[0x212BC6398](v238, 0x1000C40504FFAC1);
    v239 = v493;
    v493 = 0;
    if (v239)
      MEMORY[0x212BC6398](v239, 0x1000C40FF89C88ELL);
    _Q0 = v532;
    _Q1 = v531;
    _D3 = v531.f64[1];
    __asm { FMLA            D2, D3, V1.D[1] }
    _D3 = v532.f64[1];
    __asm { FMLA            D2, D3, V0.D[1] }
    v247 = locale;
    v246 = *(double *)v461.i64;
    *(_QWORD *)&v248.f64[0] = locale;
    v249 = v466;
    v248.f64[1] = v466.f64[0];
    v251 = v445;
    v250 = v448;
    v252 = v450;
    if (sqrt(_D2) < v500[4]
                   * (sqrt(vmulq_f64(v248, v248).f64[0]+ v249.f64[0] * v249.f64[0]+ v246 * v246+ v250.f64[0] * v250.f64[0]+ v251.f64[0] * v251.f64[0]+ v252.f64[0] * v252.f64[0])+ v500[4]))
    {
      v103 = 0x100000000;
      if (v101 >= v496)
        break;
      goto LABEL_45;
    }
    v253 = vmaxnmq_f64(vabsq_f64(v469), vabsq_f64(v471));
    if (vmaxnmvq_f64(v253) >= v500[3])
    {
      v254 = (float64x2_t *)*v494;
      v255 = v494[1];
      if (*v494 == v255)
      {
        v258 = 0.0;
      }
      else
      {
        _D5 = v479;
        v257 = vextq_s8((int8x16_t)v482, (int8x16_t)v482, 8uLL).u64[0];
        *(_QWORD *)&v251.f64[0] = v483;
        v258 = 0.0;
        do
        {
          _Q23.f64[0] = v254[2].f64[0];
          _Q25 = v254[1];
          v260 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v478[8], _Q25.f64[0]), *(float64x2_t *)&v478[40], _Q25, 1), (float64x2_t)v480, _Q23.f64[0]);
          __asm { FMLA            D27, D5, V25.D[1] }
          _Q23.f64[0] = _D27 + *(double *)&v481 * _Q23.f64[0];
          _Q25.f64[0] = v482.f64[0];
          *(_QWORD *)&_Q25.f64[1] = v257;
          v262 = vaddq_f64(_Q25, v260);
          _Q23.f64[0] = vaddq_f64(v251, _Q23).f64[0];
          if (_Q23.f64[0] == 0.0)
            v263 = 1.0;
          else
            v263 = 1.0 / _Q23.f64[0];
          _Q24 = vmlaq_n_f64(vnegq_f64(*v254), v262, v263);
          _Q23 = vmulq_f64(_Q24, _Q24);
          _D25 = _Q24.f64[1];
          __asm { FMLA            D23, D25, V24.D[1] }
          _Q23.f64[0] = *((double *)&v508 + 1) * _Q23.f64[0];
          v266 = v511 * sqrt(_Q23.f64[0]) - v510;
          if (_Q23.f64[0] > v510)
            _Q23.f64[0] = v266;
          v258 = v258 + _Q23.f64[0];
          v254 = (float64x2_t *)((char *)v254 + 40);
        }
        while (v254 != v255);
      }
      v267 = v258 * v102;
      v268 = v433 - v258 * v102;
      if (fabs(v268 / v433) < *((double *)&v498 + 1))
      {
        v246 = *(double *)v461.i64;
        v249 = v466;
        v252 = v450;
        v247 = locale;
        v251 = v445;
        v250 = v448;
        goto LABEL_122;
      }
      v247 = locale;
      v246 = *(double *)v461.i64;
      v250 = v448;
      v252 = v450;
      v251 = v445;
      if (*((_BYTE *)v500 + 16))
      {
        if (v433 <= v267)
          v269 = "I";
        else
          v269 = "D";
        v270 = sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)v269, 1);
        sub_20E86A980(v270, (uint64_t)"[last error]->[new error][lambda][delta]  : [", 45);
        v271 = (_QWORD *)std::ostream::operator<<();
        sub_20E86A980(v271, (uint64_t)" -> ", 4);
        v272 = (_QWORD *)std::ostream::operator<<();
        sub_20E86A980(v272, (uint64_t)"][", 2);
        v273 = (_QWORD *)std::ostream::operator<<();
        sub_20E86A980(v273, (uint64_t)"][", 2);
        _V1.D[1] = v531.f64[1];
        _D3 = v531.f64[1];
        __asm { FMLA            D2, D3, V1.D[1] }
        _D1 = v532.f64[1];
        __asm { FMLA            D2, D1, V0.D[1] }
        v279 = (_QWORD *)std::ostream::operator<<();
        v280 = sub_20E86A980(v279, (uint64_t)"]", 1);
        std::ios_base::getloc((const std::ios_base *)((char *)v280 + *(_QWORD *)(*v280 - 24)));
        v281 = std::locale::use_facet(v473, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v281->__vftable[2].~facet_0)(v281, 10);
        std::locale::~locale(v473);
        std::ostream::put();
        std::ostream::flush();
        _Q0 = v532;
        _Q1 = v531;
        v247 = locale;
        v246 = *(double *)v461.i64;
        v250 = v448;
        v252 = v450;
        v251 = v445;
      }
      v249 = vmlaq_n_f64(v471, _Q0, v504.f64[0]);
      _D4 = vmlaq_n_f64(v469, _Q1, *(double *)&v504).f64[1];
      __asm { FMLA            D3, D4, V1.D[1] }
      _D1 = v249.f64[1];
      __asm { FMLA            D3, D1, V0.D[1] }
      if (v268 / _D3 >= 0.0)
      {
        v103 = 0;
        v292 = 1.0
             - (v268 / _D3 + v268 / _D3 + -1.0) * ((v268 / _D3 + v268 / _D3 + -1.0) * (v268 / _D3 + v268 / _D3 + -1.0));
        if (v292 > 0.666666667)
          v292 = 0.666666667;
        v504.f64[0] = v504.f64[0] * fmax(v292, 0.333333333);
        v504.f64[1] = 2.0;
        v293 = v267;
        v431 = v293;
        v433 = v267;
        v249 = v466;
      }
      else
      {
        __asm { FMOV            V1.2D, #2.0 }
        _Q1.f64[0] = v504.f64[0];
        v504 = vmulq_n_f64(_Q1, v504.f64[1]);
        *(_QWORD *)&v287.f64[0] = v438.i64[0];
        v287.f64[1] = v437.f64[0];
        v288 = vmulq_f64(v287, v287);
        v289 = v288.f64[0] + v437.f64[0] * v437.f64[0] + v439.f64[0] * v439.f64[0];
        if (v289 >= 0.0000002635)
        {
          v294 = sqrt(v289);
          v295 = __sincos_stret(v294);
          v291 = v295.__cosval;
          v290 = v295.__sinval / v294;
          v253.f64[0] = 1.0 / v289 * (1.0 - v295.__cosval);
          v288.f64[0] = 1.0 / v289 * (1.0 - v295.__sinval / v294);
        }
        else
        {
          v253.f64[0] = v102 - v289 * (v289 / -720.0 + 0.0416666667);
          v288.f64[0] = 0.166666667 - v289 * (v289 / -5040.0 + 0.00833333333);
          v290 = 1.0 - v289 * v288.f64[0];
          v291 = 1.0 - v289 * v253.f64[0];
        }
        v296.f64[0] = v439.f64[0];
        v297 = *(double *)v438.i64 * (*(double *)v438.i64 * v253.f64[0]) + v291;
        v298 = v437.f64[0] * (v437.f64[0] * v253.f64[0]) + v291;
        *(double *)&v299 = v439.f64[0] * (v439.f64[0] * v253.f64[0]) + v291;
        v300 = v437.f64[0] * (*(double *)v438.i64 * v253.f64[0]);
        v301 = v439.f64[0] * (*(double *)v438.i64 * v253.f64[0]);
        v302 = v439.f64[0] * (v437.f64[0] * v253.f64[0]);
        v303 = *(double *)v438.i64 * v290;
        v304 = v437.f64[0] * v290;
        v305 = v439.f64[0] * v290;
        v306 = v300 - v305;
        v307 = v301 + v304;
        v308 = v300 + v305;
        v309 = v302 - v303;
        v310 = v301 - v304;
        *(double *)&v311 = v302 + v303;
        *(_QWORD *)&v312.f64[0] = v438.i64[0];
        v312.f64[1] = v437.f64[0];
        v313.f64[0] = v437.f64[0];
        v313.f64[1] = v439.f64[0];
        v314.f64[0] = v435.f64[0];
        v314.f64[1] = v434.f64[0];
        v315.f64[0] = v434.f64[0];
        v315.f64[1] = v436.f64[0];
        *(_QWORD *)&v296.f64[1] = v438.i64[0];
        v316.f64[0] = v436.f64[0];
        v316.f64[1] = v435.f64[0];
        v317 = vsubq_f64(vmulq_f64(v313, v314), vmulq_f64(v296, v316));
        v318 = vsubq_f64(vmulq_f64(v312, v436), vmulq_f64(v437, v434));
        v319 = vaddq_f64(v315, vmulq_n_f64(v317, v253.f64[0]));
        v320 = vaddq_f64(v435, vmulq_f64(v318, v253));
        v321 = (float64x2_t)vextq_s8((int8x16_t)v317, (int8x16_t)v318, 8uLL);
        v318.f64[1] = v317.f64[0];
        v251 = vsubq_f64(vmulq_f64(v313, v318), vmulq_f64(v296, v321));
        v250 = vmulq_f64(vsubq_f64(vmulq_laneq_f64(v312, v317, 1), vmulq_f64(v437, v317)), v288);
        *(double *)&v478[8] = v297;
        *(float64_t *)&v478[16] = v308;
        *(float64_t *)&v478[24] = v310;
        *(_QWORD *)&v478[32] = 0;
        *(float64_t *)&v478[40] = v306;
        *(float64_t *)&v478[48] = v298;
        v479 = v311;
        *(float64_t *)&v480 = v307;
        *((float64_t *)&v480 + 1) = v309;
        v481 = v299;
        *(_QWORD *)&v483 = *(_OWORD *)&vaddq_f64(v320, v250);
        v482 = vaddq_f64(v319, vmulq_n_f64(v251, v288.f64[0]));
        v322 = v491;
        *((_QWORD *)&v483 + 1) = 0x3FF0000000000000;
        v491 = 0;
        if (v322)
          MEMORY[0x212BC6398](v322, 0x1000C40FF89C88ELL);
        v323 = v492;
        v492 = 0;
        if (v323)
          MEMORY[0x212BC6398](v323, 0x1000C40504FFAC1);
        v324 = v493;
        v493 = 0;
        if (v324)
          MEMORY[0x212BC6398](v324, 0x1000C40FF89C88ELL);
        v103 = 0;
        v247 = (std::locale::__imp *)v438.i64[0];
        v249.f64[0] = v437.f64[0];
        v246 = v439.f64[0];
        v250.f64[0] = v434.f64[0];
        v251.f64[0] = v436.f64[0];
        _Q0.f64[1] = v435.f64[1];
        v252.f64[0] = v435.f64[0];
      }
      goto LABEL_45;
    }
    v103 = 0x200000000;
    if (v101 >= v496)
      break;
LABEL_45:
    ++v101;
    v438.i64[0] = (uint64_t)v247;
    _Q0.f64[0] = v249.f64[0];
    v437 = _Q0;
    v439.f64[0] = v246;
    _Q0.f64[0] = v250.f64[0];
    v434 = _Q0;
    _Q0.f64[0] = v251.f64[0];
    v436 = _Q0;
    _Q0.f64[0] = v252.f64[0];
    v435 = _Q0;
  }
  while (v101 < DWORD1(v496));
  if (!HIDWORD(v103))
    goto LABEL_126;
LABEL_122:
  if (v431 >= v430)
  {
LABEL_126:
    sub_20EB59580(v533);
    if (**((int **)v533[0] + 7) > 2)
      goto LABEL_218;
    v334 = *((unsigned __int8 *)v533[0] + 72);
    v335 = sub_20E8C31DC((uint64_t)v533[0], "OSLogSurrogateAppender", 1, 0);
    v336 = v335;
    if (!v334 && !v335)
      goto LABEL_218;
    v473[0].__locale_ = (std::locale::__imp *)v533;
    v473[1].__locale_ = (std::locale::__imp *)std::chrono::steady_clock::now().__d_.__rep_;
    *(std::chrono::system_clock::time_point *)&v474[0] = std::chrono::system_clock::now();
    DWORD2(v474[0]) = 2;
    *(_QWORD *)&v474[1] = "unknown file";
    DWORD2(v474[1]) = 239;
    v477 = 0;
    v475 = "unknown function";
    v476 = 0;
    v337 = *(_QWORD *)v473[0].__locale_;
    v338 = (const char *)(*(_QWORD *)v473[0].__locale_ + 16);
    v472 = v338;
    if (*(char *)(*(_QWORD *)v473[0].__locale_ + 39) < 0)
    {
      v338 = *(const char **)(v337 + 16);
      v339 = *(_QWORD *)(v337 + 24);
      v375 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v375 & 1) != 0)
        goto LABEL_137;
    }
    else
    {
      v339 = *(unsigned __int8 *)(*(_QWORD *)v473[0].__locale_ + 39);
      v340 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v340 & 1) != 0)
        goto LABEL_137;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
      if (object[24] && (object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_137:
    if (byte_254A4A4F8[23] >= 0)
      v376 = byte_254A4A4F8;
    else
      v376 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v377 = byte_254A4A4F8[23];
    else
      v377 = *(_QWORD *)&byte_254A4A4F8[8];
    *(_QWORD *)object = os_log_create(v376, v338);
    v378 = &object[8];
    if (v377 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v377 >= 0x17)
    {
      v379 = (v377 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v377 | 7) != 0x17)
        v379 = v377 | 7;
      v380 = v379 + 1;
      v378 = operator new(v379 + 1);
      *(_QWORD *)&object[24] = v380 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v378;
      *(_QWORD *)&object[16] = v377;
    }
    else
    {
      object[31] = v377;
      if (!v377)
      {
LABEL_151:
        v378[v377] = 0;
        object[32] = 1;
        v381 = &object[40];
        if (v339 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v339 >= 0x17)
        {
          v382 = (v339 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v339 | 7) != 0x17)
            v382 = v339 | 7;
          v383 = v382 + 1;
          v381 = operator new(v382 + 1);
          *(_QWORD *)&object[56] = v383 | 0x8000000000000000;
          *(_QWORD *)&object[40] = v381;
          *(_QWORD *)&object[48] = v339;
        }
        else
        {
          object[63] = v339;
          if (!v339)
            goto LABEL_159;
        }
        memmove(v381, v338, v339);
LABEL_159:
        v381[v339] = 0;
        object[64] = 1;
        v384 = *(NSObject **)object;
        if ((object[63] & 0x80000000) != 0)
          operator delete(*(void **)&object[40]);
        if (object[32] && (object[31] & 0x80000000) != 0)
          operator delete(*(void **)&object[8]);
        if (*(_QWORD *)object)
          os_release(*(void **)object);
        if (v336 && *(_QWORD *)(v336 + 24))
        {
          v385 = _os_log_pack_size();
          v386 = (std::__shared_weak_count_vtbl *)operator new(v385, (std::align_val_t)8uLL);
          v387 = (std::__shared_weak_count *)operator new();
          v388 = v387;
          v387->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v387->__shared_owners_;
          v387->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v387->__shared_weak_owners_ = 0;
          v387[1].__vftable = v386;
          *(_QWORD *)object = v386;
          *(_QWORD *)&object[8] = v386;
          *(_QWORD *)&object[16] = v387;
          do
            v390 = __ldxr(p_shared_owners);
          while (__stxr(v390 + 1, p_shared_owners));
          memset(&object[24], 0, 24);
          do
            v391 = __ldaxr(p_shared_owners);
          while (__stlxr(v391 - 1, p_shared_owners));
          if (!v391)
          {
            ((void (*)(std::__shared_weak_count *))v387->__on_zero_shared)(v387);
            std::__shared_weak_count::__release_weak(v388);
          }
          v392 = *(_QWORD *)object;
          v393 = _os_log_pack_fill();
          *(_DWORD *)v393 = 134218240;
          *(double *)(v393 + 4) = v430;
          *(_WORD *)(v393 + 12) = 2048;
          *(double *)(v393 + 14) = v431;
          v394 = operator new();
          v395 = *(unsigned __int8 *)(v337 + 39);
          v396 = v472;
          if ((v395 & 0x80u) != 0)
          {
            v396 = *(const char **)(v337 + 16);
            v395 = *(_QWORD *)(v337 + 24);
          }
          *(_QWORD *)v394 = v392;
          *(_OWORD *)(v394 + 8) = *(_OWORD *)&object[8];
          *(_QWORD *)&object[8] = 0;
          *(_QWORD *)&object[16] = 0;
          *(_OWORD *)(v394 + 24) = *(_OWORD *)&object[24];
          *(_QWORD *)&object[24] = 0;
          *(_QWORD *)&object[32] = 0;
          *(_QWORD *)(v394 + 40) = v396;
          *(_QWORD *)(v394 + 48) = v395;
          *(_BYTE *)(v394 + 56) = 2;
          v534[0] = 0;
          *(_QWORD *)&v531.f64[0] = v394;
          (*(void (**)(_QWORD, float64x2_t *))(**(_QWORD **)(v336 + 24) + 40))(*(_QWORD *)(v336 + 24), &v531);
          v397 = v531.f64[0];
          v531.f64[0] = 0.0;
          if (v397 != 0.0)
          {
            v398 = *(std::__shared_weak_count **)(*(_QWORD *)&v397 + 32);
            if (v398)
            {
              v399 = (unint64_t *)&v398->__shared_owners_;
              do
                v400 = __ldaxr(v399);
              while (__stlxr(v400 - 1, v399));
              if (!v400)
              {
                ((void (*)(std::__shared_weak_count *))v398->__on_zero_shared)(v398);
                std::__shared_weak_count::__release_weak(v398);
              }
            }
            v401 = *(std::__shared_weak_count **)(*(_QWORD *)&v397 + 16);
            if (v401)
            {
              v402 = (unint64_t *)&v401->__shared_owners_;
              do
                v403 = __ldaxr(v402);
              while (__stlxr(v403 - 1, v402));
              if (!v403)
              {
                ((void (*)(std::__shared_weak_count *))v401->__on_zero_shared)(v401);
                std::__shared_weak_count::__release_weak(v401);
              }
            }
            MEMORY[0x212BC6398](*(_QWORD *)&v397, 0x10F0C40B62ED6C6);
            v404 = v534[0];
            v534[0] = 0;
            if (v404)
            {
              v405 = *(std::__shared_weak_count **)&v404[2].f64[0];
              if (v405)
              {
                v406 = (unint64_t *)&v405->__shared_owners_;
                do
                  v407 = __ldaxr(v406);
                while (__stlxr(v407 - 1, v406));
                if (!v407)
                {
                  ((void (*)(std::__shared_weak_count *))v405->__on_zero_shared)(v405);
                  std::__shared_weak_count::__release_weak(v405);
                }
              }
              v408 = *(std::__shared_weak_count **)&v404[1].f64[0];
              if (v408)
              {
                v409 = (unint64_t *)&v408->__shared_owners_;
                do
                  v410 = __ldaxr(v409);
                while (__stlxr(v410 - 1, v409));
                if (!v410)
                {
                  ((void (*)(std::__shared_weak_count *))v408->__on_zero_shared)(v408);
                  std::__shared_weak_count::__release_weak(v408);
                }
              }
              MEMORY[0x212BC6398](v404, 0x10F0C40B62ED6C6);
            }
          }
          v411 = *(std::__shared_weak_count **)&object[32];
          if (*(_QWORD *)&object[32])
          {
            v412 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
            do
              v413 = __ldaxr(v412);
            while (__stlxr(v413 - 1, v412));
            if (!v413)
            {
              ((void (*)(std::__shared_weak_count *))v411->__on_zero_shared)(v411);
              std::__shared_weak_count::__release_weak(v411);
            }
          }
          v414 = *(std::__shared_weak_count **)&object[16];
          if (*(_QWORD *)&object[16])
          {
            v415 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
            do
              v416 = __ldaxr(v415);
            while (__stlxr(v416 - 1, v415));
            if (!v416)
            {
              ((void (*)(std::__shared_weak_count *))v414->__on_zero_shared)(v414);
              std::__shared_weak_count::__release_weak(v414);
            }
          }
        }
        else
        {
          os_log_type_enabled(v384, OS_LOG_TYPE_DEBUG);
          *(_DWORD *)object = 134218240;
          *(double *)&object[4] = v430;
          *(_WORD *)&object[12] = 2048;
          *(double *)&object[14] = v431;
          v417 = (void *)_os_log_send_and_compose_impl();
          if (v417)
            free(v417);
        }
        if (v334)
        {
          sub_20E8C003C((uint64_t)v473, "RefinePose4DoF Non-Linear[%f -> %f]", v430, v431);
          sub_20E863570((uint64_t)v473);
        }
        sub_20E863570((uint64_t)v473);
        v418 = v477;
        if (v477)
        {
          v419 = (unint64_t *)&v477->__shared_owners_;
          do
            v420 = __ldaxr(v419);
          while (__stlxr(v420 - 1, v419));
          if (!v420)
          {
            ((void (*)(std::__shared_weak_count *))v418->__on_zero_shared)(v418);
            std::__shared_weak_count::__release_weak(v418);
          }
        }
LABEL_218:
        v12 = 0;
        v374 = v505;
        if (!v505)
          goto LABEL_220;
        goto LABEL_219;
      }
    }
    memmove(v378, v376, v377);
    goto LABEL_151;
  }
  v446 = v251;
  v449 = v250;
  v451 = v252;
  v456 = *(double *)&v247;
  v462 = v246;
  v467 = v249;
  *(_OWORD *)&object[88] = unk_2103157D8;
  *(_OWORD *)&object[104] = xmmword_2103157E8;
  *(_OWORD *)&object[120] = unk_2103157F8;
  *(_OWORD *)&object[8] = xmmword_210315788;
  *(_OWORD *)&object[24] = unk_210315798;
  *(_OWORD *)&object[40] = xmmword_2103157A8;
  memset(&object[56], 0, 32);
  v542 = 0;
  *(_QWORD *)object = &off_24C9C5008;
  v537 = 0;
  memset(v536, 0, sizeof(v536));
  v538 = 0u;
  v539 = 0u;
  v540 = 0;
  v541 = 3;
  sub_20EB5C370((uint64_t)v536);
  v328 = v456;
  v327 = v462;
  v329.f64[0] = v456;
  v330 = v467;
  v329.f64[1] = v467.f64[0];
  v331 = vmulq_f64(v329, v329).f64[0] + v330.f64[0] * v330.f64[0] + v327 * v327;
  if (v331 >= 0.0000002635)
  {
    v341 = sqrt(v331);
    v342 = __sincos_stret(v341);
    v333 = v342.__cosval;
    v328 = v456;
    v327 = v462;
    v332 = v342.__sinval / v341;
    v326.f64[0] = 1.0 / v331 * (1.0 - v342.__cosval);
    v325.f64[0] = 1.0 / v331 * (1.0 - v342.__sinval / v341);
    v330 = v467;
  }
  else
  {
    v326.f64[0] = 0.5 - v331 * (v331 / -720.0 + 0.0416666667);
    v325.f64[0] = 0.166666667 - v331 * (v331 / -5040.0 + 0.00833333333);
    v332 = 1.0 - v331 * v325.f64[0];
    v333 = 1.0 - v331 * v326.f64[0];
  }
  v343 = v328 * (v328 * v326.f64[0]) + v333;
  v344 = v330.f64[0] * (v330.f64[0] * v326.f64[0]) + v333;
  v345 = v327 * (v327 * v326.f64[0]) + v333;
  v346 = v330.f64[0] * (v328 * v326.f64[0]);
  v347 = v327 * (v328 * v326.f64[0]);
  v348 = v327 * (v330.f64[0] * v326.f64[0]);
  v349 = v328 * v332;
  v350 = v330.f64[0] * v332;
  v351 = v327 * v332;
  v352 = v346 - v351;
  v353 = v347 + v350;
  v354 = v346 + v351;
  v355 = v348 - v349;
  v356 = v347 - v350;
  v357.f64[0] = v328;
  v357.f64[1] = v330.f64[0];
  v358.f64[0] = v330.f64[0];
  v358.f64[1] = v327;
  v359.f64[0] = v327;
  v360.f64[0] = v451.f64[0];
  v360.f64[1] = v449.f64[0];
  *(double *)&v361 = v348 + v349;
  v362.f64[0] = v449.f64[0];
  v362.f64[1] = v446.f64[0];
  v359.f64[1] = v328;
  v363.f64[0] = v446.f64[0];
  v363.f64[1] = v451.f64[0];
  v364 = vsubq_f64(vmulq_f64(v358, v360), vmulq_f64(v359, v363));
  v365 = vsubq_f64(vmulq_f64(v357, v446), vmulq_f64(v330, v449));
  v366 = vaddq_f64(v362, vmulq_n_f64(v364, v326.f64[0]));
  v367 = vaddq_f64(v451, vmulq_f64(v365, v326));
  v368 = (float64x2_t)vextq_s8((int8x16_t)v364, (int8x16_t)v365, 8uLL);
  v365.f64[1] = v364.f64[0];
  v369 = vmulq_f64(vsubq_f64(vmulq_laneq_f64(v357, v364, 1), vmulq_f64(v330, v364)), v325);
  *(double *)&object[8] = v343;
  *(float64_t *)&object[16] = v354;
  v370 = (int64x2_t)vaddq_f64(v366, vmulq_n_f64(vsubq_f64(vmulq_f64(v358, v365), vmulq_f64(v359, v368)), v325.f64[0]));
  *(_QWORD *)&v367.f64[0] = *(_OWORD *)&vaddq_f64(v367, v369);
  *(double *)&object[24] = v356;
  *(_QWORD *)&object[32] = 0;
  *(float64_t *)&object[40] = v352;
  *(float64_t *)&object[48] = v344;
  *(_QWORD *)&object[56] = v361;
  *(_QWORD *)&object[64] = 0;
  *(double *)&object[72] = v353;
  *(double *)&object[80] = v355;
  *(double *)&object[88] = v345;
  *(_QWORD *)&object[96] = 0;
  *(float64_t *)&object[120] = v367.f64[0];
  *(int64x2_t *)&object[104] = v370;
  *(_QWORD *)&object[128] = 0x3FF0000000000000;
  v544 = 0;
  v545 = 0;
  v543 = 0;
  v371 = *(int64x2_t *)&object[40];
  v372 = *(int64x2_t *)&object[72];
  *(int64x2_t *)v429 = vzip1q_s64(*(int64x2_t *)&object[8], *(int64x2_t *)&object[40]);
  *(_QWORD *)&v373 = vdupq_laneq_s64(v370, 1).u64[0];
  *(float64_t *)&v370.i64[1] = v354;
  v429[2] = v372.i64[0];
  *(int64x2_t *)(v429 + 3) = v370;
  *(int64x2_t *)(v429 + 5) = vzip2q_s64(v371, v372);
  *((double *)&v373 + 1) = v356;
  *(_OWORD *)(v429 + 7) = v373;
  *((double *)&v361 + 1) = v345;
  *(_OWORD *)(v429 + 9) = v361;
  v429[11] = *(_QWORD *)&v367.f64[0];
  v12 = 1;
  v374 = v505;
  if (v505)
  {
LABEL_219:
    v506 = v374;
    operator delete(v374);
  }
LABEL_220:
  if (v501)
  {
    v502 = (char *)v501;
    operator delete(v501);
  }
  v421 = v493;
  *(_QWORD *)v478 = &off_24C9C5008;
  v493 = 0;
  if (v421)
    MEMORY[0x212BC6398](v421, 0x1000C40FF89C88ELL);
  v422 = v492;
  v492 = 0;
  if (v422)
    MEMORY[0x212BC6398](v422, 0x1000C40504FFAC1);
  v423 = v491;
  v491 = 0;
  if (v423)
    MEMORY[0x212BC6398](v423, 0x1000C40FF89C88ELL);
  if (v512)
  {
    v513 = v512;
    operator delete(v512);
  }
  v424 = v530;
  v517 = &off_24C9C5008;
  v530 = 0;
  if (v424)
    MEMORY[0x212BC6398](v424, 0x1000C40FF89C88ELL);
  v425 = v529;
  v529 = 0;
  if (v425)
    MEMORY[0x212BC6398](v425, 0x1000C40504FFAC1);
  v426 = v528;
  v528 = 0;
  if (v426)
    MEMORY[0x212BC6398](v426, 0x1000C40FF89C88ELL);
  return v12;
}

void sub_20EB5BDE0(_Unwind_Exception *a1)
{
  void *v2;

  if (LOBYTE(STACK[0x5D8]) && SLOBYTE(STACK[0x5D7]) < 0)
    operator delete((void *)STACK[0x5C0]);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0x200]);
  sub_20EB5C228(&STACK[0x250]);
  v2 = (void *)STACK[0x420];
  if (STACK[0x420])
  {
    STACK[0x428] = (unint64_t)v2;
    operator delete(v2);
  }
  sub_20EB5C19C(&STACK[0x468]);
  _Unwind_Resume(a1);
}

uint64_t sub_20EB5BFBC(uint64_t a1, _DWORD *a2, uint64_t *a3, _QWORD *a4, _OWORD *a5, uint64_t a6)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  double v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  uint64_t v25;
  _QWORD v27[2];
  void *__p;
  void *v29;
  uint64_t v30;

  if (((a2[2] - *a2) & 8) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/RANSAC/P2PVerticalPreemptiveRansac.cpp", 114, (uint64_t)"xs.size() % 2 == 0", 18, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_12;
  }
  v12 = *a3;
  v13 = (a3[1] - *a3) >> 3;
  if (0xAAAAAAAAAAAAAAABLL * v13 >= 0x5555555555555556)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/RANSAC/P2PVerticalPreemptiveRansac.cpp", 115, (uint64_t)"Xs.size() % 3 == 0", 18, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_12;
    }
    v12 = *a3;
    v13 = (a3[1] - *a3) >> 3;
  }
  v14 = *(_QWORD *)a2;
  v15 = (unint64_t)((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3) >> 1;
  if (v15 == v13 / 3)
    goto LABEL_9;
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/RANSAC/P2PVerticalPreemptiveRansac.cpp", 116, (uint64_t)"xs.size() / 2 == Xs.size() / 3", 30, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_12:
    abort();
  }
  v14 = *(_QWORD *)a2;
  v12 = *a3;
  v15 = (unint64_t)((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3) >> 1;
LABEL_9:
  __p = 0;
  v29 = 0;
  v30 = 0;
  v27[0] = v14;
  v27[1] = v12;
  sub_20EB59674((uint64_t)&__p, v27, v15);
  v16 = a5[1];
  *(_OWORD *)a6 = *a5;
  *(_OWORD *)(a6 + 16) = v16;
  v17 = a5[2];
  v18 = a5[3];
  v19 = a5[4];
  v20 = a5[5];
  *(_OWORD *)(a6 + 64) = v19;
  *(_OWORD *)(a6 + 80) = v20;
  *(_OWORD *)(a6 + 32) = v17;
  *(_OWORD *)(a6 + 48) = v18;
  v25 = sub_20EB5989C(a1, &__p, a4, (_QWORD *)a6, *(double *)&v17, *(double *)&v18, *(double *)&v19, *(double *)&v20, v21, v22, v23, v24);
  if (__p)
  {
    v29 = __p;
    operator delete(__p);
  }
  return v25;
}

void sub_20EB5C17C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EB5C19C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_24C9C5008;
  v2 = a1[34];
  a1[34] = 0;
  if (v2)
    MEMORY[0x212BC6398](v2, 0x1000C40FF89C88ELL);
  v3 = a1[33];
  a1[33] = 0;
  if (v3)
    MEMORY[0x212BC6398](v3, 0x1000C40504FFAC1);
  v4 = a1[32];
  a1[32] = 0;
  if (v4)
    MEMORY[0x212BC6398](v4, 0x1000C40FF89C88ELL);
  return a1;
}

_QWORD *sub_20EB5C228(_QWORD *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (void *)a1[50];
  if (v2)
  {
    a1[51] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[45];
  if (v3)
  {
    a1[46] = v3;
    operator delete(v3);
  }
  *a1 = &off_24C9C5008;
  v4 = a1[34];
  a1[34] = 0;
  if (v4)
    MEMORY[0x212BC6398](v4, 0x1000C40FF89C88ELL);
  v5 = a1[33];
  a1[33] = 0;
  if (v5)
    MEMORY[0x212BC6398](v5, 0x1000C40504FFAC1);
  v6 = a1[32];
  a1[32] = 0;
  if (v6)
    MEMORY[0x212BC6398](v6, 0x1000C40FF89C88ELL);
  return a1;
}

void sub_20EB5C2D4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_24C9C5008;
  v2 = a1[34];
  a1[34] = 0;
  if (v2)
    MEMORY[0x212BC6398](v2, 0x1000C40FF89C88ELL);
  v3 = a1[33];
  a1[33] = 0;
  if (v3)
    MEMORY[0x212BC6398](v3, 0x1000C40504FFAC1);
  v4 = a1[32];
  a1[32] = 0;
  if (v4)
    MEMORY[0x212BC6398](v4, 0x1000C40FF89C88ELL);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EB5C370(uint64_t result)
{
  float64x2_t v1;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  double v10;
  double v11;
  double v12;
  int v13;
  double v14;
  double v15;
  uint64_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  uint64_t v22;
  float64x2_t v23;
  double v24;
  int8x16_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  double v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  double v39;
  double v40;
  uint64_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  uint64_t v47;
  float64x2_t v48;
  double v49;
  int8x16_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  double v61;
  double v62;
  double v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  double v68;
  double v69;
  uint64_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  uint64_t v76;
  float64x2_t v77;
  double v78;
  int8x16_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  double v88;
  float64_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  double v93;
  double v94;
  uint64_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  uint64_t v101;
  float64x2_t v102;
  double v103;
  int8x16_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  double v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  double v117;
  double v118;
  uint64_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  uint64_t v125;
  float64x2_t v126;
  double v127;
  int8x16_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  double v139;
  double v140;
  double v141;
  float64x2_t v142;
  float64x2_t v143;
  double v144;
  double v145;
  uint64_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  uint64_t v152;
  float64x2_t v153;
  double v154;
  int8x16_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  double v164;
  float64x2_t v165;
  float64x2_t v166;
  double v167;
  double v168;
  uint64_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  uint64_t v175;
  float64x2_t v176;
  double v177;
  int8x16_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  double v187;
  float64x2_t v188;
  float64x2_t v189;
  double v190;
  double v191;
  uint64_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  uint64_t v198;
  float64x2_t v199;
  double v200;
  int8x16_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  double v210;
  double v211;
  double v212;
  double v213;
  double v214;
  double v215;
  double v216;
  double v217;
  double v218;
  double v219;
  double v220;
  double v221;
  double v222;
  double v223;
  double v224;
  double v225;
  double v226;
  double v227;
  double v228;
  double v229;
  double v230;
  double v231;
  double v232;
  double v233;
  double v234;
  double v235;
  double v236;
  double v237;
  double v238;
  double v239;
  double v240;
  double v241;
  double v242;
  double v243;
  double v244;
  double v245;
  double v246;
  double v247;
  double v248;
  double v249;
  double v250;
  double v251;
  double v252;
  double v253;
  double v254;
  double v255;
  double v256;
  double v257;
  double v258;
  double v259;
  double v260;
  double v261;
  double v262;
  double v263;
  double v264;
  double v265;
  double v266;
  double v267;
  double v268;
  double v269;
  double v270;
  double v271;
  double v272;
  double v273;
  double v274;
  double v275;
  double v276;
  double v277;
  double v278;
  double v279;
  double v280;
  double v281;
  double v282;
  double v283;
  double v284;
  double v285;
  double v286;
  double v287;
  double v288;
  double v289;
  double v290;
  double v291;
  double v292;
  double v293;
  double v294;
  double v295;
  double v296;
  double v297;
  double v298;
  double v299;
  double v300;
  double v301;
  double v302;
  double v303;
  double v304;
  double v305;
  double v306;
  double v307;
  double v308;
  double v309;
  double v310;
  double v311;
  double v312;
  double v313;
  double v314;
  double v315;
  double v316;
  double v317;
  double v318;
  double v319;
  double v320;
  double v321;
  double v322;
  double v323;
  double v324;
  double v325;
  double v326;
  double v327;
  double v328;
  double v329;
  double v330;
  double v331;
  double v332;
  double v333;
  double v334;
  double v335;
  double v336;
  double v337;
  double v338;
  double v339;
  double v340;
  double v341;
  double v342;
  double v343;
  double v344;
  double v345;
  double v346;
  double v347;
  double v348;
  double v349;
  double v350;
  double v351;
  double v352;
  double v353;
  double v354;
  double v355;
  double v356;
  double v357;
  double v358;
  double v359;
  double v360;
  double v361;
  double v362;
  double v363;
  double v364;
  double v365;
  double v366;
  double v367;
  double v368;
  double v369;
  double v370;
  double v371;
  double v372;
  double v373;
  double v374;
  double v375;
  double v376;
  double v377;
  double v378;
  double v379;
  double v380;
  double v381;
  double v382;
  double v383;
  double v384;
  double v385;
  double v386;
  double v387;
  double v388;
  double v389;
  double v390;
  double v391;
  double v392;
  double v393;
  double v394;
  double v395;
  double v396;
  double v397;
  double v398;
  double v399;
  double v400;
  double v401;
  double v402;
  double v403;
  double v404;
  double v405;
  double v406;
  double v407;
  double v408;
  double v409;
  double v410;
  double v411;
  double v412;
  double v413;
  double v414;
  double v415;
  double v416;
  double v417;
  double v418;
  double v419;
  double v420;
  double v421;
  double v422;
  double v423;
  double v424;
  double v425;
  double v426;
  double v427;
  double v428;
  double v429;
  double v430;
  double v431;
  double v432;
  double v433;
  double v434;
  double v435;
  double v436;
  double v437;
  double v438;
  double v439;
  double v440;
  double v441;
  double v442;
  double v443;
  double v444;
  double v445;
  double v446;
  double v447;
  double v448;
  double v449;
  double v450;
  double v451;
  double v452;
  double v453;
  double v454;
  double v455;
  double v456;
  double v457;
  double v458;
  double v459;
  double v460;
  double v461;
  double v462;
  double v463;
  double v464;
  double v465;
  double v466;
  double v467;
  double v468;
  double v469;
  double v470;
  double v471;
  double v472;
  double v473;
  double v474;
  double v475;
  double v476;
  double v477;
  double v478;
  double v479;
  double v480;
  double v481;
  double v482;
  double v483;
  double v484;
  double v485;
  double v486;
  double v487;
  double v488;
  double v489;
  double v490;
  double v491;
  double v492;
  double v493;
  double v494;
  double v495;
  double v496;
  double v497;
  double v498;
  double v499;
  double v500;

  *(_OWORD *)(result + 40) = xmmword_210315730;
  *(_OWORD *)(result + 56) = xmmword_210315730;
  if (*(double *)(result + 24) == 0.0 || *(double *)(result + 32) == 0.0)
    return result;
  v1 = *(float64x2_t *)(result + 8);
  __asm { FMOV            V6.2D, #-0.5 }
  v7 = *(float64x2_t *)(result + 24);
  v8 = vdivq_f64(vsubq_f64(_Q6, v1), v7);
  v9 = (float64x2_t)vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL);
  v11 = *(double *)(result + 72);
  v10 = *(double *)(result + 80);
  v12 = *(double *)(result + 104);
  v13 = *(unsigned __int8 *)(result + 114);
  *(_QWORD *)&v14 = *(_OWORD *)&vmulq_f64(v8, v8);
  v15 = vmuld_lane_f64(v8.f64[1], v8, 1);
  if (*(_BYTE *)(result + 114))
  {
    *(double *)&v16 = v14 + v15;
    v17 = *(float64x2_t *)(result + 88);
    v18 = vaddq_f64(v17, v17);
    v19 = (float64x2_t)vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL);
    v20 = (float64x2_t)vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL);
    v21 = vmulq_n_f64(vsubq_f64(v8, vaddq_f64(vmulq_f64(vaddq_f64(vmulq_f64(v8, vaddq_f64(v8, v8)), (float64x2_t)vdupq_lane_s64(v16, 0)), v20), vmulq_n_f64(v18, vmuld_lane_f64(v8.f64[0], v8, 1)))), 1.0/ (v11 * *(double *)&v16+ 1.0+ v10 * (*(double *)&v16 * *(double *)&v16)+ v12 * (*(double *)&v16 * (*(double *)&v16 * *(double *)&v16))));
    *(double *)&v22 = vmulq_f64(v21, v21).f64[0] + vmuld_lane_f64(v21.f64[1], v21, 1);
    v23 = vmulq_n_f64(vsubq_f64(v8, vaddq_f64(vmulq_n_f64(v18, vmuld_lane_f64(v21.f64[0], v21, 1)), vmulq_f64(v20, vaddq_f64(vmulq_f64(v21, vaddq_f64(v21, v21)), (float64x2_t)vdupq_lane_s64(v22, 0))))), 1.0/ (v11 * *(double *)&v22+ 1.0+ v10 * (*(double *)&v22 * *(double *)&v22)+ v12 * (*(double *)&v22 * (*(double *)&v22 * *(double *)&v22))));
    v21.f64[0] = vmulq_f64(v23, v23).f64[0] + vmuld_lane_f64(v23.f64[1], v23, 1);
    v24 = vmuld_lane_f64(v23.f64[0], v23, 1);
    v25 = (int8x16_t)vmulq_f64(v23, vaddq_f64(v23, v23));
    v26 = vmulq_n_f64(vsubq_f64(v9, vaddq_f64(vmulq_n_f64(v19, v24), vmulq_f64(v17, vaddq_f64((float64x2_t)vextq_s8(v25, v25, 8uLL), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v21.f64[0], 0))))), 1.0/ (v11 * v21.f64[0] + 1.0 + v10 * (v21.f64[0] * v21.f64[0]) + v12 * (v21.f64[0] * (v21.f64[0] * v21.f64[0]))));
    v21.f64[0] = vmuld_lane_f64(v26.f64[1], v26, 1) + vmulq_f64(v26, v26).f64[0];
    v27 = vmulq_n_f64(vsubq_f64(v9, vaddq_f64(vmulq_n_f64(v19, vmuld_lane_f64(v26.f64[0], v26, 1)), vmulq_f64(v17, vaddq_f64(vmulq_f64(v26, vaddq_f64(v26, v26)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v21.f64[0], 0))))), 1.0/ (v11 * v21.f64[0] + 1.0 + v10 * (v21.f64[0] * v21.f64[0]) + v12 * (v21.f64[0] * (v21.f64[0] * v21.f64[0]))));
    v21.f64[0] = vmuld_lane_f64(v27.f64[1], v27, 1) + vmulq_f64(v27, v27).f64[0];
    v28 = vmulq_n_f64(vsubq_f64(v9, vaddq_f64(vmulq_n_f64(v19, vmuld_lane_f64(v27.f64[0], v27, 1)), vmulq_f64(v17, vaddq_f64(vmulq_f64(v27, vaddq_f64(v27, v27)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v21.f64[0], 0))))), 1.0/ (v11 * v21.f64[0] + 1.0 + v10 * (v21.f64[0] * v21.f64[0]) + v12 * (v21.f64[0] * (v21.f64[0] * v21.f64[0]))));
    v21.f64[0] = vmuld_lane_f64(v28.f64[1], v28, 1) + vmulq_f64(v28, v28).f64[0];
    v29 = vmulq_n_f64(vsubq_f64(v9, vaddq_f64(vmulq_n_f64(v19, vmuld_lane_f64(v28.f64[0], v28, 1)), vmulq_f64(v17, vaddq_f64(vmulq_f64(v28, vaddq_f64(v28, v28)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v21.f64[0], 0))))), 1.0/ (v11 * v21.f64[0] + 1.0 + v10 * (v21.f64[0] * v21.f64[0]) + v12 * (v21.f64[0] * (v21.f64[0] * v21.f64[0]))));
    v21.f64[0] = vmuld_lane_f64(v29.f64[1], v29, 1) + vmulq_f64(v29, v29).f64[0];
    v30 = vmulq_n_f64(vsubq_f64(v9, vaddq_f64(vmulq_n_f64(v19, vmuld_lane_f64(v29.f64[0], v29, 1)), vmulq_f64(v17, vaddq_f64(vmulq_f64(v29, vaddq_f64(v29, v29)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v21.f64[0], 0))))), 1.0/ (v11 * v21.f64[0] + 1.0 + v10 * (v21.f64[0] * v21.f64[0]) + v12 * (v21.f64[0] * (v21.f64[0] * v21.f64[0]))));
    v21.f64[0] = vmuld_lane_f64(v30.f64[1], v30, 1) + vmulq_f64(v30, v30).f64[0];
    v31 = vmulq_n_f64(vsubq_f64(v9, vaddq_f64(vmulq_n_f64(v19, vmuld_lane_f64(v30.f64[0], v30, 1)), vmulq_f64(v17, vaddq_f64(vmulq_f64(v30, vaddq_f64(v30, v30)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v21.f64[0], 0))))), 1.0/ (v11 * v21.f64[0] + 1.0 + v10 * (v21.f64[0] * v21.f64[0]) + v12 * (v21.f64[0] * (v21.f64[0] * v21.f64[0]))));
    v21.f64[0] = vmuld_lane_f64(v31.f64[1], v31, 1) + vmulq_f64(v31, v31).f64[0];
    v32 = vmulq_n_f64(vsubq_f64(v9, vaddq_f64(vmulq_n_f64(v19, vmuld_lane_f64(v31.f64[0], v31, 1)), vmulq_f64(v17, vaddq_f64(vmulq_f64(v31, vaddq_f64(v31, v31)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v21.f64[0], 0))))), 1.0/ (v11 * v21.f64[0] + 1.0 + v10 * (v21.f64[0] * v21.f64[0]) + v12 * (v21.f64[0] * (v21.f64[0] * v21.f64[0]))));
    v21.f64[0] = vmuld_lane_f64(v32.f64[1], v32, 1) + vmulq_f64(v32, v32).f64[0];
    v33 = vmulq_n_f64(vsubq_f64(v9, vaddq_f64(vmulq_n_f64(v19, vmuld_lane_f64(v32.f64[0], v32, 1)), vmulq_f64(v17, vaddq_f64(vmulq_f64(v32, vaddq_f64(v32, v32)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v21.f64[0], 0))))), 1.0/ (v11 * v21.f64[0] + 1.0 + v10 * (v21.f64[0] * v21.f64[0]) + v12 * (v21.f64[0] * (v21.f64[0] * v21.f64[0]))));
    v34 = v33.f64[1];
    if (v33.f64[1] >= 1.79769313e308)
      goto LABEL_6;
    goto LABEL_5;
  }
  v211 = 1.0
       / (v11 * (v14 + v15) + 1.0 + v10 * ((v14 + v15) * (v14 + v15)) + v12
                                                                      * ((v14 + v15)
                                                                       * ((v14 + v15)
                                                                        * (v14 + v15))));
  v212 = v211 * v8.f64[0];
  v213 = vmuld_lane_f64(v211, v8, 1);
  v214 = v212 * v212 + v213 * v213;
  v215 = 1.0 / (v11 * v214 + 1.0 + v10 * (v214 * v214) + v12 * (v214 * (v214 * v214)));
  v216 = v215 * v8.f64[0];
  v217 = vmuld_lane_f64(v215, v8, 1);
  v218 = v216 * v216 + v217 * v217;
  v219 = 1.0 / (v11 * v218 + 1.0 + v10 * (v218 * v218) + v12 * (v218 * (v218 * v218)));
  v220 = v219 * v8.f64[0];
  v221 = vmuld_lane_f64(v219, v8, 1);
  v222 = v220 * v220 + v221 * v221;
  v223 = 1.0 / (v11 * v222 + 1.0 + v10 * (v222 * v222) + v12 * (v222 * (v222 * v222)));
  v224 = v223 * v8.f64[0];
  v225 = vmuld_lane_f64(v223, v8, 1);
  v226 = v224 * v224 + v225 * v225;
  v227 = 1.0 / (v11 * v226 + 1.0 + v10 * (v226 * v226) + v12 * (v226 * (v226 * v226)));
  v228 = v227 * v8.f64[0];
  v229 = vmuld_lane_f64(v227, v8, 1);
  v230 = v228 * v228 + v229 * v229;
  v231 = 1.0 / (v11 * v230 + 1.0 + v10 * (v230 * v230) + v12 * (v230 * (v230 * v230)));
  v232 = v231 * v8.f64[0];
  v233 = vmuld_lane_f64(v231, v8, 1);
  v234 = v232 * v232 + v233 * v233;
  v235 = 1.0 / (v11 * v234 + 1.0 + v10 * (v234 * v234) + v12 * (v234 * (v234 * v234)));
  v236 = v235 * v8.f64[0];
  v237 = vmuld_lane_f64(v235, v8, 1);
  v238 = v236 * v236 + v237 * v237;
  v239 = 1.0 / (v11 * v238 + 1.0 + v10 * (v238 * v238) + v12 * (v238 * (v238 * v238)));
  v240 = v239 * v8.f64[0];
  v241 = vmuld_lane_f64(v239, v8, 1);
  v242 = v240 * v240 + v241 * v241;
  v243 = 1.0 / (v11 * v242 + 1.0 + v10 * (v242 * v242) + v12 * (v242 * (v242 * v242)));
  v244 = v243 * v8.f64[0];
  v245 = vmuld_lane_f64(v243, v8, 1);
  v246 = v244 * v244 + v245 * v245;
  v33 = vmulq_n_f64(v9, 1.0 / (v11 * v246 + 1.0 + v10 * (v246 * v246) + v12 * (v246 * (v246 * v246))));
  v34 = v33.f64[1];
  if (v33.f64[1] < 1.79769313e308)
LABEL_5:
    *(double *)(result + 40) = v34;
LABEL_6:
  if (v34 > -1.79769313e308)
  {
    *(double *)(result + 48) = v34;
    if (v33.f64[0] >= 1.79769313e308)
    {
LABEL_8:
      v35.f64[0] = *(float64_t *)(result + 8);
      if (v33.f64[0] <= -1.79769313e308)
        goto LABEL_10;
      goto LABEL_9;
    }
  }
  else if (v33.f64[0] >= 1.79769313e308)
  {
    goto LABEL_8;
  }
  *(float64_t *)(result + 56) = v33.f64[0];
  v35.f64[0] = *(float64_t *)(result + 8);
  if (v33.f64[0] > -1.79769313e308)
LABEL_9:
    *(float64_t *)(result + 64) = v33.f64[0];
LABEL_10:
  v36.f64[0] = v35.f64[0];
  v36.f64[1] = -0.5;
  v37 = vdivq_f64(vsubq_f64(v36, v1), v7);
  v38 = (float64x2_t)vextq_s8((int8x16_t)v37, (int8x16_t)v37, 8uLL);
  *(_QWORD *)&v39 = *(_OWORD *)&vmulq_f64(v37, v37);
  v40 = vmuld_lane_f64(v37.f64[1], v37, 1);
  if (v13)
  {
    *(double *)&v41 = v39 + v40;
    v42 = *(float64x2_t *)(result + 88);
    v43 = vaddq_f64(v42, v42);
    v44 = (float64x2_t)vextq_s8((int8x16_t)v43, (int8x16_t)v43, 8uLL);
    v45 = (float64x2_t)vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL);
    v46 = vmulq_n_f64(vsubq_f64(v37, vaddq_f64(vmulq_f64(vaddq_f64(vmulq_f64(v37, vaddq_f64(v37, v37)), (float64x2_t)vdupq_lane_s64(v41, 0)), v45), vmulq_n_f64(v43, vmuld_lane_f64(v37.f64[0], v37, 1)))), 1.0/ (v11 * *(double *)&v41+ 1.0+ v10 * (*(double *)&v41 * *(double *)&v41)+ v12 * (*(double *)&v41 * (*(double *)&v41 * *(double *)&v41))));
    *(double *)&v47 = vmulq_f64(v46, v46).f64[0] + vmuld_lane_f64(v46.f64[1], v46, 1);
    v48 = vmulq_n_f64(vsubq_f64(v37, vaddq_f64(vmulq_n_f64(v43, vmuld_lane_f64(v46.f64[0], v46, 1)), vmulq_f64(v45, vaddq_f64(vmulq_f64(v46, vaddq_f64(v46, v46)), (float64x2_t)vdupq_lane_s64(v47, 0))))), 1.0/ (v11 * *(double *)&v47+ 1.0+ v10 * (*(double *)&v47 * *(double *)&v47)+ v12 * (*(double *)&v47 * (*(double *)&v47 * *(double *)&v47))));
    v46.f64[0] = vmulq_f64(v48, v48).f64[0] + vmuld_lane_f64(v48.f64[1], v48, 1);
    v49 = vmuld_lane_f64(v48.f64[0], v48, 1);
    v50 = (int8x16_t)vmulq_f64(v48, vaddq_f64(v48, v48));
    v51 = vmulq_n_f64(vsubq_f64(v38, vaddq_f64(vmulq_n_f64(v44, v49), vmulq_f64(v42, vaddq_f64((float64x2_t)vextq_s8(v50, v50, 8uLL), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v46.f64[0], 0))))), 1.0/ (v11 * v46.f64[0] + 1.0 + v10 * (v46.f64[0] * v46.f64[0]) + v12 * (v46.f64[0] * (v46.f64[0] * v46.f64[0]))));
    v46.f64[0] = vmuld_lane_f64(v51.f64[1], v51, 1) + vmulq_f64(v51, v51).f64[0];
    v52 = vmulq_n_f64(vsubq_f64(v38, vaddq_f64(vmulq_n_f64(v44, vmuld_lane_f64(v51.f64[0], v51, 1)), vmulq_f64(v42, vaddq_f64(vmulq_f64(v51, vaddq_f64(v51, v51)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v46.f64[0], 0))))), 1.0/ (v11 * v46.f64[0] + 1.0 + v10 * (v46.f64[0] * v46.f64[0]) + v12 * (v46.f64[0] * (v46.f64[0] * v46.f64[0]))));
    v46.f64[0] = vmuld_lane_f64(v52.f64[1], v52, 1) + vmulq_f64(v52, v52).f64[0];
    v53 = vmulq_n_f64(vsubq_f64(v38, vaddq_f64(vmulq_n_f64(v44, vmuld_lane_f64(v52.f64[0], v52, 1)), vmulq_f64(v42, vaddq_f64(vmulq_f64(v52, vaddq_f64(v52, v52)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v46.f64[0], 0))))), 1.0/ (v11 * v46.f64[0] + 1.0 + v10 * (v46.f64[0] * v46.f64[0]) + v12 * (v46.f64[0] * (v46.f64[0] * v46.f64[0]))));
    v46.f64[0] = vmuld_lane_f64(v53.f64[1], v53, 1) + vmulq_f64(v53, v53).f64[0];
    v54 = vmulq_n_f64(vsubq_f64(v38, vaddq_f64(vmulq_n_f64(v44, vmuld_lane_f64(v53.f64[0], v53, 1)), vmulq_f64(v42, vaddq_f64(vmulq_f64(v53, vaddq_f64(v53, v53)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v46.f64[0], 0))))), 1.0/ (v11 * v46.f64[0] + 1.0 + v10 * (v46.f64[0] * v46.f64[0]) + v12 * (v46.f64[0] * (v46.f64[0] * v46.f64[0]))));
    v46.f64[0] = vmuld_lane_f64(v54.f64[1], v54, 1) + vmulq_f64(v54, v54).f64[0];
    v55 = vmulq_n_f64(vsubq_f64(v38, vaddq_f64(vmulq_n_f64(v44, vmuld_lane_f64(v54.f64[0], v54, 1)), vmulq_f64(v42, vaddq_f64(vmulq_f64(v54, vaddq_f64(v54, v54)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v46.f64[0], 0))))), 1.0/ (v11 * v46.f64[0] + 1.0 + v10 * (v46.f64[0] * v46.f64[0]) + v12 * (v46.f64[0] * (v46.f64[0] * v46.f64[0]))));
    v46.f64[0] = vmuld_lane_f64(v55.f64[1], v55, 1) + vmulq_f64(v55, v55).f64[0];
    v56 = vmulq_n_f64(vsubq_f64(v38, vaddq_f64(vmulq_n_f64(v44, vmuld_lane_f64(v55.f64[0], v55, 1)), vmulq_f64(v42, vaddq_f64(vmulq_f64(v55, vaddq_f64(v55, v55)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v46.f64[0], 0))))), 1.0/ (v11 * v46.f64[0] + 1.0 + v10 * (v46.f64[0] * v46.f64[0]) + v12 * (v46.f64[0] * (v46.f64[0] * v46.f64[0]))));
    v46.f64[0] = vmuld_lane_f64(v56.f64[1], v56, 1) + vmulq_f64(v56, v56).f64[0];
    v57 = vmulq_n_f64(vsubq_f64(v38, vaddq_f64(vmulq_n_f64(v44, vmuld_lane_f64(v56.f64[0], v56, 1)), vmulq_f64(v42, vaddq_f64(vmulq_f64(v56, vaddq_f64(v56, v56)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v46.f64[0], 0))))), 1.0/ (v11 * v46.f64[0] + 1.0 + v10 * (v46.f64[0] * v46.f64[0]) + v12 * (v46.f64[0] * (v46.f64[0] * v46.f64[0]))));
    v46.f64[0] = vmuld_lane_f64(v57.f64[1], v57, 1) + vmulq_f64(v57, v57).f64[0];
    v59 = vmulq_n_f64(v44, vmuld_lane_f64(v57.f64[0], v57, 1));
    v58 = vsubq_f64(v38, vaddq_f64(v59, vmulq_f64(v42, vaddq_f64(vmulq_f64(v57, vaddq_f64(v57, v57)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v46.f64[0], 0)))));
    LODWORD(v59.f64[0]) = *(_DWORD *)result;
    v60 = vmulq_n_f64(v58, 1.0/ (v11 * v46.f64[0] + 1.0 + v10 * (v46.f64[0] * v46.f64[0]) + v12 * (v46.f64[0] * (v46.f64[0] * v46.f64[0]))));
    v61 = v60.f64[1];
    if (v60.f64[1] >= *(double *)(result + 40))
      goto LABEL_13;
    goto LABEL_12;
  }
  v247 = 1.0
       / (v11 * (v39 + v40) + 1.0 + v10 * ((v39 + v40) * (v39 + v40)) + v12
                                                                      * ((v39 + v40)
                                                                       * ((v39 + v40)
                                                                        * (v39 + v40))));
  v248 = v247 * v37.f64[0];
  v249 = vmuld_lane_f64(v247, v37, 1);
  v250 = v248 * v248 + v249 * v249;
  v251 = 1.0 / (v11 * v250 + 1.0 + v10 * (v250 * v250) + v12 * (v250 * (v250 * v250)));
  v252 = v251 * v37.f64[0];
  v253 = vmuld_lane_f64(v251, v37, 1);
  v254 = v252 * v252 + v253 * v253;
  v255 = 1.0 / (v11 * v254 + 1.0 + v10 * (v254 * v254) + v12 * (v254 * (v254 * v254)));
  v256 = v255 * v37.f64[0];
  v257 = vmuld_lane_f64(v255, v37, 1);
  v258 = v256 * v256 + v257 * v257;
  v259 = 1.0 / (v11 * v258 + 1.0 + v10 * (v258 * v258) + v12 * (v258 * (v258 * v258)));
  v260 = v259 * v37.f64[0];
  v261 = vmuld_lane_f64(v259, v37, 1);
  v262 = v260 * v260 + v261 * v261;
  v263 = 1.0 / (v11 * v262 + 1.0 + v10 * (v262 * v262) + v12 * (v262 * (v262 * v262)));
  v264 = v263 * v37.f64[0];
  v265 = vmuld_lane_f64(v263, v37, 1);
  v266 = v264 * v264 + v265 * v265;
  v267 = 1.0 / (v11 * v266 + 1.0 + v10 * (v266 * v266) + v12 * (v266 * (v266 * v266)));
  v268 = v267 * v37.f64[0];
  v269 = vmuld_lane_f64(v267, v37, 1);
  v270 = v268 * v268 + v269 * v269;
  v271 = 1.0 / (v11 * v270 + 1.0 + v10 * (v270 * v270) + v12 * (v270 * (v270 * v270)));
  v272 = v271 * v37.f64[0];
  v273 = vmuld_lane_f64(v271, v37, 1);
  v274 = v272 * v272 + v273 * v273;
  v275 = 1.0 / (v11 * v274 + 1.0 + v10 * (v274 * v274) + v12 * (v274 * (v274 * v274)));
  v276 = v275 * v37.f64[0];
  v277 = vmuld_lane_f64(v275, v37, 1);
  v278 = v276 * v276 + v277 * v277;
  v279 = 1.0 / (v11 * v278 + 1.0 + v10 * (v278 * v278) + v12 * (v278 * (v278 * v278)));
  v280 = v279 * v37.f64[0];
  v281 = vmuld_lane_f64(v279, v37, 1);
  v282 = v280 * v280 + v281 * v281;
  v283 = v282 * (v282 * v282);
  v59.f64[0] = v12 * v283;
  LODWORD(v59.f64[0]) = *(_DWORD *)result;
  v60 = vmulq_n_f64(v38, 1.0 / (v11 * v282 + 1.0 + v10 * (v282 * v282) + v12 * v283));
  v61 = v60.f64[1];
  if (v60.f64[1] < *(double *)(result + 40))
LABEL_12:
    *(double *)(result + 40) = v61;
LABEL_13:
  if (v61 > *(double *)(result + 48))
  {
    *(double *)(result + 48) = v61;
    v62 = -0.5;
    v63 = (double)*(unint64_t *)&v59.f64[0];
    if (v60.f64[0] >= *(double *)(result + 56))
    {
LABEL_15:
      v64.f64[0] = v63 + v62;
      if (v60.f64[0] <= *(double *)(result + 64))
        goto LABEL_17;
      goto LABEL_16;
    }
  }
  else
  {
    v62 = -0.5;
    v63 = (double)*(unint64_t *)&v59.f64[0];
    if (v60.f64[0] >= *(double *)(result + 56))
      goto LABEL_15;
  }
  *(float64_t *)(result + 56) = v60.f64[0];
  v64.f64[0] = v63 + v62;
  if (v60.f64[0] > *(double *)(result + 64))
LABEL_16:
    *(float64_t *)(result + 64) = v60.f64[0];
LABEL_17:
  v65.f64[0] = v64.f64[0];
  v65.f64[1] = -0.5;
  v66 = vdivq_f64(vsubq_f64(v65, v1), v7);
  v67 = (float64x2_t)vextq_s8((int8x16_t)v66, (int8x16_t)v66, 8uLL);
  *(_QWORD *)&v68 = *(_OWORD *)&vmulq_f64(v66, v66);
  v69 = vmuld_lane_f64(v66.f64[1], v66, 1);
  if (v13)
  {
    *(double *)&v70 = v68 + v69;
    v71 = *(float64x2_t *)(result + 88);
    v72 = vaddq_f64(v71, v71);
    v73 = (float64x2_t)vextq_s8((int8x16_t)v72, (int8x16_t)v72, 8uLL);
    v74 = (float64x2_t)vextq_s8((int8x16_t)v71, (int8x16_t)v71, 8uLL);
    v75 = vmulq_n_f64(vsubq_f64(v66, vaddq_f64(vmulq_f64(vaddq_f64(vmulq_f64(v66, vaddq_f64(v66, v66)), (float64x2_t)vdupq_lane_s64(v70, 0)), v74), vmulq_n_f64(v72, vmuld_lane_f64(v66.f64[0], v66, 1)))), 1.0/ (v11 * *(double *)&v70+ 1.0+ v10 * (*(double *)&v70 * *(double *)&v70)+ v12 * (*(double *)&v70 * (*(double *)&v70 * *(double *)&v70))));
    *(double *)&v76 = vmulq_f64(v75, v75).f64[0] + vmuld_lane_f64(v75.f64[1], v75, 1);
    v77 = vmulq_n_f64(vsubq_f64(v66, vaddq_f64(vmulq_n_f64(v72, vmuld_lane_f64(v75.f64[0], v75, 1)), vmulq_f64(v74, vaddq_f64(vmulq_f64(v75, vaddq_f64(v75, v75)), (float64x2_t)vdupq_lane_s64(v76, 0))))), 1.0/ (v11 * *(double *)&v76+ 1.0+ v10 * (*(double *)&v76 * *(double *)&v76)+ v12 * (*(double *)&v76 * (*(double *)&v76 * *(double *)&v76))));
    v75.f64[0] = vmulq_f64(v77, v77).f64[0] + vmuld_lane_f64(v77.f64[1], v77, 1);
    v78 = vmuld_lane_f64(v77.f64[0], v77, 1);
    v79 = (int8x16_t)vmulq_f64(v77, vaddq_f64(v77, v77));
    v80 = vmulq_n_f64(vsubq_f64(v67, vaddq_f64(vmulq_n_f64(v73, v78), vmulq_f64(v71, vaddq_f64((float64x2_t)vextq_s8(v79, v79, 8uLL), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v75.f64[0], 0))))), 1.0/ (v11 * v75.f64[0] + 1.0 + v10 * (v75.f64[0] * v75.f64[0]) + v12 * (v75.f64[0] * (v75.f64[0] * v75.f64[0]))));
    v75.f64[0] = vmuld_lane_f64(v80.f64[1], v80, 1) + vmulq_f64(v80, v80).f64[0];
    v81 = vmulq_n_f64(vsubq_f64(v67, vaddq_f64(vmulq_n_f64(v73, vmuld_lane_f64(v80.f64[0], v80, 1)), vmulq_f64(v71, vaddq_f64(vmulq_f64(v80, vaddq_f64(v80, v80)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v75.f64[0], 0))))), 1.0/ (v11 * v75.f64[0] + 1.0 + v10 * (v75.f64[0] * v75.f64[0]) + v12 * (v75.f64[0] * (v75.f64[0] * v75.f64[0]))));
    v75.f64[0] = vmuld_lane_f64(v81.f64[1], v81, 1) + vmulq_f64(v81, v81).f64[0];
    v82 = vmulq_n_f64(vsubq_f64(v67, vaddq_f64(vmulq_n_f64(v73, vmuld_lane_f64(v81.f64[0], v81, 1)), vmulq_f64(v71, vaddq_f64(vmulq_f64(v81, vaddq_f64(v81, v81)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v75.f64[0], 0))))), 1.0/ (v11 * v75.f64[0] + 1.0 + v10 * (v75.f64[0] * v75.f64[0]) + v12 * (v75.f64[0] * (v75.f64[0] * v75.f64[0]))));
    v75.f64[0] = vmuld_lane_f64(v82.f64[1], v82, 1) + vmulq_f64(v82, v82).f64[0];
    v83 = vmulq_n_f64(vsubq_f64(v67, vaddq_f64(vmulq_n_f64(v73, vmuld_lane_f64(v82.f64[0], v82, 1)), vmulq_f64(v71, vaddq_f64(vmulq_f64(v82, vaddq_f64(v82, v82)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v75.f64[0], 0))))), 1.0/ (v11 * v75.f64[0] + 1.0 + v10 * (v75.f64[0] * v75.f64[0]) + v12 * (v75.f64[0] * (v75.f64[0] * v75.f64[0]))));
    v75.f64[0] = vmuld_lane_f64(v83.f64[1], v83, 1) + vmulq_f64(v83, v83).f64[0];
    v84 = vmulq_n_f64(vsubq_f64(v67, vaddq_f64(vmulq_n_f64(v73, vmuld_lane_f64(v83.f64[0], v83, 1)), vmulq_f64(v71, vaddq_f64(vmulq_f64(v83, vaddq_f64(v83, v83)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v75.f64[0], 0))))), 1.0/ (v11 * v75.f64[0] + 1.0 + v10 * (v75.f64[0] * v75.f64[0]) + v12 * (v75.f64[0] * (v75.f64[0] * v75.f64[0]))));
    v75.f64[0] = vmuld_lane_f64(v84.f64[1], v84, 1) + vmulq_f64(v84, v84).f64[0];
    v85 = vmulq_n_f64(vsubq_f64(v67, vaddq_f64(vmulq_n_f64(v73, vmuld_lane_f64(v84.f64[0], v84, 1)), vmulq_f64(v71, vaddq_f64(vmulq_f64(v84, vaddq_f64(v84, v84)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v75.f64[0], 0))))), 1.0/ (v11 * v75.f64[0] + 1.0 + v10 * (v75.f64[0] * v75.f64[0]) + v12 * (v75.f64[0] * (v75.f64[0] * v75.f64[0]))));
    v75.f64[0] = vmuld_lane_f64(v85.f64[1], v85, 1) + vmulq_f64(v85, v85).f64[0];
    v86 = vmulq_n_f64(vsubq_f64(v67, vaddq_f64(vmulq_n_f64(v73, vmuld_lane_f64(v85.f64[0], v85, 1)), vmulq_f64(v71, vaddq_f64(vmulq_f64(v85, vaddq_f64(v85, v85)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v75.f64[0], 0))))), 1.0/ (v11 * v75.f64[0] + 1.0 + v10 * (v75.f64[0] * v75.f64[0]) + v12 * (v75.f64[0] * (v75.f64[0] * v75.f64[0]))));
    v75.f64[0] = vmuld_lane_f64(v86.f64[1], v86, 1) + vmulq_f64(v86, v86).f64[0];
    v87 = vmulq_n_f64(vsubq_f64(v67, vaddq_f64(vmulq_n_f64(v73, vmuld_lane_f64(v86.f64[0], v86, 1)), vmulq_f64(v71, vaddq_f64(vmulq_f64(v86, vaddq_f64(v86, v86)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v75.f64[0], 0))))), 1.0/ (v11 * v75.f64[0] + 1.0 + v10 * (v75.f64[0] * v75.f64[0]) + v12 * (v75.f64[0] * (v75.f64[0] * v75.f64[0]))));
    v88 = v87.f64[1];
    if (v87.f64[1] >= *(double *)(result + 40))
      goto LABEL_20;
    goto LABEL_19;
  }
  v284 = 1.0
       / (v11 * (v68 + v69) + 1.0 + v10 * ((v68 + v69) * (v68 + v69)) + v12
                                                                      * ((v68 + v69)
                                                                       * ((v68 + v69)
                                                                        * (v68 + v69))));
  v285 = v284 * v66.f64[0];
  v286 = vmuld_lane_f64(v284, v66, 1);
  v287 = v285 * v285 + v286 * v286;
  v288 = 1.0 / (v11 * v287 + 1.0 + v10 * (v287 * v287) + v12 * (v287 * (v287 * v287)));
  v289 = v288 * v66.f64[0];
  v290 = vmuld_lane_f64(v288, v66, 1);
  v291 = v289 * v289 + v290 * v290;
  v292 = 1.0 / (v11 * v291 + 1.0 + v10 * (v291 * v291) + v12 * (v291 * (v291 * v291)));
  v293 = v292 * v66.f64[0];
  v294 = vmuld_lane_f64(v292, v66, 1);
  v295 = v293 * v293 + v294 * v294;
  v296 = 1.0 / (v11 * v295 + 1.0 + v10 * (v295 * v295) + v12 * (v295 * (v295 * v295)));
  v297 = v296 * v66.f64[0];
  v298 = vmuld_lane_f64(v296, v66, 1);
  v299 = v297 * v297 + v298 * v298;
  v300 = 1.0 / (v11 * v299 + 1.0 + v10 * (v299 * v299) + v12 * (v299 * (v299 * v299)));
  v301 = v300 * v66.f64[0];
  v302 = vmuld_lane_f64(v300, v66, 1);
  v303 = v301 * v301 + v302 * v302;
  v304 = 1.0 / (v11 * v303 + 1.0 + v10 * (v303 * v303) + v12 * (v303 * (v303 * v303)));
  v305 = v304 * v66.f64[0];
  v306 = vmuld_lane_f64(v304, v66, 1);
  v307 = v305 * v305 + v306 * v306;
  v308 = 1.0 / (v11 * v307 + 1.0 + v10 * (v307 * v307) + v12 * (v307 * (v307 * v307)));
  v309 = v308 * v66.f64[0];
  v310 = vmuld_lane_f64(v308, v66, 1);
  v311 = v309 * v309 + v310 * v310;
  v312 = 1.0 / (v11 * v311 + 1.0 + v10 * (v311 * v311) + v12 * (v311 * (v311 * v311)));
  v313 = v312 * v66.f64[0];
  v314 = vmuld_lane_f64(v312, v66, 1);
  v315 = v313 * v313 + v314 * v314;
  v316 = 1.0 / (v11 * v315 + 1.0 + v10 * (v315 * v315) + v12 * (v315 * (v315 * v315)));
  v317 = v316 * v66.f64[0];
  v318 = vmuld_lane_f64(v316, v66, 1);
  v319 = v317 * v317 + v318 * v318;
  v87 = vmulq_n_f64(v67, 1.0 / (v11 * v319 + 1.0 + v10 * (v319 * v319) + v12 * (v319 * (v319 * v319))));
  v88 = v87.f64[1];
  if (v87.f64[1] < *(double *)(result + 40))
LABEL_19:
    *(double *)(result + 40) = v88;
LABEL_20:
  if (v88 > *(double *)(result + 48))
  {
    *(double *)(result + 48) = v88;
    if (v87.f64[0] >= *(double *)(result + 56))
    {
LABEL_22:
      v89 = *(double *)(result + 16);
      if (v87.f64[0] <= *(double *)(result + 64))
        goto LABEL_24;
      goto LABEL_23;
    }
  }
  else if (v87.f64[0] >= *(double *)(result + 56))
  {
    goto LABEL_22;
  }
  *(float64_t *)(result + 56) = v87.f64[0];
  v89 = *(double *)(result + 16);
  if (v87.f64[0] > *(double *)(result + 64))
LABEL_23:
    *(float64_t *)(result + 64) = v87.f64[0];
LABEL_24:
  v90.f64[0] = _Q6.f64[0];
  v90.f64[1] = v89;
  v91 = vdivq_f64(vsubq_f64(v90, v1), v7);
  v92 = (float64x2_t)vextq_s8((int8x16_t)v91, (int8x16_t)v91, 8uLL);
  *(_QWORD *)&v93 = *(_OWORD *)&vmulq_f64(v91, v91);
  v94 = vmuld_lane_f64(v91.f64[1], v91, 1);
  if (v13)
  {
    *(double *)&v95 = v93 + v94;
    v96 = *(float64x2_t *)(result + 88);
    v97 = vaddq_f64(v96, v96);
    v98 = (float64x2_t)vextq_s8((int8x16_t)v97, (int8x16_t)v97, 8uLL);
    v99 = (float64x2_t)vextq_s8((int8x16_t)v96, (int8x16_t)v96, 8uLL);
    v100 = vmulq_n_f64(vsubq_f64(v91, vaddq_f64(vmulq_f64(vaddq_f64(vmulq_f64(v91, vaddq_f64(v91, v91)), (float64x2_t)vdupq_lane_s64(v95, 0)), v99), vmulq_n_f64(v97, vmuld_lane_f64(v91.f64[0], v91, 1)))), 1.0/ (v11 * *(double *)&v95+ 1.0+ v10 * (*(double *)&v95 * *(double *)&v95)+ v12 * (*(double *)&v95 * (*(double *)&v95 * *(double *)&v95))));
    *(double *)&v101 = vmulq_f64(v100, v100).f64[0] + vmuld_lane_f64(v100.f64[1], v100, 1);
    v102 = vmulq_n_f64(vsubq_f64(v91, vaddq_f64(vmulq_n_f64(v97, vmuld_lane_f64(v100.f64[0], v100, 1)), vmulq_f64(v99, vaddq_f64(vmulq_f64(v100, vaddq_f64(v100, v100)), (float64x2_t)vdupq_lane_s64(v101, 0))))), 1.0/ (v11 * *(double *)&v101+ 1.0+ v10 * (*(double *)&v101 * *(double *)&v101)+ v12 * (*(double *)&v101 * (*(double *)&v101 * *(double *)&v101))));
    v100.f64[0] = vmulq_f64(v102, v102).f64[0] + vmuld_lane_f64(v102.f64[1], v102, 1);
    v103 = vmuld_lane_f64(v102.f64[0], v102, 1);
    v104 = (int8x16_t)vmulq_f64(v102, vaddq_f64(v102, v102));
    v105 = vmulq_n_f64(vsubq_f64(v92, vaddq_f64(vmulq_n_f64(v98, v103), vmulq_f64(v96, vaddq_f64((float64x2_t)vextq_s8(v104, v104, 8uLL), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v100.f64[0], 0))))), 1.0/ (v11 * v100.f64[0]+ 1.0+ v10 * (v100.f64[0] * v100.f64[0])+ v12 * (v100.f64[0] * (v100.f64[0] * v100.f64[0]))));
    v100.f64[0] = vmuld_lane_f64(v105.f64[1], v105, 1) + vmulq_f64(v105, v105).f64[0];
    v106 = vmulq_n_f64(vsubq_f64(v92, vaddq_f64(vmulq_n_f64(v98, vmuld_lane_f64(v105.f64[0], v105, 1)), vmulq_f64(v96, vaddq_f64(vmulq_f64(v105, vaddq_f64(v105, v105)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v100.f64[0], 0))))), 1.0/ (v11 * v100.f64[0]+ 1.0+ v10 * (v100.f64[0] * v100.f64[0])+ v12 * (v100.f64[0] * (v100.f64[0] * v100.f64[0]))));
    v100.f64[0] = vmuld_lane_f64(v106.f64[1], v106, 1) + vmulq_f64(v106, v106).f64[0];
    v107 = vmulq_n_f64(vsubq_f64(v92, vaddq_f64(vmulq_n_f64(v98, vmuld_lane_f64(v106.f64[0], v106, 1)), vmulq_f64(v96, vaddq_f64(vmulq_f64(v106, vaddq_f64(v106, v106)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v100.f64[0], 0))))), 1.0/ (v11 * v100.f64[0]+ 1.0+ v10 * (v100.f64[0] * v100.f64[0])+ v12 * (v100.f64[0] * (v100.f64[0] * v100.f64[0]))));
    v100.f64[0] = vmuld_lane_f64(v107.f64[1], v107, 1) + vmulq_f64(v107, v107).f64[0];
    v108 = vmulq_n_f64(vsubq_f64(v92, vaddq_f64(vmulq_n_f64(v98, vmuld_lane_f64(v107.f64[0], v107, 1)), vmulq_f64(v96, vaddq_f64(vmulq_f64(v107, vaddq_f64(v107, v107)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v100.f64[0], 0))))), 1.0/ (v11 * v100.f64[0]+ 1.0+ v10 * (v100.f64[0] * v100.f64[0])+ v12 * (v100.f64[0] * (v100.f64[0] * v100.f64[0]))));
    v100.f64[0] = vmuld_lane_f64(v108.f64[1], v108, 1) + vmulq_f64(v108, v108).f64[0];
    v109 = vmulq_n_f64(vsubq_f64(v92, vaddq_f64(vmulq_n_f64(v98, vmuld_lane_f64(v108.f64[0], v108, 1)), vmulq_f64(v96, vaddq_f64(vmulq_f64(v108, vaddq_f64(v108, v108)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v100.f64[0], 0))))), 1.0/ (v11 * v100.f64[0]+ 1.0+ v10 * (v100.f64[0] * v100.f64[0])+ v12 * (v100.f64[0] * (v100.f64[0] * v100.f64[0]))));
    v100.f64[0] = vmuld_lane_f64(v109.f64[1], v109, 1) + vmulq_f64(v109, v109).f64[0];
    v110 = vmulq_n_f64(vsubq_f64(v92, vaddq_f64(vmulq_n_f64(v98, vmuld_lane_f64(v109.f64[0], v109, 1)), vmulq_f64(v96, vaddq_f64(vmulq_f64(v109, vaddq_f64(v109, v109)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v100.f64[0], 0))))), 1.0/ (v11 * v100.f64[0]+ 1.0+ v10 * (v100.f64[0] * v100.f64[0])+ v12 * (v100.f64[0] * (v100.f64[0] * v100.f64[0]))));
    v100.f64[0] = vmuld_lane_f64(v110.f64[1], v110, 1) + vmulq_f64(v110, v110).f64[0];
    v111 = vmulq_n_f64(vsubq_f64(v92, vaddq_f64(vmulq_n_f64(v98, vmuld_lane_f64(v110.f64[0], v110, 1)), vmulq_f64(v96, vaddq_f64(vmulq_f64(v110, vaddq_f64(v110, v110)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v100.f64[0], 0))))), 1.0/ (v11 * v100.f64[0]+ 1.0+ v10 * (v100.f64[0] * v100.f64[0])+ v12 * (v100.f64[0] * (v100.f64[0] * v100.f64[0]))));
    v100.f64[0] = vmuld_lane_f64(v111.f64[1], v111, 1) + vmulq_f64(v111, v111).f64[0];
    v112 = vmulq_n_f64(vsubq_f64(v92, vaddq_f64(vmulq_n_f64(v98, vmuld_lane_f64(v111.f64[0], v111, 1)), vmulq_f64(v96, vaddq_f64(vmulq_f64(v111, vaddq_f64(v111, v111)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v100.f64[0], 0))))), 1.0/ (v11 * v100.f64[0]+ 1.0+ v10 * (v100.f64[0] * v100.f64[0])+ v12 * (v100.f64[0] * (v100.f64[0] * v100.f64[0]))));
    v113 = v112.f64[1];
    if (v112.f64[1] >= *(double *)(result + 40))
      goto LABEL_27;
    goto LABEL_26;
  }
  v320 = 1.0
       / (v11 * (v93 + v94) + 1.0 + v10 * ((v93 + v94) * (v93 + v94)) + v12
                                                                      * ((v93 + v94)
                                                                       * ((v93 + v94)
                                                                        * (v93 + v94))));
  v321 = v320 * v91.f64[0];
  v322 = vmuld_lane_f64(v320, v91, 1);
  v323 = v321 * v321 + v322 * v322;
  v324 = 1.0 / (v11 * v323 + 1.0 + v10 * (v323 * v323) + v12 * (v323 * (v323 * v323)));
  v325 = v324 * v91.f64[0];
  v326 = vmuld_lane_f64(v324, v91, 1);
  v327 = v325 * v325 + v326 * v326;
  v328 = 1.0 / (v11 * v327 + 1.0 + v10 * (v327 * v327) + v12 * (v327 * (v327 * v327)));
  v329 = v328 * v91.f64[0];
  v330 = vmuld_lane_f64(v328, v91, 1);
  v331 = v329 * v329 + v330 * v330;
  v332 = 1.0 / (v11 * v331 + 1.0 + v10 * (v331 * v331) + v12 * (v331 * (v331 * v331)));
  v333 = v332 * v91.f64[0];
  v334 = vmuld_lane_f64(v332, v91, 1);
  v335 = v333 * v333 + v334 * v334;
  v336 = 1.0 / (v11 * v335 + 1.0 + v10 * (v335 * v335) + v12 * (v335 * (v335 * v335)));
  v337 = v336 * v91.f64[0];
  v338 = vmuld_lane_f64(v336, v91, 1);
  v339 = v337 * v337 + v338 * v338;
  v340 = 1.0 / (v11 * v339 + 1.0 + v10 * (v339 * v339) + v12 * (v339 * (v339 * v339)));
  v341 = v340 * v91.f64[0];
  v342 = vmuld_lane_f64(v340, v91, 1);
  v343 = v341 * v341 + v342 * v342;
  v344 = 1.0 / (v11 * v343 + 1.0 + v10 * (v343 * v343) + v12 * (v343 * (v343 * v343)));
  v345 = v344 * v91.f64[0];
  v346 = vmuld_lane_f64(v344, v91, 1);
  v347 = v345 * v345 + v346 * v346;
  v348 = 1.0 / (v11 * v347 + 1.0 + v10 * (v347 * v347) + v12 * (v347 * (v347 * v347)));
  v349 = v348 * v91.f64[0];
  v350 = vmuld_lane_f64(v348, v91, 1);
  v351 = v349 * v349 + v350 * v350;
  v352 = 1.0 / (v11 * v351 + 1.0 + v10 * (v351 * v351) + v12 * (v351 * (v351 * v351)));
  v353 = v352 * v91.f64[0];
  v354 = vmuld_lane_f64(v352, v91, 1);
  v355 = v353 * v353 + v354 * v354;
  v112 = vmulq_n_f64(v92, 1.0 / (v11 * v355 + 1.0 + v10 * (v355 * v355) + v12 * (v355 * (v355 * v355))));
  v113 = v112.f64[1];
  if (v112.f64[1] < *(double *)(result + 40))
LABEL_26:
    *(double *)(result + 40) = v113;
LABEL_27:
  if (v113 > *(double *)(result + 48))
  {
    *(double *)(result + 48) = v113;
    if (v112.f64[0] >= *(double *)(result + 56))
    {
LABEL_29:
      if (v112.f64[0] <= *(double *)(result + 64))
        goto LABEL_31;
      goto LABEL_30;
    }
  }
  else if (v112.f64[0] >= *(double *)(result + 56))
  {
    goto LABEL_29;
  }
  *(float64_t *)(result + 56) = v112.f64[0];
  if (v112.f64[0] > *(double *)(result + 64))
LABEL_30:
    *(float64_t *)(result + 64) = v112.f64[0];
LABEL_31:
  v114.f64[0] = v64.f64[0];
  v114.f64[1] = v89;
  v115 = vdivq_f64(vsubq_f64(v114, v1), v7);
  v116 = (float64x2_t)vextq_s8((int8x16_t)v115, (int8x16_t)v115, 8uLL);
  *(_QWORD *)&v117 = *(_OWORD *)&vmulq_f64(v115, v115);
  v118 = vmuld_lane_f64(v115.f64[1], v115, 1);
  if (v13)
  {
    *(double *)&v119 = v117 + v118;
    v120 = *(float64x2_t *)(result + 88);
    v121 = vaddq_f64(v120, v120);
    v122 = (float64x2_t)vextq_s8((int8x16_t)v121, (int8x16_t)v121, 8uLL);
    v123 = (float64x2_t)vextq_s8((int8x16_t)v120, (int8x16_t)v120, 8uLL);
    v124 = vmulq_n_f64(vsubq_f64(v115, vaddq_f64(vmulq_f64(vaddq_f64(vmulq_f64(v115, vaddq_f64(v115, v115)), (float64x2_t)vdupq_lane_s64(v119, 0)), v123), vmulq_n_f64(v121, vmuld_lane_f64(v115.f64[0], v115, 1)))), 1.0/ (v11 * *(double *)&v119+ 1.0+ v10 * (*(double *)&v119 * *(double *)&v119)+ v12 * (*(double *)&v119 * (*(double *)&v119 * *(double *)&v119))));
    *(double *)&v125 = vmulq_f64(v124, v124).f64[0] + vmuld_lane_f64(v124.f64[1], v124, 1);
    v126 = vmulq_n_f64(vsubq_f64(v115, vaddq_f64(vmulq_n_f64(v121, vmuld_lane_f64(v124.f64[0], v124, 1)), vmulq_f64(v123, vaddq_f64(vmulq_f64(v124, vaddq_f64(v124, v124)), (float64x2_t)vdupq_lane_s64(v125, 0))))), 1.0/ (v11 * *(double *)&v125+ 1.0+ v10 * (*(double *)&v125 * *(double *)&v125)+ v12 * (*(double *)&v125 * (*(double *)&v125 * *(double *)&v125))));
    v124.f64[0] = vmulq_f64(v126, v126).f64[0] + vmuld_lane_f64(v126.f64[1], v126, 1);
    v127 = vmuld_lane_f64(v126.f64[0], v126, 1);
    v128 = (int8x16_t)vmulq_f64(v126, vaddq_f64(v126, v126));
    v129 = vmulq_n_f64(vsubq_f64(v116, vaddq_f64(vmulq_n_f64(v122, v127), vmulq_f64(v120, vaddq_f64((float64x2_t)vextq_s8(v128, v128, 8uLL), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v124.f64[0], 0))))), 1.0/ (v11 * v124.f64[0]+ 1.0+ v10 * (v124.f64[0] * v124.f64[0])+ v12 * (v124.f64[0] * (v124.f64[0] * v124.f64[0]))));
    v124.f64[0] = vmuld_lane_f64(v129.f64[1], v129, 1) + vmulq_f64(v129, v129).f64[0];
    v130 = vmulq_n_f64(vsubq_f64(v116, vaddq_f64(vmulq_n_f64(v122, vmuld_lane_f64(v129.f64[0], v129, 1)), vmulq_f64(v120, vaddq_f64(vmulq_f64(v129, vaddq_f64(v129, v129)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v124.f64[0], 0))))), 1.0/ (v11 * v124.f64[0]+ 1.0+ v10 * (v124.f64[0] * v124.f64[0])+ v12 * (v124.f64[0] * (v124.f64[0] * v124.f64[0]))));
    v124.f64[0] = vmuld_lane_f64(v130.f64[1], v130, 1) + vmulq_f64(v130, v130).f64[0];
    v131 = vmulq_n_f64(vsubq_f64(v116, vaddq_f64(vmulq_n_f64(v122, vmuld_lane_f64(v130.f64[0], v130, 1)), vmulq_f64(v120, vaddq_f64(vmulq_f64(v130, vaddq_f64(v130, v130)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v124.f64[0], 0))))), 1.0/ (v11 * v124.f64[0]+ 1.0+ v10 * (v124.f64[0] * v124.f64[0])+ v12 * (v124.f64[0] * (v124.f64[0] * v124.f64[0]))));
    v124.f64[0] = vmuld_lane_f64(v131.f64[1], v131, 1) + vmulq_f64(v131, v131).f64[0];
    v132 = vmulq_n_f64(vsubq_f64(v116, vaddq_f64(vmulq_n_f64(v122, vmuld_lane_f64(v131.f64[0], v131, 1)), vmulq_f64(v120, vaddq_f64(vmulq_f64(v131, vaddq_f64(v131, v131)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v124.f64[0], 0))))), 1.0/ (v11 * v124.f64[0]+ 1.0+ v10 * (v124.f64[0] * v124.f64[0])+ v12 * (v124.f64[0] * (v124.f64[0] * v124.f64[0]))));
    v124.f64[0] = vmuld_lane_f64(v132.f64[1], v132, 1) + vmulq_f64(v132, v132).f64[0];
    v133 = vmulq_n_f64(vsubq_f64(v116, vaddq_f64(vmulq_n_f64(v122, vmuld_lane_f64(v132.f64[0], v132, 1)), vmulq_f64(v120, vaddq_f64(vmulq_f64(v132, vaddq_f64(v132, v132)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v124.f64[0], 0))))), 1.0/ (v11 * v124.f64[0]+ 1.0+ v10 * (v124.f64[0] * v124.f64[0])+ v12 * (v124.f64[0] * (v124.f64[0] * v124.f64[0]))));
    v124.f64[0] = vmuld_lane_f64(v133.f64[1], v133, 1) + vmulq_f64(v133, v133).f64[0];
    v134 = vmulq_n_f64(vsubq_f64(v116, vaddq_f64(vmulq_n_f64(v122, vmuld_lane_f64(v133.f64[0], v133, 1)), vmulq_f64(v120, vaddq_f64(vmulq_f64(v133, vaddq_f64(v133, v133)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v124.f64[0], 0))))), 1.0/ (v11 * v124.f64[0]+ 1.0+ v10 * (v124.f64[0] * v124.f64[0])+ v12 * (v124.f64[0] * (v124.f64[0] * v124.f64[0]))));
    v124.f64[0] = vmuld_lane_f64(v134.f64[1], v134, 1) + vmulq_f64(v134, v134).f64[0];
    v135 = vmulq_n_f64(vsubq_f64(v116, vaddq_f64(vmulq_n_f64(v122, vmuld_lane_f64(v134.f64[0], v134, 1)), vmulq_f64(v120, vaddq_f64(vmulq_f64(v134, vaddq_f64(v134, v134)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v124.f64[0], 0))))), 1.0/ (v11 * v124.f64[0]+ 1.0+ v10 * (v124.f64[0] * v124.f64[0])+ v12 * (v124.f64[0] * (v124.f64[0] * v124.f64[0]))));
    v124.f64[0] = vmuld_lane_f64(v135.f64[1], v135, 1) + vmulq_f64(v135, v135).f64[0];
    v137 = vaddq_f64(vmulq_n_f64(v122, vmuld_lane_f64(v135.f64[0], v135, 1)), vmulq_f64(v120, vaddq_f64(vmulq_f64(v135, vaddq_f64(v135, v135)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v124.f64[0], 0))));
    v136 = vsubq_f64(v116, v137);
    LODWORD(v137.f64[0]) = *(_DWORD *)(result + 4);
    v138 = vmulq_n_f64(v136, 1.0/ (v11 * v124.f64[0]+ 1.0+ v10 * (v124.f64[0] * v124.f64[0])+ v12 * (v124.f64[0] * (v124.f64[0] * v124.f64[0]))));
    v139 = v138.f64[1];
    if (v138.f64[1] >= *(double *)(result + 40))
      goto LABEL_34;
    goto LABEL_33;
  }
  v356 = 1.0
       / (v11 * (v117 + v118)
        + 1.0
        + v10 * ((v117 + v118) * (v117 + v118))
        + v12 * ((v117 + v118) * ((v117 + v118) * (v117 + v118))));
  v357 = v356 * v115.f64[0];
  v358 = vmuld_lane_f64(v356, v115, 1);
  v359 = v357 * v357 + v358 * v358;
  v360 = 1.0 / (v11 * v359 + 1.0 + v10 * (v359 * v359) + v12 * (v359 * (v359 * v359)));
  v361 = v360 * v115.f64[0];
  v362 = vmuld_lane_f64(v360, v115, 1);
  v363 = v361 * v361 + v362 * v362;
  v364 = 1.0 / (v11 * v363 + 1.0 + v10 * (v363 * v363) + v12 * (v363 * (v363 * v363)));
  v365 = v364 * v115.f64[0];
  v366 = vmuld_lane_f64(v364, v115, 1);
  v367 = v365 * v365 + v366 * v366;
  v368 = 1.0 / (v11 * v367 + 1.0 + v10 * (v367 * v367) + v12 * (v367 * (v367 * v367)));
  v369 = v368 * v115.f64[0];
  v370 = vmuld_lane_f64(v368, v115, 1);
  v371 = v369 * v369 + v370 * v370;
  v372 = 1.0 / (v11 * v371 + 1.0 + v10 * (v371 * v371) + v12 * (v371 * (v371 * v371)));
  v373 = v372 * v115.f64[0];
  v374 = vmuld_lane_f64(v372, v115, 1);
  v375 = v373 * v373 + v374 * v374;
  v376 = 1.0 / (v11 * v375 + 1.0 + v10 * (v375 * v375) + v12 * (v375 * (v375 * v375)));
  v377 = v376 * v115.f64[0];
  v378 = vmuld_lane_f64(v376, v115, 1);
  v379 = v377 * v377 + v378 * v378;
  v380 = 1.0 / (v11 * v379 + 1.0 + v10 * (v379 * v379) + v12 * (v379 * (v379 * v379)));
  v381 = v380 * v115.f64[0];
  v382 = vmuld_lane_f64(v380, v115, 1);
  v383 = v381 * v381 + v382 * v382;
  v384 = 1.0 / (v11 * v383 + 1.0 + v10 * (v383 * v383) + v12 * (v383 * (v383 * v383)));
  v385 = v384 * v115.f64[0];
  v386 = vmuld_lane_f64(v384, v115, 1);
  v387 = v385 * v385 + v386 * v386;
  v388 = 1.0 / (v11 * v387 + 1.0 + v10 * (v387 * v387) + v12 * (v387 * (v387 * v387)));
  v389 = v388 * v115.f64[0];
  v390 = vmuld_lane_f64(v388, v115, 1);
  v391 = v389 * v389 + v390 * v390;
  v137.f64[0] = v11 * v391 + 1.0 + v10 * (v391 * v391) + v12 * (v391 * (v391 * v391));
  v392 = 1.0 / v137.f64[0];
  LODWORD(v137.f64[0]) = *(_DWORD *)(result + 4);
  v138 = vmulq_n_f64(v116, v392);
  v139 = v138.f64[1];
  if (v138.f64[1] < *(double *)(result + 40))
LABEL_33:
    *(double *)(result + 40) = v139;
LABEL_34:
  if (v139 > *(double *)(result + 48))
  {
    *(double *)(result + 48) = v139;
    v140 = (double)*(unint64_t *)&v137.f64[0];
    if (v138.f64[0] >= *(double *)(result + 56))
    {
LABEL_36:
      v141 = v140 + v62;
      if (v138.f64[0] <= *(double *)(result + 64))
        goto LABEL_38;
      goto LABEL_37;
    }
  }
  else
  {
    v140 = (double)*(unint64_t *)&v137.f64[0];
    if (v138.f64[0] >= *(double *)(result + 56))
      goto LABEL_36;
  }
  *(float64_t *)(result + 56) = v138.f64[0];
  v141 = v140 + v62;
  if (v138.f64[0] > *(double *)(result + 64))
LABEL_37:
    *(float64_t *)(result + 64) = v138.f64[0];
LABEL_38:
  _Q6.f64[1] = v141;
  v142 = vdivq_f64(vsubq_f64(_Q6, v1), v7);
  v143 = (float64x2_t)vextq_s8((int8x16_t)v142, (int8x16_t)v142, 8uLL);
  *(_QWORD *)&v144 = *(_OWORD *)&vmulq_f64(v142, v142);
  v145 = vmuld_lane_f64(v142.f64[1], v142, 1);
  if (v13)
  {
    *(double *)&v146 = v144 + v145;
    v147 = *(float64x2_t *)(result + 88);
    v148 = vaddq_f64(v147, v147);
    v149 = (float64x2_t)vextq_s8((int8x16_t)v148, (int8x16_t)v148, 8uLL);
    v150 = (float64x2_t)vextq_s8((int8x16_t)v147, (int8x16_t)v147, 8uLL);
    v151 = vmulq_n_f64(vsubq_f64(v142, vaddq_f64(vmulq_f64(vaddq_f64(vmulq_f64(v142, vaddq_f64(v142, v142)), (float64x2_t)vdupq_lane_s64(v146, 0)), v150), vmulq_n_f64(v148, vmuld_lane_f64(v142.f64[0], v142, 1)))), 1.0/ (v11 * *(double *)&v146+ 1.0+ v10 * (*(double *)&v146 * *(double *)&v146)+ v12 * (*(double *)&v146 * (*(double *)&v146 * *(double *)&v146))));
    *(double *)&v152 = vmulq_f64(v151, v151).f64[0] + vmuld_lane_f64(v151.f64[1], v151, 1);
    v153 = vmulq_n_f64(vsubq_f64(v142, vaddq_f64(vmulq_n_f64(v148, vmuld_lane_f64(v151.f64[0], v151, 1)), vmulq_f64(v150, vaddq_f64(vmulq_f64(v151, vaddq_f64(v151, v151)), (float64x2_t)vdupq_lane_s64(v152, 0))))), 1.0/ (v11 * *(double *)&v152+ 1.0+ v10 * (*(double *)&v152 * *(double *)&v152)+ v12 * (*(double *)&v152 * (*(double *)&v152 * *(double *)&v152))));
    v151.f64[0] = vmulq_f64(v153, v153).f64[0] + vmuld_lane_f64(v153.f64[1], v153, 1);
    v154 = vmuld_lane_f64(v153.f64[0], v153, 1);
    v155 = (int8x16_t)vmulq_f64(v153, vaddq_f64(v153, v153));
    v156 = vmulq_n_f64(vsubq_f64(v143, vaddq_f64(vmulq_n_f64(v149, v154), vmulq_f64(v147, vaddq_f64((float64x2_t)vextq_s8(v155, v155, 8uLL), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v151.f64[0], 0))))), 1.0/ (v11 * v151.f64[0]+ 1.0+ v10 * (v151.f64[0] * v151.f64[0])+ v12 * (v151.f64[0] * (v151.f64[0] * v151.f64[0]))));
    v151.f64[0] = vmuld_lane_f64(v156.f64[1], v156, 1) + vmulq_f64(v156, v156).f64[0];
    v157 = vmulq_n_f64(vsubq_f64(v143, vaddq_f64(vmulq_n_f64(v149, vmuld_lane_f64(v156.f64[0], v156, 1)), vmulq_f64(v147, vaddq_f64(vmulq_f64(v156, vaddq_f64(v156, v156)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v151.f64[0], 0))))), 1.0/ (v11 * v151.f64[0]+ 1.0+ v10 * (v151.f64[0] * v151.f64[0])+ v12 * (v151.f64[0] * (v151.f64[0] * v151.f64[0]))));
    v151.f64[0] = vmuld_lane_f64(v157.f64[1], v157, 1) + vmulq_f64(v157, v157).f64[0];
    v158 = vmulq_n_f64(vsubq_f64(v143, vaddq_f64(vmulq_n_f64(v149, vmuld_lane_f64(v157.f64[0], v157, 1)), vmulq_f64(v147, vaddq_f64(vmulq_f64(v157, vaddq_f64(v157, v157)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v151.f64[0], 0))))), 1.0/ (v11 * v151.f64[0]+ 1.0+ v10 * (v151.f64[0] * v151.f64[0])+ v12 * (v151.f64[0] * (v151.f64[0] * v151.f64[0]))));
    v151.f64[0] = vmuld_lane_f64(v158.f64[1], v158, 1) + vmulq_f64(v158, v158).f64[0];
    v159 = vmulq_n_f64(vsubq_f64(v143, vaddq_f64(vmulq_n_f64(v149, vmuld_lane_f64(v158.f64[0], v158, 1)), vmulq_f64(v147, vaddq_f64(vmulq_f64(v158, vaddq_f64(v158, v158)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v151.f64[0], 0))))), 1.0/ (v11 * v151.f64[0]+ 1.0+ v10 * (v151.f64[0] * v151.f64[0])+ v12 * (v151.f64[0] * (v151.f64[0] * v151.f64[0]))));
    v151.f64[0] = vmuld_lane_f64(v159.f64[1], v159, 1) + vmulq_f64(v159, v159).f64[0];
    v160 = vmulq_n_f64(vsubq_f64(v143, vaddq_f64(vmulq_n_f64(v149, vmuld_lane_f64(v159.f64[0], v159, 1)), vmulq_f64(v147, vaddq_f64(vmulq_f64(v159, vaddq_f64(v159, v159)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v151.f64[0], 0))))), 1.0/ (v11 * v151.f64[0]+ 1.0+ v10 * (v151.f64[0] * v151.f64[0])+ v12 * (v151.f64[0] * (v151.f64[0] * v151.f64[0]))));
    v151.f64[0] = vmuld_lane_f64(v160.f64[1], v160, 1) + vmulq_f64(v160, v160).f64[0];
    v161 = vmulq_n_f64(vsubq_f64(v143, vaddq_f64(vmulq_n_f64(v149, vmuld_lane_f64(v160.f64[0], v160, 1)), vmulq_f64(v147, vaddq_f64(vmulq_f64(v160, vaddq_f64(v160, v160)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v151.f64[0], 0))))), 1.0/ (v11 * v151.f64[0]+ 1.0+ v10 * (v151.f64[0] * v151.f64[0])+ v12 * (v151.f64[0] * (v151.f64[0] * v151.f64[0]))));
    v151.f64[0] = vmuld_lane_f64(v161.f64[1], v161, 1) + vmulq_f64(v161, v161).f64[0];
    v162 = vmulq_n_f64(vsubq_f64(v143, vaddq_f64(vmulq_n_f64(v149, vmuld_lane_f64(v161.f64[0], v161, 1)), vmulq_f64(v147, vaddq_f64(vmulq_f64(v161, vaddq_f64(v161, v161)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v151.f64[0], 0))))), 1.0/ (v11 * v151.f64[0]+ 1.0+ v10 * (v151.f64[0] * v151.f64[0])+ v12 * (v151.f64[0] * (v151.f64[0] * v151.f64[0]))));
    v151.f64[0] = vmuld_lane_f64(v162.f64[1], v162, 1) + vmulq_f64(v162, v162).f64[0];
    v163 = vmulq_n_f64(vsubq_f64(v143, vaddq_f64(vmulq_n_f64(v149, vmuld_lane_f64(v162.f64[0], v162, 1)), vmulq_f64(v147, vaddq_f64(vmulq_f64(v162, vaddq_f64(v162, v162)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v151.f64[0], 0))))), 1.0/ (v11 * v151.f64[0]+ 1.0+ v10 * (v151.f64[0] * v151.f64[0])+ v12 * (v151.f64[0] * (v151.f64[0] * v151.f64[0]))));
    v164 = v163.f64[1];
    if (v163.f64[1] >= *(double *)(result + 40))
      goto LABEL_41;
    goto LABEL_40;
  }
  v393 = 1.0
       / (v11 * (v144 + v145)
        + 1.0
        + v10 * ((v144 + v145) * (v144 + v145))
        + v12 * ((v144 + v145) * ((v144 + v145) * (v144 + v145))));
  v394 = v393 * v142.f64[0];
  v395 = vmuld_lane_f64(v393, v142, 1);
  v396 = v394 * v394 + v395 * v395;
  v397 = 1.0 / (v11 * v396 + 1.0 + v10 * (v396 * v396) + v12 * (v396 * (v396 * v396)));
  v398 = v397 * v142.f64[0];
  v399 = vmuld_lane_f64(v397, v142, 1);
  v400 = v398 * v398 + v399 * v399;
  v401 = 1.0 / (v11 * v400 + 1.0 + v10 * (v400 * v400) + v12 * (v400 * (v400 * v400)));
  v402 = v401 * v142.f64[0];
  v403 = vmuld_lane_f64(v401, v142, 1);
  v404 = v402 * v402 + v403 * v403;
  v405 = 1.0 / (v11 * v404 + 1.0 + v10 * (v404 * v404) + v12 * (v404 * (v404 * v404)));
  v406 = v405 * v142.f64[0];
  v407 = vmuld_lane_f64(v405, v142, 1);
  v408 = v406 * v406 + v407 * v407;
  v409 = 1.0 / (v11 * v408 + 1.0 + v10 * (v408 * v408) + v12 * (v408 * (v408 * v408)));
  v410 = v409 * v142.f64[0];
  v411 = vmuld_lane_f64(v409, v142, 1);
  v412 = v410 * v410 + v411 * v411;
  v413 = 1.0 / (v11 * v412 + 1.0 + v10 * (v412 * v412) + v12 * (v412 * (v412 * v412)));
  v414 = v413 * v142.f64[0];
  v415 = vmuld_lane_f64(v413, v142, 1);
  v416 = v414 * v414 + v415 * v415;
  v417 = 1.0 / (v11 * v416 + 1.0 + v10 * (v416 * v416) + v12 * (v416 * (v416 * v416)));
  v418 = v417 * v142.f64[0];
  v419 = vmuld_lane_f64(v417, v142, 1);
  v420 = v418 * v418 + v419 * v419;
  v421 = 1.0 / (v11 * v420 + 1.0 + v10 * (v420 * v420) + v12 * (v420 * (v420 * v420)));
  v422 = v421 * v142.f64[0];
  v423 = vmuld_lane_f64(v421, v142, 1);
  v424 = v422 * v422 + v423 * v423;
  v425 = 1.0 / (v11 * v424 + 1.0 + v10 * (v424 * v424) + v12 * (v424 * (v424 * v424)));
  v426 = v425 * v142.f64[0];
  v427 = vmuld_lane_f64(v425, v142, 1);
  v428 = v426 * v426 + v427 * v427;
  v163 = vmulq_n_f64(v143, 1.0 / (v11 * v428 + 1.0 + v10 * (v428 * v428) + v12 * (v428 * (v428 * v428))));
  v164 = v163.f64[1];
  if (v163.f64[1] < *(double *)(result + 40))
LABEL_40:
    *(double *)(result + 40) = v164;
LABEL_41:
  if (v164 > *(double *)(result + 48))
  {
    *(double *)(result + 48) = v164;
    if (v163.f64[0] >= *(double *)(result + 56))
    {
LABEL_43:
      if (v163.f64[0] <= *(double *)(result + 64))
        goto LABEL_45;
      goto LABEL_44;
    }
  }
  else if (v163.f64[0] >= *(double *)(result + 56))
  {
    goto LABEL_43;
  }
  *(float64_t *)(result + 56) = v163.f64[0];
  if (v163.f64[0] > *(double *)(result + 64))
LABEL_44:
    *(float64_t *)(result + 64) = v163.f64[0];
LABEL_45:
  v35.f64[1] = v141;
  v165 = vdivq_f64(vsubq_f64(v35, v1), v7);
  v166 = (float64x2_t)vextq_s8((int8x16_t)v165, (int8x16_t)v165, 8uLL);
  *(_QWORD *)&v167 = *(_OWORD *)&vmulq_f64(v165, v165);
  v168 = vmuld_lane_f64(v165.f64[1], v165, 1);
  if (v13)
  {
    *(double *)&v169 = v167 + v168;
    v170 = *(float64x2_t *)(result + 88);
    v171 = vaddq_f64(v170, v170);
    v172 = (float64x2_t)vextq_s8((int8x16_t)v171, (int8x16_t)v171, 8uLL);
    v173 = (float64x2_t)vextq_s8((int8x16_t)v170, (int8x16_t)v170, 8uLL);
    v174 = vmulq_n_f64(vsubq_f64(v165, vaddq_f64(vmulq_f64(vaddq_f64(vmulq_f64(v165, vaddq_f64(v165, v165)), (float64x2_t)vdupq_lane_s64(v169, 0)), v173), vmulq_n_f64(v171, vmuld_lane_f64(v165.f64[0], v165, 1)))), 1.0/ (v11 * *(double *)&v169+ 1.0+ v10 * (*(double *)&v169 * *(double *)&v169)+ v12 * (*(double *)&v169 * (*(double *)&v169 * *(double *)&v169))));
    *(double *)&v175 = vmulq_f64(v174, v174).f64[0] + vmuld_lane_f64(v174.f64[1], v174, 1);
    v176 = vmulq_n_f64(vsubq_f64(v165, vaddq_f64(vmulq_n_f64(v171, vmuld_lane_f64(v174.f64[0], v174, 1)), vmulq_f64(v173, vaddq_f64(vmulq_f64(v174, vaddq_f64(v174, v174)), (float64x2_t)vdupq_lane_s64(v175, 0))))), 1.0/ (v11 * *(double *)&v175+ 1.0+ v10 * (*(double *)&v175 * *(double *)&v175)+ v12 * (*(double *)&v175 * (*(double *)&v175 * *(double *)&v175))));
    v174.f64[0] = vmulq_f64(v176, v176).f64[0] + vmuld_lane_f64(v176.f64[1], v176, 1);
    v177 = vmuld_lane_f64(v176.f64[0], v176, 1);
    v178 = (int8x16_t)vmulq_f64(v176, vaddq_f64(v176, v176));
    v179 = vmulq_n_f64(vsubq_f64(v166, vaddq_f64(vmulq_n_f64(v172, v177), vmulq_f64(v170, vaddq_f64((float64x2_t)vextq_s8(v178, v178, 8uLL), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v174.f64[0], 0))))), 1.0/ (v11 * v174.f64[0]+ 1.0+ v10 * (v174.f64[0] * v174.f64[0])+ v12 * (v174.f64[0] * (v174.f64[0] * v174.f64[0]))));
    v174.f64[0] = vmuld_lane_f64(v179.f64[1], v179, 1) + vmulq_f64(v179, v179).f64[0];
    v180 = vmulq_n_f64(vsubq_f64(v166, vaddq_f64(vmulq_n_f64(v172, vmuld_lane_f64(v179.f64[0], v179, 1)), vmulq_f64(v170, vaddq_f64(vmulq_f64(v179, vaddq_f64(v179, v179)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v174.f64[0], 0))))), 1.0/ (v11 * v174.f64[0]+ 1.0+ v10 * (v174.f64[0] * v174.f64[0])+ v12 * (v174.f64[0] * (v174.f64[0] * v174.f64[0]))));
    v174.f64[0] = vmuld_lane_f64(v180.f64[1], v180, 1) + vmulq_f64(v180, v180).f64[0];
    v181 = vmulq_n_f64(vsubq_f64(v166, vaddq_f64(vmulq_n_f64(v172, vmuld_lane_f64(v180.f64[0], v180, 1)), vmulq_f64(v170, vaddq_f64(vmulq_f64(v180, vaddq_f64(v180, v180)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v174.f64[0], 0))))), 1.0/ (v11 * v174.f64[0]+ 1.0+ v10 * (v174.f64[0] * v174.f64[0])+ v12 * (v174.f64[0] * (v174.f64[0] * v174.f64[0]))));
    v174.f64[0] = vmuld_lane_f64(v181.f64[1], v181, 1) + vmulq_f64(v181, v181).f64[0];
    v182 = vmulq_n_f64(vsubq_f64(v166, vaddq_f64(vmulq_n_f64(v172, vmuld_lane_f64(v181.f64[0], v181, 1)), vmulq_f64(v170, vaddq_f64(vmulq_f64(v181, vaddq_f64(v181, v181)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v174.f64[0], 0))))), 1.0/ (v11 * v174.f64[0]+ 1.0+ v10 * (v174.f64[0] * v174.f64[0])+ v12 * (v174.f64[0] * (v174.f64[0] * v174.f64[0]))));
    v174.f64[0] = vmuld_lane_f64(v182.f64[1], v182, 1) + vmulq_f64(v182, v182).f64[0];
    v183 = vmulq_n_f64(vsubq_f64(v166, vaddq_f64(vmulq_n_f64(v172, vmuld_lane_f64(v182.f64[0], v182, 1)), vmulq_f64(v170, vaddq_f64(vmulq_f64(v182, vaddq_f64(v182, v182)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v174.f64[0], 0))))), 1.0/ (v11 * v174.f64[0]+ 1.0+ v10 * (v174.f64[0] * v174.f64[0])+ v12 * (v174.f64[0] * (v174.f64[0] * v174.f64[0]))));
    v174.f64[0] = vmuld_lane_f64(v183.f64[1], v183, 1) + vmulq_f64(v183, v183).f64[0];
    v184 = vmulq_n_f64(vsubq_f64(v166, vaddq_f64(vmulq_n_f64(v172, vmuld_lane_f64(v183.f64[0], v183, 1)), vmulq_f64(v170, vaddq_f64(vmulq_f64(v183, vaddq_f64(v183, v183)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v174.f64[0], 0))))), 1.0/ (v11 * v174.f64[0]+ 1.0+ v10 * (v174.f64[0] * v174.f64[0])+ v12 * (v174.f64[0] * (v174.f64[0] * v174.f64[0]))));
    v174.f64[0] = vmuld_lane_f64(v184.f64[1], v184, 1) + vmulq_f64(v184, v184).f64[0];
    v185 = vmulq_n_f64(vsubq_f64(v166, vaddq_f64(vmulq_n_f64(v172, vmuld_lane_f64(v184.f64[0], v184, 1)), vmulq_f64(v170, vaddq_f64(vmulq_f64(v184, vaddq_f64(v184, v184)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v174.f64[0], 0))))), 1.0/ (v11 * v174.f64[0]+ 1.0+ v10 * (v174.f64[0] * v174.f64[0])+ v12 * (v174.f64[0] * (v174.f64[0] * v174.f64[0]))));
    v174.f64[0] = vmuld_lane_f64(v185.f64[1], v185, 1) + vmulq_f64(v185, v185).f64[0];
    v186 = vmulq_n_f64(vsubq_f64(v166, vaddq_f64(vmulq_n_f64(v172, vmuld_lane_f64(v185.f64[0], v185, 1)), vmulq_f64(v170, vaddq_f64(vmulq_f64(v185, vaddq_f64(v185, v185)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v174.f64[0], 0))))), 1.0/ (v11 * v174.f64[0]+ 1.0+ v10 * (v174.f64[0] * v174.f64[0])+ v12 * (v174.f64[0] * (v174.f64[0] * v174.f64[0]))));
    v187 = v186.f64[1];
    if (v186.f64[1] >= *(double *)(result + 40))
      goto LABEL_48;
    goto LABEL_47;
  }
  v429 = 1.0
       / (v11 * (v167 + v168)
        + 1.0
        + v10 * ((v167 + v168) * (v167 + v168))
        + v12 * ((v167 + v168) * ((v167 + v168) * (v167 + v168))));
  v430 = v429 * v165.f64[0];
  v431 = vmuld_lane_f64(v429, v165, 1);
  v432 = v430 * v430 + v431 * v431;
  v433 = 1.0 / (v11 * v432 + 1.0 + v10 * (v432 * v432) + v12 * (v432 * (v432 * v432)));
  v434 = v433 * v165.f64[0];
  v435 = vmuld_lane_f64(v433, v165, 1);
  v436 = v434 * v434 + v435 * v435;
  v437 = 1.0 / (v11 * v436 + 1.0 + v10 * (v436 * v436) + v12 * (v436 * (v436 * v436)));
  v438 = v437 * v165.f64[0];
  v439 = vmuld_lane_f64(v437, v165, 1);
  v440 = v438 * v438 + v439 * v439;
  v441 = 1.0 / (v11 * v440 + 1.0 + v10 * (v440 * v440) + v12 * (v440 * (v440 * v440)));
  v442 = v441 * v165.f64[0];
  v443 = vmuld_lane_f64(v441, v165, 1);
  v444 = v442 * v442 + v443 * v443;
  v445 = 1.0 / (v11 * v444 + 1.0 + v10 * (v444 * v444) + v12 * (v444 * (v444 * v444)));
  v446 = v445 * v165.f64[0];
  v447 = vmuld_lane_f64(v445, v165, 1);
  v448 = v446 * v446 + v447 * v447;
  v449 = 1.0 / (v11 * v448 + 1.0 + v10 * (v448 * v448) + v12 * (v448 * (v448 * v448)));
  v450 = v449 * v165.f64[0];
  v451 = vmuld_lane_f64(v449, v165, 1);
  v452 = v450 * v450 + v451 * v451;
  v453 = 1.0 / (v11 * v452 + 1.0 + v10 * (v452 * v452) + v12 * (v452 * (v452 * v452)));
  v454 = v453 * v165.f64[0];
  v455 = vmuld_lane_f64(v453, v165, 1);
  v456 = v454 * v454 + v455 * v455;
  v457 = 1.0 / (v11 * v456 + 1.0 + v10 * (v456 * v456) + v12 * (v456 * (v456 * v456)));
  v458 = v457 * v165.f64[0];
  v459 = vmuld_lane_f64(v457, v165, 1);
  v460 = v458 * v458 + v459 * v459;
  v461 = 1.0 / (v11 * v460 + 1.0 + v10 * (v460 * v460) + v12 * (v460 * (v460 * v460)));
  v462 = v461 * v165.f64[0];
  v463 = vmuld_lane_f64(v461, v165, 1);
  v464 = v462 * v462 + v463 * v463;
  v186 = vmulq_n_f64(v166, 1.0 / (v11 * v464 + 1.0 + v10 * (v464 * v464) + v12 * (v464 * (v464 * v464))));
  v187 = v186.f64[1];
  if (v186.f64[1] < *(double *)(result + 40))
LABEL_47:
    *(double *)(result + 40) = v187;
LABEL_48:
  if (v187 > *(double *)(result + 48))
  {
    *(double *)(result + 48) = v187;
    if (v186.f64[0] >= *(double *)(result + 56))
    {
LABEL_50:
      if (v186.f64[0] <= *(double *)(result + 64))
        goto LABEL_52;
      goto LABEL_51;
    }
  }
  else if (v186.f64[0] >= *(double *)(result + 56))
  {
    goto LABEL_50;
  }
  *(float64_t *)(result + 56) = v186.f64[0];
  if (v186.f64[0] > *(double *)(result + 64))
LABEL_51:
    *(float64_t *)(result + 64) = v186.f64[0];
LABEL_52:
  v64.f64[1] = v141;
  v188 = vdivq_f64(vsubq_f64(v64, v1), v7);
  v189 = (float64x2_t)vextq_s8((int8x16_t)v188, (int8x16_t)v188, 8uLL);
  *(_QWORD *)&v190 = *(_OWORD *)&vmulq_f64(v188, v188);
  v191 = vmuld_lane_f64(v188.f64[1], v188, 1);
  if (!v13)
  {
    v465 = 1.0
         / (v11 * (v190 + v191)
          + 1.0
          + v10 * ((v190 + v191) * (v190 + v191))
          + v12 * ((v190 + v191) * ((v190 + v191) * (v190 + v191))));
    v466 = v465 * v188.f64[0];
    v467 = vmuld_lane_f64(v465, v188, 1);
    v468 = v466 * v466 + v467 * v467;
    v469 = 1.0 / (v11 * v468 + 1.0 + v10 * (v468 * v468) + v12 * (v468 * (v468 * v468)));
    v470 = v469 * v188.f64[0];
    v471 = vmuld_lane_f64(v469, v188, 1);
    v472 = v470 * v470 + v471 * v471;
    v473 = 1.0 / (v11 * v472 + 1.0 + v10 * (v472 * v472) + v12 * (v472 * (v472 * v472)));
    v474 = v473 * v188.f64[0];
    v475 = vmuld_lane_f64(v473, v188, 1);
    v476 = v474 * v474 + v475 * v475;
    v477 = 1.0 / (v11 * v476 + 1.0 + v10 * (v476 * v476) + v12 * (v476 * (v476 * v476)));
    v478 = v477 * v188.f64[0];
    v479 = vmuld_lane_f64(v477, v188, 1);
    v480 = v478 * v478 + v479 * v479;
    v481 = 1.0 / (v11 * v480 + 1.0 + v10 * (v480 * v480) + v12 * (v480 * (v480 * v480)));
    v482 = v481 * v188.f64[0];
    v483 = vmuld_lane_f64(v481, v188, 1);
    v484 = v482 * v482 + v483 * v483;
    v485 = 1.0 / (v11 * v484 + 1.0 + v10 * (v484 * v484) + v12 * (v484 * (v484 * v484)));
    v486 = v485 * v188.f64[0];
    v487 = vmuld_lane_f64(v485, v188, 1);
    v488 = v486 * v486 + v487 * v487;
    v489 = 1.0 / (v11 * v488 + 1.0 + v10 * (v488 * v488) + v12 * (v488 * (v488 * v488)));
    v490 = v489 * v188.f64[0];
    v491 = vmuld_lane_f64(v489, v188, 1);
    v492 = v490 * v490 + v491 * v491;
    v493 = 1.0 / (v11 * v492 + 1.0 + v10 * (v492 * v492) + v12 * (v492 * (v492 * v492)));
    v494 = v493 * v188.f64[0];
    v495 = vmuld_lane_f64(v493, v188, 1);
    v496 = v494 * v494 + v495 * v495;
    v497 = 1.0 / (v11 * v496 + 1.0 + v10 * (v496 * v496) + v12 * (v496 * (v496 * v496)));
    v498 = v497 * v188.f64[0];
    v499 = vmuld_lane_f64(v497, v188, 1);
    v500 = v498 * v498 + v499 * v499;
    v209 = vmulq_n_f64(v189, 1.0 / (v11 * v500 + 1.0 + v10 * (v500 * v500) + v12 * (v500 * (v500 * v500))));
    v210 = v209.f64[1];
    if (v209.f64[1] >= *(double *)(result + 40))
      goto LABEL_55;
    goto LABEL_54;
  }
  *(double *)&v192 = v190 + v191;
  v193 = *(float64x2_t *)(result + 88);
  v194 = vaddq_f64(v193, v193);
  v195 = (float64x2_t)vextq_s8((int8x16_t)v194, (int8x16_t)v194, 8uLL);
  v196 = (float64x2_t)vextq_s8((int8x16_t)v193, (int8x16_t)v193, 8uLL);
  v197 = vmulq_n_f64(vsubq_f64(v188, vaddq_f64(vmulq_f64(vaddq_f64(vmulq_f64(v188, vaddq_f64(v188, v188)), (float64x2_t)vdupq_lane_s64(v192, 0)), v196), vmulq_n_f64(v194, vmuld_lane_f64(v188.f64[0], v188, 1)))), 1.0/ (v11 * *(double *)&v192+ 1.0+ v10 * (*(double *)&v192 * *(double *)&v192)+ v12 * (*(double *)&v192 * (*(double *)&v192 * *(double *)&v192))));
  *(double *)&v198 = vmulq_f64(v197, v197).f64[0] + vmuld_lane_f64(v197.f64[1], v197, 1);
  v199 = vmulq_n_f64(vsubq_f64(v188, vaddq_f64(vmulq_n_f64(v194, vmuld_lane_f64(v197.f64[0], v197, 1)), vmulq_f64(v196, vaddq_f64(vmulq_f64(v197, vaddq_f64(v197, v197)), (float64x2_t)vdupq_lane_s64(v198, 0))))), 1.0/ (v11 * *(double *)&v198+ 1.0+ v10 * (*(double *)&v198 * *(double *)&v198)+ v12 * (*(double *)&v198 * (*(double *)&v198 * *(double *)&v198))));
  v197.f64[0] = vmulq_f64(v199, v199).f64[0] + vmuld_lane_f64(v199.f64[1], v199, 1);
  v200 = vmuld_lane_f64(v199.f64[0], v199, 1);
  v201 = (int8x16_t)vmulq_f64(v199, vaddq_f64(v199, v199));
  v202 = vmulq_n_f64(vsubq_f64(v189, vaddq_f64(vmulq_n_f64(v195, v200), vmulq_f64(v193, vaddq_f64((float64x2_t)vextq_s8(v201, v201, 8uLL), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v197.f64[0], 0))))), 1.0/ (v11 * v197.f64[0]+ 1.0+ v10 * (v197.f64[0] * v197.f64[0])+ v12 * (v197.f64[0] * (v197.f64[0] * v197.f64[0]))));
  v197.f64[0] = vmuld_lane_f64(v202.f64[1], v202, 1) + vmulq_f64(v202, v202).f64[0];
  v203 = vmulq_n_f64(vsubq_f64(v189, vaddq_f64(vmulq_n_f64(v195, vmuld_lane_f64(v202.f64[0], v202, 1)), vmulq_f64(v193, vaddq_f64(vmulq_f64(v202, vaddq_f64(v202, v202)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v197.f64[0], 0))))), 1.0/ (v11 * v197.f64[0]+ 1.0+ v10 * (v197.f64[0] * v197.f64[0])+ v12 * (v197.f64[0] * (v197.f64[0] * v197.f64[0]))));
  v197.f64[0] = vmuld_lane_f64(v203.f64[1], v203, 1) + vmulq_f64(v203, v203).f64[0];
  v204 = vmulq_n_f64(vsubq_f64(v189, vaddq_f64(vmulq_n_f64(v195, vmuld_lane_f64(v203.f64[0], v203, 1)), vmulq_f64(v193, vaddq_f64(vmulq_f64(v203, vaddq_f64(v203, v203)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v197.f64[0], 0))))), 1.0/ (v11 * v197.f64[0]+ 1.0+ v10 * (v197.f64[0] * v197.f64[0])+ v12 * (v197.f64[0] * (v197.f64[0] * v197.f64[0]))));
  v197.f64[0] = vmuld_lane_f64(v204.f64[1], v204, 1) + vmulq_f64(v204, v204).f64[0];
  v205 = vmulq_n_f64(vsubq_f64(v189, vaddq_f64(vmulq_n_f64(v195, vmuld_lane_f64(v204.f64[0], v204, 1)), vmulq_f64(v193, vaddq_f64(vmulq_f64(v204, vaddq_f64(v204, v204)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v197.f64[0], 0))))), 1.0/ (v11 * v197.f64[0]+ 1.0+ v10 * (v197.f64[0] * v197.f64[0])+ v12 * (v197.f64[0] * (v197.f64[0] * v197.f64[0]))));
  v197.f64[0] = vmuld_lane_f64(v205.f64[1], v205, 1) + vmulq_f64(v205, v205).f64[0];
  v206 = vmulq_n_f64(vsubq_f64(v189, vaddq_f64(vmulq_n_f64(v195, vmuld_lane_f64(v205.f64[0], v205, 1)), vmulq_f64(v193, vaddq_f64(vmulq_f64(v205, vaddq_f64(v205, v205)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v197.f64[0], 0))))), 1.0/ (v11 * v197.f64[0]+ 1.0+ v10 * (v197.f64[0] * v197.f64[0])+ v12 * (v197.f64[0] * (v197.f64[0] * v197.f64[0]))));
  v197.f64[0] = vmuld_lane_f64(v206.f64[1], v206, 1) + vmulq_f64(v206, v206).f64[0];
  v207 = vmulq_n_f64(vsubq_f64(v189, vaddq_f64(vmulq_n_f64(v195, vmuld_lane_f64(v206.f64[0], v206, 1)), vmulq_f64(v193, vaddq_f64(vmulq_f64(v206, vaddq_f64(v206, v206)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v197.f64[0], 0))))), 1.0/ (v11 * v197.f64[0]+ 1.0+ v10 * (v197.f64[0] * v197.f64[0])+ v12 * (v197.f64[0] * (v197.f64[0] * v197.f64[0]))));
  v197.f64[0] = vmuld_lane_f64(v207.f64[1], v207, 1) + vmulq_f64(v207, v207).f64[0];
  v208 = vmulq_n_f64(vsubq_f64(v189, vaddq_f64(vmulq_n_f64(v195, vmuld_lane_f64(v207.f64[0], v207, 1)), vmulq_f64(v193, vaddq_f64(vmulq_f64(v207, vaddq_f64(v207, v207)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v197.f64[0], 0))))), 1.0/ (v11 * v197.f64[0]+ 1.0+ v10 * (v197.f64[0] * v197.f64[0])+ v12 * (v197.f64[0] * (v197.f64[0] * v197.f64[0]))));
  v197.f64[0] = vmuld_lane_f64(v208.f64[1], v208, 1) + vmulq_f64(v208, v208).f64[0];
  v209 = vmulq_n_f64(vsubq_f64(v189, vaddq_f64(vmulq_n_f64(v195, vmuld_lane_f64(v208.f64[0], v208, 1)), vmulq_f64(v193, vaddq_f64(vmulq_f64(v208, vaddq_f64(v208, v208)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v197.f64[0], 0))))), 1.0/ (v11 * v197.f64[0]+ 1.0+ v10 * (v197.f64[0] * v197.f64[0])+ v12 * (v197.f64[0] * (v197.f64[0] * v197.f64[0]))));
  v210 = v209.f64[1];
  if (v209.f64[1] < *(double *)(result + 40))
LABEL_54:
    *(double *)(result + 40) = v210;
LABEL_55:
  if (v210 > *(double *)(result + 48))
  {
    *(double *)(result + 48) = v210;
    if (v209.f64[0] >= *(double *)(result + 56))
    {
LABEL_57:
      if (v209.f64[0] <= *(double *)(result + 64))
        return result;
      goto LABEL_58;
    }
  }
  else if (v209.f64[0] >= *(double *)(result + 56))
  {
    goto LABEL_57;
  }
  *(float64_t *)(result + 56) = v209.f64[0];
  if (v209.f64[0] > *(double *)(result + 64))
LABEL_58:
    *(float64_t *)(result + 64) = v209.f64[0];
  return result;
}

_QWORD *sub_20EB5F72C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_24C9C5008;
  v2 = a1[34];
  a1[34] = 0;
  if (v2)
    MEMORY[0x212BC6398](v2, 0x1000C40FF89C88ELL);
  v3 = a1[33];
  a1[33] = 0;
  if (v3)
    MEMORY[0x212BC6398](v3, 0x1000C40504FFAC1);
  v4 = a1[32];
  a1[32] = 0;
  if (v4)
    MEMORY[0x212BC6398](v4, 0x1000C40FF89C88ELL);
  return a1;
}

void sub_20EB5F7B8(uint64_t *a1@<X0>, unint64_t a2@<X1>, char **a3@<X8>)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;

  v5 = 0;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v7 = *a1;
  v6 = a1[1];
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((v6 - *a1) >> 3);
  v9 = v8 / a2 + 1;
  if (v8 / a2 != -1)
  {
    if (v9 >> 60)
      sub_20E867F44();
    v5 = (char *)operator new(16 * v9);
    *a3 = v5;
    a3[1] = v5;
    a3[2] = &v5[16 * v9];
  }
  if (v6 != v7)
  {
    v10 = v7 + 40 * v8;
    do
    {
      while (1)
      {
        v11 = v7;
        v12 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - v7) >> 3);
        if (v12 >= a2)
          v12 = a2;
        v7 += 40 * v12;
        v13 = (unint64_t)a3[2];
        if ((unint64_t)v5 >= v13)
          break;
        *(_QWORD *)v5 = v11;
        *((_QWORD *)v5 + 1) = v7;
        v5 += 16;
        a3[1] = v5;
        if (v7 == v10)
          return;
      }
      v14 = *a3;
      v15 = (v5 - *a3) >> 4;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 60)
        sub_20E867F44();
      v17 = v13 - (_QWORD)v14;
      if (v17 >> 3 > v16)
        v16 = v17 >> 3;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
        v18 = 0xFFFFFFFFFFFFFFFLL;
      else
        v18 = v16;
      if (v18 >> 60)
        sub_20E877A38();
      v19 = (char *)operator new(16 * v18);
      v20 = &v19[16 * v15];
      *(_QWORD *)v20 = v11;
      *((_QWORD *)v20 + 1) = v7;
      if (v5 == v14)
      {
        v5 = v20 + 16;
        *a3 = v20;
        a3[1] = v20 + 16;
        a3[2] = &v19[16 * v18];
        if (!v14)
          goto LABEL_22;
      }
      else
      {
        v21 = &v19[16 * v15];
        do
        {
          v22 = v21 - 16;
          *((_OWORD *)v21 - 1) = *((_OWORD *)v5 - 1);
          v5 -= 16;
          v21 -= 16;
        }
        while (v5 != v14);
        v5 = v20 + 16;
        *a3 = v22;
        a3[1] = v20 + 16;
        a3[2] = &v19[16 * v18];
        if (!v14)
          goto LABEL_22;
      }
      operator delete(v14);
LABEL_22:
      a3[1] = v5;
    }
    while (v7 != v10);
  }
}

void sub_20EB5F98C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EB5F9B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v3;
  double v4;
  double v5;
  __int128 *v6;
  __int128 *v7;
  __int128 *v8;
  __int128 *v9;
  __int128 *v10;
  __int128 *v11;
  __int128 *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t result;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  double v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;

  v3 = *(double *)a2;
  v4 = *(double *)a1;
  v5 = *(double *)a3;
  if (*(double *)a2 >= *(double *)a1)
  {
    if (v5 >= v3)
      return 0;
    v78 = *(_OWORD *)(a2 + 72);
    v83 = *(_OWORD *)(a2 + 88);
    v88 = *(_QWORD *)(a2 + 104);
    v58 = *(_OWORD *)(a2 + 8);
    v63 = *(_OWORD *)(a2 + 24);
    v68 = *(_OWORD *)(a2 + 40);
    v73 = *(_OWORD *)(a2 + 56);
    v133 = *(_OWORD *)(a2 + 112);
    v128 = *(_QWORD *)(a2 + 144);
    v118 = *(_OWORD *)(a2 + 152);
    v123 = *(_OWORD *)(a2 + 128);
    v113 = *(_QWORD *)(a2 + 184);
    v108 = *(_OWORD *)(a2 + 168);
    v103 = *(_OWORD *)(a2 + 192);
    v98 = *(_QWORD *)(a2 + 224);
    v93 = *(_OWORD *)(a2 + 208);
    *(double *)a2 = v5;
    v24 = *(_OWORD *)(a3 + 8);
    v25 = *(_OWORD *)(a3 + 24);
    *(_OWORD *)(a2 + 40) = *(_OWORD *)(a3 + 40);
    *(_OWORD *)(a2 + 24) = v25;
    *(_OWORD *)(a2 + 8) = v24;
    v26 = *(_OWORD *)(a3 + 56);
    v27 = *(_OWORD *)(a3 + 72);
    v28 = *(_OWORD *)(a3 + 88);
    *(_QWORD *)(a2 + 104) = *(_QWORD *)(a3 + 104);
    *(_OWORD *)(a2 + 88) = v28;
    *(_OWORD *)(a2 + 72) = v27;
    *(_OWORD *)(a2 + 56) = v26;
    *(_OWORD *)(a2 + 112) = *(_OWORD *)(a3 + 112);
    v29 = *(_OWORD *)(a3 + 128);
    *(_QWORD *)(a2 + 144) = *(_QWORD *)(a3 + 144);
    *(_OWORD *)(a2 + 128) = v29;
    *(_OWORD *)(a2 + 152) = *(_OWORD *)(a3 + 152);
    v30 = *(_OWORD *)(a3 + 168);
    *(_QWORD *)(a2 + 184) = *(_QWORD *)(a3 + 184);
    *(_OWORD *)(a2 + 168) = v30;
    *(_OWORD *)(a2 + 192) = *(_OWORD *)(a3 + 192);
    v31 = *(_OWORD *)(a3 + 208);
    *(_QWORD *)(a2 + 224) = *(_QWORD *)(a3 + 224);
    *(_OWORD *)(a2 + 208) = v31;
    *(double *)a3 = v3;
    *(_OWORD *)(a3 + 40) = v68;
    *(_OWORD *)(a3 + 24) = v63;
    *(_OWORD *)(a3 + 8) = v58;
    *(_OWORD *)(a3 + 88) = v83;
    *(_OWORD *)(a3 + 72) = v78;
    *(_OWORD *)(a3 + 56) = v73;
    *(_QWORD *)(a3 + 104) = v88;
    *(_QWORD *)(a3 + 144) = v128;
    *(_OWORD *)(a3 + 112) = v133;
    *(_OWORD *)(a3 + 128) = v123;
    *(_OWORD *)(a3 + 152) = v118;
    *(_QWORD *)(a3 + 184) = v113;
    *(_OWORD *)(a3 + 168) = v108;
    *(_QWORD *)(a3 + 224) = v98;
    *(_OWORD *)(a3 + 192) = v103;
    *(_OWORD *)(a3 + 208) = v93;
    v32 = *(double *)a1;
    if (*(double *)a2 < *(double *)a1)
    {
      v79 = *(_OWORD *)(a1 + 72);
      v84 = *(_OWORD *)(a1 + 88);
      v89 = *(_QWORD *)(a1 + 104);
      v59 = *(_OWORD *)(a1 + 8);
      v64 = *(_OWORD *)(a1 + 24);
      v69 = *(_OWORD *)(a1 + 40);
      v74 = *(_OWORD *)(a1 + 56);
      v134 = *(_OWORD *)(a1 + 112);
      v129 = *(_QWORD *)(a1 + 144);
      v119 = *(_OWORD *)(a1 + 152);
      v124 = *(_OWORD *)(a1 + 128);
      v114 = *(_QWORD *)(a1 + 184);
      v109 = *(_OWORD *)(a1 + 168);
      v104 = *(_OWORD *)(a1 + 192);
      v99 = *(_QWORD *)(a1 + 224);
      v94 = *(_OWORD *)(a1 + 208);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v33 = *(_OWORD *)(a2 + 8);
      v34 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 24) = v34;
      *(_OWORD *)(a1 + 8) = v33;
      v35 = *(_OWORD *)(a2 + 56);
      v36 = *(_OWORD *)(a2 + 72);
      v37 = *(_OWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 88) = v37;
      *(_OWORD *)(a1 + 72) = v36;
      *(_OWORD *)(a1 + 56) = v35;
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
      v38 = *(_OWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 128) = v38;
      *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
      v39 = *(_OWORD *)(a2 + 168);
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
      *(_OWORD *)(a1 + 168) = v39;
      *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
      v40 = *(_OWORD *)(a2 + 208);
      *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
      *(_OWORD *)(a1 + 208) = v40;
      *(double *)a2 = v32;
      *(_OWORD *)(a2 + 72) = v79;
      *(_OWORD *)(a2 + 88) = v84;
      *(_QWORD *)(a2 + 104) = v89;
      *(_OWORD *)(a2 + 8) = v59;
      *(_OWORD *)(a2 + 24) = v64;
      *(_OWORD *)(a2 + 40) = v69;
      *(_OWORD *)(a2 + 56) = v74;
      *(_OWORD *)(a2 + 112) = v134;
      *(_QWORD *)(a2 + 144) = v129;
      *(_OWORD *)(a2 + 128) = v124;
      *(_OWORD *)(a2 + 152) = v119;
      *(_QWORD *)(a2 + 184) = v114;
      *(_OWORD *)(a2 + 168) = v109;
      *(_OWORD *)(a2 + 192) = v104;
      *(_QWORD *)(a2 + 224) = v99;
      result = 2;
      *(_OWORD *)(a2 + 208) = v94;
      return result;
    }
  }
  else
  {
    v6 = (__int128 *)(a1 + 8);
    v7 = (__int128 *)(a1 + 112);
    v8 = (__int128 *)(a1 + 128);
    v9 = (__int128 *)(a1 + 152);
    v10 = (__int128 *)(a1 + 168);
    v11 = (__int128 *)(a1 + 192);
    v12 = (__int128 *)(a1 + 208);
    if (v5 < v3)
    {
      v77 = *(_OWORD *)(a1 + 72);
      v82 = *(_OWORD *)(a1 + 88);
      v87 = *(_QWORD *)(a1 + 104);
      v57 = *v6;
      v62 = *(_OWORD *)(a1 + 24);
      v67 = *(_OWORD *)(a1 + 40);
      v72 = *(_OWORD *)(a1 + 56);
      v132 = *v7;
      v127 = *(_QWORD *)(a1 + 144);
      v117 = *v9;
      v122 = *v8;
      v112 = *(_QWORD *)(a1 + 184);
      v107 = *v10;
      v102 = *v11;
      v97 = *(_QWORD *)(a1 + 224);
      v92 = *v12;
      *(double *)a1 = v5;
      v13 = *(_OWORD *)(a3 + 8);
      v14 = *(_OWORD *)(a3 + 40);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a3 + 24);
      *(_OWORD *)(a1 + 40) = v14;
      *v6 = v13;
      v15 = *(_OWORD *)(a3 + 56);
      v16 = *(_OWORD *)(a3 + 72);
      v17 = *(_OWORD *)(a3 + 88);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a3 + 104);
      *(_OWORD *)(a1 + 72) = v16;
      *(_OWORD *)(a1 + 88) = v17;
      *(_OWORD *)(a1 + 56) = v15;
      *v7 = *(_OWORD *)(a3 + 112);
      v18 = *(_OWORD *)(a3 + 128);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a3 + 144);
      *v8 = v18;
      *v9 = *(_OWORD *)(a3 + 152);
      v19 = *(_OWORD *)(a3 + 168);
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(a3 + 184);
      *v10 = v19;
      *v11 = *(_OWORD *)(a3 + 192);
      v20 = *(_OWORD *)(a3 + 208);
      *(_QWORD *)(a1 + 224) = *(_QWORD *)(a3 + 224);
      *v12 = v20;
      *(double *)a3 = v4;
      *(_OWORD *)(a3 + 40) = v67;
      *(_OWORD *)(a3 + 24) = v62;
      *(_OWORD *)(a3 + 8) = v57;
      *(_OWORD *)(a3 + 88) = v82;
      *(_OWORD *)(a3 + 72) = v77;
      *(_OWORD *)(a3 + 56) = v72;
      *(_QWORD *)(a3 + 104) = v87;
      *(_QWORD *)(a3 + 144) = v127;
      *(_OWORD *)(a3 + 112) = v132;
      *(_OWORD *)(a3 + 128) = v122;
      *(_OWORD *)(a3 + 152) = v117;
      *(_QWORD *)(a3 + 184) = v112;
      *(_OWORD *)(a3 + 168) = v107;
      v21 = v102;
      v22 = v92;
      *(_QWORD *)(a3 + 224) = v97;
      result = 1;
LABEL_9:
      *(_OWORD *)(a3 + 192) = v21;
      *(_OWORD *)(a3 + 208) = v22;
      return result;
    }
    v80 = *(_OWORD *)(a1 + 72);
    v85 = *(_OWORD *)(a1 + 88);
    v90 = *(_QWORD *)(a1 + 104);
    v60 = *v6;
    v65 = *(_OWORD *)(a1 + 24);
    v70 = *(_OWORD *)(a1 + 40);
    v75 = *(_OWORD *)(a1 + 56);
    v135 = *v7;
    v130 = *(_QWORD *)(a1 + 144);
    v120 = *v9;
    v125 = *v8;
    v115 = *(_QWORD *)(a1 + 184);
    v110 = *v10;
    v105 = *v11;
    v100 = *(_QWORD *)(a1 + 224);
    v95 = *v12;
    *(double *)a1 = v3;
    v41 = *(_OWORD *)(a2 + 8);
    v42 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = v42;
    *v6 = v41;
    v43 = *(_OWORD *)(a2 + 56);
    v44 = *(_OWORD *)(a2 + 72);
    v45 = *(_OWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 72) = v44;
    *(_OWORD *)(a1 + 88) = v45;
    *(_OWORD *)(a1 + 56) = v43;
    *v7 = *(_OWORD *)(a2 + 112);
    v46 = *(_OWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *v8 = v46;
    *v9 = *(_OWORD *)(a2 + 152);
    v47 = *(_OWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    *v10 = v47;
    *v11 = *(_OWORD *)(a2 + 192);
    v48 = *(_OWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
    *v12 = v48;
    *(double *)a2 = v4;
    *(_OWORD *)(a2 + 40) = v70;
    *(_OWORD *)(a2 + 24) = v65;
    *(_OWORD *)(a2 + 8) = v60;
    *(_OWORD *)(a2 + 88) = v85;
    *(_OWORD *)(a2 + 72) = v80;
    *(_OWORD *)(a2 + 56) = v75;
    *(_QWORD *)(a2 + 104) = v90;
    *(_QWORD *)(a2 + 144) = v130;
    *(_OWORD *)(a2 + 112) = v135;
    *(_OWORD *)(a2 + 128) = v125;
    *(_OWORD *)(a2 + 152) = v120;
    *(_QWORD *)(a2 + 184) = v115;
    *(_OWORD *)(a2 + 168) = v110;
    *(_QWORD *)(a2 + 224) = v100;
    *(_OWORD *)(a2 + 192) = v105;
    *(_OWORD *)(a2 + 208) = v95;
    if (*(double *)a3 < v4)
    {
      v81 = *(_OWORD *)(a2 + 72);
      v86 = *(_OWORD *)(a2 + 88);
      v91 = *(_QWORD *)(a2 + 104);
      v61 = *(_OWORD *)(a2 + 8);
      v66 = *(_OWORD *)(a2 + 24);
      v71 = *(_OWORD *)(a2 + 40);
      v76 = *(_OWORD *)(a2 + 56);
      v136 = *(_OWORD *)(a2 + 112);
      v131 = *(_QWORD *)(a2 + 144);
      v121 = *(_OWORD *)(a2 + 152);
      v126 = *(_OWORD *)(a2 + 128);
      v116 = *(_QWORD *)(a2 + 184);
      v111 = *(_OWORD *)(a2 + 168);
      v106 = *(_OWORD *)(a2 + 192);
      v101 = *(_QWORD *)(a2 + 224);
      v96 = *(_OWORD *)(a2 + 208);
      *(_QWORD *)a2 = *(_QWORD *)a3;
      v49 = *(_OWORD *)(a3 + 8);
      v50 = *(_OWORD *)(a3 + 40);
      *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
      *(_OWORD *)(a2 + 40) = v50;
      *(_OWORD *)(a2 + 8) = v49;
      v51 = *(_OWORD *)(a3 + 56);
      v52 = *(_OWORD *)(a3 + 72);
      v53 = *(_OWORD *)(a3 + 88);
      *(_QWORD *)(a2 + 104) = *(_QWORD *)(a3 + 104);
      *(_OWORD *)(a2 + 72) = v52;
      *(_OWORD *)(a2 + 88) = v53;
      *(_OWORD *)(a2 + 56) = v51;
      *(_OWORD *)(a2 + 112) = *(_OWORD *)(a3 + 112);
      v54 = *(_OWORD *)(a3 + 128);
      *(_QWORD *)(a2 + 144) = *(_QWORD *)(a3 + 144);
      *(_OWORD *)(a2 + 128) = v54;
      *(_OWORD *)(a2 + 152) = *(_OWORD *)(a3 + 152);
      v55 = *(_OWORD *)(a3 + 168);
      *(_QWORD *)(a2 + 184) = *(_QWORD *)(a3 + 184);
      *(_OWORD *)(a2 + 168) = v55;
      *(_OWORD *)(a2 + 192) = *(_OWORD *)(a3 + 192);
      v56 = *(_OWORD *)(a3 + 208);
      *(_QWORD *)(a2 + 224) = *(_QWORD *)(a3 + 224);
      *(_OWORD *)(a2 + 208) = v56;
      *(double *)a3 = v4;
      *(_OWORD *)(a3 + 40) = v71;
      *(_OWORD *)(a3 + 24) = v66;
      *(_OWORD *)(a3 + 8) = v61;
      *(_OWORD *)(a3 + 88) = v86;
      *(_OWORD *)(a3 + 72) = v81;
      *(_OWORD *)(a3 + 56) = v76;
      *(_QWORD *)(a3 + 104) = v91;
      *(_QWORD *)(a3 + 144) = v131;
      *(_OWORD *)(a3 + 112) = v136;
      *(_OWORD *)(a3 + 128) = v126;
      *(_OWORD *)(a3 + 152) = v121;
      *(_QWORD *)(a3 + 184) = v116;
      *(_OWORD *)(a3 + 168) = v111;
      v21 = v106;
      v22 = v96;
      *(_QWORD *)(a3 + 224) = v101;
      result = 2;
      goto LABEL_9;
    }
  }
  return 1;
}

void sub_20EB6014C(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  double v27;
  uint64_t v28;
  double v29;
  unint64_t v30;
  unint64_t v31;
  double v32;
  double v33;
  unint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  double v43;
  double v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  BOOL v53;
  double v54;
  unint64_t v55;
  unint64_t v56;
  double v57;
  double v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  double v67;
  double v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  double v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  unint64_t v86;
  BOOL v88;
  uint64_t v89;
  unint64_t v90;
  double *v91;
  unint64_t v92;
  double v93;
  uint64_t v94;
  double v95;
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  int64_t v103;
  int64_t v104;
  unint64_t v105;
  _OWORD *v106;
  unint64_t v107;
  _OWORD *v108;
  unint64_t v109;
  _OWORD *v110;
  unint64_t v111;
  int64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  double v116;
  double v117;
  unint64_t v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  int64_t v129;
  uint64_t v131;
  double v132;
  unint64_t v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  unint64_t v142;
  uint64_t v143;
  int64_t v144;
  __int128 *v145;
  __int128 *v146;
  __int128 *v147;
  __int128 *v148;
  __int128 *v149;
  __int128 *v150;
  __int128 *v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  double v163;
  double v164;
  unint64_t v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  unint64_t v174;
  _OWORD *v175;
  unint64_t v176;
  _OWORD *v177;
  unint64_t v178;
  _OWORD *v179;
  unint64_t v180;
  uint64_t v181;
  double v182;
  double v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  uint64_t v188;
  double v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  uint64_t v294;
  __int128 v295;
  __int128 v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  __int128 v300;
  uint64_t v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  __int128 v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;

__n128 sub_20EB61898(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v3;
  __n128 result;
  double v5;
  __int128 *v6;
  __int128 *v7;
  __int128 *v8;
  __int128 *v9;
  __int128 *v10;
  __n128 *v11;
  __int128 *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  __n128 v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __n128 v88;
  __int128 v89;
  __int128 v90;
  __n128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;

  v3 = *(double *)a2;
  result.n128_u64[0] = *(_QWORD *)a1;
  v5 = *(double *)a3;
  if (*(double *)a2 >= *(double *)a1)
  {
    if (v5 < v3)
    {
      v69 = *(_OWORD *)(a2 + 72);
      v73 = *(_OWORD *)(a2 + 88);
      v77 = *(_QWORD *)(a2 + 104);
      v53 = *(_OWORD *)(a2 + 8);
      v57 = *(_OWORD *)(a2 + 24);
      v61 = *(_OWORD *)(a2 + 40);
      v65 = *(_OWORD *)(a2 + 56);
      v113 = *(_OWORD *)(a2 + 112);
      v109 = *(_QWORD *)(a2 + 144);
      v101 = *(_OWORD *)(a2 + 152);
      v105 = *(_OWORD *)(a2 + 128);
      v97 = *(_QWORD *)(a2 + 184);
      v93 = *(_OWORD *)(a2 + 168);
      v89 = *(_OWORD *)(a2 + 192);
      v85 = *(_QWORD *)(a2 + 224);
      v81 = *(_OWORD *)(a2 + 208);
      *(double *)a2 = v5;
      v21 = *(_OWORD *)(a3 + 8);
      v22 = *(_OWORD *)(a3 + 24);
      *(_OWORD *)(a2 + 40) = *(_OWORD *)(a3 + 40);
      *(_OWORD *)(a2 + 24) = v22;
      *(_OWORD *)(a2 + 8) = v21;
      v23 = *(_OWORD *)(a3 + 56);
      v24 = *(_OWORD *)(a3 + 72);
      v25 = *(_OWORD *)(a3 + 88);
      *(_QWORD *)(a2 + 104) = *(_QWORD *)(a3 + 104);
      *(_OWORD *)(a2 + 88) = v25;
      *(_OWORD *)(a2 + 72) = v24;
      *(_OWORD *)(a2 + 56) = v23;
      *(_OWORD *)(a2 + 112) = *(_OWORD *)(a3 + 112);
      v26 = *(_OWORD *)(a3 + 128);
      *(_QWORD *)(a2 + 144) = *(_QWORD *)(a3 + 144);
      *(_OWORD *)(a2 + 128) = v26;
      *(_OWORD *)(a2 + 152) = *(_OWORD *)(a3 + 152);
      v27 = *(_OWORD *)(a3 + 168);
      *(_QWORD *)(a2 + 184) = *(_QWORD *)(a3 + 184);
      *(_OWORD *)(a2 + 168) = v27;
      *(_OWORD *)(a2 + 192) = *(_OWORD *)(a3 + 192);
      result = *(__n128 *)(a3 + 208);
      *(_QWORD *)(a2 + 224) = *(_QWORD *)(a3 + 224);
      *(__n128 *)(a2 + 208) = result;
      *(double *)a3 = v3;
      *(_OWORD *)(a3 + 40) = v61;
      *(_OWORD *)(a3 + 24) = v57;
      *(_OWORD *)(a3 + 8) = v53;
      *(_OWORD *)(a3 + 88) = v73;
      *(_OWORD *)(a3 + 72) = v69;
      *(_OWORD *)(a3 + 56) = v65;
      *(_QWORD *)(a3 + 104) = v77;
      *(_QWORD *)(a3 + 144) = v109;
      *(_OWORD *)(a3 + 112) = v113;
      *(_OWORD *)(a3 + 128) = v105;
      *(_OWORD *)(a3 + 152) = v101;
      *(_QWORD *)(a3 + 184) = v97;
      *(_OWORD *)(a3 + 168) = v93;
      *(_QWORD *)(a3 + 224) = v85;
      *(_OWORD *)(a3 + 192) = v89;
      *(_OWORD *)(a3 + 208) = v81;
      result.n128_u64[0] = *(_QWORD *)a1;
      if (*(double *)a2 < *(double *)a1)
      {
        v70 = *(_OWORD *)(a1 + 72);
        v74 = *(_OWORD *)(a1 + 88);
        v78 = *(_QWORD *)(a1 + 104);
        v54 = *(_OWORD *)(a1 + 8);
        v58 = *(_OWORD *)(a1 + 24);
        v62 = *(_OWORD *)(a1 + 40);
        v66 = *(_OWORD *)(a1 + 56);
        v114 = *(_OWORD *)(a1 + 112);
        v110 = *(_QWORD *)(a1 + 144);
        v102 = *(_OWORD *)(a1 + 152);
        v106 = *(_OWORD *)(a1 + 128);
        v98 = *(_QWORD *)(a1 + 184);
        v94 = *(_OWORD *)(a1 + 168);
        v90 = *(_OWORD *)(a1 + 192);
        v86 = *(_QWORD *)(a1 + 224);
        v82 = *(__n128 *)(a1 + 208);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v28 = *(_OWORD *)(a2 + 8);
        v29 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
        *(_OWORD *)(a1 + 24) = v29;
        *(_OWORD *)(a1 + 8) = v28;
        v30 = *(_OWORD *)(a2 + 56);
        v31 = *(_OWORD *)(a2 + 72);
        v32 = *(_OWORD *)(a2 + 88);
        *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
        *(_OWORD *)(a1 + 88) = v32;
        *(_OWORD *)(a1 + 72) = v31;
        *(_OWORD *)(a1 + 56) = v30;
        *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
        v33 = *(_OWORD *)(a2 + 128);
        *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
        *(_OWORD *)(a1 + 128) = v33;
        *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
        v34 = *(_OWORD *)(a2 + 168);
        *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
        *(_OWORD *)(a1 + 168) = v34;
        *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
        v35 = *(_OWORD *)(a2 + 208);
        *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
        *(_OWORD *)(a1 + 208) = v35;
        *(_QWORD *)a2 = result.n128_u64[0];
        *(_QWORD *)(a2 + 104) = v78;
        *(_OWORD *)(a2 + 72) = v70;
        *(_OWORD *)(a2 + 88) = v74;
        *(_OWORD *)(a2 + 40) = v62;
        *(_OWORD *)(a2 + 56) = v66;
        *(_OWORD *)(a2 + 8) = v54;
        *(_OWORD *)(a2 + 24) = v58;
        *(_OWORD *)(a2 + 112) = v114;
        *(_QWORD *)(a2 + 144) = v110;
        *(_OWORD *)(a2 + 128) = v106;
        *(_OWORD *)(a2 + 152) = v102;
        *(_QWORD *)(a2 + 184) = v98;
        *(_OWORD *)(a2 + 168) = v94;
        *(_OWORD *)(a2 + 192) = v90;
        result = v82;
        *(_QWORD *)(a2 + 224) = v86;
        *(__n128 *)(a2 + 208) = v82;
      }
    }
  }
  else
  {
    v6 = (__int128 *)(a1 + 8);
    v7 = (__int128 *)(a1 + 112);
    v8 = (__int128 *)(a1 + 128);
    v9 = (__int128 *)(a1 + 152);
    v10 = (__int128 *)(a1 + 168);
    v11 = (__n128 *)(a1 + 192);
    v12 = (__int128 *)(a1 + 208);
    if (v5 >= v3)
    {
      v71 = *(_OWORD *)(a1 + 72);
      v75 = *(_OWORD *)(a1 + 88);
      v79 = *(_QWORD *)(a1 + 104);
      v55 = *v6;
      v59 = *(_OWORD *)(a1 + 24);
      v63 = *(_OWORD *)(a1 + 40);
      v67 = *(_OWORD *)(a1 + 56);
      v115 = *v7;
      v111 = *(_QWORD *)(a1 + 144);
      v103 = *v9;
      v107 = *v8;
      v99 = *(_QWORD *)(a1 + 184);
      v95 = *v10;
      v91 = *v11;
      v87 = *(_QWORD *)(a1 + 224);
      v83 = *v12;
      *(double *)a1 = v3;
      v36 = *(_OWORD *)(a2 + 8);
      v37 = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 40) = v37;
      *v6 = v36;
      v38 = *(_OWORD *)(a2 + 56);
      v39 = *(_OWORD *)(a2 + 72);
      v40 = *(_OWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 72) = v39;
      *(_OWORD *)(a1 + 88) = v40;
      *(_OWORD *)(a1 + 56) = v38;
      *v7 = *(_OWORD *)(a2 + 112);
      v41 = *(_OWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *v8 = v41;
      *v9 = *(_OWORD *)(a2 + 152);
      v42 = *(_OWORD *)(a2 + 168);
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
      *v10 = v42;
      *v11 = *(__n128 *)(a2 + 192);
      v43 = *(_OWORD *)(a2 + 208);
      *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
      *v12 = v43;
      *(_QWORD *)a2 = result.n128_u64[0];
      *(_OWORD *)(a2 + 40) = v63;
      *(_OWORD *)(a2 + 24) = v59;
      *(_OWORD *)(a2 + 8) = v55;
      *(_OWORD *)(a2 + 88) = v75;
      *(_OWORD *)(a2 + 72) = v71;
      *(_OWORD *)(a2 + 56) = v67;
      *(_QWORD *)(a2 + 104) = v79;
      *(_QWORD *)(a2 + 144) = v111;
      *(_OWORD *)(a2 + 112) = v115;
      *(_OWORD *)(a2 + 128) = v107;
      *(_OWORD *)(a2 + 152) = v103;
      *(_QWORD *)(a2 + 184) = v99;
      *(_OWORD *)(a2 + 168) = v95;
      *(_QWORD *)(a2 + 224) = v87;
      *(__n128 *)(a2 + 192) = v91;
      *(_OWORD *)(a2 + 208) = v83;
      if (*(double *)a3 >= result.n128_f64[0])
        return result;
      v68 = *(_OWORD *)(a2 + 72);
      v72 = *(_OWORD *)(a2 + 88);
      v76 = *(_QWORD *)(a2 + 104);
      v52 = *(_OWORD *)(a2 + 8);
      v56 = *(_OWORD *)(a2 + 24);
      v60 = *(_OWORD *)(a2 + 40);
      v64 = *(_OWORD *)(a2 + 56);
      v112 = *(_OWORD *)(a2 + 112);
      v108 = *(_QWORD *)(a2 + 144);
      v100 = *(_OWORD *)(a2 + 152);
      v104 = *(_OWORD *)(a2 + 128);
      v96 = *(_QWORD *)(a2 + 184);
      v92 = *(_OWORD *)(a2 + 168);
      v88 = *(__n128 *)(a2 + 192);
      v84 = *(_QWORD *)(a2 + 224);
      v80 = *(_OWORD *)(a2 + 208);
      *(_QWORD *)a2 = *(_QWORD *)a3;
      v44 = *(_OWORD *)(a3 + 8);
      v45 = *(_OWORD *)(a3 + 40);
      *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
      *(_OWORD *)(a2 + 40) = v45;
      *(_OWORD *)(a2 + 8) = v44;
      v46 = *(_OWORD *)(a3 + 56);
      v47 = *(_OWORD *)(a3 + 72);
      v48 = *(_OWORD *)(a3 + 88);
      *(_QWORD *)(a2 + 104) = *(_QWORD *)(a3 + 104);
      *(_OWORD *)(a2 + 72) = v47;
      *(_OWORD *)(a2 + 88) = v48;
      *(_OWORD *)(a2 + 56) = v46;
      *(_OWORD *)(a2 + 112) = *(_OWORD *)(a3 + 112);
      v49 = *(_OWORD *)(a3 + 128);
      *(_QWORD *)(a2 + 144) = *(_QWORD *)(a3 + 144);
      *(_OWORD *)(a2 + 128) = v49;
      *(_OWORD *)(a2 + 152) = *(_OWORD *)(a3 + 152);
      v50 = *(_OWORD *)(a3 + 168);
      *(_QWORD *)(a2 + 184) = *(_QWORD *)(a3 + 184);
      *(_OWORD *)(a2 + 168) = v50;
      *(_OWORD *)(a2 + 192) = *(_OWORD *)(a3 + 192);
      v51 = *(_OWORD *)(a3 + 208);
      *(_QWORD *)(a2 + 224) = *(_QWORD *)(a3 + 224);
      *(_OWORD *)(a2 + 208) = v51;
    }
    else
    {
      v68 = *(_OWORD *)(a1 + 72);
      v72 = *(_OWORD *)(a1 + 88);
      v76 = *(_QWORD *)(a1 + 104);
      v52 = *v6;
      v56 = *(_OWORD *)(a1 + 24);
      v60 = *(_OWORD *)(a1 + 40);
      v64 = *(_OWORD *)(a1 + 56);
      v112 = *v7;
      v108 = *(_QWORD *)(a1 + 144);
      v100 = *v9;
      v104 = *v8;
      v96 = *(_QWORD *)(a1 + 184);
      v92 = *v10;
      v88 = *v11;
      v84 = *(_QWORD *)(a1 + 224);
      v80 = *v12;
      *(double *)a1 = v5;
      v13 = *(_OWORD *)(a3 + 8);
      v14 = *(_OWORD *)(a3 + 40);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a3 + 24);
      *(_OWORD *)(a1 + 40) = v14;
      *v6 = v13;
      v15 = *(_OWORD *)(a3 + 56);
      v16 = *(_OWORD *)(a3 + 72);
      v17 = *(_OWORD *)(a3 + 88);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a3 + 104);
      *(_OWORD *)(a1 + 72) = v16;
      *(_OWORD *)(a1 + 88) = v17;
      *(_OWORD *)(a1 + 56) = v15;
      *v7 = *(_OWORD *)(a3 + 112);
      v18 = *(_OWORD *)(a3 + 128);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a3 + 144);
      *v8 = v18;
      *v9 = *(_OWORD *)(a3 + 152);
      v19 = *(_OWORD *)(a3 + 168);
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(a3 + 184);
      *v10 = v19;
      *v11 = *(__n128 *)(a3 + 192);
      v20 = *(_OWORD *)(a3 + 208);
      *(_QWORD *)(a1 + 224) = *(_QWORD *)(a3 + 224);
      *v12 = v20;
    }
    *(_QWORD *)a3 = result.n128_u64[0];
    *(_OWORD *)(a3 + 40) = v60;
    *(_OWORD *)(a3 + 24) = v56;
    *(_OWORD *)(a3 + 8) = v52;
    *(_OWORD *)(a3 + 88) = v72;
    *(_OWORD *)(a3 + 72) = v68;
    *(_OWORD *)(a3 + 56) = v64;
    *(_QWORD *)(a3 + 104) = v76;
    *(_QWORD *)(a3 + 144) = v108;
    *(_OWORD *)(a3 + 112) = v112;
    *(_OWORD *)(a3 + 128) = v104;
    *(_OWORD *)(a3 + 152) = v100;
    *(_QWORD *)(a3 + 184) = v96;
    *(_OWORD *)(a3 + 168) = v92;
    result = v88;
    *(_QWORD *)(a3 + 224) = v84;
    *(__n128 *)(a3 + 192) = v88;
    *(_OWORD *)(a3 + 208) = v80;
  }
  return result;
}

BOOL sub_20EB61FAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  double v6;
  double v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  double *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  double *v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;

  v4 = 0x34F72C234F72C235 * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(double *)(a2 - 232);
      v7 = *(double *)a1;
      if (v6 < *(double *)a1)
      {
        v39 = *(_OWORD *)(a1 + 72);
        v41 = *(_OWORD *)(a1 + 88);
        v43 = *(_QWORD *)(a1 + 104);
        v31 = *(_OWORD *)(a1 + 8);
        v33 = *(_OWORD *)(a1 + 24);
        v35 = *(_OWORD *)(a1 + 40);
        v37 = *(_OWORD *)(a1 + 56);
        v61 = *(_OWORD *)(a1 + 112);
        v59 = *(_QWORD *)(a1 + 144);
        v55 = *(_OWORD *)(a1 + 152);
        v57 = *(_OWORD *)(a1 + 128);
        v53 = *(_QWORD *)(a1 + 184);
        v51 = *(_OWORD *)(a1 + 168);
        v49 = *(_OWORD *)(a1 + 192);
        v47 = *(_QWORD *)(a1 + 224);
        v45 = *(_OWORD *)(a1 + 208);
        *(double *)a1 = v6;
        v8 = *(_OWORD *)(a2 - 224);
        v9 = *(_OWORD *)(a2 - 208);
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 - 192);
        *(_OWORD *)(a1 + 24) = v9;
        *(_OWORD *)(a1 + 8) = v8;
        v10 = *(_OWORD *)(a2 - 176);
        v11 = *(_OWORD *)(a2 - 160);
        v12 = *(_OWORD *)(a2 - 144);
        *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 - 128);
        *(_OWORD *)(a1 + 88) = v12;
        *(_OWORD *)(a1 + 72) = v11;
        *(_OWORD *)(a1 + 56) = v10;
        *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 - 120);
        v13 = *(_OWORD *)(a2 - 104);
        *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 - 88);
        *(_OWORD *)(a1 + 128) = v13;
        *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 - 80);
        v14 = *(_OWORD *)(a2 - 64);
        *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 168) = v14;
        *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 - 40);
        v15 = *(_OWORD *)(a2 - 24);
        *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 - 8);
        *(_OWORD *)(a1 + 208) = v15;
        *(double *)(a2 - 232) = v7;
        *(_OWORD *)(a2 - 224) = v31;
        *(_OWORD *)(a2 - 208) = v33;
        *(_OWORD *)(a2 - 160) = v39;
        *(_OWORD *)(a2 - 144) = v41;
        *(_OWORD *)(a2 - 192) = v35;
        *(_OWORD *)(a2 - 176) = v37;
        *(_QWORD *)(a2 - 128) = v43;
        *(_OWORD *)(a2 - 120) = v61;
        *(_QWORD *)(a2 - 88) = v59;
        *(_OWORD *)(a2 - 104) = v57;
        *(_QWORD *)(a2 - 48) = v53;
        *(_OWORD *)(a2 - 80) = v55;
        *(_OWORD *)(a2 - 64) = v51;
        *(_OWORD *)(a2 - 40) = v49;
        *(_QWORD *)(a2 - 8) = v47;
        *(_OWORD *)(a2 - 24) = v45;
      }
      return result;
    case 3:
      sub_20EB61898(a1, a1 + 232, a2 - 232);
      return 1;
    case 4:
      sub_20EB62410(a1, a1 + 232, a1 + 464, a2 - 232);
      return 1;
    case 5:
      sub_20EB628D8(a1, a1 + 232, a1 + 464, a1 + 696, a2 - 232);
      return 1;
    default:
      v16 = (double *)(a1 + 464);
      sub_20EB61898(a1, a1 + 232, a1 + 464);
      v17 = a1 + 696;
      if (a1 + 696 == a2)
        return 1;
      v18 = 0;
      v19 = 464;
      break;
  }
  while (1)
  {
    v21 = *(double *)v17;
    if (*(double *)v17 < *v16)
    {
      v40 = *(_OWORD *)(v17 + 72);
      v42 = *(_OWORD *)(v17 + 88);
      v32 = *(_OWORD *)(v17 + 8);
      v34 = *(_OWORD *)(v17 + 24);
      v36 = *(_OWORD *)(v17 + 40);
      v38 = *(_OWORD *)(v17 + 56);
      v62 = *(_OWORD *)(v17 + 112);
      v56 = *(_OWORD *)(v17 + 152);
      v58 = *(_OWORD *)(v17 + 128);
      v52 = *(_OWORD *)(v17 + 168);
      v50 = *(_OWORD *)(v17 + 192);
      v44 = *(_QWORD *)(v17 + 104);
      v60 = *(_QWORD *)(v17 + 144);
      v54 = *(_QWORD *)(v17 + 184);
      v48 = *(_QWORD *)(v17 + 224);
      v46 = *(_OWORD *)(v17 + 208);
      v22 = v19;
      v23 = *v16;
      do
      {
        v24 = a1 + v22;
        *(double *)(v24 + 232) = v23;
        v25 = *(_OWORD *)(a1 + v22 + 56);
        v26 = *(_OWORD *)(a1 + v22 + 88);
        *(_OWORD *)(v24 + 304) = *(_OWORD *)(a1 + v22 + 72);
        *(_OWORD *)(v24 + 320) = v26;
        v27 = *(_OWORD *)(a1 + v22 + 24);
        *(_OWORD *)(v24 + 240) = *(_OWORD *)(a1 + v22 + 8);
        *(_OWORD *)(v24 + 256) = v27;
        *(_OWORD *)(v24 + 272) = *(_OWORD *)(a1 + v22 + 40);
        *(_OWORD *)(v24 + 288) = v25;
        v28 = *(_OWORD *)(a1 + v22 + 128);
        *(_OWORD *)(a1 + v22 + 344) = *(_OWORD *)(a1 + v22 + 112);
        *(_OWORD *)(a1 + v22 + 360) = v28;
        v29 = *(_OWORD *)(a1 + v22 + 168);
        *(_OWORD *)(v24 + 384) = *(_OWORD *)(a1 + v22 + 152);
        *(_OWORD *)(v24 + 400) = v29;
        v30 = *(_OWORD *)(a1 + v22 + 208);
        *(_OWORD *)(a1 + v22 + 424) = *(_OWORD *)(a1 + v22 + 192);
        *(_QWORD *)(v24 + 336) = *(_QWORD *)(a1 + v22 + 104);
        *(_QWORD *)(v24 + 376) = *(_QWORD *)(a1 + v22 + 144);
        *(_QWORD *)(v24 + 416) = *(_QWORD *)(a1 + v22 + 184);
        *(_QWORD *)(v24 + 456) = *(_QWORD *)(a1 + v22 + 224);
        *(_OWORD *)(a1 + v22 + 440) = v30;
        if (!v22)
        {
          v20 = (double *)a1;
          goto LABEL_7;
        }
        v23 = *(double *)(v24 - 232);
        v22 -= 232;
      }
      while (v21 < v23);
      v20 = (double *)(a1 + v22 + 232);
LABEL_7:
      *v20 = v21;
      *(_OWORD *)(v24 + 56) = v38;
      *(_OWORD *)(v24 + 72) = v40;
      *(_OWORD *)(v24 + 88) = v42;
      *(_OWORD *)(v24 + 8) = v32;
      *(_QWORD *)(v24 + 104) = v44;
      *(_OWORD *)(v24 + 24) = v34;
      *(_OWORD *)(v24 + 40) = v36;
      *(_QWORD *)(v24 + 144) = v60;
      *(_OWORD *)(v24 + 112) = v62;
      *(_OWORD *)(v24 + 128) = v58;
      *(_OWORD *)(v24 + 152) = v56;
      *(_QWORD *)(v24 + 184) = v54;
      *(_OWORD *)(v24 + 168) = v52;
      *(_QWORD *)(v24 + 224) = v48;
      ++v18;
      *(_OWORD *)(v24 + 192) = v50;
      *(_OWORD *)(v24 + 208) = v46;
      if (v18 == 8)
        return v17 + 232 == a2;
    }
    v16 = (double *)v17;
    v19 += 232;
    v17 += 232;
    if (v17 == a2)
      return 1;
  }
}

__n128 sub_20EB62410(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __n128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;

  sub_20EB61898(a1, a2, a3);
  result.n128_u64[0] = *(_QWORD *)a3;
  if (*(double *)a4 < *(double *)a3)
  {
    v45 = *(_OWORD *)(a3 + 72);
    v48 = *(_OWORD *)(a3 + 88);
    v51 = *(_QWORD *)(a3 + 104);
    v33 = *(_OWORD *)(a3 + 8);
    v36 = *(_OWORD *)(a3 + 24);
    v39 = *(_OWORD *)(a3 + 40);
    v42 = *(_OWORD *)(a3 + 56);
    v78 = *(_OWORD *)(a3 + 112);
    v75 = *(_QWORD *)(a3 + 144);
    v69 = *(_OWORD *)(a3 + 152);
    v72 = *(_OWORD *)(a3 + 128);
    v66 = *(_QWORD *)(a3 + 184);
    v60 = *(_OWORD *)(a3 + 192);
    v63 = *(_OWORD *)(a3 + 168);
    v57 = *(_QWORD *)(a3 + 224);
    v54 = *(_OWORD *)(a3 + 208);
    *(_QWORD *)a3 = *(_QWORD *)a4;
    v9 = *(_OWORD *)(a4 + 8);
    v10 = *(_OWORD *)(a4 + 24);
    *(_OWORD *)(a3 + 40) = *(_OWORD *)(a4 + 40);
    *(_OWORD *)(a3 + 24) = v10;
    *(_OWORD *)(a3 + 8) = v9;
    v11 = *(_OWORD *)(a4 + 56);
    v12 = *(_OWORD *)(a4 + 72);
    v13 = *(_OWORD *)(a4 + 88);
    *(_QWORD *)(a3 + 104) = *(_QWORD *)(a4 + 104);
    *(_OWORD *)(a3 + 88) = v13;
    *(_OWORD *)(a3 + 72) = v12;
    *(_OWORD *)(a3 + 56) = v11;
    *(_OWORD *)(a3 + 112) = *(_OWORD *)(a4 + 112);
    v14 = *(_OWORD *)(a4 + 128);
    *(_QWORD *)(a3 + 144) = *(_QWORD *)(a4 + 144);
    *(_OWORD *)(a3 + 128) = v14;
    *(_OWORD *)(a3 + 152) = *(_OWORD *)(a4 + 152);
    v15 = *(_OWORD *)(a4 + 168);
    *(_QWORD *)(a3 + 184) = *(_QWORD *)(a4 + 184);
    *(_OWORD *)(a3 + 168) = v15;
    *(_OWORD *)(a3 + 192) = *(_OWORD *)(a4 + 192);
    v16 = *(_OWORD *)(a4 + 208);
    *(_QWORD *)(a3 + 224) = *(_QWORD *)(a4 + 224);
    *(_OWORD *)(a3 + 208) = v16;
    *(_QWORD *)a4 = result.n128_u64[0];
    *(_OWORD *)(a4 + 40) = v39;
    *(_OWORD *)(a4 + 24) = v36;
    *(_OWORD *)(a4 + 8) = v33;
    *(_OWORD *)(a4 + 88) = v48;
    *(_OWORD *)(a4 + 72) = v45;
    *(_OWORD *)(a4 + 56) = v42;
    *(_QWORD *)(a4 + 104) = v51;
    *(_QWORD *)(a4 + 144) = v75;
    *(_OWORD *)(a4 + 112) = v78;
    *(_OWORD *)(a4 + 128) = v72;
    *(_OWORD *)(a4 + 152) = v69;
    *(_QWORD *)(a4 + 184) = v66;
    *(_OWORD *)(a4 + 168) = v63;
    *(_QWORD *)(a4 + 224) = v57;
    *(_OWORD *)(a4 + 192) = v60;
    *(_OWORD *)(a4 + 208) = v54;
    result.n128_u64[0] = *(_QWORD *)a2;
    if (*(double *)a3 < *(double *)a2)
    {
      v46 = *(_OWORD *)(a2 + 72);
      v49 = *(_OWORD *)(a2 + 88);
      v52 = *(_QWORD *)(a2 + 104);
      v34 = *(_OWORD *)(a2 + 8);
      v37 = *(_OWORD *)(a2 + 24);
      v40 = *(_OWORD *)(a2 + 40);
      v43 = *(_OWORD *)(a2 + 56);
      v79 = *(_OWORD *)(a2 + 112);
      v76 = *(_QWORD *)(a2 + 144);
      v70 = *(_OWORD *)(a2 + 152);
      v73 = *(_OWORD *)(a2 + 128);
      v67 = *(_QWORD *)(a2 + 184);
      v61 = *(_OWORD *)(a2 + 192);
      v64 = *(_OWORD *)(a2 + 168);
      v58 = *(_QWORD *)(a2 + 224);
      v55 = *(_OWORD *)(a2 + 208);
      *(_QWORD *)a2 = *(_QWORD *)a3;
      v17 = *(_OWORD *)(a3 + 8);
      v18 = *(_OWORD *)(a3 + 24);
      *(_OWORD *)(a2 + 40) = *(_OWORD *)(a3 + 40);
      *(_OWORD *)(a2 + 24) = v18;
      *(_OWORD *)(a2 + 8) = v17;
      v19 = *(_OWORD *)(a3 + 56);
      v20 = *(_OWORD *)(a3 + 72);
      v21 = *(_OWORD *)(a3 + 88);
      *(_QWORD *)(a2 + 104) = *(_QWORD *)(a3 + 104);
      *(_OWORD *)(a2 + 88) = v21;
      *(_OWORD *)(a2 + 72) = v20;
      *(_OWORD *)(a2 + 56) = v19;
      *(_OWORD *)(a2 + 112) = *(_OWORD *)(a3 + 112);
      v22 = *(_OWORD *)(a3 + 128);
      *(_QWORD *)(a2 + 144) = *(_QWORD *)(a3 + 144);
      *(_OWORD *)(a2 + 128) = v22;
      *(_OWORD *)(a2 + 152) = *(_OWORD *)(a3 + 152);
      v23 = *(_OWORD *)(a3 + 168);
      *(_QWORD *)(a2 + 184) = *(_QWORD *)(a3 + 184);
      *(_OWORD *)(a2 + 168) = v23;
      *(_OWORD *)(a2 + 192) = *(_OWORD *)(a3 + 192);
      v24 = *(_OWORD *)(a3 + 208);
      *(_QWORD *)(a2 + 224) = *(_QWORD *)(a3 + 224);
      *(_OWORD *)(a2 + 208) = v24;
      *(_QWORD *)a3 = result.n128_u64[0];
      *(_QWORD *)(a3 + 104) = v52;
      *(_OWORD *)(a3 + 72) = v46;
      *(_OWORD *)(a3 + 88) = v49;
      *(_OWORD *)(a3 + 40) = v40;
      *(_OWORD *)(a3 + 56) = v43;
      *(_OWORD *)(a3 + 8) = v34;
      *(_OWORD *)(a3 + 24) = v37;
      *(_OWORD *)(a3 + 112) = v79;
      *(_QWORD *)(a3 + 144) = v76;
      *(_OWORD *)(a3 + 128) = v73;
      *(_OWORD *)(a3 + 152) = v70;
      *(_QWORD *)(a3 + 184) = v67;
      *(_OWORD *)(a3 + 168) = v64;
      *(_OWORD *)(a3 + 192) = v61;
      *(_QWORD *)(a3 + 224) = v58;
      *(_OWORD *)(a3 + 208) = v55;
      result.n128_u64[0] = *(_QWORD *)a1;
      if (*(double *)a2 < *(double *)a1)
      {
        v47 = *(_OWORD *)(a1 + 72);
        v50 = *(_OWORD *)(a1 + 88);
        v53 = *(_QWORD *)(a1 + 104);
        v35 = *(_OWORD *)(a1 + 8);
        v38 = *(_OWORD *)(a1 + 24);
        v41 = *(_OWORD *)(a1 + 40);
        v44 = *(_OWORD *)(a1 + 56);
        v80 = *(_OWORD *)(a1 + 112);
        v77 = *(_QWORD *)(a1 + 144);
        v71 = *(_OWORD *)(a1 + 152);
        v74 = *(_OWORD *)(a1 + 128);
        v68 = *(_QWORD *)(a1 + 184);
        v62 = *(_OWORD *)(a1 + 192);
        v65 = *(_OWORD *)(a1 + 168);
        v59 = *(_QWORD *)(a1 + 224);
        v56 = *(__n128 *)(a1 + 208);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v25 = *(_OWORD *)(a2 + 8);
        v26 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
        *(_OWORD *)(a1 + 24) = v26;
        *(_OWORD *)(a1 + 8) = v25;
        v27 = *(_OWORD *)(a2 + 56);
        v28 = *(_OWORD *)(a2 + 72);
        v29 = *(_OWORD *)(a2 + 88);
        *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
        *(_OWORD *)(a1 + 88) = v29;
        *(_OWORD *)(a1 + 72) = v28;
        *(_OWORD *)(a1 + 56) = v27;
        *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
        v30 = *(_OWORD *)(a2 + 128);
        *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
        *(_OWORD *)(a1 + 128) = v30;
        *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
        v31 = *(_OWORD *)(a2 + 168);
        *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
        *(_OWORD *)(a1 + 168) = v31;
        *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
        v32 = *(_OWORD *)(a2 + 208);
        *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
        *(_OWORD *)(a1 + 208) = v32;
        *(_QWORD *)a2 = result.n128_u64[0];
        *(_QWORD *)(a2 + 104) = v53;
        *(_OWORD *)(a2 + 72) = v47;
        *(_OWORD *)(a2 + 88) = v50;
        *(_OWORD *)(a2 + 40) = v41;
        *(_OWORD *)(a2 + 56) = v44;
        *(_OWORD *)(a2 + 8) = v35;
        *(_OWORD *)(a2 + 24) = v38;
        *(_OWORD *)(a2 + 112) = v80;
        *(_QWORD *)(a2 + 144) = v77;
        *(_OWORD *)(a2 + 128) = v74;
        *(_OWORD *)(a2 + 152) = v71;
        *(_QWORD *)(a2 + 184) = v68;
        *(_OWORD *)(a2 + 168) = v65;
        *(_OWORD *)(a2 + 192) = v62;
        result = v56;
        *(_QWORD *)(a2 + 224) = v59;
        *(__n128 *)(a2 + 208) = v56;
      }
    }
  }
  return result;
}

__n128 sub_20EB628D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __n128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;

  sub_20EB62410(a1, a2, a3, a4);
  result.n128_u64[0] = *(_QWORD *)a4;
  if (*(double *)a5 < *(double *)a4)
  {
    v59 = *(_OWORD *)(a4 + 72);
    v63 = *(_OWORD *)(a4 + 88);
    v67 = *(_QWORD *)(a4 + 104);
    v43 = *(_OWORD *)(a4 + 8);
    v47 = *(_OWORD *)(a4 + 24);
    v51 = *(_OWORD *)(a4 + 40);
    v55 = *(_OWORD *)(a4 + 56);
    v103 = *(_OWORD *)(a4 + 112);
    v99 = *(_QWORD *)(a4 + 144);
    v91 = *(_OWORD *)(a4 + 152);
    v95 = *(_OWORD *)(a4 + 128);
    v87 = *(_QWORD *)(a4 + 184);
    v79 = *(_OWORD *)(a4 + 192);
    v83 = *(_OWORD *)(a4 + 168);
    v75 = *(_QWORD *)(a4 + 224);
    v71 = *(_OWORD *)(a4 + 208);
    *(_QWORD *)a4 = *(_QWORD *)a5;
    v11 = *(_OWORD *)(a5 + 8);
    v12 = *(_OWORD *)(a5 + 24);
    *(_OWORD *)(a4 + 40) = *(_OWORD *)(a5 + 40);
    *(_OWORD *)(a4 + 24) = v12;
    *(_OWORD *)(a4 + 8) = v11;
    v13 = *(_OWORD *)(a5 + 56);
    v14 = *(_OWORD *)(a5 + 72);
    v15 = *(_OWORD *)(a5 + 88);
    *(_QWORD *)(a4 + 104) = *(_QWORD *)(a5 + 104);
    *(_OWORD *)(a4 + 88) = v15;
    *(_OWORD *)(a4 + 72) = v14;
    *(_OWORD *)(a4 + 56) = v13;
    *(_OWORD *)(a4 + 112) = *(_OWORD *)(a5 + 112);
    v16 = *(_OWORD *)(a5 + 128);
    *(_QWORD *)(a4 + 144) = *(_QWORD *)(a5 + 144);
    *(_OWORD *)(a4 + 128) = v16;
    *(_OWORD *)(a4 + 152) = *(_OWORD *)(a5 + 152);
    v17 = *(_OWORD *)(a5 + 168);
    *(_QWORD *)(a4 + 184) = *(_QWORD *)(a5 + 184);
    *(_OWORD *)(a4 + 168) = v17;
    *(_OWORD *)(a4 + 192) = *(_OWORD *)(a5 + 192);
    v18 = *(_OWORD *)(a5 + 208);
    *(_QWORD *)(a4 + 224) = *(_QWORD *)(a5 + 224);
    *(_OWORD *)(a4 + 208) = v18;
    *(_QWORD *)a5 = result.n128_u64[0];
    *(_OWORD *)(a5 + 40) = v51;
    *(_OWORD *)(a5 + 24) = v47;
    *(_OWORD *)(a5 + 8) = v43;
    *(_OWORD *)(a5 + 88) = v63;
    *(_OWORD *)(a5 + 72) = v59;
    *(_OWORD *)(a5 + 56) = v55;
    *(_QWORD *)(a5 + 104) = v67;
    *(_QWORD *)(a5 + 144) = v99;
    *(_OWORD *)(a5 + 112) = v103;
    *(_OWORD *)(a5 + 128) = v95;
    *(_OWORD *)(a5 + 152) = v91;
    *(_QWORD *)(a5 + 184) = v87;
    *(_OWORD *)(a5 + 168) = v83;
    *(_QWORD *)(a5 + 224) = v75;
    *(_OWORD *)(a5 + 192) = v79;
    *(_OWORD *)(a5 + 208) = v71;
    result.n128_u64[0] = *(_QWORD *)a3;
    if (*(double *)a4 < *(double *)a3)
    {
      v60 = *(_OWORD *)(a3 + 72);
      v64 = *(_OWORD *)(a3 + 88);
      v68 = *(_QWORD *)(a3 + 104);
      v44 = *(_OWORD *)(a3 + 8);
      v48 = *(_OWORD *)(a3 + 24);
      v52 = *(_OWORD *)(a3 + 40);
      v56 = *(_OWORD *)(a3 + 56);
      v104 = *(_OWORD *)(a3 + 112);
      v100 = *(_QWORD *)(a3 + 144);
      v92 = *(_OWORD *)(a3 + 152);
      v96 = *(_OWORD *)(a3 + 128);
      v88 = *(_QWORD *)(a3 + 184);
      v80 = *(_OWORD *)(a3 + 192);
      v84 = *(_OWORD *)(a3 + 168);
      v76 = *(_QWORD *)(a3 + 224);
      v72 = *(_OWORD *)(a3 + 208);
      *(_QWORD *)a3 = *(_QWORD *)a4;
      v19 = *(_OWORD *)(a4 + 8);
      v20 = *(_OWORD *)(a4 + 24);
      *(_OWORD *)(a3 + 40) = *(_OWORD *)(a4 + 40);
      *(_OWORD *)(a3 + 24) = v20;
      *(_OWORD *)(a3 + 8) = v19;
      v21 = *(_OWORD *)(a4 + 56);
      v22 = *(_OWORD *)(a4 + 72);
      v23 = *(_OWORD *)(a4 + 88);
      *(_QWORD *)(a3 + 104) = *(_QWORD *)(a4 + 104);
      *(_OWORD *)(a3 + 88) = v23;
      *(_OWORD *)(a3 + 72) = v22;
      *(_OWORD *)(a3 + 56) = v21;
      *(_OWORD *)(a3 + 112) = *(_OWORD *)(a4 + 112);
      v24 = *(_OWORD *)(a4 + 128);
      *(_QWORD *)(a3 + 144) = *(_QWORD *)(a4 + 144);
      *(_OWORD *)(a3 + 128) = v24;
      *(_OWORD *)(a3 + 152) = *(_OWORD *)(a4 + 152);
      v25 = *(_OWORD *)(a4 + 168);
      *(_QWORD *)(a3 + 184) = *(_QWORD *)(a4 + 184);
      *(_OWORD *)(a3 + 168) = v25;
      *(_OWORD *)(a3 + 192) = *(_OWORD *)(a4 + 192);
      v26 = *(_OWORD *)(a4 + 208);
      *(_QWORD *)(a3 + 224) = *(_QWORD *)(a4 + 224);
      *(_OWORD *)(a3 + 208) = v26;
      *(_QWORD *)a4 = result.n128_u64[0];
      *(_QWORD *)(a4 + 104) = v68;
      *(_OWORD *)(a4 + 72) = v60;
      *(_OWORD *)(a4 + 88) = v64;
      *(_OWORD *)(a4 + 40) = v52;
      *(_OWORD *)(a4 + 56) = v56;
      *(_OWORD *)(a4 + 8) = v44;
      *(_OWORD *)(a4 + 24) = v48;
      *(_OWORD *)(a4 + 112) = v104;
      *(_QWORD *)(a4 + 144) = v100;
      *(_OWORD *)(a4 + 128) = v96;
      *(_OWORD *)(a4 + 152) = v92;
      *(_QWORD *)(a4 + 184) = v88;
      *(_OWORD *)(a4 + 168) = v84;
      *(_OWORD *)(a4 + 192) = v80;
      *(_QWORD *)(a4 + 224) = v76;
      *(_OWORD *)(a4 + 208) = v72;
      result.n128_u64[0] = *(_QWORD *)a2;
      if (*(double *)a3 < *(double *)a2)
      {
        v61 = *(_OWORD *)(a2 + 72);
        v65 = *(_OWORD *)(a2 + 88);
        v69 = *(_QWORD *)(a2 + 104);
        v45 = *(_OWORD *)(a2 + 8);
        v49 = *(_OWORD *)(a2 + 24);
        v53 = *(_OWORD *)(a2 + 40);
        v57 = *(_OWORD *)(a2 + 56);
        v105 = *(_OWORD *)(a2 + 112);
        v101 = *(_QWORD *)(a2 + 144);
        v93 = *(_OWORD *)(a2 + 152);
        v97 = *(_OWORD *)(a2 + 128);
        v89 = *(_QWORD *)(a2 + 184);
        v81 = *(_OWORD *)(a2 + 192);
        v85 = *(_OWORD *)(a2 + 168);
        v77 = *(_QWORD *)(a2 + 224);
        v73 = *(_OWORD *)(a2 + 208);
        *(_QWORD *)a2 = *(_QWORD *)a3;
        v27 = *(_OWORD *)(a3 + 8);
        v28 = *(_OWORD *)(a3 + 24);
        *(_OWORD *)(a2 + 40) = *(_OWORD *)(a3 + 40);
        *(_OWORD *)(a2 + 24) = v28;
        *(_OWORD *)(a2 + 8) = v27;
        v29 = *(_OWORD *)(a3 + 56);
        v30 = *(_OWORD *)(a3 + 72);
        v31 = *(_OWORD *)(a3 + 88);
        *(_QWORD *)(a2 + 104) = *(_QWORD *)(a3 + 104);
        *(_OWORD *)(a2 + 88) = v31;
        *(_OWORD *)(a2 + 72) = v30;
        *(_OWORD *)(a2 + 56) = v29;
        *(_OWORD *)(a2 + 112) = *(_OWORD *)(a3 + 112);
        v32 = *(_OWORD *)(a3 + 128);
        *(_QWORD *)(a2 + 144) = *(_QWORD *)(a3 + 144);
        *(_OWORD *)(a2 + 128) = v32;
        *(_OWORD *)(a2 + 152) = *(_OWORD *)(a3 + 152);
        v33 = *(_OWORD *)(a3 + 168);
        *(_QWORD *)(a2 + 184) = *(_QWORD *)(a3 + 184);
        *(_OWORD *)(a2 + 168) = v33;
        *(_OWORD *)(a2 + 192) = *(_OWORD *)(a3 + 192);
        v34 = *(_OWORD *)(a3 + 208);
        *(_QWORD *)(a2 + 224) = *(_QWORD *)(a3 + 224);
        *(_OWORD *)(a2 + 208) = v34;
        *(_QWORD *)a3 = result.n128_u64[0];
        *(_QWORD *)(a3 + 104) = v69;
        *(_OWORD *)(a3 + 72) = v61;
        *(_OWORD *)(a3 + 88) = v65;
        *(_OWORD *)(a3 + 40) = v53;
        *(_OWORD *)(a3 + 56) = v57;
        *(_OWORD *)(a3 + 8) = v45;
        *(_OWORD *)(a3 + 24) = v49;
        *(_OWORD *)(a3 + 112) = v105;
        *(_QWORD *)(a3 + 144) = v101;
        *(_OWORD *)(a3 + 128) = v97;
        *(_OWORD *)(a3 + 152) = v93;
        *(_QWORD *)(a3 + 184) = v89;
        *(_OWORD *)(a3 + 168) = v85;
        *(_OWORD *)(a3 + 192) = v81;
        *(_QWORD *)(a3 + 224) = v77;
        *(_OWORD *)(a3 + 208) = v73;
        result.n128_u64[0] = *(_QWORD *)a1;
        if (*(double *)a2 < *(double *)a1)
        {
          v62 = *(_OWORD *)(a1 + 72);
          v66 = *(_OWORD *)(a1 + 88);
          v70 = *(_QWORD *)(a1 + 104);
          v46 = *(_OWORD *)(a1 + 8);
          v50 = *(_OWORD *)(a1 + 24);
          v54 = *(_OWORD *)(a1 + 40);
          v58 = *(_OWORD *)(a1 + 56);
          v106 = *(_OWORD *)(a1 + 112);
          v102 = *(_QWORD *)(a1 + 144);
          v94 = *(_OWORD *)(a1 + 152);
          v98 = *(_OWORD *)(a1 + 128);
          v90 = *(_QWORD *)(a1 + 184);
          v82 = *(_OWORD *)(a1 + 192);
          v86 = *(_OWORD *)(a1 + 168);
          v78 = *(_QWORD *)(a1 + 224);
          v74 = *(__n128 *)(a1 + 208);
          *(_QWORD *)a1 = *(_QWORD *)a2;
          v35 = *(_OWORD *)(a2 + 8);
          v36 = *(_OWORD *)(a2 + 24);
          *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
          *(_OWORD *)(a1 + 24) = v36;
          *(_OWORD *)(a1 + 8) = v35;
          v37 = *(_OWORD *)(a2 + 56);
          v38 = *(_OWORD *)(a2 + 72);
          v39 = *(_OWORD *)(a2 + 88);
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
          *(_OWORD *)(a1 + 88) = v39;
          *(_OWORD *)(a1 + 72) = v38;
          *(_OWORD *)(a1 + 56) = v37;
          *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
          v40 = *(_OWORD *)(a2 + 128);
          *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
          *(_OWORD *)(a1 + 128) = v40;
          *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
          v41 = *(_OWORD *)(a2 + 168);
          *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
          *(_OWORD *)(a1 + 168) = v41;
          *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
          v42 = *(_OWORD *)(a2 + 208);
          *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
          *(_OWORD *)(a1 + 208) = v42;
          *(_QWORD *)a2 = result.n128_u64[0];
          *(_QWORD *)(a2 + 104) = v70;
          *(_OWORD *)(a2 + 72) = v62;
          *(_OWORD *)(a2 + 88) = v66;
          *(_OWORD *)(a2 + 40) = v54;
          *(_OWORD *)(a2 + 56) = v58;
          *(_OWORD *)(a2 + 8) = v46;
          *(_OWORD *)(a2 + 24) = v50;
          *(_OWORD *)(a2 + 112) = v106;
          *(_QWORD *)(a2 + 144) = v102;
          *(_OWORD *)(a2 + 128) = v98;
          *(_OWORD *)(a2 + 152) = v94;
          *(_QWORD *)(a2 + 184) = v90;
          *(_OWORD *)(a2 + 168) = v86;
          *(_OWORD *)(a2 + 192) = v82;
          result = v74;
          *(_QWORD *)(a2 + 224) = v78;
          *(__n128 *)(a2 + 208) = v74;
        }
      }
    }
  }
  return result;
}

void sub_20EB62F1C(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20EB632AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EB632D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EB632E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

uint64_t sub_20EB63308(uint64_t a1, _DWORD *a2, uint64_t *a3, uint64_t a4, char **a5, char **a6, char a7)
{
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;
  const char *v25;
  size_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  float64x2_t v29;
  float64x2_t v30;
  double v31;
  char *v32;
  char *v33;
  int64_t v34;
  unint64_t v35;
  _QWORD *v36;
  int64_t v37;
  char *v38;
  char *v39;
  __int128 v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  unsigned int v44;
  unint64_t v45;
  char *v46;
  __int128 v47;
  __int128 v48;
  double *v49;
  double *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t i;
  unint64_t v57;
  float64x2_t *v58;
  float64x2_t *v59;
  float64x2_t *v60;
  float64x2_t *v61;
  double v62;
  float64x2_t v63;
  int v64;
  double *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  double *v70;
  unsigned __int8 v71;
  const char *v72;
  size_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  NSObject *v80;
  size_t v81;
  std::__shared_weak_count_vtbl *v82;
  std::__shared_weak_count *v83;
  std::__shared_weak_count *v84;
  unint64_t *p_shared_owners;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  float64_t v93;
  int v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  char *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  void *v114;
  float64_t v115;
  unint64_t *v116;
  unint64_t v117;
  uint64_t v118;
  int8x16_t v119;
  float64x2_t v120;
  float64x2_t v122;
  float64x2_t v123;
  char *v124;
  char **v125;
  char **v126;
  double *v127;
  unsigned int v128;
  double *v129;
  double *v130;
  char *v131;
  double *v132;
  double *v133;
  double *v134;
  double v135;
  double v136;
  double v137;
  double v138;
  double *v139;
  double v140;
  double v141;
  double v142;
  double v143;
  double v144;
  double v145;
  double v146;
  double v147;
  double v148;
  double v149;
  double v150;
  double v151;
  int64_t v152;
  unint64_t v153;
  unint64_t v154;
  double *v155;
  unint64_t v156;
  uint64_t v157;
  double *v158;
  unint64_t v159;
  double *v160;
  char *v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t v164;
  int v165;
  uint64_t v166;
  float64_t *v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  __int128 v176;
  __int128 v177;
  float64x2_t *v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  __int128 v183;
  float64x2_t v184;
  __int128 v185;
  float64x2_t v186;
  float64x2_t v187;
  float64_t v188;
  float64x2_t v189;
  float64_t v190;
  double *v191;
  char *v192;
  char *v193;
  double v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  float64x2_t v199;
  float64x2_t v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  float64_t v214;
  float64x2_t v215;
  float64_t v216;
  uint64_t v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  __int128 v241;
  double *v242;
  double v243;
  float64x2_t *v244;
  double *v245;
  double v246;
  float64x2_t v247;
  float64x2_t v248;
  float64x2_t v249;
  float64x2_t v250;
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v253;
  __int128 v254;
  float64x2_t v255;
  float64x2_t v256;
  float64x2_t v257;
  float64x2_t v258;
  float64x2_t v259;
  float64x2_t v260;
  __int128 v261;
  __int128 v262;
  float64_t v263;
  float64x2_t v264;
  float64_t v265;
  double v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  float64x2_t v271;
  float64x2_t v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  float64_t v286;
  float64x2_t v287;
  float64_t v288;
  double *v289;
  double v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  float64x2_t v295;
  float64x2_t v296;
  float64x2_t v297;
  float64x2_t v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  float64_t v310;
  float64x2_t v311;
  float64_t v312;
  unint64_t v313;
  unint64_t v314;
  unint64_t v315;
  char *v316;
  double *v317;
  float64_t v318;
  float64_t *v319;
  float64_t *v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  float64x2_t v325;
  float64x2_t v326;
  float64x2_t v327;
  float64x2_t v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  float64x2_t v341;
  float64x2_t v342;
  float64x2_t v343;
  __int128 v344;
  size_t v345;
  char *v346;
  size_t v347;
  unint64_t v348;
  double v349;
  double *v350;
  unint64_t v351;
  uint64_t v352;
  double *v353;
  double v354;
  unint64_t v355;
  uint64_t v356;
  double v357;
  double v358;
  int8x16_t v359;
  double v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  char v366;
  uint64_t v367;
  char *v368;
  char *v369;
  char *v370;
  char *v371;
  char *v372;
  char *v373;
  char *v374;
  char *v375;
  char *v376;
  int v377;
  unint64_t v378;
  unint64_t v379;
  uint64_t v380;
  size_t v381;
  const char *v382;
  char *v383;
  uint64_t v384;
  unint64_t v385;
  uint64_t v386;
  unint64_t v387;
  char *v388;
  char *v389;
  unint64_t v390;
  char *v391;
  char *v392;
  uint64_t v393;
  unint64_t v394;
  uint64_t v395;
  unint64_t v396;
  char *v397;
  char *v398;
  char *v399;
  unint64_t v400;
  char *v401;
  char *v402;
  uint64_t v403;
  unint64_t v404;
  uint64_t v405;
  unint64_t v406;
  char *v407;
  char *v408;
  char *v409;
  unint64_t v410;
  char *v411;
  char *v412;
  uint64_t v413;
  unint64_t v414;
  uint64_t v415;
  unint64_t v416;
  char *v417;
  char *v418;
  char *v419;
  float64x2_t v420;
  char *v421;
  char *v422;
  char *v423;
  int v424;
  double v425;
  __n128 v427;
  float64x2_t v428;
  __n128 v429;
  float64x2_t v430;
  double v431;
  double v432;
  float64x2_t v433;
  double v434;
  double v435;
  uint64_t v436;
  double v437;
  double v442;
  unint64_t v443;
  char *v444;
  uint64_t v445;
  uint64_t v446;
  unint64_t v447;
  uint64_t v448;
  unint64_t v449;
  _BYTE *v450;
  char *v451;
  int64_t v452;
  unint64_t v453;
  char *v454;
  int v455;
  unint64_t v456;
  uint64_t v457;
  uint64_t v458;
  float64x2_t *v459;
  float64x2_t *v460;
  uint64_t v461;
  char *v462;
  unint64_t v463;
  unint64_t *v464;
  unint64_t v465;
  uint64_t v466;
  unint64_t v467;
  int v468;
  unint64_t v469;
  unint64_t v470;
  double v472;
  uint64_t v473;
  size_t v474;
  const char *v475;
  int v476;
  unint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t *v480;
  char *v481;
  char *v482;
  unsigned __int8 v483;
  const char *v484;
  size_t v485;
  char *v486;
  unint64_t v487;
  const char *v488;
  uint64_t v489;
  int v490;
  uint64_t v491;
  uint64_t v492;
  char *v493;
  uint64_t v494;
  uint64_t v495;
  NSObject *v496;
  size_t v497;
  std::__shared_weak_count_vtbl *v498;
  std::__shared_weak_count *v499;
  std::__shared_weak_count *v500;
  unint64_t *v501;
  unint64_t v502;
  unint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  float64_t v508;
  std::__shared_weak_count *v509;
  unint64_t *v510;
  unint64_t v511;
  std::__shared_weak_count *v512;
  unint64_t *v513;
  unint64_t v514;
  char *v515;
  std::__shared_weak_count *v516;
  unint64_t *v517;
  unint64_t v518;
  std::__shared_weak_count *v519;
  unint64_t *v520;
  unint64_t v521;
  std::__shared_weak_count *v522;
  unint64_t *v523;
  unint64_t v524;
  std::__shared_weak_count *v525;
  unint64_t *v526;
  unint64_t v527;
  void *v528;
  float64_t v529;
  unint64_t *v530;
  unint64_t v531;
  unsigned __int8 v532;
  const char *v533;
  size_t v534;
  char *v535;
  unint64_t v536;
  const char *v537;
  int v538;
  uint64_t v539;
  uint64_t v540;
  char *v541;
  uint64_t v542;
  uint64_t v543;
  NSObject *v544;
  double v545;
  size_t v546;
  std::__shared_weak_count_vtbl *v547;
  std::__shared_weak_count *v548;
  std::__shared_weak_count *v549;
  unint64_t *v550;
  unint64_t v551;
  unint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  float64_t v558;
  std::__shared_weak_count *v559;
  unint64_t *v560;
  unint64_t v561;
  std::__shared_weak_count *v562;
  unint64_t *v563;
  unint64_t v564;
  char *v565;
  std::__shared_weak_count *v566;
  unint64_t *v567;
  unint64_t v568;
  std::__shared_weak_count *v569;
  unint64_t *v570;
  unint64_t v571;
  std::__shared_weak_count *v572;
  unint64_t *v573;
  unint64_t v574;
  std::__shared_weak_count *v575;
  unint64_t *v576;
  unint64_t v577;
  void *v578;
  unint64_t *v579;
  char *v580;
  unsigned __int8 v582;
  float64_t v583;
  const char *v584;
  NSObject *v585;
  unint64_t v586;
  uint64_t v587;
  unint64_t v588;
  char *v589;
  char *v590;
  unint64_t v591;
  unint64_t v592;
  char **v593;
  uint64_t v594;
  char **v595;
  unint64_t v596;
  uint64_t v597;
  float64_t v598;
  char *v599;
  unint64_t v600;
  float64_t v601;
  uint64_t v602;
  char *v603;
  double v604;
  double *v605;
  void *v606[2];
  unint64_t v607;
  unint64_t v608;
  double v609;
  int8x16_t v610;
  double v611;
  double v612;
  double v613;
  unint64_t v614;
  double v615;
  int8x16_t v616;
  double v617;
  __n128 v618;
  uint64_t v619;
  double v620;
  unint64_t v621;
  char *v622;
  __n128 v623;
  uint64_t v624;
  int v625;
  double v626;
  unsigned int v627;
  unint64_t v628;
  uint64_t v629;
  uint64_t v630;
  void *v631;
  char *v632;
  uint64_t v633;
  char *v634;
  char *v635;
  void *v636;
  _BYTE *v637;
  char *v638;
  float64x2_t v639;
  float64x2_t v640[4];
  float64x2_t v641;
  _OWORD v642[4];
  _OWORD __src[17];
  char *category[2];
  float64_t v645;
  uint64_t v646;
  float64x2_t v647;
  float64x2_t v648;
  float64_t v649;
  __int128 v650;
  float64_t v651;
  float64x2_t v652;
  float64x2_t v653;
  float64x2_t v654;
  float64x2_t v655;
  uint64_t v656;

  v656 = *MEMORY[0x24BDAC8D0];
  if (((a2[2] - *a2) & 8) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/RANSAC/P3PPreemptiveRansac.cpp", 40, (uint64_t)"xs.size() % 2 == 0", 18, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_624;
  }
  v14 = (a3[1] - *a3) >> 3;
  if (0xAAAAAAAAAAAAAAABLL * v14 >= 0x5555555555555556)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/RANSAC/P3PPreemptiveRansac.cpp", 41, (uint64_t)"Xs.size() % 3 == 0", 18, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_624;
    }
    v14 = (a3[1] - *a3) >> 3;
  }
  v15 = *(_QWORD *)a2;
  v16 = *((_QWORD *)a2 + 1) - *(_QWORD *)a2;
  v17 = (unint64_t)(v16 >> 3) >> 1;
  if (v17 == v14 / 3)
    goto LABEL_9;
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/RANSAC/P3PPreemptiveRansac.cpp", 42, (uint64_t)"xs.size() / 2 == Xs.size() / 3", 30, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_624:
    abort();
  }
  v15 = *(_QWORD *)a2;
  v16 = *((_QWORD *)a2 + 1) - *(_QWORD *)a2;
  v17 = (unint64_t)(v16 >> 3) >> 1;
LABEL_9:
  v18 = *(unint64_t **)(a1 + 32);
  v19 = *(unint64_t **)(a1 + 40);
  if (v18 == v19)
  {
LABEL_12:
    sub_20EB67274(&v650);
    if (**(int **)(v650 + 56) > 2)
      return 0;
    v20 = *(unsigned __int8 *)(v650 + 72);
    v21 = sub_20E8C31DC(v650, "OSLogSurrogateAppender", 1, 0);
    v22 = v21;
    _ZF = !v20 && v21 == 0;
    if (_ZF)
      return 0;
    v625 = v20;
    *(_QWORD *)&v639.f64[0] = &v650;
    *(std::chrono::steady_clock::time_point *)&v639.f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
    *(std::chrono::system_clock::time_point *)&v640[0].f64[0] = (std::chrono::system_clock::time_point)std::chrono::system_clock::now().__d_.__rep_;
    LODWORD(v640[0].f64[1]) = 2;
    *(_QWORD *)&v640[1].f64[0] = "unknown file";
    LODWORD(v640[1].f64[1]) = 55;
    v640[2].f64[1] = 0.0;
    v640[3].f64[0] = 0.0;
    *(_QWORD *)&v640[2].f64[0] = "unknown function";
    v24 = v650;
    v25 = (const char *)(v650 + 16);
    v619 = v650 + 16;
    if (*(char *)(v650 + 39) < 0)
    {
      v25 = *(const char **)(v650 + 16);
      v26 = *(_QWORD *)(v650 + 24);
      v591 = v17;
      v71 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v71 & 1) != 0)
        goto LABEL_78;
    }
    else
    {
      v26 = *(unsigned __int8 *)(v650 + 39);
      v591 = v17;
      v27 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v27 & 1) != 0)
        goto LABEL_78;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)__src);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__src);
      if (BYTE8(__src[1]) && SBYTE7(__src[1]) < 0)
        operator delete(*(void **)&__src[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_78:
    if (byte_254A4A4F8[23] >= 0)
      v72 = byte_254A4A4F8;
    else
      v72 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v73 = byte_254A4A4F8[23];
    else
      v73 = *(_QWORD *)&byte_254A4A4F8[8];
    *(_QWORD *)&__src[0] = os_log_create(v72, v25);
    v74 = (char *)__src + 8;
    if (v73 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v73 >= 0x17)
    {
      v75 = (v73 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v73 | 7) != 0x17)
        v75 = v73 | 7;
      v76 = v75 + 1;
      v74 = (char *)operator new(v75 + 1);
      *((_QWORD *)&__src[1] + 1) = v76 | 0x8000000000000000;
      *((_QWORD *)&__src[0] + 1) = v74;
      *(_QWORD *)&__src[1] = v73;
    }
    else
    {
      HIBYTE(__src[1]) = v73;
      if (!v73)
      {
LABEL_92:
        v74[v73] = 0;
        LOBYTE(__src[2]) = 1;
        v77 = (char *)&__src[2] + 8;
        if (v26 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v26 >= 0x17)
        {
          v78 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v26 | 7) != 0x17)
            v78 = v26 | 7;
          v79 = v78 + 1;
          v77 = (char *)operator new(v78 + 1);
          *((_QWORD *)&__src[3] + 1) = v79 | 0x8000000000000000;
          *((_QWORD *)&__src[2] + 1) = v77;
          *(_QWORD *)&__src[3] = v26;
        }
        else
        {
          HIBYTE(__src[3]) = v26;
          if (!v26)
            goto LABEL_100;
        }
        memmove(v77, v25, v26);
LABEL_100:
        v77[v26] = 0;
        LOBYTE(__src[4]) = 1;
        v80 = *(NSObject **)&__src[0];
        if (SHIBYTE(__src[3]) < 0)
          operator delete(*((void **)&__src[2] + 1));
        if (LOBYTE(__src[2]) && SHIBYTE(__src[1]) < 0)
          operator delete(*((void **)&__src[0] + 1));
        if (*(_QWORD *)&__src[0])
          os_release(*(void **)&__src[0]);
        if (v22 && *(_QWORD *)(v22 + 24))
        {
          v81 = _os_log_pack_size();
          v82 = (std::__shared_weak_count_vtbl *)operator new(v81, (std::align_val_t)8uLL);
          v83 = (std::__shared_weak_count *)operator new();
          v84 = v83;
          v83->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v83->__shared_owners_;
          v83->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v83->__shared_weak_owners_ = 0;
          v83[1].__vftable = v82;
          *(_QWORD *)&__src[0] = v82;
          *((_QWORD *)&__src[0] + 1) = v82;
          *(_QWORD *)&__src[1] = v83;
          do
            v86 = __ldxr(p_shared_owners);
          while (__stxr(v86 + 1, p_shared_owners));
          __src[2] = 0uLL;
          *((_QWORD *)&__src[1] + 1) = 0;
          do
            v87 = __ldaxr(p_shared_owners);
          while (__stlxr(v87 - 1, p_shared_owners));
          if (!v87)
          {
            ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
            std::__shared_weak_count::__release_weak(v84);
          }
          v88 = *(_QWORD *)&__src[0];
          v89 = _os_log_pack_fill();
          *(_DWORD *)v89 = 134217984;
          *(_QWORD *)(v89 + 4) = v591;
          v90 = operator new();
          v91 = *(unsigned __int8 *)(v24 + 39);
          v92 = v619;
          if ((v91 & 0x80u) != 0)
          {
            v92 = *(_QWORD *)(v24 + 16);
            v91 = *(_QWORD *)(v24 + 24);
          }
          *(_QWORD *)v90 = v88;
          *(_OWORD *)(v90 + 8) = *(_OWORD *)((char *)__src + 8);
          *((_QWORD *)&__src[0] + 1) = 0;
          *(_QWORD *)&__src[1] = 0;
          *(_OWORD *)(v90 + 24) = *(_OWORD *)((char *)&__src[1] + 8);
          *((_QWORD *)&__src[1] + 1) = 0;
          *(_QWORD *)&__src[2] = 0;
          *(_QWORD *)(v90 + 40) = v92;
          *(_QWORD *)(v90 + 48) = v91;
          *(_BYTE *)(v90 + 56) = 2;
          category[0] = 0;
          *(_QWORD *)&v647.f64[0] = v90;
          (*(void (**)(_QWORD, float64x2_t *))(**(_QWORD **)(v22 + 24) + 40))(*(_QWORD *)(v22 + 24), &v647);
          v93 = v647.f64[0];
          v647.f64[0] = 0.0;
          v94 = v625;
          if (v93 != 0.0)
          {
            v95 = *(std::__shared_weak_count **)(*(_QWORD *)&v93 + 32);
            if (v95)
            {
              v96 = (unint64_t *)&v95->__shared_owners_;
              do
                v97 = __ldaxr(v96);
              while (__stlxr(v97 - 1, v96));
              if (!v97)
              {
                ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                std::__shared_weak_count::__release_weak(v95);
              }
            }
            v98 = *(std::__shared_weak_count **)(*(_QWORD *)&v93 + 16);
            if (v98)
            {
              v99 = (unint64_t *)&v98->__shared_owners_;
              do
                v100 = __ldaxr(v99);
              while (__stlxr(v100 - 1, v99));
              if (!v100)
              {
                ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                std::__shared_weak_count::__release_weak(v98);
              }
            }
            MEMORY[0x212BC6398](*(_QWORD *)&v93, 0x10F0C40B62ED6C6);
            v101 = category[0];
            category[0] = 0;
            if (v101)
            {
              v102 = (std::__shared_weak_count *)*((_QWORD *)v101 + 4);
              if (v102)
              {
                v103 = (unint64_t *)&v102->__shared_owners_;
                do
                  v104 = __ldaxr(v103);
                while (__stlxr(v104 - 1, v103));
                if (!v104)
                {
                  ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                  std::__shared_weak_count::__release_weak(v102);
                }
              }
              v105 = (std::__shared_weak_count *)*((_QWORD *)v101 + 2);
              if (v105)
              {
                v106 = (unint64_t *)&v105->__shared_owners_;
                do
                  v107 = __ldaxr(v106);
                while (__stlxr(v107 - 1, v106));
                if (!v107)
                {
                  ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                  std::__shared_weak_count::__release_weak(v105);
                }
              }
              MEMORY[0x212BC6398](v101, 0x10F0C40B62ED6C6);
            }
          }
          v108 = *(std::__shared_weak_count **)&__src[2];
          if (*(_QWORD *)&__src[2])
          {
            v109 = (unint64_t *)(*(_QWORD *)&__src[2] + 8);
            do
              v110 = __ldaxr(v109);
            while (__stlxr(v110 - 1, v109));
            if (!v110)
            {
              ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
              std::__shared_weak_count::__release_weak(v108);
            }
          }
          v111 = *(std::__shared_weak_count **)&__src[1];
          if (*(_QWORD *)&__src[1])
          {
            v112 = (unint64_t *)(*(_QWORD *)&__src[1] + 8);
            do
              v113 = __ldaxr(v112);
            while (__stlxr(v113 - 1, v112));
            if (!v113)
            {
              ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
              std::__shared_weak_count::__release_weak(v111);
            }
          }
        }
        else
        {
          os_log_type_enabled(v80, OS_LOG_TYPE_DEBUG);
          LODWORD(__src[0]) = 134217984;
          *(_QWORD *)((char *)__src + 4) = v591;
          v114 = (void *)_os_log_send_and_compose_impl();
          v94 = v625;
          if (v114)
            free(v114);
        }
        if (v94)
        {
          sub_20E8C003C((uint64_t)&v639, "Not enough correspondences available (%zu)", v591);
          sub_20E863570((uint64_t)&v639);
        }
        sub_20E863570((uint64_t)&v639);
        v115 = v640[3].f64[0];
        if (*(_QWORD *)&v640[3].f64[0])
        {
          v116 = (unint64_t *)(*(_QWORD *)&v640[3].f64[0] + 8);
          do
            v117 = __ldaxr(v116);
          while (__stlxr(v117 - 1, v116));
          if (!v117)
          {
            (*(void (**)(float64_t))(**(_QWORD **)&v115 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v115));
            std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v115);
          }
        }
        return 0;
      }
    }
    memmove(v74, v72, v73);
    goto LABEL_92;
  }
  while (v17 < *v18)
  {
    if (++v18 == v19)
      goto LABEL_12;
  }
  v631 = 0;
  v632 = 0;
  v633 = 0;
  v28 = *a3;
  *(_QWORD *)&__src[0] = v15;
  *((_QWORD *)&__src[0] + 1) = v28;
  sub_20EB59674((uint64_t)&v631, __src, v17);
  v31 = *(double *)(a1 + 24);
  v608 = *(_QWORD *)(a1 + 8);
  v596 = *(_QWORD *)a1;
  v587 = a4;
  v588 = *(_QWORD *)(a1 + 16);
  v636 = 0;
  v637 = 0;
  v638 = 0;
  v32 = (char *)v631;
  v33 = v632;
  v34 = v632 - (_BYTE *)v631;
  v592 = v17;
  v586 = v16;
  if (v632 == v631)
    goto LABEL_29;
  v35 = 0xCCCCCCCCCCCCCCCDLL * (v34 >> 3);
  if (v35 >= 0x666666666666667)
    sub_20E867F44();
  v36 = operator new(v34);
  v37 = 0;
  v636 = v36;
  v638 = (char *)&v36[5 * v35];
  do
  {
    v38 = &v32[v37];
    v39 = (char *)&v36[(unint64_t)v37 / 8];
    *(_OWORD *)v39 = *(_OWORD *)&v32[v37];
    v40 = *(_OWORD *)&v32[v37 + 16];
    *((_QWORD *)v39 + 4) = *(_QWORD *)&v32[v37 + 32];
    *((_OWORD *)v39 + 1) = v40;
    v37 += 40;
  }
  while (v38 + 40 != v33);
  v41 = v37 / 40;
  v637 = &v36[5 * (v37 / 40)];
  if (!v37)
  {
LABEL_29:
    v44 = 12345;
    v45 = v596;
    v593 = a6;
    v595 = a5;
    if (v596)
      goto LABEL_31;
  }
  else
  {
    v42 = 0;
    v43 = v36 + 4;
    v44 = 12345;
    v45 = v596;
    do
    {
      v44 = 214013 * v44 + 2531011;
      v46 = (char *)&v36[5 * ((HIWORD(v44) & 0x7FFF) % v41) + 5 * v42];
      v47 = *(_OWORD *)v46;
      *(_OWORD *)v46 = *((_OWORD *)v43 - 2);
      *((_OWORD *)v43 - 2) = v47;
      v48 = *((_OWORD *)v46 + 1);
      *((_OWORD *)v46 + 1) = *((_OWORD *)v43 - 1);
      *((_OWORD *)v43 - 1) = v48;
      *(_QWORD *)&v48 = *((_QWORD *)v46 + 4);
      *((_QWORD *)v46 + 4) = *v43;
      *v43 = v48;
      v43 += 5;
      ++v42;
      --v41;
    }
    while (v41);
    v593 = a6;
    v595 = a5;
    if (v596)
      goto LABEL_31;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/RANSAC/HypothesisUtil.h", 104, (uint64_t)"max_hypothesis > 0", 18, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_629;
  }
LABEL_31:
  if (v45 > v608
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/RANSAC/HypothesisUtil.h", 105, (uint64_t)"max_hypothesis <= max_trials", 28, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_629:
    abort();
  }
  v594 = a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((v637 - (_BYTE *)v636) >> 3) >= 4)
  {
    if (v45)
    {
      if (v45 > 0xF83E0F83E0F83ELL)
        sub_20E867F44();
      v50 = (double *)operator new(264 * v45);
      v599 = (char *)&v50[33 * v45];
      v605 = v50;
      if (v608)
        goto LABEL_38;
    }
    else
    {
      v605 = 0;
      v599 = 0;
      if (v608)
      {
LABEL_38:
        v51 = 0;
        v49 = v605;
        while (1)
        {
          *(_QWORD *)&__src[0] = 0;
          *(_OWORD *)((char *)&__src[6] + 8) = 0u;
          *(_OWORD *)((char *)&__src[7] + 8) = 0u;
          *(_OWORD *)((char *)&__src[8] + 8) = 0u;
          *(_OWORD *)((char *)&__src[9] + 8) = 0u;
          *(_OWORD *)((char *)&__src[10] + 8) = 0u;
          *(_OWORD *)((char *)&__src[11] + 8) = 0u;
          *(_OWORD *)((char *)&__src[12] + 8) = 0u;
          *(_OWORD *)((char *)&__src[13] + 8) = 0u;
          *(_OWORD *)((char *)&__src[14] + 8) = 0u;
          *(_OWORD *)((char *)&__src[15] + 8) = 0u;
          memset(v642, 0, sizeof(v642));
          v641 = 0u;
          v639 = 0u;
          memset(v640, 0, sizeof(v640));
          v53 = (char *)v636;
          v54 = 0xCCCCCCCCCCCCCCCDLL * ((v637 - (_BYTE *)v636) >> 3);
          if (v54 <= 3)
          {
            v55 = v51;
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/RANSAC/DataPointCorrespondenceUtil.h", 92, (uint64_t)"correspondences.size() >= SampleSize", 36, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              abort();
            }
            v53 = (char *)v636;
            v54 = 0xCCCCCCCCCCCCCCCDLL * ((v637 - (_BYTE *)v636) >> 3);
            v51 = v55;
          }
          for (i = 0; i < 4; ++i)
          {
            v44 = 214013 * v44 + 2531011;
            v57 = (HIWORD(v44) & 0x7FFF) % v54;
            category[i] = (char *)v57;
            if (i
              && (category[0] == (char *)v57
               || i != 1 && (category[1] == (char *)v57 || i != 2 && *(_QWORD *)&v645 == v57)))
            {
              --i;
            }
          }
          v58 = (float64x2_t *)&v53[40 * (uint64_t)category[0]];
          v649 = v58[2].f64[0];
          v648 = v58[1];
          v639 = *v58;
          v640[1].f64[0] = v649;
          v640[0] = v648;
          v59 = (float64x2_t *)&v53[40 * (uint64_t)category[1]];
          v649 = v59[2].f64[0];
          v648 = v59[1];
          *(float64x2_t *)((char *)&v640[1] + 8) = *v59;
          v640[3].f64[1] = v649;
          *(float64x2_t *)((char *)&v640[2] + 8) = v648;
          v60 = (float64x2_t *)&v53[40 * *(_QWORD *)&v645];
          v649 = v60[2].f64[0];
          v648 = v60[1];
          v641 = *v60;
          *(float64_t *)&v642[1] = v649;
          v642[0] = v648;
          v61 = (float64x2_t *)&v53[40 * v646];
          v649 = v61[2].f64[0];
          v648 = v61[1];
          *(float64x2_t *)((char *)&v642[1] + 8) = *v61;
          v63.f64[1] = v648.f64[1];
          *(float64x2_t *)((char *)&v642[2] + 8) = v648;
          v30.f64[0] = v639.f64[0] * (v640[2].f64[0] - v641.f64[1]);
          *((float64_t *)&v642[3] + 1) = v649;
          v62 = v30.f64[0] + v640[1].f64[1] * (v641.f64[1] - v639.f64[1]);
          v63.f64[0] = fabs(v641.f64[0] * (v639.f64[1] - v640[2].f64[0]) + v62);
          if (v63.f64[0] >= 0.001)
          {
            v602 = v51;
            v29.f64[0] = v641.f64[1] - v639.f64[1];
            v64 = sub_20EB7AD54((_OWORD *)((char *)__src + 8), &v639, (uint64_t)&v640[1].f64[1], &v641, (double *)&v642[1] + 1, v640, (float64x2_t *)&v640[2].f64[1], (uint64_t)v642, v63, v62, v29, v641.f64[0], v30, (double *)&v642[2] + 1);
            *(float64x2_t *)((char *)&__src[6] + 8) = v639;
            *(float64x2_t *)((char *)&__src[7] + 8) = v640[0];
            *((_QWORD *)&__src[8] + 1) = *(_QWORD *)&v640[1].f64[0];
            __src[9] = *(float64x2_t *)((char *)&v640[1] + 8);
            __src[10] = *(float64x2_t *)((char *)&v640[2] + 8);
            *(float64_t *)&__src[11] = v640[3].f64[1];
            *(float64x2_t *)((char *)&__src[11] + 8) = v641;
            *((_QWORD *)&__src[13] + 1) = *(_QWORD *)&v642[1];
            *(_OWORD *)((char *)&__src[12] + 8) = v642[0];
            __src[14] = *(_OWORD *)((char *)&v642[1] + 8);
            *(_QWORD *)&__src[16] = *((_QWORD *)&v642[3] + 1);
            __src[15] = *(_OWORD *)((char *)&v642[2] + 8);
            if (v64)
            {
              if (v49 < (double *)v599)
              {
                memcpy(v49, __src, 0x108uLL);
                v49 += 33;
                v52 = (char *)v605;
              }
              else
              {
                v65 = v49;
                v66 = 0xF83E0F83E0F83E1 * (v49 - v605);
                v67 = v66 + 1;
                if ((unint64_t)(v66 + 1) > 0xF83E0F83E0F83ELL)
                  sub_20E867F44();
                if (0x1F07C1F07C1F07C2 * ((v599 - (char *)v605) >> 3) > v67)
                  v67 = 0x1F07C1F07C1F07C2 * ((v599 - (char *)v605) >> 3);
                v68 = (unint64_t)(0xF83E0F83E0F83E1 * ((v599 - (char *)v605) >> 3)) >= 0x7C1F07C1F07C1FLL
                    ? 0xF83E0F83E0F83ELL
                    : v67;
                if (v68)
                {
                  if (v68 > 0xF83E0F83E0F83ELL)
                    sub_20E877A38();
                  v69 = (char *)operator new(264 * v68);
                }
                else
                {
                  v69 = 0;
                }
                v600 = v68;
                v590 = v69;
                v52 = &v69[264 * v66];
                memcpy(v52, __src, 0x108uLL);
                v589 = v52;
                if (v65 == v605)
                {
                  v70 = v605;
                }
                else
                {
                  v70 = v605;
                  do
                  {
                    v52 -= 264;
                    v65 -= 33;
                    memcpy(v52, v65, 0x108uLL);
                  }
                  while (v65 != v605);
                }
                v599 = &v590[264 * v600];
                if (v70)
                  operator delete(v70);
                v49 = (double *)(v589 + 264);
              }
              v605 = (double *)v52;
              if (0xF83E0F83E0F83E1 * (((char *)v49 - v52) >> 3) == v596)
                goto LABEL_162;
            }
            v51 = v602;
          }
          if (++v51 == v608)
            goto LABEL_162;
        }
      }
    }
    v49 = v605;
    goto LABEL_162;
  }
  v605 = 0;
  v49 = 0;
  v599 = 0;
LABEL_162:
  sub_20EB5F7B8((uint64_t *)&v636, v588, &v634);
  v124 = v634;
  v603 = v635;
  v125 = v595;
  v126 = v593;
  if (v634 == v635)
  {
    v366 = 0;
    v361 = 0;
    v362 = 0;
    v364 = 0;
    v363 = 0;
    v598 = 0.0;
    v601 = 0.0;
    v365 = 0;
    v597 = 0;
    v360 = 0.0;
    v628 = 0;
    v119.i64[0] = 0;
    v623 = (__n128)v119;
    v119.i64[0] = 0;
    v618 = (__n128)v119;
    v119.i64[0] = 0;
    v616 = v119;
    *(double *)&v614 = 0.0;
    v612 = 0.0;
    v119.i64[0] = 0;
    v610 = v119;
    *(double *)&v607 = 0.0;
    v604 = 0.0;
    v358 = 0.0;
    v357 = 0.0;
    v367 = v594;
    v127 = v605;
    if (!v634)
      goto LABEL_294;
    goto LABEL_293;
  }
  v127 = v605;
  if (v605 == v49)
  {
    v366 = 0;
    v361 = 0;
    v362 = 0;
    v364 = 0;
    v363 = 0;
    v598 = 0.0;
    v601 = 0.0;
    v365 = 0;
    v597 = 0;
    v360 = 0.0;
    v628 = 0;
    v119.i64[0] = 0;
    v623 = (__n128)v119;
    v119.i64[0] = 0;
    v618 = (__n128)v119;
    v119.i64[0] = 0;
    v616 = v119;
    *(double *)&v614 = 0.0;
    v612 = 0.0;
    v119.i64[0] = 0;
    v610 = v119;
    *(double *)&v607 = 0.0;
    v604 = 0.0;
    v358 = 0.0;
    v357 = 0.0;
    v367 = v594;
    v124 = v634;
    if (v634)
      goto LABEL_293;
    goto LABEL_294;
  }
  v128 = 0;
  v120.f64[0] = 1.0;
  v129 = v605;
  v130 = v49;
  v131 = v634;
  do
  {
    if (v129 == v130)
    {
      v133 = *(double **)v131;
      v132 = (double *)*((_QWORD *)v131 + 1);
      v152 = (char *)v130 - (char *)v129;
      v153 = 0xF83E0F83E0F83E1 * (v130 - v129);
      if (v153 < 2)
        goto LABEL_276;
    }
    else
    {
      v133 = *(double **)v131;
      v132 = (double *)*((_QWORD *)v131 + 1);
      v134 = v129;
      if (*(double **)v131 == v132)
      {
        v154 = (char *)v130 - (char *)v129 - 264;
        v155 = v129;
        _Q2.f64[0] = 0.0;
        if (v154 < 0x108)
          goto LABEL_665;
        v156 = v154 / 0x108 + 1;
        v155 = &v129[33 * (v156 & 0x1FFFFFFFFFFFFFELL)];
        v157 = v156 & 0x1FFFFFFFFFFFFFELL;
        v158 = v129;
        do
        {
          v120.f64[0] = v158[33] + 0.0;
          *v158 = *v158 + 0.0;
          v158[33] = v120.f64[0];
          v158 += 66;
          v157 -= 2;
        }
        while (v157);
        if (v156 != (v156 & 0x1FFFFFFFFFFFFFELL))
        {
LABEL_665:
          do
          {
            *v155 = *v155 + 0.0;
            v155 += 33;
          }
          while (v155 != v130);
        }
        v132 = v133;
        v152 = (char *)v130 - (char *)v129;
        v153 = 0xF83E0F83E0F83E1 * (v130 - v129);
        if (v153 < 2)
          goto LABEL_276;
      }
      else
      {
        do
        {
          v626 = v134[1];
          v620 = v134[2];
          v617 = v134[3];
          v615 = v134[4];
          v613 = v134[5];
          v611 = v134[6];
          v135 = v134[8];
          v609 = v134[7];
          v136 = v134[9];
          v137 = v134[10];
          v138 = 0.0;
          v139 = v133;
          v140 = v134[11];
          v141 = v134[12];
          do
          {
            v142 = v139[2];
            v143 = v139[3];
            v144 = v139[4];
            v145 = v615 + v626 * v142 + v620 * v143 + v617 * v144;
            v146 = v135 + v613 * v142 + v611 * v143 + v609 * v144;
            v147 = v141 + v136 * v142 + v137 * v143 + v140 * v144;
            if (v147 == 0.0)
              v148 = 1.0;
            else
              v148 = 1.0 / v147;
            v149 = v145 * v148;
            v150 = *v139;
            v151 = v139[1];
            v139 += 5;
            v138 = v138
                 + log1p(1.0 / (v31 * v31) * ((v149 - v150) * (v149 - v150) + (v146 * v148 - v151)
                                                                            * (v146 * v148 - v151)));
          }
          while (v139 != v132);
          *v134 = v138 + *v134;
          v134 += 33;
        }
        while (v134 != v130);
        v152 = (char *)v130 - (char *)v129;
        v153 = 0xF83E0F83E0F83E1 * (v130 - v129);
        if (v153 < 2)
          goto LABEL_276;
      }
    }
    v627 = v128;
    v159 = (v153 - 1) >> 1;
    if (v152 == 528)
      v159 = 1;
    v160 = &v129[33 * v159];
    if (v160 != v130)
    {
      v621 = v159;
      v161 = v131;
      do
      {
        v162 = 0xF83E0F83E0F83E1 * (v130 - v129);
        if (v162 < 2)
          break;
        if (v162 == 3)
        {
          sub_20EB6A360((uint64_t)v129, (uint64_t)(v129 + 33), (uint64_t)(v130 - 33));
          break;
        }
        if (v162 == 2)
        {
          v289 = v130 - 33;
          v120.f64[0] = *(v130 - 33);
          v290 = *v129;
          if (v120.f64[0] < *v129)
          {
            v291 = *(_OWORD *)(v129 + 3);
            __src[0] = *(_OWORD *)(v129 + 1);
            __src[1] = v291;
            v292 = *(_OWORD *)(v129 + 5);
            v293 = *(_OWORD *)(v129 + 7);
            v294 = *(_OWORD *)(v129 + 11);
            __src[4] = *(_OWORD *)(v129 + 9);
            __src[5] = v294;
            __src[2] = v292;
            __src[3] = v293;
            v295 = *(float64x2_t *)(v129 + 13);
            v296 = *(float64x2_t *)(v129 + 15);
            v640[0].f64[0] = v129[17];
            v639 = v296;
            v297 = *(float64x2_t *)(v129 + 20);
            v654 = *(float64x2_t *)(v129 + 18);
            v655 = v295;
            v648.f64[0] = v129[22];
            v647 = v297;
            v298 = *(float64x2_t *)(v129 + 23);
            v299 = *(_OWORD *)(v129 + 25);
            v645 = v129[27];
            *(_OWORD *)category = v299;
            v300 = *((_OWORD *)v129 + 15);
            v652 = *(float64x2_t *)(v129 + 28);
            v653 = v298;
            v651 = v129[32];
            v650 = v300;
            *v129 = *v289;
            v301 = *((_OWORD *)v130 - 16);
            *(_OWORD *)(v129 + 3) = *((_OWORD *)v130 - 15);
            *(_OWORD *)(v129 + 1) = v301;
            v302 = *((_OWORD *)v130 - 14);
            _Q2 = *(float64x2_t *)(v130 - 26);
            v303 = *((_OWORD *)v130 - 12);
            v123 = *(float64x2_t *)(v130 - 22);
            *(float64x2_t *)(v129 + 11) = v123;
            *(_OWORD *)(v129 + 9) = v303;
            *(float64x2_t *)(v129 + 7) = _Q2;
            *(_OWORD *)(v129 + 5) = v302;
            *(_OWORD *)(v129 + 13) = *((_OWORD *)v130 - 10);
            v304 = *((_OWORD *)v130 - 9);
            v129[17] = *(v130 - 16);
            *(_OWORD *)(v129 + 15) = v304;
            *((_OWORD *)v129 + 9) = *(_OWORD *)(v130 - 15);
            v305 = *(_OWORD *)(v130 - 13);
            v129[22] = *(v130 - 11);
            *((_OWORD *)v129 + 10) = v305;
            *(_OWORD *)(v129 + 23) = *((_OWORD *)v130 - 5);
            v306 = *((_OWORD *)v130 - 4);
            v129[27] = *(v130 - 6);
            *(_OWORD *)(v129 + 25) = v306;
            *((_OWORD *)v129 + 14) = *(_OWORD *)(v130 - 5);
            v307 = *(_OWORD *)(v130 - 3);
            v129[32] = *(v130 - 1);
            *((_OWORD *)v129 + 15) = v307;
            *v289 = v290;
            v308 = __src[1];
            *((_OWORD *)v130 - 16) = __src[0];
            *((_OWORD *)v130 - 15) = v308;
            v309 = __src[2];
            v120 = (float64x2_t)__src[3];
            _Q2.f64[0] = *(float64_t *)&__src[4];
            v122 = (float64x2_t)__src[5];
            *((_OWORD *)v130 - 12) = __src[4];
            *((float64x2_t *)v130 - 11) = v122;
            *((_OWORD *)v130 - 14) = v309;
            *((float64x2_t *)v130 - 13) = v120;
            *((float64x2_t *)v130 - 10) = v655;
            v310 = v640[0].f64[0];
            *((float64x2_t *)v130 - 9) = v639;
            *(v130 - 16) = v310;
            *(float64x2_t *)(v130 - 15) = v654;
            v311 = v647;
            *(v130 - 11) = v648.f64[0];
            *(float64x2_t *)(v130 - 13) = v311;
            *((float64x2_t *)v130 - 5) = v653;
            v312 = v645;
            *((_OWORD *)v130 - 4) = *(_OWORD *)category;
            *(v130 - 6) = v312;
            *(float64x2_t *)(v130 - 5) = v652;
            v119 = (int8x16_t)v650;
            *(v130 - 1) = v651;
            *(int8x16_t *)(v130 - 3) = v119;
          }
          break;
        }
        if ((char *)v130 - (char *)v129 <= 2111)
        {
          while (v129 != v130 - 33)
          {
            v317 = v129;
            v129 += 33;
            if (v317 != v130 && v129 != v130)
            {
              v318 = *v317;
              v120.f64[0] = *v317;
              v319 = v129;
              v320 = v317;
              do
              {
                _Q2.f64[0] = *v319;
                if (*v319 < v120.f64[0])
                {
                  v120.f64[0] = *v319;
                  v320 = v319;
                }
                v319 += 33;
              }
              while (v319 != v130);
              if (v320 != v317)
              {
                v321 = *(_OWORD *)(v317 + 3);
                __src[0] = *(_OWORD *)(v317 + 1);
                __src[1] = v321;
                v322 = *(_OWORD *)(v317 + 5);
                v323 = *(_OWORD *)(v317 + 7);
                v324 = *(_OWORD *)(v317 + 11);
                __src[4] = *(_OWORD *)(v317 + 9);
                __src[5] = v324;
                __src[2] = v322;
                __src[3] = v323;
                v325 = *(float64x2_t *)(v317 + 13);
                v326 = *(float64x2_t *)(v317 + 15);
                v640[0].f64[0] = v317[17];
                v639 = v326;
                v327 = *(float64x2_t *)(v317 + 20);
                v654 = *(float64x2_t *)(v317 + 18);
                v655 = v325;
                v648.f64[0] = v317[22];
                v647 = v327;
                v328 = *(float64x2_t *)(v317 + 23);
                v329 = *(_OWORD *)(v317 + 25);
                v645 = v317[27];
                *(_OWORD *)category = v329;
                v330 = *((_OWORD *)v317 + 15);
                v652 = *(float64x2_t *)(v317 + 28);
                v653 = v328;
                v651 = v317[32];
                v650 = v330;
                *v317 = *v320;
                v331 = *(_OWORD *)(v320 + 1);
                *(_OWORD *)(v317 + 3) = *(_OWORD *)(v320 + 3);
                *(_OWORD *)(v317 + 1) = v331;
                v332 = *(_OWORD *)(v320 + 5);
                v333 = *(_OWORD *)(v320 + 7);
                v122 = *(float64x2_t *)(v320 + 9);
                v123 = *(float64x2_t *)(v320 + 11);
                *(float64x2_t *)(v317 + 11) = v123;
                *(float64x2_t *)(v317 + 9) = v122;
                *(_OWORD *)(v317 + 7) = v333;
                *(_OWORD *)(v317 + 5) = v332;
                *(_OWORD *)(v317 + 13) = *(_OWORD *)(v320 + 13);
                v334 = *(_OWORD *)(v320 + 15);
                v317[17] = v320[17];
                *(_OWORD *)(v317 + 15) = v334;
                *((_OWORD *)v317 + 9) = *((_OWORD *)v320 + 9);
                v335 = *((_OWORD *)v320 + 10);
                v317[22] = v320[22];
                *((_OWORD *)v317 + 10) = v335;
                *(_OWORD *)(v317 + 23) = *(_OWORD *)(v320 + 23);
                v336 = *(_OWORD *)(v320 + 25);
                v317[27] = v320[27];
                *(_OWORD *)(v317 + 25) = v336;
                *((_OWORD *)v317 + 14) = *((_OWORD *)v320 + 14);
                v337 = *((_OWORD *)v320 + 15);
                v317[32] = v320[32];
                *((_OWORD *)v317 + 15) = v337;
                *v320 = v318;
                v338 = __src[1];
                *(_OWORD *)(v320 + 1) = __src[0];
                *(_OWORD *)(v320 + 3) = v338;
                v339 = __src[2];
                v340 = __src[3];
                _Q2 = (float64x2_t)__src[4];
                v122.f64[0] = *(float64_t *)&__src[5];
                *(_OWORD *)(v320 + 11) = __src[5];
                *(float64x2_t *)(v320 + 9) = _Q2;
                *(_OWORD *)(v320 + 7) = v340;
                *(_OWORD *)(v320 + 5) = v339;
                v341 = v654;
                *(float64x2_t *)(v320 + 13) = v655;
                v342 = v639;
                v320[17] = v640[0].f64[0];
                *(float64x2_t *)(v320 + 15) = v342;
                v343 = v647;
                v320[22] = v648.f64[0];
                *((float64x2_t *)v320 + 9) = v341;
                *((float64x2_t *)v320 + 10) = v343;
                v120 = v652;
                *(float64x2_t *)(v320 + 23) = v653;
                v344 = *(_OWORD *)category;
                v320[27] = v645;
                *(_OWORD *)(v320 + 25) = v344;
                v119 = (int8x16_t)v650;
                v320[32] = v651;
                *((float64x2_t *)v320 + 14) = v120;
                *((int8x16_t *)v320 + 15) = v119;
              }
            }
          }
          break;
        }
        v163 = (uint64_t)&v129[33 * (v162 >> 1)];
        v164 = (unint64_t)(v130 - 33);
        v165 = sub_20EB6A360((uint64_t)v129, v163, (uint64_t)(v130 - 33));
        v119.i64[0] = *(uint64_t *)v129;
        v120.f64[0] = *(float64_t *)v163;
        if (*v129 < *(double *)v163)
        {
LABEL_196:
          v191 = v129 + 33;
          if ((unint64_t)(v129 + 33) >= v164)
          {
            v193 = (char *)(v129 + 33);
          }
          else
          {
            v192 = (char *)(v129 + 33);
            while (1)
            {
              v120.f64[0] = *(float64_t *)v163;
              v193 = v192 - 264;
              do
              {
                v194 = *((double *)v193 + 33);
                v193 += 264;
              }
              while (v194 < v120.f64[0]);
              v192 = v193 + 264;
              do
              {
                v164 -= 264;
                _Q2.f64[0] = *(float64_t *)v164;
              }
              while (*(double *)v164 >= v120.f64[0]);
              if ((unint64_t)v193 >= v164)
                break;
              v195 = *(_OWORD *)(v193 + 24);
              __src[0] = *(_OWORD *)(v193 + 8);
              __src[1] = v195;
              v196 = *(_OWORD *)(v193 + 40);
              v197 = *(_OWORD *)(v193 + 56);
              v198 = *(_OWORD *)(v193 + 88);
              __src[4] = *(_OWORD *)(v193 + 72);
              __src[5] = v198;
              __src[2] = v196;
              __src[3] = v197;
              v655 = *(float64x2_t *)(v193 + 104);
              v199 = *(float64x2_t *)(v193 + 120);
              v640[0].f64[0] = *((float64_t *)v193 + 17);
              v639 = v199;
              v654 = *((float64x2_t *)v193 + 9);
              v200 = *((float64x2_t *)v193 + 10);
              v648.f64[0] = *((float64_t *)v193 + 22);
              v647 = v200;
              v653 = *(float64x2_t *)(v193 + 184);
              v201 = *(_OWORD *)(v193 + 200);
              v645 = *((double *)v193 + 27);
              *(_OWORD *)category = v201;
              v652 = *((float64x2_t *)v193 + 14);
              v202 = *((_OWORD *)v193 + 15);
              v651 = *((double *)v193 + 32);
              v650 = v202;
              *(_QWORD *)v193 = *(_QWORD *)v164;
              v203 = *(_OWORD *)(v164 + 8);
              *(_OWORD *)(v193 + 24) = *(_OWORD *)(v164 + 24);
              *(_OWORD *)(v193 + 8) = v203;
              v204 = *(_OWORD *)(v164 + 40);
              v205 = *(_OWORD *)(v164 + 56);
              v122 = *(float64x2_t *)(v164 + 72);
              v123 = *(float64x2_t *)(v164 + 88);
              *(float64x2_t *)(v193 + 88) = v123;
              *(float64x2_t *)(v193 + 72) = v122;
              *(_OWORD *)(v193 + 56) = v205;
              *(_OWORD *)(v193 + 40) = v204;
              *(_OWORD *)(v193 + 104) = *(_OWORD *)(v164 + 104);
              v206 = *(_OWORD *)(v164 + 120);
              *((_QWORD *)v193 + 17) = *(_QWORD *)(v164 + 136);
              *(_OWORD *)(v193 + 120) = v206;
              *((_OWORD *)v193 + 9) = *(_OWORD *)(v164 + 144);
              v207 = *(_OWORD *)(v164 + 160);
              *((_QWORD *)v193 + 22) = *(_QWORD *)(v164 + 176);
              *((_OWORD *)v193 + 10) = v207;
              *(_OWORD *)(v193 + 184) = *(_OWORD *)(v164 + 184);
              v208 = *(_OWORD *)(v164 + 200);
              *((_QWORD *)v193 + 27) = *(_QWORD *)(v164 + 216);
              *(_OWORD *)(v193 + 200) = v208;
              *((_OWORD *)v193 + 14) = *(_OWORD *)(v164 + 224);
              v209 = *(_OWORD *)(v164 + 240);
              *((_QWORD *)v193 + 32) = *(_QWORD *)(v164 + 256);
              *((_OWORD *)v193 + 15) = v209;
              *(double *)v164 = v194;
              v210 = __src[1];
              *(_OWORD *)(v164 + 8) = __src[0];
              *(_OWORD *)(v164 + 24) = v210;
              v211 = __src[2];
              v212 = __src[3];
              v213 = __src[4];
              v122.f64[0] = *(float64_t *)&__src[5];
              *(_OWORD *)(v164 + 88) = __src[5];
              *(_OWORD *)(v164 + 72) = v213;
              *(_OWORD *)(v164 + 56) = v212;
              *(_OWORD *)(v164 + 40) = v211;
              *(float64x2_t *)(v164 + 104) = v655;
              v214 = v640[0].f64[0];
              *(float64x2_t *)(v164 + 120) = v639;
              *(float64_t *)(v164 + 136) = v214;
              *(float64x2_t *)(v164 + 144) = v654;
              v215 = v647;
              *(float64_t *)(v164 + 176) = v648.f64[0];
              *(float64x2_t *)(v164 + 160) = v215;
              *(float64x2_t *)(v164 + 184) = v653;
              v216 = v645;
              *(_OWORD *)(v164 + 200) = *(_OWORD *)category;
              *(float64_t *)(v164 + 216) = v216;
              *(float64x2_t *)(v164 + 224) = v652;
              v119 = (int8x16_t)v650;
              *(float64_t *)(v164 + 256) = v651;
              *(int8x16_t *)(v164 + 240) = v119;
              ++v165;
              if (v193 == (char *)v163)
                v163 = v164;
            }
          }
          if (v193 != (char *)v163)
          {
            v120.f64[0] = *(float64_t *)v163;
            v217 = *(_QWORD *)v193;
            if (*(double *)v163 < *(double *)v193)
            {
              v218 = *(_OWORD *)(v193 + 24);
              __src[0] = *(_OWORD *)(v193 + 8);
              __src[1] = v218;
              v219 = *(_OWORD *)(v193 + 40);
              v220 = *(_OWORD *)(v193 + 56);
              v221 = *(_OWORD *)(v193 + 88);
              __src[4] = *(_OWORD *)(v193 + 72);
              __src[5] = v221;
              __src[2] = v219;
              __src[3] = v220;
              v222 = *(float64x2_t *)(v193 + 104);
              v223 = *(float64x2_t *)(v193 + 120);
              v640[0].f64[0] = *((float64_t *)v193 + 17);
              v639 = v223;
              v224 = *((float64x2_t *)v193 + 10);
              v654 = *((float64x2_t *)v193 + 9);
              v655 = v222;
              v648.f64[0] = *((float64_t *)v193 + 22);
              v647 = v224;
              v225 = *(float64x2_t *)(v193 + 184);
              v226 = *(_OWORD *)(v193 + 200);
              v645 = *((double *)v193 + 27);
              *(_OWORD *)category = v226;
              v227 = *((_OWORD *)v193 + 15);
              v652 = *((float64x2_t *)v193 + 14);
              v653 = v225;
              v651 = *((double *)v193 + 32);
              v650 = v227;
              *(_QWORD *)v193 = *(_QWORD *)v163;
              v228 = *(_OWORD *)(v163 + 8);
              *(_OWORD *)(v193 + 24) = *(_OWORD *)(v163 + 24);
              *(_OWORD *)(v193 + 8) = v228;
              v229 = *(_OWORD *)(v163 + 40);
              v230 = *(_OWORD *)(v163 + 56);
              v122 = *(float64x2_t *)(v163 + 72);
              v123 = *(float64x2_t *)(v163 + 88);
              *(float64x2_t *)(v193 + 88) = v123;
              *(float64x2_t *)(v193 + 72) = v122;
              *(_OWORD *)(v193 + 56) = v230;
              *(_OWORD *)(v193 + 40) = v229;
              *(_OWORD *)(v193 + 104) = *(_OWORD *)(v163 + 104);
              v231 = *(_OWORD *)(v163 + 120);
              *((_QWORD *)v193 + 17) = *(_QWORD *)(v163 + 136);
              *(_OWORD *)(v193 + 120) = v231;
              *((_OWORD *)v193 + 9) = *(_OWORD *)(v163 + 144);
              v232 = *(_OWORD *)(v163 + 160);
              *((_QWORD *)v193 + 22) = *(_QWORD *)(v163 + 176);
              *((_OWORD *)v193 + 10) = v232;
              *(_OWORD *)(v193 + 184) = *(_OWORD *)(v163 + 184);
              v233 = *(_OWORD *)(v163 + 200);
              *((_QWORD *)v193 + 27) = *(_QWORD *)(v163 + 216);
              *(_OWORD *)(v193 + 200) = v233;
              *((_OWORD *)v193 + 14) = *(_OWORD *)(v163 + 224);
              v234 = *(_OWORD *)(v163 + 240);
              *((_QWORD *)v193 + 32) = *(_QWORD *)(v163 + 256);
              *((_OWORD *)v193 + 15) = v234;
              *(_QWORD *)v163 = v217;
              v235 = __src[1];
              *(_OWORD *)(v163 + 8) = __src[0];
              *(_OWORD *)(v163 + 24) = v235;
              v236 = __src[2];
              v237 = __src[3];
              _Q2 = (float64x2_t)__src[4];
              v122.f64[0] = *(float64_t *)&__src[5];
              *(_OWORD *)(v163 + 88) = __src[5];
              *(float64x2_t *)(v163 + 72) = _Q2;
              *(_OWORD *)(v163 + 56) = v237;
              *(_OWORD *)(v163 + 40) = v236;
              v238 = v654;
              *(float64x2_t *)(v163 + 104) = v655;
              v239 = v639;
              *(float64_t *)(v163 + 136) = v640[0].f64[0];
              *(float64x2_t *)(v163 + 120) = v239;
              v240 = v647;
              *(float64_t *)(v163 + 176) = v648.f64[0];
              *(float64x2_t *)(v163 + 144) = v238;
              *(float64x2_t *)(v163 + 160) = v240;
              v120 = v652;
              *(float64x2_t *)(v163 + 184) = v653;
              v241 = *(_OWORD *)category;
              *(float64_t *)(v163 + 216) = v645;
              *(_OWORD *)(v163 + 200) = v241;
              v119 = (int8x16_t)v650;
              *(float64_t *)(v163 + 256) = v651;
              *(float64x2_t *)(v163 + 224) = v120;
              *(int8x16_t *)(v163 + 240) = v119;
              ++v165;
            }
          }
          if (v193 == (char *)v160)
            break;
          if (!v165)
          {
            if (v193 <= (char *)v160)
            {
              v245 = (double *)(v193 + 264);
              while (v245 != v130)
              {
                v246 = *v245;
                v120.f64[0] = *(v245 - 33);
                v245 += 33;
                if (v246 < v120.f64[0])
                  goto LABEL_212;
              }
            }
            else
            {
              while (v191 != (double *)v193)
              {
                v243 = *v191;
                v120.f64[0] = *(v191 - 33);
                v191 += 33;
                if (v243 < v120.f64[0])
                  goto LABEL_212;
              }
            }
            break;
          }
LABEL_212:
          if (v193 <= (char *)v160)
          {
            v242 = (double *)(v193 + 264);
          }
          else
          {
            v130 = (double *)v193;
            v242 = v129;
          }
        }
        else
        {
          v166 = 0;
          while (1)
          {
            v167 = &v130[v166 - 66];
            if (v167 == v129)
              break;
            _Q2.f64[0] = *v167;
            v166 -= 33;
            if (*v167 < v120.f64[0])
            {
              v168 = *(_OWORD *)(v129 + 3);
              __src[0] = *(_OWORD *)(v129 + 1);
              __src[1] = v168;
              v169 = *(_OWORD *)(v129 + 5);
              v170 = *(_OWORD *)(v129 + 7);
              v171 = *(_OWORD *)(v129 + 11);
              __src[4] = *(_OWORD *)(v129 + 9);
              __src[5] = v171;
              __src[2] = v169;
              __src[3] = v170;
              v172 = *(float64x2_t *)(v129 + 13);
              v173 = *(float64x2_t *)(v129 + 15);
              v640[0].f64[0] = v129[17];
              v639 = v173;
              v174 = *(float64x2_t *)(v129 + 20);
              v654 = *(float64x2_t *)(v129 + 18);
              v655 = v172;
              v648.f64[0] = v129[22];
              v647 = v174;
              v175 = *(float64x2_t *)(v129 + 23);
              v176 = *(_OWORD *)(v129 + 25);
              v645 = v129[27];
              *(_OWORD *)category = v176;
              v177 = *((_OWORD *)v129 + 15);
              v652 = *(float64x2_t *)(v129 + 28);
              v653 = v175;
              v651 = v129[32];
              v650 = v177;
              v178 = (float64x2_t *)&v130[v166];
              v164 = (unint64_t)&v178[-17].f64[1];
              *v129 = v178[-17].f64[1];
              v179 = v178[-16];
              *(float64x2_t *)(v129 + 3) = v178[-15];
              *(float64x2_t *)(v129 + 1) = v179;
              v180 = v178[-14];
              _Q2 = v178[-13];
              v181 = v178[-12];
              v123 = v178[-11];
              *(float64x2_t *)(v129 + 11) = v123;
              *(float64x2_t *)(v129 + 9) = v181;
              *(float64x2_t *)(v129 + 7) = _Q2;
              *(float64x2_t *)(v129 + 5) = v180;
              *(float64x2_t *)(v129 + 13) = v178[-10];
              v182 = v178[-9];
              v129[17] = v178[-8].f64[0];
              *(float64x2_t *)(v129 + 15) = v182;
              *((float64x2_t *)v129 + 9) = *(float64x2_t *)((char *)v178 - 120);
              v183 = *(__int128 *)((char *)&v178[-7] + 8);
              v129[22] = v178[-6].f64[1];
              *((_OWORD *)v129 + 10) = v183;
              *(float64x2_t *)(v129 + 23) = v178[-5];
              v184 = v178[-4];
              v129[27] = v178[-3].f64[0];
              *(float64x2_t *)(v129 + 25) = v184;
              *((float64x2_t *)v129 + 14) = *(float64x2_t *)((char *)v178 - 40);
              v185 = *(__int128 *)((char *)&v178[-2] + 8);
              v129[32] = v178[-1].f64[1];
              *((_OWORD *)v129 + 15) = v185;
              *(_QWORD *)&v178[-17].f64[1] = v119.i64[0];
              v186 = (float64x2_t)__src[1];
              v178[-16] = (float64x2_t)__src[0];
              v178[-15] = v186;
              v187 = (float64x2_t)__src[2];
              v120 = (float64x2_t)__src[3];
              _Q2.f64[0] = *(float64_t *)&__src[4];
              v122 = (float64x2_t)__src[5];
              v178[-12] = (float64x2_t)__src[4];
              v178[-11] = v122;
              v178[-14] = v187;
              v178[-13] = v120;
              v178[-10] = v655;
              v188 = v640[0].f64[0];
              v178[-9] = v639;
              v178[-8].f64[0] = v188;
              *(float64x2_t *)((char *)v178 - 120) = v654;
              v189 = v647;
              v178[-6].f64[1] = v648.f64[0];
              *(float64x2_t *)((char *)v178 - 104) = v189;
              v178[-5] = v653;
              v190 = v645;
              v178[-4] = *(float64x2_t *)category;
              v178[-3].f64[0] = v190;
              *(float64x2_t *)((char *)v178 - 40) = v652;
              v119 = (int8x16_t)v650;
              v178[-1].f64[1] = v651;
              *(int8x16_t *)((char *)v178 - 24) = v119;
              ++v165;
              goto LABEL_196;
            }
          }
          v244 = (float64x2_t *)(v129 + 33);
          v120.f64[0] = *(float64_t *)v164;
          if (*(double *)v119.i64 >= *(double *)v164)
          {
            if (v244 == (float64x2_t *)v164)
              break;
            v244 = (float64x2_t *)(v129 + 66);
            while (1)
            {
              v120.f64[0] = v244[-17].f64[1];
              if (*(double *)v119.i64 < v120.f64[0])
                break;
              _ZF = v244 == (float64x2_t *)v164;
              v244 = (float64x2_t *)((char *)v244 + 264);
              if (_ZF)
                goto LABEL_245;
            }
            v247 = v244[-15];
            __src[0] = v244[-16];
            __src[1] = v247;
            v248 = v244[-14];
            v249 = v244[-13];
            v250 = v244[-11];
            __src[4] = v244[-12];
            __src[5] = v250;
            __src[2] = v248;
            __src[3] = v249;
            v655 = v244[-10];
            v251 = v244[-9];
            v640[0].f64[0] = v244[-8].f64[0];
            v639 = v251;
            v654 = *(float64x2_t *)((char *)v244 - 120);
            v252 = *(float64x2_t *)((char *)v244 - 104);
            v648.f64[0] = v244[-6].f64[1];
            v647 = v252;
            v653 = v244[-5];
            v253 = v244[-4];
            v645 = v244[-3].f64[0];
            *(float64x2_t *)category = v253;
            v652 = *(float64x2_t *)((char *)v244 - 40);
            v254 = *(__int128 *)((char *)&v244[-2] + 8);
            v651 = v244[-1].f64[1];
            v650 = v254;
            v244[-17].f64[1] = *(float64_t *)v164;
            v255 = *(float64x2_t *)(v130 - 30);
            v244[-16] = *(float64x2_t *)(v130 - 32);
            v244[-15] = v255;
            v256 = *(float64x2_t *)(v130 - 28);
            _Q2 = *(float64x2_t *)(v130 - 26);
            v123 = *(float64x2_t *)(v130 - 22);
            v244[-12] = *(float64x2_t *)(v130 - 24);
            v244[-11] = v123;
            v244[-14] = v256;
            v244[-13] = _Q2;
            v244[-10] = *(float64x2_t *)(v130 - 20);
            v257 = *(float64x2_t *)(v130 - 18);
            v244[-8].f64[0] = *(v130 - 16);
            v244[-9] = v257;
            *(float64x2_t *)((char *)v244 - 120) = *(float64x2_t *)(v130 - 15);
            v258 = *(float64x2_t *)(v130 - 13);
            v244[-6].f64[1] = *(v130 - 11);
            *(float64x2_t *)((char *)v244 - 104) = v258;
            v244[-5] = *(float64x2_t *)(v130 - 10);
            v259 = *(float64x2_t *)(v130 - 8);
            v244[-3].f64[0] = *(v130 - 6);
            v244[-4] = v259;
            *(float64x2_t *)((char *)v244 - 40) = *(float64x2_t *)(v130 - 5);
            v260 = *(float64x2_t *)(v130 - 3);
            v244[-1].f64[1] = *(v130 - 1);
            *(float64x2_t *)((char *)v244 - 24) = v260;
            *(float64_t *)v164 = v120.f64[0];
            v261 = __src[1];
            *((_OWORD *)v130 - 16) = __src[0];
            *((_OWORD *)v130 - 15) = v261;
            v262 = __src[2];
            v120 = (float64x2_t)__src[3];
            _Q2.f64[0] = *(float64_t *)&__src[4];
            v122 = (float64x2_t)__src[5];
            *((_OWORD *)v130 - 12) = __src[4];
            *((float64x2_t *)v130 - 11) = v122;
            *((_OWORD *)v130 - 14) = v262;
            *((float64x2_t *)v130 - 13) = v120;
            *((float64x2_t *)v130 - 10) = v655;
            v263 = v640[0].f64[0];
            *((float64x2_t *)v130 - 9) = v639;
            *(v130 - 16) = v263;
            *(float64x2_t *)(v130 - 15) = v654;
            v264 = v647;
            *(v130 - 11) = v648.f64[0];
            *(float64x2_t *)(v130 - 13) = v264;
            *((float64x2_t *)v130 - 5) = v653;
            v265 = v645;
            *((_OWORD *)v130 - 4) = *(_OWORD *)category;
            *(v130 - 6) = v265;
            *(float64x2_t *)(v130 - 5) = v652;
            v119 = (int8x16_t)v650;
            *(v130 - 1) = v651;
            *(int8x16_t *)(v130 - 3) = v119;
          }
          if (v244 == (float64x2_t *)v164)
            break;
          while (1)
          {
            v120.f64[0] = *v129;
            v242 = &v244[-17].f64[1];
            do
            {
              v266 = v242[33];
              v242 += 33;
            }
            while (v120.f64[0] >= v266);
            v244 = (float64x2_t *)(v242 + 33);
            do
            {
              v164 -= 264;
              _Q2.f64[0] = *(float64_t *)v164;
            }
            while (v120.f64[0] < *(double *)v164);
            if ((unint64_t)v242 >= v164)
              break;
            v267 = *(_OWORD *)(v242 + 3);
            __src[0] = *(_OWORD *)(v242 + 1);
            __src[1] = v267;
            v268 = *(_OWORD *)(v242 + 5);
            v269 = *(_OWORD *)(v242 + 7);
            v270 = *(_OWORD *)(v242 + 11);
            __src[4] = *(_OWORD *)(v242 + 9);
            __src[5] = v270;
            __src[2] = v268;
            __src[3] = v269;
            v655 = *(float64x2_t *)(v242 + 13);
            v271 = *(float64x2_t *)(v242 + 15);
            v640[0].f64[0] = v242[17];
            v639 = v271;
            v654 = *(float64x2_t *)(v242 + 18);
            v272 = *(float64x2_t *)(v242 + 20);
            v648.f64[0] = v242[22];
            v647 = v272;
            v653 = *(float64x2_t *)(v242 + 23);
            v273 = *(_OWORD *)(v242 + 25);
            v645 = v242[27];
            *(_OWORD *)category = v273;
            v652 = *(float64x2_t *)(v242 + 28);
            v274 = *((_OWORD *)v242 + 15);
            v651 = v242[32];
            v650 = v274;
            *v242 = *(double *)v164;
            v275 = *(_OWORD *)(v164 + 8);
            *(_OWORD *)(v242 + 3) = *(_OWORD *)(v164 + 24);
            *(_OWORD *)(v242 + 1) = v275;
            v276 = *(_OWORD *)(v164 + 40);
            v277 = *(_OWORD *)(v164 + 56);
            v122 = *(float64x2_t *)(v164 + 72);
            v123 = *(float64x2_t *)(v164 + 88);
            *(float64x2_t *)(v242 + 11) = v123;
            *(float64x2_t *)(v242 + 9) = v122;
            *(_OWORD *)(v242 + 7) = v277;
            *(_OWORD *)(v242 + 5) = v276;
            *(_OWORD *)(v242 + 13) = *(_OWORD *)(v164 + 104);
            v278 = *(_OWORD *)(v164 + 120);
            v242[17] = *(double *)(v164 + 136);
            *(_OWORD *)(v242 + 15) = v278;
            *((_OWORD *)v242 + 9) = *(_OWORD *)(v164 + 144);
            v279 = *(_OWORD *)(v164 + 160);
            v242[22] = *(double *)(v164 + 176);
            *((_OWORD *)v242 + 10) = v279;
            *(_OWORD *)(v242 + 23) = *(_OWORD *)(v164 + 184);
            v280 = *(_OWORD *)(v164 + 200);
            v242[27] = *(double *)(v164 + 216);
            *(_OWORD *)(v242 + 25) = v280;
            *((_OWORD *)v242 + 14) = *(_OWORD *)(v164 + 224);
            v281 = *(_OWORD *)(v164 + 240);
            v242[32] = *(double *)(v164 + 256);
            *((_OWORD *)v242 + 15) = v281;
            *(double *)v164 = v266;
            v282 = __src[1];
            *(_OWORD *)(v164 + 8) = __src[0];
            *(_OWORD *)(v164 + 24) = v282;
            v283 = __src[2];
            v284 = __src[3];
            v285 = __src[4];
            v122.f64[0] = *(float64_t *)&__src[5];
            *(_OWORD *)(v164 + 88) = __src[5];
            *(_OWORD *)(v164 + 72) = v285;
            *(_OWORD *)(v164 + 56) = v284;
            *(_OWORD *)(v164 + 40) = v283;
            *(float64x2_t *)(v164 + 104) = v655;
            v286 = v640[0].f64[0];
            *(float64x2_t *)(v164 + 120) = v639;
            *(float64_t *)(v164 + 136) = v286;
            *(float64x2_t *)(v164 + 144) = v654;
            v287 = v647;
            *(float64_t *)(v164 + 176) = v648.f64[0];
            *(float64x2_t *)(v164 + 160) = v287;
            *(float64x2_t *)(v164 + 184) = v653;
            v288 = v645;
            *(_OWORD *)(v164 + 200) = *(_OWORD *)category;
            *(float64_t *)(v164 + 216) = v288;
            *(float64x2_t *)(v164 + 224) = v652;
            v119 = (int8x16_t)v650;
            *(float64_t *)(v164 + 256) = v651;
            *(int8x16_t *)(v164 + 240) = v119;
          }
          if (v242 > v160)
            break;
        }
        v129 = v242;
      }
      while (v130 != v160);
LABEL_245:
      v129 = v605;
      v153 = 0xF83E0F83E0F83E1 * (v49 - v605);
      v130 = v49;
      v131 = v161;
      v159 = v621;
    }
    v313 = v159 - v153;
    v128 = v627;
    if (v159 <= v153)
    {
      if (v159 < v153)
      {
        v49 = &v129[33 * v159];
        v130 = v49;
      }
    }
    else if (0xF83E0F83E0F83E1 * ((v599 - (char *)v130) >> 3) >= v313)
    {
      v345 = 264 * ((264 * v313 - 264) / 0x108) + 264;
      bzero(v130, v345);
      v49 = (double *)((char *)v130 + v345);
      v129 = v605;
      v130 = (double *)((char *)v130 + v345);
    }
    else
    {
      v622 = v131;
      v314 = 0xF83E0F83E0F83E1 * (v130 - v605) + v313;
      if (v314 > 0xF83E0F83E0F83ELL)
        sub_20E867F44();
      if (0x1F07C1F07C1F07C2 * ((v599 - (char *)v605) >> 3) > v314)
        v314 = 0x1F07C1F07C1F07C2 * ((v599 - (char *)v605) >> 3);
      if ((unint64_t)(0xF83E0F83E0F83E1 * ((v599 - (char *)v605) >> 3)) >= 0x7C1F07C1F07C1FLL)
        v315 = 0xF83E0F83E0F83ELL;
      else
        v315 = v314;
      if (v315)
      {
        if (v315 > 0xF83E0F83E0F83ELL)
          sub_20E877A38();
        v316 = (char *)operator new(264 * v315);
      }
      else
      {
        v316 = 0;
      }
      v346 = &v316[8 * (v130 - v605)];
      v347 = 264 * ((264 * v313 - 264) / 0x108) + 264;
      bzero(v346, v347);
      v129 = (double *)v346;
      while (v130 != v605)
      {
        v129 -= 33;
        v130 -= 33;
        memcpy(v129, v130, 0x108uLL);
      }
      v599 = &v316[264 * v315];
      v49 = (double *)&v346[v347];
      if (v605)
        operator delete(v605);
      v605 = v129;
      v130 = (double *)&v346[v347];
      v131 = v622;
      v128 = v627;
    }
LABEL_276:
    v128 -= 858993459 * ((unint64_t)((char *)v132 - (char *)v133) >> 3);
    v348 = (char *)v130 - (char *)v129 - 264;
    if ((char *)v130 - (char *)v129 == 264)
      break;
    v131 += 16;
  }
  while (v131 != v603);
  if (v128)
  {
    if (v129 != v130)
    {
      v349 = (double)v128;
      v350 = v129;
      if (v348 < 0x108)
        goto LABEL_666;
      v351 = v348 / 0x108 + 1;
      v350 = &v129[33 * (v351 & 0x1FFFFFFFFFFFFFELL)];
      v352 = v351 & 0x1FFFFFFFFFFFFFELL;
      v353 = v129;
      do
      {
        v354 = v353[33] / v349;
        *v353 = *v353 / v349;
        v353[33] = v354;
        v353 += 66;
        v352 -= 2;
      }
      while (v352);
      if (v351 != (v351 & 0x1FFFFFFFFFFFFFELL))
      {
LABEL_666:
        do
        {
          *v350 = *v350 / v349;
          v350 += 33;
        }
        while (v350 != v130);
      }
    }
    v355 = 126 - 2 * __clz(0xF83E0F83E0F83E1 * (v130 - v129));
    if (v129 == v130)
      v356 = 0;
    else
      v356 = v355;
    sub_20EB6ABCC((uint64_t)v129, (unint64_t)v130, v356, 1);
  }
  v127 = v605;
  if (v605 != v49)
  {
    v610 = *(int8x16_t *)(v605 + 1);
    v607 = vextq_s8(v610, v610, 8uLL).u64[0];
    v357 = v605[4];
    v604 = v605[3];
    v616 = *(int8x16_t *)(v605 + 5);
    v358 = v605[8];
    v612 = v605[7];
    v614 = vextq_s8(v616, v616, 8uLL).u64[0];
    v359 = *(int8x16_t *)(v605 + 9);
    v628 = *((_QWORD *)v605 + 9);
    v120 = (float64x2_t)vextq_s8(v359, v359, 8uLL);
    v359.i64[0] = (uint64_t)v605[11];
    v360 = v605[12];
    v618 = (__n128)v359;
    v623 = (__n128)v120;
    v361 = *((_QWORD *)v605 + 13);
    v362 = *((_QWORD *)v605 + 14);
    v364 = *((_QWORD *)v605 + 18);
    v363 = *((_QWORD *)v605 + 19);
    v120.f64[0] = v605[23];
    v365 = *((_QWORD *)v605 + 24);
    v366 = 1;
    v598 = v605[28];
    v601 = v120.f64[0];
    v597 = *((_QWORD *)v605 + 29);
    v367 = v594;
    v125 = v595;
    v126 = v593;
    v124 = v634;
    if (!v634)
      goto LABEL_294;
LABEL_293:
    v635 = v124;
    operator delete(v124);
    goto LABEL_294;
  }
  v366 = 0;
  v361 = 0;
  v362 = 0;
  v364 = 0;
  v363 = 0;
  v598 = 0.0;
  v601 = 0.0;
  v365 = 0;
  v597 = 0;
  v360 = 0.0;
  v628 = 0;
  v119.i64[0] = 0;
  v623 = (__n128)v119;
  v119.i64[0] = 0;
  v618 = (__n128)v119;
  v119.i64[0] = 0;
  v616 = v119;
  *(double *)&v614 = 0.0;
  v612 = 0.0;
  v119.i64[0] = 0;
  v610 = v119;
  *(double *)&v607 = 0.0;
  v604 = 0.0;
  v358 = 0.0;
  v357 = 0.0;
  v367 = v594;
  v125 = v595;
  v126 = v593;
  v124 = v634;
  if (v634)
    goto LABEL_293;
LABEL_294:
  if (v127)
    operator delete(v127);
  if (v636)
  {
    v637 = v636;
    operator delete(v636);
  }
  if ((v366 & 1) == 0)
  {
    sub_20EB67274(&v650);
    if (**(int **)(v650 + 56) > 2)
      goto LABEL_611;
    v377 = *(unsigned __int8 *)(v650 + 72);
    v378 = sub_20E8C31DC(v650, "OSLogSurrogateAppender", 1, 0);
    v379 = v378;
    if (!v377 && !v378)
      goto LABEL_611;
    *(_QWORD *)&v639.f64[0] = &v650;
    *(std::chrono::steady_clock::time_point *)&v639.f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
    *(std::chrono::system_clock::time_point *)&v640[0].f64[0] = (std::chrono::system_clock::time_point)std::chrono::system_clock::now().__d_.__rep_;
    LODWORD(v640[0].f64[1]) = 2;
    *(_QWORD *)&v640[1].f64[0] = "unknown file";
    LODWORD(v640[1].f64[1]) = 70;
    v640[2].f64[1] = 0.0;
    v640[3].f64[0] = 0.0;
    *(_QWORD *)&v640[2].f64[0] = "unknown function";
    v380 = **(_QWORD **)&v639.f64[0];
    if (*(char *)(**(_QWORD **)&v639.f64[0] + 39) < 0)
    {
      v382 = *(const char **)(v380 + 16);
      v381 = *(_QWORD *)(v380 + 24);
    }
    else
    {
      v381 = *(unsigned __int8 *)(**(_QWORD **)&v639.f64[0] + 39);
      v382 = (const char *)(**(_QWORD **)&v639.f64[0] + 16);
    }
    v630 = **(_QWORD **)&v639.f64[0] + 16;
    v483 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v483 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)__src);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__src);
      if (BYTE8(__src[1]) && SBYTE7(__src[1]) < 0)
        operator delete(*(void **)&__src[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v484 = byte_254A4A4F8;
    else
      v484 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v485 = byte_254A4A4F8[23];
    else
      v485 = *(_QWORD *)&byte_254A4A4F8[8];
    *(_QWORD *)&__src[0] = os_log_create(v484, v382);
    v486 = (char *)__src + 8;
    if (v485 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v485 >= 0x17)
    {
      v487 = v379;
      v488 = v382;
      v489 = v380;
      v490 = v377;
      v491 = (v485 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v485 | 7) != 0x17)
        v491 = v485 | 7;
      v492 = v491 + 1;
      v486 = (char *)operator new(v491 + 1);
      *((_QWORD *)&__src[1] + 1) = v492 | 0x8000000000000000;
      *((_QWORD *)&__src[0] + 1) = v486;
      *(_QWORD *)&__src[1] = v485;
      v377 = v490;
      v380 = v489;
      v382 = v488;
      v379 = v487;
    }
    else
    {
      HIBYTE(__src[1]) = v485;
      if (!v485)
      {
LABEL_462:
        v486[v485] = 0;
        LOBYTE(__src[2]) = 1;
        v493 = (char *)&__src[2] + 8;
        if (v381 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v381 >= 0x17)
        {
          v494 = (v381 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v381 | 7) != 0x17)
            v494 = v381 | 7;
          v495 = v494 + 1;
          v493 = (char *)operator new(v494 + 1);
          *((_QWORD *)&__src[3] + 1) = v495 | 0x8000000000000000;
          *((_QWORD *)&__src[2] + 1) = v493;
          *(_QWORD *)&__src[3] = v381;
        }
        else
        {
          HIBYTE(__src[3]) = v381;
          if (!v381)
          {
LABEL_470:
            v493[v381] = 0;
            LOBYTE(__src[4]) = 1;
            v496 = *(NSObject **)&__src[0];
            if (SHIBYTE(__src[3]) < 0)
              operator delete(*((void **)&__src[2] + 1));
            if (LOBYTE(__src[2]) && SHIBYTE(__src[1]) < 0)
              operator delete(*((void **)&__src[0] + 1));
            if (*(_QWORD *)&__src[0])
              os_release(*(void **)&__src[0]);
            if (v379 && *(_QWORD *)(v379 + 24))
            {
              v497 = _os_log_pack_size();
              v498 = (std::__shared_weak_count_vtbl *)operator new(v497, (std::align_val_t)8uLL);
              v499 = (std::__shared_weak_count *)operator new();
              v500 = v499;
              v499->__shared_owners_ = 0;
              v501 = (unint64_t *)&v499->__shared_owners_;
              v499->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v499->__shared_weak_owners_ = 0;
              v499[1].__vftable = v498;
              *(_QWORD *)&__src[0] = v498;
              *((_QWORD *)&__src[0] + 1) = v498;
              *(_QWORD *)&__src[1] = v499;
              do
                v502 = __ldxr(v501);
              while (__stxr(v502 + 1, v501));
              __src[2] = 0uLL;
              *((_QWORD *)&__src[1] + 1) = 0;
              do
                v503 = __ldaxr(v501);
              while (__stlxr(v503 - 1, v501));
              if (!v503)
              {
                ((void (*)(std::__shared_weak_count *))v499->__on_zero_shared)(v499);
                std::__shared_weak_count::__release_weak(v500);
              }
              v504 = *(_QWORD *)&__src[0];
              *(_WORD *)_os_log_pack_fill() = 0;
              v505 = operator new();
              v506 = *(unsigned __int8 *)(v380 + 39);
              v507 = v630;
              if ((v506 & 0x80u) != 0)
              {
                v507 = *(_QWORD *)(v380 + 16);
                v506 = *(_QWORD *)(v380 + 24);
              }
              *(_QWORD *)v505 = v504;
              *(_OWORD *)(v505 + 8) = *(_OWORD *)((char *)__src + 8);
              *((_QWORD *)&__src[0] + 1) = 0;
              *(_QWORD *)&__src[1] = 0;
              *(_OWORD *)(v505 + 24) = *(_OWORD *)((char *)&__src[1] + 8);
              *((_QWORD *)&__src[1] + 1) = 0;
              *(_QWORD *)&__src[2] = 0;
              *(_QWORD *)(v505 + 40) = v507;
              *(_QWORD *)(v505 + 48) = v506;
              *(_BYTE *)(v505 + 56) = 2;
              category[0] = 0;
              *(_QWORD *)&v647.f64[0] = v505;
              (*(void (**)(_QWORD, float64x2_t *))(**(_QWORD **)(v379 + 24) + 40))(*(_QWORD *)(v379 + 24), &v647);
              v508 = v647.f64[0];
              v647.f64[0] = 0.0;
              if (v508 != 0.0)
              {
                v509 = *(std::__shared_weak_count **)(*(_QWORD *)&v508 + 32);
                if (v509)
                {
                  v510 = (unint64_t *)&v509->__shared_owners_;
                  do
                    v511 = __ldaxr(v510);
                  while (__stlxr(v511 - 1, v510));
                  if (!v511)
                  {
                    ((void (*)(std::__shared_weak_count *))v509->__on_zero_shared)(v509);
                    std::__shared_weak_count::__release_weak(v509);
                  }
                }
                v512 = *(std::__shared_weak_count **)(*(_QWORD *)&v508 + 16);
                if (v512)
                {
                  v513 = (unint64_t *)&v512->__shared_owners_;
                  do
                    v514 = __ldaxr(v513);
                  while (__stlxr(v514 - 1, v513));
                  if (!v514)
                  {
                    ((void (*)(std::__shared_weak_count *))v512->__on_zero_shared)(v512);
                    std::__shared_weak_count::__release_weak(v512);
                  }
                }
                MEMORY[0x212BC6398](*(_QWORD *)&v508, 0x10F0C40B62ED6C6);
                v515 = category[0];
                category[0] = 0;
                if (v515)
                {
                  v516 = (std::__shared_weak_count *)*((_QWORD *)v515 + 4);
                  if (v516)
                  {
                    v517 = (unint64_t *)&v516->__shared_owners_;
                    do
                      v518 = __ldaxr(v517);
                    while (__stlxr(v518 - 1, v517));
                    if (!v518)
                    {
                      ((void (*)(std::__shared_weak_count *))v516->__on_zero_shared)(v516);
                      std::__shared_weak_count::__release_weak(v516);
                    }
                  }
                  v519 = (std::__shared_weak_count *)*((_QWORD *)v515 + 2);
                  if (v519)
                  {
                    v520 = (unint64_t *)&v519->__shared_owners_;
                    do
                      v521 = __ldaxr(v520);
                    while (__stlxr(v521 - 1, v520));
                    if (!v521)
                    {
                      ((void (*)(std::__shared_weak_count *))v519->__on_zero_shared)(v519);
                      std::__shared_weak_count::__release_weak(v519);
                    }
                  }
                  MEMORY[0x212BC6398](v515, 0x10F0C40B62ED6C6);
                }
              }
              v522 = *(std::__shared_weak_count **)&__src[2];
              if (*(_QWORD *)&__src[2])
              {
                v523 = (unint64_t *)(*(_QWORD *)&__src[2] + 8);
                do
                  v524 = __ldaxr(v523);
                while (__stlxr(v524 - 1, v523));
                if (!v524)
                {
                  ((void (*)(std::__shared_weak_count *))v522->__on_zero_shared)(v522);
                  std::__shared_weak_count::__release_weak(v522);
                }
              }
              v525 = *(std::__shared_weak_count **)&__src[1];
              if (*(_QWORD *)&__src[1])
              {
                v526 = (unint64_t *)(*(_QWORD *)&__src[1] + 8);
                do
                  v527 = __ldaxr(v526);
                while (__stlxr(v527 - 1, v526));
                if (!v527)
                {
                  ((void (*)(std::__shared_weak_count *))v525->__on_zero_shared)(v525);
                  std::__shared_weak_count::__release_weak(v525);
                }
              }
            }
            else
            {
              os_log_type_enabled(v496, OS_LOG_TYPE_DEBUG);
              LOWORD(__src[0]) = 0;
              v528 = (void *)_os_log_send_and_compose_impl();
              if (v528)
                free(v528);
            }
            if (v377)
            {
              sub_20E8C003C((uint64_t)&v639, "PreemptiveRansac failed");
              sub_20E863570((uint64_t)&v639);
            }
            sub_20E863570((uint64_t)&v639);
            v529 = v640[3].f64[0];
            if (*(_QWORD *)&v640[3].f64[0])
            {
              v530 = (unint64_t *)(*(_QWORD *)&v640[3].f64[0] + 8);
              do
                v531 = __ldaxr(v530);
              while (__stlxr(v531 - 1, v530));
LABEL_609:
              if (!v531)
              {
                (*(void (**)(float64_t))(**(_QWORD **)&v529 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v529));
                std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v529);
              }
            }
LABEL_611:
            v118 = 0;
            v580 = (char *)v631;
            if (!v631)
              return v118;
LABEL_612:
            v632 = v580;
            operator delete(v580);
            return v118;
          }
        }
        memmove(v493, v382, v381);
        goto LABEL_470;
      }
    }
    memmove(v486, v484, v485);
    goto LABEL_462;
  }
  if (!a7)
    goto LABEL_387;
  v368 = v126[2];
  v369 = *v126;
  if ((unint64_t)(v368 - *v126) <= 0x3F)
  {
    v370 = v126[1];
    v371 = (char *)operator new(0x40uLL);
    v368 = v371 + 64;
    v372 = &v371[(v370 - v369) & 0xFFFFFFFFFFFFFFF0];
    v373 = v372;
    if (v370 != v369)
    {
      v374 = &v371[(v370 - v369) & 0xFFFFFFFFFFFFFFF0];
      do
      {
        v373 = v374 - 16;
        *((_OWORD *)v374 - 1) = *((_OWORD *)v370 - 1);
        v370 -= 16;
        v374 -= 16;
      }
      while (v370 != v369);
    }
    *v126 = v373;
    v126[1] = v372;
    v126[2] = v368;
    if (v369)
    {
      operator delete(v369);
      v368 = v126[2];
    }
  }
  v375 = v126[1];
  if (v375 < v368)
  {
    *(_QWORD *)v375 = v361;
    *((_QWORD *)v375 + 1) = v362;
    v376 = v375 + 16;
    goto LABEL_332;
  }
  v383 = *v126;
  v384 = (v375 - *v126) >> 4;
  v385 = v384 + 1;
  if ((unint64_t)(v384 + 1) >> 60)
    goto LABEL_632;
  v386 = v368 - v383;
  if (v386 >> 3 > v385)
    v385 = v386 >> 3;
  if ((unint64_t)v386 >= 0x7FFFFFFFFFFFFFF0)
    v387 = 0xFFFFFFFFFFFFFFFLL;
  else
    v387 = v385;
  if (!v387)
  {
    v388 = 0;
    goto LABEL_327;
  }
  if (v387 >> 60)
    goto LABEL_641;
  v388 = (char *)operator new(16 * v387);
LABEL_327:
  v389 = &v388[16 * v384];
  *(_QWORD *)v389 = v361;
  *((_QWORD *)v389 + 1) = v362;
  v376 = v389 + 16;
  if (v375 != v383)
  {
    do
    {
      *((_OWORD *)v389 - 1) = *((_OWORD *)v375 - 1);
      v389 -= 16;
      v375 -= 16;
    }
    while (v375 != v383);
    v375 = *v126;
  }
  *v126 = v389;
  v126[1] = v376;
  v126[2] = &v388[16 * v387];
  if (v375)
    operator delete(v375);
LABEL_332:
  v126[1] = v376;
  v390 = (unint64_t)v126[2];
  if ((unint64_t)v376 < v390)
  {
    *(_QWORD *)v376 = v364;
    *((_QWORD *)v376 + 1) = v363;
    v391 = v376 + 16;
    goto LABEL_350;
  }
  v392 = *v126;
  v393 = (v376 - *v126) >> 4;
  v394 = v393 + 1;
  if ((unint64_t)(v393 + 1) >> 60)
    goto LABEL_632;
  v395 = v390 - (_QWORD)v392;
  if (v395 >> 3 > v394)
    v394 = v395 >> 3;
  if ((unint64_t)v395 >= 0x7FFFFFFFFFFFFFF0)
    v396 = 0xFFFFFFFFFFFFFFFLL;
  else
    v396 = v394;
  if (!v396)
  {
    v398 = (char *)(16 * v393);
    v399 = 0;
    *(_QWORD *)v398 = v364;
    *((_QWORD *)v398 + 1) = v363;
    v391 = (char *)(16 * v393 + 16);
    if (v376 == v392)
      goto LABEL_348;
    goto LABEL_345;
  }
  if (v396 >> 60)
    goto LABEL_641;
  v397 = (char *)operator new(16 * v396);
  v398 = &v397[16 * v393];
  v399 = &v397[16 * v396];
  *(_QWORD *)v398 = v364;
  *((_QWORD *)v398 + 1) = v363;
  v391 = v398 + 16;
  if (v376 == v392)
  {
LABEL_348:
    *v126 = v398;
    v126[1] = v391;
    v126[2] = v399;
    goto LABEL_349;
  }
  do
  {
LABEL_345:
    *((_OWORD *)v398 - 1) = *((_OWORD *)v376 - 1);
    v398 -= 16;
    v376 -= 16;
  }
  while (v376 != v392);
  v376 = *v126;
  *v126 = v398;
  v126[1] = v391;
  v126[2] = v399;
  if (v376)
LABEL_349:
    operator delete(v376);
LABEL_350:
  v126[1] = v391;
  v400 = (unint64_t)v126[2];
  if ((unint64_t)v391 < v400)
  {
    *(float64_t *)v391 = v601;
    *((_QWORD *)v391 + 1) = v365;
    v401 = v391 + 16;
    goto LABEL_368;
  }
  v402 = *v126;
  v403 = (v391 - *v126) >> 4;
  v404 = v403 + 1;
  if ((unint64_t)(v403 + 1) >> 60)
LABEL_632:
    sub_20E867F44();
  v405 = v400 - (_QWORD)v402;
  if (v405 >> 3 > v404)
    v404 = v405 >> 3;
  if ((unint64_t)v405 >= 0x7FFFFFFFFFFFFFF0)
    v406 = 0xFFFFFFFFFFFFFFFLL;
  else
    v406 = v404;
  if (v406)
  {
    if (!(v406 >> 60))
    {
      v407 = (char *)operator new(16 * v406);
      goto LABEL_362;
    }
LABEL_641:
    sub_20E877A38();
  }
  v407 = 0;
LABEL_362:
  v408 = &v407[16 * v403];
  v409 = &v407[16 * v406];
  *(float64_t *)v408 = v601;
  *((_QWORD *)v408 + 1) = v365;
  v401 = v408 + 16;
  if (v391 == v402)
  {
    *v126 = v408;
    v126[1] = v401;
    v126[2] = v409;
LABEL_367:
    operator delete(v391);
    goto LABEL_368;
  }
  do
  {
    *((_OWORD *)v408 - 1) = *((_OWORD *)v391 - 1);
    v408 -= 16;
    v391 -= 16;
  }
  while (v391 != v402);
  v391 = *v126;
  *v126 = v408;
  v126[1] = v401;
  v126[2] = v409;
  if (v391)
    goto LABEL_367;
LABEL_368:
  v126[1] = v401;
  v410 = (unint64_t)v126[2];
  if ((unint64_t)v401 < v410)
  {
    v120.f64[0] = v598;
    *(float64_t *)v401 = v598;
    *((_QWORD *)v401 + 1) = v597;
    v411 = v401 + 16;
    goto LABEL_386;
  }
  v412 = *v126;
  v413 = (v401 - *v126) >> 4;
  v414 = v413 + 1;
  if ((unint64_t)(v413 + 1) >> 60)
    goto LABEL_632;
  v415 = v410 - (_QWORD)v412;
  if (v415 >> 3 > v414)
    v414 = v415 >> 3;
  if ((unint64_t)v415 >= 0x7FFFFFFFFFFFFFF0)
    v416 = 0xFFFFFFFFFFFFFFFLL;
  else
    v416 = v414;
  if (v416)
  {
    if (v416 >> 60)
      goto LABEL_641;
    v417 = (char *)operator new(16 * v416);
  }
  else
  {
    v417 = 0;
  }
  v418 = &v417[16 * v413];
  v419 = &v417[16 * v416];
  v120.f64[0] = v598;
  *(float64_t *)v418 = v598;
  *((_QWORD *)v418 + 1) = v597;
  v411 = v418 + 16;
  if (v401 == v412)
  {
    *v126 = v418;
    v126[1] = v411;
    v126[2] = v419;
LABEL_385:
    operator delete(v401);
    goto LABEL_386;
  }
  do
  {
    *((_OWORD *)v418 - 1) = *((_OWORD *)v401 - 1);
    v418 -= 16;
    v401 -= 16;
  }
  while (v401 != v412);
  v401 = *v126;
  *v126 = v418;
  v126[1] = v411;
  v126[2] = v419;
  if (v401)
    goto LABEL_385;
LABEL_386:
  v126[1] = v411;
LABEL_387:
  v420.f64[0] = *(float64_t *)(v367 + 24);
  v421 = (char *)v631;
  v422 = v632;
  v423 = *v125;
  v125[1] = *v125;
  if (v421 != v422)
  {
    v424 = 0;
    v425 = v420.f64[0] + v420.f64[0];
    v427 = v618;
    _Q6 = v623;
    *(_QWORD *)&v428.f64[0] = v623.n128_u64[0];
    *(_QWORD *)&v428.f64[1] = v618.n128_u64[0];
    v429.n128_u64[0] = v628;
    v431 = *(double *)&v614;
    v430 = (float64x2_t)v616;
    v433 = (float64x2_t)v610;
    v432 = v612;
    v434 = *(double *)&v607;
    v435 = v604;
    *(float64x2_t *)v606 = v428;
    while (2)
    {
      v120 = vmulq_f64(v428, *(float64x2_t *)(v421 + 24));
      v437 = v429.n128_f64[0] * *((double *)v421 + 2) + v120.f64[0];
      v120.f64[0] = v120.f64[1];
      v420.f64[0] = v360 + v437 + v120.f64[1];
      if (v420.f64[0] <= 0.0)
        goto LABEL_391;
      v120.f64[0] = *((float64_t *)v421 + 4);
      _Q2 = *((float64x2_t *)v421 + 1);
      __asm { FMLA            D0, D6, V2.D[1] }
      v420.f64[0] = v360 + _D0 + v427.n128_f64[0] * v120.f64[0];
      if (v420.f64[0] < 0.00000001)
        goto LABEL_391;
      _Q2.f64[1] = *(double *)vextq_s8((int8x16_t)_Q2, (int8x16_t)_Q2, 8uLL).i64;
      v123.f64[0] = v358 + vmulq_f64(v430, _Q2).f64[0] + v431 * _Q2.f64[1] + v432 * v120.f64[0];
      v442 = v357 + vmulq_f64(v433, _Q2).f64[0] + v434 * _Q2.f64[1] + v435 * v120.f64[0];
      v122.f64[0] = *((float64_t *)v421 + 1);
      _Q2.f64[0] = (v420.f64[0] * v122.f64[0] - v123.f64[0]) * (v420.f64[0] * v122.f64[0] - v123.f64[0]);
      v120.f64[0] = (v420.f64[0] * *(double *)v421 - v442) * (v420.f64[0] * *(double *)v421 - v442) + _Q2.f64[0];
      v420.f64[0] = v425 * v420.f64[0] * (v425 * v420.f64[0]);
      if (v120.f64[0] >= v420.f64[0])
        goto LABEL_391;
      v443 = (unint64_t)v125[2];
      if ((unint64_t)v423 < v443)
      {
        *(_DWORD *)v423 = v424;
        v436 = (uint64_t)(v423 + 4);
        goto LABEL_390;
      }
      v444 = *v125;
      v445 = v423 - *v125;
      v446 = v445 >> 2;
      v447 = (v445 >> 2) + 1;
      if (v447 >> 62)
        sub_20E867F44();
      v448 = v443 - (_QWORD)v444;
      if (v448 >> 1 > v447)
        v447 = v448 >> 1;
      if ((unint64_t)v448 >= 0x7FFFFFFFFFFFFFFCLL)
        v449 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v449 = v447;
      if (v449)
      {
        if (v449 >> 62)
          sub_20E877A38();
        v450 = operator new(4 * v449);
        _Q6 = v623;
        v429.n128_u64[0] = v628;
        v430 = (float64x2_t)v616;
        v427 = v618;
        v432 = v612;
        v431 = *(double *)&v614;
        v434 = *(double *)&v607;
        v433 = (float64x2_t)v610;
        v435 = v604;
        v428 = *(float64x2_t *)v606;
        v451 = &v450[4 * v446];
        *(_DWORD *)v451 = v424;
        v436 = (uint64_t)(v451 + 4);
        v452 = v423 - v444;
        if (v423 != v444)
        {
LABEL_405:
          v453 = v452 - 4;
          if (v453 < 0xBC
            || (v456 = (v423 - 4 - v444) & 0xFFFFFFFFFFFFFFFCLL, &v450[v445 - 4 - v456] > &v450[v445 - 4])
            || &v423[-v456 - 4] > v423 - 4
            || (unint64_t)(v423 - v450 - v445) < 0x20)
          {
            v454 = v423;
            v125 = v595;
          }
          else
          {
            v457 = (v453 >> 2) + 1;
            v458 = 4 * (v457 & 0x7FFFFFFFFFFFFFF8);
            v454 = &v423[-v458];
            v451 -= v458;
            v459 = (float64x2_t *)&v450[4 * v446 - 16];
            v460 = (float64x2_t *)(v423 - 16);
            v461 = v457 & 0x7FFFFFFFFFFFFFF8;
            v125 = v595;
            do
            {
              v120 = v460[-1];
              v420 = *v460;
              v459[-1] = v120;
              *v459 = v420;
              v459 -= 2;
              v460 -= 2;
              v461 -= 8;
            }
            while (v461);
            if (v457 == (v457 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_408:
              *v125 = v451;
              v125[1] = (char *)v436;
              v125[2] = &v450[4 * v449];
              if (!v444)
              {
LABEL_390:
                v125[1] = (char *)v436;
                v423 = (char *)v436;
LABEL_391:
                ++v424;
                v421 += 40;
                if (v421 == v422)
                {
                  v462 = *v125;
                  goto LABEL_422;
                }
                continue;
              }
LABEL_412:
              operator delete(v444);
              v435 = v604;
              v428 = *(float64x2_t *)v606;
              v434 = *(double *)&v607;
              v433 = (float64x2_t)v610;
              v432 = v612;
              v431 = *(double *)&v614;
              v430 = (float64x2_t)v616;
              v427 = v618;
              _Q6 = v623;
              v429.n128_u64[0] = v628;
              goto LABEL_390;
            }
          }
          do
          {
            v455 = *((_DWORD *)v454 - 1);
            v454 -= 4;
            *((_DWORD *)v451 - 1) = v455;
            v451 -= 4;
          }
          while (v454 != v444);
          goto LABEL_408;
        }
      }
      else
      {
        v450 = 0;
        v451 = (char *)(4 * v446);
        *(_DWORD *)(4 * v446) = v424;
        v436 = 4 * v446 + 4;
        v452 = v423 - v444;
        if (v423 != v444)
          goto LABEL_405;
      }
      break;
    }
    v125 = v595;
    *v595 = v451;
    v595[1] = (char *)v436;
    v595[2] = &v450[4 * v449];
    if (!v444)
      goto LABEL_390;
    goto LABEL_412;
  }
  v462 = v423;
  _Q6 = v623;
  v429.n128_u64[0] = v628;
  *(_QWORD *)&v430.f64[0] = v616.i64[0];
  v427 = v618;
  v432 = v612;
  v431 = *(double *)&v614;
  v434 = *(double *)&v607;
  *(_QWORD *)&v433.f64[0] = v610.i64[0];
  v435 = v604;
LABEL_422:
  v463 = (v423 - v462) >> 2;
  v464 = *(unint64_t **)(v594 + 32);
  v465 = *(_QWORD *)(v594 + 40) - (_QWORD)v464;
  if ((v465 & 0x7FFFFFFF8) == 0)
  {
LABEL_426:
    sub_20EB67274(&v650);
    if (**(int **)(v650 + 56) > 2)
      goto LABEL_611;
    v468 = *(unsigned __int8 *)(v650 + 72);
    v469 = sub_20E8C31DC(v650, "OSLogSurrogateAppender", 1, 0);
    v470 = v469;
    if (!v468 && v469 == 0)
      goto LABEL_611;
    *(_QWORD *)&v639.f64[0] = &v650;
    *(std::chrono::steady_clock::time_point *)&v639.f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
    *(std::chrono::system_clock::time_point *)&v640[0].f64[0] = (std::chrono::system_clock::time_point)std::chrono::system_clock::now().__d_.__rep_;
    LODWORD(v640[0].f64[1]) = 2;
    *(_QWORD *)&v640[1].f64[0] = "unknown file";
    LODWORD(v640[1].f64[1]) = 94;
    v640[2].f64[1] = 0.0;
    v640[3].f64[0] = 0.0;
    *(_QWORD *)&v640[2].f64[0] = "unknown function";
    if (v586 >= 0x10)
      v472 = (double)v592;
    else
      v472 = 1.0;
    v473 = **(_QWORD **)&v639.f64[0];
    v629 = **(_QWORD **)&v639.f64[0];
    if (*(char *)(**(_QWORD **)&v639.f64[0] + 39) < 0)
    {
      v475 = *(const char **)(v473 + 16);
      v474 = *(_QWORD *)(v473 + 24);
    }
    else
    {
      v474 = *(unsigned __int8 *)(**(_QWORD **)&v639.f64[0] + 39);
      v475 = (const char *)(**(_QWORD **)&v639.f64[0] + 16);
    }
    v624 = **(_QWORD **)&v639.f64[0] + 16;
    v532 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v532 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)__src);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__src);
      if (BYTE8(__src[1]) && SBYTE7(__src[1]) < 0)
        operator delete(*(void **)&__src[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v533 = byte_254A4A4F8;
    else
      v533 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v534 = byte_254A4A4F8[23];
    else
      v534 = *(_QWORD *)&byte_254A4A4F8[8];
    *(_QWORD *)&__src[0] = os_log_create(v533, v475);
    v535 = (char *)__src + 8;
    if (v534 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v534 >= 0x17)
    {
      v536 = v470;
      v537 = v475;
      v538 = v468;
      v539 = (v534 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v534 | 7) != 0x17)
        v539 = v534 | 7;
      v540 = v539 + 1;
      v535 = (char *)operator new(v539 + 1);
      *((_QWORD *)&__src[1] + 1) = v540 | 0x8000000000000000;
      *((_QWORD *)&__src[0] + 1) = v535;
      *(_QWORD *)&__src[1] = v534;
      v468 = v538;
      v475 = v537;
      v470 = v536;
    }
    else
    {
      HIBYTE(__src[1]) = v534;
      if (!v534)
      {
LABEL_544:
        v535[v534] = 0;
        LOBYTE(__src[2]) = 1;
        v541 = (char *)&__src[2] + 8;
        if (v474 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v474 >= 0x17)
        {
          v542 = (v474 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v474 | 7) != 0x17)
            v542 = v474 | 7;
          v543 = v542 + 1;
          v541 = (char *)operator new(v542 + 1);
          *((_QWORD *)&__src[3] + 1) = v543 | 0x8000000000000000;
          *((_QWORD *)&__src[2] + 1) = v541;
          *(_QWORD *)&__src[3] = v474;
        }
        else
        {
          HIBYTE(__src[3]) = v474;
          if (!v474)
          {
LABEL_552:
            v541[v474] = 0;
            LOBYTE(__src[4]) = 1;
            v544 = *(NSObject **)&__src[0];
            if (SHIBYTE(__src[3]) < 0)
              operator delete(*((void **)&__src[2] + 1));
            if (LOBYTE(__src[2]) && SHIBYTE(__src[1]) < 0)
              operator delete(*((void **)&__src[0] + 1));
            if (*(_QWORD *)&__src[0])
              os_release(*(void **)&__src[0]);
            v545 = (double)v463 / v472;
            if (v470 && *(_QWORD *)(v470 + 24))
            {
              v546 = _os_log_pack_size();
              v547 = (std::__shared_weak_count_vtbl *)operator new(v546, (std::align_val_t)8uLL);
              v548 = (std::__shared_weak_count *)operator new();
              v549 = v548;
              v548->__shared_owners_ = 0;
              v550 = (unint64_t *)&v548->__shared_owners_;
              v548->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v548->__shared_weak_owners_ = 0;
              v548[1].__vftable = v547;
              *(_QWORD *)&__src[0] = v547;
              *((_QWORD *)&__src[0] + 1) = v547;
              *(_QWORD *)&__src[1] = v548;
              do
                v551 = __ldxr(v550);
              while (__stxr(v551 + 1, v550));
              __src[2] = 0uLL;
              *((_QWORD *)&__src[1] + 1) = 0;
              do
                v552 = __ldaxr(v550);
              while (__stlxr(v552 - 1, v550));
              if (!v552)
              {
                ((void (*)(std::__shared_weak_count *))v548->__on_zero_shared)(v548);
                std::__shared_weak_count::__release_weak(v549);
              }
              v553 = *(_QWORD *)&__src[0];
              v554 = _os_log_pack_fill();
              *(_DWORD *)v554 = 134218240;
              *(_QWORD *)(v554 + 4) = v463;
              *(_WORD *)(v554 + 12) = 2048;
              *(double *)(v554 + 14) = v545;
              v555 = operator new();
              v556 = *(unsigned __int8 *)(v629 + 39);
              v557 = v624;
              if ((v556 & 0x80u) != 0)
              {
                v557 = *(_QWORD *)(v629 + 16);
                v556 = *(_QWORD *)(v629 + 24);
              }
              *(_QWORD *)v555 = v553;
              *(_OWORD *)(v555 + 8) = *(_OWORD *)((char *)__src + 8);
              *((_QWORD *)&__src[0] + 1) = 0;
              *(_QWORD *)&__src[1] = 0;
              *(_OWORD *)(v555 + 24) = *(_OWORD *)((char *)&__src[1] + 8);
              *((_QWORD *)&__src[1] + 1) = 0;
              *(_QWORD *)&__src[2] = 0;
              *(_QWORD *)(v555 + 40) = v557;
              *(_QWORD *)(v555 + 48) = v556;
              *(_BYTE *)(v555 + 56) = 2;
              category[0] = 0;
              *(_QWORD *)&v647.f64[0] = v555;
              (*(void (**)(_QWORD, float64x2_t *))(**(_QWORD **)(v470 + 24) + 40))(*(_QWORD *)(v470 + 24), &v647);
              v558 = v647.f64[0];
              v647.f64[0] = 0.0;
              if (v558 != 0.0)
              {
                v559 = *(std::__shared_weak_count **)(*(_QWORD *)&v558 + 32);
                if (v559)
                {
                  v560 = (unint64_t *)&v559->__shared_owners_;
                  do
                    v561 = __ldaxr(v560);
                  while (__stlxr(v561 - 1, v560));
                  if (!v561)
                  {
                    ((void (*)(std::__shared_weak_count *))v559->__on_zero_shared)(v559);
                    std::__shared_weak_count::__release_weak(v559);
                  }
                }
                v562 = *(std::__shared_weak_count **)(*(_QWORD *)&v558 + 16);
                if (v562)
                {
                  v563 = (unint64_t *)&v562->__shared_owners_;
                  do
                    v564 = __ldaxr(v563);
                  while (__stlxr(v564 - 1, v563));
                  if (!v564)
                  {
                    ((void (*)(std::__shared_weak_count *))v562->__on_zero_shared)(v562);
                    std::__shared_weak_count::__release_weak(v562);
                  }
                }
                MEMORY[0x212BC6398](*(_QWORD *)&v558, 0x10F0C40B62ED6C6);
                v565 = category[0];
                category[0] = 0;
                if (v565)
                {
                  v566 = (std::__shared_weak_count *)*((_QWORD *)v565 + 4);
                  if (v566)
                  {
                    v567 = (unint64_t *)&v566->__shared_owners_;
                    do
                      v568 = __ldaxr(v567);
                    while (__stlxr(v568 - 1, v567));
                    if (!v568)
                    {
                      ((void (*)(std::__shared_weak_count *))v566->__on_zero_shared)(v566);
                      std::__shared_weak_count::__release_weak(v566);
                    }
                  }
                  v569 = (std::__shared_weak_count *)*((_QWORD *)v565 + 2);
                  if (v569)
                  {
                    v570 = (unint64_t *)&v569->__shared_owners_;
                    do
                      v571 = __ldaxr(v570);
                    while (__stlxr(v571 - 1, v570));
                    if (!v571)
                    {
                      ((void (*)(std::__shared_weak_count *))v569->__on_zero_shared)(v569);
                      std::__shared_weak_count::__release_weak(v569);
                    }
                  }
                  MEMORY[0x212BC6398](v565, 0x10F0C40B62ED6C6);
                }
              }
              v572 = *(std::__shared_weak_count **)&__src[2];
              if (*(_QWORD *)&__src[2])
              {
                v573 = (unint64_t *)(*(_QWORD *)&__src[2] + 8);
                do
                  v574 = __ldaxr(v573);
                while (__stlxr(v574 - 1, v573));
                if (!v574)
                {
                  ((void (*)(std::__shared_weak_count *))v572->__on_zero_shared)(v572);
                  std::__shared_weak_count::__release_weak(v572);
                }
              }
              v575 = *(std::__shared_weak_count **)&__src[1];
              if (*(_QWORD *)&__src[1])
              {
                v576 = (unint64_t *)(*(_QWORD *)&__src[1] + 8);
                do
                  v577 = __ldaxr(v576);
                while (__stlxr(v577 - 1, v576));
                if (!v577)
                {
                  ((void (*)(std::__shared_weak_count *))v575->__on_zero_shared)(v575);
                  std::__shared_weak_count::__release_weak(v575);
                }
              }
            }
            else
            {
              os_log_type_enabled(v544, OS_LOG_TYPE_DEBUG);
              LODWORD(__src[0]) = 134218240;
              *(_QWORD *)((char *)__src + 4) = v463;
              WORD6(__src[0]) = 2048;
              *(double *)((char *)__src + 14) = v545;
              v578 = (void *)_os_log_send_and_compose_impl();
              if (v578)
                free(v578);
            }
            if (v468)
            {
              sub_20E8C003C((uint64_t)&v639, "Not enough inliers available (inlier: %lu, ratio: %f)", v463, v545);
              sub_20E863570((uint64_t)&v639);
            }
            sub_20E863570((uint64_t)&v639);
            v529 = v640[3].f64[0];
            if (*(_QWORD *)&v640[3].f64[0])
            {
              v579 = (unint64_t *)(*(_QWORD *)&v640[3].f64[0] + 8);
              do
                v531 = __ldaxr(v579);
              while (__stlxr(v531 - 1, v579));
              goto LABEL_609;
            }
            goto LABEL_611;
          }
        }
        memmove(v541, v475, v474);
        goto LABEL_552;
      }
    }
    memmove(v535, v533, v534);
    goto LABEL_544;
  }
  v466 = (v465 >> 3);
  while (1)
  {
    v467 = *v464++;
    if (v463 >= v467)
      break;
    if (!--v466)
      goto LABEL_426;
  }
  v433.f64[1] = v434;
  *(float64x2_t *)v587 = v433;
  *(double *)(v587 + 16) = v435;
  *(double *)(v587 + 24) = v357;
  v430.f64[1] = v431;
  *(float64x2_t *)(v587 + 32) = v430;
  *(double *)(v587 + 48) = v432;
  *(double *)(v587 + 56) = v358;
  v429.n128_u64[1] = _Q6.n128_u64[0];
  *(__n128 *)(v587 + 64) = v429;
  *(_QWORD *)(v587 + 80) = v427.n128_u64[0];
  *(double *)(v587 + 88) = v360;
  if (*(_BYTE *)(v594 + 56))
  {
    if ((sub_20EB67368(v594, &v631, v125, (_QWORD *)v587, v420.f64[0], v120.f64[0], _Q2.f64[0], v122.f64[0], v123.f64[0], v429, _Q6, v427) & 1) == 0)
    {
      sub_20EB67274(&v650);
      if (**(int **)(v650 + 56) <= 2)
      {
        v476 = *(unsigned __int8 *)(v650 + 72);
        v477 = sub_20E8C31DC(v650, "OSLogSurrogateAppender", 1, 0);
        v478 = v477 ? v477 + 16 : 0;
        if (v476 || v477)
        {
          *(_QWORD *)&v639.f64[0] = &v650;
          *(std::chrono::steady_clock::time_point *)&v639.f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
          *(std::chrono::system_clock::time_point *)&v640[0].f64[0] = (std::chrono::system_clock::time_point)std::chrono::system_clock::now().__d_.__rep_;
          LODWORD(v640[0].f64[1]) = 2;
          *(_QWORD *)&v640[1].f64[0] = "unknown file";
          LODWORD(v640[1].f64[1]) = 108;
          v640[2].f64[1] = 0.0;
          v640[3].f64[0] = 0.0;
          *(_QWORD *)&v640[2].f64[0] = "unknown function";
          v479 = **(_QWORD **)&v639.f64[0];
          v480 = (uint64_t *)(**(_QWORD **)&v639.f64[0] + 16);
          if (*(char *)(**(_QWORD **)&v639.f64[0] + 39) < 0)
          {
            v482 = *(char **)(v479 + 16);
            v481 = *(char **)(v479 + 24);
          }
          else
          {
            v481 = (char *)*(unsigned __int8 *)(**(_QWORD **)&v639.f64[0] + 39);
            v482 = (char *)(**(_QWORD **)&v639.f64[0] + 16);
          }
          category[0] = v482;
          category[1] = v481;
          v582 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v582 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)__src);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__src);
            if (BYTE8(__src[1]) && SBYTE7(__src[1]) < 0)
              operator delete(*(void **)&__src[0]);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
          *(_QWORD *)&v583 = byte_254A4A4F8[23];
          if (byte_254A4A4F8[23] >= 0)
          {
            v584 = byte_254A4A4F8;
          }
          else
          {
            v583 = *(double *)&byte_254A4A4F8[8];
            v584 = *(const char **)byte_254A4A4F8;
          }
          *(_QWORD *)&v647.f64[0] = v584;
          v647.f64[1] = v583;
          *(_QWORD *)&__src[0] = os_log_create(v584, category[0]);
          sub_20E86E5A8((_QWORD *)__src + 1, (uint64_t)&v647);
          sub_20E86E5A8((_QWORD *)&__src[2] + 1, (uint64_t)category);
          v585 = *(NSObject **)&__src[0];
          sub_20E86E44C((uint64_t)__src);
          sub_20EB6DDB8(v478, v480, v585, OS_LOG_TYPE_DEBUG);
          if (v476)
          {
            sub_20E8C003C((uint64_t)&v639, "6-DoF Pose refinement failed. Estimated pose will be used as-is.");
            sub_20E863570((uint64_t)&v639);
          }
          sub_20E863714((uint64_t)&v639);
        }
      }
    }
  }
  v118 = 1;
  v580 = (char *)v631;
  if (v631)
    goto LABEL_612;
  return v118;
}

void sub_20EB66EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,_Unwind_Exception *exception_object,uint64_t a59,uint64_t a60,char a61)
{
  if (LOBYTE(STACK[0x258]) && SLOBYTE(STACK[0x257]) < 0)
    operator delete((void *)STACK[0x240]);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a61);
  if (!a52)
    _Unwind_Resume(a1);
  operator delete(a52);
  _Unwind_Resume(a1);
}

void sub_20EB6724C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  void *v58;

  if (v58)
  {
    operator delete(v58);
    if (!a58)
      JUMPOUT(0x20EB67218);
    JUMPOUT(0x20EB67210);
  }
  JUMPOUT(0x20EB67208);
}

void sub_20EB67274(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5B2A0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5B2A0))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.geometry");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A5B298);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A5B2A0);
  }
  *a1 = qword_254A5B298;
}

void sub_20EB67310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5B2A0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5B2A0);
  _Unwind_Resume(a1);
}

uint64_t sub_20EB67368(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, double a5, double a6, double a7, double a8, double a9, __n128 a10, __n128 a11, __n128 a12)
{
  __int128 v16;
  __int128 v17;
  __int128 v18;
  int8x16_t v19;
  float64x2_t v25;
  float64x2_t v27;
  double v30;
  double v31;
  double v32;
  __double2 v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _OWORD *v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  _QWORD *v49;
  _OWORD *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  __int128 v56;
  __int128 v57;
  char *v58;
  __int128 v59;
  __int128 v60;
  unint64_t v61;
  char *v62;
  _OWORD *v63;
  float64x2_t v64;
  int8x16_t v65;
  double v66;
  float64x2_t v67;
  float64x2_t v68;
  double v69;
  double v70;
  double cosval;
  double v72;
  __double2 v73;
  float64x2_t v74;
  double v75;
  float64_t v76;
  unint64_t v77;
  float64_t v78;
  float64_t v79;
  float64_t v80;
  double v81;
  float64_t v82;
  float64_t v83;
  float64_t v84;
  float64_t v85;
  float64_t v86;
  float64_t v87;
  float64_t v88;
  unint64_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  unsigned int v100;
  double v101;
  unint64_t v102;
  float64x2_t *v103;
  void *v104;
  float64x2_t v105;
  float64_t v106;
  float64_t v107;
  float64_t v108;
  float64_t v109;
  float64_t v110;
  float64_t v111;
  float64_t v112;
  unint64_t v113;
  float64_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  int8x16_t v146;
  int8x16_t v147;
  int8x16_t v148;
  int8x16_t v149;
  int8x16_t v150;
  int8x16_t v151;
  int8x16_t v152;
  int8x16_t v153;
  int8x16_t v154;
  int8x16_t v155;
  int8x16_t v156;
  int8x16_t v157;
  int8x16_t v158;
  int8x16_t v159;
  int8x16_t v160;
  int8x16_t v161;
  float64x2_t v162;
  int8x16_t v163;
  double v164;
  float64x2_t v166;
  float64x2_t v169;
  float64x2_t v170;
  double v171;
  double v172;
  double v173;
  double v174;
  double v175;
  double v176;
  double v177;
  float64x2_t v178;
  float64x2_t v179;
  double v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  unint64_t v198;
  unint64_t v199;
  double v200;
  float v201;
  float64x2_t v202;
  __int128 v203;
  void *v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  double v215;
  double v216;
  double v217;
  double v218;
  double v219;
  __double2 v220;
  float64x2_t v221;
  double v222;
  float64_t v223;
  double v224;
  float64_t v225;
  float64_t v226;
  float64_t v227;
  double v228;
  float64_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v234;
  float64x2_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v243;
  float64x2_t v244;
  float64x2_t v245;
  float64x2_t v246;
  float64x2_t v247;
  float64x2_t v248;
  float64x2_t v249;
  float64x2_t v250;
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  float64x2_t v257;
  float64x2_t v258;
  float64x2_t v259;
  double v263;
  double v264;
  double v265;
  __double2 v266;
  float64x2_t v267;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v270;
  float64x2_t v271;
  float64x2_t v272;
  float64x2_t v273;
  float64x2_t v274;
  float64x2_t v275;
  float64x2_t v276;
  float64x2_t v277;
  float64x2_t v279;
  float64x2_t v280;
  float64x2_t v281;
  float64x2_t v282;
  double v285;
  double v286;
  double v287;
  __double2 v288;
  float64_t v289;
  double v290;
  unint64_t v291;
  double v292;
  float64_t v293;
  float64_t v294;
  float64_t v295;
  double v296;
  float64_t v297;
  double v298;
  float64_t v299;
  double v300;
  float64_t v301;
  float64_t v302;
  unint64_t v303;
  float64x2_t v304;
  float64x2_t v305;
  float64x2_t v306;
  float64x2_t v307;
  float64x2_t v308;
  float64x2_t v309;
  float64x2_t v310;
  float64x2_t v311;
  float64x2_t v312;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  int8x16_t v317;
  int8x16_t v318;
  std::locale::__imp *v326;
  float64x2_t v327;
  float64x2_t v328;
  float64x2_t v329;
  double v330;
  float64x2_t v331;
  float64x2_t v333;
  float64x2_t v334;
  float64x2_t v335;
  float64x2_t *v336;
  void *v337;
  unint64_t v339;
  double v340;
  float64x2_t v342;
  float64x2_t v344;
  double v345;
  double v348;
  double v349;
  double v350;
  const char *v351;
  _QWORD *v352;
  _QWORD *v353;
  _QWORD *v354;
  _QWORD *v355;
  _QWORD *v363;
  _QWORD *v364;
  const std::locale::facet *v365;
  float64x2_t v369;
  float64x2_t v370;
  float64x2_t v371;
  float64x2_t v376;
  float64x2_t v377;
  double v378;
  double v379;
  double v380;
  double v381;
  float v382;
  double v383;
  __double2 v384;
  float64x2_t v385;
  double v386;
  float64_t v387;
  unint64_t v388;
  float64_t v389;
  float64_t v390;
  float64_t v391;
  double v392;
  float64_t v393;
  float64_t v394;
  float64_t v395;
  float64_t v396;
  float64_t v397;
  float64_t v398;
  float64_t v399;
  unint64_t v400;
  float64x2_t v401;
  float64x2_t v402;
  float64x2_t v403;
  float64x2_t v404;
  float64x2_t v405;
  float64x2_t v406;
  float64x2_t v407;
  float64x2_t v408;
  float64x2_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  float64x2_t v413;
  float64x2_t v414;
  double v415;
  float64x2_t v416;
  float64x2_t v417;
  double v418;
  double v419;
  double v420;
  double v421;
  int v422;
  unint64_t v423;
  unint64_t v424;
  uint64_t v425;
  const char *v426;
  size_t v427;
  unsigned __int8 v428;
  double v429;
  __double2 v430;
  double v431;
  float64_t v432;
  double v433;
  float64_t v434;
  double v435;
  double v436;
  double v437;
  float64_t v438;
  double v439;
  float64_t v440;
  double v441;
  float64_t v442;
  double v443;
  double v444;
  float64x2_t v445;
  float64x2_t v446;
  float64x2_t v447;
  float64x2_t v448;
  __int128 v449;
  float64x2_t v450;
  float64x2_t v451;
  float64x2_t v452;
  float64x2_t v453;
  float64x2_t v454;
  float64x2_t v455;
  float64x2_t v456;
  float64x2_t v457;
  int64x2_t v458;
  int64x2_t v459;
  int64x2_t v460;
  __int128 v461;
  uint64_t v462;
  _OWORD *v463;
  unsigned __int8 v464;
  const char *v465;
  size_t v466;
  void **v467;
  uint64_t v468;
  uint64_t v469;
  void **v470;
  NSObject *v471;
  uint64_t v472;
  uint64_t v473;
  size_t v474;
  std::__shared_weak_count_vtbl *v475;
  std::__shared_weak_count *v476;
  std::__shared_weak_count *v477;
  unint64_t *p_shared_owners;
  unint64_t v479;
  unint64_t v480;
  void *v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  const char *v485;
  float64_t v486;
  std::__shared_weak_count *v487;
  unint64_t *v488;
  unint64_t v489;
  std::__shared_weak_count *v490;
  unint64_t *v491;
  unint64_t v492;
  float64x2_t *v493;
  std::__shared_weak_count *v494;
  unint64_t *v495;
  unint64_t v496;
  std::__shared_weak_count *v497;
  unint64_t *v498;
  unint64_t v499;
  std::__shared_weak_count *v500;
  int v501;
  unint64_t *v502;
  unint64_t v503;
  std::__shared_weak_count *v504;
  unint64_t *v505;
  unint64_t v506;
  void *v507;
  std::__shared_weak_count *v508;
  unint64_t *v509;
  unint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  void *v518;
  _QWORD *v519;
  float v520;
  float v521;
  float64x2_t v522;
  double v523;
  float64x2_t v524;
  float64x2_t v525;
  float64x2_t v526;
  float64x2_t v527;
  int8x16_t v528;
  float64x2_t v529;
  float64x2_t v530;
  float64x2_t v531;
  unint64_t v532;
  float64x2_t v533;
  float64x2_t v534;
  float64x2_t v535;
  float64x2_t v536;
  float64x2_t v537;
  float64x2_t v538;
  float64x2_t v539;
  unint64_t v540;
  unint64_t v541;
  unint64_t v542;
  unint64_t v543;
  unint64_t v544;
  unint64_t v545;
  unint64_t v546;
  unint64_t v547;
  unint64_t v548;
  unint64_t v549;
  unint64_t v550;
  unint64_t v551;
  unint64_t v552;
  unint64_t v553;
  float64_t v554;
  float64_t v555;
  float64_t v556;
  float64_t v557;
  float64_t v558;
  float64_t v559;
  float64_t v560;
  double v561;
  double v562;
  float64x2_t v563;
  double v564;
  float64x2_t v565;
  float64x2_t v566;
  float64x2_t v567;
  double v568;
  float64x2_t v569;
  float64x2_t v570;
  float64x2_t v571;
  double v572;
  float64x2_t v573;
  std::locale::__imp *locale;
  float64_t v575;
  double v576;
  float64x2_t v577;
  float64_t v578;
  double v579;
  double v580;
  float64x2_t v581;
  float64x2_t v582;
  float64x2_t v583;
  float64x2_t v584;
  float64_t v585;
  float64_t v586;
  float64_t v587;
  float64x2_t v588;
  int8x16_t v589;
  float64x2_t v590;
  int8x16_t v591;
  float64_t v592;
  int8x16_t v593;
  const char *v594;
  __int128 v595;
  float64x2_t v596;
  unint64_t v597;
  float64_t v598;
  float64_t v599;
  float64x2_t v600;
  float64x2_t v601;
  int v602;
  std::locale v603[2];
  _OWORD v604[2];
  const char *v605;
  uint64_t v606;
  std::__shared_weak_count *v607;
  _BYTE v608[56];
  float64x2_t v609;
  __int128 v610;
  float64x2_t v611;
  float64x2_t v612;
  float64x2_t v613;
  _BYTE v614[32];
  uint64_t v615;
  __int128 v616;
  __int128 v617;
  uint64_t v618;
  __int16 v619;
  char v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  void **v624;
  unint64_t v625;
  __int128 v626;
  __int128 v627;
  __int128 v628;
  unint64_t v629;
  double *v630;
  void *v631;
  char *v632;
  char *v633;
  float64x2_t v634;
  void *v635;
  _OWORD *v636;
  _OWORD *v637;
  __int128 v638;
  double v639;
  double v640;
  double v641;
  void *v642;
  _BYTE *v643;
  char *v644;
  __int128 v645;
  _BYTE v646[32];
  uint64_t (**v647)();
  _OWORD v648[6];
  int8x16_t v649;
  __int128 v650;
  _BYTE v651[32];
  uint64_t v652;
  __int128 v653;
  __int128 v654;
  uint64_t v655;
  __int16 v656;
  char v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  float64x2_t v661;
  _BYTE v662[32];
  double *v663[2];
  float64x2_t *v664[2];
  void *object[22];
  int8x16_t v666;
  int8x16_t v667;
  int8x16_t v668;
  int8x16_t v669;
  int8x16_t v670;
  float64x2_t v671;
  int8x16_t v672;
  uint64_t v673;

  v673 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v16 = *a4;
  *(_QWORD *)&v17 = a4[1];
  *(_QWORD *)&v18 = a4[2];
  v19.i64[0] = a4[3];
  *((_QWORD *)&v16 + 1) = a4[4];
  *((_QWORD *)&v17 + 1) = a4[5];
  *((_QWORD *)&v18 + 1) = a4[6];
  v19.i64[1] = a4[7];
  __asm { FMOV            V4.2D, #1.0 }
  v595 = _Q4;
  *(_QWORD *)&_Q4 = a4[11];
  a10.n128_u64[0] = a4[8];
  a11.n128_u64[0] = a4[9];
  a12.n128_u64[0] = a4[10];
  v650 = _Q4;
  v649 = v19;
  v648[5] = a12;
  v648[4] = v18;
  v648[3] = a11;
  v648[2] = v17;
  v648[1] = a10;
  v648[0] = v16;
  v657 = 0;
  memset(v651, 0, sizeof(v651));
  v647 = &off_24C9C5008;
  v652 = 0;
  v653 = 0u;
  v654 = 0u;
  v655 = 0;
  v656 = 3;
  sub_20EB5C370((uint64_t)v651);
  v659 = 0;
  v658 = 0;
  v660 = 0;
  memset(v608, 0, 48);
  object[0] = v648;
  object[1] = 0;
  v603[0].__locale_ = (std::locale::__imp *)v608;
  v603[1].__locale_ = 0;
  sub_20E95B988((float64x2_t **)object, (double **)v603);
  v25.f64[0] = *(float64_t *)&v608[16];
  _Q17 = *(float64x2_t *)v608;
  v27 = (float64x2_t)vextq_s8((int8x16_t)_Q17, (int8x16_t)_Q17, 8uLL);
  _Q0 = vmulq_f64(_Q17, _Q17);
  _Q1.f64[0] = *(float64_t *)&v608[8];
  __asm { FMLA            D0, D1, V17.D[1] }
  v30 = _Q0.f64[0] + v25.f64[0] * v25.f64[0];
  if (v30 >= 0.0000002635)
  {
    v32 = sqrt(v30);
    v592 = *(double *)&v608[16];
    v590 = *(float64x2_t *)v608;
    v588 = v27;
    v33 = __sincos_stret(v32);
    v27 = v588;
    _Q17 = v590;
    v25.f64[0] = v592;
    v31 = v33.__sinval / v32;
    _Q0.f64[0] = 1.0 / v30 * (1.0 - v33.__cosval);
    _Q1.f64[0] = 1.0 / v30 * (1.0 - v33.__sinval / v32);
  }
  else
  {
    _Q0.f64[0] = 0.5 - v30 * (v30 / -720.0 + 0.0416666667);
    _Q1.f64[0] = 0.166666667 - v30 * (v30 / -5040.0 + 0.00833333333);
    v31 = 1.0 - v30 * _Q1.f64[0];
  }
  v519 = a4;
  if (v30 >= 2.775e-15)
  {
    if (v30 <= 9.0)
      _Q0.f64[0] = (_Q0.f64[0] * 0.5 - _Q1.f64[0]) / v31;
    else
      _Q0.f64[0] = (_Q0.f64[0] + v31 * -0.5) / (v30 * _Q0.f64[0]);
  }
  else
  {
    _Q0.f64[0] = v30 * 0.0000330687831 + v30 * 0.00138888889 + 0.0833333333;
  }
  *(_QWORD *)&_Q1.f64[0] = v650;
  v34.f64[0] = v27.f64[0];
  v34.f64[1] = v25.f64[0];
  v35 = (float64x2_t)vextq_s8(v649, (int8x16_t)_Q1, 8uLL);
  v36 = vsubq_f64(vmulq_laneq_f64(_Q17, (float64x2_t)v649, 1), vmulq_f64(v27, (float64x2_t)v649));
  __asm { FMOV            V7.2D, #-0.5 }
  v38 = vaddq_f64(_Q1, vmulq_f64(v36, _Q7));
  *(_QWORD *)&_Q1.f64[1] = v649.i64[0];
  v25.f64[1] = _Q17.f64[0];
  v39 = vsubq_f64(vmulq_f64(v34, _Q1), vmulq_f64(v25, v35));
  v522 = _Q7;
  v40 = (float64x2_t)vextq_s8((int8x16_t)v39, (int8x16_t)v36, 8uLL);
  v36.f64[1] = v39.f64[0];
  *(_QWORD *)&v608[40] = *(_OWORD *)&vaddq_f64(v38, vmulq_f64(_Q0, vsubq_f64(vmulq_laneq_f64(_Q17, v39, 1), vmulq_f64(v27, v39))));
  *(float64x2_t *)&v608[24] = vaddq_f64(vaddq_f64((float64x2_t)v649, vmulq_f64(v39, _Q7)), vmulq_n_f64(vsubq_f64(vmulq_f64(v34, v36), vmulq_f64(v25, v40)), _Q0.f64[0]));
  v526 = *(float64x2_t *)&v608[32];
  v528 = *(int8x16_t *)v608;
  v529 = *(float64x2_t *)&v608[16];
  v41 = *(_QWORD *)(a1 + 72);
  DWORD1(v645) = *(_QWORD *)(a1 + 64);
  LODWORD(v645) = v41;
  v42 = *(_QWORD *)(a1 + 80);
  v646[0] = *(_QWORD *)(a1 + 88) != 0;
  *(_OWORD *)&v646[8] = *(_OWORD *)(a1 + 96);
  *(_QWORD *)&v646[24] = *(_QWORD *)(a1 + 112);
  *((double *)&v645 + 1) = *(double *)(a1 + 24) + *(double *)(a1 + 24);
  if (v42 >= (uint64_t)(a3[1] - *a3) >> 2)
    v43 = (uint64_t)(a3[1] - *a3) >> 2;
  else
    v43 = v42;
  v643 = 0;
  v642 = 0;
  v644 = 0;
  if (v43)
  {
    if (v43 > 0x666666666666666)
      sub_20E867F44();
    v44 = operator new(40 * v43);
    v45 = 0;
    v642 = v44;
    v643 = v44;
    v644 = (char *)v44 + 40 * v43;
    do
    {
      while (1)
      {
        v48 = *a2 + 40 * *(unsigned int *)(*a3 + 4 * v45);
        if (v44 >= (_OWORD *)v644)
          break;
        v46 = *(_OWORD *)v48;
        v47 = *(_OWORD *)(v48 + 16);
        *((_QWORD *)v44 + 4) = *(_QWORD *)(v48 + 32);
        *v44 = v46;
        v44[1] = v47;
        v643 = (char *)v44 + 40;
        ++v45;
        v44 = (_OWORD *)((char *)v44 + 40);
        if (v45 == v43)
          goto LABEL_34;
      }
      v49 = a3;
      v50 = v642;
      v51 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v44 - (_BYTE *)v642) >> 3);
      v52 = v51 + 1;
      if (v51 + 1 > 0x666666666666666)
        sub_20E867F44();
      if (0x999999999999999ALL * ((v644 - (_BYTE *)v642) >> 3) > v52)
        v52 = 0x999999999999999ALL * ((v644 - (_BYTE *)v642) >> 3);
      if (0xCCCCCCCCCCCCCCCDLL * ((v644 - (_BYTE *)v642) >> 3) >= 0x333333333333333)
        v53 = 0x666666666666666;
      else
        v53 = v52;
      if (v53)
      {
        if (v53 > 0x666666666666666)
          sub_20E877A38();
        v54 = (char *)operator new(40 * v53);
      }
      else
      {
        v54 = 0;
      }
      v55 = &v54[40 * v51];
      v56 = *(_OWORD *)v48;
      v57 = *(_OWORD *)(v48 + 16);
      *((_QWORD *)v55 + 4) = *(_QWORD *)(v48 + 32);
      *(_OWORD *)v55 = v56;
      *((_OWORD *)v55 + 1) = v57;
      v58 = v55 + 40;
      if (v44 == v50)
      {
        v642 = &v54[40 * v51];
        v643 = v55 + 40;
        v50 = v44;
        v644 = &v54[40 * v53];
      }
      else
      {
        do
        {
          v59 = *(_OWORD *)((char *)v44 - 40);
          v60 = *(_OWORD *)((char *)v44 - 24);
          *((_QWORD *)v55 - 1) = *((_QWORD *)v44 - 1);
          *(_OWORD *)(v55 - 24) = v60;
          *(_OWORD *)(v55 - 40) = v59;
          v55 -= 40;
          v44 = (_OWORD *)((char *)v44 - 40);
        }
        while (v44 != v50);
        v642 = v55;
        v643 = v58;
        v644 = &v54[40 * v53];
        if (!v50)
          goto LABEL_33;
      }
      operator delete(v50);
LABEL_33:
      a3 = v49;
      v643 = v58;
      ++v45;
      v44 = v58;
    }
    while (v45 != v43);
  }
LABEL_34:
  *(_QWORD *)v608 = &off_24C9C5008;
  v610 = xmmword_210315940;
  v611 = (float64x2_t)unk_210315950;
  v612 = (float64x2_t)xmmword_210315960;
  v613 = (float64x2_t)unk_210315970;
  *(_OWORD *)&v608[8] = xmmword_210315900;
  *(_OWORD *)&v608[24] = *(_OWORD *)algn_210315910;
  *(_OWORD *)&v608[40] = xmmword_210315920;
  v609 = (float64x2_t)unk_210315930;
  v620 = 0;
  v615 = 0;
  memset(v614, 0, sizeof(v614));
  v616 = 0u;
  v617 = 0u;
  v618 = 0;
  v619 = 3;
  sub_20EB5C370((uint64_t)v614);
  v622 = 0;
  v621 = 0;
  v623 = 0;
  v624 = &v642;
  v626 = v645;
  v627 = *(_OWORD *)v646;
  v628 = *(_OWORD *)&v646[16];
  v630 = (double *)&v645;
  v631 = 0;
  v633 = 0;
  v632 = 0;
  v61 = 0xCCCCCCCCCCCCCCCDLL * ((v643 - (_BYTE *)v642) >> 3);
  v625 = v61;
  v629 = v61;
  if (v643 != v642)
  {
    if (v61 >> 61)
      sub_20E867F44();
    v62 = (char *)operator new(0x6666666666666668 * ((v643 - (_BYTE *)v642) >> 3));
    v631 = v62;
    v633 = &v62[8 * v61];
    bzero(v62, 8 * v61);
    v632 = &v62[8 * v61];
  }
  v636 = 0;
  v635 = 0;
  v637 = 0;
  v63 = operator new(0x30uLL);
  v64 = v529;
  v65 = vextq_s8(v528, v528, 8uLL);
  v524 = (float64x2_t)vextq_s8((int8x16_t)v64, (int8x16_t)v64, 8uLL);
  v525 = (float64x2_t)vextq_s8((int8x16_t)v526, (int8x16_t)v526, 8uLL);
  v637 = v63 + 3;
  *v63 = 0u;
  v63[1] = 0u;
  v63[2] = 0u;
  v635 = v63;
  v636 = v63 + 3;
  v66 = *((double *)&v626 + 1);
  v638 = v595;
  v639 = *((double *)&v626 + 1);
  v640 = v66 * v66;
  v641 = v66 + v66;
  *(_QWORD *)&v67.f64[0] = v528.i64[0];
  *(_QWORD *)&v67.f64[1] = v65.i64[0];
  v68 = vmulq_f64(v67, v67);
  v527 = (float64x2_t)v65;
  v69 = v68.f64[0] + *(double *)v65.i64 * *(double *)v65.i64 + v64.f64[0] * v64.f64[0];
  if (v69 >= 0.0000002635)
  {
    v72 = sqrt(v69);
    v73 = __sincos_stret(v72);
    cosval = v73.__cosval;
    v70 = v73.__sinval / v72;
    v64.f64[0] = 1.0 / v69 * (1.0 - v73.__cosval);
    v68.f64[0] = 1.0 / v69 * (1.0 - v73.__sinval / v72);
  }
  else
  {
    v64.f64[0] = 0.5 - v69 * (v69 / -720.0 + 0.0416666667);
    v68.f64[0] = 0.166666667 - v69 * (v69 / -5040.0 + 0.00833333333);
    v70 = 1.0 - v69 * v68.f64[0];
    cosval = 1.0 - v69 * v64.f64[0];
  }
  v74.f64[0] = v529.f64[0];
  v75 = *(double *)v528.i64 * (*(double *)v528.i64 * v64.f64[0]) + cosval;
  v76 = v527.f64[0] * (v527.f64[0] * v64.f64[0]) + cosval;
  *(double *)&v77 = v529.f64[0] * (v529.f64[0] * v64.f64[0]) + cosval;
  v78 = v527.f64[0] * (*(double *)v528.i64 * v64.f64[0]);
  v79 = v529.f64[0] * (*(double *)v528.i64 * v64.f64[0]);
  v80 = v529.f64[0] * (v527.f64[0] * v64.f64[0]);
  v81 = *(double *)v528.i64 * v70;
  v82 = v527.f64[0] * v70;
  v83 = v529.f64[0] * v70;
  v84 = v78 - v83;
  v85 = v79 + v82;
  v86 = v78 + v83;
  v87 = v80 - v81;
  v88 = v79 - v82;
  *(double *)&v89 = v80 + v81;
  *(_QWORD *)&v90.f64[0] = v528.i64[0];
  v90.f64[1] = v527.f64[0];
  v91.f64[0] = v527.f64[0];
  v91.f64[1] = v529.f64[0];
  v92.f64[0] = v525.f64[0];
  v92.f64[1] = v524.f64[0];
  v93.f64[0] = v524.f64[0];
  v93.f64[1] = v526.f64[0];
  *(_QWORD *)&v74.f64[1] = v528.i64[0];
  v94.f64[0] = v526.f64[0];
  v94.f64[1] = v525.f64[0];
  v95 = vsubq_f64(vmulq_f64(v91, v92), vmulq_f64(v74, v94));
  v96 = vsubq_f64(vmulq_f64(v90, v526), vmulq_f64(v527, v524));
  v97 = vaddq_f64(v93, vmulq_n_f64(v95, v64.f64[0]));
  v98 = vaddq_f64(v525, vmulq_f64(v96, v64));
  v99 = (float64x2_t)vextq_s8((int8x16_t)v95, (int8x16_t)v96, 8uLL);
  v96.f64[1] = v95.f64[0];
  *(double *)&v608[8] = v75;
  *(float64_t *)&v608[16] = v86;
  *(float64_t *)&v608[24] = v88;
  *(_QWORD *)&v608[32] = 0;
  *(float64_t *)&v608[40] = v84;
  *(float64_t *)&v608[48] = v76;
  v609 = (float64x2_t)v89;
  *(float64_t *)&v610 = v85;
  *((float64_t *)&v610 + 1) = v87;
  v611 = (float64x2_t)v77;
  *(_QWORD *)&v613.f64[0] = *(_OWORD *)&vaddq_f64(v98, vmulq_f64(vsubq_f64(vmulq_laneq_f64(v90, v95, 1), vmulq_f64(v527, v95)), v68));
  v612 = vaddq_f64(v97, vmulq_n_f64(vsubq_f64(vmulq_f64(v91, v96), vmulq_f64(v74, v99)), v68.f64[0]));
  v613.f64[1] = 1.0;
  v622 = 0;
  v623 = 0;
  v621 = 0;
  if (!DWORD1(v626))
  {
    v520 = -1.0;
    v521 = -1.0;
    goto LABEL_123;
  }
  v100 = 0;
  v523 = 0.0;
  v520 = -1.0;
  v521 = -1.0;
  v101 = 0.5;
  do
  {
    v672 = 0u;
    v671 = 0u;
    v670 = 0u;
    v669 = 0u;
    v668 = 0u;
    v667 = 0u;
    v666 = 0u;
    memset(object, 0, sizeof(object));
    v103 = (float64x2_t *)*v624;
    v104 = v624[1];
    if (*v624 == v104)
    {
      v580 = 0.0;
      v591.i64[0] = 0;
      v587 = 0.0;
      v593.i64[0] = 0;
      v586 = 0.0;
      v589.i64[0] = 0;
      v585 = 0.0;
      v562 = 0.0;
      v572 = 0.0;
      v564 = 0.0;
      v576 = 0.0;
      v568 = 0.0;
      v561 = 0.0;
      if (v100)
        goto LABEL_54;
    }
    else
    {
      v561 = 0.0;
      v580 = 0.0;
      v532 = vextq_s8((int8x16_t)v612, (int8x16_t)v612, 8uLL).u64[0];
      v553 = 0;
      v560 = 0.0;
      v552 = 0;
      v105.f64[1] = *(float64_t *)&v608[48];
      v559 = 0.0;
      v549 = 0;
      v558 = 0.0;
      v105.f64[0] = v611.f64[0];
      v531 = v105;
      v568 = 0.0;
      v106 = 0.0;
      v550 = 0;
      v107 = 0.0;
      v105.f64[0] = v613.f64[0];
      v530 = v105;
      v547 = 0;
      v557 = 0.0;
      v551 = 0;
      v576 = 0.0;
      v548 = 0;
      v108 = 0.0;
      v543 = 0;
      v556 = 0.0;
      v546 = 0;
      v109 = 0.0;
      v564 = 0.0;
      v110 = 0.0;
      v544 = 0;
      v111 = 0.0;
      v541 = 0;
      v112 = 0.0;
      v540 = 0;
      v572 = 0.0;
      v113 = 0;
      v555 = 0.0;
      v545 = 0;
      v554 = 0.0;
      v542 = 0;
      v114 = 0.0;
      v562 = 0.0;
      v591.i64[0] = 0;
      v587 = 0.0;
      v593.i64[0] = 0;
      v586 = 0.0;
      v589.i64[0] = 0;
      v585 = 0.0;
      do
      {
        v164 = v103[2].f64[0];
        _Q2 = v103[1];
        v166 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v608[8], _Q2.f64[0]), *(float64x2_t *)&v608[40], _Q2, 1), (float64x2_t)v610, v164);
        _D6 = v609.f64[0];
        __asm { FMLA            D5, D6, V2.D[1] }
        _Q2.f64[1] = v531.f64[1];
        _Q2.f64[0] = _D5 + v531.f64[0] * v164;
        v169.f64[0] = v612.f64[0];
        *(_QWORD *)&v169.f64[1] = v532;
        v170 = vaddq_f64(v169, v166);
        v171 = vaddq_f64(v530, _Q2).f64[0];
        v172 = 1.0;
        v173 = 1.0 / v171;
        if (v171 == 0.0)
          v173 = 1.0;
        v174 = v173 * v170.f64[0] - v103->f64[0];
        v175 = vmuld_lane_f64(v173, v170, 1) - v103->f64[1];
        v176 = *((double *)&v638 + 1) * (v174 * v174 + v175 * v175);
        if (v176 > v640)
        {
          v177 = sqrt(v176);
          v176 = v177 * v641 - v640;
          v172 = v639 / v177;
        }
        v178 = vnegq_f64(v170);
        v179 = vmulq_n_f64(v178, v173 * v173);
        v180 = v173;
        v181.f64[0] = 0.0;
        v181.f64[1] = v173;
        v182 = vmulq_f64((float64x2_t)*(unint64_t *)&v173, (float64x2_t)0);
        v183 = vmlaq_laneq_f64(vmlsq_lane_f64(v182, v181, v171, 0), v179, v170, 1);
        v184 = vmlsq_lane_f64(vmlaq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v180, v171), (float64x2_t)0, v181), v179, v170.f64[0], 0);
        v185 = vmlaq_f64(vmlaq_n_f64(vmulq_laneq_f64((float64x2_t)*(unint64_t *)&v180, v178, 1), v181, v170.f64[0]), (float64x2_t)0, v179);
        v186 = vmlaq_f64(vmlaq_f64((float64x2_t)*(unint64_t *)&v180, (float64x2_t)0, v181), (float64x2_t)0, v179);
        v187 = vmlaq_f64(vaddq_f64(v181, v182), (float64x2_t)0, v179);
        v188 = vaddq_f64(v179, vmlaq_f64(v182, (float64x2_t)0, v181));
        v189 = (float64x2_t)vzip1q_s64((int64x2_t)v187, (int64x2_t)v188);
        v190 = (float64x2_t)vzip1q_s64((int64x2_t)v185, (int64x2_t)v186);
        v191 = (float64x2_t)vzip1q_s64((int64x2_t)v183, (int64x2_t)v184);
        v192 = vextq_s8((int8x16_t)v189, (int8x16_t)v189, 8uLL).u64[0];
        v193 = vextq_s8((int8x16_t)v190, (int8x16_t)v190, 8uLL).u64[0];
        v194 = vextq_s8((int8x16_t)v191, (int8x16_t)v191, 8uLL).u64[0];
        v195 = (float64x2_t)vzip2q_s64((int64x2_t)v187, (int64x2_t)v188);
        v196 = (float64x2_t)vzip2q_s64((int64x2_t)v185, (int64x2_t)v186);
        v197 = (float64x2_t)vzip2q_s64((int64x2_t)v183, (int64x2_t)v184);
        v198 = vextq_s8((int8x16_t)v195, (int8x16_t)v195, 8uLL).u64[0];
        v199 = vextq_s8((int8x16_t)v196, (int8x16_t)v196, 8uLL).u64[0];
        v597 = vextq_s8((int8x16_t)v197, (int8x16_t)v197, 8uLL).u64[0];
        if (vabdd_f64(1.0, v172) > 2.22044605e-16)
        {
          *(_QWORD *)&v189.f64[1] = v192;
          v189 = vmulq_n_f64(v189, v172);
          *(_QWORD *)&v190.f64[1] = v193;
          v190 = vmulq_n_f64(v190, v172);
          *(_QWORD *)&v191.f64[1] = v194;
          v191 = vmulq_n_f64(v191, v172);
          *(_QWORD *)&v195.f64[1] = v198;
          v195 = vmulq_n_f64(v195, v172);
          *(_QWORD *)&v196.f64[1] = v199;
          v196 = vmulq_n_f64(v196, v172);
          *(_QWORD *)&v197.f64[1] = v597;
          v197 = vmulq_n_f64(v197, v172);
          v597 = vextq_s8((int8x16_t)v197, (int8x16_t)v197, 8uLL).u64[0];
          v194 = vextq_s8((int8x16_t)v191, (int8x16_t)v191, 8uLL).u64[0];
          v199 = vextq_s8((int8x16_t)v196, (int8x16_t)v196, 8uLL).u64[0];
          v193 = vextq_s8((int8x16_t)v190, (int8x16_t)v190, 8uLL).u64[0];
          v198 = vextq_s8((int8x16_t)v195, (int8x16_t)v195, 8uLL).u64[0];
          v192 = vextq_s8((int8x16_t)v189, (int8x16_t)v189, 8uLL).u64[0];
        }
        v561 = v561 + v176;
        *(_QWORD *)&v195.f64[1] = v198;
        *(_QWORD *)&v189.f64[1] = v192;
        *(_QWORD *)&v196.f64[1] = v199;
        *(_QWORD *)&v190.f64[1] = v193;
        *(_QWORD *)&v197.f64[1] = v597;
        *(_QWORD *)&v191.f64[1] = v194;
        v533 = vmlaq_laneq_f64(vmulq_n_f64(v189, v183.f64[0]), v195, v183, 1);
        v115 = vmlaq_laneq_f64(vmulq_n_f64(v191, v183.f64[0]), v197, v183, 1);
        v116 = vmlaq_laneq_f64(vmulq_n_f64(v190, v183.f64[0]), v196, v183, 1);
        v117 = vmlaq_laneq_f64(vmulq_n_f64(v191, v184.f64[0]), v197, v184, 1);
        v118 = vmlaq_laneq_f64(vmulq_n_f64(v190, v184.f64[0]), v196, v184, 1);
        v119 = vmlaq_laneq_f64(vmulq_n_f64(v189, v184.f64[0]), v195, v184, 1);
        v120 = vmlaq_laneq_f64(vmulq_n_f64(v191, v185.f64[0]), v197, v185, 1);
        v121 = vmlaq_laneq_f64(vmulq_n_f64(v190, v185.f64[0]), v196, v185, 1);
        v122 = vmlaq_laneq_f64(vmulq_n_f64(v189, v185.f64[0]), v195, v185, 1);
        v537 = vmlaq_laneq_f64(vmulq_n_f64(v191, v186.f64[0]), v197, v186, 1);
        v539 = vmlaq_laneq_f64(vmulq_n_f64(v190, v186.f64[0]), v196, v186, 1);
        v538 = vmlaq_laneq_f64(vmulq_n_f64(v189, v186.f64[0]), v195, v186, 1);
        v536 = vmlaq_laneq_f64(vmulq_n_f64(v191, v187.f64[0]), v197, v187, 1);
        v535 = vmlaq_laneq_f64(vmulq_n_f64(v190, v187.f64[0]), v196, v187, 1);
        v534 = vmlaq_laneq_f64(vmulq_n_f64(v189, v187.f64[0]), v195, v187, 1);
        v123 = vmlaq_laneq_f64(vmulq_n_f64(v191, v188.f64[0]), v197, v188, 1);
        v124 = vmlaq_laneq_f64(vmulq_n_f64(v190, v188.f64[0]), v196, v188, 1);
        v125 = vmlaq_laneq_f64(vmulq_n_f64(v189, v188.f64[0]), v195, v188, 1);
        v126 = vmlaq_n_f64(vmulq_n_f64(v191, v174), v197, v175);
        v127 = vmlaq_n_f64(vmulq_n_f64(v190, v174), v196, v175);
        v596 = vmlaq_n_f64(vmulq_n_f64(v189, v174), v195, v175);
        v128.f64[0] = v572;
        *(_QWORD *)&v128.f64[1] = v113;
        v129.f64[0] = v112;
        *(_QWORD *)&v129.f64[1] = v540;
        v130.f64[0] = v111;
        *(_QWORD *)&v130.f64[1] = v541;
        v131.f64[0] = v559;
        v132.f64[0] = v560;
        *(_QWORD *)&v131.f64[1] = v549;
        *(_QWORD *)&v132.f64[1] = v552;
        v133.f64[0] = v580;
        *(_QWORD *)&v133.f64[1] = v553;
        v134.f64[0] = v107;
        *(_QWORD *)&v134.f64[1] = v547;
        v135.f64[0] = v106;
        *(_QWORD *)&v135.f64[1] = v550;
        v136.f64[0] = v558;
        v136.f64[1] = v568;
        v137.f64[0] = v108;
        *(_QWORD *)&v137.f64[1] = v543;
        v138.f64[0] = v576;
        *(_QWORD *)&v138.f64[1] = v548;
        v139.f64[0] = v557;
        *(_QWORD *)&v139.f64[1] = v551;
        v140.f64[0] = v110;
        *(_QWORD *)&v140.f64[1] = v544;
        v141.f64[0] = v109;
        v141.f64[1] = v564;
        v142.f64[0] = v556;
        *(_QWORD *)&v142.f64[1] = v546;
        v143.f64[0] = v114;
        v143.f64[1] = v562;
        v144.f64[0] = v554;
        v145.f64[0] = v555;
        *(_QWORD *)&v144.f64[1] = v542;
        *(_QWORD *)&v145.f64[1] = v545;
        v146 = (int8x16_t)vaddq_f64(v133, v115);
        v147 = (int8x16_t)vaddq_f64(v132, v116);
        v552 = vextq_s8(v147, v147, 8uLL).u64[0];
        v553 = vextq_s8(v146, v146, 8uLL).u64[0];
        v148 = (int8x16_t)vaddq_f64(v131, v533);
        v549 = vextq_s8(v148, v148, 8uLL).u64[0];
        v149 = (int8x16_t)vaddq_f64(v136, v117);
        *(_QWORD *)&v568 = vextq_s8(v149, v149, 8uLL).u64[0];
        v150 = (int8x16_t)vaddq_f64(v135, v118);
        v151 = (int8x16_t)vaddq_f64(v134, v119);
        v547 = vextq_s8(v151, v151, 8uLL).u64[0];
        v152 = (int8x16_t)vaddq_f64(v139, v120);
        v550 = vextq_s8(v150, v150, 8uLL).u64[0];
        v551 = vextq_s8(v152, v152, 8uLL).u64[0];
        v153 = (int8x16_t)vaddq_f64(v138, v121);
        v548 = vextq_s8(v153, v153, 8uLL).u64[0];
        v154 = (int8x16_t)vaddq_f64(v137, v122);
        v580 = *(double *)v146.i64;
        *(int8x16_t *)object = v146;
        v559 = *(double *)v148.i64;
        v560 = *(double *)v147.i64;
        *(int8x16_t *)&object[2] = v147;
        v155 = (int8x16_t)vaddq_f64(v142, v537);
        *(int8x16_t *)&object[4] = v148;
        v557 = *(double *)v152.i64;
        v558 = *(double *)v149.i64;
        *(int8x16_t *)&object[6] = v149;
        v546 = vextq_s8(v155, v155, 8uLL).u64[0];
        v156 = (int8x16_t)vaddq_f64(v141, v539);
        *(_QWORD *)&v564 = vextq_s8(v156, v156, 8uLL).u64[0];
        v106 = *(double *)v150.i64;
        *(int8x16_t *)&object[8] = v150;
        v107 = *(double *)v151.i64;
        *(int8x16_t *)&object[10] = v151;
        v157 = (int8x16_t)vaddq_f64(v140, v538);
        v543 = vextq_s8(v154, v154, 8uLL).u64[0];
        v544 = vextq_s8(v157, v157, 8uLL).u64[0];
        v158 = (int8x16_t)vaddq_f64(v130, v536);
        *(int8x16_t *)&object[12] = v152;
        v576 = *(double *)v153.i64;
        *(int8x16_t *)&object[14] = v153;
        v159 = (int8x16_t)vaddq_f64(v129, v535);
        v540 = vextq_s8(v159, v159, 8uLL).u64[0];
        v541 = vextq_s8(v158, v158, 8uLL).u64[0];
        v108 = *(double *)v154.i64;
        *(int8x16_t *)&object[16] = v154;
        v556 = *(double *)v155.i64;
        *(int8x16_t *)&object[18] = v155;
        v160 = (int8x16_t)vaddq_f64(v128, v534);
        v113 = vextq_s8(v160, v160, 8uLL).u64[0];
        v161 = (int8x16_t)vaddq_f64(v145, v123);
        v109 = *(double *)v156.i64;
        *(int8x16_t *)&object[20] = v156;
        v110 = *(double *)v157.i64;
        v666 = v157;
        v545 = vextq_s8(v161, v161, 8uLL).u64[0];
        v162 = vaddq_f64(v144, v124);
        v542 = vextq_s8((int8x16_t)v162, (int8x16_t)v162, 8uLL).u64[0];
        v111 = *(double *)v158.i64;
        v667 = v158;
        v112 = *(double *)v159.i64;
        v668 = v159;
        v163 = (int8x16_t)vaddq_f64(v143, v125);
        *(_QWORD *)&v562 = vextq_s8(v163, v163, 8uLL).u64[0];
        v572 = *(double *)v160.i64;
        v669 = v160;
        v554 = v162.f64[0];
        v555 = *(double *)v161.i64;
        v670 = v161;
        v671 = v162;
        v114 = *(double *)v163.i64;
        v672 = v163;
        *(_QWORD *)&v162.f64[0] = v591.i64[0];
        v162.f64[1] = v587;
        v591 = (int8x16_t)vsubq_f64(v162, v126);
        *(_QWORD *)&v587 = vextq_s8(v591, v591, 8uLL).u64[0];
        *(_QWORD *)&v162.f64[0] = v593.i64[0];
        v162.f64[1] = v586;
        v593 = (int8x16_t)vsubq_f64(v162, v127);
        *(_QWORD *)&v586 = vextq_s8(v593, v593, 8uLL).u64[0];
        *(_QWORD *)&v162.f64[0] = v589.i64[0];
        v162.f64[1] = v585;
        v103 = (float64x2_t *)((char *)v103 + 40);
        v589 = (int8x16_t)vsubq_f64(v162, v596);
        *(_QWORD *)&v585 = vextq_s8(v589, v589, 8uLL).u64[0];
      }
      while (v103 != v104);
      v101 = 0.5;
      if (v100)
      {
LABEL_54:
        v200 = v634.f64[0];
        goto LABEL_57;
      }
    }
    v634 = (float64x2_t)xmmword_210315720;
    v523 = v561 * v101;
    v201 = v561 * v101;
    v200 = 0.001;
    v520 = v201;
    v521 = v201;
LABEL_57:
    *(double *)object = v580 + v200;
    *(double *)&object[7] = v568 + v200;
    *(double *)&object[14] = v576 + v200;
    *(double *)&object[21] = v564 + v200;
    *(double *)v669.i64 = v572 + v200;
    *(double *)&v672.i64[1] = v562 + v200;
    *(_QWORD *)&v202.f64[0] = v591.i64[0];
    v202.f64[1] = v587;
    *(_QWORD *)&v203 = v593.i64[0];
    *((float64_t *)&v203 + 1) = v586;
    v661 = v202;
    *(_OWORD *)v662 = v203;
    *(_QWORD *)&v202.f64[0] = v589.i64[0];
    v202.f64[1] = v585;
    *(float64x2_t *)&v662[16] = v202;
    v204 = operator new(0x20uLL, (std::align_val_t)0x20uLL);
    LODWORD(v664[0]) = 0;
    v603[0].__locale_ = 0;
    sub_20E8BEDE0();
    if (!LODWORD(v664[0]))
    {
      v518 = operator new((8 * (int)*(double *)&v603[0].__locale_ + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
      sub_20E8BEDE0();
      MEMORY[0x212BC6368](v518, 0x1000C8000313F17);
    }
    MEMORY[0x212BC6368](v204, 0x1000C8052888210);
    _Q23 = v661;
    v208 = (float64x2_t)vextq_s8((int8x16_t)_Q23, (int8x16_t)_Q23, 8uLL);
    v209.f64[0] = *(float64_t *)v662;
    v210.f64[0] = *(float64_t *)&v662[24];
    v211 = *(float64x2_t *)&v662[8];
    v212 = (float64x2_t)vextq_s8((int8x16_t)v211, (int8x16_t)v211, 8uLL);
    _D9 = v661.f64[1];
    __asm { FMLA            D0, D9, V23.D[1] }
    v215 = _D0 + v209.f64[0] * v209.f64[0];
    if (v215 >= 0.0000002635)
    {
      v219 = sqrt(v215);
      v598 = *(double *)v662;
      v581 = v661;
      v577 = v208;
      v569 = *(float64x2_t *)&v662[8];
      v573 = v210;
      v565 = v212;
      v220 = __sincos_stret(v219);
      v218 = v220.__cosval;
      v212 = v565;
      v211 = v569;
      v210 = v573;
      v208 = v577;
      _Q23 = v581;
      v209.f64[0] = v598;
      v216 = v220.__sinval / v219;
      v206.f64[0] = 1.0 / v215 * (1.0 - v220.__cosval);
      v217 = 1.0;
      v205.f64[0] = 1.0 / v215 * (1.0 - v216);
    }
    else
    {
      v206.f64[0] = v101 - v215 * (v215 / -720.0 + 0.0416666667);
      v205.f64[0] = 0.166666667 - v215 * (v215 / -5040.0 + 0.00833333333);
      v216 = 1.0 - v215 * v205.f64[0];
      v217 = 1.0;
      v218 = 1.0 - v215 * v206.f64[0];
    }
    v221.f64[0] = _Q23.f64[0] * (_Q23.f64[0] * v206.f64[0]) + v218;
    v222 = _D9 * (_D9 * v206.f64[0]) + v218;
    v223 = v209.f64[0] * (v209.f64[0] * v206.f64[0]) + v218;
    v224 = _D9 * (_Q23.f64[0] * v206.f64[0]);
    v225 = v209.f64[0] * (_Q23.f64[0] * v206.f64[0]);
    v226 = v209.f64[0] * (_D9 * v206.f64[0]);
    v227 = _Q23.f64[0] * v216;
    v228 = _D9 * v216;
    v229 = v209.f64[0] * v216;
    v230.f64[0] = v224 - v209.f64[0] * v216;
    v231.f64[0] = v225 + v228;
    v221.f64[1] = v224 + v229;
    v232.f64[1] = 0.0;
    v232.f64[0] = v225 - v228;
    v230.f64[1] = v222;
    *(_QWORD *)&v233.f64[1] = unk_210315938;
    v233.f64[0] = v226 + v227;
    v231.f64[1] = v226 - v227;
    *(_QWORD *)&v234.f64[1] = unk_210315958;
    v234.f64[0] = v223;
    v235.f64[0] = v208.f64[0];
    v235.f64[1] = v209.f64[0];
    v236.f64[0] = v210.f64[0];
    v236.f64[1] = v211.f64[0];
    v237.f64[0] = v211.f64[0];
    v237.f64[1] = v212.f64[0];
    v209.f64[1] = _Q23.f64[0];
    v238.f64[0] = v212.f64[0];
    v238.f64[1] = v210.f64[0];
    v239 = vsubq_f64(vmulq_f64(v235, v236), vmulq_f64(v209, v238));
    v240 = vsubq_f64(vmulq_f64(_Q23, v212), vmulq_f64(v208, v211));
    v241 = vaddq_f64(v237, vmulq_n_f64(v239, v206.f64[0]));
    v242 = vaddq_f64(v210, vmulq_f64(v240, v206));
    v243 = (float64x2_t)vextq_s8((int8x16_t)v239, (int8x16_t)v240, 8uLL);
    v240.f64[1] = v239.f64[0];
    v244 = vaddq_f64(v241, vmulq_n_f64(vsubq_f64(vmulq_f64(v235, v240), vmulq_f64(v209, v243)), v205.f64[0]));
    *(_QWORD *)&v242.f64[0] = *(_OWORD *)&vaddq_f64(v242, vmulq_f64(vsubq_f64(vmulq_laneq_f64(_Q23, v239, 1), vmulq_f64(v208, v239)), v205));
    *(_QWORD *)&v245.f64[1] = unk_210315978;
    v245.f64[0] = v242.f64[0];
    v246 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v221, *(double *)&v608[8]), v230, *(float64x2_t *)&v608[8], 1), v231, *(double *)&v608[24]), v244, *(float64x2_t *)&v608[24], 1);
    v247 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v232, *(double *)&v608[8]), v233, *(float64x2_t *)&v608[8], 1), v234, *(double *)&v608[24]), v245, *(float64x2_t *)&v608[24], 1);
    v248 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v221, *(double *)&v608[40]), v230, *(float64x2_t *)&v608[40], 1), v231, v609.f64[0]), v244, v609, 1);
    v249 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v232, *(double *)&v608[40]), v233, *(float64x2_t *)&v608[40], 1), v234, v609.f64[0]), v245, v609, 1);
    v250 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v221, *(double *)&v610), v230, (float64x2_t)v610, 1), v231, v611.f64[0]), v244, v611, 1);
    v251 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v232, *(double *)&v610), v233, (float64x2_t)v610, 1), v234, v611.f64[0]), v245, v611, 1);
    v252 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v221, v612.f64[0]), v230, v612, 1), v231, v613.f64[0]), v244, v613, 1);
    v253 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v232, v612.f64[0]), v233, v612, 1), v234, v613.f64[0]), v245, v613, 1);
    *(float64x2_t *)&v608[8] = v246;
    *(float64x2_t *)&v608[24] = v247;
    *(float64x2_t *)&v608[40] = v248;
    v609 = v249;
    v610 = (__int128)v250;
    v611 = v251;
    v612 = v252;
    v613 = v253;
    v254 = v621;
    v621 = 0;
    if (v254)
      MEMORY[0x212BC6398](v254, 0x1000C40FF89C88ELL);
    v255 = v622;
    v622 = 0;
    if (v255)
      MEMORY[0x212BC6398](v255, 0x1000C40504FFAC1);
    v256 = v623;
    v623 = 0;
    if (v256)
      MEMORY[0x212BC6398](v256, 0x1000C40FF89C88ELL);
    memset(v604, 0, sizeof(v604));
    *(_OWORD *)&v603[0].__locale_ = 0u;
    v664[0] = (float64x2_t *)&v608[8];
    v664[1] = 0;
    v663[0] = (double *)v603;
    v663[1] = 0;
    sub_20E95B988(v664, v663);
    v259.f64[0] = *(float64_t *)v604;
    _Q18 = *(float64x2_t *)&v603[0].__locale_;
    _Q0 = vmulq_f64(_Q18, _Q18);
    _D1 = v603[1].__locale_;
    __asm { FMLA            D0, D1, V18.D[1] }
    v263 = _Q0.f64[0] + v259.f64[0] * v259.f64[0];
    if (v263 >= 0.0000002635)
    {
      v265 = sqrt(v263);
      v599 = *(double *)v604;
      v582 = *(float64x2_t *)&v603[0].__locale_;
      v266 = __sincos_stret(v265);
      _Q18 = v582;
      v259.f64[0] = v599;
      v257.f64[0] = v266.__sinval / v265;
      _Q0.f64[0] = 1.0 / v263 * (1.0 - v266.__cosval);
      v264 = 1.0 / v263 * (1.0 - v266.__sinval / v265);
      if (v263 >= 2.775e-15)
      {
LABEL_70:
        if (v263 <= 9.0)
          _Q0.f64[0] = (_Q0.f64[0] * v101 - v264) / v257.f64[0];
        else
          _Q0.f64[0] = (_Q0.f64[0] + v257.f64[0] * -0.5) / (v263 * _Q0.f64[0]);
        goto LABEL_75;
      }
    }
    else
    {
      _Q0.f64[0] = v101 - v263 * (v263 / -720.0 + 0.0416666667);
      v264 = 0.166666667 - v263 * (v263 / -5040.0 + 0.00833333333);
      v257.f64[0] = v217 - v263 * v264;
      if (v263 >= 2.775e-15)
        goto LABEL_70;
    }
    _Q0.f64[0] = v263 * 0.0000330687831 + v263 * 0.00138888889 + 0.0833333333;
LABEL_75:
    v267 = (float64x2_t)vextq_s8((int8x16_t)_Q18, (int8x16_t)_Q18, 8uLL);
    v257.f64[0] = v613.f64[0];
    v268.f64[0] = v267.f64[0];
    v268.f64[1] = v259.f64[0];
    v269 = (float64x2_t)vextq_s8((int8x16_t)v612, (int8x16_t)v257, 8uLL);
    v270 = vsubq_f64(vmulq_laneq_f64(_Q18, v612, 1), vmulq_f64(v267, v612));
    v271 = vaddq_f64(v257, vmulq_f64(v270, v522));
    v257.f64[1] = v612.f64[0];
    v259.f64[1] = _Q18.f64[0];
    v272 = vsubq_f64(vmulq_f64(v268, v257), vmulq_f64(v259, v269));
    v273 = (float64x2_t)vextq_s8((int8x16_t)v272, (int8x16_t)v270, 8uLL);
    v270.f64[1] = v272.f64[0];
    v274 = vaddq_f64(v612, vmulq_f64(v272, v522));
    v275 = vmulq_laneq_f64(_Q18, v272, 1);
    v276 = vmulq_f64(v267, v272);
    v277 = vsubq_f64(vmulq_f64(v268, v270), vmulq_f64(v259, v273));
    *((_QWORD *)&v604[1] + 1) = *(_OWORD *)&vaddq_f64(v271, vmulq_f64(_Q0, vsubq_f64(v275, v276)));
    *(float64x2_t *)((char *)v604 + 8) = vaddq_f64(v274, vmulq_n_f64(v277, _Q0.f64[0]));
    _Q24 = *(float64x2_t *)&v603[0].__locale_;
    v279 = (float64x2_t)v604[0];
    v600 = (float64x2_t)vextq_s8((int8x16_t)_Q24, (int8x16_t)_Q24, 8uLL);
    v280 = (float64x2_t)v604[1];
    v281 = (float64x2_t)vextq_s8((int8x16_t)v280, (int8x16_t)v280, 8uLL);
    v583 = v281;
    v282 = (float64x2_t)vextq_s8((int8x16_t)v279, (int8x16_t)v279, 8uLL);
    _Q5 = vmulq_f64(_Q24, _Q24);
    _D9 = v603[1].__locale_;
    __asm { FMLA            D5, D9, V24.D[1] }
    _Q5.f64[0] = vmlad_n_f64(_Q5.f64[0], v279.f64[0], v279.f64[0]);
    v578 = *(double *)v604;
    v570 = v282;
    locale = v603[0].__locale_;
    v566 = (float64x2_t)v604[1];
    if (_Q5.f64[0] >= 0.0000002635)
    {
      v287 = sqrt(_Q5.f64[0]);
      v563 = _Q5;
      v288 = __sincos_stret(v287);
      v286 = v288.__cosval;
      v280 = v566;
      v282 = v570;
      *(_QWORD *)&_Q24.f64[0] = locale;
      v279.f64[0] = v578;
      v277.f64[1] = v563.f64[1];
      v285 = v288.__sinval / v287;
      v277.f64[0] = 1.0 / v563.f64[0] * (1.0 - v288.__cosval);
      v281.f64[0] = 1.0 / v563.f64[0] * (1.0 - v288.__sinval / v287);
    }
    else
    {
      v277.f64[0] = v101 - _Q5.f64[0] * (_Q5.f64[0] / -720.0 + 0.0416666667);
      v281.f64[0] = 0.166666667 - _Q5.f64[0] * (_Q5.f64[0] / -5040.0 + 0.00833333333);
      v285 = 1.0 - _Q5.f64[0] * v281.f64[0];
      v286 = 1.0 - _Q5.f64[0] * v277.f64[0];
    }
    v289 = _Q24.f64[0] * (_Q24.f64[0] * v277.f64[0]) + v286;
    v290 = *(double *)&_D9 * (*(double *)&_D9 * v277.f64[0]) + v286;
    *(double *)&v291 = v279.f64[0] * (v279.f64[0] * v277.f64[0]) + v286;
    v292 = *(double *)&_D9 * (_Q24.f64[0] * v277.f64[0]);
    v293 = v279.f64[0] * (_Q24.f64[0] * v277.f64[0]);
    v294 = v279.f64[0] * (*(double *)&_D9 * v277.f64[0]);
    v295 = _Q24.f64[0] * v285;
    v296 = *(double *)&_D9 * v285;
    v297 = v279.f64[0] * v285;
    v298 = v292 - v297;
    v299 = v293 + v296;
    v300 = v292 + v297;
    v301 = v294 - v295;
    v302 = v293 - v296;
    *(double *)&v303 = v294 + v295;
    v304.f64[0] = _Q24.f64[0];
    v304.f64[1] = v600.f64[0];
    v305.f64[0] = v600.f64[0];
    v305.f64[1] = v279.f64[0];
    v306.f64[0] = v583.f64[0];
    v306.f64[1] = v282.f64[0];
    v307.f64[0] = v282.f64[0];
    v307.f64[1] = v280.f64[0];
    v279.f64[1] = _Q24.f64[0];
    v308.f64[0] = v280.f64[0];
    v308.f64[1] = v583.f64[0];
    v309 = vsubq_f64(vmulq_f64(v305, v306), vmulq_f64(v279, v308));
    _Q24 = vsubq_f64(vmulq_f64(v304, v280), vmulq_f64(v600, v282));
    v310 = vaddq_f64(v307, vmulq_n_f64(v309, v277.f64[0]));
    v311 = vaddq_f64(v583, vmulq_f64(_Q24, v277));
    v312 = (float64x2_t)vextq_s8((int8x16_t)v309, (int8x16_t)_Q24, 8uLL);
    _Q24.f64[1] = v309.f64[0];
    *(float64_t *)&v608[8] = v289;
    *(double *)&v608[16] = v300;
    *(float64_t *)&v608[24] = v302;
    *(_QWORD *)&v608[32] = 0;
    *(double *)&v608[40] = v298;
    *(double *)&v608[48] = v290;
    v609 = (float64x2_t)v303;
    *(float64_t *)&v610 = v299;
    *((float64_t *)&v610 + 1) = v301;
    v611 = (float64x2_t)v291;
    *(_QWORD *)&v613.f64[0] = *(_OWORD *)&vaddq_f64(v311, vmulq_f64(vsubq_f64(vmulq_laneq_f64(v304, v309, 1), vmulq_f64(v600, v309)), v281));
    v612 = vaddq_f64(v310, vmulq_n_f64(vsubq_f64(vmulq_f64(v305, _Q24), vmulq_f64(v279, v312)), v281.f64[0]));
    v314 = v621;
    v613.f64[1] = 1.0;
    v621 = 0;
    if (v314)
      MEMORY[0x212BC6398](v314, 0x1000C40FF89C88ELL);
    v315 = v622;
    v622 = 0;
    if (v315)
      MEMORY[0x212BC6398](v315, 0x1000C40504FFAC1);
    v316 = v623;
    v623 = 0;
    if (v316)
      MEMORY[0x212BC6398](v316, 0x1000C40FF89C88ELL);
    v317 = *(int8x16_t *)&v662[16];
    v318 = *(int8x16_t *)v662;
    _Q2 = v661;
    _D4 = v661.f64[1];
    __asm { FMLA            D3, D4, V2.D[1] }
    _D4 = *(_QWORD *)&v662[8];
    __asm { FMLA            D3, D4, V1.D[1] }
    _D4 = *(_QWORD *)&v662[24];
    __asm { FMLA            D3, D4, V0.D[1] }
    v327 = v570;
    v326 = locale;
    *(_QWORD *)&v328.f64[0] = locale;
    v329 = v600;
    v328.f64[1] = v600.f64[0];
    v330 = v578;
    v331 = v566;
    _Q16 = v583;
    if (sqrt(_D3) < v630[4]
                   * (sqrt(vmulq_f64(v328, v328).f64[0]+ v329.f64[0] * v329.f64[0]+ v330 * v330+ v327.f64[0] * v327.f64[0]+ v331.f64[0] * v331.f64[0]+ _Q16.f64[0] * _Q16.f64[0])+ v630[4]))
    {
      v102 = 0x100000000;
      if (v100 >= v626)
        break;
      goto LABEL_43;
    }
    *(_QWORD *)&v333.f64[0] = v593.i64[0];
    v333.f64[1] = v586;
    *(_QWORD *)&v334.f64[0] = v591.i64[0];
    v334.f64[1] = v587;
    *(_QWORD *)&v335.f64[0] = v589.i64[0];
    v335.f64[1] = v585;
    if (vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(v334), vabsq_f64(v335)), vabsq_f64(v333))) >= v630[3])
    {
      v336 = (float64x2_t *)*v624;
      v337 = v624[1];
      if (*v624 == v337)
      {
        v340 = 0.0;
      }
      else
      {
        _D6 = v609.f64[0];
        v339 = vextq_s8((int8x16_t)v612, (int8x16_t)v612, 8uLL).u64[0];
        v258.f64[0] = v613.f64[0];
        v340 = 0.0;
        do
        {
          _Q24.f64[0] = v336[2].f64[0];
          _Q26 = v336[1];
          v342 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v608[8], _Q26.f64[0]), *(float64x2_t *)&v608[40], _Q26, 1), (float64x2_t)v610, _Q24.f64[0]);
          __asm { FMLA            D28, D6, V26.D[1] }
          _Q24.f64[0] = _D28 + v611.f64[0] * _Q24.f64[0];
          _Q26.f64[0] = v612.f64[0];
          *(_QWORD *)&_Q26.f64[1] = v339;
          v344 = vaddq_f64(_Q26, v342);
          _Q24.f64[0] = vaddq_f64(v258, _Q24).f64[0];
          if (_Q24.f64[0] == 0.0)
            v345 = 1.0;
          else
            v345 = 1.0 / _Q24.f64[0];
          _Q25 = vmlaq_n_f64(vnegq_f64(*v336), v344, v345);
          _Q24 = vmulq_f64(_Q25, _Q25);
          _D26 = _Q25.f64[1];
          __asm { FMLA            D24, D26, V25.D[1] }
          _Q24.f64[0] = *((double *)&v638 + 1) * _Q24.f64[0];
          v348 = v641 * sqrt(_Q24.f64[0]) - v640;
          if (_Q24.f64[0] > v640)
            _Q24.f64[0] = v348;
          v340 = v340 + _Q24.f64[0];
          v336 = (float64x2_t *)((char *)v336 + 40);
        }
        while (v336 != v337);
      }
      v349 = v340 * v101;
      v350 = v523 - v340 * v101;
      if (fabs(v350 / v523) < *((double *)&v628 + 1))
      {
        v329 = v600;
        v330 = v578;
        v327 = v570;
        v326 = locale;
        _Q16 = v583;
        v331 = v566;
        goto LABEL_119;
      }
      if (*((_BYTE *)v630 + 16))
      {
        if (v523 <= v349)
          v351 = "I";
        else
          v351 = "D";
        v352 = sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)v351, 1);
        sub_20E86A980(v352, (uint64_t)"[last error]->[new error][lambda][delta]  : [", 45);
        v353 = (_QWORD *)std::ostream::operator<<();
        sub_20E86A980(v353, (uint64_t)" -> ", 4);
        v354 = (_QWORD *)std::ostream::operator<<();
        sub_20E86A980(v354, (uint64_t)"][", 2);
        v355 = (_QWORD *)std::ostream::operator<<();
        sub_20E86A980(v355, (uint64_t)"][", 2);
        _V2.D[1] = v661.f64[1];
        _D4 = v661.f64[1];
        __asm { FMLA            D3, D4, V2.D[1] }
        _D2 = *(_QWORD *)&v662[8];
        __asm { FMLA            D3, D2, V1.D[1] }
        _D1 = *(_QWORD *)&v662[24];
        __asm { FMLA            D3, D1, V0.D[1] }
        v363 = (_QWORD *)std::ostream::operator<<();
        v364 = sub_20E86A980(v363, (uint64_t)"]", 1);
        std::ios_base::getloc((const std::ios_base *)((char *)v364 + *(_QWORD *)(*v364 - 24)));
        v365 = std::locale::use_facet(v603, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v365->__vftable[2].~facet_0)(v365, 10);
        std::locale::~locale(v603);
        std::ostream::put();
        std::ostream::flush();
        v317 = *(int8x16_t *)&v662[16];
        v318 = *(int8x16_t *)v662;
        _Q2 = v661;
      }
      _D3 = vextq_s8(v317, v317, 8uLL).u64[0];
      _D4 = vextq_s8(v318, v318, 8uLL).u64[0];
      _Q6.f64[0] = _Q2.f64[0];
      *(_QWORD *)&v369.f64[0] = v318.i64[0];
      *(_QWORD *)&v370.f64[0] = v317.i64[0];
      v330 = v578;
      v327 = v570;
      v326 = locale;
      v331 = v566;
      *(_QWORD *)&_Q6.f64[1] = vextq_s8((int8x16_t)_Q2, (int8x16_t)_Q2, 8uLL).u64[0];
      *(_QWORD *)&v369.f64[1] = _D4;
      *(_QWORD *)&v370.f64[1] = _D3;
      *(_QWORD *)&v371.f64[0] = v589.i64[0];
      v371.f64[1] = v585;
      _Q18 = vmlaq_n_f64(v371, v370, v634.f64[0]);
      *(_QWORD *)&v370.f64[0] = v593.i64[0];
      v370.f64[1] = v586;
      _Q17 = vmlaq_n_f64(v370, v369, v634.f64[0]);
      *(_QWORD *)&v369.f64[0] = v591.i64[0];
      v369.f64[1] = v587;
      _Q16 = vmlaq_n_f64(v369, _Q6, v634.f64[0]);
      _Q2 = vmulq_f64(_Q2, _Q16);
      __asm
      {
        FMLA            D2, D5, V16.D[1]
        FMLA            D2, D4, V17.D[1]
        FMLA            D2, D3, V18.D[1]
      }
      if (v350 / _Q2.f64[0] >= 0.0)
      {
        v102 = 0;
        v381 = 1.0
             - (v350 / _Q2.f64[0] + v350 / _Q2.f64[0] + -1.0)
             * ((v350 / _Q2.f64[0] + v350 / _Q2.f64[0] + -1.0)
              * (v350 / _Q2.f64[0] + v350 / _Q2.f64[0] + -1.0));
        if (v381 > 0.666666667)
          v381 = 0.666666667;
        v634.f64[0] = v634.f64[0] * fmax(v381, 0.333333333);
        v634.f64[1] = 2.0;
        v382 = v349;
        v521 = v382;
        v523 = v349;
        v329 = v600;
        _Q16 = v583;
      }
      else
      {
        __asm { FMOV            V1.2D, #2.0 }
        _Q1.f64[0] = v634.f64[0];
        v634 = vmulq_n_f64(_Q1, v634.f64[1]);
        *(_QWORD *)&v376.f64[0] = v528.i64[0];
        v376.f64[1] = v527.f64[0];
        v377 = vmulq_f64(v376, v376);
        v378 = v377.f64[0] + v527.f64[0] * v527.f64[0] + v529.f64[0] * v529.f64[0];
        if (v378 >= 0.0000002635)
        {
          v383 = sqrt(v378);
          v384 = __sincos_stret(v383);
          v380 = v384.__cosval;
          v379 = v384.__sinval / v383;
          _Q2.f64[0] = 1.0 / v378 * (1.0 - v384.__cosval);
          v377.f64[0] = 1.0 / v378 * (1.0 - v384.__sinval / v383);
        }
        else
        {
          _Q2.f64[0] = v101 - v378 * (v378 / -720.0 + 0.0416666667);
          v377.f64[0] = 0.166666667 - v378 * (v378 / -5040.0 + 0.00833333333);
          v379 = 1.0 - v378 * v377.f64[0];
          v380 = 1.0 - v378 * _Q2.f64[0];
        }
        v385.f64[0] = v529.f64[0];
        v386 = *(double *)v528.i64 * (*(double *)v528.i64 * _Q2.f64[0]) + v380;
        v387 = v527.f64[0] * (v527.f64[0] * _Q2.f64[0]) + v380;
        *(double *)&v388 = v529.f64[0] * (v529.f64[0] * _Q2.f64[0]) + v380;
        v389 = v527.f64[0] * (*(double *)v528.i64 * _Q2.f64[0]);
        v390 = v529.f64[0] * (*(double *)v528.i64 * _Q2.f64[0]);
        v391 = v529.f64[0] * (v527.f64[0] * _Q2.f64[0]);
        v392 = *(double *)v528.i64 * v379;
        v393 = v527.f64[0] * v379;
        v394 = v529.f64[0] * v379;
        v395 = v389 - v394;
        v396 = v390 + v393;
        v397 = v389 + v394;
        v398 = v391 - v392;
        v399 = v390 - v393;
        *(double *)&v400 = v391 + v392;
        *(_QWORD *)&v401.f64[0] = v528.i64[0];
        v401.f64[1] = v527.f64[0];
        v402.f64[0] = v527.f64[0];
        v402.f64[1] = v529.f64[0];
        v403.f64[0] = v525.f64[0];
        v403.f64[1] = v524.f64[0];
        v404.f64[0] = v524.f64[0];
        v404.f64[1] = v526.f64[0];
        *(_QWORD *)&v385.f64[1] = v528.i64[0];
        v405.f64[0] = v526.f64[0];
        v405.f64[1] = v525.f64[0];
        v406 = vsubq_f64(vmulq_f64(v402, v403), vmulq_f64(v385, v405));
        v407 = vsubq_f64(vmulq_f64(v401, v526), vmulq_f64(v527, v524));
        v327 = vaddq_f64(v404, vmulq_n_f64(v406, _Q2.f64[0]));
        v408 = vaddq_f64(v525, vmulq_f64(v407, _Q2));
        v409 = (float64x2_t)vextq_s8((int8x16_t)v406, (int8x16_t)v407, 8uLL);
        v407.f64[1] = v406.f64[0];
        v331 = vmulq_f64(v385, v409);
        *(double *)&v608[8] = v386;
        *(float64_t *)&v608[16] = v397;
        *(float64_t *)&v608[24] = v399;
        *(_QWORD *)&v608[32] = 0;
        *(float64_t *)&v608[40] = v395;
        *(float64_t *)&v608[48] = v387;
        v609 = (float64x2_t)v400;
        *(float64_t *)&v610 = v396;
        *((float64_t *)&v610 + 1) = v398;
        v611 = (float64x2_t)v388;
        *(_QWORD *)&v613.f64[0] = *(_OWORD *)&vaddq_f64(v408, vmulq_f64(vsubq_f64(vmulq_laneq_f64(v401, v406, 1), vmulq_f64(v527, v406)), v377));
        v612 = vaddq_f64(v327, vmulq_n_f64(vsubq_f64(vmulq_f64(v402, v407), v331), v377.f64[0]));
        v410 = v621;
        v613.f64[1] = 1.0;
        v621 = 0;
        if (v410)
          MEMORY[0x212BC6398](v410, 0x1000C40FF89C88ELL);
        v411 = v622;
        v622 = 0;
        if (v411)
          MEMORY[0x212BC6398](v411, 0x1000C40504FFAC1);
        v412 = v623;
        v623 = 0;
        if (v412)
          MEMORY[0x212BC6398](v412, 0x1000C40FF89C88ELL);
        v102 = 0;
        v326 = (std::locale::__imp *)v528.i64[0];
        v329.f64[0] = v527.f64[0];
        v330 = v529.f64[0];
        v327.f64[0] = v524.f64[0];
        v331.f64[0] = v526.f64[0];
        v317.i64[1] = *(_QWORD *)&v525.f64[1];
        _Q16.f64[0] = v525.f64[0];
      }
      goto LABEL_43;
    }
    v102 = 0x200000000;
    if (v100 >= v626)
      break;
LABEL_43:
    ++v100;
    v528.i64[0] = (uint64_t)v326;
    v317.i64[0] = *(_QWORD *)&v329.f64[0];
    v527 = (float64x2_t)v317;
    v529.f64[0] = v330;
    v317.i64[0] = *(_QWORD *)&v327.f64[0];
    v524 = (float64x2_t)v317;
    v317.i64[0] = *(_QWORD *)&v331.f64[0];
    v526 = (float64x2_t)v317;
    v317.i64[0] = *(_QWORD *)&_Q16.f64[0];
    v525 = (float64x2_t)v317;
  }
  while (v100 < DWORD1(v626));
  if (!HIDWORD(v102))
    goto LABEL_123;
LABEL_119:
  if (v521 > v520)
  {
LABEL_123:
    sub_20EB67274(v663);
    if (**((int **)v663[0] + 7) > 3)
      goto LABEL_215;
    v422 = *((unsigned __int8 *)v663[0] + 72);
    v423 = sub_20E8C31DC((uint64_t)v663[0], "OSLogSurrogateAppender", 1, 0);
    v424 = v423;
    if (!v422 && !v423)
      goto LABEL_215;
    v602 = v422;
    v603[0].__locale_ = (std::locale::__imp *)v663;
    v603[1].__locale_ = (std::locale::__imp *)std::chrono::steady_clock::now().__d_.__rep_;
    *(std::chrono::system_clock::time_point *)&v604[0] = std::chrono::system_clock::now();
    DWORD2(v604[0]) = 3;
    *(_QWORD *)&v604[1] = "unknown file";
    DWORD2(v604[1]) = 226;
    v607 = 0;
    v605 = "unknown function";
    v606 = 0;
    v425 = *(_QWORD *)v603[0].__locale_;
    v426 = (const char *)(*(_QWORD *)v603[0].__locale_ + 16);
    v594 = v426;
    if (*(char *)(*(_QWORD *)v603[0].__locale_ + 39) < 0)
    {
      v426 = *(const char **)(v425 + 16);
      v427 = *(_QWORD *)(v425 + 24);
      v464 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v464 & 1) != 0)
        goto LABEL_134;
    }
    else
    {
      v427 = *(unsigned __int8 *)(*(_QWORD *)v603[0].__locale_ + 39);
      v428 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v428 & 1) != 0)
        goto LABEL_134;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
      if (LOBYTE(object[3]) && SHIBYTE(object[2]) < 0)
        operator delete(object[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_134:
    if (byte_254A4A4F8[23] >= 0)
      v465 = byte_254A4A4F8;
    else
      v465 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v466 = byte_254A4A4F8[23];
    else
      v466 = *(_QWORD *)&byte_254A4A4F8[8];
    object[0] = os_log_create(v465, v426);
    v467 = &object[1];
    if (v466 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v466 >= 0x17)
    {
      v468 = (v466 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v466 | 7) != 0x17)
        v468 = v466 | 7;
      v469 = v468 + 1;
      v467 = (void **)operator new(v468 + 1);
      object[3] = (void *)(v469 | 0x8000000000000000);
      object[1] = v467;
      object[2] = (void *)v466;
    }
    else
    {
      HIBYTE(object[3]) = v466;
      if (!v466)
      {
LABEL_148:
        *((_BYTE *)v467 + v466) = 0;
        LOBYTE(object[4]) = 1;
        v470 = &object[5];
        if (v427 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v427 >= 0x17)
        {
          v472 = (v427 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v427 | 7) != 0x17)
            v472 = v427 | 7;
          v473 = v472 + 1;
          v470 = (void **)operator new(v472 + 1);
          object[7] = (void *)(v473 | 0x8000000000000000);
          object[5] = v470;
          object[6] = (void *)v427;
        }
        else
        {
          HIBYTE(object[7]) = v427;
          if (!v427)
          {
            LOBYTE(object[5]) = 0;
            LOBYTE(object[8]) = 1;
            v471 = object[0];
            if ((SHIBYTE(object[7]) & 0x80000000) == 0)
              goto LABEL_152;
            goto LABEL_158;
          }
        }
        memmove(v470, v426, v427);
        *((_BYTE *)v470 + v427) = 0;
        LOBYTE(object[8]) = 1;
        v471 = object[0];
        if ((SHIBYTE(object[7]) & 0x80000000) == 0)
        {
LABEL_152:
          if (!LOBYTE(object[4]))
            goto LABEL_161;
          goto LABEL_159;
        }
LABEL_158:
        operator delete(object[5]);
        if (!LOBYTE(object[4]))
        {
LABEL_161:
          if (object[0])
            os_release(object[0]);
          if (v424 && *(_QWORD *)(v424 + 24))
          {
            v474 = _os_log_pack_size();
            v475 = (std::__shared_weak_count_vtbl *)operator new(v474, (std::align_val_t)8uLL);
            v476 = (std::__shared_weak_count *)operator new();
            v477 = v476;
            v476->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v476->__shared_owners_;
            v476->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v476->__shared_weak_owners_ = 0;
            v476[1].__vftable = v475;
            object[0] = v475;
            object[1] = v475;
            object[2] = v476;
            do
              v479 = __ldxr(p_shared_owners);
            while (__stxr(v479 + 1, p_shared_owners));
            memset(&object[3], 0, 24);
            do
              v480 = __ldaxr(p_shared_owners);
            while (__stlxr(v480 - 1, p_shared_owners));
            if (!v480)
            {
              ((void (*)(std::__shared_weak_count *))v476->__on_zero_shared)(v476);
              std::__shared_weak_count::__release_weak(v477);
            }
            v481 = object[0];
            v482 = _os_log_pack_fill();
            *(_DWORD *)v482 = 134218240;
            *(double *)(v482 + 4) = v520;
            *(_WORD *)(v482 + 12) = 2048;
            *(double *)(v482 + 14) = v521;
            v483 = operator new();
            v484 = *(unsigned __int8 *)(v425 + 39);
            v485 = v594;
            if ((v484 & 0x80u) != 0)
            {
              v485 = *(const char **)(v425 + 16);
              v484 = *(_QWORD *)(v425 + 24);
            }
            *(_QWORD *)v483 = v481;
            *(_OWORD *)(v483 + 8) = *(_OWORD *)&object[1];
            object[1] = 0;
            object[2] = 0;
            *(_OWORD *)(v483 + 24) = *(_OWORD *)&object[3];
            object[3] = 0;
            object[4] = 0;
            *(_QWORD *)(v483 + 40) = v485;
            *(_QWORD *)(v483 + 48) = v484;
            *(_BYTE *)(v483 + 56) = 1;
            v664[0] = 0;
            *(_QWORD *)&v661.f64[0] = v483;
            (*(void (**)(_QWORD, float64x2_t *))(**(_QWORD **)(v424 + 24) + 40))(*(_QWORD *)(v424 + 24), &v661);
            v486 = v661.f64[0];
            v661.f64[0] = 0.0;
            if (v486 != 0.0)
            {
              v487 = *(std::__shared_weak_count **)(*(_QWORD *)&v486 + 32);
              if (v487)
              {
                v488 = (unint64_t *)&v487->__shared_owners_;
                do
                  v489 = __ldaxr(v488);
                while (__stlxr(v489 - 1, v488));
                if (!v489)
                {
                  ((void (*)(std::__shared_weak_count *))v487->__on_zero_shared)(v487);
                  std::__shared_weak_count::__release_weak(v487);
                }
              }
              v490 = *(std::__shared_weak_count **)(*(_QWORD *)&v486 + 16);
              if (v490)
              {
                v491 = (unint64_t *)&v490->__shared_owners_;
                do
                  v492 = __ldaxr(v491);
                while (__stlxr(v492 - 1, v491));
                if (!v492)
                {
                  ((void (*)(std::__shared_weak_count *))v490->__on_zero_shared)(v490);
                  std::__shared_weak_count::__release_weak(v490);
                }
              }
              MEMORY[0x212BC6398](*(_QWORD *)&v486, 0x10F0C40B62ED6C6);
              v493 = v664[0];
              v664[0] = 0;
              if (v493)
              {
                v494 = *(std::__shared_weak_count **)&v493[2].f64[0];
                if (v494)
                {
                  v495 = (unint64_t *)&v494->__shared_owners_;
                  do
                    v496 = __ldaxr(v495);
                  while (__stlxr(v496 - 1, v495));
                  if (!v496)
                  {
                    ((void (*)(std::__shared_weak_count *))v494->__on_zero_shared)(v494);
                    std::__shared_weak_count::__release_weak(v494);
                  }
                }
                v497 = *(std::__shared_weak_count **)&v493[1].f64[0];
                if (v497)
                {
                  v498 = (unint64_t *)&v497->__shared_owners_;
                  do
                    v499 = __ldaxr(v498);
                  while (__stlxr(v499 - 1, v498));
                  if (!v499)
                  {
                    ((void (*)(std::__shared_weak_count *))v497->__on_zero_shared)(v497);
                    std::__shared_weak_count::__release_weak(v497);
                  }
                }
                MEMORY[0x212BC6398](v493, 0x10F0C40B62ED6C6);
              }
            }
            v500 = (std::__shared_weak_count *)object[4];
            v501 = v602;
            if (object[4])
            {
              v502 = (unint64_t *)((char *)object[4] + 8);
              do
                v503 = __ldaxr(v502);
              while (__stlxr(v503 - 1, v502));
              if (!v503)
              {
                ((void (*)(std::__shared_weak_count *))v500->__on_zero_shared)(v500);
                std::__shared_weak_count::__release_weak(v500);
              }
            }
            v504 = (std::__shared_weak_count *)object[2];
            if (object[2])
            {
              v505 = (unint64_t *)((char *)object[2] + 8);
              do
                v506 = __ldaxr(v505);
              while (__stlxr(v506 - 1, v505));
              if (!v506)
              {
                ((void (*)(std::__shared_weak_count *))v504->__on_zero_shared)(v504);
                std::__shared_weak_count::__release_weak(v504);
              }
            }
          }
          else
          {
            os_log_type_enabled(v471, OS_LOG_TYPE_INFO);
            LODWORD(object[0]) = 134218240;
            *(double *)((char *)object + 4) = v520;
            WORD2(object[1]) = 2048;
            *(double *)((char *)&object[1] + 6) = v521;
            v507 = (void *)_os_log_send_and_compose_impl();
            v501 = v602;
            if (v507)
              free(v507);
          }
          if (v501)
          {
            sub_20E8C003C((uint64_t)v603, "RefinePose6DoF Non-Linear[%f -> %f]", v520, v521);
            sub_20E863570((uint64_t)v603);
          }
          sub_20E863570((uint64_t)v603);
          v508 = v607;
          if (v607)
          {
            v509 = (unint64_t *)&v607->__shared_owners_;
            do
              v510 = __ldaxr(v509);
            while (__stlxr(v510 - 1, v509));
            if (!v510)
            {
              ((void (*)(std::__shared_weak_count *))v508->__on_zero_shared)(v508);
              std::__shared_weak_count::__release_weak(v508);
            }
          }
LABEL_215:
          v462 = 0;
          v463 = v635;
          if (!v635)
            goto LABEL_217;
          goto LABEL_216;
        }
LABEL_159:
        if (SHIBYTE(object[3]) < 0)
          operator delete(object[1]);
        goto LABEL_161;
      }
    }
    memmove(v467, v465, v466);
    goto LABEL_148;
  }
  v567 = v331;
  v571 = v327;
  v584 = _Q16;
  v575 = *(double *)&v326;
  v579 = v330;
  v601 = v329;
  *(_OWORD *)&object[11] = unk_210315950;
  *(_OWORD *)&object[13] = xmmword_210315960;
  *(_OWORD *)&object[15] = unk_210315970;
  *(_OWORD *)&object[1] = xmmword_210315900;
  *(_OWORD *)&object[3] = *(_OWORD *)algn_210315910;
  *(_OWORD *)&object[5] = xmmword_210315920;
  memset(&object[7], 0, 32);
  v670.i8[10] = 0;
  object[0] = &off_24C9C5008;
  memset(&object[17], 0, 40);
  v668 = 0u;
  v669 = 0u;
  v670.i64[0] = 0;
  v670.i16[4] = 3;
  sub_20EB5C370((uint64_t)&object[17]);
  v415 = v575;
  v416.f64[0] = v575;
  v417 = v601;
  v416.f64[1] = v601.f64[0];
  v418 = v579;
  v419 = vmulq_f64(v416, v416).f64[0] + v417.f64[0] * v417.f64[0] + v418 * v418;
  if (v419 >= 0.0000002635)
  {
    v429 = sqrt(v419);
    v430 = __sincos_stret(v429);
    v421 = v430.__cosval;
    v415 = v575;
    v418 = v579;
    v417 = v601;
    v420 = v430.__sinval / v429;
    v414.f64[0] = 1.0 / v419 * (1.0 - v430.__cosval);
    v413.f64[0] = 1.0 / v419 * (1.0 - v430.__sinval / v429);
  }
  else
  {
    v414.f64[0] = 0.5 - v419 * (v419 / -720.0 + 0.0416666667);
    v413.f64[0] = 0.166666667 - v419 * (v419 / -5040.0 + 0.00833333333);
    v420 = 1.0 - v419 * v413.f64[0];
    v421 = 1.0 - v419 * v414.f64[0];
  }
  v431 = v415 * (v415 * v414.f64[0]) + v421;
  v432 = v417.f64[0] * (v417.f64[0] * v414.f64[0]) + v421;
  v433 = v418 * (v418 * v414.f64[0]) + v421;
  v434 = v417.f64[0] * (v415 * v414.f64[0]);
  v435 = v418 * (v415 * v414.f64[0]);
  v436 = v418 * (v417.f64[0] * v414.f64[0]);
  v437 = v415 * v420;
  v438 = v417.f64[0] * v420;
  v439 = v418 * v420;
  v440 = v434 - v439;
  v441 = v435 + v438;
  v442 = v434 + v439;
  v443 = v436 - v437;
  v444 = v435 - v438;
  v445.f64[0] = v415;
  v445.f64[1] = v417.f64[0];
  v446.f64[0] = v417.f64[0];
  v446.f64[1] = v418;
  v447.f64[0] = v418;
  v448.f64[0] = v584.f64[0];
  v448.f64[1] = v571.f64[0];
  *(double *)&v449 = v436 + v437;
  v450.f64[0] = v571.f64[0];
  v450.f64[1] = v567.f64[0];
  v447.f64[1] = v415;
  v451.f64[0] = v567.f64[0];
  v451.f64[1] = v584.f64[0];
  v452 = vsubq_f64(vmulq_f64(v446, v448), vmulq_f64(v447, v451));
  v453 = vsubq_f64(vmulq_f64(v445, v567), vmulq_f64(v417, v571));
  v454 = vaddq_f64(v450, vmulq_n_f64(v452, v414.f64[0]));
  v455 = vaddq_f64(v584, vmulq_f64(v453, v414));
  v456 = (float64x2_t)vextq_s8((int8x16_t)v452, (int8x16_t)v453, 8uLL);
  v453.f64[1] = v452.f64[0];
  v457 = vmulq_f64(vsubq_f64(vmulq_laneq_f64(v445, v452, 1), vmulq_f64(v417, v452)), v413);
  object[1] = *(void **)&v431;
  object[2] = *(void **)&v442;
  v458 = (int64x2_t)vaddq_f64(v454, vmulq_n_f64(vsubq_f64(vmulq_f64(v446, v453), vmulq_f64(v447, v456)), v413.f64[0]));
  *(_QWORD *)&v455.f64[0] = *(_OWORD *)&vaddq_f64(v455, v457);
  object[3] = *(void **)&v444;
  object[4] = 0;
  object[5] = *(void **)&v440;
  object[6] = *(void **)&v432;
  object[7] = (void *)v449;
  object[8] = 0;
  object[9] = *(void **)&v441;
  object[10] = *(void **)&v443;
  object[11] = *(void **)&v433;
  object[12] = 0;
  object[15] = *(void **)&v455.f64[0];
  *(int64x2_t *)&object[13] = v458;
  object[16] = (void *)0x3FF0000000000000;
  v672.i64[0] = 0;
  v671 = 0uLL;
  v459 = *(int64x2_t *)&object[5];
  v460 = *(int64x2_t *)&object[9];
  *(int64x2_t *)v519 = vzip1q_s64(*(int64x2_t *)&object[1], *(int64x2_t *)&object[5]);
  *(_QWORD *)&v461 = vdupq_laneq_s64(v458, 1).u64[0];
  *(float64_t *)&v458.i64[1] = v442;
  v519[2] = v460.i64[0];
  *(int64x2_t *)(v519 + 3) = v458;
  *(int64x2_t *)(v519 + 5) = vzip2q_s64(v459, v460);
  *((double *)&v461 + 1) = v444;
  *(_OWORD *)(v519 + 7) = v461;
  *((double *)&v449 + 1) = v433;
  *(_OWORD *)(v519 + 9) = v449;
  v519[11] = *(_QWORD *)&v455.f64[0];
  v462 = 1;
  v463 = v635;
  if (v635)
  {
LABEL_216:
    v636 = v463;
    operator delete(v463);
  }
LABEL_217:
  if (v631)
  {
    v632 = (char *)v631;
    operator delete(v631);
  }
  v511 = v623;
  *(_QWORD *)v608 = &off_24C9C5008;
  v623 = 0;
  if (v511)
    MEMORY[0x212BC6398](v511, 0x1000C40FF89C88ELL);
  v512 = v622;
  v622 = 0;
  if (v512)
    MEMORY[0x212BC6398](v512, 0x1000C40504FFAC1);
  v513 = v621;
  v621 = 0;
  if (v513)
    MEMORY[0x212BC6398](v513, 0x1000C40FF89C88ELL);
  if (v642)
  {
    v643 = v642;
    operator delete(v642);
  }
  v514 = v660;
  v647 = &off_24C9C5008;
  v660 = 0;
  if (v514)
    MEMORY[0x212BC6398](v514, 0x1000C40FF89C88ELL);
  v515 = v659;
  v659 = 0;
  if (v515)
    MEMORY[0x212BC6398](v515, 0x1000C40504FFAC1);
  v516 = v658;
  v658 = 0;
  if (v516)
    MEMORY[0x212BC6398](v516, 0x1000C40FF89C88ELL);
  return v462;
}

void sub_20EB69FA4(_Unwind_Exception *a1)
{
  void *v2;

  if (LOBYTE(STACK[0x888]) && SLOBYTE(STACK[0x887]) < 0)
    operator delete((void *)STACK[0x870]);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0x4A0]);
  sub_20EB5C228(&STACK[0x4F0]);
  v2 = (void *)STACK[0x6C0];
  if (STACK[0x6C0])
  {
    STACK[0x6C8] = (unint64_t)v2;
    operator delete(v2);
  }
  sub_20EB5C19C(&STACK[0x708]);
  _Unwind_Resume(a1);
}

uint64_t sub_20EB6A180(uint64_t a1, _DWORD *a2, uint64_t *a3, _QWORD *a4, _OWORD *a5, uint64_t a6)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  double v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  uint64_t v25;
  _QWORD v27[2];
  void *__p;
  void *v29;
  uint64_t v30;

  if (((a2[2] - *a2) & 8) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/RANSAC/P3PPreemptiveRansac.cpp", 119, (uint64_t)"xs.size() % 2 == 0", 18, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_12;
  }
  v12 = *a3;
  v13 = (a3[1] - *a3) >> 3;
  if (0xAAAAAAAAAAAAAAABLL * v13 >= 0x5555555555555556)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/RANSAC/P3PPreemptiveRansac.cpp", 120, (uint64_t)"Xs.size() % 3 == 0", 18, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_12;
    }
    v12 = *a3;
    v13 = (a3[1] - *a3) >> 3;
  }
  v14 = *(_QWORD *)a2;
  v15 = (unint64_t)((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3) >> 1;
  if (v15 == v13 / 3)
    goto LABEL_9;
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/RANSAC/P3PPreemptiveRansac.cpp", 121, (uint64_t)"xs.size() / 2 == Xs.size() / 3", 30, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_12:
    abort();
  }
  v14 = *(_QWORD *)a2;
  v12 = *a3;
  v15 = (unint64_t)((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3) >> 1;
LABEL_9:
  __p = 0;
  v29 = 0;
  v30 = 0;
  v27[0] = v14;
  v27[1] = v12;
  sub_20EB59674((uint64_t)&__p, v27, v15);
  v16 = a5[1];
  *(_OWORD *)a6 = *a5;
  *(_OWORD *)(a6 + 16) = v16;
  v17 = a5[2];
  v18 = a5[3];
  v19 = a5[4];
  v20 = a5[5];
  *(_OWORD *)(a6 + 64) = v19;
  *(_OWORD *)(a6 + 80) = v20;
  *(_OWORD *)(a6 + 32) = v17;
  *(_OWORD *)(a6 + 48) = v18;
  v25 = sub_20EB67368(a1, &__p, a4, (_QWORD *)a6, *(double *)&v17, *(double *)&v18, *(double *)&v19, *(double *)&v20, v21, v22, v23, v24);
  if (__p)
  {
    v29 = __p;
    operator delete(__p);
  }
  return v25;
}

void sub_20EB6A340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EB6A360(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v3;
  double v4;
  double v5;
  __int128 *v6;
  __int128 *v7;
  __int128 *v8;
  __int128 *v9;
  __int128 *v10;
  __int128 *v11;
  __int128 *v12;
  __int128 *v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t result;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  double v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;

  v3 = *(double *)a2;
  v4 = *(double *)a1;
  v5 = *(double *)a3;
  if (*(double *)a2 >= *(double *)a1)
  {
    if (v5 >= v3)
      return 0;
    v130 = *(_OWORD *)(a2 + 40);
    v135 = *(_OWORD *)(a2 + 56);
    v140 = *(_OWORD *)(a2 + 72);
    v145 = *(_OWORD *)(a2 + 88);
    v120 = *(_OWORD *)(a2 + 8);
    v125 = *(_OWORD *)(a2 + 24);
    v115 = *(_OWORD *)(a2 + 104);
    v110 = *(_QWORD *)(a2 + 136);
    v100 = *(_OWORD *)(a2 + 144);
    v105 = *(_OWORD *)(a2 + 120);
    v95 = *(_QWORD *)(a2 + 176);
    v85 = *(_OWORD *)(a2 + 184);
    v90 = *(_OWORD *)(a2 + 160);
    v80 = *(_QWORD *)(a2 + 216);
    v70 = *(_OWORD *)(a2 + 224);
    v75 = *(_OWORD *)(a2 + 200);
    v65 = *(_QWORD *)(a2 + 256);
    v60 = *(_OWORD *)(a2 + 240);
    *(double *)a2 = v5;
    v26 = *(_OWORD *)(a3 + 8);
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
    *(_OWORD *)(a2 + 8) = v26;
    v27 = *(_OWORD *)(a3 + 40);
    v28 = *(_OWORD *)(a3 + 56);
    v29 = *(_OWORD *)(a3 + 72);
    *(_OWORD *)(a2 + 88) = *(_OWORD *)(a3 + 88);
    *(_OWORD *)(a2 + 72) = v29;
    *(_OWORD *)(a2 + 56) = v28;
    *(_OWORD *)(a2 + 40) = v27;
    *(_OWORD *)(a2 + 104) = *(_OWORD *)(a3 + 104);
    v30 = *(_OWORD *)(a3 + 120);
    *(_QWORD *)(a2 + 136) = *(_QWORD *)(a3 + 136);
    *(_OWORD *)(a2 + 120) = v30;
    *(_OWORD *)(a2 + 144) = *(_OWORD *)(a3 + 144);
    v31 = *(_OWORD *)(a3 + 160);
    *(_QWORD *)(a2 + 176) = *(_QWORD *)(a3 + 176);
    *(_OWORD *)(a2 + 160) = v31;
    *(_OWORD *)(a2 + 184) = *(_OWORD *)(a3 + 184);
    v32 = *(_OWORD *)(a3 + 200);
    *(_QWORD *)(a2 + 216) = *(_QWORD *)(a3 + 216);
    *(_OWORD *)(a2 + 200) = v32;
    *(_OWORD *)(a2 + 224) = *(_OWORD *)(a3 + 224);
    v33 = *(_OWORD *)(a3 + 240);
    *(_QWORD *)(a2 + 256) = *(_QWORD *)(a3 + 256);
    *(_OWORD *)(a2 + 240) = v33;
    *(double *)a3 = v3;
    *(_OWORD *)(a3 + 24) = v125;
    *(_OWORD *)(a3 + 8) = v120;
    *(_OWORD *)(a3 + 72) = v140;
    *(_OWORD *)(a3 + 56) = v135;
    *(_OWORD *)(a3 + 40) = v130;
    *(_OWORD *)(a3 + 88) = v145;
    *(_OWORD *)(a3 + 104) = v115;
    *(_QWORD *)(a3 + 136) = v110;
    *(_OWORD *)(a3 + 120) = v105;
    *(_QWORD *)(a3 + 176) = v95;
    *(_OWORD *)(a3 + 144) = v100;
    *(_OWORD *)(a3 + 160) = v90;
    *(_OWORD *)(a3 + 184) = v85;
    *(_QWORD *)(a3 + 216) = v80;
    *(_OWORD *)(a3 + 200) = v75;
    *(_QWORD *)(a3 + 256) = v65;
    *(_OWORD *)(a3 + 224) = v70;
    *(_OWORD *)(a3 + 240) = v60;
    v34 = *(double *)a1;
    if (*(double *)a2 < *(double *)a1)
    {
      v131 = *(_OWORD *)(a1 + 40);
      v136 = *(_OWORD *)(a1 + 56);
      v141 = *(_OWORD *)(a1 + 72);
      v146 = *(_OWORD *)(a1 + 88);
      v121 = *(_OWORD *)(a1 + 8);
      v126 = *(_OWORD *)(a1 + 24);
      v116 = *(_OWORD *)(a1 + 104);
      v111 = *(_QWORD *)(a1 + 136);
      v101 = *(_OWORD *)(a1 + 144);
      v106 = *(_OWORD *)(a1 + 120);
      v96 = *(_QWORD *)(a1 + 176);
      v86 = *(_OWORD *)(a1 + 184);
      v91 = *(_OWORD *)(a1 + 160);
      v81 = *(_QWORD *)(a1 + 216);
      v71 = *(_OWORD *)(a1 + 224);
      v76 = *(_OWORD *)(a1 + 200);
      v66 = *(_QWORD *)(a1 + 256);
      v61 = *(_OWORD *)(a1 + 240);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v35 = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 8) = v35;
      v36 = *(_OWORD *)(a2 + 40);
      v37 = *(_OWORD *)(a2 + 56);
      v38 = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 72) = v38;
      *(_OWORD *)(a1 + 56) = v37;
      *(_OWORD *)(a1 + 40) = v36;
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
      v39 = *(_OWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      *(_OWORD *)(a1 + 120) = v39;
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
      v40 = *(_OWORD *)(a2 + 160);
      *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 160) = v40;
      *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
      v41 = *(_OWORD *)(a2 + 200);
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
      *(_OWORD *)(a1 + 200) = v41;
      *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
      v42 = *(_OWORD *)(a2 + 240);
      *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
      *(_OWORD *)(a1 + 240) = v42;
      *(double *)a2 = v34;
      *(_OWORD *)(a2 + 40) = v131;
      *(_OWORD *)(a2 + 56) = v136;
      *(_OWORD *)(a2 + 72) = v141;
      *(_OWORD *)(a2 + 88) = v146;
      *(_OWORD *)(a2 + 8) = v121;
      *(_OWORD *)(a2 + 24) = v126;
      *(_OWORD *)(a2 + 104) = v116;
      *(_QWORD *)(a2 + 136) = v111;
      *(_OWORD *)(a2 + 120) = v106;
      *(_OWORD *)(a2 + 144) = v101;
      *(_QWORD *)(a2 + 176) = v96;
      *(_OWORD *)(a2 + 160) = v91;
      *(_OWORD *)(a2 + 184) = v86;
      *(_QWORD *)(a2 + 216) = v81;
      *(_OWORD *)(a2 + 200) = v76;
      *(_OWORD *)(a2 + 224) = v71;
      *(_QWORD *)(a2 + 256) = v66;
      result = 2;
      *(_OWORD *)(a2 + 240) = v61;
      return result;
    }
  }
  else
  {
    v6 = (__int128 *)(a1 + 8);
    v7 = (__int128 *)(a1 + 104);
    v8 = (__int128 *)(a1 + 120);
    v9 = (__int128 *)(a1 + 144);
    v10 = (__int128 *)(a1 + 160);
    v11 = (__int128 *)(a1 + 184);
    v12 = (__int128 *)(a1 + 200);
    v13 = (__int128 *)(a1 + 224);
    v14 = (__int128 *)(a1 + 240);
    if (v5 < v3)
    {
      v129 = *(_OWORD *)(a1 + 40);
      v134 = *(_OWORD *)(a1 + 56);
      v139 = *(_OWORD *)(a1 + 72);
      v144 = *(_OWORD *)(a1 + 88);
      v119 = *v6;
      v124 = *(_OWORD *)(a1 + 24);
      v114 = *v7;
      v109 = *(_QWORD *)(a1 + 136);
      v99 = *v9;
      v104 = *v8;
      v94 = *(_QWORD *)(a1 + 176);
      v84 = *v11;
      v89 = *v10;
      v79 = *(_QWORD *)(a1 + 216);
      v69 = *v13;
      v74 = *v12;
      v64 = *(_QWORD *)(a1 + 256);
      v59 = *v14;
      *(double *)a1 = v5;
      v15 = *(_OWORD *)(a3 + 24);
      *v6 = *(_OWORD *)(a3 + 8);
      *(_OWORD *)(a1 + 24) = v15;
      v16 = *(_OWORD *)(a3 + 40);
      v17 = *(_OWORD *)(a3 + 56);
      v18 = *(_OWORD *)(a3 + 88);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a3 + 72);
      *(_OWORD *)(a1 + 88) = v18;
      *(_OWORD *)(a1 + 40) = v16;
      *(_OWORD *)(a1 + 56) = v17;
      *v7 = *(_OWORD *)(a3 + 104);
      v19 = *(_OWORD *)(a3 + 120);
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a3 + 136);
      *v8 = v19;
      *v9 = *(_OWORD *)(a3 + 144);
      v20 = *(_OWORD *)(a3 + 160);
      *(_QWORD *)(a1 + 176) = *(_QWORD *)(a3 + 176);
      *v10 = v20;
      *v11 = *(_OWORD *)(a3 + 184);
      v21 = *(_OWORD *)(a3 + 200);
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a3 + 216);
      *v12 = v21;
      *v13 = *(_OWORD *)(a3 + 224);
      v22 = *(_OWORD *)(a3 + 240);
      *(_QWORD *)(a1 + 256) = *(_QWORD *)(a3 + 256);
      *v14 = v22;
      *(double *)a3 = v4;
      *(_OWORD *)(a3 + 24) = v124;
      *(_OWORD *)(a3 + 8) = v119;
      *(_OWORD *)(a3 + 72) = v139;
      *(_OWORD *)(a3 + 56) = v134;
      *(_OWORD *)(a3 + 40) = v129;
      *(_OWORD *)(a3 + 88) = v144;
      *(_OWORD *)(a3 + 104) = v114;
      *(_QWORD *)(a3 + 136) = v109;
      *(_OWORD *)(a3 + 120) = v104;
      *(_QWORD *)(a3 + 176) = v94;
      *(_OWORD *)(a3 + 144) = v99;
      *(_OWORD *)(a3 + 160) = v89;
      *(_OWORD *)(a3 + 184) = v84;
      *(_QWORD *)(a3 + 216) = v79;
      *(_OWORD *)(a3 + 200) = v74;
      v23 = v69;
      v24 = v59;
      *(_QWORD *)(a3 + 256) = v64;
      result = 1;
LABEL_9:
      *(_OWORD *)(a3 + 224) = v23;
      *(_OWORD *)(a3 + 240) = v24;
      return result;
    }
    v132 = *(_OWORD *)(a1 + 40);
    v137 = *(_OWORD *)(a1 + 56);
    v142 = *(_OWORD *)(a1 + 72);
    v147 = *(_OWORD *)(a1 + 88);
    v122 = *v6;
    v127 = *(_OWORD *)(a1 + 24);
    v117 = *v7;
    v112 = *(_QWORD *)(a1 + 136);
    v102 = *v9;
    v107 = *v8;
    v97 = *(_QWORD *)(a1 + 176);
    v87 = *v11;
    v92 = *v10;
    v82 = *(_QWORD *)(a1 + 216);
    v72 = *v13;
    v77 = *v12;
    v67 = *(_QWORD *)(a1 + 256);
    v62 = *v14;
    *(double *)a1 = v3;
    v43 = *(_OWORD *)(a2 + 24);
    *v6 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = v43;
    v44 = *(_OWORD *)(a2 + 40);
    v45 = *(_OWORD *)(a2 + 56);
    v46 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v46;
    *(_OWORD *)(a1 + 40) = v44;
    *(_OWORD *)(a1 + 56) = v45;
    *v7 = *(_OWORD *)(a2 + 104);
    v47 = *(_OWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *v8 = v47;
    *v9 = *(_OWORD *)(a2 + 144);
    v48 = *(_OWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    *v10 = v48;
    *v11 = *(_OWORD *)(a2 + 184);
    v49 = *(_OWORD *)(a2 + 200);
    *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
    *v12 = v49;
    *v13 = *(_OWORD *)(a2 + 224);
    v50 = *(_OWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
    *v14 = v50;
    *(double *)a2 = v4;
    *(_OWORD *)(a2 + 24) = v127;
    *(_OWORD *)(a2 + 8) = v122;
    *(_OWORD *)(a2 + 72) = v142;
    *(_OWORD *)(a2 + 56) = v137;
    *(_OWORD *)(a2 + 40) = v132;
    *(_OWORD *)(a2 + 88) = v147;
    *(_OWORD *)(a2 + 104) = v117;
    *(_QWORD *)(a2 + 136) = v112;
    *(_OWORD *)(a2 + 120) = v107;
    *(_QWORD *)(a2 + 176) = v97;
    *(_OWORD *)(a2 + 144) = v102;
    *(_OWORD *)(a2 + 160) = v92;
    *(_OWORD *)(a2 + 184) = v87;
    *(_QWORD *)(a2 + 216) = v82;
    *(_OWORD *)(a2 + 200) = v77;
    *(_QWORD *)(a2 + 256) = v67;
    *(_OWORD *)(a2 + 224) = v72;
    *(_OWORD *)(a2 + 240) = v62;
    if (*(double *)a3 < v4)
    {
      v133 = *(_OWORD *)(a2 + 40);
      v138 = *(_OWORD *)(a2 + 56);
      v143 = *(_OWORD *)(a2 + 72);
      v148 = *(_OWORD *)(a2 + 88);
      v123 = *(_OWORD *)(a2 + 8);
      v128 = *(_OWORD *)(a2 + 24);
      v118 = *(_OWORD *)(a2 + 104);
      v113 = *(_QWORD *)(a2 + 136);
      v103 = *(_OWORD *)(a2 + 144);
      v108 = *(_OWORD *)(a2 + 120);
      v98 = *(_QWORD *)(a2 + 176);
      v88 = *(_OWORD *)(a2 + 184);
      v93 = *(_OWORD *)(a2 + 160);
      v83 = *(_QWORD *)(a2 + 216);
      v73 = *(_OWORD *)(a2 + 224);
      v78 = *(_OWORD *)(a2 + 200);
      v68 = *(_QWORD *)(a2 + 256);
      v63 = *(_OWORD *)(a2 + 240);
      *(_QWORD *)a2 = *(_QWORD *)a3;
      v51 = *(_OWORD *)(a3 + 24);
      *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
      *(_OWORD *)(a2 + 24) = v51;
      v52 = *(_OWORD *)(a3 + 40);
      v53 = *(_OWORD *)(a3 + 56);
      v54 = *(_OWORD *)(a3 + 88);
      *(_OWORD *)(a2 + 72) = *(_OWORD *)(a3 + 72);
      *(_OWORD *)(a2 + 88) = v54;
      *(_OWORD *)(a2 + 40) = v52;
      *(_OWORD *)(a2 + 56) = v53;
      *(_OWORD *)(a2 + 104) = *(_OWORD *)(a3 + 104);
      v55 = *(_OWORD *)(a3 + 120);
      *(_QWORD *)(a2 + 136) = *(_QWORD *)(a3 + 136);
      *(_OWORD *)(a2 + 120) = v55;
      *(_OWORD *)(a2 + 144) = *(_OWORD *)(a3 + 144);
      v56 = *(_OWORD *)(a3 + 160);
      *(_QWORD *)(a2 + 176) = *(_QWORD *)(a3 + 176);
      *(_OWORD *)(a2 + 160) = v56;
      *(_OWORD *)(a2 + 184) = *(_OWORD *)(a3 + 184);
      v57 = *(_OWORD *)(a3 + 200);
      *(_QWORD *)(a2 + 216) = *(_QWORD *)(a3 + 216);
      *(_OWORD *)(a2 + 200) = v57;
      *(_OWORD *)(a2 + 224) = *(_OWORD *)(a3 + 224);
      v58 = *(_OWORD *)(a3 + 240);
      *(_QWORD *)(a2 + 256) = *(_QWORD *)(a3 + 256);
      *(_OWORD *)(a2 + 240) = v58;
      *(double *)a3 = v4;
      *(_OWORD *)(a3 + 24) = v128;
      *(_OWORD *)(a3 + 8) = v123;
      *(_OWORD *)(a3 + 72) = v143;
      *(_OWORD *)(a3 + 56) = v138;
      *(_OWORD *)(a3 + 40) = v133;
      *(_OWORD *)(a3 + 88) = v148;
      *(_OWORD *)(a3 + 104) = v118;
      *(_QWORD *)(a3 + 136) = v113;
      *(_OWORD *)(a3 + 120) = v108;
      *(_QWORD *)(a3 + 176) = v98;
      *(_OWORD *)(a3 + 144) = v103;
      *(_OWORD *)(a3 + 160) = v93;
      *(_OWORD *)(a3 + 184) = v88;
      *(_QWORD *)(a3 + 216) = v83;
      *(_OWORD *)(a3 + 200) = v78;
      v23 = v73;
      v24 = v63;
      *(_QWORD *)(a3 + 256) = v68;
      result = 2;
      goto LABEL_9;
    }
  }
  return 1;
}

void sub_20EB6ABCC(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  double v28;
  uint64_t v29;
  double v30;
  unint64_t v31;
  double *v32;
  double *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _QWORD *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  BOOL v51;
  uint64_t v52;
  double v53;
  unint64_t v54;
  unint64_t v55;
  double v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  _QWORD *v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  double v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  unint64_t v83;
  BOOL v85;
  uint64_t v86;
  unint64_t v87;
  double *v88;
  unint64_t v89;
  double v90;
  uint64_t v91;
  double v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  int64_t v101;
  int64_t v102;
  _OWORD *v103;
  _OWORD *v104;
  unint64_t v105;
  _OWORD *v106;
  unint64_t v107;
  _OWORD *v108;
  unint64_t v109;
  _OWORD *v110;
  unint64_t v111;
  int64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  double v116;
  double v117;
  unint64_t v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  int64_t v129;
  __int128 *v130;
  uint64_t v132;
  double v133;
  uint64_t v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  uint64_t v143;
  uint64_t v144;
  int64_t v145;
  __int128 *v146;
  __int128 *v147;
  __int128 *v148;
  __int128 *v149;
  __int128 *v150;
  __int128 *v151;
  __int128 *v152;
  __int128 *v153;
  __int128 *v154;
  _QWORD *v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  double v167;
  double v168;
  uint64_t v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  _OWORD *v178;
  _OWORD *v179;
  uint64_t v180;
  _OWORD *v181;
  uint64_t v182;
  _OWORD *v183;
  uint64_t v184;
  _OWORD *v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  double v189;
  unint64_t v190;
  double v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  uint64_t v260;
  __int128 v261;
  __int128 v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  __int128 v266;
  uint64_t v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  __int128 v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  __int128 v384;
  __int128 v385;
  __int128 v386;
  __int128 v387;
  __int128 v388;
  __int128 v389;
  __int128 v390;
  __int128 v391;
  __int128 v392;
  __int128 v393;
  __int128 v394;
  __int128 v395;
  __int128 v396;
  __int128 v397;
  __int128 v398;

__n128 sub_20EB6C50C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v3;
  __n128 result;
  double v5;
  __int128 *v6;
  __int128 *v7;
  __int128 *v8;
  __int128 *v9;
  __int128 *v10;
  __int128 *v11;
  __int128 *v12;
  __n128 *v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __n128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __n128 v60;
  __int128 v61;
  __int128 v62;
  __n128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;

  v3 = *(double *)a2;
  result.n128_u64[0] = *(_QWORD *)a1;
  v5 = *(double *)a3;
  if (*(double *)a2 >= *(double *)a1)
  {
    if (v5 < v3)
    {
      v109 = *(_OWORD *)(a2 + 40);
      v113 = *(_OWORD *)(a2 + 56);
      v117 = *(_OWORD *)(a2 + 72);
      v121 = *(_OWORD *)(a2 + 88);
      v101 = *(_OWORD *)(a2 + 8);
      v105 = *(_OWORD *)(a2 + 24);
      v97 = *(_OWORD *)(a2 + 104);
      v93 = *(_QWORD *)(a2 + 136);
      v85 = *(_OWORD *)(a2 + 144);
      v89 = *(_OWORD *)(a2 + 120);
      v81 = *(_QWORD *)(a2 + 176);
      v73 = *(_OWORD *)(a2 + 184);
      v77 = *(_OWORD *)(a2 + 160);
      v69 = *(_QWORD *)(a2 + 216);
      v61 = *(_OWORD *)(a2 + 224);
      v65 = *(_OWORD *)(a2 + 200);
      v57 = *(_QWORD *)(a2 + 256);
      v53 = *(_OWORD *)(a2 + 240);
      *(double *)a2 = v5;
      v21 = *(_OWORD *)(a3 + 8);
      *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
      *(_OWORD *)(a2 + 8) = v21;
      v22 = *(_OWORD *)(a3 + 40);
      v23 = *(_OWORD *)(a3 + 56);
      v24 = *(_OWORD *)(a3 + 72);
      *(_OWORD *)(a2 + 88) = *(_OWORD *)(a3 + 88);
      *(_OWORD *)(a2 + 72) = v24;
      *(_OWORD *)(a2 + 56) = v23;
      *(_OWORD *)(a2 + 40) = v22;
      *(_OWORD *)(a2 + 104) = *(_OWORD *)(a3 + 104);
      v25 = *(_OWORD *)(a3 + 120);
      *(_QWORD *)(a2 + 136) = *(_QWORD *)(a3 + 136);
      *(_OWORD *)(a2 + 120) = v25;
      *(_OWORD *)(a2 + 144) = *(_OWORD *)(a3 + 144);
      v26 = *(_OWORD *)(a3 + 160);
      *(_QWORD *)(a2 + 176) = *(_QWORD *)(a3 + 176);
      *(_OWORD *)(a2 + 160) = v26;
      *(_OWORD *)(a2 + 184) = *(_OWORD *)(a3 + 184);
      v27 = *(_OWORD *)(a3 + 200);
      *(_QWORD *)(a2 + 216) = *(_QWORD *)(a3 + 216);
      *(_OWORD *)(a2 + 200) = v27;
      *(_OWORD *)(a2 + 224) = *(_OWORD *)(a3 + 224);
      result = *(__n128 *)(a3 + 240);
      *(_QWORD *)(a2 + 256) = *(_QWORD *)(a3 + 256);
      *(__n128 *)(a2 + 240) = result;
      *(double *)a3 = v3;
      *(_OWORD *)(a3 + 24) = v105;
      *(_OWORD *)(a3 + 8) = v101;
      *(_OWORD *)(a3 + 72) = v117;
      *(_OWORD *)(a3 + 56) = v113;
      *(_OWORD *)(a3 + 40) = v109;
      *(_OWORD *)(a3 + 88) = v121;
      *(_OWORD *)(a3 + 104) = v97;
      *(_QWORD *)(a3 + 136) = v93;
      *(_OWORD *)(a3 + 120) = v89;
      *(_QWORD *)(a3 + 176) = v81;
      *(_OWORD *)(a3 + 144) = v85;
      *(_OWORD *)(a3 + 160) = v77;
      *(_OWORD *)(a3 + 184) = v73;
      *(_QWORD *)(a3 + 216) = v69;
      *(_OWORD *)(a3 + 200) = v65;
      *(_QWORD *)(a3 + 256) = v57;
      *(_OWORD *)(a3 + 224) = v61;
      *(_OWORD *)(a3 + 240) = v53;
      result.n128_u64[0] = *(_QWORD *)a1;
      if (*(double *)a2 < *(double *)a1)
      {
        v110 = *(_OWORD *)(a1 + 40);
        v114 = *(_OWORD *)(a1 + 56);
        v118 = *(_OWORD *)(a1 + 72);
        v122 = *(_OWORD *)(a1 + 88);
        v102 = *(_OWORD *)(a1 + 8);
        v106 = *(_OWORD *)(a1 + 24);
        v98 = *(_OWORD *)(a1 + 104);
        v94 = *(_QWORD *)(a1 + 136);
        v86 = *(_OWORD *)(a1 + 144);
        v90 = *(_OWORD *)(a1 + 120);
        v82 = *(_QWORD *)(a1 + 176);
        v74 = *(_OWORD *)(a1 + 184);
        v78 = *(_OWORD *)(a1 + 160);
        v70 = *(_QWORD *)(a1 + 216);
        v62 = *(_OWORD *)(a1 + 224);
        v66 = *(_OWORD *)(a1 + 200);
        v58 = *(_QWORD *)(a1 + 256);
        v54 = *(__n128 *)(a1 + 240);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v28 = *(_OWORD *)(a2 + 8);
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 8) = v28;
        v29 = *(_OWORD *)(a2 + 40);
        v30 = *(_OWORD *)(a2 + 56);
        v31 = *(_OWORD *)(a2 + 72);
        *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
        *(_OWORD *)(a1 + 72) = v31;
        *(_OWORD *)(a1 + 56) = v30;
        *(_OWORD *)(a1 + 40) = v29;
        *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
        v32 = *(_OWORD *)(a2 + 120);
        *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
        *(_OWORD *)(a1 + 120) = v32;
        *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
        v33 = *(_OWORD *)(a2 + 160);
        *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
        *(_OWORD *)(a1 + 160) = v33;
        *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
        v34 = *(_OWORD *)(a2 + 200);
        *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
        *(_OWORD *)(a1 + 200) = v34;
        *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
        v35 = *(_OWORD *)(a2 + 240);
        *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
        *(_OWORD *)(a1 + 240) = v35;
        *(_QWORD *)a2 = result.n128_u64[0];
        *(_OWORD *)(a2 + 72) = v118;
        *(_OWORD *)(a2 + 88) = v122;
        *(_OWORD *)(a2 + 40) = v110;
        *(_OWORD *)(a2 + 56) = v114;
        *(_OWORD *)(a2 + 8) = v102;
        *(_OWORD *)(a2 + 24) = v106;
        *(_OWORD *)(a2 + 104) = v98;
        *(_QWORD *)(a2 + 136) = v94;
        *(_OWORD *)(a2 + 120) = v90;
        *(_OWORD *)(a2 + 144) = v86;
        *(_QWORD *)(a2 + 176) = v82;
        *(_OWORD *)(a2 + 160) = v78;
        *(_OWORD *)(a2 + 184) = v74;
        *(_QWORD *)(a2 + 216) = v70;
        *(_OWORD *)(a2 + 200) = v66;
        *(_OWORD *)(a2 + 224) = v62;
        result = v54;
        *(_QWORD *)(a2 + 256) = v58;
        *(__n128 *)(a2 + 240) = v54;
      }
    }
  }
  else
  {
    v6 = (__int128 *)(a1 + 8);
    v7 = (__int128 *)(a1 + 104);
    v8 = (__int128 *)(a1 + 120);
    v9 = (__int128 *)(a1 + 144);
    v10 = (__int128 *)(a1 + 160);
    v11 = (__int128 *)(a1 + 184);
    v12 = (__int128 *)(a1 + 200);
    v13 = (__n128 *)(a1 + 224);
    v14 = (__int128 *)(a1 + 240);
    if (v5 >= v3)
    {
      v111 = *(_OWORD *)(a1 + 40);
      v115 = *(_OWORD *)(a1 + 56);
      v119 = *(_OWORD *)(a1 + 72);
      v123 = *(_OWORD *)(a1 + 88);
      v103 = *v6;
      v107 = *(_OWORD *)(a1 + 24);
      v99 = *v7;
      v95 = *(_QWORD *)(a1 + 136);
      v87 = *v9;
      v91 = *v8;
      v83 = *(_QWORD *)(a1 + 176);
      v75 = *v11;
      v79 = *v10;
      v71 = *(_QWORD *)(a1 + 216);
      v63 = *v13;
      v67 = *v12;
      v59 = *(_QWORD *)(a1 + 256);
      v55 = *v14;
      *(double *)a1 = v3;
      v36 = *(_OWORD *)(a2 + 24);
      *v6 = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(a1 + 24) = v36;
      v37 = *(_OWORD *)(a2 + 40);
      v38 = *(_OWORD *)(a2 + 56);
      v39 = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(a1 + 88) = v39;
      *(_OWORD *)(a1 + 40) = v37;
      *(_OWORD *)(a1 + 56) = v38;
      *v7 = *(_OWORD *)(a2 + 104);
      v40 = *(_OWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      *v8 = v40;
      *v9 = *(_OWORD *)(a2 + 144);
      v41 = *(_OWORD *)(a2 + 160);
      *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
      *v10 = v41;
      *v11 = *(_OWORD *)(a2 + 184);
      v42 = *(_OWORD *)(a2 + 200);
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
      *v12 = v42;
      *v13 = *(__n128 *)(a2 + 224);
      v43 = *(_OWORD *)(a2 + 240);
      *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
      *v14 = v43;
      *(_QWORD *)a2 = result.n128_u64[0];
      *(_OWORD *)(a2 + 24) = v107;
      *(_OWORD *)(a2 + 8) = v103;
      *(_OWORD *)(a2 + 72) = v119;
      *(_OWORD *)(a2 + 56) = v115;
      *(_OWORD *)(a2 + 40) = v111;
      *(_OWORD *)(a2 + 88) = v123;
      *(_OWORD *)(a2 + 104) = v99;
      *(_QWORD *)(a2 + 136) = v95;
      *(_OWORD *)(a2 + 120) = v91;
      *(_QWORD *)(a2 + 176) = v83;
      *(_OWORD *)(a2 + 144) = v87;
      *(_OWORD *)(a2 + 160) = v79;
      *(_OWORD *)(a2 + 184) = v75;
      *(_QWORD *)(a2 + 216) = v71;
      *(_OWORD *)(a2 + 200) = v67;
      *(_QWORD *)(a2 + 256) = v59;
      *(__n128 *)(a2 + 224) = v63;
      *(_OWORD *)(a2 + 240) = v55;
      if (*(double *)a3 >= result.n128_f64[0])
        return result;
      v12 = (__int128 *)(a2 + 200);
      v108 = *(_OWORD *)(a2 + 40);
      v112 = *(_OWORD *)(a2 + 56);
      v13 = (__n128 *)(a2 + 224);
      v14 = (__int128 *)(a2 + 240);
      v116 = *(_OWORD *)(a2 + 72);
      v120 = *(_OWORD *)(a2 + 88);
      v100 = *(_OWORD *)(a2 + 8);
      v104 = *(_OWORD *)(a2 + 24);
      v96 = *(_OWORD *)(a2 + 104);
      v92 = *(_QWORD *)(a2 + 136);
      v84 = *(_OWORD *)(a2 + 144);
      v88 = *(_OWORD *)(a2 + 120);
      v80 = *(_QWORD *)(a2 + 176);
      v72 = *(_OWORD *)(a2 + 184);
      v76 = *(_OWORD *)(a2 + 160);
      v68 = *(_QWORD *)(a2 + 216);
      v60 = *(__n128 *)(a2 + 224);
      v64 = *(_OWORD *)(a2 + 200);
      v56 = *(_QWORD *)(a2 + 256);
      v52 = *(_OWORD *)(a2 + 240);
      *(_QWORD *)a2 = *(_QWORD *)a3;
      v44 = *(_OWORD *)(a3 + 24);
      *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
      *(_OWORD *)(a2 + 24) = v44;
      v45 = *(_OWORD *)(a3 + 40);
      v46 = *(_OWORD *)(a3 + 56);
      v47 = *(_OWORD *)(a3 + 88);
      *(_OWORD *)(a2 + 72) = *(_OWORD *)(a3 + 72);
      *(_OWORD *)(a2 + 88) = v47;
      *(_OWORD *)(a2 + 40) = v45;
      *(_OWORD *)(a2 + 56) = v46;
      *(_OWORD *)(a2 + 104) = *(_OWORD *)(a3 + 104);
      v48 = *(_OWORD *)(a3 + 120);
      *(_QWORD *)(a2 + 136) = *(_QWORD *)(a3 + 136);
      *(_OWORD *)(a2 + 120) = v48;
      *(_OWORD *)(a2 + 144) = *(_OWORD *)(a3 + 144);
      v49 = *(_OWORD *)(a3 + 160);
      *(_QWORD *)(a2 + 176) = *(_QWORD *)(a3 + 176);
      *(_OWORD *)(a2 + 160) = v49;
      *(_OWORD *)(a2 + 184) = *(_OWORD *)(a3 + 184);
    }
    else
    {
      v108 = *(_OWORD *)(a1 + 40);
      v112 = *(_OWORD *)(a1 + 56);
      v116 = *(_OWORD *)(a1 + 72);
      v120 = *(_OWORD *)(a1 + 88);
      v100 = *v6;
      v104 = *(_OWORD *)(a1 + 24);
      v96 = *v7;
      v92 = *(_QWORD *)(a1 + 136);
      v84 = *v9;
      v88 = *v8;
      v80 = *(_QWORD *)(a1 + 176);
      v72 = *v11;
      v76 = *v10;
      v68 = *(_QWORD *)(a1 + 216);
      v60 = *v13;
      v64 = *v12;
      v56 = *(_QWORD *)(a1 + 256);
      v52 = *v14;
      *(double *)a1 = v5;
      v15 = *(_OWORD *)(a3 + 24);
      *v6 = *(_OWORD *)(a3 + 8);
      *(_OWORD *)(a1 + 24) = v15;
      v16 = *(_OWORD *)(a3 + 40);
      v17 = *(_OWORD *)(a3 + 56);
      v18 = *(_OWORD *)(a3 + 88);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a3 + 72);
      *(_OWORD *)(a1 + 88) = v18;
      *(_OWORD *)(a1 + 40) = v16;
      *(_OWORD *)(a1 + 56) = v17;
      *v7 = *(_OWORD *)(a3 + 104);
      v19 = *(_OWORD *)(a3 + 120);
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a3 + 136);
      *v8 = v19;
      *v9 = *(_OWORD *)(a3 + 144);
      v20 = *(_OWORD *)(a3 + 160);
      *(_QWORD *)(a1 + 176) = *(_QWORD *)(a3 + 176);
      *v10 = v20;
      *v11 = *(_OWORD *)(a3 + 184);
    }
    v50 = *(_OWORD *)(a3 + 200);
    *((_QWORD *)v12 + 2) = *(_QWORD *)(a3 + 216);
    *v12 = v50;
    *v13 = *(__n128 *)(a3 + 224);
    v51 = *(_OWORD *)(a3 + 240);
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a3 + 256);
    *v14 = v51;
    *(_QWORD *)a3 = result.n128_u64[0];
    *(_OWORD *)(a3 + 24) = v104;
    *(_OWORD *)(a3 + 8) = v100;
    *(_OWORD *)(a3 + 72) = v116;
    *(_OWORD *)(a3 + 56) = v112;
    *(_OWORD *)(a3 + 40) = v108;
    *(_OWORD *)(a3 + 88) = v120;
    *(_OWORD *)(a3 + 104) = v96;
    *(_QWORD *)(a3 + 136) = v92;
    *(_OWORD *)(a3 + 120) = v88;
    *(_QWORD *)(a3 + 176) = v80;
    *(_OWORD *)(a3 + 144) = v84;
    *(_OWORD *)(a3 + 160) = v76;
    *(_OWORD *)(a3 + 184) = v72;
    *(_QWORD *)(a3 + 216) = v68;
    *(_OWORD *)(a3 + 200) = v64;
    result = v60;
    *(_QWORD *)(a3 + 256) = v56;
    *(__n128 *)(a3 + 224) = v60;
    *(_OWORD *)(a3 + 240) = v52;
  }
  return result;
}

BOOL sub_20EB6CCB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  double v6;
  double v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  double *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  double *v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;

  v4 = 0xF83E0F83E0F83E1 * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(double *)(a2 - 264);
      v7 = *(double *)a1;
      if (v6 < *(double *)a1)
      {
        v60 = *(_OWORD *)(a1 + 40);
        v62 = *(_OWORD *)(a1 + 56);
        v64 = *(_OWORD *)(a1 + 72);
        v66 = *(_OWORD *)(a1 + 88);
        v56 = *(_OWORD *)(a1 + 8);
        v58 = *(_OWORD *)(a1 + 24);
        v54 = *(_OWORD *)(a1 + 104);
        v52 = *(_QWORD *)(a1 + 136);
        v48 = *(_OWORD *)(a1 + 144);
        v50 = *(_OWORD *)(a1 + 120);
        v46 = *(_QWORD *)(a1 + 176);
        v42 = *(_OWORD *)(a1 + 184);
        v44 = *(_OWORD *)(a1 + 160);
        v40 = *(_QWORD *)(a1 + 216);
        v36 = *(_OWORD *)(a1 + 224);
        v38 = *(_OWORD *)(a1 + 200);
        v34 = *(_QWORD *)(a1 + 256);
        v32 = *(_OWORD *)(a1 + 240);
        *(double *)a1 = v6;
        v8 = *(_OWORD *)(a2 - 256);
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 - 240);
        *(_OWORD *)(a1 + 8) = v8;
        v9 = *(_OWORD *)(a2 - 224);
        v10 = *(_OWORD *)(a2 - 208);
        v11 = *(_OWORD *)(a2 - 192);
        *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 - 176);
        *(_OWORD *)(a1 + 72) = v11;
        *(_OWORD *)(a1 + 56) = v10;
        *(_OWORD *)(a1 + 40) = v9;
        *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 - 160);
        v12 = *(_OWORD *)(a2 - 144);
        *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 - 128);
        *(_OWORD *)(a1 + 120) = v12;
        *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 - 120);
        v13 = *(_OWORD *)(a2 - 104);
        *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 - 88);
        *(_OWORD *)(a1 + 160) = v13;
        *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 - 80);
        v14 = *(_OWORD *)(a2 - 64);
        *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 200) = v14;
        *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 - 40);
        v15 = *(_OWORD *)(a2 - 24);
        *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 - 8);
        *(_OWORD *)(a1 + 240) = v15;
        *(double *)(a2 - 264) = v7;
        *(_OWORD *)(a2 - 256) = v56;
        *(_OWORD *)(a2 - 240) = v58;
        *(_OWORD *)(a2 - 224) = v60;
        *(_OWORD *)(a2 - 208) = v62;
        *(_OWORD *)(a2 - 192) = v64;
        *(_OWORD *)(a2 - 176) = v66;
        *(_QWORD *)(a2 - 128) = v52;
        *(_OWORD *)(a2 - 160) = v54;
        *(_OWORD *)(a2 - 144) = v50;
        *(_OWORD *)(a2 - 120) = v48;
        *(_QWORD *)(a2 - 88) = v46;
        *(_OWORD *)(a2 - 104) = v44;
        *(_QWORD *)(a2 - 48) = v40;
        *(_OWORD *)(a2 - 80) = v42;
        *(_OWORD *)(a2 - 64) = v38;
        *(_OWORD *)(a2 - 40) = v36;
        *(_QWORD *)(a2 - 8) = v34;
        *(_OWORD *)(a2 - 24) = v32;
      }
      return result;
    case 3:
      sub_20EB6C50C(a1, a1 + 264, a2 - 264);
      return 1;
    case 4:
      sub_20EB6D164(a1, a1 + 264, a1 + 528, a2 - 264);
      return 1;
    case 5:
      sub_20EB6D6B8(a1, a1 + 264, a1 + 528, a1 + 792, a2 - 264);
      return 1;
    default:
      v16 = (double *)(a1 + 528);
      sub_20EB6C50C(a1, a1 + 264, a1 + 528);
      v17 = a1 + 792;
      if (a1 + 792 == a2)
        return 1;
      v18 = 0;
      v19 = 528;
      break;
  }
  while (1)
  {
    v21 = *(double *)v17;
    if (*(double *)v17 < *v16)
    {
      v61 = *(_OWORD *)(v17 + 40);
      v63 = *(_OWORD *)(v17 + 56);
      v65 = *(_OWORD *)(v17 + 72);
      v67 = *(_OWORD *)(v17 + 88);
      v57 = *(_OWORD *)(v17 + 8);
      v59 = *(_OWORD *)(v17 + 24);
      v55 = *(_OWORD *)(v17 + 104);
      v49 = *(_OWORD *)(v17 + 144);
      v51 = *(_OWORD *)(v17 + 120);
      v43 = *(_OWORD *)(v17 + 184);
      v45 = *(_OWORD *)(v17 + 160);
      v37 = *(_OWORD *)(v17 + 224);
      v39 = *(_OWORD *)(v17 + 200);
      v53 = *(_QWORD *)(v17 + 136);
      v47 = *(_QWORD *)(v17 + 176);
      v41 = *(_QWORD *)(v17 + 216);
      v35 = *(_QWORD *)(v17 + 256);
      v33 = *(_OWORD *)(v17 + 240);
      v22 = v19;
      v23 = *v16;
      do
      {
        v24 = a1 + v22;
        *(double *)(v24 + 264) = v23;
        v25 = *(_OWORD *)(a1 + v22 + 56);
        *(_OWORD *)(v24 + 304) = *(_OWORD *)(a1 + v22 + 40);
        *(_OWORD *)(v24 + 320) = v25;
        v26 = *(_OWORD *)(a1 + v22 + 88);
        *(_OWORD *)(v24 + 336) = *(_OWORD *)(a1 + v22 + 72);
        *(_OWORD *)(v24 + 352) = v26;
        v27 = *(_OWORD *)(a1 + v22 + 24);
        *(_OWORD *)(v24 + 272) = *(_OWORD *)(a1 + v22 + 8);
        *(_OWORD *)(v24 + 288) = v27;
        v28 = *(_OWORD *)(a1 + v22 + 120);
        *(_OWORD *)(v24 + 368) = *(_OWORD *)(a1 + v22 + 104);
        *(_OWORD *)(v24 + 384) = v28;
        v29 = *(_OWORD *)(a1 + v22 + 160);
        *(_OWORD *)(a1 + v22 + 408) = *(_OWORD *)(a1 + v22 + 144);
        *(_OWORD *)(a1 + v22 + 424) = v29;
        v30 = *(_OWORD *)(a1 + v22 + 200);
        *(_OWORD *)(v24 + 448) = *(_OWORD *)(a1 + v22 + 184);
        *(_OWORD *)(v24 + 464) = v30;
        v31 = *(_OWORD *)(a1 + v22 + 240);
        *(_OWORD *)(a1 + v22 + 488) = *(_OWORD *)(a1 + v22 + 224);
        *(_QWORD *)(v24 + 400) = *(_QWORD *)(a1 + v22 + 136);
        *(_QWORD *)(v24 + 440) = *(_QWORD *)(a1 + v22 + 176);
        *(_QWORD *)(v24 + 480) = *(_QWORD *)(a1 + v22 + 216);
        *(_QWORD *)(v24 + 520) = *(_QWORD *)(a1 + v22 + 256);
        *(_OWORD *)(a1 + v22 + 504) = v31;
        if (!v22)
        {
          v20 = (double *)a1;
          goto LABEL_7;
        }
        v22 -= 264;
        v23 = *(double *)(v22 + a1);
      }
      while (v21 < v23);
      v20 = (double *)(a1 + v22 + 264);
LABEL_7:
      *v20 = v21;
      *(_OWORD *)(v24 + 40) = v61;
      *(_OWORD *)(v24 + 56) = v63;
      *(_OWORD *)(v24 + 72) = v65;
      *(_OWORD *)(v24 + 88) = v67;
      *(_OWORD *)(v24 + 8) = v57;
      *(_OWORD *)(v24 + 24) = v59;
      *(_OWORD *)(v24 + 104) = v55;
      *(_QWORD *)(v24 + 136) = v53;
      *(_OWORD *)(v24 + 120) = v51;
      *(_QWORD *)(v24 + 176) = v47;
      *(_OWORD *)(v24 + 144) = v49;
      *(_OWORD *)(v24 + 160) = v45;
      *(_OWORD *)(v24 + 184) = v43;
      *(_QWORD *)(v24 + 216) = v41;
      *(_OWORD *)(v24 + 200) = v39;
      *(_QWORD *)(v24 + 256) = v35;
      ++v18;
      *(_OWORD *)(v24 + 224) = v37;
      *(_OWORD *)(v24 + 240) = v33;
      if (v18 == 8)
        return v17 + 264 == a2;
    }
    v16 = (double *)v17;
    v19 += 264;
    v17 += 264;
    if (v17 == a2)
      return 1;
  }
}

__n128 sub_20EB6D164(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;

  sub_20EB6C50C(a1, a2, a3);
  result.n128_u64[0] = *(_QWORD *)a3;
  if (*(double *)a4 < *(double *)a3)
  {
    v75 = *(_OWORD *)(a3 + 40);
    v78 = *(_OWORD *)(a3 + 56);
    v81 = *(_OWORD *)(a3 + 72);
    v84 = *(_OWORD *)(a3 + 88);
    v69 = *(_OWORD *)(a3 + 8);
    v72 = *(_OWORD *)(a3 + 24);
    v66 = *(_OWORD *)(a3 + 104);
    v63 = *(_QWORD *)(a3 + 136);
    v57 = *(_OWORD *)(a3 + 144);
    v60 = *(_OWORD *)(a3 + 120);
    v54 = *(_QWORD *)(a3 + 176);
    v48 = *(_OWORD *)(a3 + 184);
    v51 = *(_OWORD *)(a3 + 160);
    v45 = *(_QWORD *)(a3 + 216);
    v39 = *(_OWORD *)(a3 + 224);
    v42 = *(_OWORD *)(a3 + 200);
    v36 = *(_QWORD *)(a3 + 256);
    v33 = *(_OWORD *)(a3 + 240);
    *(_QWORD *)a3 = *(_QWORD *)a4;
    v9 = *(_OWORD *)(a4 + 8);
    *(_OWORD *)(a3 + 24) = *(_OWORD *)(a4 + 24);
    *(_OWORD *)(a3 + 8) = v9;
    v10 = *(_OWORD *)(a4 + 40);
    v11 = *(_OWORD *)(a4 + 56);
    v12 = *(_OWORD *)(a4 + 72);
    *(_OWORD *)(a3 + 88) = *(_OWORD *)(a4 + 88);
    *(_OWORD *)(a3 + 72) = v12;
    *(_OWORD *)(a3 + 56) = v11;
    *(_OWORD *)(a3 + 40) = v10;
    *(_OWORD *)(a3 + 104) = *(_OWORD *)(a4 + 104);
    v13 = *(_OWORD *)(a4 + 120);
    *(_QWORD *)(a3 + 136) = *(_QWORD *)(a4 + 136);
    *(_OWORD *)(a3 + 120) = v13;
    *(_OWORD *)(a3 + 144) = *(_OWORD *)(a4 + 144);
    v14 = *(_OWORD *)(a4 + 160);
    *(_QWORD *)(a3 + 176) = *(_QWORD *)(a4 + 176);
    *(_OWORD *)(a3 + 160) = v14;
    *(_OWORD *)(a3 + 184) = *(_OWORD *)(a4 + 184);
    v15 = *(_OWORD *)(a4 + 200);
    *(_QWORD *)(a3 + 216) = *(_QWORD *)(a4 + 216);
    *(_OWORD *)(a3 + 200) = v15;
    *(_OWORD *)(a3 + 224) = *(_OWORD *)(a4 + 224);
    v16 = *(_OWORD *)(a4 + 240);
    *(_QWORD *)(a3 + 256) = *(_QWORD *)(a4 + 256);
    *(_OWORD *)(a3 + 240) = v16;
    *(_QWORD *)a4 = result.n128_u64[0];
    *(_OWORD *)(a4 + 24) = v72;
    *(_OWORD *)(a4 + 8) = v69;
    *(_OWORD *)(a4 + 72) = v81;
    *(_OWORD *)(a4 + 56) = v78;
    *(_OWORD *)(a4 + 40) = v75;
    *(_OWORD *)(a4 + 88) = v84;
    *(_OWORD *)(a4 + 104) = v66;
    *(_QWORD *)(a4 + 136) = v63;
    *(_OWORD *)(a4 + 120) = v60;
    *(_QWORD *)(a4 + 176) = v54;
    *(_OWORD *)(a4 + 144) = v57;
    *(_OWORD *)(a4 + 160) = v51;
    *(_OWORD *)(a4 + 184) = v48;
    *(_QWORD *)(a4 + 216) = v45;
    *(_OWORD *)(a4 + 200) = v42;
    *(_QWORD *)(a4 + 256) = v36;
    *(_OWORD *)(a4 + 224) = v39;
    *(_OWORD *)(a4 + 240) = v33;
    result.n128_u64[0] = *(_QWORD *)a2;
    if (*(double *)a3 < *(double *)a2)
    {
      v76 = *(_OWORD *)(a2 + 40);
      v79 = *(_OWORD *)(a2 + 56);
      v82 = *(_OWORD *)(a2 + 72);
      v85 = *(_OWORD *)(a2 + 88);
      v70 = *(_OWORD *)(a2 + 8);
      v73 = *(_OWORD *)(a2 + 24);
      v67 = *(_OWORD *)(a2 + 104);
      v64 = *(_QWORD *)(a2 + 136);
      v58 = *(_OWORD *)(a2 + 144);
      v61 = *(_OWORD *)(a2 + 120);
      v55 = *(_QWORD *)(a2 + 176);
      v49 = *(_OWORD *)(a2 + 184);
      v52 = *(_OWORD *)(a2 + 160);
      v46 = *(_QWORD *)(a2 + 216);
      v40 = *(_OWORD *)(a2 + 224);
      v43 = *(_OWORD *)(a2 + 200);
      v37 = *(_QWORD *)(a2 + 256);
      v34 = *(_OWORD *)(a2 + 240);
      *(_QWORD *)a2 = *(_QWORD *)a3;
      v17 = *(_OWORD *)(a3 + 8);
      *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
      *(_OWORD *)(a2 + 8) = v17;
      v18 = *(_OWORD *)(a3 + 40);
      v19 = *(_OWORD *)(a3 + 56);
      v20 = *(_OWORD *)(a3 + 72);
      *(_OWORD *)(a2 + 88) = *(_OWORD *)(a3 + 88);
      *(_OWORD *)(a2 + 72) = v20;
      *(_OWORD *)(a2 + 56) = v19;
      *(_OWORD *)(a2 + 40) = v18;
      *(_OWORD *)(a2 + 104) = *(_OWORD *)(a3 + 104);
      v21 = *(_OWORD *)(a3 + 120);
      *(_QWORD *)(a2 + 136) = *(_QWORD *)(a3 + 136);
      *(_OWORD *)(a2 + 120) = v21;
      *(_OWORD *)(a2 + 144) = *(_OWORD *)(a3 + 144);
      v22 = *(_OWORD *)(a3 + 160);
      *(_QWORD *)(a2 + 176) = *(_QWORD *)(a3 + 176);
      *(_OWORD *)(a2 + 160) = v22;
      *(_OWORD *)(a2 + 184) = *(_OWORD *)(a3 + 184);
      v23 = *(_OWORD *)(a3 + 200);
      *(_QWORD *)(a2 + 216) = *(_QWORD *)(a3 + 216);
      *(_OWORD *)(a2 + 200) = v23;
      *(_OWORD *)(a2 + 224) = *(_OWORD *)(a3 + 224);
      v24 = *(_OWORD *)(a3 + 240);
      *(_QWORD *)(a2 + 256) = *(_QWORD *)(a3 + 256);
      *(_OWORD *)(a2 + 240) = v24;
      *(_QWORD *)a3 = result.n128_u64[0];
      *(_OWORD *)(a3 + 72) = v82;
      *(_OWORD *)(a3 + 88) = v85;
      *(_OWORD *)(a3 + 40) = v76;
      *(_OWORD *)(a3 + 56) = v79;
      *(_OWORD *)(a3 + 8) = v70;
      *(_OWORD *)(a3 + 24) = v73;
      *(_OWORD *)(a3 + 104) = v67;
      *(_QWORD *)(a3 + 136) = v64;
      *(_OWORD *)(a3 + 120) = v61;
      *(_OWORD *)(a3 + 144) = v58;
      *(_QWORD *)(a3 + 176) = v55;
      *(_OWORD *)(a3 + 160) = v52;
      *(_OWORD *)(a3 + 184) = v49;
      *(_QWORD *)(a3 + 216) = v46;
      *(_OWORD *)(a3 + 200) = v43;
      *(_OWORD *)(a3 + 224) = v40;
      *(_QWORD *)(a3 + 256) = v37;
      *(_OWORD *)(a3 + 240) = v34;
      result.n128_u64[0] = *(_QWORD *)a1;
      if (*(double *)a2 < *(double *)a1)
      {
        v77 = *(_OWORD *)(a1 + 40);
        v80 = *(_OWORD *)(a1 + 56);
        v83 = *(_OWORD *)(a1 + 72);
        v86 = *(_OWORD *)(a1 + 88);
        v71 = *(_OWORD *)(a1 + 8);
        v74 = *(_OWORD *)(a1 + 24);
        v68 = *(_OWORD *)(a1 + 104);
        v65 = *(_QWORD *)(a1 + 136);
        v59 = *(_OWORD *)(a1 + 144);
        v62 = *(_OWORD *)(a1 + 120);
        v56 = *(_QWORD *)(a1 + 176);
        v50 = *(_OWORD *)(a1 + 184);
        v53 = *(_OWORD *)(a1 + 160);
        v47 = *(_QWORD *)(a1 + 216);
        v41 = *(_OWORD *)(a1 + 224);
        v44 = *(_OWORD *)(a1 + 200);
        v38 = *(_QWORD *)(a1 + 256);
        v35 = *(__n128 *)(a1 + 240);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v25 = *(_OWORD *)(a2 + 8);
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 8) = v25;
        v26 = *(_OWORD *)(a2 + 40);
        v27 = *(_OWORD *)(a2 + 56);
        v28 = *(_OWORD *)(a2 + 72);
        *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
        *(_OWORD *)(a1 + 72) = v28;
        *(_OWORD *)(a1 + 56) = v27;
        *(_OWORD *)(a1 + 40) = v26;
        *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
        v29 = *(_OWORD *)(a2 + 120);
        *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
        *(_OWORD *)(a1 + 120) = v29;
        *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
        v30 = *(_OWORD *)(a2 + 160);
        *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
        *(_OWORD *)(a1 + 160) = v30;
        *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
        v31 = *(_OWORD *)(a2 + 200);
        *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
        *(_OWORD *)(a1 + 200) = v31;
        *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
        v32 = *(_OWORD *)(a2 + 240);
        *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
        *(_OWORD *)(a1 + 240) = v32;
        *(_QWORD *)a2 = result.n128_u64[0];
        *(_OWORD *)(a2 + 72) = v83;
        *(_OWORD *)(a2 + 88) = v86;
        *(_OWORD *)(a2 + 40) = v77;
        *(_OWORD *)(a2 + 56) = v80;
        *(_OWORD *)(a2 + 8) = v71;
        *(_OWORD *)(a2 + 24) = v74;
        *(_OWORD *)(a2 + 104) = v68;
        *(_QWORD *)(a2 + 136) = v65;
        *(_OWORD *)(a2 + 120) = v62;
        *(_OWORD *)(a2 + 144) = v59;
        *(_QWORD *)(a2 + 176) = v56;
        *(_OWORD *)(a2 + 160) = v53;
        *(_OWORD *)(a2 + 184) = v50;
        *(_QWORD *)(a2 + 216) = v47;
        *(_OWORD *)(a2 + 200) = v44;
        *(_OWORD *)(a2 + 224) = v41;
        result = v35;
        *(_QWORD *)(a2 + 256) = v38;
        *(__n128 *)(a2 + 240) = v35;
      }
    }
  }
  return result;
}

__n128 sub_20EB6D6B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __n128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;

  sub_20EB6D164(a1, a2, a3, a4);
  result.n128_u64[0] = *(_QWORD *)a4;
  if (*(double *)a5 < *(double *)a4)
  {
    v99 = *(_OWORD *)(a4 + 40);
    v103 = *(_OWORD *)(a4 + 56);
    v107 = *(_OWORD *)(a4 + 72);
    v111 = *(_OWORD *)(a4 + 88);
    v91 = *(_OWORD *)(a4 + 8);
    v95 = *(_OWORD *)(a4 + 24);
    v87 = *(_OWORD *)(a4 + 104);
    v83 = *(_QWORD *)(a4 + 136);
    v75 = *(_OWORD *)(a4 + 144);
    v79 = *(_OWORD *)(a4 + 120);
    v71 = *(_QWORD *)(a4 + 176);
    v63 = *(_OWORD *)(a4 + 184);
    v67 = *(_OWORD *)(a4 + 160);
    v59 = *(_QWORD *)(a4 + 216);
    v51 = *(_OWORD *)(a4 + 224);
    v55 = *(_OWORD *)(a4 + 200);
    v47 = *(_QWORD *)(a4 + 256);
    v43 = *(_OWORD *)(a4 + 240);
    *(_QWORD *)a4 = *(_QWORD *)a5;
    v11 = *(_OWORD *)(a5 + 8);
    *(_OWORD *)(a4 + 24) = *(_OWORD *)(a5 + 24);
    *(_OWORD *)(a4 + 8) = v11;
    v12 = *(_OWORD *)(a5 + 40);
    v13 = *(_OWORD *)(a5 + 56);
    v14 = *(_OWORD *)(a5 + 72);
    *(_OWORD *)(a4 + 88) = *(_OWORD *)(a5 + 88);
    *(_OWORD *)(a4 + 72) = v14;
    *(_OWORD *)(a4 + 56) = v13;
    *(_OWORD *)(a4 + 40) = v12;
    *(_OWORD *)(a4 + 104) = *(_OWORD *)(a5 + 104);
    v15 = *(_OWORD *)(a5 + 120);
    *(_QWORD *)(a4 + 136) = *(_QWORD *)(a5 + 136);
    *(_OWORD *)(a4 + 120) = v15;
    *(_OWORD *)(a4 + 144) = *(_OWORD *)(a5 + 144);
    v16 = *(_OWORD *)(a5 + 160);
    *(_QWORD *)(a4 + 176) = *(_QWORD *)(a5 + 176);
    *(_OWORD *)(a4 + 160) = v16;
    *(_OWORD *)(a4 + 184) = *(_OWORD *)(a5 + 184);
    v17 = *(_OWORD *)(a5 + 200);
    *(_QWORD *)(a4 + 216) = *(_QWORD *)(a5 + 216);
    *(_OWORD *)(a4 + 200) = v17;
    *(_OWORD *)(a4 + 224) = *(_OWORD *)(a5 + 224);
    v18 = *(_OWORD *)(a5 + 240);
    *(_QWORD *)(a4 + 256) = *(_QWORD *)(a5 + 256);
    *(_OWORD *)(a4 + 240) = v18;
    *(_QWORD *)a5 = result.n128_u64[0];
    *(_OWORD *)(a5 + 24) = v95;
    *(_OWORD *)(a5 + 8) = v91;
    *(_OWORD *)(a5 + 72) = v107;
    *(_OWORD *)(a5 + 56) = v103;
    *(_OWORD *)(a5 + 40) = v99;
    *(_OWORD *)(a5 + 88) = v111;
    *(_OWORD *)(a5 + 104) = v87;
    *(_QWORD *)(a5 + 136) = v83;
    *(_OWORD *)(a5 + 120) = v79;
    *(_QWORD *)(a5 + 176) = v71;
    *(_OWORD *)(a5 + 144) = v75;
    *(_OWORD *)(a5 + 160) = v67;
    *(_OWORD *)(a5 + 184) = v63;
    *(_QWORD *)(a5 + 216) = v59;
    *(_OWORD *)(a5 + 200) = v55;
    *(_QWORD *)(a5 + 256) = v47;
    *(_OWORD *)(a5 + 224) = v51;
    *(_OWORD *)(a5 + 240) = v43;
    result.n128_u64[0] = *(_QWORD *)a3;
    if (*(double *)a4 < *(double *)a3)
    {
      v100 = *(_OWORD *)(a3 + 40);
      v104 = *(_OWORD *)(a3 + 56);
      v108 = *(_OWORD *)(a3 + 72);
      v112 = *(_OWORD *)(a3 + 88);
      v92 = *(_OWORD *)(a3 + 8);
      v96 = *(_OWORD *)(a3 + 24);
      v88 = *(_OWORD *)(a3 + 104);
      v84 = *(_QWORD *)(a3 + 136);
      v76 = *(_OWORD *)(a3 + 144);
      v80 = *(_OWORD *)(a3 + 120);
      v72 = *(_QWORD *)(a3 + 176);
      v64 = *(_OWORD *)(a3 + 184);
      v68 = *(_OWORD *)(a3 + 160);
      v60 = *(_QWORD *)(a3 + 216);
      v52 = *(_OWORD *)(a3 + 224);
      v56 = *(_OWORD *)(a3 + 200);
      v48 = *(_QWORD *)(a3 + 256);
      v44 = *(_OWORD *)(a3 + 240);
      *(_QWORD *)a3 = *(_QWORD *)a4;
      v19 = *(_OWORD *)(a4 + 8);
      *(_OWORD *)(a3 + 24) = *(_OWORD *)(a4 + 24);
      *(_OWORD *)(a3 + 8) = v19;
      v20 = *(_OWORD *)(a4 + 40);
      v21 = *(_OWORD *)(a4 + 56);
      v22 = *(_OWORD *)(a4 + 72);
      *(_OWORD *)(a3 + 88) = *(_OWORD *)(a4 + 88);
      *(_OWORD *)(a3 + 72) = v22;
      *(_OWORD *)(a3 + 56) = v21;
      *(_OWORD *)(a3 + 40) = v20;
      *(_OWORD *)(a3 + 104) = *(_OWORD *)(a4 + 104);
      v23 = *(_OWORD *)(a4 + 120);
      *(_QWORD *)(a3 + 136) = *(_QWORD *)(a4 + 136);
      *(_OWORD *)(a3 + 120) = v23;
      *(_OWORD *)(a3 + 144) = *(_OWORD *)(a4 + 144);
      v24 = *(_OWORD *)(a4 + 160);
      *(_QWORD *)(a3 + 176) = *(_QWORD *)(a4 + 176);
      *(_OWORD *)(a3 + 160) = v24;
      *(_OWORD *)(a3 + 184) = *(_OWORD *)(a4 + 184);
      v25 = *(_OWORD *)(a4 + 200);
      *(_QWORD *)(a3 + 216) = *(_QWORD *)(a4 + 216);
      *(_OWORD *)(a3 + 200) = v25;
      *(_OWORD *)(a3 + 224) = *(_OWORD *)(a4 + 224);
      v26 = *(_OWORD *)(a4 + 240);
      *(_QWORD *)(a3 + 256) = *(_QWORD *)(a4 + 256);
      *(_OWORD *)(a3 + 240) = v26;
      *(_QWORD *)a4 = result.n128_u64[0];
      *(_OWORD *)(a4 + 72) = v108;
      *(_OWORD *)(a4 + 88) = v112;
      *(_OWORD *)(a4 + 40) = v100;
      *(_OWORD *)(a4 + 56) = v104;
      *(_OWORD *)(a4 + 8) = v92;
      *(_OWORD *)(a4 + 24) = v96;
      *(_OWORD *)(a4 + 104) = v88;
      *(_QWORD *)(a4 + 136) = v84;
      *(_OWORD *)(a4 + 120) = v80;
      *(_OWORD *)(a4 + 144) = v76;
      *(_QWORD *)(a4 + 176) = v72;
      *(_OWORD *)(a4 + 160) = v68;
      *(_OWORD *)(a4 + 184) = v64;
      *(_QWORD *)(a4 + 216) = v60;
      *(_OWORD *)(a4 + 200) = v56;
      *(_OWORD *)(a4 + 224) = v52;
      *(_QWORD *)(a4 + 256) = v48;
      *(_OWORD *)(a4 + 240) = v44;
      result.n128_u64[0] = *(_QWORD *)a2;
      if (*(double *)a3 < *(double *)a2)
      {
        v101 = *(_OWORD *)(a2 + 40);
        v105 = *(_OWORD *)(a2 + 56);
        v109 = *(_OWORD *)(a2 + 72);
        v113 = *(_OWORD *)(a2 + 88);
        v93 = *(_OWORD *)(a2 + 8);
        v97 = *(_OWORD *)(a2 + 24);
        v89 = *(_OWORD *)(a2 + 104);
        v85 = *(_QWORD *)(a2 + 136);
        v77 = *(_OWORD *)(a2 + 144);
        v81 = *(_OWORD *)(a2 + 120);
        v73 = *(_QWORD *)(a2 + 176);
        v65 = *(_OWORD *)(a2 + 184);
        v69 = *(_OWORD *)(a2 + 160);
        v61 = *(_QWORD *)(a2 + 216);
        v53 = *(_OWORD *)(a2 + 224);
        v57 = *(_OWORD *)(a2 + 200);
        v49 = *(_QWORD *)(a2 + 256);
        v45 = *(_OWORD *)(a2 + 240);
        *(_QWORD *)a2 = *(_QWORD *)a3;
        v27 = *(_OWORD *)(a3 + 8);
        *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
        *(_OWORD *)(a2 + 8) = v27;
        v28 = *(_OWORD *)(a3 + 40);
        v29 = *(_OWORD *)(a3 + 56);
        v30 = *(_OWORD *)(a3 + 72);
        *(_OWORD *)(a2 + 88) = *(_OWORD *)(a3 + 88);
        *(_OWORD *)(a2 + 72) = v30;
        *(_OWORD *)(a2 + 56) = v29;
        *(_OWORD *)(a2 + 40) = v28;
        *(_OWORD *)(a2 + 104) = *(_OWORD *)(a3 + 104);
        v31 = *(_OWORD *)(a3 + 120);
        *(_QWORD *)(a2 + 136) = *(_QWORD *)(a3 + 136);
        *(_OWORD *)(a2 + 120) = v31;
        *(_OWORD *)(a2 + 144) = *(_OWORD *)(a3 + 144);
        v32 = *(_OWORD *)(a3 + 160);
        *(_QWORD *)(a2 + 176) = *(_QWORD *)(a3 + 176);
        *(_OWORD *)(a2 + 160) = v32;
        *(_OWORD *)(a2 + 184) = *(_OWORD *)(a3 + 184);
        v33 = *(_OWORD *)(a3 + 200);
        *(_QWORD *)(a2 + 216) = *(_QWORD *)(a3 + 216);
        *(_OWORD *)(a2 + 200) = v33;
        *(_OWORD *)(a2 + 224) = *(_OWORD *)(a3 + 224);
        v34 = *(_OWORD *)(a3 + 240);
        *(_QWORD *)(a2 + 256) = *(_QWORD *)(a3 + 256);
        *(_OWORD *)(a2 + 240) = v34;
        *(_QWORD *)a3 = result.n128_u64[0];
        *(_OWORD *)(a3 + 72) = v109;
        *(_OWORD *)(a3 + 88) = v113;
        *(_OWORD *)(a3 + 40) = v101;
        *(_OWORD *)(a3 + 56) = v105;
        *(_OWORD *)(a3 + 8) = v93;
        *(_OWORD *)(a3 + 24) = v97;
        *(_OWORD *)(a3 + 104) = v89;
        *(_QWORD *)(a3 + 136) = v85;
        *(_OWORD *)(a3 + 120) = v81;
        *(_OWORD *)(a3 + 144) = v77;
        *(_QWORD *)(a3 + 176) = v73;
        *(_OWORD *)(a3 + 160) = v69;
        *(_OWORD *)(a3 + 184) = v65;
        *(_QWORD *)(a3 + 216) = v61;
        *(_OWORD *)(a3 + 200) = v57;
        *(_OWORD *)(a3 + 224) = v53;
        *(_QWORD *)(a3 + 256) = v49;
        *(_OWORD *)(a3 + 240) = v45;
        result.n128_u64[0] = *(_QWORD *)a1;
        if (*(double *)a2 < *(double *)a1)
        {
          v102 = *(_OWORD *)(a1 + 40);
          v106 = *(_OWORD *)(a1 + 56);
          v110 = *(_OWORD *)(a1 + 72);
          v114 = *(_OWORD *)(a1 + 88);
          v94 = *(_OWORD *)(a1 + 8);
          v98 = *(_OWORD *)(a1 + 24);
          v90 = *(_OWORD *)(a1 + 104);
          v86 = *(_QWORD *)(a1 + 136);
          v78 = *(_OWORD *)(a1 + 144);
          v82 = *(_OWORD *)(a1 + 120);
          v74 = *(_QWORD *)(a1 + 176);
          v66 = *(_OWORD *)(a1 + 184);
          v70 = *(_OWORD *)(a1 + 160);
          v62 = *(_QWORD *)(a1 + 216);
          v54 = *(_OWORD *)(a1 + 224);
          v58 = *(_OWORD *)(a1 + 200);
          v50 = *(_QWORD *)(a1 + 256);
          v46 = *(__n128 *)(a1 + 240);
          *(_QWORD *)a1 = *(_QWORD *)a2;
          v35 = *(_OWORD *)(a2 + 8);
          *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
          *(_OWORD *)(a1 + 8) = v35;
          v36 = *(_OWORD *)(a2 + 40);
          v37 = *(_OWORD *)(a2 + 56);
          v38 = *(_OWORD *)(a2 + 72);
          *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
          *(_OWORD *)(a1 + 72) = v38;
          *(_OWORD *)(a1 + 56) = v37;
          *(_OWORD *)(a1 + 40) = v36;
          *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
          v39 = *(_OWORD *)(a2 + 120);
          *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
          *(_OWORD *)(a1 + 120) = v39;
          *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
          v40 = *(_OWORD *)(a2 + 160);
          *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
          *(_OWORD *)(a1 + 160) = v40;
          *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
          v41 = *(_OWORD *)(a2 + 200);
          *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
          *(_OWORD *)(a1 + 200) = v41;
          *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
          v42 = *(_OWORD *)(a2 + 240);
          *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
          *(_OWORD *)(a1 + 240) = v42;
          *(_QWORD *)a2 = result.n128_u64[0];
          *(_OWORD *)(a2 + 72) = v110;
          *(_OWORD *)(a2 + 88) = v114;
          *(_OWORD *)(a2 + 40) = v102;
          *(_OWORD *)(a2 + 56) = v106;
          *(_OWORD *)(a2 + 8) = v94;
          *(_OWORD *)(a2 + 24) = v98;
          *(_OWORD *)(a2 + 104) = v90;
          *(_QWORD *)(a2 + 136) = v86;
          *(_OWORD *)(a2 + 120) = v82;
          *(_OWORD *)(a2 + 144) = v78;
          *(_QWORD *)(a2 + 176) = v74;
          *(_OWORD *)(a2 + 160) = v70;
          *(_OWORD *)(a2 + 184) = v66;
          *(_QWORD *)(a2 + 216) = v62;
          *(_OWORD *)(a2 + 200) = v58;
          *(_OWORD *)(a2 + 224) = v54;
          result = v46;
          *(_QWORD *)(a2 + 256) = v50;
          *(__n128 *)(a2 + 240) = v46;
        }
      }
    }
  }
  return result;
}

void sub_20EB6DDB8(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20EB6E148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EB6E16C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EB6E180(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void *sub_20EB6E1A4@<X0>(void *result@<X0>, __int128 **a2@<X1>, _QWORD *a3@<X8>)
{
  __int128 *v5;
  __int128 *v6;
  uint64_t v7;
  __int128 **v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __int128 *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;

  v6 = *(__int128 **)result;
  v5 = (__int128 *)*((_QWORD *)result + 1);
  v7 = (uint64_t)v5 - *(_QWORD *)result;
  if (v7 != (char *)a2[1] - (char *)*a2)
  {
    v8 = (__int128 **)result;
    result = (void *)sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/RANSAC/Points3dPreemptiveRansac.cpp", 29, (uint64_t)"pts_A.size() == pts_B.size()", 28, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    if ((result & 1) != 0)
      abort();
    v6 = *v8;
    v5 = v8[1];
    v7 = (char *)v5 - (char *)*v8;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (v5 != v6)
  {
    v9 = v7;
    v10 = v7 / 24;
    if ((unint64_t)(v7 / 24) >= 0x555555555555556)
      sub_20EB70DEC();
    result = operator new(48 * v10);
    *a3 = result;
    a3[1] = (char *)result + 48 * v10;
    a3[2] = (char *)result + 48 * v10;
    if (v10 <= 1)
      v11 = 1;
    else
      v11 = v9 / 24;
    v12 = *a2;
    do
    {
      v13 = *v12;
      v14 = *((_QWORD *)v12 + 2);
      v15 = *((_QWORD *)v6 + 2);
      v16 = *v6;
      v6 = (__int128 *)((char *)v6 + 24);
      *(_OWORD *)result = v16;
      *((_QWORD *)result + 2) = v15;
      *(_OWORD *)((char *)result + 24) = v13;
      *((_QWORD *)result + 5) = v14;
      result = (char *)result + 48;
      v12 = (__int128 *)((char *)v12 + 24);
      --v11;
    }
    while (v11);
  }
  return result;
}

void sub_20EB6E2F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EB6E30C(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int8x16_t *a4@<X8>, float64x2_t a5@<Q0>, float64x2_t a6@<Q4>)
{
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  double v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  __int128 v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  unsigned int v24;
  char *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  __n128 *v35;
  __n128 *v36;
  char *v37;
  double v38;
  __n128 *v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  __n128 *v46;
  float64x2_t *v47;
  char *v48;
  char v49;
  double v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  unint64_t v54;
  __n128 *v55;
  unint64_t v56;
  uint64_t v57;
  double v58;
  unint64_t v59;
  float64x2_t v66;
  double v67;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  double *v72;
  unint64_t v73;
  uint64_t v74;
  double *v75;
  double v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  double v83;
  double v84;
  double v85;
  int8x16_t *v86;
  int8x16_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  int8x16_t v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  int8x16_t v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  int v103;
  double v104;
  unint64_t v105;
  unint64_t *v106;
  unint64_t *v107;
  double v108;
  unint64_t *v109;
  double v110;
  double v111;
  int8x16_t v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  int8x16_t v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  float64x2_t v128;
  uint64_t v129;
  int8x16_t v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  int8x16_t v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  double v147;
  uint64_t v148;
  int8x16_t v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  int8x16_t v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  int8x16_t v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  uint64_t v172;
  __int128 v173;
  __int128 v174;
  int8x16_t v175;
  __int128 v176;
  __int128 v177;
  int8x16_t v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  float64x2_t v183;
  double v184;
  int8x16_t v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  int8x16_t v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  int8x16_t v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  int8x16_t v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  float64x2_t v217;
  int8x16_t v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  int8x16_t v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  float64x2_t v234;
  unint64_t v235;
  double v236;
  uint64_t v237;
  double v238;
  unint64_t *v239;
  double v240;
  int8x16_t v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  int8x16_t v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  double v258;
  double v259;
  double v260;
  int8x16_t v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  int8x16_t v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  float64x2_t v277;
  double v278;
  double v279;
  uint64_t v280;
  int8x16_t v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  int8x16_t v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  uint64_t v299;
  double v300;
  uint64_t v301;
  uint64_t v302;
  double *v303;
  double v304;
  double v305;
  int8x16_t v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  int8x16_t v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  float64x2_t v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  int8x16_t v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  double v337;
  int8x16_t v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  __int128 v346;
  __int128 v347;
  int8x16_t v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  int8x16_t v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  int8x16_t v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  double v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  int8x16_t v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  unint64_t v384;
  unint64_t v385;
  unint64_t v386;
  unint64_t v387;
  char *v388;
  unint64_t v389;
  unint64_t v390;
  uint64_t v391;
  uint64_t v392;
  __int128 v393;
  __int128 v394;
  __int128 v395;
  __int128 v396;
  __int128 v397;
  unint64_t v398;
  int8x16_t *v399;
  double *v400;
  unint64_t v401;
  uint64_t v402;
  double *v403;
  double v404;
  unint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v410;
  double v411;
  uint64_t v412;
  _QWORD *v413;
  char *v414;
  uint64_t v415;
  __int128 v416;
  __int128 v417;
  __int128 v418;
  __int128 v419;
  __int128 v420;
  char *v421;
  unint64_t v423;
  unint64_t i;
  unint64_t v425;
  char *v426;
  char *v427;
  char *v428;
  char *v429;
  char *v430;
  float64x2_t v431;
  unint64_t v432;
  unint64_t v433;
  char *v434;
  __int128 v435;
  char *v436;
  __int128 v437;
  __int128 v438;
  __int128 v439;
  char *v440;
  uint64_t v441;
  __int128 v442;
  __int128 v443;
  __int128 v444;
  __int128 v445;
  __int128 v446;
  _QWORD *v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  unint64_t v451;
  uint64_t v452;
  double v453;
  float64x2_t v454;
  float64x2_t v455;
  float64x2_t v456;
  float64x2_t v457;
  float64x2_t v458;
  void *v459;
  uint64_t v460;
  float64x2_t v464;
  _QWORD *v466;
  _BYTE *v467;
  int64_t v468;
  uint64_t v469;
  unint64_t v470;
  uint64_t v471;
  unint64_t v472;
  _BYTE *v473;
  _QWORD *v474;
  int64_t v475;
  unint64_t v476;
  _QWORD *v477;
  uint64_t v478;
  unint64_t v479;
  uint64_t v480;
  uint64_t v481;
  float64x2_t *v482;
  float64x2_t *v483;
  uint64_t v484;
  uint64_t *v485;
  uint64_t v486;
  int8x16_t *v487;
  unint64_t v488;
  size_t v489;
  float64x2_t *v490;
  float64x2_t *v491;
  float64x2_t *v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  __int128 *v496;
  char *v497;
  __int128 v498;
  uint64_t v499;
  uint64_t v500;
  char *v501;
  __int128 v502;
  int8x16_t v503;
  unint64_t v504;
  uint64_t v505;
  uint64_t v506;
  int8x16_t v507;
  unint64_t v508;
  uint64_t v509;
  uint64_t v510;
  int8x16_t v511;
  unint64_t v512;
  uint64_t v513;
  uint64_t v514;
  int8x16_t v515;
  unint64_t v516;
  uint64_t v517;
  uint64_t v518;
  void *v519;
  void *v520;
  int8x16_t v521;
  uint64_t v522;
  uint64_t v523;
  _QWORD *v524;
  unint64_t v526;
  unint64_t v527;
  int8x16_t v528;
  unint64_t v529;
  __n128 *v530;
  __n128 *v531;
  int8x16_t v532;
  unsigned int v533;
  unsigned int v534;
  unint64_t v535;
  char *v536;
  int8x16_t v537;
  unint64_t v538;
  char *__p;
  uint64_t __pa;
  unint64_t __pb;
  unint64_t v542;
  int8x16_t v543;
  uint64_t v544;
  int8x16_t v545;
  unint64_t v546;
  unint64_t v547;
  int8x16_t v548;
  float64x2_t v549;
  uint64_t v550;
  float64x2_t v551;
  float64x2_t v552;
  unint64_t v553;
  unint64_t v554;
  float64x2_t v555;
  float64x2_t v556;
  uint64_t v557;
  double v558;
  float64x2_t v559;
  uint64_t v560;
  float64x2_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  float64x2_t v567;
  double v568;
  uint64_t v569;
  unint64_t v570;
  float64x2_t v571;
  uint64_t v572;
  char *v573;
  char *v574;
  void *v575[2];
  __int128 v576;
  __int128 v577;
  __int128 v578;
  __int128 v579;
  __int128 v580;
  __int128 v581;
  __int128 v582;
  int8x16_t v583;
  _BYTE v584[32];
  __int128 v585;
  _BYTE v586[32];
  float64x2_t v587;
  _BYTE v588[24];
  uint64_t v589;
  __int128 v590;
  __int128 v591;
  __int128 v592;
  __int128 v593;
  __int128 v594;
  __int128 v595;
  __int128 v596;
  __int128 v597;
  uint64_t v598;

  v598 = *MEMORY[0x24BDAC8D0];
  v8 = *a1;
  v7 = a1[1];
  v9 = v7 - *a1;
  v10 = 0xAAAAAAAAAAAAAAABLL * (v9 >> 4);
  if (v10 <= 2)
  {
    a4->i8[0] = 0;
    a4[8].i8[0] = 0;
    return;
  }
  v13 = *(double *)a2;
  v14 = *(_QWORD *)(a2 + 16);
  v554 = *(_QWORD *)(a2 + 8);
  v570 = *(_QWORD *)(a2 + 24);
  v573 = 0;
  v574 = 0;
  if (v7 == v8)
  {
    v16 = 0;
    v22 = 0;
    v24 = 12345;
    if (v14)
      goto LABEL_16;
  }
  else
  {
    if (v10 >= 0x555555555555556)
      sub_20EB70DEC();
    v15 = (char *)operator new(v9);
    v16 = v15;
    v17 = 0;
    v573 = v15;
    do
    {
      v18 = v8 + v17;
      v19 = &v15[v17];
      v20 = *(_OWORD *)(v8 + v17);
      *((_QWORD *)v19 + 2) = *(_QWORD *)(v8 + v17 + 16);
      *(_OWORD *)v19 = v20;
      a5 = *(float64x2_t *)(v8 + v17 + 24);
      *((_QWORD *)v19 + 5) = *(_QWORD *)(v8 + v17 + 40);
      *(float64x2_t *)(v19 + 24) = a5;
      v17 += 48;
    }
    while (v18 + 48 != v7);
    v21 = v17 / 48;
    v22 = &v15[48 * (v17 / 48)];
    v574 = v22;
    if (v17)
    {
      v23 = 0;
      v24 = 12345;
      v25 = v15;
      do
      {
        v24 = 214013 * v24 + 2531011;
        v26 = &v15[48 * ((HIWORD(v24) & 0x7FFF) % v21) + 48 * v23];
        v27 = *((_QWORD *)v26 + 2);
        v28 = *(_OWORD *)v26;
        v29 = *((_QWORD *)v25 + 2);
        *(_OWORD *)v26 = *(_OWORD *)v25;
        *((_QWORD *)v26 + 2) = v29;
        *(_OWORD *)v25 = v28;
        *((_QWORD *)v25 + 2) = v27;
        v30 = *((_QWORD *)v26 + 5);
        a5 = *(float64x2_t *)(v26 + 24);
        v31 = *((_QWORD *)v25 + 5);
        *(_OWORD *)(v26 + 24) = *(_OWORD *)(v25 + 24);
        *((_QWORD *)v26 + 5) = v31;
        *(float64x2_t *)(v25 + 24) = a5;
        *((_QWORD *)v25 + 5) = v30;
        ++v23;
        v25 += 48;
        --v21;
      }
      while (v21);
      if (v14)
        goto LABEL_16;
    }
    else
    {
      v24 = 12345;
      if (v14)
        goto LABEL_16;
    }
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/RANSAC/HypothesisUtil.h", 104, (uint64_t)"max_hypothesis > 0", 18, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_319;
  }
LABEL_16:
  if (v14 > v554
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/RANSAC/HypothesisUtil.h", 105, (uint64_t)"max_hypothesis <= max_trials", 28, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_319:
    abort();
  }
  v32 = 0xAAAAAAAAAAAAAAABLL * ((v22 - v16) >> 4);
  v522 = a3;
  v523 = a2;
  v524 = a1;
  if (v32 < 3)
  {
    __p = 0;
    v33 = 0;
    v536 = 0;
    v34 = v32 / v570 + 1;
    if (v32 / v570 != -1)
      goto LABEL_232;
    goto LABEL_20;
  }
  if (v14)
  {
    if (v14 > 0x1E1E1E1E1E1E1E1)
      sub_20EB70DEC();
    v414 = (char *)operator new(136 * v14);
    v536 = &v414[136 * v14];
    __p = v414;
    if (v554)
      goto LABEL_197;
LABEL_285:
    v33 = (unint64_t)__p;
    v34 = v32 / v570 + 1;
    if (v32 / v570 == -1)
      goto LABEL_20;
LABEL_232:
    if (v34 >> 60)
      sub_20EB70DEC();
    v35 = (__n128 *)operator new(16 * v34);
    v36 = &v35[v34];
    if (v22 != v16)
      goto LABEL_21;
    goto LABEL_234;
  }
  __p = 0;
  v536 = 0;
  if (!v554)
    goto LABEL_285;
LABEL_197:
  v527 = v14;
  v415 = 0;
  v33 = (unint64_t)__p;
  do
  {
    v594 = xmmword_2103159D8;
    v595 = unk_2103159E8;
    v596 = xmmword_2103159F8;
    v597 = unk_210315A08;
    v590 = xmmword_210315998;
    v591 = unk_2103159A8;
    v592 = xmmword_2103159B8;
    v593 = unk_2103159C8;
    v423 = 0xAAAAAAAAAAAAAAABLL * ((v574 - v573) >> 4);
    if (v423 <= 2
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/RANSAC/DataPointCorrespondenceUtil.h", 92, (uint64_t)"correspondences.size() >= SampleSize", 36, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    for (i = 0; i < 3; ++i)
    {
      v24 = 214013 * v24 + 2531011;
      v425 = (HIWORD(v24) & 0x7FFF) % v423;
      v575[i] = (void *)v425;
      if (i && (v575[0] == (void *)v425 || i != 1 && v575[1] == (void *)v425))
        --i;
    }
    v426 = &v573[48 * (uint64_t)v575[0]];
    v583 = *(int8x16_t *)v426;
    *(_QWORD *)v584 = *((_QWORD *)v426 + 2);
    *(_OWORD *)&v584[8] = *(_OWORD *)(v426 + 24);
    *(_QWORD *)&v584[24] = *((_QWORD *)v426 + 5);
    v427 = &v573[48 * (uint64_t)v575[1]];
    v585 = *(_OWORD *)v427;
    *(_QWORD *)v586 = *((_QWORD *)v427 + 2);
    *(_QWORD *)&v586[24] = *((_QWORD *)v427 + 5);
    *(_OWORD *)&v586[8] = *(_OWORD *)(v427 + 24);
    v428 = &v573[48 * v576];
    *(_QWORD *)v588 = *((_QWORD *)v428 + 2);
    v587 = *(float64x2_t *)v428;
    v589 = *((_QWORD *)v428 + 5);
    *(_OWORD *)&v588[8] = *(_OWORD *)(v428 + 24);
    v429 = (char *)operator new(0x48uLL);
    v430 = (char *)operator new(0x48uLL);
    *(int8x16_t *)v429 = v583;
    *((_QWORD *)v429 + 2) = *(_QWORD *)v584;
    *(_OWORD *)v430 = *(_OWORD *)&v584[8];
    *((_QWORD *)v430 + 2) = *(_QWORD *)&v584[24];
    *(_OWORD *)(v429 + 24) = v585;
    *((_QWORD *)v429 + 5) = *(_QWORD *)v586;
    *((_QWORD *)v430 + 5) = *(_QWORD *)&v586[24];
    *(_OWORD *)(v430 + 24) = *(_OWORD *)&v586[8];
    v431 = v587;
    *((_QWORD *)v429 + 8) = *(_QWORD *)v588;
    *((float64x2_t *)v429 + 3) = v431;
    *((_QWORD *)v430 + 8) = v589;
    *((_OWORD *)v430 + 3) = *(_OWORD *)&v588[8];
    sub_20EB70668((uint64_t)v575, (float64x2_t *)v429, (_DWORD)v429 + 72, (float64x2_t *)v430);
    v594 = v579;
    v595 = v580;
    v596 = v581;
    v597 = v582;
    v590 = *(_OWORD *)v575;
    v591 = v576;
    v592 = v577;
    v593 = v578;
    operator delete(v430);
    operator delete(v429);
    if (v33 < (unint64_t)v536)
    {
      *(_QWORD *)v33 = 0;
      v416 = v590;
      v417 = v591;
      v418 = v592;
      *(_OWORD *)(v33 + 56) = v593;
      *(_OWORD *)(v33 + 40) = v418;
      *(_OWORD *)(v33 + 24) = v417;
      *(_OWORD *)(v33 + 8) = v416;
      a5 = (float64x2_t)v594;
      v419 = v595;
      v420 = v596;
      *(_OWORD *)(v33 + 120) = v597;
      *(_OWORD *)(v33 + 104) = v420;
      *(_OWORD *)(v33 + 88) = v419;
      *(float64x2_t *)(v33 + 72) = a5;
      v33 += 136;
      v421 = __p;
      goto LABEL_199;
    }
    v432 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v33 - (_QWORD)__p) >> 3) + 1;
    if (v432 > 0x1E1E1E1E1E1E1E1)
      sub_20EB70DEC();
    if (0xE1E1E1E1E1E1E1E2 * ((v536 - __p) >> 3) > v432)
      v432 = 0xE1E1E1E1E1E1E1E2 * ((v536 - __p) >> 3);
    if (0xF0F0F0F0F0F0F0F1 * ((v536 - __p) >> 3) >= 0xF0F0F0F0F0F0F0)
      v433 = 0x1E1E1E1E1E1E1E1;
    else
      v433 = v432;
    if (v433)
    {
      if (v433 > 0x1E1E1E1E1E1E1E1)
        sub_20E877A38();
      v434 = (char *)operator new(136 * v433);
    }
    else
    {
      v434 = 0;
    }
    v435 = v595;
    v436 = &v434[8 * ((uint64_t)(v33 - (_QWORD)__p) >> 3)];
    *(_OWORD *)(v436 + 72) = v594;
    *(_OWORD *)(v436 + 88) = v435;
    v437 = v597;
    *(_OWORD *)(v436 + 104) = v596;
    *(_OWORD *)(v436 + 120) = v437;
    v438 = v591;
    *(_OWORD *)(v436 + 8) = v590;
    *(_OWORD *)(v436 + 24) = v438;
    a5.f64[1] = *((float64_t *)&v592 + 1);
    v439 = v593;
    *(_OWORD *)(v436 + 40) = v592;
    *(_QWORD *)v436 = 0;
    *(_OWORD *)(v436 + 56) = v439;
    v421 = v436;
    if ((char *)v33 == __p)
    {
      v440 = __p;
      v536 = &v434[136 * v433];
      v33 = (unint64_t)(v436 + 136);
      if (!__p)
        goto LABEL_199;
    }
    else
    {
      v440 = __p;
      do
      {
        v441 = *(_QWORD *)(v33 - 136);
        v33 -= 136;
        *((_QWORD *)v421 - 17) = v441;
        v421 -= 136;
        v442 = *(_OWORD *)(v33 + 8);
        v443 = *(_OWORD *)(v33 + 24);
        v444 = *(_OWORD *)(v33 + 40);
        *(_OWORD *)(v421 + 56) = *(_OWORD *)(v33 + 56);
        *(_OWORD *)(v421 + 40) = v444;
        *(_OWORD *)(v421 + 24) = v443;
        *(_OWORD *)(v421 + 8) = v442;
        a5 = *(float64x2_t *)(v33 + 72);
        v445 = *(_OWORD *)(v33 + 88);
        v446 = *(_OWORD *)(v33 + 104);
        *(_OWORD *)(v421 + 120) = *(_OWORD *)(v33 + 120);
        *(_OWORD *)(v421 + 104) = v446;
        *(_OWORD *)(v421 + 88) = v445;
        *(float64x2_t *)(v421 + 72) = a5;
      }
      while ((char *)v33 != __p);
      v536 = &v434[136 * v433];
      v33 = (unint64_t)(v436 + 136);
      if (!__p)
        goto LABEL_199;
    }
    operator delete(v440);
LABEL_199:
    __p = v421;
    ++v415;
  }
  while (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v33 - (_QWORD)v421) >> 3) != v527 && v415 != v554);
  v16 = v573;
  v22 = v574;
  v32 = 0xAAAAAAAAAAAAAAABLL * ((v574 - v573) >> 4);
  v34 = v32 / v570 + 1;
  if (v32 / v570 != -1)
    goto LABEL_232;
LABEL_20:
  v35 = 0;
  v36 = 0;
  if (v22 == v16)
  {
LABEL_234:
    v49 = 0;
    v545.i64[0] = 0;
    v50 = 1.0;
LABEL_235:
    a5.f64[0] = 0.0;
    v543 = (int8x16_t)a5;
    a6.f64[0] = 0.0;
    v412 = 0;
    v537.i64[0] = 0;
    v535 = 0;
    v411 = 1.0;
    v410 = 0;
    v532.i64[0] = 0;
    v529 = 1.0;
    _D6 = 0;
    v408 = 0;
    v528.i64[0] = 1.0;
    v526 = 0;
    v407 = 0;
    v413 = v524;
    v399 = a4;
    v51 = (uint64_t)__p;
    v568 = 1.0;
    v571 = a6;
    v562 = 0;
    v565 = 0;
    if (!v35)
      goto LABEL_237;
    goto LABEL_236;
  }
LABEL_21:
  v37 = &v16[48 * v32];
  v38 = v13 * 0.5 * (v13 * 0.5);
  v39 = v35;
  do
  {
    while (1)
    {
      v40 = v16;
      v41 = 0xAAAAAAAAAAAAAAABLL * ((v37 - v16) >> 4);
      if (v41 >= v570)
        v41 = v570;
      v16 += 48 * v41;
      if (v39 >= v36)
        break;
      v39->n128_u64[0] = (unint64_t)v40;
      v39->n128_u64[1] = (unint64_t)v16;
      ++v39;
      if (v16 == v37)
        goto LABEL_42;
    }
    v42 = v39 - v35;
    v43 = v42 + 1;
    if ((unint64_t)(v42 + 1) >> 60)
      sub_20EB70DEC();
    if (((char *)v36 - (char *)v35) >> 3 > v43)
      v43 = ((char *)v36 - (char *)v35) >> 3;
    if ((unint64_t)((char *)v36 - (char *)v35) >= 0x7FFFFFFFFFFFFFF0)
      v44 = 0xFFFFFFFFFFFFFFFLL;
    else
      v44 = v43;
    if (v44 >> 60)
      sub_20E877A38();
    v45 = (char *)operator new(16 * v44);
    v46 = (__n128 *)&v45[16 * v42];
    v46->n128_u64[0] = (unint64_t)v40;
    v46->n128_u64[1] = (unint64_t)v16;
    if (v39 == v35)
    {
      v48 = &v45[16 * v42];
      v36 = (__n128 *)&v45[16 * v44];
      v39 = v46 + 1;
      if (v35)
        goto LABEL_37;
    }
    else
    {
      v47 = (float64x2_t *)&v45[16 * v42];
      do
      {
        a5 = (float64x2_t)v39[-1];
        v48 = (char *)&v47[-1];
        v47[-1] = a5;
        --v39;
        --v47;
      }
      while (v39 != v35);
      v36 = (__n128 *)&v45[16 * v44];
      v39 = v46 + 1;
      if (v35)
LABEL_37:
        operator delete(v35);
    }
    v35 = (__n128 *)v48;
  }
  while (v16 != v37);
LABEL_42:
  v49 = 0;
  a5.f64[0] = 0.0;
  v545.i64[0] = 0;
  v50 = 1.0;
  if (v35 == v39)
    goto LABEL_235;
  v51 = (uint64_t)__p;
  if (__p == (char *)v33)
  {
    a5.f64[0] = 0.0;
    v543 = (int8x16_t)a5;
    a6.f64[0] = 0.0;
    v412 = 0;
    v537.i64[0] = 0;
    v535 = 0;
    v411 = 1.0;
    v410 = 0;
    v532.i64[0] = 0;
    v529 = 1.0;
    _D6 = 0;
    v408 = 0;
    v528.i64[0] = 1.0;
    v526 = 0;
    v407 = 0;
    v413 = v524;
    v399 = a4;
    v568 = 1.0;
    v571 = a6;
    v562 = 0;
    v565 = 0;
    if (v35)
      goto LABEL_236;
    goto LABEL_237;
  }
  v52 = 0;
  v53 = (uint64_t)__p;
  v54 = v33;
  v55 = v35;
  while (2)
  {
    if (v53 == v54)
    {
      v56 = v55->n128_u64[1];
      v542 = v55->n128_u64[0];
      v69 = v54 - v53;
      v70 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v54 - v53) >> 3);
      if (v70 < 2)
        goto LABEL_178;
    }
    else
    {
      v533 = v52;
      __pa = v51;
      v56 = v55->n128_u64[1];
      v530 = v55;
      v57 = v53;
      v542 = v55->n128_u64[0];
      if (v55->n128_u64[0] == v56)
      {
        v71 = v54 - v53 - 136;
        v72 = (double *)v53;
        if (v71 < 0x88)
          goto LABEL_328;
        v73 = v71 / 0x88 + 1;
        v72 = (double *)(v53 + 136 * (v73 & 0x3FFFFFFFFFFFFFELL));
        v74 = v73 & 0x3FFFFFFFFFFFFFELL;
        v75 = (double *)v53;
        do
        {
          a5.f64[0] = *v75 + 0.0;
          v76 = v75[17] + 0.0;
          *v75 = a5.f64[0];
          v75[17] = v76;
          v75 += 34;
          v74 -= 2;
        }
        while (v74);
        if (v73 != (v73 & 0x3FFFFFFFFFFFFFELL))
        {
LABEL_328:
          do
          {
            a5.f64[0] = *v72 + 0.0;
            *v72 = a5.f64[0];
            v72 += 17;
          }
          while (v72 != (double *)v54);
        }
        v56 = v542;
        v69 = v54 - v53;
        v70 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v54 - v53) >> 3);
        if (v70 < 2)
          goto LABEL_178;
      }
      else
      {
        do
        {
          v564 = *(_QWORD *)(v57 + 56);
          v567 = *(float64x2_t *)(v57 + 8);
          v558 = *(double *)(v57 + 88);
          v561 = *(float64x2_t *)(v57 + 40);
          a5.f64[0] = *(float64_t *)(v57 + 120);
          v551 = a5;
          v555 = *(float64x2_t *)(v57 + 72);
          v548 = *(int8x16_t *)(v57 + 104);
          a5 = (float64x2_t)vextq_s8(v548, v548, 8uLL);
          v546 = *(_QWORD *)&a5.f64[0];
          v58 = 0.0;
          v59 = v542;
          do
          {
            a5.f64[0] = *(float64_t *)(v59 + 16);
            _Q1 = *(float64x2_t *)v59;
            _D4 = v564;
            _Q2 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v567, *(double *)v59), v561, *(float64x2_t *)v59, 1), v555, a5.f64[0]);
            __asm { FMLA            D3, D4, V1.D[1] }
            *(_QWORD *)&_Q1.f64[0] = v548.i64[0];
            *(_QWORD *)&_Q1.f64[1] = v546;
            a5.f64[0] = _D3 + v558 * a5.f64[0];
            v66 = vaddq_f64(_Q1, _Q2);
            _Q2.f64[1] = v551.f64[1];
            _Q2.f64[0] = *(float64_t *)(v59 + 40);
            v67 = vsubq_f64(_Q2, vaddq_f64(v551, a5)).f64[0];
            _D3 = vsubq_f64(*(float64x2_t *)(v59 + 24), v66).f64[1];
            __asm { FMLA            D2, D3, V1.D[1] }
            v58 = v58 + 1.0 - exp(-(_Q2.f64[0] + v67 * v67) / v38);
            v59 += 48;
          }
          while (v59 != v56);
          a5.f64[0] = v58 + *(double *)v57;
          *(float64_t *)v57 = a5.f64[0];
          v57 += 136;
        }
        while (v57 != v54);
        v51 = __pa;
        v52 = v533;
        v55 = v530;
        v69 = v54 - v53;
        v70 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v54 - v53) >> 3);
        if (v70 < 2)
          goto LABEL_178;
      }
    }
    if (v69 == 272)
      v77 = 1;
    else
      v77 = (v70 - 1) >> 1;
    v78 = v53 + 136 * v77;
    if (v78 == v54)
      goto LABEL_152;
    while (2)
    {
      v79 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v54 - v53) >> 3);
      if (v79 < 2)
        goto LABEL_151;
      if (v79 == 3)
      {
        v278 = *(double *)(v53 + 136);
        a5.f64[0] = *(float64_t *)v53;
        v279 = *(double *)(v54 - 136);
        if (v278 >= *(double *)v53)
        {
          if (v279 < v278)
          {
            v323 = *(_OWORD *)(v53 + 160);
            v583 = *(int8x16_t *)(v53 + 144);
            *(_OWORD *)v584 = v323;
            v324 = *(_OWORD *)(v53 + 192);
            *(_OWORD *)&v584[16] = *(_OWORD *)(v53 + 176);
            v585 = v324;
            v325 = *(_OWORD *)(v53 + 256);
            v587 = *(float64x2_t *)(v53 + 240);
            *(_OWORD *)v588 = v325;
            v326 = *(_OWORD *)(v53 + 224);
            *(_OWORD *)v586 = *(_OWORD *)(v53 + 208);
            *(_OWORD *)&v586[16] = v326;
            *(double *)(v53 + 136) = v279;
            v327 = *(_OWORD *)(v54 - 128);
            v328 = *(_OWORD *)(v54 - 112);
            v329 = *(_OWORD *)(v54 - 80);
            *(_OWORD *)(v53 + 176) = *(_OWORD *)(v54 - 96);
            *(_OWORD *)(v53 + 192) = v329;
            *(_OWORD *)(v53 + 144) = v327;
            *(_OWORD *)(v53 + 160) = v328;
            v330 = *(_OWORD *)(v54 - 64);
            v331 = *(_OWORD *)(v54 - 48);
            a6 = *(float64x2_t *)(v54 - 16);
            *(_OWORD *)(v53 + 240) = *(_OWORD *)(v54 - 32);
            *(float64x2_t *)(v53 + 256) = a6;
            *(_OWORD *)(v53 + 208) = v330;
            *(_OWORD *)(v53 + 224) = v331;
            *(double *)(v54 - 136) = v278;
            v332 = v583;
            v333 = *(_OWORD *)v584;
            v334 = v585;
            *(_OWORD *)(v54 - 96) = *(_OWORD *)&v584[16];
            *(_OWORD *)(v54 - 80) = v334;
            *(int8x16_t *)(v54 - 128) = v332;
            *(_OWORD *)(v54 - 112) = v333;
            a5 = *(float64x2_t *)v586;
            v335 = *(_OWORD *)&v586[16];
            v336 = *(_OWORD *)v588;
            *(float64x2_t *)(v54 - 32) = v587;
            *(_OWORD *)(v54 - 16) = v336;
            *(float64x2_t *)(v54 - 64) = a5;
            *(_OWORD *)(v54 - 48) = v335;
            v337 = *(double *)(v53 + 136);
            a5.f64[0] = *(float64_t *)v53;
            if (v337 < *(double *)v53)
            {
              v338 = *(int8x16_t *)(v53 + 8);
              v339 = *(_OWORD *)(v53 + 24);
              v340 = *(_OWORD *)(v53 + 56);
              *(_OWORD *)&v584[16] = *(_OWORD *)(v53 + 40);
              v585 = v340;
              v583 = v338;
              *(_OWORD *)v584 = v339;
              v341 = *(_OWORD *)(v53 + 72);
              v342 = *(_OWORD *)(v53 + 88);
              a6 = *(float64x2_t *)(v53 + 104);
              v343 = *(_OWORD *)(v53 + 120);
              v587 = a6;
              *(_OWORD *)v588 = v343;
              *(_OWORD *)v586 = v341;
              *(_OWORD *)&v586[16] = v342;
              *(double *)v53 = v337;
              v344 = *(_OWORD *)(v53 + 240);
              *(_OWORD *)(v53 + 120) = *(_OWORD *)(v53 + 256);
              *(_OWORD *)(v53 + 104) = v344;
              v345 = *(_OWORD *)(v53 + 208);
              *(_OWORD *)(v53 + 88) = *(_OWORD *)(v53 + 224);
              *(_OWORD *)(v53 + 72) = v345;
              v346 = *(_OWORD *)(v53 + 160);
              *(_OWORD *)(v53 + 8) = *(_OWORD *)(v53 + 144);
              *(_OWORD *)(v53 + 24) = v346;
              v347 = *(_OWORD *)(v53 + 192);
              *(_OWORD *)(v53 + 40) = *(_OWORD *)(v53 + 176);
              *(_OWORD *)(v53 + 56) = v347;
              *(float64_t *)(v53 + 136) = a5.f64[0];
              v348 = v583;
              v349 = *(_OWORD *)v584;
              v350 = v585;
              *(_OWORD *)(v53 + 176) = *(_OWORD *)&v584[16];
              *(_OWORD *)(v53 + 192) = v350;
              *(int8x16_t *)(v53 + 144) = v348;
              *(_OWORD *)(v53 + 160) = v349;
              a5 = *(float64x2_t *)v586;
              v351 = *(_OWORD *)&v586[16];
              v352 = *(_OWORD *)v588;
              *(float64x2_t *)(v53 + 240) = v587;
              *(_OWORD *)(v53 + 256) = v352;
              *(float64x2_t *)(v53 + 208) = a5;
              *(_OWORD *)(v53 + 224) = v351;
            }
          }
          goto LABEL_151;
        }
        v280 = v53 + 8;
        if (v279 >= v278)
        {
          v353 = *(int8x16_t *)v280;
          v354 = *(_OWORD *)(v53 + 24);
          v355 = *(_OWORD *)(v53 + 56);
          *(_OWORD *)&v584[16] = *(_OWORD *)(v53 + 40);
          v585 = v355;
          v583 = v353;
          *(_OWORD *)v584 = v354;
          v356 = *(_OWORD *)(v53 + 72);
          v357 = *(_OWORD *)(v53 + 88);
          v358 = *(_OWORD *)(v53 + 120);
          v587 = *(float64x2_t *)(v53 + 104);
          *(_OWORD *)v588 = v358;
          *(_OWORD *)v586 = v356;
          *(_OWORD *)&v586[16] = v357;
          *(double *)v53 = v278;
          v359 = *(_OWORD *)(v53 + 256);
          *(_OWORD *)(v53 + 104) = *(_OWORD *)(v53 + 240);
          *(_OWORD *)(v53 + 120) = v359;
          v360 = *(_OWORD *)(v53 + 224);
          *(_OWORD *)(v53 + 72) = *(_OWORD *)(v53 + 208);
          *(_OWORD *)(v53 + 88) = v360;
          v361 = *(_OWORD *)(v53 + 160);
          *(_OWORD *)v280 = *(_OWORD *)(v53 + 144);
          *(_OWORD *)(v53 + 24) = v361;
          v362 = *(_OWORD *)(v53 + 192);
          *(_OWORD *)(v53 + 40) = *(_OWORD *)(v53 + 176);
          *(_OWORD *)(v53 + 56) = v362;
          *(float64_t *)(v53 + 136) = a5.f64[0];
          v363 = v583;
          v364 = *(_OWORD *)v584;
          v365 = v585;
          *(_OWORD *)(v53 + 176) = *(_OWORD *)&v584[16];
          *(_OWORD *)(v53 + 192) = v365;
          *(int8x16_t *)(v53 + 144) = v363;
          *(_OWORD *)(v53 + 160) = v364;
          v366 = *(_OWORD *)v586;
          v367 = *(_OWORD *)&v586[16];
          a6 = *(float64x2_t *)v588;
          *(float64x2_t *)(v53 + 240) = v587;
          *(float64x2_t *)(v53 + 256) = a6;
          *(_OWORD *)(v53 + 208) = v366;
          *(_OWORD *)(v53 + 224) = v367;
          v368 = *(double *)(v54 - 136);
          if (v368 >= a5.f64[0])
            goto LABEL_151;
          v280 = v53 + 144;
          v369 = *(_OWORD *)(v53 + 160);
          v583 = *(int8x16_t *)(v53 + 144);
          *(_OWORD *)v584 = v369;
          v370 = *(_OWORD *)(v53 + 192);
          *(_OWORD *)&v584[16] = *(_OWORD *)(v53 + 176);
          v585 = v370;
          v371 = *(_OWORD *)(v53 + 256);
          v587 = *(float64x2_t *)(v53 + 240);
          *(_OWORD *)v588 = v371;
          v372 = *(_OWORD *)(v53 + 224);
          *(_OWORD *)v586 = *(_OWORD *)(v53 + 208);
          *(_OWORD *)&v586[16] = v372;
          *(double *)(v53 + 136) = v368;
        }
        else
        {
          v281 = *(int8x16_t *)v280;
          v282 = *(_OWORD *)(v53 + 24);
          v283 = *(_OWORD *)(v53 + 56);
          *(_OWORD *)&v584[16] = *(_OWORD *)(v53 + 40);
          v585 = v283;
          v583 = v281;
          *(_OWORD *)v584 = v282;
          v284 = *(_OWORD *)(v53 + 72);
          v285 = *(_OWORD *)(v53 + 88);
          v286 = *(_OWORD *)(v53 + 120);
          v587 = *(float64x2_t *)(v53 + 104);
          *(_OWORD *)v588 = v286;
          *(_OWORD *)v586 = v284;
          *(_OWORD *)&v586[16] = v285;
          *(double *)v53 = v279;
        }
        v373 = *(_OWORD *)(v54 - 128);
        v374 = *(_OWORD *)(v54 - 112);
        v375 = *(_OWORD *)(v54 - 80);
        *(_OWORD *)(v280 + 32) = *(_OWORD *)(v54 - 96);
        *(_OWORD *)(v280 + 48) = v375;
        *(_OWORD *)v280 = v373;
        *(_OWORD *)(v280 + 16) = v374;
        v376 = *(_OWORD *)(v54 - 64);
        v377 = *(_OWORD *)(v54 - 48);
        a6 = *(float64x2_t *)(v54 - 16);
        *(_OWORD *)(v280 + 96) = *(_OWORD *)(v54 - 32);
        *(float64x2_t *)(v280 + 112) = a6;
        *(_OWORD *)(v280 + 64) = v376;
        *(_OWORD *)(v280 + 80) = v377;
LABEL_150:
        *(float64_t *)(v54 - 136) = a5.f64[0];
        v378 = v583;
        v379 = *(_OWORD *)v584;
        v380 = v585;
        *(_OWORD *)(v54 - 96) = *(_OWORD *)&v584[16];
        *(_OWORD *)(v54 - 80) = v380;
        *(int8x16_t *)(v54 - 128) = v378;
        *(_OWORD *)(v54 - 112) = v379;
        a5 = *(float64x2_t *)v586;
        v381 = *(_OWORD *)&v586[16];
        v382 = *(_OWORD *)v588;
        *(float64x2_t *)(v54 - 32) = v587;
        *(_OWORD *)(v54 - 16) = v382;
        *(float64x2_t *)(v54 - 64) = a5;
        *(_OWORD *)(v54 - 48) = v381;
        goto LABEL_151;
      }
      if (v79 == 2)
      {
        a5.f64[0] = *(float64_t *)v53;
        if (*(double *)(v54 - 136) >= *(double *)v53)
          goto LABEL_151;
        v287 = *(int8x16_t *)(v53 + 8);
        v288 = *(_OWORD *)(v53 + 24);
        v289 = *(_OWORD *)(v53 + 56);
        *(_OWORD *)&v584[16] = *(_OWORD *)(v53 + 40);
        v585 = v289;
        v583 = v287;
        *(_OWORD *)v584 = v288;
        v290 = *(_OWORD *)(v53 + 72);
        v291 = *(_OWORD *)(v53 + 88);
        v292 = *(_OWORD *)(v53 + 120);
        v587 = *(float64x2_t *)(v53 + 104);
        *(_OWORD *)v588 = v292;
        *(_OWORD *)v586 = v290;
        *(_OWORD *)&v586[16] = v291;
        *(_QWORD *)v53 = *(_QWORD *)(v54 - 136);
        v293 = *(_OWORD *)(v54 - 128);
        v294 = *(_OWORD *)(v54 - 112);
        v295 = *(_OWORD *)(v54 - 96);
        *(_OWORD *)(v53 + 56) = *(_OWORD *)(v54 - 80);
        *(_OWORD *)(v53 + 40) = v295;
        *(_OWORD *)(v53 + 24) = v294;
        *(_OWORD *)(v53 + 8) = v293;
        v296 = *(_OWORD *)(v54 - 64);
        v297 = *(_OWORD *)(v54 - 48);
        v298 = *(_OWORD *)(v54 - 32);
        a6 = *(float64x2_t *)(v54 - 16);
        *(float64x2_t *)(v53 + 120) = a6;
        *(_OWORD *)(v53 + 104) = v298;
        *(_OWORD *)(v53 + 88) = v297;
        *(_OWORD *)(v53 + 72) = v296;
        goto LABEL_150;
      }
      if ((uint64_t)(v54 - v53) <= 1087)
      {
        while (v53 != v54 - 136)
        {
          v299 = v53;
          v53 += 136;
          if (v299 != v54 && v53 != v54)
          {
            a5.f64[0] = *(float64_t *)v299;
            v300 = *(double *)v299;
            v301 = v53;
            v302 = v299;
            v303 = (double *)v53;
            do
            {
              v304 = *v303;
              v303 += 17;
              v305 = v304;
              if (v304 < v300)
              {
                v300 = v305;
                v302 = v301;
              }
              v301 = (uint64_t)v303;
            }
            while (v303 != (double *)v54);
            if (v302 != v299)
            {
              v306 = *(int8x16_t *)(v299 + 8);
              v307 = *(_OWORD *)(v299 + 24);
              v308 = *(_OWORD *)(v299 + 56);
              *(_OWORD *)&v584[16] = *(_OWORD *)(v299 + 40);
              v585 = v308;
              v583 = v306;
              *(_OWORD *)v584 = v307;
              v309 = *(_OWORD *)(v299 + 72);
              v310 = *(_OWORD *)(v299 + 88);
              v311 = *(_OWORD *)(v299 + 120);
              v587 = *(float64x2_t *)(v299 + 104);
              *(_OWORD *)v588 = v311;
              *(_OWORD *)v586 = v309;
              *(_OWORD *)&v586[16] = v310;
              *(_QWORD *)v299 = *(_QWORD *)v302;
              v312 = *(_OWORD *)(v302 + 8);
              v313 = *(_OWORD *)(v302 + 24);
              v314 = *(_OWORD *)(v302 + 40);
              *(_OWORD *)(v299 + 56) = *(_OWORD *)(v302 + 56);
              *(_OWORD *)(v299 + 40) = v314;
              *(_OWORD *)(v299 + 24) = v313;
              *(_OWORD *)(v299 + 8) = v312;
              v315 = *(_OWORD *)(v302 + 72);
              v316 = *(_OWORD *)(v302 + 88);
              v317 = *(_OWORD *)(v302 + 104);
              a6 = *(float64x2_t *)(v302 + 120);
              *(float64x2_t *)(v299 + 120) = a6;
              *(_OWORD *)(v299 + 104) = v317;
              *(_OWORD *)(v299 + 88) = v316;
              *(_OWORD *)(v299 + 72) = v315;
              *(float64_t *)v302 = a5.f64[0];
              v318 = v583;
              v319 = *(_OWORD *)v584;
              v320 = *(_OWORD *)&v584[16];
              *(_OWORD *)(v302 + 56) = v585;
              *(_OWORD *)(v302 + 40) = v320;
              *(_OWORD *)(v302 + 24) = v319;
              *(int8x16_t *)(v302 + 8) = v318;
              a5 = *(float64x2_t *)v586;
              v321 = *(_OWORD *)&v586[16];
              v322 = v587;
              *(_OWORD *)(v302 + 120) = *(_OWORD *)v588;
              *(float64x2_t *)(v302 + 104) = v322;
              *(_OWORD *)(v302 + 88) = v321;
              *(float64x2_t *)(v302 + 72) = a5;
            }
          }
        }
        goto LABEL_151;
      }
      v80 = v79 >> 1;
      v81 = v53 + 136 * (v79 >> 1);
      v82 = v54 - 136;
      v83 = *(double *)(v54 - 136);
      v84 = *(double *)v81;
      v85 = *(double *)v53;
      if (*(double *)v81 >= *(double *)v53)
      {
        if (v83 < v84)
        {
          v129 = v53 + 136 * v80;
          v130 = *(int8x16_t *)(v129 + 8);
          v131 = *(_OWORD *)(v129 + 24);
          v132 = *(_OWORD *)(v129 + 56);
          *(_OWORD *)&v584[16] = *(_OWORD *)(v129 + 40);
          v585 = v132;
          v583 = v130;
          *(_OWORD *)v584 = v131;
          v133 = *(_OWORD *)(v129 + 72);
          v134 = *(_OWORD *)(v129 + 88);
          v135 = *(_OWORD *)(v129 + 120);
          v587 = *(float64x2_t *)(v129 + 104);
          *(_OWORD *)v588 = v135;
          *(_OWORD *)v586 = v133;
          *(_OWORD *)&v586[16] = v134;
          *(double *)v81 = v83;
          v136 = *(_OWORD *)(v54 - 128);
          v137 = *(_OWORD *)(v54 - 112);
          v138 = *(_OWORD *)(v54 - 96);
          *(_OWORD *)(v129 + 56) = *(_OWORD *)(v54 - 80);
          *(_OWORD *)(v129 + 40) = v138;
          *(_OWORD *)(v129 + 24) = v137;
          *(_OWORD *)(v129 + 8) = v136;
          v139 = *(_OWORD *)(v54 - 64);
          v140 = *(_OWORD *)(v54 - 48);
          v141 = *(_OWORD *)(v54 - 32);
          a6 = *(float64x2_t *)(v54 - 16);
          *(float64x2_t *)(v129 + 120) = a6;
          *(_OWORD *)(v129 + 104) = v141;
          *(_OWORD *)(v129 + 88) = v140;
          *(_OWORD *)(v129 + 72) = v139;
          *(double *)(v54 - 136) = v84;
          v142 = v583;
          v143 = *(_OWORD *)v584;
          v144 = v585;
          *(_OWORD *)(v54 - 96) = *(_OWORD *)&v584[16];
          *(_OWORD *)(v54 - 80) = v144;
          *(int8x16_t *)(v54 - 128) = v142;
          *(_OWORD *)(v54 - 112) = v143;
          a5 = *(float64x2_t *)v586;
          v145 = *(_OWORD *)&v586[16];
          v146 = *(_OWORD *)v588;
          *(float64x2_t *)(v54 - 32) = v587;
          *(_OWORD *)(v54 - 16) = v146;
          *(float64x2_t *)(v54 - 64) = a5;
          *(_OWORD *)(v54 - 48) = v145;
          v147 = *(double *)v81;
          a5.f64[0] = *(float64_t *)v53;
          if (*(double *)v81 < *(double *)v53)
          {
            v148 = v129 + 8;
            v149 = *(int8x16_t *)(v53 + 8);
            v150 = *(_OWORD *)(v53 + 24);
            v151 = *(_OWORD *)(v53 + 56);
            *(_OWORD *)&v584[16] = *(_OWORD *)(v53 + 40);
            v585 = v151;
            v583 = v149;
            *(_OWORD *)v584 = v150;
            v152 = *(_OWORD *)(v53 + 72);
            v153 = *(_OWORD *)(v53 + 88);
            v154 = *(_OWORD *)(v53 + 120);
            v587 = *(float64x2_t *)(v53 + 104);
            *(_OWORD *)v588 = v154;
            *(_OWORD *)v586 = v152;
            *(_OWORD *)&v586[16] = v153;
            *(double *)v53 = v147;
            v155 = *(_OWORD *)(v148 + 32);
            v156 = *(_OWORD *)(v148 + 48);
            v157 = *(_OWORD *)(v148 + 16);
            *(_OWORD *)(v53 + 8) = *(_OWORD *)v148;
            *(_OWORD *)(v53 + 56) = v156;
            *(_OWORD *)(v53 + 40) = v155;
            *(_OWORD *)(v53 + 24) = v157;
            v158 = *(_OWORD *)(v148 + 96);
            v159 = *(_OWORD *)(v148 + 112);
            a6 = *(float64x2_t *)(v148 + 64);
            v160 = *(_OWORD *)(v148 + 80);
            *(float64x2_t *)(v53 + 72) = a6;
            *(_OWORD *)(v53 + 120) = v159;
            *(_OWORD *)(v53 + 104) = v158;
            *(_OWORD *)(v53 + 88) = v160;
            *(float64_t *)v81 = a5.f64[0];
            v161 = v583;
            v162 = *(_OWORD *)v584;
            v163 = v585;
            *(_OWORD *)(v148 + 32) = *(_OWORD *)&v584[16];
            *(_OWORD *)(v148 + 48) = v163;
            *(int8x16_t *)v148 = v161;
            *(_OWORD *)(v148 + 16) = v162;
            a5 = *(float64x2_t *)v586;
            v164 = *(_OWORD *)&v586[16];
            v165 = *(_OWORD *)v588;
            *(float64x2_t *)(v148 + 96) = v587;
            *(_OWORD *)(v148 + 112) = v165;
            *(float64x2_t *)(v148 + 64) = a5;
            *(_OWORD *)(v148 + 80) = v164;
            v103 = 2;
            a5.f64[0] = *(float64_t *)v53;
            v104 = *(double *)v81;
            if (*(double *)v53 >= *(double *)v81)
              goto LABEL_89;
            break;
          }
          goto LABEL_111;
        }
        v103 = 0;
        a5.f64[0] = *(float64_t *)v53;
        v104 = *(double *)v81;
        if (*(double *)v53 >= *(double *)v81)
          goto LABEL_89;
      }
      else
      {
        v86 = (int8x16_t *)(v53 + 8);
        if (v83 < v84)
        {
          v87 = *v86;
          v88 = *(_OWORD *)(v53 + 24);
          v89 = *(_OWORD *)(v53 + 56);
          *(_OWORD *)&v584[16] = *(_OWORD *)(v53 + 40);
          v585 = v89;
          v583 = v87;
          *(_OWORD *)v584 = v88;
          v90 = *(_OWORD *)(v53 + 72);
          v91 = *(_OWORD *)(v53 + 88);
          v92 = *(_OWORD *)(v53 + 120);
          v587 = *(float64x2_t *)(v53 + 104);
          *(_OWORD *)v588 = v92;
          *(_OWORD *)v586 = v90;
          *(_OWORD *)&v586[16] = v91;
          *(double *)v53 = v83;
          v93 = *(int8x16_t *)(v54 - 128);
          v94 = *(_OWORD *)(v54 - 112);
          v95 = *(_OWORD *)(v54 - 80);
          *(_OWORD *)(v53 + 40) = *(_OWORD *)(v54 - 96);
          *(_OWORD *)(v53 + 56) = v95;
          *v86 = v93;
          *(_OWORD *)(v53 + 24) = v94;
          v96 = *(_OWORD *)(v54 - 64);
          v97 = *(_OWORD *)(v54 - 48);
          a6 = *(float64x2_t *)(v54 - 16);
          *(_OWORD *)(v53 + 104) = *(_OWORD *)(v54 - 32);
          *(float64x2_t *)(v53 + 120) = a6;
          *(_OWORD *)(v53 + 72) = v96;
          *(_OWORD *)(v53 + 88) = v97;
          *(double *)(v54 - 136) = v85;
          v98 = v583;
          v99 = *(_OWORD *)v584;
          v100 = v585;
          *(_OWORD *)(v54 - 96) = *(_OWORD *)&v584[16];
          *(_OWORD *)(v54 - 80) = v100;
          *(int8x16_t *)(v54 - 128) = v98;
          *(_OWORD *)(v54 - 112) = v99;
          a5 = *(float64x2_t *)v586;
          v101 = *(_OWORD *)&v586[16];
          v102 = *(_OWORD *)v588;
          *(float64x2_t *)(v54 - 32) = v587;
          *(_OWORD *)(v54 - 16) = v102;
          *(float64x2_t *)(v54 - 64) = a5;
          *(_OWORD *)(v54 - 48) = v101;
          v103 = 1;
          a5.f64[0] = *(float64_t *)v53;
          v104 = *(double *)v81;
          if (*(double *)v53 < *(double *)v81)
            break;
LABEL_89:
          v105 = v54 - 136;
          while (1)
          {
            v105 -= 136;
            if (v105 == v53)
              break;
            if (*(double *)v105 < v104)
            {
              v201 = *(int8x16_t *)(v53 + 8);
              v202 = *(_OWORD *)(v53 + 24);
              v203 = *(_OWORD *)(v53 + 56);
              *(_OWORD *)&v584[16] = *(_OWORD *)(v53 + 40);
              v585 = v203;
              v583 = v201;
              *(_OWORD *)v584 = v202;
              v204 = *(_OWORD *)(v53 + 72);
              v205 = *(_OWORD *)(v53 + 88);
              v206 = *(_OWORD *)(v53 + 120);
              v587 = *(float64x2_t *)(v53 + 104);
              *(_OWORD *)v588 = v206;
              *(_OWORD *)v586 = v204;
              *(_OWORD *)&v586[16] = v205;
              *(_QWORD *)v53 = *(_QWORD *)v105;
              v207 = *(_OWORD *)(v105 + 8);
              v208 = *(_OWORD *)(v105 + 24);
              v209 = *(_OWORD *)(v105 + 40);
              *(_OWORD *)(v53 + 56) = *(_OWORD *)(v105 + 56);
              *(_OWORD *)(v53 + 40) = v209;
              *(_OWORD *)(v53 + 24) = v208;
              *(_OWORD *)(v53 + 8) = v207;
              v210 = *(_OWORD *)(v105 + 72);
              v211 = *(_OWORD *)(v105 + 88);
              v212 = *(_OWORD *)(v105 + 104);
              a6 = *(float64x2_t *)(v105 + 120);
              *(float64x2_t *)(v53 + 120) = a6;
              *(_OWORD *)(v53 + 104) = v212;
              *(_OWORD *)(v53 + 88) = v211;
              *(_OWORD *)(v53 + 72) = v210;
              *(float64_t *)v105 = a5.f64[0];
              v213 = v583;
              v214 = *(_OWORD *)v584;
              v215 = *(_OWORD *)&v584[16];
              *(_OWORD *)(v105 + 56) = v585;
              *(_OWORD *)(v105 + 40) = v215;
              *(_OWORD *)(v105 + 24) = v214;
              *(int8x16_t *)(v105 + 8) = v213;
              a5 = *(float64x2_t *)v586;
              v216 = *(_OWORD *)&v586[16];
              v217 = v587;
              *(_OWORD *)(v105 + 120) = *(_OWORD *)v588;
              *(float64x2_t *)(v105 + 104) = v217;
              *(_OWORD *)(v105 + 88) = v216;
              *(float64x2_t *)(v105 + 72) = a5;
              ++v103;
              v106 = (unint64_t *)(v53 + 136);
              if (v53 + 136 < v105)
                goto LABEL_72;
              goto LABEL_93;
            }
          }
          v237 = v53 + 136;
          if (a5.f64[0] >= *(double *)v82)
          {
            if (v237 == v82)
              goto LABEL_151;
            while (1)
            {
              v238 = *(double *)v237;
              if (a5.f64[0] < *(double *)v237)
                break;
              v237 += 136;
              if (v237 == v82)
                goto LABEL_151;
            }
            v241 = *(int8x16_t *)(v237 + 8);
            v242 = *(_OWORD *)(v237 + 24);
            v243 = *(_OWORD *)(v237 + 56);
            *(_OWORD *)&v584[16] = *(_OWORD *)(v237 + 40);
            v585 = v243;
            v583 = v241;
            *(_OWORD *)v584 = v242;
            v244 = *(_OWORD *)(v237 + 72);
            v245 = *(_OWORD *)(v237 + 88);
            v246 = *(_OWORD *)(v237 + 120);
            v587 = *(float64x2_t *)(v237 + 104);
            *(_OWORD *)v588 = v246;
            *(_OWORD *)v586 = v244;
            *(_OWORD *)&v586[16] = v245;
            *(_QWORD *)v237 = *(_QWORD *)(v54 - 136);
            v247 = *(_OWORD *)(v54 - 128);
            v248 = *(_OWORD *)(v54 - 112);
            v249 = *(_OWORD *)(v54 - 96);
            *(_OWORD *)(v237 + 56) = *(_OWORD *)(v54 - 80);
            *(_OWORD *)(v237 + 40) = v249;
            *(_OWORD *)(v237 + 24) = v248;
            *(_OWORD *)(v237 + 8) = v247;
            v250 = *(_OWORD *)(v54 - 64);
            v251 = *(_OWORD *)(v54 - 48);
            v252 = *(_OWORD *)(v54 - 32);
            a6 = *(float64x2_t *)(v54 - 16);
            *(float64x2_t *)(v237 + 120) = a6;
            *(_OWORD *)(v237 + 104) = v252;
            *(_OWORD *)(v237 + 88) = v251;
            *(_OWORD *)(v237 + 72) = v250;
            *(double *)(v54 - 136) = v238;
            v253 = v583;
            v254 = *(_OWORD *)v584;
            v255 = v585;
            *(_OWORD *)(v54 - 96) = *(_OWORD *)&v584[16];
            *(_OWORD *)(v54 - 80) = v255;
            *(int8x16_t *)(v54 - 128) = v253;
            *(_OWORD *)(v54 - 112) = v254;
            a5 = *(float64x2_t *)v586;
            v256 = *(_OWORD *)&v586[16];
            v257 = *(_OWORD *)v588;
            *(float64x2_t *)(v54 - 32) = v587;
            *(_OWORD *)(v54 - 16) = v257;
            *(float64x2_t *)(v54 - 64) = a5;
            *(_OWORD *)(v54 - 48) = v256;
            v237 += 136;
          }
          if (v237 == v82)
            goto LABEL_151;
          while (1)
          {
            v258 = *(double *)v53;
            v235 = v237 - 136;
            do
            {
              v259 = *(double *)(v235 + 136);
              v235 += 136;
              a5.f64[0] = v259;
            }
            while (v258 >= v259);
            v237 = v235 + 136;
            do
            {
              v260 = *(double *)(v82 - 136);
              v82 -= 136;
            }
            while (v258 < v260);
            if (v235 >= v82)
              break;
            v261 = *(int8x16_t *)(v235 + 8);
            v262 = *(_OWORD *)(v235 + 24);
            v263 = *(_OWORD *)(v235 + 56);
            *(_OWORD *)&v584[16] = *(_OWORD *)(v235 + 40);
            v585 = v263;
            v583 = v261;
            *(_OWORD *)v584 = v262;
            v264 = *(_OWORD *)(v235 + 72);
            v265 = *(_OWORD *)(v235 + 88);
            v266 = *(_OWORD *)(v235 + 120);
            v587 = *(float64x2_t *)(v235 + 104);
            *(_OWORD *)v588 = v266;
            *(_OWORD *)v586 = v264;
            *(_OWORD *)&v586[16] = v265;
            *(_QWORD *)v235 = *(_QWORD *)v82;
            v267 = *(_OWORD *)(v82 + 8);
            v268 = *(_OWORD *)(v82 + 24);
            v269 = *(_OWORD *)(v82 + 40);
            *(_OWORD *)(v235 + 56) = *(_OWORD *)(v82 + 56);
            *(_OWORD *)(v235 + 40) = v269;
            *(_OWORD *)(v235 + 24) = v268;
            *(_OWORD *)(v235 + 8) = v267;
            v270 = *(_OWORD *)(v82 + 72);
            v271 = *(_OWORD *)(v82 + 88);
            v272 = *(_OWORD *)(v82 + 104);
            a6 = *(float64x2_t *)(v82 + 120);
            *(float64x2_t *)(v235 + 120) = a6;
            *(_OWORD *)(v235 + 104) = v272;
            *(_OWORD *)(v235 + 88) = v271;
            *(_OWORD *)(v235 + 72) = v270;
            *(float64_t *)v82 = a5.f64[0];
            v273 = v583;
            v274 = *(_OWORD *)v584;
            v275 = *(_OWORD *)&v584[16];
            *(_OWORD *)(v82 + 56) = v585;
            *(_OWORD *)(v82 + 40) = v275;
            *(_OWORD *)(v82 + 24) = v274;
            *(int8x16_t *)(v82 + 8) = v273;
            a5 = *(float64x2_t *)v586;
            v276 = *(_OWORD *)&v586[16];
            v277 = v587;
            *(_OWORD *)(v82 + 120) = *(_OWORD *)v588;
            *(float64x2_t *)(v82 + 104) = v277;
            *(_OWORD *)(v82 + 88) = v276;
            *(float64x2_t *)(v82 + 72) = a5;
          }
          if (v235 > v78)
            goto LABEL_151;
LABEL_126:
          v53 = v235;
          if (v54 == v78)
            goto LABEL_151;
          continue;
        }
        v166 = *v86;
        v167 = *(_OWORD *)(v53 + 24);
        v168 = *(_OWORD *)(v53 + 56);
        *(_OWORD *)&v584[16] = *(_OWORD *)(v53 + 40);
        v585 = v168;
        v583 = v166;
        *(_OWORD *)v584 = v167;
        v169 = *(_OWORD *)(v53 + 72);
        v170 = *(_OWORD *)(v53 + 88);
        v171 = *(_OWORD *)(v53 + 120);
        v587 = *(float64x2_t *)(v53 + 104);
        *(_OWORD *)v588 = v171;
        *(_OWORD *)v586 = v169;
        *(_OWORD *)&v586[16] = v170;
        *(double *)v53 = v84;
        v172 = v53 + 136 * v80;
        v173 = *(_OWORD *)(v172 + 24);
        v174 = *(_OWORD *)(v172 + 56);
        v175 = *(int8x16_t *)(v172 + 8);
        *(_OWORD *)(v53 + 40) = *(_OWORD *)(v172 + 40);
        *(_OWORD *)(v53 + 56) = v174;
        *v86 = v175;
        *(_OWORD *)(v53 + 24) = v173;
        v176 = *(_OWORD *)(v172 + 88);
        v177 = *(_OWORD *)(v172 + 120);
        a6 = *(float64x2_t *)(v172 + 72);
        *(_OWORD *)(v53 + 104) = *(_OWORD *)(v172 + 104);
        *(_OWORD *)(v53 + 120) = v177;
        *(float64x2_t *)(v53 + 72) = a6;
        *(_OWORD *)(v53 + 88) = v176;
        *(double *)v81 = v85;
        v178 = v583;
        v179 = *(_OWORD *)v584;
        v180 = *(_OWORD *)&v584[16];
        *(_OWORD *)(v172 + 56) = v585;
        *(_OWORD *)(v172 + 40) = v180;
        *(_OWORD *)(v172 + 24) = v179;
        *(int8x16_t *)(v172 + 8) = v178;
        v181 = *(_OWORD *)v586;
        v182 = *(_OWORD *)&v586[16];
        v183 = v587;
        a6.f64[1] = *(float64_t *)&v588[8];
        *(_OWORD *)(v172 + 120) = *(_OWORD *)v588;
        *(float64x2_t *)(v172 + 104) = v183;
        *(_OWORD *)(v172 + 88) = v182;
        *(_OWORD *)(v172 + 72) = v181;
        v184 = *(double *)v82;
        if (*(double *)v82 < v85)
        {
          v185 = *(int8x16_t *)(v172 + 8);
          v186 = *(_OWORD *)(v172 + 24);
          v187 = *(_OWORD *)(v172 + 56);
          *(_OWORD *)&v584[16] = *(_OWORD *)(v172 + 40);
          v585 = v187;
          v583 = v185;
          *(_OWORD *)v584 = v186;
          v188 = *(_OWORD *)(v172 + 72);
          v189 = *(_OWORD *)(v172 + 88);
          v190 = *(_OWORD *)(v172 + 120);
          v587 = *(float64x2_t *)(v172 + 104);
          *(_OWORD *)v588 = v190;
          *(_OWORD *)v586 = v188;
          *(_OWORD *)&v586[16] = v189;
          *(double *)v81 = v184;
          v191 = *(_OWORD *)(v54 - 128);
          v192 = *(_OWORD *)(v54 - 112);
          v193 = *(_OWORD *)(v54 - 80);
          *(_OWORD *)(v172 + 40) = *(_OWORD *)(v54 - 96);
          *(_OWORD *)(v172 + 56) = v193;
          *(_OWORD *)(v172 + 8) = v191;
          *(_OWORD *)(v172 + 24) = v192;
          v194 = *(_OWORD *)(v54 - 64);
          v195 = *(_OWORD *)(v54 - 48);
          a6 = *(float64x2_t *)(v54 - 16);
          *(_OWORD *)(v172 + 104) = *(_OWORD *)(v54 - 32);
          *(float64x2_t *)(v172 + 120) = a6;
          *(_OWORD *)(v172 + 72) = v194;
          *(_OWORD *)(v172 + 88) = v195;
          *(double *)(v54 - 136) = v85;
          v196 = v583;
          v197 = *(_OWORD *)v584;
          v198 = v585;
          *(_OWORD *)(v54 - 96) = *(_OWORD *)&v584[16];
          *(_OWORD *)(v54 - 80) = v198;
          *(int8x16_t *)(v54 - 128) = v196;
          *(_OWORD *)(v54 - 112) = v197;
          a5 = *(float64x2_t *)v586;
          v199 = *(_OWORD *)&v586[16];
          v200 = *(_OWORD *)v588;
          *(float64x2_t *)(v54 - 32) = v587;
          *(_OWORD *)(v54 - 16) = v200;
          *(float64x2_t *)(v54 - 64) = a5;
          *(_OWORD *)(v54 - 48) = v199;
          v103 = 2;
          a5.f64[0] = *(float64_t *)v53;
          v104 = *(double *)v81;
          if (*(double *)v53 >= *(double *)v81)
            goto LABEL_89;
          break;
        }
LABEL_111:
        v103 = 1;
        a5.f64[0] = *(float64_t *)v53;
        v104 = *(double *)v81;
        if (*(double *)v53 >= *(double *)v81)
          goto LABEL_89;
      }
      break;
    }
    v105 = v54 - 136;
    v106 = (unint64_t *)(v53 + 136);
    if (v53 + 136 >= v54 - 136)
    {
LABEL_93:
      v109 = v106;
    }
    else
    {
LABEL_72:
      v107 = v106;
      while (1)
      {
        v108 = *(double *)v81;
        v109 = v107 - 17;
        do
        {
          v110 = *((double *)v109 + 17);
          v109 += 17;
          a5.f64[0] = v110;
        }
        while (v110 < v108);
        v107 = v109 + 17;
        do
        {
          v111 = *(double *)(v105 - 136);
          v105 -= 136;
        }
        while (v111 >= v108);
        if ((unint64_t)v109 >= v105)
          break;
        v112 = *(int8x16_t *)(v109 + 1);
        v113 = *(_OWORD *)(v109 + 3);
        v114 = *(_OWORD *)(v109 + 7);
        *(_OWORD *)&v584[16] = *(_OWORD *)(v109 + 5);
        v585 = v114;
        v583 = v112;
        *(_OWORD *)v584 = v113;
        v115 = *(_OWORD *)(v109 + 9);
        v116 = *(_OWORD *)(v109 + 11);
        v117 = *(_OWORD *)(v109 + 15);
        v587 = *(float64x2_t *)(v109 + 13);
        *(_OWORD *)v588 = v117;
        *(_OWORD *)v586 = v115;
        *(_OWORD *)&v586[16] = v116;
        *v109 = *(_QWORD *)v105;
        v118 = *(_OWORD *)(v105 + 8);
        v119 = *(_OWORD *)(v105 + 24);
        v120 = *(_OWORD *)(v105 + 40);
        *(_OWORD *)(v109 + 7) = *(_OWORD *)(v105 + 56);
        *(_OWORD *)(v109 + 5) = v120;
        *(_OWORD *)(v109 + 3) = v119;
        *(_OWORD *)(v109 + 1) = v118;
        v121 = *(_OWORD *)(v105 + 72);
        v122 = *(_OWORD *)(v105 + 88);
        v123 = *(_OWORD *)(v105 + 104);
        a6 = *(float64x2_t *)(v105 + 120);
        *(float64x2_t *)(v109 + 15) = a6;
        *(_OWORD *)(v109 + 13) = v123;
        *(_OWORD *)(v109 + 11) = v122;
        *(_OWORD *)(v109 + 9) = v121;
        *(float64_t *)v105 = a5.f64[0];
        v124 = v583;
        v125 = *(_OWORD *)v584;
        v126 = *(_OWORD *)&v584[16];
        *(_OWORD *)(v105 + 56) = v585;
        *(_OWORD *)(v105 + 40) = v126;
        *(_OWORD *)(v105 + 24) = v125;
        *(int8x16_t *)(v105 + 8) = v124;
        a5 = *(float64x2_t *)v586;
        v127 = *(_OWORD *)&v586[16];
        v128 = v587;
        *(_OWORD *)(v105 + 120) = *(_OWORD *)v588;
        *(float64x2_t *)(v105 + 104) = v128;
        *(_OWORD *)(v105 + 88) = v127;
        *(float64x2_t *)(v105 + 72) = a5;
        ++v103;
        if (v109 == (unint64_t *)v81)
          v81 = v105;
      }
    }
    if (v109 != (unint64_t *)v81)
    {
      *(_QWORD *)&a5.f64[0] = *v109;
      if (*(double *)v81 < *(double *)v109)
      {
        v218 = *(int8x16_t *)(v109 + 1);
        v219 = *(_OWORD *)(v109 + 3);
        v220 = *(_OWORD *)(v109 + 7);
        *(_OWORD *)&v584[16] = *(_OWORD *)(v109 + 5);
        v585 = v220;
        v583 = v218;
        *(_OWORD *)v584 = v219;
        v221 = *(_OWORD *)(v109 + 9);
        v222 = *(_OWORD *)(v109 + 11);
        v223 = *(_OWORD *)(v109 + 15);
        v587 = *(float64x2_t *)(v109 + 13);
        *(_OWORD *)v588 = v223;
        *(_OWORD *)v586 = v221;
        *(_OWORD *)&v586[16] = v222;
        *v109 = *(_QWORD *)v81;
        v224 = *(_OWORD *)(v81 + 8);
        v225 = *(_OWORD *)(v81 + 24);
        v226 = *(_OWORD *)(v81 + 40);
        *(_OWORD *)(v109 + 7) = *(_OWORD *)(v81 + 56);
        *(_OWORD *)(v109 + 5) = v226;
        *(_OWORD *)(v109 + 3) = v225;
        *(_OWORD *)(v109 + 1) = v224;
        v227 = *(_OWORD *)(v81 + 72);
        v228 = *(_OWORD *)(v81 + 88);
        v229 = *(_OWORD *)(v81 + 104);
        a6 = *(float64x2_t *)(v81 + 120);
        *(float64x2_t *)(v109 + 15) = a6;
        *(_OWORD *)(v109 + 13) = v229;
        *(_OWORD *)(v109 + 11) = v228;
        *(_OWORD *)(v109 + 9) = v227;
        *(float64_t *)v81 = a5.f64[0];
        v230 = v583;
        v231 = *(_OWORD *)v584;
        v232 = *(_OWORD *)&v584[16];
        *(_OWORD *)(v81 + 56) = v585;
        *(_OWORD *)(v81 + 40) = v232;
        *(_OWORD *)(v81 + 24) = v231;
        *(int8x16_t *)(v81 + 8) = v230;
        a5 = *(float64x2_t *)v586;
        v233 = *(_OWORD *)&v586[16];
        v234 = v587;
        *(_OWORD *)(v81 + 120) = *(_OWORD *)v588;
        *(float64x2_t *)(v81 + 104) = v234;
        *(_OWORD *)(v81 + 88) = v233;
        *(float64x2_t *)(v81 + 72) = a5;
        ++v103;
      }
    }
    if (v109 == (unint64_t *)v78)
      goto LABEL_151;
    if (v103)
    {
LABEL_99:
      if ((unint64_t)v109 <= v78)
      {
        v235 = (unint64_t)(v109 + 17);
      }
      else
      {
        v54 = (unint64_t)v109;
        v235 = v53;
      }
      goto LABEL_126;
    }
    if ((unint64_t)v109 <= v78)
    {
      v239 = v109 + 17;
      while (v239 != (unint64_t *)v54)
      {
        *(_QWORD *)&a5.f64[0] = *v239;
        v240 = *((double *)v239 - 17);
        v239 += 17;
        if (a5.f64[0] < v240)
          goto LABEL_99;
      }
    }
    else
    {
      while (v106 != v109)
      {
        *(_QWORD *)&a5.f64[0] = *v106;
        v236 = *((double *)v106 - 17);
        v106 += 17;
        if (a5.f64[0] < v236)
          goto LABEL_99;
      }
    }
LABEL_151:
    v70 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v33 - v51) >> 3);
    v53 = v51;
    v54 = v33;
LABEL_152:
    _CF = v77 >= v70;
    v384 = v77 - v70;
    if (v77 <= v70)
    {
      v390 = v53 + 136 * v77;
      if (!_CF)
      {
        v33 = v390;
        v54 = v390;
      }
    }
    else if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)&v536[-v54] >> 3) >= v384)
    {
      v33 = v54 + 136 * v384;
      do
      {
        *(_OWORD *)(v54 + 72) = xmmword_2103159D8;
        *(_OWORD *)(v54 + 88) = unk_2103159E8;
        *(_OWORD *)(v54 + 104) = xmmword_2103159F8;
        *(_OWORD *)(v54 + 120) = unk_210315A08;
        *(_OWORD *)(v54 + 8) = xmmword_210315998;
        *(_OWORD *)(v54 + 24) = unk_2103159A8;
        a5 = (float64x2_t)xmmword_2103159B8;
        *(_OWORD *)(v54 + 40) = xmmword_2103159B8;
        *(_QWORD *)v54 = 0;
        *(_OWORD *)(v54 + 56) = unk_2103159C8;
        v54 += 136;
      }
      while (v54 != v33);
      v53 = v51;
      v54 = v33;
    }
    else
    {
      v385 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v54 - v53) >> 3);
      v386 = v385 + v384;
      if (v385 + v384 > 0x1E1E1E1E1E1E1E1)
        sub_20EB70DEC();
      if (0xE1E1E1E1E1E1E1E2 * ((uint64_t)&v536[-v53] >> 3) > v386)
        v386 = 0xE1E1E1E1E1E1E1E2 * ((uint64_t)&v536[-v53] >> 3);
      if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)&v536[-v53] >> 3) >= 0xF0F0F0F0F0F0F0)
        v387 = 0x1E1E1E1E1E1E1E1;
      else
        v387 = v386;
      v534 = v52;
      v531 = v55;
      if (v387)
      {
        if (v387 > 0x1E1E1E1E1E1E1E1)
          sub_20E877A38();
        v388 = (char *)operator new(136 * v387);
        v389 = v387;
      }
      else
      {
        v389 = 0;
        v388 = 0;
      }
      v53 = (uint64_t)&v388[136 * v385];
      v54 = v53 + 136 * v384;
      v391 = v53;
      do
      {
        *(_OWORD *)(v391 + 72) = xmmword_2103159D8;
        *(_OWORD *)(v391 + 88) = unk_2103159E8;
        *(_OWORD *)(v391 + 104) = xmmword_2103159F8;
        *(_OWORD *)(v391 + 120) = unk_210315A08;
        *(_OWORD *)(v391 + 8) = xmmword_210315998;
        *(_OWORD *)(v391 + 24) = unk_2103159A8;
        a5 = (float64x2_t)xmmword_2103159B8;
        *(_OWORD *)(v391 + 40) = xmmword_2103159B8;
        *(_QWORD *)v391 = 0;
        *(_OWORD *)(v391 + 56) = unk_2103159C8;
        v391 += 136;
      }
      while (v391 != v54);
      while (v33 != v51)
      {
        v392 = *(_QWORD *)(v33 - 136);
        v33 -= 136;
        *(_QWORD *)(v53 - 136) = v392;
        v53 -= 136;
        v393 = *(_OWORD *)(v33 + 8);
        v394 = *(_OWORD *)(v33 + 24);
        v395 = *(_OWORD *)(v33 + 40);
        *(_OWORD *)(v53 + 56) = *(_OWORD *)(v33 + 56);
        *(_OWORD *)(v53 + 40) = v395;
        *(_OWORD *)(v53 + 24) = v394;
        *(_OWORD *)(v53 + 8) = v393;
        a5 = *(float64x2_t *)(v33 + 72);
        v396 = *(_OWORD *)(v33 + 88);
        v397 = *(_OWORD *)(v33 + 104);
        *(_OWORD *)(v53 + 120) = *(_OWORD *)(v33 + 120);
        *(_OWORD *)(v53 + 104) = v397;
        *(_OWORD *)(v53 + 88) = v396;
        *(float64x2_t *)(v53 + 72) = a5;
      }
      v536 = &v388[136 * v389];
      if (v51)
        operator delete((void *)v51);
      v51 = v53;
      v33 = v54;
      v52 = v534;
      v55 = v531;
    }
LABEL_178:
    v52 -= 1431655765 * ((v56 - v542) >> 4);
    v398 = v54 - v53 - 136;
    if (v54 - v53 != 136 && ++v55 != v39)
      continue;
    break;
  }
  v399 = a4;
  if (v52)
  {
    if (v53 != v54)
    {
      a5.f64[0] = (double)v52;
      v400 = (double *)v53;
      if (v398 < 0x88)
        goto LABEL_329;
      v401 = v398 / 0x88 + 1;
      v400 = (double *)(v53 + 136 * (v401 & 0x3FFFFFFFFFFFFFELL));
      v402 = v401 & 0x3FFFFFFFFFFFFFELL;
      v403 = (double *)v53;
      do
      {
        v404 = v403[17] / a5.f64[0];
        *v403 = *v403 / a5.f64[0];
        v403[17] = v404;
        v403 += 34;
        v402 -= 2;
      }
      while (v402);
      if (v401 != (v401 & 0x3FFFFFFFFFFFFFELL))
      {
LABEL_329:
        do
        {
          *v400 = *v400 / a5.f64[0];
          v400 += 17;
        }
        while (v400 != (double *)v54);
      }
    }
    v405 = 126 - 2 * __clz(0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v54 - v53) >> 3));
    if (v53 == v54)
      v406 = 0;
    else
      v406 = v405;
    a5 = (float64x2_t)sub_20EB712EC(v53, v54, v406, 1, (__n128)a5);
  }
  if (v51 != v33)
  {
    v528 = *(int8x16_t *)(v51 + 8);
    v526 = vextq_s8(v528, v528, 8uLL).u64[0];
    v407 = *(_QWORD *)(v51 + 24);
    v408 = *(_QWORD *)(v51 + 32);
    v532 = *(int8x16_t *)(v51 + 40);
    v529 = vextq_s8(v532, v532, 8uLL).u64[0];
    _D6 = *(_QWORD *)(v51 + 56);
    v410 = *(_QWORD *)(v51 + 64);
    v537 = *(int8x16_t *)(v51 + 72);
    v535 = vextq_s8(v537, v537, 8uLL).u64[0];
    v411 = *(double *)(v51 + 88);
    v412 = *(_QWORD *)(v51 + 96);
    v545 = *(int8x16_t *)(v51 + 104);
    v543 = vextq_s8(v545, v545, 8uLL);
    v49 = 1;
    a6.f64[0] = *(float64_t *)(v51 + 120);
    v50 = *(double *)(v51 + 128);
    v413 = v524;
    v568 = v411;
    v571 = a6;
    v562 = v407;
    v565 = _D6;
    if (!v35)
      goto LABEL_237;
LABEL_236:
    operator delete(v35);
    v407 = v562;
    _D6 = v565;
    v411 = v568;
    a6 = v571;
    goto LABEL_237;
  }
  v49 = 0;
  v545.i64[0] = 0;
  v50 = 1.0;
  a5.f64[0] = 0.0;
  v543 = (int8x16_t)a5;
  a6.f64[0] = 0.0;
  v412 = 0;
  v537.i64[0] = 0;
  v535 = 0;
  v411 = 1.0;
  v410 = 0;
  v532.i64[0] = 0;
  v529 = 1.0;
  _D6 = 0;
  v408 = 0;
  v528.i64[0] = 1.0;
  v526 = 0;
  v407 = 0;
  v413 = v524;
  v568 = 1.0;
  v571 = a6;
  v562 = 0;
  v565 = 0;
  if (v35)
    goto LABEL_236;
LABEL_237:
  if (v51)
  {
    operator delete((void *)v51);
    v407 = v562;
    _D6 = v565;
    v411 = v568;
    a6 = v571;
  }
  if (v573)
  {
    operator delete(v573);
    v407 = v562;
    _D6 = v565;
    v411 = v568;
    a6 = v571;
  }
  if ((v49 & 1) == 0)
  {
    v399->i8[0] = 0;
    v399[8].i8[0] = 0;
    return;
  }
  v447 = 0;
  v575[0] = 0;
  v575[1] = 0;
  *(_QWORD *)&v576 = 0;
  v449 = *v413;
  v448 = v413[1];
  v450 = v448 - *v413;
  v451 = v450 / 48;
  if ((unint64_t)(v450 + 47) >= 0x5F)
  {
    if (v451 >> 61)
      sub_20E867F44();
    v447 = operator new(8 * v451);
    v575[0] = v447;
    v575[1] = v447;
    *(_QWORD *)&v576 = &v447[v451];
    v411 = v568;
    a6 = v571;
    v407 = v562;
    _D6 = v565;
  }
  if (v448 == v449)
  {
    v485 = v447;
    v487 = a4;
LABEL_281:
    v487->i8[0] = 0;
    v487[8].i8[0] = 0;
    if (v485)
      goto LABEL_282;
    return;
  }
  v452 = 0;
  v453 = *(double *)v523 * *(double *)v523;
  if (v451 <= 1)
    v451 = 1;
  *(_QWORD *)&v454.f64[0] = v528.i64[0];
  *(_QWORD *)&v454.f64[1] = v526;
  *(_QWORD *)&v455.f64[0] = v532.i64[0];
  *(_QWORD *)&v455.f64[1] = v529;
  *(_QWORD *)&v456.f64[0] = v537.i64[0];
  *(_QWORD *)&v456.f64[1] = v535;
  *(_QWORD *)&v457.f64[1] = v543.i64[1];
  *(_QWORD *)&v458.f64[0] = v545.i64[0];
  *(_QWORD *)&v458.f64[1] = v543.i64[0];
  v556 = v455;
  v559 = v454;
  v549 = v458;
  v552 = v456;
  while (2)
  {
    v460 = *v413 + 48 * v452;
    v457.f64[0] = *(float64_t *)(v460 + 16);
    _Q1 = *(_OWORD *)v460;
    _Q2 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v454, *(double *)v460), v455, *(float64x2_t *)v460, 1), v456, v457.f64[0]);
    __asm { FMLA            D3, D6, V1.D[1] }
    v457.f64[0] = _D3 + v411 * v457.f64[0];
    v464 = vaddq_f64(_Q2, v458);
    _Q2.f64[0] = *(float64_t *)(v460 + 40);
    v457 = vsubq_f64(vaddq_f64(v457, a6), _Q2);
    _D3 = vsubq_f64(v464, *(float64x2_t *)(v460 + 24)).f64[1];
    __asm { FMLA            D2, D3, V1.D[1] }
    if (vmlad_n_f64(_Q2.f64[0], v457.f64[0], v457.f64[0]) < v453)
    {
      if ((unint64_t)v447 < (unint64_t)v576)
      {
        *v447 = v452;
        v459 = v447 + 1;
        goto LABEL_250;
      }
      v466 = v413;
      v467 = v575[0];
      v468 = (char *)v447 - (char *)v575[0];
      v469 = ((char *)v447 - (char *)v575[0]) >> 3;
      v470 = v469 + 1;
      if ((unint64_t)(v469 + 1) >> 61)
        sub_20E867F44();
      v471 = v576 - (unint64_t)v575[0];
      if ((uint64_t)(v576 - (unint64_t)v575[0]) >> 2 > v470)
        v470 = v471 >> 2;
      if ((unint64_t)v471 >= 0x7FFFFFFFFFFFFFF8)
        v472 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v472 = v470;
      if (v472)
      {
        if (v472 >> 61)
          sub_20E877A38();
        v473 = operator new(8 * v472);
        v411 = v568;
        a6 = v571;
        v407 = v562;
        _D6 = v565;
        v455 = v556;
        v454 = v559;
        v458 = v549;
        v456 = v552;
        v474 = &v473[8 * v469];
        *v474 = v452;
        v459 = v474 + 1;
        v475 = (char *)v447 - v467;
        if (v447 != (_QWORD *)v467)
        {
LABEL_263:
          v476 = v475 - 8;
          if (v476 < 0x168
            || (v479 = ((char *)(v447 - 1) - v467) & 0xFFFFFFFFFFFFFFF8, &v473[v468 - 8 - v479] > &v473[v468 - 8])
            || (_QWORD *)((char *)v447 - v479 - 8) > v447 - 1
            || (unint64_t)((char *)v447 - v473 - v468) < 0x20)
          {
            v477 = v447;
            v413 = v466;
          }
          else
          {
            v480 = (v476 >> 3) + 1;
            v481 = 8 * (v480 & 0x3FFFFFFFFFFFFFFCLL);
            v477 = &v447[v481 / 0xFFFFFFFFFFFFFFF8];
            v474 = (_QWORD *)((char *)v474 - v481);
            v482 = (float64x2_t *)&v473[8 * v469 - 16];
            v483 = (float64x2_t *)(v447 - 2);
            v484 = v480 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v457 = *v483;
              v482[-1] = v483[-1];
              *v482 = v457;
              v482 -= 2;
              v483 -= 2;
              v484 -= 4;
            }
            while (v484);
            v413 = v466;
            if (v480 == (v480 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_266:
              v575[0] = v474;
              v575[1] = v459;
              *(_QWORD *)&v576 = &v473[8 * v472];
              if (v467)
                goto LABEL_267;
              goto LABEL_250;
            }
          }
          do
          {
            v478 = *--v477;
            *--v474 = v478;
          }
          while (v477 != (_QWORD *)v467);
          goto LABEL_266;
        }
      }
      else
      {
        v473 = 0;
        v474 = (_QWORD *)(8 * v469);
        *(_QWORD *)(8 * v469) = v452;
        v459 = (void *)(8 * v469 + 8);
        v475 = (char *)v447 - v467;
        if (v447 != (_QWORD *)v467)
          goto LABEL_263;
      }
      v413 = v466;
      v575[0] = v474;
      v575[1] = v459;
      *(_QWORD *)&v576 = &v473[8 * v472];
      if (v467)
      {
LABEL_267:
        operator delete(v467);
        v458 = v549;
        v456 = v552;
        v455 = v556;
        v454 = v559;
        v407 = v562;
        _D6 = v565;
        v411 = v568;
        a6 = v571;
      }
LABEL_250:
      v575[1] = v459;
      v447 = v459;
    }
    if (++v452 != v451)
      continue;
    break;
  }
  v485 = (uint64_t *)v575[0];
  v486 = (char *)v447 - (char *)v575[0];
  v487 = a4;
  if ((unint64_t)((char *)v447 - (char *)v575[0]) < 0x18)
    goto LABEL_281;
  if (*(_BYTE *)(v523 + 32))
  {
    v590 = 0uLL;
    *(_QWORD *)&v591 = 0;
    if ((unint64_t)v486 >= 0x5555555555555551)
      sub_20E969238();
    v488 = v486 >> 3;
    v489 = 24 * (v486 >> 3);
    v490 = (float64x2_t *)operator new(v489);
    *(_QWORD *)&v590 = v490;
    *(_QWORD *)&v591 = (char *)v490 + 24 * v488;
    v491 = (float64x2_t *)operator new(v489);
    v492 = v491;
    v493 = 0;
    if (v488 <= 1)
      v494 = 1;
    else
      v494 = v488;
    v495 = *v413;
    do
    {
      v496 = (__int128 *)(v495 + 48 * *v485);
      v497 = (char *)v490 + v493;
      v498 = *v496;
      *((_QWORD *)v497 + 2) = *((_QWORD *)v496 + 2);
      *(_OWORD *)v497 = v498;
      v499 = *v485++;
      v500 = v495 + 48 * v499;
      v501 = (char *)v491 + v493;
      v502 = *(_OWORD *)(v500 + 24);
      *((_QWORD *)v501 + 2) = *(_QWORD *)(v500 + 40);
      *(_OWORD *)v501 = v502;
      v493 += 24;
      --v494;
    }
    while (v494);
    sub_20EB70668((uint64_t)&v583, v490, (_DWORD)v490 + v489, v491);
    v503 = v583;
    v504 = vextq_s8(v503, v503, 8uLL).u64[0];
    v505 = *(_QWORD *)v584;
    v506 = *(_QWORD *)&v584[8];
    v507 = *(int8x16_t *)&v584[16];
    v508 = vextq_s8(v507, v507, 8uLL).u64[0];
    v510 = *((_QWORD *)&v585 + 1);
    v509 = v585;
    v511 = *(int8x16_t *)v586;
    v512 = vextq_s8(v511, v511, 8uLL).u64[0];
    v513 = *(_QWORD *)&v586[16];
    v514 = *(_QWORD *)&v586[24];
    v515 = (int8x16_t)v587;
    v516 = vextq_s8(v515, v515, 8uLL).u64[0];
    v517 = *(_QWORD *)v588;
    v518 = *(_QWORD *)&v588[8];
    if (v522)
    {
      v519 = *(void **)v522;
      if (*(_QWORD *)v522)
      {
        *(_QWORD *)(v522 + 8) = v519;
        v569 = v503.i64[0];
        v572 = v513;
        v563 = v505;
        v566 = v507.i64[0];
        v557 = v509;
        v560 = v511.i64[0];
        v550 = v515.i64[0];
        v553 = v504;
        v544 = v517;
        v547 = v508;
        v538 = v516;
        __pb = v512;
        operator delete(v519);
        v516 = v538;
        v512 = __pb;
        v517 = v544;
        v508 = v547;
        v515.i64[0] = v550;
        v504 = v553;
        v509 = v557;
        v511.i64[0] = v560;
        v505 = v563;
        v507.i64[0] = v566;
        v503.i64[0] = v569;
        v513 = v572;
        *(_QWORD *)v522 = 0;
        *(_QWORD *)(v522 + 8) = 0;
        *(_QWORD *)(v522 + 16) = 0;
      }
      *(_OWORD *)v522 = *(_OWORD *)v575;
      *(_QWORD *)(v522 + 16) = v576;
      v575[1] = 0;
      *(_QWORD *)&v576 = 0;
      v575[0] = 0;
    }
    v503.i64[1] = v504;
    *a4 = v503;
    a4[1].i64[0] = v505;
    a4[1].i64[1] = v506;
    v507.i64[1] = v508;
    a4[2] = v507;
    a4[3].i64[0] = v509;
    a4[3].i64[1] = v510;
    v511.i64[1] = v512;
    a4[4] = v511;
    v515.i64[1] = v516;
    a4[5].i64[0] = v513;
    a4[5].i64[1] = v514;
    a4[6] = v515;
    a4[7].i64[0] = v517;
    a4[7].i64[1] = v518;
    a4[8].i8[0] = 1;
    operator delete(v492);
    operator delete(v490);
    v485 = (uint64_t *)v575[0];
    if (!v575[0])
      return;
LABEL_282:
    v575[1] = v485;
    operator delete(v485);
    return;
  }
  if (v522)
  {
    v520 = *(void **)v522;
    if (*(_QWORD *)v522)
    {
      *(_QWORD *)(v522 + 8) = v520;
      operator delete(v520);
      v407 = v562;
      _D6 = v565;
      v411 = v568;
      a6.f64[0] = v571.f64[0];
      *(_QWORD *)v522 = 0;
      *(_QWORD *)(v522 + 8) = 0;
      *(_QWORD *)(v522 + 16) = 0;
      v485 = (uint64_t *)v575[0];
      v447 = v575[1];
    }
    *(_QWORD *)v522 = v485;
    *(_QWORD *)(v522 + 8) = v447;
    *(_QWORD *)(v522 + 16) = v576;
    v575[1] = 0;
    *(_QWORD *)&v576 = 0;
    v575[0] = 0;
    v485 = 0;
  }
  v521.i64[0] = v528.i64[0];
  v521.i64[1] = v526;
  *a4 = v521;
  a4[1].i64[0] = v407;
  a4[1].i64[1] = v408;
  v521.i64[0] = v532.i64[0];
  v521.i64[1] = v529;
  a4[2] = v521;
  a4[3].i64[0] = _D6;
  a4[3].i64[1] = v410;
  v521.i64[0] = v537.i64[0];
  v521.i64[1] = v535;
  a4[4] = v521;
  v521.i64[0] = v545.i64[0];
  v521.i64[1] = v543.i64[0];
  *(double *)a4[5].i64 = v411;
  a4[5].i64[1] = v412;
  a4[6] = v521;
  a4[7].i64[0] = *(_QWORD *)&a6.f64[0];
  *(double *)&a4[7].i64[1] = v50;
  a4[8].i8[0] = 1;
  if (v485)
    goto LABEL_282;
}

void sub_20EB70568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p)
{
  void *v59;
  void *v60;

  operator delete(v60);
  STACK[0x2A8] = (unint64_t)v59;
  operator delete(v59);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20EB70668(uint64_t a1, float64x2_t *a2, int a3, float64x2_t *a4)
{
  unsigned int v7;
  double v8;
  uint64_t v9;
  double v10;
  double *v11;
  double v12;
  unint64_t v13;
  unint64_t v14;
  double *f64;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double *v21;
  unint64_t v22;
  double *v23;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double *v29;
  unint64_t v30;
  double *v31;
  uint64_t v32;
  double v33;
  double v34;
  double v35;
  double v36;
  size_t v37;
  double *v38;
  unint64_t v39;
  uint64_t v40;
  double *v41;
  unint64_t v42;
  float64x2_t v46;
  float64x2_t v51;
  float64x2_t v57;
  float64x2_t v59;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v73;
  float64x2_t v75;
  __n128 v76;
  uint64_t result;
  double *v78;
  double v79;
  unint64_t v80;
  double *v81;
  uint64_t v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double *v87;
  unint64_t v88;
  double *v89;
  uint64_t v90;
  double v91;
  double v92;
  double v93;
  double *v94;
  unint64_t v95;
  double *v96;
  uint64_t v97;
  double v98;
  double v99;
  double v100;
  _OWORD v101[4];
  uint64_t v102;
  _QWORD v103[2];
  unsigned int v104;
  _QWORD v105[2];
  unsigned int v106;
  float64x2_t v107;
  double v108;
  float64x2_t v109;
  double v110;
  _OWORD v111[4];
  uint64_t v112;
  float64x2_t v113;
  _OWORD *v114;
  float64x2_t v115;
  double v116;
  float64x2_t v117;
  double v118;
  float64x2_t v119;
  double v120;
  float64x2_t v121;
  double v122;
  float64x2_t v123;
  double v124;
  uint64_t v125;
  char v126;
  uint64_t v127;

  v127 = *MEMORY[0x24BDAC8D0];
  v7 = (a3 - (int)a2) / 24;
  v8 = (double)v7;
  v9 = 24 * v7;
  if (v7)
  {
    if (v7 == 1)
    {
      v109 = vdivq_f64(*a2, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v8, 0));
      v110 = a2[1].f64[0] / v8;
      v107 = vdivq_f64(*a4, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v8, 0));
      v36 = a4[1].f64[0];
    }
    else
    {
      v11 = &a2[1].f64[1];
      v12 = a2->f64[0];
      v13 = v9 - 48;
      if ((unint64_t)(v9 - 48) < 0x18)
        goto LABEL_60;
      v14 = v13 / 0x18 + 1;
      v11 += 3 * (v14 & 0x1FFFFFFFFFFFFFFELL);
      f64 = a2[3].f64;
      v16 = v14 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        v17 = *(f64 - 3);
        v18 = *f64;
        f64 += 6;
        v12 = v12 + v17 + v18;
        v16 -= 2;
      }
      while (v16);
      if (v14 != (v14 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_60:
        do
        {
          v19 = *v11;
          v11 += 3;
          v12 = v12 + v19;
        }
        while (v11 != (double *)((char *)a2 + v9));
      }
      v109.f64[0] = v12 / v8;
      v20 = a2->f64[1];
      v21 = a2[2].f64;
      if (v13 < 0x18)
        goto LABEL_61;
      v22 = v13 / 0x18 + 1;
      v21 += 3 * (v22 & 0x1FFFFFFFFFFFFFFELL);
      v23 = &a2[3].f64[1];
      v24 = v22 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        v25 = *(v23 - 3);
        v26 = *v23;
        v23 += 6;
        v20 = v20 + v25 + v26;
        v24 -= 2;
      }
      while (v24);
      if (v22 != (v22 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_61:
        do
        {
          v27 = *v21;
          v21 += 3;
          v20 = v20 + v27;
        }
        while (v21 != &a2->f64[(unint64_t)v9 / 8 + 1]);
      }
      v109.f64[1] = v20 / v8;
      v28 = a2[1].f64[0];
      v29 = &a2[2].f64[1];
      if (v13 < 0x18)
        goto LABEL_62;
      v30 = v13 / 0x18 + 1;
      v29 += 3 * (v30 & 0x1FFFFFFFFFFFFFFELL);
      v31 = a2[4].f64;
      v32 = v30 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        v33 = *(v31 - 3);
        v34 = *v31;
        v31 += 6;
        v28 = v28 + v33 + v34;
        v32 -= 2;
      }
      while (v32);
      if (v30 != (v30 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_62:
        do
        {
          v35 = *v29;
          v29 += 3;
          v28 = v28 + v35;
        }
        while (v29 != (double *)((char *)&a2[1] + v9));
      }
      v110 = v28 / v8;
      v78 = &a4[1].f64[1];
      v79 = a4->f64[0];
      if (v13 < 0x18)
        goto LABEL_63;
      v80 = v13 / 0x18 + 1;
      v78 += 3 * (v80 & 0x1FFFFFFFFFFFFFFELL);
      v81 = a4[3].f64;
      v82 = v80 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        v83 = *(v81 - 3);
        v84 = *v81;
        v81 += 6;
        v79 = v79 + v83 + v84;
        v82 -= 2;
      }
      while (v82);
      if (v80 != (v80 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_63:
        do
        {
          v85 = *v78;
          v78 += 3;
          v79 = v79 + v85;
        }
        while (v78 != (double *)((char *)a4 + v9));
      }
      v107.f64[0] = v79 / v8;
      v86 = a4->f64[1];
      v87 = a4[2].f64;
      if (v13 < 0x18)
        goto LABEL_64;
      v88 = v13 / 0x18 + 1;
      v87 += 3 * (v88 & 0x1FFFFFFFFFFFFFFELL);
      v89 = &a4[3].f64[1];
      v90 = v88 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        v91 = *(v89 - 3);
        v92 = *v89;
        v89 += 6;
        v86 = v86 + v91 + v92;
        v90 -= 2;
      }
      while (v90);
      if (v88 != (v88 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_64:
        do
        {
          v93 = *v87;
          v87 += 3;
          v86 = v86 + v93;
        }
        while (v87 != &a4->f64[(unint64_t)v9 / 8 + 1]);
      }
      v107.f64[1] = v86 / v8;
      v36 = a4[1].f64[0];
      v94 = &a4[2].f64[1];
      if (v13 < 0x18)
        goto LABEL_65;
      v95 = v13 / 0x18 + 1;
      v94 += 3 * (v95 & 0x1FFFFFFFFFFFFFFELL);
      v96 = a4[4].f64;
      v97 = v95 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        v98 = *(v96 - 3);
        v99 = *v96;
        v96 += 6;
        v36 = v36 + v98 + v99;
        v97 -= 2;
      }
      while (v97);
      if (v95 != (v95 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_65:
        do
        {
          v100 = *v94;
          v94 += 3;
          v36 = v36 + v100;
        }
        while (v94 != (double *)((char *)&a4[1] + v9));
      }
    }
    v10 = v36 / v8;
  }
  else
  {
    v10 = 0.0 / v8;
    v109.f64[0] = v10;
    v109.f64[1] = v10;
    v110 = v10;
    v107.f64[0] = v10;
    v107.f64[1] = v10;
  }
  v108 = v10;
  v37 = (v9 + 31) & 0xFFFFFFFE0;
  v105[1] = v37 >> 3;
  v38 = (double *)operator new(v37, (std::align_val_t)0x20uLL);
  v105[0] = v38;
  v106 = v7;
  if (v7)
  {
    v39 = 0;
    v40 = 24 * v7;
    do
    {
      *v38++ = a2->f64[(3 * HIDWORD(v39) + v39)] - v109.f64[v39];
      if ((int)v39 >= 2)
        v39 = (v39 & 0xFFFFFFFF00000000) + 0x100000000;
      else
        v39 = (v39 + 1) | v39 & 0xFFFFFFFF00000000;
      v40 -= 8;
    }
    while (v40);
  }
  v103[1] = v37 >> 3;
  v41 = (double *)operator new((v9 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
  v103[0] = v41;
  v104 = v7;
  if (v7)
  {
    v42 = 0;
    do
    {
      *v41++ = a4->f64[(3 * HIDWORD(v42) + v42)] - v107.f64[v42];
      if ((int)v42 >= 2)
        v42 = (v42 & 0xFFFFFFFF00000000) + 0x100000000;
      else
        v42 = (v42 + 1) | v42 & 0xFFFFFFFF00000000;
      v9 -= 8;
    }
    while (v9);
  }
  *(_QWORD *)&v111[0] = v103;
  *(_QWORD *)&v113.f64[1] = v105;
  v114 = v111;
  v115.f64[0] = 1.0;
  sub_20EB7120C((uint64_t)v101, (uint64_t)&v113);
  v126 = 0;
  v125 = 0x300000003;
  v111[2] = v101[2];
  v111[3] = v101[3];
  v112 = v102;
  v111[0] = v101[0];
  v111[1] = v101[1];
  sub_20EB48638((uint64_t)&v113);
  _Q1.f64[0] = v116;
  _D19 = v117.f64[0];
  _D4 = v118;
  v46.f64[0] = v120;
  _Q16 = v119;
  _V20.D[1] = v121.f64[1];
  _D6 = v124;
  _V7.D[1] = v123.f64[1];
  v51 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v113, v119.f64[0]), v115, v119, 1), v117, v120);
  __asm { FMLA            D0, D1, V16.D[1] }
  _Q0.f64[0] = _Q0.f64[0] + v118 * v120;
  v57 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v113, v121.f64[0]), v115, v121, 1), v117, v122);
  __asm { FMLA            D2, D1, V20.D[1] }
  v59.f64[0] = _D2 + v118 * v122;
  _Q2 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v113, v123.f64[0]), v115, v123, 1), v117, v124);
  __asm { FMLA            D21, D1, V7.D[1] }
  _D21 = _D21 + v118 * v124;
  v63 = (float64x2_t)vdupq_laneq_s64(_Q2, 1);
  v64 = (float64x2_t)vextq_s8((int8x16_t)v57, (int8x16_t)v63, 8uLL);
  v63.f64[1] = v51.f64[1];
  v65.f64[0] = v59.f64[0];
  v65.f64[1] = _D21;
  v66.f64[0] = _D21;
  v66.f64[1] = _Q0.f64[0];
  v67 = vmlsq_f64(vmulq_f64(v64, v66), v63, v65);
  if (vmlad_n_f64(vmlad_n_f64(vmulq_f64(v51, v67).f64[0], v67.f64[1], v57.f64[0]), vmlsq_laneq_f64(vmulq_laneq_f64(v59, v51, 1), _Q0, v57, 1).f64[0], *(double *)_Q2.i64) >= 0.0)
  {
    v70 = (float64x2_t)vzip1q_s64((int64x2_t)v51, (int64x2_t)v57);
    _D18 = _Q2.i64[1];
    _Q1.f64[0] = v57.f64[1];
    v71.f64[0] = v51.f64[1];
    v73 = (float64x2_t)vextq_s8((int8x16_t)v70, (int8x16_t)v70, 8uLL);
  }
  else
  {
    *(_QWORD *)&_D23 = vextq_s8((int8x16_t)v117, (int8x16_t)v117, 8uLL).u64[0];
    *(_QWORD *)&v69.f64[0] = vextq_s8((int8x16_t)v119, (int8x16_t)v119, 8uLL).u64[0];
    v46.f64[1] = v122;
    _Q16.f64[1] = v121.f64[0];
    *(_QWORD *)&v69.f64[1] = vextq_s8((int8x16_t)v121, (int8x16_t)v121, 8uLL).u64[0];
    v70 = vmlsq_lane_f64(vmlaq_n_f64(vmulq_n_f64(_Q16, v113.f64[0]), v69, v115.f64[0]), v46, v117.f64[0], 0);
    __asm { FMLS            D2, D19, V6.D[0] }
    v71 = vmlsq_lane_f64(vmlaq_n_f64(vmulq_n_f64(_Q16, *(double *)vextq_s8((int8x16_t)v113, (int8x16_t)v113, 8uLL).i64), v69, *(double *)vextq_s8((int8x16_t)v115, (int8x16_t)v115, 8uLL).i64), v46, _D23, 0);
    __asm { FMLS            D18, D23, V6.D[0] }
    _Q0 = vmlsq_lane_f64(vmlaq_n_f64(vmulq_n_f64(_Q16, *(double *)&v114), v69, v116), v46, v118, 0);
    __asm { FMLS            D21, D4, V6.D[0] }
    _Q1.f64[0] = v71.f64[1];
    v73 = (float64x2_t)vextq_s8((int8x16_t)v70, (int8x16_t)v70, 8uLL);
    *(_QWORD *)&v59.f64[0] = vextq_s8((int8x16_t)_Q0, (int8x16_t)_Q0, 8uLL).u64[0];
  }
  _Q0.f64[1] = v59.f64[0];
  v70.f64[1] = v73.f64[0];
  _V4.D[1] = v109.f64[1];
  v71.f64[1] = _Q1.f64[0];
  __asm { FMLA            D1, D18, V4.D[1] }
  _Q1.f64[0] = _Q1.f64[0] + _D21 * v110;
  v73.f64[0] = v108;
  v75 = vsubq_f64(v107, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v70, v109.f64[0]), v71, v109, 1), _Q0, v110));
  *(float64x2_t *)a1 = v70;
  *(_OWORD *)(a1 + 16) = _Q2.u64[0];
  *(float64x2_t *)(a1 + 32) = v71;
  *(_OWORD *)(a1 + 48) = (unint64_t)_D18;
  *(float64x2_t *)(a1 + 64) = _Q0;
  *(_OWORD *)(a1 + 80) = *(unint64_t *)&_D21;
  *(float64x2_t *)(a1 + 96) = v75;
  *(_QWORD *)(a1 + 112) = *(_OWORD *)&vsubq_f64(v73, _Q1);
  *(_QWORD *)(a1 + 120) = 0x3FF0000000000000;
  v76 = (__n128)sub_20EB70E00(a1);
  if (v103[0])
    MEMORY[0x212BC6368](v103[0], 0x1000C8000313F17, v76);
  result = v105[0];
  if (v105[0])
    return MEMORY[0x212BC6368](v105[0], 0x1000C8000313F17, v76);
  return result;
}

void sub_20EB70D80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v23;

  if (a19)
  {
    MEMORY[0x212BC6368](a19, 0x1000C8000313F17);
    v23 = a22;
    if (!a22)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v23 = a22;
    if (!a22)
      goto LABEL_3;
  }
  MEMORY[0x212BC6368](v23, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

void sub_20EB70DDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a22)
    JUMPOUT(0x20EB70DC0);
  JUMPOUT(0x20EB70D9CLL);
}

void sub_20EB70DEC()
{
  sub_20E860B90("vector");
}

float64x2_t sub_20EB70E00(uint64_t a1)
{
  float64x2_t v2;
  float64x2_t v3;
  float64x2_t v4;
  double v12;
  double v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  double v17;
  __double2 v18;
  double v19;
  double cosval;
  double v21;
  __double2 v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64_t v36;
  float64_t v37;
  double v38;
  float64_t v39;
  float64_t v40;
  double v41;
  float64_t v42;
  float64_t v43;
  float64_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t result;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  double v59;
  int8x16_t v60;
  int8x16_t v61;
  __int128 v62;
  __int128 v63;
  double *v64[2];
  float64x2_t *v65[2];

  v62 = 0u;
  v63 = 0u;
  v61 = 0u;
  v65[0] = (float64x2_t *)a1;
  v65[1] = 0;
  v64[0] = (double *)&v61;
  v64[1] = 0;
  sub_20E95B988(v65, v64);
  _Q26 = (float64x2_t)v61;
  _Q0 = vmulq_f64(_Q26, _Q26);
  _D1 = v61.i64[1];
  __asm { FMLA            D0, D1, V26.D[1] }
  v59 = *(double *)&v62;
  v12 = _Q0.f64[0] + v59 * v59;
  v60 = v61;
  if (v12 < 0.0000002635)
  {
    _Q0.f64[0] = 0.5 - v12 * (v12 / -720.0 + 0.0416666667);
    v13 = 0.166666667 - v12 * (v12 / -5040.0 + 0.00833333333);
    v2.f64[0] = 1.0 - v12 * v13;
    v14 = (float64x2_t)vextq_s8(v61, v61, 8uLL);
    if (v12 >= 2.775e-15)
      goto LABEL_3;
LABEL_7:
    v4.f64[0] = v12 * 0.0000330687831 + v12 * 0.00138888889 + 0.0833333333;
    v3.f64[0] = *(float64_t *)(a1 + 112);
    v15 = *(float64x2_t *)(a1 + 96);
    v16 = (float64x2_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL);
    if (v12 < 0.0000002635)
      goto LABEL_8;
LABEL_10:
    v21 = sqrt(v12);
    v57 = v4;
    v58 = v14;
    v55 = v15;
    v56 = v3;
    v54 = v16;
    v22 = __sincos_stret(v21);
    cosval = v22.__cosval;
    v16 = v54;
    v15 = v55;
    v3 = v56;
    v4 = v57;
    v14 = v58;
    _Q26 = (float64x2_t)v60;
    v19 = v22.__sinval / v21;
    v2.f64[0] = 1.0 / v12 * (1.0 - v22.__cosval);
    _Q0.f64[0] = 1.0 / v12 * (1.0 - v22.__sinval / v21);
    goto LABEL_11;
  }
  v17 = sqrt(v12);
  v18 = __sincos_stret(v17);
  _Q26 = (float64x2_t)v60;
  v2.f64[0] = v18.__sinval / v17;
  _Q0.f64[0] = 1.0 / v12 * (1.0 - v18.__cosval);
  v13 = 1.0 / v12 * (1.0 - v18.__sinval / v17);
  v14 = (float64x2_t)vextq_s8((int8x16_t)_Q26, (int8x16_t)_Q26, 8uLL);
  if (v12 < 2.775e-15)
    goto LABEL_7;
LABEL_3:
  if (v12 <= 9.0)
  {
    v4.f64[0] = (_Q0.f64[0] * 0.5 - v13) / v2.f64[0];
    v3.f64[0] = *(float64_t *)(a1 + 112);
    v15 = *(float64x2_t *)(a1 + 96);
    v16 = (float64x2_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL);
    if (v12 < 0.0000002635)
      goto LABEL_8;
    goto LABEL_10;
  }
  v4.f64[0] = (_Q0.f64[0] + v2.f64[0] * -0.5) / (v12 * _Q0.f64[0]);
  v3.f64[0] = *(float64_t *)(a1 + 112);
  v15 = *(float64x2_t *)(a1 + 96);
  v16 = (float64x2_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL);
  if (v12 >= 0.0000002635)
    goto LABEL_10;
LABEL_8:
  v2.f64[0] = 0.5 - v12 * (v12 / -720.0 + 0.0416666667);
  _Q0.f64[0] = 0.166666667 - v12 * (v12 / -5040.0 + 0.00833333333);
  v19 = 1.0 - v12 * _Q0.f64[0];
  cosval = 1.0 - v12 * v2.f64[0];
LABEL_11:
  v23.f64[0] = v14.f64[0];
  v23.f64[1] = v59;
  v24.f64[0] = v3.f64[0];
  v24.f64[1] = v15.f64[0];
  v25.f64[0] = v15.f64[0];
  v25.f64[1] = v16.f64[0];
  v26 = vmulq_f64(v23, v24);
  v27 = vmulq_f64(_Q26, v16);
  v24.f64[0] = v59;
  v24.f64[1] = _Q26.f64[0];
  v16.f64[1] = v3.f64[0];
  v28 = vsubq_f64(v26, vmulq_f64(v24, v16));
  v29 = vsubq_f64(v27, vmulq_f64(v14, v15));
  __asm { FMOV            V17.2D, #-0.5 }
  v31 = vaddq_f64(v25, vmulq_f64(v28, _Q17));
  v32 = vaddq_f64(v3, vmulq_f64(v29, _Q17));
  v33 = (float64x2_t)vextq_s8((int8x16_t)v28, (int8x16_t)v29, 8uLL);
  v29.f64[1] = v28.f64[0];
  v34 = vaddq_f64(v32, vmulq_f64(v4, vsubq_f64(vmulq_laneq_f64(_Q26, v28, 1), vmulq_f64(v14, v28))));
  v35 = vaddq_f64(v31, vmulq_n_f64(vsubq_f64(vmulq_f64(v23, v29), vmulq_f64(v24, v33)), v4.f64[0]));
  v36 = _Q26.f64[0] * (_Q26.f64[0] * v2.f64[0]) + cosval;
  v37 = v14.f64[0] * (v14.f64[0] * v2.f64[0]) + cosval;
  v38 = v59 * (v59 * v2.f64[0]) + cosval;
  v33.f64[0] = v14.f64[0] * (_Q26.f64[0] * v2.f64[0]);
  v29.f64[0] = v59 * (_Q26.f64[0] * v2.f64[0]);
  v32.f64[0] = v59 * (v14.f64[0] * v2.f64[0]);
  v39 = _Q26.f64[0] * v19;
  v40 = v14.f64[0] * v19;
  v41 = v59 * v19;
  v42 = v33.f64[0] - v41;
  v43 = v29.f64[0] + v40;
  v44 = v33.f64[0] + v41;
  v33.f64[0] = v32.f64[0] - v39;
  v29.f64[0] = v29.f64[0] - v40;
  v32.f64[0] = v32.f64[0] + v39;
  v45 = (float64x2_t)vextq_s8((int8x16_t)v35, (int8x16_t)v34, 8uLL);
  v46 = vsubq_f64(vmulq_laneq_f64(_Q26, v35, 1), vmulq_f64(v14, v35));
  v47 = vaddq_f64(v34, vmulq_f64(v46, v2));
  v34.f64[1] = v35.f64[0];
  v48 = vsubq_f64(vmulq_f64(v23, v34), vmulq_f64(v24, v45));
  v49 = vaddq_f64(v35, vmulq_n_f64(v48, v2.f64[0]));
  v50 = (float64x2_t)vextq_s8((int8x16_t)v48, (int8x16_t)v46, 8uLL);
  v46.f64[1] = v48.f64[0];
  v51 = vsubq_f64(vmulq_f64(v23, v46), vmulq_f64(v24, v50));
  v52 = vmulq_f64(vsubq_f64(vmulq_laneq_f64(_Q26, v48, 1), vmulq_f64(v14, v48)), _Q0);
  *(float64_t *)a1 = v36;
  *(float64_t *)(a1 + 8) = v44;
  *(float64_t *)(a1 + 16) = v29.f64[0];
  result = vaddq_f64(v49, vmulq_n_f64(v51, _Q0.f64[0]));
  *(_QWORD *)(a1 + 24) = 0;
  *(float64_t *)(a1 + 32) = v42;
  *(float64_t *)(a1 + 40) = v37;
  *(float64_t *)(a1 + 48) = v32.f64[0];
  *(_QWORD *)(a1 + 56) = 0;
  *(float64_t *)(a1 + 64) = v43;
  *(float64_t *)(a1 + 72) = v33.f64[0];
  *(double *)(a1 + 80) = v38;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 112) = *(_OWORD *)&vaddq_f64(v47, v52);
  *(float64x2_t *)(a1 + 96) = result;
  *(_QWORD *)(a1 + 120) = 0x3FF0000000000000;
  return result;
}

double sub_20EB7120C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  __int128 v6;
  __int128 v7;
  _OWORD v9[4];
  uint64_t v10;

  v3 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)v3 == a1 || (v4 = **(_QWORD **)(a2 + 16), *(_QWORD *)v4 == a1))
  {
    sub_20EB7120C(v9);
    v7 = v9[3];
    *(_OWORD *)(a1 + 32) = v9[2];
    *(_OWORD *)(a1 + 48) = v7;
    *(_QWORD *)(a1 + 64) = v10;
    v6 = v9[1];
    *(_OWORD *)a1 = v9[0];
    *(_OWORD *)(a1 + 16) = v6;
  }
  else
  {
    v5 = *(_DWORD *)(v3 + 16);
    if (v5 && *(_DWORD *)(v4 + 16))
    {
      sub_20E8BE654(0, 1, 3, 3, v5, *(const double **)v3, 3, *(double **)v4, *(double *)(a2 + 24), 0.0, 3, (double *)a1, 3);
    }
    else
    {
      *(_QWORD *)(a1 + 64) = 0;
      *(_QWORD *)&v6 = 0;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
    }
  }
  return *(double *)&v6;
}

__n128 sub_20EB712EC(uint64_t a1, unint64_t a2, uint64_t a3, char a4, __n128 result)
{
  __int128 *v8;
  __int128 *v9;
  __int128 *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  double *v15;
  double v16;
  double v17;
  double v18;
  __int128 *v19;
  double v20;
  double v21;
  __int128 *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  unint64_t v36;
  _OWORD *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  double v50;
  unint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  double v58;
  unint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  double v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  unint64_t v73;
  double *v74;
  double v75;
  double v76;
  double v77;
  __int128 *v78;
  unint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  double v86;
  __int128 *v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  double v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  unint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  unint64_t v120;
  double *v121;
  double v122;
  double v123;
  double v124;
  __int128 *v125;
  unint64_t v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  double v133;
  __int128 *v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  unint64_t v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  double v154;
  double v155;
  double v156;
  __int128 *v157;
  unint64_t v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  unint64_t v163;
  unint64_t v164;
  double v165;
  unint64_t v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  unint64_t v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  double v176;
  BOOL v177;
  __int128 *v178;
  unint64_t v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  unint64_t v184;
  unint64_t v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  uint64_t v192;
  _OWORD *v193;
  double v194;
  unint64_t v195;
  unint64_t v196;
  double v197;
  double v198;
  unint64_t v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  double v206;
  double v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  BOOL v214;
  double v215;
  unint64_t v216;
  unint64_t v217;
  double v218;
  unint64_t v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  double v226;
  double v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  double v240;
  double v241;
  __int128 *v242;
  double v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  double v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  double v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  unint64_t v260;
  _OWORD *v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  unint64_t v266;
  BOOL v268;
  uint64_t v269;
  unint64_t v270;
  _QWORD *v271;
  unint64_t v272;
  double v273;
  uint64_t v274;
  uint64_t v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  int64_t v280;
  int64_t v281;
  BOOL v282;
  uint64_t v283;
  unint64_t v284;
  unint64_t v285;
  double v286;
  double v287;
  unint64_t v288;
  unint64_t v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  uint64_t v296;
  uint64_t v297;
  int64_t v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  uint64_t v302;
  unint64_t v303;
  unint64_t v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  unint64_t v311;
  uint64_t v312;
  int64_t v313;
  unint64_t v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  uint64_t v321;
  unint64_t v322;
  unint64_t v323;
  double v324;
  unint64_t v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  double v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  unint64_t v342;
  uint64_t v343;
  double v344;
  unint64_t v345;
  __int128 v346;
  __int128 v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;
  double v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  double *v361;
  double *v362;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  __int128 v376;
  __n128 v377;
  __n128 v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  __int128 v384;
  __int128 v385;
  __int128 v386;
  __int128 v387;
  __int128 v388;
  __int128 v389;
  __int128 v390;
  __int128 v391;
  __int128 v392;
  __int128 v393;
  __int128 v394;
  __int128 v395;
  __int128 v396;
  __int128 v397;
  __int128 v398;
  __int128 v399;
  __int128 v400;
  __int128 v401;
  __int128 v402;
  __int128 v403;
  __int128 v404;
  __int128 v405;
  __int128 v406;
  __int128 v407;
  __int128 v408;
  __int128 v409;
  __int128 v410;
  __int128 v411;
  __int128 v412;
  __int128 v413;
  __int128 v414;
  __int128 v415;
  __int128 v416;
  __int128 v417;
  __int128 v418;
  __int128 v419;
  __int128 v420;
  __int128 v421;
  __int128 v422;
  __int128 v423;
  __int128 v424;
  __int128 v425;
  __int128 v426;
  __int128 v427;
  __int128 v428;
  __int128 v429;
  __int128 v430;
  __int128 v431;
  __int128 v432;
  __int128 v433;
  __int128 v434;
  __int128 v435;
  __int128 v436;
  __int128 v437;
  __int128 v438;
  __int128 v439;
  __int128 v440;
  __int128 v441;
  __int128 v442;
  __int128 v443;
  __int128 v444;
  __int128 v445;
  __int128 v446;
  __int128 v447;
  __int128 v448;
  __int128 v449;
  __int128 v450;
  __int128 v451;
  __int128 v452;
  __int128 v453;
  __int128 v454;
  __int128 v455;
  __int128 v456;
  __int128 v457;
  __int128 v458;
  __int128 v459;
  __int128 v460;
  __int128 v461;
  __int128 v462;
  __int128 v463;
  __int128 v464;
  __int128 v465;
  __int128 v466;
  __int128 v467;
  __int128 v468;
  __int128 v469;
  __int128 v470;
  __int128 v471;
  __int128 v472;
  __int128 v473;
  __int128 v474;
  __int128 v475;
  __int128 v476;
  __int128 v477;
  __int128 v478;
  __int128 v479;
  __int128 v480;
  __int128 v481;
  __int128 v482;
  __int128 v483;
  __int128 v484;
  __int128 v485;
  __int128 v486;
  __int128 v487;
  __int128 v488;
  __int128 v489;
  __int128 v490;
  __int128 v491;
  __int128 v492;
  __int128 v493;
  __int128 v494;
  __int128 v495;
  __int128 v496;
  __int128 v497;
  __int128 v498;
  __int128 v499;
  __int128 v500;
  __int128 v501;
  __int128 v502;
  __int128 v503;
  __int128 v504;
  __int128 v505;
  __int128 v506;
  __int128 v507;
  __int128 v508;
  __int128 v509;
  __int128 v510;
  __int128 v511;
  __int128 v512;
  __int128 v513;
  __int128 v514;
  __int128 v515;
  __int128 v516;
  __int128 v517;
  __int128 v518;
  __int128 v519;
  __int128 v520;
  __int128 v521;
  __int128 v522;
  __int128 v523;
  __int128 v524;
  __int128 v525;
  __int128 v526;
  __int128 v527;
  __int128 v528;
  __int128 v529;
  __int128 v530;
  __int128 v531;
  __int128 v532;
  __int128 v533;
  __int128 v534;
  __int128 v535;
  __int128 v536;
  __int128 v537;
  __int128 v538;
  __int128 v539;
  __int128 v540;
  __int128 v541;
  __int128 v542;
  __int128 v543;
  __int128 v544;
  __int128 v545;
  __int128 v546;
  __int128 v547;
  __int128 v548;
  __int128 v549;
  __int128 v550;
  __int128 v551;
  __n128 v552;
  __int128 v553;
  __int128 v554;
  __int128 v555;
  __n128 v556;
  __n128 v557;
  __int128 v558;
  __n128 v559;
  __int128 v560;
  __n128 v561;
  __int128 v562;
  __int128 v563;
  __int128 v564;
  __int128 v565;
  __int128 v566;
  __int128 v567;
  __int128 v568;
  __int128 v569;
  __int128 v570;
  __int128 v571;
  __int128 v572;
  __int128 v573;
  __int128 v574;
  __int128 v575;
  __int128 v576;
  __int128 v577;
  __int128 v578;
  __int128 v579;
  __int128 v580;
  __int128 v581;
  __int128 v582;
  __int128 v583;
  __int128 v584;
  __int128 v585;
  __int128 v586;
  __int128 v587;
  __int128 v588;
  __int128 v589;
  __int128 v590;
  __int128 v591;
  __int128 v592;
  __int128 v593;
  __int128 v594;
  __int128 v595;
  __int128 v596;
  __int128 v597;
  __int128 v598;
  __int128 v599;
  __int128 v600;
  __int128 v601;
  __int128 v602;
  __int128 v603;
  __int128 v604;
  __int128 v605;
  __int128 v606;
  __int128 v607;
  __int128 v608;
  __int128 v609;
  __int128 v610;
  __int128 v611;
  __int128 v612;
  __int128 v613;
  __int128 v614;
  __int128 v615;
  __int128 v616;
  __int128 v617;
  __int128 v618;
  __int128 v619;
  __int128 v620;
  __int128 v621;
  __int128 v622;
  __int128 v623;
  __int128 v624;
  __int128 v625;
  __int128 v626;
  __int128 v627;
  __int128 v628;
  __int128 v629;
  __int128 v630;
  __int128 v631;
  __int128 v632;
  __int128 v633;
  __int128 v634;
  __int128 v635;
  __int128 v636;
  __int128 v637;
  __int128 v638;
  __int128 v639;
  __int128 v640;
  __int128 v641;
  __int128 v642;
  __int128 v643;
  __int128 v644;
  __int128 v645;
  __int128 v646;
  __int128 v647;
  __int128 v648;
  __int128 v649;
  __int128 v650;
  __int128 v651;
  __int128 v652;
  __int128 v653;
  __int128 v654;
  __int128 v655;
  __int128 v656;
  __int128 v657;
  __int128 v658;
  __int128 v659;
  __int128 v660;
  __int128 v661;
  __int128 v662;
  __int128 v663;
  __int128 v664;
  __int128 v665;
  __int128 v666;
  __int128 v667;

BOOL sub_20EB730F0(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  double v6;
  double v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  double v14;
  double v15;
  double v16;
  __int128 *v17;
  double v18;
  double v19;
  __int128 *v20;
  double v21;
  double v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  double v29;
  double v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  double v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  double v40;
  BOOL v41;
  _OWORD *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  double v64;
  double v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  int v79;
  double *v80;
  uint64_t v81;
  double *v82;
  double v83;
  double v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  double v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;

  v4 = 0xF0F0F0F0F0F0F0F1 * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = *(double *)(a2 - 136);
      v7 = *(double *)a1;
      if (v6 < *(double *)a1)
      {
        v154 = *(_OWORD *)(a1 + 72);
        v167 = *(_OWORD *)(a1 + 88);
        v180 = *(_OWORD *)(a1 + 104);
        v193 = *(_OWORD *)(a1 + 120);
        v102 = *(_OWORD *)(a1 + 8);
        v115 = *(_OWORD *)(a1 + 24);
        v128 = *(_OWORD *)(a1 + 40);
        v141 = *(_OWORD *)(a1 + 56);
        *(double *)a1 = v6;
        v8 = *(_OWORD *)(a2 - 128);
        v9 = *(_OWORD *)(a2 - 112);
        v10 = *(_OWORD *)(a2 - 96);
        *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 - 80);
        *(_OWORD *)(a1 + 40) = v10;
        *(_OWORD *)(a1 + 24) = v9;
        *(_OWORD *)(a1 + 8) = v8;
        v11 = *(_OWORD *)(a2 - 64);
        v12 = *(_OWORD *)(a2 - 48);
        v13 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 - 16);
        *(_OWORD *)(a1 + 104) = v13;
        *(_OWORD *)(a1 + 88) = v12;
        *(_OWORD *)(a1 + 72) = v11;
        goto LABEL_41;
      }
      return result;
    case 3uLL:
      v18 = *(double *)(a1 + 136);
      v7 = *(double *)a1;
      v19 = *(double *)(a2 - 136);
      if (v18 >= *(double *)a1)
      {
        if (v19 < v18)
        {
          v162 = *(_OWORD *)(a1 + 208);
          v175 = *(_OWORD *)(a1 + 224);
          v188 = *(_OWORD *)(a1 + 240);
          v201 = *(_OWORD *)(a1 + 256);
          v110 = *(_OWORD *)(a1 + 144);
          v123 = *(_OWORD *)(a1 + 160);
          v136 = *(_OWORD *)(a1 + 176);
          v149 = *(_OWORD *)(a1 + 192);
          *(double *)(a1 + 136) = v19;
          v58 = *(_OWORD *)(a2 - 128);
          v59 = *(_OWORD *)(a2 - 112);
          v60 = *(_OWORD *)(a2 - 80);
          *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 - 96);
          *(_OWORD *)(a1 + 192) = v60;
          *(_OWORD *)(a1 + 144) = v58;
          *(_OWORD *)(a1 + 160) = v59;
          v61 = *(_OWORD *)(a2 - 64);
          v62 = *(_OWORD *)(a2 - 48);
          v63 = *(_OWORD *)(a2 - 16);
          *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 - 32);
          *(_OWORD *)(a1 + 256) = v63;
          *(_OWORD *)(a1 + 208) = v61;
          *(_OWORD *)(a1 + 224) = v62;
          *(double *)(a2 - 136) = v18;
          *(_OWORD *)(a2 - 64) = v162;
          *(_OWORD *)(a2 - 48) = v175;
          *(_OWORD *)(a2 - 32) = v188;
          *(_OWORD *)(a2 - 16) = v201;
          *(_OWORD *)(a2 - 128) = v110;
          *(_OWORD *)(a2 - 112) = v123;
          *(_OWORD *)(a2 - 96) = v136;
          *(_OWORD *)(a2 - 80) = v149;
          v64 = *(double *)(a1 + 136);
          v65 = *(double *)a1;
          if (v64 < *(double *)a1)
          {
            v42 = (_OWORD *)(a1 + 144);
            v163 = *(_OWORD *)(a1 + 72);
            v176 = *(_OWORD *)(a1 + 88);
            v189 = *(_OWORD *)(a1 + 104);
            v202 = *(_OWORD *)(a1 + 120);
            v111 = *(_OWORD *)(a1 + 8);
            v124 = *(_OWORD *)(a1 + 24);
            v137 = *(_OWORD *)(a1 + 40);
            v150 = *(_OWORD *)(a1 + 56);
            *(double *)a1 = v64;
            v66 = *(_OWORD *)(a1 + 176);
            *(_OWORD *)(a1 + 56) = *(_OWORD *)(a1 + 192);
            *(_OWORD *)(a1 + 40) = v66;
            v67 = *(_OWORD *)(a1 + 144);
            *(_OWORD *)(a1 + 24) = *(_OWORD *)(a1 + 160);
            *(_OWORD *)(a1 + 8) = v67;
            v68 = *(_OWORD *)(a1 + 256);
            *(_OWORD *)(a1 + 104) = *(_OWORD *)(a1 + 240);
            v69 = *(_OWORD *)(a1 + 208);
            *(_OWORD *)(a1 + 88) = *(_OWORD *)(a1 + 224);
            *(_OWORD *)(a1 + 72) = v69;
            *(_OWORD *)(a1 + 120) = v68;
            *(double *)(a1 + 136) = v65;
            *(_OWORD *)(a1 + 240) = v189;
            *(_OWORD *)(a1 + 256) = v202;
            *(_OWORD *)(a1 + 208) = v163;
            *(_OWORD *)(a1 + 224) = v176;
            *(_OWORD *)(a1 + 176) = v137;
            *(_OWORD *)(a1 + 192) = v150;
            v48 = v111;
            v47 = v124;
            goto LABEL_23;
          }
        }
      }
      else
      {
        v20 = (__int128 *)(a1 + 8);
        if (v19 >= v18)
        {
          v166 = *(_OWORD *)(a1 + 72);
          v179 = *(_OWORD *)(a1 + 88);
          v192 = *(_OWORD *)(a1 + 104);
          v205 = *(_OWORD *)(a1 + 120);
          v114 = *v20;
          v127 = *(_OWORD *)(a1 + 24);
          v140 = *(_OWORD *)(a1 + 40);
          v153 = *(_OWORD *)(a1 + 56);
          *(double *)a1 = v18;
          v91 = *(_OWORD *)(a1 + 256);
          *(_OWORD *)(a1 + 104) = *(_OWORD *)(a1 + 240);
          *(_OWORD *)(a1 + 120) = v91;
          v92 = *(_OWORD *)(a1 + 224);
          *(_OWORD *)(a1 + 72) = *(_OWORD *)(a1 + 208);
          *(_OWORD *)(a1 + 88) = v92;
          v93 = *(_OWORD *)(a1 + 192);
          *(_OWORD *)(a1 + 40) = *(_OWORD *)(a1 + 176);
          *(_OWORD *)(a1 + 56) = v93;
          v94 = *(_OWORD *)(a1 + 160);
          *v20 = *(_OWORD *)(a1 + 144);
          *(_OWORD *)(a1 + 24) = v94;
          *(double *)(a1 + 136) = v7;
          *(_OWORD *)(a1 + 176) = v140;
          *(_OWORD *)(a1 + 192) = v153;
          *(_OWORD *)(a1 + 144) = v114;
          *(_OWORD *)(a1 + 160) = v127;
          *(_OWORD *)(a1 + 240) = v192;
          *(_OWORD *)(a1 + 256) = v205;
          *(_OWORD *)(a1 + 208) = v166;
          *(_OWORD *)(a1 + 224) = v179;
          v95 = *(double *)(a2 - 136);
          if (v95 >= v7)
            return result;
          v20 = (__int128 *)(a1 + 144);
          v154 = *(_OWORD *)(a1 + 208);
          v167 = *(_OWORD *)(a1 + 224);
          v180 = *(_OWORD *)(a1 + 240);
          v193 = *(_OWORD *)(a1 + 256);
          v102 = *(_OWORD *)(a1 + 144);
          v115 = *(_OWORD *)(a1 + 160);
          v128 = *(_OWORD *)(a1 + 176);
          v141 = *(_OWORD *)(a1 + 192);
          *(double *)(a1 + 136) = v95;
        }
        else
        {
          v154 = *(_OWORD *)(a1 + 72);
          v167 = *(_OWORD *)(a1 + 88);
          v180 = *(_OWORD *)(a1 + 104);
          v193 = *(_OWORD *)(a1 + 120);
          v102 = *v20;
          v115 = *(_OWORD *)(a1 + 24);
          v128 = *(_OWORD *)(a1 + 40);
          v141 = *(_OWORD *)(a1 + 56);
          *(double *)a1 = v19;
        }
        v96 = *(_OWORD *)(a2 - 128);
        v97 = *(_OWORD *)(a2 - 112);
        v98 = *(_OWORD *)(a2 - 80);
        v20[2] = *(_OWORD *)(a2 - 96);
        v20[3] = v98;
        *v20 = v96;
        v20[1] = v97;
        v99 = *(_OWORD *)(a2 - 64);
        v100 = *(_OWORD *)(a2 - 48);
        v101 = *(_OWORD *)(a2 - 16);
        v20[6] = *(_OWORD *)(a2 - 32);
        v20[7] = v101;
        v20[4] = v99;
        v20[5] = v100;
LABEL_41:
        *(double *)(a2 - 136) = v7;
        *(_OWORD *)(a2 - 64) = v154;
        *(_OWORD *)(a2 - 48) = v167;
        *(_OWORD *)(a2 - 32) = v180;
        *(_OWORD *)(a2 - 16) = v193;
        *(_OWORD *)(a2 - 128) = v102;
        *(_OWORD *)(a2 - 112) = v115;
        *(_OWORD *)(a2 - 96) = v128;
        *(_OWORD *)(a2 - 80) = v141;
      }
      return result;
    case 4uLL:
      sub_20EB73A6C(a1, a1 + 136, a1 + 272, a2 - 136);
      return 1;
    case 5uLL:
      sub_20EB73A6C(a1, a1 + 136, a1 + 272, a1 + 408);
      v21 = *(double *)(a2 - 136);
      v22 = *(double *)(a1 + 408);
      if (v21 >= v22)
        return 1;
      v156 = *(_OWORD *)(a1 + 480);
      v169 = *(_OWORD *)(a1 + 496);
      v182 = *(_OWORD *)(a1 + 512);
      v195 = *(_OWORD *)(a1 + 528);
      v104 = *(_OWORD *)(a1 + 416);
      v117 = *(_OWORD *)(a1 + 432);
      v130 = *(_OWORD *)(a1 + 448);
      v143 = *(_OWORD *)(a1 + 464);
      *(double *)(a1 + 408) = v21;
      v23 = *(_OWORD *)(a2 - 128);
      v24 = *(_OWORD *)(a2 - 112);
      v25 = *(_OWORD *)(a2 - 80);
      *(_OWORD *)(a1 + 448) = *(_OWORD *)(a2 - 96);
      *(_OWORD *)(a1 + 464) = v25;
      *(_OWORD *)(a1 + 416) = v23;
      *(_OWORD *)(a1 + 432) = v24;
      v26 = *(_OWORD *)(a2 - 64);
      v27 = *(_OWORD *)(a2 - 48);
      v28 = *(_OWORD *)(a2 - 16);
      *(_OWORD *)(a1 + 512) = *(_OWORD *)(a2 - 32);
      *(_OWORD *)(a1 + 528) = v28;
      *(_OWORD *)(a1 + 480) = v26;
      *(_OWORD *)(a1 + 496) = v27;
      *(double *)(a2 - 136) = v22;
      *(_OWORD *)(a2 - 64) = v156;
      *(_OWORD *)(a2 - 48) = v169;
      *(_OWORD *)(a2 - 32) = v182;
      *(_OWORD *)(a2 - 16) = v195;
      *(_OWORD *)(a2 - 128) = v104;
      *(_OWORD *)(a2 - 112) = v117;
      *(_OWORD *)(a2 - 96) = v130;
      *(_OWORD *)(a2 - 80) = v143;
      v29 = *(double *)(a1 + 408);
      v30 = *(double *)(a1 + 272);
      if (v29 >= v30)
        return 1;
      v157 = *(_OWORD *)(a1 + 344);
      v170 = *(_OWORD *)(a1 + 360);
      v183 = *(_OWORD *)(a1 + 376);
      v196 = *(_OWORD *)(a1 + 392);
      v105 = *(_OWORD *)(a1 + 280);
      v118 = *(_OWORD *)(a1 + 296);
      v131 = *(_OWORD *)(a1 + 312);
      v144 = *(_OWORD *)(a1 + 328);
      v31 = *(_OWORD *)(a1 + 448);
      *(_OWORD *)(a1 + 328) = *(_OWORD *)(a1 + 464);
      *(_OWORD *)(a1 + 312) = v31;
      v32 = *(_OWORD *)(a1 + 416);
      *(_OWORD *)(a1 + 296) = *(_OWORD *)(a1 + 432);
      *(_OWORD *)(a1 + 280) = v32;
      v33 = *(_OWORD *)(a1 + 528);
      *(_OWORD *)(a1 + 376) = *(_OWORD *)(a1 + 512);
      v34 = *(_OWORD *)(a1 + 480);
      *(_OWORD *)(a1 + 360) = *(_OWORD *)(a1 + 496);
      *(double *)(a1 + 272) = v29;
      *(_OWORD *)(a1 + 344) = v34;
      *(_OWORD *)(a1 + 392) = v33;
      *(double *)(a1 + 408) = v30;
      *(_OWORD *)(a1 + 512) = v183;
      *(_OWORD *)(a1 + 528) = v196;
      *(_OWORD *)(a1 + 480) = v157;
      *(_OWORD *)(a1 + 496) = v170;
      *(_OWORD *)(a1 + 448) = v131;
      *(_OWORD *)(a1 + 464) = v144;
      v35 = *(double *)(a1 + 136);
      *(_OWORD *)(a1 + 416) = v105;
      *(_OWORD *)(a1 + 432) = v118;
      if (v29 >= v35)
        return 1;
      v158 = *(_OWORD *)(a1 + 208);
      v171 = *(_OWORD *)(a1 + 224);
      v184 = *(_OWORD *)(a1 + 240);
      v197 = *(_OWORD *)(a1 + 256);
      v106 = *(_OWORD *)(a1 + 144);
      v119 = *(_OWORD *)(a1 + 160);
      v132 = *(_OWORD *)(a1 + 176);
      v145 = *(_OWORD *)(a1 + 192);
      *(double *)(a1 + 136) = v29;
      v36 = *(_OWORD *)(a1 + 328);
      *(_OWORD *)(a1 + 176) = *(_OWORD *)(a1 + 312);
      *(_OWORD *)(a1 + 192) = v36;
      v37 = *(_OWORD *)(a1 + 296);
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(a1 + 280);
      *(_OWORD *)(a1 + 160) = v37;
      v38 = *(_OWORD *)(a1 + 360);
      *(_OWORD *)(a1 + 208) = *(_OWORD *)(a1 + 344);
      *(_OWORD *)(a1 + 224) = v38;
      v39 = *(_OWORD *)(a1 + 392);
      *(_OWORD *)(a1 + 240) = *(_OWORD *)(a1 + 376);
      *(_OWORD *)(a1 + 256) = v39;
      *(double *)(a1 + 272) = v35;
      *(_OWORD *)(a1 + 376) = v184;
      *(_OWORD *)(a1 + 392) = v197;
      *(_OWORD *)(a1 + 344) = v158;
      *(_OWORD *)(a1 + 360) = v171;
      *(_OWORD *)(a1 + 312) = v132;
      *(_OWORD *)(a1 + 328) = v145;
      v40 = *(double *)a1;
      v41 = v29 < *(double *)a1;
      *(_OWORD *)(a1 + 280) = v106;
      *(_OWORD *)(a1 + 296) = v119;
      if (!v41)
        return 1;
      v42 = (_OWORD *)(a1 + 144);
      v159 = *(_OWORD *)(a1 + 72);
      v172 = *(_OWORD *)(a1 + 88);
      v185 = *(_OWORD *)(a1 + 104);
      v198 = *(_OWORD *)(a1 + 120);
      v107 = *(_OWORD *)(a1 + 8);
      v120 = *(_OWORD *)(a1 + 24);
      v133 = *(_OWORD *)(a1 + 40);
      v146 = *(_OWORD *)(a1 + 56);
      *(double *)a1 = v29;
      v43 = *(_OWORD *)(a1 + 176);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a1 + 192);
      *(_OWORD *)(a1 + 40) = v43;
      v44 = *(_OWORD *)(a1 + 144);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a1 + 160);
      *(_OWORD *)(a1 + 8) = v44;
      v45 = *(_OWORD *)(a1 + 256);
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a1 + 240);
      v46 = *(_OWORD *)(a1 + 208);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a1 + 224);
      *(_OWORD *)(a1 + 72) = v46;
      *(_OWORD *)(a1 + 120) = v45;
      *(double *)(a1 + 136) = v40;
      *(_OWORD *)(a1 + 240) = v185;
      *(_OWORD *)(a1 + 256) = v198;
      *(_OWORD *)(a1 + 208) = v159;
      *(_OWORD *)(a1 + 224) = v172;
      *(_OWORD *)(a1 + 176) = v133;
      *(_OWORD *)(a1 + 192) = v146;
      v48 = v107;
      v47 = v120;
      result = 1;
LABEL_23:
      *v42 = v48;
      v42[1] = v47;
      return result;
    default:
      v14 = *(double *)(a1 + 136);
      v15 = *(double *)a1;
      v16 = *(double *)(a1 + 272);
      if (v14 >= *(double *)a1)
      {
        if (v16 < v14)
        {
          v160 = *(_OWORD *)(a1 + 208);
          v173 = *(_OWORD *)(a1 + 224);
          v186 = *(_OWORD *)(a1 + 240);
          v199 = *(_OWORD *)(a1 + 256);
          v108 = *(_OWORD *)(a1 + 144);
          v121 = *(_OWORD *)(a1 + 160);
          v134 = *(_OWORD *)(a1 + 176);
          v147 = *(_OWORD *)(a1 + 192);
          *(double *)(a1 + 136) = v16;
          v49 = *(_OWORD *)(a1 + 328);
          *(_OWORD *)(a1 + 176) = *(_OWORD *)(a1 + 312);
          *(_OWORD *)(a1 + 192) = v49;
          v50 = *(_OWORD *)(a1 + 296);
          *(_OWORD *)(a1 + 144) = *(_OWORD *)(a1 + 280);
          *(_OWORD *)(a1 + 160) = v50;
          v51 = *(_OWORD *)(a1 + 376);
          v52 = *(_OWORD *)(a1 + 360);
          *(_OWORD *)(a1 + 208) = *(_OWORD *)(a1 + 344);
          *(_OWORD *)(a1 + 224) = v52;
          v53 = *(_OWORD *)(a1 + 392);
          *(_OWORD *)(a1 + 240) = v51;
          *(_OWORD *)(a1 + 256) = v53;
          *(double *)(a1 + 272) = v14;
          *(_OWORD *)(a1 + 392) = v199;
          *(_OWORD *)(a1 + 376) = v186;
          *(_OWORD *)(a1 + 360) = v173;
          *(_OWORD *)(a1 + 344) = v160;
          *(_OWORD *)(a1 + 328) = v147;
          *(_OWORD *)(a1 + 312) = v134;
          *(_OWORD *)(a1 + 296) = v121;
          *(_OWORD *)(a1 + 280) = v108;
          if (v16 < v15)
          {
            v161 = *(_OWORD *)(a1 + 72);
            v174 = *(_OWORD *)(a1 + 88);
            v187 = *(_OWORD *)(a1 + 104);
            v200 = *(_OWORD *)(a1 + 120);
            v109 = *(_OWORD *)(a1 + 8);
            v122 = *(_OWORD *)(a1 + 24);
            v135 = *(_OWORD *)(a1 + 40);
            v148 = *(_OWORD *)(a1 + 56);
            *(double *)a1 = v16;
            v54 = *(_OWORD *)(a1 + 176);
            *(_OWORD *)(a1 + 56) = *(_OWORD *)(a1 + 192);
            *(_OWORD *)(a1 + 40) = v54;
            v55 = *(_OWORD *)(a1 + 144);
            *(_OWORD *)(a1 + 24) = *(_OWORD *)(a1 + 160);
            *(_OWORD *)(a1 + 8) = v55;
            v56 = *(_OWORD *)(a1 + 256);
            *(_OWORD *)(a1 + 104) = *(_OWORD *)(a1 + 240);
            v57 = *(_OWORD *)(a1 + 208);
            *(_OWORD *)(a1 + 88) = *(_OWORD *)(a1 + 224);
            *(_OWORD *)(a1 + 72) = v57;
            *(_OWORD *)(a1 + 120) = v56;
            *(double *)(a1 + 136) = v15;
            *(_OWORD *)(a1 + 240) = v187;
            *(_OWORD *)(a1 + 256) = v200;
            *(_OWORD *)(a1 + 208) = v161;
            *(_OWORD *)(a1 + 224) = v174;
            *(_OWORD *)(a1 + 176) = v135;
            *(_OWORD *)(a1 + 192) = v148;
            *(_OWORD *)(a1 + 144) = v109;
            *(_OWORD *)(a1 + 160) = v122;
          }
        }
      }
      else
      {
        v17 = (__int128 *)(a1 + 8);
        if (v16 >= v14)
        {
          v164 = *(_OWORD *)(a1 + 72);
          v177 = *(_OWORD *)(a1 + 88);
          v190 = *(_OWORD *)(a1 + 104);
          v203 = *(_OWORD *)(a1 + 120);
          v112 = *v17;
          v125 = *(_OWORD *)(a1 + 24);
          v138 = *(_OWORD *)(a1 + 40);
          v151 = *(_OWORD *)(a1 + 56);
          *(double *)a1 = v14;
          v70 = *(_OWORD *)(a1 + 256);
          *(_OWORD *)(a1 + 104) = *(_OWORD *)(a1 + 240);
          *(_OWORD *)(a1 + 120) = v70;
          v71 = *(_OWORD *)(a1 + 224);
          *(_OWORD *)(a1 + 72) = *(_OWORD *)(a1 + 208);
          *(_OWORD *)(a1 + 88) = v71;
          v72 = *(_OWORD *)(a1 + 192);
          *(_OWORD *)(a1 + 40) = *(_OWORD *)(a1 + 176);
          *(_OWORD *)(a1 + 56) = v72;
          v73 = *(_OWORD *)(a1 + 160);
          *v17 = *(_OWORD *)(a1 + 144);
          *(_OWORD *)(a1 + 24) = v73;
          *(double *)(a1 + 136) = v15;
          *(_OWORD *)(a1 + 176) = v138;
          *(_OWORD *)(a1 + 192) = v151;
          *(_OWORD *)(a1 + 144) = v112;
          *(_OWORD *)(a1 + 160) = v125;
          *(_OWORD *)(a1 + 240) = v190;
          *(_OWORD *)(a1 + 256) = v203;
          *(_OWORD *)(a1 + 208) = v164;
          *(_OWORD *)(a1 + 224) = v177;
          if (v16 >= v15)
            goto LABEL_27;
          v17 = (__int128 *)(a1 + 144);
          v155 = *(_OWORD *)(a1 + 208);
          v168 = *(_OWORD *)(a1 + 224);
          v181 = *(_OWORD *)(a1 + 240);
          v194 = *(_OWORD *)(a1 + 256);
          v103 = *(_OWORD *)(a1 + 144);
          v116 = *(_OWORD *)(a1 + 160);
          v129 = *(_OWORD *)(a1 + 176);
          v142 = *(_OWORD *)(a1 + 192);
          *(double *)(a1 + 136) = v16;
        }
        else
        {
          v155 = *(_OWORD *)(a1 + 72);
          v168 = *(_OWORD *)(a1 + 88);
          v181 = *(_OWORD *)(a1 + 104);
          v194 = *(_OWORD *)(a1 + 120);
          v103 = *v17;
          v116 = *(_OWORD *)(a1 + 24);
          v129 = *(_OWORD *)(a1 + 40);
          v142 = *(_OWORD *)(a1 + 56);
          *(double *)a1 = v16;
        }
        v74 = *(_OWORD *)(a1 + 392);
        v17[6] = *(_OWORD *)(a1 + 376);
        v17[7] = v74;
        v75 = *(_OWORD *)(a1 + 360);
        v17[4] = *(_OWORD *)(a1 + 344);
        v17[5] = v75;
        v76 = *(_OWORD *)(a1 + 328);
        v17[2] = *(_OWORD *)(a1 + 312);
        v17[3] = v76;
        v77 = *(_OWORD *)(a1 + 296);
        *v17 = *(_OWORD *)(a1 + 280);
        v17[1] = v77;
        *(double *)(a1 + 272) = v15;
        *(_OWORD *)(a1 + 328) = v142;
        *(_OWORD *)(a1 + 312) = v129;
        *(_OWORD *)(a1 + 296) = v116;
        *(_OWORD *)(a1 + 280) = v103;
        *(_OWORD *)(a1 + 392) = v194;
        *(_OWORD *)(a1 + 376) = v181;
        *(_OWORD *)(a1 + 360) = v168;
        *(_OWORD *)(a1 + 344) = v155;
      }
LABEL_27:
      v78 = a1 + 408;
      if (a1 + 408 == a2)
        return 1;
      v79 = 0;
      v80 = (double *)(a1 + 272);
      v81 = 272;
      break;
  }
  while (1)
  {
    v83 = *(double *)v78;
    if (*(double *)v78 < *v80)
    {
      v113 = *(_OWORD *)(v78 + 8);
      v126 = *(_OWORD *)(v78 + 24);
      v139 = *(_OWORD *)(v78 + 40);
      v152 = *(_OWORD *)(v78 + 56);
      v191 = *(_OWORD *)(v78 + 104);
      v204 = *(_OWORD *)(v78 + 120);
      v165 = *(_OWORD *)(v78 + 72);
      v178 = *(_OWORD *)(v78 + 88);
      v84 = *v80;
      v85 = v81;
      do
      {
        v86 = a1 + v85;
        *(double *)(v86 + 136) = v84;
        v87 = *(_OWORD *)(a1 + v85 + 88);
        *(_OWORD *)(v86 + 208) = *(_OWORD *)(a1 + v85 + 72);
        *(_OWORD *)(v86 + 224) = v87;
        v88 = *(_OWORD *)(a1 + v85 + 120);
        *(_OWORD *)(v86 + 240) = *(_OWORD *)(a1 + v85 + 104);
        *(_OWORD *)(v86 + 256) = v88;
        v89 = *(_OWORD *)(a1 + v85 + 24);
        *(_OWORD *)(v86 + 144) = *(_OWORD *)(a1 + v85 + 8);
        *(_OWORD *)(v86 + 160) = v89;
        v90 = *(_OWORD *)(a1 + v85 + 56);
        *(_OWORD *)(v86 + 176) = *(_OWORD *)(a1 + v85 + 40);
        *(_OWORD *)(v86 + 192) = v90;
        if (!v85)
        {
          v82 = (double *)a1;
          goto LABEL_30;
        }
        v84 = *(double *)(v86 - 136);
        v85 -= 136;
      }
      while (v83 < v84);
      v82 = (double *)(a1 + v85 + 136);
LABEL_30:
      *v82 = v83;
      *(_OWORD *)(v86 + 72) = v165;
      *(_OWORD *)(v86 + 88) = v178;
      *(_OWORD *)(v86 + 104) = v191;
      *(_OWORD *)(v86 + 120) = v204;
      *(_OWORD *)(v86 + 8) = v113;
      *(_OWORD *)(v86 + 24) = v126;
      *(_OWORD *)(v86 + 40) = v139;
      ++v79;
      *(_OWORD *)(v86 + 56) = v152;
      if (v79 == 8)
        return v78 + 136 == a2;
    }
    v80 = (double *)v78;
    v81 += 136;
    v78 += 136;
    if (v78 == a2)
      return 1;
  }
}

__n128 sub_20EB73A6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v4;
  double v5;
  double v6;
  __int128 *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __n128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;

  v4 = *(double *)a2;
  v5 = *(double *)a1;
  v6 = *(double *)a3;
  if (*(double *)a2 < *(double *)a1)
  {
    v7 = (__int128 *)(a1 + 8);
    if (v6 >= v4)
    {
      v82 = *(_OWORD *)(a1 + 72);
      v89 = *(_OWORD *)(a1 + 88);
      v96 = *(_OWORD *)(a1 + 104);
      v103 = *(_OWORD *)(a1 + 120);
      v54 = *v7;
      v61 = *(_OWORD *)(a1 + 24);
      v68 = *(_OWORD *)(a1 + 40);
      v75 = *(_OWORD *)(a1 + 56);
      *(double *)a1 = v4;
      v21 = *(_OWORD *)(a2 + 8);
      v22 = *(_OWORD *)(a2 + 24);
      v23 = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 56) = v23;
      *v7 = v21;
      *(_OWORD *)(a1 + 24) = v22;
      v24 = *(_OWORD *)(a2 + 72);
      v25 = *(_OWORD *)(a2 + 88);
      v26 = *(_OWORD *)(a2 + 120);
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 120) = v26;
      *(_OWORD *)(a1 + 72) = v24;
      *(_OWORD *)(a1 + 88) = v25;
      *(double *)a2 = v5;
      *(_OWORD *)(a2 + 72) = v82;
      *(_OWORD *)(a2 + 88) = v89;
      *(_OWORD *)(a2 + 104) = v96;
      *(_OWORD *)(a2 + 120) = v103;
      *(_OWORD *)(a2 + 8) = v54;
      *(_OWORD *)(a2 + 24) = v61;
      *(_OWORD *)(a2 + 40) = v68;
      *(_OWORD *)(a2 + 56) = v75;
      v4 = *(double *)a3;
      if (*(double *)a3 >= v5)
        goto LABEL_11;
      v7 = (__int128 *)(a2 + 8);
      v79 = *(_OWORD *)(a2 + 72);
      v86 = *(_OWORD *)(a2 + 88);
      v93 = *(_OWORD *)(a2 + 104);
      v100 = *(_OWORD *)(a2 + 120);
      v51 = *(_OWORD *)(a2 + 8);
      v58 = *(_OWORD *)(a2 + 24);
      v65 = *(_OWORD *)(a2 + 40);
      v72 = *(_OWORD *)(a2 + 56);
      *(double *)a2 = v4;
    }
    else
    {
      v79 = *(_OWORD *)(a1 + 72);
      v86 = *(_OWORD *)(a1 + 88);
      v93 = *(_OWORD *)(a1 + 104);
      v100 = *(_OWORD *)(a1 + 120);
      v51 = *v7;
      v58 = *(_OWORD *)(a1 + 24);
      v65 = *(_OWORD *)(a1 + 40);
      v72 = *(_OWORD *)(a1 + 56);
      *(double *)a1 = v6;
    }
    v27 = *(_OWORD *)(a3 + 8);
    v28 = *(_OWORD *)(a3 + 24);
    v29 = *(_OWORD *)(a3 + 56);
    v7[2] = *(_OWORD *)(a3 + 40);
    v7[3] = v29;
    *v7 = v27;
    v7[1] = v28;
    v30 = *(_OWORD *)(a3 + 72);
    v31 = *(_OWORD *)(a3 + 88);
    v32 = *(_OWORD *)(a3 + 120);
    v7[6] = *(_OWORD *)(a3 + 104);
    v7[7] = v32;
    v7[4] = v30;
    v7[5] = v31;
    *(double *)a3 = v5;
    *(_OWORD *)(a3 + 72) = v79;
    *(_OWORD *)(a3 + 88) = v86;
    *(_OWORD *)(a3 + 104) = v93;
    *(_OWORD *)(a3 + 120) = v100;
    *(_OWORD *)(a3 + 8) = v51;
    *(_OWORD *)(a3 + 24) = v58;
    *(_OWORD *)(a3 + 40) = v65;
    v4 = v5;
    *(_OWORD *)(a3 + 56) = v72;
LABEL_11:
    result.n128_u64[0] = *(_QWORD *)a4;
    if (*(double *)a4 >= v4)
      return result;
    goto LABEL_14;
  }
  if (v6 >= v4)
  {
    v4 = *(double *)a3;
    result.n128_u64[0] = *(_QWORD *)a4;
    if (*(double *)a4 >= v6)
      return result;
  }
  else
  {
    v80 = *(_OWORD *)(a2 + 72);
    v87 = *(_OWORD *)(a2 + 88);
    v94 = *(_OWORD *)(a2 + 104);
    v101 = *(_OWORD *)(a2 + 120);
    v52 = *(_OWORD *)(a2 + 8);
    v59 = *(_OWORD *)(a2 + 24);
    v66 = *(_OWORD *)(a2 + 40);
    v73 = *(_OWORD *)(a2 + 56);
    *(double *)a2 = v6;
    v8 = *(_OWORD *)(a3 + 8);
    v9 = *(_OWORD *)(a3 + 24);
    v10 = *(_OWORD *)(a3 + 40);
    *(_OWORD *)(a2 + 56) = *(_OWORD *)(a3 + 56);
    *(_OWORD *)(a2 + 40) = v10;
    *(_OWORD *)(a2 + 24) = v9;
    *(_OWORD *)(a2 + 8) = v8;
    v11 = *(_OWORD *)(a3 + 72);
    v12 = *(_OWORD *)(a3 + 88);
    v13 = *(_OWORD *)(a3 + 104);
    *(_OWORD *)(a2 + 120) = *(_OWORD *)(a3 + 120);
    *(_OWORD *)(a2 + 104) = v13;
    *(_OWORD *)(a2 + 88) = v12;
    *(_OWORD *)(a2 + 72) = v11;
    *(double *)a3 = v4;
    *(_OWORD *)(a3 + 72) = v80;
    *(_OWORD *)(a3 + 88) = v87;
    *(_OWORD *)(a3 + 104) = v94;
    *(_OWORD *)(a3 + 120) = v101;
    *(_OWORD *)(a3 + 8) = v52;
    *(_OWORD *)(a3 + 24) = v59;
    result.n128_u64[1] = *((_QWORD *)&v66 + 1);
    *(_OWORD *)(a3 + 40) = v66;
    *(_OWORD *)(a3 + 56) = v73;
    result.n128_u64[0] = *(_QWORD *)a1;
    if (*(double *)a2 >= *(double *)a1)
      goto LABEL_11;
    v81 = *(_OWORD *)(a1 + 72);
    v88 = *(_OWORD *)(a1 + 88);
    v95 = *(_OWORD *)(a1 + 104);
    v102 = *(_OWORD *)(a1 + 120);
    v53 = *(_OWORD *)(a1 + 8);
    v60 = *(_OWORD *)(a1 + 24);
    v67 = *(_OWORD *)(a1 + 40);
    v74 = *(_OWORD *)(a1 + 56);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v15 = *(_OWORD *)(a2 + 8);
    v16 = *(_OWORD *)(a2 + 24);
    v17 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v17;
    *(_OWORD *)(a1 + 24) = v16;
    *(_OWORD *)(a1 + 8) = v15;
    v18 = *(_OWORD *)(a2 + 72);
    v19 = *(_OWORD *)(a2 + 88);
    v20 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = v20;
    *(_OWORD *)(a1 + 88) = v19;
    *(_OWORD *)(a1 + 72) = v18;
    *(_QWORD *)a2 = result.n128_u64[0];
    *(_OWORD *)(a2 + 72) = v81;
    *(_OWORD *)(a2 + 88) = v88;
    *(_OWORD *)(a2 + 104) = v95;
    *(_OWORD *)(a2 + 120) = v102;
    *(_OWORD *)(a2 + 8) = v53;
    *(_OWORD *)(a2 + 24) = v60;
    result.n128_u64[1] = *((_QWORD *)&v67 + 1);
    *(_OWORD *)(a2 + 40) = v67;
    *(_OWORD *)(a2 + 56) = v74;
    v4 = *(double *)a3;
    result.n128_u64[0] = *(_QWORD *)a4;
    if (*(double *)a4 >= *(double *)a3)
      return result;
  }
LABEL_14:
  v83 = *(_OWORD *)(a3 + 72);
  v90 = *(_OWORD *)(a3 + 88);
  v97 = *(_OWORD *)(a3 + 104);
  v104 = *(_OWORD *)(a3 + 120);
  v55 = *(_OWORD *)(a3 + 8);
  v62 = *(_OWORD *)(a3 + 24);
  v69 = *(_OWORD *)(a3 + 40);
  v76 = *(_OWORD *)(a3 + 56);
  *(_QWORD *)a3 = result.n128_u64[0];
  v33 = *(_OWORD *)(a4 + 8);
  v34 = *(_OWORD *)(a4 + 24);
  v35 = *(_OWORD *)(a4 + 40);
  *(_OWORD *)(a3 + 56) = *(_OWORD *)(a4 + 56);
  *(_OWORD *)(a3 + 40) = v35;
  *(_OWORD *)(a3 + 24) = v34;
  *(_OWORD *)(a3 + 8) = v33;
  v36 = *(_OWORD *)(a4 + 72);
  v37 = *(_OWORD *)(a4 + 88);
  v38 = *(_OWORD *)(a4 + 104);
  *(_OWORD *)(a3 + 120) = *(_OWORD *)(a4 + 120);
  *(_OWORD *)(a3 + 104) = v38;
  *(_OWORD *)(a3 + 88) = v37;
  *(_OWORD *)(a3 + 72) = v36;
  *(double *)a4 = v4;
  *(_OWORD *)(a4 + 72) = v83;
  *(_OWORD *)(a4 + 88) = v90;
  *(_OWORD *)(a4 + 104) = v97;
  *(_OWORD *)(a4 + 120) = v104;
  *(_OWORD *)(a4 + 8) = v55;
  *(_OWORD *)(a4 + 24) = v62;
  result.n128_u64[1] = *((_QWORD *)&v69 + 1);
  *(_OWORD *)(a4 + 40) = v69;
  *(_OWORD *)(a4 + 56) = v76;
  result.n128_u64[0] = *(_QWORD *)a2;
  if (*(double *)a3 < *(double *)a2)
  {
    v84 = *(_OWORD *)(a2 + 72);
    v91 = *(_OWORD *)(a2 + 88);
    v98 = *(_OWORD *)(a2 + 104);
    v105 = *(_OWORD *)(a2 + 120);
    v56 = *(_OWORD *)(a2 + 8);
    v63 = *(_OWORD *)(a2 + 24);
    v70 = *(_OWORD *)(a2 + 40);
    v77 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)a2 = *(_QWORD *)a3;
    v39 = *(_OWORD *)(a3 + 8);
    v40 = *(_OWORD *)(a3 + 24);
    v41 = *(_OWORD *)(a3 + 40);
    *(_OWORD *)(a2 + 56) = *(_OWORD *)(a3 + 56);
    *(_OWORD *)(a2 + 40) = v41;
    *(_OWORD *)(a2 + 24) = v40;
    *(_OWORD *)(a2 + 8) = v39;
    v42 = *(_OWORD *)(a3 + 72);
    v43 = *(_OWORD *)(a3 + 88);
    v44 = *(_OWORD *)(a3 + 104);
    *(_OWORD *)(a2 + 120) = *(_OWORD *)(a3 + 120);
    *(_OWORD *)(a2 + 104) = v44;
    *(_OWORD *)(a2 + 88) = v43;
    *(_OWORD *)(a2 + 72) = v42;
    *(_QWORD *)a3 = result.n128_u64[0];
    *(_OWORD *)(a3 + 72) = v84;
    *(_OWORD *)(a3 + 88) = v91;
    *(_OWORD *)(a3 + 104) = v98;
    *(_OWORD *)(a3 + 120) = v105;
    *(_OWORD *)(a3 + 8) = v56;
    *(_OWORD *)(a3 + 24) = v63;
    result.n128_u64[1] = *((_QWORD *)&v70 + 1);
    *(_OWORD *)(a3 + 40) = v70;
    *(_OWORD *)(a3 + 56) = v77;
    result.n128_u64[0] = *(_QWORD *)a1;
    if (*(double *)a2 < *(double *)a1)
    {
      v85 = *(_OWORD *)(a1 + 72);
      v92 = *(_OWORD *)(a1 + 88);
      v99 = *(_OWORD *)(a1 + 104);
      v106 = *(_OWORD *)(a1 + 120);
      v57 = *(_OWORD *)(a1 + 8);
      v64 = *(_OWORD *)(a1 + 24);
      v71 = *(__n128 *)(a1 + 40);
      v78 = *(_OWORD *)(a1 + 56);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v45 = *(_OWORD *)(a2 + 8);
      v46 = *(_OWORD *)(a2 + 24);
      v47 = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 40) = v47;
      *(_OWORD *)(a1 + 24) = v46;
      *(_OWORD *)(a1 + 8) = v45;
      v48 = *(_OWORD *)(a2 + 72);
      v49 = *(_OWORD *)(a2 + 88);
      v50 = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
      *(_OWORD *)(a1 + 104) = v50;
      *(_OWORD *)(a1 + 88) = v49;
      *(_OWORD *)(a1 + 72) = v48;
      *(_QWORD *)a2 = result.n128_u64[0];
      *(_OWORD *)(a2 + 72) = v85;
      *(_OWORD *)(a2 + 88) = v92;
      *(_OWORD *)(a2 + 104) = v99;
      *(_OWORD *)(a2 + 120) = v106;
      *(_OWORD *)(a2 + 8) = v57;
      *(_OWORD *)(a2 + 24) = v64;
      result = v71;
      *(__n128 *)(a2 + 40) = v71;
      *(_OWORD *)(a2 + 56) = v78;
    }
  }
  return result;
}

double sub_20EB73F7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, __int128 *a6, __int128 *a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float64x2_t v17;
  double v18;
  double v19;
  double v20;
  float64x2_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  double v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;

  v14 = *a4;
  v15 = a4[1] - *a4;
  if (v15 != a5[1] - *a5)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/RANSAC/ThreePlusOnePreemptiveRansac.cpp", 44, (uint64_t)"p.size() == q.size()", 20, (uint64_t)&unk_2102551FA, 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_11;
    }
    v14 = *a4;
    v15 = a4[1] - *a4;
  }
  if ((v15 & 8) == 0)
    goto LABEL_7;
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/RANSAC/ThreePlusOnePreemptiveRansac.cpp", 45, (uint64_t)"p.size() % 2 == 0", 17, (uint64_t)&unk_2102551FA, 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_11:
    abort();
  }
  v14 = *a4;
  v15 = a4[1] - *a4;
LABEL_7:
  v16 = *a5;
  v33 = v14;
  *(_QWORD *)&v34 = v16;
  sub_20EB48994(a1 + 32, &v33, (unint64_t)(v15 >> 3) >> 1);
  v29 = *a6;
  v30 = *((_QWORD *)a6 + 2);
  v31 = *a7;
  v32 = *((_QWORD *)a7 + 2);
  v33 = 0;
  v28 = 1.0 / (*(double *)(a1 + 24) * *(double *)(a1 + 24));
  if (sub_20EB74148((__n128 *)&v33, (uint64_t *)(a1 + 32), (uint64_t)&v29, &v28, *(_QWORD *)(a1 + 8), *(_QWORD *)a1, *(_QWORD *)(a1 + 16), v28, 1.0, v17, v18, v19, v20, v21))
  {
    v22 = v35;
    v23 = v37;
    *(_OWORD *)(a3 + 32) = v36;
    *(_OWORD *)(a3 + 48) = v23;
    *(_QWORD *)(a3 + 64) = v38;
    *(_OWORD *)a3 = v34;
    *(_OWORD *)(a3 + 16) = v22;
    v24 = v40;
    *(_OWORD *)a2 = v39;
    *(_OWORD *)(a2 + 16) = v24;
    v25 = v44;
    *(_OWORD *)(a2 + 64) = v43;
    *(_OWORD *)(a2 + 80) = v25;
    v26 = v42;
    *(_OWORD *)(a2 + 32) = v41;
    *(_OWORD *)(a2 + 48) = v26;
  }
  else
  {
    *(_QWORD *)(a2 + 40) = 0x3FF0000000000000;
    *(_QWORD *)a2 = 0x3FF0000000000000;
    *(_QWORD *)&v26 = 0;
    *(_OWORD *)(a2 + 8) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = xmmword_21030D320;
  }
  return *(double *)&v26;
}

uint64_t sub_20EB74148(__n128 *a1, uint64_t *a2, uint64_t a3, double *a4, unint64_t a5, unint64_t a6, unint64_t a7, double a8, double a9, float64x2_t a10, double a11, double a12, double a13, float64x2_t _Q6)
{
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  float64x2_t *v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *f64;
  uint64_t v33;
  unint64_t v34;
  float64x2_t *v35;
  unsigned int v36;
  float64x2_t *v37;
  float64x2_t v38;
  __n128 *v39;
  __n128 *v40;
  __n128 *v41;
  double v42;
  double v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  float64x2_t *v49;
  float64_t v50;
  float64_t v51;
  float64x2_t *v52;
  float64_t v53;
  float64_t v54;
  float64x2_t *v55;
  float64_t v56;
  float64_t v57;
  char *v58;
  double v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v70;
  float64x2_t v71;
  double v73;
  double v74;
  float64x2_t v75;
  int8x16_t v76;
  double v77;
  int8x16_t v80;
  float64x2_t v81;
  double v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  int8x16_t v91;
  float64x2_t v92;
  int8x16_t v93;
  unint64_t v94;
  double v95;
  int8x16_t v96;
  double v97;
  double v98;
  int8x16_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  int8x16_t v110;
  float64x2_t v111;
  int8x16_t v112;
  double v113;
  int64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  double v120;
  double v121;
  int8x16_t v124;
  float64x2_t v125;
  double v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  double v136;
  int8x16_t v137;
  float64x2_t v138;
  int8x16_t v139;
  unint64_t v140;
  float64x2_t v142;
  unint64_t v143;
  double v144;
  double v145;
  int8x16_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  int8x16_t v158;
  int8x16_t v159;
  float64x2_t v160;
  int8x16_t v161;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  double v171;
  float64x2_t v172;
  double v174;
  float64x2_t v175;
  double v176;
  double v177;
  double v178;
  double v179;
  double v180;
  double v181;
  double v182;
  double v183;
  float64x2_t v184;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v192;
  double v194;
  float64x2_t v195;
  double v197;
  double v198;
  double v199;
  double v200;
  double v201;
  double v202;
  double v203;
  double v204;
  double v205;
  double v206;
  double v207;
  double v208;
  double v209;
  double v210;
  double v211;
  double v212;
  double v213;
  double v214;
  double v215;
  double v216;
  double v217;
  double v218;
  double v219;
  double v220;
  double v221;
  double v222;
  double v223;
  double v224;
  double v225;
  double v226;
  double v227;
  double v228;
  double v229;
  double v230;
  double v231;
  double v232;
  double v233;
  double v234;
  double v235;
  double v236;
  unsigned int v237;
  unint64_t v238;
  unsigned int v239;
  double v240;
  double v241;
  uint64_t v242;
  double v243;
  double v244;
  double v245;
  double v246;
  double v247;
  double v248;
  double v249;
  double v250;
  double v251;
  double v252;
  double v253;
  uint64_t v254;
  float64x2_t v255;
  float64x2_t v256;
  float64x2_t v257;
  float64x2_t v258;
  float64x2_t v259;
  uint64_t v260;
  float64x2_t v261;
  unsigned int v262;
  __double2 v263;
  double v264;
  float64x2_t v265;
  double v267;
  double v268;
  float64x2_t v269;
  float64x2_t v273;
  float64x2_t v274;
  double v275;
  double v276;
  double v281;
  float64x2_t v282;
  float64x2_t v283;
  int8x16_t v284;
  char *v285;
  __int128 v286;
  __int128 v287;
  float64x2_t *v288;
  __int128 v289;
  int v290;
  uint64_t v291;
  int v292;
  float64x2_t v293;
  float64x2_t v294;
  double v295;
  float64x2_t *v296;
  double v297;
  double v298;
  double v299;
  double v300;
  double v301;
  double v302;
  double v303;
  double v305;
  double v306;
  double v307;
  float64x2_t v308;
  double v309;
  double v310;
  double v311;
  double v312;
  float64x2_t v313;
  float64x2_t v314;
  double v316;
  float64x2_t v317;
  float64x2_t v318;
  float64x2_t v319;
  double v320;
  double v321;
  double v322;
  float64x2_t *v323;
  double v324;
  double v325;
  double v326;
  double v327;
  float64x2_t v328;
  float64x2_t v329;
  float64x2_t v330;
  float64x2_t v331;
  float64x2_t v333;
  float64x2_t v334;
  double v339;
  double v340;
  _BOOL4 v341;
  int v342;
  _BOOL4 v343;
  int v344;
  double v345;
  double v346;
  double v347;
  double v348;
  float64x2_t v349;
  float64x2_t v350;
  double v355;
  int v357;
  BOOL v358;
  double v359;
  double v360;
  double v361;
  double v362;
  float64x2_t v363;
  double v368;
  double v369;
  BOOL v370;
  int v372;
  BOOL v373;
  BOOL v374;
  int v375;
  char v376;
  unint64_t *v377;
  unint64_t v378;
  unint64_t v379;
  unint64_t v380;
  unint64_t v381;
  unint64_t v382;
  unint64_t v383;
  unint64_t v384;
  unint64_t v385;
  unint64_t v386;
  unint64_t v387;
  unint64_t v388;
  __n128 v389;
  unint64_t v390;
  unint64_t v391;
  unint64_t v392;
  unint64_t v393;
  unint64_t v394;
  unint64_t v395;
  unint64_t v396;
  char *v397;
  char *v398;
  __int128 v399;
  __n128 *v400;
  __n128 v401;
  __n128 v402;
  __n128 v403;
  __n128 v404;
  __n128 v405;
  __n128 v406;
  __n128 v407;
  char *v408;
  __n128 v409;
  float64_t v410;
  float64_t v411;
  unsigned int v412;
  __n128 *v413;
  uint64_t v414;
  __n128 *v415;
  double *v416;
  double *v417;
  double v418;
  uint64_t v419;
  float64x2_t v420;
  int64x2_t v421;
  double v422;
  double *v423;
  double v424;
  double v427;
  double v429;
  float64x2_t v430;
  float64x2_t v431;
  float64x2_t v432;
  double v433;
  double v434;
  char *v435;
  unint64_t v436;
  unint64_t v437;
  double *v438;
  unint64_t v439;
  uint64_t v440;
  double *v441;
  double v442;
  unint64_t v443;
  __n128 *v444;
  unint64_t v445;
  __n128 *v446;
  __n128 *v447;
  double v448;
  double v449;
  __n128 v450;
  __n128 v451;
  __n128 v452;
  __n128 v453;
  __n128 v454;
  __n128 v455;
  __n128 v456;
  __n128 v457;
  __n128 v458;
  __n128 v459;
  __n128 v460;
  __n128 v461;
  __n128 v462;
  __n128 v463;
  __n128 v464;
  __n128 v465;
  __n128 v466;
  __n128 v467;
  __n128 v468;
  __n128 v469;
  __n128 v470;
  __n128 v471;
  __n128 v472;
  int v473;
  double v474;
  __n128 *v475;
  double *v476;
  double *v477;
  double *v478;
  double v479;
  double v480;
  __n128 v481;
  __n128 v482;
  __n128 v483;
  __n128 v484;
  __n128 v485;
  __n128 v486;
  __n128 v487;
  __n128 v488;
  __n128 v489;
  __n128 v490;
  __n128 v491;
  __n128 v492;
  __n128 v493;
  __n128 v494;
  __n128 v495;
  __n128 v496;
  __n128 v497;
  __n128 v498;
  __n128 v499;
  __n128 v500;
  __n128 v501;
  __n128 v502;
  __n128 v503;
  __n128 v504;
  __n128 v505;
  __n128 v506;
  __n128 v507;
  __n128 v508;
  __n128 v509;
  __n128 v510;
  __n128 v511;
  __n128 v512;
  __n128 v513;
  __n128 v514;
  __n128 v515;
  __n128 v516;
  __n128 v517;
  __n128 v518;
  __n128 v519;
  __n128 v520;
  __n128 v521;
  __n128 v522;
  __n128 v523;
  __n128 v524;
  __n128 v525;
  __n128 v526;
  __n128 v527;
  __n128 v528;
  __n128 v529;
  __n128 v530;
  __n128 v531;
  __n128 v532;
  __n128 v533;
  __n128 v534;
  __n128 v535;
  __n128 v536;
  __n128 v537;
  __n128 v538;
  __n128 v539;
  __n128 v540;
  __n128 v541;
  __n128 v542;
  __n128 v543;
  __n128 v544;
  __n128 v545;
  __n128 v546;
  __n128 v547;
  __n128 v548;
  __n128 v549;
  __n128 v550;
  __n128 v551;
  __n128 v552;
  __n128 v553;
  __n128 v554;
  __n128 v555;
  __n128 v556;
  __n128 v557;
  __n128 v558;
  __n128 v559;
  __n128 v560;
  __n128 v561;
  __n128 v562;
  __n128 v563;
  __n128 v564;
  __n128 v565;
  __n128 v566;
  __n128 v567;
  __n128 v568;
  __n128 v569;
  __n128 v570;
  __n128 v571;
  __n128 v572;
  __n128 v573;
  __n128 v574;
  __n128 v575;
  __n128 v576;
  __n128 v577;
  __n128 v578;
  __n128 v579;
  __n128 v580;
  __n128 v581;
  __n128 v582;
  __n128 v583;
  __n128 v584;
  __n128 v585;
  __n128 v586;
  __n128 v587;
  __n128 v588;
  __n128 v589;
  __n128 v590;
  __n128 v591;
  __n128 v592;
  __n128 v593;
  __n128 v594;
  __n128 v595;
  __n128 v596;
  __n128 v597;
  __n128 v598;
  __n128 v599;
  __n128 v600;
  __n128 v601;
  __n128 v602;
  __n128 v603;
  __n128 v604;
  __n128 v605;
  __n128 v606;
  __n128 v607;
  __n128 v608;
  __n128 v609;
  __n128 v610;
  __n128 v611;
  __n128 v612;
  __n128 v613;
  __n128 v614;
  __n128 v615;
  __n128 v616;
  __n128 v617;
  __n128 v618;
  __n128 v619;
  __n128 v620;
  __n128 v621;
  __n128 v622;
  __n128 v623;
  __n128 v624;
  __n128 v625;
  __n128 v626;
  __n128 v627;
  __n128 v628;
  __n128 v629;
  __n128 v630;
  __n128 v631;
  __n128 v632;
  __n128 v633;
  __n128 v634;
  __n128 v635;
  __n128 v636;
  __n128 v637;
  __n128 v638;
  __n128 v639;
  __n128 v640;
  __n128 v641;
  __n128 v642;
  __n128 v643;
  __n128 v644;
  unint64_t n128_u64;
  double v646;
  __n128 *v647;
  __n128 *v648;
  double v649;
  __n128 v650;
  __n128 v651;
  __n128 v652;
  __n128 v653;
  __n128 v654;
  __n128 v655;
  __n128 v656;
  __n128 v657;
  __n128 v658;
  __n128 v659;
  __n128 v660;
  __n128 v661;
  __n128 v662;
  __n128 v663;
  __n128 v664;
  __n128 v665;
  __n128 v666;
  __n128 v667;
  __n128 v668;
  __n128 v669;
  __n128 v670;
  __n128 v671;
  __n128 v672;
  double v673;
  double v674;
  __n128 v675;
  __n128 v676;
  __n128 v677;
  __n128 v678;
  __n128 v679;
  __n128 v680;
  __n128 v681;
  __n128 v682;
  __n128 v683;
  __n128 v684;
  __n128 v685;
  __n128 v686;
  __n128 v687;
  __n128 v688;
  __n128 v689;
  __n128 v690;
  __n128 v691;
  __n128 v692;
  __n128 v693;
  __n128 v694;
  __n128 v695;
  __n128 v696;
  __n128 v697;
  __n128 v698;
  double v699;
  unsigned int v700;
  unint64_t v702;
  __n128 *v703;
  __n128 *v704;
  __n128 *v705;
  double v706;
  double v707;
  __n128 v708;
  __n128 v709;
  __n128 v710;
  __n128 v711;
  __n128 v712;
  __n128 v713;
  __n128 v714;
  __n128 v715;
  __int128 v716;
  __int128 v717;
  __int128 v718;
  __int128 v719;
  __int128 v720;
  __int128 v721;
  __n128 v722;
  __n128 v723;
  __n128 v724;
  __n128 v725;
  __n128 v726;
  __n128 v727;
  __n128 v728;
  __n128 v729;
  __n128 v730;
  __n128 v731;
  __n128 v732;
  __n128 v733;
  __n128 v734;
  __n128 v735;
  __n128 v736;
  __n128 v737;
  __n128 v738;
  __n128 v739;
  __n128 v740;
  double v741;
  __n128 v742;
  __n128 v743;
  __n128 v744;
  __n128 v745;
  __n128 v746;
  __n128 v747;
  __n128 v748;
  __n128 v749;
  __n128 v750;
  __n128 v751;
  __n128 v752;
  __n128 v753;
  __n128 v754;
  __n128 v755;
  __n128 v756;
  __n128 v757;
  __n128 v758;
  __n128 v759;
  __n128 v760;
  __n128 v761;
  __n128 v762;
  __n128 v763;
  __n128 v764;
  __n128 *v765;
  __n128 *v766;
  __n128 *v767;
  double *v768;
  double v769;
  double v770;
  __n128 v771;
  __n128 v772;
  __n128 v773;
  __n128 v774;
  __n128 v775;
  __n128 v776;
  __n128 v777;
  __n128 v778;
  __n128 v779;
  __n128 v780;
  __n128 v781;
  __n128 v782;
  __n128 v783;
  __n128 v784;
  __n128 v785;
  __n128 v786;
  __n128 v787;
  __n128 v788;
  __n128 v789;
  __n128 v790;
  __n128 v791;
  __n128 v792;
  __n128 v793;
  __n128 v794;
  __n128 v795;
  __n128 v796;
  __n128 v797;
  __n128 v798;
  __n128 v799;
  __n128 v800;
  __n128 v801;
  __n128 v802;
  __n128 v803;
  __n128 v804;
  __n128 v805;
  __n128 v806;
  __n128 v807;
  __n128 v808;
  __n128 v809;
  __n128 v810;
  __n128 v811;
  __n128 v812;
  __n128 v813;
  __n128 v814;
  __n128 v815;
  __n128 v816;
  __n128 v817;
  __n128 v818;
  __n128 v819;
  __n128 v820;
  __n128 v821;
  __n128 v822;
  __int128 v823;
  __int128 v824;
  __int128 v825;
  __int128 v826;
  __int128 v827;
  __int128 v828;
  __n128 v829;
  __n128 v830;
  __n128 v831;
  __n128 v832;
  __n128 v833;
  unint64_t v834;
  unint64_t v835;
  unint64_t v836;
  char *v837;
  uint64_t v838;
  unint64_t v839;
  char *v840;
  size_t v841;
  __n128 *v842;
  __n128 *v843;
  __n128 v844;
  __n128 v845;
  __n128 v846;
  __n128 v847;
  __n128 v848;
  __n128 v849;
  __n128 v850;
  unsigned int v851;
  double *v852;
  unint64_t v853;
  uint64_t v854;
  double *v855;
  double v856;
  unint64_t v857;
  uint64_t v858;
  __n128 v859;
  __n128 v860;
  __n128 v861;
  __n128 v862;
  __n128 v863;
  __n128 v864;
  __n128 v865;
  __n128 v866;
  uint64_t v867;
  unint64_t v870;
  double *v872;
  char *v873;
  __int128 v875;
  __int128 v876;
  __int128 v877;
  __int128 v878;
  double v879;
  double v880;
  double v881;
  double v882;
  double v883;
  double v884;
  double v886;
  double v887;
  double v888;
  double v889;
  __n128 *v890;
  double v891;
  uint64_t v892;
  __n128 *__p;
  float64x2_t v894;
  float64x2_t v895;
  float64x2_t v896;
  double v897;
  double v898;
  double v899;
  double v900;
  double v901;
  double v902;
  double v903;
  double v904;
  double v905;
  double v906;
  unint64_t v907;
  float64_t v908;
  float64_t v909;
  double v910;
  double v911;
  double v912;
  double v913;
  double v914;
  double v915;
  double v916;
  double v917;
  int8x16_t v918;
  unint64_t v919;
  float64_t v920;
  double v921;
  int8x16_t v922;
  uint64_t v923;
  double v924;
  double v925;
  int8x16_t v926;
  double v927;
  float64x2_t v928;
  unint64_t v929;
  float64x2_t v930;
  uint64_t v931;
  float64x2_t v932;
  uint64_t v933;
  float64x2_t v934;
  double v935;
  double v936;
  float64x2_t v937;
  float64_t v938;
  double v939;
  float64x2_t v940;
  double v941;
  double v942;
  float64x2_t v943;
  float64x2_t v944;
  double v945;
  float64x2_t v946;
  float64x2_t v947;
  double v948;
  float64x2_t v949;
  float64x2_t v950;
  double v951;
  float64x2_t v952;
  unint64_t v953;
  double v954;
  double v955;
  float64x2_t v956;
  unint64_t v957;
  float64x2_t v958;
  double v959;
  float64x2_t v960;
  unint64_t v961;
  float64x2_t v962;
  double v963;
  float64x2_t v964;
  unint64_t v965;
  float64x2_t v966;
  unint64_t v967;
  void *v968;
  _BYTE *v969;
  float64x2_t *v970;
  __n128 v971;
  __n128 v972;
  __n128 v973;
  __n128 v974;
  __n128 v975;
  __n128 v976;
  __n128 v977;
  __n128 v978;
  __n128 v979;
  __n128 v980;
  __n128 v981;
  _BYTE v982[96];
  float64x2_t v983;
  double v984;
  float64x2_t v985;
  double v986;
  float64x2_t v987;
  double v988;
  float64x2_t v989;
  double v990;
  float64x2_t v991;
  double v992;
  float64x2_t v993;
  double v994;
  double v995[6];

  _Q0 = 0uLL;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  v969 = 0;
  v968 = 0;
  v970 = 0;
  v26 = *a2;
  v27 = a2[1];
  v28 = v27 - *a2;
  if (v27 == *a2)
  {
    v36 = 12345;
    if (a6)
      goto LABEL_14;
  }
  else
  {
    if (v28 < 0)
      sub_20E867F44();
    v29 = (float64x2_t *)operator new(v28);
    v30 = 0;
    v968 = v29;
    v970 = &v29[2 * (v28 >> 5)];
    do
    {
      v31 = v26 + v30;
      f64 = (_OWORD *)v29[(unint64_t)v30 / 0x10].f64;
      *f64 = *(_OWORD *)(v26 + v30);
      _Q0 = *(float64x2_t *)(v26 + v30 + 16);
      f64[1] = _Q0;
      v30 += 32;
    }
    while (v31 + 32 != v27);
    v969 = (char *)v29 + (v30 & 0xFFFFFFFFFFFFFFE0);
    if (v30)
    {
      v33 = 0;
      v34 = v30 >> 5;
      v35 = v29 + 1;
      v36 = 12345;
      do
      {
        v36 = 214013 * v36 + 2531011;
        v37 = &v29[2 * ((HIWORD(v36) & 0x7FFF) % v34) + 2 * v33];
        v38 = *v37;
        *v37 = v35[-1];
        v35[-1] = v38;
        _Q0 = v37[1];
        v37[1] = *v35;
        *v35 = _Q0;
        v35 += 2;
        ++v33;
        --v34;
      }
      while (v34);
      if (a6)
        goto LABEL_14;
    }
    else
    {
      v36 = 12345;
      if (a6)
        goto LABEL_14;
    }
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/RANSAC/HypothesisUtil.h", 104, (uint64_t)"max_hypothesis > 0", 18, (uint64_t)&unk_2102551FA, 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_336;
  }
LABEL_14:
  if (a6 > a5
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/RANSAC/HypothesisUtil.h", 105, (uint64_t)"max_hypothesis <= max_trials", 28, (uint64_t)&unk_2102551FA, 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_336:
    abort();
  }
  v872 = a4;
  if ((unint64_t)(v969 - (_BYTE *)v968) < 0x80)
  {
    v39 = 0;
    v40 = 0;
    v873 = 0;
    goto LABEL_169;
  }
  if (a6)
  {
    if (a6 > 0x1745D1745D1745DLL)
      sub_20E867F44();
    v41 = (__n128 *)operator new(176 * a6);
    v873 = (char *)&v41[11 * a6];
    if (a5)
      goto LABEL_21;
  }
  else
  {
    v41 = 0;
    v873 = 0;
    if (a5)
    {
LABEL_21:
      v870 = a6;
      v892 = 0;
      v42 = 1.0;
      v43 = -1.0;
      v39 = v41;
      v40 = v41;
      v913 = _Q0.f64[0];
      v914 = _Q0.f64[0];
      v911 = _Q0.f64[0];
      v912 = _Q0.f64[0];
      while (1)
      {
        v44 = (char *)v968;
        v45 = v969 - (_BYTE *)v968;
        if ((unint64_t)(v969 - (_BYTE *)v968) <= 0x60)
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/RANSAC/DataPointCorrespondenceUtil.h", 92, (uint64_t)"correspondences.size() >= SampleSize", 36, (uint64_t)&unk_2102551FA, 0, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v44 = (char *)v968;
          v45 = v969 - (_BYTE *)v968;
          v42 = 1.0;
          v43 = -1.0;
        }
        v46 = 0;
        v47 = v45 >> 5;
        do
        {
          v36 = 214013 * v36 + 2531011;
          v48 = (HIWORD(v36) & 0x7FFF) % v47;
          v971.n128_u64[v46] = v48;
          if (v46
            && (v971.n128_u64[0] == v48 || v46 != 1 && (v971.n128_u64[1] == v48 || v46 != 2 && v972.n128_u64[0] == v48)))
          {
            --v46;
          }
          ++v46;
        }
        while (v46 < 4);
        v49 = (float64x2_t *)&v44[32 * v971.n128_u64[0]];
        v51 = v49->f64[0];
        v50 = v49->f64[1];
        v894 = v49[1];
        v52 = (float64x2_t *)&v44[32 * v971.n128_u64[1]];
        v54 = v52->f64[0];
        v53 = v52->f64[1];
        v896 = v52[1];
        v55 = (float64x2_t *)&v44[32 * v972.n128_u64[0]];
        v57 = v55->f64[0];
        v56 = v55->f64[1];
        v895 = v55[1];
        v58 = &v44[32 * v972.n128_u64[1]];
        a10.f64[0] = *(float64_t *)(a3 + 16);
        _Q5 = *(float64x2_t *)a3;
        _Q0.f64[0] = *(float64_t *)(a3 + 40);
        _Q1 = *(float64x2_t *)(a3 + 24);
        _D4 = *(_QWORD *)(a3 + 8);
        __asm { FMLA            D3, D4, V5.D[1] }
        v65 = sqrt(_D3 + a10.f64[0] * a10.f64[0]);
        if (v65 == 0.0)
          _Q6.f64[0] = v42;
        else
          _Q6.f64[0] = v42 / v65;
        v66 = vmulq_f64(a10, _Q6);
        v67 = vmulq_n_f64(_Q5, _Q6.f64[0]);
        v68.f64[0] = vmuld_lane_f64(0.0, v67, 1);
        _Q3.f64[0] = v68.f64[0] - v66.f64[0];
        v71 = (float64x2_t)vzip1q_s64((int64x2_t)v66, (int64x2_t)v67);
        v70 = vmulq_f64(v71, (float64x2_t)0);
        v71.f64[0] = v70.f64[0] - v70.f64[1];
        __asm { FMLA            D21, D6, V5.D[1] }
        _Q5.f64[0] = v67.f64[0] - v68.f64[0];
        v73 = sqrt(_Q3.f64[0] * _Q3.f64[0] + v71.f64[0] * v71.f64[0] + _Q5.f64[0] * _Q5.f64[0]);
        v74 = _D21 + a10.f64[0] * _Q6.f64[0] * 0.0;
        v75 = (float64x2_t)vextq_s8((int8x16_t)_Q1, (int8x16_t)_Q1, 8uLL);
        if (v73 >= 2.22507386e-308)
        {
          if (v73 < 2.22044605e-16)
          {
            v66.f64[0] = v42 / v73;
            v77 = _Q5.f64[0] * (v42 / v73);
            _Q5 = vmulq_f64(_Q5, v66);
            _Q3.f64[1] = v70.f64[0] - v70.f64[1];
            _Q3 = vmulq_n_f64(_Q3, v42 / v73);
            _D4 = v71.f64[0] * (v42 / v73);
            v66 = (float64x2_t)vextq_s8((int8x16_t)_Q3, (int8x16_t)_Q3, 8uLL);
            __asm { FMLA            D17, D4, V3.D[1] }
            v73 = sqrt(vmlad_n_f64(_D17, v77, _Q5.f64[0]));
            v71.f64[0] = v66.f64[0];
          }
          v66.f64[0] = v42 / v73;
          v80 = (int8x16_t)vmulq_f64(_Q5, v66);
          _Q3.f64[1] = v71.f64[0];
          v81 = vmulq_n_f64(_Q3, v42 / v73);
          v71.f64[0] = fmax(fmin(v74, v42), v43);
          v82 = sqrt(v42 - v71.f64[0] * v71.f64[0]);
          v83 = vmulq_laneq_f64((float64x2_t)vextq_s8((int8x16_t)v81, v80, 8uLL), v81, 1);
          v84 = vmulq_f64((float64x2_t)vzip1q_s64((int64x2_t)v80, (int64x2_t)v81), v81);
          v85.f64[0] = v84.f64[0];
          v67.f64[0] = v42 - v71.f64[0];
          v86 = vmulq_n_f64(v84, v42 - v71.f64[0]);
          v84.f64[0] = vmuld_n_f64(v81.f64[0], v81.f64[0]);
          v85.f64[1] = v83.f64[1];
          v66.f64[0] = vmuld_n_f64(*(double *)v80.i64, *(double *)v80.i64);
          v87 = vmulq_n_f64(v84, v42 - v71.f64[0]);
          v88 = vmulq_n_f64(v85, v42 - v71.f64[0]);
          v89 = vmulq_n_f64(v83, v42 - v71.f64[0]);
          v90 = vmulq_n_f64((float64x2_t)vextq_s8((int8x16_t)v81, (int8x16_t)v81, 8uLL), v82);
          *(double *)v80.i64 = v82 * *(double *)v80.i64;
          v910 = v71.f64[0] + vmulq_f64(v67, v66).f64[0];
          v91.i64[0] = *(_OWORD *)&vaddq_f64(v87, v71);
          *(_QWORD *)&v67.f64[0] = *(_OWORD *)&vaddq_f64(v89, v71);
          *(_QWORD *)&v71.f64[1] = v80.i64[0];
          v92 = vsubq_f64(v87, v71);
          v71.f64[0] = v90.f64[0];
          v76 = (int8x16_t)vaddq_f64(v86, v71);
          v93 = (int8x16_t)vaddq_f64(v88, v90);
          v91.i64[1] = *(_QWORD *)&v92.f64[1];
          v93.i64[0] = *(_OWORD *)&vsubq_f64(v88, v90);
          v67.f64[1] = vsubq_f64(v89, v90).f64[1];
          v931 = v93.i64[0];
          v933 = v91.i64[0];
          v907 = vextq_s8(v93, v93, 8uLL).u64[0];
          v94 = vextq_s8(v91, v91, 8uLL).u64[0];
        }
        else
        {
          if (v74 > 0.0)
          {
            v933 = 1.0;
            v908 = 0.0;
            v76.i64[0] = 0;
            v929 = 0;
            v909 = 1.0;
            v919 = 0;
            v931 = 0;
            v907 = 0;
            v910 = 1.0;
            goto LABEL_55;
          }
          v67.f64[0] = fabs(v67.f64[0]);
          v95 = fabs(v67.f64[1]);
          v68.f64[1] = v66.f64[0];
          v96 = (int8x16_t)vsubq_f64(v68, v70);
          *(_QWORD *)&v97 = vextq_s8(v96, v96, 8uLL).u64[0];
          if (v67.f64[0] < v95)
          {
            _Q3.f64[0] = *(double *)v96.i64;
            v71.f64[0] = v97;
          }
          _Q3.f64[1] = v71.f64[0];
          if (v67.f64[0] < v95)
            _Q5.f64[0] = v70.f64[1] - v67.f64[1];
          v98 = sqrt(vmulq_f64(_Q3, _Q3).f64[0] + v71.f64[0] * v71.f64[0] + _Q5.f64[0] * _Q5.f64[0]);
          if (v98 == 0.0)
            v71.f64[0] = v42;
          else
            v71.f64[0] = v42 / v98;
          v99 = (int8x16_t)vmulq_f64(_Q5, v71);
          v100 = vmulq_n_f64(_Q3, v71.f64[0]);
          v101 = vmulq_laneq_f64((float64x2_t)vextq_s8((int8x16_t)v100, v99, 8uLL), v100, 1);
          v102 = vmulq_f64((float64x2_t)vzip1q_s64((int64x2_t)v99, (int64x2_t)v100), v100);
          v103.f64[1] = v102.f64[1];
          v103.f64[0] = vmuld_n_f64(v100.f64[0], v100.f64[0]);
          v104 = vaddq_f64(v102, v102);
          v102.f64[1] = v101.f64[1];
          v70.f64[0] = vmuld_n_f64(*(double *)v99.i64, *(double *)v99.i64);
          v105 = vaddq_f64(v103, v103);
          v106 = vaddq_f64(v102, v102);
          v107 = vaddq_f64(v101, v101);
          v108 = vmulq_f64((float64x2_t)vextq_s8((int8x16_t)v100, (int8x16_t)v100, 8uLL), (float64x2_t)0);
          v910 = vaddq_f64(v70, v70).f64[0] + v43;
          __asm { FMOV            V17.2D, #-1.0 }
          v110.i64[0] = *(_OWORD *)&vaddq_f64(v105, _Q17);
          *(_QWORD *)&v67.f64[0] = *(_OWORD *)&vaddq_f64(v107, _Q17);
          _Q17.f64[1] = 0.0 * *(double *)v99.i64;
          v111 = vsubq_f64(v105, _Q17);
          _Q17.f64[0] = v108.f64[0];
          v76 = (int8x16_t)vaddq_f64(v104, _Q17);
          v112 = (int8x16_t)vaddq_f64(v106, v108);
          v110.i64[1] = *(_QWORD *)&v111.f64[1];
          v112.i64[0] = *(_OWORD *)&vsubq_f64(v106, v108);
          v67.f64[1] = vsubq_f64(v107, v108).f64[1];
          v931 = v112.i64[0];
          v933 = v110.i64[0];
          v907 = vextq_s8(v112, v112, 8uLL).u64[0];
          v94 = vextq_s8(v110, v110, 8uLL).u64[0];
        }
        v908 = *(double *)&v94;
        v909 = v67.f64[0];
        v919 = vextq_s8((int8x16_t)v67, (int8x16_t)v67, 8uLL).u64[0];
        v929 = vextq_s8(v76, v76, 8uLL).u64[0];
LABEL_55:
        _Q1.f64[1] = v75.f64[0];
        v113 = sqrt(vmulq_f64(_Q1, _Q1).f64[0] + v75.f64[0] * v75.f64[0] + _Q0.f64[0] * _Q0.f64[0]);
        if (v113 == 0.0)
          v67.f64[0] = v42;
        else
          v67.f64[0] = v42 / v113;
        v114 = (int64x2_t)vmulq_f64(_Q0, v67);
        v115 = vmulq_n_f64(_Q1, v67.f64[0]);
        v116.f64[0] = vmuld_lane_f64(0.0, v115, 1);
        _Q1.f64[0] = v116.f64[0] - *(double *)v114.i64;
        v118 = (float64x2_t)vzip1q_s64(v114, (int64x2_t)v115);
        v119.f64[1] = 0.0;
        v117 = vmulq_f64(v118, (float64x2_t)0);
        v118.f64[0] = v117.f64[0] - v117.f64[1];
        v119.f64[0] = v115.f64[0] - v116.f64[0];
        v120 = sqrt(_Q1.f64[0] * _Q1.f64[0] + v118.f64[0] * v118.f64[0] + v119.f64[0] * v119.f64[0]);
        _Q0.f64[0] = 0.0 * v115.f64[0] + v75.f64[0] * v67.f64[0] + _Q0.f64[0] * v67.f64[0] * 0.0;
        v903 = v15;
        v905 = v14;
        v899 = v17;
        v901 = v16;
        v897 = v18;
        *(_QWORD *)&v20 = *((_QWORD *)v58 + 1);
        v877 = v20;
        *(_QWORD *)&v19 = *(_QWORD *)v58;
        v878 = v19;
        *(_QWORD *)&_Q31 = *((_QWORD *)v58 + 3);
        v875 = _Q31;
        *(_QWORD *)&v21 = *((_QWORD *)v58 + 2);
        v876 = v21;
        v920 = *(double *)v76.i64;
        if (v120 >= 2.22507386e-308)
        {
          if (v120 < 2.22044605e-16)
          {
            v75.f64[0] = v42 / v120;
            v121 = v119.f64[0] * (v42 / v120);
            v119 = vmulq_f64(v119, v75);
            _Q1.f64[1] = v117.f64[0] - v117.f64[1];
            _Q1 = vmulq_n_f64(_Q1, v42 / v120);
            _D2 = v118.f64[0] * (v42 / v120);
            v118 = (float64x2_t)vextq_s8((int8x16_t)_Q1, (int8x16_t)_Q1, 8uLL);
            __asm { FMLA            D6, D2, V1.D[1] }
            v120 = sqrt(vmlad_n_f64(_D6, v121, v119.f64[0]));
          }
          v75.f64[0] = v42 / v120;
          v124 = (int8x16_t)vmulq_f64(v119, v75);
          _Q1.f64[1] = v118.f64[0];
          v125 = vmulq_n_f64(_Q1, v42 / v120);
          _Q0.f64[0] = fmax(fmin(_Q0.f64[0], v42), v43);
          v126 = sqrt(v42 - _Q0.f64[0] * _Q0.f64[0]);
          v127 = vmulq_laneq_f64((float64x2_t)vextq_s8((int8x16_t)v125, v124, 8uLL), v125, 1);
          v128 = vmulq_f64((float64x2_t)vzip1q_s64((int64x2_t)v124, (int64x2_t)v125), v125);
          v129.f64[0] = v128.f64[0];
          v117.f64[0] = v42 - _Q0.f64[0];
          v130 = vmulq_n_f64(v128, v42 - _Q0.f64[0]);
          v128.f64[0] = vmuld_n_f64(v125.f64[0], v125.f64[0]);
          v129.f64[1] = v127.f64[1];
          v118.f64[0] = vmuld_n_f64(*(double *)v124.i64, *(double *)v124.i64);
          v131 = vmulq_n_f64(v128, v42 - _Q0.f64[0]);
          v132 = vmulq_n_f64(v129, v42 - _Q0.f64[0]);
          v133 = vmulq_n_f64(v127, v42 - _Q0.f64[0]);
          v134 = vmulq_f64(v117, v118);
          v135 = vmulq_n_f64((float64x2_t)vextq_s8((int8x16_t)v125, (int8x16_t)v125, 8uLL), v126);
          v136 = v126 * *(double *)v124.i64;
          v134.f64[0] = _Q0.f64[0] + v134.f64[0];
          v928 = v134;
          v124.i64[0] = *(_OWORD *)&vaddq_f64(v131, _Q0);
          v137.i64[0] = *(_OWORD *)&vaddq_f64(v133, _Q0);
          _Q0.f64[1] = v136;
          v138 = vsubq_f64(v131, _Q0);
          _Q0.f64[0] = v135.f64[0];
          v139 = (int8x16_t)vaddq_f64(v132, v135);
          v124.i64[1] = *(_QWORD *)&v138.f64[1];
          v139.i64[0] = *(_OWORD *)&vsubq_f64(v132, v135);
          v137.i64[1] = *(_QWORD *)&vsubq_f64(v133, v135).f64[1];
          v926 = v137;
          v927 = *(double *)v124.i64;
          *(_QWORD *)&v924 = vextq_s8(v124, v124, 8uLL).u64[0];
          v925 = *(double *)v139.i64;
          v922 = vextq_s8(v137, v137, 8uLL);
          v923 = vextq_s8(v139, v139, 8uLL).u64[0];
          v918 = (int8x16_t)vaddq_f64(v130, _Q0);
          v140 = vextq_s8(v918, v918, 8uLL).u64[0];
        }
        else
        {
          if (_Q0.f64[0] > 0.0)
          {
            v927 = 1.0;
            v924 = 0.0;
            v918.i64[0] = 0;
            v921 = 0.0;
            _Q0.f64[0] = 1.0;
            v926 = (int8x16_t)_Q0;
            _Q0.f64[0] = 0.0;
            v922 = (int8x16_t)_Q0;
            v925 = 0.0;
            *(double *)&v923 = 0.0;
            _Q0.f64[0] = 1.0;
            v928 = _Q0;
            goto LABEL_77;
          }
          _NF = fabs(v115.f64[0]) < fabs(v115.f64[1]);
          *(_QWORD *)&v116.f64[1] = v114.i64[0];
          v142 = vsubq_f64(v116, v117);
          _Q0.f64[0] = v117.f64[1] - v115.f64[1];
          v143 = vextq_s8((int8x16_t)v142, (int8x16_t)v142, 8uLL).u64[0];
          if (_NF)
            _Q1.f64[0] = v142.f64[0];
          if (_NF)
            v144 = *(double *)&v143;
          else
            v144 = v117.f64[0] - v117.f64[1];
          _Q1.f64[1] = v144;
          if (!_NF)
            _Q0.f64[0] = v115.f64[0] - v116.f64[0];
          v145 = sqrt(vmulq_f64(_Q1, _Q1).f64[0] + v144 * v144 + _Q0.f64[0] * _Q0.f64[0]);
          if (v145 == 0.0)
            v142.f64[0] = v42;
          else
            v142.f64[0] = v42 / v145;
          v146 = (int8x16_t)vmulq_f64(_Q0, v142);
          v147 = vmulq_n_f64(_Q1, v142.f64[0]);
          v148 = vmulq_laneq_f64((float64x2_t)vextq_s8((int8x16_t)v147, v146, 8uLL), v147, 1);
          v149 = vmulq_f64((float64x2_t)vzip1q_s64((int64x2_t)v146, (int64x2_t)v147), v147);
          v150.f64[1] = v149.f64[1];
          v150.f64[0] = vmuld_n_f64(v147.f64[0], v147.f64[0]);
          v151 = vaddq_f64(v149, v149);
          v149.f64[1] = v148.f64[1];
          v116.f64[0] = vmuld_n_f64(*(double *)v146.i64, *(double *)v146.i64);
          v152 = vaddq_f64(v150, v150);
          v153 = vaddq_f64(v149, v149);
          v154 = vaddq_f64(v148, v148);
          v155 = vaddq_f64(v116, v116);
          v156 = vmulq_f64((float64x2_t)vextq_s8((int8x16_t)v147, (int8x16_t)v147, 8uLL), (float64x2_t)0);
          v155.f64[0] = v155.f64[0] + v43;
          v928 = v155;
          __asm { FMOV            V6.2D, #-1.0 }
          v158.i64[0] = *(_OWORD *)&vaddq_f64(v152, _Q6);
          v159.i64[0] = *(_OWORD *)&vaddq_f64(v154, _Q6);
          _Q6.f64[1] = 0.0 * *(double *)v146.i64;
          v160 = vsubq_f64(v152, _Q6);
          _Q6.f64[0] = v156.f64[0];
          v161 = (int8x16_t)vaddq_f64(v153, v156);
          v158.i64[1] = *(_QWORD *)&v160.f64[1];
          v161.i64[0] = *(_OWORD *)&vsubq_f64(v153, v156);
          v159.i64[1] = *(_QWORD *)&vsubq_f64(v154, v156).f64[1];
          v926 = v159;
          v927 = *(double *)v158.i64;
          *(_QWORD *)&v924 = vextq_s8(v158, v158, 8uLL).u64[0];
          v925 = *(double *)v161.i64;
          v922 = vextq_s8(v159, v159, 8uLL);
          v923 = vextq_s8(v161, v161, 8uLL).u64[0];
          v918 = (int8x16_t)vaddq_f64(v151, _Q6);
          v140 = vextq_s8(v918, v918, 8uLL).u64[0];
        }
        v921 = *(double *)&v140;
LABEL_77:
        v879 = v51;
        v880 = v50;
        v989.f64[0] = v51;
        v989.f64[1] = v50;
        v883 = v54;
        v884 = v53;
        v991.f64[0] = v54;
        v991.f64[1] = v53;
        v881 = v57;
        v882 = v56;
        v993.f64[0] = v57;
        v993.f64[1] = v56;
        memset_pattern16(&v990, &unk_210315A20, 8uLL);
        memset_pattern16(&v992, &unk_210315A20, 8uLL);
        memset_pattern16(&v994, &unk_210315A20, 8uLL);
        _V0.D[1] = v989.f64[1];
        _V3.D[1] = v991.f64[1];
        _V5.D[1] = v993.f64[1];
        *(_QWORD *)&_Q6.f64[0] = v933;
        *(_QWORD *)&_Q6.f64[1] = v929;
        v166.f64[0] = v908;
        v166.f64[1] = v909;
        v167.f64[0] = v920;
        *(_QWORD *)&v167.f64[1] = v919;
        v168 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q6, v989.f64[0]), v166, v989, 1), v167, v990);
        _D20 = v907;
        __asm { FMLA            D18, D20, V0.D[1] }
        v171 = _D18 + v910 * v990;
        v172 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q6, v991.f64[0]), v166, v991, 1), v167, v992);
        __asm { FMLA            D18, D20, V3.D[1] }
        v174 = _D18 + v910 * v992;
        v175 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q6, v993.f64[0]), v166, v993, 1), v167, v994);
        __asm { FMLA            D6, D20, V5.D[1] }
        v176 = _Q6.f64[0] + v910 * v994;
        if (v171 == 0.0)
          v177 = v42;
        else
          v177 = v42 / v171;
        v178 = v177 * v168.f64[0];
        v179 = vmuld_lane_f64(v177, v168, 1);
        v180 = v42 / v174;
        if (v174 == 0.0)
          v180 = v42;
        v181 = v180 * v172.f64[0];
        v963 = vmuld_lane_f64(v180, v172, 1);
        v182 = v42 / v176;
        if (v176 == 0.0)
          v182 = v42;
        v983 = v894;
        v183 = v182 * v175.f64[0];
        v985 = v896;
        v935 = vmuld_lane_f64(v182, v175, 1);
        v987 = v895;
        memset_pattern16(&v984, &unk_210315A20, 8uLL);
        memset_pattern16(&v986, &unk_210315A20, 8uLL);
        memset_pattern16(&v988, &unk_210315A20, 8uLL);
        _Q0.i64[1] = *(_QWORD *)&v983.f64[1];
        _Q3.i64[1] = *(_QWORD *)&v985.f64[1];
        v184.f64[0] = v927;
        v184.f64[1] = v921;
        _V6.D[1] = v987.f64[1];
        v186.f64[0] = v924;
        *(_QWORD *)&v186.f64[1] = v926.i64[0];
        *(_QWORD *)&v187.f64[0] = v918.i64[0];
        *(_QWORD *)&v187.f64[1] = v922.i64[0];
        v188 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v184, v983.f64[0]), v186, v983, 1), v187, v984);
        _D21 = v923;
        __asm { FMLA            D17, D21, V0.D[1] }
        *(double *)_Q0.i64 = _D17 + v928.f64[0] * v984;
        v192 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v184, v985.f64[0]), v186, v985, 1), v187, v986);
        __asm { FMLA            D1, D21, V3.D[1] }
        v194 = _D1 + v928.f64[0] * v986;
        v195 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v184, v987.f64[0]), v186, v987, 1), v187, v988);
        __asm { FMLA            D3, D21, V6.D[1] }
        *(double *)_Q3.i64 = *(double *)_Q3.i64 + v928.f64[0] * v988;
        v197 = v42 / *(double *)_Q0.i64;
        if (*(double *)_Q0.i64 == 0.0)
          v197 = v42;
        *(double *)_Q0.i64 = v197 * v188.f64[0];
        v888 = v192.f64[1];
        v889 = v188.f64[1];
        v887 = v197;
        v198 = vmuld_lane_f64(v197, v188, 1);
        v199 = v42 / v194;
        if (v194 == 0.0)
          v199 = v42;
        v200 = v199 * v192.f64[0];
        v886 = v199;
        v201 = vmuld_lane_f64(v199, v192, 1);
        if (*(double *)_Q3.i64 == 0.0)
          *(double *)_Q3.i64 = v42;
        else
          *(double *)_Q3.i64 = v42 / *(double *)_Q3.i64;
        v202 = *(double *)_Q3.i64 * v195.f64[0];
        *(double *)_Q3.i64 = vmuld_lane_f64(*(double *)_Q3.i64, v195, 1);
        v203 = v178 * v198;
        v204 = -1.0 - v178 * *(double *)_Q0.i64;
        v205 = *(double *)_Q0.i64 - v178;
        v206 = v179;
        v207 = -(*(double *)_Q0.i64 * v179);
        v208 = v181 * v201;
        v209 = -1.0 - v181 * v200;
        v210 = v200 - v181;
        v211 = -(v200 * v963);
        v195.f64[0] = v183 * *(double *)_Q3.i64;
        v212 = -1.0 - v183 * v202;
        *(double *)_Q0.i64 = v202 - v183;
        v213 = -(v198 * v208);
        v214 = -(v201 * v203);
        v215 = -(v201 * v204);
        v959 = v183 * *(double *)_Q3.i64 * -(v198 * v209)
             + v212 * v214
             + *(double *)_Q3.i64 * (v203 * v209)
             - v208 * v204 * *(double *)_Q3.i64
             - v213 * v212
             - v183 * *(double *)_Q3.i64 * v215;
        v216 = -(v198 * v210);
        v217 = -(v201 * v205);
        v891 = v183 * *(double *)_Q3.i64 * v216
             + (v202 - v183) * v214
             + *(double *)_Q3.i64 * (v203 * v210)
             - v208 * v205 * *(double *)_Q3.i64
             - (v202 - v183) * v213
             - v183 * *(double *)_Q3.i64 * v217;
        v218 = v206;
        v219 = -(v201 * v206);
        v220 = -(v198 * v963);
        v939 = v209;
        v948 = v204;
        v221 = -(v202 * v935);
        v222 = v221 * (v203 * v209)
             + *(double *)_Q3.i64 * (v218 * v209)
             + v212 * (v208 * v207)
             + v219 * v212
             + v935 * -(v198 * v209)
             + v183 * *(double *)_Q3.i64 * -(v209 * v207)
             + v183 * *(double *)_Q3.i64 * (v211 * v204)
             - v935 * v215
             - v212 * (v203 * v211)
             - v220 * v212
             - *(double *)_Q3.i64 * (v963 * v204)
             - v221 * (v208 * v204);
        v917 = v198;
        v223 = -(v198 * v211);
        v942 = v208;
        v224 = *(double *)_Q0.i64 * (v208 * v207)
             + *(double *)_Q0.i64 * v219
             + v935 * (v208 * v204)
             + v935 * v216
             + v195.f64[0] * (v205 * v211)
             + -(*(double *)_Q3.i64 * -(v209 * v207))
             - v195.f64[0] * (v210 * v207)
             - *(double *)_Q3.i64 * (v211 * v204)
             - v935 * (v203 * v209)
             - v935 * v217
             - *(double *)_Q0.i64 * (v203 * v211)
             - v212 * v223
             - v212 * (v218 * v208);
        v916 = v201;
        v225 = -(v201 * v207);
        v951 = v203;
        v945 = v205;
        v226 = v221 * -(v198 * v209)
             + v221 * (v203 * v210)
             + *(double *)_Q3.i64 * (v218 * v210)
             + v195.f64[0] * (v218 * v209)
             + v212 * (v963 * v203)
             + v212 * v225
             + v224
             - *(double *)_Q0.i64 * v220
             - v195.f64[0] * (v963 * v204)
             - *(double *)_Q3.i64 * (v963 * v205)
             - v221 * v215
             - v221 * (v208 * v205);
        v227 = -(v210 * v207);
        v228 = v221 * v216
             + v195.f64[0] * (v218 * v210)
             + *(double *)_Q0.i64 * (v963 * v203)
             + *(double *)_Q0.i64 * v225
             + v935 * (v208 * v205)
             + -(*(double *)_Q3.i64 * (v205 * v211))
             - *(double *)_Q3.i64 * v227
             - v935 * (v203 * v210)
             - *(double *)_Q0.i64 * v223
             - *(double *)_Q0.i64 * (v218 * v208)
             - v195.f64[0] * (v963 * v205)
             - v221 * -(v201 * v205);
        v955 = v218;
        v915 = v211;
        v229 = v221 * (v218 * v209)
             + v212 * (v963 * v207)
             + v935 * -(v209 * v207)
             + v935 * (v211 * v204)
             - v212 * (v218 * v211)
             - v221 * (v963 * v204);
        v230 = v221 * (v218 * v210)
             + *(double *)_Q0.i64 * (v963 * v207)
             + v935 * v227
             + v935 * (v205 * v915)
             - *(double *)_Q0.i64 * (v218 * v915)
             - v221 * (v963 * v205);
        v195.f64[0] = v959;
        v231 = v229 * (v195.f64[0] + v195.f64[0]);
        *(double *)_Q3.i64 = v230 * (v222 + v222) + v891 * (v222 + v222) - v229 * (v226 + v226) - v959 * (v226 + v226);
        v936 = v226;
        v232 = v229;
        v233 = v230 * v228 + v891 * v228 + v959 * v226 + v229 * v226 - v891 * v222 - v230 * v222;
        v234 = v222;
        v235 = -(v195.f64[0] * v195.f64[0]) - v231 - v229 * v229 + v222 * v222;
        v236 = v228 * (v222 + v222);
        v195.f64[0] = v236
                    + v230 * (v891 + v891)
                    + v231
                    + v230 * v230
                    + v891 * v891
                    + v229 * v229
                    + v959 * v959
                    - v226 * v226
                    - v222 * (v222 + v222);
        *(double *)_Q0.i64 = v222 * v222 + v228 * v228 + v226 * v226 - v236;
        v237 = sub_20EB27A00(v995, _Q0, v233 + v233, (int8x16_t)v195, _Q3, v235);
        v890 = v40;
        if (!v237)
          goto LABEL_22;
        v238 = 0;
        v239 = 0;
        v240 = v891 + v230;
        v241 = v228 - v234;
        v242 = 8 * v237;
        do
        {
          v243 = v995[v238 / 8];
          v244 = v232 + v959 + v936 * v243;
          v245 = v234 + v240 * v243 + v243 * (v241 * v243);
          if (v244 == 0.0)
            v244 = 1.0;
          v246 = v245 / v244;
          *(long double *)&v982[v238] = atan2(-(v245 / v244), v995[v238 / 8]);
          v247 = v955 + v243 * -(v889 * v887) - v951 * v246;
          v248 = v210 * v243 - v939 * v246;
          v249 = v963 + v243 * -(v888 * v886) - v942 * v246;
          v250 = v945 * v243 - v948 * v246;
          v251 = v248 * v247 - v250 * v249;
          if (v251 != 0.0)
          {
            v252 = (v917 * v246 - v951 * v243 - v207) / v251;
            v253 = (v916 * v246 - v942 * v243 - v915) / v251;
            v254 = 8 * v239;
            *(double *)&v982[v254 + 64] = v248 * v252 - v250 * v253;
            *(double *)&v982[v254 + 32] = v247 * v253 - v249 * v252;
            ++v239;
          }
          v238 += 8;
        }
        while (v242 != v238);
        *(_QWORD *)&v256.f64[0] = v931;
        *(_QWORD *)&v255.f64[0] = v933;
        _Q0.f64[1] = v928.f64[1];
        *(_QWORD *)&v257.f64[0] = v929;
        *(_QWORD *)&a10.f64[1] = v926.i64[1];
        v258.f64[0] = v927;
        *(_QWORD *)&_Q6.f64[1] = v922.i64[1];
        v259.f64[0] = v921;
        if (v239)
        {
          v260 = 0;
          v258.f64[1] = v924;
          v964 = v258;
          v261.f64[0] = v925;
          *(_QWORD *)&v261.f64[1] = v923;
          v960 = v261;
          v952 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v925, 0);
          v956 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v921, 0);
          v946 = (float64x2_t)vdupq_lane_s64(v923, 0);
          v949 = (float64x2_t)vdupq_lane_s64(v926.i64[0], 0);
          v940 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v928.f64[0], 0);
          v943 = (float64x2_t)vdupq_lane_s64(v922.i64[0], 0);
          v255.f64[1] = v908;
          *(_QWORD *)&v256.f64[1] = v907;
          v257.f64[1] = v909;
          v262 = 12;
          *(_QWORD *)&v259.f64[1] = v926.i64[0];
          v937 = v259;
          v42 = 1.0;
          v15 = v903;
          v14 = v905;
          v17 = v899;
          v16 = v901;
          v18 = v897;
          v932 = v256;
          v934 = v255;
          v930 = v257;
          do
          {
            v263 = __sincos_stret(*(double *)&v982[v260]);
            v264 = (1.0 - v263.__cosval) * 0.0;
            v265.f64[0] = v263.__cosval + v264;
            _Q6.f64[0] = v264 - v263.__sinval * 0.0;
            _Q5.f64[0] = v263.__sinval * 0.0 + v264;
            v267 = (v263.__sinval + v264) * v927 + _Q6.f64[0] * v921 + (v263.__cosval + v264) * v925;
            v268 = (v263.__sinval + v264) * v924
                 + _Q6.f64[0] * *(double *)v926.i64
                 + (v263.__cosval + v264) * *(double *)&v923;
            v282.f64[0] = (v263.__sinval + v264) * *(double *)v918.i64
                        + _Q6.f64[0] * *(double *)v922.i64
                        + (v263.__cosval + v264) * v928.f64[0];
            v269.f64[0] = v264 - v263.__sinval;
            v269.f64[1] = _Q5.f64[0];
            v265.f64[1] = _Q6.f64[0];
            _Q5.f64[1] = v263.__cosval + 1.0 - v263.__cosval;
            _Q2 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v265, v927), v956, _Q5), v952, v269);
            _Q3 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v265, v924), v949, _Q5), v946, v269);
            _Q4 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v265, *(double *)v918.i64), v943, _Q5), v940, v269);
            _D24 = v919;
            __asm { FMLA            D5, D24, V2.D[1] }
            v273 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v934, _Q2.f64[0]), v930, _Q2, 1), v932, v267);
            __asm { FMLA            D6, D24, V3.D[1] }
            v274 = vmlaq_laneq_f64(vmulq_n_f64(v934, _Q4.f64[0]), v930, _Q4, 1);
            _Q0 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v934, _Q3.f64[0]), v930, _Q3, 1), v932, v268);
            __asm { FMLA            D3, D24, V4.D[1] }
            _Q4.f64[0] = *(float64_t *)&v982[v260 + 64];
            v275 = *(double *)&v982[v260 + 32];
            v276 = _Q5.f64[0] + v910 * v267;
            _Q16 = vaddq_f64(v960, vmlaq_n_f64(vmulq_n_f64(v964, _Q4.f64[0]), v937, v275));
            _Q4.f64[0] = *(double *)v918.i64 * _Q4.f64[0] + *(double *)v922.i64 * v275;
            _Q6.f64[0] = _Q6.f64[0] + v910 * v268;
            _D18 = _Q16.f64[1];
            __asm { FMLA            D17, D18, V16.D[1] }
            a10 = vmlaq_n_f64(v274, v932, v282.f64[0]);
            _Q4.f64[0] = v928.f64[0] + _Q4.f64[0];
            v281 = _Q3.f64[0] + v910 * v282.f64[0];
            v282.f64[0] = sqrt(_D17 + _Q4.f64[0] * _Q4.f64[0]);
            if (v282.f64[0] == 0.0)
              v282.f64[0] = 1.0;
            else
              v282.f64[0] = 1.0 / v282.f64[0];
            v283 = vmulq_f64(_Q4, v282);
            v284 = (int8x16_t)vmulq_n_f64(_Q16, v282.f64[0]);
            v285 = &v971.n128_i8[8 * v262 - 96];
            *(double *)&v286 = v276;
            *((_QWORD *)&v286 + 1) = v284.i64[0];
            *(float64x2_t *)v285 = v273;
            *((_OWORD *)v285 + 1) = v286;
            *(float64_t *)&v287 = _Q6.f64[0];
            *((_QWORD *)&v287 + 1) = vextq_s8(v284, v284, 8uLL).u64[0];
            v288 = (float64x2_t *)&v971.n128_u64[v262];
            *v288 = v273;
            *(double *)&v289 = v281;
            *((_QWORD *)&v289 + 1) = *(_QWORD *)&v283.f64[0];
            *((float64x2_t *)v285 + 4) = a10;
            *((_OWORD *)v285 + 5) = v289;
            v288[4] = a10;
            v288[1].f64[0] = v276;
            v288[1].f64[1] = -*(double *)v284.i64;
            v288[3].f64[0] = _Q6.f64[0];
            v288[3].f64[1] = -*(double *)&v284.i64[1];
            v288[2] = _Q0;
            *((float64x2_t *)v285 + 2) = _Q0;
            *((_OWORD *)v285 + 3) = v287;
            v288[5].f64[0] = v281;
            v288[5].f64[1] = -v283.f64[0];
            v260 += 8;
            v262 += 24;
          }
          while (8 * v239 != v260);
          v40 = v890;
          if ((v239 & 0x7FFFFFFF) != 0)
          {
            v290 = 0;
            v291 = 0;
            v292 = 0;
            *((_QWORD *)&v20 + 1) = *((_QWORD *)&v877 + 1);
            *((_QWORD *)&v19 + 1) = *((_QWORD *)&v878 + 1);
            v293 = (float64x2_t)vdupq_lane_s64(v877, 0);
            _Q31 = v875;
            *((_QWORD *)&v21 + 1) = *((_QWORD *)&v876 + 1);
            v294 = (float64x2_t)vdupq_lane_s64(v875, 0);
            v295 = 1.79769313e308;
            do
            {
              v296 = (float64x2_t *)&v971.n128_u64[v290 & 0xFFFFFFF8];
              v297 = v296[2].f64[0];
              v298 = v296[2].f64[1];
              v300 = v296[5].f64[0];
              v299 = v296[5].f64[1];
              v302 = v296[3].f64[0];
              v301 = v296[3].f64[1];
              v303 = v301 * v300 - v299 * v302;
              _Q20 = v296[4];
              v283.f64[0] = v301 * _Q20.f64[0] - v299 * v297;
              v305 = vmuld_lane_f64(v301, _Q20, 1) - v299 * v298;
              v307 = v296[1].f64[0];
              v306 = v296[1].f64[1];
              v308 = vsubq_f64(vmulq_n_f64(*v296, v299), vmulq_n_f64(_Q20, v306));
              v309 = v299 * v307 - v300 * v306;
              v310 = v297 * v306 - v301 * v296->f64[0];
              v311 = v298 * v306 - vmuld_lane_f64(v301, *v296, 1);
              v312 = v302 * v306 - v301 * v307;
              v313.f64[1] = v308.f64[1];
              v313.f64[0] = v305;
              v314.f64[0] = v303;
              v314.f64[1] = v309;
              _Q18 = vaddq_f64(v314, vmlaq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v283, (int64x2_t)v308), *(double *)&v878), v293, v313));
              __asm { FMLA            D20, D31, V18.D[1] }
              v316 = v312 + v310 * *(double *)&v878 + v311 * *(double *)&v877 + _Q20.f64[0];
              v283.f64[1] = v305;
              _Q20.f64[0] = v310;
              _Q20.f64[1] = v311;
              v317 = vaddq_f64(_Q20, vmlaq_f64(vmulq_n_f64(v283, *(double *)&v876), v294, v308));
              v318 = vmulq_f64(_Q18, _Q18);
              v319 = vmulq_f64(v317, v317);
              v320 = vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v319, 1), vaddq_f64(vaddq_f64(v318, (float64x2_t)vdupq_laneq_s64((int64x2_t)v318, 1)), v319)).f64[0];
              if (v320 == 0.0)
                v321 = 1.0;
              else
                v321 = 1.0 / v320;
              v322 = v316 * v316 * v321;
              if (v322 < v295)
              {
                v14 = v312;
                v15 = v311;
                v16 = v310;
                v913 = v308.f64[0];
                *(_QWORD *)&v914 = vextq_s8((int8x16_t)v308, (int8x16_t)v308, 8uLL).u64[0];
                v17 = v309;
                v911 = v283.f64[0];
                *(_QWORD *)&v912 = vextq_s8((int8x16_t)v283, (int8x16_t)v283, 8uLL).u64[0];
                v18 = v303;
                v295 = v322;
                v292 = v291;
              }
              ++v291;
              v290 += 24;
            }
            while ((v239 & 0x7FFFFFFF) != v291);
            v323 = (float64x2_t *)&v971.n128_u64[24 * v292];
            v324 = v18 + v911 * v879 + v912 * v880;
            v325 = v17 + v913 * v879 + v914 * v880;
            v326 = -v325;
            v327 = v894.f64[0] * v325 - v894.f64[1] * v324;
            v329 = *v323;
            v328 = v323[1];
            v331 = v323[2];
            v330 = v323[3];
            _Q1 = v323[4];
            _Q0 = v323[5];
            v333 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*v323, v326), v331, v324), _Q1, v327);
            v334 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v328, v326), v330, v324), _Q0, v327);
            _D6 = v334.f64[0] + v879 * v333.f64[0] + vmuld_lane_f64(v880, v333, 1);
            _D19 = vmuld_lane_f64(v880, v334, 1);
            __asm
            {
              FMLA            D18, D19, V1.D[1]
              FMLS            D18, D6, V0.D[1]
            }
            v339 = vmuld_lane_f64(-_D6, v334, 1);
            v340 = -(_D6 * _D18);
            v341 = v339 < 0.0 && v340 < 0.0;
            if (v339 < 0.0 && v340 < 0.0)
              v342 = 1;
            else
              v342 = -1;
            v343 = v339 > 0.0 && v340 > 0.0;
            if (v339 > 0.0 && v340 > 0.0)
              v344 = 0;
            else
              v344 = v342;
            v345 = v18 + v911 * v881 + v912 * v882;
            v346 = v17 + v913 * v881 + v914 * v882;
            v347 = -v346;
            v348 = v895.f64[0] * v346 - v895.f64[1] * v345;
            v349 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v329, v347), v331, v345), _Q1, v348);
            v350 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v328, v347), v330, v345), _Q0, v348);
            _D6 = v350.f64[0] + v881 * v349.f64[0] + vmuld_lane_f64(v882, v349, 1);
            _D19 = vmuld_lane_f64(v882, v350, 1);
            __asm
            {
              FMLA            D18, D19, V1.D[1]
              FMLS            D18, D6, V0.D[1]
            }
            v355 = vmuld_lane_f64(-_D6, v350, 1);
            if (-(_D6 * _D18) < 0.0 && v355 < 0.0)
              v357 = 1;
            else
              v357 = -1;
            v358 = v357 == v344;
            v359 = v18 + v911 * v883 + v912 * v884;
            v360 = v17 + v913 * v883 + v914 * v884;
            v361 = -v360;
            v362 = v896.f64[0] * v360 - v896.f64[1] * v359;
            v363 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v329, v361), v331, v359), _Q1, v362);
            a10 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v328, v361), v330, v359), _Q0, v362);
            _D3 = a10.f64[0] + v883 * v363.f64[0] + vmuld_lane_f64(v884, v363, 1);
            _D16 = vmuld_lane_f64(v884, a10, 1);
            __asm
            {
              FMLA            D6, D16, V1.D[1]
              FMLS            D6, D3, V0.D[1]
            }
            v368 = vmuld_lane_f64(-_D3, a10, 1);
            v369 = -(_D3 * _D6);
            if (_NF ^ _VF | _ZF)
              v370 = 1;
            else
              v370 = v355 <= 0.0;
            if (!v370)
              v358 = v343;
            if (v369 < 0.0 && v368 < 0.0)
              v372 = 1;
            else
              v372 = -1;
            v373 = v372 == v344;
            v374 = v369 <= 0.0 || v368 <= 0.0;
            v375 = v343 || v341;
            if (v374)
              v376 = v373;
            else
              v376 = v343;
            v43 = -1.0;
            if (v375 == 1 && (v376 & 1) != 0 && v358)
            {
              v898 = v18;
              v900 = v17;
              v902 = v16;
              v904 = v15;
              v906 = v14;
              v377 = &v971.n128_u64[12 * (v344 + 2 * v292)];
              v379 = *v377;
              v378 = v377[1];
              v381 = v377[2];
              v380 = v377[3];
              v383 = v377[4];
              v382 = v377[5];
              v385 = v377[6];
              v384 = v377[7];
              v387 = v377[8];
              v386 = v377[9];
              *(_QWORD *)&_Q6.f64[0] = v377[10];
              v388 = v377[11];
              if (v890 >= (__n128 *)v873)
              {
                v390 = 0x2E8BA2E8BA2E8BA3 * (v890 - v39) + 1;
                if (v390 > 0x1745D1745D1745DLL)
                  sub_20E867F44();
                if (0x5D1745D1745D1746 * ((v873 - (char *)v39) >> 4) > v390)
                  v390 = 0x5D1745D1745D1746 * ((v873 - (char *)v39) >> 4);
                v391 = (unint64_t)(0x2E8BA2E8BA2E8BA3 * ((v873 - (char *)v39) >> 4)) >= 0xBA2E8BA2E8BA2ELL
                     ? 0x1745D1745D1745DLL
                     : v390;
                if (v391)
                {
                  v953 = v379;
                  v957 = v378;
                  v961 = v381;
                  v965 = v383;
                  if (v391 > 0x1745D1745D1745DLL)
                    sub_20E877A38();
                  v392 = v380;
                  v393 = v387;
                  v394 = v386;
                  v395 = *(_QWORD *)&_Q6.f64[0];
                  v396 = v388;
                  v397 = (char *)operator new(176 * v391);
                  v388 = v396;
                  *(_QWORD *)&_Q6.f64[0] = v395;
                  v386 = v394;
                  v387 = v393;
                  v380 = v392;
                  v383 = v965;
                  v381 = v961;
                  v378 = v957;
                  v379 = v953;
                }
                else
                {
                  v397 = 0;
                }
                v398 = &v397[16 * (v890 - v39)];
                *(_QWORD *)v398 = 0;
                *((double *)v398 + 3) = v898;
                *(double *)&v399 = v911;
                *((double *)&v399 + 1) = v912;
                *(_OWORD *)(v398 + 8) = v399;
                _Q0.f64[0] = v913;
                _Q0.f64[1] = v914;
                *((float64x2_t *)v398 + 2) = _Q0;
                *((double *)v398 + 6) = v900;
                *((double *)v398 + 7) = v902;
                *((double *)v398 + 8) = v904;
                *((double *)v398 + 9) = v906;
                *((_QWORD *)v398 + 10) = v379;
                *((_QWORD *)v398 + 11) = v378;
                *((_QWORD *)v398 + 12) = v381;
                *((_QWORD *)v398 + 13) = v380;
                *((_QWORD *)v398 + 14) = v383;
                *((_QWORD *)v398 + 15) = v382;
                *((_QWORD *)v398 + 16) = v385;
                *((_QWORD *)v398 + 17) = v384;
                *((_QWORD *)v398 + 18) = v387;
                *((_QWORD *)v398 + 19) = v386;
                *((_QWORD *)v398 + 20) = *(_QWORD *)&_Q6.f64[0];
                *((_QWORD *)v398 + 21) = v388;
                if (v890 == v39)
                {
                  v408 = &v397[16 * (v890 - v39)];
                  v42 = 1.0;
                  v43 = -1.0;
                }
                else
                {
                  v400 = (__n128 *)&v397[16 * (v890 - v39)];
                  v42 = 1.0;
                  v43 = -1.0;
                  do
                  {
                    v401 = v40[-11];
                    v402 = v40[-9];
                    v400[-10] = v40[-10];
                    v400[-9] = v402;
                    v400[-11] = v401;
                    v403 = v40[-8];
                    v404 = v40[-7];
                    v405 = v40[-5];
                    v400[-6] = v40[-6];
                    v400[-5] = v405;
                    v400[-8] = v403;
                    v400[-7] = v404;
                    _Q0 = (float64x2_t)v40[-4];
                    v406 = v40[-3];
                    a10 = (float64x2_t)v40[-2];
                    v407 = v40[-1];
                    v408 = (char *)&v400[-11];
                    v400[-2] = (__n128)a10;
                    v400[-1] = v407;
                    v400[-4] = (__n128)_Q0;
                    v400[-3] = v406;
                    v40 -= 11;
                    v400 -= 11;
                  }
                  while (v40 != v39);
                }
                v873 = &v397[176 * v391];
                v40 = (__n128 *)(v398 + 176);
                v15 = v904;
                v14 = v906;
                v17 = v900;
                v16 = v902;
                v18 = v898;
                if (v39)
                  operator delete(v39);
                v39 = (__n128 *)v408;
              }
              else
              {
                v890->n128_u64[0] = 0;
                v890[1].n128_f64[1] = v18;
                v389.n128_f64[0] = v911;
                v389.n128_f64[1] = v912;
                *(__n128 *)((char *)v890 + 8) = v389;
                _Q0.f64[0] = v913;
                _Q0.f64[1] = v914;
                v890[2] = (__n128)_Q0;
                v890[3].n128_f64[0] = v17;
                v890[3].n128_f64[1] = v16;
                v890[4].n128_f64[0] = v15;
                v890[4].n128_f64[1] = v14;
                v890[5].n128_u64[0] = v379;
                v890[5].n128_u64[1] = v378;
                v890[6].n128_u64[0] = v381;
                v890[6].n128_u64[1] = v380;
                v890[7].n128_u64[0] = v383;
                v890[7].n128_u64[1] = v382;
                v890[8].n128_u64[0] = v385;
                v890[8].n128_u64[1] = v384;
                v890[9].n128_u64[0] = v387;
                v890[9].n128_u64[1] = v386;
                v890[10].n128_u64[0] = *(_QWORD *)&_Q6.f64[0];
                v890[10].n128_u64[1] = v388;
                v40 = v890 + 11;
                v42 = 1.0;
                v43 = -1.0;
              }
              if (0x2E8BA2E8BA2E8BA3 * (v40 - v39) == v870)
                goto LABEL_169;
            }
          }
          else
          {
            v43 = -1.0;
          }
        }
        else
        {
LABEL_22:
          v40 = v890;
          v42 = 1.0;
          v43 = -1.0;
          v15 = v903;
          v14 = v905;
          v17 = v899;
          v16 = v901;
          v18 = v897;
        }
        if (++v892 == a5)
          goto LABEL_169;
      }
    }
  }
  v39 = v41;
  v40 = v41;
LABEL_169:
  sub_20EB48474((uint64_t *)&v968, a7, (char **)&v989);
  v411 = v989.f64[1];
  v410 = v989.f64[0];
  if (*(_QWORD *)&v989.f64[0] != *(_QWORD *)&v989.f64[1])
  {
    if (v39 == v40)
      goto LABEL_324;
    v412 = 0;
    __p = v39;
    v413 = v40;
    v414 = (uint64_t)v39;
    v415 = v413;
    v938 = v989.f64[1];
LABEL_172:
    if ((__n128 *)v414 == v413)
    {
      v416 = **(double ***)&v410;
      v417 = *(double **)(*(_QWORD *)&v410 + 8);
      v435 = (char *)v413 - v414;
      v436 = 0x2E8BA2E8BA2E8BA3 * (((uint64_t)v413 - v414) >> 4);
      if (v436 < 2)
        goto LABEL_297;
    }
    else
    {
      v416 = **(double ***)&v410;
      v417 = *(double **)(*(_QWORD *)&v410 + 8);
      if (**(double ***)&v410 == v417)
      {
        v437 = (unint64_t)v413[-11].n128_u64 - v414;
        v438 = (double *)v414;
        if (v437 < 0xB0)
          goto LABEL_343;
        v439 = v437 / 0xB0 + 1;
        v438 = (double *)(v414 + 176 * (v439 & 0x3FFFFFFFFFFFFFELL));
        v440 = v439 & 0x3FFFFFFFFFFFFFELL;
        v441 = (double *)v414;
        do
        {
          v409.n128_f64[0] = *v441 + 0.0;
          v442 = v441[22] + 0.0;
          *v441 = v409.n128_f64[0];
          v441[22] = v442;
          v441 += 44;
          v440 -= 2;
        }
        while (v440);
        if (v439 != (v439 & 0x3FFFFFFFFFFFFFELL))
        {
LABEL_343:
          do
          {
            v409.n128_f64[0] = *v438 + 0.0;
            *v438 = v409.n128_f64[0];
            v438 += 22;
          }
          while (v438 != (double *)v413);
        }
        v417 = v416;
        v435 = (char *)v413 - v414;
        v436 = 0x2E8BA2E8BA2E8BA3 * (((uint64_t)v413 - v414) >> 4);
        if (v436 < 2)
          goto LABEL_297;
      }
      else
      {
        v418 = *v872;
        v419 = v414;
        do
        {
          v420.f64[0] = *(float64_t *)(v419 + 24);
          v421 = *(int64x2_t *)(v419 + 8);
          v954 = *(double *)(v419 + 72);
          v958 = *(float64x2_t *)(v419 + 32);
          v962 = (float64x2_t)v421;
          v944 = (float64x2_t)vzip2q_s64(v421, (int64x2_t)v958);
          v947 = (float64x2_t)vzip1q_s64(v421, (int64x2_t)v958);
          v420.f64[1] = *(float64_t *)(v419 + 48);
          v966 = v420;
          v950 = *(float64x2_t *)(v419 + 56);
          *(_QWORD *)&v941 = vextq_s8((int8x16_t)v950, (int8x16_t)v950, 8uLL).u64[0];
          v422 = 0.0;
          v423 = v416;
          do
          {
            v424 = v423[1];
            _D3 = v423[3];
            _Q4 = vaddq_f64(v966, vmlaq_n_f64(vmulq_n_f64(v947, *v423), v944, v424));
            v427 = v954 + v950.f64[0] * *v423 + v941 * v424;
            __asm { FMLA            D1, D3, V4.D[1] }
            v429 = v427 + _D1;
            v430 = vaddq_f64(v950, vmlaq_n_f64(vmulq_n_f64(v962, v423[2]), v958, _D3));
            v431 = vmulq_f64(_Q4, _Q4);
            v432 = vmulq_f64(v430, v430);
            v433 = vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v432, 1), vaddq_f64(vaddq_f64(v431, (float64x2_t)vdupq_laneq_s64((int64x2_t)v431, 1)), v432)).f64[0];
            if (v433 == 0.0)
              v434 = 1.0;
            else
              v434 = 1.0 / v433;
            v422 = v422 + log1p(v418 * (v429 * v429 * v434));
            v423 += 4;
          }
          while (v423 != v417);
          v409.n128_f64[0] = v422 + *(double *)v419;
          *(_QWORD *)v419 = v409.n128_u64[0];
          v419 += 176;
        }
        while ((__n128 *)v419 != v413);
        v411 = v938;
        v435 = (char *)v413 - v414;
        v436 = 0x2E8BA2E8BA2E8BA3 * (((uint64_t)v413 - v414) >> 4);
        if (v436 < 2)
          goto LABEL_297;
      }
    }
    if (v435 == (char *)352)
      v443 = 1;
    else
      v443 = (v436 - 1) >> 1;
    v444 = (__n128 *)(v414 + 176 * v443);
    if (v444 == v413)
    {
      v699 = v410;
      v700 = v412;
      _CF = v443 >= v436;
      v702 = v443 - v436;
      if (v443 > v436)
        goto LABEL_285;
LABEL_260:
      v703 = (__n128 *)(v414 + 176 * v443);
      if (!_CF)
      {
        v415 = v703;
        v413 = v703;
      }
LABEL_296:
      v412 = v700;
      v410 = v699;
LABEL_297:
      v412 += (unint64_t)((char *)v417 - (char *)v416) >> 5;
      v838 = (uint64_t)v413 - v414;
      v839 = (unint64_t)v413[-11].n128_u64 - v414;
      if ((__n128 *)((char *)v413 - v414) == (__n128 *)176)
        goto LABEL_310;
      goto LABEL_298;
    }
    while (1)
    {
      v445 = 0x2E8BA2E8BA2E8BA3 * (((uint64_t)v413 - v414) >> 4);
      if (v445 < 2)
        goto LABEL_284;
      if (v445 == 3)
      {
        v704 = (__n128 *)(v414 + 176);
        v409.n128_u64[0] = *(_QWORD *)(v414 + 176);
        v706 = v413[-11].n128_f64[0];
        v705 = v413 - 11;
        v707 = v706;
        if (v409.n128_f64[0] >= *(double *)v414)
        {
          if (v707 < v409.n128_f64[0])
          {
            v794 = *(__n128 *)(v414 + 288);
            v977 = *(__n128 *)(v414 + 272);
            v795 = *(__n128 *)(v414 + 240);
            v976 = *(__n128 *)(v414 + 256);
            v975 = v795;
            v796 = *(__n128 *)(v414 + 336);
            v797 = *(__n128 *)(v414 + 304);
            v980 = *(__n128 *)(v414 + 320);
            v981 = v796;
            v978 = v794;
            v979 = v797;
            v798 = *(__n128 *)(v414 + 192);
            v971 = *v704;
            v972 = v798;
            v799 = *(__n128 *)(v414 + 208);
            v974 = *(__n128 *)(v414 + 224);
            v973 = v799;
            v800 = *v705;
            v801 = v705[2];
            *(__n128 *)(v414 + 192) = v705[1];
            *(__n128 *)(v414 + 208) = v801;
            *v704 = v800;
            v802 = v705[3];
            v803 = v705[4];
            v804 = v705[6];
            *(__n128 *)(v414 + 256) = v705[5];
            *(__n128 *)(v414 + 272) = v804;
            *(__n128 *)(v414 + 224) = v802;
            *(__n128 *)(v414 + 240) = v803;
            v805 = v705[7];
            v806 = v705[8];
            v807 = v705[10];
            *(__n128 *)(v414 + 320) = v705[9];
            *(__n128 *)(v414 + 336) = v807;
            *(__n128 *)(v414 + 288) = v805;
            *(__n128 *)(v414 + 304) = v806;
            v808 = v971;
            v809 = v973;
            v705[1] = v972;
            v705[2] = v809;
            *v705 = v808;
            v810 = v974;
            v811 = v975;
            v812 = v977;
            v705[5] = v976;
            v705[6] = v812;
            v705[3] = v810;
            v705[4] = v811;
            v409 = v978;
            v813 = v979;
            v814 = v981;
            v705[9] = v980;
            v705[10] = v814;
            v705[7] = v409;
            v705[8] = v813;
            v409.n128_u64[0] = *(_QWORD *)(v414 + 176);
            if (v409.n128_f64[0] < *(double *)v414)
            {
              v815 = *(__n128 *)v414;
              v816 = *(__n128 *)(v414 + 32);
              v972 = *(__n128 *)(v414 + 16);
              v973 = v816;
              v971 = v815;
              v817 = *(__n128 *)(v414 + 48);
              v818 = *(__n128 *)(v414 + 64);
              v819 = *(__n128 *)(v414 + 80);
              v977 = *(__n128 *)(v414 + 96);
              v976 = v819;
              v975 = v818;
              v974 = v817;
              v820 = *(__n128 *)(v414 + 112);
              v821 = *(__n128 *)(v414 + 128);
              v822 = *(__n128 *)(v414 + 160);
              v980 = *(__n128 *)(v414 + 144);
              v981 = v822;
              v978 = v820;
              v979 = v821;
              v823 = *(_OWORD *)(v414 + 256);
              *(_OWORD *)(v414 + 64) = *(_OWORD *)(v414 + 240);
              *(_OWORD *)(v414 + 80) = v823;
              v824 = *(_OWORD *)(v414 + 336);
              v825 = *(_OWORD *)(v414 + 304);
              *(_OWORD *)(v414 + 144) = *(_OWORD *)(v414 + 320);
              *(_OWORD *)(v414 + 160) = v824;
              v826 = *(_OWORD *)(v414 + 288);
              *(_OWORD *)(v414 + 96) = *(_OWORD *)(v414 + 272);
              *(_OWORD *)(v414 + 112) = v826;
              *(_OWORD *)(v414 + 128) = v825;
              v827 = *(_OWORD *)(v414 + 192);
              *(__n128 *)v414 = *v704;
              *(_OWORD *)(v414 + 16) = v827;
              v828 = *(_OWORD *)(v414 + 224);
              *(_OWORD *)(v414 + 32) = *(_OWORD *)(v414 + 208);
              *(_OWORD *)(v414 + 48) = v828;
              v829 = v978;
              v830 = v980;
              v831 = v981;
              *(__n128 *)(v414 + 304) = v979;
              *(__n128 *)(v414 + 320) = v830;
              *(__n128 *)(v414 + 336) = v831;
              v832 = v976;
              *(__n128 *)(v414 + 240) = v975;
              *(__n128 *)(v414 + 256) = v832;
              *(__n128 *)(v414 + 272) = v977;
              *(__n128 *)(v414 + 288) = v829;
              v833 = v972;
              *v704 = v971;
              *(__n128 *)(v414 + 192) = v833;
              v409 = v974;
              *(__n128 *)(v414 + 208) = v973;
              *(__n128 *)(v414 + 224) = v409;
            }
          }
          goto LABEL_284;
        }
        if (v707 < v409.n128_f64[0])
        {
LABEL_268:
          v742 = *(__n128 *)v414;
          v743 = *(__n128 *)(v414 + 32);
          v972 = *(__n128 *)(v414 + 16);
          v973 = v743;
          v971 = v742;
          v744 = *(__n128 *)(v414 + 48);
          v745 = *(__n128 *)(v414 + 64);
          v746 = *(__n128 *)(v414 + 80);
          v977 = *(__n128 *)(v414 + 96);
          v976 = v746;
          v975 = v745;
          v974 = v744;
          v747 = *(__n128 *)(v414 + 112);
          v748 = *(__n128 *)(v414 + 128);
          v749 = *(__n128 *)(v414 + 160);
          v980 = *(__n128 *)(v414 + 144);
          v981 = v749;
          v978 = v747;
          v979 = v748;
          v750 = *v705;
          v751 = v705[2];
          *(__n128 *)(v414 + 16) = v705[1];
          *(__n128 *)(v414 + 32) = v751;
          *(__n128 *)v414 = v750;
          v752 = v705[3];
          v753 = v705[4];
          v754 = v705[6];
          *(__n128 *)(v414 + 80) = v705[5];
          *(__n128 *)(v414 + 96) = v754;
          *(__n128 *)(v414 + 48) = v752;
          *(__n128 *)(v414 + 64) = v753;
          v755 = v705[7];
          v756 = v705[8];
          v757 = v705[10];
          *(__n128 *)(v414 + 144) = v705[9];
          *(__n128 *)(v414 + 160) = v757;
          *(__n128 *)(v414 + 112) = v755;
          *(__n128 *)(v414 + 128) = v756;
        }
        else
        {
          v708 = *(__n128 *)v414;
          v709 = *(__n128 *)(v414 + 32);
          v972 = *(__n128 *)(v414 + 16);
          v973 = v709;
          v971 = v708;
          v710 = *(__n128 *)(v414 + 48);
          v711 = *(__n128 *)(v414 + 64);
          v712 = *(__n128 *)(v414 + 80);
          v977 = *(__n128 *)(v414 + 96);
          v976 = v712;
          v975 = v711;
          v974 = v710;
          v713 = *(__n128 *)(v414 + 112);
          v714 = *(__n128 *)(v414 + 128);
          v715 = *(__n128 *)(v414 + 160);
          v980 = *(__n128 *)(v414 + 144);
          v981 = v715;
          v978 = v713;
          v979 = v714;
          v716 = *(_OWORD *)(v414 + 256);
          *(_OWORD *)(v414 + 64) = *(_OWORD *)(v414 + 240);
          *(_OWORD *)(v414 + 80) = v716;
          v717 = *(_OWORD *)(v414 + 336);
          v718 = *(_OWORD *)(v414 + 304);
          *(_OWORD *)(v414 + 144) = *(_OWORD *)(v414 + 320);
          *(_OWORD *)(v414 + 160) = v717;
          v719 = *(_OWORD *)(v414 + 288);
          *(_OWORD *)(v414 + 96) = *(_OWORD *)(v414 + 272);
          *(_OWORD *)(v414 + 112) = v719;
          *(_OWORD *)(v414 + 128) = v718;
          v720 = *(_OWORD *)(v414 + 192);
          *(__n128 *)v414 = *v704;
          *(_OWORD *)(v414 + 16) = v720;
          v721 = *(_OWORD *)(v414 + 224);
          *(_OWORD *)(v414 + 32) = *(_OWORD *)(v414 + 208);
          *(_OWORD *)(v414 + 48) = v721;
          v722 = v978;
          v723 = v980;
          v724 = v981;
          *(__n128 *)(v414 + 304) = v979;
          *(__n128 *)(v414 + 320) = v723;
          *(__n128 *)(v414 + 336) = v724;
          v725 = v976;
          *(__n128 *)(v414 + 240) = v975;
          *(__n128 *)(v414 + 256) = v725;
          *(__n128 *)(v414 + 272) = v977;
          *(__n128 *)(v414 + 288) = v722;
          v726 = v972;
          *v704 = v971;
          *(__n128 *)(v414 + 192) = v726;
          v409 = v974;
          *(__n128 *)(v414 + 208) = v973;
          *(__n128 *)(v414 + 224) = v409;
          v409.n128_u64[0] = v705->n128_u64[0];
          if (v705->n128_f64[0] >= *(double *)(v414 + 176))
            goto LABEL_284;
          v727 = *(__n128 *)(v414 + 288);
          v977 = *(__n128 *)(v414 + 272);
          v728 = *(__n128 *)(v414 + 240);
          v976 = *(__n128 *)(v414 + 256);
          v975 = v728;
          v729 = *(__n128 *)(v414 + 336);
          v730 = *(__n128 *)(v414 + 304);
          v980 = *(__n128 *)(v414 + 320);
          v981 = v729;
          v978 = v727;
          v979 = v730;
          v731 = *(__n128 *)(v414 + 192);
          v971 = *v704;
          v972 = v731;
          v732 = *(__n128 *)(v414 + 208);
          v974 = *(__n128 *)(v414 + 224);
          v973 = v732;
          v733 = *v705;
          v734 = v705[2];
          *(__n128 *)(v414 + 192) = v705[1];
          *(__n128 *)(v414 + 208) = v734;
          *v704 = v733;
          v735 = v705[3];
          v736 = v705[4];
          v737 = v705[6];
          *(__n128 *)(v414 + 256) = v705[5];
          *(__n128 *)(v414 + 272) = v737;
          *(__n128 *)(v414 + 224) = v735;
          *(__n128 *)(v414 + 240) = v736;
          v738 = v705[7];
          v739 = v705[8];
          v740 = v705[10];
          *(__n128 *)(v414 + 320) = v705[9];
          *(__n128 *)(v414 + 336) = v740;
          *(__n128 *)(v414 + 288) = v738;
          *(__n128 *)(v414 + 304) = v739;
        }
        v758 = v971;
        v759 = v973;
        v705[1] = v972;
        v705[2] = v759;
        *v705 = v758;
        v760 = v974;
        v761 = v975;
        v762 = v977;
        v705[5] = v976;
        v705[6] = v762;
        v705[3] = v760;
        v705[4] = v761;
        v409 = v978;
        v763 = v979;
        v764 = v981;
        v705[9] = v980;
        v705[10] = v764;
        v705[7] = v409;
        v705[8] = v763;
        goto LABEL_284;
      }
      if (v445 == 2)
      {
        v741 = v413[-11].n128_f64[0];
        v705 = v413 - 11;
        v409.n128_f64[0] = v741;
        if (v741 >= *(double *)v414)
          goto LABEL_284;
        goto LABEL_268;
      }
      if ((uint64_t)v413 - v414 <= 1407)
      {
        while ((__n128 *)v414 != &v413[-11])
        {
          v765 = (__n128 *)v414;
          v414 += 176;
          if (v765 != v413 && (__n128 *)v414 != v413)
          {
            v409.n128_u64[0] = v765->n128_u64[0];
            v766 = (__n128 *)v414;
            v767 = v765;
            v768 = (double *)v414;
            do
            {
              v769 = *v768;
              v768 += 22;
              v770 = v769;
              if (v769 < v409.n128_f64[0])
              {
                v409.n128_f64[0] = v770;
                v767 = v766;
              }
              v766 = (__n128 *)v768;
            }
            while (v768 != (double *)v413);
            if (v767 != v765)
            {
              v771 = *v765;
              v772 = v765[2];
              v972 = v765[1];
              v973 = v772;
              v971 = v771;
              v773 = v765[3];
              v774 = v765[4];
              v775 = v765[5];
              v977 = v765[6];
              v976 = v775;
              v975 = v774;
              v974 = v773;
              v776 = v765[7];
              v777 = v765[8];
              v778 = v765[10];
              v980 = v765[9];
              v981 = v778;
              v978 = v776;
              v979 = v777;
              v779 = *v767;
              v780 = v767[2];
              v765[1] = v767[1];
              v765[2] = v780;
              *v765 = v779;
              v781 = v767[3];
              v782 = v767[4];
              v783 = v767[6];
              v765[5] = v767[5];
              v765[6] = v783;
              v765[3] = v781;
              v765[4] = v782;
              v784 = v767[7];
              v785 = v767[8];
              v786 = v767[10];
              v765[9] = v767[9];
              v765[10] = v786;
              v765[7] = v784;
              v765[8] = v785;
              v787 = v971;
              v788 = v973;
              v767[1] = v972;
              v767[2] = v788;
              *v767 = v787;
              v789 = v974;
              v790 = v975;
              v791 = v977;
              v767[5] = v976;
              v767[6] = v791;
              v767[3] = v789;
              v767[4] = v790;
              v409 = v978;
              v792 = v979;
              v793 = v981;
              v767[9] = v980;
              v767[10] = v793;
              v767[7] = v409;
              v767[8] = v792;
            }
          }
        }
        goto LABEL_284;
      }
      v446 = (__n128 *)(v414 + 176 * (v445 >> 1));
      v447 = v413 - 11;
      v448 = v413[-11].n128_f64[0];
      v449 = v446->n128_f64[0];
      if (v446->n128_f64[0] >= *(double *)v414)
      {
        if (v448 >= v449)
        {
          v473 = 0;
          v409.n128_u64[0] = *(_QWORD *)v414;
          v474 = v446->n128_f64[0];
          if (*(double *)v414 >= v446->n128_f64[0])
            goto LABEL_220;
          goto LABEL_202;
        }
        v505 = *v446;
        v506 = v446[2];
        v972 = v446[1];
        v973 = v506;
        v971 = v505;
        v507 = v446[3];
        v508 = v446[4];
        v509 = v446[5];
        v977 = v446[6];
        v976 = v509;
        v975 = v508;
        v974 = v507;
        v510 = v446[7];
        v511 = v446[8];
        v512 = v446[10];
        v980 = v446[9];
        v981 = v512;
        v978 = v510;
        v979 = v511;
        v513 = *v447;
        v514 = v413[-9];
        v446[1] = v413[-10];
        v446[2] = v514;
        *v446 = v513;
        v515 = v413[-8];
        v516 = v413[-7];
        v517 = v413[-5];
        v446[5] = v413[-6];
        v446[6] = v517;
        v446[3] = v515;
        v446[4] = v516;
        v518 = v413[-4];
        v519 = v413[-3];
        v520 = v413[-1];
        v446[9] = v413[-2];
        v446[10] = v520;
        v446[7] = v518;
        v446[8] = v519;
        v521 = v971;
        v522 = v973;
        v413[-10] = v972;
        v413[-9] = v522;
        *v447 = v521;
        v523 = v974;
        v524 = v975;
        v525 = v977;
        v413[-6] = v976;
        v413[-5] = v525;
        v413[-8] = v523;
        v413[-7] = v524;
        v526 = v978;
        v527 = v979;
        v528 = v981;
        v413[-2] = v980;
        v413[-1] = v528;
        v413[-4] = v526;
        v413[-3] = v527;
        if (v446->n128_f64[0] < *(double *)v414)
        {
          v529 = *(__n128 *)v414;
          v530 = *(__n128 *)(v414 + 32);
          v972 = *(__n128 *)(v414 + 16);
          v973 = v530;
          v971 = v529;
          v531 = *(__n128 *)(v414 + 48);
          v532 = *(__n128 *)(v414 + 64);
          v533 = *(__n128 *)(v414 + 80);
          v977 = *(__n128 *)(v414 + 96);
          v976 = v533;
          v975 = v532;
          v974 = v531;
          v534 = *(__n128 *)(v414 + 112);
          v535 = *(__n128 *)(v414 + 128);
          v536 = *(__n128 *)(v414 + 160);
          v980 = *(__n128 *)(v414 + 144);
          v981 = v536;
          v978 = v534;
          v979 = v535;
          v537 = *v446;
          v538 = v446[2];
          *(__n128 *)(v414 + 16) = v446[1];
          *(__n128 *)(v414 + 32) = v538;
          *(__n128 *)v414 = v537;
          v539 = v446[3];
          v540 = v446[4];
          v541 = v446[6];
          *(__n128 *)(v414 + 80) = v446[5];
          *(__n128 *)(v414 + 96) = v541;
          *(__n128 *)(v414 + 48) = v539;
          *(__n128 *)(v414 + 64) = v540;
          v542 = v446[7];
          v543 = v446[8];
          v544 = v446[10];
          *(__n128 *)(v414 + 144) = v446[9];
          *(__n128 *)(v414 + 160) = v544;
          *(__n128 *)(v414 + 112) = v542;
          *(__n128 *)(v414 + 128) = v543;
          v545 = v971;
          v546 = v973;
          v446[1] = v972;
          v446[2] = v546;
          *v446 = v545;
          v547 = v974;
          v548 = v975;
          v549 = v977;
          v446[5] = v976;
          v446[6] = v549;
          v446[3] = v547;
          v446[4] = v548;
          v409 = v978;
          v550 = v979;
          v551 = v981;
          v446[9] = v980;
          v446[10] = v551;
          v446[7] = v409;
          v446[8] = v550;
          v473 = 2;
          v409.n128_u64[0] = *(_QWORD *)v414;
          v474 = v446->n128_f64[0];
          if (*(double *)v414 >= v446->n128_f64[0])
            goto LABEL_220;
          goto LABEL_202;
        }
      }
      else
      {
        if (v448 < v449)
        {
          v450 = *(__n128 *)v414;
          v451 = *(__n128 *)(v414 + 32);
          v972 = *(__n128 *)(v414 + 16);
          v973 = v451;
          v971 = v450;
          v452 = *(__n128 *)(v414 + 48);
          v453 = *(__n128 *)(v414 + 64);
          v454 = *(__n128 *)(v414 + 80);
          v977 = *(__n128 *)(v414 + 96);
          v976 = v454;
          v975 = v453;
          v974 = v452;
          v455 = *(__n128 *)(v414 + 112);
          v456 = *(__n128 *)(v414 + 128);
          v457 = *(__n128 *)(v414 + 160);
          v980 = *(__n128 *)(v414 + 144);
          v981 = v457;
          v978 = v455;
          v979 = v456;
          v458 = *v447;
          v459 = v413[-9];
          *(__n128 *)(v414 + 16) = v413[-10];
          *(__n128 *)(v414 + 32) = v459;
          *(__n128 *)v414 = v458;
          v460 = v413[-8];
          v461 = v413[-7];
          v462 = v413[-5];
          *(__n128 *)(v414 + 80) = v413[-6];
          *(__n128 *)(v414 + 96) = v462;
          *(__n128 *)(v414 + 48) = v460;
          *(__n128 *)(v414 + 64) = v461;
          v463 = v413[-4];
          v464 = v413[-3];
          v465 = v413[-1];
          *(__n128 *)(v414 + 144) = v413[-2];
          *(__n128 *)(v414 + 160) = v465;
          *(__n128 *)(v414 + 112) = v463;
          *(__n128 *)(v414 + 128) = v464;
          v466 = v971;
          v467 = v973;
          v413[-10] = v972;
          v413[-9] = v467;
          *v447 = v466;
          v468 = v974;
          v469 = v975;
          v470 = v977;
          v413[-6] = v976;
          v413[-5] = v470;
          v413[-8] = v468;
          v413[-7] = v469;
          v409 = v978;
          v471 = v979;
          v472 = v981;
          v413[-2] = v980;
          v413[-1] = v472;
          v413[-4] = v409;
          v413[-3] = v471;
          v473 = 1;
          v409.n128_u64[0] = *(_QWORD *)v414;
          v474 = v446->n128_f64[0];
          if (*(double *)v414 >= v446->n128_f64[0])
            goto LABEL_220;
          goto LABEL_202;
        }
        v552 = *(__n128 *)v414;
        v553 = *(__n128 *)(v414 + 32);
        v972 = *(__n128 *)(v414 + 16);
        v973 = v553;
        v971 = v552;
        v554 = *(__n128 *)(v414 + 48);
        v555 = *(__n128 *)(v414 + 64);
        v556 = *(__n128 *)(v414 + 80);
        v977 = *(__n128 *)(v414 + 96);
        v976 = v556;
        v975 = v555;
        v974 = v554;
        v557 = *(__n128 *)(v414 + 112);
        v558 = *(__n128 *)(v414 + 128);
        v559 = *(__n128 *)(v414 + 160);
        v980 = *(__n128 *)(v414 + 144);
        v981 = v559;
        v978 = v557;
        v979 = v558;
        v560 = *v446;
        v561 = v446[2];
        *(__n128 *)(v414 + 16) = v446[1];
        *(__n128 *)(v414 + 32) = v561;
        *(__n128 *)v414 = v560;
        v562 = v446[3];
        v563 = v446[4];
        v564 = v446[6];
        *(__n128 *)(v414 + 80) = v446[5];
        *(__n128 *)(v414 + 96) = v564;
        *(__n128 *)(v414 + 48) = v562;
        *(__n128 *)(v414 + 64) = v563;
        v565 = v446[7];
        v566 = v446[8];
        v567 = v446[10];
        *(__n128 *)(v414 + 144) = v446[9];
        *(__n128 *)(v414 + 160) = v567;
        *(__n128 *)(v414 + 112) = v565;
        *(__n128 *)(v414 + 128) = v566;
        v568 = v971;
        v569 = v973;
        v446[1] = v972;
        v446[2] = v569;
        *v446 = v568;
        v570 = v974;
        v571 = v975;
        v572 = v977;
        v446[5] = v976;
        v446[6] = v572;
        v446[3] = v570;
        v446[4] = v571;
        v573 = v978;
        v574 = v979;
        v575 = v981;
        v446[9] = v980;
        v446[10] = v575;
        v446[7] = v573;
        v446[8] = v574;
        if (v447->n128_f64[0] < v446->n128_f64[0])
        {
          v576 = *v446;
          v577 = v446[2];
          v972 = v446[1];
          v973 = v577;
          v971 = v576;
          v578 = v446[3];
          v579 = v446[4];
          v580 = v446[5];
          v977 = v446[6];
          v976 = v580;
          v975 = v579;
          v974 = v578;
          v581 = v446[7];
          v582 = v446[8];
          v583 = v446[10];
          v980 = v446[9];
          v981 = v583;
          v978 = v581;
          v979 = v582;
          v584 = *v447;
          v585 = v413[-9];
          v446[1] = v413[-10];
          v446[2] = v585;
          *v446 = v584;
          v586 = v413[-8];
          v587 = v413[-7];
          v588 = v413[-5];
          v446[5] = v413[-6];
          v446[6] = v588;
          v446[3] = v586;
          v446[4] = v587;
          v589 = v413[-4];
          v590 = v413[-3];
          v591 = v413[-1];
          v446[9] = v413[-2];
          v446[10] = v591;
          v446[7] = v589;
          v446[8] = v590;
          v592 = v971;
          v593 = v973;
          v413[-10] = v972;
          v413[-9] = v593;
          *v447 = v592;
          v594 = v974;
          v595 = v975;
          v596 = v977;
          v413[-6] = v976;
          v413[-5] = v596;
          v413[-8] = v594;
          v413[-7] = v595;
          v409 = v978;
          v597 = v979;
          v598 = v981;
          v413[-2] = v980;
          v413[-1] = v598;
          v413[-4] = v409;
          v413[-3] = v597;
          v473 = 2;
          v409.n128_u64[0] = *(_QWORD *)v414;
          v474 = v446->n128_f64[0];
          if (*(double *)v414 >= v446->n128_f64[0])
            goto LABEL_220;
          goto LABEL_202;
        }
      }
      v473 = 1;
      v409.n128_u64[0] = *(_QWORD *)v414;
      v474 = v446->n128_f64[0];
      if (*(double *)v414 >= v446->n128_f64[0])
      {
LABEL_220:
        v475 = v413 - 11;
        while (1)
        {
          v475 -= 11;
          if (v475 == (__n128 *)v414)
            break;
          if (v475->n128_f64[0] < v474)
          {
            v599 = *(__n128 *)v414;
            v600 = *(__n128 *)(v414 + 32);
            v972 = *(__n128 *)(v414 + 16);
            v973 = v600;
            v971 = v599;
            v601 = *(__n128 *)(v414 + 48);
            v602 = *(__n128 *)(v414 + 64);
            v603 = *(__n128 *)(v414 + 80);
            v977 = *(__n128 *)(v414 + 96);
            v976 = v603;
            v975 = v602;
            v974 = v601;
            v604 = *(__n128 *)(v414 + 112);
            v605 = *(__n128 *)(v414 + 128);
            v606 = *(__n128 *)(v414 + 160);
            v980 = *(__n128 *)(v414 + 144);
            v981 = v606;
            v978 = v604;
            v979 = v605;
            v607 = *v475;
            v608 = v475[2];
            *(__n128 *)(v414 + 16) = v475[1];
            *(__n128 *)(v414 + 32) = v608;
            *(__n128 *)v414 = v607;
            v609 = v475[3];
            v610 = v475[4];
            v611 = v475[6];
            *(__n128 *)(v414 + 80) = v475[5];
            *(__n128 *)(v414 + 96) = v611;
            *(__n128 *)(v414 + 48) = v609;
            *(__n128 *)(v414 + 64) = v610;
            v612 = v475[7];
            v613 = v475[8];
            v614 = v475[10];
            *(__n128 *)(v414 + 144) = v475[9];
            *(__n128 *)(v414 + 160) = v614;
            *(__n128 *)(v414 + 112) = v612;
            *(__n128 *)(v414 + 128) = v613;
            v615 = v971;
            v616 = v973;
            v475[1] = v972;
            v475[2] = v616;
            *v475 = v615;
            v617 = v974;
            v618 = v975;
            v619 = v977;
            v475[5] = v976;
            v475[6] = v619;
            v475[3] = v617;
            v475[4] = v618;
            v409 = v978;
            v620 = v979;
            v621 = v981;
            v475[9] = v980;
            v475[10] = v621;
            v475[7] = v409;
            v475[8] = v620;
            ++v473;
            v476 = (double *)(v414 + 176);
            if (v414 + 176 < (unint64_t)v475)
              goto LABEL_203;
            goto LABEL_224;
          }
        }
        v647 = (__n128 *)(v414 + 176);
        if (v409.n128_f64[0] >= v447->n128_f64[0])
        {
          if (v647 == v447)
            goto LABEL_284;
          while (v409.n128_f64[0] >= v647->n128_f64[0])
          {
            v647 += 11;
            if (v647 == v447)
              goto LABEL_284;
          }
          v650 = *v647;
          v651 = v647[2];
          v972 = v647[1];
          v973 = v651;
          v971 = v650;
          v652 = v647[3];
          v653 = v647[4];
          v654 = v647[5];
          v977 = v647[6];
          v976 = v654;
          v975 = v653;
          v974 = v652;
          v655 = v647[7];
          v656 = v647[8];
          v657 = v647[10];
          v980 = v647[9];
          v981 = v657;
          v978 = v655;
          v979 = v656;
          v658 = *v447;
          v659 = v413[-9];
          v647[1] = v413[-10];
          v647[2] = v659;
          *v647 = v658;
          v660 = v413[-8];
          v661 = v413[-7];
          v662 = v413[-5];
          v647[5] = v413[-6];
          v647[6] = v662;
          v647[3] = v660;
          v647[4] = v661;
          v663 = v413[-4];
          v664 = v413[-3];
          v665 = v413[-1];
          v647[9] = v413[-2];
          v647[10] = v665;
          v647[7] = v663;
          v647[8] = v664;
          v666 = v971;
          v667 = v973;
          v413[-10] = v972;
          v413[-9] = v667;
          *v447 = v666;
          v668 = v974;
          v669 = v975;
          v670 = v977;
          v413[-6] = v976;
          v413[-5] = v670;
          v413[-8] = v668;
          v413[-7] = v669;
          v409 = v978;
          v671 = v979;
          v672 = v981;
          v413[-2] = v980;
          v413[-1] = v672;
          v413[-4] = v409;
          v413[-3] = v671;
          v647 += 11;
        }
        if (v647 == v447)
          goto LABEL_284;
        while (1)
        {
          v409.n128_u64[0] = *(_QWORD *)v414;
          n128_u64 = (unint64_t)v647[-11].n128_u64;
          do
          {
            v673 = *(double *)(n128_u64 + 176);
            n128_u64 += 176;
          }
          while (v409.n128_f64[0] >= v673);
          v647 = (__n128 *)(n128_u64 + 176);
          do
          {
            v674 = v447[-11].n128_f64[0];
            v447 -= 11;
          }
          while (v409.n128_f64[0] < v674);
          if (n128_u64 >= (unint64_t)v447)
            break;
          v675 = *(__n128 *)n128_u64;
          v676 = *(__n128 *)(n128_u64 + 32);
          v972 = *(__n128 *)(n128_u64 + 16);
          v973 = v676;
          v971 = v675;
          v677 = *(__n128 *)(n128_u64 + 48);
          v678 = *(__n128 *)(n128_u64 + 64);
          v679 = *(__n128 *)(n128_u64 + 80);
          v977 = *(__n128 *)(n128_u64 + 96);
          v976 = v679;
          v975 = v678;
          v974 = v677;
          v680 = *(__n128 *)(n128_u64 + 112);
          v681 = *(__n128 *)(n128_u64 + 128);
          v682 = *(__n128 *)(n128_u64 + 160);
          v980 = *(__n128 *)(n128_u64 + 144);
          v981 = v682;
          v978 = v680;
          v979 = v681;
          v683 = *v447;
          v684 = v447[2];
          *(__n128 *)(n128_u64 + 16) = v447[1];
          *(__n128 *)(n128_u64 + 32) = v684;
          *(__n128 *)n128_u64 = v683;
          v685 = v447[3];
          v686 = v447[4];
          v687 = v447[6];
          *(__n128 *)(n128_u64 + 80) = v447[5];
          *(__n128 *)(n128_u64 + 96) = v687;
          *(__n128 *)(n128_u64 + 48) = v685;
          *(__n128 *)(n128_u64 + 64) = v686;
          v688 = v447[7];
          v689 = v447[8];
          v690 = v447[10];
          *(__n128 *)(n128_u64 + 144) = v447[9];
          *(__n128 *)(n128_u64 + 160) = v690;
          *(__n128 *)(n128_u64 + 112) = v688;
          *(__n128 *)(n128_u64 + 128) = v689;
          v691 = v971;
          v692 = v973;
          v447[1] = v972;
          v447[2] = v692;
          *v447 = v691;
          v693 = v974;
          v694 = v975;
          v695 = v977;
          v447[5] = v976;
          v447[6] = v695;
          v447[3] = v693;
          v447[4] = v694;
          v696 = v978;
          v697 = v979;
          v698 = v981;
          v447[9] = v980;
          v447[10] = v698;
          v447[7] = v696;
          v447[8] = v697;
        }
        if (n128_u64 > (unint64_t)v444)
          goto LABEL_284;
        goto LABEL_257;
      }
LABEL_202:
      v475 = v413 - 11;
      v476 = (double *)(v414 + 176);
      if (v414 + 176 >= (unint64_t)v413[-11].n128_u64)
      {
LABEL_224:
        v478 = v476;
      }
      else
      {
LABEL_203:
        v477 = v476;
        while (1)
        {
          v409.n128_u64[0] = v446->n128_u64[0];
          v478 = v477 - 22;
          do
          {
            v479 = v478[22];
            v478 += 22;
          }
          while (v479 < v409.n128_f64[0]);
          v477 = v478 + 22;
          do
          {
            v480 = v475[-11].n128_f64[0];
            v475 -= 11;
          }
          while (v480 >= v409.n128_f64[0]);
          if (v478 >= (double *)v475)
            break;
          v481 = *(__n128 *)v478;
          v482 = *(__n128 *)(v478 + 4);
          v972 = *(__n128 *)(v478 + 2);
          v973 = v482;
          v971 = v481;
          v483 = *(__n128 *)(v478 + 6);
          v484 = *(__n128 *)(v478 + 8);
          v485 = *(__n128 *)(v478 + 10);
          v977 = *(__n128 *)(v478 + 12);
          v976 = v485;
          v975 = v484;
          v974 = v483;
          v486 = *(__n128 *)(v478 + 14);
          v487 = *(__n128 *)(v478 + 16);
          v488 = *(__n128 *)(v478 + 20);
          v980 = *(__n128 *)(v478 + 18);
          v981 = v488;
          v978 = v486;
          v979 = v487;
          v489 = *v475;
          v490 = v475[2];
          *((__n128 *)v478 + 1) = v475[1];
          *((__n128 *)v478 + 2) = v490;
          *(__n128 *)v478 = v489;
          v491 = v475[3];
          v492 = v475[4];
          v493 = v475[6];
          *((__n128 *)v478 + 5) = v475[5];
          *((__n128 *)v478 + 6) = v493;
          *((__n128 *)v478 + 3) = v491;
          *((__n128 *)v478 + 4) = v492;
          v494 = v475[7];
          v495 = v475[8];
          v496 = v475[10];
          *((__n128 *)v478 + 9) = v475[9];
          *((__n128 *)v478 + 10) = v496;
          *((__n128 *)v478 + 7) = v494;
          *((__n128 *)v478 + 8) = v495;
          v497 = v971;
          v498 = v973;
          v475[1] = v972;
          v475[2] = v498;
          *v475 = v497;
          v499 = v974;
          v500 = v975;
          v501 = v977;
          v475[5] = v976;
          v475[6] = v501;
          v475[3] = v499;
          v475[4] = v500;
          v502 = v978;
          v503 = v979;
          v504 = v981;
          v475[9] = v980;
          v475[10] = v504;
          v475[7] = v502;
          v475[8] = v503;
          ++v473;
          if (v478 == (double *)v446)
            v446 = v475;
        }
      }
      if (v478 != (double *)v446)
      {
        v409.n128_u64[0] = v446->n128_u64[0];
        if (v446->n128_f64[0] < *v478)
        {
          v622 = *(__n128 *)v478;
          v623 = *(__n128 *)(v478 + 4);
          v972 = *(__n128 *)(v478 + 2);
          v973 = v623;
          v971 = v622;
          v624 = *(__n128 *)(v478 + 6);
          v625 = *(__n128 *)(v478 + 8);
          v626 = *(__n128 *)(v478 + 10);
          v977 = *(__n128 *)(v478 + 12);
          v976 = v626;
          v975 = v625;
          v974 = v624;
          v627 = *(__n128 *)(v478 + 14);
          v628 = *(__n128 *)(v478 + 16);
          v629 = *(__n128 *)(v478 + 20);
          v980 = *(__n128 *)(v478 + 18);
          v981 = v629;
          v978 = v627;
          v979 = v628;
          v630 = *v446;
          v631 = v446[2];
          *((__n128 *)v478 + 1) = v446[1];
          *((__n128 *)v478 + 2) = v631;
          *(__n128 *)v478 = v630;
          v632 = v446[3];
          v633 = v446[4];
          v634 = v446[6];
          *((__n128 *)v478 + 5) = v446[5];
          *((__n128 *)v478 + 6) = v634;
          *((__n128 *)v478 + 3) = v632;
          *((__n128 *)v478 + 4) = v633;
          v635 = v446[7];
          v636 = v446[8];
          v637 = v446[10];
          *((__n128 *)v478 + 9) = v446[9];
          *((__n128 *)v478 + 10) = v637;
          *((__n128 *)v478 + 7) = v635;
          *((__n128 *)v478 + 8) = v636;
          v638 = v971;
          v639 = v973;
          v446[1] = v972;
          v446[2] = v639;
          *v446 = v638;
          v640 = v974;
          v641 = v975;
          v642 = v977;
          v446[5] = v976;
          v446[6] = v642;
          v446[3] = v640;
          v446[4] = v641;
          v409 = v978;
          v643 = v979;
          v644 = v981;
          v446[9] = v980;
          v446[10] = v644;
          v446[7] = v409;
          v446[8] = v643;
          ++v473;
        }
      }
      if (v478 == (double *)v444)
        goto LABEL_284;
      if (!v473)
      {
        if (v478 <= (double *)v444)
        {
          v648 = (__n128 *)(v478 + 22);
          while (v648 != v413)
          {
            v409.n128_u64[0] = v648->n128_u64[0];
            v649 = v648[-11].n128_f64[0];
            v648 += 11;
            if (v409.n128_f64[0] < v649)
              goto LABEL_230;
          }
        }
        else
        {
          while (v476 != v478)
          {
            v409.n128_f64[0] = *v476;
            v646 = *(v476 - 22);
            v476 += 22;
            if (v409.n128_f64[0] < v646)
              goto LABEL_230;
          }
        }
LABEL_284:
        v699 = v410;
        v700 = v412;
        v414 = (uint64_t)__p;
        v413 = v415;
        v834 = 0x2E8BA2E8BA2E8BA3 * (v415 - __p);
        _CF = v443 >= v834;
        v702 = v443 - v834;
        if (v443 <= v834)
          goto LABEL_260;
LABEL_285:
        if (0x2E8BA2E8BA2E8BA3 * ((v873 - (char *)v413) >> 4) >= v702)
        {
          bzero(v413, 176 * ((176 * v702 - 176) / 0xB0) + 176);
          v413 += 11 * ((176 * v702 - 176) / 0xB0) + 11;
          v414 = (uint64_t)__p;
          v415 = v413;
          goto LABEL_296;
        }
        v835 = 0x2E8BA2E8BA2E8BA3 * (v413 - __p) + v702;
        if (v835 > 0x1745D1745D1745DLL)
          sub_20E867F44();
        if (0x5D1745D1745D1746 * ((v873 - (char *)__p) >> 4) > v835)
          v835 = 0x5D1745D1745D1746 * ((v873 - (char *)__p) >> 4);
        if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((v873 - (char *)__p) >> 4)) >= 0xBA2E8BA2E8BA2ELL)
          v836 = 0x1745D1745D1745DLL;
        else
          v836 = v835;
        v967 = v836;
        if (v836)
        {
          if (v836 > 0x1745D1745D1745DLL)
            sub_20E877A38();
          v837 = (char *)operator new(176 * v836);
        }
        else
        {
          v837 = 0;
        }
        v840 = &v837[16 * (v413 - __p)];
        v841 = 176 * ((176 * v702 - 176) / 0xB0) + 176;
        bzero(v840, v841);
        if (v413 == __p)
        {
          v414 = (uint64_t)&v837[16 * (v413 - __p)];
          v843 = __p;
          v873 = &v837[176 * v967];
          v413 = (__n128 *)&v840[v841];
          if (__p)
            goto LABEL_305;
        }
        else
        {
          v842 = (__n128 *)&v837[16 * (v413 - __p)];
          v843 = __p;
          do
          {
            v844 = v413[-11];
            v845 = v413[-9];
            v842[-10] = v413[-10];
            v842[-9] = v845;
            v842[-11] = v844;
            v846 = v413[-8];
            v847 = v413[-7];
            v848 = v413[-5];
            v842[-6] = v413[-6];
            v842[-5] = v848;
            v842[-8] = v846;
            v842[-7] = v847;
            v409 = v413[-4];
            v849 = v413[-3];
            v850 = v413[-1];
            v414 = (uint64_t)&v842[-11];
            v842[-2] = v413[-2];
            v842[-1] = v850;
            v842[-4] = v409;
            v842[-3] = v849;
            v413 -= 11;
            v842 -= 11;
          }
          while (v413 != __p);
          v873 = &v837[176 * v967];
          v413 = (__n128 *)&v840[v841];
          if (__p)
LABEL_305:
            operator delete(v843);
        }
        __p = (__n128 *)v414;
        v415 = v413;
        v851 = v700;
        v410 = v699;
        v411 = v938;
        v412 = v851 + ((unint64_t)((char *)v417 - (char *)v416) >> 5);
        v838 = (uint64_t)v413 - v414;
        v839 = (unint64_t)v413[-11].n128_u64 - v414;
        if ((__n128 *)((char *)v413 - v414) == (__n128 *)176)
        {
LABEL_310:
          if (v412)
          {
            if ((__n128 *)v414 != v413)
            {
              v409.n128_f64[0] = (double)v412;
              v852 = (double *)v414;
              if (v839 < 0xB0)
                goto LABEL_344;
              v853 = v839 / 0xB0 + 1;
              v852 = (double *)(v414 + 176 * (v853 & 0x3FFFFFFFFFFFFFELL));
              v854 = v853 & 0x3FFFFFFFFFFFFFELL;
              v855 = (double *)v414;
              do
              {
                v856 = v855[22] / v409.n128_f64[0];
                *v855 = *v855 / v409.n128_f64[0];
                v855[22] = v856;
                v855 += 44;
                v854 -= 2;
              }
              while (v854);
              if (v853 != (v853 & 0x3FFFFFFFFFFFFFELL))
              {
LABEL_344:
                do
                {
                  *v852 = *v852 / v409.n128_f64[0];
                  v852 += 22;
                }
                while (v852 != (double *)v413);
              }
            }
            v857 = 126 - 2 * __clz(0x2E8BA2E8BA2E8BA3 * (v838 >> 4));
            if ((__n128 *)v414 == v413)
              v858 = 0;
            else
              v858 = v857;
            sub_20EB770CC(v414, v413, v858, 1, v409.n128_f64[0]);
          }
          _ZF = __p == v415;
          v39 = __p;
          if (!_ZF)
          {
            v859 = *__p;
            v860 = __p[2];
            a1[1] = __p[1];
            a1[2] = v860;
            *a1 = v859;
            v861 = __p[3];
            v862 = __p[4];
            v863 = __p[6];
            a1[5] = __p[5];
            a1[6] = v863;
            a1[3] = v861;
            a1[4] = v862;
            v864 = __p[7];
            v865 = __p[8];
            v866 = __p[10];
            a1[9] = __p[9];
            a1[10] = v866;
            a1[7] = v864;
            a1[8] = v865;
            v867 = 1;
            v410 = v989.f64[0];
            if (!*(_QWORD *)&v989.f64[0])
              goto LABEL_326;
LABEL_325:
            v989.f64[1] = v410;
            operator delete(*(void **)&v410);
            goto LABEL_326;
          }
LABEL_324:
          v867 = 0;
          v410 = v989.f64[0];
          if (!*(_QWORD *)&v989.f64[0])
            goto LABEL_326;
          goto LABEL_325;
        }
LABEL_298:
        *(_QWORD *)&v410 += 16;
        if (*(_QWORD *)&v410 == *(_QWORD *)&v411)
          goto LABEL_310;
        goto LABEL_172;
      }
LABEL_230:
      if (v478 <= (double *)v444)
      {
        n128_u64 = (unint64_t)(v478 + 22);
      }
      else
      {
        v413 = (__n128 *)v478;
        n128_u64 = v414;
      }
LABEL_257:
      v414 = n128_u64;
      if (v413 == v444)
        goto LABEL_284;
    }
  }
  v867 = 0;
  if (*(_QWORD *)&v989.f64[0])
    goto LABEL_325;
LABEL_326:
  if (v39)
    operator delete(v39);
  if (v968)
  {
    v969 = v968;
    operator delete(v968);
  }
  return v867;
}

void sub_20EB77048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49)
{
  void *v50;
  void *v51;

  v50 = (void *)STACK[0x788];
  if (STACK[0x788])
  {
    STACK[0x790] = (unint64_t)v50;
    operator delete(v50);
    if (!a49)
    {
LABEL_3:
      v51 = (void *)STACK[0x3C8];
      if (!STACK[0x3C8])
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if (!a49)
  {
    goto LABEL_3;
  }
  operator delete(a49);
  v51 = (void *)STACK[0x3C8];
  if (!STACK[0x3C8])
LABEL_5:
    _Unwind_Resume(a1);
LABEL_4:
  STACK[0x3D0] = (unint64_t)v51;
  operator delete(v51);
  goto LABEL_5;
}

double sub_20EB770CC(uint64_t a1, __n128 *a2, uint64_t a3, char a4, double result)
{
  double *n128_f64;
  double *v10;
  double *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __n128 *v16;
  double v17;
  double v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  double v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  __n128 v31;
  __n128 v32;
  __n128 v33;
  __n128 v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  __n128 v38;
  __n128 v39;
  __n128 v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;
  __n128 v45;
  __n128 v46;
  __n128 v47;
  __n128 v48;
  __n128 v49;
  __n128 v50;
  __n128 v51;
  __n128 v52;
  __n128 v53;
  __n128 v54;
  __n128 v55;
  __n128 v56;
  __n128 v57;
  __n128 v58;
  __n128 v59;
  __n128 v60;
  __n128 v61;
  __n128 v62;
  __n128 v63;
  __n128 v64;
  __n128 v65;
  __n128 v66;
  __n128 v67;
  double v68;
  __n128 v69;
  __n128 v70;
  __n128 v71;
  __n128 v72;
  __n128 v73;
  __n128 v74;
  __n128 v75;
  __n128 v76;
  __n128 v77;
  __n128 v78;
  __n128 v79;
  __n128 v80;
  __n128 v81;
  __n128 v82;
  __n128 v83;
  __n128 v84;
  double *v85;
  unint64_t v86;
  __n128 *v87;
  double v88;
  double v89;
  double v90;
  __n128 v91;
  __n128 v92;
  __n128 v93;
  __n128 v94;
  __n128 v95;
  __n128 v96;
  __n128 v97;
  __n128 v98;
  __n128 v99;
  __n128 v100;
  __n128 v101;
  __n128 v102;
  __n128 v103;
  __n128 v104;
  __n128 v105;
  __n128 v106;
  __n128 v107;
  __n128 v108;
  __n128 v109;
  __n128 v110;
  __n128 v111;
  __n128 v112;
  __n128 v113;
  __n128 v114;
  __n128 v115;
  __n128 v116;
  __n128 v117;
  __n128 v118;
  __n128 v119;
  __n128 v120;
  __n128 v121;
  __n128 v122;
  __n128 v123;
  __n128 v124;
  __n128 v125;
  __n128 v126;
  __n128 v127;
  __n128 v128;
  __n128 v129;
  __n128 v130;
  __n128 v131;
  __n128 v132;
  __n128 v133;
  __n128 v134;
  __n128 v135;
  __n128 v136;
  __n128 v137;
  __n128 v138;
  __n128 v139;
  __n128 v140;
  __n128 v141;
  __n128 v142;
  __n128 v143;
  __n128 v144;
  __n128 v145;
  __n128 v146;
  double *v147;
  unint64_t v148;
  __n128 *v149;
  double v150;
  double v151;
  double v152;
  __n128 v153;
  __n128 v154;
  __n128 v155;
  __n128 v156;
  __n128 v157;
  __n128 v158;
  __n128 v159;
  __n128 v160;
  __n128 v161;
  __n128 v162;
  __n128 v163;
  __n128 v164;
  __n128 v165;
  __n128 v166;
  __n128 v167;
  __n128 v168;
  __n128 v169;
  __n128 v170;
  __n128 v171;
  __n128 v172;
  __n128 v173;
  __n128 v174;
  __n128 v175;
  __n128 v176;
  __n128 v177;
  __n128 v178;
  __n128 v179;
  __n128 v180;
  __n128 v181;
  __n128 v182;
  __n128 v183;
  __n128 v184;
  __n128 v185;
  __n128 v186;
  __n128 v187;
  __n128 v188;
  __n128 v189;
  __n128 v190;
  __n128 v191;
  __n128 v192;
  double v193;
  double v194;
  __n128 v195;
  __n128 v196;
  __n128 v197;
  __n128 v198;
  __n128 v199;
  __n128 v200;
  __n128 v201;
  __n128 v202;
  __n128 v203;
  __n128 v204;
  __n128 v205;
  __n128 v206;
  __n128 v207;
  __n128 v208;
  __n128 v209;
  __n128 v210;
  __n128 v211;
  __n128 v212;
  __n128 v213;
  __n128 v214;
  __n128 v215;
  __n128 v216;
  __n128 v217;
  __n128 v218;
  __n128 v219;
  __n128 v220;
  __n128 v221;
  __n128 v222;
  __n128 v223;
  __n128 v224;
  __n128 v225;
  __n128 v226;
  __n128 v227;
  __n128 v228;
  __n128 v229;
  __n128 v230;
  __n128 v231;
  __n128 v232;
  uint64_t v233;
  double v234;
  unint64_t v235;
  __n128 *v236;
  double v237;
  double v238;
  __n128 *v239;
  __n128 v240;
  __n128 v241;
  __n128 v242;
  __n128 v243;
  __n128 v244;
  __n128 v245;
  __n128 v246;
  __n128 v247;
  double v248;
  double v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  BOOL v258;
  double v259;
  unint64_t v260;
  __n128 *v261;
  double v262;
  __n128 v263;
  __n128 v264;
  __n128 v265;
  __n128 v266;
  __n128 v267;
  __n128 v268;
  __n128 v269;
  __n128 v270;
  double v271;
  double v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __n128 *v281;
  double v282;
  __n128 *v283;
  double v284;
  double v285;
  __n128 v286;
  __n128 v287;
  __n128 v288;
  __n128 v289;
  __n128 v290;
  __n128 v291;
  __n128 v292;
  __n128 v293;
  __n128 *v294;
  BOOL v296;
  uint64_t v297;
  unint64_t v298;
  uint64_t v299;
  __n128 *v300;
  uint64_t v301;
  double *v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  int64_t v308;
  int64_t v309;
  BOOL v310;
  uint64_t v311;
  unint64_t v312;
  unint64_t v313;
  double v314;
  _OWORD *v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  uint64_t v324;
  uint64_t v325;
  int64_t v326;
  uint64_t v327;
  __n128 *v328;
  __n128 v329;
  __n128 v330;
  __n128 v331;
  __n128 v332;
  __n128 v333;
  __n128 v334;
  __n128 v335;
  __n128 v336;
  __n128 *v337;
  uint64_t v338;
  int64_t v339;
  __n128 v340;
  __n128 v341;
  __n128 v342;
  __n128 v343;
  __n128 v344;
  __n128 v345;
  __n128 v346;
  __n128 v347;
  uint64_t v348;
  unint64_t v349;
  __n128 *v350;
  __n128 *v351;
  __n128 v352;
  __n128 v353;
  __n128 v354;
  __n128 v355;
  __n128 v356;
  __n128 v357;
  __n128 v358;
  __n128 v359;
  __n128 v360;
  __n128 v361;
  __n128 v362;
  __n128 v363;
  __n128 v364;
  __n128 v365;
  __n128 v366;
  __n128 v367;
  __int128 v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  __int128 v373;
  uint64_t v374;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  __int128 v379;
  double v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  __int128 v384;
  __int128 v385;
  __int128 v386;
  __n128 v387;
  __n128 v388;
  __n128 v389;
  __n128 v390;
  __n128 v391;
  __n128 v392;
  __n128 v393;
  __n128 v394;
  __n128 v395;
  __n128 v396;
  __n128 v397;
  __n128 v398;
  __n128 v399;
  __n128 v400;
  __n128 v401;
  __n128 v402;
  __n128 v403;
  __n128 v404;
  __n128 v405;
  __n128 v406;
  __n128 v407;
  __n128 v408;
  __n128 v409;
  __n128 v410;
  __n128 v411;
  __n128 v412;
  __n128 v413;
  __n128 v414;
  __n128 v415;
  __n128 v416;
  __n128 v417;
  __n128 v418;
  __int128 v419;
  __int128 v420;
  __n128 v421;
  __n128 v422;
  __n128 v423;
  __int128 v424;
  __n128 v425;
  __n128 v426;
  __n128 v427;
  __n128 v428;
  __n128 v429;
  __n128 v430;
  __n128 v431;
  __n128 v432;
  __n128 v433;
  __n128 v434;
  __n128 v435;
  __n128 v436;
  __n128 v437;
  __n128 v438;
  __n128 v439;
  __n128 v440;
  __n128 v441;
  __n128 v442;
  __n128 v443;
  __n128 v444;
  __n128 v445;
  __n128 v446;
  __n128 v447;
  __n128 v448;
  __n128 v449;
  __int128 v450;
  __int128 v451;
  __n128 v452;
  __n128 v453;
  __int128 v454;
  __int128 v455;
  __int128 v456;
  __n128 v457;
  __n128 v458;
  __n128 v459;
  __n128 v460;
  __n128 v461;
  __n128 v462;
  __n128 v463;
  __n128 v464;
  __n128 v465;
  __n128 v466;
  __n128 v467;
  __n128 v468;
  __n128 v469;
  __n128 v470;
  __n128 v471;
  __n128 v472;
  __n128 v473;
  __n128 v474;
  __n128 v475;
  __n128 v476;
  __n128 v477;
  __n128 v478;
  __n128 v479;
  __n128 v480;
  __int128 v481;
  __int128 v482;
  __n128 v483;
  __n128 v484;
  __int128 v485;
  __int128 v486;
  __int128 v487;
  __n128 v488;
  __n128 v489;
  __n128 v490;
  __n128 v491;
  __n128 v492;
  __n128 v493;
  __n128 v494;
  __n128 v495;
  __n128 v496;
  __n128 v497;
  __n128 v498;
  __n128 v499;
  __n128 v500;
  __n128 v501;
  __n128 v502;
  __n128 v503;
  __n128 v504;
  __n128 v505;
  __n128 v506;
  __n128 v507;
  __n128 v508;
  __n128 v509;
  __n128 v510;
  __n128 v511;
  __int128 v512;
  __int128 v513;
  __n128 v514;
  __n128 v515;
  __int128 v516;
  __int128 v517;
  __int128 v518;
  __n128 v519;
  __n128 v520;
  __n128 v521;
  __n128 v522;
  __n128 v523;
  __n128 v524;
  __n128 v525;
  __n128 v526;
  __n128 v527;
  __n128 v528;
  __n128 v529;
  __n128 v530;
  __n128 v531;
  __n128 v532;
  __n128 v533;
  __n128 v534;
  __n128 v535;
  __n128 v536;
  __n128 v537;
  __n128 v538;
  __n128 v539;
  __n128 v540;
  __n128 v541;
  __n128 v542;
  __int128 v543;
  __int128 v544;
  __n128 v545;
  __n128 v546;
  __int128 v547;
  __int128 v548;
  __int128 v549;
  __n128 v550;
  __n128 v551;
  __n128 v552;
  __n128 v553;
  __n128 v554;
  __n128 v555;
  __n128 v556;
  __n128 v557;
  __n128 v558;
  __n128 v559;
  __n128 v560;
  __n128 v561;
  __n128 v562;
  __n128 v563;
  __n128 v564;
  __n128 v565;
  __n128 v566;
  __n128 v567;
  __n128 v568;
  __n128 v569;
  __n128 v570;
  __n128 v571;
  __n128 v572;
  __n128 v573;
  __int128 v574;
  __int128 v575;
  __n128 v576;
  __n128 v577;
  __int128 v578;
  __int128 v579;
  __int128 v580;
  __n128 v581;
  __n128 v582;
  __n128 v583;
  __n128 v584;
  __n128 v585;
  __n128 v586;
  __n128 v587;
  __n128 v588;
  __n128 v589;
  __n128 v590;
  __n128 v591;
  __n128 v592;
  __n128 v593;
  __n128 v594;
  __n128 v595;
  __n128 v596;
  __n128 v597;
  __n128 v598;
  __n128 v599;
  __n128 v600;
  __n128 v601;
  __n128 v602;
  __n128 v603;
  __n128 v604;
  __int128 v605;
  __int128 v606;
  __n128 v607;
  __n128 v608;
  __int128 v609;
  __int128 v610;
  __int128 v611;
  __n128 v612;
  __n128 v613;
  __n128 v614;
  __n128 v615;
  __n128 v616;
  __n128 v617;
  __n128 v618;
  __n128 v619;
  __n128 v620;
  __n128 v621;
  __n128 v622;
  __n128 v623;
  __n128 v624;
  __n128 v625;
  __n128 v626;
  __n128 v627;
  __n128 v628;
  __n128 v629;
  __n128 v630;
  __n128 v631;
  __n128 v632;
  __n128 v633;
  __n128 v634;
  __n128 v635;
  __int128 v636;
  __int128 v637;
  __n128 v638;
  __n128 v639;
  __int128 v640;
  __int128 v641;
  __int128 v642;
  __n128 v643;
  __n128 v644;
  __n128 v645;
  __n128 v646;
  __n128 v647;
  __n128 v648;
  __n128 v649;
  __n128 v650;
  __n128 v651;
  __n128 v652;
  __n128 v653;
  __n128 v654;
  __n128 v655;
  __n128 v656;
  __n128 v657;
  __n128 v658;
  __n128 v659;
  __n128 v660;
  __n128 v661;
  __n128 v662;
  __n128 v663;
  __n128 v664;
  __n128 v665;
  __n128 v666;
  __int128 v667;
  __int128 v668;
  __n128 v669;
  __n128 v670;
  __int128 v671;
  __int128 v672;
  __int128 v673;
  __n128 v674;
  __n128 v675;
  __n128 v676;
  __n128 v677;
  __n128 v678;
  __n128 v679;
  __n128 v680;
  __n128 v681;
  __n128 v682;
  __n128 v683;
  __n128 v684;
  __n128 v685;
  __n128 v686;
  __n128 v687;
  __n128 v688;
  __n128 v689;
  __n128 v690;
  __n128 v691;
  __n128 v692;
  __n128 v693;
  __n128 v694;
  __n128 v695;
  __n128 v696;
  __n128 v697;
  __int128 v698;
  __int128 v699;
  __n128 v700;
  __n128 v701;
  __int128 v702;
  __int128 v703;
  __int128 v704;
  __n128 v705;
  __n128 v706;
  __n128 v707;
  __n128 v708;
  __n128 v709;
  __n128 v710;
  __n128 v711;
  __n128 v712;
  __n128 v713;
  __n128 v714;
  __n128 v715;
  __n128 v716;
  __n128 v717;
  __n128 v718;
  __n128 v719;
  __n128 v720;
  __n128 v721;
  __n128 v722;
  __n128 v723;
  __n128 v724;
  __n128 v725;
  __n128 v726;
  __n128 v727;
  __n128 v728;
  uint64_t v729;
  uint64_t v730;
  __n128 v731;
  __n128 v732;
  __int128 v733;
  uint64_t v734;
  __int128 v735;
  __int128 v736;
  __int128 v737;
  __n128 v738;
  __int128 v739;
  __int128 v740;
  __n128 v741;
  __int128 v742;
  __int128 v743;
  __n128 v744;
  __int128 v745;
  __int128 v746;
  __n128 v747;
  __int128 v748;
  __int128 v749;
  __n128 v750;
  __int128 v751;
  __int128 v752;
  __n128 v753;
  __int128 v754;
  __int128 v755;
  __n128 v756;
  __int128 v757;
  __int128 v758;
  __n128 v759;
  __int128 v760;
  __int128 v761;
  __n128 v762;
  __int128 v763;
  __int128 v764;
  __n128 v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;

__n128 sub_20EB78F14(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4)
{
  double v4;
  double v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;
  __n128 v9;
  __n128 v10;
  __n128 result;
  __n128 v12;
  __n128 v13;
  __n128 v14;
  __n128 v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  __n128 v31;
  __n128 v32;
  __n128 v33;
  __n128 v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  __n128 v38;
  __n128 v39;
  __n128 v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;
  __n128 v45;
  __n128 v46;
  __n128 v47;
  __n128 v48;
  __n128 v49;
  __n128 v50;
  __n128 v51;
  __n128 v52;
  __n128 v53;
  __n128 v54;
  __n128 v55;
  __n128 v56;
  __n128 v57;
  __n128 v58;
  __n128 v59;
  __n128 v60;
  __n128 v61;
  __n128 v62;
  __n128 v63;
  __n128 v64;
  __n128 v65;
  __n128 v66;
  __n128 v67;
  __n128 v68;
  __n128 v69;
  __n128 v70;
  __n128 v71;
  __n128 v72;
  __n128 v73;
  __n128 v74;
  __n128 v75;
  __n128 v76;
  __n128 v77;
  __n128 v78;
  __n128 v79;
  __n128 v80;
  __n128 v81;
  __n128 v82;
  __n128 v83;
  __n128 v84;
  __n128 v85;
  __n128 v86;
  __n128 v87;
  __n128 v88;
  __n128 v89;
  __n128 v90;
  __n128 v91;
  __n128 v92;
  __n128 v93;
  __n128 v94;
  __n128 v95;
  __n128 v96;
  __n128 v97;
  __n128 v98;
  __n128 v99;
  __n128 v100;
  __n128 v101;
  __n128 v102;
  __n128 v103;
  __n128 v104;
  __n128 v105;
  __n128 v106;
  __n128 v107;
  __n128 v108;
  __n128 v109;
  __n128 v110;
  __n128 v111;
  __n128 v112;
  __n128 v113;
  __n128 v114;
  __n128 v115;
  __n128 v116;
  __n128 v117;
  __n128 v118;
  __n128 v119;
  __n128 v120;
  __n128 v121;
  __n128 v122;
  __n128 v123;
  __n128 v124;
  __n128 v125;
  __n128 v126;
  __n128 v127;
  __n128 v128;
  __n128 v129;
  __n128 v130;
  __n128 v131;
  __n128 v132;
  __n128 v133;
  __n128 v134;
  __n128 v135;
  __n128 v136;
  __n128 v137;
  __n128 v138;
  __n128 v139;
  __n128 v140;

  v4 = a2->n128_f64[0];
  v5 = a3->n128_f64[0];
  if (a2->n128_f64[0] >= a1->n128_f64[0])
  {
    if (v5 < v4)
    {
      v121 = a2[8];
      v128 = a2[9];
      v135 = a2[10];
      v93 = a2[4];
      v100 = a2[5];
      v107 = a2[6];
      v114 = a2[7];
      v65 = *a2;
      v72 = a2[1];
      v79 = a2[2];
      v86 = a2[3];
      v14 = *a3;
      v15 = a3[2];
      a2[1] = a3[1];
      a2[2] = v15;
      *a2 = v14;
      v16 = a3[3];
      v17 = a3[4];
      v18 = a3[6];
      a2[5] = a3[5];
      a2[6] = v18;
      a2[3] = v16;
      a2[4] = v17;
      result = a3[7];
      v19 = a3[8];
      v20 = a3[10];
      a2[9] = a3[9];
      a2[10] = v20;
      a2[7] = result;
      a2[8] = v19;
      a3[8] = v121;
      a3[9] = v128;
      a3[10] = v135;
      a3[4] = v93;
      a3[5] = v100;
      a3[6] = v107;
      a3[7] = v114;
      *a3 = v65;
      a3[1] = v72;
      a3[2] = v79;
      a3[3] = v86;
      if (a2->n128_f64[0] < a1->n128_f64[0])
      {
        v122 = a1[8];
        v129 = a1[9];
        v136 = a1[10];
        v94 = a1[4];
        v101 = a1[5];
        v108 = a1[6];
        v115 = a1[7];
        v66 = *a1;
        v73 = a1[1];
        v80 = a1[2];
        v87 = a1[3];
        v21 = *a2;
        v22 = a2[2];
        a1[1] = a2[1];
        a1[2] = v22;
        *a1 = v21;
        v23 = a2[3];
        v24 = a2[4];
        v25 = a2[6];
        a1[5] = a2[5];
        a1[6] = v25;
        a1[3] = v23;
        a1[4] = v24;
        result = a2[7];
        v26 = a2[8];
        v27 = a2[10];
        a1[9] = a2[9];
        a1[10] = v27;
        a1[7] = result;
        a1[8] = v26;
        a2[8] = v122;
        a2[9] = v129;
        a2[10] = v136;
        a2[4] = v94;
        a2[5] = v101;
        a2[6] = v108;
        a2[7] = v115;
        *a2 = v66;
        a2[1] = v73;
        a2[2] = v80;
        a2[3] = v87;
      }
    }
  }
  else
  {
    if (v5 < v4)
    {
      v120 = a1[8];
      v127 = a1[9];
      v134 = a1[10];
      v92 = a1[4];
      v99 = a1[5];
      v106 = a1[6];
      v113 = a1[7];
      v64 = *a1;
      v71 = a1[1];
      v78 = a1[2];
      v85 = a1[3];
      v6 = *a3;
      v7 = a3[2];
      a1[1] = a3[1];
      a1[2] = v7;
      *a1 = v6;
      v8 = a3[3];
      v9 = a3[4];
      v10 = a3[6];
      a1[5] = a3[5];
      a1[6] = v10;
      a1[3] = v8;
      a1[4] = v9;
      result = a3[7];
      v12 = a3[8];
      v13 = a3[10];
      a1[9] = a3[9];
      a1[10] = v13;
      a1[7] = result;
      a1[8] = v12;
LABEL_9:
      a3[8] = v120;
      a3[9] = v127;
      a3[10] = v134;
      a3[4] = v92;
      a3[5] = v99;
      a3[6] = v106;
      a3[7] = v113;
      *a3 = v64;
      a3[1] = v71;
      a3[2] = v78;
      a3[3] = v85;
      goto LABEL_10;
    }
    v123 = a1[8];
    v130 = a1[9];
    v137 = a1[10];
    v95 = a1[4];
    v102 = a1[5];
    v109 = a1[6];
    v116 = a1[7];
    v67 = *a1;
    v74 = a1[1];
    v81 = a1[2];
    v88 = a1[3];
    v28 = *a2;
    v29 = a2[2];
    a1[1] = a2[1];
    a1[2] = v29;
    *a1 = v28;
    v30 = a2[3];
    v31 = a2[4];
    v32 = a2[6];
    a1[5] = a2[5];
    a1[6] = v32;
    a1[3] = v30;
    a1[4] = v31;
    result = a2[7];
    v33 = a2[8];
    v34 = a2[10];
    a1[9] = a2[9];
    a1[10] = v34;
    a1[7] = result;
    a1[8] = v33;
    a2[8] = v123;
    a2[9] = v130;
    a2[10] = v137;
    a2[4] = v95;
    a2[5] = v102;
    a2[6] = v109;
    a2[7] = v116;
    *a2 = v67;
    a2[1] = v74;
    a2[2] = v81;
    a2[3] = v88;
    if (a3->n128_f64[0] < a2->n128_f64[0])
    {
      v120 = a2[8];
      v127 = a2[9];
      v134 = a2[10];
      v92 = a2[4];
      v99 = a2[5];
      v106 = a2[6];
      v113 = a2[7];
      v64 = *a2;
      v71 = a2[1];
      v78 = a2[2];
      v85 = a2[3];
      v35 = *a3;
      v36 = a3[2];
      a2[1] = a3[1];
      a2[2] = v36;
      *a2 = v35;
      v37 = a3[3];
      v38 = a3[4];
      v39 = a3[6];
      a2[5] = a3[5];
      a2[6] = v39;
      a2[3] = v37;
      a2[4] = v38;
      result = a3[7];
      v40 = a3[8];
      v41 = a3[10];
      a2[9] = a3[9];
      a2[10] = v41;
      a2[7] = result;
      a2[8] = v40;
      goto LABEL_9;
    }
  }
LABEL_10:
  result.n128_u64[0] = a4->n128_u64[0];
  if (a4->n128_f64[0] < a3->n128_f64[0])
  {
    v124 = a3[8];
    v131 = a3[9];
    v138 = a3[10];
    v96 = a3[4];
    v103 = a3[5];
    v110 = a3[6];
    v117 = a3[7];
    v68 = *a3;
    v75 = a3[1];
    v82 = a3[2];
    v89 = a3[3];
    v42 = *a4;
    v43 = a4[2];
    a3[1] = a4[1];
    a3[2] = v43;
    *a3 = v42;
    v44 = a4[3];
    v45 = a4[4];
    v46 = a4[6];
    a3[5] = a4[5];
    a3[6] = v46;
    a3[3] = v44;
    a3[4] = v45;
    result = a4[7];
    v47 = a4[8];
    v48 = a4[10];
    a3[9] = a4[9];
    a3[10] = v48;
    a3[7] = result;
    a3[8] = v47;
    a4[8] = v124;
    a4[9] = v131;
    a4[10] = v138;
    a4[4] = v96;
    a4[5] = v103;
    a4[6] = v110;
    a4[7] = v117;
    *a4 = v68;
    a4[1] = v75;
    a4[2] = v82;
    a4[3] = v89;
    result.n128_u64[0] = a3->n128_u64[0];
    if (a3->n128_f64[0] < a2->n128_f64[0])
    {
      v125 = a2[8];
      v132 = a2[9];
      v139 = a2[10];
      v97 = a2[4];
      v104 = a2[5];
      v111 = a2[6];
      v118 = a2[7];
      v69 = *a2;
      v76 = a2[1];
      v83 = a2[2];
      v90 = a2[3];
      v49 = *a3;
      v50 = a3[2];
      a2[1] = a3[1];
      a2[2] = v50;
      *a2 = v49;
      v51 = a3[3];
      v52 = a3[4];
      v53 = a3[6];
      a2[5] = a3[5];
      a2[6] = v53;
      a2[3] = v51;
      a2[4] = v52;
      result = a3[7];
      v54 = a3[8];
      v55 = a3[10];
      a2[9] = a3[9];
      a2[10] = v55;
      a2[7] = result;
      a2[8] = v54;
      a3[8] = v125;
      a3[9] = v132;
      a3[10] = v139;
      a3[4] = v97;
      a3[5] = v104;
      a3[6] = v111;
      a3[7] = v118;
      *a3 = v69;
      a3[1] = v76;
      a3[2] = v83;
      a3[3] = v90;
      result.n128_u64[0] = a2->n128_u64[0];
      if (a2->n128_f64[0] < a1->n128_f64[0])
      {
        v126 = a1[8];
        v133 = a1[9];
        v140 = a1[10];
        v98 = a1[4];
        v105 = a1[5];
        v112 = a1[6];
        v119 = a1[7];
        v70 = *a1;
        v77 = a1[1];
        v84 = a1[2];
        v91 = a1[3];
        v56 = *a2;
        v57 = a2[2];
        a1[1] = a2[1];
        a1[2] = v57;
        *a1 = v56;
        v58 = a2[3];
        v59 = a2[4];
        v60 = a2[6];
        a1[5] = a2[5];
        a1[6] = v60;
        a1[3] = v58;
        a1[4] = v59;
        v61 = a2[7];
        v62 = a2[8];
        v63 = a2[10];
        a1[9] = a2[9];
        a1[10] = v63;
        a1[7] = v61;
        a1[8] = v62;
        a2[8] = v126;
        a2[9] = v133;
        a2[10] = v140;
        a2[4] = v98;
        a2[5] = v105;
        a2[6] = v112;
        a2[7] = v119;
        *a2 = v70;
        a2[1] = v77;
        result = v91;
        a2[2] = v84;
        a2[3] = v91;
      }
    }
  }
  return result;
}

BOOL sub_20EB793EC(uint64_t a1, uint64_t a2)
{
  __n128 *v3;
  __n128 *v4;
  double v5;
  double v6;
  double v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  double *v13;
  double v14;
  _OWORD *v15;
  double v16;
  double v17;
  double v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  double v27;
  _OWORD *v28;
  double *v29;
  double v30;
  double v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  BOOL v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __n128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  double v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  double v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  double v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __n128 v145;
  __int128 v146;
  __int128 v147;
  __n128 v148;
  __n128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __n128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  uint64_t v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;

  switch(0x2E8BA2E8BA2E8BA3 * ((a2 - a1) >> 4))
  {
    case 0:
    case 1:
      return 1;
    case 2:
      v14 = *(double *)(a2 - 176);
      v13 = (double *)(a2 - 176);
      if (v14 < *(double *)a1)
        goto LABEL_10;
      return 1;
    case 3:
      v15 = (_OWORD *)(a1 + 176);
      v16 = *(double *)(a1 + 176);
      v17 = *(double *)(a2 - 176);
      v13 = (double *)(a2 - 176);
      v18 = v17;
      if (v16 < *(double *)a1)
      {
        if (v18 < v16)
        {
LABEL_10:
          v266 = *(_OWORD *)(a1 + 128);
          v279 = *(_OWORD *)(a1 + 144);
          v292 = *(_OWORD *)(a1 + 160);
          v206 = *(_OWORD *)(a1 + 64);
          v221 = *(_OWORD *)(a1 + 80);
          v236 = *(_OWORD *)(a1 + 96);
          v251 = *(_OWORD *)(a1 + 112);
          v146 = *(_OWORD *)a1;
          v161 = *(_OWORD *)(a1 + 16);
          v176 = *(_OWORD *)(a1 + 32);
          v191 = *(_OWORD *)(a1 + 48);
          v19 = *(_OWORD *)v13;
          v20 = *((_OWORD *)v13 + 2);
          *(_OWORD *)(a1 + 16) = *((_OWORD *)v13 + 1);
          *(_OWORD *)(a1 + 32) = v20;
          *(_OWORD *)a1 = v19;
          v21 = *((_OWORD *)v13 + 3);
          v22 = *((_OWORD *)v13 + 4);
          v23 = *((_OWORD *)v13 + 6);
          *(_OWORD *)(a1 + 80) = *((_OWORD *)v13 + 5);
          *(_OWORD *)(a1 + 96) = v23;
          *(_OWORD *)(a1 + 48) = v21;
          *(_OWORD *)(a1 + 64) = v22;
          v24 = *((_OWORD *)v13 + 7);
          v25 = *((_OWORD *)v13 + 8);
          v26 = *((_OWORD *)v13 + 10);
          *(_OWORD *)(a1 + 144) = *((_OWORD *)v13 + 9);
          *(_OWORD *)(a1 + 160) = v26;
          *(_OWORD *)(a1 + 112) = v24;
          *(_OWORD *)(a1 + 128) = v25;
LABEL_11:
          *((_OWORD *)v13 + 8) = v266;
          *((_OWORD *)v13 + 9) = v279;
          *((_OWORD *)v13 + 10) = v292;
          *((_OWORD *)v13 + 4) = v206;
          *((_OWORD *)v13 + 5) = v221;
          *((_OWORD *)v13 + 6) = v236;
          *((_OWORD *)v13 + 7) = v251;
          *(_OWORD *)v13 = v146;
          *((_OWORD *)v13 + 1) = v161;
          *((_OWORD *)v13 + 2) = v176;
          *((_OWORD *)v13 + 3) = v191;
          return 1;
        }
        v275 = *(_OWORD *)(a1 + 128);
        v288 = *(_OWORD *)(a1 + 144);
        v302 = *(_OWORD *)(a1 + 160);
        v216 = *(_OWORD *)(a1 + 64);
        v231 = *(_OWORD *)(a1 + 80);
        v246 = *(_OWORD *)(a1 + 96);
        v261 = *(_OWORD *)(a1 + 112);
        v156 = *(_OWORD *)a1;
        v171 = *(_OWORD *)(a1 + 16);
        v186 = *(_OWORD *)(a1 + 32);
        v201 = *(_OWORD *)(a1 + 48);
        v101 = *(_OWORD *)(a1 + 320);
        *(_OWORD *)(a1 + 128) = *(_OWORD *)(a1 + 304);
        *(_OWORD *)(a1 + 144) = v101;
        *(_OWORD *)(a1 + 160) = *(_OWORD *)(a1 + 336);
        v102 = *(_OWORD *)(a1 + 256);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a1 + 240);
        *(_OWORD *)(a1 + 80) = v102;
        v103 = *(_OWORD *)(a1 + 288);
        *(_OWORD *)(a1 + 96) = *(_OWORD *)(a1 + 272);
        *(_OWORD *)(a1 + 112) = v103;
        v104 = *(_OWORD *)(a1 + 192);
        *(_OWORD *)a1 = *v15;
        *(_OWORD *)(a1 + 16) = v104;
        v105 = *(_OWORD *)(a1 + 224);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 208);
        *(_OWORD *)(a1 + 48) = v105;
        *(_OWORD *)(a1 + 304) = v275;
        *(_OWORD *)(a1 + 320) = v288;
        *(_OWORD *)(a1 + 336) = v302;
        *(_OWORD *)(a1 + 240) = v216;
        *(_OWORD *)(a1 + 256) = v231;
        *(_OWORD *)(a1 + 272) = v246;
        *(_OWORD *)(a1 + 288) = v261;
        *v15 = v156;
        *(_OWORD *)(a1 + 192) = v171;
        *(_OWORD *)(a1 + 208) = v186;
        *(_OWORD *)(a1 + 224) = v201;
        if (*v13 < *(double *)(a1 + 176))
        {
          v266 = *(_OWORD *)(a1 + 304);
          v279 = *(_OWORD *)(a1 + 320);
          v292 = *(_OWORD *)(a1 + 336);
          v206 = *(_OWORD *)(a1 + 240);
          v221 = *(_OWORD *)(a1 + 256);
          v236 = *(_OWORD *)(a1 + 272);
          v251 = *(_OWORD *)(a1 + 288);
          v146 = *v15;
          v161 = *(_OWORD *)(a1 + 192);
          v176 = *(_OWORD *)(a1 + 208);
          v191 = *(_OWORD *)(a1 + 224);
          v106 = *(_OWORD *)v13;
          v107 = *((_OWORD *)v13 + 2);
          *(_OWORD *)(a1 + 192) = *((_OWORD *)v13 + 1);
          *(_OWORD *)(a1 + 208) = v107;
          *v15 = v106;
          v108 = *((_OWORD *)v13 + 3);
          v109 = *((_OWORD *)v13 + 4);
          v110 = *((_OWORD *)v13 + 6);
          *(_OWORD *)(a1 + 256) = *((_OWORD *)v13 + 5);
          *(_OWORD *)(a1 + 272) = v110;
          *(_OWORD *)(a1 + 224) = v108;
          *(_OWORD *)(a1 + 240) = v109;
          v111 = *((_OWORD *)v13 + 7);
          v112 = *((_OWORD *)v13 + 8);
          v113 = *((_OWORD *)v13 + 10);
          *(_OWORD *)(a1 + 320) = *((_OWORD *)v13 + 9);
          *(_OWORD *)(a1 + 336) = v113;
          *(_OWORD *)(a1 + 288) = v111;
          *(_OWORD *)(a1 + 304) = v112;
          goto LABEL_11;
        }
        return 1;
      }
      if (v18 >= v16)
        return 1;
      v270 = *(_OWORD *)(a1 + 304);
      v283 = *(_OWORD *)(a1 + 320);
      v296 = *(_OWORD *)(a1 + 336);
      v210 = *(_OWORD *)(a1 + 240);
      v225 = *(_OWORD *)(a1 + 256);
      v240 = *(_OWORD *)(a1 + 272);
      v255 = *(_OWORD *)(a1 + 288);
      v150 = *v15;
      v165 = *(_OWORD *)(a1 + 192);
      v180 = *(_OWORD *)(a1 + 208);
      v195 = *(_OWORD *)(a1 + 224);
      v48 = *(_OWORD *)v13;
      v49 = *((_OWORD *)v13 + 2);
      *(_OWORD *)(a1 + 192) = *((_OWORD *)v13 + 1);
      *(_OWORD *)(a1 + 208) = v49;
      *v15 = v48;
      v50 = *((_OWORD *)v13 + 3);
      v51 = *((_OWORD *)v13 + 4);
      v52 = *((_OWORD *)v13 + 6);
      *(_OWORD *)(a1 + 256) = *((_OWORD *)v13 + 5);
      *(_OWORD *)(a1 + 272) = v52;
      *(_OWORD *)(a1 + 224) = v50;
      *(_OWORD *)(a1 + 240) = v51;
      v53 = *((_OWORD *)v13 + 7);
      v54 = *((_OWORD *)v13 + 8);
      v55 = *((_OWORD *)v13 + 10);
      *(_OWORD *)(a1 + 320) = *((_OWORD *)v13 + 9);
      *(_OWORD *)(a1 + 336) = v55;
      *(_OWORD *)(a1 + 288) = v53;
      *(_OWORD *)(a1 + 304) = v54;
      *((_OWORD *)v13 + 8) = v270;
      *((_OWORD *)v13 + 9) = v283;
      *((_OWORD *)v13 + 10) = v296;
      *((_OWORD *)v13 + 4) = v210;
      *((_OWORD *)v13 + 5) = v225;
      *((_OWORD *)v13 + 6) = v240;
      *((_OWORD *)v13 + 7) = v255;
      *(_OWORD *)v13 = v150;
      *((_OWORD *)v13 + 1) = v165;
      *((_OWORD *)v13 + 2) = v180;
      *((_OWORD *)v13 + 3) = v195;
      if (*(double *)(a1 + 176) >= *(double *)a1)
        return 1;
LABEL_22:
      v271 = *(_OWORD *)(a1 + 128);
      v284 = *(_OWORD *)(a1 + 144);
      v297 = *(_OWORD *)(a1 + 160);
      v211 = *(_OWORD *)(a1 + 64);
      v226 = *(_OWORD *)(a1 + 80);
      v241 = *(_OWORD *)(a1 + 96);
      v256 = *(_OWORD *)(a1 + 112);
      v151 = *(_OWORD *)a1;
      v166 = *(_OWORD *)(a1 + 16);
      v181 = *(_OWORD *)(a1 + 32);
      v196 = *(_OWORD *)(a1 + 48);
      v56 = *(_OWORD *)(a1 + 320);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a1 + 304);
      *(_OWORD *)(a1 + 144) = v56;
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a1 + 336);
      v57 = *(_OWORD *)(a1 + 256);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a1 + 240);
      *(_OWORD *)(a1 + 80) = v57;
      v58 = *(_OWORD *)(a1 + 288);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a1 + 272);
      *(_OWORD *)(a1 + 112) = v58;
      v59 = *(_OWORD *)(a1 + 192);
      *(_OWORD *)a1 = *v15;
      *(_OWORD *)(a1 + 16) = v59;
      v60 = *(_OWORD *)(a1 + 224);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 208);
      *(_OWORD *)(a1 + 48) = v60;
      *(_OWORD *)(a1 + 304) = v271;
      *(_OWORD *)(a1 + 320) = v284;
      *(_OWORD *)(a1 + 336) = v297;
      *(_OWORD *)(a1 + 240) = v211;
      *(_OWORD *)(a1 + 256) = v226;
      *(_OWORD *)(a1 + 272) = v241;
      *(_OWORD *)(a1 + 288) = v256;
      *v15 = v151;
      *(_OWORD *)(a1 + 192) = v166;
      *(_OWORD *)(a1 + 208) = v181;
      *(_OWORD *)(a1 + 224) = v196;
      return 1;
    case 4:
      v15 = (_OWORD *)(a1 + 176);
      v27 = *(double *)(a1 + 176);
      v28 = (_OWORD *)(a1 + 352);
      v29 = (double *)(a2 - 176);
      v30 = *(double *)a1;
      v31 = *(double *)(a1 + 352);
      if (v27 >= *(double *)a1)
      {
        if (v31 < v27)
        {
          v272 = *(_OWORD *)(a1 + 304);
          v285 = *(_OWORD *)(a1 + 320);
          v298 = *(_OWORD *)(a1 + 336);
          v212 = *(_OWORD *)(a1 + 240);
          v227 = *(_OWORD *)(a1 + 256);
          v242 = *(_OWORD *)(a1 + 272);
          v257 = *(_OWORD *)(a1 + 288);
          v152 = *v15;
          v167 = *(_OWORD *)(a1 + 192);
          v182 = *(_OWORD *)(a1 + 208);
          v197 = *(_OWORD *)(a1 + 224);
          v61 = *(_OWORD *)(a1 + 496);
          *(_OWORD *)(a1 + 304) = *(_OWORD *)(a1 + 480);
          *(_OWORD *)(a1 + 320) = v61;
          *(_OWORD *)(a1 + 336) = *(_OWORD *)(a1 + 512);
          v62 = *(_OWORD *)(a1 + 432);
          *(_OWORD *)(a1 + 240) = *(_OWORD *)(a1 + 416);
          *(_OWORD *)(a1 + 256) = v62;
          v63 = *(_OWORD *)(a1 + 464);
          *(_OWORD *)(a1 + 272) = *(_OWORD *)(a1 + 448);
          *(_OWORD *)(a1 + 288) = v63;
          v64 = *(_OWORD *)(a1 + 368);
          *v15 = *v28;
          *(_OWORD *)(a1 + 192) = v64;
          v65 = *(_OWORD *)(a1 + 400);
          *(_OWORD *)(a1 + 208) = *(_OWORD *)(a1 + 384);
          *(_OWORD *)(a1 + 224) = v65;
          *(_OWORD *)(a1 + 480) = v272;
          *(_OWORD *)(a1 + 496) = v285;
          *(_OWORD *)(a1 + 512) = v298;
          *(_OWORD *)(a1 + 416) = v212;
          *(_OWORD *)(a1 + 432) = v227;
          *(_OWORD *)(a1 + 448) = v242;
          *(_OWORD *)(a1 + 464) = v257;
          *v28 = v152;
          *(_OWORD *)(a1 + 368) = v167;
          v42 = *(double *)v15 < v30;
          *(_OWORD *)(a1 + 384) = v182;
          *(_OWORD *)(a1 + 400) = v197;
          if (v42)
          {
            v273 = *(_OWORD *)(a1 + 128);
            v286 = *(_OWORD *)(a1 + 144);
            v299 = *(_OWORD *)(a1 + 160);
            v213 = *(_OWORD *)(a1 + 64);
            v228 = *(_OWORD *)(a1 + 80);
            v243 = *(_OWORD *)(a1 + 96);
            v258 = *(_OWORD *)(a1 + 112);
            v153 = *(_OWORD *)a1;
            v168 = *(_OWORD *)(a1 + 16);
            v183 = *(_OWORD *)(a1 + 32);
            v198 = *(_OWORD *)(a1 + 48);
            v66 = *(_OWORD *)(a1 + 320);
            *(_OWORD *)(a1 + 128) = *(_OWORD *)(a1 + 304);
            *(_OWORD *)(a1 + 144) = v66;
            *(_OWORD *)(a1 + 160) = *(_OWORD *)(a1 + 336);
            v67 = *(_OWORD *)(a1 + 256);
            *(_OWORD *)(a1 + 64) = *(_OWORD *)(a1 + 240);
            *(_OWORD *)(a1 + 80) = v67;
            v68 = *(_OWORD *)(a1 + 288);
            *(_OWORD *)(a1 + 96) = *(_OWORD *)(a1 + 272);
            *(_OWORD *)(a1 + 112) = v68;
            v69 = *(_OWORD *)(a1 + 192);
            *(_OWORD *)a1 = *v15;
            *(_OWORD *)(a1 + 16) = v69;
            v70 = *(_OWORD *)(a1 + 224);
            *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 208);
            *(_OWORD *)(a1 + 48) = v70;
            *(_OWORD *)(a1 + 304) = v273;
            *(_OWORD *)(a1 + 320) = v286;
            *(_OWORD *)(a1 + 336) = v299;
            *(_OWORD *)(a1 + 240) = v213;
            *(_OWORD *)(a1 + 256) = v228;
            *(_OWORD *)(a1 + 272) = v243;
            *(_OWORD *)(a1 + 288) = v258;
            *v15 = v153;
            *(_OWORD *)(a1 + 192) = v168;
            *(_OWORD *)(a1 + 208) = v183;
            *(_OWORD *)(a1 + 224) = v198;
          }
        }
      }
      else
      {
        if (v31 >= v27)
        {
          v303 = *(_OWORD *)(a1 + 160);
          v217 = *(_OWORD *)(a1 + 64);
          v232 = *(_OWORD *)(a1 + 80);
          v247 = *(_OWORD *)(a1 + 96);
          v262 = *(_OWORD *)(a1 + 112);
          v157 = *(_OWORD *)a1;
          v172 = *(_OWORD *)(a1 + 16);
          v187 = *(_OWORD *)(a1 + 32);
          v202 = *(_OWORD *)(a1 + 48);
          v114 = *(_OWORD *)(a1 + 304);
          v115 = *(_OWORD *)(a1 + 320);
          v116 = *(_OWORD *)(a1 + 336);
          v117 = *(_OWORD *)(a1 + 240);
          v118 = *(_OWORD *)(a1 + 256);
          v120 = *(_OWORD *)(a1 + 272);
          v119 = *(_OWORD *)(a1 + 288);
          v121 = *v15;
          v122 = *(_OWORD *)(a1 + 192);
          v124 = *(_OWORD *)(a1 + 208);
          v123 = *(_OWORD *)(a1 + 224);
          v125 = *(_OWORD *)(a1 + 144);
          *(_OWORD *)(a1 + 304) = *(_OWORD *)(a1 + 128);
          *(_OWORD *)(a1 + 320) = v125;
          *(_OWORD *)(a1 + 336) = v303;
          *(_OWORD *)(a1 + 240) = v217;
          *(_OWORD *)(a1 + 256) = v232;
          *(_OWORD *)(a1 + 272) = v247;
          *(_OWORD *)(a1 + 288) = v262;
          *v15 = v157;
          *(_OWORD *)(a1 + 192) = v172;
          *(_OWORD *)(a1 + 208) = v187;
          *(_OWORD *)(a1 + 224) = v202;
          v126 = *(double *)(a1 + 176);
          *(_OWORD *)(a1 + 128) = v114;
          *(_OWORD *)(a1 + 144) = v115;
          *(_OWORD *)(a1 + 160) = v116;
          *(_OWORD *)(a1 + 64) = v117;
          *(_OWORD *)(a1 + 80) = v118;
          *(_OWORD *)(a1 + 96) = v120;
          *(_OWORD *)(a1 + 112) = v119;
          *(_OWORD *)a1 = v121;
          *(_OWORD *)(a1 + 16) = v122;
          *(_OWORD *)(a1 + 32) = v124;
          *(_OWORD *)(a1 + 48) = v123;
          if (v31 >= v126)
            goto LABEL_45;
          v267 = *(_OWORD *)(a1 + 304);
          v280 = *(_OWORD *)(a1 + 320);
          v293 = *(_OWORD *)(a1 + 336);
          v207 = *(_OWORD *)(a1 + 240);
          v222 = *(_OWORD *)(a1 + 256);
          v237 = *(_OWORD *)(a1 + 272);
          v252 = *(_OWORD *)(a1 + 288);
          v147 = *v15;
          v162 = *(_OWORD *)(a1 + 192);
          v177 = *(_OWORD *)(a1 + 208);
          v192 = *(_OWORD *)(a1 + 224);
          v127 = *(_OWORD *)(a1 + 496);
          *(_OWORD *)(a1 + 304) = *(_OWORD *)(a1 + 480);
          *(_OWORD *)(a1 + 320) = v127;
          *(_OWORD *)(a1 + 336) = *(_OWORD *)(a1 + 512);
          v128 = *(_OWORD *)(a1 + 432);
          *(_OWORD *)(a1 + 240) = *(_OWORD *)(a1 + 416);
          *(_OWORD *)(a1 + 256) = v128;
          v129 = *(_OWORD *)(a1 + 464);
          *(_OWORD *)(a1 + 272) = *(_OWORD *)(a1 + 448);
          *(_OWORD *)(a1 + 288) = v129;
          v130 = *(_OWORD *)(a1 + 368);
          *v15 = *v28;
          *(_OWORD *)(a1 + 192) = v130;
          v131 = *(_OWORD *)(a1 + 400);
          *(_OWORD *)(a1 + 208) = *(_OWORD *)(a1 + 384);
          *(_OWORD *)(a1 + 224) = v131;
        }
        else
        {
          v267 = *(_OWORD *)(a1 + 128);
          v280 = *(_OWORD *)(a1 + 144);
          v293 = *(_OWORD *)(a1 + 160);
          v207 = *(_OWORD *)(a1 + 64);
          v222 = *(_OWORD *)(a1 + 80);
          v237 = *(_OWORD *)(a1 + 96);
          v252 = *(_OWORD *)(a1 + 112);
          v147 = *(_OWORD *)a1;
          v162 = *(_OWORD *)(a1 + 16);
          v177 = *(_OWORD *)(a1 + 32);
          v192 = *(_OWORD *)(a1 + 48);
          v32 = *(_OWORD *)(a1 + 496);
          *(_OWORD *)(a1 + 128) = *(_OWORD *)(a1 + 480);
          *(_OWORD *)(a1 + 144) = v32;
          *(_OWORD *)(a1 + 160) = *(_OWORD *)(a1 + 512);
          v33 = *(_OWORD *)(a1 + 432);
          *(_OWORD *)(a1 + 64) = *(_OWORD *)(a1 + 416);
          *(_OWORD *)(a1 + 80) = v33;
          v34 = *(_OWORD *)(a1 + 464);
          *(_OWORD *)(a1 + 96) = *(_OWORD *)(a1 + 448);
          *(_OWORD *)(a1 + 112) = v34;
          v35 = *(_OWORD *)(a1 + 368);
          *(_OWORD *)a1 = *v28;
          *(_OWORD *)(a1 + 16) = v35;
          v36 = *(_OWORD *)(a1 + 400);
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 384);
          *(_OWORD *)(a1 + 48) = v36;
        }
        *(_OWORD *)(a1 + 480) = v267;
        *(_OWORD *)(a1 + 496) = v280;
        *(_OWORD *)(a1 + 512) = v293;
        *(_OWORD *)(a1 + 416) = v207;
        *(_OWORD *)(a1 + 432) = v222;
        *(_OWORD *)(a1 + 448) = v237;
        *(_OWORD *)(a1 + 464) = v252;
        *v28 = v147;
        *(_OWORD *)(a1 + 368) = v162;
        *(_OWORD *)(a1 + 384) = v177;
        *(_OWORD *)(a1 + 400) = v192;
      }
LABEL_45:
      if (*v29 >= *(double *)v28)
        return 1;
      v276 = *(_OWORD *)(a1 + 480);
      v289 = *(_OWORD *)(a1 + 496);
      v304 = *(_OWORD *)(a1 + 512);
      v218 = *(_OWORD *)(a1 + 416);
      v233 = *(_OWORD *)(a1 + 432);
      v248 = *(_OWORD *)(a1 + 448);
      v263 = *(_OWORD *)(a1 + 464);
      v158 = *v28;
      v173 = *(_OWORD *)(a1 + 368);
      v188 = *(_OWORD *)(a1 + 384);
      v203 = *(_OWORD *)(a1 + 400);
      v132 = *(_OWORD *)v29;
      v133 = *(_OWORD *)(a2 - 144);
      *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 - 160);
      *(_OWORD *)(a1 + 384) = v133;
      *v28 = v132;
      v134 = *(_OWORD *)(a2 - 128);
      v135 = *(_OWORD *)(a2 - 112);
      v136 = *(_OWORD *)(a2 - 80);
      *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 - 96);
      *(_OWORD *)(a1 + 448) = v136;
      *(_OWORD *)(a1 + 400) = v134;
      *(_OWORD *)(a1 + 416) = v135;
      v137 = *(_OWORD *)(a2 - 64);
      v138 = *(_OWORD *)(a2 - 48);
      v139 = *(_OWORD *)(a2 - 16);
      *(_OWORD *)(a1 + 496) = *(_OWORD *)(a2 - 32);
      *(_OWORD *)(a1 + 512) = v139;
      *(_OWORD *)(a1 + 464) = v137;
      *(_OWORD *)(a1 + 480) = v138;
      *(_OWORD *)(a2 - 48) = v276;
      *(_OWORD *)(a2 - 32) = v289;
      *(_OWORD *)(a2 - 16) = v304;
      *(_OWORD *)(a2 - 112) = v218;
      *(_OWORD *)(a2 - 96) = v233;
      *(_OWORD *)(a2 - 80) = v248;
      *(_OWORD *)(a2 - 64) = v263;
      *(_OWORD *)v29 = v158;
      *(_OWORD *)(a2 - 160) = v173;
      *(_OWORD *)(a2 - 144) = v188;
      *(_OWORD *)(a2 - 128) = v203;
      if (*(double *)v28 >= *(double *)v15)
        return 1;
      v277 = *(_OWORD *)(a1 + 304);
      v290 = *(_OWORD *)(a1 + 320);
      v305 = *(_OWORD *)(a1 + 336);
      v219 = *(_OWORD *)(a1 + 240);
      v234 = *(_OWORD *)(a1 + 256);
      v249 = *(_OWORD *)(a1 + 272);
      v264 = *(_OWORD *)(a1 + 288);
      v159 = *v15;
      v174 = *(_OWORD *)(a1 + 192);
      v189 = *(_OWORD *)(a1 + 208);
      v204 = *(_OWORD *)(a1 + 224);
      v140 = *(_OWORD *)(a1 + 496);
      *(_OWORD *)(a1 + 304) = *(_OWORD *)(a1 + 480);
      *(_OWORD *)(a1 + 320) = v140;
      *(_OWORD *)(a1 + 336) = *(_OWORD *)(a1 + 512);
      v141 = *(_OWORD *)(a1 + 432);
      *(_OWORD *)(a1 + 240) = *(_OWORD *)(a1 + 416);
      *(_OWORD *)(a1 + 256) = v141;
      v142 = *(_OWORD *)(a1 + 464);
      *(_OWORD *)(a1 + 272) = *(_OWORD *)(a1 + 448);
      *(_OWORD *)(a1 + 288) = v142;
      v143 = *(_OWORD *)(a1 + 368);
      *v15 = *v28;
      *(_OWORD *)(a1 + 192) = v143;
      v144 = *(_OWORD *)(a1 + 400);
      *(_OWORD *)(a1 + 208) = *(_OWORD *)(a1 + 384);
      *(_OWORD *)(a1 + 224) = v144;
      *(_OWORD *)(a1 + 480) = v277;
      *(_OWORD *)(a1 + 496) = v290;
      *(_OWORD *)(a1 + 512) = v305;
      *(_OWORD *)(a1 + 416) = v219;
      *(_OWORD *)(a1 + 432) = v234;
      *(_OWORD *)(a1 + 448) = v249;
      *(_OWORD *)(a1 + 464) = v264;
      *v28 = v159;
      *(_OWORD *)(a1 + 368) = v174;
      v42 = *(double *)(a1 + 176) < *(double *)a1;
      *(_OWORD *)(a1 + 384) = v189;
      *(_OWORD *)(a1 + 400) = v204;
      if (!v42)
        return 1;
      goto LABEL_22;
    case 5:
      sub_20EB7A0BC((__n128 *)a1, (__n128 *)(a1 + 176), (__n128 *)(a1 + 352), (__int128 *)(a1 + 528), (__int128 *)(a2 - 176));
      return 1;
    default:
      v3 = (__n128 *)(a1 + 352);
      v4 = (__n128 *)(a1 + 176);
      v5 = *(double *)(a1 + 176);
      v6 = *(double *)a1;
      v7 = *(double *)(a1 + 352);
      if (v5 >= *(double *)a1)
      {
        if (v7 < v5)
        {
          v268 = *(_OWORD *)(a1 + 304);
          v281 = *(_OWORD *)(a1 + 320);
          v294 = *(_OWORD *)(a1 + 336);
          v208 = *(_OWORD *)(a1 + 240);
          v223 = *(_OWORD *)(a1 + 256);
          v238 = *(_OWORD *)(a1 + 272);
          v253 = *(_OWORD *)(a1 + 288);
          v148 = *v4;
          v163 = *(_OWORD *)(a1 + 192);
          v178 = *(_OWORD *)(a1 + 208);
          v193 = *(_OWORD *)(a1 + 224);
          v37 = *(_OWORD *)(a1 + 496);
          *(_OWORD *)(a1 + 304) = *(_OWORD *)(a1 + 480);
          *(_OWORD *)(a1 + 320) = v37;
          *(_OWORD *)(a1 + 336) = *(_OWORD *)(a1 + 512);
          v38 = *(_OWORD *)(a1 + 432);
          *(_OWORD *)(a1 + 240) = *(_OWORD *)(a1 + 416);
          *(_OWORD *)(a1 + 256) = v38;
          v39 = *(_OWORD *)(a1 + 464);
          *(_OWORD *)(a1 + 272) = *(_OWORD *)(a1 + 448);
          *(_OWORD *)(a1 + 288) = v39;
          v40 = *(_OWORD *)(a1 + 368);
          *v4 = *v3;
          *(_OWORD *)(a1 + 192) = v40;
          v41 = *(_OWORD *)(a1 + 400);
          *(_OWORD *)(a1 + 208) = *(_OWORD *)(a1 + 384);
          *(_OWORD *)(a1 + 224) = v41;
          *(_OWORD *)(a1 + 480) = v268;
          *(_OWORD *)(a1 + 496) = v281;
          *(_OWORD *)(a1 + 512) = v294;
          *(_OWORD *)(a1 + 416) = v208;
          *(_OWORD *)(a1 + 432) = v223;
          *(_OWORD *)(a1 + 448) = v238;
          *(_OWORD *)(a1 + 464) = v253;
          *v3 = v148;
          *(_OWORD *)(a1 + 368) = v163;
          v42 = v4->n128_f64[0] < v6;
          *(_OWORD *)(a1 + 384) = v178;
          *(_OWORD *)(a1 + 400) = v193;
          if (v42)
          {
            v269 = *(_OWORD *)(a1 + 128);
            v282 = *(_OWORD *)(a1 + 144);
            v295 = *(_OWORD *)(a1 + 160);
            v209 = *(_OWORD *)(a1 + 64);
            v224 = *(_OWORD *)(a1 + 80);
            v239 = *(_OWORD *)(a1 + 96);
            v254 = *(_OWORD *)(a1 + 112);
            v149 = *(__n128 *)a1;
            v164 = *(_OWORD *)(a1 + 16);
            v179 = *(_OWORD *)(a1 + 32);
            v194 = *(_OWORD *)(a1 + 48);
            v43 = *(_OWORD *)(a1 + 320);
            *(_OWORD *)(a1 + 128) = *(_OWORD *)(a1 + 304);
            *(_OWORD *)(a1 + 144) = v43;
            *(_OWORD *)(a1 + 160) = *(_OWORD *)(a1 + 336);
            v44 = *(_OWORD *)(a1 + 256);
            *(_OWORD *)(a1 + 64) = *(_OWORD *)(a1 + 240);
            *(_OWORD *)(a1 + 80) = v44;
            v45 = *(_OWORD *)(a1 + 288);
            *(_OWORD *)(a1 + 96) = *(_OWORD *)(a1 + 272);
            *(_OWORD *)(a1 + 112) = v45;
            v46 = *(_OWORD *)(a1 + 192);
            *(__n128 *)a1 = *v4;
            *(_OWORD *)(a1 + 16) = v46;
            v47 = *(_OWORD *)(a1 + 224);
            *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 208);
            *(_OWORD *)(a1 + 48) = v47;
            *(_OWORD *)(a1 + 304) = v269;
            *(_OWORD *)(a1 + 320) = v282;
            *(_OWORD *)(a1 + 336) = v295;
            *(_OWORD *)(a1 + 240) = v209;
            *(_OWORD *)(a1 + 256) = v224;
            *(_OWORD *)(a1 + 272) = v239;
            *(_OWORD *)(a1 + 288) = v254;
            *v4 = v149;
            *(_OWORD *)(a1 + 192) = v164;
            *(_OWORD *)(a1 + 208) = v179;
            *(_OWORD *)(a1 + 224) = v194;
          }
        }
      }
      else
      {
        if (v7 >= v5)
        {
          v300 = *(_OWORD *)(a1 + 160);
          v214 = *(_OWORD *)(a1 + 64);
          v229 = *(_OWORD *)(a1 + 80);
          v244 = *(_OWORD *)(a1 + 96);
          v259 = *(_OWORD *)(a1 + 112);
          v154 = *(__n128 *)a1;
          v169 = *(_OWORD *)(a1 + 16);
          v184 = *(_OWORD *)(a1 + 32);
          v199 = *(_OWORD *)(a1 + 48);
          v71 = *(_OWORD *)(a1 + 304);
          v72 = *(_OWORD *)(a1 + 320);
          v73 = *(_OWORD *)(a1 + 336);
          v74 = *(_OWORD *)(a1 + 240);
          v75 = *(_OWORD *)(a1 + 256);
          v77 = *(_OWORD *)(a1 + 272);
          v76 = *(_OWORD *)(a1 + 288);
          v78 = *v4;
          v79 = *(_OWORD *)(a1 + 192);
          v81 = *(_OWORD *)(a1 + 208);
          v80 = *(_OWORD *)(a1 + 224);
          v82 = *(_OWORD *)(a1 + 144);
          *(_OWORD *)(a1 + 304) = *(_OWORD *)(a1 + 128);
          *(_OWORD *)(a1 + 320) = v82;
          *(_OWORD *)(a1 + 336) = v300;
          *(_OWORD *)(a1 + 240) = v214;
          *(_OWORD *)(a1 + 256) = v229;
          *(_OWORD *)(a1 + 272) = v244;
          *(_OWORD *)(a1 + 288) = v259;
          *v4 = v154;
          *(_OWORD *)(a1 + 192) = v169;
          *(_OWORD *)(a1 + 208) = v184;
          *(_OWORD *)(a1 + 224) = v199;
          v83 = *(double *)(a1 + 176);
          *(_OWORD *)(a1 + 128) = v71;
          *(_OWORD *)(a1 + 144) = v72;
          *(_OWORD *)(a1 + 160) = v73;
          *(_OWORD *)(a1 + 64) = v74;
          *(_OWORD *)(a1 + 80) = v75;
          *(_OWORD *)(a1 + 96) = v77;
          *(_OWORD *)(a1 + 112) = v76;
          *(__n128 *)a1 = v78;
          *(_OWORD *)(a1 + 16) = v79;
          *(_OWORD *)(a1 + 32) = v81;
          *(_OWORD *)(a1 + 48) = v80;
          if (v7 >= v83)
            goto LABEL_30;
          v265 = *(_OWORD *)(a1 + 304);
          v278 = *(_OWORD *)(a1 + 320);
          v291 = *(_OWORD *)(a1 + 336);
          v205 = *(_OWORD *)(a1 + 240);
          v220 = *(_OWORD *)(a1 + 256);
          v235 = *(_OWORD *)(a1 + 272);
          v250 = *(_OWORD *)(a1 + 288);
          v145 = *v4;
          v160 = *(_OWORD *)(a1 + 192);
          v175 = *(_OWORD *)(a1 + 208);
          v190 = *(_OWORD *)(a1 + 224);
          v84 = *(_OWORD *)(a1 + 496);
          *(_OWORD *)(a1 + 304) = *(_OWORD *)(a1 + 480);
          *(_OWORD *)(a1 + 320) = v84;
          *(_OWORD *)(a1 + 336) = *(_OWORD *)(a1 + 512);
          v85 = *(_OWORD *)(a1 + 432);
          *(_OWORD *)(a1 + 240) = *(_OWORD *)(a1 + 416);
          *(_OWORD *)(a1 + 256) = v85;
          v86 = *(_OWORD *)(a1 + 464);
          *(_OWORD *)(a1 + 272) = *(_OWORD *)(a1 + 448);
          *(_OWORD *)(a1 + 288) = v86;
          v87 = *(_OWORD *)(a1 + 368);
          *v4 = *v3;
          *(_OWORD *)(a1 + 192) = v87;
          v88 = *(_OWORD *)(a1 + 400);
          *(_OWORD *)(a1 + 208) = *(_OWORD *)(a1 + 384);
          *(_OWORD *)(a1 + 224) = v88;
        }
        else
        {
          v265 = *(_OWORD *)(a1 + 128);
          v278 = *(_OWORD *)(a1 + 144);
          v291 = *(_OWORD *)(a1 + 160);
          v205 = *(_OWORD *)(a1 + 64);
          v220 = *(_OWORD *)(a1 + 80);
          v235 = *(_OWORD *)(a1 + 96);
          v250 = *(_OWORD *)(a1 + 112);
          v145 = *(__n128 *)a1;
          v160 = *(_OWORD *)(a1 + 16);
          v175 = *(_OWORD *)(a1 + 32);
          v190 = *(_OWORD *)(a1 + 48);
          v8 = *(_OWORD *)(a1 + 496);
          *(_OWORD *)(a1 + 128) = *(_OWORD *)(a1 + 480);
          *(_OWORD *)(a1 + 144) = v8;
          *(_OWORD *)(a1 + 160) = *(_OWORD *)(a1 + 512);
          v9 = *(_OWORD *)(a1 + 432);
          *(_OWORD *)(a1 + 64) = *(_OWORD *)(a1 + 416);
          *(_OWORD *)(a1 + 80) = v9;
          v10 = *(_OWORD *)(a1 + 464);
          *(_OWORD *)(a1 + 96) = *(_OWORD *)(a1 + 448);
          *(_OWORD *)(a1 + 112) = v10;
          v11 = *(_OWORD *)(a1 + 368);
          *(__n128 *)a1 = *v3;
          *(_OWORD *)(a1 + 16) = v11;
          v12 = *(_OWORD *)(a1 + 400);
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 384);
          *(_OWORD *)(a1 + 48) = v12;
        }
        *(_OWORD *)(a1 + 480) = v265;
        *(_OWORD *)(a1 + 496) = v278;
        *(_OWORD *)(a1 + 512) = v291;
        *(_OWORD *)(a1 + 416) = v205;
        *(_OWORD *)(a1 + 432) = v220;
        *(_OWORD *)(a1 + 448) = v235;
        *(_OWORD *)(a1 + 464) = v250;
        *v3 = v145;
        *(_OWORD *)(a1 + 368) = v160;
        *(_OWORD *)(a1 + 384) = v175;
        *(_OWORD *)(a1 + 400) = v190;
      }
LABEL_30:
      v89 = a1 + 528;
      if (a1 + 528 == a2)
        return 1;
      v90 = 0;
      v91 = 0;
      while (1)
      {
        v93 = *(double *)v89;
        if (*(double *)v89 < v3->n128_f64[0])
        {
          v274 = *(_OWORD *)(v89 + 136);
          v287 = *(_OWORD *)(v89 + 152);
          v301 = *(_QWORD *)(v89 + 168);
          v215 = *(_OWORD *)(v89 + 72);
          v230 = *(_OWORD *)(v89 + 88);
          v245 = *(_OWORD *)(v89 + 104);
          v260 = *(_OWORD *)(v89 + 120);
          v155 = *(_OWORD *)(v89 + 8);
          v170 = *(_OWORD *)(v89 + 24);
          v94 = v90;
          v185 = *(_OWORD *)(v89 + 40);
          v200 = *(_OWORD *)(v89 + 56);
          do
          {
            v95 = a1 + v94;
            v96 = *(_OWORD *)(a1 + v94 + 496);
            *(_OWORD *)(v95 + 656) = *(_OWORD *)(a1 + v94 + 480);
            *(_OWORD *)(v95 + 672) = v96;
            *(_OWORD *)(v95 + 688) = *(_OWORD *)(a1 + v94 + 512);
            v97 = *(_OWORD *)(a1 + v94 + 432);
            *(_OWORD *)(v95 + 592) = *(_OWORD *)(a1 + v94 + 416);
            *(_OWORD *)(v95 + 608) = v97;
            v98 = *(_OWORD *)(a1 + v94 + 464);
            *(_OWORD *)(v95 + 624) = *(_OWORD *)(a1 + v94 + 448);
            *(_OWORD *)(v95 + 640) = v98;
            v99 = *(_OWORD *)(a1 + v94 + 368);
            *(_OWORD *)(v95 + 528) = *(_OWORD *)(a1 + v94 + 352);
            *(_OWORD *)(v95 + 544) = v99;
            v100 = *(_OWORD *)(a1 + v94 + 400);
            *(_OWORD *)(v95 + 560) = *(_OWORD *)(a1 + v94 + 384);
            *(_OWORD *)(v95 + 576) = v100;
            if (v94 == -352)
            {
              v92 = a1;
              goto LABEL_33;
            }
            v94 -= 176;
          }
          while (v93 < *(double *)(v95 + 176));
          v92 = a1 + v94 + 528;
LABEL_33:
          *(double *)v92 = v93;
          *(_OWORD *)(v92 + 120) = v260;
          *(_OWORD *)(v92 + 136) = v274;
          *(_OWORD *)(v92 + 152) = v287;
          *(_OWORD *)(v92 + 56) = v200;
          *(_OWORD *)(v92 + 72) = v215;
          *(_OWORD *)(v92 + 88) = v230;
          *(_OWORD *)(v92 + 104) = v245;
          *(_OWORD *)(v92 + 8) = v155;
          *(_OWORD *)(v92 + 24) = v170;
          *(_QWORD *)(v92 + 168) = v301;
          ++v91;
          *(_OWORD *)(v92 + 40) = v185;
          if (v91 == 8)
            return v89 + 176 == a2;
        }
        v3 = (__n128 *)v89;
        v90 += 176;
        v89 += 176;
        if (v89 == a2)
          return 1;
      }
  }
}

__n128 sub_20EB7A0BC(__n128 *a1, __n128 *a2, __n128 *a3, __int128 *a4, __int128 *a5)
{
  double v5;
  double v6;
  __n128 v7;
  __n128 v8;
  __n128 v9;
  __n128 v10;
  __n128 v11;
  __n128 result;
  __n128 v13;
  __n128 v14;
  __n128 v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  __n128 v31;
  __n128 v32;
  __n128 v33;
  __n128 v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  __n128 v38;
  __n128 v39;
  __n128 v40;
  __n128 v41;
  __n128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __n128 v50;
  __n128 v51;
  __n128 v52;
  __n128 v53;
  __n128 v54;
  __n128 v55;
  __n128 v56;
  __n128 v57;
  __n128 v58;
  __n128 v59;
  __n128 v60;
  __n128 v61;
  __n128 v62;
  __n128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __n128 v78;
  __n128 v79;
  __n128 v80;
  __n128 v81;
  __n128 v82;
  __n128 v83;
  __n128 v84;
  __n128 v85;
  __n128 v86;
  __n128 v87;
  __n128 v88;
  __n128 v89;
  __n128 v90;
  __n128 v91;
  __n128 v92;
  __n128 v93;
  __n128 v94;
  __n128 v95;
  __n128 v96;
  __n128 v97;
  __n128 v98;
  __n128 v99;
  __int128 v100;
  __n128 v101;
  __n128 v102;
  __n128 v103;
  __n128 v104;
  __n128 v105;
  __n128 v106;
  __n128 v107;
  __int128 v108;
  __n128 v109;
  __n128 v110;
  __int128 v111;
  __int128 v112;
  __n128 v113;
  __n128 v114;
  __n128 v115;
  __n128 v116;
  __n128 v117;
  __n128 v118;
  __int128 v119;
  __n128 v120;
  __n128 v121;
  __int128 v122;
  __int128 v123;
  __n128 v124;
  __n128 v125;
  __n128 v126;
  __n128 v127;
  __n128 v128;
  __n128 v129;
  __int128 v130;
  __n128 v131;
  __n128 v132;
  __int128 v133;
  __int128 v134;
  __n128 v135;
  __n128 v136;
  __n128 v137;
  __n128 v138;
  __n128 v139;
  __n128 v140;
  __int128 v141;
  __n128 v142;
  __n128 v143;
  __int128 v144;
  __int128 v145;
  __n128 v146;
  __n128 v147;
  __n128 v148;
  __n128 v149;
  __n128 v150;
  __n128 v151;
  __int128 v152;
  __n128 v153;
  __n128 v154;
  __int128 v155;
  __int128 v156;
  __n128 v157;
  __n128 v158;
  __n128 v159;
  __n128 v160;
  __n128 v161;
  __n128 v162;
  __int128 v163;
  __n128 v164;
  __n128 v165;
  __int128 v166;
  __int128 v167;
  __n128 v168;
  __n128 v169;
  __n128 v170;
  __n128 v171;
  __n128 v172;
  __n128 v173;
  __int128 v174;
  __n128 v175;
  __n128 v176;
  __int128 v177;
  __int128 v178;
  __n128 v179;
  __n128 v180;
  __n128 v181;
  __n128 v182;
  __n128 v183;
  __n128 v184;
  __int128 v185;
  __n128 v186;
  __n128 v187;
  __int128 v188;
  __int128 v189;
  __n128 v190;
  __n128 v191;
  __n128 v192;
  __n128 v193;
  __n128 v194;
  __n128 v195;
  __int128 v196;
  __n128 v197;
  __n128 v198;
  __int128 v199;
  __int128 v200;
  __n128 v201;
  __n128 v202;
  __n128 v203;
  __n128 v204;
  __n128 v205;
  __n128 v206;
  __int128 v207;
  __n128 v208;
  __n128 v209;
  __int128 v210;
  __int128 v211;
  __n128 v212;
  __n128 v213;

  v5 = a2->n128_f64[0];
  v6 = a3->n128_f64[0];
  if (a2->n128_f64[0] >= a1->n128_f64[0])
  {
    if (v6 < v5)
    {
      v182 = a2[8];
      v193 = a2[9];
      v204 = a2[10];
      v138 = a2[4];
      v149 = a2[5];
      v160 = a2[6];
      v171 = a2[7];
      v94 = *a2;
      v105 = a2[1];
      v116 = a2[2];
      v127 = a2[3];
      v15 = *a3;
      v16 = a3[2];
      a2[1] = a3[1];
      a2[2] = v16;
      *a2 = v15;
      v17 = a3[3];
      v18 = a3[4];
      v19 = a3[6];
      a2[5] = a3[5];
      a2[6] = v19;
      a2[3] = v17;
      a2[4] = v18;
      result = a3[7];
      v20 = a3[8];
      v21 = a3[10];
      a2[9] = a3[9];
      a2[10] = v21;
      a2[7] = result;
      a2[8] = v20;
      a3[8] = v182;
      a3[9] = v193;
      a3[10] = v204;
      a3[4] = v138;
      a3[5] = v149;
      a3[6] = v160;
      a3[7] = v171;
      *a3 = v94;
      a3[1] = v105;
      a3[2] = v116;
      a3[3] = v127;
      if (a2->n128_f64[0] < a1->n128_f64[0])
      {
        v183 = a1[8];
        v194 = a1[9];
        v205 = a1[10];
        v139 = a1[4];
        v150 = a1[5];
        v161 = a1[6];
        v172 = a1[7];
        v95 = *a1;
        v106 = a1[1];
        v117 = a1[2];
        v128 = a1[3];
        v22 = *a2;
        v23 = a2[2];
        a1[1] = a2[1];
        a1[2] = v23;
        *a1 = v22;
        v24 = a2[3];
        v25 = a2[4];
        v26 = a2[6];
        a1[5] = a2[5];
        a1[6] = v26;
        a1[3] = v24;
        a1[4] = v25;
        result = a2[7];
        v27 = a2[8];
        v28 = a2[10];
        a1[9] = a2[9];
        a1[10] = v28;
        a1[7] = result;
        a1[8] = v27;
        a2[8] = v183;
        a2[9] = v194;
        a2[10] = v205;
        a2[4] = v139;
        a2[5] = v150;
        a2[6] = v161;
        a2[7] = v172;
        *a2 = v95;
        a2[1] = v106;
        a2[2] = v117;
        a2[3] = v128;
      }
    }
  }
  else
  {
    if (v6 < v5)
    {
      v181 = a1[8];
      v192 = a1[9];
      v203 = a1[10];
      v137 = a1[4];
      v148 = a1[5];
      v159 = a1[6];
      v170 = a1[7];
      v93 = *a1;
      v104 = a1[1];
      v115 = a1[2];
      v126 = a1[3];
      v7 = *a3;
      v8 = a3[2];
      a1[1] = a3[1];
      a1[2] = v8;
      *a1 = v7;
      v9 = a3[3];
      v10 = a3[4];
      v11 = a3[6];
      a1[5] = a3[5];
      a1[6] = v11;
      a1[3] = v9;
      a1[4] = v10;
      result = a3[7];
      v13 = a3[8];
      v14 = a3[10];
      a1[9] = a3[9];
      a1[10] = v14;
      a1[7] = result;
      a1[8] = v13;
LABEL_9:
      a3[8] = v181;
      a3[9] = v192;
      a3[10] = v203;
      a3[4] = v137;
      a3[5] = v148;
      a3[6] = v159;
      a3[7] = v170;
      *a3 = v93;
      a3[1] = v104;
      a3[2] = v115;
      a3[3] = v126;
      goto LABEL_10;
    }
    v184 = a1[8];
    v195 = a1[9];
    v206 = a1[10];
    v140 = a1[4];
    v151 = a1[5];
    v162 = a1[6];
    v173 = a1[7];
    v96 = *a1;
    v107 = a1[1];
    v118 = a1[2];
    v129 = a1[3];
    v29 = *a2;
    v30 = a2[2];
    a1[1] = a2[1];
    a1[2] = v30;
    *a1 = v29;
    v31 = a2[3];
    v32 = a2[4];
    v33 = a2[6];
    a1[5] = a2[5];
    a1[6] = v33;
    a1[3] = v31;
    a1[4] = v32;
    result = a2[7];
    v34 = a2[8];
    v35 = a2[10];
    a1[9] = a2[9];
    a1[10] = v35;
    a1[7] = result;
    a1[8] = v34;
    a2[8] = v184;
    a2[9] = v195;
    a2[10] = v206;
    a2[4] = v140;
    a2[5] = v151;
    a2[6] = v162;
    a2[7] = v173;
    *a2 = v96;
    a2[1] = v107;
    a2[2] = v118;
    a2[3] = v129;
    if (a3->n128_f64[0] < a2->n128_f64[0])
    {
      v181 = a2[8];
      v192 = a2[9];
      v203 = a2[10];
      v137 = a2[4];
      v148 = a2[5];
      v159 = a2[6];
      v170 = a2[7];
      v93 = *a2;
      v104 = a2[1];
      v115 = a2[2];
      v126 = a2[3];
      v36 = *a3;
      v37 = a3[2];
      a2[1] = a3[1];
      a2[2] = v37;
      *a2 = v36;
      v38 = a3[3];
      v39 = a3[4];
      v40 = a3[6];
      a2[5] = a3[5];
      a2[6] = v40;
      a2[3] = v38;
      a2[4] = v39;
      result = a3[7];
      v41 = a3[8];
      v42 = a3[10];
      a2[9] = a3[9];
      a2[10] = v42;
      a2[7] = result;
      a2[8] = v41;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (*(double *)a4 < a3->n128_f64[0])
  {
    v185 = (__int128)a3[8];
    v196 = (__int128)a3[9];
    v207 = (__int128)a3[10];
    v141 = (__int128)a3[4];
    v152 = (__int128)a3[5];
    v163 = (__int128)a3[6];
    v174 = (__int128)a3[7];
    v97 = *a3;
    v108 = (__int128)a3[1];
    v119 = (__int128)a3[2];
    v130 = (__int128)a3[3];
    v43 = *a4;
    v44 = a4[2];
    a3[1] = (__n128)a4[1];
    a3[2] = (__n128)v44;
    *a3 = (__n128)v43;
    v45 = a4[3];
    v46 = a4[4];
    v47 = a4[6];
    a3[5] = (__n128)a4[5];
    a3[6] = (__n128)v47;
    a3[3] = (__n128)v45;
    a3[4] = (__n128)v46;
    result = (__n128)a4[7];
    v48 = a4[8];
    v49 = a4[10];
    a3[9] = (__n128)a4[9];
    a3[10] = (__n128)v49;
    a3[7] = result;
    a3[8] = (__n128)v48;
    a4[8] = v185;
    a4[9] = v196;
    a4[10] = v207;
    a4[4] = v141;
    a4[5] = v152;
    a4[6] = v163;
    a4[7] = v174;
    *a4 = (__int128)v97;
    a4[1] = v108;
    a4[2] = v119;
    a4[3] = v130;
    if (a3->n128_f64[0] < a2->n128_f64[0])
    {
      v186 = a2[8];
      v197 = a2[9];
      v208 = a2[10];
      v142 = a2[4];
      v153 = a2[5];
      v164 = a2[6];
      v175 = a2[7];
      v98 = *a2;
      v109 = a2[1];
      v120 = a2[2];
      v131 = a2[3];
      v50 = *a3;
      v51 = a3[2];
      a2[1] = a3[1];
      a2[2] = v51;
      *a2 = v50;
      v52 = a3[3];
      v53 = a3[4];
      v54 = a3[6];
      a2[5] = a3[5];
      a2[6] = v54;
      a2[3] = v52;
      a2[4] = v53;
      result = a3[7];
      v55 = a3[8];
      v56 = a3[10];
      a2[9] = a3[9];
      a2[10] = v56;
      a2[7] = result;
      a2[8] = v55;
      a3[8] = v186;
      a3[9] = v197;
      a3[10] = v208;
      a3[4] = v142;
      a3[5] = v153;
      a3[6] = v164;
      a3[7] = v175;
      *a3 = v98;
      a3[1] = v109;
      a3[2] = v120;
      a3[3] = v131;
      if (a2->n128_f64[0] < a1->n128_f64[0])
      {
        v187 = a1[8];
        v198 = a1[9];
        v209 = a1[10];
        v143 = a1[4];
        v154 = a1[5];
        v165 = a1[6];
        v176 = a1[7];
        v99 = *a1;
        v110 = a1[1];
        v121 = a1[2];
        v132 = a1[3];
        v57 = *a2;
        v58 = a2[2];
        a1[1] = a2[1];
        a1[2] = v58;
        *a1 = v57;
        v59 = a2[3];
        v60 = a2[4];
        v61 = a2[6];
        a1[5] = a2[5];
        a1[6] = v61;
        a1[3] = v59;
        a1[4] = v60;
        result = a2[7];
        v62 = a2[8];
        v63 = a2[10];
        a1[9] = a2[9];
        a1[10] = v63;
        a1[7] = result;
        a1[8] = v62;
        a2[8] = v187;
        a2[9] = v198;
        a2[10] = v209;
        a2[4] = v143;
        a2[5] = v154;
        a2[6] = v165;
        a2[7] = v176;
        *a2 = v99;
        a2[1] = v110;
        a2[2] = v121;
        a2[3] = v132;
      }
    }
  }
  result.n128_u64[0] = *(_QWORD *)a5;
  if (*(double *)a5 < *(double *)a4)
  {
    v188 = a4[8];
    v199 = a4[9];
    v210 = a4[10];
    v144 = a4[4];
    v155 = a4[5];
    v166 = a4[6];
    v177 = a4[7];
    v100 = *a4;
    v111 = a4[1];
    v122 = a4[2];
    v133 = a4[3];
    v64 = *a5;
    v65 = a5[2];
    a4[1] = a5[1];
    a4[2] = v65;
    *a4 = v64;
    v66 = a5[3];
    v67 = a5[4];
    v68 = a5[6];
    a4[5] = a5[5];
    a4[6] = v68;
    a4[3] = v66;
    a4[4] = v67;
    result = (__n128)a5[7];
    v69 = a5[8];
    v70 = a5[10];
    a4[9] = a5[9];
    a4[10] = v70;
    a4[7] = (__int128)result;
    a4[8] = v69;
    a5[8] = v188;
    a5[9] = v199;
    a5[10] = v210;
    a5[4] = v144;
    a5[5] = v155;
    a5[6] = v166;
    a5[7] = v177;
    *a5 = v100;
    a5[1] = v111;
    a5[2] = v122;
    a5[3] = v133;
    result.n128_u64[0] = *(_QWORD *)a4;
    if (*(double *)a4 < a3->n128_f64[0])
    {
      v189 = (__int128)a3[8];
      v200 = (__int128)a3[9];
      v211 = (__int128)a3[10];
      v145 = (__int128)a3[4];
      v156 = (__int128)a3[5];
      v167 = (__int128)a3[6];
      v178 = (__int128)a3[7];
      v101 = *a3;
      v112 = (__int128)a3[1];
      v123 = (__int128)a3[2];
      v134 = (__int128)a3[3];
      v71 = *a4;
      v72 = a4[2];
      a3[1] = (__n128)a4[1];
      a3[2] = (__n128)v72;
      *a3 = (__n128)v71;
      v73 = a4[3];
      v74 = a4[4];
      v75 = a4[6];
      a3[5] = (__n128)a4[5];
      a3[6] = (__n128)v75;
      a3[3] = (__n128)v73;
      a3[4] = (__n128)v74;
      result = (__n128)a4[7];
      v76 = a4[8];
      v77 = a4[10];
      a3[9] = (__n128)a4[9];
      a3[10] = (__n128)v77;
      a3[7] = result;
      a3[8] = (__n128)v76;
      a4[8] = v189;
      a4[9] = v200;
      a4[10] = v211;
      a4[4] = v145;
      a4[5] = v156;
      a4[6] = v167;
      a4[7] = v178;
      *a4 = (__int128)v101;
      a4[1] = v112;
      a4[2] = v123;
      a4[3] = v134;
      result.n128_u64[0] = a3->n128_u64[0];
      if (a3->n128_f64[0] < a2->n128_f64[0])
      {
        v190 = a2[8];
        v201 = a2[9];
        v212 = a2[10];
        v146 = a2[4];
        v157 = a2[5];
        v168 = a2[6];
        v179 = a2[7];
        v102 = *a2;
        v113 = a2[1];
        v124 = a2[2];
        v135 = a2[3];
        v78 = *a3;
        v79 = a3[2];
        a2[1] = a3[1];
        a2[2] = v79;
        *a2 = v78;
        v80 = a3[3];
        v81 = a3[4];
        v82 = a3[6];
        a2[5] = a3[5];
        a2[6] = v82;
        a2[3] = v80;
        a2[4] = v81;
        result = a3[7];
        v83 = a3[8];
        v84 = a3[10];
        a2[9] = a3[9];
        a2[10] = v84;
        a2[7] = result;
        a2[8] = v83;
        a3[8] = v190;
        a3[9] = v201;
        a3[10] = v212;
        a3[4] = v146;
        a3[5] = v157;
        a3[6] = v168;
        a3[7] = v179;
        *a3 = v102;
        a3[1] = v113;
        a3[2] = v124;
        a3[3] = v135;
        result.n128_u64[0] = a2->n128_u64[0];
        if (a2->n128_f64[0] < a1->n128_f64[0])
        {
          v191 = a1[8];
          v202 = a1[9];
          v213 = a1[10];
          v147 = a1[4];
          v158 = a1[5];
          v169 = a1[6];
          v180 = a1[7];
          v103 = *a1;
          v114 = a1[1];
          v125 = a1[2];
          v136 = a1[3];
          v85 = *a2;
          v86 = a2[2];
          a1[1] = a2[1];
          a1[2] = v86;
          *a1 = v85;
          v87 = a2[3];
          v88 = a2[4];
          v89 = a2[6];
          a1[5] = a2[5];
          a1[6] = v89;
          a1[3] = v87;
          a1[4] = v88;
          v90 = a2[7];
          v91 = a2[8];
          v92 = a2[10];
          a1[9] = a2[9];
          a1[10] = v92;
          a1[7] = v90;
          a1[8] = v91;
          a2[8] = v191;
          a2[9] = v202;
          a2[10] = v213;
          a2[4] = v147;
          a2[5] = v158;
          a2[6] = v169;
          a2[7] = v180;
          *a2 = v103;
          a2[1] = v114;
          result = v136;
          a2[2] = v125;
          a2[3] = v136;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20EB7A814(char *__s, double *a2, const char **a3, _BYTE *a4, const char **a5)
{
  const char *v9;
  uint64_t result;
  char v11;
  _DWORD v12[6];
  int v13;
  const char *v14;
  _QWORD **v15;
  const char **v16;
  _DWORD *v17;
  const char **v18;
  const char **v19;
  _QWORD *v20;

  v13 = 0;
  sub_20E9EBBAC(v12, __s);
  sub_20E87876C((uint64_t)&v11, (uint64_t)v12, a2);
  v15 = (_QWORD **)v12;
  v16 = a3;
  v17 = v12;
  v18 = a3;
  v19 = a3;
  if (v13 == -1)
    sub_20E877AB8();
  v20 = &v15;
  ((void (*)(_QWORD **, _DWORD *))off_24C9C5058[v13])(&v20, v12);
  v9 = "true";
  if (!*a4)
    v9 = "false";
  v14 = v9;
  v15 = (_QWORD **)v12;
  v16 = &v14;
  v17 = v12;
  v18 = &v14;
  v19 = &v14;
  if (v13 == -1)
    sub_20E877AB8();
  v20 = &v15;
  ((void (*)(_QWORD **, _DWORD *))off_24C9C5070[v13])(&v20, v12);
  v15 = (_QWORD **)v12;
  v16 = a5;
  v17 = v12;
  v18 = a5;
  v19 = a5;
  if (v13 == -1)
    sub_20E877AB8();
  v20 = &v15;
  ((void (*)(_QWORD **, _DWORD *))off_24C9C5088[v13])(&v20, v12);
  if (v13 == -1)
    sub_20E877AB8();
  v15 = &v20;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C9C50A0[v13])(&v15, v12);
  if (v13 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C9C5040[v13])(&v15, v12);
  return result;
}

void sub_20EB7A9C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EB7A9D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EB7A9EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EB7AA00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EB7AA14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EB7AA28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20EB7AA3C(char *__s, double *a2, const char **a3, _BYTE *a4, const char **a5)
{
  const char *v9;
  uint64_t result;
  char v11;
  _DWORD v12[6];
  int v13;
  const char *v14;
  _QWORD **v15;
  const char **v16;
  _DWORD *v17;
  const char **v18;
  const char **v19;
  _QWORD *v20;

  v13 = 0;
  sub_20EB7AC64(v12, __s);
  sub_20E87876C((uint64_t)&v11, (uint64_t)v12, a2);
  v15 = (_QWORD **)v12;
  v16 = a3;
  v17 = v12;
  v18 = a3;
  v19 = a3;
  if (v13 == -1)
    sub_20E877AB8();
  v20 = &v15;
  ((void (*)(_QWORD **, _DWORD *))off_24C9C5058[v13])(&v20, v12);
  v9 = "true";
  if (!*a4)
    v9 = "false";
  v14 = v9;
  v15 = (_QWORD **)v12;
  v16 = &v14;
  v17 = v12;
  v18 = &v14;
  v19 = &v14;
  if (v13 == -1)
    sub_20E877AB8();
  v20 = &v15;
  ((void (*)(_QWORD **, _DWORD *))off_24C9C5070[v13])(&v20, v12);
  v15 = (_QWORD **)v12;
  v16 = a5;
  v17 = v12;
  v18 = a5;
  v19 = a5;
  if (v13 == -1)
    sub_20E877AB8();
  v20 = &v15;
  ((void (*)(_QWORD **, _DWORD *))off_24C9C5088[v13])(&v20, v12);
  if (v13 == -1)
    sub_20E877AB8();
  v15 = &v20;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C9C50A0[v13])(&v15, v12);
  if (v13 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C9C5040[v13])(&v15, v12);
  return result;
}

void sub_20EB7ABEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EB7AC00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EB7AC14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EB7AC28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EB7AC3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EB7AC50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_20EB7AC64(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C9C5040[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

uint64_t sub_20EB7AD54(_OWORD *a1, float64x2_t *a2, uint64_t a3, float64x2_t *a4, double *a5, float64x2_t *a6, float64x2_t *a7, uint64_t a8, float64x2_t a9, double a10, float64x2_t a11, double a12, float64x2_t a13, double *a14)
{
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v20;
  int8x16_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v28;
  double v35;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v55;
  float64x2_t v57;
  float64x2_t v59;
  float64x2_t v60;
  double v62;
  float64x2_t v63;
  double v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  unint64_t v73;
  float64x2_t v74;
  float64_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  double v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  double v83;
  float64x2_t v84;
  float64_t v85;
  float64x2_t v86;
  float64_t v87;
  unint64_t v90;
  double v91;
  unint64_t v93;
  double v94;
  float64x2_t v95;
  double v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  uint64_t v101;
  float64x2_t v104;
  float64x2_t v105;
  int8x16_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v113;
  float64x2_t v114;
  double v116;
  float64_t v117;
  float64_t v118;
  float64_t v121;
  float64_t v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  uint64_t v128;
  double v129;
  double v130;
  double v131;
  uint64_t v132;
  double *v133;
  float64x2_t v134;
  float64_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64_t v140;
  double v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  double v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  double v151;
  float64x2_t v152;
  float64x2_t v153;
  int8x16_t v154;
  float64x2_t v155;
  float64x2_t v156;
  uint64_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  uint64_t v162;
  float64x2_t v163;
  uint64_t *v165;
  float64x2_t *v166;
  float64x2_t v167;
  float64x2_t v168;
  int8x16_t v169;
  uint64_t v170;
  float64_t v171;
  double v172;
  float64x2_t v175;
  double v176;
  double v177;
  float64x2_t v178;
  int64x2_t v179;
  float64_t v180;
  double v181;
  float64x2_t v182;
  float64_t v183;
  float64_t v184;
  float64x2_t v185;
  float64x2_t v186;
  int64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  int64x2_t v190;
  float64x2_t v192;
  float64x2_t v193;
  int8x16_t v195;
  uint64_t v196;
  char v197;
  uint64_t v198;
  double *v199;
  double v200;
  double v201;
  double v202;
  double v203;
  double v204;
  double v205;
  double v206;
  double v207;
  double v208;
  double v209;
  double v210;
  double v211;
  double v212;
  BOOL v213;
  _OWORD *v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  float64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v227;
  float64x2_t v228;
  float64_t v229;
  float64_t v230;
  double v231;
  double v232;
  float64x2_t v233;
  _OWORD *v234;
  float64_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  float64x2_t v241;
  float64_t v242;
  float64x2_t v243;
  float64x2_t v244;
  uint64_t v245;
  float64x2_t v246;
  float64x2_t v247;
  float64x2_t v248;
  float64x2_t v249;
  float64x2_t v250;
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v254;
  unint64_t v255;
  double v256;
  uint64_t v257;
  float64x2_t v258;
  unint64_t v259;
  float64x2_t v260;
  float64x2_t v262;
  unint64_t v263;
  float64x2_t v264;
  float64x2_t v266;
  float64x2_t v267;
  float64x2_t v269;
  float64x2_t v271;
  float64x2_t v272;
  float64_t v274;
  float64x2_t v275;
  unsigned int v277;
  float64x2_t v278;
  float64x2_t v279;
  float64x2_t v281;
  float64x2_t v283;
  float64x2_t v284;
  float64x2_t v285;
  float64x2_t v286;
  unint64_t v287;
  float64x2_t v288;
  float64x2_t v290;
  float64x2_t v291;
  float64x2_t v293;
  float64x2_t v295;
  float64x2_t v296;
  float64x2_t v297;
  unint64_t v298;
  float64x2_t v299;
  float64x2_t v301;
  float64x2_t v302;
  float64x2_t v303;
  float64x2_t v305;
  float64x2_t v306;
  float64x2_t v307;
  float64x2_t v308;
  float64x2_t v309;
  float64x2_t v311;
  float64x2_t v313;
  float64x2_t v314;
  char *v315;
  uint64_t v316;
  float64x2_t v317;
  int8x16_t v318;
  float64x2_t v319;
  double v320;
  float64x2_t v321;
  float64x2_t v322;
  float64x2_t v323;
  float64x2_t v324;
  int8x16_t v325;
  float64x2_t v326;
  uint64_t v327;
  int8x16_t v328;
  double v329;
  float64x2_t v330;
  float64x2_t v331;
  float64x2_t v335;
  float64x2_t v336;
  int8x16_t v340;
  double v343;
  float64x2_t v344;
  int8x16_t v348;
  float64x2_t v349;
  double v350;
  float64x2_t v351;
  float64x2_t v352;
  float64x2_t v353;
  float64x2_t v354;
  float64x2_t v355;
  float64x2_t v357;
  float64x2_t v361;
  float64x2_t v362;
  double v363;
  double v364;
  float64x2_t v365;
  float64x2_t *v367;
  double v370;
  double v372;
  float64x2_t v374;
  float64x2_t v375;
  float64x2_t v376;
  float64x2_t v377;
  float64x2_t v378;
  float64x2_t v379;
  float64x2_t v380;
  float64x2_t v381;
  float64x2_t v382;
  float64x2_t v383;
  float64x2_t v384;
  float64_t v385;
  uint64_t v386;
  float64x2_t v387;
  float64x2_t v388;
  double v389;
  double v390;
  double v391;
  double v392;
  double v393;
  float64x2_t v394;
  double v395;
  float64x2_t v396;
  uint64_t v397;
  double v398;
  int8x16_t v399;
  double v400;
  uint64_t v401;
  float64x2_t v402;
  float64x2_t v403;
  int8x16_t v404;
  float64x2_t v405;
  int8x16_t v406;
  double v407;
  float64x2_t v408;
  float64x2_t v409;
  float64_t v410;
  uint64_t v411;
  double v412;
  float64x2_t v413;
  float64x2_t v414;
  float64x2_t v415;
  float64x2_t v416;
  float64x2_t v417;
  float64x2_t v418;
  double v419;
  _OWORD v420[3];
  uint64_t v421;
  uint64_t v422;
  float64x2_t v423;
  uint64_t v424;
  float64x2_t v425;
  uint64_t v426;
  float64x2_t v427;
  uint64_t v428;
  float64x2_t v429;
  float64_t v430;
  double v431;
  float64x2_t v432;
  float64_t v433;
  double v434;
  float64x2_t v435;
  float64_t v436;
  double v437;
  float64x2_t v438;
  float64_t v439;
  double v440;
  uint64_t v441;

  v441 = *MEMORY[0x24BDAC8D0];
  a9.f64[0] = a6[1].f64[0];
  v16 = *a6;
  a11.f64[0] = a7[1].f64[0];
  v17 = *a7;
  v18 = vsubq_f64(a9, a11);
  _Q17 = vsubq_f64(*a6, *a7);
  a13.f64[0] = *(float64_t *)(a8 + 16);
  v20 = *(float64x2_t *)a8;
  v21 = (int8x16_t)vsubq_f64(a9, a13);
  v22 = vsubq_f64(*a6, *(float64x2_t *)a8);
  v23 = (float64x2_t)vextq_s8((int8x16_t)v22, v21, 8uLL);
  v24.f64[0] = v18.f64[0];
  v24.f64[1] = _Q17.f64[0];
  *(_QWORD *)&v25.f64[0] = v21.i64[0];
  v25.f64[1] = v22.f64[0];
  v26 = (float64x2_t)vextq_s8((int8x16_t)_Q17, (int8x16_t)v18, 8uLL);
  _Q23 = vmlsq_f64(vmulq_f64(v24, v23), v26, v25);
  v28 = vmlsq_laneq_f64(vmulq_laneq_f64(v22, _Q17, 1), _Q17, v22, 1);
  _D16 = _Q23.f64[1];
  __asm { FMLA            D6, D16, V23.D[1] }
  v35 = sqrt(vmlad_n_f64(_D6, v28.f64[0], v28.f64[0]));
  if (v35 < 0.00000001)
    return 0;
  v383 = _Q23;
  v387 = v28;
  v415 = a13;
  _Q11 = *a2;
  _Q8 = *(float64x2_t *)a3;
  _Q9 = *(int8x16_t *)a4;
  _D18 = _Q11.f64[1];
  __asm { FMLA            D16, D18, V11.D[1] }
  v15.f64[0] = 1.0 / sqrt(_D16 + 1.0);
  v46 = vmulq_n_f64(*a2, v15.f64[0]);
  v47 = (float64x2_t)vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL);
  _D23 = *(_QWORD *)(a3 + 8);
  __asm { FMLA            D16, D23, V8.D[1] }
  v50.f64[0] = 1.0 / sqrt(_D16 + 1.0);
  v51 = vmulq_n_f64(*(float64x2_t *)a3, v50.f64[0]);
  v52 = (float64x2_t)vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL);
  _D24 = _Q9.i64[1];
  __asm { FMLA            D23, D24, V9.D[1] }
  v14.f64[0] = 1.0 / sqrt(_D23 + 1.0);
  v55 = vmulq_n_f64(*a4, v14.f64[0]);
  _Q14 = (float64x2_t)vextq_s8((int8x16_t)v55, (int8x16_t)v55, 8uLL);
  v57.f64[0] = v47.f64[0];
  v57.f64[1] = v15.f64[0];
  _Q25.f64[0] = v15.f64[0];
  _Q25.f64[1] = v46.f64[0];
  v59.f64[0] = v52.f64[0];
  v59.f64[1] = v50.f64[0];
  v60.f64[0] = v50.f64[0];
  v60.f64[1] = v51.f64[0];
  _Q4 = vmlsq_f64(vmulq_f64(v57, v60), _Q25, v59);
  *(_QWORD *)&v62 = vextq_s8((int8x16_t)_Q4, (int8x16_t)_Q4, 8uLL).u64[0];
  v63 = vmlsq_f64(vmulq_f64(v46, v52), v47, v51);
  __asm { FMLA            D25, D14, V4.D[1] }
  v64 = vmlad_n_f64(_Q25.f64[0], v14.f64[0], v63.f64[0]);
  v375 = v46;
  v376 = v15;
  v374 = v47;
  v385 = v55.f64[0];
  if (fabs(v64) < 0.00000001)
  {
    v65.f64[0] = _Q14.f64[0];
    v65.f64[1] = v14.f64[0];
    v66.f64[0] = v14.f64[0];
    v66.f64[1] = v55.f64[0];
    v67.f64[0] = v47.f64[0];
    v67.f64[1] = v15.f64[0];
    v68.f64[0] = v15.f64[0];
    v68.f64[1] = v46.f64[0];
    v69 = vsubq_f64(vmulq_f64(v67, v66), vmulq_f64(v68, v65));
    v65.f64[0] = _Q4.f64[0];
    v65.f64[1] = v62;
    v70 = vsubq_f64(vmulq_f64(v46, _Q14), vmulq_f64(v47, v55));
    v71 = vmulq_f64(v65, v65);
    v71.f64[0] = sqrt(vmulq_f64(v63, v63).f64[0] + vaddvq_f64(v71));
    v72 = vmulq_f64(v69, v69);
    v72.f64[0] = sqrt(vmulq_f64(v70, v70).f64[0] + vaddvq_f64(v72));
    if (v71.f64[0] == 0.0 && v72.f64[0] == 0.0)
      return 0;
    v403 = v70;
    v406 = (int8x16_t)v69;
    v391 = _Q14.f64[0];
    v409 = v72;
    v412 = v62;
    v73 = vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL).u64[0];
    v74.f64[0] = a6->f64[0];
    *(_QWORD *)&v74.f64[1] = v73;
    *(_QWORD *)&v75 = vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u64[0];
    v76.f64[0] = a7->f64[0];
    v76.f64[1] = v75;
    v77 = vsubq_f64(v76, v74);
    v78 = vsubq_f64(a11, a9);
    v79 = v14.f64[0];
    v80 = vmlsq_laneq_f64(vmulq_f64(v77, (float64x2_t)vdupq_laneq_s64((int64x2_t)v22, 1)), v22, v77, 1);
    v81 = (float64x2_t)vextq_s8((int8x16_t)v77, (int8x16_t)v78, 8uLL);
    v78.f64[1] = v77.f64[0];
    *(_QWORD *)&v25.f64[1] = vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL).u64[0];
    *(_QWORD *)&v23.f64[1] = vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL).u64[0];
    v82 = vmulq_f64(v81, v25);
    *(_QWORD *)&v83 = vextq_s8((int8x16_t)_Q8, (int8x16_t)_Q8, 8uLL).u64[0];
    _Q7 = vmlsq_f64(v82, v78, v23);
    v84 = (float64x2_t)vextq_s8(_Q9, _Q9, 8uLL);
    *(_QWORD *)&v85 = vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL).u64[0];
    v86 = (float64x2_t)vdupq_laneq_s64((int64x2_t)_Q17, 1);
    v87 = _Q11.f64[0] * v376.f64[0] * v51.f64[0]
        + *(double *)vextq_s8((int8x16_t)_Q11, (int8x16_t)_Q11, 8uLL).i64 * v376.f64[0] * v52.f64[0];
    _Q29 = vmulq_f64(_Q7, _Q7);
    _D31 = _Q7.f64[1];
    __asm { FMLA            D29, D31, V7.D[1] }
    _Q29.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q29.f64[0], v80.f64[0], v80.f64[0]));
    v90 = vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).u64[0];
    *(_QWORD *)&v51.f64[0] = *(_OWORD *)&vmulq_f64(v80, _Q29);
    v91 = v79;
    _Q29 = vmulq_n_f64(_Q7, _Q29.f64[0]);
    v93 = vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL).u64[0];
    v94 = *(double *)_Q9.i64 * v79 * v375.f64[0] + v84.f64[0] * v79 * v374.f64[0];
    v95 = (float64x2_t)vextq_s8((int8x16_t)_Q29, (int8x16_t)_Q29, 8uLL);
    _Q7.f64[0] = v87 + v376.f64[0] * v50.f64[0];
    v97 = _Q8.f64[0] * v50.f64[0];
    v98 = v71;
    if (v71.f64[0] == 0.0)
    {
      v99.f64[0] = v95.f64[0];
      v99.f64[1] = v51.f64[0];
      v100.f64[0] = v51.f64[0];
      v100.f64[1] = _Q29.f64[0];
      *(_QWORD *)&v26.f64[1] = v93;
      *(_QWORD *)&v24.f64[1] = v90;
      *(_QWORD *)&v430 = *(_OWORD *)&vmlsq_f64(vmulq_f64(_Q17, v95), v86, _Q29);
      v429 = vmlsq_f64(vmulq_f64(v26, v100), v24, v99);
      v431 = 0.0;
      v101 = 1;
    }
    else
    {
      v84.f64[0] = v71.f64[0] + v71.f64[0];
      v219.f64[0] = v95.f64[0];
      v219.f64[1] = v51.f64[0];
      v220.f64[0] = v51.f64[0];
      v220.f64[1] = _Q29.f64[0];
      *(_QWORD *)&v26.f64[1] = v93;
      v221 = vmulq_f64(v26, v220);
      v91 = v79;
      *(_QWORD *)&v24.f64[1] = v90;
      v222 = vdivq_f64(vmulq_n_f64(vsubq_f64(v221, vmulq_f64(v24, v219)), _Q7.f64[0]), (float64x2_t)vdupq_lane_s64(COERCE__INT64(v71.f64[0] + v71.f64[0]), 0));
      v223.f64[0] = a7->f64[0];
      v223.f64[1] = v75;
      v221.f64[0] = a6->f64[0];
      *(_QWORD *)&v221.f64[1] = v73;
      v224 = vdivq_f64(vmulq_f64(_Q7, vsubq_f64(vmulq_f64(_Q17, v95), vmulq_f64(v86, _Q29))), v84);
      v225 = vaddq_f64(v221, v223);
      __asm { FMOV            V30.2D, #0.5 }
      v227 = vmulq_f64(v225, _Q30);
      v228 = vmulq_f64(vaddq_f64(a9, a11), _Q30);
      v26 = vaddq_f64(v227, v222);
      *(_QWORD *)&v430 = *(_OWORD *)&vaddq_f64(v228, v224);
      v429 = v26;
      v431 = 1.0;
      *(_QWORD *)&v433 = *(_OWORD *)&vsubq_f64(v228, v224);
      v432 = vsubq_f64(v227, v222);
      v434 = 1.0;
      v101 = 2;
    }
    v229 = *(double *)&v73;
    v230 = v75;
    v231 = v83 * v50.f64[0];
    v232 = v97 * v55.f64[0];
    v233.f64[1] = v375.f64[1];
    v71.f64[0] = v94 + v91 * v376.f64[0];
    v234 = (_OWORD *)&v429.f64[4 * v101];
    v235 = v16.f64[0];
    *(_QWORD *)&v239.f64[1] = v73;
    v236.f64[0] = v20.f64[0];
    v236.f64[1] = v85;
    v237 = vsubq_f64(v236, v239);
    v238 = (float64x2_t)vextq_s8((int8x16_t)v237, (int8x16_t)v237, 8uLL);
    *(_QWORD *)&v239.f64[0] = *(_OWORD *)&vsubq_f64(v415, a9);
    v241 = (float64x2_t)v406;
    v240 = v409;
    v419 = v71.f64[0];
    if (v409.f64[0] == 0.0)
    {
      v242 = v85;
      v243.f64[0] = v238.f64[0];
      v243.f64[1] = v239.f64[0];
      v239.f64[1] = v237.f64[0];
      v244.f64[0] = v95.f64[0];
      v244.f64[1] = v51.f64[0];
      v51.f64[1] = _Q29.f64[0];
      *((_QWORD *)v234 + 2) = *(_OWORD *)&vmlsq_f64(vmulq_f64(v237, v95), v238, _Q29);
      *v234 = vmlsq_f64(vmulq_f64(v243, v51), v239, v244);
      *((_QWORD *)v234 + 3) = 0;
      v245 = 1;
    }
    else
    {
      v246.f64[0] = v238.f64[0];
      v246.f64[1] = v239.f64[0];
      v239.f64[1] = v237.f64[0];
      v247.f64[0] = v95.f64[0];
      v247.f64[1] = v51.f64[0];
      v51.f64[1] = _Q29.f64[0];
      _Q11.f64[0] = v409.f64[0] + v409.f64[0];
      v248 = vsubq_f64(vmulq_f64(v246, v51), vmulq_f64(v239, v247));
      v249 = vmulq_f64(v71, vsubq_f64(vmulq_f64(v237, v95), vmulq_f64(v238, _Q29)));
      v250 = vdivq_f64(vmulq_n_f64(v248, v71.f64[0]), (float64x2_t)vdupq_lane_s64(COERCE__INT64(v409.f64[0] + v409.f64[0]), 0));
      v247.f64[0] = v20.f64[0];
      v247.f64[1] = v85;
      v251.f64[0] = v16.f64[0];
      v251.f64[1] = v229;
      v252 = vdivq_f64(v249, _Q11);
      v242 = v85;
      __asm { FMOV            V31.2D, #0.5 }
      v254 = vmulq_f64(vaddq_f64(v251, v247), _Q31);
      _Q29 = vmulq_f64(vaddq_f64(a9, v415), _Q31);
      *((_QWORD *)v234 + 2) = *(_OWORD *)&vaddq_f64(_Q29, v252);
      *v234 = vaddq_f64(v254, v250);
      *((_QWORD *)v234 + 3) = 0x3FF0000000000000;
      *((_QWORD *)v234 + 6) = *(_OWORD *)&vsubq_f64(_Q29, v252);
      v234[2] = vsubq_f64(v254, v250);
      *((_QWORD *)v234 + 7) = 0x3FF0000000000000;
      v245 = 2;
    }
    v255 = *(_QWORD *)&v412;
    v256 = v232 + v231 * v391;
    v257 = v245 + v101;
    if (v98.f64[0] == 0.0)
    {
      v255 = vextq_s8(v406, v406, 8uLL).u64[0];
      if (v431 == 0.0)
      {
        v26.f64[0] = v433;
        v258 = v432;
        v259 = vextq_s8((int8x16_t)v258, (int8x16_t)v258, 8uLL).u64[0];
        v63.f64[0] = v430;
        v260 = v429;
        *(_QWORD *)&_D8 = vextq_s8((int8x16_t)v260, (int8x16_t)v260, 8uLL).u64[0];
      }
      else
      {
        v26.f64[0] = v430;
        v258 = v429;
        v259 = vextq_s8((int8x16_t)v258, (int8x16_t)v258, 8uLL).u64[0];
        v63.f64[0] = v433;
        v260 = v432;
        *(_QWORD *)&_D8 = vextq_s8((int8x16_t)v260, (int8x16_t)v260, 8uLL).u64[0];
        if (v434 != 0.0)
        {
          v266.f64[0] = v429.f64[0];
          *(_QWORD *)&v266.f64[1] = v259;
          v260.f64[1] = _D8;
          v260 = vsubq_f64(v260, v266);
          *(_QWORD *)&_D8 = vextq_s8((int8x16_t)v260, (int8x16_t)v260, 8uLL).u64[0];
          v63 = vsubq_f64(v63, v26);
        }
      }
      *(_QWORD *)&v258.f64[1] = v259;
      v267.f64[0] = v16.f64[0];
      v267.f64[1] = v229;
      _Q21 = vsubq_f64(v267, v258);
      v269 = vsubq_f64(a9, v26);
      v260.f64[1] = _D8;
      _Q30 = vmulq_f64(_Q21, v260);
      __asm { FMLA            D30, D8, V21.D[1] }
      _Q30.f64[0] = vmlad_n_f64(_Q30.f64[0], v63.f64[0], v269.f64[0])
                  / (vmulq_f64(v260, v260).f64[0] + _D8 * _D8 + v63.f64[0] * v63.f64[0]);
      v271 = vmlaq_f64(vnegq_f64(v269), v63, _Q30);
      v272 = vmlaq_n_f64(vnegq_f64(_Q21), v260, _Q30.f64[0]);
      v423 = vaddq_f64(v267, vaddq_f64(v272, v272));
      v424 = *(_OWORD *)&vaddq_f64(a9, vaddq_f64(v271, v271));
      if (v431 == 0.0)
      {
        _Q29.f64[0] = v436;
        _Q31 = v435;
        *(_QWORD *)&v274 = vextq_s8((int8x16_t)_Q31, (int8x16_t)_Q31, 8uLL).u64[0];
        _Q30.f64[0] = v430;
        v275 = v429;
        *(_QWORD *)&_D10 = vextq_s8((int8x16_t)v275, (int8x16_t)v275, 8uLL).u64[0];
        v277 = 1;
      }
      else
      {
        _Q29.f64[0] = v430;
        _Q31 = v429;
        *(_QWORD *)&v274 = vextq_s8((int8x16_t)_Q31, (int8x16_t)_Q31, 8uLL).u64[0];
        _Q30.f64[0] = v436;
        v275 = v435;
        *(_QWORD *)&_D10 = vextq_s8((int8x16_t)v275, (int8x16_t)v275, 8uLL).u64[0];
        if (v437 != 0.0)
        {
          v301.f64[0] = v429.f64[0];
          v301.f64[1] = v274;
          v275.f64[1] = _D10;
          v275 = vsubq_f64(v275, v301);
          *(_QWORD *)&_D10 = vextq_s8((int8x16_t)v275, (int8x16_t)v275, 8uLL).u64[0];
          _Q30 = vsubq_f64(_Q30, _Q29);
        }
        v277 = 1;
      }
    }
    else
    {
      if (v431 == 0.0)
      {
        v26.f64[0] = v436;
        v262 = v435;
        v263 = vextq_s8((int8x16_t)v262, (int8x16_t)v262, 8uLL).u64[0];
        v241.f64[0] = v430;
        v264 = v429;
        *(_QWORD *)&_D8 = vextq_s8((int8x16_t)v264, (int8x16_t)v264, 8uLL).u64[0];
      }
      else
      {
        v26.f64[0] = v430;
        v262 = v429;
        v263 = vextq_s8((int8x16_t)v262, (int8x16_t)v262, 8uLL).u64[0];
        v241.f64[0] = v436;
        v264 = v435;
        *(_QWORD *)&_D8 = vextq_s8((int8x16_t)v264, (int8x16_t)v264, 8uLL).u64[0];
        if (v437 != 0.0)
        {
          v278.f64[0] = v429.f64[0];
          *(_QWORD *)&v278.f64[1] = v263;
          v264.f64[1] = _D8;
          v264 = vsubq_f64(v264, v278);
          *(_QWORD *)&_D8 = vextq_s8((int8x16_t)v264, (int8x16_t)v264, 8uLL).u64[0];
          v241 = vsubq_f64(v241, v26);
        }
      }
      *(_QWORD *)&v262.f64[1] = v263;
      v279.f64[0] = v16.f64[0];
      v279.f64[1] = v229;
      _Q21 = vsubq_f64(v279, v262);
      v281 = vsubq_f64(a9, v26);
      v264.f64[1] = _D8;
      _Q30 = vmulq_f64(_Q21, v264);
      __asm { FMLA            D30, D8, V21.D[1] }
      v283 = vmulq_f64(v264, v264);
      _Q30.f64[0] = vmlad_n_f64(_Q30.f64[0], v241.f64[0], v281.f64[0])
                  / (v283.f64[0] + _D8 * _D8 + v241.f64[0] * v241.f64[0]);
      v284 = vmlaq_f64(vnegq_f64(v281), v241, _Q30);
      v285 = vmlaq_n_f64(vnegq_f64(_Q21), v264, _Q30.f64[0]);
      v423 = vaddq_f64(v279, vaddq_f64(v285, v285));
      v424 = *(_OWORD *)&vaddq_f64(a9, vaddq_f64(v284, v284));
      if (v434 == 0.0)
      {
        v283.f64[0] = v436;
        v286 = v435;
        v287 = vextq_s8((int8x16_t)v286, (int8x16_t)v286, 8uLL).u64[0];
        v264.f64[0] = v433;
        v288 = v432;
        *(_QWORD *)&_D9 = vextq_s8((int8x16_t)v288, (int8x16_t)v288, 8uLL).u64[0];
      }
      else
      {
        v283.f64[0] = v433;
        v286 = v432;
        v287 = vextq_s8((int8x16_t)v286, (int8x16_t)v286, 8uLL).u64[0];
        v264.f64[0] = v436;
        v288 = v435;
        *(_QWORD *)&_D9 = vextq_s8((int8x16_t)v288, (int8x16_t)v288, 8uLL).u64[0];
        if (v437 != 0.0)
        {
          v290.f64[0] = v432.f64[0];
          *(_QWORD *)&v290.f64[1] = v287;
          v288.f64[1] = _D9;
          v288 = vsubq_f64(v288, v290);
          *(_QWORD *)&_D9 = vextq_s8((int8x16_t)v288, (int8x16_t)v288, 8uLL).u64[0];
          v264 = vsubq_f64(v264, v283);
        }
      }
      *(_QWORD *)&v286.f64[1] = v287;
      v291.f64[0] = v16.f64[0];
      v291.f64[1] = v229;
      _Q21 = vsubq_f64(v291, v286);
      v293 = vsubq_f64(a9, v283);
      v288.f64[1] = _D9;
      _Q31 = vmulq_f64(_Q21, v288);
      __asm { FMLA            D31, D9, V21.D[1] }
      _Q31.f64[0] = vmlad_n_f64(_Q31.f64[0], v264.f64[0], v293.f64[0])
                  / (vmulq_f64(v288, v288).f64[0] + _D9 * _D9 + v264.f64[0] * v264.f64[0]);
      v295 = vmlaq_f64(vnegq_f64(v293), v264, _Q31);
      v296 = vmlaq_n_f64(vnegq_f64(_Q21), v288, _Q31.f64[0]);
      v425 = vaddq_f64(v291, vaddq_f64(v296, v296));
      v426 = *(_OWORD *)&vaddq_f64(a9, vaddq_f64(v295, v295));
      if (v409.f64[0] == 0.0)
      {
        v240.f64[0] = v98.f64[0];
        goto LABEL_69;
      }
      if (v431 == 0.0)
      {
        _Q29.f64[0] = v439;
        v297 = v438;
        v298 = vextq_s8((int8x16_t)v297, (int8x16_t)v297, 8uLL).u64[0];
        v240.f64[0] = v430;
        v299 = v429;
        *(_QWORD *)&_D31 = vextq_s8((int8x16_t)v299, (int8x16_t)v299, 8uLL).u64[0];
      }
      else
      {
        _Q29.f64[0] = v430;
        v297 = v429;
        v298 = vextq_s8((int8x16_t)v297, (int8x16_t)v297, 8uLL).u64[0];
        v240.f64[0] = v439;
        v299 = v438;
        *(_QWORD *)&_D31 = vextq_s8((int8x16_t)v299, (int8x16_t)v299, 8uLL).u64[0];
        if (v440 != 0.0)
        {
          v302.f64[0] = v429.f64[0];
          *(_QWORD *)&v302.f64[1] = v298;
          v299.f64[1] = _D31;
          v299 = vsubq_f64(v299, v302);
          *(_QWORD *)&_D31 = vextq_s8((int8x16_t)v299, (int8x16_t)v299, 8uLL).u64[0];
          v240 = vsubq_f64(v240, _Q29);
        }
      }
      *(_QWORD *)&v297.f64[1] = v298;
      v303.f64[0] = v16.f64[0];
      v303.f64[1] = v229;
      _Q21 = vsubq_f64(v303, v297);
      v305 = vsubq_f64(a9, _Q29);
      v299.f64[1] = _D31;
      _Q29 = vmulq_f64(_Q21, v299);
      __asm { FMLA            D29, D31, V21.D[1] }
      _Q30 = vmulq_f64(v299, v299);
      _Q29.f64[0] = vmlad_n_f64(_Q29.f64[0], v240.f64[0], v305.f64[0])
                  / (_Q30.f64[0] + _D31 * _D31 + v240.f64[0] * v240.f64[0]);
      v306 = vmlaq_f64(vnegq_f64(v305), v240, _Q29);
      v307 = vmlaq_n_f64(vnegq_f64(_Q21), v299, _Q29.f64[0]);
      v427 = vaddq_f64(v303, vaddq_f64(v307, v307));
      v428 = *(_OWORD *)&vaddq_f64(a9, vaddq_f64(v306, v306));
      if (v434 == 0.0)
      {
        _Q29.f64[0] = v439;
        _Q31 = v438;
        *(_QWORD *)&v274 = vextq_s8((int8x16_t)_Q31, (int8x16_t)_Q31, 8uLL).u64[0];
        _Q30.f64[0] = v433;
        v275 = v432;
        *(_QWORD *)&_D10 = vextq_s8((int8x16_t)v275, (int8x16_t)v275, 8uLL).u64[0];
      }
      else
      {
        _Q29.f64[0] = v433;
        _Q31 = v432;
        *(_QWORD *)&v274 = vextq_s8((int8x16_t)_Q31, (int8x16_t)_Q31, 8uLL).u64[0];
        _Q30.f64[0] = v439;
        v275 = v438;
        *(_QWORD *)&_D10 = vextq_s8((int8x16_t)v275, (int8x16_t)v275, 8uLL).u64[0];
        if (v440 != 0.0)
        {
          v308.f64[0] = v432.f64[0];
          v308.f64[1] = v274;
          v275.f64[1] = _D10;
          v275 = vsubq_f64(v275, v308);
          *(_QWORD *)&_D10 = vextq_s8((int8x16_t)v275, (int8x16_t)v275, 8uLL).u64[0];
          _Q30 = vsubq_f64(_Q30, _Q29);
        }
      }
      v277 = 3;
      v240.f64[0] = v98.f64[0];
      v241.f64[0] = _Q4.f64[0];
      v403 = v63;
    }
    _Q31.f64[1] = v274;
    v309.f64[0] = v16.f64[0];
    v309.f64[1] = v229;
    _Q21 = vsubq_f64(v309, _Q31);
    v311 = vsubq_f64(a9, _Q29);
    v275.f64[1] = _D10;
    _Q23 = vmulq_f64(_Q21, v275);
    __asm { FMLA            D23, D10, V21.D[1] }
    _Q23.f64[0] = vmlad_n_f64(_Q23.f64[0], _Q30.f64[0], v311.f64[0])
                / (vmulq_f64(v275, v275).f64[0] + _D10 * _D10 + _Q30.f64[0] * _Q30.f64[0]);
    v313 = vmlaq_f64(vnegq_f64(v311), _Q30, _Q23);
    v314 = vmlaq_n_f64(vnegq_f64(_Q21), v275, _Q23.f64[0]);
    v315 = (char *)&v423 + 24 * v277;
    *(float64x2_t *)v315 = vaddq_f64(v309, vaddq_f64(v314, v314));
    *((_QWORD *)v315 + 2) = *(_OWORD *)&vaddq_f64(a9, vaddq_f64(v313, v313));
    _Q4.f64[0] = v241.f64[0];
    v63 = v403;
LABEL_69:
    v316 = 0;
    v132 = 0;
    *(_QWORD *)&_Q4.f64[1] = v255;
    v317 = vdivq_f64(_Q4, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v240.f64[0], 0));
    v318 = (int8x16_t)vdivq_f64(v63, v240);
    *(_QWORD *)&v319.f64[0] = v318.i64[0];
    v319.f64[1] = v317.f64[0];
    v320 = v256 + v50.f64[0] * v91;
    v414 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v317, 1);
    v321.f64[0] = v374.f64[0];
    v321.f64[1] = v376.f64[0];
    v322 = vmulq_f64(v321, v319);
    v323 = vmulq_laneq_f64(v375, v317, 1);
    v324.f64[0] = v376.f64[0];
    v324.f64[1] = v375.f64[0];
    v325 = (int8x16_t)vsubq_f64(v322, vmulq_f64(v324, (float64x2_t)vextq_s8((int8x16_t)v317, v318, 8uLL)));
    v405 = (float64x2_t)vdupq_lane_s64(v325.i64[0], 0);
    v408 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v317.f64[0], 0);
    *(_QWORD *)&v400 = vextq_s8((int8x16_t)v317, (int8x16_t)v317, 8uLL).u64[0];
    v402 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v325, 1);
    v326 = (float64x2_t)vdupq_lane_s64(v318.i64[0], 0);
    v396 = v326;
    *(_QWORD *)&v398 = vextq_s8(v325, v325, 8uLL).u64[0];
    v411 = *(_OWORD *)&vsubq_f64(v323, vmulq_f64(v374, v317));
    v394 = (float64x2_t)vdupq_lane_s64(v411, 0);
    v327 = 24 * v257;
    v16.f64[1] = v229;
    v17.f64[1] = v230;
    v20.f64[1] = v242;
    v326.f64[0] = 0.0;
    v328 = (int8x16_t)vceqq_f64(v98, v326);
    v329 = v419;
    do
    {
      v330 = *(float64x2_t *)((char *)&v423 + v316);
      v323.f64[0] = *(float64_t *)((char *)&v423 + v316 + 16);
      v331 = vsubq_f64(a9, v323);
      _Q27 = vsubq_f64(v16, v330);
      _D24 = _Q27.f64[1];
      __asm { FMLA            D17, D24, V27.D[1] }
      v233.f64[0] = 1.0 / sqrt(vmlad_n_f64(_D17, v331.f64[0], v331.f64[0]));
      v335 = vmulq_n_f64(_Q27, v233.f64[0]);
      v336 = vsubq_f64(a11, v323);
      _Q24 = vsubq_f64(v17, v330);
      _Q28 = vmulq_f64(_Q24, _Q24);
      _D29 = _Q24.f64[1];
      __asm { FMLA            D28, D29, V24.D[1] }
      _Q28.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q28.f64[0], v336.f64[0], v336.f64[0]));
      v340 = (int8x16_t)vmulq_f64(v336, _Q28);
      _Q14 = vmulq_n_f64(_Q24, _Q28.f64[0]);
      _Q27.f64[0] = vmuld_lane_f64(v233.f64[0], _Q27, 1);
      __asm { FMLA            D30, D27, V14.D[1] }
      if (vabdd_f64(vmlad_n_f64(_D30, v233.f64[0] * v331.f64[0], *(double *)v340.i64), _Q7.f64[0]) < 0.00000001)
      {
        v343 = *(double *)vextq_s8((int8x16_t)_Q24, (int8x16_t)_Q24, 8uLL).i64;
        v344 = vsubq_f64(v415, v323);
        _Q30 = vsubq_f64(v20, v330);
        _D27 = _Q30.f64[1];
        __asm { FMLA            D24, D27, V30.D[1] }
        _Q31.f64[0] = 1.0 / sqrt(vmlad_n_f64(_D24, v344.f64[0], v344.f64[0]));
        v348 = (int8x16_t)vmulq_f64(v344, _Q31);
        v349 = vmulq_n_f64(_Q30, _Q31.f64[0]);
        v350 = *(double *)vextq_s8((int8x16_t)v349, (int8x16_t)v349, 8uLL).i64;
        if (vabdd_f64(vmulq_f64(_Q14, v349).f64[0]+ v343 * _Q28.f64[0] * v350+ v336.f64[0] * _Q28.f64[0] * *(double *)v348.i64, v320) < 0.00000001)
        {
          v233 = vmulq_f64(v331, v233);
          v351 = (float64x2_t)vextq_s8((int8x16_t)v335, (int8x16_t)v335, 8uLL);
          if (vabdd_f64(vmulq_f64(v349, v335).f64[0]+ *(double *)vextq_s8((int8x16_t)_Q30, (int8x16_t)_Q30, 8uLL).i64 * _Q31.f64[0] * v351.f64[0]+ v344.f64[0] * _Q31.f64[0] * v233.f64[0], v329) < 0.00000001)
          {
            *(_QWORD *)&_Q14.f64[1] = vextq_s8((int8x16_t)_Q14, (int8x16_t)_Q14, 8uLL).u64[0];
            v349.f64[1] = v350;
            v352 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_lane_s64(v328.i64[0], 0), (int8x16_t)v349, (int8x16_t)_Q14);
            v353 = (float64x2_t)vbslq_s8(v328, v348, v340);
            v354.f64[0] = v351.f64[0];
            v354.f64[1] = v233.f64[0];
            v355.f64[0] = v233.f64[0];
            v355.f64[1] = v335.f64[0];
            _Q27 = (float64x2_t)vextq_s8((int8x16_t)v352, (int8x16_t)v353, 8uLL);
            v353.f64[1] = v352.f64[0];
            v357 = vmlsq_f64(vmulq_laneq_f64(v335, v352, 1), v351, v352);
            _Q24 = vmlsq_f64(vmulq_f64(v354, v353), v355, _Q27);
            _Q17 = vmulq_f64(_Q24, _Q24);
            _Q27.f64[0] = _Q24.f64[1];
            __asm { FMLA            D17, D27, V24.D[1] }
            _Q17.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q17.f64[0], v357.f64[0], v357.f64[0]));
            _Q24 = vmulq_n_f64(_Q24, _Q17.f64[0]);
            v361 = vmulq_f64(v357, _Q17);
            v362 = (float64x2_t)vextq_s8((int8x16_t)_Q24, (int8x16_t)v361, 8uLL);
            v357.f64[0] = vmlad_n_f64(v233.f64[0] * v375.f64[0], v317.f64[0], v361.f64[0]);
            v363 = vmlad_n_f64(v233.f64[0] * v374.f64[0], v400, v361.f64[0]);
            v364 = vmlad_n_f64(vmulq_f64(v233, v376).f64[0], *(double *)v318.i64, v361.f64[0]);
            v361.f64[1] = _Q24.f64[0];
            _Q31 = (float64x2_t)vextq_s8((int8x16_t)v330, (int8x16_t)v330, 8uLL);
            v365.f64[0] = v335.f64[0];
            v365.f64[1] = v351.f64[0];
            _Q17 = vsubq_f64(vmulq_f64(v354, v361), vmulq_f64(v355, v362));
            *(_QWORD *)&v362.f64[0] = *(_OWORD *)&vsubq_f64(vmulq_laneq_f64(v335, _Q24, 1), vmulq_f64(v351, _Q24));
            v367 = (float64x2_t *)&v420[6 * v132];
            _Q10 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v365, v375.f64[0]), v408, _Q24), v405, _Q17);
            v357.f64[0] = vmlad_n_f64(v357.f64[0], *(double *)v325.i64, v362.f64[0]);
            v329 = v419;
            _Q11 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v365, v374.f64[0]), v414, _Q24), v402, _Q17);
            v370 = vmlad_n_f64(v363, v398, v362.f64[0]);
            _Q8 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v365, v376.f64[0]), v396, _Q24), v394, _Q17);
            v372 = vmlad_n_f64(v364, *(double *)&v411, v362.f64[0]);
            *v367 = _Q10;
            v367[2] = _Q11;
            v367[4] = _Q8;
            __asm
            {
              FMLA            D17, D31, V10.D[1]
              FMLA            D24, D31, V11.D[1]
              FMLA            D22, D31, V8.D[1]
            }
            v367[1].f64[0] = v357.f64[0];
            v367[1].f64[1] = -(_Q17.f64[0] + v323.f64[0] * v357.f64[0]);
            v367[3].f64[0] = v370;
            v367[3].f64[1] = -(_Q24.f64[0] + v323.f64[0] * v370);
            v367[5].f64[0] = v372;
            v367[5].f64[1] = -(_D22 + v323.f64[0] * v372);
            ++v132;
          }
        }
      }
      v316 += 24;
    }
    while (v327 != v316);
    goto LABEL_19;
  }
  _D2 = _Q17.f64[1];
  __asm { FMLA            D1, D2, V17.D[1] }
  _Q8.f64[0] = sqrt(vmlad_n_f64(_D1, v18.f64[0], v18.f64[0]));
  v59.f64[0] = v35 / _Q8.f64[0];
  *(_QWORD *)&_Q17.f64[1] = vextq_s8((int8x16_t)_Q17, (int8x16_t)_Q17, 8uLL).u64[0];
  v104 = vdivq_f64(_Q17, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&_Q8.f64[0], 0));
  _Q4.f64[1] = v62;
  v105 = vmulq_f64(_Q4, _Q4);
  v105.f64[0] = sqrt(v105.f64[0] + v62 * v62 + v63.f64[0] * v63.f64[0]);
  _Q18 = vdivq_f64(_Q4, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v105.f64[0], 0));
  v107 = (int8x16_t)vdivq_f64(v63, v105);
  *(_QWORD *)&v108.f64[0] = v107.i64[0];
  v108.f64[1] = _Q18.f64[0];
  v63.f64[0] = v64 / v105.f64[0];
  v109.f64[0] = v47.f64[0];
  v109.f64[1] = v15.f64[0];
  v110 = vmulq_f64(v109, v108);
  v108.f64[0] = v15.f64[0];
  v108.f64[1] = v46.f64[0];
  _Q25 = vmlsq_f64(v110, v108, (float64x2_t)vextq_s8((int8x16_t)_Q18, v107, 8uLL));
  _Q3.f64[0] = _Q14.f64[0];
  _Q3.f64[1] = v14.f64[0];
  v113.f64[0] = v14.f64[0];
  v113.f64[1] = v55.f64[0];
  v114.f64[0] = v52.f64[0];
  v114.f64[1] = v50.f64[0];
  v50.f64[1] = v51.f64[0];
  _Q6 = vmlsq_f64(vmulq_f64(v114, v113), v50, _Q3);
  *(_QWORD *)&v116 = *(_OWORD *)&vmlsq_f64(vmulq_f64(v51, _Q14), v52, v55);
  v416 = v104;
  v418 = vdivq_f64(v18, _Q8);
  v378 = _Q8;
  v380 = (float64x2_t)vextq_s8((int8x16_t)v104, (int8x16_t)v104, 8uLL);
  v117 = vmulq_f64(v22, v104).f64[0]
       + *(double *)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL).i64 * v380.f64[0]
       + *(double *)v21.i64 * v418.f64[0];
  v118 = -(v117 * v63.f64[0]);
  _Q4 = vmlsq_f64(vmulq_f64(v109, v113), v108, _Q3);
  _Q2 = (int8x16_t)vmulq_f64(_Q18, _Q4);
  _Q3.f64[0] = _Q4.f64[1];
  __asm { FMLA            D2, D3, V18.D[1] }
  *(double *)_Q2.i64 = v59.f64[0]
                     * vmlad_n_f64(*(double *)_Q2.i64, vmlsq_f64(vmulq_f64(v46, _Q14), v47, v55).f64[0], *(double *)v107.i64);
  v121 = v117 - _Q8.f64[0];
  _Q4.f64[0] = _Q6.f64[1];
  v397 = *(_OWORD *)&vmlsq_f64(vmulq_laneq_f64(v46, _Q18, 1), v47, _Q18);
  v399 = (int8x16_t)_Q25;
  __asm { FMLA            D3, D4, V25.D[1] }
  _Q3.f64[0] = vmlad_n_f64(_Q3.f64[0], v116, *(double *)&v397);
  v413 = v63;
  v105.f64[0] = v105.f64[0] * v63.f64[0];
  v113.f64[0] = v121 * v105.f64[0];
  v122 = -(v121 * _Q3.f64[0]);
  _Q3.f64[0] = v59.f64[0] * _Q3.f64[0];
  v105.f64[0] = v59.f64[0] * v105.f64[0];
  v401 = v107.i64[0];
  v404 = (int8x16_t)_Q18;
  __asm { FMLA            D6, D4, V18.D[1] }
  _Q6.f64[0] = vmlad_n_f64(_Q6.f64[0], v116, *(double *)v107.i64);
  v382 = v59;
  _Q18.f64[0] = v105.f64[0] * *(double *)_Q2.i64;
  v123 = *(double *)_Q2.i64 * v122 - v118 * (v59.f64[0] * _Q6.f64[0]);
  _Q6.f64[0] = v59.f64[0] * v63.f64[0] * (v59.f64[0] * _Q6.f64[0]) - *(double *)_Q2.i64 * _Q3.f64[0];
  v124 = v59.f64[0] * v63.f64[0] * v105.f64[0];
  v125 = v59.f64[0] * v63.f64[0] * v122 - v118 * _Q3.f64[0];
  v126 = -(v118 * v113.f64[0]);
  v105.f64[0] = v124 * v124 + _Q18.f64[0] * _Q18.f64[0] + _Q6.f64[0] * _Q6.f64[0];
  v407 = v123;
  v410 = _Q18.f64[0];
  v393 = -(*(double *)_Q2.i64 * v113.f64[0]);
  v395 = _Q6.f64[0];
  v127 = v393 * _Q6.f64[0] + v124 * v125 + _Q18.f64[0] * v123;
  *(double *)_Q2.i64 = v393 * v393
                     + v123 * v123
                     + v126 * (v124 + v124)
                     + v125 * v125
                     - _Q18.f64[0] * _Q18.f64[0]
                     - _Q6.f64[0] * _Q6.f64[0];
  _Q3.f64[0] = v126 * v125
             - _Q18.f64[0] * v123
             - v393 * _Q6.f64[0]
             + v126 * v125
             - _Q18.f64[0] * v123
             - v393 * _Q6.f64[0];
  v128 = sub_20EB27A00((double *)v420, (int8x16_t)v105, v127 + v127, _Q2, (int8x16_t)_Q3, v126 * v126 - v123 * v123 - v393 * v393);
  v129 = v126;
  v130 = v125;
  v131 = v124;
  v132 = 0;
  if (v128)
  {
    v133 = (double *)v420;
    v134 = v14;
    v135 = _Q14.f64[0];
    v136.f64[0] = v385;
    v138 = v416;
    v137.f64[0] = v418.f64[0];
    v140 = v410;
    _Q8 = (int8x16_t)v413;
    v141 = v407;
    do
    {
      if (fabs(*v133) < 1.0)
        v429.f64[v132++] = *v133;
      ++v133;
      --v128;
    }
    while (v128);
  }
  else
  {
    v134 = v14;
    v135 = _Q14.f64[0];
    v136.f64[0] = v385;
    v138 = v416;
    v137.f64[0] = v418.f64[0];
    v140 = v410;
    _Q8 = (int8x16_t)v413;
    v141 = v407;
  }
  v392 = v131;
  v389 = v129;
  v390 = v130;
  if (v132)
  {
    v142 = v383;
    v143.f64[0] = v378.f64[0];
    v143.f64[1] = v378.f64[0];
    *(_QWORD *)&v142.f64[1] = vextq_s8((int8x16_t)v142, (int8x16_t)v142, 8uLL).u64[0];
    v150 = vdivq_f64(vdivq_f64(v142, v143), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v382.f64[0], 0));
    v144 = (float64x2_t)vextq_s8((int8x16_t)v150, (int8x16_t)v150, 8uLL);
    *(_QWORD *)&v145 = *(_OWORD *)&vdivq_f64(vdivq_f64(v387, v378), v382);
    v146.f64[0] = v380.f64[0];
    v146.f64[1] = v137.f64[0];
    v137.f64[1] = v138.f64[0];
    v147.f64[0] = v145;
    v147.f64[1] = v150.f64[0];
    v148 = vmulq_f64(v138, v144);
    v149 = vmulq_f64(v380, v150);
    v150.f64[1] = v144.f64[0];
    v144.f64[1] = v145;
    v155 = vsubq_f64(vmulq_f64(v146, v147), vmulq_f64(v137, v144));
    *(_QWORD *)&v151 = *(_OWORD *)&vsubq_f64(v148, v149);
    v148.f64[0] = v382.f64[0] / *(double *)_Q8.i64;
    v388 = vmulq_f64(v134, v148);
    v136.f64[1] = v135;
    v167 = vmulq_n_f64(v136, v382.f64[0] / *(double *)_Q8.i64);
    v152.f64[0] = v140;
    v152.f64[1] = v395;
    v153.f64[0] = v141;
    v153.f64[1] = v393;
    v154 = *(int8x16_t *)a8;
    v142.f64[0] = v416.f64[0];
    v142.f64[1] = v380.f64[0];
    v417 = v142;
    *(_QWORD *)&v155.f64[1] = vextq_s8((int8x16_t)v155, (int8x16_t)v155, 8uLL).u64[0];
    v384 = vmulq_f64(v142, (float64x2_t)0);
    v386 = vextq_s8(v404, v404, 8uLL).u64[0];
    v156 = v142;
    v381 = (float64x2_t)vdupq_lane_s64(v404.i64[0], 0);
    v379 = (float64x2_t)vdupq_lane_s64(v399.i64[0], 0);
    v377 = (float64x2_t)vdupq_lane_s64(v386, 0);
    v157 = vextq_s8(v399, v399, 8uLL).u64[0];
    v158 = (float64x2_t)vdupq_lane_s64(v157, 0);
    v159 = (float64x2_t)vdupq_lane_s64(v401, 0);
    v160 = (float64x2_t)vdupq_lane_s64(v397, 0);
    v161 = (float64x2_t)vdupq_laneq_s64(*(int64x2_t *)a8, 1);
    v162 = *(uint64_t *)(a8 + 16);
    v163 = (float64x2_t)vdupq_lane_s64(v162, 0);
    _D31 = vextq_s8(v154, v154, 8uLL).u64[0];
    v165 = &v422;
    v166 = &v429;
    *(_QWORD *)&v167.f64[1] = vextq_s8((int8x16_t)v167, (int8x16_t)v167, 8uLL).u64[0];
    v168.f64[0] = NAN;
    v168.f64[1] = NAN;
    v169 = (int8x16_t)vnegq_f64(v168);
    v170 = v132;
    do
    {
      v171 = v166->f64[0];
      v166 = (float64x2_t *)((char *)v166 + 8);
      v172 = v171;
      if (v172 * v172 >= 1.0)
        v47.f64[0] = 0.0;
      else
        v47.f64[0] = 1.0 - v172 * v172;
      v47.f64[0] = sqrt(v47.f64[0]);
      v47 = (float64x2_t)vbslq_s8(v169, (int8x16_t)v47, _Q8);
      _Q17 = vmlaq_n_f64(v153, v152, v172);
      v14.f64[0] = (v389 + v172 * (v390 + v392 * v172)) * v47.f64[0];
      _D9 = v393 + v395 * v172;
      __asm { FMLA            D8, D9, V17.D[1] }
      *(double *)_Q8.i64 = sqrt(*(double *)_Q8.i64);
      v175 = vdivq_f64(_Q17, (float64x2_t)vdupq_lane_s64(vbslq_s8(v169, _Q8, (int8x16_t)v14).i64[0], 0));
      v176 = vmuld_lane_f64(v47.f64[0], v175, 1);
      v177 = vmuld_lane_f64(v172, v175, 1);
      v178 = vmlaq_n_f64(vmulq_n_f64(v156, v175.f64[0]), v150, v176);
      v179.i64[1] = *(_QWORD *)&v418.f64[1];
      v180 = v418.f64[0] * v175.f64[0] + v145 * v176;
      v181 = v47.f64[0] * v175.f64[0];
      v182 = vmlaq_n_f64(v178, v155, v177);
      v183 = v180 + v151 * v177;
      v14 = vmlsq_lane_f64(vmlaq_n_f64(v384, v150, v172), v155, v47.f64[0], 0);
      v175.f64[0] = v172 * v175.f64[0];
      v184 = v418.f64[0] * 0.0 + v145 * v172 - v151 * v47.f64[0];
      v185 = vmlaq_n_f64(vmulq_n_f64(v156, -v175.f64[1]), v150, v181);
      v156 = v417;
      v186 = vmlaq_n_f64(v185, v155, v175.f64[0]);
      v175.f64[0] = v145 * v181 - v175.f64[1] * v418.f64[0] + v151 * v175.f64[0];
      v187 = (int64x2_t)vmlaq_f64(vmlaq_f64(vmulq_n_f64(v182, v375.f64[0]), v381, v14), v379, v186);
      v188 = vmlaq_f64(vmulq_n_f64(v182, v374.f64[0]), v377, v14);
      v189 = vmlaq_f64(vmulq_n_f64(v182, v376.f64[0]), v159, v14);
      v14.f64[0] = v183 * v375.f64[0] + v184 * *(double *)v404.i64 + v175.f64[0] * *(double *)v399.i64;
      v190 = (int64x2_t)vmlaq_f64(v188, v158, v186);
      _Q2 = vmlaq_f64(v189, v160, v186);
      v186.f64[0] = v183 * v374.f64[0] + v184 * *(double *)&v386 + v175.f64[0] * *(double *)&v157;
      *(double *)v179.i64 = v183 * v376.f64[0] + v184 * *(double *)&v401 + v175.f64[0] * *(double *)&v397;
      v192.f64[0] = v14.f64[0];
      v192.f64[1] = v186.f64[0];
      v193 = vmlaq_f64(vmlaq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v187, v190), *(double *)v154.i64), v161, (float64x2_t)vzip2q_s64(v187, v190)), v163, v192);
      _Q14 = vmulq_n_f64(v167, v47.f64[0]);
      v195 = (int8x16_t)vsubq_f64(_Q14, v193);
      __asm { FMLA            D14, D31, V2.D[1] }
      _Q14.f64[0] = _Q14.f64[0] + *(double *)v179.i64 * *(double *)&v162;
      *(int64x2_t *)(v165 - 7) = v187;
      *(int64x2_t *)(v165 - 3) = v190;
      *(_QWORD *)&v186.f64[1] = vextq_s8(v195, v195, 8uLL).u64[0];
      *(int64x2_t *)(v165 - 5) = vzip1q_s64((int64x2_t)v14, (int64x2_t)v195);
      _Q8 = (int8x16_t)v413;
      *(float64x2_t *)(v165 - 1) = v186;
      *(float64x2_t *)(v165 + 1) = _Q2;
      *(int64x2_t *)(v165 + 3) = vzip1q_s64(v179, (int64x2_t)vmlaq_f64(vnegq_f64(_Q14), v388, v47));
      v165 += 12;
      --v170;
    }
    while (v170);
  }
LABEL_19:
  if (v132)
  {
    v196 = 0;
    v197 = 0;
    v198 = 0;
    v199 = (double *)&v421;
    v200 = 1.79769313e308;
    do
    {
      v201 = v199[2];
      v202 = v199[3];
      v203 = v199[4];
      v204 = v199[5];
      if (v204 + a6->f64[0] * v201 + a6->f64[1] * v202 + a6[1].f64[0] * v203 > 0.0
        && v204 + v201 * a7->f64[0] + v202 * a7->f64[1] + v203 * a7[1].f64[0] > 0.0
        && v204 + v201 * *(double *)a8 + v202 * *(double *)(a8 + 8) + v203 * *(double *)(a8 + 16) > 0.0)
      {
        v205 = *a14;
        v206 = a14[1];
        v207 = a14[2];
        v208 = v204 + v201 * *a14 + v202 * v206 + v203 * v207;
        if (v208 > 0.0)
        {
          if (v208 == 0.0)
            v209 = 1.0;
          else
            v209 = 1.0 / v208;
          v210 = v209 * (*(v199 - 3) + v205 * *(v199 - 6) + v206 * *(v199 - 5) + v207 * *(v199 - 4));
          v211 = v209 * (v199[1] + v205 * *(v199 - 2) + v206 * *(v199 - 1) + v207 * *v199);
          v212 = (v210 - *a5) * (v210 - *a5) + (v211 - a5[1]) * (v211 - a5[1]);
          v213 = v212 < v200;
          if (v212 < v200)
          {
            v200 = v212;
            v198 = v196;
          }
          v197 |= v213;
        }
      }
      ++v196;
      v199 += 12;
    }
    while (v132 != v196);
    if ((v197 & 1) != 0)
    {
      v214 = &v420[6 * v198];
      v215 = v214[1];
      *a1 = *v214;
      a1[1] = v215;
      v216 = v214[3];
      a1[2] = v214[2];
      a1[3] = v216;
      v217 = v214[5];
      a1[4] = v214[4];
      a1[5] = v217;
      return 1;
    }
  }
  return 0;
}

uint64_t sub_20EB7C150(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, double a5)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double *v15;
  double *v16;
  float64x2_t v19;
  float64x2_t v20;
  double v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  double v33;
  double v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;

  v10 = a3[1] - *a3;
  v11 = (unint64_t)(v10 >> 3) >> 1;
  *(_QWORD *)(a1 + 8) = 0;
  sub_20E8B3B5C((char **)a1, v11);
  v12 = 0;
  if ((unint64_t)v10 >= 0x10)
  {
    v13 = 0;
    v12 = 0;
    v14 = a5 * a5;
    if (v11 <= 1)
      v11 = 1;
    do
    {
      while (1)
      {
        v15 = (double *)(*a3 + v13);
        v16 = (double *)(*a4 + v13);
        _D1 = v15[1];
        _D3 = v16[1];
        v19.f64[0] = *(float64_t *)(a2 + 16);
        v20 = *(float64x2_t *)(a2 + 24);
        _Q16 = *(float64x2_t *)(a2 + 48);
        v19.f64[1] = *(float64_t *)(a2 + 40);
        _Q4 = vaddq_f64(v19, vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)a2, (int64x2_t)v20), *v15), (float64x2_t)vzip2q_s64(*(int64x2_t *)a2, (int64x2_t)v20), _D1));
        __asm
        {
          FMLA            D0, D1, V16.D[1]
          FMLA            D1, D3, V4.D[1]
        }
        v29 = *(double *)(a2 + 64) + _D0 + _D1;
        v30 = vaddq_f64(_Q16, vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)a2, *v16), v20, _D3));
        v31 = vmulq_f64(_Q4, _Q4);
        v32 = vmulq_f64(v30, v30);
        v33 = vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v32, 1), vaddq_f64(vaddq_f64(v31, (float64x2_t)vdupq_laneq_s64((int64x2_t)v31, 1)), v32)).f64[0];
        v34 = v33 == 0.0 ? 1.0 : 1.0 / v33;
        v35 = *(_QWORD *)(a1 + 8);
        v36 = *(_QWORD *)(a1 + 16);
        v37 = v36 << 6;
        if (v29 * v29 * v34 < v14)
          break;
        if (v35 == v37)
        {
          if ((uint64_t)(v35 + 1) < 0)
LABEL_28:
            sub_20E867F44();
          v41 = v36 << 7;
          if (v41 <= (v35 & 0xFFFFFFFFFFFFFFC0) + 64)
            v41 = (v35 & 0xFFFFFFFFFFFFFFC0) + 64;
          if (v35 <= 0x3FFFFFFFFFFFFFFELL)
            v42 = v41;
          else
            v42 = 0x7FFFFFFFFFFFFFFFLL;
          sub_20E8B3B5C((char **)a1, v42);
          v35 = *(_QWORD *)(a1 + 8);
        }
        *(_QWORD *)(a1 + 8) = v35 + 1;
        *(_QWORD *)(*(_QWORD *)a1 + ((v35 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v35);
        v13 += 16;
        if (!--v11)
          return v12;
      }
      if (v35 == v37)
      {
        if ((uint64_t)(v35 + 1) < 0)
          goto LABEL_28;
        if (v35 > 0x3FFFFFFFFFFFFFFELL)
        {
          v40 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
          v38 = v36 << 7;
          v39 = (v35 & 0xFFFFFFFFFFFFFFC0) + 64;
          if (v38 <= v39)
            v40 = v39;
          else
            v40 = v38;
        }
        sub_20E8B3B5C((char **)a1, v40);
        v35 = *(_QWORD *)(a1 + 8);
      }
      *(_QWORD *)(a1 + 8) = v35 + 1;
      *(_QWORD *)(*(_QWORD *)a1 + ((v35 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v35;
      ++v12;
      v13 += 16;
      --v11;
    }
    while (v11);
  }
  return v12;
}

uint64_t sub_20EB7C38C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, double *a5)
{
  uint64_t v10;
  double v11;
  uint64_t v12;
  __n128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _OWORD v20[4];
  uint64_t v21;
  _OWORD v22[6];
  int8x16_t v23;
  uint64_t v24;
  double v25;
  void *v26;
  void *v27;
  uint64_t v28;

  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(double *)a1;
  v23 = vextq_s8(*(int8x16_t *)(a1 + 8), *(int8x16_t *)(a1 + 8), 8uLL);
  v24 = v10;
  v25 = v11;
  v27 = 0;
  v28 = 0;
  v26 = 0;
  v12 = sub_20EB487B8((uint64_t)&v23, (uint64_t)v22, (uint64_t)v20, a4, a5);
  if ((v12 & 1) != 0)
  {
    v14 = v22[3];
    *(_OWORD *)(a2 + 32) = v22[2];
    *(_OWORD *)(a2 + 48) = v14;
    v15 = v22[5];
    *(_OWORD *)(a2 + 64) = v22[4];
    *(_OWORD *)(a2 + 80) = v15;
    v16 = v22[1];
    *(_OWORD *)a2 = v22[0];
    *(_OWORD *)(a2 + 16) = v16;
    v17 = v20[3];
    *(_OWORD *)(a3 + 32) = v20[2];
    *(_OWORD *)(a3 + 48) = v17;
    *(_QWORD *)(a3 + 64) = v21;
    v18 = v20[1];
    *(_OWORD *)a3 = v20[0];
    *(_OWORD *)(a3 + 16) = v18;
    sub_20EB871A8(a2, (double *)*a4, *(float64x2_t **)a5, (unint64_t)((a4[1] - *a4) >> 3) >> 1, *(_DWORD *)(a1 + 40), *(double *)a1, *(double *)(a1 + 56), *(double *)(a1 + 64), v13);
    *(double *)a3 = *(double *)(a2 + 56) * *(double *)(a2 + 64) - *(double *)(a2 + 88) * *(double *)(a2 + 32);
    *(double *)(a3 + 8) = *(double *)(a2 + 56) * *(double *)(a2 + 72) - *(double *)(a2 + 88) * *(double *)(a2 + 40);
    *(double *)(a3 + 16) = *(double *)(a2 + 56) * *(double *)(a2 + 80) - *(double *)(a2 + 88) * *(double *)(a2 + 48);
    *(double *)(a3 + 24) = *(double *)(a2 + 88) * *(double *)a2 - *(double *)(a2 + 24) * *(double *)(a2 + 64);
    *(double *)(a3 + 32) = *(double *)(a2 + 88) * *(double *)(a2 + 8) - *(double *)(a2 + 24) * *(double *)(a2 + 72);
    *(double *)(a3 + 40) = *(double *)(a2 + 88) * *(double *)(a2 + 16) - *(double *)(a2 + 24) * *(double *)(a2 + 80);
    *(double *)(a3 + 48) = *(double *)(a2 + 24) * *(double *)(a2 + 32) - *(double *)(a2 + 56) * *(double *)a2;
    *(double *)(a3 + 56) = *(double *)(a2 + 24) * *(double *)(a2 + 40) - *(double *)(a2 + 56) * *(double *)(a2 + 8);
    *(double *)(a3 + 64) = *(double *)(a2 + 24) * *(double *)(a2 + 48) - *(double *)(a2 + 56) * *(double *)(a2 + 16);
  }
  if (v26)
  {
    v27 = v26;
    operator delete(v26);
  }
  return v12;
}

void sub_20EB7C590(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 96);
  if (v3)
  {
    *(_QWORD *)(v1 - 88) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_20EB7C5B0(_QWORD *a1, float64x2_t *a2, float64x2_t *a3, _QWORD *a4, _QWORD *a5, double a6, float64x2_t _Q1, double a8, __n128 a9, double a10, float64x2_t a11, __n128 _Q6)
{
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  int64_t v16;
  _QWORD *v17;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float64x2_t *v41;
  float64x2_t *v42;
  uint64_t v43;
  float64x2_t v44;
  double v45;
  double v47;
  unint64_t v48;
  unint64_t v49;
  const void *v50;
  unint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  unsigned int v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  double v64;
  unint64_t i;
  unint64_t v66;
  double *v67;
  double *v68;
  double *v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v79;
  double v80;
  float64x2_t v87;
  double v88;
  float64x2_t v90;
  float64x2_t v91;
  double v92;
  char *v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  char *v98;
  char *v99;
  __int128 v100;
  char *v101;
  uint64_t v102;
  __int128 v103;
  unint64_t v104;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  char *v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  char *v114;
  char *v115;
  float64x2_t *v116;
  char *v117;
  int v118;
  double v119;
  double *v120;
  uint64_t v121;
  unsigned int v122;
  unint64_t v123;
  char *v124;
  char *v125;
  char *v126;
  uint64_t v127;
  double v128;
  __n128 **v129;
  __n128 *v130;
  double v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  double *v136;
  unint64_t v137;
  uint64_t v138;
  double *v139;
  double v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  int v146;
  unint64_t v147;
  double *v148;
  double *v149;
  double v150;
  double v151;
  double *v152;
  double v153;
  float64x2_t v154;
  __int128 v155;
  float64x2_t v156;
  __int128 v157;
  __int128 v158;
  float64x2_t v159;
  float64x2_t v160;
  __int128 v161;
  __int128 v162;
  float64x2_t v163;
  double v164;
  uint64_t v165;
  double v166;
  double *v167;
  double v168;
  float64x2_t v169;
  __int128 v170;
  __int128 v171;
  float64x2_t v172;
  __int128 v173;
  double v174;
  double v175;
  unint64_t v176;
  double v177;
  float64x2_t v178;
  __int128 v179;
  __int128 v180;
  float64x2_t v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  char *v185;
  char *v186;
  uint64_t v187;
  double v188;
  uint64_t v189;
  uint64_t v190;
  double *v191;
  double v192;
  double v193;
  float64x2_t v194;
  __int128 v195;
  __int128 v196;
  float64x2_t v197;
  size_t v198;
  char *v199;
  char *v200;
  size_t v201;
  char *v202;
  uint64_t v203;
  __int128 v204;
  unint64_t v205;
  uint64_t *v207;
  _QWORD *v208;
  char *v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  unint64_t v218;
  float64x2_t *v219;
  unint64_t v221;
  char *v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  unint64_t v228;
  _BYTE *v229;
  _DWORD *v230;
  int64_t v231;
  unint64_t v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  float64x2_t *v237;
  float64x2_t *v238;
  uint64_t v239;
  int v240;
  char *v241;
  double *v242;
  unint64_t v243;
  uint64_t v244;
  double *v245;
  double v246;
  unint64_t v247;
  uint64_t v248;
  char *v249;
  char *v250;
  uint64_t v251;
  uint64_t v252;
  _BOOL8 result;
  float64x2_t v254;
  unint64_t v255;
  unsigned int v256;
  float64x2_t *v257;
  float64x2_t v258;
  float64x2_t v259;
  float64x2_t v260;
  char *v261;
  char *v262;
  float64x2_t v263;
  unint64_t v264;
  float64x2_t v265;
  float64x2_t v266;
  float64x2_t v267;
  unint64_t v268;
  unsigned int v269;
  float64x2_t *v270;
  float64x2_t v271;
  float64x2_t v272;
  int8x16_t v273;
  int8x16_t v274;
  double v275;
  int8x16_t v276;
  float64x2_t v277;
  double v278;
  float64x2_t v279;
  float64x2_t v280;
  float64x2_t v281;
  int8x16_t v285;
  float64x2_t v287;
  double v291;
  double v292;
  char *v293;
  __n128 v296;
  float64x2_t v297;
  float64_t v298;
  __n128 v299;
  float64x2_t v300;
  char *v301;
  unint64_t v302;
  double v303;
  _QWORD *v304;
  float64x2_t v305;
  char *v306;
  int v307;
  unint64_t v308;
  float64x2_t v309;
  unint64_t v310;
  unsigned int v311;
  unsigned int v312;
  unint64_t v313;
  char *v314;
  unint64_t v315;
  unint64_t v316;
  _QWORD *v317;
  char *__p;
  char *__pa;
  _QWORD *v320;
  float64x2_t v321;
  float64x2_t v322;
  float64x2_t v323;
  float64x2_t v324;
  float64x2_t v325;
  float64x2_t v326;
  float64x2_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  float64x2_t v335;
  float64x2_t v336;
  int8x16_t v337;
  int8x16_t v338;
  uint64_t v339;
  double v340[3];
  int v341;

  v16 = a5[1] - *a5;
  if ((unint64_t)v16 < 0x18)
    return 0;
  v17 = a5;
  v19 = v16 >> 3;
  v20 = (_QWORD *)a1[12];
  a1[13] = v20;
  if (v16 >> 3 > (unint64_t)((uint64_t)(a1[14] - (_QWORD)v20) >> 3))
  {
    if (v16 < 0)
      goto LABEL_309;
    v21 = operator new(v16);
    a1[12] = v21;
    a1[13] = v21;
    a1[14] = &v21[v19];
    if (!v20)
    {
      v20 = v21;
      v304 = a4;
      v22 = *v17;
      v317 = a1;
      v320 = v17;
      if (v17[1] != *v17)
        goto LABEL_7;
      goto LABEL_37;
    }
    operator delete(v20);
    v20 = (_QWORD *)a1[13];
  }
  v304 = a4;
  v22 = *v17;
  v317 = a1;
  v320 = v17;
  if (v17[1] != *v17)
  {
LABEL_7:
    v23 = 0;
    while (1)
    {
      v25 = *(_QWORD *)(v22 + 8 * v23);
      v26 = a1[14];
      if ((unint64_t)v20 >= v26)
        break;
      *v20 = v25;
      v24 = (uint64_t)(v20 + 1);
LABEL_9:
      a1[13] = v24;
      ++v23;
      v22 = *v17;
      v20 = (_QWORD *)v24;
      if (v23 >= (uint64_t)(v17[1] - *v17) >> 3)
        goto LABEL_38;
    }
    v27 = (char *)a1[12];
    v28 = ((char *)v20 - v27) >> 3;
    v29 = v28 + 1;
    if ((unint64_t)(v28 + 1) >> 61)
      goto LABEL_309;
    v30 = v26 - (_QWORD)v27;
    if (v30 >> 2 > v29)
      v29 = v30 >> 2;
    if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
      v31 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v31 = v29;
    if (v31)
    {
      if (v31 >> 61)
LABEL_312:
        sub_20E877A38();
      v32 = (char *)operator new(8 * v31);
      v33 = &v32[8 * v28];
      *(_QWORD *)v33 = v25;
      v24 = (uint64_t)(v33 + 8);
      v34 = (char *)((char *)v20 - v27);
      if (v20 != (_QWORD *)v27)
      {
LABEL_20:
        v35 = (unint64_t)(v34 - 8);
        if (v35 < 0x168
          || (v38 = ((char *)(v20 - 1) - v27) & 0xFFFFFFFFFFFFFFF8,
              &v32[(char *)v20 - v27 - 8 - v38] > &v32[(char *)v20 - v27 - 8])
          || (_QWORD *)((char *)v20 - v38 - 8) > v20 - 1
          || (unint64_t)(v27 - v32) < 0x20)
        {
          v36 = (char *)v20;
          a1 = v317;
        }
        else
        {
          v39 = (v35 >> 3) + 1;
          v40 = 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
          v36 = (char *)&v20[v40 / 0xFFFFFFFFFFFFFFF8];
          v33 -= v40;
          v41 = (float64x2_t *)&v32[8 * v28 - 16];
          v42 = (float64x2_t *)(v20 - 2);
          v43 = v39 & 0x3FFFFFFFFFFFFFFCLL;
          a1 = v317;
          do
          {
            _Q1 = v42[-1];
            v44 = *v42;
            v41[-1] = _Q1;
            *v41 = v44;
            v41 -= 2;
            v42 -= 2;
            v43 -= 4;
          }
          while (v43);
          if (v39 == (v39 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_23:
            v20 = (_QWORD *)a1[12];
            a1[12] = v33;
            a1[13] = v24;
            a1[14] = &v32[8 * v31];
            if (!v20)
            {
LABEL_25:
              v17 = v320;
              goto LABEL_9;
            }
LABEL_24:
            operator delete(v20);
            goto LABEL_25;
          }
        }
        do
        {
          v37 = *((_QWORD *)v36 - 1);
          v36 -= 8;
          *((_QWORD *)v33 - 1) = v37;
          v33 -= 8;
        }
        while (v36 != v27);
        goto LABEL_23;
      }
    }
    else
    {
      v32 = 0;
      v33 = (char *)(8 * v28);
      *(_QWORD *)(8 * v28) = v25;
      v24 = 8 * v28 + 8;
      v34 = (char *)((char *)v20 - v27);
      if (v20 != (_QWORD *)v27)
        goto LABEL_20;
    }
    a1 = v317;
    v317[12] = v33;
    v317[13] = v24;
    v317[14] = &v32[8 * v31];
    if (!v20)
      goto LABEL_25;
    goto LABEL_24;
  }
LABEL_37:
  v24 = (uint64_t)v20;
LABEL_38:
  v307 = *((unsigned __int8 *)a1 + 64);
  v45 = *((double *)a1 + 7);
  v303 = *((double *)a1 + 11);
  _Q0 = *(float64x2_t *)(a1 + 9);
  v305 = _Q0;
  v47 = *((double *)a1 + 5);
  v48 = *a1;
  v310 = a1[1];
  v49 = a1[2];
  v50 = (const void *)a1[12];
  v51 = v24 - (_QWORD)v50;
  if ((const void *)v24 == v50)
  {
    v52 = 0;
    v53 = 0;
    v56 = 12345;
    v301 = 0;
    if (v48)
      goto LABEL_49;
    goto LABEL_48;
  }
  if ((v51 & 0x8000000000000000) != 0)
LABEL_309:
    sub_20E867F44();
  v52 = (char *)operator new(v24 - (_QWORD)v50);
  memcpy(v52, v50, v51 & 0xFFFFFFFFFFFFFFF8);
  v53 = &v52[v51 & 0xFFFFFFFFFFFFFFF8];
  if ((v51 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v54 = 0;
    v55 = v51 >> 3;
    v56 = 12345;
    do
    {
      v56 = 214013 * v56 + 2531011;
      v57 = 8 * ((HIWORD(v56) & 0x7FFF) % v55 + v54);
      v58 = *(_QWORD *)&v52[v57];
      *(_QWORD *)&v52[v57] = *(_QWORD *)&v52[8 * v54];
      *(_QWORD *)&v52[8 * v54++] = v58;
      --v55;
    }
    while (v55);
    v301 = v52;
    if (v48)
      goto LABEL_49;
  }
  else
  {
    v56 = 12345;
    v301 = v52;
    if (v48)
      goto LABEL_49;
  }
LABEL_48:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/RANSAC/HypothesisUtil.h", 104, (uint64_t)"max_hypothesis > 0", 18, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_317;
  }
LABEL_49:
  if (v48 > v310
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/RANSAC/HypothesisUtil.h", 105, (uint64_t)"max_hypothesis <= max_trials", 28, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_317:
    abort();
  }
  v59 = (v53 - v52) >> 3;
  v293 = v53;
  if ((unint64_t)(v53 - v52) < 0x18)
  {
    v60 = 0;
    v61 = 0;
    v314 = 0;
    goto LABEL_93;
  }
  if (v48)
  {
    if (v48 > 0x38E38E38E38E38ELL)
      sub_20E867F44();
    v62 = (char *)operator new(72 * v48);
    v314 = &v62[72 * v48];
    v60 = v62;
    if (v310)
      goto LABEL_56;
  }
  else
  {
    v60 = 0;
    v314 = 0;
    if (v310)
    {
LABEL_56:
      v302 = v48;
      v63 = 0;
      _Q0 = v305;
      *(_QWORD *)&v64 = vextq_s8((int8x16_t)_Q0, (int8x16_t)_Q0, 8uLL).u64[0];
      v61 = v60;
      v292 = v64;
      while (1)
      {
        for (i = 0; i < 3; ++i)
        {
          v56 = 214013 * v56 + 2531011;
          v66 = (HIWORD(v56) & 0x7FFF) % v59;
          *(_QWORD *)&v335.f64[i] = v66;
          if (i && (*(_QWORD *)&v335.f64[0] == v66 || i != 1 && *(_QWORD *)&v335.f64[1] == v66))
            --i;
        }
        v67 = *(double **)&v52[8 * *(_QWORD *)&v335.f64[0]];
        v68 = *(double **)&v52[8 * *(_QWORD *)&v335.f64[1]];
        v69 = *(double **)&v52[8 * *(_QWORD *)&v336.f64[0]];
        v70 = v67[1];
        v71 = *v68 - *v67;
        v72 = v68[1] - v70;
        v73 = v67[2];
        v74 = v68[2] - v73;
        v75 = *v69 - *v67;
        v76 = v69[1] - v70;
        v77 = v69[2] - v73;
        _Q0.f64[0] = v72 * v77 - v74 * v76;
        _D1 = v74 * v75 - v71 * v77;
        v79 = v71 * v76 - v72 * v75;
        if (sqrt(_Q0.f64[0] * _Q0.f64[0] + _D1 * _D1 + v79 * v79) == 0.0)
          goto LABEL_58;
        v80 = v67[2];
        _Q4 = *(_OWORD *)v67;
        __asm { FMLA            D5, D1, V4.D[1] }
        v87.f64[0] = v79;
        v87.f64[1] = -(_D5 + v79 * v80);
        *(double *)&_Q4 = vmulq_f64(_Q0, _Q0).f64[0];
        _Q0.f64[1] = _D1;
        v88 = 1.0 / sqrt(*(double *)&_Q4 + _D1 * _D1 + v79 * v79 + (_D5 + v79 * v80) * (_D5 + v79 * v80));
        a11 = vmulq_n_f64(v87, v88);
        _Q6 = (__n128)vmulq_n_f64(_Q0, v88);
        _Q0 = vmulq_f64((float64x2_t)_Q6, (float64x2_t)_Q6);
        _D1 = _Q6.n128_u64[1];
        __asm { FMLA            D0, D1, V6.D[1] }
        _Q0.f64[0] = sqrt(vmlad_n_f64(_Q0.f64[0], a11.f64[0], a11.f64[0]));
        _Q1.f64[0] = 1.0 / _Q0.f64[0];
        if (_Q0.f64[0] == 0.0)
          _Q1.f64[0] = 1.0;
        v90 = vmulq_n_f64((float64x2_t)_Q6, _Q1.f64[0]);
        if (_Q0.f64[0] == 0.0)
          _Q0.f64[0] = 1.0;
        if (v307
          && fabs(vmulq_f64(v90, v305).f64[0]+ *(double *)vextq_s8((int8x16_t)_Q6, (int8x16_t)_Q6, 8uLL).i64 * _Q1.f64[0] * v64+ a11.f64[0] * _Q1.f64[0] * v303) > v45)
        {
          goto LABEL_58;
        }
        v91 = vmulq_f64(a11, _Q1);
        a9 = (__n128)vextq_s8((int8x16_t)v90, (int8x16_t)v90, 8uLL);
        v92 = -a11.f64[1] / _Q0.f64[0];
        if (v61 < v314)
        {
          *(_QWORD *)v61 = 0;
          *(__n128 *)(v61 + 8) = _Q6;
          *(float64x2_t *)(v61 + 24) = a11;
          *(_QWORD *)&v90.f64[1] = a9.n128_u64[0];
          *(float64x2_t *)(v61 + 40) = v90;
          *((_QWORD *)v61 + 7) = *(_QWORD *)&v91.f64[0];
          *((double *)v61 + 8) = v92;
          v61 += 72;
          if (0x8E38E38E38E38E39 * ((v61 - v60) >> 3) == v302)
            goto LABEL_93;
          goto LABEL_58;
        }
        v93 = v60;
        v94 = 0x8E38E38E38E38E39 * ((v61 - v60) >> 3);
        v95 = v94 + 1;
        if (v94 + 1 > 0x38E38E38E38E38ELL)
          sub_20E867F44();
        v296 = a9;
        v297 = v91;
        v298 = v90.f64[0];
        v299 = _Q6;
        v300 = a11;
        __p = v93;
        v96 = 0x8E38E38E38E38E39 * ((v314 - v93) >> 3);
        if (2 * v96 > v95)
          v95 = 2 * v96;
        if (v96 >= 0x1C71C71C71C71C7)
          v97 = 0x38E38E38E38E38ELL;
        else
          v97 = v95;
        if (v97 > 0x38E38E38E38E38ELL)
          sub_20E877A38();
        v98 = (char *)operator new(72 * v97);
        v99 = &v98[72 * v94];
        *(_QWORD *)v99 = 0;
        *(float64x2_t *)(v99 + 24) = v300;
        *(__n128 *)(v99 + 8) = v299;
        *(float64_t *)&v100 = v298;
        *(_QWORD *)&_Q1.f64[1] = v296.n128_u64[1];
        *((_QWORD *)&v100 + 1) = v296.n128_u64[0];
        *(_OWORD *)(v99 + 40) = v100;
        _Q0 = v297;
        *((_QWORD *)v99 + 7) = *(_QWORD *)&v297.f64[0];
        *((double *)v99 + 8) = v92;
        v60 = v99;
        if (v61 == __p)
        {
          v101 = __p;
          v314 = &v98[72 * v97];
          v61 = v99 + 72;
          if (__p)
            goto LABEL_86;
        }
        else
        {
          v101 = __p;
          do
          {
            v102 = *((_QWORD *)v61 - 9);
            v61 -= 72;
            *((_QWORD *)v60 - 9) = v102;
            v60 -= 72;
            v103 = *(_OWORD *)(v61 + 8);
            _Q1 = *(float64x2_t *)(v61 + 24);
            *(float64x2_t *)(v60 + 24) = _Q1;
            *(_OWORD *)(v60 + 8) = v103;
            _Q0 = *(float64x2_t *)(v61 + 40);
            *((_QWORD *)v60 + 7) = *((_QWORD *)v61 + 7);
            *(float64x2_t *)(v60 + 40) = _Q0;
            _Q0.f64[0] = *((float64_t *)v61 + 8);
            *((_QWORD *)v60 + 8) = *(_QWORD *)&_Q0.f64[0];
          }
          while (v61 != __p);
          v314 = &v98[72 * v97];
          v61 = v99 + 72;
          if (__p)
LABEL_86:
            operator delete(v101);
        }
        v52 = v301;
        v64 = v292;
        if (0x8E38E38E38E38E39 * ((v61 - v60) >> 3) == v302)
          goto LABEL_93;
LABEL_58:
        if (++v63 == v310)
          goto LABEL_93;
      }
    }
  }
  v61 = v60;
LABEL_93:
  __pa = v60;
  v104 = v59 / v49 + 1;
  if (v59 / v49 != -1)
  {
    if (v104 >> 60)
      sub_20E867F44();
    v105 = (char *)operator new(16 * v104);
    v106 = &v105[16 * v104];
    if (v293 != v52)
      goto LABEL_95;
LABEL_237:
    v118 = 0;
    v119 = 0.0;
    _D4 = 0;
    a11.f64[0] = 0.0;
    v120 = (double *)v317;
    v207 = v320;
    v208 = v304;
    v313 = 0;
    v316 = a9.n128_u64[1];
    v309 = a11;
    if (!v105)
      goto LABEL_239;
    goto LABEL_238;
  }
  v105 = 0;
  v106 = 0;
  if (v293 == v52)
    goto LABEL_237;
LABEL_95:
  v107 = v105;
  v108 = &v52[8 * v59];
  do
  {
    while (1)
    {
      v109 = v52;
      v110 = (v108 - v52) >> 3;
      if (v110 >= v49)
        v110 = v49;
      v52 += 8 * v110;
      if (v107 >= v106)
        break;
      *(_QWORD *)v107 = v109;
      *((_QWORD *)v107 + 1) = v52;
      v107 += 16;
      if (v52 == v108)
        goto LABEL_116;
    }
    v111 = (v107 - v105) >> 4;
    v112 = v111 + 1;
    if ((unint64_t)(v111 + 1) >> 60)
      sub_20E867F44();
    if ((v106 - v105) >> 3 > v112)
      v112 = (v106 - v105) >> 3;
    if ((unint64_t)(v106 - v105) >= 0x7FFFFFFFFFFFFFF0)
      v113 = 0xFFFFFFFFFFFFFFFLL;
    else
      v113 = v112;
    if (v113 >> 60)
      sub_20E877A38();
    v114 = (char *)operator new(16 * v113);
    v115 = &v114[16 * v111];
    *(_QWORD *)v115 = v109;
    *((_QWORD *)v115 + 1) = v52;
    if (v107 == v105)
    {
      v117 = &v114[16 * v111];
      v106 = &v114[16 * v113];
      v107 = v115 + 16;
      if (v105)
        goto LABEL_111;
    }
    else
    {
      v116 = (float64x2_t *)&v114[16 * v111];
      do
      {
        _Q0 = *((float64x2_t *)v107 - 1);
        v117 = (char *)&v116[-1];
        v116[-1] = _Q0;
        v107 -= 16;
        --v116;
      }
      while (v107 != v105);
      v106 = &v114[16 * v113];
      v107 = v115 + 16;
      if (v105)
LABEL_111:
        operator delete(v105);
    }
    v105 = v117;
  }
  while (v52 != v108);
LABEL_116:
  v118 = 0;
  v119 = 0.0;
  v120 = (double *)v317;
  if (v105 == v107 || (v121 = (uint64_t)__pa, __pa == v61))
  {
    _D4 = 0;
    a11.f64[0] = 0.0;
    v207 = v320;
    v208 = v304;
    v52 = v301;
    v313 = 0;
    v316 = a9.n128_u64[1];
    v309 = a11;
    if (!v105)
      goto LABEL_239;
    goto LABEL_238;
  }
  v122 = 0;
  v123 = (unint64_t)v61;
  v124 = v105;
  while (2)
  {
    if (v121 == v123)
    {
      v125 = *(char **)v124;
      v126 = (char *)*((_QWORD *)v124 + 1);
      v133 = v123 - v121;
      v134 = 0x8E38E38E38E38E39 * ((uint64_t)(v123 - v121) >> 3);
      if (v134 >= 2)
        goto LABEL_137;
      goto LABEL_230;
    }
    v125 = *(char **)v124;
    v126 = (char *)*((_QWORD *)v124 + 1);
    v127 = v121;
    if (*(char **)v124 == v126)
    {
      v135 = v123 - v121 - 72;
      v136 = (double *)v121;
      if (v135 < 0x48)
        goto LABEL_324;
      v137 = v135 / 0x48 + 1;
      v136 = (double *)(v121 + 72 * (v137 & 0x7FFFFFFFFFFFFFELL));
      v138 = v137 & 0x7FFFFFFFFFFFFFELL;
      v139 = (double *)v121;
      do
      {
        _Q0.f64[0] = *v139 + 0.0;
        v140 = v139[9] + 0.0;
        *v139 = _Q0.f64[0];
        v139[9] = v140;
        v139 += 18;
        v138 -= 2;
      }
      while (v138);
      if (v137 != (v137 & 0x7FFFFFFFFFFFFFELL))
      {
LABEL_324:
        do
        {
          _Q0.f64[0] = *v136 + 0.0;
          *v136 = _Q0.f64[0];
          v136 += 9;
        }
        while (v136 != (double *)v123);
      }
      v126 = v125;
      v133 = v123 - v121;
      v134 = 0x8E38E38E38E38E39 * ((uint64_t)(v123 - v121) >> 3);
      if (v134 < 2)
        goto LABEL_230;
LABEL_137:
      v141 = (v134 - 1) >> 1;
      if (v133 == 144)
        v141 = 1;
      v142 = v121 + 72 * v141;
      if (v142 != v123)
      {
        v306 = v124;
        v308 = v141;
        v311 = v122;
        do
        {
          v143 = 0x8E38E38E38E38E39 * ((uint64_t)(v123 - v121) >> 3);
          if (v143 < 2)
            break;
          if (v143 == 3)
          {
            sub_20EB7F0E8(v121, v121 + 72, v123 - 72);
            break;
          }
          if (v143 == 2)
          {
            _Q0.f64[0] = *(float64_t *)v121;
            if (*(double *)(v123 - 72) < *(double *)v121)
            {
              v178 = *(float64x2_t *)(v121 + 24);
              v335 = *(float64x2_t *)(v121 + 8);
              v336 = v178;
              _Q1 = *(float64x2_t *)(v121 + 40);
              v326 = _Q1;
              v333 = *(_QWORD *)(v121 + 56);
              _Q1.f64[0] = *(float64_t *)(v121 + 64);
              *(_QWORD *)v121 = *(_QWORD *)(v123 - 72);
              v179 = *(_OWORD *)(v123 - 64);
              a9 = *(__n128 *)(v123 - 48);
              *(__n128 *)(v121 + 24) = a9;
              *(_OWORD *)(v121 + 8) = v179;
              v180 = *(_OWORD *)(v123 - 32);
              *(_QWORD *)(v121 + 56) = *(_QWORD *)(v123 - 16);
              *(_OWORD *)(v121 + 40) = v180;
              *(_QWORD *)(v121 + 64) = *(_QWORD *)(v123 - 8);
              *(float64_t *)(v123 - 72) = _Q0.f64[0];
              v181 = v336;
              *(float64x2_t *)(v123 - 64) = v335;
              *(float64x2_t *)(v123 - 48) = v181;
              _Q0 = v326;
              *(_QWORD *)(v123 - 16) = v333;
              *(float64x2_t *)(v123 - 32) = v326;
              *(float64_t *)(v123 - 8) = _Q1.f64[0];
            }
            break;
          }
          if ((uint64_t)(v123 - v121) <= 575)
          {
            while (v121 != v123 - 72)
            {
              v187 = v121;
              v121 += 72;
              if (v187 != v123 && v121 != v123)
              {
                _Q0.f64[0] = *(float64_t *)v187;
                v188 = *(double *)v187;
                v189 = v121;
                v190 = v187;
                v191 = (double *)v121;
                do
                {
                  v192 = *v191;
                  v191 += 9;
                  v193 = v192;
                  if (v192 < v188)
                  {
                    v188 = v193;
                    v190 = v189;
                  }
                  v189 = (uint64_t)v191;
                }
                while (v191 != (double *)v123);
                if (v190 != v187)
                {
                  v194 = *(float64x2_t *)(v187 + 24);
                  v335 = *(float64x2_t *)(v187 + 8);
                  v336 = v194;
                  _Q1 = *(float64x2_t *)(v187 + 40);
                  v327 = _Q1;
                  v334 = *(_QWORD *)(v187 + 56);
                  _Q1.f64[0] = *(float64_t *)(v187 + 64);
                  *(_QWORD *)v187 = *(_QWORD *)v190;
                  v195 = *(_OWORD *)(v190 + 8);
                  a9 = *(__n128 *)(v190 + 24);
                  *(__n128 *)(v187 + 24) = a9;
                  *(_OWORD *)(v187 + 8) = v195;
                  v196 = *(_OWORD *)(v190 + 40);
                  *(_QWORD *)(v187 + 56) = *(_QWORD *)(v190 + 56);
                  *(_OWORD *)(v187 + 40) = v196;
                  *(_QWORD *)(v187 + 64) = *(_QWORD *)(v190 + 64);
                  *(float64_t *)v190 = _Q0.f64[0];
                  v197 = v336;
                  *(float64x2_t *)(v190 + 8) = v335;
                  *(float64x2_t *)(v190 + 24) = v197;
                  _Q0 = v327;
                  *(float64x2_t *)(v190 + 40) = v327;
                  *(_QWORD *)(v190 + 56) = v334;
                  *(float64_t *)(v190 + 64) = _Q1.f64[0];
                }
              }
            }
            break;
          }
          v144 = v121 + 72 * (v143 >> 1);
          v145 = v123 - 72;
          v146 = sub_20EB7F0E8(v121, v144, v123 - 72);
          _Q0.f64[0] = *(float64_t *)v121;
          if (*(double *)v121 >= *(double *)v144)
          {
            v147 = v123 - 72;
            while (1)
            {
              v147 -= 72;
              if (v147 == v121)
                break;
              if (*(double *)v147 < *(double *)v144)
              {
                v156 = *(float64x2_t *)(v121 + 24);
                v335 = *(float64x2_t *)(v121 + 8);
                v336 = v156;
                _Q1 = *(float64x2_t *)(v121 + 40);
                v322 = _Q1;
                v329 = *(_QWORD *)(v121 + 56);
                _Q1.f64[0] = *(float64_t *)(v121 + 64);
                *(_QWORD *)v121 = *(_QWORD *)v147;
                v157 = *(_OWORD *)(v147 + 8);
                a9 = *(__n128 *)(v147 + 24);
                *(__n128 *)(v121 + 24) = a9;
                *(_OWORD *)(v121 + 8) = v157;
                v158 = *(_OWORD *)(v147 + 40);
                *(_QWORD *)(v121 + 56) = *(_QWORD *)(v147 + 56);
                *(_OWORD *)(v121 + 40) = v158;
                *(_QWORD *)(v121 + 64) = *(_QWORD *)(v147 + 64);
                *(float64_t *)v147 = _Q0.f64[0];
                v159 = v336;
                *(float64x2_t *)(v147 + 8) = v335;
                *(float64x2_t *)(v147 + 24) = v159;
                _Q0 = v322;
                *(_QWORD *)(v147 + 56) = v329;
                *(float64x2_t *)(v147 + 40) = v322;
                *(float64_t *)(v147 + 64) = _Q1.f64[0];
                ++v146;
                v148 = (double *)(v121 + 72);
                if (v121 + 72 < v147)
                  goto LABEL_147;
                goto LABEL_160;
              }
            }
            v165 = v121 + 72;
            if (_Q0.f64[0] >= *(double *)v145)
            {
              if (v165 == v145)
                break;
              while (1)
              {
                v166 = *(double *)v165;
                if (_Q0.f64[0] < *(double *)v165)
                  break;
                v165 += 72;
                if (v165 == v145)
                  goto LABEL_198;
              }
              v169 = *(float64x2_t *)(v165 + 24);
              v335 = *(float64x2_t *)(v165 + 8);
              v336 = v169;
              _Q0 = *(float64x2_t *)(v165 + 40);
              v331 = *(_QWORD *)(v165 + 56);
              v324 = _Q0;
              _Q0.f64[0] = *(float64_t *)(v165 + 64);
              *(_QWORD *)v165 = *(_QWORD *)(v123 - 72);
              v170 = *(_OWORD *)(v123 - 64);
              a9 = *(__n128 *)(v123 - 48);
              *(__n128 *)(v165 + 24) = a9;
              *(_OWORD *)(v165 + 8) = v170;
              v171 = *(_OWORD *)(v123 - 32);
              *(_QWORD *)(v165 + 56) = *(_QWORD *)(v123 - 16);
              *(_OWORD *)(v165 + 40) = v171;
              *(_QWORD *)(v165 + 64) = *(_QWORD *)(v123 - 8);
              *(double *)(v123 - 72) = v166;
              _Q1 = v336;
              *(float64x2_t *)(v123 - 64) = v335;
              *(float64x2_t *)(v123 - 48) = _Q1;
              _Q1.f64[1] = v324.f64[1];
              *(_QWORD *)(v123 - 16) = v331;
              *(float64x2_t *)(v123 - 32) = v324;
              *(float64_t *)(v123 - 8) = _Q0.f64[0];
              v165 += 72;
            }
            if (v165 == v145)
              break;
            while (1)
            {
              v174 = *(double *)v121;
              do
              {
                v175 = *(double *)v165;
                v165 += 72;
                _Q0.f64[0] = v175;
              }
              while (v174 >= v175);
              v176 = v165 - 72;
              do
              {
                v177 = *(double *)(v145 - 72);
                v145 -= 72;
              }
              while (v174 < v177);
              if (v176 >= v145)
                break;
              v172 = *(float64x2_t *)(v165 - 48);
              v335 = *(float64x2_t *)(v165 - 64);
              v336 = v172;
              _Q1 = *(float64x2_t *)(v165 - 32);
              v332 = *(_QWORD *)(v165 - 16);
              v325 = _Q1;
              _Q1.f64[0] = *(float64_t *)(v165 - 8);
              *(_QWORD *)(v165 - 72) = *(_QWORD *)v145;
              a9 = *(__n128 *)(v145 + 24);
              *(_OWORD *)(v165 - 64) = *(_OWORD *)(v145 + 8);
              *(__n128 *)(v165 - 48) = a9;
              v173 = *(_OWORD *)(v145 + 40);
              *(_QWORD *)(v165 - 16) = *(_QWORD *)(v145 + 56);
              *(_OWORD *)(v165 - 32) = v173;
              *(_QWORD *)(v165 - 8) = *(_QWORD *)(v145 + 64);
              *(float64_t *)v145 = _Q0.f64[0];
              _Q0 = v336;
              *(float64x2_t *)(v145 + 8) = v335;
              *(float64x2_t *)(v145 + 24) = _Q0;
              _Q0.f64[1] = v325.f64[1];
              *(_QWORD *)(v145 + 56) = v332;
              *(float64x2_t *)(v145 + 40) = v325;
              *(float64_t *)(v145 + 64) = _Q1.f64[0];
            }
            v121 = v165 - 72;
            if (v176 > v142)
              break;
          }
          else
          {
            v147 = v123 - 72;
            v148 = (double *)(v121 + 72);
            if (v121 + 72 >= v145)
            {
LABEL_160:
              v152 = v148;
            }
            else
            {
LABEL_147:
              v149 = v148;
              while (1)
              {
                v150 = *(double *)v144;
                do
                {
                  v151 = *v149;
                  v149 += 9;
                  _Q0.f64[0] = v151;
                }
                while (v151 < v150);
                v152 = v149 - 9;
                do
                {
                  v153 = *(double *)(v147 - 72);
                  v147 -= 72;
                }
                while (v153 >= v150);
                if ((unint64_t)v152 >= v147)
                  break;
                v154 = *(float64x2_t *)(v149 - 6);
                v335 = *(float64x2_t *)(v149 - 8);
                v336 = v154;
                _Q1 = *(float64x2_t *)(v149 - 4);
                v328 = *((_QWORD *)v149 - 2);
                v321 = _Q1;
                _Q1.f64[0] = *(v149 - 1);
                *(v149 - 9) = *(double *)v147;
                a9 = *(__n128 *)(v147 + 24);
                *((_OWORD *)v149 - 4) = *(_OWORD *)(v147 + 8);
                *((__n128 *)v149 - 3) = a9;
                v155 = *(_OWORD *)(v147 + 40);
                *(v149 - 2) = *(double *)(v147 + 56);
                *((_OWORD *)v149 - 2) = v155;
                *(v149 - 1) = *(double *)(v147 + 64);
                *(float64_t *)v147 = _Q0.f64[0];
                _Q0 = v336;
                *(float64x2_t *)(v147 + 8) = v335;
                *(float64x2_t *)(v147 + 24) = _Q0;
                _Q0.f64[1] = v321.f64[1];
                *(_QWORD *)(v147 + 56) = v328;
                *(float64x2_t *)(v147 + 40) = v321;
                *(float64_t *)(v147 + 64) = _Q1.f64[0];
                ++v146;
                if (v152 == (double *)v144)
                  v144 = v147;
              }
            }
            if (v152 != (double *)v144)
            {
              _Q0.f64[0] = *v152;
              if (*(double *)v144 < *v152)
              {
                v160 = *(float64x2_t *)(v152 + 3);
                v335 = *(float64x2_t *)(v152 + 1);
                v336 = v160;
                _Q1 = *(float64x2_t *)(v152 + 5);
                v323 = _Q1;
                v330 = *((_QWORD *)v152 + 7);
                _Q1.f64[0] = v152[8];
                *v152 = *(double *)v144;
                v161 = *(_OWORD *)(v144 + 8);
                a9 = *(__n128 *)(v144 + 24);
                *(__n128 *)(v152 + 3) = a9;
                *(_OWORD *)(v152 + 1) = v161;
                v162 = *(_OWORD *)(v144 + 40);
                v152[7] = *(double *)(v144 + 56);
                *(_OWORD *)(v152 + 5) = v162;
                v152[8] = *(double *)(v144 + 64);
                *(float64_t *)v144 = _Q0.f64[0];
                v163 = v336;
                *(float64x2_t *)(v144 + 8) = v335;
                *(float64x2_t *)(v144 + 24) = v163;
                _Q0 = v323;
                *(float64x2_t *)(v144 + 40) = v323;
                *(_QWORD *)(v144 + 56) = v330;
                *(float64_t *)(v144 + 64) = _Q1.f64[0];
                ++v146;
              }
            }
            if (v152 == (double *)v142)
              break;
            if (!v146)
            {
              if ((unint64_t)v152 <= v142)
              {
                v167 = v152 + 9;
                while (v167 != (double *)v123)
                {
                  _Q0.f64[0] = *v167;
                  v168 = *(v167 - 9);
                  v167 += 9;
                  if (_Q0.f64[0] < v168)
                    goto LABEL_166;
                }
              }
              else
              {
                while (v148 != v152)
                {
                  _Q0.f64[0] = *v148;
                  v164 = *(v148 - 9);
                  v148 += 9;
                  if (_Q0.f64[0] < v164)
                    goto LABEL_166;
                }
              }
              break;
            }
LABEL_166:
            if ((unint64_t)v152 <= v142)
              v121 = (uint64_t)(v152 + 9);
            else
              v123 = (unint64_t)v152;
          }
        }
        while (v123 != v142);
LABEL_198:
        v121 = (uint64_t)__pa;
        v134 = 0x8E38E38E38E38E39 * ((v61 - __pa) >> 3);
        v123 = (unint64_t)v61;
        v122 = v311;
        v141 = v308;
        v124 = v306;
      }
      v182 = v141 - v134;
      if (v141 <= v134)
      {
        if (v141 < v134)
        {
          v61 = (char *)(v121 + 72 * v141);
          v123 = (unint64_t)v61;
        }
        goto LABEL_230;
      }
      if (0x8E38E38E38E38E39 * ((uint64_t)&v314[-v123] >> 3) >= v182)
      {
        v198 = 72 * ((72 * v182 - 72) / 0x48) + 72;
        v199 = v124;
        bzero((void *)v123, v198);
        v124 = v199;
        v61 = (char *)(v123 + v198);
        v121 = (uint64_t)__pa;
        v123 += v198;
        goto LABEL_230;
      }
      v312 = v122;
      v183 = 0x8E38E38E38E38E39 * ((uint64_t)(v123 - (_QWORD)__pa) >> 3) + v182;
      if (v183 > 0x38E38E38E38E38ELL)
        sub_20E867F44();
      if (0x1C71C71C71C71C72 * ((v314 - __pa) >> 3) > v183)
        v183 = 0x1C71C71C71C71C72 * ((v314 - __pa) >> 3);
      if (0x8E38E38E38E38E39 * ((v314 - __pa) >> 3) >= 0x1C71C71C71C71C7)
        v184 = 0x38E38E38E38E38ELL;
      else
        v184 = v183;
      if (v184)
      {
        if (v184 > 0x38E38E38E38E38ELL)
          sub_20E877A38();
        v185 = v124;
        v186 = (char *)operator new(72 * v184);
      }
      else
      {
        v185 = v124;
        v186 = 0;
      }
      v315 = v184;
      v200 = &v186[8 * ((uint64_t)(v123 - (_QWORD)__pa) >> 3)];
      v201 = 72 * ((72 * v182 - 72) / 0x48) + 72;
      bzero(v200, v201);
      v121 = (uint64_t)v200;
      if ((char *)v123 == __pa)
      {
        v202 = __pa;
        v314 = &v186[72 * v315];
        v61 = &v200[v201];
        if (!__pa)
          goto LABEL_229;
      }
      else
      {
        v202 = __pa;
        do
        {
          v203 = *(_QWORD *)(v123 - 72);
          v123 -= 72;
          *(_QWORD *)(v121 - 72) = v203;
          v121 -= 72;
          v204 = *(_OWORD *)(v123 + 8);
          _Q1 = *(float64x2_t *)(v123 + 24);
          *(float64x2_t *)(v121 + 24) = _Q1;
          *(_OWORD *)(v121 + 8) = v204;
          _Q0 = *(float64x2_t *)(v123 + 40);
          *(_QWORD *)(v121 + 56) = *(_QWORD *)(v123 + 56);
          *(float64x2_t *)(v121 + 40) = _Q0;
          _Q0.f64[0] = *(float64_t *)(v123 + 64);
          *(float64_t *)(v121 + 64) = _Q0.f64[0];
        }
        while ((char *)v123 != __pa);
        v314 = &v186[72 * v315];
        v61 = &v200[v201];
        if (!__pa)
          goto LABEL_229;
      }
      operator delete(v202);
LABEL_229:
      __pa = (char *)v121;
      v123 = (unint64_t)v61;
      v122 = v312;
      v124 = v185;
      goto LABEL_230;
    }
    do
    {
      _Q0 = *(float64x2_t *)(v127 + 40);
      _Q1 = (float64x2_t)vextq_s8((int8x16_t)_Q0, (int8x16_t)_Q0, 8uLL);
      v128 = 0.0;
      v129 = (__n128 **)v125;
      do
      {
        v130 = *v129++;
        _Q6 = *v130;
        __asm { FMLA            D7, D1, V6.D[1] }
        if (vabdd_f64(_D7 + v130[1].n128_f64[0] * *(double *)(v127 + 56), *(double *)(v127 + 64)) < v47)
          v132 = 0.0;
        else
          v132 = 1.0;
        v128 = v128 + v132;
      }
      while (v129 != (__n128 **)v126);
      _Q0.f64[0] = v128 + *(double *)v127;
      *(float64_t *)v127 = _Q0.f64[0];
      v127 += 72;
    }
    while (v127 != v123);
    v133 = v123 - v121;
    v134 = 0x8E38E38E38E38E39 * ((uint64_t)(v123 - v121) >> 3);
    if (v134 >= 2)
      goto LABEL_137;
LABEL_230:
    v122 += (unint64_t)(v126 - v125) >> 3;
    v205 = v123 - v121 - 72;
    if (v123 - v121 != 72)
    {
      v124 += 16;
      if (v124 != v107)
        continue;
    }
    break;
  }
  v207 = v320;
  v52 = v301;
  if (v122)
  {
    if (v121 != v123)
    {
      _Q0.f64[0] = (double)v122;
      v242 = (double *)v121;
      if (v205 < 0x48)
        goto LABEL_325;
      v243 = v205 / 0x48 + 1;
      v242 = (double *)(v121 + 72 * (v243 & 0x7FFFFFFFFFFFFFELL));
      v244 = v243 & 0x7FFFFFFFFFFFFFELL;
      v245 = (double *)v121;
      do
      {
        v246 = v245[9] / _Q0.f64[0];
        *v245 = *v245 / _Q0.f64[0];
        v245[9] = v246;
        v245 += 18;
        v244 -= 2;
      }
      while (v244);
      if (v243 != (v243 & 0x7FFFFFFFFFFFFFELL))
      {
LABEL_325:
        do
        {
          *v242 = *v242 / _Q0.f64[0];
          v242 += 9;
        }
        while (v242 != (double *)v123);
      }
    }
    v247 = 126 - 2 * __clz(0x8E38E38E38E38E39 * ((uint64_t)(v123 - v121) >> 3));
    if (v121 == v123)
      v248 = 0;
    else
      v248 = v247;
    sub_20EB7F384(v121, v123, v248, 1, _Q0.f64[0]);
  }
  if (__pa != v61)
  {
    a9 = *(__n128 *)(__pa + 40);
    _D4 = vextq_s8((int8x16_t)a9, (int8x16_t)a9, 8uLL).u64[0];
    a11.f64[0] = *((float64_t *)__pa + 7);
    v119 = *((double *)__pa + 8);
    v118 = 1;
    v120 = (double *)v317;
    v208 = v304;
    v313 = _D4;
    v316 = a9.n128_u64[1];
    v309 = a11;
    if (!v105)
      goto LABEL_239;
LABEL_238:
    operator delete(v105);
    a11 = v309;
    _D4 = v313;
    a9.n128_u64[1] = v316;
    goto LABEL_239;
  }
  v118 = 0;
  v119 = 0.0;
  _D4 = 0;
  a11.f64[0] = 0.0;
  v120 = (double *)v317;
  v208 = v304;
  v313 = 0;
  v316 = a9.n128_u64[1];
  v309 = a11;
  if (v105)
    goto LABEL_238;
LABEL_239:
  if (__pa)
  {
    operator delete(__pa);
    a11 = v309;
    _D4 = v313;
    a9.n128_u64[1] = v316;
  }
  if (v52)
  {
    operator delete(v52);
    a11 = v309;
    _D4 = v313;
    a9.n128_u64[1] = v316;
    if ((v118 & 1) == 0)
      return 0;
  }
  else if (!v118)
  {
    return 0;
  }
  v209 = (char *)*v208;
  v208[1] = *v208;
  v210 = v207[1] - *v207;
  v211 = (unint64_t)(v210 >> 3) >> 1;
  if (v211 > (uint64_t)(v208[2] - (_QWORD)v209) >> 2)
  {
    if (v210 < 0)
      sub_20E867F44();
    v212 = 4 * v211;
    v213 = (char *)operator new(4 * v211);
    *v208 = v213;
    v208[1] = v213;
    v208[2] = &v213[v212];
    _D4 = v313;
    a9.n128_u64[1] = v316;
    a11 = v309;
    if (v209)
    {
      operator delete(v209);
      a11 = v309;
      _D4 = v313;
      a9.n128_u64[1] = v316;
    }
  }
  v215 = *v207;
  v214 = v207[1];
  if (v214 != *v207)
  {
    v216 = 0;
    while (2)
    {
      v219 = *(float64x2_t **)(v215 + 8 * v216);
      _Q1 = *v219;
      __asm { FMLA            D2, D4, V1.D[1] }
      if (vabdd_f64(_D2 + v219[1].f64[0] * a11.f64[0], v119) >= v120[5])
        goto LABEL_253;
      v222 = (char *)v208[1];
      v221 = v208[2];
      if ((unint64_t)v222 >= v221)
      {
        v223 = (char *)*v208;
        v224 = (uint64_t)&v222[-*v208];
        v225 = v224 >> 2;
        v226 = (v224 >> 2) + 1;
        if (v226 >> 62)
          sub_20E867F44();
        v227 = v221 - (_QWORD)v223;
        if (v227 >> 1 > v226)
          v226 = v227 >> 1;
        if ((unint64_t)v227 >= 0x7FFFFFFFFFFFFFFCLL)
          v228 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v228 = v226;
        if (v228)
        {
          if (v228 >> 62)
            goto LABEL_312;
          v229 = operator new(4 * v228);
          _D4 = v313;
          a9.n128_u64[1] = v316;
          a11 = v309;
          v230 = &v229[4 * v225];
          *v230 = v216;
          v217 = (uint64_t)(v230 + 1);
          v231 = v222 - v223;
          if (v222 != v223)
          {
LABEL_265:
            v232 = v231 - 4;
            if (v232 < 0x2C)
            {
              v120 = (double *)v317;
              goto LABEL_273;
            }
            v233 = v222 - &v229[v224];
            v120 = (double *)v317;
            if (v233 < 0x20)
              goto LABEL_326;
            v234 = (v232 >> 2) + 1;
            v235 = 4 * (v234 & 0x7FFFFFFFFFFFFFF8);
            v236 = &v222[-v235];
            v230 = (_DWORD *)((char *)v230 - v235);
            v237 = (float64x2_t *)&v229[4 * v225 - 16];
            v238 = (float64x2_t *)(v222 - 16);
            v239 = v234 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              _Q1 = v238[-1];
              _Q0 = *v238;
              v237[-1] = _Q1;
              *v237 = _Q0;
              v237 -= 2;
              v238 -= 2;
              v239 -= 8;
            }
            while (v239);
            v222 = v236;
            if (v234 != (v234 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_326:
              do
              {
LABEL_273:
                v240 = *((_DWORD *)v222 - 1);
                v222 -= 4;
                *--v230 = v240;
              }
              while (v222 != v223);
            }
LABEL_274:
            v241 = &v229[4 * v228];
            v208 = v304;
            *v304 = v230;
            v304[1] = v217;
            v304[2] = v241;
            if (v223)
            {
              operator delete(v223);
              a11 = v309;
              _D4 = v313;
              a9.n128_u64[1] = v316;
            }
LABEL_252:
            v208[1] = v217;
            v207 = v320;
            v215 = *v320;
            v214 = v320[1];
LABEL_253:
            ++v216;
            v218 = (v214 - v215) >> 3;
            if (v216 >= v218)
              goto LABEL_293;
            continue;
          }
        }
        else
        {
          v229 = 0;
          v230 = (_DWORD *)(4 * v225);
          *(_DWORD *)(4 * v225) = v216;
          v217 = 4 * v225 + 4;
          v231 = v222 - v223;
          if (v222 != v223)
            goto LABEL_265;
        }
        v120 = (double *)v317;
        goto LABEL_274;
      }
      break;
    }
    *(_DWORD *)v222 = v216;
    v217 = (uint64_t)(v222 + 4);
    goto LABEL_252;
  }
  v218 = (v214 - *v207) >> 3;
LABEL_293:
  v250 = (char *)*v208;
  v249 = (char *)v208[1];
  v251 = (uint64_t)&v249[-*v208];
  v252 = v251 >> 2;
  if ((unint64_t)(v251 >> 2) < *((_QWORD *)v120 + 3))
    return 0;
  result = 0;
  if ((unint64_t)v251 >= 0xC)
  {
    _Q0.f64[0] = (double)(unint64_t)v252;
    if ((double)(unint64_t)v252 / (double)v218 >= v120[4])
    {
      a3->f64[0] = 0.0;
      a3->f64[1] = 0.0;
      _Q1.f64[0] = 0.0;
      a3[1].f64[0] = 0.0;
      v254.f64[0] = 0.0;
      v255 = 0;
      for (a9.n128_u64[0] = 0; v250 != v249; *(_QWORD *)&a3[1].f64[0] = a9.n128_u64[0])
      {
        v256 = *(_DWORD *)v250;
        v250 += 4;
        v257 = *(float64x2_t **)(*v207 + 8 * v256);
        a11.f64[0] = v257[1].f64[0];
        _Q6 = *(__n128 *)v257;
        *(_QWORD *)&v254.f64[1] = v255;
        v254 = vaddq_f64(v254, *v257);
        a9 = (__n128)vaddq_f64((float64x2_t)a9, a11);
        v255 = vextq_s8((int8x16_t)v254, (int8x16_t)v254, 8uLL).u64[0];
        *a3 = v254;
      }
      v258 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&_Q0.f64[0], 0);
      v259 = vdivq_f64((float64x2_t)a9, _Q0);
      *(_QWORD *)&v254.f64[1] = v255;
      v260 = vdivq_f64(v254, v258);
      *a3 = v260;
      a3[1].f64[0] = v259.f64[0];
      v261 = (char *)*v208;
      v262 = (char *)v208[1];
      if ((char *)*v208 == v262)
      {
        v263.f64[0] = 0.0;
        v264 = 0;
        v258.f64[0] = 0.0;
        v266.f64[0] = 0.0;
        _Q6.n128_u64[0] = 0;
      }
      else
      {
        _Q1 = (float64x2_t)vextq_s8((int8x16_t)v260, (int8x16_t)v260, 8uLL);
        v263.f64[0] = 0.0;
        v260.f64[1] = _Q1.f64[0];
        v264 = 0;
        v258.f64[0] = 0.0;
        v265.f64[0] = 0.0;
        v266.f64[0] = 0.0;
        _Q6.n128_u64[0] = 0;
        v267.f64[0] = 0.0;
        v268 = 0;
        _Q1.f64[0] = 0.0;
        do
        {
          v269 = *(_DWORD *)v261;
          v261 += 4;
          v270 = *(float64x2_t **)(*v207 + 8 * v269);
          v12.f64[0] = v270[1].f64[0];
          v12 = vsubq_f64(v12, v259);
          v271 = vsubq_f64(*v270, v260);
          v13.f64[0] = vmuld_n_f64(v12.f64[0], v271.f64[0]);
          v14.f64[0] = vmuld_lane_f64(v12.f64[0], v271, 1);
          *(_QWORD *)&v263.f64[1] = v264;
          v265.f64[1] = v266.f64[0];
          *(_QWORD *)&v267.f64[1] = v268;
          v263 = vmlaq_n_f64(v263, v271, v271.f64[0]);
          v258 = vaddq_f64(v258, v13);
          _Q6 = (__n128)vaddq_f64((float64x2_t)_Q6, v14);
          v265 = vmlaq_laneq_f64(v265, v271, v271, 1);
          v267 = vmlaq_n_f64(v267, v271, v12.f64[0]);
          _Q1 = vmlaq_f64(_Q1, v12, v12);
          v266.f64[0] = v265.f64[1];
          v264 = vextq_s8((int8x16_t)v263, (int8x16_t)v263, 8uLL).u64[0];
          v268 = vextq_s8((int8x16_t)v267, (int8x16_t)v267, 8uLL).u64[0];
        }
        while (v261 != v262);
      }
      v272 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&_Q0.f64[0], 0);
      v273 = (int8x16_t)vdivq_f64(_Q1, _Q0);
      *(_QWORD *)&v266.f64[1] = _Q6.n128_u64[0];
      v274 = (int8x16_t)vdivq_f64(v266, v272);
      *(_QWORD *)&v275 = *(_OWORD *)&vdivq_f64(v258, v272);
      *(_QWORD *)&v263.f64[1] = v264;
      v276 = (int8x16_t)vdivq_f64(v263, v272);
      v341 = 2;
      *(_QWORD *)&v272.f64[1] = v276.i64[1];
      v272.f64[0] = v275;
      v335 = (float64x2_t)v276;
      v336 = v272;
      v337 = v274;
      *(double *)v274.i64 = v275;
      v338 = v274;
      v339 = v273.i64[0];
      sub_20EB7DFF4(v335.f64, v340, v273, v274, v276, v272, v275, v258.f64[0], _Q6.n128_f64[0], v266);
      v278 = fabs(v340[0]);
      v279.f64[0] = v120[6] * fabs(v340[1]);
      result = v278 <= v279.f64[0];
      if (v278 <= v279.f64[0])
      {
        v277.f64[0] = v336.f64[0];
        v279.f64[0] = 1.0 / sqrt(v335.f64[0] * v335.f64[0] + v335.f64[1] * v335.f64[1] + v277.f64[0] * v277.f64[0]);
        v280 = vmulq_f64(v277, v279);
        v281 = vmulq_n_f64(v335, v279.f64[0]);
        _Q4 = *a3;
        _Q5 = vmulq_f64(*a3, v281);
        _D6 = v281.f64[1];
        __asm { FMLA            D5, D6, V4.D[1] }
        _Q5.f64[0] = vmlad_n_f64(_Q5.f64[0], a3[1].f64[0], v280.f64[0]);
        v279.f64[0] = 0.0;
        v285 = (int8x16_t)vcgtq_f64(v279, _Q5);
        _Q6 = (float64x2_t)vdupq_lane_s64(v285.i64[0], 0);
        v287 = (float64x2_t)vbslq_s8(v285, (int8x16_t)vnegq_f64(v280), (int8x16_t)v280);
        _Q0 = (float64x2_t)vbslq_s8((int8x16_t)_Q6, (int8x16_t)vnegq_f64(v281), (int8x16_t)v281);
        v280.f64[0] = fabs(_Q5.f64[0]);
        _Q4 = vmulq_f64(_Q0, _Q0);
        _Q5.f64[0] = _Q0.f64[1];
        __asm { FMLA            D4, D5, V0.D[1] }
        _Q4.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q4.f64[0], v287.f64[0], v287.f64[0]));
        _Q0 = vmulq_n_f64(_Q0, _Q4.f64[0]);
        _Q6.f64[0] = _Q0.f64[1];
        __asm { FMLA            D5, D6, V0.D[1] }
        *(_QWORD *)&_Q6.f64[0] = *(_OWORD *)&vmulq_f64(v287, _Q4);
        _Q6.f64[1] = -v280.f64[0];
        v291 = 1.0 / sqrt(vmlad_n_f64(_Q5.f64[0], _Q6.f64[0], _Q6.f64[0]) + v280.f64[0] * v280.f64[0]);
        *a2 = vmulq_n_f64(_Q0, v291);
        a2[1] = vmulq_n_f64(_Q6, v291);
        a2[2] = _Q0;
        a2[3].f64[0] = _Q6.f64[0];
        a2[3].f64[1] = v280.f64[0];
      }
    }
  }
  return result;
}

void sub_20EB7DF7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p)
{
  void *v41;

  if (v41)
  {
    operator delete(v41);
    if (!__p)
    {
LABEL_3:
      if (!a25)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if (!__p)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if (!a25)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a25);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EB7DFF4(double *a1, double *a2, int8x16_t a3, int8x16_t a4, int8x16_t a5, float64x2_t a6, double a7, double a8, double a9, float64x2_t a10)
{
  float64x2_t v10;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  long double v29;
  float64x2_t v30;
  float64x2_t v31;
  double v32;
  double v33;
  float64x2_t v34;
  int8x16_t v36;
  __int128 v37;
  __int128 v38;
  unint64_t v39;
  int8x16_t v40;
  int64x2_t v41;
  int8x16_t v42;
  __int128 v43;
  __int128 v44;
  float64x2_t v45;
  double v46;
  unsigned int v47;
  float64x2_t v48;
  double v49;
  float64x2_t v50;
  float64x2_t v51;
  double v52;
  double v53;
  unint64_t v54;
  float64_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v63;
  int64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  double v77;
  double v78;
  double v79;
  uint64_t v80;
  float64_t *v81;
  float64x2_t v82;
  uint64_t v83;
  float64x2_t v84;
  int8x16_t v85;
  float64x2_t v86;
  int8x16_t v87;
  uint64_t v88;
  uint64_t v89;
  float64x2_t v90;
  int8x16_t v91;
  int8x16_t v92;
  float64x2_t v93;
  int8x16_t v94;
  float64x2_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  double v99;
  double v100;
  BOOL v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  float64x2_t v107;
  int8x16_t *v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  unint64_t v113;
  double v114;
  double v116;
  int v120;
  unsigned int v121;
  double v122;
  double v123;
  double v124;
  double v126;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;
  float64x2_t v134;
  double v135;
  int8x16_t v136;
  double v137;
  double v138;
  double v139;
  float64x2_t v140;
  double v141;
  unint64_t v142;
  float64x2_t v143;
  int8x16_t v144;
  double v145;
  float64x2_t v146;
  float64x2_t v147;
  double v148;
  float64x2_t v149;
  double v161;
  double v164;
  uint64_t v165;
  uint64_t v166;
  float64_t *v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  double v176;
  float64x2_t v177;
  double v187;
  double v188;
  float64_t *v189;
  float64x2_t v190;
  int8x16_t v191;
  float64x2_t v192;
  float64x2_t v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  float64x2_t v197;
  int8x16_t v198;
  float64x2_t v199;
  int8x16_t v200;
  int8x16_t v201;
  float64x2_t v202;
  int8x16_t *v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  char v209;
  int8x16_t v210;
  int8x16_t v211;
  float64x2_t v212;
  float64x2_t v214;
  int8x16_t v215;
  float64x2_t v216;
  double v217;
  float64x2_t v218;
  float64x2_t v219;
  double v221;
  double v229;
  double v235;
  double v236;
  uint64_t v237;
  uint64_t v238;
  double v239;
  float64_t *v240;
  float64x2_t v242;
  int8x16_t v243;
  float64x2_t v244;
  float64x2_t v245;
  double v249;
  float64x2_t v250;
  double v258;
  double v260;
  float64_t *v261;
  float64x2_t v262;
  float64x2_t v263;
  float64x2_t v264;
  float64x2_t v265;
  int8x16_t v266;
  float64x2_t v267;
  int8x16_t v268;
  float64x2_t v269;
  double v270;
  float64x2_t v271;
  float64x2_t v272;
  double v274;
  double v287;
  double v288;
  uint64_t v289;
  uint64_t v290;
  float64_t *v291;
  float64x2_t v293;
  float64x2_t v294;
  float64x2_t v295;
  float64x2_t v296;
  double v300;
  float64x2_t v301;
  double v310;
  double v311;
  float64_t *v312;
  float64x2_t v313;
  float64x2_t v314;
  float64x2_t v315;
  int64x2_t v316;
  float64x2_t v317;
  float64x2_t v318;
  int8x16_t v319;
  float64x2_t v320;
  int8x16_t v321;
  int8x16_t v322;
  float64x2_t v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  int8x16_t v327;
  float64x2_t v328;
  int8x16_t v329;
  int8x16_t v330;
  float64x2_t v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  int8x16_t v335;
  float64x2_t v336;
  int8x16_t v337;
  int8x16_t v338;
  float64x2_t v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  int8x16_t v343;
  float64x2_t v344;
  int8x16_t v345;
  int8x16_t v346;
  float64x2_t v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  int8x16_t v351;
  float64x2_t v352;
  int8x16_t v353;
  int8x16_t v354;
  float64x2_t v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  int8x16_t v359;
  float64x2_t v360;
  int8x16_t v361;
  int8x16_t v362;
  float64x2_t v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  int8x16_t v367;
  float64x2_t v368;
  int8x16_t v369;
  int8x16_t v370;
  float64x2_t v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  int8x16_t v375;
  float64x2_t v376;
  int8x16_t v377;
  int8x16_t v378;
  float64x2_t v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  int8x16_t v383;
  float64x2_t v384;
  int8x16_t v385;
  int8x16_t v386;
  float64x2_t v387;
  __int128 v388;
  __int128 v389;
  __int128 v390;
  float64x2_t v391;
  double v392;
  float64x2_t v393;
  _BYTE v394[32];
  float64x2_t v395;
  double v396;

  v13 = a1[1];
  v14 = a1[2];
  v15 = a1[5];
  if (v13 != 0.0 || v14 != 0.0 || v15 != 0.0)
  {
    v20 = a1[4];
    v21 = a1[8];
    v22 = *a1 + v20 + v21;
    v23 = *a1 * v20;
    v24 = *a1 * v21 + v23 + v20 * v21 - v13 * v13 - v14 * v14 - v15 * v15;
    v25 = v22 * v22 + v24 * -3.0;
    v26 = (v13 * (v13 * v21) + v14 * (v14 * v20) + v15 * (v15 * *a1) - v23 * v21 - (v13 + v13) * v14 * v15) * 27.0
        - v22 * (v22 * v22 + v22 * v22 - v24 * 9.0);
    *(double *)a4.i64 = v25 / 9.0;
    *(double *)a3.i64 = v26 / 54.0;
    v27 = v22 / -3.0;
    if (v26 * v26 * 729.0 + v25 * (v25 * v25) * -2916.0 >= 0.0)
    {
      if (*(double *)a4.i64 < 0.0)
        *(double *)a4.i64 = 0.0;
      *(double *)a4.i64 = sqrt(*(double *)a4.i64);
      v45.f64[0] = NAN;
      v45.f64[1] = NAN;
      v34 = vnegq_f64(v45);
      _Q0 = (float64x2_t)vbslq_s8((int8x16_t)v34, a4, a3);
      v46 = _Q0.f64[0] * -2.0 - v27;
      _Q0.f64[0] = _Q0.f64[0] - v27;
      *a2 = v46;
      a2[1] = _Q0.f64[0];
      a2[2] = _Q0.f64[0];
      v34.f64[0] = _Q0.f64[0];
      if (v46 > _Q0.f64[0])
      {
        *a2 = _Q0.f64[0];
        a2[2] = v46;
        v34.f64[0] = v46;
      }
      v47 = 2 * (v34.f64[0] > _Q0.f64[0]);
      v48.f64[0] = *a1;
      v34.f64[0] = a1[1];
      v49 = a1[2];
      v50.f64[0] = a1[4];
      _Q0.f64[0] = a1[5];
      a6.f64[0] = a1[8];
      v51.f64[0] = v49;
      goto LABEL_34;
    }
    v28 = sqrt(*(double *)a4.i64);
    v29 = acos(fmax(fmin(*(double *)a3.i64 / (*(double *)a4.i64 * v28), 1.0), -1.0));
    _Q0.f64[0] = cos(v29 / 3.0);
    v32 = sqrt(fmax(1.0 - _Q0.f64[0] * _Q0.f64[0], 0.0)) * 1.73205081;
    v34.f64[0] = _Q0.f64[0] + v32;
    a6.f64[0] = _Q0.f64[0] - v32;
    v33 = v28 * -2.0 * _Q0.f64[0] - v27;
    v34.f64[0] = v28 * v34.f64[0] - v27;
    *a2 = v33;
    a2[1] = v34.f64[0];
    _Q0.f64[0] = v28 * a6.f64[0] - v27;
    a2[2] = _Q0.f64[0];
    if (v33 <= v34.f64[0])
    {
      v30.f64[0] = v33;
      v33 = v34.f64[0];
      if (v34.f64[0] <= _Q0.f64[0])
      {
LABEL_13:
        a10.f64[0] = v28 * a6.f64[0] - v27;
        _Q0.f64[0] = v33;
        if (v30.f64[0] <= v33)
        {
LABEL_14:
          v31.f64[0] = v30.f64[0];
          v30.f64[0] = _Q0.f64[0];
LABEL_26:
          v48.f64[0] = *a1;
          v34.f64[0] = a1[1];
          v51.f64[0] = a1[2];
          v50.f64[0] = a1[4];
          _Q0.f64[0] = a1[5];
          a6.f64[0] = a1[8];
          v52 = a10.f64[0] - v30.f64[0];
          v47 = a10.f64[0] - v31.f64[0] < a10.f64[0] - v30.f64[0];
          if (a10.f64[0] - v31.f64[0] < a10.f64[0] - v30.f64[0])
            v52 = a10.f64[0] - v31.f64[0];
          if (v30.f64[0] - v31.f64[0] < v52)
          {
            v47 = 2;
            v52 = v30.f64[0] - v31.f64[0];
          }
          v53 = 0.0001;
          if (a10.f64[0] > 1.0)
            v53 = a10.f64[0] * 0.0001;
          if (v52 > v53)
          {
            v48.f64[1] = a1[1];
            v142 = vextq_s8((int8x16_t)v48, (int8x16_t)v48, 8uLL).u64[0];
            if (v47 == 1)
            {
              *(_QWORD *)&v48.f64[1] = v142;
              v214.f64[1] = 0.0;
              v215.i64[0] = (uint64_t)a1[2];
              v215.i64[1] = (uint64_t)a1[1];
              v50.f64[1] = a1[5];
              v216 = vsubq_f64(v48, (float64x2_t)*(unint64_t *)&v30.f64[0]);
              _Q20 = vsubq_f64(v50, (float64x2_t)*(unint64_t *)&v30.f64[0]);
              *(_QWORD *)&v217 = *(_OWORD *)&vsubq_f64(a6, v30);
              *(_QWORD *)&v218.f64[0] = v215.i64[0];
              v218.f64[1] = v50.f64[1];
              v219 = vsubq_f64(v48, (float64x2_t)*(unint64_t *)&a10.f64[0]);
              _Q16 = vsubq_f64(v50, (float64x2_t)*(unint64_t *)&a10.f64[0]);
              *(_QWORD *)&v221 = *(_OWORD *)&vsubq_f64(a6, a10);
              _Q25 = (float64x2_t)vextq_s8(v215, (int8x16_t)_Q20, 8uLL);
              _Q24 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v216, v219.f64[0]), _Q25, v219, 1), v218, v51.f64[0]);
              _D7 = v219.f64[1];
              __asm { FMLA            D26, D7, V20.D[1] }
              _Q22 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_n_f64(v216, v34.f64[0]), _Q25, _Q16.f64[0]), v218, _Q16, 1);
              __asm { FMLA            D27, D16, V20.D[1] }
              _Q19 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v216, v51.f64[0]), _Q25, _Q0.f64[0]), v218, v221);
              __asm { FMLA            D25, D0, V20.D[1] }
              v229 = vmlad_n_f64(_Q25.f64[0], v221, v217);
              v393 = _Q24;
              *(_QWORD *)v394 = vmlad_n_f64(_D26, v51.f64[0], v217);
              *(_QWORD *)&v394[24] = vmlad_n_f64(_D27, _Q16.f64[1], v217);
              *(float64x2_t *)&v394[8] = _Q22;
              v395 = _Q19;
              _D21 = _Q24.f64[1];
              __asm { FMLA            D20, D21, V24.D[1] }
              _Q20.f64[0] = _Q20.f64[0] + *(double *)v394 * *(double *)v394;
              _Q21 = vmulq_f64(_Q22, _Q22);
              _D23 = _Q22.f64[1];
              __asm { FMLA            D21, D23, V22.D[1] }
              _Q21.f64[0] = _Q21.f64[0] + *(double *)&v394[24] * *(double *)&v394[24];
              _D23 = _Q19.f64[1];
              __asm { FMLA            D22, D23, V19.D[1] }
              v235 = _Q22.f64[0] + v229 * v229;
              if (_Q21.f64[0] <= _Q20.f64[0])
                v236 = _Q20.f64[0];
              else
                v236 = _Q21.f64[0];
              _Q20.f64[1] = _Q21.f64[0];
              v392 = v235;
              v391 = _Q20;
              v237 = 2;
              if (v235 <= v236)
                v238 = _Q21.f64[0] > _Q20.f64[0];
              else
                v238 = 2;
              v239 = v391.f64[v238];
              v396 = v229;
              _Q20.f64[0] = sqrt(v239);
              v240 = &v393.f64[3 * v238];
              _Q21.f64[0] = v240[2];
              _Q22 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&_Q20.f64[0], 0);
              v242 = vdivq_f64(*(float64x2_t *)v240, _Q22);
              v243 = (int8x16_t)vdivq_f64(_Q21, _Q20);
              *(_QWORD *)&v244.f64[0] = v243.i64[0];
              v244.f64[1] = a1[3];
              *(float64x2_t *)a1 = v242;
              *((float64x2_t *)a1 + 1) = v244;
              v244.f64[0] = *a2;
              _Q22.f64[0] = a2[1];
              v245 = vsubq_f64(v48, (float64x2_t)*(unint64_t *)a2);
              _Q23 = (int8x16_t)vsubq_f64(v50, (float64x2_t)*(unint64_t *)a2);
              *(_QWORD *)&v244.f64[0] = *(_OWORD *)&vsubq_f64(a6, v244);
              v214.f64[0] = _Q22.f64[0];
              _Q4 = vsubq_f64(v48, v214);
              _Q5 = vsubq_f64(v50, v214);
              *(_QWORD *)&v249 = *(_OWORD *)&vsubq_f64(a6, _Q22);
              v250 = (float64x2_t)vextq_s8(v215, _Q23, 8uLL);
              _Q17 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v245, _Q4.f64[0]), v250, _Q4, 1), v218, v51.f64[0]);
              _Q4.f64[0] = _Q4.f64[1];
              __asm { FMLA            D22, D4, V23.D[1] }
              _Q22.f64[0] = vmlad_n_f64(_Q22.f64[0], v51.f64[0], v244.f64[0]);
              __asm { FMLA            D7, D5, V23.D[1] }
              _Q1 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v245, v51.f64[0]), v250, _Q0.f64[0]), v218, v249);
              __asm { FMLA            D16, D0, V23.D[1] }
              v393 = _Q17;
              *(float64_t *)v394 = _Q22.f64[0];
              *(_QWORD *)&v394[24] = vmlad_n_f64(_D7, _Q5.f64[1], v244.f64[0]);
              *(float64x2_t *)&v394[8] = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_n_f64(v245, v34.f64[0]), v250, _Q5.f64[0]), v218, _Q5, 1);
              v396 = vmlad_n_f64(_D16, v249, v244.f64[0]);
              _D3 = _Q17.f64[1];
              __asm { FMLA            D0, D3, V17.D[1] }
              _Q0.f64[0] = _D0 + _Q22.f64[0] * _Q22.f64[0];
              _Q4.f64[0] = *(float64_t *)&v394[16];
              __asm { FMLA            D3, D4, V2.D[1] }
              v258 = _D3 + *(double *)&v394[24] * *(double *)&v394[24];
              _Q3 = vmulq_f64(_Q1, _Q1);
              _Q4.f64[0] = _Q1.f64[1];
              __asm { FMLA            D3, D4, V1.D[1] }
              _Q3.f64[0] = _Q3.f64[0] + v396 * v396;
              if (v258 <= _Q0.f64[0])
                v260 = _Q0.f64[0];
              else
                v260 = v258;
              _Q0.f64[1] = v258;
              v392 = _Q3.f64[0];
              v391 = _Q0;
              if (_Q3.f64[0] <= v260)
                v237 = v258 > _Q0.f64[0];
              _Q0.f64[0] = v391.f64[v237];
              v395 = _Q1;
              _Q0.f64[0] = sqrt(_Q0.f64[0]);
              v261 = &v393.f64[3 * v237];
              v262 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&_Q0.f64[0], 0);
              _Q3.f64[0] = v261[2];
              v263 = vdivq_f64(_Q3, _Q0);
              v264 = vdivq_f64(*(float64x2_t *)v261, v262);
              *(_QWORD *)&v262.f64[0] = v243.i64[0];
              v262.f64[1] = v242.f64[0];
              v265 = (float64x2_t)vextq_s8((int8x16_t)v264, (int8x16_t)v263, 8uLL);
              a1[8] = v263.f64[0];
              v263.f64[1] = v264.f64[0];
              v266 = (int8x16_t)vsubq_f64(vmulq_f64(v265, v262), vmulq_f64(v263, (float64x2_t)vextq_s8((int8x16_t)v242, v243, 8uLL)));
              *((int8x16_t *)a1 + 2) = vextq_s8(v266, (int8x16_t)vsubq_f64(vmulq_laneq_f64(v264, v242, 1), vmulq_laneq_f64(v242, v264, 1)), 8uLL);
              *((float64x2_t *)a1 + 3) = v264;
              *(float64x2_t *)a1 = v242;
              *((int64x2_t *)a1 + 1) = vzip1q_s64((int64x2_t)v243, (int64x2_t)v266);
            }
            else if (v47)
            {
              v267.f64[1] = 0.0;
              *(_QWORD *)&v48.f64[1] = v142;
              v268.i64[0] = (uint64_t)a1[2];
              v268.i64[1] = (uint64_t)a1[1];
              v269 = vsubq_f64(v48, (float64x2_t)*(unint64_t *)&v30.f64[0]);
              v50.f64[1] = a1[5];
              _Q20 = vsubq_f64(v50, (float64x2_t)*(unint64_t *)&v30.f64[0]);
              *(_QWORD *)&v270 = *(_OWORD *)&vsubq_f64(a6, v30);
              *(_QWORD *)&v271.f64[0] = v268.i64[0];
              v271.f64[1] = v50.f64[1];
              v272 = vsubq_f64(v48, (float64x2_t)*(unint64_t *)&a10.f64[0]);
              _Q16 = vsubq_f64(v50, (float64x2_t)*(unint64_t *)&a10.f64[0]);
              *(_QWORD *)&v274 = *(_OWORD *)&vsubq_f64(a6, a10);
              _Q25 = (float64x2_t)vextq_s8(v268, (int8x16_t)_Q20, 8uLL);
              _Q24 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v269, v272.f64[0]), _Q25, v272, 1), v271, v51.f64[0]);
              _D7 = v272.f64[1];
              __asm { FMLA            D26, D7, V20.D[1] }
              _Q22 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_n_f64(v269, v34.f64[0]), _Q25, _Q16.f64[0]), v271, _Q16, 1);
              __asm { FMLA            D27, D16, V20.D[1] }
              _Q19 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v269, v51.f64[0]), _Q25, _Q0.f64[0]), v271, v274);
              __asm { FMLA            D25, D0, V20.D[1] }
              v393 = _Q24;
              *(_QWORD *)v394 = vmlad_n_f64(_D26, v51.f64[0], v270);
              *(_QWORD *)&v394[24] = vmlad_n_f64(_D27, _Q16.f64[1], v270);
              *(float64x2_t *)&v394[8] = _Q22;
              v395 = _Q19;
              v396 = vmlad_n_f64(_Q25.f64[0], v274, v270);
              _D21 = _Q24.f64[1];
              __asm { FMLA            D20, D21, V24.D[1] }
              _Q20.f64[0] = _Q20.f64[0] + *(double *)v394 * *(double *)v394;
              _Q21 = vmulq_f64(_Q22, _Q22);
              _D23 = _Q22.f64[1];
              __asm { FMLA            D21, D23, V22.D[1] }
              _Q21.f64[0] = _Q21.f64[0] + *(double *)&v394[24] * *(double *)&v394[24];
              _D23 = _Q19.f64[1];
              __asm { FMLA            D22, D23, V19.D[1] }
              v287 = _Q22.f64[0] + v396 * v396;
              if (_Q21.f64[0] <= _Q20.f64[0])
                v288 = _Q20.f64[0];
              else
                v288 = _Q21.f64[0];
              _Q20.f64[1] = _Q21.f64[0];
              v392 = v287;
              v391 = _Q20;
              v289 = 2;
              if (v287 <= v288)
                v290 = _Q21.f64[0] > _Q20.f64[0];
              else
                v290 = 2;
              _Q20.f64[0] = sqrt(v391.f64[v290]);
              v291 = &v393.f64[3 * v290];
              _Q21.f64[0] = v291[2];
              _Q22 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&_Q20.f64[0], 0);
              v293 = vdivq_f64(*(float64x2_t *)v291, _Q22);
              v294 = vdivq_f64(_Q21, _Q20);
              v295.f64[0] = v294.f64[0];
              v295.f64[1] = a1[3];
              *(float64x2_t *)a1 = v293;
              *((float64x2_t *)a1 + 1) = v295;
              v295.f64[0] = a2[2];
              _Q22.f64[0] = *a2;
              v296 = vsubq_f64(v48, (float64x2_t)*(unint64_t *)&v295.f64[0]);
              _Q23 = (int8x16_t)vsubq_f64(v50, (float64x2_t)*(unint64_t *)&v295.f64[0]);
              *(_QWORD *)&v295.f64[0] = *(_OWORD *)&vsubq_f64(a6, v295);
              v267.f64[0] = *a2;
              _Q4 = vsubq_f64(v48, v267);
              _Q5 = vsubq_f64(v50, v267);
              *(_QWORD *)&v300 = *(_OWORD *)&vsubq_f64(a6, _Q22);
              v301 = (float64x2_t)vextq_s8(v268, _Q23, 8uLL);
              _Q17 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v296, _Q4.f64[0]), v301, _Q4, 1), v271, v51.f64[0]);
              _Q4.f64[0] = _Q4.f64[1];
              __asm { FMLA            D22, D4, V23.D[1] }
              _Q2 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_n_f64(v296, v34.f64[0]), v301, _Q5.f64[0]), v271, _Q5, 1);
              __asm
              {
                FMLA            D7, D5, V23.D[1]
                FMLA            D16, D0, V23.D[1]
              }
              v393 = _Q17;
              *(_QWORD *)v394 = vmlad_n_f64(_Q22.f64[0], v51.f64[0], v295.f64[0]);
              *(_QWORD *)&v394[24] = vmlad_n_f64(_D7, _Q5.f64[1], v295.f64[0]);
              *(float64x2_t *)&v394[8] = _Q2;
              v396 = vmlad_n_f64(_D16, v300, v295.f64[0]);
              v395 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v296, v51.f64[0]), v301, _Q0.f64[0]), v271, v300);
              _D3 = _Q17.f64[1];
              __asm { FMLA            D0, D3, V17.D[1] }
              _Q0.f64[0] = _D0 + *(double *)v394 * *(double *)v394;
              _Q4.f64[0] = _Q2.f64[1];
              __asm { FMLA            D3, D4, V2.D[1] }
              _Q2.f64[0] = _D3 + *(double *)&v394[24] * *(double *)&v394[24];
              _Q4.f64[0] = v395.f64[1];
              __asm { FMLA            D3, D4, V1.D[1] }
              v310 = _D3 + v396 * v396;
              if (_Q2.f64[0] <= _Q0.f64[0])
                v311 = _Q0.f64[0];
              else
                v311 = _Q2.f64[0];
              _Q0.f64[1] = _Q2.f64[0];
              v392 = v310;
              v391 = _Q0;
              if (v310 <= v311)
                v289 = _Q2.f64[0] > _Q0.f64[0];
              _Q0.f64[0] = sqrt(v391.f64[v289]);
              v312 = &v393.f64[3 * v289];
              _Q2.f64[0] = v312[2];
              v313 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&_Q0.f64[0], 0);
              v314 = vdivq_f64(_Q2, _Q0);
              v315 = vdivq_f64(*(float64x2_t *)v312, v313);
              v316 = vzip1q_s64((int64x2_t)v294, (int64x2_t)v315);
              v317 = (float64x2_t)vextq_s8((int8x16_t)v293, (int8x16_t)v294, 8uLL);
              v294.f64[1] = v293.f64[0];
              v318 = (float64x2_t)vextq_s8((int8x16_t)v315, (int8x16_t)v314, 8uLL);
              v314.f64[1] = v315.f64[0];
              *(float64x2_t *)a1 = v293;
              *((int64x2_t *)a1 + 1) = v316;
              *((_QWORD *)a1 + 8) = *(_OWORD *)&vsubq_f64(vmulq_laneq_f64(v293, v315, 1), vmulq_laneq_f64(v315, v293, 1));
              *((float64x2_t *)a1 + 2) = v318;
              *((float64x2_t *)a1 + 3) = vsubq_f64(vmulq_f64(v314, v317), vmulq_f64(v318, v294));
            }
            else
            {
              *(_QWORD *)&v48.f64[1] = v142;
              v143 = vsubq_f64(v48, (float64x2_t)*(unint64_t *)&a10.f64[0]);
              v144.i64[0] = (uint64_t)a1[2];
              v144.i64[1] = (uint64_t)a1[1];
              v50.f64[1] = a1[5];
              _Q19 = vsubq_f64(v50, (float64x2_t)*(unint64_t *)&a10.f64[0]);
              *(_QWORD *)&v145 = *(_OWORD *)&vsubq_f64(a6, a10);
              *(_QWORD *)&v146.f64[0] = v144.i64[0];
              v146.f64[1] = v50.f64[1];
              v147 = vsubq_f64(v48, (float64x2_t)*(unint64_t *)&v31.f64[0]);
              _Q22 = vsubq_f64(v50, (float64x2_t)*(unint64_t *)&v31.f64[0]);
              *(_QWORD *)&v148 = *(_OWORD *)&vsubq_f64(a6, v31);
              v149 = (float64x2_t)vextq_s8(v144, (int8x16_t)_Q19, 8uLL);
              _Q24 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v143, v147.f64[0]), v149, v147, 1), v146, v51.f64[0]);
              _D7 = v147.f64[1];
              __asm { FMLA            D25, D7, V19.D[1] }
              _Q21 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_n_f64(v143, v34.f64[0]), v149, _Q22.f64[0]), v146, _Q22, 1);
              __asm { FMLA            D26, D22, V19.D[1] }
              _Q18 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v143, v51.f64[0]), v149, _Q0.f64[0]), v146, v148);
              __asm { FMLA            D22, D0, V19.D[1] }
              _Q22.f64[0] = vmlad_n_f64(_Q22.f64[0], v148, v145);
              v393 = _Q24;
              *(_QWORD *)v394 = vmlad_n_f64(_D25, v51.f64[0], v145);
              *(_QWORD *)&v394[24] = vmlad_n_f64(_D26, _Q22.f64[1], v145);
              *(float64x2_t *)&v394[8] = _Q21;
              v395 = _Q18;
              v396 = _Q22.f64[0];
              _D20 = _Q24.f64[1];
              __asm { FMLA            D19, D20, V24.D[1] }
              _Q19.f64[0] = _Q19.f64[0] + *(double *)v394 * *(double *)v394;
              _D23 = _Q21.f64[1];
              __asm { FMLA            D20, D23, V21.D[1] }
              v161 = _D20 + *(double *)&v394[24] * *(double *)&v394[24];
              _D23 = _Q18.f64[1];
              __asm { FMLA            D21, D23, V18.D[1] }
              if (v161 <= _Q19.f64[0])
                v164 = _Q19.f64[0];
              else
                v164 = v161;
              _Q19.f64[1] = v161;
              v392 = _D21 + _Q22.f64[0] * _Q22.f64[0];
              v391 = _Q19;
              v165 = 2;
              if (v392 <= v164)
                v166 = v161 > _Q19.f64[0];
              else
                v166 = 2;
              _Q18.f64[0] = sqrt(v391.f64[v166]);
              v167 = &v393.f64[3 * v166];
              _Q19.f64[0] = v167[2];
              v168 = vdivq_f64(_Q19, _Q18);
              v169 = vdivq_f64(*(float64x2_t *)v167, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&_Q18.f64[0], 0));
              v170 = (float64x2_t)vzip1q_s64(*(int64x2_t *)(a1 + 2), (int64x2_t)v169);
              v171 = (float64x2_t)vextq_s8((int8x16_t)v169, (int8x16_t)v168, 8uLL);
              *((float64x2_t *)a1 + 1) = v170;
              *((float64x2_t *)a1 + 2) = v171;
              v170.f64[0] = *a2;
              _Q22.f64[0] = a2[1];
              v172 = vsubq_f64(v48, (float64x2_t)*(unint64_t *)a2);
              _Q23 = (int8x16_t)vsubq_f64(v50, (float64x2_t)*(unint64_t *)a2);
              *(_QWORD *)&v170.f64[0] = *(_OWORD *)&vsubq_f64(a6, v170);
              _Q4 = vsubq_f64(v48, (float64x2_t)*(unint64_t *)&_Q22.f64[0]);
              _Q5 = vsubq_f64(v50, (float64x2_t)*(unint64_t *)&_Q22.f64[0]);
              *(_QWORD *)&v176 = *(_OWORD *)&vsubq_f64(a6, _Q22);
              v177 = (float64x2_t)vextq_s8(v144, _Q23, 8uLL);
              _Q22 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v172, _Q4.f64[0]), v177, _Q4, 1), v146, v51.f64[0]);
              _Q4.f64[0] = _Q4.f64[1];
              __asm { FMLA            D24, D4, V23.D[1] }
              _Q2 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_n_f64(v172, v34.f64[0]), v177, _Q5.f64[0]), v146, _Q5, 1);
              __asm
              {
                FMLA            D7, D5, V23.D[1]
                FMLA            D16, D0, V23.D[1]
              }
              v393 = _Q22;
              *(_QWORD *)v394 = vmlad_n_f64(_D24, v51.f64[0], v170.f64[0]);
              *(_QWORD *)&v394[24] = vmlad_n_f64(_D7, _Q5.f64[1], v170.f64[0]);
              *(float64x2_t *)&v394[8] = _Q2;
              v396 = vmlad_n_f64(_D16, v176, v170.f64[0]);
              v395 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v172, v51.f64[0]), v177, _Q0.f64[0]), v146, v176);
              _D3 = _Q22.f64[1];
              __asm { FMLA            D0, D3, V22.D[1] }
              _Q0.f64[0] = _D0 + *(double *)v394 * *(double *)v394;
              _Q4.f64[0] = _Q2.f64[1];
              __asm { FMLA            D3, D4, V2.D[1] }
              _Q2.f64[0] = _D3 + *(double *)&v394[24] * *(double *)&v394[24];
              _Q4.f64[0] = v395.f64[1];
              __asm { FMLA            D3, D4, V1.D[1] }
              v187 = _D3 + v396 * v396;
              if (_Q2.f64[0] <= _Q0.f64[0])
                v188 = _Q0.f64[0];
              else
                v188 = _Q2.f64[0];
              _Q0.f64[1] = _Q2.f64[0];
              v392 = v187;
              v391 = _Q0;
              if (v187 <= v188)
                v165 = _Q2.f64[0] > _Q0.f64[0];
              _Q0.f64[0] = sqrt(v391.f64[v165]);
              v189 = &v393.f64[3 * v165];
              _Q2.f64[0] = v189[2];
              v190 = vdivq_f64(*(float64x2_t *)v189, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&_Q0.f64[0], 0));
              v191 = (int8x16_t)vdivq_f64(_Q2, _Q0);
              *(_QWORD *)&v192.f64[0] = v191.i64[0];
              v192.f64[1] = v190.f64[0];
              v168.f64[1] = v169.f64[0];
              a1[8] = *(double *)v191.i64;
              *((float64x2_t *)a1 + 2) = v171;
              *((float64x2_t *)a1 + 3) = v190;
              *(float64x2_t *)a1 = vsubq_f64(vmulq_f64(v171, v192), vmulq_f64(v168, (float64x2_t)vextq_s8((int8x16_t)v190, v191, 8uLL)));
              *((int64x2_t *)a1 + 1) = vzip1q_s64((int64x2_t)vsubq_f64(vmulq_laneq_f64(v169, v190, 1), vmulq_laneq_f64(v190, v169, 1)), (int64x2_t)v169);
            }
            return 1;
          }
          v49 = a1[2];
LABEL_34:
          a10.f64[0] = a2[v47];
          v54 = *(_QWORD *)&a10.f64[0];
          v55 = v51.f64[0];
          _Q17.f64[1] = _Q0.f64[0];
          v56 = vsubq_f64(a6, a10);
          v57.f64[0] = v50.f64[0];
          v57.f64[1] = _Q0.f64[0];
          *(double *)_Q19.i64 = v49;
          _Q19.i64[1] = *(_QWORD *)&v34.f64[0];
          v59 = vsubq_f64(v57, (float64x2_t)v54);
          v60.f64[0] = v48.f64[0];
          v60.f64[1] = v34.f64[0];
          v61 = vsubq_f64(v60, (float64x2_t)v54);
          _Q20 = (float64x2_t)vextq_s8((int8x16_t)v61, _Q19, 8uLL);
          v63 = (float64x2_t)vzip2q_s64((int64x2_t)v59, (int64x2_t)_Q19);
          _Q19.i64[1] = *(_QWORD *)&v61.f64[0];
          _Q22 = vmlsq_f64(vmulq_f64(v63, _Q20), v59, (float64x2_t)_Q19);
          v65 = (int64x2_t)vmlsq_laneq_f64(vmulq_f64(v59, v61), v34, v61, 1);
          v66 = (float64x2_t)vextq_s8((int8x16_t)_Q17, (int8x16_t)v56, 8uLL);
          v56.f64[1] = v51.f64[0];
          v67 = vmulq_f64(v59, v56);
          _Q26 = vmulq_f64(v34, _Q0);
          _Q21 = (int8x16_t)vsubq_f64(v67, vmulq_f64(v63, v66));
          _Q18 = (int8x16_t)vsubq_f64(_Q26, vmulq_f64(v59, _Q17));
          _Q7 = vsubq_f64(vmulq_f64(v66, (float64x2_t)_Q19), vmulq_f64(v56, _Q20));
          *(_QWORD *)&v396 = *(_OWORD *)&vsubq_f64(vmulq_laneq_f64(_Q17, v61, 1), vmulq_f64(_Q0, v61));
          *(int8x16_t *)&v394[16] = vextq_s8(_Q21, _Q18, 8uLL);
          v395 = _Q7;
          v393 = _Q22;
          *(int64x2_t *)v394 = vzip1q_s64(v65, (int64x2_t)_Q21);
          _Q19.i64[0] = *(_QWORD *)&_Q22.f64[1];
          __asm { FMLA            D17, D19, V22.D[1] }
          _Q17.f64[0] = vmlad_n_f64(_Q17.f64[0], *(double *)v65.i64, *(double *)v65.i64);
          *(_QWORD *)&_Q20.f64[0] = _Q21.i64[1];
          __asm { FMLA            D19, D20, V21.D[1] }
          v77 = vmlad_n_f64(*(double *)_Q19.i64, *(double *)_Q18.i64, *(double *)_Q18.i64);
          _Q20.f64[0] = _Q7.f64[1];
          __asm { FMLA            D18, D20, V7.D[1] }
          v78 = vmlad_n_f64(*(double *)_Q18.i64, v396, v396);
          if (v77 <= _Q17.f64[0])
            v79 = _Q17.f64[0];
          else
            v79 = v77;
          _Q17.f64[1] = v77;
          v392 = v78;
          v391 = _Q17;
          v80 = v77 > _Q17.f64[0];
          if (v78 > v79)
            v80 = 2;
          _Q7.f64[0] = sqrt(v391.f64[v80]);
          v81 = &v393.f64[3 * v80];
          _Q17.f64[0] = v81[2];
          v82 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&_Q7.f64[0], 0);
          v83 = *(_OWORD *)&vdivq_f64(_Q17, _Q7);
          v84 = vdivq_f64(*(float64x2_t *)v81, v82);
          _Q17.f64[0] = a1[8];
          v85 = *(int8x16_t *)a1;
          v86 = *(float64x2_t *)(a1 + 2);
          v87 = *(int8x16_t *)(a1 + 4);
          v88 = 3 * v47;
          v386 = *(int8x16_t *)(a1 + 6);
          v385 = v87;
          v384 = v86;
          v383 = v85;
          v387 = _Q17;
          v383.i64[v88] = *(_QWORD *)&v84.f64[0];
          v107.f64[1] = *((float64_t *)&v390 + 1);
          v381 = v389;
          v382 = v390;
          v379 = v387;
          v380 = v388;
          v377 = v385;
          v378 = v386;
          v375 = v383;
          v376 = v384;
          v375.i64[((_BYTE)v88 + 1) & 0xF] = *(_QWORD *)&v84.f64[1];
          v89 = v88 + 2;
          v373 = v381;
          v374 = v382;
          v371 = v379;
          v372 = v380;
          v369 = v377;
          v370 = v378;
          v367 = v375;
          v368 = v376;
          v367.i64[(v88 + 2) & 0xF] = v83;
          v91 = v370;
          v90 = v371;
          v93 = v368;
          v92 = v369;
          v94 = v367;
          v95 = (float64x2_t)vextq_s8(v91, v91, 8uLL);
          v96 = vextq_s8(v92, v92, 8uLL).u64[0];
          v97 = vextq_s8((int8x16_t)v93, (int8x16_t)v93, 8uLL).u64[0];
          v98 = vextq_s8(v94, v94, 8uLL).u64[0];
          *(int8x16_t *)a1 = v367;
          *((float64x2_t *)a1 + 1) = v93;
          *((int8x16_t *)a1 + 2) = v92;
          *((int8x16_t *)a1 + 3) = v91;
          a1[8] = v90.f64[0];
          v107.f64[0] = a1[3 * v47];
          v99 = a1[3 * v47 + 1];
          v100 = a1[3 * v47 + 2];
          v101 = fabs(v107.f64[0]) <= fabs(v99);
          v102 = sqrt(v99 * v99 + v100 * v100);
          v103 = v100 / v102;
          v104 = -v99 / v102;
          _Q26.f64[0] = 0.0;
          v105 = sqrt(v107.f64[0] * v107.f64[0] + v100 * v100);
          v106 = -v100 / v105;
          v107.f64[0] = v107.f64[0] / v105;
          if (v101)
            v67.f64[0] = 0.0;
          else
            v67.f64[0] = v106;
          if (v101)
          {
            _Q26.f64[0] = v103;
            v107.f64[0] = v104;
          }
          v108 = (int8x16_t *)&a1[3 * v47];
          v10.f64[0] = a1[v89];
          v109 = (float64x2_t)vextq_s8(*v108, (int8x16_t)v10, 8uLL);
          *(_QWORD *)&v10.f64[1] = v108->i64[0];
          v110.f64[0] = _Q26.f64[0];
          v110.f64[1] = v107.f64[0];
          v111.f64[0] = v107.f64[0];
          v111.f64[1] = v67.f64[0];
          _Q28 = vmlsq_f64(vmulq_f64(v111, v109), v110, v10);
          v113 = vextq_s8((int8x16_t)_Q28, (int8x16_t)_Q28, 8uLL).u64[0];
          *(_QWORD *)&v114 = *(_OWORD *)&vmlsq_laneq_f64(vmulq_f64(_Q26, *(float64x2_t *)v108), v67, *(float64x2_t *)v108, 1);
          v51.f64[1] = _Q0.f64[0];
          v48.f64[1] = v34.f64[0];
          v34.f64[1] = v50.f64[0];
          _Q30 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v48, v67.f64[0]), v34, _Q26.f64[0]), v51, v107.f64[0]);
          v116 = v49 * v67.f64[0] + _Q0.f64[0] * _Q26.f64[0] + a6.f64[0] * v107.f64[0];
          _Q4 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v48, _Q28.f64[0]), v34, _Q28, 1), v51, v114);
          __asm { FMLA            D1, D0, V28.D[1] }
          _Q1.f64[0] = vmlad_n_f64(_Q1.f64[0], a6.f64[0], v114);
          __asm { FMLA            D0, D26, V30.D[1] }
          if (v47 > 1)
            v120 = -2;
          else
            v120 = 1;
          v121 = v120 + v47;
          v122 = a2[v121];
          v123 = _D0 + v107.f64[0] * v116;
          v124 = v123 - v122;
          __asm { FMLA            D3, D26, V4.D[1] }
          v126 = _D3 + v107.f64[0] * _Q1.f64[0];
          _D4 = _Q4.f64[1];
          __asm { FMLA            D3, D4, V28.D[1] }
          v129 = vmlad_n_f64(_D3, _Q1.f64[0], v114);
          v130 = v129 - v122;
          v131 = vabdd_f64(v123, v122);
          v132 = fabs(v126);
          v133 = vabdd_f64(v129, v122);
          if (v131 < v133)
            v134.f64[0] = v67.f64[0];
          else
            v134.f64[0] = _Q28.f64[0];
          if (v131 < v133)
            v135 = _Q26.f64[0];
          else
            v135 = *(double *)&v113;
          if (v131 < v133)
            a6.f64[0] = v107.f64[0];
          else
            a6.f64[0] = v114;
          if (v131 < v133)
            *(double *)v136.i64 = _Q28.f64[0];
          else
            *(double *)v136.i64 = v67.f64[0];
          if (v131 < v133)
            v137 = *(double *)&v113;
          else
            v137 = _Q26.f64[0];
          if (v131 < v133)
            _Q0.f64[0] = v114;
          else
            _Q0.f64[0] = v107.f64[0];
          if (v131 < v133)
            v138 = v130;
          else
            v138 = v124;
          if (v131 < v133)
            v139 = v133;
          else
            v139 = v131;
          if (v132 + v139 > 0.0)
          {
            if (v139 >= v132)
            {
              v140.f64[0] = v134.f64[0];
              v141 = v135;
              v107.f64[0] = a6.f64[0];
              *(_QWORD *)&v134.f64[0] = v136.i64[0];
              v135 = v137;
              a6.f64[0] = _Q0.f64[0];
              _Q0.f64[0] = v138;
              v138 = v126;
            }
            else
            {
              *(_QWORD *)&v140.f64[0] = v136.i64[0];
              v141 = v137;
              v107.f64[0] = _Q0.f64[0];
              _Q0.f64[0] = v126;
            }
            _Q0.f64[0] = v138 / _Q0.f64[0];
            _Q1.f64[0] = 1.0 / sqrt(_Q0.f64[0] * _Q0.f64[0] + 1.0);
            _Q0.f64[0] = _Q0.f64[0] * _Q1.f64[0];
            v134.f64[1] = v135;
            v193 = vmulq_n_f64(v134, _Q0.f64[0]);
            v140.f64[1] = v141;
            *(_QWORD *)&_Q0.f64[0] = *(_OWORD *)&vsubq_f64(vmulq_f64(a6, _Q0), vmulq_f64(v107, _Q1));
            v136 = (int8x16_t)vsubq_f64(v193, vmulq_n_f64(v140, _Q1.f64[0]));
            *(_QWORD *)&v137 = vextq_s8(v136, v136, 8uLL).u64[0];
          }
          v94.i64[1] = v98;
          *(_QWORD *)&v93.f64[1] = v97;
          v359 = v94;
          v360 = v93;
          v92.i64[1] = v96;
          v91.i64[1] = *(_QWORD *)&v95.f64[0];
          v361 = v92;
          v362 = v91;
          v363 = v90;
          v359.i64[(3 * (_BYTE)v121) & 0xF] = v136.i64[0];
          v357 = v365;
          v358 = v366;
          v355 = v363;
          v356 = v364;
          v353 = v361;
          v354 = v362;
          v351 = v359;
          v352 = v360;
          *(double *)&v351.i64[(3 * (_BYTE)v121 + 1) & 0xF] = v137;
          v349 = v357;
          v350 = v358;
          v347 = v355;
          v348 = v356;
          v345 = v353;
          v346 = v354;
          v343 = v351;
          v344 = v352;
          v343.i64[(3 * (_BYTE)v121 + 2) & 0xF] = *(_QWORD *)&_Q0.f64[0];
          v194 = v349;
          v195 = v350;
          v197 = v347;
          v196 = v348;
          v198 = v343;
          v199 = v344;
          v200 = v345;
          v201 = v346;
          *((int8x16_t *)a1 + 2) = v345;
          *((int8x16_t *)a1 + 3) = v201;
          *(int8x16_t *)a1 = v198;
          *((float64x2_t *)a1 + 1) = v199;
          a1[8] = v197.f64[0];
          v202 = *(float64x2_t *)v108;
          v203 = (int8x16_t *)&a1[3 * v121];
          *(_QWORD *)&v95.f64[0] = v203[1].i64[0];
          v93.f64[0] = a1[v89];
          v204 = (float64x2_t)vextq_s8(*v203, (int8x16_t)v95, 8uLL);
          *(_QWORD *)&v95.f64[1] = v203->i64[0];
          v205 = vmulq_f64((float64x2_t)vextq_s8((int8x16_t)v202, (int8x16_t)v93, 8uLL), v95);
          v206 = vmulq_laneq_f64(v202, *(float64x2_t *)v203, 1);
          v93.f64[1] = v202.f64[0];
          v207 = vmulq_laneq_f64(*(float64x2_t *)v203, v202, 1);
          v208 = vsubq_f64(v205, vmulq_f64(v93, v204));
          if (v47)
            v209 = 3 * v47 - 3;
          else
            v209 = 6;
          v341 = v194;
          v342 = v195;
          v339 = v197;
          v340 = v196;
          v337 = v200;
          v338 = v201;
          v335 = v198;
          v336 = v199;
          v335.i64[v209 & 0xF] = *(_QWORD *)&v208.f64[0];
          v333 = v341;
          v334 = v342;
          v331 = v339;
          v332 = v340;
          v329 = v337;
          v330 = v338;
          v327 = v335;
          v328 = v336;
          v327.i64[(v209 + 1) & 0xF] = *(_QWORD *)&v208.f64[1];
          v325 = v333;
          v326 = v334;
          v323 = v331;
          v324 = v332;
          v321 = v329;
          v322 = v330;
          v319 = v327;
          v320 = v328;
          v319.i64[(v209 + 2) & 0xF] = *(_OWORD *)&vsubq_f64(v206, v207);
          v210 = v321;
          v211 = v322;
          v212 = v320;
          *(int8x16_t *)a1 = v319;
          a1[8] = v323.f64[0];
          *((int8x16_t *)a1 + 2) = v210;
          *((int8x16_t *)a1 + 3) = v211;
          *((float64x2_t *)a1 + 1) = v212;
          return 1;
        }
LABEL_25:
        *a2 = _Q0.f64[0];
        a2[1] = v30.f64[0];
        v31.f64[0] = _Q0.f64[0];
        goto LABEL_26;
      }
    }
    else
    {
      *a2 = v34.f64[0];
      a2[1] = v33;
      v30.f64[0] = v34.f64[0];
      if (v33 <= _Q0.f64[0])
        goto LABEL_13;
    }
    a2[1] = _Q0.f64[0];
    a2[2] = v33;
    a10.f64[0] = v33;
    if (v30.f64[0] <= _Q0.f64[0])
      goto LABEL_14;
    goto LABEL_25;
  }
  if (a1 != a2)
  {
    *a2 = *a1;
    a2[1] = a1[4];
    a2[2] = a1[8];
  }
  a1[7] = 0.0;
  *(_OWORD *)(a1 + 3) = 0u;
  *(_OWORD *)(a1 + 5) = 0u;
  *(_OWORD *)(a1 + 1) = 0u;
  *a1 = 1.0;
  a1[4] = 1.0;
  a1[8] = 1.0;
  v17 = *a2;
  v16 = a2[1];
  if (*a2 > v16)
  {
    *a2 = v16;
    a2[1] = v17;
    v36 = *(int8x16_t *)(a1 + 4);
    *(_QWORD *)&v37 = vdupq_laneq_s64((int64x2_t)v36, 1).u64[0];
    *((double *)&v37 + 1) = *a1;
    a5 = *(int8x16_t *)(a1 + 1);
    *(int8x16_t *)a1 = vextq_s8(*(int8x16_t *)(a1 + 2), v36, 8uLL);
    *((_OWORD *)a1 + 1) = v37;
    *((int8x16_t *)a1 + 2) = a5;
    v16 = a2[1];
    v18 = a2[2];
    if (v16 <= v18)
    {
LABEL_8:
      v19 = *a2;
      if (*a2 <= v16)
        return 1;
      goto LABEL_17;
    }
  }
  else
  {
    v18 = a2[2];
    if (v16 <= v18)
      goto LABEL_8;
  }
  a2[1] = v18;
  a2[2] = v16;
  v38 = *(_OWORD *)(a1 + 3);
  v39 = *((_QWORD *)a1 + 5);
  a5.i64[0] = (uint64_t)a1[8];
  v40 = *(int8x16_t *)(a1 + 6);
  v41 = vzip1q_s64(*(int64x2_t *)(a1 + 2), (int64x2_t)v40);
  *((int8x16_t *)a1 + 2) = vextq_s8(v40, a5, 8uLL);
  *((_OWORD *)a1 + 3) = v38;
  *((_QWORD *)a1 + 8) = v39;
  *((int64x2_t *)a1 + 1) = v41;
  v19 = *a2;
  v16 = a2[1];
  if (*a2 > v16)
  {
LABEL_17:
    *a2 = v16;
    a2[1] = v19;
    v42 = *(int8x16_t *)(a1 + 4);
    *(_QWORD *)&v43 = vdupq_laneq_s64((int64x2_t)v42, 1).u64[0];
    *((double *)&v43 + 1) = *a1;
    v44 = *(_OWORD *)(a1 + 1);
    *(int8x16_t *)a1 = vextq_s8(*(int8x16_t *)(a1 + 2), v42, 8uLL);
    *((_OWORD *)a1 + 1) = v43;
    *((_OWORD *)a1 + 2) = v44;
  }
  return 1;
}

uint64_t sub_20EB7F0E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v3;
  double v4;
  double v5;
  __int128 *v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;

  v3 = *(double *)a2;
  v4 = *(double *)a1;
  v5 = *(double *)a3;
  if (*(double *)a2 < *(double *)a1)
  {
    v6 = (__int128 *)(a1 + 8);
    v7 = (__int128 *)(a1 + 40);
    if (v5 < v3)
    {
      v34 = *v6;
      v39 = *(_OWORD *)(a1 + 24);
      v27 = *v7;
      v8 = *(_QWORD *)(a1 + 56);
      v9 = *(_QWORD *)(a1 + 64);
      *(double *)a1 = v5;
      v10 = *(_OWORD *)(a3 + 24);
      *v6 = *(_OWORD *)(a3 + 8);
      *(_OWORD *)(a1 + 24) = v10;
      v11 = *(_QWORD *)(a3 + 56);
      *v7 = *(_OWORD *)(a3 + 40);
      *(_QWORD *)(a1 + 56) = v11;
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a3 + 64);
      *(double *)a3 = v4;
      *(_OWORD *)(a3 + 8) = v34;
      *(_OWORD *)(a3 + 24) = v39;
      *(_OWORD *)(a3 + 40) = v27;
      *(_QWORD *)(a3 + 56) = v8;
      *(_QWORD *)(a3 + 64) = v9;
      return 1;
    }
    v37 = *v6;
    v42 = *(_OWORD *)(a1 + 24);
    v30 = *v7;
    v20 = *(_QWORD *)(a1 + 56);
    v21 = *(_QWORD *)(a1 + 64);
    *(double *)a1 = v3;
    v22 = *(_OWORD *)(a2 + 24);
    *v6 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = v22;
    v23 = *(_QWORD *)(a2 + 56);
    *v7 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = v23;
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(double *)a2 = v4;
    *(_OWORD *)(a2 + 8) = v37;
    *(_OWORD *)(a2 + 24) = v42;
    *(_OWORD *)(a2 + 40) = v30;
    *(_QWORD *)(a2 + 56) = v20;
    *(_QWORD *)(a2 + 64) = v21;
    if (*(double *)a3 < v4)
    {
      v38 = *(_OWORD *)(a2 + 8);
      v43 = *(_OWORD *)(a2 + 24);
      v31 = *(_OWORD *)(a2 + 40);
      v24 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)a2 = *(_QWORD *)a3;
      v25 = *(_OWORD *)(a3 + 24);
      *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
      *(_OWORD *)(a2 + 24) = v25;
      v26 = *(_QWORD *)(a3 + 56);
      *(_OWORD *)(a2 + 40) = *(_OWORD *)(a3 + 40);
      *(_QWORD *)(a2 + 56) = v26;
      *(_QWORD *)(a2 + 64) = *(_QWORD *)(a3 + 64);
      *(double *)a3 = v4;
      *(_OWORD *)(a3 + 8) = v38;
      *(_OWORD *)(a3 + 24) = v43;
      *(_OWORD *)(a3 + 40) = v31;
      *(_QWORD *)(a3 + 56) = v24;
      *(_QWORD *)(a3 + 64) = v21;
      return 2;
    }
    return 1;
  }
  if (v5 < v3)
  {
    v35 = *(_OWORD *)(a2 + 8);
    v40 = *(_OWORD *)(a2 + 24);
    v28 = *(_OWORD *)(a2 + 40);
    v32 = *(_QWORD *)(a2 + 56);
    v13 = *(_QWORD *)(a2 + 64);
    *(double *)a2 = v5;
    v14 = *(_OWORD *)(a3 + 8);
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
    *(_OWORD *)(a2 + 8) = v14;
    v15 = *(_QWORD *)(a3 + 56);
    *(_OWORD *)(a2 + 40) = *(_OWORD *)(a3 + 40);
    *(_QWORD *)(a2 + 56) = v15;
    *(_QWORD *)(a2 + 64) = *(_QWORD *)(a3 + 64);
    *(double *)a3 = v3;
    *(_OWORD *)(a3 + 8) = v35;
    *(_OWORD *)(a3 + 24) = v40;
    *(_OWORD *)(a3 + 40) = v28;
    *(_QWORD *)(a3 + 56) = v32;
    *(_QWORD *)(a3 + 64) = v13;
    v16 = *(double *)a1;
    if (*(double *)a2 < *(double *)a1)
    {
      v36 = *(_OWORD *)(a1 + 8);
      v41 = *(_OWORD *)(a1 + 24);
      v29 = *(_OWORD *)(a1 + 40);
      v33 = *(_QWORD *)(a1 + 56);
      v17 = *(_QWORD *)(a1 + 64);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v18 = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 8) = v18;
      v19 = *(_QWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 56) = v19;
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(double *)a2 = v16;
      *(_OWORD *)(a2 + 8) = v36;
      *(_OWORD *)(a2 + 24) = v41;
      *(_OWORD *)(a2 + 40) = v29;
      *(_QWORD *)(a2 + 56) = v33;
      *(_QWORD *)(a2 + 64) = v17;
      return 2;
    }
    return 1;
  }
  return 0;
}

double sub_20EB7F384(uint64_t a1, unint64_t a2, uint64_t a3, char a4, double result)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  double v26;
  unint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  double v31;
  double v32;
  __int128 v33;
  __int128 v34;
  BOOL v35;
  double v36;
  unint64_t v37;
  unint64_t v38;
  double v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  double v45;
  double v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  unint64_t v52;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  int64_t v64;
  int64_t v65;
  BOOL v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  double v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  int64_t v78;
  uint64_t v79;
  double v80;
  unint64_t v81;
  __int128 v82;
  __int128 v83;
  unint64_t v84;
  uint64_t v85;
  int64_t v86;
  __int128 *v87;
  __int128 *v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  double v94;
  uint64_t v95;
  unint64_t v96;
  __int128 v97;
  __int128 v98;
  double *v99;
  uint64_t v100;
  uint64_t v101;
  double v102;
  double *v103;
  double *v104;
  __int128 v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  uint64_t v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;

__n128 sub_20EB7FEEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v3;
  __n128 result;
  double v5;
  __int128 *v6;
  __n128 *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __n128 v25;
  __int128 v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;

  v3 = *(double *)a2;
  result.n128_u64[0] = *(_QWORD *)a1;
  v5 = *(double *)a3;
  if (*(double *)a2 >= *(double *)a1)
  {
    if (v5 < v3)
    {
      v33 = *(_OWORD *)(a2 + 8);
      v38 = *(_OWORD *)(a2 + 24);
      v26 = *(_OWORD *)(a2 + 40);
      v30 = *(_QWORD *)(a2 + 56);
      v12 = *(_QWORD *)(a2 + 64);
      *(double *)a2 = v5;
      v13 = *(_OWORD *)(a3 + 8);
      *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
      *(_OWORD *)(a2 + 8) = v13;
      v14 = *(_QWORD *)(a3 + 56);
      *(_OWORD *)(a2 + 40) = *(_OWORD *)(a3 + 40);
      *(_QWORD *)(a2 + 56) = v14;
      *(_QWORD *)(a2 + 64) = *(_QWORD *)(a3 + 64);
      *(double *)a3 = v3;
      *(_OWORD *)(a3 + 8) = v33;
      *(_OWORD *)(a3 + 24) = v38;
      *(_OWORD *)(a3 + 40) = v26;
      *(_QWORD *)(a3 + 56) = v30;
      *(_QWORD *)(a3 + 64) = v12;
      result.n128_u64[0] = *(_QWORD *)a1;
      if (*(double *)a2 < *(double *)a1)
      {
        v34 = *(_OWORD *)(a1 + 8);
        v39 = *(_OWORD *)(a1 + 24);
        v27 = *(__n128 *)(a1 + 40);
        v31 = *(_QWORD *)(a1 + 56);
        v15 = *(_QWORD *)(a1 + 64);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v16 = *(_OWORD *)(a2 + 8);
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 8) = v16;
        v17 = *(_QWORD *)(a2 + 56);
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
        *(_QWORD *)(a1 + 56) = v17;
        *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
        *(_QWORD *)a2 = result.n128_u64[0];
        *(_OWORD *)(a2 + 8) = v34;
        *(_OWORD *)(a2 + 24) = v39;
        result = v27;
        *(__n128 *)(a2 + 40) = v27;
        *(_QWORD *)(a2 + 56) = v31;
        *(_QWORD *)(a2 + 64) = v15;
      }
    }
  }
  else
  {
    v6 = (__int128 *)(a1 + 8);
    v7 = (__n128 *)(a1 + 40);
    if (v5 >= v3)
    {
      v35 = *v6;
      v40 = *(_OWORD *)(a1 + 24);
      v28 = *v7;
      v18 = *(_QWORD *)(a1 + 56);
      v19 = *(_QWORD *)(a1 + 64);
      *(double *)a1 = v3;
      v20 = *(_OWORD *)(a2 + 24);
      *v6 = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(a1 + 24) = v20;
      v21 = *(_QWORD *)(a2 + 56);
      *v7 = *(__n128 *)(a2 + 40);
      *(_QWORD *)(a1 + 56) = v21;
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)a2 = result.n128_u64[0];
      *(_OWORD *)(a2 + 8) = v35;
      *(_OWORD *)(a2 + 24) = v40;
      *(__n128 *)(a2 + 40) = v28;
      *(_QWORD *)(a2 + 56) = v18;
      *(_QWORD *)(a2 + 64) = v19;
      if (*(double *)a3 < result.n128_f64[0])
      {
        v36 = *(_OWORD *)(a2 + 8);
        v41 = *(_OWORD *)(a2 + 24);
        v29 = *(__n128 *)(a2 + 40);
        v22 = *(_QWORD *)(a2 + 56);
        *(_QWORD *)a2 = *(_QWORD *)a3;
        v23 = *(_OWORD *)(a3 + 24);
        *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
        *(_OWORD *)(a2 + 24) = v23;
        v24 = *(_QWORD *)(a3 + 56);
        *(_OWORD *)(a2 + 40) = *(_OWORD *)(a3 + 40);
        *(_QWORD *)(a2 + 56) = v24;
        *(_QWORD *)(a2 + 64) = *(_QWORD *)(a3 + 64);
        *(_QWORD *)a3 = result.n128_u64[0];
        *(_OWORD *)(a3 + 8) = v36;
        *(_OWORD *)(a3 + 24) = v41;
        result = v29;
        *(__n128 *)(a3 + 40) = v29;
        *(_QWORD *)(a3 + 56) = v22;
        *(_QWORD *)(a3 + 64) = v19;
      }
    }
    else
    {
      v32 = *v6;
      v37 = *(_OWORD *)(a1 + 24);
      v25 = *v7;
      v8 = *(_QWORD *)(a1 + 56);
      v9 = *(_QWORD *)(a1 + 64);
      *(double *)a1 = v5;
      v10 = *(_OWORD *)(a3 + 24);
      *v6 = *(_OWORD *)(a3 + 8);
      *(_OWORD *)(a1 + 24) = v10;
      v11 = *(_QWORD *)(a3 + 56);
      *v7 = *(__n128 *)(a3 + 40);
      *(_QWORD *)(a1 + 56) = v11;
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a3 + 64);
      *(_QWORD *)a3 = result.n128_u64[0];
      *(_OWORD *)(a3 + 8) = v32;
      *(_OWORD *)(a3 + 24) = v37;
      result = v25;
      *(__n128 *)(a3 + 40) = v25;
      *(_QWORD *)(a3 + 56) = v8;
      *(_QWORD *)(a3 + 64) = v9;
    }
  }
  return result;
}

BOOL sub_20EB80168(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  double *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  double v17;
  double v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  v4 = 0x8E38E38E38E38E39 * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v17 = *(double *)(a2 - 72);
      v18 = *(double *)a1;
      if (v17 < *(double *)a1)
      {
        v27 = *(_OWORD *)(a1 + 8);
        v29 = *(_OWORD *)(a1 + 24);
        v23 = *(_OWORD *)(a1 + 40);
        v25 = *(_QWORD *)(a1 + 56);
        v19 = *(_QWORD *)(a1 + 64);
        *(double *)a1 = v17;
        v20 = *(_OWORD *)(a2 - 64);
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 8) = v20;
        v21 = *(_QWORD *)(a2 - 16);
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 - 32);
        *(_QWORD *)(a1 + 56) = v21;
        *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 - 8);
        *(double *)(a2 - 72) = v18;
        *(_OWORD *)(a2 - 64) = v27;
        *(_OWORD *)(a2 - 48) = v29;
        *(_OWORD *)(a2 - 32) = v23;
        *(_QWORD *)(a2 - 16) = v25;
        *(_QWORD *)(a2 - 8) = v19;
      }
      return result;
    case 3uLL:
      sub_20EB7FEEC(a1, a1 + 72, a2 - 72);
      return 1;
    case 4uLL:
      sub_20EB80408(a1, a1 + 72, a1 + 144, a2 - 72);
      return 1;
    case 5uLL:
      sub_20EB805C4(a1, a1 + 72, a1 + 144, a1 + 216, a2 - 72);
      return 1;
    default:
      v6 = (double *)(a1 + 144);
      sub_20EB7FEEC(a1, a1 + 72, a1 + 144);
      v7 = a1 + 216;
      if (a1 + 216 == a2)
        return 1;
      v8 = 0;
      v9 = 0;
      break;
  }
  while (1)
  {
    v11 = *(double *)v7;
    if (*(double *)v7 < *v6)
    {
      v26 = *(_OWORD *)(v7 + 8);
      v28 = *(_OWORD *)(v7 + 24);
      v22 = *(_OWORD *)(v7 + 40);
      v24 = *(_QWORD *)(v7 + 56);
      v12 = *(_QWORD *)(v7 + 64);
      v13 = *v6;
      v14 = v8;
      do
      {
        v15 = a1 + v14;
        *(double *)(v15 + 216) = v13;
        v16 = *(_OWORD *)(a1 + v14 + 168);
        *(_OWORD *)(v15 + 224) = *(_OWORD *)(a1 + v14 + 152);
        *(_OWORD *)(v15 + 240) = v16;
        *(_OWORD *)(v15 + 256) = *(_OWORD *)(a1 + v14 + 184);
        *(_QWORD *)(v15 + 272) = *(_QWORD *)(a1 + v14 + 200);
        *(_QWORD *)(v15 + 280) = *(_QWORD *)(a1 + v14 + 208);
        if (v14 == -144)
        {
          v10 = a1;
          goto LABEL_6;
        }
        v13 = *(double *)(v15 + 72);
        v14 -= 72;
      }
      while (v11 < v13);
      v10 = a1 + v14 + 216;
LABEL_6:
      *(double *)v10 = v11;
      *(_OWORD *)(v15 + 152) = v26;
      *(_OWORD *)(v15 + 168) = v28;
      *(_OWORD *)(v15 + 184) = v22;
      *(_QWORD *)(v15 + 200) = v24;
      *(_QWORD *)(v10 + 64) = v12;
      if (++v9 == 8)
        return v7 + 72 == a2;
    }
    v6 = (double *)v7;
    v8 += 72;
    v7 += 72;
    if (v7 == a2)
      return 1;
  }
}

__n128 sub_20EB80408(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  sub_20EB7FEEC(a1, a2, a3);
  result.n128_u64[0] = *(_QWORD *)a3;
  if (*(double *)a4 < *(double *)a3)
  {
    v24 = *(_OWORD *)(a3 + 8);
    v27 = *(_OWORD *)(a3 + 24);
    v18 = *(_OWORD *)(a3 + 40);
    v21 = *(_QWORD *)(a3 + 56);
    v9 = *(_QWORD *)(a3 + 64);
    *(_QWORD *)a3 = *(_QWORD *)a4;
    v10 = *(_OWORD *)(a4 + 8);
    *(_OWORD *)(a3 + 24) = *(_OWORD *)(a4 + 24);
    *(_OWORD *)(a3 + 8) = v10;
    v11 = *(_QWORD *)(a4 + 56);
    *(_OWORD *)(a3 + 40) = *(_OWORD *)(a4 + 40);
    *(_QWORD *)(a3 + 56) = v11;
    *(_QWORD *)(a3 + 64) = *(_QWORD *)(a4 + 64);
    *(_QWORD *)a4 = result.n128_u64[0];
    *(_OWORD *)(a4 + 8) = v24;
    *(_OWORD *)(a4 + 24) = v27;
    result.n128_u64[1] = *((_QWORD *)&v18 + 1);
    *(_OWORD *)(a4 + 40) = v18;
    *(_QWORD *)(a4 + 56) = v21;
    *(_QWORD *)(a4 + 64) = v9;
    result.n128_u64[0] = *(_QWORD *)a2;
    if (*(double *)a3 < *(double *)a2)
    {
      v25 = *(_OWORD *)(a2 + 8);
      v28 = *(_OWORD *)(a2 + 24);
      v19 = *(_OWORD *)(a2 + 40);
      v22 = *(_QWORD *)(a2 + 56);
      v12 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)a2 = *(_QWORD *)a3;
      v13 = *(_OWORD *)(a3 + 8);
      *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
      *(_OWORD *)(a2 + 8) = v13;
      v14 = *(_QWORD *)(a3 + 56);
      *(_OWORD *)(a2 + 40) = *(_OWORD *)(a3 + 40);
      *(_QWORD *)(a2 + 56) = v14;
      *(_QWORD *)(a2 + 64) = *(_QWORD *)(a3 + 64);
      *(_QWORD *)a3 = result.n128_u64[0];
      *(_OWORD *)(a3 + 8) = v25;
      *(_OWORD *)(a3 + 24) = v28;
      result.n128_u64[1] = *((_QWORD *)&v19 + 1);
      *(_OWORD *)(a3 + 40) = v19;
      *(_QWORD *)(a3 + 56) = v22;
      *(_QWORD *)(a3 + 64) = v12;
      result.n128_u64[0] = *(_QWORD *)a1;
      if (*(double *)a2 < *(double *)a1)
      {
        v26 = *(_OWORD *)(a1 + 8);
        v29 = *(_OWORD *)(a1 + 24);
        v20 = *(__n128 *)(a1 + 40);
        v23 = *(_QWORD *)(a1 + 56);
        v15 = *(_QWORD *)(a1 + 64);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v16 = *(_OWORD *)(a2 + 8);
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 8) = v16;
        v17 = *(_QWORD *)(a2 + 56);
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
        *(_QWORD *)(a1 + 56) = v17;
        *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
        *(_QWORD *)a2 = result.n128_u64[0];
        *(_OWORD *)(a2 + 8) = v26;
        *(_OWORD *)(a2 + 24) = v29;
        result = v20;
        *(__n128 *)(a2 + 40) = v20;
        *(_QWORD *)(a2 + 56) = v23;
        *(_QWORD *)(a2 + 64) = v15;
      }
    }
  }
  return result;
}

__n128 sub_20EB805C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;

  sub_20EB80408(a1, a2, a3, a4);
  result.n128_u64[0] = *(_QWORD *)a4;
  if (*(double *)a5 < *(double *)a4)
  {
    v31 = *(_OWORD *)(a4 + 8);
    v35 = *(_OWORD *)(a4 + 24);
    v23 = *(_OWORD *)(a4 + 40);
    v27 = *(_QWORD *)(a4 + 56);
    v11 = *(_QWORD *)(a4 + 64);
    *(_QWORD *)a4 = *(_QWORD *)a5;
    v12 = *(_OWORD *)(a5 + 8);
    *(_OWORD *)(a4 + 24) = *(_OWORD *)(a5 + 24);
    *(_OWORD *)(a4 + 8) = v12;
    v13 = *(_QWORD *)(a5 + 56);
    *(_OWORD *)(a4 + 40) = *(_OWORD *)(a5 + 40);
    *(_QWORD *)(a4 + 56) = v13;
    *(_QWORD *)(a4 + 64) = *(_QWORD *)(a5 + 64);
    *(_QWORD *)a5 = result.n128_u64[0];
    *(_OWORD *)(a5 + 8) = v31;
    *(_OWORD *)(a5 + 24) = v35;
    result.n128_u64[1] = *((_QWORD *)&v23 + 1);
    *(_OWORD *)(a5 + 40) = v23;
    *(_QWORD *)(a5 + 56) = v27;
    *(_QWORD *)(a5 + 64) = v11;
    result.n128_u64[0] = *(_QWORD *)a3;
    if (*(double *)a4 < *(double *)a3)
    {
      v32 = *(_OWORD *)(a3 + 8);
      v36 = *(_OWORD *)(a3 + 24);
      v24 = *(_OWORD *)(a3 + 40);
      v28 = *(_QWORD *)(a3 + 56);
      v14 = *(_QWORD *)(a3 + 64);
      *(_QWORD *)a3 = *(_QWORD *)a4;
      v15 = *(_OWORD *)(a4 + 8);
      *(_OWORD *)(a3 + 24) = *(_OWORD *)(a4 + 24);
      *(_OWORD *)(a3 + 8) = v15;
      v16 = *(_QWORD *)(a4 + 56);
      *(_OWORD *)(a3 + 40) = *(_OWORD *)(a4 + 40);
      *(_QWORD *)(a3 + 56) = v16;
      *(_QWORD *)(a3 + 64) = *(_QWORD *)(a4 + 64);
      *(_QWORD *)a4 = result.n128_u64[0];
      *(_OWORD *)(a4 + 8) = v32;
      *(_OWORD *)(a4 + 24) = v36;
      result.n128_u64[1] = *((_QWORD *)&v24 + 1);
      *(_OWORD *)(a4 + 40) = v24;
      *(_QWORD *)(a4 + 56) = v28;
      *(_QWORD *)(a4 + 64) = v14;
      result.n128_u64[0] = *(_QWORD *)a2;
      if (*(double *)a3 < *(double *)a2)
      {
        v33 = *(_OWORD *)(a2 + 8);
        v37 = *(_OWORD *)(a2 + 24);
        v25 = *(_OWORD *)(a2 + 40);
        v29 = *(_QWORD *)(a2 + 56);
        v17 = *(_QWORD *)(a2 + 64);
        *(_QWORD *)a2 = *(_QWORD *)a3;
        v18 = *(_OWORD *)(a3 + 8);
        *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
        *(_OWORD *)(a2 + 8) = v18;
        v19 = *(_QWORD *)(a3 + 56);
        *(_OWORD *)(a2 + 40) = *(_OWORD *)(a3 + 40);
        *(_QWORD *)(a2 + 56) = v19;
        *(_QWORD *)(a2 + 64) = *(_QWORD *)(a3 + 64);
        *(_QWORD *)a3 = result.n128_u64[0];
        *(_OWORD *)(a3 + 8) = v33;
        *(_OWORD *)(a3 + 24) = v37;
        result.n128_u64[1] = *((_QWORD *)&v25 + 1);
        *(_OWORD *)(a3 + 40) = v25;
        *(_QWORD *)(a3 + 56) = v29;
        *(_QWORD *)(a3 + 64) = v17;
        result.n128_u64[0] = *(_QWORD *)a1;
        if (*(double *)a2 < *(double *)a1)
        {
          v34 = *(_OWORD *)(a1 + 8);
          v38 = *(_OWORD *)(a1 + 24);
          v26 = *(__n128 *)(a1 + 40);
          v30 = *(_QWORD *)(a1 + 56);
          v20 = *(_QWORD *)(a1 + 64);
          *(_QWORD *)a1 = *(_QWORD *)a2;
          v21 = *(_OWORD *)(a2 + 8);
          *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
          *(_OWORD *)(a1 + 8) = v21;
          v22 = *(_QWORD *)(a2 + 56);
          *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
          *(_QWORD *)(a1 + 56) = v22;
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
          *(_QWORD *)a2 = result.n128_u64[0];
          *(_OWORD *)(a2 + 8) = v34;
          *(_OWORD *)(a2 + 24) = v38;
          result = v26;
          *(__n128 *)(a2 + 40) = v26;
          *(_QWORD *)(a2 + 56) = v30;
          *(_QWORD *)(a2 + 64) = v20;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20EB8080C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, __int128 *a6, __int128 *a7)
{
  uint64_t v12;
  double v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD v23[4];
  uint64_t v24;
  _OWORD v25[6];
  int8x16_t v26;
  uint64_t v27;
  double v28;
  void *v29;
  void *v30;
  uint64_t v31;

  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(double *)a1;
  v26 = vextq_s8(*(int8x16_t *)(a1 + 8), *(int8x16_t *)(a1 + 8), 8uLL);
  v27 = v12;
  v28 = v13;
  v30 = 0;
  v31 = 0;
  v29 = 0;
  sub_20EB73F7C((uint64_t)&v26, (uint64_t)v25, (uint64_t)v23, a4, a5, a6, a7);
  v16 = v15;
  if ((v15 & 1) != 0)
  {
    v17 = v25[3];
    *(_OWORD *)(a2 + 32) = v25[2];
    *(_OWORD *)(a2 + 48) = v17;
    v18 = v25[5];
    *(_OWORD *)(a2 + 64) = v25[4];
    *(_OWORD *)(a2 + 80) = v18;
    v19 = v25[1];
    *(_OWORD *)a2 = v25[0];
    *(_OWORD *)(a2 + 16) = v19;
    v20 = v23[3];
    *(_OWORD *)(a3 + 32) = v23[2];
    *(_OWORD *)(a3 + 48) = v20;
    *(_QWORD *)(a3 + 64) = v24;
    v21 = v23[1];
    *(_OWORD *)a3 = v23[0];
    *(_OWORD *)(a3 + 16) = v21;
    sub_20EB871A8(a2, (double *)*a4, (float64x2_t *)*a5, (unint64_t)((a4[1] - *a4) >> 3) >> 1, *(_DWORD *)(a1 + 40), *(double *)a1, *(double *)(a1 + 56), *(double *)(a1 + 64), v14);
    *(double *)a3 = *(double *)(a2 + 56) * *(double *)(a2 + 64) - *(double *)(a2 + 88) * *(double *)(a2 + 32);
    *(double *)(a3 + 8) = *(double *)(a2 + 56) * *(double *)(a2 + 72) - *(double *)(a2 + 88) * *(double *)(a2 + 40);
    *(double *)(a3 + 16) = *(double *)(a2 + 56) * *(double *)(a2 + 80) - *(double *)(a2 + 88) * *(double *)(a2 + 48);
    *(double *)(a3 + 24) = *(double *)(a2 + 88) * *(double *)a2 - *(double *)(a2 + 24) * *(double *)(a2 + 64);
    *(double *)(a3 + 32) = *(double *)(a2 + 88) * *(double *)(a2 + 8) - *(double *)(a2 + 24) * *(double *)(a2 + 72);
    *(double *)(a3 + 40) = *(double *)(a2 + 88) * *(double *)(a2 + 16) - *(double *)(a2 + 24) * *(double *)(a2 + 80);
    *(double *)(a3 + 48) = *(double *)(a2 + 24) * *(double *)(a2 + 32) - *(double *)(a2 + 56) * *(double *)a2;
    *(double *)(a3 + 56) = *(double *)(a2 + 24) * *(double *)(a2 + 40) - *(double *)(a2 + 56) * *(double *)(a2 + 8);
    *(double *)(a3 + 64) = *(double *)(a2 + 24) * *(double *)(a2 + 48) - *(double *)(a2 + 56) * *(double *)(a2 + 16);
  }
  if (v29)
  {
    v30 = v29;
    operator delete(v29);
  }
  return v16;
}

void sub_20EB80A10(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 96);
  if (v3)
  {
    *(_QWORD *)(v1 - 88) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EB80A30(double *a1, _QWORD *a2, _QWORD *a3, long double a4)
{
  double v7;
  uint64_t v8;
  uint64_t result;
  double v10;
  unint64_t v11;
  double *v12;
  double *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;

  v7 = cos(a4);
  v8 = a2[1] - *a2;
  if ((unint64_t)v8 < 0x10)
    return 0;
  result = 0;
  v10 = v7 * v7;
  v11 = (unint64_t)(v8 >> 3) >> 1;
  if (v11 <= 1)
    v11 = 1;
  v12 = (double *)(*a2 + 8);
  v13 = (double *)(*a3 + 8);
  do
  {
    v14 = *(v13 - 1);
    v15 = *v13;
    v16 = a1[8] + a1[6] * v14 + a1[7] * *v13;
    v17 = 1.0 / v16;
    if (v16 == 0.0)
      v17 = 1.0;
    v18 = (a1[2] + *a1 * v14 + a1[1] * v15) * v17;
    v19 = (a1[5] + a1[3] * v14 + a1[4] * v15) * v17;
    v20 = *(v12 - 1);
    v21 = v20 * v18 + *v12 * v19 + 1.0;
    if (v21 * v21 > (v20 * v20 + *v12 * *v12 + 1.0) * (v10 * (v18 * v18 + v19 * v19 + 1.0)))
      ++result;
    v12 += 2;
    v13 += 2;
    --v11;
  }
  while (v11);
  return result;
}

uint64_t sub_20EB80B5C(double *a1, float64x2_t **a2, double **a3, _QWORD *a4, float64x2_t a5)
{
  float64x2_t v5;
  float64x2_t v6;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  float64x2_t *v19;
  float64x2_t v20;
  float64x2_t v21;
  unint64_t v22;
  float64x2_t v23;
  unint64_t v24;
  float64x2_t v25;
  unint64_t v26;
  double *v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  float64x2_t v38;
  double v39;
  double v41;
  double v42;
  float64x2_t v43;
  float64x2_t v49;
  double v50;
  float64x2_t v52;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  float64x2_t v61;
  float64x2_t v65;
  double v66;
  double v67;
  float64x2_t v68;
  double v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  int v89;
  uint64_t *v90;
  uint64_t *v91;
  uint64_t v92;
  unsigned __int8 v93;
  int v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v98;
  size_t v99;
  const char *v100;
  unsigned __int8 v101;
  uint64_t v102;
  unsigned __int8 v103;
  const char *v104;
  size_t v105;
  __int128 *v106;
  unint64_t v107;
  const char *v108;
  int v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  NSObject *v116;
  size_t v117;
  std::__shared_weak_count_vtbl *v118;
  std::__shared_weak_count *v119;
  std::__shared_weak_count *v120;
  unint64_t *p_shared_owners;
  unint64_t v122;
  unint64_t v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  uint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  void *v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  float64x2_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  __CLPK_doublereal v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  char v164;
  char v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  std::__shared_weak_count *v170;
  void *object;
  __int128 v172;
  __int128 v173;
  void *__p[2];
  unint64_t v175;
  char v176;
  uint64_t v177;

  v177 = *MEMORY[0x24BDAC8D0];
  v8 = 0;
  v9 = ((unint64_t)((char *)a2[1] - (char *)*a2) >> 5);
  if (((unint64_t)((char *)a2[1] - (char *)*a2) >> 5))
  {
    v10 = a1[6];
    v11 = a1[7];
    v12 = a1[8];
    v13 = *a1;
    v14 = a1[1];
    v15 = a1[2];
    v16 = a1[3];
    v17 = a1[4];
    v18 = a1[5];
    v19 = *a2 + 1;
    v20.f64[0] = 0.0;
    v155 = 0;
    v21.f64[0] = 0.0;
    v22 = 0;
    v23.f64[0] = 0.0;
    v24 = 0;
    v25.f64[0] = 0.0;
    v26 = 0;
    v6.f64[0] = 0.0;
    v153 = v6;
    v27 = *a3;
    do
    {
      v28 = *v27;
      v29 = v27[1];
      v30 = v12 + v10 * *v27 + v11 * v29;
      v31 = 1.0 / v30;
      if (v30 == 0.0)
        v31 = 1.0;
      v32 = (v15 + v13 * v28 + v14 * v29) * v31;
      v33 = (v18 + v16 * v28 + v17 * v29) * v31;
      v35 = v27[2];
      v34 = v27[3];
      v36 = v12 + v10 * v35 + v11 * v34;
      v37 = 1.0 / v36;
      if (v36 == 0.0)
        v37 = 1.0;
      v38.f64[0] = (v15 + v13 * v35 + v14 * v34) * v37;
      v39 = (v18 + v16 * v35 + v17 * v34) * v37;
      _Q30.f64[0] = v32;
      _Q30.f64[1] = v33;
      v41 = v19[-1].f64[0];
      v42 = v19[-1].f64[1];
      v43.f64[0] = v41;
      v43.f64[1] = v42;
      _Q8 = vsubq_f64(*v19, v43);
      _D14 = _Q8.f64[1];
      __asm { FMLA            D13, D14, V8.D[1] }
      v49 = vmulq_n_f64(_Q8, 1.0 / sqrt(_D13));
      v50 = -(v49.f64[1] * v38.f64[0]);
      v38.f64[1] = v39;
      _Q29 = vsubq_f64(v38, _Q30);
      _Q8.f64[0] = _Q29.f64[1];
      __asm { FMLA            D30, D8, V29.D[1] }
      v52 = vmulq_n_f64(_Q29, 1.0 / sqrt(_Q30.f64[0]));
      _Q8.f64[0] = -v52.f64[1];
      v54 = vmlad_n_f64(-(v52.f64[1] * v32), v33, v52.f64[0]);
      v55 = vabdd_f64(vmlad_n_f64(-(v52.f64[1] * v41), v42, v52.f64[0]), v54);
      v56 = vabdd_f64(vmlad_n_f64(vmulq_f64(_Q8, *v19).f64[0], v19->f64[1], v52.f64[0]), v54);
      if (v55 < v56)
        v55 = v56;
      v57 = vmlad_n_f64(-(v49.f64[1] * v41), v42, v49.f64[0]);
      v58 = vabdd_f64(vmlad_n_f64(-(v49.f64[1] * v32), v33, v49.f64[0]), v57);
      v59 = vabdd_f64(vmlad_n_f64(v50, v39, v49.f64[0]), v57);
      if (v58 >= v59)
        v59 = v58;
      if (v59 < v55)
        v55 = v59;
      if (v55 < a5.f64[0])
      {
        ++v8;
        v60 = v19[-1].f64[1];
        v61.f64[0] = v19[-1].f64[0];
        v61.f64[1] = v60;
        _Q22 = vsubq_f64(*v19, v61);
        _D31 = _Q22.f64[1];
        __asm { FMLA            D28, D31, V22.D[1] }
        v65 = vmulq_n_f64(_Q22, 1.0 / sqrt(_D28));
        v68.f64[0] = -v65.f64[1];
        v66 = -(v65.f64[1] * v41);
        v5.f64[0] = -(v65.f64[0] * v60 - v65.f64[1] * v41);
        v67 = vmlad_n_f64(v66, v60, v65.f64[0]);
        v68.f64[1] = v65.f64[0];
        v69 = sqrt(vmlad_n_f64(vmuld_lane_f64(v65.f64[1], v65, 1), v65.f64[0], v65.f64[0]) + v67 * v67);
        if (v69 == 0.0)
          v6.f64[0] = 1.0;
        else
          v6.f64[0] = 1.0 / v69;
        v70 = vmulq_f64(v5, v6);
        v71 = vmulq_n_f64(v68, v6.f64[0]);
        v72 = vmulq_f64((float64x2_t)vzip1q_s64((int64x2_t)v70, (int64x2_t)v71), v71);
        v5.f64[0] = v72.f64[0];
        *(_QWORD *)&v21.f64[1] = v22;
        v73 = vaddq_f64(v21, v72);
        v72.f64[0] = vmuld_n_f64(v71.f64[0], v71.f64[0]);
        v74 = vmulq_laneq_f64((float64x2_t)vextq_s8((int8x16_t)v71, (int8x16_t)v70, 8uLL), v71, 1);
        v5.f64[1] = v74.f64[1];
        v70.f64[0] = vmuld_n_f64(v70.f64[0], v70.f64[0]);
        *(_QWORD *)&v20.f64[1] = v155;
        v75 = vaddq_f64(v20, v72);
        *(_QWORD *)&v25.f64[1] = v26;
        v76 = vaddq_f64(v25, v5);
        *(_QWORD *)&v23.f64[1] = v24;
        v77.f64[1] = v153.f64[1];
        v78 = vaddq_f64(v153, v70);
        v79 = vaddq_f64(v23, v74);
        v80.f64[0] = -v52.f64[1];
        v80.f64[1] = v52.f64[0];
        v81.f64[0] = sqrt(vmlad_n_f64(_Q8.f64[0] * _Q8.f64[0], v52.f64[0], v52.f64[0]) + v54 * v54);
        if (v81.f64[0] == 0.0)
          v81.f64[0] = 1.0;
        else
          v81.f64[0] = 1.0 / v81.f64[0];
        v77.f64[0] = -v54;
        v82 = vmulq_f64(v77, v81);
        v83 = vmulq_n_f64(v80, v81.f64[0]);
        v84 = vmulq_f64((float64x2_t)vzip1q_s64((int64x2_t)v82, (int64x2_t)v83), v83);
        v85.f64[0] = v84.f64[0];
        v21 = vaddq_f64(v84, v73);
        v86.f64[1] = v84.f64[1];
        v86.f64[0] = vmuld_n_f64(v83.f64[0], v83.f64[0]);
        v87 = vmulq_laneq_f64((float64x2_t)vextq_s8((int8x16_t)v83, (int8x16_t)v82, 8uLL), v83, 1);
        v85.f64[1] = v87.f64[1];
        v82.f64[0] = vmuld_n_f64(v82.f64[0], v82.f64[0]);
        v25 = vaddq_f64(v85, v76);
        v26 = vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL).u64[0];
        v20 = vaddq_f64(v86, v75);
        v23 = vaddq_f64(v87, v79);
        v6 = vaddq_f64(v82, v78);
        v153 = v6;
        v155 = vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL).u64[0];
        v24 = vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL).u64[0];
        v22 = vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL).u64[0];
      }
      v19 += 2;
      v27 += 4;
      --v9;
    }
    while (v9);
  }
  else
  {
    v20.f64[0] = 0.0;
    v155 = 0;
    v21.f64[0] = 0.0;
    v22 = 0;
    v23.f64[0] = 0.0;
    v24 = 0;
    v25.f64[0] = 0.0;
    v26 = 0;
    a5.f64[0] = 0.0;
    v153 = a5;
  }
  *(_QWORD *)&v25.f64[1] = v26;
  __asm { FMOV            V0.2D, #0.5 }
  *(_QWORD *)&v23.f64[1] = v24;
  *(_QWORD *)&v21.f64[1] = v22;
  *(_QWORD *)&v20.f64[1] = v155;
  v166 = vmulq_f64(v20, _Q0);
  v167 = vmulq_f64(v21, _Q0);
  v168 = vmulq_f64(v23, _Q0);
  v169 = vmulq_f64(v25, _Q0);
  v170 = (std::__shared_weak_count *)*(_OWORD *)&vmulq_f64(v153, _Q0);
  v165 = 110;
  v164 = 108;
  LODWORD(v161) = 3;
  LODWORD(v157) = -1;
  v163 = 9;
  v162 = 0x100000001;
  sub_20E834750(&v162, &v165, &v164, (__CLPK_integer *)&v161, v166.f64, (__CLPK_integer *)&v161, &v158, (__CLPK_doublereal *)&object, &v163, (__CLPK_integer *)&v157);
  v89 = v157;
  v90 = &v160;
  v91 = &v159;
  do
  {
    v92 = *(v91 - 1);
    *(v91 - 1) = *v90;
    *v90-- = v92;
  }
  while (v91++ < v90);
  if (v89)
  {
    v93 = atomic_load((unsigned __int8 *)&qword_254A5B2B0);
    if ((v93 & 1) == 0 && __cxa_guard_acquire(&qword_254A5B2B0))
    {
      sub_21021D3D8(&v166);
      sub_20E8610C0(&object, "cv3d.vio.geometry");
      sub_20E8C4068((uint64_t **)&v166, (uint64_t)&object, &qword_254A5B2A8);
      if (SHIBYTE(v172) < 0)
        operator delete(object);
      __cxa_guard_release(&qword_254A5B2B0);
    }
    v157 = qword_254A5B2A8;
    if (**(int **)(qword_254A5B2A8 + 56) > 5)
      goto LABEL_119;
    v94 = *(unsigned __int8 *)(qword_254A5B2A8 + 72);
    v95 = sub_20E8C31DC(qword_254A5B2A8, "OSLogSurrogateAppender", 1, 0);
    v96 = v95;
    if (!v94 && v95 == 0)
      goto LABEL_119;
    *(_QWORD *)&v166.f64[0] = &v157;
    *(std::chrono::steady_clock::time_point *)&v166.f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
    *(std::chrono::system_clock::time_point *)&v167.f64[0] = (std::chrono::system_clock::time_point)std::chrono::system_clock::now().__d_.__rep_;
    LODWORD(v167.f64[1]) = 5;
    *(_QWORD *)&v168.f64[0] = "unknown file";
    LODWORD(v168.f64[1]) = 161;
    v169.f64[1] = 0.0;
    v170 = 0;
    *(_QWORD *)&v169.f64[0] = "unknown function";
    v98 = **(_QWORD **)&v166.f64[0];
    if (*(char *)(**(_QWORD **)&v166.f64[0] + 39) < 0)
    {
      v100 = *(const char **)(v98 + 16);
      v99 = *(_QWORD *)(v98 + 24);
      v154 = **(_QWORD **)&v166.f64[0] + 16;
      v156 = **(_QWORD **)&v166.f64[0];
      v103 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v103 & 1) != 0)
        goto LABEL_38;
    }
    else
    {
      v99 = *(unsigned __int8 *)(**(_QWORD **)&v166.f64[0] + 39);
      v100 = (const char *)(**(_QWORD **)&v166.f64[0] + 16);
      v154 = (uint64_t)v100;
      v156 = **(_QWORD **)&v166.f64[0];
      v101 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v101 & 1) != 0)
        goto LABEL_38;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
      if ((_BYTE)v173 && SHIBYTE(v172) < 0)
        operator delete(object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_38:
    if (byte_254A4A4F8[23] >= 0)
      v104 = byte_254A4A4F8;
    else
      v104 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v105 = byte_254A4A4F8[23];
    else
      v105 = *(_QWORD *)&byte_254A4A4F8[8];
    object = os_log_create(v104, v100);
    v106 = &v172;
    if (v105 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v105 >= 0x17)
    {
      v107 = v96;
      v108 = v100;
      v109 = v94;
      v110 = a4;
      v111 = (v105 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v105 | 7) != 0x17)
        v111 = v105 | 7;
      v112 = v111 + 1;
      v106 = (__int128 *)operator new(v111 + 1);
      *((_QWORD *)&v172 + 1) = v105;
      *(_QWORD *)&v173 = v112 | 0x8000000000000000;
      *(_QWORD *)&v172 = v106;
      a4 = v110;
      v94 = v109;
      v100 = v108;
      v96 = v107;
    }
    else
    {
      BYTE7(v173) = v105;
      if (!v105)
      {
LABEL_52:
        *((_BYTE *)v106 + v105) = 0;
        BYTE8(v173) = 1;
        v113 = __p;
        if (v99 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v99 >= 0x17)
        {
          v114 = (v99 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v99 | 7) != 0x17)
            v114 = v99 | 7;
          v115 = v114 + 1;
          v113 = operator new(v114 + 1);
          __p[1] = (void *)v99;
          v175 = v115 | 0x8000000000000000;
          __p[0] = v113;
        }
        else
        {
          HIBYTE(v175) = v99;
          if (!v99)
            goto LABEL_60;
        }
        memmove(v113, v100, v99);
LABEL_60:
        *((_BYTE *)v113 + v99) = 0;
        v176 = 1;
        v116 = object;
        if (SHIBYTE(v175) < 0)
          operator delete(__p[0]);
        if (BYTE8(v173) && SBYTE7(v173) < 0)
          operator delete((void *)v172);
        if (object)
          os_release(object);
        if (v96 && *(_QWORD *)(v96 + 24))
        {
          v117 = _os_log_pack_size();
          v118 = (std::__shared_weak_count_vtbl *)operator new(v117, (std::align_val_t)8uLL);
          v119 = (std::__shared_weak_count *)operator new();
          v120 = v119;
          v119->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v119->__shared_owners_;
          v119->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v119->__shared_weak_owners_ = 0;
          v119[1].__vftable = v118;
          object = v118;
          *(_QWORD *)&v172 = v118;
          *((_QWORD *)&v172 + 1) = v119;
          do
            v122 = __ldxr(p_shared_owners);
          while (__stxr(v122 + 1, p_shared_owners));
          v173 = 0uLL;
          __p[0] = 0;
          do
            v123 = __ldaxr(p_shared_owners);
          while (__stlxr(v123 - 1, p_shared_owners));
          if (!v123)
          {
            ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
            std::__shared_weak_count::__release_weak(v120);
          }
          v124 = object;
          *(_WORD *)_os_log_pack_fill() = 0;
          v125 = operator new();
          v126 = *(unsigned __int8 *)(v156 + 39);
          v127 = v154;
          if ((v126 & 0x80u) != 0)
          {
            v127 = *(_QWORD *)(v156 + 16);
            v126 = *(_QWORD *)(v156 + 24);
          }
          *(_QWORD *)v125 = v124;
          *(_OWORD *)(v125 + 8) = v172;
          v172 = 0uLL;
          *(_OWORD *)(v125 + 24) = v173;
          v173 = 0uLL;
          *(_QWORD *)(v125 + 40) = v127;
          *(_QWORD *)(v125 + 48) = v126;
          *(_BYTE *)(v125 + 56) = 16;
          v161 = 0;
          v162 = v125;
          (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v96 + 24) + 40))(*(_QWORD *)(v96 + 24), &v162);
          v128 = v162;
          v162 = 0;
          if (v128)
          {
            v129 = *(std::__shared_weak_count **)(v128 + 32);
            if (v129)
            {
              v130 = (unint64_t *)&v129->__shared_owners_;
              do
                v131 = __ldaxr(v130);
              while (__stlxr(v131 - 1, v130));
              if (!v131)
              {
                ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
                std::__shared_weak_count::__release_weak(v129);
              }
            }
            v132 = *(std::__shared_weak_count **)(v128 + 16);
            if (v132)
            {
              v133 = (unint64_t *)&v132->__shared_owners_;
              do
                v134 = __ldaxr(v133);
              while (__stlxr(v134 - 1, v133));
              if (!v134)
              {
                ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
                std::__shared_weak_count::__release_weak(v132);
              }
            }
            MEMORY[0x212BC6398](v128, 0x10F0C40B62ED6C6);
            v135 = v161;
            v161 = 0;
            if (v135)
            {
              v136 = *(std::__shared_weak_count **)(v135 + 32);
              if (v136)
              {
                v137 = (unint64_t *)&v136->__shared_owners_;
                do
                  v138 = __ldaxr(v137);
                while (__stlxr(v138 - 1, v137));
                if (!v138)
                {
                  ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
                  std::__shared_weak_count::__release_weak(v136);
                }
              }
              v139 = *(std::__shared_weak_count **)(v135 + 16);
              if (v139)
              {
                v140 = (unint64_t *)&v139->__shared_owners_;
                do
                  v141 = __ldaxr(v140);
                while (__stlxr(v141 - 1, v140));
                if (!v141)
                {
                  ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
                  std::__shared_weak_count::__release_weak(v139);
                }
              }
              MEMORY[0x212BC6398](v135, 0x10F0C40B62ED6C6);
            }
          }
          v142 = (std::__shared_weak_count *)*((_QWORD *)&v173 + 1);
          if (*((_QWORD *)&v173 + 1))
          {
            v143 = (unint64_t *)(*((_QWORD *)&v173 + 1) + 8);
            do
              v144 = __ldaxr(v143);
            while (__stlxr(v144 - 1, v143));
            if (!v144)
            {
              ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
              std::__shared_weak_count::__release_weak(v142);
            }
          }
          v145 = (std::__shared_weak_count *)*((_QWORD *)&v172 + 1);
          if (*((_QWORD *)&v172 + 1))
          {
            v146 = (unint64_t *)(*((_QWORD *)&v172 + 1) + 8);
            do
              v147 = __ldaxr(v146);
            while (__stlxr(v147 - 1, v146));
            if (!v147)
            {
              ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
              std::__shared_weak_count::__release_weak(v145);
            }
          }
        }
        else
        {
          os_log_type_enabled(v116, OS_LOG_TYPE_ERROR);
          LOWORD(object) = 0;
          v148 = (void *)_os_log_send_and_compose_impl();
          if (v148)
            free(v148);
        }
        if (v94)
        {
          sub_20E8C003C((uint64_t)&v166, "Failure to eigenvalues of 3x3 hessian matrix.  Setting minimum eigenvalue to zero");
          sub_20E863570((uint64_t)&v166);
        }
        sub_20E863570((uint64_t)&v166);
        v149 = v170;
        if (v170)
        {
          v150 = (unint64_t *)&v170->__shared_owners_;
          do
            v151 = __ldaxr(v150);
          while (__stlxr(v151 - 1, v150));
          if (!v151)
          {
            ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
            std::__shared_weak_count::__release_weak(v149);
          }
        }
LABEL_119:
        v102 = 0;
        goto LABEL_120;
      }
    }
    memmove(v106, v104, v105);
    goto LABEL_52;
  }
  v102 = v160;
LABEL_120:
  *a4 = v102;
  return v8;
}

void sub_20EB81704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39)
{
  if (a39)
  {
    if (a38 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void sub_20EB81744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a38 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5B2B0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5B2B0);
  _Unwind_Resume(a1);
}

void sub_20EB8179C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_20E86E8C4(&a21);
  sub_20E86E8C4(&a20);
  sub_20E86E658((uint64_t)&a33);
  sub_20E863714((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void sub_20EB817D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  MEMORY[0x212BC6398](v15, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EB817FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EB81810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *object,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EB8188C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unsigned int v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t *v11;

  v2 = *(std::__shared_weak_count **)(a1 + 1576);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if (!*(_BYTE *)(a1 + 1536))
      return a1;
  }
  else
  {
LABEL_5:
    if (!*(_BYTE *)(a1 + 1536))
      return a1;
  }
  v5 = *(_DWORD *)(a1 + 1088);
  if (v5 == -1)
    return a1;
  if (v5 > 7)
  {
    if (v5 > 0xB)
    {
      if (v5 < 0xF)
        return a1;
      v6 = *(std::__shared_weak_count **)(a1 + 992);
      if (!v6)
        return a1;
      v10 = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(v10);
      while (__stlxr(v8 - 1, v10));
    }
    else if (v5 > 9)
    {
      if (v5 == 10)
        return a1;
      v6 = *(std::__shared_weak_count **)(a1 + 768);
      if (!v6)
        return a1;
      v11 = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(v11);
      while (__stlxr(v8 - 1, v11));
    }
    else
    {
      if (v5 != 9)
        return a1;
      v6 = *(std::__shared_weak_count **)(a1 + 600);
      if (!v6)
        return a1;
      v9 = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(v9);
      while (__stlxr(v8 - 1, v9));
    }
  }
  else
  {
    if (v5 != 7)
      return a1;
    v6 = *(std::__shared_weak_count **)(a1 + 576);
    if (!v6)
      return a1;
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
  }
  if (v8)
    return a1;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  return a1;
}

uint64_t sub_20EB819DC(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, int a5, int64x2_t *a6, double a7, double a8)
{
  int64x2_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  int64x2_t v14;

  *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 1536) = 0;
  *(_QWORD *)(a1 + 1552) = 0x3FF0000000000000;
  *(_BYTE *)(a1 + 1592) = 0;
  *(_BYTE *)(a1 + 1600) = 0;
  *(_BYTE *)(a1 + 1624) = 0;
  *(_BYTE *)(a1 + 1632) = 0;
  *(_BYTE *)(a1 + 1656) = 0;
  *(_QWORD *)(a1 + 1560) = 0;
  *(_QWORD *)(a1 + 1576) = 0;
  *(_QWORD *)(a1 + 1568) = 0;
  *(_BYTE *)(a1 + 1584) = 0;
  v14 = *a6;
  v9 = v14;
  a6->i64[0] = 0;
  a6->i64[1] = 0;
  sub_20EB81AD0(a1, a2, a3, a4, a5, (__int128 *)v14.i8, a7, a8, v9);
  v10 = (std::__shared_weak_count *)v14.i64[1];
  if (!v14.i64[1])
    return a1;
  v11 = (unint64_t *)(v14.i64[1] + 8);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (v12)
    return a1;
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  return a1;
}

void sub_20EB81AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  sub_20E86665C((uint64_t)&a9);
  sub_20E86665C(v9 + 1568);
  sub_20E972B64(v10);
  _Unwind_Resume(a1);
}

void sub_20EB81AD0(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, int a5, __int128 *a6, double a7, double a8, int64x2_t a9)
{
  int64x2_t v17;
  double v19;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v31;
  int8x16_t v32;
  int64x2_t v34;
  float64x2_t v36;
  float64x2_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t *p_shared_owners;
  unint64_t *v43;
  __int128 v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  _BYTE v48[480];
  std::__shared_weak_count *v49;
  std::__shared_weak_count *v50;
  std::__shared_weak_count *v51;
  std::__shared_weak_count *v52;
  unsigned int v53;
  _BYTE v54[440];
  char v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v17 = *(int64x2_t *)a2;
  _Q3 = *(float64x2_t *)(a2 + 24);
  v19 = *(double *)(a2 + 64);
  _Q5 = *(float64x2_t *)(a2 + 48);
  _Q6 = (float64x2_t)vzip1q_s64(*(int64x2_t *)a2, (int64x2_t)_Q3);
  v22 = (float64x2_t)vzip2q_s64(*(int64x2_t *)a2, (int64x2_t)_Q3);
  v23.f64[0] = *(float64_t *)(a2 + 16);
  v23.f64[1] = *(float64_t *)(a2 + 40);
  v24 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q6, *(double *)a2), v22, *(float64x2_t *)a2, 1), v23, v23.f64[0]);
  _D19 = *(_QWORD *)(a2 + 8);
  __asm { FMLA            D18, D19, V5.D[1] }
  v31.f64[0] = _D18 + v19 * v23.f64[0];
  v32 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q6, _Q3.f64[0]), v22, _Q3, 1), v23, v23.f64[1]);
  _Q3.f64[0] = *(float64_t *)(a2 + 32);
  __asm { FMLA            D1, D3, V5.D[1] }
  *(double *)a9.i64 = _D1 + v19 * v23.f64[1];
  v34 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q6, _Q5.f64[0]), v22, _Q5, 1), v23, v19);
  _Q6.f64[0] = *(float64_t *)(a2 + 56);
  __asm { FMLA            D3, D6, V5.D[1] }
  _Q3.f64[0] = _Q3.f64[0] + v19 * v19;
  __asm { FMOV            V5.2D, #-1.0 }
  v36 = vaddq_f64((float64x2_t)vextq_s8(v32, (int8x16_t)v24, 8uLL), _Q5);
  v24.f64[0] = _Q3.f64[0] + -1.0;
  *(_QWORD *)&v31.f64[1] = v32.i64[0];
  v37 = (float64x2_t)vdupq_n_s64(0x3EE4F8B588E368F1uLL);
  if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(v37, vabsq_f64(v36)), (int32x4_t)vcgtq_f64(v37, vabsq_f64(v24))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(v37, vabsq_f64(v31)), (int32x4_t)vcgtq_f64(v37, vabsq_f64((float64x2_t)vzip1q_s64(a9, v34)))))))) & 1) != 0|| fabs(*(double *)&v34.i64[1]) >= 0.00001)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/SensorModel.cpp", 146, (uint64_t)"math::IsOrthogonal3x3(R_camera_from_imu, 1e-5)", 46, (uint64_t)&unk_21025533E, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v17.i64[0] = *(_QWORD *)a2;
  }
  *(_QWORD *)a1 = v17.i64[0];
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *a3;
  *(_QWORD *)(a1 + 80) = a3[1];
  *(_QWORD *)(a1 + 88) = a3[2];
  sub_20E972DB4((uint64_t)v48, a4);
  memcpy(v54, (const void *)(a4 + 1000), sizeof(v54));
  v55 = 1;
  sub_20EB84848(a1 + 96, (uint64_t)v48);
  if (v55 && v53 != -1)
  {
    if (v53 > 7)
    {
      if (v53 > 0xB)
      {
        if (v53 < 0xF)
          goto LABEL_31;
        v38 = v52;
        if (!v52)
          goto LABEL_31;
        p_shared_owners = (unint64_t *)&v52->__shared_owners_;
        do
          v40 = __ldaxr(p_shared_owners);
        while (__stlxr(v40 - 1, p_shared_owners));
      }
      else if (v53 > 9)
      {
        if (v53 == 10)
          goto LABEL_31;
        v38 = v51;
        if (!v51)
          goto LABEL_31;
        v43 = (unint64_t *)&v51->__shared_owners_;
        do
          v40 = __ldaxr(v43);
        while (__stlxr(v40 - 1, v43));
      }
      else
      {
        if (v53 != 9)
          goto LABEL_31;
        v38 = v50;
        if (!v50)
          goto LABEL_31;
        v41 = (unint64_t *)&v50->__shared_owners_;
        do
          v40 = __ldaxr(v41);
        while (__stlxr(v40 - 1, v41));
      }
    }
    else
    {
      if (v53 != 7)
        goto LABEL_31;
      v38 = v49;
      if (!v49)
        goto LABEL_31;
      v39 = (unint64_t *)&v49->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
    }
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
LABEL_31:
  *(_DWORD *)(a1 + 1544) = a5;
  *(double *)(a1 + 1552) = a7;
  *(double *)(a1 + 1560) = a8;
  v44 = *a6;
  *(_QWORD *)a6 = 0;
  *((_QWORD *)a6 + 1) = 0;
  v45 = *(std::__shared_weak_count **)(a1 + 1576);
  *(_OWORD *)(a1 + 1568) = v44;
  if (v45)
  {
    v46 = (unint64_t *)&v45->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
}

void sub_20EB81E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E972B64((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EB81E74(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;

  *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 1536) = 0;
  *(_QWORD *)(a1 + 1552) = 0x3FF0000000000000;
  *(_BYTE *)(a1 + 1592) = 0;
  *(_BYTE *)(a1 + 1600) = 0;
  *(_BYTE *)(a1 + 1624) = 0;
  *(_BYTE *)(a1 + 1632) = 0;
  *(_BYTE *)(a1 + 1656) = 0;
  *(_QWORD *)(a1 + 1560) = 0;
  *(_QWORD *)(a1 + 1576) = 0;
  *(_QWORD *)(a1 + 1568) = 0;
  *(_BYTE *)(a1 + 1584) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_OWORD *)(a2 + 16);
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  v7 = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v7;
  if (*(_BYTE *)(a2 + 1536))
  {
    sub_20E972DB4(a1 + 96, a2 + 96);
    memcpy((void *)(a1 + 1096), (const void *)(a2 + 1096), 0x1B8uLL);
    *(_BYTE *)(a1 + 1536) = 1;
  }
  *(_DWORD *)(a1 + 1544) = *(_DWORD *)(a2 + 1544);
  *(_OWORD *)(a1 + 1552) = *(_OWORD *)(a2 + 1552);
  v8 = *(_QWORD *)(a2 + 1568);
  v9 = *(_QWORD *)(a2 + 1576);
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *(_QWORD *)(a1 + 1568) = v8;
  v12 = *(std::__shared_weak_count **)(a1 + 1576);
  *(_QWORD *)(a1 + 1576) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = *(_QWORD *)(a2 + 1584);
  *(_BYTE *)(a1 + 1592) = *(_BYTE *)(a2 + 1592);
  *(_QWORD *)(a1 + 1584) = v15;
  v16 = *(_OWORD *)(a2 + 1600);
  *(_OWORD *)(a1 + 1609) = *(_OWORD *)(a2 + 1609);
  *(_OWORD *)(a1 + 1600) = v16;
  v17 = *(_OWORD *)(a2 + 1632);
  *(_OWORD *)(a1 + 1641) = *(_OWORD *)(a2 + 1641);
  *(_OWORD *)(a1 + 1632) = v17;
  return a1;
}

void sub_20EB81FF0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_20E86665C(v2);
  sub_20E972B64(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EB8200C(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _OWORD v11[4];
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  _BYTE v15[1464];
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _OWORD v21[2];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  sub_20EB81E74((uint64_t)v11, a2);
  v3 = v11[3];
  *(_OWORD *)(a1 + 32) = v11[2];
  *(_OWORD *)(a1 + 48) = v3;
  *(_QWORD *)(a1 + 64) = v12;
  v4 = v11[1];
  *(_OWORD *)a1 = v11[0];
  *(_OWORD *)(a1 + 16) = v4;
  v5 = v13;
  *(_QWORD *)(a1 + 88) = v14;
  *(_OWORD *)(a1 + 72) = v5;
  sub_20EB84848(a1 + 96, (uint64_t)v15);
  *(_QWORD *)(a1 + 1560) = v16;
  *(_OWORD *)(a1 + 1544) = *(_OWORD *)&v15[1448];
  v6 = v17;
  v17 = 0u;
  v7 = *(std::__shared_weak_count **)(a1 + 1576);
  *(_OWORD *)(a1 + 1568) = v6;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_OWORD *)(a1 + 1600) = v19;
  *(_OWORD *)(a1 + 1616) = v20;
  *(_OWORD *)(a1 + 1632) = v21[0];
  *(_OWORD *)(a1 + 1584) = v18;
  *(_OWORD *)(a1 + 1641) = *(_OWORD *)((char *)v21 + 9);
  sub_20EB8188C((uint64_t)v11);
  return a1;
}

void sub_20EB82164(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20EB8188C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EB8217C@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  char *v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  _DWORD *v10;
  int v11;

  v2 = result[1];
  v3 = result[2];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (v3 != v2)
  {
    v4 = 0x4EC4EC4EC4EC4EC5 * ((v3 - v2) >> 7);
    if (v4 >= 0x38E38E38E38E38FLL)
      sub_20EB849AC();
    v5 = result;
    v6 = (char *)operator new(0x2762762762762768 * ((v3 - v2) >> 7));
    *a2 = v6;
    a2[2] = &v6[72 * v4];
    bzero(v6, 72 * ((72 * v4 - 72) / 0x48) + 72);
    v7 = 0;
    a2[1] = &v6[72 * ((72 * v4 - 72) / 0x48) + 72];
    v8 = 1;
    do
    {
      v9 = v5[1] + 1664 * v7;
      if (*(_BYTE *)(v9 + 1536))
        v10 = (_DWORD *)(v9 + 96);
      else
        v10 = 0;
      v11 = v10[248];
      if (v11 == -1)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_21025533E, 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_14;
        }
        v11 = v10[248];
      }
      if (!v11)
      {
        sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)&unk_21025533E, 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_14:
        abort();
      }
      result = memmove(&v6[72 * v7], v10, 0x48uLL);
      v7 = v8++;
    }
    while (v4 > v7);
  }
  return result;
}

void sub_20EB8233C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v11;

  v11 = *(void **)a10;
  if (*(_QWORD *)a10)
  {
    *(_QWORD *)(a10 + 8) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EB82370(uint64_t a1, int a2)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int64x2_t *v8;
  double v9;
  uint64_t v10;
  unsigned int v11;
  double v12;
  double v13;
  char v14;
  float64x2_t v18;
  double v26;
  double v27;
  double v28;
  double v31;
  double v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v50;
  long double v51;
  long double v52;
  int64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  double v57;
  float64x2_t v58;
  double v59;
  double v60;
  double v63;
  float64x2_t v64;
  unint64_t v65;
  double v66;
  long double v67;
  long double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  long double v76;
  long double v77;
  float64x2_t v78;
  double v79;
  double v80;
  uint64_t v81;
  double v83;
  double v84;
  double v85;
  double v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  double v97;
  float64x2_t v98;
  float64x2_t v99;
  int64x2_t v100[3];
  float64x2_t v101;
  _BYTE v102[24];
  __int128 v103;
  simd_double2x2 v104;
  simd_double2x2 v105;
  uint64_t v106;

  v106 = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a1 + 992);
  if (v4 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_21025533E, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(_DWORD *)(a1 + 992);
  }
  if (!v4)
  {
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)&unk_21025533E, 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  if (v4 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_21025533E, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(_DWORD *)(a1 + 992);
  }
  if (!v4)
  {
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)&unk_21025533E, 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  v5 = vcvtpd_u64_f64(*(double *)(a1 + 144) * 0.0174532925 * 11.4591559);
  if (v5 >= 0x11)
    v6 = 17;
  else
    v6 = v5;
  v103 = xmmword_210315A68;
  if (!(_DWORD)v6)
  {
    v9 = 0.0;
    goto LABEL_83;
  }
  v7 = 0;
  v8 = (int64x2_t *)(a1 + 168);
  v9 = 0.0;
  v10 = a1 + 1016;
  while (1)
  {
    *(_QWORD *)v102 = tan(v9);
    *(_OWORD *)&v102[8] = xmmword_2102DD520;
    v11 = *(_DWORD *)(a1 + 992);
    if (v11 == -1)
      break;
    if (v11 <= 7)
      goto LABEL_18;
LABEL_25:
    if (v11 <= 0xB)
    {
      if (v11 > 9)
      {
        if (v11 == 10)
          v14 = sub_20EB2450C(&v101, (uint64_t)v100, 0, (uint64_t)v102, (double *)(a1 + 168), (*(double *)a1 + *(double *)(a1 + 32)) * 0.5);
        else
          v14 = sub_20EB3AF98(a1, &v101, (uint64_t)v100, (float64x2_t *)v102, 0);
      }
      else
      {
        if (v11 != 9)
        {
          v46 = *(double *)&v102[16];
          _Q6 = *(float64x2_t *)v102;
          _D0 = *(_QWORD *)&v102[8];
          __asm { FMLA            D1, D0, V6.D[1] }
          if (_D1 < 0.00000001)
            goto LABEL_55;
          v66 = *(double *)&v102[16] * *(double *)&v102[16] + _D1;
          v67 = sqrt(_D1);
          v97 = _D1;
          v99 = *(float64x2_t *)v102;
          v68 = atan2(v67, *(long double *)&v102[16]);
          v69 = *(double *)(a1 + 168);
          v70 = *(double *)(a1 + 176);
          v71 = *(double *)(a1 + 184);
          v72 = *(double *)(a1 + 192);
          v73 = *(double *)(a1 + 200);
          v74 = *(double *)(a1 + 208);
          v75 = *(double *)(a1 + 216);
          v76 = v68
              * v68
              * (v69 * 3.0
               + v68
               * v68
               * (v70 * 5.0
                + v68
                * v68
                * (v71 * 7.0
                 + v68
                 * v68
                 * (v72 * 9.0 + v68 * v68 * (v73 * 11.0 + v68 * v68 * (v74 * 13.0 + v68 * v68 * 15.0 * v75))))))
              + 1.0;
          v77 = v71 + v68 * v68 * (v72 + v68 * v68 * (v73 + v68 * v68 * (v74 + v68 * v68 * v75)));
          _Q6 = v99;
          v59 = v68 * (v68 * v68 * (v69 + v68 * v68 * (v70 + v68 * v68 * v77)) + 1.0) / v67;
          v60 = v76 / v66;
LABEL_62:
          v64 = vmulq_n_f64(_Q6, (v46 * v60 - v59) / v97);
          v63 = -v60;
          v65 = vextq_s8((int8x16_t)v64, (int8x16_t)v64, 8uLL).u64[0];
LABEL_63:
          v101 = vmulq_n_f64(_Q6, v59);
          *(_QWORD *)&v64.f64[1] = v65;
          v78 = vmulq_n_f64(v64, _Q6.f64[0]);
          v79 = v63 * _Q6.f64[0];
          v13 = v63 * *(double *)vextq_s8((int8x16_t)_Q6, (int8x16_t)_Q6, 8uLL).i64;
          *(float64x2_t *)((char *)&v100[1] + 8) = vmulq_laneq_f64(v64, _Q6, 1);
          v78.f64[0] = v59 + v78.f64[0];
          *(double *)v100[1].i64 = v79;
          v100[0] = (int64x2_t)v78;
          v12 = v59 + *(double *)v100[2].i64;
          goto LABEL_64;
        }
        v14 = sub_20EB372E0(a1, &v101, (uint64_t)v100, (float64x2_t *)v102, 0);
      }
LABEL_59:
      if ((v14 & 1) != 0)
        goto LABEL_65;
      goto LABEL_14;
    }
    if (v11 > 0xD)
    {
      if (v11 == 14)
        v14 = sub_20EB2498C(&v101, (uint64_t)v100, 0, (uint64_t)v102, (double *)(a1 + 168), (*(double *)a1 + *(double *)(a1 + 32)) * 0.5);
      else
        v14 = sub_20EB3F050(a1, &v101, (uint64_t)v100, (float64x2_t *)v102, 0);
      goto LABEL_59;
    }
    if (v11 == 13)
    {
      if (*(double *)&v102[16] >= 0.00000001)
      {
        v104.columns[0] = (simd_double2)vdivq_f64(*(float64x2_t *)v102, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v102[16], 0));
        if (sub_20EB295B8(&v101, (float64x2_t *)&v105, 0, (uint64_t)&v104, (double *)(a1 + 168), (*(double *)a1 + *(double *)(a1 + 32)) * 0.5))
        {
          _D0 = -*(double *)&v102[8] / (*(double *)&v102[16] * *(double *)&v102[16]);
          _V3.D[1] = v105.columns[0].f64[1];
          _V4.D[1] = v105.columns[1].f64[1];
          v18.f64[0] = 0.0;
          v18.f64[1] = 1.0 / *(double *)&v102[16];
          __asm { FMLA            D7, D0, V3.D[1] }
          v100[1].i64[0] = _D7;
          v100[0] = (int64x2_t)vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)COERCE_UNSIGNED_INT64(1.0 / *(double *)&v102[16]), v105.columns[0].f64[0]), v18, (float64x2_t)v105.columns[0], 1);
          __asm { FMLA            D2, D0, V4.D[1] }
          v100[2].i64[1] = _D2;
          *(float64x2_t *)((char *)&v100[1] + 8) = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)COERCE_UNSIGNED_INT64(1.0 / *(double *)&v102[16]), v105.columns[1].f64[0]), v18, (float64x2_t)v105.columns[1], 1);
          goto LABEL_65;
        }
      }
    }
    else
    {
      v101 = 0uLL;
      memset(v100, 0, sizeof(v100));
    }
LABEL_14:
    *(double *)v10 = v9;
    *(_OWORD *)(v10 + 8) = xmmword_21030D320;
LABEL_15:
    v103 = *(_OWORD *)(v10 + 8);
    v9 = v9 + 0.0872664626;
    ++v7;
    v10 += 24;
    if (v6 == v7)
      goto LABEL_82;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_21025533E, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *(_DWORD *)(a1 + 992);
  if (v11 > 7)
    goto LABEL_25;
LABEL_18:
  if (v11 <= 3)
  {
    if (v11 > 1)
    {
      if (v11 != 2)
      {
LABEL_52:
        v46 = *(double *)&v102[16];
        _Q6 = *(float64x2_t *)v102;
        _D0 = *(_QWORD *)&v102[8];
        __asm { FMLA            D1, D0, V6.D[1] }
        if (_D1 >= 0.00000001)
        {
          v50 = *(double *)&v102[16] * *(double *)&v102[16] + _D1;
          v51 = sqrt(_D1);
          v97 = _D1;
          v98 = *(float64x2_t *)v102;
          v52 = atan2(v51, *(long double *)&v102[16]);
          v53 = *(int64x2_t *)(a1 + 184);
          v54 = (float64x2_t)vzip2q_s64(*v8, v53);
          v55 = (float64x2_t)vzip1q_s64(*v8, v53);
          v56 = vmulq_n_f64(vaddq_f64(vmulq_f64(v55, (float64x2_t)xmmword_210312E10), vmulq_n_f64(vmulq_f64(v54, (float64x2_t)xmmword_210312E20), v52 * v52)), v52 * v52);
          v57 = v52 * v52 * (v52 * v52);
          _Q6 = v98;
          v58 = vmulq_n_f64(vaddq_f64(v55, vmulq_n_f64(v54, v52 * v52)), v52 * v52);
          v59 = (v52 + v52 * (v58.f64[0] + vmuld_lane_f64(v57, v58, 1))) / v51;
          v60 = (v56.f64[0] + vmuld_lane_f64(v57, v56, 1) + 1.0) / v50;
          goto LABEL_62;
        }
LABEL_55:
        v59 = 1.0 / v46;
        v63 = -(v59 * v59);
        v64.f64[0] = 0.0;
        v65 = 0;
        goto LABEL_63;
      }
      if (*(_DWORD *)(a1 + 212))
      {
        if (*(double *)&v102[16] >= 0.00000001)
        {
          _Q0 = vmulq_n_f64(*(float64x2_t *)v102, 1.0 / *(double *)&v102[16]);
          v26 = *(double *)(a1 + 168);
          v27 = *(double *)(a1 + 176);
          v28 = *(double *)(a1 + 184);
          _D2 = vmuld_lane_f64(1.0 / *(double *)&v102[16], *(float64x2_t *)v102, 1);
          __asm { FMLA            D6, D2, V0.D[1] }
          v31 = v26 * *(double *)&_D6 + 1.0 + *(double *)&_D6 * *(double *)&_D6 * (v27 + v28 * *(double *)&_D6);
          v32 = v26 + v26 + *(double *)&_D6 * (v27 * 4.0 + *(double *)&_D6 * (v28 * 6.0));
          v33 = *(float64x2_t *)(a1 + 192);
          v34 = vmulq_f64(vaddq_f64((float64x2_t)vdupq_lane_s64(_D6, 0), vmulq_f64(_Q0, vaddq_f64(_Q0, _Q0))), (float64x2_t)vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL));
          v35 = vaddq_f64(v33, v33);
          v36 = vmulq_n_f64(v35, _Q0.f64[0]);
          v101 = vmlaq_n_f64(vaddq_f64(v34, vmulq_laneq_f64(v36, _Q0, 1)), _Q0, v31);
          v37 = vmulq_n_f64(_Q0, v32);
          v38 = vmulq_n_f64(v37, _Q0.f64[0]);
          v39 = vmulq_n_f64(v37, _D2);
          v40 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v36.f64[0], 0);
          v40.f64[0] = vmuld_lane_f64(6.0, v33, 1) * _Q0.f64[0];
          v41 = vaddq_f64(v40, vmulq_laneq_f64(v35, _Q0, 1));
          v38.f64[0] = v31 + v38.f64[0];
          v42 = vaddq_f64(v41, v38);
          *(_QWORD *)&v41.f64[0] = vdupq_laneq_s64((int64x2_t)v41, 1).u64[0];
          v41.f64[1] = vmuld_lane_f64(6.0 * v33.f64[0], _Q0, 1) + v36.f64[1];
          v39.f64[1] = v31 + v39.f64[1];
          v100[0] = (int64x2_t)vmulq_n_f64(v42, 1.0 / *(double *)&v102[16]);
          *(double *)v100[1].i64 = -(vmuld_n_f64(*(double *)v100[0].i64, _Q0.f64[0])
                                   + *(double *)&v100[0].i64[1] * _Q0.f64[1]);
          *(float64x2_t *)((char *)&v100[1] + 8) = vmulq_n_f64(vaddq_f64(v41, v39), 1.0 / *(double *)&v102[16]);
          *(double *)&v100[2].i64[1] = -(vmuld_n_f64(*(double *)&v100[1].i64[1], _Q0.f64[0])
                                       + *(double *)v100[2].i64 * _Q0.f64[1]);
          goto LABEL_65;
        }
      }
      else if (*(double *)&v102[16] >= 0.00000001)
      {
        _Q2 = vmulq_n_f64(*(float64x2_t *)v102, 1.0 / *(double *)&v102[16]);
        v83 = *(double *)(a1 + 168);
        v84 = *(double *)(a1 + 176);
        v85 = *(double *)(a1 + 184);
        _D1 = vmuld_lane_f64(1.0 / *(double *)&v102[16], *(float64x2_t *)v102, 1);
        __asm { FMLA            D6, D1, V2.D[1] }
        v88 = v83 * _D6 + 1.0 + _D6 * _D6 * (v84 + v85 * _D6);
        v101 = vmulq_n_f64(_Q2, v88);
        v89 = vmulq_n_f64(_Q2, v83 + v83 + _D6 * (v84 * 4.0 + _D6 * (v85 * 6.0)));
        v90 = vmulq_n_f64(v89, _Q2.f64[0]);
        v91 = vmulq_n_f64(v89, _D1);
        v89.f64[0] = v90.f64[0];
        v89.f64[1] = v91.f64[1];
        v92 = vaddq_f64((float64x2_t)vdupq_lane_s64(*(uint64_t *)&v88, 0), v89);
        v93.f64[0] = v92.f64[0];
        v93.f64[1] = v90.f64[1];
        v92.f64[0] = v91.f64[0];
        v100[0] = (int64x2_t)vmulq_n_f64(v93, 1.0 / *(double *)&v102[16]);
        *(double *)v100[1].i64 = -(vmuld_n_f64(*(double *)v100[0].i64, _Q2.f64[0])
                                 + *(double *)&v100[0].i64[1] * _Q2.f64[1]);
        *(float64x2_t *)((char *)&v100[1] + 8) = vmulq_n_f64(v92, 1.0 / *(double *)&v102[16]);
        *(double *)&v100[2].i64[1] = -(vmuld_n_f64(*(double *)&v100[1].i64[1], _Q2.f64[0])
                                     + *(double *)v100[2].i64 * _Q2.f64[1]);
        goto LABEL_65;
      }
    }
    else
    {
      if (!v11)
      {
        sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)&unk_21025533E, 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
        abort();
      }
      if (*(double *)&v102[16] >= 0.00000001)
      {
        v12 = 1.0 / *(double *)&v102[16];
        v101 = vmulq_n_f64(*(float64x2_t *)v102, 1.0 / *(double *)&v102[16]);
        v100[0] = (int64x2_t)COERCE_UNSIGNED_INT64(1.0 / *(double *)&v102[16]);
        v100[1].i64[1] = 0;
        *(double *)v100[1].i64 = v12 * -(*(double *)v102 * v12);
        v13 = v12 * -(*(double *)&v102[8] * v12);
LABEL_64:
        *(double *)v100[2].i64 = v12;
        *(double *)&v100[2].i64[1] = v13;
        goto LABEL_65;
      }
    }
    goto LABEL_14;
  }
  if (v11 <= 5)
  {
    if (v11 != 5)
      goto LABEL_52;
    if (sub_20EB29218(v101.f64, (uint64_t)v100, (float64x2_t *)v102, (int64x2_t *)(a1 + 168)))
      goto LABEL_65;
    goto LABEL_14;
  }
  if (v11 != 6)
  {
    v14 = sub_20EB3345C(a1, &v101, (uint64_t)v100, (float64x2_t *)v102, 0);
    goto LABEL_59;
  }
  if (*(double *)&v102[16] == 0.0)
    v43 = 1.0;
  else
    v43 = 1.0 / *(double *)&v102[16];
  v44 = *(double *)v102 * v43;
  v45 = v43 * *(double *)&v102[8];
  v104.columns[0].f64[0] = *(double *)v102 * v43;
  v104.columns[0].f64[1] = v43 * *(double *)&v102[8];
  sub_20EB2837C(&v101, (double *)&v105, (float64x2_t *)&v104, (double *)(a1 + 168), (float64x2_t *)(a1 + 192), (double *)(a1 + 208));
  *(double *)v100[0].i64 = v43 * v105.columns[0].f64[0];
  *(double *)&v100[0].i64[1] = v43 * v105.columns[0].f64[1];
  *(double *)v100[1].i64 = v43 * (-(v105.columns[0].f64[0] * v44) - v45 * v105.columns[0].f64[1]);
  *(double *)&v100[1].i64[1] = v43 * v105.columns[1].f64[0];
  *(double *)v100[2].i64 = v43 * v105.columns[1].f64[1];
  *(double *)&v100[2].i64[1] = v43 * (-(v105.columns[1].f64[0] * v44) - v45 * v105.columns[1].f64[1]);
LABEL_65:
  v105.columns[0] = (simd_double2)vzip1q_s64(v100[0], *(int64x2_t *)((char *)&v100[1] + 8));
  v105.columns[1] = (simd_double2)vzip2q_s64(v100[0], *(int64x2_t *)((char *)&v100[1] + 8));
  sub_20E8BE3B0(&v105, &v104);
  if (a2)
  {
    if (a2 == 1)
    {
      v80 = sqrt(v104.columns[0].f64[0] * v104.columns[1].f64[1]);
    }
    else
    {
      v80 = 0.0;
      if (a2 == 2)
      {
        v80 = v104.columns[0].f64[0];
        if ((*(_QWORD *)&v104.columns[0].f64[0] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
          goto LABEL_75;
        goto LABEL_72;
      }
    }
    if ((*(_QWORD *)&v80 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
      goto LABEL_75;
  }
  else
  {
    v80 = v104.columns[1].f64[1];
    if ((*(_QWORD *)&v104.columns[1].f64[1] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
      goto LABEL_75;
  }
LABEL_72:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.hpp", 421, (uint64_t)"std::isfinite(base_scale)", 25, (uint64_t)&unk_21025533E, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_75:
  if (v80 >= 0.0)
  {
    *(double *)v10 = v9;
    *(double *)(v10 + 8) = v80;
    *(_QWORD *)(v10 + 16) = 0;
    if (v7)
    {
      v81 = a1 + 1016 + 24 * (v7 - 1);
      *(double *)(v81 + 16) = (v80 - *(double *)(v81 + 8)) * 11.4591559;
    }
    goto LABEL_15;
  }
  LODWORD(v6) = v7;
LABEL_82:
  if (v6 <= 0x10)
  {
LABEL_83:
    v94 = 24 * v6;
    do
    {
      v95 = a1 + v94;
      *(double *)(v95 + 1016) = v9;
      *(_OWORD *)(v95 + 1024) = v103;
      v9 = v9 + 0.0872664626;
      v94 += 24;
    }
    while (v94 != 408);
  }
  v96 = *(_DWORD *)(a1 + 992);
  if (v96 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_21025533E, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v96 = *(_DWORD *)(a1 + 992);
  }
  if (!v96)
  {
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)&unk_21025533E, 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  *(_BYTE *)(a1 + 160) = 1;
}

void sub_20EB830D4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  sub_20EB83274(a2, 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 7));
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (v4 != v5)
  {
    while (*(_BYTE *)(v4 + 1536))
    {
      v7 = operator new();
      sub_20E972DB4(v7, v4 + 96);
      memcpy((void *)(v7 + 1000), (const void *)(v4 + 1096), 0x1B8uLL);
      v12 = v7;
      v8 = *(uint64_t **)(a2 + 8);
      if ((unint64_t)v8 >= *(_QWORD *)(a2 + 16))
      {
        v9 = sub_20EB849C0((uint64_t **)a2, &v12);
      }
      else
      {
        v12 = 0;
        *v8 = v7;
        v9 = v8 + 1;
      }
      *(_QWORD *)(a2 + 8) = v9;
      v11 = v12;
      v12 = 0;
      if (v11)
      {
        sub_20E8E931C((uint64_t)&v12, v11);
        v4 += 1664;
        if (v4 == v5)
          return;
      }
      else
      {
LABEL_5:
        v4 += 1664;
        if (v4 == v5)
          return;
      }
    }
    v12 = 0;
    v10 = *(_QWORD **)(a2 + 8);
    if ((unint64_t)v10 < *(_QWORD *)(a2 + 16))
    {
      *v10 = 0;
      v6 = (uint64_t)(v10 + 1);
    }
    else
    {
      v6 = sub_20EB84B70((uint64_t **)a2);
    }
    *(_QWORD *)(a2 + 8) = v6;
    goto LABEL_5;
  }
}

void sub_20EB83200(_Unwind_Exception *a1)
{
  uint64_t **v1;

  sub_20EB833F4(v1);
  _Unwind_Resume(a1);
}

void sub_20EB83274(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v26;

  v2 = *(uint64_t **)a1;
  if (a2 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3)
  {
    if (a2 >> 61)
      sub_20EB849AC();
    v4 = *(char **)(a1 + 8);
    v5 = 8 * a2;
    v6 = (char *)operator new(8 * a2);
    v7 = &v6[v5];
    v8 = v4 - (char *)v2;
    v9 = (unint64_t)&v6[(v4 - (char *)v2) & 0xFFFFFFFFFFFFFFF8];
    if (v4 == (char *)v2)
    {
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v9;
      *(_QWORD *)(a1 + 16) = v7;
LABEL_21:
      if (v2)
        operator delete(v2);
      return;
    }
    v10 = v8 - 8;
    if ((unint64_t)(v8 - 8) >= 0x78)
    {
      v12 = (unint64_t)&v4[-(v10 & 0xFFFFFFFFFFFFFFF8) - 8] >= v9
         || &v6[(v8 & 0xFFFFFFFFFFFFFFF8) - (v10 & 0xFFFFFFFFFFFFFFF8) - 8] >= v4;
      v11 = &v6[(v4 - (char *)v2) & 0xFFFFFFFFFFFFFFF8];
      if (v12)
      {
        v13 = v8 >> 3;
        v14 = (v10 >> 3) + 1;
        v15 = 8 * (v14 & 0x3FFFFFFFFFFFFFFCLL);
        v11 = (char *)(v9 - v15);
        v16 = &v4[-v15];
        v17 = v4 - 16;
        v18 = &v6[8 * v13 - 16];
        v19 = v14 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v21 = *((_OWORD *)v17 - 1);
          v20 = *(_OWORD *)v17;
          *((_OWORD *)v17 - 1) = 0uLL;
          *(_OWORD *)v17 = 0uLL;
          *((_OWORD *)v18 - 1) = v21;
          *(_OWORD *)v18 = v20;
          v17 -= 32;
          v18 -= 32;
          v19 -= 4;
        }
        while (v19);
        v4 = v16;
        if (v14 == (v14 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_16:
          v2 = *(uint64_t **)a1;
          v23 = *(uint64_t **)(a1 + 8);
          *(_QWORD *)a1 = v11;
          *(_QWORD *)(a1 + 8) = v9;
          *(_QWORD *)(a1 + 16) = v7;
          if (v23 != v2)
          {
            v24 = v23 - 1;
            do
            {
              v26 = *v24;
              *v24 = 0;
              if (v26)
                sub_20E8E931C((uint64_t)v24, v26);
            }
            while (v24-- != v2);
          }
          goto LABEL_21;
        }
      }
    }
    else
    {
      v11 = &v6[(v4 - (char *)v2) & 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      v22 = *((_QWORD *)v4 - 1);
      v4 -= 8;
      *(_QWORD *)v4 = 0;
      *((_QWORD *)v11 - 1) = v22;
      v11 -= 8;
    }
    while (v4 != (char *)v2);
    goto LABEL_16;
  }
}

uint64_t **sub_20EB833F4(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v7;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = v3 - 1;
      do
      {
        v7 = *v5;
        *v5 = 0;
        if (v7)
          sub_20E8E931C((uint64_t)v5, v7);
      }
      while (v5-- != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_20EB83470(uint64_t a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  const double *v21;
  double v22;
  double v23;
  double v25;
  double v26;
  double v27;
  float64x2_t v28;
  double v35;
  float64x2_t v36;
  float64x2_t v39;
  uint64_t v40;
  __int128 *v41;
  __int128 v42;
  __int128 v43;
  float64x2_t v44;
  float64x2_t v45;
  _OWORD v46[4];
  uint64_t v47;
  float64x2_t v48;
  _BYTE v49[32];
  float64x2_t v50;
  double v51;
  float64x2x3_t v52;

  v5 = *(_QWORD *)(a1 + 8);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 16) - v5) >> 7)) <= 1)
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 72) = 0;
    return;
  }
  if (*(_BYTE *)(v5 + 1536))
    v9 = v5 + 96;
  else
    v9 = 0;
  v10 = *(_DWORD *)(v9 + 992);
  if (v10 != -1)
  {
    if (v10 <= 7)
      goto LABEL_8;
LABEL_14:
    if (v10 == 13)
      goto LABEL_63;
    goto LABEL_17;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_21025533E, 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_66;
  }
  v10 = *(_DWORD *)(v9 + 992);
  if (v10 > 7)
    goto LABEL_14;
LABEL_8:
  if (v10 > 3)
  {
    if (v10 == 6)
      goto LABEL_63;
  }
  else
  {
    if (v10 <= 1)
      goto LABEL_24;
    if (v10 == 2)
      goto LABEL_63;
  }
LABEL_17:
  v11 = *(_QWORD *)(a1 + 16);
  if (*(_BYTE *)(v11 - 128))
    v12 = v11 - 1568;
  else
    v12 = 0;
  v10 = *(_DWORD *)(v12 + 992);
  if (v10 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_21025533E, 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_66;
    }
    v10 = *(_DWORD *)(v12 + 992);
    if (v10 <= 7)
    {
LABEL_22:
      if (v10 > 3)
      {
        if (v10 != 6)
          goto LABEL_33;
      }
      else
      {
        if (v10 <= 1)
        {
LABEL_24:
          if (!v10)
          {
LABEL_65:
            sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)&unk_21025533E, 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
            abort();
          }
          goto LABEL_63;
        }
        if (v10 != 2)
          goto LABEL_33;
      }
LABEL_63:
      sub_20EB86840(*(_QWORD *)(a1 + 16) - 1664, *(_QWORD *)(a1 + 8), (uint64_t)&v48);
      v45 = v50;
      *(_OWORD *)(a4 + 32) = *(_OWORD *)&v49[16];
      *(float64x2_t *)(a4 + 48) = v45;
      *(double *)(a4 + 64) = v51;
      v43 = *(_OWORD *)v49;
      v44 = v48;
      goto LABEL_64;
    }
  }
  else if (v10 <= 7)
  {
    goto LABEL_22;
  }
  if (v10 == 13)
    goto LABEL_63;
LABEL_33:
  if (!a3)
    goto LABEL_63;
  v13 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v13 + 1536))
    v14 = v13 + 96;
  else
    v14 = 0;
  v15 = *(_DWORD *)(v14 + 992);
  if (v15 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_21025533E, 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_66;
    }
    v15 = *(_DWORD *)(v14 + 992);
  }
  if (!v15)
    goto LABEL_65;
  if (v15 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_21025533E, 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_66;
    }
    v15 = *(_DWORD *)(v14 + 992);
  }
  if (!v15)
    goto LABEL_65;
  v16 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v16 + 1536))
    v17 = v16 + 96;
  else
    v17 = 0;
  v18 = *(_DWORD *)(v17 + 992);
  if (v18 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_21025533E, 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_66;
    }
    v18 = *(_DWORD *)(v17 + 992);
  }
  if (!v18)
    goto LABEL_65;
  if (v18 != -1)
    goto LABEL_55;
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_21025533E, 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_66:
    abort();
  }
  v18 = *(_DWORD *)(v17 + 992);
LABEL_55:
  if (!v18)
    goto LABEL_65;
  v19 = *(_QWORD *)(a1 + 8);
  v20 = *(_QWORD *)(a1 + 16);
  v21 = (const double *)(v20 - 1664);
  v52 = vld3q_f64(v21);
  v21 += 6;
  v22 = (double)a2 / ((*(double *)(v17 + 144) + *(double *)(v17 + 144)) * 0.0174532925);
  v23 = *(double *)(v20 - 1600);
  _Q5 = *(_OWORD *)v21;
  v25 = *(double *)(v19 + 16);
  v26 = *(double *)(v19 + 40);
  v27 = *(double *)(v19 + 64);
  v28 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v52.val[0], *(double *)v19), v52.val[1], *(float64x2_t *)v19, 1), v52.val[2], v25);
  _D7 = *(_QWORD *)(v19 + 8);
  __asm { FMLA            D21, D7, V5.D[1] }
  v35 = _D21 + v23 * v25;
  v36 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v52.val[0], *(double *)(v19 + 24)), v52.val[1], *(float64x2_t *)(v19 + 24), 1), v52.val[2], v26);
  _D17 = *(_QWORD *)(v19 + 32);
  __asm { FMLA            D21, D17, V5.D[1] }
  v39 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v52.val[0], *(double *)(v19 + 48)), v52.val[1], *(float64x2_t *)(v19 + 48), 1), v52.val[2], v27);
  v52.val[1].f64[0] = *(float64_t *)(v19 + 56);
  __asm { FMLA            D1, D2, V5.D[1] }
  v48 = v28;
  *(double *)v49 = v35;
  *(float64x2_t *)&v49[8] = v36;
  *(double *)&v49[24] = _D21 + v23 * v26;
  v50 = v39;
  v51 = v52.val[0].f64[0] + v23 * v27;
  if (*(_BYTE *)(v20 - 128))
    v40 = v20 - 1568;
  else
    v40 = 0;
  if (*(_BYTE *)(v19 + 1536))
    v41 = (__int128 *)(v19 + 96);
  else
    v41 = 0;
  sub_20EB86618(v40, v41, (uint64_t)&v48, (uint64_t)v46, v22);
  v42 = v46[3];
  *(_OWORD *)(a4 + 32) = v46[2];
  *(_OWORD *)(a4 + 48) = v42;
  *(_QWORD *)(a4 + 64) = v47;
  v44 = (float64x2_t)v46[0];
  v43 = v46[1];
LABEL_64:
  *(float64x2_t *)a4 = v44;
  *(_OWORD *)(a4 + 16) = v43;
  *(_BYTE *)(a4 + 72) = 1;
}

void sub_20EB83BBC(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  double v18;
  uint64_t v19;
  double v22;
  double v24;
  double v25;
  double v26;
  float64x2_t v27;
  float64x2_t v29;
  float64x2_t v35;
  double v38;
  float64x2_t v39;
  uint64_t v40;
  __int128 *v41;
  __int128 v42;
  __int128 v43;
  float64x2_t v44;
  float64x2_t v45;
  _OWORD v46[4];
  uint64_t v47;
  float64x2_t v48;
  _BYTE v49[32];
  float64x2_t v50;
  double v51;

  v10 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v10 + 1536))
    v11 = v10 + 96;
  else
    v11 = 0;
  v12 = *(_DWORD *)(v11 + 992);
  if (v12 != -1)
  {
    if (v12 <= 7)
      goto LABEL_6;
LABEL_12:
    if (v12 == 13)
      goto LABEL_61;
    goto LABEL_15;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_21025533E, 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_64;
  }
  v12 = *(_DWORD *)(v11 + 992);
  if (v12 > 7)
    goto LABEL_12;
LABEL_6:
  if (v12 > 3)
  {
    if (v12 == 6)
      goto LABEL_61;
  }
  else
  {
    if (v12 <= 1)
      goto LABEL_22;
    if (v12 == 2)
      goto LABEL_61;
  }
LABEL_15:
  if (*(_BYTE *)(a2 + 1536))
    v13 = a2 + 96;
  else
    v13 = 0;
  v12 = *(_DWORD *)(v13 + 992);
  if (v12 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_21025533E, 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_64;
    }
    v12 = *(_DWORD *)(v13 + 992);
    if (v12 <= 7)
    {
LABEL_20:
      if (v12 > 3)
      {
        if (v12 != 6)
          goto LABEL_31;
      }
      else
      {
        if (v12 <= 1)
        {
LABEL_22:
          if (!v12)
          {
LABEL_63:
            sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)&unk_21025533E, 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
            abort();
          }
          goto LABEL_61;
        }
        if (v12 != 2)
          goto LABEL_31;
      }
LABEL_61:
      sub_20EB86840(*(_QWORD *)(a1 + 8), a2, (uint64_t)&v48);
      v45 = v50;
      *(_OWORD *)(a5 + 32) = *(_OWORD *)&v49[16];
      *(float64x2_t *)(a5 + 48) = v45;
      *(double *)(a5 + 64) = v51;
      v43 = *(_OWORD *)v49;
      v44 = v48;
      goto LABEL_62;
    }
  }
  else if (v12 <= 7)
  {
    goto LABEL_20;
  }
  if (v12 == 13)
    goto LABEL_61;
LABEL_31:
  if (!a4)
    goto LABEL_61;
  if (*(_BYTE *)(a2 + 1536))
    v14 = a2 + 96;
  else
    v14 = 0;
  v15 = *(_DWORD *)(v14 + 992);
  if (v15 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_21025533E, 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_64;
    }
    v15 = *(_DWORD *)(v14 + 992);
  }
  if (!v15)
    goto LABEL_63;
  if (v15 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_21025533E, 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_64;
    }
    v15 = *(_DWORD *)(v14 + 992);
  }
  if (!v15)
    goto LABEL_63;
  if (*(_BYTE *)(a2 + 1536))
    v16 = a2 + 96;
  else
    v16 = 0;
  v17 = *(_DWORD *)(v16 + 992);
  if (v17 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_21025533E, 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_64;
    }
    v17 = *(_DWORD *)(v16 + 992);
  }
  if (!v17)
    goto LABEL_63;
  if (v17 != -1)
    goto LABEL_53;
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_21025533E, 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_64:
    abort();
  }
  v17 = *(_DWORD *)(v16 + 992);
LABEL_53:
  if (!v17)
    goto LABEL_63;
  v18 = (double)a3 / ((*(double *)(v16 + 144) + *(double *)(v16 + 144)) * 0.0174532925);
  v19 = *(_QWORD *)(a1 + 8);
  _Q1.f64[0] = *(float64_t *)(v19 + 16);
  _Q3 = *(int64x2_t *)(v19 + 24);
  v22 = *(double *)(v19 + 64);
  _Q5 = *(_OWORD *)(v19 + 48);
  v24 = *(double *)(a2 + 16);
  v25 = *(double *)(a2 + 40);
  v26 = *(double *)(a2 + 64);
  v27 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v19, _Q3);
  _Q2 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v19, _Q3);
  _Q1.f64[1] = *(float64_t *)(v19 + 40);
  v29 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v27, *(double *)a2), _Q2, *(float64x2_t *)a2, 1), _Q1, v24);
  _D7 = *(_QWORD *)(a2 + 8);
  __asm { FMLA            D3, D7, V5.D[1] }
  *(double *)_Q3.i64 = *(double *)_Q3.i64 + v22 * v24;
  v35 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v27, *(double *)(a2 + 24)), _Q2, *(float64x2_t *)(a2 + 24), 1), _Q1, v25);
  _D17 = *(_QWORD *)(a2 + 32);
  __asm { FMLA            D7, D17, V5.D[1] }
  v38 = _D7 + v22 * v25;
  v39 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v27, *(double *)(a2 + 48)), _Q2, *(float64x2_t *)(a2 + 48), 1), _Q1, v26);
  _Q2.f64[0] = *(float64_t *)(a2 + 56);
  __asm { FMLA            D1, D2, V5.D[1] }
  *(_QWORD *)v49 = _Q3.i64[0];
  v48 = v29;
  *(double *)&v49[24] = v38;
  *(float64x2_t *)&v49[8] = v35;
  v51 = _Q1.f64[0] + v22 * v26;
  v50 = v39;
  if (*(_BYTE *)(v19 + 1536))
    v40 = v19 + 96;
  else
    v40 = 0;
  if (*(_BYTE *)(a2 + 1536))
    v41 = (__int128 *)(a2 + 96);
  else
    v41 = 0;
  sub_20EB86618(v40, v41, (uint64_t)&v48, (uint64_t)v46, v18);
  v42 = v46[3];
  *(_OWORD *)(a5 + 32) = v46[2];
  *(_OWORD *)(a5 + 48) = v42;
  *(_QWORD *)(a5 + 64) = v47;
  v44 = (float64x2_t)v46[0];
  v43 = v46[1];
LABEL_62:
  *(float64x2_t *)a5 = v44;
  *(_OWORD *)(a5 + 16) = v43;
  *(_BYTE *)(a5 + 72) = 1;
}

double sub_20EB842DC(uint64_t a1, float64x2_t *a2)
{
  uint64_t *v4;
  unsigned __int8 v5;
  float64_t v7;
  float64_t v8;
  float64_t v9;
  float64_t v10;
  float64_t v11;
  float64_t v12;
  float64_t v13;
  float64_t v14;
  float64_t v15;
  char *v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  float64_t v22;
  float64_t v23;
  float64_t v24;
  float64_t v25;
  float64_t v26;
  float64_t v27;
  float64_t v28;
  float64_t v29;
  float64_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  __int128 v34;
  double result;
  __int128 v36;
  __uint64_t v37[2];
  _BYTE v38[32];
  _BYTE v39[32];
  void *v40;
  __int16 v41;
  float64_t v42;
  __int16 v43;
  float64_t v44;
  void *v45;
  char v46;
  void *__p;
  char v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(*a2, (float64x2_t)xmmword_21030D320), (int32x4_t)vceqzq_f64(a2[1])), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(a2[2], (float64x2_t)xmmword_21030D320), (int32x4_t)vceqzq_f64(a2[3])))))) & 1) == 0&& a2[4].f64[0] == 1.0)
  {
    goto LABEL_25;
  }
  v4 = sub_210219C18();
  v5 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    v7 = a2->f64[0];
    v8 = a2->f64[1];
    v9 = a2[1].f64[0];
    v10 = a2[1].f64[1];
    v11 = a2[2].f64[0];
    v12 = a2[2].f64[1];
    v13 = a2[3].f64[0];
    v14 = a2[3].f64[1];
    v15 = a2[4].f64[0];
    *(_DWORD *)v38 = 134220032;
    *(float64_t *)&v38[4] = v7;
    *(_WORD *)&v38[12] = 2048;
    *(float64_t *)&v38[14] = v8;
    *(_WORD *)&v38[22] = 2048;
    *(float64_t *)&v38[24] = v9;
    *(_WORD *)v39 = 2048;
    *(float64_t *)&v39[2] = v10;
    *(_WORD *)&v39[10] = 2048;
    *(float64_t *)&v39[12] = v11;
    *(_WORD *)&v39[20] = 2048;
    *(float64_t *)&v39[22] = v12;
    *(_WORD *)&v39[30] = 2048;
    v40 = *(void **)&v13;
    v41 = 2048;
    v42 = v14;
    v43 = 2048;
    v44 = v15;
    v16 = (char *)_os_log_send_and_compose_impl();
    v17 = strlen(v16);
    v37[0] = 0;
    pthread_threadid_np(0, v37);
    v18 = v37[0];
    timespec_get((timespec *)v37, 1);
    sub_210219E20(v38, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v4 + 1), (__int128 *)(v4 + 5), "Set customized GRXN value: %.30g, %.30g, %.30g, %.30g, %.30g, %.30g, %.30g, %.30g, %.30g", 0x58uLL, v16, v17, v18, v37);
    std::mutex::lock(&stru_254A5A410);
    v19 = qword_254A5A458;
    for (i = unk_254A5A460; v19 != i; v19 += 40)
    {
      v21 = *(_QWORD *)(v19 + 32);
      if (!v21)
        sub_20E86D37C();
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v21 + 48))(v21, v38);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v48 < 0)
    {
      operator delete(__p);
      if ((v46 & 0x80000000) == 0)
      {
LABEL_10:
        if (!BYTE4(v44))
        {
LABEL_16:
          if (v39[24] && (v39[23] & 0x80000000) != 0)
            operator delete(*(void **)v39);
          if ((v38[31] & 0x80000000) != 0)
            operator delete(*(void **)&v38[8]);
          if (v16)
            free(v16);
          goto LABEL_23;
        }
LABEL_14:
        if (SBYTE3(v44) < 0)
          operator delete(v40);
        goto LABEL_16;
      }
    }
    else if ((v46 & 0x80000000) == 0)
    {
      goto LABEL_10;
    }
    operator delete(v45);
    if (!BYTE4(v44))
      goto LABEL_16;
    goto LABEL_14;
  }
LABEL_23:
  if (os_signpost_enabled((os_log_t)*v4))
  {
    v22 = a2->f64[0];
    v23 = a2->f64[1];
    v24 = a2[1].f64[0];
    v25 = a2[1].f64[1];
    v26 = a2[2].f64[0];
    v27 = a2[2].f64[1];
    v28 = a2[3].f64[0];
    v29 = a2[3].f64[1];
    v30 = a2[4].f64[0];
    *(_DWORD *)v38 = 134220032;
    *(float64_t *)&v38[4] = v22;
    *(_WORD *)&v38[12] = 2048;
    *(float64_t *)&v38[14] = v23;
    *(_WORD *)&v38[22] = 2048;
    *(float64_t *)&v38[24] = v24;
    *(_WORD *)v39 = 2048;
    *(float64_t *)&v39[2] = v25;
    *(_WORD *)&v39[10] = 2048;
    *(float64_t *)&v39[12] = v26;
    *(_WORD *)&v39[20] = 2048;
    *(float64_t *)&v39[22] = v27;
    *(_WORD *)&v39[30] = 2048;
    v40 = *(void **)&v28;
    v41 = 2048;
    v42 = v29;
    v43 = 2048;
    v44 = v30;
    _os_signpost_emit_unreliably_with_name_impl();
  }
LABEL_25:
  *(float64x2_t *)(a1 + 160) = *a2;
  v31 = a2[1];
  v32 = a2[2];
  v33 = a2[3];
  *(float64_t *)(a1 + 224) = a2[4].f64[0];
  *(float64x2_t *)(a1 + 192) = v32;
  *(float64x2_t *)(a1 + 208) = v33;
  *(float64x2_t *)(a1 + 176) = v31;
  sub_20E8BE424((uint64_t)v38);
  v34 = *(_OWORD *)v38;
  *(_OWORD *)(a1 + 248) = *(_OWORD *)&v38[16];
  *(_QWORD *)(a1 + 296) = v40;
  *(_OWORD *)(a1 + 232) = v34;
  result = *(double *)v39;
  v36 = *(_OWORD *)&v39[16];
  *(_OWORD *)(a1 + 264) = *(_OWORD *)v39;
  *(_OWORD *)(a1 + 280) = v36;
  return result;
}

void sub_20EB846F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  void *v47;

  if (a47 < 0)
  {
    operator delete(__p);
    if ((a41 & 0x80000000) == 0)
    {
LABEL_3:
      if (!a35)
        goto LABEL_9;
LABEL_7:
      if (a34 < 0)
        operator delete(a29);
LABEL_9:
      if (a28 && a27 < 0)
        operator delete(a22);
      if (a21 < 0)
        operator delete(a16);
      if (!v47)
        _Unwind_Resume(exception_object);
      free(v47);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((a41 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a36);
  if (!a35)
    goto LABEL_9;
  goto LABEL_7;
}

_QWORD *sub_20EB847A8(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  v1 = sub_20E86A980(a1, (uint64_t)"APS model: [", 12);
  sub_20E86A980(v1, (uint64_t)"Gradient: ", 10);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = sub_20E86A980(v2, (uint64_t)"; ", 2);
  sub_20E86A980(v3, (uint64_t)"Offset: ", 8);
  v4 = (_QWORD *)std::ostream::operator<<();
  v5 = sub_20E86A980(v4, (uint64_t)"; ", 2);
  sub_20E86A980(v5, (uint64_t)"Aspect Ratio: ", 14);
  v6 = (_QWORD *)std::ostream::operator<<();
  return sub_20E86A980(v6, (uint64_t)"]", 1);
}

void sub_20EB84848(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t *p_shared_owners;
  unint64_t *v10;

  if (*(unsigned __int8 *)(a1 + 1440) != *(unsigned __int8 *)(a2 + 1440))
  {
    if (!*(_BYTE *)(a1 + 1440))
    {
      sub_20E972DB4(a1, a2);
      memcpy((void *)(a1 + 1000), (const void *)(a2 + 1000), 0x1B8uLL);
      *(_BYTE *)(a1 + 1440) = 1;
      return;
    }
    v4 = *(_DWORD *)(a1 + 992);
    if (v4 != -1)
    {
      if (v4 > 7)
      {
        if (v4 > 0xB)
        {
          if (v4 < 0xF)
            goto LABEL_32;
          v5 = *(std::__shared_weak_count **)(a1 + 896);
          if (!v5)
            goto LABEL_32;
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
        }
        else if (v4 > 9)
        {
          if (v4 == 10)
            goto LABEL_32;
          v5 = *(std::__shared_weak_count **)(a1 + 672);
          if (!v5)
            goto LABEL_32;
          v10 = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(v10);
          while (__stlxr(v7 - 1, v10));
        }
        else
        {
          if (v4 != 9)
            goto LABEL_32;
          v5 = *(std::__shared_weak_count **)(a1 + 504);
          if (!v5)
            goto LABEL_32;
          v8 = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(v8);
          while (__stlxr(v7 - 1, v8));
        }
LABEL_30:
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        goto LABEL_32;
      }
      if (v4 == 7)
      {
        v5 = *(std::__shared_weak_count **)(a1 + 480);
        if (v5)
        {
          v6 = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(v6);
          while (__stlxr(v7 - 1, v6));
          goto LABEL_30;
        }
      }
    }
LABEL_32:
    *(_BYTE *)(a1 + 1440) = 0;
    return;
  }
  if (*(_BYTE *)(a1 + 1440))
  {
    sub_20E9708B8(a1, a2);
    memcpy((void *)(a1 + 1000), (const void *)(a2 + 1000), 0x1B8uLL);
  }
}

void sub_20EB849AC()
{
  sub_20E860B90("vector");
}

uint64_t *sub_20EB849C0(uint64_t **a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v29;

  v3 = (char *)a1[1] - (char *)*a1;
  v4 = v3 >> 3;
  v5 = (v3 >> 3) + 1;
  if (v5 >> 61)
    sub_20EB849AC();
  v7 = (char *)a1[2] - (char *)*a1;
  if (v7 >> 2 > v5)
    v5 = v7 >> 2;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
    v8 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 >> 61)
      sub_20E877A38();
    v9 = (char *)operator new(8 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = (uint64_t *)&v9[8 * v4];
  v11 = (uint64_t *)&v9[8 * v8];
  v12 = *a2;
  *a2 = 0;
  *v10 = v12;
  v13 = v10 + 1;
  v14 = *a1;
  v15 = a1[1];
  if (v15 == *a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
  }
  else
  {
    v16 = (char *)v15 - (char *)*a1 - 8;
    if (v16 < 0x78
      || (uint64_t *)((char *)v15 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8) < v10
      && &v9[v3 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v15)
    {
      goto LABEL_32;
    }
    v17 = (v16 >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v10 = (uint64_t *)((char *)v10 - v18);
    v19 = &v15[v18 / 0xFFFFFFFFFFFFFFF8];
    v20 = v15 - 2;
    v21 = &v9[8 * v4 - 16];
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24 = *((_OWORD *)v20 - 1);
      v23 = *(_OWORD *)v20;
      *((_OWORD *)v20 - 1) = 0uLL;
      *(_OWORD *)v20 = 0uLL;
      *((_OWORD *)v21 - 1) = v24;
      *(_OWORD *)v21 = v23;
      v20 -= 4;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    v15 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_32:
      do
      {
        v25 = *--v15;
        *v15 = 0;
        *--v10 = v25;
      }
      while (v15 != v14);
    }
    v15 = *a1;
    v26 = a1[1];
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    if (v26 != v15)
    {
      v27 = v26 - 1;
      do
      {
        v29 = *v27;
        *v27 = 0;
        if (v29)
          sub_20E8E931C((uint64_t)v27, v29);
      }
      while (v27-- != v15);
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

uint64_t sub_20EB84B70(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v27;

  v3 = *a1;
  v2 = a1[1];
  v4 = (char *)v2 - (char *)*a1;
  v5 = v4 >> 3;
  v6 = (v4 >> 3) + 1;
  if (v6 >> 61)
    sub_20EB849AC();
  v7 = (char *)a1[2] - (char *)v3;
  if (v7 >> 2 > v6)
    v6 = v7 >> 2;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
    v8 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 >> 61)
      sub_20E877A38();
    v9 = (char *)operator new(8 * v8);
    v10 = (uint64_t *)&v9[8 * v5];
    v11 = (uint64_t *)&v9[8 * v8];
    *v10 = 0;
    v12 = (uint64_t)(v10 + 1);
    v13 = (char *)((char *)v2 - (char *)v3);
    if (v2 != v3)
      goto LABEL_10;
LABEL_23:
    *a1 = v10;
    a1[1] = (uint64_t *)v12;
    a1[2] = v11;
    goto LABEL_24;
  }
  v9 = 0;
  v10 = (uint64_t *)(8 * v5);
  v11 = 0;
  *(_QWORD *)(8 * v5) = 0;
  v12 = 8 * v5 + 8;
  v13 = (char *)((char *)v2 - (char *)v3);
  if (v2 == v3)
    goto LABEL_23;
LABEL_10:
  v14 = (unint64_t)(v13 - 8);
  if (v14 < 0x78
    || (uint64_t *)((char *)v2 - (v14 & 0xFFFFFFFFFFFFFFF8) - 8) < v10
    && &v9[v4 - (v14 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v2)
  {
    goto LABEL_31;
  }
  v15 = (v14 >> 3) + 1;
  v16 = 8 * (v15 & 0x3FFFFFFFFFFFFFFCLL);
  v10 = (uint64_t *)((char *)v10 - v16);
  v17 = &v2[v16 / 0xFFFFFFFFFFFFFFF8];
  v18 = v2 - 2;
  v19 = &v9[8 * v5 - 16];
  v20 = v15 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v22 = *((_OWORD *)v18 - 1);
    v21 = *(_OWORD *)v18;
    *((_OWORD *)v18 - 1) = 0uLL;
    *(_OWORD *)v18 = 0uLL;
    *((_OWORD *)v19 - 1) = v22;
    *(_OWORD *)v19 = v21;
    v18 -= 4;
    v19 -= 32;
    v20 -= 4;
  }
  while (v20);
  v2 = v17;
  if (v15 != (v15 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_31:
    do
    {
      v23 = *--v2;
      *v2 = 0;
      *--v10 = v23;
    }
    while (v2 != v3);
  }
  v2 = *a1;
  v24 = a1[1];
  *a1 = v10;
  a1[1] = (uint64_t *)v12;
  a1[2] = v11;
  if (v24 != v2)
  {
    v25 = v24 - 1;
    do
    {
      v27 = *v25;
      *v25 = 0;
      if (v27)
        sub_20E8E931C((uint64_t)v25, v27);
    }
    while (v25-- != v2);
  }
LABEL_24:
  if (v2)
    operator delete(v2);
  return v12;
}

void sub_20EB84D24(uint64_t a1, uint64_t a2, double a3, double a4, int8x16_t a5, int8x16_t a6, int64x2_t a7, float64x2_t a8, float64x2_t a9)
{
  int v11;
  double v12;
  double v13;
  int8x16_t v14;
  int8x16_t v15;
  int64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  __n128 v29;
  __n128 v30;
  __n128 v31;
  __n128 v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;

  v11 = *(_DWORD *)(a1 + 992);
  if (v11 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_21025533E, 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_10;
    }
    v11 = *(_DWORD *)(a1 + 992);
  }
  if (!v11)
  {
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)&unk_21025533E, 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_10:
    abort();
  }
  if (*(_BYTE *)(a2 + 8))
  {
    LODWORD(a3) = *(_DWORD *)a2;
    LODWORD(a4) = *(_DWORD *)(a2 + 4);
    *(double *)a5.i64 = (double)*(unint64_t *)&a3;
    v12 = (double)*(unint64_t *)&a4;
    v13 = *(double *)(a1 + 16);
    a6.i64[0] = *(_QWORD *)(a1 + 40);
  }
  else
  {
    v13 = *(double *)(a1 + 16);
    *(double *)a5.i64 = v13 + v13;
    a6.i64[0] = *(_QWORD *)(a1 + 40);
    v12 = *(double *)a6.i64 + *(double *)a6.i64;
  }
  v37.f64[0] = v13;
  *(_QWORD *)&v37.f64[1] = a6.i64[0];
  v33 = (float64x2_t)*(unint64_t *)&v13;
  v34.f64[0] = 0.0;
  *(_QWORD *)&v34.f64[1] = a6.i64[0];
  *(_QWORD *)&v35.f64[0] = a5.i64[0];
  *(_QWORD *)&v35.f64[1] = a6.i64[0];
  v36.f64[0] = v13;
  v36.f64[1] = v12;
  sub_20EB84EDC(a1, &v37, &v33, &v32, a5, a6, a7, a8, a9);
  sub_20EB84EDC(a1, &v37, &v34, &v31, v14, v15, v16, v17, v18);
  sub_20EB84EDC(a1, &v37, &v35, &v30, v19, v20, v21, v22, v23);
  sub_20EB84EDC(a1, &v37, &v36, &v29, v24, v25, v26, v27, v28);
}

__n128 sub_20EB84EDC@<Q0>(uint64_t a1@<X0>, float64x2_t *a2@<X1>, float64x2_t *a3@<X2>, __n128 *a4@<X8>, int8x16_t _Q2@<Q2>, int8x16_t a6@<Q3>, int64x2_t a7@<Q4>, float64x2_t a8@<Q5>, float64x2_t a9@<Q6>)
{
  double v17;
  uint64_t v18;
  float64x2_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  char v25;
  double v26;
  float64x2_t v27;
  double v28;
  double v29;
  char v30;
  double v32;
  char v33;
  __n128 result;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  __n128 v38;
  __n128 v39;

  v35 = *a3;
  v36 = *a2;
  _Q2.i64[0] = *(_QWORD *)&vsubq_f64(*a2, *a3).f64[1];
  __asm { FMLA            D1, D2, V0.D[1] }
  v17 = sqrt(_D1);
  v39 = *(__n128 *)a2;
  *(double *)&v18 = COERCE_DOUBLE(sub_20EB850B0(a1, (float64x2_t *)&v39, v39.n128_f64[0], _D1, _Q2, a6, a7, a8, a9));
  if (!v25
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.hpp", 67, (uint64_t)"fov", 3, (uint64_t)&unk_21025533E, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v26 = *(double *)&v18;
  v27 = *a2;
  v38 = *(__n128 *)a2;
  if (v17 * 0.03125 < v17)
  {
    v19 = (float64x2_t)vdupq_n_s64(0x3FA0000000000000uLL);
    v27 = vmulq_f64(vsubq_f64(v35, v36), v19);
    v37 = v27;
    v28 = v17 * 0.03125;
    do
    {
      v29 = COERCE_DOUBLE(sub_20EB850B0(a1, (float64x2_t *)&v39, v27.f64[0], v19.f64[0], v20, v21, v22, v23, v24));
      if (v30)
        _NF = v26 < v29;
      else
        _NF = 0;
      if (_NF)
      {
        v38 = v39;
        v26 = v29;
      }
      v28 = v17 * 0.03125 + v28;
      v19.f64[0] = v37.f64[0];
      v27 = vaddq_f64(v37, (float64x2_t)v39);
      v39 = (__n128)v27;
    }
    while (v28 < v17);
  }
  v32 = COERCE_DOUBLE(sub_20EB850B0(a1, a3, v27.f64[0], v19.f64[0], v20, v21, v22, v23, v24));
  if (v33 && v26 < v32)
  {
    v38 = *(__n128 *)a3;
    v26 = v32;
  }
  result = v38;
  *a4 = v38;
  a4[1].n128_f64[0] = v26;
  return result;
}

uint64_t sub_20EB850B0(uint64_t a1, float64x2_t *a2, double a3, double a4, int8x16_t a5, int8x16_t a6, int64x2_t a7, float64x2_t a8, float64x2_t a9)
{
  int8x16_t v11;
  unsigned int v12;
  double v13;
  double v14;
  uint64_t v15;
  float64x2_t *v16;
  float64x2_t *v17;
  uint64_t v18;
  double *v19;
  uint64_t v20;
  float64x2_t *v21;
  float64x2_t *v22;
  uint64_t v23;
  char v24;
  float64x2_t *v25;
  float64x2_t *v26;
  uint64_t v27;
  float64x2_t *v28;
  float64x2_t *v29;
  double *v30;
  double *v31;
  float64x2_t *v32;
  float64x2_t *v33;
  uint64_t v34;
  double *v35;
  float64x2_t *v36;
  uint64_t v37;
  double v38;
  int8x16_t v39;
  __int128 v40;
  double v47;
  int v48;
  __int128 v51;
  float64x2_t v52;
  int64x2_t v53;
  float64x2_t *v54;
  float64x2_t *v55;
  uint64_t v56;
  double v57;
  unsigned int v58;
  unsigned int v59;
  char v60;
  double v61;
  double v62;
  double v64;
  double v67;
  float64x2_t v71;
  float64x2_t v72;
  double v73;
  double v74;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  int v83;
  int v84;
  float64x2_t v85;
  float64x2_t v86;
  double v88;
  double v90;
  int v91;
  double v92;
  int v93;
  double v94;
  double v95;
  double v96;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  int v104;
  int v105;
  double v106;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  int v115;
  int v116;
  double v117;
  BOOL v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  BOOL v125;
  float64x2_t v126;
  double v127;
  double v129;
  int v130;
  double v131;
  int v132;
  double v133;
  float64x2_t v134;
  float64x2_t v135;
  double v136;
  BOOL v137;
  float64x2_t v138;
  double v139;
  double v141;
  int v142;
  double v143;
  int v144;
  double v145;
  float64x2_t v146;
  double v147;
  float64x2_t v148;
  double v149;
  double v150;
  float64x2_t v157;
  double __x;
  float64x2_t *v159;
  float64x2_t *v160;
  float64x2_t *v161;
  float64x2_t *v162;
  uint64_t v163;
  int64x2_t v164;
  float64_t v165;
  int64x2_t v166;
  float64_t v167;
  float64x2_t v168;
  uint64_t v169;
  float64x2_t v170;
  int8x16_t v171;
  int64x2_t v172;
  int64x2_t v173;
  int8x16_t v174;
  uint64_t v175;
  double v176;
  double v177;
  float64x2_t v178;
  float64_t v179;
  __int128 v180;
  unint64_t v181;
  __int128 v182;
  uint64_t v183;
  uint64_t v184;

  v184 = *MEMORY[0x24BDAC8D0];
  v11 = (int8x16_t)vdupq_n_s64(0x7FF8000000000000uLL);
  v157 = (float64x2_t)v11;
  __x = NAN;
  v12 = *(_DWORD *)(a1 + 992);
  if (v12 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_21025533E, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v12 = *(_DWORD *)(a1 + 992);
    if (v12 <= 7)
      goto LABEL_3;
  }
  else if (v12 <= 7)
  {
LABEL_3:
    if (!v12)
    {
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)&unk_21025533E, 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    goto LABEL_8;
  }
  if (v12 <= 0xD)
  {
LABEL_8:
    v13 = a2->f64[1];
    *(double *)a6.i64 = *(double *)(a1 + 88) + *(double *)(a1 + 72) * a2->f64[0] + *(double *)(a1 + 80) * v13;
    v14 = *(double *)(a1 + 104);
    a5.i64[0] = *(_QWORD *)(a1 + 112);
    *(double *)v11.i64 = v13 * v14 + *(double *)a5.i64;
    v176 = *(double *)a6.i64;
    v177 = *(double *)v11.i64;
    goto LABEL_9;
  }
  a6.i64[0] = *(_QWORD *)&a2->f64[1];
  *(double *)v11.i64 = *(double *)(a1 + 88)
                     + *(double *)(a1 + 72) * a2->f64[0]
                     + *(double *)(a1 + 80) * *(double *)a6.i64;
  a5.i64[0] = *(_QWORD *)(a1 + 112);
  v14 = *(double *)a6.i64 * *(double *)(a1 + 104) + *(double *)a5.i64;
  v176 = *(double *)v11.i64;
  v177 = v14;
  if (v12 == 14)
  {
LABEL_9:
    v159 = &v157;
    v160 = (float64x2_t *)&v176;
    v162 = 0;
    v163 = 0;
    v161 = 0;
    if (v12 <= 7)
      goto LABEL_10;
    goto LABEL_51;
  }
  v25 = &v157;
  v26 = (float64x2_t *)&v176;
  v159 = &v157;
  v160 = (float64x2_t *)&v176;
  v162 = 0;
  v163 = 0;
  v161 = 0;
  if (v12 != -1)
  {
    v27 = 0;
    v28 = 0;
    v29 = 0;
    goto LABEL_78;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_21025533E, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v12 = *(_DWORD *)(a1 + 992);
  if (v12 <= 7)
  {
LABEL_10:
    if (v12 > 3)
    {
      v20 = (uint64_t)v159;
      v19 = (double *)v160;
      v21 = v161;
      v22 = v162;
      v23 = v163;
      if (v12 > 5)
      {
        if (v12 == 6)
          v24 = sub_20EB41C58((double *)a1, (uint64_t)v159, v160->f64, v161, (uint64_t)v162, v163);
        else
          v24 = sub_20EB306CC(a1, (uint64_t)v159, v160, v161, (unint64_t)v162, v163, *(double *)v11.i64, v14, a5, a6, *(double *)a7.i64, a8.f64[0], a9);
      }
      else if (v12 == 5)
      {
        if (v161)
        {
          v161->f64[0] = 0.0;
          v21->f64[1] = 0.0;
          v21[1].f64[0] = 0.0;
        }
        if (v23)
        {
          *(_QWORD *)(v23 + 64) = 0;
          *(_OWORD *)(v23 + 32) = 0u;
          *(_OWORD *)(v23 + 48) = 0u;
          *(_OWORD *)v23 = 0u;
          *(_OWORD *)(v23 + 16) = 0u;
        }
        if (v22)
          v24 = sub_20EB28F10(v20, (uint64_t)v22, v19, a1 + 168, 5);
        else
          v24 = sub_20EB2886C(v20, v19, a1 + 168, 5);
      }
      else
      {
        if (v161)
        {
          v161->f64[0] = 0.0;
          v21->f64[1] = 0.0;
          v21[1].f64[0] = 0.0;
        }
        if (v23)
        {
          *(_QWORD *)(v23 + 64) = 0;
          v11 = 0uLL;
          *(_OWORD *)(v23 + 32) = 0u;
          *(_OWORD *)(v23 + 48) = 0u;
          *(_OWORD *)v23 = 0u;
          *(_OWORD *)(v23 + 16) = 0u;
        }
        if (v22)
        {
          if (!*(_BYTE *)(a1 + 468))
          {
            v11.i64[0] = sub_20EB27C0C(a1 + 204, (double *)(a1 + 168), 0x32uLL, v11, v14, a5, a6).u64[0];
            *(_BYTE *)(a1 + 468) = 1;
          }
          v24 = sub_20EA8D684(v20, (uint64_t)v19, (int64x2_t *)(a1 + 168), (float *)(a1 + 204), v22, 5, *(double *)v11.i64, v14, *(double *)a5.i64, *(double *)a6.i64, *(double *)a7.i64, a8.f64[0], a9);
        }
        else
        {
          if (!*(_BYTE *)(a1 + 468))
          {
            v11.i64[0] = sub_20EB27C0C(a1 + 204, (double *)(a1 + 168), 0x32uLL, v11, v14, a5, a6).u64[0];
            *(_BYTE *)(a1 + 468) = 1;
          }
          v24 = sub_20EA8D684(v20, (uint64_t)v19, (int64x2_t *)(a1 + 168), (float *)(a1 + 204), 0, 5, *(double *)v11.i64, v14, *(double *)a5.i64, *(double *)a6.i64, *(double *)a7.i64, a8.f64[0], a9);
        }
      }
    }
    else
    {
      if (v12 <= 1)
      {
        if (!v12)
        {
          sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)&unk_21025533E, 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
          abort();
        }
        v15 = (uint64_t)v159;
        v17 = v161;
        v16 = v162;
        v18 = v163;
        *v159 = *v160;
        *(_QWORD *)(v15 + 16) = 0x3FF0000000000000;
        if (v17)
        {
          v17->f64[0] = 0.0;
          v17->f64[1] = 0.0;
          v17[1].f64[0] = 0.0;
        }
        if (v16)
        {
          *v16 = (float64x2_t)xmmword_210312EC0;
          v16[1] = (float64x2_t)unk_210312ED0;
          v16[2] = (float64x2_t)xmmword_210312EE0;
        }
        if (v18)
        {
          *(_QWORD *)(v18 + 64) = 0;
          *(_OWORD *)(v18 + 32) = 0u;
          *(_OWORD *)(v18 + 48) = 0u;
          *(_OWORD *)v18 = 0u;
          *(_OWORD *)(v18 + 16) = 0u;
        }
        goto LABEL_99;
      }
      if (v12 == 2)
      {
        v24 = sub_20EA8D22C((uint64_t)&v159, a1);
      }
      else
      {
        v30 = (double *)v159;
        v31 = (double *)v160;
        v33 = v161;
        v32 = v162;
        v34 = v163;
        if (v161)
        {
          v161->f64[0] = 0.0;
          v33->f64[1] = 0.0;
          v33[1].f64[0] = 0.0;
        }
        if (v34)
        {
          *(_QWORD *)(v34 + 64) = 0;
          v11.i64[0] = 0;
          *(_OWORD *)(v34 + 32) = 0u;
          *(_OWORD *)(v34 + 48) = 0u;
          *(_OWORD *)v34 = 0u;
          *(_OWORD *)(v34 + 16) = 0u;
        }
        if (v32)
          v24 = sub_20EB27398(v30, (uint64_t)v32, v31, (int64x2_t *)(a1 + 168), 20, *(double *)v11.i64, v14, *(double *)a5.i64, *(double *)a6.i64, a7);
        else
          v24 = sub_20EB23DF0((uint64_t)v30, v31, (int64x2_t *)(a1 + 168), 20, *(double *)v11.i64, v14, *(double *)a5.i64, *(double *)a6.i64, a7, a8);
      }
    }
    goto LABEL_98;
  }
LABEL_51:
  v25 = v159;
  if (v12 > 0xB)
  {
    if (v12 <= 0xD)
    {
      if (v12 != 13)
      {
        v55 = v161;
        v54 = v162;
        v56 = v163;
        if (v161)
        {
          v161->f64[0] = 0.0;
          v55->f64[1] = 0.0;
          v55[1].f64[0] = 0.0;
        }
        if (v56)
        {
          *(_QWORD *)(v56 + 64) = 0;
          *(_OWORD *)(v56 + 32) = 0u;
          *(_OWORD *)(v56 + 48) = 0u;
          *(_OWORD *)v56 = 0u;
          *(_OWORD *)(v56 + 16) = 0u;
        }
        v25->f64[0] = 0.0;
        v25->f64[1] = 0.0;
        v25[1].f64[0] = 0.0;
        if (v54)
        {
          v54[1] = 0u;
          v54[2] = 0u;
          *v54 = 0u;
        }
        return 0;
      }
      v24 = sub_20EB43734((double *)a1, (uint64_t)v159, (uint64_t)v160, v161, (uint64_t)v162, v163);
      goto LABEL_98;
    }
    v26 = v160;
    v29 = v161;
    v28 = v162;
    v27 = v163;
    if (v12 == 14)
    {
      if (v161)
      {
        v161->f64[0] = 0.0;
        v29->f64[1] = 0.0;
        v29[1].f64[0] = 0.0;
      }
      if (v27)
      {
        *(_QWORD *)(v27 + 64) = 0;
        *(_OWORD *)(v27 + 32) = 0u;
        *(_OWORD *)(v27 + 48) = 0u;
        *(_OWORD *)v27 = 0u;
        *(_OWORD *)(v27 + 16) = 0u;
      }
      v47 = (*(double *)a1 + *(double *)(a1 + 32)) * 0.5;
      v48 = sub_20EB253A0((uint64_t)v25, (uint64_t)v26, (double *)(a1 + 168), (double *)(a1 + 392), 0x14u, v47);
      if (!v28)
      {
        if (!v48)
          return 0;
        goto LABEL_99;
      }
      if ((v48 & 1) == 0)
        return 0;
      if (!sub_20EB2498C(&v170, (uint64_t)&v171, &v168, (uint64_t)v25, (double *)(a1 + 168), v47))
        return 0;
      v39.i64[0] = *(_QWORD *)&v25[1].f64[0];
      *(_QWORD *)&v40 = v172.i64[0];
      _Q3 = (float64x2_t)v171;
      v174 = *(int8x16_t *)v25;
      v175 = v39.i64[0];
      v169 = 0;
      *(_QWORD *)&_Q5.f64[0] = v39.i64[0];
      *(_QWORD *)&_Q5.f64[1] = v174.i64[0];
      _Q5.f64[0] = vmlsq_f64(vmulq_f64(*(float64x2_t *)&v173, _Q5), (float64x2_t)vzip2q_s64(v173, v172), (float64x2_t)vextq_s8(v174, v39, 8uLL)).f64[1];
      __asm { FMLA            D6, D5, V3.D[1] }
      if (fabs(vmlad_n_f64(_D6, vmlsq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)vmulq_f64((float64x2_t)v172, (float64x2_t)v174), 1), (float64x2_t)v173, (float64x2_t)v174).f64[0], *(double *)v172.i64)) < 0.00000001)return 0;
LABEL_77:
      *(_QWORD *)&v51 = vextq_s8(v171, v171, 8uLL).u64[0];
      *(_QWORD *)&_Q3.f64[1] = vextq_s8((int8x16_t)v172, (int8x16_t)v172, 8uLL).u64[0];
      *((_QWORD *)&v51 + 1) = v173.i64[0];
      *((_QWORD *)&v40 + 1) = vextq_s8((int8x16_t)v173, (int8x16_t)v173, 8uLL).u64[0];
      v178 = _Q3;
      v179 = *(double *)v174.i64;
      v181 = vextq_s8(v174, v174, 8uLL).u64[0];
      v180 = v51;
      v183 = v39.i64[0];
      v182 = v40;
      sub_20E8BE424((uint64_t)&v164);
      v52.f64[0] = v165;
      v53 = vzip2q_s64(v164, v166);
      v52.f64[1] = v167;
      *(int64x2_t *)v28 = vzip1q_s64(v164, v166);
      v28[1] = (float64x2_t)v53;
      v28[2] = v52;
      goto LABEL_99;
    }
LABEL_78:
    v24 = sub_20EB3CED8(a1, (uint64_t)v25, v26, v29, v28, v27);
    goto LABEL_98;
  }
  v35 = (double *)v160;
  v36 = v161;
  v28 = v162;
  v37 = v163;
  if (v12 <= 9)
  {
    if (v12 == 9)
    {
      v24 = sub_20EB35004(a1, (uint64_t)v159, v160, v161, (unint64_t)v162, v163, *(double *)v11.i64, v14, *(double *)a5.i64, (int32x4_t)a6, (int32x4_t)a7);
    }
    else
    {
      if (v161)
      {
        v161->f64[0] = 0.0;
        v36->f64[1] = 0.0;
        v36[1].f64[0] = 0.0;
      }
      if (v37)
      {
        *(_QWORD *)(v37 + 64) = 0;
        v11.i64[0] = 0;
        *(_OWORD *)(v37 + 32) = 0u;
        *(_OWORD *)(v37 + 48) = 0u;
        *(_OWORD *)v37 = 0u;
        *(_OWORD *)(v37 + 16) = 0u;
      }
      if (v28)
      {
        v24 = sub_20EB277C4((uint64_t)v25, (uint64_t)v28, v35, a1 + 168, 20, *(double *)v11.i64, v14, *(double *)a5.i64, (int32x4_t)a6, (int32x4_t)a7);
      }
      else
      {
        v57 = sqrt(*v35 * *v35 + v35[1] * v35[1]);
        v24 = sub_20EB24018((uint64_t)v25, v35, (double *)(a1 + 168), 20, v57, v57, *(double *)a5.i64, (int32x4_t)a6, (int32x4_t)a7);
      }
    }
    goto LABEL_98;
  }
  if (v12 != 10)
  {
    v24 = sub_20EB38E20(a1, (uint64_t)v159, v160, v161, v162, v163);
    goto LABEL_98;
  }
  if (v161)
  {
    v161->f64[0] = 0.0;
    v36->f64[1] = 0.0;
    v36[1].f64[0] = 0.0;
  }
  if (v37)
  {
    *(_QWORD *)(v37 + 64) = 0;
    *(_OWORD *)(v37 + 32) = 0u;
    *(_OWORD *)(v37 + 48) = 0u;
    *(_OWORD *)v37 = 0u;
    *(_OWORD *)(v37 + 16) = 0u;
  }
  v38 = (*(double *)a1 + *(double *)(a1 + 32)) * 0.5;
  v24 = sub_20EB24F38((uint64_t)v25, (uint64_t)v35, a1 + 168, (double *)(a1 + 280), 0x14u, v38);
  if (v28)
  {
    if ((v24 & 1) == 0)
      return 0;
    if (!sub_20EB2450C(&v170, (uint64_t)&v171, &v168, (uint64_t)v25, (double *)(a1 + 168), v38))
      return 0;
    v39.i64[0] = *(_QWORD *)&v25[1].f64[0];
    *(_QWORD *)&v40 = v172.i64[0];
    _Q3 = (float64x2_t)v171;
    v174 = *(int8x16_t *)v25;
    v175 = v39.i64[0];
    v169 = 0;
    *(_QWORD *)&_Q5.f64[0] = v39.i64[0];
    *(_QWORD *)&_Q5.f64[1] = v174.i64[0];
    _Q5.f64[0] = vmlsq_f64(vmulq_f64(*(float64x2_t *)&v173, _Q5), (float64x2_t)vzip2q_s64(v173, v172), (float64x2_t)vextq_s8(v174, v39, 8uLL)).f64[1];
    __asm { FMLA            D6, D5, V3.D[1] }
    if (fabs(vmlad_n_f64(_D6, vmlsq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)vmulq_f64((float64x2_t)v172, (float64x2_t)v174), 1), (float64x2_t)v173, (float64x2_t)v174).f64[0], *(double *)v172.i64)) < 0.00000001)return 0;
    goto LABEL_77;
  }
LABEL_98:
  if ((v24 & 1) == 0)
    return 0;
LABEL_99:
  v58 = *(_DWORD *)(a1 + 992);
  if (v58 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_21025533E, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v58 = *(_DWORD *)(a1 + 992);
    if (v58 <= 7)
      goto LABEL_101;
  }
  else if (v58 <= 7)
  {
LABEL_101:
    if (v58 <= 3)
    {
      if (v58 <= 1)
      {
        if (!v58)
        {
          sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)&unk_21025533E, 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
          abort();
        }
        if (__x < 0.00000001)
          return 0;
        v178 = vmulq_n_f64(v157, 1.0 / __x);
        v59 = *(_DWORD *)(a1 + 992);
        if (v59 == -1)
          goto LABEL_274;
LABEL_203:
        if (v59 > 7)
          goto LABEL_276;
        goto LABEL_204;
      }
      if (v58 != 2)
      {
        _V0.D[1] = v157.f64[1];
        _D1 = v157.f64[1];
        __asm { FMLA            D16, D1, V0.D[1] }
        v110 = sqrt(_D16);
        v111 = fabs(__x);
        v112 = fabs(v110);
        v113 = v111 / v112;
        if (v111 >= v112)
          v113 = v112 / v111;
        v114 = (v112 - v111) / (v111 + v112);
        if (v111 >= v112)
          v114 = -v114;
        if (v113 > 0.414213562)
          v115 = 1;
        else
          v115 = 2;
        if (v113 > 0.414213562)
          v116 = -1;
        else
          v116 = 1;
        if (v113 <= 0.414213562)
          v114 = v113;
        if (_D16 >= 0.00000001)
        {
          if (v111 < v112)
            v116 = -v116;
          else
            v115 = v113 > 0.414213562;
          v137 = v110 == INFINITY && v111 == INFINITY;
          v138 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v114 * v114), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v114 * v114), (float64x2_t)xmmword_210315370), v114 * v114 * (v114 * v114))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v114 * v114), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v114 * v114), (float64x2_t)xmmword_210315380), v114 * v114 * (v114 * v114))), v114 * v114 * (v114 * v114) * (v114 * v114 * (v114 * v114))));
          v139 = v114 + v114 * vdivq_f64(v138, (float64x2_t)vdupq_laneq_s64((int64x2_t)v138, 1)).f64[0];
          if (v137)
            v139 = 0.785398163;
          if (v110 == 0.0 && __x == 0.0)
            v141 = 0.0;
          else
            v141 = v139;
          if (__x < 0.0)
          {
            v115 = 4 - v115;
            v116 = -v116;
          }
          if (v110 >= 0.0)
            v142 = v115;
          else
            v142 = -v115;
          v143 = (double)v142;
          if (v110 >= 0.0)
            v144 = v116;
          else
            v144 = -v116;
          v145 = v143 * 3.061617e-17 + v143 * 0.785398163 + v141 * (double)v144;
          v146 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(a1 + 168), *(int64x2_t *)(a1 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(a1 + 168), *(int64x2_t *)(a1 + 184)), v145 * v145)), v145 * v145);
          v117 = 1.0 / v110 * (v145 + v145 * (v146.f64[0] + vmuld_lane_f64(v145 * v145 * (v145 * v145), v146, 1)));
        }
        else
        {
          v117 = 1.0 / __x;
        }
        v71 = vmulq_n_f64(v157, v117);
        goto LABEL_266;
      }
      if (*(_DWORD *)(a1 + 212))
      {
        if (__x >= 0.00000001)
        {
          _Q3 = vmulq_n_f64(v157, 1.0 / __x);
          _D0 = vmuld_lane_f64(1.0 / __x, v157, 1);
          __asm { FMLA            D2, D0, V3.D[1] }
          v71 = vaddq_f64(vaddq_f64(vmulq_f64(vaddq_f64((float64x2_t)vdupq_lane_s64(_D2, 0), vmulq_f64(_Q3, vaddq_f64(_Q3, _Q3))), (float64x2_t)vextq_s8(*(int8x16_t *)(a1 + 192), *(int8x16_t *)(a1 + 192), 8uLL)), vmulq_laneq_f64(vmulq_n_f64(vaddq_f64(*(float64x2_t *)(a1 + 192), *(float64x2_t *)(a1 + 192)), _Q3.f64[0]), _Q3, 1)), vmulq_n_f64(_Q3, *(double *)(a1 + 168) * *(double *)&_D2+ 1.0+ *(double *)&_D2 * (*(double *)(a1 + 176) * *(double *)&_D2)+ *(double *)&_D2 * (*(double *)&_D2 * (*(double *)(a1 + 184) * *(double *)&_D2))));
          goto LABEL_211;
        }
        return 0;
      }
      if (!sub_20EB14380(&v178, &v157, (double *)(a1 + 168)))
        return 0;
LABEL_202:
      v59 = *(_DWORD *)(a1 + 992);
      if (v59 == -1)
        goto LABEL_274;
      goto LABEL_203;
    }
    if (v58 <= 5)
    {
      if (v58 == 5)
      {
        v61 = v157.f64[0] * v157.f64[0] + v157.f64[1] * v157.f64[1];
        if (v61 >= 0.00000001)
        {
          v121 = sqrt(v61);
          if (v121 <= __x)
          {
            v147 = v121 / __x * 0.785398163
                 - v121 / __x * (v121 / __x + -1.0) * (v121 / __x * 0.0663008339 + 0.244711287);
          }
          else
          {
            if (v121 <= -__x)
            {
              v123 = v121 / __x * 0.785398163
                   - v121 / __x * (-1.0 - v121 / __x) * (v121 / __x * -0.0663008339 + 0.244711287);
              v124 = 3.14159265;
            }
            else
            {
              v122 = fabs(__x / v121);
              v123 = __x / v121 * (v122 + -1.0) * (v122 * 0.0663008339 + 0.244711287) + __x / v121 * -0.785398163;
              v124 = 1.57079633;
            }
            v147 = v123 + v124;
          }
          v148 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(a1 + 168), *(int64x2_t *)(a1 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(a1 + 168), *(int64x2_t *)(a1 + 184)), v147 * v147)), v147 * v147);
          v62 = (v147 + v147 * (v148.f64[0] + vmuld_lane_f64(v147 * v147 * (v147 * v147), v148, 1))) / v121;
        }
        else
        {
          if (__x == 0.0)
            return 0;
          v62 = 1.0 / __x;
        }
        v178.f64[0] = v157.f64[0] * v62;
        v178.f64[1] = v157.f64[1] * v62;
        v59 = *(_DWORD *)(a1 + 992);
        if (v59 == -1)
          goto LABEL_274;
        goto LABEL_203;
      }
      v74 = __x;
      _Q0 = v157;
      _D1 = v157.f64[1];
      __asm { FMLA            D16, D1, V0.D[1] }
      v99 = sqrt(_D16);
      v100 = fabs(__x);
      v101 = fabs(v99);
      v102 = v100 / v101;
      if (v100 >= v101)
        v102 = v101 / v100;
      v103 = (v101 - v100) / (v100 + v101);
      if (v100 >= v101)
        v103 = -v103;
      if (v102 > 0.414213562)
        v104 = 1;
      else
        v104 = 2;
      if (v102 > 0.414213562)
        v105 = -1;
      else
        v105 = 1;
      if (v102 <= 0.414213562)
        v103 = v102;
      if (_D16 < 0.00000001)
        goto LABEL_183;
      if (v100 < v101)
        v105 = -v105;
      else
        v104 = v102 > 0.414213562;
      v125 = v99 == INFINITY && v100 == INFINITY;
      v126 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v103 * v103), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v103 * v103), (float64x2_t)xmmword_210315370), v103 * v103 * (v103 * v103))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v103 * v103), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v103 * v103), (float64x2_t)xmmword_210315380), v103 * v103 * (v103 * v103))), v103 * v103 * (v103 * v103) * (v103 * v103 * (v103 * v103))));
      v127 = v103 + v103 * vdivq_f64(v126, (float64x2_t)vdupq_laneq_s64((int64x2_t)v126, 1)).f64[0];
      if (v125)
        v127 = 0.785398163;
      if (v99 == 0.0 && __x == 0.0)
        v129 = 0.0;
      else
        v129 = v127;
      if (__x < 0.0)
      {
        v104 = 4 - v104;
        v105 = -v105;
      }
      if (v99 >= 0.0)
        v130 = v104;
      else
        v130 = -v104;
      v131 = (double)v130;
      if (v99 >= 0.0)
        v132 = v105;
      else
        v132 = -v105;
      v133 = v131 * 3.061617e-17 + v131 * 0.785398163 + v129 * (double)v132;
      v134 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(a1 + 168), *(int64x2_t *)(a1 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(a1 + 168), *(int64x2_t *)(a1 + 184)), v133 * v133)), v133 * v133);
      v95 = v133 + v133 * (v134.f64[0] + vmuld_lane_f64(v133 * v133 * (v133 * v133), v134, 1));
      v96 = 1.0 / v99;
      goto LABEL_240;
    }
    if (v58 == 6)
    {
      v72 = vaddq_f64(vdivq_f64(v157, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&__x, 0)), *(float64x2_t *)(a1 + 192));
      v73 = sqrt(vaddvq_f64(vmulq_f64(v72, v72)));
      v178 = vaddq_f64(*(float64x2_t *)(a1 + 208), vmulq_n_f64(v72, v73 * (v73 * (*(double *)(a1 + 168) + v73 * (*(double *)(a1 + 176) + *(double *)(a1 + 184) * v73)))+ 1.0));
      v59 = *(_DWORD *)(a1 + 992);
      if (v59 == -1)
        goto LABEL_274;
      goto LABEL_203;
    }
    v60 = sub_20EB31FFC(a1, &v178, &v157);
    goto LABEL_201;
  }
  if (v58 <= 0xB)
  {
    if (v58 > 9)
    {
      if (v58 == 10)
        v60 = sub_20EB24288(&v178, (uint64_t)&v157, (double *)(a1 + 168), (*(double *)a1 + *(double *)(a1 + 32)) * 0.5);
      else
        v60 = sub_20EB3A2E4(a1, &v178, &v157);
    }
    else
    {
      if (v58 != 9)
      {
        v74 = __x;
        _Q0 = v157;
        _D1 = v157.f64[1];
        __asm { FMLA            D16, D1, V0.D[1] }
        v78 = sqrt(_D16);
        v79 = fabs(__x);
        v80 = fabs(v78);
        v81 = v79 / v80;
        if (v79 >= v80)
          v81 = v80 / v79;
        v82 = (v80 - v79) / (v79 + v80);
        if (v79 >= v80)
          v82 = -v82;
        if (v81 > 0.414213562)
          v83 = 1;
        else
          v83 = 2;
        if (v81 > 0.414213562)
          v84 = -1;
        else
          v84 = 1;
        if (v81 <= 0.414213562)
          v82 = v81;
        if (_D16 < 0.00000001)
        {
LABEL_183:
          v106 = 1.0 / v74;
LABEL_241:
          v135 = vmulq_n_f64(_Q0, v106);
          v136 = *(double *)a1;
          v120 = v135.f64[1];
LABEL_282:
          v149 = v136 * v135.f64[0];
          v150 = *(double *)(a1 + 8);
          goto LABEL_283;
        }
        if (v79 < v80)
          v84 = -v84;
        else
          v83 = v81 > 0.414213562;
        v85 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v82 * v82), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v82 * v82), (float64x2_t)xmmword_210315370), v82 * v82 * (v82 * v82))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v82 * v82), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v82 * v82), (float64x2_t)xmmword_210315380), v82 * v82 * (v82 * v82))), v82 * v82 * (v82 * v82) * (v82 * v82 * (v82 * v82))));
        v86 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v85, 1);
        _ZF = v78 == INFINITY && v79 == INFINITY;
        v88 = v82 + v82 * vdivq_f64(v85, v86).f64[0];
        if (_ZF)
          v88 = 0.785398163;
        if (v78 == 0.0 && __x == 0.0)
          v90 = 0.0;
        else
          v90 = v88;
        if (__x < 0.0)
        {
          v83 = 4 - v83;
          v84 = -v84;
        }
        if (v78 >= 0.0)
          v91 = v83;
        else
          v91 = -v83;
        v92 = (double)v91;
        if (v78 >= 0.0)
          v93 = v84;
        else
          v93 = -v84;
        v94 = v92 * 3.061617e-17 + v92 * 0.785398163 + v90 * (double)v93;
        v95 = v94
            * (v94
             * v94
             * (*(double *)(a1 + 168)
              + v94
              * v94
              * (*(double *)(a1 + 176)
               + v94
               * v94
               * (*(double *)(a1 + 184)
                + v94
                * v94
                * (*(double *)(a1 + 192)
                 + v94
                 * v94
                 * (*(double *)(a1 + 200) + v94 * v94 * (*(double *)(a1 + 208) + v94 * v94 * *(double *)(a1 + 216)))))))
             + 1.0);
        v96 = 1.0 / v78;
LABEL_240:
        v106 = v96 * v95;
        goto LABEL_241;
      }
      v60 = sub_20EB3641C(a1, &v178, &v157);
    }
LABEL_201:
    if ((v60 & 1) == 0)
      return 0;
    goto LABEL_202;
  }
  if (v58 > 0xD)
  {
    if (v58 == 14)
      v60 = sub_20EB247C0(&v178, (uint64_t)&v157, (double *)(a1 + 168), (*(double *)a1 + *(double *)(a1 + 32)) * 0.5);
    else
      v60 = sub_20EB3E39C(a1, &v178, &v157);
    goto LABEL_201;
  }
  if (v58 != 13 || __x < 0.00000001)
    return 0;
  _Q0 = vdivq_f64(v157, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&__x, 0));
  v64 = (*(double *)a1 + *(double *)(a1 + 32)) * 0.5;
  _D3 = _Q0.f64[1];
  __asm { FMLA            D2, D3, V0.D[1] }
  v67 = v64 * (_D2 * v64);
  v178 = vdivq_f64(_Q0, (float64x2_t)vdupq_lane_s64(COERCE__INT64(v67* (*(double *)(a1 + 168)+ v64 * *(double *)(a1 + 224)+ v67* (*(double *)(a1 + 176)+ v64 * *(double *)(a1 + 232)+ v67* (*(double *)(a1 + 184)+ v64 * *(double *)(a1 + 240)+ v67* (*(double *)(a1 + 192)+ v64 * *(double *)(a1 + 248)+ v67* (*(double *)(a1 + 200)+ v64 * *(double *)(a1 + 256)+ v67
                               * (*(double *)(a1 + 208)
                                + v64 * *(double *)(a1 + 264)
                                + v67 * (*(double *)(a1 + 216) + *(double *)(a1 + 272) * v64 + v67 * 0.0)))))))
                          / 100.0
                          + 1.0),
                          0));
  v59 = *(_DWORD *)(a1 + 992);
  if (v59 != -1)
    goto LABEL_203;
LABEL_274:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_21025533E, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v59 = *(_DWORD *)(a1 + 992);
  if (v59 > 7)
  {
LABEL_276:
    if (v59 <= 0xB)
    {
      v118 = v59 == 9;
      if (v59 <= 9)
        goto LABEL_278;
    }
LABEL_281:
    v150 = *(double *)(a1 + 8);
    v120 = v178.f64[1];
    v149 = *(double *)a1 * v178.f64[0];
    goto LABEL_283;
  }
LABEL_204:
  if (v59 <= 3)
  {
    if (v59 <= 1)
    {
      if (!v59)
      {
        sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)&unk_21025533E, 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
        abort();
      }
      goto LABEL_281;
    }
    v71 = v178;
    if (v59 == 2)
    {
LABEL_211:
      v119 = vaddvq_f64(vmulq_f64(*(float64x2_t *)a1, v71));
      v120 = v71.f64[1];
      goto LABEL_284;
    }
LABEL_266:
    v120 = v71.f64[1];
    v119 = *(double *)a1 * v71.f64[0] + vmuld_lane_f64(*(double *)(a1 + 8), v71, 1);
    goto LABEL_284;
  }
  v118 = v59 == 5;
  if (v59 > 5)
    goto LABEL_281;
LABEL_278:
  v136 = *(double *)a1;
  v135.f64[0] = v178.f64[0];
  if (!v118)
  {
    v120 = v178.f64[1];
    goto LABEL_282;
  }
  v149 = v136 * v178.f64[0];
  v150 = *(double *)(a1 + 8);
  v120 = v178.f64[1];
LABEL_283:
  v119 = v149 + v150 * v120;
LABEL_284:
  _Q1.f64[0] = v119 + *(double *)(a1 + 16);
  _Q1.f64[1] = v120 * *(double *)(a1 + 32) + *(double *)(a1 + 40);
  _D2 = vsubq_f64(_Q1, *a2).f64[1];
  __asm { FMLA            D1, D2, V0.D[1] }
  if (_Q1.f64[0] > 1.0)
    return 0;
  _V0.D[1] = v157.f64[1];
  _D2 = v157.f64[1];
  __asm { FMLA            D1, D2, V0.D[1] }
  return atan2(sqrt(_D1), __x);
}

double sub_20EB86618(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, double a5)
{
  int v10;
  int v11;
  double v12;
  double v13;
  double v14;
  __double2 v15;
  double v16;
  float64x2_t v17;
  double v18;
  float64x2_t v19;
  double v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  double v26;
  float64x2_t v30;
  float64x2_t v36;
  float64x2_t v38;
  double result;

  v10 = *(_DWORD *)(a1 + 992);
  if (v10 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_21025564A, 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_11;
    }
    v10 = *(_DWORD *)(a1 + 992);
  }
  if (!v10)
    goto LABEL_10;
  v11 = *((_DWORD *)a2 + 248);
  if (v11 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_21025564A, 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_11;
    }
    v11 = *((_DWORD *)a2 + 248);
  }
  if (!v11)
  {
LABEL_10:
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)&unk_21025564A, 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_11:
    abort();
  }
  v12 = atan2(-*(double *)(a3 + 40), *(long double *)(a3 + 64));
  v13 = asin(*(long double *)(a3 + 16));
  v14 = atan2(-*(double *)(a3 + 8), *(long double *)a3);
  v15 = __sincos_stret(v14);
  v16 = *(double *)(a1 + 88);
  v17 = *(float64x2_t *)(a1 + 72);
  v18 = *(double *)(a1 + 112);
  v19 = *(float64x2_t *)(a1 + 96);
  v20 = *(double *)(a1 + 136);
  v21 = *(float64x2_t *)(a1 + 120);
  v22 = vmlaq_f64(vmlsq_lane_f64(vmulq_n_f64(v17, v15.__cosval), v19, v15.__sinval, 0), (float64x2_t)0, v21);
  v23 = vmlaq_f64(vmlaq_n_f64(vmulq_n_f64(v17, v15.__sinval), v19, v15.__cosval), (float64x2_t)0, v21);
  _D0 = v16 * v15.__sinval + v18 * v15.__cosval + v20 * 0.0;
  _Q1 = vaddq_f64(v21, vmlaq_f64(vmulq_f64(v17, (float64x2_t)0), (float64x2_t)0, v19));
  v26 = v20 + v16 * 0.0 + v18 * 0.0;
  v17.f64[0] = *((float64_t *)a2 + 2);
  _Q4 = *a2;
  v19.f64[0] = *((float64_t *)a2 + 5);
  _Q6 = *(float64x2_t *)((char *)a2 + 24);
  v21.f64[0] = *((float64_t *)a2 + 8);
  _Q17 = (float64x2_t)a2[3];
  v30 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v22, *(double *)a2), v23, *(float64x2_t *)a2, 1), _Q1, v17.f64[0]);
  __asm { FMLA            D21, D0, V4.D[1] }
  v17.f64[0] = _D21 + v26 * v17.f64[0];
  v36 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v22, _Q6.f64[0]), v23, _Q6, 1), _Q1, v19.f64[0]);
  __asm { FMLA            D21, D0, V6.D[1] }
  v38 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v22, _Q17.f64[0]), v23, _Q17, 1), _Q1, v21.f64[0]);
  __asm { FMLA            D1, D0, V17.D[1] }
  *(float64x2_t *)a4 = v30;
  *(float64x2_t *)(a4 + 24) = v36;
  *(double *)(a4 + 64) = _Q1.f64[0] + v26 * v21.f64[0];
  *(float64x2_t *)(a4 + 48) = v38;
  *(double *)(a4 + 16) = v13 * a5 + v17.f64[0];
  result = _D21 + v26 * v19.f64[0] - v12 * a5;
  *(double *)(a4 + 40) = result;
  return result;
}

float64_t sub_20EB86840@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 *v4;
  double v5;
  float64x2_t v6;
  uint64_t v7;
  double v8;
  float64x2_t v9;
  double v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64_t v14;
  int8x16_t v15;
  double v16;
  float64x2_t v17;
  int v18;
  int v19;
  double v20;
  double v21;
  double v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v26;
  double v27;
  float64x2_t v28;
  double v31;
  double v33;
  float64x2_t v34;
  float64x2_t v40;
  double v44;
  double v45;
  double v48;
  float64x2_t v50;
  float64_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64_t result;
  int8x16_t v55;
  int8x16_t v56;
  double v57;
  double v58;
  float64x2_t v59;
  float64x2_t v60;
  double v61;
  double v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  double v67;
  double v68;
  float64x2_t v69;
  float64x2_t v70;
  float64_t v71;
  float64_t v72;
  double v73;
  double v74;
  float64x2_t v75;
  float64x2_t v76;
  double v77;
  double v78;

  if (*(_BYTE *)(a2 + 1536))
    v4 = (__int128 *)(a2 + 96);
  else
    v4 = 0;
  v5 = *(double *)(a2 + 16);
  v6 = *(float64x2_t *)a2;
  if (*(_BYTE *)(a1 + 1536))
    v7 = a1 + 96;
  else
    v7 = 0;
  v8 = *(double *)(a2 + 40);
  v9 = *(float64x2_t *)(a2 + 24);
  v10 = *(double *)(a2 + 64);
  v11 = *(float64x2_t *)(a2 + 48);
  v12.f64[0] = *(float64_t *)(a1 + 16);
  v13 = *(float64x2_t *)a1;
  v14 = *(double *)(a1 + 40);
  v15 = *(int8x16_t *)(a1 + 24);
  v16 = *(double *)(a1 + 64);
  v17 = *(float64x2_t *)(a1 + 48);
  v18 = *(_DWORD *)(v7 + 992);
  if (v18 == -1)
  {
    v55 = *(int8x16_t *)(a1 + 24);
    v57 = *(double *)(a1 + 40);
    v59 = *(float64x2_t *)a2;
    v61 = *(double *)(a2 + 16);
    v63 = *(float64x2_t *)(a2 + 24);
    v65 = *(float64x2_t *)a1;
    v67 = *(double *)(a2 + 40);
    v69 = *(float64x2_t *)(a1 + 48);
    v71 = *(double *)(a1 + 16);
    v73 = *(double *)(a1 + 64);
    v75 = *(float64x2_t *)(a2 + 48);
    v77 = *(double *)(a2 + 64);
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_21025564A, 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_17;
    }
    v18 = *(_DWORD *)(v7 + 992);
    v11 = v75;
    v10 = v77;
    v12.f64[0] = v71;
    v16 = v73;
    v8 = v67;
    v17 = v69;
    v9 = v63;
    v13 = v65;
    v6 = v59;
    v5 = v61;
    v15 = v55;
    v14 = v57;
  }
  if (!v18)
    goto LABEL_16;
  v19 = *((_DWORD *)v4 + 248);
  if (v19 == -1)
  {
    v56 = v15;
    v58 = v14;
    v60 = v6;
    v62 = v5;
    v64 = v9;
    v66 = v13;
    v68 = v8;
    v70 = v17;
    v72 = v12.f64[0];
    v74 = v16;
    v76 = v11;
    v78 = v10;
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_21025564A, 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_17;
    }
    v19 = *((_DWORD *)v4 + 248);
    v11 = v76;
    v10 = v78;
    v12.f64[0] = v72;
    v16 = v74;
    v8 = v68;
    v17 = v70;
    v9 = v64;
    v13 = v66;
    v6 = v60;
    v5 = v62;
    v15 = v56;
    v14 = v58;
  }
  if (!v19)
  {
LABEL_16:
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)&unk_21025564A, 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_17:
    abort();
  }
  v20 = *(double *)vextq_s8((int8x16_t)v6, (int8x16_t)v6, 8uLL).i64;
  v21 = *(double *)vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL).i64;
  v22 = *(double *)vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL).i64;
  *(_QWORD *)&v23.f64[0] = vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL).u64[0];
  v24 = *(float64x2_t *)(v7 + 72);
  _D1 = *(_QWORD *)(v7 + 112);
  v26 = *(float64x2_t *)(v7 + 96);
  v27 = *(double *)(v7 + 136);
  v28 = *(float64x2_t *)(v7 + 120);
  *(_QWORD *)&v13.f64[1] = v15.i64[0];
  *(_QWORD *)&v23.f64[1] = vextq_s8(v15, v15, 8uLL).u64[0];
  v12.f64[1] = v14;
  _Q20 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v13, v6.f64[0]), v23, v20), v12, v5);
  v17.f64[1] = *(double *)vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).i64;
  _Q18 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v13, v9.f64[0]), v23, v21), v12, v8);
  v31 = vmulq_f64(v17, v9).f64[0] + v17.f64[1] * v21 + v16 * v8;
  _Q21 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v13, v11.f64[0]), v23, v22), v12, v10);
  v33 = vmulq_f64(v17, v11).f64[0] + v17.f64[1] * v22 + v16 * v10;
  v34 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v24, _Q20.f64[0]), v26, _Q20, 1), v28, vmulq_f64(v17, v6).f64[0] + v17.f64[1] * v20 + v16 * v5);
  __asm { FMLA            D19, D1, V20.D[1] }
  v40 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v24, _Q18.f64[0]), v26, _Q18, 1), v28, v31);
  __asm { FMLA            D20, D1, V18.D[1] }
  _D7 = _Q20.f64[0] + v27 * v31;
  _Q4 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v24, _Q21.f64[0]), v26, _Q21, 1), v28, v33);
  __asm { FMLA            D0, D1, V21.D[1] }
  v44 = _D0 + v27 * v33;
  v45 = *((double *)v4 + 2);
  _Q2 = *v4;
  v28.f64[0] = *((float64_t *)v4 + 5);
  _Q5 = *(float64x2_t *)((char *)v4 + 24);
  v48 = *((double *)v4 + 8);
  _Q18 = (float64x2_t)v4[3];
  v50 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v34, *(double *)v4), v40, *(float64x2_t *)v4, 1), _Q4, v45);
  __asm { FMLA            D21, D7, V2.D[1] }
  v51 = _Q21.f64[0] + v44 * v45;
  v52 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v34, _Q5.f64[0]), v40, _Q5, 1), _Q4, v28.f64[0]);
  __asm { FMLA            D21, D7, V5.D[1] }
  v53 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v34, _Q18.f64[0]), v40, _Q18, 1), _Q4, v48);
  __asm { FMLA            D4, D7, V18.D[1] }
  *(float64_t *)(a3 + 16) = v51;
  *(float64x2_t *)a3 = v50;
  *(double *)(a3 + 40) = _Q21.f64[0] + v44 * v28.f64[0];
  *(float64x2_t *)(a3 + 24) = v52;
  result = _Q4.f64[0] + v44 * v48;
  *(float64_t *)(a3 + 64) = result;
  *(float64x2_t *)(a3 + 48) = v53;
  return result;
}

BOOL sub_20EB86B28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int8x16_t a5, float64x2_t a6)
{
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v11;
  double v12;
  double v13;
  unint64_t v15;
  float64x2_t v16;
  double v24;
  int64x2_t v25;
  double v30;
  float64x2_t v33;
  float64x2_t v35;
  double v36;
  double v39;
  float64x2_t v41;
  int64x2_t v44;
  float64x2_t v45;
  unint64_t v46;
  float64x2_t v48;
  int64x2_t v51;
  float64x2_t v52;
  unint64_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  double v59;
  float64x2_t v60;
  double v63;
  float64x2_t v64;
  float64x2_t v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  float64_t v72;
  double v73;
  double v74;
  float64_t v75;
  double v76;
  double v77;
  float64x2_t v78;
  int8x16_t v79;

  _D7 = *(_QWORD *)(a4 + 72);
  v11.f64[0] = *(float64_t *)(a4 + 24);
  v12 = *(double *)(a4 + 56);
  v6.f64[0] = *(float64_t *)(a4 + 88);
  *(double *)a5.i64 = sqrt(v11.f64[0] * v11.f64[0] + v12 * v12 + v6.f64[0] * v6.f64[0]);
  v13 = 1.0;
  if (*(double *)a5.i64 == 0.0)
    v7.f64[0] = 1.0;
  else
    v7.f64[0] = 1.0 / *(double *)a5.i64;
  v11.f64[1] = *(float64_t *)(a4 + 56);
  _Q3 = vmulq_n_f64(v11, v7.f64[0]);
  v15 = vextq_s8((int8x16_t)_Q3, (int8x16_t)_Q3, 8uLL).u64[0];
  v16 = vmulq_f64(v6, v7);
  v8.f64[0] = *(float64_t *)(a2 + 16);
  _Q24 = *(float64x2_t *)a2;
  _D26 = *(_QWORD *)(a2 + 8);
  __asm { FMLA            D23, D26, V24.D[1] }
  v24 = sqrt(_D23 + v8.f64[0] * v8.f64[0]);
  v9.f64[0] = 1.0 / v24;
  if (v24 == 0.0)
    v9.f64[0] = 1.0;
  v25 = (int64x2_t)vmulq_f64(v8, v9);
  _Q24 = vmulq_n_f64(_Q24, v9.f64[0]);
  v8.f64[0] = *(float64_t *)(a3 + 16);
  _Q26 = *(float64x2_t *)a3;
  _Q27 = vmulq_f64(_Q26, _Q26);
  _D28 = *(_QWORD *)(a3 + 8);
  __asm { FMLA            D27, D28, V26.D[1] }
  _Q27.f64[0] = sqrt(_Q27.f64[0] + v8.f64[0] * v8.f64[0]);
  if (_Q27.f64[0] == 0.0)
    _Q27.f64[0] = 1.0;
  else
    _Q27.f64[0] = 1.0 / _Q27.f64[0];
  *(_QWORD *)&v30 = *(_OWORD *)&vmulq_f64(v8, _Q27);
  _Q5.f64[1] = *(float64_t *)(a4 + 32);
  _Q26 = vmulq_n_f64(_Q26, _Q27.f64[0]);
  v33.f64[1] = *(float64_t *)(a4 + 40);
  _Q19.f64[1] = *(float64_t *)(a4 + 48);
  _Q5.f64[0] = *(float64_t *)a4;
  v33.f64[0] = *(float64_t *)(a4 + 8);
  _Q19.f64[0] = *(float64_t *)(a4 + 16);
  v35 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q5, _Q26.f64[0]), v33, _Q26, 1), _Q19, v30);
  __asm { FMLA            D19, D7, V26.D[1] }
  v36 = vmlad_n_f64(_Q19.f64[0], *(double *)(a4 + 80), v30);
  _D26 = _Q24.f64[1];
  _Q5.f64[0] = v12 * v7.f64[0];
  __asm { FMLA            D7, D5, V24.D[1] }
  v39 = vmlad_n_f64(_D7, v6.f64[0] * v7.f64[0], *(double *)v25.i64);
  v41 = vmulq_n_f64(_Q3, v39);
  _Q6 = vsubq_f64(_Q24, v41);
  v41.f64[0] = *(double *)v25.i64 - v39 * v16.f64[0];
  _Q7 = vmulq_f64(_Q6, _Q6);
  _D16 = _Q6.f64[1];
  __asm { FMLA            D7, D16, V6.D[1] }
  _Q7.f64[0] = sqrt(_Q7.f64[0] + v41.f64[0] * v41.f64[0]);
  if (_Q7.f64[0] == 0.0)
    _Q7.f64[0] = 1.0;
  else
    _Q7.f64[0] = 1.0 / _Q7.f64[0];
  v44 = (int64x2_t)vmulq_f64(v41, _Q7);
  v45 = vmulq_n_f64(_Q6, _Q7.f64[0]);
  v46 = vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL).u64[0];
  v48 = vmulq_f64((float64x2_t)vextq_s8((int8x16_t)_Q3, (int8x16_t)v16, 8uLL), (float64x2_t)vzip1q_s64(v25, (int64x2_t)_Q24));
  _Q17 = vsubq_f64(v48, vmulq_f64((float64x2_t)vzip1q_s64((int64x2_t)v16, (int64x2_t)_Q3), (float64x2_t)vextq_s8((int8x16_t)_Q24, (int8x16_t)v25, 8uLL)));
  v48.f64[0] = vmuld_lane_f64(_Q3.f64[0], _Q24, 1) - vmuld_lane_f64(_Q24.f64[0], _Q3, 1);
  _Q18 = vmulq_f64(_Q17, _Q17);
  _D20 = _Q17.f64[1];
  __asm { FMLA            D18, D20, V17.D[1] }
  _Q18.f64[0] = sqrt(_Q18.f64[0] + v48.f64[0] * v48.f64[0]);
  if (_Q18.f64[0] == 0.0)
    _Q18.f64[0] = 1.0;
  else
    _Q18.f64[0] = 1.0 / _Q18.f64[0];
  v51 = (int64x2_t)vmulq_f64(v48, _Q18);
  v52 = vmulq_n_f64(_Q17, _Q18.f64[0]);
  v53 = vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL).u64[0];
  v54 = (float64x2_t)vzip1q_s64((int64x2_t)v45, (int64x2_t)v52);
  v55 = (float64x2_t)vzip2q_s64((int64x2_t)v45, (int64x2_t)v52);
  v56 = (float64x2_t)vzip1q_s64(v44, v51);
  v57 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v54, _Q24.f64[0]), v55, _Q24, 1), v56, *(double *)v25.i64);
  __asm { FMLA            D20, D26, V3.D[1] }
  v59 = vmlad_n_f64(_D20, *(double *)v25.i64, v16.f64[0]);
  v60 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v54, v35.f64[0]), v55, v35, 1), v56, v36);
  _D22 = v35.f64[1];
  __asm { FMLA            D24, D22, V3.D[1] }
  v63 = vmlad_n_f64(_D24, v36, v16.f64[0]);
  v64 = vmulq_f64(v57, v57);
  v65 = vmulq_f64(v60, v60);
  v66 = vmuld_lane_f64(v60.f64[1], v60, 1);
  v67 = vsubq_f64(v64, v65).f64[0] - v66;
  v68 = sqrt(v67 * v67 + 4.0 * v57.f64[0] * v57.f64[0] * v60.f64[0] * v60.f64[0]);
  v69 = v57.f64[0] * v63 - v59 * v60.f64[0];
  if (v69 == 0.0)
    v69 = 1.0;
  v70 = -v60.f64[0] / v69;
  v60.f64[0] = v60.f64[0] + v60.f64[0];
  v71 = v67 - v68;
  v72 = v57.f64[0] * (v63 * v60.f64[0]) + v59 * v71;
  v73 = v60.f64[1] * v71;
  v74 = v60.f64[1] * v72;
  if (v74 != 0.0)
    v13 = v74;
  a6.f64[0] = v73 / v13;
  if (v60.f64[1] == 0.0)
    a6.f64[0] = v70;
  v75 = v57.f64[0] / (v68 + v68);
  v76 = (vaddq_f64(v64, v65).f64[0] - v66 + v68) * v75 * a6.f64[0];
  v77 = a6.f64[0] * (v75 * (v60.f64[1] * v60.f64[0]));
  a6.f64[0] = v59 * a6.f64[0];
  *(_QWORD *)&v45.f64[1] = v46;
  *(_QWORD *)&v52.f64[1] = v53;
  *(_QWORD *)&_Q3.f64[1] = v15;
  v78 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v45, v76), v52, v77), _Q3, a6.f64[0]);
  a6.f64[0] = *(double *)v44.i64 * v76 + *(double *)v51.i64 * v77 + v16.f64[0] * a6.f64[0];
  v16.f64[0] = 0.0;
  v79 = (int8x16_t)vcgtq_f64(v16, a6);
  __asm { FMOV            V3.2D, #1.0 }
  *(_QWORD *)(a1 + 16) = *(_OWORD *)&vmulq_f64(a6, (float64x2_t)vbslq_s8(v79, _Q3, a5));
  *(float64x2_t *)a1 = vmulq_f64(v78, (float64x2_t)vbslq_s8((int8x16_t)vdupq_lane_s64(vmvnq_s8(v79).i64[0], 0), (int8x16_t)vdupq_lane_s64(a5.i64[0], 0), _Q3));
  return a6.f64[0] >= 0.0;
}

float64x2_t sub_20EB86E08(double *a1, float64x2_t *a2, uint64_t a3, uint64_t a4, double *a5, double *a6)
{
  double v7;
  double v9;
  float64x2_t v11;
  double v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  float64x2_t v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  float64x2_t v43;
  double v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  double v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  double v53;
  float64x2_t v54;
  double v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  int64x2_t v74;
  float64x2_t v75;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t result;
  double v81;
  unint64_t v82;
  double v83;
  double v84;
  double v85;
  double v86;

  v7 = *a5;
  _D23 = a5[1];
  v9 = *a6;
  _D3 = a6[1];
  _Q4.f64[0] = *(float64_t *)(a3 + 16);
  v11 = *(float64x2_t *)(a3 + 24);
  _Q16 = *(float64x2_t *)(a3 + 48);
  _Q4.f64[1] = *(float64_t *)(a3 + 40);
  _Q18 = vaddq_f64(_Q4, vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)a3, (int64x2_t)v11), *a5), (float64x2_t)vzip2q_s64(*(int64x2_t *)a3, (int64x2_t)v11), _D23));
  __asm
  {
    FMLA            D4, D23, V16.D[1]
    FMLA            D7, D3, V18.D[1]
  }
  v19 = *(double *)(a3 + 64) + _Q4.f64[0] + _D7;
  v20 = vaddq_f64(_Q16, vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)a3, *a6), v11, _D3));
  v21 = vmulq_f64(_Q18, _Q18);
  v22 = vmulq_f64(v20, v20);
  v23 = vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v22, 1), vaddq_f64(vaddq_f64(v21, (float64x2_t)vdupq_laneq_s64((int64x2_t)v21, 1)), v22)).f64[0];
  if (v23 == 0.0)
    v24 = 1.0;
  else
    v24 = 1.0 / v23;
  v85 = v19;
  v86 = v24;
  v25 = sqrt(v24);
  *a1 = v19 * v25;
  v27 = *(double *)(a3 + 16);
  v26 = *(double *)(a3 + 24);
  v28 = *(double *)(a3 + 8);
  v83 = v28 - _D23 * v27;
  *(double *)&v82 = _D23 * *(double *)a3 - v7 * v28;
  v29 = *(double *)(a3 + 32);
  v30 = *(double *)(a3 + 40);
  v81 = v29 - _D23 * v30;
  v84 = _D23 * v26 - v7 * v29;
  v31 = *(double *)(a3 + 64);
  v32 = -v31 - _D3 * v30 - v9 * v27;
  v33 = _D3 * v29;
  v35 = *(double *)(a3 + 48);
  v34 = *(double *)(a3 + 56);
  v36.f64[0] = v9 * v28 + v33 + v34;
  v37 = v9 * v27 + _D3 * v30 + v31;
  v38 = *(double *)(a4 + 56);
  v39 = *(double *)(a4 + 64);
  v40 = *(double *)(a4 + 32);
  v41 = *(double *)(a4 + 24);
  v42 = *(double *)(a4 + 48);
  v43.f64[0] = v39 + _D23 * v38 + v7 * v42;
  v43.f64[1] = -*(double *)(a4 + 40) - _D23 * v40 - v7 * v41;
  v44 = *(double *)(a4 + 8);
  v45.f64[0] = *(float64_t *)(a4 + 16);
  v46.f64[0] = v84;
  v46.f64[1] = -v39 - _D23 * v38 - v7 * v42;
  v47.f64[0] = 0.0;
  v47.f64[1] = v45.f64[0] + _D23 * v44 + v7 * *(double *)a4;
  v48 = v7 * v27 - *(double *)a3;
  v49.f64[0] = -v35 - _D3 * v26 - v9 * *(double *)a3;
  v36.f64[1] = v41 - _D3 * v42;
  v50.f64[0] = 0.0;
  v50.f64[1] = v32;
  v51.f64[0] = v9 * v42 - *(double *)a4;
  v51.f64[1] = _D3 * *(double *)a4 - v9 * v41;
  v52.f64[0] = v9 * v38 - v44;
  v49.f64[1] = v40 - _D3 * v38;
  v53 = v37;
  v52.f64[1] = _D3 * v44 - v9 * v40;
  v54.f64[0] = v83;
  v54.f64[1] = v48;
  v55 = v7 * v30 - v26;
  v56.f64[0] = v81;
  v56.f64[1] = v55;
  v57 = vmulq_n_f64(v43, _Q18.f64[0]);
  v58 = vmulq_n_f64(v54, _Q18.f64[0]);
  v59 = vmulq_n_f64((float64x2_t)v82, _Q18.f64[0]);
  v60 = vmulq_laneq_f64(v47, _Q18, 1);
  v61 = vmulq_laneq_f64(v46, _Q18, 1);
  v62 = vmulq_laneq_f64(v56, _Q18, 1);
  v63 = vmulq_n_f64(v51, v20.f64[0]);
  v64 = vmulq_n_f64(v50, v20.f64[0]);
  v65 = vmulq_n_f64(v36, v20.f64[0]);
  v66 = vmulq_laneq_f64(v52, v20, 1);
  v67 = vmulq_laneq_f64((float64x2_t)*(unint64_t *)&v53, v20, 1);
  v68 = vmulq_laneq_f64(v49, v20, 1);
  v50.f64[1] = v59.f64[1];
  v50.f64[0] = -v59.f64[0];
  v69 = vsubq_f64(vnegq_f64(v58), v62);
  v70 = vaddq_f64(v59, v61);
  *(_QWORD *)&v61.f64[0] = *(_OWORD *)&vsubq_f64(v50, v61);
  v61.f64[1] = v70.f64[1];
  v71 = vaddq_f64(v68, vaddq_f64(v65, v61));
  v72 = vaddq_f64(v67, vaddq_f64(v64, v69));
  v73 = vaddq_f64(v66, vaddq_f64(v63, vaddq_f64(v57, v60)));
  v74 = *(int64x2_t *)(a4 + 24);
  v75 = (float64x2_t)vzip1q_s64(*(int64x2_t *)a4, v74);
  _Q4 = (float64x2_t)vzip2q_s64(*(int64x2_t *)a4, v74);
  _Q5 = *(float64x2_t *)(a4 + 48);
  v78 = vmlaq_n_f64(vmulq_n_f64(v75, v7), _Q4, _D23);
  __asm { FMLA            D4, D23, V5.D[1] }
  v45.f64[1] = *(float64_t *)(a4 + 40);
  v79 = vaddq_f64(v45, v78);
  _Q4.f64[0] = v39 + _Q4.f64[0];
  v61.f64[0] = v79.f64[1] - _D3 * _Q4.f64[0];
  _Q4.f64[0] = v9 * _Q4.f64[0] - v79.f64[0];
  _Q5.f64[0] = -(v9 * *(double *)&v82 + _D3 * v84 + _D23 * v35 - v7 * v34);
  _Q5.f64[1] = v61.f64[0];
  _Q4.f64[1] = _D3 * v79.f64[0] - vmuld_lane_f64(v9, v79, 1);
  v63.f64[0] = -(v9 * v83 + _D3 * v81 + v34 - _D23 * v31);
  v63.f64[1] = -(v9 * v48 + _D3 * v55 + v7 * v31 - v35);
  v60.f64[0] = v85 * v86 * v25;
  a2[1] = vsubq_f64(vmulq_n_f64(_Q5, v25), vmulq_n_f64(v71, v60.f64[0]));
  a2[2] = vsubq_f64(vmulq_n_f64(_Q4, v25), vmulq_n_f64(v73, v60.f64[0]));
  result = vsubq_f64(vmulq_n_f64(v63, v25), vmulq_n_f64(v72, v60.f64[0]));
  *a2 = result;
  return result;
}

__n128 sub_20EB871A8(uint64_t a1, double *a2, float64x2_t *a3, uint64_t a4, int a5, double a6, double a7, double a8, __n128 a9)
{
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  int64x2_t v27;
  int64x2_t v28;
  __int128 v29;
  int8x16_t v30;
  double v31;
  uint64_t v32;
  double *v33;
  double *v34;
  double v35;
  double v36;
  double v37;
  double v40;
  double v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  double v50;
  double v51;
  double v52;
  float64x2_t v53;
  double v54;
  double v55;
  double v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  double v62;
  double v63;
  double v64;
  float64x2_t v65;
  double v66;
  int v67;
  double v68;
  double v69;
  float64x2_t *v70;
  float64x2_t *v71;
  __int128 v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  double v85;
  __int128 v86;
  float64_t v87;
  double v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  double v94;
  double v95;
  double v96;
  double v97;
  int8x16_t v98;
  double v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  uint64_t v105;
  unint64_t *v106;
  uint64_t i;
  uint64_t v108;
  uint64_t v109;
  float64x2_t v110;
  float64x2_t v111;
  _BOOL4 v112;
  unint64_t v113;
  double v114;
  unint64_t v115;
  double v116;
  double v117;
  double v118;
  _BOOL4 v119;
  BOOL v120;
  double v121;
  double v122;
  int v123;
  __int128 v124;
  unint64_t v125;
  unint64_t v126;
  __int128 v127;
  __int128 v128;
  unint64_t *v129;
  unint64_t *v130;
  unint64_t *v131;
  unint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t *v146;
  double *v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  float64x2_t v156;
  float64x2_t v157;
  unint64_t *v158;
  unint64_t *v159;
  double v163;
  __double2 v164;
  float64x2_t v165;
  float64x2_t v166;
  double v167;
  double v168;
  int64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  double v172;
  double v173;
  float64x2_t v174;
  double v175;
  float64x2_t v176;
  double v177;
  float64x2_t v178;
  double v179;
  float64x2_t v180;
  double v181;
  float64x2_t v182;
  double v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  double v187;
  double v188;
  double v189;
  double v190;
  __int128 v191;
  int64x2_t v192;
  int8x16_t v193;
  double v194;
  __int128 v195;
  double v196;
  uint64_t v197;
  double *v198;
  double *v199;
  double v200;
  double v201;
  double v202;
  double v205;
  double v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  double v211;
  double v212;
  __int128 v213;
  double v214;
  double v215;
  double v216;
  unint64_t v217;
  unint64_t v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  double v222;
  double v223;
  __n128 result;
  int v228;
  unint64_t *vars0;
  unint64_t *vars8;
  uint64_t v231;
  double v232;
  __int128 v233;
  uint64_t v234;
  uint64_t v235;
  __int128 v236;
  double v237;
  __int128 v238;
  double v239;
  double v240;
  double v241;
  __int128 v242;
  double v243;
  __int128 v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  double v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  unint64_t v257;
  __int128 v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;

  v13 = a4;
  v17 = *(double *)a1;
  v18 = *(double *)(a1 + 8);
  v19 = *(double *)(a1 + 16);
  v20 = *(double *)(a1 + 24);
  v22 = *(double *)(a1 + 32);
  v21 = *(double *)(a1 + 40);
  v23 = *(double *)(a1 + 48);
  *(_QWORD *)&v12 = *(_QWORD *)(a1 + 56);
  v25 = *(double *)(a1 + 64);
  v24 = *(double *)(a1 + 72);
  *(_QWORD *)&v10 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)&v11 = *(_QWORD *)(a1 + 88);
  *(double *)&STACK[0xF78] = *(double *)&v12 * v25 - v22 * *(double *)&v11;
  *(double *)&STACK[0xF80] = *(double *)&v12 * v24 - v21 * *(double *)&v11;
  v238 = v11;
  v239 = v25;
  *(double *)&STACK[0xF88] = *(double *)&v12 * *(double *)&v10 - v23 * *(double *)&v11;
  *(double *)&STACK[0xF90] = v17 * *(double *)&v11 - v20 * v25;
  v245 = v10;
  *(double *)&v246 = v24;
  *(double *)&STACK[0xF98] = v18 * *(double *)&v11 - v20 * v24;
  *(double *)&STACK[0xFA0] = v19 * *(double *)&v11 - v20 * *(double *)&v10;
  v240 = v22;
  v241 = v17;
  *(double *)&v248 = v18;
  *(double *)&v249 = v21;
  v243 = a6 * a6;
  if (a6 * a6 == 0.0)
    v26 = 1.0;
  else
    v26 = 1.0 / (a6 * a6);
  *(double *)&STACK[0xFA8] = v20 * v22 - v17 * *(double *)&v12;
  *(double *)&STACK[0xFB0] = v20 * v21 - v18 * *(double *)&v12;
  *(double *)&v247 = v23;
  v236 = v12;
  v237 = v20;
  *(double *)&v250 = v19;
  *(double *)&STACK[0xFB8] = v20 * v23 - v19 * *(double *)&v12;
  if (!a4)
  {
    v31 = 0.0;
    if (a5 >= 1)
      goto LABEL_11;
LABEL_74:
    v218 = v236;
    v217 = *(_QWORD *)&v237;
    v214 = v237;
    v215 = *(double *)&v236;
    v219 = v238;
    v216 = *(double *)&v238;
    goto LABEL_75;
  }
  v27 = *(int64x2_t *)&STACK[0xF78];
  v28 = *(int64x2_t *)&STACK[0xF90];
  *(_QWORD *)&v29 = STACK[0xF88];
  a9.n128_u64[0] = STACK[0xFB8];
  *(__n128 *)&STACK[0xB40] = a9;
  v30 = *(int8x16_t *)&STACK[0xFA8];
  *((_QWORD *)&v29 + 1) = STACK[0xFA0];
  *(_OWORD *)&STACK[0xB50] = v29;
  *(int64x2_t *)&STACK[0xB60] = v28;
  *(int64x2_t *)&STACK[0xB70] = v27;
  *(int64x2_t *)&STACK[0xB10] = vzip2q_s64(v27, v28);
  *(int64x2_t *)&STACK[0xB20] = vzip1q_s64(v27, v28);
  *(int8x16_t *)&STACK[0xB30] = v30;
  *(int8x16_t *)&STACK[0xB00] = vextq_s8(v30, v30, 8uLL);
  v31 = 0.0;
  v32 = a4;
  v33 = a2;
  v34 = (double *)a3;
  do
  {
    v35 = *v33;
    v36 = v33[1];
    v33 += 2;
    v37 = *v34;
    _D3 = v34[1];
    v34 += 2;
    _Q4 = vaddq_f64(*(float64x2_t *)&STACK[0xB50], vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)&STACK[0xB20], v35), *(float64x2_t *)&STACK[0xB10], v36));
    v40 = *(double *)&STACK[0xB40] + *(double *)&STACK[0xB30] * v35 + *(double *)&STACK[0xB00] * v36;
    __asm { FMLA            D1, D3, V4.D[1] }
    v46 = v40 + _D1;
    v47 = vaddq_f64(*(float64x2_t *)&STACK[0xB30], vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)&STACK[0xB70], v37), *(float64x2_t *)&STACK[0xB60], _D3));
    v48 = vmulq_f64(_Q4, _Q4);
    v49 = vmulq_f64(v47, v47);
    v50 = vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v49, 1), vaddq_f64(vaddq_f64(v48, (float64x2_t)vdupq_laneq_s64((int64x2_t)v48, 1)), v49)).f64[0];
    if (v50 == 0.0)
      v51 = 1.0;
    else
      v51 = 1.0 / v50;
    v31 = v31 + log1p(v26 * (v46 * v46 * v51));
    --v32;
  }
  while (v32);
  if (a5 < 1)
    goto LABEL_74;
LABEL_11:
  *(double *)&v234 = v31;
  v231 = (uint64_t)a2;
  v228 = 0;
  vars8 = &STACK[0xC50];
  vars0 = &STACK[0xD40];
  v52 = 0.1;
  v53.f64[0] = NAN;
  v53.f64[1] = NAN;
  v242 = (__int128)vnegq_f64(v53);
  v54 = 1.0;
  v55 = 10.0;
  v235 = v13;
  do
  {
    *(double *)&STACK[0xF78] = v239 * *(double *)&v236 - *(double *)&v238 * v240;
    *(double *)&STACK[0xF80] = *(double *)&v246 * *(double *)&v236 - *(double *)&v238 * *(double *)&v249;
    *(double *)&STACK[0xF88] = *(double *)&v245 * *(double *)&v236 - *(double *)&v238 * *(double *)&v247;
    *(double *)&STACK[0xF90] = *(double *)&v238 * v241 - v239 * v237;
    *(double *)&STACK[0xF98] = *(double *)&v238 * *(double *)&v248 - *(double *)&v246 * v237;
    *(double *)&STACK[0xFA0] = *(double *)&v238 * *(double *)&v250 - *(double *)&v245 * v237;
    *(double *)&STACK[0xFA8] = v240 * v237 - *(double *)&v236 * v241;
    *(double *)&STACK[0xFB0] = *(double *)&v249 * v237 - *(double *)&v236 * *(double *)&v248;
    *(double *)&STACK[0xFB8] = *(double *)&v247 * v237 - *(double *)&v236 * *(double *)&v250;
    *(double *)&STACK[0xF30] = v241;
    STACK[0xF38] = v248;
    STACK[0xF40] = v250;
    *(double *)&STACK[0xF48] = v240;
    STACK[0xF50] = v249;
    STACK[0xF58] = v247;
    *(double *)&STACK[0xF60] = v239;
    STACK[0xF68] = v246;
    STACK[0xF70] = v245;
    *(double *)&STACK[0xF18] = v237;
    STACK[0xF20] = v236;
    STACK[0xF28] = v238;
    *(_OWORD *)&STACK[0xDF0] = 0u;
    *(_OWORD *)&STACK[0xE00] = 0u;
    *(_OWORD *)&STACK[0xE10] = 0u;
    *(_OWORD *)&STACK[0xE20] = 0u;
    *(_OWORD *)&STACK[0xE30] = 0u;
    *(_OWORD *)&STACK[0xE40] = 0u;
    *(_OWORD *)&STACK[0xE50] = 0u;
    *(_OWORD *)&STACK[0xE60] = 0u;
    *(_OWORD *)&STACK[0xE70] = 0u;
    *(_OWORD *)&STACK[0xE80] = 0u;
    *(_OWORD *)&STACK[0xE90] = 0u;
    *(_OWORD *)&STACK[0xEA0] = 0u;
    *(_OWORD *)&STACK[0xEB0] = 0u;
    *(_OWORD *)&STACK[0xEC0] = 0u;
    *(_OWORD *)&STACK[0xED0] = 0u;
    *(_OWORD *)&STACK[0xEE0] = 0u;
    *(_OWORD *)&STACK[0xEF0] = 0u;
    *(_OWORD *)&STACK[0xF00] = 0u;
    *(_OWORD *)&STACK[0xDC0] = 0u;
    *(_OWORD *)&STACK[0xDB0] = 0u;
    *(_OWORD *)&STACK[0xDA0] = 0u;
    if ((int)v13 >= 1)
    {
      *(double *)&v259 = v31;
      v261 = v9;
      v56 = *(double *)&STACK[0xF28];
      v57 = *(float64x2_t *)&STACK[0xF30];
      v58 = *(float64x2_t *)&STACK[0xF48];
      v59 = *(float64x2_t *)&STACK[0xF60];
      *(_QWORD *)&v57.f64[1] = vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL).u64[0];
      *(_QWORD *)&v60.f64[0] = STACK[0xF18];
      v60.f64[1] = *(double *)vextq_s8(*(int8x16_t *)&STACK[0xF18], *(int8x16_t *)&STACK[0xF18], 8uLL).i64;
      *(_QWORD *)&v58.f64[1] = vextq_s8((int8x16_t)v58, (int8x16_t)v58, 8uLL).u64[0];
      *(_QWORD *)&v59.f64[1] = vextq_s8((int8x16_t)v59, (int8x16_t)v59, 8uLL).u64[0];
      v61 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v57, *(double *)&STACK[0xF18]), v58, v60.f64[1]), v59, *(double *)&STACK[0xF28]);
      v62 = *(double *)&STACK[0xF40] * *(double *)&STACK[0xF18]
          + *(double *)&STACK[0xF58] * v60.f64[1]
          + *(double *)&STACK[0xF70] * *(double *)&STACK[0xF28];
      v63 = *(double *)&STACK[0xF28] * a8 * (*(double *)&STACK[0xF28] * a8);
      v64 = v62 * a8 * (v62 * a8);
      v65 = 0uLL;
      v66 = 0.0;
      v67 = v13;
      v68 = 0.0;
      v69 = 0.0;
      v71 = (float64x2_t *)v231;
      v70 = a3;
      v72 = 0uLL;
      v73 = 0uLL;
      v74 = 0uLL;
      v75 = 0uLL;
      v76 = 0uLL;
      v77 = 0uLL;
      v78 = 0uLL;
      v79 = 0uLL;
      v80 = 0uLL;
      v81 = 0uLL;
      v82 = 0uLL;
      v255 = (__int128)v61;
      v257 = STACK[0xF28];
      v251 = v62;
      v253 = (__int128)v60;
      do
      {
        v83 = vsubq_f64(vmulq_n_f64(*v70, v56), v60);
        if (vaddvq_f64(vmulq_f64(v83, v83)) >= v63)
        {
          v84 = vsubq_f64(vmulq_n_f64(*v71, v62), v61);
          if (vaddvq_f64(vmulq_f64(v84, v84)) >= v64)
          {
            STACK[0xBB8] = 0;
            *(float64x2_t *)&STACK[0xB60] = v65;
            *(_OWORD *)&STACK[0xB70] = v72;
            *(float64x2_t *)&STACK[0xB40] = v82;
            *(float64x2_t *)&STACK[0xB50] = v73;
            v85 = v69;
            *(float64x2_t *)&STACK[0xB20] = v80;
            *(float64x2_t *)&STACK[0xB30] = v79;
            *(float64x2_t *)&STACK[0xB00] = v74;
            *(float64x2_t *)&STACK[0xB10] = v81;
            v269 = (__int128)v76;
            v271 = (__int128)v75;
            v265 = (__int128)v78;
            v267 = (__int128)v77;
            v86 = (__int128)sub_20EB86E08((double *)&STACK[0xBB8], (float64x2_t *)&STACK[0xC80], (uint64_t)&STACK[0xF78], (uint64_t)&STACK[0xF30], v71->f64, v70->f64);
            *(_QWORD *)&v86 = STACK[0xBB8];
            v263 = v86;
            v87 = *(double *)&v86 * *(double *)&v86;
            v88 = log1p(v26 * (*(double *)&v86 * *(double *)&v86));
            v90 = *(float64x2_t *)&STACK[0xB00];
            v89 = *(float64x2_t *)&STACK[0xB10];
            v92 = *(float64x2_t *)&STACK[0xB20];
            v91 = *(float64x2_t *)&STACK[0xB30];
            v93 = *(float64x2_t *)&STACK[0xB40];
            v94 = v85;
            v54 = 1.0;
            v61 = (float64x2_t)v255;
            v56 = *(double *)&v257;
            v95 = sqrt(v88);
            v96 = (v243 + v87) * v95;
            _NF = v96 < 0.000001;
            v97 = *(double *)&v263 / v96;
            *(double *)v98.i64 = a6 / (v243 + v87);
            *(_QWORD *)&v99 = vbslq_s8((int8x16_t)v242, v98, (int8x16_t)v263).u64[0];
            if (!_NF)
              v99 = v97;
            v100 = vmulq_n_f64(*(float64x2_t *)&STACK[0xCA0], v99);
            v101 = vmulq_n_f64(*(float64x2_t *)&STACK[0xC90], v99);
            v102 = vmulq_n_f64(*(float64x2_t *)&STACK[0xC80], v99);
            *(float64x2_t *)&STACK[0xC80] = v102;
            *(float64x2_t *)&STACK[0xC90] = v101;
            *(float64x2_t *)&STACK[0xCA0] = v100;
            v74 = vaddq_f64(v90, vmulq_n_f64(v102, v102.f64[0]));
            v75 = vaddq_f64(vmulq_n_f64(v101, v102.f64[0]), (float64x2_t)v271);
            v76 = vaddq_f64(vmulq_n_f64(v100, v102.f64[0]), (float64x2_t)v269);
            v77 = vaddq_f64(vmulq_laneq_f64((float64x2_t)vextq_s8((int8x16_t)v102, (int8x16_t)v101, 8uLL), v102, 1), (float64x2_t)v267);
            v103 = (float64x2_t)vextq_s8((int8x16_t)v101, (int8x16_t)v100, 8uLL);
            v78 = vaddq_f64(vmulq_laneq_f64(v103, v102, 1), (float64x2_t)v265);
            v69 = vmuld_lane_f64(v102.f64[1], v100, 1) + v94;
            v79 = vaddq_f64(vmulq_n_f64(v101, v101.f64[0]), v91);
            v80 = vaddq_f64(vmulq_n_f64(v100, v101.f64[0]), v92);
            v81 = vaddq_f64(vmulq_laneq_f64(v103, v101, 1), v89);
            v68 = vmuld_lane_f64(v100.f64[1], v101, 1) + v68;
            v82 = vaddq_f64(vmulq_n_f64(v100, v100.f64[0]), v93);
            v66 = vmuld_lane_f64(v100.f64[1], v100, 1) + v66;
            v65 = vaddq_f64(vmulq_n_f64(v102, v95), *(float64x2_t *)&STACK[0xB60]);
            *(float64x2_t *)&STACK[0xB70] = vaddq_f64(vmulq_n_f64(v101, v95), *(float64x2_t *)&STACK[0xB70]);
            v72 = *(_OWORD *)&STACK[0xB70];
            v104 = vmulq_n_f64(v100, v95);
            v62 = v251;
            v60 = (float64x2_t)v253;
            v73 = vaddq_f64(v104, *(float64x2_t *)&STACK[0xB50]);
          }
        }
        ++v71;
        ++v70;
        --v67;
      }
      while (v67);
      *(float64x2_t *)&STACK[0xDF0] = v74;
      *(float64x2_t *)&STACK[0xE00] = v75;
      *(float64x2_t *)&STACK[0xE10] = v76;
      *(float64x2_t *)&STACK[0xE28] = v77;
      *(float64x2_t *)&STACK[0xE38] = v78;
      *(double *)&STACK[0xE48] = v69;
      *(float64x2_t *)&STACK[0xE60] = v79;
      *(float64x2_t *)&STACK[0xE70] = v80;
      *(float64x2_t *)&STACK[0xE98] = v81;
      *(double *)&STACK[0xEA8] = v68;
      *(float64x2_t *)&STACK[0xED0] = v82;
      *(double *)&STACK[0xF08] = v66;
      *(float64x2_t *)&STACK[0xDA0] = v65;
      *(_OWORD *)&STACK[0xDB0] = v72;
      *(float64x2_t *)&STACK[0xDC0] = v73;
      v13 = v235;
      v55 = 10.0;
      v9 = v261;
      v31 = *(double *)&v259;
    }
    v105 = 8;
    v106 = &STACK[0xE20];
    for (i = 1; i != 6; ++i)
    {
      v108 = 0;
      v109 = v105;
      do
      {
        v106[v108++] = *(unint64_t *)((char *)&STACK[0xDF0] + v109);
        v109 += 48;
      }
      while (i != v108);
      v106 += 6;
      v105 += 8;
    }
    v110 = vnegq_f64(*(float64x2_t *)&STACK[0xDC0]);
    v111 = vnegq_f64(*(float64x2_t *)&STACK[0xDB0]);
    *(float64x2_t *)&STACK[0xDA0] = vnegq_f64(*(float64x2_t *)&STACK[0xDA0]);
    *(float64x2_t *)&STACK[0xDB0] = v111;
    *(float64x2_t *)&STACK[0xDC0] = v110;
    if (v52 < 100000000.0)
    {
      v272 = (__int128)vdupq_lane_s64(v250, 0);
      *(int64x2_t *)&STACK[0xB00] = vdupq_lane_s64(v248, 0);
      v268 = (__int128)vdupq_lane_s64(v247, 0);
      v270 = (__int128)vdupq_lane_s64(v249, 0);
      v264 = (__int128)vdupq_lane_s64(v245, 0);
      v266 = (__int128)vdupq_lane_s64(v246, 0);
      do
      {
        while (1)
        {
          memcpy(&STACK[0xC80], &STACK[0xDF0], 0x120uLL);
          v113 = STACK[0xCB0];
          v114 = *(double *)&STACK[0xC80] + v52 * *(double *)&STACK[0xC80];
          v115 = STACK[0xCC0];
          v116 = *(double *)&STACK[0xCB8] + v52 * *(double *)&STACK[0xCB8];
          v117 = *(double *)&STACK[0xCF0] + v52 * *(double *)&STACK[0xCF0];
          v118 = *(double *)&STACK[0xD28] + v52 * *(double *)&STACK[0xD28];
          v119 = fabs(*(double *)&STACK[0xF20]) > fabs(*(double *)&STACK[0xF18]);
          v120 = fabs(*(double *)&STACK[0xF28]) <= fabs(*((double *)&STACK[0xF18] + v119));
          v121 = *(double *)&STACK[0xD60] + v52 * *(double *)&STACK[0xD60];
          v122 = *(double *)&STACK[0xD98] + v52 * *(double *)&STACK[0xD98];
          *(double *)&STACK[0xC80] = v114;
          *(double *)&STACK[0xCB8] = v116;
          *(double *)&STACK[0xCF0] = v117;
          *(double *)&STACK[0xD28] = v118;
          *(double *)&STACK[0xD60] = v121;
          *(double *)&STACK[0xD98] = v122;
          if (v120)
            v123 = v119;
          else
            v123 = 2;
          *(double *)&STACK[0xBB8] = v114;
          v124 = *(_OWORD *)&STACK[0xC88];
          *(_OWORD *)&STACK[0xBC0] = *(_OWORD *)&STACK[0xC88];
          STACK[0xBE0] = v113;
          *(double *)&STACK[0xBE8] = v116;
          v125 = STACK[0xCE0];
          v126 = STACK[0xCE8];
          STACK[0xBF0] = v115;
          STACK[0xC08] = v125;
          STACK[0xC10] = v126;
          *(double *)&STACK[0xC18] = v117;
          if (v123 == 2)
          {
            STACK[0xBC0] = v124;
            *(_OWORD *)&STACK[0xBD0] = *(_OWORD *)&STACK[0xC98];
            *(double *)&STACK[0xBE8] = v116;
            *(_OWORD *)&STACK[0xBF8] = *(_OWORD *)&STACK[0xCC8];
            *(_OWORD *)&STACK[0xC20] = *(_OWORD *)&STACK[0xCF8];
            *(_OWORD *)&STACK[0xC30] = *(_OWORD *)&STACK[0xD10];
            v130 = &STACK[0xC50];
            v129 = &STACK[0xD30];
            v131 = &STACK[0xD40];
            v139 = STACK[0xD20];
            v132 = &STACK[0xC58];
            v133 = 25;
            v134 = 21;
            v135 = 26;
            STACK[0xC10] = v126;
            STACK[0xC40] = v139;
            v136 = 22;
            v137 = 27;
            v138 = 28;
            *(double *)&STACK[0xC48] = v118;
          }
          else if (v123 == 1)
          {
            v140 = STACK[0xCA8];
            STACK[0xBD0] = STACK[0xC98];
            STACK[0xBD8] = v140;
            v141 = STACK[0xCD8];
            STACK[0xBF8] = STACK[0xCC8];
            STACK[0xC00] = v141;
            v142 = STACK[0xD38];
            *(double *)&STACK[0xC48] = v118;
            STACK[0xC50] = v142;
            v130 = &STACK[0xC40];
            v129 = &STACK[0xD20];
            *(_OWORD *)&STACK[0xC28] = *(_OWORD *)&STACK[0xD08];
            v131 = &STACK[0xD70];
            v132 = &STACK[0xC58];
            v133 = 31;
            v143 = STACK[0xD18];
            v134 = 21;
            v135 = 32;
            v136 = 22;
            v137 = 33;
            v138 = 35;
            STACK[0xC20] = STACK[0xCF8];
            STACK[0xC38] = v143;
          }
          else
          {
            v127 = *(_OWORD *)&STACK[0xCD0];
            *(_OWORD *)&STACK[0xBD0] = *(_OWORD *)&STACK[0xCA0];
            *(_OWORD *)&STACK[0xBF8] = v127;
            v128 = *(_OWORD *)&STACK[0xD40];
            *(_OWORD *)&STACK[0xC20] = *(_OWORD *)&STACK[0xD00];
            *(_OWORD *)&STACK[0xC30] = v128;
            v130 = &STACK[0xC60];
            v129 = &STACK[0xD78];
            *(_QWORD *)&v128 = STACK[0xD70];
            v132 = &STACK[0xC68];
            v131 = &STACK[0xD80];
            v133 = 28;
            v134 = 18;
            v135 = 29;
            v136 = 19;
            v137 = 34;
            v138 = 35;
            STACK[0xC40] = STACK[0xD50];
            STACK[0xC58] = v128;
          }
          *v130 = *v129;
          *v132 = *v131;
          *(&STACK[0xBB8] + v134) = *(&STACK[0xC80] + v133);
          *(&STACK[0xBB8] + v136) = *(&STACK[0xC80] + v135);
          v144 = *(&STACK[0xC80] + v138);
          STACK[0xC70] = *(&STACK[0xC80] + v137);
          STACK[0xC78] = v144;
          v145 = STACK[0xDB0];
          v146 = (unint64_t *)((unint64_t)&STACK[0xDA0] | 0x20);
          v147 = (double *)((unint64_t)&STACK[0xDA0] | 0x28);
          if (v123)
          {
            v146 = (unint64_t *)((unint64_t)&STACK[0xDA0] | 0x18);
            if (v123 == 2)
              v147 = (double *)((unint64_t)&STACK[0xDA0] | 0x20);
            else
              v147 = (double *)((unint64_t)&STACK[0xDA0] | 0x28);
          }
          v9 = *v146;
          v31 = *v147;
          *(_OWORD *)&STACK[0xB80] = *(_OWORD *)&STACK[0xDA0];
          v148 = *(_OWORD *)&STACK[0xC48];
          v149 = *(_OWORD *)&STACK[0xC68];
          *(_OWORD *)&STACK[0x1060] = *(_OWORD *)&STACK[0xC58];
          *(_OWORD *)&STACK[0x1070] = v149;
          v150 = *(_OWORD *)&STACK[0xC08];
          v151 = *(_OWORD *)&STACK[0xC28];
          v152 = *(_OWORD *)&STACK[0xC38];
          *(_OWORD *)&STACK[0x1020] = *(_OWORD *)&STACK[0xC18];
          *(_OWORD *)&STACK[0x1030] = v151;
          STACK[0xB90] = v145;
          STACK[0xB98] = v9;
          *(double *)&STACK[0xBA0] = v31;
          STACK[0x1080] = STACK[0xC78];
          *(_OWORD *)&STACK[0x1050] = v148;
          *(_OWORD *)&STACK[0x1040] = v152;
          v153 = *(_OWORD *)&STACK[0xBE8];
          *(_OWORD *)&STACK[0xFE0] = *(_OWORD *)&STACK[0xBD8];
          *(_OWORD *)&STACK[0xFF0] = v153;
          v154 = *(_OWORD *)&STACK[0xBF8];
          *(_OWORD *)&STACK[0x1010] = v150;
          *(_OWORD *)&STACK[0x1000] = v154;
          v155 = *(_OWORD *)&STACK[0xBB8];
          *(_OWORD *)&STACK[0xFD0] = *(_OWORD *)&STACK[0xBC8];
          *(_OWORD *)&STACK[0xFC0] = v155;
          LOBYTE(STACK[0x109F]) = 108;
          LODWORD(STACK[0x1098]) = 5;
          LODWORD(STACK[0x1094]) = 1;
          LODWORD(STACK[0x1090]) = -1;
          STACK[0x1088] = 0x100000001;
          sub_20E83443C(&STACK[0x1088], (uint64_t)&STACK[0x109F], (int *)&STACK[0x1098], (unsigned int *)&STACK[0x1094], (double *)&STACK[0xFC0], (int *)&STACK[0x1098], (char *)&STACK[0xB80], (int *)&STACK[0x1098], (int *)&STACK[0x1090]);
          if (!LODWORD(STACK[0x1090]))
            break;
          v52 = v52 * v55;
          if (v52 >= 100000000.0)
            goto LABEL_26;
        }
        v158 = &STACK[0xBA8];
        if (v123 != 2)
        {
          v158 = &STACK[0xBA0];
          v159 = &STACK[0xBA8];
          if (v123 != 1)
          {
            STACK[0xBA8] = STACK[0xBA0];
            v158 = &STACK[0xB98];
            v159 = &STACK[0xBA0];
          }
          *v159 = *v158;
        }
        *v158 = 0;
        *(double *)&v260 = v31;
        *(_QWORD *)&v156.f64[0] = STACK[0xB90];
        _Q2 = *(float64x2_t *)&STACK[0xB80];
        _D3 = STACK[0xB88];
        __asm { FMLA            D0, D3, V2.D[1] }
        v163 = sqrt(_D0 + v156.f64[0] * v156.f64[0]);
        v157.f64[0] = v54 / v163;
        if (v163 == 0.0)
          v157.f64[0] = v54;
        *(float64x2_t *)&STACK[0xB60] = vmulq_n_f64(_Q2, v157.f64[0]);
        *(float64x2_t *)&STACK[0xB70] = vmulq_f64(v156, v157);
        v164 = __sincos_stret(v163);
        v165 = *(float64x2_t *)&STACK[0xB60];
        v185.f64[0] = v164.__cosval + (v54 - v164.__cosval) * vmuld_n_f64(v165.f64[0], v165.f64[0]);
        v166.f64[0] = v164.__sinval * *(double *)&STACK[0xB70];
        v167 = (v54 - v164.__cosval) * vmuld_n_f64(*(double *)&STACK[0xB60], *(double *)&STACK[0xB70]);
        v168 = vmuld_lane_f64(v164.__sinval, *(float64x2_t *)&STACK[0xB60], 1);
        *(double *)v169.i64 = v168 + v167;
        v170 = vmulq_n_f64(vmulq_laneq_f64(v165, v165, 1), v54 - v164.__cosval);
        v185.f64[1] = v170.f64[0] - v166.f64[0];
        v166.f64[1] = v164.__cosval;
        v171 = vaddq_f64(v166, v170);
        v172 = (v54 - v164.__cosval) * vmuld_lane_f64(*(double *)&STACK[0xB70], *(float64x2_t *)&STACK[0xB60], 1);
        v173 = v164.__sinval * *(double *)&STACK[0xB60];
        v170.f64[0] = v172 - v173;
        v174.f64[0] = v167 - v168;
        v174.f64[1] = v173 + v172;
        v175 = v164.__cosval + (v54 - v164.__cosval) * vmuld_n_f64(*(double *)&STACK[0xB70], *(double *)&STACK[0xB70]);
        v176 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v185, v241), *(float64x2_t *)&STACK[0xB00], v171), (float64x2_t)v272, v174);
        v177 = *(double *)v169.i64 * v241 + v170.f64[0] * *(double *)&v248 + v175 * *(double *)&v250;
        v178 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v185, v240), (float64x2_t)v270, v171), (float64x2_t)v268, v174);
        v179 = *(double *)v169.i64 * v240 + v170.f64[0] * *(double *)&v249 + v175 * *(double *)&v247;
        v180 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v185, v239), (float64x2_t)v266, v171), (float64x2_t)v264, v174);
        v181 = *(double *)v169.i64 * v239 + v170.f64[0] * *(double *)&v246 + v175 * *(double *)&v245;
        *(_QWORD *)&v182.f64[0] = STACK[0xBA8];
        *(_QWORD *)&v183 = *(_OWORD *)&vaddq_f64((float64x2_t)v238, v182);
        v185.f64[1] = *((float64_t *)&v236 + 1);
        v184.f64[0] = v237;
        *(_QWORD *)&v184.f64[1] = v236;
        v186 = vaddq_f64(v184, *(float64x2_t *)&STACK[0xB98]);
        v187 = sqrt(vmuld_n_f64(v183, v183) + vmuld_n_f64(v186.f64[0], v186.f64[0])
                                            + vmuld_lane_f64(v186.f64[1], v186, 1));
        if (v187 == 0.0)
          v188 = v54;
        else
          v188 = v54 / v187;
        v189 = v188 * v186.f64[0];
        v174.f64[0] = vmuld_lane_f64(v188, v186, 1);
        v185.f64[0] = v188 * v183;
        v262 = v9;
        v256 = (__int128)v178;
        v258 = (__int128)v176;
        v252 = (__int128)v185;
        v254 = (__int128)v180;
        v232 = v188 * v186.f64[0];
        v233 = (__int128)v174;
        if (v13)
        {
          *(double *)v169.i64 = v174.f64[0] * v180.f64[0] - v185.f64[0] * v178.f64[0];
          v190 = vmuld_lane_f64(v174.f64[0], v180, 1) - vmuld_lane_f64(v185.f64[0], v178, 1);
          *(double *)&v191 = v174.f64[0] * v181 - v185.f64[0] * v179;
          v192 = (int64x2_t)vsubq_f64(vmulq_n_f64(v176, v185.f64[0]), vmulq_n_f64(v180, v189));
          v193 = (int8x16_t)vsubq_f64(vmulq_n_f64(v178, v189), vmulq_n_f64(v176, v174.f64[0]));
          v194 = v189 * v179 - v174.f64[0] * v177;
          *((_QWORD *)&v195 + 1) = v192.i64[1];
          *(double *)&v195 = v190;
          *(_OWORD *)&STACK[0xB30] = v195;
          *(int8x16_t *)&STACK[0xB40] = v193;
          *((double *)&v191 + 1) = v185.f64[0] * v177 - v189 * v181;
          *(int64x2_t *)&STACK[0xB50] = v192;
          *(_OWORD *)&STACK[0xB60] = v191;
          *(int64x2_t *)&STACK[0xB10] = vzip1q_s64(v169, v192);
          *(int8x16_t *)&STACK[0xB20] = vextq_s8(v193, v193, 8uLL);
          *(double *)&v169.i64[1] = v190;
          *(int64x2_t *)&STACK[0xB70] = v169;
          v196 = 0.0;
          v197 = v13;
          v198 = (double *)v231;
          v199 = (double *)a3;
          do
          {
            v200 = *v198;
            v201 = v198[1];
            v198 += 2;
            v202 = *v199;
            _D3 = v199[1];
            v199 += 2;
            _Q4 = vaddq_f64(*(float64x2_t *)&STACK[0xB60], vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)&STACK[0xB10], v200), *(float64x2_t *)&STACK[0xB30], v201));
            v205 = *(double *)&STACK[0xB40] * v200 + *(double *)&STACK[0xB20] * v201;
            __asm { FMLA            D1, D3, V4.D[1] }
            v207 = v194 + v205 + _D1;
            v208 = vaddq_f64(*(float64x2_t *)&STACK[0xB40], vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)&STACK[0xB70], v202), *(float64x2_t *)&STACK[0xB50], _D3));
            v209 = vmulq_f64(_Q4, _Q4);
            v210 = vmulq_f64(v208, v208);
            v211 = vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v210, 1), vaddq_f64(vaddq_f64(v209, (float64x2_t)vdupq_laneq_s64((int64x2_t)v209, 1)), v210)).f64[0];
            if (v211 == 0.0)
              v212 = v54;
            else
              v212 = v54 / v211;
            v196 = v196 + log1p(v26 * (v207 * v207 * v212));
            --v197;
          }
          while (v197);
          if (v196 < *(double *)&v234)
          {
LABEL_64:
            v112 = *(double *)&v234 - v196 < a7 || v52 < 1.0e-10;
            ++v228;
            v241 = *(double *)&v258;
            *(double *)&v250 = v177;
            v52 = v52 * 0.1;
            v249 = *((uint64_t *)&v256 + 1);
            v248 = *((uint64_t *)&v258 + 1);
            v237 = v232;
            v240 = *(double *)&v256;
            *(double *)&v247 = v179;
            *((_QWORD *)&v213 + 1) = *((_QWORD *)&v233 + 1);
            v236 = v233;
            v246 = *((uint64_t *)&v254 + 1);
            v239 = *(double *)&v254;
            *(double *)&v213 = v181;
            v245 = v213;
            v238 = v252;
            *(double *)&v234 = v196;
            v13 = v235;
            v55 = 10.0;
            v9 = v262;
            v31 = *(double *)&v260;
            if (v228 < a5)
              goto LABEL_70;
            goto LABEL_72;
          }
        }
        else
        {
          v196 = 0.0;
          if (*(double *)&v234 > 0.0)
            goto LABEL_64;
        }
        v55 = 10.0;
        v52 = v52 * 10.0;
        if (v52 > 100000000.0)
        {
          v112 = 0;
          v13 = v235;
          v9 = v262;
          v31 = *(double *)&v260;
          if (v228 >= a5)
            goto LABEL_72;
          goto LABEL_70;
        }
        v13 = v235;
        v9 = v262;
        v31 = *(double *)&v260;
      }
      while (v52 < 100000000.0);
    }
LABEL_26:
    v112 = 0;
    if (v228 >= a5)
      break;
LABEL_70:
    ;
  }
  while (v52 < 100000000.0 && !v112);
LABEL_72:
  v215 = *(double *)&v236;
  v214 = v237;
  v216 = *(double *)&v238;
  v217 = *(_QWORD *)(a1 + 24);
  v218 = *(_QWORD *)(a1 + 56);
  v219 = *(_QWORD *)(a1 + 88);
LABEL_75:
  STACK[0xDF0] = v217;
  STACK[0xDF8] = v218;
  STACK[0xE00] = v219;
  STACK[0xC80] = v217;
  STACK[0xC88] = v218;
  v220 = fabs(*(double *)&v218) > fabs(*(double *)&v217);
  if (fabs(*(double *)&v219) > fabs(*((double *)&STACK[0xDF0] + v220)))
    v220 = 2;
  v221 = 8 * v220;
  v222 = *(double *)((char *)&STACK[0xDF0] + v221);
  STACK[0xC90] = v219;
  v223 = v222 * *(double *)((char *)&STACK[0xC80] + v221);
  if (v223 < 0.0)
    v214 = -v214;
  *(double *)a1 = v241;
  *(double *)(a1 + 8) = *(double *)&v248;
  if (v223 < 0.0)
  {
    v215 = -v215;
    v216 = -v216;
  }
  *(double *)(a1 + 16) = *(double *)&v250;
  *(double *)(a1 + 24) = v214;
  *(double *)(a1 + 32) = v240;
  *(double *)(a1 + 40) = *(double *)&v249;
  *(double *)(a1 + 48) = *(double *)&v247;
  *(double *)(a1 + 56) = v215;
  *(double *)(a1 + 64) = v239;
  *(double *)(a1 + 72) = *(double *)&v246;
  result = (__n128)v245;
  *(_QWORD *)(a1 + 80) = v245;
  *(double *)(a1 + 88) = v216;
  return result;
}

uint64_t sub_20EB88260(uint64_t *a1, uint64_t *a2, _QWORD *a3, _QWORD *a4, __int128 *a5, __int128 *a6, uint64_t a7, uint64_t a8, double a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  _QWORD v25[5];
  __int128 v26;
  __int128 v27;

  v21 = a3[1] - *a3;
  if (v21 != a4[1] - *a4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/TwoViewEstimators.cpp", 519, (uint64_t)"reference_correspondences.size() == inspection_correspondences.size()", 69, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_16;
    }
    v21 = a3[1] - *a3;
  }
  v23 = *a1;
  v22 = a1[1];
  if ((unint64_t)((v22 - *a1) >> 3) >> 1 != v21 >> 2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/TwoViewEstimators.cpp", 520, (uint64_t)"reference_feature_locations.size() / 2 == reference_correspondences.size()", 74, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_16;
    }
    v23 = *a1;
    v22 = a1[1];
  }
  if (v22 == v23
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/TwoViewEstimators.cpp", 521, (uint64_t)"reference_feature_locations.size()", 34, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| a2[1] == *a2&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/TwoViewEstimators.cpp", 522, (uint64_t)"inspection_feature_locations.size()", 35, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_16:
    abort();
  }
  *(_QWORD *)(a11 + 8) = 0;
  sub_20EB884A4(a11, (uint64_t)(a3[1] - *a3) >> 2, 0);
  result = 0;
  v25[3] = a10;
  v25[4] = 0x3F747AE147AE147BLL;
  v26 = xmmword_210315A80;
  v27 = xmmword_210315A90;
  v25[0] = 0x3F689374BC6A7EFALL;
  v25[1] = a8;
  v25[2] = a7;
  if (a3[1] - *a3 >= 0x10uLL)
  {
    if (sub_20EB8080C((uint64_t)v25, a13, a12, a1, a2, a5, a6))
      return sub_20EB7C150(a11, a12, a1, a2, a9);
    else
      return 0;
  }
  return result;
}

void sub_20EB884A4(uint64_t a1, unint64_t a2, size_t __len)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void *__dst;
  uint64_t v24;
  uint64_t v25;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = a2 - v4;
  if (a2 <= v4)
  {
    *(_QWORD *)(a1 + 8) = a2;
    return;
  }
  v6 = __len;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = v7 << 6;
  if (v7 << 6 < v5 || v4 > (v7 << 6) - v5)
  {
    __dst = 0;
    v24 = 0;
    v25 = 0;
    if ((a2 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v10 = v7 << 7;
    if (v10 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0))
      v10 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
    if (v8 <= 0x3FFFFFFFFFFFFFFELL)
      v11 = v10;
    else
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    sub_20E8B3B5C((char **)&__dst, v11);
    v12 = *(void **)a1;
    v13 = *(_QWORD *)(a1 + 8);
    v14 = v13 + v5;
    v24 = v13 + v5;
    v15 = (char *)__dst;
    if (v13 < 1)
    {
      LODWORD(v17) = 0;
      v16 = (char *)__dst;
    }
    else
    {
      v17 = (unint64_t)v13 >> 6;
      if ((unint64_t)v13 >= 0x40)
        memmove(__dst, v12, 8 * v17);
      v16 = &v15[8 * v17];
      if ((v13 & 0x3F) != 0)
      {
        *(_QWORD *)v16 = *(_QWORD *)v16 & ~(0xFFFFFFFFFFFFFFFFLL >> -(v13 & 0x3F)) | *((_QWORD *)v12 + v17) & (0xFFFFFFFFFFFFFFFFLL >> -(v13 & 0x3F));
        LODWORD(v17) = v13 & 0x3F;
      }
      else
      {
        LODWORD(v17) = 0;
      }
      v12 = *(void **)a1;
      v13 = *(_QWORD *)(a1 + 8);
      v15 = (char *)__dst;
      v14 = v24;
    }
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v14;
    __dst = v12;
    v24 = v13;
    v18 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25;
    v25 = v18;
    if (v12)
      operator delete(v12);
  }
  else
  {
    v16 = (char *)(*(_QWORD *)a1 + 8 * (v4 >> 6));
    v17 = *(_QWORD *)(a1 + 8) & 0x3FLL;
    *(_QWORD *)(a1 + 8) = a2;
  }
  if (v5)
  {
    if (v6)
    {
      if ((_DWORD)v17)
      {
        if ((64 - v17) >= v5)
          v19 = v5;
        else
          v19 = (64 - v17);
        *(_QWORD *)v16 |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v17 - v19)) & (-1 << v17);
        v16 += 8;
        v5 -= v19;
      }
      v20 = 8 * (v5 >> 6);
      if (v5 >= 0x40)
        memset(v16, 255, 8 * (v5 >> 6));
      if ((v5 & 0x3F) != 0)
      {
        v21 = *(_QWORD *)&v16[v20] | (0xFFFFFFFFFFFFFFFFLL >> -(v5 & 0x3F));
LABEL_44:
        *(_QWORD *)&v16[v20] = v21;
      }
    }
    else
    {
      if ((_DWORD)v17)
      {
        if ((64 - v17) >= v5)
          v22 = v5;
        else
          v22 = (64 - v17);
        *(_QWORD *)v16 &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v17 - v22)) & (-1 << v17));
        v16 += 8;
        v5 -= v22;
      }
      v20 = 8 * (v5 >> 6);
      if (v5 >= 0x40)
        bzero(v16, 8 * (v5 >> 6));
      if ((v5 & 0x3F) != 0)
      {
        v21 = *(_QWORD *)&v16[v20] & ~(0xFFFFFFFFFFFFFFFFLL >> -(v5 & 0x3F));
        goto LABEL_44;
      }
    }
  }
}

void sub_20EB88704(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EB8871C(uint64_t *a1, double *a2, _QWORD *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, uint64_t a10, uint64_t a11)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  _QWORD v23[5];
  __int128 v24;
  __int128 v25;

  v19 = a3[1] - *a3;
  if (v19 != a4[1] - *a4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/TwoViewEstimators.cpp", 554, (uint64_t)"reference_correspondences.size() == inspection_correspondences.size()", 69, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_16;
    }
    v19 = a3[1] - *a3;
  }
  v21 = *a1;
  v20 = a1[1];
  if ((unint64_t)((v20 - *a1) >> 3) >> 1 != v19 >> 2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/TwoViewEstimators.cpp", 555, (uint64_t)"reference_feature_locations.size() / 2 == reference_correspondences.size()", 74, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_16;
    }
    v21 = *a1;
    v20 = a1[1];
  }
  if (v20 == v21
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/TwoViewEstimators.cpp", 556, (uint64_t)"reference_feature_locations.size()", 34, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *((_QWORD *)a2 + 1) == *(_QWORD *)a2&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/src/TwoViewEstimators.cpp", 557, (uint64_t)"inspection_feature_locations.size()", 35, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_16:
    abort();
  }
  *(_QWORD *)(a8 + 8) = 0;
  sub_20EB884A4(a8, (uint64_t)(a3[1] - *a3) >> 2, 0);
  result = 0;
  v23[3] = a7;
  v23[4] = 0x3F747AE147AE147BLL;
  v24 = xmmword_210315A80;
  v25 = xmmword_210315A90;
  v23[0] = 0x3F689374BC6A7EFALL;
  v23[1] = a6;
  v23[2] = a5;
  if (a3[1] - *a3 >= 0x18uLL)
  {
    if (sub_20EB7C38C((uint64_t)v23, a11, a10, a1, a2))
      return sub_20EB7C150(a8, a10, a1, a2, a9);
    else
      return 0;
  }
  return result;
}

uint64_t sub_20EB8894C(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v5;
  _QWORD v6[3];

  v2 = operator new();
  *(_QWORD *)(v2 + 120) = 0;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_QWORD *)(v2 + 109) = 0;
  *(_QWORD *)v2 = &off_24C9C50E0;
  *(_QWORD *)(v2 + 8) = &unk_24C9C5158;
  *(_QWORD *)(v2 + 152) = &unk_24C9C5180;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  v5 = (uint64_t)off_24C9C5198 + 1;
  v6[0] = a1;
  sub_20EB88EEC((uint64_t *)(v2 + 120), &v5);
  if (v5)
  {
    if ((v5 & 1) == 0)
    {
      v3 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(v6, v6, 2);
    }
    v5 = 0;
  }
  return sub_20EB88A84(v2, a1);
}

void sub_20EB88A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EB88A34(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EB88A34(uint64_t *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t *, uint64_t *, uint64_t);

  v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 1, a1 + 1, 2);
    }
    *a1 = 0;
  }
  return a1;
}

uint64_t sub_20EB88A84(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  _BYTE v11[24];
  int v12;
  _QWORD v13[3];

  v13[2] = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)operator new();
  *v4 = &off_24C9AEC40;
  v5 = v4 + 1;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_20E860C04(v5, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)v5 = *(_OWORD *)a2;
    v4[3] = *(_QWORD *)(a2 + 16);
  }
  v6 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v4;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v12 = -1;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_20E860C04(v11, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)v11 = *(_OWORD *)a2;
    *(_QWORD *)&v11[16] = *(_QWORD *)(a2 + 16);
  }
  v13[0] = *(_QWORD *)&v11[8];
  v7 = *(_QWORD *)v11;
  *(_QWORD *)((char *)v13 + 7) = *(_QWORD *)&v11[15];
  v8 = v11[23];
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  v9 = v13[0];
  *(_QWORD *)(a1 + 168) = v7;
  *(_QWORD *)(a1 + 176) = v9;
  *(_QWORD *)(a1 + 183) = *(_QWORD *)((char *)v13 + 7);
  *(_BYTE *)(a1 + 191) = v8;
  return a1;
}

void sub_20EB88BB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, uint64_t a13, char a14)
{
  if (a12 != -1)
    ((void (*)(char *, uint64_t *))off_24C9C50B8[a12])(&a14, &a9);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EB88C10(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C9C50E0;
  *(_QWORD *)(a1 + 8) = &unk_24C9C5158;
  *(_QWORD *)(a1 + 152) = &unk_24C9C5180;
  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
      return sub_20E86E384(a1);
    goto LABEL_3;
  }
  v2 = *(_QWORD *)(a1 + 160);
  if (v2)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_20E86E384(a1);
}

void sub_20EB88C78(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C9C50E0;
  *(_QWORD *)(a1 + 8) = &unk_24C9C5158;
  *(_QWORD *)(a1 + 152) = &unk_24C9C5180;
  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
      goto LABEL_4;
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
    {
LABEL_4:
      sub_20E86E384(a1);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  goto LABEL_4;
}

uint64_t sub_20EB88CF4(uint64_t a1)
{
  return a1 + 168;
}

uint64_t sub_20EB88CFC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 8) = &off_24C9C50E0;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C9C5158;
  *(_QWORD *)(a1 + 144) = &unk_24C9C5180;
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
      return sub_20E86E384(v2);
    goto LABEL_3;
  }
  v3 = *(_QWORD *)(a1 + 152);
  if (v3)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_20E86E384(v2);
}

void sub_20EB88D6C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 8) = &off_24C9C50E0;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C9C5158;
  *(_QWORD *)(a1 + 144) = &unk_24C9C5180;
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
      goto LABEL_4;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
    {
LABEL_4:
      sub_20E86E384(v2);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  goto LABEL_4;
}

uint64_t sub_20EB88DF0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 152) = &off_24C9C50E0;
  v2 = a1 - 152;
  *(_QWORD *)(a1 - 144) = &unk_24C9C5158;
  *(_QWORD *)a1 = &unk_24C9C5180;
  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
      return sub_20E86E384(v2);
    goto LABEL_3;
  }
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_20E86E384(v2);
}

void sub_20EB88E60(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 152) = &off_24C9C50E0;
  v2 = a1 - 152;
  *(_QWORD *)(a1 - 144) = &unk_24C9C5158;
  *(_QWORD *)a1 = &unk_24C9C5180;
  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
      goto LABEL_4;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
    {
LABEL_4:
      sub_20E86E384(v2);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  goto LABEL_4;
}

uint64_t sub_20EB88EE4(uint64_t a1)
{
  return a1 + 16;
}

uint64_t *sub_20EB88EEC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  __int128 v8;

  if (a2 == a1)
    return a1;
  v4 = *a1;
  if (*a1)
  {
    if ((v4 & 1) == 0)
    {
      v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL);
      if (v5)
        v5((uint64_t)(a1 + 1), (uint64_t)(a1 + 1), 2);
    }
    *a1 = 0;
  }
  v6 = *a2;
  if (!*a2)
    return a1;
  *a1 = v6;
  if ((v6 & 1) == 0)
  {
    (*(void (**)(uint64_t *, uint64_t *, _QWORD))(v6 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, a1 + 1, 0);
    return a1;
  }
  v8 = *(_OWORD *)(a2 + 1);
  a1[3] = a2[3];
  *(_OWORD *)(a1 + 1) = v8;
  return a1;
}

void sub_20EB88F8C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_rethrow();
}

void sub_20EB88F9C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_20EB88FB0(uint64_t result, _WORD *a2, unsigned int a3)
{
  uint64_t v4;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 <= 1)
  {
    *(_QWORD *)a2 = *(_QWORD *)result;
    return result;
  }
  if (a3 != 2)
  {
    if (a3 != 3)
    {
LABEL_2:
      *(_QWORD *)a2 = &unk_24C9C51A8;
      a2[4] = 0;
      return result;
    }
    result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == ((unint64_t)"Z40CreateProgramOptionValueWithSavedCurrentINSt3__112basic_stringIcNS0_11char_trai"
                                      "tsIcEENS0_9allocatorIcEEEEEPN5boost15program_options11typed_valueIT_cEERSA_EUlRKS6_E_" & 0x7FFFFFFFFFFFFFFFLL)
      || (result = strcmp((const char *)result, (const char *)((unint64_t)"Z40CreateProgramOptionValueWithSavedCurrentINSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEEPN5boost15program_options11typed_valueIT_cEERSA_EUlRKS6_E_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
    {
      *(_QWORD *)a2 = v4;
    }
    else
    {
      *(_QWORD *)a2 = 0;
    }
  }
  return result;
}

void **sub_20EB8905C(void ***a1, void **a2)
{
  void **result;
  __int128 v3;
  size_t v4;
  size_t v5;

  result = *a1;
  if (result != a2)
  {
    if (*((char *)result + 23) < 0)
    {
      v4 = (size_t)a2[1];
      if (*((char *)a2 + 23) >= 0)
      {
        v5 = *((unsigned __int8 *)a2 + 23);
      }
      else
      {
        a2 = (void **)*a2;
        v5 = v4;
      }
      return sub_20E867CBC(result, a2, v5);
    }
    else if ((*((_BYTE *)a2 + 23) & 0x80) != 0)
    {
      return (void **)sub_20E867BF8(result, *a2, (size_t)a2[1]);
    }
    else
    {
      v3 = *(_OWORD *)a2;
      result[2] = a2[2];
      *(_OWORD *)result = v3;
    }
  }
  return result;
}

double sub_20EB890B0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double result;
  int v7;
  void **v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;

  sub_20EB8DAFC(a1, a2, (int *)a3);
  sub_20EB89C44((int *)a3, *(unsigned __int8 *)(a1 + 2928));
  v7 = *(_DWORD *)(a3 + 4);
  if (v7 == 7)
  {
    sub_20EB8D488((_QWORD *)a1);
    v7 = *(_DWORD *)(a3 + 4);
  }
  if (!v7)
  {
    sub_20EB8DCE0(a1, a2, (int *)&v10);
    *(_QWORD *)a3 = v10;
    v8 = (void **)(a3 + 8);
    if (*(char *)(a3 + 31) < 0)
      operator delete(*v8);
    *(_OWORD *)v8 = v11;
    *(_QWORD *)(a3 + 24) = v12;
    result = *(double *)&v13;
    v9 = v14;
    *(_OWORD *)(a3 + 32) = v13;
    *(_OWORD *)(a3 + 48) = v9;
  }
  return result;
}

void sub_20EB89168(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

int *sub_20EB89188(int *a1, int a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  std::string *v9;
  uint64_t v10;
  void **v11;
  std::string::size_type v12;
  unsigned int v13;
  const std::string::value_type *p_dst;
  std::string::size_type v15;
  int v16;
  std::string *v17;
  std::string::__raw *v18;
  uint64_t v19;
  std::string::size_type *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  int v24;
  size_t v25;
  void *v26;
  unint64_t v27;
  unint64_t v28;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  void **v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void **v36;
  std::string::size_type v37;
  uint64_t v39;
  void *v40[2];
  unsigned __int8 v41;
  double v42;
  double v43;
  double v44;
  double v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;
  void *__p[2];
  unsigned __int8 v52;
  int v53;
  void *__dst;
  size_t v55;
  int64_t v56;
  void **v57;
  const char *v58;
  void **v59;
  const char *v60;
  const char *v61;
  double v62;

  v44 = a6;
  v45 = a5;
  v43 = a7;
  *a1 = a2;
  a1[1] = a3;
  *((_QWORD *)a1 + 1) = 0;
  v9 = (std::string *)(a1 + 2);
  *((_QWORD *)a1 + 2) = 0;
  *((_QWORD *)a1 + 3) = 0;
  *((_BYTE *)a1 + 32) = 0;
  *((double *)a1 + 5) = a6;
  *((double *)a1 + 6) = a5;
  *((double *)a1 + 7) = a7;
  if ((a3 - 8) < 0xFFFFFFFD)
    goto LABEL_38;
  if (a2)
  {
    if (a2 == 1)
    {
      sub_20E8B43E8((std::string *)(a1 + 2), "IMU issue: accelerometer", 0x18uLL);
      goto LABEL_9;
    }
    if (a2 != 2)
      goto LABEL_9;
    *((_BYTE *)a1 + 31) = 18;
    *((_WORD *)a1 + 12) = 25965;
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)"Frame issue: frame";
    v10 = 26;
  }
  else
  {
    *((_BYTE *)a1 + 31) = 15;
    qmemcpy(a1 + 2, "IMU issue: gyro", 15);
    v10 = 23;
  }
  *((_BYTE *)a1 + v10) = 0;
LABEL_9:
  LODWORD(v60) = 0;
  sub_20EB7AC64(&v57, " data stream verification failed");
  if ((_DWORD)v60 == -1)
    sub_20E877AB8();
  __dst = v40;
  ((void (*)(void **__return_ptr, void **, void ***))off_24C9C51E8[v60])(__p, &__dst, &v57);
  if ((_DWORD)v60 != -1)
    ((void (*)(void **, void ***))off_24C9C51B8[v60])(&__dst, &v57);
  if ((v52 & 0x80u) == 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  if ((v52 & 0x80u) == 0)
    v12 = v52;
  else
    v12 = (std::string::size_type)__p[1];
  std::string::append(v9, (const std::string::value_type *)v11, v12);
  if ((char)v52 < 0)
  {
    operator delete(__p[0]);
    v13 = a1[1] - 5;
    if (v13 >= 3)
      goto LABEL_23;
    goto LABEL_22;
  }
  v13 = a1[1] - 5;
  if (v13 < 3)
LABEL_22:
    std::string::append(v9, off_24C9C52C0[v13], qword_210315B60[v13]);
LABEL_23:
  v62 = v45 - v44;
  v42 = v43 - v45;
  v53 = 0;
  sub_20EA7C8FC(__p, ". Failed on timestamp: ");
  sub_20E87876C((uint64_t)&v50, (uint64_t)__p, &v45);
  v57 = __p;
  v58 = ", Last known timestamp: ";
  v59 = __p;
  v60 = ", Last known timestamp: ";
  v61 = ", Last known timestamp: ";
  if (v53 == -1)
    sub_20E877AB8();
  v40[0] = &v57;
  ((void (*)(void **, void **))off_24C9C5218[v53])(v40, __p);
  sub_20E87876C((uint64_t)&v49, (uint64_t)__p, &v44);
  v57 = __p;
  v58 = ", Delta: ";
  v59 = __p;
  v60 = ", Delta: ";
  v61 = ", Delta: ";
  if (v53 == -1)
    sub_20E877AB8();
  v40[0] = &v57;
  ((void (*)(void **, void **))off_24C9C5230[v53])(v40, __p);
  sub_20E87876C((uint64_t)&v48, (uint64_t)__p, &v62);
  v57 = __p;
  v58 = ", System timestamp: ";
  v59 = __p;
  v60 = ", System timestamp: ";
  v61 = ", System timestamp: ";
  if (v53 == -1)
    sub_20E877AB8();
  v40[0] = &v57;
  ((void (*)(void **, void **))off_24C9C5248[v53])(v40, __p);
  sub_20E87876C((uint64_t)&v47, (uint64_t)__p, &v43);
  v57 = __p;
  v58 = ", Delta between system and frame: ";
  v59 = __p;
  v60 = ", Delta between system and frame: ";
  v61 = ", Delta between system and frame: ";
  if (v53 == -1)
    sub_20E877AB8();
  v40[0] = &v57;
  ((void (*)(void **, void **))off_24C9C5260[v53])(v40, __p);
  sub_20E87876C((uint64_t)&v46, (uint64_t)__p, &v42);
  v57 = __p;
  v58 = ". ";
  v59 = __p;
  v60 = ". ";
  v61 = ". ";
  if (v53 == -1)
    sub_20E877AB8();
  v40[0] = &v57;
  ((void (*)(void **, void **))off_24C9C5278[v53])(v40, __p);
  if (v53 == -1)
    sub_20E877AB8();
  v57 = v40;
  ((void (*)(void **__return_ptr, void ***, void **))off_24C9C51E8[v53])(&__dst, &v57, __p);
  if (v53 != -1)
    ((void (*)(void ***, void **))off_24C9C51B8[v53])(&v57, __p);
  if (v56 >= 0)
    p_dst = (const std::string::value_type *)&__dst;
  else
    p_dst = (const std::string::value_type *)__dst;
  if (v56 >= 0)
    v15 = HIBYTE(v56);
  else
    v15 = v55;
  std::string::append(v9, p_dst, v15);
  if (SHIBYTE(v56) < 0)
  {
    operator delete(__dst);
    if (!*(_BYTE *)(a4 + 112))
      return a1;
    goto LABEL_39;
  }
LABEL_38:
  if (!*(_BYTE *)(a4 + 112))
    return a1;
LABEL_39:
  if (*((char *)a1 + 31) < 0)
  {
    if (*((_QWORD *)a1 + 2))
      goto LABEL_41;
  }
  else if (*((_BYTE *)a1 + 31))
  {
LABEL_41:
    std::string::append(v9, "\n", 1uLL);
    goto LABEL_62;
  }
  v16 = *a1;
  if (*a1 == 2)
  {
    if ((*((_BYTE *)a1 + 31) & 0x80) != 0)
    {
      *((_QWORD *)a1 + 2) = 8;
      v18 = (std::string::__raw *)*((_QWORD *)a1 + 1);
    }
    else
    {
      *((_BYTE *)a1 + 31) = 8;
      v18 = (std::string::__raw *)v9;
    }
    v19 = 0x454D4152465BLL;
    goto LABEL_58;
  }
  if (v16 == 1)
  {
    if ((*((_BYTE *)a1 + 31) & 0x80) != 0)
    {
      *((_QWORD *)a1 + 2) = 8;
      v18 = (std::string::__raw *)*((_QWORD *)a1 + 1);
    }
    else
    {
      *((_BYTE *)a1 + 31) = 8;
      v18 = (std::string::__raw *)v9;
    }
    v19 = 0x4C454343415BLL;
LABEL_58:
    v18->__words[0] = v19 & 0xFFFFFFFFFFFFLL | 0x205D000000000000;
    v20 = &v18->__words[1];
    goto LABEL_61;
  }
  if (v16)
    goto LABEL_62;
  if ((*((_BYTE *)a1 + 31) & 0x80) != 0)
  {
    *((_QWORD *)a1 + 2) = 7;
    v17 = (std::string *)*((_QWORD *)a1 + 1);
  }
  else
  {
    *((_BYTE *)a1 + 31) = 7;
    v17 = v9;
  }
  *(_DWORD *)((char *)v17->__r_.__value_.__r.__words + 3) = 542986066;
  LODWORD(v17->__r_.__value_.__l.__data_) = 1381582683;
  v20 = (std::string::size_type *)((char *)v17->__r_.__value_.__r.__words + 7);
LABEL_61:
  *(_BYTE *)v20 = 0;
LABEL_62:
  v53 = 0;
  sub_20EA7737C(__p, "Non critical issue summary: timestamp interval [");
  if (*(_BYTE *)(a4 + 8))
  {
    sub_20E87876C((uint64_t)&v57, (uint64_t)__p, (double *)a4);
  }
  else
  {
    v57 = __p;
    v58 = "nullopt";
    v59 = __p;
    v60 = "nullopt";
    v61 = "nullopt";
    if (v53 == -1)
      sub_20E877AB8();
    __dst = &v57;
    ((void (*)(void **, void **))off_24C9C51D0[v53])(&__dst, __p);
  }
  v57 = __p;
  v58 = "-";
  v59 = __p;
  v60 = "-";
  v61 = "-";
  if (v53 == -1)
    sub_20E877AB8();
  __dst = &v57;
  ((void (*)(void **, void **))off_24C9C5290[v53])(&__dst, __p);
  sub_20E87876C((uint64_t)&v42, (uint64_t)__p, &v45);
  v57 = __p;
  v58 = "]: ";
  v59 = __p;
  v60 = "]: ";
  v61 = "]: ";
  if (v53 == -1)
    sub_20E877AB8();
  __dst = &v57;
  ((void (*)(void **, void **))off_24C9C52A8[v53])(&__dst, __p);
  v21 = operator new();
  *(_QWORD *)(v21 + 272) = 0;
  *(_OWORD *)(v21 + 240) = 0u;
  *(_OWORD *)(v21 + 256) = 0u;
  *(_OWORD *)(v21 + 208) = 0u;
  *(_OWORD *)(v21 + 224) = 0u;
  *(_OWORD *)(v21 + 176) = 0u;
  *(_OWORD *)(v21 + 192) = 0u;
  *(_OWORD *)(v21 + 144) = 0u;
  *(_OWORD *)(v21 + 160) = 0u;
  *(_OWORD *)(v21 + 112) = 0u;
  *(_OWORD *)(v21 + 128) = 0u;
  *(_OWORD *)(v21 + 80) = 0u;
  *(_OWORD *)(v21 + 96) = 0u;
  *(_OWORD *)(v21 + 48) = 0u;
  *(_OWORD *)(v21 + 64) = 0u;
  *(_OWORD *)(v21 + 16) = 0u;
  *(_OWORD *)(v21 + 32) = 0u;
  *(_OWORD *)v21 = 0u;
  sub_20E863438(v21);
  v57 = (void **)v21;
  sub_20E86A980((_QWORD *)(v21 + 16), (uint64_t)"totally recieved: ", 18);
  std::ostream::operator<<();
  if (*(_QWORD *)(a4 + 24))
  {
    v22 = sub_20E86A980((_QWORD *)(v21 + 16), (uint64_t)", latency issues: ", 18);
    sub_20EB8C01C(v22);
  }
  if (*(_QWORD *)(a4 + 64))
  {
    v23 = sub_20E86A980((_QWORD *)(v21 + 16), (uint64_t)", frequency issues: ", 20);
    sub_20EB8C01C(v23);
  }
  sub_20E86A980((_QWORD *)(v21 + 16), (uint64_t)", thermal model issues: ", 24);
  std::ostream::operator<<();
  v24 = *(_DWORD *)(v21 + 120);
  if ((v24 & 0x10) != 0)
  {
    v27 = *(_QWORD *)(v21 + 112);
    v28 = *(_QWORD *)(v21 + 72);
    if (v27 < v28)
    {
      *(_QWORD *)(v21 + 112) = v28;
      v27 = v28;
    }
    v29 = *(const void **)(v21 + 64);
    v25 = v27 - (_QWORD)v29;
    if (v27 - (unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_106;
  }
  else
  {
    if ((v24 & 8) == 0)
    {
      v25 = 0;
      HIBYTE(v56) = 0;
      v26 = &__dst;
      goto LABEL_85;
    }
    v39 = *(_QWORD *)(v21 + 56);
    v29 = *(const void **)(v21 + 40);
    v25 = v39 - (_QWORD)v29;
    if ((unint64_t)(v39 - (_QWORD)v29) >= 0x7FFFFFFFFFFFFFF8)
LABEL_106:
      sub_20E860B7C();
  }
  if (v25 >= 0x17)
  {
    v30 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v25 | 7) != 0x17)
      v30 = v25 | 7;
    v31 = v30 + 1;
    v26 = operator new(v30 + 1);
    v55 = v25;
    v56 = v31 | 0x8000000000000000;
    __dst = v26;
  }
  else
  {
    HIBYTE(v56) = v25;
    v26 = &__dst;
    if (!v25)
      goto LABEL_85;
  }
  memmove(v26, v29, v25);
LABEL_85:
  *((_BYTE *)v26 + v25) = 0;
  v32 = v57;
  if (v57)
  {
    v33 = MEMORY[0x24BEDB7F0];
    v34 = *MEMORY[0x24BEDB7F0];
    *v57 = (void *)*MEMORY[0x24BEDB7F0];
    v35 = *(void **)(v33 + 72);
    *(void **)((char *)v32 + *(_QWORD *)(v34 - 24)) = *(void **)(v33 + 64);
    v32[3] = (void *)(MEMORY[0x24BEDB848] + 16);
    v32[2] = v35;
    if (*((char *)v32 + 111) < 0)
      operator delete(v32[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v32 + 16);
    MEMORY[0x212BC6398](v32, 0x10B2C40EED050F3);
  }
  v57 = __p;
  v58 = (const char *)&__dst;
  v59 = __p;
  v60 = (const char *)&__dst;
  v61 = (const char *)&__dst;
  if (v53 == -1)
    sub_20E877AB8();
  v62 = COERCE_DOUBLE(&v57);
  ((void (*)(double *, void **))off_24C9C5200[v53])(&v62, __p);
  if (SHIBYTE(v56) < 0)
    operator delete(__dst);
  if (v53 == -1)
    sub_20E877AB8();
  v57 = &__dst;
  ((void (*)(void **__return_ptr, void ***, void **))off_24C9C51E8[v53])(v40, &v57, __p);
  if (v53 != -1)
    ((void (*)(void ***, void **))off_24C9C51B8[v53])(&v57, __p);
  if ((v41 & 0x80u) == 0)
    v36 = v40;
  else
    v36 = (void **)v40[0];
  if ((v41 & 0x80u) == 0)
    v37 = v41;
  else
    v37 = (std::string::size_type)v40[1];
  std::string::append(v9, (const std::string::value_type *)v36, v37);
  if ((char)v41 < 0)
    operator delete(v40[0]);
  *((_BYTE *)a1 + 32) = 1;
  return a1;
}

void sub_20EB89B30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;
  void **v34;

  if (a33 < 0)
    operator delete(__p);
  if (*(char *)(v33 + 31) < 0)
    operator delete(*v34);
  _Unwind_Resume(exception_object);
}

void sub_20EB89C44(int *a1, int a2)
{
  int v4;
  const std::string::value_type *v5;
  std::string::size_type v6;
  std::string *v7;
  uint64_t *v8;
  unsigned __int8 v9;
  std::string::size_type v11;
  const char *v12;
  char *v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  uint64_t *v19;
  unsigned __int8 v20;
  std::string::size_type v22;
  const char *v23;
  char *v24;
  size_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t j;
  uint64_t v29;
  uint64_t *v30;
  unsigned __int8 v31;
  unint64_t v32;
  char *v33;
  std::string::size_type v34;
  const char *v35;
  char *v36;
  size_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t n;
  uint64_t v41;
  int v42;
  uint64_t *v43;
  unsigned __int8 v44;
  std::string::size_type v46;
  const char *v47;
  char *v48;
  size_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t k;
  uint64_t v53;
  uint64_t *v54;
  unsigned __int8 v55;
  std::string::size_type v57;
  const char *v58;
  char *v59;
  size_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t m;
  uint64_t v64;
  std::string::size_type v65;
  const char *v66;
  std::string::size_type v67;
  const char *v68;
  std::string::size_type v69;
  const char *v70;
  std::string::size_type v71;
  const char *v72;
  std::string::size_type v73;
  const char *v74;
  std::string *p_dst;
  std::string::size_type size;
  double v77;
  std::string v78;
  std::string v79;
  std::string __dst;
  unsigned __int8 v81;
  char v82;
  std::string v83;
  int v84;
  std::string *v85;
  std::string v86;
  const char *v87;
  void *v88;
  char v89;
  char v90;
  void *v91;
  char v92;
  char v93;
  void *v94;
  char v95;
  void *__p;
  char v97;
  uint64_t v98;

  v98 = *MEMORY[0x24BDAC8D0];
  __dst.__r_.__value_.__s.__data_[0] = 0;
  v81 = 0;
  v4 = *a1;
  if (*a1 == 2)
    v5 = "Frame";
  else
    v5 = "Imu";
  v86.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&v86.__r_.__value_.__r.__words[1] = xmmword_2102DCC80;
  strcpy(v86.__r_.__value_.__l.__data_, "Data Verification Failure: ");
  if (v4 == 2)
    v6 = 5;
  else
    v6 = 3;
  v7 = std::string::append(&v86, v5, v6);
  v79 = *v7;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v86.__r_.__value_.__l.__data_);
  switch(a1[1])
  {
    case 0:
      goto LABEL_39;
    case 1:
      v8 = sub_210219C18();
      v9 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
      if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
      {
        __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DDD0);
      }
      if (!atomic_load(&qword_254A5A450))
        goto LABEL_112;
      v12 = (const char *)*((_QWORD *)a1 + 5);
      v11 = *((_QWORD *)a1 + 6);
      LODWORD(v86.__r_.__value_.__l.__data_) = 136446722;
      *(std::string::size_type *)((char *)v86.__r_.__value_.__r.__words + 4) = (std::string::size_type)v5;
      WORD2(v86.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&v86.__r_.__value_.__r.__words[1] + 6) = v11;
      HIWORD(v86.__r_.__value_.__r.__words[2]) = 2048;
      v87 = v12;
      v13 = (char *)_os_log_send_and_compose_impl();
      v14 = strlen(v13);
      v83.__r_.__value_.__r.__words[0] = 0;
      pthread_threadid_np(0, (__uint64_t *)&v83);
      v15 = v83.__r_.__value_.__r.__words[0];
      timespec_get((timespec *)&v83, 1);
      sub_210219E20(&v86, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v8 + 1), (__int128 *)(v8 + 5), "DV:RATE:Low,%{public}s,%f,%f", 0x1CuLL, v13, v14, v15, &v83);
      std::mutex::lock(&stru_254A5A410);
      v16 = qword_254A5A458;
      for (i = unk_254A5A460; v16 != i; v16 += 40)
      {
        v18 = *(_QWORD *)(v16 + 32);
        if (!v18)
          sub_20E86D37C();
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v18 + 48))(v18, &v86);
      }
      std::mutex::unlock(&stru_254A5A410);
      if (v97 < 0)
      {
        operator delete(__p);
        if ((v95 & 0x80000000) == 0)
        {
LABEL_17:
          if (!v93)
            goto LABEL_105;
          goto LABEL_103;
        }
      }
      else if ((v95 & 0x80000000) == 0)
      {
        goto LABEL_17;
      }
      operator delete(v94);
      if (!v93)
        goto LABEL_105;
LABEL_103:
      if (v92 < 0)
        operator delete(v91);
LABEL_105:
      if (v90 && v89 < 0)
        operator delete(v88);
      if (SHIBYTE(v87) < 0)
        operator delete((void *)v86.__r_.__value_.__l.__size_);
      if (v13)
        free(v13);
LABEL_112:
      if (os_signpost_enabled((os_log_t)*v8))
      {
        v70 = (const char *)*((_QWORD *)a1 + 5);
        v69 = *((_QWORD *)a1 + 6);
        LODWORD(v86.__r_.__value_.__l.__data_) = 136446722;
        *(std::string::size_type *)((char *)v86.__r_.__value_.__r.__words + 4) = (std::string::size_type)v5;
        WORD2(v86.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&v86.__r_.__value_.__r.__words[1] + 6) = v69;
        HIWORD(v86.__r_.__value_.__r.__words[2]) = 2048;
        v87 = v70;
        _os_signpost_emit_unreliably_with_name_impl();
      }
      *(double *)&v83.__r_.__value_.__l.__data_ = *((double *)a1 + 6) - *((double *)a1 + 5);
      sub_20EB8B10C((uint64_t)&v86, (__int128 *)&v79, " sensor rate too low with dt of ", (double *)&v83);
      goto LABEL_156;
    case 2:
      v19 = sub_210219C18();
      v20 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
      if ((v20 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
      {
        __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DDD0);
      }
      if (!atomic_load(&qword_254A5A450))
        goto LABEL_72;
      v23 = (const char *)*((_QWORD *)a1 + 5);
      v22 = *((_QWORD *)a1 + 6);
      LODWORD(v86.__r_.__value_.__l.__data_) = 136446722;
      *(std::string::size_type *)((char *)v86.__r_.__value_.__r.__words + 4) = (std::string::size_type)v5;
      WORD2(v86.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&v86.__r_.__value_.__r.__words[1] + 6) = v22;
      HIWORD(v86.__r_.__value_.__r.__words[2]) = 2048;
      v87 = v23;
      v24 = (char *)_os_log_send_and_compose_impl();
      v25 = strlen(v24);
      v83.__r_.__value_.__r.__words[0] = 0;
      pthread_threadid_np(0, (__uint64_t *)&v83);
      v26 = v83.__r_.__value_.__r.__words[0];
      timespec_get((timespec *)&v83, 1);
      sub_210219E20(&v86, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v19 + 1), (__int128 *)(v19 + 5), "DV:RATE:High,%{public}s,%f,%f", 0x1DuLL, v24, v25, v26, &v83);
      std::mutex::lock(&stru_254A5A410);
      v27 = qword_254A5A458;
      for (j = unk_254A5A460; v27 != j; v27 += 40)
      {
        v29 = *(_QWORD *)(v27 + 32);
        if (!v29)
          sub_20E86D37C();
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v29 + 48))(v29, &v86);
      }
      std::mutex::unlock(&stru_254A5A410);
      if (v97 < 0)
      {
        operator delete(__p);
        if ((v95 & 0x80000000) == 0)
        {
LABEL_26:
          if (!v93)
            goto LABEL_65;
          goto LABEL_63;
        }
      }
      else if ((v95 & 0x80000000) == 0)
      {
        goto LABEL_26;
      }
      operator delete(v94);
      if (!v93)
        goto LABEL_65;
LABEL_63:
      if (v92 < 0)
        operator delete(v91);
LABEL_65:
      if (v90 && v89 < 0)
        operator delete(v88);
      if (SHIBYTE(v87) < 0)
        operator delete((void *)v86.__r_.__value_.__l.__size_);
      if (v24)
        free(v24);
LABEL_72:
      if (os_signpost_enabled((os_log_t)*v19))
      {
        v66 = (const char *)*((_QWORD *)a1 + 5);
        v65 = *((_QWORD *)a1 + 6);
        LODWORD(v86.__r_.__value_.__l.__data_) = 136446722;
        *(std::string::size_type *)((char *)v86.__r_.__value_.__r.__words + 4) = (std::string::size_type)v5;
        WORD2(v86.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&v86.__r_.__value_.__r.__words[1] + 6) = v65;
        HIWORD(v86.__r_.__value_.__r.__words[2]) = 2048;
        v87 = v66;
        _os_signpost_emit_unreliably_with_name_impl();
      }
      v77 = *((double *)a1 + 6) - *((double *)a1 + 5);
      v84 = -1;
      if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
        sub_20E860C04(&v83, v79.__r_.__value_.__l.__data_, v79.__r_.__value_.__l.__size_);
      else
        v83 = v79;
      v84 = 1;
      v86.__r_.__value_.__r.__words[0] = (std::string::size_type)&v83;
      v86.__r_.__value_.__l.__size_ = (std::string::size_type)" sensor rate too high with dt of ";
      v86.__r_.__value_.__r.__words[2] = (std::string::size_type)&v83;
      v87 = " sensor rate too high with dt of ";
      v88 = " sensor rate too high with dt of ";
      sub_20EB8CCF8((uint64_t *)&v86.__r_.__value_.__r.__words[2], (uint64_t)&v83);
      sub_20E87876C((uint64_t)&v82, (uint64_t)&v83, &v77);
      v86.__r_.__value_.__r.__words[0] = (std::string::size_type)&v83;
      v86.__r_.__value_.__l.__size_ = (std::string::size_type)"s";
      v86.__r_.__value_.__r.__words[2] = (std::string::size_type)&v83;
      v87 = "s";
      v88 = "s";
      if (v84 == -1)
        sub_20E877AB8();
      v85 = &v86;
      ((void (*)(std::string **, std::string *))off_24C9C5290[v84])(&v85, &v83);
      if (v84 == -1)
        sub_20E877AB8();
      v86.__r_.__value_.__r.__words[0] = (std::string::size_type)&v85;
      ((void (*)(std::string *__return_ptr, std::string *, std::string *))off_24C9C51E8[v84])(&v78, &v86, &v83);
      if (v84 != -1)
        goto LABEL_134;
      goto LABEL_135;
    case 3:
      v43 = sub_210219C18();
      v44 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
      if ((v44 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
      {
        __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DDD0);
      }
      if (!atomic_load(&qword_254A5A450))
        goto LABEL_126;
      v46 = *((_QWORD *)a1 + 6);
      v47 = (const char *)*((_QWORD *)a1 + 7);
      LODWORD(v86.__r_.__value_.__l.__data_) = 136446722;
      *(std::string::size_type *)((char *)v86.__r_.__value_.__r.__words + 4) = (std::string::size_type)v5;
      WORD2(v86.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&v86.__r_.__value_.__r.__words[1] + 6) = v46;
      HIWORD(v86.__r_.__value_.__r.__words[2]) = 2048;
      v87 = v47;
      v48 = (char *)_os_log_send_and_compose_impl();
      v49 = strlen(v48);
      v83.__r_.__value_.__r.__words[0] = 0;
      pthread_threadid_np(0, (__uint64_t *)&v83);
      v50 = v83.__r_.__value_.__r.__words[0];
      timespec_get((timespec *)&v83, 1);
      sub_210219E20(&v86, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v43 + 1), (__int128 *)(v43 + 5), "DV:LAT:Low,%{public}s,%f,%f", 0x1BuLL, v48, v49, v50, &v83);
      std::mutex::lock(&stru_254A5A410);
      v51 = qword_254A5A458;
      for (k = unk_254A5A460; v51 != k; v51 += 40)
      {
        v53 = *(_QWORD *)(v51 + 32);
        if (!v53)
          sub_20E86D37C();
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v53 + 48))(v53, &v86);
      }
      std::mutex::unlock(&stru_254A5A410);
      if (v97 < 0)
      {
        operator delete(__p);
        if ((v95 & 0x80000000) == 0)
        {
LABEL_48:
          if (!v93)
            goto LABEL_119;
          goto LABEL_117;
        }
      }
      else if ((v95 & 0x80000000) == 0)
      {
        goto LABEL_48;
      }
      operator delete(v94);
      if (!v93)
        goto LABEL_119;
LABEL_117:
      if (v92 < 0)
        operator delete(v91);
LABEL_119:
      if (v90 && v89 < 0)
        operator delete(v88);
      if (SHIBYTE(v87) < 0)
        operator delete((void *)v86.__r_.__value_.__l.__size_);
      if (v48)
        free(v48);
LABEL_126:
      if (os_signpost_enabled((os_log_t)*v43))
      {
        v71 = *((_QWORD *)a1 + 6);
        v72 = (const char *)*((_QWORD *)a1 + 7);
        LODWORD(v86.__r_.__value_.__l.__data_) = 136446722;
        *(std::string::size_type *)((char *)v86.__r_.__value_.__r.__words + 4) = (std::string::size_type)v5;
        WORD2(v86.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&v86.__r_.__value_.__r.__words[1] + 6) = v71;
        HIWORD(v86.__r_.__value_.__r.__words[2]) = 2048;
        v87 = v72;
        _os_signpost_emit_unreliably_with_name_impl();
      }
      v77 = *((double *)a1 + 7) - *((double *)a1 + 6);
      v84 = -1;
      if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
        sub_20E860C04(&v83, v79.__r_.__value_.__l.__data_, v79.__r_.__value_.__l.__size_);
      else
        v83 = v79;
      v84 = 1;
      v86.__r_.__value_.__r.__words[0] = (std::string::size_type)&v83;
      v86.__r_.__value_.__l.__size_ = (std::string::size_type)" latency too low with delay of ";
      v86.__r_.__value_.__r.__words[2] = (std::string::size_type)&v83;
      v87 = " latency too low with delay of ";
      v88 = " latency too low with delay of ";
      sub_20E9F631C((uint64_t *)&v86.__r_.__value_.__r.__words[2], (uint64_t)&v83);
      sub_20E87876C((uint64_t)&v82, (uint64_t)&v83, &v77);
      v86.__r_.__value_.__r.__words[0] = (std::string::size_type)&v83;
      v86.__r_.__value_.__l.__size_ = (std::string::size_type)"s";
      v86.__r_.__value_.__r.__words[2] = (std::string::size_type)&v83;
      v87 = "s";
      v88 = "s";
      if (v84 == -1)
        sub_20E877AB8();
      v85 = &v86;
      ((void (*)(std::string **, std::string *))off_24C9C5290[v84])(&v85, &v83);
      if (v84 == -1)
        sub_20E877AB8();
      v86.__r_.__value_.__r.__words[0] = (std::string::size_type)&v85;
      ((void (*)(std::string *__return_ptr, std::string *, std::string *))off_24C9C51E8[v84])(&v78, &v86, &v83);
      if (v84 != -1)
        goto LABEL_134;
      goto LABEL_135;
    case 4:
      v54 = sub_210219C18();
      v55 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
      if ((v55 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
      {
        __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DDD0);
      }
      if (!atomic_load(&qword_254A5A450))
        goto LABEL_153;
      v57 = *((_QWORD *)a1 + 6);
      v58 = (const char *)*((_QWORD *)a1 + 7);
      LODWORD(v86.__r_.__value_.__l.__data_) = 136446722;
      *(std::string::size_type *)((char *)v86.__r_.__value_.__r.__words + 4) = (std::string::size_type)v5;
      WORD2(v86.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&v86.__r_.__value_.__r.__words[1] + 6) = v57;
      HIWORD(v86.__r_.__value_.__r.__words[2]) = 2048;
      v87 = v58;
      v59 = (char *)_os_log_send_and_compose_impl();
      v60 = strlen(v59);
      v83.__r_.__value_.__r.__words[0] = 0;
      pthread_threadid_np(0, (__uint64_t *)&v83);
      v61 = v83.__r_.__value_.__r.__words[0];
      timespec_get((timespec *)&v83, 1);
      sub_210219E20(&v86, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v54 + 1), (__int128 *)(v54 + 5), "DV:LAT:High,%{public}s,%f,%f", 0x1CuLL, v59, v60, v61, &v83);
      std::mutex::lock(&stru_254A5A410);
      v62 = qword_254A5A458;
      for (m = unk_254A5A460; v62 != m; v62 += 40)
      {
        v64 = *(_QWORD *)(v62 + 32);
        if (!v64)
          sub_20E86D37C();
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v64 + 48))(v64, &v86);
      }
      std::mutex::unlock(&stru_254A5A410);
      if (v97 < 0)
      {
        operator delete(__p);
        if ((v95 & 0x80000000) == 0)
        {
LABEL_57:
          if (!v93)
            goto LABEL_146;
          goto LABEL_144;
        }
      }
      else if ((v95 & 0x80000000) == 0)
      {
        goto LABEL_57;
      }
      operator delete(v94);
      if (!v93)
        goto LABEL_146;
LABEL_144:
      if (v92 < 0)
        operator delete(v91);
LABEL_146:
      if (v90 && v89 < 0)
        operator delete(v88);
      if (SHIBYTE(v87) < 0)
        operator delete((void *)v86.__r_.__value_.__l.__size_);
      if (v59)
        free(v59);
LABEL_153:
      if (os_signpost_enabled((os_log_t)*v54))
      {
        v73 = *((_QWORD *)a1 + 6);
        v74 = (const char *)*((_QWORD *)a1 + 7);
        LODWORD(v86.__r_.__value_.__l.__data_) = 136446722;
        *(std::string::size_type *)((char *)v86.__r_.__value_.__r.__words + 4) = (std::string::size_type)v5;
        WORD2(v86.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&v86.__r_.__value_.__r.__words[1] + 6) = v73;
        HIWORD(v86.__r_.__value_.__r.__words[2]) = 2048;
        v87 = v74;
        _os_signpost_emit_unreliably_with_name_impl();
      }
      *(double *)&v83.__r_.__value_.__l.__data_ = *((double *)a1 + 7) - *((double *)a1 + 6);
      sub_20EB8B10C((uint64_t)&v86, (__int128 *)&v79, " latency too high with delay of ", (double *)&v83);
LABEL_156:
      if (!v81)
      {
        __dst = v86;
        v81 = 1;
        v42 = 1;
        if (!a2)
          goto LABEL_163;
        goto LABEL_162;
      }
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      __dst = v86;
      v42 = v81;
      if (a2)
        goto LABEL_162;
      goto LABEL_163;
    case 7:
      v30 = sub_210219C18();
      v31 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
      if ((v31 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
      {
        __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DDD0);
      }
      v32 = atomic_load(&qword_254A5A450);
      v33 = "18ResetDenseCloudTagES5_EEE";
      if (!v32)
        goto LABEL_92;
      v35 = (const char *)*((_QWORD *)a1 + 5);
      v34 = *((_QWORD *)a1 + 6);
      LODWORD(v86.__r_.__value_.__l.__data_) = 136446722;
      *(std::string::size_type *)((char *)v86.__r_.__value_.__r.__words + 4) = (std::string::size_type)v5;
      WORD2(v86.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&v86.__r_.__value_.__r.__words[1] + 6) = v34;
      HIWORD(v86.__r_.__value_.__r.__words[2]) = 2048;
      v87 = v35;
      v36 = (char *)_os_log_send_and_compose_impl();
      v37 = strlen(v36);
      v83.__r_.__value_.__r.__words[0] = 0;
      pthread_threadid_np(0, (__uint64_t *)&v83);
      v38 = v83.__r_.__value_.__r.__words[0];
      timespec_get((timespec *)&v83, 1);
      sub_210219E20(&v86, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v30 + 1), (__int128 *)(v30 + 5), "DV:DROP:%{public}s,%f,%f", 0x18uLL, v36, v37, v38, &v83);
      std::mutex::lock(&stru_254A5A410);
      v39 = qword_254A5A458;
      for (n = unk_254A5A460; v39 != n; v39 += 40)
      {
        v41 = *(_QWORD *)(v39 + 32);
        if (!v41)
          sub_20E86D37C();
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v41 + 48))(v41, &v86);
      }
      std::mutex::unlock(&stru_254A5A410);
      if (v97 < 0)
      {
        operator delete(__p);
        v33 = "18ResetDenseCloudTagES5_EEE";
        if ((v95 & 0x80000000) == 0)
        {
LABEL_35:
          if (!v93)
            goto LABEL_85;
          goto LABEL_83;
        }
      }
      else
      {
        v33 = "N4cv3d3kit11concurrency7ChannelIFNS_9applecv3d22concurrent_ray_casting18ResetDenseCloudTagES5_EEE" + 70;
        if ((v95 & 0x80000000) == 0)
          goto LABEL_35;
      }
      operator delete(v94);
      if (!v93)
        goto LABEL_85;
LABEL_83:
      if (v92 < 0)
        operator delete(v91);
LABEL_85:
      if (v90 && v89 < 0)
        operator delete(v88);
      if (SHIBYTE(v87) < 0)
        operator delete((void *)v86.__r_.__value_.__l.__size_);
      if (v36)
        free(v36);
LABEL_92:
      if (os_signpost_enabled((os_log_t)*v30))
      {
        v68 = (const char *)*((_QWORD *)a1 + 5);
        v67 = *((_QWORD *)a1 + 6);
        LODWORD(v86.__r_.__value_.__l.__data_) = *((_QWORD *)v33 + 506);
        *(std::string::size_type *)((char *)v86.__r_.__value_.__r.__words + 4) = (std::string::size_type)v5;
        WORD2(v86.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&v86.__r_.__value_.__r.__words[1] + 6) = v67;
        HIWORD(v86.__r_.__value_.__r.__words[2]) = 2048;
        v87 = v68;
        _os_signpost_emit_unreliably_with_name_impl();
      }
      v77 = *((double *)a1 + 6) - *((double *)a1 + 5);
      v84 = -1;
      if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
        sub_20E860C04(&v83, v79.__r_.__value_.__l.__data_, v79.__r_.__value_.__l.__size_);
      else
        v83 = v79;
      v84 = 1;
      v86.__r_.__value_.__r.__words[0] = (std::string::size_type)&v83;
      v86.__r_.__value_.__l.__size_ = (std::string::size_type)" significant sensor drop detected with dt of ";
      v86.__r_.__value_.__r.__words[2] = (std::string::size_type)&v83;
      v87 = " significant sensor drop detected with dt of ";
      v88 = " significant sensor drop detected with dt of ";
      sub_20EB8CEF0((uint64_t *)&v86.__r_.__value_.__r.__words[2], (uint64_t)&v83);
      sub_20E87876C((uint64_t)&v82, (uint64_t)&v83, &v77);
      v86.__r_.__value_.__r.__words[0] = (std::string::size_type)&v83;
      v86.__r_.__value_.__l.__size_ = (std::string::size_type)"s";
      v86.__r_.__value_.__r.__words[2] = (std::string::size_type)&v83;
      v87 = "s";
      v88 = "s";
      if (v84 == -1)
        sub_20E877AB8();
      v85 = &v86;
      ((void (*)(std::string **, std::string *))off_24C9C5290[v84])(&v85, &v83);
      if (v84 == -1)
        sub_20E877AB8();
      v86.__r_.__value_.__r.__words[0] = (std::string::size_type)&v85;
      ((void (*)(std::string *__return_ptr, std::string *, std::string *))off_24C9C51E8[v84])(&v78, &v86, &v83);
      if (v84 != -1)
LABEL_134:
        ((void (*)(std::string *, std::string *))off_24C9C51B8[v84])(&v86, &v83);
LABEL_135:
      if (!v81)
      {
        __dst = v78;
        v81 = 1;
        v42 = 1;
        if (!a2)
          goto LABEL_163;
        goto LABEL_162;
      }
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      __dst = v78;
      v42 = v81;
      if (a2)
      {
LABEL_162:
        if (v42)
        {
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_dst = &__dst;
          else
            p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
          else
            size = __dst.__r_.__value_.__l.__size_;
          sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/DataVerification/src/DataVerificationStatus.cpp", 146, (uint64_t)"", 0, (uint64_t)p_dst, size, (void (*)(void **))sub_21023DDB0);
          abort();
        }
      }
LABEL_163:
      if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v79.__r_.__value_.__l.__data_);
        v42 = v81;
      }
      if (v42)
      {
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
      }
      return;
    default:
      if (v81)
      {
        sub_20E8B43E8(&__dst, "Data Verification Failure", 0x19uLL);
LABEL_39:
        v42 = v81;
        if (a2)
          goto LABEL_162;
      }
      else
      {
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
        *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_2102DBFE0;
        strcpy(__dst.__r_.__value_.__l.__data_, "Data Verification Failure");
        v81 = 1;
        v42 = 1;
        if (a2)
          goto LABEL_162;
      }
      goto LABEL_163;
  }
}

void sub_20EB8AF78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  sub_20E877A60((uint64_t)&a33);
  if (a22 < 0)
    operator delete(__p);
  if (a30)
  {
    if (a29 < 0)
      operator delete(a24);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20EB8B10C(uint64_t a1, __int128 *a2, const char *a3, double *a4)
{
  uint64_t result;
  char v7;
  __int128 __dst;
  uint64_t v9;
  int v10;
  __int128 *p_dst;
  const char *v12;
  __int128 *v13;
  const char *v14;
  const char *v15;
  __int128 **p_p_dst;

  v10 = -1;
  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(&__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    __dst = *a2;
    v9 = *((_QWORD *)a2 + 2);
  }
  v10 = 1;
  p_dst = &__dst;
  v12 = a3;
  v13 = &__dst;
  v14 = a3;
  v15 = a3;
  sub_20EB8C0C8((uint64_t *)&v13, (uint64_t)&__dst);
  sub_20E87876C((uint64_t)&v7, (uint64_t)&__dst, a4);
  p_dst = &__dst;
  v12 = "s";
  v13 = &__dst;
  v14 = "s";
  v15 = "s";
  if (v10 == -1)
    sub_20E877AB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24C9C5290[v10])(&p_p_dst, &__dst);
  if (v10 == -1)
    sub_20E877AB8();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24C9C51E8[v10])(&p_dst, &__dst);
  if (v10 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24C9C51B8[v10])(&p_dst, &__dst);
  return result;
}

void sub_20EB8B254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EB8B26C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EB8B280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EB8B294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EB8B2A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EB8B2BC(int *a1)
{
  uint64_t v2;
  int v3;
  size_t v4;
  __int128 *p_dst;
  unint64_t v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  void **v15;
  uint64_t v16;
  const char *v17;
  size_t v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  const char *v21;
  size_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void **v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  size_t v31;
  std::__shared_weak_count_vtbl *v32;
  std::__shared_weak_count *v33;
  size_t v34;
  size_t v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  char v41;
  _QWORD *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  void *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  _QWORD *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  __int128 *v88;
  int v89;
  const char *v90;
  int v91;
  __int128 __dst;
  unint64_t rep;
  int v94;
  const char *v95;
  int v96;
  const char *v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  uint64_t v100;
  void *v101[2];
  int64_t v102;
  char v103;
  _QWORD *v104;
  __int128 v105;
  _QWORD v106[2];
  __int128 v107;
  std::__shared_weak_count *v108;
  char *v109;
  std::__shared_weak_count *v110;
  _BYTE object[24];
  __int128 v112;
  void *v113[2];
  unint64_t v114;
  const void *v115;
  unint64_t v116;
  void *__p;
  char v118;
  unint64_t v119;
  int v120;
  _QWORD v121[22];

  v121[19] = *MEMORY[0x24BDAC8D0];
  sub_20E863438((uint64_t)object);
  v2 = *a1;
  if (v2 < 3)
    sub_20E86A980(&object[16], (uint64_t)off_24C9C52D8[v2], qword_210315B78[v2]);
  sub_20E86A980(&object[16], (uint64_t)" ", 1);
  v3 = a1[1] - 5;
  if (v3 > 2)
  {
    LOBYTE(v101[0]) = 0;
    v103 = 0;
    goto LABEL_19;
  }
  sub_20E86A980(&object[16], (uint64_t)off_24C9C52F0[v3], qword_210315B90[v3]);
  if ((v120 & 0x10) != 0)
  {
    v6 = v119;
    if (v119 < v116)
    {
      v119 = v116;
      v6 = v116;
    }
    v7 = v115;
    v4 = v6 - (_QWORD)v115;
    if (v6 - (unint64_t)v115 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_33;
  }
  else
  {
    if ((v120 & 8) == 0)
    {
      v4 = 0;
      HIBYTE(rep) = 0;
      p_dst = &__dst;
      goto LABEL_18;
    }
    v7 = v113[0];
    v4 = v114 - (unint64_t)v113[0];
    if (v114 - (unint64_t)v113[0] > 0x7FFFFFFFFFFFFFF7)
LABEL_33:
      sub_20E860B7C();
  }
  if (v4 >= 0x17)
  {
    v8 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v8 = v4 | 7;
    v9 = v8 + 1;
    p_dst = (__int128 *)operator new(v8 + 1);
    *((_QWORD *)&__dst + 1) = v4;
    rep = v9 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(rep) = v4;
    p_dst = &__dst;
    if (!v4)
      goto LABEL_18;
  }
  memmove(p_dst, v7, v4);
LABEL_18:
  *((_BYTE *)p_dst + v4) = 0;
  *(_OWORD *)v101 = __dst;
  v102 = rep;
  v103 = 1;
LABEL_19:
  *(_QWORD *)object = *MEMORY[0x24BEDB7F0];
  v10 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)&object[*(_QWORD *)(*(_QWORD *)object - 24)] = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  *(_QWORD *)&object[16] = v10;
  *(_QWORD *)&v112 = MEMORY[0x24BEDB848] + 16;
  if (v118 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](v121);
  if (v103)
  {
    v11 = atomic_load((unsigned __int8 *)&qword_254A5B2C0);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A5B2C0))
    {
      sub_21021D3D8(&__dst);
      sub_20E8610C0(object, "cv3d.vio");
      sub_20E8C4068((uint64_t **)&__dst, (uint64_t)object, &qword_254A5B2B8);
      if ((object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_guard_release(&qword_254A5B2C0);
    }
    v100 = qword_254A5B2B8;
    if (**(int **)(qword_254A5B2B8 + 56) > 5)
      goto LABEL_151;
    v12 = *(unsigned __int8 *)(qword_254A5B2B8 + 72);
    v13 = sub_20E8C31DC(qword_254A5B2B8, "OSLogSurrogateAppender", 1, 0);
    v14 = v13;
    if (!v12 && !v13)
      goto LABEL_151;
    v91 = v12;
    *(_QWORD *)&__dst = &v100;
    *((std::chrono::steady_clock::time_point *)&__dst + 1) = std::chrono::steady_clock::now();
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v94 = 5;
    v95 = "unknown file";
    v96 = 184;
    v98 = 0;
    v99 = 0;
    v97 = "unknown function";
    if (v102 >= 0)
      v15 = v101;
    else
      v15 = (void **)v101[0];
    v16 = *(_QWORD *)__dst;
    v17 = (const char *)(*(_QWORD *)__dst + 16);
    v90 = v17;
    if (*(char *)(*(_QWORD *)__dst + 39) < 0)
    {
      v17 = *(const char **)(v16 + 16);
      v18 = *(_QWORD *)(v16 + 24);
      v20 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v20 & 1) != 0)
        goto LABEL_35;
    }
    else
    {
      v18 = *(unsigned __int8 *)(*(_QWORD *)__dst + 39);
      v19 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v19 & 1) != 0)
        goto LABEL_35;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
      if ((_BYTE)v112 && (object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_35:
    if (byte_254A4A4F8[23] >= 0)
      v21 = byte_254A4A4F8;
    else
      v21 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v22 = byte_254A4A4F8[23];
    else
      v22 = *(_QWORD *)&byte_254A4A4F8[8];
    *(_QWORD *)object = os_log_create(v21, v17);
    v23 = &object[8];
    if (v22 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v22 >= 0x17)
    {
      v24 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v22 | 7) != 0x17)
        v24 = v22 | 7;
      v25 = v24 + 1;
      v23 = operator new(v24 + 1);
      *(_QWORD *)&object[16] = v22;
      *(_QWORD *)&v112 = v25 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v23;
    }
    else
    {
      BYTE7(v112) = v22;
      if (!v22)
      {
LABEL_49:
        v23[v22] = 0;
        BYTE8(v112) = 1;
        v26 = v113;
        if (v18 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        v27 = v15;
        if (v18 >= 0x17)
        {
          v28 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v18 | 7) != 0x17)
            v28 = v18 | 7;
          v29 = v28 + 1;
          v26 = operator new(v28 + 1);
          v113[1] = (void *)v18;
          v114 = v29 | 0x8000000000000000;
          v113[0] = v26;
        }
        else
        {
          HIBYTE(v114) = v18;
          if (!v18)
          {
LABEL_57:
            *((_BYTE *)v26 + v18) = 0;
            LOBYTE(v115) = 1;
            v30 = *(NSObject **)object;
            if (SHIBYTE(v114) < 0)
              operator delete(v113[0]);
            if (BYTE8(v112) && SBYTE7(v112) < 0)
              operator delete(*(void **)&object[8]);
            if (*(_QWORD *)object)
              os_release(*(void **)object);
            if (!v14 || !*(_QWORD *)(v14 + 24))
            {
              os_log_type_enabled(v30, OS_LOG_TYPE_ERROR);
              if (!v91)
              {
                *(_DWORD *)object = 136446210;
                *(_QWORD *)&object[4] = v15;
                v37 = (char *)_os_log_send_and_compose_impl();
                if (!v37)
                  goto LABEL_146;
                goto LABEL_145;
              }
              *(_DWORD *)object = 136446210;
              *(_QWORD *)&object[4] = v15;
              v37 = (char *)_os_log_send_and_compose_impl();
              sub_20E8C003C((uint64_t)&__dst, v37, object, 12);
              goto LABEL_143;
            }
            v31 = _os_log_pack_size();
            v32 = (std::__shared_weak_count_vtbl *)operator new(v31, (std::align_val_t)8uLL);
            v33 = (std::__shared_weak_count *)operator new();
            v33->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v33->__shared_owners_ = 0;
            v33->__shared_weak_owners_ = 0;
            v33[1].__vftable = v32;
            *(_QWORD *)&v107 = v32;
            *((_QWORD *)&v107 + 1) = v32;
            v109 = 0;
            v110 = 0;
            v108 = v33;
            v34 = strlen((const char *)v15);
            if (v34 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            v35 = v34;
            if (v34 >= 0x17)
            {
              v38 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v34 | 7) != 0x17)
                v38 = v34 | 7;
              v39 = v38 + 1;
              v36 = operator new(v38 + 1);
              *(_QWORD *)&v105 = v35;
              *((_QWORD *)&v105 + 1) = v39 | 0x8000000000000000;
              v104 = v36;
              v27 = v15;
            }
            else
            {
              HIBYTE(v105) = v34;
              v36 = &v104;
              if (!v34)
                goto LABEL_78;
            }
            memcpy(v36, v27, v35);
LABEL_78:
            *((_BYTE *)v36 + v35) = 0;
            v40 = v104;
            v106[0] = v105;
            *(_QWORD *)((char *)v106 + 7) = *(_QWORD *)((char *)&v105 + 7);
            v41 = HIBYTE(v105);
            v42 = operator new(0x38uLL);
            v42[1] = 0;
            v42[2] = 0;
            v42[3] = off_24C9ABC20;
            *v42 = &off_24C9ABBD0;
            v43 = v106[0];
            v42[4] = v40;
            v42[5] = v43;
            *(_QWORD *)((char *)v42 + 47) = *(_QWORD *)((char *)v106 + 7);
            *((_BYTE *)v42 + 55) = v41;
            v106[0] = 0;
            *(_QWORD *)((char *)v106 + 7) = 0;
            v44 = v110;
            v109 = (char *)(v42 + 3);
            v110 = (std::__shared_weak_count *)v42;
            if (v44)
            {
              p_shared_owners = (unint64_t *)&v44->__shared_owners_;
              do
                v46 = __ldaxr(p_shared_owners);
              while (__stlxr(v46 - 1, p_shared_owners));
              if (!v46)
              {
                ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
                std::__shared_weak_count::__release_weak(v44);
              }
            }
            *(_OWORD *)object = v107;
            v47 = v109;
            *(_QWORD *)&object[16] = v108;
            if (v108)
            {
              v48 = (unint64_t *)&v108->__shared_owners_;
              do
                v49 = __ldxr(v48);
              while (__stxr(v49 + 1, v48));
            }
            v50 = v110;
            *(_QWORD *)&v112 = v47;
            *((_QWORD *)&v112 + 1) = v110;
            if (v110)
            {
              v51 = (unint64_t *)&v110->__shared_owners_;
              do
                v52 = __ldxr(v51);
              while (__stxr(v52 + 1, v51));
              v113[0] = v47;
              do
                v53 = __ldaxr(v51);
              while (__stlxr(v53 - 1, v51));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
                std::__shared_weak_count::__release_weak(v50);
              }
            }
            else
            {
              v113[0] = v47;
            }
            v54 = v108;
            if (v108)
            {
              v55 = (unint64_t *)&v108->__shared_owners_;
              do
                v56 = __ldaxr(v55);
              while (__stlxr(v56 - 1, v55));
              if (!v56)
              {
                ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                std::__shared_weak_count::__release_weak(v54);
              }
            }
            v57 = *(_QWORD *)object;
            if (*((char *)v113[0] + 31) >= 0)
              v58 = (char *)v113[0] + 8;
            else
              v58 = (char *)*((_QWORD *)v113[0] + 1);
            v59 = _os_log_pack_fill();
            *(_DWORD *)v59 = 136446210;
            *(_QWORD *)(v59 + 4) = v58;
            v60 = operator new();
            v61 = *(unsigned __int8 *)(v16 + 39);
            v62 = *(const char **)(v16 + 16);
            v63 = *(_QWORD *)(v16 + 24);
            v64 = v112;
            *(_OWORD *)(v60 + 8) = *(_OWORD *)&object[8];
            if ((v61 & 0x80u) != 0)
              v61 = v63;
            else
              v62 = v90;
            *(_QWORD *)v60 = v57;
            *(_QWORD *)&object[8] = 0;
            *(_QWORD *)&object[16] = 0;
            *(_OWORD *)(v60 + 24) = v64;
            v112 = 0uLL;
            *(_QWORD *)(v60 + 40) = v62;
            *(_QWORD *)(v60 + 48) = v61;
            *(_BYTE *)(v60 + 56) = 16;
            v104 = 0;
            *(_QWORD *)&v107 = v60;
            (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v14 + 24) + 40))(*(_QWORD *)(v14 + 24), &v107);
            v65 = v107;
            *(_QWORD *)&v107 = 0;
            if (v65)
            {
              v66 = *(std::__shared_weak_count **)(v65 + 32);
              if (v66)
              {
                v67 = (unint64_t *)&v66->__shared_owners_;
                do
                  v68 = __ldaxr(v67);
                while (__stlxr(v68 - 1, v67));
                if (!v68)
                {
                  ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                  std::__shared_weak_count::__release_weak(v66);
                }
              }
              v69 = *(std::__shared_weak_count **)(v65 + 16);
              if (v69)
              {
                v70 = (unint64_t *)&v69->__shared_owners_;
                do
                  v71 = __ldaxr(v70);
                while (__stlxr(v71 - 1, v70));
                if (!v71)
                {
                  ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                  std::__shared_weak_count::__release_weak(v69);
                }
              }
              MEMORY[0x212BC6398](v65, 0x10F0C40B62ED6C6);
              v72 = v104;
              v104 = 0;
              if (v72)
              {
                v73 = (std::__shared_weak_count *)v72[4];
                if (v73)
                {
                  v74 = (unint64_t *)&v73->__shared_owners_;
                  do
                    v75 = __ldaxr(v74);
                  while (__stlxr(v75 - 1, v74));
                  if (!v75)
                  {
                    ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                    std::__shared_weak_count::__release_weak(v73);
                  }
                }
                v76 = (std::__shared_weak_count *)v72[2];
                if (v76)
                {
                  v77 = (unint64_t *)&v76->__shared_owners_;
                  do
                    v78 = __ldaxr(v77);
                  while (__stlxr(v78 - 1, v77));
                  if (!v78)
                  {
                    ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                    std::__shared_weak_count::__release_weak(v76);
                  }
                }
                MEMORY[0x212BC6398](v72, 0x10F0C40B62ED6C6);
              }
            }
            if (v91)
            {
              LODWORD(v107) = 136446210;
              *(_QWORD *)((char *)&v107 + 4) = v27;
              v89 = 12;
              v88 = &v107;
              v37 = (char *)_os_log_send_and_compose_impl();
              v79 = (std::__shared_weak_count *)*((_QWORD *)&v112 + 1);
              if (!*((_QWORD *)&v112 + 1))
              {
LABEL_136:
                v82 = *(std::__shared_weak_count **)&object[16];
                if (*(_QWORD *)&object[16])
                {
                  v83 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                  do
                    v84 = __ldaxr(v83);
                  while (__stlxr(v84 - 1, v83));
                  if (!v84)
                  {
                    ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                    std::__shared_weak_count::__release_weak(v82);
                  }
                }
                if (!v91)
                {
LABEL_144:
                  if (!v37)
                  {
LABEL_146:
                    sub_20E863570((uint64_t)&__dst);
                    v85 = v99;
                    if (v99)
                    {
                      v86 = (unint64_t *)&v99->__shared_owners_;
                      do
                        v87 = __ldaxr(v86);
                      while (__stlxr(v87 - 1, v86));
                      if (!v87)
                      {
                        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                        std::__shared_weak_count::__release_weak(v85);
                      }
                    }
LABEL_151:
                    if (v103)
                    {
                      if (SHIBYTE(v102) < 0)
                        operator delete(v101[0]);
                    }
                    return;
                  }
LABEL_145:
                  free(v37);
                  goto LABEL_146;
                }
                sub_20E8C003C((uint64_t)&__dst, v37, v88, v89);
LABEL_143:
                sub_20E863570((uint64_t)&__dst);
                goto LABEL_144;
              }
            }
            else
            {
              v37 = 0;
              v79 = (std::__shared_weak_count *)*((_QWORD *)&v112 + 1);
              if (!*((_QWORD *)&v112 + 1))
                goto LABEL_136;
            }
            v80 = (unint64_t *)&v79->__shared_owners_;
            do
              v81 = __ldaxr(v80);
            while (__stlxr(v81 - 1, v80));
            if (!v81)
            {
              ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
              std::__shared_weak_count::__release_weak(v79);
            }
            goto LABEL_136;
          }
        }
        memmove(v26, v17, v18);
        goto LABEL_57;
      }
    }
    memmove(v23, v21, v22);
    goto LABEL_49;
  }
}

void sub_20EB8BE84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,void *a45,int a46,__int16 a47,char a48,char a49,char a50,int a51,__int16 a52,char a53,char a54)
{
  if (a50 && a49 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a15);
  if (a31)
  {
    if (a30 < 0)
    {
      operator delete(a25);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20EB8C008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  sub_20E863784((uint64_t)&a41);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EB8C01C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  sub_20E86A980(a1, (uint64_t)"{number of samples: ", 20);
  v2 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v2, (uint64_t)", min value: ", 13);
  v3 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v3, (uint64_t)", max value: ", 13);
  v4 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v4, (uint64_t)", mean: ", 8);
  v5 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v5, (uint64_t)", stdev: ", 9);
  v6 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v6, (uint64_t)"}", 1);
  return a1;
}

void sub_20EB8C0C8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C9C51B8[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_20E877C80((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_20EB8C27C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

_DWORD *sub_20EB8C2C0(_DWORD ***a1)
{
  return sub_20E8A2D64(**a1, (char *)(*a1)[1]);
}

void sub_20EB8C2CC(uint64_t a1, uint64_t a2)
{
  sub_20EB8C2DC((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

void sub_20EB8C2DC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C9C51B8[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_20E877C80((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_20EB8C490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_20EB8C4D4(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20EB8C5CC((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_20EB8C5C4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_20EB8C5CC(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_20EB8C7C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877E3C((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_20EB8C7DC(_DWORD ***a1)
{
  return sub_20E89FAA8(**a1, (char *)(*a1)[1]);
}

void sub_20EB8C7E8(uint64_t a1, uint64_t a2)
{
  sub_20EB8C7F8((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

void sub_20EB8C7F8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C9C51B8[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_20E877C80((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_20EB8C9AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_20EB8C9F0(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20EB8CAE8((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_20EB8CAE0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_20EB8CAE8(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_20EB8CCE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877E3C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EB8CCF8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C9C51B8[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_20E877C80((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_20EB8CEAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20EB8CEF0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C9C51B8[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_20E877C80((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_20EB8D0A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EB8D0E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  BOOL v9;

  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
  v6 = *(_OWORD *)(a2 + 32);
  v7 = *(_OWORD *)(a2 + 48);
  v8 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 64) = v8;
  *(_OWORD *)(a1 + 32) = v6;
  sub_20E8A1408(a1 + 88, a3);
  *(_BYTE *)(a1 + 2520) = 0;
  *(_BYTE *)(a1 + 2528) = 0;
  *(_BYTE *)(a1 + 2536) = 0;
  *(_BYTE *)(a1 + 2544) = 0;
  *(_OWORD *)(a1 + 2552) = 0u;
  *(_OWORD *)(a1 + 2568) = 0u;
  *(_DWORD *)(a1 + 2584) = 1065353216;
  *(_BYTE *)(a1 + 2592) = 0;
  *(_BYTE *)(a1 + 2600) = 0;
  *(_QWORD *)(a1 + 2616) = 0;
  *(_QWORD *)(a1 + 2608) = 0;
  *(_OWORD *)(a1 + 2624) = xmmword_210315BB0;
  *(_QWORD *)(a1 + 2640) = 0;
  *(_QWORD *)(a1 + 2656) = 0;
  *(_QWORD *)(a1 + 2648) = 0;
  *(_QWORD *)(a1 + 2664) = 0x7FEFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 2672) = 0x10000000000000;
  *(_BYTE *)(a1 + 2712) = 0;
  *(_QWORD *)(a1 + 2728) = 0;
  *(_QWORD *)(a1 + 2720) = 0;
  *(_QWORD *)(a1 + 2688) = 0;
  *(_QWORD *)(a1 + 2680) = 0;
  *(_BYTE *)(a1 + 2704) = 0;
  *(_QWORD *)(a1 + 2696) = 0;
  *(_OWORD *)(a1 + 2736) = xmmword_210315BB0;
  *(_QWORD *)(a1 + 2768) = 0;
  *(_QWORD *)(a1 + 2752) = 0;
  *(_QWORD *)(a1 + 2760) = 0;
  *(_QWORD *)(a1 + 2776) = 0x7FEFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 2784) = 0x10000000000000;
  *(_BYTE *)(a1 + 2824) = 0;
  *(_QWORD *)(a1 + 2832) = 0;
  *(_QWORD *)(a1 + 2840) = 0;
  *(_QWORD *)(a1 + 2808) = 0;
  *(_QWORD *)(a1 + 2792) = 0;
  *(_QWORD *)(a1 + 2800) = 0;
  *(_BYTE *)(a1 + 2816) = 0;
  *(_OWORD *)(a1 + 2848) = xmmword_210315BB0;
  *(_QWORD *)(a1 + 2872) = 0;
  *(_QWORD *)(a1 + 2864) = 0;
  *(_QWORD *)(a1 + 2880) = 0;
  *(_QWORD *)(a1 + 2888) = 0x7FEFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 2920) = 0;
  *(_QWORD *)(a1 + 2904) = 0;
  *(_QWORD *)(a1 + 2912) = 0;
  v9 = *(double *)a2 < 0.0;
  *(_QWORD *)(a1 + 2896) = 0x10000000000000;
  if (v9
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/DataVerification/src/SLAMDataVerification.cpp", 32, (uint64_t)"config.min_imu_interval_sec >= 0.0f", 35, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *(double *)(a2 + 8) <= 0.0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/DataVerification/src/SLAMDataVerification.cpp", 33, (uint64_t)"config.max_imu_interval_sec > 0.0f", 34, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *(double *)(a2 + 32) < 0.0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/DataVerification/src/SLAMDataVerification.cpp",
         34,
         (uint64_t)"config.min_frame_interval_sec >= 0",
         34,
         (uint64_t)"",
         0,
         (void (*)(void **))sub_21023DDB0)
    || *(double *)(a2 + 40) <= 0.0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/DataVerification/src/SLAMDataVerification.cpp", 35, (uint64_t)"config.max_frame_interval_sec > 0", 33, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *(double *)(a2 + 64) <= 0.0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/DataVerification/src/SLAMDataVerification.cpp", 36, (uint64_t)"config.significant_data_drop_interval_sec > 0", 45, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *(_BYTE *)(a2 + 80)&& (*(double *)(a2 + 16) < 0.0&& sub_21023D5B4(
          "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/DataVerification/src/SLAMDataVerification.cpp",
          39,
          (uint64_t)"config.min_imu_latency_sec >= 0.0f",
          34,
          (uint64_t)"",
          0,
          (void (*)(void **))sub_21023DDB0)
     || *(double *)(a2 + 24) <= 0.0
     && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/DataVerification/src/SLAMDataVerification.cpp", 40, (uint64_t)"config.max_imu_latency_sec > 0.0f", 33, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *(double *)(a2 + 48) < 0.0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/DataVerification/src/SLAMDataVerification.cpp", 41, (uint64_t)"config.min_frame_latency_sec >= 0", 33, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *(double *)(a2 + 56) <= 0.0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/DataVerification/src/SLAMDataVerification.cpp",
          42,
          (uint64_t)"config.max_frame_latency_sec > 0",
          32,
          (uint64_t)"",
          0,
          (void (*)(void **))sub_21023DDB0)))
  {
    abort();
  }
  sub_20EB8D488((_QWORD *)a1);
  return a1;
}

void sub_20EB8D46C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_20E8C25A8(v2);
  sub_20E86A810(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EB8D488(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;

  v1 = result;
  if (result[322])
  {
    result = (_QWORD *)result[321];
    if (result)
    {
      do
      {
        v2 = (_QWORD *)*result;
        operator delete(result);
        result = v2;
      }
      while (v2);
    }
    v1[321] = 0;
    v3 = v1[320];
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(v1[319] + 8 * i) = 0;
    }
    v1[322] = 0;
  }
  if (*((_BYTE *)v1 + 2528))
    *((_BYTE *)v1 + 2528) = 0;
  if (*((_BYTE *)v1 + 2544))
    *((_BYTE *)v1 + 2544) = 0;
  if (*((_BYTE *)v1 + 2600))
    *((_BYTE *)v1 + 2600) = 0;
  v1[327] = 0;
  v1[326] = 0;
  *((_OWORD *)v1 + 164) = xmmword_210315BB0;
  v1[330] = 0;
  v1[332] = 0;
  v1[331] = 0;
  v1[333] = 0x7FEFFFFFFFFFFFFFLL;
  v1[334] = 0x10000000000000;
  v1[335] = 0;
  v1[337] = 0;
  v1[336] = 0;
  if (*((_BYTE *)v1 + 2712))
    *((_BYTE *)v1 + 2712) = 0;
  v1[341] = 0;
  v1[340] = 0;
  *((_OWORD *)v1 + 171) = xmmword_210315BB0;
  v1[344] = 0;
  v1[346] = 0;
  v1[345] = 0;
  v1[347] = 0x7FEFFFFFFFFFFFFFLL;
  v1[348] = 0x10000000000000;
  v1[349] = 0;
  v1[351] = 0;
  v1[350] = 0;
  if (*((_BYTE *)v1 + 2824))
    *((_BYTE *)v1 + 2824) = 0;
  v1[355] = 0;
  v1[354] = 0;
  *((_OWORD *)v1 + 178) = xmmword_210315BB0;
  v1[358] = 0;
  v1[360] = 0;
  v1[359] = 0;
  v1[361] = 0x7FEFFFFFFFFFFFFFLL;
  v1[362] = 0x10000000000000;
  v1[363] = 0;
  v1[365] = 0;
  v1[364] = 0;
  return result;
}

int *sub_20EB8D5C4@<X0>(uint64_t a1@<X0>, int *a2@<X8>, double a3@<D0>)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  int v12;
  double v13;
  double v14;
  int v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  _BYTE v24[120];
  uint64_t v25;
  double v26;

  if (*(_BYTE *)(a1 + 2528))
    v6 = *(double *)(a1 + 2520);
  else
    v6 = -1.0;
  v8 = *(double *)a1;
  v7 = *(double *)(a1 + 8);
  v9 = *(double *)(a1 + 16);
  v10 = *(double *)(a1 + 24);
  v11 = *(double *)(a1 + 64);
  v12 = *(unsigned __int8 *)(a1 + 80);
  v13 = sub_210215600(3);
  v14 = v13;
  v15 = *(unsigned __int8 *)(a1 + 2528);
  if (a3 >= 0.0)
  {
    if (*(_BYTE *)(a1 + 2528))
    {
      v18 = *(double *)(a1 + 2520);
      v16 = 5;
      if (v18 >= a3)
        goto LABEL_28;
      v19 = a3 - v18;
      if (v19 < 0.0)
        goto LABEL_28;
      v20 = v8 * 0.1;
      if (v19 - v11 > v8 * 0.1)
      {
        *(double *)(a1 + 2520) = a3;
        *(_BYTE *)(a1 + 2528) = 1;
        v16 = 7;
LABEL_28:
        v25 = v16;
        v26 = v14;
        goto LABEL_29;
      }
    }
    else
    {
      v20 = v8 * 0.1;
      v19 = 0.0;
    }
    *(double *)(a1 + 2520) = a3;
    *(_BYTE *)(a1 + 2528) = 1;
    if (v12)
    {
      v21 = v14 - a3;
      v16 = v14 - a3 > v10 ? 4 : 3;
      if (v21 < v9 || v21 > v10)
        goto LABEL_28;
    }
    if (v19 > 0.0)
    {
      if (v8 - v19 > v20)
      {
        v16 = 2;
        goto LABEL_28;
      }
      if (v19 - v7 > v20)
      {
        v16 = 1;
        goto LABEL_28;
      }
    }
    v16 = 0;
    goto LABEL_28;
  }
  LODWORD(v16) = 5;
  v25 = 5;
  v26 = v13;
  if (v15)
  {
LABEL_29:
    v17 = *(double *)(a1 + 2520);
    goto LABEL_30;
  }
  v17 = -1.0;
LABEL_30:
  sub_20EB8D778(a1 + 2816, (int *)&v25, (uint64_t)v24, a3, v17, v14);
  return sub_20EB89188(a2, 1, v16, (uint64_t)v24, a3, v6, v14);
}

double sub_20EB8D778@<D0>(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>)
{
  int v6;
  double v7;
  unint64_t v8;
  unint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  unint64_t v18;
  unint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double result;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  ++*(_QWORD *)(a1 + 16);
  if (*(_BYTE *)(a1 + 8))
  {
    v6 = *a2;
    if ((*a2 - 1) >= 2)
      goto LABEL_3;
  }
  else
  {
    *(double *)a1 = a4;
    *(_BYTE *)(a1 + 8) = 1;
    v6 = *a2;
    if ((*a2 - 1) >= 2)
    {
LABEL_3:
      if ((v6 - 3) >= 2)
      {
        if (v6 == 9)
          ++*(_QWORD *)(a1 + 104);
      }
      else
      {
        v7 = a6 - a4;
        v8 = *(_QWORD *)(a1 + 24);
        v9 = v8 + 1;
        *(_QWORD *)(a1 + 24) = v8 + 1;
        v10 = *(double *)(a1 + 32);
        v11 = *(double *)(a1 + 40);
        if (v10 > v7)
          v10 = v7;
        if (v11 < v7)
          v11 = v7;
        *(double *)(a1 + 32) = v10;
        *(double *)(a1 + 40) = v11;
        v12 = *(double *)(a1 + 48);
        v13 = v7 - v12;
        v14 = (double)v9;
        v15 = v7;
        if (v9 >= 2)
          v15 = v12 + v13 / v14;
        v16 = sqrt((v13 * (v7 - v15) + *(double *)(a1 + 56) * *(double *)(a1 + 56) * (double)v8) / v14);
        *(double *)(a1 + 48) = v15;
        *(double *)(a1 + 56) = v16;
      }
      goto LABEL_21;
    }
  }
  v17 = a4 - a5;
  v18 = *(_QWORD *)(a1 + 64);
  v19 = v18 + 1;
  *(_QWORD *)(a1 + 64) = v18 + 1;
  v20 = *(double *)(a1 + 72);
  v21 = *(double *)(a1 + 80);
  if (v20 > v17)
    v20 = v17;
  if (v21 < v17)
    v21 = v17;
  *(double *)(a1 + 72) = v20;
  *(double *)(a1 + 80) = v21;
  v22 = *(double *)(a1 + 88);
  v23 = v17 - v22;
  v24 = (double)v19;
  v25 = v17;
  if (v19 >= 2)
    v25 = v22 + v23 / v24;
  v26 = sqrt((v23 * (v17 - v25) + *(double *)(a1 + 96) * *(double *)(a1 + 96) * (double)v18) / v24);
  *(double *)(a1 + 88) = v25;
  *(double *)(a1 + 96) = v26;
LABEL_21:
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 112) = 0;
  result = a4 - *(double *)a1;
  if (result >= 100000.0)
  {
    if (*(_QWORD *)(a1 + 24) || *(_QWORD *)(a1 + 64) || *(_QWORD *)(a1 + 104))
    {
      v28 = *(_OWORD *)(a1 + 80);
      *(_OWORD *)(a3 + 64) = *(_OWORD *)(a1 + 64);
      *(_OWORD *)(a3 + 80) = v28;
      *(_OWORD *)(a3 + 96) = *(_OWORD *)(a1 + 96);
      v29 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a1;
      *(_OWORD *)(a3 + 16) = v29;
      v30 = *(_OWORD *)(a1 + 48);
      *(_OWORD *)(a3 + 32) = *(_OWORD *)(a1 + 32);
      *(_OWORD *)(a3 + 48) = v30;
      *(_BYTE *)(a3 + 112) = 1;
    }
    *(_BYTE *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    result = 1.79769313e308;
    *(_OWORD *)(a1 + 32) = xmmword_210315BB0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_OWORD *)(a1 + 72) = xmmword_210315BB0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 88) = 0;
  }
  return result;
}

int *sub_20EB8D954@<X0>(uint64_t a1@<X0>, int *a2@<X8>, double a3@<D0>)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  int v12;
  double v13;
  double v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  _BYTE v21[120];
  _QWORD v22[2];

  if (*(_BYTE *)(a1 + 2544))
    v6 = *(double *)(a1 + 2536);
  else
    v6 = -1.0;
  v8 = *(double *)a1;
  v7 = *(double *)(a1 + 8);
  v9 = *(double *)(a1 + 16);
  v10 = *(double *)(a1 + 24);
  v11 = *(double *)(a1 + 64);
  v12 = *(unsigned __int8 *)(a1 + 80);
  v13 = sub_210215600(3);
  if (a3 < 0.0)
  {
    v14 = *(double *)(a1 + 2536);
    v15 = 5;
    goto LABEL_28;
  }
  if (!*(_BYTE *)(a1 + 2544))
  {
    v17 = v8 * 0.1;
    v16 = 0.0;
    goto LABEL_12;
  }
  v14 = *(double *)(a1 + 2536);
  v15 = 5;
  if (v14 < a3)
  {
    v16 = a3 - v14;
    if (a3 - v14 >= 0.0)
    {
      v17 = v8 * 0.1;
      if (v16 - v11 > v8 * 0.1)
      {
        *(double *)(a1 + 2536) = a3;
        *(_BYTE *)(a1 + 2544) = 1;
        v15 = 7;
LABEL_27:
        v14 = a3;
        goto LABEL_28;
      }
LABEL_12:
      *(double *)(a1 + 2536) = a3;
      *(_BYTE *)(a1 + 2544) = 1;
      if (v12)
      {
        v18 = v13 - a3;
        v15 = v13 - a3 > v10 ? 4 : 3;
        if (v18 < v9 || v18 > v10)
          goto LABEL_27;
      }
      if (v16 > 0.0)
      {
        if (v8 - v16 > v17)
        {
          v15 = 2;
          goto LABEL_27;
        }
        if (v16 - v7 > v17)
        {
          v15 = 1;
          goto LABEL_27;
        }
      }
      v15 = 0;
      goto LABEL_27;
    }
  }
LABEL_28:
  v22[0] = v15;
  *(double *)&v22[1] = v13;
  sub_20EB8D778(a1 + 2704, (int *)v22, (uint64_t)v21, a3, v14, v13);
  return sub_20EB89188(a2, 0, v15, (uint64_t)v21, a3, v6, v13);
}

int *sub_20EB8DAFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int *a3@<X8>)
{
  _QWORD *v6;
  float *v7;
  uint64_t *v8;
  uint64_t *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  int v15;
  double v16;
  double v17;
  double v18;
  double v19;
  uint64_t v21;
  double v22;
  double v23;
  double v26;
  double v27;
  _QWORD *v28[15];
  _QWORD v29[2];

  v6 = (_QWORD *)(a2 + 392);
  v7 = (float *)(a1 + 2552);
  v8 = sub_20EB8DE00((_QWORD *)(a1 + 2552), (int *)(a2 + 392));
  v9 = v8;
  if (v8)
  {
    v10 = *((double *)v8 + 3);
    v27 = v10;
  }
  else
  {
    v27 = -1.0;
    v10 = 0.0;
  }
  v11 = *(double *)(a2 + 112) + *(double *)(a2 + 120);
  v12 = *(double *)(a1 + 32);
  v26 = *(double *)(a1 + 40);
  v13 = *(double *)(a1 + 48);
  v14 = *(double *)(a1 + 56);
  v15 = *(unsigned __int8 *)(a1 + 80);
  v16 = *(double *)(a1 + 64);
  v17 = *(double *)(a1 + 72);
  v18 = sub_210215600(3);
  if (v11 >= 0.0)
  {
    if (!v9)
    {
      v22 = v12 * 0.1;
      v19 = 0.0;
      goto LABEL_15;
    }
    v19 = v11 - v10;
    if (v10 < v11 && v19 >= v17)
    {
      v22 = v12 * 0.1;
      if (v19 - v16 > v12 * 0.1)
      {
        v21 = 7;
LABEL_30:
        v10 = v11;
        goto LABEL_31;
      }
LABEL_15:
      if (v15)
      {
        v23 = v18 - v11;
        v21 = v18 - v11 > v14 ? 4 : 3;
        if (v23 < v13 || v23 > v14)
          goto LABEL_30;
      }
      if (v19 > 0.0)
      {
        if (v12 - v19 > v22)
        {
          v21 = 2;
          goto LABEL_30;
        }
        if (v19 - v26 > v22)
        {
          v21 = 1;
          goto LABEL_30;
        }
      }
      v21 = 0;
      goto LABEL_30;
    }
  }
  v21 = 5;
LABEL_31:
  v29[0] = v21;
  *(double *)&v29[1] = v18;
  v28[0] = v6;
  *((double *)sub_20EB8DFA0(v7, (int *)v6, (uint64_t)&unk_2102DB95C, v28) + 3) = v10;
  sub_20EB8D778(a1 + 2592, (int *)v29, (uint64_t)v28, v11, v10, v18);
  return sub_20EB89188(a3, 2, v21, (uint64_t)v28, v11, v27, v18);
}

int *sub_20EB8DCE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int *a3@<X8>)
{
  double v6;
  double v7;
  _DWORD *v8;
  double v9;
  uint64_t v10;
  double v11;
  BOOL v12;
  BOOL v13;
  double v14;
  uint64_t v15;
  _BYTE v17[120];
  _QWORD v18[2];

  v6 = *(double *)(a2 + 112);
  v7 = *(double *)(a2 + 120);
  v8 = sub_20EA93A0C(a1 + 88, *(_DWORD *)(a2 + 392), *(_DWORD *)(a2 + 396));
  v9 = *(double *)(a2 + 312);
  v10 = *(unsigned __int8 *)(a2 + 320);
  v11 = sub_210215600(3);
  if (*(_BYTE *)(a2 + 272))
    v12 = *((_BYTE *)v8 + 432) == 0;
  else
    v12 = 1;
  v13 = v12 || v10 == 0;
  if (v13
    || (v14 = v9 * *((double *)v8 + 51) + *((double *)v8 + 52),
        vabdd_f64(*((double *)v8 + 53) * v14, *(double *)(a2 + 128)) <= 0.000001)
    && vabdd_f64(v14, *(double *)(a2 + 160)) <= 0.000001)
  {
    v15 = 0;
  }
  else
  {
    v15 = 9;
  }
  v18[0] = v15;
  *(double *)&v18[1] = v11;
  sub_20EB8D778(a1 + 2592, (int *)v18, (uint64_t)v17, v6 + v7, 0.0, v11);
  return sub_20EB89188(a3, 2, v15, (uint64_t)v17, *(double *)(a2 + 112) + *(double *)(a2 + 120), -1.0, v11);
}

uint64_t *sub_20EB8DE00(_QWORD *a1, int *a2)
{
  unsigned int v4;
  int8x8_t v5;
  int v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  uint64_t *result;
  uint64_t **v11;
  uint64_t v12;
  unint64_t v14;
  uint64_t v16;

  if (*a2 >= 0x10000
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_35;
  }
  v4 = a2[1];
  if (v4 < 0x10000)
    goto LABEL_6;
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
  {
LABEL_35:
    abort();
  }
  v4 = a2[1];
LABEL_6:
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = *a2;
  v7 = (unsigned __int16)v4 | ((unsigned __int16)*a2 << 16);
  v8 = (uint8x8_t)vcnt_s8(v5);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    v9 = (unsigned __int16)v4 | ((unsigned __int16)v6 << 16);
    if (*(_QWORD *)&v5 <= v7)
      v9 = v7 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (v5.i32[0] - 1) & v7;
  }
  v11 = *(uint64_t ***)(*a1 + 8 * v9);
  if (!v11)
    return 0;
  result = *v11;
  if (*v11)
  {
    if (v8.u32[0] < 2uLL)
    {
      v12 = *(_QWORD *)&v5 - 1;
      while (1)
      {
        v16 = result[1];
        if (v16 == v7)
        {
          if (*((_DWORD *)result + 4) == v6 && *((_DWORD *)result + 5) == v4)
            return result;
        }
        else if ((v16 & v12) != v9)
        {
          return 0;
        }
        result = (uint64_t *)*result;
        if (!result)
          return result;
      }
    }
    do
    {
      v14 = result[1];
      if (v14 == v7)
      {
        if (*((_DWORD *)result + 4) == v6 && *((_DWORD *)result + 5) == v4)
          return result;
      }
      else
      {
        if (v14 >= *(_QWORD *)&v5)
          v14 %= *(_QWORD *)&v5;
        if (v14 != v9)
          return 0;
      }
      result = (uint64_t *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t *sub_20EB8DFA0(float *a1, int *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unsigned int v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v17;
  _QWORD *v20;
  float v21;
  float v22;
  _QWORD *v23;
  _QWORD *v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  size_t prime;
  void *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t *v33;
  size_t v34;
  size_t v35;
  size_t v36;
  _QWORD *i;
  size_t v38;
  uint64_t v39;
  unint64_t v40;
  uint8x8_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  size_t v45;
  _QWORD *v46;
  unint64_t v47;

  if (*a2 >= 0x10000
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_106;
  }
  v8 = a2[1];
  if (v8 >= 0x10000)
  {
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
    {
      v8 = a2[1];
      goto LABEL_6;
    }
LABEL_106:
    abort();
  }
LABEL_6:
  v9 = *a2;
  v10 = (unsigned __int16)v8 | ((unsigned __int16)*a2 << 16);
  v11 = *((_QWORD *)a1 + 1);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = (unsigned __int16)v8 | ((unsigned __int16)v9 << 16);
      if (v11 <= v10)
        v4 = v10 % v11;
    }
    else
    {
      v4 = ((_DWORD)v11 - 1) & v10;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v17 = v14[1];
            if (v17 == v10)
            {
              if (*((_DWORD *)v14 + 4) == v9 && *((_DWORD *)v14 + 5) == v8)
                return v14;
            }
            else if ((v17 & (v11 - 1)) != v4)
            {
              goto LABEL_36;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_36;
          }
        }
        do
        {
          v15 = v14[1];
          if (v15 == v10)
          {
            if (*((_DWORD *)v14 + 4) == v9 && *((_DWORD *)v14 + 5) == v8)
              return v14;
          }
          else
          {
            if (v15 >= v11)
              v15 %= v11;
            if (v15 != v4)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_36:
  v20 = operator new(0x20uLL);
  *v20 = 0;
  v20[1] = v10;
  v20[2] = **a4;
  v20[3] = 0;
  v21 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v22 = a1[8];
  if (v11 && (float)(v22 * (float)v11) >= v21)
  {
    v10 = v4;
    v23 = *(_QWORD **)a1;
    v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (!v24)
      goto LABEL_98;
LABEL_86:
    *v20 = *v24;
LABEL_104:
    *v24 = v20;
    goto LABEL_105;
  }
  v25 = 1;
  if (v11 >= 3)
    v25 = (v11 & (v11 - 1)) != 0;
  v26 = v25 | (2 * v11);
  v27 = vcvtps_u32_f32(v21 / v22);
  if (v26 <= v27)
    prime = v27;
  else
    prime = v26;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v11 = *((_QWORD *)a1 + 1);
  }
  if (prime > v11)
  {
LABEL_50:
    if (prime >> 61)
      sub_20E877A38();
    v29 = operator new(8 * prime);
    v30 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v29;
    if (v30)
      operator delete(v30);
    v31 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v31++) = 0;
    while (prime != v31);
    v33 = (uint64_t *)(a1 + 4);
    v32 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v32)
      goto LABEL_82;
    v34 = v32[1];
    v35 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v36 = v34 & v35;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v36) = v33;
      for (i = (_QWORD *)*v32; *v32; i = (_QWORD *)*v32)
      {
        v38 = i[1] & v35;
        if (v38 == v36)
        {
          v32 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v38))
        {
          *v32 = *i;
          v39 = 8 * v38;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v39);
          **(_QWORD **)(*(_QWORD *)a1 + v39) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v38) = v32;
          v32 = i;
          v36 = v38;
        }
      }
      goto LABEL_82;
    }
    if (v34 >= prime)
      v34 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v34) = v33;
    v43 = (_QWORD *)*v32;
    if (!*v32)
    {
LABEL_82:
      v11 = prime;
      if ((prime & (prime - 1)) != 0)
        goto LABEL_83;
LABEL_97:
      v10 = ((_DWORD)v11 - 1) & v10;
      v23 = *(_QWORD **)a1;
      v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
      if (!v24)
        goto LABEL_98;
      goto LABEL_86;
    }
    while (1)
    {
      v45 = v43[1];
      if (v45 >= prime)
        v45 %= prime;
      if (v45 == v34)
        goto LABEL_76;
      if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v45))
      {
        *v32 = *v43;
        v44 = 8 * v45;
        *v43 = **(_QWORD **)(*(_QWORD *)a1 + v44);
        **(_QWORD **)(*(_QWORD *)a1 + v44) = v43;
        v43 = v32;
LABEL_76:
        v32 = v43;
        v43 = (_QWORD *)*v43;
        if (!v43)
          goto LABEL_82;
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v45) = v32;
        v32 = v43;
        v43 = (_QWORD *)*v43;
        v34 = v45;
        if (!v43)
          goto LABEL_82;
      }
    }
  }
  if (prime < v11)
  {
    v40 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
    if (v11 < 3 || (v41 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v41.i16[0] = vaddlv_u8(v41), v41.u32[0] > 1uLL))
    {
      v40 = std::__next_prime(v40);
    }
    else
    {
      v42 = 1 << -(char)__clz(v40 - 1);
      if (v40 >= 2)
        v40 = v42;
    }
    if (prime <= v40)
      prime = v40;
    if (prime < v11)
    {
      if (!prime)
      {
        v46 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v46)
          operator delete(v46);
        v11 = 0;
        *((_QWORD *)a1 + 1) = 0;
        goto LABEL_97;
      }
      goto LABEL_50;
    }
    v11 = *((_QWORD *)a1 + 1);
  }
  if ((v11 & (v11 - 1)) == 0)
    goto LABEL_97;
LABEL_83:
  if (v11 <= v10)
    v10 %= v11;
  v23 = *(_QWORD **)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
  if (v24)
    goto LABEL_86;
LABEL_98:
  *v20 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v20;
  v23[v10] = a1 + 4;
  if (*v20)
  {
    v47 = *(_QWORD *)(*v20 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v47 >= v11)
        v47 %= v11;
    }
    else
    {
      v47 &= v11 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v47);
    goto LABEL_104;
  }
LABEL_105:
  ++*((_QWORD *)a1 + 3);
  return v20;
}

void sub_20EB8E4E8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EB8E4FC(uint64_t *a1, _DWORD *a2)
{
  char *v4;
  unint64_t v5;
  char v6;
  unint64_t v7;
  void **v8;
  char *v9;
  unint64_t v10;
  void **v11;
  size_t v12;
  size_t v14;
  BOOL v15;
  std::runtime_error *exception;
  std::string v18;
  void **v19;
  unint64_t v20;
  uint64_t v21;

  v19 = 0;
  v20 = 0;
  v21 = 0;
  v4 = (char *)&v19;
  sub_20EA94AF4(a1, (uint64_t)&v19);
  v5 = HIBYTE(v21);
  v6 = HIBYTE(v21);
  v8 = v19;
  v7 = v20;
  if (v21 >= 0)
    v9 = (char *)&v19 + HIBYTE(v21);
  else
    v9 = (char *)v19 + v20;
  if (v21 < 0)
    v4 = (char *)v19;
  if (v4 != v9)
  {
    do
    {
      *v4 = __tolower(*v4);
      ++v4;
    }
    while (v4 != v9);
    v5 = HIBYTE(v21);
    v8 = v19;
    v7 = v20;
    v6 = HIBYTE(v21);
  }
  if (v6 >= 0)
    v10 = v5;
  else
    v10 = v7;
  if (v6 >= 0)
    v11 = (void **)&v19;
  else
    v11 = v8;
  if (v10 >= 4)
    v12 = 4;
  else
    v12 = v10;
  if (!memcmp(v11, "oahu", v12) && v10 == 4)
  {
    *a2 = 0;
    if (v6 < 0)
LABEL_34:
      operator delete(v8);
  }
  else
  {
    if (v10 >= 5)
      v14 = 5;
    else
      v14 = v10;
    v15 = !memcmp(v11, "kauai", v14) && v10 == 5;
    if (!v15 && (memcmp(v11, "mcam", v12) || v10 != 4))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      std::runtime_error::runtime_error(exception, &v18);
      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
    *a2 = 1;
    if (v6 < 0)
      goto LABEL_34;
  }
  return a1;
}

void sub_20EB8E698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0)
    {
LABEL_6:
      if (a20 < 0)
        operator delete(a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v21)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

BOOL sub_20EB8E6EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  std::string *v7;
  uint64_t v8;
  std::string *v9;
  uint64_t v10;
  std::string *v11;
  _BOOL8 v12;
  _QWORD *v13;
  std::string *p_p;
  std::string::size_type size;
  unsigned __int8 v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  const char *v21;
  size_t v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  const char *v25;
  size_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  size_t v34;
  std::__shared_weak_count_vtbl *v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  char *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  int v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  void *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t *v78;
  unsigned __int8 v79;
  char *v81;
  size_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t i;
  uint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  void **v90;
  void **v91;
  void *v92;
  char *v93;
  void **v94;
  char *v95;
  void *v96;
  void **v97;
  char *v98;
  char *v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  char *v103;
  char *v104;
  void *v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  const char *v113;
  uint64_t v114;
  int v115;
  uint64_t **v116[2];
  void *v117;
  void **v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  uint64_t v123;
  uint64_t v124;
  char *category;
  char *v126;
  void *v127;
  char *v128;
  _QWORD v129[2];
  std::__shared_weak_count *v130;
  char *v131;
  char *v132;
  uint64_t v133;
  std::string __p;
  int v135;
  char v136;
  void *v137;
  int v138;
  const char *v139;
  uint64_t v140;
  void *v141;
  char v142;
  char v143;
  void *v144;
  char v145;
  void *v146;
  char v147;
  _BYTE v148[24];
  __int128 v149;
  void *v150[2];
  unint64_t v151;
  char v152;
  uint64_t v153;

  v153 = *MEMORY[0x24BDAC8D0];
  memset(&__p, 0, sizeof(__p));
  v6 = *(unsigned __int8 *)(a1 + 23);
  if ((v6 & 0x80u) == 0)
    v7 = (std::string *)a1;
  else
    v7 = *(std::string **)a1;
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a1 + 8);
  sub_20E8A9678(&__p, v7, (std::string *)((char *)v7 + v6));
  sub_20EB99260((uint64_t)&__p, a3, (char **)&v127);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  memset(&__p, 0, sizeof(__p));
  v8 = *(unsigned __int8 *)(a1 + 23);
  if ((v8 & 0x80u) == 0)
    v9 = (std::string *)a1;
  else
    v9 = *(std::string **)a1;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a1 + 8);
  sub_20E8A9678(&__p, v9, (std::string *)((char *)v9 + v8));
  sub_20EB9B1E4((uint64_t)&__p, a3, (void ***)&category);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  sub_20EB9B9AC(&v127, (unsigned __int8 ***)&category, v116);
  LOBYTE(v123) = 0;
  v124 = 0;
  sub_20EB94988((uint64_t *)&v127, (uint64_t)&v123);
  sub_20EB95CB4(v116, (uint64_t)&v123);
  memset(&__p, 0, sizeof(__p));
  v10 = *(unsigned __int8 *)(a2 + 23);
  if ((v10 & 0x80u) == 0)
    v11 = (std::string *)a2;
  else
    v11 = *(std::string **)a2;
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a2 + 8);
  sub_20E8A9678(&__p, v11, (std::string *)((char *)v11 + v10));
  sub_210224144((const std::__fs::filesystem::path *)&__p, 0x30u, a3, &v120);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    v12 = v121 != 0;
    if (v121)
    {
LABEL_22:
      sub_20EB90210((uint64_t)&v123, 4, 0x20u, 0, 0, &__p);
      v13 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v121 + 16))(v121);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      sub_20E86A980(v13, (uint64_t)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_152;
    }
  }
  else
  {
    v12 = v121 != 0;
    if (v121)
      goto LABEL_22;
  }
  v16 = atomic_load((unsigned __int8 *)&qword_254A5B2D0);
  if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_254A5B2D0))
  {
    sub_21021D3D8(v148);
    sub_20E8610C0(&__p, "cv3d.vio");
    sub_20E8C4068((uint64_t **)v148, (uint64_t)&__p, &qword_254A5B2C8);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __cxa_guard_release(&qword_254A5B2D0);
  }
  v119 = qword_254A5B2C8;
  if (**(int **)(qword_254A5B2C8 + 56) <= 5)
  {
    v17 = *(unsigned __int8 *)(qword_254A5B2C8 + 72);
    v18 = sub_20E8C31DC(qword_254A5B2C8, "OSLogSurrogateAppender", 1, 0);
    v19 = v18;
    if (v17 || v18)
    {
      v115 = v17;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v119;
      __p.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
      __p.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
      v135 = 5;
      v137 = "unknown file";
      v138 = 57;
      v140 = 0;
      v141 = 0;
      v139 = "unknown function";
      v20 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
      v21 = (const char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 16);
      v113 = v21;
      v114 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
      if (*(char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39) < 0)
      {
        v21 = *(const char **)(v20 + 16);
        v22 = *(_QWORD *)(v20 + 24);
        v24 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v24 & 1) != 0)
          goto LABEL_39;
      }
      else
      {
        v22 = *(unsigned __int8 *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39);
        v23 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v23 & 1) != 0)
          goto LABEL_39;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)v148);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v148);
        if ((_BYTE)v149 && (v148[23] & 0x80000000) != 0)
          operator delete(*(void **)v148);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
LABEL_39:
      if (byte_254A4A4F8[23] >= 0)
        v25 = byte_254A4A4F8;
      else
        v25 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v26 = byte_254A4A4F8[23];
      else
        v26 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)v148 = os_log_create(v25, v21);
      v27 = &v148[8];
      if (v26 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v26 >= 0x17)
      {
        v28 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v26 | 7) != 0x17)
          v28 = v26 | 7;
        v29 = v28 + 1;
        v27 = operator new(v28 + 1);
        *(_QWORD *)&v148[16] = v26;
        *(_QWORD *)&v149 = v29 | 0x8000000000000000;
        *(_QWORD *)&v148[8] = v27;
      }
      else
      {
        BYTE7(v149) = v26;
        if (!v26)
        {
LABEL_53:
          v27[v26] = 0;
          BYTE8(v149) = 1;
          v30 = v150;
          if (v22 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v22 >= 0x17)
          {
            v31 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v22 | 7) != 0x17)
              v31 = v22 | 7;
            v32 = v31 + 1;
            v30 = (void **)operator new(v31 + 1);
            v150[1] = (void *)v22;
            v151 = v32 | 0x8000000000000000;
            v150[0] = v30;
          }
          else
          {
            HIBYTE(v151) = v22;
            if (!v22)
              goto LABEL_61;
          }
          memmove(v30, v21, v22);
LABEL_61:
          *((_BYTE *)v30 + v22) = 0;
          v152 = 1;
          v33 = *(NSObject **)v148;
          if (SHIBYTE(v151) < 0)
            operator delete(v150[0]);
          if (BYTE8(v149) && SBYTE7(v149) < 0)
            operator delete(*(void **)&v148[8]);
          if (*(_QWORD *)v148)
            os_release(*(void **)v148);
          if (v19 && *(_QWORD *)(v19 + 24))
          {
            v34 = _os_log_pack_size();
            v35 = (std::__shared_weak_count_vtbl *)operator new(v34, (std::align_val_t)8uLL);
            v36 = (std::__shared_weak_count *)operator new();
            v36->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v36->__shared_owners_;
            v36->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v36->__shared_weak_owners_ = 0;
            v36[1].__vftable = v35;
            v129[0] = v35;
            v129[1] = v35;
            v131 = 0;
            v132 = 0;
            v130 = v36;
            v38 = (char *)operator new(0x38uLL);
            v39 = (std::__shared_weak_count *)v38;
            *((_QWORD *)v38 + 1) = 0;
            v40 = (unint64_t *)(v38 + 8);
            *((_QWORD *)v38 + 2) = 0;
            *(_QWORD *)v38 = &off_24C9ABBD0;
            *((_QWORD *)v38 + 3) = off_24C9ABC20;
            strcpy(v38 + 32, "Bad stream");
            v38[55] = 10;
            v131 = v38 + 24;
            v132 = v38;
            *(_QWORD *)v148 = v35;
            *(_QWORD *)&v148[8] = v35;
            *(_QWORD *)&v148[16] = v36;
            do
              v41 = __ldxr(p_shared_owners);
            while (__stxr(v41 + 1, p_shared_owners));
            *(_QWORD *)&v149 = v38 + 24;
            *((_QWORD *)&v149 + 1) = v38;
            do
              v42 = __ldxr(v40);
            while (__stxr(v42 + 1, v40));
            v150[0] = v38 + 24;
            do
              v43 = __ldaxr(v40);
            while (__stlxr(v43 - 1, v40));
            if (!v43)
            {
              (*(void (**)(char *))(*(_QWORD *)v38 + 16))(v38);
              std::__shared_weak_count::__release_weak(v39);
            }
            v44 = v130;
            if (v130)
            {
              v45 = (unint64_t *)&v130->__shared_owners_;
              do
                v46 = __ldaxr(v45);
              while (__stlxr(v46 - 1, v45));
              if (!v46)
              {
                ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
                std::__shared_weak_count::__release_weak(v44);
              }
            }
            v47 = *(_QWORD *)v148;
            if (*((char *)v150[0] + 31) >= 0)
              v48 = (char *)v150[0] + 8;
            else
              v48 = (char *)*((_QWORD *)v150[0] + 1);
            v49 = _os_log_pack_fill();
            *(_DWORD *)v49 = 136315138;
            *(_QWORD *)(v49 + 4) = v48;
            v50 = operator new();
            v51 = *(unsigned __int8 *)(v114 + 39);
            v52 = v113;
            if ((v51 & 0x80u) != 0)
            {
              v52 = *(const char **)(v114 + 16);
              v51 = *(_QWORD *)(v114 + 24);
            }
            *(_QWORD *)v50 = v47;
            *(_OWORD *)(v50 + 8) = *(_OWORD *)&v148[8];
            *(_QWORD *)&v148[8] = 0;
            *(_QWORD *)&v148[16] = 0;
            *(_OWORD *)(v50 + 24) = v149;
            v149 = 0uLL;
            *(_QWORD *)(v50 + 40) = v52;
            *(_QWORD *)(v50 + 48) = v51;
            *(_BYTE *)(v50 + 56) = 16;
            v133 = 0;
            v129[0] = v50;
            (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v19 + 24) + 40))(*(_QWORD *)(v19 + 24), v129);
            v53 = v129[0];
            v129[0] = 0;
            if (v53)
            {
              v54 = *(std::__shared_weak_count **)(v53 + 32);
              if (v54)
              {
                v55 = (unint64_t *)&v54->__shared_owners_;
                do
                  v56 = __ldaxr(v55);
                while (__stlxr(v56 - 1, v55));
                if (!v56)
                {
                  ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                  std::__shared_weak_count::__release_weak(v54);
                }
              }
              v57 = *(std::__shared_weak_count **)(v53 + 16);
              if (v57)
              {
                v58 = (unint64_t *)&v57->__shared_owners_;
                do
                  v59 = __ldaxr(v58);
                while (__stlxr(v59 - 1, v58));
                if (!v59)
                {
                  ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                  std::__shared_weak_count::__release_weak(v57);
                }
              }
              MEMORY[0x212BC6398](v53, 0x10F0C40B62ED6C6);
              v60 = v133;
              v133 = 0;
              if (v60)
              {
                v61 = *(std::__shared_weak_count **)(v60 + 32);
                if (v61)
                {
                  v62 = (unint64_t *)&v61->__shared_owners_;
                  do
                    v63 = __ldaxr(v62);
                  while (__stlxr(v63 - 1, v62));
                  if (!v63)
                  {
                    ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                    std::__shared_weak_count::__release_weak(v61);
                  }
                }
                v64 = *(std::__shared_weak_count **)(v60 + 16);
                if (v64)
                {
                  v65 = (unint64_t *)&v64->__shared_owners_;
                  do
                    v66 = __ldaxr(v65);
                  while (__stlxr(v66 - 1, v65));
                  if (!v66)
                  {
                    ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                    std::__shared_weak_count::__release_weak(v64);
                  }
                }
                MEMORY[0x212BC6398](v60, 0x10F0C40B62ED6C6);
              }
            }
            v67 = (std::__shared_weak_count *)*((_QWORD *)&v149 + 1);
            v68 = v115;
            if (*((_QWORD *)&v149 + 1))
            {
              v69 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
              do
                v70 = __ldaxr(v69);
              while (__stlxr(v70 - 1, v69));
              if (!v70)
              {
                ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                std::__shared_weak_count::__release_weak(v67);
              }
            }
            v71 = *(std::__shared_weak_count **)&v148[16];
            if (*(_QWORD *)&v148[16])
            {
              v72 = (unint64_t *)(*(_QWORD *)&v148[16] + 8);
              do
                v73 = __ldaxr(v72);
              while (__stlxr(v73 - 1, v72));
              if (!v73)
              {
                ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                std::__shared_weak_count::__release_weak(v71);
              }
            }
          }
          else
          {
            os_log_type_enabled(v33, OS_LOG_TYPE_ERROR);
            *(_DWORD *)v148 = 136315138;
            *(_QWORD *)&v148[4] = "Bad stream";
            v74 = (void *)_os_log_send_and_compose_impl();
            v68 = v115;
            if (v74)
              free(v74);
          }
          if (v68)
          {
            sub_20E8C003C((uint64_t)&__p, "Persistence report save failed with err: %s.", "Bad stream");
            sub_20E863570((uint64_t)&__p);
          }
          sub_20E863570((uint64_t)&__p);
          v75 = (std::__shared_weak_count *)v141;
          if (v141)
          {
            v76 = (unint64_t *)((char *)v141 + 8);
            do
              v77 = __ldaxr(v76);
            while (__stlxr(v77 - 1, v76));
            if (!v77)
            {
              ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
              std::__shared_weak_count::__release_weak(v75);
            }
          }
          goto LABEL_130;
        }
      }
      memmove(v27, v25, v26);
      goto LABEL_53;
    }
  }
LABEL_130:
  v78 = sub_210219C18();
  v79 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v79 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (!atomic_load(&qword_254A5A450))
    goto LABEL_150;
  LOWORD(__p.__r_.__value_.__l.__data_) = 0;
  v81 = (char *)_os_log_send_and_compose_impl();
  v82 = strlen(v81);
  *(_QWORD *)v148 = 0;
  pthread_threadid_np(0, (__uint64_t *)v148);
  v83 = *(_QWORD *)v148;
  timespec_get((timespec *)v148, 1);
  sub_210219E20(&__p, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v78 + 1), (__int128 *)(v78 + 5), "Persistence:Err:Stream error", 0x1CuLL, v81, v82, v83, v148);
  std::mutex::lock(&stru_254A5A410);
  v84 = qword_254A5A458;
  for (i = unk_254A5A460; v84 != i; v84 += 40)
  {
    v86 = *(_QWORD *)(v84 + 32);
    if (!v86)
      sub_20E86D37C();
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v86 + 48))(v86, &__p);
  }
  std::mutex::unlock(&stru_254A5A410);
  if ((v147 & 0x80000000) == 0)
  {
    if ((v145 & 0x80000000) == 0)
      goto LABEL_137;
LABEL_140:
    operator delete(v144);
    if (!v143)
      goto LABEL_143;
LABEL_141:
    if (v142 < 0)
      operator delete(v141);
    goto LABEL_143;
  }
  operator delete(v146);
  if (v145 < 0)
    goto LABEL_140;
LABEL_137:
  if (v143)
    goto LABEL_141;
LABEL_143:
  if ((_BYTE)v140 && SHIBYTE(v139) < 0)
    operator delete(v137);
  if (v136 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v81)
    free(v81);
LABEL_150:
  if (os_signpost_enabled((os_log_t)*v78))
  {
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    _os_signpost_emit_unreliably_with_name_impl();
  }
LABEL_152:
  v87 = v122;
  if (v122)
  {
    v88 = (unint64_t *)&v122->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  sub_20EB911C0(&v124, v123);
  v90 = (void **)v117;
  if (v117)
  {
    v91 = v118;
    v92 = v117;
    if (v118 == v117)
    {
LABEL_169:
      v118 = v90;
      operator delete(v92);
      goto LABEL_170;
    }
    while (1)
    {
      while (*((char *)v91 - 1) < 0)
      {
        operator delete(*(v91 - 3));
        if (*((char *)v91 - 41) < 0)
          goto LABEL_160;
LABEL_166:
        if ((*((char *)v91 - 81) & 0x80000000) == 0)
          goto LABEL_161;
LABEL_167:
        operator delete(*(v91 - 13));
        v91 -= 15;
        if (v91 == v90)
        {
LABEL_168:
          v92 = v117;
          goto LABEL_169;
        }
      }
      if ((*((char *)v91 - 41) & 0x80000000) == 0)
        goto LABEL_166;
LABEL_160:
      operator delete(*(v91 - 8));
      if (*((char *)v91 - 81) < 0)
        goto LABEL_167;
LABEL_161:
      v91 -= 15;
      if (v91 == v90)
        goto LABEL_168;
    }
  }
LABEL_170:
  sub_20EB90F1C((uint64_t)v116, v116[1]);
  v93 = category;
  if (!category)
    goto LABEL_195;
  v94 = (void **)v126;
  v95 = category;
  if (v126 != category)
  {
    while (1)
    {
      if (*((char *)v94 - 1) < 0)
      {
        operator delete(*(v94 - 3));
        v97 = v94 - 6;
        v98 = (char *)*(v94 - 6);
        if (!v98)
          goto LABEL_175;
      }
      else
      {
        v97 = v94 - 6;
        v98 = (char *)*(v94 - 6);
        if (!v98)
          goto LABEL_175;
      }
      v99 = (char *)*(v94 - 5);
      v96 = v98;
      if (v99 != v98)
        break;
LABEL_174:
      *(v94 - 5) = v98;
      operator delete(v96);
LABEL_175:
      v94 = v97;
      if (v97 == (void **)v93)
      {
        v95 = category;
        goto LABEL_194;
      }
    }
    while (1)
    {
      if (!*(v99 - 48))
        goto LABEL_234;
      v100 = (std::__shared_weak_count *)*((_QWORD *)v99 - 7);
      if (!v100)
        goto LABEL_234;
      v101 = (unint64_t *)&v100->__shared_owners_;
      do
        v102 = __ldaxr(v101);
      while (__stlxr(v102 - 1, v101));
      if (!v102)
      {
        ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
        std::__shared_weak_count::__release_weak(v100);
        if (*(v99 - 304))
        {
LABEL_189:
          if (*(v99 - 305) < 0)
            operator delete(*((void **)v99 - 41));
        }
      }
      else
      {
LABEL_234:
        if (*(v99 - 304))
          goto LABEL_189;
      }
      v99 -= 344;
      if (v99 == v98)
      {
        v96 = *v97;
        goto LABEL_174;
      }
    }
  }
LABEL_194:
  v126 = v93;
  operator delete(v95);
LABEL_195:
  v103 = (char *)v127;
  if (v127)
  {
    v104 = v128;
    v105 = v127;
    if (v128 != v127)
    {
      do
      {
        v107 = *((_QWORD *)v104 - 3);
        if (v107)
        {
          v108 = *((_QWORD *)v104 - 2);
          v109 = (void *)*((_QWORD *)v104 - 3);
          if (v108 != v107)
          {
            do
            {
              if (*(char *)(v108 - 1) < 0)
                operator delete(*(void **)(v108 - 24));
              v108 -= 24;
            }
            while (v108 != v107);
            v109 = (void *)*((_QWORD *)v104 - 3);
          }
          *((_QWORD *)v104 - 2) = v107;
          operator delete(v109);
        }
        v110 = *((_QWORD *)v104 - 8);
        if (v110)
        {
          v111 = *((_QWORD *)v104 - 7);
          v106 = (void *)*((_QWORD *)v104 - 8);
          if (v111 != v110)
          {
            do
            {
              if (*(char *)(v111 - 1) < 0)
                operator delete(*(void **)(v111 - 24));
              v111 -= 24;
            }
            while (v111 != v110);
            v106 = (void *)*((_QWORD *)v104 - 8);
          }
          *((_QWORD *)v104 - 7) = v110;
          operator delete(v106);
        }
        v104 -= 200;
      }
      while (v104 != v103);
      v105 = v127;
    }
    v128 = v103;
    operator delete(v105);
  }
  return v12;
}

void sub_20EB8FF50(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,void *a44,int a45,__int16 a46,char a47,char a48,char a49,int a50,__int16 a51,char a52,char a53)
{
  if (a49 && a48 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a16);
  __cxa_end_catch();
  JUMPOUT(0x20EB8F6D4);
}

void sub_20EB90108()
{
  __cxa_end_catch();
  JUMPOUT(0x20EB8F6D4);
}

void sub_20EB9011C(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5B2D0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5B2D0))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A5B2C8);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A5B2D0);
  }
  *a1 = qword_254A5B2C8;
}

void sub_20EB901B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5B2D0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5B2D0);
  _Unwind_Resume(a1);
}

void sub_20EB90210(uint64_t a1@<X0>, int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, _QWORD *a6@<X8>)
{
  char *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  lconv *v16;
  char *thousands_sep;
  char *decimal_point;
  _OWORD *v19;
  int8x16_t v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  void (***v25)(void);
  std::__shared_weak_count *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  lconv *v31;
  char v32;
  char v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  char v66;
  void *__p;
  uint64_t v68;
  unint64_t v69;
  int v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  v12 = (char *)operator new(0x28uLL);
  v13 = (std::__shared_weak_count *)v12;
  *((_QWORD *)v12 + 1) = 0;
  v14 = (unint64_t *)(v12 + 8);
  *((_QWORD *)v12 + 2) = 0;
  *(_QWORD *)v12 = &off_24C9C5338;
  *((_QWORD *)v12 + 3) = off_24C9C5388;
  *((_QWORD *)v12 + 4) = a6;
  do
    v15 = __ldxr(v14);
  while (__stxr(v15 + 1, v14));
  v25 = (void (***)(void))(v12 + 24);
  v26 = (std::__shared_weak_count *)v12;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v16 = localeconv();
  v31 = v16;
  thousands_sep = v16->thousands_sep;
  if (thousands_sep)
    LOBYTE(thousands_sep) = *thousands_sep;
  v32 = (char)thousands_sep;
  decimal_point = v16->decimal_point;
  if (v16->decimal_point)
    LOBYTE(decimal_point) = *decimal_point;
  v33 = (char)decimal_point;
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  v54 = 0u;
  v55 = 0u;
  v56 = 0u;
  v57 = 0u;
  v58 = 0u;
  v59 = 0u;
  v60 = 0u;
  v61 = 0u;
  v62 = 0u;
  v63 = 0u;
  v64 = 0u;
  v65 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v66 = a3;
  v19 = operator new(0x208uLL);
  __p = v19;
  v69 = 0x8000000000000208;
  v68 = 512;
  v20 = vdupq_n_s8(a3);
  *v19 = v20;
  v19[1] = v20;
  v19[2] = v20;
  v19[3] = v20;
  v19[4] = v20;
  v19[5] = v20;
  v19[6] = v20;
  v19[7] = v20;
  v19[8] = v20;
  v19[9] = v20;
  v19[10] = v20;
  v19[11] = v20;
  v19[12] = v20;
  v19[13] = v20;
  v19[14] = v20;
  v19[15] = v20;
  v19[16] = v20;
  v19[17] = v20;
  v19[18] = v20;
  v19[19] = v20;
  v19[20] = v20;
  v19[21] = v20;
  v19[22] = v20;
  v19[23] = v20;
  v19[24] = v20;
  v19[25] = v20;
  v19[26] = v20;
  v19[27] = v20;
  v19[28] = v20;
  v19[29] = v20;
  v19[30] = v20;
  v19[31] = v20;
  *((_BYTE *)v19 + 512) = 0;
  v70 = a5;
  do
    v21 = __ldaxr(v14);
  while (__stlxr(v21 - 1, v14));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  sub_20EB91A6C(&v25, a1, a2 >= 0, a4, a2 & ~(a2 >> 31), 0);
  if (SHIBYTE(v69) < 0)
    operator delete(__p);
  v22 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

void sub_20EB90498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  sub_20EB9294C((uint64_t)va);
  if (*(char *)(v6 + 23) < 0)
    operator delete(*(void **)v6);
  _Unwind_Resume(a1);
}

uint64_t sub_20EB90508(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(a1 + 24);
    if (v3 == v2)
    {
LABEL_13:
      *(_QWORD *)(a1 + 32) = v2;
      operator delete(v4);
      goto LABEL_14;
    }
    while (1)
    {
      if (*(char *)(v3 - 1) < 0)
      {
        operator delete(*(void **)(v3 - 24));
        if ((*(char *)(v3 - 41) & 0x80000000) == 0)
        {
LABEL_7:
          if (*(char *)(v3 - 81) < 0)
            goto LABEL_11;
          goto LABEL_4;
        }
      }
      else if ((*(char *)(v3 - 41) & 0x80000000) == 0)
      {
        goto LABEL_7;
      }
      operator delete(*(void **)(v3 - 64));
      if (*(char *)(v3 - 81) < 0)
LABEL_11:
        operator delete(*(void **)(v3 - 104));
LABEL_4:
      v3 -= 120;
      if (v3 == v2)
      {
        v4 = *(void **)(a1 + 24);
        goto LABEL_13;
      }
    }
  }
LABEL_14:
  sub_20EB90F1C(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

char ***sub_20EB905B8(char ***a1)
{
  char **v2;
  char **v3;
  char **v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v3 -= 6;
        sub_20EB90FE0(v3);
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t *sub_20EB90618(uint64_t *a1)
{
  if (*a1)
  {
    sub_20EB910E4((uint64_t)a1, *a1);
    operator delete((void *)*a1);
  }
  return a1;
}

void sub_20EB90650(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  char *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  void *v12[3];
  char v13;
  void *v14;
  char v15;
  char v16;
  void *v17;
  char v18;
  char v19;
  void *v20;
  char v21;
  void *__p;
  char v23;
  __uint64_t v24[2];

  v4 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    LOWORD(v12[0]) = 0;
    v6 = (char *)_os_log_send_and_compose_impl();
    v7 = strlen(v6);
    v24[0] = 0;
    pthread_threadid_np(0, v24);
    v8 = v24[0];
    timespec_get((timespec *)v24, 1);
    sub_210219E20(v12, a2, "Trace", 5uLL, (__int128 *)(a1 + 8), (__int128 *)(a1 + 40), "Persistence:Err:Failed to save report", 0x25uLL, v6, v7, v8, v24);
    std::mutex::lock(&stru_254A5A410);
    v9 = qword_254A5A458;
    for (i = unk_254A5A460; v9 != i; v9 += 40)
    {
      v11 = *(_QWORD *)(v9 + 32);
      if (!v11)
        sub_20E86D37C();
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v11 + 48))(v11, v12);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v23 < 0)
    {
      operator delete(__p);
      if ((v21 & 0x80000000) == 0)
      {
LABEL_8:
        if (!v19)
        {
LABEL_14:
          if (v16 && v15 < 0)
            operator delete(v14);
          if (v13 < 0)
            operator delete(v12[1]);
          if (v6)
            free(v6);
          goto LABEL_21;
        }
LABEL_12:
        if (v18 < 0)
          operator delete(v17);
        goto LABEL_14;
      }
    }
    else if ((v21 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(v20);
    if (!v19)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_21:
  if ((unint64_t)(a2 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(*(os_log_t *)a1))
  {
    LOWORD(v12[0]) = 0;
    _os_signpost_emit_unreliably_with_name_impl();
  }
}

void sub_20EB908C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  va_list va;

  va_start(va, a5);
  sub_20E96E218((uint64_t)va);
  if (v5)
    free(v5);
  _Unwind_Resume(a1);
}

void sub_20EB90904(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned __int8 v6;
  uint64_t v8;
  char *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  __uint64_t v16[2];
  int v17;
  _QWORD v18[3];
  char v19;
  void *v20;
  char v21;
  char v22;
  void *v23;
  char v24;
  char v25;
  void *v26;
  char v27;
  void *__p;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v6 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    v8 = *a3;
    v17 = 136315138;
    v18[0] = v8;
    v9 = (char *)_os_log_send_and_compose_impl();
    v10 = strlen(v9);
    v16[0] = 0;
    pthread_threadid_np(0, v16);
    v11 = v16[0];
    timespec_get((timespec *)v16, 1);
    sub_210219E20(&v17, a2, "Trace", 5uLL, (__int128 *)(a1 + 8), (__int128 *)(a1 + 40), "Persistence:Err:%s", 0x12uLL, v9, v10, v11, v16);
    std::mutex::lock(&stru_254A5A410);
    v12 = qword_254A5A458;
    for (i = unk_254A5A460; v12 != i; v12 += 40)
    {
      v14 = *(_QWORD *)(v12 + 32);
      if (!v14)
        sub_20E86D37C();
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v14 + 48))(v14, &v17);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v29 < 0)
    {
      operator delete(__p);
      if ((v27 & 0x80000000) == 0)
      {
LABEL_8:
        if (!v25)
        {
LABEL_14:
          if (v22 && v21 < 0)
            operator delete(v20);
          if (v19 < 0)
            operator delete(*(void **)((char *)v18 + 4));
          if (v9)
            free(v9);
          goto LABEL_21;
        }
LABEL_12:
        if (v24 < 0)
          operator delete(v23);
        goto LABEL_14;
      }
    }
    else if ((v27 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(v26);
    if (!v25)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_21:
  if ((unint64_t)(a2 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(*(os_log_t *)a1))
  {
    v15 = *a3;
    v17 = 136315138;
    v18[0] = v15;
    _os_signpost_emit_unreliably_with_name_impl();
  }
}

void sub_20EB90BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  sub_20E96E218((uint64_t)va);
  if (v7)
    free(v7);
  _Unwind_Resume(a1);
}

void sub_20EB90C10(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned __int8 v6;
  uint64_t v8;
  char *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  __uint64_t v16[2];
  int v17;
  _QWORD v18[3];
  char v19;
  void *v20;
  char v21;
  char v22;
  void *v23;
  char v24;
  char v25;
  void *v26;
  char v27;
  void *__p;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v6 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    v8 = *a3;
    v17 = 136315138;
    v18[0] = v8;
    v9 = (char *)_os_log_send_and_compose_impl();
    v10 = strlen(v9);
    v16[0] = 0;
    pthread_threadid_np(0, v16);
    v11 = v16[0];
    timespec_get((timespec *)v16, 1);
    sub_210219E20(&v17, a2, "Trace", 5uLL, (__int128 *)(a1 + 8), (__int128 *)(a1 + 40), "Persistence:Err:%s", 0x12uLL, v9, v10, v11, v16);
    std::mutex::lock(&stru_254A5A410);
    v12 = qword_254A5A458;
    for (i = unk_254A5A460; v12 != i; v12 += 40)
    {
      v14 = *(_QWORD *)(v12 + 32);
      if (!v14)
        sub_20E86D37C();
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v14 + 48))(v14, &v17);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v29 < 0)
    {
      operator delete(__p);
      if ((v27 & 0x80000000) == 0)
      {
LABEL_8:
        if (!v25)
        {
LABEL_14:
          if (v22 && v21 < 0)
            operator delete(v20);
          if (v19 < 0)
            operator delete(*(void **)((char *)v18 + 4));
          if (v9)
            free(v9);
          goto LABEL_21;
        }
LABEL_12:
        if (v24 < 0)
          operator delete(v23);
        goto LABEL_14;
      }
    }
    else if ((v27 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(v26);
    if (!v25)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_21:
  if ((unint64_t)(a2 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(*(os_log_t *)a1))
  {
    v15 = *a3;
    v17 = 136315138;
    v18[0] = v15;
    _os_signpost_emit_unreliably_with_name_impl();
  }
}

void sub_20EB90EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  sub_20E96E218((uint64_t)va);
  if (v7)
    free(v7);
  _Unwind_Resume(a1);
}

void sub_20EB90F1C(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2)
  {
    sub_20EB90F1C(a1, *a2);
    sub_20EB90F1C(a1, a2[1]);
    v4 = a2[5];
    if (!v4)
    {
LABEL_16:
      operator delete(a2);
      return;
    }
    v5 = a2[6];
    v6 = (void *)a2[5];
    if (v5 == v4)
    {
LABEL_15:
      a2[6] = v4;
      operator delete(v6);
      goto LABEL_16;
    }
    while (1)
    {
      if (*(char *)(v5 - 1) < 0)
      {
        operator delete(*(void **)(v5 - 24));
        if ((*(char *)(v5 - 41) & 0x80000000) == 0)
        {
LABEL_8:
          if (*(char *)(v5 - 81) < 0)
            goto LABEL_12;
          goto LABEL_5;
        }
      }
      else if ((*(char *)(v5 - 41) & 0x80000000) == 0)
      {
        goto LABEL_8;
      }
      operator delete(*(void **)(v5 - 64));
      if (*(char *)(v5 - 81) < 0)
LABEL_12:
        operator delete(*(void **)(v5 - 104));
LABEL_5:
      v5 -= 120;
      if (v5 == v4)
      {
        v6 = (void *)a2[5];
        goto LABEL_15;
      }
    }
  }
}

void sub_20EB90FE0(char **a1)
{
  char *v2;
  char *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char *v7;

  if (*((char *)a1 + 47) < 0)
  {
    operator delete(a1[3]);
    v2 = *a1;
    if (*a1)
    {
LABEL_3:
      v3 = a1[1];
      if (v3 == v2)
      {
        a1[1] = v2;
        operator delete(v2);
        return;
      }
      while (1)
      {
        if (!*(v3 - 48))
          goto LABEL_21;
        v4 = (std::__shared_weak_count *)*((_QWORD *)v3 - 7);
        if (!v4)
          goto LABEL_21;
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
          if (*(v3 - 304))
          {
LABEL_12:
            if (*(v3 - 305) < 0)
              operator delete(*((void **)v3 - 41));
          }
        }
        else
        {
LABEL_21:
          if (*(v3 - 304))
            goto LABEL_12;
        }
        v3 -= 344;
        if (v3 == v2)
        {
          v7 = *a1;
          a1[1] = v2;
          operator delete(v7);
          return;
        }
      }
    }
  }
  else
  {
    v2 = *a1;
    if (*a1)
      goto LABEL_3;
  }
}

void sub_20EB910E4(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;

  for (i = *(_QWORD *)(a1 + 8); i != a2; i -= 200)
  {
    v6 = *(_QWORD *)(i - 24);
    if (v6)
    {
      v7 = *(_QWORD *)(i - 16);
      v8 = *(void **)(i - 24);
      if (v7 != v6)
      {
        do
        {
          if (*(char *)(v7 - 1) < 0)
            operator delete(*(void **)(v7 - 24));
          v7 -= 24;
        }
        while (v7 != v6);
        v8 = *(void **)(i - 24);
      }
      *(_QWORD *)(i - 16) = v6;
      operator delete(v8);
    }
    v9 = *(_QWORD *)(i - 64);
    if (v9)
    {
      v10 = *(_QWORD *)(i - 56);
      v5 = *(void **)(i - 64);
      if (v10 != v9)
      {
        do
        {
          if (*(char *)(v10 - 1) < 0)
            operator delete(*(void **)(v10 - 24));
          v10 -= 24;
        }
        while (v10 != v9);
        v5 = *(void **)(i - 64);
      }
      *(_QWORD *)(i - 56) = v9;
      operator delete(v5);
    }
  }
  *(_QWORD *)(a1 + 8) = a2;
}

void sub_20EB911C0(uint64_t *a1, int a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  BOOL v12;
  char *v13;
  char *v14;
  char *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char v45;
  char *v46;
  char *v47;
  char *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  void **v53;
  void *v54;
  void *v55;
  void *v56;
  uint64_t v57;
  void *v58;
  void *v59;
  char *v60;
  char *v61;
  int v62;
  unsigned __int8 v63;
  _QWORD *v64;
  void *__p;
  char *v66;
  char *v67;

  __p = 0;
  v66 = 0;
  v67 = 0;
  v3 = a2 - 1;
  if (a2 == 1)
  {
    sub_20EB917E0((uint64_t)&__p, *(_QWORD *)(*a1 + 16));
    v7 = *a1 + 8;
    v8 = *(char **)*a1;
    if (v8 != (char *)v7)
    {
      v9 = v66;
      do
      {
        if (v9 >= v67)
        {
          v9 = sub_20EB918D8(&__p, v8 + 56);
        }
        else
        {
          *v9 = v8[56];
          *((_QWORD *)v9 + 1) = *((_QWORD *)v8 + 8);
          v8[56] = 0;
          *((_QWORD *)v8 + 8) = 0;
          v9 += 16;
        }
        v66 = v9;
        v10 = (char *)*((_QWORD *)v8 + 1);
        if (v10)
        {
          do
          {
            v11 = v10;
            v10 = *(char **)v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            v11 = (char *)*((_QWORD *)v8 + 2);
            v12 = *(_QWORD *)v11 == (_QWORD)v8;
            v8 = v11;
          }
          while (!v12);
        }
        v8 = v11;
      }
      while (v11 != (char *)v7);
    }
  }
  else if (a2 == 2)
  {
    sub_20EB917E0((uint64_t)&__p, (uint64_t)(*(_QWORD *)(*a1 + 8) - *(_QWORD *)*a1) >> 4);
    v4 = *(_QWORD *)*a1;
    v5 = *(_QWORD *)(*a1 + 8);
    if (v4 != v5)
    {
      v6 = v66;
      do
      {
        if (v6 < v67)
        {
          *v6 = *(_BYTE *)v4;
          *((_QWORD *)v6 + 1) = *(_QWORD *)(v4 + 8);
          *(_BYTE *)v4 = 0;
          *(_QWORD *)(v4 + 8) = 0;
          v6 += 16;
        }
        else
        {
          v6 = sub_20EB918D8(&__p, (char *)v4);
        }
        v66 = v6;
        v4 += 16;
      }
      while (v4 != v5);
    }
  }
  v14 = (char *)__p;
  v13 = v66;
  if (__p != v66)
  {
    v62 = v3;
    while (1)
    {
      v63 = *(v13 - 16);
      v64 = (_QWORD *)*((_QWORD *)v13 - 1);
      *(v13 - 16) = 0;
      *((_QWORD *)v13 - 1) = 0;
      v15 = v66 - 16;
      sub_20EB911C0(v66 - 8, *(v66 - 16));
      v66 = v15;
      if (v63 == 1)
        break;
      if (v63 == 2)
      {
        v16 = (_QWORD *)*v64;
        v17 = v64 + 1;
        v18 = (_QWORD *)v64[1];
        if ((_QWORD *)*v64 != v18)
        {
          do
          {
            if (v15 < v67)
            {
              *v15 = *(_BYTE *)v16;
              *((_QWORD *)v15 + 1) = v16[1];
              *(_BYTE *)v16 = 0;
              v16[1] = 0;
              v15 += 16;
            }
            else
            {
              v19 = (char *)__p;
              v20 = (v15 - (_BYTE *)__p) >> 4;
              v21 = v20 + 1;
              if ((unint64_t)(v20 + 1) >> 60)
                goto LABEL_105;
              v22 = v67 - (_BYTE *)__p;
              if ((v67 - (_BYTE *)__p) >> 3 > v21)
                v21 = v22 >> 3;
              if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0)
                v23 = 0xFFFFFFFFFFFFFFFLL;
              else
                v23 = v21;
              if (v23 >> 60)
                goto LABEL_106;
              v24 = (char *)operator new(16 * v23);
              v25 = &v24[16 * v20];
              *v25 = *(_BYTE *)v16;
              *((_QWORD *)v25 + 1) = v16[1];
              *(_BYTE *)v16 = 0;
              v16[1] = 0;
              v26 = v66;
              v27 = v25;
              if (v66 != v19)
              {
                do
                {
                  v28 = *(v26 - 16);
                  v26 -= 16;
                  *(v27 - 16) = v28;
                  v27 -= 16;
                  *((_QWORD *)v27 + 1) = *((_QWORD *)v26 + 1);
                  *v26 = 0;
                  *((_QWORD *)v26 + 1) = 0;
                }
                while (v26 != v19);
                v19 = v66;
              }
              v29 = &v24[16 * v23];
              v30 = (char *)__p;
              v15 = v25 + 16;
              __p = v27;
              v66 = v25 + 16;
              v67 = v29;
              if (v19 != v30)
              {
                v31 = v19 - 8;
                do
                {
                  v32 = v31 - 8;
                  sub_20EB911C0(v31, *(v31 - 8));
                  v31 -= 16;
                }
                while (v32 != v30);
              }
              if (v30)
                operator delete(v30);
            }
            v66 = v15;
            v16 += 2;
          }
          while (v16 != v18);
          v16 = (_QWORD *)*v64;
          v17 = v64 + 1;
          v50 = v64[1];
          if (v50 == *v64)
          {
            *v17 = v50;
            goto LABEL_24;
          }
          v51 = v50 - 8;
          do
          {
            v52 = (_QWORD *)(v51 - 8);
            sub_20EB911C0(v51, *(unsigned __int8 *)(v51 - 8));
            v51 -= 16;
          }
          while (v52 != v16);
        }
        *v17 = v16;
      }
LABEL_24:
      sub_20EB911C0(&v64, v63);
      v14 = (char *)__p;
      v13 = v66;
      if (__p == v66)
      {
        v3 = v62;
        goto LABEL_83;
      }
    }
    v33 = (uint64_t)v64;
    v34 = v64 + 1;
    v35 = (_QWORD *)*v64;
    if ((_QWORD *)*v64 == v64 + 1)
    {
LABEL_80:
      sub_20EB91A00(v33, *(char **)(v33 + 8));
      *(_QWORD *)v33 = v33 + 8;
      *(_QWORD *)(v33 + 16) = 0;
      *(_QWORD *)(v33 + 8) = 0;
      goto LABEL_24;
    }
    while (1)
    {
      if (v15 < v67)
      {
        *v15 = *((_BYTE *)v35 + 56);
        *((_QWORD *)v15 + 1) = v35[8];
        *((_BYTE *)v35 + 56) = 0;
        v35[8] = 0;
        v15 += 16;
        v66 = v15;
        v36 = (_QWORD *)v35[1];
        if (v36)
          goto LABEL_70;
        goto LABEL_72;
      }
      v37 = (char *)__p;
      v38 = (v15 - (_BYTE *)__p) >> 4;
      v39 = v38 + 1;
      if ((unint64_t)(v38 + 1) >> 60)
LABEL_105:
        sub_20EB918C4();
      v40 = v67 - (_BYTE *)__p;
      if ((v67 - (_BYTE *)__p) >> 3 > v39)
        v39 = v40 >> 3;
      if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0)
        v41 = 0xFFFFFFFFFFFFFFFLL;
      else
        v41 = v39;
      if (v41 >> 60)
LABEL_106:
        sub_20E877A38();
      v42 = (char *)operator new(16 * v41);
      v43 = &v42[16 * v38];
      *v43 = *((_BYTE *)v35 + 56);
      *((_QWORD *)v43 + 1) = v35[8];
      *((_BYTE *)v35 + 56) = 0;
      v35[8] = 0;
      v44 = v43 + 16;
      if (v15 == v37)
      {
        __p = v43;
        v66 = v43 + 16;
        v67 = &v42[16 * v41];
      }
      else
      {
        do
        {
          v45 = *(v15 - 16);
          v15 -= 16;
          *(v43 - 16) = v45;
          v43 -= 16;
          *((_QWORD *)v43 + 1) = *((_QWORD *)v15 + 1);
          *v15 = 0;
          *((_QWORD *)v15 + 1) = 0;
        }
        while (v15 != v37);
        v15 = (char *)__p;
        v46 = v66;
        __p = v43;
        v66 = v44;
        v67 = &v42[16 * v41];
        if (v46 != v15)
        {
          v47 = v46 - 8;
          do
          {
            v48 = v47 - 8;
            sub_20EB911C0(v47, *(v47 - 8));
            v47 -= 16;
          }
          while (v48 != v15);
        }
        if (!v15)
        {
          v15 = v44;
          v66 = v44;
          v36 = (_QWORD *)v35[1];
          if (v36)
            goto LABEL_70;
          goto LABEL_72;
        }
      }
      operator delete(v15);
      v15 = v44;
      v66 = v44;
      v36 = (_QWORD *)v35[1];
      if (v36)
      {
        do
        {
LABEL_70:
          v49 = v36;
          v36 = (_QWORD *)*v36;
        }
        while (v36);
        goto LABEL_49;
      }
      do
      {
LABEL_72:
        v49 = (_QWORD *)v35[2];
        v12 = *v49 == (_QWORD)v35;
        v35 = v49;
      }
      while (!v12);
LABEL_49:
      v35 = v49;
      if (v49 == v34)
      {
        v33 = (uint64_t)v64;
        goto LABEL_80;
      }
    }
  }
LABEL_83:
  switch(v3)
  {
    case 0:
      sub_20EB91A00(*a1, *(char **)(*a1 + 8));
      goto LABEL_96;
    case 1:
      v53 = (void **)*a1;
      v55 = *(void **)*a1;
      if (!v55)
        goto LABEL_97;
      v56 = v53[1];
      v54 = *(void **)*a1;
      if (v56 != v55)
      {
        v57 = (uint64_t)v56 - 8;
        do
        {
          v58 = (void *)(v57 - 8);
          sub_20EB911C0(v57, *(unsigned __int8 *)(v57 - 8));
          v57 -= 16;
        }
        while (v58 != v55);
        v54 = *v53;
      }
      v53[1] = v55;
      break;
    case 2:
      v53 = (void **)*a1;
      if ((*(char *)(*a1 + 23) & 0x80000000) == 0)
        goto LABEL_97;
      v54 = *v53;
      break;
    case 7:
      v53 = (void **)*a1;
      v54 = *(void **)*a1;
      if (!v54)
        goto LABEL_97;
      v53[1] = v54;
      break;
    default:
      goto LABEL_98;
  }
  operator delete(v54);
LABEL_96:
  v53 = (void **)*a1;
LABEL_97:
  operator delete(v53);
  v14 = (char *)__p;
LABEL_98:
  if (v14)
  {
    v59 = v14;
    if (v66 != v14)
    {
      v60 = v66 - 8;
      do
      {
        v61 = v60 - 8;
        sub_20EB911C0(v60, *(v60 - 8));
        v60 -= 16;
      }
      while (v61 != v14);
      v59 = __p;
    }
    v66 = v14;
    operator delete(v59);
  }
}

void sub_20EB917E0(uint64_t a1, unint64_t a2)
{
  char *v2;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char v10;
  char *v11;
  char *v12;
  char *v13;

  v2 = *(char **)a1;
  if (a2 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4)
  {
    if (a2 >> 60)
      sub_20EB918C4();
    v4 = *(_BYTE **)(a1 + 8);
    v5 = 16 * a2;
    v6 = (char *)operator new(16 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v2)
LABEL_10:
        operator delete(v2);
    }
    else
    {
      v9 = &v6[v4 - v2];
      do
      {
        v10 = *(v4 - 16);
        v4 -= 16;
        *(v9 - 16) = v10;
        v9 -= 16;
        *((_QWORD *)v9 + 1) = *((_QWORD *)v4 + 1);
        *v4 = 0;
        *((_QWORD *)v4 + 1) = 0;
      }
      while (v4 != v2);
      v2 = *(char **)a1;
      v11 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v11 != v2)
      {
        v12 = v11 - 8;
        do
        {
          v13 = v12 - 8;
          sub_20EB911C0(v12, *(v12 - 8));
          v12 -= 16;
        }
        while (v13 != v2);
      }
      if (v2)
        goto LABEL_10;
    }
  }
}

void sub_20EB918C4()
{
  sub_20E860B90("vector");
}

char *sub_20EB918D8(void **a1, char *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char v16;
  char *v17;
  char *v18;
  char *v19;

  v3 = ((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60)
    sub_20EB918C4();
  v5 = (_BYTE *)a1[2] - (_BYTE *)*a1;
  if (v5 >> 3 > v4)
    v4 = v5 >> 3;
  v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF0;
  v7 = 0xFFFFFFFFFFFFFFFLL;
  if (!v6)
    v7 = v4;
  if (v7 >> 60)
    sub_20E877A38();
  v9 = 16 * v7;
  v10 = (char *)operator new(16 * v7);
  v11 = &v10[16 * v3];
  v12 = &v10[v9];
  *v11 = *a2;
  *((_QWORD *)v11 + 1) = *((_QWORD *)a2 + 1);
  *a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v13 = v11 + 16;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
    if (!v15)
      return v13;
    goto LABEL_13;
  }
  do
  {
    v16 = *(v15 - 16);
    v15 -= 16;
    *(v11 - 16) = v16;
    v11 -= 16;
    *((_QWORD *)v11 + 1) = *((_QWORD *)v15 + 1);
    *v15 = 0;
    *((_QWORD *)v15 + 1) = 0;
  }
  while (v15 != v14);
  v15 = (char *)*a1;
  v17 = (char *)a1[1];
  *a1 = v11;
  a1[1] = v13;
  a1[2] = v12;
  if (v17 != v15)
  {
    v18 = v17 - 8;
    do
    {
      v19 = v18 - 8;
      sub_20EB911C0(v18, *(v18 - 8));
      v18 -= 16;
    }
    while (v19 != v15);
  }
  if (v15)
LABEL_13:
    operator delete(v15);
  return v13;
}

void sub_20EB91A00(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_20EB91A00(a1, *(_QWORD *)a2);
    sub_20EB91A00(a1, *((_QWORD *)a2 + 1));
    sub_20EB911C0(a2 + 64, a2[56]);
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

void (****sub_20EB91A6C(void (****result)(void), uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6))(void)
{
  void (****v10)(void);
  void (**v11)(void);
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  void (*v19)(void);
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  void (**v23)(void);
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t (*v29)(void);
  uint64_t (*v30)(void);
  unint64_t v31;
  uint64_t v32;
  void (*v33)(void);
  unint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t (***v37)(void);
  _QWORD *v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t *v49;
  uint64_t v50;
  void (****v51)(void);
  unsigned int v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  BOOL v68;
  _QWORD *v69;
  unint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t *v73;
  _QWORD *v74;
  char *v75;
  char v76;
  char *v77;
  char v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(void);
  char *v89;
  char v90;

  v10 = result;
  switch(*(_BYTE *)a2)
  {
    case 0:
      goto LABEL_26;
    case 1:
      v11 = **result;
      if (!*(_QWORD *)(*(_QWORD *)(a2 + 8) + 16))
      {
        v30 = (uint64_t (*)(void))v11[1];
        return (void (****)(void))v30();
      }
      if (a3)
      {
        v11[1]();
        v12 = (a6 + a5);
        v13 = v10 + 76;
        if (*((char *)v10 + 631) < 0)
        {
          v14 = (unint64_t)v10[77];
          if (v14 >= v12)
          {
LABEL_6:
            v15 = *(_QWORD **)(a2 + 8);
            v16 = (_QWORD *)*v15;
            if (v15[2] == 1)
            {
LABEL_7:
              v17 = v16;
LABEL_8:
              v18 = v10 + 76;
              if (*((char *)v10 + 631) < 0)
                v18 = (_QWORD *)*v13;
              ((void (*)(void (***)(void), _QWORD *, _QWORD))(**v10)[1])(*v10, v18, (a6 + a5));
              ((void (*)(void (***)(void), uint64_t))***v10)(*v10, 34);
              sub_20EB92A44((uint64_t)v10, v17 + 4, a4);
              ((void (*)(void (***)(void), const char *, uint64_t))(**v10)[1])(*v10, "\": ", 3);
              sub_20EB91A6C(v10, v17 + 7, 1, a4, a5, (a6 + a5));
              ((void (*)(void (***)(void), uint64_t))***v10)(*v10, 10);
              v19 = (**v10)[1];
              goto LABEL_160;
            }
LABEL_92:
            v70 = 0;
            do
            {
              v71 = v10 + 76;
              if (*((char *)v10 + 631) < 0)
                v71 = (_QWORD *)*v13;
              ((void (*)(void (***)(void), _QWORD *, _QWORD))(**v10)[1])(*v10, v71, (a6 + a5));
              ((void (*)(void (***)(void), uint64_t))***v10)(*v10, 34);
              sub_20EB92A44((uint64_t)v10, v16 + 4, a4);
              ((void (*)(void (***)(void), const char *, uint64_t))(**v10)[1])(*v10, "\": ", 3);
              sub_20EB91A6C(v10, v16 + 7, 1, a4, a5, (a6 + a5));
              ((void (*)(void (***)(void), const char *, uint64_t))(**v10)[1])(*v10, ",\n", 2);
              v72 = (_QWORD *)v16[1];
              if (v72)
              {
                do
                {
                  v17 = v72;
                  v72 = (_QWORD *)*v72;
                }
                while (v72);
              }
              else
              {
                do
                {
                  v17 = (_QWORD *)v16[2];
                  v68 = *v17 == (_QWORD)v16;
                  v16 = v17;
                }
                while (!v68);
              }
              ++v70;
              v16 = v17;
            }
            while (v70 < *(_QWORD *)(*(_QWORD *)(a2 + 8) + 16) - 1);
            goto LABEL_8;
          }
        }
        else
        {
          v14 = *((unsigned __int8 *)v10 + 631);
          if (v12 <= v14)
            goto LABEL_6;
        }
        std::string::resize((std::string *)(v10 + 76), 2 * v14, 32);
        v69 = *(_QWORD **)(a2 + 8);
        v16 = (_QWORD *)*v69;
        if (v69[2] == 1)
          goto LABEL_7;
        goto LABEL_92;
      }
      (*v11)();
      v46 = *(_QWORD **)(a2 + 8);
      v47 = (_QWORD *)*v46;
      if (v46[2] == 1)
      {
        v48 = (_QWORD *)*v46;
      }
      else
      {
        v66 = 0;
        do
        {
          ((void (*)(void (***)(void), uint64_t))***v10)(*v10, 34);
          sub_20EB92A44((uint64_t)v10, v47 + 4, a4);
          ((void (*)(void (***)(void), const char *, uint64_t))(**v10)[1])(*v10, "\":", 2);
          sub_20EB91A6C(v10, v47 + 7, 0, a4, a5, a6);
          ((void (*)(void (***)(void), uint64_t))***v10)(*v10, 44);
          v67 = (_QWORD *)v47[1];
          if (v67)
          {
            do
            {
              v48 = v67;
              v67 = (_QWORD *)*v67;
            }
            while (v67);
          }
          else
          {
            do
            {
              v48 = (_QWORD *)v47[2];
              v68 = *v48 == (_QWORD)v47;
              v47 = v48;
            }
            while (!v68);
          }
          ++v66;
          v47 = v48;
        }
        while (v66 < *(_QWORD *)(*(_QWORD *)(a2 + 8) + 16) - 1);
      }
      ((void (*)(void (***)(void), uint64_t))***v10)(*v10, 34);
      sub_20EB92A44((uint64_t)v10, v48 + 4, a4);
      ((void (*)(void (***)(void), const char *, uint64_t))(**v10)[1])(*v10, "\":", 2);
      sub_20EB91A6C(v10, v48 + 7, 0, a4, a5, a6);
      goto LABEL_161;
    case 2:
      v20 = *(uint64_t **)(a2 + 8);
      v21 = *v20;
      v22 = v20[1];
      v23 = **result;
      if (v21 == v22)
      {
        v30 = (uint64_t (*)(void))v23[1];
        return (void (****)(void))v30();
      }
      if (a3)
      {
        v23[1]();
        v24 = (a6 + a5);
        v25 = v10 + 76;
        if (*((char *)v10 + 631) < 0)
        {
          v26 = (unint64_t)v10[77];
          if (v26 >= v24)
          {
LABEL_15:
            v27 = *(uint64_t **)(a2 + 8);
            v28 = *v27;
            if (*v27 != v27[1] - 16)
              goto LABEL_16;
            goto LABEL_104;
          }
        }
        else
        {
          v26 = *((unsigned __int8 *)v10 + 631);
          if (v24 <= v26)
            goto LABEL_15;
        }
        std::string::resize((std::string *)(v10 + 76), 2 * v26, 32);
        v73 = *(uint64_t **)(a2 + 8);
        v28 = *v73;
        if (*v73 != v73[1] - 16)
        {
          do
          {
LABEL_16:
            ((void (*)(void (***)(void)))(**v10)[1])(*v10);
            sub_20EB91A6C(v10, v28, 1, a4, a5, (a6 + a5));
            ((void (*)(void (***)(void), const char *, uint64_t))(**v10)[1])(*v10, ",\n", 2);
            v28 += 16;
          }
          while (v28 != *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) - 16);
        }
LABEL_104:
        v74 = v10 + 76;
        if (*((char *)v10 + 631) < 0)
          v74 = (_QWORD *)*v25;
        ((void (*)(void (***)(void), _QWORD *, _QWORD))(**v10)[1])(*v10, v74, (a6 + a5));
        sub_20EB91A6C(v10, *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) - 16, 1, a4, a5, (a6 + a5));
        ((void (*)(void (***)(void), uint64_t))***v10)(*v10, 10);
        if (*((char *)v10 + 631) < 0)
          v25 = (_QWORD *)*v25;
        ((void (*)(void (***)(void), _QWORD *, _QWORD))(**v10)[1])(*v10, v25, a6);
        goto LABEL_109;
      }
      (*v23)();
      v49 = *(uint64_t **)(a2 + 8);
      v50 = *v49;
      v51 = v10;
      if (*v49 != v49[1] - 16)
      {
        do
        {
          sub_20EB91A6C(v51, v50, 0, a4, a5, a6);
          ((void (*)(void (***)(void), uint64_t))***v10)(*v10, 44);
          v50 += 16;
          v51 = v10;
        }
        while (v50 != *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) - 16);
      }
      sub_20EB91A6C(v51, v50, 0, a4, a5, a6);
LABEL_109:
      v29 = (uint64_t (*)(void))***v10;
      return (void (****)(void))v29();
    case 3:
      (***result)();
      sub_20EB92A44((uint64_t)v10, *(uint64_t **)(a2 + 8), a4);
      v29 = (uint64_t (*)(void))***v10;
      return (void (****)(void))v29();
    case 4:
      v30 = (uint64_t (*)(void))(**result)[1];
      return (void (****)(void))v30();
    case 5:
      return (void (****)(void))sub_20EB9300C(result, *(_QWORD *)(a2 + 8));
    case 6:
      v31 = *(_QWORD *)(a2 + 8);
      if (!v31)
      {
        v29 = (uint64_t (*)(void))***result;
        return (void (****)(void))v29();
      }
      if (v31 < 0xA)
      {
        v32 = (uint64_t)result + 17;
        goto LABEL_125;
      }
      v52 = 4;
      v53 = *(_QWORD *)(a2 + 8);
      while (2)
      {
        if (v53 <= 0x63)
        {
          v52 -= 2;
        }
        else
        {
          if (v53 > 0x3E7)
          {
            if (v53 >> 4 < 0x271)
              break;
            v54 = v53 >> 5;
            v53 /= 0x2710uLL;
            v52 += 4;
            if (v54 <= 0xC34)
            {
              v52 -= 3;
              break;
            }
            continue;
          }
          --v52;
        }
        break;
      }
      v32 = (uint64_t)result + v52 + 16;
      if (v31 < 0x64)
      {
        v79 = *(_QWORD *)(a2 + 8);
      }
      else
      {
        do
        {
          v79 = v31 / 0x64;
          *(_WORD *)(v32 - 2) = *(_WORD *)&a00010203040506[2 * (v31 % 0x64) + 400];
          v32 -= 2;
          v80 = v31 >> 4;
          v31 /= 0x64uLL;
        }
        while (v80 > 0x270);
      }
      if (v79 >= 0xA)
      {
        *(_WORD *)(v32 - 2) = *(_WORD *)&a00010203040506[2 * v79 + 400];
        goto LABEL_126;
      }
      LOBYTE(v31) = v79;
LABEL_125:
      *(_BYTE *)(v32 - 1) = v31 + 48;
LABEL_126:
      v30 = (uint64_t (*)(void))(**result)[1];
      return (void (****)(void))v30();
    case 7:
      if ((*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
LABEL_26:
        v30 = (uint64_t (*)(void))(**result)[1];
      }
      else
      {
        sub_20EB93258((_BYTE *)result + 16, *(double *)(a2 + 8));
        v30 = (uint64_t (*)(void))(**v10)[1];
      }
      return (void (****)(void))v30();
    case 8:
      v33 = (**result)[1];
      if (!a3)
      {
        v33();
        v39 = *(_QWORD *)(a2 + 8);
        v41 = *(_BYTE **)v39;
        v40 = *(_BYTE **)(v39 + 8);
        if (v41 == v40)
          goto LABEL_130;
        if (v41 != v40 - 1)
        {
          while (1)
          {
            v42 = *v41;
            if (*v41)
              break;
            ((void (*)(void (***)(void), uint64_t))***v10)(*v10, 48);
LABEL_36:
            ((void (*)(void (***)(void), uint64_t))***v10)(*v10, 44);
            if (++v41 == (_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) - 1))
              goto LABEL_60;
          }
          if (v42 >= 0xA)
          {
            if (v42 < 0x64)
            {
              v44 = &a00010203040506[2 * v42];
              *((_BYTE *)v10 + 17) = v44[1];
              v45 = *v44;
              v43 = 2;
LABEL_44:
              *((_BYTE *)v10 + 16) = v45;
              ((void (*)(void (***)(void), void (****)(void), uint64_t))(**v10)[1])(*v10, v10 + 2, v43);
              goto LABEL_36;
            }
            *(_WORD *)((char *)v10 + 17) = *(_WORD *)&a00010203040506[2 * (*v41 % 0x64u)];
            LODWORD(v42) = (41 * v42) >> 12;
            v43 = 3;
          }
          else
          {
            v43 = 1;
          }
          v45 = v42 | 0x30;
          goto LABEL_44;
        }
LABEL_60:
        v55 = *v41;
        if (!*v41)
        {
          ((void (*)(void (***)(void), uint64_t))***v10)(*v10, 48);
          goto LABEL_130;
        }
        if (v55 >= 0xA)
        {
          if (v55 < 0x64)
          {
            v75 = &a00010203040506[2 * v55];
            *((_BYTE *)v10 + 17) = v75[1];
            v76 = *v75;
            v56 = 2;
LABEL_129:
            *((_BYTE *)v10 + 16) = v76;
            ((void (*)(void (***)(void), void (****)(void), uint64_t))(**v10)[1])(*v10, v10 + 2, v56);
LABEL_130:
            ((void (*)(void (***)(void), const char *, uint64_t))(**v10)[1])(*v10, "],\"subtype\":", 12);
            v81 = *(_QWORD *)(a2 + 8);
            if (!*(_BYTE *)(v81 + 25))
            {
              v30 = (uint64_t (*)(void))(**v10)[1];
              return (void (****)(void))v30();
            }
            v82 = *(unsigned __int8 *)(v81 + 24);
            if (!v82)
            {
              ((void (*)(void (***)(void), uint64_t))***v10)(*v10, 48);
              goto LABEL_161;
            }
            if (v82 >= 0xA)
            {
              if (v82 < 0x64)
              {
                v83 = &a00010203040506[2 * v82];
                *((_BYTE *)v10 + 17) = v83[1];
                v84 = *v83;
LABEL_154:
                *((_BYTE *)v10 + 16) = v84;
                v19 = (**v10)[1];
                goto LABEL_160;
              }
              *(_WORD *)((char *)v10 + 17) = *(_WORD *)&a00010203040506[2
                                                                      * (v82
                                                                                        - 100
                                                                                        * ((41 * v82) >> 12))];
              LODWORD(v82) = (41 * v82) >> 12;
            }
            v84 = v82 | 0x30;
            goto LABEL_154;
          }
          *(_WORD *)((char *)v10 + 17) = *(_WORD *)&a00010203040506[2 * (*v41 % 0x64u)];
          v56 = 3;
          LODWORD(v55) = (41 * v55) >> 12;
        }
        else
        {
          v56 = 1;
        }
        v76 = v55 | 0x30;
        goto LABEL_129;
      }
      v33();
      v34 = (a6 + a5);
      v35 = v10 + 76;
      if (*((char *)v10 + 631) < 0)
      {
        v36 = (unint64_t)v10[77];
        if (v36 >= v34)
        {
          v37 = (uint64_t (***)(void))*v10;
LABEL_65:
          v38 = (_QWORD *)*v35;
          goto LABEL_66;
        }
      }
      else
      {
        v36 = *((unsigned __int8 *)v10 + 631);
        if (v34 <= v36)
        {
          v37 = (uint64_t (***)(void))*v10;
          v38 = v10 + 76;
          goto LABEL_66;
        }
      }
      std::string::resize((std::string *)(v10 + 76), 2 * v36, 32);
      v37 = (uint64_t (***)(void))*v10;
      v38 = v10 + 76;
      if (*((char *)v10 + 631) < 0)
        goto LABEL_65;
LABEL_66:
      ((void (*)(uint64_t (***)(void), _QWORD *, unint64_t))(*v37)[1])(v37, v38, v34);
      ((void (*)(void (***)(void), const char *, uint64_t))(**v10)[1])(*v10, "\"bytes\": [", 10);
      v57 = *(_QWORD *)(a2 + 8);
      v59 = *(_BYTE **)v57;
      v58 = *(_BYTE **)(v57 + 8);
      if (v59 == v58)
        goto LABEL_142;
      if (v59 != v58 - 1)
      {
        while (1)
        {
          v60 = *v59;
          if (*v59)
            break;
          ((void (*)(void (***)(void), uint64_t))***v10)(*v10, 48);
LABEL_70:
          ((void (*)(void (***)(void), const char *, uint64_t))(**v10)[1])(*v10, ", ", 2);
          if (++v59 == (_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) - 1))
            goto LABEL_79;
        }
        if (v60 >= 0xA)
        {
          if (v60 < 0x64)
          {
            v62 = &a00010203040506[2 * v60];
            *((_BYTE *)v10 + 17) = v62[1];
            v63 = *v62;
            v61 = 2;
LABEL_78:
            *((_BYTE *)v10 + 16) = v63;
            ((void (*)(void (***)(void), void (****)(void), uint64_t))(**v10)[1])(*v10, v10 + 2, v61);
            goto LABEL_70;
          }
          *(_WORD *)((char *)v10 + 17) = *(_WORD *)&a00010203040506[2 * (*v59 % 0x64u)];
          LODWORD(v60) = (41 * v60) >> 12;
          v61 = 3;
        }
        else
        {
          v61 = 1;
        }
        v63 = v60 | 0x30;
        goto LABEL_78;
      }
LABEL_79:
      v64 = *v59;
      if (!*v59)
      {
        ((void (*)(void (***)(void), uint64_t))***v10)(*v10, 48);
        goto LABEL_142;
      }
      if (v64 < 0xA)
      {
        v65 = 1;
LABEL_140:
        v78 = v64 | 0x30;
        goto LABEL_141;
      }
      if (v64 >= 0x64)
      {
        *(_WORD *)((char *)v10 + 17) = *(_WORD *)&a00010203040506[2 * (*v59 % 0x64u)];
        v65 = 3;
        LODWORD(v64) = (41 * v64) >> 12;
        goto LABEL_140;
      }
      v77 = &a00010203040506[2 * v64];
      *((_BYTE *)v10 + 17) = v77[1];
      v78 = *v77;
      v65 = 2;
LABEL_141:
      *((_BYTE *)v10 + 16) = v78;
      ((void (*)(void (***)(void), void (****)(void), uint64_t))(**v10)[1])(*v10, v10 + 2, v65);
LABEL_142:
      ((void (*)(void (***)(void), const char *, uint64_t))(**v10)[1])(*v10, "],\n", 3);
      v85 = v10 + 76;
      if (*((char *)v10 + 631) < 0)
        v85 = (_QWORD *)*v35;
      ((void (*)(void (***)(void), _QWORD *, unint64_t))(**v10)[1])(*v10, v85, v34);
      ((void (*)(void (***)(void), const char *, uint64_t))(**v10)[1])(*v10, "\"subtype\": ", 11);
      v86 = *(_QWORD *)(a2 + 8);
      if (!*(_BYTE *)(v86 + 25))
      {
        v88 = (**v10)[1];
LABEL_158:
        v88();
        goto LABEL_159;
      }
      v87 = *(unsigned __int8 *)(v86 + 24);
      if (v87)
      {
        if (v87 >= 0xA)
        {
          if (v87 < 0x64)
          {
            v89 = &a00010203040506[2 * v87];
            *((_BYTE *)v10 + 17) = v89[1];
            v90 = *v89;
LABEL_157:
            *((_BYTE *)v10 + 16) = v90;
            v88 = (**v10)[1];
            goto LABEL_158;
          }
          *(_WORD *)((char *)v10 + 17) = *(_WORD *)&a00010203040506[2
                                                                  * (v87
                                                                                    - 100
                                                                                    * ((41 * v87) >> 12))];
          LODWORD(v87) = (41 * v87) >> 12;
        }
        v90 = v87 | 0x30;
        goto LABEL_157;
      }
      ((void (*)(void (***)(void), uint64_t))***v10)(*v10, 48);
LABEL_159:
      ((void (*)(void (***)(void), uint64_t))***v10)(*v10, 10);
      v19 = (**v10)[1];
LABEL_160:
      v19();
LABEL_161:
      v29 = (uint64_t (*)(void))***v10;
      return (void (****)(void))v29();
    case 9:
      v30 = (uint64_t (*)(void))(**result)[1];
      return (void (****)(void))v30();
    default:
      return result;
  }
}

uint64_t sub_20EB9294C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v5;

  if (*(char *)(a1 + 631) < 0)
  {
    operator delete(*(void **)(a1 + 608));
    v2 = *(std::__shared_weak_count **)(a1 + 8);
    if (!v2)
      return a1;
  }
  else
  {
    v2 = *(std::__shared_weak_count **)(a1 + 8);
    if (!v2)
      return a1;
  }
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EB929CC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C5338;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EB929DC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C5338;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EB92A0C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

void sub_20EB92A1C(uint64_t a1, std::string::value_type a2)
{
  std::string::push_back(*(std::string **)(a1 + 8), a2);
}

std::string *sub_20EB92A24(uint64_t a1, const std::string::value_type *a2, std::string::size_type a3)
{
  return std::string::append(*(std::string **)(a1 + 8), a2, a3);
}

void sub_20EB92A30()
{
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EB92A44(uint64_t result, uint64_t *a2, int a3)
{
  unsigned int v3;
  uint64_t v4;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  __int16 v19;
  int v20;
  char v21;
  char v22;
  char v23;
  int v24;
  char *v26;
  uint64_t (*v27)(void);
  int v28;
  void *exception;
  char *v30;
  std::string::size_type v31;
  std::string *v32;
  __int128 v33;
  uint64_t *v34;
  void *v35;
  std::string v36;
  std::string v37;
  std::string v38;
  __int128 v39;
  std::string::size_type v40;
  char __str[8];
  std::string::size_type v42;
  char v43;

  LOBYTE(v3) = *((char *)a2 + 23) < 0;
  v4 = *((unsigned __int8 *)a2 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = a2[1];
  if (!v4)
    return result;
  v7 = (_QWORD *)result;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = result + 90;
  do
  {
    if ((v3 & 1) != 0)
      v17 = (uint64_t *)*a2;
    else
      v17 = a2;
    v18 = *((unsigned __int8 *)v17 + v8);
    if (v12)
      v13 = *((_BYTE *)v17 + v8) & 0x3F | (v13 << 6);
    else
      v13 = (0xFFu >> byte_210315D1A[v18]) & v18;
    v12 = byte_210315D1A[16 * v12 + 256 + byte_210315D1A[v18]];
    if (v12 == 1)
    {
      v20 = *((_DWORD *)v7 + 158);
      if ((v20 - 1) < 2)
      {
        v8 -= v9 != 0;
        if (v20 != 1)
        {
          v12 = 0;
          v9 = 0;
          v11 = v10;
          goto LABEL_6;
        }
        v11 = v10 + 3;
        if (a3)
        {
          v21 = 102;
          *(_BYTE *)(v14 + v11) = 102;
          *(_WORD *)(v10 + v14 + 4) = 25702;
          v11 = v10 + 6;
          v22 = 117;
          v23 = 92;
        }
        else
        {
          v21 = -67;
          v22 = -65;
          v23 = -17;
        }
        *(_BYTE *)(v14 + v10) = v23;
        *(_BYTE *)(v14 + v10 + 1) = v22;
        *(_BYTE *)(v14 + v10 + 2) = v21;
        goto LABEL_48;
      }
      if (!v20)
      {
        v43 = 3;
        *(_DWORD *)__str = 0;
        snprintf(__str, 3uLL, "%.2X", v18);
        exception = __cxa_allocate_exception(0x20uLL);
        std::to_string(&v36, v8);
        sub_20E8B0848("invalid UTF-8 byte at index ", &v36, &v37);
        sub_20E8B07EC(": 0x", &v37, &v38);
        if (v43 >= 0)
          v30 = __str;
        else
          v30 = *(char **)__str;
        if (v43 >= 0)
          v31 = v43;
        else
          v31 = v42;
        v32 = std::string::append(&v38, v30, v31);
        v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
        v40 = v32->__r_.__value_.__r.__words[2];
        v39 = v33;
        v32->__r_.__value_.__l.__size_ = 0;
        v32->__r_.__value_.__r.__words[2] = 0;
        v32->__r_.__value_.__r.__words[0] = 0;
        sub_20EB085D0(316, (uint64_t)&v39, (uint64_t)exception);
        __cxa_throw(exception, (struct type_info *)&unk_24C9C4970, (void (*)(void *))sub_20EB08770);
      }
      v12 = 1;
    }
    else
    {
      if (!v12)
      {
        switch(v13)
        {
          case 8u:
            v19 = 25180;
            goto LABEL_47;
          case 9u:
            v19 = 29788;
            goto LABEL_47;
          case 0xAu:
            v19 = 28252;
            goto LABEL_47;
          case 0xBu:
          case 0xEu:
          case 0xFu:
          case 0x10u:
          case 0x11u:
          case 0x12u:
          case 0x13u:
          case 0x14u:
          case 0x15u:
          case 0x16u:
          case 0x17u:
          case 0x18u:
          case 0x19u:
          case 0x1Au:
          case 0x1Bu:
          case 0x1Cu:
          case 0x1Du:
          case 0x1Eu:
          case 0x1Fu:
          case 0x20u:
          case 0x21u:
            goto LABEL_33;
          case 0xCu:
            v19 = 26204;
            goto LABEL_47;
          case 0xDu:
            v19 = 29276;
            goto LABEL_47;
          case 0x22u:
            v19 = 8796;
            goto LABEL_47;
          default:
            if (v13 == 92)
            {
              v19 = 23644;
LABEL_47:
              *(_WORD *)(v14 + v11) = v19;
              v11 += 2;
            }
            else
            {
LABEL_33:
              if (v13 > 0x7E)
                v24 = a3;
              else
                v24 = 0;
              if (v13 >= 0x20 && v24 == 0)
              {
                *(_BYTE *)(v14 + v11++) = *((_BYTE *)v17 + v8);
              }
              else
              {
                v26 = (char *)(v14 + v11);
                if (HIWORD(v13))
                {
                  result = snprintf(v26, 0xDuLL, "\\u%04x\\u%04x", (unsigned __int16)((v13 >> 10) - 10304), v13 & 0x3FF | 0xDC00);
                  v11 += 12;
                }
                else
                {
                  result = snprintf(v26, 7uLL, "\\u%04x", v13);
                  v11 += 6;
                }
              }
            }
            break;
        }
LABEL_48:
        if ((unint64_t)(v11 - 500) <= 0xC)
        {
          result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v7 + 8))(*v7, v14, v11);
          v12 = 0;
          v11 = 0;
          v10 = 0;
          v9 = 0;
        }
        else
        {
          v12 = 0;
          v9 = 0;
          v10 = v11;
        }
        goto LABEL_6;
      }
      if ((a3 & 1) == 0)
        *(_BYTE *)(v14 + v11++) = *((_BYTE *)v17 + v8);
      ++v9;
    }
LABEL_6:
    ++v8;
    v15 = *((char *)a2 + 23);
    v3 = v15 >> 31;
    v16 = a2[1];
    if (v15 >= 0)
      v16 = *((unsigned __int8 *)a2 + 23);
  }
  while (v8 < v16);
  if (v12)
  {
    v28 = *((_DWORD *)v7 + 158);
    switch(v28)
    {
      case 1:
        (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v7 + 8))(*v7, v14, v10);
        v27 = *(uint64_t (**)(void))(*(_QWORD *)*v7 + 8);
        break;
      case 2:
        v27 = *(uint64_t (**)(void))(*(_QWORD *)*v7 + 8);
        break;
      case 0:
        v43 = 3;
        *(_DWORD *)__str = 0;
        v34 = (uint64_t *)*a2;
        if (v15 >= 0)
          v34 = a2;
        snprintf(__str, 3uLL, "%.2X", *((unsigned __int8 *)v34 + v16 - 1));
        v35 = __cxa_allocate_exception(0x20uLL);
        std::operator+<char>();
        sub_20EB085D0(316, (uint64_t)&v39, (uint64_t)v35);
        __cxa_throw(v35, (struct type_info *)&unk_24C9C4970, (void (*)(void *))sub_20EB08770);
      default:
        return result;
    }
    return v27();
  }
  if (v11)
  {
    v27 = *(uint64_t (**)(void))(*(_QWORD *)*v7 + 8);
    return v27();
  }
  return result;
}

void sub_20EB92F24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  void *v35;
  int v36;
  uint64_t v37;

  if (a35 < 0)
  {
    operator delete(__p);
    if ((v36 & 1) == 0)
      goto LABEL_7;
  }
  else if (!v36)
  {
LABEL_7:
    if (*(char *)(v37 - 81) < 0)
      operator delete(*(void **)(v37 - 104));
    _Unwind_Resume(exception_object);
  }
  __cxa_free_exception(v35);
  goto LABEL_7;
}

uint64_t sub_20EB9300C(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;
  _BYTE *v3;
  char *v5;
  unsigned int v6;
  unint64_t v7;
  BOOL v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  if (!a2)
    return (**(uint64_t (***)(_QWORD, uint64_t))*a1)(*a1, 48);
  v2 = a2;
  v3 = a1 + 2;
  if ((v2 & 0x8000000000000000) != 0)
  {
    *v3 = 45;
    v2 = -(uint64_t)v2;
    if (v2 >= 0xA)
    {
      v9 = 4;
      v10 = v2;
      while (v10 > 0x63)
      {
        if (v10 <= 0x3E7)
        {
          v5 = &v3[v9];
          if (v2 < 0x64)
            goto LABEL_34;
          goto LABEL_30;
        }
        if (v10 >> 4 < 0x271)
          goto LABEL_22;
        v9 += 4;
        v8 = v10 >= 0x186A0;
        v10 /= 0x2710uLL;
        if (!v8)
        {
          v9 -= 3;
LABEL_22:
          v5 = &v3[v9 + 1];
          if (v2 < 0x64)
            goto LABEL_34;
          goto LABEL_30;
        }
      }
      v6 = v9 - 1;
LABEL_29:
      v5 = &v3[v6];
      if (v2 < 0x64)
        goto LABEL_34;
      do
      {
LABEL_30:
        v11 = v2 / 0x64;
        *((_WORD *)v5 - 1) = *(_WORD *)&a00010203040506[2 * (v2 % 0x64) + 200];
        v5 -= 2;
        v12 = v2 >> 4;
        v2 /= 0x64uLL;
      }
      while (v12 > 0x270);
      if (v11 < 0xA)
        goto LABEL_35;
      goto LABEL_32;
    }
    v5 = (char *)a1 + 18;
  }
  else
  {
    if (v2 < 0xA)
    {
      *((_BYTE *)a1 + 16) = v2 + 48;
      return (*(uint64_t (**)(_QWORD, _BYTE *, uint64_t))(*(_QWORD *)*a1 + 8))(*a1, v3, 1);
    }
    v6 = 4;
    v7 = v2;
    while (1)
    {
      if (v7 <= 0x63)
      {
        v5 = &v3[v6 - 2];
        if (v2 >= 0x64)
          goto LABEL_30;
        goto LABEL_34;
      }
      if (v7 <= 0x3E7)
        break;
      if (v7 >> 4 < 0x271)
        goto LABEL_29;
      v6 += 4;
      v8 = v7 >= 0x186A0;
      v7 /= 0x2710uLL;
      if (!v8)
      {
        v5 = &v3[v6 - 3];
        if (v2 >= 0x64)
          goto LABEL_30;
        goto LABEL_34;
      }
    }
    v5 = &v3[v6 - 1];
    if (v2 >= 0x64)
      goto LABEL_30;
  }
LABEL_34:
  v11 = v2;
  if (v2 >= 0xA)
  {
LABEL_32:
    *((_WORD *)v5 - 1) = *(_WORD *)&a00010203040506[2 * v11 + 200];
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 8))(*a1);
  }
LABEL_35:
  *(v5 - 1) = v11 + 48;
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 8))(*a1);
}

uint64_t sub_20EB93258(_BYTE *a1, double a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  unsigned int v11;
  char v12;
  char v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;

  v2 = (uint64_t)a1;
  if ((*(_QWORD *)&a2 & 0x8000000000000000) != 0)
  {
    a2 = -a2;
    *a1 = 45;
    v2 = (uint64_t)(a1 + 1);
    if (a2 == 0.0)
      goto LABEL_3;
  }
  else if (a2 == 0.0)
  {
LABEL_3:
    *(_WORD *)v2 = 11824;
    result = v2 + 3;
    *(_BYTE *)(v2 + 2) = 48;
    return result;
  }
  v16 = 0;
  sub_20EB934C4(v2, (int *)&v16 + 1, &v16, a2);
  v4 = SHIDWORD(v16);
  v5 = (int)v16 + (uint64_t)SHIDWORD(v16);
  if ((v16 & 0x80000000) == 0 && (int)v5 <= 15)
  {
    memset((void *)(v2 + SHIDWORD(v16)), 48, (int)v16);
    *(_WORD *)(v2 + v5) = 12334;
    return v2 + v5 + 2;
  }
  if ((v5 - 16) >= 0xFFFFFFF1)
  {
    v7 = v5;
    v8 = (_BYTE *)(v2 + v5);
    memmove(v8 + 1, v8, SHIDWORD(v16) - v7);
    *v8 = 46;
    return v4 + v2 + 1;
  }
  if ((_DWORD)v5 == 0 || v5 >= 0xFFFFFFFD)
  {
    v6 = -(int)v5;
    memmove((void *)(v2 + v6 + 2), (const void *)v2, SHIDWORD(v16));
    *(_WORD *)v2 = 11824;
    memset((void *)(v2 + 2), 48, v6);
    return v2 + v4 + v6 + 2;
  }
  if (HIDWORD(v16) == 1)
  {
    v9 = 1;
  }
  else
  {
    memmove((void *)(v2 + 2), (const void *)(v2 + 1), SHIDWORD(v16) - 1);
    *(_BYTE *)(v2 + 1) = 46;
    v9 = v4 + 1;
  }
  v10 = (_BYTE *)(v2 + v9);
  *v10 = 101;
  v11 = v5 - 1;
  if ((int)v5 >= 1)
    v12 = 43;
  else
    v12 = 45;
  if ((int)v5 - 1 < 0)
    v11 = 1 - v5;
  v10[1] = v12;
  if (v11 > 9)
  {
    if (v11 > 0x63)
    {
      v10[2] = v11 / 0x64 + 48;
      v15 = v11 % 0x64;
      v10[3] = (v15 / 0xAu) | 0x30;
      v10[4] = (v15 % 0xAu) | 0x30;
      v14 = 2;
      return (uint64_t)&v10[v14 + 3];
    }
    v10[2] = v11 / 0xAu + 48;
    v13 = (v11 % 0xAu) | 0x30;
  }
  else
  {
    v10[2] = 48;
    v13 = v11 + 48;
  }
  v10[3] = v13;
  v14 = 1;
  return (uint64_t)&v10[v14 + 3];
}

uint64_t sub_20EB934C4(uint64_t a1, int *a2, _DWORD *a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  char v9;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  int v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  unsigned int v25;

  v4 = *(_QWORD *)&a4 & 0xFFFFFFFFFFFFFLL;
  if (!(*(_QWORD *)&a4 >> 52))
  {
    v5 = 2 * v4;
    v6 = (2 * (*(_QWORD *)&a4 & 0xFFFFFFFFFFFFFLL)) | 1;
    v7 = -1074;
    v8 = -1075;
LABEL_7:
    v10 = v5 - 1;
    v9 = v8;
    goto LABEL_8;
  }
  v7 = (*(_QWORD *)&a4 >> 52) - 1075;
  v5 = 2 * (v4 | 0x10000000000000);
  v6 = (2 * (*(_QWORD *)&a4 & 0xFFFFFFFFFFFFFLL | 0x10000000000000)) | 1;
  v8 = (*(_QWORD *)&a4 >> 52) - 1076;
  if (!(*(_QWORD *)&a4 >> 53) || v4)
  {
    v4 |= 0x10000000000000uLL;
    goto LABEL_7;
  }
  v9 = (*(_QWORD *)&a4 >> 52) - 53;
  v10 = 0x3FFFFFFFFFFFFFLL;
  v4 = 0x10000000000000;
LABEL_8:
  v11 = -v8;
  v12 = -4813693 - 78913 * v8;
  do
  {
    v13 = v6;
    v6 *= 2;
    ++v11;
    v12 += 78913;
  }
  while ((v6 & 0x8000000000000000) == 0);
  do
  {
    v14 = v4;
    v4 *= 2;
    v15 = --v7;
  }
  while ((v4 & 0x8000000000000000) == 0);
  v16 = v12 / 0x40000;
  if (v11 - 61 <= 0)
    v17 = v16;
  else
    v17 = v16 + 1;
  v18 = (char *)&unk_210316108 + 16 * ((int)((v17 + 307 + (((v17 + 307) >> 28) & 7)) << 16) >> 19);
  v19 = *(_QWORD *)v18;
  v20 = HIDWORD(*(_QWORD *)v18);
  v21 = *(_QWORD *)v18;
  v22 = v10 << (v9 + v11);
  v23 = v14 >> 31;
  v24 = v18 + 8;
  LODWORD(v18) = *((_DWORD *)v18 + 2);
  v25 = v6 & 0xFFFFFFFE;
  *a3 = -*((_DWORD *)v24 + 1);
  return sub_20EB936B4(a1, a2, a3, ((v21 * (unint64_t)HIDWORD(v22)) >> 32)+ v20 * (unint64_t)HIDWORD(v22)+ ((v20 * (unint64_t)v22) >> 32)+ ((((v19 * (unint64_t)v22) >> 32)+ (v20 * v22)+ (v21 * HIDWORD(v22))+ 0x80000000) >> 32)+ 1, ((_DWORD)v18 - v11 + 64), v20 * v23+ ((v21 * v23) >> 32)+ ((v20 * (unint64_t)(v4 & 0xFFFFFFFE)) >> 32)+ ((((v20 * (unint64_t)(v4 & 0xFFFFFFFE)) & 0xFFFFFFFE)+ ((v21 * (unint64_t)(v4 & 0xFFFFFFFE)) >> 32)+ (v21 * v23)+ 0x80000000) >> 32),
           ((_DWORD)v18 + v15 + 64),
           v21,
           v20 * (v13 >> 31)
         + ((v21 * (v13 >> 31)) >> 32)
         + ((v20 * (unint64_t)v25) >> 32)
         + ((((v20 * (unint64_t)v25) & 0xFFFFFFFE)
           + ((v21 * (unint64_t)v25) >> 32)
           + v21 * (v13 >> 31)
           + 0x80000000) >> 32)
         - 1,
           (int)v18 - v11 + 64);
}

uint64_t sub_20EB936B4(uint64_t result, int *a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, int a10)
{
  unint64_t v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;

  v10 = a9 - a4;
  v11 = a9 - a6;
  v12 = -a10;
  v13 = 1 << -(char)a10;
  v14 = a9 >> -(char)a10;
  v15 = (v13 - 1) & a9;
  if (v14 <= 0x3B9AC9FF)
  {
    if (v14 <= 0x5F5E0FF)
    {
      if (v14 <= 0x98967F)
      {
        if (v14 <= 0xF423F)
        {
          v18 = v14 >> 5;
          v19 = v14 >> 4;
          if (v14 <= 9)
            v20 = 1;
          else
            v20 = 10;
          if (v14 <= 9)
            v21 = 1;
          else
            v21 = 2;
          if (v14 <= 0x63)
            v22 = v20;
          else
            v22 = 100;
          if (v14 <= 0x63)
            v23 = v21;
          else
            v23 = 3;
          if (v14 <= 0x3E7)
            v24 = v22;
          else
            v24 = 1000;
          if (v14 <= 0x3E7)
            v25 = v23;
          else
            v25 = 4;
          if (v19 <= 0x270)
            v26 = v24;
          else
            v26 = 10000;
          if (v19 <= 0x270)
            v27 = v25;
          else
            v27 = 5;
          if (v18 > 0xC34)
            v16 = 100000;
          else
            v16 = v26;
          if (v18 <= 0xC34)
            v17 = v27;
          else
            v17 = 6;
        }
        else
        {
          v16 = 1000000;
          v17 = 7;
        }
      }
      else
      {
        v16 = 10000000;
        v17 = 8;
      }
    }
    else
    {
      v16 = 100000000;
      v17 = 9;
    }
  }
  else
  {
    v16 = 1000000000;
    v17 = 10;
  }
  v28 = -a6;
  v29 = a6 - a9;
  v30 = -a4;
  while (v17 > 0)
  {
    v31 = v14 / v16;
    v14 = v14 % v16;
    v32 = *a2;
    *a2 = v32 + 1;
    *(_BYTE *)(result + v32) = v31 + 48;
    --v17;
    v33 = (v14 << v12) + v15;
    if (v10 < v33)
    {
      v16 /= 0xAu;
    }
    else
    {
      *a3 += v17;
      v34 = (unint64_t)v16 << v12;
      if (v33 >= v11 || v10 - v33 < v34)
        return result;
      v36 = *a2 - 1;
      v37 = v15 + (v14 << v12) + v34;
      v38 = v30 - v37;
      v39 = a9;
      do
      {
        if (v37 >= v11 && v28 - v33 + v39 <= v29 + v37)
          break;
        --*(_BYTE *)(result + v36);
        if (v37 >= v11)
          break;
        v40 = v38 + v39;
        v39 -= v34;
        v37 += v34;
      }
      while (v40 >= v34);
    }
    if (v10 >= v33)
      return result;
  }
  v41 = 0;
  do
  {
    v42 = v10;
    v43 = v11;
    v44 = (10 * v15) >> v12;
    v15 = (10 * v15) & (v13 - 1);
    v45 = v44 + 48;
    v46 = *a2;
    *a2 = v46 + 1;
    *(_BYTE *)(result + v46) = v45;
    v10 = 10 * v42;
    v11 = 10 * v43;
    --v41;
  }
  while (10 * v42 < v15);
  *a3 += v41;
  if (v15 < v11 && 10 * v42 - v15 >= v13)
  {
    v47 = *a2 - 1;
    v48 = 10 * v43;
    v49 = -(uint64_t)v15;
    v50 = -10 * v43;
    v51 = v13 + v15;
    v52 = 10 * v42 - v13;
    do
    {
      if (v51 >= v11 && v48 + v49 <= v50 + v51)
        break;
      --*(_BYTE *)(result + v47);
      if (v51 >= v11)
        break;
      v53 = v52 + v49;
      v49 -= v13;
      v51 += v13;
    }
    while (v53 >= v13);
  }
  return result;
}

void sub_20EB93994(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20EB93F08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20EB93F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EB93F40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20EB93F98(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20EB9450C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20EB94530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EB94544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20EB9459C(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20EB9492C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EB94950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EB94964(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20EB94988(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t **v5;
  uint64_t **v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t **v10;
  uint64_t **v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t **v15;
  uint64_t **v16;
  int v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned __int8 *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  __darwin_time_t v33;
  uint64_t v34;
  uint64_t **v35;
  uint64_t **v36;
  int v37;
  uint64_t v38;
  uint64_t *tv_sec;
  __int128 *v40;
  __int128 *v41;
  char *v42;
  uint64_t **v43;
  uint64_t **v44;
  int v45;
  uint64_t v46;
  uint64_t *v47;
  int v48;
  void **v49;
  void *v50;
  unsigned __int8 v51;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  size_t v56;
  __darwin_time_t v57;
  uint64_t v58;
  uint64_t i;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  char v66;
  unsigned __int8 v67;
  uint64_t *v68;
  char v69[8];
  uint64_t *v70;
  unsigned __int8 v71;
  uint64_t *v72;
  unsigned __int8 v73;
  uint64_t *v74;
  unsigned __int8 v75;
  uint64_t *v76;
  char v77;
  void *v78[2];
  uint64_t v79;
  void (*v80)(void);
  char v81;
  unsigned __int8 *v82;
  void *v83;
  char *v84;
  uint64_t v85;
  __int128 v86;
  char v87;
  char v88;
  char v89;
  timespec v90;
  _BYTE __p[40];
  void *v92;
  __int128 v93;
  void *v94;
  __int128 v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;

  v103 = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v63 = a1[1];
  if (*a1 != v63)
  {
    do
    {
      v4 = *(_QWORD *)(v2 + 128);
      v75 = 6;
      v76 = (uint64_t *)v4;
      sub_20E9F6CBC((unint64_t *)(v2 + 48));
      v5 = sub_20EB9594C(a2, (const void **)__p);
      v6 = sub_20EB95AA0((uint64_t)v5, "size");
      v7 = *(unsigned __int8 *)v6;
      *(_BYTE *)v6 = v75;
      v75 = v7;
      v8 = (uint64_t)v6[1];
      v6[1] = v76;
      v76 = (uint64_t *)v8;
      if ((__p[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)__p);
        v7 = v75;
      }
      sub_20EB911C0((uint64_t *)&v76, v7);
      v9 = *(_QWORD *)(v2 + 120);
      v73 = 5;
      v74 = (uint64_t *)v9;
      sub_20E9F6CBC((unint64_t *)(v2 + 48));
      v10 = sub_20EB9594C(a2, (const void **)__p);
      v11 = sub_20EB95AA0((uint64_t)v10, "last_active_timestamp");
      v12 = *(unsigned __int8 *)v11;
      *(_BYTE *)v11 = v73;
      v73 = v12;
      v13 = (uint64_t)v11[1];
      v11[1] = v74;
      v74 = (uint64_t *)v13;
      if ((__p[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)__p);
        v12 = v73;
      }
      sub_20EB911C0((uint64_t *)&v74, v12);
      v14 = *(unsigned __int8 *)(v2 + 112);
      v71 = 4;
      v72 = (uint64_t *)v14;
      sub_20E9F6CBC((unint64_t *)(v2 + 48));
      v15 = sub_20EB9594C(a2, (const void **)__p);
      v16 = sub_20EB95AA0((uint64_t)v15, "has_location");
      v17 = *(unsigned __int8 *)v16;
      *(_BYTE *)v16 = v71;
      v71 = v17;
      v18 = (uint64_t)v16[1];
      v16[1] = v72;
      v72 = (uint64_t *)v18;
      if ((__p[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)__p);
        sub_20EB911C0((uint64_t *)&v72, v71);
        if (!*(_BYTE *)(v2 + 112))
          goto LABEL_106;
      }
      else
      {
        sub_20EB911C0((uint64_t *)&v72, v17);
        if (!*(_BYTE *)(v2 + 112))
          goto LABEL_106;
      }
      v19 = *(void **)(v2 + 64);
      *(_QWORD *)&__p[16] = *(_QWORD *)(v2 + 56);
      *(_QWORD *)__p = "latitude";
      *(_QWORD *)&__p[8] = 8;
      *(_QWORD *)&__p[24] = "longitude";
      *(_QWORD *)&__p[32] = 9;
      v92 = v19;
      *(_QWORD *)&v93 = "altitude";
      *((_QWORD *)&v93 + 1) = 8;
      v94 = *(void **)(v2 + 72);
      *(_QWORD *)&v95 = "horizontal_accuracy";
      *((_QWORD *)&v95 + 1) = 19;
      v96 = *(_QWORD *)(v2 + 80);
      *(_QWORD *)&v97 = "vertical_accuracy";
      *((_QWORD *)&v97 + 1) = 17;
      v98 = *(_QWORD *)(v2 + 88);
      *(_QWORD *)&v99 = "timestamp";
      *((_QWORD *)&v99 + 1) = 9;
      v100 = *(_QWORD *)(v2 + 96);
      *(_QWORD *)&v101 = "floor";
      *((_QWORD *)&v101 + 1) = 5;
      v102 = *(_QWORD *)(v2 + 104);
      v78[1] = (void *)0x300000002;
      v20 = operator new();
      *(_BYTE *)v20 = 0;
      *(_QWORD *)(v20 + 8) = 0;
      v79 = v20;
      v80 = (void (*)(void))sub_210204328;
      v81 = 1;
      v87 = 0;
      v88 = 0;
      v89 = 0;
      v84 = 0;
      v85 = 0;
      v83 = 0;
      LOBYTE(v86) = 0;
      v82 = (unsigned __int8 *)v20;
      v78[0] = &off_24C9C53E0;
      sub_2101FA8A4((uint64_t)v78);
      v21 = v82;
      if (*v82 > 1u)
      {
        if (!v87 || *((_QWORD *)&v86 + 1) != 7)
          goto LABEL_23;
      }
      else
      {
        v86 = *(_OWORD *)__p;
        if (!v87)
          v87 = 1;
        if (*(_QWORD *)&__p[8] != 7)
        {
LABEL_23:
          sub_2101FB428((uint64_t)v78, (double *)&__p[16]);
          v21 = v82;
          goto LABEL_24;
        }
      }
      if (*(_DWORD *)v86 != *(_DWORD *)"version" || *(_DWORD *)(v86 + 3) != *(_DWORD *)"sion")
        goto LABEL_23;
LABEL_24:
      if (*v21 > 1u)
      {
        if (!v87 || *((_QWORD *)&v86 + 1) != 7)
          goto LABEL_35;
      }
      else
      {
        v86 = *(_OWORD *)&__p[24];
        if (!v87)
          v87 = 1;
        if (*(_QWORD *)&__p[32] != 7)
        {
LABEL_35:
          sub_2101FB428((uint64_t)v78, (double *)&v92);
          v21 = v82;
          goto LABEL_36;
        }
      }
      if (*(_DWORD *)v86 != *(_DWORD *)"version" || *(_DWORD *)(v86 + 3) != *(_DWORD *)"sion")
        goto LABEL_35;
LABEL_36:
      if (*v21 > 1u)
      {
        if (!v87 || *((_QWORD *)&v86 + 1) != 7)
          goto LABEL_47;
      }
      else
      {
        v86 = v93;
        if (!v87)
          v87 = 1;
        if (*((_QWORD *)&v93 + 1) != 7)
        {
LABEL_47:
          sub_2101FB428((uint64_t)v78, (double *)&v94);
          v21 = v82;
          goto LABEL_48;
        }
      }
      if (*(_DWORD *)v86 != *(_DWORD *)"version" || *(_DWORD *)(v86 + 3) != *(_DWORD *)"sion")
        goto LABEL_47;
LABEL_48:
      if (*v21 > 1u)
      {
        if (!v87 || *((_QWORD *)&v86 + 1) != 7)
          goto LABEL_59;
      }
      else
      {
        v86 = v95;
        if (!v87)
          v87 = 1;
        if (*((_QWORD *)&v95 + 1) != 7)
        {
LABEL_59:
          sub_2101FB428((uint64_t)v78, (double *)&v96);
          v21 = v82;
          goto LABEL_60;
        }
      }
      if (*(_DWORD *)v86 != *(_DWORD *)"version" || *(_DWORD *)(v86 + 3) != *(_DWORD *)"sion")
        goto LABEL_59;
LABEL_60:
      if (*v21 > 1u)
      {
        if (!v87 || *((_QWORD *)&v86 + 1) != 7)
          goto LABEL_71;
      }
      else
      {
        v86 = v97;
        if (!v87)
          v87 = 1;
        if (*((_QWORD *)&v97 + 1) != 7)
        {
LABEL_71:
          sub_2101FB428((uint64_t)v78, (double *)&v98);
          v21 = v82;
          goto LABEL_72;
        }
      }
      if (*(_DWORD *)v86 != *(_DWORD *)"version" || *(_DWORD *)(v86 + 3) != *(_DWORD *)"sion")
        goto LABEL_71;
LABEL_72:
      if (*v21 > 1u)
      {
        if (!v87 || *((_QWORD *)&v86 + 1) != 7)
          goto LABEL_83;
      }
      else
      {
        v86 = v99;
        if (!v87)
          v87 = 1;
        if (*((_QWORD *)&v99 + 1) != 7)
        {
LABEL_83:
          sub_2101FB428((uint64_t)v78, (double *)&v100);
          v21 = v82;
          goto LABEL_84;
        }
      }
      if (*(_DWORD *)v86 != *(_DWORD *)"version" || *(_DWORD *)(v86 + 3) != *(_DWORD *)"sion")
        goto LABEL_83;
LABEL_84:
      if (*v21 > 1u || (v86 = v101, v87))
      {
        if (!BYTE4(v102))
          goto LABEL_95;
      }
      else
      {
        v87 = 1;
        if (!BYTE4(v102))
        {
LABEL_95:
          LOBYTE(v64) = 0;
          v65 = 0;
          v29 = (unsigned __int8 *)sub_2101FA67C((uint64_t)v78);
          goto LABEL_96;
        }
      }
      if (v87
        && *((_QWORD *)&v86 + 1) == 7
        && *(_DWORD *)v86 == *(_DWORD *)"version"
        && *(_DWORD *)(v86 + 3) == *(_DWORD *)"sion")
      {
        goto LABEL_97;
      }
      LOBYTE(v64) = 5;
      v65 = (int)v102;
      v29 = (unsigned __int8 *)sub_2101FA67C((uint64_t)v78);
LABEL_96:
      v30 = *v29;
      *v29 = v64;
      LOBYTE(v64) = v30;
      v31 = *((_QWORD *)v29 + 1);
      *((_QWORD *)v29 + 1) = v65;
      v65 = v31;
      sub_20EB911C0(&v65, v30);
LABEL_97:
      v82 = (unsigned __int8 *)*((_QWORD *)v84 - 1);
      v84 -= 8;
      if (v87)
        v87 = 0;
      v32 = v79;
      v33 = operator new();
      *(_BYTE *)v33 = *(_BYTE *)v32;
      *(_QWORD *)(v33 + 8) = *(_QWORD *)(v32 + 8);
      *(_BYTE *)v32 = 0;
      *(_QWORD *)(v32 + 8) = 0;
      v90.tv_sec = v33;
      v78[0] = &off_24CA1DB50;
      if (v83)
      {
        v84 = (char *)v83;
        operator delete(v83);
      }
      v34 = v79;
      v79 = 0;
      if (v34)
        v80();
      sub_20EB98380((uint64_t)v69, (unsigned __int8 *)v33);
      sub_20E9F6CBC((unint64_t *)(v2 + 48));
      v35 = sub_20EB9594C(a2, (const void **)v78);
      v36 = sub_20EB95AA0((uint64_t)v35, "location");
      v37 = *(unsigned __int8 *)v36;
      *(_BYTE *)v36 = v69[0];
      v69[0] = v37;
      v38 = (uint64_t)v36[1];
      v36[1] = v70;
      v70 = (uint64_t *)v38;
      if ((SHIBYTE(v79) & 0x80000000) == 0)
      {
        sub_20EB911C0((uint64_t *)&v70, v37);
        tv_sec = (uint64_t *)v90.tv_sec;
        if (!v90.tv_sec)
          goto LABEL_106;
LABEL_105:
        sub_20EB911C0(tv_sec + 1, *(unsigned __int8 *)tv_sec);
        MEMORY[0x212BC6398](tv_sec, 0x1022C40B06DCE69);
        goto LABEL_106;
      }
      operator delete(v78[0]);
      sub_20EB911C0((uint64_t *)&v70, v69[0]);
      tv_sec = (uint64_t *)v90.tv_sec;
      if (v90.tv_sec)
        goto LABEL_105;
LABEL_106:
      v40 = *(__int128 **)(v2 + 176);
      v41 = *(__int128 **)(v2 + 184);
      v68 = 0;
      v67 = 2;
      v42 = (char *)operator new(0x18uLL);
      *(_QWORD *)v42 = 0;
      *((_QWORD *)v42 + 1) = 0;
      *((_QWORD *)v42 + 2) = 0;
      sub_20EB988D0(v42, v40, v41, 0xAAAAAAAAAAAAAAABLL * (((char *)v41 - (char *)v40) >> 3));
      v68 = (uint64_t *)v42;
      sub_20E9F6CBC((unint64_t *)(v2 + 48));
      v43 = sub_20EB9594C(a2, (const void **)__p);
      v44 = sub_20EB95AA0((uint64_t)v43, "kf_Anchors");
      v45 = *(unsigned __int8 *)v44;
      *(_BYTE *)v44 = v67;
      v67 = v45;
      v46 = (uint64_t)v44[1];
      v44[1] = v68;
      v68 = (uint64_t *)v46;
      if ((__p[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)__p);
        v45 = v67;
      }
      sub_20EB911C0((uint64_t *)&v68, v45);
      v47 = sub_210219C18();
      v48 = *(_DWORD *)(v2 + 128);
      *(_DWORD *)&__p[24] = 0;
      sub_20EB98A18((uint64_t)&v64, (uint64_t)__p, v2 + 56);
      if (*(_DWORD *)&__p[24] == -1)
        sub_20E877AB8();
      v64 = &v90;
      ((void (*)(void **__return_ptr, void **, _BYTE *))off_24C9C5588[*(unsigned int *)&__p[24]])(v78, &v64, __p);
      if (*(_DWORD *)&__p[24] != -1)
        ((void (*)(void **, _BYTE *))off_24C9C5570[*(unsigned int *)&__p[24]])(&v64, __p);
      if (v79 >= 0)
        v49 = v78;
      else
        v49 = (void **)v78[0];
      *(_DWORD *)&__p[24] = 0;
      sub_20EB98F28((uint64_t)&v90, (uint64_t)__p, (const char **)(v2 + 176));
      if (*(_DWORD *)&__p[24] == -1)
        sub_20E877AB8();
      v90.tv_sec = (__darwin_time_t)&v77;
      ((void (*)(void **__return_ptr, timespec *, _BYTE *))off_24C9C5588[*(unsigned int *)&__p[24]])(&v64, &v90, __p);
      if (*(_DWORD *)&__p[24] != -1)
        ((void (*)(timespec *, _BYTE *))off_24C9C5570[*(unsigned int *)&__p[24]])(&v90, __p);
      if (v66 >= 0)
        v50 = &v64;
      else
        v50 = v64;
      v51 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
      if ((v51 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
      {
        __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DDD0);
      }
      if (!atomic_load(&qword_254A5A450))
        goto LABEL_141;
      v53 = *(_QWORD *)(v2 + 48);
      v54 = *(_QWORD *)(v2 + 120);
      *(_DWORD *)__p = 134219010;
      *(_QWORD *)&__p[4] = v53;
      *(_WORD *)&__p[12] = 1024;
      *(_DWORD *)&__p[14] = v48;
      *(_WORD *)&__p[18] = 2048;
      *(_QWORD *)&__p[20] = v54;
      *(_WORD *)&__p[28] = 2080;
      *(_QWORD *)&__p[30] = v49;
      *(_WORD *)&__p[38] = 2080;
      v92 = v50;
      v55 = (char *)_os_log_send_and_compose_impl();
      v56 = strlen(v55);
      v90.tv_sec = 0;
      pthread_threadid_np(0, (__uint64_t *)&v90);
      v57 = v90.tv_sec;
      timespec_get(&v90, 1);
      sub_210219E20(__p, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v47 + 1), (__int128 *)(v47 + 5), "PersMapInfo:SID:%llu, NS:%u, ATS:%llu, LOC:%s, KFS:%s", 0x35uLL, v55, v56, v57, &v90);
      std::mutex::lock(&stru_254A5A410);
      v58 = qword_254A5A458;
      for (i = unk_254A5A460; v58 != i; v58 += 40)
      {
        v60 = *(_QWORD *)(v58 + 32);
        if (!v60)
          sub_20E86D37C();
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v60 + 48))(v60, __p);
      }
      std::mutex::unlock(&stru_254A5A410);
      if (SHIBYTE(v100) < 0)
      {
        operator delete((void *)v99);
        if ((SHIBYTE(v98) & 0x80000000) == 0)
        {
LABEL_127:
          if ((_BYTE)v96)
            goto LABEL_133;
          goto LABEL_135;
        }
      }
      else if ((SHIBYTE(v98) & 0x80000000) == 0)
      {
        goto LABEL_127;
      }
      operator delete((void *)v97);
      if ((_BYTE)v96)
      {
LABEL_133:
        if (SHIBYTE(v95) < 0)
          operator delete(v94);
      }
LABEL_135:
      if (BYTE8(v93))
      {
        if (SBYTE7(v93) < 0)
          operator delete(*(void **)&__p[32]);
      }
      if ((__p[31] & 0x80000000) == 0)
      {
        if (!v55)
          goto LABEL_141;
LABEL_140:
        free(v55);
        goto LABEL_141;
      }
      operator delete(*(void **)&__p[8]);
      if (v55)
        goto LABEL_140;
LABEL_141:
      if (os_signpost_enabled((os_log_t)*v47))
      {
        v61 = *(_QWORD *)(v2 + 48);
        v62 = *(_QWORD *)(v2 + 120);
        *(_DWORD *)__p = 134219010;
        *(_QWORD *)&__p[4] = v61;
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = v48;
        *(_WORD *)&__p[18] = 2048;
        *(_QWORD *)&__p[20] = v62;
        *(_WORD *)&__p[28] = 2080;
        *(_QWORD *)&__p[30] = v49;
        *(_WORD *)&__p[38] = 2080;
        v92 = v50;
        _os_signpost_emit_unreliably_with_name_impl();
        if ((v66 & 0x80000000) == 0)
        {
LABEL_143:
          if (SHIBYTE(v79) < 0)
            goto LABEL_147;
          goto LABEL_3;
        }
      }
      else if ((v66 & 0x80000000) == 0)
      {
        goto LABEL_143;
      }
      operator delete(v64);
      if (SHIBYTE(v79) < 0)
LABEL_147:
        operator delete(v78[0]);
LABEL_3:
      v2 += 200;
    }
    while (v2 != v63);
  }
}

void sub_20EB956C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,unsigned __int8 a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  sub_20EB911C0(a19, a30);
  sub_2101FA570((uint64_t)&a44);
  _Unwind_Resume(a1);
}

void sub_20EB956E8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  _Unwind_Resume(a1);
}

uint64_t **sub_20EB9594C(uint64_t a1, const void **a2)
{
  uint64_t **v4;
  void *exception;
  char *v7;
  std::string v8;
  std::string v9;

  if (*(_BYTE *)a1)
  {
    if (*(_BYTE *)a1 != 1)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      v7 = (char *)sub_20EB98004((char *)a1);
      sub_20E8610C0(&v8, v7);
      sub_20E8B0848("cannot use operator[] with a string argument with ", &v8, &v9);
      sub_20EB085D0(305, (uint64_t)&v9, (uint64_t)exception);
      __cxa_throw(exception, (struct type_info *)&unk_24C9C4970, (void (*)(void *))sub_20EB08770);
    }
    v4 = *(uint64_t ***)(a1 + 8);
  }
  else
  {
    *(_BYTE *)a1 = 1;
    v4 = (uint64_t **)operator new(0x18uLL);
    v4[2] = 0;
    v4[1] = 0;
    *v4 = (uint64_t *)(v4 + 1);
    *(_QWORD *)(a1 + 8) = v4;
  }
  v9.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  return sub_20EB9802C(v4, a2, (uint64_t)&unk_2102DB95C, (__int128 **)&v9) + 7;
}

void sub_20EB95A40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

uint64_t **sub_20EB95AA0(uint64_t a1, const char *a2)
{
  uint64_t **v4;
  size_t v5;
  std::string::size_type v6;
  std::string *p_dst;
  uint64_t v8;
  uint64_t v9;
  uint64_t **v10;
  void *exception;
  char *v13;
  std::string v14;
  std::string __dst;

  if (*(_BYTE *)a1)
  {
    if (*(_BYTE *)a1 != 1)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      v13 = (char *)sub_20EB98004((char *)a1);
      sub_20E8610C0(&v14, v13);
      sub_20E8B0848("cannot use operator[] with a string argument with ", &v14, &__dst);
      sub_20EB085D0(305, (uint64_t)&__dst, (uint64_t)exception);
      __cxa_throw(exception, (struct type_info *)&unk_24C9C4970, (void (*)(void *))sub_20EB08770);
    }
    v4 = *(uint64_t ***)(a1 + 8);
  }
  else
  {
    *(_BYTE *)a1 = 1;
    v4 = (uint64_t **)operator new(0x18uLL);
    v4[2] = 0;
    v4[1] = 0;
    *v4 = (uint64_t *)(v4 + 1);
    *(_QWORD *)(a1 + 8) = v4;
  }
  v5 = strlen(a2);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    p_dst = (std::string *)operator new(v8 + 1);
    __dst.__r_.__value_.__l.__size_ = v6;
    __dst.__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_12;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5;
  p_dst = &__dst;
  if (v5)
LABEL_12:
    memcpy(p_dst, a2, v6);
  p_dst->__r_.__value_.__s.__data_[v6] = 0;
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
  v10 = sub_20EB98214(v4, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&unk_2102DB95C, &v14);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  return v10 + 7;
}

void sub_20EB95C38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EB95CB4(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  BOOL v14;
  _QWORD *v15;
  _QWORD *v16;
  __int128 v17;
  unsigned __int8 *v18;
  int v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v25;
  __int128 *v26;
  _QWORD *v27;
  _QWORD *v28;
  __int128 v29;
  unsigned __int8 *v30;
  int v31;
  _QWORD *v32;
  _QWORD *v34;
  _QWORD *v35;
  __int128 v36;
  unsigned __int8 *v37;
  int v38;
  _QWORD *v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unsigned __int8 **v45;
  uint64_t *v46;
  uint64_t **v47;
  uint64_t **v48;
  int v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t *v53;
  uint64_t *v54;
  char *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t *v59;
  uint64_t *v60;
  _QWORD *v61;
  void (*v62)(void);
  _QWORD *v63;
  unsigned __int8 v64;
  unsigned __int8 v65;
  uint64_t v67;
  char *v68;
  size_t v69;
  __uint64_t v70;
  uint64_t v71;
  uint64_t i;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  __int128 *v76;
  __int128 *j;
  uint64_t *v78;
  uint64_t v79;
  unsigned __int8 *v80;
  unsigned __int8 *v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  unsigned __int8 **v85;
  uint64_t *v86;
  unsigned __int8 **v87;
  uint64_t **v88;
  int v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t *v92;
  char *v93;
  uint64_t *v94;
  _QWORD *v95;
  _QWORD *v96;
  void (*v97)(void);
  unsigned __int8 v98;
  unsigned __int8 v99;
  char *v101;
  size_t v102;
  __uint64_t v103;
  uint64_t v104;
  uint64_t k;
  uint64_t v106;
  _QWORD *v108;
  _QWORD *v110;
  char *v111;
  char *v112;
  unsigned __int8 **v113;
  uint64_t *v114;
  unsigned __int8 **v115;
  uint64_t *v116;
  void *v117;
  __int128 v118;
  unsigned __int8 v119;
  uint64_t *v120;
  __uint64_t v121;
  __int128 v122;
  unsigned __int8 *v123;
  unsigned __int8 *v124;
  _QWORD *v125;
  _BYTE v126[24];
  void (*v127)(void);
  __int128 v128;
  void *__p;
  char *v130;
  void *v131;
  __int128 v132;
  unsigned __int8 v133;
  void *v134;
  char v135;
  void *v136;
  char v137;
  uint64_t v138;

  v138 = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)*a1;
  v108 = a1 + 1;
  if ((_QWORD *)*a1 == a1 + 1)
    goto LABEL_113;
  v3 = (uint64_t *)&v125;
  do
  {
    v4 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v2[6] - v2[5]) >> 3);
    v122 = 0uLL;
    v121 = 0;
    sub_20EB9706C((uint64_t)&v121, v4);
    v5 = v2[5];
    v6 = v2[6];
    v110 = v2;
    if (v5 != v6)
    {
      v7 = (__int128 *)(v5 + 96);
      do
      {
        *(_QWORD *)v126 = &off_24CA1DB50;
        *(_QWORD *)&v126[8] = 0x300000002;
        v10 = operator new();
        *(_BYTE *)v10 = 0;
        *(_QWORD *)(v10 + 8) = 0;
        *(_QWORD *)&v126[16] = v10;
        v127 = (void (*)(void))sub_210204328;
        LOBYTE(v128) = 1;
        v133 = 0;
        LOBYTE(v134) = 0;
        BYTE4(v134) = 0;
        v130 = 0;
        v131 = 0;
        __p = 0;
        LOBYTE(v132) = 0;
        *((_QWORD *)&v128 + 1) = v10;
        *(_QWORD *)v126 = &off_24C9C53E0;
        v11 = (char *)operator new(8uLL);
        *(_QWORD *)v11 = v10;
        v130 = v11 + 8;
        v131 = v11 + 8;
        __p = v11;
        v12 = (unsigned __int8 *)sub_2101FA67C((uint64_t)v126);
        *((_QWORD *)&v128 + 1) = v12;
        if (v133)
          v133 = 0;
        if (*v12 < 2u
          && (v13 = *((_QWORD *)v7 - 11),
              *(_QWORD *)&v132 = *((_QWORD *)v7 - 12),
              *((_QWORD *)&v132 + 1) = v13,
              v133 = 1,
              v13 == 7)
          && (*(_DWORD *)v132 == *(_DWORD *)"version" ? (v14 = *(_DWORD *)(v132 + 3) == *(_DWORD *)"sion") : (v14 = 0),
              v14))
        {
          if (*v12 > 1u)
          {
            v23 = (__int128 *)((char *)v7 - 40);
            v21 = 1;
          }
          else
          {
            v132 = *(__int128 *)((char *)v7 - 56);
            v21 = 1;
            v23 = (__int128 *)(v5 + 56);
            if (*((_QWORD *)&v132 + 1) != 7)
              goto LABEL_37;
          }
        }
        else
        {
          LOBYTE(v124) = 3;
          v15 = operator new(0x18uLL);
          v16 = v15;
          if (*((char *)v7 - 57) < 0)
          {
            sub_20E860C04(v15, *((void **)v7 - 10), *((_QWORD *)v7 - 9));
          }
          else
          {
            v17 = *(v7 - 5);
            v15[2] = *((_QWORD *)v7 - 8);
            *(_OWORD *)v15 = v17;
          }
          v125 = v16;
          v18 = (unsigned __int8 *)sub_2101FA67C((uint64_t)v126);
          v19 = *v18;
          *v18 = v124;
          LOBYTE(v124) = v19;
          v20 = (_QWORD *)*((_QWORD *)v18 + 1);
          *((_QWORD *)v18 + 1) = v125;
          v125 = v20;
          sub_20EB911C0(v3, v19);
          v12 = (unsigned __int8 *)*((_QWORD *)&v128 + 1);
          v21 = v133;
          if (**((_BYTE **)&v128 + 1) >= 2u)
          {
            if (!v133)
            {
              v23 = (__int128 *)((char *)v7 - 40);
              goto LABEL_37;
            }
          }
          else
          {
            v22 = *((_QWORD *)v7 - 6);
            *(_QWORD *)&v132 = *((_QWORD *)v7 - 7);
            *((_QWORD *)&v132 + 1) = v22;
            if (!v133)
            {
              v21 = 1;
              v133 = 1;
              v23 = (__int128 *)((char *)v7 - 40);
              if (v22 != 7)
                goto LABEL_37;
              goto LABEL_25;
            }
          }
          v23 = (__int128 *)(v5 + 56);
          if (*((_QWORD *)&v132 + 1) != 7)
            goto LABEL_37;
        }
LABEL_25:
        if (*(_DWORD *)v132 == *(_DWORD *)"version" && *(_DWORD *)(v132 + 3) == *(_DWORD *)"sion")
        {
          if (*v12 <= 1u)
            goto LABEL_31;
          goto LABEL_41;
        }
LABEL_37:
        LOBYTE(v124) = 3;
        v27 = operator new(0x18uLL);
        v28 = v27;
        if (*((char *)v23 + 23) < 0)
        {
          sub_20E860C04(v27, *(void **)v23, *((_QWORD *)v23 + 1));
        }
        else
        {
          v29 = *v23;
          v27[2] = *((_QWORD *)v23 + 2);
          *(_OWORD *)v27 = v29;
        }
        v125 = v28;
        v30 = (unsigned __int8 *)sub_2101FA67C((uint64_t)v126);
        v31 = *v30;
        *v30 = v124;
        LOBYTE(v124) = v31;
        v32 = (_QWORD *)*((_QWORD *)v30 + 1);
        *((_QWORD *)v30 + 1) = v125;
        v125 = v32;
        sub_20EB911C0(v3, v31);
        v21 = v133;
        if (**((_BYTE **)&v128 + 1) <= 1u)
        {
LABEL_31:
          v25 = *((_QWORD *)v7 - 1);
          *(_QWORD *)&v132 = *((_QWORD *)v7 - 2);
          *((_QWORD *)&v132 + 1) = v25;
          if (v21)
          {
            v26 = v7;
            if (*((_QWORD *)&v132 + 1) != 7)
              goto LABEL_47;
          }
          else
          {
            v133 = 1;
            v26 = v7;
            if (v25 != 7)
              goto LABEL_47;
          }
          goto LABEL_43;
        }
LABEL_41:
        v26 = v7;
        if (!v21)
          goto LABEL_47;
        v26 = (__int128 *)(v5 + 96);
        if (*((_QWORD *)&v132 + 1) != 7)
          goto LABEL_47;
LABEL_43:
        if (*(_DWORD *)v132 != *(_DWORD *)"version" || *(_DWORD *)(v132 + 3) != *(_DWORD *)"sion")
        {
LABEL_47:
          LOBYTE(v124) = 3;
          v34 = operator new(0x18uLL);
          v35 = v34;
          if (*((char *)v26 + 23) < 0)
          {
            sub_20E860C04(v34, *(void **)v26, *((_QWORD *)v26 + 1));
          }
          else
          {
            v36 = *v26;
            v34[2] = *((_QWORD *)v26 + 2);
            *(_OWORD *)v34 = v36;
          }
          v125 = v35;
          v37 = (unsigned __int8 *)sub_2101FA67C((uint64_t)v126);
          v38 = *v37;
          *v37 = v124;
          LOBYTE(v124) = v38;
          v39 = (_QWORD *)*((_QWORD *)v37 + 1);
          *((_QWORD *)v37 + 1) = v125;
          v125 = v39;
          sub_20EB911C0(v3, v38);
          *((_QWORD *)&v128 + 1) = *((_QWORD *)v130 - 1);
          v130 -= 8;
          if (!v133)
            goto LABEL_54;
          goto LABEL_53;
        }
        *((_QWORD *)&v128 + 1) = *((_QWORD *)v130 - 1);
        v130 -= 8;
LABEL_53:
        v133 = 0;
LABEL_54:
        v40 = *(unsigned __int8 **)&v126[16];
        v41 = (unsigned __int8 *)operator new();
        *v41 = *v40;
        *((_QWORD *)v41 + 1) = *((_QWORD *)v40 + 1);
        *v40 = 0;
        *((_QWORD *)v40 + 1) = 0;
        v123 = v41;
        *(_QWORD *)v126 = &off_24CA1DB50;
        if (__p)
        {
          v130 = (char *)__p;
          operator delete(__p);
        }
        v42 = *(_QWORD *)&v126[16];
        *(_QWORD *)&v126[16] = 0;
        if (v42)
          v127();
        v43 = (uint64_t *)v122;
        if ((unint64_t)v122 >= *((_QWORD *)&v122 + 1))
        {
          v8 = sub_20EB97DF4((uint64_t **)&v121, (uint64_t)v41);
        }
        else
        {
          v44 = operator new();
          *(_BYTE *)v44 = *v41;
          *(_QWORD *)(v44 + 8) = *((_QWORD *)v41 + 1);
          *v41 = 0;
          *((_QWORD *)v41 + 1) = 0;
          *v43 = v44;
          v8 = v43 + 1;
        }
        *(_QWORD *)&v122 = v8;
        sub_20EB911C0((uint64_t *)v41 + 1, *v41);
        MEMORY[0x212BC6398](v41, 0x1022C40B06DCE69);
        v5 += 120;
        v9 = (uint64_t)v7 + 24;
        v7 = (__int128 *)((char *)v7 + 120);
      }
      while (v9 != v6);
    }
    v45 = (unsigned __int8 **)v121;
    v117 = (void *)v121;
    v113 = (unsigned __int8 **)v122;
    v118 = v122;
    v120 = 0;
    v119 = 2;
    v46 = (uint64_t *)operator new(0x18uLL);
    *v46 = 0;
    v46[1] = 0;
    v46[2] = 0;
    sub_20EB990EC((uint64_t)v46, v45, v113, v113 - v45);
    v120 = v46;
    v114 = v110 + 4;
    sub_20E9F6CBC(v110 + 4);
    v47 = sub_20EB9594C(a2, (const void **)v126);
    v48 = sub_20EB95AA0((uint64_t)v47, "user_anchors");
    v49 = *(unsigned __int8 *)v48;
    *(_BYTE *)v48 = v119;
    v119 = v49;
    v50 = (uint64_t)v48[1];
    v48[1] = v120;
    v120 = (uint64_t *)v50;
    if ((v126[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)v126);
      sub_20EB911C0((uint64_t *)&v120, v119);
      v51 = v117;
      if (!v117)
        goto LABEL_73;
LABEL_66:
      v52 = (_QWORD *)v118;
      while (v52 != v51)
      {
        v54 = (uint64_t *)*--v52;
        v53 = v54;
        *v52 = 0;
        if (v54)
        {
          sub_20EB911C0(v53 + 1, *(unsigned __int8 *)v53);
          MEMORY[0x212BC6398](v53, 0x1022C40B06DCE69);
        }
      }
      operator delete(v51);
      v55 = (char *)v110[5];
      v111 = (char *)v110[6];
      if (v55 == v111)
        goto LABEL_74;
      while (1)
      {
LABEL_78:
        v59 = sub_210219C18();
        v60 = v3;
        v61 = v55 + 16;
        if (v55[39] < 0)
        {
          v61 = (_QWORD *)*v61;
          v62 = (void (*)(void))(v55 + 56);
          if ((v55[79] & 0x80000000) == 0)
          {
LABEL_80:
            v63 = v55 + 96;
            if (v55[119] < 0)
              goto LABEL_85;
            goto LABEL_81;
          }
        }
        else
        {
          v62 = (void (*)(void))(v55 + 56);
          if ((v55[79] & 0x80000000) == 0)
            goto LABEL_80;
        }
        v62 = *(void (**)(void))v62;
        v63 = v55 + 96;
        if (v55[119] < 0)
        {
LABEL_85:
          v63 = (_QWORD *)*v63;
          v65 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
          if ((v65 & 1) != 0)
            goto LABEL_86;
          goto LABEL_108;
        }
LABEL_81:
        v64 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
        if ((v64 & 1) != 0)
          goto LABEL_86;
LABEL_108:
        if (__cxa_guard_acquire(&qword_254A6DDD0))
        {
          __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DDD0);
        }
LABEL_86:
        if (!atomic_load(&qword_254A5A450))
          goto LABEL_104;
        v67 = *v114;
        *(_DWORD *)v126 = 134218754;
        *(_QWORD *)&v126[4] = v67;
        *(_WORD *)&v126[12] = 2080;
        *(_QWORD *)&v126[14] = v61;
        *(_WORD *)&v126[22] = 2080;
        v127 = v62;
        LOWORD(v128) = 2080;
        *(_QWORD *)((char *)&v128 + 2) = v63;
        v68 = (char *)_os_log_send_and_compose_impl();
        v69 = strlen(v68);
        v121 = 0;
        pthread_threadid_np(0, &v121);
        v70 = v121;
        timespec_get((timespec *)&v121, 1);
        sub_210219E20(v126, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v59 + 1), (__int128 *)(v59 + 5), "PersFoundAnchor:SID:%llu, AID:%s, KAID:%s, GID:%s", 0x31uLL, v68, v69, v70, &v121);
        std::mutex::lock(&stru_254A5A410);
        v71 = qword_254A5A458;
        for (i = unk_254A5A460; v71 != i; v71 += 40)
        {
          v73 = *(_QWORD *)(v71 + 32);
          if (!v73)
            sub_20E86D37C();
          (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v73 + 48))(v73, v126);
        }
        std::mutex::unlock(&stru_254A5A410);
        if (v137 < 0)
        {
          operator delete(v136);
          if ((v135 & 0x80000000) == 0)
          {
LABEL_92:
            if (v133)
              goto LABEL_96;
            goto LABEL_98;
          }
        }
        else if ((v135 & 0x80000000) == 0)
        {
          goto LABEL_92;
        }
        operator delete(v134);
        if (v133)
        {
LABEL_96:
          if (SHIBYTE(v132) < 0)
            operator delete(v131);
        }
LABEL_98:
        if ((_BYTE)v130 && SHIBYTE(__p) < 0)
          operator delete((void *)v128);
        if (SHIBYTE(v127) < 0)
        {
          operator delete(*(void **)&v126[8]);
          if (!v68)
            goto LABEL_104;
LABEL_103:
          free(v68);
          goto LABEL_104;
        }
        if (v68)
          goto LABEL_103;
LABEL_104:
        if (os_signpost_enabled((os_log_t)*v59))
        {
          v74 = *v114;
          *(_DWORD *)v126 = 134218754;
          *(_QWORD *)&v126[4] = v74;
          *(_WORD *)&v126[12] = 2080;
          *(_QWORD *)&v126[14] = v61;
          *(_WORD *)&v126[22] = 2080;
          v127 = v62;
          LOWORD(v128) = 2080;
          *(_QWORD *)((char *)&v128 + 2) = v63;
          _os_signpost_emit_unreliably_with_name_impl();
        }
        v55 += 120;
        v3 = v60;
        if (v55 == v111)
          goto LABEL_74;
      }
    }
    sub_20EB911C0((uint64_t *)&v120, v49);
    v51 = v117;
    if (v117)
      goto LABEL_66;
LABEL_73:
    v55 = (char *)v110[5];
    v111 = (char *)v110[6];
    if (v55 != v111)
      goto LABEL_78;
LABEL_74:
    v56 = v110;
    v57 = (_QWORD *)v110[1];
    if (v57)
    {
      do
      {
        v58 = v57;
        v57 = (_QWORD *)*v57;
      }
      while (v57);
    }
    else
    {
      do
      {
        v58 = (_QWORD *)v56[2];
        v14 = *v58 == (_QWORD)v56;
        v56 = v58;
      }
      while (!v14);
    }
    v2 = v58;
  }
  while (v58 != v108);
LABEL_113:
  v75 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(a1[4] - a1[3]) >> 3);
  v122 = 0uLL;
  v121 = 0;
  sub_20EB9706C((uint64_t)&v121, v75);
  v76 = (__int128 *)a1[3];
  for (j = (__int128 *)a1[4]; v76 != j; v76 = (__int128 *)((char *)v76 + 120))
  {
    *(_QWORD *)&v126[8] = 0x300000002;
    v79 = operator new();
    *(_BYTE *)v79 = 0;
    *(_QWORD *)(v79 + 8) = 0;
    *(_QWORD *)&v126[16] = v79;
    v127 = (void (*)(void))sub_210204328;
    LOBYTE(v128) = 1;
    v133 = 0;
    LOBYTE(v134) = 0;
    BYTE4(v134) = 0;
    v130 = 0;
    v131 = 0;
    __p = 0;
    LOBYTE(v132) = 0;
    *((_QWORD *)&v128 + 1) = v79;
    *(_QWORD *)v126 = &off_24C9C53E0;
    sub_2101FA8A4((uint64_t)v126);
    if (**((_BYTE **)&v128 + 1) <= 1u)
    {
      v132 = *v76;
      if (!v133)
        v133 = 1;
    }
    sub_2101FB61C((uint64_t)v126, (uint64_t)(v76 + 1));
    if (**((_BYTE **)&v128 + 1) <= 1u)
    {
      v132 = *(__int128 *)((char *)v76 + 40);
      if (!v133)
        v133 = 1;
    }
    sub_2101FB61C((uint64_t)v126, (uint64_t)v76 + 56);
    if (**((_BYTE **)&v128 + 1) <= 1u)
    {
      v132 = v76[5];
      if (!v133)
        v133 = 1;
    }
    sub_2101FB61C((uint64_t)v126, (uint64_t)(v76 + 6));
    *((_QWORD *)&v128 + 1) = *((_QWORD *)v130 - 1);
    v130 -= 8;
    if (v133)
      v133 = 0;
    v80 = *(unsigned __int8 **)&v126[16];
    v81 = (unsigned __int8 *)operator new();
    *v81 = *v80;
    *((_QWORD *)v81 + 1) = *((_QWORD *)v80 + 1);
    *v80 = 0;
    *((_QWORD *)v80 + 1) = 0;
    v124 = v81;
    *(_QWORD *)v126 = &off_24CA1DB50;
    if (__p)
    {
      v130 = (char *)__p;
      operator delete(__p);
    }
    v82 = *(_QWORD *)&v126[16];
    *(_QWORD *)&v126[16] = 0;
    if (v82)
      v127();
    v83 = (uint64_t *)v122;
    if ((unint64_t)v122 >= *((_QWORD *)&v122 + 1))
    {
      v78 = sub_20EB97DF4((uint64_t **)&v121, (uint64_t)v81);
    }
    else
    {
      v84 = operator new();
      *(_BYTE *)v84 = *v81;
      *(_QWORD *)(v84 + 8) = *((_QWORD *)v81 + 1);
      *v81 = 0;
      *((_QWORD *)v81 + 1) = 0;
      *v83 = v84;
      v78 = v83 + 1;
    }
    *(_QWORD *)&v122 = v78;
    sub_20EB911C0((uint64_t *)v81 + 1, *v81);
    MEMORY[0x212BC6398](v81, 0x1022C40B06DCE69);
  }
  v85 = (unsigned __int8 **)v121;
  v117 = (void *)v121;
  v115 = (unsigned __int8 **)v122;
  v118 = v122;
  v86 = (uint64_t *)operator new(0x18uLL);
  v87 = v115;
  *v86 = 0;
  v86[1] = 0;
  v86[2] = 0;
  sub_20EB990EC((uint64_t)v86, v85, v115, v115 - v85);
  v116 = v86;
  v88 = sub_20EB95AA0(a2, "disjoint_anchors");
  v89 = *(unsigned __int8 *)v88;
  *(_BYTE *)v88 = 2;
  v90 = (uint64_t)v88[1];
  v88[1] = v116;
  v116 = (uint64_t *)v90;
  sub_20EB911C0((uint64_t *)&v116, v89);
  if (v85)
  {
    while (v87 != v85)
    {
      v92 = (uint64_t *)*--v87;
      v91 = v92;
      *v87 = 0;
      if (v92)
      {
        sub_20EB911C0(v91 + 1, *(unsigned __int8 *)v91);
        MEMORY[0x212BC6398](v91, 0x1022C40B06DCE69);
      }
    }
    operator delete(v85);
  }
  v93 = (char *)a1[3];
  v112 = (char *)a1[4];
  while (v93 != v112)
  {
    v94 = sub_210219C18();
    v95 = v93 + 16;
    if (v93[39] < 0)
    {
      v95 = (_QWORD *)*v95;
      v96 = v93 + 56;
      if ((v93[79] & 0x80000000) == 0)
      {
LABEL_144:
        v97 = (void (*)(void))(v93 + 96);
        if (v93[119] < 0)
          goto LABEL_149;
        goto LABEL_145;
      }
    }
    else
    {
      v96 = v93 + 56;
      if ((v93[79] & 0x80000000) == 0)
        goto LABEL_144;
    }
    v96 = (_QWORD *)*v96;
    v97 = (void (*)(void))(v93 + 96);
    if (v93[119] < 0)
    {
LABEL_149:
      v97 = *(void (**)(void))v97;
      v99 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
      if ((v99 & 1) != 0)
        goto LABEL_150;
      goto LABEL_172;
    }
LABEL_145:
    v98 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
    if ((v98 & 1) != 0)
      goto LABEL_150;
LABEL_172:
    if (__cxa_guard_acquire(&qword_254A6DDD0))
    {
      __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DDD0);
    }
LABEL_150:
    if (!atomic_load(&qword_254A5A450))
      goto LABEL_168;
    *(_DWORD *)v126 = 136315650;
    *(_QWORD *)&v126[4] = v95;
    *(_WORD *)&v126[12] = 2080;
    *(_QWORD *)&v126[14] = v96;
    *(_WORD *)&v126[22] = 2080;
    v127 = v97;
    v101 = (char *)_os_log_send_and_compose_impl();
    v102 = strlen(v101);
    v121 = 0;
    pthread_threadid_np(0, &v121);
    v103 = v121;
    timespec_get((timespec *)&v121, 1);
    sub_210219E20(v126, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v94 + 1), (__int128 *)(v94 + 5), "PersDisjointAnchor:AID:%s, KAID:%s, GID:%s", 0x2AuLL, v101, v102, v103, &v121);
    std::mutex::lock(&stru_254A5A410);
    v104 = qword_254A5A458;
    for (k = unk_254A5A460; v104 != k; v104 += 40)
    {
      v106 = *(_QWORD *)(v104 + 32);
      if (!v106)
        sub_20E86D37C();
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v106 + 48))(v106, v126);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v137 < 0)
    {
      operator delete(v136);
      if ((v135 & 0x80000000) == 0)
      {
LABEL_156:
        if (v133)
          goto LABEL_160;
        goto LABEL_162;
      }
    }
    else if ((v135 & 0x80000000) == 0)
    {
      goto LABEL_156;
    }
    operator delete(v134);
    if (v133)
    {
LABEL_160:
      if (SHIBYTE(v132) < 0)
        operator delete(v131);
    }
LABEL_162:
    if ((_BYTE)v130 && SHIBYTE(__p) < 0)
      operator delete((void *)v128);
    if (SHIBYTE(v127) < 0)
    {
      operator delete(*(void **)&v126[8]);
      if (!v101)
        goto LABEL_168;
LABEL_167:
      free(v101);
      goto LABEL_168;
    }
    if (v101)
      goto LABEL_167;
LABEL_168:
    if (os_signpost_enabled((os_log_t)*v94))
    {
      *(_DWORD *)v126 = 136315650;
      *(_QWORD *)&v126[4] = v95;
      *(_WORD *)&v126[12] = 2080;
      *(_QWORD *)&v126[14] = v96;
      *(_WORD *)&v126[22] = 2080;
      v127 = v97;
      _os_signpost_emit_unreliably_with_name_impl();
    }
    v93 += 120;
  }
}

void sub_20EB96D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,unsigned __int8 a26,uint64_t a27,uint64_t a28)
{
  uint64_t *v28;

  sub_20EB911C0(v28, a26);
  sub_20EB96FE0(&a28);
  _Unwind_Resume(a1);
}

void sub_20EB96D64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  void *v28;

  operator delete(v28);
  sub_20EB96FE0(&a28);
  _Unwind_Resume(a1);
}

void sub_20EB96D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  sub_20EB96FE0(&a28);
  _Unwind_Resume(a1);
}

void sub_20EB96D94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  sub_20EB96FE0(&a33);
  _Unwind_Resume(a1);
}

void sub_20EB96DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t *a37)
{
  sub_2101F8734(&a37);
  sub_20EB96FE0(&a33);
  _Unwind_Resume(a1);
}

void sub_20EB96DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t *a37)
{
  sub_2101F8734(&a37);
  sub_20EB96FE0(&a33);
  _Unwind_Resume(a1);
}

void sub_20EB96DE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  void *v47;

  sub_20E96E218((uint64_t)&__p);
  if (v47)
  {
    free(v47);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_20EB96FE0(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;

  v2 = (_QWORD *)*a1;
  if (*a1)
  {
    v3 = (_QWORD *)a1[1];
    v4 = (_QWORD *)*a1;
    if (v3 != v2)
    {
      do
      {
        v6 = (uint64_t *)*--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
        {
          sub_20EB911C0(v5 + 1, *(unsigned __int8 *)v5);
          MEMORY[0x212BC6398](v5, 0x1022C40B06DCE69);
        }
      }
      while (v3 != v2);
      v4 = (_QWORD *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_20EB9706C(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t *v14;

  v2 = *(_QWORD **)a1;
  if (a2 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3)
  {
    if (a2 >> 61)
      sub_20E867F44();
    v4 = *(_BYTE **)(a1 + 8);
    v5 = 8 * a2;
    v6 = (char *)operator new(8 * a2);
    v7 = &v6[v4 - (_BYTE *)v2];
    v8 = &v6[v5];
    if (v4 == (_BYTE *)v2)
    {
      *(_QWORD *)a1 = v7;
      *(_QWORD *)(a1 + 8) = v7;
      *(_QWORD *)(a1 + 16) = v8;
    }
    else
    {
      v9 = 0;
      do
      {
        v10 = *(unsigned __int8 **)&v4[v9 - 8];
        v11 = operator new();
        sub_20EB98380(v11, v10);
        *(_QWORD *)&v7[v9 - 8] = v11;
        v9 -= 8;
      }
      while (&v4[v9] != (_BYTE *)v2);
      v2 = *(_QWORD **)a1;
      v12 = *(_QWORD **)(a1 + 8);
      *(_QWORD *)a1 = &v7[v9];
      *(_QWORD *)(a1 + 8) = v7;
      *(_QWORD *)(a1 + 16) = v8;
      while (v12 != v2)
      {
        v14 = (uint64_t *)*--v12;
        v13 = v14;
        *v12 = 0;
        if (v14)
        {
          sub_20EB911C0(v13 + 1, *(unsigned __int8 *)v13);
          MEMORY[0x212BC6398](v13, 0x1022C40B06DCE69);
        }
      }
    }
    if (v2)
      operator delete(v2);
  }
}

uint64_t sub_20EB971E8(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t *v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(uint64_t **)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
    {
      sub_20EB911C0(v4 + 1, *(unsigned __int8 *)v4);
      MEMORY[0x212BC6398](v4, 0x1022C40B06DCE69);
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20EB9726C(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CA1DB50;
  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    (*(void (**)(void))(a1 + 24))();
  return a1;
}

void sub_20EB972C0(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CA1DB50;
  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    (*(void (**)(void))(a1 + 24))();
  JUMPOUT(0x212BC6398);
}

void sub_20EB9732C(uint64_t a1, unsigned __int8 *a2)
{
  int *v2;
  int v3;
  int v4;
  BOOL v5;
  unsigned __int8 *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || ((v2 = *(int **)(a1 + 72), v3 = *v2, v4 = *(int *)((char *)v2 + 3), v3 == *(_DWORD *)"version")
      ? (v5 = v4 == *(_DWORD *)"sion")
      : (v5 = 0),
        !v5))
  {
    v9 = *a2;
    v6 = (unsigned __int8 *)sub_2101FA67C(a1);
    v7 = *v6;
    *v6 = 4;
    v8 = *((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 1) = v9;
    v9 = v8;
    sub_20EB911C0(&v9, v7);
  }
}

void sub_20EB973CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_20EB911C0(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20EB973E4(uint64_t a1, char *a2)
{
  int *v2;
  int v3;
  int v4;
  BOOL v5;
  unsigned __int8 *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || ((v2 = *(int **)(a1 + 72), v3 = *v2, v4 = *(int *)((char *)v2 + 3), v3 == *(_DWORD *)"version")
      ? (v5 = v4 == *(_DWORD *)"sion")
      : (v5 = 0),
        !v5))
  {
    v9 = *a2;
    v6 = (unsigned __int8 *)sub_2101FA67C(a1);
    v7 = *v6;
    *v6 = 5;
    v8 = *((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 1) = v9;
    v9 = v8;
    sub_20EB911C0(&v9, v7);
  }
}

void sub_20EB97484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_20EB911C0(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20EB9749C(uint64_t a1, __int16 *a2)
{
  int *v2;
  int v3;
  int v4;
  BOOL v5;
  unsigned __int8 *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || ((v2 = *(int **)(a1 + 72), v3 = *v2, v4 = *(int *)((char *)v2 + 3), v3 == *(_DWORD *)"version")
      ? (v5 = v4 == *(_DWORD *)"sion")
      : (v5 = 0),
        !v5))
  {
    v9 = *a2;
    v6 = (unsigned __int8 *)sub_2101FA67C(a1);
    v7 = *v6;
    *v6 = 5;
    v8 = *((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 1) = v9;
    v9 = v8;
    sub_20EB911C0(&v9, v7);
  }
}

void sub_20EB9753C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_20EB911C0(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20EB97554(uint64_t a1, int *a2)
{
  int *v2;
  int v3;
  int v4;
  BOOL v5;
  unsigned __int8 *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || ((v2 = *(int **)(a1 + 72), v3 = *v2, v4 = *(int *)((char *)v2 + 3), v3 == *(_DWORD *)"version")
      ? (v5 = v4 == *(_DWORD *)"sion")
      : (v5 = 0),
        !v5))
  {
    v9 = *a2;
    v6 = (unsigned __int8 *)sub_2101FA67C(a1);
    v7 = *v6;
    *v6 = 5;
    v8 = *((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 1) = v9;
    v9 = v8;
    sub_20EB911C0(&v9, v7);
  }
}

void sub_20EB975F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_20EB911C0(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20EB9760C(uint64_t a1, uint64_t *a2)
{
  int *v2;
  int v3;
  int v4;
  BOOL v5;
  unsigned __int8 *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || ((v2 = *(int **)(a1 + 72), v3 = *v2, v4 = *(int *)((char *)v2 + 3), v3 == *(_DWORD *)"version")
      ? (v5 = v4 == *(_DWORD *)"sion")
      : (v5 = 0),
        !v5))
  {
    v9 = *a2;
    v6 = (unsigned __int8 *)sub_2101FA67C(a1);
    v7 = *v6;
    *v6 = 5;
    v8 = *((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 1) = v9;
    v9 = v8;
    sub_20EB911C0(&v9, v7);
  }
}

void sub_20EB976AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_20EB911C0(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20EB976C4(uint64_t a1, uint64_t *a2)
{
  int *v2;
  int v3;
  int v4;
  BOOL v5;
  unsigned __int8 *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || ((v2 = *(int **)(a1 + 72), v3 = *v2, v4 = *(int *)((char *)v2 + 3), v3 == *(_DWORD *)"version")
      ? (v5 = v4 == *(_DWORD *)"sion")
      : (v5 = 0),
        !v5))
  {
    v9 = *a2;
    v6 = (unsigned __int8 *)sub_2101FA67C(a1);
    v7 = *v6;
    *v6 = 5;
    v8 = *((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 1) = v9;
    v9 = v8;
    sub_20EB911C0(&v9, v7);
  }
}

void sub_20EB97764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_20EB911C0(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20EB9777C(uint64_t a1, unsigned __int8 *a2)
{
  int *v2;
  int v3;
  int v4;
  BOOL v5;
  unsigned __int8 *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || ((v2 = *(int **)(a1 + 72), v3 = *v2, v4 = *(int *)((char *)v2 + 3), v3 == *(_DWORD *)"version")
      ? (v5 = v4 == *(_DWORD *)"sion")
      : (v5 = 0),
        !v5))
  {
    v9 = *a2;
    v6 = (unsigned __int8 *)sub_2101FA67C(a1);
    v7 = *v6;
    *v6 = 6;
    v8 = *((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 1) = v9;
    v9 = v8;
    sub_20EB911C0(&v9, v7);
  }
}

void sub_20EB9781C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_20EB911C0(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20EB97834(uint64_t a1, char *a2)
{
  int *v2;
  int v3;
  int v4;
  BOOL v5;
  unsigned __int8 *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || ((v2 = *(int **)(a1 + 72), v3 = *v2, v4 = *(int *)((char *)v2 + 3), v3 == *(_DWORD *)"version")
      ? (v5 = v4 == *(_DWORD *)"sion")
      : (v5 = 0),
        !v5))
  {
    v9 = *a2;
    v6 = (unsigned __int8 *)sub_2101FA67C(a1);
    v7 = *v6;
    *v6 = 5;
    v8 = *((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 1) = v9;
    v9 = v8;
    sub_20EB911C0(&v9, v7);
  }
}

void sub_20EB978D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_20EB911C0(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20EB978EC(uint64_t a1, unsigned __int16 *a2)
{
  int *v2;
  int v3;
  int v4;
  BOOL v5;
  unsigned __int8 *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || ((v2 = *(int **)(a1 + 72), v3 = *v2, v4 = *(int *)((char *)v2 + 3), v3 == *(_DWORD *)"version")
      ? (v5 = v4 == *(_DWORD *)"sion")
      : (v5 = 0),
        !v5))
  {
    v9 = *a2;
    v6 = (unsigned __int8 *)sub_2101FA67C(a1);
    v7 = *v6;
    *v6 = 6;
    v8 = *((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 1) = v9;
    v9 = v8;
    sub_20EB911C0(&v9, v7);
  }
}

void sub_20EB9798C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_20EB911C0(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20EB979A8(uint64_t a1, uint64_t *a2)
{
  int *v2;
  int v3;
  int v4;
  BOOL v5;
  unsigned __int8 *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || ((v2 = *(int **)(a1 + 72), v3 = *v2, v4 = *(int *)((char *)v2 + 3), v3 == *(_DWORD *)"version")
      ? (v5 = v4 == *(_DWORD *)"sion")
      : (v5 = 0),
        !v5))
  {
    v9 = *a2;
    v6 = (unsigned __int8 *)sub_2101FA67C(a1);
    v7 = *v6;
    *v6 = 6;
    v8 = *((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 1) = v9;
    v9 = v8;
    sub_20EB911C0(&v9, v7);
  }
}

void sub_20EB97A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_20EB911C0(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20EB97A60(uint64_t a1, uint64_t *a2)
{
  int *v2;
  int v3;
  int v4;
  BOOL v5;
  unsigned __int8 *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || ((v2 = *(int **)(a1 + 72), v3 = *v2, v4 = *(int *)((char *)v2 + 3), v3 == *(_DWORD *)"version")
      ? (v5 = v4 == *(_DWORD *)"sion")
      : (v5 = 0),
        !v5))
  {
    v9 = *a2;
    v6 = (unsigned __int8 *)sub_2101FA67C(a1);
    v7 = *v6;
    *v6 = 6;
    v8 = *((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 1) = v9;
    v9 = v8;
    sub_20EB911C0(&v9, v7);
  }
}

void sub_20EB97B00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_20EB911C0(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20EB97B18(uint64_t a1, float *a2)
{
  int *v2;
  int v3;
  int v4;
  BOOL v5;

  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || ((v2 = *(int **)(a1 + 72), v3 = *v2, v4 = *(int *)((char *)v2 + 3), v3 == *(_DWORD *)"version")
      ? (v5 = v4 == *(_DWORD *)"sion")
      : (v5 = 0),
        !v5))
  {
    sub_2101FB230(a1, a2);
  }
}

void sub_20EB97B5C(uint64_t a1, double *a2)
{
  int *v2;
  int v3;
  int v4;
  BOOL v5;

  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || ((v2 = *(int **)(a1 + 72), v3 = *v2, v4 = *(int *)((char *)v2 + 3), v3 == *(_DWORD *)"version")
      ? (v5 = v4 == *(_DWORD *)"sion")
      : (v5 = 0),
        !v5))
  {
    sub_2101FB428(a1, a2);
  }
}

void sub_20EB97BA4(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_2101FCF90(a1, v3);
}

void sub_20EB97BC8(uint64_t a1, size_t a2, size_t a3)
{
  size_t v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_2101FB72C(a1, v3);
}

void sub_20EB97BEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_2101FB99C(a1, (uint64_t)v3);
}

void sub_20EB97C10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_2101FBC0C(a1, (uint64_t)v3);
}

void sub_20EB97C34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_2101FBE7C(a1, (uint64_t)v3);
}

void sub_20EB97C58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_2101FC0EC(a1, (uint64_t)v3);
}

void sub_20EB97C7C(uint64_t a1, size_t a2, size_t a3)
{
  size_t v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_2101FAA20(a1, v3);
}

void sub_20EB97CA0(uint64_t a1, size_t a2, size_t a3)
{
  size_t v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_2101FB864(a1, v3);
}

void sub_20EB97CC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_2101FBAD4(a1, (uint64_t)v3);
}

void sub_20EB97CE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_2101FBD44(a1, (uint64_t)v3);
}

void sub_20EB97D0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_2101FBFB4(a1, (uint64_t)v3);
}

void sub_20EB97D30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_2101FC224(a1, (uint64_t)v3);
}

void sub_20EB97D54(uint64_t a1, float *a2, float *a3)
{
  float *v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_2101FC804(a1, v3);
}

void sub_20EB97D78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_2101FCC24(a1, v3);
}

void sub_20EB97D9C(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_2101FD0E0(a1, v3);
}

void sub_20EB97DC4(uint64_t a1, size_t *a2)
{
  size_t v2;
  size_t v3[2];

  v2 = a2[1];
  v3[0] = *a2;
  v3[1] = v2;
  sub_2101FAA20(a1, v3);
}

uint64_t *sub_20EB97DF4(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t *v9;
  char *v10;
  uint64_t v11;
  uint64_t *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t *v20;
  __int128 v22;

  v2 = a1[1] - *a1;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 61)
    sub_20E867F44();
  v6 = (char *)a1[2] - (char *)*a1;
  if (v6 >> 2 > v3)
    v3 = v6 >> 2;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8)
    v7 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v7 = v3;
  if (v7)
  {
    if (v7 >> 61)
      sub_20E877A38();
    v8 = (char *)operator new(8 * v7);
  }
  else
  {
    v8 = 0;
  }
  v9 = (uint64_t *)&v8[8 * v2];
  v10 = &v8[8 * v7];
  *((_QWORD *)&v22 + 1) = v10;
  v11 = operator new();
  *(_BYTE *)v11 = *(_BYTE *)a2;
  *(_QWORD *)(v11 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *v9 = v11;
  v12 = v9 + 1;
  v14 = (char *)*a1;
  v13 = (char *)a1[1];
  if (v13 == (char *)*a1)
  {
    *a1 = v9;
    a1[1] = v12;
    a1[2] = (uint64_t *)v10;
  }
  else
  {
    v15 = 0;
    do
    {
      v16 = *(unsigned __int8 **)&v13[v15 * 8 - 8];
      v17 = operator new();
      sub_20EB98380(v17, v16);
      v9[--v15] = v17;
    }
    while (&v13[v15 * 8] != v14);
    v13 = (char *)*a1;
    v18 = (char *)a1[1];
    *a1 = &v9[v15];
    *(_QWORD *)&v22 = v9 + 1;
    *(_OWORD *)(a1 + 1) = v22;
    v12 = v9 + 1;
    while (v18 != v13)
    {
      v20 = (uint64_t *)*((_QWORD *)v18 - 1);
      v18 -= 8;
      v19 = v20;
      *(_QWORD *)v18 = 0;
      if (v20)
      {
        sub_20EB911C0(v19 + 1, *(unsigned __int8 *)v19);
        MEMORY[0x212BC6398](v19, 0x1022C40B06DCE69);
      }
    }
  }
  if (v13)
    operator delete(v13);
  return v12;
}

void sub_20EB97FA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20EB971E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EB97FBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  va_list va;

  va_start(va, a2);
  MEMORY[0x212BC6398](v2, 0x1022C40B06DCE69);
  for (; v4; v4 += 8)
    sub_2101F8734((uint64_t **)(v3 + v4));
  sub_20EB971E8((uint64_t)va);
  _Unwind_Resume(a1);
}

const char *sub_20EB98004(char *a1)
{
  unint64_t v1;

  v1 = *a1;
  if (v1 > 9)
    return "number";
  else
    return off_24C9C5660[v1];
}

uint64_t **sub_20EB9802C(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  const void *v9;
  size_t v10;
  uint64_t **v11;
  _QWORD *v12;
  const void *v13;
  const void *v14;
  int v15;
  const void *v16;
  size_t v17;
  size_t v18;
  int v19;
  int v20;
  char *v21;
  _BYTE *v22;
  __int128 *v23;
  __int128 v24;
  uint64_t *v25;
  uint64_t *v26;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *((char *)a2 + 23);
    if (v8 >= 0)
      v9 = a2;
    else
      v9 = *a2;
    if (v8 >= 0)
      v10 = *((unsigned __int8 *)a2 + 23);
    else
      v10 = (size_t)a2[1];
    while (1)
    {
      v11 = (uint64_t **)v6;
      v14 = (const void *)v6[4];
      v12 = v6 + 4;
      v13 = v14;
      v15 = *((char *)v12 + 23);
      if (v15 >= 0)
        v16 = v12;
      else
        v16 = v13;
      if (v15 >= 0)
        v17 = *((unsigned __int8 *)v12 + 23);
      else
        v17 = v12[1];
      if (v17 >= v10)
        v18 = v10;
      else
        v18 = v17;
      v19 = memcmp(v9, v16, v18);
      if (v19)
      {
        if (v19 < 0)
          goto LABEL_8;
LABEL_22:
        v20 = memcmp(v16, v9, v18);
        if (v20)
        {
          if ((v20 & 0x80000000) == 0)
            return v11;
        }
        else if (v17 >= v10)
        {
          return v11;
        }
        v6 = v11[1];
        if (!v6)
        {
          v7 = v11 + 1;
          goto LABEL_29;
        }
      }
      else
      {
        if (v10 >= v17)
          goto LABEL_22;
LABEL_8:
        v6 = *v11;
        v7 = v11;
        if (!*v11)
          goto LABEL_29;
      }
    }
  }
  v11 = a1 + 1;
LABEL_29:
  v21 = (char *)operator new(0x48uLL);
  v22 = v21 + 32;
  v23 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_20E860C04(v22, *(void **)v23, *((_QWORD *)v23 + 1));
  }
  else
  {
    v24 = *v23;
    *((_QWORD *)v21 + 6) = *((_QWORD *)v23 + 2);
    *(_OWORD *)v22 = v24;
  }
  v21[56] = 0;
  *((_QWORD *)v21 + 8) = 0;
  *(_QWORD *)v21 = 0;
  *((_QWORD *)v21 + 1) = 0;
  *((_QWORD *)v21 + 2) = v11;
  *v7 = (uint64_t *)v21;
  v25 = (uint64_t *)**a1;
  v26 = (uint64_t *)v21;
  if (v25)
  {
    *a1 = v25;
    v26 = *v7;
  }
  sub_20E868578(a1[1], v26);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v21;
}

void sub_20EB981A8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EB981BC(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      sub_20EB911C0((uint64_t *)(v2 + 64), *(unsigned __int8 *)(v2 + 56));
      if (*(char *)(v2 + 55) < 0)
        operator delete(*(void **)(v2 + 32));
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t **sub_20EB98214(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  const void *v9;
  const void *v10;
  uint64_t **v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  const void *v17;
  size_t v18;
  int v19;
  int v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;

  v7 = a1 + 1;
  v6 = a1[1];
  if (!v6)
  {
    v11 = a1 + 1;
    goto LABEL_29;
  }
  v8 = *((char *)a2 + 23);
  if (v8 >= 0)
    v9 = a2;
  else
    v9 = *a2;
  if (v8 >= 0)
    v10 = (const void *)*((unsigned __int8 *)a2 + 23);
  else
    v10 = a2[1];
  do
  {
    while (1)
    {
      v11 = (uint64_t **)v6;
      v14 = v6[4];
      v12 = v6 + 4;
      v13 = (_QWORD *)v14;
      v15 = *((char *)v12 + 23);
      v16 = v15 >= 0 ? v12 : v13;
      v17 = v15 >= 0 ? (const void *)*((unsigned __int8 *)v12 + 23) : (const void *)v12[1];
      v18 = (size_t)(v17 >= v10 ? v10 : v17);
      v19 = memcmp(v9, v16, v18);
      if (v19)
        break;
      if (v10 >= v17)
        goto LABEL_22;
LABEL_8:
      v6 = *v11;
      v7 = v11;
      if (!*v11)
        goto LABEL_29;
    }
    if (v19 < 0)
      goto LABEL_8;
LABEL_22:
    v20 = memcmp(v16, v9, v18);
    if (v20)
    {
      if ((v20 & 0x80000000) == 0)
        return v11;
    }
    else if (v17 >= v10)
    {
      return v11;
    }
    v6 = v11[1];
  }
  while (v6);
  v7 = v11 + 1;
LABEL_29:
  v21 = (uint64_t *)v11;
  v11 = (uint64_t **)operator new(0x48uLL);
  v22 = *a4;
  v23 = (uint64_t *)*((_QWORD *)*a4 + 2);
  *((_OWORD *)v11 + 2) = **a4;
  v11[6] = v23;
  *v22 = 0;
  v22[1] = 0;
  v22[2] = 0;
  *((_BYTE *)v11 + 56) = 0;
  v11[8] = 0;
  *v11 = 0;
  v11[1] = 0;
  v11[2] = v21;
  *v7 = (uint64_t *)v11;
  v24 = (uint64_t *)**a1;
  v25 = (uint64_t *)v11;
  if (v24)
  {
    *a1 = v24;
    v25 = *v7;
  }
  sub_20E868578(a1[1], v25);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v11;
}

uint64_t sub_20EB98380(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  _QWORD *v4;
  __int128 *v5;
  _OWORD *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  size_t v11;
  char *v12;
  char *v13;
  const void ***v14;
  const void ***v15;
  const void **v16;
  const void **v17;
  const void **v18;
  const void ***v19;
  BOOL v20;
  uint64_t *v21;

  v3 = *a2;
  *(_BYTE *)a1 = v3;
  *(_QWORD *)(a1 + 8) = 0;
  switch(v3)
  {
    case 1:
      v14 = (const void ***)*((_QWORD *)a2 + 1);
      v4 = operator new(0x18uLL);
      v4[1] = 0;
      v4[2] = 0;
      *v4 = v4 + 1;
      v17 = *v14;
      v15 = v14 + 1;
      v16 = v17;
      if (v17 != (const void **)v15)
      {
        do
        {
          sub_20EB985A8((uint64_t **)v4, v4 + 1, v16 + 4, (uint64_t)(v16 + 4));
          v18 = (const void **)v16[1];
          if (v18)
          {
            do
            {
              v19 = (const void ***)v18;
              v18 = (const void **)*v18;
            }
            while (v18);
          }
          else
          {
            do
            {
              v19 = (const void ***)v16[2];
              v20 = *v19 == v16;
              v16 = (const void **)v19;
            }
            while (!v20);
          }
          v16 = (const void **)v19;
        }
        while (v19 != v15);
      }
      goto LABEL_21;
    case 2:
      v21 = (uint64_t *)*((_QWORD *)a2 + 1);
      v4 = operator new(0x18uLL);
      v4[1] = 0;
      v4[2] = 0;
      *v4 = 0;
      sub_20EB986D0(v4, *v21, v21[1], (v21[1] - *v21) >> 4);
      goto LABEL_21;
    case 3:
      v5 = (__int128 *)*((_QWORD *)a2 + 1);
      v6 = operator new(0x18uLL);
      v4 = v6;
      if (*((char *)v5 + 23) < 0)
      {
        sub_20E860C04(v6, *(void **)v5, *((_QWORD *)v5 + 1));
      }
      else
      {
        v7 = *v5;
        *((_QWORD *)v6 + 2) = *((_QWORD *)v5 + 2);
        *v6 = v7;
      }
      goto LABEL_21;
    case 4:
      v4 = (_QWORD *)a2[8];
      goto LABEL_21;
    case 5:
    case 6:
    case 7:
      v4 = (_QWORD *)*((_QWORD *)a2 + 1);
      goto LABEL_21;
    case 8:
      v8 = *((_QWORD *)a2 + 1);
      v4 = operator new(0x20uLL);
      v4[1] = 0;
      v4[2] = 0;
      *v4 = 0;
      v10 = *(const void **)v8;
      v9 = *(_QWORD *)(v8 + 8);
      v11 = v9 - *(_QWORD *)v8;
      if (v9 != *(_QWORD *)v8)
      {
        if ((v11 & 0x8000000000000000) != 0)
          sub_20E867F44();
        v12 = (char *)operator new(v9 - *(_QWORD *)v8);
        *v4 = v12;
        v13 = &v12[v11];
        v4[2] = &v12[v11];
        memcpy(v12, v10, v11);
        v4[1] = v13;
      }
      *((_WORD *)v4 + 12) = *(_WORD *)(v8 + 24);
LABEL_21:
      *(_QWORD *)(a1 + 8) = v4;
      break;
    default:
      return a1;
  }
  return a1;
}

void sub_20EB9853C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20EB98550(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20EB98564(_Unwind_Exception *a1)
{
  void **v1;
  void *v3;

  v3 = *v1;
  if (*v1)
  {
    v1[1] = v3;
    operator delete(v3);
    operator delete(v1);
    _Unwind_Resume(a1);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EB985A8(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v14;
  uint64_t *v15;

  v6 = sub_20E94F4BC(a1, a2, &v15, &v14, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = v6;
    v9 = (uint64_t *)operator new(0x48uLL);
    v7 = v9;
    if (*(char *)(a4 + 23) < 0)
    {
      sub_20E860C04((_BYTE *)v9 + 32, *(void **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      *((_OWORD *)v9 + 2) = *(_OWORD *)a4;
      v9[6] = *(_QWORD *)(a4 + 16);
    }
    sub_20EB98380(v7 + 7, a4 + 24);
    v10 = v15;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = (uint64_t)v10;
    *v8 = (uint64_t)v7;
    v11 = (uint64_t *)**a1;
    v12 = v7;
    if (v11)
    {
      *a1 = v11;
      v12 = (uint64_t *)*v8;
    }
    sub_20E868578(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void sub_20EB98698(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20EB981BC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20EB986AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 + 55) < 0)
    operator delete(*v3);
  sub_20EB981BC((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EB986D0(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  _QWORD *i;

  if (a4)
  {
    v5 = result;
    if (a4 >> 60)
      sub_20EB918C4();
    result = operator new(16 * a4);
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[2 * a4];
    for (i = result; a2 != a3; i += 2)
    {
      sub_20EB98380(result, a2);
      a2 += 16;
      result = i + 2;
    }
    v5[1] = result;
  }
  return result;
}

void sub_20EB9879C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20EB987D0(&a9);
  _Unwind_Resume(a1);
}

void sub_20EB987B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  uint64_t v11;
  uint64_t v12;

  sub_20EB9886C((uint64_t)&a11);
  *(_QWORD *)(v11 + 8) = v12;
  sub_20EB987D0(&a9);
  _Unwind_Resume(a1);
}

void ***sub_20EB987D0(void ***result)
{
  void ***v1;
  void **v2;
  uint64_t *v3;
  uint64_t *v4;
  void *v5;
  uint64_t *v6;
  uint64_t *v7;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (uint64_t *)**result;
    if (v3)
    {
      v4 = (uint64_t *)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        v6 = v4 - 1;
        do
        {
          v7 = v6 - 1;
          sub_20EB911C0(v6, *((unsigned __int8 *)v6 - 8));
          v6 -= 2;
        }
        while (v7 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20EB9886C(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v2 = **(uint64_t ***)(a1 + 16);
    v3 = **(uint64_t ***)(a1 + 8);
    if (v2 != v3)
    {
      v4 = v2 - 1;
      do
      {
        v5 = v4 - 1;
        sub_20EB911C0(v4, *((unsigned __int8 *)v4 - 8));
        v4 -= 2;
      }
      while (v5 != v3);
    }
  }
  return a1;
}

char *sub_20EB988D0(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  _QWORD *v5;
  char *v8;
  uint64_t v9;
  __int128 v10;
  char *v11;
  char *v12;

  if (a4)
  {
    v5 = result;
    if (a4 >> 60)
      sub_20EB918C4();
    result = (char *)operator new(16 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[16 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        v11 = &v8[v9];
        *((_QWORD *)v11 + 1) = 0;
        *v11 = 3;
        result = (char *)operator new(0x18uLL);
        v12 = result;
        if (*((char *)a2 + 23) < 0)
        {
          result = (char *)sub_20E860C04(result, *(void **)a2, *((_QWORD *)a2 + 1));
        }
        else
        {
          v10 = *a2;
          *((_QWORD *)result + 2) = *((_QWORD *)a2 + 2);
          *(_OWORD *)result = v10;
        }
        *((_QWORD *)v11 + 1) = v12;
        a2 = (__int128 *)((char *)a2 + 24);
        v9 += 16;
      }
      while (a2 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_20EB989C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20EB987D0(&a9);
  _Unwind_Resume(a1);
}

void sub_20EB989D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;

  operator delete(v11);
  for (; v12; v12 -= 16)
    sub_20EB911C0((uint64_t *)(v10 + v12 - 8), *(unsigned __int8 *)(v10 + v12 - 16));
  *(_QWORD *)(v9 + 8) = v10;
  sub_20EB987D0(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EB98A18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t *v16;
  const char *v17;
  char *v18;
  const char *v19;
  const char *v20;
  uint64_t **v21;

  if (*(_BYTE *)(a3 + 56))
  {
    v8 = a3;
    v9 = (const char *)(a3 + 8);
    v10 = a3 + 16;
    v11 = (const char *)(a3 + 24);
    v12 = (const char *)(a3 + 32);
    v13 = a3 + 40;
    v14 = a3 + 48;
    v16 = (uint64_t *)a2;
    v17 = "{";
    v18 = (char *)a2;
    v19 = "{";
    v20 = "{";
    v4 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v4 != -1)
    {
      v21 = &v16;
      ((void (*)(uint64_t ***, uint64_t))off_24C9C55A0[v4])(&v21, a2);
      LOBYTE(v16) = 1;
      v17 = (const char *)a2;
      v18 = &v15;
      sub_20EB98B48((uint64_t)&v8, (uint64_t)&v16);
      v16 = (uint64_t *)a2;
      v17 = "}";
      v18 = (char *)a2;
      v19 = "}";
      v20 = "}";
      v5 = *(unsigned int *)(a2 + 24);
      if ((_DWORD)v5 != -1)
      {
        v21 = &v16;
        return ((uint64_t (*)(uint64_t ***, uint64_t))off_24C9C55A0[v5])(&v21, a2);
      }
    }
LABEL_8:
    sub_20E877AB8();
  }
  v8 = a2;
  v9 = "nullopt";
  v10 = a2;
  v11 = "nullopt";
  v12 = "nullopt";
  v7 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v7 == -1)
    goto LABEL_8;
  v16 = &v8;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24C9C55B8[v7])(&v16, a2);
}

void sub_20EB98B48(uint64_t a1, uint64_t a2)
{
  double *v4;
  uint64_t v5;
  double *v6;
  uint64_t v7;
  double *v8;
  uint64_t v9;
  double *v10;
  uint64_t v11;
  double *v12;
  uint64_t v13;
  double *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  const char *v22;
  uint64_t *v23;

  v4 = *(double **)a1;
  if (!*(_BYTE *)a2)
  {
    v18 = *(_QWORD *)(a2 + 8);
    v19 = ",";
    v20 = v18;
    v21 = ",";
    v22 = ",";
    v5 = *(unsigned int *)(v18 + 24);
    if ((_DWORD)v5 == -1)
      goto LABEL_23;
    v23 = &v18;
    ((void (*)(uint64_t **))off_24C9C55A0[v5])(&v23);
  }
  *(_BYTE *)a2 = 0;
  sub_20E87876C((uint64_t)&v18, *(_QWORD *)(a2 + 8), v4);
  v6 = *(double **)(a1 + 8);
  if (!*(_BYTE *)a2)
  {
    v18 = *(_QWORD *)(a2 + 8);
    v19 = ",";
    v20 = v18;
    v21 = ",";
    v22 = ",";
    v7 = *(unsigned int *)(v18 + 24);
    if ((_DWORD)v7 == -1)
      goto LABEL_23;
    v23 = &v18;
    ((void (*)(uint64_t **))off_24C9C55A0[v7])(&v23);
  }
  *(_BYTE *)a2 = 0;
  sub_20E87876C((uint64_t)&v18, *(_QWORD *)(a2 + 8), v6);
  v8 = *(double **)(a1 + 16);
  if (!*(_BYTE *)a2)
  {
    v18 = *(_QWORD *)(a2 + 8);
    v19 = ",";
    v20 = v18;
    v21 = ",";
    v22 = ",";
    v9 = *(unsigned int *)(v18 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_23;
    v23 = &v18;
    ((void (*)(uint64_t **))off_24C9C55A0[v9])(&v23);
  }
  *(_BYTE *)a2 = 0;
  sub_20E87876C((uint64_t)&v18, *(_QWORD *)(a2 + 8), v8);
  v10 = *(double **)(a1 + 24);
  if (!*(_BYTE *)a2)
  {
    v18 = *(_QWORD *)(a2 + 8);
    v19 = ",";
    v20 = v18;
    v21 = ",";
    v22 = ",";
    v11 = *(unsigned int *)(v18 + 24);
    if ((_DWORD)v11 == -1)
      goto LABEL_23;
    v23 = &v18;
    ((void (*)(uint64_t **))off_24C9C55A0[v11])(&v23);
  }
  *(_BYTE *)a2 = 0;
  sub_20E87876C((uint64_t)&v18, *(_QWORD *)(a2 + 8), v10);
  v12 = *(double **)(a1 + 32);
  if (!*(_BYTE *)a2)
  {
    v18 = *(_QWORD *)(a2 + 8);
    v19 = ",";
    v20 = v18;
    v21 = ",";
    v22 = ",";
    v13 = *(unsigned int *)(v18 + 24);
    if ((_DWORD)v13 == -1)
      goto LABEL_23;
    v23 = &v18;
    ((void (*)(uint64_t **))off_24C9C55A0[v13])(&v23);
  }
  *(_BYTE *)a2 = 0;
  sub_20E87876C((uint64_t)&v18, *(_QWORD *)(a2 + 8), v12);
  v14 = *(double **)(a1 + 40);
  if (!*(_BYTE *)a2)
  {
    v18 = *(_QWORD *)(a2 + 8);
    v19 = ",";
    v20 = v18;
    v21 = ",";
    v22 = ",";
    v15 = *(unsigned int *)(v18 + 24);
    if ((_DWORD)v15 == -1)
      goto LABEL_23;
    v23 = &v18;
    ((void (*)(uint64_t **))off_24C9C55A0[v15])(&v23);
  }
  *(_BYTE *)a2 = 0;
  sub_20E87876C((uint64_t)&v18, *(_QWORD *)(a2 + 8), v14);
  v16 = *(_QWORD *)(a1 + 48);
  if (!*(_BYTE *)a2)
  {
    v18 = *(_QWORD *)(a2 + 8);
    v19 = ",";
    v20 = v18;
    v21 = ",";
    v22 = ",";
    v17 = *(unsigned int *)(v18 + 24);
    if ((_DWORD)v17 != -1)
    {
      v23 = &v18;
      ((void (*)(uint64_t **))off_24C9C55A0[v17])(&v23);
      goto LABEL_22;
    }
LABEL_23:
    sub_20E877AB8();
  }
LABEL_22:
  *(_BYTE *)a2 = 0;
  sub_20EB98E1C((uint64_t)&v18, *(_QWORD *)(a2 + 8), v16);
}

void sub_20EB98E1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  std::string v6;
  uint64_t *v7;
  uint64_t v8;
  std::string *v9;
  uint64_t v10;
  std::string *v11;
  std::string *v12;

  if (*(_BYTE *)(a3 + 4))
  {
    std::to_string(&v6, *(_DWORD *)a3);
    v8 = a2;
    v9 = &v6;
    v10 = a2;
    v11 = &v6;
    v12 = &v6;
    v4 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v4 == -1)
      sub_20E877AB8();
    v7 = &v8;
    ((void (*)(uint64_t **, uint64_t))off_24C9C5558[v4])(&v7, a2);
    if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v6.__r_.__value_.__l.__data_);
  }
  else
  {
    v8 = a2;
    v9 = (std::string *)"nullopt";
    v10 = a2;
    v11 = (std::string *)"nullopt";
    v12 = (std::string *)"nullopt";
    v5 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v5 == -1)
      sub_20E877AB8();
    v6.__r_.__value_.__r.__words[0] = (std::string::size_type)&v8;
    ((void (*)(std::string *, uint64_t))off_24C9C55B8[v5])(&v6, a2);
  }
}

void sub_20EB98F0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EB98F28(uint64_t a1, uint64_t a2, const char **a3)
{
  uint64_t v4;
  uint64_t v6;
  const char *v8;
  uint64_t v9;
  const char *v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  const char *v20;
  uint64_t *v21;

  if (a3[1] - *a3 <= 23)
  {
    v16 = a2;
    v17 = "{}";
    v18 = a2;
    v19 = "{}";
    v20 = "{}";
    v4 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v4 != -1)
    {
      v21 = &v16;
      return ((uint64_t (*)(uint64_t **, uint64_t))off_24C9C55D0[v4])(&v21, a2);
    }
LABEL_14:
    sub_20E877AB8();
  }
  v16 = a2;
  v17 = "{";
  v18 = a2;
  v19 = "{";
  v20 = "{";
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    goto LABEL_14;
  v21 = &v16;
  ((void (*)(uint64_t **, uint64_t))off_24C9C55A0[v6])(&v21, a2);
  v8 = *a3;
  v16 = a2;
  v17 = v8;
  v18 = a2;
  v19 = v8;
  v20 = v8;
  v9 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v9 == -1)
    goto LABEL_14;
  v21 = &v16;
  ((void (*)(uint64_t **, uint64_t))off_24C9C55E8[v9])(&v21, a2);
  v10 = a3[1];
  v11 = v8 + 24;
  if (v11 != v10)
  {
    v12 = v11;
    do
    {
      v16 = a2;
      v17 = ",";
      v18 = a2;
      v19 = ",";
      v20 = ",";
      v13 = *(unsigned int *)(a2 + 24);
      if ((_DWORD)v13 == -1)
        goto LABEL_14;
      v21 = &v16;
      ((void (*)(uint64_t **, uint64_t))off_24C9C55A0[v13])(&v21, a2);
      v16 = a2;
      v17 = v12;
      v18 = a2;
      v19 = v12;
      v20 = v11;
      v14 = *(unsigned int *)(a2 + 24);
      if ((_DWORD)v14 == -1)
        goto LABEL_14;
      v21 = &v16;
      ((void (*)(uint64_t **, uint64_t))off_24C9C55E8[v14])(&v21, a2);
      v12 += 24;
      v11 += 24;
    }
    while (v12 != v10);
  }
  v16 = a2;
  v17 = "}";
  v18 = a2;
  v19 = "}";
  v20 = "}";
  v15 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v15 == -1)
    goto LABEL_14;
  v21 = &v16;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24C9C55A0[v15])(&v21, a2);
}

uint64_t sub_20EB990EC(uint64_t result, unsigned __int8 **a2, unsigned __int8 **a3, unint64_t a4)
{
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;

  if (a4)
  {
    v5 = (_QWORD *)result;
    if (a4 >> 60)
      sub_20EB918C4();
    result = (uint64_t)operator new(16 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = result + 16 * a4;
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = sub_20EB98380(v8 + v9, *a2++);
        v9 += 16;
      }
      while (a2 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_20EB99194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20EB987D0(&a9);
  _Unwind_Resume(a1);
}

void sub_20EB991A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  for (; v11; v11 -= 16)
    sub_20EB911C0((uint64_t *)(v10 + v11 - 8), *(unsigned __int8 *)(v10 + v11 - 16));
  *(_QWORD *)(v9 + 8) = v10;
  sub_20EB987D0(&a9);
  _Unwind_Resume(a1);
}

void **sub_20EB991DC(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = *((_QWORD *)v3 - 2);
        *((_QWORD *)v3 - 2) = 0;
        if (v5)
        {
          v6 = sub_20E9545B0(v5);
          MEMORY[0x212BC6398](v6, 0x10A0C401749CDD1);
        }
        v3 -= 40;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_20EB99260(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  const char *v20;
  size_t v21;
  unsigned __int8 v22;
  unint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 *v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  unint64_t v38;
  unint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  __int128 v51;
  char *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  char *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  __int128 v66;
  int64x2_t v67;
  char *v68;
  void **v69;
  void **v70;
  void **v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  void **v75;
  void **i;
  uint64_t v77;
  uint64_t v78;
  int v79;
  size_t v80;
  const char *v81;
  unsigned __int8 v82;
  unsigned __int8 v83;
  const char *v84;
  size_t v85;
  _BYTE *v86;
  uint64_t v87;
  uint64_t v88;
  _BYTE *v89;
  NSObject *v90;
  uint64_t v91;
  uint64_t v92;
  size_t v93;
  std::__shared_weak_count_vtbl *v94;
  std::__shared_weak_count *v95;
  size_t v96;
  size_t v97;
  _BYTE *v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  _QWORD *v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *p_shared_owners;
  unint64_t v108;
  char *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t v115;
  unsigned __int8 v116;
  const char *v117;
  size_t v118;
  _BYTE *v119;
  uint64_t v120;
  uint64_t v121;
  _BYTE *v122;
  NSObject *v123;
  uint64_t v124;
  uint64_t v125;
  size_t v126;
  std::__shared_weak_count_vtbl *v127;
  std::__shared_weak_count *v128;
  size_t v129;
  size_t v130;
  _BYTE *v131;
  void *v132;
  int v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  const char *v142;
  uint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  uint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  const char *v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char v170;
  _QWORD *v171;
  uint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  char *v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  unint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  uint64_t v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  const char *v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  const char *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  int v220;
  int v221;
  char **v222;
  char *__s;
  char *__sa;
  const char *v225;
  uint64_t v226;
  uint64_t v229;
  _BYTE v230[24];
  unsigned __int8 v231;
  void *v232;
  int64x2_t v233;
  unint64_t v234;
  const char *v235;
  int v236;
  const char *v237;
  uint64_t v238;
  std::__shared_weak_count *v239;
  uint64_t v240;
  uint64_t v241;
  __int128 v242;
  std::__shared_weak_count *v243;
  char *v244;
  std::__shared_weak_count *v245;
  _BYTE __p[48];
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  uint64_t v252;
  __int128 v253;
  uint64_t v254;
  __int128 v255;
  __int128 v256;
  uint64_t v257;
  uint64_t v258[2];
  _BYTE v259[24];
  uint64_t v260;

  v260 = *MEMORY[0x24BDAC8D0];
  sub_20EF5F824(a1, a2, &v240);
  v4 = v240;
  v5 = v241;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v225 = (const char *)(a3 + 2);
  if (v5 != v4)
  {
    if (0xCCCCCCCCCCCCCCCDLL * ((v5 - v4) >> 5) > 0x147AE147AE147AELL)
      sub_20E867F44();
    *(_QWORD *)&__p[32] = a3 + 2;
    v6 = (char *)operator new(40 * ((v5 - v4) >> 5));
    *a3 = v6;
    a3[1] = v6;
    a3[2] = &v6[40 * ((v5 - v4) >> 5)];
    memset(__p, 0, 32);
    sub_20EB9C5B8((uint64_t)__p, 0);
    if (*(_QWORD *)__p)
      operator delete(*(void **)__p);
    v4 = v240;
    v5 = v241;
  }
  if (v4 != v5)
  {
    v222 = a3;
    v226 = v5;
    while (1)
    {
      if (!*(_BYTE *)(v4 + 152))
      {
        sub_20EB9AF50(v258);
        if (**(int **)(v258[0] + 56) <= 5)
        {
          v15 = *(unsigned __int8 *)(v258[0] + 72);
          v16 = sub_20E8C31DC(v258[0], "OSLogSurrogateAppender", 1, 0);
          v17 = v16;
          if (v15 || v16 != 0)
          {
            v232 = v258;
            *(std::chrono::steady_clock::time_point *)v233.i8 = std::chrono::steady_clock::now();
            v233.u64[1] = std::chrono::system_clock::now().__d_.__rep_;
            LODWORD(v234) = 5;
            v235 = "unknown file";
            v236 = 58;
            v237 = "unknown function";
            v238 = 0;
            v239 = 0;
            __s = (char *)v4;
            if (*(char *)(v4 + 23) < 0)
              __s = *(char **)v4;
            v220 = v15;
            v19 = *(_QWORD *)v232;
            v20 = (const char *)(*(_QWORD *)v232 + 16);
            v216 = v20;
            v218 = *(_QWORD *)v232;
            if (*(char *)(*(_QWORD *)v232 + 39) < 0)
            {
              v20 = *(const char **)(v19 + 16);
              v21 = *(_QWORD *)(v19 + 24);
              v83 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v83 & 1) == 0)
              {
LABEL_332:
                if (__cxa_guard_acquire(&qword_254A4A510))
                {
                  sub_20E9E46F8((uint64_t)&v242);
                  sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v242);
                  if ((_BYTE)v244 && SHIBYTE(v243) < 0)
                    operator delete((void *)v242);
                  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A4A510);
                }
              }
            }
            else
            {
              v21 = *(unsigned __int8 *)(*(_QWORD *)v232 + 39);
              v22 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v22 & 1) == 0)
                goto LABEL_332;
            }
            if (byte_254A4A4F8[23] >= 0)
              v84 = byte_254A4A4F8;
            else
              v84 = *(const char **)byte_254A4A4F8;
            if (byte_254A4A4F8[23] >= 0)
              v85 = byte_254A4A4F8[23];
            else
              v85 = *(_QWORD *)&byte_254A4A4F8[8];
            *(_QWORD *)__p = os_log_create(v84, v20);
            if (v85 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v85 >= 0x17)
            {
              v87 = (v85 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v85 | 7) != 0x17)
                v87 = v85 | 7;
              v88 = v87 + 1;
              v86 = operator new(v87 + 1);
              *(_QWORD *)&__p[16] = v85;
              *(_QWORD *)&__p[24] = v88 | 0x8000000000000000;
              *(_QWORD *)&__p[8] = v86;
            }
            else
            {
              __p[31] = v85;
              v86 = &__p[8];
              if (!v85)
              {
LABEL_117:
                v86[v85] = 0;
                __p[32] = 1;
                if (v21 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                v5 = v226;
                if (v21 >= 0x17)
                {
                  v91 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v21 | 7) != 0x17)
                    v91 = v21 | 7;
                  v92 = v91 + 1;
                  v89 = operator new(v91 + 1);
                  *(_QWORD *)&v247 = v21;
                  *((_QWORD *)&v247 + 1) = v92 | 0x8000000000000000;
                  *(_QWORD *)&__p[40] = v89;
                }
                else
                {
                  HIBYTE(v247) = v21;
                  v89 = &__p[40];
                  if (!v21)
                  {
                    __p[40] = 0;
                    LOBYTE(v248) = 1;
                    v90 = *(NSObject **)__p;
                    if ((SHIBYTE(v247) & 0x80000000) == 0)
                      goto LABEL_121;
LABEL_127:
                    operator delete(*(void **)&__p[40]);
                    a3 = v222;
                    if (__p[32])
                      goto LABEL_128;
                    goto LABEL_130;
                  }
                }
                memmove(v89, v20, v21);
                v89[v21] = 0;
                LOBYTE(v248) = 1;
                v90 = *(NSObject **)__p;
                if (SHIBYTE(v247) < 0)
                  goto LABEL_127;
LABEL_121:
                a3 = v222;
                if (__p[32])
                {
LABEL_128:
                  if ((__p[31] & 0x80000000) != 0)
                    operator delete(*(void **)&__p[8]);
                }
LABEL_130:
                if (*(_QWORD *)__p)
                  os_release(*(void **)__p);
                if (v17 && *(_QWORD *)(v17 + 24))
                {
                  v93 = _os_log_pack_size();
                  v94 = (std::__shared_weak_count_vtbl *)operator new(v93, (std::align_val_t)8uLL);
                  v95 = (std::__shared_weak_count *)operator new();
                  v95->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                  v95->__shared_owners_ = 0;
                  v95->__shared_weak_owners_ = 0;
                  v95[1].__vftable = v94;
                  *(_QWORD *)&v242 = v94;
                  *((_QWORD *)&v242 + 1) = v94;
                  v243 = v95;
                  v244 = 0;
                  v245 = 0;
                  v96 = strlen(__s);
                  if (v96 > 0x7FFFFFFFFFFFFFF7)
                    sub_20E860B7C();
                  v97 = v96;
                  if (v96 >= 0x17)
                  {
                    v100 = (v96 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v96 | 7) != 0x17)
                      v100 = v96 | 7;
                    v101 = v100 + 1;
                    v98 = operator new(v100 + 1);
                    *(_QWORD *)&v230[8] = v97;
                    *(_QWORD *)&v230[16] = v101 | 0x8000000000000000;
                    *(_QWORD *)v230 = v98;
                  }
                  else
                  {
                    v230[23] = v96;
                    v98 = v230;
                    if (!v96)
                      goto LABEL_145;
                  }
                  memcpy(v98, __s, v97);
LABEL_145:
                  v98[v97] = 0;
                  v102 = *(_QWORD *)v230;
                  *(_QWORD *)v259 = *(_QWORD *)&v230[8];
                  *(_QWORD *)&v259[7] = *(_QWORD *)&v230[15];
                  v103 = v230[23];
                  v104 = operator new(0x38uLL);
                  v104[1] = 0;
                  v104[2] = 0;
                  v104[3] = off_24C9ABC20;
                  *v104 = &off_24C9ABBD0;
                  v105 = *(_QWORD *)v259;
                  v104[4] = v102;
                  v104[5] = v105;
                  *(_QWORD *)((char *)v104 + 47) = *(_QWORD *)&v259[7];
                  *((_BYTE *)v104 + 55) = v103;
                  *(_QWORD *)v259 = 0;
                  *(_QWORD *)&v259[7] = 0;
                  v106 = v245;
                  v244 = (char *)(v104 + 3);
                  v245 = (std::__shared_weak_count *)v104;
                  if (v106)
                  {
                    p_shared_owners = (unint64_t *)&v106->__shared_owners_;
                    do
                      v108 = __ldaxr(p_shared_owners);
                    while (__stlxr(v108 - 1, p_shared_owners));
                    if (!v108)
                    {
                      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
                      std::__shared_weak_count::__release_weak(v106);
                    }
                  }
                  *(_OWORD *)__p = v242;
                  v109 = v244;
                  *(_QWORD *)&__p[16] = v243;
                  if (v243)
                  {
                    v110 = (unint64_t *)&v243->__shared_owners_;
                    do
                      v111 = __ldxr(v110);
                    while (__stxr(v111 + 1, v110));
                  }
                  v112 = v245;
                  *(_QWORD *)&__p[24] = v109;
                  *(_QWORD *)&__p[32] = v245;
                  if (v245)
                  {
                    v113 = (unint64_t *)&v245->__shared_owners_;
                    do
                      v114 = __ldxr(v113);
                    while (__stxr(v114 + 1, v113));
                    *(_QWORD *)&__p[40] = v109;
                    do
                      v115 = __ldaxr(v113);
                    while (__stlxr(v115 - 1, v113));
                    if (!v115)
                    {
                      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
                      std::__shared_weak_count::__release_weak(v112);
                    }
                  }
                  else
                  {
                    *(_QWORD *)&__p[40] = v109;
                  }
                  v134 = v243;
                  if (v243)
                  {
                    v135 = (unint64_t *)&v243->__shared_owners_;
                    do
                      v136 = __ldaxr(v135);
                    while (__stlxr(v136 - 1, v135));
                    if (!v136)
                    {
                      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
                      std::__shared_weak_count::__release_weak(v134);
                    }
                  }
                  v137 = *(_QWORD *)__p;
                  if (*(char *)(*(_QWORD *)&__p[40] + 31) >= 0)
                    v138 = *(_QWORD *)&__p[40] + 8;
                  else
                    v138 = *(_QWORD *)(*(_QWORD *)&__p[40] + 8);
                  v139 = _os_log_pack_fill();
                  *(_DWORD *)v139 = 136315138;
                  *(_QWORD *)(v139 + 4) = v138;
                  v140 = operator new();
                  v141 = *(unsigned __int8 *)(v218 + 39);
                  v142 = v216;
                  if ((v141 & 0x80u) != 0)
                  {
                    v142 = *(const char **)(v218 + 16);
                    v141 = *(_QWORD *)(v218 + 24);
                  }
                  *(_QWORD *)v140 = v137;
                  *(_OWORD *)(v140 + 8) = *(_OWORD *)&__p[8];
                  *(_QWORD *)&__p[8] = 0;
                  *(_QWORD *)&__p[16] = 0;
                  *(_OWORD *)(v140 + 24) = *(_OWORD *)&__p[24];
                  *(_QWORD *)&__p[24] = 0;
                  *(_QWORD *)&__p[32] = 0;
                  *(_QWORD *)(v140 + 40) = v142;
                  *(_QWORD *)(v140 + 48) = v141;
                  *(_BYTE *)(v140 + 56) = 16;
                  *(_QWORD *)v230 = 0;
                  *(_QWORD *)&v242 = v140;
                  a3 = v222;
                  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v17 + 24) + 40))(*(_QWORD *)(v17 + 24), &v242);
                  v143 = v242;
                  *(_QWORD *)&v242 = 0;
                  if (v143)
                  {
                    v144 = *(std::__shared_weak_count **)(v143 + 32);
                    if (v144)
                    {
                      v145 = (unint64_t *)&v144->__shared_owners_;
                      do
                        v146 = __ldaxr(v145);
                      while (__stlxr(v146 - 1, v145));
                      if (!v146)
                      {
                        ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
                        std::__shared_weak_count::__release_weak(v144);
                      }
                    }
                    v147 = *(std::__shared_weak_count **)(v143 + 16);
                    if (v147)
                    {
                      v148 = (unint64_t *)&v147->__shared_owners_;
                      do
                        v149 = __ldaxr(v148);
                      while (__stlxr(v149 - 1, v148));
                      if (!v149)
                      {
                        ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
                        std::__shared_weak_count::__release_weak(v147);
                      }
                    }
                    MEMORY[0x212BC6398](v143, 0x10F0C40B62ED6C6);
                    v150 = *(_QWORD *)v230;
                    *(_QWORD *)v230 = 0;
                    if (v150)
                    {
                      v151 = *(std::__shared_weak_count **)(v150 + 32);
                      if (v151)
                      {
                        v152 = (unint64_t *)&v151->__shared_owners_;
                        do
                          v153 = __ldaxr(v152);
                        while (__stlxr(v153 - 1, v152));
                        if (!v153)
                        {
                          ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
                          std::__shared_weak_count::__release_weak(v151);
                        }
                      }
                      v154 = *(std::__shared_weak_count **)(v150 + 16);
                      if (v154)
                      {
                        v155 = (unint64_t *)&v154->__shared_owners_;
                        do
                          v156 = __ldaxr(v155);
                        while (__stlxr(v156 - 1, v155));
                        if (!v156)
                        {
                          ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
                          std::__shared_weak_count::__release_weak(v154);
                        }
                      }
                      MEMORY[0x212BC6398](v150, 0x10F0C40B62ED6C6);
                    }
                  }
                  v157 = *(std::__shared_weak_count **)&__p[32];
                  if (*(_QWORD *)&__p[32])
                  {
                    v158 = (unint64_t *)(*(_QWORD *)&__p[32] + 8);
                    do
                      v159 = __ldaxr(v158);
                    while (__stlxr(v159 - 1, v158));
                    if (!v159)
                    {
                      ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
                      std::__shared_weak_count::__release_weak(v157);
                      v160 = *(std::__shared_weak_count **)&__p[16];
                      if (*(_QWORD *)&__p[16])
                        goto LABEL_239;
                      goto LABEL_242;
                    }
                  }
                  v160 = *(std::__shared_weak_count **)&__p[16];
                  if (!*(_QWORD *)&__p[16])
                    goto LABEL_242;
LABEL_239:
                  v161 = (unint64_t *)&v160->__shared_owners_;
                  do
                    v162 = __ldaxr(v161);
                  while (__stlxr(v162 - 1, v161));
                  if (v162)
                  {
LABEL_242:
                    if (v220)
                      goto LABEL_243;
LABEL_246:
                    sub_20E863570((uint64_t)&v232);
                    v164 = v239;
                    if (v239)
                    {
                      v165 = (unint64_t *)&v239->__shared_owners_;
                      do
                        v166 = __ldaxr(v165);
                      while (__stlxr(v166 - 1, v165));
                      if (!v166)
                      {
                        ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
                        std::__shared_weak_count::__release_weak(v164);
                      }
                    }
                    goto LABEL_9;
                  }
                  ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
                  std::__shared_weak_count::__release_weak(v160);
                  if (!v220)
                    goto LABEL_246;
                }
                else
                {
                  os_log_type_enabled(v90, OS_LOG_TYPE_ERROR);
                  *(_DWORD *)__p = 136315138;
                  *(_QWORD *)&__p[4] = __s;
                  v99 = (void *)_os_log_send_and_compose_impl();
                  if (!v99)
                    goto LABEL_242;
                  free(v99);
                  if (!v220)
                    goto LABEL_246;
                }
LABEL_243:
                v163 = (const char *)v4;
                if (*(char *)(v4 + 23) < 0)
                  v163 = *(const char **)v4;
                sub_20E8C003C((uint64_t)&v232, "[%s] does not contain metadata.\n", v163);
                sub_20E863570((uint64_t)&v232);
                goto LABEL_246;
              }
            }
            memmove(v86, v84, v85);
            goto LABEL_117;
          }
        }
        goto LABEL_9;
      }
      v7 = *(_QWORD *)(v4 + 24);
      v8 = operator new(8uLL);
      *v8 = v7;
      *(_QWORD *)__p = v8;
      *(_QWORD *)&__p[8] = v8 + 1;
      *(_QWORD *)&__p[16] = v8 + 1;
      __p[24] = 1;
      *(_QWORD *)&v242 = 0;
      DWORD2(v242) = 0;
      sub_20EF5ED50(a1, (uint64_t)__p, 1, (std::string::size_type)&v242, a2, &v232);
      if (__p[24] && *(_QWORD *)__p)
      {
        *(_QWORD *)&__p[8] = *(_QWORD *)__p;
        operator delete(*(void **)__p);
      }
      v9 = v232;
      if (v233.i64[0] - (_QWORD)v232 != 40)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Persistence/src/PersistenceLoading.cpp", 37, (uint64_t)"m_data.size() == 1", 18, (uint64_t)"Failed to read submap from disk.", 32, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v9 = v232;
      }
      if (*(_BYTE *)v9 == 1)
      {
        v10 = v9[3];
        memset(__p, 0, 24);
        v11 = *(_QWORD *)(v10 + 24);
        v243 = 0;
        v242 = 0uLL;
        sub_20E9099B8((uint64_t)&v242, v11);
        v12 = *(_QWORD *)__p;
        if (*(_QWORD *)__p)
        {
          v13 = *(_QWORD *)&__p[8];
          v14 = *(void **)__p;
          if (*(_QWORD *)&__p[8] != *(_QWORD *)__p)
          {
            do
            {
              if (*(char *)(v13 - 1) < 0)
                operator delete(*(void **)(v13 - 24));
              v13 -= 24;
            }
            while (v13 != v12);
            v14 = *(void **)__p;
          }
          *(_QWORD *)&__p[8] = v12;
          operator delete(v14);
        }
        v23 = *((_QWORD *)&v242 + 1);
        *(_OWORD *)__p = v242;
        *(_QWORD *)&__p[16] = v243;
        v24 = *(uint64_t **)(v10 + 16);
        if (v24)
        {
          do
          {
            v30 = (__int128 *)(v24 + 2);
            if (v23 < *(_QWORD *)&__p[16])
            {
              if (*((char *)v24 + 39) < 0)
              {
                sub_20E860C04((_BYTE *)v23, (void *)v24[2], v24[3]);
              }
              else
              {
                v29 = *v30;
                *(_QWORD *)(v23 + 16) = v24[4];
                *(_OWORD *)v23 = v29;
              }
              v23 += 24;
            }
            else
            {
              v23 = sub_20E8ADE68((uint64_t *)__p, v30);
            }
            *(_QWORD *)&__p[8] = v23;
            v24 = (uint64_t *)*v24;
          }
          while (v24);
          *(_QWORD *)v230 = *(_QWORD *)__p;
          *(_QWORD *)&v230[8] = v23;
          *(_QWORD *)&v230[16] = *(_QWORD *)&__p[16];
          v231 = 1;
          v9 = v232;
          if (!v232)
          {
LABEL_58:
            v26 = 1;
LABEL_59:
            __p[0] = 0;
            memset(&__p[8], 0, 40);
            v34 = *(_OWORD *)(v4 + 56);
            v35 = *(_OWORD *)(v4 + 72);
            v36 = *(_OWORD *)(v4 + 88);
            v252 = *(_QWORD *)(v4 + 104);
            v250 = v35;
            v251 = v36;
            v249 = v34;
            v37 = *(_OWORD *)(v4 + 40);
            v247 = *(_OWORD *)(v4 + 24);
            v248 = v37;
            v254 = 0;
            v253 = 0uLL;
            sub_20E8ADB20((char *)&v253, *(__int128 **)(v4 + 112), *(__int128 **)(v4 + 120), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v4 + 120) - *(_QWORD *)(v4 + 112)) >> 3));
            v255 = *(_OWORD *)(v4 + 136);
            v257 = 0;
            v256 = 0uLL;
            sub_20E8ADB20((char *)&v256, *(__int128 **)v230, *(__int128 **)&v230[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v230[8] - *(_QWORD *)v230) >> 3));
            v38 = (unint64_t)a3[1];
            v39 = (unint64_t)a3[2];
            if (v38 >= v39)
            {
              v46 = *a3;
              v47 = 0x8F5C28F5C28F5C29 * ((uint64_t)(v38 - (_QWORD)*a3) >> 3);
              v48 = v47 + 1;
              if (v47 + 1 > 0x147AE147AE147AELL)
                sub_20E867F44();
              if (0x1EB851EB851EB852 * ((uint64_t)(v39 - (_QWORD)v46) >> 3) > v48)
                v48 = 0x1EB851EB851EB852 * ((uint64_t)(v39 - (_QWORD)v46) >> 3);
              if (0x8F5C28F5C28F5C29 * ((uint64_t)(v39 - (_QWORD)v46) >> 3) >= 0xA3D70A3D70A3D7)
                v49 = 0x147AE147AE147AELL;
              else
                v49 = v48;
              v235 = v225;
              if (v49 > 0x147AE147AE147AELL)
                sub_20E877A38();
              v50 = (char *)operator new(200 * v49);
              v51 = *(_OWORD *)&__p[16];
              v52 = &v50[200 * v47];
              *(_OWORD *)v52 = *(_OWORD *)__p;
              *((_OWORD *)v52 + 1) = v51;
              v53 = *(_OWORD *)&__p[32];
              v54 = v249;
              v55 = v251;
              *((_OWORD *)v52 + 6) = v250;
              *((_OWORD *)v52 + 7) = v55;
              v56 = v247;
              v57 = v248;
              *((_OWORD *)v52 + 2) = v53;
              *((_OWORD *)v52 + 3) = v56;
              *((_QWORD *)v52 + 16) = v252;
              v58 = v257;
              *((_QWORD *)v52 + 19) = v254;
              *((_OWORD *)v52 + 4) = v57;
              *((_OWORD *)v52 + 5) = v54;
              *(_OWORD *)(v52 + 136) = v253;
              v254 = 0;
              v253 = 0uLL;
              v59 = v256;
              *((_OWORD *)v52 + 10) = v255;
              *((_OWORD *)v52 + 11) = v59;
              *((_QWORD *)v52 + 24) = v58;
              v257 = 0;
              v256 = 0uLL;
              if ((char *)v38 == v46)
              {
                v67 = vdupq_n_s64(v38);
                v60 = &v50[200 * v47];
                v5 = v226;
              }
              else
              {
                v60 = &v50[200 * v47];
                v5 = v226;
                do
                {
                  v61 = *(_OWORD *)(v38 - 200);
                  v62 = *(_OWORD *)(v38 - 184);
                  *(_OWORD *)(v60 - 168) = *(_OWORD *)(v38 - 168);
                  *(_OWORD *)(v60 - 184) = v62;
                  *(_OWORD *)(v60 - 200) = v61;
                  v63 = *(_OWORD *)(v38 - 104);
                  v64 = *(_OWORD *)(v38 - 88);
                  v65 = *(_QWORD *)(v38 - 72);
                  *(_OWORD *)(v60 - 120) = *(_OWORD *)(v38 - 120);
                  *((_QWORD *)v60 - 9) = v65;
                  *(_OWORD *)(v60 - 88) = v64;
                  *(_OWORD *)(v60 - 104) = v63;
                  v66 = *(_OWORD *)(v38 - 152);
                  *(_OWORD *)(v60 - 136) = *(_OWORD *)(v38 - 136);
                  *(_OWORD *)(v60 - 152) = v66;
                  *((_OWORD *)v60 - 4) = *(_OWORD *)(v38 - 64);
                  *((_QWORD *)v60 - 6) = *(_QWORD *)(v38 - 48);
                  *(_QWORD *)(v38 - 64) = 0;
                  *(_QWORD *)(v38 - 56) = 0;
                  *(_QWORD *)(v38 - 48) = 0;
                  *(_OWORD *)(v60 - 40) = *(_OWORD *)(v38 - 40);
                  *(_OWORD *)(v60 - 24) = *(_OWORD *)(v38 - 24);
                  *((_QWORD *)v60 - 1) = *(_QWORD *)(v38 - 8);
                  v60 -= 200;
                  *(_QWORD *)(v38 - 24) = 0;
                  *(_QWORD *)(v38 - 16) = 0;
                  *(_QWORD *)(v38 - 8) = 0;
                  v38 -= 200;
                }
                while ((char *)v38 != v46);
                v67 = *(int64x2_t *)a3;
                v39 = (unint64_t)a3[2];
              }
              v68 = v52 + 200;
              *a3 = v60;
              a3[1] = v52 + 200;
              v233 = v67;
              a3[2] = &v50[200 * v49];
              v234 = v39;
              v232 = (void *)v67.i64[0];
              sub_20EB9C5B8((uint64_t)&v232, v67.i64[0]);
              if (v232)
                operator delete(v232);
              v69 = (void **)v256;
              a3[1] = v68;
              if (v69)
              {
                v70 = (void **)*((_QWORD *)&v256 + 1);
                v71 = v69;
                if (*((void ***)&v256 + 1) != v69)
                {
                  do
                  {
                    if (*((char *)v70 - 1) < 0)
                      operator delete(*(v70 - 3));
                    v70 -= 3;
                  }
                  while (v70 != v69);
                  v71 = (void **)v256;
                }
                *((_QWORD *)&v256 + 1) = v69;
                operator delete(v71);
              }
            }
            else
            {
              v40 = *(_OWORD *)__p;
              v41 = *(_OWORD *)&__p[32];
              *(_OWORD *)(v38 + 16) = *(_OWORD *)&__p[16];
              *(_OWORD *)(v38 + 32) = v41;
              *(_OWORD *)v38 = v40;
              v43 = v250;
              v42 = v251;
              v44 = v249;
              *(_QWORD *)(v38 + 128) = v252;
              *(_QWORD *)(v38 + 136) = 0;
              *(_OWORD *)(v38 + 96) = v43;
              *(_OWORD *)(v38 + 112) = v42;
              *(_OWORD *)(v38 + 80) = v44;
              v45 = v248;
              *(_OWORD *)(v38 + 48) = v247;
              *(_OWORD *)(v38 + 64) = v45;
              *(_QWORD *)(v38 + 144) = 0;
              *(_QWORD *)(v38 + 152) = 0;
              *(_OWORD *)(v38 + 136) = v253;
              *(_QWORD *)(v38 + 152) = v254;
              v253 = 0uLL;
              v254 = 0;
              *(_OWORD *)(v38 + 160) = v255;
              *(_QWORD *)(v38 + 176) = 0;
              *(_QWORD *)(v38 + 184) = 0;
              *(_QWORD *)(v38 + 192) = 0;
              *(_OWORD *)(v38 + 176) = v256;
              *(_QWORD *)(v38 + 192) = v257;
              v256 = 0uLL;
              v257 = 0;
              a3[1] = (char *)(v38 + 200);
            }
            v72 = v253;
            if ((_QWORD)v253)
            {
              v73 = *((_QWORD *)&v253 + 1);
              v74 = (void *)v253;
              if (*((_QWORD *)&v253 + 1) != (_QWORD)v253)
              {
                do
                {
                  if (*(char *)(v73 - 1) < 0)
                    operator delete(*(void **)(v73 - 24));
                  v73 -= 24;
                }
                while (v73 != v72);
                v74 = (void *)v253;
              }
              *((_QWORD *)&v253 + 1) = v72;
              operator delete(v74);
            }
            if (!v26)
              goto LABEL_9;
LABEL_92:
            v75 = *(void ***)v230;
            if (*(_QWORD *)v230)
            {
              for (i = *(void ***)&v230[8]; i != v75; i -= 3)
              {
                if (*((char *)i - 1) < 0)
                  operator delete(*(i - 3));
              }
              operator delete(v75);
            }
            goto LABEL_9;
          }
        }
        else
        {
          *(_OWORD *)v230 = v242;
          *(_QWORD *)&v230[16] = v243;
          v231 = 1;
          v9 = v232;
          if (!v232)
            goto LABEL_58;
        }
      }
      else
      {
        v230[0] = 0;
        v231 = 0;
      }
      v25 = (_QWORD *)v233.i64[0];
      if ((_QWORD *)v233.i64[0] == v9)
      {
        v233.i64[0] = (uint64_t)v9;
        operator delete(v9);
        v26 = v231;
        if (v231)
          goto LABEL_59;
      }
      else
      {
        do
        {
          v27 = *(v25 - 2);
          *(v25 - 2) = 0;
          if (v27)
          {
            v28 = sub_20E9545B0(v27);
            MEMORY[0x212BC6398](v28, 0x10A0C401749CDD1);
          }
          v25 -= 5;
        }
        while (v25 != v9);
        v233.i64[0] = (uint64_t)v9;
        operator delete(v232);
        v26 = v231;
        if (v231)
          goto LABEL_59;
      }
      sub_20EB9AF50(&v229);
      if (**(int **)(v229 + 56) <= 5)
      {
        v31 = *(unsigned __int8 *)(v229 + 72);
        v32 = sub_20E8C31DC(v229, "OSLogSurrogateAppender", 1, 0);
        v33 = v32;
        if (v31 || v32)
          break;
      }
LABEL_9:
      v4 += 160;
      if (v4 == v5)
        goto LABEL_342;
    }
    v232 = &v229;
    *(std::chrono::steady_clock::time_point *)v233.i8 = std::chrono::steady_clock::now();
    v233.u64[1] = std::chrono::system_clock::now().__d_.__rep_;
    LODWORD(v234) = 5;
    v235 = "unknown file";
    v236 = 63;
    v237 = "unknown function";
    v238 = 0;
    v239 = 0;
    __sa = (char *)v4;
    if (*(char *)(v4 + 23) < 0)
    {
      __sa = *(char **)v4;
      v77 = *(_QWORD *)v232;
      v78 = *(_QWORD *)v232 + 16;
      v79 = *(char *)(*(_QWORD *)v232 + 39);
      v219 = *(_QWORD *)v232;
      if ((v79 & 0x80000000) == 0)
      {
LABEL_100:
        v80 = v79;
        v81 = (const char *)v78;
        v221 = v31;
        v217 = v78;
        v82 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v82 & 1) != 0)
          goto LABEL_162;
LABEL_337:
        if (__cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)&v242);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v242);
          if ((_BYTE)v244 && SHIBYTE(v243) < 0)
            operator delete((void *)v242);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
LABEL_162:
        if (byte_254A4A4F8[23] >= 0)
          v117 = byte_254A4A4F8;
        else
          v117 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v118 = byte_254A4A4F8[23];
        else
          v118 = *(_QWORD *)&byte_254A4A4F8[8];
        *(_QWORD *)__p = os_log_create(v117, v81);
        if (v118 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v118 >= 0x17)
        {
          v120 = (v118 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v118 | 7) != 0x17)
            v120 = v118 | 7;
          v121 = v120 + 1;
          v119 = operator new(v120 + 1);
          *(_QWORD *)&__p[16] = v118;
          *(_QWORD *)&__p[24] = v121 | 0x8000000000000000;
          *(_QWORD *)&__p[8] = v119;
        }
        else
        {
          __p[31] = v118;
          v119 = &__p[8];
          if (!v118)
          {
LABEL_176:
            v119[v118] = 0;
            __p[32] = 1;
            if (v80 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            v5 = v226;
            if (v80 >= 0x17)
            {
              v124 = (v80 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v80 | 7) != 0x17)
                v124 = v80 | 7;
              v125 = v124 + 1;
              v122 = operator new(v124 + 1);
              *(_QWORD *)&v247 = v80;
              *((_QWORD *)&v247 + 1) = v125 | 0x8000000000000000;
              *(_QWORD *)&__p[40] = v122;
            }
            else
            {
              HIBYTE(v247) = v80;
              v122 = &__p[40];
              if (!v80)
              {
                __p[40] = 0;
                LOBYTE(v248) = 1;
                v123 = *(NSObject **)__p;
                if ((SHIBYTE(v247) & 0x80000000) == 0)
                  goto LABEL_180;
                goto LABEL_186;
              }
            }
            memmove(v122, v81, v80);
            v122[v80] = 0;
            LOBYTE(v248) = 1;
            v123 = *(NSObject **)__p;
            if ((SHIBYTE(v247) & 0x80000000) == 0)
            {
LABEL_180:
              a3 = v222;
              if (!__p[32])
                goto LABEL_189;
              goto LABEL_187;
            }
LABEL_186:
            operator delete(*(void **)&__p[40]);
            a3 = v222;
            if (!__p[32])
              goto LABEL_189;
LABEL_187:
            if ((__p[31] & 0x80000000) != 0)
              operator delete(*(void **)&__p[8]);
LABEL_189:
            if (*(_QWORD *)__p)
              os_release(*(void **)__p);
            if (!v33 || !*(_QWORD *)(v33 + 24))
            {
              os_log_type_enabled(v123, OS_LOG_TYPE_ERROR);
              *(_DWORD *)__p = 136315138;
              *(_QWORD *)&__p[4] = __sa;
              v132 = (void *)_os_log_send_and_compose_impl();
              v133 = v221;
              if (!v132)
                goto LABEL_316;
              free(v132);
              if (!v221)
                goto LABEL_320;
              goto LABEL_317;
            }
            v126 = _os_log_pack_size();
            v127 = (std::__shared_weak_count_vtbl *)operator new(v126, (std::align_val_t)8uLL);
            v128 = (std::__shared_weak_count *)operator new();
            v128->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v128->__shared_owners_ = 0;
            v128->__shared_weak_owners_ = 0;
            v128[1].__vftable = v127;
            *(_QWORD *)&v242 = v127;
            *((_QWORD *)&v242 + 1) = v127;
            v243 = v128;
            v244 = 0;
            v245 = 0;
            v129 = strlen(__sa);
            if (v129 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            v130 = v129;
            if (v129 >= 0x17)
            {
              v167 = (v129 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v129 | 7) != 0x17)
                v167 = v129 | 7;
              v168 = v167 + 1;
              v131 = operator new(v167 + 1);
              *(_QWORD *)&v259[8] = v130;
              *(_QWORD *)&v259[16] = v168 | 0x8000000000000000;
              *(_QWORD *)v259 = v131;
            }
            else
            {
              v259[23] = v129;
              v131 = v259;
              if (!v129)
              {
LABEL_255:
                v131[v130] = 0;
                v169 = *(_QWORD *)v259;
                v258[0] = *(_QWORD *)&v259[8];
                *(uint64_t *)((char *)v258 + 7) = *(_QWORD *)&v259[15];
                v170 = v259[23];
                v171 = operator new(0x38uLL);
                v171[1] = 0;
                v171[2] = 0;
                v171[3] = off_24C9ABC20;
                *v171 = &off_24C9ABBD0;
                v172 = v258[0];
                v171[4] = v169;
                v171[5] = v172;
                *(_QWORD *)((char *)v171 + 47) = *(uint64_t *)((char *)v258 + 7);
                *((_BYTE *)v171 + 55) = v170;
                memset(v258, 0, 15);
                v173 = v245;
                v244 = (char *)(v171 + 3);
                v245 = (std::__shared_weak_count *)v171;
                if (v173)
                {
                  v174 = (unint64_t *)&v173->__shared_owners_;
                  do
                    v175 = __ldaxr(v174);
                  while (__stlxr(v175 - 1, v174));
                  if (!v175)
                  {
                    ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
                    std::__shared_weak_count::__release_weak(v173);
                  }
                }
                *(_OWORD *)__p = v242;
                v176 = v244;
                *(_QWORD *)&__p[16] = v243;
                if (v243)
                {
                  v177 = (unint64_t *)&v243->__shared_owners_;
                  do
                    v178 = __ldxr(v177);
                  while (__stxr(v178 + 1, v177));
                }
                v179 = v245;
                *(_QWORD *)&__p[24] = v176;
                *(_QWORD *)&__p[32] = v245;
                if (v245)
                {
                  v180 = (unint64_t *)&v245->__shared_owners_;
                  do
                    v181 = __ldxr(v180);
                  while (__stxr(v181 + 1, v180));
                  *(_QWORD *)&__p[40] = v176;
                  do
                    v182 = __ldaxr(v180);
                  while (__stlxr(v182 - 1, v180));
                  if (!v182)
                  {
                    ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
                    std::__shared_weak_count::__release_weak(v179);
                  }
                }
                else
                {
                  *(_QWORD *)&__p[40] = v176;
                }
                v183 = v243;
                if (v243)
                {
                  v184 = (unint64_t *)&v243->__shared_owners_;
                  do
                    v185 = __ldaxr(v184);
                  while (__stlxr(v185 - 1, v184));
                  if (!v185)
                  {
                    ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
                    std::__shared_weak_count::__release_weak(v183);
                  }
                }
                v186 = *(_QWORD *)__p;
                if (*(char *)(*(_QWORD *)&__p[40] + 31) >= 0)
                  v187 = *(_QWORD *)&__p[40] + 8;
                else
                  v187 = *(_QWORD *)(*(_QWORD *)&__p[40] + 8);
                v188 = _os_log_pack_fill();
                *(_DWORD *)v188 = 136315138;
                *(_QWORD *)(v188 + 4) = v187;
                v189 = operator new();
                v190 = *(unsigned __int8 *)(v219 + 39);
                v191 = v217;
                if ((v190 & 0x80u) != 0)
                {
                  v191 = *(_QWORD *)(v219 + 16);
                  v190 = *(_QWORD *)(v219 + 24);
                }
                *(_QWORD *)v189 = v186;
                *(_OWORD *)(v189 + 8) = *(_OWORD *)&__p[8];
                *(_QWORD *)&__p[8] = 0;
                *(_QWORD *)&__p[16] = 0;
                *(_OWORD *)(v189 + 24) = *(_OWORD *)&__p[24];
                *(_QWORD *)&__p[24] = 0;
                *(_QWORD *)&__p[32] = 0;
                *(_QWORD *)(v189 + 40) = v191;
                *(_QWORD *)(v189 + 48) = v190;
                *(_BYTE *)(v189 + 56) = 16;
                *(_QWORD *)v259 = 0;
                *(_QWORD *)&v242 = v189;
                a3 = v222;
                (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v33 + 24) + 40))(*(_QWORD *)(v33 + 24), &v242);
                v192 = v242;
                *(_QWORD *)&v242 = 0;
                if (v192)
                {
                  v193 = *(std::__shared_weak_count **)(v192 + 32);
                  if (v193)
                  {
                    v194 = (unint64_t *)&v193->__shared_owners_;
                    do
                      v195 = __ldaxr(v194);
                    while (__stlxr(v195 - 1, v194));
                    if (!v195)
                    {
                      ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
                      std::__shared_weak_count::__release_weak(v193);
                    }
                  }
                  v196 = *(std::__shared_weak_count **)(v192 + 16);
                  if (v196)
                  {
                    v197 = (unint64_t *)&v196->__shared_owners_;
                    do
                      v198 = __ldaxr(v197);
                    while (__stlxr(v198 - 1, v197));
                    if (!v198)
                    {
                      ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
                      std::__shared_weak_count::__release_weak(v196);
                    }
                  }
                  MEMORY[0x212BC6398](v192, 0x10F0C40B62ED6C6);
                  v199 = *(_QWORD *)v259;
                  *(_QWORD *)v259 = 0;
                  if (v199)
                  {
                    v200 = *(std::__shared_weak_count **)(v199 + 32);
                    if (v200)
                    {
                      v201 = (unint64_t *)&v200->__shared_owners_;
                      do
                        v202 = __ldaxr(v201);
                      while (__stlxr(v202 - 1, v201));
                      if (!v202)
                      {
                        ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
                        std::__shared_weak_count::__release_weak(v200);
                      }
                    }
                    v203 = *(std::__shared_weak_count **)(v199 + 16);
                    if (v203)
                    {
                      v204 = (unint64_t *)&v203->__shared_owners_;
                      do
                        v205 = __ldaxr(v204);
                      while (__stlxr(v205 - 1, v204));
                      if (!v205)
                      {
                        ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
                        std::__shared_weak_count::__release_weak(v203);
                      }
                    }
                    MEMORY[0x212BC6398](v199, 0x10F0C40B62ED6C6);
                  }
                }
                v206 = *(std::__shared_weak_count **)&__p[32];
                v133 = v221;
                if (!*(_QWORD *)&__p[32])
                  goto LABEL_312;
                v207 = (unint64_t *)(*(_QWORD *)&__p[32] + 8);
                do
                  v208 = __ldaxr(v207);
                while (__stlxr(v208 - 1, v207));
                if (!v208)
                {
                  ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
                  std::__shared_weak_count::__release_weak(v206);
                  v209 = *(std::__shared_weak_count **)&__p[16];
                  if (!*(_QWORD *)&__p[16])
                    goto LABEL_316;
                }
                else
                {
LABEL_312:
                  v209 = *(std::__shared_weak_count **)&__p[16];
                  if (!*(_QWORD *)&__p[16])
                    goto LABEL_316;
                }
                v210 = (unint64_t *)&v209->__shared_owners_;
                do
                  v211 = __ldaxr(v210);
                while (__stlxr(v211 - 1, v210));
                if (v211)
                {
LABEL_316:
                  if (!v133)
                    goto LABEL_320;
                  goto LABEL_317;
                }
                ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
                std::__shared_weak_count::__release_weak(v209);
                if (!v221)
                  goto LABEL_320;
LABEL_317:
                v212 = (const char *)v4;
                if (*(char *)(v4 + 23) < 0)
                  v212 = *(const char **)v4;
                sub_20E8C003C((uint64_t)&v232, "[%s] failed to load submap.\n", v212);
                sub_20E863570((uint64_t)&v232);
LABEL_320:
                sub_20E863570((uint64_t)&v232);
                v213 = v239;
                if (!v239)
                  goto LABEL_324;
                v214 = (unint64_t *)&v239->__shared_owners_;
                do
                  v215 = __ldaxr(v214);
                while (__stlxr(v215 - 1, v214));
                if (!v215)
                {
                  ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
                  std::__shared_weak_count::__release_weak(v213);
                  if (v231)
                    goto LABEL_92;
                }
                else
                {
LABEL_324:
                  if (v231)
                    goto LABEL_92;
                }
                goto LABEL_9;
              }
            }
            memcpy(v131, __sa, v130);
            goto LABEL_255;
          }
        }
        memmove(v119, v117, v118);
        goto LABEL_176;
      }
    }
    else
    {
      v77 = *(_QWORD *)v232;
      v78 = *(_QWORD *)v232 + 16;
      v79 = *(char *)(*(_QWORD *)v232 + 39);
      v219 = *(_QWORD *)v232;
      if ((v79 & 0x80000000) == 0)
        goto LABEL_100;
    }
    v81 = *(const char **)(v77 + 16);
    v80 = *(_QWORD *)(v77 + 24);
    v221 = v31;
    v217 = v78;
    v116 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v116 & 1) != 0)
      goto LABEL_162;
    goto LABEL_337;
  }
LABEL_342:
  *(_QWORD *)__p = &v240;
  sub_20EB9C69C((void ***)__p);
}

void sub_20EB9AC34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56,char a57)
{
  uint64_t v57;

  if (a57)
  {
    if (a56 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a39);
  sub_20EB90618(a24);
  *(_QWORD *)(v57 - 144) = &a48;
  sub_20EB9C69C((void ***)(v57 - 144));
  _Unwind_Resume(a1);
}

void sub_20EB9AF50(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5B2E0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5B2E0))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A5B2D8);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A5B2E0);
  }
  *a1 = qword_254A5B2D8;
}

void sub_20EB9AFEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5B2E0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5B2E0);
  _Unwind_Resume(a1);
}

uint64_t sub_20EB9B044(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *(_QWORD *)(a1 + 88);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 96);
    v4 = *(void **)(a1 + 88);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 88);
    }
    *(_QWORD *)(a1 + 96) = v2;
    operator delete(v4);
  }
  return a1;
}

_QWORD *sub_20EB9B0B4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = a1[22];
  if (v2)
  {
    v3 = a1[23];
    v4 = (void *)a1[22];
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)a1[22];
    }
    a1[23] = v2;
    operator delete(v4);
  }
  v5 = a1[17];
  if (v5)
  {
    v6 = a1[18];
    v7 = (void *)a1[17];
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 1) < 0)
          operator delete(*(void **)(v6 - 24));
        v6 -= 24;
      }
      while (v6 != v5);
      v7 = (void *)a1[17];
    }
    a1[18] = v5;
    operator delete(v7);
  }
  return a1;
}

uint64_t sub_20EB9B16C(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;

  if (*(_BYTE *)(a1 + 24))
  {
    v2 = *(void ***)a1;
    if (*(_QWORD *)a1)
    {
      v3 = *(void ***)(a1 + 8);
      v4 = *(void ***)a1;
      if (v3 != v2)
      {
        do
        {
          if (*((char *)v3 - 1) < 0)
            operator delete(*(v3 - 3));
          v3 -= 3;
        }
        while (v3 != v2);
        v4 = *(void ***)a1;
      }
      *(_QWORD *)(a1 + 8) = v2;
      operator delete(v4);
    }
  }
  return a1;
}

void sub_20EB9B1E4(uint64_t a1@<X0>, uint64_t a2@<X1>, void ***a3@<X8>)
{
  unint64_t v5;
  const std::__fs::filesystem::path *v6;
  std::__fs::filesystem::path::__string_view v7;
  void **p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v9;
  std::basic_string_view<_CharT, _Traits>::size_type v10;
  void **v11;
  int v12;
  void **v13;
  void **v14;
  void **v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  void **v20;
  char *v21;
  void **v22;
  void **v23;
  __int128 v24;
  __int128 v25;
  void **v26;
  void *v27;
  void **v28;
  char *v29;
  char *v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  std::runtime_error_vtbl *v34;
  const char *imp;
  std::runtime_error_vtbl *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  const std::__fs::filesystem::path *v40;
  void *v41;
  std::runtime_error *exception;
  std::runtime_error *v43;
  uint64_t v44;
  const std::__fs::filesystem::path *v45;
  int v46;
  void *v47[2];
  uint64_t v48;
  void *__p[2];
  uint64_t v50;
  std::runtime_error v51;
  int v52;
  void *v53;
  char v54;
  char v55;
  void *v56;
  const std::__fs::filesystem::path *v57;
  void *v58[2];
  char v59;
  void **__dst;
  char *size;
  _QWORD *v62;
  void **v63;
  _QWORD *v64;

  sub_20EE26BA0(a1, (uint64_t)v58);
  if (((*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a2 + 176))(a2, v58) & 1) == 0)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    goto LABEL_98;
  }
  sub_210224314((uint64_t)v58, 2u, "*", 1uLL, a2, (uint64_t *)&v56);
  v5 = ((char *)v57 - (_BYTE *)v56) >> 5;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  sub_20EB9C790((uint64_t)a3, v5);
  v6 = (const std::__fs::filesystem::path *)v56;
  v45 = v57;
  if (v56 != v57)
  {
    v44 = a2;
    while (1)
    {
      v7 = std::__fs::filesystem::path::__filename(v6);
      if (v7.__size_ >= 0x7FFFFFFFFFFFFFF8)
        sub_20E860B7C();
      if (v7.__size_ >= 0x17)
        break;
      HIBYTE(v62) = v7.__size_;
      p_dst = (void **)&__dst;
      if (v7.__size_)
        goto LABEL_13;
LABEL_14:
      *((_BYTE *)p_dst + v7.__size_) = 0;
      v11 = __dst;
      v46 = (int)v62;
      HIBYTE(v46) = BYTE3(v62);
      v12 = SHIBYTE(v62);
      if ((SHIBYTE(v62) & 0x80000000) == 0)
      {
        v47[0] = __dst;
        v47[1] = size;
        LODWORD(v48) = v46;
        *(_DWORD *)((char *)&v48 + 3) = *(_DWORD *)((char *)&v62 + 3);
        HIBYTE(v48) = HIBYTE(v62);
LABEL_17:
        *(_OWORD *)__p = *(_OWORD *)v47;
        v50 = v48;
        goto LABEL_18;
      }
      sub_20E860C04(v47, __dst, (unint64_t)size);
      if ((SHIBYTE(v48) & 0x80000000) == 0)
        goto LABEL_17;
      sub_20E860C04(__p, v47[0], (unint64_t)v47[1]);
LABEL_18:
      sub_20EE279D4((uint64_t)v58, (uint64_t)__p, a2, (uint64_t)&v51);
      if (SHIBYTE(v50) < 0)
      {
        operator delete(__p[0]);
        if ((SHIBYTE(v48) & 0x80000000) == 0)
        {
LABEL_20:
          if ((v12 & 0x80000000) == 0)
            goto LABEL_21;
          goto LABEL_25;
        }
      }
      else if ((SHIBYTE(v48) & 0x80000000) == 0)
      {
        goto LABEL_20;
      }
      operator delete(v47[0]);
      if ((v12 & 0x80000000) == 0)
      {
LABEL_21:
        if (!v55)
          goto LABEL_102;
        goto LABEL_26;
      }
LABEL_25:
      operator delete(v11);
      if (!v55)
      {
LABEL_102:
        exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
        sub_20EB9B8FC((uint64_t)&v51);
        v43 = std::runtime_error::runtime_error(exception, &v51);
        exception->__vftable = (std::runtime_error_vtbl *)&off_24C9EDA58;
        LODWORD(exception[1].__vftable) = v52;
        __cxa_throw(v43, (struct type_info *)&unk_24C9EDAD0, (void (*)(void *))std::runtime_error::~runtime_error);
      }
LABEL_26:
      v14 = a3[1];
      v13 = a3[2];
      if (v14 < v13)
      {
        sub_20EB9C8F0(a3[1], (uint64_t)&v51);
        v15 = v14 + 6;
        a3[1] = v14 + 6;
        goto LABEL_65;
      }
      v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)v14 - (char *)*a3) >> 4);
      v17 = v16 + 1;
      if (v16 + 1 > 0x555555555555555)
        sub_20E867F44();
      v18 = 0xAAAAAAAAAAAAAAABLL * (((char *)v13 - (char *)*a3) >> 4);
      if (2 * v18 > v17)
        v17 = 2 * v18;
      if (v18 >= 0x2AAAAAAAAAAAAAALL)
        v19 = 0x555555555555555;
      else
        v19 = v17;
      v64 = a3 + 2;
      if (v19)
      {
        if (v19 > 0x555555555555555)
          sub_20E877A38();
        v20 = (void **)operator new(48 * v19);
      }
      else
      {
        v20 = 0;
      }
      __dst = v20;
      size = (char *)&v20[6 * v16];
      v62 = size;
      v63 = &v20[6 * v19];
      sub_20EB9C8F0(size, (uint64_t)&v51);
      v21 = size;
      v15 = (void **)(v62 + 6);
      v22 = *a3;
      v23 = a3[1];
      if (v23 != *a3)
      {
        do
        {
          *((_QWORD *)v21 - 6) = 0;
          *((_QWORD *)v21 - 5) = 0;
          v21 -= 48;
          *((_QWORD *)v21 + 2) = 0;
          v24 = *((_OWORD *)v23 - 3);
          v23 -= 6;
          *(_OWORD *)v21 = v24;
          *((_QWORD *)v21 + 2) = v23[2];
          *v23 = 0;
          v23[1] = 0;
          v23[2] = 0;
          v25 = *(_OWORD *)(v23 + 3);
          *((_QWORD *)v21 + 5) = v23[5];
          *(_OWORD *)(v21 + 24) = v25;
          v23[4] = 0;
          v23[5] = 0;
          v23[3] = 0;
        }
        while (v23 != v22);
        v23 = *a3;
        v26 = a3[1];
        *a3 = (void **)v21;
        a3[1] = v15;
        a3[2] = v63;
        if (v26 == v23)
        {
LABEL_63:
          if (!v23)
            goto LABEL_65;
LABEL_64:
          operator delete(v23);
          goto LABEL_65;
        }
        while (2)
        {
          if (*((char *)v26 - 1) < 0)
          {
            operator delete(*(v26 - 3));
            v28 = v26 - 6;
            v29 = (char *)*(v26 - 6);
            if (!v29)
              goto LABEL_44;
          }
          else
          {
            v28 = v26 - 6;
            v29 = (char *)*(v26 - 6);
            if (!v29)
            {
LABEL_44:
              v26 = v28;
              if (v28 == v23)
              {
                a2 = v44;
                goto LABEL_63;
              }
              continue;
            }
          }
          break;
        }
        v30 = (char *)*(v26 - 5);
        v27 = v29;
        if (v30 == v29)
        {
LABEL_43:
          *(v26 - 5) = v29;
          operator delete(v27);
          goto LABEL_44;
        }
        if (!*(v30 - 48))
          goto LABEL_107;
        v31 = (std::__shared_weak_count *)*((_QWORD *)v30 - 7);
        if (!v31)
          goto LABEL_107;
        while (2)
        {
          p_shared_owners = (unint64_t *)&v31->__shared_owners_;
          do
            v33 = __ldaxr(p_shared_owners);
          while (__stlxr(v33 - 1, p_shared_owners));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
            if (*(v30 - 304))
              goto LABEL_58;
          }
          else
          {
LABEL_107:
            if (*(v30 - 304))
            {
LABEL_58:
              if (*(v30 - 305) < 0)
                operator delete(*((void **)v30 - 41));
            }
          }
          v30 -= 344;
          if (v30 == v29)
          {
            v27 = *v28;
            goto LABEL_43;
          }
          continue;
        }
      }
      *a3 = (void **)size;
      a3[1] = v15;
      a3[2] = v63;
      if (v23)
        goto LABEL_64;
LABEL_65:
      a3[1] = v15;
      if (v55)
      {
        if ((v54 & 0x80000000) == 0)
        {
          v34 = v51.__vftable;
          if (!v51.__vftable)
            goto LABEL_5;
LABEL_70:
          imp = v51.__imp_.__imp_;
          v36 = v34;
          if ((std::runtime_error_vtbl *)v51.__imp_.__imp_ == v34)
          {
LABEL_84:
            v51.__imp_.__imp_ = (const char *)v34;
            operator delete(v36);
            goto LABEL_5;
          }
          while (1)
          {
            if (!*(imp - 48))
              goto LABEL_108;
            v37 = (std::__shared_weak_count *)*((_QWORD *)imp - 7);
            if (!v37)
              goto LABEL_108;
            v38 = (unint64_t *)&v37->__shared_owners_;
            do
              v39 = __ldaxr(v38);
            while (__stlxr(v39 - 1, v38));
            if (!v39)
            {
              ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
              std::__shared_weak_count::__release_weak(v37);
              if (*(imp - 304))
              {
LABEL_79:
                if (*(imp - 305) < 0)
                  operator delete(*((void **)imp - 41));
              }
            }
            else
            {
LABEL_108:
              if (*(imp - 304))
                goto LABEL_79;
            }
            imp -= 344;
            if (imp == (const char *)v34)
            {
              v36 = v51.__vftable;
              goto LABEL_84;
            }
          }
        }
        operator delete(v53);
        v34 = v51.__vftable;
        if (v51.__vftable)
          goto LABEL_70;
      }
      else
      {
        ((void (*)(std::runtime_error *))v51.~runtime_error)(&v51);
      }
LABEL_5:
      v6 = (const std::__fs::filesystem::path *)((char *)v6 + 32);
      if (v6 == v45)
      {
        v6 = (const std::__fs::filesystem::path *)v56;
        goto LABEL_90;
      }
    }
    v9 = (v7.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7.__size_ | 7) != 0x17)
      v9 = v7.__size_ | 7;
    v10 = v9 + 1;
    p_dst = (void **)operator new(v9 + 1);
    size = (char *)v7.__size_;
    v62 = (_QWORD *)(v10 | 0x8000000000000000);
    __dst = p_dst;
LABEL_13:
    memmove(p_dst, v7.__data_, v7.__size_);
    goto LABEL_14;
  }
LABEL_90:
  if (v6)
  {
    v40 = v57;
    v41 = (void *)v6;
    if (v57 != v6)
    {
      do
      {
        if (v40[-1].__pn_.__r_.__value_.__s.__data_[15] < 0)
          operator delete((void *)v40[-2].__pn_.__r_.__value_.__r.__words[2]);
        v40 = (const std::__fs::filesystem::path *)((char *)v40 - 32);
      }
      while (v40 != v6);
      v41 = v56;
    }
    v57 = v6;
    operator delete(v41);
  }
LABEL_98:
  if (v59 < 0)
    operator delete(v58[0]);
}

void sub_20EB9B800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,int a33,void *a34)
{
  char ***v34;
  uint64_t v35;

  sub_20EB905B8(v34);
  sub_20EB9B93C(&a34);
  if (*(char *)(v35 - 129) < 0)
    operator delete(*(void **)(v35 - 152));
  _Unwind_Resume(a1);
}

uint64_t sub_20EB9B8FC(uint64_t result)
{
  _QWORD *exception;

  if (*(_BYTE *)(result + 48))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C9B4620;
    __cxa_throw(exception, (struct type_info *)&unk_24C9AD070, (void (*)(void *))std::exception::~exception);
  }
  return result;
}

void **sub_20EB9B93C(void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 9) < 0)
          operator delete(*(v3 - 4));
        v3 -= 4;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_20EB9B9AC(_QWORD *a1@<X0>, unsigned __int8 ***a2@<X1>, uint64_t ***a3@<X8>)
{
  uint64_t **v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t **v9;
  uint64_t **v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t i;
  uint64_t v16;
  unsigned __int8 **v17;
  uint64_t v18;
  uint64_t ***v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  _QWORD *v22;
  char v23;
  _OWORD *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t **v33;
  uint64_t **v34;
  unint64_t v35;
  void *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  BOOL v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  _BYTE *v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  char *v62;
  int v63;
  unint64_t v64;
  uint64_t **v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t **v68;
  unsigned __int8 **v69;
  unsigned __int8 **v70;
  void **v71;
  unsigned __int8 *v73;
  uint64_t v74;
  unsigned __int8 *v75;
  _QWORD *v77;
  __int128 v78;
  void *v79[2];
  uint64_t v80;
  __int128 v81;
  __int128 __p;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;

  v87 = *MEMORY[0x24BDAC8D0];
  a3[1] = 0;
  v4 = (uint64_t **)(a3 + 1);
  a3[2] = 0;
  a3[3] = 0;
  v71 = (void **)(a3 + 3);
  *a3 = (uint64_t **)(a3 + 1);
  a3[4] = 0;
  a3[5] = 0;
  v5 = (_QWORD *)*a1;
  v6 = (_QWORD *)a1[1];
LABEL_3:
  if (v5 != v6)
  {
    v7 = *v4;
    v8 = v5[6];
    v9 = v4;
    v10 = v4;
    if (*v4)
    {
      while (1)
      {
        while (1)
        {
          v10 = (uint64_t **)v7;
          v11 = v7[4];
          if (v8 >= v11)
            break;
          v7 = *v10;
          v9 = v10;
          if (!*v10)
            goto LABEL_11;
        }
        if (v11 >= v8)
          break;
        v7 = v10[1];
        if (!v7)
        {
          v9 = v10 + 1;
          goto LABEL_11;
        }
      }
      v12 = (uint64_t *)v10;
    }
    else
    {
LABEL_11:
      v12 = (uint64_t *)operator new(0x40uLL);
      v12[4] = v8;
      v12[5] = 0;
      v12[6] = 0;
      v12[7] = 0;
      *v12 = 0;
      v12[1] = 0;
      v12[2] = (uint64_t)v10;
      *v9 = v12;
      v13 = **a3;
      v14 = v12;
      if (v13)
      {
        *a3 = (uint64_t **)v13;
        v14 = *v9;
      }
      sub_20E868578((uint64_t *)a3[1], v14);
      a3[2] = (uint64_t **)((char *)a3[2] + 1);
    }
    v16 = v12[5];
    for (i = v12[6]; ; i -= 120)
    {
      if (i == v16)
      {
        v12[6] = v16;
        v5 += 25;
        goto LABEL_3;
      }
      if (*(char *)(i - 1) < 0)
      {
        operator delete(*(void **)(i - 24));
        if ((*(char *)(i - 41) & 0x80000000) == 0)
        {
LABEL_23:
          if ((*(char *)(i - 81) & 0x80000000) == 0)
            continue;
          goto LABEL_24;
        }
      }
      else if ((*(char *)(i - 41) & 0x80000000) == 0)
      {
        goto LABEL_23;
      }
      operator delete(*(void **)(i - 64));
      if ((*(char *)(i - 81) & 0x80000000) == 0)
        continue;
LABEL_24:
      operator delete(*(void **)(i - 104));
    }
  }
  v17 = *a2;
  v69 = a2[1];
  if (*a2 != v69)
  {
    v18 = 0;
    v19 = a3;
    while (1)
    {
      v70 = v17;
      v20 = *v17;
      v21 = v17[1];
      v75 = v20;
      v73 = v21;
      while (v20 != v21)
      {
        v22 = (_QWORD *)*a1;
        v77 = (_QWORD *)a1[1];
        if ((_QWORD *)*a1 == v77)
          goto LABEL_102;
        v74 = v18;
        v23 = 0;
        sub_2102323F4(v75 + 328, &v78);
        while (1)
        {
          v24 = operator new(0x28uLL);
          v25 = *(_OWORD *)v79;
          *v24 = v78;
          v24[1] = v25;
          *((_DWORD *)v24 + 8) = v80;
          *((_BYTE *)v24 + 36) = 0;
          v27 = v22[22];
          v26 = v22[23];
          if (v27 != v26)
          {
            while (1)
            {
              v28 = *(unsigned __int8 *)(v27 + 23);
              if ((v28 & 0x80u) == 0)
                v29 = *(unsigned __int8 *)(v27 + 23);
              else
                v29 = *(_QWORD *)(v27 + 8);
              if (v29 == 36)
              {
                if ((v28 & 0x80) != 0)
                {
                  if (!memcmp(*(const void **)v27, v24, *(_QWORD *)(v27 + 8)))
                    break;
                }
                else
                {
                  if (!*(_BYTE *)(v27 + 23))
                    break;
                  v30 = 0;
                  while (*(unsigned __int8 *)(v27 + v30) == *((unsigned __int8 *)v24 + v30))
                  {
                    if (v28 == ++v30)
                      goto LABEL_51;
                  }
                }
              }
              v27 += 24;
              if (v27 == v26)
                goto LABEL_36;
            }
          }
LABEL_51:
          if (v27 != v26)
          {
            v31 = *v4;
            v32 = v22[6];
            v33 = v4;
            v34 = v4;
            if (*v4)
            {
              while (1)
              {
                while (1)
                {
                  v34 = (uint64_t **)v31;
                  v35 = v31[4];
                  if (v32 >= v35)
                    break;
                  v31 = *v34;
                  v33 = v34;
                  if (!*v34)
                    goto LABEL_59;
                }
                if (v35 >= v32)
                  break;
                v31 = v34[1];
                if (!v31)
                {
                  v33 = v34 + 1;
                  goto LABEL_59;
                }
              }
              v36 = v34;
            }
            else
            {
LABEL_59:
              v36 = operator new(0x40uLL);
              *((_QWORD *)v36 + 4) = v32;
              *((_QWORD *)v36 + 5) = 0;
              *((_QWORD *)v36 + 6) = 0;
              *((_QWORD *)v36 + 7) = 0;
              *(_QWORD *)v36 = 0;
              *((_QWORD *)v36 + 1) = 0;
              *((_QWORD *)v36 + 2) = v34;
              *v33 = (uint64_t *)v36;
              v37 = **a3;
              v38 = (uint64_t *)v36;
              if (v37)
              {
                *a3 = (uint64_t **)v37;
                v38 = *v33;
              }
              v39 = *v4;
              v40 = v38 == *v4;
              *((_BYTE *)v38 + 24) = v40;
              if (!v40)
              {
                do
                {
                  v41 = v38[2];
                  if (*(_BYTE *)(v41 + 24))
                    break;
                  v42 = *(uint64_t **)(v41 + 16);
                  v43 = *v42;
                  if (*v42 == v41)
                  {
                    v46 = v42[1];
                    if (!v46 || (v47 = *(unsigned __int8 *)(v46 + 24), v44 = (_BYTE *)(v46 + 24), v47))
                    {
                      if (*(uint64_t **)v41 == v38)
                      {
                        *(_BYTE *)(v41 + 24) = 1;
                        *((_BYTE *)v42 + 24) = 0;
                        v50 = *(_QWORD *)(v41 + 8);
                        *v42 = v50;
                        if (v50)
                          goto LABEL_76;
                      }
                      else
                      {
                        v48 = *(uint64_t **)(v41 + 8);
                        v49 = *v48;
                        *(_QWORD *)(v41 + 8) = *v48;
                        if (v49)
                        {
                          *(_QWORD *)(v49 + 16) = v41;
                          v42 = *(uint64_t **)(v41 + 16);
                        }
                        v48[2] = (uint64_t)v42;
                        *(_QWORD *)(*(_QWORD *)(v41 + 16) + 8 * (**(_QWORD **)(v41 + 16) != v41)) = v48;
                        *v48 = v41;
                        *(_QWORD *)(v41 + 16) = v48;
                        v42 = (uint64_t *)v48[2];
                        v41 = *v42;
                        *((_BYTE *)v48 + 24) = 1;
                        *((_BYTE *)v42 + 24) = 0;
                        v50 = *(_QWORD *)(v41 + 8);
                        *v42 = v50;
                        if (v50)
LABEL_76:
                          *(_QWORD *)(v50 + 16) = v42;
                      }
                      *(_QWORD *)(v41 + 16) = v42[2];
                      *(_QWORD *)(v42[2] + 8 * (*(_QWORD *)v42[2] != (_QWORD)v42)) = v41;
                      *(_QWORD *)(v41 + 8) = v42;
LABEL_83:
                      v42[2] = v41;
                      break;
                    }
                  }
                  else if (!v43 || (v45 = *(unsigned __int8 *)(v43 + 24), v44 = (_BYTE *)(v43 + 24), v45))
                  {
                    if (*(uint64_t **)v41 == v38)
                    {
                      v57 = v38[1];
                      *(_QWORD *)v41 = v57;
                      if (v57)
                      {
                        *(_QWORD *)(v57 + 16) = v41;
                        v42 = *(uint64_t **)(v41 + 16);
                      }
                      v38[2] = (uint64_t)v42;
                      *(_QWORD *)(*(_QWORD *)(v41 + 16) + 8 * (**(_QWORD **)(v41 + 16) != v41)) = v38;
                      v38[1] = v41;
                      *(_QWORD *)(v41 + 16) = v38;
                      v42 = (uint64_t *)v38[2];
                      *((_BYTE *)v38 + 24) = 1;
                      *((_BYTE *)v42 + 24) = 0;
                      v41 = v42[1];
                      v51 = *(uint64_t **)v41;
                      v42[1] = *(_QWORD *)v41;
                      if (v51)
LABEL_81:
                        v51[2] = (uint64_t)v42;
                    }
                    else
                    {
                      *(_BYTE *)(v41 + 24) = 1;
                      *((_BYTE *)v42 + 24) = 0;
                      v41 = v42[1];
                      v51 = *(uint64_t **)v41;
                      v42[1] = *(_QWORD *)v41;
                      if (v51)
                        goto LABEL_81;
                    }
                    *(_QWORD *)(v41 + 16) = v42[2];
                    *(_QWORD *)(v42[2] + 8 * (*(_QWORD *)v42[2] != (_QWORD)v42)) = v41;
                    *(_QWORD *)v41 = v42;
                    goto LABEL_83;
                  }
                  *(_BYTE *)(v41 + 24) = 1;
                  v38 = v42;
                  *((_BYTE *)v42 + 24) = v42 == v39;
                  *v44 = 1;
                }
                while (v42 != v39);
              }
              a3[2] = (uint64_t **)((char *)a3[2] + 1);
            }
            sub_20EB9C2B4((uint64_t)&v78, v75);
            v52 = *((_QWORD *)v36 + 6);
            if (v52 >= *((_QWORD *)v36 + 7))
            {
              v56 = sub_20EB9CDDC((void **)v36 + 5, (uint64_t)&v78);
            }
            else
            {
              *(_OWORD *)v52 = v78;
              v53 = *(_OWORD *)v79;
              *(_QWORD *)(v52 + 32) = v80;
              *(_OWORD *)(v52 + 16) = v53;
              v79[1] = 0;
              v80 = 0;
              v79[0] = 0;
              *(_OWORD *)(v52 + 40) = v81;
              v54 = v83;
              *(_OWORD *)(v52 + 56) = __p;
              *(_QWORD *)(v52 + 72) = v54;
              v83 = 0;
              __p = 0uLL;
              *(_OWORD *)(v52 + 80) = v84;
              v55 = v85;
              *(_QWORD *)(v52 + 112) = v86;
              *(_OWORD *)(v52 + 96) = v55;
              v85 = 0uLL;
              v86 = 0;
              v56 = (char *)(v52 + 120);
            }
            *((_QWORD *)v36 + 6) = v56;
            if (SHIBYTE(v86) < 0)
            {
              operator delete((void *)v85);
              if (SHIBYTE(v83) < 0)
                goto LABEL_34;
            }
            else if (SHIBYTE(v83) < 0)
            {
LABEL_34:
              operator delete((void *)__p);
              if ((SHIBYTE(v80) & 0x80000000) == 0)
              {
LABEL_35:
                v23 = 1;
                goto LABEL_36;
              }
LABEL_93:
              operator delete(v79[0]);
              goto LABEL_35;
            }
            if ((SHIBYTE(v80) & 0x80000000) == 0)
              goto LABEL_35;
            goto LABEL_93;
          }
LABEL_36:
          operator delete(v24);
          v22 += 25;
          if (v22 == v77)
            break;
          sub_2102323F4(v75 + 328, &v78);
        }
        v19 = a3;
        v18 = v74;
        if ((v23 & 1) == 0)
        {
LABEL_102:
          sub_20EB9C2B4((uint64_t)&v78, v75);
          v58 = (unint64_t)v19[4];
          if (v58 >= (unint64_t)v19[5])
          {
            v62 = sub_20EB9CDDC(v71, (uint64_t)&v78);
            v63 = SHIBYTE(v86);
            v19[4] = (uint64_t **)v62;
            if ((v63 & 0x80000000) == 0)
            {
              if (SHIBYTE(v83) < 0)
                goto LABEL_29;
              goto LABEL_107;
            }
            operator delete((void *)v85);
            if ((SHIBYTE(v83) & 0x80000000) == 0)
              goto LABEL_107;
LABEL_29:
            operator delete((void *)__p);
            if (SHIBYTE(v80) < 0)
LABEL_108:
              operator delete(v79[0]);
          }
          else
          {
            *(_OWORD *)v58 = v78;
            v59 = *(_OWORD *)v79;
            *(_QWORD *)(v58 + 32) = v80;
            *(_OWORD *)(v58 + 16) = v59;
            v79[1] = 0;
            v80 = 0;
            v79[0] = 0;
            *(_OWORD *)(v58 + 40) = v81;
            v60 = v83;
            *(_OWORD *)(v58 + 56) = __p;
            *(_QWORD *)(v58 + 72) = v60;
            v83 = 0;
            __p = 0uLL;
            *(_OWORD *)(v58 + 80) = v84;
            v61 = v85;
            *(_QWORD *)(v58 + 112) = v86;
            *(_OWORD *)(v58 + 96) = v61;
            v85 = 0uLL;
            v86 = 0;
            v19[4] = (uint64_t **)(v58 + 120);
            if (SHIBYTE(v83) < 0)
              goto LABEL_29;
LABEL_107:
            if (SHIBYTE(v80) < 0)
              goto LABEL_108;
          }
        }
        ++v18;
        v20 = v75 + 344;
        v75 += 344;
        v21 = v73;
      }
      v17 = v70 + 6;
      if (v70 + 6 == v69)
        goto LABEL_112;
    }
  }
  v18 = 0;
  v19 = a3;
LABEL_112:
  v64 = 0xEEEEEEEEEEEEEEEFLL * (v19[4] - v19[3]);
  v65 = *v19;
  if (*v19 != v4)
  {
    do
    {
      v66 = v65[1];
      v67 = (uint64_t *)v65;
      if (v66)
      {
        do
        {
          v68 = (uint64_t **)v66;
          v66 = (uint64_t *)*v66;
        }
        while (v66);
      }
      else
      {
        do
        {
          v68 = (uint64_t **)v67[2];
          v40 = *v68 == v67;
          v67 = (uint64_t *)v68;
        }
        while (!v40);
      }
      v64 -= 0x1111111111111111 * (v65[6] - v65[5]);
      v65 = v68;
    }
    while (v68 != v4);
  }
  if (v18 != v64
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Persistence/src/PersistenceLoading.cpp", 131, (uint64_t)"num_anchors == tracked_anchors", 30, (uint64_t)"Some anchors were not classified.", 33, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
}

void sub_20EB9C1C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11)
{
  uint64_t v11;
  void **v13;
  void **v14;
  void *v15;

  v13 = (void **)*a11;
  if (!*a11)
  {
LABEL_14:
    sub_20EB90F1C(v11, *(_QWORD **)(v11 + 8));
    _Unwind_Resume(a1);
  }
  v14 = *(void ***)(v11 + 32);
  v15 = *a11;
  if (v14 == v13)
  {
LABEL_13:
    *(_QWORD *)(v11 + 32) = v13;
    operator delete(v15);
    goto LABEL_14;
  }
  while (1)
  {
    while (*((char *)v14 - 1) < 0)
    {
      operator delete(*(v14 - 3));
      if (*((char *)v14 - 41) < 0)
        goto LABEL_4;
LABEL_10:
      if ((*((char *)v14 - 81) & 0x80000000) == 0)
        goto LABEL_5;
LABEL_11:
      operator delete(*(v14 - 13));
      v14 -= 15;
      if (v14 == v13)
      {
LABEL_12:
        v15 = *a11;
        goto LABEL_13;
      }
    }
    if ((*((char *)v14 - 41) & 0x80000000) == 0)
      goto LABEL_10;
LABEL_4:
    operator delete(*(v14 - 8));
    if (*((char *)v14 - 81) < 0)
      goto LABEL_11;
LABEL_5:
    v14 -= 15;
    if (v14 == v13)
      goto LABEL_12;
  }
}

void sub_20EB9C2B4(uint64_t a1, unsigned __int8 *a2)
{
  _OWORD *v4;
  __int128 v5;
  _OWORD *v6;
  __int128 v7;
  _BYTE *v8;
  void *__p[2];
  uint64_t v10;
  char v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  sub_2102323F4(a2, &v13);
  v4 = operator new(0x28uLL);
  v5 = v14;
  *v4 = v13;
  v4[1] = v5;
  *((_DWORD *)v4 + 8) = v15;
  *((_BYTE *)v4 + 36) = 0;
  sub_2102323F4(a2 + 328, &v13);
  v6 = operator new(0x28uLL);
  v7 = v14;
  *v6 = v13;
  v6[1] = v7;
  *((_DWORD *)v6 + 8) = v15;
  *((_BYTE *)v6 + 36) = 0;
  DWORD2(v14) = 0;
  if (a2[40])
    sub_20EB9CFE0((uint64_t)&v12, (uint64_t)&v13, (uint64_t)(a2 + 16));
  else
    sub_20E9737A0(&v13, "nullopt");
  if (DWORD2(v14) == -1)
    sub_20E877AB8();
  v12 = &v11;
  ((void (*)(void **__return_ptr, char **, __int128 *))off_24C9C56E0[DWORD2(v14)])(__p, &v12, &v13);
  if (DWORD2(v14) != -1)
    ((void (*)(char **, __int128 *))off_24C9C56C8[DWORD2(v14)])(&v12, &v13);
  *(_QWORD *)a1 = "anchor_id";
  *(_QWORD *)(a1 + 8) = 9;
  sub_20E860C04((_BYTE *)(a1 + 16), v4, 0x24uLL);
  *(_QWORD *)(a1 + 40) = "kf_anchor_id";
  *(_QWORD *)(a1 + 48) = 12;
  sub_20E860C04((_BYTE *)(a1 + 56), v6, 0x24uLL);
  *(_QWORD *)(a1 + 80) = "group_id";
  *(_QWORD *)(a1 + 88) = 8;
  v8 = (_BYTE *)(a1 + 96);
  if (SHIBYTE(v10) < 0)
  {
    sub_20E860C04(v8, __p[0], (unint64_t)__p[1]);
    if (SHIBYTE(v10) < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)v8 = *(_OWORD *)__p;
    *(_QWORD *)(a1 + 112) = v10;
  }
  operator delete(v6);
  operator delete(v4);
}

void sub_20EB9C49C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  void *v18;
  void *v19;
  uint64_t v20;
  void **v21;
  void **v22;

  if (*(char *)(v20 + 79) < 0)
  {
    operator delete(*v22);
    if ((*(char *)(v20 + 39) & 0x80000000) == 0)
    {
LABEL_3:
      if ((a15 & 0x80000000) == 0)
      {
LABEL_8:
        operator delete(v19);
        operator delete(v18);
        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(__p);
      goto LABEL_8;
    }
  }
  else if ((*(char *)(v20 + 39) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v21);
  if ((a15 & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

uint64_t sub_20EB9C548(uint64_t a1)
{
  if ((*(char *)(a1 + 119) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 79) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(*(void **)(a1 + 56));
    if ((*(char *)(a1 + 39) & 0x80000000) == 0)
      return a1;
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 96));
  if (*(char *)(a1 + 79) < 0)
    goto LABEL_6;
LABEL_3:
  if ((*(char *)(a1 + 39) & 0x80000000) == 0)
    return a1;
LABEL_7:
  operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_20EB9C5B8(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;

  for (i = *(_QWORD *)(a1 + 16); i != a2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 200;
    v6 = *(_QWORD *)(i - 24);
    if (v6)
    {
      v7 = *(_QWORD *)(i - 16);
      v8 = *(void **)(i - 24);
      if (v7 != v6)
      {
        do
        {
          if (*(char *)(v7 - 1) < 0)
            operator delete(*(void **)(v7 - 24));
          v7 -= 24;
        }
        while (v7 != v6);
        v8 = *(void **)(i - 24);
      }
      *(_QWORD *)(i - 16) = v6;
      operator delete(v8);
    }
    v9 = *(_QWORD *)(i - 64);
    if (v9)
    {
      v10 = *(_QWORD *)(i - 56);
      v5 = *(void **)(i - 64);
      if (v10 != v9)
      {
        do
        {
          if (*(char *)(v10 - 1) < 0)
            operator delete(*(void **)(v10 - 24));
          v10 -= 24;
        }
        while (v10 != v9);
        v5 = *(void **)(i - 64);
      }
      *(_QWORD *)(i - 56) = v9;
      operator delete(v5);
    }
  }
}

void sub_20EB9C69C(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;
  void **v7;
  void *v8;
  void **v9;
  void *v10;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 == v2)
    {
      v1[1] = v2;
      operator delete(v5);
    }
    else
    {
      do
      {
        if (*((_BYTE *)v4 - 8))
        {
          v6 = (void **)*(v4 - 6);
          if (v6)
          {
            v7 = (void **)*(v4 - 5);
            v8 = *(v4 - 6);
            if (v7 != v6)
            {
              do
              {
                if (*((char *)v7 - 1) < 0)
                  operator delete(*(v7 - 3));
                v7 -= 3;
              }
              while (v7 != v6);
              v8 = *(v4 - 6);
            }
            *(v4 - 5) = v6;
            operator delete(v8);
          }
        }
        v9 = v4 - 20;
        if (*((char *)v4 - 137) < 0)
          operator delete(*v9);
        v4 -= 20;
      }
      while (v9 != v2);
      v10 = **a1;
      v1[1] = v2;
      operator delete(v10);
    }
  }
}

void sub_20EB9C790(uint64_t a1, unint64_t a2)
{
  char **v2;
  char **v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  char **v12;

  v2 = *(char ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) < a2)
  {
    if (a2 >= 0x555555555555556)
      sub_20E867F44();
    v4 = *(char ***)(a1 + 8);
    v5 = 48 * a2;
    v6 = (char *)operator new(48 * a2);
    v7 = &v6[v5];
    v8 = &v6[(char *)v4 - (char *)v2];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v2)
LABEL_9:
        operator delete(v2);
    }
    else
    {
      v9 = &v6[(char *)v4 - (char *)v2];
      do
      {
        v10 = *((_OWORD *)v4 - 3);
        v4 -= 6;
        *((_OWORD *)v9 - 3) = v10;
        v9 -= 48;
        *((_QWORD *)v9 + 2) = v4[2];
        *v4 = 0;
        v4[1] = 0;
        v4[2] = 0;
        v11 = *(_OWORD *)(v4 + 3);
        *((_QWORD *)v9 + 5) = v4[5];
        *(_OWORD *)(v9 + 24) = v11;
        v4[4] = 0;
        v4[5] = 0;
        v4[3] = 0;
      }
      while (v4 != v2);
      v2 = *(char ***)a1;
      v12 = *(char ***)(a1 + 8);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      while (v12 != v2)
      {
        v12 -= 6;
        sub_20EB90FE0(v12);
      }
      if (v2)
        goto LABEL_9;
    }
  }
}

uint64_t sub_20EB9C8A0(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 48;
    sub_20EB90FE0((char **)(i - 48));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_20EB9C8F0(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  __int128 v5;

  v4 = sub_20EB9CA10(a1, (uint64_t *)a2) + 3;
  if (*(char *)(a2 + 47) < 0)
  {
    sub_20E860C04(v4, *(void **)(a2 + 24), *(_QWORD *)(a2 + 32));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 24);
    v4[2] = *(_QWORD *)(a2 + 40);
    *(_OWORD *)v4 = v5;
  }
  return a1;
}

void sub_20EB9C968(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v3;
  char *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v3 = (char *)*v1;
  if (*v1)
  {
    v4 = (char *)v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      do
      {
        if (*(v4 - 48))
        {
          v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 7);
          if (v6)
          {
            p_shared_owners = (unint64_t *)&v6->__shared_owners_;
            do
              v8 = __ldaxr(p_shared_owners);
            while (__stlxr(v8 - 1, p_shared_owners));
            if (!v8)
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
          }
        }
        if (*(v4 - 304))
        {
          if (*(v4 - 305) < 0)
            operator delete(*((void **)v4 - 41));
        }
        v4 -= 344;
      }
      while (v4 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EB9CA10(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  char *v8;

  a1[2] = 0;
  v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = v5 - *a2;
  if (v5 != *a2)
  {
    v7 = 0x82FA0BE82FA0BE83 * (v6 >> 3);
    if (v7 >= 0xBE82FA0BE82FA1)
      sub_20E867F44();
    v8 = (char *)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[344 * v7];
    a1[1] = sub_20EB9CB78(v3, v4, v5, (uint64_t)v8);
  }
  return a1;
}

void sub_20EB9CAC4(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v2;
  char *v4;
  char *v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v1[1] = v2;
  v4 = (char *)*v1;
  if (*v1)
  {
    v5 = (char *)v1[1];
    v6 = *v1;
    if (v5 != v4)
    {
      do
      {
        if (*(v5 - 48))
        {
          v7 = (std::__shared_weak_count *)*((_QWORD *)v5 - 7);
          if (v7)
          {
            p_shared_owners = (unint64_t *)&v7->__shared_owners_;
            do
              v9 = __ldaxr(p_shared_owners);
            while (__stlxr(v9 - 1, p_shared_owners));
            if (!v9)
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
          }
        }
        if (*(v5 - 304))
        {
          if (*(v5 - 305) < 0)
            operator delete(*((void **)v5 - 41));
        }
        v5 -= 344;
      }
      while (v5 != v4);
      v6 = *v1;
    }
    v1[1] = v4;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EB9CB78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v24;

  v4 = a4;
  v24 = a4;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_OWORD *)v4 = *(_OWORD *)v6;
      *(_BYTE *)(v4 + 16) = 0;
      *(_BYTE *)(v4 + 40) = 0;
      if (*(_BYTE *)(v6 + 40))
      {
        if (*(char *)(v6 + 39) < 0)
        {
          sub_20E860C04((_BYTE *)(v4 + 16), *(void **)(v6 + 16), *(_QWORD *)(v6 + 24));
        }
        else
        {
          v8 = *(_OWORD *)(v6 + 16);
          *(_QWORD *)(v4 + 32) = *(_QWORD *)(v6 + 32);
          *(_OWORD *)(v4 + 16) = v8;
        }
        *(_BYTE *)(v4 + 40) = 1;
      }
      v9 = *(_OWORD *)(v6 + 48);
      v10 = *(_OWORD *)(v6 + 80);
      *(_OWORD *)(v4 + 64) = *(_OWORD *)(v6 + 64);
      *(_OWORD *)(v4 + 80) = v10;
      *(_OWORD *)(v4 + 48) = v9;
      v11 = *(_OWORD *)(v6 + 96);
      v12 = *(_OWORD *)(v6 + 112);
      v13 = *(_OWORD *)(v6 + 144);
      *(_OWORD *)(v4 + 128) = *(_OWORD *)(v6 + 128);
      *(_OWORD *)(v4 + 144) = v13;
      *(_OWORD *)(v4 + 96) = v11;
      *(_OWORD *)(v4 + 112) = v12;
      v14 = *(_OWORD *)(v6 + 160);
      v15 = *(_OWORD *)(v6 + 176);
      v16 = *(_OWORD *)(v6 + 208);
      *(_OWORD *)(v4 + 192) = *(_OWORD *)(v6 + 192);
      *(_OWORD *)(v4 + 208) = v16;
      *(_OWORD *)(v4 + 160) = v14;
      *(_OWORD *)(v4 + 176) = v15;
      v17 = *(_OWORD *)(v6 + 224);
      v18 = *(_OWORD *)(v6 + 240);
      v19 = *(_OWORD *)(v6 + 256);
      *(_BYTE *)(v4 + 272) = *(_BYTE *)(v6 + 272);
      *(_OWORD *)(v4 + 240) = v18;
      *(_OWORD *)(v4 + 256) = v19;
      *(_OWORD *)(v4 + 224) = v17;
      *(_BYTE *)(v4 + 280) = 0;
      *(_BYTE *)(v4 + 296) = 0;
      if (*(_BYTE *)(v6 + 296))
      {
        *(_QWORD *)(v4 + 280) = *(_QWORD *)(v6 + 280);
        v20 = *(_QWORD *)(v6 + 288);
        *(_QWORD *)(v4 + 288) = v20;
        if (v20)
        {
          v21 = (unint64_t *)(v20 + 8);
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        *(_BYTE *)(v4 + 296) = 1;
      }
      v7 = *(_OWORD *)(v6 + 304);
      *(_QWORD *)(v4 + 320) = *(_QWORD *)(v6 + 320);
      *(_OWORD *)(v4 + 304) = v7;
      *(_OWORD *)(v4 + 328) = *(_OWORD *)(v6 + 328);
      v6 += 344;
      v4 = v24 + 344;
      v24 += 344;
    }
    while (v6 != a3);
  }
  return v4;
}

void sub_20EB9CCEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void **v10;

  if (*(_BYTE *)(v9 + 40))
  {
    if (*(char *)(v9 + 39) < 0)
      operator delete(*v10);
  }
  sub_20EB9CD18((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EB9CD18(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (1)
    {
      if (v3 == v4)
        return a1;
      if (!*(_BYTE *)(v3 - 48))
        goto LABEL_11;
      v5 = *(std::__shared_weak_count **)(v3 - 56);
      if (!v5)
        goto LABEL_11;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
        if (!*(_BYTE *)(v3 - 304))
          goto LABEL_4;
      }
      else
      {
LABEL_11:
        if (!*(_BYTE *)(v3 - 304))
          goto LABEL_4;
      }
      if (*(char *)(v3 - 305) < 0)
        operator delete(*(void **)(v3 - 328));
LABEL_4:
      v3 -= 344;
    }
  }
  return a1;
}

char *sub_20EB9CDDC(void **a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  __int128 v8;
  char *v9;
  char *v10;
  __int128 v11;
  __int128 v12;
  char *v13;
  void **v14;
  void **v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  void **v19;

  v2 = 0xEEEEEEEEEEEEEEEFLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0x222222222222222)
    sub_20E867F44();
  if (0xDDDDDDDDDDDDDDDELL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v3)
    v3 = 0xDDDDDDDDDDDDDDDELL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xEEEEEEEEEEEEEEEFLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x111111111111111)
    v6 = 0x222222222222222;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0x222222222222222)
      sub_20E877A38();
    v7 = (char *)operator new(120 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = *(_OWORD *)(a2 + 16);
  v9 = &v7[120 * v2];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v8;
  v10 = &v7[120 * v6];
  *((_QWORD *)v9 + 4) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)(v9 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(a2 + 56);
  *((_QWORD *)v9 + 9) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v11 = *(_OWORD *)(a2 + 80);
  v12 = *(_OWORD *)(a2 + 96);
  *((_QWORD *)v9 + 14) = *(_QWORD *)(a2 + 112);
  *((_OWORD *)v9 + 5) = v11;
  *((_OWORD *)v9 + 6) = v12;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  v13 = v9 + 120;
  v14 = (void **)*a1;
  v15 = (void **)a1[1];
  if (v15 != *a1)
  {
    do
    {
      *(_OWORD *)(v9 - 120) = *(_OWORD *)(v15 - 15);
      v16 = *(_OWORD *)(v15 - 13);
      *((_QWORD *)v9 - 11) = *(v15 - 11);
      *(_OWORD *)(v9 - 104) = v16;
      *(v15 - 12) = 0;
      *(v15 - 11) = 0;
      *(v15 - 13) = 0;
      *((_OWORD *)v9 - 5) = *((_OWORD *)v15 - 5);
      v17 = *((_OWORD *)v15 - 4);
      *((_QWORD *)v9 - 6) = *(v15 - 6);
      *((_OWORD *)v9 - 4) = v17;
      *(v15 - 7) = 0;
      *(v15 - 6) = 0;
      *(v15 - 8) = 0;
      *(_OWORD *)(v9 - 40) = *(_OWORD *)(v15 - 5);
      v18 = *(_OWORD *)(v15 - 3);
      *((_QWORD *)v9 - 1) = *(v15 - 1);
      *(_OWORD *)(v9 - 24) = v18;
      v9 -= 120;
      *(v15 - 3) = 0;
      *(v15 - 2) = 0;
      *(v15 - 1) = 0;
      v15 -= 15;
    }
    while (v15 != v14);
    v15 = (void **)*a1;
    v19 = (void **)a1[1];
    *a1 = v9;
    a1[1] = v13;
    a1[2] = v10;
    while (1)
    {
      if (v19 == v15)
        goto LABEL_24;
      if (*((char *)v19 - 1) < 0)
      {
        operator delete(*(v19 - 3));
        if (*((char *)v19 - 41) < 0)
        {
LABEL_21:
          operator delete(*(v19 - 8));
          if ((*((char *)v19 - 81) & 0x80000000) == 0)
            goto LABEL_14;
          goto LABEL_22;
        }
      }
      else if (*((char *)v19 - 41) < 0)
      {
        goto LABEL_21;
      }
      if ((*((char *)v19 - 81) & 0x80000000) == 0)
        goto LABEL_14;
LABEL_22:
      operator delete(*(v19 - 13));
LABEL_14:
      v19 -= 15;
    }
  }
  *a1 = v9;
  a1[1] = v13;
  a1[2] = v10;
LABEL_24:
  if (v15)
    operator delete(v15);
  return v13;
}

void sub_20EB9CFE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  size_t v10;
  void **v11;
  unint64_t v12;
  unint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *__dst[2];
  unint64_t v23;
  _QWORD v24[5];
  _QWORD *v25;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20E863438(v5);
  v24[0] = v5;
  v6 = *(char *)(a3 + 23);
  if (v6 >= 0)
    v7 = a3;
  else
    v7 = *(_QWORD *)a3;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a3 + 23);
  else
    v8 = *(_QWORD *)(a3 + 8);
  sub_20E86A980((_QWORD *)(v5 + 16), v7, v8);
  v9 = *(_DWORD *)(v5 + 120);
  if ((v9 & 0x10) != 0)
  {
    v12 = *(_QWORD *)(v5 + 112);
    v13 = *(_QWORD *)(v5 + 72);
    if (v12 < v13)
    {
      *(_QWORD *)(v5 + 112) = v13;
      v12 = v13;
    }
    v14 = *(const void **)(v5 + 64);
    v10 = v12 - (_QWORD)v14;
    if (v12 - (unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_28;
  }
  else
  {
    if ((v9 & 8) == 0)
    {
      v10 = 0;
      HIBYTE(v23) = 0;
      v11 = __dst;
      goto LABEL_20;
    }
    v14 = *(const void **)(v5 + 40);
    v10 = *(_QWORD *)(v5 + 56) - (_QWORD)v14;
    if (v10 >= 0x7FFFFFFFFFFFFFF8)
LABEL_28:
      sub_20E860B7C();
  }
  if (v10 >= 0x17)
  {
    v15 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v15 = v10 | 7;
    v16 = v15 + 1;
    v11 = (void **)operator new(v15 + 1);
    __dst[1] = (void *)v10;
    v23 = v16 | 0x8000000000000000;
    __dst[0] = v11;
    goto LABEL_19;
  }
  HIBYTE(v23) = v10;
  v11 = __dst;
  if (v10)
LABEL_19:
    memmove(v11, v14, v10);
LABEL_20:
  *((_BYTE *)v11 + v10) = 0;
  v17 = v24[0];
  if (v24[0])
  {
    v18 = MEMORY[0x24BEDB7F0];
    v19 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v24[0] = *MEMORY[0x24BEDB7F0];
    v20 = *(_QWORD *)(v18 + 72);
    *(_QWORD *)(v17 + *(_QWORD *)(v19 - 24)) = *(_QWORD *)(v18 + 64);
    *(_QWORD *)(v17 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v17 + 16) = v20;
    if (*(char *)(v17 + 111) < 0)
      operator delete(*(void **)(v17 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v17 + 128);
    MEMORY[0x212BC6398](v17, 0x10B2C40EED050F3);
  }
  v24[0] = a2;
  v24[1] = __dst;
  v24[2] = a2;
  v24[3] = __dst;
  v24[4] = __dst;
  v21 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v21 == -1)
    sub_20E877AB8();
  v25 = v24;
  ((void (*)(_QWORD **, uint64_t))off_24C9C56B0[v21])(&v25, a2);
  if (SHIBYTE(v23) < 0)
    operator delete(__dst[0]);
}

void sub_20EB9D244(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20EB9D268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EB9D284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20FD0DE48((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20EB9D298(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void **v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  __int128 v9;
  char *v10;
  void **v11;
  _BYTE *v12;
  size_t v13;
  char *v14;
  char *v15;
  void **v16;
  char *v17;
  void **v18;
  char *v19;
  char *v20;
  void **v21;
  _BYTE __p[24];

  *(_OWORD *)(a1 + 8) = 0u;
  v4 = a1 + 8;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  v5 = (void **)(a1 + 64);
  *(_OWORD *)(a1 + 120) = 0u;
  v6 = a1 + 120;
  *(_OWORD *)(a1 + 168) = 0u;
  v7 = (void **)(a1 + 168);
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_QWORD *)a1 = &off_24C9C5708;
  *(_QWORD *)(a1 + 56) = &unk_24C9C5740;
  *(_QWORD *)(a1 + 112) = &unk_24C9C5768;
  v8 = operator new();
  *(_QWORD *)v8 = *(_QWORD *)a2;
  *(_OWORD *)(v8 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(v8 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v8 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(v8 + 72) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)(v8 + 8) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(v8 + 80) = 0;
  *(_BYTE *)(v8 + 128) = 0;
  if (*(_BYTE *)(a2 + 128))
  {
    v9 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(v8 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(v8 + 96) = v9;
    *(_OWORD *)(v8 + 112) = *(_OWORD *)(a2 + 112);
    *(_BYTE *)(v8 + 128) = 1;
  }
  *(_QWORD *)(a1 + 216) = v8;
  *(_QWORD *)(a1 + 224) = sub_20EBA0D80;
  v10 = (char *)operator new(0x20uLL);
  strcpy(v10, "Keypoint Semantics Mapper Node");
  *(_QWORD *)__p = operator new(0x60uLL);
  *(_OWORD *)&__p[8] = xmmword_210316910;
  strcpy(*(char **)__p, "Wrapper on Scene Intelligence Semantics, which extract semantics information per keypoint");
  if (*(char *)(a1 + 191) < 0)
    sub_20E867CBC(v7, v10, 0x1EuLL);
  else
    sub_20E867BF8(v7, v10, 0x1EuLL);
  v11 = (void **)(a1 + 192);
  if ((_BYTE *)(a1 + 192) != __p)
  {
    if (*(char *)(a1 + 215) < 0)
    {
      if (__p[23] >= 0)
        v12 = __p;
      else
        v12 = *(_BYTE **)__p;
      if (__p[23] >= 0)
        v13 = __p[23];
      else
        v13 = *(_QWORD *)&__p[8];
      sub_20E867CBC(v11, v12, v13);
    }
    else if ((__p[23] & 0x80) != 0)
    {
      sub_20E867BF8(v11, *(void **)__p, *(size_t *)&__p[8]);
    }
    else
    {
      *(_OWORD *)v11 = *(_OWORD *)__p;
      *(_QWORD *)(a1 + 208) = *(_QWORD *)&__p[16];
    }
  }
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  operator delete(v10);
  v14 = (char *)operator new(0x20uLL);
  strcpy(v14, "KeypointSemanticsMappingChannel");
  v15 = (char *)operator new(0x48uLL);
  strcpy(v15, "Converts the pose metadata to a vector of semantics per keypoint");
  sub_20E860C04(__p, v14, 0x1FuLL);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)v4);
  *(_OWORD *)v4 = *(_OWORD *)__p;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)&__p[16];
  sub_20E860C04(__p, v15, 0x40uLL);
  v16 = (void **)(a1 + 32);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*v16);
  *(_OWORD *)v16 = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)&__p[16];
  operator delete(v15);
  operator delete(v14);
  v17 = (char *)operator new(0x20uLL);
  strcpy(v17, "Forwards the ML metadata");
  if (*(char *)(a1 + 87) < 0)
    operator delete(*v5);
  strcpy((char *)(a1 + 64), "MLMetadataFwdChannel");
  *(_BYTE *)(a1 + 87) = 20;
  sub_20E860C04(__p, v17, 0x18uLL);
  v18 = (void **)(a1 + 88);
  if (*(char *)(a1 + 111) < 0)
    operator delete(*v18);
  *(_OWORD *)v18 = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)&__p[16];
  operator delete(v17);
  v19 = (char *)operator new(0x20uLL);
  strcpy(v19, "CameraCalibrationChannel");
  v20 = (char *)operator new(0x38uLL);
  strcpy(v20, "Sets the camera calibration for the semantics camera");
  sub_20E860C04(__p, v19, 0x18uLL);
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)v6);
  *(_OWORD *)v6 = *(_OWORD *)__p;
  *(_QWORD *)(v6 + 16) = *(_QWORD *)&__p[16];
  sub_20E860C04(__p, v20, 0x34uLL);
  v21 = (void **)(a1 + 144);
  if (*(char *)(a1 + 167) < 0)
    operator delete(*v21);
  *(_OWORD *)v21 = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)&__p[16];
  operator delete(v20);
  operator delete(v19);
  return a1;
}

void sub_20EB9D700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  void *v16;
  uint64_t v18;

  operator delete(v16);
  v18 = *(_QWORD *)(v15 + 216);
  *(_QWORD *)(v15 + 216) = 0;
  if (v18)
    (*(void (**)(void))(v15 + 224))();
  sub_20EB9D7AC(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_20EB9D7AC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C9C5820;
  *(_QWORD *)(a1 + 56) = &unk_24C9C5848;
  *(_QWORD *)(a1 + 112) = &unk_24C9C5870;
  if (*(char *)(a1 + 215) < 0)
  {
    operator delete(*(void **)(a1 + 192));
    if ((*(char *)(a1 + 191) & 0x80000000) == 0)
    {
LABEL_3:
      *(_QWORD *)(a1 + 112) = off_24C9C58E8;
      if ((*(char *)(a1 + 167) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(char *)(a1 + 191) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 168));
  *(_QWORD *)(a1 + 112) = off_24C9C58E8;
  if ((*(char *)(a1 + 167) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 143) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(*(void **)(a1 + 144));
  if ((*(char *)(a1 + 143) & 0x80000000) == 0)
  {
LABEL_5:
    *(_QWORD *)(a1 + 56) = off_24C9C58C0;
    if ((*(char *)(a1 + 111) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(*(void **)(a1 + 120));
  *(_QWORD *)(a1 + 56) = off_24C9C58C0;
  if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  operator delete(*(void **)(a1 + 88));
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
LABEL_7:
    *(_QWORD *)a1 = off_24C9C5898;
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_8;
LABEL_16:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_17;
  }
LABEL_15:
  operator delete(*(void **)(a1 + 64));
  *(_QWORD *)a1 = off_24C9C5898;
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_16;
LABEL_8:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_17:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20EB9D8F8(uint64_t a1@<X0>, uint64_t **a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  char *v9;
  uint64_t *i;
  uint64_t v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  float64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  float64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  int32x2_t v42;
  int v43;
  __int16 v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  float64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  int32x2_t v57;
  unint64_t v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  float *v80;
  float *v81;
  uint64_t v82;
  double v83;
  double v84;
  float v85;
  float v86;
  float64x2_t v87;
  double v88;
  double v89;
  uint64_t v90;
  double v91;
  double v92;
  double v93;
  float64x2_t v94;
  double v95;
  double v96;
  double v97;
  int32x2_t v98;
  int32x2_t v100;
  int32x2_t v101;
  unint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  int64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  _BYTE *v111;
  unint64_t *v112;
  int64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  _OWORD *v118;
  char *v119;
  uint64_t v120;
  __int128 v121;
  unint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  char *v127;
  unint64_t v128;
  unint64_t v129;
  char *v130;
  char *v131;
  __int128 v132;
  char *v133;
  void *v134;
  _QWORD *v135;
  int64_t v136;
  unint64_t v137;
  char *v138;
  uint64_t v139;
  char *v140;
  char *v141;
  __int128 v142;
  _BYTE *v143;
  _BYTE *v144;
  int64_t v145;
  char *v146;
  char *v147;
  void *v148;
  std::logic_error *exception;
  uint64_t *v151;
  uint64_t v153;
  std::__shared_weak_count *v154;
  uint64_t *v155;
  std::__shared_weak_count *v156;
  float64_t v157;
  int32x2_t v158;
  float64_t v159;
  float64x2_t v160;
  _QWORD *v161;
  float *v162;
  char *v163;
  char *v164;
  char *v165;
  __int128 v166;
  int v167;
  _QWORD v168[2];
  std::__shared_weak_count *v169;
  _QWORD v170[2];
  std::__shared_weak_count *v171;
  float64x2_t v172;
  void **p_p;
  float64x2_t v174;
  int32x2_t v175;
  float64x2_t v176;
  void *__p;
  float64_t v178;
  std::__shared_weak_count *v179;
  float64_t v180;
  int v181;
  int32x2_t v182;
  int v183;
  __int16 v184;
  float64_t v185;
  std::__shared_weak_count *v186;
  float64_t v187;
  std::__shared_weak_count *v188;
  std::string v189;

  v3 = *a2;
  v4 = a2[1];
  if (*a2 == v4)
  {
    *a3 = 0;
    a3[1] = 0;
    return;
  }
  if (0x8E38E38E38E38E39 * (v4 - v3) > 0x492492492492492)
    sub_20E867F44();
  v163 = (char *)operator new(0x1C71C71C71C71C78 * (v4 - v3));
  v164 = v163;
  v165 = &v163[0x1C71C71C71C71C78 * (v4 - v3)];
  __asm { FMOV            V0.2D, #0.5 }
  v160 = _Q0;
  v151 = v4;
  while (2)
  {
    v11 = *v3;
    v166 = *(_OWORD *)(v3 + 1);
    v167 = *((_DWORD *)v3 + 6);
    v12 = (_QWORD *)v3[7];
    v155 = v3;
    if (!v12)
    {
      v26 = 0;
      v27 = 0;
      goto LABEL_162;
    }
    v14 = v12[1];
    v13 = (std::__shared_weak_count *)v12[2];
    v170[0] = &off_24CA1A9A0;
    v170[1] = v14;
    v171 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }
    sub_20EB9ECBC((uint64_t)v170, &v172);
    v17 = (std::__shared_weak_count *)p_p;
    if (p_p)
    {
      v18 = (unint64_t *)(p_p + 1);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
      do
        v20 = __ldxr(v18);
      while (__stxr(v20 + 1, v18));
      v21 = v174.f64[1];
      v159 = v174.f64[0];
      v158 = v175;
      do
        v22 = __ldxr(v18);
      while (__stxr(v22 + 1, v18));
      do
        v23 = __ldaxr(v18);
      while (__stlxr(v23 - 1, v18));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
      do
        v24 = __ldaxr(v18);
      while (__stlxr(v24 - 1, v18));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
      v25 = (std::__shared_weak_count *)p_p;
      if (p_p)
      {
        v28 = (unint64_t *)(p_p + 1);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
          v170[0] = &off_24CA1A9A0;
          v30 = v171;
          if (!v171)
            goto LABEL_35;
          goto LABEL_30;
        }
      }
    }
    else
    {
      v21 = v174.f64[1];
      v159 = v174.f64[0];
      v158 = v175;
    }
    v170[0] = &off_24CA1A9A0;
    v30 = v171;
    if (!v171)
      goto LABEL_35;
LABEL_30:
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
LABEL_35:
    v33 = v3[7];
    v35 = *(_QWORD *)(v33 + 32);
    v34 = *(std::__shared_weak_count **)(v33 + 40);
    v168[0] = &off_24CA1A9A0;
    v168[1] = v35;
    v169 = v34;
    if (v34)
    {
      v36 = (unint64_t *)&v34->__shared_owners_;
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
    }
    sub_210148DBC((uint64_t)v168, (uint64_t)&v172);
    __p = &off_24C9C02C8;
    v38 = v172.f64[1];
    v39 = (std::__shared_weak_count *)p_p;
    if (p_p)
    {
      v40 = (unint64_t *)(p_p + 1);
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
      v42 = v175;
      v43 = LODWORD(v176.f64[0]);
      v44 = WORD2(v176.f64[0]);
      do
        v45 = __ldxr(v40);
      while (__stxr(v45 + 1, v40));
    }
    else
    {
      v42 = v175;
      v43 = LODWORD(v176.f64[0]);
      v44 = WORD2(v176.f64[0]);
    }
    v178 = v38;
    v179 = v39;
    v180 = v174.f64[0];
    v181 = LODWORD(v174.f64[1]);
    v182 = v42;
    v183 = v43;
    v184 = v44;
    if (!v39)
      goto LABEL_49;
    v46 = (unint64_t *)&v39->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
      *(_QWORD *)&v172.f64[0] = &off_24C9AD200;
      v48 = (std::__shared_weak_count *)p_p;
      if (!p_p)
        goto LABEL_55;
    }
    else
    {
LABEL_49:
      *(_QWORD *)&v172.f64[0] = &off_24C9AD200;
      v48 = (std::__shared_weak_count *)p_p;
      if (!p_p)
        goto LABEL_55;
    }
    v49 = (unint64_t *)&v48->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
LABEL_55:
    *(_QWORD *)&v172.f64[0] = &off_24C9AD6F0;
    sub_20EBA0A88((uint64_t)&__p, (uint64_t)&v172.f64[1]);
    v51 = v172.f64[1];
    v52 = (std::__shared_weak_count *)p_p;
    v185 = v172.f64[1];
    v186 = (std::__shared_weak_count *)p_p;
    if (p_p)
    {
      v53 = (unint64_t *)(p_p + 1);
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
    }
    if (v51 == 0.0 || **(uint64_t (****)())&v51 != off_24CA19008)
    {
      v187 = 0.0;
      v188 = 0;
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_20EBA028C((char *)&v189, (uint64_t)&v172);
      std::logic_error::logic_error(exception, &v189);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
      __cxa_throw(exception, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
    }
    v187 = v51;
    v188 = v52;
    v161 = v12;
    if (v52)
    {
      v55 = (unint64_t *)&v52->__shared_owners_;
      do
        v56 = __ldxr(v55);
      while (__stxr(v56 + 1, v55));
      v157 = v174.f64[0];
      v57 = v175;
      do
        v58 = __ldxr(v55);
      while (__stxr(v58 + 1, v55));
      do
        v59 = __ldaxr(v55);
      while (__stlxr(v59 - 1, v55));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
      v60 = v186;
      if (!v186)
      {
LABEL_74:
        v63 = (std::__shared_weak_count *)p_p;
        if (!p_p)
          goto LABEL_80;
        goto LABEL_75;
      }
    }
    else
    {
      v157 = v174.f64[0];
      v57 = v175;
      v60 = v186;
      if (!v186)
        goto LABEL_74;
    }
    v61 = (unint64_t *)&v60->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (v62)
      goto LABEL_74;
    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
    std::__shared_weak_count::__release_weak(v60);
    v63 = (std::__shared_weak_count *)p_p;
    if (!p_p)
      goto LABEL_80;
LABEL_75:
    v64 = (unint64_t *)&v63->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
LABEL_80:
    v66 = v179;
    if (!v179)
      goto LABEL_84;
    v67 = (unint64_t *)&v179->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
      v156 = v52;
      if (v52)
      {
LABEL_85:
        v69 = (unint64_t *)&v52->__shared_owners_;
        do
          v70 = __ldxr(v69);
        while (__stxr(v70 + 1, v69));
        do
          v71 = __ldxr(v69);
        while (__stxr(v71 + 1, v69));
        do
          v72 = __ldxr(v69);
        while (__stxr(v72 + 1, v69));
        do
          v73 = __ldaxr(v69);
        while (__stlxr(v73 - 1, v69));
        if (!v73)
        {
          ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
          std::__shared_weak_count::__release_weak(v156);
        }
        do
          v74 = __ldaxr(v69);
        while (__stlxr(v74 - 1, v69));
        if (!v74)
        {
          ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
          std::__shared_weak_count::__release_weak(v156);
        }
        do
          v75 = __ldaxr(v69);
        while (__stlxr(v75 - 1, v69));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
          std::__shared_weak_count::__release_weak(v156);
        }
      }
    }
    else
    {
LABEL_84:
      v156 = v52;
      if (v52)
        goto LABEL_85;
    }
    v154 = v17;
    v168[0] = &off_24CA1A9A0;
    v76 = v169;
    if (v169)
    {
      v77 = (unint64_t *)&v169->__shared_owners_;
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 - 1, v77));
      if (!v78)
      {
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
      }
    }
    v79 = *(_QWORD *)(a1 + 216);
    v81 = (float *)v3[4];
    v80 = (float *)v3[5];
    __p = 0;
    v178 = 0.0;
    v179 = 0;
    v162 = v80;
    v82 = (char *)v80 - (char *)v81;
    if (v80 == v81)
    {
      v27 = 0;
      v26 = 0;
      v12 = 0;
      goto LABEL_152;
    }
    if (v82 < 0)
      sub_20E867F44();
    v153 = v11;
    __p = operator new((unint64_t)v82 >> 2);
    v178 = *(double *)&__p;
    v179 = (std::__shared_weak_count *)((char *)__p + 8 * (v82 >> 5));
    v83 = (double)((unint64_t)LODWORD(v21) - 1);
    v84 = (double)(unint64_t)(HIDWORD(*(_QWORD *)&v21) - 1);
    do
    {
      v86 = *v81;
      v85 = v81[1];
      sub_20E8BE424((uint64_t)&v172);
      v87 = vaddq_f64(v176, vmlaq_n_f64(vmulq_n_f64(v172, v86), v174, v85));
      v88 = v87.f64[1];
      if (*(_BYTE *)(v79 + 128))
      {
        v89 = sqrt(vmulq_f64(v87, v87).f64[0] + v87.f64[1] * v87.f64[1]);
        v90 = 20;
        v91 = v89;
        do
        {
          v92 = v91 * v91;
          v93 = *(double *)(v79 + 80) * v92
              + 1.0
              + *(double *)(v79 + 88) * (v92 * v92)
              + *(double *)(v79 + 96) * (v92 * (v92 * v92))
              + *(double *)(v79 + 104) * (v92 * (v92 * (v92 * v92)));
          if (v93 == 0.0)
            v93 = 1.0;
          v91 = fmax(v89 / v93, 0.0);
          --v90;
        }
        while (v90);
        if (v91 > 1.57079633)
          goto LABEL_127;
        v94 = v87;
        v95 = tan(v91);
        if (v89 == 0.0)
          v96 = 1.0;
        else
          v96 = v89;
        v97 = v95 / v96;
        v87.f64[0] = v94.f64[0] * v97;
        v88 = v94.f64[1] * v97;
      }
      v98 = vmovn_s64(vcvtq_s64_f64(vaddq_f64(vaddq_f64(vmlaq_n_f64(vmulq_n_f64(vcvtq_f64_f32((float32x2_t)v161[9]), v87.f64[0]), vcvtq_f64_f32(*(float32x2_t *)((char *)v161 + 84)), v88), vcvtq_f64_f32((float32x2_t)v161[12])), v160)));
      if ((v98.i32[0] & 0x80000000) == 0 && (v98.i32[1] & 0x80000000) == 0)
      {
        if (v83 >= (double)v98.i32[0] && v84 >= (double)v98.i32[1])
        {
          v100 = vmul_s32(v158, v98);
          v101 = vmul_s32(v57, v98);
          v102 = ((unint64_t)*(unsigned int *)(*(_QWORD *)&v157
                                                    + 4 * vadd_s32(vdup_lane_s32(v101, 1), v101).u32[0]) << 32) | *(unsigned __int8 *)(*(_QWORD *)&v159 + vadd_s32(vdup_lane_s32(v100, 1), v100).u32[0]);
          v104 = *(char **)&v178;
          v103 = (char *)v179;
          if (*(_QWORD *)&v178 < (unint64_t)v179)
            goto LABEL_107;
          goto LABEL_128;
        }
LABEL_127:
        v102 = 0;
        v104 = *(char **)&v178;
        v103 = (char *)v179;
        if (*(_QWORD *)&v178 < (unint64_t)v179)
          goto LABEL_107;
        goto LABEL_128;
      }
      v102 = 0;
      v104 = *(char **)&v178;
      v103 = (char *)v179;
      if (*(_QWORD *)&v178 < (unint64_t)v179)
      {
LABEL_107:
        *(_QWORD *)v104 = v102;
        v26 = (uint64_t)(v104 + 8);
        goto LABEL_108;
      }
LABEL_128:
      v105 = (char *)__p;
      v106 = v104 - (_BYTE *)__p;
      v107 = (v104 - (_BYTE *)__p) >> 3;
      v108 = v107 + 1;
      if ((unint64_t)(v107 + 1) >> 61)
        sub_20E867F44();
      v109 = v103 - (_BYTE *)__p;
      if (v109 >> 2 > v108)
        v108 = v109 >> 2;
      if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFF8)
        v110 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v110 = v108;
      if (v110)
      {
        if (v110 >> 61)
          sub_20E877A38();
        v111 = operator new(8 * v110);
        v112 = (unint64_t *)&v111[8 * v107];
        *v112 = v102;
        v26 = (uint64_t)(v112 + 1);
        v113 = v104 - v105;
        if (v104 == v105)
        {
LABEL_146:
          __p = v112;
          v178 = *(double *)&v26;
          v179 = (std::__shared_weak_count *)&v111[8 * v110];
          if (!v104)
            goto LABEL_108;
LABEL_147:
          operator delete(v104);
          goto LABEL_108;
        }
      }
      else
      {
        v111 = 0;
        v112 = (unint64_t *)(8 * v107);
        *(_QWORD *)(8 * v107) = v102;
        v26 = 8 * v107 + 8;
        v113 = v104 - v105;
        if (v104 == v105)
          goto LABEL_146;
      }
      v114 = v113 - 8;
      if (v114 < 0x58)
        goto LABEL_207;
      if ((unint64_t)(v104 - v111 - v106) < 0x20)
        goto LABEL_207;
      v115 = (v114 >> 3) + 1;
      v116 = 8 * (v115 & 0x3FFFFFFFFFFFFFFCLL);
      v117 = &v104[-v116];
      v112 = (unint64_t *)((char *)v112 - v116);
      v118 = &v111[8 * v107 - 16];
      v119 = v104 - 16;
      v120 = v115 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v121 = *(_OWORD *)v119;
        *(v118 - 1) = *((_OWORD *)v119 - 1);
        *v118 = v121;
        v118 -= 2;
        v119 -= 32;
        v120 -= 4;
      }
      while (v120);
      v104 = v117;
      if (v115 != (v115 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_207:
        do
        {
          v122 = *((_QWORD *)v104 - 1);
          v104 -= 8;
          *--v112 = v122;
        }
        while (v104 != v105);
      }
      v104 = (char *)__p;
      __p = v112;
      v178 = *(double *)&v26;
      v179 = (std::__shared_weak_count *)&v111[8 * v110];
      if (v104)
        goto LABEL_147;
LABEL_108:
      v178 = *(double *)&v26;
      v81 += 8;
    }
    while (v81 != v162);
    v12 = __p;
    v27 = v179;
    v11 = v153;
LABEL_152:
    v4 = v151;
    if (!v156)
      goto LABEL_156;
    v123 = (unint64_t *)&v156->__shared_owners_;
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
      std::__shared_weak_count::__release_weak(v156);
      if (v154)
      {
LABEL_157:
        v125 = (unint64_t *)&v154->__shared_owners_;
        do
          v126 = __ldaxr(v125);
        while (__stlxr(v126 - 1, v125));
        if (!v126)
        {
          ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
          std::__shared_weak_count::__release_weak(v154);
        }
      }
    }
    else
    {
LABEL_156:
      if (v154)
        goto LABEL_157;
    }
LABEL_162:
    v127 = v164;
    if (v164 < v165)
    {
      *(_QWORD *)v164 = v11;
      *(_OWORD *)(v164 + 8) = v166;
      *((_DWORD *)v164 + 6) = v167;
      *((_QWORD *)v164 + 4) = v12;
      *((_QWORD *)v164 + 5) = v26;
      *((_QWORD *)v164 + 6) = v27;
      v9 = v164 + 56;
      i = v155;
    }
    else
    {
      v128 = 0x6DB6DB6DB6DB6DB7 * ((v164 - v163) >> 3) + 1;
      if (v128 > 0x492492492492492)
        sub_20E867F44();
      if (0xDB6DB6DB6DB6DB6ELL * ((v165 - v163) >> 3) > v128)
        v128 = 0xDB6DB6DB6DB6DB6ELL * ((v165 - v163) >> 3);
      if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v165 - v163) >> 3)) >= 0x249249249249249)
        v129 = 0x492492492492492;
      else
        v129 = v128;
      if (v129 > 0x492492492492492)
        sub_20E877A38();
      v130 = (char *)operator new(56 * v129);
      v131 = &v130[8 * ((v164 - v163) >> 3)];
      *(_QWORD *)v131 = v11;
      *(_OWORD *)(v131 + 8) = v166;
      *((_DWORD *)v131 + 6) = v167;
      *((_QWORD *)v131 + 4) = v12;
      *((_QWORD *)v131 + 5) = v26;
      *((_QWORD *)v131 + 6) = v27;
      v9 = v131 + 56;
      if (v164 == v163)
      {
        v163 = &v130[8 * ((v164 - v163) >> 3)];
        v165 = &v130[56 * v129];
        i = v155;
      }
      else
      {
        do
        {
          v132 = *(_OWORD *)(v127 - 56);
          *(_OWORD *)(v131 - 44) = *(_OWORD *)(v127 - 44);
          *(_OWORD *)(v131 - 56) = v132;
          *(_OWORD *)(v131 - 24) = *(_OWORD *)(v127 - 24);
          *((_QWORD *)v131 - 1) = *((_QWORD *)v127 - 1);
          v131 -= 56;
          *((_QWORD *)v127 - 3) = 0;
          *((_QWORD *)v127 - 2) = 0;
          *((_QWORD *)v127 - 1) = 0;
          v127 -= 56;
        }
        while (v127 != v163);
        v127 = v163;
        v133 = v164;
        v163 = v131;
        v165 = &v130[56 * v129];
        for (i = v155; v133 != v127; v133 -= 56)
        {
          v134 = (void *)*((_QWORD *)v133 - 3);
          if (v134)
          {
            *((_QWORD *)v133 - 2) = v134;
            operator delete(v134);
          }
        }
      }
      if (v127)
        operator delete(v127);
    }
    v164 = v9;
    v3 = i + 9;
    if (v3 != v4)
      continue;
    break;
  }
  v135 = operator new(0x30uLL);
  v135[1] = 0;
  v135[2] = 0;
  v135[3] = 0;
  *v135 = &off_24C9C5A08;
  v135[5] = 0;
  v135[4] = 0;
  v136 = v9 - v163;
  if (v9 == v163)
  {
    *a3 = v135 + 3;
    a3[1] = v135;
LABEL_195:
    operator delete(v9);
    return;
  }
  v137 = 0x6DB6DB6DB6DB6DB7 * (v136 >> 3);
  if (v137 > 0x492492492492492)
    sub_20E867F44();
  v138 = (char *)operator new(v136);
  v135[3] = v138;
  v135[4] = v138;
  v135[5] = &v138[56 * v137];
  __p = v138;
  v189.__r_.__value_.__r.__words[0] = (std::string::size_type)v138;
  *(_QWORD *)&v172.f64[0] = v135 + 5;
  *(_QWORD *)&v172.f64[1] = &v189;
  p_p = &__p;
  LOBYTE(v174.f64[0]) = 0;
  v139 = 32;
  do
  {
    v140 = &v163[v139];
    v141 = &v138[v139];
    v142 = *(_OWORD *)&v163[v139 - 32];
    *(_OWORD *)(v141 - 20) = *(_OWORD *)&v163[v139 - 20];
    *((_OWORD *)v141 - 2) = v142;
    *((_QWORD *)v141 + 1) = 0;
    *((_QWORD *)v141 + 2) = 0;
    *(_QWORD *)v141 = 0;
    v144 = *(_BYTE **)&v163[v139];
    v143 = *(_BYTE **)&v163[v139 + 8];
    v145 = v143 - v144;
    if (v143 != v144)
    {
      if (v145 < 0)
        sub_20E867F44();
      v146 = (char *)operator new(v143 - v144);
      *(_QWORD *)v141 = v146;
      *((_QWORD *)v141 + 1) = v146;
      v147 = &v146[8 * (v145 >> 3)];
      *((_QWORD *)v141 + 2) = v147;
      memcpy(v146, v144, v145);
      *((_QWORD *)v141 + 1) = v147;
    }
    __p = v141 + 24;
    v139 += 56;
  }
  while (v140 + 24 != v9);
  v135[4] = &v138[v139 - 32];
  *a3 = v135 + 3;
  a3[1] = v135;
  if (v163)
  {
    do
    {
      v148 = (void *)*((_QWORD *)v9 - 3);
      if (v148)
      {
        *((_QWORD *)v9 - 2) = v148;
        operator delete(v148);
      }
      v9 -= 56;
    }
    while (v9 != v163);
    v9 = v163;
    goto LABEL_195;
  }
}

void sub_20EB9E748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31)
{
  sub_20EB9E988(&a31);
  _Unwind_Resume(a1);
}

void sub_20EB9E75C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void **a30,void *a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  std::__shared_weak_count *v46;
  void *v48;
  uint64_t shared_owners;
  void *v50;
  void *v51;
  void *v52;

  v48 = *a30;
  if (*a30)
  {
    shared_owners = v46[1].__shared_owners_;
    v50 = *a30;
    if ((void *)shared_owners != v48)
    {
      do
      {
        v51 = *(void **)(shared_owners - 24);
        if (v51)
        {
          *(_QWORD *)(shared_owners - 16) = v51;
          operator delete(v51);
        }
        shared_owners -= 56;
      }
      while ((void *)shared_owners != v48);
      v50 = *a30;
    }
    v46[1].__shared_owners_ = (uint64_t)v48;
    operator delete(v50);
  }
  std::__shared_weak_count::~__shared_weak_count(v46);
  operator delete(v52);
  sub_20EB9E988(&a31);
  _Unwind_Resume(a1);
}

void sub_20EB9E80C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56)
{
  unint64_t *p_shared_owners;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;

  if (__p)
  {
    a56 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a19)
  {
    p_shared_owners = (unint64_t *)&a19->__shared_owners_;
    do
      v58 = __ldaxr(p_shared_owners);
    while (__stlxr(v58 - 1, p_shared_owners));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))a19->__on_zero_shared)(a19);
      std::__shared_weak_count::__release_weak(a19);
    }
  }
  if (a17)
  {
    v59 = (unint64_t *)&a17->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))a17->__on_zero_shared)(a17);
      std::__shared_weak_count::__release_weak(a17);
    }
  }
  sub_20EB9E988(&a34);
  _Unwind_Resume(a1);
}

void **sub_20EB9E988(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 3);
        if (v5)
        {
          *((_QWORD *)v3 - 2) = v5;
          operator delete(v5);
        }
        v3 -= 56;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_20EB9EA00(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
}

void sub_20EB9EA24(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
}

uint64_t sub_20EB9EA48(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C9C5708;
  *(_QWORD *)(a1 + 56) = &unk_24C9C5740;
  *(_QWORD *)(a1 + 112) = &unk_24C9C5768;
  v2 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 216) = 0;
  if (v2)
    (*(void (**)(void))(a1 + 224))();
  return sub_20EB9D7AC(a1);
}

void sub_20EB9EA9C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C9C5708;
  *(_QWORD *)(a1 + 56) = &unk_24C9C5740;
  *(_QWORD *)(a1 + 112) = &unk_24C9C5768;
  v2 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 216) = 0;
  if (v2)
    (*(void (**)(void))(a1 + 224))();
  sub_20EB9D7AC(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EB9EB04(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(a1 - 56) = &off_24C9C5708;
  v1 = a1 - 56;
  *(_QWORD *)a1 = &unk_24C9C5740;
  *(_QWORD *)(a1 + 56) = &unk_24C9C5768;
  v2 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = 0;
  if (v2)
    (*(void (**)(uint64_t))(a1 + 168))(v2);
  return sub_20EB9D7AC(v1);
}

void sub_20EB9EB5C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(a1 - 56) = &off_24C9C5708;
  v1 = a1 - 56;
  *(_QWORD *)a1 = &unk_24C9C5740;
  *(_QWORD *)(a1 + 56) = &unk_24C9C5768;
  v2 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = 0;
  if (v2)
    (*(void (**)(uint64_t))(a1 + 168))(v2);
  sub_20EB9D7AC(v1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EB9EBC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(a1 - 112) = &off_24C9C5708;
  v1 = a1 - 112;
  *(_QWORD *)(a1 - 56) = &unk_24C9C5740;
  *(_QWORD *)a1 = &unk_24C9C5768;
  v2 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;
  if (v2)
    (*(void (**)(uint64_t))(a1 + 112))(v2);
  return sub_20EB9D7AC(v1);
}

void sub_20EB9EC20(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(a1 - 112) = &off_24C9C5708;
  v1 = a1 - 112;
  *(_QWORD *)(a1 - 56) = &unk_24C9C5740;
  *(_QWORD *)a1 = &unk_24C9C5768;
  v2 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;
  if (v2)
    (*(void (**)(uint64_t))(a1 + 112))(v2);
  sub_20EB9D7AC(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20EB9ECBC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  int v8;
  __int16 v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD v22[2];
  std::__shared_weak_count *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  __int16 v28;
  uint64_t (**v29)();
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  __int16 v36;

  sub_210148DBC(a1, (uint64_t)&v29);
  v22[0] = &off_24C9C02C8;
  v3 = v30;
  v4 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v7 = v34;
    v8 = v35;
    v9 = v36;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v7 = v34;
    v8 = v35;
    v9 = v36;
  }
  v22[1] = v3;
  v23 = v4;
  v24 = v32;
  v25 = v33;
  v26 = v7;
  v27 = v8;
  v28 = v9;
  if (v4)
  {
    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v29 = &off_24C9AD200;
  v13 = v31;
  if (v31)
  {
    v14 = (unint64_t *)&v31->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v29 = &off_24C9C05B0;
  sub_20EB9FCDC((uint64_t)v22, (uint64_t)&v30);
  *a2 = &off_24C9C5910;
  sub_20EB9F030((uint64_t)&v29, (uint64_t)(a2 + 1));
  v16 = v31;
  if (v31)
  {
    v17 = (unint64_t *)&v31->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v23;
  if (v23)
  {
    v20 = (unint64_t *)&v23->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_20EB9EE88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  sub_20EA69038((uint64_t)&a16);
  sub_20EA69518((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EB9EEA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EA69518((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EB9EEB8(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EB9EF20(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EB9EF88()
{
  return 1;
}

uint64_t sub_20EB9EF90(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_20EB9EF98@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 32);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 44);
  return result;
}

uint64_t sub_20EB9EFAC(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_20EB9F030(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t (***v7)();
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t (***v21)();
  std::__shared_weak_count *v22;

  v4 = *(std::__shared_weak_count **)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 8);
  v18 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  sub_20EB9F178(a1, (uint64_t)&v17, &v21);
  v19 = *(_OWORD *)(a1 + 24);
  v20 = *(_QWORD *)(a1 + 40);
  v7 = v21;
  v8 = v22;
  if (v22)
  {
    v9 = (unint64_t *)&v22->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v11 = v22;
    *(_QWORD *)a2 = v7;
    *(_QWORD *)(a2 + 8) = v8;
    *(_OWORD *)(a2 + 16) = v19;
    *(_QWORD *)(a2 + 32) = v20;
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  else
  {
    *(_QWORD *)a2 = v21;
    *(_QWORD *)(a2 + 8) = 0;
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 40);
  }
  v14 = v18;
  if (v18)
  {
    v15 = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_20EB9F164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EB9F178@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t (****a3)()@<X8>)
{
  uint64_t v3;
  uint64_t (***v4)();
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::logic_error *exception;
  std::string v9;

  v3 = result;
  v4 = *(uint64_t (****)())a2;
  if (!*(_QWORD *)a2 || *v4 != off_24CA18E58)
  {
    *a3 = 0;
    a3[1] = 0;
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20EB9F280(v3, &v9);
    std::logic_error::logic_error(exception, &v9);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  v5 = *(_QWORD *)(a2 + 8);
  *a3 = v4;
  a3[1] = (uint64_t (***)())v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void sub_20EB9F240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      sub_20E86665C(a9);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

double sub_20EB9F280@<D0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  std::string::size_type size;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::string::size_type v21;
  std::string *p_p;
  double result;
  int v24;
  size_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  std::string *v30;
  std::string __p;
  const char *v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  _QWORD v38[2];
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20EB9F568();
  v5 = sub_20EB9FA20();
  v32 = "Attempting to create an ";
  v33 = 24;
  size = HIBYTE(v4->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v7 = v4;
  else
    v7 = (std::string *)v4->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = v4->__r_.__value_.__l.__size_;
  v34 = (const char *)v7;
  v35 = size;
  v36 = " from an ";
  v37 = 9;
  v8 = HIBYTE(v5->__r_.__value_.__r.__words[2]);
  if ((v8 & 0x80u) == 0)
    v9 = v5;
  else
    v9 = (std::string *)v5->__r_.__value_.__r.__words[0];
  if ((v8 & 0x80u) != 0)
    v8 = v5->__r_.__value_.__l.__size_;
  v38[0] = v9;
  v38[1] = v8;
  sub_20E8778D4((uint64_t)&v32, (uint64_t)&v39, 0, 0, &__p);
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = *(std::__shared_weak_count **)(a1 + 16);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      v10 = *(_QWORD *)(a1 + 8);
      v15 = *(std::__shared_weak_count **)(a1 + 16);
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
        do
          v18 = __ldaxr(v16);
        while (__stlxr(v18 - 1, v16));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 80))(v10);
    v21 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      v21 = __p.__r_.__value_.__l.__size_;
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    v32 = (const char *)p_p;
    v33 = v21;
    v34 = " but the other image contains an incompatible buffer type ";
    v35 = 58;
    v36 = (const char *)v19;
    v37 = v20;
    sub_20E8778D4((uint64_t)&v32, (uint64_t)v38, 0, 0, a2);
    if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
      goto LABEL_27;
    return result;
  }
  v24 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v25 = __p.__r_.__value_.__l.__size_;
  v26 = v25 + 46;
  if (v25 + 46 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  if (v26 <= 0x16)
  {
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    a2->__r_.__value_.__r.__words[0] = 0;
    v27 = (char *)a2;
    *((_BYTE *)&a2->__r_.__value_.__s + 23) = v26;
LABEL_38:
    if (v24 >= 0)
      v30 = &__p;
    else
      v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
    memmove(a2, v30, v25);
    goto LABEL_42;
  }
  v28 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v26 | 7) != 0x17)
    v28 = v26 | 7;
  v29 = v28 + 1;
  v27 = (char *)operator new(v28 + 1);
  a2->__r_.__value_.__l.__size_ = v26;
  a2->__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
  a2->__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
  a2 = (std::string *)v27;
  if (v25)
    goto LABEL_38;
LABEL_42:
  strcpy(&v27[v25], " but the other image does not contain a buffer");
  result = *(double *)"contain a buffer";
  if ((v24 & 0x80) != 0)
LABEL_27:
    operator delete(__p.__r_.__value_.__l.__data_);
  return result;
}

void sub_20EB9F53C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_20EB9F568()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_254A50540);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A50540))
  {
    sub_20E8610C0(v7, "ImageView");
    v2 = sub_20EA6D818();
    sub_20EB9F76C((uint64_t)v2, (uint64_t)v9);
    v3 = sub_20EB9F824();
    sub_20EB9F76C((uint64_t)v3, (uint64_t)&__p);
    sub_20E877C80(v6, (uint64_t)v9, 2uLL);
    sub_21023CE38((char *)v7, (uint64_t *)v6, &stru_254A50528, v4, v5);
    sub_20E89FB98(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A50528, &dword_20E81F000);
          __cxa_guard_release(&qword_254A50540);
          return &stru_254A50528;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_254A50528;
}

void sub_20EB9F6B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_20E89FB98((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_254A50540);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_254A50540);
  _Unwind_Resume(a1);
}

void sub_20EB9F76C(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_20E860C04(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_210236E50(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20EB9F808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__int128 *sub_20EB9F824()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A50560);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A50560))
    return &xmmword_254A50548;
  v2 = (char *)sub_20EB9F900();
  if (v2[23] < 0)
  {
    sub_20E860C04(&xmmword_254A50548, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254A50558 = *((_QWORD *)v2 + 2);
    xmmword_254A50548 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A50548, &dword_20E81F000);
  __cxa_guard_release(&qword_254A50560);
  return &xmmword_254A50548;
}

void sub_20EB9F8E8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A50560);
  _Unwind_Resume(a1);
}

void *sub_20EB9F900()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A50580);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A50580))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVBuffer]", qword_254A50568);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A50568, &dword_20E81F000);
    __cxa_guard_release(&qword_254A50580);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A505A0);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254A505A0))
    return &unk_254A50588;
  sub_21023CD84((uint64_t)qword_254A50568, (uint64_t)&unk_254A50588);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254A50588, &dword_20E81F000);
  __cxa_guard_release(&qword_254A505A0);
  return &unk_254A50588;
}

void sub_20EB9F9F0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A505A0);
  _Unwind_Resume(a1);
}

void sub_20EB9FA08(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A50580);
  _Unwind_Resume(a1);
}

std::string *sub_20EB9FA20()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_254A505C0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A505C0))
  {
    sub_20E8610C0(v7, "ImageView");
    v2 = sub_20EA6D818();
    sub_20EB9FC24((uint64_t)v2, (uint64_t)v9);
    v3 = sub_20E8A41FC();
    sub_20EB9FC24((uint64_t)v3, (uint64_t)&__p);
    sub_20E877C80(v6, (uint64_t)v9, 2uLL);
    sub_21023CE38((char *)v7, (uint64_t *)v6, &stru_254A505A8, v4, v5);
    sub_20E89FB98(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A505A8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A505C0);
          return &stru_254A505A8;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_254A505A8;
}

void sub_20EB9FB70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_20E89FB98((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_254A505C0);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_254A505C0);
  _Unwind_Resume(a1);
}

void sub_20EB9FC24(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_20E860C04(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_210236E50(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20EB9FCC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EB9FCDC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL8 v12;
  _BOOL4 v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  __int16 v17;
  std::__shared_weak_count *size;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  std::logic_error *exception;
  std::string v23;

  if (*(_DWORD *)(a1 + 48) != 1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20EB9FF58(a1);
    std::logic_error::logic_error(exception, &v23);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v23.__r_.__value_.__r.__words[0] = v4;
      v23.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v4;
    }
  }
  else
  {
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = 0uLL;
  }
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_DWORD *)(a1 + 24);
  v12 = v11 != 0;
  v13 = v11 == 0;
  if (!*(_DWORD *)(a1 + 28))
    v13 = 1;
  if (v13)
    v14 = 0;
  else
    v14 = (unint64_t)*(unsigned int *)(a1 + 32) << 32;
  if (v13)
    v15 = 0;
  else
    v15 = *(_QWORD *)(a1 + 24);
  if (HIDWORD(v15) * HIDWORD(v14) == -1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v16 = v14 | v12;
  v17 = *(_WORD *)(a1 + 52);
  size = (std::__shared_weak_count *)v23.__r_.__value_.__l.__size_;
  if (v23.__r_.__value_.__l.__size_)
  {
    v19 = (unint64_t *)(v23.__r_.__value_.__l.__size_ + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    *(_QWORD *)a2 = v23.__r_.__value_.__r.__words[0];
    *(_QWORD *)(a2 + 8) = size;
    *(_QWORD *)(a2 + 16) = v10;
    *(_QWORD *)(a2 + 24) = v15;
    *(_QWORD *)(a2 + 32) = v16;
    *(_WORD *)(a2 + 40) = v17;
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  else
  {
    *(_OWORD *)a2 = v23.__r_.__value_.__r.__words[0];
    *(_QWORD *)(a2 + 16) = v10;
    *(_QWORD *)(a2 + 24) = v15;
    *(_QWORD *)(a2 + 32) = v16;
    *(_WORD *)(a2 + 40) = v17;
  }
}

void sub_20EB9FF0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_20EB9FF58(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_20EB9FA20();
  v3 = sub_20EB9FFD0();
  v5 = *(_DWORD *)(a1 + 48);
  return sub_20E8A2A0C("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_20EB9FFD0()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_254A505E0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A505E0))
  {
    sub_20E8610C0(v7, "ImageView");
    v2 = sub_20E8A46B4();
    sub_20EBA01D4((uint64_t)v2, (uint64_t)v9);
    v3 = sub_20E8A41FC();
    sub_20EBA01D4((uint64_t)v3, (uint64_t)&__p);
    sub_20E877C80(v6, (uint64_t)v9, 2uLL);
    sub_21023CE38((char *)v7, (uint64_t *)v6, &stru_254A505C8, v4, v5);
    sub_20E89FB98(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A505C8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A505E0);
          return &stru_254A505C8;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_254A505C8;
}

void sub_20EBA0120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_20E89FB98((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_254A505E0);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_254A505E0);
  _Unwind_Resume(a1);
}

void sub_20EBA01D4(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_20E860C04(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_210236E50(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20EBA0270(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_20EBA028C(char *a1, uint64_t a2)
{
  unsigned __int8 v4;
  std::string *v5;
  uint64_t *v6;
  unint64_t v7;
  std::string::size_type size;
  std::string *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::string::size_type v21;
  std::string *p_p;
  double result;
  int v24;
  size_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  std::string *v30;
  std::string *v31;
  __int128 *v32;
  int64x2_t v33;
  int8x16_t v34;
  std::string __p;
  void *v36[3];
  void *v37[2];
  char v38;
  void *v39;
  uint64_t v40;
  const char *v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  _QWORD v45[2];
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v4 = atomic_load((unsigned __int8 *)&qword_254A5B2E8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A5B2E8))
  {
    sub_20E8610C0(v37, "ImageView");
    v31 = sub_20E8A225C();
    sub_20EBA0714((uint64_t)&v39, (uint64_t)v31);
    v32 = sub_20EB9F824();
    sub_20EBA0714((uint64_t)&v42, (uint64_t)v32);
    sub_20E877C80(v36, (uint64_t)&v39, 2uLL);
    sub_21023CE38((char *)v37, (uint64_t *)v36, (std::string *)&qword_254A5B2F0, v33, v34);
    sub_20E89FB98(v36);
    if (SHIBYTE(v44) < 0)
    {
      operator delete(v42);
      if ((SHIBYTE(v41) & 0x80000000) == 0)
      {
LABEL_45:
        if ((v38 & 0x80000000) == 0)
        {
LABEL_46:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A5B2F0, &dword_20E81F000);
          __cxa_guard_release(&qword_254A5B2E8);
          goto LABEL_2;
        }
LABEL_50:
        operator delete(v37[0]);
        goto LABEL_46;
      }
    }
    else if ((SHIBYTE(v41) & 0x80000000) == 0)
    {
      goto LABEL_45;
    }
    operator delete(v39);
    if ((v38 & 0x80000000) == 0)
      goto LABEL_46;
    goto LABEL_50;
  }
LABEL_2:
  v5 = sub_20EBA07CC();
  v39 = "Attempting to create an ";
  v40 = 24;
  v6 = &qword_254A5B2F0;
  v7 = byte_254A5B307;
  if (byte_254A5B307 < 0)
  {
    v7 = unk_254A5B2F8;
    v6 = (uint64_t *)qword_254A5B2F0;
  }
  v41 = (const char *)v6;
  v42 = (void *)v7;
  v43 = " from an ";
  v44 = 9;
  size = HIBYTE(v5->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v9 = v5;
  else
    v9 = (std::string *)v5->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = v5->__r_.__value_.__l.__size_;
  v45[0] = v9;
  v45[1] = size;
  sub_20E8778D4((uint64_t)&v39, (uint64_t)&v46, 0, 0, &__p);
  v10 = *(_QWORD *)(a2 + 8);
  if (v10)
  {
    v11 = *(std::__shared_weak_count **)(a2 + 16);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      v10 = *(_QWORD *)(a2 + 8);
      v15 = *(std::__shared_weak_count **)(a2 + 16);
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
        do
          v18 = __ldaxr(v16);
        while (__stlxr(v18 - 1, v16));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 80))(v10);
    v21 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      v21 = __p.__r_.__value_.__l.__size_;
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    v39 = p_p;
    v40 = v21;
    v41 = " but the other image contains an incompatible buffer type ";
    v42 = (void *)58;
    v43 = (const char *)v19;
    v44 = v20;
    sub_20E8778D4((uint64_t)&v39, (uint64_t)v45, 0, 0, (std::string *)a1);
    if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
      goto LABEL_25;
    return result;
  }
  v24 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v25 = __p.__r_.__value_.__l.__size_;
  v26 = v25 + 46;
  if (v25 + 46 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  if (v26 <= 0x16)
  {
    *((_QWORD *)a1 + 1) = 0;
    *((_QWORD *)a1 + 2) = 0;
    *(_QWORD *)a1 = 0;
    v27 = a1;
    a1[23] = v26;
LABEL_36:
    if (v24 >= 0)
      v30 = &__p;
    else
      v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
    memmove(a1, v30, v25);
    goto LABEL_40;
  }
  v28 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v26 | 7) != 0x17)
    v28 = v26 | 7;
  v29 = v28 + 1;
  v27 = (char *)operator new(v28 + 1);
  *((_QWORD *)a1 + 1) = v26;
  *((_QWORD *)a1 + 2) = v29 | 0x8000000000000000;
  *(_QWORD *)a1 = v27;
  a1 = v27;
  if (v25)
    goto LABEL_36;
LABEL_40:
  strcpy(&v27[v25], " but the other image does not contain a buffer");
  result = *(double *)"contain a buffer";
  if ((v24 & 0x80) != 0)
LABEL_25:
    operator delete(__p.__r_.__value_.__l.__data_);
  return result;
}

void sub_20EBA0634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  sub_20E89FB98(&a13);
  if (a34 < 0)
  {
    operator delete(__p);
    if ((a28 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a21 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a28 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a23);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_254A5B2E8);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a16);
  __cxa_guard_abort(&qword_254A5B2E8);
  _Unwind_Resume(a1);
}

void sub_20EBA06E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EBA0714(uint64_t a1, uint64_t a2)
{
  std::string __p;

  if (*(char *)(a2 + 23) < 0)
    sub_20E860C04(&__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  sub_210236E50(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20EBA07B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_20EBA07CC()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_254A50600);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A50600))
  {
    sub_20E8610C0(v7, "ImageView");
    v2 = sub_20E8A225C();
    sub_20EBA09D0((uint64_t)v2, (uint64_t)v9);
    v3 = sub_20E8A41FC();
    sub_20EBA09D0((uint64_t)v3, (uint64_t)&__p);
    sub_20E877C80(v6, (uint64_t)v9, 2uLL);
    sub_21023CE38((char *)v7, (uint64_t *)v6, &stru_254A505E8, v4, v5);
    sub_20E89FB98(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A505E8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A50600);
          return &stru_254A505E8;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_254A505E8;
}

void sub_20EBA091C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_20E89FB98((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_254A50600);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_254A50600);
  _Unwind_Resume(a1);
}

void sub_20EBA09D0(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_20E860C04(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_210236E50(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20EBA0A6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EBA0A88(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL8 v12;
  _BOOL4 v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  __int16 v17;
  std::__shared_weak_count *size;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  std::logic_error *exception;
  std::string v23;

  if (*(_DWORD *)(a1 + 48) != 4)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20EBA0D08(a1);
    std::logic_error::logic_error(exception, &v23);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v23.__r_.__value_.__r.__words[0] = v4;
      v23.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v4;
    }
  }
  else
  {
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = 0uLL;
  }
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_DWORD *)(a1 + 24);
  v12 = v11 != 0;
  v13 = v11 == 0;
  if (!*(_DWORD *)(a1 + 28))
    v13 = 1;
  if (v13)
    v14 = 0;
  else
    v14 = ((unint64_t)*(unsigned int *)(a1 + 32) << 30) & 0x3FFFFFFF00000000;
  if (v13)
    v15 = 0;
  else
    v15 = *(_QWORD *)(a1 + 24);
  if (HIDWORD(v15) * HIDWORD(v14) == -1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v16 = v14 | v12;
  v17 = *(_WORD *)(a1 + 52);
  size = (std::__shared_weak_count *)v23.__r_.__value_.__l.__size_;
  if (v23.__r_.__value_.__l.__size_)
  {
    v19 = (unint64_t *)(v23.__r_.__value_.__l.__size_ + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    *(_QWORD *)a2 = v23.__r_.__value_.__r.__words[0];
    *(_QWORD *)(a2 + 8) = size;
    *(_QWORD *)(a2 + 16) = v10;
    *(_QWORD *)(a2 + 24) = v15;
    *(_QWORD *)(a2 + 32) = v16;
    *(_WORD *)(a2 + 40) = v17;
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  else
  {
    *(_OWORD *)a2 = v23.__r_.__value_.__r.__words[0];
    *(_QWORD *)(a2 + 16) = v10;
    *(_QWORD *)(a2 + 24) = v15;
    *(_QWORD *)(a2 + 32) = v16;
    *(_WORD *)(a2 + 40) = v17;
  }
}

void sub_20EBA0CBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_20EBA0D08(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_20EBA07CC();
  v3 = sub_20EB9FFD0();
  v5 = *(_DWORD *)(a1 + 48);
  return sub_20E8A2A0C("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

uint64_t sub_20EBA0D80(uint64_t result)
{
  if (result)
    JUMPOUT(0x212BC6398);
  return result;
}

void sub_20EBA0D9C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C5A08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EBA0DAC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C5A08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EBA0DDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(a1 + 24);
    if (v3 == v1)
    {
      *(_QWORD *)(a1 + 32) = v1;
      operator delete(v4);
    }
    else
    {
      do
      {
        v5 = *(void **)(v3 - 24);
        if (v5)
        {
          *(_QWORD *)(v3 - 16) = v5;
          operator delete(v5);
        }
        v3 -= 56;
      }
      while (v3 != v1);
      v6 = *(void **)(a1 + 24);
      *(_QWORD *)(a1 + 32) = v1;
      operator delete(v6);
    }
  }
}

uint64_t sub_20EBA0E68(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      v5 = *(void **)(v3 - 24);
      if (v5)
      {
        *(_QWORD *)(v3 - 16) = v5;
        operator delete(v5);
      }
      v3 -= 56;
    }
  }
  return a1;
}

void sub_20EBA0EC8(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  char *v16;
  std::__shared_weak_count *v17;

  v8 = operator new();
  v9 = v8;
  v10 = *(std::__shared_weak_count **)(a1 + 8);
  v16 = *(char **)a1;
  v17 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  sub_20EBA9018(v8, &v16, a2, *a3);
  *a4 = v9;
  a4[1] = (uint64_t)sub_20EBBDAE8;
  v13 = v17;
  if (v17)
  {
    v14 = (unint64_t *)&v17->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_20EBA0FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_20E86665C((uint64_t)&a9);
  MEMORY[0x212BC6398](v9, 0x10B2C402B3DDB6FLL);
  _Unwind_Resume(a1);
}

uint64_t sub_20EBA0FE0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  std::string *v5;
  uint64_t v6;
  uint64_t v8[2];
  char v9;

  *(_OWORD *)(a1 + 8) = 0u;
  v5 = (std::string *)(a1 + 8);
  v9 = a4;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)a1 = off_24C9C5A58;
  sub_20EBA0EC8(a2, a3, &v9, v8);
  v6 = v8[1];
  *(_QWORD *)(a1 + 56) = v8[0];
  *(_QWORD *)(a1 + 64) = v6;
  sub_20E8B43E8(v5, "Keypoint Semantics Mapping Node Group", 0x25uLL);
  sub_20E8B43E8((std::string *)(a1 + 32), "Map keypoints to semantics frame", 0x20uLL);
  return a1;
}

void sub_20EBA1074(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20EBC904C(v1);
  _Unwind_Resume(a1);
}

void sub_20EBA1088(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 56);
  *(_QWORD *)(v1 + 56) = 0;
  if (v3)
    (*(void (**)(void))(v1 + 64))();
  sub_20EBC904C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EBA10B4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_20EBA10C0(a2, *(_QWORD *)(a1 + 56));
}

uint64_t sub_20EBA10C0(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  __int128 *v8;
  char *v9;
  __int128 *v10;
  char *v11;
  __int128 v12;
  char *v13;
  void *v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t *v18;
  __int128 v19;
  uint64_t v20;
  void **v21;
  char *v22;
  void **v23;
  char *v24;
  int v27;
  size_t v28;
  unint64_t v29;
  __int128 *v30;
  uint64_t v31;
  uint64_t v32;
  __int128 *p_dst;
  char *v34;
  void *v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  void *v42;
  void **v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  void **v46;
  __int128 v47;
  char *v48;
  std::__shared_weak_count *v49;
  std::__shared_weak_count *v50;
  std::__shared_weak_count *v51;
  void *v52;
  void **v53;
  unint64_t *v54;
  unint64_t v55;
  void **v56;
  void *v57;
  __int128 v58;
  char *v59;
  uint64_t v60;
  uint64_t *v61;
  __int128 v62;
  uint64_t v63;
  __int128 *v64;
  char *v65;
  __int128 *v66;
  char *v67;
  char *v68;
  void *v69;
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  uint64_t *v73;
  __int128 v74;
  uint64_t v75;
  void **v76;
  char *v77;
  void **v78;
  char *v79;
  int v82;
  size_t v83;
  unint64_t v84;
  __int128 *v85;
  uint64_t v86;
  uint64_t v87;
  __int128 *v88;
  char *v89;
  void *v90;
  __int128 v91;
  uint64_t v92;
  __int128 v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count *v95;
  std::__shared_weak_count *v96;
  void *v97;
  void **v98;
  unint64_t *v99;
  unint64_t v100;
  void **v101;
  __int128 v102;
  char *v103;
  std::__shared_weak_count *v104;
  std::__shared_weak_count *v105;
  std::__shared_weak_count *v106;
  void *v107;
  void **v108;
  unint64_t *v109;
  unint64_t v110;
  void **v111;
  void *v112;
  __int128 v113;
  char *v114;
  _BOOL4 v115;
  char *v116;
  char *v117;
  char *v118;
  uint64_t v119;
  __int128 v120;
  char *v121;
  void *v122;
  uint64_t v123;
  unsigned __int8 v124;
  uint64_t v125;
  __int128 *v126;
  char *v127;
  __int128 *v128;
  char *v129;
  __int128 v130;
  char *v131;
  void *v132;
  __int128 v133;
  uint64_t v134;
  __int128 v135;
  uint64_t *v136;
  __int128 v137;
  uint64_t v138;
  void **v139;
  char *v140;
  void **v141;
  char *v142;
  int v145;
  size_t v146;
  unint64_t v147;
  __int128 *v148;
  uint64_t v149;
  uint64_t v150;
  __int128 *v151;
  char *v152;
  void *v153;
  __int128 v154;
  uint64_t v155;
  __int128 v156;
  std::__shared_weak_count *v157;
  std::__shared_weak_count *v158;
  std::__shared_weak_count *v159;
  void *v160;
  void **v161;
  unint64_t *v162;
  unint64_t v163;
  void **v164;
  __int128 v165;
  char *v166;
  std::__shared_weak_count *v167;
  std::__shared_weak_count *v168;
  std::__shared_weak_count *v169;
  void *v170;
  void **v171;
  unint64_t *v172;
  unint64_t v173;
  void **v174;
  void *v175;
  __int128 v176;
  char *v177;
  uint64_t v178;
  uint64_t *v179;
  __int128 v180;
  uint64_t v181;
  __int128 *v182;
  char *v183;
  __int128 *v184;
  char *v185;
  char *v186;
  void *v187;
  __int128 v188;
  uint64_t v189;
  __int128 v190;
  uint64_t *v191;
  __int128 v192;
  uint64_t v193;
  void **v194;
  char *v195;
  void **v196;
  char *v197;
  int v200;
  size_t v201;
  unint64_t v202;
  __int128 *v203;
  uint64_t v204;
  uint64_t v205;
  __int128 *v206;
  char *v207;
  void *v208;
  __int128 v209;
  uint64_t v210;
  __int128 v211;
  std::__shared_weak_count *v212;
  std::__shared_weak_count *v213;
  std::__shared_weak_count *v214;
  void *v215;
  void **v216;
  unint64_t *v217;
  unint64_t v218;
  void **v219;
  __int128 v220;
  char *v221;
  std::__shared_weak_count *v222;
  std::__shared_weak_count *v223;
  std::__shared_weak_count *v224;
  void *v225;
  void **v226;
  unint64_t *v227;
  unint64_t v228;
  void **v229;
  void *v230;
  __int128 v231;
  char *v232;
  uint64_t v233;
  uint64_t *v234;
  __int128 v235;
  uint64_t v236;
  __int128 *v237;
  char *v238;
  __int128 *v239;
  char *v240;
  char *v241;
  void *v242;
  __int128 v243;
  uint64_t v244;
  __int128 v245;
  uint64_t *v246;
  __int128 v247;
  uint64_t v248;
  void **v249;
  char *v250;
  void **v251;
  char *v252;
  int v255;
  size_t v256;
  unint64_t v257;
  __int128 *v258;
  uint64_t v259;
  uint64_t v260;
  __int128 *v261;
  char *v262;
  void *v263;
  __int128 v264;
  uint64_t v265;
  __int128 v266;
  std::__shared_weak_count *v267;
  std::__shared_weak_count *v268;
  std::__shared_weak_count *v269;
  void *v270;
  void **v271;
  unint64_t *v272;
  unint64_t v273;
  void **v274;
  __int128 v275;
  char *v276;
  std::__shared_weak_count *v277;
  std::__shared_weak_count *v278;
  std::__shared_weak_count *v279;
  void *v280;
  void **v281;
  unint64_t *v282;
  unint64_t v283;
  void **v284;
  void *v285;
  __int128 v286;
  char *v287;
  _BOOL4 v288;
  char *v289;
  char *v290;
  char *v291;
  char *v292;
  void *v293;
  __int128 v295;
  __int128 v296;
  int v297;
  size_t v298;
  unint64_t v299;
  __int128 *v300;
  int v301;
  size_t v302;
  unint64_t v303;
  __int128 *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t *v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t *v310;
  uint64_t v312;
  void *v313;
  char *v314;
  unint64_t v315;
  void *v316;
  char *v317;
  unint64_t v318;
  void **v319;
  void **v320;
  uint64_t v321;
  void *v322[2];
  uint64_t v323;
  void *v324[2];
  __int128 v325;
  unint64_t v326;
  __int128 __p;
  _BYTE v328[24];
  uint64_t v329;
  __int128 v330;
  uint64_t v331;
  __int128 __dst;
  int64_t v333;
  _BYTE v334[128];
  _QWORD v335[19];

  v2 = a2;
  v335[16] = *MEMORY[0x24BDAC8D0];
  v316 = 0;
  v317 = 0;
  v318 = 0;
  v313 = 0;
  v314 = 0;
  v315 = 0;
  v3 = *(_QWORD *)(a2 + 80);
  if (!v3)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Node.h", 220, (uint64_t)"channels_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(_QWORD *)(v2 + 80);
    if ((*(char *)(v3 + 31) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    sub_20E860C04(&__dst, *(void **)(v3 + 8), *(_QWORD *)(v3 + 16));
    goto LABEL_7;
  }
  if (*(char *)(v3 + 31) < 0)
    goto LABEL_6;
LABEL_3:
  v4 = *(_OWORD *)(v3 + 8);
  v333 = *(_QWORD *)(v3 + 24);
  __dst = v4;
LABEL_7:
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 96) + 48))(*(_QWORD *)(v3 + 96));
  v6 = atomic_load((unsigned __int8 *)&qword_254A5B308);
  v312 = v2;
  if ((v6 & 1) != 0 || !__cxa_guard_acquire(&qword_254A5B308))
    goto LABEL_8;
  sub_20EBA4BE8();
  v297 = byte_254A5B467;
  if (byte_254A5B467 >= 0)
    v298 = byte_254A5B467;
  else
    v298 = qword_254A5B458;
  v299 = v298 + 1;
  if (v298 + 1 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v299 >= 0x17)
  {
    v305 = (v299 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v299 | 7) != 0x17)
      v305 = v299 | 7;
    v306 = v305 + 1;
    v300 = (__int128 *)operator new(v305 + 1);
    *((_QWORD *)&xmmword_254A5B438 + 1) = v298 + 1;
    unk_254A5B448 = v306 | 0x8000000000000000;
    *(_QWORD *)&xmmword_254A5B438 = v300;
    goto LABEL_789;
  }
  v300 = &xmmword_254A5B438;
  unk_254A5B448 = 0;
  xmmword_254A5B438 = 0uLL;
  byte_254A5B44F = v298 + 1;
  if (v298)
  {
LABEL_789:
    if (v297 >= 0)
      v307 = &qword_254A5B450;
    else
      v307 = (uint64_t *)qword_254A5B450;
    memmove(v300, v307, v298);
  }
  *(_WORD *)((char *)v300 + v298) = 38;
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5B438, &dword_20E81F000);
  __cxa_guard_release(&qword_254A5B308);
  v2 = v312;
LABEL_8:
  if (byte_254A5B44F < 0)
  {
    sub_20E860C04(&v330, (void *)xmmword_254A5B438, *((unint64_t *)&xmmword_254A5B438 + 1));
  }
  else
  {
    v330 = xmmword_254A5B438;
    v331 = unk_254A5B448;
  }
  v7 = HIBYTE(v331);
  if (v331 >= 0)
  {
    v8 = &v330;
  }
  else
  {
    v7 = *((_QWORD *)&v330 + 1);
    v8 = (__int128 *)v330;
  }
  if (v7 >= 4)
  {
    v9 = (char *)v8 + v7;
    v10 = v8;
    do
    {
      v11 = (char *)memchr(v10, 118, v7 - 3);
      if (!v11)
        break;
      if (*(_DWORD *)v11 == 1684631414)
      {
        if (v11 == v9 || v11 - (char *)v8 == -1)
          break;
        v324[0] = (void *)v5;
        LODWORD(v324[1]) = 4;
        if (SHIBYTE(v333) < 0)
        {
          sub_20E860C04(&v325, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v325 = __dst;
          v326 = v333;
        }
        if (*(char *)(v3 + 55) < 0)
        {
          sub_20E860C04(&__p, *(void **)(v3 + 32), *(_QWORD *)(v3 + 40));
        }
        else
        {
          v295 = *(_OWORD *)(v3 + 32);
          *(_QWORD *)v328 = *(_QWORD *)(v3 + 48);
          __p = v295;
        }
        sub_20EBA579C();
        if (byte_254A5B557 < 0)
        {
          sub_20E860C04(&v328[8], (void *)xmmword_254A5B540, *((unint64_t *)&xmmword_254A5B540 + 1));
        }
        else
        {
          *(_OWORD *)&v328[8] = xmmword_254A5B540;
          v329 = unk_254A5B550;
        }
        v13 = v317;
        if ((unint64_t)v317 < v318)
          goto LABEL_34;
        goto LABEL_37;
      }
      v10 = (__int128 *)(v11 + 1);
      v7 = v9 - (char *)v10;
    }
    while (v9 - (char *)v10 >= 4);
  }
  v324[0] = (void *)v5;
  LODWORD(v324[1]) = 2;
  if (SHIBYTE(v333) < 0)
  {
    sub_20E860C04(&v325, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v325 = __dst;
    v326 = v333;
  }
  if (*(char *)(v3 + 55) < 0)
  {
    sub_20E860C04(&__p, *(void **)(v3 + 32), *(_QWORD *)(v3 + 40));
  }
  else
  {
    v12 = *(_OWORD *)(v3 + 32);
    *(_QWORD *)v328 = *(_QWORD *)(v3 + 48);
    __p = v12;
  }
  sub_20EBA579C();
  if (byte_254A5B557 < 0)
  {
    sub_20E860C04(&v328[8], (void *)xmmword_254A5B540, *((unint64_t *)&xmmword_254A5B540 + 1));
  }
  else
  {
    *(_OWORD *)&v328[8] = xmmword_254A5B540;
    v329 = unk_254A5B550;
  }
  v13 = v317;
  if ((unint64_t)v317 >= v318)
  {
LABEL_37:
    v317 = sub_20EBA558C((char **)&v316, (uint64_t)v324);
    if (SHIBYTE(v329) < 0)
    {
      operator delete(*(void **)&v328[8]);
      if ((v328[7] & 0x80000000) == 0)
        goto LABEL_39;
    }
    else if ((v328[7] & 0x80000000) == 0)
    {
      goto LABEL_39;
    }
LABEL_35:
    operator delete((void *)__p);
    if ((SHIBYTE(v326) & 0x80000000) == 0)
      goto LABEL_40;
    goto LABEL_36;
  }
LABEL_34:
  v14 = v324[0];
  *((_DWORD *)v13 + 2) = v324[1];
  *(_QWORD *)v13 = v14;
  v15 = v325;
  *((_QWORD *)v13 + 4) = v326;
  *((_OWORD *)v13 + 1) = v15;
  v326 = 0;
  v325 = 0uLL;
  v16 = *(_QWORD *)v328;
  *(_OWORD *)(v13 + 40) = __p;
  *((_QWORD *)v13 + 7) = v16;
  *(_QWORD *)v328 = 0;
  __p = 0uLL;
  v17 = *(_OWORD *)&v328[8];
  *((_QWORD *)v13 + 10) = v329;
  *((_OWORD *)v13 + 4) = v17;
  *(_QWORD *)&v328[8] = 0;
  *(_QWORD *)&v328[16] = 0;
  v329 = 0;
  v317 = v13 + 88;
  if ((v328[7] & 0x80000000) != 0)
    goto LABEL_35;
LABEL_39:
  if (SHIBYTE(v326) < 0)
LABEL_36:
    operator delete((void *)v325);
LABEL_40:
  v18 = sub_20EBA4AA4();
  if (*((char *)v18 + 23) < 0)
  {
    sub_20E860C04(v322, (void *)*v18, v18[1]);
  }
  else
  {
    v19 = *(_OWORD *)v18;
    v323 = v18[2];
    *(_OWORD *)v322 = v19;
  }
  v20 = HIBYTE(v323);
  if (v323 >= 0)
  {
    v21 = v322;
  }
  else
  {
    v20 = (uint64_t)v322[1];
    v21 = (void **)v322[0];
  }
  if (v20 >= 18)
  {
    v22 = (char *)v21 + v20;
    v23 = v21;
    do
    {
      v24 = (char *)memchr(v23, 67, v20 - 17);
      if (!v24)
        break;
      if (*(_QWORD *)v24 == 0x456C656E6E616843
        && *((_QWORD *)v24 + 1) == 0x696F763C726F7272
        && *((_WORD *)v24 + 8) == 15972)
      {
        if (v24 != v22 && v24 - (char *)v21 != -1)
          goto LABEL_84;
        break;
      }
      v23 = (void **)(v24 + 1);
      v20 = v22 - (char *)v23;
    }
    while (v22 - (char *)v23 >= 18);
  }
  v324[0] = (void *)(v5 + 1);
  LODWORD(v324[1]) = 3;
  v27 = SHIBYTE(v333);
  if (v333 >= 0)
    v28 = HIBYTE(v333);
  else
    v28 = *((_QWORD *)&__dst + 1);
  v29 = v28 + 6;
  if (v28 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v29 >= 0x17)
  {
    v31 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v29 | 7) != 0x17)
      v31 = v29 | 7;
    v32 = v31 + 1;
    v30 = (__int128 *)operator new(v31 + 1);
    *((_QWORD *)&v325 + 1) = v28 + 6;
    v326 = v32 | 0x8000000000000000;
    *(_QWORD *)&v325 = v30;
    v2 = v312;
  }
  else
  {
    v326 = 0;
    v325 = 0uLL;
    v30 = &v325;
    HIBYTE(v326) = v28 + 6;
    if (!v28)
      goto LABEL_76;
  }
  if (v27 >= 0)
    p_dst = &__dst;
  else
    p_dst = (__int128 *)__dst;
  memmove(v30, p_dst, v28);
LABEL_76:
  strcpy((char *)v30 + v28, ".Error");
  *(_WORD *)&v328[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v329) = 0;
  v34 = v317;
  if ((unint64_t)v317 >= v318)
  {
    v317 = sub_20EBA558C((char **)&v316, (uint64_t)v324);
    if (SHIBYTE(v329) < 0)
    {
      operator delete(*(void **)&v328[8]);
      if ((v328[7] & 0x80000000) == 0)
        goto LABEL_83;
    }
    else if ((v328[7] & 0x80000000) == 0)
    {
      goto LABEL_83;
    }
LABEL_78:
    operator delete((void *)__p);
    if (SHIBYTE(v326) < 0)
      goto LABEL_79;
    goto LABEL_84;
  }
  v35 = v324[0];
  *((_DWORD *)v317 + 2) = v324[1];
  *(_QWORD *)v34 = v35;
  v36 = v325;
  *((_QWORD *)v34 + 4) = v326;
  *((_OWORD *)v34 + 1) = v36;
  v326 = 0;
  v325 = 0uLL;
  v37 = *(_QWORD *)v328;
  *(_OWORD *)(v34 + 40) = __p;
  *((_QWORD *)v34 + 7) = v37;
  *(_QWORD *)v328 = 0;
  __p = 0uLL;
  v38 = *(_OWORD *)&v328[8];
  *((_QWORD *)v34 + 10) = v329;
  *((_OWORD *)v34 + 4) = v38;
  *(_QWORD *)&v328[8] = 0;
  *(_QWORD *)&v328[16] = 0;
  v329 = 0;
  v317 = v34 + 88;
  if ((v328[7] & 0x80000000) != 0)
    goto LABEL_78;
LABEL_83:
  if (SHIBYTE(v326) < 0)
  {
LABEL_79:
    operator delete((void *)v325);
    v39 = *(std::__shared_weak_count **)(v3 + 136);
    if (!v39)
      goto LABEL_88;
    goto LABEL_85;
  }
LABEL_84:
  v39 = *(std::__shared_weak_count **)(v3 + 136);
  if (!v39)
  {
LABEL_88:
    v319 = 0;
    v320 = 0;
    v321 = 0;
    v43 = 0;
    goto LABEL_103;
  }
LABEL_85:
  v40 = std::__shared_weak_count::lock(v39);
  v324[1] = v40;
  if (!v40)
    goto LABEL_88;
  v41 = v40;
  v42 = *(void **)(v3 + 128);
  v324[0] = v42;
  if (v42)
  {
    (*(void (**)(void ***__return_ptr))(*(_QWORD *)v42 + 24))(&v319);
  }
  else
  {
    v319 = 0;
    v320 = 0;
    v321 = 0;
  }
  p_shared_owners = (unint64_t *)&v41->__shared_owners_;
  do
    v45 = __ldaxr(p_shared_owners);
  while (__stlxr(v45 - 1, p_shared_owners));
  if (v45)
  {
    v43 = v319;
    v46 = v320;
    if (v319 == v320)
      goto LABEL_103;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
    v43 = v319;
    v46 = v320;
    if (v319 == v320)
      goto LABEL_103;
  }
  do
  {
    v324[0] = (void *)v5;
    v324[1] = *v43;
    v326 = 0;
    v325 = 0uLL;
    v48 = v314;
    if ((unint64_t)v314 < v315)
    {
      *(_OWORD *)v314 = *(_OWORD *)v324;
      v47 = v325;
      *((_QWORD *)v48 + 4) = v326;
      *((_OWORD *)v48 + 1) = v47;
      v314 = v48 + 40;
    }
    else
    {
      v314 = sub_20EBA5F8C(&v313, (uint64_t)v324);
      if (SHIBYTE(v326) < 0)
        operator delete((void *)v325);
    }
    ++v43;
  }
  while (v43 != v46);
  v43 = v319;
LABEL_103:
  if (v43)
  {
    v320 = v43;
    operator delete(v43);
  }
  v49 = *(std::__shared_weak_count **)(v3 + 136);
  if (!v49 || (v50 = std::__shared_weak_count::lock(v49), (v324[1] = v50) == 0))
  {
    v319 = 0;
    v320 = 0;
    v321 = 0;
    v53 = 0;
    goto LABEL_124;
  }
  v51 = v50;
  v52 = *(void **)(v3 + 128);
  v324[0] = v52;
  if (v52)
  {
    (*(void (**)(void ***__return_ptr))(*(_QWORD *)v52 + 32))(&v319);
  }
  else
  {
    v319 = 0;
    v320 = 0;
    v321 = 0;
  }
  v54 = (unint64_t *)&v51->__shared_owners_;
  do
    v55 = __ldaxr(v54);
  while (__stlxr(v55 - 1, v54));
  if (v55)
  {
    v53 = v319;
    v56 = v320;
    if (v319 == v320)
      goto LABEL_124;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
    std::__shared_weak_count::__release_weak(v51);
    v53 = v319;
    v56 = v320;
    if (v319 == v320)
      goto LABEL_124;
  }
  v57 = (void *)(v5 + 1);
  do
  {
    v324[0] = v57;
    v324[1] = *v53;
    v326 = 0;
    v325 = 0uLL;
    v59 = v314;
    if ((unint64_t)v314 < v315)
    {
      *(_OWORD *)v314 = *(_OWORD *)v324;
      v58 = v325;
      *((_QWORD *)v59 + 4) = v326;
      *((_OWORD *)v59 + 1) = v58;
      v314 = v59 + 40;
    }
    else
    {
      v314 = sub_20EBA5F8C(&v313, (uint64_t)v324);
      if (SHIBYTE(v326) < 0)
        operator delete((void *)v325);
    }
    ++v53;
  }
  while (v53 != v56);
  v53 = v319;
LABEL_124:
  if (v53)
  {
    v320 = v53;
    operator delete(v53);
  }
  if (SHIBYTE(v323) < 0)
  {
    operator delete(v322[0]);
    if ((SHIBYTE(v331) & 0x80000000) == 0)
    {
LABEL_128:
      if ((SHIBYTE(v333) & 0x80000000) == 0)
        goto LABEL_129;
LABEL_133:
      operator delete((void *)__dst);
      if ((*(char *)(v3 + 199) & 0x80000000) == 0)
        goto LABEL_130;
      goto LABEL_134;
    }
  }
  else if ((SHIBYTE(v331) & 0x80000000) == 0)
  {
    goto LABEL_128;
  }
  operator delete((void *)v330);
  if (SHIBYTE(v333) < 0)
    goto LABEL_133;
LABEL_129:
  if ((*(char *)(v3 + 199) & 0x80000000) == 0)
  {
LABEL_130:
    __dst = *(_OWORD *)(v3 + 176);
    v333 = *(_QWORD *)(v3 + 192);
    goto LABEL_135;
  }
LABEL_134:
  sub_20E860C04(&__dst, *(void **)(v3 + 176), *(_QWORD *)(v3 + 184));
LABEL_135:
  v60 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 264) + 48))(*(_QWORD *)(v3 + 264));
  v61 = sub_20EBA60E8();
  if (*((char *)v61 + 23) < 0)
  {
    sub_20E860C04(&v330, (void *)*v61, v61[1]);
  }
  else
  {
    v62 = *(_OWORD *)v61;
    v331 = v61[2];
    v330 = v62;
  }
  v63 = HIBYTE(v331);
  if (v331 >= 0)
  {
    v64 = &v330;
  }
  else
  {
    v63 = *((_QWORD *)&v330 + 1);
    v64 = (__int128 *)v330;
  }
  if (v63 >= 4)
  {
    v65 = (char *)v64 + v63;
    v66 = v64;
    do
    {
      v67 = (char *)memchr(v66, 118, v63 - 3);
      if (!v67)
        break;
      if (*(_DWORD *)v67 == 1684631414)
      {
        if (v67 == v65 || v67 - (char *)v64 == -1)
          break;
        v324[0] = (void *)v60;
        LODWORD(v324[1]) = 4;
        if (SHIBYTE(v333) < 0)
        {
          sub_20E860C04(&v325, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v325 = __dst;
          v326 = v333;
        }
        if (*(char *)(v3 + 223) < 0)
        {
          sub_20E860C04(&__p, *(void **)(v3 + 200), *(_QWORD *)(v3 + 208));
        }
        else
        {
          __p = *(_OWORD *)(v3 + 200);
          *(_QWORD *)v328 = *(_QWORD *)(v3 + 216);
        }
        sub_20EBA6754();
        if (byte_254A5B59F < 0)
        {
          sub_20E860C04(&v328[8], (void *)xmmword_254A5B588, *((unint64_t *)&xmmword_254A5B588 + 1));
        }
        else
        {
          *(_OWORD *)&v328[8] = xmmword_254A5B588;
          v329 = unk_254A5B598;
        }
        v68 = v317;
        if ((unint64_t)v317 < v318)
          goto LABEL_161;
        goto LABEL_164;
      }
      v66 = (__int128 *)(v67 + 1);
      v63 = v65 - (char *)v66;
    }
    while (v65 - (char *)v66 >= 4);
  }
  v324[0] = (void *)v60;
  LODWORD(v324[1]) = 2;
  if (SHIBYTE(v333) < 0)
  {
    sub_20E860C04(&v325, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v325 = __dst;
    v326 = v333;
  }
  if (*(char *)(v3 + 223) < 0)
  {
    sub_20E860C04(&__p, *(void **)(v3 + 200), *(_QWORD *)(v3 + 208));
  }
  else
  {
    __p = *(_OWORD *)(v3 + 200);
    *(_QWORD *)v328 = *(_QWORD *)(v3 + 216);
  }
  sub_20EBA6754();
  if (byte_254A5B59F < 0)
  {
    sub_20E860C04(&v328[8], (void *)xmmword_254A5B588, *((unint64_t *)&xmmword_254A5B588 + 1));
  }
  else
  {
    *(_OWORD *)&v328[8] = xmmword_254A5B588;
    v329 = unk_254A5B598;
  }
  v68 = v317;
  if ((unint64_t)v317 >= v318)
  {
LABEL_164:
    v317 = sub_20EBA558C((char **)&v316, (uint64_t)v324);
    if (SHIBYTE(v329) < 0)
    {
      operator delete(*(void **)&v328[8]);
      if ((v328[7] & 0x80000000) == 0)
        goto LABEL_166;
    }
    else if ((v328[7] & 0x80000000) == 0)
    {
      goto LABEL_166;
    }
LABEL_162:
    operator delete((void *)__p);
    if ((SHIBYTE(v326) & 0x80000000) == 0)
      goto LABEL_167;
    goto LABEL_163;
  }
LABEL_161:
  v69 = v324[0];
  *((_DWORD *)v68 + 2) = v324[1];
  *(_QWORD *)v68 = v69;
  v70 = v325;
  *((_QWORD *)v68 + 4) = v326;
  *((_OWORD *)v68 + 1) = v70;
  v326 = 0;
  v325 = 0uLL;
  v71 = *(_QWORD *)v328;
  *(_OWORD *)(v68 + 40) = __p;
  *((_QWORD *)v68 + 7) = v71;
  *(_QWORD *)v328 = 0;
  __p = 0uLL;
  v72 = *(_OWORD *)&v328[8];
  *((_QWORD *)v68 + 10) = v329;
  *((_OWORD *)v68 + 4) = v72;
  *(_QWORD *)&v328[8] = 0;
  *(_QWORD *)&v328[16] = 0;
  v329 = 0;
  v317 = v68 + 88;
  if ((v328[7] & 0x80000000) != 0)
    goto LABEL_162;
LABEL_166:
  if (SHIBYTE(v326) < 0)
LABEL_163:
    operator delete((void *)v325);
LABEL_167:
  v73 = sub_20EBA4AA4();
  if (*((char *)v73 + 23) < 0)
  {
    sub_20E860C04(v322, (void *)*v73, v73[1]);
  }
  else
  {
    v74 = *(_OWORD *)v73;
    v323 = v73[2];
    *(_OWORD *)v322 = v74;
  }
  v75 = HIBYTE(v323);
  if (v323 >= 0)
  {
    v76 = v322;
  }
  else
  {
    v75 = (uint64_t)v322[1];
    v76 = (void **)v322[0];
  }
  if (v75 >= 18)
  {
    v77 = (char *)v76 + v75;
    v78 = v76;
    do
    {
      v79 = (char *)memchr(v78, 67, v75 - 17);
      if (!v79)
        break;
      if (*(_QWORD *)v79 == 0x456C656E6E616843
        && *((_QWORD *)v79 + 1) == 0x696F763C726F7272
        && *((_WORD *)v79 + 8) == 15972)
      {
        if (v79 != v77 && v79 - (char *)v76 != -1)
          goto LABEL_211;
        break;
      }
      v78 = (void **)(v79 + 1);
      v75 = v77 - (char *)v78;
    }
    while (v77 - (char *)v78 >= 18);
  }
  v324[0] = (void *)(v60 + 1);
  LODWORD(v324[1]) = 3;
  v82 = SHIBYTE(v333);
  if (v333 >= 0)
    v83 = HIBYTE(v333);
  else
    v83 = *((_QWORD *)&__dst + 1);
  v84 = v83 + 6;
  if (v83 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v84 >= 0x17)
  {
    v86 = (v84 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v84 | 7) != 0x17)
      v86 = v84 | 7;
    v87 = v86 + 1;
    v85 = (__int128 *)operator new(v86 + 1);
    *((_QWORD *)&v325 + 1) = v83 + 6;
    v326 = v87 | 0x8000000000000000;
    *(_QWORD *)&v325 = v85;
    v2 = v312;
  }
  else
  {
    v326 = 0;
    v325 = 0uLL;
    v85 = &v325;
    HIBYTE(v326) = v83 + 6;
    if (!v83)
      goto LABEL_203;
  }
  if (v82 >= 0)
    v88 = &__dst;
  else
    v88 = (__int128 *)__dst;
  memmove(v85, v88, v83);
LABEL_203:
  strcpy((char *)v85 + v83, ".Error");
  *(_WORD *)&v328[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v329) = 0;
  v89 = v317;
  if ((unint64_t)v317 >= v318)
  {
    v317 = sub_20EBA558C((char **)&v316, (uint64_t)v324);
    if (SHIBYTE(v329) < 0)
    {
      operator delete(*(void **)&v328[8]);
      if ((v328[7] & 0x80000000) == 0)
        goto LABEL_210;
    }
    else if ((v328[7] & 0x80000000) == 0)
    {
      goto LABEL_210;
    }
LABEL_205:
    operator delete((void *)__p);
    if (SHIBYTE(v326) < 0)
      goto LABEL_206;
    goto LABEL_211;
  }
  v90 = v324[0];
  *((_DWORD *)v317 + 2) = v324[1];
  *(_QWORD *)v89 = v90;
  v91 = v325;
  *((_QWORD *)v89 + 4) = v326;
  *((_OWORD *)v89 + 1) = v91;
  v326 = 0;
  v325 = 0uLL;
  v92 = *(_QWORD *)v328;
  *(_OWORD *)(v89 + 40) = __p;
  *((_QWORD *)v89 + 7) = v92;
  *(_QWORD *)v328 = 0;
  __p = 0uLL;
  v93 = *(_OWORD *)&v328[8];
  *((_QWORD *)v89 + 10) = v329;
  *((_OWORD *)v89 + 4) = v93;
  *(_QWORD *)&v328[8] = 0;
  *(_QWORD *)&v328[16] = 0;
  v329 = 0;
  v317 = v89 + 88;
  if ((v328[7] & 0x80000000) != 0)
    goto LABEL_205;
LABEL_210:
  if (SHIBYTE(v326) < 0)
  {
LABEL_206:
    operator delete((void *)v325);
    v94 = *(std::__shared_weak_count **)(v3 + 304);
    if (!v94)
      goto LABEL_215;
    goto LABEL_212;
  }
LABEL_211:
  v94 = *(std::__shared_weak_count **)(v3 + 304);
  if (!v94)
  {
LABEL_215:
    v319 = 0;
    v320 = 0;
    v321 = 0;
    v98 = 0;
    goto LABEL_232;
  }
LABEL_212:
  v95 = std::__shared_weak_count::lock(v94);
  v324[1] = v95;
  if (!v95)
    goto LABEL_215;
  v96 = v95;
  v97 = *(void **)(v3 + 296);
  v324[0] = v97;
  if (v97)
  {
    (*(void (**)(void ***__return_ptr))(*(_QWORD *)v97 + 24))(&v319);
  }
  else
  {
    v319 = 0;
    v320 = 0;
    v321 = 0;
  }
  v99 = (unint64_t *)&v96->__shared_owners_;
  do
    v100 = __ldaxr(v99);
  while (__stlxr(v100 - 1, v99));
  if (v100)
  {
    v98 = v319;
    v101 = v320;
    if (v319 == v320)
      goto LABEL_232;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
    std::__shared_weak_count::__release_weak(v96);
    v98 = v319;
    v101 = v320;
    if (v319 == v320)
      goto LABEL_232;
  }
  do
  {
    v324[0] = (void *)v60;
    v324[1] = *v98;
    v326 = 0;
    v325 = 0uLL;
    v103 = v314;
    if ((unint64_t)v314 < v315)
    {
      *(_OWORD *)v314 = *(_OWORD *)v324;
      v102 = v325;
      *((_QWORD *)v103 + 4) = v326;
      *((_OWORD *)v103 + 1) = v102;
      v314 = v103 + 40;
    }
    else
    {
      v314 = sub_20EBA5F8C(&v313, (uint64_t)v324);
      if (SHIBYTE(v326) < 0)
        operator delete((void *)v325);
    }
    ++v98;
  }
  while (v98 != v101);
  v98 = v319;
LABEL_232:
  if (v98)
  {
    v320 = v98;
    operator delete(v98);
  }
  v104 = *(std::__shared_weak_count **)(v3 + 304);
  if (!v104 || (v105 = std::__shared_weak_count::lock(v104), (v324[1] = v105) == 0))
  {
    v319 = 0;
    v320 = 0;
    v321 = 0;
    v108 = 0;
    goto LABEL_253;
  }
  v106 = v105;
  v107 = *(void **)(v3 + 296);
  v324[0] = v107;
  if (v107)
  {
    (*(void (**)(void ***__return_ptr))(*(_QWORD *)v107 + 32))(&v319);
  }
  else
  {
    v319 = 0;
    v320 = 0;
    v321 = 0;
  }
  v109 = (unint64_t *)&v106->__shared_owners_;
  do
    v110 = __ldaxr(v109);
  while (__stlxr(v110 - 1, v109));
  if (v110)
  {
    v108 = v319;
    v111 = v320;
    if (v319 == v320)
      goto LABEL_253;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
    std::__shared_weak_count::__release_weak(v106);
    v108 = v319;
    v111 = v320;
    if (v319 == v320)
      goto LABEL_253;
  }
  v112 = (void *)(v60 + 1);
  do
  {
    v324[0] = v112;
    v324[1] = *v108;
    v326 = 0;
    v325 = 0uLL;
    v114 = v314;
    if ((unint64_t)v314 < v315)
    {
      *(_OWORD *)v314 = *(_OWORD *)v324;
      v113 = v325;
      *((_QWORD *)v114 + 4) = v326;
      *((_OWORD *)v114 + 1) = v113;
      v314 = v114 + 40;
    }
    else
    {
      v314 = sub_20EBA5F8C(&v313, (uint64_t)v324);
      if (SHIBYTE(v326) < 0)
        operator delete((void *)v325);
    }
    ++v108;
  }
  while (v108 != v111);
  v108 = v319;
LABEL_253:
  if (v108)
  {
    v320 = v108;
    operator delete(v108);
  }
  if (SHIBYTE(v323) < 0)
  {
    operator delete(v322[0]);
    if ((SHIBYTE(v331) & 0x80000000) == 0)
    {
LABEL_257:
      if ((SHIBYTE(v333) & 0x80000000) == 0)
        goto LABEL_258;
LABEL_262:
      operator delete((void *)__dst);
      if ((*(char *)(v2 + 39) & 0x80000000) == 0)
        goto LABEL_259;
      goto LABEL_263;
    }
  }
  else if ((SHIBYTE(v331) & 0x80000000) == 0)
  {
    goto LABEL_257;
  }
  operator delete((void *)v330);
  if (SHIBYTE(v333) < 0)
    goto LABEL_262;
LABEL_258:
  if ((*(char *)(v2 + 39) & 0x80000000) == 0)
  {
LABEL_259:
    *(_OWORD *)v324 = *(_OWORD *)(v2 + 16);
    *(_QWORD *)&v325 = *(_QWORD *)(v2 + 32);
    goto LABEL_264;
  }
LABEL_263:
  sub_20E860C04(v324, *(void **)(v2 + 16), *(_QWORD *)(v2 + 24));
LABEL_264:
  v115 = *(_QWORD *)(v2 + 64) != 0;
  if (*(char *)(v2 + 63) < 0)
  {
    sub_20E860C04(&__dst, *(void **)(v2 + 40), *(_QWORD *)(v2 + 48));
  }
  else
  {
    __dst = *(_OWORD *)(v2 + 40);
    v333 = *(_QWORD *)(v2 + 56);
  }
  sub_20EBA690C((uint64_t)v334, (__int128 *)v324, v115, (uint64_t *)&v316, (uint64_t *)&v313, &__dst);
  if (SHIBYTE(v333) < 0)
  {
    operator delete((void *)__dst);
    if ((SBYTE7(v325) & 0x80000000) == 0)
    {
LABEL_269:
      v116 = (char *)v313;
      if (v313)
        goto LABEL_270;
LABEL_282:
      v118 = (char *)v316;
      if (v316)
        goto LABEL_283;
      goto LABEL_272;
    }
  }
  else if ((SBYTE7(v325) & 0x80000000) == 0)
  {
    goto LABEL_269;
  }
  operator delete(v324[0]);
  v116 = (char *)v313;
  if (!v313)
    goto LABEL_282;
LABEL_270:
  v117 = v314;
  if (v314 != v116)
  {
    do
    {
      if (*(v117 - 1) < 0)
        operator delete(*((void **)v117 - 3));
      v117 -= 40;
    }
    while (v117 != v116);
    v314 = v116;
    operator delete(v313);
    v118 = (char *)v316;
    if (v316)
      goto LABEL_283;
LABEL_272:
    v316 = 0;
    v317 = 0;
    v318 = 0;
    v313 = 0;
    v314 = 0;
    v315 = 0;
    v119 = *(_QWORD *)(v2 + 160);
    if (v119)
      goto LABEL_273;
LABEL_295:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Node.h", 220, (uint64_t)"channels_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v119 = *(_QWORD *)(v2 + 160);
    if ((*(char *)(v119 + 31) & 0x80000000) == 0)
      goto LABEL_274;
LABEL_297:
    sub_20E860C04(&__dst, *(void **)(v119 + 8), *(_QWORD *)(v119 + 16));
    goto LABEL_298;
  }
  v314 = v116;
  operator delete(v116);
  v118 = (char *)v316;
  if (!v316)
    goto LABEL_272;
LABEL_283:
  v121 = v317;
  v122 = v118;
  if (v317 != v118)
  {
    while (1)
    {
      while (*(v121 - 1) < 0)
      {
        operator delete(*((void **)v121 - 3));
        if (*(v121 - 25) < 0)
          goto LABEL_285;
LABEL_291:
        if ((*(v121 - 49) & 0x80000000) == 0)
          goto LABEL_286;
LABEL_292:
        operator delete(*((void **)v121 - 9));
        v121 -= 88;
        if (v121 == v118)
        {
LABEL_293:
          v122 = v316;
          goto LABEL_294;
        }
      }
      if ((*(v121 - 25) & 0x80000000) == 0)
        goto LABEL_291;
LABEL_285:
      operator delete(*((void **)v121 - 6));
      if (*(v121 - 49) < 0)
        goto LABEL_292;
LABEL_286:
      v121 -= 88;
      if (v121 == v118)
        goto LABEL_293;
    }
  }
LABEL_294:
  v317 = v118;
  operator delete(v122);
  v316 = 0;
  v317 = 0;
  v318 = 0;
  v313 = 0;
  v314 = 0;
  v315 = 0;
  v119 = *(_QWORD *)(v2 + 160);
  if (!v119)
    goto LABEL_295;
LABEL_273:
  if (*(char *)(v119 + 31) < 0)
    goto LABEL_297;
LABEL_274:
  v120 = *(_OWORD *)(v119 + 8);
  v333 = *(_QWORD *)(v119 + 24);
  __dst = v120;
LABEL_298:
  v123 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v119 + 96) + 48))(*(_QWORD *)(v119 + 96));
  v124 = atomic_load((unsigned __int8 *)&qword_254A5B390);
  if ((v124 & 1) != 0 || !__cxa_guard_acquire(&qword_254A5B390))
    goto LABEL_299;
  sub_20EBA6F9C();
  v301 = byte_254A5B5FF;
  if (byte_254A5B5FF >= 0)
    v302 = byte_254A5B5FF;
  else
    v302 = qword_254A5B5F0;
  v303 = v302 + 1;
  if (v302 + 1 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v303 >= 0x17)
  {
    v308 = (v303 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v303 | 7) != 0x17)
      v308 = v303 | 7;
    v309 = v308 + 1;
    v304 = (__int128 *)operator new(v308 + 1);
    *((_QWORD *)&xmmword_254A5B5D0 + 1) = v302 + 1;
    unk_254A5B5E0 = v309 | 0x8000000000000000;
    *(_QWORD *)&xmmword_254A5B5D0 = v304;
    goto LABEL_797;
  }
  v304 = &xmmword_254A5B5D0;
  unk_254A5B5E0 = 0;
  xmmword_254A5B5D0 = 0uLL;
  byte_254A5B5E7 = v302 + 1;
  if (v302)
  {
LABEL_797:
    if (v301 >= 0)
      v310 = &qword_254A5B5E8;
    else
      v310 = (uint64_t *)qword_254A5B5E8;
    memmove(v304, v310, v302);
  }
  *(_WORD *)((char *)v304 + v302) = 38;
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5B5D0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A5B390);
  v2 = v312;
LABEL_299:
  if (byte_254A5B5E7 < 0)
  {
    sub_20E860C04(&v330, (void *)xmmword_254A5B5D0, *((unint64_t *)&xmmword_254A5B5D0 + 1));
  }
  else
  {
    v330 = xmmword_254A5B5D0;
    v331 = unk_254A5B5E0;
  }
  v125 = HIBYTE(v331);
  if (v331 >= 0)
  {
    v126 = &v330;
  }
  else
  {
    v125 = *((_QWORD *)&v330 + 1);
    v126 = (__int128 *)v330;
  }
  if (v125 >= 4)
  {
    v127 = (char *)v126 + v125;
    v128 = v126;
    do
    {
      v129 = (char *)memchr(v128, 118, v125 - 3);
      if (!v129)
        break;
      if (*(_DWORD *)v129 == 1684631414)
      {
        if (v129 == v127 || v129 - (char *)v126 == -1)
          break;
        v324[0] = (void *)v123;
        LODWORD(v324[1]) = 4;
        if (SHIBYTE(v333) < 0)
        {
          sub_20E860C04(&v325, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v325 = __dst;
          v326 = v333;
        }
        if (*(char *)(v119 + 55) < 0)
        {
          sub_20E860C04(&__p, *(void **)(v119 + 32), *(_QWORD *)(v119 + 40));
        }
        else
        {
          v296 = *(_OWORD *)(v119 + 32);
          *(_QWORD *)v328 = *(_QWORD *)(v119 + 48);
          __p = v296;
        }
        sub_20EBA7B28();
        if (byte_254A5B707 < 0)
        {
          sub_20E860C04(&v328[8], (void *)xmmword_254A5B6F0, *((unint64_t *)&xmmword_254A5B6F0 + 1));
        }
        else
        {
          *(_OWORD *)&v328[8] = xmmword_254A5B6F0;
          v329 = unk_254A5B700;
        }
        v131 = v317;
        if ((unint64_t)v317 < v318)
          goto LABEL_325;
        goto LABEL_328;
      }
      v128 = (__int128 *)(v129 + 1);
      v125 = v127 - (char *)v128;
    }
    while (v127 - (char *)v128 >= 4);
  }
  v324[0] = (void *)v123;
  LODWORD(v324[1]) = 2;
  if (SHIBYTE(v333) < 0)
  {
    sub_20E860C04(&v325, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v325 = __dst;
    v326 = v333;
  }
  if (*(char *)(v119 + 55) < 0)
  {
    sub_20E860C04(&__p, *(void **)(v119 + 32), *(_QWORD *)(v119 + 40));
  }
  else
  {
    v130 = *(_OWORD *)(v119 + 32);
    *(_QWORD *)v328 = *(_QWORD *)(v119 + 48);
    __p = v130;
  }
  sub_20EBA7B28();
  if (byte_254A5B707 < 0)
  {
    sub_20E860C04(&v328[8], (void *)xmmword_254A5B6F0, *((unint64_t *)&xmmword_254A5B6F0 + 1));
  }
  else
  {
    *(_OWORD *)&v328[8] = xmmword_254A5B6F0;
    v329 = unk_254A5B700;
  }
  v131 = v317;
  if ((unint64_t)v317 >= v318)
  {
LABEL_328:
    v317 = sub_20EBA558C((char **)&v316, (uint64_t)v324);
    if (SHIBYTE(v329) < 0)
    {
      operator delete(*(void **)&v328[8]);
      if ((v328[7] & 0x80000000) == 0)
        goto LABEL_330;
    }
    else if ((v328[7] & 0x80000000) == 0)
    {
      goto LABEL_330;
    }
LABEL_326:
    operator delete((void *)__p);
    if ((SHIBYTE(v326) & 0x80000000) == 0)
      goto LABEL_331;
    goto LABEL_327;
  }
LABEL_325:
  v132 = v324[0];
  *((_DWORD *)v131 + 2) = v324[1];
  *(_QWORD *)v131 = v132;
  v133 = v325;
  *((_QWORD *)v131 + 4) = v326;
  *((_OWORD *)v131 + 1) = v133;
  v326 = 0;
  v325 = 0uLL;
  v134 = *(_QWORD *)v328;
  *(_OWORD *)(v131 + 40) = __p;
  *((_QWORD *)v131 + 7) = v134;
  *(_QWORD *)v328 = 0;
  __p = 0uLL;
  v135 = *(_OWORD *)&v328[8];
  *((_QWORD *)v131 + 10) = v329;
  *((_OWORD *)v131 + 4) = v135;
  *(_QWORD *)&v328[8] = 0;
  *(_QWORD *)&v328[16] = 0;
  v329 = 0;
  v317 = v131 + 88;
  if ((v328[7] & 0x80000000) != 0)
    goto LABEL_326;
LABEL_330:
  if (SHIBYTE(v326) < 0)
LABEL_327:
    operator delete((void *)v325);
LABEL_331:
  v136 = sub_20EBA4AA4();
  if (*((char *)v136 + 23) < 0)
  {
    sub_20E860C04(v322, (void *)*v136, v136[1]);
  }
  else
  {
    v137 = *(_OWORD *)v136;
    v323 = v136[2];
    *(_OWORD *)v322 = v137;
  }
  v138 = HIBYTE(v323);
  if (v323 >= 0)
  {
    v139 = v322;
  }
  else
  {
    v138 = (uint64_t)v322[1];
    v139 = (void **)v322[0];
  }
  if (v138 >= 18)
  {
    v140 = (char *)v139 + v138;
    v141 = v139;
    do
    {
      v142 = (char *)memchr(v141, 67, v138 - 17);
      if (!v142)
        break;
      if (*(_QWORD *)v142 == 0x456C656E6E616843
        && *((_QWORD *)v142 + 1) == 0x696F763C726F7272
        && *((_WORD *)v142 + 8) == 15972)
      {
        if (v142 != v140 && v142 - (char *)v139 != -1)
          goto LABEL_375;
        break;
      }
      v141 = (void **)(v142 + 1);
      v138 = v140 - (char *)v141;
    }
    while (v140 - (char *)v141 >= 18);
  }
  v324[0] = (void *)(v123 + 1);
  LODWORD(v324[1]) = 3;
  v145 = SHIBYTE(v333);
  if (v333 >= 0)
    v146 = HIBYTE(v333);
  else
    v146 = *((_QWORD *)&__dst + 1);
  v147 = v146 + 6;
  if (v146 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v147 >= 0x17)
  {
    v149 = (v147 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v147 | 7) != 0x17)
      v149 = v147 | 7;
    v150 = v149 + 1;
    v148 = (__int128 *)operator new(v149 + 1);
    *((_QWORD *)&v325 + 1) = v146 + 6;
    v326 = v150 | 0x8000000000000000;
    *(_QWORD *)&v325 = v148;
    v2 = v312;
  }
  else
  {
    v326 = 0;
    v325 = 0uLL;
    v148 = &v325;
    HIBYTE(v326) = v146 + 6;
    if (!v146)
      goto LABEL_367;
  }
  if (v145 >= 0)
    v151 = &__dst;
  else
    v151 = (__int128 *)__dst;
  memmove(v148, v151, v146);
LABEL_367:
  strcpy((char *)v148 + v146, ".Error");
  *(_WORD *)&v328[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v329) = 0;
  v152 = v317;
  if ((unint64_t)v317 >= v318)
  {
    v317 = sub_20EBA558C((char **)&v316, (uint64_t)v324);
    if (SHIBYTE(v329) < 0)
    {
      operator delete(*(void **)&v328[8]);
      if ((v328[7] & 0x80000000) == 0)
        goto LABEL_374;
    }
    else if ((v328[7] & 0x80000000) == 0)
    {
      goto LABEL_374;
    }
LABEL_369:
    operator delete((void *)__p);
    if (SHIBYTE(v326) < 0)
      goto LABEL_370;
    goto LABEL_375;
  }
  v153 = v324[0];
  *((_DWORD *)v317 + 2) = v324[1];
  *(_QWORD *)v152 = v153;
  v154 = v325;
  *((_QWORD *)v152 + 4) = v326;
  *((_OWORD *)v152 + 1) = v154;
  v326 = 0;
  v325 = 0uLL;
  v155 = *(_QWORD *)v328;
  *(_OWORD *)(v152 + 40) = __p;
  *((_QWORD *)v152 + 7) = v155;
  *(_QWORD *)v328 = 0;
  __p = 0uLL;
  v156 = *(_OWORD *)&v328[8];
  *((_QWORD *)v152 + 10) = v329;
  *((_OWORD *)v152 + 4) = v156;
  *(_QWORD *)&v328[8] = 0;
  *(_QWORD *)&v328[16] = 0;
  v329 = 0;
  v317 = v152 + 88;
  if ((v328[7] & 0x80000000) != 0)
    goto LABEL_369;
LABEL_374:
  if (SHIBYTE(v326) < 0)
  {
LABEL_370:
    operator delete((void *)v325);
    v157 = *(std::__shared_weak_count **)(v119 + 136);
    if (!v157)
      goto LABEL_379;
    goto LABEL_376;
  }
LABEL_375:
  v157 = *(std::__shared_weak_count **)(v119 + 136);
  if (!v157)
  {
LABEL_379:
    v319 = 0;
    v320 = 0;
    v321 = 0;
    v161 = 0;
    goto LABEL_396;
  }
LABEL_376:
  v158 = std::__shared_weak_count::lock(v157);
  v324[1] = v158;
  if (!v158)
    goto LABEL_379;
  v159 = v158;
  v160 = *(void **)(v119 + 128);
  v324[0] = v160;
  if (v160)
  {
    (*(void (**)(void ***__return_ptr))(*(_QWORD *)v160 + 24))(&v319);
  }
  else
  {
    v319 = 0;
    v320 = 0;
    v321 = 0;
  }
  v162 = (unint64_t *)&v159->__shared_owners_;
  do
    v163 = __ldaxr(v162);
  while (__stlxr(v163 - 1, v162));
  if (v163)
  {
    v161 = v319;
    v164 = v320;
    if (v319 == v320)
      goto LABEL_396;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
    std::__shared_weak_count::__release_weak(v159);
    v161 = v319;
    v164 = v320;
    if (v319 == v320)
      goto LABEL_396;
  }
  do
  {
    v324[0] = (void *)v123;
    v324[1] = *v161;
    v326 = 0;
    v325 = 0uLL;
    v166 = v314;
    if ((unint64_t)v314 < v315)
    {
      *(_OWORD *)v314 = *(_OWORD *)v324;
      v165 = v325;
      *((_QWORD *)v166 + 4) = v326;
      *((_OWORD *)v166 + 1) = v165;
      v314 = v166 + 40;
    }
    else
    {
      v314 = sub_20EBA5F8C(&v313, (uint64_t)v324);
      if (SHIBYTE(v326) < 0)
        operator delete((void *)v325);
    }
    ++v161;
  }
  while (v161 != v164);
  v161 = v319;
LABEL_396:
  if (v161)
  {
    v320 = v161;
    operator delete(v161);
  }
  v167 = *(std::__shared_weak_count **)(v119 + 136);
  if (!v167 || (v168 = std::__shared_weak_count::lock(v167), (v324[1] = v168) == 0))
  {
    v319 = 0;
    v320 = 0;
    v321 = 0;
    v171 = 0;
    goto LABEL_417;
  }
  v169 = v168;
  v170 = *(void **)(v119 + 128);
  v324[0] = v170;
  if (v170)
  {
    (*(void (**)(void ***__return_ptr))(*(_QWORD *)v170 + 32))(&v319);
  }
  else
  {
    v319 = 0;
    v320 = 0;
    v321 = 0;
  }
  v172 = (unint64_t *)&v169->__shared_owners_;
  do
    v173 = __ldaxr(v172);
  while (__stlxr(v173 - 1, v172));
  if (v173)
  {
    v171 = v319;
    v174 = v320;
    if (v319 == v320)
      goto LABEL_417;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
    std::__shared_weak_count::__release_weak(v169);
    v171 = v319;
    v174 = v320;
    if (v319 == v320)
      goto LABEL_417;
  }
  v175 = (void *)(v123 + 1);
  do
  {
    v324[0] = v175;
    v324[1] = *v171;
    v326 = 0;
    v325 = 0uLL;
    v177 = v314;
    if ((unint64_t)v314 < v315)
    {
      *(_OWORD *)v314 = *(_OWORD *)v324;
      v176 = v325;
      *((_QWORD *)v177 + 4) = v326;
      *((_OWORD *)v177 + 1) = v176;
      v314 = v177 + 40;
    }
    else
    {
      v314 = sub_20EBA5F8C(&v313, (uint64_t)v324);
      if (SHIBYTE(v326) < 0)
        operator delete((void *)v325);
    }
    ++v171;
  }
  while (v171 != v174);
  v171 = v319;
LABEL_417:
  if (v171)
  {
    v320 = v171;
    operator delete(v171);
  }
  if (SHIBYTE(v323) < 0)
  {
    operator delete(v322[0]);
    if ((SHIBYTE(v331) & 0x80000000) == 0)
    {
LABEL_421:
      if ((SHIBYTE(v333) & 0x80000000) == 0)
        goto LABEL_422;
LABEL_426:
      operator delete((void *)__dst);
      if ((*(char *)(v119 + 199) & 0x80000000) == 0)
        goto LABEL_423;
      goto LABEL_427;
    }
  }
  else if ((SHIBYTE(v331) & 0x80000000) == 0)
  {
    goto LABEL_421;
  }
  operator delete((void *)v330);
  if (SHIBYTE(v333) < 0)
    goto LABEL_426;
LABEL_422:
  if ((*(char *)(v119 + 199) & 0x80000000) == 0)
  {
LABEL_423:
    __dst = *(_OWORD *)(v119 + 176);
    v333 = *(_QWORD *)(v119 + 192);
    goto LABEL_428;
  }
LABEL_427:
  sub_20E860C04(&__dst, *(void **)(v119 + 176), *(_QWORD *)(v119 + 184));
LABEL_428:
  v178 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v119 + 264) + 48))(*(_QWORD *)(v119 + 264));
  v179 = sub_20EBA7CE0();
  if (*((char *)v179 + 23) < 0)
  {
    sub_20E860C04(&v330, (void *)*v179, v179[1]);
  }
  else
  {
    v180 = *(_OWORD *)v179;
    v331 = v179[2];
    v330 = v180;
  }
  v181 = HIBYTE(v331);
  if (v331 >= 0)
  {
    v182 = &v330;
  }
  else
  {
    v181 = *((_QWORD *)&v330 + 1);
    v182 = (__int128 *)v330;
  }
  if (v181 >= 4)
  {
    v183 = (char *)v182 + v181;
    v184 = v182;
    do
    {
      v185 = (char *)memchr(v184, 118, v181 - 3);
      if (!v185)
        break;
      if (*(_DWORD *)v185 == 1684631414)
      {
        if (v185 == v183 || v185 - (char *)v182 == -1)
          break;
        v324[0] = (void *)v178;
        LODWORD(v324[1]) = 4;
        if (SHIBYTE(v333) < 0)
        {
          sub_20E860C04(&v325, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v325 = __dst;
          v326 = v333;
        }
        if (*(char *)(v119 + 223) < 0)
        {
          sub_20E860C04(&__p, *(void **)(v119 + 200), *(_QWORD *)(v119 + 208));
        }
        else
        {
          __p = *(_OWORD *)(v119 + 200);
          *(_QWORD *)v328 = *(_QWORD *)(v119 + 216);
        }
        sub_20EBA88A8();
        if (byte_254A5B74F < 0)
        {
          sub_20E860C04(&v328[8], (void *)xmmword_254A5B738, *((unint64_t *)&xmmword_254A5B738 + 1));
        }
        else
        {
          *(_OWORD *)&v328[8] = xmmword_254A5B738;
          v329 = unk_254A5B748;
        }
        v186 = v317;
        if ((unint64_t)v317 < v318)
          goto LABEL_454;
        goto LABEL_457;
      }
      v184 = (__int128 *)(v185 + 1);
      v181 = v183 - (char *)v184;
    }
    while (v183 - (char *)v184 >= 4);
  }
  v324[0] = (void *)v178;
  LODWORD(v324[1]) = 2;
  if (SHIBYTE(v333) < 0)
  {
    sub_20E860C04(&v325, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v325 = __dst;
    v326 = v333;
  }
  if (*(char *)(v119 + 223) < 0)
  {
    sub_20E860C04(&__p, *(void **)(v119 + 200), *(_QWORD *)(v119 + 208));
  }
  else
  {
    __p = *(_OWORD *)(v119 + 200);
    *(_QWORD *)v328 = *(_QWORD *)(v119 + 216);
  }
  sub_20EBA88A8();
  if (byte_254A5B74F < 0)
  {
    sub_20E860C04(&v328[8], (void *)xmmword_254A5B738, *((unint64_t *)&xmmword_254A5B738 + 1));
  }
  else
  {
    *(_OWORD *)&v328[8] = xmmword_254A5B738;
    v329 = unk_254A5B748;
  }
  v186 = v317;
  if ((unint64_t)v317 >= v318)
  {
LABEL_457:
    v317 = sub_20EBA558C((char **)&v316, (uint64_t)v324);
    if (SHIBYTE(v329) < 0)
    {
      operator delete(*(void **)&v328[8]);
      if ((v328[7] & 0x80000000) == 0)
        goto LABEL_459;
    }
    else if ((v328[7] & 0x80000000) == 0)
    {
      goto LABEL_459;
    }
LABEL_455:
    operator delete((void *)__p);
    if ((SHIBYTE(v326) & 0x80000000) == 0)
      goto LABEL_460;
    goto LABEL_456;
  }
LABEL_454:
  v187 = v324[0];
  *((_DWORD *)v186 + 2) = v324[1];
  *(_QWORD *)v186 = v187;
  v188 = v325;
  *((_QWORD *)v186 + 4) = v326;
  *((_OWORD *)v186 + 1) = v188;
  v326 = 0;
  v325 = 0uLL;
  v189 = *(_QWORD *)v328;
  *(_OWORD *)(v186 + 40) = __p;
  *((_QWORD *)v186 + 7) = v189;
  *(_QWORD *)v328 = 0;
  __p = 0uLL;
  v190 = *(_OWORD *)&v328[8];
  *((_QWORD *)v186 + 10) = v329;
  *((_OWORD *)v186 + 4) = v190;
  *(_QWORD *)&v328[8] = 0;
  *(_QWORD *)&v328[16] = 0;
  v329 = 0;
  v317 = v186 + 88;
  if ((v328[7] & 0x80000000) != 0)
    goto LABEL_455;
LABEL_459:
  if (SHIBYTE(v326) < 0)
LABEL_456:
    operator delete((void *)v325);
LABEL_460:
  v191 = sub_20EBA4AA4();
  if (*((char *)v191 + 23) < 0)
  {
    sub_20E860C04(v322, (void *)*v191, v191[1]);
  }
  else
  {
    v192 = *(_OWORD *)v191;
    v323 = v191[2];
    *(_OWORD *)v322 = v192;
  }
  v193 = HIBYTE(v323);
  if (v323 >= 0)
  {
    v194 = v322;
  }
  else
  {
    v193 = (uint64_t)v322[1];
    v194 = (void **)v322[0];
  }
  if (v193 >= 18)
  {
    v195 = (char *)v194 + v193;
    v196 = v194;
    do
    {
      v197 = (char *)memchr(v196, 67, v193 - 17);
      if (!v197)
        break;
      if (*(_QWORD *)v197 == 0x456C656E6E616843
        && *((_QWORD *)v197 + 1) == 0x696F763C726F7272
        && *((_WORD *)v197 + 8) == 15972)
      {
        if (v197 != v195 && v197 - (char *)v194 != -1)
          goto LABEL_504;
        break;
      }
      v196 = (void **)(v197 + 1);
      v193 = v195 - (char *)v196;
    }
    while (v195 - (char *)v196 >= 18);
  }
  v324[0] = (void *)(v178 + 1);
  LODWORD(v324[1]) = 3;
  v200 = SHIBYTE(v333);
  if (v333 >= 0)
    v201 = HIBYTE(v333);
  else
    v201 = *((_QWORD *)&__dst + 1);
  v202 = v201 + 6;
  if (v201 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v202 >= 0x17)
  {
    v204 = (v202 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v202 | 7) != 0x17)
      v204 = v202 | 7;
    v205 = v204 + 1;
    v203 = (__int128 *)operator new(v204 + 1);
    *((_QWORD *)&v325 + 1) = v201 + 6;
    v326 = v205 | 0x8000000000000000;
    *(_QWORD *)&v325 = v203;
    v2 = v312;
  }
  else
  {
    v326 = 0;
    v325 = 0uLL;
    v203 = &v325;
    HIBYTE(v326) = v201 + 6;
    if (!v201)
      goto LABEL_496;
  }
  if (v200 >= 0)
    v206 = &__dst;
  else
    v206 = (__int128 *)__dst;
  memmove(v203, v206, v201);
LABEL_496:
  strcpy((char *)v203 + v201, ".Error");
  *(_WORD *)&v328[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v329) = 0;
  v207 = v317;
  if ((unint64_t)v317 >= v318)
  {
    v317 = sub_20EBA558C((char **)&v316, (uint64_t)v324);
    if (SHIBYTE(v329) < 0)
    {
      operator delete(*(void **)&v328[8]);
      if ((v328[7] & 0x80000000) == 0)
        goto LABEL_503;
    }
    else if ((v328[7] & 0x80000000) == 0)
    {
      goto LABEL_503;
    }
LABEL_498:
    operator delete((void *)__p);
    if (SHIBYTE(v326) < 0)
      goto LABEL_499;
    goto LABEL_504;
  }
  v208 = v324[0];
  *((_DWORD *)v317 + 2) = v324[1];
  *(_QWORD *)v207 = v208;
  v209 = v325;
  *((_QWORD *)v207 + 4) = v326;
  *((_OWORD *)v207 + 1) = v209;
  v326 = 0;
  v325 = 0uLL;
  v210 = *(_QWORD *)v328;
  *(_OWORD *)(v207 + 40) = __p;
  *((_QWORD *)v207 + 7) = v210;
  *(_QWORD *)v328 = 0;
  __p = 0uLL;
  v211 = *(_OWORD *)&v328[8];
  *((_QWORD *)v207 + 10) = v329;
  *((_OWORD *)v207 + 4) = v211;
  *(_QWORD *)&v328[8] = 0;
  *(_QWORD *)&v328[16] = 0;
  v329 = 0;
  v317 = v207 + 88;
  if ((v328[7] & 0x80000000) != 0)
    goto LABEL_498;
LABEL_503:
  if (SHIBYTE(v326) < 0)
  {
LABEL_499:
    operator delete((void *)v325);
    v212 = *(std::__shared_weak_count **)(v119 + 304);
    if (!v212)
      goto LABEL_508;
    goto LABEL_505;
  }
LABEL_504:
  v212 = *(std::__shared_weak_count **)(v119 + 304);
  if (!v212)
  {
LABEL_508:
    v319 = 0;
    v320 = 0;
    v321 = 0;
    v216 = 0;
    goto LABEL_525;
  }
LABEL_505:
  v213 = std::__shared_weak_count::lock(v212);
  v324[1] = v213;
  if (!v213)
    goto LABEL_508;
  v214 = v213;
  v215 = *(void **)(v119 + 296);
  v324[0] = v215;
  if (v215)
  {
    (*(void (**)(void ***__return_ptr))(*(_QWORD *)v215 + 24))(&v319);
  }
  else
  {
    v319 = 0;
    v320 = 0;
    v321 = 0;
  }
  v217 = (unint64_t *)&v214->__shared_owners_;
  do
    v218 = __ldaxr(v217);
  while (__stlxr(v218 - 1, v217));
  if (v218)
  {
    v216 = v319;
    v219 = v320;
    if (v319 == v320)
      goto LABEL_525;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
    std::__shared_weak_count::__release_weak(v214);
    v216 = v319;
    v219 = v320;
    if (v319 == v320)
      goto LABEL_525;
  }
  do
  {
    v324[0] = (void *)v178;
    v324[1] = *v216;
    v326 = 0;
    v325 = 0uLL;
    v221 = v314;
    if ((unint64_t)v314 < v315)
    {
      *(_OWORD *)v314 = *(_OWORD *)v324;
      v220 = v325;
      *((_QWORD *)v221 + 4) = v326;
      *((_OWORD *)v221 + 1) = v220;
      v314 = v221 + 40;
    }
    else
    {
      v314 = sub_20EBA5F8C(&v313, (uint64_t)v324);
      if (SHIBYTE(v326) < 0)
        operator delete((void *)v325);
    }
    ++v216;
  }
  while (v216 != v219);
  v216 = v319;
LABEL_525:
  if (v216)
  {
    v320 = v216;
    operator delete(v216);
  }
  v222 = *(std::__shared_weak_count **)(v119 + 304);
  if (!v222 || (v223 = std::__shared_weak_count::lock(v222), (v324[1] = v223) == 0))
  {
    v319 = 0;
    v320 = 0;
    v321 = 0;
    v226 = 0;
    goto LABEL_546;
  }
  v224 = v223;
  v225 = *(void **)(v119 + 296);
  v324[0] = v225;
  if (v225)
  {
    (*(void (**)(void ***__return_ptr))(*(_QWORD *)v225 + 32))(&v319);
  }
  else
  {
    v319 = 0;
    v320 = 0;
    v321 = 0;
  }
  v227 = (unint64_t *)&v224->__shared_owners_;
  do
    v228 = __ldaxr(v227);
  while (__stlxr(v228 - 1, v227));
  if (v228)
  {
    v226 = v319;
    v229 = v320;
    if (v319 == v320)
      goto LABEL_546;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
    std::__shared_weak_count::__release_weak(v224);
    v226 = v319;
    v229 = v320;
    if (v319 == v320)
      goto LABEL_546;
  }
  v230 = (void *)(v178 + 1);
  do
  {
    v324[0] = v230;
    v324[1] = *v226;
    v326 = 0;
    v325 = 0uLL;
    v232 = v314;
    if ((unint64_t)v314 < v315)
    {
      *(_OWORD *)v314 = *(_OWORD *)v324;
      v231 = v325;
      *((_QWORD *)v232 + 4) = v326;
      *((_OWORD *)v232 + 1) = v231;
      v314 = v232 + 40;
    }
    else
    {
      v314 = sub_20EBA5F8C(&v313, (uint64_t)v324);
      if (SHIBYTE(v326) < 0)
        operator delete((void *)v325);
    }
    ++v226;
  }
  while (v226 != v229);
  v226 = v319;
LABEL_546:
  if (v226)
  {
    v320 = v226;
    operator delete(v226);
  }
  if (SHIBYTE(v323) < 0)
  {
    operator delete(v322[0]);
    if ((SHIBYTE(v331) & 0x80000000) == 0)
    {
LABEL_550:
      if ((SHIBYTE(v333) & 0x80000000) == 0)
        goto LABEL_551;
LABEL_555:
      operator delete((void *)__dst);
      if ((*(char *)(v119 + 367) & 0x80000000) == 0)
        goto LABEL_552;
      goto LABEL_556;
    }
  }
  else if ((SHIBYTE(v331) & 0x80000000) == 0)
  {
    goto LABEL_550;
  }
  operator delete((void *)v330);
  if (SHIBYTE(v333) < 0)
    goto LABEL_555;
LABEL_551:
  if ((*(char *)(v119 + 367) & 0x80000000) == 0)
  {
LABEL_552:
    __dst = *(_OWORD *)(v119 + 344);
    v333 = *(_QWORD *)(v119 + 360);
    goto LABEL_557;
  }
LABEL_556:
  sub_20E860C04(&__dst, *(void **)(v119 + 344), *(_QWORD *)(v119 + 352));
LABEL_557:
  v233 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v119 + 432) + 48))(*(_QWORD *)(v119 + 432));
  v234 = sub_20EBA60E8();
  if (*((char *)v234 + 23) < 0)
  {
    sub_20E860C04(&v330, (void *)*v234, v234[1]);
  }
  else
  {
    v235 = *(_OWORD *)v234;
    v331 = v234[2];
    v330 = v235;
  }
  v236 = HIBYTE(v331);
  if (v331 >= 0)
  {
    v237 = &v330;
  }
  else
  {
    v236 = *((_QWORD *)&v330 + 1);
    v237 = (__int128 *)v330;
  }
  if (v236 >= 4)
  {
    v238 = (char *)v237 + v236;
    v239 = v237;
    do
    {
      v240 = (char *)memchr(v239, 118, v236 - 3);
      if (!v240)
        break;
      if (*(_DWORD *)v240 == 1684631414)
      {
        if (v240 == v238 || v240 - (char *)v237 == -1)
          break;
        v324[0] = (void *)v233;
        LODWORD(v324[1]) = 4;
        if (SHIBYTE(v333) < 0)
        {
          sub_20E860C04(&v325, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v325 = __dst;
          v326 = v333;
        }
        if (*(char *)(v119 + 391) < 0)
        {
          sub_20E860C04(&__p, *(void **)(v119 + 368), *(_QWORD *)(v119 + 376));
        }
        else
        {
          __p = *(_OWORD *)(v119 + 368);
          *(_QWORD *)v328 = *(_QWORD *)(v119 + 384);
        }
        sub_20EBA8A60();
        if (byte_254A5B797 < 0)
        {
          sub_20E860C04(&v328[8], (void *)xmmword_254A5B780, *((unint64_t *)&xmmword_254A5B780 + 1));
        }
        else
        {
          *(_OWORD *)&v328[8] = xmmword_254A5B780;
          v329 = unk_254A5B790;
        }
        v241 = v317;
        if ((unint64_t)v317 < v318)
          goto LABEL_583;
        goto LABEL_586;
      }
      v239 = (__int128 *)(v240 + 1);
      v236 = v238 - (char *)v239;
    }
    while (v238 - (char *)v239 >= 4);
  }
  v324[0] = (void *)v233;
  LODWORD(v324[1]) = 2;
  if (SHIBYTE(v333) < 0)
  {
    sub_20E860C04(&v325, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v325 = __dst;
    v326 = v333;
  }
  if (*(char *)(v119 + 391) < 0)
  {
    sub_20E860C04(&__p, *(void **)(v119 + 368), *(_QWORD *)(v119 + 376));
  }
  else
  {
    __p = *(_OWORD *)(v119 + 368);
    *(_QWORD *)v328 = *(_QWORD *)(v119 + 384);
  }
  sub_20EBA8A60();
  if (byte_254A5B797 < 0)
  {
    sub_20E860C04(&v328[8], (void *)xmmword_254A5B780, *((unint64_t *)&xmmword_254A5B780 + 1));
  }
  else
  {
    *(_OWORD *)&v328[8] = xmmword_254A5B780;
    v329 = unk_254A5B790;
  }
  v241 = v317;
  if ((unint64_t)v317 >= v318)
  {
LABEL_586:
    v317 = sub_20EBA558C((char **)&v316, (uint64_t)v324);
    if (SHIBYTE(v329) < 0)
    {
      operator delete(*(void **)&v328[8]);
      if ((v328[7] & 0x80000000) == 0)
        goto LABEL_588;
    }
    else if ((v328[7] & 0x80000000) == 0)
    {
      goto LABEL_588;
    }
LABEL_584:
    operator delete((void *)__p);
    if ((SHIBYTE(v326) & 0x80000000) == 0)
      goto LABEL_589;
    goto LABEL_585;
  }
LABEL_583:
  v242 = v324[0];
  *((_DWORD *)v241 + 2) = v324[1];
  *(_QWORD *)v241 = v242;
  v243 = v325;
  *((_QWORD *)v241 + 4) = v326;
  *((_OWORD *)v241 + 1) = v243;
  v326 = 0;
  v325 = 0uLL;
  v244 = *(_QWORD *)v328;
  *(_OWORD *)(v241 + 40) = __p;
  *((_QWORD *)v241 + 7) = v244;
  *(_QWORD *)v328 = 0;
  __p = 0uLL;
  v245 = *(_OWORD *)&v328[8];
  *((_QWORD *)v241 + 10) = v329;
  *((_OWORD *)v241 + 4) = v245;
  *(_QWORD *)&v328[8] = 0;
  *(_QWORD *)&v328[16] = 0;
  v329 = 0;
  v317 = v241 + 88;
  if ((v328[7] & 0x80000000) != 0)
    goto LABEL_584;
LABEL_588:
  if (SHIBYTE(v326) < 0)
LABEL_585:
    operator delete((void *)v325);
LABEL_589:
  v246 = sub_20EBA4AA4();
  if (*((char *)v246 + 23) < 0)
  {
    sub_20E860C04(v322, (void *)*v246, v246[1]);
  }
  else
  {
    v247 = *(_OWORD *)v246;
    v323 = v246[2];
    *(_OWORD *)v322 = v247;
  }
  v248 = HIBYTE(v323);
  if (v323 >= 0)
  {
    v249 = v322;
  }
  else
  {
    v248 = (uint64_t)v322[1];
    v249 = (void **)v322[0];
  }
  if (v248 >= 18)
  {
    v250 = (char *)v249 + v248;
    v251 = v249;
    do
    {
      v252 = (char *)memchr(v251, 67, v248 - 17);
      if (!v252)
        break;
      if (*(_QWORD *)v252 == 0x456C656E6E616843
        && *((_QWORD *)v252 + 1) == 0x696F763C726F7272
        && *((_WORD *)v252 + 8) == 15972)
      {
        if (v252 != v250 && v252 - (char *)v249 != -1)
          goto LABEL_633;
        break;
      }
      v251 = (void **)(v252 + 1);
      v248 = v250 - (char *)v251;
    }
    while (v250 - (char *)v251 >= 18);
  }
  v324[0] = (void *)(v233 + 1);
  LODWORD(v324[1]) = 3;
  v255 = SHIBYTE(v333);
  if (v333 >= 0)
    v256 = HIBYTE(v333);
  else
    v256 = *((_QWORD *)&__dst + 1);
  v257 = v256 + 6;
  if (v256 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v257 >= 0x17)
  {
    v259 = (v257 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v257 | 7) != 0x17)
      v259 = v257 | 7;
    v260 = v259 + 1;
    v258 = (__int128 *)operator new(v259 + 1);
    *((_QWORD *)&v325 + 1) = v256 + 6;
    v326 = v260 | 0x8000000000000000;
    *(_QWORD *)&v325 = v258;
    v2 = v312;
  }
  else
  {
    v326 = 0;
    v325 = 0uLL;
    v258 = &v325;
    HIBYTE(v326) = v256 + 6;
    if (!v256)
      goto LABEL_625;
  }
  if (v255 >= 0)
    v261 = &__dst;
  else
    v261 = (__int128 *)__dst;
  memmove(v258, v261, v256);
LABEL_625:
  strcpy((char *)v258 + v256, ".Error");
  *(_WORD *)&v328[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v329) = 0;
  v262 = v317;
  if ((unint64_t)v317 >= v318)
  {
    v317 = sub_20EBA558C((char **)&v316, (uint64_t)v324);
    if (SHIBYTE(v329) < 0)
    {
      operator delete(*(void **)&v328[8]);
      if ((v328[7] & 0x80000000) == 0)
        goto LABEL_632;
    }
    else if ((v328[7] & 0x80000000) == 0)
    {
      goto LABEL_632;
    }
LABEL_627:
    operator delete((void *)__p);
    if (SHIBYTE(v326) < 0)
      goto LABEL_628;
    goto LABEL_633;
  }
  v263 = v324[0];
  *((_DWORD *)v317 + 2) = v324[1];
  *(_QWORD *)v262 = v263;
  v264 = v325;
  *((_QWORD *)v262 + 4) = v326;
  *((_OWORD *)v262 + 1) = v264;
  v326 = 0;
  v325 = 0uLL;
  v265 = *(_QWORD *)v328;
  *(_OWORD *)(v262 + 40) = __p;
  *((_QWORD *)v262 + 7) = v265;
  *(_QWORD *)v328 = 0;
  __p = 0uLL;
  v266 = *(_OWORD *)&v328[8];
  *((_QWORD *)v262 + 10) = v329;
  *((_OWORD *)v262 + 4) = v266;
  *(_QWORD *)&v328[8] = 0;
  *(_QWORD *)&v328[16] = 0;
  v329 = 0;
  v317 = v262 + 88;
  if ((v328[7] & 0x80000000) != 0)
    goto LABEL_627;
LABEL_632:
  if (SHIBYTE(v326) < 0)
  {
LABEL_628:
    operator delete((void *)v325);
    v267 = *(std::__shared_weak_count **)(v119 + 472);
    if (!v267)
      goto LABEL_637;
    goto LABEL_634;
  }
LABEL_633:
  v267 = *(std::__shared_weak_count **)(v119 + 472);
  if (!v267)
  {
LABEL_637:
    v319 = 0;
    v320 = 0;
    v321 = 0;
    v271 = 0;
    goto LABEL_654;
  }
LABEL_634:
  v268 = std::__shared_weak_count::lock(v267);
  v324[1] = v268;
  if (!v268)
    goto LABEL_637;
  v269 = v268;
  v270 = *(void **)(v119 + 464);
  v324[0] = v270;
  if (v270)
  {
    (*(void (**)(void ***__return_ptr))(*(_QWORD *)v270 + 24))(&v319);
  }
  else
  {
    v319 = 0;
    v320 = 0;
    v321 = 0;
  }
  v272 = (unint64_t *)&v269->__shared_owners_;
  do
    v273 = __ldaxr(v272);
  while (__stlxr(v273 - 1, v272));
  if (v273)
  {
    v271 = v319;
    v274 = v320;
    if (v319 == v320)
      goto LABEL_654;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
    std::__shared_weak_count::__release_weak(v269);
    v271 = v319;
    v274 = v320;
    if (v319 == v320)
      goto LABEL_654;
  }
  do
  {
    v324[0] = (void *)v233;
    v324[1] = *v271;
    v326 = 0;
    v325 = 0uLL;
    v276 = v314;
    if ((unint64_t)v314 < v315)
    {
      *(_OWORD *)v314 = *(_OWORD *)v324;
      v275 = v325;
      *((_QWORD *)v276 + 4) = v326;
      *((_OWORD *)v276 + 1) = v275;
      v314 = v276 + 40;
    }
    else
    {
      v314 = sub_20EBA5F8C(&v313, (uint64_t)v324);
      if (SHIBYTE(v326) < 0)
        operator delete((void *)v325);
    }
    ++v271;
  }
  while (v271 != v274);
  v271 = v319;
LABEL_654:
  if (v271)
  {
    v320 = v271;
    operator delete(v271);
  }
  v277 = *(std::__shared_weak_count **)(v119 + 472);
  if (!v277 || (v278 = std::__shared_weak_count::lock(v277), (v324[1] = v278) == 0))
  {
    v319 = 0;
    v320 = 0;
    v321 = 0;
    v281 = 0;
    goto LABEL_675;
  }
  v279 = v278;
  v280 = *(void **)(v119 + 464);
  v324[0] = v280;
  if (v280)
  {
    (*(void (**)(void ***__return_ptr))(*(_QWORD *)v280 + 32))(&v319);
  }
  else
  {
    v319 = 0;
    v320 = 0;
    v321 = 0;
  }
  v282 = (unint64_t *)&v279->__shared_owners_;
  do
    v283 = __ldaxr(v282);
  while (__stlxr(v283 - 1, v282));
  if (v283)
  {
    v281 = v319;
    v284 = v320;
    if (v319 == v320)
      goto LABEL_675;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v279->__on_zero_shared)(v279);
    std::__shared_weak_count::__release_weak(v279);
    v281 = v319;
    v284 = v320;
    if (v319 == v320)
      goto LABEL_675;
  }
  v285 = (void *)(v233 + 1);
  do
  {
    v324[0] = v285;
    v324[1] = *v281;
    v326 = 0;
    v325 = 0uLL;
    v287 = v314;
    if ((unint64_t)v314 < v315)
    {
      *(_OWORD *)v314 = *(_OWORD *)v324;
      v286 = v325;
      *((_QWORD *)v287 + 4) = v326;
      *((_OWORD *)v287 + 1) = v286;
      v314 = v287 + 40;
    }
    else
    {
      v314 = sub_20EBA5F8C(&v313, (uint64_t)v324);
      if (SHIBYTE(v326) < 0)
        operator delete((void *)v325);
    }
    ++v281;
  }
  while (v281 != v284);
  v281 = v319;
LABEL_675:
  if (v281)
  {
    v320 = v281;
    operator delete(v281);
  }
  if (SHIBYTE(v323) < 0)
  {
    operator delete(v322[0]);
    if ((SHIBYTE(v331) & 0x80000000) == 0)
    {
LABEL_679:
      if ((SHIBYTE(v333) & 0x80000000) == 0)
        goto LABEL_680;
LABEL_684:
      operator delete((void *)__dst);
      if ((*(char *)(v2 + 119) & 0x80000000) == 0)
        goto LABEL_681;
      goto LABEL_685;
    }
  }
  else if ((SHIBYTE(v331) & 0x80000000) == 0)
  {
    goto LABEL_679;
  }
  operator delete((void *)v330);
  if (SHIBYTE(v333) < 0)
    goto LABEL_684;
LABEL_680:
  if ((*(char *)(v2 + 119) & 0x80000000) == 0)
  {
LABEL_681:
    *(_OWORD *)v324 = *(_OWORD *)(v2 + 96);
    *(_QWORD *)&v325 = *(_QWORD *)(v2 + 112);
    goto LABEL_686;
  }
LABEL_685:
  sub_20E860C04(v324, *(void **)(v2 + 96), *(_QWORD *)(v2 + 104));
LABEL_686:
  v288 = *(_QWORD *)(v2 + 144) != 0;
  if (*(char *)(v2 + 143) < 0)
  {
    sub_20E860C04(&__dst, *(void **)(v2 + 120), *(_QWORD *)(v2 + 128));
  }
  else
  {
    __dst = *(_OWORD *)(v2 + 120);
    v333 = *(_QWORD *)(v2 + 136);
  }
  sub_20EBA690C((uint64_t)v335, (__int128 *)v324, v288, (uint64_t *)&v316, (uint64_t *)&v313, &__dst);
  if ((SHIBYTE(v333) & 0x80000000) == 0)
  {
    if ((SBYTE7(v325) & 0x80000000) == 0)
      goto LABEL_691;
LABEL_701:
    operator delete(v324[0]);
    v289 = (char *)v313;
    if (v313)
      goto LABEL_692;
LABEL_702:
    v291 = (char *)v316;
    if (v316)
      goto LABEL_703;
    goto LABEL_715;
  }
  operator delete((void *)__dst);
  if (SBYTE7(v325) < 0)
    goto LABEL_701;
LABEL_691:
  v289 = (char *)v313;
  if (!v313)
    goto LABEL_702;
LABEL_692:
  v290 = v314;
  if (v314 == v289)
  {
    v314 = v289;
    operator delete(v289);
    v291 = (char *)v316;
    if (!v316)
      goto LABEL_715;
LABEL_703:
    v292 = v317;
    v293 = v291;
    if (v317 == v291)
    {
LABEL_714:
      v317 = v291;
      operator delete(v293);
      goto LABEL_715;
    }
    while (1)
    {
      while (*(v292 - 1) < 0)
      {
        operator delete(*((void **)v292 - 3));
        if (*(v292 - 25) < 0)
          goto LABEL_705;
LABEL_711:
        if ((*(v292 - 49) & 0x80000000) == 0)
          goto LABEL_706;
LABEL_712:
        operator delete(*((void **)v292 - 9));
        v292 -= 88;
        if (v292 == v291)
        {
LABEL_713:
          v293 = v316;
          goto LABEL_714;
        }
      }
      if ((*(v292 - 25) & 0x80000000) == 0)
        goto LABEL_711;
LABEL_705:
      operator delete(*((void **)v292 - 6));
      if (*(v292 - 49) < 0)
        goto LABEL_712;
LABEL_706:
      v292 -= 88;
      if (v292 == v291)
        goto LABEL_713;
    }
  }
  do
  {
    if (*(v290 - 1) < 0)
      operator delete(*((void **)v290 - 3));
    v290 -= 40;
  }
  while (v290 != v289);
  v314 = v289;
  operator delete(v313);
  v291 = (char *)v316;
  if (v316)
    goto LABEL_703;
LABEL_715:
  sub_20EBA4824(a1, (uint64_t)v334, 2uLL);
  sub_20EBA8C18((uint64_t)v335);
  return sub_20EBA8C18((uint64_t)v334);
}

void sub_20EBA41BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58,char a59)
{
  __cxa_guard_abort(&qword_254A5B390);
  if (a58 < 0)
    operator delete(__p);
  sub_20EBA4920(&a12);
  sub_20EBA4990(&a15);
  sub_20EBA8C18((uint64_t)&a59);
  _Unwind_Resume(a1);
}

void sub_20EBA4614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  void *v56;

  if (a35 < 0)
  {
    operator delete(__p);
    v56 = a18;
    if (a18)
      goto LABEL_3;
  }
  else
  {
    v56 = a18;
    if (a18)
    {
LABEL_3:
      a19 = (uint64_t)v56;
      operator delete(v56);
      if ((a26 & 0x80000000) == 0)
        goto LABEL_8;
LABEL_7:
      operator delete(a21);
LABEL_8:
      if (a48 < 0)
        operator delete(a43);
      if (a55 < 0)
        operator delete(a50);
      sub_20EBA4920((void **)&a12);
      sub_20EBA4990((void **)&a15);
      _Unwind_Resume(a1);
    }
  }
  if ((a26 & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

uint64_t sub_20EBA46A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD **v3;

  v1 = *(_QWORD *)(a1 + 56);
  v2 = *(_QWORD *)(v1 + 80);
  (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 72) + 64))(*(_QWORD *)(v2 + 72));
  (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 240) + 64))(*(_QWORD *)(v2 + 240));
  v3 = *(_QWORD ***)(v1 + 160);
  (*(void (**)(_QWORD *))(*v3[9] + 64))(v3[9]);
  (*(void (**)(_QWORD *))(*v3[30] + 64))(v3[30]);
  return (*(uint64_t (**)(_QWORD *))(*v3[51] + 64))(v3[51]);
}

uint64_t sub_20EBA4710(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24C9C5A58;
  v2 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v2)
    (*(void (**)(void))(a1 + 64))();
  *(_QWORD *)a1 = off_24CA1E1D8;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20EBA4798(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24C9C5A58;
  v2 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v2)
    (*(void (**)(void))(a1 + 64))();
  *(_QWORD *)a1 = off_24CA1E1D8;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
LABEL_8:
      JUMPOUT(0x212BC6398);
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(*(void **)(a1 + 8));
  goto LABEL_8;
}

_QWORD *sub_20EBA4824(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >> 57)
      sub_20E867F44();
    v5 = a3 << 7;
    v6 = (char *)operator new(a3 << 7);
    v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    do
    {
      sub_20EBA8DFC((uint64_t)&v6[v7], (__int128 *)(a2 + v7));
      v7 += 128;
    }
    while (v5 != v7);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_20EBA48B8(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v3;
  uint64_t v4;
  void *v5;

  v3 = *v1;
  if (*v1)
  {
    v4 = (uint64_t)v1[1];
    v5 = *v1;
    if ((void *)v4 != v3)
    {
      do
        v4 = sub_20EBA8C18(v4 - 128);
      while ((void *)v4 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void **sub_20EBA4920(void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*(v3 - 3));
        v3 -= 5;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **sub_20EBA4990(void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 == v2)
    {
LABEL_13:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      if (*((char *)v3 - 1) < 0)
      {
        operator delete(*(v3 - 3));
        if ((*((char *)v3 - 25) & 0x80000000) == 0)
        {
LABEL_7:
          if (*((char *)v3 - 49) < 0)
            goto LABEL_11;
          goto LABEL_4;
        }
      }
      else if ((*((char *)v3 - 25) & 0x80000000) == 0)
      {
        goto LABEL_7;
      }
      operator delete(*(v3 - 6));
      if (*((char *)v3 - 49) < 0)
LABEL_11:
        operator delete(*(v3 - 9));
LABEL_4:
      v3 -= 11;
      if (v3 == v2)
      {
        v4 = *a1;
        goto LABEL_13;
      }
    }
  }
  return a1;
}

uint64_t sub_20EBA4A34(uint64_t a1)
{
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 63) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(*(void **)(a1 + 40));
    if ((*(char *)(a1 + 39) & 0x80000000) == 0)
      return a1;
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    goto LABEL_6;
LABEL_3:
  if ((*(char *)(a1 + 39) & 0x80000000) == 0)
    return a1;
LABEL_7:
  operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t *sub_20EBA4AA4()
{
  unsigned __int8 v0;
  uint64_t *v2;
  const void **v3;
  int v4;
  size_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const void *v11;

  v0 = atomic_load((unsigned __int8 *)&qword_254A50620);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A50620))
  {
    v2 = sub_20EBA5954();
    v3 = (const void **)v2;
    v4 = *((char *)v2 + 23);
    if (v4 >= 0)
      v5 = *((unsigned __int8 *)v2 + 23);
    else
      v5 = v2[1];
    v6 = v5 + 1;
    if (v5 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v7 = &qword_254A50608;
    if (v6 >= 0x17)
    {
      v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v8 = v6 | 7;
      v9 = v8 + 1;
      v10 = (uint64_t *)operator new(v8 + 1);
      qword_254A50610 = v5 + 1;
      unk_254A50618 = v9 | 0x8000000000000000;
      qword_254A50608 = (uint64_t)v10;
      v7 = v10;
    }
    else
    {
      qword_254A50610 = 0;
      unk_254A50618 = 0;
      qword_254A50608 = 0;
      byte_254A5061F = v5 + 1;
      if (!v5)
      {
LABEL_18:
        *(_WORD *)((char *)v7 + v5) = 38;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A50608, &dword_20E81F000);
        __cxa_guard_release(&qword_254A50620);
        return &qword_254A50608;
      }
    }
    if (v4 >= 0)
      v11 = v3;
    else
      v11 = *v3;
    memmove(v7, v11, v5);
    goto LABEL_18;
  }
  return &qword_254A50608;
}

void sub_20EBA4BD0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A50620);
  _Unwind_Resume(a1);
}

void sub_20EBA4BE8()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5B310);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5B310))
  {
    sub_20EBA4D68();
    v1 = byte_254A5B47F;
    if (byte_254A5B47F >= 0)
      v2 = byte_254A5B47F;
    else
      v2 = *((_QWORD *)&xmmword_254A5B468 + 1);
    v3 = v2 + 6;
    if (v2 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v7 = (char *)operator new(v5 + 1);
      qword_254A5B458 = v2 + 6;
      unk_254A5B460 = v6 | 0x8000000000000000;
      qword_254A5B450 = (uint64_t)v7;
      *(_DWORD *)v7 = 1936617315;
      *((_WORD *)v7 + 2) = 8308;
      v4 = v7 + 6;
    }
    else
    {
      qword_254A5B458 = 0;
      unk_254A5B460 = 0;
      qword_254A5B450 = 0x2074736E6F63;
      byte_254A5B467 = v2 + 6;
      v4 = (char *)&qword_254A5B450 + 6;
      if (!v2)
      {
LABEL_18:
        v4[v2] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A5B450, &dword_20E81F000);
        __cxa_guard_release(&qword_254A5B310);
        return;
      }
    }
    if (v1 >= 0)
      v8 = &xmmword_254A5B468;
    else
      v8 = (__int128 *)xmmword_254A5B468;
    memmove(v4, v8, v2);
    goto LABEL_18;
  }
}

void sub_20EBA4D50(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5B310);
  _Unwind_Resume(a1);
}

void sub_20EBA4D68()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5B318);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5B318))
  {
    sub_20EBA4E20();
    if (byte_254A5B497 < 0)
    {
      sub_20E860C04(&xmmword_254A5B468, (void *)qword_254A5B480, unk_254A5B488);
    }
    else
    {
      xmmword_254A5B468 = *(_OWORD *)&qword_254A5B480;
      unk_254A5B478 = unk_254A5B490;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5B468, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5B318);
  }
}

void sub_20EBA4E08(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5B318);
  _Unwind_Resume(a1);
}

void sub_20EBA4E20()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5B320);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5B320))
  {
    sub_20EBA50DC(__p);
    sub_20EBA4EF4((char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A5B480, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5B320);
  }
}

void sub_20EBA4EB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5B320);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5B320);
  _Unwind_Resume(a1);
}

void sub_20EBA4EF4(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  void *v10[2];
  char v11;
  void *__dst[2];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_254A5B328);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5B328))
  {
    sub_20E8610C0(v10, "std::vector");
    sub_20EBA52B8((char *)v10);
    if (v11 < 0)
      operator delete(v10[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5B498, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5B328);
  }
  if (byte_254A5B4AF < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A5B498, *((unint64_t *)&xmmword_254A5B498 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A5B498;
    v13 = unk_254A5B4A8;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 1uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, (std::string *)&qword_254A5B480, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
}

void sub_20EBA506C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5B328);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5B328);
  _Unwind_Resume(a1);
}

void sub_20EBA50B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  sub_20E89FB98((void **)&a9);
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20EBA50DC(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5B348);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5B348))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ChannelOutput<std::vector<cv3d::vio::sem_node::SemanticsProcessingBundle>>]", qword_254A5B4F8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5B4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5B348);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A5B350);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A5B350))
  {
    v5 = sub_20E8A2354(qword_254A5B4F8, "<", 0);
    sub_20E89FC08(qword_254A5B4F8, 0, v5, qword_254A5B510);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5B510, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5B350);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A5B358);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A5B358))
  {
    sub_21023CD84((uint64_t)qword_254A5B510, (uint64_t)&xmmword_254A5B528);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5B528, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5B358);
  }
  if (byte_254A5B53F < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A5B528, *((unint64_t *)&xmmword_254A5B528 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A5B528;
    __dst[2] = unk_254A5B538;
  }
}

void sub_20EBA5270(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5B358);
  _Unwind_Resume(a1);
}

void sub_20EBA5288(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5B350);
  _Unwind_Resume(a1);
}

void sub_20EBA52A0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5B348);
  _Unwind_Resume(a1);
}

void sub_20EBA52B8(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  void *__dst[2];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_254A5B330);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5B330))
  {
    sub_20EBA548C();
    if (byte_254A5B4F7 < 0)
    {
      sub_20E860C04(&xmmword_254A5B4B0, (void *)xmmword_254A5B4E0, *((unint64_t *)&xmmword_254A5B4E0 + 1));
    }
    else
    {
      xmmword_254A5B4B0 = xmmword_254A5B4E0;
      unk_254A5B4C0 = unk_254A5B4F0;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5B4B0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5B330);
  }
  if (byte_254A5B4C7 < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A5B4B0, *((unint64_t *)&xmmword_254A5B4B0 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A5B4B0;
    v11 = unk_254A5B4C0;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 1uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, (std::string *)&xmmword_254A5B498, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v11) < 0)
    operator delete(__dst[0]);
}

void sub_20EBA5444(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5B330);
  _Unwind_Resume(a1);
}

void sub_20EBA5460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20E89FB98(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20EBA548C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5B338);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5B338))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::sem_node::SemanticsProcessingBundle]", qword_254A5B4C8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5B4C8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5B338);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5B340);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5B340))
    {
      sub_21023CD84((uint64_t)qword_254A5B4C8, (uint64_t)&xmmword_254A5B4E0);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5B4E0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5B340);
    }
  }
}

void sub_20EBA555C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5B340);
  _Unwind_Resume(a1);
}

void sub_20EBA5574(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5B338);
  _Unwind_Resume(a1);
}

char *sub_20EBA558C(char **a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  int v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char *v19;

  v3 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x2E8BA2E8BA2E8BALL)
    sub_20E867F44();
  if (0x5D1745D1745D1746 * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x5D1745D1745D1746 * ((a1[2] - *a1) >> 3);
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((a1[2] - *a1) >> 3)) >= 0x1745D1745D1745DLL)
    v6 = 0x2E8BA2E8BA2E8BALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x2E8BA2E8BA2E8BALL)
      sub_20E877A38();
    v7 = (char *)operator new(88 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[88 * v3];
  *(_QWORD *)v8 = *(_QWORD *)a2;
  *((_DWORD *)v8 + 2) = *(_DWORD *)(a2 + 8);
  v9 = &v7[88 * v6];
  *((_OWORD *)v8 + 1) = *(_OWORD *)(a2 + 16);
  *((_QWORD *)v8 + 4) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_OWORD *)(v8 + 40) = *(_OWORD *)(a2 + 40);
  *((_QWORD *)v8 + 7) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v10 = *(_OWORD *)(a2 + 64);
  *((_QWORD *)v8 + 10) = *(_QWORD *)(a2 + 80);
  *((_OWORD *)v8 + 4) = v10;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  v11 = v8 + 88;
  v12 = *a1;
  v13 = a1[1];
  if (v13 != *a1)
  {
    do
    {
      v14 = *((_QWORD *)v13 - 11);
      v13 -= 88;
      v15 = *((_DWORD *)v13 + 2);
      *((_QWORD *)v8 - 11) = v14;
      v8 -= 88;
      *((_DWORD *)v8 + 2) = v15;
      v16 = *((_OWORD *)v13 + 1);
      *((_QWORD *)v8 + 4) = *((_QWORD *)v13 + 4);
      *((_OWORD *)v8 + 1) = v16;
      *((_QWORD *)v13 + 3) = 0;
      *((_QWORD *)v13 + 4) = 0;
      *((_QWORD *)v13 + 2) = 0;
      v17 = *(_OWORD *)(v13 + 40);
      *((_QWORD *)v8 + 7) = *((_QWORD *)v13 + 7);
      *(_OWORD *)(v8 + 40) = v17;
      *((_QWORD *)v13 + 6) = 0;
      *((_QWORD *)v13 + 7) = 0;
      *((_QWORD *)v13 + 5) = 0;
      v18 = *((_OWORD *)v13 + 4);
      *((_QWORD *)v8 + 10) = *((_QWORD *)v13 + 10);
      *((_OWORD *)v8 + 4) = v18;
      *((_QWORD *)v13 + 8) = 0;
      *((_QWORD *)v13 + 9) = 0;
      *((_QWORD *)v13 + 10) = 0;
    }
    while (v13 != v12);
    v13 = *a1;
    v19 = a1[1];
    *a1 = v8;
    a1[1] = v11;
    a1[2] = v9;
    while (1)
    {
      if (v19 == v13)
        goto LABEL_24;
      if (*(v19 - 1) < 0)
      {
        operator delete(*((void **)v19 - 3));
        if (*(v19 - 25) < 0)
        {
LABEL_21:
          operator delete(*((void **)v19 - 6));
          if ((*(v19 - 49) & 0x80000000) == 0)
            goto LABEL_14;
          goto LABEL_22;
        }
      }
      else if (*(v19 - 25) < 0)
      {
        goto LABEL_21;
      }
      if ((*(v19 - 49) & 0x80000000) == 0)
        goto LABEL_14;
LABEL_22:
      operator delete(*((void **)v19 - 9));
LABEL_14:
      v19 -= 88;
    }
  }
  *a1 = v8;
  a1[1] = v11;
  a1[2] = v9;
LABEL_24:
  if (v13)
    operator delete(v13);
  return v11;
}

void sub_20EBA579C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5B360);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5B360))
  {
    sub_20EBA5854();
    if (byte_254A5B587 < 0)
    {
      sub_20E860C04(&xmmword_254A5B540, (void *)xmmword_254A5B570, *((unint64_t *)&xmmword_254A5B570 + 1));
    }
    else
    {
      xmmword_254A5B540 = xmmword_254A5B570;
      unk_254A5B550 = unk_254A5B580;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5B540, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5B360);
  }
}

void sub_20EBA583C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5B360);
  _Unwind_Resume(a1);
}

void sub_20EBA5854()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5B368);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5B368))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = std::vector<cv3d::vio::sem_node::SemanticsProcessingBundle> (const std::shared_ptr<cv3d::vio::feature_detection::VIOMLFeatureEvent> &)]", qword_254A5B558);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5B558, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5B368);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5B370);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5B370))
    {
      sub_21023CD84((uint64_t)qword_254A5B558, (uint64_t)&xmmword_254A5B570);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5B570, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5B370);
    }
  }
}

void sub_20EBA5924(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5B370);
  _Unwind_Resume(a1);
}

void sub_20EBA593C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5B368);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EBA5954()
{
  unsigned __int8 v0;
  __int128 *v2;
  const void **v3;
  int v4;
  size_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  const void *v11;

  v0 = atomic_load((unsigned __int8 *)&qword_254A50640);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A50640))
  {
    v2 = sub_20EBA5ACC();
    v3 = (const void **)v2;
    v4 = *((char *)v2 + 23);
    if (v4 >= 0)
      v5 = *((unsigned __int8 *)v2 + 23);
    else
      v5 = *((_QWORD *)v2 + 1);
    v6 = v5 + 6;
    if (v5 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    if (v6 >= 0x17)
    {
      v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v8 = v6 | 7;
      v9 = v8 + 1;
      v10 = (char *)operator new(v8 + 1);
      qword_254A50630 = v5 + 6;
      unk_254A50638 = v9 | 0x8000000000000000;
      qword_254A50628 = (uint64_t)v10;
      *(_DWORD *)v10 = 1936617315;
      v7 = v10 + 6;
      *((_WORD *)v10 + 2) = 8308;
    }
    else
    {
      qword_254A50630 = 0;
      unk_254A50638 = 0;
      qword_254A50628 = 0x2074736E6F63;
      byte_254A5063F = v5 + 6;
      v7 = (char *)&qword_254A50628 + 6;
      if (!v5)
      {
LABEL_18:
        v7[v5] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A50628, &dword_20E81F000);
        __cxa_guard_release(&qword_254A50640);
        return &qword_254A50628;
      }
    }
    if (v4 >= 0)
      v11 = v3;
    else
      v11 = *v3;
    memmove(v7, v11, v5);
    goto LABEL_18;
  }
  return &qword_254A50628;
}

void sub_20EBA5AB4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A50640);
  _Unwind_Resume(a1);
}

__int128 *sub_20EBA5ACC()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A50660);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A50660))
    return &xmmword_254A50648;
  v2 = sub_20EBA5BA8();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(&xmmword_254A50648, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A50658 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A50648 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A50648, &dword_20E81F000);
  __cxa_guard_release(&qword_254A50660);
  return &xmmword_254A50648;
}

void sub_20EBA5B90(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A50660);
  _Unwind_Resume(a1);
}

std::string *sub_20EBA5BA8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A50680);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A50680))
    return &stru_254A50668;
  sub_20EBA5DA8((uint64_t)__p);
  sub_20EBA5C98((char *)__p, &stru_254A50668);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A50668, &dword_20E81F000);
  __cxa_guard_release(&qword_254A50680);
  return &stru_254A50668;
}

void sub_20EBA5C58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A50680);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A50680);
  _Unwind_Resume(a1);
}

void sub_20EBA5C98(char *a1@<X0>, std::string *a2@<X8>)
{
  int64x2_t v4;
  int8x16_t v5;
  void **v6;
  void **v7;
  void *v8;
  void *__p;
  void **v10;
  void *v11[2];
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)v11 = *(_OWORD *)"void";
  v12 = 0x400000000000000;
  sub_20E877C80(&__p, (uint64_t)v11, 1uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, a2, v4, v5);
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v10;
    v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v10 = v6;
    operator delete(v8);
  }
  if (SHIBYTE(v12) < 0)
    operator delete(v11[0]);
}

void sub_20EBA5D7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20E89FB98(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20EBA5DA8(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A506A0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A506A0))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ChannelError<void>]", qword_254A50688);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A50688, &dword_20E81F000);
    __cxa_guard_release(&qword_254A506A0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A506C0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A506C0))
  {
    v5 = sub_20E8A2354(qword_254A50688, "<", 0);
    sub_20E89FC08(qword_254A50688, 0, v5, qword_254A506A8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A506A8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A506C0);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A506E0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A506E0))
  {
    sub_21023CD84((uint64_t)qword_254A506A8, (uint64_t)&xmmword_254A506C8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A506C8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A506E0);
  }
  if (byte_254A506DF < 0)
  {
    sub_20E860C04((_BYTE *)a1, (void *)xmmword_254A506C8, *((unint64_t *)&xmmword_254A506C8 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A506C8;
    *(_QWORD *)(a1 + 16) = unk_254A506D8;
  }
}

void sub_20EBA5F44(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A506E0);
  _Unwind_Resume(a1);
}

void sub_20EBA5F5C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A506C0);
  _Unwind_Resume(a1);
}

void sub_20EBA5F74(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A506A0);
  _Unwind_Resume(a1);
}

char *sub_20EBA5F8C(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;
  void **v12;
  void **v13;
  __int128 v14;
  void **v15;

  v3 = 0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x666666666666666)
    sub_20E867F44();
  if (0x999999999999999ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x999999999999999ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x333333333333333)
    v6 = 0x666666666666666;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x666666666666666)
      sub_20E877A38();
    v7 = (char *)operator new(40 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[40 * v3];
  v9 = &v7[40 * v6];
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *((_OWORD *)v8 + 1) = v10;
  *((_QWORD *)v8 + 4) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v11 = v8 + 40;
  v12 = (void **)*a1;
  v13 = (void **)a1[1];
  if (v13 == *a1)
  {
    *a1 = v8;
    a1[1] = v11;
    a1[2] = v9;
  }
  else
  {
    do
    {
      *(_OWORD *)(v8 - 40) = *(_OWORD *)(v13 - 5);
      v14 = *(_OWORD *)(v13 - 3);
      *((_QWORD *)v8 - 1) = *(v13 - 1);
      *(_OWORD *)(v8 - 24) = v14;
      v8 -= 40;
      *(v13 - 2) = 0;
      *(v13 - 1) = 0;
      *(v13 - 3) = 0;
      v13 -= 5;
    }
    while (v13 != v12);
    v13 = (void **)*a1;
    v15 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v11;
    a1[2] = v9;
    while (v15 != v13)
    {
      if (*((char *)v15 - 1) < 0)
        operator delete(*(v15 - 3));
      v15 -= 5;
    }
  }
  if (v13)
    operator delete(v13);
  return v11;
}

uint64_t *sub_20EBA60E8()
{
  unsigned __int8 v0;
  uint64_t *v2;
  const void **v3;
  int v4;
  size_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const void *v11;

  v0 = atomic_load((unsigned __int8 *)&qword_254A50700);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A50700))
  {
    v2 = sub_20EBA622C();
    v3 = (const void **)v2;
    v4 = *((char *)v2 + 23);
    if (v4 >= 0)
      v5 = *((unsigned __int8 *)v2 + 23);
    else
      v5 = v2[1];
    v6 = v5 + 1;
    if (v5 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v7 = &qword_254A506E8;
    if (v6 >= 0x17)
    {
      v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v8 = v6 | 7;
      v9 = v8 + 1;
      v10 = (uint64_t *)operator new(v8 + 1);
      qword_254A506F0 = v5 + 1;
      unk_254A506F8 = v9 | 0x8000000000000000;
      qword_254A506E8 = (uint64_t)v10;
      v7 = v10;
    }
    else
    {
      qword_254A506F0 = 0;
      unk_254A506F8 = 0;
      qword_254A506E8 = 0;
      byte_254A506FF = v5 + 1;
      if (!v5)
      {
LABEL_18:
        *(_WORD *)((char *)v7 + v5) = 38;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A506E8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A50700);
        return &qword_254A506E8;
      }
    }
    if (v4 >= 0)
      v11 = v3;
    else
      v11 = *v3;
    memmove(v7, v11, v5);
    goto LABEL_18;
  }
  return &qword_254A506E8;
}

void sub_20EBA6214(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A50700);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EBA622C()
{
  unsigned __int8 v0;
  __int128 *v2;
  const void **v3;
  int v4;
  size_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  const void *v11;

  v0 = atomic_load((unsigned __int8 *)&qword_254A50720);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A50720))
  {
    v2 = sub_20EBA63A4();
    v3 = (const void **)v2;
    v4 = *((char *)v2 + 23);
    if (v4 >= 0)
      v5 = *((unsigned __int8 *)v2 + 23);
    else
      v5 = *((_QWORD *)v2 + 1);
    v6 = v5 + 6;
    if (v5 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    if (v6 >= 0x17)
    {
      v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v8 = v6 | 7;
      v9 = v8 + 1;
      v10 = (char *)operator new(v8 + 1);
      qword_254A50710 = v5 + 6;
      unk_254A50718 = v9 | 0x8000000000000000;
      qword_254A50708 = (uint64_t)v10;
      *(_DWORD *)v10 = 1936617315;
      v7 = v10 + 6;
      *((_WORD *)v10 + 2) = 8308;
    }
    else
    {
      qword_254A50710 = 0;
      unk_254A50718 = 0;
      qword_254A50708 = 0x2074736E6F63;
      byte_254A5071F = v5 + 6;
      v7 = (char *)&qword_254A50708 + 6;
      if (!v5)
      {
LABEL_18:
        v7[v5] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A50708, &dword_20E81F000);
        __cxa_guard_release(&qword_254A50720);
        return &qword_254A50708;
      }
    }
    if (v4 >= 0)
      v11 = v3;
    else
      v11 = *v3;
    memmove(v7, v11, v5);
    goto LABEL_18;
  }
  return &qword_254A50708;
}

void sub_20EBA638C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A50720);
  _Unwind_Resume(a1);
}

__int128 *sub_20EBA63A4()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A50740);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A50740))
    return &xmmword_254A50728;
  v2 = sub_20EBA6480();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(&xmmword_254A50728, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A50738 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A50728 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A50728, &dword_20E81F000);
  __cxa_guard_release(&qword_254A50740);
  return &xmmword_254A50728;
}

void sub_20EBA6468(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A50740);
  _Unwind_Resume(a1);
}

std::string *sub_20EBA6480()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A50760);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A50760))
    return &stru_254A50748;
  sub_20EBA6570((uint64_t)__p);
  sub_20EBA5C98((char *)__p, &stru_254A50748);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A50748, &dword_20E81F000);
  __cxa_guard_release(&qword_254A50760);
  return &stru_254A50748;
}

void sub_20EBA6530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A50760);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A50760);
  _Unwind_Resume(a1);
}

void sub_20EBA6570(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A50780);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A50780))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ChannelOutput<void>]", qword_254A50768);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A50768, &dword_20E81F000);
    __cxa_guard_release(&qword_254A50780);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A507A0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A507A0))
  {
    v5 = sub_20E8A2354(qword_254A50768, "<", 0);
    sub_20E89FC08(qword_254A50768, 0, v5, qword_254A50788);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A50788, &dword_20E81F000);
    __cxa_guard_release(&qword_254A507A0);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A507C0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A507C0))
  {
    sub_21023CD84((uint64_t)qword_254A50788, (uint64_t)&xmmword_254A507A8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A507A8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A507C0);
  }
  if (byte_254A507BF < 0)
  {
    sub_20E860C04((_BYTE *)a1, (void *)xmmword_254A507A8, *((unint64_t *)&xmmword_254A507A8 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A507A8;
    *(_QWORD *)(a1 + 16) = unk_254A507B8;
  }
}

void sub_20EBA670C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A507C0);
  _Unwind_Resume(a1);
}

void sub_20EBA6724(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A507A0);
  _Unwind_Resume(a1);
}

void sub_20EBA673C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A50780);
  _Unwind_Resume(a1);
}

void sub_20EBA6754()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5B378);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5B378))
  {
    sub_20EBA680C();
    if (byte_254A5B5CF < 0)
    {
      sub_20E860C04(&xmmword_254A5B588, (void *)xmmword_254A5B5B8, *((unint64_t *)&xmmword_254A5B5B8 + 1));
    }
    else
    {
      xmmword_254A5B588 = xmmword_254A5B5B8;
      unk_254A5B598 = unk_254A5B5C8;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5B588, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5B378);
  }
}

void sub_20EBA67F4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5B378);
  _Unwind_Resume(a1);
}

void sub_20EBA680C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5B380);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5B380))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = void (const std::shared_ptr<cv3d::vio::cv_types::SemanticsFrame> &)]", qword_254A5B5A0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5B5A0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5B380);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5B388);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5B388))
    {
      sub_21023CD84((uint64_t)qword_254A5B5A0, (uint64_t)&xmmword_254A5B5B8);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5B5B8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5B388);
    }
  }
}

void sub_20EBA68DC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5B388);
  _Unwind_Resume(a1);
}

void sub_20EBA68F4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5B380);
  _Unwind_Resume(a1);
}

uint64_t sub_20EBA690C(uint64_t a1, __int128 *a2, int a3, uint64_t *a4, uint64_t *a5, __int128 *a6)
{
  __int128 v8;
  __int128 v9;

  v8 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v8;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v9 = *a6;
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a6 + 2);
  *(_OWORD *)(a1 + 24) = v9;
  *((_QWORD *)a6 + 1) = 0;
  *((_QWORD *)a6 + 2) = 0;
  *(_QWORD *)a6 = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 48) = a3;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  sub_20EBA6A80(a1 + 56, *a4, a4[1], 0x2E8BA2E8BA2E8BA3 * ((a4[1] - *a4) >> 3));
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  sub_20EBA6DC4((_BYTE *)(a1 + 104), *a5, a5[1], 0xCCCCCCCCCCCCCCCDLL * ((a5[1] - *a5) >> 3));
  return a1;
}

void sub_20EBA69D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;

  sub_20EBA6A28(v3);
  sub_20EBA4990(v2);
  if (*(char *)(v1 + 47) < 0)
  {
    operator delete(*(void **)(v1 + 24));
    if ((*(char *)(v1 + 23) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((*(char *)(v1 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

void **sub_20EBA6A28(void **a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        v3 = sub_20EBA8C18(v3 - 128);
      while ((void *)v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_20EBA6A80(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;

  if (a4)
  {
    v5 = (_QWORD *)result;
    if (a4 >= 0x2E8BA2E8BA2E8BBLL)
      sub_20E867F44();
    result = (uint64_t)operator new(88 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = result + 88 * a4;
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = sub_20EBA6C98(v8 + v9, (uint64_t *)(a2 + v9));
        v9 += 88;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_20EBA6B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20EBA6BD0(&a9);
  _Unwind_Resume(a1);
}

void sub_20EBA6B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  if (!v11)
  {
LABEL_2:
    *(_QWORD *)(v9 + 8) = v10;
    sub_20EBA6BD0(&a9);
    _Unwind_Resume(a1);
  }
  while (1)
  {
    v13 = v10 + v11;
    if (*(char *)(v10 + v11 - 1) < 0)
    {
      operator delete(*(void **)(v13 - 24));
      if ((*(char *)(v13 - 25) & 0x80000000) == 0)
      {
LABEL_6:
        v14 = v10 + v11;
        if (*(char *)(v10 + v11 - 49) < 0)
          goto LABEL_10;
        goto LABEL_3;
      }
    }
    else if ((*(char *)(v13 - 25) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(*(void **)(v10 + v11 - 48));
    v14 = v10 + v11;
    if (*(char *)(v10 + v11 - 49) < 0)
LABEL_10:
      operator delete(*(void **)(v14 - 72));
LABEL_3:
    v11 -= 88;
    if (!v11)
      goto LABEL_2;
  }
}

void ***sub_20EBA6BD0(void ***result)
{
  void ***v1;
  void **v2;
  void **v3;
  void **v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (void **)**result;
    if (v3)
    {
      v4 = (void **)v2[1];
      v5 = **result;
      if (v4 == v3)
      {
LABEL_15:
        v2[1] = v3;
        operator delete(v5);
        return v1;
      }
      while (1)
      {
        if (*((char *)v4 - 1) < 0)
        {
          operator delete(*(v4 - 3));
          if ((*((char *)v4 - 25) & 0x80000000) == 0)
          {
LABEL_9:
            if (*((char *)v4 - 49) < 0)
              goto LABEL_13;
            goto LABEL_6;
          }
        }
        else if ((*((char *)v4 - 25) & 0x80000000) == 0)
        {
          goto LABEL_9;
        }
        operator delete(*(v4 - 6));
        if (*((char *)v4 - 49) < 0)
LABEL_13:
          operator delete(*(v4 - 9));
LABEL_6:
        v4 -= 11;
        if (v4 == v3)
        {
          v5 = **v1;
          goto LABEL_15;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20EBA6C98(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  _BYTE *v8;
  __int128 v9;

  v4 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)a1 = v4;
  if (*((char *)a2 + 39) < 0)
  {
    sub_20E860C04((_BYTE *)(a1 + 16), (void *)a2[2], a2[3]);
    v6 = a1 + 40;
    if ((*((char *)a2 + 63) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v5 = *((_OWORD *)a2 + 1);
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_OWORD *)(a1 + 16) = v5;
    v6 = a1 + 40;
    if ((*((char *)a2 + 63) & 0x80000000) == 0)
    {
LABEL_3:
      v7 = *(_OWORD *)(a2 + 5);
      *(_QWORD *)(v6 + 16) = a2[7];
      *(_OWORD *)v6 = v7;
      goto LABEL_6;
    }
  }
  sub_20E860C04((_BYTE *)v6, (void *)a2[5], a2[6]);
LABEL_6:
  v8 = (_BYTE *)(a1 + 64);
  if (*((char *)a2 + 87) < 0)
  {
    sub_20E860C04(v8, (void *)a2[8], a2[9]);
  }
  else
  {
    v9 = *((_OWORD *)a2 + 4);
    *(_QWORD *)(a1 + 80) = a2[10];
    *(_OWORD *)v8 = v9;
  }
  return a1;
}

void sub_20EBA6D78(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 63) < 0)
  {
    operator delete(*v3);
    if ((*(char *)(v1 + 39) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v1 + 39) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v2);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_20EBA6DC4(_BYTE *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;

  if (a4)
  {
    v5 = result;
    if (a4 >= 0x666666666666667)
      sub_20E867F44();
    result = operator new(40 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[40 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        v10 = a2 + v9;
        *(_OWORD *)&v8[v9] = *(_OWORD *)(a2 + v9);
        result = &v8[v9 + 16];
        v11 = (void **)(a2 + v9 + 16);
        if (*(char *)(a2 + v9 + 39) < 0)
        {
          result = sub_20E860C04(result, *v11, *(_QWORD *)(v10 + 24));
        }
        else
        {
          *(_OWORD *)result = *(_OWORD *)v11;
          *(_QWORD *)&v8[v9 + 32] = *(_QWORD *)(a2 + v9 + 32);
        }
        v9 += 40;
      }
      while (v10 + 40 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_20EBA6EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20EBA6F08(&a9);
  _Unwind_Resume(a1);
}

void sub_20EBA6ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  for (; v11; v11 -= 40)
  {
    if (*(char *)(v10 + v11 - 1) < 0)
      operator delete(*(void **)(v10 + v11 - 24));
  }
  *(_QWORD *)(v9 + 8) = v10;
  sub_20EBA6F08(&a9);
  _Unwind_Resume(a1);
}

void ***sub_20EBA6F08(void ***result)
{
  void ***v1;
  void **v2;
  void **v3;
  void **v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (void **)**result;
    if (v3)
    {
      v4 = (void **)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 1) < 0)
            operator delete(*(v4 - 3));
          v4 -= 5;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void sub_20EBA6F9C()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5B398);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5B398))
  {
    sub_20EBA711C();
    v1 = byte_254A5B617;
    if (byte_254A5B617 >= 0)
      v2 = byte_254A5B617;
    else
      v2 = *((_QWORD *)&xmmword_254A5B600 + 1);
    v3 = v2 + 6;
    if (v2 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v7 = (char *)operator new(v5 + 1);
      qword_254A5B5F0 = v2 + 6;
      unk_254A5B5F8 = v6 | 0x8000000000000000;
      qword_254A5B5E8 = (uint64_t)v7;
      *(_DWORD *)v7 = 1936617315;
      *((_WORD *)v7 + 2) = 8308;
      v4 = v7 + 6;
    }
    else
    {
      qword_254A5B5F0 = 0;
      unk_254A5B5F8 = 0;
      qword_254A5B5E8 = 0x2074736E6F63;
      byte_254A5B5FF = v2 + 6;
      v4 = (char *)&qword_254A5B5E8 + 6;
      if (!v2)
      {
LABEL_18:
        v4[v2] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A5B5E8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A5B398);
        return;
      }
    }
    if (v1 >= 0)
      v8 = &xmmword_254A5B600;
    else
      v8 = (__int128 *)xmmword_254A5B600;
    memmove(v4, v8, v2);
    goto LABEL_18;
  }
}

void sub_20EBA7104(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5B398);
  _Unwind_Resume(a1);
}

void sub_20EBA711C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5B3A0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5B3A0))
  {
    sub_20EBA71D4();
    if (byte_254A5B62F < 0)
    {
      sub_20E860C04(&xmmword_254A5B600, (void *)qword_254A5B618, unk_254A5B620);
    }
    else
    {
      xmmword_254A5B600 = *(_OWORD *)&qword_254A5B618;
      unk_254A5B610 = unk_254A5B628;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5B600, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5B3A0);
  }
}

void sub_20EBA71BC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5B3A0);
  _Unwind_Resume(a1);
}

void sub_20EBA71D4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5B3A8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5B3A8))
  {
    sub_20EBA7490(__p);
    sub_20EBA72A8((char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A5B618, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5B3A8);
  }
}

void sub_20EBA7268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5B3A8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5B3A8);
  _Unwind_Resume(a1);
}

void sub_20EBA72A8(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  void *v10[2];
  char v11;
  void *__dst[2];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_254A5B3B0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5B3B0))
  {
    sub_20E8610C0(v10, "std::shared_ptr");
    sub_20EBA766C((char *)v10);
    if (v11 < 0)
      operator delete(v10[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5B630, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5B3B0);
  }
  if (byte_254A5B647 < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A5B630, *((unint64_t *)&xmmword_254A5B630 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A5B630;
    v13 = unk_254A5B640;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 1uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, (std::string *)&qword_254A5B618, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
}

void sub_20EBA7420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5B3B0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5B3B0);
  _Unwind_Resume(a1);
}

void sub_20EBA7464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  sub_20E89FB98((void **)&a9);
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20EBA7490(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5B3D8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5B3D8))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ChannelOutput<std::shared_ptr<std::vector<cv3d::vio::SemanticFrame>>>]", qword_254A5B6A8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5B6A8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5B3D8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A5B3E0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A5B3E0))
  {
    v5 = sub_20E8A2354(qword_254A5B6A8, "<", 0);
    sub_20E89FC08(qword_254A5B6A8, 0, v5, qword_254A5B6C0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5B6C0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5B3E0);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A5B3E8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A5B3E8))
  {
    sub_21023CD84((uint64_t)qword_254A5B6C0, (uint64_t)&xmmword_254A5B6D8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5B6D8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5B3E8);
  }
  if (byte_254A5B6EF < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A5B6D8, *((unint64_t *)&xmmword_254A5B6D8 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A5B6D8;
    __dst[2] = unk_254A5B6E8;
  }
}

void sub_20EBA7624(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5B3E8);
  _Unwind_Resume(a1);
}

void sub_20EBA763C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5B3E0);
  _Unwind_Resume(a1);
}

void sub_20EBA7654(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5B3D8);
  _Unwind_Resume(a1);
}

void sub_20EBA766C(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  void *v10[2];
  char v11;
  void *__dst[2];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_254A5B3B8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5B3B8))
  {
    sub_20E8610C0(v10, "std::vector");
    sub_20EBA7854((char *)v10);
    if (v11 < 0)
      operator delete(v10[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5B648, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5B3B8);
  }
  if (byte_254A5B65F < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A5B648, *((unint64_t *)&xmmword_254A5B648 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A5B648;
    v13 = unk_254A5B658;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 1uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, (std::string *)&xmmword_254A5B630, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
}

void sub_20EBA77E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5B3B8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5B3B8);
  _Unwind_Resume(a1);
}

void sub_20EBA7828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  sub_20E89FB98((void **)&a9);
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20EBA7854(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  void *__dst[2];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_254A5B3C0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5B3C0))
  {
    sub_20EBA7A28();
    if (byte_254A5B6A7 < 0)
    {
      sub_20E860C04(&xmmword_254A5B660, (void *)xmmword_254A5B690, *((unint64_t *)&xmmword_254A5B690 + 1));
    }
    else
    {
      xmmword_254A5B660 = xmmword_254A5B690;
      unk_254A5B670 = unk_254A5B6A0;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5B660, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5B3C0);
  }
  if (byte_254A5B677 < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A5B660, *((unint64_t *)&xmmword_254A5B660 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A5B660;
    v11 = unk_254A5B670;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 1uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, (std::string *)&xmmword_254A5B648, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v11) < 0)
    operator delete(__dst[0]);
}

void sub_20EBA79E0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5B3C0);
  _Unwind_Resume(a1);
}

void sub_20EBA79FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20E89FB98(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20EBA7A28()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5B3C8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5B3C8))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::SemanticFrame]", qword_254A5B678);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5B678, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5B3C8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5B3D0);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5B3D0))
    {
      sub_21023CD84((uint64_t)qword_254A5B678, (uint64_t)&xmmword_254A5B690);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5B690, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5B3D0);
    }
  }
}

void sub_20EBA7AF8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5B3D0);
  _Unwind_Resume(a1);
}

void sub_20EBA7B10(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5B3C8);
  _Unwind_Resume(a1);
}

void sub_20EBA7B28()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5B3F0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5B3F0))
  {
    sub_20EBA7BE0();
    if (byte_254A5B737 < 0)
    {
      sub_20E860C04(&xmmword_254A5B6F0, (void *)xmmword_254A5B720, *((unint64_t *)&xmmword_254A5B720 + 1));
    }
    else
    {
      xmmword_254A5B6F0 = xmmword_254A5B720;
      unk_254A5B700 = unk_254A5B730;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5B6F0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5B3F0);
  }
}

void sub_20EBA7BC8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5B3F0);
  _Unwind_Resume(a1);
}

void sub_20EBA7BE0()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5B3F8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5B3F8))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = std::shared_ptr<std::vector<cv3d::vio::SemanticFrame>> (cv3d::kit::concurrency::ChannelLimitedInput<const std::vector<cv3d::vio::sem_node::SemanticsProcessingBundle> &, 1>)]", qword_254A5B708);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5B708, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5B3F8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5B400);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5B400))
    {
      sub_21023CD84((uint64_t)qword_254A5B708, (uint64_t)&xmmword_254A5B720);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5B720, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5B400);
    }
  }
}

void sub_20EBA7CB0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5B400);
  _Unwind_Resume(a1);
}

void sub_20EBA7CC8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5B3F8);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EBA7CE0()
{
  unsigned __int8 v0;
  uint64_t *v2;
  const void **v3;
  int v4;
  size_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const void *v11;

  v0 = atomic_load((unsigned __int8 *)&qword_254A507E0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A507E0))
  {
    v2 = sub_20EBA7E24();
    v3 = (const void **)v2;
    v4 = *((char *)v2 + 23);
    if (v4 >= 0)
      v5 = *((unsigned __int8 *)v2 + 23);
    else
      v5 = v2[1];
    v6 = v5 + 1;
    if (v5 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v7 = &qword_254A507C8;
    if (v6 >= 0x17)
    {
      v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v8 = v6 | 7;
      v9 = v8 + 1;
      v10 = (uint64_t *)operator new(v8 + 1);
      qword_254A507D0 = v5 + 1;
      unk_254A507D8 = v9 | 0x8000000000000000;
      qword_254A507C8 = (uint64_t)v10;
      v7 = v10;
    }
    else
    {
      qword_254A507D0 = 0;
      unk_254A507D8 = 0;
      qword_254A507C8 = 0;
      byte_254A507DF = v5 + 1;
      if (!v5)
      {
LABEL_18:
        *(_WORD *)((char *)v7 + v5) = 38;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A507C8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A507E0);
        return &qword_254A507C8;
      }
    }
    if (v4 >= 0)
      v11 = v3;
    else
      v11 = *v3;
    memmove(v7, v11, v5);
    goto LABEL_18;
  }
  return &qword_254A507C8;
}

void sub_20EBA7E0C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A507E0);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EBA7E24()
{
  unsigned __int8 v0;
  __int128 *v2;
  const void **v3;
  int v4;
  size_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  const void *v11;

  v0 = atomic_load((unsigned __int8 *)&qword_254A50800);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A50800))
  {
    v2 = sub_20EBA7F9C();
    v3 = (const void **)v2;
    v4 = *((char *)v2 + 23);
    if (v4 >= 0)
      v5 = *((unsigned __int8 *)v2 + 23);
    else
      v5 = *((_QWORD *)v2 + 1);
    v6 = v5 + 6;
    if (v5 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    if (v6 >= 0x17)
    {
      v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v8 = v6 | 7;
      v9 = v8 + 1;
      v10 = (char *)operator new(v8 + 1);
      qword_254A507F0 = v5 + 6;
      unk_254A507F8 = v9 | 0x8000000000000000;
      qword_254A507E8 = (uint64_t)v10;
      *(_DWORD *)v10 = 1936617315;
      v7 = v10 + 6;
      *((_WORD *)v10 + 2) = 8308;
    }
    else
    {
      qword_254A507F0 = 0;
      unk_254A507F8 = 0;
      qword_254A507E8 = 0x2074736E6F63;
      byte_254A507FF = v5 + 6;
      v7 = (char *)&qword_254A507E8 + 6;
      if (!v5)
      {
LABEL_18:
        v7[v5] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A507E8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A50800);
        return &qword_254A507E8;
      }
    }
    if (v4 >= 0)
      v11 = v3;
    else
      v11 = *v3;
    memmove(v7, v11, v5);
    goto LABEL_18;
  }
  return &qword_254A507E8;
}

void sub_20EBA7F84(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A50800);
  _Unwind_Resume(a1);
}

__int128 *sub_20EBA7F9C()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A50820);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A50820))
    return &xmmword_254A50808;
  v2 = sub_20EBA8078();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(&xmmword_254A50808, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A50818 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A50808 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A50808, &dword_20E81F000);
  __cxa_guard_release(&qword_254A50820);
  return &xmmword_254A50808;
}

void sub_20EBA8060(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A50820);
  _Unwind_Resume(a1);
}

std::string *sub_20EBA8078()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A50840);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A50840))
    return &stru_254A50828;
  sub_20EBA829C((uint64_t)__p);
  sub_20EBA8168((char *)__p, &stru_254A50828);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A50828, &dword_20E81F000);
  __cxa_guard_release(&qword_254A50840);
  return &stru_254A50828;
}

void sub_20EBA8128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A50840);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A50840);
  _Unwind_Resume(a1);
}

void sub_20EBA8168(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20EBA8480();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 1uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20EBA8264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20E89FB98((void **)&a9);
  if (a18 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EBA829C(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A508E0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A508E0))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ChannelOutput<std::shared_ptr<cv3d::vio::feature_detection::VIOMLFeatureEvent>>]", qword_254A508C8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A508C8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A508E0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A50900);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A50900))
  {
    v5 = sub_20E8A2354(qword_254A508C8, "<", 0);
    sub_20E89FC08(qword_254A508C8, 0, v5, qword_254A508E8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A508E8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A50900);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A50920);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A50920))
  {
    sub_21023CD84((uint64_t)qword_254A508E8, (uint64_t)&xmmword_254A50908);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A50908, &dword_20E81F000);
    __cxa_guard_release(&qword_254A50920);
  }
  if (byte_254A5091F < 0)
  {
    sub_20E860C04((_BYTE *)a1, (void *)xmmword_254A50908, *((unint64_t *)&xmmword_254A50908 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A50908;
    *(_QWORD *)(a1 + 16) = unk_254A50918;
  }
}

void sub_20EBA8438(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A50920);
  _Unwind_Resume(a1);
}

void sub_20EBA8450(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A50900);
  _Unwind_Resume(a1);
}

void sub_20EBA8468(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A508E0);
  _Unwind_Resume(a1);
}

std::string *sub_20EBA8480()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A50860);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A50860))
    return &stru_254A50848;
  sub_20E8610C0(__p, "std::shared_ptr");
  sub_20EBA8578((char *)__p, &stru_254A50848);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A50848, &dword_20E81F000);
  __cxa_guard_release(&qword_254A50860);
  return &stru_254A50848;
}

void sub_20EBA8538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A50860);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A50860);
  _Unwind_Resume(a1);
}

void sub_20EBA8578(char *a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20EBA86AC();
  if (*((char *)v4 + 23) < 0)
  {
    sub_20E860C04(__dst, *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v14 = *((_QWORD *)v4 + 2);
    *(_OWORD *)__dst = v5;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 1uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20EBA8674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20E89FB98((void **)&a9);
  if (a18 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

__int128 *sub_20EBA86AC()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A50880);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A50880))
    return &xmmword_254A50868;
  v2 = (char *)sub_20EBA8788();
  if (v2[23] < 0)
  {
    sub_20E860C04(&xmmword_254A50868, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254A50878 = *((_QWORD *)v2 + 2);
    xmmword_254A50868 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A50868, &dword_20E81F000);
  __cxa_guard_release(&qword_254A50880);
  return &xmmword_254A50868;
}

void sub_20EBA8770(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A50880);
  _Unwind_Resume(a1);
}

void *sub_20EBA8788()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A508A0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A508A0))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::feature_detection::VIOMLFeatureEvent]", qword_254A50888);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A50888, &dword_20E81F000);
    __cxa_guard_release(&qword_254A508A0);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A508C0);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254A508C0))
    return &unk_254A508A8;
  sub_21023CD84((uint64_t)qword_254A50888, (uint64_t)&unk_254A508A8);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254A508A8, &dword_20E81F000);
  __cxa_guard_release(&qword_254A508C0);
  return &unk_254A508A8;
}

void sub_20EBA8878(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A508C0);
  _Unwind_Resume(a1);
}

void sub_20EBA8890(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A508A0);
  _Unwind_Resume(a1);
}

void sub_20EBA88A8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5B408);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5B408))
  {
    sub_20EBA8960();
    if (byte_254A5B77F < 0)
    {
      sub_20E860C04(&xmmword_254A5B738, (void *)xmmword_254A5B768, *((unint64_t *)&xmmword_254A5B768 + 1));
    }
    else
    {
      xmmword_254A5B738 = xmmword_254A5B768;
      unk_254A5B748 = unk_254A5B778;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5B738, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5B408);
  }
}

void sub_20EBA8948(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5B408);
  _Unwind_Resume(a1);
}

void sub_20EBA8960()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5B410);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5B410))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = std::shared_ptr<cv3d::vio::feature_detection::VIOMLFeatureEvent> (cv3d::kit::concurrency::ChannelLimitedInput<const std::shared_ptr<cv3d::vio::feature_detection::VIOMLFeatureEvent> &, 1>)]", qword_254A5B750);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5B750, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5B410);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5B418);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5B418))
    {
      sub_21023CD84((uint64_t)qword_254A5B750, (uint64_t)&xmmword_254A5B768);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5B768, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5B418);
    }
  }
}

void sub_20EBA8A30(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5B418);
  _Unwind_Resume(a1);
}

void sub_20EBA8A48(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5B410);
  _Unwind_Resume(a1);
}

void sub_20EBA8A60()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5B420);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5B420))
  {
    sub_20EBA8B18();
    if (byte_254A5B7C7 < 0)
    {
      sub_20E860C04(&xmmword_254A5B780, (void *)xmmword_254A5B7B0, *((unint64_t *)&xmmword_254A5B7B0 + 1));
    }
    else
    {
      xmmword_254A5B780 = xmmword_254A5B7B0;
      unk_254A5B790 = unk_254A5B7C0;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5B780, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5B420);
  }
}

void sub_20EBA8B00(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5B420);
  _Unwind_Resume(a1);
}

void sub_20EBA8B18()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5B428);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5B428))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = void (const std::shared_ptr<cv3d::vio::cv_types::SemanticsCameraCalibration> &)]", qword_254A5B798);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5B798, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5B428);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5B430);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5B430))
    {
      sub_21023CD84((uint64_t)qword_254A5B798, (uint64_t)&xmmword_254A5B7B0);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5B7B0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5B430);
    }
  }
}

void sub_20EBA8BE8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5B430);
  _Unwind_Resume(a1);
}

void sub_20EBA8C00(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5B428);
  _Unwind_Resume(a1);
}

uint64_t sub_20EBA8C18(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v2 = *(_QWORD *)(a1 + 104);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 112);
    v4 = *(void **)(a1 + 104);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 40;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 104);
    }
    *(_QWORD *)(a1 + 112) = v2;
    operator delete(v4);
  }
  v5 = *(_QWORD *)(a1 + 80);
  if (v5)
  {
    v6 = *(_QWORD *)(a1 + 88);
    v7 = *(void **)(a1 + 80);
    if (v6 != v5)
    {
      do
        v6 = sub_20EBA8C18(v6 - 128);
      while (v6 != v5);
      v7 = *(void **)(a1 + 80);
    }
    *(_QWORD *)(a1 + 88) = v5;
    operator delete(v7);
  }
  v8 = *(_QWORD *)(a1 + 56);
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 64);
    v10 = *(void **)(a1 + 56);
    if (v9 == v8)
    {
LABEL_26:
      *(_QWORD *)(a1 + 64) = v8;
      operator delete(v10);
      goto LABEL_27;
    }
    while (1)
    {
      if (*(char *)(v9 - 1) < 0)
      {
        operator delete(*(void **)(v9 - 24));
        if ((*(char *)(v9 - 25) & 0x80000000) == 0)
        {
LABEL_20:
          if (*(char *)(v9 - 49) < 0)
            goto LABEL_24;
          goto LABEL_17;
        }
      }
      else if ((*(char *)(v9 - 25) & 0x80000000) == 0)
      {
        goto LABEL_20;
      }
      operator delete(*(void **)(v9 - 48));
      if (*(char *)(v9 - 49) < 0)
LABEL_24:
        operator delete(*(void **)(v9 - 72));
LABEL_17:
      v9 -= 88;
      if (v9 == v8)
      {
        v10 = *(void **)(a1 + 56);
        goto LABEL_26;
      }
    }
  }
LABEL_27:
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

void ***sub_20EBA8D78(void ***result)
{
  void ***v1;
  void **v2;
  void *v3;
  uint64_t v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = **result;
    if (v3)
    {
      v4 = (uint64_t)v2[1];
      v5 = **v1;
      if ((void *)v4 != v3)
      {
        do
          v4 = sub_20EBA8C18(v4 - 128);
        while ((void *)v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20EBA8DFC(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04((_BYTE *)a1, *(void **)a2, *((_QWORD *)a2 + 1));
    v5 = a1 + 24;
    if ((*((char *)a2 + 47) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v4;
    v5 = a1 + 24;
    if ((*((char *)a2 + 47) & 0x80000000) == 0)
    {
LABEL_3:
      v6 = *(__int128 *)((char *)a2 + 24);
      *(_QWORD *)(v5 + 16) = *((_QWORD *)a2 + 5);
      *(_OWORD *)v5 = v6;
      goto LABEL_6;
    }
  }
  sub_20E860C04((_BYTE *)v5, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
LABEL_6:
  v7 = *((_DWORD *)a2 + 12);
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  sub_20EBA6A80(a1 + 56, *((_QWORD *)a2 + 7), *((_QWORD *)a2 + 8), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 3));
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  v8 = *((_QWORD *)a2 + 10);
  v9 = *((_QWORD *)a2 + 11);
  v10 = v9 - v8;
  if (v9 != v8)
  {
    if (v10 < 0)
      sub_20E867F44();
    v11 = (char *)operator new(v9 - v8);
    v12 = 0;
    *(_QWORD *)(a1 + 80) = v11;
    *(_QWORD *)(a1 + 88) = v11;
    *(_QWORD *)(a1 + 96) = &v11[128 * (v10 >> 7)];
    do
    {
      sub_20EBA8DFC(&v11[v12], v8 + v12);
      v12 += 128;
    }
    while (v8 + v12 != v9);
    *(_QWORD *)(a1 + 88) = &v11[v12];
  }
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  sub_20EBA6DC4((_BYTE *)(a1 + 104), *((_QWORD *)a2 + 13), *((_QWORD *)a2 + 14), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)a2 + 14) - *((_QWORD *)a2 + 13)) >> 3));
  return a1;
}

void sub_20EBA8F80(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if ((*(char *)(v1 + 23) & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EBA9018(uint64_t a1, char **a2, uint64_t a3, char a4)
{
  char *v7;
  unint64_t *v8;
  unint64_t *v9;
  unint64_t *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  char v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v22;
  unint64_t v23;
  unint64_t *p_shared_weak_owners;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  void *v36;
  char *v37;
  unint64_t *v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  std::__shared_weak_count *v64;
  char *v65;
  unint64_t *v66;
  unint64_t v67;
  __int128 v68;
  unint64_t *v69;
  unint64_t v70;
  char v71;
  char *v72;
  uint64_t v73;
  _QWORD *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  std::__shared_weak_count *v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  void *v91;
  char *v92;
  unint64_t *v93;
  unint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  char *v143;
  unint64_t *v144;
  unint64_t v145;
  char *v146;
  unint64_t *v147;
  unint64_t *v148;
  unint64_t v149;
  unint64_t *v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  void *v155;
  void *v156;
  char v157;
  unint64_t *v158;
  unint64_t v159;
  char *v160;
  __int128 v161;
  uint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  _QWORD *v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  std::__shared_weak_count *v168;
  unint64_t v169;
  unint64_t *v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t *v173;
  unint64_t v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  __int128 v182;
  void *v183;
  void *v184;
  char *v185;
  unint64_t *v186;
  unint64_t v187;
  _QWORD *v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t *v191;
  unint64_t v192;
  uint64_t v193;
  unint64_t v194;
  unint64_t *v195;
  unint64_t v196;
  uint64_t v197;
  unint64_t *v198;
  unint64_t v199;
  uint64_t v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  __int128 v207;
  unint64_t *v208;
  unint64_t v209;
  char *v210;
  unint64_t *v211;
  unint64_t v212;
  __int128 v213;
  unint64_t *v214;
  unint64_t v215;
  void *v216;
  void *v217;
  char v218;
  unint64_t *v219;
  unint64_t v220;
  char *v221;
  __int128 v222;
  uint64_t v223;
  _QWORD *v224;
  uint64_t v225;
  _QWORD *v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  std::__shared_weak_count *v229;
  unint64_t v230;
  unint64_t *v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t *v234;
  unint64_t v235;
  unint64_t v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  __int128 v243;
  void *v244;
  void *v245;
  char *v246;
  unint64_t *v247;
  unint64_t v248;
  _QWORD *v249;
  uint64_t v250;
  uint64_t v251;
  unint64_t *v252;
  unint64_t v253;
  uint64_t v254;
  unint64_t v255;
  unint64_t *v256;
  unint64_t v257;
  uint64_t v258;
  unint64_t *v259;
  unint64_t v260;
  uint64_t v261;
  std::__shared_weak_count *v262;
  unint64_t *v263;
  unint64_t v264;
  std::__shared_weak_count *v265;
  unint64_t *v266;
  unint64_t v267;
  __int128 v268;
  unint64_t *v269;
  unint64_t v270;
  char *v271;
  unint64_t *v272;
  unint64_t v273;
  __int128 v274;
  unint64_t *v275;
  unint64_t v276;
  void *v277;
  void *v278;
  char v279;
  unint64_t *v280;
  unint64_t v281;
  uint64_t v282;
  __int128 v283;
  uint64_t v284;
  _QWORD *v285;
  std::__shared_weak_count *v286;
  unint64_t *v287;
  std::__shared_weak_count *v288;
  unint64_t v289;
  unint64_t *v290;
  unint64_t v291;
  unint64_t v292;
  unint64_t *v293;
  unint64_t v294;
  unint64_t v295;
  std::__shared_weak_count *v296;
  unint64_t *v297;
  unint64_t v298;
  std::__shared_weak_count *v299;
  unint64_t *v300;
  unint64_t v301;
  __int128 v302;
  __int128 v303;
  unint64_t *v304;
  unint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  unint64_t *v309;
  unint64_t v310;
  uint64_t v311;
  unint64_t v312;
  unint64_t *v313;
  unint64_t v314;
  uint64_t v315;
  unint64_t *v316;
  unint64_t v317;
  uint64_t v318;
  std::__shared_weak_count *v319;
  unint64_t *v320;
  unint64_t v321;
  std::__shared_weak_count *v322;
  unint64_t *v323;
  unint64_t v324;
  uint64_t v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  uint64_t v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  uint64_t v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  __int128 v343;
  __int128 v344;
  uint64_t v345;
  std::__shared_weak_count *v346;
  unint64_t *v347;
  unint64_t v348;
  std::__shared_weak_count *v349;
  unint64_t *v350;
  unint64_t v351;
  std::__shared_weak_count *v352;
  unint64_t *v353;
  unint64_t v354;
  std::__shared_weak_count *v355;
  unint64_t *v356;
  unint64_t v357;
  std::__shared_weak_count *v358;
  unint64_t *v359;
  unint64_t v360;
  std::__shared_weak_count *v361;
  unint64_t *v362;
  unint64_t v363;
  unint64_t *v364;
  unint64_t v365;
  std::__shared_weak_count *v366;
  unint64_t *v367;
  unint64_t v368;
  std::__shared_weak_count *v369;
  unint64_t *v370;
  unint64_t v371;
  unint64_t *v372;
  unint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  void *v378;
  char **v379;
  uint64_t v380;
  void *v381;
  char v382;
  char v383;
  uint64_t v384;
  std::__shared_weak_count *v385;
  char *v386;
  std::__shared_weak_count *v387;
  void *__p[3];
  void *v389;
  __int128 v390;
  void *v391;
  __int128 v392;
  __int128 v393;
  uint64_t (**v394)();
  __int128 v395;
  uint64_t v396;
  uint64_t (**v397)();
  __int128 v398;
  uint64_t (**v399)();
  __int128 v400;
  char *v401;
  std::__shared_weak_count *v402;
  _BYTE __dst[32];
  _BYTE v404[24];
  __int128 v405;
  __int128 v406;
  uint64_t (**v407)();
  __int128 v408;
  uint64_t v409;
  uint64_t (**v410)();
  __int128 v411;
  uint64_t (**v412)();
  __int128 v413;
  char *v414;
  std::__shared_weak_count *v415;
  uint64_t (**v416)();
  _BYTE v417[24];
  _BYTE v418[24];
  __int128 v419;
  __int128 v420;
  uint64_t (**v421)();
  __int128 v422;
  uint64_t v423;
  uint64_t (**v424)();
  __int128 v425;
  uint64_t (**v426)();
  __int128 v427;
  void *v428[2];
  void *v429;
  void *v430[4];
  void *v431[4];
  void *__src[4];
  __int128 v433;
  __int128 v434;
  __int128 v435;
  __int128 v436;
  __int128 v437;
  __int128 v438;
  __int128 v439;
  __int128 v440;
  __int128 v441;
  _QWORD v442[2];
  __int128 v443;
  _QWORD v444[2];
  _QWORD v445[5];

  v445[2] = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)a1 = a4;
  v7 = (char *)operator new(0xE0uLL);
  *((_QWORD *)v7 + 1) = 0;
  v8 = (unint64_t *)(v7 + 8);
  *((_QWORD *)v7 + 2) = 0;
  *(_QWORD *)v7 = &off_24C9C5AA0;
  sub_20EBBDB30((uint64_t)(v7 + 24));
  v401 = v7 + 24;
  v402 = (std::__shared_weak_count *)v7;
  *(_QWORD *)(a1 + 8) = &off_24C9C5AF0;
  if (v7[159] < 0)
  {
    sub_20E860C04((_BYTE *)(a1 + 16), *((void **)v7 + 17), *((_QWORD *)v7 + 18));
  }
  else
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(v7 + 136);
    *(_QWORD *)(a1 + 32) = *((_QWORD *)v7 + 19);
  }
  v384 = a1;
  if (v7[183] < 0)
  {
    sub_20E860C04((_BYTE *)(a1 + 40), *((void **)v7 + 20), *((_QWORD *)v7 + 21));
  }
  else
  {
    *(_OWORD *)(a1 + 40) = *((_OWORD *)v7 + 10);
    *(_QWORD *)(a1 + 56) = *((_QWORD *)v7 + 22);
  }
  v379 = a2;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v9 = (unint64_t *)operator new(0x58uLL);
  v9[1] = 0;
  v10 = v9 + 1;
  v9[2] = 0;
  *v9 = (unint64_t)&unk_24C9B6A90;
  v11 = v9 + 3;
  MEMORY[0x212BC5E10](v9 + 3);
  *(_QWORD *)&v441 = v9 + 3;
  *((_QWORD *)&v441 + 1) = v9;
  *(_QWORD *)&v440 = v9 + 3;
  *((_QWORD *)&v440 + 1) = v9;
  do
    v12 = __ldxr(v10);
  while (__stxr(v12 + 1, v10));
  v414 = v7 + 24;
  v415 = (std::__shared_weak_count *)v7;
  do
    v13 = __ldxr(v8);
  while (__stxr(v13 + 1, v8));
  if (v7[55] < 0)
  {
    sub_20E860C04(__dst, *((void **)v7 + 4), *((_QWORD *)v7 + 5));
  }
  else
  {
    *(_OWORD *)__dst = *((_OWORD *)v7 + 2);
    *(_QWORD *)&__dst[16] = *((_QWORD *)v7 + 6);
  }
  if (v7[79] < 0)
  {
    sub_20E860C04(__p, *((void **)v7 + 7), *((_QWORD *)v7 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(v7 + 56);
    __p[2] = *((void **)v7 + 9);
  }
  v440 = 0uLL;
  *(_QWORD *)&v433 = v7 + 24;
  *((_QWORD *)&v433 + 1) = v7;
  do
    v14 = __ldxr(v8);
  while (__stxr(v14 + 1, v8));
  v380 = *(_QWORD *)__dst;
  *(_QWORD *)&v438 = *(_QWORD *)&__dst[8];
  *(_QWORD *)((char *)&v438 + 7) = *(_QWORD *)&__dst[15];
  v382 = __dst[23];
  memset(__dst, 0, 24);
  v15 = __p[0];
  *(void **)&v437 = __p[1];
  *(void **)((char *)&v437 + 7) = *(void **)((char *)&__p[1] + 7);
  v16 = HIBYTE(__p[2]);
  memset(__p, 0, sizeof(__p));
  v428[1] = 0;
  v428[0] = 0;
  *(_QWORD *)&v439 = 0;
  *(_QWORD *)((char *)&v439 + 7) = 0;
  v431[0] = v9 + 3;
  v431[1] = v9;
  v430[1] = 0;
  v430[0] = 0;
  v17 = (char *)operator new();
  *(_QWORD *)&v443 = v439;
  *(_QWORD *)((char *)&v443 + 7) = *(_QWORD *)((char *)&v439 + 7);
  *(_QWORD *)&v439 = 0;
  *(_QWORD *)((char *)&v439 + 7) = 0;
  v431[1] = 0;
  v431[0] = 0;
  v17[8] = 1;
  *((_QWORD *)v17 + 4) = 0;
  *((_QWORD *)v17 + 5) = 0;
  *(_QWORD *)v17 = &off_24C9C5C28;
  *((_QWORD *)v17 + 2) = &unk_24C9C5CA0;
  *((_QWORD *)v17 + 3) = &unk_24C9C5CE0;
  v18 = v443;
  *(_QWORD *)(v17 + 63) = *(_QWORD *)((char *)&v443 + 7);
  *((_QWORD *)v17 + 6) = 0;
  *((_QWORD *)v17 + 7) = v18;
  v17[71] = 0;
  *(_QWORD *)&v443 = 0;
  *(_QWORD *)((char *)&v443 + 7) = 0;
  *((_QWORD *)v17 + 9) = v11;
  *((_QWORD *)v17 + 10) = v9;
  __src[1] = 0;
  __src[0] = 0;
  v19 = (_QWORD *)operator new();
  *v19 = &off_24C9C5DD8;
  v19[1] = v7 + 24;
  v19[2] = v7;
  v433 = 0uLL;
  *((_QWORD *)v17 + 11) = v19;
  *((_QWORD *)v17 + 12) = v17 + 96;
  *((_QWORD *)v17 + 13) = v17 + 96;
  *((_QWORD *)v17 + 14) = 0;
  *((_QWORD *)v17 + 15) = v17 + 120;
  *((_QWORD *)v17 + 16) = v17 + 120;
  *((_QWORD *)v17 + 17) = 0;
  v20 = (std::__shared_weak_count *)operator new();
  v20->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v20->__shared_owners_;
  v20->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C5E28;
  v20->__shared_weak_owners_ = 0;
  v20[1].__vftable = (std::__shared_weak_count_vtbl *)v17;
  v22 = (std::__shared_weak_count *)*((_QWORD *)v17 + 5);
  if (v22)
  {
    if (v22->__shared_owners_ != -1)
      goto LABEL_32;
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v20->__shared_weak_owners_;
    do
      v25 = __ldxr(p_shared_weak_owners);
    while (__stxr(v25 + 1, p_shared_weak_owners));
    *((_QWORD *)v17 + 4) = v17;
    *((_QWORD *)v17 + 5) = v20;
    std::__shared_weak_count::__release_weak(v22);
  }
  else
  {
    do
      v26 = __ldxr(p_shared_owners);
    while (__stxr(v26 + 1, p_shared_owners));
    v27 = (unint64_t *)&v20->__shared_weak_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
    *((_QWORD *)v17 + 4) = v17;
    *((_QWORD *)v17 + 5) = v20;
  }
  do
    v29 = __ldaxr(p_shared_owners);
  while (__stlxr(v29 - 1, p_shared_owners));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
LABEL_32:
  v30 = (std::__shared_weak_count *)__src[1];
  if (__src[1])
  {
    v31 = (unint64_t *)((char *)__src[1] + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  __src[0] = v17;
  __src[1] = v20;
  v33 = (std::__shared_weak_count *)v431[1];
  if (v431[1])
  {
    v34 = (unint64_t *)((char *)v431[1] + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v416 = &off_24C9C5B20;
  *(_QWORD *)v417 = v380;
  *(_QWORD *)&v417[8] = v438;
  *(_QWORD *)&v417[15] = *(_QWORD *)((char *)&v438 + 7);
  v417[23] = v382;
  *(_QWORD *)&v438 = 0;
  *(_QWORD *)((char *)&v438 + 7) = 0;
  *(_QWORD *)v418 = v15;
  *(_QWORD *)&v418[8] = v437;
  *(_QWORD *)&v418[15] = *(_QWORD *)((char *)&v437 + 7);
  v418[23] = v16;
  *(_QWORD *)&v437 = 0;
  *(_QWORD *)((char *)&v437 + 7) = 0;
  v419 = 0uLL;
  v431[1] = 0;
  v431[0] = 0;
  v36 = __src[0];
  v37 = (char *)__src[1];
  v420 = *(_OWORD *)__src;
  __src[0] = 0;
  __src[1] = 0;
  if (*((_QWORD *)&v420 + 1))
  {
    v38 = (unint64_t *)(v37 + 16);
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
  }
  v421 = &off_24C9B4780;
  v40 = (_QWORD *)operator new();
  *v40 = &off_24C9C5E78;
  v40[1] = v36;
  v40[2] = v37;
  *(_QWORD *)&v422 = v40;
  v42 = *((_QWORD *)&v420 + 1);
  v41 = v420;
  if (!*((_QWORD *)&v420 + 1))
  {
    *((_QWORD *)&v422 + 1) = v420;
    v423 = 0;
    if ((_QWORD)v420)
      v46 = v420 + 16;
    else
      v46 = 0;
    goto LABEL_62;
  }
  v43 = (unint64_t *)(*((_QWORD *)&v420 + 1) + 16);
  do
    v44 = __ldxr(v43);
  while (__stxr(v44 + 1, v43));
  v45 = *((_QWORD *)&v420 + 1);
  *((_QWORD *)&v422 + 1) = v41;
  v423 = v42;
  if ((_QWORD)v420)
    v46 = v420 + 16;
  else
    v46 = 0;
  if (!*((_QWORD *)&v420 + 1))
  {
    v41 = v420;
LABEL_62:
    v49 = 0;
    v424 = &off_24C9C5B50;
    v425 = v46;
    goto LABEL_63;
  }
  v47 = (unint64_t *)(*((_QWORD *)&v420 + 1) + 16);
  do
    v48 = __ldxr(v47);
  while (__stxr(v48 + 1, v47));
  v49 = *((_QWORD *)&v420 + 1);
  v41 = v420;
  v424 = &off_24C9C5B50;
  *(_QWORD *)&v425 = v46;
  *((_QWORD *)&v425 + 1) = v45;
  if (*((_QWORD *)&v420 + 1))
  {
    v50 = (unint64_t *)(*((_QWORD *)&v420 + 1) + 16);
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
  }
LABEL_63:
  if (v41)
    v52 = v41 + 24;
  else
    v52 = 0;
  v426 = &off_24C9B2310;
  *(_QWORD *)&v427 = v52;
  *((_QWORD *)&v427 + 1) = v49;
  v53 = (std::__shared_weak_count *)v430[1];
  if (v430[1])
  {
    v54 = (unint64_t *)((char *)v430[1] + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v56 = (std::__shared_weak_count *)*((_QWORD *)&v433 + 1);
  if (*((_QWORD *)&v433 + 1))
  {
    v57 = (unint64_t *)(*((_QWORD *)&v433 + 1) + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = (std::__shared_weak_count *)v428[1];
  if (!v428[1])
    goto LABEL_80;
  v60 = (unint64_t *)((char *)v428[1] + 8);
  do
    v61 = __ldaxr(v60);
  while (__stlxr(v61 - 1, v60));
  if (!v61)
  {
    ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
    std::__shared_weak_count::__release_weak(v59);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
    {
LABEL_81:
      if ((__dst[23] & 0x80000000) == 0)
        goto LABEL_82;
      goto LABEL_86;
    }
  }
  else
  {
LABEL_80:
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      goto LABEL_81;
  }
  operator delete(__p[0]);
  if ((__dst[23] & 0x80000000) == 0)
  {
LABEL_82:
    if (v414)
      goto LABEL_88;
    goto LABEL_87;
  }
LABEL_86:
  operator delete(*(void **)__dst);
  if (v414)
    goto LABEL_88;
LABEL_87:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 534, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_88:
  *(_QWORD *)&v439 = v9 + 3;
  *((_QWORD *)&v439 + 1) = v9;
  do
    v62 = __ldxr(v10);
  while (__stxr(v62 + 1, v10));
  v63 = v401;
  v64 = v402;
  if (v401)
    v65 = v401 + 56;
  else
    v65 = 0;
  *(_QWORD *)&v438 = v65;
  *((_QWORD *)&v438 + 1) = v402;
  if (v402)
  {
    v66 = (unint64_t *)&v402->__shared_owners_;
    do
      v67 = __ldxr(v66);
    while (__stxr(v67 + 1, v66));
  }
  if (v65[31] < 0)
  {
    sub_20E860C04(__p, *((void **)v65 + 1), *((_QWORD *)v65 + 2));
  }
  else
  {
    v68 = *(_OWORD *)(v65 + 8);
    __p[2] = *((void **)v65 + 3);
    *(_OWORD *)__p = v68;
  }
  if (v63[111] < 0)
  {
    sub_20E860C04(__src, *((void **)v63 + 11), *((_QWORD *)v63 + 12));
  }
  else
  {
    *(_OWORD *)__src = *(_OWORD *)(v63 + 88);
    __src[2] = *((void **)v63 + 13);
  }
  v439 = 0uLL;
  *(_QWORD *)&v443 = v65;
  *((_QWORD *)&v443 + 1) = v64;
  if (v64)
  {
    v69 = (unint64_t *)&v64->__shared_owners_;
    do
      v70 = __ldxr(v69);
    while (__stxr(v70 + 1, v69));
  }
  v381 = __p[0];
  *(void **)&v435 = __p[1];
  *(void **)((char *)&v435 + 7) = *(void **)((char *)&__p[1] + 7);
  v383 = HIBYTE(__p[2]);
  memset(__p, 0, sizeof(__p));
  v378 = __src[0];
  *(void **)&v434 = __src[1];
  *(void **)((char *)&v434 + 7) = *(void **)((char *)&__src[1] + 7);
  v71 = HIBYTE(__src[2]);
  memset(__src, 0, 24);
  v433 = 0uLL;
  *(_QWORD *)&v436 = 0;
  *(_QWORD *)((char *)&v436 + 7) = 0;
  v430[0] = v9 + 3;
  v430[1] = v9;
  v428[1] = 0;
  v428[0] = 0;
  v72 = (char *)operator new();
  *(_QWORD *)&v437 = v436;
  *(_QWORD *)((char *)&v437 + 7) = *(_QWORD *)((char *)&v436 + 7);
  *(_QWORD *)&v436 = 0;
  *(_QWORD *)((char *)&v436 + 7) = 0;
  v430[1] = 0;
  v430[0] = 0;
  v72[8] = 1;
  *((_QWORD *)v72 + 4) = 0;
  *((_QWORD *)v72 + 5) = 0;
  *(_QWORD *)v72 = &off_24C9C5EE0;
  *((_QWORD *)v72 + 2) = &unk_24C9C5F58;
  *((_QWORD *)v72 + 3) = &unk_24C9C5F98;
  v73 = v437;
  *(_QWORD *)(v72 + 63) = *(_QWORD *)((char *)&v437 + 7);
  *((_QWORD *)v72 + 6) = 0;
  *((_QWORD *)v72 + 7) = v73;
  v72[71] = 0;
  *(_QWORD *)&v437 = 0;
  *(_QWORD *)((char *)&v437 + 7) = 0;
  *((_QWORD *)v72 + 9) = v11;
  *((_QWORD *)v72 + 10) = v9;
  v431[1] = 0;
  v431[0] = 0;
  v74 = (_QWORD *)operator new();
  *v74 = &off_24C9C6080;
  v74[1] = v65;
  v74[2] = v64;
  v443 = 0uLL;
  *((_QWORD *)v72 + 11) = v74;
  *((_QWORD *)v72 + 12) = v72 + 96;
  *((_QWORD *)v72 + 13) = v72 + 96;
  *((_QWORD *)v72 + 14) = 0;
  *((_QWORD *)v72 + 15) = v72 + 120;
  *((_QWORD *)v72 + 16) = v72 + 120;
  *((_QWORD *)v72 + 17) = 0;
  v75 = (std::__shared_weak_count *)operator new();
  v75->__shared_owners_ = 0;
  v76 = (unint64_t *)&v75->__shared_owners_;
  v75->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C60D0;
  v75->__shared_weak_owners_ = 0;
  v75[1].__vftable = (std::__shared_weak_count_vtbl *)v72;
  v77 = (std::__shared_weak_count *)*((_QWORD *)v72 + 5);
  if (v77)
  {
    if (v77->__shared_owners_ != -1)
      goto LABEL_118;
    do
      v78 = __ldxr(v76);
    while (__stxr(v78 + 1, v76));
    v79 = (unint64_t *)&v75->__shared_weak_owners_;
    do
      v80 = __ldxr(v79);
    while (__stxr(v80 + 1, v79));
    *((_QWORD *)v72 + 4) = v72;
    *((_QWORD *)v72 + 5) = v75;
    std::__shared_weak_count::__release_weak(v77);
  }
  else
  {
    do
      v81 = __ldxr(v76);
    while (__stxr(v81 + 1, v76));
    v82 = (unint64_t *)&v75->__shared_weak_owners_;
    do
      v83 = __ldxr(v82);
    while (__stxr(v83 + 1, v82));
    *((_QWORD *)v72 + 4) = v72;
    *((_QWORD *)v72 + 5) = v75;
  }
  do
    v84 = __ldaxr(v76);
  while (__stlxr(v84 - 1, v76));
  if (!v84)
  {
    ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
    std::__shared_weak_count::__release_weak(v75);
  }
LABEL_118:
  v85 = (std::__shared_weak_count *)v431[1];
  if (v431[1])
  {
    v86 = (unint64_t *)((char *)v431[1] + 8);
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v431[0] = v72;
  v431[1] = v75;
  v88 = (std::__shared_weak_count *)v430[1];
  if (v430[1])
  {
    v89 = (unint64_t *)((char *)v430[1] + 8);
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  *(_QWORD *)__dst = &off_24C9C5BC0;
  *(_QWORD *)&__dst[8] = v381;
  *(_QWORD *)&__dst[16] = v435;
  *(_QWORD *)&__dst[23] = *(_QWORD *)((char *)&v435 + 7);
  __dst[31] = v383;
  *(_QWORD *)&v435 = 0;
  *(_QWORD *)((char *)&v435 + 7) = 0;
  *(_QWORD *)v404 = v378;
  *(_QWORD *)&v404[8] = v434;
  *(_QWORD *)&v404[15] = *(_QWORD *)((char *)&v434 + 7);
  v404[23] = v71;
  *(_QWORD *)&v434 = 0;
  *(_QWORD *)((char *)&v434 + 7) = 0;
  v405 = 0uLL;
  v430[1] = 0;
  v430[0] = 0;
  v91 = v431[0];
  v92 = (char *)v431[1];
  v406 = *(_OWORD *)v431;
  v431[0] = 0;
  v431[1] = 0;
  if (*((_QWORD *)&v406 + 1))
  {
    v93 = (unint64_t *)(v92 + 16);
    do
      v94 = __ldxr(v93);
    while (__stxr(v94 + 1, v93));
  }
  v407 = &off_24C9C5BF0;
  v95 = (_QWORD *)operator new();
  *v95 = &off_24C9C6120;
  v95[1] = v91;
  v95[2] = v92;
  *(_QWORD *)&v408 = v95;
  v97 = *((_QWORD *)&v406 + 1);
  v96 = v406;
  if (!*((_QWORD *)&v406 + 1))
  {
    *((_QWORD *)&v408 + 1) = v406;
    v409 = 0;
    if ((_QWORD)v406)
      v101 = v406 + 16;
    else
      v101 = 0;
    goto LABEL_148;
  }
  v98 = (unint64_t *)(*((_QWORD *)&v406 + 1) + 16);
  do
    v99 = __ldxr(v98);
  while (__stxr(v99 + 1, v98));
  v100 = *((_QWORD *)&v406 + 1);
  *((_QWORD *)&v408 + 1) = v96;
  v409 = v97;
  if ((_QWORD)v406)
    v101 = v406 + 16;
  else
    v101 = 0;
  if (!*((_QWORD *)&v406 + 1))
  {
    v96 = v406;
LABEL_148:
    v104 = 0;
    v410 = &off_24C9B2520;
    v411 = v101;
    goto LABEL_149;
  }
  v102 = (unint64_t *)(*((_QWORD *)&v406 + 1) + 16);
  do
    v103 = __ldxr(v102);
  while (__stxr(v103 + 1, v102));
  v104 = *((_QWORD *)&v406 + 1);
  v96 = v406;
  v410 = &off_24C9B2520;
  *(_QWORD *)&v411 = v101;
  *((_QWORD *)&v411 + 1) = v100;
  if (*((_QWORD *)&v406 + 1))
  {
    v105 = (unint64_t *)(*((_QWORD *)&v406 + 1) + 16);
    do
      v106 = __ldxr(v105);
    while (__stxr(v106 + 1, v105));
  }
LABEL_149:
  if (v96)
    v107 = v96 + 24;
  else
    v107 = 0;
  v412 = &off_24C9B2310;
  *(_QWORD *)&v413 = v107;
  *((_QWORD *)&v413 + 1) = v104;
  v108 = (std::__shared_weak_count *)v428[1];
  if (v428[1])
  {
    v109 = (unint64_t *)((char *)v428[1] + 8);
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = (std::__shared_weak_count *)*((_QWORD *)&v443 + 1);
  if (*((_QWORD *)&v443 + 1))
  {
    v112 = (unint64_t *)(*((_QWORD *)&v443 + 1) + 8);
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = (std::__shared_weak_count *)*((_QWORD *)&v433 + 1);
  if (!*((_QWORD *)&v433 + 1))
    goto LABEL_166;
  v115 = (unint64_t *)(*((_QWORD *)&v433 + 1) + 8);
  do
    v116 = __ldaxr(v115);
  while (__stlxr(v116 - 1, v115));
  if (!v116)
  {
    ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
    std::__shared_weak_count::__release_weak(v114);
    if ((SHIBYTE(__src[2]) & 0x80000000) == 0)
    {
LABEL_167:
      if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
        goto LABEL_168;
      goto LABEL_172;
    }
  }
  else
  {
LABEL_166:
    if ((SHIBYTE(__src[2]) & 0x80000000) == 0)
      goto LABEL_167;
  }
  operator delete(__src[0]);
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
LABEL_168:
    if ((_QWORD)v438)
      goto LABEL_174;
    goto LABEL_173;
  }
LABEL_172:
  operator delete(__p[0]);
  if ((_QWORD)v438)
    goto LABEL_174;
LABEL_173:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 534, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_174:
  v117 = operator new();
  *(_QWORD *)v117 = &off_24C9C5B20;
  *(_OWORD *)(v117 + 8) = *(_OWORD *)v417;
  *(_QWORD *)(v117 + 24) = *(_QWORD *)&v417[16];
  memset(v417, 0, sizeof(v417));
  *(_OWORD *)(v117 + 32) = *(_OWORD *)v418;
  *(_QWORD *)(v117 + 48) = *(_QWORD *)&v418[16];
  memset(v418, 0, sizeof(v418));
  *(_OWORD *)(v117 + 56) = v419;
  v419 = 0uLL;
  *(_OWORD *)(v117 + 72) = v420;
  v420 = 0uLL;
  *(_QWORD *)(v117 + 88) = &off_24C9B4780;
  *(_OWORD *)(v117 + 96) = v422;
  v118 = v423;
  *((_QWORD *)&v422 + 1) = 0;
  v423 = 0;
  *(_QWORD *)(v117 + 112) = v118;
  *(_QWORD *)(v117 + 120) = &off_24C9C5B50;
  *(_OWORD *)(v117 + 128) = v425;
  *(_QWORD *)&v422 = 0;
  v425 = 0uLL;
  *(_QWORD *)(v117 + 144) = &off_24C9B2310;
  *(_OWORD *)(v117 + 152) = v427;
  v427 = 0uLL;
  *(_QWORD *)(v117 + 168) = &off_24C9C5BC0;
  v119 = *(_OWORD *)&__dst[8];
  *(_QWORD *)(v117 + 192) = *(_QWORD *)&__dst[24];
  *(_OWORD *)(v117 + 176) = v119;
  memset(&__dst[8], 0, 24);
  v120 = *(_OWORD *)v404;
  *(_QWORD *)(v117 + 216) = *(_QWORD *)&v404[16];
  *(_OWORD *)(v117 + 200) = v120;
  memset(v404, 0, sizeof(v404));
  v121 = v405;
  v405 = 0uLL;
  v122 = v406;
  *(_OWORD *)(v117 + 224) = v121;
  *(_OWORD *)(v117 + 240) = v122;
  v406 = 0uLL;
  *(_QWORD *)(v117 + 256) = &off_24C9C5BF0;
  *(_OWORD *)(v117 + 264) = v408;
  v123 = v409;
  *((_QWORD *)&v408 + 1) = 0;
  v409 = 0;
  *(_QWORD *)(v117 + 280) = v123;
  *(_QWORD *)(v117 + 288) = &off_24C9B2520;
  *(_OWORD *)(v117 + 296) = v411;
  v411 = 0uLL;
  *(_QWORD *)&v408 = 0;
  *(_QWORD *)(v117 + 312) = &off_24C9B2310;
  *(_OWORD *)(v117 + 320) = v413;
  v413 = 0uLL;
  *(_QWORD *)(v384 + 80) = v117;
  sub_20EBAF1D4((uint64_t)__dst);
  v124 = (std::__shared_weak_count *)*((_QWORD *)&v438 + 1);
  if (*((_QWORD *)&v438 + 1))
  {
    v125 = (unint64_t *)(*((_QWORD *)&v438 + 1) + 8);
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v127 = (std::__shared_weak_count *)*((_QWORD *)&v439 + 1);
  if (*((_QWORD *)&v439 + 1))
  {
    v128 = (unint64_t *)(*((_QWORD *)&v439 + 1) + 8);
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
  sub_20EBAF3B8((uint64_t)&v416);
  v130 = v415;
  if (v415)
  {
    v131 = (unint64_t *)&v415->__shared_owners_;
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
  v133 = (std::__shared_weak_count *)*((_QWORD *)&v440 + 1);
  if (*((_QWORD *)&v440 + 1))
  {
    v134 = (unint64_t *)(*((_QWORD *)&v440 + 1) + 8);
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 - 1, v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
      std::__shared_weak_count::__release_weak(v133);
    }
  }
  v136 = (std::__shared_weak_count *)*((_QWORD *)&v441 + 1);
  if (*((_QWORD *)&v441 + 1))
  {
    v137 = (unint64_t *)(*((_QWORD *)&v441 + 1) + 8);
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }
  v139 = v402;
  if (v402)
  {
    v140 = (unint64_t *)&v402->__shared_owners_;
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }
  v143 = *v379;
  v142 = (std::__shared_weak_count *)v379[1];
  v385 = v142;
  if (v142)
  {
    v144 = (unint64_t *)&v142->__shared_owners_;
    do
      v145 = __ldxr(v144);
    while (__stxr(v145 + 1, v144));
  }
  v146 = (char *)operator new(0x100uLL);
  *((_QWORD *)v146 + 1) = 0;
  v147 = (unint64_t *)(v146 + 8);
  *((_QWORD *)v146 + 2) = 0;
  *(_QWORD *)v146 = &off_24C9C6198;
  sub_20EB9D298((uint64_t)(v146 + 24), a3);
  *(_QWORD *)&v434 = v143;
  *((_QWORD *)&v434 + 1) = v142;
  if (v142)
  {
    v148 = (unint64_t *)&v142->__shared_owners_;
    do
      v149 = __ldxr(v148);
    while (__stxr(v149 + 1, v148));
  }
  v386 = v146 + 24;
  v387 = (std::__shared_weak_count *)v146;
  v435 = 0uLL;
  *(_QWORD *)(v384 + 88) = &off_24C9C61E8;
  if (v146[215] < 0)
  {
    sub_20E860C04((_BYTE *)(v384 + 96), *((void **)v146 + 24), *((_QWORD *)v146 + 25));
  }
  else
  {
    *(_OWORD *)(v384 + 96) = *((_OWORD *)v146 + 12);
    *(_QWORD *)(v384 + 112) = *((_QWORD *)v146 + 26);
  }
  if (v146[239] < 0)
  {
    sub_20E860C04((_BYTE *)(v384 + 120), *((void **)v146 + 27), *((_QWORD *)v146 + 28));
  }
  else
  {
    *(_OWORD *)(v384 + 120) = *(_OWORD *)(v146 + 216);
    *(_QWORD *)(v384 + 136) = *((_QWORD *)v146 + 29);
  }
  *(_QWORD *)(v384 + 144) = v143;
  *(_QWORD *)(v384 + 152) = v142;
  v434 = 0uLL;
  *(_QWORD *)&v436 = v143;
  *((_QWORD *)&v436 + 1) = v142;
  if (v142)
  {
    v150 = (unint64_t *)&v142->__shared_owners_;
    do
      v151 = __ldxr(v150);
    while (__stxr(v151 + 1, v150));
    v415 = v142;
    do
      v152 = __ldxr(v150);
    while (__stxr(v152 + 1, v150));
  }
  else
  {
    v415 = 0;
  }
  v414 = v143;
  *(_QWORD *)&v439 = v146 + 24;
  *((_QWORD *)&v439 + 1) = v146;
  do
    v153 = __ldxr(v147);
  while (__stxr(v153 + 1, v147));
  if (v146[55] < 0)
  {
    sub_20E860C04(__src, *((void **)v146 + 4), *((_QWORD *)v146 + 5));
  }
  else
  {
    *(_OWORD *)__src = *((_OWORD *)v146 + 2);
    __src[2] = *((void **)v146 + 6);
  }
  if (v146[79] < 0)
  {
    sub_20E860C04(v431, *((void **)v146 + 7), *((_QWORD *)v146 + 8));
  }
  else
  {
    *(_OWORD *)v431 = *(_OWORD *)(v146 + 56);
    v431[2] = *((void **)v146 + 9);
  }
  *(_QWORD *)&v433 = v143;
  *((_QWORD *)&v433 + 1) = v142;
  v415 = 0;
  v414 = 0;
  *(_QWORD *)&v443 = v146 + 24;
  *((_QWORD *)&v443 + 1) = v146;
  do
    v154 = __ldxr(v147);
  while (__stxr(v154 + 1, v147));
  if (SHIBYTE(__src[2]) < 0)
  {
    sub_20E860C04(__dst, __src[0], (unint64_t)__src[1]);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)__src;
    *(void **)&__dst[16] = __src[2];
  }
  if (SHIBYTE(v431[2]) < 0)
  {
    sub_20E860C04(__p, v431[0], (unint64_t)v431[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v431;
    __p[2] = v431[2];
  }
  *(void **)((char *)v445 + 7) = *(void **)((char *)&__src[1] + 7);
  v155 = __src[0];
  v156 = __src[1];
  HIBYTE(v445[0]) = HIBYTE(__src[1]);
  v157 = HIBYTE(__src[2]);
  memset(__src, 0, 24);
  *(_QWORD *)&v440 = v156;
  *(_QWORD *)((char *)&v440 + 7) = *(_QWORD *)((char *)v445 + 7);
  *(_QWORD *)((char *)v445 + 7) = 0;
  v445[0] = 0;
  v428[0] = v143;
  v428[1] = v142;
  if (v142)
  {
    v158 = (unint64_t *)&v142->__shared_owners_;
    do
      v159 = __ldxr(v158);
    while (__stxr(v159 + 1, v158));
  }
  v160 = (char *)operator new();
  *(_QWORD *)&v441 = v440;
  *(_QWORD *)((char *)&v441 + 7) = *(_QWORD *)((char *)&v440 + 7);
  *(_QWORD *)&v440 = 0;
  *(_QWORD *)((char *)&v440 + 7) = 0;
  v161 = *(_OWORD *)v428;
  v428[0] = 0;
  v428[1] = 0;
  v160[8] = 1;
  *((_QWORD *)v160 + 4) = 0;
  *((_QWORD *)v160 + 5) = 0;
  *(_QWORD *)v160 = &off_24C9C6388;
  *((_QWORD *)v160 + 2) = &unk_24C9C6400;
  *((_QWORD *)v160 + 3) = &unk_24C9C6440;
  v162 = v441;
  *(_QWORD *)(v160 + 63) = *(_QWORD *)((char *)&v441 + 7);
  *((_QWORD *)v160 + 6) = v155;
  *((_QWORD *)v160 + 7) = v162;
  v160[71] = v157;
  *(_QWORD *)&v441 = 0;
  *(_QWORD *)((char *)&v441 + 7) = 0;
  *(_OWORD *)(v160 + 72) = v161;
  v430[1] = 0;
  v430[0] = 0;
  v163 = (_QWORD *)operator new();
  *v163 = &off_24C9C6538;
  v163[1] = v146 + 24;
  v163[2] = v146;
  v443 = 0uLL;
  *((_QWORD *)v160 + 11) = v163;
  *((_QWORD *)v160 + 12) = v160 + 96;
  *((_QWORD *)v160 + 13) = v160 + 96;
  *((_QWORD *)v160 + 14) = 0;
  *((_QWORD *)v160 + 15) = v160 + 120;
  *((_QWORD *)v160 + 16) = v160 + 120;
  *((_QWORD *)v160 + 17) = 0;
  v164 = operator new();
  v165 = operator new(0x10uLL);
  *v165 = 0;
  v165[1] = 0;
  *(_QWORD *)v164 = v165;
  *(_QWORD *)(v164 + 8) = v165 + 2;
  *(_QWORD *)(v164 + 16) = v165 + 2;
  *(_QWORD *)(v164 + 24) = 0;
  *(_QWORD *)(v164 + 32) = 0;
  *(_QWORD *)(v164 + 40) = 0;
  *(_BYTE *)(v164 + 48) = 1;
  *(_QWORD *)(v164 + 56) = 850045863;
  *(_OWORD *)(v164 + 64) = 0u;
  *(_OWORD *)(v164 + 80) = 0u;
  *(_OWORD *)(v164 + 96) = 0u;
  *(_QWORD *)(v164 + 112) = 0;
  *((_QWORD *)v160 + 18) = v164;
  if (!*((_QWORD *)v160 + 9)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v166 = (std::__shared_weak_count *)operator new();
  v166->__shared_owners_ = 0;
  v167 = (unint64_t *)&v166->__shared_owners_;
  v166->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C6A28;
  v166->__shared_weak_owners_ = 0;
  v166[1].__vftable = (std::__shared_weak_count_vtbl *)v160;
  v168 = (std::__shared_weak_count *)*((_QWORD *)v160 + 5);
  if (v168)
  {
    if (v168->__shared_owners_ != -1)
      goto LABEL_257;
    do
      v169 = __ldxr(v167);
    while (__stxr(v169 + 1, v167));
    v170 = (unint64_t *)&v166->__shared_weak_owners_;
    do
      v171 = __ldxr(v170);
    while (__stxr(v171 + 1, v170));
    *((_QWORD *)v160 + 4) = v160;
    *((_QWORD *)v160 + 5) = v166;
    std::__shared_weak_count::__release_weak(v168);
  }
  else
  {
    do
      v172 = __ldxr(v167);
    while (__stxr(v172 + 1, v167));
    v173 = (unint64_t *)&v166->__shared_weak_owners_;
    do
      v174 = __ldxr(v173);
    while (__stxr(v174 + 1, v173));
    *((_QWORD *)v160 + 4) = v160;
    *((_QWORD *)v160 + 5) = v166;
  }
  do
    v175 = __ldaxr(v167);
  while (__stlxr(v175 - 1, v167));
  if (!v175)
  {
    ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
    std::__shared_weak_count::__release_weak(v166);
  }
LABEL_257:
  v176 = (std::__shared_weak_count *)v430[1];
  if (v430[1])
  {
    v177 = (unint64_t *)((char *)v430[1] + 8);
    do
      v178 = __ldaxr(v177);
    while (__stlxr(v178 - 1, v177));
    if (!v178)
    {
      ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
      std::__shared_weak_count::__release_weak(v176);
    }
  }
  v430[0] = v160;
  v430[1] = v166;
  v179 = (std::__shared_weak_count *)v428[1];
  if (v428[1])
  {
    v180 = (unint64_t *)((char *)v428[1] + 8);
    do
      v181 = __ldaxr(v180);
    while (__stlxr(v181 - 1, v180));
    if (!v181)
    {
      ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
      std::__shared_weak_count::__release_weak(v179);
    }
  }
  v182 = v433;
  v433 = 0uLL;
  *(_OWORD *)v417 = *(_OWORD *)__dst;
  v416 = &off_24C9C6218;
  *(_QWORD *)&v417[16] = *(_QWORD *)&__dst[16];
  memset(__dst, 0, 24);
  *(_OWORD *)v418 = *(_OWORD *)__p;
  v183 = __p[2];
  memset(__p, 0, sizeof(__p));
  v419 = v182;
  v428[1] = 0;
  v428[0] = 0;
  v184 = v430[0];
  v185 = (char *)v430[1];
  *(_QWORD *)&v418[16] = v183;
  v420 = *(_OWORD *)v430;
  v430[0] = 0;
  v430[1] = 0;
  if (*((_QWORD *)&v420 + 1))
  {
    v186 = (unint64_t *)(v185 + 16);
    do
      v187 = __ldxr(v186);
    while (__stxr(v187 + 1, v186));
  }
  v421 = &off_24C9C5B88;
  v188 = (_QWORD *)operator new();
  *v188 = &off_24C9C6A78;
  v188[1] = v184;
  v188[2] = v185;
  *(_QWORD *)&v422 = v188;
  v190 = *((_QWORD *)&v420 + 1);
  v189 = v420;
  if (!*((_QWORD *)&v420 + 1))
  {
    *((_QWORD *)&v422 + 1) = v420;
    v423 = 0;
    if ((_QWORD)v420)
      v194 = v420 + 16;
    else
      v194 = 0;
    goto LABEL_287;
  }
  v191 = (unint64_t *)(*((_QWORD *)&v420 + 1) + 16);
  do
    v192 = __ldxr(v191);
  while (__stxr(v192 + 1, v191));
  v193 = *((_QWORD *)&v420 + 1);
  *((_QWORD *)&v422 + 1) = v189;
  v423 = v190;
  if ((_QWORD)v420)
    v194 = v420 + 16;
  else
    v194 = 0;
  if (!*((_QWORD *)&v420 + 1))
  {
    v189 = v420;
LABEL_287:
    v197 = 0;
    v424 = &off_24C9C6248;
    v425 = v194;
    goto LABEL_288;
  }
  v195 = (unint64_t *)(*((_QWORD *)&v420 + 1) + 16);
  do
    v196 = __ldxr(v195);
  while (__stxr(v196 + 1, v195));
  v197 = *((_QWORD *)&v420 + 1);
  v189 = v420;
  v424 = &off_24C9C6248;
  *(_QWORD *)&v425 = v194;
  *((_QWORD *)&v425 + 1) = v193;
  if (*((_QWORD *)&v420 + 1))
  {
    v198 = (unint64_t *)(*((_QWORD *)&v420 + 1) + 16);
    do
      v199 = __ldxr(v198);
    while (__stxr(v199 + 1, v198));
  }
LABEL_288:
  if (v189)
    v200 = v189 + 24;
  else
    v200 = 0;
  v426 = &off_24C9B2310;
  *(_QWORD *)&v427 = v200;
  *((_QWORD *)&v427 + 1) = v197;
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_293;
LABEL_296:
    operator delete(*(void **)__dst);
    v201 = (std::__shared_weak_count *)*((_QWORD *)&v443 + 1);
    if (!*((_QWORD *)&v443 + 1))
      goto LABEL_301;
    goto LABEL_297;
  }
  operator delete(__p[0]);
  if ((__dst[23] & 0x80000000) != 0)
    goto LABEL_296;
LABEL_293:
  v201 = (std::__shared_weak_count *)*((_QWORD *)&v443 + 1);
  if (!*((_QWORD *)&v443 + 1))
    goto LABEL_301;
LABEL_297:
  v202 = (unint64_t *)&v201->__shared_owners_;
  do
    v203 = __ldaxr(v202);
  while (__stlxr(v203 - 1, v202));
  if (!v203)
  {
    ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
    std::__shared_weak_count::__release_weak(v201);
  }
LABEL_301:
  v204 = (std::__shared_weak_count *)*((_QWORD *)&v433 + 1);
  if (!*((_QWORD *)&v433 + 1))
    goto LABEL_305;
  v205 = (unint64_t *)(*((_QWORD *)&v433 + 1) + 8);
  do
    v206 = __ldaxr(v205);
  while (__stlxr(v206 - 1, v205));
  if (!v206)
  {
    ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
    std::__shared_weak_count::__release_weak(v204);
    if ((SHIBYTE(v431[2]) & 0x80000000) == 0)
    {
LABEL_306:
      if ((SHIBYTE(__src[2]) & 0x80000000) == 0)
        goto LABEL_307;
LABEL_311:
      operator delete(__src[0]);
      if ((_QWORD)v439)
        goto LABEL_313;
      goto LABEL_312;
    }
  }
  else
  {
LABEL_305:
    if ((SHIBYTE(v431[2]) & 0x80000000) == 0)
      goto LABEL_306;
  }
  operator delete(v431[0]);
  if (SHIBYTE(__src[2]) < 0)
    goto LABEL_311;
LABEL_307:
  if ((_QWORD)v439)
    goto LABEL_313;
LABEL_312:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_313:
  v207 = v436;
  v438 = v436;
  if (*((_QWORD *)&v436 + 1))
  {
    v208 = (unint64_t *)(*((_QWORD *)&v436 + 1) + 8);
    do
      v209 = __ldxr(v208);
    while (__stxr(v209 + 1, v208));
  }
  if (v386)
    v210 = v386 + 56;
  else
    v210 = 0;
  v401 = v210;
  v402 = v387;
  if (v387)
  {
    v211 = (unint64_t *)&v387->__shared_owners_;
    do
      v212 = __ldxr(v211);
    while (__stxr(v212 + 1, v211));
  }
  if (v210[31] < 0)
  {
    sub_20E860C04(v431, *((void **)v210 + 1), *((_QWORD *)v210 + 2));
  }
  else
  {
    v213 = *(_OWORD *)(v210 + 8);
    v431[2] = *((void **)v210 + 3);
    *(_OWORD *)v431 = v213;
  }
  if (v386[111] < 0)
  {
    sub_20E860C04(v430, *((void **)v386 + 11), *((_QWORD *)v386 + 12));
  }
  else
  {
    *(_OWORD *)v430 = *(_OWORD *)(v386 + 88);
    v430[2] = *((void **)v386 + 13);
  }
  v443 = v207;
  v438 = 0uLL;
  *(_QWORD *)&v441 = v210;
  *((_QWORD *)&v441 + 1) = v387;
  if (v387)
  {
    v214 = (unint64_t *)&v387->__shared_owners_;
    do
      v215 = __ldxr(v214);
    while (__stxr(v215 + 1, v214));
  }
  if (SHIBYTE(v431[2]) < 0)
  {
    sub_20E860C04(__p, v431[0], (unint64_t)v431[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v431;
    __p[2] = v431[2];
  }
  if (SHIBYTE(v430[2]) < 0)
  {
    sub_20E860C04(__src, v430[0], (unint64_t)v430[1]);
  }
  else
  {
    *(_OWORD *)__src = *(_OWORD *)v430;
    __src[2] = v430[2];
  }
  *(void **)((char *)v444 + 7) = *(void **)((char *)&v431[1] + 7);
  v216 = v431[0];
  v217 = v431[1];
  HIBYTE(v444[0]) = HIBYTE(v431[1]);
  v218 = HIBYTE(v431[2]);
  memset(v431, 0, 24);
  v445[0] = v217;
  *(_QWORD *)((char *)v445 + 7) = *(_QWORD *)((char *)v444 + 7);
  *(_QWORD *)((char *)v444 + 7) = 0;
  v444[0] = 0;
  v433 = v207;
  if (*((_QWORD *)&v207 + 1))
  {
    v219 = (unint64_t *)(*((_QWORD *)&v207 + 1) + 8);
    do
      v220 = __ldxr(v219);
    while (__stxr(v220 + 1, v219));
  }
  v221 = (char *)operator new();
  *(_QWORD *)&v440 = v445[0];
  *(_QWORD *)((char *)&v440 + 7) = *(_QWORD *)((char *)v445 + 7);
  v445[0] = 0;
  *(_QWORD *)((char *)v445 + 7) = 0;
  v222 = v433;
  v433 = 0uLL;
  v221[8] = 1;
  *((_QWORD *)v221 + 4) = 0;
  *((_QWORD *)v221 + 5) = 0;
  *(_QWORD *)v221 = &off_24C9C6AF0;
  *((_QWORD *)v221 + 2) = &unk_24C9C6B68;
  *((_QWORD *)v221 + 3) = &unk_24C9C6BA8;
  v223 = v440;
  *(_QWORD *)(v221 + 63) = *(_QWORD *)((char *)&v440 + 7);
  *((_QWORD *)v221 + 6) = v216;
  *((_QWORD *)v221 + 7) = v223;
  v221[71] = v218;
  *(_QWORD *)&v440 = 0;
  *(_QWORD *)((char *)&v440 + 7) = 0;
  *(_OWORD *)(v221 + 72) = v222;
  v428[1] = 0;
  v428[0] = 0;
  v224 = (_QWORD *)operator new();
  *v224 = &off_24C9C6C90;
  v224[1] = v210;
  v224[2] = v387;
  v441 = 0uLL;
  *((_QWORD *)v221 + 11) = v224;
  *((_QWORD *)v221 + 12) = v221 + 96;
  *((_QWORD *)v221 + 13) = v221 + 96;
  *((_QWORD *)v221 + 14) = 0;
  *((_QWORD *)v221 + 15) = v221 + 120;
  *((_QWORD *)v221 + 16) = v221 + 120;
  *((_QWORD *)v221 + 17) = 0;
  v225 = operator new();
  v226 = operator new(0x10uLL);
  *v226 = 0;
  v226[1] = 0;
  *(_QWORD *)v225 = v226;
  *(_QWORD *)(v225 + 8) = v226 + 2;
  *(_QWORD *)(v225 + 16) = v226 + 2;
  *(_QWORD *)(v225 + 24) = 0;
  *(_QWORD *)(v225 + 32) = 0;
  *(_QWORD *)(v225 + 40) = 0;
  *(_BYTE *)(v225 + 48) = 1;
  *(_QWORD *)(v225 + 56) = 850045863;
  *(_OWORD *)(v225 + 64) = 0u;
  *(_OWORD *)(v225 + 80) = 0u;
  *(_OWORD *)(v225 + 96) = 0u;
  *(_QWORD *)(v225 + 112) = 0;
  *((_QWORD *)v221 + 18) = v225;
  if (!*((_QWORD *)v221 + 9)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v227 = (std::__shared_weak_count *)operator new();
  v227->__shared_owners_ = 0;
  v228 = (unint64_t *)&v227->__shared_owners_;
  v227->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C7180;
  v227->__shared_weak_owners_ = 0;
  v227[1].__vftable = (std::__shared_weak_count_vtbl *)v221;
  v229 = (std::__shared_weak_count *)*((_QWORD *)v221 + 5);
  if (v229)
  {
    if (v229->__shared_owners_ != -1)
      goto LABEL_355;
    do
      v230 = __ldxr(v228);
    while (__stxr(v230 + 1, v228));
    v231 = (unint64_t *)&v227->__shared_weak_owners_;
    do
      v232 = __ldxr(v231);
    while (__stxr(v232 + 1, v231));
    *((_QWORD *)v221 + 4) = v221;
    *((_QWORD *)v221 + 5) = v227;
    std::__shared_weak_count::__release_weak(v229);
  }
  else
  {
    do
      v233 = __ldxr(v228);
    while (__stxr(v233 + 1, v228));
    v234 = (unint64_t *)&v227->__shared_weak_owners_;
    do
      v235 = __ldxr(v234);
    while (__stxr(v235 + 1, v234));
    *((_QWORD *)v221 + 4) = v221;
    *((_QWORD *)v221 + 5) = v227;
  }
  do
    v236 = __ldaxr(v228);
  while (__stlxr(v236 - 1, v228));
  if (!v236)
  {
    ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
    std::__shared_weak_count::__release_weak(v227);
  }
LABEL_355:
  v237 = (std::__shared_weak_count *)v428[1];
  if (v428[1])
  {
    v238 = (unint64_t *)((char *)v428[1] + 8);
    do
      v239 = __ldaxr(v238);
    while (__stlxr(v239 - 1, v238));
    if (!v239)
    {
      ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
      std::__shared_weak_count::__release_weak(v237);
    }
  }
  v428[0] = v221;
  v428[1] = v227;
  v240 = (std::__shared_weak_count *)*((_QWORD *)&v433 + 1);
  if (*((_QWORD *)&v433 + 1))
  {
    v241 = (unint64_t *)(*((_QWORD *)&v433 + 1) + 8);
    do
      v242 = __ldaxr(v241);
    while (__stlxr(v242 - 1, v241));
    if (!v242)
    {
      ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
      std::__shared_weak_count::__release_weak(v240);
    }
  }
  v243 = v443;
  v443 = 0uLL;
  *(_OWORD *)&__dst[8] = *(_OWORD *)__p;
  *(_QWORD *)__dst = &off_24C9C62B8;
  *(void **)&__dst[24] = __p[2];
  memset(__p, 0, sizeof(__p));
  *(_OWORD *)v404 = *(_OWORD *)__src;
  v244 = __src[2];
  memset(__src, 0, 24);
  v405 = v243;
  v433 = 0uLL;
  v245 = v428[0];
  v246 = (char *)v428[1];
  *(_QWORD *)&v404[16] = v244;
  v406 = *(_OWORD *)v428;
  v428[0] = 0;
  v428[1] = 0;
  if (*((_QWORD *)&v406 + 1))
  {
    v247 = (unint64_t *)(v246 + 16);
    do
      v248 = __ldxr(v247);
    while (__stxr(v248 + 1, v247));
  }
  v407 = &off_24C9B4780;
  v249 = (_QWORD *)operator new();
  *v249 = &off_24C9C5E78;
  v249[1] = v245;
  v249[2] = v246;
  *(_QWORD *)&v408 = v249;
  v251 = *((_QWORD *)&v406 + 1);
  v250 = v406;
  if (!*((_QWORD *)&v406 + 1))
  {
    *((_QWORD *)&v408 + 1) = v406;
    v409 = 0;
    if ((_QWORD)v406)
      v255 = v406 + 16;
    else
      v255 = 0;
    goto LABEL_385;
  }
  v252 = (unint64_t *)(*((_QWORD *)&v406 + 1) + 16);
  do
    v253 = __ldxr(v252);
  while (__stxr(v253 + 1, v252));
  v254 = *((_QWORD *)&v406 + 1);
  *((_QWORD *)&v408 + 1) = v250;
  v409 = v251;
  if ((_QWORD)v406)
    v255 = v406 + 16;
  else
    v255 = 0;
  if (!*((_QWORD *)&v406 + 1))
  {
    v250 = v406;
LABEL_385:
    v258 = 0;
    v410 = &off_24C9C62E8;
    v411 = v255;
    goto LABEL_386;
  }
  v256 = (unint64_t *)(*((_QWORD *)&v406 + 1) + 16);
  do
    v257 = __ldxr(v256);
  while (__stxr(v257 + 1, v256));
  v258 = *((_QWORD *)&v406 + 1);
  v250 = v406;
  v410 = &off_24C9C62E8;
  *(_QWORD *)&v411 = v255;
  *((_QWORD *)&v411 + 1) = v254;
  if (*((_QWORD *)&v406 + 1))
  {
    v259 = (unint64_t *)(*((_QWORD *)&v406 + 1) + 16);
    do
      v260 = __ldxr(v259);
    while (__stxr(v260 + 1, v259));
  }
LABEL_386:
  if (v250)
    v261 = v250 + 24;
  else
    v261 = 0;
  v412 = &off_24C9B2310;
  *(_QWORD *)&v413 = v261;
  *((_QWORD *)&v413 + 1) = v258;
  if ((SHIBYTE(__src[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      goto LABEL_391;
LABEL_394:
    operator delete(__p[0]);
    v262 = (std::__shared_weak_count *)*((_QWORD *)&v441 + 1);
    if (!*((_QWORD *)&v441 + 1))
      goto LABEL_399;
    goto LABEL_395;
  }
  operator delete(__src[0]);
  if (SHIBYTE(__p[2]) < 0)
    goto LABEL_394;
LABEL_391:
  v262 = (std::__shared_weak_count *)*((_QWORD *)&v441 + 1);
  if (!*((_QWORD *)&v441 + 1))
    goto LABEL_399;
LABEL_395:
  v263 = (unint64_t *)&v262->__shared_owners_;
  do
    v264 = __ldaxr(v263);
  while (__stlxr(v264 - 1, v263));
  if (!v264)
  {
    ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
    std::__shared_weak_count::__release_weak(v262);
  }
LABEL_399:
  v265 = (std::__shared_weak_count *)*((_QWORD *)&v443 + 1);
  if (!*((_QWORD *)&v443 + 1))
    goto LABEL_403;
  v266 = (unint64_t *)(*((_QWORD *)&v443 + 1) + 8);
  do
    v267 = __ldaxr(v266);
  while (__stlxr(v267 - 1, v266));
  if (!v267)
  {
    ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
    std::__shared_weak_count::__release_weak(v265);
    if ((SHIBYTE(v430[2]) & 0x80000000) == 0)
    {
LABEL_404:
      if ((SHIBYTE(v431[2]) & 0x80000000) == 0)
        goto LABEL_405;
LABEL_409:
      operator delete(v431[0]);
      if (v401)
        goto LABEL_411;
      goto LABEL_410;
    }
  }
  else
  {
LABEL_403:
    if ((SHIBYTE(v430[2]) & 0x80000000) == 0)
      goto LABEL_404;
  }
  operator delete(v430[0]);
  if (SHIBYTE(v431[2]) < 0)
    goto LABEL_409;
LABEL_405:
  if (v401)
    goto LABEL_411;
LABEL_410:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_411:
  v268 = v436;
  if (*((_QWORD *)&v436 + 1))
  {
    v269 = (unint64_t *)(*((_QWORD *)&v436 + 1) + 8);
    do
      v270 = __ldxr(v269);
    while (__stxr(v270 + 1, v269));
  }
  if (v386)
    v271 = v386 + 112;
  else
    v271 = 0;
  *(_QWORD *)&v437 = v271;
  *((_QWORD *)&v437 + 1) = v387;
  if (v387)
  {
    v272 = (unint64_t *)&v387->__shared_owners_;
    do
      v273 = __ldxr(v272);
    while (__stxr(v273 + 1, v272));
  }
  if (v271[31] < 0)
  {
    sub_20E860C04(v430, *((void **)v271 + 1), *((_QWORD *)v271 + 2));
  }
  else
  {
    v274 = *(_OWORD *)(v271 + 8);
    v430[2] = *((void **)v271 + 3);
    *(_OWORD *)v430 = v274;
  }
  if (v386[167] < 0)
  {
    sub_20E860C04(v428, *((void **)v386 + 18), *((_QWORD *)v386 + 19));
  }
  else
  {
    *(_OWORD *)v428 = *((_OWORD *)v386 + 9);
    v429 = (void *)*((_QWORD *)v386 + 20);
  }
  v441 = v268;
  *(_QWORD *)&v440 = v271;
  *((_QWORD *)&v440 + 1) = v387;
  if (v387)
  {
    v275 = (unint64_t *)&v387->__shared_owners_;
    do
      v276 = __ldxr(v275);
    while (__stxr(v276 + 1, v275));
  }
  if (SHIBYTE(v430[2]) < 0)
  {
    sub_20E860C04(__src, v430[0], (unint64_t)v430[1]);
  }
  else
  {
    *(_OWORD *)__src = *(_OWORD *)v430;
    __src[2] = v430[2];
  }
  if (SHIBYTE(v429) < 0)
  {
    sub_20E860C04(v431, v428[0], (unint64_t)v428[1]);
  }
  else
  {
    *(_OWORD *)v431 = *(_OWORD *)v428;
    v431[2] = v429;
  }
  *(void **)((char *)v442 + 7) = *(void **)((char *)&v430[1] + 7);
  v277 = v430[0];
  v278 = v430[1];
  HIBYTE(v442[0]) = HIBYTE(v430[1]);
  v279 = HIBYTE(v430[2]);
  memset(v430, 0, 24);
  v444[0] = v278;
  *(_QWORD *)((char *)v444 + 7) = *(_QWORD *)((char *)v442 + 7);
  *(_QWORD *)((char *)v442 + 7) = 0;
  v442[0] = 0;
  v443 = v268;
  if (*((_QWORD *)&v268 + 1))
  {
    v280 = (unint64_t *)(*((_QWORD *)&v268 + 1) + 8);
    do
      v281 = __ldxr(v280);
    while (__stxr(v281 + 1, v280));
  }
  v282 = operator new();
  v445[0] = v444[0];
  *(_QWORD *)((char *)v445 + 7) = *(_QWORD *)((char *)v444 + 7);
  v444[0] = 0;
  *(_QWORD *)((char *)v444 + 7) = 0;
  v283 = v443;
  v443 = 0uLL;
  *(_BYTE *)(v282 + 8) = 1;
  *(_QWORD *)(v282 + 32) = 0;
  *(_QWORD *)(v282 + 40) = 0;
  *(_QWORD *)v282 = &off_24C9C71D0;
  *(_QWORD *)(v282 + 16) = &unk_24C9C7248;
  *(_QWORD *)(v282 + 24) = &unk_24C9C7288;
  v284 = v445[0];
  *(_QWORD *)(v282 + 63) = *(_QWORD *)((char *)v445 + 7);
  *(_QWORD *)(v282 + 48) = v277;
  *(_QWORD *)(v282 + 56) = v284;
  *(_BYTE *)(v282 + 71) = v279;
  v445[0] = 0;
  *(_QWORD *)((char *)v445 + 7) = 0;
  *(_OWORD *)(v282 + 72) = v283;
  v433 = 0uLL;
  v285 = (_QWORD *)operator new();
  *v285 = &off_24C9C7370;
  v285[1] = v271;
  v285[2] = v387;
  v440 = 0uLL;
  *(_QWORD *)(v282 + 144) = 0;
  *(_QWORD *)(v282 + 88) = v285;
  *(_QWORD *)(v282 + 96) = v282 + 96;
  *(_QWORD *)(v282 + 104) = v282 + 96;
  *(_QWORD *)(v282 + 112) = 0;
  *(_QWORD *)(v282 + 120) = v282 + 120;
  *(_QWORD *)(v282 + 128) = v282 + 120;
  *(_QWORD *)(v282 + 136) = 0;
  if (!*(_QWORD *)(v282 + 72)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v286 = (std::__shared_weak_count *)operator new();
  v286->__shared_owners_ = 0;
  v287 = (unint64_t *)&v286->__shared_owners_;
  v286->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C7810;
  v286->__shared_weak_owners_ = 0;
  v286[1].__vftable = (std::__shared_weak_count_vtbl *)v282;
  v288 = *(std::__shared_weak_count **)(v282 + 40);
  if (v288)
  {
    if (v288->__shared_owners_ != -1)
      goto LABEL_453;
    do
      v289 = __ldxr(v287);
    while (__stxr(v289 + 1, v287));
    v290 = (unint64_t *)&v286->__shared_weak_owners_;
    do
      v291 = __ldxr(v290);
    while (__stxr(v291 + 1, v290));
    *(_QWORD *)(v282 + 32) = v282;
    *(_QWORD *)(v282 + 40) = v286;
    std::__shared_weak_count::__release_weak(v288);
  }
  else
  {
    do
      v292 = __ldxr(v287);
    while (__stxr(v292 + 1, v287));
    v293 = (unint64_t *)&v286->__shared_weak_owners_;
    do
      v294 = __ldxr(v293);
    while (__stxr(v294 + 1, v293));
    *(_QWORD *)(v282 + 32) = v282;
    *(_QWORD *)(v282 + 40) = v286;
  }
  do
    v295 = __ldaxr(v287);
  while (__stlxr(v295 - 1, v287));
  if (!v295)
  {
    ((void (*)(std::__shared_weak_count *))v286->__on_zero_shared)(v286);
    std::__shared_weak_count::__release_weak(v286);
  }
LABEL_453:
  v296 = (std::__shared_weak_count *)*((_QWORD *)&v433 + 1);
  if (*((_QWORD *)&v433 + 1))
  {
    v297 = (unint64_t *)(*((_QWORD *)&v433 + 1) + 8);
    do
      v298 = __ldaxr(v297);
    while (__stlxr(v298 - 1, v297));
    if (!v298)
    {
      ((void (*)(std::__shared_weak_count *))v296->__on_zero_shared)(v296);
      std::__shared_weak_count::__release_weak(v296);
    }
  }
  *(_QWORD *)&v433 = v282;
  *((_QWORD *)&v433 + 1) = v286;
  v299 = (std::__shared_weak_count *)*((_QWORD *)&v443 + 1);
  if (*((_QWORD *)&v443 + 1))
  {
    v300 = (unint64_t *)(*((_QWORD *)&v443 + 1) + 8);
    do
      v301 = __ldaxr(v300);
    while (__stlxr(v301 - 1, v300));
    if (!v301)
    {
      ((void (*)(std::__shared_weak_count *))v299->__on_zero_shared)(v299);
      std::__shared_weak_count::__release_weak(v299);
    }
  }
  v302 = v441;
  v441 = 0uLL;
  __p[0] = &off_24C9C6320;
  *(_OWORD *)&__p[1] = *(_OWORD *)__src;
  v389 = __src[2];
  memset(__src, 0, 24);
  v390 = *(_OWORD *)v431;
  v391 = v431[2];
  memset(v431, 0, 24);
  v392 = v302;
  v443 = 0uLL;
  v303 = v433;
  v393 = v433;
  v433 = 0uLL;
  if (*((_QWORD *)&v393 + 1))
  {
    v304 = (unint64_t *)(*((_QWORD *)&v303 + 1) + 16);
    do
      v305 = __ldxr(v304);
    while (__stxr(v305 + 1, v304));
  }
  v394 = &off_24C9C6350;
  v306 = operator new();
  *(_QWORD *)v306 = &off_24C9C7860;
  *(_OWORD *)(v306 + 8) = v303;
  *(_QWORD *)&v395 = v306;
  v308 = *((_QWORD *)&v393 + 1);
  v307 = v393;
  if (!*((_QWORD *)&v393 + 1))
  {
    *((_QWORD *)&v395 + 1) = v393;
    v396 = 0;
    if ((_QWORD)v393)
      v312 = v393 + 16;
    else
      v312 = 0;
    goto LABEL_483;
  }
  v309 = (unint64_t *)(*((_QWORD *)&v393 + 1) + 16);
  do
    v310 = __ldxr(v309);
  while (__stxr(v310 + 1, v309));
  v311 = *((_QWORD *)&v393 + 1);
  *((_QWORD *)&v395 + 1) = v307;
  v396 = v308;
  if ((_QWORD)v393)
    v312 = v393 + 16;
  else
    v312 = 0;
  if (!*((_QWORD *)&v393 + 1))
  {
    v307 = v393;
LABEL_483:
    v315 = 0;
    v397 = &off_24C9B2520;
    v398 = v312;
    goto LABEL_484;
  }
  v313 = (unint64_t *)(*((_QWORD *)&v393 + 1) + 16);
  do
    v314 = __ldxr(v313);
  while (__stxr(v314 + 1, v313));
  v315 = *((_QWORD *)&v393 + 1);
  v307 = v393;
  v397 = &off_24C9B2520;
  *(_QWORD *)&v398 = v312;
  *((_QWORD *)&v398 + 1) = v311;
  if (*((_QWORD *)&v393 + 1))
  {
    v316 = (unint64_t *)(*((_QWORD *)&v393 + 1) + 16);
    do
      v317 = __ldxr(v316);
    while (__stxr(v317 + 1, v316));
  }
LABEL_484:
  if (v307)
    v318 = v307 + 24;
  else
    v318 = 0;
  v399 = &off_24C9B2310;
  *(_QWORD *)&v400 = v318;
  *((_QWORD *)&v400 + 1) = v315;
  if ((SHIBYTE(v431[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__src[2]) & 0x80000000) == 0)
      goto LABEL_489;
LABEL_492:
    operator delete(__src[0]);
    v319 = (std::__shared_weak_count *)*((_QWORD *)&v440 + 1);
    if (!*((_QWORD *)&v440 + 1))
      goto LABEL_497;
    goto LABEL_493;
  }
  operator delete(v431[0]);
  if (SHIBYTE(__src[2]) < 0)
    goto LABEL_492;
LABEL_489:
  v319 = (std::__shared_weak_count *)*((_QWORD *)&v440 + 1);
  if (!*((_QWORD *)&v440 + 1))
    goto LABEL_497;
LABEL_493:
  v320 = (unint64_t *)&v319->__shared_owners_;
  do
    v321 = __ldaxr(v320);
  while (__stlxr(v321 - 1, v320));
  if (!v321)
  {
    ((void (*)(std::__shared_weak_count *))v319->__on_zero_shared)(v319);
    std::__shared_weak_count::__release_weak(v319);
  }
LABEL_497:
  v322 = (std::__shared_weak_count *)*((_QWORD *)&v441 + 1);
  if (!*((_QWORD *)&v441 + 1))
    goto LABEL_501;
  v323 = (unint64_t *)(*((_QWORD *)&v441 + 1) + 8);
  do
    v324 = __ldaxr(v323);
  while (__stlxr(v324 - 1, v323));
  if (!v324)
  {
    ((void (*)(std::__shared_weak_count *))v322->__on_zero_shared)(v322);
    std::__shared_weak_count::__release_weak(v322);
    if ((SHIBYTE(v429) & 0x80000000) == 0)
    {
LABEL_502:
      if ((SHIBYTE(v430[2]) & 0x80000000) == 0)
        goto LABEL_503;
      goto LABEL_507;
    }
  }
  else
  {
LABEL_501:
    if ((SHIBYTE(v429) & 0x80000000) == 0)
      goto LABEL_502;
  }
  operator delete(v428[0]);
  if ((SHIBYTE(v430[2]) & 0x80000000) == 0)
  {
LABEL_503:
    if ((_QWORD)v437)
      goto LABEL_509;
    goto LABEL_508;
  }
LABEL_507:
  operator delete(v430[0]);
  if ((_QWORD)v437)
    goto LABEL_509;
LABEL_508:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_509:
  v325 = operator new();
  *(_QWORD *)v325 = &off_24C9C6218;
  *(_QWORD *)(v325 + 24) = *(_QWORD *)&v417[16];
  v326 = *(_OWORD *)v417;
  memset(v417, 0, sizeof(v417));
  *(_QWORD *)(v325 + 48) = *(_QWORD *)&v418[16];
  v327 = *(_OWORD *)v418;
  memset(v418, 0, sizeof(v418));
  v328 = v419;
  v419 = 0uLL;
  v329 = v420;
  v420 = 0uLL;
  v330 = v422;
  v331 = v423;
  *((_QWORD *)&v422 + 1) = 0;
  v423 = 0;
  *(_QWORD *)(v325 + 112) = v331;
  *(_QWORD *)(v325 + 120) = &off_24C9C6248;
  v332 = v425;
  v333 = v427;
  v427 = 0uLL;
  *(_QWORD *)(v325 + 168) = &off_24C9C62B8;
  *(_QWORD *)(v325 + 192) = *(_QWORD *)&__dst[24];
  v334 = *(_OWORD *)&__dst[8];
  memset(&__dst[8], 0, 24);
  *(_QWORD *)(v325 + 216) = *(_QWORD *)&v404[16];
  v335 = *(_OWORD *)v404;
  memset(v404, 0, sizeof(v404));
  v336 = v405;
  v405 = 0uLL;
  v337 = v406;
  v406 = 0uLL;
  *(_QWORD *)(v325 + 256) = &off_24C9B4780;
  v338 = v408;
  v339 = v409;
  *((_QWORD *)&v408 + 1) = 0;
  v409 = 0;
  *(_QWORD *)(v325 + 280) = v339;
  *(_QWORD *)(v325 + 288) = &off_24C9C62E8;
  v340 = v413;
  v413 = 0uLL;
  *(_QWORD *)(v325 + 336) = &off_24C9C6320;
  *(_QWORD *)(v325 + 360) = v389;
  *(_OWORD *)(v325 + 344) = *(_OWORD *)&__p[1];
  __p[1] = 0;
  __p[2] = 0;
  v389 = 0;
  *(_QWORD *)(v325 + 384) = v391;
  v341 = v390;
  v390 = 0uLL;
  v391 = 0;
  v342 = v392;
  v392 = 0uLL;
  v343 = v393;
  v393 = 0uLL;
  *(_QWORD *)(v325 + 424) = &off_24C9C6350;
  *(_OWORD *)(v325 + 264) = v338;
  *(_OWORD *)(v325 + 296) = v411;
  *(_OWORD *)(v325 + 392) = v342;
  *(_OWORD *)(v325 + 408) = v343;
  *(_OWORD *)(v325 + 488) = v400;
  v344 = v395;
  v345 = v396;
  *((_QWORD *)&v395 + 1) = 0;
  v396 = 0;
  *(_QWORD *)(v325 + 448) = v345;
  *(_QWORD *)(v325 + 456) = &off_24C9B2520;
  *(_QWORD *)(v325 + 144) = &off_24C9B2310;
  *(_QWORD *)(v325 + 312) = &off_24C9B2310;
  *(_QWORD *)(v325 + 480) = &off_24C9B2310;
  v400 = 0uLL;
  *(_OWORD *)(v325 + 8) = v326;
  *(_OWORD *)(v325 + 32) = v327;
  *(_OWORD *)(v325 + 56) = v328;
  *(_OWORD *)(v325 + 72) = v329;
  *(_OWORD *)(v325 + 96) = v330;
  *(_OWORD *)(v325 + 128) = v332;
  *(_OWORD *)(v325 + 152) = v333;
  *(_OWORD *)(v325 + 176) = v334;
  *(_OWORD *)(v325 + 200) = v335;
  *(_OWORD *)(v325 + 224) = v336;
  *(_OWORD *)(v325 + 240) = v337;
  *(_OWORD *)(v325 + 320) = v340;
  *(_OWORD *)(v325 + 368) = v341;
  *(_QWORD *)(v325 + 88) = &off_24C9C5B88;
  *(_OWORD *)(v325 + 432) = v344;
  *(_OWORD *)(v325 + 464) = v398;
  *(_QWORD *)(v384 + 160) = v325;
  *(_QWORD *)&v422 = 0;
  v425 = 0uLL;
  v411 = 0uLL;
  *(_QWORD *)&v408 = 0;
  v398 = 0uLL;
  *(_QWORD *)&v395 = 0;
  sub_20EBBD28C((uint64_t)__p);
  v346 = (std::__shared_weak_count *)*((_QWORD *)&v437 + 1);
  if (*((_QWORD *)&v437 + 1))
  {
    v347 = (unint64_t *)(*((_QWORD *)&v437 + 1) + 8);
    do
      v348 = __ldaxr(v347);
    while (__stlxr(v348 - 1, v347));
    if (!v348)
    {
      ((void (*)(std::__shared_weak_count *))v346->__on_zero_shared)(v346);
      std::__shared_weak_count::__release_weak(v346);
    }
  }
  sub_20EBBD470((uint64_t)__dst);
  v349 = v402;
  if (v402)
  {
    v350 = (unint64_t *)&v402->__shared_owners_;
    do
      v351 = __ldaxr(v350);
    while (__stlxr(v351 - 1, v350));
    if (!v351)
    {
      ((void (*)(std::__shared_weak_count *))v349->__on_zero_shared)(v349);
      std::__shared_weak_count::__release_weak(v349);
    }
  }
  v352 = (std::__shared_weak_count *)*((_QWORD *)&v438 + 1);
  if (*((_QWORD *)&v438 + 1))
  {
    v353 = (unint64_t *)(*((_QWORD *)&v438 + 1) + 8);
    do
      v354 = __ldaxr(v353);
    while (__stlxr(v354 - 1, v353));
    if (!v354)
    {
      ((void (*)(std::__shared_weak_count *))v352->__on_zero_shared)(v352);
      std::__shared_weak_count::__release_weak(v352);
    }
  }
  sub_20EBBD654((uint64_t)&v416);
  v355 = (std::__shared_weak_count *)*((_QWORD *)&v439 + 1);
  if (*((_QWORD *)&v439 + 1))
  {
    v356 = (unint64_t *)(*((_QWORD *)&v439 + 1) + 8);
    do
      v357 = __ldaxr(v356);
    while (__stlxr(v357 - 1, v356));
    if (!v357)
    {
      ((void (*)(std::__shared_weak_count *))v355->__on_zero_shared)(v355);
      std::__shared_weak_count::__release_weak(v355);
    }
  }
  v358 = v415;
  if (v415)
  {
    v359 = (unint64_t *)&v415->__shared_owners_;
    do
      v360 = __ldaxr(v359);
    while (__stlxr(v360 - 1, v359));
    if (!v360)
    {
      ((void (*)(std::__shared_weak_count *))v358->__on_zero_shared)(v358);
      std::__shared_weak_count::__release_weak(v358);
    }
  }
  v361 = (std::__shared_weak_count *)*((_QWORD *)&v436 + 1);
  if (*((_QWORD *)&v436 + 1))
  {
    v362 = (unint64_t *)(*((_QWORD *)&v436 + 1) + 8);
    do
      v363 = __ldaxr(v362);
    while (__stlxr(v363 - 1, v362));
    if (!v363)
    {
      ((void (*)(std::__shared_weak_count *))v361->__on_zero_shared)(v361);
      std::__shared_weak_count::__release_weak(v361);
    }
  }
  if (v387)
  {
    v364 = (unint64_t *)&v387->__shared_owners_;
    do
      v365 = __ldaxr(v364);
    while (__stlxr(v365 - 1, v364));
    if (!v365)
    {
      ((void (*)(std::__shared_weak_count *))v387->__on_zero_shared)(v387);
      std::__shared_weak_count::__release_weak(v387);
    }
  }
  v366 = (std::__shared_weak_count *)*((_QWORD *)&v434 + 1);
  if (*((_QWORD *)&v434 + 1))
  {
    v367 = (unint64_t *)(*((_QWORD *)&v434 + 1) + 8);
    do
      v368 = __ldaxr(v367);
    while (__stlxr(v368 - 1, v367));
    if (!v368)
    {
      ((void (*)(std::__shared_weak_count *))v366->__on_zero_shared)(v366);
      std::__shared_weak_count::__release_weak(v366);
    }
  }
  v369 = (std::__shared_weak_count *)*((_QWORD *)&v435 + 1);
  if (*((_QWORD *)&v435 + 1))
  {
    v370 = (unint64_t *)(*((_QWORD *)&v435 + 1) + 8);
    do
      v371 = __ldaxr(v370);
    while (__stlxr(v371 - 1, v370));
    if (!v371)
    {
      ((void (*)(std::__shared_weak_count *))v369->__on_zero_shared)(v369);
      std::__shared_weak_count::__release_weak(v369);
    }
  }
  if (v385)
  {
    v372 = (unint64_t *)&v385->__shared_owners_;
    do
      v373 = __ldaxr(v372);
    while (__stlxr(v373 - 1, v372));
    if (!v373)
    {
      ((void (*)(std::__shared_weak_count *))v385->__on_zero_shared)(v385);
      std::__shared_weak_count::__release_weak(v385);
    }
  }
  v374 = *(_QWORD *)(v384 + 80);
  v375 = *(_QWORD *)(v384 + 160);
  v416 = &off_24C9C5B88;
  (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(v375 + 96) + 16))(v417);
  (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)(v374 + 120) + 16))(v374 + 120, &v416);
  v376 = *(_QWORD *)v417;
  v416 = &off_24C9C5B88;
  *(_QWORD *)v417 = 0;
  if (v376)
    (*(void (**)(uint64_t))(*(_QWORD *)v376 + 8))(v376);
  if (!*(_BYTE *)v384)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v384 + 80) + 264) + 32))(*(_QWORD *)(*(_QWORD *)(v384 + 80) + 264));
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v384 + 80) + 96) + 32))(*(_QWORD *)(*(_QWORD *)(v384 + 80) + 96));
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v384 + 160) + 96) + 32))(*(_QWORD *)(*(_QWORD *)(v384 + 160) + 96));
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v384 + 160) + 264) + 32))(*(_QWORD *)(*(_QWORD *)(v384 + 160) + 264));
  }
  return v384;
}

void sub_20EBABBA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, void **a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,void *a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,void *a53)
{
  uint64_t v53;

  if (SLOBYTE(STACK[0x337]) < 0)
  {
    operator delete((void *)STACK[0x320]);
    sub_20E86665C(v53 - 208);
    sub_20E86665C(v53 - 192);
    if ((SLOBYTE(STACK[0x2D7]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x2F7]) & 0x80000000) == 0)
      {
LABEL_5:
        sub_20E86665C(v53 - 256);
        sub_20E86665C((uint64_t)&a27);
        sub_20EBBD470((uint64_t)&a53);
        sub_20E86665C((uint64_t)&a51);
        sub_20E86665C(v53 - 240);
        sub_20EBBD654((uint64_t)&STACK[0x218]);
        sub_20E86665C(v53 - 224);
        sub_20E86665C((uint64_t)&STACK[0x208]);
        sub_20E86665C((uint64_t)&STACK[0x370]);
        sub_20E86665C(a19);
        if (*(char *)(a22 + 143) < 0)
          operator delete(*a17);
        if (*(char *)(a22 + 119) < 0)
          operator delete(*a18);
        sub_20E86665C((uint64_t)&a25);
        sub_20E86665C((uint64_t)&STACK[0x350]);
        sub_20E86665C((uint64_t)&STACK[0x360]);
        sub_20E86665C((uint64_t)&a23);
        sub_20EBBD998(a12);
        _Unwind_Resume(a1);
      }
LABEL_4:
      operator delete((void *)STACK[0x2E0]);
      goto LABEL_5;
    }
  }
  else
  {
    sub_20E86665C(v53 - 208);
    sub_20E86665C(v53 - 192);
    if ((SLOBYTE(STACK[0x2D7]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0x2C0]);
  if ((SLOBYTE(STACK[0x2F7]) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_20EBAC158()
{
  void *v0;
  int v1;

  sub_20E86665C((uint64_t)&STACK[0x340]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x20EBAC044);
}

void sub_20EBAC174()
{
  std::__shared_weak_count *v0;
  uint64_t v1;
  uint64_t v2;

  if (v0)
  {
    std::__shared_weak_count::__release_weak(v0);
    sub_20E86665C(v1);
    sub_20E86665C(v2);
    if ((SLOBYTE(STACK[0x24F]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x237]) & 0x80000000) == 0)
      {
LABEL_5:
        sub_20E86665C((uint64_t)&STACK[0x2C0]);
        sub_20E86665C((uint64_t)&STACK[0x2E0]);
        JUMPOUT(0x20EBAC290);
      }
LABEL_4:
      operator delete((void *)STACK[0x220]);
      goto LABEL_5;
    }
  }
  else
  {
    sub_20E86665C(v1);
    sub_20E86665C(v2);
    if ((SLOBYTE(STACK[0x24F]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0x238]);
  if ((SLOBYTE(STACK[0x237]) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_20EBAC1F0()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_20E86665C((uint64_t)&STACK[0x2E0]);
  JUMPOUT(0x20EBAC288);
}

void sub_20EBAC210()
{
  uint64_t v0;
  uint64_t v1;

  MEMORY[0x212BC6398](v0, 0x1022C400958DFA3);
  sub_20EA1ECAC(v1 + 16);
  JUMPOUT(0x20EBAC244);
}

void sub_20EBAC310()
{
  int v0;
  void *v1;

  sub_20E86665C((uint64_t)&STACK[0x2C0]);
  if (v0 < 0)
    operator delete(v1);
  JUMPOUT(0x20EBAC290);
}

void sub_20EBAC32C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  std::__shared_weak_count *v23;
  void *v25;

  std::__shared_weak_count::~__shared_weak_count(v23);
  operator delete(v25);
  sub_20E86665C((uint64_t)&a23);
  sub_20EBBD998(a12);
  _Unwind_Resume(a1);
}

void sub_20EBAC354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_20E86665C((uint64_t)va);
  sub_20EBBD998(a5);
  _Unwind_Resume(a1);
}

void sub_20EBAC380(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62,void *a63)
{
  char a68;
  uint64_t v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  uint64_t v71;

  if (v69)
  {
    std::__shared_weak_count::__release_weak(v69);
    sub_20E86665C(v70);
    sub_20E86665C(v68);
    if ((a68 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a62 & 0x80000000) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    sub_20E86665C(v70);
    sub_20E86665C(v68);
    if ((a68 & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete(a63);
  if ((a62 & 0x80000000) == 0)
  {
LABEL_5:
    sub_20E86665C((uint64_t)&STACK[0x2E0]);
    sub_20E86665C((uint64_t)&STACK[0x300]);
    sub_20E9AF634((uint64_t)&STACK[0x2C0]);
    sub_20E86665C(v71 - 160);
    sub_20E9AF634((uint64_t)&STACK[0x340]);
    if (SLOBYTE(STACK[0x337]) < 0)
    {
      operator delete((void *)STACK[0x320]);
      if ((a34 & 0x80000000) == 0)
      {
LABEL_12:
        sub_20E86665C(v71 - 240);
        sub_20E9AF634(v71 - 224);
        sub_20EBAF3B8((uint64_t)&STACK[0x218]);
        JUMPOUT(0x20EBAC680);
      }
    }
    else if ((a34 & 0x80000000) == 0)
    {
      goto LABEL_12;
    }
    operator delete(a29);
    goto LABEL_12;
  }
LABEL_4:
  operator delete(__p);
  goto LABEL_5;
}

void sub_20EBAC52C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  std::__shared_weak_count *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  if (v61)
  {
    std::__shared_weak_count::__release_weak(v61);
    sub_20E86665C(v63);
    sub_20E86665C(v62);
    if ((SLOBYTE(STACK[0x24F]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x237]) & 0x80000000) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    sub_20E86665C(v63);
    sub_20E86665C(v62);
    if ((SLOBYTE(STACK[0x24F]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0x238]);
  if ((SLOBYTE(STACK[0x237]) & 0x80000000) == 0)
  {
LABEL_5:
    sub_20E86665C((uint64_t)&STACK[0x300]);
    sub_20E86665C((uint64_t)&STACK[0x320]);
    sub_20E9AF634((uint64_t)&STACK[0x2E0]);
    sub_20E86665C((uint64_t)&STACK[0x340]);
    sub_20E9AF634((uint64_t)&STACK[0x2C0]);
    if (a34 < 0)
    {
      operator delete(a29);
      if ((a61 & 0x80000000) == 0)
      {
LABEL_12:
        sub_20E86665C((uint64_t)&STACK[0x208]);
        sub_20E9AF634(v64 - 208);
        sub_20E9AF634(v64 - 192);
        sub_20E86665C(a11);
        if (*(char *)(a22 + 63) < 0)
        {
          operator delete(*a9);
          if ((*(char *)(a22 + 39) & 0x80000000) == 0)
          {
LABEL_14:
            sub_20E86665C((uint64_t)&a54);
            sub_20E86665C((uint64_t)&a27);
            _Unwind_Resume(a1);
          }
        }
        else if ((*(char *)(a22 + 39) & 0x80000000) == 0)
        {
          goto LABEL_14;
        }
        operator delete(*a10);
        sub_20E86665C((uint64_t)&a54);
        sub_20E86665C((uint64_t)&a27);
        _Unwind_Resume(a1);
      }
    }
    else if ((a61 & 0x80000000) == 0)
    {
      goto LABEL_12;
    }
    operator delete(a56);
    goto LABEL_12;
  }
LABEL_4:
  operator delete((void *)STACK[0x220]);
  goto LABEL_5;
}

void sub_20EBAC750()
{
  std::__shared_weak_count *v0;
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(v0);
  operator delete(v1);
  JUMPOUT(0x20EBAC698);
}

void sub_20EBAC764()
{
  JUMPOUT(0x20EBAC698);
}

void sub_20EBAC76C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_20EBAC7A8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C5AA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EBAC7B8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C5AA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EBAC7E8(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_20EBAC7F8(uint64_t a1)
{
  sub_20EBBD998(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EBAC824(uint64_t a1)
{
  sub_20EBAF3B8(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EBAC848(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9C5B50;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EBAC880(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9C5B50;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20EBAC8C8(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C9C5B88;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C9C5B88;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EBAC99C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EBAC9C8(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9C5B88;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20EBACA08(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9C5B88;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EBACA58(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_20EBACA68(uint64_t a1)
{
  sub_20EBAF1D4(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EBACA8C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9C5BF0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20EBACACC(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9C5BF0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EBACB1C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_20EBACB30(uint64_t a1)
{
  sub_20EBAD358(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EBACB54(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    LOBYTE(v5) = 0;
    v6 = 0;
    sub_20EBAD4B4(a1 + 11, a2, &v5);
    if (v6)
      sub_20EBADB0C(&v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_20EBACC10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    sub_20EBADB0C(&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_20EBACC38(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EBACC48(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EBACC54(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20EBACC64(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_20E8778D4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v13, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_20EBAD4B4(a1 + 11, a2, &v14);
  if (v15)
    sub_20EBADB0C(&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_20EBACDFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::__assoc_sub_state **v20;
  std::__assoc_sub_state *v21;
  std::exception_ptr v22;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v21 = *v20;
    if (v21)
    {
      std::exception_ptr::exception_ptr(&a20, &a19);
      v22.__ptr_ = &a20;
      std::__assoc_sub_state::set_exception(v21, v22);
      std::exception_ptr::~exception_ptr(&a20);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (a17 < 0)
        operator delete(__p);
      JUMPOUT(0x20EBACD28);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EBACE70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EBACED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13)
{
  std::recursive_mutex *v13;

  if ((_BYTE)a11)
    sub_20EBADB0C(&a10);
  std::recursive_mutex::unlock(v13);
  _Unwind_Resume(a1);
}

void sub_20EBACEF4(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_20EBACF78(uint64_t a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v4);
  v5 = operator new(0x20uLL);
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5[2] = &off_24C9C5B88;
  v5[3] = v6;
  v8 = *(_QWORD *)(a1 + 96);
  v7 = (_QWORD *)(a1 + 96);
  *v5 = v8;
  v5[1] = v7;
  *(_QWORD *)(v8 + 8) = v5;
  *v7 = v5;
  ++v7[2];
  std::recursive_mutex::unlock(v4);
}

void sub_20EBAD028(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EBAD03C(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20EBAD0CC(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EBAD0E0(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v4);
  sub_20EBADC34(a2, a1 + 96);
  std::recursive_mutex::unlock(v4);
}

void sub_20EBAD124(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EBAD138(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EBAD16C(uint64_t a1)
{
  return sub_20EBAD358(a1 - 16);
}

void sub_20EBAD174(uint64_t a1)
{
  sub_20EBAD358(a1 - 16);
  JUMPOUT(0x212BC6398);
}

void sub_20EBAD19C(uint64_t a1, uint64_t a2)
{
  sub_20EBACF78(a1 - 16, a2);
}

void sub_20EBAD1A4(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v4);
  sub_20EBADC34(a2, a1 + 80);
  std::recursive_mutex::unlock(v4);
}

void sub_20EBAD1E8(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EBAD1FC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EBAD230(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EBAD238(uint64_t a1)
{
  return sub_20EBAD358(a1 - 24);
}

void sub_20EBAD240(uint64_t a1)
{
  sub_20EBAD358(a1 - 24);
  JUMPOUT(0x212BC6398);
}

void sub_20EBAD268(uint64_t a1)
{
  sub_20EBAD03C(a1 - 24);
}

uint64_t sub_20EBAD270(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20EBAD278(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EBAD2E0(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EBAD348(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20EBAD358(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = &off_24C9C5C28;
  *(_QWORD *)(a1 + 16) = &unk_24C9C5CA0;
  *(_QWORD *)(a1 + 24) = &unk_24C9C5CE0;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v7 = *(_QWORD *)(a1 + 96);
    v8 = *(uint64_t **)(a1 + 104);
    v9 = *v8;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v8 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v8[1];
        (*(void (**)(uint64_t *))v8[2])(v8 + 2);
        operator delete(v8);
        v8 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20EBAD4B4(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *i;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *v17;
  std::exception_ptr v18;
  void *__p;
  char *v20;

  v6 = *a1;
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&__p, v6, a2);
  v7 = a1 + 1;
  for (i = (_QWORD *)a1[2]; i != v7; i = (_QWORD *)i[1])
    (*(void (**)(_QWORD *, void **))(i[2] + 16))(i + 2, &__p);
  if (*((_BYTE *)a3 + 8))
  {
    v9 = *a3;
    if (!*a3)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v9 + 24));
    if ((*(_BYTE *)(v9 + 136) & 1) != 0
      || (v18.__ptr_ = 0, v10 = *(_QWORD *)(v9 + 16), std::exception_ptr::~exception_ptr(&v18), v10))
    {
      sub_20E96CE78(2u);
    }
    sub_20EBAD838((_QWORD *)(v9 + 144), (__int128 **)&__p);
    *(_DWORD *)(v9 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v9 + 88));
    std::mutex::unlock((std::mutex *)(v9 + 24));
  }
  v11 = (char *)__p;
  if (__p)
  {
    v12 = v20;
    v13 = __p;
    if (v20 == __p)
    {
LABEL_24:
      v20 = v11;
      operator delete(v13);
      return;
    }
    while (1)
    {
      v14 = (std::__shared_weak_count *)*((_QWORD *)v12 - 1);
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
          break;
      }
      v17 = (void *)*((_QWORD *)v12 - 5);
      if (v17)
        goto LABEL_20;
LABEL_14:
      v12 -= 72;
      if (v12 == v11)
      {
        v13 = __p;
        goto LABEL_24;
      }
    }
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v17 = (void *)*((_QWORD *)v12 - 5);
    if (!v17)
      goto LABEL_14;
LABEL_20:
    *((_QWORD *)v12 - 4) = v17;
    operator delete(v17);
    goto LABEL_14;
  }
}

void sub_20EBAD67C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11, uint64_t a12, int a13, __int16 a14, char a15, unsigned __int8 a16, void *a17)
{
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;

  sub_20EBAD784(&a17);
  if (a2 == 1)
  {
    v19 = (uint64_t *)__cxa_begin_catch(a1);
    v20 = *v19;
    a10 = *(_QWORD *)(*(_QWORD *)(*v19 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a9 = (*(uint64_t (**)(void))(v20 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a10, "\n", "message: ", (const char *)&a9, "\n");
    if ((a16 & 0x80u) == 0)
      v21 = &a11;
    else
      v21 = a11;
    if ((a16 & 0x80u) == 0)
      v22 = a16;
    else
      v22 = a12;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v21, v22, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20EBAD758(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20EBAD778);
}

void **sub_20EBAD784(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 == v2)
    {
LABEL_14:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
          break;
      }
      v8 = (void *)*((_QWORD *)v3 - 5);
      if (v8)
        goto LABEL_10;
LABEL_4:
      v3 -= 72;
      if (v3 == v2)
      {
        v4 = *a1;
        goto LABEL_14;
      }
    }
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v8 = (void *)*((_QWORD *)v3 - 5);
    if (!v8)
      goto LABEL_4;
LABEL_10:
    *((_QWORD *)v3 - 4) = v8;
    operator delete(v8);
    goto LABEL_4;
  }
  return a1;
}

_QWORD *sub_20EBAD838(_QWORD *a1, __int128 **a2)
{
  __int128 *v3;
  __int128 *v4;
  int64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  __int128 v9;
  _BYTE *v10;
  _BYTE *v11;
  int64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;

  a1[2] = 0;
  *a1 = 0;
  a1[1] = 0;
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 != *a2)
  {
    v6 = 0x8E38E38E38E38E39 * (v5 >> 3);
    if (v6 >= 0x38E38E38E38E38FLL)
      sub_20E867F44();
    v7 = (char *)operator new(v5);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[72 * v6];
    v8 = v7;
    do
    {
      v9 = *v3;
      *(_OWORD *)(v8 + 12) = *(__int128 *)((char *)v3 + 12);
      *((_QWORD *)v8 + 4) = 0;
      *(_OWORD *)v8 = v9;
      *((_QWORD *)v8 + 5) = 0;
      *((_QWORD *)v8 + 6) = 0;
      v11 = (_BYTE *)*((_QWORD *)v3 + 4);
      v10 = (_BYTE *)*((_QWORD *)v3 + 5);
      v12 = v10 - v11;
      if (v10 != v11)
      {
        if (v12 < 0)
          sub_20E867F44();
        v13 = (char *)operator new(v10 - v11);
        *((_QWORD *)v8 + 4) = v13;
        *((_QWORD *)v8 + 5) = v13;
        v14 = &v13[32 * (v12 >> 5)];
        *((_QWORD *)v8 + 6) = v14;
        memcpy(v13, v11, v12);
        *((_QWORD *)v8 + 5) = v14;
      }
      *((_QWORD *)v8 + 7) = *((_QWORD *)v3 + 7);
      v15 = *((_QWORD *)v3 + 8);
      *((_QWORD *)v8 + 8) = v15;
      if (v15)
      {
        v16 = (unint64_t *)(v15 + 8);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      v3 = (__int128 *)((char *)v3 + 72);
      v8 += 72;
    }
    while (v3 != v4);
    a1[1] = v8;
  }
  return a1;
}

void sub_20EBAD9A8(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v3;
  char *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;

  v3 = (char *)*v1;
  if (!*v1)
LABEL_15:
    _Unwind_Resume(exception_object);
  v4 = (char *)v1[1];
  v5 = *v1;
  if (v4 == v3)
  {
LABEL_14:
    v1[1] = v3;
    operator delete(v5);
    goto LABEL_15;
  }
  while (1)
  {
    v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
        break;
    }
    v9 = (void *)*((_QWORD *)v4 - 5);
    if (v9)
      goto LABEL_10;
LABEL_4:
    v4 -= 72;
    if (v4 == v3)
    {
      v5 = *v1;
      goto LABEL_14;
    }
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  v9 = (void *)*((_QWORD *)v4 - 5);
  if (!v9)
    goto LABEL_4;
LABEL_10:
  *((_QWORD *)v4 - 4) = v9;
  operator delete(v9);
  goto LABEL_4;
}

uint64_t sub_20EBADA68(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (1)
    {
      if (v3 == v4)
        return a1;
      v5 = *(std::__shared_weak_count **)(v3 - 8);
      if (!v5)
        break;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (v7)
        break;
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      v8 = *(void **)(v3 - 40);
      if (v8)
        goto LABEL_11;
LABEL_4:
      v3 -= 72;
    }
    v8 = *(void **)(v3 - 40);
    if (!v8)
      goto LABEL_4;
LABEL_11:
    *(_QWORD *)(v3 - 32) = v8;
    operator delete(v8);
    goto LABEL_4;
  }
  return a1;
}

uint64_t *sub_20EBADB0C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x212BC5AF8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20EBADBF8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, std::logic_error a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::logic_error::~logic_error(&a11);
  JUMPOUT(0x20EBADB54);
}

char *sub_20EBADC34(int64x2_t *a1, uint64_t a2)
{
  unint64_t v4;
  char *result;
  char *v6;
  uint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  char *v10;
  uint64_t v11;
  int64x2_t *v12;

  v4 = *(_QWORD *)(a2 + 16);
  v10 = 0;
  v9 = 0uLL;
  if (v4)
  {
    if (v4 >> 61)
      sub_20E92CED8();
    result = (char *)operator new(8 * v4);
    v6 = &result[8 * v4];
    v9.i64[0] = (uint64_t)result;
    v9.i64[1] = (uint64_t)result;
    v10 = v6;
    v7 = *(_QWORD *)(a2 + 8);
    v12 = &v9;
    if (v7 != a2)
      goto LABEL_4;
LABEL_7:
    v8 = vdupq_n_s64((unint64_t)result);
    goto LABEL_8;
  }
  v6 = 0;
  result = 0;
  v7 = *(_QWORD *)(a2 + 8);
  v12 = &v9;
  if (v7 == a2)
    goto LABEL_7;
  do
  {
LABEL_4:
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 24) + 48))(*(_QWORD *)(v7 + 24));
    result = (char *)sub_20E9B2D04((uint64_t *)&v12, &v11);
    v7 = *(_QWORD *)(v7 + 8);
  }
  while (v7 != a2);
  v8 = v9;
  v6 = v10;
LABEL_8:
  *a1 = v8;
  a1[1].i64[0] = (uint64_t)v6;
  return result;
}

void sub_20EBADD10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EBADD34(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EBADD58(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EBADD70(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_INS1_3vio17feature_det"
                     "ection17VIOMLFeatureEventEEENS_6vectorINS6_8sem_node25SemanticsProcessingBundleENS_9allocatorISC_EE"
                     "EEvSF_Lb0EEEE27__shared_ptr_default_deleteISG_SG_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_INS1_3vio17"
                                "feature_detection17VIOMLFeatureEventEEENS_6vectorINS6_8sem_node25SemanticsProcessingBund"
                                "leENS_9allocatorISC_EEEEvSF_Lb0EEEE27__shared_ptr_default_deleteISG_SG_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_INS1_3vio17feature_detection17VIOMLFeatureEventEEENS_6vectorINS6_8sem_node25SemanticsProcessingBundleENS_9allocatorISC_EEEEvSF_Lb0EEEE27__shared_ptr_default_deleteISG_SG_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_INS1_3vio17feature_detection17VIOMLFeatureEventEEENS_6vectorINS6_8sem_node25SemanticsProcessingBundleENS_9allocatorISC_EEEEvSF_Lb0EEEE27__shared_ptr_default_deleteISG_SG_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EBADDE0(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EBADE0C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EBADE48@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9C5E78;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20EBADEB0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EBADF40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EBADF54(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EBADFE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EBADFF8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EBAE0BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EBAE0D0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EBAE194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EBAE1A8(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EBAE24C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EBAE264(uint64_t a1)
{
  sub_20EBAE9EC(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EBAE288(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _BYTE v5[8];
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    v5[0] = 0;
    v6 = 0;
    sub_20EBAEB34(a1 + 11, a2, (uint64_t)v5);
    if (v6)
      MEMORY[0x212BC623C](v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_20EBAE344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    MEMORY[0x212BC623C](&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_20EBAE36C(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EBAE37C(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EBAE388(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20EBAE398(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_20E8778D4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v13, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_20EBAEB34(a1 + 11, a2, (uint64_t)&v14);
  if (v15)
    MEMORY[0x212BC623C](&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_20EBAE530(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19)
{
  std::promise<void> *v19;
  std::exception_ptr v20;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v20.__ptr_ = &a19;
    std::promise<void>::set_exception(v19, v20);
    std::exception_ptr::~exception_ptr(&a19);
    std::runtime_error::~runtime_error(&a18);
    if (a17 < 0)
      operator delete(__p);
    JUMPOUT(0x20EBAE45CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EBAE5CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14)
{
  std::recursive_mutex *v14;

  if ((_BYTE)a12)
    MEMORY[0x212BC623C](&a10);
  std::recursive_mutex::unlock(v14);
  _Unwind_Resume(a1);
}

void sub_20EBAE5F0(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_20EBAE674(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 96);
  v4 = (_QWORD *)(a1 + 96);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20EBAE704(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EBAE718(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20EBAE7A8(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EBAE7BC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

void sub_20EBAE7F0(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EBAE824(uint64_t a1)
{
  return sub_20EBAE9EC(a1 - 16);
}

void sub_20EBAE82C(uint64_t a1)
{
  sub_20EBAE9EC(a1 - 16);
  JUMPOUT(0x212BC6398);
}

void sub_20EBAE854(uint64_t a1)
{
  sub_20EBAE674(a1 - 16);
}

void sub_20EBAE85C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

void sub_20EBAE890(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EBAE8C4(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EBAE8CC(uint64_t a1)
{
  return sub_20EBAE9EC(a1 - 24);
}

void sub_20EBAE8D4(uint64_t a1)
{
  sub_20EBAE9EC(a1 - 24);
  JUMPOUT(0x212BC6398);
}

void sub_20EBAE8FC(uint64_t a1)
{
  sub_20EBAE718(a1 - 24);
}

uint64_t sub_20EBAE904(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20EBAE90C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EBAE974(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EBAE9DC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20EBAE9EC(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = &off_24C9C5EE0;
  *(_QWORD *)(a1 + 16) = &unk_24C9C5F58;
  *(_QWORD *)(a1 + 24) = &unk_24C9C5F98;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v8 = *(_QWORD *)(a1 + 96);
    v7 = *(uint64_t **)(a1 + 104);
    v9 = *v7;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v8 + 8);
    **(_QWORD **)(v8 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v7 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v7[1];
        operator delete(v7);
        v7 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20EBAEB34(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = *a1;
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 276, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  if (*(_BYTE *)(a3 + 8))
    std::promise<void>::set_value((std::promise<void> *)a3);
}

void sub_20EBAEBCC()
{
  __break(1u);
}

void sub_20EBAEC78(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20EBAEC98);
}

void sub_20EBAECA8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EBAECCC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EBAECE4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_INS1_3vio8cv_types14Se"
                     "manticsFrameEEEvvvLb0EEEE27__shared_ptr_default_deleteISA_SA_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_INS1_3vio8c"
                                "v_types14SemanticsFrameEEEvvvLb0EEEE27__shared_ptr_default_deleteISA_SA_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_INS1_3vio8cv_types14SemanticsFrameEEEvvvLb0EEEE27__shared_ptr_default_deleteISA_SA_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_INS1_3vio8cv_types14SemanticsFrameEEEvvvLb0EEEE27__shared_ptr_default_deleteISA_SA_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EBAED54(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EBAED80(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EBAEDBC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9C6120;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20EBAEE24(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EBAEEB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EBAEEC8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EBAEF58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EBAEF6C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EBAF030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EBAF044(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EBAF108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EBAF11C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EBAF1C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EBAF1D4(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9C5BC0;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9B2520;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9C5BF0;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20EBAF3B8(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9C5B20;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9C5B50;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9B4780;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20EBAF59C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C6198;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EBAF5AC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C6198;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EBAF5DC(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_20EBAF5EC(uint64_t a1)
{
  sub_20EBBD838(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EBAF61C(uint64_t a1)
{
  sub_20EBBD654(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EBAF640(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9C6248;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EBAF678(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9C6248;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20EBAF6C0(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C9C6280;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C9C6280;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EBAF794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EBAF7C0(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9C6280;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20EBAF800(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9C6280;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EBAF850(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_20EBAF860(uint64_t a1)
{
  sub_20EBBD470(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EBAF884(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9C62E8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EBAF8BC(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9C62E8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20EBAF904(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C9B4780;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C9B4780;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EBAF9D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EBAFA04(uint64_t a1)
{
  sub_20EBBD28C(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EBAFA28(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9C6350;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20EBAFA68(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9C6350;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EBAFAB8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_20EBAFACC(uint64_t a1)
{
  sub_20EBB1538(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EBAFAF0(_QWORD *a1, __int128 **a2)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count **v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::mutex **v24;
  uint64_t **v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_weak_owners;
  unint64_t v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t *v46;
  unint64_t v47;
  char *v48;
  __int128 v49;
  __int128 *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  void *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  void *v58;
  std::__shared_weak_count *v59[2];
  void *__p[2];
  uint64_t v61;
  std::__shared_weak_count *v62;
  std::__shared_weak_count *v63;
  __int128 v64;
  uint64_t v65;
  __int128 *v66;
  _BYTE v67[24];
  _BYTE *v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (!a1[18])
  {
    v25 = (uint64_t **)a1[9];
    *(_OWORD *)v59 = 0uLL;
    v26 = (std::__shared_weak_count *)a1[5];
    if (v26)
    {
      v27 = std::__shared_weak_count::lock(v26);
      if (v27)
      {
        v28 = v27;
        v29 = (std::__shared_weak_count *)a1[4];
        p_shared_weak_owners = (unint64_t *)&v27->__shared_weak_owners_;
        do
          v31 = __ldxr(p_shared_weak_owners);
        while (__stxr(v31 + 1, p_shared_weak_owners));
        v59[0] = v29;
        v59[1] = v27;
        p_shared_owners = (unint64_t *)&v27->__shared_owners_;
        do
          v33 = __ldaxr(p_shared_owners);
        while (__stlxr(v33 - 1, p_shared_owners));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      else
      {
        *(_OWORD *)v59 = 0uLL;
      }
    }
    sub_20EBAD838(__p, a2);
    v66 = 0;
    v48 = (char *)operator new(0x30uLL);
    v49 = *(_OWORD *)__p;
    *(_OWORD *)(v48 + 8) = *(_OWORD *)v59;
    *(_QWORD *)v48 = &off_24C9C6658;
    *(_OWORD *)(v48 + 24) = v49;
    *((_QWORD *)v48 + 5) = v61;
    __p[1] = 0;
    v61 = 0;
    __p[0] = 0;
    v66 = (__int128 *)v48;
    sub_210216F3C(*v25, (uint64_t)&v64);
    v50 = v66;
    if (v66 == &v64)
    {
      v51 = 4;
      v50 = &v64;
    }
    else
    {
      if (!v66)
        goto LABEL_58;
      v51 = 5;
    }
    (*(void (**)(__int128 *))(*(_QWORD *)v50 + 8 * v51))(v50);
LABEL_58:
    v52 = (char *)__p[0];
    if (!__p[0])
      return;
    v53 = (char *)__p[1];
    v54 = __p[0];
    if (__p[1] == __p[0])
    {
LABEL_71:
      __p[1] = v52;
      operator delete(v54);
      return;
    }
    while (1)
    {
      v55 = (std::__shared_weak_count *)*((_QWORD *)v53 - 1);
      if (v55)
      {
        v56 = (unint64_t *)&v55->__shared_owners_;
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
          break;
      }
      v58 = (void *)*((_QWORD *)v53 - 5);
      if (v58)
        goto LABEL_67;
LABEL_61:
      v53 -= 72;
      if (v53 == v52)
      {
        v54 = __p[0];
        goto LABEL_71;
      }
    }
    ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
    std::__shared_weak_count::__release_weak(v55);
    v58 = (void *)*((_QWORD *)v53 - 5);
    if (!v58)
      goto LABEL_61;
LABEL_67:
    *((_QWORD *)v53 - 4) = v58;
    operator delete(v58);
    goto LABEL_61;
  }
  v4 = (std::__shared_weak_count *)operator new(0x30uLL);
  v4->__shared_owners_ = 0;
  v5 = (unint64_t *)&v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C6588;
  v6 = v4 + 1;
  sub_20EBAD838(&v4[1].__vftable, a2);
  v62 = v4 + 1;
  v63 = v4;
  v7 = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
  v9 = (uint64_t *)a1[18];
  v10 = (_QWORD *)operator new();
  *v10 = v9 + 7;
  std::mutex::lock((std::mutex *)(v9 + 7));
  *(_QWORD *)&v64 = v10;
  *((_QWORD *)&v64 + 1) = v9;
  if (!*((_BYTE *)v9 + 48))
    sub_20E866B34();
  v11 = v9[4];
  v12 = *v9;
  v13 = (std::__shared_weak_count **)(*v9 + 16 * v11);
  do
    v14 = __ldxr(v5);
  while (__stxr(v14 + 1, v5));
  *v13 = v6;
  v15 = v12 + 16 * v11;
  v16 = *(std::__shared_weak_count **)(v15 + 8);
  *(_QWORD *)(v15 + 8) = v4;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (v9[1] - *v9) >> 4;
  v20 = v9[5];
  v21 = v9[4] + 1;
  if (v21 >= v19)
    v22 = (v9[1] - *v9) >> 4;
  else
    v22 = 0;
  v9[4] = v21 - v22;
  if (v20 != v19)
  {
    v9[5] = v20 + 1;
    v24 = (std::mutex **)v64;
    if (!(_QWORD)v64)
      goto LABEL_33;
    goto LABEL_32;
  }
  v23 = v9[3] + 1;
  if (v23 < v19)
    v19 = 0;
  v9[3] = v23 - v19;
  v24 = (std::mutex **)v64;
  if ((_QWORD)v64)
  {
LABEL_32:
    std::mutex::unlock(*v24);
    MEMORY[0x212BC6398](v24, 0x20C4093837F09);
  }
LABEL_33:
  v34 = (uint64_t **)a1[9];
  v64 = 0uLL;
  v35 = (std::__shared_weak_count *)a1[5];
  if (v35)
  {
    v36 = std::__shared_weak_count::lock(v35);
    if (v36)
    {
      v37 = v36;
      v38 = a1[4];
      v39 = (unint64_t *)&v36->__shared_weak_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
      *(_QWORD *)&v64 = v38;
      *((_QWORD *)&v64 + 1) = v36;
      v41 = (unint64_t *)&v36->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    else
    {
      v64 = 0uLL;
    }
  }
  v43 = (char *)operator new(0x30uLL);
  *(_QWORD *)v43 = &off_24C9C65D8;
  *(_OWORD *)(v43 + 8) = v64;
  v64 = 0uLL;
  *((_QWORD *)v43 + 3) = v6;
  *((_QWORD *)v43 + 4) = v4;
  v65 = 0;
  v66 = 0;
  v68 = v43;
  sub_210216F3C(*v34, (uint64_t)v67);
  v44 = v68;
  if (v68 == v67)
  {
    v45 = 4;
    v44 = v67;
  }
  else
  {
    if (!v68)
      goto LABEL_47;
    v45 = 5;
  }
  (*(void (**)(void))(*v44 + 8 * v45))();
LABEL_47:
  if (v63)
  {
    v46 = &v63->__shared_owners_;
    do
      v47 = __ldaxr((unint64_t *)v46);
    while (__stlxr(v47 - 1, (unint64_t *)v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
}

void sub_20EBAFFC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char *a20)
{
  char *v20;
  char *v22;
  uint64_t v23;

  v22 = a20;
  if (a20 == v20)
  {
    v23 = 4;
    v22 = &a17;
  }
  else
  {
    if (!a20)
    {
      sub_20EBB1738(&a9);
      _Unwind_Resume(a1);
    }
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
  sub_20EBB1738(&a9);
  _Unwind_Resume(a1);
}

void sub_20EBB001C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EBB0114(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EBB0124(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EBB0130(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20EBB0140(_QWORD *a1, __int128 **a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count **v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  std::mutex **v29;
  uint64_t **v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t **v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  std::__shared_weak_count *v49;
  char *v50;
  std::string *v51;
  uint64_t v52;
  uint64_t *v53;
  unint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  uint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  char *v60;
  __int128 v61;
  uint64_t v62;
  __int128 *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  char *v68;
  char *v69;
  void *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  void *v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  __int128 *v78;
  std::string *v79;
  std::runtime_error *exception;
  std::runtime_error *v81;
  std::__shared_weak_count *v82[2];
  void *__p[2];
  uint64_t v84;
  _QWORD *v85;
  std::__shared_weak_count *v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count *v89;
  std::__shared_weak_count *v90;
  std::runtime_error v91;
  std::__shared_weak_count *v92;
  std::__shared_weak_count *v93;
  __int128 v94;
  _QWORD *v95;
  __int128 *v96;
  _QWORD v97[3];
  std::string v98;
  std::string *v99;
  uint64_t v100;

  v100 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v94 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v94 + 1) = 45;
    v77 = (_QWORD *)a1[6];
    v76 = a1 + 6;
    v75 = v77;
    v78 = (__int128 *)*((unsigned __int8 *)v76 + 23);
    if ((char)v78 < 0)
      v78 = (__int128 *)v76[1];
    else
      v75 = v76;
    v95 = v75;
    v96 = v78;
    sub_20E8778D4((uint64_t)&v94, (uint64_t)v97, 0, 0, &v98);
    if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v79 = &v98;
    else
      v79 = (std::string *)v98.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v91, (const char *)v79);
    v91.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v81 = std::runtime_error::runtime_error(exception, &v91);
    v81->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v81, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C66D8;
    v6[1].__vftable = *a3;
    v89 = v6 + 1;
    v90 = v6;
    v87 = v6 + 1;
    v88 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v9 = (std::__shared_weak_count *)operator new(0x30uLL);
    v9->__shared_owners_ = 0;
    v10 = (unint64_t *)&v9->__shared_owners_;
    v9->__shared_weak_owners_ = 0;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C6588;
    v11 = v9 + 1;
    sub_20EBAD838(&v9[1].__vftable, a2);
    v92 = v9 + 1;
    v93 = v9;
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    v14 = (uint64_t *)a1[18];
    v15 = (_QWORD *)operator new();
    *v15 = v14 + 7;
    std::mutex::lock((std::mutex *)(v14 + 7));
    *(_QWORD *)&v94 = v15;
    *((_QWORD *)&v94 + 1) = v14;
    if (!*((_BYTE *)v14 + 48))
      sub_20E866B34();
    v16 = v14[4];
    v17 = *v14;
    v18 = (std::__shared_weak_count **)(*v14 + 16 * v16);
    do
      v19 = __ldxr(v10);
    while (__stxr(v19 + 1, v10));
    *v18 = v11;
    v20 = v17 + 16 * v16;
    v21 = *(std::__shared_weak_count **)(v20 + 8);
    *(_QWORD *)(v20 + 8) = v9;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = (v14[1] - *v14) >> 4;
    v25 = v14[5];
    v26 = v14[4] + 1;
    if (v26 >= v24)
      v27 = (v14[1] - *v14) >> 4;
    else
      v27 = 0;
    v14[4] = v26 - v27;
    if (v25 == v24)
    {
      v28 = v14[3] + 1;
      if (v28 < v24)
        v24 = 0;
      v14[3] = v28 - v24;
      v29 = (std::mutex **)v94;
      if (!(_QWORD)v94)
      {
LABEL_37:
        v39 = (uint64_t **)a1[9];
        v94 = 0uLL;
        v40 = (std::__shared_weak_count *)a1[5];
        if (v40)
        {
          v41 = std::__shared_weak_count::lock(v40);
          if (v41)
          {
            v42 = v41;
            v43 = a1[4];
            v44 = (unint64_t *)&v41->__shared_weak_owners_;
            do
              v45 = __ldxr(v44);
            while (__stxr(v45 + 1, v44));
            *(_QWORD *)&v94 = v43;
            *((_QWORD *)&v94 + 1) = v41;
            v46 = (unint64_t *)&v41->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          else
          {
            v94 = 0uLL;
          }
        }
        v48 = v87;
        v49 = v88;
        v87 = 0;
        v88 = 0;
        v50 = (char *)operator new(0x38uLL);
        *(_QWORD *)v50 = &off_24C9C6728;
        *(_OWORD *)(v50 + 8) = v94;
        v94 = 0uLL;
        *((_QWORD *)v50 + 3) = v11;
        *((_QWORD *)v50 + 4) = v9;
        v95 = 0;
        v96 = 0;
        *((_QWORD *)v50 + 5) = v48;
        *((_QWORD *)v50 + 6) = v49;
        v97[0] = 0;
        v97[1] = 0;
        v99 = (std::string *)v50;
        sub_210216F3C(*v39, (uint64_t)&v98);
        v51 = v99;
        if (v99 == &v98)
        {
          v52 = 4;
          v51 = &v98;
        }
        else
        {
          if (!v99)
            goto LABEL_51;
          v52 = 5;
        }
        (*(void (**)(void))(v51->__r_.__value_.__r.__words[0] + 8 * v52))();
LABEL_51:
        if (v93)
        {
          v53 = &v93->__shared_owners_;
          do
            v54 = __ldaxr((unint64_t *)v53);
          while (__stlxr(v54 - 1, (unint64_t *)v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
            std::__shared_weak_count::__release_weak(v93);
          }
        }
        if (v88)
        {
          v55 = &v88->__shared_owners_;
          do
            v56 = __ldaxr((unint64_t *)v55);
          while (__stlxr(v56 - 1, (unint64_t *)v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
            std::__shared_weak_count::__release_weak(v88);
          }
        }
        if (v90)
        {
          v57 = &v90->__shared_owners_;
          do
            v58 = __ldaxr((unint64_t *)v57);
          while (__stlxr(v58 - 1, (unint64_t *)v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
            std::__shared_weak_count::__release_weak(v90);
          }
        }
        return;
      }
    }
    else
    {
      v14[5] = v25 + 1;
      v29 = (std::mutex **)v94;
      if (!(_QWORD)v94)
        goto LABEL_37;
    }
    std::mutex::unlock(*v29);
    MEMORY[0x212BC6398](v29, 0x20C4093837F09);
    goto LABEL_37;
  }
  v30 = (uint64_t **)a1[9];
  *(_OWORD *)v82 = 0uLL;
  v31 = (std::__shared_weak_count *)a1[5];
  if (v31)
  {
    v32 = std::__shared_weak_count::lock(v31);
    if (v32)
    {
      v33 = v32;
      v34 = (std::__shared_weak_count *)a1[4];
      v35 = (unint64_t *)&v32->__shared_weak_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
      v82[0] = v34;
      v82[1] = v32;
      v37 = (unint64_t *)&v32->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    else
    {
      *(_OWORD *)v82 = 0uLL;
    }
  }
  sub_20EBAD838(__p, a2);
  v59 = (std::__shared_weak_count *)operator new(0x20uLL);
  v59->__shared_owners_ = 0;
  v59->__shared_weak_owners_ = 0;
  v59->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C66D8;
  v59[1].__vftable = *a3;
  *a3 = 0;
  v85 = &v59[1].__vftable;
  v86 = v59;
  v96 = 0;
  v60 = (char *)operator new(0x40uLL);
  v61 = *(_OWORD *)__p;
  *(_OWORD *)(v60 + 8) = *(_OWORD *)v82;
  *(_QWORD *)v60 = &off_24C9C67A8;
  *(_OWORD *)(v60 + 24) = v61;
  v62 = v84;
  __p[1] = 0;
  v84 = 0;
  __p[0] = 0;
  *((_QWORD *)v60 + 5) = v62;
  *((_QWORD *)v60 + 6) = v59 + 1;
  *((_QWORD *)v60 + 7) = v59;
  v85 = 0;
  v86 = 0;
  v96 = (__int128 *)v60;
  sub_210216F3C(*v30, (uint64_t)&v94);
  v63 = v96;
  if (v96 == &v94)
  {
    v64 = 4;
    v63 = &v94;
    goto LABEL_71;
  }
  if (v96)
  {
    v64 = 5;
LABEL_71:
    (*(void (**)(__int128 *))(*(_QWORD *)v63 + 8 * v64))(v63);
  }
  v65 = v86;
  if (v86)
  {
    v66 = (unint64_t *)&v86->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  v68 = (char *)__p[0];
  if (__p[0])
  {
    v69 = (char *)__p[1];
    v70 = __p[0];
    if (__p[1] == __p[0])
    {
LABEL_90:
      __p[1] = v68;
      operator delete(v70);
      return;
    }
    while (1)
    {
      v71 = (std::__shared_weak_count *)*((_QWORD *)v69 - 1);
      if (v71)
      {
        v72 = (unint64_t *)&v71->__shared_owners_;
        do
          v73 = __ldaxr(v72);
        while (__stlxr(v73 - 1, v72));
        if (!v73)
          break;
      }
      v74 = (void *)*((_QWORD *)v69 - 5);
      if (v74)
        goto LABEL_86;
LABEL_80:
      v69 -= 72;
      if (v69 == v68)
      {
        v70 = __p[0];
        goto LABEL_90;
      }
    }
    ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
    std::__shared_weak_count::__release_weak(v71);
    v74 = (void *)*((_QWORD *)v69 - 5);
    if (!v74)
      goto LABEL_80;
LABEL_86:
    *((_QWORD *)v69 - 4) = v74;
    operator delete(v74);
    goto LABEL_80;
  }
}

void sub_20EBB0848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::runtime_error a20,std::exception_ptr a21,uint64_t a22,uint64_t a23,std::exception_ptr a24)
{
  std::__assoc_sub_state **v24;
  uint64_t v25;
  std::__assoc_sub_state *v26;
  std::exception_ptr v27;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v26 = *v24;
    if (*v24)
    {
      std::exception_ptr::exception_ptr(&a24, &a21);
      v27.__ptr_ = &a24;
      std::__assoc_sub_state::set_exception(v26, v27);
      std::exception_ptr::~exception_ptr(&a24);
      std::exception_ptr::~exception_ptr(&a21);
      std::runtime_error::~runtime_error(&a20);
      if (*(char *)(v25 - 81) < 0)
        operator delete(*(void **)(v25 - 104));
      JUMPOUT(0x20EBB075CLL);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EBB08BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::runtime_error a20,std::exception_ptr a21,uint64_t a22,uint64_t a23,std::exception_ptr a24)
{
  uint64_t v24;

  std::exception_ptr::~exception_ptr(&a21);
  std::runtime_error::~runtime_error(&a20);
  if (*(char *)(v24 - 81) < 0)
  {
    operator delete(*(void **)(v24 - 104));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EBB0910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char *a28)
{
  char *v28;
  char *v30;
  uint64_t v31;

  v30 = a28;
  if (a28 == v28)
  {
    v31 = 4;
    v30 = &a25;
  }
  else
  {
    if (!a28)
    {
      sub_20EBB3510(&a9);
      _Unwind_Resume(a1);
    }
    v31 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v30 + 8 * v31))();
  sub_20EBB3510(&a9);
  _Unwind_Resume(a1);
}

void sub_20EBB0964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  void **v10;

  sub_20EBAD784(v10);
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EBB0998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  va_list va1;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  va_list va2;
  uint64_t v24;
  va_list va3;

  va_start(va3, a8);
  va_start(va2, a8);
  va_start(va1, a8);
  va_start(va, a8);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v16 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v22 = va_arg(va3, _QWORD);
  v24 = va_arg(va3, _QWORD);
  v11 = *(_QWORD **)(v9 - 80);
  if (v11 == v8)
  {
    v12 = 4;
    v11 = (_QWORD *)(v9 - 104);
  }
  else
  {
    if (!v11)
      goto LABEL_6;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_6:
  sub_20EA031A8((uint64_t *)va3);
  sub_20E86665C((uint64_t)va2);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EBB0A38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18)
{
  std::__shared_weak_count *v18;
  void *v20;

  std::__shared_weak_count::~__shared_weak_count(v18);
  operator delete(v20);
  sub_20E86665C((uint64_t)&a16);
  sub_20E86665C((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_20EBB0A60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EBB0A7C(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_210217048(*v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    sub_210217048(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_20EBB0AF0(_QWORD *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t **)a1[9];
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = (uint64_t **)a1[9];
  }
  v6 = a1[4];
  v5 = a1[5];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24C9C6828;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = &off_24C9C6280;
  v10[4] = v9;
  v14 = v10;
  sub_210216F3C(*v4, (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_20EBB0C20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EBB0C94(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C9C68A8;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_210216F3C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20EBB0DA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20EBB0E08@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9C6928;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EBB1020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EBB10E8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9C69A8;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EBB1300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EBB13C8(uint64_t a1)
{
  return sub_20EBB1538(a1 - 16);
}

void sub_20EBB13D0(uint64_t a1)
{
  sub_20EBB1538(a1 - 16);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EBB13F8(uint64_t a1, uint64_t a2)
{
  return sub_20EBB0AF0((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20EBB1400@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EBB0E08((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20EBB1408@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EBB10E8((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_20EBB1410(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EBB1418(uint64_t a1)
{
  return sub_20EBB1538(a1 - 24);
}

void sub_20EBB1420(uint64_t a1)
{
  sub_20EBB1538(a1 - 24);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EBB1448(uint64_t a1)
{
  return sub_20EBB0C94((_QWORD *)(a1 - 24));
}

uint64_t sub_20EBB1450(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20EBB1458(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EBB14C0(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EBB1528(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20EBB1538(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24C9C6388;
  *(_QWORD *)(a1 + 16) = &unk_24C9C6400;
  *(_QWORD *)(a1 + 24) = &unk_24C9C6440;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x212BC6398](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v13 = *(_QWORD *)(a1 + 96);
    v14 = *(uint64_t **)(a1 + 104);
    v15 = *v14;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v13 + 8);
    **(_QWORD **)(v13 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v14 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v14[1];
        (*(void (**)(uint64_t *))v14[2])(v14 + 2);
        operator delete(v14);
        v14 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

_QWORD *sub_20EBB1738(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;
  std::__shared_weak_count *v9;

  v2 = a1[2];
  if (v2)
  {
    v3 = a1[3];
    v4 = (void *)a1[2];
    if (v3 == v2)
    {
LABEL_14:
      a1[3] = v2;
      operator delete(v4);
      goto LABEL_15;
    }
    while (1)
    {
      v5 = *(std::__shared_weak_count **)(v3 - 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
          break;
      }
      v8 = *(void **)(v3 - 40);
      if (v8)
        goto LABEL_10;
LABEL_4:
      v3 -= 72;
      if (v3 == v2)
      {
        v4 = (void *)a1[2];
        goto LABEL_14;
      }
    }
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v8 = *(void **)(v3 - 40);
    if (!v8)
      goto LABEL_4;
LABEL_10:
    *(_QWORD *)(v3 - 32) = v8;
    operator delete(v8);
    goto LABEL_4;
  }
LABEL_15:
  v9 = (std::__shared_weak_count *)a1[1];
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
  return a1;
}

void sub_20EBB17F8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C6588;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EBB1808(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C6588;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EBB1838(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;
  void *v9;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(a1 + 24);
    if (v3 == v1)
    {
      *(_QWORD *)(a1 + 32) = v1;
      operator delete(v4);
      return;
    }
    while (1)
    {
      v5 = *(std::__shared_weak_count **)(v3 - 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
          break;
      }
      v8 = *(void **)(v3 - 40);
      if (v8)
        goto LABEL_10;
LABEL_4:
      v3 -= 72;
      if (v3 == v1)
      {
        v9 = *(void **)(a1 + 24);
        *(_QWORD *)(a1 + 32) = v1;
        operator delete(v9);
        return;
      }
    }
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v8 = *(void **)(v3 - 40);
    if (!v8)
      goto LABEL_4;
LABEL_10:
    *(_QWORD *)(v3 - 32) = v8;
    operator delete(v8);
    goto LABEL_4;
  }
}

_QWORD *sub_20EBB1908(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9C65D8;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EBB194C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9C65D8;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EBB19A0(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9C65D8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20EBB1A10(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9C65D8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20EBB1A60(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EBB1A9C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EBB1AD4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      LOBYTE(v20) = 0;
      v21 = 0;
      sub_20EBB1DF8((uint64_t *)(v8 + 88), v5, &v20);
      if (v21)
        sub_20EBB21BC(&v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EBB1C9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    sub_20EBB21BC(&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EBB1D80(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3vio8sem_node25SemanticsProcessingBund"
                     "leENS4_9allocatorIS8_EEEENS4_10shared_ptrINS5_INS6_13SemanticFrameENS9_ISD_EEEEEEvSG_Lb0EE25Enqueue"
                     "MessageAndDispatchIZNKSH_4SendERKSB_EUlT_T0_E_EEvSK_SL_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3vio8sem_node25SemanticsPro"
                                "cessingBundleENS4_9allocatorIS8_EEEENS4_10shared_ptrINS5_INS6_13SemanticFrameENS9_ISD_EE"
                                "EEEEvSG_Lb0EE25EnqueueMessageAndDispatchIZNKSH_4SendERKSB_EUlT_T0_E_EEvSK_SL_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3vio8sem_node25SemanticsProcessingBundleENS4_9allocatorIS8_EEEENS4_10shared_ptrINS5_INS6_13SemanticFrameENS9_ISD_EEEEEEvSG_Lb0EE25EnqueueMessageAndDispatchIZNKSH_4SendERKSB_EUlT_T0_E_EEvSK_SL_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3vio8sem_node25SemanticsProcessingBundleENS4_9allocatorIS8_EEEENS4_10shared_ptrINS5_INS6_13SemanticFrameENS9_ISD_EEEEEEvSG_Lb0EE25EnqueueMessageAndDispatchIZNKSH_4SendERKSB_EUlT_T0_E_EEvSK_SL_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EBB1DEC()
{
  return &unk_24C9C6638;
}

void sub_20EBB1DF8(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::exception_ptr v22;
  uint64_t v23;
  std::__shared_weak_count *v24;

  v6 = *a1;
  if (!v6)
  {
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v7 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (byte_254A6DE68)
      v8 = byte_254A6DE70 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_254A6DE40;
      for (i = qword_254A6DE48; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, "", 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      abort();
    qword_254A6DE58(unk_254A6DE60, "callable_", 9, "", 0);
    v6 = *a1;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&v23, v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, uint64_t *))(j[2] + 16))(j + 2, &v23);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!v14)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v22.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v22), v15))
    {
      sub_20E96CE78(2u);
    }
    v16 = v24;
    *(_QWORD *)(v14 + 144) = v23;
    *(_QWORD *)(v14 + 152) = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock((std::mutex *)(v14 + 24));
  }
  v19 = v24;
  if (v24)
  {
    v20 = (unint64_t *)&v24->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_20EBB20B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, int a14, __int16 a15, char a16, unsigned __int8 a17, char a18)
{
  std::mutex *v18;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;

  std::mutex::unlock(v18);
  sub_20E86665C((uint64_t)&a18);
  if (a2 == 1)
  {
    v21 = (uint64_t *)__cxa_begin_catch(a1);
    v22 = *v21;
    a11 = *(_QWORD *)(*(_QWORD *)(*v21 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a10 = (*(uint64_t (**)(void))(v22 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a11, "\n", "message: ", (const char *)&a10, "\n");
    if ((a17 & 0x80u) == 0)
      v23 = (uint64_t *)&a12;
    else
      v23 = a12;
    if ((a17 & 0x80u) == 0)
      v24 = a17;
    else
      v24 = a13;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v23, v24, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20EBB2190(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20EBB21B0);
}

uint64_t *sub_20EBB21BC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x212BC5AF8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20EBB22A8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, std::logic_error a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::logic_error::~logic_error(&a11);
  JUMPOUT(0x20EBB2204);
}

_QWORD *sub_20EBB22E4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;
  std::__shared_weak_count *v9;

  *a1 = &off_24C9C6658;
  v2 = a1[3];
  if (v2)
  {
    v3 = a1[4];
    v4 = (void *)a1[3];
    if (v3 == v2)
    {
LABEL_14:
      a1[4] = v2;
      operator delete(v4);
      goto LABEL_15;
    }
    while (1)
    {
      v5 = *(std::__shared_weak_count **)(v3 - 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
          break;
      }
      v8 = *(void **)(v3 - 40);
      if (v8)
        goto LABEL_10;
LABEL_4:
      v3 -= 72;
      if (v3 == v2)
      {
        v4 = (void *)a1[3];
        goto LABEL_14;
      }
    }
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v8 = *(void **)(v3 - 40);
    if (!v8)
      goto LABEL_4;
LABEL_10:
    *(_QWORD *)(v3 - 32) = v8;
    operator delete(v8);
    goto LABEL_4;
  }
LABEL_15:
  v9 = (std::__shared_weak_count *)a1[2];
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
  return a1;
}

void sub_20EBB23B0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;
  std::__shared_weak_count *v9;

  *a1 = &off_24C9C6658;
  v2 = a1[3];
  if (!v2)
    goto LABEL_15;
  v3 = a1[4];
  v4 = (void *)a1[3];
  if (v3 == v2)
  {
LABEL_14:
    a1[4] = v2;
    operator delete(v4);
LABEL_15:
    v9 = (std::__shared_weak_count *)a1[2];
    if (v9)
      std::__shared_weak_count::__release_weak(v9);
    JUMPOUT(0x212BC6398);
  }
  while (1)
  {
    v5 = *(std::__shared_weak_count **)(v3 - 8);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
        break;
    }
    v8 = *(void **)(v3 - 40);
    if (v8)
      goto LABEL_10;
LABEL_4:
    v3 -= 72;
    if (v3 == v2)
    {
      v4 = (void *)a1[3];
      goto LABEL_14;
    }
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  v8 = *(void **)(v3 - 40);
  if (!v8)
    goto LABEL_4;
LABEL_10:
  *(_QWORD *)(v3 - 32) = v8;
  operator delete(v8);
  goto LABEL_4;
}

_QWORD *sub_20EBB248C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x30uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24C9C6658;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  sub_20EBAD838(v2 + 3, (__int128 **)(a1 + 24));
  return v3;
}

void sub_20EBB24F0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EBB2510(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24C9C6658;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return sub_20EBAD838(a2 + 3, (__int128 **)(a1 + 24));
}

void sub_20EBB2568(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_20EBB2580(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;
  std::__shared_weak_count *v9;

  v2 = a1[3];
  if (!v2)
    goto LABEL_15;
  v3 = a1[4];
  v4 = (void *)a1[3];
  if (v3 != v2)
  {
    while (1)
    {
      v5 = *(std::__shared_weak_count **)(v3 - 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
          break;
      }
      v8 = *(void **)(v3 - 40);
      if (v8)
        goto LABEL_10;
LABEL_4:
      v3 -= 72;
      if (v3 == v2)
      {
        v4 = (void *)a1[3];
        goto LABEL_14;
      }
    }
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v8 = *(void **)(v3 - 40);
    if (!v8)
      goto LABEL_4;
LABEL_10:
    *(_QWORD *)(v3 - 32) = v8;
    operator delete(v8);
    goto LABEL_4;
  }
LABEL_14:
  a1[4] = v2;
  operator delete(v4);
LABEL_15:
  v9 = (std::__shared_weak_count *)a1[2];
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
}

void sub_20EBB2648(_QWORD *__p)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;
  std::__shared_weak_count *v9;

  v2 = __p[3];
  if (v2)
  {
    v3 = __p[4];
    v4 = (void *)__p[3];
    if (v3 == v2)
    {
LABEL_14:
      __p[4] = v2;
      operator delete(v4);
      goto LABEL_15;
    }
    while (1)
    {
      v5 = *(std::__shared_weak_count **)(v3 - 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
          break;
      }
      v8 = *(void **)(v3 - 40);
      if (v8)
        goto LABEL_10;
LABEL_4:
      v3 -= 72;
      if (v3 == v2)
      {
        v4 = (void *)__p[3];
        goto LABEL_14;
      }
    }
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v8 = *(void **)(v3 - 40);
    if (!v8)
      goto LABEL_4;
LABEL_10:
    *(_QWORD *)(v3 - 32) = v8;
    operator delete(v8);
    goto LABEL_4;
  }
LABEL_15:
  v9 = (std::__shared_weak_count *)__p[2];
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
  operator delete(__p);
}

void sub_20EBB2708(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        LOBYTE(v8) = 0;
        v9 = 0;
        sub_20EBB1DF8((uint64_t *)(v5 + 88), a1 + 24, &v8);
        if (v9)
          sub_20EBB21BC(&v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EBB27B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    sub_20EBB21BC(&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EBB27FC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3vio8sem_node25SemanticsProcessingBund"
                     "leENS4_9allocatorIS8_EEEENS4_10shared_ptrINS5_INS6_13SemanticFrameENS9_ISD_EEEEEEvSG_Lb0EE4SendERKSB_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3vio8sem_node25SemanticsPro"
                                "cessingBundleENS4_9allocatorIS8_EEEENS4_10shared_ptrINS5_INS6_13SemanticFrameENS9_ISD_EE"
                                "EEEEvSG_Lb0EE4SendERKSB_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3vio8sem_node25SemanticsProcessingBundleENS4_9allocatorIS8_EEEENS4_10shared_ptrINS5_INS6_13SemanticFrameENS9_ISD_EEEEEEvSG_Lb0EE4SendERKSB_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3vio8sem_node25SemanticsProcessingBundleENS4_9allocatorIS8_EEEENS4_10shared_ptrINS5_INS6_13SemanticFrameENS9_ISD_EEEEEEvSG_Lb0EE4SendERKSB_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EBB2868()
{
  return &unk_24C9C66B8;
}

void sub_20EBB2874(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C66D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EBB2884(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C66D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t *sub_20EBB28B4(uint64_t a1)
{
  return sub_20EBB21BC((uint64_t *)(a1 + 24));
}

_QWORD *sub_20EBB28C0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9C6728;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20EBB2948(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9C6728;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x212BC6398);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_20EBB29E0(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9C6728;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_20EBB2A70(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9C6728;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20EBB2AE0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_20EBB2B60(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_20EBB2BDC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v23, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v25, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_20EBB1DF8(v13, v5, (uint64_t *)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    sub_20EBB21BC((uint64_t *)&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EBB2EB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20EBB2EE4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t v15;
  std::__assoc_sub_state **v16;
  std::__assoc_sub_state *v17;
  std::exception_ptr v18;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v17 = *v16;
  if (v17)
  {
    std::exception_ptr::exception_ptr(&a15, &a11);
    v18.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v17, v18);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a11);
    std::runtime_error::~runtime_error(&a10);
    if (!v15)
      JUMPOUT(0x20EBB2CF0);
    JUMPOUT(0x20EBB2CC0);
  }
  sub_20E96CE78(3u);
}

void sub_20EBB2F40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  std::exception_ptr::~exception_ptr(&a11);
  std::runtime_error::~runtime_error(&a10);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v16)
  {
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v15)
  {
    v23 = (unint64_t *)&v15->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20EBB2F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  if (a11)
    sub_20EBB21BC(&a10);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v11)
  {
    v19 = (unint64_t *)&v11->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20EBB3058(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3vio8sem_node25SemanticsProcessingBund"
                     "leENS4_9allocatorIS8_EEEENS4_10shared_ptrINS5_INS6_13SemanticFrameENS9_ISD_EEEEEEvSG_Lb0EE25Enqueue"
                     "MessageAndDispatchIZNKSH_7ProcessERKSB_NS4_7promiseISG_EEEUlT_T0_E_EEvSK_SN_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3vio8sem_node25SemanticsPro"
                                "cessingBundleENS4_9allocatorIS8_EEEENS4_10shared_ptrINS5_INS6_13SemanticFrameENS9_ISD_EE"
                                "EEEEvSG_Lb0EE25EnqueueMessageAndDispatchIZNKSH_7ProcessERKSB_NS4_7promiseISG_EEEUlT_T0_E"
                                "_EEvSK_SN_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3vio8sem_node25SemanticsProcessingBundleENS4_9allocatorIS8_EEEENS4_10shared_ptrINS5_INS6_13SemanticFrameENS9_ISD_EEEEEEvSG_Lb0EE25EnqueueMessageAndDispatchIZNKSH_7ProcessERKSB_NS4_7promiseISG_EEEUlT_T0_E_EEvSK_SN_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3vio8sem_node25SemanticsProcessingBundleENS4_9allocatorIS8_EEEENS4_10shared_ptrINS5_INS6_13SemanticFrameENS9_ISD_EEEEEEvSG_Lb0EE25EnqueueMessageAndDispatchIZNKSH_7ProcessERKSB_NS4_7promiseISG_EEEUlT_T0_E_EEvSK_SN_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EBB30C4()
{
  return &unk_24C9C6788;
}

_QWORD *sub_20EBB30D0(_QWORD *a1)
{
  *a1 = &off_24C9C67A8;
  sub_20EBB3510(a1 + 1);
  return a1;
}

void sub_20EBB3100(_QWORD *a1)
{
  *a1 = &off_24C9C67A8;
  sub_20EBB3510(a1 + 1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EBB3140(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = operator new(0x40uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24C9C67A8;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  sub_20EBAD838(v2 + 3, (__int128 **)(a1 + 24));
  v8 = *(_QWORD *)(a1 + 56);
  v3[6] = *(_QWORD *)(a1 + 48);
  v3[7] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  return v3;
}

void sub_20EBB31C4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EBB31E4(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD *result;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24C9C67A8;
  a2[1] = v5;
  a2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  result = sub_20EBAD838(a2 + 3, (__int128 **)(a1 + 24));
  v9 = *(_QWORD *)(a1 + 56);
  a2[6] = *(_QWORD *)(a1 + 48);
  a2[7] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20EBB325C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EBB3274(uint64_t a1)
{
  return sub_20EBB3510((_QWORD *)(a1 + 8));
}

void sub_20EBB327C(_QWORD *a1)
{
  sub_20EBB3510(a1 + 1);
  operator delete(a1);
}

void sub_20EBB32A4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v9, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[6];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_20EBB1DF8((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t *)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    sub_20EBB21BC((uint64_t *)&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_20EBB33B4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  __break(1u);
}

void sub_20EBB342C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  uint64_t v11;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  std::runtime_error::~runtime_error(&a10);
  if (v11)
    JUMPOUT(0x20EBB3460);
  JUMPOUT(0x20EBB3490);
}

uint64_t sub_20EBB3498(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3vio8sem_node25SemanticsProcessingBund"
                     "leENS4_9allocatorIS8_EEEENS4_10shared_ptrINS5_INS6_13SemanticFrameENS9_ISD_EEEEEEvSG_Lb0EE7ProcessE"
                     "RKSB_NS4_7promiseISG_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3vio8sem_node25SemanticsPro"
                                "cessingBundleENS4_9allocatorIS8_EEEENS4_10shared_ptrINS5_INS6_13SemanticFrameENS9_ISD_EE"
                                "EEEEvSG_Lb0EE7ProcessERKSB_NS4_7promiseISG_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3vio8sem_node25SemanticsProcessingBundleENS4_9allocatorIS8_EEEENS4_10shared_ptrINS5_INS6_13SemanticFrameENS9_ISD_EEEEEEvSG_Lb0EE7ProcessERKSB_NS4_7promiseISG_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3vio8sem_node25SemanticsProcessingBundleENS4_9allocatorIS8_EEEENS4_10shared_ptrINS5_INS6_13SemanticFrameENS9_ISD_EEEEEEvSG_Lb0EE7ProcessERKSB_NS4_7promiseISG_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EBB3504()
{
  return &unk_24C9C6808;
}

_QWORD *sub_20EBB3510(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  void *v11;
  std::__shared_weak_count *v12;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (char *)a1[2];
    if (!v5)
      goto LABEL_19;
LABEL_6:
    v6 = (char *)a1[3];
    v7 = v5;
    if (v6 == v5)
    {
LABEL_18:
      a1[3] = v5;
      operator delete(v7);
      goto LABEL_19;
    }
    while (1)
    {
      v8 = (std::__shared_weak_count *)*((_QWORD *)v6 - 1);
      if (v8)
      {
        v9 = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
          break;
      }
      v11 = (void *)*((_QWORD *)v6 - 5);
      if (v11)
        goto LABEL_14;
LABEL_8:
      v6 -= 72;
      if (v6 == v5)
      {
        v7 = (char *)a1[2];
        goto LABEL_18;
      }
    }
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (void *)*((_QWORD *)v6 - 5);
    if (!v11)
      goto LABEL_8;
LABEL_14:
    *((_QWORD *)v6 - 4) = v11;
    operator delete(v11);
    goto LABEL_8;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (char *)a1[2];
  if (v5)
    goto LABEL_6;
LABEL_19:
  v12 = (std::__shared_weak_count *)a1[1];
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  return a1;
}

_QWORD *sub_20EBB3614(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9C6828;
  v2 = a1[4];
  a1[3] = &off_24C9C6280;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EBB366C(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9C6828;
  v2 = a1[4];
  a1[3] = &off_24C9C6280;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EBB36D4(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x28uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24C9C6828;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = &off_24C9C6280;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  return v3;
}

void sub_20EBB374C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EBB376C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24C9C6828;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = &off_24C9C6280;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_20EBB37D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_20EBB37EC(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = a1[4];
  a1[3] = &off_24C9C6280;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EBB383C(_QWORD *__p)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = __p[4];
  __p[3] = &off_24C9C6280;
  __p[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EBB3888(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (v5)
      {
        v6 = operator new(0x20uLL);
        v7 = a1[4];
        a1[4] = 0;
        v6[2] = &off_24C9C6280;
        v6[3] = v7;
        v9 = *(_QWORD *)(v5 + 96);
        v8 = (_QWORD *)(v5 + 96);
        *v6 = v9;
        v6[1] = v8;
        *(_QWORD *)(v9 + 8) = v6;
        *v8 = v6;
        ++v8[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EBB393C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EBB3978(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3vio8sem_node25SemanticsProcessingBundl"
                     "eENS4_9allocatorIS8_EEEENS4_10shared_ptrINS5_INS6_13SemanticFrameENS9_ISD_EEEEEEvSG_Lb0EE9Subscribe"
                     "ENS1_12ChannelInputISG_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3vio8sem_node25SemanticsProc"
                                "essingBundleENS4_9allocatorIS8_EEEENS4_10shared_ptrINS5_INS6_13SemanticFrameENS9_ISD_EEE"
                                "EEEvSG_Lb0EE9SubscribeENS1_12ChannelInputISG_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3vio8sem_node25SemanticsProcessingBundleENS4_9allocatorIS8_EEEENS4_10shared_ptrINS5_INS6_13SemanticFrameENS9_ISD_EEEEEEvSG_Lb0EE9SubscribeENS1_12ChannelInputISG_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3vio8sem_node25SemanticsProcessingBundleENS4_9allocatorIS8_EEEENS4_10shared_ptrINS5_INS6_13SemanticFrameENS9_ISD_EEEEEEvSG_Lb0EE9SubscribeENS1_12ChannelInputISG_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EBB39E4()
{
  return &unk_24C9C6888;
}

_QWORD *sub_20EBB39F0(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9C68A8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EBB3A28(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9C68A8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EBB3A70(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9C68A8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20EBB3AC0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9C68A8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20EBB3AF0(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EBB3B00(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EBB3B2C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EBB3BC0(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EBB3BFC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3vio8sem_node25SemanticsProcessingBundl"
                     "eENS4_9allocatorIS8_EEEENS4_10shared_ptrINS5_INS6_13SemanticFrameENS9_ISD_EEEEEEvSG_Lb0EE15AddError"
                     "HandlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3vio8sem_node25SemanticsProc"
                                "essingBundleENS4_9allocatorIS8_EEEENS4_10shared_ptrINS5_INS6_13SemanticFrameENS9_ISD_EEE"
                                "EEEvSG_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3vio8sem_node25SemanticsProcessingBundleENS4_9allocatorIS8_EEEENS4_10shared_ptrINS5_INS6_13SemanticFrameENS9_ISD_EEEEEEvSG_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3vio8sem_node25SemanticsProcessingBundleENS4_9allocatorIS8_EEEENS4_10shared_ptrINS5_INS6_13SemanticFrameENS9_ISD_EEEEEEvSG_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EBB3C68()
{
  return &unk_24C9C6908;
}

_QWORD *sub_20EBB3C74(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9C6928;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EBB3CAC(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9C6928;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EBB3CF4(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9C6928;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EBB3D4C(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9C6928;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EBB3D84(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EBB3D94(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EBB3DC0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  char *v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (!v5)
      {
LABEL_11:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v6 = (uint64_t *)a1[3];
      v7 = *(_QWORD *)(v5 + 112);
      v18 = 0;
      v17 = 0uLL;
      if (v7)
      {
        if (v7 >> 61)
          sub_20E92CED8();
        v8 = (char *)operator new(8 * v7);
        v9 = &v8[8 * v7];
        *(_QWORD *)&v17 = v8;
        *((_QWORD *)&v17 + 1) = v8;
        v18 = v9;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
        {
          do
          {
LABEL_7:
            v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 24) + 48))(*(_QWORD *)(v11 + 24));
            sub_20E9B2D04((uint64_t *)&v20, &v19);
            v11 = *(_QWORD *)(v11 + 8);
          }
          while (v11 != v10);
          *(_OWORD *)__p = v17;
          v16 = v18;
          v12 = *v6;
          if (*v6)
            goto LABEL_9;
          goto LABEL_18;
        }
      }
      else
      {
        v9 = 0;
        v8 = 0;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
          goto LABEL_7;
      }
      *(int64x2_t *)__p = vdupq_n_s64((unint64_t)v8);
      v16 = v9;
      v12 = *v6;
      if (*v6)
      {
LABEL_9:
        sub_20EA04C5C(v12, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_11;
      }
LABEL_18:
      sub_20E96CE78(3u);
    }
  }
}

void sub_20EBB3F3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EBB3FAC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3vio8sem_node25SemanticsProcessingBund"
                     "leENS4_9allocatorIS8_EEEENS4_10shared_ptrINS5_INS6_13SemanticFrameENS9_ISD_EEEEEEvSG_Lb0EE16OutputH"
                     "andlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3vio8sem_node25SemanticsPro"
                                "cessingBundleENS4_9allocatorIS8_EEEENS4_10shared_ptrINS5_INS6_13SemanticFrameENS9_ISD_EE"
                                "EEEEvSG_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3vio8sem_node25SemanticsProcessingBundleENS4_9allocatorIS8_EEEENS4_10shared_ptrINS5_INS6_13SemanticFrameENS9_ISD_EEEEEEvSG_Lb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3vio8sem_node25SemanticsProcessingBundleENS4_9allocatorIS8_EEEENS4_10shared_ptrINS5_INS6_13SemanticFrameENS9_ISD_EEEEEEvSG_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EBB4018()
{
  return &unk_24C9C6988;
}

_QWORD *sub_20EBB4024(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9C69A8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EBB405C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9C69A8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EBB40A4(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9C69A8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EBB40FC(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9C69A8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EBB4134(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EBB4144(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EBB4170(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_20E96CE78(3u);
        sub_20EA04C5C(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EBB4228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EBB4274(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3vio8sem_node25SemanticsProcessingBund"
                     "leENS4_9allocatorIS8_EEEENS4_10shared_ptrINS5_INS6_13SemanticFrameENS9_ISD_EEEEEEvSG_Lb0EE15ErrorHa"
                     "ndlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3vio8sem_node25SemanticsPro"
                                "cessingBundleENS4_9allocatorIS8_EEEENS4_10shared_ptrINS5_INS6_13SemanticFrameENS9_ISD_EE"
                                "EEEEvSG_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3vio8sem_node25SemanticsProcessingBundleENS4_9allocatorIS8_EEEENS4_10shared_ptrINS5_INS6_13SemanticFrameENS9_ISD_EEEEEEvSG_Lb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3vio8sem_node25SemanticsProcessingBundleENS4_9allocatorIS8_EEEENS4_10shared_ptrINS5_INS6_13SemanticFrameENS9_ISD_EEEEEEvSG_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EBB42E0()
{
  return &unk_24C9C6A08;
}

void sub_20EBB42F0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EBB4314(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EBB432C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_6vectorINS1_3vio8sem_node25Semantic"
                     "sProcessingBundleENS_9allocatorIS9_EEEENS0_INS6_INS7_13SemanticFrameENSA_ISD_EEEEEEvSG_Lb0EEEE27__s"
                     "hared_ptr_default_deleteISH_SH_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_6vectorINS1_3vio8sem_nod"
                                "e25SemanticsProcessingBundleENS_9allocatorIS9_EEEENS0_INS6_INS7_13SemanticFrameENSA_ISD_"
                                "EEEEEEvSG_Lb0EEEE27__shared_ptr_default_deleteISH_SH_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_6vectorINS1_3vio8sem_node25SemanticsProcessingBundleENS_9allocatorIS9_EEEENS0_INS6_INS7_13SemanticFrameENSA_ISD_EEEEEEvSG_Lb0EEEE27__shared_ptr_default_deleteISH_SH_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_6vectorINS1_3vio8sem_node25SemanticsProcessingBundleENS_9allocatorIS9_EEEENS0_INS6_INS7_13SemanticFrameENSA_ISD_EEEEEEvSG_Lb0EEEE27__shared_ptr_default_deleteISH_SH_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EBB439C(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EBB43C8(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EBB4404@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9C6A78;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20EBB446C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EBB44FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EBB4510(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EBB45A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EBB45B4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EBB4678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EBB468C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EBB4750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EBB4764(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EBB4808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EBB4820(uint64_t a1)
{
  sub_20EBB615C(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EBB4844(_QWORD *a1, std::__shared_weak_count_vtbl **a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  uint64_t v8;
  _QWORD *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  std::mutex **v28;
  uint64_t **v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t **v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  char *v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count_vtbl *v52;
  std::__shared_weak_count_vtbl *v53;
  unint64_t *v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 *v60;
  uint64_t v61;
  __int128 v62;
  std::__shared_weak_count *v63;
  __int128 v64;
  uint64_t v65;
  __int128 *v66;
  _BYTE v67[24];
  _BYTE *v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v4 = (uint64_t *)a1[18];
  if (v4)
  {
    v5 = (std::__shared_weak_count *)operator new(0x28uLL);
    v6 = v5;
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__shared_weak_owners_ = 0;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C6CE0;
    v8 = (uint64_t)a2[1];
    v5[1].__vftable = *a2;
    v9 = &v5[1].__vftable;
    v5[1].__shared_owners_ = v8;
    if (v8)
    {
      v10 = (unint64_t *)(v8 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
      v4 = (uint64_t *)a1[18];
    }
    v63 = v5;
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    v14 = (_QWORD *)operator new();
    *v14 = v4 + 7;
    std::mutex::lock((std::mutex *)(v4 + 7));
    *(_QWORD *)&v64 = v14;
    *((_QWORD *)&v64 + 1) = v4;
    if (!*((_BYTE *)v4 + 48))
      sub_20E866B34();
    v15 = v4[4];
    v16 = *v4;
    v17 = (_QWORD *)(*v4 + 16 * v15);
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
    *v17 = v9;
    v19 = v16 + 16 * v15;
    v20 = *(std::__shared_weak_count **)(v19 + 8);
    *(_QWORD *)(v19 + 8) = v6;
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = (v4[1] - *v4) >> 4;
    v24 = v4[5];
    v25 = v4[4] + 1;
    if (v25 >= v23)
      v26 = (v4[1] - *v4) >> 4;
    else
      v26 = 0;
    v4[4] = v25 - v26;
    if (v24 == v23)
    {
      v27 = v4[3] + 1;
      if (v27 < v23)
        v23 = 0;
      v4[3] = v27 - v23;
      v28 = (std::mutex **)v64;
      if (!(_QWORD)v64)
      {
LABEL_37:
        v38 = (uint64_t **)a1[9];
        v64 = 0uLL;
        v39 = (std::__shared_weak_count *)a1[5];
        if (v39)
        {
          v40 = std::__shared_weak_count::lock(v39);
          if (v40)
          {
            v41 = v40;
            v42 = a1[4];
            v43 = (unint64_t *)&v40->__shared_weak_owners_;
            do
              v44 = __ldxr(v43);
            while (__stxr(v44 + 1, v43));
            *(_QWORD *)&v64 = v42;
            *((_QWORD *)&v64 + 1) = v40;
            v45 = (unint64_t *)&v40->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          else
          {
            v64 = 0uLL;
          }
        }
        v47 = (char *)operator new(0x30uLL);
        *(_QWORD *)v47 = &off_24C9C6D30;
        *(_OWORD *)(v47 + 8) = v64;
        v64 = 0uLL;
        *((_QWORD *)v47 + 3) = v9;
        *((_QWORD *)v47 + 4) = v6;
        v65 = 0;
        v66 = 0;
        v68 = v47;
        sub_210216F3C(*v38, (uint64_t)v67);
        v48 = v68;
        if (v68 == v67)
        {
          v49 = 4;
          v48 = v67;
        }
        else
        {
          if (!v68)
            goto LABEL_51;
          v49 = 5;
        }
        (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_51:
        if (v63)
        {
          v50 = (unint64_t *)&v63->__shared_owners_;
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 - 1, v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
            std::__shared_weak_count::__release_weak(v63);
          }
        }
        return;
      }
    }
    else
    {
      v4[5] = v24 + 1;
      v28 = (std::mutex **)v64;
      if (!(_QWORD)v64)
        goto LABEL_37;
    }
    std::mutex::unlock(*v28);
    MEMORY[0x212BC6398](v28, 0x20C4093837F09);
    goto LABEL_37;
  }
  v29 = (uint64_t **)a1[9];
  v62 = 0uLL;
  v30 = (std::__shared_weak_count *)a1[5];
  if (v30)
  {
    v31 = std::__shared_weak_count::lock(v30);
    if (v31)
    {
      v32 = v31;
      v33 = a1[4];
      v34 = (unint64_t *)&v31->__shared_weak_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
      *(_QWORD *)&v62 = v33;
      *((_QWORD *)&v62 + 1) = v31;
      v36 = (unint64_t *)&v31->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    else
    {
      v62 = 0uLL;
    }
  }
  v52 = *a2;
  v53 = a2[1];
  if (v53)
  {
    v54 = (unint64_t *)&v53->~__shared_weak_count_0;
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
  }
  v56 = (char *)operator new(0x28uLL);
  *(_QWORD *)v56 = &off_24C9C6DB0;
  *(_OWORD *)(v56 + 8) = v62;
  *((_QWORD *)v56 + 3) = v52;
  *((_QWORD *)v56 + 4) = v53;
  v66 = (__int128 *)v56;
  sub_210216F3C(*v29, (uint64_t)&v64);
  v60 = v66;
  if (v66 == &v64)
  {
    v61 = 4;
    v60 = &v64;
  }
  else
  {
    if (!v66)
      return;
    v61 = 5;
  }
  (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v60 + 8 * v61))(v60, v57, v58, v59);
}

void sub_20EBB4CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a18;
  if (a18 == v18)
  {
    v21 = 4;
    v20 = &a15;
  }
  else
  {
    if (!a18)
    {
      sub_20EBB635C((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
  sub_20EBB635C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EBB4CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char *a23)
{
  char *v23;
  char *v25;
  uint64_t v26;

  v25 = a23;
  if (a23 == v23)
  {
    v26 = 4;
    v25 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_6:
  sub_20EA02254((uint64_t)&a15);
  sub_20E86665C((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_20EBB4D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  std::__shared_weak_count *v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_20EA0228C((std::mutex ***)va1);
  std::__shared_weak_count::__release_weak(v5);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EBB4D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  va_list va;

  va_start(va, a5);
  MEMORY[0x212BC6398](v6, 0x20C4093837F09);
  std::__shared_weak_count::__release_weak(v5);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EBB4DA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::__shared_weak_count *v13;

  std::__shared_weak_count::__release_weak(v13);
  sub_20E86665C((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_20EBB4DC0(_QWORD *a1, std::__shared_weak_count_vtbl **a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *p_shared_weak_owners;
  unint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count **v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  std::mutex **v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t **v43;
  std::__shared_weak_count *v44;
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  char *v52;
  std::string *v53;
  uint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count_vtbl *v59;
  std::__shared_weak_count_vtbl *v60;
  unint64_t *v61;
  unint64_t v62;
  _QWORD *v63;
  char *v64;
  __int128 *v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  __int128 *v70;
  std::string *v71;
  std::runtime_error *exception;
  std::runtime_error *v73;
  std::__shared_weak_count *v74[2];
  _QWORD *v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  std::runtime_error v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count *v80;
  __int128 v81;
  _QWORD *v82;
  __int128 *v83;
  _QWORD v84[3];
  std::string v85;
  std::string *v86;
  uint64_t v87;

  v87 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v81 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v81 + 1) = 45;
    v69 = (_QWORD *)a1[6];
    v68 = a1 + 6;
    v67 = v69;
    v70 = (__int128 *)*((unsigned __int8 *)v68 + 23);
    if ((char)v70 < 0)
      v70 = (__int128 *)v68[1];
    else
      v67 = v68;
    v82 = v67;
    v83 = v70;
    sub_20E8778D4((uint64_t)&v81, (uint64_t)v84, 0, 0, &v85);
    if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v71 = &v85;
    else
      v71 = (std::string *)v85.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v78, (const char *)v71);
    v78.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v73 = std::runtime_error::runtime_error(exception, &v78);
    v73->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v73, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C6E30;
    v6[1].__vftable = *a3;
    v77 = v6;
    v75 = &v6[1].__vftable;
    v76 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v9 = (std::__shared_weak_count *)operator new(0x28uLL);
    v10 = v9;
    v9->__shared_owners_ = 0;
    v11 = (unint64_t *)&v9->__shared_owners_;
    v9->__shared_weak_owners_ = 0;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C6CE0;
    v12 = (uint64_t)a2[1];
    v9[1].__vftable = *a2;
    v13 = v9 + 1;
    v9[1].__shared_owners_ = v12;
    if (v12)
    {
      v14 = (unint64_t *)(v12 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v79 = v9 + 1;
    v80 = v9;
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v17 = __ldxr(p_shared_weak_owners);
    while (__stxr(v17 + 1, p_shared_weak_owners));
    v18 = (uint64_t *)a1[18];
    v19 = (_QWORD *)operator new();
    *v19 = v18 + 7;
    std::mutex::lock((std::mutex *)(v18 + 7));
    *(_QWORD *)&v81 = v19;
    *((_QWORD *)&v81 + 1) = v18;
    if (!*((_BYTE *)v18 + 48))
      sub_20E866B34();
    v20 = v18[4];
    v21 = *v18;
    v22 = (std::__shared_weak_count **)(*v18 + 16 * v20);
    do
      v23 = __ldxr(v11);
    while (__stxr(v23 + 1, v11));
    *v22 = v13;
    v24 = v21 + 16 * v20;
    v25 = *(std::__shared_weak_count **)(v24 + 8);
    *(_QWORD *)(v24 + 8) = v10;
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v28 = (v18[1] - *v18) >> 4;
    v29 = v18[5];
    v30 = v18[4] + 1;
    if (v30 >= v28)
      v31 = (v18[1] - *v18) >> 4;
    else
      v31 = 0;
    v18[4] = v30 - v31;
    if (v29 == v28)
    {
      v32 = v18[3] + 1;
      if (v32 < v28)
        v28 = 0;
      v18[3] = v32 - v28;
      v33 = (std::mutex **)v81;
      if (!(_QWORD)v81)
      {
LABEL_40:
        v43 = (uint64_t **)a1[9];
        v81 = 0uLL;
        v44 = (std::__shared_weak_count *)a1[5];
        if (v44)
        {
          v45 = std::__shared_weak_count::lock(v44);
          if (v45)
          {
            v46 = v45;
            v47 = a1[4];
            v48 = (unint64_t *)&v45->__shared_weak_owners_;
            do
              v49 = __ldxr(v48);
            while (__stxr(v49 + 1, v48));
            *(_QWORD *)&v81 = v47;
            *((_QWORD *)&v81 + 1) = v45;
            v50 = (unint64_t *)&v45->__shared_owners_;
            do
              v51 = __ldaxr(v50);
            while (__stlxr(v51 - 1, v50));
            if (!v51)
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v46);
            }
          }
          else
          {
            v81 = 0uLL;
          }
        }
        v52 = (char *)operator new(0x38uLL);
        *(_QWORD *)v52 = &off_24C9C6E80;
        *(_OWORD *)(v52 + 8) = v81;
        v81 = 0uLL;
        *((_QWORD *)v52 + 3) = v13;
        *((_QWORD *)v52 + 4) = v10;
        v82 = 0;
        v83 = 0;
        *((_QWORD *)v52 + 5) = v75;
        *((_QWORD *)v52 + 6) = v76;
        v84[0] = 0;
        v84[1] = 0;
        v86 = (std::string *)v52;
        sub_210216F3C(*v43, (uint64_t)&v85);
        v53 = v86;
        if (v86 == &v85)
        {
          v54 = 4;
          v53 = &v85;
        }
        else
        {
          if (!v86)
            goto LABEL_54;
          v54 = 5;
        }
        (*(void (**)(void))(v53->__r_.__value_.__r.__words[0] + 8 * v54))();
LABEL_54:
        if (v80)
        {
          v55 = &v80->__shared_owners_;
          do
            v56 = __ldaxr((unint64_t *)v55);
          while (__stlxr(v56 - 1, (unint64_t *)v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
            std::__shared_weak_count::__release_weak(v80);
          }
        }
        if (v77)
        {
          v57 = (unint64_t *)&v77->__shared_owners_;
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        return;
      }
    }
    else
    {
      v18[5] = v29 + 1;
      v33 = (std::mutex **)v81;
      if (!(_QWORD)v81)
        goto LABEL_40;
    }
    std::mutex::unlock(*v33);
    MEMORY[0x212BC6398](v33, 0x20C4093837F09);
    goto LABEL_40;
  }
  v34 = (uint64_t **)a1[9];
  *(_OWORD *)v74 = 0uLL;
  v35 = (std::__shared_weak_count *)a1[5];
  if (v35)
  {
    v36 = std::__shared_weak_count::lock(v35);
    if (v36)
    {
      v37 = v36;
      v38 = (std::__shared_weak_count *)a1[4];
      v39 = (unint64_t *)&v36->__shared_weak_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
      v74[0] = v38;
      v74[1] = v36;
      v41 = (unint64_t *)&v36->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    else
    {
      *(_OWORD *)v74 = 0uLL;
    }
  }
  v59 = *a2;
  v60 = a2[1];
  if (v60)
  {
    v61 = (unint64_t *)&v60->~__shared_weak_count_0;
    do
      v62 = __ldxr(v61);
    while (__stxr(v62 + 1, v61));
  }
  v63 = operator new(0x20uLL);
  v63[1] = 0;
  v63[2] = 0;
  *v63 = &off_24C9C6E30;
  v63[3] = *a3;
  *a3 = 0;
  v64 = (char *)operator new(0x38uLL);
  *(_QWORD *)v64 = &off_24C9C6F00;
  *(_OWORD *)(v64 + 8) = *(_OWORD *)v74;
  *((_QWORD *)v64 + 3) = v59;
  *((_QWORD *)v64 + 4) = v60;
  *((_QWORD *)v64 + 5) = v63 + 3;
  *((_QWORD *)v64 + 6) = v63;
  v83 = (__int128 *)v64;
  sub_210216F3C(*v34, (uint64_t)&v81);
  v65 = v83;
  if (v83 == &v81)
  {
    v66 = 4;
    v65 = &v81;
  }
  else
  {
    if (!v83)
      return;
    v66 = 5;
  }
  (*(void (**)(__int128 *))(*(_QWORD *)v65 + 8 * v66))(v65);
}

void sub_20EBB549C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::runtime_error a20,std::exception_ptr a21,uint64_t a22,uint64_t a23,std::exception_ptr a24)
{
  std::__assoc_sub_state **v24;
  uint64_t v25;
  std::__assoc_sub_state *v26;
  std::exception_ptr v27;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v26 = *v24;
    if (*v24)
    {
      std::exception_ptr::exception_ptr(&a24, &a21);
      v27.__ptr_ = &a24;
      std::__assoc_sub_state::set_exception(v26, v27);
      std::exception_ptr::~exception_ptr(&a24);
      std::exception_ptr::~exception_ptr(&a21);
      std::runtime_error::~runtime_error(&a20);
      if (*(char *)(v25 - 97) < 0)
        operator delete(*(void **)(v25 - 120));
      JUMPOUT(0x20EBB53ACLL);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EBB5510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::runtime_error a20,std::exception_ptr a21,uint64_t a22,uint64_t a23,std::exception_ptr a24)
{
  uint64_t v24;

  std::exception_ptr::~exception_ptr(&a21);
  std::runtime_error::~runtime_error(&a20);
  if (*(char *)(v24 - 97) < 0)
  {
    operator delete(*(void **)(v24 - 120));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EBB5564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char *a28)
{
  char *v28;
  char *v30;
  uint64_t v31;

  v30 = a28;
  if (a28 == v28)
  {
    v31 = 4;
    v30 = &a25;
  }
  else
  {
    if (!a28)
    {
      sub_20EBB7258(&a9);
      _Unwind_Resume(a1);
    }
    v31 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v30 + 8 * v31))();
  sub_20EBB7258(&a9);
  _Unwind_Resume(a1);
}

void sub_20EBB55B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  uint64_t v10;

  sub_20E86665C(v10);
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EBB55E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  va_list va1;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  va_list va2;
  uint64_t v24;
  va_list va3;

  va_start(va3, a8);
  va_start(va2, a8);
  va_start(va1, a8);
  va_start(va, a8);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v16 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v22 = va_arg(va3, _QWORD);
  v24 = va_arg(va3, _QWORD);
  v11 = *(_QWORD **)(v9 - 96);
  if (v11 == v8)
  {
    v12 = 4;
    v11 = (_QWORD *)(v9 - 120);
  }
  else
  {
    if (!v11)
      goto LABEL_6;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_6:
  sub_20EA031A8((uint64_t *)va3);
  sub_20E86665C((uint64_t)va2);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EBB5684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EBB56A0(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_210217048(*v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    sub_210217048(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_20EBB5714(_QWORD *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t **)a1[9];
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = (uint64_t **)a1[9];
  }
  v6 = a1[4];
  v5 = a1[5];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24C9C6F80;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = &off_24C9B4780;
  v10[4] = v9;
  v14 = v10;
  sub_210216F3C(*v4, (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_20EBB5844(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EBB58B8(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C9C7000;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_210216F3C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20EBB59C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20EBB5A2C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9C7080;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EBB5C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EBB5D0C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9C7100;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EBB5F24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EBB5FEC(uint64_t a1)
{
  return sub_20EBB615C(a1 - 16);
}

void sub_20EBB5FF4(uint64_t a1)
{
  sub_20EBB615C(a1 - 16);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EBB601C(uint64_t a1, uint64_t a2)
{
  return sub_20EBB5714((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20EBB6024@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EBB5A2C((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20EBB602C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EBB5D0C((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_20EBB6034(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EBB603C(uint64_t a1)
{
  return sub_20EBB615C(a1 - 24);
}

void sub_20EBB6044(uint64_t a1)
{
  sub_20EBB615C(a1 - 24);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EBB606C(uint64_t a1)
{
  return sub_20EBB58B8((_QWORD *)(a1 - 24));
}

uint64_t sub_20EBB6074(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20EBB607C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EBB60E4(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EBB614C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20EBB615C(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24C9C6AF0;
  *(_QWORD *)(a1 + 16) = &unk_24C9C6B68;
  *(_QWORD *)(a1 + 24) = &unk_24C9C6BA8;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x212BC6398](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v13 = *(_QWORD *)(a1 + 96);
    v14 = *(uint64_t **)(a1 + 104);
    v15 = *v14;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v13 + 8);
    **(_QWORD **)(v13 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v14 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v14[1];
        (*(void (**)(uint64_t *))v14[2])(v14 + 2);
        operator delete(v14);
        v14 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

uint64_t sub_20EBB635C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 8);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_20EBB63CC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C6CE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EBB63DC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C6CE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EBB640C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

_QWORD *sub_20EBB6468(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9C6D30;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EBB64AC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9C6D30;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EBB6500(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9C6D30;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20EBB6570(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9C6D30;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20EBB65C0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EBB65FC(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EBB6634(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      LOBYTE(v20) = 0;
      v21 = 0;
      sub_20EBB6958((uint64_t *)(v8 + 88), v5, &v20);
      if (v21)
        sub_20EBB6D1C(&v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EBB67FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    sub_20EBB6D1C(&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EBB68E0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio17feature_detection17VIOMLFea"
                     "tureEventEEES9_vS9_Lb0EE25EnqueueMessageAndDispatchIZNKSA_4SendERKS9_EUlT_T0_E_EEvSD_SE_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio17feature_detectio"
                                "n17VIOMLFeatureEventEEES9_vS9_Lb0EE25EnqueueMessageAndDispatchIZNKSA_4SendERKS9_EUlT_T0_"
                                "E_EEvSD_SE_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio17feature_detection17VIOMLFeatureEventEEES9_vS9_Lb0EE25EnqueueMessageAndDispatchIZNKSA_4SendERKS9_EUlT_T0_E_EEvSD_SE_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio17feature_detection17VIOMLFeatureEventEEES9_vS9_Lb0EE25EnqueueMessageAndDispatchIZNKSA_4SendERKS9_EUlT_T0_E_EEvSD_SE_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EBB694C()
{
  return &unk_24C9C6D90;
}

void sub_20EBB6958(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::exception_ptr v22;
  uint64_t v23;
  std::__shared_weak_count *v24;

  v6 = *a1;
  if (!v6)
  {
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v7 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (byte_254A6DE68)
      v8 = byte_254A6DE70 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_254A6DE40;
      for (i = qword_254A6DE48; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, "", 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      abort();
    qword_254A6DE58(unk_254A6DE60, "callable_", 9, "", 0);
    v6 = *a1;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&v23, v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, uint64_t *))(j[2] + 16))(j + 2, &v23);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!v14)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v22.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v22), v15))
    {
      sub_20E96CE78(2u);
    }
    v16 = v24;
    *(_QWORD *)(v14 + 144) = v23;
    *(_QWORD *)(v14 + 152) = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock((std::mutex *)(v14 + 24));
  }
  v19 = v24;
  if (v24)
  {
    v20 = (unint64_t *)&v24->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_20EBB6C14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, int a14, __int16 a15, char a16, unsigned __int8 a17, char a18)
{
  std::mutex *v18;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;

  std::mutex::unlock(v18);
  sub_20E86665C((uint64_t)&a18);
  if (a2 == 1)
  {
    v21 = (uint64_t *)__cxa_begin_catch(a1);
    v22 = *v21;
    a11 = *(_QWORD *)(*(_QWORD *)(*v21 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a10 = (*(uint64_t (**)(void))(v22 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a11, "\n", "message: ", (const char *)&a10, "\n");
    if ((a17 & 0x80u) == 0)
      v23 = (uint64_t *)&a12;
    else
      v23 = a12;
    if ((a17 & 0x80u) == 0)
      v24 = a17;
    else
      v24 = a13;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v23, v24, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20EBB6CF0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20EBB6D10);
}

uint64_t *sub_20EBB6D1C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x212BC5AF8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20EBB6E08(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, std::logic_error a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::logic_error::~logic_error(&a11);
  JUMPOUT(0x20EBB6D64);
}

_QWORD *sub_20EBB6E44(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24C9C6DB0;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)a1[2];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_20EBB6EC0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24C9C6DB0;
  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  std::__shared_weak_count::__release_weak(v5);
LABEL_9:
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EBB6F4C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x28uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9C6DB0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20EBB6FBC(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9C6DB0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20EBB700C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void sub_20EBB707C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)__p[2];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)__p[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  operator delete(__p);
}

void sub_20EBB70EC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        LOBYTE(v8) = 0;
        v9 = 0;
        sub_20EBB6958((uint64_t *)(v5 + 88), a1 + 24, &v8);
        if (v9)
          sub_20EBB6D1C(&v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EBB7194(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    sub_20EBB6D1C(&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EBB71E0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio17feature_detection17VIOMLFea"
                     "tureEventEEES9_vS9_Lb0EE4SendERKS9_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio17feature_detectio"
                                "n17VIOMLFeatureEventEEES9_vS9_Lb0EE4SendERKS9_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio17feature_detection17VIOMLFeatureEventEEES9_vS9_Lb0EE4SendERKS9_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio17feature_detection17VIOMLFeatureEventEEES9_vS9_Lb0EE4SendERKS9_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EBB724C()
{
  return &unk_24C9C6E10;
}

_QWORD *sub_20EBB7258(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  v2 = (std::__shared_weak_count *)a1[5];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[3];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[3];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[1];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_20EBB7300(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C6E30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EBB7310(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C6E30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t *sub_20EBB7340(uint64_t a1)
{
  return sub_20EBB6D1C((uint64_t *)(a1 + 24));
}

_QWORD *sub_20EBB734C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9C6E80;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20EBB73D4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9C6E80;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x212BC6398);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_20EBB746C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9C6E80;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_20EBB74FC(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9C6E80;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20EBB756C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_20EBB75EC(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_20EBB7668(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v23, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v25, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_20EBB6958(v13, v5, (uint64_t *)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    sub_20EBB6D1C((uint64_t *)&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EBB7944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20EBB7970(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t v15;
  std::__assoc_sub_state **v16;
  std::__assoc_sub_state *v17;
  std::exception_ptr v18;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v17 = *v16;
  if (v17)
  {
    std::exception_ptr::exception_ptr(&a15, &a11);
    v18.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v17, v18);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a11);
    std::runtime_error::~runtime_error(&a10);
    if (!v15)
      JUMPOUT(0x20EBB777CLL);
    JUMPOUT(0x20EBB774CLL);
  }
  sub_20E96CE78(3u);
}

void sub_20EBB79CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  std::exception_ptr::~exception_ptr(&a11);
  std::runtime_error::~runtime_error(&a10);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v16)
  {
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v15)
  {
    v23 = (unint64_t *)&v15->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20EBB79F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  if (a11)
    sub_20EBB6D1C(&a10);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v11)
  {
    v19 = (unint64_t *)&v11->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20EBB7AE4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio17feature_detection17VIOMLFea"
                     "tureEventEEES9_vS9_Lb0EE25EnqueueMessageAndDispatchIZNKSA_7ProcessERKS9_NS4_7promiseIS9_EEEUlT_T0_E"
                     "_EEvSD_SG_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio17feature_detectio"
                                "n17VIOMLFeatureEventEEES9_vS9_Lb0EE25EnqueueMessageAndDispatchIZNKSA_7ProcessERKS9_NS4_7"
                                "promiseIS9_EEEUlT_T0_E_EEvSD_SG_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio17feature_detection17VIOMLFeatureEventEEES9_vS9_Lb0EE25EnqueueMessageAndDispatchIZNKSA_7ProcessERKS9_NS4_7promiseIS9_EEEUlT_T0_E_EEvSD_SG_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio17feature_detection17VIOMLFeatureEventEEES9_vS9_Lb0EE25EnqueueMessageAndDispatchIZNKSA_7ProcessERKS9_NS4_7promiseIS9_EEEUlT_T0_E_EEvSD_SG_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EBB7B50()
{
  return &unk_24C9C6EE0;
}

_QWORD *sub_20EBB7B5C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  *a1 = &off_24C9C6F00;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_20EBB7C10(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  *a1 = &off_24C9C6F00;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EBB7CD4(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9C6F00;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_20EBB7D64(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9C6F00;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20EBB7DD4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
}

void sub_20EBB7E80(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)__p[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  operator delete(__p);
}

void sub_20EBB7F28(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v9, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[5];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_20EBB6958((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t *)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    sub_20EBB6D1C((uint64_t *)&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_20EBB8038(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  __break(1u);
}

void sub_20EBB80B0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  uint64_t v11;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  std::runtime_error::~runtime_error(&a10);
  if (v11)
    JUMPOUT(0x20EBB80E4);
  JUMPOUT(0x20EBB8114);
}

uint64_t sub_20EBB811C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio17feature_detection17VIOMLFea"
                     "tureEventEEES9_vS9_Lb0EE7ProcessERKS9_NS4_7promiseIS9_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio17feature_detectio"
                                "n17VIOMLFeatureEventEEES9_vS9_Lb0EE7ProcessERKS9_NS4_7promiseIS9_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio17feature_detection17VIOMLFeatureEventEEES9_vS9_Lb0EE7ProcessERKS9_NS4_7promiseIS9_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio17feature_detection17VIOMLFeatureEventEEES9_vS9_Lb0EE7ProcessERKS9_NS4_7promiseIS9_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EBB8188()
{
  return &unk_24C9C6F60;
}

_QWORD *sub_20EBB8194(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9C6F80;
  v2 = a1[4];
  a1[3] = &off_24C9B4780;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EBB81EC(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9C6F80;
  v2 = a1[4];
  a1[3] = &off_24C9B4780;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EBB8254(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x28uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24C9C6F80;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = &off_24C9B4780;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  return v3;
}

void sub_20EBB82CC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EBB82EC(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24C9C6F80;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = &off_24C9B4780;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_20EBB8354(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_20EBB836C(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = a1[4];
  a1[3] = &off_24C9B4780;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EBB83BC(_QWORD *__p)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = __p[4];
  __p[3] = &off_24C9B4780;
  __p[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EBB8408(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (v5)
      {
        v6 = operator new(0x20uLL);
        v7 = a1[4];
        a1[4] = 0;
        v6[2] = &off_24C9B4780;
        v6[3] = v7;
        v9 = *(_QWORD *)(v5 + 96);
        v8 = (_QWORD *)(v5 + 96);
        *v6 = v9;
        v6[1] = v8;
        *(_QWORD *)(v9 + 8) = v6;
        *v8 = v6;
        ++v8[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EBB84BC(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EBB84F8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio17feature_detection17VIOMLFeat"
                     "ureEventEEES9_vS9_Lb0EE9SubscribeENS1_12ChannelInputIS9_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio17feature_detection"
                                "17VIOMLFeatureEventEEES9_vS9_Lb0EE9SubscribeENS1_12ChannelInputIS9_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio17feature_detection17VIOMLFeatureEventEEES9_vS9_Lb0EE9SubscribeENS1_12ChannelInputIS9_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio17feature_detection17VIOMLFeatureEventEEES9_vS9_Lb0EE9SubscribeENS1_12ChannelInputIS9_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EBB8564()
{
  return &unk_24C9C6FE0;
}

_QWORD *sub_20EBB8570(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9C7000;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EBB85A8(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9C7000;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EBB85F0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9C7000;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20EBB8640(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9C7000;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20EBB8670(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EBB8680(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EBB86AC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EBB8740(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EBB877C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio17feature_detection17VIOMLFeat"
                     "ureEventEEES9_vS9_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio17feature_detection"
                                "17VIOMLFeatureEventEEES9_vS9_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio17feature_detection17VIOMLFeatureEventEEES9_vS9_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio17feature_detection17VIOMLFeatureEventEEES9_vS9_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EBB87E8()
{
  return &unk_24C9C7060;
}

_QWORD *sub_20EBB87F4(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9C7080;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EBB882C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9C7080;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EBB8874(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9C7080;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EBB88CC(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9C7080;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EBB8904(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EBB8914(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EBB8940(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  char *v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (!v5)
      {
LABEL_11:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v6 = (uint64_t *)a1[3];
      v7 = *(_QWORD *)(v5 + 112);
      v18 = 0;
      v17 = 0uLL;
      if (v7)
      {
        if (v7 >> 61)
          sub_20E92CED8();
        v8 = (char *)operator new(8 * v7);
        v9 = &v8[8 * v7];
        *(_QWORD *)&v17 = v8;
        *((_QWORD *)&v17 + 1) = v8;
        v18 = v9;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
        {
          do
          {
LABEL_7:
            v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 24) + 48))(*(_QWORD *)(v11 + 24));
            sub_20E9B2D04((uint64_t *)&v20, &v19);
            v11 = *(_QWORD *)(v11 + 8);
          }
          while (v11 != v10);
          *(_OWORD *)__p = v17;
          v16 = v18;
          v12 = *v6;
          if (*v6)
            goto LABEL_9;
          goto LABEL_18;
        }
      }
      else
      {
        v9 = 0;
        v8 = 0;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
          goto LABEL_7;
      }
      *(int64x2_t *)__p = vdupq_n_s64((unint64_t)v8);
      v16 = v9;
      v12 = *v6;
      if (*v6)
      {
LABEL_9:
        sub_20EA04C5C(v12, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_11;
      }
LABEL_18:
      sub_20E96CE78(3u);
    }
  }
}

void sub_20EBB8ABC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EBB8B2C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio17feature_detection17VIOMLFea"
                     "tureEventEEES9_vS9_Lb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio17feature_detectio"
                                "n17VIOMLFeatureEventEEES9_vS9_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio17feature_detection17VIOMLFeatureEventEEES9_vS9_Lb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio17feature_detection17VIOMLFeatureEventEEES9_vS9_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EBB8B98()
{
  return &unk_24C9C70E0;
}

_QWORD *sub_20EBB8BA4(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9C7100;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EBB8BDC(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9C7100;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EBB8C24(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9C7100;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EBB8C7C(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9C7100;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EBB8CB4(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EBB8CC4(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EBB8CF0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_20E96CE78(3u);
        sub_20EA04C5C(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EBB8DA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EBB8DF4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio17feature_detection17VIOMLFea"
                     "tureEventEEES9_vS9_Lb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio17feature_detectio"
                                "n17VIOMLFeatureEventEEES9_vS9_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio17feature_detection17VIOMLFeatureEventEEES9_vS9_Lb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio17feature_detection17VIOMLFeatureEventEEES9_vS9_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EBB8E60()
{
  return &unk_24C9C7160;
}

void sub_20EBB8E70(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EBB8E94(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EBB8EAC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS0_INS1_3vio17feature_detection17VIOM"
                     "LFeatureEventEEES9_vS9_Lb0EEEE27__shared_ptr_default_deleteISA_SA_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS0_INS1_3vio17feature_dete"
                                "ction17VIOMLFeatureEventEEES9_vS9_Lb0EEEE27__shared_ptr_default_deleteISA_SA_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS0_INS1_3vio17feature_detection17VIOMLFeatureEventEEES9_vS9_Lb0EEEE27__shared_ptr_default_deleteISA_SA_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS0_INS1_3vio17feature_detection17VIOMLFeatureEventEEES9_vS9_Lb0EEEE27__shared_ptr_default_deleteISA_SA_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20EBB8F20(uint64_t a1)
{
  sub_20EBBA828(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EBB8F44(_QWORD *a1, std::__shared_weak_count_vtbl **a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  uint64_t v8;
  _QWORD *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  std::mutex **v28;
  uint64_t **v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t **v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  char *v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count_vtbl *v52;
  std::__shared_weak_count_vtbl *v53;
  unint64_t *v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 *v60;
  uint64_t v61;
  __int128 v62;
  std::__shared_weak_count *v63;
  __int128 v64;
  uint64_t v65;
  __int128 *v66;
  _BYTE v67[24];
  _BYTE *v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v4 = (uint64_t *)a1[18];
  if (v4)
  {
    v5 = (std::__shared_weak_count *)operator new(0x28uLL);
    v6 = v5;
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__shared_weak_owners_ = 0;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C73C0;
    v8 = (uint64_t)a2[1];
    v5[1].__vftable = *a2;
    v9 = &v5[1].__vftable;
    v5[1].__shared_owners_ = v8;
    if (v8)
    {
      v10 = (unint64_t *)(v8 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
      v4 = (uint64_t *)a1[18];
    }
    v63 = v5;
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    v14 = (_QWORD *)operator new();
    *v14 = v4 + 7;
    std::mutex::lock((std::mutex *)(v4 + 7));
    *(_QWORD *)&v64 = v14;
    *((_QWORD *)&v64 + 1) = v4;
    if (!*((_BYTE *)v4 + 48))
      sub_20E866B34();
    v15 = v4[4];
    v16 = *v4;
    v17 = (_QWORD *)(*v4 + 16 * v15);
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
    *v17 = v9;
    v19 = v16 + 16 * v15;
    v20 = *(std::__shared_weak_count **)(v19 + 8);
    *(_QWORD *)(v19 + 8) = v6;
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = (v4[1] - *v4) >> 4;
    v24 = v4[5];
    v25 = v4[4] + 1;
    if (v25 >= v23)
      v26 = (v4[1] - *v4) >> 4;
    else
      v26 = 0;
    v4[4] = v25 - v26;
    if (v24 == v23)
    {
      v27 = v4[3] + 1;
      if (v27 < v23)
        v23 = 0;
      v4[3] = v27 - v23;
      v28 = (std::mutex **)v64;
      if (!(_QWORD)v64)
      {
LABEL_37:
        v38 = (uint64_t **)a1[9];
        v64 = 0uLL;
        v39 = (std::__shared_weak_count *)a1[5];
        if (v39)
        {
          v40 = std::__shared_weak_count::lock(v39);
          if (v40)
          {
            v41 = v40;
            v42 = a1[4];
            v43 = (unint64_t *)&v40->__shared_weak_owners_;
            do
              v44 = __ldxr(v43);
            while (__stxr(v44 + 1, v43));
            *(_QWORD *)&v64 = v42;
            *((_QWORD *)&v64 + 1) = v40;
            v45 = (unint64_t *)&v40->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          else
          {
            v64 = 0uLL;
          }
        }
        v47 = (char *)operator new(0x30uLL);
        *(_QWORD *)v47 = &off_24C9C7410;
        *(_OWORD *)(v47 + 8) = v64;
        v64 = 0uLL;
        *((_QWORD *)v47 + 3) = v9;
        *((_QWORD *)v47 + 4) = v6;
        v65 = 0;
        v66 = 0;
        v68 = v47;
        sub_210216F3C(*v38, (uint64_t)v67);
        v48 = v68;
        if (v68 == v67)
        {
          v49 = 4;
          v48 = v67;
        }
        else
        {
          if (!v68)
            goto LABEL_51;
          v49 = 5;
        }
        (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_51:
        if (v63)
        {
          v50 = (unint64_t *)&v63->__shared_owners_;
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 - 1, v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
            std::__shared_weak_count::__release_weak(v63);
          }
        }
        return;
      }
    }
    else
    {
      v4[5] = v24 + 1;
      v28 = (std::mutex **)v64;
      if (!(_QWORD)v64)
        goto LABEL_37;
    }
    std::mutex::unlock(*v28);
    MEMORY[0x212BC6398](v28, 0x20C4093837F09);
    goto LABEL_37;
  }
  v29 = (uint64_t **)a1[9];
  v62 = 0uLL;
  v30 = (std::__shared_weak_count *)a1[5];
  if (v30)
  {
    v31 = std::__shared_weak_count::lock(v30);
    if (v31)
    {
      v32 = v31;
      v33 = a1[4];
      v34 = (unint64_t *)&v31->__shared_weak_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
      *(_QWORD *)&v62 = v33;
      *((_QWORD *)&v62 + 1) = v31;
      v36 = (unint64_t *)&v31->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    else
    {
      v62 = 0uLL;
    }
  }
  v52 = *a2;
  v53 = a2[1];
  if (v53)
  {
    v54 = (unint64_t *)&v53->~__shared_weak_count_0;
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
  }
  v56 = (char *)operator new(0x28uLL);
  *(_QWORD *)v56 = &off_24C9C7490;
  *(_OWORD *)(v56 + 8) = v62;
  *((_QWORD *)v56 + 3) = v52;
  *((_QWORD *)v56 + 4) = v53;
  v66 = (__int128 *)v56;
  sub_210216F3C(*v29, (uint64_t)&v64);
  v60 = v66;
  if (v66 == &v64)
  {
    v61 = 4;
    v60 = &v64;
  }
  else
  {
    if (!v66)
      return;
    v61 = 5;
  }
  (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v60 + 8 * v61))(v60, v57, v58, v59);
}

void sub_20EBB93A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a18;
  if (a18 == v18)
  {
    v21 = 4;
    v20 = &a15;
  }
  else
  {
    if (!a18)
    {
      sub_20EBB635C((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
  sub_20EBB635C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EBB93F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char *a23)
{
  char *v23;
  char *v25;
  uint64_t v26;

  v25 = a23;
  if (a23 == v23)
  {
    v26 = 4;
    v25 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_6:
  sub_20EA02254((uint64_t)&a15);
  sub_20E86665C((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_20EBB9448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  std::__shared_weak_count *v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_20EA0228C((std::mutex ***)va1);
  std::__shared_weak_count::__release_weak(v5);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EBB946C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  va_list va;

  va_start(va, a5);
  MEMORY[0x212BC6398](v6, 0x20C4093837F09);
  std::__shared_weak_count::__release_weak(v5);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EBB94A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::__shared_weak_count *v13;

  std::__shared_weak_count::__release_weak(v13);
  sub_20E86665C((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_20EBB94C0(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EBB94D0(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EBB94DC(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20EBB94EC(_QWORD *a1, std::__shared_weak_count_vtbl **a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *p_shared_weak_owners;
  unint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count **v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  std::mutex **v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t **v43;
  std::__shared_weak_count *v44;
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  char *v52;
  std::string *v53;
  uint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count_vtbl *v59;
  std::__shared_weak_count_vtbl *v60;
  unint64_t *v61;
  unint64_t v62;
  _QWORD *v63;
  char *v64;
  __int128 *v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  __int128 *v70;
  std::string *v71;
  std::runtime_error *exception;
  std::runtime_error *v73;
  std::__shared_weak_count *v74[2];
  _QWORD *v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  std::runtime_error v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count *v80;
  __int128 v81;
  _QWORD *v82;
  __int128 *v83;
  _QWORD v84[3];
  std::string v85;
  std::string *v86;
  uint64_t v87;

  v87 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v81 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v81 + 1) = 45;
    v69 = (_QWORD *)a1[6];
    v68 = a1 + 6;
    v67 = v69;
    v70 = (__int128 *)*((unsigned __int8 *)v68 + 23);
    if ((char)v70 < 0)
      v70 = (__int128 *)v68[1];
    else
      v67 = v68;
    v82 = v67;
    v83 = v70;
    sub_20E8778D4((uint64_t)&v81, (uint64_t)v84, 0, 0, &v85);
    if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v71 = &v85;
    else
      v71 = (std::string *)v85.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v78, (const char *)v71);
    v78.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v73 = std::runtime_error::runtime_error(exception, &v78);
    v73->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v73, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9B85F0;
    v6[1].__vftable = *a3;
    v77 = v6;
    v75 = &v6[1].__vftable;
    v76 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v9 = (std::__shared_weak_count *)operator new(0x28uLL);
    v10 = v9;
    v9->__shared_owners_ = 0;
    v11 = (unint64_t *)&v9->__shared_owners_;
    v9->__shared_weak_owners_ = 0;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C73C0;
    v12 = (uint64_t)a2[1];
    v9[1].__vftable = *a2;
    v13 = v9 + 1;
    v9[1].__shared_owners_ = v12;
    if (v12)
    {
      v14 = (unint64_t *)(v12 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v79 = v9 + 1;
    v80 = v9;
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v17 = __ldxr(p_shared_weak_owners);
    while (__stxr(v17 + 1, p_shared_weak_owners));
    v18 = (uint64_t *)a1[18];
    v19 = (_QWORD *)operator new();
    *v19 = v18 + 7;
    std::mutex::lock((std::mutex *)(v18 + 7));
    *(_QWORD *)&v81 = v19;
    *((_QWORD *)&v81 + 1) = v18;
    if (!*((_BYTE *)v18 + 48))
      sub_20E866B34();
    v20 = v18[4];
    v21 = *v18;
    v22 = (std::__shared_weak_count **)(*v18 + 16 * v20);
    do
      v23 = __ldxr(v11);
    while (__stxr(v23 + 1, v11));
    *v22 = v13;
    v24 = v21 + 16 * v20;
    v25 = *(std::__shared_weak_count **)(v24 + 8);
    *(_QWORD *)(v24 + 8) = v10;
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v28 = (v18[1] - *v18) >> 4;
    v29 = v18[5];
    v30 = v18[4] + 1;
    if (v30 >= v28)
      v31 = (v18[1] - *v18) >> 4;
    else
      v31 = 0;
    v18[4] = v30 - v31;
    if (v29 == v28)
    {
      v32 = v18[3] + 1;
      if (v32 < v28)
        v28 = 0;
      v18[3] = v32 - v28;
      v33 = (std::mutex **)v81;
      if (!(_QWORD)v81)
      {
LABEL_40:
        v43 = (uint64_t **)a1[9];
        v81 = 0uLL;
        v44 = (std::__shared_weak_count *)a1[5];
        if (v44)
        {
          v45 = std::__shared_weak_count::lock(v44);
          if (v45)
          {
            v46 = v45;
            v47 = a1[4];
            v48 = (unint64_t *)&v45->__shared_weak_owners_;
            do
              v49 = __ldxr(v48);
            while (__stxr(v49 + 1, v48));
            *(_QWORD *)&v81 = v47;
            *((_QWORD *)&v81 + 1) = v45;
            v50 = (unint64_t *)&v45->__shared_owners_;
            do
              v51 = __ldaxr(v50);
            while (__stlxr(v51 - 1, v50));
            if (!v51)
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v46);
            }
          }
          else
          {
            v81 = 0uLL;
          }
        }
        v52 = (char *)operator new(0x38uLL);
        *(_QWORD *)v52 = &off_24C9C7510;
        *(_OWORD *)(v52 + 8) = v81;
        v81 = 0uLL;
        *((_QWORD *)v52 + 3) = v13;
        *((_QWORD *)v52 + 4) = v10;
        v82 = 0;
        v83 = 0;
        *((_QWORD *)v52 + 5) = v75;
        *((_QWORD *)v52 + 6) = v76;
        v84[0] = 0;
        v84[1] = 0;
        v86 = (std::string *)v52;
        sub_210216F3C(*v43, (uint64_t)&v85);
        v53 = v86;
        if (v86 == &v85)
        {
          v54 = 4;
          v53 = &v85;
        }
        else
        {
          if (!v86)
            goto LABEL_54;
          v54 = 5;
        }
        (*(void (**)(void))(v53->__r_.__value_.__r.__words[0] + 8 * v54))();
LABEL_54:
        if (v80)
        {
          v55 = &v80->__shared_owners_;
          do
            v56 = __ldaxr((unint64_t *)v55);
          while (__stlxr(v56 - 1, (unint64_t *)v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
            std::__shared_weak_count::__release_weak(v80);
          }
        }
        if (v77)
        {
          v57 = (unint64_t *)&v77->__shared_owners_;
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        return;
      }
    }
    else
    {
      v18[5] = v29 + 1;
      v33 = (std::mutex **)v81;
      if (!(_QWORD)v81)
        goto LABEL_40;
    }
    std::mutex::unlock(*v33);
    MEMORY[0x212BC6398](v33, 0x20C4093837F09);
    goto LABEL_40;
  }
  v34 = (uint64_t **)a1[9];
  *(_OWORD *)v74 = 0uLL;
  v35 = (std::__shared_weak_count *)a1[5];
  if (v35)
  {
    v36 = std::__shared_weak_count::lock(v35);
    if (v36)
    {
      v37 = v36;
      v38 = (std::__shared_weak_count *)a1[4];
      v39 = (unint64_t *)&v36->__shared_weak_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
      v74[0] = v38;
      v74[1] = v36;
      v41 = (unint64_t *)&v36->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    else
    {
      *(_OWORD *)v74 = 0uLL;
    }
  }
  v59 = *a2;
  v60 = a2[1];
  if (v60)
  {
    v61 = (unint64_t *)&v60->~__shared_weak_count_0;
    do
      v62 = __ldxr(v61);
    while (__stxr(v62 + 1, v61));
  }
  v63 = operator new(0x20uLL);
  v63[1] = 0;
  v63[2] = 0;
  *v63 = &unk_24C9B85F0;
  v63[3] = *a3;
  *a3 = 0;
  v64 = (char *)operator new(0x38uLL);
  *(_QWORD *)v64 = &off_24C9C7590;
  *(_OWORD *)(v64 + 8) = *(_OWORD *)v74;
  *((_QWORD *)v64 + 3) = v59;
  *((_QWORD *)v64 + 4) = v60;
  *((_QWORD *)v64 + 5) = v63 + 3;
  *((_QWORD *)v64 + 6) = v63;
  v83 = (__int128 *)v64;
  sub_210216F3C(*v34, (uint64_t)&v81);
  v65 = v83;
  if (v83 == &v81)
  {
    v66 = 4;
    v65 = &v81;
  }
  else
  {
    if (!v83)
      return;
    v66 = 5;
  }
  (*(void (**)(__int128 *))(*(_QWORD *)v65 + 8 * v66))(v65);
}

