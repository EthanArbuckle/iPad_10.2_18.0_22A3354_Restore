void sub_20EE0DAC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  sub_20E86665C((uint64_t)&a39);
  sub_20E86665C((uint64_t)&a34);
  _Unwind_Resume(a1);
}

void sub_20EE0DAE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void (**a30)(_QWORD),uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,std::runtime_error a48)
{
  void *v48;

  sub_20E96E218((uint64_t)&a48);
  if (v48)
    free(v48);
  if (a28 < 0)
    operator delete(__p);
  if (!a39)
  {
    (*a30)(&a30);
    sub_20E86665C((uint64_t)&a41);
    _Unwind_Resume(a1);
  }
  sub_20EB90FE0((char **)&a30);
  sub_20E86665C((uint64_t)&a41);
  _Unwind_Resume(a1);
}

void sub_20EE0DC98()
{
  std::mutex::unlock(&stru_254A5A410);
  JUMPOUT(0x20EE0DCACLL);
}

void **sub_20EE0DCF8(void **a1)
{
  void **v2;
  void **v3;
  void *v4;
  void **v5;
  void **v6;
  void *v7;

  v2 = (void **)a1[3];
  if (v2)
  {
    v3 = (void **)a1[4];
    v4 = a1[3];
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*(v3 - 3));
        v3 -= 3;
      }
      while (v3 != v2);
      v4 = a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  v5 = (void **)*a1;
  if (*a1)
  {
    v6 = (void **)a1[1];
    v7 = *a1;
    if (v6 != v5)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = *a1;
    }
    a1[1] = v5;
    operator delete(v7);
  }
  return a1;
}

uint64_t sub_20EE0DDB0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  if (!*(_BYTE *)(a1 + 40))
  {
    (**(void (***)(uint64_t))a1)(a1);
    return a1;
  }
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 24);
    v4 = *(void **)(a1 + 16);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 16);
    }
    *(_QWORD *)(a1 + 24) = v2;
    operator delete(v4);
  }
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v6)
    return a1;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
    return a1;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20EE0DE84(unint64_t *a1, const void **a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  const void *v7;
  size_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  const void *v12;
  size_t v13;
  size_t v14;
  int v15;
  __int128 v16;
  void *v17;
  void *v18;
  void **v19;
  uint64_t v20;
  void **v21;
  int v22;
  int v23;
  int v24;
  int v25;
  BOOL v27;
  BOOL v28;
  void *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  __int128 v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  __int128 v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  __int128 *v49;
  __int128 v50;
  char v51;
  __int128 v52;
  unint64_t v53;
  char *v54;
  char *v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  __int128 v59;
  unint64_t v60;
  unint64_t v61;
  __int128 v62;
  void *v63;
  size_t v64;
  void *__p[2];
  uint64_t v67;
  void *__dst[2];
  uint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  _QWORD *v74;

  v2 = *a1;
  v3 = a1[1];
  if (v3 != *a1)
  {
    v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - v2) >> 3);
    v5 = *((char *)a2 + 23);
    v6 = (unint64_t)a2;
    if (v5 >= 0)
      v7 = a2;
    else
      v7 = *a2;
    if (v5 >= 0)
      v8 = *((unsigned __int8 *)a2 + 23);
    else
      v8 = (size_t)a2[1];
    while (1)
    {
      v9 = v4 >> 1;
      v10 = v2 + 24 * (v4 >> 1);
      v11 = *(char *)(v10 + 23);
      if (v11 >= 0)
        v12 = (const void *)(v2 + 24 * (v4 >> 1));
      else
        v12 = *(const void **)v10;
      if (v11 >= 0)
        v13 = *(unsigned __int8 *)(v10 + 23);
      else
        v13 = *(_QWORD *)(v10 + 8);
      if (v8 >= v13)
        v14 = v13;
      else
        v14 = v8;
      v15 = memcmp(v12, v7, v14);
      if (v15)
      {
        if ((v15 & 0x80000000) == 0)
          goto LABEL_9;
      }
      else if (v13 >= v8)
      {
        goto LABEL_9;
      }
      v2 = v10 + 24;
      v9 = v4 + ~v9;
LABEL_9:
      v4 = v9;
      if (!v9)
        goto LABEL_25;
    }
  }
  v6 = (unint64_t)a2;
LABEL_25:
  if (v2 == v3)
    goto LABEL_58;
  if (*(char *)(v2 + 23) < 0)
  {
    sub_20E860C04(__dst, *(void **)v2, *(_QWORD *)(v2 + 8));
    if ((*(char *)(v6 + 23) & 0x80000000) == 0)
      goto LABEL_28;
  }
  else
  {
    v16 = *(_OWORD *)v2;
    v69 = *(_QWORD *)(v2 + 16);
    *(_OWORD *)__dst = v16;
    if ((*(char *)(v6 + 23) & 0x80000000) == 0)
    {
LABEL_28:
      *(_OWORD *)__p = *(_OWORD *)v6;
      v67 = *(_QWORD *)(v6 + 16);
      goto LABEL_31;
    }
  }
  sub_20E860C04(__p, *(void **)v6, *(_QWORD *)(v6 + 8));
LABEL_31:
  if (v67 >= 0)
    v17 = (void *)HIBYTE(v67);
  else
    v17 = __p[1];
  v18 = (void *)HIBYTE(v69);
  if (v69 < 0)
    v18 = __dst[1];
  if (v17 == v18)
  {
    if (v69 >= 0)
      v19 = __dst;
    else
      v19 = (void **)__dst[0];
    if (v67 < 0)
    {
      v29 = __p[0];
      v28 = memcmp(__p[0], v19, (size_t)__p[1]) == 0;
      operator delete(v29);
      if (v69 < 0)
        goto LABEL_57;
      goto LABEL_52;
    }
    if (!HIBYTE(v67))
    {
      if (SHIBYTE(v69) < 0)
        operator delete(__dst[0]);
      return;
    }
    v20 = HIBYTE(v67) - 1;
    v21 = __p;
    do
    {
      v23 = *(unsigned __int8 *)v21;
      v21 = (void **)((char *)v21 + 1);
      v22 = v23;
      v25 = *(unsigned __int8 *)v19;
      v19 = (void **)((char *)v19 + 1);
      v24 = v25;
      v27 = v20-- != 0;
      v28 = v22 == v24;
    }
    while (v22 == v24 && v27);
  }
  else
  {
    v28 = 0;
  }
  if (v67 < 0)
  {
    operator delete(__p[0]);
    if (v69 < 0)
      goto LABEL_57;
LABEL_52:
    if (v28)
      return;
    goto LABEL_58;
  }
  if ((v69 & 0x8000000000000000) == 0)
    goto LABEL_52;
LABEL_57:
  operator delete(__dst[0]);
  if (v28)
    return;
LABEL_58:
  v31 = *a1;
  v30 = a1[1];
  v32 = v2 - *a1;
  v33 = v32 / 24;
  v34 = *a1 + 24 * (v32 / 24);
  v35 = a1[2];
  if (v30 < v35)
  {
    if (v34 == v30)
    {
      if (*(char *)(v6 + 23) < 0)
      {
        sub_20E860C04((_BYTE *)(*a1 + 24 * (v32 / 24)), *(void **)v6, *(_QWORD *)(v6 + 8));
      }
      else
      {
        v45 = *(_OWORD *)v6;
        *(_QWORD *)(v34 + 16) = *(_QWORD *)(v6 + 16);
        *(_OWORD *)v34 = v45;
      }
      a1[1] = v34 + 24;
      return;
    }
    v36 = v34 + 24;
    v37 = v30 - 24;
    if (v30 < 0x18)
    {
      a1[1] = v30;
      if (v30 == v36)
      {
LABEL_87:
        if (v34 <= v6)
          v6 += 24 * (a1[1] > v6);
        if (v34 != v6)
        {
          v51 = *(_BYTE *)(v6 + 23);
          if (*(char *)(v34 + 23) < 0)
          {
            if (v51 >= 0)
              v63 = (void *)v6;
            else
              v63 = *(void **)v6;
            if (v51 >= 0)
              v64 = *(unsigned __int8 *)(v6 + 23);
            else
              v64 = *(_QWORD *)(v6 + 8);
            sub_20E867CBC((void **)v34, v63, v64);
          }
          else if ((*(_BYTE *)(v6 + 23) & 0x80) != 0)
          {
            sub_20E867BF8((_QWORD *)v34, *(void **)v6, *(_QWORD *)(v6 + 8));
          }
          else
          {
            v52 = *(_OWORD *)v6;
            *(_QWORD *)(v34 + 16) = *(_QWORD *)(v6 + 16);
            *(_OWORD *)v34 = v52;
          }
        }
        return;
      }
    }
    else
    {
      v38 = v30 - 24;
      v39 = a1[1];
      do
      {
        v40 = *(_OWORD *)v38;
        *(_QWORD *)(v39 + 16) = *(_QWORD *)(v38 + 16);
        *(_OWORD *)v39 = v40;
        v39 += 24;
        *(_QWORD *)(v38 + 8) = 0;
        *(_QWORD *)(v38 + 16) = 0;
        *(_QWORD *)v38 = 0;
        v38 += 24;
      }
      while (v38 < v30);
      a1[1] = v39;
      if (v30 == v36)
        goto LABEL_87;
    }
    v48 = 8 * ((uint64_t)(v30 - v36) >> 3);
    do
    {
      if (*(char *)(v37 + 23) < 0)
        operator delete(*(void **)v37);
      v49 = (__int128 *)(v34 + v48 - 24);
      v50 = *v49;
      *(_QWORD *)(v37 + 16) = *(_QWORD *)(v34 + v48 - 8);
      *(_OWORD *)v37 = v50;
      v37 -= 24;
      *(_BYTE *)(v34 + v48 - 1) = 0;
      *(_BYTE *)v49 = 0;
      v48 -= 24;
    }
    while (v48);
    goto LABEL_87;
  }
  v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - v31) >> 3) + 1;
  if (v41 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - v31) >> 3);
  if (2 * v42 > v41)
    v41 = 2 * v42;
  if (v42 >= 0x555555555555555)
    v43 = 0xAAAAAAAAAAAAAAALL;
  else
    v43 = v41;
  v74 = a1 + 2;
  if (v43)
  {
    if (v43 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v44 = (char *)operator new(24 * v43);
  }
  else
  {
    v44 = 0;
  }
  v46 = &v44[24 * v33];
  v70 = v44;
  v71 = v46;
  v72 = v46;
  v73 = &v44[24 * v43];
  if (v33 == v43)
  {
    if (v32 < 24)
    {
      if ((unint64_t)(v32 + 23) < 0x2F)
        v53 = 1;
      else
        v53 = 2 * v33;
      if (v53 > 0xAAAAAAAAAAAAAAALL)
        sub_20E877A38();
      v54 = (char *)operator new(24 * v53);
      v46 = &v54[24 * (v53 >> 2)];
      v70 = v54;
      v71 = v46;
      v72 = v46;
      v73 = &v54[24 * v53];
      if (v44)
        operator delete(v44);
    }
    else
    {
      v47 = v33 + 2;
      if (v33 >= -1)
        v47 = v33 + 1;
      v46 -= 24 * (v47 >> 1);
      v71 = v46;
      v72 = v46;
    }
  }
  if (*(char *)(v6 + 23) < 0)
  {
    sub_20E860C04(v46, *(void **)v6, *(_QWORD *)(v6 + 8));
    v46 = v71;
    v55 = v72 + 24;
    v56 = *a1;
    if (*a1 != v34)
      goto LABEL_101;
LABEL_108:
    v58 = v46;
    v60 = a1[1];
    if (v60 == v34)
      goto LABEL_104;
    do
    {
LABEL_109:
      v62 = *(_OWORD *)v34;
      *((_QWORD *)v55 + 2) = *(_QWORD *)(v34 + 16);
      *(_OWORD *)v55 = v62;
      v55 += 24;
      *(_QWORD *)(v34 + 8) = 0;
      *(_QWORD *)(v34 + 16) = 0;
      *(_QWORD *)v34 = 0;
      v34 += 24;
    }
    while (v34 != v60);
    v61 = *a1;
    v34 = a1[1];
    *a1 = (unint64_t)v58;
    a1[1] = (unint64_t)v55;
    a1[2] = (unint64_t)v73;
    if (v34 == v61)
    {
LABEL_105:
      if (!v34)
        return;
LABEL_116:
      operator delete((void *)v34);
      return;
    }
    goto LABEL_113;
  }
  *(_OWORD *)v46 = *(_OWORD *)v6;
  *((_QWORD *)v46 + 2) = *(_QWORD *)(v6 + 16);
  v55 = v46 + 24;
  v56 = *a1;
  if (*a1 == v34)
    goto LABEL_108;
LABEL_101:
  v57 = v34;
  do
  {
    v58 = v46 - 24;
    v59 = *(_OWORD *)(v57 - 24);
    *((_QWORD *)v46 - 1) = *(_QWORD *)(v57 - 8);
    *(_OWORD *)(v46 - 24) = v59;
    *(_QWORD *)(v57 - 16) = 0;
    *(_QWORD *)(v57 - 8) = 0;
    *(_QWORD *)(v57 - 24) = 0;
    v46 -= 24;
    v57 -= 24;
  }
  while (v57 != v56);
  v60 = a1[1];
  if (v60 != v34)
    goto LABEL_109;
LABEL_104:
  v61 = *a1;
  *a1 = (unint64_t)v58;
  a1[1] = (unint64_t)v55;
  a1[2] = (unint64_t)v73;
  if (v34 == v61)
    goto LABEL_105;
  do
  {
LABEL_113:
    if (*(char *)(v34 - 1) < 0)
      operator delete(*(void **)(v34 - 24));
    v34 -= 24;
  }
  while (v34 != v61);
  v34 = v61;
  if (v61)
    goto LABEL_116;
}

void sub_20EE0E488(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20EE0E490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EE0E4AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_20E877E3C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EE0E4C0(_QWORD *a1@<X0>, std::string ***a2@<X1>, uint64_t a3@<X8>)
{
  std::string *v5;
  void *v6;
  uint64_t *v7;
  void *v8;
  unsigned __int8 v9;
  char *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  __int128 v17;
  unsigned __int8 *v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  char *v38;
  std::runtime_error v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  char v47;
  _OWORD *v48;
  __int128 v49;
  std::string::size_type v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  std::string::size_type v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  __int128 v66;
  char *v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  std::string::size_type v71;
  std::string::size_type v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  char *v81;
  std::string::size_type v82;
  __int128 v83;
  std::string::size_type v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  std::runtime_error_vtbl *v88;
  const char *v89;
  int64_t v90;
  unint64_t v91;
  _BYTE *v92;
  uint64_t v93;
  __int128 v94;
  char *v95;
  std::runtime_error_vtbl *v96;
  _BYTE *v97;
  void **v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  _BYTE *v106;
  void **v107;
  std::string::size_type v108;
  std::runtime_error *v109;
  void *v110;
  uint64_t v111;
  std::string::size_type v112;
  std::string::size_type j;
  uint64_t k;
  int v115;
  const void **v116;
  uint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t *v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  int v144;
  int v145;
  int v146;
  int v147;
  int v148;
  int v149;
  uint64_t v150;
  size_t v151;
  uint64_t v152;
  uint64_t v153;
  const void **v154;
  uint64_t v155;
  size_t *v156;
  uint64_t v157;
  uint64_t v158;
  std::string::size_type v159;
  std::string::size_type v160;
  void *v161;
  uint64_t v162;
  uint64_t v163;
  size_t *v164;
  void *v165;
  uint64_t v166;
  uint64_t *v167;
  __uint64_t *v168;
  unsigned __int8 v169;
  char *v171;
  size_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t m;
  uint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *p_shared_owners;
  unint64_t v179;
  std::runtime_error_vtbl *v180;
  const char *v181;
  char *v182;
  char *v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  std::__fs::filesystem::path *v187;
  std::string::size_type v188;
  std::string::size_type v189;
  std::string::size_type size;
  void *v191;
  std::runtime_error_vtbl *v192;
  const char *imp;
  std::runtime_error_vtbl *v194;
  std::string::size_type v195;
  uint64_t v196;
  void (*v197)(_QWORD);
  uint64_t v198;
  std::string::size_type v199;
  uint64_t v200;
  int v201;
  unsigned __int8 *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  uint64_t v220;
  unint64_t *v221;
  unint64_t v222;
  std::string::size_type v223;
  std::string::size_type v224;
  void *v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  std::runtime_error *v229;
  uint64_t v230;
  char **v231;
  uint64_t v232;
  std::string *v233;
  std::string *v235;
  std::string *v236;
  uint64_t v237;
  std::__shared_weak_count *v238;
  void *__p;
  char *v240;
  unint64_t v241;
  std::string v242;
  std::runtime_error v243;
  uint64_t v244;
  std::string v245;
  char v246;
  std::string v247;
  std::string v248;
  std::string __dst;
  std::string v250;
  char v251;
  char v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  char v261;
  void *v262[3];
  __uint64_t v263[2];
  __int128 v264;
  int v265;
  uint64_t v266;

  v266 = *MEMORY[0x24BDAC8D0];
  sub_20EE0BF14((uint64_t)&__dst, (uint64_t)a1);
  if (v250.__r_.__value_.__s.__data_[0])
  {
    std::runtime_error::runtime_error(&v243, (const std::runtime_error *)&__dst);
    v243.__vftable = (std::runtime_error_vtbl *)&off_24C9EDA58;
    LODWORD(v244) = __dst.__r_.__value_.__r.__words[2];
    std::runtime_error::runtime_error((std::runtime_error *)a3, &v243);
    *(_QWORD *)a3 = &off_24C9EDA58;
    *(_DWORD *)(a3 + 16) = v244;
    *(_BYTE *)(a3 + 24) = 0;
    std::runtime_error::~runtime_error(&v243);
    if (v250.__r_.__value_.__s.__data_[0])
      std::runtime_error::~runtime_error((std::runtime_error *)&__dst);
    return;
  }
  v229 = (std::runtime_error *)a3;
  v5 = **a2;
  v231 = (char **)(*a2)[1];
  if (v5 == (std::string *)v231)
  {
LABEL_452:
    LOBYTE(v229->__vftable) = 1;
    LOBYTE(v229[1].__imp_.__imp_) = 1;
    return;
  }
  v232 = (uint64_t)(a1 + 27);
  while (v5->__r_.__value_.__r.__words[0] == v5->__r_.__value_.__l.__size_)
  {
LABEL_9:
    v5 += 2;
    if (v5 == (std::string *)v231)
      goto LABEL_452;
  }
  v233 = v5;
  v7 = sub_210219C18();
  LODWORD(v250.__r_.__value_.__l.__data_) = 0;
  v235 = v5 + 1;
  sub_20EB9CFE0((uint64_t)&__p, (uint64_t)&__dst, (uint64_t)&v5[1]);
  if (LODWORD(v250.__r_.__value_.__l.__data_) == -1)
    sub_20E877AB8();
  v263[0] = (__uint64_t)&v248;
  ((void (*)(std::runtime_error *__return_ptr, __uint64_t *, std::string *))off_24C9EA608[LODWORD(v250.__r_.__value_.__l.__data_)])(&v243, v263, &__dst);
  if (LODWORD(v250.__r_.__value_.__l.__data_) != -1)
    ((void (*)(void **, std::string *))off_24C9EA5F0[LODWORD(v250.__r_.__value_.__l.__data_)])(&__p, &__dst);
  if (v244 >= 0)
    v8 = &v243;
  else
    v8 = v243.__vftable;
  v9 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (!atomic_load(&qword_254A5A450))
    goto LABEL_36;
  LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
  *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v8;
  v11 = (char *)_os_log_send_and_compose_impl();
  v12 = strlen(v11);
  v263[0] = 0;
  pthread_threadid_np(0, v263);
  v13 = v263[0];
  timespec_get((timespec *)v263, 1);
  sub_210219E20(&__dst, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v7 + 1), (__int128 *)(v7 + 5), "Anchors:Save: Starting saving anchors from group %s", 0x33uLL, v11, v12, v13, v263);
  std::mutex::lock(&stru_254A5A410);
  v14 = qword_254A5A458;
  for (i = unk_254A5A460; v14 != i; v14 += 40)
  {
    v16 = *(_QWORD *)(v14 + 32);
    if (!v16)
      sub_20E86D37C();
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v16 + 48))(v16, &__dst);
  }
  std::mutex::unlock(&stru_254A5A410);
  if ((SBYTE7(v258) & 0x80000000) == 0)
  {
    v5 = v233;
    if ((SHIBYTE(v256) & 0x80000000) == 0)
      goto LABEL_24;
LABEL_27:
    operator delete(*((void **)&v255 + 1));
    if (!(_BYTE)v255)
      goto LABEL_30;
LABEL_28:
    if (SHIBYTE(v254) < 0)
      operator delete(*((void **)&v253 + 1));
    goto LABEL_30;
  }
  operator delete((void *)v257);
  v5 = v233;
  if (SHIBYTE(v256) < 0)
    goto LABEL_27;
LABEL_24:
  if ((_BYTE)v255)
    goto LABEL_28;
LABEL_30:
  if ((_BYTE)v253 && v252 < 0)
    operator delete((void *)v250.__r_.__value_.__l.__size_);
  if ((v250.__r_.__value_.__s.__data_[7] & 0x80000000) == 0)
  {
    if (!v11)
      goto LABEL_36;
    goto LABEL_35;
  }
  operator delete((void *)__dst.__r_.__value_.__l.__size_);
  if (v11)
LABEL_35:
    free(v11);
LABEL_36:
  if (os_signpost_enabled((os_log_t)*v7))
  {
    LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v8;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  if (SHIBYTE(v244) < 0)
    operator delete(v243.__vftable);
  *((_BYTE *)&v242.__r_.__value_.__s + 23) = 0;
  v240 = 0;
  v241 = 0;
  __p = 0;
  v242.__r_.__value_.__s.__data_[0] = 0;
  if (&__p != (void **)v5)
  {
    if (SHIBYTE(v5[1].__r_.__value_.__r.__words[2]) < 0)
    {
      sub_20E867BF8(&v242, v5[1].__r_.__value_.__l.__data_, v5[1].__r_.__value_.__l.__size_);
    }
    else
    {
      v17 = *(_OWORD *)&v235->__r_.__value_.__l.__data_;
      v242.__r_.__value_.__r.__words[2] = v235->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v242.__r_.__value_.__l.__data_ = v17;
    }
  }
  if (SHIBYTE(v5[1].__r_.__value_.__r.__words[2]) < 0)
    sub_20E860C04(&__dst, v5[1].__r_.__value_.__l.__data_, v5[1].__r_.__value_.__l.__size_);
  else
    __dst = *v235;
  sub_20EE27554(v232, &__dst, (uint64_t)v263);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (!(*(unsigned int (**)(_QWORD, __uint64_t *))(*(_QWORD *)a1[34] + 176))(a1[34], v263))
  {
    sub_20EE0DE84(a1 + 31, (const void **)&v235->__r_.__value_.__l.__data_);
    goto LABEL_54;
  }
  v18 = (unsigned __int8 *)a1[32];
  if (v18 != sub_20EE0C9E8((unsigned __int8 *)a1[31], v18, (const void **)&v235->__r_.__value_.__l.__data_))
    goto LABEL_54;
  v243.__vftable = 0;
  v243.__imp_.__imp_ = 0;
  v244 = 0;
  if (SHIBYTE(v5[1].__r_.__value_.__r.__words[2]) < 0)
    sub_20E860C04(&v248, v5[1].__r_.__value_.__l.__data_, v5[1].__r_.__value_.__l.__size_);
  else
    v248 = *v235;
  memset(&v245, 0, sizeof(v245));
  v236 = &v245;
  LOBYTE(v237) = 0;
  v187 = (std::__fs::filesystem::path *)operator new(0x18uLL);
  v245.__r_.__value_.__r.__words[0] = (std::string::size_type)v187;
  v245.__r_.__value_.__l.__size_ = (std::string::size_type)v187;
  v188 = (std::string::size_type)&v187[1];
  v245.__r_.__value_.__r.__words[2] = (std::string::size_type)&v187[1];
  if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0)
    sub_20E860C04(v187, v248.__r_.__value_.__l.__data_, v248.__r_.__value_.__l.__size_);
  else
    *v187 = (std::__fs::filesystem::path)v248;
  v245.__r_.__value_.__l.__size_ = v188;
  sub_20EE0CB44((uint64_t)a1, (uint64_t *)&v243, (uint64_t)&__dst);
  v189 = v245.__r_.__value_.__r.__words[0];
  if (v245.__r_.__value_.__r.__words[0])
  {
    size = v245.__r_.__value_.__l.__size_;
    v191 = (void *)v245.__r_.__value_.__r.__words[0];
    if (v245.__r_.__value_.__l.__size_ != v245.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(size - 1) < 0)
          operator delete(*(void **)(size - 24));
        size -= 24;
      }
      while (size != v189);
      v191 = (void *)v245.__r_.__value_.__r.__words[0];
    }
    v245.__r_.__value_.__l.__size_ = v189;
    operator delete(v191);
  }
  v192 = v243.__vftable;
  if (v243.__vftable)
  {
    imp = v243.__imp_.__imp_;
    v194 = v243.__vftable;
    if (v243.__imp_.__imp_ != (const char *)v243.__vftable)
    {
      do
      {
        if (*(imp - 1) < 0)
          operator delete(*((void **)imp - 3));
        imp -= 24;
      }
      while (imp != (const char *)v192);
      v194 = v243.__vftable;
    }
    v243.__imp_.__imp_ = (const char *)v192;
    operator delete(v194);
  }
  if ((SHIBYTE(v248.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v195 = __dst.__r_.__value_.__r.__words[0];
    if (v250.__r_.__value_.__s.__data_[16])
      goto LABEL_390;
LABEL_411:
    (*(void (**)(std::string *))v195)(&__dst);
    goto LABEL_447;
  }
  operator delete(v248.__r_.__value_.__l.__data_);
  v195 = __dst.__r_.__value_.__r.__words[0];
  if (!v250.__r_.__value_.__s.__data_[16])
    goto LABEL_411;
LABEL_390:
  if (v195)
  {
    v197 = *(void (**)(_QWORD))v195;
    v196 = *(_QWORD *)(v195 + 8);
    if (*(_QWORD *)v195 == v196)
    {
LABEL_432:
      if (v250.__r_.__value_.__s.__data_[16])
        goto LABEL_433;
      (*(void (**)(std::string *))__dst.__r_.__value_.__l.__data_)(&__dst);
LABEL_447:
      v5 = v233;
      goto LABEL_54;
    }
    if (v196 - (_QWORD)v197 != 48)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/UserAnchorNodeGroup/src/AnchorIONode.cpp", 147, (uint64_t)"ld_anchors.size() == 1u", 23, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_462;
      }
      v197 = *(void (**)(_QWORD))v195;
    }
    v198 = HIBYTE(v233[1].__r_.__value_.__r.__words[2]);
    if ((v198 & 0x80u) == 0)
      v199 = HIBYTE(v233[1].__r_.__value_.__r.__words[2]);
    else
      v199 = v233[1].__r_.__value_.__l.__size_;
    v200 = *((unsigned __int8 *)v197 + 47);
    v201 = (char)v200;
    if ((v200 & 0x80u) != 0)
      v200 = *((_QWORD *)v197 + 4);
    if (v199 == v200)
    {
      if (v201 >= 0)
        v202 = (unsigned __int8 *)v197 + 24;
      else
        v202 = (unsigned __int8 *)*((_QWORD *)v197 + 3);
      if ((v198 & 0x80) != 0)
      {
        if (!memcmp(v235->__r_.__value_.__l.__data_, v202, v233[1].__r_.__value_.__l.__size_))
          goto LABEL_415;
      }
      else
      {
        if (!*((_BYTE *)&v233[1].__r_.__value_.__s + 23))
          goto LABEL_415;
        v203 = 0;
        while (v233[1].__r_.__value_.__s.__data_[v203] == v202[v203])
        {
          if (v198 == ++v203)
            goto LABEL_415;
        }
      }
    }
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/UserAnchorNodeGroup/src/AnchorIONode.cpp", 148, (uint64_t)"ld_anchors.front().group_id_ == gid", 35, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      v197 = *(void (**)(_QWORD))v195;
LABEL_415:
      v205 = *(_QWORD *)v197;
      v204 = *((_QWORD *)v197 + 1);
      if (*(_QWORD *)v197 != v204)
      {
        v206 = v240;
        do
        {
          while ((unint64_t)v206 >= v241)
          {
            v206 = sub_20EE134B0(&__p, v205);
            v240 = v206;
            v205 += 344;
            if (v205 == v204)
              goto LABEL_432;
          }
          *(_OWORD *)v206 = *(_OWORD *)v205;
          v206[16] = 0;
          v206[40] = 0;
          if (*(_BYTE *)(v205 + 40))
          {
            if (*(char *)(v205 + 39) < 0)
            {
              sub_20E860C04(v206 + 16, *(void **)(v205 + 16), *(_QWORD *)(v205 + 24));
            }
            else
            {
              v208 = *(_OWORD *)(v205 + 16);
              *((_QWORD *)v206 + 4) = *(_QWORD *)(v205 + 32);
              *((_OWORD *)v206 + 1) = v208;
            }
            v206[40] = 1;
          }
          v209 = *(_OWORD *)(v205 + 48);
          v210 = *(_OWORD *)(v205 + 80);
          *((_OWORD *)v206 + 4) = *(_OWORD *)(v205 + 64);
          *((_OWORD *)v206 + 5) = v210;
          *((_OWORD *)v206 + 3) = v209;
          v211 = *(_OWORD *)(v205 + 96);
          v212 = *(_OWORD *)(v205 + 112);
          v213 = *(_OWORD *)(v205 + 144);
          *((_OWORD *)v206 + 8) = *(_OWORD *)(v205 + 128);
          *((_OWORD *)v206 + 9) = v213;
          *((_OWORD *)v206 + 6) = v211;
          *((_OWORD *)v206 + 7) = v212;
          v214 = *(_OWORD *)(v205 + 160);
          v215 = *(_OWORD *)(v205 + 176);
          v216 = *(_OWORD *)(v205 + 208);
          *((_OWORD *)v206 + 12) = *(_OWORD *)(v205 + 192);
          *((_OWORD *)v206 + 13) = v216;
          *((_OWORD *)v206 + 10) = v214;
          *((_OWORD *)v206 + 11) = v215;
          v217 = *(_OWORD *)(v205 + 224);
          v218 = *(_OWORD *)(v205 + 240);
          v219 = *(_OWORD *)(v205 + 256);
          v206[272] = *(_BYTE *)(v205 + 272);
          *((_OWORD *)v206 + 15) = v218;
          *((_OWORD *)v206 + 16) = v219;
          *((_OWORD *)v206 + 14) = v217;
          v206[280] = 0;
          v206[296] = 0;
          if (*(_BYTE *)(v205 + 296))
          {
            *((_QWORD *)v206 + 35) = *(_QWORD *)(v205 + 280);
            v220 = *(_QWORD *)(v205 + 288);
            *((_QWORD *)v206 + 36) = v220;
            if (v220)
            {
              v221 = (unint64_t *)(v220 + 8);
              do
                v222 = __ldxr(v221);
              while (__stxr(v222 + 1, v221));
            }
            v206[296] = 1;
          }
          v207 = *(_OWORD *)(v205 + 304);
          *((_QWORD *)v206 + 40) = *(_QWORD *)(v205 + 320);
          *((_OWORD *)v206 + 19) = v207;
          *(_OWORD *)(v206 + 328) = *(_OWORD *)(v205 + 328);
          v206 += 344;
          v240 = v206;
          v205 += 344;
        }
        while (v205 != v204);
      }
      goto LABEL_432;
    }
LABEL_462:
    abort();
  }
LABEL_433:
  v223 = __dst.__r_.__value_.__r.__words[2];
  if (__dst.__r_.__value_.__r.__words[2])
  {
    v224 = v250.__r_.__value_.__r.__words[0];
    v225 = (void *)__dst.__r_.__value_.__r.__words[2];
    if (v250.__r_.__value_.__r.__words[0] != __dst.__r_.__value_.__r.__words[2])
    {
      do
      {
        if (*(char *)(v224 - 1) < 0)
          operator delete(*(void **)(v224 - 24));
        v224 -= 24;
      }
      while (v224 != v223);
      v225 = (void *)__dst.__r_.__value_.__r.__words[2];
    }
    v250.__r_.__value_.__r.__words[0] = v223;
    operator delete(v225);
  }
  v226 = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
  v5 = v233;
  if (__dst.__r_.__value_.__l.__size_)
  {
    v227 = (unint64_t *)(__dst.__r_.__value_.__l.__size_ + 8);
    do
      v228 = __ldaxr(v227);
    while (__stlxr(v228 - 1, v227));
    if (!v228)
    {
      ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
      std::__shared_weak_count::__release_weak(v226);
    }
  }
LABEL_54:
  if (SBYTE7(v264) < 0)
    operator delete((void *)v263[0]);
  v20 = (char *)v5->__r_.__value_.__r.__words[0];
  v19 = (char *)v5->__r_.__value_.__l.__size_;
  v21 = v240;
  while (v20 != v19)
  {
    if ((unint64_t)v21 >= v241)
    {
      v21 = sub_20EE134B0(&__p, (uint64_t)v20);
    }
    else
    {
      *(_OWORD *)v21 = *(_OWORD *)v20;
      v21[16] = 0;
      v21[40] = 0;
      if (v20[40])
      {
        if (v20[39] < 0)
        {
          sub_20E860C04(v21 + 16, *((void **)v20 + 2), *((_QWORD *)v20 + 3));
        }
        else
        {
          v23 = *((_OWORD *)v20 + 1);
          *((_QWORD *)v21 + 4) = *((_QWORD *)v20 + 4);
          *((_OWORD *)v21 + 1) = v23;
        }
        v21[40] = 1;
      }
      v24 = *((_OWORD *)v20 + 3);
      v25 = *((_OWORD *)v20 + 5);
      *((_OWORD *)v21 + 4) = *((_OWORD *)v20 + 4);
      *((_OWORD *)v21 + 5) = v25;
      *((_OWORD *)v21 + 3) = v24;
      v26 = *((_OWORD *)v20 + 6);
      v27 = *((_OWORD *)v20 + 7);
      v28 = *((_OWORD *)v20 + 9);
      *((_OWORD *)v21 + 8) = *((_OWORD *)v20 + 8);
      *((_OWORD *)v21 + 9) = v28;
      *((_OWORD *)v21 + 6) = v26;
      *((_OWORD *)v21 + 7) = v27;
      v29 = *((_OWORD *)v20 + 10);
      v30 = *((_OWORD *)v20 + 11);
      v31 = *((_OWORD *)v20 + 13);
      *((_OWORD *)v21 + 12) = *((_OWORD *)v20 + 12);
      *((_OWORD *)v21 + 13) = v31;
      *((_OWORD *)v21 + 10) = v29;
      *((_OWORD *)v21 + 11) = v30;
      v32 = *((_OWORD *)v20 + 14);
      v33 = *((_OWORD *)v20 + 15);
      v34 = *((_OWORD *)v20 + 16);
      v21[272] = v20[272];
      *((_OWORD *)v21 + 15) = v33;
      *((_OWORD *)v21 + 16) = v34;
      *((_OWORD *)v21 + 14) = v32;
      v21[280] = 0;
      v21[296] = 0;
      if (v20[296])
      {
        *((_QWORD *)v21 + 35) = *((_QWORD *)v20 + 35);
        v35 = *((_QWORD *)v20 + 36);
        *((_QWORD *)v21 + 36) = v35;
        if (v35)
        {
          v36 = (unint64_t *)(v35 + 8);
          do
            v37 = __ldxr(v36);
          while (__stxr(v37 + 1, v36));
        }
        v21[296] = 1;
      }
      v22 = *((_OWORD *)v20 + 19);
      *((_QWORD *)v21 + 40) = *((_QWORD *)v20 + 40);
      *((_OWORD *)v21 + 19) = v22;
      *(_OWORD *)(v21 + 328) = *(_OWORD *)(v20 + 328);
      v21 += 344;
    }
    v240 = v21;
    v20 += 344;
  }
  v38 = (char *)__p;
  memset(&v248, 0, sizeof(v248));
  v39 = (std::runtime_error)0;
  v40 = v21 - (_BYTE *)__p;
  if (v21 != __p)
  {
    v41 = 0x82FA0BE82FA0BE83 * (v40 >> 3);
    if (v41 > 0x12F684BDA12F684)
      sub_20E867F44();
    v248.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x82FA0BE82FA0BE88 * (v40 >> 3));
    v248.__r_.__value_.__l.__size_ = v248.__r_.__value_.__r.__words[0];
    v248.__r_.__value_.__r.__words[2] = v248.__r_.__value_.__r.__words[0] + 216 * v41;
    do
    {
      *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = *(_OWORD *)v38;
      v250.__r_.__value_.__s.__data_[0] = 0;
      v251 = 0;
      v42 = v38[40];
      if (v38[40])
      {
        if (v38[39] < 0)
        {
          sub_20E860C04(&v250, *((void **)v38 + 2), *((_QWORD *)v38 + 3));
        }
        else
        {
          v43 = *((_OWORD *)v38 + 1);
          v250.__r_.__value_.__r.__words[2] = *((_QWORD *)v38 + 4);
          *(_OWORD *)&v250.__r_.__value_.__l.__data_ = v43;
        }
        v251 = 1;
      }
      v44 = *(_OWORD *)(v38 + 184);
      v45 = *(_OWORD *)(v38 + 216);
      v255 = *(_OWORD *)(v38 + 200);
      v256 = v45;
      v257 = *(_OWORD *)(v38 + 232);
      v253 = *(_OWORD *)(v38 + 168);
      v254 = v44;
      v46 = *(_OWORD *)(v38 + 264);
      v258 = *(_OWORD *)(v38 + 248);
      v259 = v46;
      v47 = v38[160];
      if (v47)
      {
        v260 = *((_OWORD *)v38 + 9);
        v47 = 1;
      }
      else
      {
        LOBYTE(v260) = 0;
      }
      v261 = v47;
      sub_2102323F4((unsigned __int8 *)v38 + 328, v263);
      v48 = operator new(0x28uLL);
      v262[0] = v48;
      *(_OWORD *)&v262[1] = xmmword_2102E0950;
      v49 = v264;
      *v48 = *(_OWORD *)v263;
      v48[1] = v49;
      *((_DWORD *)v48 + 8) = v265;
      *((_BYTE *)v48 + 36) = 0;
      v50 = v248.__r_.__value_.__l.__size_;
      if (v248.__r_.__value_.__l.__size_ >= v248.__r_.__value_.__r.__words[2])
      {
        v60 = v248.__r_.__value_.__r.__words[0];
        v61 = 0x84BDA12F684BDA13
            * ((uint64_t)(v248.__r_.__value_.__l.__size_ - v248.__r_.__value_.__r.__words[0]) >> 3);
        v62 = v61 + 1;
        if (v61 + 1 > 0x12F684BDA12F684)
          sub_20E867F44();
        if (0x97B425ED097B426
           * ((uint64_t)(v248.__r_.__value_.__r.__words[2] - v248.__r_.__value_.__r.__words[0]) >> 3) > v62)
          v62 = 0x97B425ED097B426
              * ((uint64_t)(v248.__r_.__value_.__r.__words[2] - v248.__r_.__value_.__r.__words[0]) >> 3);
        if (0x84BDA12F684BDA13
           * ((uint64_t)(v248.__r_.__value_.__r.__words[2] - v248.__r_.__value_.__r.__words[0]) >> 3) >= 0x97B425ED097B42)
          v63 = 0x12F684BDA12F684;
        else
          v63 = v62;
        if (v63)
        {
          if (v63 > 0x12F684BDA12F684)
            sub_20E877A38();
          v64 = (char *)operator new(216 * v63);
        }
        else
        {
          v64 = 0;
        }
        v65 = &v64[216 * v61];
        *(_OWORD *)(v65 + 8) = *(_OWORD *)&__dst.__r_.__value_.__r.__words[1];
        v65[24] = 0;
        v65[48] = 0;
        if (v42)
        {
          *((std::string *)v65 + 1) = v250;
          memset(&v250, 0, sizeof(v250));
          v65[48] = 1;
        }
        v66 = v257;
        v67 = &v64[216 * v61];
        *(_OWORD *)(v67 + 136) = v258;
        v68 = v260;
        *(_OWORD *)(v67 + 152) = v259;
        *(_OWORD *)(v67 + 168) = v68;
        v69 = v253;
        *(_OWORD *)(v67 + 72) = v254;
        v70 = v256;
        *(_OWORD *)(v67 + 88) = v255;
        *(_OWORD *)(v67 + 104) = v70;
        *(_OWORD *)(v67 + 120) = v66;
        v71 = (std::string::size_type)&v64[216 * v63];
        v67[184] = v261;
        *(_OWORD *)(v67 + 56) = v69;
        *((_OWORD *)v67 + 12) = *(_OWORD *)v262;
        *((void **)v67 + 26) = v262[2];
        v72 = (std::string::size_type)(v65 + 216);
        memset(v262, 0, sizeof(v262));
        if (v50 != v60)
        {
          v73 = 0;
          do
          {
            v81 = &v65[v73];
            v82 = v50 + v73;
            *((_OWORD *)v81 - 13) = *(_OWORD *)(v50 + v73 - 208);
            v65[v73 - 192] = 0;
            *(v81 - 168) = 0;
            if (*(_BYTE *)(v50 + v73 - 168))
            {
              v83 = *(_OWORD *)(v82 - 192);
              *(_QWORD *)&v65[v73 - 176] = *(_QWORD *)(v82 - 176);
              *(_OWORD *)&v65[v73 - 192] = v83;
              *(_QWORD *)(v82 - 184) = 0;
              *(_QWORD *)(v82 - 176) = 0;
              *(_QWORD *)(v82 - 192) = 0;
              *(v81 - 168) = 1;
            }
            *((_OWORD *)v81 - 10) = *(_OWORD *)(v82 - 160);
            v74 = *(_OWORD *)(v82 - 144);
            v75 = *(_OWORD *)(v82 - 128);
            v76 = *(_OWORD *)(v82 - 96);
            *((_OWORD *)v81 - 7) = *(_OWORD *)(v82 - 112);
            *((_OWORD *)v81 - 6) = v76;
            *((_OWORD *)v81 - 9) = v74;
            *((_OWORD *)v81 - 8) = v75;
            v77 = *(_OWORD *)(v82 - 80);
            v78 = *(_OWORD *)(v82 - 64);
            v79 = *(_OWORD *)(v82 - 48);
            *(v81 - 32) = *(_BYTE *)(v82 - 32);
            *((_OWORD *)v81 - 4) = v78;
            *((_OWORD *)v81 - 3) = v79;
            *((_OWORD *)v81 - 5) = v77;
            v80 = *(_OWORD *)(v82 - 24);
            *((_QWORD *)v81 - 1) = *(_QWORD *)(v82 - 8);
            *(_OWORD *)(v81 - 24) = v80;
            *(_QWORD *)(v82 - 16) = 0;
            *(_QWORD *)(v82 - 8) = 0;
            *(_QWORD *)(v82 - 24) = 0;
            v73 -= 216;
          }
          while (v50 + v73 != v60);
          v84 = v248.__r_.__value_.__l.__size_;
          v50 = v248.__r_.__value_.__r.__words[0];
          v248.__r_.__value_.__r.__words[0] = (std::string::size_type)&v65[v73];
          v248.__r_.__value_.__l.__size_ = (std::string::size_type)(v65 + 216);
          v248.__r_.__value_.__r.__words[2] = v71;
          while (2)
          {
            if (v84 == v50)
              goto LABEL_116;
            if (*(char *)(v84 - 1) < 0)
            {
              operator delete(*(void **)(v84 - 24));
              if (!*(_BYTE *)(v84 - 168))
              {
LABEL_107:
                v84 -= 216;
                continue;
              }
            }
            else if (!*(_BYTE *)(v84 - 168))
            {
              goto LABEL_107;
            }
            break;
          }
          if (*(char *)(v84 - 169) < 0)
            operator delete(*(void **)(v84 - 192));
          goto LABEL_107;
        }
        v248.__r_.__value_.__r.__words[0] = (std::string::size_type)&v64[216 * v61];
        v248.__r_.__value_.__l.__size_ = (std::string::size_type)(v65 + 216);
        v248.__r_.__value_.__r.__words[2] = (std::string::size_type)&v64[216 * v63];
LABEL_116:
        if (v50)
          operator delete((void *)v50);
        v248.__r_.__value_.__l.__size_ = v72;
        if (SHIBYTE(v262[2]) < 0)
          operator delete(v262[0]);
      }
      else
      {
        v51 = *(_OWORD *)&__dst.__r_.__value_.__r.__words[1];
        *(_BYTE *)(v248.__r_.__value_.__l.__size_ + 24) = 0;
        *(_OWORD *)(v50 + 8) = v51;
        *(_BYTE *)(v50 + 48) = 0;
        if (v251)
        {
          v52 = *(_OWORD *)&v250.__r_.__value_.__l.__data_;
          *(_QWORD *)(v50 + 40) = *((_QWORD *)&v250.__r_.__value_.__l + 2);
          *(_OWORD *)(v50 + 24) = v52;
          memset(&v250, 0, sizeof(v250));
          *(_BYTE *)(v50 + 48) = 1;
        }
        *(_OWORD *)(v50 + 56) = v253;
        v53 = v254;
        v54 = v255;
        v55 = v256;
        *(_OWORD *)(v50 + 120) = v257;
        *(_OWORD *)(v50 + 104) = v55;
        *(_OWORD *)(v50 + 88) = v54;
        *(_OWORD *)(v50 + 72) = v53;
        v56 = v258;
        v57 = v259;
        v58 = v260;
        *(_BYTE *)(v50 + 184) = v261;
        *(_OWORD *)(v50 + 168) = v58;
        *(_OWORD *)(v50 + 152) = v57;
        *(_OWORD *)(v50 + 136) = v56;
        v59 = *(_OWORD *)v262;
        *(void **)(v50 + 208) = v262[2];
        *(_OWORD *)(v50 + 192) = v59;
        memset(v262, 0, sizeof(v262));
        v248.__r_.__value_.__l.__size_ = v50 + 216;
      }
      if (v251 && SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v250.__r_.__value_.__l.__data_);
      v38 += 344;
    }
    while (v38 != v21);
    v39 = *(std::runtime_error *)&v248.__r_.__value_.__l.__data_;
    v40 = v248.__r_.__value_.__r.__words[2];
  }
  v243 = v39;
  v244 = v40;
  if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0)
    sub_20E860C04(&v245, v242.__r_.__value_.__l.__data_, v242.__r_.__value_.__l.__size_);
  else
    v245 = v242;
  sub_20EE27554(v232, &v245, (uint64_t)&v248);
  sub_210224144((const std::__fs::filesystem::path *)&v248, 0x30u, a1[34], &v236);
  v85 = v237;
  if (!v237)
  {
    sub_20EE111A4((uint64_t)&xmmword_24C9EA1C0, (uint64_t)"Unable to open stream to save anchors at path ", (uint64_t)&v248);
    std::runtime_error::runtime_error((std::runtime_error *)v263, &v247);
    v263[0] = (__uint64_t)&off_24C9EDA58;
    LODWORD(v264) = 1;
    std::runtime_error::runtime_error((std::runtime_error *)&__dst, (const std::runtime_error *)v263);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C9EDA58;
    LODWORD(__dst.__r_.__value_.__r.__words[2]) = v264;
    v109 = std::runtime_error::runtime_error(v229, (const std::runtime_error *)&__dst);
    v109->__vftable = (std::runtime_error_vtbl *)&off_24C9EDA58;
    LODWORD(v109[1].__vftable) = __dst.__r_.__value_.__r.__words[2];
    LOBYTE(v109[1].__imp_.__imp_) = 0;
    std::runtime_error::~runtime_error((std::runtime_error *)&__dst);
    std::runtime_error::~runtime_error((std::runtime_error *)v263);
    if ((SHIBYTE(v247.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_327;
    v110 = (void *)v247.__r_.__value_.__r.__words[0];
LABEL_330:
    operator delete(v110);
    v177 = v238;
    if (!v238)
      goto LABEL_334;
    goto LABEL_331;
  }
  v230 = v237;
  v86 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v237 + 16))(v237);
  v263[1] = 1;
  v87 = operator new();
  *(_QWORD *)v87 = v86;
  *(_QWORD *)(v87 + 8) = v86;
  *(_BYTE *)(v87 + 16) = 0;
  *(_BYTE *)(v87 + 40) = 0;
  *(_BYTE *)(v87 + 48) = 0;
  *(_BYTE *)(v87 + 72) = 0;
  *(_QWORD *)(v87 + 88) = 0;
  *(_QWORD *)(v87 + 96) = 0;
  *(_QWORD *)(v87 + 80) = 0;
  v263[0] = (__uint64_t)&off_24C9B4468;
  *(_QWORD *)&v264 = &unk_24C9B45B8;
  *((_QWORD *)&v264 + 1) = v87;
  __dst.__r_.__value_.__s.__data_[0] = 1;
  std::ostream::write();
  sub_20E9EE95C(v87);
  memset(&__dst, 0, sizeof(__dst));
  v88 = v243.__vftable;
  v89 = v243.__imp_.__imp_;
  v247.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
  v247.__r_.__value_.__s.__data_[8] = 0;
  v90 = v243.__imp_.__imp_ - (const char *)v243.__vftable;
  if (v243.__imp_.__imp_ == (const char *)v243.__vftable)
  {
    v108 = 0;
    if ((SHIBYTE(v245.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_141:
      v250 = v245;
      goto LABEL_148;
    }
  }
  else
  {
    v91 = 0x84BDA12F684BDA13 * (v90 >> 3);
    if (v91 > 0x12F684BDA12F684)
      sub_20E867F44();
    v92 = operator new(v90);
    v93 = 0;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v92;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v92;
    __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)&v92[216 * v91];
    do
    {
      v95 = &v92[v93 * 24];
      v96 = &v88[v93];
      *(_OWORD *)(v95 + 8) = *(_OWORD *)&v88[v93].~runtime_error_0;
      v92[v93 * 24 + 24] = 0;
      v97 = &v92[v93 * 24 + 24];
      v95[48] = 0;
      if (LOBYTE(v88[v93 + 2].~runtime_error))
      {
        v98 = (void **)&v96[1].~runtime_error;
        if (SHIBYTE(v96[1].what) < 0)
        {
          sub_20E860C04(v97, *v98, (unint64_t)v88[v93 + 1].~runtime_error_0);
        }
        else
        {
          v99 = *(_OWORD *)v98;
          *(_QWORD *)&v92[v93 * 24 + 40] = v96[1].what;
          *(_OWORD *)v97 = v99;
        }
        v95[48] = 1;
      }
      *(_OWORD *)(v95 + 56) = *(_OWORD *)&v96[2].~runtime_error_0;
      v100 = *(_OWORD *)&v96[3].~runtime_error;
      v101 = *(_OWORD *)&v96[3].what;
      v102 = *(_OWORD *)&v96[4].~runtime_error_0;
      *(_OWORD *)(v95 + 120) = *(_OWORD *)&v96[5].~runtime_error;
      *(_OWORD *)(v95 + 104) = v102;
      *(_OWORD *)(v95 + 88) = v101;
      *(_OWORD *)(v95 + 72) = v100;
      v103 = *(_OWORD *)&v96[5].what;
      v104 = *(_OWORD *)&v96[6].~runtime_error_0;
      v105 = *(_OWORD *)&v96[7].~runtime_error;
      v95[184] = (char)v96[7].what;
      *(_OWORD *)(v95 + 168) = v105;
      *(_OWORD *)(v95 + 152) = v104;
      *(_OWORD *)(v95 + 136) = v103;
      v106 = v95 + 192;
      v107 = (void **)&v96[8].~runtime_error;
      if (SHIBYTE(v96[8].what) < 0)
      {
        sub_20E860C04(v106, *v107, (unint64_t)v88[v93 + 8].~runtime_error_0);
      }
      else
      {
        v94 = *(_OWORD *)v107;
        *((_QWORD *)v95 + 26) = v96[8].what;
        *(_OWORD *)v106 = v94;
      }
      v93 += 9;
    }
    while (&v88[v93] != (std::runtime_error_vtbl *)v89);
    v108 = (std::string::size_type)&v92[v93 * 24];
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)&v92[v93 * 24];
    if ((SHIBYTE(v245.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_141;
  }
  sub_20E860C04(&v250, v245.__r_.__value_.__l.__data_, v245.__r_.__value_.__l.__size_);
  v108 = __dst.__r_.__value_.__l.__size_;
LABEL_148:
  v111 = *((_QWORD *)&v264 + 1);
  if (*(_BYTE *)(*((_QWORD *)&v264 + 1) + 40))
  {
    v247.__r_.__value_.__r.__words[0] = *((_QWORD *)&v264 + 1) + 16;
    sub_20E9F472C((uint64_t **)&v247, 0x84BDA12F684BDA13 * ((uint64_t)(v108 - __dst.__r_.__value_.__r.__words[0]) >> 3));
  }
  else
  {
    sub_20E9F4A34();
  }
  v112 = __dst.__r_.__value_.__l.__size_;
  for (j = __dst.__r_.__value_.__r.__words[0]; j != v112; j += 216)
  {
    if (*(_BYTE *)(v111 + 40))
    {
      v247.__r_.__value_.__r.__words[0] = v111 + 16;
      sub_20E9F3D4C((uint64_t **)&v247, 1u);
    }
    else
    {
      v247.__r_.__value_.__s.__data_[0] = 1;
      std::ostream::write();
    }
    sub_20E9EE95C(v111);
    if (*(_BYTE *)(v111 + 40))
    {
      v247.__r_.__value_.__r.__words[0] = v111 + 16;
      sub_20E9F3D4C((uint64_t **)&v247, 2u);
    }
    else
    {
      v247.__r_.__value_.__s.__data_[0] = 2;
      std::ostream::write();
    }
    sub_20E9EE95C(v111);
    if (*(_BYTE *)(v111 + 40))
    {
      v247.__r_.__value_.__r.__words[0] = v111 + 16;
      sub_20E9F3164((uint64_t **)&v247, *(_BYTE *)(j + 8));
      sub_20E9F3164((uint64_t **)&v247, *(_BYTE *)(j + 9));
      sub_20E9F3164((uint64_t **)&v247, *(_BYTE *)(j + 10));
      sub_20E9F3164((uint64_t **)&v247, *(_BYTE *)(j + 11));
      sub_20E9F3164((uint64_t **)&v247, *(_BYTE *)(j + 12));
      sub_20E9F3164((uint64_t **)&v247, *(_BYTE *)(j + 13));
      sub_20E9F3164((uint64_t **)&v247, *(_BYTE *)(j + 14));
      sub_20E9F3164((uint64_t **)&v247, *(_BYTE *)(j + 15));
      sub_20E9F3164((uint64_t **)&v247, *(_BYTE *)(j + 16));
      sub_20E9F3164((uint64_t **)&v247, *(_BYTE *)(j + 17));
      sub_20E9F3164((uint64_t **)&v247, *(_BYTE *)(j + 18));
      sub_20E9F3164((uint64_t **)&v247, *(_BYTE *)(j + 19));
      sub_20E9F3164((uint64_t **)&v247, *(_BYTE *)(j + 20));
      sub_20E9F3164((uint64_t **)&v247, *(_BYTE *)(j + 21));
      sub_20E9F3164((uint64_t **)&v247, *(_BYTE *)(j + 22));
      sub_20E9F3164((uint64_t **)&v247, *(_BYTE *)(j + 23));
    }
    else
    {
      for (k = 8; k != 24; ++k)
      {
        v115 = *(char *)(j + k);
        if (v115 < 0)
        {
          v247.__r_.__value_.__s.__data_[0] = -52;
          v247.__r_.__value_.__s.__data_[1] = v115;
        }
        else
        {
          v247.__r_.__value_.__s.__data_[0] = *(_BYTE *)(j + k);
        }
        std::ostream::write();
      }
    }
    if (*(_BYTE *)(j + 48))
    {
      if (*(_BYTE *)(v111 + 40))
      {
        v247.__r_.__value_.__r.__words[0] = v111 + 16;
        sub_20E9F3164((uint64_t **)&v247, 1);
      }
      else
      {
        v247.__r_.__value_.__s.__data_[0] = 1;
        std::ostream::write();
      }
      v116 = (const void **)(j + 24);
      if (*(_BYTE *)(v111 + 40))
      {
        v247.__r_.__value_.__r.__words[0] = v111 + 16;
        sub_20E9F4E1C((uint64_t)&v246, (uint64_t **)&v247, v116);
      }
      else
      {
        sub_20E9F5254((uint64_t)&v247, v111 + 8, (uint64_t)v116);
      }
    }
    else if (*(_BYTE *)(v111 + 40))
    {
      v247.__r_.__value_.__r.__words[0] = v111 + 16;
      sub_20E9F3164((uint64_t **)&v247, 0);
    }
    else
    {
      v247.__r_.__value_.__s.__data_[0] = 0;
      std::ostream::write();
    }
    if (*(_BYTE *)(j + 128))
    {
      v117 = *((_QWORD *)&v264 + 1);
      if (*(_BYTE *)(*((_QWORD *)&v264 + 1) + 40))
      {
        v247.__r_.__value_.__r.__words[0] = *((_QWORD *)&v264 + 1) + 16;
        sub_20E9F3164((uint64_t **)&v247, 1);
      }
      else
      {
        v247.__r_.__value_.__s.__data_[0] = 1;
        std::ostream::write();
      }
      v118 = (unint64_t *)(j + 56);
      if (*(_BYTE *)(v117 + 40))
      {
        v247.__r_.__value_.__r.__words[0] = v117 + 16;
        sub_20E9F4C08((uint64_t)&v246, (uint64_t **)&v247, v118);
        sub_20E9F4C08((uint64_t)&v246, (uint64_t **)&v247, (unint64_t *)(j + 64));
        sub_20E9F4C08((uint64_t)&v246, (uint64_t **)&v247, (unint64_t *)(j + 72));
        sub_20E9F4C08((uint64_t)&v246, (uint64_t **)&v247, (unint64_t *)(j + 80));
        sub_20E9F4C08((uint64_t)&v246, (uint64_t **)&v247, (unint64_t *)(j + 88));
        sub_20E9F4C08((uint64_t)&v246, (uint64_t **)&v247, (unint64_t *)(j + 96));
        sub_20E9F4C08((uint64_t)&v246, (uint64_t **)&v247, (unint64_t *)(j + 104));
        sub_20E9F4C08((uint64_t)&v246, (uint64_t **)&v247, (unint64_t *)(j + 112));
        sub_20E9F4C08((uint64_t)&v246, (uint64_t **)&v247, (unint64_t *)(j + 120));
      }
      else
      {
        v119 = *v118;
        v247.__r_.__value_.__s.__data_[0] = -53;
        *(std::string::size_type *)((char *)v247.__r_.__value_.__r.__words + 1) = bswap64(v119);
        std::ostream::write();
        v120 = *(_QWORD *)(j + 64);
        v247.__r_.__value_.__s.__data_[0] = -53;
        *(std::string::size_type *)((char *)v247.__r_.__value_.__r.__words + 1) = bswap64(v120);
        std::ostream::write();
        v121 = *(_QWORD *)(j + 72);
        v247.__r_.__value_.__s.__data_[0] = -53;
        *(std::string::size_type *)((char *)v247.__r_.__value_.__r.__words + 1) = bswap64(v121);
        std::ostream::write();
        v122 = *(_QWORD *)(j + 80);
        v247.__r_.__value_.__s.__data_[0] = -53;
        *(std::string::size_type *)((char *)v247.__r_.__value_.__r.__words + 1) = bswap64(v122);
        std::ostream::write();
        v123 = *(_QWORD *)(j + 88);
        v247.__r_.__value_.__s.__data_[0] = -53;
        *(std::string::size_type *)((char *)v247.__r_.__value_.__r.__words + 1) = bswap64(v123);
        std::ostream::write();
        v124 = *(_QWORD *)(j + 96);
        v247.__r_.__value_.__s.__data_[0] = -53;
        *(std::string::size_type *)((char *)v247.__r_.__value_.__r.__words + 1) = bswap64(v124);
        std::ostream::write();
        v125 = *(_QWORD *)(j + 104);
        v247.__r_.__value_.__s.__data_[0] = -53;
        *(std::string::size_type *)((char *)v247.__r_.__value_.__r.__words + 1) = bswap64(v125);
        std::ostream::write();
        v126 = *(_QWORD *)(j + 112);
        v247.__r_.__value_.__s.__data_[0] = -53;
        *(std::string::size_type *)((char *)v247.__r_.__value_.__r.__words + 1) = bswap64(v126);
        std::ostream::write();
        v127 = *(_QWORD *)(j + 120);
        v247.__r_.__value_.__s.__data_[0] = -53;
        *(std::string::size_type *)((char *)v247.__r_.__value_.__r.__words + 1) = bswap64(v127);
        std::ostream::write();
      }
    }
    else if (*(_BYTE *)(*((_QWORD *)&v264 + 1) + 40))
    {
      v247.__r_.__value_.__r.__words[0] = *((_QWORD *)&v264 + 1) + 16;
      sub_20E9F3164((uint64_t **)&v247, 0);
    }
    else
    {
      v247.__r_.__value_.__s.__data_[0] = 0;
      std::ostream::write();
    }
    if (*(_BYTE *)(j + 160))
    {
      v128 = *((_QWORD *)&v264 + 1);
      if (*(_BYTE *)(*((_QWORD *)&v264 + 1) + 40))
      {
        v247.__r_.__value_.__r.__words[0] = *((_QWORD *)&v264 + 1) + 16;
        sub_20E9F3164((uint64_t **)&v247, 1);
      }
      else
      {
        v247.__r_.__value_.__s.__data_[0] = 1;
        std::ostream::write();
      }
      v129 = (unint64_t *)(j + 136);
      if (*(_BYTE *)(v128 + 40))
      {
        v247.__r_.__value_.__r.__words[0] = v128 + 16;
        sub_20E9F4C08((uint64_t)&v246, (uint64_t **)&v247, v129);
        sub_20E9F4C08((uint64_t)&v246, (uint64_t **)&v247, (unint64_t *)(j + 144));
        sub_20E9F4C08((uint64_t)&v246, (uint64_t **)&v247, (unint64_t *)(j + 152));
      }
      else
      {
        v130 = *v129;
        v247.__r_.__value_.__s.__data_[0] = -53;
        *(std::string::size_type *)((char *)v247.__r_.__value_.__r.__words + 1) = bswap64(v130);
        std::ostream::write();
        v131 = *(_QWORD *)(j + 144);
        v247.__r_.__value_.__s.__data_[0] = -53;
        *(std::string::size_type *)((char *)v247.__r_.__value_.__r.__words + 1) = bswap64(v131);
        std::ostream::write();
        v132 = *(_QWORD *)(j + 152);
        v247.__r_.__value_.__s.__data_[0] = -53;
        *(std::string::size_type *)((char *)v247.__r_.__value_.__r.__words + 1) = bswap64(v132);
        std::ostream::write();
      }
    }
    else if (*(_BYTE *)(*((_QWORD *)&v264 + 1) + 40))
    {
      v247.__r_.__value_.__r.__words[0] = *((_QWORD *)&v264 + 1) + 16;
      sub_20E9F3164((uint64_t **)&v247, 0);
    }
    else
    {
      v247.__r_.__value_.__s.__data_[0] = 0;
      std::ostream::write();
    }
    if (*(_BYTE *)(j + 184))
    {
      v133 = *((_QWORD *)&v264 + 1);
      if (*(_BYTE *)(*((_QWORD *)&v264 + 1) + 40))
      {
        v247.__r_.__value_.__r.__words[0] = *((_QWORD *)&v264 + 1) + 16;
        sub_20E9F3164((uint64_t **)&v247, 1);
      }
      else
      {
        v247.__r_.__value_.__s.__data_[0] = 1;
        std::ostream::write();
      }
      if (*(_BYTE *)(v133 + 40))
      {
        v247.__r_.__value_.__r.__words[0] = v133 + 16;
        sub_20E9F3164((uint64_t **)&v247, *(_BYTE *)(j + 168));
        sub_20E9F3164((uint64_t **)&v247, *(_BYTE *)(j + 169));
        sub_20E9F3164((uint64_t **)&v247, *(_BYTE *)(j + 170));
        sub_20E9F3164((uint64_t **)&v247, *(_BYTE *)(j + 171));
        sub_20E9F3164((uint64_t **)&v247, *(_BYTE *)(j + 172));
        sub_20E9F3164((uint64_t **)&v247, *(_BYTE *)(j + 173));
        sub_20E9F3164((uint64_t **)&v247, *(_BYTE *)(j + 174));
        sub_20E9F3164((uint64_t **)&v247, *(_BYTE *)(j + 175));
        sub_20E9F3164((uint64_t **)&v247, *(_BYTE *)(j + 176));
        sub_20E9F3164((uint64_t **)&v247, *(_BYTE *)(j + 177));
        sub_20E9F3164((uint64_t **)&v247, *(_BYTE *)(j + 178));
        sub_20E9F3164((uint64_t **)&v247, *(_BYTE *)(j + 179));
        sub_20E9F3164((uint64_t **)&v247, *(_BYTE *)(j + 180));
        sub_20E9F3164((uint64_t **)&v247, *(_BYTE *)(j + 181));
        sub_20E9F3164((uint64_t **)&v247, *(_BYTE *)(j + 182));
        sub_20E9F3164((uint64_t **)&v247, *(_BYTE *)(j + 183));
      }
      else
      {
        v134 = *(char *)(j + 168);
        if (v134 < 0)
        {
          v247.__r_.__value_.__s.__data_[0] = -52;
          v247.__r_.__value_.__s.__data_[1] = v134;
        }
        else
        {
          v247.__r_.__value_.__s.__data_[0] = *(_BYTE *)(j + 168);
        }
        std::ostream::write();
        v135 = *(char *)(j + 169);
        if (v135 < 0)
        {
          v247.__r_.__value_.__s.__data_[0] = -52;
          v247.__r_.__value_.__s.__data_[1] = v135;
        }
        else
        {
          v247.__r_.__value_.__s.__data_[0] = *(_BYTE *)(j + 169);
        }
        std::ostream::write();
        v136 = *(char *)(j + 170);
        if (v136 < 0)
        {
          v247.__r_.__value_.__s.__data_[0] = -52;
          v247.__r_.__value_.__s.__data_[1] = v136;
        }
        else
        {
          v247.__r_.__value_.__s.__data_[0] = *(_BYTE *)(j + 170);
        }
        std::ostream::write();
        v137 = *(char *)(j + 171);
        if (v137 < 0)
        {
          v247.__r_.__value_.__s.__data_[0] = -52;
          v247.__r_.__value_.__s.__data_[1] = v137;
        }
        else
        {
          v247.__r_.__value_.__s.__data_[0] = *(_BYTE *)(j + 171);
        }
        std::ostream::write();
        v138 = *(char *)(j + 172);
        if (v138 < 0)
        {
          v247.__r_.__value_.__s.__data_[0] = -52;
          v247.__r_.__value_.__s.__data_[1] = v138;
        }
        else
        {
          v247.__r_.__value_.__s.__data_[0] = *(_BYTE *)(j + 172);
        }
        std::ostream::write();
        v139 = *(char *)(j + 173);
        if (v139 < 0)
        {
          v247.__r_.__value_.__s.__data_[0] = -52;
          v247.__r_.__value_.__s.__data_[1] = v139;
        }
        else
        {
          v247.__r_.__value_.__s.__data_[0] = *(_BYTE *)(j + 173);
        }
        std::ostream::write();
        v140 = *(char *)(j + 174);
        if (v140 < 0)
        {
          v247.__r_.__value_.__s.__data_[0] = -52;
          v247.__r_.__value_.__s.__data_[1] = v140;
        }
        else
        {
          v247.__r_.__value_.__s.__data_[0] = *(_BYTE *)(j + 174);
        }
        std::ostream::write();
        v141 = *(char *)(j + 175);
        if (v141 < 0)
        {
          v247.__r_.__value_.__s.__data_[0] = -52;
          v247.__r_.__value_.__s.__data_[1] = v141;
        }
        else
        {
          v247.__r_.__value_.__s.__data_[0] = *(_BYTE *)(j + 175);
        }
        std::ostream::write();
        v142 = *(char *)(j + 176);
        if (v142 < 0)
        {
          v247.__r_.__value_.__s.__data_[0] = -52;
          v247.__r_.__value_.__s.__data_[1] = v142;
        }
        else
        {
          v247.__r_.__value_.__s.__data_[0] = *(_BYTE *)(j + 176);
        }
        std::ostream::write();
        v143 = *(char *)(j + 177);
        if (v143 < 0)
        {
          v247.__r_.__value_.__s.__data_[0] = -52;
          v247.__r_.__value_.__s.__data_[1] = v143;
        }
        else
        {
          v247.__r_.__value_.__s.__data_[0] = *(_BYTE *)(j + 177);
        }
        std::ostream::write();
        v144 = *(char *)(j + 178);
        if (v144 < 0)
        {
          v247.__r_.__value_.__s.__data_[0] = -52;
          v247.__r_.__value_.__s.__data_[1] = v144;
        }
        else
        {
          v247.__r_.__value_.__s.__data_[0] = *(_BYTE *)(j + 178);
        }
        std::ostream::write();
        v145 = *(char *)(j + 179);
        if (v145 < 0)
        {
          v247.__r_.__value_.__s.__data_[0] = -52;
          v247.__r_.__value_.__s.__data_[1] = v145;
        }
        else
        {
          v247.__r_.__value_.__s.__data_[0] = *(_BYTE *)(j + 179);
        }
        std::ostream::write();
        v146 = *(char *)(j + 180);
        if (v146 < 0)
        {
          v247.__r_.__value_.__s.__data_[0] = -52;
          v247.__r_.__value_.__s.__data_[1] = v146;
        }
        else
        {
          v247.__r_.__value_.__s.__data_[0] = *(_BYTE *)(j + 180);
        }
        std::ostream::write();
        v147 = *(char *)(j + 181);
        if (v147 < 0)
        {
          v247.__r_.__value_.__s.__data_[0] = -52;
          v247.__r_.__value_.__s.__data_[1] = v147;
        }
        else
        {
          v247.__r_.__value_.__s.__data_[0] = *(_BYTE *)(j + 181);
        }
        std::ostream::write();
        v148 = *(char *)(j + 182);
        if (v148 < 0)
        {
          v247.__r_.__value_.__s.__data_[0] = -52;
          v247.__r_.__value_.__s.__data_[1] = v148;
        }
        else
        {
          v247.__r_.__value_.__s.__data_[0] = *(_BYTE *)(j + 182);
        }
        std::ostream::write();
        v149 = *(char *)(j + 183);
        if (v149 < 0)
        {
          v247.__r_.__value_.__s.__data_[0] = -52;
          v247.__r_.__value_.__s.__data_[1] = v149;
        }
        else
        {
          v247.__r_.__value_.__s.__data_[0] = *(_BYTE *)(j + 183);
        }
        std::ostream::write();
      }
    }
    else
    {
      v133 = *((_QWORD *)&v264 + 1);
      if (*(_BYTE *)(*((_QWORD *)&v264 + 1) + 40))
      {
        v247.__r_.__value_.__r.__words[0] = *((_QWORD *)&v264 + 1) + 16;
        sub_20E9F3164((uint64_t **)&v247, 0);
      }
      else
      {
        v247.__r_.__value_.__s.__data_[0] = 0;
        std::ostream::write();
      }
    }
    v150 = *(_QWORD *)(*(_QWORD *)(v133 + 88) - 8);
    sub_20E9EE4D0((uint64_t *)(v133 + 48), *(_QWORD *)(v133 + 16) - v150 - 9);
    v151 = *(_QWORD *)(v133 + 48);
    if (v151)
      memmove((void *)(*(_QWORD *)(v133 + 24) + v150), *(const void **)(v133 + 56), v151);
    *(_QWORD *)(v133 + 48) = 0;
    v152 = *(_QWORD *)(v133 + 80);
    v153 = *(_QWORD *)(v133 + 88) - 8;
    *(_QWORD *)(v133 + 88) = v153;
    if (v152 == v153)
    {
      std::ostream::write();
      if (*(_BYTE *)(v133 + 40))
      {
        free(*(void **)(v133 + 24));
        *(_BYTE *)(v133 + 40) = 0;
      }
    }
    v154 = (const void **)(j + 192);
    if (*(_BYTE *)(*((_QWORD *)&v264 + 1) + 40))
    {
      v247.__r_.__value_.__r.__words[0] = *((_QWORD *)&v264 + 1) + 16;
      sub_20E9F4E1C((uint64_t)&v246, (uint64_t **)&v247, v154);
    }
    else
    {
      sub_20E9F5254((uint64_t)&v247, *((_QWORD *)&v264 + 1) + 8, (uint64_t)v154);
    }
    v111 = *((_QWORD *)&v264 + 1);
    v155 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v264 + 1) + 88) - 8);
    v156 = (size_t *)(*((_QWORD *)&v264 + 1) + 48);
    sub_20E9EE4D0((uint64_t *)(*((_QWORD *)&v264 + 1) + 48), *(_QWORD *)(*((_QWORD *)&v264 + 1) + 16) - v155 - 9);
    if (*v156)
      memmove((void *)(*(_QWORD *)(v111 + 24) + v155), *(const void **)(v111 + 56), *v156);
    *(_QWORD *)(v111 + 48) = 0;
    v157 = *(_QWORD *)(v111 + 80);
    v158 = *(_QWORD *)(v111 + 88) - 8;
    *(_QWORD *)(v111 + 88) = v158;
    if (v157 == v158)
    {
      std::ostream::write();
      if (*(_BYTE *)(v111 + 40))
      {
        free(*(void **)(v111 + 24));
        *(_BYTE *)(v111 + 40) = 0;
      }
    }
  }
  if (*(_BYTE *)(v111 + 40))
  {
    v247.__r_.__value_.__r.__words[0] = v111 + 16;
    sub_20E9F4E1C((uint64_t)&v246, (uint64_t **)&v247, (const void **)&v250.__r_.__value_.__l.__data_);
  }
  else
  {
    sub_20E9F5254((uint64_t)&v247, v111 + 8, (uint64_t)&v250);
  }
  if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v250.__r_.__value_.__l.__data_);
    v159 = __dst.__r_.__value_.__r.__words[0];
    if (!__dst.__r_.__value_.__r.__words[0])
      goto LABEL_285;
LABEL_274:
    v160 = __dst.__r_.__value_.__l.__size_;
    v161 = (void *)v159;
    if (__dst.__r_.__value_.__l.__size_ == v159)
    {
LABEL_284:
      __dst.__r_.__value_.__l.__size_ = v159;
      operator delete(v161);
      goto LABEL_285;
    }
    while (1)
    {
      if (*(char *)(v160 - 1) < 0)
      {
        operator delete(*(void **)(v160 - 24));
        if (*(_BYTE *)(v160 - 168))
        {
LABEL_281:
          if (*(char *)(v160 - 169) < 0)
            operator delete(*(void **)(v160 - 192));
        }
      }
      else if (*(_BYTE *)(v160 - 168))
      {
        goto LABEL_281;
      }
      v160 -= 216;
      if (v160 == v159)
      {
        v161 = (void *)__dst.__r_.__value_.__r.__words[0];
        goto LABEL_284;
      }
    }
  }
  v159 = __dst.__r_.__value_.__r.__words[0];
  if (__dst.__r_.__value_.__r.__words[0])
    goto LABEL_274;
LABEL_285:
  v162 = *((_QWORD *)&v264 + 1);
  v163 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v264 + 1) + 88) - 8);
  v164 = (size_t *)(*((_QWORD *)&v264 + 1) + 48);
  sub_20E9EE4D0((uint64_t *)(*((_QWORD *)&v264 + 1) + 48), *(_QWORD *)(*((_QWORD *)&v264 + 1) + 16) - v163 - 9);
  if (*v164)
    memmove((void *)(*(_QWORD *)(v162 + 24) + v163), *(const void **)(v162 + 56), *v164);
  *(_QWORD *)(v162 + 48) = 0;
  v165 = *(void **)(v162 + 80);
  v166 = *(_QWORD *)(v162 + 88) - 8;
  *(_QWORD *)(v162 + 88) = v166;
  if (v165 != (void *)v166)
  {
    if (!v165)
      goto LABEL_290;
    goto LABEL_289;
  }
  std::ostream::write();
  if (*(_BYTE *)(v162 + 40))
  {
    free(*(void **)(v162 + 24));
    *(_BYTE *)(v162 + 40) = 0;
  }
  v165 = *(void **)(v162 + 80);
  if (v165)
  {
LABEL_289:
    *(_QWORD *)(v162 + 88) = v165;
    operator delete(v165);
  }
LABEL_290:
  if (*(_BYTE *)(v162 + 72))
    free(*(void **)(v162 + 56));
  if (*(_BYTE *)(v162 + 40))
    free(*(void **)(v162 + 24));
  MEMORY[0x212BC6398](v162, 0x1030C408C1A3048);
  v167 = sub_210219C18();
  LODWORD(v250.__r_.__value_.__l.__data_) = 0;
  sub_20EB9CFE0((uint64_t)&v247, (uint64_t)&__dst, (uint64_t)v235);
  if (LODWORD(v250.__r_.__value_.__l.__data_) == -1)
    sub_20E877AB8();
  v247.__r_.__value_.__r.__words[0] = (std::string::size_type)&v246;
  ((void (*)(__uint64_t *__return_ptr, std::string *, std::string *))off_24C9EA608[LODWORD(v250.__r_.__value_.__l.__data_)])(v263, &v247, &__dst);
  if (LODWORD(v250.__r_.__value_.__l.__data_) != -1)
    ((void (*)(std::string *, std::string *))off_24C9EA5F0[LODWORD(v250.__r_.__value_.__l.__data_)])(&v247, &__dst);
  if ((SBYTE7(v264) & 0x80u) == 0)
    v168 = v263;
  else
    v168 = (__uint64_t *)v263[0];
  v169 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v169 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v168;
    v171 = (char *)_os_log_send_and_compose_impl();
    v172 = strlen(v171);
    v247.__r_.__value_.__r.__words[0] = 0;
    pthread_threadid_np(0, (__uint64_t *)&v247);
    v173 = v247.__r_.__value_.__r.__words[0];
    timespec_get((timespec *)&v247, 1);
    sub_210219E20(&__dst, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v167 + 1), (__int128 *)(v167 + 5), "Anchors:Save: Finished saving anchors from group %s", 0x33uLL, v171, v172, v173, &v247);
    std::mutex::lock(&stru_254A5A410);
    v174 = qword_254A5A458;
    for (m = unk_254A5A460; v174 != m; v174 += 40)
    {
      v176 = *(_QWORD *)(v174 + 32);
      if (!v176)
        sub_20E86D37C();
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v176 + 48))(v176, &__dst);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (SBYTE7(v258) < 0)
    {
      operator delete((void *)v257);
      if ((SHIBYTE(v256) & 0x80000000) == 0)
      {
LABEL_307:
        if (!(_BYTE)v255)
        {
LABEL_317:
          if ((_BYTE)v253 && v252 < 0)
            operator delete((void *)v250.__r_.__value_.__l.__size_);
          if (v250.__r_.__value_.__s.__data_[7] < 0)
            operator delete((void *)__dst.__r_.__value_.__l.__size_);
          if (v171)
            free(v171);
          goto LABEL_324;
        }
LABEL_315:
        if (SHIBYTE(v254) < 0)
          operator delete(*((void **)&v253 + 1));
        goto LABEL_317;
      }
    }
    else if ((SHIBYTE(v256) & 0x80000000) == 0)
    {
      goto LABEL_307;
    }
    operator delete(*((void **)&v255 + 1));
    if (!(_BYTE)v255)
      goto LABEL_317;
    goto LABEL_315;
  }
LABEL_324:
  if (os_signpost_enabled((os_log_t)*v167))
  {
    LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v168;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  v85 = v230;
  if (SBYTE7(v264) < 0)
  {
    v110 = (void *)v263[0];
    goto LABEL_330;
  }
LABEL_327:
  v177 = v238;
  if (!v238)
    goto LABEL_334;
LABEL_331:
  p_shared_owners = (unint64_t *)&v177->__shared_owners_;
  do
    v179 = __ldaxr(p_shared_owners);
  while (__stlxr(v179 - 1, p_shared_owners));
  if (v179)
  {
LABEL_334:
    if ((SHIBYTE(v248.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_335;
    goto LABEL_351;
  }
  ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
  std::__shared_weak_count::__release_weak(v177);
  if ((SHIBYTE(v248.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_335:
    if ((SHIBYTE(v245.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_336;
    goto LABEL_352;
  }
LABEL_351:
  operator delete(v248.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v245.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_336:
    v180 = v243.__vftable;
    if (v243.__vftable)
      goto LABEL_337;
LABEL_353:
    if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_339;
LABEL_354:
    v182 = (char *)__p;
    if (!__p)
      goto LABEL_8;
    goto LABEL_355;
  }
LABEL_352:
  operator delete(v245.__r_.__value_.__l.__data_);
  v180 = v243.__vftable;
  if (!v243.__vftable)
    goto LABEL_353;
LABEL_337:
  v181 = v243.__imp_.__imp_;
  if ((std::runtime_error_vtbl *)v243.__imp_.__imp_ == v180)
  {
    v243.__imp_.__imp_ = (const char *)v180;
    operator delete(v180);
    if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_339;
    goto LABEL_354;
  }
  do
  {
    if (*(v181 - 1) < 0)
    {
      operator delete(*((void **)v181 - 3));
      if (!*(v181 - 168))
        goto LABEL_341;
    }
    else if (!*(v181 - 168))
    {
      goto LABEL_341;
    }
    if (*(v181 - 169) < 0)
      operator delete(*((void **)v181 - 24));
LABEL_341:
    v181 -= 216;
  }
  while (v181 != (const char *)v180);
  v243.__imp_.__imp_ = (const char *)v180;
  operator delete(v243.__vftable);
  if ((SHIBYTE(v242.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_354;
LABEL_339:
  operator delete(v242.__r_.__value_.__l.__data_);
  v182 = (char *)__p;
  if (__p)
  {
LABEL_355:
    v183 = v240;
    v6 = v182;
    if (v240 == v182)
    {
LABEL_7:
      v240 = v182;
      operator delete(v6);
      goto LABEL_8;
    }
    while (1)
    {
      if (!*(v183 - 48))
        goto LABEL_465;
      v184 = (std::__shared_weak_count *)*((_QWORD *)v183 - 7);
      if (!v184)
        goto LABEL_465;
      v185 = (unint64_t *)&v184->__shared_owners_;
      do
        v186 = __ldaxr(v185);
      while (__stlxr(v186 - 1, v185));
      if (!v186)
      {
        ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
        std::__shared_weak_count::__release_weak(v184);
        if (*(v183 - 304))
        {
LABEL_364:
          if (*(v183 - 305) < 0)
            operator delete(*((void **)v183 - 41));
        }
      }
      else
      {
LABEL_465:
        if (*(v183 - 304))
          goto LABEL_364;
      }
      v183 -= 344;
      if (v183 == v182)
      {
        v6 = __p;
        goto LABEL_7;
      }
    }
  }
LABEL_8:
  v5 = v233;
  if (v85)
    goto LABEL_9;
}

void sub_20EE10A20(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,std::runtime_error a40,int a41,uint64_t a42,uint64_t a43,uint64_t a44,std::runtime_error a45,int a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,uint64_t a58,uint64_t a59,void *a60)
{
  uint64_t v60;
  void *v63;
  const std::runtime_error *v64;
  const std::runtime_error *v65;

  if (!a2)
    _Unwind_Resume(a1);
  sub_20EE0DDB0((uint64_t)&a60);
  if (*(char *)(v60 - 121) < 0)
    operator delete(*(void **)(v60 - 144));
  sub_20EE113B0((char **)&a40);
  if (a2 == 3)
  {
    v63 = __cxa_begin_catch(a1);
    a33 = (*(uint64_t (**)(void *))(*(_QWORD *)v63 + 16))(v63);
    sub_20EE11604((uint64_t)&a34, a22 + 24, (const char *)&a33);
    std::runtime_error::runtime_error(&a40, (const std::string *)&a34);
    a40.__vftable = (std::runtime_error_vtbl *)&off_24C9EDA58;
    a41 = 2;
    std::runtime_error::runtime_error(&a45, &a40);
    a45.__vftable = (std::runtime_error_vtbl *)&off_24C9EDA58;
    a46 = a41;
    std::runtime_error::runtime_error((std::runtime_error *)a14, &a45);
    *(_QWORD *)a14 = &off_24C9EDA58;
    *(_DWORD *)(a14 + 16) = a46;
    *(_BYTE *)(a14 + 24) = 0;
    std::runtime_error::~runtime_error(&a45);
    std::runtime_error::~runtime_error(&a40);
    if (a39 < 0)
      operator delete(a34);
  }
  else
  {
    v64 = (const std::runtime_error *)__cxa_begin_catch(a1);
    if (a2 == 2)
    {
      v65 = v64;
      std::runtime_error::runtime_error(&a45, v64);
      a45.__vftable = (std::runtime_error_vtbl *)&off_24C9EDA58;
      a46 = (int)v65[1].__vftable;
      std::runtime_error::runtime_error((std::runtime_error *)a14, &a45);
      *(_QWORD *)a14 = &off_24C9EDA58;
      *(_DWORD *)(a14 + 16) = a46;
      *(_BYTE *)(a14 + 24) = 0;
      std::runtime_error::~runtime_error(&a45);
      __cxa_end_catch();
LABEL_14:
      JUMPOUT(0x20EE10990);
    }
    sub_20EE114B0((uint64_t)&a34, a22 + 24);
    std::runtime_error::runtime_error(&a40, (const std::string *)&a34);
    a40.__vftable = (std::runtime_error_vtbl *)&off_24C9EDA58;
    a41 = 4;
    std::runtime_error::runtime_error(&a45, &a40);
    a45.__vftable = (std::runtime_error_vtbl *)&off_24C9EDA58;
    a46 = a41;
    std::runtime_error::runtime_error((std::runtime_error *)a14, &a45);
    *(_QWORD *)a14 = &off_24C9EDA58;
    *(_DWORD *)(a14 + 16) = a46;
    *(_BYTE *)(a14 + 24) = 0;
    std::runtime_error::~runtime_error(&a45);
    std::runtime_error::~runtime_error(&a40);
    if (a39 < 0)
      operator delete(a34);
  }
  __cxa_end_catch();
  goto LABEL_14;
}

uint64_t sub_20EE111A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  char v6;
  _BYTE v7[24];
  int v8;
  _QWORD v9[5];
  _QWORD *v10;

  v8 = 0;
  sub_20E878638((uint64_t)&v6, (uint64_t)v7, a1);
  v9[0] = v7;
  v9[1] = a2;
  v9[2] = v7;
  v9[3] = a2;
  v9[4] = a2;
  if (v8 == -1)
    sub_20E877AB8();
  v10 = v9;
  ((void (*)(_QWORD **, _BYTE *))off_24C9EA620[v8])(&v10, v7);
  sub_20EB04FEC((uint64_t)v9, (uint64_t)v7, a3);
  if (v8 == -1)
    sub_20E877AB8();
  v9[0] = &v10;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24C9EA608[v8])(v9, v7);
  if (v8 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24C9EA5F0[v8])(v9, v7);
  return result;
}

void sub_20EE112A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EE112B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EE112C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EE112DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE112F0(uint64_t a1)
{
  void **v2;
  void **v4;
  void **v5;

  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    v2 = *(void ***)a1;
    if (!*(_QWORD *)a1)
      return a1;
  }
  else
  {
    v2 = *(void ***)a1;
    if (!*(_QWORD *)a1)
      return a1;
  }
  v4 = *(void ***)(a1 + 8);
  v5 = v2;
  if (v4 != v2)
  {
    while (1)
    {
      if (*((char *)v4 - 1) < 0)
      {
        operator delete(*(v4 - 3));
        if (*((_BYTE *)v4 - 168))
        {
LABEL_12:
          if (*((char *)v4 - 169) < 0)
            operator delete(*(v4 - 24));
        }
      }
      else if (*((_BYTE *)v4 - 168))
      {
        goto LABEL_12;
      }
      v4 -= 27;
      if (v4 == v2)
      {
        v5 = *(void ***)a1;
        break;
      }
    }
  }
  *(_QWORD *)(a1 + 8) = v2;
  operator delete(v5);
  return a1;
}

char **sub_20EE113B0(char **a1)
{
  char *v2;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  if (*((char *)a1 + 47) < 0)
  {
    operator delete(a1[3]);
    v2 = *a1;
    if (!*a1)
      return a1;
  }
  else
  {
    v2 = *a1;
    if (!*a1)
      return a1;
  }
  v4 = a1[1];
  v5 = v2;
  if (v4 != v2)
  {
    while (1)
    {
      if (!*(v4 - 48))
        goto LABEL_22;
      v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 7);
      if (!v6)
        goto LABEL_22;
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
        if (*(v4 - 304))
        {
LABEL_14:
          if (*(v4 - 305) < 0)
            operator delete(*((void **)v4 - 41));
        }
      }
      else
      {
LABEL_22:
        if (*(v4 - 304))
          goto LABEL_14;
      }
      v4 -= 344;
      if (v4 == v2)
      {
        v5 = *a1;
        break;
      }
    }
  }
  a1[1] = v2;
  operator delete(v5);
  return a1;
}

uint64_t sub_20EE114B0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char v4;
  _BYTE v5[24];
  int v6;
  _QWORD v7[5];
  _QWORD *v8;

  v6 = 0;
  sub_20E878638((uint64_t)&v4, (uint64_t)v5, (uint64_t)&xmmword_24C9EA1C0);
  v7[0] = v5;
  v7[1] = "Error saving anchor bundle with id ";
  v7[2] = v5;
  v7[3] = "Error saving anchor bundle with id ";
  v7[4] = "Error saving anchor bundle with id ";
  if (v6 == -1)
    sub_20E877AB8();
  v8 = v7;
  ((void (*)(_QWORD **, _BYTE *))off_24C9EA650[v6])(&v8, v5);
  sub_20EB9CFE0((uint64_t)v7, (uint64_t)v5, a2);
  if (v6 == -1)
    sub_20E877AB8();
  v7[0] = &v8;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24C9EA608[v6])(v7, v5);
  if (v6 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24C9EA5F0[v6])(v7, v5);
  return result;
}

void sub_20EE115B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EE115C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EE115DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EE115F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE11604(uint64_t a1, uint64_t a2, const char *a3)
{
  uint64_t result;
  char v6;
  char v7;
  _BYTE v8[24];
  int v9;
  _BYTE *v10;
  const char *v11;
  _BYTE *v12;
  const char *v13;
  const char *v14;
  _QWORD *v15;

  v9 = 0;
  sub_20E878638((uint64_t)&v7, (uint64_t)v8, (uint64_t)&xmmword_24C9EA1C0);
  v10 = v8;
  v11 = "Error saving anchor bundle with id ";
  v12 = v8;
  v13 = "Error saving anchor bundle with id ";
  v14 = "Error saving anchor bundle with id ";
  if (v9 == -1)
    sub_20E877AB8();
  v15 = &v10;
  ((void (*)(_QWORD **, _BYTE *))off_24C9EA650[v9])(&v15, v8);
  sub_20EB9CFE0((uint64_t)&v6, (uint64_t)v8, a2);
  v10 = v8;
  v11 = " with message ";
  v12 = v8;
  v13 = " with message ";
  v14 = " with message ";
  if (v9 == -1)
    sub_20E877AB8();
  v15 = &v10;
  ((void (*)(_QWORD **, _BYTE *))off_24C9EA668[v9])(&v15, v8);
  if (*(_QWORD *)a3)
  {
    v10 = v8;
    v11 = a3;
    v12 = v8;
    v13 = a3;
    v14 = a3;
    if (v9 != -1)
    {
      v15 = &v10;
      ((void (*)(_QWORD **, _BYTE *))off_24C9EA680[v9])(&v15, v8);
      goto LABEL_8;
    }
LABEL_14:
    sub_20E877AB8();
  }
  v10 = v8;
  v11 = "nullptr";
  v12 = v8;
  v13 = "nullptr";
  v14 = "nullptr";
  if (v9 == -1)
    goto LABEL_14;
  v15 = &v10;
  ((void (*)(_QWORD **, _BYTE *))off_24C9EA638[v9])(&v15, v8);
LABEL_8:
  if (v9 == -1)
    sub_20E877AB8();
  v10 = &v15;
  result = ((uint64_t (*)(_BYTE **, _BYTE *))off_24C9EA608[v9])(&v10, v8);
  if (v9 != -1)
    return ((uint64_t (*)(_BYTE **, _BYTE *))off_24C9EA5F0[v9])(&v10, v8);
  return result;
}

void sub_20EE117EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EE11800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EE11814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EE11828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EE1183C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EE11850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EE11864(uint64_t a1@<X0>, std::string ***a2@<X1>, uint64_t a3@<X8>)
{
  sub_20EE0E4C0((_QWORD *)(a1 - 56), a2, a3);
}

void sub_20EE1186C(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  std::runtime_error *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t *v10;
  void **v11;
  unsigned __int8 v12;
  char *v14;
  size_t v15;
  __darwin_time_t tv_sec;
  uint64_t v17;
  uint64_t i;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  _BYTE v25[24];
  void *v26[2];
  char v27;
  void *v28[2];
  char v29;
  std::runtime_error v30;
  int v31;
  char v32;
  char v33;
  timespec v34;
  std::string __dst;
  int v36;
  char v37;
  void *v38;
  char v39;
  char v40;
  void *v41;
  char v42;
  char v43;
  void *v44;
  char v45;
  void *__p;
  char v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  sub_20EE0BF14((uint64_t)&__dst, a1);
  if (!(_BYTE)v36)
  {
    v6 = *a2;
    v7 = a2[1];
    if (*a2 == v7)
    {
LABEL_67:
      *(_BYTE *)a3 = 1;
      *(_BYTE *)(a3 + 24) = 1;
      return;
    }
    while (1)
    {
      if (*(char *)(v6 + 23) < 0)
      {
        sub_20E860C04(&__dst, *(void **)v6, *(_QWORD *)(v6 + 8));
      }
      else
      {
        v8 = *(_OWORD *)v6;
        __dst.__r_.__value_.__r.__words[2] = *(_QWORD *)(v6 + 16);
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v8;
      }
      sub_20EE2771C(a1 + 216, &__dst, (uint64_t)&v30);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__dst.__r_.__value_.__l.__data_);
        if ((*(char *)(v6 + 23) & 0x80000000) == 0)
        {
LABEL_12:
          v9 = *(_OWORD *)v6;
          __dst.__r_.__value_.__r.__words[2] = *(_QWORD *)(v6 + 16);
          *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v9;
          goto LABEL_15;
        }
      }
      else if ((*(char *)(v6 + 23) & 0x80000000) == 0)
      {
        goto LABEL_12;
      }
      sub_20E860C04(&__dst, *(void **)v6, *(_QWORD *)(v6 + 8));
LABEL_15:
      sub_20EE277FC(a1 + 216, (uint64_t)&__dst, (uint64_t)v28);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      (*(void (**)(_QWORD, std::runtime_error *))(**(_QWORD **)(a1 + 272) + 240))(*(_QWORD *)(a1 + 272), &v30);
      (*(void (**)(_QWORD, void **))(**(_QWORD **)(a1 + 272) + 240))(*(_QWORD *)(a1 + 272), v28);
      v10 = sub_210219C18();
      v36 = 0;
      sub_20EB9CFE0((uint64_t)v25, (uint64_t)&__dst, v6);
      if (v36 == -1)
        sub_20E877AB8();
      v34.tv_sec = (__darwin_time_t)&v33;
      ((void (*)(void **__return_ptr, timespec *, std::string *))off_24C9EA608[v36])(v26, &v34, &__dst);
      if (v36 != -1)
        ((void (*)(_BYTE *, std::string *))off_24C9EA5F0[v36])(v25, &__dst);
      if (v27 >= 0)
        v11 = v26;
      else
        v11 = (void **)v26[0];
      v12 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
      if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
      {
        __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DDD0);
      }
      if (!atomic_load(&qword_254A5A450))
        goto LABEL_42;
      LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v11;
      v14 = (char *)_os_log_send_and_compose_impl();
      v15 = strlen(v14);
      v34.tv_sec = 0;
      pthread_threadid_np(0, (__uint64_t *)&v34);
      tv_sec = v34.tv_sec;
      timespec_get(&v34, 1);
      sub_210219E20(&__dst, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v10 + 1), (__int128 *)(v10 + 5), "Anchors:Delete: Deleted anchors from group %s", 0x2DuLL, v14, v15, tv_sec, &v34);
      std::mutex::lock(&stru_254A5A410);
      v17 = qword_254A5A458;
      for (i = unk_254A5A460; v17 != i; v17 += 40)
      {
        v19 = *(_QWORD *)(v17 + 32);
        if (!v19)
          sub_20E86D37C();
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v19 + 48))(v19, &__dst);
      }
      std::mutex::unlock(&stru_254A5A410);
      if (v47 < 0)
      {
        operator delete(__p);
        if ((v45 & 0x80000000) == 0)
        {
LABEL_30:
          if (v43)
            goto LABEL_34;
          goto LABEL_36;
        }
      }
      else if ((v45 & 0x80000000) == 0)
      {
        goto LABEL_30;
      }
      operator delete(v44);
      if (v43)
      {
LABEL_34:
        if (v42 < 0)
          operator delete(v41);
      }
LABEL_36:
      if (v40 && v39 < 0)
        operator delete(v38);
      if ((v37 & 0x80000000) == 0)
      {
        if (!v14)
          goto LABEL_42;
LABEL_41:
        free(v14);
        goto LABEL_42;
      }
      operator delete((void *)__dst.__r_.__value_.__l.__size_);
      if (v14)
        goto LABEL_41;
LABEL_42:
      if (os_signpost_enabled((os_log_t)*v10))
      {
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v11;
        _os_signpost_emit_unreliably_with_name_impl();
        if ((v27 & 0x80000000) == 0)
        {
LABEL_44:
          v20 = *(unsigned __int8 **)(a1 + 256);
          v21 = sub_20EE0C9E8(*(unsigned __int8 **)(a1 + 248), v20, (const void **)v6);
          if (v20 == v21)
            goto LABEL_45;
          goto LABEL_50;
        }
      }
      else if ((v27 & 0x80000000) == 0)
      {
        goto LABEL_44;
      }
      operator delete(v26[0]);
      v20 = *(unsigned __int8 **)(a1 + 256);
      v21 = sub_20EE0C9E8(*(unsigned __int8 **)(a1 + 248), v20, (const void **)v6);
      if (v20 == v21)
      {
LABEL_45:
        if ((v29 & 0x80000000) == 0)
          goto LABEL_46;
        goto LABEL_61;
      }
LABEL_50:
      v22 = v21;
      if (v21 + 24 != v20)
      {
        do
        {
          if ((char)v22[23] < 0)
            operator delete(*(void **)v22);
          *(_OWORD *)v22 = *(_OWORD *)(v22 + 24);
          *((_QWORD *)v22 + 2) = *((_QWORD *)v22 + 5);
          v22[47] = 0;
          v23 = v22 + 48;
          v22[24] = 0;
          v22 += 24;
        }
        while (v23 != v20);
        v20 = *(unsigned __int8 **)(a1 + 256);
      }
      while (v20 != v22)
      {
        if ((char)*(v20 - 1) < 0)
          operator delete(*((void **)v20 - 3));
        v20 -= 24;
      }
      *(_QWORD *)(a1 + 256) = v22;
      if ((v29 & 0x80000000) == 0)
      {
LABEL_46:
        if (v32 < 0)
          goto LABEL_62;
        goto LABEL_6;
      }
LABEL_61:
      operator delete(v28[0]);
      if (v32 < 0)
LABEL_62:
        operator delete(v30.__vftable);
LABEL_6:
      v6 += 24;
      if (v6 == v7)
        goto LABEL_67;
    }
  }
  std::runtime_error::runtime_error(&v30, (const std::runtime_error *)&__dst);
  v30.__vftable = (std::runtime_error_vtbl *)&off_24C9EDA58;
  v31 = __dst.__r_.__value_.__r.__words[2];
  v5 = std::runtime_error::runtime_error((std::runtime_error *)a3, &v30);
  v5->__vftable = (std::runtime_error_vtbl *)&off_24C9EDA58;
  LODWORD(v5[1].__vftable) = v31;
  LOBYTE(v5[1].__imp_.__imp_) = 0;
  std::runtime_error::~runtime_error(&v30);
  if ((_BYTE)v36)
    std::runtime_error::~runtime_error((std::runtime_error *)&__dst);
}

void sub_20EE11E1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::runtime_error *a14, uint64_t a15, uint64_t a16, uint64_t a17, std::string *a18, std::runtime_error a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *__p,uint64_t a31,void *__pa,uint64_t a33,uint64_t a34,uint64_t a35,std::runtime_error a36,int a37,__int16 a38,char a39,char a40)
{
  if (SHIBYTE(a34) < 0)
  {
    operator delete(__pa);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EE12008(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  char v6;
  _BYTE v7[24];
  int v8;
  _QWORD v9[5];
  _QWORD *v10;

  v8 = 0;
  sub_20E878638((uint64_t)&v6, (uint64_t)v7, a1);
  v9[0] = v7;
  v9[1] = a2;
  v9[2] = v7;
  v9[3] = a2;
  v9[4] = a2;
  if (v8 == -1)
    sub_20E877AB8();
  v10 = v9;
  ((void (*)(_QWORD **, _BYTE *))off_24C9EA698[v8])(&v10, v7);
  sub_20EB9CFE0((uint64_t)v9, (uint64_t)v7, a3);
  if (v8 == -1)
    sub_20E877AB8();
  v9[0] = &v10;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24C9EA608[v8])(v9, v7);
  if (v8 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24C9EA5F0[v8])(v9, v7);
  return result;
}

void sub_20EE12104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EE12118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EE1212C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EE12140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EE12154(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  sub_20EE1186C(a1 - 112, a2, a3);
}

uint64_t sub_20EE1215C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)a1 = off_24C9EA148;
  *(_QWORD *)(a1 + 56) = &unk_24C9EA180;
  *(_QWORD *)(a1 + 112) = &unk_24C9EA1A8;
  v2 = *(_QWORD *)(a1 + 248);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 256);
    v4 = *(void **)(a1 + 248);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 248);
    }
    *(_QWORD *)(a1 + 256) = v2;
    operator delete(v4);
  }
  if (*(char *)(a1 + 239) < 0)
    operator delete(*(void **)(a1 + 216));
  return sub_20EE0BDC8(a1);
}

void sub_20EE1220C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)a1 = off_24C9EA148;
  *(_QWORD *)(a1 + 56) = &unk_24C9EA180;
  *(_QWORD *)(a1 + 112) = &unk_24C9EA1A8;
  v2 = *(_QWORD *)(a1 + 248);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 256);
    v4 = *(void **)(a1 + 248);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 248);
    }
    *(_QWORD *)(a1 + 256) = v2;
    operator delete(v4);
  }
  if (*(char *)(a1 + 239) < 0)
    operator delete(*(void **)(a1 + 216));
  sub_20EE0BDC8(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE122BC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  *(_QWORD *)(a1 - 56) = off_24C9EA148;
  v2 = a1 - 56;
  *(_QWORD *)a1 = &unk_24C9EA180;
  *(_QWORD *)(a1 + 56) = &unk_24C9EA1A8;
  v3 = *(_QWORD *)(a1 + 192);
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 200);
    v5 = *(void **)(a1 + 192);
    if (v4 != v3)
    {
      do
      {
        if (*(char *)(v4 - 1) < 0)
          operator delete(*(void **)(v4 - 24));
        v4 -= 24;
      }
      while (v4 != v3);
      v5 = *(void **)(a1 + 192);
    }
    *(_QWORD *)(a1 + 200) = v3;
    operator delete(v5);
  }
  if (*(char *)(a1 + 183) < 0)
    operator delete(*(void **)(a1 + 160));
  return sub_20EE0BDC8(v2);
}

void sub_20EE12370(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  *(_QWORD *)(a1 - 56) = off_24C9EA148;
  v2 = a1 - 56;
  *(_QWORD *)a1 = &unk_24C9EA180;
  *(_QWORD *)(a1 + 56) = &unk_24C9EA1A8;
  v3 = *(_QWORD *)(a1 + 192);
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 200);
    v5 = *(void **)(a1 + 192);
    if (v4 != v3)
    {
      do
      {
        if (*(char *)(v4 - 1) < 0)
          operator delete(*(void **)(v4 - 24));
        v4 -= 24;
      }
      while (v4 != v3);
      v5 = *(void **)(a1 + 192);
    }
    *(_QWORD *)(a1 + 200) = v3;
    operator delete(v5);
  }
  if (*(char *)(a1 + 183) < 0)
    operator delete(*(void **)(a1 + 160));
  sub_20EE0BDC8(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE12424(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  *(_QWORD *)(a1 - 112) = off_24C9EA148;
  v2 = a1 - 112;
  *(_QWORD *)(a1 - 56) = &unk_24C9EA180;
  *(_QWORD *)a1 = &unk_24C9EA1A8;
  v3 = *(_QWORD *)(a1 + 136);
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 144);
    v5 = *(void **)(a1 + 136);
    if (v4 != v3)
    {
      do
      {
        if (*(char *)(v4 - 1) < 0)
          operator delete(*(void **)(v4 - 24));
        v4 -= 24;
      }
      while (v4 != v3);
      v5 = *(void **)(a1 + 136);
    }
    *(_QWORD *)(a1 + 144) = v3;
    operator delete(v5);
  }
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  return sub_20EE0BDC8(v2);
}

void sub_20EE124D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  *(_QWORD *)(a1 - 112) = off_24C9EA148;
  v2 = a1 - 112;
  *(_QWORD *)(a1 - 56) = &unk_24C9EA180;
  *(_QWORD *)a1 = &unk_24C9EA1A8;
  v3 = *(_QWORD *)(a1 + 136);
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 144);
    v5 = *(void **)(a1 + 136);
    if (v4 != v3)
    {
      do
      {
        if (*(char *)(v4 - 1) < 0)
          operator delete(*(void **)(v4 - 24));
        v4 -= 24;
      }
      while (v4 != v3);
      v5 = *(void **)(a1 + 136);
    }
    *(_QWORD *)(a1 + 144) = v3;
    operator delete(v5);
  }
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  sub_20EE0BDC8(v2);
  JUMPOUT(0x212BC6398);
}

void sub_20EE125BC(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5FA08);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5FA08))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A5FA00);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A5FA08);
  }
  *a1 = qword_254A5FA00;
}

void sub_20EE12658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5FA08);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5FA08);
  _Unwind_Resume(a1);
}

void sub_20EE126B0(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20EE12C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20EE12C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EE12C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20EE12CB4(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5, const char **a6)
{
  size_t v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;
  const char *v14;
  size_t v15;
  size_t v16;
  _QWORD *p_dst;
  const char *v18;
  const char *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  size_t v24;
  size_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  _BYTE v52[24];
  __int128 v53;
  char *v54;
  __int128 v55;
  std::__shared_weak_count *v56;
  char *v57;
  std::__shared_weak_count *v58;
  _QWORD *v59;
  __int128 v60;
  _QWORD *__dst;
  __int128 v62;
  _QWORD v63[10];

  v63[7] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v11 = _os_log_pack_size();
    v12 = (std::__shared_weak_count_vtbl *)operator new(v11, (std::align_val_t)8uLL);
    v13 = (std::__shared_weak_count *)operator new();
    v13->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v13->__shared_owners_ = 0;
    v13->__shared_weak_owners_ = 0;
    v13[1].__vftable = v12;
    *(_QWORD *)&v55 = v12;
    *((_QWORD *)&v55 + 1) = v12;
    v56 = v13;
    v14 = *a5;
    v15 = strlen(*a5);
    if (v15 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    v16 = v15;
    if (v15 >= 0x17)
    {
      v21 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v15 | 7) != 0x17)
        v21 = v15 | 7;
      v22 = v21 + 1;
      p_dst = operator new(v21 + 1);
      *(_QWORD *)&v62 = v16;
      *((_QWORD *)&v62 + 1) = v22 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v62) = v15;
      p_dst = &__dst;
      if (!v15)
      {
LABEL_13:
        *((_BYTE *)p_dst + v16) = 0;
        v23 = *a6;
        v24 = strlen(*a6);
        if (v24 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        v25 = v24;
        if (v24 >= 0x17)
        {
          v27 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v24 | 7) != 0x17)
            v27 = v24 | 7;
          v28 = v27 + 1;
          v26 = operator new(v27 + 1);
          *(_QWORD *)&v60 = v25;
          *((_QWORD *)&v60 + 1) = v28 | 0x8000000000000000;
          v59 = v26;
        }
        else
        {
          HIBYTE(v60) = v24;
          v26 = &v59;
          if (!v24)
          {
LABEL_21:
            *((_BYTE *)v26 + v25) = 0;
            v63[1] = __dst;
            v63[2] = v62;
            *(_QWORD *)((char *)&v63[2] + 7) = *(_QWORD *)((char *)&v62 + 7);
            v63[4] = v59;
            v63[5] = v60;
            *(_QWORD *)((char *)&v63[5] + 7) = *(_QWORD *)((char *)&v60 + 7);
            v63[0] = off_24C9EA0E0;
            HIBYTE(v63[3]) = HIBYTE(v62);
            HIBYTE(v63[6]) = HIBYTE(v60);
            v29 = (char *)operator new(0x50uLL);
            *((_QWORD *)v29 + 3) = off_24C9EA0E0;
            *((_QWORD *)v29 + 1) = 0;
            *((_QWORD *)v29 + 2) = 0;
            *(_QWORD *)v29 = &off_24C9EA090;
            *((_OWORD *)v29 + 2) = *(_OWORD *)&v63[1];
            *((_QWORD *)v29 + 6) = v63[3];
            memset(&v63[1], 0, 24);
            *(_OWORD *)(v29 + 56) = *(_OWORD *)&v63[4];
            *((_QWORD *)v29 + 9) = v63[6];
            memset(&v63[4], 0, 24);
            v57 = v29 + 24;
            v58 = (std::__shared_weak_count *)v29;
            if (SHIBYTE(v63[3]) < 0)
            {
              operator delete((void *)v63[1]);
              *(_OWORD *)v52 = v55;
              v31 = v56;
              v30 = v57;
              *(_QWORD *)&v52[16] = v56;
              if (!v56)
              {
LABEL_27:
                *(_QWORD *)&v53 = v30;
                *((_QWORD *)&v53 + 1) = v58;
                if (v58)
                {
                  p_shared_owners = (unint64_t *)&v58->__shared_owners_;
                  do
                    v35 = __ldxr(p_shared_owners);
                  while (__stxr(v35 + 1, p_shared_owners));
                  v54 = v30;
                  do
                    v36 = __ldaxr(p_shared_owners);
                  while (__stlxr(v36 - 1, p_shared_owners));
                  if (!v36)
                  {
                    ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                    std::__shared_weak_count::__release_weak(v58);
                  }
                }
                else
                {
                  v54 = v30;
                }
                if (v56)
                {
                  v37 = (unint64_t *)&v56->__shared_owners_;
                  do
                    v38 = __ldaxr(v37);
                  while (__stlxr(v38 - 1, v37));
                  if (!v38)
                  {
                    ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                    std::__shared_weak_count::__release_weak(v56);
                  }
                }
                if (v54[31] >= 0)
                  v39 = v54 + 8;
                else
                  v39 = (char *)*((_QWORD *)v54 + 1);
                if (v54[55] >= 0)
                  v40 = v54 + 32;
                else
                  v40 = (char *)*((_QWORD *)v54 + 4);
                v41 = _os_log_pack_fill();
                *(_DWORD *)v41 = 136315394;
                *(_QWORD *)(v41 + 4) = v39;
                *(_WORD *)(v41 + 12) = 2080;
                *(_QWORD *)(v41 + 14) = v40;
                v42 = operator new();
                v43 = *((unsigned __int8 *)a2 + 23);
                if ((v43 & 0x80u) == 0)
                  v44 = a2;
                else
                  v44 = (uint64_t *)*a2;
                if ((v43 & 0x80u) != 0)
                  v43 = a2[1];
                *(_QWORD *)v42 = *(_QWORD *)v52;
                *(_OWORD *)(v42 + 8) = *(_OWORD *)&v52[8];
                *(_OWORD *)(v42 + 24) = v53;
                *(_QWORD *)(v42 + 40) = v44;
                *(_QWORD *)(v42 + 48) = v43;
                *(_BYTE *)(v42 + 56) = type;
                v63[0] = v42;
                (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), v63);
                v45 = v63[0];
                v63[0] = 0;
                if (v45)
                {
                  v46 = *(std::__shared_weak_count **)(v45 + 32);
                  if (v46)
                  {
                    v47 = (unint64_t *)&v46->__shared_owners_;
                    do
                      v48 = __ldaxr(v47);
                    while (__stlxr(v48 - 1, v47));
                    if (!v48)
                    {
                      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                      std::__shared_weak_count::__release_weak(v46);
                    }
                  }
                  v49 = *(std::__shared_weak_count **)(v45 + 16);
                  if (v49)
                  {
                    v50 = (unint64_t *)&v49->__shared_owners_;
                    do
                      v51 = __ldaxr(v50);
                    while (__stlxr(v51 - 1, v50));
                    if (!v51)
                    {
                      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                      std::__shared_weak_count::__release_weak(v49);
                    }
                  }
                  MEMORY[0x212BC6398](v45, 0x10F0C40B62ED6C6);
                }
                return;
              }
            }
            else
            {
              *(_OWORD *)v52 = v55;
              v31 = v56;
              v30 = v29 + 24;
              *(_QWORD *)&v52[16] = v56;
              if (!v56)
                goto LABEL_27;
            }
            v32 = (unint64_t *)&v31->__shared_owners_;
            do
              v33 = __ldxr(v32);
            while (__stxr(v33 + 1, v32));
            goto LABEL_27;
          }
        }
        memcpy(v26, v23, v25);
        goto LABEL_21;
      }
    }
    memcpy(p_dst, v14, v16);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v18 = *a5;
  v19 = *a6;
  LODWORD(v63[0]) = 136315394;
  *(_QWORD *)((char *)v63 + 4) = v18;
  WORD2(v63[1]) = 2080;
  *(_QWORD *)((char *)&v63[1] + 6) = v19;
  v20 = (void *)_os_log_send_and_compose_impl();
  if (v20)
    free(v20);
}

void sub_20EE13388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  sub_20E86E8C4(&a29);
  sub_20E86E8C4(&a17);
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20EE133AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EE133C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_20EE0A2B4((uint64_t)&a29);
  sub_20E86E658((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20EE133DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20EE13400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0)
  {
    operator delete(__p);
    sub_20E86E658((uint64_t)&a17);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20EE13438(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24C9EA378;
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  std::exception::~exception((std::exception *)a1);
}

void sub_20EE13468(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24C9EA378;
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  std::exception::~exception((std::exception *)a1);
  JUMPOUT(0x212BC6398);
}

char *sub_20EE134B0(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  _BYTE *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  __int128 v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  __int128 v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  char *v45;
  char *v46;
  std::__shared_weak_count *v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  char *v51;
  char *v52;

  v3 = 0x82FA0BE82FA0BE83 * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xBE82FA0BE82FA0)
    sub_20E867F44();
  if (0x5F417D05F417D06 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5F417D05F417D06 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0x82FA0BE82FA0BE83 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x5F417D05F417D0)
    v6 = 0xBE82FA0BE82FA0;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xBE82FA0BE82FA0)
      sub_20E877A38();
    v7 = (char *)operator new(344 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[344 * v3];
  v52 = &v7[344 * v6];
  *(_OWORD *)v8 = *(_OWORD *)a2;
  v8[16] = 0;
  v9 = v8 + 16;
  v8[40] = 0;
  if (*(_BYTE *)(a2 + 40))
  {
    if (*(char *)(a2 + 39) < 0)
    {
      sub_20E860C04(v9, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
    }
    else
    {
      *(_OWORD *)v9 = *(_OWORD *)(a2 + 16);
      *((_QWORD *)v8 + 4) = *(_QWORD *)(a2 + 32);
    }
    v8[40] = 1;
  }
  v10 = *(_OWORD *)(a2 + 256);
  *((_OWORD *)v8 + 15) = *(_OWORD *)(a2 + 240);
  *((_OWORD *)v8 + 16) = v10;
  v8[272] = *(_BYTE *)(a2 + 272);
  v11 = *(_OWORD *)(a2 + 192);
  *((_OWORD *)v8 + 11) = *(_OWORD *)(a2 + 176);
  *((_OWORD *)v8 + 12) = v11;
  v12 = *(_OWORD *)(a2 + 224);
  *((_OWORD *)v8 + 13) = *(_OWORD *)(a2 + 208);
  *((_OWORD *)v8 + 14) = v12;
  v13 = *(_OWORD *)(a2 + 128);
  *((_OWORD *)v8 + 7) = *(_OWORD *)(a2 + 112);
  *((_OWORD *)v8 + 8) = v13;
  v14 = *(_OWORD *)(a2 + 160);
  *((_OWORD *)v8 + 9) = *(_OWORD *)(a2 + 144);
  *((_OWORD *)v8 + 10) = v14;
  v15 = *(_OWORD *)(a2 + 64);
  *((_OWORD *)v8 + 3) = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v8 + 4) = v15;
  v16 = *(_OWORD *)(a2 + 96);
  *((_OWORD *)v8 + 5) = *(_OWORD *)(a2 + 80);
  *((_OWORD *)v8 + 6) = v16;
  v8[280] = 0;
  v8[296] = 0;
  if (*(_BYTE *)(a2 + 296))
  {
    v17 = *(_QWORD *)(a2 + 288);
    *((_QWORD *)v8 + 35) = *(_QWORD *)(a2 + 280);
    *((_QWORD *)v8 + 36) = v17;
    if (v17)
    {
      v18 = (unint64_t *)(v17 + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    v8[296] = 1;
  }
  *((_OWORD *)v8 + 19) = *(_OWORD *)(a2 + 304);
  *((_QWORD *)v8 + 40) = *(_QWORD *)(a2 + 320);
  *(_OWORD *)&v7[344 * v3 + 328] = *(_OWORD *)(a2 + 328);
  v20 = &v7[344 * v3];
  v21 = v20 + 344;
  v22 = (char *)*a1;
  v23 = (char *)a1[1];
  if (v23 == *a1)
  {
    v46 = (char *)a1[1];
  }
  else
  {
    v24 = 0;
    do
    {
      v27 = &v8[v24];
      v28 = &v23[v24];
      *(_OWORD *)&v8[v24 - 344] = *(_OWORD *)&v23[v24 - 344];
      v29 = &v8[v24 - 328];
      *v29 = 0;
      v30 = &v8[v24 - 304];
      *v30 = 0;
      if (v23[v24 - 304])
      {
        v31 = v28 - 328;
        v32 = *(_OWORD *)(v28 - 328);
        *(_QWORD *)&v8[v24 - 312] = *((_QWORD *)v28 - 39);
        *(_OWORD *)v29 = v32;
        *((_QWORD *)v31 + 1) = 0;
        *((_QWORD *)v31 + 2) = 0;
        *(_QWORD *)v31 = 0;
        *v30 = 1;
      }
      v33 = v27 - 296;
      v34 = *(_OWORD *)(v28 - 248);
      v35 = *(_OWORD *)(v28 - 232);
      v36 = *(_OWORD *)(v28 - 216);
      *(_OWORD *)(v27 - 200) = *(_OWORD *)(v28 - 200);
      *(_OWORD *)(v27 - 216) = v36;
      *(_OWORD *)(v27 - 232) = v35;
      *(_OWORD *)(v27 - 248) = v34;
      v37 = *(_OWORD *)(v28 - 184);
      v38 = *(_OWORD *)(v28 - 168);
      v39 = *(_OWORD *)(v28 - 152);
      *(_OWORD *)(v27 - 136) = *(_OWORD *)(v28 - 136);
      *(_OWORD *)(v27 - 152) = v39;
      *(_OWORD *)(v27 - 168) = v38;
      *(_OWORD *)(v27 - 184) = v37;
      v40 = *(_OWORD *)(v28 - 120);
      v41 = *(_OWORD *)(v28 - 104);
      v42 = *(_OWORD *)(v28 - 88);
      *(v27 - 72) = *(v28 - 72);
      *(_OWORD *)(v27 - 88) = v42;
      *(_OWORD *)(v27 - 104) = v41;
      *(_OWORD *)(v27 - 120) = v40;
      v43 = *(_OWORD *)(v28 - 296);
      v44 = *(_OWORD *)(v28 - 264);
      *((_OWORD *)v33 + 1) = *(_OWORD *)(v28 - 280);
      *((_OWORD *)v33 + 2) = v44;
      *(_OWORD *)v33 = v43;
      *(v27 - 64) = 0;
      *(v27 - 48) = 0;
      if (*(v28 - 48))
      {
        v45 = &v23[v24];
        *((_OWORD *)v27 - 4) = *(_OWORD *)&v23[v24 - 64];
        *((_QWORD *)v45 - 8) = 0;
        *((_QWORD *)v45 - 7) = 0;
        *(v27 - 48) = 1;
      }
      v25 = &v8[v24];
      v26 = *(_OWORD *)&v23[v24 - 40];
      *((_QWORD *)v25 - 3) = *(_QWORD *)&v23[v24 - 24];
      *(_OWORD *)(v25 - 40) = v26;
      *((_OWORD *)v25 - 1) = *(_OWORD *)&v23[v24 - 16];
      v24 -= 344;
    }
    while (&v23[v24] != v22);
    v46 = (char *)*a1;
    v23 = (char *)a1[1];
    v20 = &v8[v24];
  }
  *a1 = v20;
  a1[1] = v21;
  a1[2] = v52;
  if (v23 == v46)
  {
    if (v23)
      goto LABEL_32;
    return v21;
  }
  do
  {
    v51 = v23 - 344;
    if (!*(v23 - 48))
      goto LABEL_40;
    v48 = (std::__shared_weak_count *)*((_QWORD *)v23 - 7);
    if (!v48)
      goto LABEL_40;
    p_shared_owners = (unint64_t *)&v48->__shared_owners_;
    do
      v50 = __ldaxr(p_shared_owners);
    while (__stlxr(v50 - 1, p_shared_owners));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
      if (!*(v23 - 304))
        goto LABEL_34;
    }
    else
    {
LABEL_40:
      if (!*(v23 - 304))
        goto LABEL_34;
    }
    if (*(v23 - 305) < 0)
      operator delete(*((void **)v23 - 41));
LABEL_34:
    v23 -= 344;
  }
  while (v51 != v46);
  v23 = v46;
  if (!v46)
    return v21;
LABEL_32:
  operator delete(v23);
  return v21;
}

void sub_20EE138B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  if (*(_BYTE *)(v3 + 40))
  {
    if (*(char *)(v3 + 39) < 0)
      operator delete(*v2);
  }
  sub_20EE138E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE138E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 344;
    if (!*(_BYTE *)(i - 48))
      goto LABEL_9;
    v4 = *(std::__shared_weak_count **)(i - 56);
    if (!v4)
      goto LABEL_9;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      if (!*(_BYTE *)(i - 304))
        continue;
    }
    else
    {
LABEL_9:
      if (!*(_BYTE *)(i - 304))
        continue;
    }
    if (*(char *)(i - 305) < 0)
      operator delete(*(void **)(i - 328));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void **sub_20EE139A8(void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 == v2)
    {
LABEL_12:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      if (*((char *)v3 - 1) < 0)
      {
        operator delete(*(v3 - 3));
        if (*((_BYTE *)v3 - 168))
        {
LABEL_9:
          if (*((char *)v3 - 169) < 0)
            operator delete(*(v3 - 24));
        }
      }
      else if (*((_BYTE *)v3 - 168))
      {
        goto LABEL_9;
      }
      v3 -= 27;
      if (v3 == v2)
      {
        v4 = *a1;
        goto LABEL_12;
      }
    }
  }
  return a1;
}

void sub_20EE13A40()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20EE13A54(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C9EA3A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20EE13A8C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C9EA3A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20EE13AAC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 272) + 176))(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 272), *(_QWORD *)(a1 + 8));
}

uint64_t sub_20EE13AC0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio22user_anchor_node_group18AnchorIONodeWorkerC1ERKNSt3__14__fs10filesystem4pathEbRNS_3kit"
                     "2fs11IFilesystemEE3$_2")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio22user_anchor_node_group18AnchorIONodeWorkerC1ERKNSt3__14__fs10filesystem4pat"
                                "hEbRNS_3kit2fs11IFilesystemEE3$_2" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio22user_anchor_node_group18AnchorIONodeWorkerC1ERKNSt3__14__fs10filesystem4pathEbRNS_3kit2fs11IFilesystemEE3$_2"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio22user_anchor_node_group18AnchorIONodeWorkerC1ERKNSt3__14__fs10filesystem4pathEbRNS_3kit2fs11IFilesystemEE3$_2" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EE13B2C()
{
  return &unk_24C9EA410;
}

void sub_20EE13B3C()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20EE13B50(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C9EA430;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20EE13B88(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C9EA430;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20EE13BA8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 272) + 312))(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 272), *(_QWORD *)(a1 + 8));
}

uint64_t sub_20EE13BBC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio22user_anchor_node_group18AnchorIONodeWorkerC1ERKNSt3__14__fs10filesystem4pathEbRNS_3kit"
                     "2fs11IFilesystemEE3$_3")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio22user_anchor_node_group18AnchorIONodeWorkerC1ERKNSt3__14__fs10filesystem4pat"
                                "hEbRNS_3kit2fs11IFilesystemEE3$_3" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio22user_anchor_node_group18AnchorIONodeWorkerC1ERKNSt3__14__fs10filesystem4pathEbRNS_3kit2fs11IFilesystemEE3$_3"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio22user_anchor_node_group18AnchorIONodeWorkerC1ERKNSt3__14__fs10filesystem4pathEbRNS_3kit2fs11IFilesystemEE3$_3" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EE13C28()
{
  return &unk_24C9EA490;
}

void sub_20EE13C38()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EE13C4C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9EA4B0;
  result[1] = v3;
  return result;
}

uint64_t sub_20EE13C80(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9EA4B0;
  a2[1] = v2;
  return result;
}

uint64_t sub_20EE13C9C(uint64_t a1)
{
  return sub_20EE0C134(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20EE13CA4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio22user_anchor_node_group18AnchorIONodeWorkerC1ERKNSt3__14__fs10filesystem4pathEbRNS_3kit"
                     "2fs11IFilesystemEE3$_4")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio22user_anchor_node_group18AnchorIONodeWorkerC1ERKNSt3__14__fs10filesystem4pat"
                                "hEbRNS_3kit2fs11IFilesystemEE3$_4" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio22user_anchor_node_group18AnchorIONodeWorkerC1ERKNSt3__14__fs10filesystem4pathEbRNS_3kit2fs11IFilesystemEE3$_4"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio22user_anchor_node_group18AnchorIONodeWorkerC1ERKNSt3__14__fs10filesystem4pathEbRNS_3kit2fs11IFilesystemEE3$_4" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EE13D10()
{
  return &unk_24C9EA510;
}

void sub_20EE13D20()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EE13D34(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9EA530;
  result[1] = v3;
  return result;
}

uint64_t sub_20EE13D68(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9EA530;
  a2[1] = v2;
  return result;
}

uint64_t sub_20EE13D84(uint64_t a1)
{
  return sub_20EE0C134(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20EE13D8C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio22user_anchor_node_group18AnchorIONodeWorker10AssertRootEvE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio22user_anchor_node_group18AnchorIONodeWorker10AssertRootEvE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio22user_anchor_node_group18AnchorIONodeWorker10AssertRootEvE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio22user_anchor_node_group18AnchorIONodeWorker10AssertRootEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EE13DF8()
{
  return &unk_24C9EA590;
}

void sub_20EE13E04(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9EA5B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EE13E14(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9EA5B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EE13E44(uint64_t a1)
{
  char **v1;
  char **v3;
  void *v4;

  v1 = *(char ***)(a1 + 24);
  if (v1)
  {
    v3 = *(char ***)(a1 + 32);
    v4 = *(void **)(a1 + 24);
    if (v3 != v1)
    {
      do
      {
        v3 -= 6;
        sub_20EB90FE0(v3);
      }
      while (v3 != v1);
      v4 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v1;
    operator delete(v4);
  }
}

_DWORD *sub_20EE13EB0(_DWORD ***a1)
{
  return sub_20EE13ECC(**a1, (char *)(*a1)[1]);
}

void sub_20EE13EBC(uint64_t a1, uint64_t a2)
{
  sub_20EE13FBC((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

_DWORD *sub_20EE13ECC(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C9EA5F0[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_20EE13FBC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C9EA5F0[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_20E877C80((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_20EE14170(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_20EE141B4(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20EE142AC((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_20EE142A4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_20EE142AC(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_20EE144A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877E3C((uint64_t)va);
  _Unwind_Resume(a1);
}

void ***sub_20EE144BC(void ***result)
{
  void ***v1;
  void **v2;
  void **v3;
  void **v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (void **)**result;
    if (v3)
    {
      v4 = (void **)v2[1];
      v5 = **result;
      if (v4 == v3)
      {
LABEL_14:
        v2[1] = v3;
        operator delete(v5);
        return v1;
      }
      while (1)
      {
        if (*((char *)v4 - 1) < 0)
        {
          operator delete(*(v4 - 3));
          if (*((_BYTE *)v4 - 168))
          {
LABEL_11:
            if (*((char *)v4 - 169) < 0)
              operator delete(*(v4 - 24));
          }
        }
        else if (*((_BYTE *)v4 - 168))
        {
          goto LABEL_11;
        }
        v4 -= 27;
        if (v4 == v3)
        {
          v5 = **v1;
          goto LABEL_14;
        }
      }
    }
  }
  return result;
}

_DWORD *sub_20EE14574(_DWORD ***a1)
{
  return sub_20EA8A320(**a1, (char *)(*a1)[1]);
}

void sub_20EE14580(uint64_t a1, uint64_t a2)
{
  sub_20EE14590((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

void sub_20EE14590(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C9EA5F0[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_20E877C80((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_20EE14744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_20EE14788(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20EE14880((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_20EE14878(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_20EE14880(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_20EE14A7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877E3C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE14A90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void **v11;
  void **v12;
  _BYTE *v13;
  size_t v14;
  char *v15;
  char *v16;
  void **v17;
  char *v18;
  char *v19;
  void **v20;
  char *v21;
  char *v22;
  void **v23;
  char *v24;
  char *v25;
  void **v26;
  char *v27;
  char *v28;
  void **v29;
  unsigned __int8 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  int v39;
  int v41;
  _BYTE v42[7];
  _BYTE __p[32];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _OWORD v55[2];
  _QWORD v56[2];
  _BYTE __dst[32];
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _OWORD v69[2];
  _BYTE v70[15];
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)(a1 + 8) = 0u;
  v5 = a1 + 8;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  v6 = a1 + 120;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  v7 = a1 + 176;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  v8 = a1 + 232;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  v9 = a1 + 344;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_QWORD *)a1 = &off_24C9EA6C0;
  *(_QWORD *)(a1 + 56) = &unk_24C9EA738;
  *(_QWORD *)(a1 + 112) = &unk_24C9EA760;
  *(_QWORD *)(a1 + 168) = &unk_24C9EA788;
  *(_QWORD *)(a1 + 224) = &unk_24C9EA7B0;
  *(_QWORD *)(a1 + 280) = &unk_24C9EA7D8;
  *(_QWORD *)(a1 + 336) = &unk_24C9EA800;
  *(_QWORD *)(a1 + 392) = &unk_24C9EA828;
  *(_QWORD *)(a1 + 448) = &unk_24C9EA850;
  *(_QWORD *)(a1 + 504) = &unk_24C9EA878;
  *(_QWORD *)(a1 + 560) = &unk_24C9EA8A0;
  sub_20E96A108(a1 + 664, a3);
  *(_QWORD *)(a1 + 704) = a2;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_DWORD *)(a1 + 744) = 1065353216;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_DWORD *)(a1 + 784) = 1065353216;
  if (!a2
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/UserAnchorNodeGroup/include_private/VIO/UserAnchorNodeGroup/AnchorsMap.h", 77, (uint64_t)"max_anchors_per_group_ > 0", 26, (uint64_t)"Max anchors per group must be positive", 38, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_DWORD *)(a1 + 872) = 1065353216;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_DWORD *)(a1 + 912) = 1065353216;
  *(_BYTE *)(a1 + 1376) = 0;
  *(_WORD *)(a1 + 1384) = 0;
  *(_BYTE *)(a1 + 1386) = 0;
  *(_OWORD *)(a1 + 1392) = 0u;
  *(_OWORD *)(a1 + 1408) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 945) = 0u;
  *(_DWORD *)(a1 + 1424) = 1065353216;
  *(_QWORD *)(a1 + 1448) = 0;
  __dst[23] = 21;
  *(_OWORD *)(a1 + 1432) = 0u;
  strcpy(__dst, "Anchor Transform Node");
  v10 = (char *)operator new(0x50uLL);
  v11 = (void **)(a1 + 616);
  *(_QWORD *)__p = v10;
  *(_OWORD *)&__p[8] = xmmword_2102DBFA0;
  strcpy(v10, "Transforms keyframe anchor updates/additions/removals into user anchor updates");
  if ((_BYTE *)(a1 + 616) != __dst)
  {
    if (*(char *)(a1 + 639) < 0)
    {
      sub_20E867CBC(v11, __dst, 0x15uLL);
    }
    else
    {
      *(_OWORD *)v11 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 632) = *(_QWORD *)&__dst[16];
    }
  }
  v12 = (void **)(a1 + 640);
  if ((_BYTE *)(a1 + 640) != __p)
  {
    if (*(char *)(a1 + 663) < 0)
    {
      if (__p[23] >= 0)
        v13 = __p;
      else
        v13 = *(_BYTE **)__p;
      if (__p[23] >= 0)
        v14 = __p[23];
      else
        v14 = *(_QWORD *)&__p[8];
      sub_20E867CBC(v12, v13, v14);
    }
    else if ((__p[23] & 0x80) != 0)
    {
      sub_20E867BF8(v12, *(void **)__p, *(size_t *)&__p[8]);
    }
    else
    {
      *(_OWORD *)v12 = *(_OWORD *)__p;
      *(_QWORD *)(a1 + 656) = *(_QWORD *)&__p[16];
    }
  }
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_21;
  }
  else if ((__dst[23] & 0x80000000) == 0)
  {
    goto LABEL_21;
  }
  operator delete(*(void **)__dst);
LABEL_21:
  v15 = (char *)operator new(0x20uLL);
  strcpy(v15, "Anchor Group Changed Channel");
  v16 = (char *)operator new(0x60uLL);
  strcpy(v16, "Prunes the inactive anchors from this node and adds the anchors from the newly active groups");
  sub_20E860C04(__dst, v15, 0x1CuLL);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)v5);
  *(_OWORD *)v5 = *(_OWORD *)__dst;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)&__dst[16];
  sub_20E860C04(__dst, v16, 0x5CuLL);
  v17 = (void **)(a1 + 32);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*v17);
  *(_OWORD *)v17 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)&__dst[16];
  operator delete(v16);
  operator delete(v15);
  v18 = (char *)operator new(0x20uLL);
  strcpy(v18, "Save User Anchors Channel");
  v19 = (char *)operator new(0x28uLL);
  strcpy(v19, "Saves all of the user anchors to disk");
  sub_20E860C04(__dst, v18, 0x19uLL);
  if (*(char *)(a1 + 255) < 0)
    operator delete(*(void **)v8);
  *(_OWORD *)v8 = *(_OWORD *)__dst;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)&__dst[16];
  sub_20E860C04(__dst, v19, 0x25uLL);
  v20 = (void **)(a1 + 256);
  if (*(char *)(a1 + 279) < 0)
    operator delete(*v20);
  *(_OWORD *)v20 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 272) = *(_QWORD *)&__dst[16];
  operator delete(v19);
  operator delete(v18);
  v21 = (char *)operator new(0x20uLL);
  strcpy(v21, "Input Remove Anchor Channel");
  v22 = (char *)operator new(0x28uLL);
  strcpy(v22, "Removes the user anchor from this node");
  sub_20E860C04(__dst, v21, 0x1BuLL);
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)v6);
  *(_OWORD *)v6 = *(_OWORD *)__dst;
  *(_QWORD *)(v6 + 16) = *(_QWORD *)&__dst[16];
  sub_20E860C04(__dst, v22, 0x26uLL);
  v23 = (void **)(a1 + 144);
  if (*(char *)(a1 + 167) < 0)
    operator delete(*v23);
  *(_OWORD *)v23 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)&__dst[16];
  operator delete(v22);
  operator delete(v21);
  v24 = (char *)operator new(0x20uLL);
  strcpy(v24, "Anchor Transformation Channel");
  v25 = (char *)operator new(0x38uLL);
  strcpy(v25, "Transform keyframe anchor updates into user anchors");
  sub_20E860C04(__dst, v24, 0x1DuLL);
  if (*(char *)(a1 + 199) < 0)
    operator delete(*(void **)v7);
  *(_OWORD *)v7 = *(_OWORD *)__dst;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)&__dst[16];
  sub_20E860C04(__dst, v25, 0x33uLL);
  v26 = (void **)(a1 + 200);
  if (*(char *)(a1 + 223) < 0)
    operator delete(*v26);
  *(_OWORD *)v26 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 216) = *(_QWORD *)&__dst[16];
  operator delete(v25);
  operator delete(v24);
  v27 = (char *)operator new(0x20uLL);
  strcpy(v27, "Input Object Anchor CM Channel");
  v28 = (char *)operator new(0x48uLL);
  strcpy(v28, "Caches ObjectAnchorCM's for processing on the next metadata update");
  sub_20E860C04(__dst, v27, 0x1EuLL);
  if (*(char *)(a1 + 367) < 0)
    operator delete(*(void **)v9);
  *(_OWORD *)v9 = *(_OWORD *)__dst;
  *(_QWORD *)(v9 + 16) = *(_QWORD *)&__dst[16];
  sub_20E860C04(__dst, v28, 0x42uLL);
  v29 = (void **)(a1 + 368);
  if (*(char *)(a1 + 391) < 0)
    operator delete(*v29);
  *(_OWORD *)v29 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 384) = *(_QWORD *)&__dst[16];
  operator delete(v28);
  operator delete(v27);
  v30 = atomic_load((unsigned __int8 *)&qword_254A51318);
  if ((v30 & 1) == 0 && __cxa_guard_acquire(&qword_254A51318))
  {
    xmmword_254A51308 = 0uLL;
    __cxa_guard_release(&qword_254A51318);
  }
  if (qword_254A51320 != -1)
    dispatch_once(&qword_254A51320, &unk_24C9EAD40);
  v54 = v68;
  v55[0] = v69[0];
  *(_OWORD *)((char *)v55 + 15) = *(_OWORD *)((char *)v69 + 15);
  v50 = v64;
  v51 = v65;
  v52 = v66;
  v53 = v67;
  v46 = v60;
  v47 = v61;
  v48 = v62;
  v49 = v63;
  *(_OWORD *)__p = *(_OWORD *)__dst;
  *(_OWORD *)&__p[16] = *(_OWORD *)&__dst[16];
  v44 = v58;
  v45 = v59;
  *(_OWORD *)(a1 + 976) = xmmword_21037ABE8;
  *(_OWORD *)(a1 + 992) = unk_21037ABF8;
  *(_OWORD *)(a1 + 1008) = xmmword_21037AC08;
  *(_OWORD *)(a1 + 1024) = unk_21037AC18;
  v31 = *(_OWORD *)&__p[16];
  *(_OWORD *)(a1 + 1097) = *(_OWORD *)__p;
  *(_OWORD *)(a1 + 1113) = v31;
  v32 = v49;
  *(_OWORD *)(a1 + 1193) = v48;
  v33 = v46;
  *(_OWORD *)(a1 + 1177) = v47;
  *(_OWORD *)(a1 + 1161) = v33;
  v34 = v44;
  *(_OWORD *)(a1 + 1145) = v45;
  v35 = v53;
  *(_OWORD *)(a1 + 1257) = v52;
  v36 = v50;
  *(_OWORD *)(a1 + 1241) = v51;
  *(_OWORD *)(a1 + 1225) = v36;
  *(_OWORD *)(a1 + 1209) = v32;
  *(_OWORD *)(a1 + 1320) = *(_OWORD *)((char *)v55 + 15);
  v37 = v54;
  *(_OWORD *)(a1 + 1305) = v55[0];
  *(_OWORD *)(a1 + 1289) = v37;
  *(_OWORD *)(a1 + 1273) = v35;
  v38 = xmmword_254A51308;
  v56[0] = *(_QWORD *)v70;
  *(_QWORD *)((char *)v56 + 7) = *(_QWORD *)&v70[7];
  v41 = *(_DWORD *)v42;
  HIBYTE(v41) = v42[3];
  *(_OWORD *)(a1 + 944) = xmmword_254A51308;
  v39 = *(unsigned __int8 *)(a1 + 1376);
  *(_OWORD *)(a1 + 960) = v38;
  *(_QWORD *)(a1 + 1040) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 1048) = 0;
  *(_QWORD *)(a1 + 1064) = 0;
  *(_QWORD *)(a1 + 1056) = 0;
  *(_BYTE *)(a1 + 1072) = 0;
  *(_QWORD *)(a1 + 1080) = *(_QWORD *)((char *)v56 + 7);
  *(_QWORD *)(a1 + 1073) = v56[0];
  *(_BYTE *)(a1 + 1088) = 0;
  *(_DWORD *)(a1 + 1092) = *(_DWORD *)&v42[3];
  *(_DWORD *)(a1 + 1089) = v41;
  *(_BYTE *)(a1 + 1096) = 0;
  *(_OWORD *)(a1 + 1129) = v34;
  *(_BYTE *)(a1 + 1336) = 0;
  if (v39)
  {
    if (*(_BYTE *)(a1 + 1368))
    {
      if (*(char *)(a1 + 1367) < 0)
        operator delete(*(void **)(a1 + 1344));
      *(_BYTE *)(a1 + 1368) = 0;
    }
  }
  else
  {
    *(_BYTE *)(a1 + 1344) = 0;
    *(_BYTE *)(a1 + 1368) = 0;
    *(_BYTE *)(a1 + 1376) = 1;
  }
  return a1;
}

void sub_20EE153C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  uint64_t v55;
  void **v56;
  void **v57;
  void *v59;

  if (a20 < 0)
    operator delete(__p);
  if (a55 < 0)
    operator delete(a50);
  sub_20ECF6960(a10);
  sub_20E8C25A8(v55 + 1392);
  sub_20EE15548(v55 + 944);
  v59 = *v57;
  if (*v57)
  {
    *(_QWORD *)(v55 + 928) = v59;
    operator delete(v59);
  }
  sub_20E8C25A8(v55 + 880);
  sub_20E969C90(v55 + 840);
  sub_20EAA9C38((void **)(v55 + 816));
  sub_20EAA9608(v56);
  sub_20EE15598(a11);
  sub_20E8C25A8(a12);
  sub_20EE155FC(v55);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE15548(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(_BYTE *)(result + 432) && *(_BYTE *)(result + 424) && *(char *)(result + 423) < 0)
  {
    operator delete(*(void **)(result + 400));
    return v1;
  }
  return result;
}

uint64_t sub_20EE15598(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  sub_20EE1C758(a1 + 48);
  v2 = *(_QWORD **)(a1 + 24);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20EE1C7E8((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t sub_20EE155FC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C9EAA38;
  *(_QWORD *)(a1 + 56) = &unk_24C9EAA60;
  *(_QWORD *)(a1 + 112) = &unk_24C9EAA88;
  *(_QWORD *)(a1 + 168) = &unk_24C9EAAB0;
  *(_QWORD *)(a1 + 224) = &unk_24C9EAAD8;
  *(_QWORD *)(a1 + 280) = &unk_24C9EAB00;
  *(_QWORD *)(a1 + 336) = &unk_24C9EAB28;
  *(_QWORD *)(a1 + 392) = &unk_24C9EAB50;
  *(_QWORD *)(a1 + 448) = &unk_24C9EAB78;
  *(_QWORD *)(a1 + 504) = &unk_24C9EABA0;
  *(_QWORD *)(a1 + 560) = &unk_24C9EABC8;
  if (*(char *)(a1 + 663) < 0)
  {
    operator delete(*(void **)(a1 + 640));
    if ((*(char *)(a1 + 639) & 0x80000000) == 0)
    {
LABEL_3:
      *(_QWORD *)(a1 + 560) = off_24C9EA338;
      if ((*(char *)(a1 + 615) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_28;
    }
  }
  else if ((*(char *)(a1 + 639) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 616));
  *(_QWORD *)(a1 + 560) = off_24C9EA338;
  if ((*(char *)(a1 + 615) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 591) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_29;
  }
LABEL_28:
  operator delete(*(void **)(a1 + 592));
  if ((*(char *)(a1 + 591) & 0x80000000) == 0)
  {
LABEL_5:
    *(_QWORD *)(a1 + 504) = off_24C9EAD08;
    if ((*(char *)(a1 + 559) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_30;
  }
LABEL_29:
  operator delete(*(void **)(a1 + 568));
  *(_QWORD *)(a1 + 504) = off_24C9EAD08;
  if ((*(char *)(a1 + 559) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(a1 + 535) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_31;
  }
LABEL_30:
  operator delete(*(void **)(a1 + 536));
  if ((*(char *)(a1 + 535) & 0x80000000) == 0)
  {
LABEL_7:
    *(_QWORD *)(a1 + 448) = off_24C9EACE0;
    if ((*(char *)(a1 + 503) & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_32;
  }
LABEL_31:
  operator delete(*(void **)(a1 + 512));
  *(_QWORD *)(a1 + 448) = off_24C9EACE0;
  if ((*(char *)(a1 + 503) & 0x80000000) == 0)
  {
LABEL_8:
    if ((*(char *)(a1 + 479) & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_33;
  }
LABEL_32:
  operator delete(*(void **)(a1 + 480));
  if ((*(char *)(a1 + 479) & 0x80000000) == 0)
  {
LABEL_9:
    *(_QWORD *)(a1 + 392) = off_24C9EACB8;
    if ((*(char *)(a1 + 447) & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_34;
  }
LABEL_33:
  operator delete(*(void **)(a1 + 456));
  *(_QWORD *)(a1 + 392) = off_24C9EACB8;
  if ((*(char *)(a1 + 447) & 0x80000000) == 0)
  {
LABEL_10:
    if ((*(char *)(a1 + 423) & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_35;
  }
LABEL_34:
  operator delete(*(void **)(a1 + 424));
  if ((*(char *)(a1 + 423) & 0x80000000) == 0)
  {
LABEL_11:
    *(_QWORD *)(a1 + 336) = off_24C9EAC90;
    if ((*(char *)(a1 + 391) & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_36;
  }
LABEL_35:
  operator delete(*(void **)(a1 + 400));
  *(_QWORD *)(a1 + 336) = off_24C9EAC90;
  if ((*(char *)(a1 + 391) & 0x80000000) == 0)
  {
LABEL_12:
    if ((*(char *)(a1 + 367) & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_37;
  }
LABEL_36:
  operator delete(*(void **)(a1 + 368));
  if ((*(char *)(a1 + 367) & 0x80000000) == 0)
  {
LABEL_13:
    *(_QWORD *)(a1 + 280) = off_24C9D0818;
    if ((*(char *)(a1 + 335) & 0x80000000) == 0)
      goto LABEL_14;
    goto LABEL_38;
  }
LABEL_37:
  operator delete(*(void **)(a1 + 344));
  *(_QWORD *)(a1 + 280) = off_24C9D0818;
  if ((*(char *)(a1 + 335) & 0x80000000) == 0)
  {
LABEL_14:
    if ((*(char *)(a1 + 311) & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_39;
  }
LABEL_38:
  operator delete(*(void **)(a1 + 312));
  if ((*(char *)(a1 + 311) & 0x80000000) == 0)
  {
LABEL_15:
    *(_QWORD *)(a1 + 224) = off_24C9EAC68;
    if ((*(char *)(a1 + 279) & 0x80000000) == 0)
      goto LABEL_16;
    goto LABEL_40;
  }
LABEL_39:
  operator delete(*(void **)(a1 + 288));
  *(_QWORD *)(a1 + 224) = off_24C9EAC68;
  if ((*(char *)(a1 + 279) & 0x80000000) == 0)
  {
LABEL_16:
    if ((*(char *)(a1 + 255) & 0x80000000) == 0)
      goto LABEL_17;
    goto LABEL_41;
  }
LABEL_40:
  operator delete(*(void **)(a1 + 256));
  if ((*(char *)(a1 + 255) & 0x80000000) == 0)
  {
LABEL_17:
    *(_QWORD *)(a1 + 168) = off_24C9EAC40;
    if ((*(char *)(a1 + 223) & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_42;
  }
LABEL_41:
  operator delete(*(void **)(a1 + 232));
  *(_QWORD *)(a1 + 168) = off_24C9EAC40;
  if ((*(char *)(a1 + 223) & 0x80000000) == 0)
  {
LABEL_18:
    if ((*(char *)(a1 + 199) & 0x80000000) == 0)
      goto LABEL_19;
    goto LABEL_43;
  }
LABEL_42:
  operator delete(*(void **)(a1 + 200));
  if ((*(char *)(a1 + 199) & 0x80000000) == 0)
  {
LABEL_19:
    *(_QWORD *)(a1 + 112) = off_24C9EAC18;
    if ((*(char *)(a1 + 167) & 0x80000000) == 0)
      goto LABEL_20;
    goto LABEL_44;
  }
LABEL_43:
  operator delete(*(void **)(a1 + 176));
  *(_QWORD *)(a1 + 112) = off_24C9EAC18;
  if ((*(char *)(a1 + 167) & 0x80000000) == 0)
  {
LABEL_20:
    if ((*(char *)(a1 + 143) & 0x80000000) == 0)
      goto LABEL_21;
    goto LABEL_45;
  }
LABEL_44:
  operator delete(*(void **)(a1 + 144));
  if ((*(char *)(a1 + 143) & 0x80000000) == 0)
  {
LABEL_21:
    *(_QWORD *)(a1 + 56) = off_24C9D0570;
    if ((*(char *)(a1 + 111) & 0x80000000) == 0)
      goto LABEL_22;
    goto LABEL_46;
  }
LABEL_45:
  operator delete(*(void **)(a1 + 120));
  *(_QWORD *)(a1 + 56) = off_24C9D0570;
  if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
LABEL_22:
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
      goto LABEL_23;
    goto LABEL_47;
  }
LABEL_46:
  operator delete(*(void **)(a1 + 88));
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
LABEL_23:
    *(_QWORD *)a1 = off_24C9EABF0;
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_24;
LABEL_48:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_49;
  }
LABEL_47:
  operator delete(*(void **)(a1 + 64));
  *(_QWORD *)a1 = off_24C9EABF0;
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_48;
LABEL_24:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_49:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20EE159C8(uint64_t a1@<X0>, uint64_t ***a2@<X1>, char ****a3@<X8>)
{
  uint64_t v6;
  __int128 *v7;
  __int128 *v8;
  char *v9;
  __int128 v10;
  char **v11;
  char *v12;
  char *v13;
  char *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  char **v18;
  char **v19;
  unint64_t v20;
  char ***v21;
  char **v22;
  char *v23;
  char *i;
  int v25;
  __int128 v26;
  void **v27;
  unint64_t v28;
  _QWORD *v29;
  char *v30;
  void **v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  __int128 v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  void **v43;
  __int128 v44;
  void **v45;
  uint64_t **v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  float64x2_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void **v55;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  const void **v62;
  void **v64;
  int v65;
  BOOL v66;
  uint64_t v67;
  void *v68;
  void *v69;
  void **v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void **v74;
  float64x2_t *v75;
  uint64_t v76;
  BOOL v77;
  char v78;
  BOOL v79;
  BOOL v80;
  BOOL v81;
  BOOL v83;
  BOOL v84;
  BOOL v85;
  uint64_t v87;
  BOOL v88;
  char v89;
  float64x2_t v91;
  float64x2_t v93;
  float64x2_t v94;
  double v95;
  char ****v102;
  uint64_t ***v103;
  uint64_t *v104;
  char **v105;
  uint64_t *v106;
  char **v107;
  uint64_t v108;
  void ***__dst;
  void *v110[2];
  char v111;
  char **v112;
  char **v113;
  unint64_t v114;
  char **v115;
  char **v116;
  unint64_t v117;
  void *__p[2];
  void *v119[3];
  char *v120;
  uint64_t v121;

  v121 = *MEMORY[0x24BDAC8D0];
  v6 = a2[3] - a2[2];
  v116 = 0;
  v117 = 0;
  v115 = 0;
  sub_20EB9C790((uint64_t)&v115, 0xAAAAAAAAAAAAAAABLL * v6);
  v7 = (__int128 *)a2[2];
  v8 = (__int128 *)a2[3];
  v102 = a3;
  if (v7 != v8)
  {
    while (1)
    {
      __p[0] = 0;
      __p[1] = 0;
      v119[0] = 0;
      if (*((char *)v7 + 23) < 0)
      {
        sub_20E860C04(&v119[1], *(void **)v7, *((_QWORD *)v7 + 1));
      }
      else
      {
        v10 = *v7;
        v120 = (char *)*((_QWORD *)v7 + 2);
        *(_OWORD *)&v119[1] = v10;
      }
      v11 = v116;
      if ((unint64_t)v116 >= v117)
      {
        v116 = sub_20EE1C9B0(&v115, (uint64_t)__p);
        if (SHIBYTE(v120) < 0)
        {
          operator delete(v119[1]);
          v13 = (char *)__p[0];
          if (!__p[0])
            goto LABEL_5;
        }
        else
        {
          v13 = (char *)__p[0];
          if (!__p[0])
            goto LABEL_5;
        }
      }
      else
      {
        *v116 = 0;
        v11[1] = 0;
        v11[2] = 0;
        *(_OWORD *)v11 = *(_OWORD *)__p;
        v11[2] = (char *)v119[0];
        __p[0] = 0;
        __p[1] = 0;
        v119[0] = 0;
        v12 = v120;
        *(_OWORD *)(v11 + 3) = *(_OWORD *)&v119[1];
        v11[5] = v12;
        v119[2] = 0;
        v120 = 0;
        v119[1] = 0;
        v116 = v11 + 6;
        v13 = (char *)__p[0];
        if (!__p[0])
          goto LABEL_5;
      }
      v14 = (char *)__p[1];
      v9 = v13;
      if (__p[1] != v13)
        break;
LABEL_4:
      __p[1] = v13;
      operator delete(v9);
LABEL_5:
      v7 = (__int128 *)((char *)v7 + 24);
      if (v7 == v8)
        goto LABEL_29;
    }
    while (1)
    {
      if (!*(v14 - 48))
        goto LABEL_265;
      v15 = (std::__shared_weak_count *)*((_QWORD *)v14 - 7);
      if (!v15)
        goto LABEL_265;
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
        if (*(v14 - 304))
        {
LABEL_23:
          if (*(v14 - 305) < 0)
            operator delete(*((void **)v14 - 41));
        }
      }
      else
      {
LABEL_265:
        if (*(v14 - 304))
          goto LABEL_23;
      }
      v14 -= 344;
      if (v14 == v13)
      {
        v9 = (char *)__p[0];
        a3 = v102;
        goto LABEL_4;
      }
    }
  }
LABEL_29:
  v103 = a2;
  v18 = v115;
  v19 = v116;
  v112 = v115;
  v113 = v116;
  v20 = v117;
  v114 = v117;
  v21 = (char ***)operator new(0x30uLL);
  v21[1] = 0;
  v21[2] = 0;
  v21[3] = v18;
  *v21 = (char **)&off_24C9EA5B0;
  v21[4] = v19;
  v21[5] = (char **)v20;
  *a3 = v21 + 3;
  a3[1] = v21;
  if (v18 != v19)
  {
    sub_20EE24B14(a1 + 704, v102, 1);
    v22 = **v102;
    v105 = (*v102)[1];
    if (v22 != v105)
    {
      __dst = (void ***)(a1 + 816);
      do
      {
        v23 = *v22;
        i = v22[1];
        v107 = v22;
        while (v23 != i)
        {
          *(_OWORD *)__p = *(_OWORD *)v23;
          LOBYTE(v119[0]) = 0;
          LOBYTE(v120) = 0;
          v25 = v23[40];
          if (v23[40])
          {
            if (v23[39] < 0)
            {
              sub_20E860C04(v119, *((void **)v23 + 2), *((_QWORD *)v23 + 3));
            }
            else
            {
              v26 = *((_OWORD *)v23 + 1);
              v119[2] = *((void **)v23 + 4);
              *(_OWORD *)v119 = v26;
            }
            LOBYTE(v120) = 1;
            v27 = *(void ***)(a1 + 824);
            v28 = *(_QWORD *)(a1 + 832);
            if ((unint64_t)v27 >= v28)
            {
LABEL_40:
              v29 = (_QWORD *)a1;
              v30 = i;
              v31 = *__dst;
              v32 = 0xAAAAAAAAAAAAAAABLL * (((char *)v27 - (char *)*__dst) >> 4);
              v33 = v32 + 1;
              if (v32 + 1 > 0x555555555555555)
                sub_20EAA9DC0();
              v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - (_QWORD)v31) >> 4);
              if (2 * v34 > v33)
                v33 = 2 * v34;
              if (v34 >= 0x2AAAAAAAAAAAAAALL)
                v35 = 0x555555555555555;
              else
                v35 = v33;
              if (v35)
              {
                if (v35 > 0x555555555555555)
                  sub_20E877A38();
                v36 = (char *)operator new(48 * v35);
              }
              else
              {
                v36 = 0;
              }
              v38 = &v36[48 * v32];
              *(_OWORD *)v38 = *(_OWORD *)__p;
              v38[16] = 0;
              v38[40] = 0;
              if (v25)
              {
                *((_OWORD *)v38 + 1) = *(_OWORD *)v119;
                *((void **)v38 + 4) = v119[2];
                memset(v119, 0, sizeof(v119));
                v38[40] = 1;
              }
              v39 = &v36[48 * v35];
              v40 = v38 + 48;
              if (v27 == v31)
              {
                v29[102] = v38;
                v29[103] = v40;
                v29[104] = v39;
                i = v30;
                if (v27)
                  goto LABEL_65;
              }
              else
              {
                v41 = 0;
                do
                {
                  v42 = &v38[v41 * 8];
                  v43 = &v27[v41];
                  *((_OWORD *)v42 - 3) = *(_OWORD *)&v27[v41 - 6];
                  v38[v41 * 8 - 32] = 0;
                  *(v42 - 8) = 0;
                  if (LOBYTE(v27[v41 - 1]))
                  {
                    v44 = *((_OWORD *)v43 - 2);
                    *(_QWORD *)&v38[v41 * 8 - 16] = *(v43 - 2);
                    *(_OWORD *)&v38[v41 * 8 - 32] = v44;
                    *(v43 - 3) = 0;
                    *(v43 - 2) = 0;
                    *(v43 - 4) = 0;
                    *(v42 - 8) = 1;
                  }
                  v41 -= 6;
                }
                while (&v27[v41] != v31);
                v27 = (void **)v29[102];
                v45 = (void **)v29[103];
                v29[102] = &v38[v41 * 8];
                v29[103] = v40;
                v29[104] = v39;
                for (i = v30; v45 != v27; v45 -= 6)
                {
                  if (*((_BYTE *)v45 - 8) && *((char *)v45 - 9) < 0)
                    operator delete(*(v45 - 4));
                }
                if (v27)
LABEL_65:
                  operator delete(v27);
              }
              a1 = (uint64_t)v29;
              v29[103] = v40;
              if (!(_BYTE)v120)
                goto LABEL_34;
LABEL_67:
              if (SHIBYTE(v119[2]) < 0)
                operator delete(v119[0]);
              goto LABEL_34;
            }
          }
          else
          {
            v27 = *(void ***)(a1 + 824);
            v28 = *(_QWORD *)(a1 + 832);
            if ((unint64_t)v27 >= v28)
              goto LABEL_40;
          }
          *(_OWORD *)v27 = *(_OWORD *)__p;
          *((_BYTE *)v27 + 16) = 0;
          *((_BYTE *)v27 + 40) = 0;
          if ((_BYTE)v120)
          {
            v37 = *(_OWORD *)v119;
            v27[4] = v119[2];
            *((_OWORD *)v27 + 1) = v37;
            memset(v119, 0, sizeof(v119));
            *((_BYTE *)v27 + 40) = 1;
          }
          *(_QWORD *)(a1 + 824) = v27 + 6;
          if ((_BYTE)v120)
            goto LABEL_67;
LABEL_34:
          v23 += 344;
        }
        v22 = v107 + 6;
      }
      while (v107 + 6 != v105);
    }
  }
  v46 = *v103;
  if (!*v103)
    return;
  v47 = *v46;
  v104 = v46[1];
  if (*v46 == v104)
    return;
  while (2)
  {
    v49 = *v47;
    v48 = v47[1];
    v106 = v47;
    v108 = v48;
LABEL_81:
    if (v49 != v48)
    {
      v50 = *(float64x2_t *)v49;
      *(_OWORD *)__p = *(_OWORD *)v49;
      LOBYTE(v119[0]) = 0;
      LOBYTE(v120) = 0;
      v51 = *(unsigned __int8 *)(v49 + 40);
      if (*(_BYTE *)(v49 + 40))
      {
        if (*(char *)(v49 + 39) < 0)
        {
          sub_20E860C04(v119, *(void **)(v49 + 16), *(_QWORD *)(v49 + 24));
        }
        else
        {
          v50 = *(float64x2_t *)(v49 + 16);
          v119[2] = *(void **)(v49 + 32);
          *(float64x2_t *)v119 = v50;
        }
        LOBYTE(v120) = 1;
      }
      v52 = *(_QWORD *)(a1 + 816);
      v53 = *(_QWORD *)(a1 + 824);
      if (v52 == v53)
        goto LABEL_157;
      if (SHIBYTE(v119[2]) >= 0)
        v54 = (void *)HIBYTE(v119[2]);
      else
        v54 = v119[1];
      if (SHIBYTE(v119[2]) >= 0)
        v55 = v119;
      else
        v55 = (void **)v119[0];
      while (1)
      {
        _ZF = __p[0] == *(void **)v52 && __p[1] == *(void **)(v52 + 8);
        if (_ZF)
        {
          if (v51 && *(_BYTE *)(v52 + 40))
          {
            v57 = *(unsigned __int8 *)(v52 + 39);
            if ((v57 & 0x80u) == 0)
              v58 = (void *)*(unsigned __int8 *)(v52 + 39);
            else
              v58 = *(void **)(v52 + 24);
            if (v58 == v54)
            {
              if ((v57 & 0x80) != 0)
              {
                if (!memcmp(*(const void **)(v52 + 16), v55, *(_QWORD *)(v52 + 24)))
                {
LABEL_114:
                  if (v52 == v53)
                    goto LABEL_180;
                  v60 = v52 + 48;
                  if (v52 + 48 == v53)
                  {
LABEL_157:
                    v61 = v52;
                    if (v52 != v53)
                      goto LABEL_160;
                    goto LABEL_180;
                  }
                  v61 = v52;
                  while (2)
                  {
                    v62 = (const void **)(v52 + 64);
                    if (__p[0] == *(void **)v60 && __p[1] == *(void **)(v60 + 8))
                    {
                      v65 = *(unsigned __int8 *)(v52 + 88);
                      if ((_BYTE)v120)
                        v66 = v65 == 0;
                      else
                        v66 = 1;
                      if (v66)
                      {
                        if ((v120 != 0) != (v65 != 0))
                          goto LABEL_124;
                      }
                      else
                      {
                        v67 = *(unsigned __int8 *)(v52 + 87);
                        if ((v67 & 0x80u) == 0)
                          v68 = (void *)*(unsigned __int8 *)(v52 + 87);
                        else
                          v68 = *(void **)(v52 + 72);
                        v69 = (void *)HIBYTE(v119[2]);
                        if (SHIBYTE(v119[2]) < 0)
                          v69 = v119[1];
                        if (v68 != v69)
                          goto LABEL_124;
                        if (SHIBYTE(v119[2]) >= 0)
                          v70 = v119;
                        else
                          v70 = (void **)v119[0];
                        if ((v67 & 0x80) != 0)
                        {
                          if (memcmp(*v62, v70, *(_QWORD *)(v52 + 72)))
                            goto LABEL_124;
                        }
                        else if (*(_BYTE *)(v52 + 87))
                        {
                          v71 = 0;
                          while (*(unsigned __int8 *)(v52 + v71 + 64) == *((unsigned __int8 *)v70 + v71))
                          {
                            if (v67 == ++v71)
                              goto LABEL_119;
                          }
                          goto LABEL_124;
                        }
                      }
                    }
                    else
                    {
LABEL_124:
                      v50 = *(float64x2_t *)v60;
                      *(_OWORD *)v61 = *(_OWORD *)v60;
                      v64 = (void **)(v61 + 16);
                      if (*(unsigned __int8 *)(v61 + 40) == *(unsigned __int8 *)(v52 + 88))
                      {
                        if (*(_BYTE *)(v61 + 40))
                        {
                          if (*(char *)(v61 + 39) < 0)
                            operator delete(*v64);
                          v50 = *(float64x2_t *)v62;
                          *(_QWORD *)(v61 + 32) = *(_QWORD *)(v52 + 80);
                          *(float64x2_t *)v64 = v50;
                          *(_BYTE *)(v52 + 87) = 0;
                          *(_BYTE *)(v52 + 64) = 0;
                        }
                      }
                      else if (*(_BYTE *)(v61 + 40))
                      {
                        if (*(char *)(v61 + 39) < 0)
                          operator delete(*v64);
                        *(_BYTE *)(v61 + 40) = 0;
                      }
                      else
                      {
                        v50 = *(float64x2_t *)v62;
                        *(_QWORD *)(v61 + 32) = *(_QWORD *)(v52 + 80);
                        *(float64x2_t *)v64 = v50;
                        *(_QWORD *)(v52 + 72) = 0;
                        *(_QWORD *)(v52 + 80) = 0;
                        *v62 = 0;
                        *(_BYTE *)(v61 + 40) = 1;
                      }
                      v61 += 48;
                    }
LABEL_119:
                    v60 += 48;
                    v52 += 48;
                    if (v60 != v53)
                      continue;
                    break;
                  }
                  if (v61 != v53)
                  {
LABEL_160:
                    v72 = v53 - v61;
                    v73 = *(_QWORD *)(a1 + 824);
                    if (v53 != v73)
                    {
                      do
                      {
                        v50 = *(float64x2_t *)(v61 + v72);
                        *(float64x2_t *)v61 = v50;
                        v74 = (void **)(v61 + 16);
                        v75 = (float64x2_t *)(v61 + v72 + 16);
                        if (*(unsigned __int8 *)(v61 + 40) == *(unsigned __int8 *)(v61 + v72 + 40))
                        {
                          if (*(_BYTE *)(v61 + 40))
                          {
                            if (*(char *)(v61 + 39) < 0)
                              operator delete(*v74);
                            v50 = *v75;
                            *(_QWORD *)(v61 + 32) = *(_QWORD *)(v61 + v72 + 32);
                            *(float64x2_t *)v74 = v50;
                            *(_BYTE *)(v61 + v72 + 39) = 0;
                            LOBYTE(v75->f64[0]) = 0;
                          }
                        }
                        else if (*(_BYTE *)(v61 + 40))
                        {
                          if (*(char *)(v61 + 39) < 0)
                            operator delete(*v74);
                          *(_BYTE *)(v61 + 40) = 0;
                        }
                        else
                        {
                          v50 = *v75;
                          *(_QWORD *)(v61 + 32) = *(_QWORD *)(v61 + v72 + 32);
                          *(float64x2_t *)v74 = v50;
                          *(_QWORD *)(v61 + v72 + 24) = 0;
                          *(_QWORD *)(v61 + v72 + 32) = 0;
                          v75->f64[0] = 0.0;
                          *(_BYTE *)(v61 + 40) = 1;
                        }
                        v61 += 48;
                      }
                      while (v61 + v72 != v73);
                      v53 = *(_QWORD *)(a1 + 824);
                    }
                    while (v53 != v61)
                    {
                      if (*(_BYTE *)(v53 - 8) && *(char *)(v53 - 9) < 0)
                        operator delete(*(void **)(v53 - 32));
                      v53 -= 48;
                    }
                    *(_QWORD *)(a1 + 824) = v61;
                  }
LABEL_180:
                  v76 = 48;
                  do
                  {
                    v77 = *(double *)(v49 + v76) != 0.0
                       && ((*(_QWORD *)(v49 + v76) & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE;
                    v78 = v77;
                    if (v77)
                      break;
                    _ZF = v76 == 112;
                    v76 += 8;
                  }
                  while (!_ZF);
                  if ((v78 & 1) != 0)
                    goto LABEL_251;
                  v79 = *(double *)(v49 + 120) != 0.0
                     && ((*(_QWORD *)(v49 + 120) & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE;
                  v80 = v79;
                  if (!v79)
                  {
                    v81 = *(double *)(v49 + 128) != 0.0
                       && ((*(_QWORD *)(v49 + 128) & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE;
                    v80 = v81;
                    if (!v81)
                      v80 = *(double *)(v49 + 136) != 0.0
                         && ((*(_QWORD *)(v49 + 136) & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE;
                  }
                  if (v80)
                    goto LABEL_251;
                  if (*(_BYTE *)(v49 + 272))
                  {
                    v83 = *(double *)(v49 + 248) != 0.0
                       && ((*(_QWORD *)(v49 + 248) & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE;
                    v84 = v83;
                    if (!v83)
                    {
                      v85 = *(double *)(v49 + 256) != 0.0
                         && ((*(_QWORD *)(v49 + 256) & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE;
                      v84 = v85;
                      if (!v85)
                        v84 = *(double *)(v49 + 264) != 0.0
                           && ((*(_QWORD *)(v49 + 264) & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE;
                    }
                    if (v84)
                      goto LABEL_251;
                  }
                  if (!*(_BYTE *)(v49 + 240))
                    goto LABEL_251;
                  v87 = 168;
                  do
                  {
                    v88 = *(double *)(v49 + v87) != 0.0
                       && ((*(_QWORD *)(v49 + v87) & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE;
                    v89 = v88;
                    if (v88)
                      break;
                    _ZF = v87 == 232;
                    v87 += 8;
                  }
                  while (!_ZF);
                  if ((v89 & 1) != 0)
                    goto LABEL_251;
                  v50.f64[0] = *(float64_t *)(v49 + 232);
                  _Q1 = *(_OWORD *)(v49 + 168);
                  v91 = *(float64x2_t *)(v49 + 184);
                  _Q3 = *(float64x2_t *)(v49 + 200);
                  v93 = *(float64x2_t *)(v49 + 216);
                  v94 = (float64x2_t)vextq_s8((int8x16_t)v93, (int8x16_t)v50, 8uLL);
                  v50.f64[1] = *(float64_t *)(v49 + 216);
                  *(_QWORD *)&v95 = *(_OWORD *)&vmlsq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)vmulq_f64(v91, v93), 1), _Q3, v93);
                  _D0 = vmlsq_f64(vmulq_f64(_Q3, v50), (float64x2_t)vzip2q_s64(*(int64x2_t *)&_Q3, *(int64x2_t *)&v91), v94).f64[1];
                  __asm { FMLA            D3, D0, V1.D[1] }
                  if (fabs(vmlad_n_f64(_Q3.f64[0], v95, v91.f64[0]) + -1.0) > 0.0015 || *(_BYTE *)(v49 + 272) == 0)
                  {
LABEL_251:
                    v111 = 12;
                    strcpy((char *)v110, "Invalid Pose");
                    sub_20EE16850(a1, (__int128 *)v49, v110);
                    if (v111 < 0)
                      operator delete(v110[0]);
                  }
                  else if (!sub_20EE20A50(a1 + 704, (_OWORD *)(v49 + 328), v49))
                  {
                    if (*(_BYTE *)(a1 + 1386))
                      sub_20EE1EF38(a1 + 880, v49, (_OWORD *)v49);
                    sub_20EE1AFCC(a1, v49 + 328, (_OWORD *)v49);
                  }
                  if ((_BYTE)v120 && SHIBYTE(v119[2]) < 0)
                    operator delete(v119[0]);
                  v49 += 344;
                  v48 = v108;
                  goto LABEL_81;
                }
              }
              else
              {
                if (!*(_BYTE *)(v52 + 39))
                  goto LABEL_114;
                v59 = 0;
                while (*(unsigned __int8 *)(v52 + v59 + 16) == *((unsigned __int8 *)v55 + v59))
                {
                  if (v57 == ++v59)
                    goto LABEL_114;
                }
              }
            }
          }
          else if ((v51 != 0) == (*(_BYTE *)(v52 + 40) != 0))
          {
            goto LABEL_114;
          }
        }
        v52 += 48;
        if (v52 == v53)
          goto LABEL_180;
      }
    }
    v47 = v106 + 6;
    if (v106 + 6 != v104)
      continue;
    break;
  }
}

void sub_20EE16610(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86665C(v1);
  _Unwind_Resume(a1);
}

void sub_20EE16624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20EB905B8((char ***)va);
  _Unwind_Resume(a1);
}

void sub_20EE16638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_20EB905B8((char ***)va);
  _Unwind_Resume(a1);
}

void sub_20EE1664C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char **a22,uint64_t a23,uint64_t a24,char *__p,char *a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  char *v34;
  char *v35;
  char *v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;

  v34 = __p;
  if (__p)
  {
    v35 = a26;
    v36 = __p;
    if (a26 != __p)
    {
      do
      {
        if (*(v35 - 48))
        {
          v37 = (std::__shared_weak_count *)*((_QWORD *)v35 - 7);
          if (v37)
          {
            p_shared_owners = (unint64_t *)&v37->__shared_owners_;
            do
              v39 = __ldaxr(p_shared_owners);
            while (__stlxr(v39 - 1, p_shared_owners));
            if (!v39)
            {
              ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
        }
        if (*(v35 - 304))
        {
          if (*(v35 - 305) < 0)
            operator delete(*((void **)v35 - 41));
        }
        v35 -= 344;
      }
      while (v35 != v34);
      v36 = __p;
    }
    a26 = v34;
    operator delete(v36);
  }
  sub_20EB905B8(&a22);
  _Unwind_Resume(a1);
}

void sub_20EE167A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  if (a36)
  {
    if (a35 < 0)
      operator delete(__p);
  }
  sub_20E86665C(a11);
  _Unwind_Resume(a1);
}

void sub_20EE16850(uint64_t a1, __int128 *a2, void **a3)
{
  uint64_t *v6;
  unsigned __int8 v7;
  char *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  __int128 v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  __int128 v19;
  char *v20;
  __int128 v21;
  void *__dst[2];
  uint64_t v23;
  char v24;
  __uint64_t v25[2];
  void *__src[48];
  __int128 v27;
  uint64_t v28;
  char v29;
  _BYTE v30[37];
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v6 = sub_210219C18();
  sub_2102323F4((unsigned __int8 *)a2, v30);
  if (*((char *)a3 + 23) < 0)
    a3 = (void **)*a3;
  v7 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    LODWORD(__src[0]) = 136315394;
    *(void **)((char *)__src + 4) = v30;
    WORD2(__src[1]) = 2080;
    *(void **)((char *)&__src[1] + 6) = a3;
    v9 = (char *)_os_log_send_and_compose_impl();
    v10 = strlen(v9);
    v25[0] = 0;
    pthread_threadid_np(0, v25);
    v11 = v25[0];
    timespec_get((timespec *)v25, 1);
    sub_210219E20(__src, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v6 + 1), (__int128 *)(v6 + 5), "Anchors:RA: Removed anchor with ID %s because %s", 0x30uLL, v9, v10, v11, v25);
    std::mutex::lock(&stru_254A5A410);
    v12 = qword_254A5A458;
    for (i = unk_254A5A460; v12 != i; v12 += 40)
    {
      v14 = *(_QWORD *)(v12 + 32);
      if (!v14)
        sub_20E86D37C();
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v14 + 48))(v14, __src);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (SHIBYTE(__src[17]) < 0)
    {
      operator delete(__src[15]);
      if ((SHIBYTE(__src[14]) & 0x80000000) == 0)
      {
LABEL_10:
        if (!LOBYTE(__src[11]))
        {
LABEL_16:
          if (LOBYTE(__src[7]) && SHIBYTE(__src[6]) < 0)
            operator delete(__src[4]);
          if (SHIBYTE(__src[3]) < 0)
            operator delete(__src[1]);
          if (v9)
            free(v9);
          goto LABEL_23;
        }
LABEL_14:
        if (SHIBYTE(__src[10]) < 0)
          operator delete(__src[8]);
        goto LABEL_16;
      }
    }
    else if ((SHIBYTE(__src[14]) & 0x80000000) == 0)
    {
      goto LABEL_10;
    }
    operator delete(__src[12]);
    if (!LOBYTE(__src[11]))
      goto LABEL_16;
    goto LABEL_14;
  }
LABEL_23:
  if (os_signpost_enabled((os_log_t)*v6))
  {
    LODWORD(__src[0]) = 136315394;
    *(void **)((char *)__src + 4) = v30;
    WORD2(__src[1]) = 2080;
    *(void **)((char *)&__src[1] + 6) = a3;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  v15 = *a2;
  LOBYTE(__dst[0]) = 0;
  v24 = 0;
  v16 = *((unsigned __int8 *)a2 + 40);
  if (*((_BYTE *)a2 + 40))
  {
    if (*((char *)a2 + 39) < 0)
    {
      v21 = v15;
      sub_20E860C04(__dst, *((void **)a2 + 2), *((_QWORD *)a2 + 3));
      v15 = v21;
    }
    else
    {
      *(_OWORD *)__dst = a2[1];
      v23 = *((_QWORD *)a2 + 4);
    }
    v24 = 1;
  }
  v17 = *((_QWORD *)a2 + 38);
  if (!*((_BYTE *)a2 + 320))
    v17 = -1;
  *(_OWORD *)__src = v15;
  __src[2] = (void *)0x3FF0000000000000;
  memset(&__src[3], 0, 24);
  __src[6] = (void *)0x3FF0000000000000;
  memset(&__src[7], 0, 24);
  __src[10] = (void *)0x3FF0000000000000;
  memset(&__src[11], 0, 24);
  __src[14] = (void *)v17;
  LODWORD(__src[15]) = 0;
  LOBYTE(__src[16]) = 1;
  LOBYTE(__src[17]) = 0;
  LOBYTE(__src[47]) = 0;
  LOBYTE(v27) = 0;
  v29 = 0;
  if (v16)
  {
    if (SHIBYTE(v23) < 0)
    {
      sub_20E860C04(&v27, __dst[0], (unint64_t)__dst[1]);
    }
    else
    {
      v27 = *(_OWORD *)__dst;
      v28 = v23;
    }
    v29 = 1;
  }
  v18 = *(_QWORD *)(a1 + 800);
  if (v18 >= *(_QWORD *)(a1 + 808))
  {
    v20 = sub_20EE1E1C8((char **)(a1 + 792), (uint64_t)__src);
  }
  else
  {
    memcpy(*(void **)(a1 + 800), __src, 0x179uLL);
    *(_BYTE *)(v18 + 384) = 0;
    *(_BYTE *)(v18 + 408) = 0;
    if (v29)
    {
      v19 = v27;
      *(_QWORD *)(v18 + 400) = v28;
      *(_OWORD *)(v18 + 384) = v19;
      v28 = 0;
      v27 = 0uLL;
      *(_BYTE *)(v18 + 408) = 1;
    }
    v20 = (char *)(v18 + 416);
  }
  *(_QWORD *)(a1 + 800) = v20;
  if (v29 && SHIBYTE(v28) < 0)
    operator delete((void *)v27);
  if (v24)
  {
    if (SHIBYTE(v23) < 0)
      operator delete(__dst[0]);
  }
}

void sub_20EE16CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a73;
  char a74;

  if (a74 && a73 < 0)
    operator delete(__p);
  if (a21)
  {
    if (a20 < 0)
    {
      operator delete(a15);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20EE16D60(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  uint64_t *v7;
  char *v8;
  __int128 v9;
  char **v10;
  char *v11;
  char *v12;
  char *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  char **v17;
  char **v18;
  unint64_t v19;
  _QWORD *v20;
  char **v21;
  char **v22;
  unint64_t v23;
  void *__p[2];
  char *v25;
  __int128 v26;
  char *v27;

  v6 = *(_QWORD *)(a2 + 24);
  v22 = 0;
  v23 = 0;
  v21 = 0;
  sub_20EB9C790((uint64_t)&v21, v6);
  v7 = *(uint64_t **)(a2 + 16);
  if (v7)
  {
    while (1)
    {
      __p[0] = 0;
      __p[1] = 0;
      v25 = 0;
      if (*((char *)v7 + 39) < 0)
      {
        sub_20E860C04(&v26, (void *)v7[2], v7[3]);
      }
      else
      {
        v9 = *((_OWORD *)v7 + 1);
        v27 = (char *)v7[4];
        v26 = v9;
      }
      v10 = v22;
      if ((unint64_t)v22 >= v23)
      {
        v22 = sub_20EE1C9B0(&v21, (uint64_t)__p);
        if (SHIBYTE(v27) < 0)
        {
          operator delete((void *)v26);
          v12 = (char *)__p[0];
          if (!__p[0])
            goto LABEL_5;
        }
        else
        {
          v12 = (char *)__p[0];
          if (!__p[0])
            goto LABEL_5;
        }
      }
      else
      {
        *v22 = 0;
        v10[1] = 0;
        v10[2] = 0;
        *(_OWORD *)v10 = *(_OWORD *)__p;
        v10[2] = v25;
        __p[0] = 0;
        __p[1] = 0;
        v25 = 0;
        v11 = v27;
        *(_OWORD *)(v10 + 3) = v26;
        v10[5] = v11;
        v27 = 0;
        v26 = 0uLL;
        v22 = v10 + 6;
        v12 = (char *)__p[0];
        if (!__p[0])
          goto LABEL_5;
      }
      v13 = (char *)__p[1];
      v8 = v12;
      if (__p[1] != v12)
        break;
LABEL_4:
      __p[1] = v12;
      operator delete(v8);
LABEL_5:
      v7 = (uint64_t *)*v7;
      if (!v7)
        goto LABEL_29;
    }
    while (1)
    {
      if (!*(v13 - 48))
        goto LABEL_33;
      v14 = (std::__shared_weak_count *)*((_QWORD *)v13 - 7);
      if (!v14)
        goto LABEL_33;
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        if (*(v13 - 304))
        {
LABEL_23:
          if (*(v13 - 305) < 0)
            operator delete(*((void **)v13 - 41));
        }
      }
      else
      {
LABEL_33:
        if (*(v13 - 304))
          goto LABEL_23;
      }
      v13 -= 344;
      if (v13 == v12)
      {
        v8 = (char *)__p[0];
        goto LABEL_4;
      }
    }
  }
LABEL_29:
  v17 = v21;
  v18 = v22;
  v19 = v23;
  v20 = operator new(0x30uLL);
  v20[1] = 0;
  v20[2] = 0;
  v20[3] = v17;
  *v20 = &off_24C9EA5B0;
  v20[4] = v18;
  v20[5] = v19;
  *(_QWORD *)a3 = v20 + 3;
  *(_QWORD *)(a3 + 8) = v20;
  if (v17 != v18)
    sub_20EE24B14(a1 + 704, (char ****)a3, 0);
}

void sub_20EE16F88(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86665C(v1);
  _Unwind_Resume(a1);
}

void sub_20EE16F9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char **a9)
{
  sub_20EB905B8(&a9);
  _Unwind_Resume(a1);
}

void sub_20EE16FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20EB905B8((char ***)va);
  _Unwind_Resume(a1);
}

void sub_20EE16FC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char **a12, uint64_t a13, uint64_t a14, char *__p, char *a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  char *v24;
  char *v25;
  char *v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;

  v24 = __p;
  if (__p)
  {
    v25 = a16;
    v26 = __p;
    if (a16 != __p)
    {
      do
      {
        if (*(v25 - 48))
        {
          v27 = (std::__shared_weak_count *)*((_QWORD *)v25 - 7);
          if (v27)
          {
            p_shared_owners = (unint64_t *)&v27->__shared_owners_;
            do
              v29 = __ldaxr(p_shared_owners);
            while (__stlxr(v29 - 1, p_shared_owners));
            if (!v29)
            {
              ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
              std::__shared_weak_count::__release_weak(v27);
            }
          }
        }
        if (*(v25 - 304))
        {
          if (*(v25 - 305) < 0)
            operator delete(*((void **)v25 - 41));
        }
        v25 -= 344;
      }
      while (v25 != v24);
      v26 = __p;
    }
    a16 = v24;
    operator delete(v26);
  }
  sub_20EB905B8(&a12);
  _Unwind_Resume(a1);
}

void sub_20EE17118(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_20EE16D60(a1 - 224, a2, a3);
}

void sub_20EE17120(uint64_t a1@<X0>, __int128 ****a2@<X1>, _OWORD *a3@<X8>)
{
  unint64_t v3;
  __int128 ***v5;
  char *v6;
  __int128 **v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 **v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 **v13;
  unint64_t *v14;
  unint64_t v15;
  int v16;
  __int128 **v17;
  int v18;
  BOOL v19;
  int v20;
  int v21;
  int v22;
  uint64_t *v23;
  unsigned __int8 v24;
  char *v26;
  size_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  uint64_t v31;
  __int128 **v32;
  __int128 *v33;
  __int128 *v34;
  __int128 **v35;
  __int128 *v36;
  __int128 *v37;
  __int128 *v38;
  __int128 *v39;
  __int128 *v40;
  __uint64_t v41;
  __uint64_t v42;
  __int128 *v43;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  char *v47;
  __int128 *v48;
  uint64_t v49;
  unint64_t v50;
  int8x8_t v51;
  uint8x8_t v52;
  unint64_t v53;
  uint64_t ***v54;
  uint64_t **v55;
  uint64_t v56;
  unint64_t v58;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  _OWORD *v63;
  __uint64_t v64;
  __uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t *v76;
  uint64_t *v77;
  _QWORD *v78;
  __int128 *v79;
  unint64_t v80;
  unint64_t v81;
  uint8x8_t v82;
  uint64_t **v83;
  uint64_t *v84;
  uint64_t v85;
  unint64_t v87;
  uint64_t v89;
  _QWORD *v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  float v97;
  float v98;
  _BOOL8 v99;
  unint64_t v100;
  unint64_t v101;
  size_t prime;
  void *v103;
  void *v104;
  uint64_t v105;
  _QWORD *v106;
  size_t v107;
  size_t v108;
  size_t v109;
  _QWORD *j;
  size_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint8x8_t v115;
  uint64_t v116;
  _QWORD *v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  void *v124;
  uint64_t v125;
  size_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  unint64_t v130;
  __int128 **v131;
  unsigned __int8 *v132;
  unsigned __int8 *v133;
  uint64_t (**v134)();
  char v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t *v138;
  unsigned __int8 v139;
  uint64_t (**v141)();
  char *v142;
  size_t v143;
  __darwin_time_t tv_sec;
  uint64_t v145;
  uint64_t k;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  void **v150;
  uint64_t v151;
  void *v152;
  __int128 **v153;
  char *v154;
  __int128 *v155;
  __int128 *v156;
  __int128 v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  char *v161;
  uint64_t *v162;
  _QWORD *v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  unint64_t v167;
  int8x8_t v168;
  uint8x8_t v169;
  unint64_t v170;
  _QWORD *v171;
  _QWORD *v172;
  uint64_t v173;
  unint64_t v175;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  __int128 v180;
  unint64_t v181;
  int8x8_t v182;
  uint8x8_t v183;
  unint64_t v184;
  _QWORD *v185;
  _QWORD *v186;
  uint64_t v187;
  unint64_t v189;
  uint64_t v191;
  uint64_t v192;
  __int128 v193;
  unint64_t v194;
  __int128 v195;
  char *v196;
  _QWORD *v197;
  uint64_t v198;
  uint64_t jj;
  uint64_t v200;
  uint64_t v201;
  _QWORD *v202;
  _QWORD *v203;
  _QWORD *v204;
  void *v205;
  char v206;
  char *v207;
  _BYTE *v208;
  __int128 *v209;
  uint64_t v210;
  char *v211;
  __int128 *v212;
  __int128 v213;
  __int128 *v214;
  __int128 *v215;
  char *v216;
  __int128 **v217;
  __int128 *v218;
  __int128 *m;
  uint64_t v220;
  void **v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  void *v225;
  uint64_t v226;
  uint64_t v227;
  _QWORD *v228;
  uint64_t v229;
  uint64_t n;
  _QWORD *v231;
  void **v232;
  uint64_t v233;
  _QWORD *v234;
  _QWORD *v235;
  _QWORD *v236;
  void *v237;
  _QWORD *v238;
  uint64_t v239;
  uint64_t ii;
  char *v241;
  __int128 v242;
  uint64_t v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  std::__shared_weak_count *v247;
  unint64_t *v248;
  unint64_t v249;
  std::__shared_weak_count *v250;
  unint64_t *v251;
  unint64_t v252;
  std::__shared_weak_count *v253;
  unint64_t *v254;
  unint64_t v255;
  std::__shared_weak_count *v256;
  unint64_t *v257;
  unint64_t v258;
  _QWORD *v259;
  _QWORD *v260;
  _QWORD *v261;
  void *v262;
  char *v263;
  int v265;
  __int128 *v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  char v271;
  __int128 v272;
  timespec v273;
  _BYTE v274[37];
  _QWORD v275[3];
  _QWORD *v276;
  __uint64_t v277[2];
  __uint64_t v278;
  char v279;
  void *v280;
  char v281;
  char v282;
  void *v283;
  char v284;
  char v285;
  void *v286;
  char v287;
  void *v288;
  char v289;
  void *__src[48];
  __int128 v291;
  void *v292;
  char v293;
  char v294;
  char v295;
  char v296;
  uint64_t v297;

  v297 = *MEMORY[0x24BDAC8D0];
  v5 = *a2;
  if (!**a2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/UserAnchorNodeGroup/src/AnchorTransformationNode.cpp", 158, (uint64_t)"metadata->pose_metadata", 23, (uint64_t)"VIOMetadata must have pose metadata", 35, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v5 = *a2;
  }
  v6 = (char *)operator new(0x40uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_24C9EAE00;
  *(_OWORD *)(v6 + 40) = 0u;
  *((_QWORD *)v6 + 7) = 0;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_QWORD *)&v272 = v6 + 24;
  *((_QWORD *)&v272 + 1) = v6;
  v7 = v5[1];
  *(_QWORD *)&v268 = *v5;
  *((_QWORD *)&v268 + 1) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 1);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = v5[3];
  *(_QWORD *)&v269 = v5[2];
  *((_QWORD *)&v269 + 1) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 1);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = v5[5];
  *(_QWORD *)&v270 = v5[4];
  *((_QWORD *)&v270 + 1) = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 1);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v271 = *((_BYTE *)v5 + 48);
  v16 = *(unsigned __int8 *)(a1 + 1384);
  v17 = **a2;
  v18 = *((unsigned __int8 *)v17 + 216);
  *(_BYTE *)(a1 + 1384) = v18;
  if (v16)
    v19 = v18 == 0;
  else
    v19 = 0;
  v20 = !v19;
  v265 = v20;
  if (!v16 && v18)
  {
    sub_20EE19264(a1 + 704, a1 + 944);
    v17 = **a2;
  }
  v21 = *(unsigned __int8 *)(a1 + 1385);
  v22 = *((unsigned __int8 *)v17 + 5105);
  *(_BYTE *)(a1 + 1385) = v22;
  if (v21 || !v22 || *((_BYTE *)v17 + 5032) != 1)
    goto LABEL_89;
  v23 = sub_210219C18();
  v24 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v24 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    LOWORD(__src[0]) = 0;
    v26 = (char *)_os_log_send_and_compose_impl();
    v27 = strlen(v26);
    v277[0] = 0;
    pthread_threadid_np(0, v277);
    v28 = v277[0];
    timespec_get((timespec *)v277, 1);
    sub_210219E20(__src, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v23 + 1), (__int128 *)(v23 + 5), "Anchors: Removing all travel mode anchors as SLAM was paused", 0x3CuLL, v26, v27, v28, v277);
    std::mutex::lock(&stru_254A5A410);
    v29 = qword_254A5A458;
    for (i = unk_254A5A460; v29 != i; v29 += 40)
    {
      v31 = *(_QWORD *)(v29 + 32);
      if (!v31)
        sub_20E86D37C();
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v31 + 48))(v31, __src);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (SHIBYTE(__src[17]) < 0)
    {
      operator delete(__src[15]);
      if ((SHIBYTE(__src[14]) & 0x80000000) == 0)
      {
LABEL_32:
        if (!LOBYTE(__src[11]))
        {
LABEL_38:
          if (LOBYTE(__src[7]) && SHIBYTE(__src[6]) < 0)
            operator delete(__src[4]);
          if (SHIBYTE(__src[3]) < 0)
            operator delete(__src[1]);
          if (v26)
            free(v26);
          goto LABEL_45;
        }
LABEL_36:
        if (SHIBYTE(__src[10]) < 0)
          operator delete(__src[8]);
        goto LABEL_38;
      }
    }
    else if ((SHIBYTE(__src[14]) & 0x80000000) == 0)
    {
      goto LABEL_32;
    }
    operator delete(__src[12]);
    if (!LOBYTE(__src[11]))
      goto LABEL_38;
    goto LABEL_36;
  }
LABEL_45:
  if (os_signpost_enabled((os_log_t)*v23))
  {
    LOWORD(__src[0]) = 0;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  v32 = **a2;
  v33 = v32[538];
  v34 = v32[537];
  v35 = v32;
  if (v33 != v34)
  {
    do
    {
      if (*((_BYTE *)v33 - 8) && *((char *)v33 - 9) < 0)
        operator delete(*((void **)v33 - 4));
      v33 -= 26;
    }
    while (v33 != v34);
    v35 = **a2;
    v32[538] = v34;
    v36 = v35[544];
    v37 = v35[543];
    v32 = v35;
    if (v36 == v37)
      goto LABEL_61;
    goto LABEL_57;
  }
  v32[538] = v34;
  v36 = v32[544];
  v37 = v32[543];
  if (v36 != v37)
  {
    do
    {
LABEL_57:
      if (*((_BYTE *)v36 - 8) && *((char *)v36 - 9) < 0)
        operator delete(*((void **)v36 - 4));
      v36 -= 3;
    }
    while (v36 != v37);
    v32 = **a2;
  }
LABEL_61:
  v35[544] = v37;
  v38 = v32[541];
  v39 = v32[540];
  while (v38 != v39)
  {
    if (*((_BYTE *)v38 - 8))
    {
      if (*((char *)v38 - 9) < 0)
        operator delete(*((void **)v38 - 4));
    }
    v38 -= 26;
  }
  v32[541] = v39;
  sub_20EE23880(a1 + 704, (uint64_t)v277);
  v40 = (__int128 *)v277[0];
  v41 = v277[1];
  if (v277[0] != v277[1])
  {
    do
    {
      __src[0] = operator new(0x20uLL);
      *(_OWORD *)&__src[1] = xmmword_2102DB470;
      strcpy((char *)__src[0], "Switching out of travel mode");
      sub_20EE16850(a1, v40, __src);
      if (SHIBYTE(__src[2]) < 0)
        operator delete(__src[0]);
      v40 = (__int128 *)((char *)v40 + 328);
    }
    while (v40 != (__int128 *)v41);
    v40 = (__int128 *)v277[0];
  }
  if (v40)
  {
    v42 = v277[1];
    v43 = v40;
    if ((__int128 *)v277[1] != v40)
    {
      do
      {
        if (*(_BYTE *)(v42 - 32))
        {
          v44 = *(std::__shared_weak_count **)(v42 - 40);
          if (v44)
          {
            p_shared_owners = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(p_shared_owners);
            while (__stlxr(v46 - 1, p_shared_owners));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
        }
        if (*(_BYTE *)(v42 - 288) && *(char *)(v42 - 289) < 0)
          operator delete(*(void **)(v42 - 312));
        v42 -= 328;
      }
      while ((__int128 *)v42 != v40);
      v43 = (__int128 *)v277[0];
    }
    v277[1] = (__uint64_t)v40;
    operator delete(v43);
  }
  v17 = **a2;
LABEL_89:
  v47 = (char *)v17[546];
  v48 = v17[547];
  v277[0] = 0;
  v277[1] = 0;
  v278 = 0;
  v267 = v48;
  v49 = (char *)v48 - v47;
  if (v48 != (__int128 *)v47)
  {
    if (v49 < 0)
      sub_20E969238();
    v277[0] = (__uint64_t)operator new((char *)v48 - v47);
    v277[1] = v277[0];
    v278 = v277[0] + 16 * (v49 >> 4);
    while (1)
    {
      *(_OWORD *)__src = *(_OWORD *)v47;
      LOBYTE(__src[2]) = 0;
      v296 = 0;
      v50 = sub_2102322B4((unsigned __int8 *)__src);
      v51 = *(int8x8_t *)(a1 + 720);
      if (!*(_QWORD *)&v51)
        goto LABEL_119;
      v52 = (uint8x8_t)vcnt_s8(v51);
      v52.i16[0] = vaddlv_u8(v52);
      if (v52.u32[0] > 1uLL)
      {
        v53 = v50;
        if (v50 >= *(_QWORD *)&v51)
          v53 = v50 % *(_QWORD *)&v51;
      }
      else
      {
        v53 = (*(_QWORD *)&v51 - 1) & v50;
      }
      v54 = *(uint64_t ****)(*(_QWORD *)(a1 + 712) + 8 * v53);
      if (v54)
      {
        v55 = *v54;
        if (*v54)
        {
          if (v52.u32[0] < 2uLL)
          {
            v56 = *(_QWORD *)&v51 - 1;
            while (1)
            {
              v60 = v55[1];
              if ((uint64_t *)v50 == v60)
              {
                if (v55[2] == __src[0] && v55[3] == __src[1])
                  goto LABEL_120;
              }
              else if (((unint64_t)v60 & v56) != v53)
              {
                goto LABEL_119;
              }
              v55 = (uint64_t **)*v55;
              if (!v55)
                goto LABEL_120;
            }
          }
          do
          {
            v58 = (unint64_t)v55[1];
            if (v50 == v58)
            {
              if (v55[2] == __src[0] && v55[3] == __src[1])
                break;
            }
            else
            {
              if (v58 >= *(_QWORD *)&v51)
                v58 %= *(_QWORD *)&v51;
              if (v58 != v53)
                goto LABEL_119;
            }
            v55 = (uint64_t **)*v55;
          }
          while (v55);
        }
      }
      else
      {
LABEL_119:
        v55 = 0;
      }
LABEL_120:
      if (v296 && v295 && v294 < 0)
        operator delete(v292);
      if (v55)
      {
        v61 = v55[57];
        v62 = v55[58];
        if (v61 != v62)
          break;
      }
LABEL_92:
      v47 += 16;
      if (v47 == (char *)v267)
        goto LABEL_146;
    }
    v63 = (_OWORD *)v277[1];
    while (1)
    {
      if ((unint64_t)v63 < v278)
      {
        *v63 = *(_OWORD *)v61;
        v64 = (__uint64_t)(v63 + 1);
      }
      else
      {
        v65 = v277[0];
        v66 = (uint64_t)((uint64_t)v63 - v277[0]) >> 4;
        v67 = v66 + 1;
        if ((unint64_t)(v66 + 1) >> 60)
          sub_20E969238();
        v68 = v278 - v277[0];
        if ((uint64_t)(v278 - v277[0]) >> 3 > v67)
          v67 = v68 >> 3;
        if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF0)
          v3 = 0xFFFFFFFFFFFFFFFLL;
        else
          v3 = v67;
        if (v3)
        {
          if (v3 >> 60)
            sub_20E877A38();
          v69 = (char *)operator new(16 * v3);
          v70 = &v69[16 * v66];
          *(_OWORD *)v70 = *(_OWORD *)v61;
          v71 = (uint64_t)v70;
          if (v63 != (_OWORD *)v65)
          {
            do
            {
LABEL_141:
              *(_OWORD *)(v71 - 16) = *(v63 - 1);
              v71 -= 16;
              --v63;
            }
            while (v63 != (_OWORD *)v65);
            v63 = (_OWORD *)v277[0];
            v64 = (__uint64_t)(v70 + 16);
            v277[0] = v71;
            v277[1] = (__uint64_t)(v70 + 16);
            v278 = (__uint64_t)&v69[16 * v3];
            if (!v63)
              goto LABEL_128;
LABEL_145:
            operator delete(v63);
            goto LABEL_128;
          }
        }
        else
        {
          v69 = 0;
          v70 = (char *)(16 * v66);
          *(_OWORD *)(16 * v66) = *(_OWORD *)v61;
          v71 = 16 * v66;
          if (v63 != (_OWORD *)v65)
            goto LABEL_141;
        }
        v64 = (__uint64_t)(v70 + 16);
        v277[0] = v71;
        v277[1] = (__uint64_t)(v70 + 16);
        v278 = (__uint64_t)&v69[16 * v3];
        if (v63)
          goto LABEL_145;
      }
LABEL_128:
      v277[1] = v64;
      v61 += 41;
      v63 = (_OWORD *)v64;
      if (v61 == v62)
        goto LABEL_92;
    }
  }
LABEL_146:
  v72 = v268;
  v73 = *(void **)(v268 + 4368);
  v74 = v268;
  if (v73)
  {
    v75 = (_QWORD *)(v268 + 4368);
    *(_QWORD *)(v268 + 4376) = v73;
    operator delete(v73);
    *v75 = 0;
    *(_QWORD *)(v72 + 4376) = 0;
    *(_QWORD *)(v72 + 4384) = 0;
    v74 = v268;
  }
  *(_OWORD *)(v72 + 4368) = *(_OWORD *)v277;
  *(_QWORD *)(v72 + 4384) = v278;
  v76 = *(uint64_t **)(v74 + 4152);
  v77 = *(uint64_t **)(v74 + 4160);
  if (v76 != v77)
  {
    v78 = (_QWORD *)(a1 + 1408);
    do
    {
      while (1)
      {
        v79 = (__int128 *)(v76 + 2);
        v80 = *((unsigned int *)v76 + 2);
        v81 = *(_QWORD *)(a1 + 1400);
        if (!v81)
          break;
        v82 = (uint8x8_t)vcnt_s8((int8x8_t)v81);
        v82.i16[0] = vaddlv_u8(v82);
        if (v82.u32[0] > 1uLL)
        {
          v3 = *((unsigned int *)v76 + 2);
          if (v81 <= v80)
            v3 = v80 % v81;
        }
        else
        {
          v3 = ((_DWORD)v81 - 1) & v80;
        }
        v83 = *(uint64_t ***)(*(_QWORD *)(a1 + 1392) + 8 * v3);
        if (!v83)
          break;
        v84 = *v83;
        if (!v84)
          break;
        v85 = *v76;
        if (v82.u32[0] < 2uLL)
        {
          while (1)
          {
            v89 = v84[1];
            if (v89 == v80)
            {
              if (v84[2] == v85 && *((_DWORD *)v84 + 6) == (_DWORD)v80)
                goto LABEL_216;
            }
            else if ((v89 & (v81 - 1)) != v3)
            {
              goto LABEL_179;
            }
            v84 = (uint64_t *)*v84;
            if (!v84)
              goto LABEL_179;
          }
        }
        while (1)
        {
          v87 = v84[1];
          if (v87 == v80)
            break;
          if (v87 >= v81)
            v87 %= v81;
          if (v87 != v3)
            goto LABEL_179;
LABEL_166:
          v84 = (uint64_t *)*v84;
          if (!v84)
            goto LABEL_179;
        }
        if (v84[2] != v85 || *((_DWORD *)v84 + 6) != (_DWORD)v80)
          goto LABEL_166;
LABEL_216:
        v118 = *v79;
        v119 = *((_OWORD *)v76 + 2);
        v120 = *((_OWORD *)v76 + 4);
        *((_OWORD *)v84 + 4) = *((_OWORD *)v76 + 3);
        *((_OWORD *)v84 + 5) = v120;
        *((_OWORD *)v84 + 2) = v118;
        *((_OWORD *)v84 + 3) = v119;
        v121 = *((_OWORD *)v76 + 5);
        v122 = *((_OWORD *)v76 + 6);
        v123 = *((_OWORD *)v76 + 8);
        *((_OWORD *)v84 + 8) = *((_OWORD *)v76 + 7);
        *((_OWORD *)v84 + 9) = v123;
        *((_OWORD *)v84 + 6) = v121;
        *((_OWORD *)v84 + 7) = v122;
        v76 += 18;
        if (v76 == v77)
          goto LABEL_249;
      }
LABEL_179:
      v90 = operator new(0xA0uLL);
      *v90 = 0;
      v90[1] = v80;
      *((_OWORD *)v90 + 1) = *(_OWORD *)v76;
      v91 = *((_OWORD *)v76 + 8);
      v93 = *((_OWORD *)v76 + 5);
      v92 = *((_OWORD *)v76 + 6);
      *((_OWORD *)v90 + 8) = *((_OWORD *)v76 + 7);
      *((_OWORD *)v90 + 9) = v91;
      *((_OWORD *)v90 + 6) = v93;
      *((_OWORD *)v90 + 7) = v92;
      v94 = *v79;
      v95 = *((_OWORD *)v76 + 2);
      v96 = *((_OWORD *)v76 + 4);
      *((_OWORD *)v90 + 4) = *((_OWORD *)v76 + 3);
      *((_OWORD *)v90 + 5) = v96;
      *((_OWORD *)v90 + 2) = v94;
      *((_OWORD *)v90 + 3) = v95;
      v97 = (float)(unint64_t)(*(_QWORD *)(a1 + 1416) + 1);
      v98 = *(float *)(a1 + 1424);
      if (v81 && (float)(v98 * (float)v81) >= v97)
      {
        v80 = v3;
        goto LABEL_242;
      }
      v99 = (v81 & (v81 - 1)) != 0;
      if (v81 < 3)
        v99 = 1;
      v100 = v99 | (2 * v81);
      v101 = vcvtps_u32_f32(v97 / v98);
      if (v100 <= v101)
        prime = v101;
      else
        prime = v100;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
        v81 = *(_QWORD *)(a1 + 1400);
      }
      if (prime <= v81)
      {
        if (prime >= v81)
          goto LABEL_230;
        v114 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 1416) / *(float *)(a1 + 1424));
        if (v81 < 3 || (v115 = (uint8x8_t)vcnt_s8((int8x8_t)v81), v115.i16[0] = vaddlv_u8(v115), v115.u32[0] > 1uLL))
        {
          v114 = std::__next_prime(v114);
        }
        else
        {
          v116 = 1 << -(char)__clz(v114 - 1);
          if (v114 >= 2)
            v114 = v116;
        }
        if (prime <= v114)
          prime = v114;
        if (prime >= v81)
        {
          v81 = *(_QWORD *)(a1 + 1400);
          if ((v81 & (v81 - 1)) == 0)
            goto LABEL_231;
          goto LABEL_240;
        }
        if (!prime)
        {
          v124 = *(void **)(a1 + 1392);
          *(_QWORD *)(a1 + 1392) = 0;
          if (v124)
            operator delete(v124);
          v81 = 0;
          *(_QWORD *)(a1 + 1400) = 0;
          goto LABEL_231;
        }
      }
      if (prime >> 61)
        sub_20E877A38();
      v103 = operator new(8 * prime);
      v104 = *(void **)(a1 + 1392);
      *(_QWORD *)(a1 + 1392) = v103;
      if (v104)
        operator delete(v104);
      v105 = 0;
      *(_QWORD *)(a1 + 1400) = prime;
      do
        *(_QWORD *)(*(_QWORD *)(a1 + 1392) + 8 * v105++) = 0;
      while (prime != v105);
      v106 = (_QWORD *)*v78;
      if (*v78)
      {
        v107 = v106[1];
        v108 = prime - 1;
        if ((prime & (prime - 1)) != 0)
        {
          if (v107 < prime)
          {
            *(_QWORD *)(*(_QWORD *)(a1 + 1392) + 8 * v107) = v78;
            v117 = (_QWORD *)*v106;
            if (*v106)
              goto LABEL_234;
LABEL_229:
            v81 = prime;
LABEL_230:
            if ((v81 & (v81 - 1)) != 0)
              goto LABEL_240;
LABEL_231:
            v80 = ((_DWORD)v81 - 1) & v80;
            goto LABEL_242;
          }
          v107 %= prime;
          *(_QWORD *)(*(_QWORD *)(a1 + 1392) + 8 * v107) = v78;
          v117 = (_QWORD *)*v106;
          if (!*v106)
            goto LABEL_229;
          while (1)
          {
LABEL_234:
            v126 = v117[1];
            if (v126 >= prime)
              v126 %= prime;
            if (v126 == v107)
              goto LABEL_233;
            v127 = *(_QWORD *)(a1 + 1392);
            if (*(_QWORD *)(v127 + 8 * v126))
              break;
            *(_QWORD *)(v127 + 8 * v126) = v106;
            v106 = v117;
            v117 = (_QWORD *)*v117;
            v107 = v126;
            if (!v117)
              goto LABEL_239;
          }
          *v106 = *v117;
          v125 = 8 * v126;
          *v117 = **(_QWORD **)(*(_QWORD *)(a1 + 1392) + v125);
          **(_QWORD **)(*(_QWORD *)(a1 + 1392) + v125) = v117;
          v117 = v106;
LABEL_233:
          v106 = v117;
          v117 = (_QWORD *)*v117;
          if (!v117)
            goto LABEL_239;
          goto LABEL_234;
        }
        v109 = v107 & v108;
        *(_QWORD *)(*(_QWORD *)(a1 + 1392) + 8 * v109) = v78;
        for (j = (_QWORD *)*v106; *v106; j = (_QWORD *)*v106)
        {
          v111 = j[1] & v108;
          if (v111 == v109)
          {
            v106 = j;
          }
          else
          {
            v112 = *(_QWORD *)(a1 + 1392);
            if (*(_QWORD *)(v112 + 8 * v111))
            {
              *v106 = *j;
              v113 = 8 * v111;
              *j = **(_QWORD **)(*(_QWORD *)(a1 + 1392) + v113);
              **(_QWORD **)(*(_QWORD *)(a1 + 1392) + v113) = j;
            }
            else
            {
              *(_QWORD *)(v112 + 8 * v111) = v106;
              v106 = j;
              v109 = v111;
            }
          }
        }
      }
LABEL_239:
      v81 = prime;
      if ((prime & (prime - 1)) == 0)
        goto LABEL_231;
LABEL_240:
      if (v81 <= v80)
        v80 %= v81;
LABEL_242:
      v128 = *(_QWORD *)(a1 + 1392);
      v129 = *(_QWORD **)(v128 + 8 * v80);
      if (v129)
      {
        *v90 = *v129;
      }
      else
      {
        *v90 = *v78;
        *v78 = v90;
        *(_QWORD *)(v128 + 8 * v80) = v78;
        if (!*v90)
          goto LABEL_152;
        v130 = *(_QWORD *)(*v90 + 8);
        if ((v81 & (v81 - 1)) != 0)
        {
          if (v130 >= v81)
            v130 %= v81;
        }
        else
        {
          v130 &= v81 - 1;
        }
        v129 = (_QWORD *)(*(_QWORD *)(a1 + 1392) + 8 * v130);
      }
      *v129 = v90;
LABEL_152:
      ++*(_QWORD *)(a1 + 1416);
      v76 += 18;
    }
    while (v76 != v77);
  }
LABEL_249:
  v131 = **a2;
  v132 = (unsigned __int8 *)v131[540];
  v133 = (unsigned __int8 *)v131[541];
  if (v132 != v133)
  {
    v134 = &off_24C9EAF48;
    do
    {
      *(_OWORD *)__src = *(_OWORD *)v132;
      LOBYTE(__src[2]) = 0;
      v296 = 0;
      v275[0] = v134;
      v275[1] = a1;
      v276 = v275;
      v135 = sub_20EE208E0(a1 + 704, (uint64_t)__src, (uint64_t)v275);
      v136 = v276;
      if (v276 == v275)
      {
        v136 = v275;
        v137 = 4;
      }
      else
      {
        if (!v276)
          goto LABEL_257;
        v137 = 5;
      }
      (*(void (**)(void))(*v136 + 8 * v137))();
LABEL_257:
      if ((v135 & 1) == 0)
      {
        v138 = sub_210219C18();
        sub_2102323F4(v132, v274);
        v139 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
        if ((v139 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
        {
          __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DDD0);
        }
        if (atomic_load(&qword_254A5A450))
        {
          v141 = v134;
          LODWORD(v277[0]) = 136315138;
          *(__uint64_t *)((char *)v277 + 4) = (__uint64_t)v274;
          v142 = (char *)_os_log_send_and_compose_impl();
          v143 = strlen(v142);
          v273.tv_sec = 0;
          pthread_threadid_np(0, (__uint64_t *)&v273);
          tv_sec = v273.tv_sec;
          timespec_get(&v273, 1);
          sub_210219E20(v277, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v138 + 1), (__int128 *)(v138 + 5), "Anchors:Error:Keyframe anchor with id %s was removed from map but was not found in the user anchors map", 0x67uLL, v142, v143, tv_sec, &v273);
          std::mutex::lock(&stru_254A5A410);
          v145 = qword_254A5A458;
          for (k = unk_254A5A460; v145 != k; v145 += 40)
          {
            v147 = *(_QWORD *)(v145 + 32);
            if (!v147)
              sub_20E86D37C();
            (*(void (**)(uint64_t, __uint64_t *))(*(_QWORD *)v147 + 48))(v147, v277);
          }
          std::mutex::unlock(&stru_254A5A410);
          if (v289 < 0)
          {
            operator delete(v288);
            v134 = v141;
            if (v287 < 0)
              goto LABEL_268;
LABEL_265:
            if (v285)
            {
LABEL_269:
              if (v284 < 0)
                operator delete(v283);
            }
          }
          else
          {
            v134 = v141;
            if ((v287 & 0x80000000) == 0)
              goto LABEL_265;
LABEL_268:
            operator delete(v286);
            if (v285)
              goto LABEL_269;
          }
          if (v282 && v281 < 0)
            operator delete(v280);
          if (v279 < 0)
          {
            operator delete((void *)v277[1]);
            if (v142)
LABEL_276:
              free(v142);
          }
          else if (v142)
          {
            goto LABEL_276;
          }
        }
        if (os_signpost_enabled((os_log_t)*v138))
        {
          LODWORD(v277[0]) = 136315138;
          *(__uint64_t *)((char *)v277 + 4) = (__uint64_t)v274;
          _os_signpost_emit_unreliably_with_name_impl();
        }
      }
      if (v296 && v295 && v294 < 0)
        operator delete(v292);
      v132 += 416;
    }
    while (v132 != v133);
  }
  v148 = v268;
  v149 = *(_QWORD *)(v268 + 4320);
  if (v149)
  {
    v150 = (void **)(v268 + 4320);
    v151 = *(_QWORD *)(v268 + 4328);
    v152 = *(void **)(v268 + 4320);
    if (v151 != v149)
    {
      do
      {
        if (*(_BYTE *)(v151 - 8) && *(char *)(v151 - 9) < 0)
          operator delete(*(void **)(v151 - 32));
        v151 -= 416;
      }
      while (v151 != v149);
      v152 = *v150;
    }
    *(_QWORD *)(v268 + 4328) = v149;
    operator delete(v152);
    *v150 = 0;
    *(_QWORD *)(v148 + 4328) = 0;
    *(_QWORD *)(v148 + 4336) = 0;
  }
  *(_OWORD *)(v148 + 4320) = *(_OWORD *)(a1 + 792);
  *(_QWORD *)(v148 + 4336) = *(_QWORD *)(a1 + 808);
  *(_QWORD *)(a1 + 808) = 0;
  *(_OWORD *)(a1 + 792) = 0u;
  v153 = **a2;
  v154 = (char *)v153[537];
  v155 = v153[538];
  if (v154 != (char *)v155 || v153[543] != v153[544])
  {
    if (!*(_BYTE *)(a1 + 1384))
    {
LABEL_450:
      sub_20EE19760(a1, v153, (uint64_t *)&v268);
      v217 = **a2;
      v218 = v217[543];
      for (m = v217[544]; v218 != m; v218 += 3)
        sub_20EE22E48(a1 + 704, v218);
      sub_20EE22FC8(a1 + 704, __src);
      v220 = v268;
      v221 = (void **)(v268 + 4344);
      v222 = *(_QWORD *)(v268 + 4344);
      v223 = v268;
      if (v222)
      {
        v224 = *(_QWORD *)(v268 + 4352);
        v225 = *(void **)(v268 + 4344);
        if (v224 != v222)
        {
          do
          {
            if (*(_BYTE *)(v224 - 8) && *(char *)(v224 - 9) < 0)
              operator delete(*(void **)(v224 - 32));
            v224 -= 48;
          }
          while (v224 != v222);
          v225 = *v221;
        }
        *(_QWORD *)(v220 + 4352) = v222;
        operator delete(v225);
        v223 = v268;
      }
      *(_OWORD *)v221 = *(_OWORD *)__src;
      *(void **)(v220 + 4360) = __src[2];
      sub_20EE1D9E0((char **)(v223 + 4344), *(_QWORD *)(v223 + 4352), *(_QWORD *)(a1 + 816), *(_QWORD *)(a1 + 824), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 824) - *(_QWORD *)(a1 + 816)) >> 4));
      v226 = *(_QWORD *)(a1 + 824);
      v227 = *(_QWORD *)(a1 + 816);
      while (v226 != v227)
      {
        if (*(_BYTE *)(v226 - 8) && *(char *)(v226 - 9) < 0)
          operator delete(*(void **)(v226 - 32));
        v226 -= 48;
      }
      *(_QWORD *)(a1 + 824) = v227;
      if (*(_QWORD *)(a1 + 864))
      {
        v228 = *(_QWORD **)(a1 + 856);
        if (v228)
        {
          do
          {
            v234 = (_QWORD *)*v228;
            v235 = (_QWORD *)v228[6];
            if (v235)
            {
              do
              {
                v236 = (_QWORD *)*v235;
                operator delete(v235);
                v235 = v236;
              }
              while (v236);
            }
            v237 = (void *)v228[4];
            v228[4] = 0;
            if (v237)
              operator delete(v237);
            operator delete(v228);
            v228 = v234;
          }
          while (v234);
        }
        *(_QWORD *)(a1 + 856) = 0;
        v229 = *(_QWORD *)(a1 + 848);
        if (v229)
        {
          for (n = 0; n != v229; ++n)
            *(_QWORD *)(*(_QWORD *)(a1 + 840) + 8 * n) = 0;
        }
        *(_QWORD *)(a1 + 864) = 0;
      }
      if ((v265 & 1) != 0)
        goto LABEL_491;
      v206 = 1;
LABEL_475:
      LOBYTE(v277[0]) = v206;
      v231 = operator new(0x28uLL);
      *v231 = &off_24C9EAFC8;
      v231[1] = &v268;
      v231[2] = a2;
      v231[3] = a1;
      v231[4] = v277;
      __src[3] = v231;
      sub_20EE208E0(a1 + 704, a1 + 944, (uint64_t)__src);
      v232 = (void **)__src[3];
      if (__src[3] == __src)
      {
        v233 = 4;
        v232 = __src;
      }
      else
      {
        if (!__src[3])
          goto LABEL_485;
        v233 = 5;
      }
      (*((void (**)(void))*v232 + v233))();
LABEL_485:
      if (*(_QWORD *)(a1 + 864))
      {
        v238 = *(_QWORD **)(a1 + 856);
        if (v238)
        {
          do
          {
            v259 = (_QWORD *)*v238;
            v260 = (_QWORD *)v238[6];
            if (v260)
            {
              do
              {
                v261 = (_QWORD *)*v260;
                operator delete(v260);
                v260 = v261;
              }
              while (v261);
            }
            v262 = (void *)v238[4];
            v238[4] = 0;
            if (v262)
              operator delete(v262);
            operator delete(v238);
            v238 = v259;
          }
          while (v259);
        }
        *(_QWORD *)(a1 + 856) = 0;
        v239 = *(_QWORD *)(a1 + 848);
        if (v239)
        {
          for (ii = 0; ii != v239; ++ii)
            *(_QWORD *)(*(_QWORD *)(a1 + 840) + 8 * ii) = 0;
        }
        *(_QWORD *)(a1 + 864) = 0;
      }
      goto LABEL_491;
    }
    v156 = v153[539];
    if (v155 < v156)
    {
      memcpy(v153[538], (const void *)(a1 + 960), 0x179uLL);
      *((_BYTE *)v155 + 384) = 0;
      *((_BYTE *)v155 + 408) = 0;
      if (*(_BYTE *)(a1 + 1368))
      {
        if (*(char *)(a1 + 1367) < 0)
        {
          sub_20E860C04((_BYTE *)v155 + 384, *(void **)(a1 + 1344), *(_QWORD *)(a1 + 1352));
        }
        else
        {
          v157 = *(_OWORD *)(a1 + 1344);
          *((_QWORD *)v155 + 50) = *(_QWORD *)(a1 + 1360);
          v155[24] = v157;
        }
        *((_BYTE *)v155 + 408) = 1;
      }
      v209 = v155 + 26;
      v153[538] = v155 + 26;
      goto LABEL_449;
    }
    v158 = 0x4EC4EC4EC4EC4EC5 * (((char *)v155 - v154) >> 5) + 1;
    if (v158 > 0x9D89D89D89D89DLL)
      sub_20EAA9DC0();
    v159 = 0x4EC4EC4EC4EC4EC5 * (((char *)v156 - v154) >> 5);
    if (2 * v159 > v158)
      v158 = 2 * v159;
    if (v159 >= 0x4EC4EC4EC4EC4ELL)
      v160 = 0x9D89D89D89D89DLL;
    else
      v160 = v158;
    __src[4] = v153 + 539;
    if (v160)
    {
      if (v160 > 0x9D89D89D89D89DLL)
        sub_20E877A38();
      v161 = (char *)operator new(416 * v160);
    }
    else
    {
      v161 = 0;
    }
    v207 = &v161[32 * (((char *)v155 - v154) >> 5)];
    __src[0] = v161;
    __src[1] = v207;
    __src[2] = v207;
    __src[3] = &v161[416 * v160];
    memcpy(v207, (const void *)(a1 + 960), 0x179uLL);
    v207[384] = 0;
    v207[408] = 0;
    if (*(_BYTE *)(a1 + 1368))
    {
      v208 = v207 + 408;
      if ((*(char *)(a1 + 1367) & 0x80000000) == 0)
      {
        *((_OWORD *)v207 + 24) = *(_OWORD *)(a1 + 1344);
        *((_QWORD *)v207 + 50) = *(_QWORD *)(a1 + 1360);
        *v208 = 1;
        v209 = (__int128 *)(v207 + 416);
        __src[2] = v207 + 416;
        if (v155 != (__int128 *)v154)
          goto LABEL_430;
LABEL_436:
        v214 = (__int128 *)v154;
        goto LABEL_437;
      }
      sub_20E860C04(v207 + 384, *(void **)(a1 + 1344), *(_QWORD *)(a1 + 1352));
      v155 = v153[538];
      v154 = (char *)v153[537];
      v207 = (char *)__src[1];
      v263 = (char *)__src[2];
      *v208 = 1;
      v209 = (__int128 *)(v263 + 416);
      __src[2] = v263 + 416;
      if (v155 == (__int128 *)v154)
        goto LABEL_436;
    }
    else
    {
      v209 = (__int128 *)(v207 + 416);
      __src[2] = v207 + 416;
      if (v155 == (__int128 *)v154)
        goto LABEL_436;
    }
LABEL_430:
    v210 = 0;
    do
    {
      v211 = &v207[v210 * 16];
      v212 = &v155[v210];
      memcpy(&v207[v210 * 16 - 416], &v155[v210 - 26], 0x179uLL);
      *(v211 - 32) = 0;
      *(v211 - 8) = 0;
      if (BYTE8(v155[v210 - 1]))
      {
        v213 = *(v212 - 2);
        *((_QWORD *)v211 - 2) = *((_QWORD *)v212 - 2);
        *((_OWORD *)v211 - 2) = v213;
        *((_QWORD *)v212 - 3) = 0;
        *((_QWORD *)v212 - 2) = 0;
        *((_QWORD *)v212 - 4) = 0;
        *(v211 - 8) = 1;
      }
      v210 -= 26;
    }
    while (&v155[v210] != (__int128 *)v154);
    v214 = v153[537];
    v154 = (char *)v153[538];
    v207 += v210 * 16;
    v209 = (__int128 *)__src[2];
LABEL_437:
    v153[537] = (__int128 *)v207;
    v153[538] = v209;
    v215 = v153[539];
    v153[539] = (__int128 *)__src[3];
    __src[3] = v215;
    __src[0] = v214;
    __src[1] = v214;
    if (v154 == (char *)v214)
    {
      if (!v154)
        goto LABEL_449;
    }
    else
    {
      do
      {
        v216 = v154 - 416;
        __src[2] = v154 - 416;
        if (*(v154 - 8) && *(v154 - 9) < 0)
          operator delete(*((void **)v154 - 4));
        v154 -= 416;
      }
      while (v216 != (char *)v214);
      v154 = (char *)v214;
      if (!v214)
        goto LABEL_449;
    }
    operator delete(v154);
LABEL_449:
    v153[538] = v209;
    v153 = **a2;
    goto LABEL_450;
  }
  if (v153[534] != v153[535])
    sub_20EE19760(a1, **a2, (uint64_t *)&v268);
  v162 = *(uint64_t **)(a1 + 856);
  if (!v162)
    goto LABEL_407;
  while (2)
  {
    *(_OWORD *)__src = *((_OWORD *)v162 + 1);
    LOBYTE(__src[2]) = 0;
    v296 = 0;
    v163 = sub_20EE1CCB4((_QWORD *)(a1 + 712), (uint64_t)__src);
    if (v296 && v295 && v294 < 0)
      operator delete(v292);
    if (!v163)
      goto LABEL_316;
    v164 = v163[57];
    v165 = v163[58];
    if (!*((_BYTE *)v163 + 448))
    {
      if (v164 == v165)
        goto LABEL_316;
LABEL_367:
      v181 = sub_2102322B4((unsigned __int8 *)v164);
      v182 = (int8x8_t)v162[5];
      if (!*(_QWORD *)&v182)
        goto LABEL_366;
      v183 = (uint8x8_t)vcnt_s8(v182);
      v183.i16[0] = vaddlv_u8(v183);
      if (v183.u32[0] > 1uLL)
      {
        v184 = v181;
        if (v181 >= *(_QWORD *)&v182)
          v184 = v181 % *(_QWORD *)&v182;
      }
      else
      {
        v184 = (*(_QWORD *)&v182 - 1) & v181;
      }
      v185 = *(_QWORD **)(v162[4] + 8 * v184);
      if (!v185)
        goto LABEL_366;
      v186 = (_QWORD *)*v185;
      if (!v186)
        goto LABEL_366;
      if (v183.u32[0] < 2uLL)
      {
        v187 = *(_QWORD *)&v182 - 1;
        while (1)
        {
          v191 = v186[1];
          if (v191 == v181)
          {
            if (v186[2] == *(_QWORD *)v164 && v186[3] == *(_QWORD *)(v164 + 8))
              goto LABEL_394;
          }
          else if ((v191 & v187) != v184)
          {
            goto LABEL_366;
          }
          v186 = (_QWORD *)*v186;
          if (!v186)
            goto LABEL_366;
        }
      }
      while (1)
      {
        v189 = v186[1];
        if (v189 == v181)
        {
          if (v186[2] == *(_QWORD *)v164 && v186[3] == *(_QWORD *)(v164 + 8))
          {
LABEL_394:
            v192 = v268;
            *(_OWORD *)__src = *(_OWORD *)v164;
            LOBYTE(__src[2]) = 0;
            LOBYTE(__src[5]) = 0;
            if (*(_BYTE *)(v164 + 40))
            {
              if (*(char *)(v164 + 39) < 0)
              {
                sub_20E860C04(&__src[2], *(void **)(v164 + 16), *(_QWORD *)(v164 + 24));
              }
              else
              {
                v193 = *(_OWORD *)(v164 + 16);
                __src[4] = *(void **)(v164 + 32);
                *(_OWORD *)&__src[2] = v193;
              }
              LOBYTE(__src[5]) = 1;
            }
            v194 = *(_QWORD *)(v192 + 4352);
            if (v194 >= *(_QWORD *)(v192 + 4360))
            {
              v196 = sub_20EE1D140((char **)(v192 + 4344), (uint64_t)__src);
            }
            else
            {
              *(_OWORD *)v194 = *(_OWORD *)__src;
              *(_BYTE *)(v194 + 16) = 0;
              *(_BYTE *)(v194 + 40) = 0;
              if (LOBYTE(__src[5]))
              {
                v195 = *(_OWORD *)&__src[2];
                *(void **)(v194 + 32) = __src[4];
                *(_OWORD *)(v194 + 16) = v195;
                memset(&__src[2], 0, 24);
                *(_BYTE *)(v194 + 40) = 1;
              }
              v196 = (char *)(v194 + 48);
            }
            *(_QWORD *)(v192 + 4352) = v196;
            if (LOBYTE(__src[5]) && SHIBYTE(__src[4]) < 0)
              operator delete(__src[2]);
LABEL_366:
            v164 += 328;
            if (v164 == v165)
              goto LABEL_316;
            goto LABEL_367;
          }
        }
        else
        {
          if (v189 >= *(_QWORD *)&v182)
            v189 %= *(_QWORD *)&v182;
          if (v189 != v184)
            goto LABEL_366;
        }
        v186 = (_QWORD *)*v186;
        if (!v186)
          goto LABEL_366;
      }
    }
    if (v164 == v165)
      goto LABEL_316;
    v166 = (char *)(v163 + 4);
    while (2)
    {
      v167 = sub_2102322B4((unsigned __int8 *)v164);
      v168 = (int8x8_t)v162[5];
      if (!*(_QWORD *)&v168)
        goto LABEL_325;
      v169 = (uint8x8_t)vcnt_s8(v168);
      v169.i16[0] = vaddlv_u8(v169);
      if (v169.u32[0] > 1uLL)
      {
        v170 = v167;
        if (v167 >= *(_QWORD *)&v168)
          v170 = v167 % *(_QWORD *)&v168;
      }
      else
      {
        v170 = (*(_QWORD *)&v168 - 1) & v167;
      }
      v171 = *(_QWORD **)(v162[4] + 8 * v170);
      if (!v171)
        goto LABEL_325;
      v172 = (_QWORD *)*v171;
      if (!v172)
        goto LABEL_325;
      if (v169.u32[0] < 2uLL)
      {
        v173 = *(_QWORD *)&v168 - 1;
        while (1)
        {
          v177 = v172[1];
          if (v177 == v167)
          {
            if (v172[2] == *(_QWORD *)v164 && v172[3] == *(_QWORD *)(v164 + 8))
              goto LABEL_353;
          }
          else if ((v177 & v173) != v170)
          {
            goto LABEL_325;
          }
          v172 = (_QWORD *)*v172;
          if (!v172)
            goto LABEL_325;
        }
      }
      while (1)
      {
        v175 = v172[1];
        if (v175 == v167)
          break;
        if (v175 >= *(_QWORD *)&v168)
          v175 %= *(_QWORD *)&v168;
        if (v175 != v170)
          goto LABEL_325;
LABEL_339:
        v172 = (_QWORD *)*v172;
        if (!v172)
          goto LABEL_325;
      }
      if (v172[2] != *(_QWORD *)v164 || v172[3] != *(_QWORD *)(v164 + 8))
        goto LABEL_339;
LABEL_353:
      sub_20EE2262C(v166, v164, __src);
      v178 = v268;
      v179 = *(_QWORD *)(v268 + 4304);
      if (v179 >= *(_QWORD *)(v268 + 4312))
      {
        *(_QWORD *)(v178 + 4304) = sub_20EE1DF30((char **)(v268 + 4296), (uint64_t)__src);
        if (v293)
          goto LABEL_362;
      }
      else
      {
        memcpy(*(void **)(v268 + 4304), __src, 0x179uLL);
        *(_BYTE *)(v179 + 384) = 0;
        *(_BYTE *)(v179 + 408) = 0;
        if (v293)
        {
          if (SHIBYTE(v292) < 0)
          {
            sub_20E860C04((_BYTE *)(v179 + 384), (void *)v291, *((unint64_t *)&v291 + 1));
          }
          else
          {
            v180 = v291;
            *(_QWORD *)(v179 + 400) = v292;
            *(_OWORD *)(v179 + 384) = v180;
          }
          *(_BYTE *)(v179 + 408) = 1;
        }
        *(_QWORD *)(v178 + 4304) = v179 + 416;
        *(_QWORD *)(v178 + 4304) = v179 + 416;
        if (v293)
        {
LABEL_362:
          if (SHIBYTE(v292) < 0)
            operator delete((void *)v291);
        }
      }
LABEL_325:
      v164 += 328;
      if (v164 != v165)
        continue;
      break;
    }
LABEL_316:
    v162 = (uint64_t *)*v162;
    if (v162)
      continue;
    break;
  }
LABEL_407:
  if (*(_QWORD *)(a1 + 864))
  {
    v197 = *(_QWORD **)(a1 + 856);
    if (v197)
    {
      do
      {
        v202 = (_QWORD *)*v197;
        v203 = (_QWORD *)v197[6];
        if (v203)
        {
          do
          {
            v204 = (_QWORD *)*v203;
            operator delete(v203);
            v203 = v204;
          }
          while (v204);
        }
        v205 = (void *)v197[4];
        v197[4] = 0;
        if (v205)
          operator delete(v205);
        operator delete(v197);
        v197 = v202;
      }
      while (v202);
    }
    *(_QWORD *)(a1 + 856) = 0;
    v198 = *(_QWORD *)(a1 + 848);
    if (v198)
    {
      for (jj = 0; jj != v198; ++jj)
        *(_QWORD *)(*(_QWORD *)(a1 + 840) + 8 * jj) = 0;
    }
    *(_QWORD *)(a1 + 864) = 0;
  }
  sub_20EE1D9E0((char **)(v268 + 4344), *(_QWORD *)(v268 + 4352), *(_QWORD *)(a1 + 816), *(_QWORD *)(a1 + 824), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 824) - *(_QWORD *)(a1 + 816)) >> 4));
  v200 = *(_QWORD *)(a1 + 824);
  v201 = *(_QWORD *)(a1 + 816);
  while (v200 != v201)
  {
    if (*(_BYTE *)(v200 - 8) && *(char *)(v200 - 9) < 0)
      operator delete(*(void **)(v200 - 32));
    v200 -= 48;
  }
  *(_QWORD *)(a1 + 824) = v201;
  v206 = v265;
  if (!v265)
    goto LABEL_475;
LABEL_491:
  if ((_QWORD)v268 + 4392 != a1 + 920)
    sub_20EE1CB70((_QWORD *)(v268 + 4392), *(char **)(a1 + 920), *(char **)(a1 + 928), (uint64_t)(*(_QWORD *)(a1 + 928) - *(_QWORD *)(a1 + 920)) >> 4);
  *(_QWORD *)(a1 + 928) = *(_QWORD *)(a1 + 920);
  v241 = (char *)operator new(0x50uLL);
  v242 = v269;
  *(_OWORD *)(v241 + 24) = v268;
  *(_QWORD *)v241 = &off_24C9C3988;
  *((_QWORD *)v241 + 1) = 0;
  *((_QWORD *)v241 + 2) = 0;
  v268 = 0uLL;
  *(_OWORD *)(v241 + 40) = v242;
  v269 = 0uLL;
  *(_OWORD *)(v241 + 56) = v270;
  v270 = 0uLL;
  v241[72] = v271;
  v243 = v272;
  v244 = *(std::__shared_weak_count **)(v272 + 8);
  *(_QWORD *)v272 = v241 + 24;
  *(_QWORD *)(v243 + 8) = v241;
  if (v244)
  {
    v245 = (unint64_t *)&v244->__shared_owners_;
    do
      v246 = __ldaxr(v245);
    while (__stlxr(v246 - 1, v245));
    if (!v246)
    {
      ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
      std::__shared_weak_count::__release_weak(v244);
    }
  }
  *a3 = v272;
  v272 = 0uLL;
  v247 = (std::__shared_weak_count *)*((_QWORD *)&v270 + 1);
  if (*((_QWORD *)&v270 + 1))
  {
    v248 = (unint64_t *)(*((_QWORD *)&v270 + 1) + 8);
    do
      v249 = __ldaxr(v248);
    while (__stlxr(v249 - 1, v248));
    if (!v249)
    {
      ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
      std::__shared_weak_count::__release_weak(v247);
    }
  }
  v250 = (std::__shared_weak_count *)*((_QWORD *)&v269 + 1);
  if (*((_QWORD *)&v269 + 1))
  {
    v251 = (unint64_t *)(*((_QWORD *)&v269 + 1) + 8);
    do
      v252 = __ldaxr(v251);
    while (__stlxr(v252 - 1, v251));
    if (!v252)
    {
      ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
      std::__shared_weak_count::__release_weak(v250);
    }
  }
  v253 = (std::__shared_weak_count *)*((_QWORD *)&v268 + 1);
  if (*((_QWORD *)&v268 + 1))
  {
    v254 = (unint64_t *)(*((_QWORD *)&v268 + 1) + 8);
    do
      v255 = __ldaxr(v254);
    while (__stlxr(v255 - 1, v254));
    if (!v255)
    {
      ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
      std::__shared_weak_count::__release_weak(v253);
    }
  }
  v256 = (std::__shared_weak_count *)*((_QWORD *)&v272 + 1);
  if (*((_QWORD *)&v272 + 1))
  {
    v257 = (unint64_t *)(*((_QWORD *)&v272 + 1) + 8);
    do
      v258 = __ldaxr(v257);
    while (__stlxr(v258 - 1, v257));
    if (!v258)
    {
      ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
      std::__shared_weak_count::__release_weak(v256);
    }
  }
}

void sub_20EE18F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  uint64_t v63;
  void **v64;
  _BYTE *v65;

  if (*v65)
  {
    if (*(char *)(v63 + 407) < 0)
      operator delete(*v64);
  }
  sub_20EAAA764((uint64_t)&a63);
  sub_20E91D88C(&a19);
  sub_20E86665C((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20EE18F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;
  uint64_t v28;
  void **v29;

  if (*(_BYTE *)(v27 + 408))
  {
    if (*(char *)(v27 + 407) < 0)
      operator delete(*v29);
  }
  *(_QWORD *)(v28 + 4304) = v27;
  sub_20E91D88C(&a19);
  sub_20E86665C((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20EE18FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  void *v63;

  sub_20E96E218((uint64_t)&a63);
  if (v63)
  {
    free(v63);
    sub_20E91D88C(&a19);
    sub_20E86665C((uint64_t)&a27);
    _Unwind_Resume(a1);
  }
  sub_20E91D88C(&a19);
  sub_20E86665C((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20EE19264(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v13;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  int8x8_t v24;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v32;

  v5 = sub_2102322B4((unsigned __int8 *)a2);
  v6 = v5;
  v7 = (_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v2 = v5;
      if (v5 >= v8)
        v2 = v5 % v8;
    }
    else
    {
      v2 = (v8 - 1) & v5;
    }
    v10 = *(_QWORD **)(*v7 + 8 * v2);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (v11)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v11[1];
            if (v15 == v5)
            {
              if (v11[2] == *(_QWORD *)a2 && v11[3] == *(_QWORD *)(a2 + 8))
                return;
            }
            else if ((v15 & (v8 - 1)) != v2)
            {
              goto LABEL_28;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              goto LABEL_28;
          }
        }
        do
        {
          v13 = v11[1];
          if (v13 == v5)
          {
            if (v11[2] == *(_QWORD *)a2 && v11[3] == *(_QWORD *)(a2 + 8))
              return;
          }
          else
          {
            if (v13 >= v8)
              v13 %= v8;
            if (v13 != v2)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_28:
  v16 = operator new(0x1E0uLL);
  v17 = (_QWORD *)(a1 + 24);
  v32 = v16;
  *v16 = 0;
  v16[1] = v6;
  *((_OWORD *)v16 + 1) = *(_OWORD *)a2;
  *((_BYTE *)v16 + 32) = 0;
  *((_BYTE *)v16 + 448) = 0;
  if (*(_BYTE *)(a2 + 432))
  {
    memcpy(v16 + 4, (const void *)(a2 + 16), 0x179uLL);
    *((_BYTE *)v16 + 416) = 0;
    *((_BYTE *)v16 + 440) = 0;
    if (*(_BYTE *)(a2 + 424))
    {
      if (*(char *)(a2 + 423) < 0)
      {
        sub_20E860C04((_BYTE *)v16 + 416, *(void **)(a2 + 400), *(_QWORD *)(a2 + 408));
      }
      else
      {
        *((_OWORD *)v16 + 26) = *(_OWORD *)(a2 + 400);
        v16[54] = *(_QWORD *)(a2 + 416);
      }
      *((_BYTE *)v16 + 440) = 1;
    }
    *((_BYTE *)v16 + 448) = 1;
  }
  v16[57] = 0;
  v16[58] = 0;
  v16[59] = 0;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 32) + 1);
  v19 = *(float *)(a1 + 40);
  if (v8 && (float)(v19 * (float)v8) >= v18)
    goto LABEL_63;
  v20 = 1;
  if (v8 >= 3)
    v20 = (v8 & (v8 - 1)) != 0;
  v21 = v20 | (2 * v8);
  v22 = vcvtps_u32_f32(v18 / v19);
  if (v21 <= v22)
    prime = v22;
  else
    prime = v21;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
  }
  v24 = *(int8x8_t *)(a1 + 16);
  if (prime > *(_QWORD *)&v24)
    goto LABEL_47;
  if (prime < *(_QWORD *)&v24)
  {
    v25 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 32) / *(float *)(a1 + 40));
    if (*(_QWORD *)&v24 < 3uLL || (v26 = (uint8x8_t)vcnt_s8(v24), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
    {
      v25 = std::__next_prime(v25);
    }
    else
    {
      v27 = 1 << -(char)__clz(v25 - 1);
      if (v25 >= 2)
        v25 = v27;
    }
    if (prime <= v25)
      prime = v25;
    if (prime < *(_QWORD *)&v24)
LABEL_47:
      sub_20E8D2B3C(a1 + 8, prime);
  }
  v8 = *(_QWORD *)(a1 + 16);
  v28 = v8 - 1;
  if ((v8 & (v8 - 1)) != 0)
  {
    if (v6 >= v8)
    {
      v2 = v6 % v8;
      v29 = *(_QWORD **)(*v7 + 8 * (v6 % v8));
      v30 = v32;
      if (!v29)
        goto LABEL_66;
      goto LABEL_64;
    }
    v2 = v6;
LABEL_63:
    v29 = *(_QWORD **)(*v7 + 8 * v2);
    v30 = v32;
    if (!v29)
      goto LABEL_66;
    goto LABEL_64;
  }
  v2 = v28 & v6;
  v29 = *(_QWORD **)(*v7 + 8 * (v28 & v6));
  v30 = v32;
  if (!v29)
  {
LABEL_66:
    *v30 = *v17;
    *v17 = v32;
    *(_QWORD *)(*v7 + 8 * v2) = v17;
    if (*v32)
    {
      v31 = *(_QWORD *)(*v32 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v31 >= v8)
          v31 %= v8;
      }
      else
      {
        v31 &= v8 - 1;
      }
      *(_QWORD *)(*v7 + 8 * v31) = v32;
    }
    goto LABEL_72;
  }
LABEL_64:
  *v30 = *v29;
  *v29 = v32;
LABEL_72:
  ++*(_QWORD *)(a1 + 32);
}

void sub_20EE1961C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, char a12)
{
  char *v12;
  void **v13;

  if (v12[440] && v12[439] < 0)
    operator delete(*v13);
  if (v12[448] && v12[440] && v12[439] < 0)
    operator delete(*v13);
  sub_20EE1CB2C((uint64_t)&a12);
  sub_20EE1968C(&a9);
  _Unwind_Resume(a1);
}

void sub_20EE19678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20EE1968C(&a9);
  _Unwind_Resume(a1);
}

void **sub_20EE1968C(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 == v2)
    {
LABEL_16:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      if (!*(v3 - 32))
        goto LABEL_20;
      v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 5);
      if (!v5)
        goto LABEL_20;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
        if (*(v3 - 288))
        {
LABEL_11:
          if (*(v3 - 289) < 0)
            operator delete(*((void **)v3 - 39));
        }
      }
      else
      {
LABEL_20:
        if (*(v3 - 288))
          goto LABEL_11;
      }
      v3 -= 328;
      if (v3 == v2)
      {
        v4 = *a1;
        goto LABEL_16;
      }
    }
  }
  return a1;
}

void sub_20EE19760(uint64_t a1, __int128 **a2, uint64_t *a3)
{
  size_t prime;
  void *v7;
  BOOL v8;
  unint64_t v9;
  uint8x8_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  char v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  void **v22;
  void **v23;
  void **v24;
  void *v25;
  _QWORD *v26;
  void *v27;
  void **v28;
  void **v29;
  void *v30;
  _QWORD *v31;
  void *__p[2];
  void *v33[2];
  float v34;
  void *v35[2];
  uint64_t v36;
  _QWORD v37[3];
  _QWORD *v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  prime = 0x4EC4EC4EC4EC4EC5 * (((char *)a2[535] - (char *)a2[534]) >> 5)
        + 0x4EC4EC4EC4EC4EC5 * (((char *)a2[538] - (char *)a2[537]) >> 5);
  v35[0] = 0;
  v35[1] = 0;
  v36 = 0;
  sub_20EE1D52C((uint64_t)v35, prime);
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v33 = 0u;
  v34 = 1.0;
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_20E8D2B3C((uint64_t)__p, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v7 = __p[1];
    v8 = (void *)prime >= __p[1];
    if ((void *)prime > __p[1])
      goto LABEL_17;
  }
  else
  {
    v7 = 0;
    v8 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v8)
  {
    v9 = vcvtps_u32_f32((float)(unint64_t)v33[1] / v34);
    if ((unint64_t)v7 < 3
      || (v10 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v10.i16[0] = vaddlv_u8(v10), v10.u32[0] > 1uLL))
    {
      v9 = std::__next_prime(v9);
    }
    else
    {
      v11 = 1 << -(char)__clz(v9 - 1);
      if (v9 >= 2)
        v9 = v11;
    }
    if (prime <= v9)
      prime = v9;
    if (prime < (unint64_t)v7)
      goto LABEL_17;
  }
LABEL_18:
  sub_20EE1BFCC(a2[537], a2[538], (uint64_t)__p);
  sub_20EE1BFCC(a2[534], a2[535], (uint64_t)__p);
  v12 = v33[0];
  if (v33[0])
  {
    v13 = a1 + 704;
    v14 = (_QWORD *)(a1 + 840);
    while (1)
    {
      v37[0] = &off_24C9EAD70;
      v37[1] = v12 + 2;
      v37[2] = v35;
      v38 = v37;
      v15 = sub_20EE2075C(v13, (uint64_t)(v12 + 2), (uint64_t)v37);
      v16 = v38;
      if (v38 == v37)
        break;
      if (v38)
      {
        v17 = 5;
LABEL_26:
        (*(void (**)(void))(*v16 + 8 * v17))();
      }
      if ((v15 & 1) != 0)
        sub_20EE1D95C(v14, (uint64_t)(v12 + 2));
      else
        sub_20EE19264(v13, (uint64_t)(v12 + 2));
      v12 = (_QWORD *)*v12;
      if (!v12)
        goto LABEL_29;
    }
    v16 = v37;
    v17 = 4;
    goto LABEL_26;
  }
LABEL_29:
  v18 = *a3;
  v19 = *(_QWORD *)(*a3 + 4280);
  v20 = *(_QWORD *)(*a3 + 4272);
  v21 = (_QWORD *)*a3;
  if (v19 == v20)
  {
    *(_QWORD *)(v18 + 4280) = v20;
    v22 = (void **)(v21 + 537);
    v23 = (void **)v21[537];
    if (!v23)
      goto LABEL_45;
    goto LABEL_37;
  }
  do
  {
    if (*(_BYTE *)(v19 - 8) && *(char *)(v19 - 9) < 0)
      operator delete(*(void **)(v19 - 32));
    v19 -= 416;
  }
  while (v19 != v20);
  v21 = (_QWORD *)*a3;
  *(_QWORD *)(v18 + 4280) = v20;
  v22 = (void **)(v21 + 537);
  v23 = (void **)v21[537];
  if (v23)
  {
LABEL_37:
    v24 = (void **)v21[538];
    v25 = v23;
    if (v24 != v23)
    {
      do
      {
        if (*((_BYTE *)v24 - 8) && *((char *)v24 - 9) < 0)
          operator delete(*(v24 - 4));
        v24 -= 52;
      }
      while (v24 != v23);
      v25 = *v22;
    }
    v21[538] = v23;
    operator delete(v25);
    *v22 = 0;
    v22[1] = 0;
    v22[2] = 0;
  }
LABEL_45:
  *(_OWORD *)v22 = *(_OWORD *)v35;
  v21[539] = v36;
  v35[1] = 0;
  v36 = 0;
  v35[0] = 0;
  v26 = v33[0];
  if (v33[0])
  {
    do
    {
      v31 = v26;
      v26 = (_QWORD *)*v26;
      if (*((_BYTE *)v31 + 448) && *((_BYTE *)v31 + 440) && *((char *)v31 + 439) < 0)
        operator delete((void *)v31[52]);
      operator delete(v31);
    }
    while (v26);
  }
  v27 = __p[0];
  __p[0] = 0;
  if (v27)
    operator delete(v27);
  v28 = (void **)v35[0];
  if (v35[0])
  {
    v29 = (void **)v35[1];
    v30 = v35[0];
    if (v35[1] != v35[0])
    {
      do
      {
        if (*((_BYTE *)v29 - 8))
        {
          if (*((char *)v29 - 9) < 0)
            operator delete(*(v29 - 4));
        }
        v29 -= 52;
      }
      while (v29 != v28);
      v30 = v35[0];
    }
    v35[1] = v28;
    operator delete(v30);
  }
}

void sub_20EE19B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20EAA9608((void **)va);
  _Unwind_Resume(a1);
}

void sub_20EE19B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  sub_20EE1C440((uint64_t)&a9);
  sub_20EAA9608(&a15);
  _Unwind_Resume(a1);
}

void sub_20EE19B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  sub_20EE1C440((uint64_t)&a9);
  sub_20EAA9608(&a15);
  _Unwind_Resume(a1);
}

void sub_20EE19B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v22;
  uint64_t v23;

  v22 = a21;
  if (a21 == &a18)
  {
    v23 = 4;
    v22 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  sub_20EE1C440((uint64_t)&a9);
  sub_20EAA9608(&a15);
  _Unwind_Resume(a1);
}

void sub_20EE19BBC(uint64_t a1@<X0>, __int128 ****a2@<X1>, _OWORD *a3@<X8>)
{
  sub_20EE17120(a1 - 168, a2, a3);
}

void sub_20EE19BC4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  float64x2_t *v9;
  float64_t v10;
  uint64_t v11;
  uint64_t v12;
  float64x2_t v21;
  float64x2_t v25;
  float64x2_t v26;
  double v28;
  double v30;
  float64x2_t *v31;
  float64x2_t v32;
  float64x2_t *v33;
  float64x2_t v34;
  float64x2_t v38;
  float64x2_t v39;
  double v42;
  double v44;
  _QWORD *v45;
  __int16 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  char v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  __int128 v88;
  char v89;
  __int128 v90;
  char v91;
  void *__p;
  char v93;
  char v94;
  char v95;
  uint64_t v96;

  v96 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a2 + 328)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/UserAnchorNodeGroup/src/AnchorTransformationNode.cpp", 253, (uint64_t)"descriptor.pose_metadata_", 25, (uint64_t)"The anchor must have post metadata attached", 43, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (*(_BYTE *)(a1 + 1384))
  {
    v6 = atomic_load((unsigned __int8 *)&qword_254A51318);
    if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254A51318))
    {
      xmmword_254A51308 = 0uLL;
      __cxa_guard_release(&qword_254A51318);
    }
    if (qword_254A51320 != -1)
      dispatch_once(&qword_254A51320, &unk_24C9EAD40);
    v88 = xmmword_254A51308;
LABEL_15:
    v89 = 1;
    v90 = v88;
    v91 = 0;
    v95 = 0;
    v45 = sub_20EE1CCB4((_QWORD *)(a1 + 712), (uint64_t)&v90);
    if (v95 && v94 && v93 < 0)
      operator delete(__p);
    if (v45 && *((_BYTE *)v45 + 448))
    {
      v46 = sub_20EE20A50(a1 + 704, &v88, a2);
      if ((_BYTE)v46)
      {
        *(_OWORD *)a3 = *(_OWORD *)a2;
        *(_BYTE *)(a3 + 16) = 0;
        *(_BYTE *)(a3 + 40) = 0;
        if (*(_BYTE *)(a2 + 40))
        {
          if (*(char *)(a2 + 39) < 0)
          {
            sub_20E860C04((_BYTE *)(a3 + 16), *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
          }
          else
          {
            *(_OWORD *)(a3 + 16) = *(_OWORD *)(a2 + 16);
            *(_QWORD *)(a3 + 32) = *(_QWORD *)(a2 + 32);
          }
          *(_BYTE *)(a3 + 40) = 1;
        }
        v57 = *(_OWORD *)(a2 + 256);
        *(_OWORD *)(a3 + 240) = *(_OWORD *)(a2 + 240);
        *(_OWORD *)(a3 + 256) = v57;
        *(_BYTE *)(a3 + 272) = *(_BYTE *)(a2 + 272);
        v58 = *(_OWORD *)(a2 + 192);
        *(_OWORD *)(a3 + 176) = *(_OWORD *)(a2 + 176);
        *(_OWORD *)(a3 + 192) = v58;
        v59 = *(_OWORD *)(a2 + 224);
        *(_OWORD *)(a3 + 208) = *(_OWORD *)(a2 + 208);
        *(_OWORD *)(a3 + 224) = v59;
        v60 = *(_OWORD *)(a2 + 128);
        *(_OWORD *)(a3 + 112) = *(_OWORD *)(a2 + 112);
        *(_OWORD *)(a3 + 128) = v60;
        v61 = *(_OWORD *)(a2 + 160);
        *(_OWORD *)(a3 + 144) = *(_OWORD *)(a2 + 144);
        *(_OWORD *)(a3 + 160) = v61;
        v62 = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a3 + 48) = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a3 + 64) = v62;
        v63 = *(_OWORD *)(a2 + 96);
        *(_OWORD *)(a3 + 80) = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(a3 + 96) = v63;
        *(_BYTE *)(a3 + 280) = 0;
        *(_BYTE *)(a3 + 296) = 0;
        if (*(_BYTE *)(a2 + 296))
        {
          v64 = *(_QWORD *)(a2 + 288);
          *(_QWORD *)(a3 + 280) = *(_QWORD *)(a2 + 280);
          *(_QWORD *)(a3 + 288) = v64;
          if (v64)
          {
            v65 = (unint64_t *)(v64 + 8);
            do
              v66 = __ldxr(v65);
            while (__stxr(v66 + 1, v65));
          }
          *(_BYTE *)(a3 + 296) = 1;
        }
        *(_OWORD *)(a3 + 304) = *(_OWORD *)(a2 + 304);
        *(_QWORD *)(a3 + 320) = *(_QWORD *)(a2 + 320);
        *(_BYTE *)(a3 + 328) = v46;
      }
      else
      {
        if (*(_BYTE *)(a1 + 1386))
          sub_20EE1EF38(a1 + 880, a2, (_OWORD *)a2);
        if ((v46 & 0x100) != 0)
          sub_20EE1AFCC(a1, (uint64_t)&v88, (_OWORD *)a2);
        *(_OWORD *)a3 = *(_OWORD *)a2;
        *(_BYTE *)(a3 + 16) = 0;
        *(_BYTE *)(a3 + 40) = 0;
        if (*(_BYTE *)(a2 + 40))
        {
          if (*(char *)(a2 + 39) < 0)
          {
            sub_20E860C04((_BYTE *)(a3 + 16), *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
          }
          else
          {
            *(_OWORD *)(a3 + 16) = *(_OWORD *)(a2 + 16);
            *(_QWORD *)(a3 + 32) = *(_QWORD *)(a2 + 32);
          }
          *(_BYTE *)(a3 + 40) = 1;
        }
        v78 = *(_OWORD *)(a2 + 256);
        *(_OWORD *)(a3 + 240) = *(_OWORD *)(a2 + 240);
        *(_OWORD *)(a3 + 256) = v78;
        *(_BYTE *)(a3 + 272) = *(_BYTE *)(a2 + 272);
        v79 = *(_OWORD *)(a2 + 192);
        *(_OWORD *)(a3 + 176) = *(_OWORD *)(a2 + 176);
        *(_OWORD *)(a3 + 192) = v79;
        v80 = *(_OWORD *)(a2 + 224);
        *(_OWORD *)(a3 + 208) = *(_OWORD *)(a2 + 208);
        *(_OWORD *)(a3 + 224) = v80;
        v81 = *(_OWORD *)(a2 + 128);
        *(_OWORD *)(a3 + 112) = *(_OWORD *)(a2 + 112);
        *(_OWORD *)(a3 + 128) = v81;
        v82 = *(_OWORD *)(a2 + 160);
        *(_OWORD *)(a3 + 144) = *(_OWORD *)(a2 + 144);
        *(_OWORD *)(a3 + 160) = v82;
        v83 = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a3 + 48) = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a3 + 64) = v83;
        v84 = *(_OWORD *)(a2 + 96);
        *(_OWORD *)(a3 + 80) = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(a3 + 96) = v84;
        *(_BYTE *)(a3 + 280) = 0;
        *(_BYTE *)(a3 + 296) = 0;
        if (*(_BYTE *)(a2 + 296))
        {
          v85 = *(_QWORD *)(a2 + 288);
          *(_QWORD *)(a3 + 280) = *(_QWORD *)(a2 + 280);
          *(_QWORD *)(a3 + 288) = v85;
          if (v85)
          {
            v86 = (unint64_t *)(v85 + 8);
            do
              v87 = __ldxr(v86);
            while (__stxr(v87 + 1, v86));
          }
          *(_BYTE *)(a3 + 296) = 1;
        }
        *(_OWORD *)(a3 + 304) = *(_OWORD *)(a2 + 304);
        *(_QWORD *)(a3 + 320) = *(_QWORD *)(a2 + 320);
        *(_BYTE *)(a3 + 328) = 0;
      }
    }
    else
    {
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(_BYTE *)(a3 + 16) = 0;
      *(_BYTE *)(a3 + 40) = 0;
      if (*(_BYTE *)(a2 + 40))
      {
        if (*(char *)(a2 + 39) < 0)
        {
          sub_20E860C04((_BYTE *)(a3 + 16), *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
        }
        else
        {
          *(_OWORD *)(a3 + 16) = *(_OWORD *)(a2 + 16);
          *(_QWORD *)(a3 + 32) = *(_QWORD *)(a2 + 32);
        }
        *(_BYTE *)(a3 + 40) = 1;
      }
      v47 = *(_OWORD *)(a2 + 256);
      *(_OWORD *)(a3 + 240) = *(_OWORD *)(a2 + 240);
      *(_OWORD *)(a3 + 256) = v47;
      *(_BYTE *)(a3 + 272) = *(_BYTE *)(a2 + 272);
      v48 = *(_OWORD *)(a2 + 192);
      *(_OWORD *)(a3 + 176) = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a3 + 192) = v48;
      v49 = *(_OWORD *)(a2 + 224);
      *(_OWORD *)(a3 + 208) = *(_OWORD *)(a2 + 208);
      *(_OWORD *)(a3 + 224) = v49;
      v50 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a3 + 112) = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a3 + 128) = v50;
      v51 = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a3 + 144) = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a3 + 160) = v51;
      v52 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a3 + 48) = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a3 + 64) = v52;
      v53 = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a3 + 80) = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a3 + 96) = v53;
      *(_BYTE *)(a3 + 280) = 0;
      *(_BYTE *)(a3 + 296) = 0;
      if (*(_BYTE *)(a2 + 296))
      {
        v54 = *(_QWORD *)(a2 + 288);
        *(_QWORD *)(a3 + 280) = *(_QWORD *)(a2 + 280);
        *(_QWORD *)(a3 + 288) = v54;
        if (v54)
        {
          v55 = (unint64_t *)(v54 + 8);
          do
            v56 = __ldxr(v55);
          while (__stxr(v56 + 1, v55));
        }
        *(_BYTE *)(a3 + 296) = 1;
      }
      *(_OWORD *)(a3 + 304) = *(_OWORD *)(a2 + 304);
      *(_QWORD *)(a3 + 320) = *(_QWORD *)(a2 + 320);
      *(_BYTE *)(a3 + 328) = 5;
    }
    *(_OWORD *)(a3 + 329) = v88;
    v77 = 1;
    goto LABEL_71;
  }
  v7 = *(_QWORD *)(a2 + 328);
  v8 = *(_QWORD *)(v7 + 4416);
  v9 = *(float64x2_t **)(v7 + 4424);
  if ((float64x2_t *)v8 != v9)
  {
    v10 = *(double *)v8;
    v11 = *(_QWORD *)v8 >> 8;
    v12 = *(unsigned int *)(v8 + 8);
    if ((float64x2_t *)(v8 + 144) != v9)
    {
      _Q1 = *(float64x2_t *)(a2 + 80);
      _Q3 = *(int8x16_t *)(a2 + 48);
      _Q4 = (float64x2_t)vextq_s8(_Q3, (int8x16_t)_Q1, 8uLL);
      _Q3.i64[1] = *(_QWORD *)(a2 + 72);
      v32 = vmlaq_f64(vmlaq_f64(vmulq_f64((float64x2_t)vzip1q_s64((int64x2_t)_Q3, (int64x2_t)_Q4), (float64x2_t)vdupq_n_s64(*(_QWORD *)(a2 + 120) ^ 0x8000000000000000)), (float64x2_t)vdupq_n_s64(*(_QWORD *)(a2 + 128) ^ 0x8000000000000000), (float64x2_t)vzip2q_s64((int64x2_t)_Q3, (int64x2_t)_Q4)), (float64x2_t)vdupq_n_s64(*(_QWORD *)(a2 + 136) ^ 0x8000000000000000), *(float64x2_t *)(a2 + 96));
      _Q3.i64[0] = *(_QWORD *)(a2 + 128) ^ 0x8000000000000000;
      __asm { FMLA            D2, D3, V1.D[1] }
      _Q1.f64[0] = _D2 + *(double *)(a2 + 112) * COERCE_DOUBLE(*(_QWORD *)(a2 + 136) ^ 0x8000000000000000);
      v21.f64[0] = *(float64_t *)(v8 + 32);
      _D6 = *(_QWORD *)(v8 + 96);
      _D16 = *(double *)(v8 + 128);
      _Q17 = *(float64x2_t *)(v8 + 112);
      v25 = vnegq_f64(_Q17);
      v21.f64[1] = *(float64_t *)(v8 + 64);
      v26 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v8 + 16), *(int64x2_t *)(v8 + 48)), v25.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)(v8 + 16), *(int64x2_t *)(v8 + 48)), _Q17, 1), v21, _D16, 0);
      _Q2 = vmulq_f64(*(float64x2_t *)(v8 + 80), v25);
      _Q4.f64[0] = *(float64_t *)(v8 + 88);
      __asm
      {
        FMLS            D2, D4, V17.D[1]
        FMLS            D2, D6, V16.D[0]
      }
      _Q4.f64[0] = v32.f64[0];
      *(_QWORD *)&_Q4.f64[1] = vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL).u64[0];
      *(_QWORD *)&v28 = *(_OWORD *)&vsubq_f64(_Q1, _Q2);
      _D6 = vsubq_f64(_Q4, v26).f64[1];
      __asm { FMLA            D2, D6, V4.D[1] }
      v30 = vmlad_n_f64(_Q2.f64[0], v28, v28);
      v31 = (float64x2_t *)(v8 + 256);
      v32.f64[1] = _Q4.f64[1];
      do
      {
        v34.f64[0] = v31[-5].f64[0];
        _D6 = v31[-1].f64[0];
        _D16 = v31[1].f64[0];
        _Q17 = *v31;
        v38 = vnegq_f64(*v31);
        v34.f64[1] = v31[-3].f64[0];
        v39 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v31[-6], (int64x2_t)v31[-4]), v38.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v31[-6], (int64x2_t)v31[-4]), *v31, 1), v34, _D16, 0);
        _Q3 = vmulq_f64(v31[-2], v38);
        _D4 = v31[-2].f64[1];
        __asm
        {
          FMLS            D3, D4, V17.D[1]
          FMLS            D3, D6, V16.D[0]
        }
        *(_QWORD *)&v42 = *(_OWORD *)&vsubq_f64(_Q1, _Q3);
        _D6 = vsubq_f64(v32, v39).f64[1];
        __asm { FMLA            D3, D6, V4.D[1] }
        v44 = vmlad_n_f64(_Q3.f64[0], v42, v42);
        if (v44 < v30)
        {
          v10 = v31[-7].f64[0];
          v11 = *(_QWORD *)&v10 >> 8;
          v12 = LODWORD(v31[-7].f64[1]);
          v30 = v44;
        }
        v33 = v31 + 2;
        v31 += 9;
      }
      while (v33 != v9);
    }
    *(_QWORD *)&v88 = LOBYTE(v10) | (unint64_t)(v11 << 8);
    *((_QWORD *)&v88 + 1) = v12 << 32;
    goto LABEL_15;
  }
  *(_OWORD *)a3 = *(_OWORD *)a2;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 40) = 0;
  if (*(_BYTE *)(a2 + 40))
  {
    if (*(char *)(a2 + 39) < 0)
    {
      sub_20E860C04((_BYTE *)(a3 + 16), *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
    }
    else
    {
      *(_OWORD *)(a3 + 16) = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(a3 + 32) = *(_QWORD *)(a2 + 32);
    }
    *(_BYTE *)(a3 + 40) = 1;
  }
  v67 = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a3 + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a3 + 256) = v67;
  *(_BYTE *)(a3 + 272) = *(_BYTE *)(a2 + 272);
  v68 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a3 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a3 + 192) = v68;
  v69 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a3 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a3 + 224) = v69;
  v70 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a3 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a3 + 128) = v70;
  v71 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a3 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a3 + 160) = v71;
  v72 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a3 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a3 + 64) = v72;
  v73 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a3 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a3 + 96) = v73;
  *(_BYTE *)(a3 + 280) = 0;
  *(_BYTE *)(a3 + 296) = 0;
  if (*(_BYTE *)(a2 + 296))
  {
    v74 = *(_QWORD *)(a2 + 288);
    *(_QWORD *)(a3 + 280) = *(_QWORD *)(a2 + 280);
    *(_QWORD *)(a3 + 288) = v74;
    if (v74)
    {
      v75 = (unint64_t *)(v74 + 8);
      do
        v76 = __ldxr(v75);
      while (__stxr(v76 + 1, v75));
    }
    *(_BYTE *)(a3 + 296) = 1;
  }
  v77 = 0;
  *(_OWORD *)(a3 + 304) = *(_OWORD *)(a2 + 304);
  *(_QWORD *)(a3 + 320) = *(_QWORD *)(a2 + 320);
  *(_WORD *)(a3 + 328) = 5;
LABEL_71:
  *(_BYTE *)(a3 + 345) = v77;
}

void sub_20EE1A2D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(_BYTE *)(v1 + 40))
  {
    if (*(char *)(v1 + 39) < 0)
    {
      operator delete(*v2);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20EE1A330(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_20EE19BC4(a1 - 56, a2, a3);
}

void sub_20EE1A338(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char __p[18];
  char v10;
  std::string v11;
  std::runtime_error v12;
  int v13;
  std::runtime_error v14;
  int v15;
  char v16;
  char v17;
  _BYTE v18[24];
  int v19;
  _BYTE *v20;
  const char *v21;
  _BYTE *v22;
  const char *v23;
  const char *v24;
  _QWORD *v25;
  __int128 v26;
  void *v27;
  char v28;
  char v29;
  std::__shared_weak_count *v30;
  char v31;
  char v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  sub_20EE23330(a1 + 704, (_QWORD *)a2, (unsigned __int8 **)(a2 + 16), (uint64_t)&v26);
  if (v32)
  {
    v10 = 17;
    strcpy(__p, "Requested By User");
    sub_20EE16850(a1, &v26, (void **)__p);
    if (v10 < 0)
      operator delete(*(void **)__p);
    *(_BYTE *)a3 = 1;
    *(_BYTE *)(a3 + 24) = 1;
  }
  else
  {
    v19 = 0;
    sub_20E878638((uint64_t)&v17, (uint64_t)v18, (uint64_t)&off_24C9EA8B8);
    v20 = v18;
    v21 = "Trying to remove anchor with id ";
    v22 = v18;
    v23 = "Trying to remove anchor with id ";
    v24 = "Trying to remove anchor with id ";
    if (v19 == -1)
      sub_20E877AB8();
    v25 = &v20;
    ((void (*)(_QWORD **, _BYTE *))off_24C9EAE70[v19])(&v25, v18);
    sub_20EE1E7C4((uint64_t)&v16, (uint64_t)v18, (unsigned __int8 *)a2);
    v20 = v18;
    v21 = " that is not found in the map";
    v22 = v18;
    v23 = " that is not found in the map";
    v24 = " that is not found in the map";
    if (v19 == -1)
      sub_20E877AB8();
    v25 = &v20;
    ((void (*)(_QWORD **, _BYTE *))off_24C9EAE88[v19])(&v25, v18);
    if (v19 == -1)
      sub_20E877AB8();
    v20 = &v25;
    ((void (*)(std::string *__return_ptr, _BYTE **, _BYTE *))off_24C9EAEA0[v19])(&v11, &v20, v18);
    if (v19 != -1)
      ((void (*)(_BYTE **, _BYTE *))off_24C9EAE58[v19])(&v20, v18);
    std::runtime_error::runtime_error(&v12, &v11);
    v12.__vftable = (std::runtime_error_vtbl *)&off_24C9EDA58;
    v13 = 0;
    std::runtime_error::runtime_error(&v14, &v12);
    v14.__vftable = (std::runtime_error_vtbl *)&off_24C9EDA58;
    v15 = v13;
    std::runtime_error::runtime_error((std::runtime_error *)a3, &v14);
    *(_QWORD *)a3 = &off_24C9EDA58;
    *(_DWORD *)(a3 + 16) = v15;
    *(_BYTE *)(a3 + 24) = 0;
    std::runtime_error::~runtime_error(&v14);
    std::runtime_error::~runtime_error(&v12);
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v11.__r_.__value_.__l.__data_);
  }
  if (v32)
  {
    if (v31)
    {
      v6 = v30;
      if (v30)
      {
        p_shared_owners = (unint64_t *)&v30->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    if (v29)
    {
      if (v28 < 0)
        operator delete(v27);
    }
  }
}

void sub_20EE1A5EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EE1A66C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (!*(_BYTE *)(a1 + 328))
    return a1;
  if (*(_BYTE *)(a1 + 296))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 288);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  if (!*(_BYTE *)(a1 + 40) || (*(char *)(a1 + 39) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_20EE1A6FC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_20EE1A338(a1 - 112, a2, a3);
}

uint64_t sub_20EE1A704(uint64_t *a1, __int128 *a2)
{
  unint64_t v3;
  uint64_t result;

  v3 = a1[180];
  if (v3 >= a1[181])
  {
    result = sub_20EE1CDE4(a1 + 179, a2);
    a1[180] = result;
  }
  else
  {
    sub_20ECC7618(a1[180], a2);
    result = v3 + 368;
    a1[180] = v3 + 368;
    a1[180] = v3 + 368;
  }
  return result;
}

void sub_20EE1A75C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 1440) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_20EE1A764(uint64_t *a1, __int128 *a2)
{
  unint64_t v3;
  uint64_t result;

  v3 = a1[138];
  if (v3 >= a1[139])
  {
    result = sub_20EE1CDE4(a1 + 137, a2);
    a1[138] = result;
  }
  else
  {
    sub_20ECC7618(a1[138], a2);
    result = v3 + 368;
    a1[138] = v3 + 368;
    a1[138] = v3 + 368;
  }
  return result;
}

void sub_20EE1A7BC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 1104) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_20EE1A7C4(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t *v4;
  unsigned __int8 v5;
  char *v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t j;
  uint64_t *v17;
  unsigned __int8 v18;
  int v20;
  char *v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t k;
  uint64_t v26;
  uint64_t result;
  int v28;
  __uint64_t v29[2];
  uint64_t v30;
  void *v31;
  char v32;
  void *v33;
  char v34;
  char v35;
  void *v36;
  char v37;
  char v38;
  void *v39;
  char v40;
  void *__p;
  char v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  if (*(unsigned __int8 *)(a1 + 1386) == *a2)
    goto LABEL_31;
  v4 = sub_210219C18();
  v5 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    LOWORD(v30) = 0;
    v7 = (char *)_os_log_send_and_compose_impl();
    v8 = strlen(v7);
    v29[0] = 0;
    pthread_threadid_np(0, v29);
    v9 = v29[0];
    timespec_get((timespec *)v29, 1);
    sub_210219E20(&v30, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v4 + 1), (__int128 *)(v4 + 5), "Anchors:Msg:Switching CM mode, clearing user anchors to transmit", 0x40uLL, v7, v8, v9, v29);
    std::mutex::lock(&stru_254A5A410);
    v10 = qword_254A5A458;
    for (i = unk_254A5A460; v10 != i; v10 += 40)
    {
      v12 = *(_QWORD *)(v10 + 32);
      if (!v12)
        sub_20E86D37C();
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v12 + 48))(v12, &v30);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v42 < 0)
    {
      operator delete(__p);
      if ((v40 & 0x80000000) == 0)
      {
LABEL_9:
        if (!v38)
        {
LABEL_15:
          if (v35 && v34 < 0)
            operator delete(v33);
          if (v32 < 0)
            operator delete(v31);
          if (v7)
            free(v7);
          goto LABEL_22;
        }
LABEL_13:
        if (v37 < 0)
          operator delete(v36);
        goto LABEL_15;
      }
    }
    else if ((v40 & 0x80000000) == 0)
    {
      goto LABEL_9;
    }
    operator delete(v39);
    if (!v38)
      goto LABEL_15;
    goto LABEL_13;
  }
LABEL_22:
  if (os_signpost_enabled((os_log_t)*v4))
  {
    LOWORD(v30) = 0;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  if (*(_QWORD *)(a1 + 904))
  {
    v13 = *(_QWORD **)(a1 + 896);
    if (v13)
    {
      do
      {
        v14 = (_QWORD *)*v13;
        operator delete(v13);
        v13 = v14;
      }
      while (v14);
    }
    *(_QWORD *)(a1 + 896) = 0;
    v15 = *(_QWORD *)(a1 + 888);
    if (v15)
    {
      for (j = 0; j != v15; ++j)
        *(_QWORD *)(*(_QWORD *)(a1 + 880) + 8 * j) = 0;
    }
    *(_QWORD *)(a1 + 904) = 0;
  }
LABEL_31:
  v17 = sub_210219C18();
  v18 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    v20 = *a2;
    LODWORD(v30) = 67109120;
    HIDWORD(v30) = v20;
    v21 = (char *)_os_log_send_and_compose_impl();
    v22 = strlen(v21);
    v29[0] = 0;
    pthread_threadid_np(0, v29);
    v23 = v29[0];
    timespec_get((timespec *)v29, 1);
    sub_210219E20(&v30, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v17 + 1), (__int128 *)(v17 + 5), "Anchors:Msg:CM is now %d", 0x18uLL, v21, v22, v23, v29);
    std::mutex::lock(&stru_254A5A410);
    v24 = qword_254A5A458;
    for (k = unk_254A5A460; v24 != k; v24 += 40)
    {
      v26 = *(_QWORD *)(v24 + 32);
      if (!v26)
        sub_20E86D37C();
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v26 + 48))(v26, &v30);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v42 < 0)
    {
      operator delete(__p);
      if ((v40 & 0x80000000) == 0)
      {
LABEL_38:
        if (!v38)
        {
LABEL_44:
          if (v35 && v34 < 0)
            operator delete(v33);
          if (v32 < 0)
            operator delete(v31);
          if (v21)
            free(v21);
          goto LABEL_51;
        }
LABEL_42:
        if (v37 < 0)
          operator delete(v36);
        goto LABEL_44;
      }
    }
    else if ((v40 & 0x80000000) == 0)
    {
      goto LABEL_38;
    }
    operator delete(v39);
    if (!v38)
      goto LABEL_44;
    goto LABEL_42;
  }
LABEL_51:
  result = os_signpost_enabled((os_log_t)*v17);
  if ((_DWORD)result)
  {
    v28 = *a2;
    LODWORD(v30) = 67109120;
    HIDWORD(v30) = v28;
    result = _os_signpost_emit_unreliably_with_name_impl();
  }
  *(_BYTE *)(a1 + 1386) = 0;
  return result;
}

void sub_20EE1AD20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  void *v47;

  if (a47 < 0)
  {
    operator delete(__p);
    if ((a41 & 0x80000000) == 0)
    {
LABEL_3:
      if (!a35)
        goto LABEL_9;
LABEL_7:
      if (a34 < 0)
        operator delete(a29);
LABEL_9:
      if (a28 && a27 < 0)
        operator delete(a22);
      if (a21 < 0)
        operator delete(a16);
      if (v47)
      {
        free(v47);
        _Unwind_Resume(exception_object);
      }
      _Unwind_Resume(exception_object);
    }
  }
  else if ((a41 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a36);
  if (!a35)
    goto LABEL_9;
  goto LABEL_7;
}

uint64_t sub_20EE1AE78(uint64_t a1, unsigned __int8 *a2)
{
  return sub_20EE1A7C4(a1 - 280, a2);
}

void sub_20EE1AE80(uint64_t a1, uint64_t **a2)
{
  _OWORD *v4;
  char *v5;
  char *v6;
  char *v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  char *v13;

  sub_20EE243C4(a1 + 704, a2, &__p);
  v4 = __p;
  v5 = v13;
  if (__p != v13)
  {
    do
    {
      sub_20EE1AFCC(a1, (uint64_t)v4 + 328, v4);
      v4 = (_OWORD *)((char *)v4 + 344);
    }
    while (v4 != (_OWORD *)v5);
  }
  (*(void (**)(uint64_t, uint64_t **))(*(_QWORD *)a1 + 88))(a1, a2 + 3);
  v6 = (char *)__p;
  if (__p)
  {
    v7 = v13;
    v8 = __p;
    if (v13 == __p)
    {
LABEL_18:
      v13 = v6;
      operator delete(v8);
      return;
    }
    while (1)
    {
      if (!*(v7 - 48))
        goto LABEL_21;
      v9 = (std::__shared_weak_count *)*((_QWORD *)v7 - 7);
      if (!v9)
        goto LABEL_21;
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
        if (*(v7 - 304))
        {
LABEL_13:
          if (*(v7 - 305) < 0)
            operator delete(*((void **)v7 - 41));
        }
      }
      else
      {
LABEL_21:
        if (*(v7 - 304))
          goto LABEL_13;
      }
      v7 -= 344;
      if (v7 == v6)
      {
        v8 = __p;
        goto LABEL_18;
      }
    }
  }
}

void sub_20EE1AFA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20EE1B3E8((void **)va);
  _Unwind_Resume(a1);
}

void sub_20EE1AFB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20EE1B3E8((void **)va);
  _Unwind_Resume(a1);
}

void sub_20EE1AFCC(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  unint64_t v3;
  uint64_t *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  void *v24;
  _QWORD *v25;
  unint64_t v26;
  float v27;
  float v28;
  _BOOL8 v29;
  unint64_t v30;
  unint64_t v31;
  size_t prime;
  unint64_t v33;
  uint8x8_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  void *v42;
  void *v43[2];
  void *__p[2];
  int v45;
  _QWORD *v46;
  uint64_t v47;
  char v48;

  v7 = (uint64_t *)(a1 + 840);
  v8 = sub_20EE1CCB4((_QWORD *)(a1 + 840), a2);
  if (v8)
  {
    sub_20EE1EF38((uint64_t)(v8 + 4), (uint64_t)a3, a3);
    return;
  }
  *(_OWORD *)v43 = 0u;
  *(_OWORD *)__p = 0u;
  v45 = 1065353216;
  sub_20EE1EF38((uint64_t)v43, (uint64_t)a3, a3);
  v9 = sub_2102322B4((unsigned __int8 *)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 848);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(_QWORD **)(*v7 + 8 * v3);
    if (v13)
    {
      v14 = (_QWORD *)*v13;
      if (v14)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v18 = v14[1];
            if (v18 == v9)
            {
              if (v14[2] == *(_QWORD *)a2 && v14[3] == *(_QWORD *)(a2 + 8))
                goto LABEL_75;
            }
            else if ((v18 & (v11 - 1)) != v3)
            {
              goto LABEL_30;
            }
            v14 = (_QWORD *)*v14;
            if (!v14)
              goto LABEL_30;
          }
        }
        do
        {
          v16 = v14[1];
          if (v16 == v9)
          {
            if (v14[2] == *(_QWORD *)a2 && v14[3] == *(_QWORD *)(a2 + 8))
              goto LABEL_75;
          }
          else
          {
            if (v16 >= v11)
              v16 %= v11;
            if (v16 != v3)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_30:
  v19 = operator new(0x48uLL);
  v20 = v19;
  v21 = (_QWORD *)(a1 + 856);
  v46 = v19;
  v47 = a1 + 856;
  *v19 = 0;
  v19[1] = v10;
  *((_OWORD *)v19 + 1) = *(_OWORD *)a2;
  v22 = v43[0];
  v23 = (unint64_t)v43[1];
  v43[0] = 0;
  v43[1] = 0;
  v19[4] = v22;
  v19[5] = v23;
  v25 = __p[0];
  v24 = __p[1];
  v19[6] = __p[0];
  v19[7] = v24;
  *((_DWORD *)v19 + 16) = v45;
  if (v24)
  {
    v26 = v25[1];
    if ((v23 & (v23 - 1)) != 0)
    {
      if (v26 >= v23)
        v26 %= v23;
    }
    else
    {
      v26 &= v23 - 1;
    }
    v22[v26] = v19 + 6;
    __p[0] = 0;
    __p[1] = 0;
  }
  v48 = 1;
  v27 = (float)(unint64_t)(*(_QWORD *)(a1 + 864) + 1);
  v28 = *(float *)(a1 + 872);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    v29 = 1;
    if (v11 >= 3)
      v29 = (v11 & (v11 - 1)) != 0;
    v30 = v29 | (2 * v11);
    v31 = vcvtps_u32_f32(v27 / v28);
    if (v30 <= v31)
      prime = v31;
    else
      prime = v30;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v11 = *(_QWORD *)(a1 + 848);
    }
    if (prime > v11)
      goto LABEL_48;
    if (prime < v11)
    {
      v33 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 864) / *(float *)(a1 + 872));
      if (v11 < 3 || (v34 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        v33 = std::__next_prime(v33);
      }
      else
      {
        v35 = 1 << -(char)__clz(v33 - 1);
        if (v33 >= 2)
          v33 = v35;
      }
      if (prime <= v33)
        prime = v33;
      if (prime < v11)
LABEL_48:
        sub_20E8D2B3C((uint64_t)v7, prime);
    }
    v11 = *(_QWORD *)(a1 + 848);
    v36 = v11 - 1;
    if ((v11 & (v11 - 1)) == 0)
    {
      v3 = v36 & v10;
      v37 = *v7;
      v38 = *(_QWORD **)(*v7 + 8 * (v36 & v10));
      if (!v38)
        goto LABEL_67;
LABEL_65:
      *v20 = *v38;
      goto LABEL_73;
    }
    if (v10 >= v11)
    {
      v3 = v10 % v11;
      v37 = *v7;
      v38 = *(_QWORD **)(*v7 + 8 * (v10 % v11));
      if (v38)
        goto LABEL_65;
      goto LABEL_67;
    }
    v3 = v10;
  }
  v37 = *v7;
  v38 = *(_QWORD **)(*v7 + 8 * v3);
  if (v38)
    goto LABEL_65;
LABEL_67:
  *v20 = *v21;
  *v21 = v20;
  *(_QWORD *)(v37 + 8 * v3) = v21;
  if (!*v20)
    goto LABEL_74;
  v39 = *(_QWORD *)(*v20 + 8);
  if ((v11 & (v11 - 1)) != 0)
  {
    if (v39 >= v11)
      v39 %= v11;
  }
  else
  {
    v39 &= v11 - 1;
  }
  v38 = (_QWORD *)(*v7 + 8 * v39);
LABEL_73:
  *v38 = v20;
LABEL_74:
  ++*(_QWORD *)(a1 + 864);
LABEL_75:
  v40 = __p[0];
  if (__p[0])
  {
    do
    {
      v41 = (_QWORD *)*v40;
      operator delete(v40);
      v40 = v41;
    }
    while (v41);
  }
  v42 = v43[0];
  v43[0] = 0;
  if (v42)
    operator delete(v42);
}

void sub_20EE1B3B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  sub_20E96A09C((uint64_t)&a14);
  sub_20E8C25A8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EE1B3D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E8C25A8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void **sub_20EE1B3E8(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 == v2)
    {
LABEL_16:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      if (!*(v3 - 48))
        goto LABEL_20;
      v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 7);
      if (!v5)
        goto LABEL_20;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
        if (*(v3 - 304))
        {
LABEL_11:
          if (*(v3 - 305) < 0)
            operator delete(*((void **)v3 - 41));
        }
      }
      else
      {
LABEL_20:
        if (*(v3 - 304))
          goto LABEL_11;
      }
      v3 -= 344;
      if (v3 == v2)
      {
        v4 = *a1;
        goto LABEL_16;
      }
    }
  }
  return a1;
}

void sub_20EE1B4BC(uint64_t a1, uint64_t **a2)
{
  sub_20EE1AE80(a1 - 392, a2);
}

uint64_t sub_20EE1B4C4(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  unsigned __int8 v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned __int8 v8;
  _BYTE v10[7];
  _QWORD v11[3];
  _QWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  _BYTE v24[15];
  char v25;
  _BYTE v26[7];
  char v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _BYTE v41[31];
  char v42;
  void *v43;
  char v44;
  char v45;
  char v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  _BYTE v60[31];
  _BYTE v61[23];

  *(_QWORD *)&v61[15] = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 704;
  v5 = atomic_load((unsigned __int8 *)&qword_254A51318);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_254A51318))
  {
    xmmword_254A51308 = 0uLL;
    __cxa_guard_release(&qword_254A51318);
  }
  if (qword_254A51320 != -1)
    dispatch_once(&qword_254A51320, &unk_24C9EAD40);
  v13 = xmmword_254A51308;
  v14 = xmmword_254A51308;
  v39 = v58;
  v40 = v59;
  *(_OWORD *)v41 = *(_OWORD *)v60;
  *(_OWORD *)&v41[15] = *(_OWORD *)&v60[15];
  v35 = v54;
  v36 = v55;
  v37 = v56;
  v38 = v57;
  v31 = v50;
  v32 = v51;
  v15 = xmmword_21037ABE8;
  v16 = unk_21037ABF8;
  v33 = v52;
  v34 = v53;
  v28 = v47;
  v29 = v48;
  v17 = xmmword_21037AC08;
  v18 = unk_21037AC18;
  v19 = 0x3FF0000000000000;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  *(_QWORD *)v24 = *(_QWORD *)v61;
  *(_QWORD *)&v24[7] = *(_QWORD *)&v61[7];
  v25 = 0;
  *(_DWORD *)v26 = *(_DWORD *)v10;
  *(_DWORD *)&v26[3] = *(_DWORD *)&v10[3];
  v27 = 0;
  v30 = v49;
  v42 = 0;
  LOBYTE(v43) = 0;
  v45 = 0;
  v46 = 1;
  v11[0] = &off_24C9EAEC8;
  v11[1] = a1;
  v12 = v11;
  sub_20EE208E0(v4, (uint64_t)&v13, (uint64_t)v11);
  v6 = v12;
  if (v12 == v11)
  {
    v7 = 4;
    v6 = v11;
    goto LABEL_8;
  }
  if (v12)
  {
    v7 = 5;
LABEL_8:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  if (v46 && v45 && v44 < 0)
    operator delete(v43);
  v8 = atomic_load((unsigned __int8 *)&qword_254A51318);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_254A51318))
  {
    xmmword_254A51308 = 0uLL;
    __cxa_guard_release(&qword_254A51318);
  }
  if (qword_254A51320 != -1)
    dispatch_once(&qword_254A51320, &unk_24C9EAD40);
  v13 = xmmword_254A51308;
  v14 = xmmword_254A51308;
  v15 = xmmword_21037ABE8;
  v16 = unk_21037ABF8;
  v17 = xmmword_21037AC08;
  v18 = unk_21037AC18;
  v19 = 0x3FF0000000000000;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  *(_QWORD *)v24 = *(_QWORD *)v61;
  *(_QWORD *)&v24[7] = *(_QWORD *)&v61[7];
  v25 = 0;
  *(_DWORD *)v26 = *(_DWORD *)v10;
  *(_DWORD *)&v26[3] = *(_DWORD *)&v10[3];
  v27 = 0;
  v39 = v58;
  v40 = v59;
  *(_OWORD *)v41 = *(_OWORD *)v60;
  *(_OWORD *)&v41[15] = *(_OWORD *)&v60[15];
  v35 = v54;
  v36 = v55;
  v37 = v56;
  v38 = v57;
  v31 = v50;
  v32 = v51;
  v33 = v52;
  v34 = v53;
  v28 = v47;
  v29 = v48;
  v30 = v49;
  v42 = 0;
  LOBYTE(v43) = 0;
  v45 = 0;
  v46 = 1;
  sub_20EE19264(v4, (uint64_t)&v13);
  if (v46 && v45 && v44 < 0)
    operator delete(v43);
  v13 = *a2;
  LOBYTE(v14) = 1;
  return (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 88))(a1, &v13);
}

void sub_20EE1B86C(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (LOBYTE(STACK[0x220]) && LOBYTE(STACK[0x218]) && SLOBYTE(STACK[0x217]) < 0)
    operator delete(*(void **)(v1 + 400));
  _Unwind_Resume(a1);
}

uint64_t sub_20EE1B8CC(uint64_t a1, __int128 *a2)
{
  return sub_20EE1B4C4(a1 - 504, a2);
}

void sub_20EE1B8D4(_QWORD *a1, uint64_t a2)
{
  _OWORD *v4;
  unint64_t v5;
  _OWORD *v6;
  _OWORD **v7;
  _OWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;

  if (*(_BYTE *)(a2 + 16))
  {
    v4 = (_OWORD *)a1[116];
    v5 = a1[117];
    if ((unint64_t)v4 >= v5)
    {
      v7 = (_OWORD **)(a1 + 115);
      v8 = (_OWORD *)a1[115];
      v9 = v4 - v8;
      v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 60)
        sub_20E969238();
      v11 = v5 - (_QWORD)v8;
      if (v11 >> 3 > v10)
        v10 = v11 >> 3;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
        v12 = 0xFFFFFFFFFFFFFFFLL;
      else
        v12 = v10;
      if (v12)
      {
        if (v12 >> 60)
          sub_20E877A38();
        v13 = (char *)operator new(16 * v12);
      }
      else
      {
        v13 = 0;
      }
      v14 = &v13[16 * v9];
      *(_OWORD *)v14 = *(_OWORD *)a2;
      v6 = v14 + 16;
      if (v4 != v8)
      {
        do
        {
          *((_OWORD *)v14 - 1) = *(v4 - 1);
          v14 -= 16;
          --v4;
        }
        while (v4 != v8);
        v4 = *v7;
      }
      a1[115] = v14;
      a1[116] = v6;
      a1[117] = &v13[16 * v12];
      if (v4)
        operator delete(v4);
    }
    else
    {
      *v4 = *(_OWORD *)a2;
      v6 = v4 + 1;
    }
    a1[116] = v6;
  }
}

void sub_20EE1B9F0(uint64_t a1, uint64_t a2)
{
  sub_20EE1B8D4((_QWORD *)(a1 - 448), a2);
}

void sub_20EE1B9F8(uint64_t a1@<X0>, unsigned __int8 **a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  void *v7;
  char *v8;
  char *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  char *v14;

  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    v6 = a1 + 704;
    while (1)
    {
      sub_20EE23CD4(v6, v4, &__p);
      v8 = (char *)__p;
      if (!__p)
        goto LABEL_5;
      v9 = v14;
      v7 = __p;
      if (v14 != __p)
        break;
LABEL_4:
      v14 = v8;
      operator delete(v7);
LABEL_5:
      v4 += 24;
      if (v4 == v5)
        goto LABEL_20;
    }
    while (1)
    {
      if (!*(v9 - 32))
        goto LABEL_23;
      v10 = (std::__shared_weak_count *)*((_QWORD *)v9 - 5);
      if (!v10)
        goto LABEL_23;
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
        if (*(v9 - 288))
        {
LABEL_16:
          if (*(v9 - 289) < 0)
            operator delete(*((void **)v9 - 39));
        }
      }
      else
      {
LABEL_23:
        if (*(v9 - 288))
          goto LABEL_16;
      }
      v9 -= 328;
      if (v9 == v8)
      {
        v7 = __p;
        goto LABEL_4;
      }
    }
  }
LABEL_20:
  *a3 = 1;
  a3[24] = 1;
}

void sub_20EE1BB1C(uint64_t a1@<X0>, unsigned __int8 **a2@<X1>, _BYTE *a3@<X8>)
{
  sub_20EE1B9F8(a1 - 560, a2, a3);
}

uint64_t sub_20EE1BB24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  void *p_p;
  unint64_t v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  size_t v22;
  char *v23;
  const void *v24;
  uint64_t v25;
  void *v26;
  void *__p;
  size_t v29;
  int64_t v30;
  _QWORD v31[2];
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const void *v36;
  uint64_t v37;
  const void *v38;
  unint64_t v39;
  __int128 v40;
  __int128 v41;
  int v42;
  uint64_t v43[19];
  char v44[9];

  v6 = MEMORY[0x24BEDB870];
  v7 = MEMORY[0x24BEDB870] + 64;
  v8 = (uint64_t *)MEMORY[0x24BEDB800];
  v9 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  v10 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v43[0] = MEMORY[0x24BEDB870] + 64;
  v34 = v9;
  *(uint64_t *)((char *)&v34 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = (std::ios_base *)((char *)&v34 + *(_QWORD *)(v34 - 24));
  std::ios_base::init(v11, &v35);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v34 = v6 + 24;
  v43[0] = v7;
  std::streambuf::basic_streambuf();
  v12 = MEMORY[0x24BEDB848];
  v35 = MEMORY[0x24BEDB848] + 16;
  v40 = 0u;
  v41 = 0u;
  v42 = 16;
  v31[1] = 1;
  v13 = operator new();
  *(_QWORD *)v13 = &v34;
  *(_QWORD *)(v13 + 8) = &v34;
  *(_BYTE *)(v13 + 16) = 0;
  *(_BYTE *)(v13 + 40) = 0;
  *(_BYTE *)(v13 + 48) = 0;
  *(_BYTE *)(v13 + 72) = 0;
  *(_QWORD *)(v13 + 88) = 0;
  *(_QWORD *)(v13 + 96) = 0;
  *(_QWORD *)(v13 + 80) = 0;
  v31[0] = &off_24C9B4468;
  v32 = &unk_24C9B45B8;
  v33 = v13;
  v14 = *(unsigned __int8 *)(a2 + 23);
  if ((v14 & 0x80u) != 0)
    v14 = *(_QWORD *)(a2 + 8);
  if (v14 && (sub_20E9F5254((uint64_t)&__p, v13 + 8, a2), v13 = v33, *(_BYTE *)(v33 + 40)))
  {
    __p = (void *)(v33 + 16);
    sub_20E9F3D4C((uint64_t **)&__p, 2u);
  }
  else
  {
    sub_20E9F3FC0((uint64_t)&__p, v13 + 8);
  }
  sub_20EE1F268((uint64_t)v44, (uint64_t)v31, a1);
  if ((v42 & 0x10) != 0)
  {
    v17 = *((_QWORD *)&v41 + 1);
    if (*((_QWORD *)&v41 + 1) < v39)
    {
      *((_QWORD *)&v41 + 1) = v39;
      v17 = v39;
    }
    v18 = v38;
    v15 = v17 - (_QWORD)v38;
    if (v17 - (unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_43;
  }
  else
  {
    if ((v42 & 8) == 0)
    {
      v15 = 0;
      HIBYTE(v30) = 0;
      p_p = &__p;
      goto LABEL_20;
    }
    v18 = v36;
    v15 = v37 - (_QWORD)v36;
    if ((unint64_t)(v37 - (_QWORD)v36) >= 0x7FFFFFFFFFFFFFF8)
LABEL_43:
      sub_20E860B7C();
  }
  if (v15 >= 0x17)
  {
    v19 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v19 = v15 | 7;
    v20 = v19 + 1;
    p_p = operator new(v19 + 1);
    v29 = v15;
    v30 = v20 | 0x8000000000000000;
    __p = p_p;
    goto LABEL_19;
  }
  HIBYTE(v30) = v15;
  p_p = &__p;
  if (v15)
LABEL_19:
    memmove(p_p, v18, v15);
LABEL_20:
  *((_BYTE *)p_p + v15) = 0;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v21 = SHIBYTE(v30);
  if (v30 >= 0)
    v22 = HIBYTE(v30);
  else
    v22 = v29;
  if (v22)
  {
    if ((v22 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v23 = (char *)operator new(v22);
    bzero(v23, v22);
    *a3 = v23;
    a3[1] = &v23[v22];
    a3[2] = &v23[v22];
    if (v21 >= 0)
      v24 = &__p;
    else
      v24 = __p;
    memmove(v23, v24, v22);
  }
  if (v21 < 0)
    operator delete(__p);
  v31[0] = &off_24C9B7040;
  v25 = v33;
  v32 = &unk_24C9B7190;
  v33 = 0;
  if (v25)
  {
    v26 = *(void **)(v25 + 80);
    if (v26)
    {
      *(_QWORD *)(v25 + 88) = v26;
      operator delete(v26);
    }
    if (*(_BYTE *)(v25 + 72))
      free(*(void **)(v25 + 56));
    if (*(_BYTE *)(v25 + 40))
      free(*(void **)(v25 + 24));
    MEMORY[0x212BC6398](v25, 0x1030C408C1A3048);
  }
  v34 = *v8;
  *(uint64_t *)((char *)&v34 + *(_QWORD *)(v34 - 24)) = v8[3];
  v35 = v12 + 16;
  if (SBYTE7(v41) < 0)
    operator delete((void *)v40);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x212BC6290](v43);
}

void sub_20EE1BECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20E9977BC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EE1BEE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x212BC6290](v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE1BF6C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 360) && *(char *)(a1 + 359) < 0)
  {
    operator delete(*(void **)(a1 + 336));
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 47) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_20EE1BFCC(__int128 *__src, __int128 *a2, uint64_t a3)
{
  unint64_t v3;
  __int128 *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v14;
  uint64_t v16;
  _QWORD *v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  BOOL v31;
  __int128 v33;
  _BYTE v34[377];
  __int128 __p;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  if (__src != a2)
  {
    v5 = __src;
    v6 = (_QWORD *)(a3 + 16);
    while (1)
    {
      v33 = *v5;
      memcpy(v34, v5, sizeof(v34));
      LOBYTE(__p) = 0;
      v37 = 0;
      if (*((_BYTE *)v5 + 408))
      {
        if (*((char *)v5 + 407) < 0)
        {
          sub_20E860C04(&__p, *((void **)v5 + 48), *((_QWORD *)v5 + 49));
        }
        else
        {
          __p = v5[24];
          v36 = *((_QWORD *)v5 + 50);
        }
        v37 = 1;
      }
      v38 = 1;
      v7 = sub_2102322B4((unsigned __int8 *)&v33);
      v8 = v7;
      v9 = *(_QWORD *)(a3 + 8);
      if (v9)
      {
        v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
        v10.i16[0] = vaddlv_u8(v10);
        if (v10.u32[0] > 1uLL)
        {
          v3 = v7;
          if (v7 >= v9)
            v3 = v7 % v9;
        }
        else
        {
          v3 = (v9 - 1) & v7;
        }
        v11 = *(_QWORD **)(*(_QWORD *)a3 + 8 * v3);
        if (v11)
        {
          v12 = (_QWORD *)*v11;
          if (v12)
          {
            if (v10.u32[0] < 2uLL)
            {
              while (1)
              {
                v16 = v12[1];
                if (v16 == v7)
                {
                  if (v12[2] == (_QWORD)v33 && v12[3] == *((_QWORD *)&v33 + 1))
                    goto LABEL_78;
                }
                else if ((v16 & (v9 - 1)) != v3)
                {
                  goto LABEL_35;
                }
                v12 = (_QWORD *)*v12;
                if (!v12)
                  goto LABEL_35;
              }
            }
            do
            {
              v14 = v12[1];
              if (v14 == v7)
              {
                if (v12[2] == (_QWORD)v33 && v12[3] == *((_QWORD *)&v33 + 1))
                  goto LABEL_78;
              }
              else
              {
                if (v14 >= v9)
                  v14 %= v9;
                if (v14 != v3)
                  break;
              }
              v12 = (_QWORD *)*v12;
            }
            while (v12);
          }
        }
      }
LABEL_35:
      v17 = operator new(0x1C8uLL);
      *v17 = 0;
      v17[1] = v8;
      *((_OWORD *)v17 + 1) = v33;
      *((_BYTE *)v17 + 32) = 0;
      *((_BYTE *)v17 + 448) = 0;
      if (v38)
      {
        memcpy(v17 + 4, v34, 0x179uLL);
        *((_BYTE *)v17 + 416) = 0;
        *((_BYTE *)v17 + 440) = 0;
        if (v37)
        {
          *((_OWORD *)v17 + 26) = __p;
          v17[54] = v36;
          v36 = 0;
          __p = 0uLL;
          *((_BYTE *)v17 + 440) = 1;
        }
        *((_BYTE *)v17 + 448) = 1;
      }
      v18 = (float)(unint64_t)(*(_QWORD *)(a3 + 24) + 1);
      v19 = *(float *)(a3 + 32);
      if (v9 && (float)(v19 * (float)v9) >= v18)
        goto LABEL_67;
      v20 = (v9 & (v9 - 1)) != 0;
      if (v9 < 3)
        v20 = 1;
      v21 = v20 | (2 * v9);
      v22 = vcvtps_u32_f32(v18 / v19);
      if (v21 <= v22)
        prime = v22;
      else
        prime = v21;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
        v9 = *(_QWORD *)(a3 + 8);
      }
      if (prime > v9)
        goto LABEL_51;
      if (prime < v9)
      {
        v24 = vcvtps_u32_f32((float)*(unint64_t *)(a3 + 24) / *(float *)(a3 + 32));
        if (v9 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
        {
          v24 = std::__next_prime(v24);
        }
        else
        {
          v26 = 1 << -(char)__clz(v24 - 1);
          if (v24 >= 2)
            v24 = v26;
        }
        if (prime <= v24)
          prime = v24;
        if (prime < v9)
LABEL_51:
          sub_20E8D2B3C(a3, prime);
      }
      v9 = *(_QWORD *)(a3 + 8);
      v27 = v9 - 1;
      if ((v9 & (v9 - 1)) == 0)
      {
        v3 = v27 & v8;
        v28 = *(_QWORD *)a3;
        v29 = *(_QWORD **)(*(_QWORD *)a3 + 8 * (v27 & v8));
        if (v29)
          goto LABEL_68;
        goto LABEL_70;
      }
      if (v8 < v9)
        break;
      v3 = v8 % v9;
      v28 = *(_QWORD *)a3;
      v29 = *(_QWORD **)(*(_QWORD *)a3 + 8 * (v8 % v9));
      if (v29)
      {
LABEL_68:
        *v17 = *v29;
        goto LABEL_76;
      }
LABEL_70:
      *v17 = *v6;
      *v6 = v17;
      *(_QWORD *)(v28 + 8 * v3) = v6;
      if (!*v17)
        goto LABEL_77;
      v30 = *(_QWORD *)(*v17 + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v30 >= v9)
          v30 %= v9;
      }
      else
      {
        v30 &= v9 - 1;
      }
      v29 = (_QWORD *)(*(_QWORD *)a3 + 8 * v30);
LABEL_76:
      *v29 = v17;
LABEL_77:
      ++*(_QWORD *)(a3 + 24);
LABEL_78:
      if (v38)
        v31 = v37 == 0;
      else
        v31 = 1;
      if (!v31 && SHIBYTE(v36) < 0)
        operator delete((void *)__p);
      v5 += 26;
      if (v5 == a2)
        return;
    }
    v3 = v8;
LABEL_67:
    v28 = *(_QWORD *)a3;
    v29 = *(_QWORD **)(*(_QWORD *)a3 + 8 * v3);
    if (v29)
      goto LABEL_68;
    goto LABEL_70;
  }
}

void sub_20EE1C3FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *__p)
{
  char a68;
  char a69;

  if (a69)
  {
    if (a68 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20EE1C440(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;

  v2 = *(_QWORD **)(a1 + 16);
  while (v2)
  {
    v5 = v2;
    v2 = (_QWORD *)*v2;
    if (*((_BYTE *)v5 + 448) && *((_BYTE *)v5 + 440) && *((char *)v5 + 439) < 0)
      operator delete((void *)v5[52]);
    operator delete(v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void sub_20EE1C4BC(uint64_t a1)
{
  sub_20EE1E3C8(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE1C4E0(uint64_t a1)
{
  return sub_20EE1E3C8(a1 - 56);
}

void sub_20EE1C4E8(uint64_t a1)
{
  sub_20EE1E3C8(a1 - 56);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE1C510(uint64_t a1)
{
  return sub_20EE1E3C8(a1 - 112);
}

void sub_20EE1C518(uint64_t a1)
{
  sub_20EE1E3C8(a1 - 112);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE1C540(uint64_t a1)
{
  return sub_20EE1E3C8(a1 - 168);
}

void sub_20EE1C548(uint64_t a1)
{
  sub_20EE1E3C8(a1 - 168);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE1C570(uint64_t a1)
{
  return sub_20EE1E3C8(a1 - 224);
}

void sub_20EE1C578(uint64_t a1)
{
  sub_20EE1E3C8(a1 - 224);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE1C5A0(uint64_t a1)
{
  return sub_20EE1E3C8(a1 - 280);
}

void sub_20EE1C5A8(uint64_t a1)
{
  sub_20EE1E3C8(a1 - 280);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE1C5D0(uint64_t a1)
{
  return sub_20EE1E3C8(a1 - 336);
}

void sub_20EE1C5D8(uint64_t a1)
{
  sub_20EE1E3C8(a1 - 336);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE1C600(uint64_t a1)
{
  return sub_20EE1E3C8(a1 - 392);
}

void sub_20EE1C608(uint64_t a1)
{
  sub_20EE1E3C8(a1 - 392);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE1C630(uint64_t a1)
{
  return sub_20EE1E3C8(a1 - 448);
}

void sub_20EE1C638(uint64_t a1)
{
  sub_20EE1E3C8(a1 - 448);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE1C660(uint64_t a1)
{
  return sub_20EE1E3C8(a1 - 504);
}

void sub_20EE1C668(uint64_t a1)
{
  sub_20EE1E3C8(a1 - 504);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE1C690(uint64_t a1)
{
  return sub_20EE1E3C8(a1 - 560);
}

void sub_20EE1C698(uint64_t a1)
{
  sub_20EE1E3C8(a1 - 560);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE1C758(uint64_t a1)
{
  char *v2;
  void *v3;
  char *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;

  v2 = *(char **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = *(char **)v2;
      v6 = (_QWORD *)*((_QWORD *)v2 + 7);
      if (v6)
      {
        do
        {
          v7 = (_QWORD *)*v6;
          operator delete(v6);
          v6 = v7;
        }
        while (v7);
      }
      v8 = (void *)*((_QWORD *)v2 + 5);
      *((_QWORD *)v2 + 5) = 0;
      if (v8)
        operator delete(v8);
      if (v2[39] < 0)
        operator delete(*((void **)v2 + 2));
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void sub_20EE1C7E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(_QWORD *)(a1 + 440);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 448);
    v4 = *(void **)(a1 + 440);
    if (v3 == v2)
    {
LABEL_16:
      *(_QWORD *)(a1 + 448) = v2;
      operator delete(v4);
      goto LABEL_17;
    }
    while (1)
    {
      if (!*(_BYTE *)(v3 - 32))
        goto LABEL_24;
      v5 = *(std::__shared_weak_count **)(v3 - 40);
      if (!v5)
        goto LABEL_24;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
        if (*(_BYTE *)(v3 - 288))
        {
LABEL_11:
          if (*(char *)(v3 - 289) < 0)
            operator delete(*(void **)(v3 - 312));
        }
      }
      else
      {
LABEL_24:
        if (*(_BYTE *)(v3 - 288))
          goto LABEL_11;
      }
      v3 -= 328;
      if (v3 == v2)
      {
        v4 = *(void **)(a1 + 440);
        goto LABEL_16;
      }
    }
  }
LABEL_17:
  if (*(_BYTE *)(a1 + 432) && *(_BYTE *)(a1 + 424) && *(char *)(a1 + 423) < 0)
    operator delete(*(void **)(a1 + 400));
}

void sub_20EE1C8E4()
{
  void *__p;
  __int128 v1;
  __int128 v2;
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  __p = operator new(0x28uLL);
  v1 = xmmword_2102E0950;
  strcpy((char *)__p, "FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF");
  sub_210232668((unsigned __int8 *)&__p, (uint64_t)&v2);
  xmmword_254A51308 = v2;
  if (SHIBYTE(v1) < 0)
    operator delete(__p);
}

void sub_20EE1C994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char **sub_20EE1C9B0(char ***a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char **v9;
  __int128 v10;
  char **v11;
  char **v12;
  char **v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  char **v17;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555)
    sub_20E867F44();
  if (0x5555555555555556 * (((char *)a1[2] - (char *)*a1) >> 4) > v4)
    v4 = 0x5555555555555556 * (((char *)a1[2] - (char *)*a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a1[2] - (char *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v6 = 0x555555555555555;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x555555555555555)
      sub_20E877A38();
    v7 = (char *)operator new(48 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[48 * v3];
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  v9 = (char **)&v7[48 * v6];
  v10 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)(v8 + 24) = v10;
  *((_QWORD *)v8 + 5) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v11 = (char **)(v8 + 48);
  v12 = *a1;
  v13 = a1[1];
  if (v13 == *a1)
  {
    *a1 = (char **)v8;
    a1[1] = v11;
    a1[2] = v9;
    if (!v13)
      return v11;
    goto LABEL_16;
  }
  do
  {
    v14 = v8;
    *((_QWORD *)v8 - 5) = 0;
    *((_QWORD *)v8 - 4) = 0;
    v15 = *((_OWORD *)v13 - 3);
    v13 -= 6;
    *((_OWORD *)v8 - 3) = v15;
    v8 -= 48;
    *((_QWORD *)v14 - 4) = v13[2];
    *v13 = 0;
    v13[1] = 0;
    v13[2] = 0;
    v16 = *(_OWORD *)(v13 + 3);
    *((_QWORD *)v8 + 5) = v13[5];
    *(_OWORD *)(v8 + 24) = v16;
    v13[4] = 0;
    v13[5] = 0;
    v13[3] = 0;
  }
  while (v13 != v12);
  v13 = *a1;
  v17 = a1[1];
  *a1 = (char **)v8;
  a1[1] = v11;
  a1[2] = v9;
  while (v17 != v13)
  {
    v17 -= 6;
    sub_20EB90FE0(v17);
  }
  if (v13)
LABEL_16:
    operator delete(v13);
  return v11;
}

uint64_t sub_20EE1CB2C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20EE1C7E8((uint64_t)v2 + 16);
    operator delete(v2);
  }
  return a1;
}

_QWORD *sub_20EE1CB70(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 60)
      goto LABEL_22;
    v10 = v8 >> 3;
    if (v8 >> 3 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    v12 = 0xFFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 60)
LABEL_22:
      sub_20E969238();
    v13 = 2 * v12;
    result = operator new(16 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 4;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = (void *)*result;
LABEL_20:
    result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  v18 = &__src[16 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

_QWORD *sub_20EE1CCB4(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  unint64_t v12;
  uint64_t v14;

  v4 = sub_2102322B4((unsigned __int8 *)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v7 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return v8;
  v8 = (_QWORD *)*v8;
  if (!v8)
    return v8;
  if (v6.u32[0] >= 2uLL)
  {
    while (1)
    {
      v12 = v8[1];
      if (v12 == v4)
      {
        if (v8[2] == *(_QWORD *)a2 && v8[3] == *(_QWORD *)(a2 + 8))
          return v8;
      }
      else
      {
        if (v12 >= *(_QWORD *)&v5)
          v12 %= *(_QWORD *)&v5;
        if (v12 != v7)
          return 0;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        return v8;
    }
  }
  v10 = *(_QWORD *)&v5 - 1;
  while (1)
  {
    v14 = v8[1];
    if (v14 != v4)
      break;
    if (v8[2] == *(_QWORD *)a2 && v8[3] == *(_QWORD *)(a2 + 8))
      return v8;
LABEL_26:
    v8 = (_QWORD *)*v8;
    if (!v8)
      return v8;
  }
  if ((v14 & v10) == v7)
    goto LABEL_26;
  return 0;
}

uint64_t sub_20EE1CDE4(uint64_t *a1, __int128 *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  _OWORD *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  char *v34;
  void **v35;
  char *v36;
  char *v37;
  uint64_t v39;
  char *v40;

  v3 = 0xD37A6F4DE9BD37A7 * ((a1[1] - *a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0xB21642C8590B21)
    sub_20E867F44();
  if (0xA6F4DE9BD37A6F4ELL * ((a1[2] - *a1) >> 4) > v4)
    v4 = 0xA6F4DE9BD37A6F4ELL * ((a1[2] - *a1) >> 4);
  if (0xD37A6F4DE9BD37A7 * ((a1[2] - *a1) >> 4) >= 0x590B21642C8590)
    v6 = 0xB21642C8590B21;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xB21642C8590B21)
      sub_20E877A38();
    v7 = (char *)operator new(368 * v6);
  }
  else
  {
    v7 = 0;
  }
  v39 = (uint64_t)&v7[368 * v3];
  v40 = &v7[368 * v6];
  sub_20ECC7618(v39, a2);
  v8 = v39 + 368;
  v9 = (char *)*a1;
  v10 = (char *)a1[1];
  if (v10 == (char *)*a1)
  {
    *a1 = v39;
    a1[1] = v8;
    a1[2] = (uint64_t)v40;
  }
  else
  {
    v11 = 0;
    do
    {
      v12 = v39 + v11;
      v13 = v39 + v11 - 368;
      v14 = &v10[v11];
      v15 = *(_OWORD *)&v10[v11 - 368];
      *(_QWORD *)(v13 + 16) = *(_QWORD *)&v10[v11 - 352];
      *(_OWORD *)v13 = v15;
      v16 = v39 + v11 - 344;
      v17 = (uint64_t)&v10[v11 - 344];
      v18 = *(_OWORD *)v17;
      *(_QWORD *)(v16 + 16) = *(_QWORD *)&v10[v11 - 328];
      *(_OWORD *)v16 = v18;
      *(_QWORD *)(v17 + 8) = 0;
      *(_QWORD *)(v17 + 16) = 0;
      *(_QWORD *)v17 = 0;
      *(_QWORD *)(v39 + v11 - 320) = *(_QWORD *)&v10[v11 - 320];
      v19 = (_OWORD *)(v39 + v11 - 312);
      v20 = *(_OWORD *)&v10[v11 - 312];
      v21 = *(_OWORD *)&v10[v11 - 296];
      v22 = *(_OWORD *)&v10[v11 - 264];
      v19[2] = *(_OWORD *)&v10[v11 - 280];
      v19[3] = v22;
      *v19 = v20;
      v19[1] = v21;
      v23 = *(_OWORD *)&v10[v11 - 248];
      v24 = *(_OWORD *)&v10[v11 - 232];
      v25 = *(_OWORD *)&v10[v11 - 216];
      *(_OWORD *)(v12 - 200) = *(_OWORD *)&v10[v11 - 200];
      *(_OWORD *)(v12 - 216) = v25;
      *(_OWORD *)(v12 - 232) = v24;
      *(_OWORD *)(v12 - 248) = v23;
      v26 = *(_OWORD *)&v10[v11 - 104];
      v27 = *(_OWORD *)&v10[v11 - 88];
      v28 = *(_OWORD *)&v10[v11 - 72];
      *(_OWORD *)(v12 - 120) = *(_OWORD *)&v10[v11 - 120];
      *(_OWORD *)(v12 - 72) = v28;
      *(_OWORD *)(v12 - 88) = v27;
      *(_OWORD *)(v12 - 104) = v26;
      v29 = *(_OWORD *)&v10[v11 - 184];
      v30 = *(_OWORD *)&v10[v11 - 168];
      v31 = *(_OWORD *)&v10[v11 - 152];
      *(_OWORD *)(v12 - 136) = *(_OWORD *)&v10[v11 - 136];
      *(_OWORD *)(v12 - 152) = v31;
      *(_OWORD *)(v12 - 168) = v30;
      *(_OWORD *)(v12 - 184) = v29;
      v32 = *(_OWORD *)&v10[v11 - 56];
      *(_QWORD *)(v12 - 40) = *(_QWORD *)&v10[v11 - 40];
      *(_OWORD *)(v12 - 56) = v32;
      *(_BYTE *)(v39 + v11 - 32) = 0;
      *(_BYTE *)(v12 - 8) = 0;
      if (v10[v11 - 8])
      {
        v33 = *((_OWORD *)v14 - 2);
        *(_QWORD *)(v39 + v11 - 16) = *((_QWORD *)v14 - 2);
        *(_OWORD *)(v39 + v11 - 32) = v33;
        *((_QWORD *)v14 - 3) = 0;
        *((_QWORD *)v14 - 2) = 0;
        *((_QWORD *)v14 - 4) = 0;
        *(_BYTE *)(v12 - 8) = 1;
      }
      v11 -= 368;
    }
    while (&v10[v11] != v9);
    v10 = (char *)*a1;
    v34 = (char *)a1[1];
    *a1 = v39 + v11;
    a1[1] = v8;
    a1[2] = (uint64_t)v40;
    if (v34 != v10)
    {
      v35 = (void **)(v34 - 344);
      do
      {
        while (1)
        {
          if (*((_BYTE *)v35 + 336) && *((char *)v35 + 335) < 0)
            operator delete(v35[39]);
          if (*((char *)v35 + 23) < 0)
            break;
          v36 = (char *)(v35 - 3);
          v35 -= 46;
          if (v36 == v10)
            goto LABEL_26;
        }
        operator delete(*v35);
        v37 = (char *)(v35 - 3);
        v35 -= 46;
      }
      while (v37 != v10);
    }
  }
LABEL_26:
  if (v10)
    operator delete(v10);
  return v39 + 368;
}

void sub_20EE1D0A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20EE1D0B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE1D0B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 368;
    if (*(_BYTE *)(i - 8) && *(char *)(i - 9) < 0)
      operator delete(*(void **)(i - 32));
    if (*(char *)(i - 321) < 0)
      operator delete(*(void **)(i - 344));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

char *sub_20EE1D140(char **a1, uint64_t a2)
{
  void **v3;
  void **v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  void **v17;

  v3 = (void **)*a1;
  v4 = (void **)a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * (((char *)v4 - *a1) >> 4);
  v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555)
    sub_20EAA9DC0();
  if (0x5555555555555556 * ((a1[2] - (char *)v3) >> 4) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - (char *)v3) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - (char *)v3) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v8 = 0x555555555555555;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0x555555555555555)
      sub_20E877A38();
    v9 = (char *)operator new(48 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[48 * v5];
  *(_OWORD *)v10 = *(_OWORD *)a2;
  v10[16] = 0;
  v10[40] = 0;
  if (*(_BYTE *)(a2 + 40))
  {
    *((_OWORD *)v10 + 1) = *(_OWORD *)(a2 + 16);
    *((_QWORD *)v10 + 4) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v10[40] = 1;
    v3 = (void **)*a1;
    v4 = (void **)a1[1];
  }
  v11 = &v9[48 * v8];
  v12 = v10 + 48;
  if (v4 == v3)
  {
    *a1 = v10;
    a1[1] = v12;
    a1[2] = v11;
  }
  else
  {
    v13 = 0;
    do
    {
      v14 = &v10[v13 * 8];
      v15 = (char *)&v4[v13];
      *((_OWORD *)v14 - 3) = *(_OWORD *)&v4[v13 - 6];
      v10[v13 * 8 - 32] = 0;
      *(v14 - 8) = 0;
      if (LOBYTE(v4[v13 - 1]))
      {
        v16 = *((_OWORD *)v15 - 2);
        *(_QWORD *)&v10[v13 * 8 - 16] = *((_QWORD *)v15 - 2);
        *(_OWORD *)&v10[v13 * 8 - 32] = v16;
        *((_QWORD *)v15 - 3) = 0;
        *((_QWORD *)v15 - 2) = 0;
        *((_QWORD *)v15 - 4) = 0;
        *(v14 - 8) = 1;
      }
      v13 -= 6;
    }
    while (&v4[v13] != v3);
    v3 = (void **)*a1;
    v17 = (void **)a1[1];
    *a1 = &v10[v13 * 8];
    a1[1] = v12;
    a1[2] = v11;
    while (v17 != v3)
    {
      if (*((_BYTE *)v17 - 8))
      {
        if (*((char *)v17 - 9) < 0)
          operator delete(*(v17 - 4));
      }
      v17 -= 6;
    }
  }
  if (v3)
    operator delete(v3);
  return v12;
}

uint64_t sub_20EE1D304(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v5 = v2 - 48;
      *(_QWORD *)(a1 + 16) = v2 - 48;
      if (*(_BYTE *)(v2 - 8) && *(char *)(v2 - 9) < 0)
      {
        operator delete(*(void **)(v2 - 32));
        v5 = *(_QWORD *)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

char *sub_20EE1D370(void **a1, char *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  void *v18;
  void *v19;

  v3 = 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x492492492492492)
    sub_20E867F44();
  if (0xDB6DB6DB6DB6DB6ELL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0xDB6DB6DB6DB6DB6ELL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3)) >= 0x249249249249249)
    v5 = 0x492492492492492;
  else
    v5 = v4;
  if (v5 > 0x492492492492492)
    sub_20E877A38();
  v7 = 56 * v5;
  v8 = (char *)operator new(56 * v5);
  v9 = &v8[56 * v3];
  *v9 = *a2;
  v10 = &v8[v7];
  *(_OWORD *)(v9 + 8) = *(_OWORD *)(a2 + 8);
  *((_QWORD *)v9 + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *((_OWORD *)v9 + 2) = *((_OWORD *)a2 + 2);
  *((_QWORD *)v9 + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  *((_QWORD *)a2 + 6) = 0;
  v11 = v9 + 56;
  v12 = (char *)*a1;
  v13 = (char *)a1[1];
  if (v13 == *a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
  }
  else
  {
    v14 = 0;
    do
    {
      v15 = &v9[v14];
      v16 = &v13[v14];
      *(v15 - 56) = v13[v14 - 56];
      *((_OWORD *)v15 - 3) = *(_OWORD *)&v13[v14 - 48];
      *((_QWORD *)v15 - 4) = *(_QWORD *)&v13[v14 - 32];
      *((_QWORD *)v16 - 6) = 0;
      *((_QWORD *)v16 - 5) = 0;
      *((_QWORD *)v16 - 4) = 0;
      *(_OWORD *)(v15 - 24) = *(_OWORD *)&v13[v14 - 24];
      *((_QWORD *)v15 - 1) = *(_QWORD *)&v13[v14 - 8];
      *((_QWORD *)v16 - 3) = 0;
      *((_QWORD *)v16 - 2) = 0;
      *((_QWORD *)v16 - 1) = 0;
      v14 -= 56;
    }
    while (&v13[v14] != v12);
    v13 = (char *)*a1;
    v17 = (char *)a1[1];
    *a1 = &v9[v14];
    a1[1] = v11;
    a1[2] = v10;
    while (v17 != v13)
    {
      v18 = (void *)*((_QWORD *)v17 - 3);
      if (v18)
      {
        *((_QWORD *)v17 - 2) = v18;
        operator delete(v18);
      }
      v19 = (void *)*((_QWORD *)v17 - 6);
      if (v19)
      {
        *((_QWORD *)v17 - 5) = v19;
        operator delete(v19);
      }
      v17 -= 56;
    }
  }
  if (v13)
    operator delete(v13);
  return v11;
}

void sub_20EE1D52C(uint64_t a1, unint64_t a2)
{
  void **v2;
  void **v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void **v11;
  __int128 v12;
  void **v13;

  v2 = *(void ***)a1;
  if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 5) < a2)
  {
    if (a2 >= 0x9D89D89D89D89ELL)
      sub_20EAA9DC0();
    v4 = *(void ***)(a1 + 8);
    v5 = 416 * a2;
    v6 = (char *)operator new(416 * a2);
    v7 = &v6[v5];
    v8 = &v6[(char *)v4 - (char *)v2];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
    }
    else
    {
      v9 = 0;
      do
      {
        v10 = &v8[v9 * 8];
        v11 = &v4[v9];
        memcpy(&v8[v9 * 8 - 416], &v4[v9 - 52], 0x179uLL);
        *(v10 - 32) = 0;
        *(v10 - 8) = 0;
        if (LOBYTE(v4[v9 - 1]))
        {
          v12 = *((_OWORD *)v11 - 2);
          *((_QWORD *)v10 - 2) = *(v11 - 2);
          *((_OWORD *)v10 - 2) = v12;
          *(v11 - 3) = 0;
          *(v11 - 2) = 0;
          *(v11 - 4) = 0;
          *(v10 - 8) = 1;
        }
        v9 -= 52;
      }
      while (&v4[v9] != v2);
      v2 = *(void ***)a1;
      v13 = *(void ***)(a1 + 8);
      *(_QWORD *)a1 = &v8[v9 * 8];
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      while (v13 != v2)
      {
        if (*((_BYTE *)v13 - 8))
        {
          if (*((char *)v13 - 9) < 0)
            operator delete(*(v13 - 4));
        }
        v13 -= 52;
      }
    }
    if (v2)
      operator delete(v2);
  }
}

uint64_t *sub_20EE1D6A8(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16) && *(_BYTE *)(v2 + 448) && *(_BYTE *)(v2 + 440) && *(char *)(v2 + 439) < 0)
      operator delete(*(void **)(v2 + 416));
    operator delete((void *)v2);
  }
  return a1;
}

void sub_20EE1D708()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20EE1D71C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C9EAD70;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20EE1D754(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C9EAD70;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20EE1D774(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  __int128 v5;
  _OWORD __src[24];
  __int128 __p;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  sub_20EE2262C((char *)(*(_QWORD *)(a1 + 8) + 16), a2, __src);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(v3 + 8);
  if (v4 >= *(_QWORD *)(v3 + 16))
  {
    *(_QWORD *)(v3 + 8) = sub_20EE1DF30((char **)v3, (uint64_t)__src);
    if (!v9)
      return;
    goto LABEL_10;
  }
  memcpy(*(void **)(v3 + 8), __src, 0x179uLL);
  *(_BYTE *)(v4 + 384) = 0;
  *(_BYTE *)(v4 + 408) = 0;
  if (v9)
  {
    if (SHIBYTE(v8) < 0)
    {
      sub_20E860C04((_BYTE *)(v4 + 384), (void *)__p, *((unint64_t *)&__p + 1));
    }
    else
    {
      v5 = __p;
      *(_QWORD *)(v4 + 400) = v8;
      *(_OWORD *)(v4 + 384) = v5;
    }
    *(_BYTE *)(v4 + 408) = 1;
  }
  *(_QWORD *)(v3 + 8) = v4 + 416;
  *(_QWORD *)(v3 + 8) = v4 + 416;
  if (v9)
  {
LABEL_10:
    if (SHIBYTE(v8) < 0)
      operator delete((void *)__p);
  }
}

void sub_20EE1D890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *__p,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  char a64;
  uint64_t v64;
  uint64_t v65;
  void **v66;

  if (*(_BYTE *)(v65 + 408) && *(char *)(v65 + 407) < 0)
    operator delete(*v66);
  *(_QWORD *)(v64 + 8) = v65;
  if (a64)
  {
    if (a63 < 0)
    {
      operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20EE1D8E4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZN4cv3d3vio22user_anchor_node_group30AnchorTransformationNodeWorker26UpdateNewAndUpdatedAnchorsERK"
                     "NSt3__110shared_ptrIKNS0_15odometry_engine11VIOMetadataEEERS6_ENK3$_1clINS3_13unordered_setINS1_10A"
                     "nchorsMap14KeyframeAnchorENSF_12AnchorHasherENSF_11AnchorEqualENS3_9allocatorISG_EEEEEEDaRKT_EUlRSN_E_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZN4cv3d3vio22user_anchor_node_group30AnchorTransformationNodeWorker26UpdateNewAndUpdate"
                                "dAnchorsERKNSt3__110shared_ptrIKNS0_15odometry_engine11VIOMetadataEEERS6_ENK3$_1clINS3_1"
                                "3unordered_setINS1_10AnchorsMap14KeyframeAnchorENSF_12AnchorHasherENSF_11AnchorEqualENS3"
                                "_9allocatorISG_EEEEEEDaRKT_EUlRSN_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN4cv3d3vio22user_anchor_node_group30AnchorTransformationNodeWorker26UpdateNewAndUpdatedAnchorsERKNSt3__110shared_ptrIKNS0_15odometry_engine11VIOMetadataEEERS6_ENK3$_1clINS3_13unordered_setINS1_10AnchorsMap14KeyframeAnchorENSF_12AnchorHasherENSF_11AnchorEqualENS3_9allocatorISG_EEEEEEDaRKT_EUlRSN_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN4cv3d3vio22user_anchor_node_group30AnchorTransformationNodeWorker26UpdateNewAndUpdatedAnchorsERKNSt3__110shared_ptrIKNS0_15odometry_engine11VIOMetadataEEERS6_ENK3$_1clINS3_13unordered_setINS1_10AnchorsMap14KeyframeAnchorENSF_12AnchorHasherENSF_11AnchorEqualENS3_9allocatorISG_EEEEEEDaRKT_EUlRSN_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EE1D950()
{
  return &unk_24C9EADE0;
}

uint64_t sub_20EE1D95C(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  void *__p;
  char v9;

  result = (uint64_t)sub_20EE1CCB4(a1, a2);
  if (result)
  {
    sub_20E8D2CE8(a1, (_QWORD *)result, (uint64_t)&__p);
    v4 = __p;
    __p = 0;
    if (v4)
    {
      if (v9)
      {
        v5 = (_QWORD *)v4[6];
        if (v5)
        {
          do
          {
            v6 = (_QWORD *)*v5;
            operator delete(v5);
            v5 = v6;
          }
          while (v6);
        }
        v7 = (void *)v4[4];
        v4[4] = 0;
        if (v7)
          operator delete(v7);
      }
      operator delete(v4);
    }
    return 1;
  }
  return result;
}

uint64_t sub_20EE1D9E0(char **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void **v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  _OWORD *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  __int128 v38;
  uint64_t v39;
  char *v40;
  char *v41;
  void **v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  __int128 v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  __int128 v55;
  char *v56;
  char *v58;
  uint64_t v59;
  char *v60;

  v5 = *a1;
  v6 = (a2 - (uint64_t)*a1) / 48;
  v7 = (uint64_t)&(*a1)[48 * v6];
  if (a5 < 1)
    return v7;
  v9 = a3;
  v13 = a1[2];
  v11 = (uint64_t)(a1 + 2);
  v12 = v13;
  v14 = *(_QWORD *)(v11 - 8);
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v13[-v14] >> 4)) >= a5)
  {
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - v7) >> 4)) >= a5)
    {
      v19 = a3 + 48 * a5;
      v20 = *(_QWORD *)(v11 - 8);
    }
    else
    {
      v19 = a3 + 16 * ((uint64_t)(v14 - v7) >> 4);
      v20 = sub_20EAA9DD4(v11, v19, a4, *(_QWORD *)(v11 - 8));
      a1[1] = (char *)v20;
      if ((uint64_t)(v14 - v7) < 1)
        return v7;
    }
    v21 = v7 + 48 * a5;
    v22 = v20 - 48 * a5;
    v23 = v20;
    if (v22 < v14)
    {
      v24 = (uint64_t)&v5[48 * v6 + 16 + 16 * ((v20 - v21) >> 4)];
      v23 = v20;
      do
      {
        *(_OWORD *)v23 = *(_OWORD *)(v24 - 16);
        *(_BYTE *)(v23 + 16) = 0;
        *(_BYTE *)(v23 + 40) = 0;
        if (*(_BYTE *)(v22 + 40))
        {
          v25 = *(_OWORD *)v24;
          *(_QWORD *)(v23 + 32) = *(_QWORD *)(v24 + 16);
          *(_OWORD *)(v23 + 16) = v25;
          *(_QWORD *)(v24 + 8) = 0;
          *(_QWORD *)(v24 + 16) = 0;
          *(_QWORD *)v24 = 0;
          *(_BYTE *)(v23 + 40) = 1;
        }
        v22 += 48;
        v23 += 48;
        v24 += 48;
      }
      while (v22 < v14);
    }
    a1[1] = (char *)v23;
    if (v20 != v21)
    {
      v26 = 0;
      v27 = &v5[48 * v6 + 16 * ((v20 - v21) >> 4)];
      v28 = -16 * ((v20 - v21) >> 4);
      do
      {
        v29 = v20 + v26;
        *(_OWORD *)(v20 + v26 - 48) = *(_OWORD *)&v27[v26 - 48];
        v30 = (void **)(v20 + v26 - 32);
        v31 = &v27[v26 - 32];
        if (*(unsigned __int8 *)(v20 + v26 - 8) == v27[v26 - 8])
        {
          if (*(_BYTE *)(v20 + v26 - 8))
          {
            if (*(char *)(v20 + v26 - 9) < 0)
              operator delete(*v30);
            v32 = *(_OWORD *)v31;
            *(_QWORD *)(v20 + v26 - 16) = *(_QWORD *)&v27[v26 - 16];
            *(_OWORD *)v30 = v32;
            v27[v26 - 9] = 0;
            *v31 = 0;
          }
        }
        else if (*(_BYTE *)(v20 + v26 - 8))
        {
          if (*(char *)(v20 + v26 - 9) < 0)
            operator delete(*v30);
          *(_BYTE *)(v29 - 8) = 0;
        }
        else
        {
          v33 = *(_OWORD *)v31;
          *(_QWORD *)(v20 + v26 - 16) = *(_QWORD *)&v27[v26 - 16];
          *(_OWORD *)v30 = v33;
          *(_QWORD *)&v27[v26 - 24] = 0;
          *(_QWORD *)&v27[v26 - 16] = 0;
          *(_QWORD *)v31 = 0;
          *(_BYTE *)(v29 - 8) = 1;
        }
        v26 -= 48;
      }
      while (v28 != v26);
    }
    if (v19 != v9)
    {
      v34 = (_OWORD *)v7;
      do
      {
        *v34 = *(_OWORD *)v9;
        sub_20E869118((uint64_t)(v34 + 1), (_QWORD *)(v9 + 16));
        v9 += 48;
        v34 += 3;
      }
      while (v9 != v19);
    }
    return v7;
  }
  v15 = a5 - 0x5555555555555555 * ((uint64_t)(v14 - (_QWORD)v5) >> 4);
  if (v15 > 0x555555555555555)
    sub_20EAA9DC0();
  v16 = 0xAAAAAAAAAAAAAAABLL * ((v12 - v5) >> 4);
  if (2 * v16 > v15)
    v15 = 2 * v16;
  if (v16 >= 0x2AAAAAAAAAAAAAALL)
    v17 = 0x555555555555555;
  else
    v17 = v15;
  if (v17)
  {
    if (v17 > 0x555555555555555)
      sub_20E877A38();
    v18 = (char *)operator new(48 * v17);
  }
  else
  {
    v18 = 0;
  }
  v36 = 0;
  v59 = v6;
  v37 = &v18[48 * v6];
  v60 = &v18[48 * v17];
  v58 = v18;
  do
  {
    v39 = v9 + v36;
    v40 = &v37[v36];
    *(_OWORD *)v40 = *(_OWORD *)(v9 + v36);
    v37[v36 + 16] = 0;
    v41 = &v37[v36 + 16];
    v40[40] = 0;
    if (*(_BYTE *)(v9 + v36 + 40))
    {
      v42 = (void **)(v39 + 16);
      if (*(char *)(v39 + 39) < 0)
      {
        sub_20E860C04(v41, *v42, *(_QWORD *)(v9 + v36 + 24));
      }
      else
      {
        v38 = *(_OWORD *)v42;
        *(_QWORD *)&v37[v36 + 32] = *(_QWORD *)(v39 + 32);
        *(_OWORD *)v41 = v38;
      }
      v40[40] = 1;
    }
    v36 += 48;
  }
  while (48 * a5 != v36);
  v35 = v37;
  v43 = *a1;
  v44 = v37;
  if (*a1 != (char *)v7)
  {
    v45 = 0;
    do
    {
      v46 = &v37[v45];
      v47 = v7 + v45;
      *((_OWORD *)v46 - 3) = *(_OWORD *)(v7 + v45 - 48);
      v37[v45 - 32] = 0;
      *(v46 - 8) = 0;
      if (*(_BYTE *)(v7 + v45 - 8))
      {
        v48 = *(_OWORD *)(v47 - 32);
        *(_QWORD *)&v37[v45 - 16] = *(_QWORD *)(v47 - 16);
        *(_OWORD *)&v37[v45 - 32] = v48;
        *(_QWORD *)(v47 - 24) = 0;
        *(_QWORD *)(v47 - 16) = 0;
        *(_QWORD *)(v47 - 32) = 0;
        *(v46 - 8) = 1;
      }
      v45 -= 48;
    }
    while ((char *)(v7 + v45) != v43);
    v44 = &v37[v45];
  }
  v49 = a1[1];
  v50 = &v37[48 * a5];
  if (v49 != (char *)v7)
  {
    v51 = 48 * v59;
    v52 = &v58[48 * a5];
    do
    {
      v53 = &v52[v51];
      v54 = &v5[v51];
      *(_OWORD *)v53 = *(_OWORD *)&v5[48 * v59];
      v52[v51 + 16] = 0;
      v53[40] = 0;
      if (v5[v51 + 40])
      {
        v55 = *((_OWORD *)v54 + 1);
        *(_QWORD *)&v52[v51 + 32] = *((_QWORD *)v54 + 4);
        *(_OWORD *)&v52[v51 + 16] = v55;
        *((_QWORD *)v54 + 3) = 0;
        *((_QWORD *)v54 + 4) = 0;
        *((_QWORD *)v54 + 2) = 0;
        v53[40] = 1;
      }
      v52 += 48;
      v5 += 48;
    }
    while (v54 + 48 != v49);
    v7 = (uint64_t)a1[1];
    v50 = &v52[48 * v59];
  }
  v56 = *a1;
  *a1 = v44;
  a1[1] = v50;
  a1[2] = v60;
  while ((char *)v7 != v56)
  {
    if (*(_BYTE *)(v7 - 8))
    {
      if (*(char *)(v7 - 9) < 0)
        operator delete(*(void **)(v7 - 32));
    }
    v7 -= 48;
  }
  if (v56)
    operator delete(v56);
  return (uint64_t)v35;
}

void sub_20EE1DEF4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20EE1DEFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v17 = v15 + v14;
  if (*(_BYTE *)(v15 + v14 + 40))
  {
    if (*(char *)(v17 + 39) < 0)
      operator delete(*(void **)(v17 + 16));
  }
  a14 = v15 + v14;
  sub_20EE1D304((uint64_t)&a12);
  _Unwind_Resume(a1);
}

char *sub_20EE1DF30(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v18;
  char *v19;
  char *v20;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0x4EC4EC4EC4EC4EC5 * ((v4 - *a1) >> 5);
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) > 0x9D89D89D89D89DLL)
    sub_20EAA9DC0();
  if (0x9D89D89D89D89D8ALL * ((a1[2] - v3) >> 5) > v6)
    v6 = 0x9D89D89D89D89D8ALL * ((a1[2] - v3) >> 5);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((a1[2] - v3) >> 5)) >= 0x4EC4EC4EC4EC4ELL)
    v8 = 0x9D89D89D89D89DLL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0x9D89D89D89D89DLL)
      sub_20E877A38();
    v9 = (char *)operator new(416 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[416 * v5];
  v20 = &v9[416 * v8];
  memcpy(v10, (const void *)a2, 0x179uLL);
  v10[384] = 0;
  v10[408] = 0;
  if (!*(_BYTE *)(a2 + 408))
  {
    v11 = v10 + 416;
    v19 = v10 + 416;
    if (v4 != v3)
      goto LABEL_18;
LABEL_15:
    v12 = v3;
    goto LABEL_23;
  }
  if (*(char *)(a2 + 407) < 0)
  {
    sub_20E860C04(v10 + 384, *(void **)(a2 + 384), *(_QWORD *)(a2 + 392));
    v3 = *a1;
    v4 = a1[1];
  }
  else
  {
    *((_OWORD *)v10 + 24) = *(_OWORD *)(a2 + 384);
    *((_QWORD *)v10 + 50) = *(_QWORD *)(a2 + 400);
  }
  v10[408] = 1;
  v11 = v10 + 416;
  v19 = v10 + 416;
  if (v4 == v3)
    goto LABEL_15;
LABEL_18:
  v13 = 0;
  do
  {
    v14 = &v10[v13];
    v15 = &v4[v13];
    memcpy(&v10[v13 - 416], &v4[v13 - 416], 0x179uLL);
    *(v14 - 32) = 0;
    *(v14 - 8) = 0;
    if (v4[v13 - 8])
    {
      v16 = *((_OWORD *)v15 - 2);
      *((_QWORD *)v14 - 2) = *((_QWORD *)v15 - 2);
      *((_OWORD *)v14 - 2) = v16;
      *((_QWORD *)v15 - 3) = 0;
      *((_QWORD *)v15 - 2) = 0;
      *((_QWORD *)v15 - 4) = 0;
      *(v14 - 8) = 1;
    }
    v13 -= 416;
  }
  while (&v4[v13] != v3);
  v12 = *a1;
  v3 = a1[1];
  v10 += v13;
  v11 = v19;
LABEL_23:
  *a1 = v10;
  a1[1] = v11;
  a1[2] = v20;
  if (v3 == v12)
  {
    if (v3)
LABEL_25:
      operator delete(v3);
  }
  else
  {
    do
    {
      v18 = v3 - 416;
      if (*(v3 - 8) && *(v3 - 9) < 0)
        operator delete(*((void **)v3 - 4));
      v3 -= 416;
    }
    while (v18 != v12);
    v3 = v12;
    if (v12)
      goto LABEL_25;
  }
  return v11;
}

void sub_20EE1E19C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  _BYTE *v4;
  va_list va;

  va_start(va, a2);
  if (*v4)
  {
    if (*(char *)(v2 + 407) < 0)
      operator delete(*v3);
  }
  sub_20EAAA764((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_20EE1E1C8(char **a1, uint64_t a2)
{
  void **v3;
  void **v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  void **v17;

  v3 = (void **)*a1;
  v4 = (void **)a1[1];
  v5 = 0x4EC4EC4EC4EC4EC5 * (((char *)v4 - *a1) >> 5);
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) > 0x9D89D89D89D89DLL)
    sub_20EAA9DC0();
  if (0x9D89D89D89D89D8ALL * ((a1[2] - (char *)v3) >> 5) > v6)
    v6 = 0x9D89D89D89D89D8ALL * ((a1[2] - (char *)v3) >> 5);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((a1[2] - (char *)v3) >> 5)) >= 0x4EC4EC4EC4EC4ELL)
    v8 = 0x9D89D89D89D89DLL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0x9D89D89D89D89DLL)
      sub_20E877A38();
    v9 = (char *)operator new(416 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[416 * v5];
  memcpy(v10, (const void *)a2, 0x179uLL);
  v10[384] = 0;
  v10[408] = 0;
  if (*(_BYTE *)(a2 + 408))
  {
    *((_OWORD *)v10 + 24) = *(_OWORD *)(a2 + 384);
    *((_QWORD *)v10 + 50) = *(_QWORD *)(a2 + 400);
    *(_QWORD *)(a2 + 392) = 0;
    *(_QWORD *)(a2 + 400) = 0;
    *(_QWORD *)(a2 + 384) = 0;
    v10[408] = 1;
    v3 = (void **)*a1;
    v4 = (void **)a1[1];
  }
  v11 = &v9[416 * v8];
  v12 = v10 + 416;
  if (v4 == v3)
  {
    *a1 = v10;
    a1[1] = v12;
    a1[2] = v11;
  }
  else
  {
    v13 = 0;
    do
    {
      v14 = &v10[v13 * 8];
      v15 = (char *)&v4[v13];
      memcpy(&v10[v13 * 8 - 416], &v4[v13 - 52], 0x179uLL);
      *(v14 - 32) = 0;
      *(v14 - 8) = 0;
      if (LOBYTE(v4[v13 - 1]))
      {
        v16 = *((_OWORD *)v15 - 2);
        *((_QWORD *)v14 - 2) = *((_QWORD *)v15 - 2);
        *((_OWORD *)v14 - 2) = v16;
        *((_QWORD *)v15 - 3) = 0;
        *((_QWORD *)v15 - 2) = 0;
        *((_QWORD *)v15 - 4) = 0;
        *(v14 - 8) = 1;
      }
      v13 -= 52;
    }
    while (&v4[v13] != v3);
    v3 = (void **)*a1;
    v17 = (void **)a1[1];
    *a1 = &v10[v13 * 8];
    a1[1] = v12;
    a1[2] = v11;
    while (v17 != v3)
    {
      if (*((_BYTE *)v17 - 8))
      {
        if (*((char *)v17 - 9) < 0)
          operator delete(*(v17 - 4));
      }
      v17 -= 52;
    }
  }
  if (v3)
    operator delete(v3);
  return v10 + 416;
}

uint64_t sub_20EE1E3C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  void *v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;

  *(_QWORD *)a1 = &off_24C9EA6C0;
  *(_QWORD *)(a1 + 56) = &unk_24C9EA738;
  *(_QWORD *)(a1 + 112) = &unk_24C9EA760;
  *(_QWORD *)(a1 + 168) = &unk_24C9EA788;
  *(_QWORD *)(a1 + 224) = &unk_24C9EA7B0;
  *(_QWORD *)(a1 + 280) = &unk_24C9EA7D8;
  *(_QWORD *)(a1 + 336) = &unk_24C9EA800;
  *(_QWORD *)(a1 + 392) = &unk_24C9EA828;
  *(_QWORD *)(a1 + 448) = &unk_24C9EA850;
  *(_QWORD *)(a1 + 504) = &unk_24C9EA878;
  *(_QWORD *)(a1 + 560) = &unk_24C9EA8A0;
  v2 = *(_QWORD *)(a1 + 1432);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 1440);
    v4 = *(void **)(a1 + 1432);
    if (v3 != v2)
    {
      v5 = v3 - 344;
      do
      {
        while (1)
        {
          if (*(_BYTE *)(v5 + 336) && *(char *)(v5 + 335) < 0)
            operator delete(*(void **)(v5 + 312));
          if (*(char *)(v5 + 23) < 0)
            break;
          v6 = v5 - 24;
          v5 -= 368;
          if (v6 == v2)
            goto LABEL_10;
        }
        operator delete(*(void **)v5);
        v7 = v5 - 24;
        v5 -= 368;
      }
      while (v7 != v2);
LABEL_10:
      v4 = *(void **)(a1 + 1432);
    }
    *(_QWORD *)(a1 + 1440) = v2;
    operator delete(v4);
  }
  v8 = *(_QWORD **)(a1 + 1408);
  if (v8)
  {
    do
    {
      v9 = (_QWORD *)*v8;
      operator delete(v8);
      v8 = v9;
    }
    while (v9);
  }
  v10 = *(void **)(a1 + 1392);
  *(_QWORD *)(a1 + 1392) = 0;
  if (v10)
    operator delete(v10);
  if (*(_BYTE *)(a1 + 1376) && *(_BYTE *)(a1 + 1368) && *(char *)(a1 + 1367) < 0)
    operator delete(*(void **)(a1 + 1344));
  v11 = *(void **)(a1 + 920);
  if (v11)
  {
    *(_QWORD *)(a1 + 928) = v11;
    operator delete(v11);
  }
  v12 = *(_QWORD **)(a1 + 896);
  if (v12)
  {
    do
    {
      v13 = (_QWORD *)*v12;
      operator delete(v12);
      v12 = v13;
    }
    while (v13);
  }
  v14 = *(void **)(a1 + 880);
  *(_QWORD *)(a1 + 880) = 0;
  if (v14)
    operator delete(v14);
  v15 = *(_QWORD **)(a1 + 856);
  if (v15)
  {
    do
    {
      v20 = (_QWORD *)*v15;
      v21 = (_QWORD *)v15[6];
      if (v21)
      {
        do
        {
          v22 = (_QWORD *)*v21;
          operator delete(v21);
          v21 = v22;
        }
        while (v22);
      }
      v23 = (void *)v15[4];
      v15[4] = 0;
      if (v23)
        operator delete(v23);
      operator delete(v15);
      v15 = v20;
    }
    while (v20);
  }
  v16 = *(void **)(a1 + 840);
  *(_QWORD *)(a1 + 840) = 0;
  if (v16)
    operator delete(v16);
  v17 = *(_QWORD *)(a1 + 816);
  if (v17)
  {
    v18 = *(_QWORD *)(a1 + 824);
    v19 = *(void **)(a1 + 816);
    if (v18 != v17)
    {
      do
      {
        if (*(_BYTE *)(v18 - 8) && *(char *)(v18 - 9) < 0)
          operator delete(*(void **)(v18 - 32));
        v18 -= 48;
      }
      while (v18 != v17);
      v19 = *(void **)(a1 + 816);
    }
    *(_QWORD *)(a1 + 824) = v17;
    operator delete(v19);
  }
  v24 = *(_QWORD *)(a1 + 792);
  if (v24)
  {
    v25 = *(_QWORD *)(a1 + 800);
    v26 = *(void **)(a1 + 792);
    if (v25 != v24)
    {
      do
      {
        if (*(_BYTE *)(v25 - 8) && *(char *)(v25 - 9) < 0)
          operator delete(*(void **)(v25 - 32));
        v25 -= 416;
      }
      while (v25 != v24);
      v26 = *(void **)(a1 + 792);
    }
    *(_QWORD *)(a1 + 800) = v24;
    operator delete(v26);
  }
  sub_20EE1C758(a1 + 752);
  v27 = *(_QWORD **)(a1 + 728);
  if (v27)
  {
    do
    {
      v28 = (_QWORD *)*v27;
      sub_20EE1C7E8((uint64_t)(v27 + 2));
      operator delete(v27);
      v27 = v28;
    }
    while (v28);
  }
  v29 = *(void **)(a1 + 712);
  *(_QWORD *)(a1 + 712) = 0;
  if (v29)
    operator delete(v29);
  v30 = *(_QWORD **)(a1 + 680);
  if (v30)
  {
    do
    {
      v31 = (_QWORD *)*v30;
      operator delete(v30);
      v30 = v31;
    }
    while (v31);
  }
  v32 = *(void **)(a1 + 664);
  *(_QWORD *)(a1 + 664) = 0;
  if (v32)
    operator delete(v32);
  return sub_20EE155FC(a1);
}

void sub_20EE1E6A0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9EAE00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EE1E6B0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9EAE00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EE1E6E0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = a1[5];
  if (v2)
  {
    v3 = a1[6];
    v4 = (void *)a1[5];
    if (v3 != v2)
    {
      v5 = v3 - 344;
      do
      {
        while (1)
        {
          if (*(_BYTE *)(v5 + 336) && *(char *)(v5 + 335) < 0)
            operator delete(*(void **)(v5 + 312));
          if (*(char *)(v5 + 23) < 0)
            break;
          v6 = v5 - 24;
          v5 -= 368;
          if (v6 == v2)
            goto LABEL_10;
        }
        operator delete(*(void **)v5);
        v7 = v5 - 24;
        v5 -= 368;
      }
      while (v7 != v2);
LABEL_10:
      v4 = (void *)a1[5];
    }
    a1[6] = v2;
    operator delete(v4);
  }
  v8 = (std::__shared_weak_count *)a1[4];
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_20EE1E7C4(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v5;
  int v6;
  size_t v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__p[2];
  unint64_t v20;
  _QWORD *v21;
  _QWORD v22[6];

  v22[5] = *MEMORY[0x24BDAC8D0];
  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20E863438(v5);
  v21 = (_QWORD *)v5;
  sub_2102323F4(a3, v22);
  sub_20E86A980((_QWORD *)(v5 + 16), (uint64_t)v22, 36);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_23;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __p;
      goto LABEL_14;
    }
    v11 = *(const void **)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_23:
      sub_20E860B7C();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = operator new(v12 + 1);
    __p[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __p[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __p;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21;
  if (v21)
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *v21 = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)((char *)v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    v14[3] = MEMORY[0x24BEDB848] + 16;
    v14[2] = v17;
    if (*((char *)v14 + 111) < 0)
      operator delete((void *)v14[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v14 + 16);
    MEMORY[0x212BC6398](v14, 0x10B2C40EED050F3);
  }
  v22[0] = a2;
  v22[1] = __p;
  v22[2] = a2;
  v22[3] = __p;
  v22[4] = __p;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_20E877AB8();
  v21 = v22;
  ((void (*)(_QWORD **, uint64_t))off_24C9EAE40[v18])(&v21, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__p[0]);
}

void sub_20EE1EA38(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20EE1EA5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EE1EA78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20FD0DE48((uint64_t *)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_20EE1EA8C(_DWORD ***a1)
{
  return sub_20EB7AC64(**a1, (char *)(*a1)[1]);
}

void sub_20EE1EA98(uint64_t a1, uint64_t a2)
{
  sub_20EB8C0C8((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

char *sub_20EE1EAA8(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20EE1EBA0((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_20EE1EB98(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_20EE1EBA0(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_20EE1ED9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877E3C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EE1EDB4()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EE1EDC8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9EAEC8;
  result[1] = v3;
  return result;
}

uint64_t sub_20EE1EDFC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9EAEC8;
  a2[1] = v2;
  return result;
}

void sub_20EE1EE18(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  void *__p;
  __int128 v5;

  v3 = *(_QWORD *)(a1 + 8);
  __p = operator new(0x19uLL);
  v5 = xmmword_2102DAFD0;
  strcpy((char *)__p, "Remove all 3DOF anchors");
  sub_20EE16850(v3, a2, &__p);
  if (SHIBYTE(v5) < 0)
    operator delete(__p);
}

void sub_20EE1EEA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EE1EEC0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio22user_anchor_node_group30AnchorTransformationNodeWorkerclERKNS1_17Remove3DOFAnchorsEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio22user_anchor_node_group30AnchorTransformationNodeWorkerclERKNS1_17Remove3DOFAnchorsEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio22user_anchor_node_group30AnchorTransformationNodeWorkerclERKNS1_17Remove3DOFAnchorsEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio22user_anchor_node_group30AnchorTransformationNodeWorkerclERKNS1_17Remove3DOFAnchorsEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EE1EF2C()
{
  return &unk_24C9EAF28;
}

_QWORD *sub_20EE1EF38(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v15;
  float v17;
  float v18;
  uint64_t v19;
  _QWORD *v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t prime;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;

  v7 = sub_2102322B4((unsigned __int8 *)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v12[1];
            if (v15 == v7)
            {
              if (v12[2] == *(_QWORD *)a2 && v12[3] == *(_QWORD *)(a2 + 8))
                return v12;
            }
            else if ((v15 & (v9 - 1)) != v3)
            {
              goto LABEL_31;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_31;
          }
        }
        do
        {
          v13 = v12[1];
          if (v13 == v7)
          {
            if (v12[2] == *(_QWORD *)a2 && v12[3] == *(_QWORD *)(a2 + 8))
              return v12;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_31:
  v12 = operator new(0x20uLL);
  *v12 = 0;
  v12[1] = v8;
  *((_OWORD *)v12 + 1) = *a3;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (v9 && (float)(v18 * (float)v9) >= v17)
  {
    v19 = *(_QWORD *)a1;
    v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v20)
    {
LABEL_34:
      *v12 = *v20;
LABEL_69:
      *v20 = v12;
      goto LABEL_70;
    }
  }
  else
  {
    v21 = 1;
    if (v9 >= 3)
      v21 = (v9 & (v9 - 1)) != 0;
    v22 = v21 | (2 * v9);
    v23 = vcvtps_u32_f32(v17 / v18);
    if (v22 <= v23)
      prime = v23;
    else
      prime = v22;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v9 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v9)
      goto LABEL_45;
    if (prime < v9)
    {
      v25 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        v25 = std::__next_prime(v25);
      }
      else
      {
        v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2)
          v25 = v27;
      }
      if (prime <= v25)
        prime = v25;
      if (prime < v9)
LABEL_45:
        sub_20E8D2B3C(a1, prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    v28 = v9 - 1;
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
      {
        v3 = v8 % v9;
        v19 = *(_QWORD *)a1;
        v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v8 % v9));
        if (v20)
          goto LABEL_34;
      }
      else
      {
        v3 = v8;
        v19 = *(_QWORD *)a1;
        v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
        if (v20)
          goto LABEL_34;
      }
    }
    else
    {
      v3 = v28 & v8;
      v19 = *(_QWORD *)a1;
      v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v28 & v8));
      if (v20)
        goto LABEL_34;
    }
  }
  *v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v19 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    v29 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v29 >= v9)
        v29 %= v9;
    }
    else
    {
      v29 &= v9 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v29);
    goto LABEL_69;
  }
LABEL_70:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_20EE1F254(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20EE1F268(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  void *__p[2];
  uint64_t v11;
  _BYTE v12[305];

  sub_20E9EE95C(*(_QWORD *)(a2 + 24));
  if (*(char *)(a3 + 23) < 0)
  {
    sub_20E860C04(__p, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a3;
    v11 = *(_QWORD *)(a3 + 16);
  }
  memcpy(v12, (const void *)(a3 + 24), sizeof(v12));
  sub_20EAD90B0(a2, (uint64_t)__p);
  if (SHIBYTE(v11) < 0)
    operator delete(__p[0]);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)(v5 + 88) - 8);
  sub_20E9EE4D0((uint64_t *)(v5 + 48), *(_QWORD *)(v5 + 16) - v6 - 9);
  v7 = *(_QWORD *)(v5 + 48);
  if (v7)
    memmove((void *)(*(_QWORD *)(v5 + 24) + v6), *(const void **)(v5 + 56), v7);
  *(_QWORD *)(v5 + 48) = 0;
  v8 = *(_QWORD *)(v5 + 80);
  v9 = *(_QWORD *)(v5 + 88) - 8;
  *(_QWORD *)(v5 + 88) = v9;
  if (v8 == v9)
  {
    std::ostream::write();
    if (*(_BYTE *)(v5 + 40))
    {
      free(*(void **)(v5 + 24));
      *(_BYTE *)(v5 + 40) = 0;
    }
  }
}

void sub_20EE1F384(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EE1F3A4()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EE1F3B8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9EAF48;
  result[1] = v3;
  return result;
}

uint64_t sub_20EE1F3EC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9EAF48;
  a2[1] = v2;
  return result;
}

void sub_20EE1F408(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  void *__p;
  __int128 v5;

  v3 = *(_QWORD *)(a1 + 8);
  __p = operator new(0x20uLL);
  v5 = xmmword_2102DBFE0;
  strcpy((char *)__p, "Keyframe deleted from map");
  sub_20EE16850(v3, a2, &__p);
  if (SHIBYTE(v5) < 0)
    operator delete(__p);
}

void sub_20EE1F494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EE1F4B0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio22user_anchor_node_group30AnchorTransformationNodeWorker20UpdateRemovedAnchorsERKNSt3__1"
                     "10shared_ptrIKNS0_15odometry_engine11VIOMetadataEEERS6_E3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio22user_anchor_node_group30AnchorTransformationNodeWorker20UpdateRemovedAnchor"
                                "sERKNSt3__110shared_ptrIKNS0_15odometry_engine11VIOMetadataEEERS6_E3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio22user_anchor_node_group30AnchorTransformationNodeWorker20UpdateRemovedAnchorsERKNSt3__110shared_ptrIKNS0_15odometry_engine11VIOMetadataEEERS6_E3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio22user_anchor_node_group30AnchorTransformationNodeWorker20UpdateRemovedAnchorsERKNSt3__110shared_ptrIKNS0_15odometry_engine11VIOMetadataEEERS6_E3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EE1F51C()
{
  return &unk_24C9EAFA8;
}

void sub_20EE1F52C()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20EE1F540(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24C9EAFC8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_20EE1F580(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C9EAFC8;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20EE1F5A8(uint64_t a1, uint64_t a2, double a3, float64x2_t a4, double a5, double a6, float64x2_t a7)
{
  uint64_t **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float64x2_t *v12;
  float64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64x2_t v17;
  int64x2_t v18;
  unint64_t v19;
  float64x2_t v20;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v32;
  double v33;
  double v35;
  float64x2_t *v36;
  float64x2_t v37;
  float64x2_t *v38;
  float64x2_t v39;
  float64x2_t v43;
  float64x2_t v44;
  double v47;
  double v49;
  _QWORD *v50;
  __int16 v51;
  uint64_t *v52;
  unsigned __int8 v53;
  char *v55;
  size_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t k;
  uint64_t v60;
  uint64_t *v61;
  unsigned __int8 v62;
  char *v64;
  size_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t j;
  uint64_t v69;
  uint64_t *v70;
  unsigned __int8 v71;
  char *v73;
  size_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t i;
  uint64_t v78;
  uint64_t *v79;
  unsigned __int8 v80;
  char *v82;
  size_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t m;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  __int128 v90;
  char *v91;
  uint64_t *v92[2];
  __uint64_t v93[2];
  _BYTE v94[37];
  _OWORD __src[24];
  void *v96[2];
  void *__p;
  char v98;
  char v99;
  char v100;
  char v101;
  uint64_t v102;

  v102 = *MEMORY[0x24BDAC8D0];
  v8 = *(uint64_t ***)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  v92[0] = *(uint64_t **)(a1 + 8);
  v92[1] = (uint64_t *)a2;
  v10 = **v8;
  v11 = *(_QWORD *)(v10 + 4416);
  v12 = *(float64x2_t **)(v10 + 4424);
  if ((float64x2_t *)v11 == v12)
  {
    sub_20EE20534(v92);
    v70 = sub_210219C18();
    sub_2102323F4((unsigned __int8 *)a2, v94);
    v71 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
    if ((v71 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
    {
      __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DDD0);
    }
    if (!atomic_load(&qword_254A5A450))
      goto LABEL_82;
    LODWORD(__src[0]) = 136315138;
    *(_QWORD *)((char *)__src + 4) = v94;
    v73 = (char *)_os_log_send_and_compose_impl();
    v74 = strlen(v73);
    v93[0] = 0;
    pthread_threadid_np(0, v93);
    v75 = v93[0];
    timespec_get((timespec *)v93, 1);
    sub_210219E20(__src, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v70 + 1), (__int128 *)(v70 + 5), "Anchors:Msg:3DOF Anchor removed from map with id: %s because cannot find keyframe anchor to attach", 0x62uLL, v73, v74, v75, v93);
    std::mutex::lock(&stru_254A5A410);
    v76 = qword_254A5A458;
    for (i = unk_254A5A460; v76 != i; v76 += 40)
    {
      v78 = *(_QWORD *)(v76 + 32);
      if (!v78)
        sub_20E86D37C();
      (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v78 + 48))(v78, __src);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (SHIBYTE(__src[8]) < 0)
    {
      operator delete(*((void **)&__src[7] + 1));
      if ((SBYTE7(__src[7]) & 0x80000000) == 0)
      {
LABEL_43:
        if (!BYTE8(__src[5]))
        {
LABEL_75:
          if (BYTE8(__src[3]) && SBYTE7(__src[3]) < 0)
            operator delete(*(void **)&__src[2]);
          if (SHIBYTE(__src[1]) < 0)
            operator delete(*((void **)&__src[0] + 1));
          if (v73)
            free(v73);
LABEL_82:
          if (!os_signpost_enabled((os_log_t)*v70))
            return;
          LODWORD(__src[0]) = 136315138;
          *(_QWORD *)((char *)__src + 4) = v94;
          goto LABEL_97;
        }
LABEL_73:
        if (SBYTE7(__src[5]) < 0)
          operator delete(*(void **)&__src[4]);
        goto LABEL_75;
      }
    }
    else if ((SBYTE7(__src[7]) & 0x80000000) == 0)
    {
      goto LABEL_43;
    }
    operator delete(*(void **)&__src[6]);
    if (!BYTE8(__src[5]))
      goto LABEL_75;
    goto LABEL_73;
  }
  v14 = *(double *)v11;
  v15 = *(_QWORD *)v11 >> 8;
  v16 = *(unsigned int *)(v11 + 8);
  if ((float64x2_t *)(v11 + 144) != v12)
  {
    v17.i64[0] = *(_QWORD *)(a2 + 56);
    a4.f64[0] = *(float64_t *)(a2 + 64);
    v18.i64[0] = *(_QWORD *)(a2 + 48);
    *(_QWORD *)&a7.f64[0] = *(_QWORD *)(a2 + 120) ^ 0x8000000000000000;
    v19 = *(_QWORD *)(a2 + 136) ^ 0x8000000000000000;
    v17.i64[1] = *(_QWORD *)(a2 + 80);
    v18.i64[1] = *(_QWORD *)(a2 + 72);
    v37 = vmlaq_f64(vmlaq_f64(vmulq_f64((float64x2_t)vzip1q_s64(v18, v17), (float64x2_t)vdupq_n_s64(*(unint64_t *)&a7.f64[0])), (float64x2_t)vdupq_n_s64(*(_QWORD *)(a2 + 128) ^ 0x8000000000000000), (float64x2_t)vzip2q_s64(v18, v17)), (float64x2_t)vdupq_n_s64(v19), *(float64x2_t *)(a2 + 96));
    v20 = vmulq_f64(a4, a7);
    v20.f64[0] = v20.f64[0]
               + *(double *)(a2 + 88) * COERCE_DOUBLE(*(_QWORD *)(a2 + 128) ^ 0x8000000000000000)
               + *(double *)(a2 + 112) * *(double *)&v19;
    v17.i64[0] = *(_QWORD *)(v11 + 32);
    _D6 = *(_QWORD *)(v11 + 96);
    _D16 = *(double *)(v11 + 128);
    _Q17 = *(float64x2_t *)(v11 + 112);
    v24 = vnegq_f64(_Q17);
    v17.i64[1] = *(_QWORD *)(v11 + 64);
    v25 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v11 + 16), *(int64x2_t *)(v11 + 48)), v24.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)(v11 + 16), *(int64x2_t *)(v11 + 48)), _Q17, 1), (float64x2_t)v17, _D16, 0);
    _Q2 = vmulq_f64(*(float64x2_t *)(v11 + 80), v24);
    _D4 = *(_QWORD *)(v11 + 88);
    __asm
    {
      FMLS            D2, D4, V17.D[1]
      FMLS            D2, D6, V16.D[0]
    }
    v32.f64[0] = v37.f64[0];
    *(_QWORD *)&v32.f64[1] = vextq_s8((int8x16_t)v37, (int8x16_t)v37, 8uLL).u64[0];
    *(_QWORD *)&v33 = *(_OWORD *)&vsubq_f64(v20, _Q2);
    _D6 = vsubq_f64(v32, v25).f64[1];
    __asm { FMLA            D2, D6, V4.D[1] }
    v35 = vmlad_n_f64(_Q2.f64[0], v33, v33);
    v36 = (float64x2_t *)(v11 + 256);
    v37.f64[1] = v32.f64[1];
    do
    {
      v39.f64[0] = v36[-5].f64[0];
      _D6 = v36[-1].f64[0];
      _D16 = v36[1].f64[0];
      _Q17 = *v36;
      v43 = vnegq_f64(*v36);
      v39.f64[1] = v36[-3].f64[0];
      v44 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v36[-6], (int64x2_t)v36[-4]), v43.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v36[-6], (int64x2_t)v36[-4]), *v36, 1), v39, _D16, 0);
      _Q3 = vmulq_f64(v36[-2], v43);
      _D4 = v36[-2].f64[1];
      __asm
      {
        FMLS            D3, D4, V17.D[1]
        FMLS            D3, D6, V16.D[0]
      }
      *(_QWORD *)&v47 = *(_OWORD *)&vsubq_f64(v20, _Q3);
      _D6 = vsubq_f64(v37, v44).f64[1];
      __asm { FMLA            D3, D6, V4.D[1] }
      v49 = vmlad_n_f64(_Q3.f64[0], v47, v47);
      if (v49 < v35)
      {
        v14 = v36[-7].f64[0];
        v15 = *(_QWORD *)&v14 >> 8;
        v16 = LODWORD(v36[-7].f64[1]);
        v35 = v49;
      }
      v38 = v36 + 2;
      v36 += 9;
    }
    while (v38 != v12);
  }
  LOBYTE(__src[0]) = LOBYTE(v14);
  *(_DWORD *)((char *)__src + 1) = v15;
  *(_WORD *)((char *)__src + 5) = WORD2(v15);
  BYTE7(__src[0]) = BYTE6(v15);
  *((_QWORD *)&__src[0] + 1) = v16 << 32;
  LOBYTE(__src[1]) = 0;
  v101 = 0;
  v50 = sub_20EE1CCB4((_QWORD *)(v9 + 712), (uint64_t)__src);
  if (v101 && v100 && v99 < 0)
    operator delete(__p);
  if (!v50 || !*((_BYTE *)v50 + 448))
  {
    sub_20EE20534(v92);
    v61 = sub_210219C18();
    sub_2102323F4((unsigned __int8 *)a2, v94);
    v62 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
    if ((v62 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
    {
      __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DDD0);
    }
    if (!atomic_load(&qword_254A5A450))
      goto LABEL_69;
    LODWORD(__src[0]) = 136315138;
    *(_QWORD *)((char *)__src + 4) = v94;
    v64 = (char *)_os_log_send_and_compose_impl();
    v65 = strlen(v64);
    v93[0] = 0;
    pthread_threadid_np(0, v93);
    v66 = v93[0];
    timespec_get((timespec *)v93, 1);
    sub_210219E20(__src, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v61 + 1), (__int128 *)(v61 + 5), "Anchors:Msg:3DOF Anchor removed from map with id: %s because cannot find desired keyframe anchor in map", 0x67uLL, v64, v65, v66, v93);
    std::mutex::lock(&stru_254A5A410);
    v67 = qword_254A5A458;
    for (j = unk_254A5A460; v67 != j; v67 += 40)
    {
      v69 = *(_QWORD *)(v67 + 32);
      if (!v69)
        sub_20E86D37C();
      (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v69 + 48))(v69, __src);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (SHIBYTE(__src[8]) < 0)
    {
      operator delete(*((void **)&__src[7] + 1));
      if ((SBYTE7(__src[7]) & 0x80000000) == 0)
      {
LABEL_34:
        if (!BYTE8(__src[5]))
        {
LABEL_62:
          if (BYTE8(__src[3]) && SBYTE7(__src[3]) < 0)
            operator delete(*(void **)&__src[2]);
          if (SHIBYTE(__src[1]) < 0)
            operator delete(*((void **)&__src[0] + 1));
          if (v64)
            free(v64);
LABEL_69:
          if (!os_signpost_enabled((os_log_t)*v61))
            return;
          LODWORD(__src[0]) = 136315138;
          *(_QWORD *)((char *)__src + 4) = v94;
LABEL_97:
          _os_signpost_emit_unreliably_with_name_impl();
          return;
        }
LABEL_60:
        if (SBYTE7(__src[5]) < 0)
          operator delete(*(void **)&__src[4]);
        goto LABEL_62;
      }
    }
    else if ((SBYTE7(__src[7]) & 0x80000000) == 0)
    {
      goto LABEL_34;
    }
    operator delete(*(void **)&__src[6]);
    if (!BYTE8(__src[5]))
      goto LABEL_62;
    goto LABEL_60;
  }
  if (*(_BYTE *)(a2 + 240))
    *(_BYTE *)(a2 + 240) = 0;
  if (*(_BYTE *)(a2 + 272))
    *(_BYTE *)(a2 + 272) = 0;
  v51 = sub_20EE20A50(v9 + 704, (_OWORD *)v50 + 1, a2);
  if ((_BYTE)v51)
  {
    sub_20EE20534(v92);
    v52 = sub_210219C18();
    sub_2102323F4((unsigned __int8 *)a2, v94);
    v53 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
    if ((v53 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
    {
      __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DDD0);
    }
    if (!atomic_load(&qword_254A5A450))
      goto LABEL_95;
    LODWORD(__src[0]) = 136315138;
    *(_QWORD *)((char *)__src + 4) = v94;
    v55 = (char *)_os_log_send_and_compose_impl();
    v56 = strlen(v55);
    v93[0] = 0;
    pthread_threadid_np(0, v93);
    v57 = v93[0];
    timespec_get((timespec *)v93, 1);
    sub_210219E20(__src, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v52 + 1), (__int128 *)(v52 + 5), "Anchors:Msg:3DOF Anchor removed from map with id: %s because cannot attach to new keyframe anchor", 0x61uLL, v55, v56, v57, v93);
    std::mutex::lock(&stru_254A5A410);
    v58 = qword_254A5A458;
    for (k = unk_254A5A460; v58 != k; v58 += 40)
    {
      v60 = *(_QWORD *)(v58 + 32);
      if (!v60)
        sub_20E86D37C();
      (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v60 + 48))(v60, __src);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (SHIBYTE(__src[8]) < 0)
    {
      operator delete(*((void **)&__src[7] + 1));
      if ((SBYTE7(__src[7]) & 0x80000000) == 0)
      {
LABEL_25:
        if (!BYTE8(__src[5]))
        {
LABEL_88:
          if (BYTE8(__src[3]) && SBYTE7(__src[3]) < 0)
            operator delete(*(void **)&__src[2]);
          if (SHIBYTE(__src[1]) < 0)
            operator delete(*((void **)&__src[0] + 1));
          if (v55)
            free(v55);
LABEL_95:
          if (!os_signpost_enabled((os_log_t)*v52))
            return;
          LODWORD(__src[0]) = 136315138;
          *(_QWORD *)((char *)__src + 4) = v94;
          goto LABEL_97;
        }
LABEL_86:
        if (SBYTE7(__src[5]) < 0)
          operator delete(*(void **)&__src[4]);
        goto LABEL_88;
      }
    }
    else if ((SBYTE7(__src[7]) & 0x80000000) == 0)
    {
      goto LABEL_25;
    }
    operator delete(*(void **)&__src[6]);
    if (!BYTE8(__src[5]))
      goto LABEL_88;
    goto LABEL_86;
  }
  if (*(_BYTE *)(v9 + 1386))
    sub_20EE1EF38(v9 + 880, a2, (_OWORD *)a2);
  if ((v51 & 0x100) != 0)
    sub_20EE1AFCC(v9, (uint64_t)(v50 + 2), (_OWORD *)a2);
  v79 = sub_210219C18();
  sub_2102323F4((unsigned __int8 *)a2, v94);
  v80 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v80 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    LODWORD(__src[0]) = 136315138;
    *(_QWORD *)((char *)__src + 4) = v94;
    v82 = (char *)_os_log_send_and_compose_impl();
    v83 = strlen(v82);
    v93[0] = 0;
    pthread_threadid_np(0, v93);
    v84 = v93[0];
    timespec_get((timespec *)v93, 1);
    sub_210219E20(__src, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v79 + 1), (__int128 *)(v79 + 5), "Anchors:Msg:3DOF Anchor with id: %s is reanchored", 0x31uLL, v82, v83, v84, v93);
    std::mutex::lock(&stru_254A5A410);
    v85 = qword_254A5A458;
    for (m = unk_254A5A460; v85 != m; v85 += 40)
    {
      v87 = *(_QWORD *)(v85 + 32);
      if (!v87)
        sub_20E86D37C();
      (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v87 + 48))(v87, __src);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (SHIBYTE(__src[8]) < 0)
    {
      operator delete(*((void **)&__src[7] + 1));
      if ((SBYTE7(__src[7]) & 0x80000000) == 0)
      {
LABEL_56:
        if (!BYTE8(__src[5]))
        {
LABEL_103:
          if (BYTE8(__src[3]) && SBYTE7(__src[3]) < 0)
            operator delete(*(void **)&__src[2]);
          if (SHIBYTE(__src[1]) < 0)
            operator delete(*((void **)&__src[0] + 1));
          if (v82)
            free(v82);
          goto LABEL_110;
        }
LABEL_101:
        if (SBYTE7(__src[5]) < 0)
          operator delete(*(void **)&__src[4]);
        goto LABEL_103;
      }
    }
    else if ((SBYTE7(__src[7]) & 0x80000000) == 0)
    {
      goto LABEL_56;
    }
    operator delete(*(void **)&__src[6]);
    if (!BYTE8(__src[5]))
      goto LABEL_103;
    goto LABEL_101;
  }
LABEL_110:
  if (os_signpost_enabled((os_log_t)*v79))
  {
    LODWORD(__src[0]) = 136315138;
    *(_QWORD *)((char *)__src + 4) = v94;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  if (**(_BYTE **)(a1 + 32))
  {
    v88 = **(_QWORD **)(a1 + 8);
    sub_20EE2262C((char *)v50 + 32, a2, __src);
    v89 = *(_QWORD *)(v88 + 4304);
    if (v89 >= *(_QWORD *)(v88 + 4312))
    {
      v91 = sub_20EE1E1C8((char **)(v88 + 4296), (uint64_t)__src);
    }
    else
    {
      memcpy(*(void **)(v88 + 4304), __src, 0x179uLL);
      *(_BYTE *)(v89 + 384) = 0;
      *(_BYTE *)(v89 + 408) = 0;
      if (v98)
      {
        v90 = *(_OWORD *)v96;
        *(_QWORD *)(v89 + 400) = __p;
        *(_OWORD *)(v89 + 384) = v90;
        v96[1] = 0;
        __p = 0;
        v96[0] = 0;
        *(_BYTE *)(v89 + 408) = 1;
      }
      v91 = (char *)(v89 + 416);
    }
    *(_QWORD *)(v88 + 4304) = v91;
    if (v98 && SHIBYTE(__p) < 0)
      operator delete(v96[0]);
  }
}

void sub_20EE202D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;

  if (LOBYTE(STACK[0x208]))
  {
    if (SLOBYTE(STACK[0x207]) < 0)
    {
      operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20EE204BC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio22user_anchor_node_group30AnchorTransformationNodeWorker23Reanchor3DOFUserAnchorsERKNSt3"
                     "__110shared_ptrIKNS0_15odometry_engine11VIOMetadataEEERS6_bE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio22user_anchor_node_group30AnchorTransformationNodeWorker23Reanchor3DOFUserAnc"
                                "horsERKNSt3__110shared_ptrIKNS0_15odometry_engine11VIOMetadataEEERS6_bE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio22user_anchor_node_group30AnchorTransformationNodeWorker23Reanchor3DOFUserAnchorsERKNSt3__110shared_ptrIKNS0_15odometry_engine11VIOMetadataEEERS6_bE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio22user_anchor_node_group30AnchorTransformationNodeWorker23Reanchor3DOFUserAnchorsERKNSt3__110shared_ptrIKNS0_15odometry_engine11VIOMetadataEEERS6_bE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EE20528()
{
  return &unk_24C9EB028;
}

void sub_20EE20534(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  __int128 v3;
  int v4;
  uint64_t v6;
  unint64_t v7;
  __int128 v8;
  char *v9;
  __int128 v10;
  void *__dst[2];
  uint64_t v12;
  char v13;
  _OWORD __src[24];
  __int128 __p;
  uint64_t v16;
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v1 = a1[1];
  v2 = **a1;
  v3 = *(_OWORD *)v1;
  LOBYTE(__dst[0]) = 0;
  v13 = 0;
  v4 = *((unsigned __int8 *)v1 + 40);
  if (*((_BYTE *)v1 + 40))
  {
    if (*((char *)v1 + 39) < 0)
    {
      v10 = v3;
      sub_20E860C04(__dst, (void *)v1[2], v1[3]);
      v1 = a1[1];
      v3 = v10;
    }
    else
    {
      *(_OWORD *)__dst = *((_OWORD *)v1 + 1);
      v12 = v1[4];
    }
    v13 = 1;
  }
  if (*((_BYTE *)v1 + 320))
    v6 = v1[38];
  else
    v6 = -1;
  __src[2] = 0uLL;
  __src[4] = 0uLL;
  __src[6] = 0uLL;
  __src[0] = v3;
  __src[1] = 0x3FF0000000000000uLL;
  __src[3] = 0x3FF0000000000000uLL;
  __src[5] = 0x3FF0000000000000uLL;
  *(_QWORD *)&__src[7] = v6;
  DWORD2(__src[7]) = 0;
  LOBYTE(__src[8]) = 1;
  BYTE8(__src[8]) = 0;
  BYTE8(__src[23]) = 0;
  LOBYTE(__p) = 0;
  v17 = 0;
  if (v4)
  {
    if (SHIBYTE(v12) < 0)
    {
      sub_20E860C04(&__p, __dst[0], (unint64_t)__dst[1]);
    }
    else
    {
      __p = *(_OWORD *)__dst;
      v16 = v12;
    }
    v17 = 1;
  }
  v7 = *(_QWORD *)(v2 + 4328);
  if (v7 >= *(_QWORD *)(v2 + 4336))
  {
    v9 = sub_20EE1E1C8((char **)(v2 + 4320), (uint64_t)__src);
  }
  else
  {
    memcpy(*(void **)(v2 + 4328), __src, 0x179uLL);
    *(_BYTE *)(v7 + 384) = 0;
    *(_BYTE *)(v7 + 408) = 0;
    if (v17)
    {
      v8 = __p;
      *(_QWORD *)(v7 + 400) = v16;
      *(_OWORD *)(v7 + 384) = v8;
      v16 = 0;
      __p = 0uLL;
      *(_BYTE *)(v7 + 408) = 1;
    }
    v9 = (char *)(v7 + 416);
  }
  *(_QWORD *)(v2 + 4328) = v9;
  if (v17 && SHIBYTE(v16) < 0)
    operator delete((void *)__p);
  if (v13)
  {
    if (SHIBYTE(v12) < 0)
      operator delete(__dst[0]);
  }
}

void sub_20EE20714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a71;
  char a72;

  if (a72 && a71 < 0)
    operator delete(__p);
  if (a17)
  {
    if (a16 < 0)
      operator delete(a11);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20EE2075C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  void *v10;
  void *v11;
  _BYTE v12[16];
  void *v13;
  _QWORD *v14;
  char v15;
  _QWORD v16[3];

  v5 = (_QWORD *)(a1 + 8);
  result = (uint64_t)sub_20EE1CCB4((_QWORD *)(a1 + 8), a2);
  if (result)
  {
    sub_20E8D2CE8(v5, (_QWORD *)result, (uint64_t)v16);
    v14 = (_QWORD *)v16[0];
    v15 = 1;
    if (v16[0])
    {
      sub_20EE25854((void **)(v16[0] + 32), (char *)(a2 + 16));
      v7 = v14[57];
      for (i = v14[58]; v7 != i; v7 += 328)
      {
        v9 = *(_QWORD *)(a3 + 24);
        if (!v9)
          sub_20E86D37C();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 48))(v9, v7);
      }
      sub_20EE26458((uint64_t)v5, (uint64_t)&v14, (uint64_t)v12);
      v10 = v13;
      if (v13)
      {
        sub_20EE1C7E8((uint64_t)v13 + 16);
        operator delete(v10);
        v13 = 0;
      }
      v11 = v14;
      if (v14)
      {
        sub_20EE1C7E8((uint64_t)(v14 + 2));
        operator delete(v11);
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_20EE20868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20EE208A4((void **)va);
  _Unwind_Resume(a1);
}

void sub_20EE2087C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20EE208A4((void **)va);
  _Unwind_Resume(a1);
}

void sub_20EE20890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20EE208A4((void **)va);
  _Unwind_Resume(a1);
}

void **sub_20EE208A4(void **a1)
{
  void *v2;

  v2 = *a1;
  if (*a1)
  {
    sub_20EE1C7E8((uint64_t)v2 + 16);
    operator delete(v2);
    *a1 = 0;
  }
  return a1;
}

uint64_t sub_20EE208E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  _QWORD *v17;
  void *__p[3];

  v6 = (_QWORD *)(a1 + 8);
  result = (uint64_t)sub_20EE1CCB4((_QWORD *)(a1 + 8), a2);
  if (result)
  {
    sub_20E8D2CE8(v6, (_QWORD *)result, (uint64_t)__p);
    v8 = __p[0];
    v17 = __p[0];
    if (__p[0])
    {
      sub_20EE25854((void **)__p[0] + 4, (char *)(a2 + 16));
      v9 = v8[57];
      v10 = v8[58];
      if (v9 == v10)
        goto LABEL_12;
      v11 = (_QWORD *)(a1 + 48);
      do
      {
        v12 = sub_20EE267A0(v11, v9 + 16);
        if (v12)
        {
          v13 = v12 + 5;
          v14 = sub_20EE1CCB4(v12 + 5, v9);
          if (v14)
          {
            sub_20E8D2CE8(v13, v14, (uint64_t)__p);
            v15 = __p[0];
            __p[0] = 0;
            if (v15)
              operator delete(v15);
          }
        }
        v16 = *(_QWORD *)(a3 + 24);
        if (!v16)
          sub_20E86D37C();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 48))(v16, v9);
        v9 += 328;
      }
      while (v9 != v10);
      v8 = v17;
      if (v17)
      {
LABEL_12:
        sub_20EE1C7E8((uint64_t)(v8 + 2));
        operator delete(v8);
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_20EE20A14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20EE208A4((void **)va);
  _Unwind_Resume(a1);
}

void sub_20EE20A28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20EE208A4((void **)va);
  _Unwind_Resume(a1);
}

void sub_20EE20A3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20EE208A4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE20A50(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  void **v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  unsigned __int8 v11;
  char *v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  uint64_t *v19;
  unsigned __int8 v20;
  char *v22;
  size_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t m;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  _OWORD *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t *v53;
  unint64_t v54;
  uint8x8_t v55;
  void **v56;
  char *v57;
  unint64_t v59;
  _QWORD *v60;
  float v61;
  float v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  int v68;
  _BOOL8 v69;
  unint64_t v70;
  unint64_t v71;
  size_t prime;
  unint64_t v73;
  uint8x8_t v74;
  uint64_t v75;
  unint64_t v77;
  unint64_t v78;
  char *v79;
  void *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  __int128 v103;
  int v104;
  uint64_t *v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint8x8_t v110;
  uint64_t **v111;
  uint64_t *v112;
  unint64_t v113;
  size_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  unsigned __int8 *v121;
  unsigned __int8 *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  uint64_t *v127;
  int v128;
  unint64_t v129;
  uint64_t v130;
  int v131;
  uint64_t *v132;
  int v133;
  uint64_t v134;
  unint64_t v135;
  _QWORD *v136;
  _QWORD *v137;
  _BYTE *v138;
  __int128 v139;
  __int128 v140;
  _QWORD *v141;
  unint64_t v142;
  float v143;
  float v144;
  _BOOL8 v145;
  unint64_t v146;
  unint64_t v147;
  size_t v148;
  void *v149;
  void *v150;
  uint64_t v151;
  _QWORD *v152;
  size_t v153;
  size_t v154;
  size_t v155;
  _QWORD *k;
  size_t v157;
  uint64_t v158;
  unint64_t v159;
  uint8x8_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  int v164;
  unsigned __int8 *v165;
  unsigned __int8 *v166;
  uint64_t v167;
  _QWORD *v168;
  uint64_t v169;
  size_t v170;
  _QWORD *v171;
  unint64_t v172;
  _QWORD *v173;
  _QWORD *v174;
  void *v175;
  uint64_t *v176;
  _OWORD *v177;
  __int128 v178;
  void **v179;
  unsigned __int8 v180;
  unint64_t v181;
  char *v182;
  char *v183;
  size_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t j;
  uint64_t v188;
  int v189;
  void *v190;
  void *__s1;
  uint64_t v192;
  int v193;
  unsigned __int8 *v194;
  void *v195[2];
  char *v196;
  _OWORD *v197;
  _OWORD *v198;
  __int128 v199[24];
  void *v200;
  char v201;
  char v202;
  void *v203[2];
  __int128 __src;
  uint64_t v205;
  char v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  char v221;
  uint64_t v222;
  std::__shared_weak_count *v223;
  unsigned __int8 v224;
  __int128 v225;
  uint64_t v226;
  void *v227[50];
  void *v228[2];
  uint64_t v229;
  char v230;
  char v231;
  __uint64_t v232[2];
  _QWORD *v233;
  char v234;
  uint64_t v235;

  v235 = *MEMORY[0x24BDAC8D0];
  v6 = (void **)(a1 + 48);
  v7 = a3 + 16;
  v8 = sub_20EE267A0((_QWORD *)(a1 + 48), a3 + 16);
  v9 = (unint64_t)v8;
  if (!v8)
    goto LABEL_13;
  if ((unint64_t)v8[8] < *(_QWORD *)a1)
  {
    if (sub_20EE1CCB4(v8 + 5, a3))
    {
      v10 = sub_210219C18();
      sub_2102323F4((unsigned __int8 *)a3, v203);
      v11 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
      if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
      {
        __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DDD0);
      }
      if (!atomic_load(&qword_254A5A450))
        goto LABEL_121;
      LODWORD(v227[0]) = 136315138;
      *(void **)((char *)v227 + 4) = v203;
      v13 = (char *)_os_log_send_and_compose_impl();
      v14 = strlen(v13);
      v232[0] = 0;
      pthread_threadid_np(0, v232);
      v15 = v232[0];
      timespec_get((timespec *)v232, 1);
      sub_210219E20(v227, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v10 + 1), (__int128 *)(v10 + 5), "Anchors:Error:Failed to add anchor %s as it was a duplicate", 0x3BuLL, v13, v14, v15, v232);
      std::mutex::lock(&stru_254A5A410);
      v16 = qword_254A5A458;
      for (i = unk_254A5A460; v16 != i; v16 += 40)
      {
        v18 = *(_QWORD *)(v16 + 32);
        if (!v18)
          sub_20E86D37C();
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v18 + 48))(v18, v227);
      }
      std::mutex::unlock(&stru_254A5A410);
      if (SHIBYTE(v227[17]) < 0)
      {
        operator delete(v227[15]);
        if ((SHIBYTE(v227[14]) & 0x80000000) == 0)
        {
LABEL_11:
          if (!LOBYTE(v227[11]))
          {
LABEL_114:
            if (LOBYTE(v227[7]) && SHIBYTE(v227[6]) < 0)
              operator delete(v227[4]);
            if (SHIBYTE(v227[3]) < 0)
              operator delete(v227[1]);
            if (v13)
              free(v13);
LABEL_121:
            if (os_signpost_enabled((os_log_t)*v10))
            {
              LODWORD(v227[0]) = 136315138;
              *(void **)((char *)v227 + 4) = v203;
              _os_signpost_emit_unreliably_with_name_impl();
            }
            return 4;
          }
LABEL_112:
          if (SHIBYTE(v227[10]) < 0)
            operator delete(v227[8]);
          goto LABEL_114;
        }
      }
      else if ((SHIBYTE(v227[14]) & 0x80000000) == 0)
      {
        goto LABEL_11;
      }
      operator delete(v227[12]);
      if (!LOBYTE(v227[11]))
        goto LABEL_114;
      goto LABEL_112;
    }
LABEL_13:
    *(_OWORD *)v227 = *a2;
    LOBYTE(v227[2]) = 0;
    v231 = 0;
    *(_OWORD *)v203 = *(_OWORD *)a3;
    LOBYTE(__src) = 0;
    v206 = 0;
    if (*(_BYTE *)(a3 + 40))
    {
      if (*(char *)(a3 + 39) < 0)
      {
        sub_20E860C04(&__src, *(void **)(a3 + 16), *(_QWORD *)(a3 + 24));
      }
      else
      {
        __src = *(_OWORD *)v7;
        v205 = *(_QWORD *)(v7 + 16);
      }
      v206 = 1;
    }
    v28 = *(_OWORD *)(a3 + 256);
    v219 = *(_OWORD *)(a3 + 240);
    v220 = v28;
    v221 = *(_BYTE *)(a3 + 272);
    v29 = *(_OWORD *)(a3 + 192);
    v215 = *(_OWORD *)(a3 + 176);
    v216 = v29;
    v30 = *(_OWORD *)(a3 + 224);
    v217 = *(_OWORD *)(a3 + 208);
    v218 = v30;
    v31 = *(_OWORD *)(a3 + 128);
    v211 = *(_OWORD *)(a3 + 112);
    v212 = v31;
    v32 = *(_OWORD *)(a3 + 160);
    v213 = *(_OWORD *)(a3 + 144);
    v214 = v32;
    v33 = *(_OWORD *)(a3 + 64);
    v207 = *(_OWORD *)(a3 + 48);
    v208 = v33;
    v34 = *(_OWORD *)(a3 + 96);
    v209 = *(_OWORD *)(a3 + 80);
    v210 = v34;
    LOBYTE(v222) = 0;
    v224 = 0;
    v194 = (unsigned __int8 *)v7;
    if (*(_BYTE *)(a3 + 296))
    {
      v35 = *(std::__shared_weak_count **)(a3 + 288);
      v222 = *(_QWORD *)(a3 + 280);
      v223 = v35;
      if (v35)
      {
        p_shared_owners = (unint64_t *)&v35->__shared_owners_;
        do
          v37 = __ldxr(p_shared_owners);
        while (__stxr(v37 + 1, p_shared_owners));
      }
      v38 = 1;
      v224 = 1;
    }
    else
    {
      v38 = 0;
    }
    v225 = *(_OWORD *)(a3 + 304);
    v226 = *(_QWORD *)(a3 + 320);
    v39 = operator new(0x148uLL);
    v40 = v39;
    v195[0] = v39;
    v195[1] = v39;
    v196 = (char *)v39 + 328;
    v197 = v39;
    v198 = v39;
    v232[0] = (__uint64_t)&v196;
    v232[1] = (__uint64_t)&v197;
    v233 = &v198;
    v234 = 0;
    *v39 = *(_OWORD *)v203;
    *((_BYTE *)v39 + 16) = 0;
    *((_BYTE *)v39 + 40) = 0;
    if (v206)
    {
      if (SHIBYTE(v205) < 0)
      {
        sub_20E860C04((_BYTE *)v39 + 16, (void *)__src, *((unint64_t *)&__src + 1));
        v38 = v224;
      }
      else
      {
        v39[1] = __src;
        *((_QWORD *)v39 + 4) = v205;
      }
      *((_BYTE *)v40 + 40) = 1;
    }
    v41 = v220;
    v40[15] = v219;
    v40[16] = v41;
    *((_BYTE *)v40 + 272) = v221;
    v42 = v216;
    v40[11] = v215;
    v40[12] = v42;
    v43 = v218;
    v40[13] = v217;
    v40[14] = v43;
    v44 = v212;
    v40[7] = v211;
    v40[8] = v44;
    v45 = v214;
    v40[9] = v213;
    v40[10] = v45;
    v46 = v208;
    v40[3] = v207;
    v40[4] = v46;
    v47 = v210;
    v40[5] = v209;
    v40[6] = v47;
    *((_BYTE *)v40 + 280) = 0;
    *((_BYTE *)v40 + 296) = 0;
    if ((_DWORD)v38)
    {
      v48 = v223;
      *((_QWORD *)v40 + 35) = v222;
      *((_QWORD *)v40 + 36) = v48;
      if (v48)
      {
        v49 = (unint64_t *)&v48->__shared_owners_;
        do
          v50 = __ldxr(v49);
        while (__stxr(v50 + 1, v49));
      }
      *((_BYTE *)v40 + 296) = 1;
    }
    v40[19] = v225;
    *((_QWORD *)v40 + 40) = v226;
    v195[1] = (char *)v198 + 328;
    v51 = sub_2102322B4((unsigned __int8 *)v227);
    v52 = v51;
    v53 = (uint64_t *)(a1 + 8);
    v54 = *(_QWORD *)(a1 + 16);
    if (v54)
    {
      v55 = (uint8x8_t)vcnt_s8((int8x8_t)v54);
      v55.i16[0] = vaddlv_u8(v55);
      if (v55.u32[0] > 1uLL)
      {
        v38 = v51;
        if (v51 >= v54)
          v38 = v51 % v54;
      }
      else
      {
        v38 = (v54 - 1) & v51;
      }
      v56 = *(void ***)(*v53 + 8 * v38);
      if (v56)
      {
        v57 = (char *)*v56;
        if (*v56)
        {
          if (v55.u32[0] < 2uLL)
          {
            while (1)
            {
              v66 = *((_QWORD *)v57 + 1);
              if (v66 == v51)
              {
                if (*((void **)v57 + 2) == v227[0] && *((void **)v57 + 3) == v227[1])
                  goto LABEL_78;
              }
              else if ((v66 & (v54 - 1)) != v38)
              {
                goto LABEL_62;
              }
              v57 = *(char **)v57;
              if (!v57)
                goto LABEL_62;
            }
          }
          do
          {
            v59 = *((_QWORD *)v57 + 1);
            if (v59 == v51)
            {
              if (*((void **)v57 + 2) == v227[0] && *((void **)v57 + 3) == v227[1])
              {
LABEL_78:
                v68 = 1;
                v65 = (uint64_t)v194;
                goto LABEL_143;
              }
            }
            else
            {
              if (v59 >= v54)
                v59 %= v54;
              if (v59 != v38)
                break;
            }
            v57 = *(char **)v57;
          }
          while (v57);
        }
      }
    }
LABEL_62:
    v57 = (char *)operator new(0x1E0uLL);
    v60 = (_QWORD *)(a1 + 24);
    v232[0] = (__uint64_t)v57;
    v232[1] = a1 + 24;
    *(_QWORD *)v57 = 0;
    *((_QWORD *)v57 + 1) = v52;
    *((_OWORD *)v57 + 1) = *(_OWORD *)v227;
    v57[32] = 0;
    v57[448] = 0;
    if (v231)
    {
      memcpy(v57 + 32, &v227[2], 0x179uLL);
      v57[416] = 0;
      v57[440] = 0;
      if (v230)
      {
        *((_OWORD *)v57 + 26) = *(_OWORD *)v228;
        *((_QWORD *)v57 + 54) = v229;
        v229 = 0;
        v228[0] = 0;
        v228[1] = 0;
        v57[440] = 1;
      }
      v57[448] = 1;
    }
    *(_OWORD *)(v57 + 456) = *(_OWORD *)v195;
    *((_QWORD *)v57 + 59) = v196;
    v195[1] = 0;
    v196 = 0;
    v195[0] = 0;
    LOBYTE(v233) = 1;
    v61 = (float)(unint64_t)(*(_QWORD *)(a1 + 32) + 1);
    v62 = *(float *)(a1 + 40);
    if (v54 && (float)(v62 * (float)v54) >= v61)
    {
      v63 = *v53;
      v64 = *(_QWORD **)(*v53 + 8 * v38);
      if (v64)
      {
LABEL_69:
        *(_QWORD *)v57 = *v64;
        v65 = (uint64_t)v194;
        goto LABEL_141;
      }
    }
    else
    {
      v69 = 1;
      if (v54 >= 3)
        v69 = (v54 & (v54 - 1)) != 0;
      v70 = v69 | (2 * v54);
      v71 = vcvtps_u32_f32(v61 / v62);
      if (v70 <= v71)
        prime = v71;
      else
        prime = v70;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
        v54 = *(_QWORD *)(a1 + 16);
      }
      if (prime > v54)
        goto LABEL_89;
      if (prime < v54)
      {
        v73 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 32) / *(float *)(a1 + 40));
        if (v54 < 3 || (v74 = (uint8x8_t)vcnt_s8((int8x8_t)v54), v74.i16[0] = vaddlv_u8(v74), v74.u32[0] > 1uLL))
        {
          v73 = std::__next_prime(v73);
        }
        else
        {
          v75 = 1 << -(char)__clz(v73 - 1);
          if (v73 >= 2)
            v73 = v75;
        }
        if (prime <= v73)
          prime = v73;
        if (prime < v54)
LABEL_89:
          sub_20E8D2B3C(a1 + 8, prime);
      }
      v54 = *(_QWORD *)(a1 + 16);
      v77 = v54 - 1;
      if ((v54 & (v54 - 1)) != 0)
      {
        if (v52 >= v54)
        {
          v38 = v52 % v54;
          v63 = *v53;
          v64 = *(_QWORD **)(*v53 + 8 * (v52 % v54));
          if (v64)
            goto LABEL_69;
        }
        else
        {
          v38 = v52;
          v63 = *v53;
          v64 = *(_QWORD **)(*v53 + 8 * v52);
          if (v64)
            goto LABEL_69;
        }
      }
      else
      {
        v38 = v77 & v52;
        v63 = *v53;
        v64 = *(_QWORD **)(*v53 + 8 * (v77 & v52));
        if (v64)
          goto LABEL_69;
      }
    }
    *(_QWORD *)v57 = *v60;
    *v60 = v57;
    *(_QWORD *)(v63 + 8 * v38) = v60;
    v65 = (uint64_t)v194;
    if (!*(_QWORD *)v57)
      goto LABEL_142;
    v78 = *(_QWORD *)(*(_QWORD *)v57 + 8);
    if ((v54 & (v54 - 1)) != 0)
    {
      if (v78 >= v54)
        v78 %= v54;
    }
    else
    {
      v78 &= v54 - 1;
    }
    v64 = (_QWORD *)(*v53 + 8 * v78);
LABEL_141:
    *v64 = v57;
LABEL_142:
    v68 = 0;
    ++*(_QWORD *)(a1 + 32);
LABEL_143:
    if (!v195[0])
    {
LABEL_159:
      if (v224)
      {
        v84 = v223;
        if (v223)
        {
          v85 = (unint64_t *)&v223->__shared_owners_;
          do
            v86 = __ldaxr(v85);
          while (__stlxr(v86 - 1, v85));
          if (!v86)
          {
            ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
            std::__shared_weak_count::__release_weak(v84);
          }
        }
      }
      if (v206 && SHIBYTE(v205) < 0)
        operator delete((void *)__src);
      if (v231 && v230 && SHIBYTE(v229) < 0)
        operator delete(v228[0]);
      if (v68)
      {
        v87 = *((_QWORD *)v57 + 58);
        if (v87 < *((_QWORD *)v57 + 59))
        {
          *(_OWORD *)v87 = *(_OWORD *)a3;
          *(_BYTE *)(v87 + 16) = 0;
          *(_BYTE *)(v87 + 40) = 0;
          if (*(_BYTE *)(a3 + 40))
          {
            if (*(char *)(a3 + 39) < 0)
            {
              sub_20E860C04((_BYTE *)(v87 + 16), *(void **)(a3 + 16), *(_QWORD *)(a3 + 24));
            }
            else
            {
              v88 = *(_OWORD *)v65;
              *(_QWORD *)(v87 + 32) = *(_QWORD *)(v65 + 16);
              *(_OWORD *)(v87 + 16) = v88;
            }
            *(_BYTE *)(v87 + 40) = 1;
          }
          v89 = *(_OWORD *)(a3 + 48);
          v90 = *(_OWORD *)(a3 + 80);
          *(_OWORD *)(v87 + 64) = *(_OWORD *)(a3 + 64);
          *(_OWORD *)(v87 + 80) = v90;
          *(_OWORD *)(v87 + 48) = v89;
          v91 = *(_OWORD *)(a3 + 96);
          v92 = *(_OWORD *)(a3 + 112);
          v93 = *(_OWORD *)(a3 + 144);
          *(_OWORD *)(v87 + 128) = *(_OWORD *)(a3 + 128);
          *(_OWORD *)(v87 + 144) = v93;
          *(_OWORD *)(v87 + 96) = v91;
          *(_OWORD *)(v87 + 112) = v92;
          v94 = *(_OWORD *)(a3 + 160);
          v95 = *(_OWORD *)(a3 + 176);
          v96 = *(_OWORD *)(a3 + 208);
          *(_OWORD *)(v87 + 192) = *(_OWORD *)(a3 + 192);
          *(_OWORD *)(v87 + 208) = v96;
          *(_OWORD *)(v87 + 160) = v94;
          *(_OWORD *)(v87 + 176) = v95;
          v97 = *(_OWORD *)(a3 + 224);
          v98 = *(_OWORD *)(a3 + 240);
          v99 = *(_OWORD *)(a3 + 256);
          *(_BYTE *)(v87 + 272) = *(_BYTE *)(a3 + 272);
          *(_OWORD *)(v87 + 240) = v98;
          *(_OWORD *)(v87 + 256) = v99;
          *(_OWORD *)(v87 + 224) = v97;
          *(_BYTE *)(v87 + 280) = 0;
          *(_BYTE *)(v87 + 296) = 0;
          if (*(_BYTE *)(a3 + 296))
          {
            *(_QWORD *)(v87 + 280) = *(_QWORD *)(a3 + 280);
            v100 = *(_QWORD *)(a3 + 288);
            *(_QWORD *)(v87 + 288) = v100;
            if (v100)
            {
              v101 = (unint64_t *)(v100 + 8);
              do
                v102 = __ldxr(v101);
              while (__stxr(v102 + 1, v101));
            }
            *(_BYTE *)(v87 + 296) = 1;
          }
          v103 = *(_OWORD *)(a3 + 304);
          *(_QWORD *)(v87 + 320) = *(_QWORD *)(a3 + 320);
          *(_OWORD *)(v87 + 304) = v103;
          *((_QWORD *)v57 + 58) = v87 + 328;
          *((_QWORD *)v57 + 58) = v87 + 328;
          if (!v9)
            goto LABEL_188;
          goto LABEL_179;
        }
        *((_QWORD *)v57 + 58) = sub_20EE25A30((void **)v57 + 57, a3);
      }
      if (!v9)
      {
LABEL_188:
        *(_OWORD *)v232 = *(_OWORD *)a3;
        memset(v227, 0, 32);
        LODWORD(v227[4]) = 1065353216;
        sub_20EE1EF38((uint64_t)v227, (uint64_t)v232, v232);
        v193 = v68;
        v104 = *(char *)(a3 + 39);
        if (v104 >= 0)
          v105 = (uint64_t *)v65;
        else
          v105 = *(uint64_t **)(a3 + 16);
        if (v104 >= 0)
          v106 = *(unsigned __int8 *)(a3 + 39);
        else
          v106 = *(_QWORD *)(a3 + 24);
        v107 = sub_20E8D177C((uint64_t)v203, v105, v106);
        v108 = v107;
        v109 = *(_QWORD *)(a1 + 56);
        if (v109)
        {
          v110 = (uint8x8_t)vcnt_s8((int8x8_t)v109);
          v110.i16[0] = vaddlv_u8(v110);
          if (v110.u32[0] > 1uLL)
          {
            v9 = v107;
            if (v107 >= v109)
              v9 = v107 % v109;
          }
          else
          {
            v9 = (v109 - 1) & v107;
          }
          v111 = (uint64_t **)*((_QWORD *)*v6 + v9);
          if (v111)
          {
            v112 = *v111;
            if (*v111)
            {
              v113 = v109 - 1;
              v114 = *(_QWORD *)(a3 + 24);
              if (*(char *)(a3 + 39) >= 0)
                v115 = *(unsigned __int8 *)(a3 + 39);
              else
                v115 = *(_QWORD *)(a3 + 24);
              if ((*(_BYTE *)(a3 + 39) & 0x80) != 0)
              {
                __s1 = *(void **)(a3 + 16);
                v192 = v115;
                if (v110.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v124 = v112[1];
                    if (v124 == v108)
                    {
                      v125 = *((unsigned __int8 *)v112 + 39);
                      v126 = (char)v125;
                      if ((v125 & 0x80u) != 0)
                        v125 = v112[3];
                      if (v115 == v125)
                      {
                        v127 = v126 >= 0 ? v112 + 2 : (uint64_t *)v112[2];
                        v128 = memcmp(__s1, v127, v114);
                        v115 = v192;
                        if (!v128)
                          goto LABEL_348;
                      }
                    }
                    else if ((v124 & v113) != v9)
                    {
                      goto LABEL_265;
                    }
                    v112 = (uint64_t *)*v112;
                    if (!v112)
                      goto LABEL_265;
                  }
                }
                while (1)
                {
                  v129 = v112[1];
                  if (v129 == v108)
                  {
                    v130 = *((unsigned __int8 *)v112 + 39);
                    v131 = (char)v130;
                    if ((v130 & 0x80u) != 0)
                      v130 = v112[3];
                    if (v115 == v130)
                    {
                      v132 = v131 >= 0 ? v112 + 2 : (uint64_t *)v112[2];
                      v133 = memcmp(__s1, v132, v114);
                      v115 = v192;
                      if (!v133)
                        goto LABEL_348;
                    }
                  }
                  else
                  {
                    if (v129 >= v109)
                      v129 %= v109;
                    if (v129 != v9)
                      goto LABEL_265;
                  }
                  v112 = (uint64_t *)*v112;
                  if (!v112)
                    goto LABEL_265;
                }
              }
              if (v110.u32[0] > 1uLL)
              {
                if (!*(_BYTE *)(a3 + 39))
                {
                  while (1)
                  {
                    v135 = v112[1];
                    if (v135 == v107)
                    {
                      v134 = *((unsigned __int8 *)v112 + 39);
                      if ((v134 & 0x80u) != 0)
                        v134 = v112[3];
                      if (v115 == v134)
                        goto LABEL_348;
                    }
                    else
                    {
                      if (v135 >= v109)
                        v135 %= v109;
                      if (v135 != v9)
                        goto LABEL_265;
                    }
                    v112 = (uint64_t *)*v112;
                    if (!v112)
                      goto LABEL_265;
                  }
                }
                while (1)
                {
                  v162 = v112[1];
                  if (v162 == v107)
                  {
                    v163 = *((unsigned __int8 *)v112 + 39);
                    v164 = (char)v163;
                    if ((v163 & 0x80u) != 0)
                      v163 = v112[3];
                    if (v115 == v163)
                    {
                      if (v164 >= 0)
                        v165 = (unsigned __int8 *)(v112 + 2);
                      else
                        v165 = (unsigned __int8 *)v112[2];
                      v166 = v194;
                      v167 = *(unsigned __int8 *)(a3 + 39);
                      while (*v166 == *v165)
                      {
                        ++v166;
                        ++v165;
                        if (!--v167)
                          goto LABEL_348;
                      }
                    }
                  }
                  else
                  {
                    if (v162 >= v109)
                      v162 %= v109;
                    if (v162 != v9)
                      goto LABEL_265;
                  }
                  v112 = (uint64_t *)*v112;
                  if (!v112)
                    goto LABEL_265;
                }
              }
              if (!*(_BYTE *)(a3 + 39))
              {
                while (1)
                {
                  v117 = v112[1];
                  if (v117 == v107)
                  {
                    v116 = *((unsigned __int8 *)v112 + 39);
                    if ((v116 & 0x80u) != 0)
                      v116 = v112[3];
                    if (v115 == v116)
                      goto LABEL_348;
                  }
                  else if ((v117 & v113) != v9)
                  {
                    goto LABEL_265;
                  }
                  v112 = (uint64_t *)*v112;
                  if (!v112)
                    goto LABEL_265;
                }
              }
              do
              {
                v118 = v112[1];
                if (v118 == v107)
                {
                  v119 = *((unsigned __int8 *)v112 + 39);
                  v120 = (char)v119;
                  if ((v119 & 0x80u) != 0)
                    v119 = v112[3];
                  if (v115 == v119)
                  {
                    if (v120 >= 0)
                      v121 = (unsigned __int8 *)(v112 + 2);
                    else
                      v121 = (unsigned __int8 *)v112[2];
                    v122 = v194;
                    v123 = *(unsigned __int8 *)(a3 + 39);
                    while (*v122 == *v121)
                    {
                      ++v122;
                      ++v121;
                      if (!--v123)
                        goto LABEL_348;
                    }
                  }
                }
                else if ((v118 & v113) != v9)
                {
                  break;
                }
                v112 = (uint64_t *)*v112;
              }
              while (v112);
            }
          }
        }
LABEL_265:
        v136 = operator new(0x50uLL);
        v137 = (_QWORD *)(a1 + 64);
        v203[0] = v136;
        v203[1] = (void *)(a1 + 64);
        LOBYTE(__src) = 0;
        *v136 = 0;
        v136[1] = v108;
        v138 = v136 + 2;
        if (*(char *)(a3 + 39) < 0)
        {
          sub_20E860C04(v138, *(void **)(a3 + 16), *(_QWORD *)(a3 + 24));
        }
        else
        {
          *(_OWORD *)v138 = *(_OWORD *)v194;
          v136[4] = *((_QWORD *)v194 + 2);
        }
        v139 = *(_OWORD *)v227;
        v140 = *(_OWORD *)&v227[2];
        v136[7] = v227[2];
        v141 = v136 + 7;
        *(_OWORD *)v227 = 0uLL;
        *((_OWORD *)v141 - 1) = v139;
        v141[1] = *((_QWORD *)&v140 + 1);
        *((_DWORD *)v141 + 4) = v227[4];
        if (*((_QWORD *)&v140 + 1))
        {
          v142 = *(_QWORD *)(v140 + 8);
          if ((*((_QWORD *)&v139 + 1) & (*((_QWORD *)&v139 + 1) - 1)) != 0)
          {
            if (v142 >= *((_QWORD *)&v139 + 1))
              v142 %= *((_QWORD *)&v139 + 1);
          }
          else
          {
            v142 &= *((_QWORD *)&v139 + 1) - 1;
          }
          *(_QWORD *)(v139 + 8 * v142) = v141;
          *(_OWORD *)&v227[2] = 0uLL;
        }
        LOBYTE(__src) = 1;
        v143 = (float)(unint64_t)(*(_QWORD *)(a1 + 72) + 1);
        v144 = *(float *)(a1 + 80);
        if (v109 && (float)(v144 * (float)v109) >= v143)
          goto LABEL_339;
        v145 = 1;
        if (v109 >= 3)
          v145 = (v109 & (v109 - 1)) != 0;
        v146 = v145 | (2 * v109);
        v147 = vcvtps_u32_f32(v143 / v144);
        if (v146 <= v147)
          v148 = v147;
        else
          v148 = v146;
        if (v148 == 1)
        {
          v148 = 2;
        }
        else if ((v148 & (v148 - 1)) != 0)
        {
          v148 = std::__next_prime(v148);
        }
        v109 = *(_QWORD *)(a1 + 56);
        if (v148 <= v109)
        {
          if (v148 >= v109)
            goto LABEL_334;
          v159 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 72) / *(float *)(a1 + 80));
          if (v109 < 3
            || (v160 = (uint8x8_t)vcnt_s8((int8x8_t)v109), v160.i16[0] = vaddlv_u8(v160), v160.u32[0] > 1uLL))
          {
            v159 = std::__next_prime(v159);
          }
          else
          {
            v161 = 1 << -(char)__clz(v159 - 1);
            if (v159 >= 2)
              v159 = v161;
          }
          if (v148 <= v159)
            v148 = v159;
          if (v148 >= v109)
          {
            v109 = *(_QWORD *)(a1 + 56);
LABEL_334:
            if ((v109 & (v109 - 1)) != 0)
            {
              if (v108 >= v109)
                v9 = v108 % v109;
              else
                v9 = v108;
            }
            else
            {
              v9 = (v109 - 1) & v108;
            }
LABEL_339:
            v171 = (_QWORD *)*((_QWORD *)*v6 + v9);
            if (v171)
            {
              *(_QWORD *)v203[0] = *v171;
              *v171 = v203[0];
            }
            else
            {
              *(_QWORD *)v203[0] = *v137;
              *v137 = v203[0];
              *((_QWORD *)*v6 + v9) = v137;
              if (*(_QWORD *)v203[0])
              {
                v172 = *(_QWORD *)(*(_QWORD *)v203[0] + 8);
                if ((v109 & (v109 - 1)) != 0)
                {
                  if (v172 >= v109)
                    v172 %= v109;
                }
                else
                {
                  v172 &= v109 - 1;
                }
                *((void **)*v6 + v172) = v203[0];
              }
            }
            ++*(_QWORD *)(a1 + 72);
LABEL_348:
            v173 = v227[2];
            if (v227[2])
            {
              do
              {
                v174 = (_QWORD *)*v173;
                operator delete(v173);
                v173 = v174;
              }
              while (v174);
            }
            v175 = v227[0];
            v227[0] = 0;
            v65 = (uint64_t)v194;
            v68 = v193;
            if (v175)
              operator delete(v175);
LABEL_352:
            v176 = sub_210219C18();
            sub_2102323F4((unsigned __int8 *)a3, v227);
            v177 = operator new(0x28uLL);
            v178 = *(_OWORD *)&v227[2];
            *v177 = *(_OWORD *)v227;
            v177[1] = v178;
            *((_DWORD *)v177 + 8) = v227[4];
            *((_BYTE *)v177 + 36) = 0;
            *((_BYTE *)v177 + 8) = 0;
            LODWORD(v227[3]) = 0;
            if (*(_BYTE *)(a3 + 40))
              sub_20EB9CFE0((uint64_t)v232, (uint64_t)v227, v65);
            else
              sub_20E9737A0(v227, "nullopt");
            if (LODWORD(v227[3]) == -1)
              sub_20E877AB8();
            v232[0] = (__uint64_t)v195;
            ((void (*)(void **__return_ptr, __uint64_t *, void **))off_24C9EB090[LODWORD(v227[3])])(v203, v232, v227);
            if (LODWORD(v227[3]) != -1)
              ((void (*)(__uint64_t *, void **))off_24C9EB078[LODWORD(v227[3])])(v232, v227);
            if ((SBYTE7(__src) & 0x80u) == 0)
              v179 = v203;
            else
              v179 = (void **)v203[0];
            v180 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
            if ((v180 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
            {
              __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DDD0);
            }
            v181 = atomic_load(&qword_254A5A450);
            v182 = "5program_options14invalid_syntaxE";
            if (!v181)
            {
LABEL_381:
              if (os_signpost_enabled((os_log_t)*v176))
              {
                LODWORD(v227[0]) = *((_QWORD *)v182 + 432);
                *(void **)((char *)v227 + 4) = v177;
                WORD2(v227[1]) = 2080;
                *(void **)((char *)&v227[1] + 6) = v179;
                _os_signpost_emit_unreliably_with_name_impl();
                if (SBYTE7(__src) < 0)
                  goto LABEL_383;
              }
              else if (SBYTE7(__src) < 0)
              {
LABEL_383:
                operator delete(v203[0]);
                operator delete(v177);
                if (!v68)
                {
LABEL_384:
                  v189 = 0;
                  return (v189 << 8);
                }
LABEL_387:
                v189 = v57[448];
                if (v57[448])
                {
                  sub_20EE2262C(v57 + 32, *((_QWORD *)v57 + 58) - 328, v199);
                  v189 = 1;
                  if (v202)
                  {
                    if (v201 < 0)
                    {
                      operator delete(v200);
                      v189 = 1;
                    }
                  }
                }
                return (v189 << 8);
              }
              operator delete(v177);
              if (!v68)
                goto LABEL_384;
              goto LABEL_387;
            }
            LODWORD(v227[0]) = 136315394;
            *(void **)((char *)v227 + 4) = v177;
            WORD2(v227[1]) = 2080;
            *(void **)((char *)&v227[1] + 6) = v179;
            v183 = (char *)_os_log_send_and_compose_impl();
            v184 = strlen(v183);
            v232[0] = 0;
            pthread_threadid_np(0, v232);
            v185 = v232[0];
            timespec_get((timespec *)v232, 1);
            sub_210219E20(v227, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v176 + 1), (__int128 *)(v176 + 5), "Anchors:Msg:Anchor added to the map with ID: %s... and group: %s", 0x40uLL, v183, v184, v185, v232);
            std::mutex::lock(&stru_254A5A410);
            v186 = qword_254A5A458;
            for (j = unk_254A5A460; v186 != j; v186 += 40)
            {
              v188 = *(_QWORD *)(v186 + 32);
              if (!v188)
                sub_20E86D37C();
              (*(void (**)(uint64_t, void **))(*(_QWORD *)v188 + 48))(v188, v227);
            }
            std::mutex::unlock(&stru_254A5A410);
            if (SHIBYTE(v227[17]) < 0)
            {
              operator delete(v227[15]);
              v182 = "5program_options14invalid_syntaxE";
              if ((SHIBYTE(v227[14]) & 0x80000000) == 0)
              {
LABEL_368:
                if (!LOBYTE(v227[11]))
                {
LABEL_374:
                  if (LOBYTE(v227[7]) && SHIBYTE(v227[6]) < 0)
                    operator delete(v227[4]);
                  if (SHIBYTE(v227[3]) < 0)
                    operator delete(v227[1]);
                  if (v183)
                    free(v183);
                  goto LABEL_381;
                }
LABEL_372:
                if (SHIBYTE(v227[10]) < 0)
                  operator delete(v227[8]);
                goto LABEL_374;
              }
            }
            else
            {
              v182 = "N5boost15program_options14invalid_syntaxE" + 8;
              if ((SHIBYTE(v227[14]) & 0x80000000) == 0)
                goto LABEL_368;
            }
            operator delete(v227[12]);
            if (!LOBYTE(v227[11]))
              goto LABEL_374;
            goto LABEL_372;
          }
          if (!v148)
          {
            v190 = *v6;
            *v6 = 0;
            if (v190)
              operator delete(v190);
            v109 = 0;
            *(_QWORD *)(a1 + 56) = 0;
            goto LABEL_334;
          }
        }
        if (v148 >> 61)
          sub_20E877A38();
        v149 = operator new(8 * v148);
        v150 = *v6;
        *v6 = v149;
        if (v150)
          operator delete(v150);
        v151 = 0;
        *(_QWORD *)(a1 + 56) = v148;
        do
          *((_QWORD *)*v6 + v151++) = 0;
        while (v148 != v151);
        v152 = (_QWORD *)*v137;
        if (!*v137)
        {
LABEL_333:
          v109 = v148;
          goto LABEL_334;
        }
        v153 = v152[1];
        v154 = v148 - 1;
        if ((v148 & (v148 - 1)) == 0)
        {
          v155 = v153 & v154;
          *((_QWORD *)*v6 + v155) = v137;
          for (k = (_QWORD *)*v152; *v152; k = (_QWORD *)*v152)
          {
            v157 = k[1] & v154;
            if (v157 == v155)
            {
              v152 = k;
            }
            else if (*((_QWORD *)*v6 + v157))
            {
              *v152 = *k;
              v158 = 8 * v157;
              *k = **(_QWORD **)((char *)*v6 + v158);
              **(_QWORD **)((char *)*v6 + v158) = k;
            }
            else
            {
              *((_QWORD *)*v6 + v157) = v152;
              v152 = k;
              v155 = v157;
            }
          }
          goto LABEL_333;
        }
        if (v153 >= v148)
          v153 %= v148;
        *((_QWORD *)*v6 + v153) = v137;
        v168 = (_QWORD *)*v152;
        if (!*v152)
          goto LABEL_333;
        while (1)
        {
          v170 = v168[1];
          if (v170 >= v148)
            v170 %= v148;
          if (v170 == v153)
            goto LABEL_327;
          if (*((_QWORD *)*v6 + v170))
          {
            *v152 = *v168;
            v169 = 8 * v170;
            *v168 = **(_QWORD **)((char *)*v6 + v169);
            **(_QWORD **)((char *)*v6 + v169) = v168;
            v168 = v152;
LABEL_327:
            v152 = v168;
            v168 = (_QWORD *)*v168;
            if (!v168)
              goto LABEL_333;
          }
          else
          {
            *((_QWORD *)*v6 + v170) = v152;
            v152 = v168;
            v168 = (_QWORD *)*v168;
            v153 = v170;
            if (!v168)
              goto LABEL_333;
          }
        }
      }
LABEL_179:
      sub_20EE1EF38(v9 + 40, a3, (_OWORD *)a3);
      goto LABEL_352;
    }
    v79 = (char *)v195[1];
    v80 = v195[0];
    if (v195[1] == v195[0])
    {
LABEL_158:
      v195[1] = v195[0];
      operator delete(v80);
      goto LABEL_159;
    }
    while (1)
    {
      if (!*(v79 - 32))
        goto LABEL_414;
      v81 = (std::__shared_weak_count *)*((_QWORD *)v79 - 5);
      if (!v81)
        goto LABEL_414;
      v82 = (unint64_t *)&v81->__shared_owners_;
      do
        v83 = __ldaxr(v82);
      while (__stlxr(v83 - 1, v82));
      if (!v83)
      {
        ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
        std::__shared_weak_count::__release_weak(v81);
        if (*(v79 - 288))
        {
LABEL_153:
          if (*(v79 - 289) < 0)
            operator delete(*((void **)v79 - 39));
        }
      }
      else
      {
LABEL_414:
        if (*(v79 - 288))
          goto LABEL_153;
      }
      v79 -= 328;
      if (v79 == v195[0])
      {
        v80 = v195[0];
        goto LABEL_158;
      }
    }
  }
  v19 = sub_210219C18();
  sub_2102323F4((unsigned __int8 *)a3, v203);
  v20 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v20 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    LODWORD(v227[0]) = 136315138;
    *(void **)((char *)v227 + 4) = v203;
    v22 = (char *)_os_log_send_and_compose_impl();
    v23 = strlen(v22);
    v232[0] = 0;
    pthread_threadid_np(0, v232);
    v24 = v232[0];
    timespec_get((timespec *)v232, 1);
    sub_210219E20(v227, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v19 + 1), (__int128 *)(v19 + 5), "Anchors:Error:Failed to add anchor %s as there were too many anchors", 0x44uLL, v22, v23, v24, v232);
    std::mutex::lock(&stru_254A5A410);
    v25 = qword_254A5A458;
    for (m = unk_254A5A460; v25 != m; v25 += 40)
    {
      v27 = *(_QWORD *)(v25 + 32);
      if (!v27)
        sub_20E86D37C();
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v27 + 48))(v27, v227);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (SHIBYTE(v227[17]) < 0)
    {
      operator delete(v227[15]);
      if ((SHIBYTE(v227[14]) & 0x80000000) == 0)
      {
LABEL_23:
        if (!LOBYTE(v227[11]))
        {
LABEL_100:
          if (LOBYTE(v227[7]) && SHIBYTE(v227[6]) < 0)
            operator delete(v227[4]);
          if (SHIBYTE(v227[3]) < 0)
            operator delete(v227[1]);
          if (v22)
            free(v22);
          goto LABEL_107;
        }
LABEL_98:
        if (SHIBYTE(v227[10]) < 0)
          operator delete(v227[8]);
        goto LABEL_100;
      }
    }
    else if ((SHIBYTE(v227[14]) & 0x80000000) == 0)
    {
      goto LABEL_23;
    }
    operator delete(v227[12]);
    if (!LOBYTE(v227[11]))
      goto LABEL_100;
    goto LABEL_98;
  }
LABEL_107:
  if (os_signpost_enabled((os_log_t)*v19))
  {
    LODWORD(v227[0]) = 136315138;
    *(void **)((char *)v227 + 4) = v203;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  return 3;
}

void sub_20EE22340(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;

  if (*(_BYTE *)(v2 + 40))
  {
    if (*(char *)(v2 + 39) < 0)
      operator delete(*v3);
  }
  *(_QWORD *)(v1 + 464) = v2;
  _Unwind_Resume(exception_object);
}

void sub_20EE22368(_Unwind_Exception *a1)
{
  sub_20EE26B24((uint64_t *)&STACK[0x210]);
  sub_20E8C25A8((uint64_t)&STACK[0x360]);
  _Unwind_Resume(a1);
}

void sub_20EE22474(_Unwind_Exception *a1)
{
  sub_20E8C25A8((uint64_t)&STACK[0x360]);
  _Unwind_Resume(a1);
}

void sub_20EE22488(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  _Unwind_Resume(a1);
}

void sub_20EE224F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (!v1)
    _Unwind_Resume(a1);
  JUMPOUT(0x20EE22590);
}

void sub_20EE22500(_Unwind_Exception *a1)
{
  sub_20E987268(&STACK[0x210]);
  if (LOBYTE(STACK[0x510]) && LOBYTE(STACK[0x508]) && SLOBYTE(STACK[0x507]) < 0)
  {
    operator delete((void *)STACK[0x4F0]);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20EE225C4);
}

void sub_20EE22508()
{
  JUMPOUT(0x20EE225C0);
}

void sub_20EE22510()
{
  JUMPOUT(0x20EE225E8);
}

void sub_20EE22554(_Unwind_Exception *a1)
{
  void *v1;

  sub_20E877A60((uint64_t)&STACK[0x360]);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20EE22570()
{
  std::mutex::unlock(&stru_254A5A410);
  JUMPOUT(0x20EE22584);
}

void sub_20EE225A4()
{
  std::mutex::unlock(&stru_254A5A410);
  JUMPOUT(0x20EE225B8);
}

void sub_20EE225CC()
{
  std::mutex::unlock(&stru_254A5A410);
  JUMPOUT(0x20EE225E0);
}

__n128 sub_20EE2262C@<Q0>(char *__src@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  int64x2_t v6;
  uint64_t v7;
  float64x2_t v8;
  uint64_t v10;
  uint64_t v11;
  int64x2_t v12;
  float64x2_t v13;
  int64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  double v21;
  int64x2_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  float64x2_t v30;
  int64x2_t v31;
  __int128 v32;
  uint64_t v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  __n128 *v65;
  __int128 v66;
  __int128 v67;
  __n128 result;
  uint64_t v69;
  __int128 v70;
  double v71;
  double v72;
  float64x2_t v73;
  double v74;
  unint64_t v75;
  int64x2_t v76;
  double v77;
  unint64_t v78;
  double v79;
  double v80;
  unint64_t v81;
  float64x2_t v82;
  uint64_t v83;

  memcpy(a3, __src, 0x179uLL);
  *((_BYTE *)a3 + 384) = 0;
  *((_BYTE *)a3 + 408) = 0;
  if (__src[408])
  {
    if (__src[407] < 0)
    {
      sub_20E860C04((_BYTE *)a3 + 384, *((void **)__src + 48), *((_QWORD *)__src + 49));
    }
    else
    {
      a3[24] = *((_OWORD *)__src + 24);
      *((_QWORD *)a3 + 50) = *((_QWORD *)__src + 50);
    }
    *((_BYTE *)a3 + 408) = 1;
  }
  *a3 = *(_OWORD *)a2;
  sub_20E869118((uint64_t)(a3 + 24), (_QWORD *)(a2 + 16));
  if (!*(_BYTE *)(a2 + 240))
  {
    v7 = 0;
    v8 = *(float64x2_t *)(a2 + 120);
    v6.i64[0] = *(_QWORD *)(a2 + 48);
    v76 = v6;
    v75 = *(_QWORD *)(a2 + 96);
    v78 = *(_QWORD *)(a2 + 104);
    v81 = *(_QWORD *)(a2 + 112);
    v82 = v8;
    do
    {
      _ZF = v7 == 88;
      v7 += 8;
    }
    while (!_ZF);
    v10 = 0;
    v72 = *((double *)__src + 2);
    v71 = *((double *)__src + 3);
    v8.f64[0] = *((float64_t *)__src + 4);
    v73 = v8;
    v74 = *((double *)__src + 6);
    v77 = *((double *)__src + 8);
    v79 = *((double *)__src + 9);
    v80 = *((double *)__src + 10);
    v69 = *((_QWORD *)__src + 13);
    v70 = *(_OWORD *)(__src + 88);
    do
    {
      _ZF = v10 == 64;
      v10 += 8;
    }
    while (!_ZF);
    v11 = 0;
    v12.i64[0] = *((_QWORD *)__src + 2);
    v13.f64[1] = v8.f64[1];
    v12.i64[1] = *((_QWORD *)__src + 5);
    v14.i64[0] = *((_QWORD *)__src + 3);
    v14.i64[1] = *((_QWORD *)__src + 6);
    v15.f64[0] = *((float64_t *)__src + 4);
    v15.f64[1] = *((float64_t *)__src + 7);
    v16 = vmulq_f64((float64x2_t)vzip1q_s64(v12, v14), (float64x2_t)vdupq_n_s64((unint64_t)v70 ^ 0x8000000000000000));
    v14.i64[0] = v12.i64[1];
    *(_QWORD *)&v13.f64[0] = v70 ^ 0x8000000000000000;
    v17 = vmlaq_f64(vmlaq_f64(v16, (float64x2_t)vdupq_n_s64(*((_QWORD *)&v70 + 1) ^ 0x8000000000000000), (float64x2_t)v14), (float64x2_t)vdupq_n_s64(v69 ^ 0x8000000000000000), *((float64x2_t *)__src + 4));
    v19.f64[1] = *(float64_t *)(a2 + 80);
    v18.f64[0] = *(float64_t *)(a2 + 64);
    v20 = (float64x2_t)vzip1q_s64(v76, *(int64x2_t *)(a2 + 72));
    v19.f64[0] = *(float64_t *)(a2 + 56);
    v21 = vmulq_f64(v73, v13).f64[0]
        + v15.f64[1] * COERCE_DOUBLE(*((_QWORD *)&v70 + 1) ^ 0x8000000000000000)
        + v80 * COERCE_DOUBLE(v69 ^ 0x8000000000000000);
    v18.f64[1] = *(float64_t *)(a2 + 88);
    __asm { FMOV            V18.2D, #1.0 }
    _Q18.f64[0] = *(float64_t *)(a2 + 136);
    v26 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v20, v72), v19, v71), v18, v73.f64[0]), (float64x2_t)0, v82);
    v27 = (int64x2_t)vmlaq_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(v20, (float64x2_t)v12, 1), v19, v74), v18, v15, 1), (float64x2_t)0, v82);
    v28 = (int64x2_t)vmlaq_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64((float64x2_t)v75, (float64x2_t)v12, 1), (float64x2_t)v78, v74), (float64x2_t)v81, v15, 1), (float64x2_t)0, _Q18);
    v29 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v20, v77), v19, v79), v18, v80), (float64x2_t)0, v82);
    v30 = vaddq_f64(v82, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v20, v17.f64[0]), v19, v17, 1), v18, v21));
    v83 = *(_OWORD *)&vaddq_f64(_Q18, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v75, v17.f64[0]), (float64x2_t)v78, v17, 1), (float64x2_t)v81, v21));
    *(_BYTE *)(a2 + 240) = 1;
    v31 = vzip2q_s64(v27, v29);
    v29.i64[1] = v26.i64[1];
    *(int64x2_t *)(a2 + 168) = vzip1q_s64(v26, v27);
    *(int64x2_t *)(a2 + 184) = v29;
    *(int64x2_t *)(a2 + 200) = v31;
    *(int64x2_t *)(a2 + 216) = vzip1q_s64((int64x2_t)vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)v75, v72), (float64x2_t)v78, v71), (float64x2_t)v81, v73.f64[0]), (float64x2_t)0, _Q18), v28);
    *(_QWORD *)(a2 + 232) = *(_OWORD *)&vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)v75, v77), (float64x2_t)v78, v79), (float64x2_t)v81, v80), (float64x2_t)0, _Q18);
    do
    {
      _ZF = v11 == 64;
      v11 += 8;
    }
    while (!_ZF);
    *(float64_t *)&v32 = v30.f64[1];
    *(_BYTE *)(a2 + 272) = 1;
    *(float64_t *)(a2 + 248) = v30.f64[0];
    *((_QWORD *)&v32 + 1) = v83;
    *(_OWORD *)(a2 + 256) = v32;
    if (!*(_BYTE *)(a2 + 240)
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/UserAnchorNodeGroup/src/AnchorsMap.cpp", 261, (uint64_t)"user.R_map_keyframe_to_anchor_row_major", 39, (uint64_t)"Must have R_map_keyframe_to_anchor set", 38, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_24;
    }
  }
  if (!*(_BYTE *)(a2 + 272)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/UserAnchorNodeGroup/src/AnchorsMap.cpp", 262, (uint64_t)"user.t_map_keyframe_to_anchor", 29, (uint64_t)"Must have t_map_keyframe_to_anchor set", 38, (void (*)(void **))sub_21023DDB0))
  {
LABEL_24:
    abort();
  }
  v33 = 0;
  v35 = *((double *)__src + 2);
  v34 = *((double *)__src + 3);
  v36 = *((double *)__src + 4);
  v37 = *((double *)__src + 5);
  v39 = *((double *)__src + 6);
  v38 = *((double *)__src + 7);
  v41 = *((double *)__src + 8);
  v40 = *((double *)__src + 9);
  v43 = *((double *)__src + 10);
  v42 = *((double *)__src + 11);
  v44 = *((double *)__src + 12);
  v45 = *((double *)__src + 13);
  v46 = *(double *)(a2 + 168);
  v47 = *(double *)(a2 + 176);
  v48 = *(double *)(a2 + 184);
  v49 = *(double *)(a2 + 192);
  v50 = *(double *)(a2 + 200);
  v51 = *(double *)(a2 + 208);
  v53 = *(double *)(a2 + 216);
  v52 = *(double *)(a2 + 224);
  v54 = *(double *)(a2 + 232);
  v55 = v35 * v46 + v37 * v47 + v41 * v48;
  v56 = v34 * v46 + v39 * v47 + v40 * v48;
  v57 = v38 * v47 + v36 * v46 + v43 * v48;
  v58 = v44 * v47 + v45 * v48 + v42 * v46 + *(double *)(a2 + 248);
  v59 = v35 * v49 + v37 * v50 + v41 * v51;
  v60 = v34 * v49 + v39 * v50 + v40 * v51;
  v61 = v38 * v50 + v36 * v49 + v43 * v51;
  v62 = v44 * v50 + v45 * v51 + v42 * v49 + *(double *)(a2 + 256);
  v63 = v38 * v52 + v36 * v53 + v43 * v54;
  v64 = v42 * v53 + v45 * v54 + *(double *)(a2 + 264);
  *(double *)(a2 + 120) = v58;
  v65 = (__n128 *)(a2 + 120);
  *(double *)(a2 + 48) = v55;
  *(double *)(a2 + 56) = v56;
  *(double *)(a2 + 64) = v57;
  *(double *)(a2 + 72) = v59;
  *(double *)(a2 + 80) = v60;
  *(double *)(a2 + 88) = v61;
  *(double *)(a2 + 96) = v37 * v52 + v35 * v53 + v41 * v54;
  *(double *)(a2 + 104) = v39 * v52 + v34 * v53 + v40 * v54;
  *(double *)(a2 + 112) = v63;
  *(double *)(a2 + 128) = v62;
  *(double *)(a2 + 136) = v44 * v52 + v64;
  do
  {
    _ZF = v33 == 64;
    v33 += 8;
  }
  while (!_ZF);
  v66 = *(_OWORD *)(a2 + 96);
  a3[3] = *(_OWORD *)(a2 + 80);
  a3[4] = v66;
  *((_QWORD *)a3 + 10) = *(_QWORD *)(a2 + 112);
  v67 = *(_OWORD *)(a2 + 64);
  a3[1] = *(_OWORD *)(a2 + 48);
  a3[2] = v67;
  result = *v65;
  *(__n128 *)((char *)a3 + 88) = *v65;
  *((_QWORD *)a3 + 13) = *(_QWORD *)(a2 + 136);
  return result;
}

void sub_20EE22E14(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(_BYTE *)(v1 + 408))
  {
    if (*(char *)(v1 + 407) < 0)
      operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EE22E48(uint64_t a1, __int128 *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  void *v5;
  void **v6;
  char v7[16];
  void *v8;
  void **v9;
  uint64_t v10;
  void **v11;
  __int128 v12;
  char v13;
  void *__p;
  char v15;
  char v16;
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)(a1 + 8);
  v12 = *a2;
  v13 = 0;
  v17 = 0;
  v3 = sub_20EE1CCB4((_QWORD *)(a1 + 8), (uint64_t)&v12);
  if (v3)
  {
    sub_20E8D2CE8(v2, v3, (uint64_t)&v11);
    v4 = v11;
    v9 = v11;
    BYTE1(v10) = 1;
    if (!v17)
      goto LABEL_8;
  }
  else
  {
    v4 = 0;
    v9 = 0;
    v10 = 0;
    if (!v17)
      goto LABEL_8;
  }
  if (v16 && v15 < 0)
    operator delete(__p);
LABEL_8:
  if (v4)
  {
    if (*((_BYTE *)v4 + 448))
    {
      if (*((_BYTE *)v4 + 440) && *((char *)v4 + 439) < 0)
        operator delete(v4[52]);
      *((_BYTE *)v4 + 448) = 0;
    }
    sub_20EE26458((uint64_t)v2, (uint64_t)&v9, (uint64_t)v7);
    v5 = v8;
    if (v8)
    {
      sub_20EE1C7E8((uint64_t)v8 + 16);
      operator delete(v5);
      v8 = 0;
    }
  }
  v6 = v9;
  if (v9)
  {
    sub_20EE1C7E8((uint64_t)(v9 + 2));
    operator delete(v6);
  }
}

void sub_20EE22F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20EE208A4((void **)va);
  _Unwind_Resume(a1);
}

void sub_20EE22F9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a72;
  char a73;

  if (LOBYTE(STACK[0x200]) && a73 && a72 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20EE22FC8(uint64_t a1@<X0>, void **a2@<X8>)
{
  uint64_t v3;
  __int128 *v4;
  __int128 *v5;
  int v6;
  __int128 v7;
  unint64_t v8;
  void **v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  __int128 v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  __int128 v23;
  void **v24;
  uint64_t *v25;
  __int128 v26;
  __int128 __p;
  void *v28;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
  {
    while (1)
    {
      v25 = (uint64_t *)v3;
      if (!*(_BYTE *)(v3 + 448))
        break;
LABEL_3:
      v3 = *v25;
      if (!*v25)
        return;
    }
    v5 = *(__int128 **)(v3 + 456);
    v4 = *(__int128 **)(v3 + 464);
    while (1)
    {
      if (v5 == v4)
        goto LABEL_3;
      v26 = *v5;
      LOBYTE(__p) = 0;
      v29 = 0;
      v6 = *((unsigned __int8 *)v5 + 40);
      if (*((_BYTE *)v5 + 40))
      {
        if (*((char *)v5 + 39) < 0)
        {
          sub_20E860C04(&__p, *((void **)v5 + 2), *((_QWORD *)v5 + 3));
        }
        else
        {
          v7 = v5[1];
          v28 = (void *)*((_QWORD *)v5 + 4);
          __p = v7;
        }
        v29 = 1;
        v9 = (void **)a2[1];
        v8 = (unint64_t)a2[2];
        if ((unint64_t)v9 < v8)
        {
LABEL_23:
          *(_OWORD *)v9 = v26;
          *((_BYTE *)v9 + 16) = 0;
          *((_BYTE *)v9 + 40) = 0;
          if (v29)
          {
            v16 = __p;
            v9[4] = v28;
            *((_OWORD *)v9 + 1) = v16;
            v28 = 0;
            __p = 0uLL;
            *((_BYTE *)v9 + 40) = 1;
          }
          v17 = (char *)(v9 + 6);
          goto LABEL_43;
        }
      }
      else
      {
        v9 = (void **)a2[1];
        v8 = (unint64_t)a2[2];
        if ((unint64_t)v9 < v8)
          goto LABEL_23;
      }
      v10 = (char *)*a2;
      v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (_BYTE *)*a2) >> 4);
      v12 = v11 + 1;
      if (v11 + 1 > 0x555555555555555)
        sub_20EAA9DC0();
      v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (_QWORD)v10) >> 4);
      if (2 * v13 > v12)
        v12 = 2 * v13;
      if (v13 >= 0x2AAAAAAAAAAAAAALL)
        v14 = 0x555555555555555;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 > 0x555555555555555)
          sub_20E877A38();
        v15 = (char *)operator new(48 * v14);
      }
      else
      {
        v15 = 0;
      }
      v18 = &v15[48 * v11];
      *(_OWORD *)v18 = v26;
      v18[16] = 0;
      v18[40] = 0;
      if (v6)
      {
        *((_OWORD *)v18 + 1) = __p;
        *((_QWORD *)v18 + 4) = v28;
        v28 = 0;
        __p = 0uLL;
        v18[40] = 1;
      }
      v19 = &v15[48 * v14];
      v17 = v18 + 48;
      if (v9 == (void **)v10)
      {
        *a2 = v18;
        a2[1] = v17;
        a2[2] = v19;
      }
      else
      {
        v20 = 0;
        do
        {
          v21 = &v18[v20 * 8];
          v22 = (char *)&v9[v20];
          *((_OWORD *)v21 - 3) = *(_OWORD *)&v9[v20 - 6];
          v18[v20 * 8 - 32] = 0;
          *(v21 - 8) = 0;
          if (LOBYTE(v9[v20 - 1]))
          {
            v23 = *((_OWORD *)v22 - 2);
            *(_QWORD *)&v18[v20 * 8 - 16] = *((_QWORD *)v22 - 2);
            *(_OWORD *)&v18[v20 * 8 - 32] = v23;
            *((_QWORD *)v22 - 3) = 0;
            *((_QWORD *)v22 - 2) = 0;
            *((_QWORD *)v22 - 4) = 0;
            *(v21 - 8) = 1;
          }
          v20 -= 6;
        }
        while (&v9[v20] != (void **)v10);
        v9 = (void **)*a2;
        v24 = (void **)a2[1];
        *a2 = &v18[v20 * 8];
        a2[1] = v17;
        a2[2] = v19;
        while (v24 != v9)
        {
          if (*((_BYTE *)v24 - 8) && *((char *)v24 - 9) < 0)
            operator delete(*(v24 - 4));
          v24 -= 6;
        }
      }
      if (v9)
        operator delete(v9);
LABEL_43:
      a2[1] = v17;
      if (v29)
      {
        if (SHIBYTE(v28) < 0)
          operator delete((void *)__p);
      }
      v5 = (__int128 *)((char *)v5 + 328);
    }
  }
}

void sub_20EE232EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  void **v19;

  if (a19)
  {
    if (a18 < 0)
      operator delete(__p);
  }
  sub_20EAA9C38(v19);
  _Unwind_Resume(a1);
}

void sub_20EE23330(uint64_t a1@<X0>, _QWORD *a2@<X1>, unsigned __int8 **a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v15;
  BOOL v16;
  _BOOL4 v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL4 v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  int v28;
  unsigned __int8 **v29;
  uint64_t v30;
  _BOOL4 v31;
  uint64_t *v33;
  _QWORD *v34;
  _QWORD *v35;
  void *v36;
  int v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  void *__p;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  unsigned __int8 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  __int128 v69;
  uint64_t v70;
  char v71;
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  LOBYTE(v47) = 0;
  v71 = 0;
  v8 = (_QWORD *)(a1 + 24);
  do
  {
    v8 = (_QWORD *)*v8;
    if (!v8)
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 328) = 0;
      return;
    }
    v9 = v8[57];
    v10 = v8[58];
    if (v9 == v10)
      goto LABEL_74;
    if (*((_BYTE *)a3 + 24))
    {
      v11 = *((_BYTE *)a3 + 23);
      if (v11 >= 0)
        v12 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
      else
        v12 = a3[1];
      if (v11 >= 0)
        v13 = (unsigned __int8 *)a3;
      else
        v13 = *a3;
      while (1)
      {
        v18 = *(_QWORD *)v9 != *a2 || *(_QWORD *)(v9 + 8) != a2[1];
        if (*(_BYTE *)(v9 + 40))
        {
          v19 = *(unsigned __int8 *)(v9 + 39);
          v20 = (v19 & 0x80u) == 0 ? (unsigned __int8 *)*(unsigned __int8 *)(v9 + 39) : *(unsigned __int8 **)(v9 + 24);
          if (v20 == v12)
          {
            if ((v19 & 0x80) != 0)
            {
              v16 = memcmp(*(const void **)(v9 + 16), v13, *(_QWORD *)(v9 + 24)) == 0;
              if (!v18)
              {
LABEL_18:
                if (v16)
                  goto LABEL_39;
              }
            }
            else if (*(_BYTE *)(v9 + 39))
            {
              v21 = 0;
              while (*(unsigned __int8 *)(v9 + v21 + 16) == v13[v21])
              {
                if (v19 == ++v21)
                  goto LABEL_17;
              }
            }
            else
            {
LABEL_17:
              v16 = 1;
              if (!v18)
                goto LABEL_18;
            }
          }
        }
        v9 += 328;
        if (v9 == v10)
          goto LABEL_16;
      }
    }
    while (*(_QWORD *)v9 != *a2 || *(_QWORD *)(v9 + 8) != a2[1])
    {
      v9 += 328;
      if (v9 == v10)
      {
LABEL_16:
        v15 = v10;
        goto LABEL_75;
      }
    }
LABEL_39:
    sub_20EE26100((uint64_t)&v47, (__int128 *)v9);
    v15 = v10;
    if (v9 != v10)
    {
      v22 = v9 + 328;
      if (v9 + 328 != v10)
      {
        v15 = v9;
        while (1)
        {
          v24 = *(_QWORD *)v22 != *a2 || *(_QWORD *)(v22 + 8) != a2[1];
          if (!*((_BYTE *)a3 + 24))
            goto LABEL_66;
          if (!*(_BYTE *)(v9 + 368))
            goto LABEL_42;
          v25 = *(unsigned __int8 *)(v9 + 367);
          if ((v25 & 0x80u) == 0)
            v26 = (unsigned __int8 *)*(unsigned __int8 *)(v9 + 367);
          else
            v26 = *(unsigned __int8 **)(v9 + 352);
          v27 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
          v28 = (char)v27;
          if ((char)v27 < 0)
            v27 = a3[1];
          if (v26 != v27)
            goto LABEL_42;
          v29 = v28 >= 0 ? a3 : (unsigned __int8 **)*a3;
          if ((v25 & 0x80) == 0)
            break;
          v31 = memcmp(*(const void **)(v9 + 344), v29, *(_QWORD *)(v9 + 352)) == 0;
          if (!v24 && v31)
          {
LABEL_67:
            sub_20EE26100((uint64_t)&v47, (__int128 *)v22);
            goto LABEL_43;
          }
LABEL_42:
          sub_20EE25F34(v15, v22);
          v15 += 328;
LABEL_43:
          v22 += 328;
          v9 += 328;
          if (v22 == v10)
            goto LABEL_75;
        }
        if (*(_BYTE *)(v9 + 367))
        {
          v30 = 0;
          while (*(unsigned __int8 *)(v9 + v30 + 344) == *((unsigned __int8 *)v29 + v30))
          {
            if (v25 == ++v30)
              goto LABEL_66;
          }
          goto LABEL_42;
        }
LABEL_66:
        if (!v24)
          goto LABEL_67;
        goto LABEL_42;
      }
LABEL_74:
      v15 = v9;
    }
LABEL_75:
    sub_20EE23770((uint64_t)(v8 + 57), v15, v8[58]);
  }
  while (!v71);
  v33 = sub_20EE267A0((_QWORD *)(a1 + 48), (uint64_t)&v48);
  if (v33)
  {
    v34 = v33 + 5;
    v35 = sub_20EE1CCB4(v33 + 5, (uint64_t)a2);
    if (v35)
    {
      sub_20E8D2CE8(v34, v35, (uint64_t)&__p);
      v36 = __p;
      __p = 0;
      if (v36)
        operator delete(v36);
    }
  }
  *(_BYTE *)a4 = 0;
  *(_BYTE *)(a4 + 328) = 0;
  if (v71)
  {
    *(_OWORD *)a4 = v47;
    *(_BYTE *)(a4 + 16) = 0;
    *(_BYTE *)(a4 + 40) = 0;
    v37 = v50;
    if (v50)
    {
      *(_OWORD *)(a4 + 16) = v48;
      *(_QWORD *)(a4 + 32) = v49;
      v49 = 0;
      v48 = 0uLL;
      *(_BYTE *)(a4 + 40) = 1;
    }
    v38 = v64;
    *(_OWORD *)(a4 + 240) = v63;
    *(_OWORD *)(a4 + 256) = v38;
    *(_BYTE *)(a4 + 272) = v65;
    v39 = v60;
    *(_OWORD *)(a4 + 176) = v59;
    *(_OWORD *)(a4 + 192) = v39;
    v40 = v62;
    *(_OWORD *)(a4 + 208) = v61;
    *(_OWORD *)(a4 + 224) = v40;
    v41 = v56;
    *(_OWORD *)(a4 + 112) = v55;
    *(_OWORD *)(a4 + 128) = v41;
    v42 = v58;
    *(_OWORD *)(a4 + 144) = v57;
    *(_OWORD *)(a4 + 160) = v42;
    v43 = v52;
    *(_OWORD *)(a4 + 48) = v51;
    *(_OWORD *)(a4 + 64) = v43;
    v44 = v54;
    *(_OWORD *)(a4 + 80) = v53;
    *(_OWORD *)(a4 + 96) = v44;
    *(_BYTE *)(a4 + 280) = 0;
    *(_BYTE *)(a4 + 296) = 0;
    if (v68)
    {
      v45 = v67;
      *(_QWORD *)(a4 + 280) = v66;
      *(_QWORD *)(a4 + 288) = v45;
      v66 = 0;
      v67 = 0;
      *(_BYTE *)(a4 + 296) = 1;
    }
    *(_OWORD *)(a4 + 304) = v69;
    *(_QWORD *)(a4 + 320) = v70;
    *(_BYTE *)(a4 + 328) = 1;
    if (v37)
    {
      if (SHIBYTE(v49) < 0)
        operator delete((void *)v48);
    }
  }
}

void sub_20EE23720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20EE1A66C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EE23734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20EE1A66C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EE23748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20EE1A66C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EE2375C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20EE1A66C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EE23770(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  if (a2 != a3)
  {
    v3 = a2;
    v5 = a3;
    v6 = *(_QWORD *)(a1 + 8);
    if (a3 != v6)
    {
      v7 = 8 * ((a3 - a2) >> 3);
      do
      {
        sub_20EE25F34(v3, v3 + v7);
        v3 += 328;
      }
      while (v3 + v7 != v6);
      v5 = *(_QWORD *)(a1 + 8);
    }
    while (1)
    {
      if (v5 == v3)
      {
        *(_QWORD *)(a1 + 8) = v3;
        return;
      }
      if (!*(_BYTE *)(v5 - 32))
        goto LABEL_13;
      v8 = *(std::__shared_weak_count **)(v5 - 40);
      if (!v8)
        goto LABEL_13;
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
        if (!*(_BYTE *)(v5 - 288))
          goto LABEL_6;
      }
      else
      {
LABEL_13:
        if (!*(_BYTE *)(v5 - 288))
          goto LABEL_6;
      }
      if (*(char *)(v5 - 289) < 0)
        operator delete(*(void **)(v5 - 312));
LABEL_6:
      v5 -= 328;
    }
  }
}

void sub_20EE23880(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __int128 v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  uint64_t *v25;
  unint64_t v26;
  int8x8_t v27;
  uint8x8_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t **v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v35;
  unint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *p_shared_owners;
  unint64_t v47;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v2 = *(_QWORD **)(a1 + 24);
  if (v2)
  {
    v4 = (_QWORD *)(a1 + 48);
    while (1)
    {
      v5 = v2[57];
      v6 = v2[58];
      if (v5 != v6)
      {
        do
        {
          v7 = *(_QWORD *)(a2 + 8);
          if (v7 >= *(_QWORD *)(a2 + 16))
          {
            v9 = sub_20EE25A30((void **)a2, v5);
          }
          else
          {
            *(_OWORD *)v7 = *(_OWORD *)v5;
            *(_BYTE *)(v7 + 16) = 0;
            *(_BYTE *)(v7 + 40) = 0;
            if (*(_BYTE *)(v5 + 40))
            {
              if (*(char *)(v5 + 39) < 0)
              {
                sub_20E860C04((_BYTE *)(v7 + 16), *(void **)(v5 + 16), *(_QWORD *)(v5 + 24));
              }
              else
              {
                v8 = *(_OWORD *)(v5 + 16);
                *(_QWORD *)(v7 + 32) = *(_QWORD *)(v5 + 32);
                *(_OWORD *)(v7 + 16) = v8;
              }
              *(_BYTE *)(v7 + 40) = 1;
            }
            v10 = *(_OWORD *)(v5 + 48);
            v11 = *(_OWORD *)(v5 + 80);
            *(_OWORD *)(v7 + 64) = *(_OWORD *)(v5 + 64);
            *(_OWORD *)(v7 + 80) = v11;
            *(_OWORD *)(v7 + 48) = v10;
            v12 = *(_OWORD *)(v5 + 96);
            v13 = *(_OWORD *)(v5 + 112);
            v14 = *(_OWORD *)(v5 + 144);
            *(_OWORD *)(v7 + 128) = *(_OWORD *)(v5 + 128);
            *(_OWORD *)(v7 + 144) = v14;
            *(_OWORD *)(v7 + 96) = v12;
            *(_OWORD *)(v7 + 112) = v13;
            v15 = *(_OWORD *)(v5 + 160);
            v16 = *(_OWORD *)(v5 + 176);
            v17 = *(_OWORD *)(v5 + 208);
            *(_OWORD *)(v7 + 192) = *(_OWORD *)(v5 + 192);
            *(_OWORD *)(v7 + 208) = v17;
            *(_OWORD *)(v7 + 160) = v15;
            *(_OWORD *)(v7 + 176) = v16;
            v18 = *(_OWORD *)(v5 + 224);
            v19 = *(_OWORD *)(v5 + 240);
            v20 = *(_OWORD *)(v5 + 256);
            *(_BYTE *)(v7 + 272) = *(_BYTE *)(v5 + 272);
            *(_OWORD *)(v7 + 240) = v19;
            *(_OWORD *)(v7 + 256) = v20;
            *(_OWORD *)(v7 + 224) = v18;
            *(_BYTE *)(v7 + 280) = 0;
            *(_BYTE *)(v7 + 296) = 0;
            if (*(_BYTE *)(v5 + 296))
            {
              v21 = *(_QWORD *)(v5 + 288);
              *(_QWORD *)(v7 + 280) = *(_QWORD *)(v5 + 280);
              *(_QWORD *)(v7 + 288) = v21;
              if (v21)
              {
                v22 = (unint64_t *)(v21 + 8);
                do
                  v23 = __ldxr(v22);
                while (__stxr(v23 + 1, v22));
              }
              *(_BYTE *)(v7 + 296) = 1;
            }
            v24 = *(_OWORD *)(v5 + 304);
            *(_QWORD *)(v7 + 320) = *(_QWORD *)(v5 + 320);
            *(_OWORD *)(v7 + 304) = v24;
            v9 = (char *)(v7 + 328);
            *(_QWORD *)(a2 + 8) = v7 + 328;
          }
          *(_QWORD *)(a2 + 8) = v9;
          v25 = sub_20EE267A0(v4, v5 + 16);
          if (v25)
          {
            v26 = sub_2102322B4((unsigned __int8 *)v5);
            v27 = (int8x8_t)v25[6];
            if (v27)
            {
              v28 = (uint8x8_t)vcnt_s8(v27);
              v28.i16[0] = vaddlv_u8(v28);
              if (v28.u32[0] > 1uLL)
              {
                v29 = v26;
                if (v26 >= *(_QWORD *)&v27)
                  v29 = v26 % *(_QWORD *)&v27;
              }
              else
              {
                v29 = (*(_QWORD *)&v27 - 1) & v26;
              }
              v30 = v25[5];
              v31 = *(uint64_t ***)(v30 + 8 * v29);
              if (v31)
              {
                v32 = *v31;
                if (v32)
                {
                  v33 = *(_QWORD *)&v27 - 1;
                  if (v28.u32[0] < 2uLL)
                  {
                    while (1)
                    {
                      v35 = v32[1];
                      if (v35 == v26)
                      {
                        if (v32[2] == *(_QWORD *)v5 && v32[3] == *(_QWORD *)(v5 + 8))
                          goto LABEL_50;
                      }
                      else if ((v35 & v33) != v29)
                      {
                        goto LABEL_8;
                      }
                      v32 = (uint64_t *)*v32;
                      if (!v32)
                        goto LABEL_8;
                    }
                  }
                  do
                  {
                    v37 = v32[1];
                    if (v37 == v26)
                    {
                      if (v32[2] == *(_QWORD *)v5 && v32[3] == *(_QWORD *)(v5 + 8))
                      {
LABEL_50:
                        if (v28.u32[0] > 1uLL)
                        {
                          if (v26 >= *(_QWORD *)&v27)
                            v26 %= *(_QWORD *)&v27;
                        }
                        else
                        {
                          v26 &= v33;
                        }
                        v38 = *(uint64_t **)(v30 + 8 * v26);
                        do
                        {
                          v39 = v38;
                          v38 = (uint64_t *)*v38;
                        }
                        while (v38 != v32);
                        if (v39 == v25 + 7)
                          goto LABEL_67;
                        v40 = v39[1];
                        if (v28.u32[0] > 1uLL)
                        {
                          if (v40 >= *(_QWORD *)&v27)
                            v40 %= *(_QWORD *)&v27;
                        }
                        else
                        {
                          v40 &= v33;
                        }
                        if (v40 != v26)
                        {
LABEL_67:
                          if (!*v32)
                            goto LABEL_68;
                          v41 = *(_QWORD *)(*v32 + 8);
                          if (v28.u32[0] > 1uLL)
                          {
                            if (v41 >= *(_QWORD *)&v27)
                              v41 %= *(_QWORD *)&v27;
                          }
                          else
                          {
                            v41 &= v33;
                          }
                          if (v41 != v26)
LABEL_68:
                            *(_QWORD *)(v30 + 8 * v26) = 0;
                        }
                        v42 = *v32;
                        if (*v32)
                        {
                          v43 = *(_QWORD *)(v42 + 8);
                          if (v28.u32[0] > 1uLL)
                          {
                            if (v43 >= *(_QWORD *)&v27)
                              v43 %= *(_QWORD *)&v27;
                          }
                          else
                          {
                            v43 &= v33;
                          }
                          if (v43 != v26)
                          {
                            *(_QWORD *)(v25[5] + 8 * v43) = v39;
                            v42 = *v32;
                          }
                        }
                        *v39 = v42;
                        *v32 = 0;
                        --v25[8];
                        operator delete(v32);
                        break;
                      }
                    }
                    else
                    {
                      if (v37 >= *(_QWORD *)&v27)
                        v37 %= *(_QWORD *)&v27;
                      if (v37 != v29)
                        break;
                    }
                    v32 = (uint64_t *)*v32;
                  }
                  while (v32);
                }
              }
            }
          }
LABEL_8:
          v5 += 328;
        }
        while (v5 != v6);
        v44 = v2[57];
        v5 = v2[58];
        if (v5 != v44)
          break;
      }
LABEL_4:
      v2[58] = v5;
      v2 = (_QWORD *)*v2;
      if (!v2)
        return;
    }
    while (1)
    {
      if (!*(_BYTE *)(v5 - 32))
        goto LABEL_91;
      v45 = *(std::__shared_weak_count **)(v5 - 40);
      if (!v45)
        goto LABEL_91;
      p_shared_owners = (unint64_t *)&v45->__shared_owners_;
      do
        v47 = __ldaxr(p_shared_owners);
      while (__stlxr(v47 - 1, p_shared_owners));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
        if (*(_BYTE *)(v5 - 288))
        {
LABEL_85:
          if (*(char *)(v5 - 289) < 0)
            operator delete(*(void **)(v5 - 312));
        }
      }
      else
      {
LABEL_91:
        if (*(_BYTE *)(v5 - 288))
          goto LABEL_85;
      }
      v5 -= 328;
      if (v5 == v44)
      {
        v5 = v44;
        goto LABEL_4;
      }
    }
  }
}

void sub_20EE23C90(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  if (*(_BYTE *)(v3 + 40))
  {
    if (*(char *)(v3 + 39) < 0)
      operator delete(*v2);
  }
  *(_QWORD *)(v1 + 8) = v3;
  sub_20EE1968C((void **)v1);
  _Unwind_Resume(a1);
}

void sub_20EE23CC0(_Unwind_Exception *a1)
{
  void **v1;

  sub_20EE1968C(v1);
  _Unwind_Resume(a1);
}

void sub_20EE23CD4(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, void **a3@<X8>)
{
  _QWORD *i;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  const void *v19;
  uint64_t v20;
  int v21;
  const void *v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 v38;
  uint64_t v39;
  __int128 v41;
  unsigned __int8 **v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  void **v49;
  __int128 v50;
  char *v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 *v65;
  __int128 v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  __int128 v87;
  char *v88;
  char *v89;
  uint64_t *v90;
  _QWORD *v91;
  _QWORD *v92;
  void *v93;
  void *__p;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  for (i = (_QWORD *)(a1 + 24); ; sub_20EE23770((uint64_t)(i + 57), v6, i[58]))
  {
    i = (_QWORD *)*i;
    if (!i)
      break;
    v6 = i[57];
    v7 = i[58];
    if (v6 == v7)
      goto LABEL_50;
    v8 = *((_QWORD *)a2 + 1);
    if ((a2[23] & 0x80u) == 0)
      v9 = a2[23];
    else
      v9 = *((_QWORD *)a2 + 1);
    if ((a2[23] & 0x80) != 0)
    {
      v19 = *(const void **)a2;
      do
      {
        v20 = *(unsigned __int8 *)(v6 + 39);
        v21 = (char)v20;
        if ((v20 & 0x80u) != 0)
          v20 = *(_QWORD *)(v6 + 24);
        if (v9 == v20)
        {
          v22 = v21 >= 0 ? (const void *)(v6 + 16) : *(const void **)(v6 + 16);
          if (!memcmp(v19, v22, v8))
            goto LABEL_39;
        }
        v6 += 328;
      }
      while (v6 != v7);
LABEL_2:
      v6 = v7;
      continue;
    }
    if (a2[23])
    {
      while (1)
      {
        v11 = *(unsigned __int8 *)(v6 + 39);
        v12 = (char)v11;
        if ((v11 & 0x80u) != 0)
          v11 = *(_QWORD *)(v6 + 24);
        if (v9 == v11)
          break;
LABEL_16:
        v6 += 328;
        if (v6 == v7)
          goto LABEL_2;
      }
      v13 = v6 + 16;
      if (v12 >= 0)
        v14 = (unsigned __int8 *)(v6 + 16);
      else
        v14 = *(unsigned __int8 **)(v6 + 16);
      v15 = a2;
      v16 = a2[23];
      do
      {
        if (*v15 != *v14)
          goto LABEL_16;
        ++v15;
        ++v14;
        --v16;
      }
      while (v16);
      v17 = (char *)a3[1];
      if (v17 < a3[2])
        goto LABEL_27;
    }
    else
    {
      while (1)
      {
        v10 = *(unsigned __int8 *)(v6 + 39);
        if ((v10 & 0x80u) != 0)
          v10 = *(_QWORD *)(v6 + 24);
        if (v9 == v10)
          break;
        v6 += 328;
        if (v6 == v7)
          goto LABEL_2;
      }
LABEL_39:
      v13 = v6 + 16;
      v17 = (char *)a3[1];
      if (v17 < a3[2])
      {
LABEL_27:
        *(_OWORD *)v17 = *(_OWORD *)v6;
        v17[16] = 0;
        v17[40] = 0;
        if (*(_BYTE *)(v6 + 40))
        {
          if (*(char *)(v6 + 39) < 0)
          {
            sub_20E860C04(v17 + 16, *(void **)v13, *(_QWORD *)(v6 + 24));
          }
          else
          {
            v18 = *(_OWORD *)v13;
            *((_QWORD *)v17 + 4) = *(_QWORD *)(v13 + 16);
            *((_OWORD *)v17 + 1) = v18;
          }
          v17[40] = 1;
        }
        v24 = *(_OWORD *)(v6 + 48);
        v25 = *(_OWORD *)(v6 + 80);
        *((_OWORD *)v17 + 4) = *(_OWORD *)(v6 + 64);
        *((_OWORD *)v17 + 5) = v25;
        *((_OWORD *)v17 + 3) = v24;
        v26 = *(_OWORD *)(v6 + 96);
        v27 = *(_OWORD *)(v6 + 112);
        v28 = *(_OWORD *)(v6 + 144);
        *((_OWORD *)v17 + 8) = *(_OWORD *)(v6 + 128);
        *((_OWORD *)v17 + 9) = v28;
        *((_OWORD *)v17 + 6) = v26;
        *((_OWORD *)v17 + 7) = v27;
        v29 = *(_OWORD *)(v6 + 160);
        v30 = *(_OWORD *)(v6 + 176);
        v31 = *(_OWORD *)(v6 + 208);
        *((_OWORD *)v17 + 12) = *(_OWORD *)(v6 + 192);
        *((_OWORD *)v17 + 13) = v31;
        *((_OWORD *)v17 + 10) = v29;
        *((_OWORD *)v17 + 11) = v30;
        v32 = *(_OWORD *)(v6 + 224);
        v33 = *(_OWORD *)(v6 + 240);
        v34 = *(_OWORD *)(v6 + 256);
        v17[272] = *(_BYTE *)(v6 + 272);
        *((_OWORD *)v17 + 15) = v33;
        *((_OWORD *)v17 + 16) = v34;
        *((_OWORD *)v17 + 14) = v32;
        v17[280] = 0;
        v17[296] = 0;
        if (*(_BYTE *)(v6 + 296))
        {
          *((_QWORD *)v17 + 35) = *(_QWORD *)(v6 + 280);
          v35 = *(_QWORD *)(v6 + 288);
          *((_QWORD *)v17 + 36) = v35;
          if (v35)
          {
            v36 = (unint64_t *)(v35 + 8);
            do
              v37 = __ldxr(v36);
            while (__stxr(v37 + 1, v36));
          }
          v17[296] = 1;
        }
        v38 = *(_OWORD *)(v6 + 304);
        *((_QWORD *)v17 + 40) = *(_QWORD *)(v6 + 320);
        *((_OWORD *)v17 + 19) = v38;
        v23 = v17 + 328;
        a3[1] = v17 + 328;
        goto LABEL_49;
      }
    }
    v23 = sub_20EE25A30(a3, v6);
LABEL_49:
    a3[1] = v23;
LABEL_50:
    v39 = v6 + 328;
    if (v6 != v7 && v39 != v7)
    {
      do
      {
        v42 = (unsigned __int8 **)(v39 + 16);
        v43 = a2[23];
        if ((v43 & 0x80u) == 0)
          v44 = a2[23];
        else
          v44 = *((_QWORD *)a2 + 1);
        v45 = *(unsigned __int8 *)(v39 + 39);
        v46 = (char)v45;
        if ((v45 & 0x80u) != 0)
          v45 = *(_QWORD *)(v39 + 24);
        if (v44 != v45)
          goto LABEL_75;
        if (v46 >= 0)
          v47 = (unsigned __int8 *)(v39 + 16);
        else
          v47 = *v42;
        if ((v43 & 0x80) != 0)
        {
          if (memcmp(*(const void **)a2, v47, *((_QWORD *)a2 + 1)))
            goto LABEL_75;
        }
        else if (a2[23])
        {
          v48 = a2;
          while (*v48 == *v47)
          {
            ++v48;
            ++v47;
            if (!--v43)
              goto LABEL_84;
          }
LABEL_75:
          *(_OWORD *)v6 = *(_OWORD *)v39;
          v49 = (void **)(v6 + 16);
          if (*(unsigned __int8 *)(v6 + 40) == *(unsigned __int8 *)(v39 + 40))
          {
            if (*(_BYTE *)(v6 + 40))
            {
              if (*(char *)(v6 + 39) < 0)
                operator delete(*v49);
              v50 = *(_OWORD *)v42;
              *(_QWORD *)(v6 + 32) = *(_QWORD *)(v39 + 32);
              *(_OWORD *)v49 = v50;
              *(_BYTE *)(v39 + 39) = 0;
              *(_BYTE *)(v39 + 16) = 0;
            }
          }
          else if (*(_BYTE *)(v6 + 40))
          {
            if (*(char *)(v6 + 39) < 0)
              operator delete(*v49);
            *(_BYTE *)(v6 + 40) = 0;
          }
          else
          {
            v53 = *(_OWORD *)v42;
            *(_QWORD *)(v6 + 32) = *(_QWORD *)(v39 + 32);
            *(_OWORD *)v49 = v53;
            *(_QWORD *)(v39 + 24) = 0;
            *(_QWORD *)(v39 + 32) = 0;
            *v42 = 0;
            *(_BYTE *)(v6 + 40) = 1;
          }
          v54 = *(_OWORD *)(v39 + 48);
          v55 = *(_OWORD *)(v39 + 80);
          *(_OWORD *)(v6 + 64) = *(_OWORD *)(v39 + 64);
          *(_OWORD *)(v6 + 80) = v55;
          *(_OWORD *)(v6 + 48) = v54;
          v56 = *(_OWORD *)(v39 + 96);
          v57 = *(_OWORD *)(v39 + 112);
          v58 = *(_OWORD *)(v39 + 144);
          *(_OWORD *)(v6 + 128) = *(_OWORD *)(v39 + 128);
          *(_OWORD *)(v6 + 144) = v58;
          *(_OWORD *)(v6 + 96) = v56;
          *(_OWORD *)(v6 + 112) = v57;
          v59 = *(_OWORD *)(v39 + 160);
          v60 = *(_OWORD *)(v39 + 176);
          v61 = *(_OWORD *)(v39 + 208);
          *(_OWORD *)(v6 + 192) = *(_OWORD *)(v39 + 192);
          *(_OWORD *)(v6 + 208) = v61;
          *(_OWORD *)(v6 + 160) = v59;
          *(_OWORD *)(v6 + 176) = v60;
          v62 = *(_OWORD *)(v39 + 224);
          v63 = *(_OWORD *)(v39 + 240);
          v64 = *(_OWORD *)(v39 + 256);
          *(_BYTE *)(v6 + 272) = *(_BYTE *)(v39 + 272);
          *(_OWORD *)(v6 + 240) = v63;
          *(_OWORD *)(v6 + 256) = v64;
          *(_OWORD *)(v6 + 224) = v62;
          v65 = (__int128 *)(v39 + 280);
          if (*(unsigned __int8 *)(v6 + 296) == *(unsigned __int8 *)(v39 + 296))
          {
            if (*(_BYTE *)(v6 + 296))
            {
              v66 = *v65;
              *(_QWORD *)v65 = 0;
              *(_QWORD *)(v39 + 288) = 0;
              v67 = *(std::__shared_weak_count **)(v6 + 288);
              *(_OWORD *)(v6 + 280) = v66;
              if (v67)
              {
                p_shared_owners = (unint64_t *)&v67->__shared_owners_;
                do
                  v69 = __ldaxr(p_shared_owners);
                while (__stlxr(v69 - 1, p_shared_owners));
                if (!v69)
                {
                  ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                  std::__shared_weak_count::__release_weak(v67);
                }
              }
            }
          }
          else if (*(_BYTE *)(v6 + 296))
          {
            v70 = *(std::__shared_weak_count **)(v6 + 288);
            if (v70)
            {
              v71 = (unint64_t *)&v70->__shared_owners_;
              do
                v72 = __ldaxr(v71);
              while (__stlxr(v72 - 1, v71));
              if (!v72)
              {
                ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                std::__shared_weak_count::__release_weak(v70);
              }
            }
            *(_BYTE *)(v6 + 296) = 0;
          }
          else
          {
            *(_QWORD *)(v6 + 280) = *(_QWORD *)(v39 + 280);
            *(_QWORD *)(v6 + 288) = *(_QWORD *)(v39 + 288);
            *(_QWORD *)v65 = 0;
            *(_QWORD *)(v39 + 288) = 0;
            *(_BYTE *)(v6 + 296) = 1;
          }
          v41 = *(_OWORD *)(v39 + 304);
          *(_BYTE *)(v6 + 320) = *(_BYTE *)(v39 + 320);
          *(_OWORD *)(v6 + 304) = v41;
          v6 += 328;
          goto LABEL_58;
        }
LABEL_84:
        v51 = (char *)a3[1];
        if (v51 >= a3[2])
        {
          a3[1] = sub_20EE25A30(a3, v39);
        }
        else
        {
          *(_OWORD *)v51 = *(_OWORD *)v39;
          v51[16] = 0;
          v51[40] = 0;
          if (*(_BYTE *)(v39 + 40))
          {
            if (*(char *)(v39 + 39) < 0)
            {
              sub_20E860C04(v51 + 16, *(void **)(v39 + 16), *(_QWORD *)(v39 + 24));
            }
            else
            {
              v52 = *(_OWORD *)v42;
              *((_QWORD *)v51 + 4) = *(_QWORD *)(v39 + 32);
              *((_OWORD *)v51 + 1) = v52;
            }
            v51[40] = 1;
          }
          v73 = *(_OWORD *)(v39 + 48);
          v74 = *(_OWORD *)(v39 + 80);
          *((_OWORD *)v51 + 4) = *(_OWORD *)(v39 + 64);
          *((_OWORD *)v51 + 5) = v74;
          *((_OWORD *)v51 + 3) = v73;
          v75 = *(_OWORD *)(v39 + 96);
          v76 = *(_OWORD *)(v39 + 112);
          v77 = *(_OWORD *)(v39 + 144);
          *((_OWORD *)v51 + 8) = *(_OWORD *)(v39 + 128);
          *((_OWORD *)v51 + 9) = v77;
          *((_OWORD *)v51 + 6) = v75;
          *((_OWORD *)v51 + 7) = v76;
          v78 = *(_OWORD *)(v39 + 160);
          v79 = *(_OWORD *)(v39 + 176);
          v80 = *(_OWORD *)(v39 + 208);
          *((_OWORD *)v51 + 12) = *(_OWORD *)(v39 + 192);
          *((_OWORD *)v51 + 13) = v80;
          *((_OWORD *)v51 + 10) = v78;
          *((_OWORD *)v51 + 11) = v79;
          v81 = *(_OWORD *)(v39 + 224);
          v82 = *(_OWORD *)(v39 + 240);
          v83 = *(_OWORD *)(v39 + 256);
          v51[272] = *(_BYTE *)(v39 + 272);
          *((_OWORD *)v51 + 15) = v82;
          *((_OWORD *)v51 + 16) = v83;
          *((_OWORD *)v51 + 14) = v81;
          v51[280] = 0;
          v51[296] = 0;
          if (*(_BYTE *)(v39 + 296))
          {
            *((_QWORD *)v51 + 35) = *(_QWORD *)(v39 + 280);
            v84 = *(_QWORD *)(v39 + 288);
            *((_QWORD *)v51 + 36) = v84;
            if (v84)
            {
              v85 = (unint64_t *)(v84 + 8);
              do
                v86 = __ldxr(v85);
              while (__stxr(v86 + 1, v85));
            }
            v51[296] = 1;
          }
          v87 = *(_OWORD *)(v39 + 304);
          *((_QWORD *)v51 + 40) = *(_QWORD *)(v39 + 320);
          *((_OWORD *)v51 + 19) = v87;
          a3[1] = v51 + 328;
          a3[1] = v51 + 328;
        }
LABEL_58:
        v39 += 328;
      }
      while (v39 != v7);
    }
  }
  v88 = (char *)*a3;
  v89 = (char *)a3[1];
  if (*a3 != v89)
  {
    do
    {
      v90 = sub_20EE267A0((_QWORD *)(a1 + 48), (uint64_t)(v88 + 16));
      if (v90)
      {
        v91 = v90 + 5;
        v92 = sub_20EE1CCB4(v90 + 5, (uint64_t)v88);
        if (v92)
        {
          sub_20E8D2CE8(v91, v92, (uint64_t)&__p);
          v93 = __p;
          __p = 0;
          if (v93)
            operator delete(v93);
        }
      }
      v88 += 328;
    }
    while (v88 != v89);
  }
}

void sub_20EE24328(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  if (*(_BYTE *)(v3 + 40))
  {
    if (*(char *)(v3 + 39) < 0)
      operator delete(*v2);
  }
  *(_QWORD *)(v1 + 8) = v3;
  sub_20EE1968C((void **)v1);
  _Unwind_Resume(a1);
}

void sub_20EE24388(_Unwind_Exception *a1)
{
  void **v1;

  sub_20EE1968C(v1);
  _Unwind_Resume(a1);
}

void sub_20EE2439C(_Unwind_Exception *a1)
{
  void **v1;

  sub_20EE1968C(v1);
  _Unwind_Resume(a1);
}

void sub_20EE243B0(_Unwind_Exception *a1)
{
  void **v1;

  sub_20EE1968C(v1);
  _Unwind_Resume(a1);
}

void sub_20EE243C4(uint64_t a1@<X0>, uint64_t **a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t *v10;
  uint64_t *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t *v18;
  __int128 *v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  const void *v25;
  uint64_t v26;
  int v27;
  uint64_t *v28;
  char *v29;
  _BYTE *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  __int128 v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  __int128 v72;
  char *v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  char *v85;
  char *v86;
  std::__shared_weak_count *v87;
  unint64_t *p_shared_owners;
  unint64_t v89;
  uint64_t *v90;
  _OWORD *v91;
  uint64_t v92;
  _QWORD *v93;
  char *v95;
  char *v96;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    v5 = 0;
    v6 = 0;
    v93 = a3 + 2;
    while (1)
    {
      v8 = *(_QWORD *)(v4 + 456);
      v7 = *(_QWORD *)(v4 + 464);
      v90 = (uint64_t *)v4;
      if (v8 != v7)
        break;
LABEL_3:
      v4 = *v90;
      if (!*v90)
        return;
    }
    v91 = (_OWORD *)(v4 + 16);
    v92 = *(_QWORD *)(v4 + 464);
    while (1)
    {
      if (!*(_BYTE *)(v8 + 40))
        goto LABEL_9;
      v11 = *a2;
      v10 = a2[1];
      if (*a2 == v10)
        goto LABEL_31;
      v12 = *(_QWORD *)(v8 + 24);
      v13 = *(char *)(v8 + 39) >= 0 ? *(unsigned __int8 *)(v8 + 39) : *(_QWORD *)(v8 + 24);
      if ((*(_BYTE *)(v8 + 39) & 0x80) == 0)
        break;
      v25 = *(const void **)(v8 + 16);
      while (1)
      {
        v26 = *((unsigned __int8 *)v11 + 23);
        v27 = (char)v26;
        if ((v26 & 0x80u) != 0)
          v26 = v11[1];
        if (v13 == v26)
        {
          v28 = v27 >= 0 ? v11 : (uint64_t *)*v11;
          if (!memcmp(v25, v28, v12))
            break;
        }
        v11 += 3;
        if (v11 == v10)
        {
          v7 = v92;
          goto LABEL_9;
        }
      }
      v7 = v92;
      if (v11 != v10)
        goto LABEL_32;
LABEL_9:
      v8 += 328;
      if (v8 == v7)
        goto LABEL_3;
    }
    if (*(_BYTE *)(v8 + 39))
    {
      while (1)
      {
        v15 = *((unsigned __int8 *)v11 + 23);
        v16 = (char)v15;
        if ((v15 & 0x80u) != 0)
          v15 = v11[1];
        if (v13 == v15)
        {
          v17 = 0;
          if (v16 >= 0)
            v18 = v11;
          else
            v18 = (uint64_t *)*v11;
          while (*(unsigned __int8 *)(v8 + v17 + 16) == *((unsigned __int8 *)v18 + v17))
          {
            if (*(unsigned __int8 *)(v8 + 39) == ++v17)
              goto LABEL_31;
          }
        }
        v11 += 3;
        if (v11 == v10)
          goto LABEL_9;
      }
    }
    while (1)
    {
      v14 = *((unsigned __int8 *)v11 + 23);
      if ((v14 & 0x80u) != 0)
        v14 = v11[1];
      if (v13 == v14)
        break;
      v11 += 3;
      if (v11 == v10)
        goto LABEL_9;
    }
LABEL_31:
    if (v11 == v10)
      goto LABEL_9;
LABEL_32:
    v19 = (__int128 *)(v8 + 16);
    if ((unint64_t)v6 < *v93)
    {
      *(_OWORD *)v6 = *(_OWORD *)v8;
      v6[16] = 0;
      v6[40] = 0;
      if (*(_BYTE *)(v8 + 40))
      {
        if (*(char *)(v8 + 39) < 0)
        {
          sub_20E860C04(v6 + 16, *(void **)(v8 + 16), *(_QWORD *)(v8 + 24));
        }
        else
        {
          v20 = *v19;
          *((_QWORD *)v6 + 4) = *(_QWORD *)(v8 + 32);
          *((_OWORD *)v6 + 1) = v20;
        }
        v6[40] = 1;
      }
      v32 = *(_OWORD *)(v8 + 48);
      v33 = *(_OWORD *)(v8 + 80);
      *((_OWORD *)v6 + 4) = *(_OWORD *)(v8 + 64);
      *((_OWORD *)v6 + 5) = v33;
      *((_OWORD *)v6 + 3) = v32;
      v34 = *(_OWORD *)(v8 + 96);
      v35 = *(_OWORD *)(v8 + 112);
      v36 = *(_OWORD *)(v8 + 144);
      *((_OWORD *)v6 + 8) = *(_OWORD *)(v8 + 128);
      *((_OWORD *)v6 + 9) = v36;
      *((_OWORD *)v6 + 6) = v34;
      *((_OWORD *)v6 + 7) = v35;
      v37 = *(_OWORD *)(v8 + 160);
      v38 = *(_OWORD *)(v8 + 176);
      v39 = *(_OWORD *)(v8 + 208);
      *((_OWORD *)v6 + 12) = *(_OWORD *)(v8 + 192);
      *((_OWORD *)v6 + 13) = v39;
      *((_OWORD *)v6 + 10) = v37;
      *((_OWORD *)v6 + 11) = v38;
      v40 = *(_OWORD *)(v8 + 224);
      v41 = *(_OWORD *)(v8 + 240);
      v42 = *(_OWORD *)(v8 + 256);
      v6[272] = *(_BYTE *)(v8 + 272);
      *((_OWORD *)v6 + 15) = v41;
      *((_OWORD *)v6 + 16) = v42;
      *((_OWORD *)v6 + 14) = v40;
      v6[280] = 0;
      v6[296] = 0;
      if (*(_BYTE *)(v8 + 296))
      {
        *((_QWORD *)v6 + 35) = *(_QWORD *)(v8 + 280);
        v43 = *(_QWORD *)(v8 + 288);
        *((_QWORD *)v6 + 36) = v43;
        if (v43)
        {
          v44 = (unint64_t *)(v43 + 8);
          do
            v45 = __ldxr(v44);
          while (__stxr(v45 + 1, v44));
        }
        v6[296] = 1;
      }
      v9 = *(_OWORD *)(v8 + 304);
      *((_QWORD *)v6 + 40) = *(_QWORD *)(v8 + 320);
      *((_OWORD *)v6 + 19) = v9;
      *(_OWORD *)(v6 + 328) = *v91;
      v5 = v6 + 344;
      a3[1] = v6 + 344;
      goto LABEL_8;
    }
    v21 = 0x82FA0BE82FA0BE83 * ((uint64_t)&v5[-*a3] >> 3);
    v22 = v21 + 1;
    if (v21 + 1 > 0xBE82FA0BE82FA0)
      sub_20E867F44();
    if (0x5F417D05F417D06 * ((uint64_t)(*v93 - *a3) >> 3) > v22)
      v22 = 0x5F417D05F417D06 * ((uint64_t)(*v93 - *a3) >> 3);
    if (0x82FA0BE82FA0BE83 * ((uint64_t)(*v93 - *a3) >> 3) >= 0x5F417D05F417D0)
      v23 = 0xBE82FA0BE82FA0;
    else
      v23 = v22;
    if (v23)
    {
      if (v23 > 0xBE82FA0BE82FA0)
        sub_20E877A38();
      v24 = (char *)operator new(344 * v23);
    }
    else
    {
      v24 = 0;
    }
    v29 = &v24[344 * v21];
    v96 = &v24[344 * v23];
    *(_OWORD *)v29 = *(_OWORD *)v8;
    v29[16] = 0;
    v30 = v29 + 16;
    v29[40] = 0;
    if (*(_BYTE *)(v8 + 40))
    {
      if (*(char *)(v8 + 39) < 0)
      {
        sub_20E860C04(v30, *(void **)(v8 + 16), *(_QWORD *)(v8 + 24));
      }
      else
      {
        v31 = *v19;
        *((_QWORD *)v29 + 4) = *(_QWORD *)(v8 + 32);
        *(_OWORD *)v30 = v31;
      }
      v29[40] = 1;
    }
    v46 = *(_OWORD *)(v8 + 48);
    v47 = *(_OWORD *)(v8 + 80);
    *((_OWORD *)v29 + 4) = *(_OWORD *)(v8 + 64);
    *((_OWORD *)v29 + 5) = v47;
    *((_OWORD *)v29 + 3) = v46;
    v48 = *(_OWORD *)(v8 + 96);
    v49 = *(_OWORD *)(v8 + 112);
    v50 = *(_OWORD *)(v8 + 144);
    *((_OWORD *)v29 + 8) = *(_OWORD *)(v8 + 128);
    *((_OWORD *)v29 + 9) = v50;
    *((_OWORD *)v29 + 6) = v48;
    *((_OWORD *)v29 + 7) = v49;
    v51 = *(_OWORD *)(v8 + 160);
    v52 = *(_OWORD *)(v8 + 176);
    v53 = *(_OWORD *)(v8 + 208);
    *((_OWORD *)v29 + 12) = *(_OWORD *)(v8 + 192);
    *((_OWORD *)v29 + 13) = v53;
    *((_OWORD *)v29 + 10) = v51;
    *((_OWORD *)v29 + 11) = v52;
    v54 = *(_OWORD *)(v8 + 224);
    v55 = *(_OWORD *)(v8 + 240);
    v56 = *(_OWORD *)(v8 + 256);
    v29[272] = *(_BYTE *)(v8 + 272);
    *((_OWORD *)v29 + 15) = v55;
    *((_OWORD *)v29 + 16) = v56;
    *((_OWORD *)v29 + 14) = v54;
    v29[280] = 0;
    v29[296] = 0;
    v7 = v92;
    if (*(_BYTE *)(v8 + 296))
    {
      *((_QWORD *)v29 + 35) = *(_QWORD *)(v8 + 280);
      v57 = *(_QWORD *)(v8 + 288);
      *((_QWORD *)v29 + 36) = v57;
      if (v57)
      {
        v58 = (unint64_t *)(v57 + 8);
        do
          v59 = __ldxr(v58);
        while (__stxr(v59 + 1, v58));
      }
      v29[296] = 1;
    }
    v60 = *(_OWORD *)(v8 + 304);
    *((_QWORD *)v29 + 40) = *(_QWORD *)(v8 + 320);
    *((_OWORD *)v29 + 19) = v60;
    *(_OWORD *)&v24[344 * v21 + 328] = *v91;
    v61 = (char *)*a3;
    v62 = (char *)a3[1];
    v63 = v29;
    if (v62 == (char *)*a3)
    {
      v86 = (char *)a3[1];
    }
    else
    {
      v64 = 0;
      do
      {
        v67 = &v29[v64];
        v68 = &v62[v64];
        *(_OWORD *)&v29[v64 - 344] = *(_OWORD *)&v62[v64 - 344];
        v69 = &v29[v64 - 328];
        *v69 = 0;
        v70 = &v29[v64 - 304];
        *v70 = 0;
        if (v62[v64 - 304])
        {
          v71 = v68 - 328;
          v72 = *(_OWORD *)(v68 - 328);
          *(_QWORD *)&v29[v64 - 312] = *((_QWORD *)v68 - 39);
          *(_OWORD *)v69 = v72;
          *((_QWORD *)v71 + 1) = 0;
          *((_QWORD *)v71 + 2) = 0;
          *(_QWORD *)v71 = 0;
          *v70 = 1;
        }
        v73 = v67 - 296;
        v74 = *(_OWORD *)(v68 - 248);
        v75 = *(_OWORD *)(v68 - 232);
        v76 = *(_OWORD *)(v68 - 216);
        *(_OWORD *)(v67 - 200) = *(_OWORD *)(v68 - 200);
        *(_OWORD *)(v67 - 216) = v76;
        *(_OWORD *)(v67 - 232) = v75;
        *(_OWORD *)(v67 - 248) = v74;
        v77 = *(_OWORD *)(v68 - 184);
        v78 = *(_OWORD *)(v68 - 168);
        v79 = *(_OWORD *)(v68 - 152);
        *(_OWORD *)(v67 - 136) = *(_OWORD *)(v68 - 136);
        *(_OWORD *)(v67 - 152) = v79;
        *(_OWORD *)(v67 - 168) = v78;
        *(_OWORD *)(v67 - 184) = v77;
        v80 = *(_OWORD *)(v68 - 120);
        v81 = *(_OWORD *)(v68 - 104);
        v82 = *(_OWORD *)(v68 - 88);
        *(v67 - 72) = *(v68 - 72);
        *(_OWORD *)(v67 - 88) = v82;
        *(_OWORD *)(v67 - 104) = v81;
        *(_OWORD *)(v67 - 120) = v80;
        v83 = *(_OWORD *)(v68 - 296);
        v84 = *(_OWORD *)(v68 - 264);
        *((_OWORD *)v73 + 1) = *(_OWORD *)(v68 - 280);
        *((_OWORD *)v73 + 2) = v84;
        *(_OWORD *)v73 = v83;
        *(v67 - 64) = 0;
        *(v67 - 48) = 0;
        if (*(v68 - 48))
        {
          v85 = &v62[v64];
          *((_OWORD *)v67 - 4) = *(_OWORD *)&v62[v64 - 64];
          *((_QWORD *)v85 - 8) = 0;
          *((_QWORD *)v85 - 7) = 0;
          *(v67 - 48) = 1;
        }
        v65 = &v29[v64];
        v66 = *(_OWORD *)&v62[v64 - 40];
        *((_QWORD *)v65 - 3) = *(_QWORD *)&v62[v64 - 24];
        *(_OWORD *)(v65 - 40) = v66;
        *((_OWORD *)v65 - 1) = *(_OWORD *)&v62[v64 - 16];
        v64 -= 344;
      }
      while (&v62[v64] != v61);
      v86 = (char *)*a3;
      v62 = (char *)a3[1];
      v63 = &v29[v64];
    }
    v5 = v29 + 344;
    *a3 = v63;
    a3[1] = v29 + 344;
    a3[2] = v96;
    if (v62 == v86)
    {
      if (v62)
        goto LABEL_99;
      goto LABEL_8;
    }
    while (1)
    {
      v95 = v62 - 344;
      if (!*(v62 - 48))
        goto LABEL_105;
      v87 = (std::__shared_weak_count *)*((_QWORD *)v62 - 7);
      if (!v87)
        goto LABEL_105;
      p_shared_owners = (unint64_t *)&v87->__shared_owners_;
      do
        v89 = __ldaxr(p_shared_owners);
      while (__stlxr(v89 - 1, p_shared_owners));
      if (!v89)
      {
        ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
        std::__shared_weak_count::__release_weak(v87);
        if (*(v62 - 304))
        {
LABEL_94:
          if (*(v62 - 305) < 0)
            operator delete(*((void **)v62 - 41));
        }
      }
      else
      {
LABEL_105:
        if (*(v62 - 304))
          goto LABEL_94;
      }
      v62 -= 344;
      if (v95 == v86)
      {
        v62 = v86;
        v7 = v92;
        if (v86)
LABEL_99:
          operator delete(v62);
LABEL_8:
        a3[1] = v5;
        v6 = v5;
        goto LABEL_9;
      }
    }
  }
}

void sub_20EE24A88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void **v6;
  void **v7;
  uint64_t v8;
  va_list va;

  va_start(va, a6);
  if (*(_BYTE *)(v8 + 40))
  {
    if (*(char *)(v8 + 39) < 0)
      operator delete(*v7);
  }
  sub_20EE138E0((uint64_t)va);
  sub_20EE1B3E8(v6);
  _Unwind_Resume(a1);
}

void sub_20EE24ABC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  if (*(_BYTE *)(v3 + 40))
  {
    if (*(char *)(v3 + 39) < 0)
      operator delete(*v2);
  }
  *(_QWORD *)(v1 + 8) = v3;
  sub_20EE1B3E8((void **)v1);
  _Unwind_Resume(a1);
}

void sub_20EE24AEC(_Unwind_Exception *a1)
{
  void **v1;

  sub_20EE1B3E8(v1);
  _Unwind_Resume(a1);
}

void sub_20EE24B00(_Unwind_Exception *a1)
{
  void **v1;

  sub_20EE1B3E8(v1);
  _Unwind_Resume(a1);
}

void sub_20EE24B14(uint64_t a1, char ****a2, int a3)
{
  _QWORD *v3;
  __int128 *v4;
  __int128 *v5;
  _QWORD *v6;
  char **v7;
  char **v8;
  size_t v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;
  char *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int128 v19;
  char **v20;
  char **v21;
  char *v22;
  int v23;
  char **v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  int v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  __int128 v40;
  char *v41;
  char *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  char *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  __int128 v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  __int128 v81;
  char *v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  char *v94;
  char *v95;
  std::__shared_weak_count *v96;
  unint64_t *p_shared_owners;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t *v102;
  unint64_t v103;
  int8x8_t v104;
  uint8x8_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t **v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v112;
  unint64_t v114;
  __int128 *v115;
  __int128 *v116;
  uint64_t *v117;
  uint64_t *v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  void **v123;
  _OWORD *v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 *v132;
  __int128 v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  _QWORD *v143;
  _QWORD *v146;
  __int128 v147;
  __int128 __p;
  uint64_t v149;
  char v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  char v165;
  __int128 v166;
  char v167;
  __int128 v168;
  uint64_t v169;
  __int128 v170;
  uint64_t v171;

  v171 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD **)(a1 + 24);
  if (v3)
  {
    v143 = (_QWORD *)(a1 + 48);
    while (1)
    {
      v4 = (__int128 *)v3[57];
      v5 = (__int128 *)v3[58];
      v146 = v3;
      if (v4 != v5)
        break;
LABEL_3:
      v3 = (_QWORD *)*v146;
      if (!*v146)
        return;
    }
    v6 = v3 + 2;
LABEL_8:
    v8 = **a2;
    v7 = (*a2)[1];
    if (v8 != v7)
    {
      if (*((_BYTE *)v4 + 40))
      {
        v9 = *((_QWORD *)v4 + 3);
        if (*((char *)v4 + 39) >= 0)
          v10 = (char *)*((unsigned __int8 *)v4 + 39);
        else
          v10 = (char *)*((_QWORD *)v4 + 3);
        if ((*((_BYTE *)v4 + 39) & 0x80) != 0)
        {
          v20 = v8 + 3;
          while (1)
          {
            v22 = (char *)*((unsigned __int8 *)v20 + 23);
            v23 = (char)v22;
            if ((char)v22 < 0)
              v22 = v20[1];
            if (v10 == v22)
            {
              v24 = v23 >= 0 ? v20 : (char **)*v20;
              if (!memcmp(*((const void **)v4 + 2), v24, v9))
                break;
            }
            v21 = v20 + 3;
            v20 += 6;
            if (v21 == v7)
              goto LABEL_6;
          }
          v8 = v20 - 3;
          if (v8 == v7)
            goto LABEL_6;
          goto LABEL_33;
        }
        if (*((_BYTE *)v4 + 39))
        {
          do
          {
            v12 = (char *)*((unsigned __int8 *)v8 + 47);
            v13 = (char)v12;
            if ((char)v12 < 0)
              v12 = v8[4];
            if (v10 == v12)
            {
              if (v13 >= 0)
                v14 = (char *)(v8 + 3);
              else
                v14 = v8[3];
              v15 = (unsigned __int8 *)(v4 + 1);
              v16 = *((unsigned __int8 *)v4 + 39);
              while (*v15 == *v14)
              {
                ++v15;
                ++v14;
                if (!--v16)
                  goto LABEL_32;
              }
            }
            v8 += 6;
          }
          while (v8 != v7);
LABEL_6:
          v4 = (__int128 *)((char *)v4 + 328);
          goto LABEL_7;
        }
        while (1)
        {
          v11 = (char *)*((unsigned __int8 *)v8 + 47);
          if ((char)v11 < 0)
            v11 = v8[4];
          if (v10 == v11)
            break;
          v8 += 6;
          if (v8 == v7)
            goto LABEL_6;
        }
      }
      else
      {
        v8 += 6 * (((char *)v7 - (char *)v8 - 48) / 0x30uLL) + 6;
      }
    }
LABEL_32:
    if (v8 == v7)
      goto LABEL_6;
LABEL_33:
    v17 = atomic_load((unsigned __int8 *)&qword_254A51318);
    if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_254A51318))
    {
      xmmword_254A51308 = 0uLL;
      __cxa_guard_release(&qword_254A51318);
    }
    if (qword_254A51320 != -1)
      dispatch_once(&qword_254A51320, &unk_24C9EB058);
    if (*v6 != (_QWORD)xmmword_254A51308 || v6[1] != *((_QWORD *)&xmmword_254A51308 + 1))
    {
      v147 = *v4;
      LOBYTE(__p) = 0;
      v150 = 0;
      if (*((_BYTE *)v4 + 40))
      {
        if (*((char *)v4 + 39) < 0)
        {
          sub_20E860C04(&__p, *((void **)v4 + 2), *((_QWORD *)v4 + 3));
        }
        else
        {
          v19 = v4[1];
          v149 = *((_QWORD *)v4 + 4);
          __p = v19;
        }
        v150 = 1;
      }
      v25 = v4[3];
      v26 = v4[5];
      v152 = v4[4];
      v153 = v26;
      v151 = v25;
      v27 = v4[6];
      v28 = v4[7];
      v29 = v4[9];
      v156 = v4[8];
      v157 = v29;
      v154 = v27;
      v155 = v28;
      v30 = v4[10];
      v31 = v4[11];
      v32 = v4[13];
      v160 = v4[12];
      v161 = v32;
      v158 = v30;
      v159 = v31;
      v33 = v4[14];
      v34 = v4[15];
      v35 = v4[16];
      v165 = *((_BYTE *)v4 + 272);
      v163 = v34;
      v164 = v35;
      v162 = v33;
      LOBYTE(v166) = 0;
      v167 = 0;
      v36 = *((unsigned __int8 *)v4 + 296);
      if (*((_BYTE *)v4 + 296))
      {
        v37 = *((_QWORD *)v4 + 36);
        *(_QWORD *)&v166 = *((_QWORD *)v4 + 35);
        *((_QWORD *)&v166 + 1) = v37;
        if (v37)
        {
          v38 = (unint64_t *)(v37 + 8);
          do
            v39 = __ldxr(v38);
          while (__stxr(v39 + 1, v38));
        }
        v167 = 1;
      }
      v40 = v4[19];
      v169 = *((_QWORD *)v4 + 40);
      v168 = v40;
      v170 = *(_OWORD *)v6;
      v41 = v8[1];
      v42 = v8[2];
      if (v41 >= v42)
      {
        v57 = 0x82FA0BE82FA0BE83 * ((v41 - *v8) >> 3);
        v58 = v57 + 1;
        if (v57 + 1 > 0xBE82FA0BE82FA0)
          sub_20E867F44();
        v59 = 0x82FA0BE82FA0BE83 * ((v42 - *v8) >> 3);
        if (2 * v59 > v58)
          v58 = 2 * v59;
        if (v59 >= 0x5F417D05F417D0)
          v60 = 0xBE82FA0BE82FA0;
        else
          v60 = v58;
        if (v60)
        {
          if (v60 > 0xBE82FA0BE82FA0)
            sub_20E877A38();
          v61 = (char *)operator new(344 * v60);
        }
        else
        {
          v61 = 0;
        }
        v62 = &v61[344 * v57];
        *(_OWORD *)v62 = v147;
        v62[16] = 0;
        v62[40] = 0;
        if (v150)
        {
          *((_OWORD *)v62 + 1) = __p;
          *((_QWORD *)v62 + 4) = v149;
          v149 = 0;
          __p = 0uLL;
          v62[40] = 1;
        }
        v63 = v164;
        *((_OWORD *)v62 + 15) = v163;
        *((_OWORD *)v62 + 16) = v63;
        v62[272] = v165;
        v64 = v160;
        *((_OWORD *)v62 + 11) = v159;
        *((_OWORD *)v62 + 12) = v64;
        v65 = v162;
        *((_OWORD *)v62 + 13) = v161;
        *((_OWORD *)v62 + 14) = v65;
        v66 = v156;
        *((_OWORD *)v62 + 7) = v155;
        *((_OWORD *)v62 + 8) = v66;
        v67 = v158;
        *((_OWORD *)v62 + 9) = v157;
        *((_OWORD *)v62 + 10) = v67;
        v68 = v152;
        *((_OWORD *)v62 + 3) = v151;
        *((_OWORD *)v62 + 4) = v68;
        v69 = v154;
        *((_OWORD *)v62 + 5) = v153;
        *((_OWORD *)v62 + 6) = v69;
        v62[280] = 0;
        v62[296] = 0;
        if (v36)
        {
          *(_OWORD *)(v62 + 280) = v166;
          v166 = 0uLL;
          v62[296] = 1;
        }
        v70 = &v61[344 * v60];
        *((_QWORD *)v62 + 40) = v169;
        *((_OWORD *)v62 + 19) = v168;
        *(_OWORD *)&v61[344 * v57 + 328] = v170;
        v56 = v62 + 344;
        v71 = *v8;
        v72 = v8[1];
        if (v72 != *v8)
        {
          v73 = 0;
          do
          {
            v76 = &v62[v73];
            v77 = &v72[v73];
            *(_OWORD *)&v62[v73 - 344] = *(_OWORD *)&v72[v73 - 344];
            v78 = &v62[v73 - 328];
            *v78 = 0;
            v79 = &v62[v73 - 304];
            *v79 = 0;
            if (v72[v73 - 304])
            {
              v80 = v77 - 328;
              v81 = *(_OWORD *)(v77 - 328);
              *(_QWORD *)&v62[v73 - 312] = *((_QWORD *)v77 - 39);
              *(_OWORD *)v78 = v81;
              *((_QWORD *)v80 + 1) = 0;
              *((_QWORD *)v80 + 2) = 0;
              *(_QWORD *)v80 = 0;
              *v79 = 1;
            }
            v82 = v76 - 296;
            v83 = *(_OWORD *)(v77 - 248);
            v84 = *(_OWORD *)(v77 - 232);
            v85 = *(_OWORD *)(v77 - 216);
            *(_OWORD *)(v76 - 200) = *(_OWORD *)(v77 - 200);
            *(_OWORD *)(v76 - 216) = v85;
            *(_OWORD *)(v76 - 232) = v84;
            *(_OWORD *)(v76 - 248) = v83;
            v86 = *(_OWORD *)(v77 - 184);
            v87 = *(_OWORD *)(v77 - 168);
            v88 = *(_OWORD *)(v77 - 152);
            *(_OWORD *)(v76 - 136) = *(_OWORD *)(v77 - 136);
            *(_OWORD *)(v76 - 152) = v88;
            *(_OWORD *)(v76 - 168) = v87;
            *(_OWORD *)(v76 - 184) = v86;
            v89 = *(_OWORD *)(v77 - 120);
            v90 = *(_OWORD *)(v77 - 104);
            v91 = *(_OWORD *)(v77 - 88);
            *(v76 - 72) = *(v77 - 72);
            *(_OWORD *)(v76 - 88) = v91;
            *(_OWORD *)(v76 - 104) = v90;
            *(_OWORD *)(v76 - 120) = v89;
            v92 = *(_OWORD *)(v77 - 296);
            v93 = *(_OWORD *)(v77 - 264);
            *((_OWORD *)v82 + 1) = *(_OWORD *)(v77 - 280);
            *((_OWORD *)v82 + 2) = v93;
            *(_OWORD *)v82 = v92;
            *(v76 - 64) = 0;
            *(v76 - 48) = 0;
            if (*(v77 - 48))
            {
              v94 = &v72[v73];
              *((_OWORD *)v76 - 4) = *(_OWORD *)&v72[v73 - 64];
              *((_QWORD *)v94 - 8) = 0;
              *((_QWORD *)v94 - 7) = 0;
              *(v76 - 48) = 1;
            }
            v74 = &v62[v73];
            v75 = *(_OWORD *)&v72[v73 - 40];
            *((_QWORD *)v74 - 3) = *(_QWORD *)&v72[v73 - 24];
            *(_OWORD *)(v74 - 40) = v75;
            *((_OWORD *)v74 - 1) = *(_OWORD *)&v72[v73 - 16];
            v73 -= 344;
          }
          while (&v72[v73] != v71);
          v72 = *v8;
          v95 = v8[1];
          *v8 = &v62[v73];
          v8[1] = v56;
          v8[2] = v70;
          while (2)
          {
            if (v95 == v72)
              goto LABEL_102;
            if (!*(v95 - 48))
              goto LABEL_219;
            v96 = (std::__shared_weak_count *)*((_QWORD *)v95 - 7);
            if (!v96)
              goto LABEL_219;
            p_shared_owners = (unint64_t *)&v96->__shared_owners_;
            do
              v98 = __ldaxr(p_shared_owners);
            while (__stlxr(v98 - 1, p_shared_owners));
            if (!v98)
            {
              ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
              std::__shared_weak_count::__release_weak(v96);
              if (*(v95 - 304))
                goto LABEL_97;
            }
            else
            {
LABEL_219:
              if (*(v95 - 304))
              {
LABEL_97:
                if (*(v95 - 305) < 0)
                  operator delete(*((void **)v95 - 41));
              }
            }
            v95 -= 344;
            continue;
          }
        }
        *v8 = v62;
        v8[1] = v56;
        v8[2] = v70;
LABEL_102:
        if (v72)
          operator delete(v72);
      }
      else
      {
        *(_OWORD *)v41 = v147;
        v41[16] = 0;
        v41[40] = 0;
        if (v150)
        {
          v43 = __p;
          *((_QWORD *)v41 + 4) = v149;
          *((_OWORD *)v41 + 1) = v43;
          v149 = 0;
          __p = 0uLL;
          v41[40] = 1;
        }
        v44 = v151;
        v45 = v153;
        *((_OWORD *)v41 + 4) = v152;
        *((_OWORD *)v41 + 5) = v45;
        *((_OWORD *)v41 + 3) = v44;
        v46 = v154;
        v47 = v155;
        v48 = v157;
        *((_OWORD *)v41 + 8) = v156;
        *((_OWORD *)v41 + 9) = v48;
        *((_OWORD *)v41 + 6) = v46;
        *((_OWORD *)v41 + 7) = v47;
        v49 = v158;
        v50 = v159;
        v51 = v161;
        *((_OWORD *)v41 + 12) = v160;
        *((_OWORD *)v41 + 13) = v51;
        *((_OWORD *)v41 + 10) = v49;
        *((_OWORD *)v41 + 11) = v50;
        v52 = v162;
        v53 = v163;
        v54 = v164;
        v41[272] = v165;
        *((_OWORD *)v41 + 15) = v53;
        *((_OWORD *)v41 + 16) = v54;
        *((_OWORD *)v41 + 14) = v52;
        v41[280] = 0;
        v41[296] = 0;
        if (v167)
        {
          *(_OWORD *)(v41 + 280) = v166;
          v166 = 0uLL;
          v41[296] = 1;
        }
        v55 = v168;
        *((_QWORD *)v41 + 40) = v169;
        *((_OWORD *)v41 + 19) = v55;
        *(_OWORD *)(v41 + 328) = v170;
        v56 = v41 + 344;
      }
      v8[1] = v56;
      if (v167)
      {
        v99 = (std::__shared_weak_count *)*((_QWORD *)&v166 + 1);
        if (*((_QWORD *)&v166 + 1))
        {
          v100 = (unint64_t *)(*((_QWORD *)&v166 + 1) + 8);
          do
            v101 = __ldaxr(v100);
          while (__stlxr(v101 - 1, v100));
          if (!v101)
          {
            ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
            std::__shared_weak_count::__release_weak(v99);
          }
        }
      }
      if (v150 && SHIBYTE(v149) < 0)
        operator delete((void *)__p);
    }
    if (!a3)
    {
      v4 = (__int128 *)((char *)v4 + 328);
      v5 = (__int128 *)v146[58];
      goto LABEL_7;
    }
    v102 = sub_20EE267A0(v143, (uint64_t)(v4 + 1));
    if (!v102)
      goto LABEL_142;
    v103 = sub_2102322B4((unsigned __int8 *)v4);
    v104 = (int8x8_t)v102[6];
    if (!*(_QWORD *)&v104)
      goto LABEL_142;
    v105 = (uint8x8_t)vcnt_s8(v104);
    v105.i16[0] = vaddlv_u8(v105);
    if (v105.u32[0] > 1uLL)
    {
      v106 = v103;
      if (v103 >= *(_QWORD *)&v104)
        v106 = v103 % *(_QWORD *)&v104;
    }
    else
    {
      v106 = (*(_QWORD *)&v104 - 1) & v103;
    }
    v107 = v102[5];
    v108 = *(uint64_t ***)(v107 + 8 * v106);
    if (!v108 || (v109 = *v108) == 0)
    {
LABEL_142:
      v115 = (__int128 *)((char *)v4 + 328);
      v116 = (__int128 *)v146[58];
      v5 = v4;
      if ((__int128 *)((char *)v4 + 328) == v116)
        goto LABEL_200;
      do
      {
LABEL_174:
        *v5 = *v115;
        v123 = (void **)(v5 + 1);
        v124 = v115 + 1;
        if (*((unsigned __int8 *)v5 + 40) == *((unsigned __int8 *)v115 + 40))
        {
          if (*((_BYTE *)v5 + 40))
          {
            if (*((char *)v5 + 39) < 0)
              operator delete(*v123);
            *(_OWORD *)v123 = *v124;
            *((_QWORD *)v5 + 4) = *((_QWORD *)v115 + 4);
            *((_BYTE *)v115 + 39) = 0;
            *((_BYTE *)v115 + 16) = 0;
          }
        }
        else if (*((_BYTE *)v5 + 40))
        {
          if (*((char *)v5 + 39) < 0)
            operator delete(*v123);
          *((_BYTE *)v5 + 40) = 0;
        }
        else
        {
          *(_OWORD *)v123 = *v124;
          *((_QWORD *)v5 + 4) = *((_QWORD *)v115 + 4);
          *((_QWORD *)v115 + 3) = 0;
          *((_QWORD *)v115 + 4) = 0;
          *(_QWORD *)v124 = 0;
          *((_BYTE *)v5 + 40) = 1;
        }
        v125 = v115[16];
        v5[15] = v115[15];
        v5[16] = v125;
        *((_BYTE *)v5 + 272) = *((_BYTE *)v115 + 272);
        v126 = v115[12];
        v5[11] = v115[11];
        v5[12] = v126;
        v127 = v115[14];
        v5[13] = v115[13];
        v5[14] = v127;
        v128 = v115[8];
        v5[7] = v115[7];
        v5[8] = v128;
        v129 = v115[10];
        v5[9] = v115[9];
        v5[10] = v129;
        v130 = v115[4];
        v5[3] = v115[3];
        v5[4] = v130;
        v131 = v115[6];
        v5[5] = v115[5];
        v5[6] = v131;
        v132 = (__int128 *)((char *)v115 + 280);
        if (*((unsigned __int8 *)v5 + 296) == *((unsigned __int8 *)v115 + 296))
        {
          if (*((_BYTE *)v5 + 296))
          {
            v133 = *v132;
            *(_QWORD *)v132 = 0;
            *((_QWORD *)v115 + 36) = 0;
            v134 = (std::__shared_weak_count *)*((_QWORD *)v5 + 36);
            *(__int128 *)((char *)v5 + 280) = v133;
            if (v134)
            {
              v135 = (unint64_t *)&v134->__shared_owners_;
              do
                v136 = __ldaxr(v135);
              while (__stlxr(v136 - 1, v135));
              if (!v136)
              {
                ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
                std::__shared_weak_count::__release_weak(v134);
              }
            }
          }
        }
        else if (*((_BYTE *)v5 + 296))
        {
          v137 = (std::__shared_weak_count *)*((_QWORD *)v5 + 36);
          if (v137)
          {
            v138 = (unint64_t *)&v137->__shared_owners_;
            do
              v139 = __ldaxr(v138);
            while (__stlxr(v139 - 1, v138));
            if (!v139)
            {
              ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
              std::__shared_weak_count::__release_weak(v137);
            }
          }
          *((_BYTE *)v5 + 296) = 0;
        }
        else
        {
          *((_QWORD *)v5 + 35) = *((_QWORD *)v115 + 35);
          *((_QWORD *)v5 + 36) = *((_QWORD *)v115 + 36);
          *(_QWORD *)v132 = 0;
          *((_QWORD *)v115 + 36) = 0;
          *((_BYTE *)v5 + 296) = 1;
        }
        v5[19] = v115[19];
        *((_BYTE *)v5 + 320) = *((_BYTE *)v115 + 320);
        v115 = (__int128 *)((char *)v115 + 328);
        v5 = (__int128 *)((char *)v5 + 328);
      }
      while (v115 != v116);
      v115 = (__int128 *)v146[58];
      goto LABEL_200;
    }
    v110 = *(_QWORD *)&v104 - 1;
    if (v105.u32[0] < 2uLL)
    {
      while (1)
      {
        v112 = v109[1];
        if (v112 == v103)
        {
          if (v109[2] == *(_QWORD *)v4 && v109[3] == *((_QWORD *)v4 + 1))
            goto LABEL_144;
        }
        else if ((v112 & v110) != v106)
        {
          goto LABEL_142;
        }
        v109 = (uint64_t *)*v109;
        if (!v109)
          goto LABEL_142;
      }
    }
    while (1)
    {
      v114 = v109[1];
      if (v114 == v103)
      {
        if (v109[2] == *(_QWORD *)v4 && v109[3] == *((_QWORD *)v4 + 1))
        {
LABEL_144:
          if (v105.u32[0] > 1uLL)
          {
            if (v103 >= *(_QWORD *)&v104)
              v103 %= *(_QWORD *)&v104;
          }
          else
          {
            v103 &= v110;
          }
          v117 = *(uint64_t **)(v107 + 8 * v103);
          do
          {
            v118 = v117;
            v117 = (uint64_t *)*v117;
          }
          while (v117 != v109);
          if (v118 == v102 + 7)
            goto LABEL_161;
          v119 = v118[1];
          if (v105.u32[0] > 1uLL)
          {
            if (v119 >= *(_QWORD *)&v104)
              v119 %= *(_QWORD *)&v104;
          }
          else
          {
            v119 &= v110;
          }
          if (v119 != v103)
          {
LABEL_161:
            if (!*v109)
              goto LABEL_162;
            v120 = *(_QWORD *)(*v109 + 8);
            if (v105.u32[0] > 1uLL)
            {
              if (v120 >= *(_QWORD *)&v104)
                v120 %= *(_QWORD *)&v104;
            }
            else
            {
              v120 &= v110;
            }
            if (v120 != v103)
LABEL_162:
              *(_QWORD *)(v107 + 8 * v103) = 0;
          }
          v121 = *v109;
          if (*v109)
          {
            v122 = *(_QWORD *)(v121 + 8);
            if (v105.u32[0] > 1uLL)
            {
              if (v122 >= *(_QWORD *)&v104)
                v122 %= *(_QWORD *)&v104;
            }
            else
            {
              v122 &= v110;
            }
            if (v122 != v103)
            {
              *(_QWORD *)(v102[5] + 8 * v122) = v118;
              v121 = *v109;
            }
          }
          *v118 = v121;
          *v109 = 0;
          --v102[8];
          operator delete(v109);
          v115 = (__int128 *)((char *)v4 + 328);
          v116 = (__int128 *)v146[58];
          v5 = v4;
          if ((__int128 *)((char *)v4 + 328) != v116)
            goto LABEL_174;
LABEL_200:
          while (2)
          {
            if (v115 != v5)
            {
              if (!*((_BYTE *)v115 - 32))
                goto LABEL_220;
              v140 = (std::__shared_weak_count *)*((_QWORD *)v115 - 5);
              if (!v140)
                goto LABEL_220;
              v141 = (unint64_t *)&v140->__shared_owners_;
              do
                v142 = __ldaxr(v141);
              while (__stlxr(v142 - 1, v141));
              if (!v142)
              {
                ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
                std::__shared_weak_count::__release_weak(v140);
                if (*((_BYTE *)v115 - 288))
                  goto LABEL_207;
              }
              else
              {
LABEL_220:
                if (*((_BYTE *)v115 - 288))
                {
LABEL_207:
                  if (*((char *)v115 - 289) < 0)
                    operator delete(*((void **)v115 - 39));
                }
              }
              v115 = (__int128 *)((char *)v115 - 328);
              continue;
            }
            break;
          }
          v146[58] = v5;
LABEL_7:
          if (v4 == v5)
            goto LABEL_3;
          goto LABEL_8;
        }
      }
      else
      {
        if (v114 >= *(_QWORD *)&v104)
          v114 %= *(_QWORD *)&v104;
        if (v114 != v106)
          goto LABEL_142;
      }
      v109 = (uint64_t *)*v109;
      if (!v109)
        goto LABEL_142;
    }
  }
}

void sub_20EE257FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  if (a25)
  {
    if (a24 < 0)
    {
      operator delete(__p);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20EE25854(void **__dst, char *__src)
{
  __int128 v4;

  if (*((unsigned __int8 *)__dst + 416) == __src[416])
  {
    if (*((_BYTE *)__dst + 416))
    {
      memcpy(__dst, __src, 0x179uLL);
      sub_20E869118((uint64_t)(__dst + 48), (_QWORD *)__src + 48);
    }
  }
  else if (*((_BYTE *)__dst + 416))
  {
    if (*((_BYTE *)__dst + 408) && *((char *)__dst + 407) < 0)
      operator delete(__dst[48]);
    *((_BYTE *)__dst + 416) = 0;
  }
  else
  {
    memcpy(__dst, __src, 0x179uLL);
    *((_BYTE *)__dst + 384) = 0;
    *((_BYTE *)__dst + 408) = 0;
    if (__src[408])
    {
      if (__src[407] < 0)
      {
        sub_20E860C04((_BYTE *)__dst + 384, *((void **)__src + 48), *((_QWORD *)__src + 49));
      }
      else
      {
        v4 = *((_OWORD *)__src + 24);
        __dst[50] = (void *)*((_QWORD *)__src + 50);
        *((_OWORD *)__dst + 24) = v4;
      }
      *((_BYTE *)__dst + 408) = 1;
    }
    *((_BYTE *)__dst + 416) = 1;
  }
}

void sub_20EE25948(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(_BYTE *)(v1 + 408))
  {
    if (*(char *)(v1 + 407) < 0)
      operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EE2596C(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (1)
    {
      if (v3 == v4)
        return a1;
      if (!*(_BYTE *)(v3 - 32))
        goto LABEL_11;
      v5 = *(std::__shared_weak_count **)(v3 - 40);
      if (!v5)
        goto LABEL_11;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
        if (!*(_BYTE *)(v3 - 288))
          goto LABEL_4;
      }
      else
      {
LABEL_11:
        if (!*(_BYTE *)(v3 - 288))
          goto LABEL_4;
      }
      if (*(char *)(v3 - 289) < 0)
        operator delete(*(void **)(v3 - 312));
LABEL_4:
      v3 -= 328;
    }
  }
  return a1;
}

char *sub_20EE25A30(void **a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  __int128 v9;
  char *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _QWORD *v17;
  _BYTE *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  __int128 v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  char *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  char *v47;
  char *v48;
  std::__shared_weak_count *v50;
  unint64_t *p_shared_owners;
  unint64_t v52;
  char *v53;
  char *v54;
  char *v55;

  v2 = 0x8F9C18F9C18F9C19 * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0xC7CE0C7CE0C7CELL)
    sub_20E867F44();
  if (0x1F3831F3831F3832 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v3)
    v3 = 0x1F3831F3831F3832 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0x8F9C18F9C18F9C19 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x63E7063E7063E7)
    v6 = 0xC7CE0C7CE0C7CELL;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0xC7CE0C7CE0C7CELL)
      sub_20E877A38();
    v7 = operator new(328 * v6);
  }
  else
  {
    v7 = 0;
  }
  v53 = (char *)&v7[41 * v2];
  v55 = (char *)&v7[41 * v6];
  *(_OWORD *)v53 = *(_OWORD *)a2;
  v53[16] = 0;
  v8 = v53 + 16;
  v53[40] = 0;
  if (*(_BYTE *)(a2 + 40))
  {
    if (*(char *)(a2 + 39) < 0)
    {
      sub_20E860C04(v8, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
    }
    else
    {
      *(_OWORD *)v8 = *(_OWORD *)(a2 + 16);
      *((_QWORD *)v53 + 4) = *(_QWORD *)(a2 + 32);
    }
    v53[40] = 1;
  }
  v9 = *(_OWORD *)(a2 + 256);
  v10 = (char *)&v7[41 * v2];
  *((_OWORD *)v10 + 15) = *(_OWORD *)(a2 + 240);
  *((_OWORD *)v10 + 16) = v9;
  v10[272] = *(_BYTE *)(a2 + 272);
  v11 = *(_OWORD *)(a2 + 192);
  *((_OWORD *)v10 + 11) = *(_OWORD *)(a2 + 176);
  *((_OWORD *)v10 + 12) = v11;
  v12 = *(_OWORD *)(a2 + 224);
  *((_OWORD *)v10 + 13) = *(_OWORD *)(a2 + 208);
  *((_OWORD *)v10 + 14) = v12;
  v13 = *(_OWORD *)(a2 + 128);
  *((_OWORD *)v10 + 7) = *(_OWORD *)(a2 + 112);
  *((_OWORD *)v10 + 8) = v13;
  v14 = *(_OWORD *)(a2 + 160);
  *((_OWORD *)v10 + 9) = *(_OWORD *)(a2 + 144);
  *((_OWORD *)v10 + 10) = v14;
  v15 = *(_OWORD *)(a2 + 64);
  *((_OWORD *)v10 + 3) = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v10 + 4) = v15;
  v16 = *(_OWORD *)(a2 + 96);
  *((_OWORD *)v10 + 5) = *(_OWORD *)(a2 + 80);
  *((_OWORD *)v10 + 6) = v16;
  v10[280] = 0;
  v10[296] = 0;
  if (*(_BYTE *)(a2 + 296))
  {
    v17 = v10 + 280;
    v18 = v10 + 296;
    v19 = *(_QWORD *)(a2 + 288);
    *v17 = *(_QWORD *)(a2 + 280);
    v7[41 * v2 + 36] = v19;
    if (v19)
    {
      v20 = (unint64_t *)(v19 + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    *v18 = 1;
  }
  v22 = (char *)&v7[41 * v2];
  *((_OWORD *)v22 + 19) = *(_OWORD *)(a2 + 304);
  *((_QWORD *)v22 + 40) = *(_QWORD *)(a2 + 320);
  v23 = v22 + 328;
  v24 = (char *)*a1;
  v25 = (char *)a1[1];
  if (v25 == *a1)
  {
    v48 = (char *)a1[1];
  }
  else
  {
    v26 = 0;
    do
    {
      v29 = &v53[v26];
      v30 = &v25[v26];
      *(_OWORD *)&v53[v26 - 328] = *(_OWORD *)&v25[v26 - 328];
      v31 = &v53[v26 - 312];
      *v31 = 0;
      v32 = &v53[v26 - 288];
      *v32 = 0;
      if (v25[v26 - 288])
      {
        v33 = v30 - 312;
        v34 = *(_OWORD *)(v30 - 312);
        *(_QWORD *)&v53[v26 - 296] = *((_QWORD *)v30 - 37);
        *(_OWORD *)v31 = v34;
        *((_QWORD *)v33 + 1) = 0;
        *((_QWORD *)v33 + 2) = 0;
        *(_QWORD *)v33 = 0;
        *v32 = 1;
      }
      v35 = v29 - 280;
      v36 = *(_OWORD *)(v30 - 232);
      v37 = *(_OWORD *)(v30 - 216);
      v38 = *(_OWORD *)(v30 - 200);
      *(_OWORD *)(v29 - 184) = *(_OWORD *)(v30 - 184);
      *(_OWORD *)(v29 - 200) = v38;
      *(_OWORD *)(v29 - 216) = v37;
      *(_OWORD *)(v29 - 232) = v36;
      v39 = *(_OWORD *)(v30 - 168);
      v40 = *(_OWORD *)(v30 - 152);
      v41 = *(_OWORD *)(v30 - 136);
      *(_OWORD *)(v29 - 120) = *(_OWORD *)(v30 - 120);
      *(_OWORD *)(v29 - 136) = v41;
      *(_OWORD *)(v29 - 152) = v40;
      *(_OWORD *)(v29 - 168) = v39;
      v42 = *(_OWORD *)(v30 - 104);
      v43 = *(_OWORD *)(v30 - 88);
      v44 = *(_OWORD *)(v30 - 72);
      *(v29 - 56) = *(v30 - 56);
      *(_OWORD *)(v29 - 72) = v44;
      *(_OWORD *)(v29 - 88) = v43;
      *(_OWORD *)(v29 - 104) = v42;
      v45 = *(_OWORD *)(v30 - 280);
      v46 = *(_OWORD *)(v30 - 264);
      *(_OWORD *)(v29 - 248) = *(_OWORD *)(v30 - 248);
      *(_OWORD *)v35 = v45;
      *((_OWORD *)v35 + 1) = v46;
      *(v29 - 48) = 0;
      *(v29 - 32) = 0;
      if (*(v30 - 32))
      {
        v47 = &v25[v26];
        *((_OWORD *)v29 - 3) = *(_OWORD *)&v25[v26 - 48];
        *((_QWORD *)v47 - 6) = 0;
        *((_QWORD *)v47 - 5) = 0;
        *(v29 - 32) = 1;
      }
      v27 = &v53[v26];
      v28 = *(_OWORD *)&v25[v26 - 24];
      *((_QWORD *)v27 - 1) = *(_QWORD *)&v25[v26 - 8];
      *(_OWORD *)(v27 - 24) = v28;
      v26 -= 328;
    }
    while (&v25[v26] != v24);
    v48 = (char *)*a1;
    v25 = (char *)a1[1];
    v22 = &v53[v26];
  }
  *a1 = v22;
  a1[1] = v23;
  a1[2] = v55;
  if (v25 == v48)
  {
    if (v25)
      goto LABEL_32;
    return v23;
  }
  do
  {
    v54 = v25 - 328;
    if (!*(v25 - 32))
      goto LABEL_40;
    v50 = (std::__shared_weak_count *)*((_QWORD *)v25 - 5);
    if (!v50)
      goto LABEL_40;
    p_shared_owners = (unint64_t *)&v50->__shared_owners_;
    do
      v52 = __ldaxr(p_shared_owners);
    while (__stlxr(v52 - 1, p_shared_owners));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
      if (!*(v25 - 288))
        goto LABEL_34;
    }
    else
    {
LABEL_40:
      if (!*(v25 - 288))
        goto LABEL_34;
    }
    if (*(v25 - 289) < 0)
      operator delete(*((void **)v25 - 39));
LABEL_34:
    v25 -= 328;
  }
  while (v54 != v48);
  v25 = v48;
  if (!v48)
    return v23;
LABEL_32:
  operator delete(v25);
  return v23;
}

void sub_20EE25E40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  uint64_t v3;
  _BYTE *v4;
  va_list va;

  va_start(va, a2);
  if (*v4)
  {
    if (*(char *)(v3 + 39) < 0)
      operator delete(*v2);
  }
  sub_20EE25E6C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE25E6C(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 328;
    if (!*(_BYTE *)(i - 32))
      goto LABEL_9;
    v4 = *(std::__shared_weak_count **)(i - 40);
    if (!v4)
      goto LABEL_9;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      if (!*(_BYTE *)(i - 288))
        continue;
    }
    else
    {
LABEL_9:
      if (!*(_BYTE *)(i - 288))
        continue;
    }
    if (*(char *)(i - 289) < 0)
      operator delete(*(void **)(i - 312));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20EE25F34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 *v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  __int128 v28;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = a1 + 16;
  v5 = (__int128 *)(a2 + 16);
  if (*(unsigned __int8 *)(a1 + 40) == *(unsigned __int8 *)(a2 + 40))
  {
    if (*(_BYTE *)(a1 + 40))
    {
      if (*(char *)(a1 + 39) < 0)
        operator delete(*(void **)v4);
      v6 = *v5;
      *(_QWORD *)(v4 + 16) = *((_QWORD *)v5 + 2);
      *(_OWORD *)v4 = v6;
      *(_BYTE *)(a2 + 39) = 0;
      *(_BYTE *)(a2 + 16) = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 40))
  {
    if (*(char *)(a1 + 39) < 0)
      operator delete(*(void **)v4);
    *(_BYTE *)(a1 + 40) = 0;
  }
  else
  {
    v7 = *v5;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_OWORD *)v4 = v7;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)v5 = 0;
    *(_BYTE *)(a1 + 40) = 1;
  }
  v8 = *(_OWORD *)(a2 + 48);
  v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v9;
  *(_OWORD *)(a1 + 48) = v8;
  v10 = *(_OWORD *)(a2 + 96);
  v11 = *(_OWORD *)(a2 + 112);
  v12 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v12;
  *(_OWORD *)(a1 + 96) = v10;
  *(_OWORD *)(a1 + 112) = v11;
  v13 = *(_OWORD *)(a2 + 160);
  v14 = *(_OWORD *)(a2 + 176);
  v15 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v15;
  *(_OWORD *)(a1 + 160) = v13;
  *(_OWORD *)(a1 + 176) = v14;
  v16 = *(_OWORD *)(a2 + 224);
  v17 = *(_OWORD *)(a2 + 240);
  v18 = *(_OWORD *)(a2 + 256);
  *(_BYTE *)(a1 + 272) = *(_BYTE *)(a2 + 272);
  *(_OWORD *)(a1 + 240) = v17;
  *(_OWORD *)(a1 + 256) = v18;
  *(_OWORD *)(a1 + 224) = v16;
  v19 = (__int128 *)(a2 + 280);
  if (*(unsigned __int8 *)(a1 + 296) == *(unsigned __int8 *)(a2 + 296))
  {
    if (*(_BYTE *)(a1 + 296))
    {
      v20 = *v19;
      *(_QWORD *)v19 = 0;
      *(_QWORD *)(a2 + 288) = 0;
      v21 = *(std::__shared_weak_count **)(a1 + 288);
      *(_OWORD *)(a1 + 280) = v20;
      if (v21)
      {
        p_shared_owners = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }
  }
  else if (*(_BYTE *)(a1 + 296))
  {
    v24 = *(std::__shared_weak_count **)(a1 + 288);
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    *(_BYTE *)(a1 + 296) = 0;
  }
  else
  {
    v27 = *(_QWORD *)(a2 + 288);
    *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
    *(_QWORD *)(a1 + 288) = v27;
    *(_QWORD *)v19 = 0;
    *(_QWORD *)(a2 + 288) = 0;
    *(_BYTE *)(a1 + 296) = 1;
  }
  v28 = *(_OWORD *)(a2 + 304);
  *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
  *(_OWORD *)(a1 + 304) = v28;
  return a1;
}

uint64_t sub_20EE26100(uint64_t a1, __int128 *a2)
{
  int v4;
  _QWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  __int128 v32;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  __int128 v48;

  v4 = *(unsigned __int8 *)(a1 + 328);
  v6 = *a2;
  v5 = a2 + 1;
  *(_OWORD *)a1 = v6;
  if (v4)
  {
    sub_20E869118(a1 + 16, v5);
    v7 = a2[3];
    v8 = a2[5];
    *(_OWORD *)(a1 + 64) = a2[4];
    *(_OWORD *)(a1 + 80) = v8;
    *(_OWORD *)(a1 + 48) = v7;
    v9 = a2[6];
    v10 = a2[7];
    v11 = a2[9];
    *(_OWORD *)(a1 + 128) = a2[8];
    *(_OWORD *)(a1 + 144) = v11;
    *(_OWORD *)(a1 + 96) = v9;
    *(_OWORD *)(a1 + 112) = v10;
    v12 = a2[10];
    v13 = a2[11];
    v14 = a2[13];
    *(_OWORD *)(a1 + 192) = a2[12];
    *(_OWORD *)(a1 + 208) = v14;
    *(_OWORD *)(a1 + 160) = v12;
    *(_OWORD *)(a1 + 176) = v13;
    v15 = a2[14];
    v16 = a2[15];
    v17 = a2[16];
    *(_BYTE *)(a1 + 272) = *((_BYTE *)a2 + 272);
    *(_OWORD *)(a1 + 240) = v16;
    *(_OWORD *)(a1 + 256) = v17;
    *(_OWORD *)(a1 + 224) = v15;
    if (*(unsigned __int8 *)(a1 + 296) == *((unsigned __int8 *)a2 + 296))
    {
      if (*(_BYTE *)(a1 + 296))
      {
        v19 = *((_QWORD *)a2 + 35);
        v18 = *((_QWORD *)a2 + 36);
        if (v18)
        {
          v20 = (unint64_t *)(v18 + 8);
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        v22 = *(std::__shared_weak_count **)(a1 + 288);
        *(_QWORD *)(a1 + 280) = v19;
        *(_QWORD *)(a1 + 288) = v18;
        if (v22)
        {
          p_shared_owners = (unint64_t *)&v22->__shared_owners_;
          do
            v24 = __ldaxr(p_shared_owners);
          while (__stlxr(v24 - 1, p_shared_owners));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
      }
    }
    else if (*(_BYTE *)(a1 + 296))
    {
      v26 = *(std::__shared_weak_count **)(a1 + 288);
      if (v26)
      {
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      *(_BYTE *)(a1 + 296) = 0;
    }
    else
    {
      v29 = *((_QWORD *)a2 + 36);
      *(_QWORD *)(a1 + 280) = *((_QWORD *)a2 + 35);
      *(_QWORD *)(a1 + 288) = v29;
      if (v29)
      {
        v30 = (unint64_t *)(v29 + 8);
        do
          v31 = __ldxr(v30);
        while (__stxr(v31 + 1, v30));
      }
      *(_BYTE *)(a1 + 296) = 1;
    }
    v32 = a2[19];
    *(_BYTE *)(a1 + 320) = *((_BYTE *)a2 + 320);
    *(_OWORD *)(a1 + 304) = v32;
    return a1;
  }
  else
  {
    *(_BYTE *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 40) = 0;
    if (*((_BYTE *)a2 + 40))
    {
      if (*((char *)a2 + 39) < 0)
      {
        sub_20E860C04((_BYTE *)(a1 + 16), *((void **)a2 + 2), *((_QWORD *)a2 + 3));
      }
      else
      {
        v25 = *(_OWORD *)v5;
        *(_QWORD *)(a1 + 32) = v5[2];
        *(_OWORD *)(a1 + 16) = v25;
      }
      *(_BYTE *)(a1 + 40) = 1;
    }
    v34 = a2[3];
    v35 = a2[5];
    *(_OWORD *)(a1 + 64) = a2[4];
    *(_OWORD *)(a1 + 80) = v35;
    *(_OWORD *)(a1 + 48) = v34;
    v36 = a2[6];
    v37 = a2[7];
    v38 = a2[9];
    *(_OWORD *)(a1 + 128) = a2[8];
    *(_OWORD *)(a1 + 144) = v38;
    *(_OWORD *)(a1 + 96) = v36;
    *(_OWORD *)(a1 + 112) = v37;
    v39 = a2[10];
    v40 = a2[11];
    v41 = a2[13];
    *(_OWORD *)(a1 + 192) = a2[12];
    *(_OWORD *)(a1 + 208) = v41;
    *(_OWORD *)(a1 + 160) = v39;
    *(_OWORD *)(a1 + 176) = v40;
    v42 = a2[14];
    v43 = a2[15];
    v44 = a2[16];
    *(_BYTE *)(a1 + 272) = *((_BYTE *)a2 + 272);
    *(_OWORD *)(a1 + 240) = v43;
    *(_OWORD *)(a1 + 256) = v44;
    *(_OWORD *)(a1 + 224) = v42;
    *(_BYTE *)(a1 + 280) = 0;
    *(_BYTE *)(a1 + 296) = 0;
    if (*((_BYTE *)a2 + 296))
    {
      v45 = *((_QWORD *)a2 + 36);
      *(_QWORD *)(a1 + 280) = *((_QWORD *)a2 + 35);
      *(_QWORD *)(a1 + 288) = v45;
      if (v45)
      {
        v46 = (unint64_t *)(v45 + 8);
        do
          v47 = __ldxr(v46);
        while (__stxr(v47 + 1, v46));
      }
      *(_BYTE *)(a1 + 296) = 1;
    }
    v48 = a2[19];
    *(_QWORD *)(a1 + 320) = *((_QWORD *)a2 + 40);
    *(_OWORD *)(a1 + 304) = v48;
    *(_BYTE *)(a1 + 328) = 1;
    return a1;
  }
}

void sub_20EE26368(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(_BYTE *)(v1 + 40))
  {
    if (*(char *)(v1 + 39) < 0)
      operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EE2638C()
{
  void *__p;
  __int128 v1;
  __int128 v2;
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  __p = operator new(0x28uLL);
  v1 = xmmword_2102E0950;
  strcpy((char *)__p, "FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF");
  sub_210232668((unsigned __int8 *)&__p, (uint64_t)&v2);
  xmmword_254A51308 = v2;
  if (SHIBYTE(v1) < 0)
    operator delete(__p);
}

void sub_20EE2643C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EE26458(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v15;
  uint64_t v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  char v27;
  _QWORD *v28;
  int8x8_t v29;
  unint64_t v30;
  uint8x8_t v31;
  _QWORD *v32;
  unint64_t v33;
  unsigned int v34;

  v4 = *(_QWORD **)a2;
  if (!*(_QWORD *)a2)
  {
    *(_QWORD *)a3 = 0;
    *(_BYTE *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    return;
  }
  v7 = v4 + 2;
  v8 = sub_2102322B4((unsigned __int8 *)v4 + 16);
  v4[1] = v8;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v11 = v8;
      if (v9 <= v8)
        v11 = v8 % v9;
    }
    else
    {
      v11 = (v9 - 1) & v8;
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (v13)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v17 = v13[1];
            if (v17 == v8)
            {
              if (v13[2] == *v7 && v13[3] == v4[3])
                goto LABEL_48;
            }
            else if ((v17 & (v9 - 1)) != v11)
            {
              goto LABEL_30;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_30;
          }
        }
        do
        {
          v15 = v13[1];
          if (v15 == v8)
          {
            if (v13[2] == *v7 && v13[3] == v4[3])
            {
LABEL_48:
              v27 = 0;
              v28 = *(_QWORD **)a2;
              v4 = v13;
              goto LABEL_70;
            }
          }
          else
          {
            if (v15 >= v9)
              v15 %= v9;
            if (v15 != v11)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_30:
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    v20 = 1;
    if (v9 >= 3)
      v20 = (v9 & (v9 - 1)) != 0;
    v21 = v20 | (2 * v9);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      prime = v22;
    else
      prime = v21;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v9 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v9)
      goto LABEL_53;
    if (prime < v9)
    {
      v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (prime <= v24)
        prime = v24;
      if (prime < v9)
LABEL_53:
        sub_20E8D2B3C(a1, prime);
    }
  }
  v29 = *(int8x8_t *)(a1 + 8);
  v30 = v4[1];
  v31 = (uint8x8_t)vcnt_s8(v29);
  v31.i16[0] = vaddlv_u8(v31);
  if (v31.u32[0] > 1uLL)
  {
    if (v30 >= *(_QWORD *)&v29)
      v30 %= *(_QWORD *)&v29;
  }
  else
  {
    v30 &= *(_QWORD *)&v29 - 1;
  }
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v30);
  if (v32)
  {
    *v4 = *v32;
  }
  else
  {
    *v4 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = a1 + 16;
    if (!*v4)
      goto LABEL_67;
    v33 = *(_QWORD *)(*v4 + 8);
    if (v31.u32[0] > 1uLL)
    {
      if (v33 >= *(_QWORD *)&v29)
        v33 %= *(_QWORD *)&v29;
    }
    else
    {
      v33 &= *(_QWORD *)&v29 - 1;
    }
    v32 = (_QWORD *)(*(_QWORD *)a1 + 8 * v33);
  }
  *v32 = v4;
LABEL_67:
  ++*(_QWORD *)(a1 + 24);
  v28 = 0;
  if (*(_BYTE *)(a2 + 9))
    *(_BYTE *)(a2 + 9) = 0;
  v27 = 1;
LABEL_70:
  *(_QWORD *)a3 = v4;
  *(_BYTE *)(a3 + 8) = v27;
  *(_QWORD *)(a3 + 16) = v28;
  v34 = *(unsigned __int16 *)(a2 + 8);
  *(_WORD *)(a3 + 24) = v34;
  *(_QWORD *)a2 = 0;
  if (v34 >= 0x100)
    *(_BYTE *)(a2 + 9) = 0;
}

uint64_t *sub_20EE267A0(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  uint64_t *result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  uint64_t v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  uint64_t v41;
  char v42;

  v2 = (unsigned __int8 *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = sub_20E8D177C((uint64_t)&v42, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v11 = *(uint64_t ***)(*a1 + 8 * v10);
  if (!v11)
    return 0;
  v12 = *v11;
  if (!*v11)
    return 0;
  v13 = *(_QWORD *)&v7 - 1;
  v14 = *((_QWORD *)v2 + 1);
  if ((v2[23] & 0x80u) == 0)
    v15 = v2[23];
  else
    v15 = *((_QWORD *)v2 + 1);
  if ((v2[23] & 0x80) != 0)
  {
    v25 = *(const void **)v2;
    if (v9.u32[0] < 2uLL)
    {
      while (1)
      {
        v26 = v12[1];
        if (v26 == v8)
        {
          v27 = *((unsigned __int8 *)v12 + 39);
          v28 = (char)v27;
          if ((v27 & 0x80u) != 0)
            v27 = v12[3];
          if (v15 == v27)
          {
            v29 = v28 >= 0 ? v12 + 2 : (uint64_t *)v12[2];
            if (!memcmp(v25, v29, v14))
              return v12;
          }
        }
        else if ((v26 & v13) != v10)
        {
          return 0;
        }
        result = 0;
        v12 = (uint64_t *)*v12;
        if (!v12)
          return result;
      }
    }
    while (1)
    {
      v30 = v12[1];
      if (v30 == v8)
      {
        v31 = *((unsigned __int8 *)v12 + 39);
        v32 = (char)v31;
        if ((v31 & 0x80u) != 0)
          v31 = v12[3];
        if (v15 == v31)
        {
          v33 = v32 >= 0 ? v12 + 2 : (uint64_t *)v12[2];
          if (!memcmp(v25, v33, v14))
            return v12;
        }
      }
      else
      {
        if (v30 >= *(_QWORD *)&v7)
          v30 %= *(_QWORD *)&v7;
        if (v30 != v10)
          return 0;
      }
      result = 0;
      v12 = (uint64_t *)*v12;
      if (!v12)
        return result;
    }
  }
  if (v9.u32[0] > 1uLL)
  {
    if (!v2[23])
    {
      while (1)
      {
        v34 = v12[1];
        if (v34 == v8)
        {
          v35 = *((unsigned __int8 *)v12 + 39);
          if ((v35 & 0x80u) != 0)
            v35 = v12[3];
          if (v15 == v35)
            return v12;
        }
        else
        {
          if (v34 >= *(_QWORD *)&v7)
            v34 %= *(_QWORD *)&v7;
          if (v34 != v10)
            return 0;
        }
        result = 0;
        v12 = (uint64_t *)*v12;
        if (!v12)
          return result;
      }
    }
    while (1)
    {
      v36 = v12[1];
      if (v36 == v8)
      {
        v37 = *((unsigned __int8 *)v12 + 39);
        v38 = (char)v37;
        if ((v37 & 0x80u) != 0)
          v37 = v12[3];
        if (v15 == v37)
        {
          if (v38 >= 0)
            v39 = (unsigned __int8 *)(v12 + 2);
          else
            v39 = (unsigned __int8 *)v12[2];
          v40 = v2;
          v41 = v2[23];
          while (*v40 == *v39)
          {
            ++v40;
            ++v39;
            if (!--v41)
              return v12;
          }
        }
      }
      else
      {
        if (v36 >= *(_QWORD *)&v7)
          v36 %= *(_QWORD *)&v7;
        if (v36 != v10)
          return 0;
      }
      result = 0;
      v12 = (uint64_t *)*v12;
      if (!v12)
        return result;
    }
  }
  if (!v2[23])
  {
    while (1)
    {
      v17 = v12[1];
      if (v17 == v8)
      {
        v18 = *((unsigned __int8 *)v12 + 39);
        if ((v18 & 0x80u) != 0)
          v18 = v12[3];
        if (v15 == v18)
          return v12;
      }
      else if ((v17 & v13) != v10)
      {
        return 0;
      }
      result = 0;
      v12 = (uint64_t *)*v12;
      if (!v12)
        return result;
    }
  }
  do
  {
    v19 = v12[1];
    if (v19 == v8)
    {
      v20 = *((unsigned __int8 *)v12 + 39);
      v21 = (char)v20;
      if ((v20 & 0x80u) != 0)
        v20 = v12[3];
      if (v15 == v20)
      {
        if (v21 >= 0)
          v22 = (unsigned __int8 *)(v12 + 2);
        else
          v22 = (unsigned __int8 *)v12[2];
        v23 = v2;
        v24 = v2[23];
        while (*v23 == *v22)
        {
          ++v23;
          ++v22;
          if (!--v24)
            return v12;
        }
      }
    }
    else if ((v19 & v13) != v10)
    {
      return 0;
    }
    result = 0;
    v12 = (uint64_t *)*v12;
  }
  while (v12);
  return result;
}

uint64_t *sub_20EE26B24(uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(_QWORD **)(v2 + 56);
      if (v3)
      {
        do
        {
          v4 = (_QWORD *)*v3;
          operator delete(v3);
          v3 = v4;
        }
        while (v4);
      }
      v5 = *(void **)(v2 + 40);
      *(_QWORD *)(v2 + 40) = 0;
      if (v5)
        operator delete(v5);
      if (*(char *)(v2 + 39) < 0)
        operator delete(*(void **)(v2 + 16));
    }
    operator delete((void *)v2);
  }
  return a1;
}

void sub_20EE26BA0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  sub_20E8A9678(&__p, (std::string *)"anchors", (std::string *)"");
  if (*(char *)(a1 + 23) < 0)
  {
    sub_20E860C04((_BYTE *)a2, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
  }
  sub_20E8A944C(a2, (std::__fs::filesystem::path *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20EE26C38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EE26C70(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void **v5;
  void **v6;
  void **v7;
  void *v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  char *v14;
  char *v15;
  unint64_t v16;
  void **v17;
  unint64_t v18;
  void *v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  int v26;
  __int128 v27;
  void *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  char *v33;
  char *v34;
  std::string::size_type size;
  __int128 v36;
  uint64_t v37;
  std::string::size_type v38;
  __int128 v39;
  std::string::size_type v40;
  __int128 v41;
  void **v42;
  void *v43;
  void **v44;
  void **i;
  char *v46;
  void **v47;
  void *__dst[2];
  uint64_t v49;
  void *v50;
  char *v51;
  void *__p[2];
  uint64_t v53;
  void **v54;
  void **v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  std::__fs::filesystem::path v59;

  sub_20EE26BA0(a1, (uint64_t)&v57);
  v56 = a2;
  if (SHIBYTE(v58) < 0)
  {
    sub_20E860C04(__p, (void *)v57, *((unint64_t *)&v57 + 1));
  }
  else
  {
    *(_OWORD *)__p = v57;
    v53 = v58;
  }
  sub_20EE272A8((uint64_t)&v54, &v56, (uint64_t)__p);
  if (SHIBYTE(v53) < 0)
    operator delete(__p[0]);
  memset(&v59, 0, sizeof(v59));
  sub_20E8A9678(&v59.__pn_, (std::string *)"visual_slam", (std::string *)"");
  if (SHIBYTE(v58) < 0)
  {
    sub_20E860C04(__dst, (void *)v57, *((unint64_t *)&v57 + 1));
  }
  else
  {
    *(_OWORD *)__dst = v57;
    v49 = v58;
  }
  sub_20E8A944C((uint64_t)__dst, &v59);
  sub_20EE272A8((uint64_t)&v50, &v56, (uint64_t)__dst);
  if (SHIBYTE(v49) < 0)
  {
    operator delete(__dst[0]);
    if ((SHIBYTE(v59.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_11;
  }
  else if ((SHIBYTE(v59.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_11;
  }
  operator delete(v59.__pn_.__r_.__value_.__l.__data_);
LABEL_11:
  v5 = v54;
  v6 = v55;
  v7 = v54;
  if (v54 != v55)
  {
    v7 = v54;
    while (1)
    {
      v8 = (void *)*((unsigned __int8 *)v7 + 23);
      v9 = (char)v8;
      if ((char)v8 < 0)
        v8 = v7[1];
      if (v8 != (void *)11)
        break;
      v10 = v9 >= 0 ? (uint64_t *)v7 : (uint64_t *)*v7;
      v11 = *v10;
      v12 = *(uint64_t *)((char *)v10 + 3);
      if (v11 != 0x735F6C6175736976 || v12 != 0x6D616C735F6C6175)
        break;
      v7 += 3;
      if (v7 == v55)
      {
        v14 = 0;
        v15 = 0;
        v46 = 0;
        v47 = 0;
        goto LABEL_63;
      }
    }
  }
  v46 = 0;
  v47 = 0;
  if (v7 == v55)
  {
    v14 = 0;
    v15 = 0;
  }
  else
  {
    v16 = 0;
    v17 = v7;
LABEL_28:
    v18 = v16++;
    while (1)
    {
      v17 += 3;
      if (v17 == v55)
        break;
      v19 = (void *)*((unsigned __int8 *)v17 + 23);
      v20 = (char)v19;
      if ((char)v19 < 0)
        v19 = v17[1];
      if (v19 == (void *)11)
      {
        v21 = v20 >= 0 ? (uint64_t *)v17 : (uint64_t *)*v17;
        v22 = *v21;
        v23 = *(uint64_t *)((char *)v21 + 3);
        if (v22 == 0x735F6C6175736976 && v23 == 0x6D616C735F6C6175)
          continue;
      }
      if (v17 != v55)
        goto LABEL_28;
      break;
    }
    if (v18 >= 0xAAAAAAAAAAAAAAALL)
      sub_20E867F44();
    v25 = 0;
    v46 = (char *)operator new(24 * v16);
    LOBYTE(v26) = *((_BYTE *)v7 + 23);
    v15 = v46;
    while (2)
    {
      if ((v26 & 0x80) != 0)
      {
        sub_20E860C04(v15, *v7, (unint64_t)v7[1]);
      }
      else
      {
        v27 = *(_OWORD *)v7;
        *((_QWORD *)v15 + 2) = v7[2];
        *(_OWORD *)v15 = v27;
      }
      do
      {
        v7 += 3;
        if (v7 == v6)
        {
          v15 += 24;
          goto LABEL_59;
        }
        v28 = (void *)*((unsigned __int8 *)v7 + 23);
        v26 = (char)v28;
        if ((char)v28 < 0)
          v28 = v7[1];
        if (v28 != (void *)11)
          break;
        v29 = (uint64_t *)*v7;
        if (v26 >= 0)
          v29 = (uint64_t *)v7;
        v30 = *v29;
        v31 = *(uint64_t *)((char *)v29 + 3);
      }
      while (v30 == 0x735F6C6175736976 && v31 == 0x6D616C735F6C6175);
      v15 += 24;
      v25 += 24;
      if (v7 != v6)
        continue;
      break;
    }
LABEL_59:
    v47 = (void **)v15;
    v14 = v46;
  }
LABEL_63:
  v33 = (char *)v50;
  v34 = v51;
  memset(&v59, 0, sizeof(v59));
  sub_20E9099B8((uint64_t)&v59, 0xAAAAAAAAAAAAAAABLL * ((v51 - (_BYTE *)v50) >> 3) - 0x5555555555555555 * ((v15 - v14) >> 3));
  if (v33 != v34)
  {
    size = v59.__pn_.__r_.__value_.__l.__size_;
    do
    {
      if (size < v59.__pn_.__r_.__value_.__r.__words[2])
      {
        if (v33[23] < 0)
        {
          sub_20E860C04((_BYTE *)size, *(void **)v33, *((_QWORD *)v33 + 1));
        }
        else
        {
          v36 = *(_OWORD *)v33;
          *(_QWORD *)(size + 16) = *((_QWORD *)v33 + 2);
          *(_OWORD *)size = v36;
        }
        size += 24;
      }
      else
      {
        size = sub_20E8ADE68((uint64_t *)&v59, (__int128 *)v33);
      }
      v59.__pn_.__r_.__value_.__l.__size_ = size;
      v33 += 24;
    }
    while (v33 != v34);
  }
  v37 = (uint64_t)v46;
  if (v46 == (char *)v47)
  {
    v41 = *(_OWORD *)&v59.__pn_.__r_.__value_.__r.__words[1];
    *(_QWORD *)a3 = v59.__pn_.__r_.__value_.__r.__words[0];
    *(_OWORD *)(a3 + 8) = v41;
    if (!v46)
      goto LABEL_88;
  }
  else
  {
    v38 = v59.__pn_.__r_.__value_.__l.__size_;
    do
    {
      if (v38 < v59.__pn_.__r_.__value_.__r.__words[2])
      {
        v39 = *(_OWORD *)v37;
        *(_QWORD *)(v38 + 16) = *(_QWORD *)(v37 + 16);
        *(_OWORD *)v38 = v39;
        v38 += 24;
        *(_QWORD *)(v37 + 8) = 0;
        *(_QWORD *)(v37 + 16) = 0;
        *(_QWORD *)v37 = 0;
      }
      else
      {
        v38 = (std::string::size_type)sub_20E8780F0((void **)&v59.__pn_.__r_.__value_.__l.__data_, v37);
      }
      v59.__pn_.__r_.__value_.__l.__size_ = v38;
      v37 += 24;
    }
    while ((void **)v37 != v47);
    v37 = (uint64_t)v46;
    v40 = v59.__pn_.__r_.__value_.__r.__words[2];
    *(_QWORD *)a3 = v59.__pn_.__r_.__value_.__r.__words[0];
    *(_QWORD *)(a3 + 8) = v38;
    *(_QWORD *)(a3 + 16) = v40;
    if (!v46)
      goto LABEL_88;
  }
  v42 = v47;
  v43 = (void *)v37;
  if (v47 != (void **)v37)
  {
    do
    {
      if (*((char *)v42 - 1) < 0)
        operator delete(*(v42 - 3));
      v42 -= 3;
    }
    while (v42 != (void **)v37);
    v43 = v46;
  }
  operator delete(v43);
LABEL_88:
  v44 = (void **)v50;
  if (v50)
  {
    for (i = (void **)v51; i != v44; i -= 3)
    {
      if (*((char *)i - 1) < 0)
        operator delete(*(i - 3));
    }
    operator delete(v44);
  }
  if (v5)
  {
    for (; v6 != v5; v6 -= 3)
    {
      if (*((char *)v6 - 1) < 0)
        operator delete(*(v6 - 3));
    }
    operator delete(v5);
  }
  if (SHIBYTE(v58) < 0)
    operator delete((void *)v57);
}

void sub_20EE27160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29)
{
  uint64_t v29;

  if (*(char *)(v29 - 81) < 0)
    operator delete(*(void **)(v29 - 104));
  sub_20E89FB98(&a29);
  if ((*(char *)(v29 - 105) & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(*(void **)(v29 - 128));
  _Unwind_Resume(a1);
}

void sub_20EE272A8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  const std::__fs::filesystem::path *v6;
  const std::__fs::filesystem::path *v7;
  __int128 v8;
  std::__fs::filesystem::path::__string_view v9;
  void **p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v11;
  std::basic_string_view<_CharT, _Traits>::size_type v12;
  void **v13;
  uint64_t v14;
  const std::__fs::filesystem::path *v15;
  void *v16;
  void *v17;
  const std::__fs::filesystem::path *v18;
  __int128 v19;
  unint64_t v20;
  void *__p[2];
  uint64_t v22;
  _DWORD v23[2];
  void **__dst;
  void *size;
  unint64_t v26;

  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)*a2 + 176))(*a2, a3) & 1) != 0)
  {
    sub_210224314(a3, 2u, "*", 1uLL, *a2, (uint64_t *)&v17);
    v20 = 0;
    v19 = 0uLL;
    sub_20E9099B8((uint64_t)&v19, ((char *)v18 - (_BYTE *)v17) >> 5);
    v6 = (const std::__fs::filesystem::path *)v17;
    v7 = v18;
    if (v17 != v18)
    {
      while (1)
      {
        v9 = std::__fs::filesystem::path::__filename(v6);
        if (v9.__size_ >= 0x7FFFFFFFFFFFFFF8)
          sub_20E860B7C();
        if (v9.__size_ >= 0x17)
          break;
        HIBYTE(v26) = v9.__size_;
        p_dst = (void **)&__dst;
        if (v9.__size_)
          goto LABEL_13;
LABEL_14:
        *((_BYTE *)p_dst + v9.__size_) = 0;
        v13 = __dst;
        v23[0] = v26;
        *(_DWORD *)((char *)v23 + 3) = *(_DWORD *)((char *)&v26 + 3);
        if (SHIBYTE(v26) < 0)
        {
          sub_20E860C04(__p, __dst, (unint64_t)size);
          operator delete(v13);
          v14 = *((_QWORD *)&v19 + 1);
          if (*((_QWORD *)&v19 + 1) >= v20)
          {
LABEL_18:
            *((_QWORD *)&v19 + 1) = sub_20E8780F0((void **)&v19, (uint64_t)__p);
            if (SHIBYTE(v22) < 0)
              operator delete(__p[0]);
            goto LABEL_5;
          }
        }
        else
        {
          __p[0] = __dst;
          __p[1] = size;
          LODWORD(v22) = v23[0];
          *(_DWORD *)((char *)&v22 + 3) = *(_DWORD *)((char *)v23 + 3);
          HIBYTE(v22) = HIBYTE(v26);
          v14 = *((_QWORD *)&v19 + 1);
          if (*((_QWORD *)&v19 + 1) >= v20)
            goto LABEL_18;
        }
        v8 = *(_OWORD *)__p;
        *(_QWORD *)(v14 + 16) = v22;
        *(_OWORD *)v14 = v8;
        *((_QWORD *)&v19 + 1) = v14 + 24;
LABEL_5:
        v6 = (const std::__fs::filesystem::path *)((char *)v6 + 32);
        if (v6 == v7)
        {
          v6 = (const std::__fs::filesystem::path *)v17;
          goto LABEL_22;
        }
      }
      v11 = (v9.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9.__size_ | 7) != 0x17)
        v11 = v9.__size_ | 7;
      v12 = v11 + 1;
      p_dst = (void **)operator new(v11 + 1);
      size = (void *)v9.__size_;
      v26 = v12 | 0x8000000000000000;
      __dst = p_dst;
LABEL_13:
      memmove(p_dst, v9.__data_, v9.__size_);
      goto LABEL_14;
    }
LABEL_22:
    *(_OWORD *)a1 = v19;
    *(_QWORD *)(a1 + 16) = v20;
    if (v6)
    {
      v15 = v18;
      v16 = (void *)v6;
      if (v18 != v6)
      {
        do
        {
          if (v15[-1].__pn_.__r_.__value_.__s.__data_[15] < 0)
            operator delete((void *)v15[-2].__pn_.__r_.__value_.__r.__words[2]);
          v15 = (const std::__fs::filesystem::path *)((char *)v15 - 32);
        }
        while (v15 != v6);
        v16 = v17;
      }
      v18 = v6;
      operator delete(v16);
    }
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
}

void sub_20EE274F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, void *);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_20E89FB98((void **)va1);
  sub_20EB9B93C((void **)va);
  _Unwind_Resume(a1);
}

void sub_20EE27554(uint64_t a1@<X0>, std::string *a2@<X1>, uint64_t a3@<X8>)
{
  std::string::size_type v5;
  std::string::size_type size;
  std::string __p;
  std::__fs::filesystem::path v8;
  void *__dst[2];
  uint64_t v10;

  memset(&v8, 0, sizeof(v8));
  v5 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  size = a2->__r_.__value_.__l.__size_;
  if ((v5 & 0x80u) != 0)
  {
    a2 = (std::string *)a2->__r_.__value_.__r.__words[0];
    v5 = size;
  }
  sub_20E8A9678(&v8.__pn_, a2, (std::string *)((char *)a2 + v5));
  if (*(char *)(a1 + 23) < 0)
  {
    sub_20E860C04(__dst, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)a1;
    v10 = *(_QWORD *)(a1 + 16);
  }
  sub_20E8A944C((uint64_t)__dst, &v8);
  memset(&__p, 0, sizeof(__p));
  sub_20E8A9678(&__p, (std::string *)"user_anchors.msgpack", (std::string *)"");
  if (SHIBYTE(v10) < 0)
  {
    sub_20E860C04((_BYTE *)a3, __dst[0], (unint64_t)__dst[1]);
  }
  else
  {
    *(_OWORD *)a3 = *(_OWORD *)__dst;
    *(_QWORD *)(a3 + 16) = v10;
  }
  sub_20E8A944C(a3, (std::__fs::filesystem::path *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v10) & 0x80000000) == 0)
    {
LABEL_11:
      if ((SHIBYTE(v8.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
LABEL_15:
      operator delete(v8.__pn_.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(v10) & 0x80000000) == 0)
  {
    goto LABEL_11;
  }
  operator delete(__dst[0]);
  if (SHIBYTE(v8.__pn_.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_15;
}

void sub_20EE2767C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
  {
    operator delete(a9);
    if (a26 < 0)
    {
LABEL_8:
      operator delete(a21);
      if ((a20 & 0x80000000) == 0)
LABEL_5:
        _Unwind_Resume(exception_object);
LABEL_4:
      operator delete(__p);
      goto LABEL_5;
    }
  }
  else if (a26 < 0)
  {
    goto LABEL_8;
  }
  if ((a20 & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_20EE2771C(uint64_t a1@<X0>, std::string *a2@<X1>, uint64_t a3@<X8>)
{
  std::string::size_type v5;
  std::string::size_type size;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  v5 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  size = a2->__r_.__value_.__l.__size_;
  if ((v5 & 0x80u) != 0)
  {
    a2 = (std::string *)a2->__r_.__value_.__r.__words[0];
    v5 = size;
  }
  sub_20E8A9678(&__p, a2, (std::string *)((char *)a2 + v5));
  if (*(char *)(a1 + 23) < 0)
  {
    sub_20E860C04((_BYTE *)a3, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)a3 = *(_OWORD *)a1;
    *(_QWORD *)(a3 + 16) = *(_QWORD *)(a1 + 16);
  }
  sub_20E8A944C(a3, (std::__fs::filesystem::path *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20EE277C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EE277FC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  std::string *v7;
  std::string __p;
  std::__fs::filesystem::path v9;
  void *__dst[2];
  uint64_t v11;

  memset(&v9, 0, sizeof(v9));
  sub_20E8A9678(&v9.__pn_, (std::string *)"visual_slam", (std::string *)"");
  if (*(char *)(a1 + 23) < 0)
  {
    sub_20E860C04(__dst, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)a1;
    v11 = *(_QWORD *)(a1 + 16);
  }
  sub_20E8A944C((uint64_t)__dst, &v9);
  memset(&__p, 0, sizeof(__p));
  v6 = *(unsigned __int8 *)(a2 + 23);
  if ((v6 & 0x80u) == 0)
    v7 = (std::string *)a2;
  else
    v7 = *(std::string **)a2;
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a2 + 8);
  sub_20E8A9678(&__p, v7, (std::string *)((char *)v7 + v6));
  if (SHIBYTE(v11) < 0)
  {
    sub_20E860C04((_BYTE *)a3, __dst[0], (unint64_t)__dst[1]);
  }
  else
  {
    *(_OWORD *)a3 = *(_OWORD *)__dst;
    *(_QWORD *)(a3 + 16) = v11;
  }
  sub_20E8A944C(a3, (std::__fs::filesystem::path *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v11) & 0x80000000) == 0)
    {
LABEL_14:
      if ((SHIBYTE(v9.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
LABEL_18:
      operator delete(v9.__pn_.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(v11) & 0x80000000) == 0)
  {
    goto LABEL_14;
  }
  operator delete(__dst[0]);
  if (SHIBYTE(v9.__pn_.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_18;
}

void sub_20EE27934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
  {
    operator delete(a9);
    if (a26 < 0)
    {
LABEL_8:
      operator delete(a21);
      if ((a20 & 0x80000000) == 0)
LABEL_5:
        _Unwind_Resume(exception_object);
LABEL_4:
      operator delete(__p);
      goto LABEL_5;
    }
  }
  else if (a26 < 0)
  {
    goto LABEL_8;
  }
  if ((a20 & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_20EE279D4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  void *v11;
  uint64_t i;
  unsigned int v13;
  char *v14;
  unsigned int v15;
  uint64_t v16;
  std::string *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  double *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  double *v26;
  uint64_t v27;
  char *v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  _OWORD *v34;
  __int128 v35;
  char *v36;
  int v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  std::string::size_type v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 *v51;
  uint64_t v52;
  unint64_t v53;
  int v54;
  char v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  BOOL v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  std::string::size_type size;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  std::string::size_type v80;
  std::string::size_type v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  std::string::size_type v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  std::string::size_type v93;
  uint64_t v94;
  std::string::size_type v95;
  __int128 v96;
  std::string::size_type v97;
  std::string::size_type v98;
  _BYTE *v99;
  _BYTE *v100;
  _QWORD *v101;
  __int128 v102;
  _OWORD *v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  std::string::size_type v115;
  std::__shared_weak_count *v116;
  unint64_t *p_shared_owners;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::string::size_type v122;
  std::string::size_type v123;
  std::string::size_type v124;
  int v125;
  void **v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  void *v130[2];
  void *__src[4];
  uint64_t v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  void *v135[2];
  char v136;
  std::string v137;
  void *v138[3];
  uint64_t v139;
  unint64_t v140;
  __int128 v141;
  uint64_t v142;
  _BYTE __dst[87];
  __int128 v144;
  __int128 v145;
  __int128 v146;
  char v147;
  __int128 v148;
  __int128 v149;
  int v150;
  std::string v151;
  void *__p[2];
  void *v153[2];
  uint64_t v154;
  _BYTE v155[233];
  __int128 v156;
  char v157;
  __int128 v158;
  uint64_t v159;
  __int128 v160;
  uint64_t v161;

  v161 = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_20E860C04(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v153[0] = *(void **)(a2 + 16);
  }
  sub_20EE27554(a1, (std::string *)__p, (uint64_t)v135);
  if (SHIBYTE(v153[0]) < 0)
    operator delete(__p[0]);
  if (((*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a3 + 176))(a3, v135) & 1) == 0)
  {
    *(_OWORD *)(a4 + 16) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)a4 = 0u;
    *(_BYTE *)(a4 + 48) = 1;
    if ((v136 & 0x80000000) == 0)
      return;
    goto LABEL_203;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void **, uint64_t))(*(_QWORD *)a3 + 368))(&v132, a3, v135, 8);
  if (!v133)
  {
    sub_20EE111A4((uint64_t)&off_24C9EB0A8, (uint64_t)"Unable to open stream to load anchors at path ", (uint64_t)v135);
    std::runtime_error::runtime_error((std::runtime_error *)__dst, &v137);
    *(_QWORD *)__dst = &off_24C9EDA58;
    *(_DWORD *)&__dst[16] = 1;
    std::runtime_error::runtime_error((std::runtime_error *)__p, (const std::runtime_error *)__dst);
    __p[0] = &off_24C9EDA58;
    LODWORD(v153[0]) = *(_DWORD *)&__dst[16];
    std::runtime_error::runtime_error((std::runtime_error *)a4, (const std::runtime_error *)__p);
    *(_QWORD *)a4 = &off_24C9EDA58;
    *(_DWORD *)(a4 + 16) = v153[0];
    *(_BYTE *)(a4 + 48) = 0;
    std::runtime_error::~runtime_error((std::runtime_error *)__p);
    std::runtime_error::~runtime_error((std::runtime_error *)__dst);
    if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0)
    {
      v11 = (void *)v137.__r_.__value_.__r.__words[0];
      goto LABEL_197;
    }
    goto LABEL_198;
  }
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v133 + 16))(v133);
  __p[0] = (void *)1;
  sub_20E9EECEC(&v137, (uint64_t *)__p, v7, 0x2800uLL);
  v137.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C9B0298;
  v137.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_24C9B03E0;
  *(_OWORD *)v130 = 0u;
  memset(__src, 0, sizeof(__src));
  LODWORD(__p[0]) = 1;
  sub_20E9EDADC(v139, __p);
  sub_20E90A71C(&v137.__r_.__value_.__r.__words[2]);
  v140 = 0;
  sub_20E9EDE6C(v139, &v140);
  v8 = v140;
  if (v140)
  {
    if (v140 >= 0x12F684BDA12F685)
      sub_20E867F44();
    v9 = (char *)operator new(216 * v140);
    bzero(v9, 216 * ((216 * v8 - 216) / 0xD8) + 216);
    v130[0] = v9;
    v130[1] = &v9[216 * ((216 * v8 - 216) / 0xD8) + 216];
    v10 = v9;
    if (v130[1] != v9)
    {
      for (i = 0; 216 * ((uint64_t)(216 * ((216 * v8 - 216) / 0xD8) + 216) / 216) != i; i += 216)
      {
        LODWORD(__p[0]) = 1;
        sub_20E9EDADC(v139, __p);
        sub_20E90A71C(&v137.__r_.__value_.__r.__words[2]);
        LODWORD(__p[0]) = 2;
        sub_20E9EDADC(v139, __p);
        v13 = __p[0];
        sub_20E90A71C(&v137.__r_.__value_.__r.__words[2]);
        v14 = &v10[i + 8];
        if (v13 >= 2)
          v15 = 2;
        else
          v15 = v13;
        if (v15 >= 2)
        {
          v16 = v139;
          sub_20E9ED7B4(v139, &v10[i + 8]);
          sub_20E9ED7B4(v16, &v10[i + 9]);
          sub_20E9ED7B4(v16, &v10[i + 10]);
          sub_20E9ED7B4(v16, &v10[i + 11]);
          sub_20E9ED7B4(v16, &v10[i + 12]);
          sub_20E9ED7B4(v16, &v10[i + 13]);
          sub_20E9ED7B4(v16, &v10[i + 14]);
          sub_20E9ED7B4(v16, &v10[i + 15]);
          sub_20E9ED7B4(v16, &v10[i + 16]);
          sub_20E9ED7B4(v16, &v10[i + 17]);
          sub_20E9ED7B4(v16, &v10[i + 18]);
          sub_20E9ED7B4(v16, &v10[i + 19]);
          sub_20E9ED7B4(v16, &v10[i + 20]);
          sub_20E9ED7B4(v16, &v10[i + 21]);
          sub_20E9ED7B4(v16, &v10[i + 22]);
          sub_20E9ED7B4(v16, &v10[i + 23]);
          LOBYTE(__p[0]) = 0;
          sub_20E9ED7B4(v139, __p);
          v17 = (std::string *)&v10[i + 24];
          v18 = &v10[i];
          if (LOBYTE(__p[0]))
          {
            if (!v10[i + 48])
            {
              v17->__r_.__value_.__r.__words[0] = 0;
              *(_QWORD *)&v10[i + 32] = 0;
              *(_QWORD *)&v10[i + 40] = 0;
              v18[48] = 1;
            }
            sub_20E9EE280(v139, v17);
          }
          else if (v10[i + 48])
          {
            if (v10[i + 47] < 0)
              operator delete(v17->__r_.__value_.__l.__data_);
            v18[48] = 0;
          }
          LOBYTE(__p[0]) = 0;
          sub_20E9ED7B4(v139, __p);
          v21 = &v10[i];
          if (LOBYTE(__p[0]))
          {
            v22 = (double *)(v21 + 56);
            if (!v10[i + 128])
            {
              *((_QWORD *)v21 + 15) = 0;
              *(_OWORD *)(v21 + 88) = 0u;
              *(_OWORD *)(v21 + 104) = 0u;
              *(_OWORD *)v22 = 0u;
              *(_OWORD *)(v21 + 72) = 0u;
              v21[128] = 1;
            }
            v23 = v139;
            sub_20E9EE078(v139, v22);
            sub_20E9EE078(v23, (double *)&v10[i + 64]);
            sub_20E9EE078(v23, (double *)&v10[i + 72]);
            sub_20E9EE078(v23, (double *)&v10[i + 80]);
            sub_20E9EE078(v23, (double *)&v10[i + 88]);
            sub_20E9EE078(v23, (double *)&v10[i + 96]);
            sub_20E9EE078(v23, (double *)&v10[i + 104]);
            sub_20E9EE078(v23, (double *)&v10[i + 112]);
            sub_20E9EE078(v23, (double *)&v10[i + 120]);
          }
          else if (v10[i + 128])
          {
            v21[128] = 0;
          }
          LOBYTE(__p[0]) = 0;
          sub_20E9ED7B4(v139, __p);
          v25 = &v10[i];
          if (LOBYTE(__p[0]))
          {
            v26 = (double *)(v25 + 136);
            if (!v10[i + 160])
            {
              *v26 = 0.0;
              *((_QWORD *)v25 + 18) = 0;
              *((_QWORD *)v25 + 19) = 0;
              v25[160] = 1;
            }
            v27 = v139;
            sub_20E9EE078(v139, v26);
            sub_20E9EE078(v27, (double *)&v10[i + 144]);
            sub_20E9EE078(v27, (double *)&v10[i + 152]);
          }
          else if (v10[i + 160])
          {
            v25[160] = 0;
          }
          LOBYTE(__p[0]) = 0;
          sub_20E9ED7B4(v139, __p);
          v28 = &v10[i];
          if (LOBYTE(__p[0]))
          {
            v29 = v28 + 168;
            if (!v10[i + 184])
            {
              *(_QWORD *)v29 = 0;
              *((_QWORD *)v28 + 22) = 0;
              v28[184] = 1;
            }
            v30 = v139;
            sub_20E9ED7B4(v139, v29);
            sub_20E9ED7B4(v30, &v10[i + 169]);
            sub_20E9ED7B4(v30, &v10[i + 170]);
            sub_20E9ED7B4(v30, &v10[i + 171]);
            sub_20E9ED7B4(v30, &v10[i + 172]);
            sub_20E9ED7B4(v30, &v10[i + 173]);
            sub_20E9ED7B4(v30, &v10[i + 174]);
            sub_20E9ED7B4(v30, &v10[i + 175]);
            sub_20E9ED7B4(v30, &v10[i + 176]);
            sub_20E9ED7B4(v30, &v10[i + 177]);
            sub_20E9ED7B4(v30, &v10[i + 178]);
            sub_20E9ED7B4(v30, &v10[i + 179]);
            sub_20E9ED7B4(v30, &v10[i + 180]);
            sub_20E9ED7B4(v30, &v10[i + 181]);
            sub_20E9ED7B4(v30, &v10[i + 182]);
            sub_20E9ED7B4(v30, &v10[i + 183]);
          }
          else if (v10[i + 184])
          {
            v28[184] = 0;
          }
          goto LABEL_88;
        }
        LOBYTE(v153[0]) = 0;
        LOBYTE(v154) = 0;
        v155[0] = 0;
        v155[72] = 0;
        v155[80] = 0;
        v155[104] = 0;
        v155[112] = 0;
        v155[128] = 0;
        v19 = v139;
        sub_20E9ED7B4(v139, __p);
        sub_20E9ED7B4(v19, (_BYTE *)__p + 1);
        sub_20E9ED7B4(v19, (_BYTE *)__p + 2);
        sub_20E9ED7B4(v19, (_BYTE *)__p + 3);
        sub_20E9ED7B4(v19, (_BYTE *)__p + 4);
        sub_20E9ED7B4(v19, (_BYTE *)__p + 5);
        sub_20E9ED7B4(v19, (_BYTE *)__p + 6);
        sub_20E9ED7B4(v19, (_BYTE *)__p + 7);
        sub_20E9ED7B4(v19, &__p[1]);
        sub_20E9ED7B4(v19, (_BYTE *)&__p[1] + 1);
        sub_20E9ED7B4(v19, (_BYTE *)&__p[1] + 2);
        sub_20E9ED7B4(v19, (_BYTE *)&__p[1] + 3);
        sub_20E9ED7B4(v19, (_BYTE *)&__p[1] + 4);
        sub_20E9ED7B4(v19, (_BYTE *)&__p[1] + 5);
        sub_20E9ED7B4(v19, (_BYTE *)&__p[1] + 6);
        sub_20E9ED7B4(v19, (_BYTE *)&__p[1] + 7);
        __dst[0] = 0;
        sub_20E9ED7B4(v139, __dst);
        if (__dst[0])
        {
          if (!(_BYTE)v154)
          {
            v153[0] = 0;
            v153[1] = 0;
            LOBYTE(v154) = 1;
          }
          v20 = v139;
          sub_20E9ED7B4(v139, v153);
          sub_20E9ED7B4(v20, (_BYTE *)v153 + 1);
          sub_20E9ED7B4(v20, (_BYTE *)v153 + 2);
          sub_20E9ED7B4(v20, (_BYTE *)v153 + 3);
          sub_20E9ED7B4(v20, (_BYTE *)v153 + 4);
          sub_20E9ED7B4(v20, (_BYTE *)v153 + 5);
          sub_20E9ED7B4(v20, (_BYTE *)v153 + 6);
          sub_20E9ED7B4(v20, (_BYTE *)v153 + 7);
          sub_20E9ED7B4(v20, &v153[1]);
          sub_20E9ED7B4(v20, (_BYTE *)&v153[1] + 1);
          sub_20E9ED7B4(v20, (_BYTE *)&v153[1] + 2);
          sub_20E9ED7B4(v20, (_BYTE *)&v153[1] + 3);
          sub_20E9ED7B4(v20, (_BYTE *)&v153[1] + 4);
          sub_20E9ED7B4(v20, (_BYTE *)&v153[1] + 5);
          sub_20E9ED7B4(v20, (_BYTE *)&v153[1] + 6);
          sub_20E9ED7B4(v20, (_BYTE *)&v153[1] + 7);
        }
        else if ((_BYTE)v154)
        {
          LOBYTE(v154) = 0;
        }
        __dst[0] = 0;
        sub_20E9ED7B4(v139, __dst);
        if (__dst[0])
        {
          if (!v155[72])
          {
            memset(v155, 0, 72);
            v155[72] = 1;
          }
          v24 = v139;
          sub_20E9EE078(v139, (double *)v155);
          sub_20E9EE078(v24, (double *)&v155[8]);
          sub_20E9EE078(v24, (double *)&v155[16]);
          sub_20E9EE078(v24, (double *)&v155[24]);
          sub_20E9EE078(v24, (double *)&v155[32]);
          sub_20E9EE078(v24, (double *)&v155[40]);
          sub_20E9EE078(v24, (double *)&v155[48]);
          sub_20E9EE078(v24, (double *)&v155[56]);
          sub_20E9EE078(v24, (double *)&v155[64]);
        }
        else if (v155[72])
        {
          v155[72] = 0;
        }
        __dst[0] = 0;
        sub_20E9ED7B4(v139, __dst);
        if (__dst[0])
        {
          if (!v155[104])
          {
            memset(&v155[80], 0, 24);
            v155[104] = 1;
          }
          v31 = v139;
          sub_20E9EE078(v139, (double *)&v155[80]);
          sub_20E9EE078(v31, (double *)&v155[88]);
          sub_20E9EE078(v31, (double *)&v155[96]);
        }
        else if (v155[104])
        {
          v155[104] = 0;
        }
        __dst[0] = 0;
        sub_20E9ED7B4(v139, __dst);
        if (__dst[0])
        {
          if (!v155[128])
          {
            *(_QWORD *)&v155[112] = 0;
            *(_QWORD *)&v155[120] = 0;
            v155[128] = 1;
          }
          v32 = v139;
          sub_20E9ED7B4(v139, &v155[112]);
          sub_20E9ED7B4(v32, &v155[113]);
          sub_20E9ED7B4(v32, &v155[114]);
          sub_20E9ED7B4(v32, &v155[115]);
          sub_20E9ED7B4(v32, &v155[116]);
          sub_20E9ED7B4(v32, &v155[117]);
          sub_20E9ED7B4(v32, &v155[118]);
          sub_20E9ED7B4(v32, &v155[119]);
          sub_20E9ED7B4(v32, &v155[120]);
          sub_20E9ED7B4(v32, &v155[121]);
          sub_20E9ED7B4(v32, &v155[122]);
          sub_20E9ED7B4(v32, &v155[123]);
          sub_20E9ED7B4(v32, &v155[124]);
          sub_20E9ED7B4(v32, &v155[125]);
          sub_20E9ED7B4(v32, &v155[126]);
          sub_20E9ED7B4(v32, &v155[127]);
        }
        else if (v155[128])
        {
          v155[128] = 0;
        }
        *(_OWORD *)&__dst[39] = *(_OWORD *)&v155[32];
        *(_OWORD *)&__dst[55] = *(_OWORD *)&v155[48];
        *(_OWORD *)&__dst[71] = *(_OWORD *)&v155[64];
        *(_OWORD *)&__dst[7] = *(_OWORD *)v155;
        *(_OWORD *)&__dst[23] = *(_OWORD *)&v155[16];
        v144 = *(_OWORD *)&v155[80];
        v145 = *(_OWORD *)&v155[96];
        v147 = v155[128];
        v146 = *(_OWORD *)&v155[112];
        v33 = v154;
        if ((_BYTE)v154)
        {
          *(_OWORD *)&v151.__r_.__value_.__l.__data_ = *(_OWORD *)v153;
          sub_2102323F4((unsigned __int8 *)&v151, &v148);
          v34 = operator new(0x28uLL);
          v35 = v149;
          *v34 = v148;
          v34[1] = v35;
          *((_DWORD *)v34 + 8) = v150;
          *((_BYTE *)v34 + 36) = 0;
          *(_OWORD *)v14 = *(_OWORD *)__p;
          v36 = &v10[i];
          v37 = v10[i + 48];
          if (v37 != 1)
            goto LABEL_80;
        }
        else
        {
          v34 = 0;
          *(_OWORD *)v14 = *(_OWORD *)__p;
          v36 = &v10[i];
          v37 = v10[i + 48];
          if (v10[i + 48])
          {
LABEL_80:
            if (v37)
            {
              if (v10[i + 47] < 0)
                operator delete(*((void **)v36 + 3));
              v36[48] = 0;
LABEL_84:
              v39 = &v10[i];
              *(_OWORD *)(v39 + 136) = v144;
              *(_OWORD *)(v39 + 152) = v145;
              *(_OWORD *)(v39 + 168) = v146;
              v39[184] = v147;
              *(_OWORD *)(v39 + 72) = *(_OWORD *)&__dst[23];
              *(_OWORD *)(v39 + 88) = *(_OWORD *)&__dst[39];
              *(_OWORD *)(v39 + 104) = *(_OWORD *)&__dst[55];
              *(_OWORD *)(v39 + 120) = *(_OWORD *)&__dst[71];
              *(_OWORD *)(v39 + 56) = *(_OWORD *)&__dst[7];
              if (v33)
                operator delete(v34);
              goto LABEL_88;
            }
            *((_QWORD *)v36 + 3) = v34;
            v40 = &v10[i];
            *((_QWORD *)v40 + 4) = 36;
            *((_QWORD *)v40 + 5) = 0x8000000000000028;
            v36[48] = 1;
            goto LABEL_87;
          }
        }
        if (!v37)
          goto LABEL_84;
        v38 = &v10[i];
        if (v10[i + 47] < 0)
          operator delete(*((void **)v36 + 3));
        *((_QWORD *)v36 + 3) = v34;
        *((_QWORD *)v38 + 4) = 36;
        v38[46] = 0;
        *((_WORD *)v38 + 22) = 0;
        *((_DWORD *)v38 + 10) = 40;
        v38[47] = 0x80;
LABEL_87:
        v41 = &v10[i];
        *(_OWORD *)(v41 + 136) = v144;
        *(_OWORD *)(v41 + 152) = v145;
        *(_OWORD *)(v41 + 168) = v146;
        v41[184] = v147;
        *(_OWORD *)(v41 + 72) = *(_OWORD *)&__dst[23];
        *(_OWORD *)(v41 + 88) = *(_OWORD *)&__dst[39];
        *(_OWORD *)(v41 + 104) = *(_OWORD *)&__dst[55];
        *(_OWORD *)(v41 + 120) = *(_OWORD *)&__dst[71];
        *(_OWORD *)(v41 + 56) = *(_OWORD *)&__dst[7];
LABEL_88:
        v42 = v138[1];
        v43 = *(v42 - 2)
            - (*(uint64_t (**)(uint64_t))(v137.__r_.__value_.__r.__words[2] + 32))((uint64_t)&v137.__r_.__value_.__r.__words[2])
            + *(v42 - 1);
        if (v43)
          (*(void (**)(uint64_t, unint64_t))(v137.__r_.__value_.__r.__words[2] + 40))((uint64_t)&v137.__r_.__value_.__r.__words[2], v43);
        v138[1] = (char *)v138[1] - 16;
        sub_20E9EE280(v139, (std::string *)&v10[i + 192]);
        v44 = v138[1];
        v45 = *(v44 - 2)
            - (*(uint64_t (**)(uint64_t))(v137.__r_.__value_.__r.__words[2] + 32))((uint64_t)&v137.__r_.__value_.__r.__words[2])
            + *(v44 - 1);
        if (v45)
          (*(void (**)(uint64_t, unint64_t))(v137.__r_.__value_.__r.__words[2] + 40))((uint64_t)&v137.__r_.__value_.__r.__words[2], v45);
        v138[1] = (char *)v138[1] - 16;
      }
    }
  }
  v46 = (std::string::size_type)&__src[1];
  sub_20E9EE280(v139, (std::string *)&__src[1]);
  v47 = v138[1];
  v48 = *(v47 - 2)
      - (*(uint64_t (**)(uint64_t))(v137.__r_.__value_.__r.__words[2] + 32))((uint64_t)&v137.__r_.__value_.__r.__words[2])
      + *(v47 - 1);
  if (v48)
    (*(void (**)(uint64_t, unint64_t))(v137.__r_.__value_.__r.__words[2] + 40))((uint64_t)&v137.__r_.__value_.__r.__words[2], v48);
  v49 = v139;
  v137.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C9B71C0;
  v137.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_24C9B7308;
  v138[1] = (char *)v138[1] - 16;
  v139 = 0;
  if (v49)
  {
    sub_20E9EF740((_QWORD *)(v49 + 8));
    MEMORY[0x212BC6398](v49, 0x10F2C40853B94B7);
  }
  v137.__r_.__value_.__r.__words[2] = (std::string::size_type)off_24C9B7428;
  v50 = a4;
  if (v138[0])
  {
    v138[1] = v138[0];
    operator delete(v138[0]);
  }
  v51 = (unsigned __int8 *)v130[0];
  memset(&v151, 0, sizeof(v151));
  v52 = (char *)v130[1] - (char *)v130[0];
  if (v130[1] == v130[0])
  {
    v122 = 0;
    v123 = 0;
    *(_OWORD *)&v137.__r_.__value_.__l.__data_ = 0uLL;
    v137.__r_.__value_.__r.__words[2] = (char *)v130[1] - (char *)v130[0];
    if ((SHIBYTE(__src[3]) & 0x80000000) == 0)
    {
LABEL_182:
      *(_QWORD *)v50 = v123;
      *(_QWORD *)(v50 + 8) = v122;
      *(_QWORD *)(v50 + 16) = v52;
      *(_OWORD *)(v50 + 24) = *(_OWORD *)&__src[1];
      *(void **)(v50 + 40) = __src[3];
      *(_BYTE *)(v50 + 48) = 1;
      goto LABEL_186;
    }
  }
  else
  {
    v53 = 0x84BDA12F684BDA13 * (v52 >> 3);
    if (v53 > 0xBE82FA0BE82FA0)
      sub_20E867F44();
    v151.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x5ED097B425ED0988 * (v52 >> 3));
    v151.__r_.__value_.__l.__size_ = v151.__r_.__value_.__r.__words[0];
    v151.__r_.__value_.__r.__words[2] = v151.__r_.__value_.__r.__words[0] + 344 * v53;
    do
    {
      v54 = v51[48];
      if (v51[48])
      {
        if ((char)v51[47] < 0)
        {
          sub_20E860C04(__dst, *((void **)v51 + 3), *((_QWORD *)v51 + 4));
        }
        else
        {
          *(_OWORD *)__dst = *(_OWORD *)(v51 + 24);
          *(_QWORD *)&__dst[16] = *((_QWORD *)v51 + 5);
        }
        v56 = *(void **)__dst;
        LODWORD(v140) = *(_DWORD *)&__dst[16];
        *(_DWORD *)((char *)&v140 + 3) = *(_DWORD *)&__dst[19];
        LOBYTE(v46) = __dst[23];
        v57 = *((_QWORD *)v51 + 1);
        v58 = *((_QWORD *)v51 + 2);
        LOBYTE(v148) = 0;
        BYTE8(v149) = 0;
        if ((__dst[23] & 0x80000000) != 0)
        {
          sub_20E860C04(&v148, *(void **)__dst, *(unint64_t *)&__dst[8]);
        }
        else
        {
          v148 = *(_OWORD *)__dst;
          LODWORD(v149) = v140;
          *(_DWORD *)((char *)&v149 + 3) = *(_DWORD *)((char *)&v140 + 3);
          BYTE7(v149) = __dst[23];
        }
        v55 = 1;
      }
      else
      {
        v55 = 0;
        v56 = 0;
        v57 = *((_QWORD *)v51 + 1);
        v58 = *((_QWORD *)v51 + 2);
        LOBYTE(v148) = 0;
      }
      BYTE8(v149) = v55;
      memset(__dst, 0, 72);
      v141 = 0uLL;
      v142 = 0;
      sub_20EAAD408((uint64_t)__p, v57, v58, &v148, (uint64_t)__dst, &v141, 1);
      if (BYTE8(v149) && SBYTE7(v149) < 0)
        operator delete((void *)v148);
      if (v51[184])
      {
        v59 = 0;
        *(_OWORD *)__dst = *(_OWORD *)(v51 + 168);
        do
        {
          v60 = __dst[v59];
          if (__dst[v59])
            v61 = 1;
          else
            v61 = v59 == 15;
          ++v59;
        }
        while (!v61);
        if (v60)
        {
          *(_OWORD *)&v155[104] = *(_OWORD *)__dst;
          if (!v155[120])
            v155[120] = 1;
        }
      }
      *(_OWORD *)&v155[128] = *(_OWORD *)(v51 + 56);
      v62 = *(_OWORD *)(v51 + 72);
      v63 = *(_OWORD *)(v51 + 88);
      v64 = *(_OWORD *)(v51 + 104);
      *(_OWORD *)&v155[185] = *(_OWORD *)(v51 + 113);
      *(_OWORD *)&v155[160] = v63;
      *(_OWORD *)&v155[176] = v64;
      *(_OWORD *)&v155[144] = v62;
      v65 = *(_OWORD *)(v51 + 136);
      *(_OWORD *)&v155[217] = *(_OWORD *)(v51 + 145);
      *(_OWORD *)&v155[208] = v65;
      if (v54 && (v46 & 0x80) != 0)
        operator delete(v56);
      sub_210232668(v51 + 192, (uint64_t)__dst);
      LOBYTE(v46) = -125;
      if (!__dst[16]
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/UserAnchorNodeGroup/include/VIO/UserAnchorNodeGroup/AnchorIOSampleTypes.h", 131, (uint64_t)"opt", 3, (uint64_t)"Invalid uuid in UserAnchorWithMetadataSample", 44, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v160 = *(_OWORD *)__dst;
      size = v151.__r_.__value_.__l.__size_;
      if (v151.__r_.__value_.__l.__size_ >= v151.__r_.__value_.__r.__words[2])
      {
        v81 = v151.__r_.__value_.__r.__words[0];
        v82 = 0x82FA0BE82FA0BE83
            * ((uint64_t)(v151.__r_.__value_.__l.__size_ - v151.__r_.__value_.__r.__words[0]) >> 3);
        v83 = v82 + 1;
        if (v82 + 1 > 0xBE82FA0BE82FA0)
          sub_20E867F44();
        if (0x5F417D05F417D06
           * ((uint64_t)(v151.__r_.__value_.__r.__words[2] - v151.__r_.__value_.__r.__words[0]) >> 3) > v83)
          v83 = 0x5F417D05F417D06
              * ((uint64_t)(v151.__r_.__value_.__r.__words[2] - v151.__r_.__value_.__r.__words[0]) >> 3);
        if (0x82FA0BE82FA0BE83
           * ((uint64_t)(v151.__r_.__value_.__r.__words[2] - v151.__r_.__value_.__r.__words[0]) >> 3) >= 0x5F417D05F417D0)
          v46 = 0xBE82FA0BE82FA0;
        else
          v46 = v83;
        if (v46)
        {
          if (v46 > 0xBE82FA0BE82FA0)
            sub_20E877A38();
          v84 = (char *)operator new(344 * v46);
        }
        else
        {
          v84 = 0;
        }
        v85 = (std::string::size_type)&v84[344 * v82];
        *(_OWORD *)v85 = *(_OWORD *)__p;
        *(_BYTE *)(v85 + 16) = 0;
        *(_BYTE *)(v85 + 40) = 0;
        if (v155[0])
        {
          *(_OWORD *)(v85 + 16) = *(_OWORD *)v153;
          *(_QWORD *)(v85 + 32) = v154;
          v153[1] = 0;
          v154 = 0;
          v153[0] = 0;
          *(_BYTE *)(v85 + 40) = 1;
        }
        v86 = *(_OWORD *)&v155[216];
        *(_OWORD *)(v85 + 240) = *(_OWORD *)&v155[200];
        *(_OWORD *)(v85 + 256) = v86;
        *(_BYTE *)(v85 + 272) = v155[232];
        v87 = *(_OWORD *)&v155[152];
        *(_OWORD *)(v85 + 176) = *(_OWORD *)&v155[136];
        *(_OWORD *)(v85 + 192) = v87;
        v88 = *(_OWORD *)&v155[184];
        *(_OWORD *)(v85 + 208) = *(_OWORD *)&v155[168];
        *(_OWORD *)(v85 + 224) = v88;
        v89 = *(_OWORD *)&v155[88];
        *(_OWORD *)(v85 + 112) = *(_OWORD *)&v155[72];
        *(_OWORD *)(v85 + 128) = v89;
        v90 = *(_OWORD *)&v155[120];
        *(_OWORD *)(v85 + 144) = *(_OWORD *)&v155[104];
        *(_OWORD *)(v85 + 160) = v90;
        v91 = *(_OWORD *)&v155[24];
        *(_OWORD *)(v85 + 48) = *(_OWORD *)&v155[8];
        *(_OWORD *)(v85 + 64) = v91;
        v92 = *(_OWORD *)&v155[56];
        *(_OWORD *)(v85 + 80) = *(_OWORD *)&v155[40];
        *(_OWORD *)(v85 + 96) = v92;
        *(_BYTE *)(v85 + 280) = 0;
        *(_BYTE *)(v85 + 296) = 0;
        if (v157)
        {
          *(_OWORD *)(v85 + 280) = v156;
          v156 = 0uLL;
          *(_BYTE *)(v85 + 296) = 1;
        }
        v93 = (std::string::size_type)&v84[344 * v46];
        *(_OWORD *)(v85 + 304) = v158;
        *(_QWORD *)(v85 + 320) = v159;
        *(_OWORD *)&v84[344 * v82 + 328] = v160;
        v80 = v85 + 344;
        if (size != v81)
        {
          v94 = 0;
          do
          {
            v97 = v85 + v94;
            v98 = size + v94;
            *(_OWORD *)(v85 + v94 - 344) = *(_OWORD *)(size + v94 - 344);
            v99 = (_BYTE *)(v85 + v94 - 328);
            *v99 = 0;
            v100 = (_BYTE *)(v85 + v94 - 304);
            *v100 = 0;
            if (*(_BYTE *)(size + v94 - 304))
            {
              v101 = (_QWORD *)(v98 - 328);
              v102 = *(_OWORD *)(v98 - 328);
              *(_QWORD *)(v85 + v94 - 312) = *(_QWORD *)(v98 - 312);
              *(_OWORD *)v99 = v102;
              v101[1] = 0;
              v101[2] = 0;
              *v101 = 0;
              *v100 = 1;
            }
            v103 = (_OWORD *)(v97 - 296);
            v104 = *(_OWORD *)(v98 - 248);
            v105 = *(_OWORD *)(v98 - 232);
            v106 = *(_OWORD *)(v98 - 216);
            *(_OWORD *)(v97 - 200) = *(_OWORD *)(v98 - 200);
            *(_OWORD *)(v97 - 216) = v106;
            *(_OWORD *)(v97 - 232) = v105;
            *(_OWORD *)(v97 - 248) = v104;
            v107 = *(_OWORD *)(v98 - 184);
            v108 = *(_OWORD *)(v98 - 168);
            v109 = *(_OWORD *)(v98 - 152);
            *(_OWORD *)(v97 - 136) = *(_OWORD *)(v98 - 136);
            *(_OWORD *)(v97 - 152) = v109;
            *(_OWORD *)(v97 - 168) = v108;
            *(_OWORD *)(v97 - 184) = v107;
            v110 = *(_OWORD *)(v98 - 120);
            v111 = *(_OWORD *)(v98 - 104);
            v112 = *(_OWORD *)(v98 - 88);
            *(_BYTE *)(v97 - 72) = *(_BYTE *)(v98 - 72);
            *(_OWORD *)(v97 - 88) = v112;
            *(_OWORD *)(v97 - 104) = v111;
            *(_OWORD *)(v97 - 120) = v110;
            v113 = *(_OWORD *)(v98 - 296);
            v114 = *(_OWORD *)(v98 - 264);
            v103[1] = *(_OWORD *)(v98 - 280);
            v103[2] = v114;
            *v103 = v113;
            *(_BYTE *)(v97 - 64) = 0;
            *(_BYTE *)(v97 - 48) = 0;
            if (*(_BYTE *)(v98 - 48))
            {
              v115 = size + v94;
              *(_OWORD *)(v97 - 64) = *(_OWORD *)(size + v94 - 64);
              *(_QWORD *)(v115 - 64) = 0;
              *(_QWORD *)(v115 - 56) = 0;
              *(_BYTE *)(v97 - 48) = 1;
            }
            v95 = v85 + v94;
            v96 = *(_OWORD *)(size + v94 - 40);
            *(_QWORD *)(v95 - 24) = *(_QWORD *)(size + v94 - 24);
            *(_OWORD *)(v95 - 40) = v96;
            *(_OWORD *)(v95 - 16) = *(_OWORD *)(size + v94 - 16);
            v94 -= 344;
          }
          while (size + v94 != v81);
          v46 = v151.__r_.__value_.__l.__size_;
          size = v151.__r_.__value_.__r.__words[0];
          v151.__r_.__value_.__r.__words[0] = v85 + v94;
          v151.__r_.__value_.__l.__size_ = v85 + 344;
          v151.__r_.__value_.__r.__words[2] = v93;
          while (2)
          {
            if (v46 == size)
              goto LABEL_170;
            if (!*(_BYTE *)(v46 - 48))
              goto LABEL_214;
            v116 = *(std::__shared_weak_count **)(v46 - 56);
            if (!v116)
              goto LABEL_214;
            p_shared_owners = (unint64_t *)&v116->__shared_owners_;
            do
              v118 = __ldaxr(p_shared_owners);
            while (__stlxr(v118 - 1, p_shared_owners));
            if (!v118)
            {
              ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
              std::__shared_weak_count::__release_weak(v116);
              if (*(_BYTE *)(v46 - 304))
                goto LABEL_165;
            }
            else
            {
LABEL_214:
              if (*(_BYTE *)(v46 - 304))
              {
LABEL_165:
                if (*(char *)(v46 - 305) < 0)
                  operator delete(*(void **)(v46 - 328));
              }
            }
            v46 -= 344;
            continue;
          }
        }
        v151.__r_.__value_.__r.__words[0] = v85;
        v151.__r_.__value_.__l.__size_ = v85 + 344;
        v151.__r_.__value_.__r.__words[2] = (std::string::size_type)&v84[344 * v46];
LABEL_170:
        if (size)
          operator delete((void *)size);
      }
      else
      {
        *(_OWORD *)v151.__r_.__value_.__l.__size_ = *(_OWORD *)__p;
        *(_BYTE *)(size + 16) = 0;
        *(_BYTE *)(size + 40) = 0;
        if (v155[0])
        {
          v67 = *(_OWORD *)v153;
          *(_QWORD *)(size + 32) = v154;
          *(_OWORD *)(size + 16) = v67;
          v153[1] = 0;
          v154 = 0;
          v153[0] = 0;
          *(_BYTE *)(size + 40) = 1;
        }
        v68 = *(_OWORD *)&v155[8];
        v69 = *(_OWORD *)&v155[40];
        *(_OWORD *)(size + 64) = *(_OWORD *)&v155[24];
        *(_OWORD *)(size + 80) = v69;
        *(_OWORD *)(size + 48) = v68;
        v70 = *(_OWORD *)&v155[56];
        v71 = *(_OWORD *)&v155[72];
        v72 = *(_OWORD *)&v155[104];
        *(_OWORD *)(size + 128) = *(_OWORD *)&v155[88];
        *(_OWORD *)(size + 144) = v72;
        *(_OWORD *)(size + 96) = v70;
        *(_OWORD *)(size + 112) = v71;
        v73 = *(_OWORD *)&v155[120];
        v74 = *(_OWORD *)&v155[136];
        v75 = *(_OWORD *)&v155[168];
        *(_OWORD *)(size + 192) = *(_OWORD *)&v155[152];
        *(_OWORD *)(size + 208) = v75;
        *(_OWORD *)(size + 160) = v73;
        *(_OWORD *)(size + 176) = v74;
        v76 = *(_OWORD *)&v155[184];
        v77 = *(_OWORD *)&v155[200];
        v78 = *(_OWORD *)&v155[216];
        *(_BYTE *)(size + 272) = v155[232];
        *(_OWORD *)(size + 240) = v77;
        *(_OWORD *)(size + 256) = v78;
        *(_OWORD *)(size + 224) = v76;
        *(_BYTE *)(size + 280) = 0;
        *(_BYTE *)(size + 296) = 0;
        if (v157)
        {
          *(_OWORD *)(size + 280) = v156;
          v156 = 0uLL;
          *(_BYTE *)(size + 296) = 1;
        }
        v79 = v158;
        *(_QWORD *)(size + 320) = v159;
        *(_OWORD *)(size + 304) = v79;
        *(_OWORD *)(size + 328) = v160;
        v80 = size + 344;
      }
      v151.__r_.__value_.__l.__size_ = v80;
      if (v157)
      {
        v119 = (std::__shared_weak_count *)*((_QWORD *)&v156 + 1);
        if (*((_QWORD *)&v156 + 1))
        {
          v120 = (unint64_t *)(*((_QWORD *)&v156 + 1) + 8);
          do
            v121 = __ldaxr(v120);
          while (__stlxr(v121 - 1, v120));
          if (!v121)
          {
            ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
            std::__shared_weak_count::__release_weak(v119);
          }
        }
      }
      if (v155[0] && SHIBYTE(v154) < 0)
        operator delete(v153[0]);
      v51 += 216;
    }
    while (v51 != v130[1]);
    v122 = v151.__r_.__value_.__l.__size_;
    v123 = v151.__r_.__value_.__r.__words[0];
    v52 = v151.__r_.__value_.__r.__words[2];
    v50 = a4;
    v137 = v151;
    if ((SHIBYTE(__src[3]) & 0x80000000) == 0)
      goto LABEL_182;
  }
  sub_20E860C04(v138, __src[1], (unint64_t)__src[2]);
  v124 = v137.__r_.__value_.__r.__words[2];
  v125 = SHIBYTE(__src[3]);
  *(_OWORD *)v50 = *(_OWORD *)&v137.__r_.__value_.__l.__data_;
  *(_QWORD *)(v50 + 16) = v124;
  *(_OWORD *)(v50 + 24) = *(_OWORD *)v138;
  *(void **)(v50 + 40) = v138[2];
  *(_BYTE *)(v50 + 48) = 1;
  if (v125 < 0)
    operator delete(__src[1]);
LABEL_186:
  if (v130[0])
  {
    v126 = (void **)v130[1];
    v11 = v130[0];
    if (v130[1] == v130[0])
    {
LABEL_197:
      operator delete(v11);
      goto LABEL_198;
    }
    while (1)
    {
      if (*((char *)v126 - 1) < 0)
      {
        operator delete(*(v126 - 3));
        if (*((_BYTE *)v126 - 168))
        {
LABEL_194:
          if (*((char *)v126 - 169) < 0)
            operator delete(*(v126 - 24));
        }
      }
      else if (*((_BYTE *)v126 - 168))
      {
        goto LABEL_194;
      }
      v126 -= 27;
      if (v126 == v130[0])
      {
        v11 = v130[0];
        goto LABEL_197;
      }
    }
  }
LABEL_198:
  v127 = v134;
  if (!v134)
    goto LABEL_202;
  v128 = (unint64_t *)&v134->__shared_owners_;
  do
    v129 = __ldaxr(v128);
  while (__stlxr(v129 - 1, v128));
  if (v129)
  {
LABEL_202:
    if ((v136 & 0x80000000) == 0)
      return;
    goto LABEL_203;
  }
  ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
  std::__shared_weak_count::__release_weak(v127);
  if (v136 < 0)
LABEL_203:
    operator delete(v135[0]);
}

void sub_20EE29290(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::runtime_error a71;
  void *v73;
  const std::runtime_error *v74;
  const std::runtime_error *v75;

  if (!a2)
    _Unwind_Resume(a1);
  sub_20EE1B3E8((void **)&STACK[0x250]);
  sub_20EE112F0((uint64_t)&a71);
  sub_21022EAD8((uint64_t)&STACK[0x220]);
  if (SLOBYTE(STACK[0x24F]) < 0)
    operator delete((void *)STACK[0x238]);
  if (a2 == 3)
  {
    v73 = __cxa_begin_catch(a1);
    STACK[0x220] = (*(uint64_t (**)(void *))(*(_QWORD *)v73 + 16))(v73);
    sub_20EE2969C((uint64_t)&STACK[0x238], a10, (const char *)&STACK[0x220]);
    std::runtime_error::runtime_error((std::runtime_error *)&STACK[0x298], (const std::string *)&STACK[0x238]);
    STACK[0x298] = (unint64_t)&off_24C9EDA58;
    LODWORD(STACK[0x2A8]) = 2;
    std::runtime_error::runtime_error(&a71, (const std::runtime_error *)&STACK[0x298]);
    a71.__vftable = (std::runtime_error_vtbl *)&off_24C9EDA58;
    LODWORD(STACK[0x200]) = STACK[0x2A8];
    std::runtime_error::runtime_error((std::runtime_error *)a11, &a71);
    *(_QWORD *)a11 = &off_24C9EDA58;
    *(_DWORD *)(a11 + 16) = STACK[0x200];
    *(_BYTE *)(a11 + 48) = 0;
    std::runtime_error::~runtime_error(&a71);
    std::runtime_error::~runtime_error((std::runtime_error *)&STACK[0x298]);
    if (SLOBYTE(STACK[0x24F]) < 0)
      operator delete((void *)STACK[0x238]);
  }
  else
  {
    v74 = (const std::runtime_error *)__cxa_begin_catch(a1);
    if (a2 == 2)
    {
      v75 = v74;
      std::runtime_error::runtime_error(&a71, v74);
      a71.__vftable = (std::runtime_error_vtbl *)&off_24C9EDA58;
      LODWORD(STACK[0x200]) = v75[1].__vftable;
      std::runtime_error::runtime_error((std::runtime_error *)a11, &a71);
      *(_QWORD *)a11 = &off_24C9EDA58;
      *(_DWORD *)(a11 + 16) = STACK[0x200];
      *(_BYTE *)(a11 + 48) = 0;
      std::runtime_error::~runtime_error(&a71);
      __cxa_end_catch();
LABEL_14:
      JUMPOUT(0x20EE291FCLL);
    }
    sub_20EE12008((uint64_t)&off_24C9EB0A8, (uint64_t)"Error loading anchor bundle with id ", a10);
    std::runtime_error::runtime_error((std::runtime_error *)&STACK[0x298], (const std::string *)&STACK[0x238]);
    STACK[0x298] = (unint64_t)&off_24C9EDA58;
    LODWORD(STACK[0x2A8]) = 4;
    std::runtime_error::runtime_error(&a71, (const std::runtime_error *)&STACK[0x298]);
    a71.__vftable = (std::runtime_error_vtbl *)&off_24C9EDA58;
    LODWORD(STACK[0x200]) = STACK[0x2A8];
    std::runtime_error::runtime_error((std::runtime_error *)a11, &a71);
    *(_QWORD *)a11 = &off_24C9EDA58;
    *(_DWORD *)(a11 + 16) = STACK[0x200];
    *(_BYTE *)(a11 + 48) = 0;
    std::runtime_error::~runtime_error(&a71);
    std::runtime_error::~runtime_error((std::runtime_error *)&STACK[0x298]);
    if (SLOBYTE(STACK[0x24F]) < 0)
      operator delete((void *)STACK[0x238]);
  }
  __cxa_end_catch();
  goto LABEL_14;
}

uint64_t sub_20EE2969C(uint64_t a1, uint64_t a2, const char *a3)
{
  uint64_t result;
  char v6;
  char v7;
  _BYTE v8[24];
  int v9;
  _BYTE *v10;
  const char *v11;
  _BYTE *v12;
  const char *v13;
  const char *v14;
  _QWORD *v15;

  v9 = 0;
  sub_20E878638((uint64_t)&v7, (uint64_t)v8, (uint64_t)&off_24C9EB0A8);
  v10 = v8;
  v11 = "Error loading anchor bundle with id ";
  v12 = v8;
  v13 = "Error loading anchor bundle with id ";
  v14 = "Error loading anchor bundle with id ";
  if (v9 == -1)
    sub_20E877AB8();
  v15 = &v10;
  ((void (*)(_QWORD **, _BYTE *))off_24C9EB100[v9])(&v15, v8);
  sub_20EB9CFE0((uint64_t)&v6, (uint64_t)v8, a2);
  v10 = v8;
  v11 = " with message ";
  v12 = v8;
  v13 = " with message ";
  v14 = " with message ";
  if (v9 == -1)
    sub_20E877AB8();
  v15 = &v10;
  ((void (*)(_QWORD **, _BYTE *))off_24C9EB118[v9])(&v15, v8);
  if (*(_QWORD *)a3)
  {
    v10 = v8;
    v11 = a3;
    v12 = v8;
    v13 = a3;
    v14 = a3;
    if (v9 != -1)
    {
      v15 = &v10;
      ((void (*)(_QWORD **, _BYTE *))off_24C9EB130[v9])(&v15, v8);
      goto LABEL_8;
    }
LABEL_14:
    sub_20E877AB8();
  }
  v10 = v8;
  v11 = "nullptr";
  v12 = v8;
  v13 = "nullptr";
  v14 = "nullptr";
  if (v9 == -1)
    goto LABEL_14;
  v15 = &v10;
  ((void (*)(_QWORD **, _BYTE *))off_24C9EB0D0[v9])(&v15, v8);
LABEL_8:
  if (v9 == -1)
    sub_20E877AB8();
  v10 = &v15;
  result = ((uint64_t (*)(_BYTE **, _BYTE *))off_24C9EB0E8[v9])(&v10, v8);
  if (v9 != -1)
    return ((uint64_t (*)(_BYTE **, _BYTE *))off_24C9EB0B8[v9])(&v10, v8);
  return result;
}

void sub_20EE29884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EE29898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EE298AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EE298C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EE298D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EE298E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE298FC(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = &off_24C9EB158;
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(void))(a1 + 16))();
  return a1;
}

void sub_20EE2993C(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = &off_24C9EB158;
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(void))(a1 + 16))();
  JUMPOUT(0x212BC6398);
}

void sub_20EE2998C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  std::runtime_error_vtbl *v5;
  unint64_t *v6;
  unint64_t v7;
  std::runtime_error_vtbl *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *imp;
  unint64_t *v24;
  unint64_t v25;
  void **v26;
  void **v27;
  void *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  void **v32;
  void **v33;
  void *v34;
  void **v35;
  void **v36;
  void *v37;
  uint64_t v38;
  std::runtime_error v39;
  int v40;
  std::runtime_error v41;
  void *__p;
  void **v43;
  char v44;
  void *v45;
  void **v46;
  void *v47;
  void **v48;

  v4 = *(_QWORD *)(a1 + 8);
  sub_20EE02D78(v4 + 48, a2, (uint64_t)&v45);
  sub_20EE2C340((uint64_t *)&v39, (uint64_t *)(*(_QWORD *)(v4 + 168) + 104), (uint64_t)&v45);
  v5 = v39.__vftable;
  v39.__vftable = 0;
  sub_20EE2C8BC((uint64_t)&v41, (uint64_t)v5);
  if (!v5)
    goto LABEL_10;
  v6 = (unint64_t *)&v5->~runtime_error_0;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
    (*((void (**)(std::runtime_error_vtbl *))v5->~runtime_error + 2))(v5);
  v8 = v39.__vftable;
  if (!v39.__vftable)
    goto LABEL_10;
  v9 = (unint64_t *)&v39.~runtime_error_0;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    (*((void (**)(std::runtime_error_vtbl *))v8->~runtime_error + 2))(v8);
    if (v44)
    {
LABEL_11:
      sub_20EE2C9D8(&v38, (uint64_t *)(*(_QWORD *)(v4 + 248) + 104), (uint64_t)&v41);
      v11 = v38;
      v38 = 0;
      sub_20EE2CF00(&v39, v11);
      if (v11)
      {
        v12 = (unint64_t *)(v11 + 8);
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
        v14 = v38;
        if (v38)
        {
          v15 = (unint64_t *)(v38 + 8);
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          if (!v16)
            (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
        }
      }
      sub_20EE2CFC8(&v38, (uint64_t *)(*(_QWORD *)(v4 + 168) + 272), (uint64_t)&v39);
      v17 = v38;
      v38 = 0;
      sub_20EE2D4D0(a3, v17);
      if (v17)
      {
        v18 = (unint64_t *)(v17 + 8);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
        v20 = v38;
        if (v38)
        {
          v21 = (unint64_t *)(v38 + 8);
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
            (*(void (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
        }
      }
      imp = (std::__shared_weak_count *)v39.__imp_.__imp_;
      if (v39.__imp_.__imp_)
      {
        v24 = (unint64_t *)(v39.__imp_.__imp_ + 8);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
          std::__shared_weak_count::__release_weak(imp);
        }
      }
      if (v44)
        goto LABEL_37;
LABEL_52:
      ((void (*)(std::runtime_error *))v41.~runtime_error)(&v41);
      goto LABEL_53;
    }
  }
  else
  {
LABEL_10:
    if (v44)
      goto LABEL_11;
  }
  std::runtime_error::runtime_error(&v39, &v41);
  v39.__vftable = (std::runtime_error_vtbl *)&off_24C9EDA58;
  v40 = (int)__p;
  std::runtime_error::runtime_error((std::runtime_error *)a3, &v39);
  *(_QWORD *)a3 = &off_24C9EDA58;
  *(_DWORD *)(a3 + 16) = v40;
  *(_BYTE *)(a3 + 24) = 0;
  std::runtime_error::~runtime_error(&v39);
  if (!v44)
    goto LABEL_52;
LABEL_37:
  v26 = (void **)__p;
  if (__p)
  {
    v27 = v43;
    v28 = __p;
    if (v43 != __p)
    {
      do
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      while (v27 != v26);
      v28 = __p;
    }
    v43 = v26;
    operator delete(v28);
  }
  v29 = (std::__shared_weak_count *)v41.__imp_.__imp_;
  if (v41.__imp_.__imp_)
  {
    v30 = (unint64_t *)(v41.__imp_.__imp_ + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
LABEL_53:
  v32 = (void **)v47;
  if (v47)
  {
    v33 = v48;
    v34 = v47;
    if (v48 != v47)
    {
      do
      {
        if (*((char *)v33 - 1) < 0)
          operator delete(*(v33 - 3));
        v33 -= 3;
      }
      while (v33 != v32);
      v34 = v47;
    }
    v48 = v32;
    operator delete(v34);
  }
  v35 = (void **)v45;
  if (v45)
  {
    v36 = v46;
    v37 = v45;
    if (v46 != v45)
    {
      do
      {
        if (*((char *)v36 - 1) < 0)
          operator delete(*(v36 - 3));
        v36 -= 3;
      }
      while (v36 != v35);
      v37 = v45;
    }
    v46 = v35;
    operator delete(v37);
  }
}

void sub_20EE29D08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, unint64_t *a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, void (**a13)(_QWORD), std::__shared_weak_count *a14, void **__p, void **a16, uint64_t a17, char a18, void *a19, void *a20,uint64_t a21,void **a22,void **a23)
{
  unint64_t *v23;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  void **v31;
  void **v32;
  void **v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  void **v37;
  void *v38;
  void **v39;
  void **v40;
  uint64_t v41;
  void *v42;

  if (v23)
  {
    v25 = v23 + 1;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
      (*(void (**)(unint64_t *))(*v23 + 16))(v23);
    if (a9)
    {
      v27 = a9 + 1;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
        (*(void (**)(unint64_t *))(*a9 + 16))(a9);
    }
  }
  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  if (a18)
  {
    v31 = __p;
    if (__p)
    {
      v32 = a16;
      v33 = __p;
      if (a16 != __p)
      {
        do
        {
          if (*((char *)v32 - 1) < 0)
            operator delete(*(v32 - 3));
          v32 -= 3;
        }
        while (v32 != v31);
        v33 = __p;
      }
      a16 = v31;
      operator delete(v33);
    }
    v34 = a14;
    if (a14)
    {
      v35 = (unint64_t *)&a14->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
  }
  else
  {
    (*a13)(&a13);
  }
  v37 = a22;
  if (a22)
  {
    v39 = a23;
    v40 = a22;
    if (a23 != a22)
    {
      do
      {
        if (*((char *)v39 - 1) < 0)
          operator delete(*(v39 - 3));
        v39 -= 3;
      }
      while (v39 != v37);
      v40 = a22;
    }
    a23 = v37;
    operator delete(v40);
    v38 = a19;
    if (!a19)
LABEL_33:
      _Unwind_Resume(a1);
  }
  else
  {
    v38 = a19;
    if (!a19)
      goto LABEL_33;
  }
  v41 = (uint64_t)a20;
  v42 = v38;
  if (a20 != v38)
  {
    do
    {
      if (*(char *)(v41 - 1) < 0)
        operator delete(*(void **)(v41 - 24));
      v41 -= 24;
    }
    while ((void *)v41 != v38);
    v42 = a19;
  }
  a20 = v38;
  operator delete(v42);
  _Unwind_Resume(a1);
}

void sub_20EE29FB8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  std::mutex *v8;
  int v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::runtime_error *exception;
  std::runtime_error *v38;
  std::exception_ptr v39;
  std::unique_lock<std::mutex>::mutex_type *v40;
  std::exception_ptr v41;
  std::unique_lock<std::mutex> __lk;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  char v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  __int16 v68;
  unsigned int v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 8);
  sub_20EE0726C(v4 + 48, a2, (uint64_t)&v43);
  if (!v69)
  {
    v5 = *(_QWORD *)(v4 + 248);
    v6 = operator new();
    *(_QWORD *)(v6 + 8) = 0;
    v7 = (unint64_t *)(v6 + 8);
    *(_QWORD *)(v6 + 24) = 850045863;
    v8 = (std::mutex *)(v6 + 24);
    *(_QWORD *)(v6 + 16) = 0;
    *(_OWORD *)(v6 + 32) = 0u;
    *(_OWORD *)(v6 + 48) = 0u;
    *(_OWORD *)(v6 + 64) = 0u;
    *(_QWORD *)(v6 + 80) = 0;
    *(_QWORD *)(v6 + 88) = 1018212795;
    *(_OWORD *)(v6 + 96) = 0u;
    *(_OWORD *)(v6 + 112) = 0u;
    *(_OWORD *)(v6 + 124) = 0u;
    *(_QWORD *)v6 = &off_24C9EB2C8;
    v40 = (std::unique_lock<std::mutex>::mutex_type *)v6;
    std::mutex::lock((std::mutex *)(v6 + 24));
    v9 = *(_DWORD *)(v6 + 136);
    if ((v9 & 2) != 0)
      sub_20E96CE78(1u);
    do
      v10 = __ldxr(v7);
    while (__stxr(v10 + 1, v7));
    *(_DWORD *)(v6 + 136) = v9 | 2;
    std::mutex::unlock(v8);
    v11 = *(std::__shared_weak_count **)(v5 + 280);
    if (!v11 || (v12 = std::__shared_weak_count::lock(v11)) == 0 || (v13 = *(_QWORD *)(v5 + 272)) == 0)
    {
      std::runtime_error::runtime_error((std::runtime_error *)&__lk, "ChannelInputWithPromise: Invalid operation. Processor is released.");
      __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)&off_24CA1E2B8;
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v38 = std::runtime_error::runtime_error(exception, (const std::runtime_error *)&__lk);
      v38->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
      __cxa_throw(v38, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
    }
    __lk.__m_ = v40;
    v40 = 0;
    (*(void (**)(uint64_t, __int128 *, std::unique_lock<std::mutex> *))(*(_QWORD *)v13 + 56))(v13, &v43, &__lk);
    sub_20EC36A04((uint64_t *)&__lk);
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    sub_20EC36A04((uint64_t *)&v40);
    __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v6 + 24);
    __lk.__owns_ = 1;
    std::mutex::lock(v8);
    std::__assoc_sub_state::__sub_wait((std::__assoc_sub_state *)v6, &__lk);
    v16 = *(_QWORD *)(v6 + 16);
    v41.__ptr_ = 0;
    std::exception_ptr::~exception_ptr(&v41);
    if (v16)
    {
      std::exception_ptr::exception_ptr(&v41, (const std::exception_ptr *)(v6 + 16));
      v39.__ptr_ = &v41;
      std::rethrow_exception(v39);
      __break(1u);
      return;
    }
    *(_OWORD *)a3 = *(_OWORD *)(v6 + 144);
    *(_BYTE *)(a3 + 16) = 0;
    *(_BYTE *)(a3 + 40) = 0;
    if (*(_BYTE *)(v6 + 184))
    {
      *(_OWORD *)(a3 + 16) = *(_OWORD *)(v6 + 160);
      *(_QWORD *)(a3 + 32) = *(_QWORD *)(v6 + 176);
      *(_QWORD *)(v6 + 168) = 0;
      *(_QWORD *)(v6 + 176) = 0;
      *(_QWORD *)(v6 + 160) = 0;
      *(_BYTE *)(a3 + 40) = 1;
    }
    v17 = *(_OWORD *)(v6 + 400);
    *(_OWORD *)(a3 + 240) = *(_OWORD *)(v6 + 384);
    *(_OWORD *)(a3 + 256) = v17;
    *(_BYTE *)(a3 + 272) = *(_BYTE *)(v6 + 416);
    v18 = *(_OWORD *)(v6 + 336);
    *(_OWORD *)(a3 + 176) = *(_OWORD *)(v6 + 320);
    *(_OWORD *)(a3 + 192) = v18;
    v19 = *(_OWORD *)(v6 + 368);
    *(_OWORD *)(a3 + 208) = *(_OWORD *)(v6 + 352);
    *(_OWORD *)(a3 + 224) = v19;
    v20 = *(_OWORD *)(v6 + 272);
    *(_OWORD *)(a3 + 112) = *(_OWORD *)(v6 + 256);
    *(_OWORD *)(a3 + 128) = v20;
    v21 = *(_OWORD *)(v6 + 304);
    *(_OWORD *)(a3 + 144) = *(_OWORD *)(v6 + 288);
    *(_OWORD *)(a3 + 160) = v21;
    v22 = *(_OWORD *)(v6 + 208);
    *(_OWORD *)(a3 + 48) = *(_OWORD *)(v6 + 192);
    *(_OWORD *)(a3 + 64) = v22;
    v23 = *(_OWORD *)(v6 + 240);
    *(_OWORD *)(a3 + 80) = *(_OWORD *)(v6 + 224);
    *(_OWORD *)(a3 + 96) = v23;
    *(_BYTE *)(a3 + 280) = 0;
    *(_BYTE *)(a3 + 296) = 0;
    if (*(_BYTE *)(v6 + 440))
    {
      v24 = *(_QWORD *)(v6 + 432);
      *(_QWORD *)(a3 + 280) = *(_QWORD *)(v6 + 424);
      *(_QWORD *)(a3 + 288) = v24;
      *(_QWORD *)(v6 + 424) = 0;
      *(_QWORD *)(v6 + 432) = 0;
      *(_BYTE *)(a3 + 296) = 1;
    }
    *(_OWORD *)(a3 + 304) = *(_OWORD *)(v6 + 448);
    *(_QWORD *)(a3 + 320) = *(_QWORD *)(v6 + 464);
    *(_WORD *)(a3 + 344) = *(_WORD *)(v6 + 488);
    *(_OWORD *)(a3 + 328) = *(_OWORD *)(v6 + 472);
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
    do
      v25 = __ldaxr(v7);
    while (__stlxr(v25 - 1, v7));
    if (v25)
    {
      v26 = v69;
      if (v69 == -1)
        return;
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
      v26 = v69;
      if (v69 == -1)
        return;
    }
    goto LABEL_36;
  }
  if (v69 != 1)
    sub_20E877AB8();
  *(_OWORD *)a3 = v43;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 40) = 0;
  if (v46)
  {
    if (SHIBYTE(v45) < 0)
    {
      sub_20E860C04((_BYTE *)(a3 + 16), (void *)v44, *((unint64_t *)&v44 + 1));
    }
    else
    {
      *(_OWORD *)(a3 + 16) = v44;
      *(_QWORD *)(a3 + 32) = v45;
    }
    *(_BYTE *)(a3 + 40) = 1;
  }
  v27 = v60;
  *(_OWORD *)(a3 + 240) = v59;
  *(_OWORD *)(a3 + 256) = v27;
  *(_BYTE *)(a3 + 272) = v61;
  v28 = v56;
  *(_OWORD *)(a3 + 176) = v55;
  *(_OWORD *)(a3 + 192) = v28;
  v29 = v58;
  *(_OWORD *)(a3 + 208) = v57;
  *(_OWORD *)(a3 + 224) = v29;
  v30 = v52;
  *(_OWORD *)(a3 + 112) = v51;
  *(_OWORD *)(a3 + 128) = v30;
  v31 = v54;
  *(_OWORD *)(a3 + 144) = v53;
  *(_OWORD *)(a3 + 160) = v31;
  v32 = v48;
  *(_OWORD *)(a3 + 48) = v47;
  *(_OWORD *)(a3 + 64) = v32;
  v33 = v50;
  *(_OWORD *)(a3 + 80) = v49;
  *(_OWORD *)(a3 + 96) = v33;
  *(_BYTE *)(a3 + 280) = 0;
  *(_BYTE *)(a3 + 296) = 0;
  if (v64)
  {
    v34 = v63;
    *(_QWORD *)(a3 + 280) = v62;
    *(_QWORD *)(a3 + 288) = v34;
    if (v34)
    {
      v35 = (unint64_t *)(v34 + 8);
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    *(_BYTE *)(a3 + 296) = 1;
  }
  *(_OWORD *)(a3 + 304) = v65;
  *(_QWORD *)(a3 + 320) = v66;
  *(_WORD *)(a3 + 344) = v68;
  *(_OWORD *)(a3 + 328) = v67;
  v26 = v69;
  if (v69 != -1)
LABEL_36:
    ((void (*)(std::unique_lock<std::mutex> *, __int128 *))off_24C9EB300[v26])(&__lk, &v43);
}

void sub_20EE2A558(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::exception_ptr a11, uint64_t a12, std::exception_ptr a13, std::runtime_error a14)
{
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;

  std::exception_ptr::~exception_ptr(&a11);
  std::runtime_error::~runtime_error(&a14);
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    JUMPOUT(0x20EE2A5B8);
  }
  JUMPOUT(0x20EE2A5D4);
}

void sub_20EE2A59C()
{
  uint64_t v0;

  if (v0)
    JUMPOUT(0x20EE2A5A4);
  JUMPOUT(0x20EE2A5D4);
}

void sub_20EE2A634(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_20E860DA4(exception_object);
}

void sub_20EE2A64C(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  sub_20EE2A654(*(_QWORD *)(a1 + 8), a2);
}

void sub_20EE2A654(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  int v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void **v25;
  void *v26;
  void **v27;
  std::runtime_error *exception;
  std::runtime_error *v29;
  __int128 v30;
  void *__p[2];
  void *v32;
  char v33;
  std::runtime_error v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  std::runtime_error_vtbl *v37;

  LOBYTE(__p[0]) = 0;
  v33 = 0;
  if (*(_BYTE *)(a1 + 88))
  {
    sub_20E9092A4((uint64_t)__p, a1 + 48);
    v33 = 1;
    v4 = *(_QWORD *)(a1 + 248);
    v5 = operator new();
    *(_QWORD *)(v5 + 8) = 0;
    v6 = (unint64_t *)(v5 + 8);
    *(_QWORD *)(v5 + 24) = 850045863;
    *(_QWORD *)(v5 + 16) = 0;
    *(_OWORD *)(v5 + 32) = 0u;
    *(_OWORD *)(v5 + 48) = 0u;
    *(_OWORD *)(v5 + 64) = 0u;
    *(_QWORD *)(v5 + 80) = 0;
    *(_QWORD *)(v5 + 88) = 1018212795;
    *(_OWORD *)(v5 + 96) = 0u;
    *(_OWORD *)(v5 + 112) = 0u;
    *(_OWORD *)(v5 + 124) = 0u;
    *(_QWORD *)v5 = &off_24C9EB238;
    v37 = (std::runtime_error_vtbl *)v5;
    std::mutex::lock((std::mutex *)(v5 + 24));
    v7 = *(_DWORD *)(v5 + 136);
    if ((v7 & 2) != 0)
      sub_20E96CE78(1u);
    do
      v8 = __ldxr(v6);
    while (__stxr(v8 + 1, v6));
    *(_DWORD *)(v5 + 136) = v7 | 2;
    std::mutex::unlock((std::mutex *)(v5 + 24));
    v35 = 0;
    v36 = 0;
    v9 = *(std::__shared_weak_count **)(v4 + 784);
    if (!v9
      || (v10 = std::__shared_weak_count::lock(v9), (v36 = v10) == 0)
      || (v11 = v10, v12 = *(_QWORD *)(v4 + 776), (v35 = v12) == 0))
    {
      std::runtime_error::runtime_error(&v34, "ChannelInputWithPromise: Invalid operation. Processor is released.");
      v34.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v29 = std::runtime_error::runtime_error(exception, &v34);
      v29->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
      __cxa_throw(v29, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
    }
    v34.__vftable = v37;
    v37 = 0;
    (*(void (**)(uint64_t, void **, std::runtime_error *))(*(_QWORD *)v12 + 56))(v12, __p, &v34);
    sub_20EE2CDD8((uint64_t *)&v34);
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    sub_20EE2CDD8((uint64_t *)&v37);
    sub_20EE2CF00(&v30, v5);
    do
      v15 = __ldaxr(v6);
    while (__stlxr(v15 - 1, v6));
    if (!v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    sub_20EE2CFC8(&v35, (uint64_t *)(*(_QWORD *)(a1 + 168) + 272), (uint64_t)&v30);
    v16 = v35;
    v35 = 0;
    sub_20EE2D4D0((uint64_t)a2, v16);
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
      v19 = v35;
      if (v35)
      {
        v20 = (unint64_t *)(v35 + 8);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
      }
    }
    v22 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
    if (*((_QWORD *)&v30 + 1))
    {
      v23 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    if (v33)
    {
      v25 = (void **)v32;
      if (v32)
      {
        do
        {
          v27 = (void **)*v25;
          if (*((char *)v25 + 39) < 0)
            operator delete(v25[2]);
          operator delete(v25);
          v25 = v27;
        }
        while (v27);
      }
      v26 = __p[0];
      __p[0] = 0;
      if (v26)
        operator delete(v26);
    }
  }
  else
  {
    *a2 = 1;
    a2[24] = 1;
  }
}

void sub_20EE2A97C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  unint64_t *v2;
  uint64_t v3;
  unint64_t *v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  if (v2)
  {
    v5 = v2 + 1;
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
      (*(void (**)(unint64_t *))(*v2 + 16))(v2);
    v7 = *(unint64_t **)(v3 - 80);
    if (v7)
    {
      v8 = v7 + 1;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
        (*(void (**)(unint64_t *))(*v7 + 16))(v7);
    }
  }
  sub_20E86665C((uint64_t)va);
  sub_20EAFDBE8((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EE2A9F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  unint64_t v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  sub_20EE2CDD8((uint64_t *)va1);
  sub_20E86665C(v6 - 80);
  do
    v8 = __ldaxr(v5);
  while (__stlxr(v8 - 1, v5));
  if (!v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  sub_20EE2CDD8((uint64_t *)(v6 - 64));
  sub_20EAFDBE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EE2AA08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v7;
  va_list va;

  va_start(va, a4);
  do
    v7 = __ldaxr(v5);
  while (__stlxr(v7 - 1, v5));
  if (!v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    sub_20EAFDBE8((uint64_t)va);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20EE2AB84);
}

void sub_20EE2AA40()
{
  std::mutex *v0;

  std::mutex::unlock(v0);
  JUMPOUT(0x20EE2AB7CLL);
}

void sub_20EE2AA50()
{
  JUMPOUT(0x20EE2AB7CLL);
}

void sub_20EE2AA58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20EAFDBE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EE2AA6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, void **a14, uint64_t a15, uint64_t a16, char a17)
{
  void **v18;
  void **v19;

  if (a17)
  {
    v18 = a14;
    if (a14)
    {
      do
      {
        v19 = (void **)*v18;
        if (*((char *)v18 + 39) < 0)
          operator delete(v18[2]);
        operator delete(v18);
        v18 = v19;
      }
      while (v19);
    }
    if (__p)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EE2AAC0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, std::exception_ptr a19)
{
  uint64_t v19;
  std::__assoc_sub_state *v20;
  std::exception_ptr v21;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v20 = *(std::__assoc_sub_state **)(v19 - 64);
  if (v20)
  {
    std::exception_ptr::exception_ptr((std::exception_ptr *)(v19 - 56), &a19);
    v21.__ptr_ = (void *)(v19 - 56);
    std::__assoc_sub_state::set_exception(v20, v21);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)(v19 - 56));
    std::exception_ptr::~exception_ptr(&a19);
    std::runtime_error::~runtime_error(&a18);
    if (!*(_QWORD *)(v19 - 72))
      JUMPOUT(0x20EE2A7B4);
    JUMPOUT(0x20EE2A784);
  }
  sub_20E96CE78(3u);
}

void sub_20EE2AB20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, std::exception_ptr a19)
{
  uint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  sub_20E86665C(v21 - 80);
  do
    v23 = __ldaxr(v20);
  while (__stlxr(v23 - 1, v20));
  if (!v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
  sub_20EE2CDD8((uint64_t *)(v21 - 64));
  sub_20EAFDBE8((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_20EE2AB94(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  sub_20EE2AB9C(*(_QWORD *)(a1 + 8), a2, a3);
}

void sub_20EE2AB9C(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  std::mutex *v8;
  int v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  std::unique_lock<std::mutex>::mutex_type *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::runtime_error *exception;
  std::runtime_error *v27;
  std::exception_ptr v28;
  std::runtime_error v29;
  std::runtime_error_vtbl *v30;
  std::unique_lock<std::mutex> __lk;

  v5 = *(_QWORD *)(a1 + 248);
  v6 = operator new();
  *(_QWORD *)(v6 + 8) = 0;
  v7 = (unint64_t *)(v6 + 8);
  *(_QWORD *)(v6 + 24) = 850045863;
  v8 = (std::mutex *)(v6 + 24);
  *(_QWORD *)(v6 + 16) = 0;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 1018212795;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 124) = 0u;
  *(_QWORD *)v6 = &off_24C9EB320;
  v30 = (std::runtime_error_vtbl *)v6;
  std::mutex::lock((std::mutex *)(v6 + 24));
  v9 = *(_DWORD *)(v6 + 136);
  if ((v9 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v10 = __ldxr(v7);
  while (__stxr(v10 + 1, v7));
  *(_DWORD *)(v6 + 136) = v9 | 2;
  std::mutex::unlock(v8);
  __lk.__m_ = 0;
  *(_QWORD *)&__lk.__owns_ = 0;
  v11 = *(std::__shared_weak_count **)(v5 + 616);
  if (!v11
    || (v12 = std::__shared_weak_count::lock(v11), (*(_QWORD *)&__lk.__owns_ = v12) == 0)
    || (v13 = v12, v14 = *(std::unique_lock<std::mutex>::mutex_type **)(v5 + 608), (__lk.__m_ = v14) == 0))
  {
    std::runtime_error::runtime_error(&v29, "ChannelInputWithPromise: Invalid operation. Processor is released.");
    v29.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v27 = std::runtime_error::runtime_error(exception, &v29);
    v27->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v27, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v29.__vftable = v30;
  v30 = 0;
  (*(void (**)(std::unique_lock<std::mutex>::mutex_type *, uint64_t, std::runtime_error *))(v14->__m_.__sig + 56))(v14, a2, &v29);
  sub_20EE2D98C((uint64_t *)&v29);
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  sub_20EE2D98C((uint64_t *)&v30);
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v6 + 24);
  __lk.__owns_ = 1;
  std::mutex::lock(v8);
  std::__assoc_sub_state::__sub_wait((std::__assoc_sub_state *)v6, &__lk);
  v17 = *(_QWORD *)(v6 + 16);
  v29.__vftable = 0;
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&v29);
  if (v17)
  {
    std::exception_ptr::exception_ptr((std::exception_ptr *)&v29, (const std::exception_ptr *)(v6 + 16));
    v28.__ptr_ = &v29;
    std::rethrow_exception(v28);
    __break(1u);
  }
  else
  {
    v19 = *(_QWORD **)(v6 + 144);
    v18 = *(std::__shared_weak_count **)(v6 + 152);
    *(_QWORD *)(v6 + 144) = 0;
    *(_QWORD *)(v6 + 152) = 0;
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
    do
      v20 = __ldaxr(v7);
    while (__stlxr(v20 - 1, v7));
    if (!v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    v21 = v19[1];
    *a3 = *v19;
    a3[1] = v21;
    if (v21)
    {
      v22 = (unint64_t *)(v21 + 8);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (v18)
    {
      v24 = (unint64_t *)&v18->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
}

void sub_20EE2AF2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, std::exception_ptr a13)
{
  uint64_t v13;
  unint64_t *v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  std::exception_ptr::~exception_ptr(&a11);
  std::runtime_error::~runtime_error(&a10);
  sub_20E86665C((uint64_t)&v18);
  do
    v16 = __ldaxr(v14);
  while (__stlxr(v16 - 1, v14));
  if (!v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
  sub_20EE2D98C(&v17);
  _Unwind_Resume(a1);
}

void sub_20EE2AF98(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  int v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  std::runtime_error *exception;
  std::runtime_error *v17;
  std::runtime_error v18;
  std::runtime_error_vtbl *v19;

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 248);
  v6 = operator new();
  *(_QWORD *)(v6 + 8) = 0;
  v7 = (unint64_t *)(v6 + 8);
  *(_QWORD *)(v6 + 24) = 850045863;
  *(_QWORD *)(v6 + 16) = 0;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 1018212795;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 124) = 0u;
  *(_QWORD *)v6 = &off_24C9EB280;
  v19 = (std::runtime_error_vtbl *)v6;
  std::mutex::lock((std::mutex *)(v6 + 24));
  v8 = *(_DWORD *)(v6 + 136);
  if ((v8 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v9 = __ldxr(v7);
  while (__stxr(v9 + 1, v7));
  *(_DWORD *)(v6 + 136) = v8 | 2;
  std::mutex::unlock((std::mutex *)(v6 + 24));
  v10 = *(std::__shared_weak_count **)(v5 + 448);
  if (!v10 || (v11 = std::__shared_weak_count::lock(v10)) == 0 || (v12 = *(_QWORD *)(v5 + 440)) == 0)
  {
    std::runtime_error::runtime_error(&v18, "ChannelInputWithPromise: Invalid operation. Processor is released.");
    v18.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v17 = std::runtime_error::runtime_error(exception, &v18);
    v17->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v17, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v18.__vftable = v19;
  v19 = 0;
  (*(void (**)(uint64_t, uint64_t, std::runtime_error *))(*(_QWORD *)v12 + 56))(v12, a2, &v18);
  sub_20EE2D3A8((uint64_t *)&v18);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  sub_20EE2D3A8((uint64_t *)&v19);
  sub_20EE2D4D0(a3, v6);
  do
    v15 = __ldaxr(v7);
  while (__stlxr(v15 - 1, v7));
  if (!v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
}

void sub_20EE2B18C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  sub_20EE2D3A8((uint64_t *)va);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  do
    v8 = __ldaxr(v4);
  while (__stlxr(v8 - 1, v4));
  if (!v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  sub_20EE2D3A8((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_20EE2B19C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v4;

  do
    v4 = __ldaxr(v2);
  while (__stlxr(v4 - 1, v2));
  if (!v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  _Unwind_Resume(exception_object);
}

void sub_20EE2B1CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  std::mutex *v13;

  std::mutex::unlock(v13);
  sub_20EE2D3A8(&a13);
  _Unwind_Resume(a1);
}

void sub_20EE2B1E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20EE2D3A8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20EE2B1FC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, std::__assoc_sub_state *a12, std::exception_ptr a13)
{
  uint64_t v13;
  std::__assoc_sub_state *v14;
  std::exception_ptr v15;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v14 = a12;
  if (a12)
  {
    std::exception_ptr::exception_ptr(&a13, &a11);
    v15.__ptr_ = &a13;
    std::__assoc_sub_state::set_exception(v14, v15);
    std::exception_ptr::~exception_ptr(&a13);
    std::exception_ptr::~exception_ptr(&a11);
    std::runtime_error::~runtime_error(&a10);
    if (!v13)
      JUMPOUT(0x20EE2B0CCLL);
    JUMPOUT(0x20EE2B09CLL);
  }
  sub_20E96CE78(3u);
}

void sub_20EE2B258(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, std::exception_ptr a13)
{
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  std::exception_ptr::~exception_ptr(&a11);
  std::runtime_error::~runtime_error(&a10);
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    JUMPOUT(0x20EE2B2B8);
  }
  JUMPOUT(0x20EE2B2D4);
}

void sub_20EE2B29C()
{
  uint64_t v0;

  if (v0)
    JUMPOUT(0x20EE2B2A4);
  JUMPOUT(0x20EE2B2D4);
}

void sub_20EE2B308(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  std::runtime_error_vtbl *v6;
  unint64_t *v7;
  unint64_t v8;
  std::runtime_error_vtbl *v9;
  unint64_t *v10;
  unint64_t v11;
  std::runtime_error_vtbl *v12;
  unint64_t *v13;
  unint64_t v14;
  std::runtime_error_vtbl *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::promise<void> *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::runtime_error *exception;
  std::runtime_error *v26;
  std::future<void> v27;
  std::runtime_error v28;
  int v29;
  char v30;
  std::runtime_error v31;
  std::promise<void> v32;

  v5 = *(_QWORD *)(a1 + 8);
  sub_20EE2DAB4((uint64_t *)&v31, (uint64_t *)(*(_QWORD *)(v5 + 248) + 1784), a2);
  v6 = v31.__vftable;
  v31.__vftable = 0;
  sub_20EE2D4D0((uint64_t)&v28, (uint64_t)v6);
  if (!v6)
    goto LABEL_11;
  v7 = (unint64_t *)&v6->~runtime_error_0;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
  {
    v9 = v31.__vftable;
    if (!v31.__vftable)
      goto LABEL_11;
  }
  else
  {
    (*((void (**)(std::runtime_error_vtbl *))v6->~runtime_error + 2))(v6);
    v9 = v31.__vftable;
    if (!v31.__vftable)
      goto LABEL_11;
  }
  v10 = (unint64_t *)&v9->~runtime_error_0;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
  {
LABEL_11:
    if (v30)
      goto LABEL_12;
LABEL_19:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
    std::runtime_error::runtime_error((std::runtime_error *)a3, &v28);
    *(_QWORD *)a3 = &off_24C9EDA58;
    *(_DWORD *)(a3 + 16) = v29;
    goto LABEL_33;
  }
  (*((void (**)(std::runtime_error_vtbl *))v9->~runtime_error + 2))(v9);
  if (!v30)
    goto LABEL_19;
LABEL_12:
  sub_20EE2DAB4((uint64_t *)&v31, (uint64_t *)(*(_QWORD *)(v5 + 168) + 440), a2);
  v12 = v31.__vftable;
  v31.__vftable = 0;
  sub_20EE2D4D0(a3, (uint64_t)v12);
  if (!v12)
    goto LABEL_24;
  v13 = (unint64_t *)&v12->~runtime_error_0;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (v14)
  {
    v15 = v31.__vftable;
    if (!v31.__vftable)
      goto LABEL_24;
  }
  else
  {
    (*((void (**)(std::runtime_error_vtbl *))v12->~runtime_error + 2))(v12);
    v15 = v31.__vftable;
    if (!v31.__vftable)
      goto LABEL_24;
  }
  v16 = (unint64_t *)&v15->~runtime_error_0;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    (*((void (**)(std::runtime_error_vtbl *))v15->~runtime_error + 2))(v15);
    if (!*(_BYTE *)(a3 + 24))
      goto LABEL_33;
    goto LABEL_25;
  }
LABEL_24:
  if (!*(_BYTE *)(a3 + 24))
    goto LABEL_33;
LABEL_25:
  v18 = *(_QWORD *)(v5 + 248);
  v19 = std::promise<void>::promise(&v32);
  std::promise<void>::get_future(v19);
  v20 = *(std::__shared_weak_count **)(v18 + 1456);
  if (!v20 || (v21 = std::__shared_weak_count::lock(v20)) == 0 || (v22 = *(_QWORD *)(v18 + 1448)) == 0)
  {
    std::runtime_error::runtime_error(&v31, "ChannelInputWithPromise: Invalid operation. Processor is released.");
    v31.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v26 = std::runtime_error::runtime_error(exception, &v31);
    v26->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v26, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v31.__vftable = (std::runtime_error_vtbl *)v32.__state_;
  v32.__state_ = 0;
  (*(void (**)(uint64_t, uint64_t, std::runtime_error *))(*(_QWORD *)v22 + 56))(v22, a2 + 24, &v31);
  MEMORY[0x212BC623C](&v31);
  p_shared_owners = (unint64_t *)&v21->__shared_owners_;
  do
    v24 = __ldaxr(p_shared_owners);
  while (__stlxr(v24 - 1, p_shared_owners));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  MEMORY[0x212BC623C](&v32);
  std::future<void>::get(&v27);
  std::future<void>::~future(&v27);
LABEL_33:
  if (!v30)
    ((void (*)(std::runtime_error *))v28.~runtime_error)(&v28);
}

void sub_20EE2B788(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  const char *v11;
  const char *imp;
  std::runtime_error_vtbl *v13;
  std::runtime_error *exception;
  std::runtime_error *v15;
  std::future<void> v16;
  std::runtime_error v17;
  int v18;
  std::promise<void> v19;
  std::runtime_error v20;
  int v21;
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 8);
  sub_20EE08CEC(v4 + 48, a2, (uint64_t)&v20);
  if (v22)
  {
    v5 = *(_QWORD *)(v4 + 248);
    std::promise<void>::promise(&v19);
    std::promise<void>::get_future(&v19);
    v6 = *(std::__shared_weak_count **)(v5 + 1288);
    if (!v6 || (v7 = std::__shared_weak_count::lock(v6)) == 0 || (v8 = *(_QWORD *)(v5 + 1280)) == 0)
    {
      std::runtime_error::runtime_error(&v17, "ChannelInputWithPromise: Invalid operation. Processor is released.");
      v17.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = std::runtime_error::runtime_error(exception, &v17);
      v15->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
      __cxa_throw(v15, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
    }
    v17.__vftable = (std::runtime_error_vtbl *)v19.__state_;
    v19.__state_ = 0;
    (*(void (**)(uint64_t, std::runtime_error *, std::runtime_error *))(*(_QWORD *)v8 + 56))(v8, &v20, &v17);
    MEMORY[0x212BC623C](&v17);
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    MEMORY[0x212BC623C](&v19);
    std::future<void>::get(&v16);
    std::future<void>::~future(&v16);
    *(_BYTE *)a3 = 1;
    *(_BYTE *)(a3 + 24) = 1;
    v11 = (const char *)v20.__vftable;
    if (v22)
      goto LABEL_10;
LABEL_17:
    (*(void (**)(std::runtime_error *))v11)(&v20);
    return;
  }
  std::runtime_error::runtime_error(&v17, &v20);
  v17.__vftable = (std::runtime_error_vtbl *)&off_24C9EDA58;
  v18 = v21;
  std::runtime_error::runtime_error((std::runtime_error *)a3, &v17);
  *(_QWORD *)a3 = &off_24C9EDA58;
  *(_DWORD *)(a3 + 16) = v18;
  *(_BYTE *)(a3 + 24) = 0;
  std::runtime_error::~runtime_error(&v17);
  v11 = (const char *)v20.__vftable;
  if (!v22)
    goto LABEL_17;
LABEL_10:
  if (v11)
  {
    imp = v20.__imp_.__imp_;
    v13 = (std::runtime_error_vtbl *)v11;
    if (v20.__imp_.__imp_ != v11)
    {
      do
      {
        if (*(imp - 1) < 0)
          operator delete(*((void **)imp - 3));
        imp -= 24;
      }
      while (imp != v11);
      v13 = v20.__vftable;
    }
    v20.__imp_.__imp_ = v11;
    operator delete(v13);
  }
}

void sub_20EE2BAFC(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v5;
  std::promise<void> *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::runtime_error *exception;
  std::runtime_error *v14;
  std::future<void> v15;
  std::runtime_error v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::promise<void> v19;

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 248);
  v6 = std::promise<void>::promise(&v19);
  std::promise<void>::get_future(v6);
  v17 = 0;
  v18 = 0;
  v7 = *(std::__shared_weak_count **)(v5 + 1624);
  if (!v7
    || (v8 = std::__shared_weak_count::lock(v7), (v18 = v8) == 0)
    || (v9 = v8, v10 = *(_QWORD *)(v5 + 1616), (v17 = v10) == 0))
  {
    std::runtime_error::runtime_error(&v16, "ChannelInputWithPromise: Invalid operation. Processor is released.");
    v16.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v14 = std::runtime_error::runtime_error(exception, &v16);
    v14->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v14, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v16.__vftable = (std::runtime_error_vtbl *)v19.__state_;
  v19.__state_ = 0;
  (*(void (**)(uint64_t, uint64_t, std::runtime_error *))(*(_QWORD *)v10 + 56))(v10, a2, &v16);
  MEMORY[0x212BC623C](&v16);
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  MEMORY[0x212BC623C](&v19);
  std::future<void>::get(&v15);
  std::future<void>::~future(&v15);
  *a3 = 1;
  a3[24] = 1;
}

void sub_20EE2BCE0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  std::runtime_error_vtbl *v4;
  unint64_t *v5;
  unint64_t v6;
  std::runtime_error_vtbl *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *imp;
  unint64_t *v23;
  unint64_t v24;
  void **v25;
  void **v26;
  void *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  void **v31;
  void **v32;
  void *v33;
  void **v34;
  void **v35;
  void *v36;
  uint64_t v37;
  std::runtime_error v38;
  int v39;
  std::runtime_error v40;
  void *__p;
  void **v42;
  char v43;
  void *v44;
  void **v45;
  void *v46;
  void **v47;
  char v48;

  v3 = *(_QWORD *)(a1 + 8);
  sub_20EE06E30(v3 + 48, (uint64_t)&v44);
  if (!v48)
  {
    *(_BYTE *)a2 = 1;
    *(_BYTE *)(a2 + 24) = 1;
    return;
  }
  sub_20EE2C340((uint64_t *)&v38, (uint64_t *)(*(_QWORD *)(v3 + 168) + 104), (uint64_t)&v44);
  v4 = v38.__vftable;
  v38.__vftable = 0;
  sub_20EE2C8BC((uint64_t)&v40, (uint64_t)v4);
  if (!v4)
    goto LABEL_11;
  v5 = (unint64_t *)&v4->~runtime_error_0;
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 - 1, v5));
  if (!v6)
    (*((void (**)(std::runtime_error_vtbl *))v4->~runtime_error + 2))(v4);
  v7 = v38.__vftable;
  if (!v38.__vftable)
    goto LABEL_11;
  v8 = (unint64_t *)&v38.~runtime_error_0;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    (*((void (**)(std::runtime_error_vtbl *))v7->~runtime_error + 2))(v7);
    if (v43)
    {
LABEL_12:
      sub_20EE2C9D8(&v37, (uint64_t *)(*(_QWORD *)(v3 + 248) + 104), (uint64_t)&v40);
      v10 = v37;
      v37 = 0;
      sub_20EE2CF00(&v38, v10);
      if (v10)
      {
        v11 = (unint64_t *)(v10 + 8);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
        v13 = v37;
        if (v37)
        {
          v14 = (unint64_t *)(v37 + 8);
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
            (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
        }
      }
      sub_20EE2CFC8(&v37, (uint64_t *)(*(_QWORD *)(v3 + 168) + 272), (uint64_t)&v38);
      v16 = v37;
      v37 = 0;
      sub_20EE2D4D0(a2, v16);
      if (v16)
      {
        v17 = (unint64_t *)(v16 + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
          (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
        v19 = v37;
        if (v37)
        {
          v20 = (unint64_t *)(v37 + 8);
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 - 1, v20));
          if (!v21)
            (*(void (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
        }
      }
      imp = (std::__shared_weak_count *)v38.__imp_.__imp_;
      if (v38.__imp_.__imp_)
      {
        v23 = (unint64_t *)(v38.__imp_.__imp_ + 8);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
          std::__shared_weak_count::__release_weak(imp);
        }
      }
      if (v43)
        goto LABEL_38;
      goto LABEL_55;
    }
  }
  else
  {
LABEL_11:
    if (v43)
      goto LABEL_12;
  }
  std::runtime_error::runtime_error(&v38, &v40);
  v38.__vftable = (std::runtime_error_vtbl *)&off_24C9EDA58;
  v39 = (int)__p;
  std::runtime_error::runtime_error((std::runtime_error *)a2, &v38);
  *(_QWORD *)a2 = &off_24C9EDA58;
  *(_DWORD *)(a2 + 16) = v39;
  *(_BYTE *)(a2 + 24) = 0;
  std::runtime_error::~runtime_error(&v38);
  if (v43)
  {
LABEL_38:
    v25 = (void **)__p;
    if (__p)
    {
      v26 = v42;
      v27 = __p;
      if (v42 != __p)
      {
        do
        {
          if (*((char *)v26 - 1) < 0)
            operator delete(*(v26 - 3));
          v26 -= 3;
        }
        while (v26 != v25);
        v27 = __p;
      }
      v42 = v25;
      operator delete(v27);
    }
    v28 = (std::__shared_weak_count *)v40.__imp_.__imp_;
    if (v40.__imp_.__imp_)
    {
      v29 = (unint64_t *)(v40.__imp_.__imp_ + 8);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    goto LABEL_56;
  }
LABEL_55:
  ((void (*)(std::runtime_error *))v40.~runtime_error)(&v40);
LABEL_56:
  if (v48)
  {
    v31 = (void **)v46;
    if (v46)
    {
      v32 = v47;
      v33 = v46;
      if (v47 != v46)
      {
        do
        {
          if (*((char *)v32 - 1) < 0)
            operator delete(*(v32 - 3));
          v32 -= 3;
        }
        while (v32 != v31);
        v33 = v46;
      }
      v47 = v31;
      operator delete(v33);
    }
    v34 = (void **)v44;
    if (v44)
    {
      v35 = v45;
      v36 = v44;
      if (v45 != v44)
      {
        do
        {
          if (*((char *)v35 - 1) < 0)
            operator delete(*(v35 - 3));
          v35 -= 3;
        }
        while (v35 != v34);
        v36 = v44;
      }
      v45 = v34;
      operator delete(v36);
    }
  }
}

void sub_20EE2C08C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unint64_t *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, void (**a14)(_QWORD), std::__shared_weak_count *a15, void **__p, void **a17, uint64_t a18, char a19, void **a20,void **a21,uint64_t a22,void **a23,void **a24,uint64_t a25,char a26)
{
  unint64_t *v26;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  void **v34;
  void **v35;
  void **v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  void **v40;
  void **v41;
  void **v42;
  void **v43;
  void **v44;
  void **v45;

  if (v26)
  {
    v28 = v26 + 1;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
      (*(void (**)(unint64_t *))(*v26 + 16))(v26);
    if (a10)
    {
      v30 = a10 + 1;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
        (*(void (**)(unint64_t *))(*a10 + 16))(a10);
    }
  }
  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  if (a19)
  {
    v34 = __p;
    if (__p)
    {
      v35 = a17;
      v36 = __p;
      if (a17 != __p)
      {
        do
        {
          if (*((char *)v35 - 1) < 0)
            operator delete(*(v35 - 3));
          v35 -= 3;
        }
        while (v35 != v34);
        v36 = __p;
      }
      a17 = v34;
      operator delete(v36);
    }
    v37 = a15;
    if (a15)
    {
      v38 = (unint64_t *)&a15->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
  }
  else
  {
    (*a14)(&a14);
  }
  if (a26)
  {
    v40 = a23;
    if (a23)
    {
      v41 = a24;
      v42 = a23;
      if (a24 != a23)
      {
        do
        {
          if (*((char *)v41 - 1) < 0)
            operator delete(*(v41 - 3));
          v41 -= 3;
        }
        while (v41 != v40);
        v42 = a23;
      }
      a24 = v40;
      operator delete(v42);
    }
    v43 = a20;
    if (a20)
    {
      v44 = a21;
      v45 = a20;
      if (a21 != a20)
      {
        do
        {
          if (*((char *)v44 - 1) < 0)
            operator delete(*(v44 - 3));
          v44 -= 3;
        }
        while (v44 != v43);
        v45 = a20;
      }
      a21 = v43;
      operator delete(v45);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20EE2C334(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t *sub_20EE2C340(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t *v7;
  int v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::runtime_error *exception;
  std::runtime_error *v18;
  std::runtime_error v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;

  v6 = operator new();
  *(_QWORD *)(v6 + 8) = 0;
  v7 = (unint64_t *)(v6 + 8);
  *(_QWORD *)(v6 + 24) = 850045863;
  *(_QWORD *)(v6 + 16) = 0;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 1018212795;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 124) = 0u;
  *(_QWORD *)v6 = &off_24C9EB1F0;
  v23 = v6;
  *a1 = v6;
  std::mutex::lock((std::mutex *)(v6 + 24));
  v8 = *(_DWORD *)(v6 + 136);
  if ((v8 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v9 = __ldxr(v7);
  while (__stxr(v9 + 1, v7));
  *(_DWORD *)(v6 + 136) = v8 | 2;
  std::mutex::unlock((std::mutex *)(v6 + 24));
  v21 = 0;
  v22 = 0;
  v10 = (std::__shared_weak_count *)a2[1];
  if (!v10
    || (v11 = std::__shared_weak_count::lock(v10), (v22 = v11) == 0)
    || (v12 = v11, v13 = *a2, (v21 = v13) == 0))
  {
    std::runtime_error::runtime_error(&v19, "ChannelInputWithPromise: Invalid operation. Processor is released.");
    v19.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v18 = std::runtime_error::runtime_error(exception, &v19);
    v18->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v18, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v20 = v23;
  v23 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v13 + 56))(v13, a3, &v20);
  sub_20EE2C794(&v20);
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  return sub_20EE2C794(&v23);
}

void sub_20EE2C4F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  unint64_t *v4;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  va_list va2;

  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  sub_20EE2C794((uint64_t *)va);
  sub_20E86665C((uint64_t)va1);
  v6 = v4 + 1;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
    (*(void (**)(unint64_t *))(*v4 + 16))(v4);
  sub_20EE2C794((uint64_t *)va2);
  _Unwind_Resume(a1);
}

void sub_20EE2C504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  std::mutex *v15;

  std::mutex::unlock(v15);
  sub_20EE2C794(&a15);
  _Unwind_Resume(a1);
}

void sub_20EE2C520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20EE2C794((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20EE2C534(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__assoc_sub_state *a14, std::exception_ptr a15)
{
  std::__assoc_sub_state *v15;
  std::exception_ptr v16;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v15 = a14;
  if (a14)
  {
    std::exception_ptr::exception_ptr(&a15, &a10);
    v16.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v15, v16);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a10);
    std::runtime_error::~runtime_error(&a9);
    if (!a13)
      JUMPOUT(0x20EE2C480);
    JUMPOUT(0x20EE2C450);
  }
  sub_20E96CE78(3u);
}

void sub_20EE2C594(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, std::exception_ptr a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t *v15;
  uint64_t v16;

  std::exception_ptr::~exception_ptr(&a10);
  std::runtime_error::~runtime_error(&a9);
  v16 = *v15;
  sub_20E86665C((uint64_t)&a12);
  if (!v16)
    JUMPOUT(0x20EE2C604);
  JUMPOUT(0x20EE2C5DCLL);
}

void sub_20EE2C614(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_20EE2C660(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE2C6C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  if ((*(_BYTE *)(a1 + 136) & 1) != 0)
  {
    if (*(_BYTE *)(a1 + 184))
    {
      v2 = *(_QWORD *)(a1 + 160);
      if (v2)
      {
        v3 = *(_QWORD *)(a1 + 168);
        v4 = *(void **)(a1 + 160);
        if (v3 != v2)
        {
          do
          {
            if (*(char *)(v3 - 1) < 0)
              operator delete(*(void **)(v3 - 24));
            v3 -= 24;
          }
          while (v3 != v2);
          v4 = *(void **)(a1 + 160);
        }
        *(_QWORD *)(a1 + 168) = v2;
        operator delete(v4);
      }
      v5 = *(std::__shared_weak_count **)(a1 + 152);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
    else
    {
      (**(void (***)(uint64_t))(a1 + 144))(a1 + 144);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

uint64_t *sub_20EE2C794(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x212BC5AF8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20EE2C880(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, std::logic_error a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::logic_error::~logic_error(&a11);
  JUMPOUT(0x20EE2C7DCLL);
}

void sub_20EE2C8BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const std::runtime_error *v5;
  int v6;
  uint64_t v7;
  std::exception_ptr v8;
  std::exception_ptr v9;
  std::exception_ptr v10;
  std::unique_lock<std::mutex> __lk;

  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a2 + 24);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a2 + 24));
  std::__assoc_sub_state::__sub_wait((std::__assoc_sub_state *)a2, &__lk);
  v4 = *(_QWORD *)(a2 + 16);
  v10.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v10);
  if (v4)
  {
    std::exception_ptr::exception_ptr(&v9, (const std::exception_ptr *)(a2 + 16));
    v8.__ptr_ = &v9;
    std::rethrow_exception(v8);
    __break(1u);
    return;
  }
  v5 = (const std::runtime_error *)(a2 + 144);
  *(_BYTE *)a1 = 0;
  v6 = *(unsigned __int8 *)(a2 + 184);
  *(_BYTE *)(a1 + 40) = v6;
  if (v6)
  {
    v7 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)a1 = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 8) = v7;
    v5->__vftable = 0;
    *(_QWORD *)(a2 + 152) = 0;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a2 + 160) = 0;
    *(_QWORD *)(a2 + 168) = 0;
    *(_QWORD *)(a2 + 176) = 0;
    if (!__lk.__owns_)
      return;
    goto LABEL_4;
  }
  std::runtime_error::runtime_error((std::runtime_error *)a1, v5);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 160);
  *(_QWORD *)a1 = &off_24C9EDA58;
  if (__lk.__owns_)
LABEL_4:
    std::mutex::unlock(__lk.__m_);
}

void sub_20EE2C9AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12)
{
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  if (a12)
    std::mutex::unlock(a11);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EE2C9D8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t *v7;
  int v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::runtime_error *exception;
  std::runtime_error *v18;
  std::runtime_error v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;

  v6 = operator new();
  *(_QWORD *)(v6 + 8) = 0;
  v7 = (unint64_t *)(v6 + 8);
  *(_QWORD *)(v6 + 24) = 850045863;
  *(_QWORD *)(v6 + 16) = 0;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 1018212795;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 124) = 0u;
  *(_QWORD *)v6 = &off_24C9EB238;
  v23 = v6;
  *a1 = v6;
  std::mutex::lock((std::mutex *)(v6 + 24));
  v8 = *(_DWORD *)(v6 + 136);
  if ((v8 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v9 = __ldxr(v7);
  while (__stxr(v9 + 1, v7));
  *(_DWORD *)(v6 + 136) = v8 | 2;
  std::mutex::unlock((std::mutex *)(v6 + 24));
  v21 = 0;
  v22 = 0;
  v10 = (std::__shared_weak_count *)a2[1];
  if (!v10
    || (v11 = std::__shared_weak_count::lock(v10), (v22 = v11) == 0)
    || (v12 = v11, v13 = *a2, (v21 = v13) == 0))
  {
    std::runtime_error::runtime_error(&v19, "ChannelInputWithPromise: Invalid operation. Processor is released.");
    v19.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v18 = std::runtime_error::runtime_error(exception, &v19);
    v18->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v18, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v20 = v23;
  v23 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v13 + 56))(v13, a3, &v20);
  sub_20EE2CDD8(&v20);
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  return sub_20EE2CDD8(&v23);
}

void sub_20EE2CB8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  unint64_t *v4;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  va_list va2;

  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  sub_20EE2CDD8((uint64_t *)va);
  sub_20E86665C((uint64_t)va1);
  v6 = v4 + 1;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
    (*(void (**)(unint64_t *))(*v4 + 16))(v4);
  sub_20EE2CDD8((uint64_t *)va2);
  _Unwind_Resume(a1);
}

void sub_20EE2CB9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  std::mutex *v15;

  std::mutex::unlock(v15);
  sub_20EE2CDD8(&a15);
  _Unwind_Resume(a1);
}

void sub_20EE2CBB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20EE2CDD8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20EE2CBCC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__assoc_sub_state *a14, std::exception_ptr a15)
{
  std::__assoc_sub_state *v15;
  std::exception_ptr v16;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v15 = a14;
  if (a14)
  {
    std::exception_ptr::exception_ptr(&a15, &a10);
    v16.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v15, v16);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a10);
    std::runtime_error::~runtime_error(&a9);
    if (!a13)
      JUMPOUT(0x20EE2CB18);
    JUMPOUT(0x20EE2CAE8);
  }
  sub_20E96CE78(3u);
}

void sub_20EE2CC2C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, std::exception_ptr a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t *v15;
  uint64_t v16;

  std::exception_ptr::~exception_ptr(&a10);
  std::runtime_error::~runtime_error(&a9);
  v16 = *v15;
  sub_20E86665C((uint64_t)&a12);
  if (!v16)
    JUMPOUT(0x20EE2CC9CLL);
  JUMPOUT(0x20EE2CC74);
}

void sub_20EE2CCAC(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_20EE2CCF8(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE2CD58(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if ((*(_BYTE *)(a1 + 136) & 1) == 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  v2 = *(std::__shared_weak_count **)(a1 + 152);
  if (!v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

uint64_t *sub_20EE2CDD8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x212BC5AF8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20EE2CEC4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, std::logic_error a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::logic_error::~logic_error(&a11);
  JUMPOUT(0x20EE2CE20);
}

void sub_20EE2CF00(_OWORD *a1, uint64_t a2)
{
  uint64_t v4;
  std::exception_ptr v5;
  std::exception_ptr v6;
  std::exception_ptr v7;
  std::unique_lock<std::mutex> __lk;

  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a2 + 24);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a2 + 24));
  std::__assoc_sub_state::__sub_wait((std::__assoc_sub_state *)a2, &__lk);
  v4 = *(_QWORD *)(a2 + 16);
  v7.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v7);
  if (v4)
  {
    std::exception_ptr::exception_ptr(&v6, (const std::exception_ptr *)(a2 + 16));
    v5.__ptr_ = &v6;
    std::rethrow_exception(v5);
    __break(1u);
  }
  else
  {
    *a1 = *(_OWORD *)(a2 + 144);
    *(_QWORD *)(a2 + 144) = 0;
    *(_QWORD *)(a2 + 152) = 0;
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
  }
}

void sub_20EE2CF9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12)
{
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  if (a12)
    std::mutex::unlock(a11);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EE2CFC8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t *v7;
  int v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::runtime_error *exception;
  std::runtime_error *v18;
  std::runtime_error v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;

  v6 = operator new();
  *(_QWORD *)(v6 + 8) = 0;
  v7 = (unint64_t *)(v6 + 8);
  *(_QWORD *)(v6 + 24) = 850045863;
  *(_QWORD *)(v6 + 16) = 0;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 1018212795;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 124) = 0u;
  *(_QWORD *)v6 = &off_24C9EB280;
  v23 = v6;
  *a1 = v6;
  std::mutex::lock((std::mutex *)(v6 + 24));
  v8 = *(_DWORD *)(v6 + 136);
  if ((v8 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v9 = __ldxr(v7);
  while (__stxr(v9 + 1, v7));
  *(_DWORD *)(v6 + 136) = v8 | 2;
  std::mutex::unlock((std::mutex *)(v6 + 24));
  v21 = 0;
  v22 = 0;
  v10 = (std::__shared_weak_count *)a2[1];
  if (!v10
    || (v11 = std::__shared_weak_count::lock(v10), (v22 = v11) == 0)
    || (v12 = v11, v13 = *a2, (v21 = v13) == 0))
  {
    std::runtime_error::runtime_error(&v19, "ChannelInputWithPromise: Invalid operation. Processor is released.");
    v19.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v18 = std::runtime_error::runtime_error(exception, &v19);
    v18->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v18, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v20 = v23;
  v23 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v13 + 56))(v13, a3, &v20);
  sub_20EE2D3A8(&v20);
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  return sub_20EE2D3A8(&v23);
}

void sub_20EE2D17C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  unint64_t *v4;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  va_list va2;

  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  sub_20EE2D3A8((uint64_t *)va);
  sub_20E86665C((uint64_t)va1);
  v6 = v4 + 1;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
    (*(void (**)(unint64_t *))(*v4 + 16))(v4);
  sub_20EE2D3A8((uint64_t *)va2);
  _Unwind_Resume(a1);
}

void sub_20EE2D18C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  std::mutex *v15;

  std::mutex::unlock(v15);
  sub_20EE2D3A8(&a15);
  _Unwind_Resume(a1);
}

void sub_20EE2D1A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20EE2D3A8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20EE2D1BC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__assoc_sub_state *a14, std::exception_ptr a15)
{
  std::__assoc_sub_state *v15;
  std::exception_ptr v16;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v15 = a14;
  if (a14)
  {
    std::exception_ptr::exception_ptr(&a15, &a10);
    v16.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v15, v16);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a10);
    std::runtime_error::~runtime_error(&a9);
    if (!a13)
      JUMPOUT(0x20EE2D108);
    JUMPOUT(0x20EE2D0D8);
  }
  sub_20E96CE78(3u);
}

void sub_20EE2D21C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, std::exception_ptr a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t *v15;
  uint64_t v16;

  std::exception_ptr::~exception_ptr(&a10);
  std::runtime_error::~runtime_error(&a9);
  v16 = *v15;
  sub_20E86665C((uint64_t)&a12);
  if (!v16)
    JUMPOUT(0x20EE2D28CLL);
  JUMPOUT(0x20EE2D264);
}

void sub_20EE2D29C(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_20EE2D2E8(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE2D348(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 136) & 1) == 0 || *(_BYTE *)(a1 + 168))
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  (**(void (***)(uint64_t))(a1 + 144))(a1 + 144);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

uint64_t *sub_20EE2D3A8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x212BC5AF8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20EE2D494(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, std::logic_error a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::logic_error::~logic_error(&a11);
  JUMPOUT(0x20EE2D3F0);
}

void sub_20EE2D4D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const std::runtime_error *v5;
  int v6;
  std::exception_ptr v7;
  std::exception_ptr v8;
  std::exception_ptr v9;
  std::unique_lock<std::mutex> __lk;

  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a2 + 24);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a2 + 24));
  std::__assoc_sub_state::__sub_wait((std::__assoc_sub_state *)a2, &__lk);
  v4 = *(_QWORD *)(a2 + 16);
  v9.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v9);
  if (v4)
  {
    std::exception_ptr::exception_ptr(&v8, (const std::exception_ptr *)(a2 + 16));
    v7.__ptr_ = &v8;
    std::rethrow_exception(v7);
    __break(1u);
    return;
  }
  v5 = (const std::runtime_error *)(a2 + 144);
  *(_BYTE *)a1 = 0;
  v6 = *(unsigned __int8 *)(a2 + 168);
  *(_BYTE *)(a1 + 24) = v6;
  if (v6)
  {
    *(_BYTE *)a1 = v5->__vftable;
    if (!__lk.__owns_)
      return;
    goto LABEL_4;
  }
  std::runtime_error::runtime_error((std::runtime_error *)a1, v5);
  *(_QWORD *)a1 = &off_24C9EDA58;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 160);
  if (__lk.__owns_)
LABEL_4:
    std::mutex::unlock(__lk.__m_);
}

void sub_20EE2D5A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12)
{
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  if (a12)
    std::mutex::unlock(a11);
  _Unwind_Resume(a1);
}

void sub_20EE2D5D0(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_20EE2D61C(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE2D67C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if ((*(_BYTE *)(a1 + 136) & 1) == 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  if (*(_BYTE *)(a1 + 440))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 432);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  if (!*(_BYTE *)(a1 + 184) || (*(char *)(a1 + 183) & 0x80000000) == 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  operator delete(*(void **)(a1 + 160));
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

void sub_20EE2D71C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = *(std::__shared_weak_count **)(a2 + 336);
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    if (!*(_BYTE *)(a2 + 296))
      goto LABEL_12;
  }
  else
  {
LABEL_5:
    if (!*(_BYTE *)(a2 + 296))
      goto LABEL_12;
  }
  v6 = *(std::__shared_weak_count **)(a2 + 288);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
LABEL_12:
  if (*(_BYTE *)(a2 + 40))
  {
    if (*(char *)(a2 + 39) < 0)
      operator delete(*(void **)(a2 + 16));
  }
}

void sub_20EE2D7DC(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  if (!*(_BYTE *)(a2 + 296))
    goto LABEL_6;
  v3 = *(std::__shared_weak_count **)(a2 + 288);
  if (!v3)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    if (!*(_BYTE *)(a2 + 40))
      return;
  }
  else
  {
LABEL_6:
    if (!*(_BYTE *)(a2 + 40))
      return;
  }
  if (*(char *)(a2 + 39) < 0)
    operator delete(*(void **)(a2 + 16));
}

void sub_20EE2D860(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_20EE2D8AC(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE2D90C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if ((*(_BYTE *)(a1 + 136) & 1) == 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  v2 = *(std::__shared_weak_count **)(a1 + 152);
  if (!v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

uint64_t *sub_20EE2D98C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x212BC5AF8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20EE2DA78(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, std::logic_error a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::logic_error::~logic_error(&a11);
  JUMPOUT(0x20EE2D9D4);
}

uint64_t *sub_20EE2DAB4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t *v7;
  int v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::runtime_error *exception;
  std::runtime_error *v18;
  std::runtime_error v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;

  v6 = operator new();
  *(_QWORD *)(v6 + 8) = 0;
  v7 = (unint64_t *)(v6 + 8);
  *(_QWORD *)(v6 + 24) = 850045863;
  *(_QWORD *)(v6 + 16) = 0;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 1018212795;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 124) = 0u;
  *(_QWORD *)v6 = &off_24C9EB280;
  v23 = v6;
  *a1 = v6;
  std::mutex::lock((std::mutex *)(v6 + 24));
  v8 = *(_DWORD *)(v6 + 136);
  if ((v8 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v9 = __ldxr(v7);
  while (__stxr(v9 + 1, v7));
  *(_DWORD *)(v6 + 136) = v8 | 2;
  std::mutex::unlock((std::mutex *)(v6 + 24));
  v21 = 0;
  v22 = 0;
  v10 = (std::__shared_weak_count *)a2[1];
  if (!v10
    || (v11 = std::__shared_weak_count::lock(v10), (v22 = v11) == 0)
    || (v12 = v11, v13 = *a2, (v21 = v13) == 0))
  {
    std::runtime_error::runtime_error(&v19, "ChannelInputWithPromise: Invalid operation. Processor is released.");
    v19.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v18 = std::runtime_error::runtime_error(exception, &v19);
    v18->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v18, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v20 = v23;
  v23 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v13 + 56))(v13, a3, &v20);
  sub_20EE2D3A8(&v20);
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  return sub_20EE2D3A8(&v23);
}

void sub_20EE2DC68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  unint64_t *v4;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  va_list va2;

  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  sub_20EE2D3A8((uint64_t *)va);
  sub_20E86665C((uint64_t)va1);
  v6 = v4 + 1;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
    (*(void (**)(unint64_t *))(*v4 + 16))(v4);
  sub_20EE2D3A8((uint64_t *)va2);
  _Unwind_Resume(a1);
}

void sub_20EE2DC78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  std::mutex *v15;

  std::mutex::unlock(v15);
  sub_20EE2D3A8(&a15);
  _Unwind_Resume(a1);
}

void sub_20EE2DC94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20EE2D3A8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20EE2DCA8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__assoc_sub_state *a14, std::exception_ptr a15)
{
  std::__assoc_sub_state *v15;
  std::exception_ptr v16;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v15 = a14;
  if (a14)
  {
    std::exception_ptr::exception_ptr(&a15, &a10);
    v16.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v15, v16);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a10);
    std::runtime_error::~runtime_error(&a9);
    if (!a13)
      JUMPOUT(0x20EE2DBF4);
    JUMPOUT(0x20EE2DBC4);
  }
  sub_20E96CE78(3u);
}

void sub_20EE2DD08(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, std::exception_ptr a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t *v15;
  uint64_t v16;

  std::exception_ptr::~exception_ptr(&a10);
  std::runtime_error::~runtime_error(&a9);
  v16 = *v15;
  sub_20E86665C((uint64_t)&a12);
  if (!v16)
    JUMPOUT(0x20EE2DD78);
  JUMPOUT(0x20EE2DD50);
}

char *sub_20EE2DD88(char *__dst, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v8;
  __int128 v9;
  char v10;
  char *v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  char v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v26;
  unint64_t v27;
  unint64_t *p_shared_weak_owners;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  void *v40;
  char *v41;
  unint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  unint64_t *v68;
  unint64_t v69;
  __int128 v70;
  unint64_t *v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  std::__shared_weak_count *v79;
  unint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  __int128 v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t *v106;
  unint64_t v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t v118;
  char *v119;
  unint64_t *v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  void *v164;
  void *v165;
  uint64_t v166;
  uint64_t v167;
  void *v168;
  char v169;
  char v170;
  char v171;
  char *v172;
  char *v173;
  std::__shared_weak_count *v174;
  void *__p[3];
  uint64_t v176;
  __int128 v177;
  uint64_t v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  uint64_t v182;
  __int128 v183;
  __int128 v184;
  void *__dsta[7];
  __int128 v186;
  __int128 v187;
  uint64_t (**v188)();
  __int128 v189;
  uint64_t v190;
  uint64_t (**v191)();
  __int128 v192;
  uint64_t (**v193)();
  __int128 v194;
  char *v195;
  std::__shared_weak_count *v196;
  _QWORD *v197;
  std::__shared_weak_count *v198;
  _QWORD v199[7];
  __int128 v200;
  __int128 v201;
  uint64_t (**v202)();
  __int128 v203;
  uint64_t v204;
  uint64_t (**v205)();
  __int128 v206;
  uint64_t (**v207)();
  __int128 v208;
  _QWORD *v209;
  std::__shared_weak_count *v210;
  char *v211;
  std::__shared_weak_count *v212;
  void *v213[3];
  uint64_t v214;
  std::__shared_weak_count *v215;
  _QWORD *v216;
  std::__shared_weak_count *v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  _QWORD v222[2];
  _QWORD v223[2];
  _QWORD v224[2];
  _QWORD v225[5];

  v225[2] = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_20E860C04(__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    v8 = *(_OWORD *)a2;
    *((_QWORD *)__dst + 2) = *(_QWORD *)(a2 + 16);
    *(_OWORD *)__dst = v8;
  }
  v9 = *(_OWORD *)(a2 + 24);
  v10 = *(_BYTE *)(a2 + 40);
  __dst[48] = 0;
  __dst[40] = v10;
  *(_OWORD *)(__dst + 24) = v9;
  __dst[88] = 0;
  v172 = __dst;
  v11 = (char *)operator new(0x130uLL);
  *((_QWORD *)v11 + 1) = 0;
  v12 = (unint64_t *)(v11 + 8);
  *((_QWORD *)v11 + 2) = 0;
  *(_QWORD *)v11 = &off_24C9EB368;
  sub_20EE0AD28((uint64_t)(v11 + 24), a2, *(_BYTE *)(a2 + 24), a4);
  v173 = v11 + 24;
  v174 = (std::__shared_weak_count *)v11;
  *((_QWORD *)__dst + 12) = &off_24C9EB3B8;
  v167 = a2;
  if (v11[215] < 0)
  {
    sub_20E860C04(__dst + 104, *((void **)v11 + 24), *((_QWORD *)v11 + 25));
  }
  else
  {
    *(_OWORD *)(__dst + 104) = *((_OWORD *)v11 + 12);
    *((_QWORD *)__dst + 15) = *((_QWORD *)v11 + 26);
  }
  v166 = a3;
  if (v11[239] < 0)
  {
    sub_20E860C04(__dst + 128, *((void **)v11 + 27), *((_QWORD *)v11 + 28));
  }
  else
  {
    *((_OWORD *)__dst + 8) = *(_OWORD *)(v11 + 216);
    *((_QWORD *)__dst + 18) = *((_QWORD *)v11 + 29);
  }
  *((_QWORD *)__dst + 19) = 0;
  *((_QWORD *)__dst + 20) = 0;
  v13 = (unint64_t *)operator new(0x58uLL);
  v13[1] = 0;
  v14 = v13 + 1;
  v13[2] = 0;
  *v13 = (unint64_t)&unk_24C9B6A90;
  v15 = v13 + 3;
  MEMORY[0x212BC5E10](v13 + 3);
  v209 = v13 + 3;
  v210 = (std::__shared_weak_count *)v13;
  v197 = v13 + 3;
  v198 = (std::__shared_weak_count *)v13;
  do
    v16 = __ldxr(v14);
  while (__stxr(v16 + 1, v14));
  v195 = v11 + 24;
  v196 = (std::__shared_weak_count *)v11;
  do
    v17 = __ldxr(v12);
  while (__stxr(v17 + 1, v12));
  if (v11[55] < 0)
  {
    sub_20E860C04(__dsta, *((void **)v11 + 4), *((_QWORD *)v11 + 5));
  }
  else
  {
    *(_OWORD *)__dsta = *((_OWORD *)v11 + 2);
    __dsta[2] = *((void **)v11 + 6);
  }
  if (v11[79] < 0)
  {
    sub_20E860C04(__p, *((void **)v11 + 7), *((_QWORD *)v11 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(v11 + 56);
    __p[2] = *((void **)v11 + 9);
  }
  v198 = 0;
  v197 = 0;
  v211 = v11 + 24;
  v212 = (std::__shared_weak_count *)v11;
  do
    v18 = __ldxr(v12);
  while (__stxr(v18 + 1, v12));
  v168 = __dsta[0];
  *(void **)&v219 = __dsta[1];
  *(void **)((char *)&v219 + 7) = *(void **)((char *)&__dsta[1] + 7);
  v170 = HIBYTE(__dsta[2]);
  memset(__dsta, 0, 24);
  v19 = __p[0];
  v225[0] = __p[1];
  *(void **)((char *)v225 + 7) = *(void **)((char *)&__p[1] + 7);
  v20 = HIBYTE(__p[2]);
  memset(__p, 0, sizeof(__p));
  v215 = 0;
  v214 = 0;
  *(_QWORD *)&v220 = 0;
  *(_QWORD *)((char *)&v220 + 7) = 0;
  *(_QWORD *)&v218 = v13 + 3;
  *((_QWORD *)&v218 + 1) = v13;
  v216 = 0;
  v217 = 0;
  v21 = (char *)operator new();
  *(_QWORD *)&v221 = v220;
  *(_QWORD *)((char *)&v221 + 7) = *(_QWORD *)((char *)&v220 + 7);
  *(_QWORD *)&v220 = 0;
  *(_QWORD *)((char *)&v220 + 7) = 0;
  v218 = 0uLL;
  v21[8] = 1;
  *((_QWORD *)v21 + 4) = 0;
  *((_QWORD *)v21 + 5) = 0;
  *(_QWORD *)v21 = &off_24C9EB600;
  *((_QWORD *)v21 + 2) = &unk_24C9EB678;
  *((_QWORD *)v21 + 3) = &unk_24C9EB6B8;
  v22 = v221;
  *(_QWORD *)(v21 + 63) = *(_QWORD *)((char *)&v221 + 7);
  *((_QWORD *)v21 + 6) = 0;
  *((_QWORD *)v21 + 7) = v22;
  v21[71] = 0;
  *(_QWORD *)&v221 = 0;
  *(_QWORD *)((char *)&v221 + 7) = 0;
  *((_QWORD *)v21 + 9) = v15;
  *((_QWORD *)v21 + 10) = v13;
  v213[1] = 0;
  v213[0] = 0;
  v23 = (_QWORD *)operator new();
  *v23 = &off_24C9EB7B0;
  v23[1] = v11 + 24;
  v23[2] = v11;
  v212 = 0;
  v211 = 0;
  *((_QWORD *)v21 + 11) = v23;
  *((_QWORD *)v21 + 12) = v21 + 96;
  *((_QWORD *)v21 + 13) = v21 + 96;
  *((_QWORD *)v21 + 14) = 0;
  *((_QWORD *)v21 + 15) = v21 + 120;
  *((_QWORD *)v21 + 16) = v21 + 120;
  *((_QWORD *)v21 + 17) = 0;
  v24 = (std::__shared_weak_count *)operator new();
  v24->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v24->__shared_owners_;
  v24->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9EB800;
  v24->__shared_weak_owners_ = 0;
  v24[1].__vftable = (std::__shared_weak_count_vtbl *)v21;
  v26 = (std::__shared_weak_count *)*((_QWORD *)v21 + 5);
  if (v26)
  {
    if (v26->__shared_owners_ != -1)
      goto LABEL_35;
    do
      v27 = __ldxr(p_shared_owners);
    while (__stxr(v27 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v24->__shared_weak_owners_;
    do
      v29 = __ldxr(p_shared_weak_owners);
    while (__stxr(v29 + 1, p_shared_weak_owners));
    *((_QWORD *)v21 + 4) = v21;
    *((_QWORD *)v21 + 5) = v24;
    std::__shared_weak_count::__release_weak(v26);
  }
  else
  {
    do
      v30 = __ldxr(p_shared_owners);
    while (__stxr(v30 + 1, p_shared_owners));
    v31 = (unint64_t *)&v24->__shared_weak_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
    *((_QWORD *)v21 + 4) = v21;
    *((_QWORD *)v21 + 5) = v24;
  }
  do
    v33 = __ldaxr(p_shared_owners);
  while (__stlxr(v33 - 1, p_shared_owners));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
LABEL_35:
  v34 = (std::__shared_weak_count *)v213[1];
  if (v213[1])
  {
    v35 = (unint64_t *)((char *)v213[1] + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v213[0] = v21;
  v213[1] = v24;
  v37 = (std::__shared_weak_count *)*((_QWORD *)&v218 + 1);
  if (*((_QWORD *)&v218 + 1))
  {
    v38 = (unint64_t *)(*((_QWORD *)&v218 + 1) + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v199[0] = &off_24C9EB3E8;
  v199[1] = v168;
  v199[2] = v219;
  *(_QWORD *)((char *)&v199[2] + 7) = *(_QWORD *)((char *)&v219 + 7);
  HIBYTE(v199[3]) = v170;
  *(_QWORD *)&v219 = 0;
  *(_QWORD *)((char *)&v219 + 7) = 0;
  v199[4] = v19;
  v199[5] = v225[0];
  *(_QWORD *)((char *)&v199[5] + 7) = *(_QWORD *)((char *)v225 + 7);
  HIBYTE(v199[6]) = v20;
  v225[0] = 0;
  *(_QWORD *)((char *)v225 + 7) = 0;
  v200 = 0uLL;
  v218 = 0uLL;
  v40 = v213[0];
  v41 = (char *)v213[1];
  v201 = *(_OWORD *)v213;
  v213[0] = 0;
  v213[1] = 0;
  if (*((_QWORD *)&v201 + 1))
  {
    v42 = (unint64_t *)(v41 + 16);
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
  }
  v202 = &off_24C9EB418;
  v44 = (_QWORD *)operator new();
  *v44 = &off_24C9EB850;
  v44[1] = v40;
  v44[2] = v41;
  *(_QWORD *)&v203 = v44;
  v46 = *((_QWORD *)&v201 + 1);
  v45 = v201;
  if (!*((_QWORD *)&v201 + 1))
  {
    *((_QWORD *)&v203 + 1) = v201;
    v204 = 0;
    if ((_QWORD)v201)
      v50 = v201 + 16;
    else
      v50 = 0;
    goto LABEL_65;
  }
  v47 = (unint64_t *)(*((_QWORD *)&v201 + 1) + 16);
  do
    v48 = __ldxr(v47);
  while (__stxr(v48 + 1, v47));
  v49 = *((_QWORD *)&v201 + 1);
  *((_QWORD *)&v203 + 1) = v45;
  v204 = v46;
  if ((_QWORD)v201)
    v50 = v201 + 16;
  else
    v50 = 0;
  if (!*((_QWORD *)&v201 + 1))
  {
    v45 = v201;
LABEL_65:
    v53 = 0;
    v205 = &off_24C9EB450;
    v206 = v50;
    goto LABEL_66;
  }
  v51 = (unint64_t *)(*((_QWORD *)&v201 + 1) + 16);
  do
    v52 = __ldxr(v51);
  while (__stxr(v52 + 1, v51));
  v53 = *((_QWORD *)&v201 + 1);
  v45 = v201;
  v205 = &off_24C9EB450;
  *(_QWORD *)&v206 = v50;
  *((_QWORD *)&v206 + 1) = v49;
  if (*((_QWORD *)&v201 + 1))
  {
    v54 = (unint64_t *)(*((_QWORD *)&v201 + 1) + 16);
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
  }
LABEL_66:
  if (v45)
    v56 = v45 + 24;
  else
    v56 = 0;
  v207 = &off_24C9B2310;
  *(_QWORD *)&v208 = v56;
  *((_QWORD *)&v208 + 1) = v53;
  v57 = v217;
  if (v217)
  {
    v58 = (unint64_t *)&v217->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  v60 = v212;
  if (v212)
  {
    v61 = (unint64_t *)&v212->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  v63 = v215;
  if (!v215)
    goto LABEL_83;
  v64 = (unint64_t *)&v215->__shared_owners_;
  do
    v65 = __ldaxr(v64);
  while (__stlxr(v65 - 1, v64));
  if (!v65)
  {
    ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
    std::__shared_weak_count::__release_weak(v63);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
    {
LABEL_84:
      if ((SHIBYTE(__dsta[2]) & 0x80000000) == 0)
        goto LABEL_85;
      goto LABEL_89;
    }
  }
  else
  {
LABEL_83:
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      goto LABEL_84;
  }
  operator delete(__p[0]);
  if ((SHIBYTE(__dsta[2]) & 0x80000000) == 0)
  {
LABEL_85:
    if (v195)
      goto LABEL_91;
    goto LABEL_90;
  }
LABEL_89:
  operator delete(__dsta[0]);
  if (v195)
    goto LABEL_91;
LABEL_90:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 534, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_91:
  *(_QWORD *)&v220 = v13 + 3;
  *((_QWORD *)&v220 + 1) = v13;
  do
    v66 = __ldxr(v14);
  while (__stxr(v66 + 1, v14));
  if (v173)
    v67 = v173 + 56;
  else
    v67 = 0;
  *(_QWORD *)&v219 = v67;
  *((_QWORD *)&v219 + 1) = v174;
  if (v174)
  {
    v68 = (unint64_t *)&v174->__shared_owners_;
    do
      v69 = __ldxr(v68);
    while (__stxr(v69 + 1, v68));
  }
  if (v67[31] < 0)
  {
    sub_20E860C04(__p, *((void **)v67 + 1), *((_QWORD *)v67 + 2));
  }
  else
  {
    v70 = *(_OWORD *)(v67 + 8);
    __p[2] = *((void **)v67 + 3);
    *(_OWORD *)__p = v70;
  }
  if (v173[111] < 0)
  {
    sub_20E860C04(v213, *((void **)v173 + 11), *((_QWORD *)v173 + 12));
  }
  else
  {
    *(_OWORD *)v213 = *(_OWORD *)(v173 + 88);
    v213[2] = *((void **)v173 + 13);
  }
  v220 = 0uLL;
  *(_QWORD *)&v221 = v67;
  *((_QWORD *)&v221 + 1) = v174;
  if (v174)
  {
    v71 = (unint64_t *)&v174->__shared_owners_;
    do
      v72 = __ldxr(v71);
    while (__stxr(v72 + 1, v71));
  }
  v73 = __p[0];
  v223[0] = __p[1];
  *(void **)((char *)v223 + 7) = *(void **)((char *)&__p[1] + 7);
  v171 = HIBYTE(__p[2]);
  memset(__p, 0, sizeof(__p));
  v164 = v213[0];
  v165 = v73;
  v222[0] = v213[1];
  *(void **)((char *)v222 + 7) = *(void **)((char *)&v213[1] + 7);
  v169 = HIBYTE(v213[2]);
  memset(v213, 0, sizeof(v213));
  v212 = 0;
  v211 = 0;
  v224[0] = 0;
  *(_QWORD *)((char *)v224 + 7) = 0;
  v216 = v13 + 3;
  v217 = (std::__shared_weak_count *)v13;
  v215 = 0;
  v214 = 0;
  v74 = operator new();
  v225[0] = v224[0];
  *(_QWORD *)((char *)v225 + 7) = *(_QWORD *)((char *)v224 + 7);
  v224[0] = 0;
  *(_QWORD *)((char *)v224 + 7) = 0;
  v216 = 0;
  v217 = 0;
  *(_BYTE *)(v74 + 8) = 1;
  *(_QWORD *)(v74 + 32) = 0;
  *(_QWORD *)(v74 + 40) = 0;
  *(_QWORD *)v74 = &off_24C9EB8C8;
  *(_QWORD *)(v74 + 16) = &unk_24C9EB940;
  *(_QWORD *)(v74 + 24) = &unk_24C9EB980;
  v75 = v225[0];
  *(_QWORD *)(v74 + 63) = *(_QWORD *)((char *)v225 + 7);
  *(_QWORD *)(v74 + 48) = 0;
  *(_QWORD *)(v74 + 56) = v75;
  *(_BYTE *)(v74 + 71) = 0;
  v225[0] = 0;
  *(_QWORD *)((char *)v225 + 7) = 0;
  *(_QWORD *)(v74 + 72) = v15;
  *(_QWORD *)(v74 + 80) = v13;
  v218 = 0uLL;
  v76 = (_QWORD *)operator new();
  *v76 = &off_24C9EBA78;
  v76[1] = v67;
  v76[2] = v174;
  v221 = 0uLL;
  *(_QWORD *)(v74 + 88) = v76;
  *(_QWORD *)(v74 + 96) = v74 + 96;
  *(_QWORD *)(v74 + 104) = v74 + 96;
  *(_QWORD *)(v74 + 112) = 0;
  *(_QWORD *)(v74 + 120) = v74 + 120;
  *(_QWORD *)(v74 + 128) = v74 + 120;
  *(_QWORD *)(v74 + 136) = 0;
  v77 = (std::__shared_weak_count *)operator new();
  v77->__shared_owners_ = 0;
  v78 = (unint64_t *)&v77->__shared_owners_;
  v77->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9EBAC8;
  v77->__shared_weak_owners_ = 0;
  v77[1].__vftable = (std::__shared_weak_count_vtbl *)v74;
  v79 = *(std::__shared_weak_count **)(v74 + 40);
  if (v79)
  {
    if (v79->__shared_owners_ != -1)
      goto LABEL_121;
    do
      v80 = __ldxr(v78);
    while (__stxr(v80 + 1, v78));
    v81 = (unint64_t *)&v77->__shared_weak_owners_;
    do
      v82 = __ldxr(v81);
    while (__stxr(v82 + 1, v81));
    *(_QWORD *)(v74 + 32) = v74;
    *(_QWORD *)(v74 + 40) = v77;
    std::__shared_weak_count::__release_weak(v79);
  }
  else
  {
    do
      v83 = __ldxr(v78);
    while (__stxr(v83 + 1, v78));
    v84 = (unint64_t *)&v77->__shared_weak_owners_;
    do
      v85 = __ldxr(v84);
    while (__stxr(v85 + 1, v84));
    *(_QWORD *)(v74 + 32) = v74;
    *(_QWORD *)(v74 + 40) = v77;
  }
  do
    v86 = __ldaxr(v78);
  while (__stlxr(v86 - 1, v78));
  if (!v86)
  {
    ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
    std::__shared_weak_count::__release_weak(v77);
  }
LABEL_121:
  v87 = (std::__shared_weak_count *)*((_QWORD *)&v218 + 1);
  if (*((_QWORD *)&v218 + 1))
  {
    v88 = (unint64_t *)(*((_QWORD *)&v218 + 1) + 8);
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  *(_QWORD *)&v218 = v74;
  *((_QWORD *)&v218 + 1) = v77;
  v90 = v217;
  if (v217)
  {
    v91 = (unint64_t *)&v217->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  __dsta[0] = &off_24C9EB4C0;
  __dsta[1] = v165;
  __dsta[2] = (void *)v223[0];
  *(void **)((char *)&__dsta[2] + 7) = *(void **)((char *)v223 + 7);
  HIBYTE(__dsta[3]) = v171;
  v223[0] = 0;
  *(_QWORD *)((char *)v223 + 7) = 0;
  __dsta[4] = v164;
  __dsta[5] = (void *)v222[0];
  *(void **)((char *)&__dsta[5] + 7) = *(void **)((char *)v222 + 7);
  HIBYTE(__dsta[6]) = v169;
  v222[0] = 0;
  *(_QWORD *)((char *)v222 + 7) = 0;
  v186 = 0uLL;
  v216 = 0;
  v217 = 0;
  v93 = v218;
  v187 = v218;
  v218 = 0uLL;
  if (*((_QWORD *)&v187 + 1))
  {
    v94 = (unint64_t *)(*((_QWORD *)&v93 + 1) + 16);
    do
      v95 = __ldxr(v94);
    while (__stxr(v95 + 1, v94));
  }
  v188 = &off_24C9EB4F0;
  v96 = operator new();
  *(_QWORD *)v96 = &off_24C9EBB18;
  *(_OWORD *)(v96 + 8) = v93;
  *(_QWORD *)&v189 = v96;
  v98 = *((_QWORD *)&v187 + 1);
  v97 = v187;
  if (!*((_QWORD *)&v187 + 1))
  {
    *((_QWORD *)&v189 + 1) = v187;
    v190 = 0;
    if ((_QWORD)v187)
      v102 = v187 + 16;
    else
      v102 = 0;
    goto LABEL_151;
  }
  v99 = (unint64_t *)(*((_QWORD *)&v187 + 1) + 16);
  do
    v100 = __ldxr(v99);
  while (__stxr(v100 + 1, v99));
  v101 = *((_QWORD *)&v187 + 1);
  *((_QWORD *)&v189 + 1) = v97;
  v190 = v98;
  if ((_QWORD)v187)
    v102 = v187 + 16;
  else
    v102 = 0;
  if (!*((_QWORD *)&v187 + 1))
  {
    v97 = v187;
LABEL_151:
    v105 = 0;
    v191 = &off_24C9EB528;
    v192 = v102;
    goto LABEL_152;
  }
  v103 = (unint64_t *)(*((_QWORD *)&v187 + 1) + 16);
  do
    v104 = __ldxr(v103);
  while (__stxr(v104 + 1, v103));
  v105 = *((_QWORD *)&v187 + 1);
  v97 = v187;
  v191 = &off_24C9EB528;
  *(_QWORD *)&v192 = v102;
  *((_QWORD *)&v192 + 1) = v101;
  if (*((_QWORD *)&v187 + 1))
  {
    v106 = (unint64_t *)(*((_QWORD *)&v187 + 1) + 16);
    do
      v107 = __ldxr(v106);
    while (__stxr(v107 + 1, v106));
  }
LABEL_152:
  if (v97)
    v108 = v97 + 24;
  else
    v108 = 0;
  v193 = &off_24C9B2310;
  *(_QWORD *)&v194 = v108;
  *((_QWORD *)&v194 + 1) = v105;
  v109 = v215;
  if (v215)
  {
    v110 = (unint64_t *)&v215->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  v112 = (std::__shared_weak_count *)*((_QWORD *)&v221 + 1);
  if (*((_QWORD *)&v221 + 1))
  {
    v113 = (unint64_t *)(*((_QWORD *)&v221 + 1) + 8);
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v115 = v212;
  if (!v212)
    goto LABEL_169;
  v116 = (unint64_t *)&v212->__shared_owners_;
  do
    v117 = __ldaxr(v116);
  while (__stlxr(v117 - 1, v116));
  if (!v117)
  {
    ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
    std::__shared_weak_count::__release_weak(v115);
    if ((SHIBYTE(v213[2]) & 0x80000000) == 0)
    {
LABEL_170:
      if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
        goto LABEL_171;
      goto LABEL_175;
    }
  }
  else
  {
LABEL_169:
    if ((SHIBYTE(v213[2]) & 0x80000000) == 0)
      goto LABEL_170;
  }
  operator delete(v213[0]);
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
LABEL_171:
    if ((_QWORD)v219)
      goto LABEL_177;
    goto LABEL_176;
  }
LABEL_175:
  operator delete(__p[0]);
  if ((_QWORD)v219)
    goto LABEL_177;
LABEL_176:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 534, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_177:
  v213[0] = v13 + 3;
  v213[1] = v13;
  do
    v118 = __ldxr(v14);
  while (__stxr(v118 + 1, v14));
  if (v173)
    v119 = v173 + 112;
  else
    v119 = 0;
  *(_QWORD *)&v218 = v119;
  *((_QWORD *)&v218 + 1) = v174;
  if (v174)
  {
    v120 = (unint64_t *)&v174->__shared_owners_;
    do
      v121 = __ldxr(v120);
    while (__stxr(v121 + 1, v120));
  }
  sub_20EE2F688((uint64_t)__p, (__int128 *)v213, &v218);
  v122 = operator new();
  *(_QWORD *)v122 = &off_24C9EB3E8;
  *(_OWORD *)(v122 + 8) = *(_OWORD *)&v199[1];
  *(_QWORD *)(v122 + 24) = v199[3];
  memset(&v199[1], 0, 24);
  *(_OWORD *)(v122 + 32) = *(_OWORD *)&v199[4];
  *(_QWORD *)(v122 + 48) = v199[6];
  memset(&v199[4], 0, 24);
  *(_OWORD *)(v122 + 56) = v200;
  v200 = 0uLL;
  *(_OWORD *)(v122 + 72) = v201;
  v201 = 0uLL;
  *(_QWORD *)(v122 + 88) = &off_24C9EB418;
  *(_OWORD *)(v122 + 96) = v203;
  v123 = v204;
  *((_QWORD *)&v203 + 1) = 0;
  v204 = 0;
  *(_QWORD *)(v122 + 112) = v123;
  *(_QWORD *)(v122 + 120) = &off_24C9EB450;
  *(_OWORD *)(v122 + 128) = v206;
  *(_QWORD *)&v203 = 0;
  v206 = 0uLL;
  *(_QWORD *)(v122 + 144) = &off_24C9B2310;
  *(_OWORD *)(v122 + 152) = v208;
  v208 = 0uLL;
  *(_QWORD *)(v122 + 168) = &off_24C9EB4C0;
  v124 = *(_OWORD *)&__dsta[1];
  *(void **)(v122 + 192) = __dsta[3];
  *(_OWORD *)(v122 + 176) = v124;
  memset(&__dsta[1], 0, 24);
  v125 = *(_OWORD *)&__dsta[4];
  *(void **)(v122 + 216) = __dsta[6];
  *(_OWORD *)(v122 + 200) = v125;
  memset(&__dsta[4], 0, 24);
  v126 = v186;
  v186 = 0uLL;
  v127 = v187;
  *(_OWORD *)(v122 + 224) = v126;
  *(_OWORD *)(v122 + 240) = v127;
  v187 = 0uLL;
  *(_QWORD *)(v122 + 256) = &off_24C9EB4F0;
  *(_OWORD *)(v122 + 264) = v189;
  v128 = v190;
  *((_QWORD *)&v189 + 1) = 0;
  v190 = 0;
  *(_QWORD *)(v122 + 280) = v128;
  *(_QWORD *)(v122 + 288) = &off_24C9EB528;
  *(_OWORD *)(v122 + 296) = v192;
  v192 = 0uLL;
  *(_QWORD *)&v189 = 0;
  *(_QWORD *)(v122 + 312) = &off_24C9B2310;
  *(_OWORD *)(v122 + 320) = v194;
  v194 = 0uLL;
  *(_QWORD *)(v122 + 336) = &off_24C9EB598;
  v129 = *(_OWORD *)&__p[1];
  *(_QWORD *)(v122 + 360) = v176;
  *(_OWORD *)(v122 + 344) = v129;
  __p[1] = 0;
  __p[2] = 0;
  v130 = v177;
  *(_QWORD *)(v122 + 384) = v178;
  *(_OWORD *)(v122 + 368) = v130;
  v176 = 0;
  v177 = 0uLL;
  v178 = 0;
  v131 = v179;
  v179 = 0uLL;
  v132 = v180;
  *(_OWORD *)(v122 + 392) = v131;
  *(_OWORD *)(v122 + 408) = v132;
  v180 = 0uLL;
  *(_QWORD *)(v122 + 424) = &off_24C9EB5C8;
  v133 = v181;
  v181 = 0uLL;
  *(_OWORD *)(v122 + 432) = v133;
  *(_QWORD *)(v122 + 448) = v182;
  *(_QWORD *)(v122 + 456) = &off_24C9EB528;
  *(_OWORD *)(v122 + 464) = v183;
  v182 = 0;
  v183 = 0uLL;
  *(_QWORD *)(v122 + 480) = &off_24C9B2310;
  *(_OWORD *)(v122 + 488) = v184;
  v184 = 0uLL;
  *((_QWORD *)__dst + 21) = v122;
  sub_20EE33F5C((uint64_t)__p);
  v134 = (std::__shared_weak_count *)*((_QWORD *)&v218 + 1);
  if (*((_QWORD *)&v218 + 1))
  {
    v135 = (unint64_t *)(*((_QWORD *)&v218 + 1) + 8);
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
  v137 = (std::__shared_weak_count *)v213[1];
  if (v213[1])
  {
    v138 = (unint64_t *)((char *)v213[1] + 8);
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
  sub_20EE34140((uint64_t)__dsta);
  v140 = (std::__shared_weak_count *)*((_QWORD *)&v219 + 1);
  if (*((_QWORD *)&v219 + 1))
  {
    v141 = (unint64_t *)(*((_QWORD *)&v219 + 1) + 8);
    do
      v142 = __ldaxr(v141);
    while (__stlxr(v142 - 1, v141));
    if (!v142)
    {
      ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
      std::__shared_weak_count::__release_weak(v140);
    }
  }
  v143 = (std::__shared_weak_count *)*((_QWORD *)&v220 + 1);
  if (*((_QWORD *)&v220 + 1))
  {
    v144 = (unint64_t *)(*((_QWORD *)&v220 + 1) + 8);
    do
      v145 = __ldaxr(v144);
    while (__stlxr(v145 - 1, v144));
    if (!v145)
    {
      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
      std::__shared_weak_count::__release_weak(v143);
    }
  }
  sub_20EE34324((uint64_t)v199);
  v146 = v196;
  if (v196)
  {
    v147 = (unint64_t *)&v196->__shared_owners_;
    do
      v148 = __ldaxr(v147);
    while (__stlxr(v148 - 1, v147));
    if (!v148)
    {
      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
      std::__shared_weak_count::__release_weak(v146);
    }
  }
  v149 = v198;
  if (v198)
  {
    v150 = (unint64_t *)&v198->__shared_owners_;
    do
      v151 = __ldaxr(v150);
    while (__stlxr(v151 - 1, v150));
    if (!v151)
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
    }
  }
  v152 = v210;
  if (v210)
  {
    v153 = (unint64_t *)&v210->__shared_owners_;
    do
      v154 = __ldaxr(v153);
    while (__stlxr(v154 - 1, v153));
    if (!v154)
    {
      ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
      std::__shared_weak_count::__release_weak(v152);
    }
  }
  if (v174)
  {
    v155 = (unint64_t *)&v174->__shared_owners_;
    do
      v156 = __ldaxr(v155);
    while (__stlxr(v156 - 1, v155));
    if (!v156)
    {
      ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
      std::__shared_weak_count::__release_weak(v174);
    }
  }
  v157 = (std::__shared_weak_count *)operator new(0x5C8uLL);
  v157->__shared_owners_ = 0;
  v158 = (unint64_t *)&v157->__shared_owners_;
  v157->__shared_weak_owners_ = 0;
  v157->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9EBE48;
  v199[0] = sub_20EE14A90((uint64_t)&v157[1], *(_QWORD *)(v167 + 32), v166);
  v199[1] = v157;
  __dsta[0] = 0;
  __dsta[1] = 0;
  *((_QWORD *)v172 + 22) = &off_24C9EBE98;
  if (SHIBYTE(v157[27].__shared_owners_) < 0)
  {
    sub_20E860C04(v172 + 184, (void *)v157[26].__shared_weak_owners_, (unint64_t)v157[27].__vftable);
  }
  else
  {
    *(_OWORD *)(v172 + 184) = *(_OWORD *)&v157[26].__shared_weak_owners_;
    *((_QWORD *)v172 + 25) = v157[27].__shared_owners_;
  }
  if (SHIBYTE(v157[28].__shared_owners_) < 0)
  {
    sub_20E860C04(v172 + 208, (void *)v157[27].__shared_weak_owners_, (unint64_t)v157[28].__vftable);
  }
  else
  {
    *((_OWORD *)v172 + 13) = *(_OWORD *)&v157[27].__shared_weak_owners_;
    *((_QWORD *)v172 + 28) = v157[28].__shared_owners_;
  }
  *((_QWORD *)v172 + 29) = 0;
  *((_QWORD *)v172 + 30) = 0;
  sub_20EE34558((uint64_t *)v172 + 31, v199);
  do
    v159 = __ldaxr(v158);
  while (__stlxr(v159 - 1, v158));
  if (!v159)
  {
    ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
    std::__shared_weak_count::__release_weak(v157);
  }
  v160 = (std::__shared_weak_count *)__dsta[1];
  if (__dsta[1])
  {
    v161 = (unint64_t *)((char *)__dsta[1] + 8);
    do
      v162 = __ldaxr(v161);
    while (__stlxr(v162 - 1, v161));
    if (!v162)
    {
      ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
      std::__shared_weak_count::__release_weak(v160);
    }
  }
  return v172;
}

void sub_20EE2F110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51)
{
  void **v51;

  if (*(char *)(a24 + 207) < 0)
    operator delete(*v51);
  sub_20E86665C((uint64_t)&STACK[0x218]);
  sub_20E86665C((uint64_t)&a51);
  sub_20EE45138(a9);
  sub_20EAFDBE8(a13);
  if (*(char *)(a24 + 23) < 0)
    operator delete(*(void **)a24);
  _Unwind_Resume(a1);
}

void sub_20EE2F5D8()
{
  std::__shared_weak_count *v0;
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(v0);
  operator delete(v1);
  JUMPOUT(0x20EE2F524);
}

void sub_20EE2F5EC()
{
  JUMPOUT(0x20EE2F524);
}

void sub_20EE2F5F4()
{
  std::__shared_weak_count *v0;
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(v0);
  operator delete(v1);
  JUMPOUT(0x20EE2F56CLL);
}

void sub_20EE2F608()
{
  JUMPOUT(0x20EE2F56CLL);
}

void sub_20EE2F614(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9EB368;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EE2F624(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9EB368;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE2F654(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_20EE2F664(uint64_t a1)
{
  sub_20EE45138(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE2F688(uint64_t a1, __int128 *a2, _QWORD *a3)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  void *v13;
  void *v14;
  char v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v22;
  unint64_t v23;
  unint64_t *p_shared_weak_owners;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  char v59;
  void *__p[4];
  void *__dst[5];
  std::__shared_weak_count *v62;
  __int128 v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  _QWORD v66[2];
  _QWORD v67[2];
  _QWORD v68[2];
  _QWORD v69[2];
  _QWORD v70[5];

  v70[2] = *MEMORY[0x24BDAC8D0];
  v6 = *a3;
  if (*(char *)(*a3 + 31) < 0)
  {
    sub_20E860C04(__dst, *(void **)(v6 + 8), *(_QWORD *)(v6 + 16));
    v6 = *a3;
    if ((*(char *)(*a3 + 55) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v7 = *(_OWORD *)(v6 + 8);
    __dst[2] = *(void **)(v6 + 24);
    *(_OWORD *)__dst = v7;
    if ((*(char *)(v6 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      *(_OWORD *)__p = *(_OWORD *)(v6 + 32);
      __p[2] = *(void **)(v6 + 48);
      goto LABEL_6;
    }
  }
  sub_20E860C04(__p, *(void **)(v6 + 32), *(_QWORD *)(v6 + 40));
LABEL_6:
  v8 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v9 = *a3;
  v10 = a3[1];
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = __dst[0];
  v68[0] = __dst[1];
  *(void **)((char *)v68 + 7) = *(void **)((char *)&__dst[1] + 7);
  v59 = HIBYTE(__dst[2]);
  memset(__dst, 0, 24);
  v14 = __p[0];
  *(void **)((char *)v67 + 7) = *(void **)((char *)&__p[1] + 7);
  v67[0] = __p[1];
  v15 = HIBYTE(__p[2]);
  memset(__p, 0, 24);
  v69[0] = 0;
  *(_QWORD *)((char *)v69 + 7) = 0;
  *(_QWORD *)((char *)v66 + 7) = 0;
  v66[0] = 0;
  v63 = v8;
  __dst[4] = 0;
  v62 = 0;
  v16 = operator new();
  v70[0] = v69[0];
  *(_QWORD *)((char *)v70 + 7) = *(_QWORD *)((char *)v69 + 7);
  v69[0] = 0;
  *(_QWORD *)((char *)v69 + 7) = 0;
  v17 = v63;
  v63 = 0uLL;
  *(_BYTE *)(v16 + 8) = 1;
  *(_QWORD *)(v16 + 32) = 0;
  *(_QWORD *)(v16 + 40) = 0;
  *(_QWORD *)v16 = &off_24C9EBB90;
  *(_QWORD *)(v16 + 16) = &unk_24C9EBC08;
  *(_QWORD *)(v16 + 24) = &unk_24C9EBC48;
  v18 = v70[0];
  *(_QWORD *)(v16 + 63) = *(_QWORD *)((char *)v70 + 7);
  *(_QWORD *)(v16 + 48) = 0;
  *(_QWORD *)(v16 + 56) = v18;
  *(_BYTE *)(v16 + 71) = 0;
  v70[0] = 0;
  *(_QWORD *)((char *)v70 + 7) = 0;
  *(_OWORD *)(v16 + 72) = v17;
  v64 = 0;
  v65 = 0;
  v19 = (_QWORD *)operator new();
  *v19 = &off_24C9EBD30;
  v19[1] = v9;
  v19[2] = v10;
  *(_QWORD *)(v16 + 88) = v19;
  *(_QWORD *)(v16 + 96) = v16 + 96;
  *(_QWORD *)(v16 + 104) = v16 + 96;
  *(_QWORD *)(v16 + 112) = 0;
  *(_QWORD *)(v16 + 120) = v16 + 120;
  *(_QWORD *)(v16 + 128) = v16 + 120;
  *(_QWORD *)(v16 + 136) = 0;
  v20 = (std::__shared_weak_count *)operator new();
  v20->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v20->__shared_owners_;
  v20->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9EBD80;
  v20->__shared_weak_owners_ = 0;
  v20[1].__vftable = (std::__shared_weak_count_vtbl *)v16;
  v22 = *(std::__shared_weak_count **)(v16 + 40);
  if (v22)
  {
    if (v22->__shared_owners_ != -1)
      goto LABEL_22;
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v20->__shared_weak_owners_;
    do
      v25 = __ldxr(p_shared_weak_owners);
    while (__stxr(v25 + 1, p_shared_weak_owners));
    *(_QWORD *)(v16 + 32) = v16;
    *(_QWORD *)(v16 + 40) = v20;
    std::__shared_weak_count::__release_weak(v22);
  }
  else
  {
    do
      v26 = __ldxr(p_shared_owners);
    while (__stxr(v26 + 1, p_shared_owners));
    v27 = (unint64_t *)&v20->__shared_weak_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
    *(_QWORD *)(v16 + 32) = v16;
    *(_QWORD *)(v16 + 40) = v20;
  }
  do
    v29 = __ldaxr(p_shared_owners);
  while (__stlxr(v29 - 1, p_shared_owners));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
LABEL_22:
  v30 = v65;
  if (v65)
  {
    v31 = (unint64_t *)&v65->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v64 = v16;
  v65 = v20;
  v33 = (std::__shared_weak_count *)*((_QWORD *)&v63 + 1);
  if (*((_QWORD *)&v63 + 1))
  {
    v34 = (unint64_t *)(*((_QWORD *)&v63 + 1) + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  *(_QWORD *)a1 = &off_24C9EB598;
  *(_QWORD *)(a1 + 8) = v13;
  *(_QWORD *)(a1 + 16) = v68[0];
  *(_QWORD *)(a1 + 23) = *(_QWORD *)((char *)v68 + 7);
  *(_BYTE *)(a1 + 31) = v59;
  v68[0] = 0;
  *(_QWORD *)((char *)v68 + 7) = 0;
  v36 = v67[0];
  *(_QWORD *)(a1 + 32) = v14;
  *(_QWORD *)(a1 + 40) = v36;
  *(_QWORD *)(a1 + 47) = *(_QWORD *)((char *)v67 + 7);
  *(_BYTE *)(a1 + 55) = v15;
  v67[0] = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)((char *)v67 + 7) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v63 = 0uLL;
  v38 = v64;
  v37 = v65;
  *(_QWORD *)(a1 + 72) = v64;
  *(_QWORD *)(a1 + 80) = v37;
  v64 = 0;
  v65 = 0;
  if (v37)
  {
    v39 = (unint64_t *)&v37->__shared_weak_owners_;
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
  }
  *(_QWORD *)(a1 + 88) = &off_24C9EB5C8;
  v41 = (_QWORD *)operator new();
  *v41 = &off_24C9EBDD0;
  v41[1] = v38;
  v41[2] = v37;
  *(_QWORD *)(a1 + 96) = v41;
  v42 = *(_QWORD *)(a1 + 72);
  v43 = *(_QWORD *)(a1 + 80);
  if (!v43)
  {
    *(_QWORD *)(a1 + 104) = v42;
    *(_QWORD *)(a1 + 112) = 0;
    if (v42)
      v48 = v42 + 16;
    else
      v48 = 0;
    goto LABEL_52;
  }
  v44 = (unint64_t *)(v43 + 16);
  do
    v45 = __ldxr(v44);
  while (__stxr(v45 + 1, v44));
  v47 = *(_QWORD *)(a1 + 72);
  v46 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 104) = v42;
  *(_QWORD *)(a1 + 112) = v43;
  if (v47)
    v48 = v47 + 16;
  else
    v48 = 0;
  if (!v46)
  {
    v42 = v47;
LABEL_52:
    v51 = 0;
    *(_QWORD *)(a1 + 120) = &off_24C9EB528;
    *(_QWORD *)(a1 + 128) = v48;
    *(_QWORD *)(a1 + 136) = 0;
    goto LABEL_53;
  }
  v49 = (unint64_t *)(v46 + 16);
  do
    v50 = __ldxr(v49);
  while (__stxr(v50 + 1, v49));
  v42 = *(_QWORD *)(a1 + 72);
  v51 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 120) = &off_24C9EB528;
  *(_QWORD *)(a1 + 128) = v48;
  *(_QWORD *)(a1 + 136) = v46;
  if (v51)
  {
    v52 = (unint64_t *)(v51 + 16);
    do
      v53 = __ldxr(v52);
    while (__stxr(v53 + 1, v52));
  }
LABEL_53:
  if (v42)
    v54 = v42 + 24;
  else
    v54 = 0;
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  *(_QWORD *)(a1 + 152) = v54;
  *(_QWORD *)(a1 + 160) = v51;
  v55 = v62;
  if (v62)
  {
    v56 = (unint64_t *)&v62->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
    {
LABEL_63:
      if (*a3)
        return a1;
      goto LABEL_67;
    }
  }
  else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    goto LABEL_63;
  }
  operator delete(__dst[0]);
  if (*a3)
    return a1;
LABEL_67:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 534, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  return a1;
}

void sub_20EE2FCA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, char a12, uint64_t a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,char a35)
{
  if (a28 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EE2FE74(uint64_t a1)
{
  sub_20EE34324(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EE2FE98(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9EB418;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20EE2FED8(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9EB418;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE2FF28(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

_QWORD *sub_20EE2FF38(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9EB450;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EE2FF70(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9EB450;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20EE2FFB8(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C9EB488;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C9EB488;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EE3008C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EE300B8(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9EB488;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20EE300F8(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9EB488;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE30148(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_20EE30158(uint64_t a1)
{
  sub_20EE34140(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EE3017C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9EB4F0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20EE301BC(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9EB4F0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE3020C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

_QWORD *sub_20EE3021C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9EB528;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EE30254(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9EB528;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20EE3029C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C9EB560;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C9EB560;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EE30370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EE3039C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9EB560;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20EE303DC(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9EB560;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE3042C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_20EE3043C(uint64_t a1)
{
  sub_20EE33F5C(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EE30460(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9EB5C8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20EE304A0(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9EB5C8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE304F0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_20EE30504(uint64_t a1)
{
  sub_20EE30D2C(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EE30528(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    LOBYTE(v5) = 0;
    v6 = 0;
    sub_20EE30E88(a1 + 11, a2, &v5);
    if (v6)
      sub_20EE2C794(&v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_20EE305E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    sub_20EE2C794(&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE3060C(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EE3061C(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EE30628(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20EE30638(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_20E8778D4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v13, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_20EE30E88(a1 + 11, a2, &v14);
  if (v15)
    sub_20EE2C794(&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_20EE307D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::__assoc_sub_state **v20;
  std::__assoc_sub_state *v21;
  std::exception_ptr v22;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v21 = *v20;
    if (v21)
    {
      std::exception_ptr::exception_ptr(&a20, &a19);
      v22.__ptr_ = &a20;
      std::__assoc_sub_state::set_exception(v21, v22);
      std::exception_ptr::~exception_ptr(&a20);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (a17 < 0)
        operator delete(__p);
      JUMPOUT(0x20EE306FCLL);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EE30844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EE308A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13)
{
  std::recursive_mutex *v13;

  if ((_BYTE)a11)
    sub_20EE2C794(&a10);
  std::recursive_mutex::unlock(v13);
  _Unwind_Resume(a1);
}

void sub_20EE308C8(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_20EE3094C(uint64_t a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v4);
  v5 = operator new(0x20uLL);
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5[2] = &off_24C9EB488;
  v5[3] = v6;
  v8 = *(_QWORD *)(a1 + 96);
  v7 = (_QWORD *)(a1 + 96);
  *v5 = v8;
  v5[1] = v7;
  *(_QWORD *)(v8 + 8) = v5;
  *v7 = v5;
  ++v7[2];
  std::recursive_mutex::unlock(v4);
}

void sub_20EE309FC(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EE30A10(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20EE30AA0(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EE30AB4(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v4);
  sub_20EE31228(a2, a1 + 96);
  std::recursive_mutex::unlock(v4);
}

void sub_20EE30AF8(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EE30B0C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EE30B40(uint64_t a1)
{
  return sub_20EE30D2C(a1 - 16);
}

void sub_20EE30B48(uint64_t a1)
{
  sub_20EE30D2C(a1 - 16);
  JUMPOUT(0x212BC6398);
}

void sub_20EE30B70(uint64_t a1, uint64_t a2)
{
  sub_20EE3094C(a1 - 16, a2);
}

void sub_20EE30B78(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v4);
  sub_20EE31228(a2, a1 + 80);
  std::recursive_mutex::unlock(v4);
}

void sub_20EE30BBC(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EE30BD0(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EE30C04(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EE30C0C(uint64_t a1)
{
  return sub_20EE30D2C(a1 - 24);
}

void sub_20EE30C14(uint64_t a1)
{
  sub_20EE30D2C(a1 - 24);
  JUMPOUT(0x212BC6398);
}

void sub_20EE30C3C(uint64_t a1)
{
  sub_20EE30A10(a1 - 24);
}

uint64_t sub_20EE30C44(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20EE30C4C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EE30CB4(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE30D1C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20EE30D2C(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = &off_24C9EB600;
  *(_QWORD *)(a1 + 16) = &unk_24C9EB678;
  *(_QWORD *)(a1 + 24) = &unk_24C9EB6B8;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v7 = *(_QWORD *)(a1 + 96);
    v8 = *(uint64_t **)(a1 + 104);
    v9 = *v8;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v8 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v8[1];
        (*(void (**)(uint64_t *))v8[2])(v8 + 2);
        operator delete(v8);
        v8 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20EE30E88(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *i;
  uint64_t v9;
  uint64_t v10;
  int v11;
  const char *imp;
  unint64_t *v13;
  unint64_t v14;
  void **v15;
  void **v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::exception_ptr v21;
  std::runtime_error v22;
  void *__p;
  void **v24;
  unsigned __int8 v25;

  v6 = *a1;
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(std::runtime_error *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&v22, v6, a2);
  v7 = a1 + 1;
  for (i = (_QWORD *)a1[2]; i != v7; i = (_QWORD *)i[1])
    (*(void (**)(_QWORD *, std::runtime_error *))(i[2] + 16))(i + 2, &v22);
  if (*((_BYTE *)a3 + 8))
  {
    v9 = *a3;
    if (!*a3)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v9 + 24));
    if ((*(_BYTE *)(v9 + 136) & 1) != 0
      || (v21.__ptr_ = 0, v10 = *(_QWORD *)(v9 + 16), std::exception_ptr::~exception_ptr(&v21), v10))
    {
      sub_20E96CE78(2u);
    }
    *(_BYTE *)(v9 + 144) = 0;
    v11 = v25;
    *(_BYTE *)(v9 + 184) = v25;
    if (v11)
    {
      imp = v22.__imp_.__imp_;
      *(_QWORD *)(v9 + 144) = v22.__vftable;
      *(_QWORD *)(v9 + 152) = imp;
      if (imp)
      {
        v13 = (unint64_t *)(imp + 8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      *(_QWORD *)(v9 + 160) = 0;
      *(_QWORD *)(v9 + 168) = 0;
      *(_QWORD *)(v9 + 176) = 0;
      sub_20E909ADC((char *)(v9 + 160), (uint64_t)__p, (uint64_t)v24, 0xAAAAAAAAAAAAAAABLL * (((char *)v24 - (_BYTE *)__p) >> 3));
    }
    else
    {
      std::runtime_error::runtime_error((std::runtime_error *)(v9 + 144), &v22);
      *(_QWORD *)(v9 + 144) = &off_24C9EDA58;
      *(_DWORD *)(v9 + 160) = (_DWORD)__p;
    }
    *(_DWORD *)(v9 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v9 + 88));
    std::mutex::unlock((std::mutex *)(v9 + 24));
  }
  if (v25)
  {
    v15 = (void **)__p;
    if (__p)
    {
      v16 = v24;
      v17 = __p;
      if (v24 != __p)
      {
        do
        {
          if (*((char *)v16 - 1) < 0)
            operator delete(*(v16 - 3));
          v16 -= 3;
        }
        while (v16 != v15);
        v17 = __p;
      }
      v24 = v15;
      operator delete(v17);
    }
    v18 = (std::__shared_weak_count *)v22.__imp_.__imp_;
    if (v22.__imp_.__imp_)
    {
      v19 = (unint64_t *)(v22.__imp_.__imp_ + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  else
  {
    ((void (*)(std::runtime_error *))v22.~runtime_error)(&v22);
  }
}

void sub_20EE310E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, int a14, __int16 a15, char a16, unsigned __int8 a17, char a18)
{
  std::mutex *v18;
  uint64_t v19;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  v22 = *(std::__shared_weak_count **)(v19 + 152);
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  std::mutex::unlock(v18);
  sub_20EE0DDB0((uint64_t)&a18);
  if (a2 == 1)
  {
    v25 = (uint64_t *)__cxa_begin_catch(a1);
    v26 = *v25;
    a11 = *(_QWORD *)(*(_QWORD *)(*v25 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a10 = (*(uint64_t (**)(void))(v26 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a11, "\n", "message: ", (const char *)&a10, "\n");
    if ((a17 & 0x80u) == 0)
      v27 = (uint64_t *)&a12;
    else
      v27 = a12;
    if ((a17 & 0x80u) == 0)
      v28 = a17;
    else
      v28 = a13;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v27, v28, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20EE311FC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20EE3121CLL);
}

char *sub_20EE31228(int64x2_t *a1, uint64_t a2)
{
  unint64_t v4;
  char *result;
  char *v6;
  uint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  char *v10;
  uint64_t v11;
  int64x2_t *v12;

  v4 = *(_QWORD *)(a2 + 16);
  v10 = 0;
  v9 = 0uLL;
  if (v4)
  {
    if (v4 >> 61)
      sub_20E92CED8();
    result = (char *)operator new(8 * v4);
    v6 = &result[8 * v4];
    v9.i64[0] = (uint64_t)result;
    v9.i64[1] = (uint64_t)result;
    v10 = v6;
    v7 = *(_QWORD *)(a2 + 8);
    v12 = &v9;
    if (v7 != a2)
      goto LABEL_4;
LABEL_7:
    v8 = vdupq_n_s64((unint64_t)result);
    goto LABEL_8;
  }
  v6 = 0;
  result = 0;
  v7 = *(_QWORD *)(a2 + 8);
  v12 = &v9;
  if (v7 == a2)
    goto LABEL_7;
  do
  {
LABEL_4:
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 24) + 48))(*(_QWORD *)(v7 + 24));
    result = (char *)sub_20E9B2D04((uint64_t *)&v12, &v11);
    v7 = *(_QWORD *)(v7 + 8);
  }
  while (v7 != a2);
  v8 = v9;
  v6 = v10;
LABEL_8:
  *a1 = v8;
  a1[1].i64[0] = (uint64_t)v6;
  return result;
}

void sub_20EE31304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EE31328(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE3134C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EE31364(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio22user_anchor_node"
                     "_group23ActiveAnchorGroupResultENSt12experimental8expectedINS7_22UserAnchorLoadedBundleENS7_24UserA"
                     "nchorNodeGroupErrorEEEvSD_Lb0EEEE27__shared_ptr_default_deleteISE_SE_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio22user_"
                                "anchor_node_group23ActiveAnchorGroupResultENSt12experimental8expectedINS7_22UserAnchorLo"
                                "adedBundleENS7_24UserAnchorNodeGroupErrorEEEvSD_Lb0EEEE27__shared_ptr_default_deleteISE_SE_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio22user_anchor_node_group23ActiveAnchorGroupResultENSt12experimental8expectedINS7_22UserAnchorLoadedBundleENS7_24UserAnchorNodeGroupErrorEEEvSD_Lb0EEEE27__shared_ptr_default_deleteISE_SE_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio22user_anchor_node_group23ActiveAnchorGroupResultENSt12experimental8expectedINS7_22UserAnchorLoadedBundleENS7_24UserAnchorNodeGroupErrorEEEvSD_Lb0EEEE27__shared_ptr_default_deleteISE_SE_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EE313D4(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EE31400(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EE3143C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9EB850;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20EE314A4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EE31534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EE31548(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EE315D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE315EC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EE316B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE316C4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EE31788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EE3179C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EE31840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EE31858(uint64_t a1)
{
  sub_20EE32080(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EE3187C(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    LOBYTE(v5) = 0;
    v6 = 0;
    sub_20EE321DC(a1 + 11, a2, &v5);
    if (v6)
      sub_20EE2D3A8(&v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_20EE31938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    sub_20EE2D3A8(&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE31960(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EE31970(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EE3197C(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20EE3198C(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_20E8778D4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v13, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_20EE321DC(a1 + 11, a2, &v14);
  if (v15)
    sub_20EE2D3A8(&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_20EE31B24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::__assoc_sub_state **v20;
  std::__assoc_sub_state *v21;
  std::exception_ptr v22;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v21 = *v20;
    if (v21)
    {
      std::exception_ptr::exception_ptr(&a20, &a19);
      v22.__ptr_ = &a20;
      std::__assoc_sub_state::set_exception(v21, v22);
      std::exception_ptr::~exception_ptr(&a20);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (a17 < 0)
        operator delete(__p);
      JUMPOUT(0x20EE31A50);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EE31B98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EE31BF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13)
{
  std::recursive_mutex *v13;

  if ((_BYTE)a11)
    sub_20EE2D3A8(&a10);
  std::recursive_mutex::unlock(v13);
  _Unwind_Resume(a1);
}

void sub_20EE31C1C(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_20EE31CA0(uint64_t a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v4);
  v5 = operator new(0x20uLL);
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5[2] = &off_24C9EB560;
  v5[3] = v6;
  v8 = *(_QWORD *)(a1 + 96);
  v7 = (_QWORD *)(a1 + 96);
  *v5 = v8;
  v5[1] = v7;
  *(_QWORD *)(v8 + 8) = v5;
  *v7 = v5;
  ++v7[2];
  std::recursive_mutex::unlock(v4);
}

void sub_20EE31D50(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EE31D64(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20EE31DF4(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EE31E08(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v4);
  sub_20EE325AC(a2, a1 + 96);
  std::recursive_mutex::unlock(v4);
}

void sub_20EE31E4C(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EE31E60(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EE31E94(uint64_t a1)
{
  return sub_20EE32080(a1 - 16);
}

void sub_20EE31E9C(uint64_t a1)
{
  sub_20EE32080(a1 - 16);
  JUMPOUT(0x212BC6398);
}

void sub_20EE31EC4(uint64_t a1, uint64_t a2)
{
  sub_20EE31CA0(a1 - 16, a2);
}

void sub_20EE31ECC(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v4);
  sub_20EE325AC(a2, a1 + 80);
  std::recursive_mutex::unlock(v4);
}

void sub_20EE31F10(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EE31F24(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EE31F58(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EE31F60(uint64_t a1)
{
  return sub_20EE32080(a1 - 24);
}

void sub_20EE31F68(uint64_t a1)
{
  sub_20EE32080(a1 - 24);
  JUMPOUT(0x212BC6398);
}

void sub_20EE31F90(uint64_t a1)
{
  sub_20EE31D64(a1 - 24);
}

uint64_t sub_20EE31F98(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20EE31FA0(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EE32008(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE32070(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20EE32080(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = &off_24C9EB8C8;
  *(_QWORD *)(a1 + 16) = &unk_24C9EB940;
  *(_QWORD *)(a1 + 24) = &unk_24C9EB980;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v7 = *(_QWORD *)(a1 + 96);
    v8 = *(uint64_t **)(a1 + 104);
    v9 = *v8;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v8 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v8[1];
        (*(void (**)(uint64_t *))v8[2])(v8 + 2);
        operator delete(v8);
        v8 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20EE321DC(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  std::runtime_error *v16;
  int v17;
  std::exception_ptr v18;
  std::runtime_error v19;
  int v20;
  unsigned __int8 v21;

  v6 = *a1;
  if (!v6)
  {
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v7 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (byte_254A6DE68)
      v8 = byte_254A6DE70 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_254A6DE40;
      for (i = qword_254A6DE48; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, "", 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      abort();
    qword_254A6DE58(unk_254A6DE60, "callable_", 9, "", 0);
    v6 = *a1;
  }
  (*(void (**)(std::runtime_error *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&v19, v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, std::runtime_error *))(j[2] + 16))(j + 2, &v19);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!v14)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v18.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v18), v15))
    {
      sub_20E96CE78(2u);
    }
    *(_BYTE *)(v14 + 144) = 0;
    v16 = (std::runtime_error *)(v14 + 144);
    v17 = v21;
    *(_BYTE *)(v14 + 168) = v21;
    if (v17)
    {
      LOBYTE(v16->__vftable) = v19.__vftable;
    }
    else
    {
      std::runtime_error::runtime_error(v16, &v19);
      *(_QWORD *)(v14 + 144) = &off_24C9EDA58;
      *(_DWORD *)(v14 + 160) = v20;
    }
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock((std::mutex *)(v14 + 24));
  }
  if (!v21)
    ((void (*)(std::runtime_error *))v19.~runtime_error)(&v19);
}

void sub_20EE32494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, int a14, __int16 a15, char a16, unsigned __int8 a17, void (**a18)(_QWORD), uint64_t a19, uint64_t a20,char a21)
{
  std::mutex *v21;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;

  std::mutex::unlock(v21);
  if (!a21)
    (*a18)(&a18);
  if (a2 == 1)
  {
    v24 = (uint64_t *)__cxa_begin_catch(a1);
    v25 = *v24;
    a11 = *(_QWORD *)(*(_QWORD *)(*v24 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a10 = (*(uint64_t (**)(void))(v25 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a11, "\n", "message: ", (const char *)&a10, "\n");
    if ((a17 & 0x80u) == 0)
      v26 = (uint64_t *)&a12;
    else
      v26 = a12;
    if ((a17 & 0x80u) == 0)
      v27 = a17;
    else
      v27 = a13;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v26, v27, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20EE32580(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20EE325A0);
}

char *sub_20EE325AC(int64x2_t *a1, uint64_t a2)
{
  unint64_t v4;
  char *result;
  char *v6;
  uint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  char *v10;
  uint64_t v11;
  int64x2_t *v12;

  v4 = *(_QWORD *)(a2 + 16);
  v10 = 0;
  v9 = 0uLL;
  if (v4)
  {
    if (v4 >> 61)
      sub_20E92CED8();
    result = (char *)operator new(8 * v4);
    v6 = &result[8 * v4];
    v9.i64[0] = (uint64_t)result;
    v9.i64[1] = (uint64_t)result;
    v10 = v6;
    v7 = *(_QWORD *)(a2 + 8);
    v12 = &v9;
    if (v7 != a2)
      goto LABEL_4;
LABEL_7:
    v8 = vdupq_n_s64((unint64_t)result);
    goto LABEL_8;
  }
  v6 = 0;
  result = 0;
  v7 = *(_QWORD *)(a2 + 8);
  v12 = &v9;
  if (v7 == a2)
    goto LABEL_7;
  do
  {
LABEL_4:
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 24) + 48))(*(_QWORD *)(v7 + 24));
    result = (char *)sub_20E9B2D04((uint64_t *)&v12, &v11);
    v7 = *(_QWORD *)(v7 + 8);
  }
  while (v7 != a2);
  v8 = v9;
  v6 = v10;
LABEL_8:
  *a1 = v8;
  a1[1].i64[0] = (uint64_t)v6;
  return result;
}

void sub_20EE32688(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EE326AC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE326D0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EE326E8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_INS_6vectorINS1_3vio22"
                     "user_anchor_node_group21UserAnchorGroupBundleENS_9allocatorIS9_EEEEEENSt12experimental8expectedIbNS"
                     "8_24UserAnchorNodeGroupErrorEEEvSH_Lb0EEEE27__shared_ptr_default_deleteISI_SI_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_INS_6vector"
                                "INS1_3vio22user_anchor_node_group21UserAnchorGroupBundleENS_9allocatorIS9_EEEEEENSt12exp"
                                "erimental8expectedIbNS8_24UserAnchorNodeGroupErrorEEEvSH_Lb0EEEE27__shared_ptr_default_deleteISI_SI_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_INS_6vectorINS1_3vio22user_anchor_node_group21UserAnchorGroupBundleENS_9allocatorIS9_EEEEEENSt12experimental8expectedIbNS8_24UserAnchorNodeGroupErrorEEEvSH_Lb0EEEE27__shared_ptr_default_deleteISI_SI_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_INS_6vectorINS1_3vio22user_anchor_node_group21UserAnchorGroupBundleENS_9allocatorIS9_EEEEEENSt12experimental8expectedIbNS8_24UserAnchorNodeGroupErrorEEEvSH_Lb0EEEE27__shared_ptr_default_deleteISI_SI_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EE32758(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EE32784(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EE327C0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9EBB18;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20EE32828(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EE328B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EE328CC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EE3295C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE32970(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EE32A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE32A48(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EE32B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EE32B20(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EE32BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EE32BDC(uint64_t a1)
{
  sub_20EE33404(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EE32C00(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    LOBYTE(v5) = 0;
    v6 = 0;
    sub_20EE33560(a1 + 11, a2, &v5);
    if (v6)
      sub_20EE2D3A8(&v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_20EE32CBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    sub_20EE2D3A8(&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE32CE4(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EE32CF4(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EE32D00(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20EE32D10(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_20E8778D4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v13, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_20EE33560(a1 + 11, a2, &v14);
  if (v15)
    sub_20EE2D3A8(&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_20EE32EA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::__assoc_sub_state **v20;
  std::__assoc_sub_state *v21;
  std::exception_ptr v22;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v21 = *v20;
    if (v21)
    {
      std::exception_ptr::exception_ptr(&a20, &a19);
      v22.__ptr_ = &a20;
      std::__assoc_sub_state::set_exception(v21, v22);
      std::exception_ptr::~exception_ptr(&a20);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (a17 < 0)
        operator delete(__p);
      JUMPOUT(0x20EE32DD4);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EE32F1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EE32F7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13)
{
  std::recursive_mutex *v13;

  if ((_BYTE)a11)
    sub_20EE2D3A8(&a10);
  std::recursive_mutex::unlock(v13);
  _Unwind_Resume(a1);
}

void sub_20EE32FA0(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_20EE33024(uint64_t a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v4);
  v5 = operator new(0x20uLL);
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5[2] = &off_24C9EB560;
  v5[3] = v6;
  v8 = *(_QWORD *)(a1 + 96);
  v7 = (_QWORD *)(a1 + 96);
  *v5 = v8;
  v5[1] = v7;
  *(_QWORD *)(v8 + 8) = v5;
  *v7 = v5;
  ++v7[2];
  std::recursive_mutex::unlock(v4);
}

void sub_20EE330D4(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EE330E8(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20EE33178(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EE3318C(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v4);
  sub_20EE33930(a2, a1 + 96);
  std::recursive_mutex::unlock(v4);
}

void sub_20EE331D0(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EE331E4(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EE33218(uint64_t a1)
{
  return sub_20EE33404(a1 - 16);
}

void sub_20EE33220(uint64_t a1)
{
  sub_20EE33404(a1 - 16);
  JUMPOUT(0x212BC6398);
}

void sub_20EE33248(uint64_t a1, uint64_t a2)
{
  sub_20EE33024(a1 - 16, a2);
}

void sub_20EE33250(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v4);
  sub_20EE33930(a2, a1 + 80);
  std::recursive_mutex::unlock(v4);
}

void sub_20EE33294(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EE332A8(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EE332DC(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EE332E4(uint64_t a1)
{
  return sub_20EE33404(a1 - 24);
}

void sub_20EE332EC(uint64_t a1)
{
  sub_20EE33404(a1 - 24);
  JUMPOUT(0x212BC6398);
}

void sub_20EE33314(uint64_t a1)
{
  sub_20EE330E8(a1 - 24);
}

uint64_t sub_20EE3331C(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20EE33324(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EE3338C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE333F4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20EE33404(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = &off_24C9EBB90;
  *(_QWORD *)(a1 + 16) = &unk_24C9EBC08;
  *(_QWORD *)(a1 + 24) = &unk_24C9EBC48;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v7 = *(_QWORD *)(a1 + 96);
    v8 = *(uint64_t **)(a1 + 104);
    v9 = *v8;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v8 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v8[1];
        (*(void (**)(uint64_t *))v8[2])(v8 + 2);
        operator delete(v8);
        v8 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20EE33560(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  std::runtime_error *v16;
  int v17;
  std::exception_ptr v18;
  std::runtime_error v19;
  int v20;
  unsigned __int8 v21;

  v6 = *a1;
  if (!v6)
  {
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v7 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (byte_254A6DE68)
      v8 = byte_254A6DE70 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_254A6DE40;
      for (i = qword_254A6DE48; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, "", 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      abort();
    qword_254A6DE58(unk_254A6DE60, "callable_", 9, "", 0);
    v6 = *a1;
  }
  (*(void (**)(std::runtime_error *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&v19, v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, std::runtime_error *))(j[2] + 16))(j + 2, &v19);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!v14)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v18.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v18), v15))
    {
      sub_20E96CE78(2u);
    }
    *(_BYTE *)(v14 + 144) = 0;
    v16 = (std::runtime_error *)(v14 + 144);
    v17 = v21;
    *(_BYTE *)(v14 + 168) = v21;
    if (v17)
    {
      LOBYTE(v16->__vftable) = v19.__vftable;
    }
    else
    {
      std::runtime_error::runtime_error(v16, &v19);
      *(_QWORD *)(v14 + 144) = &off_24C9EDA58;
      *(_DWORD *)(v14 + 160) = v20;
    }
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock((std::mutex *)(v14 + 24));
  }
  if (!v21)
    ((void (*)(std::runtime_error *))v19.~runtime_error)(&v19);
}

void sub_20EE33818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, int a14, __int16 a15, char a16, unsigned __int8 a17, void (**a18)(_QWORD), uint64_t a19, uint64_t a20,char a21)
{
  std::mutex *v21;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;

  std::mutex::unlock(v21);
  if (!a21)
    (*a18)(&a18);
  if (a2 == 1)
  {
    v24 = (uint64_t *)__cxa_begin_catch(a1);
    v25 = *v24;
    a11 = *(_QWORD *)(*(_QWORD *)(*v24 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a10 = (*(uint64_t (**)(void))(v25 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a11, "\n", "message: ", (const char *)&a10, "\n");
    if ((a17 & 0x80u) == 0)
      v26 = (uint64_t *)&a12;
    else
      v26 = a12;
    if ((a17 & 0x80u) == 0)
      v27 = a17;
    else
      v27 = a13;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v26, v27, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20EE33904(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20EE33924);
}

char *sub_20EE33930(int64x2_t *a1, uint64_t a2)
{
  unint64_t v4;
  char *result;
  char *v6;
  uint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  char *v10;
  uint64_t v11;
  int64x2_t *v12;

  v4 = *(_QWORD *)(a2 + 16);
  v10 = 0;
  v9 = 0uLL;
  if (v4)
  {
    if (v4 >> 61)
      sub_20E92CED8();
    result = (char *)operator new(8 * v4);
    v6 = &result[8 * v4];
    v9.i64[0] = (uint64_t)result;
    v9.i64[1] = (uint64_t)result;
    v10 = v6;
    v7 = *(_QWORD *)(a2 + 8);
    v12 = &v9;
    if (v7 != a2)
      goto LABEL_4;
LABEL_7:
    v8 = vdupq_n_s64((unint64_t)result);
    goto LABEL_8;
  }
  v6 = 0;
  result = 0;
  v7 = *(_QWORD *)(a2 + 8);
  v12 = &v9;
  if (v7 == a2)
    goto LABEL_7;
  do
  {
LABEL_4:
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 24) + 48))(*(_QWORD *)(v7 + 24));
    result = (char *)sub_20E9B2D04((uint64_t *)&v12, &v11);
    v7 = *(_QWORD *)(v7 + 8);
  }
  while (v7 != a2);
  v8 = v9;
  v6 = v10;
LABEL_8:
  *a1 = v8;
  a1[1].i64[0] = (uint64_t)v6;
  return result;
}

void sub_20EE33A0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EE33A30(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE33A54(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EE33A6C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio22user_anchor_node"
                     "_group13DeletedGroupsENSt12experimental8expectedIbNS7_24UserAnchorNodeGroupErrorEEEvSC_Lb0EEEE27__s"
                     "hared_ptr_default_deleteISD_SD_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio22user_"
                                "anchor_node_group13DeletedGroupsENSt12experimental8expectedIbNS7_24UserAnchorNodeGroupEr"
                                "rorEEEvSC_Lb0EEEE27__shared_ptr_default_deleteISD_SD_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio22user_anchor_node_group13DeletedGroupsENSt12experimental8expectedIbNS7_24UserAnchorNodeGroupErrorEEEvSC_Lb0EEEE27__shared_ptr_default_deleteISD_SD_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio22user_anchor_node_group13DeletedGroupsENSt12experimental8expectedIbNS7_24UserAnchorNodeGroupErrorEEEvSC_Lb0EEEE27__shared_ptr_default_deleteISD_SD_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EE33ADC(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EE33B08(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EE33B44@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9EBDD0;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20EE33BAC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EE33C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EE33C50(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EE33CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE33CF4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EE33DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE33DCC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EE33E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EE33EA4(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EE33F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE33F5C(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9EB598;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9EB528;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9EB5C8;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20EE34140(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9EB4C0;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9EB528;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9EB4F0;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20EE34324(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9EB3E8;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9EB450;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9EB418;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20EE34508(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9EBE48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EE34518(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9EBE48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE34548(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_20EE34558(uint64_t *a1, uint64_t *a2)
{
  unint64_t *v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  unint64_t *v11;
  unint64_t v12;
  void *v13;
  void *v14;
  char v15;
  char *v16;
  void *v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v21;
  unint64_t v22;
  unint64_t *p_shared_weak_owners;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  void *v33;
  char *v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t *v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  __int128 v62;
  unint64_t *v63;
  unint64_t v64;
  char *v65;
  __int128 v66;
  void *v67;
  _QWORD *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  std::__shared_weak_count *v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t *v100;
  uint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  __int128 v104;
  unint64_t *v105;
  unint64_t v106;
  void *v107;
  char v108;
  void *v109;
  char v110;
  char *v111;
  void *v112;
  _QWORD *v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  std::__shared_weak_count *v116;
  unint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t *v121;
  unint64_t v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  void *v130;
  char *v131;
  unint64_t *v132;
  unint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t *v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t *v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t *v144;
  unint64_t v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t *v158;
  uint64_t v159;
  unint64_t *v160;
  unint64_t v161;
  __int128 v162;
  unint64_t *v163;
  unint64_t v164;
  void *v165;
  void *v166;
  char v167;
  char *v168;
  void *v169;
  _QWORD *v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  std::__shared_weak_count *v173;
  unint64_t v174;
  unint64_t *v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t *v178;
  unint64_t v179;
  unint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  void *v187;
  char *v188;
  unint64_t *v189;
  unint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t *v194;
  unint64_t v195;
  uint64_t v196;
  unint64_t v197;
  unint64_t *v198;
  unint64_t v199;
  uint64_t v200;
  unint64_t *v201;
  unint64_t v202;
  uint64_t v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  unint64_t v213;
  uint64_t v214;
  unint64_t *v215;
  uint64_t v216;
  unint64_t *v217;
  unint64_t v218;
  __int128 v219;
  unint64_t *v220;
  unint64_t v221;
  void *v222;
  char v223;
  void *v224;
  char v225;
  char *v226;
  uint64_t v227;
  _QWORD *v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  std::__shared_weak_count *v231;
  unint64_t v232;
  unint64_t *v233;
  unint64_t v234;
  unint64_t v235;
  unint64_t *v236;
  unint64_t v237;
  unint64_t v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  char *v245;
  void *v246;
  unint64_t *v247;
  unint64_t v248;
  _QWORD *v249;
  uint64_t v250;
  uint64_t v251;
  unint64_t *v252;
  unint64_t v253;
  uint64_t v254;
  unint64_t v255;
  unint64_t *v256;
  unint64_t v257;
  uint64_t v258;
  unint64_t *v259;
  unint64_t v260;
  uint64_t v261;
  std::__shared_weak_count *v262;
  unint64_t *v263;
  unint64_t v264;
  std::__shared_weak_count *v265;
  unint64_t *v266;
  unint64_t v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  unint64_t v271;
  uint64_t v272;
  std::__shared_weak_count *v273;
  uint64_t v274;
  unint64_t *v275;
  unint64_t v276;
  __int128 v277;
  unint64_t *v278;
  unint64_t v279;
  char *v280;
  __int128 v281;
  uint64_t v282;
  _QWORD *v283;
  std::__shared_weak_count *v284;
  unint64_t *v285;
  std::__shared_weak_count *v286;
  unint64_t v287;
  unint64_t *v288;
  unint64_t v289;
  unint64_t v290;
  unint64_t *v291;
  unint64_t v292;
  unint64_t v293;
  std::__shared_weak_count *v294;
  unint64_t *v295;
  unint64_t v296;
  std::__shared_weak_count *v297;
  unint64_t *v298;
  unint64_t v299;
  std::__shared_weak_count *v300;
  unint64_t *v301;
  unint64_t v302;
  std::__shared_weak_count *v303;
  unint64_t *v304;
  unint64_t v305;
  std::__shared_weak_count *v306;
  unint64_t *v307;
  unint64_t v308;
  std::__shared_weak_count *v309;
  unint64_t *v310;
  unint64_t v311;
  std::__shared_weak_count *v312;
  unint64_t *v313;
  unint64_t v314;
  unint64_t v315;
  uint64_t v316;
  std::__shared_weak_count *v317;
  uint64_t v318;
  unint64_t *v319;
  unint64_t v320;
  __int128 v321;
  unint64_t *v322;
  unint64_t v323;
  void *v324;
  char v325;
  void *v326;
  char v327;
  char *v328;
  uint64_t v329;
  _QWORD *v330;
  std::__shared_weak_count *v331;
  unint64_t *v332;
  std::__shared_weak_count *v333;
  unint64_t v334;
  unint64_t *v335;
  unint64_t v336;
  unint64_t v337;
  unint64_t *v338;
  unint64_t v339;
  unint64_t v340;
  std::__shared_weak_count *v341;
  unint64_t *v342;
  unint64_t v343;
  std::__shared_weak_count *v344;
  unint64_t *v345;
  unint64_t v346;
  void *v347;
  char *v348;
  unint64_t *v349;
  unint64_t v350;
  _QWORD *v351;
  uint64_t v352;
  uint64_t v353;
  unint64_t *v354;
  unint64_t v355;
  uint64_t v356;
  unint64_t v357;
  unint64_t *v358;
  unint64_t v359;
  uint64_t v360;
  unint64_t *v361;
  unint64_t v362;
  uint64_t v363;
  std::__shared_weak_count *v364;
  unint64_t *v365;
  unint64_t v366;
  std::__shared_weak_count *v367;
  unint64_t *v368;
  unint64_t v369;
  std::__shared_weak_count *v370;
  unint64_t *v371;
  unint64_t v372;
  unint64_t v373;
  uint64_t v374;
  std::__shared_weak_count *v375;
  uint64_t v376;
  unint64_t *v377;
  unint64_t v378;
  __int128 v379;
  unint64_t *v380;
  unint64_t v381;
  void *v382;
  char v383;
  void *v384;
  char v385;
  char *v386;
  uint64_t v387;
  _QWORD *v388;
  std::__shared_weak_count *v389;
  unint64_t *v390;
  std::__shared_weak_count *v391;
  unint64_t v392;
  unint64_t *v393;
  unint64_t v394;
  unint64_t v395;
  unint64_t *v396;
  unint64_t v397;
  unint64_t v398;
  std::__shared_weak_count *v399;
  unint64_t *v400;
  unint64_t v401;
  std::__shared_weak_count *v402;
  unint64_t *v403;
  unint64_t v404;
  void *v405;
  char *v406;
  unint64_t *v407;
  unint64_t v408;
  _QWORD *v409;
  uint64_t v410;
  uint64_t v411;
  unint64_t *v412;
  unint64_t v413;
  uint64_t v414;
  unint64_t v415;
  unint64_t *v416;
  unint64_t v417;
  uint64_t v418;
  unint64_t *v419;
  unint64_t v420;
  uint64_t v421;
  std::__shared_weak_count *v422;
  unint64_t *v423;
  unint64_t v424;
  std::__shared_weak_count *v425;
  unint64_t *v426;
  unint64_t v427;
  std::__shared_weak_count *v428;
  unint64_t *v429;
  unint64_t v430;
  unint64_t v431;
  uint64_t v432;
  std::__shared_weak_count *v433;
  uint64_t v434;
  unint64_t *v435;
  unint64_t v436;
  __int128 v437;
  unint64_t *v438;
  unint64_t v439;
  void *v440;
  char v441;
  void *v442;
  char v443;
  char *v444;
  uint64_t v445;
  _QWORD *v446;
  std::__shared_weak_count *v447;
  unint64_t *v448;
  std::__shared_weak_count *v449;
  unint64_t v450;
  unint64_t *v451;
  unint64_t v452;
  unint64_t v453;
  unint64_t *v454;
  unint64_t v455;
  unint64_t v456;
  std::__shared_weak_count *v457;
  unint64_t *v458;
  unint64_t v459;
  std::__shared_weak_count *v460;
  unint64_t *v461;
  unint64_t v462;
  void *v463;
  char *v464;
  unint64_t *v465;
  unint64_t v466;
  _QWORD *v467;
  uint64_t v468;
  uint64_t v469;
  unint64_t *v470;
  unint64_t v471;
  uint64_t v472;
  unint64_t v473;
  unint64_t *v474;
  unint64_t v475;
  uint64_t v476;
  unint64_t *v477;
  unint64_t v478;
  uint64_t v479;
  std::__shared_weak_count *v480;
  unint64_t *v481;
  unint64_t v482;
  std::__shared_weak_count *v483;
  unint64_t *v484;
  unint64_t v485;
  std::__shared_weak_count *v486;
  unint64_t *v487;
  unint64_t v488;
  unint64_t v489;
  uint64_t v490;
  std::__shared_weak_count *v491;
  uint64_t v492;
  unint64_t *v493;
  unint64_t v494;
  __int128 v495;
  unint64_t *v496;
  unint64_t v497;
  void *v498;
  void *v499;
  char v500;
  uint64_t v501;
  uint64_t v502;
  _QWORD *v503;
  std::__shared_weak_count *v504;
  unint64_t *v505;
  std::__shared_weak_count *v506;
  unint64_t v507;
  unint64_t *v508;
  unint64_t v509;
  unint64_t v510;
  unint64_t *v511;
  unint64_t v512;
  unint64_t v513;
  std::__shared_weak_count *v514;
  unint64_t *v515;
  unint64_t v516;
  std::__shared_weak_count *v517;
  unint64_t *v518;
  unint64_t v519;
  __int128 v520;
  unint64_t *v521;
  unint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  unint64_t *v526;
  unint64_t v527;
  uint64_t v528;
  unint64_t v529;
  unint64_t *v530;
  unint64_t v531;
  uint64_t v532;
  unint64_t *v533;
  unint64_t v534;
  uint64_t v535;
  std::__shared_weak_count *v536;
  unint64_t *v537;
  unint64_t v538;
  std::__shared_weak_count *v539;
  unint64_t *v540;
  unint64_t v541;
  std::__shared_weak_count *v542;
  unint64_t *v543;
  unint64_t v544;
  unint64_t v545;
  std::__shared_weak_count *v546;
  uint64_t v547;
  unint64_t *v548;
  unint64_t v549;
  uint64_t v550;
  __int128 v551;
  __int128 v552;
  __int128 v553;
  __int128 v554;
  __int128 v555;
  __int128 v556;
  uint64_t v557;
  __int128 v558;
  __int128 v559;
  __int128 v560;
  __int128 v561;
  __int128 v562;
  __int128 v563;
  __int128 v564;
  __int128 v565;
  __int128 v566;
  __int128 v567;
  __int128 v568;
  __int128 v569;
  __int128 v570;
  __int128 v571;
  __int128 v572;
  __int128 v573;
  __int128 v574;
  __int128 v575;
  __int128 v576;
  __int128 v577;
  __int128 v578;
  __int128 v579;
  __int128 v580;
  __int128 v581;
  __int128 v582;
  __int128 v583;
  __int128 v584;
  __int128 v585;
  __int128 v586;
  __int128 v587;
  __int128 v588;
  __int128 v589;
  __int128 v590;
  __int128 v591;
  __int128 v592;
  std::__shared_weak_count *v593;
  unint64_t *v594;
  unint64_t v595;
  std::__shared_weak_count *v596;
  unint64_t *v597;
  unint64_t v598;
  std::__shared_weak_count *v599;
  unint64_t *v600;
  unint64_t v601;
  std::__shared_weak_count *v602;
  unint64_t *v603;
  unint64_t v604;
  std::__shared_weak_count *v605;
  unint64_t *v606;
  unint64_t v607;
  std::__shared_weak_count *v608;
  unint64_t *v609;
  unint64_t v610;
  std::__shared_weak_count *v611;
  unint64_t *v612;
  unint64_t v613;
  std::__shared_weak_count *v614;
  unint64_t *v615;
  unint64_t v616;
  std::__shared_weak_count *v617;
  unint64_t *v618;
  unint64_t v619;
  std::__shared_weak_count *v620;
  unint64_t *v621;
  unint64_t v622;
  std::__shared_weak_count *v623;
  unint64_t *v624;
  unint64_t v625;
  std::__shared_weak_count *v626;
  unint64_t *v627;
  unint64_t v628;
  std::__shared_weak_count *v629;
  unint64_t *v630;
  unint64_t v631;
  std::__shared_weak_count *v632;
  unint64_t *v633;
  unint64_t v634;
  std::__shared_weak_count *v635;
  unint64_t *v636;
  unint64_t v637;
  std::__shared_weak_count *v638;
  unint64_t *v639;
  unint64_t v640;
  std::__shared_weak_count *v641;
  unint64_t *v642;
  unint64_t v643;
  std::__shared_weak_count *v644;
  unint64_t *v645;
  unint64_t v646;
  std::__shared_weak_count *v647;
  unint64_t *v648;
  unint64_t v649;
  std::__shared_weak_count *v650;
  unint64_t *v651;
  unint64_t v652;
  std::__shared_weak_count *v653;
  unint64_t *v654;
  unint64_t v655;
  std::__shared_weak_count *v656;
  unint64_t *v657;
  unint64_t v658;
  std::__shared_weak_count *v659;
  unint64_t *v660;
  unint64_t v661;
  char v662;
  uint64_t *v663;
  char v664;
  char v665;
  void *v667;
  uint64_t v668;
  std::__shared_weak_count *v669;
  __int128 v670;
  uint64_t v671;
  std::__shared_weak_count *v672;
  void *v673;
  std::__shared_weak_count *v674;
  uint64_t v675;
  std::__shared_weak_count *v676;
  void *v677;
  std::__shared_weak_count *v678;
  uint64_t v679;
  std::__shared_weak_count *v680;
  void *v681;
  std::__shared_weak_count *v682;
  void *v683[7];
  __int128 v684;
  __int128 v685;
  uint64_t (**v686)();
  __int128 v687;
  uint64_t v688;
  uint64_t (**v689)();
  __int128 v690;
  uint64_t (**v691)();
  __int128 v692;
  uint64_t v693;
  std::__shared_weak_count *v694;
  void *v695;
  std::__shared_weak_count *v696;
  void *v697[7];
  __int128 v698;
  __int128 v699;
  uint64_t (**v700)();
  __int128 v701;
  uint64_t v702;
  uint64_t (**v703)();
  __int128 v704;
  uint64_t (**v705)();
  __int128 v706;
  uint64_t v707;
  std::__shared_weak_count *v708;
  void *v709;
  std::__shared_weak_count *v710;
  void *v711[3];
  uint64_t v712;
  __int128 v713;
  uint64_t v714;
  __int128 v715;
  __int128 v716;
  __int128 v717;
  uint64_t v718;
  __int128 v719;
  __int128 v720;
  uint64_t v721;
  std::__shared_weak_count *v722;
  void *v723;
  std::__shared_weak_count *v724;
  void *v725[7];
  __int128 v726;
  __int128 v727;
  uint64_t (**v728)();
  __int128 v729;
  uint64_t v730;
  uint64_t (**v731)();
  __int128 v732;
  uint64_t (**v733)();
  __int128 v734;
  uint64_t v735;
  std::__shared_weak_count *v736;
  void *v737;
  std::__shared_weak_count *v738;
  void *v739[7];
  __int128 v740;
  __int128 v741;
  uint64_t (**v742)();
  __int128 v743;
  uint64_t v744;
  uint64_t (**v745)();
  __int128 v746;
  uint64_t (**v747)();
  __int128 v748;
  uint64_t v749;
  std::__shared_weak_count *v750;
  void *v751;
  std::__shared_weak_count *v752;
  void *__p[7];
  __int128 v754;
  __int128 v755;
  uint64_t (**v756)();
  __int128 v757;
  uint64_t v758;
  uint64_t (**v759)();
  __int128 v760;
  uint64_t (**v761)();
  __int128 v762;
  uint64_t v763;
  std::__shared_weak_count *v764;
  void *v765;
  std::__shared_weak_count *v766;
  void *__dst[3];
  uint64_t v768;
  __int128 v769;
  uint64_t v770;
  __int128 v771;
  __int128 v772;
  __int128 v773;
  uint64_t v774;
  __int128 v775;
  __int128 v776;
  uint64_t v777;
  std::__shared_weak_count *v778;
  uint64_t v779;
  std::__shared_weak_count *v780;
  _QWORD v781[7];
  __int128 v782;
  __int128 v783;
  uint64_t (**v784)();
  __int128 v785;
  uint64_t v786;
  uint64_t (**v787)();
  __int128 v788;
  uint64_t (**v789)();
  __int128 v790;
  uint64_t v791;
  std::__shared_weak_count *v792;
  void *v793[3];
  uint64_t v794;
  __int128 v795;
  uint64_t v796;
  __int128 v797;
  __int128 v798;
  __int128 v799;
  uint64_t v800;
  __int128 v801;
  __int128 v802;
  void *v803[7];
  __int128 v804;
  __int128 v805;
  uint64_t (**v806)();
  __int128 v807;
  uint64_t v808;
  uint64_t (**v809)();
  __int128 v810;
  uint64_t (**v811)();
  __int128 v812;
  void *v813[7];
  __int128 v814;
  __int128 v815;
  uint64_t (**v816)();
  __int128 v817;
  uint64_t v818;
  uint64_t (**v819)();
  __int128 v820;
  uint64_t (**v821)();
  __int128 v822;
  __int128 v823;
  __int128 v824;
  void *v825[3];
  __int128 v826;
  _QWORD v827[2];
  _QWORD v828[2];
  __int128 v829;
  _QWORD v830[2];
  __int128 v831;
  _QWORD v832[5];

  v832[2] = *MEMORY[0x24BDAC8D0];
  v3 = (unint64_t *)operator new(0x58uLL);
  v3[1] = 0;
  v4 = v3 + 1;
  v3[2] = 0;
  *v3 = (unint64_t)&unk_24C9B6A90;
  v791 = MEMORY[0x212BC5E10](v3 + 3);
  v792 = (std::__shared_weak_count *)v3;
  v667 = (void *)v791;
  v779 = v791;
  v780 = (std::__shared_weak_count *)v3;
  do
    v5 = __ldxr(v4);
  while (__stxr(v5 + 1, v4));
  v6 = *a2;
  v7 = (unint64_t *)a2[1];
  v777 = *a2;
  v778 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    v8 = v7 + 1;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  if (*(char *)(v6 + 31) < 0)
  {
    sub_20E860C04(__dst, *(void **)(v6 + 8), *(_QWORD *)(v6 + 16));
  }
  else
  {
    v10 = *(_OWORD *)(v6 + 8);
    __dst[2] = *(void **)(v6 + 24);
    *(_OWORD *)__dst = v10;
  }
  if (*(char *)(v6 + 55) < 0)
  {
    sub_20E860C04(__p, *(void **)(v6 + 32), *(_QWORD *)(v6 + 40));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(v6 + 32);
    __p[2] = *(void **)(v6 + 48);
  }
  v663 = a1;
  v780 = 0;
  v779 = 0;
  v683[0] = (void *)v6;
  v683[1] = v7;
  if (v7)
  {
    v11 = v7 + 1;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = __dst[0];
  v793[0] = __dst[1];
  *(void **)((char *)v793 + 7) = *(void **)((char *)&__dst[1] + 7);
  v664 = HIBYTE(__dst[2]);
  memset(__dst, 0, sizeof(__dst));
  v14 = __p[0];
  v825[0] = __p[1];
  *(void **)((char *)v825 + 7) = *(void **)((char *)&__p[1] + 7);
  v15 = HIBYTE(__p[2]);
  memset(__p, 0, 24);
  v697[1] = 0;
  v697[0] = 0;
  v803[0] = 0;
  *(void **)((char *)v803 + 7) = 0;
  v711[1] = 0;
  v711[0] = 0;
  v16 = (char *)operator new();
  v813[0] = v803[0];
  *(void **)((char *)v813 + 7) = *(void **)((char *)v803 + 7);
  v803[0] = 0;
  *(void **)((char *)v803 + 7) = 0;
  v725[1] = 0;
  v725[0] = 0;
  v16[8] = 1;
  *((_QWORD *)v16 + 4) = 0;
  *((_QWORD *)v16 + 5) = 0;
  *(_QWORD *)v16 = &off_24C9EC208;
  *((_QWORD *)v16 + 2) = &unk_24C9EC280;
  *((_QWORD *)v16 + 3) = &unk_24C9EC2C0;
  v17 = v813[0];
  *(void **)(v16 + 63) = *(void **)((char *)v813 + 7);
  *((_QWORD *)v16 + 6) = 0;
  *((_QWORD *)v16 + 7) = v17;
  v16[71] = 0;
  v813[0] = 0;
  *(void **)((char *)v813 + 7) = 0;
  *((_QWORD *)v16 + 9) = v667;
  *((_QWORD *)v16 + 10) = v3;
  v739[1] = 0;
  v739[0] = 0;
  v18 = (_QWORD *)operator new();
  *v18 = &off_24C9EC3B8;
  v18[1] = v6;
  v18[2] = v7;
  v683[0] = 0;
  v683[1] = 0;
  *((_QWORD *)v16 + 11) = v18;
  *((_QWORD *)v16 + 12) = v16 + 96;
  *((_QWORD *)v16 + 13) = v16 + 96;
  *((_QWORD *)v16 + 14) = 0;
  *((_QWORD *)v16 + 15) = v16 + 120;
  *((_QWORD *)v16 + 16) = v16 + 120;
  *((_QWORD *)v16 + 17) = 0;
  v19 = (std::__shared_weak_count *)operator new();
  v19->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v19->__shared_owners_;
  v19->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9EC408;
  v19->__shared_weak_owners_ = 0;
  v19[1].__vftable = (std::__shared_weak_count_vtbl *)v16;
  v21 = (std::__shared_weak_count *)*((_QWORD *)v16 + 5);
  if (v21)
  {
    if (v21->__shared_owners_ != -1)
      goto LABEL_28;
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v19->__shared_weak_owners_;
    do
      v24 = __ldxr(p_shared_weak_owners);
    while (__stxr(v24 + 1, p_shared_weak_owners));
    *((_QWORD *)v16 + 4) = v16;
    *((_QWORD *)v16 + 5) = v19;
    std::__shared_weak_count::__release_weak(v21);
  }
  else
  {
    do
      v25 = __ldxr(p_shared_owners);
    while (__stxr(v25 + 1, p_shared_owners));
    v26 = (unint64_t *)&v19->__shared_weak_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
    *((_QWORD *)v16 + 4) = v16;
    *((_QWORD *)v16 + 5) = v19;
  }
  do
    v28 = __ldaxr(p_shared_owners);
  while (__stlxr(v28 - 1, p_shared_owners));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
LABEL_28:
  if (v739[1])
  {
    v29 = (unint64_t *)((char *)v739[1] + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      (*(void (**)(void *))(*(_QWORD *)v739[1] + 16))(v739[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v739[1]);
    }
  }
  v739[0] = v16;
  v739[1] = v19;
  if (v725[1])
  {
    v31 = (unint64_t *)((char *)v725[1] + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      (*(void (**)(void *))(*(_QWORD *)v725[1] + 16))(v725[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v725[1]);
    }
  }
  v781[0] = &off_24C9EBEC8;
  v781[1] = v13;
  v781[2] = v793[0];
  *(void **)((char *)&v781[2] + 7) = *(void **)((char *)v793 + 7);
  HIBYTE(v781[3]) = v664;
  v793[0] = 0;
  *(void **)((char *)v793 + 7) = 0;
  v781[4] = v14;
  v781[5] = v825[0];
  *(void **)((char *)&v781[5] + 7) = *(void **)((char *)v825 + 7);
  HIBYTE(v781[6]) = v15;
  v825[0] = 0;
  *(void **)((char *)v825 + 7) = 0;
  v782 = 0uLL;
  v725[1] = 0;
  v725[0] = 0;
  v33 = v739[0];
  v34 = (char *)v739[1];
  v783 = *(_OWORD *)v739;
  v739[0] = 0;
  v739[1] = 0;
  if (*((_QWORD *)&v783 + 1))
  {
    v35 = (unint64_t *)(v34 + 16);
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  v784 = &off_24C9EBEF8;
  v37 = (_QWORD *)operator new();
  *v37 = &off_24C9EC458;
  v37[1] = v33;
  v37[2] = v34;
  *(_QWORD *)&v785 = v37;
  v39 = *((_QWORD *)&v783 + 1);
  v38 = v783;
  if (!*((_QWORD *)&v783 + 1))
  {
    *((_QWORD *)&v785 + 1) = v783;
    v786 = 0;
    if ((_QWORD)v783)
      v43 = v783 + 16;
    else
      v43 = 0;
    goto LABEL_58;
  }
  v40 = (unint64_t *)(*((_QWORD *)&v783 + 1) + 16);
  do
    v41 = __ldxr(v40);
  while (__stxr(v41 + 1, v40));
  v42 = *((_QWORD *)&v783 + 1);
  *((_QWORD *)&v785 + 1) = v38;
  v786 = v39;
  if ((_QWORD)v783)
    v43 = v783 + 16;
  else
    v43 = 0;
  if (!*((_QWORD *)&v783 + 1))
  {
    v38 = v783;
LABEL_58:
    v46 = 0;
    v787 = &off_24C9EBF30;
    v788 = v43;
    goto LABEL_59;
  }
  v44 = (unint64_t *)(*((_QWORD *)&v783 + 1) + 16);
  do
    v45 = __ldxr(v44);
  while (__stxr(v45 + 1, v44));
  v46 = *((_QWORD *)&v783 + 1);
  v38 = v783;
  v787 = &off_24C9EBF30;
  *(_QWORD *)&v788 = v43;
  *((_QWORD *)&v788 + 1) = v42;
  if (*((_QWORD *)&v783 + 1))
  {
    v47 = (unint64_t *)(*((_QWORD *)&v783 + 1) + 16);
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
  }
LABEL_59:
  if (v38)
    v49 = v38 + 24;
  else
    v49 = 0;
  v789 = &off_24C9B2310;
  *(_QWORD *)&v790 = v49;
  *((_QWORD *)&v790 + 1) = v46;
  if (v711[1])
  {
    v50 = (unint64_t *)((char *)v711[1] + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      (*(void (**)(void *))(*(_QWORD *)v711[1] + 16))(v711[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v711[1]);
    }
  }
  if (v683[1])
  {
    v52 = (unint64_t *)((char *)v683[1] + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      (*(void (**)(void *))(*(_QWORD *)v683[1] + 16))(v683[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v683[1]);
    }
  }
  if (!v697[1])
    goto LABEL_76;
  v54 = (unint64_t *)((char *)v697[1] + 8);
  do
    v55 = __ldaxr(v54);
  while (__stlxr(v55 - 1, v54));
  if (!v55)
  {
    (*(void (**)(void *))(*(_QWORD *)v697[1] + 16))(v697[1]);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v697[1]);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
    {
LABEL_77:
      if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
        goto LABEL_78;
      goto LABEL_82;
    }
  }
  else
  {
LABEL_76:
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      goto LABEL_77;
  }
  operator delete(__p[0]);
  if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
LABEL_78:
    if (v777)
      goto LABEL_84;
    goto LABEL_83;
  }
LABEL_82:
  operator delete(__dst[0]);
  if (v777)
    goto LABEL_84;
LABEL_83:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 534, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_84:
  v765 = v667;
  v766 = (std::__shared_weak_count *)v3;
  do
    v56 = __ldxr(v4);
  while (__stxr(v56 + 1, v4));
  v57 = *a2;
  v58 = (unint64_t *)a2[1];
  if (*a2)
    v59 = *a2 + 56;
  else
    v59 = 0;
  v763 = v59;
  v764 = (std::__shared_weak_count *)v58;
  if (v58)
  {
    v60 = v58 + 1;
    do
      v61 = __ldxr(v60);
    while (__stxr(v61 + 1, v60));
  }
  if (*(char *)(v59 + 31) < 0)
  {
    sub_20E860C04(v725, *(void **)(v59 + 8), *(_QWORD *)(v59 + 16));
  }
  else
  {
    v62 = *(_OWORD *)(v59 + 8);
    v725[2] = *(void **)(v59 + 24);
    *(_OWORD *)v725 = v62;
  }
  if (*(char *)(v57 + 111) < 0)
  {
    sub_20E860C04(v711, *(void **)(v57 + 88), *(_QWORD *)(v57 + 96));
  }
  else
  {
    *(_OWORD *)v711 = *(_OWORD *)(v57 + 88);
    v711[2] = *(void **)(v57 + 104);
  }
  v766 = 0;
  v765 = 0;
  v793[0] = (void *)v59;
  v793[1] = v58;
  if (v58)
  {
    v63 = v58 + 1;
    do
      v64 = __ldxr(v63);
    while (__stxr(v64 + 1, v63));
  }
  __p[2] = v725[2];
  v739[2] = v711[2];
  *(_OWORD *)__p = *(_OWORD *)v725;
  memset(v725, 0, 24);
  *(_OWORD *)v739 = *(_OWORD *)v711;
  memset(v711, 0, sizeof(v711));
  v803[1] = 0;
  v803[0] = 0;
  *(_QWORD *)&v831 = 0;
  *(_QWORD *)((char *)&v831 + 7) = 0;
  v683[0] = v667;
  v683[1] = v3;
  v813[1] = 0;
  v813[0] = 0;
  v65 = (char *)operator new();
  v825[0] = (void *)v831;
  *(void **)((char *)v825 + 7) = *(void **)((char *)&v831 + 7);
  *(_QWORD *)&v831 = 0;
  *(_QWORD *)((char *)&v831 + 7) = 0;
  v66 = *(_OWORD *)v683;
  v683[0] = 0;
  v683[1] = 0;
  v65[8] = 1;
  *((_QWORD *)v65 + 4) = 0;
  *((_QWORD *)v65 + 5) = 0;
  *(_QWORD *)v65 = &off_24C9EC4D0;
  *((_QWORD *)v65 + 2) = &unk_24C9EC548;
  *((_QWORD *)v65 + 3) = &unk_24C9EC588;
  v67 = v825[0];
  *(void **)(v65 + 63) = *(void **)((char *)v825 + 7);
  *((_QWORD *)v65 + 6) = 0;
  *((_QWORD *)v65 + 7) = v67;
  v65[71] = 0;
  v825[0] = 0;
  *(void **)((char *)v825 + 7) = 0;
  *(_OWORD *)(v65 + 72) = v66;
  v697[1] = 0;
  v697[0] = 0;
  v68 = (_QWORD *)operator new();
  *v68 = &off_24C9EC600;
  v68[1] = v59;
  v68[2] = v58;
  v793[1] = 0;
  v793[0] = 0;
  *((_QWORD *)v65 + 11) = v68;
  *((_QWORD *)v65 + 12) = v65 + 96;
  *((_QWORD *)v65 + 13) = v65 + 96;
  *((_QWORD *)v65 + 14) = 0;
  *((_QWORD *)v65 + 15) = v65 + 120;
  *((_QWORD *)v65 + 16) = v65 + 120;
  *((_QWORD *)v65 + 17) = 0;
  v69 = (std::__shared_weak_count *)operator new();
  v69->__shared_owners_ = 0;
  v70 = (unint64_t *)&v69->__shared_owners_;
  v69->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9EC640;
  v69->__shared_weak_owners_ = 0;
  v69[1].__vftable = (std::__shared_weak_count_vtbl *)v65;
  v71 = (std::__shared_weak_count *)*((_QWORD *)v65 + 5);
  if (v71)
  {
    if (v71->__shared_owners_ != -1)
      goto LABEL_114;
    do
      v72 = __ldxr(v70);
    while (__stxr(v72 + 1, v70));
    v73 = (unint64_t *)&v69->__shared_weak_owners_;
    do
      v74 = __ldxr(v73);
    while (__stxr(v74 + 1, v73));
    *((_QWORD *)v65 + 4) = v65;
    *((_QWORD *)v65 + 5) = v69;
    std::__shared_weak_count::__release_weak(v71);
  }
  else
  {
    do
      v75 = __ldxr(v70);
    while (__stxr(v75 + 1, v70));
    v76 = (unint64_t *)&v69->__shared_weak_owners_;
    do
      v77 = __ldxr(v76);
    while (__stxr(v77 + 1, v76));
    *((_QWORD *)v65 + 4) = v65;
    *((_QWORD *)v65 + 5) = v69;
  }
  do
    v78 = __ldaxr(v70);
  while (__stlxr(v78 - 1, v70));
  if (!v78)
  {
    ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
    std::__shared_weak_count::__release_weak(v69);
  }
LABEL_114:
  if (v697[1])
  {
    v79 = (unint64_t *)((char *)v697[1] + 8);
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      (*(void (**)(void *))(*(_QWORD *)v697[1] + 16))(v697[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v697[1]);
    }
  }
  v697[0] = v65;
  v697[1] = v69;
  if (v683[1])
  {
    v81 = (unint64_t *)((char *)v683[1] + 8);
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      (*(void (**)(void *))(*(_QWORD *)v683[1] + 16))(v683[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v683[1]);
    }
  }
  v683[0] = 0;
  v683[1] = 0;
  sub_20ECB3678((uint64_t)__dst, (__int128 *)__p, (__int128 *)v739, (uint64_t)v697, (uint64_t)v683);
  v83 = (std::__shared_weak_count *)v683[1];
  if (v683[1])
  {
    v84 = (unint64_t *)((char *)v683[1] + 8);
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  v86 = (std::__shared_weak_count *)v697[1];
  if (v697[1])
  {
    v87 = (unint64_t *)((char *)v697[1] + 8);
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = (std::__shared_weak_count *)v813[1];
  if (!v813[1])
    goto LABEL_138;
  v90 = (unint64_t *)((char *)v813[1] + 8);
  do
    v91 = __ldaxr(v90);
  while (__stlxr(v91 - 1, v90));
  if (!v91)
  {
    ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
    std::__shared_weak_count::__release_weak(v89);
    if ((SHIBYTE(v739[2]) & 0x80000000) == 0)
    {
LABEL_139:
      if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
        goto LABEL_140;
LABEL_144:
      operator delete(__p[0]);
      v92 = (std::__shared_weak_count *)v793[1];
      if (!v793[1])
        goto LABEL_149;
      goto LABEL_145;
    }
  }
  else
  {
LABEL_138:
    if ((SHIBYTE(v739[2]) & 0x80000000) == 0)
      goto LABEL_139;
  }
  operator delete(v739[0]);
  if (SHIBYTE(__p[2]) < 0)
    goto LABEL_144;
LABEL_140:
  v92 = (std::__shared_weak_count *)v793[1];
  if (!v793[1])
    goto LABEL_149;
LABEL_145:
  v93 = (unint64_t *)&v92->__shared_owners_;
  do
    v94 = __ldaxr(v93);
  while (__stlxr(v94 - 1, v93));
  if (!v94)
  {
    ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
    std::__shared_weak_count::__release_weak(v92);
  }
LABEL_149:
  v95 = (std::__shared_weak_count *)v803[1];
  if (!v803[1])
    goto LABEL_153;
  v96 = (unint64_t *)((char *)v803[1] + 8);
  do
    v97 = __ldaxr(v96);
  while (__stlxr(v97 - 1, v96));
  if (!v97)
  {
    ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
    std::__shared_weak_count::__release_weak(v95);
    if ((SHIBYTE(v711[2]) & 0x80000000) == 0)
    {
LABEL_154:
      if ((SHIBYTE(v725[2]) & 0x80000000) == 0)
        goto LABEL_155;
      goto LABEL_159;
    }
  }
  else
  {
LABEL_153:
    if ((SHIBYTE(v711[2]) & 0x80000000) == 0)
      goto LABEL_154;
  }
  operator delete(v711[0]);
  if ((SHIBYTE(v725[2]) & 0x80000000) == 0)
  {
LABEL_155:
    if (v763)
      goto LABEL_161;
    goto LABEL_160;
  }
LABEL_159:
  operator delete(v725[0]);
  if (v763)
    goto LABEL_161;
LABEL_160:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 534, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_161:
  v751 = v667;
  v752 = (std::__shared_weak_count *)v3;
  do
    v98 = __ldxr(v4);
  while (__stxr(v98 + 1, v4));
  v99 = *a2;
  v100 = (unint64_t *)a2[1];
  if (*a2)
    v101 = *a2 + 112;
  else
    v101 = 0;
  v749 = v101;
  v750 = (std::__shared_weak_count *)v100;
  if (v100)
  {
    v102 = v100 + 1;
    do
      v103 = __ldxr(v102);
    while (__stxr(v103 + 1, v102));
  }
  if (*(char *)(v101 + 31) < 0)
  {
    sub_20E860C04(v739, *(void **)(v101 + 8), *(_QWORD *)(v101 + 16));
  }
  else
  {
    v104 = *(_OWORD *)(v101 + 8);
    v739[2] = *(void **)(v101 + 24);
    *(_OWORD *)v739 = v104;
  }
  if (*(char *)(v99 + 167) < 0)
  {
    sub_20E860C04(v725, *(void **)(v99 + 144), *(_QWORD *)(v99 + 152));
  }
  else
  {
    *(_OWORD *)v725 = *(_OWORD *)(v99 + 144);
    v725[2] = *(void **)(v99 + 160);
  }
  v752 = 0;
  v751 = 0;
  v803[0] = (void *)v101;
  v803[1] = v100;
  if (v100)
  {
    v105 = v100 + 1;
    do
      v106 = __ldxr(v105);
    while (__stxr(v106 + 1, v105));
  }
  v107 = v739[0];
  *(void **)&v831 = v739[1];
  *(void **)((char *)&v831 + 7) = *(void **)((char *)&v739[1] + 7);
  v108 = HIBYTE(v739[2]);
  memset(v739, 0, 24);
  v109 = v725[0];
  *(void **)&v829 = v725[1];
  *(void **)((char *)&v829 + 7) = *(void **)((char *)&v725[1] + 7);
  v110 = HIBYTE(v725[2]);
  memset(v725, 0, 24);
  v813[1] = 0;
  v813[0] = 0;
  v825[0] = 0;
  *(void **)((char *)v825 + 7) = 0;
  v697[0] = v667;
  v697[1] = v3;
  v683[0] = 0;
  v683[1] = 0;
  v111 = (char *)operator new();
  v793[0] = v825[0];
  *(void **)((char *)v793 + 7) = *(void **)((char *)v825 + 7);
  v825[0] = 0;
  *(void **)((char *)v825 + 7) = 0;
  v697[1] = 0;
  v697[0] = 0;
  v111[8] = 1;
  *((_QWORD *)v111 + 4) = 0;
  *((_QWORD *)v111 + 5) = 0;
  *(_QWORD *)v111 = &off_24C9EC690;
  *((_QWORD *)v111 + 2) = &unk_24C9EC708;
  *((_QWORD *)v111 + 3) = &unk_24C9EC748;
  v112 = v793[0];
  *(void **)(v111 + 63) = *(void **)((char *)v793 + 7);
  *((_QWORD *)v111 + 6) = 0;
  *((_QWORD *)v111 + 7) = v112;
  v111[71] = 0;
  v793[0] = 0;
  *(void **)((char *)v793 + 7) = 0;
  *((_QWORD *)v111 + 9) = v667;
  *((_QWORD *)v111 + 10) = v3;
  v711[1] = 0;
  v711[0] = 0;
  v113 = (_QWORD *)operator new();
  *v113 = &off_24C9EC820;
  v113[1] = v101;
  v113[2] = v100;
  v803[1] = 0;
  v803[0] = 0;
  *((_QWORD *)v111 + 11) = v113;
  *((_QWORD *)v111 + 12) = v111 + 96;
  *((_QWORD *)v111 + 13) = v111 + 96;
  *((_QWORD *)v111 + 14) = 0;
  *((_QWORD *)v111 + 15) = v111 + 120;
  *((_QWORD *)v111 + 16) = v111 + 120;
  *((_QWORD *)v111 + 17) = 0;
  v114 = (std::__shared_weak_count *)operator new();
  v114->__shared_owners_ = 0;
  v115 = (unint64_t *)&v114->__shared_owners_;
  v114->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9EC870;
  v114->__shared_weak_owners_ = 0;
  v114[1].__vftable = (std::__shared_weak_count_vtbl *)v111;
  v116 = (std::__shared_weak_count *)*((_QWORD *)v111 + 5);
  if (v116)
  {
    if (v116->__shared_owners_ != -1)
      goto LABEL_191;
    do
      v117 = __ldxr(v115);
    while (__stxr(v117 + 1, v115));
    v118 = (unint64_t *)&v114->__shared_weak_owners_;
    do
      v119 = __ldxr(v118);
    while (__stxr(v119 + 1, v118));
    *((_QWORD *)v111 + 4) = v111;
    *((_QWORD *)v111 + 5) = v114;
    std::__shared_weak_count::__release_weak(v116);
  }
  else
  {
    do
      v120 = __ldxr(v115);
    while (__stxr(v120 + 1, v115));
    v121 = (unint64_t *)&v114->__shared_weak_owners_;
    do
      v122 = __ldxr(v121);
    while (__stxr(v122 + 1, v121));
    *((_QWORD *)v111 + 4) = v111;
    *((_QWORD *)v111 + 5) = v114;
  }
  do
    v123 = __ldaxr(v115);
  while (__stlxr(v123 - 1, v115));
  if (!v123)
  {
    ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
    std::__shared_weak_count::__release_weak(v114);
  }
LABEL_191:
  v124 = (std::__shared_weak_count *)v711[1];
  if (v711[1])
  {
    v125 = (unint64_t *)((char *)v711[1] + 8);
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v711[0] = v111;
  v711[1] = v114;
  v127 = (std::__shared_weak_count *)v697[1];
  if (v697[1])
  {
    v128 = (unint64_t *)((char *)v697[1] + 8);
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
  __p[0] = &off_24C9EBF68;
  __p[1] = v107;
  __p[2] = (void *)v831;
  *(void **)((char *)&__p[2] + 7) = *(void **)((char *)&v831 + 7);
  HIBYTE(__p[3]) = v108;
  *(_QWORD *)&v831 = 0;
  *(_QWORD *)((char *)&v831 + 7) = 0;
  __p[4] = v109;
  __p[5] = (void *)v829;
  *(void **)((char *)&__p[5] + 7) = *(void **)((char *)&v829 + 7);
  HIBYTE(__p[6]) = v110;
  *(_QWORD *)&v829 = 0;
  *(_QWORD *)((char *)&v829 + 7) = 0;
  v754 = 0uLL;
  v697[1] = 0;
  v697[0] = 0;
  v130 = v711[0];
  v131 = (char *)v711[1];
  v755 = *(_OWORD *)v711;
  v711[0] = 0;
  v711[1] = 0;
  if (*((_QWORD *)&v755 + 1))
  {
    v132 = (unint64_t *)(v131 + 16);
    do
      v133 = __ldxr(v132);
    while (__stxr(v133 + 1, v132));
  }
  v756 = &off_24C9E10B0;
  v134 = (_QWORD *)operator new();
  *v134 = &off_24C9E1290;
  v134[1] = v130;
  v134[2] = v131;
  *(_QWORD *)&v757 = v134;
  v136 = *((_QWORD *)&v755 + 1);
  v135 = v755;
  if (!*((_QWORD *)&v755 + 1))
  {
    *((_QWORD *)&v757 + 1) = v755;
    v758 = 0;
    if ((_QWORD)v755)
      v140 = v755 + 16;
    else
      v140 = 0;
    goto LABEL_221;
  }
  v137 = (unint64_t *)(*((_QWORD *)&v755 + 1) + 16);
  do
    v138 = __ldxr(v137);
  while (__stxr(v138 + 1, v137));
  v139 = *((_QWORD *)&v755 + 1);
  *((_QWORD *)&v757 + 1) = v135;
  v758 = v136;
  if ((_QWORD)v755)
    v140 = v755 + 16;
  else
    v140 = 0;
  if (!*((_QWORD *)&v755 + 1))
  {
    v135 = v755;
LABEL_221:
    v143 = 0;
    v759 = &off_24C9EB528;
    v760 = v140;
    goto LABEL_222;
  }
  v141 = (unint64_t *)(*((_QWORD *)&v755 + 1) + 16);
  do
    v142 = __ldxr(v141);
  while (__stxr(v142 + 1, v141));
  v143 = *((_QWORD *)&v755 + 1);
  v135 = v755;
  v759 = &off_24C9EB528;
  *(_QWORD *)&v760 = v140;
  *((_QWORD *)&v760 + 1) = v139;
  if (*((_QWORD *)&v755 + 1))
  {
    v144 = (unint64_t *)(*((_QWORD *)&v755 + 1) + 16);
    do
      v145 = __ldxr(v144);
    while (__stxr(v145 + 1, v144));
  }
LABEL_222:
  if (v135)
    v146 = v135 + 24;
  else
    v146 = 0;
  v761 = &off_24C9B2310;
  *(_QWORD *)&v762 = v146;
  *((_QWORD *)&v762 + 1) = v143;
  v147 = (std::__shared_weak_count *)v683[1];
  if (v683[1])
  {
    v148 = (unint64_t *)((char *)v683[1] + 8);
    do
      v149 = __ldaxr(v148);
    while (__stlxr(v149 - 1, v148));
    if (!v149)
    {
      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
      std::__shared_weak_count::__release_weak(v147);
    }
  }
  v150 = (std::__shared_weak_count *)v803[1];
  if (v803[1])
  {
    v151 = (unint64_t *)((char *)v803[1] + 8);
    do
      v152 = __ldaxr(v151);
    while (__stlxr(v152 - 1, v151));
    if (!v152)
    {
      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
      std::__shared_weak_count::__release_weak(v150);
    }
  }
  v153 = (std::__shared_weak_count *)v813[1];
  if (!v813[1])
    goto LABEL_239;
  v154 = (unint64_t *)((char *)v813[1] + 8);
  do
    v155 = __ldaxr(v154);
  while (__stlxr(v155 - 1, v154));
  if (!v155)
  {
    ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
    std::__shared_weak_count::__release_weak(v153);
    if ((SHIBYTE(v725[2]) & 0x80000000) == 0)
    {
LABEL_240:
      if ((SHIBYTE(v739[2]) & 0x80000000) == 0)
        goto LABEL_241;
      goto LABEL_245;
    }
  }
  else
  {
LABEL_239:
    if ((SHIBYTE(v725[2]) & 0x80000000) == 0)
      goto LABEL_240;
  }
  operator delete(v725[0]);
  if ((SHIBYTE(v739[2]) & 0x80000000) == 0)
  {
LABEL_241:
    if (v749)
      goto LABEL_247;
    goto LABEL_246;
  }
LABEL_245:
  operator delete(v739[0]);
  if (v749)
    goto LABEL_247;
LABEL_246:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 534, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_247:
  v737 = v667;
  v738 = (std::__shared_weak_count *)v3;
  do
    v156 = __ldxr(v4);
  while (__stxr(v156 + 1, v4));
  v157 = *a2;
  v158 = (unint64_t *)a2[1];
  if (*a2)
    v159 = *a2 + 168;
  else
    v159 = 0;
  v735 = v159;
  v736 = (std::__shared_weak_count *)v158;
  if (v158)
  {
    v160 = v158 + 1;
    do
      v161 = __ldxr(v160);
    while (__stxr(v161 + 1, v160));
  }
  if (*(char *)(v159 + 31) < 0)
  {
    sub_20E860C04(v725, *(void **)(v159 + 8), *(_QWORD *)(v159 + 16));
  }
  else
  {
    v162 = *(_OWORD *)(v159 + 8);
    v725[2] = *(void **)(v159 + 24);
    *(_OWORD *)v725 = v162;
  }
  if (*(char *)(v157 + 223) < 0)
  {
    sub_20E860C04(v711, *(void **)(v157 + 200), *(_QWORD *)(v157 + 208));
  }
  else
  {
    *(_OWORD *)v711 = *(_OWORD *)(v157 + 200);
    v711[2] = *(void **)(v157 + 216);
  }
  v738 = 0;
  v737 = 0;
  v793[0] = (void *)v159;
  v793[1] = v158;
  if (v158)
  {
    v163 = v158 + 1;
    do
      v164 = __ldxr(v163);
    while (__stxr(v164 + 1, v163));
  }
  v165 = v725[0];
  *(void **)&v829 = v725[1];
  *(void **)((char *)&v829 + 7) = *(void **)((char *)&v725[1] + 7);
  v665 = HIBYTE(v725[2]);
  memset(v725, 0, 24);
  v166 = v711[0];
  *(void **)&v826 = v711[1];
  *(void **)((char *)&v826 + 7) = *(void **)((char *)&v711[1] + 7);
  v167 = HIBYTE(v711[2]);
  memset(v711, 0, sizeof(v711));
  v803[1] = 0;
  v803[0] = 0;
  *(_QWORD *)&v831 = 0;
  *(_QWORD *)((char *)&v831 + 7) = 0;
  v683[0] = v667;
  v683[1] = v3;
  v813[1] = 0;
  v813[0] = 0;
  v168 = (char *)operator new();
  v825[0] = (void *)v831;
  *(void **)((char *)v825 + 7) = *(void **)((char *)&v831 + 7);
  *(_QWORD *)&v831 = 0;
  *(_QWORD *)((char *)&v831 + 7) = 0;
  v683[0] = 0;
  v683[1] = 0;
  v168[8] = 1;
  *((_QWORD *)v168 + 4) = 0;
  *((_QWORD *)v168 + 5) = 0;
  *(_QWORD *)v168 = &off_24C9EC8C0;
  *((_QWORD *)v168 + 2) = &unk_24C9EC938;
  *((_QWORD *)v168 + 3) = &unk_24C9EC978;
  v169 = v825[0];
  *(void **)(v168 + 63) = *(void **)((char *)v825 + 7);
  *((_QWORD *)v168 + 6) = 0;
  *((_QWORD *)v168 + 7) = v169;
  v168[71] = 0;
  v825[0] = 0;
  *(void **)((char *)v825 + 7) = 0;
  *((_QWORD *)v168 + 9) = v667;
  *((_QWORD *)v168 + 10) = v3;
  v697[1] = 0;
  v697[0] = 0;
  v170 = (_QWORD *)operator new();
  *v170 = &off_24C9ECA60;
  v170[1] = v159;
  v170[2] = v158;
  v793[1] = 0;
  v793[0] = 0;
  *((_QWORD *)v168 + 11) = v170;
  *((_QWORD *)v168 + 12) = v168 + 96;
  *((_QWORD *)v168 + 13) = v168 + 96;
  *((_QWORD *)v168 + 14) = 0;
  *((_QWORD *)v168 + 15) = v168 + 120;
  *((_QWORD *)v168 + 16) = v168 + 120;
  *((_QWORD *)v168 + 17) = 0;
  v171 = (std::__shared_weak_count *)operator new();
  v171->__shared_owners_ = 0;
  v172 = (unint64_t *)&v171->__shared_owners_;
  v171->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ECAB0;
  v171->__shared_weak_owners_ = 0;
  v171[1].__vftable = (std::__shared_weak_count_vtbl *)v168;
  v173 = (std::__shared_weak_count *)*((_QWORD *)v168 + 5);
  if (v173)
  {
    if (v173->__shared_owners_ != -1)
      goto LABEL_277;
    do
      v174 = __ldxr(v172);
    while (__stxr(v174 + 1, v172));
    v175 = (unint64_t *)&v171->__shared_weak_owners_;
    do
      v176 = __ldxr(v175);
    while (__stxr(v176 + 1, v175));
    *((_QWORD *)v168 + 4) = v168;
    *((_QWORD *)v168 + 5) = v171;
    std::__shared_weak_count::__release_weak(v173);
  }
  else
  {
    do
      v177 = __ldxr(v172);
    while (__stxr(v177 + 1, v172));
    v178 = (unint64_t *)&v171->__shared_weak_owners_;
    do
      v179 = __ldxr(v178);
    while (__stxr(v179 + 1, v178));
    *((_QWORD *)v168 + 4) = v168;
    *((_QWORD *)v168 + 5) = v171;
  }
  do
    v180 = __ldaxr(v172);
  while (__stlxr(v180 - 1, v172));
  if (!v180)
  {
    ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
    std::__shared_weak_count::__release_weak(v171);
  }
LABEL_277:
  v181 = (std::__shared_weak_count *)v697[1];
  if (v697[1])
  {
    v182 = (unint64_t *)((char *)v697[1] + 8);
    do
      v183 = __ldaxr(v182);
    while (__stlxr(v183 - 1, v182));
    if (!v183)
    {
      ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
      std::__shared_weak_count::__release_weak(v181);
    }
  }
  v697[0] = v168;
  v697[1] = v171;
  v184 = (std::__shared_weak_count *)v683[1];
  if (v683[1])
  {
    v185 = (unint64_t *)((char *)v683[1] + 8);
    do
      v186 = __ldaxr(v185);
    while (__stlxr(v186 - 1, v185));
    if (!v186)
    {
      ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
      std::__shared_weak_count::__release_weak(v184);
    }
  }
  v739[0] = &off_24C9EBF98;
  v739[1] = v165;
  v739[2] = (void *)v829;
  *(void **)((char *)&v739[2] + 7) = *(void **)((char *)&v829 + 7);
  HIBYTE(v739[3]) = v665;
  *(_QWORD *)&v829 = 0;
  *(_QWORD *)((char *)&v829 + 7) = 0;
  v739[4] = v166;
  v739[5] = (void *)v826;
  *(void **)((char *)&v739[5] + 7) = *(void **)((char *)&v826 + 7);
  HIBYTE(v739[6]) = v167;
  *(_QWORD *)&v826 = 0;
  *(_QWORD *)((char *)&v826 + 7) = 0;
  v740 = 0uLL;
  v683[0] = 0;
  v683[1] = 0;
  v187 = v697[0];
  v188 = (char *)v697[1];
  v741 = *(_OWORD *)v697;
  v697[0] = 0;
  v697[1] = 0;
  if (*((_QWORD *)&v741 + 1))
  {
    v189 = (unint64_t *)(v188 + 16);
    do
      v190 = __ldxr(v189);
    while (__stxr(v190 + 1, v189));
  }
  v742 = &off_24C9B5708;
  v191 = (_QWORD *)operator new();
  *v191 = &off_24C9B5A58;
  v191[1] = v187;
  v191[2] = v188;
  *(_QWORD *)&v743 = v191;
  v193 = *((_QWORD *)&v741 + 1);
  v192 = v741;
  if (!*((_QWORD *)&v741 + 1))
  {
    *((_QWORD *)&v743 + 1) = v741;
    v744 = 0;
    if ((_QWORD)v741)
      v197 = v741 + 16;
    else
      v197 = 0;
    goto LABEL_307;
  }
  v194 = (unint64_t *)(*((_QWORD *)&v741 + 1) + 16);
  do
    v195 = __ldxr(v194);
  while (__stxr(v195 + 1, v194));
  v196 = *((_QWORD *)&v741 + 1);
  *((_QWORD *)&v743 + 1) = v192;
  v744 = v193;
  if ((_QWORD)v741)
    v197 = v741 + 16;
  else
    v197 = 0;
  if (!*((_QWORD *)&v741 + 1))
  {
    v192 = v741;
LABEL_307:
    v200 = 0;
    v745 = &off_24C9EBFC8;
    v746 = v197;
    goto LABEL_308;
  }
  v198 = (unint64_t *)(*((_QWORD *)&v741 + 1) + 16);
  do
    v199 = __ldxr(v198);
  while (__stxr(v199 + 1, v198));
  v200 = *((_QWORD *)&v741 + 1);
  v192 = v741;
  v745 = &off_24C9EBFC8;
  *(_QWORD *)&v746 = v197;
  *((_QWORD *)&v746 + 1) = v196;
  if (*((_QWORD *)&v741 + 1))
  {
    v201 = (unint64_t *)(*((_QWORD *)&v741 + 1) + 16);
    do
      v202 = __ldxr(v201);
    while (__stxr(v202 + 1, v201));
  }
LABEL_308:
  if (v192)
    v203 = v192 + 24;
  else
    v203 = 0;
  v747 = &off_24C9B2310;
  *(_QWORD *)&v748 = v203;
  *((_QWORD *)&v748 + 1) = v200;
  v204 = (std::__shared_weak_count *)v813[1];
  if (v813[1])
  {
    v205 = (unint64_t *)((char *)v813[1] + 8);
    do
      v206 = __ldaxr(v205);
    while (__stlxr(v206 - 1, v205));
    if (!v206)
    {
      ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
      std::__shared_weak_count::__release_weak(v204);
    }
  }
  v207 = (std::__shared_weak_count *)v793[1];
  if (v793[1])
  {
    v208 = (unint64_t *)((char *)v793[1] + 8);
    do
      v209 = __ldaxr(v208);
    while (__stlxr(v209 - 1, v208));
    if (!v209)
    {
      ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
      std::__shared_weak_count::__release_weak(v207);
    }
  }
  v210 = (std::__shared_weak_count *)v803[1];
  if (!v803[1])
    goto LABEL_325;
  v211 = (unint64_t *)((char *)v803[1] + 8);
  do
    v212 = __ldaxr(v211);
  while (__stlxr(v212 - 1, v211));
  if (!v212)
  {
    ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
    std::__shared_weak_count::__release_weak(v210);
    if ((SHIBYTE(v711[2]) & 0x80000000) == 0)
    {
LABEL_326:
      if ((SHIBYTE(v725[2]) & 0x80000000) == 0)
        goto LABEL_327;
      goto LABEL_331;
    }
  }
  else
  {
LABEL_325:
    if ((SHIBYTE(v711[2]) & 0x80000000) == 0)
      goto LABEL_326;
  }
  operator delete(v711[0]);
  if ((SHIBYTE(v725[2]) & 0x80000000) == 0)
  {
LABEL_327:
    if (v735)
      goto LABEL_333;
    goto LABEL_332;
  }
LABEL_331:
  operator delete(v725[0]);
  if (v735)
    goto LABEL_333;
LABEL_332:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 534, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_333:
  v723 = v667;
  v724 = (std::__shared_weak_count *)v3;
  do
    v213 = __ldxr(v4);
  while (__stxr(v213 + 1, v4));
  v214 = *a2;
  v215 = (unint64_t *)a2[1];
  if (*a2)
    v216 = *a2 + 224;
  else
    v216 = 0;
  v721 = v216;
  v722 = (std::__shared_weak_count *)v215;
  if (v215)
  {
    v217 = v215 + 1;
    do
      v218 = __ldxr(v217);
    while (__stxr(v218 + 1, v217));
  }
  if (*(char *)(v216 + 31) < 0)
  {
    sub_20E860C04(v711, *(void **)(v216 + 8), *(_QWORD *)(v216 + 16));
  }
  else
  {
    v219 = *(_OWORD *)(v216 + 8);
    v711[2] = *(void **)(v216 + 24);
    *(_OWORD *)v711 = v219;
  }
  if (*(char *)(v214 + 279) < 0)
  {
    sub_20E860C04(v697, *(void **)(v214 + 256), *(_QWORD *)(v214 + 264));
  }
  else
  {
    *(_OWORD *)v697 = *(_OWORD *)(v214 + 256);
    v697[2] = *(void **)(v214 + 272);
  }
  v724 = 0;
  v723 = 0;
  v825[0] = (void *)v216;
  v825[1] = v215;
  if (v215)
  {
    v220 = v215 + 1;
    do
      v221 = __ldxr(v220);
    while (__stxr(v221 + 1, v220));
  }
  v222 = v711[0];
  *(void **)&v826 = v711[1];
  *(void **)((char *)&v826 + 7) = *(void **)((char *)&v711[1] + 7);
  v223 = HIBYTE(v711[2]);
  memset(v711, 0, sizeof(v711));
  v224 = v697[0];
  *(void **)&v824 = v697[1];
  *(void **)((char *)&v824 + 7) = *(void **)((char *)&v697[1] + 7);
  v225 = HIBYTE(v697[2]);
  memset(v697, 0, 24);
  v793[1] = 0;
  v793[0] = 0;
  *(_QWORD *)&v829 = 0;
  *(_QWORD *)((char *)&v829 + 7) = 0;
  v813[0] = v667;
  v813[1] = v3;
  v803[1] = 0;
  v803[0] = 0;
  v226 = (char *)operator new();
  *(_QWORD *)&v831 = v829;
  *(_QWORD *)((char *)&v831 + 7) = *(_QWORD *)((char *)&v829 + 7);
  *(_QWORD *)&v829 = 0;
  *(_QWORD *)((char *)&v829 + 7) = 0;
  v813[1] = 0;
  v813[0] = 0;
  v226[8] = 1;
  *((_QWORD *)v226 + 4) = 0;
  *((_QWORD *)v226 + 5) = 0;
  *(_QWORD *)v226 = &off_24C9ECB00;
  *((_QWORD *)v226 + 2) = &unk_24C9ECB78;
  *((_QWORD *)v226 + 3) = &unk_24C9ECBB8;
  v227 = v831;
  *(_QWORD *)(v226 + 63) = *(_QWORD *)((char *)&v831 + 7);
  *((_QWORD *)v226 + 6) = 0;
  *((_QWORD *)v226 + 7) = v227;
  v226[71] = 0;
  *(_QWORD *)&v831 = 0;
  *(_QWORD *)((char *)&v831 + 7) = 0;
  *((_QWORD *)v226 + 9) = v667;
  *((_QWORD *)v226 + 10) = v3;
  v683[0] = 0;
  v683[1] = 0;
  v228 = (_QWORD *)operator new();
  *v228 = &off_24C9ECCA0;
  v228[1] = v216;
  v228[2] = v215;
  v825[1] = 0;
  v825[0] = 0;
  *((_QWORD *)v226 + 11) = v228;
  *((_QWORD *)v226 + 12) = v226 + 96;
  *((_QWORD *)v226 + 13) = v226 + 96;
  *((_QWORD *)v226 + 14) = 0;
  *((_QWORD *)v226 + 15) = v226 + 120;
  *((_QWORD *)v226 + 16) = v226 + 120;
  *((_QWORD *)v226 + 17) = 0;
  v229 = (std::__shared_weak_count *)operator new();
  v229->__shared_owners_ = 0;
  v230 = (unint64_t *)&v229->__shared_owners_;
  v229->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ECCF0;
  v229->__shared_weak_owners_ = 0;
  v229[1].__vftable = (std::__shared_weak_count_vtbl *)v226;
  v231 = (std::__shared_weak_count *)*((_QWORD *)v226 + 5);
  if (v231)
  {
    if (v231->__shared_owners_ != -1)
      goto LABEL_363;
    do
      v232 = __ldxr(v230);
    while (__stxr(v232 + 1, v230));
    v233 = (unint64_t *)&v229->__shared_weak_owners_;
    do
      v234 = __ldxr(v233);
    while (__stxr(v234 + 1, v233));
    *((_QWORD *)v226 + 4) = v226;
    *((_QWORD *)v226 + 5) = v229;
    std::__shared_weak_count::__release_weak(v231);
  }
  else
  {
    do
      v235 = __ldxr(v230);
    while (__stxr(v235 + 1, v230));
    v236 = (unint64_t *)&v229->__shared_weak_owners_;
    do
      v237 = __ldxr(v236);
    while (__stxr(v237 + 1, v236));
    *((_QWORD *)v226 + 4) = v226;
    *((_QWORD *)v226 + 5) = v229;
  }
  do
    v238 = __ldaxr(v230);
  while (__stlxr(v238 - 1, v230));
  if (!v238)
  {
    ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
    std::__shared_weak_count::__release_weak(v229);
  }
LABEL_363:
  v239 = (std::__shared_weak_count *)v683[1];
  if (v683[1])
  {
    v240 = (unint64_t *)((char *)v683[1] + 8);
    do
      v241 = __ldaxr(v240);
    while (__stlxr(v241 - 1, v240));
    if (!v241)
    {
      ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
      std::__shared_weak_count::__release_weak(v239);
    }
  }
  v683[0] = v226;
  v683[1] = v229;
  v242 = (std::__shared_weak_count *)v813[1];
  if (v813[1])
  {
    v243 = (unint64_t *)((char *)v813[1] + 8);
    do
      v244 = __ldaxr(v243);
    while (__stlxr(v244 - 1, v243));
    if (!v244)
    {
      ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
      std::__shared_weak_count::__release_weak(v242);
    }
  }
  v725[0] = &off_24C9EC038;
  v725[1] = v222;
  v725[2] = (void *)v826;
  *(void **)((char *)&v725[2] + 7) = *(void **)((char *)&v826 + 7);
  HIBYTE(v725[3]) = v223;
  *(_QWORD *)&v826 = 0;
  *(_QWORD *)((char *)&v826 + 7) = 0;
  v725[4] = v224;
  v725[5] = (void *)v824;
  *(void **)((char *)&v725[5] + 7) = *(void **)((char *)&v824 + 7);
  HIBYTE(v725[6]) = v225;
  *(_QWORD *)&v824 = 0;
  *(_QWORD *)((char *)&v824 + 7) = 0;
  v726 = 0uLL;
  v813[1] = 0;
  v813[0] = 0;
  v246 = v683[0];
  v245 = (char *)v683[1];
  v727 = *(_OWORD *)v683;
  v683[0] = 0;
  v683[1] = 0;
  if (*((_QWORD *)&v727 + 1))
  {
    v247 = (unint64_t *)(v245 + 16);
    do
      v248 = __ldxr(v247);
    while (__stxr(v248 + 1, v247));
  }
  v728 = &off_24C9EC068;
  v249 = (_QWORD *)operator new();
  *v249 = &off_24C9ECD40;
  v249[1] = v246;
  v249[2] = v245;
  *(_QWORD *)&v729 = v249;
  v251 = *((_QWORD *)&v727 + 1);
  v250 = v727;
  if (!*((_QWORD *)&v727 + 1))
  {
    *((_QWORD *)&v729 + 1) = v727;
    v730 = 0;
    if ((_QWORD)v727)
      v255 = v727 + 16;
    else
      v255 = 0;
    goto LABEL_393;
  }
  v252 = (unint64_t *)(*((_QWORD *)&v727 + 1) + 16);
  do
    v253 = __ldxr(v252);
  while (__stxr(v253 + 1, v252));
  v254 = *((_QWORD *)&v727 + 1);
  *((_QWORD *)&v729 + 1) = v250;
  v730 = v251;
  if ((_QWORD)v727)
    v255 = v727 + 16;
  else
    v255 = 0;
  if (!*((_QWORD *)&v727 + 1))
  {
    v250 = v727;
LABEL_393:
    v258 = 0;
    v731 = &off_24C9EBF30;
    v732 = v255;
    goto LABEL_394;
  }
  v256 = (unint64_t *)(*((_QWORD *)&v727 + 1) + 16);
  do
    v257 = __ldxr(v256);
  while (__stxr(v257 + 1, v256));
  v258 = *((_QWORD *)&v727 + 1);
  v250 = v727;
  v731 = &off_24C9EBF30;
  *(_QWORD *)&v732 = v255;
  *((_QWORD *)&v732 + 1) = v254;
  if (*((_QWORD *)&v727 + 1))
  {
    v259 = (unint64_t *)(*((_QWORD *)&v727 + 1) + 16);
    do
      v260 = __ldxr(v259);
    while (__stxr(v260 + 1, v259));
  }
LABEL_394:
  if (v250)
    v261 = v250 + 24;
  else
    v261 = 0;
  v733 = &off_24C9B2310;
  *(_QWORD *)&v734 = v261;
  *((_QWORD *)&v734 + 1) = v258;
  v262 = (std::__shared_weak_count *)v803[1];
  if (v803[1])
  {
    v263 = (unint64_t *)((char *)v803[1] + 8);
    do
      v264 = __ldaxr(v263);
    while (__stlxr(v264 - 1, v263));
    if (!v264)
    {
      ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
      std::__shared_weak_count::__release_weak(v262);
    }
  }
  v265 = (std::__shared_weak_count *)v825[1];
  if (v825[1])
  {
    v266 = (unint64_t *)((char *)v825[1] + 8);
    do
      v267 = __ldaxr(v266);
    while (__stlxr(v267 - 1, v266));
    if (!v267)
    {
      ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
      std::__shared_weak_count::__release_weak(v265);
    }
  }
  v268 = (std::__shared_weak_count *)v793[1];
  if (!v793[1])
    goto LABEL_411;
  v269 = (unint64_t *)((char *)v793[1] + 8);
  do
    v270 = __ldaxr(v269);
  while (__stlxr(v270 - 1, v269));
  if (!v270)
  {
    ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
    std::__shared_weak_count::__release_weak(v268);
    if ((SHIBYTE(v697[2]) & 0x80000000) == 0)
    {
LABEL_412:
      if ((SHIBYTE(v711[2]) & 0x80000000) == 0)
        goto LABEL_413;
      goto LABEL_417;
    }
  }
  else
  {
LABEL_411:
    if ((SHIBYTE(v697[2]) & 0x80000000) == 0)
      goto LABEL_412;
  }
  operator delete(v697[0]);
  if ((SHIBYTE(v711[2]) & 0x80000000) == 0)
  {
LABEL_413:
    if (v721)
      goto LABEL_419;
    goto LABEL_418;
  }
LABEL_417:
  operator delete(v711[0]);
  if (v721)
    goto LABEL_419;
LABEL_418:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 534, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_419:
  v709 = v667;
  v710 = (std::__shared_weak_count *)v3;
  do
    v271 = __ldxr(v4);
  while (__stxr(v271 + 1, v4));
  v272 = *a2;
  v273 = (std::__shared_weak_count *)a2[1];
  if (*a2)
    v274 = *a2 + 280;
  else
    v274 = 0;
  v707 = v274;
  v708 = v273;
  if (v273)
  {
    v275 = (unint64_t *)&v273->__shared_owners_;
    do
      v276 = __ldxr(v275);
    while (__stxr(v276 + 1, v275));
  }
  if (*(char *)(v274 + 31) < 0)
  {
    sub_20E860C04(v813, *(void **)(v274 + 8), *(_QWORD *)(v274 + 16));
  }
  else
  {
    v277 = *(_OWORD *)(v274 + 8);
    v813[2] = *(void **)(v274 + 24);
    *(_OWORD *)v813 = v277;
  }
  if (*(char *)(v272 + 335) < 0)
  {
    sub_20E860C04(v803, *(void **)(v272 + 312), *(_QWORD *)(v272 + 320));
  }
  else
  {
    *(_OWORD *)v803 = *(_OWORD *)(v272 + 312);
    v803[2] = *(void **)(v272 + 328);
  }
  v710 = 0;
  v709 = 0;
  *(_QWORD *)&v826 = v274;
  *((_QWORD *)&v826 + 1) = v273;
  if (v273)
  {
    v278 = (unint64_t *)&v273->__shared_owners_;
    do
      v279 = __ldxr(v278);
    while (__stxr(v279 + 1, v278));
  }
  v697[2] = v813[2];
  v683[2] = v803[2];
  *(_OWORD *)v697 = *(_OWORD *)v813;
  memset(v813, 0, 24);
  *(_OWORD *)v683 = *(_OWORD *)v803;
  memset(v803, 0, 24);
  v829 = 0uLL;
  *(_QWORD *)&v823 = 0;
  *(_QWORD *)((char *)&v823 + 7) = 0;
  v825[0] = v667;
  v825[1] = v3;
  v831 = 0uLL;
  v280 = (char *)operator new();
  *(_QWORD *)&v824 = v823;
  *(_QWORD *)((char *)&v824 + 7) = *(_QWORD *)((char *)&v823 + 7);
  *(_QWORD *)&v823 = 0;
  *(_QWORD *)((char *)&v823 + 7) = 0;
  v281 = *(_OWORD *)v825;
  v825[0] = 0;
  v825[1] = 0;
  v280[8] = 1;
  *((_QWORD *)v280 + 4) = 0;
  *((_QWORD *)v280 + 5) = 0;
  *(_QWORD *)v280 = &off_24C9ECDB8;
  *((_QWORD *)v280 + 2) = &unk_24C9ECE30;
  *((_QWORD *)v280 + 3) = &unk_24C9ECE70;
  v282 = v824;
  *(_QWORD *)(v280 + 63) = *(_QWORD *)((char *)&v824 + 7);
  *((_QWORD *)v280 + 6) = 0;
  *((_QWORD *)v280 + 7) = v282;
  v280[71] = 0;
  *(_QWORD *)&v824 = 0;
  *(_QWORD *)((char *)&v824 + 7) = 0;
  *(_OWORD *)(v280 + 72) = v281;
  v793[1] = 0;
  v793[0] = 0;
  v283 = (_QWORD *)operator new();
  *v283 = &off_24C9ECEE8;
  v283[1] = v274;
  v283[2] = v273;
  v826 = 0uLL;
  *((_QWORD *)v280 + 11) = v283;
  *((_QWORD *)v280 + 12) = v280 + 96;
  *((_QWORD *)v280 + 13) = v280 + 96;
  *((_QWORD *)v280 + 14) = 0;
  *((_QWORD *)v280 + 15) = v280 + 120;
  *((_QWORD *)v280 + 16) = v280 + 120;
  *((_QWORD *)v280 + 17) = 0;
  v284 = (std::__shared_weak_count *)operator new();
  v284->__shared_owners_ = 0;
  v285 = (unint64_t *)&v284->__shared_owners_;
  v284->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ECF28;
  v284->__shared_weak_owners_ = 0;
  v284[1].__vftable = (std::__shared_weak_count_vtbl *)v280;
  v286 = (std::__shared_weak_count *)*((_QWORD *)v280 + 5);
  if (v286)
  {
    if (v286->__shared_owners_ != -1)
      goto LABEL_449;
    do
      v287 = __ldxr(v285);
    while (__stxr(v287 + 1, v285));
    v288 = (unint64_t *)&v284->__shared_weak_owners_;
    do
      v289 = __ldxr(v288);
    while (__stxr(v289 + 1, v288));
    *((_QWORD *)v280 + 4) = v280;
    *((_QWORD *)v280 + 5) = v284;
    std::__shared_weak_count::__release_weak(v286);
  }
  else
  {
    do
      v290 = __ldxr(v285);
    while (__stxr(v290 + 1, v285));
    v291 = (unint64_t *)&v284->__shared_weak_owners_;
    do
      v292 = __ldxr(v291);
    while (__stxr(v292 + 1, v291));
    *((_QWORD *)v280 + 4) = v280;
    *((_QWORD *)v280 + 5) = v284;
  }
  do
    v293 = __ldaxr(v285);
  while (__stlxr(v293 - 1, v285));
  if (!v293)
  {
    ((void (*)(std::__shared_weak_count *))v284->__on_zero_shared)(v284);
    std::__shared_weak_count::__release_weak(v284);
  }
LABEL_449:
  v294 = (std::__shared_weak_count *)v793[1];
  if (v793[1])
  {
    v295 = (unint64_t *)((char *)v793[1] + 8);
    do
      v296 = __ldaxr(v295);
    while (__stlxr(v296 - 1, v295));
    if (!v296)
    {
      ((void (*)(std::__shared_weak_count *))v294->__on_zero_shared)(v294);
      std::__shared_weak_count::__release_weak(v294);
    }
  }
  v793[0] = v280;
  v793[1] = v284;
  v297 = (std::__shared_weak_count *)v825[1];
  if (v825[1])
  {
    v298 = (unint64_t *)((char *)v825[1] + 8);
    do
      v299 = __ldaxr(v298);
    while (__stlxr(v299 - 1, v298));
    if (!v299)
    {
      ((void (*)(std::__shared_weak_count *))v297->__on_zero_shared)(v297);
      std::__shared_weak_count::__release_weak(v297);
    }
  }
  v825[1] = 0;
  v825[0] = 0;
  sub_20ECFD39C((uint64_t)v711, (__int128 *)v697, (__int128 *)v683, (uint64_t)v793, (uint64_t)v825);
  v300 = (std::__shared_weak_count *)v825[1];
  if (v825[1])
  {
    v301 = (unint64_t *)((char *)v825[1] + 8);
    do
      v302 = __ldaxr(v301);
    while (__stlxr(v302 - 1, v301));
    if (!v302)
    {
      ((void (*)(std::__shared_weak_count *))v300->__on_zero_shared)(v300);
      std::__shared_weak_count::__release_weak(v300);
    }
  }
  v303 = (std::__shared_weak_count *)v793[1];
  if (v793[1])
  {
    v304 = (unint64_t *)((char *)v793[1] + 8);
    do
      v305 = __ldaxr(v304);
    while (__stlxr(v305 - 1, v304));
    if (!v305)
    {
      ((void (*)(std::__shared_weak_count *))v303->__on_zero_shared)(v303);
      std::__shared_weak_count::__release_weak(v303);
    }
  }
  v306 = (std::__shared_weak_count *)*((_QWORD *)&v831 + 1);
  if (!*((_QWORD *)&v831 + 1))
    goto LABEL_473;
  v307 = (unint64_t *)(*((_QWORD *)&v831 + 1) + 8);
  do
    v308 = __ldaxr(v307);
  while (__stlxr(v308 - 1, v307));
  if (!v308)
  {
    ((void (*)(std::__shared_weak_count *))v306->__on_zero_shared)(v306);
    std::__shared_weak_count::__release_weak(v306);
    if ((SHIBYTE(v683[2]) & 0x80000000) == 0)
    {
LABEL_474:
      if ((SHIBYTE(v697[2]) & 0x80000000) == 0)
        goto LABEL_475;
LABEL_479:
      operator delete(v697[0]);
      v309 = (std::__shared_weak_count *)*((_QWORD *)&v826 + 1);
      if (!*((_QWORD *)&v826 + 1))
        goto LABEL_484;
      goto LABEL_480;
    }
  }
  else
  {
LABEL_473:
    if ((SHIBYTE(v683[2]) & 0x80000000) == 0)
      goto LABEL_474;
  }
  operator delete(v683[0]);
  if (SHIBYTE(v697[2]) < 0)
    goto LABEL_479;
LABEL_475:
  v309 = (std::__shared_weak_count *)*((_QWORD *)&v826 + 1);
  if (!*((_QWORD *)&v826 + 1))
    goto LABEL_484;
LABEL_480:
  v310 = (unint64_t *)&v309->__shared_owners_;
  do
    v311 = __ldaxr(v310);
  while (__stlxr(v311 - 1, v310));
  if (!v311)
  {
    ((void (*)(std::__shared_weak_count *))v309->__on_zero_shared)(v309);
    std::__shared_weak_count::__release_weak(v309);
  }
LABEL_484:
  v312 = (std::__shared_weak_count *)*((_QWORD *)&v829 + 1);
  if (!*((_QWORD *)&v829 + 1))
    goto LABEL_488;
  v313 = (unint64_t *)(*((_QWORD *)&v829 + 1) + 8);
  do
    v314 = __ldaxr(v313);
  while (__stlxr(v314 - 1, v313));
  if (!v314)
  {
    ((void (*)(std::__shared_weak_count *))v312->__on_zero_shared)(v312);
    std::__shared_weak_count::__release_weak(v312);
    if ((SHIBYTE(v803[2]) & 0x80000000) == 0)
    {
LABEL_489:
      if ((SHIBYTE(v813[2]) & 0x80000000) == 0)
        goto LABEL_490;
      goto LABEL_494;
    }
  }
  else
  {
LABEL_488:
    if ((SHIBYTE(v803[2]) & 0x80000000) == 0)
      goto LABEL_489;
  }
  operator delete(v803[0]);
  if ((SHIBYTE(v813[2]) & 0x80000000) == 0)
  {
LABEL_490:
    if (v707)
      goto LABEL_496;
    goto LABEL_495;
  }
LABEL_494:
  operator delete(v813[0]);
  if (v707)
    goto LABEL_496;
LABEL_495:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 534, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_496:
  v695 = v667;
  v696 = (std::__shared_weak_count *)v3;
  do
    v315 = __ldxr(v4);
  while (__stxr(v315 + 1, v4));
  v316 = *a2;
  v317 = (std::__shared_weak_count *)a2[1];
  if (*a2)
    v318 = *a2 + 336;
  else
    v318 = 0;
  v693 = v318;
  v694 = v317;
  if (v317)
  {
    v319 = (unint64_t *)&v317->__shared_owners_;
    do
      v320 = __ldxr(v319);
    while (__stxr(v320 + 1, v319));
  }
  if (*(char *)(v318 + 31) < 0)
  {
    sub_20E860C04(v683, *(void **)(v318 + 8), *(_QWORD *)(v318 + 16));
  }
  else
  {
    v321 = *(_OWORD *)(v318 + 8);
    v683[2] = *(void **)(v318 + 24);
    *(_OWORD *)v683 = v321;
  }
  if (*(char *)(v316 + 391) < 0)
  {
    sub_20E860C04(v813, *(void **)(v316 + 368), *(_QWORD *)(v316 + 376));
  }
  else
  {
    *(_OWORD *)v813 = *(_OWORD *)(v316 + 368);
    v813[2] = *(void **)(v316 + 384);
  }
  v696 = 0;
  v695 = 0;
  *(_QWORD *)&v829 = v318;
  *((_QWORD *)&v829 + 1) = v317;
  if (v317)
  {
    v322 = (unint64_t *)&v317->__shared_owners_;
    do
      v323 = __ldxr(v322);
    while (__stxr(v323 + 1, v322));
  }
  v324 = v683[0];
  *(void **)&v823 = v683[1];
  *(void **)((char *)&v823 + 7) = *(void **)((char *)&v683[1] + 7);
  v325 = HIBYTE(v683[2]);
  memset(v683, 0, 24);
  v326 = v813[0];
  v832[0] = v813[1];
  *(void **)((char *)v832 + 7) = *(void **)((char *)&v813[1] + 7);
  v327 = HIBYTE(v813[2]);
  memset(v813, 0, 24);
  v831 = 0uLL;
  *(_QWORD *)&v824 = 0;
  *(_QWORD *)((char *)&v824 + 7) = 0;
  v793[0] = v667;
  v793[1] = v3;
  v825[1] = 0;
  v825[0] = 0;
  v328 = (char *)operator new();
  *(_QWORD *)&v826 = v824;
  *(_QWORD *)((char *)&v826 + 7) = *(_QWORD *)((char *)&v824 + 7);
  *(_QWORD *)&v824 = 0;
  *(_QWORD *)((char *)&v824 + 7) = 0;
  v793[1] = 0;
  v793[0] = 0;
  v328[8] = 1;
  *((_QWORD *)v328 + 4) = 0;
  *((_QWORD *)v328 + 5) = 0;
  *(_QWORD *)v328 = &off_24C9ECF78;
  *((_QWORD *)v328 + 2) = &unk_24C9ECFF0;
  *((_QWORD *)v328 + 3) = &unk_24C9ED030;
  v329 = v826;
  *(_QWORD *)(v328 + 63) = *(_QWORD *)((char *)&v826 + 7);
  *((_QWORD *)v328 + 6) = 0;
  *((_QWORD *)v328 + 7) = v329;
  v328[71] = 0;
  *(_QWORD *)&v826 = 0;
  *(_QWORD *)((char *)&v826 + 7) = 0;
  *((_QWORD *)v328 + 9) = v667;
  *((_QWORD *)v328 + 10) = v3;
  v803[1] = 0;
  v803[0] = 0;
  v330 = (_QWORD *)operator new();
  *v330 = &off_24C9ED118;
  v330[1] = v318;
  v330[2] = v317;
  v829 = 0uLL;
  *((_QWORD *)v328 + 11) = v330;
  *((_QWORD *)v328 + 12) = v328 + 96;
  *((_QWORD *)v328 + 13) = v328 + 96;
  *((_QWORD *)v328 + 14) = 0;
  *((_QWORD *)v328 + 15) = v328 + 120;
  *((_QWORD *)v328 + 16) = v328 + 120;
  *((_QWORD *)v328 + 17) = 0;
  v331 = (std::__shared_weak_count *)operator new();
  v331->__shared_owners_ = 0;
  v332 = (unint64_t *)&v331->__shared_owners_;
  v331->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ED168;
  v331->__shared_weak_owners_ = 0;
  v331[1].__vftable = (std::__shared_weak_count_vtbl *)v328;
  v333 = (std::__shared_weak_count *)*((_QWORD *)v328 + 5);
  if (v333)
  {
    if (v333->__shared_owners_ != -1)
      goto LABEL_526;
    do
      v334 = __ldxr(v332);
    while (__stxr(v334 + 1, v332));
    v335 = (unint64_t *)&v331->__shared_weak_owners_;
    do
      v336 = __ldxr(v335);
    while (__stxr(v336 + 1, v335));
    *((_QWORD *)v328 + 4) = v328;
    *((_QWORD *)v328 + 5) = v331;
    std::__shared_weak_count::__release_weak(v333);
  }
  else
  {
    do
      v337 = __ldxr(v332);
    while (__stxr(v337 + 1, v332));
    v338 = (unint64_t *)&v331->__shared_weak_owners_;
    do
      v339 = __ldxr(v338);
    while (__stxr(v339 + 1, v338));
    *((_QWORD *)v328 + 4) = v328;
    *((_QWORD *)v328 + 5) = v331;
  }
  do
    v340 = __ldaxr(v332);
  while (__stlxr(v340 - 1, v332));
  if (!v340)
  {
    ((void (*)(std::__shared_weak_count *))v331->__on_zero_shared)(v331);
    std::__shared_weak_count::__release_weak(v331);
  }
LABEL_526:
  v341 = (std::__shared_weak_count *)v803[1];
  if (v803[1])
  {
    v342 = (unint64_t *)((char *)v803[1] + 8);
    do
      v343 = __ldaxr(v342);
    while (__stlxr(v343 - 1, v342));
    if (!v343)
    {
      ((void (*)(std::__shared_weak_count *))v341->__on_zero_shared)(v341);
      std::__shared_weak_count::__release_weak(v341);
    }
  }
  v803[0] = v328;
  v803[1] = v331;
  v344 = (std::__shared_weak_count *)v793[1];
  if (v793[1])
  {
    v345 = (unint64_t *)((char *)v793[1] + 8);
    do
      v346 = __ldaxr(v345);
    while (__stlxr(v346 - 1, v345));
    if (!v346)
    {
      ((void (*)(std::__shared_weak_count *))v344->__on_zero_shared)(v344);
      std::__shared_weak_count::__release_weak(v344);
    }
  }
  v697[0] = &off_24C9EC0A0;
  v697[1] = v324;
  v697[2] = (void *)v823;
  *(void **)((char *)&v697[2] + 7) = *(void **)((char *)&v823 + 7);
  HIBYTE(v697[3]) = v325;
  *(_QWORD *)&v823 = 0;
  *(_QWORD *)((char *)&v823 + 7) = 0;
  v697[4] = v326;
  v697[5] = (void *)v832[0];
  *(void **)((char *)&v697[5] + 7) = *(void **)((char *)v832 + 7);
  HIBYTE(v697[6]) = v327;
  v832[0] = 0;
  *(_QWORD *)((char *)v832 + 7) = 0;
  v698 = 0uLL;
  v793[1] = 0;
  v793[0] = 0;
  v347 = v803[0];
  v348 = (char *)v803[1];
  v699 = *(_OWORD *)v803;
  v803[0] = 0;
  v803[1] = 0;
  if (*((_QWORD *)&v699 + 1))
  {
    v349 = (unint64_t *)(v348 + 16);
    do
      v350 = __ldxr(v349);
    while (__stxr(v350 + 1, v349));
  }
  v700 = &off_24C9E1150;
  v351 = (_QWORD *)operator new();
  *v351 = &off_24C9ED1B8;
  v351[1] = v347;
  v351[2] = v348;
  *(_QWORD *)&v701 = v351;
  v353 = *((_QWORD *)&v699 + 1);
  v352 = v699;
  if (!*((_QWORD *)&v699 + 1))
  {
    *((_QWORD *)&v701 + 1) = v699;
    v702 = 0;
    if ((_QWORD)v699)
      v357 = v699 + 16;
    else
      v357 = 0;
    goto LABEL_556;
  }
  v354 = (unint64_t *)(*((_QWORD *)&v699 + 1) + 16);
  do
    v355 = __ldxr(v354);
  while (__stxr(v355 + 1, v354));
  v356 = *((_QWORD *)&v699 + 1);
  *((_QWORD *)&v701 + 1) = v352;
  v702 = v353;
  if ((_QWORD)v699)
    v357 = v699 + 16;
  else
    v357 = 0;
  if (!*((_QWORD *)&v699 + 1))
  {
    v352 = v699;
LABEL_556:
    v360 = 0;
    v703 = &off_24C9B2520;
    v704 = v357;
    goto LABEL_557;
  }
  v358 = (unint64_t *)(*((_QWORD *)&v699 + 1) + 16);
  do
    v359 = __ldxr(v358);
  while (__stxr(v359 + 1, v358));
  v360 = *((_QWORD *)&v699 + 1);
  v352 = v699;
  v703 = &off_24C9B2520;
  *(_QWORD *)&v704 = v357;
  *((_QWORD *)&v704 + 1) = v356;
  if (*((_QWORD *)&v699 + 1))
  {
    v361 = (unint64_t *)(*((_QWORD *)&v699 + 1) + 16);
    do
      v362 = __ldxr(v361);
    while (__stxr(v362 + 1, v361));
  }
LABEL_557:
  if (v352)
    v363 = v352 + 24;
  else
    v363 = 0;
  v705 = &off_24C9B2310;
  *(_QWORD *)&v706 = v363;
  *((_QWORD *)&v706 + 1) = v360;
  v364 = (std::__shared_weak_count *)v825[1];
  if (v825[1])
  {
    v365 = (unint64_t *)((char *)v825[1] + 8);
    do
      v366 = __ldaxr(v365);
    while (__stlxr(v366 - 1, v365));
    if (!v366)
    {
      ((void (*)(std::__shared_weak_count *))v364->__on_zero_shared)(v364);
      std::__shared_weak_count::__release_weak(v364);
    }
  }
  v367 = (std::__shared_weak_count *)*((_QWORD *)&v829 + 1);
  if (*((_QWORD *)&v829 + 1))
  {
    v368 = (unint64_t *)(*((_QWORD *)&v829 + 1) + 8);
    do
      v369 = __ldaxr(v368);
    while (__stlxr(v369 - 1, v368));
    if (!v369)
    {
      ((void (*)(std::__shared_weak_count *))v367->__on_zero_shared)(v367);
      std::__shared_weak_count::__release_weak(v367);
    }
  }
  v370 = (std::__shared_weak_count *)*((_QWORD *)&v831 + 1);
  if (!*((_QWORD *)&v831 + 1))
    goto LABEL_574;
  v371 = (unint64_t *)(*((_QWORD *)&v831 + 1) + 8);
  do
    v372 = __ldaxr(v371);
  while (__stlxr(v372 - 1, v371));
  if (!v372)
  {
    ((void (*)(std::__shared_weak_count *))v370->__on_zero_shared)(v370);
    std::__shared_weak_count::__release_weak(v370);
    if ((SHIBYTE(v813[2]) & 0x80000000) == 0)
    {
LABEL_575:
      if ((SHIBYTE(v683[2]) & 0x80000000) == 0)
        goto LABEL_576;
      goto LABEL_580;
    }
  }
  else
  {
LABEL_574:
    if ((SHIBYTE(v813[2]) & 0x80000000) == 0)
      goto LABEL_575;
  }
  operator delete(v813[0]);
  if ((SHIBYTE(v683[2]) & 0x80000000) == 0)
  {
LABEL_576:
    if (v693)
      goto LABEL_582;
    goto LABEL_581;
  }
LABEL_580:
  operator delete(v683[0]);
  if (v693)
    goto LABEL_582;
LABEL_581:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 534, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_582:
  v681 = v667;
  v682 = (std::__shared_weak_count *)v3;
  do
    v373 = __ldxr(v4);
  while (__stxr(v373 + 1, v4));
  v374 = *a2;
  v375 = (std::__shared_weak_count *)a2[1];
  if (*a2)
    v376 = *a2 + 392;
  else
    v376 = 0;
  v679 = v376;
  v680 = v375;
  if (v375)
  {
    v377 = (unint64_t *)&v375->__shared_owners_;
    do
      v378 = __ldxr(v377);
    while (__stxr(v378 + 1, v377));
  }
  if (*(char *)(v376 + 31) < 0)
  {
    sub_20E860C04(v813, *(void **)(v376 + 8), *(_QWORD *)(v376 + 16));
  }
  else
  {
    v379 = *(_OWORD *)(v376 + 8);
    v813[2] = *(void **)(v376 + 24);
    *(_OWORD *)v813 = v379;
  }
  if (*(char *)(v374 + 447) < 0)
  {
    sub_20E860C04(v803, *(void **)(v374 + 424), *(_QWORD *)(v374 + 432));
  }
  else
  {
    *(_OWORD *)v803 = *(_OWORD *)(v374 + 424);
    v803[2] = *(void **)(v374 + 440);
  }
  v681 = 0;
  v682 = 0;
  *(_QWORD *)&v826 = v376;
  *((_QWORD *)&v826 + 1) = v375;
  if (v375)
  {
    v380 = (unint64_t *)&v375->__shared_owners_;
    do
      v381 = __ldxr(v380);
    while (__stxr(v381 + 1, v380));
  }
  v382 = v813[0];
  v832[0] = v813[1];
  *(void **)((char *)v832 + 7) = *(void **)((char *)&v813[1] + 7);
  v383 = HIBYTE(v813[2]);
  memset(v813, 0, 24);
  v384 = v803[0];
  v830[0] = v803[1];
  *(void **)((char *)v830 + 7) = *(void **)((char *)&v803[1] + 7);
  v385 = HIBYTE(v803[2]);
  memset(v803, 0, 24);
  v829 = 0uLL;
  *(_QWORD *)&v823 = 0;
  *(_QWORD *)((char *)&v823 + 7) = 0;
  v825[0] = v667;
  v825[1] = v3;
  v831 = 0uLL;
  v386 = (char *)operator new();
  *(_QWORD *)&v824 = v823;
  *(_QWORD *)((char *)&v824 + 7) = *(_QWORD *)((char *)&v823 + 7);
  *(_QWORD *)&v823 = 0;
  *(_QWORD *)((char *)&v823 + 7) = 0;
  v825[1] = 0;
  v825[0] = 0;
  v386[8] = 1;
  *((_QWORD *)v386 + 4) = 0;
  *((_QWORD *)v386 + 5) = 0;
  *(_QWORD *)v386 = &off_24C9ED230;
  *((_QWORD *)v386 + 2) = &unk_24C9ED2A8;
  *((_QWORD *)v386 + 3) = &unk_24C9ED2E8;
  v387 = v824;
  *(_QWORD *)(v386 + 63) = *(_QWORD *)((char *)&v824 + 7);
  *((_QWORD *)v386 + 6) = 0;
  *((_QWORD *)v386 + 7) = v387;
  v386[71] = 0;
  *(_QWORD *)&v824 = 0;
  *(_QWORD *)((char *)&v824 + 7) = 0;
  *((_QWORD *)v386 + 9) = v667;
  *((_QWORD *)v386 + 10) = v3;
  v793[1] = 0;
  v793[0] = 0;
  v388 = (_QWORD *)operator new();
  *v388 = &off_24C9ED3D0;
  v388[1] = v376;
  v388[2] = v375;
  v826 = 0uLL;
  *((_QWORD *)v386 + 11) = v388;
  *((_QWORD *)v386 + 12) = v386 + 96;
  *((_QWORD *)v386 + 13) = v386 + 96;
  *((_QWORD *)v386 + 14) = 0;
  *((_QWORD *)v386 + 15) = v386 + 120;
  *((_QWORD *)v386 + 16) = v386 + 120;
  *((_QWORD *)v386 + 17) = 0;
  v389 = (std::__shared_weak_count *)operator new();
  v389->__shared_owners_ = 0;
  v390 = (unint64_t *)&v389->__shared_owners_;
  v389->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ED420;
  v389->__shared_weak_owners_ = 0;
  v389[1].__vftable = (std::__shared_weak_count_vtbl *)v386;
  v391 = (std::__shared_weak_count *)*((_QWORD *)v386 + 5);
  if (v391)
  {
    if (v391->__shared_owners_ != -1)
      goto LABEL_612;
    do
      v392 = __ldxr(v390);
    while (__stxr(v392 + 1, v390));
    v393 = (unint64_t *)&v389->__shared_weak_owners_;
    do
      v394 = __ldxr(v393);
    while (__stxr(v394 + 1, v393));
    *((_QWORD *)v386 + 4) = v386;
    *((_QWORD *)v386 + 5) = v389;
    std::__shared_weak_count::__release_weak(v391);
  }
  else
  {
    do
      v395 = __ldxr(v390);
    while (__stxr(v395 + 1, v390));
    v396 = (unint64_t *)&v389->__shared_weak_owners_;
    do
      v397 = __ldxr(v396);
    while (__stxr(v397 + 1, v396));
    *((_QWORD *)v386 + 4) = v386;
    *((_QWORD *)v386 + 5) = v389;
  }
  do
    v398 = __ldaxr(v390);
  while (__stlxr(v398 - 1, v390));
  if (!v398)
  {
    ((void (*)(std::__shared_weak_count *))v389->__on_zero_shared)(v389);
    std::__shared_weak_count::__release_weak(v389);
  }
LABEL_612:
  v399 = (std::__shared_weak_count *)v793[1];
  if (v793[1])
  {
    v400 = (unint64_t *)((char *)v793[1] + 8);
    do
      v401 = __ldaxr(v400);
    while (__stlxr(v401 - 1, v400));
    if (!v401)
    {
      ((void (*)(std::__shared_weak_count *))v399->__on_zero_shared)(v399);
      std::__shared_weak_count::__release_weak(v399);
    }
  }
  v793[0] = v386;
  v793[1] = v389;
  v402 = (std::__shared_weak_count *)v825[1];
  if (v825[1])
  {
    v403 = (unint64_t *)((char *)v825[1] + 8);
    do
      v404 = __ldaxr(v403);
    while (__stlxr(v404 - 1, v403));
    if (!v404)
    {
      ((void (*)(std::__shared_weak_count *))v402->__on_zero_shared)(v402);
      std::__shared_weak_count::__release_weak(v402);
    }
  }
  v683[0] = &off_24C9EC0D0;
  v683[1] = v382;
  v683[2] = (void *)v832[0];
  *(void **)((char *)&v683[2] + 7) = *(void **)((char *)v832 + 7);
  HIBYTE(v683[3]) = v383;
  v832[0] = 0;
  *(_QWORD *)((char *)v832 + 7) = 0;
  v683[4] = v384;
  v683[5] = (void *)v830[0];
  *(void **)((char *)&v683[5] + 7) = *(void **)((char *)v830 + 7);
  HIBYTE(v683[6]) = v385;
  v830[0] = 0;
  *(_QWORD *)((char *)v830 + 7) = 0;
  v684 = 0uLL;
  v825[1] = 0;
  v825[0] = 0;
  v405 = v793[0];
  v406 = (char *)v793[1];
  v685 = *(_OWORD *)v793;
  v793[0] = 0;
  v793[1] = 0;
  if (*((_QWORD *)&v685 + 1))
  {
    v407 = (unint64_t *)(v406 + 16);
    do
      v408 = __ldxr(v407);
    while (__stxr(v408 + 1, v407));
  }
  v686 = &off_24C9EC100;
  v409 = (_QWORD *)operator new();
  *v409 = &off_24C9ED470;
  v409[1] = v405;
  v409[2] = v406;
  *(_QWORD *)&v687 = v409;
  v411 = *((_QWORD *)&v685 + 1);
  v410 = v685;
  if (!*((_QWORD *)&v685 + 1))
  {
    *((_QWORD *)&v687 + 1) = v685;
    v688 = 0;
    if ((_QWORD)v685)
      v415 = v685 + 16;
    else
      v415 = 0;
    goto LABEL_642;
  }
  v412 = (unint64_t *)(*((_QWORD *)&v685 + 1) + 16);
  do
    v413 = __ldxr(v412);
  while (__stxr(v413 + 1, v412));
  v414 = *((_QWORD *)&v685 + 1);
  *((_QWORD *)&v687 + 1) = v410;
  v688 = v411;
  if ((_QWORD)v685)
    v415 = v685 + 16;
  else
    v415 = 0;
  if (!*((_QWORD *)&v685 + 1))
  {
    v410 = v685;
LABEL_642:
    v418 = 0;
    v689 = &off_24C9B2520;
    v690 = v415;
    goto LABEL_643;
  }
  v416 = (unint64_t *)(*((_QWORD *)&v685 + 1) + 16);
  do
    v417 = __ldxr(v416);
  while (__stxr(v417 + 1, v416));
  v418 = *((_QWORD *)&v685 + 1);
  v410 = v685;
  v689 = &off_24C9B2520;
  *(_QWORD *)&v690 = v415;
  *((_QWORD *)&v690 + 1) = v414;
  if (*((_QWORD *)&v685 + 1))
  {
    v419 = (unint64_t *)(*((_QWORD *)&v685 + 1) + 16);
    do
      v420 = __ldxr(v419);
    while (__stxr(v420 + 1, v419));
  }
LABEL_643:
  if (v410)
    v421 = v410 + 24;
  else
    v421 = 0;
  v691 = &off_24C9B2310;
  *(_QWORD *)&v692 = v421;
  *((_QWORD *)&v692 + 1) = v418;
  v422 = (std::__shared_weak_count *)*((_QWORD *)&v831 + 1);
  if (*((_QWORD *)&v831 + 1))
  {
    v423 = (unint64_t *)(*((_QWORD *)&v831 + 1) + 8);
    do
      v424 = __ldaxr(v423);
    while (__stlxr(v424 - 1, v423));
    if (!v424)
    {
      ((void (*)(std::__shared_weak_count *))v422->__on_zero_shared)(v422);
      std::__shared_weak_count::__release_weak(v422);
    }
  }
  v425 = (std::__shared_weak_count *)*((_QWORD *)&v826 + 1);
  if (*((_QWORD *)&v826 + 1))
  {
    v426 = (unint64_t *)(*((_QWORD *)&v826 + 1) + 8);
    do
      v427 = __ldaxr(v426);
    while (__stlxr(v427 - 1, v426));
    if (!v427)
    {
      ((void (*)(std::__shared_weak_count *))v425->__on_zero_shared)(v425);
      std::__shared_weak_count::__release_weak(v425);
    }
  }
  v428 = (std::__shared_weak_count *)*((_QWORD *)&v829 + 1);
  if (!*((_QWORD *)&v829 + 1))
    goto LABEL_660;
  v429 = (unint64_t *)(*((_QWORD *)&v829 + 1) + 8);
  do
    v430 = __ldaxr(v429);
  while (__stlxr(v430 - 1, v429));
  if (!v430)
  {
    ((void (*)(std::__shared_weak_count *))v428->__on_zero_shared)(v428);
    std::__shared_weak_count::__release_weak(v428);
    if ((SHIBYTE(v803[2]) & 0x80000000) == 0)
    {
LABEL_661:
      if ((SHIBYTE(v813[2]) & 0x80000000) == 0)
        goto LABEL_662;
      goto LABEL_666;
    }
  }
  else
  {
LABEL_660:
    if ((SHIBYTE(v803[2]) & 0x80000000) == 0)
      goto LABEL_661;
  }
  operator delete(v803[0]);
  if ((SHIBYTE(v813[2]) & 0x80000000) == 0)
  {
LABEL_662:
    if (v679)
      goto LABEL_668;
    goto LABEL_667;
  }
LABEL_666:
  operator delete(v813[0]);
  if (v679)
    goto LABEL_668;
LABEL_667:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 534, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_668:
  v677 = v667;
  v678 = (std::__shared_weak_count *)v3;
  do
    v431 = __ldxr(v4);
  while (__stxr(v431 + 1, v4));
  v432 = *a2;
  v433 = (std::__shared_weak_count *)a2[1];
  if (*a2)
    v434 = *a2 + 448;
  else
    v434 = 0;
  v675 = v434;
  v676 = v433;
  if (v433)
  {
    v435 = (unint64_t *)&v433->__shared_owners_;
    do
      v436 = __ldxr(v435);
    while (__stxr(v436 + 1, v435));
  }
  if (*(char *)(v434 + 31) < 0)
  {
    sub_20E860C04(v803, *(void **)(v434 + 8), *(_QWORD *)(v434 + 16));
  }
  else
  {
    v437 = *(_OWORD *)(v434 + 8);
    v803[2] = *(void **)(v434 + 24);
    *(_OWORD *)v803 = v437;
  }
  if (*(char *)(v432 + 503) < 0)
  {
    sub_20E860C04(v793, *(void **)(v432 + 480), *(_QWORD *)(v432 + 488));
  }
  else
  {
    *(_OWORD *)v793 = *(_OWORD *)(v432 + 480);
    v793[2] = *(void **)(v432 + 496);
  }
  v677 = 0;
  v678 = 0;
  *(_QWORD *)&v824 = v434;
  *((_QWORD *)&v824 + 1) = v433;
  if (v433)
  {
    v438 = (unint64_t *)&v433->__shared_owners_;
    do
      v439 = __ldxr(v438);
    while (__stxr(v439 + 1, v438));
  }
  v440 = v803[0];
  v830[0] = v803[1];
  *(void **)((char *)v830 + 7) = *(void **)((char *)&v803[1] + 7);
  v441 = HIBYTE(v803[2]);
  memset(v803, 0, 24);
  v442 = v793[0];
  v828[0] = v793[1];
  *(void **)((char *)v828 + 7) = *(void **)((char *)&v793[1] + 7);
  v443 = HIBYTE(v793[2]);
  memset(v793, 0, sizeof(v793));
  v826 = 0uLL;
  *((_QWORD *)&v831 + 1) = v3;
  v832[0] = 0;
  *(_QWORD *)((char *)v832 + 7) = 0;
  *(_QWORD *)&v831 = v667;
  v829 = 0uLL;
  v444 = (char *)operator new();
  *(_QWORD *)&v823 = v832[0];
  *(_QWORD *)((char *)&v823 + 7) = *(_QWORD *)((char *)v832 + 7);
  v832[0] = 0;
  *(_QWORD *)((char *)v832 + 7) = 0;
  v831 = 0uLL;
  v444[8] = 1;
  *((_QWORD *)v444 + 4) = 0;
  *((_QWORD *)v444 + 5) = 0;
  *(_QWORD *)v444 = &off_24C9ED4E8;
  *((_QWORD *)v444 + 2) = &unk_24C9ED560;
  *((_QWORD *)v444 + 3) = &unk_24C9ED5A0;
  v445 = v823;
  *(_QWORD *)(v444 + 63) = *(_QWORD *)((char *)&v823 + 7);
  *((_QWORD *)v444 + 6) = 0;
  *((_QWORD *)v444 + 7) = v445;
  v444[71] = 0;
  *(_QWORD *)&v823 = 0;
  *(_QWORD *)((char *)&v823 + 7) = 0;
  *((_QWORD *)v444 + 9) = v667;
  *((_QWORD *)v444 + 10) = v3;
  v825[1] = 0;
  v825[0] = 0;
  v446 = (_QWORD *)operator new();
  *v446 = &off_24C9ED688;
  v446[1] = v434;
  v446[2] = v433;
  v824 = 0uLL;
  *((_QWORD *)v444 + 11) = v446;
  *((_QWORD *)v444 + 12) = v444 + 96;
  *((_QWORD *)v444 + 13) = v444 + 96;
  *((_QWORD *)v444 + 14) = 0;
  *((_QWORD *)v444 + 15) = v444 + 120;
  *((_QWORD *)v444 + 16) = v444 + 120;
  *((_QWORD *)v444 + 17) = 0;
  v447 = (std::__shared_weak_count *)operator new();
  v447->__shared_owners_ = 0;
  v448 = (unint64_t *)&v447->__shared_owners_;
  v447->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ED6D8;
  v447->__shared_weak_owners_ = 0;
  v447[1].__vftable = (std::__shared_weak_count_vtbl *)v444;
  v449 = (std::__shared_weak_count *)*((_QWORD *)v444 + 5);
  if (v449)
  {
    if (v449->__shared_owners_ != -1)
      goto LABEL_698;
    do
      v450 = __ldxr(v448);
    while (__stxr(v450 + 1, v448));
    v451 = (unint64_t *)&v447->__shared_weak_owners_;
    do
      v452 = __ldxr(v451);
    while (__stxr(v452 + 1, v451));
    *((_QWORD *)v444 + 4) = v444;
    *((_QWORD *)v444 + 5) = v447;
    std::__shared_weak_count::__release_weak(v449);
  }
  else
  {
    do
      v453 = __ldxr(v448);
    while (__stxr(v453 + 1, v448));
    v454 = (unint64_t *)&v447->__shared_weak_owners_;
    do
      v455 = __ldxr(v454);
    while (__stxr(v455 + 1, v454));
    *((_QWORD *)v444 + 4) = v444;
    *((_QWORD *)v444 + 5) = v447;
  }
  do
    v456 = __ldaxr(v448);
  while (__stlxr(v456 - 1, v448));
  if (!v456)
  {
    ((void (*)(std::__shared_weak_count *))v447->__on_zero_shared)(v447);
    std::__shared_weak_count::__release_weak(v447);
  }
LABEL_698:
  v457 = (std::__shared_weak_count *)v825[1];
  if (v825[1])
  {
    v458 = (unint64_t *)((char *)v825[1] + 8);
    do
      v459 = __ldaxr(v458);
    while (__stlxr(v459 - 1, v458));
    if (!v459)
    {
      ((void (*)(std::__shared_weak_count *))v457->__on_zero_shared)(v457);
      std::__shared_weak_count::__release_weak(v457);
    }
  }
  v825[0] = v444;
  v825[1] = v447;
  v460 = (std::__shared_weak_count *)*((_QWORD *)&v831 + 1);
  if (*((_QWORD *)&v831 + 1))
  {
    v461 = (unint64_t *)(*((_QWORD *)&v831 + 1) + 8);
    do
      v462 = __ldaxr(v461);
    while (__stlxr(v462 - 1, v461));
    if (!v462)
    {
      ((void (*)(std::__shared_weak_count *))v460->__on_zero_shared)(v460);
      std::__shared_weak_count::__release_weak(v460);
    }
  }
  v813[0] = &off_24C9EC138;
  v813[1] = v440;
  v813[2] = (void *)v830[0];
  *(void **)((char *)&v813[2] + 7) = *(void **)((char *)v830 + 7);
  HIBYTE(v813[3]) = v441;
  v830[0] = 0;
  *(_QWORD *)((char *)v830 + 7) = 0;
  v813[4] = v442;
  v813[5] = (void *)v828[0];
  *(void **)((char *)&v813[5] + 7) = *(void **)((char *)v828 + 7);
  HIBYTE(v813[6]) = v443;
  v828[0] = 0;
  *(_QWORD *)((char *)v828 + 7) = 0;
  v814 = 0uLL;
  v831 = 0uLL;
  v463 = v825[0];
  v464 = (char *)v825[1];
  v815 = *(_OWORD *)v825;
  v825[0] = 0;
  v825[1] = 0;
  if (*((_QWORD *)&v815 + 1))
  {
    v465 = (unint64_t *)(v464 + 16);
    do
      v466 = __ldxr(v465);
    while (__stxr(v466 + 1, v465));
  }
  v816 = &off_24C9EC168;
  v467 = (_QWORD *)operator new();
  *v467 = &off_24C9ED728;
  v467[1] = v463;
  v467[2] = v464;
  *(_QWORD *)&v817 = v467;
  v469 = *((_QWORD *)&v815 + 1);
  v468 = v815;
  if (!*((_QWORD *)&v815 + 1))
  {
    *((_QWORD *)&v817 + 1) = v815;
    v818 = 0;
    if ((_QWORD)v815)
      v473 = v815 + 16;
    else
      v473 = 0;
    goto LABEL_728;
  }
  v470 = (unint64_t *)(*((_QWORD *)&v815 + 1) + 16);
  do
    v471 = __ldxr(v470);
  while (__stxr(v471 + 1, v470));
  v472 = *((_QWORD *)&v815 + 1);
  *((_QWORD *)&v817 + 1) = v468;
  v818 = v469;
  if ((_QWORD)v815)
    v473 = v815 + 16;
  else
    v473 = 0;
  if (!*((_QWORD *)&v815 + 1))
  {
    v468 = v815;
LABEL_728:
    v476 = 0;
    v819 = &off_24C9B2520;
    v820 = v473;
    goto LABEL_729;
  }
  v474 = (unint64_t *)(*((_QWORD *)&v815 + 1) + 16);
  do
    v475 = __ldxr(v474);
  while (__stxr(v475 + 1, v474));
  v476 = *((_QWORD *)&v815 + 1);
  v468 = v815;
  v819 = &off_24C9B2520;
  *(_QWORD *)&v820 = v473;
  *((_QWORD *)&v820 + 1) = v472;
  if (*((_QWORD *)&v815 + 1))
  {
    v477 = (unint64_t *)(*((_QWORD *)&v815 + 1) + 16);
    do
      v478 = __ldxr(v477);
    while (__stxr(v478 + 1, v477));
  }
LABEL_729:
  if (v468)
    v479 = v468 + 24;
  else
    v479 = 0;
  v821 = &off_24C9B2310;
  *(_QWORD *)&v822 = v479;
  *((_QWORD *)&v822 + 1) = v476;
  v480 = (std::__shared_weak_count *)*((_QWORD *)&v829 + 1);
  if (*((_QWORD *)&v829 + 1))
  {
    v481 = (unint64_t *)(*((_QWORD *)&v829 + 1) + 8);
    do
      v482 = __ldaxr(v481);
    while (__stlxr(v482 - 1, v481));
    if (!v482)
    {
      ((void (*)(std::__shared_weak_count *))v480->__on_zero_shared)(v480);
      std::__shared_weak_count::__release_weak(v480);
    }
  }
  v483 = (std::__shared_weak_count *)*((_QWORD *)&v824 + 1);
  if (*((_QWORD *)&v824 + 1))
  {
    v484 = (unint64_t *)(*((_QWORD *)&v824 + 1) + 8);
    do
      v485 = __ldaxr(v484);
    while (__stlxr(v485 - 1, v484));
    if (!v485)
    {
      ((void (*)(std::__shared_weak_count *))v483->__on_zero_shared)(v483);
      std::__shared_weak_count::__release_weak(v483);
    }
  }
  v486 = (std::__shared_weak_count *)*((_QWORD *)&v826 + 1);
  if (!*((_QWORD *)&v826 + 1))
    goto LABEL_746;
  v487 = (unint64_t *)(*((_QWORD *)&v826 + 1) + 8);
  do
    v488 = __ldaxr(v487);
  while (__stlxr(v488 - 1, v487));
  if (!v488)
  {
    ((void (*)(std::__shared_weak_count *))v486->__on_zero_shared)(v486);
    std::__shared_weak_count::__release_weak(v486);
    if ((SHIBYTE(v793[2]) & 0x80000000) == 0)
    {
LABEL_747:
      if ((SHIBYTE(v803[2]) & 0x80000000) == 0)
        goto LABEL_748;
      goto LABEL_752;
    }
  }
  else
  {
LABEL_746:
    if ((SHIBYTE(v793[2]) & 0x80000000) == 0)
      goto LABEL_747;
  }
  operator delete(v793[0]);
  if ((SHIBYTE(v803[2]) & 0x80000000) == 0)
  {
LABEL_748:
    if (v675)
      goto LABEL_754;
    goto LABEL_753;
  }
LABEL_752:
  operator delete(v803[0]);
  if (v675)
    goto LABEL_754;
LABEL_753:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 534, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_754:
  v673 = v667;
  v674 = (std::__shared_weak_count *)v3;
  do
    v489 = __ldxr(v4);
  while (__stxr(v489 + 1, v4));
  v490 = *a2;
  v491 = (std::__shared_weak_count *)a2[1];
  if (*a2)
    v492 = *a2 + 504;
  else
    v492 = 0;
  v671 = v492;
  v672 = v491;
  if (v491)
  {
    v493 = (unint64_t *)&v491->__shared_owners_;
    do
      v494 = __ldxr(v493);
    while (__stxr(v494 + 1, v493));
  }
  if (*(char *)(v492 + 31) < 0)
  {
    sub_20E860C04(v793, *(void **)(v492 + 8), *(_QWORD *)(v492 + 16));
  }
  else
  {
    v495 = *(_OWORD *)(v492 + 8);
    v793[2] = *(void **)(v492 + 24);
    *(_OWORD *)v793 = v495;
  }
  if (*(char *)(v490 + 559) < 0)
  {
    sub_20E860C04(v825, *(void **)(v490 + 536), *(_QWORD *)(v490 + 544));
  }
  else
  {
    *(_OWORD *)v825 = *(_OWORD *)(v490 + 536);
    v825[2] = *(void **)(v490 + 552);
  }
  v673 = 0;
  v674 = 0;
  *(_QWORD *)&v823 = v492;
  *((_QWORD *)&v823 + 1) = v491;
  if (v491)
  {
    v496 = (unint64_t *)&v491->__shared_owners_;
    do
      v497 = __ldxr(v496);
    while (__stxr(v497 + 1, v496));
  }
  v498 = v793[0];
  v828[0] = v793[1];
  *(void **)((char *)v828 + 7) = *(void **)((char *)&v793[1] + 7);
  v662 = HIBYTE(v793[2]);
  memset(v793, 0, sizeof(v793));
  v499 = v825[0];
  v827[0] = v825[1];
  *(void **)((char *)v827 + 7) = *(void **)((char *)&v825[1] + 7);
  v500 = HIBYTE(v825[2]);
  memset(v825, 0, sizeof(v825));
  v824 = 0uLL;
  *((_QWORD *)&v829 + 1) = v3;
  v830[0] = 0;
  *(_QWORD *)((char *)v830 + 7) = 0;
  *(_QWORD *)&v829 = v667;
  v826 = 0uLL;
  v501 = operator new();
  v832[0] = v830[0];
  *(_QWORD *)((char *)v832 + 7) = *(_QWORD *)((char *)v830 + 7);
  v830[0] = 0;
  *(_QWORD *)((char *)v830 + 7) = 0;
  v829 = 0uLL;
  *(_BYTE *)(v501 + 8) = 1;
  *(_QWORD *)(v501 + 32) = 0;
  *(_QWORD *)(v501 + 40) = 0;
  *(_QWORD *)v501 = &off_24C9ED7A0;
  *(_QWORD *)(v501 + 16) = &unk_24C9ED818;
  *(_QWORD *)(v501 + 24) = &unk_24C9ED858;
  v502 = v832[0];
  *(_QWORD *)(v501 + 63) = *(_QWORD *)((char *)v832 + 7);
  *(_QWORD *)(v501 + 48) = 0;
  *(_QWORD *)(v501 + 56) = v502;
  *(_BYTE *)(v501 + 71) = 0;
  *((_QWORD *)&v831 + 1) = 0;
  v832[0] = 0;
  *(_QWORD *)((char *)v832 + 7) = 0;
  *(_QWORD *)(v501 + 72) = v667;
  *(_QWORD *)(v501 + 80) = v3;
  *(_QWORD *)&v831 = 0;
  v503 = (_QWORD *)operator new();
  *v503 = &off_24C9ED940;
  v503[1] = v492;
  v503[2] = v491;
  v823 = 0uLL;
  *(_QWORD *)(v501 + 88) = v503;
  *(_QWORD *)(v501 + 96) = v501 + 96;
  *(_QWORD *)(v501 + 104) = v501 + 96;
  *(_QWORD *)(v501 + 112) = 0;
  *(_QWORD *)(v501 + 120) = v501 + 120;
  *(_QWORD *)(v501 + 128) = v501 + 120;
  *(_QWORD *)(v501 + 136) = 0;
  v504 = (std::__shared_weak_count *)operator new();
  v504->__shared_owners_ = 0;
  v505 = (unint64_t *)&v504->__shared_owners_;
  v504->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ED990;
  v504->__shared_weak_owners_ = 0;
  v504[1].__vftable = (std::__shared_weak_count_vtbl *)v501;
  v506 = *(std::__shared_weak_count **)(v501 + 40);
  if (v506)
  {
    if (v506->__shared_owners_ != -1)
      goto LABEL_784;
    do
      v507 = __ldxr(v505);
    while (__stxr(v507 + 1, v505));
    v508 = (unint64_t *)&v504->__shared_weak_owners_;
    do
      v509 = __ldxr(v508);
    while (__stxr(v509 + 1, v508));
    *(_QWORD *)(v501 + 32) = v501;
    *(_QWORD *)(v501 + 40) = v504;
    std::__shared_weak_count::__release_weak(v506);
  }
  else
  {
    do
      v510 = __ldxr(v505);
    while (__stxr(v510 + 1, v505));
    v511 = (unint64_t *)&v504->__shared_weak_owners_;
    do
      v512 = __ldxr(v511);
    while (__stxr(v512 + 1, v511));
    *(_QWORD *)(v501 + 32) = v501;
    *(_QWORD *)(v501 + 40) = v504;
  }
  do
    v513 = __ldaxr(v505);
  while (__stlxr(v513 - 1, v505));
  if (!v513)
  {
    ((void (*)(std::__shared_weak_count *))v504->__on_zero_shared)(v504);
    std::__shared_weak_count::__release_weak(v504);
  }
LABEL_784:
  v514 = (std::__shared_weak_count *)*((_QWORD *)&v831 + 1);
  if (*((_QWORD *)&v831 + 1))
  {
    v515 = (unint64_t *)(*((_QWORD *)&v831 + 1) + 8);
    do
      v516 = __ldaxr(v515);
    while (__stlxr(v516 - 1, v515));
    if (!v516)
    {
      ((void (*)(std::__shared_weak_count *))v514->__on_zero_shared)(v514);
      std::__shared_weak_count::__release_weak(v514);
    }
  }
  *(_QWORD *)&v831 = v501;
  *((_QWORD *)&v831 + 1) = v504;
  v517 = (std::__shared_weak_count *)*((_QWORD *)&v829 + 1);
  if (*((_QWORD *)&v829 + 1))
  {
    v518 = (unint64_t *)(*((_QWORD *)&v829 + 1) + 8);
    do
      v519 = __ldaxr(v518);
    while (__stlxr(v519 - 1, v518));
    if (!v519)
    {
      ((void (*)(std::__shared_weak_count *))v517->__on_zero_shared)(v517);
      std::__shared_weak_count::__release_weak(v517);
    }
  }
  v803[0] = &off_24C9EC1A0;
  v803[1] = v498;
  v803[2] = (void *)v828[0];
  *(void **)((char *)&v803[2] + 7) = *(void **)((char *)v828 + 7);
  HIBYTE(v803[3]) = v662;
  v828[0] = 0;
  *(_QWORD *)((char *)v828 + 7) = 0;
  v803[4] = v499;
  v803[5] = (void *)v827[0];
  *(void **)((char *)&v803[5] + 7) = *(void **)((char *)v827 + 7);
  HIBYTE(v803[6]) = v500;
  v827[0] = 0;
  *(_QWORD *)((char *)v827 + 7) = 0;
  v804 = 0uLL;
  v829 = 0uLL;
  v520 = v831;
  v805 = v831;
  v831 = 0uLL;
  if (*((_QWORD *)&v805 + 1))
  {
    v521 = (unint64_t *)(*((_QWORD *)&v520 + 1) + 16);
    do
      v522 = __ldxr(v521);
    while (__stxr(v522 + 1, v521));
  }
  v806 = &off_24C9EC1D0;
  v523 = operator new();
  *(_QWORD *)v523 = &off_24C9ED9E0;
  *(_OWORD *)(v523 + 8) = v520;
  *(_QWORD *)&v807 = v523;
  v525 = *((_QWORD *)&v805 + 1);
  v524 = v805;
  if (!*((_QWORD *)&v805 + 1))
  {
    *((_QWORD *)&v807 + 1) = v805;
    v808 = 0;
    if ((_QWORD)v805)
      v529 = v805 + 16;
    else
      v529 = 0;
    goto LABEL_814;
  }
  v526 = (unint64_t *)(*((_QWORD *)&v805 + 1) + 16);
  do
    v527 = __ldxr(v526);
  while (__stxr(v527 + 1, v526));
  v528 = *((_QWORD *)&v805 + 1);
  *((_QWORD *)&v807 + 1) = v524;
  v808 = v525;
  if ((_QWORD)v805)
    v529 = v805 + 16;
  else
    v529 = 0;
  if (!*((_QWORD *)&v805 + 1))
  {
    v524 = v805;
LABEL_814:
    v532 = 0;
    v809 = &off_24C9B2520;
    v810 = v529;
    goto LABEL_815;
  }
  v530 = (unint64_t *)(*((_QWORD *)&v805 + 1) + 16);
  do
    v531 = __ldxr(v530);
  while (__stxr(v531 + 1, v530));
  v532 = *((_QWORD *)&v805 + 1);
  v524 = v805;
  v809 = &off_24C9B2520;
  *(_QWORD *)&v810 = v529;
  *((_QWORD *)&v810 + 1) = v528;
  if (*((_QWORD *)&v805 + 1))
  {
    v533 = (unint64_t *)(*((_QWORD *)&v805 + 1) + 16);
    do
      v534 = __ldxr(v533);
    while (__stxr(v534 + 1, v533));
  }
LABEL_815:
  if (v524)
    v535 = v524 + 24;
  else
    v535 = 0;
  v811 = &off_24C9B2310;
  *(_QWORD *)&v812 = v535;
  *((_QWORD *)&v812 + 1) = v532;
  v536 = (std::__shared_weak_count *)*((_QWORD *)&v826 + 1);
  if (*((_QWORD *)&v826 + 1))
  {
    v537 = (unint64_t *)(*((_QWORD *)&v826 + 1) + 8);
    do
      v538 = __ldaxr(v537);
    while (__stlxr(v538 - 1, v537));
    if (!v538)
    {
      ((void (*)(std::__shared_weak_count *))v536->__on_zero_shared)(v536);
      std::__shared_weak_count::__release_weak(v536);
    }
  }
  v539 = (std::__shared_weak_count *)*((_QWORD *)&v823 + 1);
  if (*((_QWORD *)&v823 + 1))
  {
    v540 = (unint64_t *)(*((_QWORD *)&v823 + 1) + 8);
    do
      v541 = __ldaxr(v540);
    while (__stlxr(v541 - 1, v540));
    if (!v541)
    {
      ((void (*)(std::__shared_weak_count *))v539->__on_zero_shared)(v539);
      std::__shared_weak_count::__release_weak(v539);
    }
  }
  v542 = (std::__shared_weak_count *)*((_QWORD *)&v824 + 1);
  if (!*((_QWORD *)&v824 + 1))
    goto LABEL_832;
  v543 = (unint64_t *)(*((_QWORD *)&v824 + 1) + 8);
  do
    v544 = __ldaxr(v543);
  while (__stlxr(v544 - 1, v543));
  if (!v544)
  {
    ((void (*)(std::__shared_weak_count *))v542->__on_zero_shared)(v542);
    std::__shared_weak_count::__release_weak(v542);
    if ((SHIBYTE(v825[2]) & 0x80000000) == 0)
    {
LABEL_833:
      if ((SHIBYTE(v793[2]) & 0x80000000) == 0)
        goto LABEL_834;
      goto LABEL_838;
    }
  }
  else
  {
LABEL_832:
    if ((SHIBYTE(v825[2]) & 0x80000000) == 0)
      goto LABEL_833;
  }
  operator delete(v825[0]);
  if ((SHIBYTE(v793[2]) & 0x80000000) == 0)
  {
LABEL_834:
    if (v671)
      goto LABEL_840;
    goto LABEL_839;
  }
LABEL_838:
  operator delete(v793[0]);
  if (v671)
    goto LABEL_840;
LABEL_839:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 534, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_840:
  *(_QWORD *)&v670 = v667;
  *((_QWORD *)&v670 + 1) = v3;
  do
    v545 = __ldxr(v4);
  while (__stxr(v545 + 1, v4));
  v546 = (std::__shared_weak_count *)a2[1];
  if (*a2)
    v547 = *a2 + 560;
  else
    v547 = 0;
  v668 = v547;
  v669 = v546;
  if (v546)
  {
    v548 = (unint64_t *)&v546->__shared_owners_;
    do
      v549 = __ldxr(v548);
    while (__stxr(v549 + 1, v548));
  }
  sub_20EE2F688((uint64_t)v793, &v670, &v668);
  v550 = operator new();
  *(_QWORD *)v550 = &off_24C9EBEC8;
  *(_QWORD *)(v550 + 88) = &off_24C9EBEF8;
  *(_QWORD *)(v550 + 336) = &off_24C9EBF68;
  *(_QWORD *)(v550 + 424) = &off_24C9E10B0;
  *(_QWORD *)(v550 + 504) = &off_24C9EBF98;
  *(_QWORD *)(v550 + 592) = &off_24C9B5708;
  *(_QWORD *)(v550 + 624) = &off_24C9EBFC8;
  *(_QWORD *)(v550 + 672) = &off_24C9EC038;
  *(_QWORD *)(v550 + 760) = &off_24C9EC068;
  *(_QWORD *)(v550 + 1008) = &off_24C9EC0A0;
  *(_QWORD *)(v550 + 1096) = &off_24C9E1150;
  *(_QWORD *)(v550 + 1176) = &off_24C9EC0D0;
  *(_QWORD *)(v550 + 1264) = &off_24C9EC100;
  *(_QWORD *)(v550 + 1344) = &off_24C9EC138;
  *(_QWORD *)(v550 + 1432) = &off_24C9EC168;
  v551 = v822;
  *(_QWORD *)(v550 + 1512) = &off_24C9EC1A0;
  *(_QWORD *)(v550 + 1600) = &off_24C9EC1D0;
  *v663 = v550;
  *(_QWORD *)(v550 + 24) = v781[3];
  v552 = *(_OWORD *)&v781[1];
  memset(&v781[1], 0, 24);
  *(_QWORD *)(v550 + 48) = v781[6];
  v553 = *(_OWORD *)&v781[4];
  memset(&v781[4], 0, 24);
  v554 = v782;
  v782 = 0uLL;
  v555 = v783;
  v783 = 0uLL;
  v556 = v785;
  v557 = v786;
  *((_QWORD *)&v785 + 1) = 0;
  v786 = 0;
  v558 = v790;
  v790 = 0uLL;
  *(_QWORD *)(v550 + 168) = &off_24C9E1048;
  *(_QWORD *)(v550 + 192) = v768;
  *(_QWORD *)(v550 + 216) = v770;
  *(_QWORD *)(v550 + 256) = &off_24C9E1078;
  *(_QWORD *)(v550 + 280) = v774;
  *(_QWORD *)(v550 + 288) = &off_24C9CCAD0;
  v559 = v771;
  v560 = v772;
  v561 = v776;
  *(void **)(v550 + 360) = __p[3];
  *(_OWORD *)(v550 + 344) = *(_OWORD *)&__p[1];
  memset(&__p[1], 0, 24);
  *(void **)(v550 + 384) = __p[6];
  v562 = *(_OWORD *)&__p[4];
  memset(&__p[4], 0, 24);
  v563 = v754;
  v754 = 0uLL;
  v564 = v755;
  v755 = 0uLL;
  *(_QWORD *)(v550 + 448) = v758;
  v565 = v757;
  *((_QWORD *)&v757 + 1) = 0;
  v758 = 0;
  v566 = *(_OWORD *)&__dst[1];
  v567 = v762;
  v762 = 0uLL;
  *(void **)(v550 + 528) = v739[3];
  v568 = *(_OWORD *)&v739[1];
  memset(&v739[1], 0, 24);
  *(void **)(v550 + 552) = v739[6];
  *(_OWORD *)(v550 + 536) = *(_OWORD *)&v739[4];
  memset(&v739[4], 0, 24);
  v569 = v740;
  v740 = 0uLL;
  v570 = v741;
  v741 = 0uLL;
  *(_QWORD *)(v550 + 616) = v744;
  v571 = v743;
  *((_QWORD *)&v743 + 1) = 0;
  v744 = 0;
  v572 = v748;
  v748 = 0uLL;
  *(void **)(v550 + 696) = v725[3];
  *(_OWORD *)(v550 + 680) = *(_OWORD *)&v725[1];
  memset(&v725[1], 0, 24);
  *(void **)(v550 + 720) = v725[6];
  v573 = *(_OWORD *)&v725[4];
  memset(&v725[4], 0, 24);
  v574 = v726;
  v726 = 0uLL;
  v575 = v727;
  v727 = 0uLL;
  *(_QWORD *)(v550 + 784) = v730;
  v576 = v729;
  *((_QWORD *)&v729 + 1) = 0;
  v730 = 0;
  *(_QWORD *)(v550 + 112) = v557;
  *(_QWORD *)(v550 + 120) = &off_24C9EBF30;
  *(_QWORD *)(v550 + 792) = &off_24C9EBF30;
  v577 = v734;
  v734 = 0uLL;
  *(_QWORD *)(v550 + 840) = &off_24C9E10E8;
  *(_QWORD *)(v550 + 864) = v712;
  *(_QWORD *)(v550 + 888) = v714;
  *(_OWORD *)(v550 + 872) = v713;
  *(_QWORD *)(v550 + 928) = &off_24C9E1118;
  *(_QWORD *)(v550 + 952) = v718;
  v578 = v715;
  v579 = v716;
  v580 = v720;
  *(void **)(v550 + 1032) = v697[3];
  *(_OWORD *)(v550 + 1016) = *(_OWORD *)&v697[1];
  memset(&v697[1], 0, 24);
  *(void **)(v550 + 1056) = v697[6];
  *(_OWORD *)(v550 + 1208) = *(_OWORD *)&v683[4];
  *(_OWORD *)(v550 + 1352) = *(_OWORD *)&v813[1];
  *(_OWORD *)(v550 + 8) = v552;
  v581 = *(_OWORD *)&v711[1];
  v582 = v698;
  v583 = v699;
  v584 = v706;
  *(_OWORD *)(v550 + 32) = v553;
  *(_OWORD *)(v550 + 56) = v554;
  *(_OWORD *)(v550 + 72) = v555;
  *(_OWORD *)(v550 + 96) = v556;
  *(_OWORD *)(v550 + 128) = v788;
  *(_OWORD *)(v550 + 152) = v558;
  *(_OWORD *)(v550 + 176) = v566;
  *(_OWORD *)(v550 + 200) = v769;
  v585 = v684;
  v586 = v685;
  v587 = v692;
  *(_OWORD *)(v550 + 224) = v559;
  *(_OWORD *)(v550 + 240) = v560;
  *(_OWORD *)(v550 + 264) = v773;
  *(_OWORD *)(v550 + 296) = v775;
  *(_OWORD *)(v550 + 320) = v561;
  *(_OWORD *)(v550 + 368) = v562;
  *(_OWORD *)(v550 + 392) = v563;
  *(_OWORD *)(v550 + 408) = v564;
  *(_OWORD *)(v550 + 432) = v565;
  *(_OWORD *)(v550 + 464) = v760;
  *(_OWORD *)(v550 + 488) = v567;
  *(_OWORD *)(v550 + 512) = v568;
  *(_OWORD *)(v550 + 560) = v569;
  *(_OWORD *)(v550 + 576) = v570;
  *(_OWORD *)(v550 + 600) = v571;
  *(_OWORD *)(v550 + 632) = v746;
  *(_OWORD *)(v550 + 656) = v572;
  *(_OWORD *)(v550 + 704) = v573;
  *(_OWORD *)(v550 + 728) = v574;
  *(_OWORD *)(v550 + 744) = v575;
  *(_OWORD *)(v550 + 768) = v576;
  *(_OWORD *)(v550 + 800) = v732;
  *(_OWORD *)(v550 + 824) = v577;
  *(_OWORD *)(v550 + 848) = v581;
  *(_OWORD *)(v550 + 896) = v578;
  *(_OWORD *)(v550 + 912) = v579;
  *(_OWORD *)(v550 + 936) = v717;
  *(_OWORD *)(v550 + 968) = v719;
  *(_OWORD *)(v550 + 992) = v580;
  *(_OWORD *)(v550 + 1040) = *(_OWORD *)&v697[4];
  *(_OWORD *)(v550 + 1064) = v582;
  *(_OWORD *)(v550 + 1080) = v583;
  *(_OWORD *)(v550 + 1104) = v701;
  *(_OWORD *)(v550 + 1136) = v704;
  *(_OWORD *)(v550 + 1160) = v584;
  *(_OWORD *)(v550 + 1184) = *(_OWORD *)&v683[1];
  *(_OWORD *)(v550 + 1232) = v585;
  *(_OWORD *)(v550 + 1248) = v586;
  *(_OWORD *)(v550 + 1272) = v687;
  *(_OWORD *)(v550 + 1304) = v690;
  *(_OWORD *)(v550 + 1328) = v587;
  *(_OWORD *)(v550 + 1376) = *(_OWORD *)&v813[4];
  *(_OWORD *)(v550 + 1400) = v814;
  *(_OWORD *)(v550 + 1416) = v815;
  *(_OWORD *)(v550 + 1440) = v817;
  *(_OWORD *)(v550 + 1472) = v820;
  *(_QWORD *)&v785 = 0;
  v788 = 0uLL;
  *(_QWORD *)(v550 + 144) = &off_24C9B2310;
  __dst[2] = 0;
  __dst[1] = 0;
  v768 = 0;
  v769 = 0uLL;
  v770 = 0;
  v771 = 0uLL;
  v772 = 0uLL;
  v773 = 0uLL;
  v774 = 0;
  *(_QWORD *)&v775 = 0;
  *(_QWORD *)(v550 + 312) = &off_24C9B2310;
  *((_QWORD *)&v775 + 1) = 0;
  v776 = 0uLL;
  *(_QWORD *)(v550 + 456) = &off_24C9EB528;
  *(_QWORD *)&v757 = 0;
  v760 = 0uLL;
  *(_QWORD *)(v550 + 480) = &off_24C9B2310;
  *(_QWORD *)&v743 = 0;
  v746 = 0uLL;
  *(_QWORD *)(v550 + 648) = &off_24C9B2310;
  *(_QWORD *)&v729 = 0;
  v732 = 0uLL;
  *(_QWORD *)(v550 + 816) = &off_24C9B2310;
  v711[2] = 0;
  v711[1] = 0;
  v712 = 0;
  v713 = 0uLL;
  v714 = 0;
  v715 = 0uLL;
  v716 = 0uLL;
  v717 = 0uLL;
  *(_QWORD *)(v550 + 960) = &off_24C9B2520;
  v718 = 0;
  *(_QWORD *)&v719 = 0;
  *(_QWORD *)(v550 + 984) = &off_24C9B2310;
  *((_QWORD *)&v719 + 1) = 0;
  v720 = 0uLL;
  memset(&v697[4], 0, 24);
  v698 = 0uLL;
  v699 = 0uLL;
  *(_QWORD *)(v550 + 1120) = v702;
  *((_QWORD *)&v701 + 1) = 0;
  v702 = 0;
  *(_QWORD *)(v550 + 1128) = &off_24C9B2520;
  *(_QWORD *)&v701 = 0;
  v704 = 0uLL;
  *(_QWORD *)(v550 + 1152) = &off_24C9B2310;
  v706 = 0uLL;
  *(void **)(v550 + 1200) = v683[3];
  memset(&v683[1], 0, 24);
  *(void **)(v550 + 1224) = v683[6];
  memset(&v683[4], 0, 24);
  v684 = 0uLL;
  v685 = 0uLL;
  *(_QWORD *)(v550 + 1288) = v688;
  *((_QWORD *)&v687 + 1) = 0;
  v688 = 0;
  *(_QWORD *)(v550 + 1296) = &off_24C9B2520;
  *(_QWORD *)&v687 = 0;
  v690 = 0uLL;
  *(_QWORD *)(v550 + 1320) = &off_24C9B2310;
  v692 = 0uLL;
  *(void **)(v550 + 1368) = v813[3];
  memset(&v813[1], 0, 24);
  *(void **)(v550 + 1392) = v813[6];
  memset(&v813[4], 0, 24);
  v814 = 0uLL;
  v815 = 0uLL;
  *(_QWORD *)(v550 + 1456) = v818;
  *((_QWORD *)&v817 + 1) = 0;
  v818 = 0;
  *(_QWORD *)(v550 + 1464) = &off_24C9B2520;
  *(_QWORD *)&v817 = 0;
  v820 = 0uLL;
  *(_QWORD *)(v550 + 1488) = &off_24C9B2310;
  *(_OWORD *)(v550 + 1496) = v551;
  v822 = 0uLL;
  v588 = *(_OWORD *)&v803[1];
  *(void **)(v550 + 1536) = v803[3];
  *(_OWORD *)(v550 + 1520) = v588;
  memset(&v803[1], 0, 24);
  v589 = *(_OWORD *)&v803[4];
  *(void **)(v550 + 1560) = v803[6];
  *(_OWORD *)(v550 + 1544) = v589;
  memset(&v803[4], 0, 24);
  *(_OWORD *)(v550 + 1568) = v804;
  v804 = 0uLL;
  *(_OWORD *)(v550 + 1584) = v805;
  v805 = 0uLL;
  *(_OWORD *)(v550 + 1608) = v807;
  *(_QWORD *)(v550 + 1624) = v808;
  *((_QWORD *)&v807 + 1) = 0;
  v808 = 0;
  *(_QWORD *)(v550 + 1632) = &off_24C9B2520;
  *(_OWORD *)(v550 + 1640) = v810;
  *(_QWORD *)&v807 = 0;
  v810 = 0uLL;
  *(_QWORD *)(v550 + 1656) = &off_24C9B2310;
  *(_OWORD *)(v550 + 1664) = v812;
  v812 = 0uLL;
  *(_QWORD *)(v550 + 1680) = &off_24C9EB598;
  v590 = *(_OWORD *)&v793[1];
  *(_QWORD *)(v550 + 1704) = v794;
  *(_OWORD *)(v550 + 1688) = v590;
  v793[2] = 0;
  v793[1] = 0;
  v591 = v795;
  *(_QWORD *)(v550 + 1728) = v796;
  *(_OWORD *)(v550 + 1712) = v591;
  v794 = 0;
  v795 = 0uLL;
  v796 = 0;
  *(_OWORD *)(v550 + 1736) = v797;
  v797 = 0uLL;
  *(_OWORD *)(v550 + 1752) = v798;
  v798 = 0uLL;
  *(_QWORD *)(v550 + 1768) = &off_24C9EB5C8;
  v592 = v799;
  v799 = 0uLL;
  *(_OWORD *)(v550 + 1776) = v592;
  *(_QWORD *)(v550 + 1792) = v800;
  *(_QWORD *)(v550 + 1800) = &off_24C9EB528;
  *(_OWORD *)(v550 + 1808) = v801;
  v800 = 0;
  *(_QWORD *)&v801 = 0;
  *(_QWORD *)(v550 + 1824) = &off_24C9B2310;
  *(_OWORD *)(v550 + 1832) = v802;
  *((_QWORD *)&v801 + 1) = 0;
  v802 = 0uLL;
  sub_20EE33F5C((uint64_t)v793);
  v593 = v669;
  if (v669)
  {
    v594 = (unint64_t *)&v669->__shared_owners_;
    do
      v595 = __ldaxr(v594);
    while (__stlxr(v595 - 1, v594));
    if (!v595)
    {
      ((void (*)(std::__shared_weak_count *))v593->__on_zero_shared)(v593);
      std::__shared_weak_count::__release_weak(v593);
    }
  }
  v596 = (std::__shared_weak_count *)*((_QWORD *)&v670 + 1);
  if (*((_QWORD *)&v670 + 1))
  {
    v597 = (unint64_t *)(*((_QWORD *)&v670 + 1) + 8);
    do
      v598 = __ldaxr(v597);
    while (__stlxr(v598 - 1, v597));
    if (!v598)
    {
      ((void (*)(std::__shared_weak_count *))v596->__on_zero_shared)(v596);
      std::__shared_weak_count::__release_weak(v596);
    }
  }
  sub_20EE44084((uint64_t)v803);
  v599 = v672;
  if (v672)
  {
    v600 = (unint64_t *)&v672->__shared_owners_;
    do
      v601 = __ldaxr(v600);
    while (__stlxr(v601 - 1, v600));
    if (!v601)
    {
      ((void (*)(std::__shared_weak_count *))v599->__on_zero_shared)(v599);
      std::__shared_weak_count::__release_weak(v599);
    }
  }
  v602 = v674;
  if (v674)
  {
    v603 = (unint64_t *)&v674->__shared_owners_;
    do
      v604 = __ldaxr(v603);
    while (__stlxr(v604 - 1, v603));
    if (!v604)
    {
      ((void (*)(std::__shared_weak_count *))v602->__on_zero_shared)(v602);
      std::__shared_weak_count::__release_weak(v602);
    }
  }
  sub_20EE44268((uint64_t)v813);
  v605 = v676;
  if (v676)
  {
    v606 = (unint64_t *)&v676->__shared_owners_;
    do
      v607 = __ldaxr(v606);
    while (__stlxr(v607 - 1, v606));
    if (!v607)
    {
      ((void (*)(std::__shared_weak_count *))v605->__on_zero_shared)(v605);
      std::__shared_weak_count::__release_weak(v605);
    }
  }
  v608 = v678;
  if (v678)
  {
    v609 = (unint64_t *)&v678->__shared_owners_;
    do
      v610 = __ldaxr(v609);
    while (__stlxr(v610 - 1, v609));
    if (!v610)
    {
      ((void (*)(std::__shared_weak_count *))v608->__on_zero_shared)(v608);
      std::__shared_weak_count::__release_weak(v608);
    }
  }
  sub_20EE4444C((uint64_t)v683);
  v611 = v680;
  if (v680)
  {
    v612 = (unint64_t *)&v680->__shared_owners_;
    do
      v613 = __ldaxr(v612);
    while (__stlxr(v613 - 1, v612));
    if (!v613)
    {
      ((void (*)(std::__shared_weak_count *))v611->__on_zero_shared)(v611);
      std::__shared_weak_count::__release_weak(v611);
    }
  }
  v614 = v682;
  if (v682)
  {
    v615 = (unint64_t *)&v682->__shared_owners_;
    do
      v616 = __ldaxr(v615);
    while (__stlxr(v616 - 1, v615));
    if (!v616)
    {
      ((void (*)(std::__shared_weak_count *))v614->__on_zero_shared)(v614);
      std::__shared_weak_count::__release_weak(v614);
    }
  }
  sub_20EE44630((uint64_t)v697);
  v617 = v694;
  if (v694)
  {
    v618 = (unint64_t *)&v694->__shared_owners_;
    do
      v619 = __ldaxr(v618);
    while (__stlxr(v619 - 1, v618));
    if (!v619)
    {
      ((void (*)(std::__shared_weak_count *))v617->__on_zero_shared)(v617);
      std::__shared_weak_count::__release_weak(v617);
    }
  }
  v620 = v696;
  if (v696)
  {
    v621 = (unint64_t *)&v696->__shared_owners_;
    do
      v622 = __ldaxr(v621);
    while (__stlxr(v622 - 1, v621));
    if (!v622)
    {
      ((void (*)(std::__shared_weak_count *))v620->__on_zero_shared)(v620);
      std::__shared_weak_count::__release_weak(v620);
    }
  }
  sub_20ED12D68((uint64_t)v711);
  v623 = v708;
  if (v708)
  {
    v624 = (unint64_t *)&v708->__shared_owners_;
    do
      v625 = __ldaxr(v624);
    while (__stlxr(v625 - 1, v624));
    if (!v625)
    {
      ((void (*)(std::__shared_weak_count *))v623->__on_zero_shared)(v623);
      std::__shared_weak_count::__release_weak(v623);
    }
  }
  v626 = v710;
  if (v710)
  {
    v627 = (unint64_t *)&v710->__shared_owners_;
    do
      v628 = __ldaxr(v627);
    while (__stlxr(v628 - 1, v627));
    if (!v628)
    {
      ((void (*)(std::__shared_weak_count *))v626->__on_zero_shared)(v626);
      std::__shared_weak_count::__release_weak(v626);
    }
  }
  sub_20EE44814((uint64_t)v725);
  v629 = v722;
  if (v722)
  {
    v630 = (unint64_t *)&v722->__shared_owners_;
    do
      v631 = __ldaxr(v630);
    while (__stlxr(v631 - 1, v630));
    if (!v631)
    {
      ((void (*)(std::__shared_weak_count *))v629->__on_zero_shared)(v629);
      std::__shared_weak_count::__release_weak(v629);
    }
  }
  v632 = v724;
  if (v724)
  {
    v633 = (unint64_t *)&v724->__shared_owners_;
    do
      v634 = __ldaxr(v633);
    while (__stlxr(v634 - 1, v633));
    if (!v634)
    {
      ((void (*)(std::__shared_weak_count *))v632->__on_zero_shared)(v632);
      std::__shared_weak_count::__release_weak(v632);
    }
  }
  sub_20EE449F8((uint64_t)v739);
  v635 = v736;
  if (v736)
  {
    v636 = (unint64_t *)&v736->__shared_owners_;
    do
      v637 = __ldaxr(v636);
    while (__stlxr(v637 - 1, v636));
    if (!v637)
    {
      ((void (*)(std::__shared_weak_count *))v635->__on_zero_shared)(v635);
      std::__shared_weak_count::__release_weak(v635);
    }
  }
  v638 = v738;
  if (v738)
  {
    v639 = (unint64_t *)&v738->__shared_owners_;
    do
      v640 = __ldaxr(v639);
    while (__stlxr(v640 - 1, v639));
    if (!v640)
    {
      ((void (*)(std::__shared_weak_count *))v638->__on_zero_shared)(v638);
      std::__shared_weak_count::__release_weak(v638);
    }
  }
  sub_20EE44BDC((uint64_t)__p);
  v641 = v750;
  if (v750)
  {
    v642 = (unint64_t *)&v750->__shared_owners_;
    do
      v643 = __ldaxr(v642);
    while (__stlxr(v643 - 1, v642));
    if (!v643)
    {
      ((void (*)(std::__shared_weak_count *))v641->__on_zero_shared)(v641);
      std::__shared_weak_count::__release_weak(v641);
    }
  }
  v644 = v752;
  if (v752)
  {
    v645 = (unint64_t *)&v752->__shared_owners_;
    do
      v646 = __ldaxr(v645);
    while (__stlxr(v646 - 1, v645));
    if (!v646)
    {
      ((void (*)(std::__shared_weak_count *))v644->__on_zero_shared)(v644);
      std::__shared_weak_count::__release_weak(v644);
    }
  }
  sub_20ED14D8C((uint64_t)__dst);
  v647 = v764;
  if (v764)
  {
    v648 = (unint64_t *)&v764->__shared_owners_;
    do
      v649 = __ldaxr(v648);
    while (__stlxr(v649 - 1, v648));
    if (!v649)
    {
      ((void (*)(std::__shared_weak_count *))v647->__on_zero_shared)(v647);
      std::__shared_weak_count::__release_weak(v647);
    }
  }
  v650 = v766;
  if (v766)
  {
    v651 = (unint64_t *)&v766->__shared_owners_;
    do
      v652 = __ldaxr(v651);
    while (__stlxr(v652 - 1, v651));
    if (!v652)
    {
      ((void (*)(std::__shared_weak_count *))v650->__on_zero_shared)(v650);
      std::__shared_weak_count::__release_weak(v650);
    }
  }
  sub_20EE44DC0((uint64_t)v781);
  v653 = v778;
  if (v778)
  {
    v654 = (unint64_t *)&v778->__shared_owners_;
    do
      v655 = __ldaxr(v654);
    while (__stlxr(v655 - 1, v654));
    if (!v655)
    {
      ((void (*)(std::__shared_weak_count *))v653->__on_zero_shared)(v653);
      std::__shared_weak_count::__release_weak(v653);
    }
  }
  v656 = v780;
  if (v780)
  {
    v657 = (unint64_t *)&v780->__shared_owners_;
    do
      v658 = __ldaxr(v657);
    while (__stlxr(v658 - 1, v657));
    if (!v658)
    {
      ((void (*)(std::__shared_weak_count *))v656->__on_zero_shared)(v656);
      std::__shared_weak_count::__release_weak(v656);
    }
  }
  v659 = v792;
  if (v792)
  {
    v660 = (unint64_t *)&v792->__shared_owners_;
    do
      v661 = __ldaxr(v660);
    while (__stlxr(v661 - 1, v660));
    if (!v661)
    {
      ((void (*)(std::__shared_weak_count *))v659->__on_zero_shared)(v659);
      std::__shared_weak_count::__release_weak(v659);
    }
  }
}

void sub_20EE39134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,char a61,uint64_t a62,char a63)
{
  char a65;
  char a67;
  char a69;
  void *a71;

  if (SLOBYTE(STACK[0x867]) < 0)
    operator delete((void *)STACK[0x850]);
  sub_20E86665C((uint64_t)&a59);
  sub_20E9AF634((uint64_t)&a61);
  sub_20EE44268((uint64_t)&STACK[0x9B0]);
  sub_20E86665C((uint64_t)&a63);
  sub_20E9AF634((uint64_t)&a65);
  sub_20EE4444C((uint64_t)&a71);
  sub_20E86665C((uint64_t)&a67);
  sub_20E9AF634((uint64_t)&a69);
  sub_20EE44630((uint64_t)&STACK[0x2C0]);
  sub_20E86665C((uint64_t)&STACK[0x2A0]);
  sub_20E9AF634((uint64_t)&STACK[0x2B0]);
  sub_20ED12D68((uint64_t)&STACK[0x390]);
  sub_20E86665C((uint64_t)&STACK[0x370]);
  sub_20E9AF634((uint64_t)&STACK[0x380]);
  sub_20EE44814((uint64_t)&STACK[0x460]);
  sub_20E86665C((uint64_t)&STACK[0x440]);
  sub_20E9AF634((uint64_t)&STACK[0x450]);
  sub_20EE449F8((uint64_t)&STACK[0x530]);
  sub_20E86665C((uint64_t)&STACK[0x510]);
  sub_20E9AF634((uint64_t)&STACK[0x520]);
  sub_20EE44BDC((uint64_t)&STACK[0x600]);
  sub_20E86665C((uint64_t)&STACK[0x5E0]);
  sub_20E9AF634((uint64_t)&STACK[0x5F0]);
  sub_20ED14D8C((uint64_t)&STACK[0x6D0]);
  sub_20E86665C((uint64_t)&STACK[0x6B0]);
  sub_20E9AF634((uint64_t)&STACK[0x6C0]);
  sub_20EE44DC0((uint64_t)&STACK[0x798]);
  sub_20E86665C((uint64_t)&STACK[0x778]);
  sub_20E9AF634((uint64_t)&STACK[0x788]);
  sub_20E9AF634((uint64_t)&STACK[0x840]);
  _Unwind_Resume(a1);
}

void sub_20EE396C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  std::__shared_weak_count *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  if (v72)
  {
    std::__shared_weak_count::__release_weak(v72);
    sub_20E86665C(v74);
    sub_20E86665C(v73);
    if ((SLOBYTE(STACK[0x227]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x20F]) & 0x80000000) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    sub_20E86665C(v74);
    sub_20E86665C(v73);
    if ((SLOBYTE(STACK[0x227]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0x210]);
  if ((SLOBYTE(STACK[0x20F]) & 0x80000000) == 0)
  {
LABEL_5:
    sub_20E86665C((uint64_t)&STACK[0xA80]);
    sub_20E86665C((uint64_t)&STACK[0x850]);
    sub_20E9AF634(v75 - 200);
    sub_20E86665C((uint64_t)&STACK[0xA98]);
    sub_20E9AF634(v75 - 232);
    if (SLOBYTE(STACK[0x917]) < 0)
    {
      operator delete((void *)STACK[0x900]);
      if ((SLOBYTE(STACK[0x9C7]) & 0x80000000) == 0)
LABEL_14:
        JUMPOUT(0x20EE395BCLL);
    }
    else if ((SLOBYTE(STACK[0x9C7]) & 0x80000000) == 0)
    {
      goto LABEL_14;
    }
    operator delete((void *)STACK[0x9B0]);
    goto LABEL_14;
  }
LABEL_4:
  operator delete(__p);
  goto LABEL_5;
}

void sub_20EE39858(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a71;
  std::__shared_weak_count *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  if (v71)
  {
    std::__shared_weak_count::__release_weak(v71);
    sub_20E86665C(v73);
    sub_20E86665C(v72);
    if ((SLOBYTE(STACK[0x2F7]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x2DF]) & 0x80000000) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    sub_20E86665C(v73);
    sub_20E86665C(v72);
    if ((SLOBYTE(STACK[0x2F7]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0x2E0]);
  if ((SLOBYTE(STACK[0x2DF]) & 0x80000000) == 0)
  {
LABEL_5:
    sub_20E86665C((uint64_t)&STACK[0x850]);
    sub_20E86665C((uint64_t)&STACK[0x900]);
    sub_20E9AF634((uint64_t)&STACK[0xA80]);
    sub_20E86665C(v74 - 232);
    sub_20E9AF634(v74 - 200);
    if (SLOBYTE(STACK[0x9C7]) < 0)
    {
      operator delete((void *)STACK[0x9B0]);
      if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0)
LABEL_14:
        JUMPOUT(0x20EE395D4);
    }
    else if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0)
    {
      goto LABEL_14;
    }
    operator delete(a71);
    goto LABEL_14;
  }
LABEL_4:
  operator delete((void *)STACK[0x2C8]);
  goto LABEL_5;
}

void sub_20EE399EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  uint64_t v71;

  sub_20E86665C((uint64_t)&STACK[0xA80]);
  sub_20E86665C((uint64_t)&STACK[0x850]);
  sub_20E9AF634(v71 - 200);
  if (SLOBYTE(STACK[0x207]) < 0)
  {
    operator delete(__p);
    if ((SLOBYTE(STACK[0x2D7]) & 0x80000000) == 0)
    {
LABEL_3:
      sub_20E86665C((uint64_t)&STACK[0xA98]);
      sub_20E9AF634(v71 - 232);
      if ((SLOBYTE(STACK[0x917]) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((SLOBYTE(STACK[0x2D7]) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete((void *)STACK[0x2C0]);
  sub_20E86665C((uint64_t)&STACK[0xA98]);
  sub_20E9AF634(v71 - 232);
  if ((SLOBYTE(STACK[0x917]) & 0x80000000) == 0)
  {
LABEL_4:
    if ((SLOBYTE(STACK[0x9C7]) & 0x80000000) == 0)
      goto LABEL_10;
LABEL_9:
    operator delete((void *)STACK[0x9B0]);
LABEL_10:
    JUMPOUT(0x20EE395ECLL);
  }
LABEL_8:
  operator delete((void *)STACK[0x900]);
  if ((SLOBYTE(STACK[0x9C7]) & 0x80000000) == 0)
    goto LABEL_10;
  goto LABEL_9;
}

void sub_20EE39B04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a71;
  std::__shared_weak_count *v71;
  uint64_t v72;
  uint64_t v73;

  if (v71)
  {
    std::__shared_weak_count::__release_weak(v71);
    sub_20E86665C(v72);
    sub_20E86665C(v73);
    if ((SLOBYTE(STACK[0x497]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x47F]) & 0x80000000) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    sub_20E86665C(v72);
    sub_20E86665C(v73);
    if ((SLOBYTE(STACK[0x497]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0x480]);
  if ((SLOBYTE(STACK[0x47F]) & 0x80000000) == 0)
  {
LABEL_5:
    sub_20E86665C((uint64_t)&STACK[0x9B0]);
    sub_20E86665C((uint64_t)&a71);
    sub_20E9AF634((uint64_t)&STACK[0x900]);
    sub_20E86665C((uint64_t)&STACK[0xA80]);
    sub_20E9AF634((uint64_t)&STACK[0x850]);
    if (SLOBYTE(STACK[0x2D7]) < 0)
    {
      operator delete((void *)STACK[0x2C0]);
      if ((SLOBYTE(STACK[0x3A7]) & 0x80000000) == 0)
LABEL_14:
        JUMPOUT(0x20EE39604);
    }
    else if ((SLOBYTE(STACK[0x3A7]) & 0x80000000) == 0)
    {
      goto LABEL_14;
    }
    operator delete((void *)STACK[0x390]);
    goto LABEL_14;
  }
LABEL_4:
  operator delete((void *)STACK[0x468]);
  goto LABEL_5;
}

void sub_20EE39C98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a71;
  std::__shared_weak_count *v71;
  uint64_t v72;
  uint64_t v73;

  if (v71)
  {
    std::__shared_weak_count::__release_weak(v71);
    sub_20E86665C(v73);
    sub_20E86665C(v72);
    if ((SLOBYTE(STACK[0x567]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x54F]) & 0x80000000) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    sub_20E86665C(v73);
    sub_20E86665C(v72);
    if ((SLOBYTE(STACK[0x567]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0x550]);
  if ((SLOBYTE(STACK[0x54F]) & 0x80000000) == 0)
  {
LABEL_5:
    sub_20E86665C((uint64_t)&a71);
    sub_20E86665C((uint64_t)&STACK[0x2C0]);
    sub_20E9AF634((uint64_t)&STACK[0x9B0]);
    sub_20E86665C((uint64_t)&STACK[0x850]);
    sub_20E9AF634((uint64_t)&STACK[0x900]);
    if (SLOBYTE(STACK[0x3A7]) < 0)
    {
      operator delete((void *)STACK[0x390]);
      if ((SLOBYTE(STACK[0x477]) & 0x80000000) == 0)
LABEL_14:
        JUMPOUT(0x20EE3961CLL);
    }
    else if ((SLOBYTE(STACK[0x477]) & 0x80000000) == 0)
    {
      goto LABEL_14;
    }
    operator delete((void *)STACK[0x460]);
    goto LABEL_14;
  }
LABEL_4:
  operator delete((void *)STACK[0x538]);
  goto LABEL_5;
}

void sub_20EE39E34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a71;
  std::__shared_weak_count *v71;
  uint64_t v72;
  uint64_t v73;

  if (v71)
  {
    std::__shared_weak_count::__release_weak(v71);
    sub_20E86665C(v73);
    sub_20E86665C(v72);
    if ((SLOBYTE(STACK[0x637]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x61F]) & 0x80000000) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    sub_20E86665C(v73);
    sub_20E86665C(v72);
    if ((SLOBYTE(STACK[0x637]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0x620]);
  if ((SLOBYTE(STACK[0x61F]) & 0x80000000) == 0)
  {
LABEL_5:
    sub_20E86665C((uint64_t)&STACK[0x2C0]);
    sub_20E86665C((uint64_t)&STACK[0x390]);
    sub_20E9AF634((uint64_t)&a71);
    sub_20E86665C((uint64_t)&STACK[0x900]);
    sub_20E9AF634((uint64_t)&STACK[0x9B0]);
    if (SLOBYTE(STACK[0x477]) < 0)
    {
      operator delete((void *)STACK[0x460]);
      if ((SLOBYTE(STACK[0x547]) & 0x80000000) == 0)
LABEL_14:
        JUMPOUT(0x20EE39634);
    }
    else if ((SLOBYTE(STACK[0x547]) & 0x80000000) == 0)
    {
      goto LABEL_14;
    }
    operator delete((void *)STACK[0x530]);
    goto LABEL_14;
  }
LABEL_4:
  operator delete((void *)STACK[0x608]);
  goto LABEL_5;
}

void sub_20EE39FC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a71;

  sub_20E86665C((uint64_t)&a71);
  sub_20E86665C((uint64_t)&STACK[0x2C0]);
  sub_20E9AF634((uint64_t)&STACK[0x9B0]);
  if (SLOBYTE(STACK[0x547]) < 0)
  {
    operator delete((void *)STACK[0x530]);
    if ((SLOBYTE(STACK[0x617]) & 0x80000000) == 0)
    {
LABEL_3:
      sub_20E86665C((uint64_t)&STACK[0x850]);
      sub_20E9AF634((uint64_t)&STACK[0x900]);
      if ((SLOBYTE(STACK[0x3A7]) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((SLOBYTE(STACK[0x617]) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete((void *)STACK[0x600]);
  sub_20E86665C((uint64_t)&STACK[0x850]);
  sub_20E9AF634((uint64_t)&STACK[0x900]);
  if ((SLOBYTE(STACK[0x3A7]) & 0x80000000) == 0)
  {
LABEL_4:
    if ((SLOBYTE(STACK[0x477]) & 0x80000000) == 0)
      goto LABEL_10;
LABEL_9:
    operator delete((void *)STACK[0x460]);
LABEL_10:
    JUMPOUT(0x20EE3964CLL);
  }
LABEL_8:
  operator delete((void *)STACK[0x390]);
  if ((SLOBYTE(STACK[0x477]) & 0x80000000) == 0)
    goto LABEL_10;
  goto LABEL_9;
}

void sub_20EE3A0E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a71;
  std::__shared_weak_count *v71;
  uint64_t v72;
  uint64_t v73;

  if (v71)
  {
    std::__shared_weak_count::__release_weak(v71);
    sub_20E86665C(v73);
    sub_20E86665C(v72);
    if ((SLOBYTE(STACK[0x7CF]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x7B7]) & 0x80000000) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    sub_20E86665C(v73);
    sub_20E86665C(v72);
    if ((SLOBYTE(STACK[0x7CF]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0x7B8]);
  if ((SLOBYTE(STACK[0x7B7]) & 0x80000000) == 0)
  {
LABEL_5:
    sub_20E86665C((uint64_t)&STACK[0x460]);
    sub_20E86665C((uint64_t)&STACK[0x530]);
    sub_20E9AF634((uint64_t)&STACK[0x390]);
    sub_20E86665C((uint64_t)&a71);
    sub_20E9AF634((uint64_t)&STACK[0x2C0]);
    if (SLOBYTE(STACK[0x617]) < 0)
    {
      operator delete((void *)STACK[0x600]);
      if ((SLOBYTE(STACK[0x6E7]) & 0x80000000) == 0)
LABEL_14:
        JUMPOUT(0x20EE39664);
    }
    else if ((SLOBYTE(STACK[0x6E7]) & 0x80000000) == 0)
    {
      goto LABEL_14;
    }
    operator delete((void *)STACK[0x6D0]);
    goto LABEL_14;
  }
LABEL_4:
  operator delete((void *)STACK[0x7A0]);
  goto LABEL_5;
}

void sub_20EE3A27C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_20EE3A298(uint64_t a1)
{
  sub_20EE44FA4(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EE3A2DC(uint64_t a1)
{
  sub_20EE44DC0(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EE3A300(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9EBEF8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20EE3A340(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9EBEF8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE3A390(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

_QWORD *sub_20EE3A3A0(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9EBF30;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EE3A3D8(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9EBF30;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20EE3A420(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C9EB4F0;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C9EB4F0;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EE3A4F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EE3A520(uint64_t a1)
{
  sub_20EE44BDC(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EE3A544(uint64_t a1)
{
  sub_20EE449F8(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EE3A568(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9EBFC8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EE3A5A0(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9EBFC8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20EE3A5E8(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C9EC000;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C9EC000;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EE3A6BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EE3A6E8(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9EC000;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20EE3A728(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9EC000;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE3A778(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_20EE3A788(uint64_t a1)
{
  sub_20EE44814(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EE3A7AC(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9EC068;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20EE3A7EC(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9EC068;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE3A83C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_20EE3A84C(uint64_t a1)
{
  sub_20EE44630(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EE3A870(uint64_t a1)
{
  sub_20EE4444C(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EE3A894(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9EC100;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20EE3A8D4(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9EC100;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE3A924(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_20EE3A934(uint64_t a1)
{
  sub_20EE44268(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EE3A958(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9EC168;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20EE3A998(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9EC168;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE3A9E8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_20EE3A9F8(uint64_t a1)
{
  sub_20EE44084(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EE3AA1C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9EC1D0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20EE3AA5C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9EC1D0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE3AAAC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_20EE3AAC0(uint64_t a1)
{
  sub_20EE3B2E8(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EE3AAE4(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    LOBYTE(v5) = 0;
    v6 = 0;
    sub_20EE3B444(a1 + 11, a2, &v5);
    if (v6)
      sub_20EE2CDD8(&v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_20EE3ABA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    sub_20EE2CDD8(&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE3ABC8(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EE3ABD8(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EE3ABE4(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20EE3ABF4(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_20E8778D4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v13, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_20EE3B444(a1 + 11, a2, &v14);
  if (v15)
    sub_20EE2CDD8(&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_20EE3AD8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::__assoc_sub_state **v20;
  std::__assoc_sub_state *v21;
  std::exception_ptr v22;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v21 = *v20;
    if (v21)
    {
      std::exception_ptr::exception_ptr(&a20, &a19);
      v22.__ptr_ = &a20;
      std::__assoc_sub_state::set_exception(v21, v22);
      std::exception_ptr::~exception_ptr(&a20);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (a17 < 0)
        operator delete(__p);
      JUMPOUT(0x20EE3ACB8);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EE3AE00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EE3AE60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13)
{
  std::recursive_mutex *v13;

  if ((_BYTE)a11)
    sub_20EE2CDD8(&a10);
  std::recursive_mutex::unlock(v13);
  _Unwind_Resume(a1);
}

void sub_20EE3AE84(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_20EE3AF08(uint64_t a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v4);
  v5 = operator new(0x20uLL);
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5[2] = &off_24C9EB4F0;
  v5[3] = v6;
  v8 = *(_QWORD *)(a1 + 96);
  v7 = (_QWORD *)(a1 + 96);
  *v5 = v8;
  v5[1] = v7;
  *(_QWORD *)(v8 + 8) = v5;
  *v7 = v5;
  ++v7[2];
  std::recursive_mutex::unlock(v4);
}

void sub_20EE3AFB8(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EE3AFCC(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20EE3B05C(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EE3B070(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v4);
  sub_20EE3B808(a2, a1 + 96);
  std::recursive_mutex::unlock(v4);
}

void sub_20EE3B0B4(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EE3B0C8(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EE3B0FC(uint64_t a1)
{
  return sub_20EE3B2E8(a1 - 16);
}

void sub_20EE3B104(uint64_t a1)
{
  sub_20EE3B2E8(a1 - 16);
  JUMPOUT(0x212BC6398);
}

void sub_20EE3B12C(uint64_t a1, uint64_t a2)
{
  sub_20EE3AF08(a1 - 16, a2);
}

void sub_20EE3B134(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v4);
  sub_20EE3B808(a2, a1 + 80);
  std::recursive_mutex::unlock(v4);
}

void sub_20EE3B178(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EE3B18C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EE3B1C0(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EE3B1C8(uint64_t a1)
{
  return sub_20EE3B2E8(a1 - 24);
}

void sub_20EE3B1D0(uint64_t a1)
{
  sub_20EE3B2E8(a1 - 24);
  JUMPOUT(0x212BC6398);
}

void sub_20EE3B1F8(uint64_t a1)
{
  sub_20EE3AFCC(a1 - 24);
}

uint64_t sub_20EE3B200(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20EE3B208(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EE3B270(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE3B2D8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20EE3B2E8(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = &off_24C9EC208;
  *(_QWORD *)(a1 + 16) = &unk_24C9EC280;
  *(_QWORD *)(a1 + 24) = &unk_24C9EC2C0;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v7 = *(_QWORD *)(a1 + 96);
    v8 = *(uint64_t **)(a1 + 104);
    v9 = *v8;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v8 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v8[1];
        (*(void (**)(uint64_t *))v8[2])(v8 + 2);
        operator delete(v8);
        v8 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20EE3B444(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::exception_ptr v22;
  uint64_t v23;
  std::__shared_weak_count *v24;

  v6 = *a1;
  if (!v6)
  {
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v7 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (byte_254A6DE68)
      v8 = byte_254A6DE70 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_254A6DE40;
      for (i = qword_254A6DE48; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, "", 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      abort();
    qword_254A6DE58(unk_254A6DE60, "callable_", 9, "", 0);
    v6 = *a1;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&v23, v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, uint64_t *))(j[2] + 16))(j + 2, &v23);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!v14)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v22.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v22), v15))
    {
      sub_20E96CE78(2u);
    }
    v16 = v24;
    *(_QWORD *)(v14 + 144) = v23;
    *(_QWORD *)(v14 + 152) = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock((std::mutex *)(v14 + 24));
  }
  v19 = v24;
  if (v24)
  {
    v20 = (unint64_t *)&v24->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_20EE3B700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, int a14, __int16 a15, char a16, unsigned __int8 a17, char a18)
{
  std::mutex *v18;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;

  std::mutex::unlock(v18);
  sub_20E86665C((uint64_t)&a18);
  if (a2 == 1)
  {
    v21 = (uint64_t *)__cxa_begin_catch(a1);
    v22 = *v21;
    a11 = *(_QWORD *)(*(_QWORD *)(*v21 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a10 = (*(uint64_t (**)(void))(v22 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a11, "\n", "message: ", (const char *)&a10, "\n");
    if ((a17 & 0x80u) == 0)
      v23 = (uint64_t *)&a12;
    else
      v23 = a12;
    if ((a17 & 0x80u) == 0)
      v24 = a17;
    else
      v24 = a13;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v23, v24, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20EE3B7DC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20EE3B7FCLL);
}

char *sub_20EE3B808(int64x2_t *a1, uint64_t a2)
{
  unint64_t v4;
  char *result;
  char *v6;
  uint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  char *v10;
  uint64_t v11;
  int64x2_t *v12;

  v4 = *(_QWORD *)(a2 + 16);
  v10 = 0;
  v9 = 0uLL;
  if (v4)
  {
    if (v4 >> 61)
      sub_20E92CED8();
    result = (char *)operator new(8 * v4);
    v6 = &result[8 * v4];
    v9.i64[0] = (uint64_t)result;
    v9.i64[1] = (uint64_t)result;
    v10 = v6;
    v7 = *(_QWORD *)(a2 + 8);
    v12 = &v9;
    if (v7 != a2)
      goto LABEL_4;
LABEL_7:
    v8 = vdupq_n_s64((unint64_t)result);
    goto LABEL_8;
  }
  v6 = 0;
  result = 0;
  v7 = *(_QWORD *)(a2 + 8);
  v12 = &v9;
  if (v7 == a2)
    goto LABEL_7;
  do
  {
LABEL_4:
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 24) + 48))(*(_QWORD *)(v7 + 24));
    result = (char *)sub_20E9B2D04((uint64_t *)&v12, &v11);
    v7 = *(_QWORD *)(v7 + 8);
  }
  while (v7 != a2);
  v8 = v9;
  v6 = v10;
LABEL_8:
  *a1 = v8;
  a1[1].i64[0] = (uint64_t)v6;
  return result;
}

void sub_20EE3B8E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EE3B908(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE3B92C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EE3B944(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio22user_anchor_node"
                     "_group22UserAnchorLoadedBundleENS0_INS_6vectorINS7_21UserAnchorGroupBundleENS_9allocatorISA_EEEEEEv"
                     "SE_Lb0EEEE27__shared_ptr_default_deleteISF_SF_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio22user_"
                                "anchor_node_group22UserAnchorLoadedBundleENS0_INS_6vectorINS7_21UserAnchorGroupBundleENS"
                                "_9allocatorISA_EEEEEEvSE_Lb0EEEE27__shared_ptr_default_deleteISF_SF_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio22user_anchor_node_group22UserAnchorLoadedBundleENS0_INS_6vectorINS7_21UserAnchorGroupBundleENS_9allocatorISA_EEEEEEvSE_Lb0EEEE27__shared_ptr_default_deleteISF_SF_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio22user_anchor_node_group22UserAnchorLoadedBundleENS0_INS_6vectorINS7_21UserAnchorGroupBundleENS_9allocatorISA_EEEEEEvSE_Lb0EEEE27__shared_ptr_default_deleteISF_SF_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EE3B9B4(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EE3B9E0(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EE3BA1C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9EC458;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20EE3BA84(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EE3BB14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EE3BB28(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EE3BBB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE3BBCC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EE3BC90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE3BCA4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EE3BD68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EE3BD7C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EE3BE20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EE3BE38(uint64_t a1)
{
  sub_20EE3C634(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EE3BE5C(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    LOBYTE(v5) = 0;
    v6 = 0;
    sub_20ECB0F38(a1 + 11, a2, &v5);
    if (v6)
      sub_20EC36A04(&v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_20EE3BF18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    sub_20EC36A04(&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

void sub_20EE3BF40(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_20E8778D4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v13, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_20ECB0F38(a1 + 11, a2, &v14);
  if (v15)
    sub_20EC36A04(&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_20EE3C0D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::__assoc_sub_state **v20;
  std::__assoc_sub_state *v21;
  std::exception_ptr v22;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v21 = *v20;
    if (v21)
    {
      std::exception_ptr::exception_ptr(&a20, &a19);
      v22.__ptr_ = &a20;
      std::__assoc_sub_state::set_exception(v21, v22);
      std::exception_ptr::~exception_ptr(&a20);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (a17 < 0)
        operator delete(__p);
      JUMPOUT(0x20EE3C004);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EE3C14C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EE3C1AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13)
{
  std::recursive_mutex *v13;

  if ((_BYTE)a11)
    sub_20EC36A04(&a10);
  std::recursive_mutex::unlock(v13);
  _Unwind_Resume(a1);
}

void sub_20EE3C1D0(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_20EE3C254(uint64_t a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v4);
  v5 = operator new(0x20uLL);
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5[2] = &off_24C9CCB08;
  v5[3] = v6;
  v8 = *(_QWORD *)(a1 + 96);
  v7 = (_QWORD *)(a1 + 96);
  *v5 = v8;
  v5[1] = v7;
  *(_QWORD *)(v8 + 8) = v5;
  *v7 = v5;
  ++v7[2];
  std::recursive_mutex::unlock(v4);
}

void sub_20EE3C304(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EE3C318(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20EE3C3A8(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EE3C3BC(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v4);
  sub_20ECB3204(a1 + 96, a2);
  std::recursive_mutex::unlock(v4);
}

void sub_20EE3C400(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EE3C414(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EE3C448(uint64_t a1)
{
  return sub_20EE3C634(a1 - 16);
}

void sub_20EE3C450(uint64_t a1)
{
  sub_20EE3C634(a1 - 16);
  JUMPOUT(0x212BC6398);
}

void sub_20EE3C478(uint64_t a1, uint64_t a2)
{
  sub_20EE3C254(a1 - 16, a2);
}

void sub_20EE3C480(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v4);
  sub_20ECB3204(a1 + 80, a2);
  std::recursive_mutex::unlock(v4);
}

void sub_20EE3C4C4(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EE3C4D8(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EE3C50C(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EE3C514(uint64_t a1)
{
  return sub_20EE3C634(a1 - 24);
}

void sub_20EE3C51C(uint64_t a1)
{
  sub_20EE3C634(a1 - 24);
  JUMPOUT(0x212BC6398);
}

void sub_20EE3C544(uint64_t a1)
{
  sub_20EE3C318(a1 - 24);
}

uint64_t sub_20EE3C54C(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20EE3C554(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EE3C5BC(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE3C624(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20EE3C634(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = &off_24C9EC4D0;
  *(_QWORD *)(a1 + 16) = &unk_24C9EC548;
  *(_QWORD *)(a1 + 24) = &unk_24C9EC588;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v7 = *(_QWORD *)(a1 + 96);
    v8 = *(uint64_t **)(a1 + 104);
    v9 = *v8;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v8 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v8[1];
        (*(void (**)(uint64_t *))v8[2])(v8 + 2);
        operator delete(v8);
        v8 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20EE3C794(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE3C7B8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EE3C7D0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio22user_anchor_node"
                     "_group16AnchorDescriptorENS7_17AnchorAddedResultEvS9_Lb0EEEE27__shared_ptr_default_deleteISA_SA_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio22user_"
                                "anchor_node_group16AnchorDescriptorENS7_17AnchorAddedResultEvS9_Lb0EEEE27__shared_ptr_de"
                                "fault_deleteISA_SA_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio22user_anchor_node_group16AnchorDescriptorENS7_17AnchorAddedResultEvS9_Lb0EEEE27__shared_ptr_default_deleteISA_SA_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio22user_anchor_node_group16AnchorDescriptorENS7_17AnchorAddedResultEvS9_Lb0EEEE27__shared_ptr_default_deleteISA_SA_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20EE3C844(uint64_t a1)
{
  sub_20EE3D040(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EE3C868(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    LOBYTE(v5) = 0;
    v6 = 0;
    sub_20EE3D19C(a1 + 11, a2, &v5);
    if (v6)
      sub_20EE2D3A8(&v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_20EE3C924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    sub_20EE2D3A8(&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

void sub_20EE3C94C(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_20E8778D4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v13, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_20EE3D19C(a1 + 11, a2, &v14);
  if (v15)
    sub_20EE2D3A8(&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_20EE3CAE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::__assoc_sub_state **v20;
  std::__assoc_sub_state *v21;
  std::exception_ptr v22;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v21 = *v20;
    if (v21)
    {
      std::exception_ptr::exception_ptr(&a20, &a19);
      v22.__ptr_ = &a20;
      std::__assoc_sub_state::set_exception(v21, v22);
      std::exception_ptr::~exception_ptr(&a20);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (a17 < 0)
        operator delete(__p);
      JUMPOUT(0x20EE3CA10);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EE3CB58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EE3CBB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13)
{
  std::recursive_mutex *v13;

  if ((_BYTE)a11)
    sub_20EE2D3A8(&a10);
  std::recursive_mutex::unlock(v13);
  _Unwind_Resume(a1);
}

void sub_20EE3CBDC(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_20EE3CC60(uint64_t a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v4);
  v5 = operator new(0x20uLL);
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5[2] = &off_24C9EB560;
  v5[3] = v6;
  v8 = *(_QWORD *)(a1 + 96);
  v7 = (_QWORD *)(a1 + 96);
  *v5 = v8;
  v5[1] = v7;
  *(_QWORD *)(v8 + 8) = v5;
  *v7 = v5;
  ++v7[2];
  std::recursive_mutex::unlock(v4);
}

void sub_20EE3CD10(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EE3CD24(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20EE3CDB4(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EE3CDC8(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v4);
  sub_20EE3D56C(a2, a1 + 96);
  std::recursive_mutex::unlock(v4);
}

void sub_20EE3CE0C(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EE3CE20(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EE3CE54(uint64_t a1)
{
  return sub_20EE3D040(a1 - 16);
}

void sub_20EE3CE5C(uint64_t a1)
{
  sub_20EE3D040(a1 - 16);
  JUMPOUT(0x212BC6398);
}

void sub_20EE3CE84(uint64_t a1, uint64_t a2)
{
  sub_20EE3CC60(a1 - 16, a2);
}

void sub_20EE3CE8C(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v4);
  sub_20EE3D56C(a2, a1 + 80);
  std::recursive_mutex::unlock(v4);
}

void sub_20EE3CED0(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EE3CEE4(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EE3CF18(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EE3CF20(uint64_t a1)
{
  return sub_20EE3D040(a1 - 24);
}

void sub_20EE3CF28(uint64_t a1)
{
  sub_20EE3D040(a1 - 24);
  JUMPOUT(0x212BC6398);
}

void sub_20EE3CF50(uint64_t a1)
{
  sub_20EE3CD24(a1 - 24);
}

uint64_t sub_20EE3CF58(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20EE3CF60(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EE3CFC8(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE3D030(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20EE3D040(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = &off_24C9EC690;
  *(_QWORD *)(a1 + 16) = &unk_24C9EC708;
  *(_QWORD *)(a1 + 24) = &unk_24C9EC748;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v7 = *(_QWORD *)(a1 + 96);
    v8 = *(uint64_t **)(a1 + 104);
    v9 = *v8;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v8 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v8[1];
        (*(void (**)(uint64_t *))v8[2])(v8 + 2);
        operator delete(v8);
        v8 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20EE3D19C(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  std::runtime_error *v16;
  int v17;
  std::exception_ptr v18;
  std::runtime_error v19;
  int v20;
  unsigned __int8 v21;

  v6 = *a1;
  if (!v6)
  {
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v7 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (byte_254A6DE68)
      v8 = byte_254A6DE70 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_254A6DE40;
      for (i = qword_254A6DE48; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, "", 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      abort();
    qword_254A6DE58(unk_254A6DE60, "callable_", 9, "", 0);
    v6 = *a1;
  }
  (*(void (**)(std::runtime_error *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&v19, v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, std::runtime_error *))(j[2] + 16))(j + 2, &v19);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!v14)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v18.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v18), v15))
    {
      sub_20E96CE78(2u);
    }
    *(_BYTE *)(v14 + 144) = 0;
    v16 = (std::runtime_error *)(v14 + 144);
    v17 = v21;
    *(_BYTE *)(v14 + 168) = v21;
    if (v17)
    {
      LOBYTE(v16->__vftable) = v19.__vftable;
    }
    else
    {
      std::runtime_error::runtime_error(v16, &v19);
      *(_QWORD *)(v14 + 144) = &off_24C9EDA58;
      *(_DWORD *)(v14 + 160) = v20;
    }
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock((std::mutex *)(v14 + 24));
  }
  if (!v21)
    ((void (*)(std::runtime_error *))v19.~runtime_error)(&v19);
}

void sub_20EE3D454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, int a14, __int16 a15, char a16, unsigned __int8 a17, void (**a18)(_QWORD), uint64_t a19, uint64_t a20,char a21)
{
  std::mutex *v21;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;

  std::mutex::unlock(v21);
  if (!a21)
    (*a18)(&a18);
  if (a2 == 1)
  {
    v24 = (uint64_t *)__cxa_begin_catch(a1);
    v25 = *v24;
    a11 = *(_QWORD *)(*(_QWORD *)(*v24 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a10 = (*(uint64_t (**)(void))(v25 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a11, "\n", "message: ", (const char *)&a10, "\n");
    if ((a17 & 0x80u) == 0)
      v26 = (uint64_t *)&a12;
    else
      v26 = a12;
    if ((a17 & 0x80u) == 0)
      v27 = a17;
    else
      v27 = a13;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v26, v27, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20EE3D540(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20EE3D560);
}

char *sub_20EE3D56C(int64x2_t *a1, uint64_t a2)
{
  unint64_t v4;
  char *result;
  char *v6;
  uint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  char *v10;
  uint64_t v11;
  int64x2_t *v12;

  v4 = *(_QWORD *)(a2 + 16);
  v10 = 0;
  v9 = 0uLL;
  if (v4)
  {
    if (v4 >> 61)
      sub_20E92CED8();
    result = (char *)operator new(8 * v4);
    v6 = &result[8 * v4];
    v9.i64[0] = (uint64_t)result;
    v9.i64[1] = (uint64_t)result;
    v10 = v6;
    v7 = *(_QWORD *)(a2 + 8);
    v12 = &v9;
    if (v7 != a2)
      goto LABEL_4;
LABEL_7:
    v8 = vdupq_n_s64((unint64_t)result);
    goto LABEL_8;
  }
  v6 = 0;
  result = 0;
  v7 = *(_QWORD *)(a2 + 8);
  v12 = &v9;
  if (v7 == a2)
    goto LABEL_7;
  do
  {
LABEL_4:
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 24) + 48))(*(_QWORD *)(v7 + 24));
    result = (char *)sub_20E9B2D04((uint64_t *)&v12, &v11);
    v7 = *(_QWORD *)(v7 + 8);
  }
  while (v7 != a2);
  v8 = v9;
  v6 = v10;
LABEL_8:
  *a1 = v8;
  a1[1].i64[0] = (uint64_t)v6;
  return result;
}

void sub_20EE3D648(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EE3D66C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE3D690(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EE3D6A8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio8cv_types16AnchorI"
                     "dentifierENSt12experimental8expectedIbNS6_22user_anchor_node_group24UserAnchorNodeGroupErrorEEEvSD_"
                     "Lb0EEEE27__shared_ptr_default_deleteISE_SE_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio8cv_typ"
                                "es16AnchorIdentifierENSt12experimental8expectedIbNS6_22user_anchor_node_group24UserAncho"
                                "rNodeGroupErrorEEEvSD_Lb0EEEE27__shared_ptr_default_deleteISE_SE_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio8cv_types16AnchorIdentifierENSt12experimental8expectedIbNS6_22user_anchor_node_group24UserAnchorNodeGroupErrorEEEvSD_Lb0EEEE27__shared_ptr_default_deleteISE_SE_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio8cv_types16AnchorIdentifierENSt12experimental8expectedIbNS6_22user_anchor_node_group24UserAnchorNodeGroupErrorEEEvSD_Lb0EEEE27__shared_ptr_default_deleteISE_SE_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20EE3D71C(uint64_t a1)
{
  sub_20EE3DF18(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EE3D740(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    LOBYTE(v5) = 0;
    v6 = 0;
    sub_20EE3E074(a1 + 11, a2, &v5);
    if (v6)
      sub_20EE2D98C(&v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_20EE3D7FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    sub_20EE2D98C(&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

void sub_20EE3D824(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_20E8778D4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v13, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_20EE3E074(a1 + 11, a2, &v14);
  if (v15)
    sub_20EE2D98C(&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_20EE3D9BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::__assoc_sub_state **v20;
  std::__assoc_sub_state *v21;
  std::exception_ptr v22;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v21 = *v20;
    if (v21)
    {
      std::exception_ptr::exception_ptr(&a20, &a19);
      v22.__ptr_ = &a20;
      std::__assoc_sub_state::set_exception(v21, v22);
      std::exception_ptr::~exception_ptr(&a20);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (a17 < 0)
        operator delete(__p);
      JUMPOUT(0x20EE3D8E8);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EE3DA30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EE3DA90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13)
{
  std::recursive_mutex *v13;

  if ((_BYTE)a11)
    sub_20EE2D98C(&a10);
  std::recursive_mutex::unlock(v13);
  _Unwind_Resume(a1);
}

void sub_20EE3DAB4(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_20EE3DB38(uint64_t a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v4);
  v5 = operator new(0x20uLL);
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5[2] = &off_24C9EC000;
  v5[3] = v6;
  v8 = *(_QWORD *)(a1 + 96);
  v7 = (_QWORD *)(a1 + 96);
  *v5 = v8;
  v5[1] = v7;
  *(_QWORD *)(v8 + 8) = v5;
  *v7 = v5;
  ++v7[2];
  std::recursive_mutex::unlock(v4);
}

void sub_20EE3DBE8(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EE3DBFC(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20EE3DC8C(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EE3DCA0(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v4);
  sub_20EE3E438(a2, a1 + 96);
  std::recursive_mutex::unlock(v4);
}

void sub_20EE3DCE4(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EE3DCF8(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EE3DD2C(uint64_t a1)
{
  return sub_20EE3DF18(a1 - 16);
}

void sub_20EE3DD34(uint64_t a1)
{
  sub_20EE3DF18(a1 - 16);
  JUMPOUT(0x212BC6398);
}

void sub_20EE3DD5C(uint64_t a1, uint64_t a2)
{
  sub_20EE3DB38(a1 - 16, a2);
}

void sub_20EE3DD64(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v4);
  sub_20EE3E438(a2, a1 + 80);
  std::recursive_mutex::unlock(v4);
}

void sub_20EE3DDA8(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EE3DDBC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EE3DDF0(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EE3DDF8(uint64_t a1)
{
  return sub_20EE3DF18(a1 - 24);
}

void sub_20EE3DE00(uint64_t a1)
{
  sub_20EE3DF18(a1 - 24);
  JUMPOUT(0x212BC6398);
}

void sub_20EE3DE28(uint64_t a1)
{
  sub_20EE3DBFC(a1 - 24);
}

uint64_t sub_20EE3DE30(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20EE3DE38(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EE3DEA0(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE3DF08(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20EE3DF18(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = &off_24C9EC8C0;
  *(_QWORD *)(a1 + 16) = &unk_24C9EC938;
  *(_QWORD *)(a1 + 24) = &unk_24C9EC978;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v7 = *(_QWORD *)(a1 + 96);
    v8 = *(uint64_t **)(a1 + 104);
    v9 = *v8;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v8 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v8[1];
        (*(void (**)(uint64_t *))v8[2])(v8 + 2);
        operator delete(v8);
        v8 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20EE3E074(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::exception_ptr v22;
  uint64_t v23;
  std::__shared_weak_count *v24;

  v6 = *a1;
  if (!v6)
  {
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v7 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (byte_254A6DE68)
      v8 = byte_254A6DE70 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_254A6DE40;
      for (i = qword_254A6DE48; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, "", 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      abort();
    qword_254A6DE58(unk_254A6DE60, "callable_", 9, "", 0);
    v6 = *a1;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&v23, v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, uint64_t *))(j[2] + 16))(j + 2, &v23);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!v14)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v22.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v22), v15))
    {
      sub_20E96CE78(2u);
    }
    v16 = v24;
    *(_QWORD *)(v14 + 144) = v23;
    *(_QWORD *)(v14 + 152) = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock((std::mutex *)(v14 + 24));
  }
  v19 = v24;
  if (v24)
  {
    v20 = (unint64_t *)&v24->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_20EE3E330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, int a14, __int16 a15, char a16, unsigned __int8 a17, char a18)
{
  std::mutex *v18;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;

  std::mutex::unlock(v18);
  sub_20E86665C((uint64_t)&a18);
  if (a2 == 1)
  {
    v21 = (uint64_t *)__cxa_begin_catch(a1);
    v22 = *v21;
    a11 = *(_QWORD *)(*(_QWORD *)(*v21 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a10 = (*(uint64_t (**)(void))(v22 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a11, "\n", "message: ", (const char *)&a10, "\n");
    if ((a17 & 0x80u) == 0)
      v23 = (uint64_t *)&a12;
    else
      v23 = a12;
    if ((a17 & 0x80u) == 0)
      v24 = a17;
    else
      v24 = a13;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v23, v24, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20EE3E40C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20EE3E42CLL);
}

char *sub_20EE3E438(int64x2_t *a1, uint64_t a2)
{
  unint64_t v4;
  char *result;
  char *v6;
  uint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  char *v10;
  uint64_t v11;
  int64x2_t *v12;

  v4 = *(_QWORD *)(a2 + 16);
  v10 = 0;
  v9 = 0uLL;
  if (v4)
  {
    if (v4 >> 61)
      sub_20E92CED8();
    result = (char *)operator new(8 * v4);
    v6 = &result[8 * v4];
    v9.i64[0] = (uint64_t)result;
    v9.i64[1] = (uint64_t)result;
    v10 = v6;
    v7 = *(_QWORD *)(a2 + 8);
    v12 = &v9;
    if (v7 != a2)
      goto LABEL_4;
LABEL_7:
    v8 = vdupq_n_s64((unint64_t)result);
    goto LABEL_8;
  }
  v6 = 0;
  result = 0;
  v7 = *(_QWORD *)(a2 + 8);
  v12 = &v9;
  if (v7 == a2)
    goto LABEL_7;
  do
  {
LABEL_4:
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 24) + 48))(*(_QWORD *)(v7 + 24));
    result = (char *)sub_20E9B2D04((uint64_t *)&v12, &v11);
    v7 = *(_QWORD *)(v7 + 8);
  }
  while (v7 != a2);
  v8 = v9;
  v6 = v10;
LABEL_8:
  *a1 = v8;
  a1[1].i64[0] = (uint64_t)v6;
  return result;
}

void sub_20EE3E514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EE3E538(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE3E55C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EE3E574(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio15odometry_e"
                     "ngine11VIOMetadataEEENS0_IKNS6_22user_anchor_node_group21MetadataWithCMAnchorsEEEvSE_Lb0EEEE27__sha"
                     "red_ptr_default_deleteISF_SF_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio1"
                                "5odometry_engine11VIOMetadataEEENS0_IKNS6_22user_anchor_node_group21MetadataWithCMAnchor"
                                "sEEEvSE_Lb0EEEE27__shared_ptr_default_deleteISF_SF_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio15odometry_engine11VIOMetadataEEENS0_IKNS6_22user_anchor_node_group21MetadataWithCMAnchorsEEEvSE_Lb0EEEE27__shared_ptr_default_deleteISF_SF_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio15odometry_engine11VIOMetadataEEENS0_IKNS6_22user_anchor_node_group21MetadataWithCMAnchorsEEEvSE_Lb0EEEE27__shared_ptr_default_deleteISF_SF_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20EE3E5E8(uint64_t a1)
{
  sub_20EE3EE10(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EE3E60C(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    LOBYTE(v5) = 0;
    v6 = 0;
    sub_20EE3EF6C(a1 + 11, a2, &v5);
    if (v6)
      sub_20EE2CDD8(&v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_20EE3E6C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    sub_20EE2CDD8(&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE3E6F0(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EE3E700(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EE3E70C(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20EE3E71C(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_20E8778D4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v13, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_20EE3EF6C(a1 + 11, a2, &v14);
  if (v15)
    sub_20EE2CDD8(&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_20EE3E8B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::__assoc_sub_state **v20;
  std::__assoc_sub_state *v21;
  std::exception_ptr v22;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v21 = *v20;
    if (v21)
    {
      std::exception_ptr::exception_ptr(&a20, &a19);
      v22.__ptr_ = &a20;
      std::__assoc_sub_state::set_exception(v21, v22);
      std::exception_ptr::~exception_ptr(&a20);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (a17 < 0)
        operator delete(__p);
      JUMPOUT(0x20EE3E7E0);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EE3E928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EE3E988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13)
{
  std::recursive_mutex *v13;

  if ((_BYTE)a11)
    sub_20EE2CDD8(&a10);
  std::recursive_mutex::unlock(v13);
  _Unwind_Resume(a1);
}

void sub_20EE3E9AC(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_20EE3EA30(uint64_t a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v4);
  v5 = operator new(0x20uLL);
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5[2] = &off_24C9EB4F0;
  v5[3] = v6;
  v8 = *(_QWORD *)(a1 + 96);
  v7 = (_QWORD *)(a1 + 96);
  *v5 = v8;
  v5[1] = v7;
  *(_QWORD *)(v8 + 8) = v5;
  *v7 = v5;
  ++v7[2];
  std::recursive_mutex::unlock(v4);
}

void sub_20EE3EAE0(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EE3EAF4(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20EE3EB84(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EE3EB98(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v4);
  sub_20EE3F330(a2, a1 + 96);
  std::recursive_mutex::unlock(v4);
}

void sub_20EE3EBDC(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EE3EBF0(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EE3EC24(uint64_t a1)
{
  return sub_20EE3EE10(a1 - 16);
}

void sub_20EE3EC2C(uint64_t a1)
{
  sub_20EE3EE10(a1 - 16);
  JUMPOUT(0x212BC6398);
}

void sub_20EE3EC54(uint64_t a1, uint64_t a2)
{
  sub_20EE3EA30(a1 - 16, a2);
}

void sub_20EE3EC5C(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v4);
  sub_20EE3F330(a2, a1 + 80);
  std::recursive_mutex::unlock(v4);
}

void sub_20EE3ECA0(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EE3ECB4(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EE3ECE8(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EE3ECF0(uint64_t a1)
{
  return sub_20EE3EE10(a1 - 24);
}

void sub_20EE3ECF8(uint64_t a1)
{
  sub_20EE3EE10(a1 - 24);
  JUMPOUT(0x212BC6398);
}

void sub_20EE3ED20(uint64_t a1)
{
  sub_20EE3EAF4(a1 - 24);
}

uint64_t sub_20EE3ED28(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20EE3ED30(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EE3ED98(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE3EE00(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20EE3EE10(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = &off_24C9ECB00;
  *(_QWORD *)(a1 + 16) = &unk_24C9ECB78;
  *(_QWORD *)(a1 + 24) = &unk_24C9ECBB8;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v7 = *(_QWORD *)(a1 + 96);
    v8 = *(uint64_t **)(a1 + 104);
    v9 = *v8;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v8 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v8[1];
        (*(void (**)(uint64_t *))v8[2])(v8 + 2);
        operator delete(v8);
        v8 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20EE3EF6C(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::exception_ptr v22;
  uint64_t v23;
  std::__shared_weak_count *v24;

  v6 = *a1;
  if (!v6)
  {
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v7 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (byte_254A6DE68)
      v8 = byte_254A6DE70 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_254A6DE40;
      for (i = qword_254A6DE48; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, "", 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      abort();
    qword_254A6DE58(unk_254A6DE60, "callable_", 9, "", 0);
    v6 = *a1;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&v23, v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, uint64_t *))(j[2] + 16))(j + 2, &v23);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!v14)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v22.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v22), v15))
    {
      sub_20E96CE78(2u);
    }
    v16 = v24;
    *(_QWORD *)(v14 + 144) = v23;
    *(_QWORD *)(v14 + 152) = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock((std::mutex *)(v14 + 24));
  }
  v19 = v24;
  if (v24)
  {
    v20 = (unint64_t *)&v24->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_20EE3F228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, int a14, __int16 a15, char a16, unsigned __int8 a17, char a18)
{
  std::mutex *v18;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;

  std::mutex::unlock(v18);
  sub_20E86665C((uint64_t)&a18);
  if (a2 == 1)
  {
    v21 = (uint64_t *)__cxa_begin_catch(a1);
    v22 = *v21;
    a11 = *(_QWORD *)(*(_QWORD *)(*v21 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a10 = (*(uint64_t (**)(void))(v22 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a11, "\n", "message: ", (const char *)&a10, "\n");
    if ((a17 & 0x80u) == 0)
      v23 = (uint64_t *)&a12;
    else
      v23 = a12;
    if ((a17 & 0x80u) == 0)
      v24 = a17;
    else
      v24 = a13;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v23, v24, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20EE3F304(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20EE3F324);
}

char *sub_20EE3F330(int64x2_t *a1, uint64_t a2)
{
  unint64_t v4;
  char *result;
  char *v6;
  uint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  char *v10;
  uint64_t v11;
  int64x2_t *v12;

  v4 = *(_QWORD *)(a2 + 16);
  v10 = 0;
  v9 = 0uLL;
  if (v4)
  {
    if (v4 >> 61)
      sub_20E92CED8();
    result = (char *)operator new(8 * v4);
    v6 = &result[8 * v4];
    v9.i64[0] = (uint64_t)result;
    v9.i64[1] = (uint64_t)result;
    v10 = v6;
    v7 = *(_QWORD *)(a2 + 8);
    v12 = &v9;
    if (v7 != a2)
      goto LABEL_4;
LABEL_7:
    v8 = vdupq_n_s64((unint64_t)result);
    goto LABEL_8;
  }
  v6 = 0;
  result = 0;
  v7 = *(_QWORD *)(a2 + 8);
  v12 = &v9;
  if (v7 == a2)
    goto LABEL_7;
  do
  {
LABEL_4:
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 24) + 48))(*(_QWORD *)(v7 + 24));
    result = (char *)sub_20E9B2D04((uint64_t *)&v12, &v11);
    v7 = *(_QWORD *)(v7 + 8);
  }
  while (v7 != a2);
  v8 = v9;
  v6 = v10;
LABEL_8:
  *a1 = v8;
  a1[1].i64[0] = (uint64_t)v6;
  return result;
}

void sub_20EE3F40C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EE3F430(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE3F454(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EE3F46C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio4capi11AnchorGroup"
                     "ENS0_INS_6vectorINS6_22user_anchor_node_group21UserAnchorGroupBundleENS_9allocatorISB_EEEEEEvSF_Lb0"
                     "EEEE27__shared_ptr_default_deleteISG_SG_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio4capi11"
                                "AnchorGroupENS0_INS_6vectorINS6_22user_anchor_node_group21UserAnchorGroupBundleENS_9allo"
                                "catorISB_EEEEEEvSF_Lb0EEEE27__shared_ptr_default_deleteISG_SG_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio4capi11AnchorGroupENS0_INS_6vectorINS6_22user_anchor_node_group21UserAnchorGroupBundleENS_9allocatorISB_EEEEEEvSF_Lb0EEEE27__shared_ptr_default_deleteISG_SG_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio4capi11AnchorGroupENS0_INS_6vectorINS6_22user_anchor_node_group21UserAnchorGroupBundleENS_9allocatorISB_EEEEEEvSF_Lb0EEEE27__shared_ptr_default_deleteISG_SG_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EE3F4DC(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EE3F508(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EE3F544@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9ECD40;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20EE3F5AC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EE3F63C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EE3F650(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EE3F6E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE3F6F4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EE3F7B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE3F7CC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EE3F890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EE3F8A4(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EE3F948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EE3F960(uint64_t a1)
{
  sub_20EE400BC(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EE3F984(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _BYTE v5[8];
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    v5[0] = 0;
    v6 = 0;
    sub_20ECFB7A0(a1 + 11, a2, (uint64_t)v5);
    if (v6)
      MEMORY[0x212BC623C](v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_20EE3FA40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    MEMORY[0x212BC623C](&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

void sub_20EE3FA68(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_20E8778D4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v13, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_20ECFB7A0(a1 + 11, a2, (uint64_t)&v14);
  if (v15)
    MEMORY[0x212BC623C](&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_20EE3FC00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19)
{
  std::promise<void> *v19;
  std::exception_ptr v20;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v20.__ptr_ = &a19;
    std::promise<void>::set_exception(v19, v20);
    std::exception_ptr::~exception_ptr(&a19);
    std::runtime_error::~runtime_error(&a18);
    if (a17 < 0)
      operator delete(__p);
    JUMPOUT(0x20EE3FB2CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EE3FC9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14)
{
  std::recursive_mutex *v14;

  if ((_BYTE)a12)
    MEMORY[0x212BC623C](&a10);
  std::recursive_mutex::unlock(v14);
  _Unwind_Resume(a1);
}

void sub_20EE3FCC0(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_20EE3FD44(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 96);
  v4 = (_QWORD *)(a1 + 96);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20EE3FDD4(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EE3FDE8(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20EE3FE78(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EE3FE8C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

void sub_20EE3FEC0(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EE3FEF4(uint64_t a1)
{
  return sub_20EE400BC(a1 - 16);
}

void sub_20EE3FEFC(uint64_t a1)
{
  sub_20EE400BC(a1 - 16);
  JUMPOUT(0x212BC6398);
}

void sub_20EE3FF24(uint64_t a1)
{
  sub_20EE3FD44(a1 - 16);
}

void sub_20EE3FF2C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

void sub_20EE3FF60(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EE3FF94(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EE3FF9C(uint64_t a1)
{
  return sub_20EE400BC(a1 - 24);
}

void sub_20EE3FFA4(uint64_t a1)
{
  sub_20EE400BC(a1 - 24);
  JUMPOUT(0x212BC6398);
}

void sub_20EE3FFCC(uint64_t a1)
{
  sub_20EE3FDE8(a1 - 24);
}

uint64_t sub_20EE3FFD4(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20EE3FFDC(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EE40044(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE400AC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20EE400BC(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = &off_24C9ECDB8;
  *(_QWORD *)(a1 + 16) = &unk_24C9ECE30;
  *(_QWORD *)(a1 + 24) = &unk_24C9ECE70;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v8 = *(_QWORD *)(a1 + 96);
    v7 = *(uint64_t **)(a1 + 104);
    v9 = *v7;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v8 + 8);
    **(_QWORD **)(v8 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v7 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v7[1];
        operator delete(v7);
        v7 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20EE40208(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE4022C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EE40244(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio12area_mapping9CMR"
                     "equestEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio12area_"
                                "mapping9CMRequestEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio12area_mapping9CMRequestEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio12area_mapping9CMRequestEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20EE402B8(uint64_t a1)
{
  sub_20EE40A40(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EE402DC(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _BYTE v5[8];
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    v5[0] = 0;
    v6 = 0;
    sub_20EE40B88(a1 + 11, a2, (uint64_t)v5);
    if (v6)
      MEMORY[0x212BC623C](v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_20EE40398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    MEMORY[0x212BC623C](&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE403C0(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EE403D0(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EE403DC(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20EE403EC(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_20E8778D4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v13, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_20EE40B88(a1 + 11, a2, (uint64_t)&v14);
  if (v15)
    MEMORY[0x212BC623C](&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_20EE40584(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19)
{
  std::promise<void> *v19;
  std::exception_ptr v20;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v20.__ptr_ = &a19;
    std::promise<void>::set_exception(v19, v20);
    std::exception_ptr::~exception_ptr(&a19);
    std::runtime_error::~runtime_error(&a18);
    if (a17 < 0)
      operator delete(__p);
    JUMPOUT(0x20EE404B0);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EE40620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14)
{
  std::recursive_mutex *v14;

  if ((_BYTE)a12)
    MEMORY[0x212BC623C](&a10);
  std::recursive_mutex::unlock(v14);
  _Unwind_Resume(a1);
}

void sub_20EE40644(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_20EE406C8(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 96);
  v4 = (_QWORD *)(a1 + 96);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20EE40758(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EE4076C(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20EE407FC(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EE40810(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

void sub_20EE40844(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EE40878(uint64_t a1)
{
  return sub_20EE40A40(a1 - 16);
}

void sub_20EE40880(uint64_t a1)
{
  sub_20EE40A40(a1 - 16);
  JUMPOUT(0x212BC6398);
}

void sub_20EE408A8(uint64_t a1)
{
  sub_20EE406C8(a1 - 16);
}

void sub_20EE408B0(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

void sub_20EE408E4(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EE40918(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EE40920(uint64_t a1)
{
  return sub_20EE40A40(a1 - 24);
}

void sub_20EE40928(uint64_t a1)
{
  sub_20EE40A40(a1 - 24);
  JUMPOUT(0x212BC6398);
}

void sub_20EE40950(uint64_t a1)
{
  sub_20EE4076C(a1 - 24);
}

uint64_t sub_20EE40958(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20EE40960(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EE409C8(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE40A30(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20EE40A40(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = &off_24C9ECF78;
  *(_QWORD *)(a1 + 16) = &unk_24C9ECFF0;
  *(_QWORD *)(a1 + 24) = &unk_24C9ED030;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v8 = *(_QWORD *)(a1 + 96);
    v7 = *(uint64_t **)(a1 + 104);
    v9 = *v7;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v8 + 8);
    **(_QWORD **)(v8 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v7 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v7[1];
        operator delete(v7);
        v7 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20EE40B88(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = *a1;
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 276, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  if (*(_BYTE *)(a3 + 8))
    std::promise<void>::set_value((std::promise<void> *)a3);
}

void sub_20EE40C20()
{
  __break(1u);
}

void sub_20EE40CCC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20EE40CECLL);
}

void sub_20EE40CFC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE40D20(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EE40D38(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio14ObjectAnchorCMEv"
                     "vvLb0EEEE27__shared_ptr_default_deleteIS8_S8_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio14Objec"
                                "tAnchorCMEvvvLb0EEEE27__shared_ptr_default_deleteIS8_S8_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio14ObjectAnchorCMEvvvLb0EEEE27__shared_ptr_default_deleteIS8_S8_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio14ObjectAnchorCMEvvvLb0EEEE27__shared_ptr_default_deleteIS8_S8_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EE40DA8(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EE40DD4(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EE40E10@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9ED1B8;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20EE40E78(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EE40F08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EE40F1C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EE40FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE40FC0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EE41084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE41098(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EE4115C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EE41170(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EE41214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EE4122C(uint64_t a1)
{
  sub_20EE419B4(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EE41250(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _BYTE v5[8];
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    v5[0] = 0;
    v6 = 0;
    sub_20EE41AFC(a1 + 11, a2, (uint64_t)v5);
    if (v6)
      MEMORY[0x212BC623C](v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_20EE4130C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    MEMORY[0x212BC623C](&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE41334(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EE41344(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EE41350(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20EE41360(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_20E8778D4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v13, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_20EE41AFC(a1 + 11, a2, (uint64_t)&v14);
  if (v15)
    MEMORY[0x212BC623C](&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_20EE414F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19)
{
  std::promise<void> *v19;
  std::exception_ptr v20;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v20.__ptr_ = &a19;
    std::promise<void>::set_exception(v19, v20);
    std::exception_ptr::~exception_ptr(&a19);
    std::runtime_error::~runtime_error(&a18);
    if (a17 < 0)
      operator delete(__p);
    JUMPOUT(0x20EE41424);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EE41594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14)
{
  std::recursive_mutex *v14;

  if ((_BYTE)a12)
    MEMORY[0x212BC623C](&a10);
  std::recursive_mutex::unlock(v14);
  _Unwind_Resume(a1);
}

void sub_20EE415B8(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_20EE4163C(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 96);
  v4 = (_QWORD *)(a1 + 96);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20EE416CC(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EE416E0(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20EE41770(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EE41784(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

void sub_20EE417B8(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EE417EC(uint64_t a1)
{
  return sub_20EE419B4(a1 - 16);
}

void sub_20EE417F4(uint64_t a1)
{
  sub_20EE419B4(a1 - 16);
  JUMPOUT(0x212BC6398);
}

void sub_20EE4181C(uint64_t a1)
{
  sub_20EE4163C(a1 - 16);
}

void sub_20EE41824(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

void sub_20EE41858(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EE4188C(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EE41894(uint64_t a1)
{
  return sub_20EE419B4(a1 - 24);
}

void sub_20EE4189C(uint64_t a1)
{
  sub_20EE419B4(a1 - 24);
  JUMPOUT(0x212BC6398);
}

void sub_20EE418C4(uint64_t a1)
{
  sub_20EE416E0(a1 - 24);
}

uint64_t sub_20EE418CC(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20EE418D4(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EE4193C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE419A4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20EE419B4(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = &off_24C9ED230;
  *(_QWORD *)(a1 + 16) = &unk_24C9ED2A8;
  *(_QWORD *)(a1 + 24) = &unk_24C9ED2E8;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v8 = *(_QWORD *)(a1 + 96);
    v7 = *(uint64_t **)(a1 + 104);
    v9 = *v7;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v8 + 8);
    **(_QWORD **)(v8 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v7 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v7[1];
        operator delete(v7);
        v7 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20EE41AFC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = *a1;
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 276, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  if (*(_BYTE *)(a3 + 8))
    std::promise<void>::set_value((std::promise<void> *)a3);
}

void sub_20EE41B94()
{
  __break(1u);
}

void sub_20EE41C40(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20EE41C60);
}

void sub_20EE41C70(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE41C94(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EE41CAC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio22user_anchor_node"
                     "_group19RequestAnchorGroupsEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio22user_"
                                "anchor_node_group19RequestAnchorGroupsEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio22user_anchor_node_group19RequestAnchorGroupsEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio22user_anchor_node_group19RequestAnchorGroupsEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EE41D1C(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EE41D48(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EE41D84@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9ED470;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20EE41DEC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EE41E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EE41E90(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EE41F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE41F34(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EE41FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE4200C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EE420D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EE420E4(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EE42188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EE421A0(uint64_t a1)
{
  sub_20EE42928(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EE421C4(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _BYTE v5[8];
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    v5[0] = 0;
    v6 = 0;
    sub_20EE42A70(a1 + 11, a2, (uint64_t)v5);
    if (v6)
      MEMORY[0x212BC623C](v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_20EE42280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    MEMORY[0x212BC623C](&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE422A8(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EE422B8(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EE422C4(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20EE422D4(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_20E8778D4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v13, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_20EE42A70(a1 + 11, a2, (uint64_t)&v14);
  if (v15)
    MEMORY[0x212BC623C](&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_20EE4246C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19)
{
  std::promise<void> *v19;
  std::exception_ptr v20;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v20.__ptr_ = &a19;
    std::promise<void>::set_exception(v19, v20);
    std::exception_ptr::~exception_ptr(&a19);
    std::runtime_error::~runtime_error(&a18);
    if (a17 < 0)
      operator delete(__p);
    JUMPOUT(0x20EE42398);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EE42508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14)
{
  std::recursive_mutex *v14;

  if ((_BYTE)a12)
    MEMORY[0x212BC623C](&a10);
  std::recursive_mutex::unlock(v14);
  _Unwind_Resume(a1);
}

void sub_20EE4252C(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_20EE425B0(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 96);
  v4 = (_QWORD *)(a1 + 96);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20EE42640(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EE42654(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20EE426E4(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EE426F8(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

void sub_20EE4272C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EE42760(uint64_t a1)
{
  return sub_20EE42928(a1 - 16);
}

void sub_20EE42768(uint64_t a1)
{
  sub_20EE42928(a1 - 16);
  JUMPOUT(0x212BC6398);
}

void sub_20EE42790(uint64_t a1)
{
  sub_20EE425B0(a1 - 16);
}

void sub_20EE42798(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

void sub_20EE427CC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EE42800(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EE42808(uint64_t a1)
{
  return sub_20EE42928(a1 - 24);
}

void sub_20EE42810(uint64_t a1)
{
  sub_20EE42928(a1 - 24);
  JUMPOUT(0x212BC6398);
}

void sub_20EE42838(uint64_t a1)
{
  sub_20EE42654(a1 - 24);
}

uint64_t sub_20EE42840(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20EE42848(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EE428B0(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE42918(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20EE42928(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = &off_24C9ED4E8;
  *(_QWORD *)(a1 + 16) = &unk_24C9ED560;
  *(_QWORD *)(a1 + 24) = &unk_24C9ED5A0;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v8 = *(_QWORD *)(a1 + 96);
    v7 = *(uint64_t **)(a1 + 104);
    v9 = *v7;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v8 + 8);
    **(_QWORD **)(v8 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v7 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v7[1];
        operator delete(v7);
        v7 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20EE42A70(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = *a1;
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 276, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  if (*(_BYTE *)(a3 + 8))
    std::promise<void>::set_value((std::promise<void> *)a3);
}

void sub_20EE42B08()
{
  __break(1u);
}

void sub_20EE42BB4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20EE42BD4);
}

void sub_20EE42BE4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE42C08(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EE42C20(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS_8optionalINS1_3esn6rand"
                     "om4UUIDEEEvvvLb0EEEE27__shared_ptr_default_deleteISB_SB_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS_8optionalINS"
                                "1_3esn6random4UUIDEEEvvvLb0EEEE27__shared_ptr_default_deleteISB_SB_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS_8optionalINS1_3esn6random4UUIDEEEvvvLb0EEEE27__shared_ptr_default_deleteISB_SB_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS_8optionalINS1_3esn6random4UUIDEEEvvvLb0EEEE27__shared_ptr_default_deleteISB_SB_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EE42C90(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EE42CBC(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EE42CF8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9ED728;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20EE42D60(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EE42DF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EE42E04(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EE42E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE42EA8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EE42F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE42F80(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EE43044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EE43058(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EE430FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EE43114(uint64_t a1)
{
  sub_20EE4389C(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EE43138(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _BYTE v5[8];
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    v5[0] = 0;
    v6 = 0;
    sub_20EE439E4(a1 + 11, a2, (uint64_t)v5);
    if (v6)
      MEMORY[0x212BC623C](v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_20EE431F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    MEMORY[0x212BC623C](&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE4321C(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EE4322C(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EE43238(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20EE43248(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_20E8778D4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v13, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_20EE439E4(a1 + 11, a2, (uint64_t)&v14);
  if (v15)
    MEMORY[0x212BC623C](&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_20EE433E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19)
{
  std::promise<void> *v19;
  std::exception_ptr v20;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v20.__ptr_ = &a19;
    std::promise<void>::set_exception(v19, v20);
    std::exception_ptr::~exception_ptr(&a19);
    std::runtime_error::~runtime_error(&a18);
    if (a17 < 0)
      operator delete(__p);
    JUMPOUT(0x20EE4330CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EE4347C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14)
{
  std::recursive_mutex *v14;

  if ((_BYTE)a12)
    MEMORY[0x212BC623C](&a10);
  std::recursive_mutex::unlock(v14);
  _Unwind_Resume(a1);
}

void sub_20EE434A0(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_20EE43524(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 96);
  v4 = (_QWORD *)(a1 + 96);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20EE435B4(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EE435C8(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20EE43658(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EE4366C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

void sub_20EE436A0(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EE436D4(uint64_t a1)
{
  return sub_20EE4389C(a1 - 16);
}

void sub_20EE436DC(uint64_t a1)
{
  sub_20EE4389C(a1 - 16);
  JUMPOUT(0x212BC6398);
}

void sub_20EE43704(uint64_t a1)
{
  sub_20EE43524(a1 - 16);
}

void sub_20EE4370C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

void sub_20EE43740(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EE43774(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EE4377C(uint64_t a1)
{
  return sub_20EE4389C(a1 - 24);
}

void sub_20EE43784(uint64_t a1)
{
  sub_20EE4389C(a1 - 24);
  JUMPOUT(0x212BC6398);
}

void sub_20EE437AC(uint64_t a1)
{
  sub_20EE435C8(a1 - 24);
}

uint64_t sub_20EE437B4(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20EE437BC(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EE43824(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE4388C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20EE4389C(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = &off_24C9ED7A0;
  *(_QWORD *)(a1 + 16) = &unk_24C9ED818;
  *(_QWORD *)(a1 + 24) = &unk_24C9ED858;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v8 = *(_QWORD *)(a1 + 96);
    v7 = *(uint64_t **)(a1 + 104);
    v9 = *v7;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v8 + 8);
    **(_QWORD **)(v8 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v7 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v7[1];
        operator delete(v7);
        v7 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20EE439E4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = *a1;
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 276, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  if (*(_BYTE *)(a3 + 8))
    std::promise<void>::set_value((std::promise<void> *)a3);
}

void sub_20EE43A7C()
{
  __break(1u);
}

void sub_20EE43B28(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20EE43B48);
}

void sub_20EE43B58(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE43B7C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EE43B94(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio22user_anchor_node"
                     "_group17Remove3DOFAnchorsEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio22user_"
                                "anchor_node_group17Remove3DOFAnchorsEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio22user_anchor_node_group17Remove3DOFAnchorsEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio22user_anchor_node_group17Remove3DOFAnchorsEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EE43C04(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EE43C30(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EE43C6C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9ED9E0;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20EE43CD4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EE43D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EE43D78(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EE43E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE43E1C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EE43EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE43EF4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EE43FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EE43FCC(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EE44070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE44084(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9EC1A0;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9B2520;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9EC1D0;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20EE44268(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9EC138;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9B2520;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9EC168;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20EE4444C(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9EC0D0;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9B2520;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9EC100;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20EE44630(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9EC0A0;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9B2520;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9E1150;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20EE44814(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9EC038;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9EBF30;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9EC068;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20EE449F8(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9EBF98;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9EBFC8;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9B5708;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20EE44BDC(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9EBF68;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9EB528;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9E10B0;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20EE44DC0(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9EBEC8;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9EBF30;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9EBEF8;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20EE44FA4(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;

  *(_QWORD *)a1 = &off_24C9EBE98;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
    sub_20EE450B4(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = 0;
    if (v6)
LABEL_8:
      sub_20EE450B4(v6);
  }
  else
  {
LABEL_7:
    v6 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = 0;
    if (v6)
      goto LABEL_8;
  }
  v7 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v7)
    goto LABEL_13;
  v8 = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
  {
LABEL_13:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_19:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_19;
LABEL_14:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_20:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20EE450B4(uint64_t a1)
{
  sub_20EE33F5C(a1 + 1680);
  sub_20EE44084(a1 + 1512);
  sub_20EE44268(a1 + 1344);
  sub_20EE4444C(a1 + 1176);
  sub_20EE44630(a1 + 1008);
  sub_20ED12D68(a1 + 840);
  sub_20EE44814(a1 + 672);
  sub_20EE449F8(a1 + 504);
  sub_20EE44BDC(a1 + 336);
  sub_20ED14D8C(a1 + 168);
  sub_20EE44DC0(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE45138(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)a1 = &off_24C9EB3B8;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
  {
    sub_20EE33F5C(v2 + 336);
    sub_20EE34140(v2 + 168);
    v3 = sub_20EE34324(v2);
    MEMORY[0x212BC6398](v3, 0x10B2C40EC6BA667);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      v7 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = 0;
      if (!v7)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  v7 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v7)
  {
LABEL_8:
    sub_20EE33F5C(v7 + 336);
    sub_20EE34140(v7 + 168);
    v8 = sub_20EE34324(v7);
    MEMORY[0x212BC6398](v8, 0x10B2C40EC6BA667);
  }
LABEL_9:
  v9 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v9)
    goto LABEL_13;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
  {
LABEL_13:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_19:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_19;
LABEL_14:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_20:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20EE45298(uint64_t result)
{
  uint64_t v1;
  void **v2;
  void *v3;
  void **v4;

  if (result)
  {
    v1 = result;
    sub_20EE44FA4(result + 176);
    sub_20EE45138(v1 + 96);
    if (*(_BYTE *)(v1 + 88))
    {
      v2 = *(void ***)(v1 + 64);
      if (v2)
      {
        do
        {
          v4 = (void **)*v2;
          if (*((char *)v2 + 39) < 0)
            operator delete(v2[2]);
          operator delete(v2);
          v2 = v4;
        }
        while (v4);
      }
      v3 = *(void **)(v1 + 48);
      *(_QWORD *)(v1 + 48) = 0;
      if (v3)
        operator delete(v3);
    }
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    JUMPOUT(0x212BC6398);
  }
  return result;
}

void sub_20EE45344(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);
  JUMPOUT(0x212BC6398);
}

const char *sub_20EE45368()
{
  return "User Anchor Errors";
}

void sub_20EE45374(int a1@<W1>, uint64_t a2@<X8>)
{
  char *v3;

  switch(a1)
  {
    case 0:
      *(_BYTE *)(a2 + 23) = 16;
      strcpy((char *)a2, "AnchorIDNotFound");
      break;
    case 1:
      *(_BYTE *)(a2 + 23) = 18;
      strcpy((char *)a2, "UnableToOpenStream");
      break;
    case 2:
      *(_BYTE *)(a2 + 23) = 7;
      strcpy((char *)a2, "IOError");
      break;
    case 3:
      v3 = (char *)operator new(0x20uLL);
      *(_QWORD *)a2 = v3;
      *(_OWORD *)(a2 + 8) = xmmword_2102DBFE0;
      strcpy(v3, "UnableToDeleteAnchorGroup");
      break;
    case 4:
      *(_BYTE *)(a2 + 23) = 5;
      strcpy((char *)a2, "Error");
      break;
    case 5:
      strcpy((char *)a2, "UnableToRequestAnchors");
      *(_BYTE *)(a2 + 23) = 22;
      break;
    default:
      *(_BYTE *)(a2 + 23) = 20;
      strcpy((char *)a2, "Unknown Anchor Error");
      break;
  }
}

void sub_20EE454F8(std::error_category *a1)
{
  std::error_category::~error_category(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE4551C(uint64_t a1)
{
  void *v2;

  if (*(_BYTE *)(a1 + 168))
  {
    v2 = *(void **)(a1 + 48);
    if (v2)
    {
      *(_QWORD *)(a1 + 56) = v2;
      operator delete(v2);
    }
    return a1;
  }
  else
  {
    (**(void (***)(uint64_t))a1)(a1);
    return a1;
  }
}

void **sub_20EE45574(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 4);
        if (v5)
        {
          *((_QWORD *)v3 - 3) = v5;
          operator delete(v5);
        }
        v6 = (void *)*((_QWORD *)v3 - 8);
        if (v6)
        {
          *((_QWORD *)v3 - 7) = v6;
          operator delete(v6);
        }
        v3 -= 88;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_20EE455F4(uint64_t **a1@<X1>, float64x2_t *a2@<X2>, _QWORD *a3@<X8>, uint64_t a4@<D0>)
{
  uint64_t *v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float32x4_t *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  char *v43;
  char *v44;
  void *v45;
  char *v46;
  uint64_t **v47;
  _QWORD *v48;
  uint64_t *v50;
  void *__p;
  char *v52;
  unint64_t v53;
  _OWORD v54[17];
  __int128 v55;
  uint64_t v56;

  v7 = *a1;
  if (*a1 == a1[1])
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/SlamEngine/src/JasperPlaneDetector.cpp", 135, (uint64_t)"!jasper_frames.empty()", 22, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v7 = *a1;
  }
  v48 = a3;
  v8 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(_QWORD *)(*v7 + 16) - *(_QWORD *)(*v7 + 8)) >> 3);
  __p = 0;
  v52 = 0;
  v53 = 0;
  sub_20EA74E34((uint64_t)&__p, v8);
  v9 = *a1;
  v47 = a1;
  v50 = a1[1];
  if (*a1 != v50)
  {
    do
    {
      v11 = *(_QWORD *)(*v9 + 8);
      v10 = *(_QWORD *)(*v9 + 16);
      if (v11 != v10)
      {
        v12 = v52;
        do
        {
          while ((unint64_t)v12 >= v53)
          {
            v12 = sub_20EE48C78(&__p, *(uint64_t **)v11, *(_QWORD *)(v11 + 8));
            v52 = v12;
            v11 += 120;
            if (v11 == v10)
              goto LABEL_6;
          }
          v13 = (uint64_t *)(v12 + 24);
          *(_QWORD *)v12 = v12 + 24;
          *(_OWORD *)(v12 + 8) = xmmword_2102E0CB0;
          v15 = *(uint64_t **)v11;
          v14 = *(_QWORD *)(v11 + 8);
          if (v14 < 4)
          {
            if (v14)
            {
              v23 = *v15;
              *((_DWORD *)v12 + 8) = *((_DWORD *)v15 + 2);
              *v13 = v23;
              v24 = v15[2];
              *((_DWORD *)v12 + 12) = *((_DWORD *)v15 + 6);
              *((_QWORD *)v12 + 5) = v24;
              if (v14 != 1)
              {
                v25 = v15[4];
                *((_DWORD *)v12 + 16) = *((_DWORD *)v15 + 10);
                *((_QWORD *)v12 + 7) = v25;
                v26 = v15[6];
                *((_DWORD *)v12 + 20) = *((_DWORD *)v15 + 14);
                *((_QWORD *)v12 + 9) = v26;
                if (v14 != 2)
                {
                  v27 = v15[8];
                  *((_DWORD *)v12 + 24) = *((_DWORD *)v15 + 18);
                  *((_QWORD *)v12 + 11) = v27;
                  v28 = v15[10];
                  *((_DWORD *)v12 + 28) = *((_DWORD *)v15 + 22);
                  *((_QWORD *)v12 + 13) = v28;
                }
              }
            }
          }
          else
          {
            if (32 * v14 >= 0x7FFFFFFFFFFFFFE1)
              sub_20E969408((uint64_t)"get_next_capacity, allocator's max size reached");
            v16 = (char *)operator new(32 * v14);
            v17 = *(uint64_t **)v12;
            if (*(_QWORD *)v12)
            {
              *((_QWORD *)v12 + 1) = 0;
              if (v13 != v17)
                operator delete(v17);
            }
            v18 = 0;
            *((_QWORD *)v12 + 1) = 0;
            *((_QWORD *)v12 + 2) = v14;
            *(_QWORD *)v12 = v16;
            do
            {
              v19 = &v15[v18];
              v20 = &v16[v18 * 8];
              v21 = v15[v18];
              *((_DWORD *)v20 + 2) = v15[v18 + 1];
              *(_QWORD *)v20 = v21;
              v22 = v15[v18 + 2];
              *((_DWORD *)v20 + 6) = v15[v18 + 3];
              *((_QWORD *)v20 + 2) = v22;
              v18 += 4;
            }
            while (v19 + 4 != &v15[4 * v14]);
            v14 = (v18 * 8) >> 5;
          }
          *((_QWORD *)v12 + 1) = v14;
          v12 += 120;
          v52 = v12;
          v11 += 120;
        }
        while (v11 != v10);
      }
LABEL_6:
      v9 += 2;
    }
    while (v9 != v50);
  }
  v29 = (float32x4_t *)operator new(0x208uLL);
  v29->i64[1] = 0;
  v29[1].i64[0] = 0;
  v29->i64[0] = (uint64_t)&off_24C9B3878;
  v56 = 0;
  v55 = 0u;
  memset(&v54[1], 0, 256);
  v29[1].i64[1] = 0;
  v54[0] = 0u;
  sub_20E969038((float32x4_t *)v29[2].i64, (uint64_t *)&__p);
  v29[3].i64[1] = 0;
  v29[8].i32[2] = 0;
  v29[8].i8[12] = 0;
  v29[9].i8[0] = 0;
  v29[13].i8[0] = 0;
  sub_20E8A049C(&v29[13].i64[1], (uint64_t *)v54);
  v30 = *((_QWORD *)&v55 + 1);
  v29[30].i64[1] = v55;
  v29[31].i64[0] = v30;
  if (v30)
  {
    v31 = (unint64_t *)(v30 + 8);
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
    v33 = (std::__shared_weak_count *)*((_QWORD *)&v55 + 1);
    v29[31].i8[8] = v56;
    v29[32].i8[0] = 1;
    if (v33)
    {
      p_shared_owners = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldaxr(p_shared_owners);
      while (__stlxr(v35 - 1, p_shared_owners));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
  }
  else
  {
    v29[31].i8[8] = v56;
    v29[32].i8[0] = 1;
  }
  sub_20E86177C(v54);
  v36 = *v47;
  v37 = **v47;
  v29[3].i64[1] = *(_QWORD *)(v37 + 32);
  v38 = *(_QWORD *)(v37 + 104);
  v39 = *(float32x4_t *)(v37 + 88);
  v40 = *(float32x4_t *)(v37 + 72);
  v29[5] = *(float32x4_t *)(v37 + 56);
  v29[6] = v40;
  v29[7] = v39;
  v29[8].i64[0] = v38;
  v29[4] = *(float32x4_t *)(v37 + 40);
  v29[1].i64[1] = a4;
  LODWORD(v37) = v29[13].u8[0];
  v41 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(a2[2]), a2[3]);
  v29[9] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*a2), a2[1]);
  v29[10] = v41;
  v42 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(a2[6]), a2[7]);
  v29[11] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(a2[4]), a2[5]);
  v29[12] = v42;
  if (!(_DWORD)v37)
    v29[13].i8[0] = 1;
  v29[8].i8[12] = *(_BYTE *)(*v36 + 116);
  *v48 = (char *)v29 + 24;
  v48[1] = v29;
  v43 = (char *)__p;
  if (__p)
  {
    v44 = v52;
    v45 = __p;
    if (v52 != __p)
    {
      do
      {
        if (*((_QWORD *)v44 - 13))
        {
          v46 = (char *)*((_QWORD *)v44 - 15);
          if (v44 - 96 != v46)
            operator delete(v46);
        }
        v44 -= 120;
      }
      while (v44 != v43);
      v45 = __p;
    }
    v52 = v43;
    operator delete(v45);
  }
}

void sub_20EE45A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,std::__shared_weak_count *a54)
{
  std::__shared_weak_count *v54;
  void **v55;
  void *v57;
  uint64_t shared_weak_owners;
  void *v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *p_shared_owners;
  unint64_t v63;
  void *v64;

  v57 = *v55;
  if (*v55)
  {
    shared_weak_owners = v54[1].__shared_weak_owners_;
    v59 = *v55;
    if ((void *)shared_weak_owners != v57)
    {
      do
      {
        if (*(_QWORD *)(shared_weak_owners - 104))
        {
          v60 = *(void **)(shared_weak_owners - 120);
          if ((void *)(shared_weak_owners - 96) != v60)
            operator delete(v60);
        }
        shared_weak_owners -= 120;
      }
      while ((void *)shared_weak_owners != v57);
      v59 = *v55;
    }
    v54[1].__shared_weak_owners_ = (uint64_t)v57;
    operator delete(v59);
  }
  v61 = a54;
  if (a54)
  {
    p_shared_owners = (unint64_t *)&a54->__shared_owners_;
    do
      v63 = __ldaxr(p_shared_owners);
    while (__stlxr(v63 - 1, p_shared_owners));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  sub_20E86177C(&a19);
  std::__shared_weak_count::~__shared_weak_count(v54);
  operator delete(v64);
  sub_20EAAB76C(&a16);
  _Unwind_Resume(a1);
}

void sub_20EE45B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20EAAB76C((void **)va);
  _Unwind_Resume(a1);
}

void sub_20EE45B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20EAAB76C((void **)va);
  _Unwind_Resume(a1);
}

void sub_20EE45B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  uint64_t v17;
  uint64_t v18;

  if (*(_QWORD *)(v17 + 16))
  {
    if (v18 != *(_QWORD *)v17)
      operator delete(*(void **)v17);
  }
  a17 = v17;
  sub_20EAAB76C(&a16);
  _Unwind_Resume(a1);
}

void sub_20EE45B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20EAAB76C((void **)va);
  _Unwind_Resume(a1);
}

void sub_20EE45BAC(uint64_t a1@<X0>, double ***a2@<X1>, char **a3@<X8>)
{
  double **v4;
  int64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  double *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float32x2_t *v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  _QWORD *v21;
  void **v22;
  uint64_t *v23;
  uint64_t *v24;
  double **v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  char *v33;
  unsigned __int8 v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  const char *v39;
  size_t v40;
  size_t v41;
  void **v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  __int128 v48;
  char *v49;
  char *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  __int128 v60;
  char *v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  char *v67;
  void *v68;
  unint64_t v69;
  const void **v70;
  const void *v71;
  uint64_t v72;
  uint64_t v73;
  void **v74;
  uint64_t v75;
  size_t v76;
  const char *v77;
  unsigned __int8 v78;
  unsigned __int8 v79;
  const char *v80;
  size_t v81;
  _BYTE *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  void **v86;
  NSObject *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  size_t v91;
  std::__shared_weak_count_vtbl *v92;
  std::__shared_weak_count *v93;
  size_t v94;
  size_t v95;
  _QWORD *v96;
  void *v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  char v102;
  _QWORD *v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  void *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  _QWORD *v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  const char *v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  char *v149;
  char *v150;
  void *v151;
  void *v152;
  void *v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  char *v157;
  void ***v158;
  void ***v159;
  char *v160;
  __int128 v161;
  std::__shared_weak_count *v162;
  unint64_t *p_shared_owners;
  unint64_t v164;
  _QWORD *exception;
  uint64_t v167;
  double **v168;
  uint64_t v169;
  uint64_t v170;
  void *v171;
  void *v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  unint64_t v177;
  char *__s;
  double **v179;
  uint64_t *v180;
  void **v181;
  void **v182;
  _QWORD v183[3];
  int v184;
  const char *v185;
  int v186;
  const char *v187;
  uint64_t v188;
  std::__shared_weak_count *v189;
  void *__dst[2];
  int64_t v191;
  void *v192[2];
  __int128 v193;
  _BYTE v194[32];
  uint64_t v195;
  _QWORD v196[2];
  void *v197;
  float v198;
  float v199;
  char v200;
  unint64_t v201;
  int v202;
  uint64_t v203;
  uint64_t v204;
  _BYTE __p[64];
  _QWORD v206[3];
  __int128 v207;
  __int128 v208;
  __int128 v209;
  uint64_t v210;
  __int128 v211;
  uint64_t v212;
  char v213;
  void *v214;
  uint64_t *v215;
  uint64_t v216;
  void *v217;
  _BYTE *v218;
  void *v219[2];
  std::__shared_weak_count *v220;
  char *v221;
  std::__shared_weak_count *v222;
  _QWORD *v223;
  __int128 v224;
  _BYTE v225[24];
  __int128 v226;
  void *v227[2];
  unint64_t v228;
  char v229;
  _QWORD v230[5];

  v230[2] = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  v168 = a2[1];
  v5 = (char *)v168 - (char *)*a2;
  if (v168 != *a2)
  {
    if (v5 < 0)
      sub_20E867F44();
    v6 = v5 >> 4;
    v7 = (char *)operator new(v5);
    v173 = &v7[16 * v6];
    v171 = *(void **)(MEMORY[0x24BEDB7F0] + 64);
    v172 = (void *)*MEMORY[0x24BEDB7F0];
    v170 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v169 = MEMORY[0x24BEDB848] + 16;
    v8 = v7;
    v167 = a1;
    while (1)
    {
      if (!*(_QWORD *)(a1 + 8)
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/SlamEngine/src/JasperPlaneDetector.cpp", 57, (uint64_t)"plane_detector_", 15, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_243:
        abort();
      }
      v9 = *v4;
      if (!*v4)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/SlamEngine/src/JasperPlaneDetector.cpp", 58, (uint64_t)"jasper_frame", 12, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_243;
        }
        v9 = *v4;
      }
      sub_20EA70428((uint64_t *)v9 + 1, 0, 0, &v217, *(double *)(a1 + 16), *(double *)(a1 + 24));
      kdebug_trace();
      v10 = *(_QWORD *)(a1 + 8);
      v11 = *((unsigned int *)*v4 + 8);
      v12 = *((unsigned int *)*v4 + 9);
      v13 = (*v4)[5];
      v14 = (*v4)[9];
      v15 = (*v4)[7];
      v16 = (*v4)[10];
      *(float *)v225 = v13;
      *(float *)&v225[4] = v14;
      *(float *)&v225[8] = v15;
      *(float *)&v225[12] = v16;
      sub_20EF4A7C0((uint64_t)__p, (uint64_t)v225);
      v192[0] = &off_24C9F15F0;
      v192[1] = &off_24C9F1578;
      v193 = *(_OWORD *)&__p[8];
      *(_OWORD *)v194 = *(_OWORD *)&__p[24];
      *(_OWORD *)&v194[16] = *(_OWORD *)&__p[40];
      v195 = *(_QWORD *)&__p[56];
      LODWORD(v196[0]) = v206[0];
      *(_QWORD *)((char *)v196 + 4) = *(_QWORD *)((char *)v206 + 4);
      v197 = (void *)(v11 | (v12 << 32));
      v198 = (float)v11;
      v199 = (float)v12;
      v17 = (float32x2_t *)v217;
      if (v218 == v217)
      {
        v215 = 0;
        v214 = 0;
        v216 = 0;
      }
      else
      {
        v18 = 0xAAAAAAAAAAAAAAABLL * ((v218 - (_BYTE *)v217) >> 2);
        sub_20EF3EBA4((void ***)v18, (float32x2_t *)v217, (float32x2_t *)v192, (uint64_t)__p);
        sub_20EF3BDF0(v10, (uint64_t)(*(_QWORD *)&__p[8] - *(_QWORD *)__p) >> 3, *(float32x2_t **)__p, v18, v17, 0, 0, (uint64_t *)&v214);
        if (*(_QWORD *)__p)
        {
          *(_QWORD *)&__p[8] = *(_QWORD *)__p;
          operator delete(*(void **)__p);
        }
      }
      kdebug_trace();
      v179 = v4;
      v19 = *(_QWORD *)*v4;
      v20 = *((_BYTE *)*v4 + 116);
      v21 = operator new(0xC8uLL);
      v21[1] = 0;
      v21[2] = 0;
      v21[3] = 0;
      v22 = (void **)(v21 + 3);
      *v21 = &off_24C9EDB08;
      *((_BYTE *)v21 + 176) = 0;
      v21[4] = 0;
      v21[5] = 0;
      *((_BYTE *)v21 + 48) = 0;
      v21[23] = v19;
      *((_BYTE *)v21 + 192) = v20;
      v181 = (void **)(v21 + 3);
      v182 = (void **)v21;
      v23 = (uint64_t *)v214;
      v180 = v215;
      if (v214 != v215)
        break;
      v25 = v179;
LABEL_202:
      kdebug_trace();
      v149 = (char *)v214;
      a1 = v167;
      if (v214)
      {
        v150 = (char *)v215;
        v151 = v214;
        if (v215 != v214)
        {
          do
          {
            v152 = (void *)*((_QWORD *)v150 - 4);
            if (v152)
            {
              *((_QWORD *)v150 - 3) = v152;
              operator delete(v152);
            }
            v153 = (void *)*((_QWORD *)v150 - 8);
            if (v153)
            {
              *((_QWORD *)v150 - 7) = v153;
              operator delete(v153);
            }
            v150 -= 88;
          }
          while (v150 != v149);
          v151 = v214;
        }
        v215 = (uint64_t *)v149;
        operator delete(v151);
        v25 = v179;
      }
      if (v217)
      {
        v218 = v217;
        operator delete(v217);
      }
      if (v8 < v173)
      {
        *(_QWORD *)v8 = v22;
        *((_QWORD *)v8 + 1) = v182;
        v8 += 16;
      }
      else
      {
        v154 = (v8 - v7) >> 4;
        v155 = v154 + 1;
        if ((unint64_t)(v154 + 1) >> 60)
          sub_20E867F44();
        if ((v173 - v7) >> 3 > v155)
          v155 = (v173 - v7) >> 3;
        if ((unint64_t)(v173 - v7) >= 0x7FFFFFFFFFFFFFF0)
          v156 = 0xFFFFFFFFFFFFFFFLL;
        else
          v156 = v155;
        if (v156 >> 60)
          sub_20E877A38();
        v157 = (char *)operator new(16 * v156);
        v158 = (void ***)&v157[16 * v154];
        *v158 = v22;
        v158[1] = v182;
        v159 = v158;
        if (v8 != v7)
        {
          v160 = v8;
          do
          {
            v161 = *((_OWORD *)v160 - 1);
            v160 -= 16;
            *((_OWORD *)v159 - 1) = v161;
            v159 -= 2;
            *(_QWORD *)v160 = 0;
            *((_QWORD *)v160 + 1) = 0;
          }
          while (v160 != v7);
          do
          {
            v162 = (std::__shared_weak_count *)*((_QWORD *)v8 - 1);
            if (v162)
            {
              p_shared_owners = (unint64_t *)&v162->__shared_owners_;
              do
                v164 = __ldaxr(p_shared_owners);
              while (__stlxr(v164 - 1, p_shared_owners));
              if (!v164)
              {
                ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
                std::__shared_weak_count::__release_weak(v162);
              }
            }
            v8 -= 16;
          }
          while (v8 != v7);
        }
        if (v7)
          operator delete(v7);
        v173 = &v157[16 * v156];
        v8 = (char *)(v158 + 2);
        v7 = (char *)v159;
        v25 = v179;
      }
      v4 = v25 + 2;
      if (v4 == v168)
        goto LABEL_236;
    }
    v25 = v179;
    v24 = v215;
    while (1)
    {
      *(_OWORD *)v192 = xmmword_210382620;
      v193 = xmmword_210382630;
      *(_OWORD *)&v194[8] = xmmword_210382640;
      *(_QWORD *)v194 = 0x3C23D70A3C8EFA35;
      *(_QWORD *)&v194[24] = 0x4120000042340000;
      v195 = 0x3EE4F8B588E368F1;
      sub_20FD881F8(&v217, v23 + 3, (uint64_t)v192, (uint64_t)__p);
      if (v213)
      {
        v26 = (char *)v181[1];
        v27 = (char *)v181[2];
        if (v26 >= v27)
        {
          v43 = 0xCF3CF3CF3CF3CF3DLL * ((v26 - (_BYTE *)*v181) >> 3);
          v44 = v43 + 1;
          if (v43 + 1 > 0x186186186186186)
            sub_20E867F44();
          v45 = 0xCF3CF3CF3CF3CF3DLL * ((v27 - (_BYTE *)*v181) >> 3);
          if (2 * v45 > v44)
            v44 = 2 * v45;
          if (v45 >= 0xC30C30C30C30C3)
            v46 = 0x186186186186186;
          else
            v46 = v44;
          if (v46)
          {
            if (v46 > 0x186186186186186)
              sub_20E877A38();
            v47 = (char *)operator new(168 * v46);
          }
          else
          {
            v47 = 0;
          }
          v48 = *(_OWORD *)&__p[16];
          v49 = &v47[168 * v43];
          *(_OWORD *)v49 = *(_OWORD *)__p;
          *((_OWORD *)v49 + 1) = v48;
          v50 = &v47[168 * v46];
          v51 = *(_OWORD *)&__p[48];
          *((_OWORD *)v49 + 2) = *(_OWORD *)&__p[32];
          *((_OWORD *)v49 + 3) = v51;
          *((_QWORD *)v49 + 8) = v206[0];
          *(_QWORD *)&__p[56] = 0;
          v206[0] = 0;
          *(_QWORD *)&__p[48] = 0;
          v52 = v207;
          *(_OWORD *)(v49 + 72) = *(_OWORD *)&v206[1];
          v53 = v208;
          v54 = v209;
          *((_QWORD *)v49 + 17) = v210;
          *(_OWORD *)(v49 + 120) = v54;
          *(_OWORD *)(v49 + 104) = v53;
          *(_OWORD *)(v49 + 88) = v52;
          v55 = v211;
          *((_QWORD *)v49 + 20) = v212;
          *((_OWORD *)v49 + 9) = v55;
          v33 = v49 + 168;
          v56 = (char *)*v181;
          v57 = (char *)v181[1];
          if (v57 == *v181)
          {
            *v181 = v49;
            v181[1] = v33;
            v181[2] = v50;
          }
          else
          {
            v58 = 0;
            do
            {
              v59 = &v57[v58];
              v60 = *(_OWORD *)&v57[v58 - 168];
              v61 = &v49[v58];
              *(_OWORD *)(v61 - 152) = *(_OWORD *)&v57[v58 - 152];
              *(_OWORD *)(v61 - 168) = v60;
              v62 = *(_OWORD *)&v57[v58 - 136];
              *((_QWORD *)v61 - 14) = 0;
              *((_QWORD *)v61 - 13) = 0;
              *(_OWORD *)(v61 - 136) = v62;
              *(_OWORD *)(v61 - 120) = *(_OWORD *)&v57[v58 - 120];
              *((_QWORD *)v61 - 13) = *(_QWORD *)&v57[v58 - 104];
              *((_QWORD *)v59 - 14) = 0;
              *((_QWORD *)v59 - 13) = 0;
              *((_QWORD *)v59 - 15) = 0;
              v64 = *(_OWORD *)&v57[v58 - 64];
              v63 = *(_OWORD *)&v57[v58 - 48];
              v65 = *(_OWORD *)&v57[v58 - 80];
              *((_QWORD *)v61 - 4) = *(_QWORD *)&v57[v58 - 32];
              *((_OWORD *)v61 - 4) = v64;
              *((_OWORD *)v61 - 3) = v63;
              *((_OWORD *)v61 - 5) = v65;
              *((_OWORD *)v61 - 6) = *(_OWORD *)&v57[v58 - 96];
              v66 = *(_OWORD *)&v57[v58 - 24];
              *((_QWORD *)v61 - 1) = *(_QWORD *)&v57[v58 - 8];
              *(_OWORD *)(v61 - 24) = v66;
              v58 -= 168;
            }
            while (&v57[v58] != v56);
            v57 = (char *)*v181;
            v67 = (char *)v181[1];
            *v181 = &v49[v58];
            v181[1] = v33;
            v181[2] = v50;
            while (v67 != v57)
            {
              v68 = (void *)*((_QWORD *)v67 - 15);
              if (v68)
              {
                *((_QWORD *)v67 - 14) = v68;
                operator delete(v68);
              }
              v67 -= 168;
            }
          }
          v24 = v180;
          if (v57)
            operator delete(v57);
        }
        else
        {
          v28 = *(_OWORD *)&__p[16];
          *(_OWORD *)v26 = *(_OWORD *)__p;
          *((_OWORD *)v26 + 1) = v28;
          *((_OWORD *)v26 + 2) = *(_OWORD *)&__p[32];
          *((_QWORD *)v26 + 7) = 0;
          *((_QWORD *)v26 + 8) = 0;
          *((_QWORD *)v26 + 6) = 0;
          *((_OWORD *)v26 + 3) = *(_OWORD *)&__p[48];
          *((_QWORD *)v26 + 8) = v206[0];
          *(_QWORD *)&__p[48] = 0;
          *(_QWORD *)&__p[56] = 0;
          v206[0] = 0;
          *(_OWORD *)(v26 + 72) = *(_OWORD *)&v206[1];
          v29 = v207;
          v30 = v208;
          v31 = v209;
          *((_QWORD *)v26 + 17) = v210;
          *(_OWORD *)(v26 + 120) = v31;
          *(_OWORD *)(v26 + 104) = v30;
          *(_OWORD *)(v26 + 88) = v29;
          v32 = v211;
          *((_QWORD *)v26 + 20) = v212;
          *((_OWORD *)v26 + 9) = v32;
          v33 = v26 + 168;
        }
        v181[1] = v33;
LABEL_54:
        if (v213)
          goto LABEL_55;
        goto LABEL_17;
      }
      v34 = atomic_load((unsigned __int8 *)&qword_254A5FA18);
      if ((v34 & 1) == 0 && __cxa_guard_acquire(&qword_254A5FA18))
      {
        sub_21021D3D8(v225);
        sub_20E8610C0(v192, "cv3d.vio.slam_engine");
        sub_20E8C4068((uint64_t **)v225, (uint64_t)v192, &qword_254A5FA10);
        if (SBYTE7(v193) < 0)
          operator delete(v192[0]);
        __cxa_guard_release(&qword_254A5FA18);
        v25 = v179;
        v24 = v180;
      }
      v204 = qword_254A5FA10;
      if (**(int **)(qword_254A5FA10 + 56) > 3)
        goto LABEL_54;
      v35 = *(unsigned __int8 *)(qword_254A5FA10 + 72);
      v36 = sub_20E8C31DC(qword_254A5FA10, "OSLogSurrogateAppender", 1, 0);
      v37 = v36;
      if (!v35 && v36 == 0)
        goto LABEL_54;
      sub_20E863438((uint64_t)v192);
      if (v213)
      {
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24C9B4620;
        __cxa_throw(exception, (struct type_info *)&unk_24C9AD070, (void (*)(void *))std::exception::~exception);
      }
      v39 = (const char *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)__p + 16))(__p);
      v40 = strlen(v39);
      sub_20E86A980(&v193, (uint64_t)v39, v40);
      v176 = v35;
      if ((v202 & 0x10) != 0)
      {
        v69 = v201;
        v70 = (const void **)&v195;
        if (v201 < v196[0])
        {
          v201 = v196[0];
          v69 = v196[0];
          v70 = (const void **)&v195;
        }
      }
      else
      {
        if ((v202 & 8) == 0)
        {
          v41 = 0;
          HIBYTE(v191) = 0;
          v42 = __dst;
          goto LABEL_68;
        }
        v69 = *(_QWORD *)&v194[24];
        v70 = (const void **)&v194[8];
      }
      v71 = *v70;
      v41 = v69 - (_QWORD)*v70;
      if (v41 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v41 >= 0x17)
        break;
      HIBYTE(v191) = v69 - *(_BYTE *)v70;
      v42 = __dst;
      if (v41)
        goto LABEL_67;
LABEL_68:
      v177 = v37;
      *((_BYTE *)v42 + v41) = 0;
      v183[0] = &v204;
      v183[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v183[2] = std::chrono::system_clock::now().__d_.__rep_;
      v184 = 3;
      v185 = "unknown file";
      v186 = 83;
      v187 = "unknown function";
      v188 = 0;
      v189 = 0;
      v74 = __dst;
      if (v191 < 0)
        v74 = (void **)__dst[0];
      __s = (char *)v74;
      v75 = *(_QWORD *)v183[0];
      if (*(char *)(*(_QWORD *)v183[0] + 39) < 0)
      {
        v77 = *(const char **)(v75 + 16);
        v76 = *(_QWORD *)(v75 + 24);
        v174 = *(_QWORD *)v183[0] + 16;
        v175 = *(_QWORD *)v183[0];
        v79 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v79 & 1) != 0)
          goto LABEL_74;
      }
      else
      {
        v76 = *(unsigned __int8 *)(*(_QWORD *)v183[0] + 39);
        v77 = (const char *)(*(_QWORD *)v183[0] + 16);
        v174 = (uint64_t)v77;
        v175 = *(_QWORD *)v183[0];
        v78 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v78 & 1) != 0)
          goto LABEL_74;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)v219);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v219);
        if ((_BYTE)v221 && SHIBYTE(v220) < 0)
          operator delete(v219[0]);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
LABEL_74:
      if (byte_254A4A4F8[23] >= 0)
        v80 = byte_254A4A4F8;
      else
        v80 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v81 = byte_254A4A4F8[23];
      else
        v81 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)v225 = os_log_create(v80, v77);
      if (v81 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v81 >= 0x17)
      {
        v83 = v7;
        v84 = (v81 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v81 | 7) != 0x17)
          v84 = v81 | 7;
        v85 = v84 + 1;
        v82 = operator new(v84 + 1);
        *(_QWORD *)&v225[16] = v81;
        *(_QWORD *)&v226 = v85 | 0x8000000000000000;
        *(_QWORD *)&v225[8] = v82;
        v7 = v83;
LABEL_87:
        memmove(v82, v80, v81);
        goto LABEL_88;
      }
      BYTE7(v226) = v81;
      v82 = &v225[8];
      if (v81)
        goto LABEL_87;
LABEL_88:
      v82[v81] = 0;
      BYTE8(v226) = 1;
      if (v76 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      v25 = v179;
      if (v76 >= 0x17)
      {
        v89 = (v76 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v76 | 7) != 0x17)
          v89 = v76 | 7;
        v90 = v89 + 1;
        v86 = (void **)operator new(v89 + 1);
        v227[1] = (void *)v76;
        v228 = v90 | 0x8000000000000000;
        v227[0] = v86;
        v24 = v180;
      }
      else
      {
        HIBYTE(v228) = v76;
        v86 = v227;
        v24 = v180;
        if (!v76)
        {
          LOBYTE(v227[0]) = 0;
          v229 = 1;
          v87 = *(NSObject **)v225;
          if ((SHIBYTE(v228) & 0x80000000) == 0)
            goto LABEL_92;
          goto LABEL_98;
        }
      }
      memmove(v86, v77, v76);
      *((_BYTE *)v86 + v76) = 0;
      v229 = 1;
      v87 = *(NSObject **)v225;
      if ((SHIBYTE(v228) & 0x80000000) == 0)
      {
LABEL_92:
        v88 = v177;
        if (!BYTE8(v226))
          goto LABEL_101;
        goto LABEL_99;
      }
LABEL_98:
      operator delete(v227[0]);
      v88 = v177;
      if (!BYTE8(v226))
        goto LABEL_101;
LABEL_99:
      if (SBYTE7(v226) < 0)
        operator delete(*(void **)&v225[8]);
LABEL_101:
      if (*(_QWORD *)v225)
        os_release(*(void **)v225);
      if (!v88 || !*(_QWORD *)(v88 + 24))
      {
        os_log_type_enabled(v87, OS_LOG_TYPE_INFO);
        *(_DWORD *)v225 = 136315138;
        *(_QWORD *)&v225[4] = __s;
        v97 = (void *)_os_log_send_and_compose_impl();
        v98 = v176;
        if (v97)
          free(v97);
        goto LABEL_175;
      }
      v91 = _os_log_pack_size();
      v92 = (std::__shared_weak_count_vtbl *)operator new(v91, (std::align_val_t)8uLL);
      v93 = (std::__shared_weak_count *)operator new();
      v93->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
      v93->__shared_owners_ = 0;
      v93->__shared_weak_owners_ = 0;
      v93[1].__vftable = v92;
      v219[0] = v92;
      v219[1] = v92;
      v220 = v93;
      v221 = 0;
      v222 = 0;
      v94 = strlen(__s);
      if (v94 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      v95 = v94;
      if (v94 >= 0x17)
      {
        v99 = (v94 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v94 | 7) != 0x17)
          v99 = v94 | 7;
        v100 = v99 + 1;
        v96 = operator new(v99 + 1);
        *(_QWORD *)&v224 = v95;
        *((_QWORD *)&v224 + 1) = v100 | 0x8000000000000000;
        v223 = v96;
      }
      else
      {
        HIBYTE(v224) = v94;
        v96 = &v223;
        if (!v94)
          goto LABEL_115;
      }
      memcpy(v96, __s, v95);
LABEL_115:
      *((_BYTE *)v96 + v95) = 0;
      v101 = v223;
      v230[0] = v224;
      *(_QWORD *)((char *)v230 + 7) = *(_QWORD *)((char *)&v224 + 7);
      v102 = HIBYTE(v224);
      v103 = operator new(0x38uLL);
      v103[1] = 0;
      v103[2] = 0;
      v103[3] = off_24C9ABC20;
      *v103 = &off_24C9ABBD0;
      v104 = v230[0];
      v103[4] = v101;
      v103[5] = v104;
      *(_QWORD *)((char *)v103 + 47) = *(_QWORD *)((char *)v230 + 7);
      *((_BYTE *)v103 + 55) = v102;
      v230[0] = 0;
      *(_QWORD *)((char *)v230 + 7) = 0;
      v105 = v222;
      v221 = (char *)(v103 + 3);
      v222 = (std::__shared_weak_count *)v103;
      v25 = v179;
      if (!v105)
        goto LABEL_119;
      v106 = (unint64_t *)&v105->__shared_owners_;
      do
        v107 = __ldaxr(v106);
      while (__stlxr(v107 - 1, v106));
      if (!v107)
      {
        ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
        std::__shared_weak_count::__release_weak(v105);
        *(_OWORD *)v225 = *(_OWORD *)v219;
        v108 = v221;
        v109 = v220;
        *(_QWORD *)&v225[16] = v220;
        if (!v220)
          goto LABEL_122;
      }
      else
      {
LABEL_119:
        *(_OWORD *)v225 = *(_OWORD *)v219;
        v108 = v221;
        v109 = v220;
        *(_QWORD *)&v225[16] = v220;
        if (!v220)
          goto LABEL_122;
      }
      v110 = (unint64_t *)&v109->__shared_owners_;
      do
        v111 = __ldxr(v110);
      while (__stxr(v111 + 1, v110));
LABEL_122:
      v112 = v222;
      *(_QWORD *)&v226 = v108;
      *((_QWORD *)&v226 + 1) = v222;
      if (v222)
      {
        v113 = (unint64_t *)&v222->__shared_owners_;
        do
          v114 = __ldxr(v113);
        while (__stxr(v114 + 1, v113));
        v227[0] = v108;
        do
          v115 = __ldaxr(v113);
        while (__stlxr(v115 - 1, v113));
        if (!v115)
        {
          ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
          std::__shared_weak_count::__release_weak(v112);
        }
      }
      else
      {
        v227[0] = v108;
      }
      v116 = v220;
      if (v220)
      {
        v117 = (unint64_t *)&v220->__shared_owners_;
        do
          v118 = __ldaxr(v117);
        while (__stlxr(v118 - 1, v117));
        if (!v118)
        {
          ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
          std::__shared_weak_count::__release_weak(v116);
        }
      }
      v119 = *(_QWORD *)v225;
      if (*((char *)v227[0] + 31) >= 0)
        v120 = (char *)v227[0] + 8;
      else
        v120 = (char *)*((_QWORD *)v227[0] + 1);
      v121 = _os_log_pack_fill();
      *(_DWORD *)v121 = 136315138;
      *(_QWORD *)(v121 + 4) = v120;
      v122 = (char *)operator new();
      v123 = *(unsigned __int8 *)(v175 + 39);
      v124 = v174;
      if ((v123 & 0x80u) != 0)
      {
        v124 = *(_QWORD *)(v175 + 16);
        v123 = *(_QWORD *)(v175 + 24);
      }
      *(_QWORD *)v122 = v119;
      *(_OWORD *)(v122 + 8) = *(_OWORD *)&v225[8];
      *(_QWORD *)&v225[8] = 0;
      *(_QWORD *)&v225[16] = 0;
      *(_OWORD *)(v122 + 24) = v226;
      v226 = 0uLL;
      *((_QWORD *)v122 + 5) = v124;
      *((_QWORD *)v122 + 6) = v123;
      v122[56] = 1;
      v223 = 0;
      v219[0] = v122;
      (*(void (**)(_QWORD, void **))(**(_QWORD **)(v88 + 24) + 40))(*(_QWORD *)(v88 + 24), v219);
      v24 = v180;
      v125 = v219[0];
      v219[0] = 0;
      if (!v125)
        goto LABEL_165;
      v126 = (std::__shared_weak_count *)*((_QWORD *)v125 + 4);
      if (!v126)
        goto LABEL_145;
      v127 = (unint64_t *)&v126->__shared_owners_;
      do
        v128 = __ldaxr(v127);
      while (__stlxr(v128 - 1, v127));
      if (!v128)
      {
        ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
        std::__shared_weak_count::__release_weak(v126);
        v129 = (std::__shared_weak_count *)*((_QWORD *)v125 + 2);
        if (!v129)
          goto LABEL_153;
      }
      else
      {
LABEL_145:
        v129 = (std::__shared_weak_count *)*((_QWORD *)v125 + 2);
        if (!v129)
          goto LABEL_153;
      }
      v130 = (unint64_t *)&v129->__shared_owners_;
      do
        v131 = __ldaxr(v130);
      while (__stlxr(v131 - 1, v130));
      if (!v131)
      {
        ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
        std::__shared_weak_count::__release_weak(v129);
      }
LABEL_153:
      MEMORY[0x212BC6398](v125, 0x10F0C40B62ED6C6);
      v132 = v223;
      v223 = 0;
      if (!v132)
        goto LABEL_165;
      v133 = (std::__shared_weak_count *)v132[4];
      if (!v133)
        goto LABEL_158;
      v134 = (unint64_t *)&v133->__shared_owners_;
      do
        v135 = __ldaxr(v134);
      while (__stlxr(v135 - 1, v134));
      if (!v135)
      {
        ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
        std::__shared_weak_count::__release_weak(v133);
        v136 = (std::__shared_weak_count *)v132[2];
        if (v136)
        {
LABEL_159:
          v137 = (unint64_t *)&v136->__shared_owners_;
          do
            v138 = __ldaxr(v137);
          while (__stlxr(v138 - 1, v137));
          if (!v138)
          {
            ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
            std::__shared_weak_count::__release_weak(v136);
          }
        }
      }
      else
      {
LABEL_158:
        v136 = (std::__shared_weak_count *)v132[2];
        if (v136)
          goto LABEL_159;
      }
      MEMORY[0x212BC6398](v132, 0x10F0C40B62ED6C6);
LABEL_165:
      v139 = (std::__shared_weak_count *)*((_QWORD *)&v226 + 1);
      v98 = v176;
      if (!*((_QWORD *)&v226 + 1))
        goto LABEL_169;
      v140 = (unint64_t *)(*((_QWORD *)&v226 + 1) + 8);
      do
        v141 = __ldaxr(v140);
      while (__stlxr(v141 - 1, v140));
      if (!v141)
      {
        ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
        std::__shared_weak_count::__release_weak(v139);
        v142 = *(std::__shared_weak_count **)&v225[16];
        if (!*(_QWORD *)&v225[16])
          goto LABEL_175;
      }
      else
      {
LABEL_169:
        v142 = *(std::__shared_weak_count **)&v225[16];
        if (!*(_QWORD *)&v225[16])
          goto LABEL_175;
      }
      v143 = (unint64_t *)&v142->__shared_owners_;
      do
        v144 = __ldaxr(v143);
      while (__stlxr(v144 - 1, v143));
      if (!v144)
      {
        ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
        std::__shared_weak_count::__release_weak(v142);
      }
LABEL_175:
      if (v98)
      {
        v145 = (const char *)__dst;
        if (v191 < 0)
          v145 = (const char *)__dst[0];
        sub_20E8C003C((uint64_t)v183, "%s", v145);
        sub_20E863570((uint64_t)v183);
      }
      sub_20E863570((uint64_t)v183);
      v146 = v189;
      if (!v189)
        goto LABEL_183;
      v147 = (unint64_t *)&v189->__shared_owners_;
      do
        v148 = __ldaxr(v147);
      while (__stlxr(v148 - 1, v147));
      if (v148)
      {
LABEL_183:
        if ((SHIBYTE(v191) & 0x80000000) == 0)
          goto LABEL_185;
LABEL_184:
        operator delete(__dst[0]);
        goto LABEL_185;
      }
      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
      std::__shared_weak_count::__release_weak(v146);
      if (SHIBYTE(v191) < 0)
        goto LABEL_184;
LABEL_185:
      v192[0] = v172;
      *(void **)((char *)v192 + *((_QWORD *)v172 - 3)) = v171;
      *(_QWORD *)&v193 = v170;
      *((_QWORD *)&v193 + 1) = v169;
      if (v200 < 0)
        operator delete(v197);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x212BC6290](&v203);
      if (v213)
      {
LABEL_55:
        if (*(_QWORD *)&__p[48])
        {
          *(_QWORD *)&__p[56] = *(_QWORD *)&__p[48];
          operator delete(*(void **)&__p[48]);
        }
        goto LABEL_18;
      }
LABEL_17:
      (**(void (***)(_BYTE *))__p)(__p);
LABEL_18:
      v23 += 11;
      if (v23 == v24)
      {
        v22 = v181;
        goto LABEL_202;
      }
    }
    v72 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v41 | 7) != 0x17)
      v72 = v41 | 7;
    v73 = v72 + 1;
    v42 = (void **)operator new(v72 + 1);
    __dst[1] = (void *)v41;
    v191 = v73 | 0x8000000000000000;
    __dst[0] = v42;
LABEL_67:
    memmove(v42, v71, v41);
    goto LABEL_68;
  }
  v7 = 0;
  v8 = 0;
  v173 = 0;
LABEL_236:
  *a3 = v7;
  a3[1] = v8;
  a3[2] = v173;
}

void sub_20EE47358(uint64_t a1@<X0>, uint64_t **a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float32x2_t *v34;
  uint64_t v35;
  uint64_t **v36;
  uint64_t *v37;
  uint64_t v38;
  char v39;
  std::__shared_weak_count *v40;
  uint64_t *v41;
  uint64_t *v42;
  void **v43;
  char *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  char *v50;
  unsigned __int8 v51;
  int v52;
  unint64_t v53;
  unint64_t v54;
  const char *v56;
  size_t v57;
  size_t v58;
  void **v59;
  unint64_t v60;
  const void **v61;
  const void *v62;
  uint64_t v63;
  uint64_t v64;
  void **v65;
  uint64_t v66;
  const char *v67;
  size_t v68;
  unsigned __int8 v69;
  unsigned __int8 v70;
  const char *v71;
  size_t v72;
  _BYTE *v73;
  uint64_t v74;
  uint64_t v75;
  void **v76;
  NSObject *v77;
  uint64_t v78;
  uint64_t v79;
  size_t v80;
  std::__shared_weak_count_vtbl *v81;
  std::__shared_weak_count *v82;
  size_t v83;
  size_t v84;
  _QWORD *v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  char v90;
  _QWORD *v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *p_shared_owners;
  unint64_t v95;
  void *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  const char *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  _QWORD *v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  const char *v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  uint64_t *v136;
  char *v137;
  void *v138;
  void *v139;
  void *v140;
  _QWORD *v141;
  _QWORD *v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  char *v149;
  char *v150;
  void *v151;
  char *v152;
  _QWORD *exception;
  uint64_t v155;
  uint64_t v156;
  void *v157;
  void *v158;
  uint64_t *v159;
  const char *v160;
  int v162;
  char *__s;
  uint64_t v165;
  void *v166;
  char *v167;
  unint64_t v168;
  _QWORD v169[3];
  int v170;
  const char *v171;
  int v172;
  const char *v173;
  uint64_t v174;
  std::__shared_weak_count *v175;
  void *__dst[2];
  int64_t v177;
  void *v178[2];
  __int128 v179;
  _BYTE v180[32];
  uint64_t v181;
  _QWORD v182[2];
  void *v183;
  float v184;
  float v185;
  char v186;
  unint64_t v187;
  int v188;
  uint64_t v189;
  uint64_t v190;
  _BYTE __p[64];
  _QWORD v192[3];
  __int128 v193;
  __int128 v194;
  __int128 v195;
  uint64_t v196;
  __int128 v197;
  uint64_t v198;
  char v199;
  void *v200;
  uint64_t *v201;
  uint64_t v202;
  void *v203;
  _BYTE *v204;
  void *v205;
  _BYTE *v206;
  void *v207;
  void *v208;
  uint64_t v209;
  __int128 v210;
  std::__shared_weak_count *v211;
  char *v212;
  std::__shared_weak_count *v213;
  _QWORD *v214;
  __int128 v215;
  void **v216;
  std::__shared_weak_count *v217;
  _BYTE v218[24];
  __int128 v219;
  void *v220[2];
  unint64_t v221;
  char v222;
  _QWORD v223[5];

  v223[2] = *MEMORY[0x24BDAC8D0];
  v5 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)*a3 + 16) - *(_QWORD *)(*(_QWORD *)*a3 + 8)) >> 3);
  v166 = 0;
  v167 = 0;
  v168 = 0;
  sub_20EA74E34((uint64_t)&v166, v5);
  v6 = *a3;
  v165 = a3[1];
  if (*a3 != v165)
  {
    do
    {
      v7 = *(_QWORD *)(*(_QWORD *)v6 + 8);
      v8 = *(_QWORD *)(*(_QWORD *)v6 + 16);
      if (v7 != v8)
      {
        v9 = v167;
        do
        {
          while ((unint64_t)v9 >= v168)
          {
            v9 = sub_20EE48C78(&v166, *(uint64_t **)v7, *(_QWORD *)(v7 + 8));
            v167 = v9;
            v7 += 120;
            if (v7 == v8)
              goto LABEL_3;
          }
          v10 = (uint64_t *)(v9 + 24);
          *(_QWORD *)v9 = v9 + 24;
          *(_OWORD *)(v9 + 8) = xmmword_2102E0CB0;
          v12 = *(uint64_t **)v7;
          v11 = *(_QWORD *)(v7 + 8);
          if (v11 < 4)
          {
            if (v11)
            {
              v20 = *v12;
              *((_DWORD *)v9 + 8) = *((_DWORD *)v12 + 2);
              *v10 = v20;
              v21 = v12[2];
              *((_DWORD *)v9 + 12) = *((_DWORD *)v12 + 6);
              *((_QWORD *)v9 + 5) = v21;
              if (v11 != 1)
              {
                v22 = v12[4];
                *((_DWORD *)v9 + 16) = *((_DWORD *)v12 + 10);
                *((_QWORD *)v9 + 7) = v22;
                v23 = v12[6];
                *((_DWORD *)v9 + 20) = *((_DWORD *)v12 + 14);
                *((_QWORD *)v9 + 9) = v23;
                if (v11 != 2)
                {
                  v24 = v12[8];
                  *((_DWORD *)v9 + 24) = *((_DWORD *)v12 + 18);
                  *((_QWORD *)v9 + 11) = v24;
                  v25 = v12[10];
                  *((_DWORD *)v9 + 28) = *((_DWORD *)v12 + 22);
                  *((_QWORD *)v9 + 13) = v25;
                }
              }
            }
          }
          else
          {
            if (32 * v11 >= 0x7FFFFFFFFFFFFFE1)
              sub_20E969408((uint64_t)"get_next_capacity, allocator's max size reached");
            v13 = (char *)operator new(32 * v11);
            v14 = *(uint64_t **)v9;
            if (*(_QWORD *)v9)
            {
              *((_QWORD *)v9 + 1) = 0;
              if (v10 != v14)
                operator delete(v14);
            }
            v15 = 0;
            *((_QWORD *)v9 + 1) = 0;
            *((_QWORD *)v9 + 2) = v11;
            *(_QWORD *)v9 = v13;
            do
            {
              v16 = &v12[v15];
              v17 = &v13[v15 * 8];
              v18 = v12[v15];
              *((_DWORD *)v17 + 2) = v12[v15 + 1];
              *(_QWORD *)v17 = v18;
              v19 = v12[v15 + 2];
              *((_DWORD *)v17 + 6) = v12[v15 + 3];
              *((_QWORD *)v17 + 2) = v19;
              v15 += 4;
            }
            while (v16 + 4 != &v12[4 * v11]);
            v11 = (v15 * 8) >> 5;
          }
          *((_QWORD *)v9 + 1) = v11;
          v9 += 120;
          v167 = v9;
          v7 += 120;
        }
        while (v7 != v8);
      }
LABEL_3:
      v6 += 16;
    }
    while (v6 != v165);
  }
  if (!*(_QWORD *)(a1 + 8)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/SlamEngine/src/JasperPlaneDetector.cpp", 94, (uint64_t)"plane_detector_", 15, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_238;
  }
  v26 = *a2;
  if (*a2)
    goto LABEL_27;
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/SlamEngine/src/JasperPlaneDetector.cpp", 95, (uint64_t)"jasper_frame", 12, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_238:
    abort();
  }
  v26 = *a2;
LABEL_27:
  v208 = 0;
  v207 = 0;
  v209 = 0;
  sub_20EA70428(v26 + 1, (uint64_t)&v207, 1u, &v205, *(double *)(a1 + 16), *(double *)(a1 + 24));
  sub_20EA73920(&v166, &v207, &v203, *(double *)(a1 + 16));
  kdebug_trace();
  v27 = *(_QWORD *)(a1 + 8);
  v28 = *((unsigned int *)*a2 + 8);
  v29 = *((unsigned int *)*a2 + 9);
  v30 = *((double *)*a2 + 5);
  v31 = *((double *)*a2 + 9);
  v32 = *((double *)*a2 + 7);
  v33 = *((double *)*a2 + 10);
  *(float *)v218 = v30;
  *(float *)&v218[4] = v31;
  *(float *)&v218[8] = v32;
  *(float *)&v218[12] = v33;
  sub_20EF4A7C0((uint64_t)__p, (uint64_t)v218);
  v178[0] = &off_24C9F15F0;
  v178[1] = &off_24C9F1578;
  v179 = *(_OWORD *)&__p[8];
  *(_OWORD *)v180 = *(_OWORD *)&__p[24];
  *(_OWORD *)&v180[16] = *(_OWORD *)&__p[40];
  v181 = *(_QWORD *)&__p[56];
  LODWORD(v182[0]) = v192[0];
  *(_QWORD *)((char *)v182 + 4) = *(_QWORD *)((char *)v192 + 4);
  v183 = (void *)(v28 | (v29 << 32));
  v184 = (float)v28;
  v185 = (float)v29;
  v34 = (float32x2_t *)v205;
  v35 = v206 - (_BYTE *)v205;
  if (v206 == v205)
  {
    v201 = 0;
    v200 = 0;
    v202 = 0;
    v36 = a2;
  }
  else
  {
    sub_20EF3EBA4((void ***)(0xAAAAAAAAAAAAAAABLL * ((v204 - (_BYTE *)v203) >> 2)), (float32x2_t *)v203, (float32x2_t *)v178, (uint64_t)__p);
    sub_20EF3BDF0(v27, (uint64_t)(*(_QWORD *)&__p[8] - *(_QWORD *)__p) >> 3, *(float32x2_t **)__p, 0xAAAAAAAAAAAAAAABLL * (v35 >> 2), v34, 0, 0, (uint64_t *)&v200);
    v36 = a2;
    if (*(_QWORD *)__p)
    {
      *(_QWORD *)&__p[8] = *(_QWORD *)__p;
      operator delete(*(void **)__p);
    }
  }
  kdebug_trace();
  v37 = *v36;
  v38 = *v37;
  v39 = *((_BYTE *)v37 + 116);
  v40 = (std::__shared_weak_count *)operator new(0xC8uLL);
  v40->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9EDB08;
  v40->__shared_owners_ = 0;
  v40[1].__vftable = 0;
  v40->__shared_weak_owners_ = 0;
  LOBYTE(v40[7].__shared_owners_) = 0;
  v40[1].__shared_owners_ = 0;
  v40[1].__shared_weak_owners_ = 0;
  LOBYTE(v40[2].__vftable) = 0;
  v40[7].__shared_weak_owners_ = v38;
  LOBYTE(v40[8].__vftable) = v39;
  v216 = (void **)&v40[1].__vftable;
  v217 = v40;
  v41 = (uint64_t *)v200;
  v42 = v201;
  if (v200 != v201)
  {
    v157 = *(void **)(MEMORY[0x24BEDB7F0] + 64);
    v158 = (void *)*MEMORY[0x24BEDB7F0];
    v156 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v155 = MEMORY[0x24BEDB848] + 16;
    v159 = v201;
    while (1)
    {
      *(_OWORD *)v178 = xmmword_210382620;
      v179 = xmmword_210382630;
      *(_OWORD *)&v180[8] = xmmword_210382640;
      *(_QWORD *)v180 = 0x3C23D70A3C8EFA35;
      *(_QWORD *)&v180[24] = 0x4120000042340000;
      v181 = 0x3EE4F8B588E368F1;
      sub_20FD881F8(&v205, v41 + 3, (uint64_t)v178, (uint64_t)__p);
      if (v199)
      {
        v43 = v216;
        v44 = (char *)v216[1];
        if (v44 >= v216[2])
        {
          v50 = sub_20EE48A04(v216, (uint64_t)__p);
        }
        else
        {
          v45 = *(_OWORD *)&__p[16];
          *(_OWORD *)v44 = *(_OWORD *)__p;
          *((_OWORD *)v44 + 1) = v45;
          *((_OWORD *)v44 + 2) = *(_OWORD *)&__p[32];
          *((_QWORD *)v44 + 7) = 0;
          *((_QWORD *)v44 + 8) = 0;
          *((_QWORD *)v44 + 6) = 0;
          *((_OWORD *)v44 + 3) = *(_OWORD *)&__p[48];
          *((_QWORD *)v44 + 8) = v192[0];
          *(_QWORD *)&__p[48] = 0;
          *(_QWORD *)&__p[56] = 0;
          v192[0] = 0;
          *(_OWORD *)(v44 + 72) = *(_OWORD *)&v192[1];
          v46 = v193;
          v47 = v194;
          v48 = v195;
          *((_QWORD *)v44 + 17) = v196;
          *(_OWORD *)(v44 + 120) = v48;
          *(_OWORD *)(v44 + 104) = v47;
          *(_OWORD *)(v44 + 88) = v46;
          v49 = v197;
          *((_QWORD *)v44 + 20) = v198;
          *((_OWORD *)v44 + 9) = v49;
          v50 = v44 + 168;
        }
        v43[1] = v50;
LABEL_50:
        if (v199)
          goto LABEL_51;
        goto LABEL_33;
      }
      v51 = atomic_load((unsigned __int8 *)&qword_254A5FA18);
      if ((v51 & 1) == 0 && __cxa_guard_acquire(&qword_254A5FA18))
      {
        sub_21021D3D8(v218);
        sub_20E8610C0(v178, "cv3d.vio.slam_engine");
        sub_20E8C4068((uint64_t **)v218, (uint64_t)v178, &qword_254A5FA10);
        if (SBYTE7(v179) < 0)
          operator delete(v178[0]);
        __cxa_guard_release(&qword_254A5FA18);
        v42 = v159;
      }
      v190 = qword_254A5FA10;
      if (**(int **)(qword_254A5FA10 + 56) > 3)
        goto LABEL_50;
      v52 = *(unsigned __int8 *)(qword_254A5FA10 + 72);
      v53 = sub_20E8C31DC(qword_254A5FA10, "OSLogSurrogateAppender", 1, 0);
      v54 = v53;
      if (!v52 && v53 == 0)
        goto LABEL_50;
      sub_20E863438((uint64_t)v178);
      if (v199)
      {
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24C9B4620;
        __cxa_throw(exception, (struct type_info *)&unk_24C9AD070, (void (*)(void *))std::exception::~exception);
      }
      v56 = (const char *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)__p + 16))(__p);
      v57 = strlen(v56);
      sub_20E86A980(&v179, (uint64_t)v56, v57);
      v162 = v52;
      if ((v188 & 0x10) != 0)
      {
        v60 = v187;
        v61 = (const void **)&v181;
        if (v187 < v182[0])
        {
          v187 = v182[0];
          v60 = v182[0];
          v61 = (const void **)&v181;
        }
      }
      else
      {
        if ((v188 & 8) == 0)
        {
          v58 = 0;
          HIBYTE(v177) = 0;
          v59 = __dst;
          goto LABEL_64;
        }
        v60 = *(_QWORD *)&v180[24];
        v61 = (const void **)&v180[8];
      }
      v62 = *v61;
      v58 = v60 - (_QWORD)*v61;
      if (v58 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v58 >= 0x17)
        break;
      HIBYTE(v177) = v60 - *(_BYTE *)v61;
      v59 = __dst;
      if (v58)
        goto LABEL_63;
LABEL_64:
      *((_BYTE *)v59 + v58) = 0;
      v169[0] = &v190;
      v169[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v169[2] = std::chrono::system_clock::now().__d_.__rep_;
      v170 = 3;
      v171 = "unknown file";
      v172 = 124;
      v173 = "unknown function";
      v174 = 0;
      v175 = 0;
      v65 = __dst;
      if (v177 < 0)
        v65 = (void **)__dst[0];
      __s = (char *)v65;
      v66 = *(_QWORD *)v169[0];
      v67 = (const char *)(*(_QWORD *)v169[0] + 16);
      v160 = v67;
      if (*(char *)(*(_QWORD *)v169[0] + 39) < 0)
      {
        v67 = *(const char **)(v66 + 16);
        v68 = *(_QWORD *)(v66 + 24);
        v70 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v70 & 1) != 0)
          goto LABEL_70;
      }
      else
      {
        v68 = *(unsigned __int8 *)(*(_QWORD *)v169[0] + 39);
        v69 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v69 & 1) != 0)
          goto LABEL_70;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)&v210);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v210);
        if ((_BYTE)v212 && SHIBYTE(v211) < 0)
          operator delete((void *)v210);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
LABEL_70:
      if (byte_254A4A4F8[23] >= 0)
        v71 = byte_254A4A4F8;
      else
        v71 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v72 = byte_254A4A4F8[23];
      else
        v72 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)v218 = os_log_create(v71, v67);
      if (v72 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v72 >= 0x17)
      {
        v74 = (v72 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v72 | 7) != 0x17)
          v74 = v72 | 7;
        v75 = v74 + 1;
        v73 = operator new(v74 + 1);
        *(_QWORD *)&v218[16] = v72;
        *(_QWORD *)&v219 = v75 | 0x8000000000000000;
        *(_QWORD *)&v218[8] = v73;
LABEL_83:
        memmove(v73, v71, v72);
        goto LABEL_84;
      }
      BYTE7(v219) = v72;
      v73 = &v218[8];
      if (v72)
        goto LABEL_83;
LABEL_84:
      v73[v72] = 0;
      BYTE8(v219) = 1;
      if (v68 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v68 >= 0x17)
      {
        v78 = (v68 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v68 | 7) != 0x17)
          v78 = v68 | 7;
        v79 = v78 + 1;
        v76 = (void **)operator new(v78 + 1);
        v220[1] = (void *)v68;
        v221 = v79 | 0x8000000000000000;
        v220[0] = v76;
      }
      else
      {
        HIBYTE(v221) = v68;
        v76 = v220;
        if (!v68)
        {
          LOBYTE(v220[0]) = 0;
          v222 = 1;
          v77 = *(NSObject **)v218;
          if ((SHIBYTE(v221) & 0x80000000) == 0)
            goto LABEL_88;
          goto LABEL_94;
        }
      }
      memmove(v76, v67, v68);
      *((_BYTE *)v76 + v68) = 0;
      v222 = 1;
      v77 = *(NSObject **)v218;
      if ((SHIBYTE(v221) & 0x80000000) == 0)
      {
LABEL_88:
        if (!BYTE8(v219))
          goto LABEL_97;
        goto LABEL_95;
      }
LABEL_94:
      operator delete(v220[0]);
      if (!BYTE8(v219))
        goto LABEL_97;
LABEL_95:
      if (SBYTE7(v219) < 0)
        operator delete(*(void **)&v218[8]);
LABEL_97:
      if (*(_QWORD *)v218)
        os_release(*(void **)v218);
      if (!v54 || !*(_QWORD *)(v54 + 24))
      {
        os_log_type_enabled(v77, OS_LOG_TYPE_INFO);
        *(_DWORD *)v218 = 136315138;
        *(_QWORD *)&v218[4] = __s;
        v86 = (void *)_os_log_send_and_compose_impl();
        v42 = v159;
        if (!v86)
          goto LABEL_169;
        free(v86);
        if (!v162)
          goto LABEL_173;
        goto LABEL_170;
      }
      v80 = _os_log_pack_size();
      v81 = (std::__shared_weak_count_vtbl *)operator new(v80, (std::align_val_t)8uLL);
      v82 = (std::__shared_weak_count *)operator new();
      v82->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
      v82->__shared_owners_ = 0;
      v82->__shared_weak_owners_ = 0;
      v82[1].__vftable = v81;
      *(_QWORD *)&v210 = v81;
      *((_QWORD *)&v210 + 1) = v81;
      v211 = v82;
      v212 = 0;
      v213 = 0;
      v83 = strlen(__s);
      if (v83 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      v84 = v83;
      if (v83 >= 0x17)
      {
        v87 = (v83 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v83 | 7) != 0x17)
          v87 = v83 | 7;
        v88 = v87 + 1;
        v85 = operator new(v87 + 1);
        *(_QWORD *)&v215 = v84;
        *((_QWORD *)&v215 + 1) = v88 | 0x8000000000000000;
        v214 = v85;
LABEL_111:
        memcpy(v85, __s, v84);
        goto LABEL_112;
      }
      HIBYTE(v215) = v83;
      v85 = &v214;
      if (v83)
        goto LABEL_111;
LABEL_112:
      *((_BYTE *)v85 + v84) = 0;
      v89 = v214;
      v223[0] = v215;
      *(_QWORD *)((char *)v223 + 7) = *(_QWORD *)((char *)&v215 + 7);
      v90 = HIBYTE(v215);
      v91 = operator new(0x38uLL);
      v91[1] = 0;
      v91[2] = 0;
      v91[3] = off_24C9ABC20;
      *v91 = &off_24C9ABBD0;
      v92 = v223[0];
      v91[4] = v89;
      v91[5] = v92;
      *(_QWORD *)((char *)v91 + 47) = *(_QWORD *)((char *)v223 + 7);
      *((_BYTE *)v91 + 55) = v90;
      v223[0] = 0;
      *(_QWORD *)((char *)v223 + 7) = 0;
      v93 = v213;
      v212 = (char *)(v91 + 3);
      v213 = (std::__shared_weak_count *)v91;
      if (v93)
      {
        p_shared_owners = (unint64_t *)&v93->__shared_owners_;
        do
          v95 = __ldaxr(p_shared_owners);
        while (__stlxr(v95 - 1, p_shared_owners));
        if (!v95)
        {
          ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
          std::__shared_weak_count::__release_weak(v93);
        }
      }
      *(_OWORD *)v218 = v210;
      v96 = v212;
      *(_QWORD *)&v218[16] = v211;
      if (v211)
      {
        v97 = (unint64_t *)&v211->__shared_owners_;
        do
          v98 = __ldxr(v97);
        while (__stxr(v98 + 1, v97));
      }
      v99 = v213;
      *(_QWORD *)&v219 = v96;
      *((_QWORD *)&v219 + 1) = v213;
      if (v213)
      {
        v100 = (unint64_t *)&v213->__shared_owners_;
        do
          v101 = __ldxr(v100);
        while (__stxr(v101 + 1, v100));
        v220[0] = v96;
        do
          v102 = __ldaxr(v100);
        while (__stlxr(v102 - 1, v100));
        if (!v102)
        {
          ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
          std::__shared_weak_count::__release_weak(v99);
        }
      }
      else
      {
        v220[0] = v96;
      }
      v103 = v211;
      if (v211)
      {
        v104 = (unint64_t *)&v211->__shared_owners_;
        do
          v105 = __ldaxr(v104);
        while (__stlxr(v105 - 1, v104));
        if (!v105)
        {
          ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
          std::__shared_weak_count::__release_weak(v103);
        }
      }
      v106 = *(_QWORD *)v218;
      if (*((char *)v220[0] + 31) >= 0)
        v107 = (char *)v220[0] + 8;
      else
        v107 = (char *)*((_QWORD *)v220[0] + 1);
      v108 = _os_log_pack_fill();
      *(_DWORD *)v108 = 136315138;
      *(_QWORD *)(v108 + 4) = v107;
      v109 = operator new();
      v110 = *(unsigned __int8 *)(v66 + 39);
      v111 = v160;
      if ((v110 & 0x80u) != 0)
      {
        v111 = *(const char **)(v66 + 16);
        v110 = *(_QWORD *)(v66 + 24);
      }
      *(_QWORD *)v109 = v106;
      *(_OWORD *)(v109 + 8) = *(_OWORD *)&v218[8];
      *(_QWORD *)&v218[8] = 0;
      *(_QWORD *)&v218[16] = 0;
      *(_OWORD *)(v109 + 24) = v219;
      v219 = 0uLL;
      *(_QWORD *)(v109 + 40) = v111;
      *(_QWORD *)(v109 + 48) = v110;
      *(_BYTE *)(v109 + 56) = 1;
      v214 = 0;
      *(_QWORD *)&v210 = v109;
      (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v54 + 24) + 40))(*(_QWORD *)(v54 + 24), &v210);
      v42 = v159;
      v112 = v210;
      *(_QWORD *)&v210 = 0;
      if (v112)
      {
        v113 = *(std::__shared_weak_count **)(v112 + 32);
        if (v113)
        {
          v114 = (unint64_t *)&v113->__shared_owners_;
          do
            v115 = __ldaxr(v114);
          while (__stlxr(v115 - 1, v114));
          if (!v115)
          {
            ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
            std::__shared_weak_count::__release_weak(v113);
          }
        }
        v116 = *(std::__shared_weak_count **)(v112 + 16);
        if (v116)
        {
          v117 = (unint64_t *)&v116->__shared_owners_;
          do
            v118 = __ldaxr(v117);
          while (__stlxr(v118 - 1, v117));
          if (!v118)
          {
            ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
            std::__shared_weak_count::__release_weak(v116);
          }
        }
        MEMORY[0x212BC6398](v112, 0x10F0C40B62ED6C6);
        v119 = v214;
        v214 = 0;
        if (v119)
        {
          v120 = (std::__shared_weak_count *)v119[4];
          if (v120)
          {
            v121 = (unint64_t *)&v120->__shared_owners_;
            do
              v122 = __ldaxr(v121);
            while (__stlxr(v122 - 1, v121));
            if (!v122)
            {
              ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
              std::__shared_weak_count::__release_weak(v120);
            }
          }
          v123 = (std::__shared_weak_count *)v119[2];
          if (v123)
          {
            v124 = (unint64_t *)&v123->__shared_owners_;
            do
              v125 = __ldaxr(v124);
            while (__stlxr(v125 - 1, v124));
            if (!v125)
            {
              ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
              std::__shared_weak_count::__release_weak(v123);
            }
          }
          MEMORY[0x212BC6398](v119, 0x10F0C40B62ED6C6);
        }
      }
      v126 = (std::__shared_weak_count *)*((_QWORD *)&v219 + 1);
      if (!*((_QWORD *)&v219 + 1))
        goto LABEL_165;
      v127 = (unint64_t *)(*((_QWORD *)&v219 + 1) + 8);
      do
        v128 = __ldaxr(v127);
      while (__stlxr(v128 - 1, v127));
      if (!v128)
      {
        ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
        std::__shared_weak_count::__release_weak(v126);
        v129 = *(std::__shared_weak_count **)&v218[16];
        if (!*(_QWORD *)&v218[16])
          goto LABEL_169;
      }
      else
      {
LABEL_165:
        v129 = *(std::__shared_weak_count **)&v218[16];
        if (!*(_QWORD *)&v218[16])
          goto LABEL_169;
      }
      v130 = (unint64_t *)&v129->__shared_owners_;
      do
        v131 = __ldaxr(v130);
      while (__stlxr(v131 - 1, v130));
      if (v131)
      {
LABEL_169:
        if (!v162)
          goto LABEL_173;
        goto LABEL_170;
      }
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
      if (!v162)
        goto LABEL_173;
LABEL_170:
      v132 = (const char *)__dst;
      if (v177 < 0)
        v132 = (const char *)__dst[0];
      sub_20E8C003C((uint64_t)v169, "%s", v132);
      sub_20E863570((uint64_t)v169);
LABEL_173:
      sub_20E863570((uint64_t)v169);
      v133 = v175;
      if (!v175)
        goto LABEL_177;
      v134 = (unint64_t *)&v175->__shared_owners_;
      do
        v135 = __ldaxr(v134);
      while (__stlxr(v135 - 1, v134));
      if (v135)
      {
LABEL_177:
        if ((SHIBYTE(v177) & 0x80000000) == 0)
          goto LABEL_179;
LABEL_178:
        operator delete(__dst[0]);
        goto LABEL_179;
      }
      ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
      std::__shared_weak_count::__release_weak(v133);
      if (SHIBYTE(v177) < 0)
        goto LABEL_178;
LABEL_179:
      v178[0] = v158;
      *(void **)((char *)v178 + *((_QWORD *)v158 - 3)) = v157;
      *(_QWORD *)&v179 = v156;
      *((_QWORD *)&v179 + 1) = v155;
      if (v186 < 0)
        operator delete(v183);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x212BC6290](&v189);
      if (v199)
      {
LABEL_51:
        if (*(_QWORD *)&__p[48])
        {
          *(_QWORD *)&__p[56] = *(_QWORD *)&__p[48];
          operator delete(*(void **)&__p[48]);
        }
        goto LABEL_34;
      }
LABEL_33:
      (**(void (***)(_BYTE *))__p)(__p);
LABEL_34:
      v41 += 11;
      if (v41 == v42)
        goto LABEL_198;
    }
    v63 = (v58 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v58 | 7) != 0x17)
      v63 = v58 | 7;
    v64 = v63 + 1;
    v59 = (void **)operator new(v63 + 1);
    __dst[1] = (void *)v58;
    v177 = v64 | 0x8000000000000000;
    __dst[0] = v59;
LABEL_63:
    memmove(v59, v62, v58);
    goto LABEL_64;
  }
LABEL_198:
  kdebug_trace();
  v136 = (uint64_t *)v200;
  if (v200)
  {
    v137 = (char *)v201;
    v138 = v200;
    if (v201 != v200)
    {
      do
      {
        v139 = (void *)*((_QWORD *)v137 - 4);
        if (v139)
        {
          *((_QWORD *)v137 - 3) = v139;
          operator delete(v139);
        }
        v140 = (void *)*((_QWORD *)v137 - 8);
        if (v140)
        {
          *((_QWORD *)v137 - 7) = v140;
          operator delete(v140);
        }
        v137 -= 88;
      }
      while (v137 != (char *)v136);
      v138 = v200;
    }
    v201 = v136;
    operator delete(v138);
  }
  if (v203)
  {
    v204 = v203;
    operator delete(v203);
  }
  if (v205)
  {
    v206 = v205;
    operator delete(v205);
  }
  if (v207)
  {
    v208 = v207;
    operator delete(v207);
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v141 = operator new(0x10uLL);
  *a4 = v141;
  a4[1] = v141;
  v142 = v141 + 2;
  a4[2] = v141 + 2;
  v143 = v217;
  *v141 = v216;
  v141[1] = v143;
  if (v143)
  {
    v144 = (unint64_t *)&v143->__shared_owners_;
    do
      v145 = __ldxr(v144);
    while (__stxr(v145 + 1, v144));
    v146 = v217;
    a4[1] = v142;
    if (v146)
    {
      v147 = (unint64_t *)&v146->__shared_owners_;
      do
        v148 = __ldaxr(v147);
      while (__stlxr(v148 - 1, v147));
      if (!v148)
      {
        ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
        std::__shared_weak_count::__release_weak(v146);
      }
    }
  }
  else
  {
    a4[1] = v142;
  }
  v149 = (char *)v166;
  if (v166)
  {
    v150 = v167;
    v151 = v166;
    if (v167 != v166)
    {
      do
      {
        if (*((_QWORD *)v150 - 13))
        {
          v152 = (char *)*((_QWORD *)v150 - 15);
          if (v150 - 96 != v152)
            operator delete(v152);
        }
        v150 -= 120;
      }
      while (v150 != v149);
      v151 = v166;
    }
    v167 = v149;
    operator delete(v151);
  }
}

void sub_20EE48738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  void *a64;
  uint64_t v64;
  void *v66;
  void *v67;
  void *v68;

  if (LOBYTE(STACK[0x3E8]) && SLOBYTE(STACK[0x3E7]) < 0)
    operator delete((void *)STACK[0x3D0]);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a49);
  if (a63 < 0)
    operator delete(a58);
  sub_20E863784((uint64_t)&a64);
  sub_20EE4551C((uint64_t)&STACK[0x2C0]);
  sub_20E86665C(v64 - 224);
  sub_20EE45574((void **)&STACK[0x370]);
  v68 = (void *)STACK[0x388];
  if (STACK[0x388])
  {
    STACK[0x390] = (unint64_t)v68;
    operator delete(v68);
    v66 = (void *)STACK[0x3A0];
    if (STACK[0x3A0])
    {
LABEL_12:
      STACK[0x3A8] = (unint64_t)v66;
      operator delete(v66);
      v67 = (void *)STACK[0x3B8];
      if (!STACK[0x3B8])
        goto LABEL_14;
      goto LABEL_13;
    }
  }
  else
  {
    v66 = (void *)STACK[0x3A0];
    if (STACK[0x3A0])
      goto LABEL_12;
  }
  v67 = (void *)STACK[0x3B8];
  if (!STACK[0x3B8])
  {
LABEL_14:
    sub_20EAAB76C(&a46);
    _Unwind_Resume(a1);
  }
LABEL_13:
  STACK[0x3C0] = (unint64_t)v67;
  operator delete(v67);
  goto LABEL_14;
}

char *sub_20EE48A04(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  __int128 v8;
  char *v9;
  char *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  char *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  char *v28;
  void *v29;

  v3 = 0xCF3CF3CF3CF3CF3DLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x186186186186186)
    sub_20E867F44();
  if (0x9E79E79E79E79E7ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x9E79E79E79E79E7ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xCF3CF3CF3CF3CF3DLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0xC30C30C30C30C3)
    v6 = 0x186186186186186;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x186186186186186)
      sub_20E877A38();
    v7 = (char *)operator new(168 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = *(_OWORD *)(a2 + 16);
  v9 = &v7[168 * v3];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v8;
  v10 = &v7[168 * v6];
  v11 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v9 + 3) = v11;
  *((_QWORD *)v9 + 8) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_OWORD *)(v9 + 72) = *(_OWORD *)(a2 + 72);
  v12 = *(_OWORD *)(a2 + 88);
  v13 = *(_OWORD *)(a2 + 104);
  v14 = *(_OWORD *)(a2 + 120);
  *((_QWORD *)v9 + 17) = *(_QWORD *)(a2 + 136);
  *(_OWORD *)(v9 + 120) = v14;
  *(_OWORD *)(v9 + 104) = v13;
  *(_OWORD *)(v9 + 88) = v12;
  v15 = *(_OWORD *)(a2 + 144);
  *((_QWORD *)v9 + 20) = *(_QWORD *)(a2 + 160);
  *((_OWORD *)v9 + 9) = v15;
  v16 = v9 + 168;
  v17 = (char *)*a1;
  v18 = (char *)a1[1];
  if (v18 == *a1)
  {
    *a1 = v9;
    a1[1] = v16;
    a1[2] = v10;
  }
  else
  {
    v19 = 0;
    do
    {
      v20 = &v18[v19];
      v21 = *(_OWORD *)&v18[v19 - 168];
      v22 = &v9[v19];
      *(_OWORD *)(v22 - 152) = *(_OWORD *)&v18[v19 - 152];
      *(_OWORD *)(v22 - 168) = v21;
      v23 = *(_OWORD *)&v18[v19 - 136];
      *((_QWORD *)v22 - 14) = 0;
      *((_QWORD *)v22 - 13) = 0;
      *(_OWORD *)(v22 - 136) = v23;
      *(_OWORD *)(v22 - 120) = *(_OWORD *)&v18[v19 - 120];
      *((_QWORD *)v22 - 13) = *(_QWORD *)&v18[v19 - 104];
      *((_QWORD *)v20 - 14) = 0;
      *((_QWORD *)v20 - 13) = 0;
      *((_QWORD *)v20 - 15) = 0;
      v25 = *(_OWORD *)&v18[v19 - 64];
      v24 = *(_OWORD *)&v18[v19 - 48];
      v26 = *(_OWORD *)&v18[v19 - 80];
      *((_QWORD *)v22 - 4) = *(_QWORD *)&v18[v19 - 32];
      *((_OWORD *)v22 - 4) = v25;
      *((_OWORD *)v22 - 3) = v24;
      *((_OWORD *)v22 - 5) = v26;
      *((_OWORD *)v22 - 6) = *(_OWORD *)&v18[v19 - 96];
      v27 = *(_OWORD *)&v18[v19 - 24];
      *((_QWORD *)v22 - 1) = *(_QWORD *)&v18[v19 - 8];
      *(_OWORD *)(v22 - 24) = v27;
      v19 -= 168;
    }
    while (&v18[v19] != v17);
    v18 = (char *)*a1;
    v28 = (char *)a1[1];
    *a1 = &v9[v19];
    a1[1] = v16;
    a1[2] = v10;
    while (v28 != v18)
    {
      v29 = (void *)*((_QWORD *)v28 - 15);
      if (v29)
      {
        *((_QWORD *)v28 - 14) = v29;
        operator delete(v29);
      }
      v28 -= 168;
    }
  }
  if (v18)
    operator delete(v18);
  return v16;
}

uint64_t sub_20EE48C08(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  void *v6;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v5 = v2 - 120;
      *(_QWORD *)(a1 + 16) = v2 - 120;
      if (*(_QWORD *)(v2 - 104))
      {
        v6 = *(void **)(v2 - 120);
        if ((void *)(v2 - 96) != v6)
        {
          operator delete(v6);
          v5 = *(_QWORD *)(a1 + 16);
        }
      }
      v2 = v5;
    }
    while (v5 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

char *sub_20EE48C78(void **a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  __int128 v15;
  uint64_t **v16;
  char *v17;
  uint64_t *v18;
  char *v19;
  char *v20;
  BOOL v21;
  char *v23;
  char *v24;
  char *v25;
  uint64_t *v26;
  uint64_t *v27;

  v4 = 0xEEEEEEEEEEEEEEEFLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x222222222222222)
    sub_20E969238();
  if (0xDDDDDDDDDDDDDDDELL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v5)
    v5 = 0xDDDDDDDDDDDDDDDELL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xEEEEEEEEEEEEEEEFLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x111111111111111)
    v8 = 0x222222222222222;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 > 0x222222222222222)
      sub_20E877A38();
    v9 = (char *)operator new(120 * v8);
  }
  else
  {
    v9 = 0;
  }
  v23 = &v9[120 * v4];
  v25 = &v9[120 * v8];
  *(_QWORD *)v23 = v23 + 24;
  *(_OWORD *)(v23 + 8) = xmmword_2102E0CB0;
  v27 = a2;
  v26 = &a2[4 * a3];
  sub_20E96924C(v23, &v27, &v26);
  v10 = v23;
  v11 = v23 + 120;
  v24 = v23 + 120;
  v13 = (char *)*a1;
  v12 = (char *)a1[1];
  if (v12 == *a1)
  {
    v19 = (char *)a1[1];
  }
  else
  {
    v14 = 0;
    v15 = xmmword_2102E0CB0;
    do
    {
      while (1)
      {
        *(_QWORD *)&v10[v14 - 120] = &v10[v14 - 96];
        v16 = (uint64_t **)&v10[v14 - 120];
        v17 = &v12[v14];
        v18 = *(uint64_t **)&v12[v14 - 120];
        *(_OWORD *)&v10[v14 - 112] = v15;
        if (&v12[v14 - 96] == (char *)v18)
          break;
        *v16 = v18;
        *(_OWORD *)&v10[v14 - 112] = *((_OWORD *)v17 - 7);
        *(_QWORD *)&v12[v14 - 120] = 0;
        *(_QWORD *)&v12[v14 - 112] = 0;
        *(_QWORD *)&v12[v14 - 104] = 0;
        v14 -= 120;
        if (&v12[v14] == v13)
          goto LABEL_16;
      }
      sub_20EA74FD0(v16, v18, &v18[4 * *((_QWORD *)v17 - 14)]);
      *((_QWORD *)v17 - 14) = 0;
      v15 = xmmword_2102E0CB0;
      v14 -= 120;
    }
    while (&v12[v14] != v13);
LABEL_16:
    v19 = (char *)*a1;
    v12 = (char *)a1[1];
    v10 += v14;
    v11 = v24;
  }
  *a1 = v10;
  a1[1] = v11;
  a1[2] = v25;
  if (v12 != v19)
  {
    v20 = v12 - 120;
    do
    {
      if (*((_QWORD *)v20 + 2) && v20 + 24 != *(char **)v20)
        operator delete(*(void **)v20);
      v21 = v20 == v19;
      v20 -= 120;
    }
    while (!v21);
    v12 = v19;
  }
  if (v12)
    operator delete(v12);
  return v11;
}

void sub_20EE48EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v5;
  va_list va;

  va_start(va, a4);
  if (*(_QWORD *)(v4 + 16))
  {
    if (v5 != *(_QWORD *)v4)
      operator delete(*(void **)v4);
  }
  sub_20EE48C08((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EE48EDC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9EDB08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EE48EEC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9EDB08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EE48F1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(a1 + 24);
    if (v3 == v1)
    {
      *(_QWORD *)(a1 + 32) = v1;
      operator delete(v4);
    }
    else
    {
      do
      {
        v5 = *(void **)(v3 - 120);
        if (v5)
        {
          *(_QWORD *)(v3 - 112) = v5;
          operator delete(v5);
        }
        v3 -= 168;
      }
      while (v3 != v1);
      v6 = *(void **)(a1 + 24);
      *(_QWORD *)(a1 + 32) = v1;
      operator delete(v6);
    }
  }
}

_QWORD *sub_20EE48FA8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  void **v11;
  void **v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  void **v23;
  void **v24;
  void *v25;
  void **v26;
  void *v27;
  char *v28;
  char *v29;
  char *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void **v44;
  void *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  *a1 = &off_24C9EDB58;
  v2 = a1[1485];
  if (v2)
  {
    v3 = a1[1486];
    v4 = (void *)a1[1485];
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)a1[1485];
    }
    a1[1486] = v2;
    operator delete(v4);
  }
  v8 = (std::__shared_weak_count *)a1[1484];
  if (!v8)
    goto LABEL_16;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (void **)a1[1480];
    if (!v11)
      goto LABEL_25;
  }
  else
  {
LABEL_16:
    v11 = (void **)a1[1480];
    if (!v11)
      goto LABEL_25;
  }
  v12 = (void **)a1[1481];
  v13 = v11;
  if (v12 != v11)
  {
    do
    {
      if (*((_BYTE *)v12 - 8) && *((char *)v12 - 9) < 0)
        operator delete(*(v12 - 4));
      v12 -= 6;
    }
    while (v12 != v11);
    v13 = (void **)a1[1480];
  }
  a1[1481] = v11;
  operator delete(v13);
LABEL_25:
  v14 = a1[1477];
  if (v14)
  {
    v15 = a1[1478];
    v16 = (void *)a1[1477];
    if (v15 != v14)
    {
      do
      {
        if (*(_BYTE *)(v15 - 8) && *(char *)(v15 - 9) < 0)
          operator delete(*(void **)(v15 - 32));
        v15 -= 416;
      }
      while (v15 != v14);
      v16 = (void *)a1[1477];
    }
    a1[1478] = v14;
    operator delete(v16);
  }
  v17 = a1[1470];
  if (v17)
  {
    v18 = a1[1471];
    v19 = (void *)a1[1470];
    if (v18 != v17)
    {
      do
      {
        v20 = *(std::__shared_weak_count **)(v18 - 8);
        if (v20)
        {
          v21 = (unint64_t *)&v20->__shared_owners_;
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        v18 -= 16;
      }
      while (v18 != v17);
      v19 = (void *)a1[1470];
    }
    a1[1471] = v17;
    operator delete(v19);
  }
  v23 = (void **)a1[1464];
  if (v23)
  {
    v24 = (void **)a1[1465];
    v25 = (void *)a1[1464];
    if (v24 != v23)
    {
      v26 = (void **)a1[1465];
      do
      {
        v29 = (char *)*(v26 - 3);
        v26 -= 3;
        v28 = v29;
        if (v29)
        {
          v30 = (char *)*(v24 - 2);
          v27 = v28;
          if (v30 != v28)
          {
            do
            {
              v31 = (std::__shared_weak_count *)*((_QWORD *)v30 - 1);
              if (v31)
              {
                v32 = (unint64_t *)&v31->__shared_owners_;
                do
                  v33 = __ldaxr(v32);
                while (__stlxr(v33 - 1, v32));
                if (!v33)
                {
                  ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
                  std::__shared_weak_count::__release_weak(v31);
                }
              }
              v30 -= 16;
            }
            while (v30 != v28);
            v27 = *v26;
          }
          *(v24 - 2) = v28;
          operator delete(v27);
        }
        v24 = v26;
      }
      while (v26 != v23);
      v25 = (void *)a1[1464];
    }
    a1[1465] = v23;
    operator delete(v25);
  }
  sub_20EE68614((uint64_t)(a1 + 1458));
  sub_20EE684A0((uint64_t)(a1 + 1452));
  sub_20EE683DC((uint64_t)(a1 + 1446));
  v34 = (_QWORD *)a1[1445];
  if (v34 == a1 + 1442)
  {
    v35 = 4;
    v34 = a1 + 1442;
    goto LABEL_66;
  }
  if (v34)
  {
    v35 = 5;
LABEL_66:
    (*(void (**)(void))(*v34 + 8 * v35))();
  }
  v36 = (std::__shared_weak_count *)a1[1440];
  if (!v36)
    goto LABEL_71;
  v37 = (unint64_t *)&v36->__shared_owners_;
  do
    v38 = __ldaxr(v37);
  while (__stlxr(v38 - 1, v37));
  if (!v38)
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
    v39 = (std::__shared_weak_count *)a1[1438];
    if (!v39)
      goto LABEL_79;
  }
  else
  {
LABEL_71:
    v39 = (std::__shared_weak_count *)a1[1438];
    if (!v39)
      goto LABEL_79;
  }
  v40 = (unint64_t *)&v39->__shared_owners_;
  do
    v41 = __ldaxr(v40);
  while (__stlxr(v41 - 1, v40));
  if (!v41)
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
  }
LABEL_79:
  v42 = a1[1436];
  a1[1436] = 0;
  if (v42)
  {
    v43 = sub_20EE5EF74(v42);
    MEMORY[0x212BC6398](v43, 0x10A0C40C265FF81);
  }
  v44 = (void **)a1[1435];
  a1[1435] = 0;
  if (v44)
  {
    v45 = *v44;
    if (*v44)
    {
      v46 = (uint64_t)v44[1];
      v47 = *v44;
      if ((void *)v46 != v45)
      {
        do
        {
          v46 -= 240;
          sub_20E990F68(v46);
        }
        while ((void *)v46 != v45);
        v47 = *v44;
      }
      v44[1] = v45;
      operator delete(v47);
    }
    MEMORY[0x212BC6398](v44, 0x20C40960023A9);
  }
  v48 = a1[1434];
  a1[1434] = 0;
  if (v48)
  {
    v49 = sub_20F2E3924(v48);
    MEMORY[0x212BC6398](v49, 0x10B2C40892BB94DLL);
  }
  v50 = a1[1433];
  a1[1433] = 0;
  if (v50)
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  v51 = a1[1432];
  a1[1432] = 0;
  if (v51)
  {
    v52 = *(_QWORD *)(v51 + 8);
    *(_QWORD *)(v51 + 8) = 0;
    if (v52)
      MEMORY[0x212BC6398](v52, 0x1000C400587ADDDLL);
    MEMORY[0x212BC6398](v51, 0x1020C4035206DBCLL);
  }
  sub_20E869418((uint64_t)(a1 + 4));
  v53 = a1[2];
  a1[2] = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  v54 = a1[1];
  a1[1] = 0;
  if (v54)
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
  return a1;
}

void ***sub_20EE49464(void ***a1)
{
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void *v6;
  char *v7;
  char *v8;
  char *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = a1[1];
      do
      {
        v8 = (char *)*(v5 - 3);
        v5 -= 3;
        v7 = v8;
        if (v8)
        {
          v9 = (char *)*(v3 - 2);
          v6 = v7;
          if (v9 != v7)
          {
            do
            {
              v10 = (std::__shared_weak_count *)*((_QWORD *)v9 - 1);
              if (v10)
              {
                p_shared_owners = (unint64_t *)&v10->__shared_owners_;
                do
                  v12 = __ldaxr(p_shared_owners);
                while (__stlxr(v12 - 1, p_shared_owners));
                if (!v12)
                {
                  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
                  std::__shared_weak_count::__release_weak(v10);
                }
              }
              v9 -= 16;
            }
            while (v9 != v7);
            v6 = *v5;
          }
          *(v3 - 2) = v7;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t *sub_20EE49544(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_20EE5EF74(v2);
    MEMORY[0x212BC6398](v3, 0x10A0C40C265FF81);
  }
  return a1;
}

void ***sub_20EE49588(void ***a1)
{
  void **v2;
  void *v3;
  uint64_t v4;
  void *v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *v2;
    if (*v2)
    {
      v4 = (uint64_t)v2[1];
      v5 = *v2;
      if ((void *)v4 != v3)
      {
        do
        {
          v4 -= 240;
          sub_20E990F68(v4);
        }
        while ((void *)v4 != v3);
        v5 = *v2;
      }
      v2[1] = v3;
      operator delete(v5);
    }
    MEMORY[0x212BC6398](v2, 0x20C40960023A9);
  }
  return a1;
}

uint64_t *sub_20EE4960C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_20F2E3924(v2);
    MEMORY[0x212BC6398](v3, 0x10B2C40892BB94DLL);
  }
  return a1;
}

uint64_t *sub_20EE49650(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    *(_QWORD *)(v2 + 8) = 0;
    if (v3)
      MEMORY[0x212BC6398](v3, 0x1000C400587ADDDLL);
    MEMORY[0x212BC6398](v2, 0x1020C4035206DBCLL);
  }
  return a1;
}

void sub_20EE496B8(_QWORD *a1)
{
  sub_20EE48FA8(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE496DC(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _BYTE *a5, char a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t i;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  __n128 v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  double v47;
  __int128 v60;
  double v61;
  double *v62;
  double *v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  __int128 v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  __int128 v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  char *v83;
  char *v84;
  void *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  __int128 **v105;
  uint64_t v106;
  double *v107;
  double *v108;
  uint64_t v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  _BYTE *v116;
  BOOL v117;
  _BYTE *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  std::mutex *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  uint64_t v132;
  __int128 v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  std::string *v141;
  int v142;
  unsigned __int8 v143;
  std::string::size_type v144;
  uint64_t *v145;
  std::mutex *v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char v152;
  uint64_t v153;
  uint64_t v154;
  void *v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  _BYTE *v164;
  _BYTE *v165;
  uint64_t v166;
  std::string *v167;
  uint64_t v168;
  uint64_t v169;
  _BYTE *v170;
  _BYTE *v171;
  uint64_t v172;
  uint64_t (***v173)();
  uint64_t v174;
  uint64_t v175;
  _BYTE *v176;
  _BYTE *v177;
  uint64_t v178;
  uint64_t (***v179)();
  uint64_t v180;
  uint64_t v181;
  _BYTE *v182;
  _BYTE *v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  std::string *v194;
  uint64_t v195;
  uint64_t v196;
  _BYTE *v197;
  _BYTE *v198;
  uint64_t v199;
  std::string *v200;
  uint64_t v201;
  uint64_t *v202;
  uint64_t *v203;
  unint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  _QWORD *v209;
  uint64_t v210;
  uint64_t v211;
  _BYTE *v212;
  _BYTE *v213;
  uint64_t v214;
  _QWORD *v215;
  uint64_t v216;
  char **v217;
  _QWORD *v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  _QWORD *v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  BOOL v226;
  void *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  void **v238;
  void **v239;
  void **v240;
  void **v241;
  void *v242;
  char *v243;
  char *v244;
  char *v245;
  std::__shared_weak_count *v246;
  unint64_t *v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t v250;
  _OWORD *v251;
  _OWORD *v252;
  unint64_t v253;
  unint64_t v254;
  uint64_t v255;
  unint64_t v256;
  __int128 v257;
  std::__shared_weak_count *v258;
  unint64_t *v259;
  unint64_t v260;
  uint64_t v261;
  unint64_t v262;
  __int128 v263;
  std::__shared_weak_count *v264;
  unint64_t *v265;
  unint64_t v266;
  void **v267;
  char *v268;
  char *v269;
  void *v270;
  std::__shared_weak_count *v271;
  unint64_t *v272;
  unint64_t v273;
  uint64_t v274;
  uint64_t v275;
  char v277;
  void **v279;
  void ***v280;
  _BYTE *v281;
  void **v282;
  char v283;
  void ***v284;
  char **v285;
  uint64_t *v286;
  uint64_t **v287;
  uint64_t v288;
  uint64_t **v289;
  uint64_t *v290;
  uint64_t *v292;
  _OWORD *v293;
  unint64_t v294;
  double *v295;
  double *v296;
  float64x2_t v297;
  float64x2_t v298;
  int8x16_t v299;
  uint64_t v300;
  __int128 v301;
  unint64_t v302;
  int8x16_t v303;
  double v304;
  float64x2_t v305;
  uint64_t v306;
  float64x2_t v307;
  uint64_t v308;
  float64x2_t v309;
  uint64_t v310;
  float64x2_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t (**v314)();
  std::__shared_weak_count *v315;
  std::__shared_weak_count *v316;
  _QWORD v317[3];
  _QWORD *v318;
  _BYTE __p[32];
  __int128 v320;
  uint64_t v321;
  uint64_t v322;
  __int128 v323;
  uint64_t v324;
  __int128 v325;
  uint64_t v326;
  __int128 v327;
  uint64_t v328;
  __int128 v329;
  uint64_t v330;
  uint64_t v331;
  __int128 v332;
  uint64_t v333;
  uint64_t v334;
  __int128 v335;
  uint64_t v336;
  __int128 v337;
  __int128 v338;
  uint64_t v339;
  uint64_t v340;
  __int128 v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344[3];
  uint64_t *v345;
  uint64_t (**v346)();
  uint64_t v347;
  uint64_t *v348;
  uint64_t (**j)();
  uint64_t v350;
  uint64_t **p_j;
  std::string v352;
  std::string *v353;
  uint64_t v354;

  v9 = a1;
  v354 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C9EDB58;
  *(_QWORD *)(a1 + 8) = 0;
  v290 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  v288 = a1 + 32;
  sub_20E86AC88(a1 + 32, a3);
  v10 = operator new();
  v283 = a6;
  v281 = a5;
  *(_BYTE *)v10 = 0;
  v11 = operator new();
  v293 = (_OWORD *)(v9 + 11280);
  v12 = (_BYTE *)(v9 + 8511);
  v285 = (char **)(v9 + 11456);
  *(_QWORD *)v11 = 0x3DCCCCCD3C23D70ALL;
  *(_BYTE *)(v11 + 8) = 2;
  *(_QWORD *)(v11 + 12) = 0x3FC000003BA3D70ALL;
  *(_DWORD *)(v11 + 20) = 1056964608;
  *(_QWORD *)(v10 + 8) = v11;
  *(_OWORD *)(v10 + 16) = xmmword_2103826D0;
  *(_QWORD *)(v9 + 11456) = v10;
  v286 = (uint64_t *)(v9 + 11472);
  v289 = (uint64_t **)(v9 + 11480);
  v287 = (uint64_t **)(v9 + 11488);
  *(_OWORD *)(v9 + 11464) = 0u;
  *(_OWORD *)(v9 + 11480) = 0u;
  v292 = (uint64_t *)(v9 + 11464);
  *(_QWORD *)(v9 + 11496) = *a4;
  v13 = a4[1];
  *(_QWORD *)(v9 + 11504) = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = 5489;
  LODWORD(v295) = 5489;
  for (i = 1; i != 624; ++i)
  {
    v16 = i + 1812433253 * (v16 ^ (v16 >> 30));
    *((_DWORD *)&v295 + i) = v16;
  }
  v313 = 0;
  v18 = (std::__shared_weak_count *)operator new(0x28uLL);
  v19 = v18;
  v18->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v18->__shared_owners_;
  v18->__shared_weak_owners_ = 0;
  v18->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA1F558;
  LODWORD(v18[1].__shared_owners_) = 5489;
  v18[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24CA1F5A8;
  do
    v21 = __ldxr(p_shared_owners);
  while (__stxr(v21 + 1, p_shared_owners));
  v314 = &off_24CA1F4F8;
  v315 = v18 + 1;
  v316 = v18;
  do
    v22 = __ldxr(p_shared_owners);
  while (__stxr(v22 + 1, p_shared_owners));
  do
    v23 = __ldaxr(p_shared_owners);
  while (__stlxr(v23 - 1, p_shared_owners));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v19);
  }
  do
    v24 = __ldaxr(p_shared_owners);
  while (__stlxr(v24 - 1, p_shared_owners));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  v25 = v290;
  v26.n128_f64[0] = sub_20EE687C0();
  v27 = v316;
  if (v316)
  {
    v28 = (unint64_t *)&v316->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v27->__on_zero_shared)(v27, v26);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  *(_QWORD *)(v9 + 11536) = &off_24C9EDE10;
  *(_QWORD *)(v9 + 11560) = v9 + 11536;
  *(_BYTE *)(v9 + 12104) = 0;
  *(_BYTE *)(v9 + 12112) = 0;
  *(_BYTE *)(v9 + 12128) = 0;
  *(_WORD *)(v9 + 12136) = 0;
  *(_OWORD *)(v9 + 11568) = 0u;
  *(_OWORD *)(v9 + 11584) = 0u;
  *(_OWORD *)(v9 + 11600) = 0u;
  *(_OWORD *)(v9 + 11616) = 0u;
  *(_OWORD *)(v9 + 11632) = 0u;
  *(_OWORD *)(v9 + 11648) = 0u;
  *(_OWORD *)(v9 + 11664) = 0u;
  *(_OWORD *)(v9 + 11680) = 0u;
  *(_OWORD *)(v9 + 11696) = 0u;
  *(_OWORD *)(v9 + 11712) = 0u;
  *(_OWORD *)(v9 + 11728) = 0u;
  *(_OWORD *)(v9 + 11744) = 0u;
  *(_OWORD *)(v9 + 11760) = 0u;
  *(_OWORD *)(v9 + 11776) = 0u;
  *(_OWORD *)(v9 + 11792) = 0u;
  *(_WORD *)(v9 + 11808) = 0;
  *(_BYTE *)(v9 + 11928) = 0;
  *(_OWORD *)(v9 + 11896) = 0u;
  *(_OWORD *)(v9 + 11912) = 0u;
  *(_OWORD *)(v9 + 11864) = 0u;
  *(_OWORD *)(v9 + 11880) = 0u;
  *(_OWORD *)(v9 + 11832) = 0u;
  *(_OWORD *)(v9 + 11848) = 0u;
  *(_OWORD *)(v9 + 11816) = 0u;
  kdebug_trace();
  v282 = (void **)(v9 + 11880);
  v30 = *(_QWORD *)(a2 + 8);
  v31 = v30 - *(_QWORD *)a2;
  v279 = (void **)(v9 + 11760);
  v280 = (void ***)(v9 + 11712);
  if (v30 != *(_QWORD *)a2)
  {
    v32 = 0;
    v33 = v31 / 1088;
    while ((_DWORD)v32 == *(_DWORD *)(*(_QWORD *)a2 + 1088 * v32))
    {
      if (v33 == ++v32)
        goto LABEL_27;
    }
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/SlamEngine/src/LocalSlamEngine.cpp", 124, (uint64_t)"scaled_hardware_parameters_in.IsIndexAlignedWithCameraId()", 58, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
  }
LABEL_27:
  sub_20E8A1408((uint64_t)&v295, a2);
  v297 = vmulq_f64(*(float64x2_t *)(v9 + 88), v297);
  v298 = vmulq_f64(*(float64x2_t *)(v9 + 72), v298);
  v34.f64[0] = *(float64_t *)(v9 + 120);
  v35 = *(float64x2_t *)(v9 + 104);
  __asm { FMOV            V0.2D, #-1.0 }
  *(_QWORD *)&v40.f64[0] = *(_OWORD *)&vabsq_f64(vaddq_f64(v34, _Q0));
  v40.f64[1] = NAN;
  if (vmaxnmvq_f64(vmaxnmq_f64(vabsq_f64(vaddq_f64(v35, _Q0)), v40)) <= 0.02)
  {
    v306 = *(_QWORD *)(v9 + 120);
    *(_QWORD *)&v35.f64[1] = vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL).u64[0];
    v305 = v35;
  }
  v34.f64[0] = *(float64_t *)(v9 + 144);
  v41 = *(float64x2_t *)(v9 + 128);
  *(_QWORD *)&v42.f64[0] = *(_OWORD *)&vabsq_f64(vaddq_f64(v34, _Q0));
  v42.f64[1] = NAN;
  if (vmaxnmvq_f64(vmaxnmq_f64(vabsq_f64(vaddq_f64(v41, _Q0)), v42)) <= 0.02)
  {
    v308 = *(_QWORD *)(v9 + 144);
    *(_QWORD *)&v41.f64[1] = vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL).u64[0];
    v307 = v41;
  }
  v41.f64[0] = *(float64_t *)(v9 + 168);
  v43 = *(float64x2_t *)(v9 + 152);
  *(_QWORD *)&v44.f64[0] = *(_OWORD *)&vabsq_f64(v41);
  v44.f64[1] = NAN;
  if (vmaxnmvq_f64(vmaxnmq_f64(vabsq_f64(v43), v44)) <= 0.01)
  {
    v310 = *(_QWORD *)(v9 + 168);
    *(_QWORD *)&v43.f64[1] = vextq_s8((int8x16_t)v43, (int8x16_t)v43, 8uLL).u64[0];
    v309 = v43;
  }
  v41.f64[0] = *(float64_t *)(v9 + 192);
  v45 = *(float64x2_t *)(v9 + 176);
  *(_QWORD *)&v46.f64[0] = *(_OWORD *)&vabsq_f64(v41);
  v46.f64[1] = NAN;
  if (vmaxnmvq_f64(vmaxnmq_f64(vabsq_f64(v45), v46)) <= 0.01)
  {
    v312 = *(_QWORD *)(v9 + 192);
    *(_QWORD *)&v45.f64[1] = vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL).u64[0];
    v311 = v45;
  }
  v47 = *(double *)(v9 + 264);
  _Q3 = *(int8x16_t *)(v9 + 248);
  _Q5 = *(int8x16_t *)(v9 + 232);
  _Q2 = *(int8x16_t *)(v9 + 216);
  _Q4 = *(int8x16_t *)(v9 + 200);
  _D7 = *(_QWORD *)(v9 + 208);
  __asm { FMLA            D6, D7, V4.D[1] }
  _D7 = _Q2.i64[1];
  __asm { FMLA            D6, D7, V2.D[1] }
  _D7 = _Q5.i64[1];
  __asm { FMLA            D6, D7, V5.D[1] }
  _D7 = _Q3.i64[1];
  __asm { FMLA            D6, D7, V3.D[1] }
  if (fabs(_D6 + v47 * v47 + -3.0) < 0.01)
  {
    *(_QWORD *)&v60 = vextq_s8(_Q4, _Q4, 8uLL).u64[0];
    _Q4.i64[1] = vextq_s8(_Q2, _Q2, 8uLL).u64[0];
    *((_QWORD *)&v60 + 1) = *(_QWORD *)(v9 + 232);
    _Q2.i64[1] = vextq_s8(_Q5, _Q5, 8uLL).u64[0];
    v299 = _Q4;
    v300 = _Q3.i64[0];
    v301 = v60;
    v302 = vextq_s8(_Q3, _Q3, 8uLL).u64[0];
    v303 = _Q2;
    v304 = v47;
  }
  v61 = *(double *)(v9 + 2568);
  if (v61 >= 0.0)
  {
    v63 = v295;
    v62 = v296;
    if (v295 != v296)
    {
      v64 = (char *)v296 - (char *)v295 - 1088;
      if (v64 < 0x440)
      {
        v65 = (uint64_t)v295;
        do
        {
LABEL_44:
          *(double *)(v65 + 400) = v61;
          *(double *)(v65 + 928) = v61;
          v65 += 1088;
        }
        while ((double *)v65 != v62);
        goto LABEL_45;
      }
      v66 = v64 / 0x440 + 1;
      v65 = (uint64_t)&v295[136 * (v66 & 0x7FFFFFFFFFFFFELL)];
      v67 = v66 & 0x7FFFFFFFFFFFFELL;
      do
      {
        v63[50] = v61;
        v63[186] = v61;
        v63[116] = v61;
        v63[252] = v61;
        v63 += 272;
        v67 -= 2;
      }
      while (v67);
      if (v66 != (v66 & 0x7FFFFFFFFFFFFELL))
        goto LABEL_44;
    }
  }
LABEL_45:
  sub_20EE83130((uint64_t *)&v295, v288);
  if (*(_BYTE *)v293)
  {
    if (*(_QWORD *)(v9 + 11888) - *(_QWORD *)(v9 + 11880) != 16)
    {
      memset(__p, 0, 24);
      sub_20EE68A10((uint64_t)__p, 1uLL);
      v68 = *(_QWORD *)__p;
      v69 = *(_QWORD *)(v9 + 11920);
      v70 = v69 != 0;
      if (v69 >= 2)
      {
        v71 = 0;
        while (1)
        {
          while (1)
          {
            v72 = *(_QWORD *)(v9 + 11880)
                + 16
                * ((*(_QWORD *)(v9 + 11904) + v71)
                 % (unint64_t)((uint64_t)(*(_QWORD *)(v9 + 11888) - *(_QWORD *)(v9 + 11880)) >> 4));
            v73 = *(_OWORD *)v72;
            *(_QWORD *)v72 = 0;
            *(_QWORD *)(v72 + 8) = 0;
            v74 = *(std::__shared_weak_count **)(v68 + 8);
            *(_OWORD *)v68 = v73;
            if (v74)
            {
              v75 = (unint64_t *)&v74->__shared_owners_;
              do
                v76 = __ldaxr(v75);
              while (__stlxr(v76 - 1, v75));
              if (!v76)
                break;
            }
            ++v71;
            v68 += 16;
            if (v71 == v70)
              goto LABEL_50;
          }
          ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
          std::__shared_weak_count::__release_weak(v74);
          ++v71;
          v68 += 16;
          if (v71 == v70)
          {
LABEL_50:
            if (v71 != *(_QWORD *)(v9 + 11920))
              goto LABEL_65;
          }
        }
      }
      if (v69)
      {
        v77 = 0;
        do
        {
          v78 = *(_QWORD *)(v9 + 11880)
              + 16
              * ((*(_QWORD *)(v9 + 11904) + v77)
               % (unint64_t)((uint64_t)(*(_QWORD *)(v9 + 11888) - *(_QWORD *)(v9 + 11880)) >> 4));
          v79 = *(_OWORD *)v78;
          *(_QWORD *)v78 = 0;
          *(_QWORD *)(v78 + 8) = 0;
          v80 = *(std::__shared_weak_count **)(v68 + 8);
          *(_OWORD *)v68 = v79;
          if (v80)
          {
            v81 = (unint64_t *)&v80->__shared_owners_;
            do
              v82 = __ldaxr(v81);
            while (__stlxr(v82 - 1, v81));
            if (!v82)
            {
              ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
              std::__shared_weak_count::__release_weak(v80);
            }
          }
          ++v77;
          v68 += 16;
        }
        while (v77 != *(_QWORD *)(v9 + 11920));
      }
LABEL_65:
      v83 = (char *)*v282;
      if (*v282)
      {
        v84 = *(char **)(v9 + 11888);
        v85 = *v282;
        if (v84 != v83)
        {
          do
          {
            v86 = (std::__shared_weak_count *)*((_QWORD *)v84 - 1);
            if (v86)
            {
              v87 = (unint64_t *)&v86->__shared_owners_;
              do
                v88 = __ldaxr(v87);
              while (__stlxr(v88 - 1, v87));
              if (!v88)
              {
                ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                std::__shared_weak_count::__release_weak(v86);
              }
            }
            v84 -= 16;
          }
          while (v84 != v83);
          v85 = *v282;
        }
        *(_QWORD *)(v9 + 11888) = v83;
        operator delete(v85);
        *v282 = 0;
        *(_QWORD *)(v9 + 11888) = 0;
        *(_QWORD *)(v9 + 11896) = 0;
      }
      v89 = *(_QWORD *)__p;
      *(_QWORD *)(v9 + 11880) = *(_QWORD *)__p;
      v90 = *(_QWORD *)&__p[8];
      *(_OWORD *)(v9 + 11888) = *(_OWORD *)&__p[8];
      *(_QWORD *)(v9 + 11920) = v70;
      *(_QWORD *)(v9 + 11904) = 0;
      *(_QWORD *)(v9 + 11912) = v70 % ((v90 - v89) >> 4);
      v25 = v290;
    }
    v91 = operator new();
    v92 = *(_OWORD *)(v9 + 11376);
    *(_OWORD *)(v91 + 120) = *(_OWORD *)(v9 + 11392);
    v93 = *(_OWORD *)(v9 + 11424);
    *(_OWORD *)(v91 + 136) = *(_OWORD *)(v9 + 11408);
    *(_OWORD *)(v91 + 152) = v93;
    *(_OWORD *)(v91 + 168) = *(_OWORD *)(v9 + 11440);
    v94 = *(_OWORD *)(v9 + 11312);
    *(_OWORD *)(v91 + 56) = *(_OWORD *)(v9 + 11328);
    v95 = *(_OWORD *)(v9 + 11360);
    *(_OWORD *)(v91 + 72) = *(_OWORD *)(v9 + 11344);
    *(_OWORD *)(v91 + 88) = v95;
    *(_OWORD *)(v91 + 104) = v92;
    v96 = *(_OWORD *)(v9 + 11296);
    *(_OWORD *)(v91 + 8) = *v293;
    *(_OWORD *)(v91 + 24) = v96;
    *(_QWORD *)v91 = &off_24CA07098;
    *(_OWORD *)(v91 + 40) = v94;
    *(_OWORD *)(v91 + 184) = *(_OWORD *)(v9 + 11304);
    *(_OWORD *)(v91 + 200) = *(_OWORD *)(v9 + 11320);
    *(_OWORD *)(v91 + 216) = *(_OWORD *)(v9 + 11336);
    *(_OWORD *)(v91 + 232) = 0u;
    *(_OWORD *)(v91 + 248) = 0u;
    *(_DWORD *)(v91 + 264) = 1065353216;
    *(_QWORD *)(v91 + 280) = 0;
    *(_QWORD *)(v91 + 288) = 0;
    *(_QWORD *)(v91 + 272) = 0;
    *(_OWORD *)(v91 + 296) = *(_OWORD *)(v9 + 11424);
    *(_QWORD *)(v91 + 312) = *(_QWORD *)(v9 + 11440);
    *(_BYTE *)(v91 + 320) = 0;
    *(_BYTE *)(v91 + 336) = 0;
    *(_BYTE *)(v91 + 376) = 0;
    *(_QWORD *)(v91 + 344) = 0;
    *(_QWORD *)(v91 + 352) = 0;
    *(_BYTE *)(v91 + 360) = 0;
    v97 = *(_QWORD *)(v9 + 16);
    *(_QWORD *)(v9 + 16) = v91;
    if (v97)
      (*(void (**)(uint64_t))(*(_QWORD *)v97 + 8))(v97);
  }
  v98 = operator new();
  sub_20F00E700(v98, (_DWORD *)(v9 + 5048), (uint64_t)&v295, *(_DWORD *)(v9 + 1072));
  v99 = *v292;
  *v292 = v98;
  if (v99)
    (*(void (**)(uint64_t))(*(_QWORD *)v99 + 8))(v99);
  v100 = (uint64_t *)operator new();
  *v100 = 0;
  v100[1] = 0;
  v100[2] = 0;
  v101 = *v289;
  *v289 = v100;
  if (v101)
  {
    v102 = *v101;
    if (*v101)
    {
      v103 = v101[1];
      v104 = (void *)*v101;
      if (v103 != v102)
      {
        do
        {
          v103 -= 240;
          sub_20E990F68(v103);
        }
        while (v103 != v102);
        v104 = (void *)*v101;
      }
      v101[1] = v102;
      operator delete(v104);
    }
    MEMORY[0x212BC6398](v101, 0x20C40960023A9);
  }
  v105 = *(__int128 ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)*v292 + 96))(*v292);
  if (*v289 != (uint64_t *)v105)
    sub_20EE5F0C0(*v289, *v105, v105[1], 0xEEEEEEEEEEEEEEEFLL * (v105[1] - *v105));
  v106 = *(_QWORD *)(v9 + 16);
  memset(&v352, 0, sizeof(v352));
  v107 = v295;
  v108 = v296;
  for (j = (uint64_t (**)())&v352; v107 != v108; v107 += 136)
  {
    LODWORD(v346) = *(_DWORD *)v107;
    sub_20EA9AB98((uint64_t *)&j, &v346);
  }
  sub_20EE7B54C((int **)&v352, v288, (char **)__p);
  v109 = operator new();
  v110 = v109;
  v111 = *(std::__shared_weak_count **)(v9 + 11504);
  j = *(uint64_t (***)())(v9 + 11496);
  v350 = (uint64_t)v111;
  if (v111)
  {
    v112 = (unint64_t *)&v111->__shared_owners_;
    do
      v113 = __ldxr(v112);
    while (__stxr(v113 + 1, v112));
  }
  sub_20F0303B0(v109, (uint64_t)&v295, (__int128 *)(v9 + 304), (uint64_t)&j, v106, (uint64_t)__p);
  if (v111)
  {
    v114 = (unint64_t *)&v111->__shared_owners_;
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v116 = (_BYTE *)*v25;
  *v25 = v110;
  if (v116)
    (*(void (**)(_BYTE *))(*(_QWORD *)v116 + 8))(v116);
  if (*(_QWORD *)__p)
  {
    *(_QWORD *)&__p[8] = *(_QWORD *)__p;
    operator delete(*(void **)__p);
  }
  if (v352.__r_.__value_.__r.__words[0])
  {
    v352.__r_.__value_.__l.__size_ = v352.__r_.__value_.__r.__words[0];
    operator delete(v352.__r_.__value_.__l.__data_);
  }
  if (*(_BYTE *)(v9 + 10720))
    v117 = 1;
  else
    v117 = *(_BYTE *)(v9 + 9240) != 0;
  v118 = (_BYTE *)*v25;
  v118[7361] = v117;
  v119 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v118 + 432))(v118);
  v120 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v25 + 432))(*v25);
  v121 = *(_QWORD *)(v120 + 4864) + 3080;
  v122 = *(unsigned __int8 *)(*(_QWORD *)(v120 + 4864) + 4744);
  if (!*(_BYTE *)(*(_QWORD *)(v120 + 4864) + 4744))
    v121 = 0;
  *(_QWORD *)__p = v121;
  *(_QWORD *)&__p[8] = v122;
  v123 = operator new();
  sub_20EE884E8((unsigned int *)v123, (uint64_t)&v295, (uint64_t *)(v119 + 4824), (uint64_t)__p, *(_QWORD *)(v9 + 288));
  v124 = *v287;
  *v287 = (uint64_t *)v123;
  if (v124)
  {
    v125 = sub_20EE5EF74((uint64_t)v124);
    MEMORY[0x212BC6398](v125, 0x10A0C40C265FF81);
    v123 = (uint64_t)*v287;
  }
  v126 = *v25;
  v127 = (std::mutex *)(v123 + 4208);
  std::mutex::lock((std::mutex *)(v123 + 4208));
  v128 = *(_QWORD *)(v123 + 8);
  std::mutex::unlock(v127);
  sub_20F0946E4(v126, v128, 0);
  v129 = *v292;
  v130 = *v287;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v132 = v130[20];
  __asm { FMOV            V1.2D, #1.0 }
  v323 = _Q1;
  v324 = 0x3FF0000000000000;
  v325 = 0uLL;
  v326 = 0;
  v327 = _Q1;
  v330 = 0;
  v333 = 0;
  v329 = 0u;
  v332 = 0u;
  v335 = 0u;
  v328 = 0x3FF0000000000000;
  v331 = 0x3FF0000000000000;
  v336 = 0;
  v334 = 0x3FF0000000000000;
  v339 = 0;
  v341 = 0u;
  v338 = 0u;
  v337 = _Q1;
  v342 = 0;
  v340 = 0x3FF0000000000000;
  v343 = 0x3FF0000000000000;
  v134 = *(_OWORD *)(v130 + 13);
  *(_OWORD *)&__p[16] = *(_OWORD *)(v130 + 15);
  *(_OWORD *)__p = v134;
  v321 = v130[19];
  v320 = *(_OWORD *)(v130 + 17);
  v322 = v132;
  sub_20EB842DC((uint64_t)__p, (float64x2_t *)(v130 + 79));
  v327 = *((_OWORD *)v130 + 44);
  v328 = v130[90];
  v324 = v130[93];
  v323 = *(_OWORD *)(v130 + 91);
  v329 = *((_OWORD *)v130 + 47);
  v330 = v130[96];
  v326 = v130[99];
  v325 = *(_OWORD *)(v130 + 97);
  v135 = sub_210219C18();
  *(double *)&v352.__r_.__value_.__l.__data_ = (double)(std::chrono::steady_clock::now().__d_.__rep_ - rep) / 1000000.0;
  sub_20E9BA7EC((uint64_t)&j, (uint64_t)v135, 0xEEEEB0B5B2B2EEEELL, (uint64_t *)&v352);
  sub_20F01F9A4(v129, v130 + 314, (uint64_t)(v130 + 317), (__int128 *)__p);
  v136 = **v287;
  v137 = operator new();
  sub_20F2E3404(v137, v136);
  v138 = *v286;
  *v286 = v137;
  if (v138)
  {
    v139 = sub_20F2E3924(v138);
    MEMORY[0x212BC6398](v139, 0x10B2C40892BB94DLL);
  }
  if (*(_BYTE *)(v9 + 8968))
    *(_BYTE *)(*v286 + 1240) = 1;
  v140 = *v12;
  if ((char)*v12 < 0)
  {
    if (*(_QWORD *)(v9 + 8496))
      goto LABEL_122;
  }
  else if (*v12)
  {
    goto LABEL_122;
  }
  if (!*(_BYTE *)(v9 + 8552))
  {
    *(_QWORD *)__p = 0;
    sub_20EE560F4(v9, (uint64_t **)__p);
    v152 = 0;
    goto LABEL_155;
  }
LABEL_122:
  memset(&v352, 0, sizeof(v352));
  if ((v140 & 0x80u) == 0)
    v141 = (std::string *)(v9 + 8488);
  else
    v141 = *(std::string **)(v9 + 8488);
  if ((v140 & 0x80u) != 0)
    v140 = *(_QWORD *)(v9 + 8496);
  sub_20E8A9678(&v352, v141, (std::string *)((char *)v141 + v140));
  v142 = *(unsigned __int8 *)(v9 + 8944);
  v143 = atomic_load((unsigned __int8 *)&qword_254A6DE08);
  if ((v143 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE08))
  {
    __cxa_atexit((void (*)(void *))nullsub_1015, &off_254A5A4B8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DE08);
  }
  sub_20EF5E3E0((uint64_t)&v352, v9 + 8536, v9 + 8560, v142 != 0, v9 + 8840, (uint64_t)&off_254A5A4B8, (uint64_t)__p);
  if (SHIBYTE(v352.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v352.__r_.__value_.__l.__data_);
    if (__p[0] == 1)
    {
LABEL_130:
      v144 = *(_QWORD *)&__p[24];
      *(_QWORD *)&__p[24] = 0;
      v352.__r_.__value_.__r.__words[0] = v144;
      j = 0;
      if (v144)
      {
        if (*(_BYTE *)(v9 + 8587))
        {
          v145 = *v287;
          v146 = (std::mutex *)(*v287 + 526);
          std::mutex::lock(v146);
          v147 = v145[1];
          std::mutex::unlock(v146);
          v344[0] = v147;
          sub_20EE797D0((uint64_t **)&v352, v344, (uint64_t *)&v346);
          v148 = (uint64_t *)v346;
          j = v346;
        }
        else
        {
          v148 = (uint64_t *)operator new();
          *v148 = 0;
          v148[1] = 0;
          v148[2] = 0;
          j = (uint64_t (**)())v148;
          v148[1] = (uint64_t)sub_20EE6740C((char **)v148, (uint64_t *)&v352);
        }
      }
      else
      {
        v148 = 0;
      }
      goto LABEL_138;
    }
  }
  else if (__p[0] == 1)
  {
    goto LABEL_130;
  }
  v148 = 0;
  v352.__r_.__value_.__r.__words[0] = 0;
  j = 0;
LABEL_138:
  sub_20EE560F4(v9, (uint64_t **)&j);
  v152 = __p[0];
  j = 0;
  if (v148)
  {
    v153 = *v148;
    if (*v148)
    {
      v154 = v148[1];
      v155 = (void *)*v148;
      if (v154 != v153)
      {
        do
        {
          v156 = *(std::__shared_weak_count **)(v154 - 8);
          if (v156)
          {
            v157 = (unint64_t *)&v156->__shared_owners_;
            do
              v158 = __ldaxr(v157);
            while (__stlxr(v158 - 1, v157));
            if (!v158)
            {
              ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
              std::__shared_weak_count::__release_weak(v156);
            }
          }
          v154 -= 16;
        }
        while (v154 != v153);
        v155 = (void *)*v148;
      }
      v148[1] = v153;
      operator delete(v155);
    }
    MEMORY[0x212BC6398](v148, 0x20C40960023A9);
  }
  v159 = v352.__r_.__value_.__r.__words[0];
  v352.__r_.__value_.__r.__words[0] = 0;
  if (v159)
  {
    v160 = sub_20E9545B0(v159);
    MEMORY[0x212BC6398](v160, 0x10A0C401749CDD1);
  }
  v161 = *(_QWORD *)&__p[24];
  *(_QWORD *)&__p[24] = 0;
  if (v161)
  {
    v162 = sub_20E9545B0(v161);
    MEMORY[0x212BC6398](v162, 0x10A0C401749CDD1);
  }
LABEL_155:
  if (v283)
    *v281 = v152;
  v163 = *(_QWORD *)(v9 + 11464);
  v352.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C9EE650;
  v352.__r_.__value_.__l.__size_ = v9;
  v353 = &v352;
  v164 = (_BYTE *)(v163 + 3392);
  v165 = __p;
  *(_QWORD *)&__p[24] = __p;
  *(_QWORD *)__p = &off_24C9EE650;
  *(_QWORD *)&__p[8] = v9;
  if ((_BYTE *)(v163 + 3392) == __p)
  {
    v166 = 4;
    goto LABEL_165;
  }
  v165 = *(_BYTE **)(v163 + 3416);
  if (v165 == v164)
  {
    j = &off_24C9EE650;
    v350 = v9;
    *(_QWORD *)&__p[24] = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v164 + 24))(v163 + 3392, __p);
    (*(void (**)(_QWORD))(**(_QWORD **)(v163 + 3416) + 32))(*(_QWORD *)(v163 + 3416));
    *(_QWORD *)(v163 + 3416) = 0;
    *(_QWORD *)&__p[24] = __p;
    ((void (*)(uint64_t (***)(), uint64_t))j[3])(&j, v163 + 3392);
    ((void (*)(uint64_t (***)()))j[4])(&j);
    *(_QWORD *)(v163 + 3416) = v164;
    v165 = *(_BYTE **)&__p[24];
    if (*(_BYTE **)&__p[24] != __p)
      goto LABEL_160;
LABEL_164:
    v166 = 4;
    v165 = __p;
    goto LABEL_165;
  }
  *(_QWORD *)(v163 + 3392) = &off_24C9EE650;
  *(_QWORD *)(v163 + 3400) = v9;
  *(_QWORD *)&__p[24] = v165;
  *(_QWORD *)(v163 + 3416) = v164;
  if (v165 == __p)
    goto LABEL_164;
LABEL_160:
  if (!v165)
    goto LABEL_166;
  v166 = 5;
LABEL_165:
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v165 + 8 * v166))(v165, v149, v150, v151);
LABEL_166:
  v167 = v353;
  if (v353 == &v352)
  {
    v168 = 4;
    v167 = &v352;
  }
  else
  {
    if (!v353)
      goto LABEL_171;
    v168 = 5;
  }
  (*(void (**)(std::string *, uint64_t, uint64_t, uint64_t))(v167->__r_.__value_.__r.__words[0] + 8 * v168))(v167, v149, v150, v151);
LABEL_171:
  v169 = *(_QWORD *)(v9 + 11464);
  j = &off_24C9EE6E0;
  v350 = v9;
  p_j = (uint64_t **)&j;
  v170 = (_BYTE *)(v169 + 3456);
  v171 = __p;
  *(_QWORD *)&__p[24] = __p;
  *(_QWORD *)__p = &off_24C9EE6E0;
  *(_QWORD *)&__p[8] = v9;
  if ((_BYTE *)(v169 + 3456) == __p)
  {
    v172 = 4;
    goto LABEL_179;
  }
  v171 = *(_BYTE **)(v169 + 3480);
  if (v171 == v170)
  {
    v346 = &off_24C9EE6E0;
    v347 = v9;
    *(_QWORD *)&__p[24] = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v170 + 24))(v169 + 3456, __p);
    (*(void (**)(_QWORD))(**(_QWORD **)(v169 + 3480) + 32))(*(_QWORD *)(v169 + 3480));
    *(_QWORD *)(v169 + 3480) = 0;
    *(_QWORD *)&__p[24] = __p;
    ((void (*)(uint64_t (***)(), uint64_t))v346[3])(&v346, v169 + 3456);
    ((void (*)(uint64_t (***)()))v346[4])(&v346);
    *(_QWORD *)(v169 + 3480) = v170;
    v171 = *(_BYTE **)&__p[24];
    if (*(_BYTE **)&__p[24] != __p)
      goto LABEL_174;
LABEL_178:
    v172 = 4;
    v171 = __p;
    goto LABEL_179;
  }
  *(_QWORD *)(v169 + 3456) = &off_24C9EE6E0;
  *(_QWORD *)(v169 + 3464) = v9;
  *(_QWORD *)&__p[24] = v171;
  *(_QWORD *)(v169 + 3480) = v170;
  if (v171 == __p)
    goto LABEL_178;
LABEL_174:
  if (!v171)
    goto LABEL_180;
  v172 = 5;
LABEL_179:
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v171 + 8 * v172))(v171, v149, v150, v151);
LABEL_180:
  v173 = (uint64_t (***)())p_j;
  if (p_j == (uint64_t **)&j)
  {
    v174 = 4;
    v173 = &j;
  }
  else
  {
    if (!p_j)
      goto LABEL_185;
    v174 = 5;
  }
  ((void (*)(uint64_t (***)(), uint64_t, uint64_t, uint64_t))(*v173)[v174])(v173, v149, v150, v151);
LABEL_185:
  v175 = *(_QWORD *)(v9 + 11464);
  v346 = &off_24C9EE770;
  v347 = v9;
  v348 = (uint64_t *)&v346;
  v176 = (_BYTE *)(v175 + 3424);
  v177 = __p;
  *(_QWORD *)&__p[24] = __p;
  *(_QWORD *)__p = &off_24C9EE770;
  *(_QWORD *)&__p[8] = v9;
  if ((_BYTE *)(v175 + 3424) == __p)
  {
    v178 = 4;
  }
  else
  {
    v177 = *(_BYTE **)(v175 + 3448);
    if (v177 == v176)
    {
      *(_QWORD *)&__p[24] = 0;
      v177 = __p;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v176 + 24))(v175 + 3424, __p);
      (*(void (**)(_QWORD))(**(_QWORD **)(v175 + 3448) + 32))(*(_QWORD *)(v175 + 3448));
      *(_QWORD *)&__p[24] = __p;
      *(_QWORD *)(v175 + 3424) = &off_24C9EE770;
      *(_QWORD *)(v175 + 3432) = v9;
      v178 = 4;
      *(_QWORD *)(v175 + 3448) = v176;
    }
    else
    {
      *(_QWORD *)(v175 + 3424) = &off_24C9EE770;
      *(_QWORD *)(v175 + 3432) = v9;
      *(_QWORD *)&__p[24] = v177;
      *(_QWORD *)(v175 + 3448) = v176;
      if (v177 == __p)
      {
        v178 = 4;
        v177 = __p;
      }
      else
      {
        if (!v177)
        {
          v179 = &v346;
          v180 = 4;
          goto LABEL_198;
        }
        v178 = 5;
      }
    }
  }
  (*(void (**)(_BYTE *))(*(_QWORD *)v177 + 8 * v178))(v177);
  v179 = (uint64_t (***)())v348;
  if (v348 == (uint64_t *)&v346)
  {
    v180 = 4;
    v179 = &v346;
  }
  else
  {
    if (!v348)
      goto LABEL_199;
    v180 = 5;
  }
LABEL_198:
  ((void (*)(uint64_t (***)(), uint64_t, uint64_t, uint64_t))(*v179)[v180])(v179, v149, v150, v151);
LABEL_199:
  v181 = *(_QWORD *)(v9 + 11464);
  v344[0] = (uint64_t)&off_24C9EE800;
  v344[1] = v9;
  v345 = v344;
  v182 = (_BYTE *)(v181 + 3488);
  v183 = __p;
  *(_QWORD *)&__p[24] = __p;
  *(_QWORD *)__p = &off_24C9EE800;
  *(_QWORD *)&__p[8] = v9;
  if ((_BYTE *)(v181 + 3488) == __p)
  {
    v185 = 4;
LABEL_207:
    v184 = v290;
    goto LABEL_208;
  }
  v183 = *(_BYTE **)(v181 + 3512);
  if (v183 == v182)
  {
    *(_QWORD *)&__p[24] = 0;
    v183 = __p;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v182 + 24))(v181 + 3488, __p);
    (*(void (**)(_QWORD))(**(_QWORD **)(v181 + 3512) + 32))(*(_QWORD *)(v181 + 3512));
    *(_QWORD *)&__p[24] = __p;
    *(_QWORD *)(v181 + 3488) = &off_24C9EE800;
    *(_QWORD *)(v181 + 3496) = v9;
    v185 = 4;
    *(_QWORD *)(v181 + 3512) = v182;
    goto LABEL_207;
  }
  *(_QWORD *)(v181 + 3488) = &off_24C9EE800;
  *(_QWORD *)(v181 + 3496) = v9;
  *(_QWORD *)&__p[24] = v183;
  *(_QWORD *)(v181 + 3512) = v182;
  if (v183 == __p)
  {
    v185 = 4;
    v183 = __p;
    goto LABEL_207;
  }
  v184 = v290;
  if (!v183)
  {
    v186 = v344;
    v187 = 4;
    goto LABEL_213;
  }
  v185 = 5;
LABEL_208:
  (*(void (**)(_BYTE *))(*(_QWORD *)v183 + 8 * v185))(v183);
  v186 = v345;
  if (v345 == v344)
  {
    v187 = 4;
    v186 = v344;
  }
  else
  {
    if (!v345)
      goto LABEL_214;
    v187 = 5;
  }
LABEL_213:
  (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*v186 + 8 * v187))(v186, v149, v150, v151);
LABEL_214:
  v188 = *(_QWORD *)(v9 + 8);
  v352.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C9EE540;
  v352.__r_.__value_.__l.__size_ = v9;
  v353 = &v352;
  *(_QWORD *)&__p[24] = __p;
  *(_QWORD *)__p = &off_24C9EE540;
  *(_QWORD *)&__p[8] = v9;
  sub_20EDB40D8(__p, (_QWORD *)(v188 + 7216));
  v192 = *(_QWORD **)&__p[24];
  if (*(_BYTE **)&__p[24] == __p)
  {
    v193 = 4;
    v192 = __p;
  }
  else
  {
    if (!*(_QWORD *)&__p[24])
      goto LABEL_219;
    v193 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v192 + 8 * v193))(v192, v189, v190, v191);
LABEL_219:
  v194 = v353;
  if (v353 == &v352)
  {
    v195 = 4;
    v194 = &v352;
  }
  else
  {
    if (!v353)
      goto LABEL_224;
    v195 = 5;
  }
  (*(void (**)(std::string *, uint64_t, uint64_t, uint64_t))(v194->__r_.__value_.__r.__words[0] + 8 * v195))(v194, v189, v190, v191);
LABEL_224:
  v196 = *(_QWORD *)(v9 + 8);
  v352.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C9EE5C0;
  v352.__r_.__value_.__l.__size_ = v9;
  v353 = &v352;
  v197 = (_BYTE *)(v196 + 7280);
  v198 = __p;
  *(_QWORD *)&__p[24] = __p;
  *(_QWORD *)__p = &off_24C9EE5C0;
  *(_QWORD *)&__p[8] = v9;
  if ((_BYTE *)(v196 + 7280) == __p)
  {
    v199 = 4;
    goto LABEL_232;
  }
  v198 = *(_BYTE **)(v196 + 7304);
  if (v198 == v197)
  {
    j = &off_24C9EE5C0;
    v350 = v9;
    *(_QWORD *)&__p[24] = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v197 + 24))(v196 + 7280, __p);
    (*(void (**)(_QWORD))(**(_QWORD **)(v196 + 7304) + 32))(*(_QWORD *)(v196 + 7304));
    *(_QWORD *)(v196 + 7304) = 0;
    *(_QWORD *)&__p[24] = __p;
    ((void (*)(uint64_t (***)(), uint64_t))j[3])(&j, v196 + 7280);
    ((void (*)(uint64_t (***)()))j[4])(&j);
    *(_QWORD *)(v196 + 7304) = v197;
    v198 = *(_BYTE **)&__p[24];
    if (*(_BYTE **)&__p[24] != __p)
      goto LABEL_227;
LABEL_231:
    v199 = 4;
    v198 = __p;
    goto LABEL_232;
  }
  *(_QWORD *)(v196 + 7280) = &off_24C9EE5C0;
  *(_QWORD *)(v196 + 7288) = v9;
  *(_QWORD *)&__p[24] = v198;
  *(_QWORD *)(v196 + 7304) = v197;
  if (v198 == __p)
    goto LABEL_231;
LABEL_227:
  if (!v198)
    goto LABEL_233;
  v199 = 5;
LABEL_232:
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v198 + 8 * v199))(v198, v189, v190, v191);
LABEL_233:
  v200 = v353;
  if (v353 == &v352)
  {
    v201 = 4;
    v200 = &v352;
  }
  else
  {
    if (!v353)
      goto LABEL_238;
    v201 = 5;
  }
  (*(void (**)(std::string *, uint64_t, uint64_t, uint64_t))(v200->__r_.__value_.__r.__words[0] + 8 * v201))(v200, v189, v190, v191);
LABEL_238:
  v202 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)*v184 + 432))(*v184);
  v203 = v202;
  *(_QWORD *)__p = &off_24C9EDE90;
  *(_QWORD *)&__p[8] = v9;
  *(_QWORD *)&__p[24] = __p;
  v204 = v202[601];
  if (v204 >= v202[602])
  {
    v208 = sub_20F13F264(v202 + 600, __p);
  }
  else
  {
    *(_QWORD *)(v204 + 24) = v204;
    (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)&__p[24] + 24))(*(_QWORD *)&__p[24], v204);
    v208 = v204 + 32;
    v203[601] = v204 + 32;
  }
  v203[601] = v208;
  v209 = *(_QWORD **)&__p[24];
  if (*(_BYTE **)&__p[24] == __p)
  {
    v210 = 4;
    v209 = __p;
  }
  else
  {
    if (!*(_QWORD *)&__p[24])
      goto LABEL_246;
    v210 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v209 + 8 * v210))(v209, v205, v206, v207);
LABEL_246:
  v211 = *v184;
  v317[0] = &off_24C9EDF20;
  v318 = v317;
  v212 = (_BYTE *)(v211 + 7312);
  v213 = __p;
  *(_QWORD *)&__p[24] = __p;
  *(_QWORD *)__p = &off_24C9EDF20;
  if ((_BYTE *)(v211 + 7312) == __p)
  {
    v214 = 4;
    goto LABEL_254;
  }
  v213 = *(_BYTE **)(v211 + 7336);
  if (v213 == v212)
  {
    v352.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C9EDF20;
    *(_QWORD *)&__p[24] = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v212 + 24))(v211 + 7312, __p);
    (*(void (**)(_QWORD))(**(_QWORD **)(v211 + 7336) + 32))(*(_QWORD *)(v211 + 7336));
    *(_QWORD *)(v211 + 7336) = 0;
    *(_QWORD *)&__p[24] = __p;
    (*(void (**)(uint64_t, _QWORD *))(v352.__r_.__value_.__r.__words[0] + 24))((uint64_t)&v352, (_QWORD *)(v211 + 7312));
    (*(void (**)(std::string *))(v352.__r_.__value_.__r.__words[0] + 32))(&v352);
    *(_QWORD *)(v211 + 7336) = v212;
    v213 = *(_BYTE **)&__p[24];
    if (*(_BYTE **)&__p[24] != __p)
      goto LABEL_249;
LABEL_253:
    v214 = 4;
    v213 = __p;
    goto LABEL_254;
  }
  *(_QWORD *)(v211 + 7312) = &off_24C9EDF20;
  *(_QWORD *)&__p[24] = v213;
  *(_QWORD *)(v211 + 7336) = v212;
  if (v213 == __p)
    goto LABEL_253;
LABEL_249:
  if (!v213)
    goto LABEL_255;
  v214 = 5;
LABEL_254:
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v213 + 8 * v214))(v213, v205, v206, v207);
LABEL_255:
  v215 = v318;
  if (v318 == v317)
  {
    v216 = 4;
    v215 = v317;
  }
  else
  {
    if (!v318)
      goto LABEL_260;
    v216 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v215 + 8 * v216))(v215, v205, v206, v207);
LABEL_260:
  v217 = (char **)(v9 + 11456);
  if (!*(_BYTE *)(v9 + 10650))
    goto LABEL_265;
  v218 = operator new(0x28uLL);
  v218[1] = 0;
  v218[2] = 0;
  *v218 = &off_24C9EDFB0;
  *(_QWORD *)(v9 + 11864) = sub_20EEBCB40(v218 + 3);
  v219 = *(std::__shared_weak_count **)(v9 + 11872);
  *(_QWORD *)(v9 + 11872) = v218;
  if (!v219)
    goto LABEL_265;
  v220 = (unint64_t *)&v219->__shared_owners_;
  do
    v221 = __ldaxr(v220);
  while (__stlxr(v221 - 1, v220));
  if (!v221)
  {
    ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
    std::__shared_weak_count::__release_weak(v219);
    if (*(_QWORD *)(v9 + 11720) - *(_QWORD *)(v9 + 11712) == 120)
      goto LABEL_304;
  }
  else
  {
LABEL_265:
    if (*(_QWORD *)(v9 + 11720) - *(_QWORD *)(v9 + 11712) == 120)
      goto LABEL_304;
  }
  memset(__p, 0, 24);
  v222 = operator new(0x78uLL);
  v223 = 0;
  v284 = (void ***)(v9 + 11720);
  v222[14] = 0;
  *((_OWORD *)v222 + 5) = 0u;
  *((_OWORD *)v222 + 6) = 0u;
  *((_OWORD *)v222 + 3) = 0u;
  *((_OWORD *)v222 + 4) = 0u;
  *((_OWORD *)v222 + 1) = 0u;
  *((_OWORD *)v222 + 2) = 0u;
  *(_OWORD *)v222 = 0u;
  *(_QWORD *)__p = v222;
  *(_QWORD *)&__p[8] = v222 + 15;
  *(_QWORD *)&__p[16] = v222 + 15;
  v224 = *(_QWORD *)(v9 + 11752);
  v225 = 5;
  if (v224 < 5)
    v225 = *(_QWORD *)(v9 + 11752);
  v294 = v225;
  v226 = v224 == 0;
  while (v226)
  {
    if (v224 <= 5)
      goto LABEL_286;
LABEL_277:
    v229 = *(_QWORD *)(v9 + 11736);
    v230 = *(_QWORD *)(v9 + 11720);
    v231 = v9;
    v232 = *(_QWORD *)(v9 + 11712);
    v233 = *v222;
    if (*v222)
    {
      v234 = v222[1];
      v227 = (void *)*v222;
      if (v234 != v233)
      {
        do
        {
          v235 = *(std::__shared_weak_count **)(v234 - 8);
          if (v235)
          {
            v236 = (unint64_t *)&v235->__shared_owners_;
            do
              v237 = __ldaxr(v236);
            while (__stlxr(v237 - 1, v236));
            if (!v237)
            {
              ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
              std::__shared_weak_count::__release_weak(v235);
            }
          }
          v234 -= 16;
        }
        while (v234 != v233);
        v227 = (void *)*v222;
      }
      v222[1] = v233;
      operator delete(v227);
      *v222 = 0;
      v222[1] = 0;
      v222[2] = 0;
    }
    v228 = v232 + 24 * ((v229 + v223) % (0xAAAAAAAAAAAAAAABLL * ((v230 - v232) >> 3)));
    *(_OWORD *)v222 = *(_OWORD *)v228;
    v222[2] = *(_QWORD *)(v228 + 16);
    *(_QWORD *)v228 = 0;
    *(_QWORD *)(v228 + 8) = 0;
    *(_QWORD *)(v228 + 16) = 0;
    ++v223;
    v9 = v231;
    v226 = v223 == *(_QWORD *)(v231 + 11752);
    v222 += 3;
  }
  if (v224 < 6 || v223 != v294)
    goto LABEL_277;
LABEL_286:
  v238 = *v280;
  v217 = v285;
  if (*v280)
  {
    v239 = *v284;
    v240 = *v280;
    if (*v284 != v238)
    {
      v241 = *v284;
      do
      {
        v244 = (char *)*(v241 - 3);
        v241 -= 3;
        v243 = v244;
        if (v244)
        {
          v245 = (char *)*(v239 - 2);
          v242 = v243;
          if (v245 != v243)
          {
            do
            {
              v246 = (std::__shared_weak_count *)*((_QWORD *)v245 - 1);
              if (v246)
              {
                v247 = (unint64_t *)&v246->__shared_owners_;
                do
                  v248 = __ldaxr(v247);
                while (__stlxr(v248 - 1, v247));
                if (!v248)
                {
                  ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
                  std::__shared_weak_count::__release_weak(v246);
                }
              }
              v245 -= 16;
            }
            while (v245 != v243);
            v242 = *v241;
          }
          *(v239 - 2) = v243;
          operator delete(v242);
        }
        v239 = v241;
      }
      while (v241 != v238);
      v240 = *v280;
    }
    *v284 = v238;
    operator delete(v240);
    *v280 = 0;
    v280[1] = 0;
    v280[2] = 0;
  }
  v249 = *(_QWORD *)__p;
  *(_QWORD *)(v9 + 11712) = *(_QWORD *)__p;
  v250 = *(_QWORD *)&__p[8];
  *(_OWORD *)v284 = *(_OWORD *)&__p[8];
  *(_QWORD *)(v9 + 11752) = v294;
  *(_QWORD *)(v9 + 11736) = 0;
  *(_QWORD *)(v9 + 11744) = v294 % (0xAAAAAAAAAAAAAAABLL * ((v250 - v249) >> 3));
LABEL_304:
  if (*(_QWORD *)(v9 + 11768) - *(_QWORD *)(v9 + 11760) != 160)
  {
    memset(__p, 0, 24);
    v251 = operator new(0xA0uLL);
    v252 = v251;
    v251[8] = 0u;
    v251[9] = 0u;
    v251[6] = 0u;
    v251[7] = 0u;
    v251[4] = 0u;
    v251[5] = 0u;
    v251[2] = 0u;
    v251[3] = 0u;
    *(_QWORD *)__p = v251;
    *(_QWORD *)&__p[8] = v251 + 10;
    *(_QWORD *)&__p[16] = v251 + 10;
    v253 = *(_QWORD *)(v9 + 11800);
    if (v253 >= 0xA)
      v254 = 10;
    else
      v254 = *(_QWORD *)(v9 + 11800);
    *v251 = 0uLL;
    v251[1] = 0uLL;
    if (v253 >= 0xB)
    {
      v255 = 0;
      while (1)
      {
        v256 = *(_QWORD *)(v9 + 11760)
             + 16
             * ((*(_QWORD *)(v9 + 11784) + v255)
              % (unint64_t)((uint64_t)(*(_QWORD *)(v9 + 11768) - *(_QWORD *)(v9 + 11760)) >> 4));
        v257 = *(_OWORD *)v256;
        *(_QWORD *)v256 = 0;
        *(_QWORD *)(v256 + 8) = 0;
        v258 = (std::__shared_weak_count *)*((_QWORD *)v252 + 1);
        *v252 = v257;
        if (!v258)
          goto LABEL_316;
        v259 = (unint64_t *)&v258->__shared_owners_;
        do
          v260 = __ldaxr(v259);
        while (__stlxr(v260 - 1, v259));
        if (!v260)
        {
          ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
          std::__shared_weak_count::__release_weak(v258);
          ++v255;
          ++v252;
          if (v255 != v254)
            continue;
        }
        else
        {
LABEL_316:
          ++v255;
          ++v252;
          if (v255 != v254)
            continue;
        }
        if (v255 != *(_QWORD *)(v9 + 11800))
          goto LABEL_326;
      }
    }
    if (v253)
    {
      v261 = 0;
      do
      {
        v262 = *(_QWORD *)(v9 + 11760)
             + 16
             * ((*(_QWORD *)(v9 + 11784) + v261)
              % (unint64_t)((uint64_t)(*(_QWORD *)(v9 + 11768) - *(_QWORD *)(v9 + 11760)) >> 4));
        v263 = *(_OWORD *)v262;
        *(_QWORD *)v262 = 0;
        *(_QWORD *)(v262 + 8) = 0;
        v264 = (std::__shared_weak_count *)*((_QWORD *)v252 + 1);
        *v252 = v263;
        if (v264)
        {
          v265 = (unint64_t *)&v264->__shared_owners_;
          do
            v266 = __ldaxr(v265);
          while (__stlxr(v266 - 1, v265));
          if (!v266)
          {
            ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
            std::__shared_weak_count::__release_weak(v264);
          }
        }
        ++v261;
        ++v252;
      }
      while (v261 != *(_QWORD *)(v9 + 11800));
    }
LABEL_326:
    v267 = (void **)v293 + 61;
    v268 = (char *)*v279;
    if (*v279)
    {
      v269 = (char *)*v267;
      v270 = *v279;
      if (*v267 != v268)
      {
        do
        {
          v271 = (std::__shared_weak_count *)*((_QWORD *)v269 - 1);
          if (v271)
          {
            v272 = (unint64_t *)&v271->__shared_owners_;
            do
              v273 = __ldaxr(v272);
            while (__stlxr(v273 - 1, v272));
            if (!v273)
            {
              ((void (*)(std::__shared_weak_count *))v271->__on_zero_shared)(v271);
              std::__shared_weak_count::__release_weak(v271);
            }
          }
          v269 -= 16;
        }
        while (v269 != v268);
        v270 = *v279;
      }
      *v267 = v268;
      operator delete(v270);
      *v279 = 0;
      v279[1] = 0;
      v279[2] = 0;
    }
    v274 = *(_QWORD *)__p;
    *(_QWORD *)(v9 + 11760) = *(_QWORD *)__p;
    v275 = *(_QWORD *)&__p[8];
    *(_OWORD *)v267 = *(_OWORD *)&__p[8];
    *(_QWORD *)(v9 + 11800) = v254;
    *(_QWORD *)(v9 + 11784) = 0;
    *(_QWORD *)(v9 + 11792) = v254 % ((v275 - v274) >> 4);
  }
  if (*(_BYTE *)(a2 + 1136))
    _ZF = *(_BYTE *)(a2 + 1128) == 0;
  else
    _ZF = 1;
  v277 = !_ZF;
  **v217 = v277;
  sub_20E86A810((uint64_t)&v295);
  kdebug_trace();
  return v9;
}

void sub_20EE4B640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, _QWORD *a12, void **a13, void ***a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, uint64_t *a19, uint64_t *a20,uint64_t *a21,uint64_t a22,void ***a23,uint64_t *a24,uint64_t a25,uint64_t *a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  sub_20EE56630((void ***)(v36 - 168));
  sub_20EE5C31C((uint64_t *)(v36 - 136));
  sub_20EE5C360((uint64_t)&STACK[0xAD0]);
  sub_20E86A810((uint64_t)&a35);
  sub_20E8E69C4((uint64_t)&a29);
  sub_20E8C3144(a16);
  sub_20E86665C(v35 + 11864);
  sub_20EAA9C38((void **)(v35 + 11840));
  sub_20EAA9608(a9);
  sub_20E8C3144(a13);
  sub_20EE49464(a14);
  sub_20EE68614(v35 + 11664);
  sub_20EE684A0(v35 + 11616);
  sub_20EE683DC(a10);
  v38 = *(_QWORD **)(v35 + 11560);
  if (v38 == a12)
  {
    v39 = 4;
    v38 = a12;
  }
  else
  {
    if (!v38)
      goto LABEL_6;
    v39 = 5;
  }
  (*(void (**)(void))(*v38 + 8 * v39))();
LABEL_6:
  sub_20E896798(a18);
  sub_20E86665C(a11);
  sub_20EE49544(a21);
  sub_20EE49588(a23);
  sub_20EE4960C(a20);
  v40 = *a26;
  *a26 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  sub_20EE49650(a19);
  sub_20E869418(a22);
  v41 = *(_QWORD *)(v35 + 16);
  *(_QWORD *)(v35 + 16) = 0;
  if (v41)
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  v42 = *a24;
  *a24 = 0;
  if (v42)
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE4B9DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 11464) + 16))(*(_QWORD *)(a1 + 11464));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 11464) + 72))(*(_QWORD *)(a1 + 11464));
  return sub_20EE4BA24(a2);
}

uint64_t sub_20EE4BA24(uint64_t a1)
{
  uint64_t v1;
  __uint64_t v2;
  __uint64_t v3;
  uint64_t v4;
  double *v5;
  double *v6;
  double v7;
  double v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  double v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  double v32;
  unint64_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  uint64_t v41;
  _QWORD *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  __uint64_t *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t *v52;
  unsigned __int8 v53;
  void *v55;
  uint64_t *v56;
  uint64_t v57;
  unsigned __int8 v58;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  int v63;
  __uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD **v67;
  _QWORD *v68;
  _QWORD *i;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  int64_t v93;
  char *v94;
  uint64_t v95;
  __uint64_t v96;
  char *v97;
  char *v98;
  void *v99;
  void *v100;
  unint64_t v101;
  char *v102;
  void *v103;
  void *v104;
  char *v105;
  char *v106;
  unint64_t v107;
  char *v108;
  char *v109;
  char *v110;
  void *v111;
  unint64_t v112;
  char *v113;
  unint64_t v114;
  char *v115;
  char *v116;
  int64_t v117;
  unint64_t v118;
  char *v119;
  char *v120;
  unint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  char *v128;
  unint64_t v129;
  int64_t v130;
  unint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  __int128 *v137;
  char *v138;
  uint64_t v139;
  __int128 v140;
  uint64_t v141;
  unint64_t v142;
  char *v143;
  unint64_t v144;
  char *v145;
  char *v146;
  char *v147;
  char *v148;
  char *v149;
  unint64_t v150;
  uint64_t v151;
  __int128 *v152;
  _OWORD *v153;
  uint64_t v154;
  __int128 v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  int64_t v166;
  __uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  __int128 *v171;
  _OWORD *v172;
  uint64_t v173;
  __int128 v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  _BOOL4 v182;
  _QWORD *v183;
  uint64_t v184;
  char *v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  std::__shared_weak_count *v222;
  unint64_t *v223;
  unint64_t v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  uint64_t *v228;
  uint64_t v229;
  unsigned __int8 v230;
  uint64_t v232;
  char *v233;
  size_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t j;
  uint64_t v238;
  uint64_t v239;
  char *v240;
  _QWORD *v241;
  uint64_t v242;
  int v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  _BYTE *v247;
  uint64_t v248;
  char *v249;
  uint64_t **v250;
  uint64_t ***v251;
  _QWORD *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  char *v256;
  uint64_t v257;
  uint64_t v258;
  char *v259;
  uint64_t v260;
  void *v261;
  int64_t v262;
  unint64_t v263;
  char *v264;
  uint64_t v265;
  uint64_t v266;
  char *v267;
  __int128 v268;
  void *v269;
  uint64_t v270;
  char *v271;
  char *v272;
  const void *v273;
  uint64_t v274;
  char *v275;
  char *v276;
  uint64_t v277;
  uint64_t v278;
  int64_t v279;
  unint64_t v280;
  char *v281;
  uint64_t v282;
  const void *v283;
  int64_t v284;
  char *v285;
  char *v286;
  const void *v287;
  int64_t v288;
  char *v289;
  char *v290;
  uint64_t *v291;
  uint64_t *v292;
  int64_t v293;
  unint64_t v294;
  _QWORD *v295;
  _QWORD *v296;
  uint64_t *v297;
  uint64_t *v298;
  uint64_t *v299;
  char *v300;
  unint64_t v301;
  uint64_t **v302;
  uint64_t **v303;
  unint64_t v304;
  uint64_t *v305;
  uint64_t *v306;
  _QWORD *v307;
  _BYTE *v308;
  uint64_t v309;
  uint64_t v310;
  int64_t v311;
  unint64_t v312;
  char *v313;
  uint64_t v314;
  uint64_t v315;
  char *v316;
  __int128 v317;
  char ***v318;
  char **v319;
  _BYTE *v320;
  uint64_t ***v321;
  uint64_t **v322;
  __int128 *v323;
  uint64_t v324;
  int v325;
  std::__shared_weak_count *v326;
  unint64_t *v327;
  unint64_t v328;
  char *v329;
  char *v330;
  char *v331;
  char *v332;
  unint64_t v333;
  char **v334;
  char **v335;
  char *v336;
  unint64_t v337;
  char *v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  __int128 v343;
  __int128 v344;
  char *v345;
  _QWORD *v346;
  _BYTE *v347;
  uint64_t **v348;
  uint64_t *v349;
  uint64_t **v350;
  uint64_t *v351;
  uint64_t **v352;
  unint64_t v353;
  uint64_t **v354;
  uint64_t **v355;
  unint64_t v356;
  uint64_t *v357;
  uint64_t v358;
  _BYTE *v359;
  _BYTE *v360;
  int64_t v361;
  char *v362;
  char *v363;
  uint64_t *v364;
  __int128 *v365;
  __int128 *v366;
  int v367;
  uint64_t v369;
  void **v370;
  char *v371;
  char *v372;
  void *v373;
  std::__shared_weak_count *v374;
  unint64_t *v375;
  unint64_t v376;
  _QWORD *v377;
  _QWORD **v378;
  _QWORD **v379;
  uint64_t v380;
  uint64_t k;
  uint64_t v382;
  uint64_t v383;
  unint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  unsigned int v391;
  unsigned int v392;
  unsigned int v393;
  unint64_t v394;
  uint64_t v395;
  unsigned int v396;
  unsigned int v397;
  unsigned int v398;
  uint64_t v399;
  uint64_t v400;
  unsigned int v401;
  unsigned int v402;
  unsigned int v403;
  _OWORD *v404;
  _OWORD *v405;
  __int128 v406;
  uint64_t v407;
  char *v408;
  __int128 v409;
  uint64_t v410;
  __int128 v411;
  __int128 v412;
  __int128 v413;
  __int128 v414;
  _QWORD *v415;
  char *v416;
  std::__shared_weak_count *v417;
  unint64_t *v418;
  unint64_t v419;
  __int128 v420;
  std::__shared_weak_count *v421;
  unint64_t *v422;
  unint64_t v423;
  std::__shared_weak_count *v424;
  unint64_t *v425;
  unint64_t v426;
  uint64_t v427;
  double v428;
  _QWORD *v429;
  uint64_t v430;
  void **v431;
  uint64_t v432;
  uint64_t v433;
  void *v434;
  void *v435;
  void *v436;
  unint64_t v437;
  unint64_t v438;
  char *v439;
  __int128 v440;
  uint64_t v441;
  uint64_t v442;
  std::__shared_weak_count *v443;
  unint64_t *v444;
  unint64_t v445;
  char *v446;
  __int128 v447;
  uint64_t v448;
  std::__shared_weak_count *v449;
  unint64_t *v450;
  unint64_t v451;
  char *v452;
  __int128 v453;
  uint64_t v454;
  std::__shared_weak_count *v455;
  unint64_t *v456;
  unint64_t v457;
  __uint64_t v458;
  unint64_t v459;
  uint64_t v460;
  uint64_t v461;
  BOOL v462;
  uint64_t v463;
  _QWORD *v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  int v472;
  unint64_t v473;
  unint64_t v474;
  uint64_t v475;
  double v476;
  uint64_t v477;
  const char *v478;
  int v479;
  size_t v480;
  unsigned __int8 v481;
  unsigned __int8 v482;
  const char *v483;
  size_t v484;
  _BYTE *v485;
  uint64_t v486;
  uint64_t v487;
  _BYTE *v488;
  uint64_t v489;
  uint64_t v490;
  NSObject *v491;
  size_t v492;
  std::__shared_weak_count_vtbl *v493;
  std::__shared_weak_count *v494;
  std::__shared_weak_count *v495;
  unint64_t *v496;
  unint64_t v497;
  unint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  const char *v503;
  uint64_t v504;
  std::__shared_weak_count *v505;
  unint64_t *v506;
  unint64_t v507;
  std::__shared_weak_count *v508;
  unint64_t *v509;
  unint64_t v510;
  __darwin_time_t tv_sec;
  std::__shared_weak_count *v512;
  unint64_t *v513;
  unint64_t v514;
  std::__shared_weak_count *v515;
  unint64_t *v516;
  unint64_t v517;
  std::__shared_weak_count *v518;
  unint64_t *v519;
  unint64_t v520;
  std::__shared_weak_count *v521;
  unint64_t *v522;
  unint64_t v523;
  void *v524;
  uint64_t v525;
  double v526;
  std::__shared_weak_count *v527;
  unint64_t *v528;
  unint64_t v529;
  uint64_t v530;
  double v531;
  std::__shared_weak_count *v532;
  unint64_t *v533;
  unint64_t v534;
  int v535;
  uint64_t v536;
  _BYTE *v537;
  unsigned int ***v538;
  unsigned int *v539;
  unsigned int *v540;
  uint64_t v541;
  unint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  __int128 v547;
  std::__shared_weak_count *v548;
  uint64_t v549;
  unint64_t *v550;
  unint64_t v551;
  int v552;
  BOOL v553;
  char v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  unint64_t v562;
  uint64_t v563;
  unint64_t v564;
  char *v565;
  char *v566;
  char *v567;
  __int128 v568;
  char *v569;
  unint64_t *v570;
  unint64_t v571;
  void *v572;
  int v573;
  unint64_t v574;
  unint64_t v575;
  uint64_t v576;
  const char *v577;
  size_t v578;
  unsigned __int8 v579;
  const char *v580;
  size_t v581;
  _BYTE *v582;
  uint64_t v583;
  uint64_t v584;
  _BYTE *v585;
  uint64_t v586;
  uint64_t v587;
  NSObject *v588;
  size_t v589;
  std::__shared_weak_count_vtbl *v590;
  std::__shared_weak_count *v591;
  std::__shared_weak_count *v592;
  unint64_t *v593;
  unint64_t v594;
  unint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  const char *v601;
  uint64_t v602;
  std::__shared_weak_count *v603;
  unint64_t *v604;
  unint64_t v605;
  std::__shared_weak_count *v606;
  unint64_t *v607;
  unint64_t v608;
  __darwin_time_t v609;
  std::__shared_weak_count *v610;
  unint64_t *v611;
  unint64_t v612;
  std::__shared_weak_count *v613;
  unint64_t *v614;
  unint64_t v615;
  std::__shared_weak_count *v616;
  unint64_t *v617;
  unint64_t v618;
  std::__shared_weak_count *v619;
  unint64_t *v620;
  unint64_t v621;
  uint64_t v622;
  void *v623;
  std::__shared_weak_count *v624;
  unint64_t *v625;
  unint64_t v626;
  _QWORD *v627;
  char v629;
  char v630;
  char *v631;
  char *v632;
  int64_t v633;
  unint64_t v634;
  uint64_t v635;
  char *v636;
  unint64_t v637;
  uint64_t v638;
  unint64_t v639;
  char *v640;
  char *v641;
  char v642;
  char *v643;
  uint64_t v644;
  __int128 v645;
  char *v646;
  char *v647;
  __int128 v648;
  int64_t v649;
  _QWORD *v650;
  __int128 v651;
  uint64_t v652;
  std::__shared_weak_count *v653;
  unint64_t *v654;
  unint64_t v655;
  std::__shared_weak_count *v656;
  unint64_t *v657;
  unint64_t v658;
  std::__shared_weak_count *v659;
  unint64_t *v660;
  unint64_t v661;
  unint64_t *v662;
  unint64_t v663;
  uint64_t *v664;
  uint64_t v665;
  uint64_t v666;
  char *v667;
  __int128 v668;
  __int128 v669;
  __int128 v670;
  __int128 v671;
  __int128 v672;
  __int128 v673;
  __int128 v674;
  __int128 v675;
  char *v676;
  void *v677;
  __int128 v678;
  __int128 v679;
  __int128 v680;
  __int128 v681;
  __int128 v682;
  __int128 v683;
  __int128 v684;
  __int128 v685;
  __int128 v686;
  unsigned int v687;
  char *v688;
  _QWORD *v689;
  uint64_t v690;
  std::__shared_weak_count *v691;
  unint64_t *v692;
  unint64_t v693;
  uint64_t *v694;
  unsigned __int8 v695;
  char *v697;
  size_t v698;
  __darwin_time_t v699;
  uint64_t v700;
  uint64_t m;
  uint64_t v702;
  std::__shared_weak_count *v703;
  unint64_t *v704;
  unint64_t v705;
  std::__shared_weak_count *v706;
  unint64_t *v707;
  unint64_t v708;
  uint64_t v709;
  uint64_t v710;
  float64x2_t *v711;
  float64x2_t v714;
  double v717;
  float64x2_t v719;
  float64x2_t v720;
  float64x2_t v721;
  float64x2_t v722;
  float64x2_t v723;
  int64x2_t v724;
  int64x2_t v725;
  double v727;
  float64x2_t v728;
  float64x2_t v729;
  float64x2_t v730;
  float64x2_t v731;
  int8x16_t v732;
  float64_t v733;
  unint64_t v734;
  float64x2_t v735;
  float64x2_t v736;
  uint64_t *v737;
  unsigned __int8 v738;
  char *v740;
  size_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t n;
  uint64_t v745;
  char *v746;
  char *v747;
  void *v748;
  void *v749;
  void *v750;
  char *v751;
  _QWORD *v752;
  void *v753;
  char *v754;
  void *v755;
  void *v756;
  uint64_t v757;
  void *v758;
  uint64_t v759;
  void (***v760)(uint64_t);
  void (**v761)(uint64_t);
  uint64_t v762;
  uint64_t v763;
  void *v764;
  uint64_t v765;
  void *v766;
  void *v767;
  unint64_t v769;
  char *v770;
  unint64_t v771;
  char *v772;
  char *v773;
  int64_t v774;
  unint64_t v775;
  char *v776;
  char *v777;
  char *v778;
  uint64_t v779;
  uint64_t v780;
  char *v781;
  __int128 *v782;
  _OWORD *v783;
  uint64_t v784;
  __int128 v785;
  uint64_t v786;
  _QWORD *v787;
  _QWORD *v788;
  _QWORD *v789;
  _QWORD *v790;
  _QWORD *v791;
  _QWORD *v792;
  __uint64_t *v793;
  uint64_t v794;
  _BYTE *v795;
  _BOOL4 v796;
  _BYTE *v797;
  char *v798;
  _QWORD **v799;
  _QWORD *v800;
  char *v801;
  _QWORD **v802;
  unsigned int *v803;
  const char *v804;
  uint64_t v805;
  uint64_t ***v806;
  const char *v807;
  unsigned int *v808;
  uint64_t v809;
  __uint64_t v810;
  uint64_t v811;
  std::__shared_weak_count *v812;
  __int128 v813;
  __int128 v814;
  uint64_t v815;
  __int128 v816;
  uint64_t v817;
  unsigned __int8 v818;
  void *v819[2];
  uint64_t v820;
  void *v821[2];
  uint64_t v822;
  __int128 v823;
  uint64_t v824;
  void *v825[2];
  uint64_t v826;
  char v827;
  void *v828[2];
  uint64_t v829;
  __int128 v830;
  uint64_t v831;
  char v832;
  __int128 v833;
  uint64_t v834;
  __int128 v835;
  uint64_t v836;
  __int128 v837;
  uint64_t v838;
  __int128 v839;
  uint64_t v840;
  char v841;
  _OWORD v842[9];
  char v843;
  __int128 v844;
  __int128 v845;
  __int128 v846;
  __int128 v847;
  __int128 v848;
  __int128 v849;
  __int128 v850;
  __int128 v851;
  __int128 v852;
  __int128 v853;
  __int128 v854;
  __int128 v855;
  char v856;
  char v857;
  __int16 v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  int v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  char v866;
  char v867;
  _QWORD *v868;
  timespec v869;
  __uint64_t v870[2];
  _BYTE v871[24];
  uint64_t v872;
  _BYTE v873[24];
  uint64_t v874;
  _BYTE v875[104];
  _BYTE v876[24];
  uint64_t v877;
  __int128 v878;
  __int128 v879;
  __int128 v880;
  __int128 v881;
  _BYTE v882[24];
  uint64_t v883;
  _BYTE v884[25];
  __int128 v885;
  __int128 v886;
  __int128 v887;
  __int128 v888;
  uint64_t v889;
  int v890;
  char v891;
  __int128 v892;
  __int128 v893;
  int v894;
  __int128 v895;
  __int128 v896;
  int v897;
  char v898;
  void *v899;
  int v900[2];
  int v901[2];
  int v902[2];
  void *__src;
  int v904[2];
  char v905;
  void *v906;
  int v907[2];
  int v908[2];
  int v909[2];
  void *v910;
  int v911[2];
  char v912;
  char *v913;
  char *v914;
  int v915[2];
  int v916[2];
  char v917;
  int v918;
  __int16 v919;
  __int128 v920;
  uint64_t v921;
  _BYTE v922[1984];
  __int128 v923[10];
  uint64_t v924;
  _BYTE v925[288];
  _BYTE v926[288];
  uint64_t v927;
  uint64_t v928;
  __int128 v929;
  uint64_t v930;
  __int128 v931;
  uint64_t v932;
  __int128 v933;
  uint64_t v934;
  int v935;
  __int128 v936;
  uint64_t v937;
  char v938;
  uint64_t v939;
  char v940;
  char v941;
  uint64_t v942;
  std::__shared_weak_count *v943;
  char v944;
  __int128 v945;
  uint64_t v946;
  __int128 v947;
  __int128 v948;
  int v949;
  _BYTE v950[29];
  __int128 v951;
  std::__shared_weak_count *v952;
  void *v953;
  std::__shared_weak_count *v954;
  char v955;
  char v956;
  void *v957;
  char v958;
  char v959;
  void *v960;
  char v961;
  void *v962;
  char v963;
  _BYTE object[64];
  void *v965[2];
  _BYTE v966[32];
  void *v967[2];
  __int128 v968;
  __int128 v969;
  __int128 v970;
  __int128 v971;
  __int128 v972;
  _BYTE v973[72];
  __int128 v974;
  _OWORD v975[2];
  __int128 v976;
  _BYTE v977[25];
  __int128 v978;
  __int128 v979;
  uint64_t v980;
  uint64_t v981;
  __int128 v982;
  uint64_t v983;
  int v984;
  char v985;
  _OWORD v986[2];
  int v987;
  _QWORD v988[4];
  int v989;
  char v990;
  void *v991[3];
  void *v992[3];
  void *v993[3];
  char v994;
  void *v995[3];
  void *v996[3];
  void *v997[3];
  char v998;
  void *v999;
  char *v1000;
  char *v1001;
  void *v1002[3];
  char v1003;
  int v1004;
  __int16 v1005;
  __int128 v1006;
  uint64_t v1007;
  _BYTE v1008[1977];
  _OWORD v1009[10];
  uint64_t v1010;
  _BYTE v1011[288];
  _BYTE v1012[288];
  void *v1013[3];
  __int128 v1014;
  uint64_t v1015;
  __int128 v1016;
  uint64_t v1017;
  __int128 v1018;
  uint64_t v1019;
  int v1020;
  __int128 v1021;
  uint64_t v1022;
  char v1023;
  uint64_t v1024;
  char v1025;
  char v1026;
  uint64_t v1027;
  std::__shared_weak_count *v1028;
  char v1029;
  __int128 v1030;
  uint64_t v1031;
  __int128 v1032;
  __int128 v1033;
  int v1034;
  _BYTE v1035[29];
  __int128 v1036;
  __int128 v1037;
  void *v1038[2];
  __int128 v1039;
  char v1040;
  __int128 v1041;
  __int128 v1042;
  __int128 v1043;
  __int128 v1044;
  __int128 v1045;
  __int128 v1046;
  __int128 v1047;
  __int128 v1048;
  __int128 v1049;
  __int128 v1050;
  __int128 v1051;
  __int128 v1052;
  __int128 v1053;
  _OWORD v1054[2];
  _BYTE v1055[152];
  __int128 v1056;
  __int128 v1057;
  __int128 v1058;
  __int128 v1059;
  __int128 v1060;
  __int128 v1061;
  __int128 v1062;
  __int128 v1063;
  __int128 v1064;
  __int128 v1065;
  __int128 v1066;
  __int128 v1067;
  char v1068;
  char v1069;
  __int16 v1070;
  __int128 v1071;
  uint64_t v1072;
  int v1073;
  __int128 v1074;
  uint64_t v1075;
  char v1076;
  char v1077;
  __int128 v1078;
  __int128 v1079;
  __int128 v1080;
  __int128 v1081;
  __int128 v1082;
  __int128 v1083;
  __int128 v1084;
  _BYTE v1085[56];
  _BYTE v1086[32];
  __int128 v1087;
  uint64_t v1088;
  _BYTE v1089[24];
  __int128 v1090;
  uint64_t v1091;
  _BYTE v1092[32];
  _BYTE v1093[32];
  uint64_t v1094;
  _BYTE v1095[32];
  _BYTE v1096[32];
  uint64_t v1097;
  uint64_t v1098;
  void *v1099[2];
  uint64_t v1100;
  void *v1101[2];
  _BYTE v1102[32];
  float64x2_t v1103;
  _BYTE v1104[32];
  void *v1105[2];
  float64x2_t __p;
  char v1107;
  float64x2_t v1108;
  double v1109;
  char v1110;
  uint64_t v1111;
  unsigned __int8 v1112;
  __int128 v1113[3];
  _BYTE v1114[32];
  uint64_t v1115;
  _BYTE v1116[93];
  _BYTE v1117[3];
  char v1118;
  uint64_t v1119;
  uint64_t v1120[3];
  uint64_t v1121;
  __int128 v1122[19];
  double v1123;
  double v1124;
  double v1125;
  char v1126;
  uint64_t v1127;

  v1 = MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  v805 = v1;
  v1127 = *MEMORY[0x24BDAC8D0];
  v810 = v2;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_76;
  if (!*(_QWORD *)(v2 + 11920))
    goto LABEL_76;
  v4 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 8) + 432))(*(_QWORD *)(v2 + 8)) + 4864);
  v5 = *(double **)(v4 + 2504);
  v6 = *(double **)(v4 + 2512);
  if (v5 == v6 || !*(_QWORD *)(v3 + 11920))
    goto LABEL_76;
  v7 = *v5;
  v8 = *(v6 - 1);
  while (1)
  {
    while (1)
    {
      v12 = (_QWORD *)(*(_QWORD *)(v3 + 11880) + 16 * *(_QWORD *)(v3 + 11904));
      v13 = *(double *)(*v12 + 176);
      if (v13 >= v7)
        break;
      v14 = (std::__shared_weak_count *)v12[1];
      *v12 = 0;
      v12[1] = 0;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      v3 = v810;
      v9 = (uint64_t)(*(_QWORD *)(v810 + 11888) - *(_QWORD *)(v810 + 11880)) >> 4;
      v10 = *(_QWORD *)(v810 + 11904) + 1;
      if (v10 < v9)
        v9 = 0;
      *(_QWORD *)(v810 + 11904) = v10 - v9;
      v11 = *(_QWORD *)(v810 + 11920) - 1;
      *(_QWORD *)(v810 + 11920) = v11;
      if (!v11)
        goto LABEL_76;
    }
    v3 = v810;
    if (v13 > v8)
      goto LABEL_76;
    v17 = *(_QWORD *)(v810 + 11488);
    if (!*(_BYTE *)(v17 + 2504))
      break;
    v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v810 + 8) + 432))(*(_QWORD *)(v810 + 8));
    sub_20F135EB4(v18, (uint64_t)v1101, *(double *)(*v12 + 176));
    if (!v1110)
    {
      v56 = sub_210219C18();
      v57 = *v12;
      v58 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
      if ((v58 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
      {
        __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DDD0);
      }
      if (atomic_load(&qword_254A5A450))
      {
        v60 = *(_QWORD *)(v57 + 176);
        *(_DWORD *)object = 134218496;
        *(_QWORD *)&object[4] = v60;
        *(_WORD *)&object[12] = 2048;
        *(double *)&object[14] = v7;
        *(_WORD *)&object[22] = 2048;
        *(double *)&object[24] = v8;
        v61 = (void *)_os_log_send_and_compose_impl();
        v870[0] = (__uint64_t)v61;
        sub_21021A118(object, (uint64_t)v56, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, "LSE:PSQ: Failed to interpolate imu pose. Query ts: %lf, min: %lf, max: %lf.", 0x4BuLL, (const char **)v870);
        sub_21021A2DC((uint64_t)&stru_254A5A410, (uint64_t)object);
        if (SHIBYTE(v968) < 0)
        {
          operator delete(v967[1]);
          if (SHIBYTE(v967[0]) < 0)
            goto LABEL_63;
LABEL_47:
          if (v966[8])
          {
LABEL_64:
            if ((v966[7] & 0x80000000) != 0)
              operator delete(v965[0]);
          }
        }
        else
        {
          if ((SHIBYTE(v967[0]) & 0x80000000) == 0)
            goto LABEL_47;
LABEL_63:
          operator delete(*(void **)&v966[16]);
          if (v966[8])
            goto LABEL_64;
        }
        if (object[56] && (object[55] & 0x80000000) != 0)
          operator delete(*(void **)&object[32]);
        if ((object[31] & 0x80000000) != 0)
          operator delete(*(void **)&object[8]);
        if (v61)
          free(v61);
      }
      if (os_signpost_enabled((os_log_t)*v56))
      {
        v62 = *(_QWORD *)(v57 + 176);
        *(_DWORD *)object = 134218496;
        *(_QWORD *)&object[4] = v62;
        *(_WORD *)&object[12] = 2048;
        *(double *)&object[14] = v7;
        *(_WORD *)&object[22] = 2048;
        *(double *)&object[24] = v8;
        _os_signpost_emit_unreliably_with_name_impl();
      }
      v3 = v810;
      goto LABEL_76;
    }
    v20 = *(float64x2_t *)(v17 + 2376);
    v19 = *(float64x2_t *)(v17 + 2392);
    v22 = *(float64x2_t *)(v17 + 2408);
    v21 = *(float64x2_t *)(v17 + 2424);
    v24 = *(float64x2_t *)(v17 + 2440);
    _Q6 = *(float64x2_t *)(v17 + 2456);
    v26 = *(float64x2_t *)(v17 + 2472);
    v25 = *(float64x2_t *)(v17 + 2488);
    v27 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v20, *(double *)v1101), v22, *(float64x2_t *)v1101, 1), v24, *(double *)v1102), v26, *(float64x2_t *)v1102, 1);
    v28 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v19, *(double *)v1101), v21, *(float64x2_t *)v1101, 1), _Q6, *(double *)v1102), v25, *(float64x2_t *)v1102, 1);
    v29 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v20, *(double *)&v1102[16]), v22, *(float64x2_t *)&v1102[16], 1), v24, v1103.f64[0]), v26, v1103, 1);
    v30 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v19, *(double *)&v1102[16]), v21, *(float64x2_t *)&v1102[16], 1), _Q6, v1103.f64[0]), v25, v1103, 1);
    _Q20 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v20, *(double *)v1104), v22, *(float64x2_t *)v1104, 1), v24, *(double *)&v1104[16]), v26, *(float64x2_t *)&v1104[16], 1);
    v32 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v19, *(double *)v1104), v21, *(float64x2_t *)v1104, 1), _Q6, *(double *)&v1104[16]), v25, *(float64x2_t *)&v1104[16], 1).f64[0];
    _Q16 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v20, *(double *)v1105), v22, *(float64x2_t *)v1105, 1), v24, __p.f64[0]), v26, __p, 1);
    v34 = *(_OWORD *)&vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v19, *(double *)v1105), v21, *(float64x2_t *)v1105, 1), _Q6, __p.f64[0]), v25, __p, 1) ^ 0x8000000000000000;
    v35 = (float64x2_t)vzip1q_s64(v27, v29);
    v36 = (float64x2_t)vzip2q_s64(v27, v29);
    v37 = vmlaq_f64(vmlaq_f64(vmulq_f64(v35, (float64x2_t)vdupq_n_s64(*(_QWORD *)&_Q16.f64[0] ^ 0x8000000000000000)), (float64x2_t)vdupq_n_s64(*(_QWORD *)&_Q16.f64[1] ^ 0x8000000000000000), v36), (float64x2_t)vdupq_n_s64(v34), (float64x2_t)vzip1q_s64(v28, v30));
    *(_QWORD *)&_Q16.f64[0] = *(_QWORD *)&_Q16.f64[1] ^ 0x8000000000000000;
    __asm { FMLA            D6, D16, V20.D[1] }
    v41 = *v12;
    *(float32x2_t *)(v41 + 108) = vcvt_f32_f64(v35);
    *(float *)v35.f64 = _Q20.f64[0];
    *(_DWORD *)(v41 + 116) = LODWORD(v35.f64[0]);
    *(_DWORD *)(v41 + 120) = 0;
    *(float32x2_t *)(v41 + 124) = vcvt_f32_f64(v36);
    *(float *)v36.f64 = _Q20.f64[1];
    *(_DWORD *)(v41 + 132) = LODWORD(v36.f64[0]);
    *(_DWORD *)(v41 + 136) = 0;
    *(float *)v28.i32 = *(double *)v28.i64;
    *(float *)v30.i32 = *(double *)v30.i64;
    *(_DWORD *)(v41 + 140) = v28.i32[0];
    *(_DWORD *)(v41 + 144) = v30.i32[0];
    *(float *)v28.i32 = v32;
    *(_DWORD *)(v41 + 148) = v28.i32[0];
    *(_DWORD *)(v41 + 152) = 0;
    *(float32x2_t *)(v41 + 156) = vcvt_f32_f64(v37);
    *(float *)v28.i32 = vmlad_n_f64(_Q6.f64[0], *(double *)&v34, v32);
    *(_DWORD *)(v41 + 164) = v28.i32[0];
    *(_DWORD *)(v41 + 168) = 1065353216;
    *(_QWORD *)object = &off_24C9EE000;
    *(_QWORD *)&object[8] = v810;
    *(_QWORD *)&object[24] = object;
    v870[0] = (__uint64_t)&off_24C9EE090;
    v870[1] = v810;
    *(_QWORD *)&v871[8] = v870;
    (*(void (**)(_QWORD, _QWORD *, _BYTE *, __uint64_t *))(**(_QWORD **)(v810 + 16) + 16))(*(_QWORD *)(v810 + 16), v12, object, v870);
    v42 = (_QWORD *)(*(_QWORD *)(v810 + 11880) + 16 * *(_QWORD *)(v810 + 11904));
    v43 = (std::__shared_weak_count *)v42[1];
    *v42 = 0;
    v42[1] = 0;
    if (v43)
    {
      v44 = (unint64_t *)&v43->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    v46 = (uint64_t)(*(_QWORD *)(v810 + 11888) - *(_QWORD *)(v810 + 11880)) >> 4;
    v47 = *(_QWORD *)(v810 + 11904) + 1;
    if (v47 < v46)
      v46 = 0;
    *(_QWORD *)(v810 + 11904) = v47 - v46;
    --*(_QWORD *)(v810 + 11920);
    v48 = *(__uint64_t **)&v871[8];
    if (*(__uint64_t **)&v871[8] == v870)
    {
      v48 = v870;
      v49 = 4;
    }
    else
    {
      if (!*(_QWORD *)&v871[8])
        goto LABEL_30;
      v49 = 5;
    }
    (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_30:
    v50 = *(_QWORD **)&object[24];
    if (*(_BYTE **)&object[24] == object)
    {
      v50 = object;
      v51 = 4;
      goto LABEL_34;
    }
    if (*(_QWORD *)&object[24])
    {
      v51 = 5;
LABEL_34:
      (*(void (**)(void))(*v50 + 8 * v51))();
    }
    v3 = v810;
    if (!*(_QWORD *)(v810 + 11920))
      goto LABEL_76;
  }
  v52 = sub_210219C18();
  v53 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v53 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    LOWORD(v1101[0]) = 0;
    v55 = (void *)_os_log_send_and_compose_impl();
    *(_QWORD *)object = v55;
    sub_21021A118(v1101, (uint64_t)v52, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, "LSE:PSQ: Failed to get extrinsics.", 0x22uLL, (const char **)object);
    sub_21021A2DC((uint64_t)&stru_254A5A410, (uint64_t)v1101);
    if (v1107 < 0)
    {
      operator delete(*(void **)&__p.f64[1]);
      if (SHIBYTE(__p.f64[0]) < 0)
        goto LABEL_50;
LABEL_41:
      if (v1104[24])
      {
LABEL_51:
        if ((v1104[23] & 0x80000000) != 0)
          operator delete(*(void **)v1104);
      }
    }
    else
    {
      if ((SHIBYTE(__p.f64[0]) & 0x80000000) == 0)
        goto LABEL_41;
LABEL_50:
      operator delete(v1105[0]);
      if (v1104[24])
        goto LABEL_51;
    }
    if (LOBYTE(v1103.f64[1]) && SHIBYTE(v1103.f64[0]) < 0)
      operator delete(*(void **)&v1102[16]);
    if ((v1102[15] & 0x80000000) != 0)
      operator delete(v1101[1]);
    if (v55)
      free(v55);
  }
  v3 = v810;
  if (os_signpost_enabled((os_log_t)*v52))
  {
    LOWORD(v1101[0]) = 0;
    _os_signpost_emit_unreliably_with_name_impl();
  }
LABEL_76:
  sub_20F094A88(*(_QWORD **)(v3 + 8), (uint64_t)v1101);
  v63 = v1112;
  if (v1112)
  {
    v64 = v810;
    v65 = *(_QWORD *)(v810 + 11472);
    v66 = *(_QWORD *)v1102;
    *(_QWORD *)(v65 + 1264) = *(_QWORD *)v1102;
    if (!*(_BYTE *)(v65 + 1208))
    {
      *(_QWORD *)(v65 + 1224) = v66;
      *(_QWORD *)(v65 + 1216) = v66;
      *(_BYTE *)(v65 + 1208) = 1;
    }
    *(_QWORD *)(v65 + 1232) = v66;
    if (*(_BYTE *)(v65 + 1256))
    {
      *(_BYTE *)(v65 + 1256) = 0;
      *(_BYTE *)(v65 + 1241) = 0;
      *(_QWORD *)(v65 + 1248) = 0;
      *(_QWORD *)(v65 + 1224) = v66;
    }
    v63 = v1112;
  }
  else
  {
    v64 = v810;
  }
  if (!v1118 && v63)
  {
    v67 = (_QWORD **)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v64 + 11464) + 96))(*(_QWORD *)(v64 + 11464));
    v68 = (_QWORD *)**v67;
    for (i = (_QWORD *)(*v67)[1]; v68 != i; v68 += 30)
    {
      if (v68[24] != v68[25])
      {
        v71 = v68[3];
        v70 = v68[4];
        if (v70 != v71)
        {
          v72 = 0;
          v73 = 0;
          do
          {
            v74 = v68[24] + v72;
            if (*(_BYTE *)(v74 + 8))
            {
              v75 = *(_QWORD *)(v1111 + 24 * *(unsigned int *)v68) + 216 * v73;
              *(_QWORD *)(v75 + 192) = *(_QWORD *)v74;
              *(_BYTE *)(v75 + 200) = 1;
              v71 = v68[3];
              v70 = v68[4];
            }
            ++v73;
            v72 += 16;
          }
          while (v73 < (v70 - v71) >> 4);
        }
      }
    }
    v76 = *(_QWORD *)(v64 + 11464);
    v77 = v1123;
    sub_20F01F9A4(v76, v1120, (uint64_t)&v1121, v1122);
    (*(void (**)(uint64_t, _BYTE *, void **, double))(*(_QWORD *)v76 + 176))(v76, v1116, &v1101[1], v77);
  }
  kdebug_trace();
  v843 = 0;
  v857 = 0;
  v858 = 0;
  v867 = 0;
  memset(v842, 0, 57);
  v851 = 0u;
  v852 = 0u;
  v853 = 0u;
  v854 = 0u;
  v855 = 0u;
  v844 = 0u;
  v845 = 0u;
  v846 = 0u;
  v847 = 0u;
  v848 = 0u;
  v849 = 0u;
  v850 = 0u;
  v856 = 0;
  v860 = 0;
  v859 = 0;
  v862 = 0;
  v861 = 0;
  v865 = 0;
  v863 = 0;
  v864 = 0;
  v866 = 0;
  LOBYTE(v833) = 0;
  v841 = 0;
  LOBYTE(v828[0]) = 0;
  v832 = 0;
  LOBYTE(v821[0]) = 0;
  v827 = 0;
  v819[0] = 0;
  v819[1] = 0;
  v820 = 0;
  v818 = 0;
  if (v1112)
    sub_20EE5776C((int64x2_t *)v64, (uint64_t)v842, (uint64_t *)v819, &v833, &v818, (uint64_t)v828, (uint64_t)v821);
  if (!v1115)
    goto LABEL_205;
  sub_20F2F2200(*(_QWORD *)(v64 + 11472), v1115, (__n128 *)object);
  v78 = *(char **)(v64 + 11680);
  v79 = *(char **)(v64 + 11672);
  v80 = v78 - v79;
  if (v78 == v79)
    v81 = 0;
  else
    v81 = 32 * (v78 - v79) - 1;
  v82 = *(_QWORD *)(v64 + 11696);
  v83 = *(_QWORD *)(v64 + 11704);
  v84 = v83 + v82;
  if (v81 != v83 + v82)
    goto LABEL_195;
  if (v82 < 0x100)
  {
    v95 = v80 >> 3;
    v96 = v64;
    v97 = *(char **)(v64 + 11688);
    v98 = *(char **)(v96 + 11664);
    if (v80 >> 3 < (unint64_t)((v97 - v98) >> 3))
    {
      v99 = operator new(0x1000uLL);
      v100 = v99;
      if (v97 != v78)
      {
        *(_QWORD *)v78 = v99;
        v64 = v810;
        *(_QWORD *)(v810 + 11680) += 8;
        goto LABEL_194;
      }
      if (v79 == v98)
      {
        if (v78 == v79)
          v142 = 1;
        else
          v142 = (v97 - v79) >> 2;
        if (v142 >> 61)
          goto LABEL_1063;
        v143 = (char *)operator new(8 * v142);
        v144 = (v142 + 3) >> 2;
        v120 = &v143[8 * v144];
        v145 = &v143[8 * v142];
        v146 = v120;
        v64 = v810;
        if (v78 != v79)
        {
          v146 = &v120[8 * v95];
          v147 = &v143[8 * v144];
          v148 = v79;
          if ((unint64_t)(v80 - 8) < 0x38)
            goto LABEL_1093;
          v149 = &v143[8 * v144];
          v147 = v149;
          v148 = v79;
          if ((unint64_t)(v149 - v79) < 0x20)
            goto LABEL_1093;
          v150 = ((unint64_t)(v80 - 8) >> 3) + 1;
          v151 = 8 * (v150 & 0x3FFFFFFFFFFFFFFCLL);
          v147 = &v120[v151];
          v148 = &v79[v151];
          v152 = (__int128 *)(v79 + 16);
          v153 = v149 + 16;
          v154 = v150 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v155 = *v152;
            *(v153 - 1) = *(v152 - 1);
            *v153 = v155;
            v152 += 2;
            v153 += 2;
            v154 -= 4;
          }
          while (v154);
          if (v150 != (v150 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_1093:
            do
            {
              v156 = *(_QWORD *)v148;
              v148 += 8;
              *(_QWORD *)v147 = v156;
              v147 += 8;
            }
            while (v147 != v146);
          }
        }
        *(_QWORD *)(v810 + 11664) = v143;
        *(_QWORD *)(v810 + 11672) = v120;
        *(_QWORD *)(v810 + 11680) = v146;
        *(_QWORD *)(v810 + 11688) = v145;
        if (v79)
        {
          operator delete(v79);
          v120 = *(char **)(v810 + 11672);
        }
      }
      else
      {
        v120 = v79;
        v64 = v810;
      }
      *((_QWORD *)v120 - 1) = v100;
      v157 = *(char **)(v64 + 11672);
      *(_QWORD *)(v64 + 11672) = v157 - 8;
      v158 = *((_QWORD *)v157 - 1);
      *(_QWORD *)(v64 + 11672) = v157;
      v159 = *(char **)(v64 + 11680);
      if (v159 != *(char **)(v64 + 11688))
      {
LABEL_178:
        *(_QWORD *)v159 = v158;
        goto LABEL_193;
      }
      v160 = *(char **)(v64 + 11664);
      if (v157 > v160)
      {
        v161 = (v157 - v160) >> 3;
        if (v161 >= -1)
          v162 = v161 + 1;
        else
          v162 = v161 + 2;
        v163 = v162 >> 1;
        v164 = -v163;
        v165 = &v157[-8 * v163];
        v166 = v159 - v157;
        if (v159 == v157)
        {
          v167 = v810;
        }
        else
        {
          memmove(&v157[-8 * v163], v157, v159 - v157);
          v167 = v810;
          v157 = *(char **)(v810 + 11672);
        }
        v777 = &v165[v166];
        *(_QWORD *)(v167 + 11680) = &v165[v166];
        *(_QWORD *)(v167 + 11672) = &v157[8 * v164];
        v64 = v167;
        *(_QWORD *)v777 = v158;
        goto LABEL_193;
      }
      if (v159 == v160)
        v769 = 1;
      else
        v769 = (v159 - v160) >> 2;
      if (v769 >> 61)
LABEL_1063:
        sub_20E877A38();
      v770 = (char *)operator new(8 * v769);
      v771 = v769 >> 2;
      v772 = &v770[8 * (v769 >> 2)];
      v773 = &v770[8 * v769];
      v774 = v159 - v157;
      _ZF = v159 == v157;
      v159 = v772;
      v64 = v810;
      if (!_ZF)
      {
        v159 = &v772[v774 & 0xFFFFFFFFFFFFFFF8];
        v775 = v774 - 8;
        if (v775 < 0x38)
        {
          v776 = v772;
          do
          {
LABEL_1031:
            v786 = *(_QWORD *)v157;
            v157 += 8;
            *(_QWORD *)v776 = v786;
            v776 += 8;
          }
          while (v776 != v159);
          goto LABEL_1032;
        }
        v778 = &v770[8 * v771];
        v776 = v772;
        if ((unint64_t)(v778 - v157) < 0x20)
          goto LABEL_1031;
        v779 = (v775 >> 3) + 1;
        v780 = 8 * (v779 & 0x3FFFFFFFFFFFFFFCLL);
        v776 = &v772[v780];
        v781 = &v157[v780];
        v782 = (__int128 *)(v157 + 16);
        v783 = v778 + 16;
        v784 = v779 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v785 = *v782;
          *(v783 - 1) = *(v782 - 1);
          *v783 = v785;
          v782 += 2;
          v783 += 2;
          v784 -= 4;
        }
        while (v784);
        v157 = v781;
        if (v779 != (v779 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_1031;
      }
LABEL_1032:
      *(_QWORD *)(v810 + 11664) = v770;
      *(_QWORD *)(v810 + 11672) = v772;
      *(_QWORD *)(v810 + 11680) = v159;
      *(_QWORD *)(v810 + 11688) = v773;
      if (v160)
      {
        operator delete(v160);
        v159 = *(char **)(v810 + 11680);
      }
      goto LABEL_178;
    }
    if (v97 == v98)
      v101 = 1;
    else
      v101 = (v97 - v98) >> 2;
    if (v101 >> 61)
      goto LABEL_1063;
    v102 = (char *)operator new(8 * v101);
    v103 = operator new(0x1000uLL);
    v104 = v103;
    v105 = &v102[8 * v95];
    v106 = &v102[8 * v101];
    if (v95 == v101)
    {
      if (v80 < 1)
      {
        if (v78 == v79)
          v121 = 1;
        else
          v121 = v80 >> 2;
        if (v121 >> 61)
          sub_20E877A38();
        v105 = (char *)operator new(8 * v121);
        v106 = &v105[8 * v121];
        operator delete(v102);
        v78 = *(char **)(v810 + 11680);
        v122 = *(char **)(v810 + 11672);
        v102 = v105;
        *(_QWORD *)v105 = v104;
        v108 = v105 + 8;
        if (v78 == v122)
          goto LABEL_124;
        goto LABEL_144;
      }
      v107 = v95 + 2;
      if (v95 >= -1)
        v107 = v95 + 1;
      v105 -= 8 * (v107 >> 1);
    }
    *(_QWORD *)v105 = v103;
    v108 = v105 + 8;
    if (v78 == v79)
    {
LABEL_124:
      v109 = v105;
      v110 = v108;
LABEL_125:
      v111 = *(void **)(v810 + 11664);
      *(_QWORD *)(v810 + 11664) = v102;
      *(_QWORD *)(v810 + 11672) = v109;
      *(_QWORD *)(v810 + 11680) = v110;
      *(_QWORD *)(v810 + 11688) = v106;
      v64 = v810;
      if (v111)
        operator delete(v111);
      goto LABEL_194;
    }
    do
    {
LABEL_144:
      if (v105 == v102)
      {
        if (v108 >= v106)
        {
          if (v106 == v105)
            v127 = 1;
          else
            v127 = (v106 - v105) >> 2;
          if (v127 >> 61)
            sub_20E877A38();
          v128 = (char *)operator new(8 * v127);
          v102 = v128;
          v129 = (v127 + 3) >> 2;
          v123 = &v128[8 * v129];
          v110 = v123;
          v130 = v108 - v105;
          if (v108 != v105)
          {
            v110 = &v123[v130 & 0xFFFFFFFFFFFFFFF8];
            v131 = v130 - 8;
            v132 = &v128[8 * v129];
            v133 = v105;
            if (v131 < 0x38)
              goto LABEL_1094;
            v134 = 8 * v129;
            v132 = &v128[8 * v129];
            v133 = v105;
            if ((unint64_t)(v132 - v105) < 0x20)
              goto LABEL_1094;
            v135 = (v131 >> 3) + 1;
            v136 = 8 * (v135 & 0x3FFFFFFFFFFFFFFCLL);
            v132 = &v123[v136];
            v133 = &v105[v136];
            v137 = (__int128 *)(v105 + 16);
            v138 = &v128[v134 + 16];
            v139 = v135 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v140 = *v137;
              *((_OWORD *)v138 - 1) = *(v137 - 1);
              *(_OWORD *)v138 = v140;
              v137 += 2;
              v138 += 32;
              v139 -= 4;
            }
            while (v139);
            if (v135 != (v135 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_1094:
              do
              {
                v141 = *(_QWORD *)v133;
                v133 += 8;
                *(_QWORD *)v132 = v141;
                v132 += 8;
              }
              while (v132 != v110);
            }
          }
          v106 = &v128[8 * v127];
          operator delete(v105);
        }
        else
        {
          v125 = (v106 - v108) >> 3;
          if (v125 >= -1)
            v126 = v125 + 1;
          else
            v126 = v125 + 2;
          v110 = &v108[8 * (v126 >> 1)];
          v123 = &v105[8 * (v126 >> 1)];
          if (v108 == v105)
          {
            v102 = v108;
          }
          else
          {
            memmove(&v105[8 * (v126 >> 1)], v105, v108 - v105);
            v102 = v105;
          }
        }
      }
      else
      {
        v123 = v105;
        v110 = v108;
      }
      v124 = *((_QWORD *)v78 - 1);
      v78 -= 8;
      *((_QWORD *)v123 - 1) = v124;
      v109 = v123 - 8;
      v108 = v110;
      v105 = v109;
    }
    while (v78 != *(char **)(v810 + 11672));
    goto LABEL_125;
  }
  *(_QWORD *)(v64 + 11696) = v82 - 256;
  v86 = v79 + 8;
  v85 = *(_QWORD *)v79;
  *(_QWORD *)(v64 + 11672) = v79 + 8;
  if (v78 != *(char **)(v64 + 11688))
    goto LABEL_192;
  v87 = *(char **)(v64 + 11664);
  if (v86 > v87)
  {
    v88 = (v86 - v87) >> 3;
    if (v88 >= -1)
      v89 = v88 + 1;
    else
      v89 = v88 + 2;
    v90 = v89 >> 1;
    v91 = -v90;
    v92 = &v86[-8 * v90];
    v93 = v78 - v86;
    if (v78 != v86)
    {
      memmove(&v86[-8 * v90], v86, v78 - v86);
      v78 = *(char **)(v810 + 11672);
    }
    v94 = &v78[8 * v91];
    v78 = &v92[v93];
    *(_QWORD *)(v810 + 11680) = &v92[v93];
    *(_QWORD *)(v810 + 11672) = v94;
    v64 = v810;
    goto LABEL_192;
  }
  if (v78 == v87)
    v112 = 1;
  else
    v112 = (v78 - v87) >> 2;
  if (v112 >> 61)
    goto LABEL_1063;
  v113 = (char *)operator new(8 * v112);
  v114 = v112 >> 2;
  v115 = &v113[8 * (v112 >> 2)];
  v116 = &v113[8 * v112];
  v117 = v78 - v86;
  _ZF = v78 == v86;
  v78 = v115;
  v64 = v810;
  if (!_ZF)
  {
    v78 = &v115[v117 & 0xFFFFFFFFFFFFFFF8];
    v118 = v117 - 8;
    if (v118 < 0x38)
    {
      v119 = v115;
      goto LABEL_189;
    }
    v168 = &v113[8 * v114];
    v119 = v115;
    if ((unint64_t)(v168 - v86) < 0x20)
      goto LABEL_1095;
    v169 = (v118 >> 3) + 1;
    v170 = 8 * (v169 & 0x3FFFFFFFFFFFFFFCLL);
    v119 = &v115[v170];
    v86 += v170;
    v171 = (__int128 *)(v79 + 24);
    v172 = v168 + 16;
    v173 = v169 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v174 = *v171;
      *(v172 - 1) = *(v171 - 1);
      *v172 = v174;
      v171 += 2;
      v172 += 2;
      v173 -= 4;
    }
    while (v173);
    if (v169 != (v169 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1095:
      do
      {
LABEL_189:
        v175 = *(_QWORD *)v86;
        v86 += 8;
        *(_QWORD *)v119 = v175;
        v119 += 8;
      }
      while (v119 != v78);
    }
  }
  *(_QWORD *)(v810 + 11664) = v113;
  *(_QWORD *)(v810 + 11672) = v115;
  *(_QWORD *)(v810 + 11680) = v78;
  *(_QWORD *)(v810 + 11688) = v116;
  if (v87)
  {
    operator delete(v87);
    v78 = *(char **)(v810 + 11680);
  }
LABEL_192:
  *(_QWORD *)v78 = v85;
LABEL_193:
  *(_QWORD *)(v64 + 11680) += 8;
LABEL_194:
  v79 = *(char **)(v64 + 11672);
  v83 = *(_QWORD *)(v64 + 11704);
  v84 = v83 + *(_QWORD *)(v64 + 11696);
LABEL_195:
  v176 = *(_QWORD *)&object[8];
  *(_OWORD *)(*(_QWORD *)&v79[(v84 >> 5) & 0x7FFFFFFFFFFFFF8] + 16 * v84) = *(_OWORD *)object;
  if (v176)
  {
    v177 = (unint64_t *)(v176 + 8);
    do
      v178 = __ldxr(v177);
    while (__stxr(v178 + 1, v177));
    v83 = *(_QWORD *)(v64 + 11704);
  }
  *(_QWORD *)(v64 + 11704) = v83 + 1;
  v179 = *(std::__shared_weak_count **)&object[8];
  if (*(_QWORD *)&object[8])
  {
    v180 = (unint64_t *)(*(_QWORD *)&object[8] + 8);
    do
      v181 = __ldaxr(v180);
    while (__stlxr(v181 - 1, v180));
    if (!v181)
    {
      ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
      std::__shared_weak_count::__release_weak(v179);
    }
  }
  v64 = v810;
LABEL_205:
  if (*(_BYTE *)(v64 + 8737))
    sub_20EE5776C((int64x2_t *)v64, (uint64_t)v842, (uint64_t *)v819, &v833, &v818, (uint64_t)v828, (uint64_t)v821);
  v797 = (_BYTE *)(v64 + 10785);
  if (v1118)
    v182 = (*(unsigned __int8 *)(v64 + 49) | v818) != 0;
  else
    v182 = 0;
  *(_BYTE *)(v64 + 11809) = v182;
  kdebug_trace();
  *(_BYTE *)v805 = 0;
  *(_BYTE *)(v805 + 128) = 0;
  if (v1112)
  {
    kdebug_trace();
    v183 = (_QWORD *)v805;
    if (*(_BYTE *)(v805 + 128))
      v183 = sub_20E9C1D58((_QWORD *)v805);
    *((_OWORD *)v183 + 6) = 0u;
    *((_OWORD *)v183 + 7) = 0u;
    *((_OWORD *)v183 + 4) = 0u;
    *((_OWORD *)v183 + 5) = 0u;
    *((_OWORD *)v183 + 2) = 0u;
    *((_OWORD *)v183 + 3) = 0u;
    *(_OWORD *)v183 = 0u;
    *((_OWORD *)v183 + 1) = 0u;
    *((_BYTE *)v183 + 128) = 1;
    v869.tv_nsec = 0;
    LODWORD(v869.tv_sec) = 0;
    (*(void (**)(_QWORD, _QWORD, _QWORD, timespec *))(**(_QWORD **)(v64 + 8) + 344))(*(_QWORD *)(v64 + 8), v818, *(unsigned __int8 *)(v64 + 49), &v869);
    sub_20F02135C(*(_QWORD *)(v810 + 11464), (uint64_t)v870);
    if (!v1114[24])
      sub_20E866B34();
    v184 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v810 + 8) + 432))(*(_QWORD *)(v810 + 8));
    v816 = *(_OWORD *)(v184 + 4928);
    v817 = *(_QWORD *)(v184 + 4944);
    v814 = *(_OWORD *)(v810 + 12112);
    v815 = *(_QWORD *)(v810 + 12128);
    (*(void (**)(__int128 *__return_ptr, __uint64_t))(*(_QWORD *)v810 + 336))(&v951, v810);
    sub_20EE799F4((uint64_t)&v1101[1], (uint64_t)v842, (uint64_t)v870, (uint64_t)v1116, (uint64_t)&v1119, (uint64_t)v1114, v1113, &v869, (uint64_t)object, (uint64_t)&v816, (uint64_t)&v814, (uint64_t)&v951, **(_QWORD **)(v810 + 11488), (uint64_t)v1122);
    v795 = (_BYTE *)(v64 + 8601);
    v185 = (char *)operator new(0x1580uLL);
    *((_QWORD *)v185 + 1) = 0;
    *((_QWORD *)v185 + 2) = 0;
    *(_QWORD *)v185 = &off_24C9B07F8;
    *(_OWORD *)(v185 + 24) = *(_OWORD *)object;
    *(_OWORD *)(v185 + 36) = *(_OWORD *)&object[12];
    sub_20EE6958C((uint64_t)(v185 + 56), (uint64_t)&object[32]);
    *(_OWORD *)(v185 + 3832) = v1036;
    *(_OWORD *)(v185 + 3848) = v1037;
    *(_OWORD *)(v185 + 3864) = *(_OWORD *)v1038;
    *((_QWORD *)v185 + 485) = v1039;
    *(_OWORD *)v1038 = 0u;
    *(_QWORD *)&v1039 = 0;
    *((_QWORD *)v185 + 486) = *((_QWORD *)&v1039 + 1);
    v185[3896] = v1040;
    v186 = v1042;
    *((_OWORD *)v185 + 244) = v1041;
    *((_OWORD *)v185 + 245) = v186;
    v1041 = 0u;
    v1042 = 0u;
    *((_OWORD *)v185 + 246) = v1043;
    v187 = v1044;
    v188 = v1045;
    v189 = v1046;
    *((_OWORD *)v185 + 250) = v1047;
    *((_OWORD *)v185 + 249) = v189;
    *((_OWORD *)v185 + 248) = v188;
    *((_OWORD *)v185 + 247) = v187;
    v190 = v1048;
    v191 = v1049;
    v192 = v1050;
    *((_OWORD *)v185 + 254) = v1051;
    *((_OWORD *)v185 + 253) = v192;
    *((_OWORD *)v185 + 252) = v191;
    *((_OWORD *)v185 + 251) = v190;
    v193 = v1052;
    v194 = v1053;
    v195 = v1054[0];
    *(_OWORD *)(v185 + 4123) = *(_OWORD *)((char *)v1054 + 11);
    *((_OWORD *)v185 + 257) = v195;
    *((_OWORD *)v185 + 256) = v194;
    *((_OWORD *)v185 + 255) = v193;
    sub_20EE69B5C((uint64_t)(v185 + 4144), (uint64_t)v1055);
    v196 = v1080;
    *((_OWORD *)v185 + 319) = v1081;
    v197 = v1083;
    *((_OWORD *)v185 + 320) = v1082;
    *((_OWORD *)v185 + 321) = v197;
    *((_OWORD *)v185 + 322) = v1084;
    v198 = v1079;
    *((_OWORD *)v185 + 316) = v1078;
    *((_OWORD *)v185 + 317) = v198;
    *((_OWORD *)v185 + 318) = v196;
    v199 = *(_OWORD *)&v1085[16];
    *((_OWORD *)v185 + 323) = *(_OWORD *)v1085;
    *((_OWORD *)v185 + 324) = v199;
    *((_QWORD *)v185 + 652) = *(_QWORD *)&v1085[48];
    *((_OWORD *)v185 + 325) = *(_OWORD *)&v1085[32];
    *((_QWORD *)v185 + 653) = *(_QWORD *)v1086;
    *((_QWORD *)v185 + 656) = *(_QWORD *)&v1086[24];
    *((_OWORD *)v185 + 327) = *(_OWORD *)&v1086[8];
    *((_QWORD *)v185 + 659) = v1088;
    *(_OWORD *)(v185 + 5256) = v1087;
    *((_QWORD *)v185 + 662) = *(_QWORD *)&v1089[16];
    *((_OWORD *)v185 + 330) = *(_OWORD *)v1089;
    v200 = v1090;
    *((_QWORD *)v185 + 665) = v1091;
    *(_OWORD *)(v185 + 5304) = v200;
    v201 = *(_OWORD *)&v1092[16];
    *((_OWORD *)v185 + 333) = *(_OWORD *)v1092;
    v202 = *(_OWORD *)v1093;
    v203 = *(_OWORD *)&v1093[16];
    *((_QWORD *)v185 + 674) = v1094;
    *((_OWORD *)v185 + 336) = v203;
    *((_OWORD *)v185 + 335) = v202;
    *((_OWORD *)v185 + 334) = v201;
    *(_OWORD *)(v185 + 5400) = *(_OWORD *)v1095;
    v204 = *(_OWORD *)&v1095[16];
    v205 = *(_OWORD *)v1096;
    v206 = *(_OWORD *)&v1096[16];
    *((_QWORD *)v185 + 683) = v1097;
    *(_OWORD *)(v185 + 5448) = v206;
    *(_OWORD *)(v185 + 5432) = v205;
    *(_OWORD *)(v185 + 5416) = v204;
    *((_QWORD *)v185 + 684) = v1098;
    *(_OWORD *)(v185 + 5480) = *(_OWORD *)v1099;
    *((_QWORD *)v185 + 687) = v1100;
    *(_OWORD *)v1099 = 0u;
    v1100 = 0;
    v207 = *(std::__shared_weak_count **)(v805 + 8);
    *(_QWORD *)v805 = v185 + 24;
    *(_QWORD *)(v805 + 8) = v185;
    if (v207)
    {
      v208 = (unint64_t *)&v207->__shared_owners_;
      do
        v209 = __ldaxr(v208);
      while (__stlxr(v209 - 1, v208));
      if (!v209)
      {
        ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
        std::__shared_weak_count::__release_weak(v207);
      }
    }
    if (v1099[0])
    {
      v1099[1] = v1099[0];
      operator delete(v1099[0]);
    }
    sub_20E91E818((uint64_t)v1055);
    v210 = (std::__shared_weak_count *)*((_QWORD *)&v1042 + 1);
    if (*((_QWORD *)&v1042 + 1))
    {
      v211 = (unint64_t *)(*((_QWORD *)&v1042 + 1) + 8);
      do
        v212 = __ldaxr(v211);
      while (__stlxr(v212 - 1, v211));
      if (!v212)
      {
        ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
        std::__shared_weak_count::__release_weak(v210);
      }
    }
    v213 = (std::__shared_weak_count *)*((_QWORD *)&v1041 + 1);
    if (*((_QWORD *)&v1041 + 1))
    {
      v214 = (unint64_t *)(*((_QWORD *)&v1041 + 1) + 8);
      do
        v215 = __ldaxr(v214);
      while (__stlxr(v215 - 1, v214));
      if (!v215)
      {
        ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
        std::__shared_weak_count::__release_weak(v213);
      }
    }
    if (v1038[0])
    {
      v1038[1] = v1038[0];
      operator delete(v1038[0]);
    }
    sub_20E91EA40((uint64_t)&object[32]);
    v216 = v954;
    if (v954)
    {
      v217 = (unint64_t *)&v954->__shared_owners_;
      do
        v218 = __ldaxr(v217);
      while (__stlxr(v218 - 1, v217));
      if (!v218)
      {
        ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
        std::__shared_weak_count::__release_weak(v216);
      }
    }
    v219 = v952;
    if (v952)
    {
      v220 = (unint64_t *)&v952->__shared_owners_;
      do
        v221 = __ldaxr(v220);
      while (__stlxr(v221 - 1, v220));
      if (!v221)
      {
        ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
        std::__shared_weak_count::__release_weak(v219);
      }
    }
    v222 = *(std::__shared_weak_count **)&v873[16];
    if (*(_QWORD *)&v873[16])
    {
      v223 = (unint64_t *)(*(_QWORD *)&v873[16] + 8);
      do
        v224 = __ldaxr(v223);
      while (__stlxr(v224 - 1, v223));
      if (!v224)
      {
        ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
        std::__shared_weak_count::__release_weak(v222);
      }
    }
    v225 = *(std::__shared_weak_count **)v873;
    if (*(_QWORD *)v873)
    {
      v226 = (unint64_t *)(*(_QWORD *)v873 + 8);
      do
        v227 = __ldaxr(v226);
      while (__stlxr(v227 - 1, v226));
      if (!v227)
      {
        ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
        std::__shared_weak_count::__release_weak(v225);
      }
    }
    if (v870[0])
    {
      v870[1] = v870[0];
      operator delete((void *)v870[0]);
    }
    v797[1024] = 0;
    if (**(_BYTE **)v805)
    {
      v228 = sub_210219C18();
      v229 = *(_QWORD *)v805;
      v230 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
      if ((v230 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
      {
        __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DDD0);
      }
      if (atomic_load(&qword_254A5A450))
      {
        v232 = *(_QWORD *)(v229 + 32);
        *(_DWORD *)object = 134217984;
        *(_QWORD *)&object[4] = v232;
        v233 = (char *)_os_log_send_and_compose_impl();
        v234 = strlen(v233);
        v870[0] = 0;
        pthread_threadid_np(0, v870);
        v235 = v870[0];
        timespec_get((timespec *)v870, 1);
        sub_210219E20(object, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v228 + 1), (__int128 *)(v228 + 5), "Sending Moving Platform Hint to the user at %f", 0x2EuLL, v233, v234, v235, v870);
        std::mutex::lock(&stru_254A5A410);
        v236 = qword_254A5A458;
        for (j = unk_254A5A460; v236 != j; v236 += 40)
        {
          v238 = *(_QWORD *)(v236 + 32);
          if (!v238)
            sub_20E86D37C();
          (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v238 + 48))(v238, object);
        }
        std::mutex::unlock(&stru_254A5A410);
        if (SHIBYTE(v968) < 0)
        {
          operator delete(v967[1]);
          if (SHIBYTE(v967[0]) < 0)
            goto LABEL_266;
LABEL_263:
          if (v966[8])
          {
LABEL_267:
            if ((v966[7] & 0x80000000) != 0)
              operator delete(v965[0]);
          }
        }
        else
        {
          if ((SHIBYTE(v967[0]) & 0x80000000) == 0)
            goto LABEL_263;
LABEL_266:
          operator delete(*(void **)&v966[16]);
          if (v966[8])
            goto LABEL_267;
        }
        if (object[56] && (object[55] & 0x80000000) != 0)
          operator delete(*(void **)&object[32]);
        if ((object[31] & 0x80000000) != 0)
          operator delete(*(void **)&object[8]);
        if (v233)
          free(v233);
      }
      if (os_signpost_enabled((os_log_t)*v228))
      {
        v239 = *(_QWORD *)(v229 + 32);
        *(_DWORD *)object = 134217984;
        *(_QWORD *)&object[4] = v239;
        _os_signpost_emit_unreliably_with_name_impl();
      }
      kdebug_trace();
    }
    v240 = (char *)operator new(0x68uLL);
    v796 = v182;
    *((_QWORD *)v240 + 1) = 0;
    *((_QWORD *)v240 + 2) = 0;
    *(_QWORD *)v240 = &off_24C9C4AE0;
    *(_OWORD *)(v240 + 40) = 0u;
    *(_OWORD *)(v240 + 56) = 0u;
    *(_OWORD *)(v240 + 72) = 0u;
    *(_OWORD *)(v240 + 88) = 0u;
    *(_OWORD *)(v240 + 24) = 0u;
    *(_QWORD *)&v813 = v240 + 24;
    *((_QWORD *)&v813 + 1) = v240;
    if (*v797 || *(_BYTE *)(v810 + 9240))
    {
      (*(void (**)(_BYTE *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(v810 + 8) + 240))(object, *(_QWORD *)(v810 + 8), 1);
      v241 = operator new(0x208uLL);
      v241[1] = 0;
      v241[2] = 0;
      *v241 = &off_24C9C4B30;
      v242 = sub_20EAFE3B4((uint64_t)(v241 + 3), (uint64_t)object);
      v243 = v240[40];
      *((_QWORD *)v240 + 3) = v242;
      if (v243)
      {
        v244 = (std::__shared_weak_count *)*((_QWORD *)v240 + 4);
        *((_QWORD *)v240 + 4) = v241;
        if (v244)
        {
          v245 = (unint64_t *)&v244->__shared_owners_;
          do
            v246 = __ldaxr(v245);
          while (__stlxr(v246 - 1, v245));
          if (!v246)
          {
            ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
            std::__shared_weak_count::__release_weak(v244);
          }
        }
      }
      else
      {
        *((_QWORD *)v240 + 4) = v241;
        v240[40] = 1;
      }
      sub_20EAFDDD0((uint64_t)object);
    }
    v247 = v797;
    if (v797[1])
    {
      sub_20F303C30(*(_QWORD **)(v810 + 11472), v797[2], (uint64_t)object);
      *(_QWORD *)object = *(_QWORD *)(*(_QWORD *)v805 + 40);
      v248 = *(_QWORD *)object;
      v249 = (char *)operator new(0x170uLL);
      *((_QWORD *)v249 + 1) = 0;
      *((_QWORD *)v249 + 2) = 0;
      *((_QWORD *)v249 + 3) = v248;
      v798 = v249 + 24;
      v801 = v249;
      *((_QWORD *)v249 + 5) = 0;
      v250 = (uint64_t **)(v249 + 40);
      *((_QWORD *)v249 + 4) = v249 + 40;
      v251 = (uint64_t ***)(v249 + 32);
      *(_QWORD *)v249 = &off_24C9C4B80;
      *((_QWORD *)v249 + 6) = 0;
      v252 = *(_QWORD **)&object[8];
      if (*(_BYTE **)&object[8] == &object[16])
      {
LABEL_291:
        *((_QWORD *)v249 + 7) = 0;
        *((_QWORD *)v249 + 8) = 0;
        *((_QWORD *)v249 + 9) = 0;
        v253 = *(_QWORD *)&object[32];
        v254 = *(_QWORD *)&object[40];
        v255 = *(_QWORD *)&object[40] - *(_QWORD *)&object[32];
        if (*(_QWORD *)&object[40] != *(_QWORD *)&object[32])
        {
          if (v255 < 0)
            sub_20E867F44();
          v256 = (char *)operator new(*(_QWORD *)&object[40] - *(_QWORD *)&object[32]);
          v257 = 0;
          *((_QWORD *)v249 + 7) = v256;
          *((_QWORD *)v249 + 8) = v256;
          *((_QWORD *)v249 + 9) = &v256[16 * (v255 >> 4)];
          do
          {
            v258 = v253 + v257;
            v259 = &v256[v257];
            *(_QWORD *)v259 = *(_QWORD *)(v253 + v257);
            *((_DWORD *)v259 + 2) = *(_DWORD *)(v253 + v257 + 8);
            v257 += 16;
          }
          while (v258 + 16 != v254);
          *((_QWORD *)v249 + 8) = &v256[v257];
        }
        *((_QWORD *)v249 + 10) = 0;
        *((_QWORD *)v249 + 11) = 0;
        *((_QWORD *)v249 + 12) = 0;
        v260 = *(_QWORD *)&object[56];
        v261 = v965[0];
        v262 = (int64_t)v965[0] - *(_QWORD *)&object[56];
        if (v965[0] != *(void **)&object[56])
        {
          v263 = 0xAAAAAAAAAAAAAAABLL * (v262 >> 3);
          if (v263 > 0xAAAAAAAAAAAAAAALL)
            sub_20E867F44();
          v264 = (char *)operator new(v262);
          v265 = 0;
          *((_QWORD *)v249 + 10) = v264;
          *((_QWORD *)v249 + 11) = v264;
          *((_QWORD *)v249 + 12) = &v264[24 * v263];
          do
          {
            v266 = v260 + v265;
            v267 = &v264[v265];
            *(_QWORD *)v267 = *(_QWORD *)(v260 + v265);
            *(_OWORD *)(v267 + 8) = *(_OWORD *)(v260 + v265 + 8);
            v265 += 24;
          }
          while ((void *)(v266 + 24) != v261);
          *((_QWORD *)v249 + 11) = &v264[v265];
        }
        v268 = *(_OWORD *)v966;
        *((_QWORD *)v249 + 16) = 0;
        *(_OWORD *)(v249 + 104) = v268;
        v269 = *(void **)&v966[24];
        *((_QWORD *)v249 + 15) = *(_QWORD *)&v966[16];
        *((_QWORD *)v249 + 17) = 0;
        *((_QWORD *)v249 + 18) = 0;
        v270 = (char *)v967[0] - (char *)v269;
        if (v967[0] != v269)
        {
          if (v270 < 0)
            sub_20E867F44();
          v271 = (char *)operator new((char *)v967[0] - (char *)v269);
          *((_QWORD *)v249 + 16) = v271;
          *((_QWORD *)v249 + 17) = v271;
          v272 = &v271[16 * (v270 >> 4)];
          *((_QWORD *)v249 + 18) = v272;
          memcpy(v271, v269, v270 - 4);
          *((_QWORD *)v249 + 17) = v272;
        }
        *((_QWORD *)v249 + 19) = 0;
        *((_QWORD *)v249 + 20) = 0;
        *((_QWORD *)v249 + 21) = 0;
        v273 = (const void *)v968;
        v274 = *((_QWORD *)&v968 + 1) - v968;
        if (*((_QWORD *)&v968 + 1) != (_QWORD)v968)
        {
          if (v274 < 0)
            sub_20E867F44();
          v275 = (char *)operator new(*((_QWORD *)&v968 + 1) - v968);
          *((_QWORD *)v249 + 19) = v275;
          *((_QWORD *)v249 + 20) = v275;
          v276 = &v275[16 * (v274 >> 4)];
          *((_QWORD *)v249 + 21) = v276;
          memcpy(v275, v273, v274 - 4);
          *((_QWORD *)v249 + 20) = v276;
        }
        *((_QWORD *)v249 + 22) = 0;
        *((_QWORD *)v249 + 23) = 0;
        *((_QWORD *)v249 + 24) = 0;
        v277 = *((_QWORD *)&v969 + 1);
        v278 = v970;
        v870[0] = (__uint64_t)(v249 + 176);
        LOBYTE(v870[1]) = 0;
        v279 = v970 - *((_QWORD *)&v969 + 1);
        if ((_QWORD)v970 != *((_QWORD *)&v969 + 1))
        {
          v280 = 0x2E8BA2E8BA2E8BA3 * (v279 >> 4);
          if (v280 >= 0x1745D1745D1745ELL)
            sub_20E867F44();
          v281 = (char *)operator new(v279);
          v282 = 0;
          *((_QWORD *)v249 + 22) = v281;
          *((_QWORD *)v249 + 23) = v281;
          *((_QWORD *)v249 + 24) = &v281[176 * v280];
          do
          {
            *(_QWORD *)&v281[v282] = *(_QWORD *)(v277 + v282);
            sub_20EE6CA98((uint64_t)&v281[v282 + 8], (__int128 *)(v277 + v282 + 8));
            v282 += 176;
          }
          while (v277 + v282 != v278);
          *((_QWORD *)v249 + 23) = &v281[v282];
        }
        *((_QWORD *)v249 + 25) = 0;
        *((_QWORD *)v249 + 26) = 0;
        *((_QWORD *)v249 + 27) = 0;
        v283 = (const void *)v971;
        v284 = *((_QWORD *)&v971 + 1) - v971;
        if (*((_QWORD *)&v971 + 1) != (_QWORD)v971)
        {
          if (v284 < 0)
            sub_20E92CED8();
          v285 = (char *)operator new(*((_QWORD *)&v971 + 1) - v971);
          *((_QWORD *)v249 + 25) = v285;
          *((_QWORD *)v249 + 26) = v285;
          v286 = &v285[8 * (v284 >> 3)];
          *((_QWORD *)v249 + 27) = v286;
          memcpy(v285, v283, v284);
          *((_QWORD *)v249 + 26) = v286;
        }
        *((_QWORD *)v249 + 28) = 0;
        *((_QWORD *)v249 + 29) = 0;
        *((_QWORD *)v249 + 30) = 0;
        v287 = (const void *)*((_QWORD *)&v972 + 1);
        v288 = *(_QWORD *)v973 - *((_QWORD *)&v972 + 1);
        if (*(_QWORD *)v973 != *((_QWORD *)&v972 + 1))
        {
          if (v288 < 0)
            sub_20E92CED8();
          v289 = (char *)operator new(*(_QWORD *)v973 - *((_QWORD *)&v972 + 1));
          *((_QWORD *)v249 + 28) = v289;
          *((_QWORD *)v249 + 29) = v289;
          v290 = &v289[8 * (v288 >> 3)];
          *((_QWORD *)v249 + 30) = v290;
          memcpy(v289, v287, v288);
          *((_QWORD *)v249 + 29) = v290;
        }
        *((_QWORD *)v249 + 31) = 0;
        *((_QWORD *)v249 + 32) = 0;
        *((_QWORD *)v249 + 33) = 0;
        v291 = *(uint64_t **)&v973[16];
        v292 = *(uint64_t **)&v973[24];
        v293 = *(_QWORD *)&v973[24] - *(_QWORD *)&v973[16];
        if (*(_QWORD *)&v973[24] != *(_QWORD *)&v973[16])
        {
          v294 = 0xAAAAAAAAAAAAAAABLL * (v293 >> 3);
          if (v294 > 0xAAAAAAAAAAAAAAALL)
            sub_20E867F44();
          v295 = operator new(v293);
          *((_QWORD *)v249 + 31) = v295;
          *((_QWORD *)v249 + 32) = v295;
          *((_QWORD *)v249 + 33) = &v295[3 * v294];
          *(_QWORD *)&v951 = v295;
          v868 = v295;
          v870[0] = (__uint64_t)(v249 + 264);
          v870[1] = (__uint64_t)&v868;
          *(_QWORD *)v871 = &v951;
          v871[8] = 0;
          v296 = v295;
          do
          {
            *v296 = 0;
            v296[1] = 0;
            v296[2] = 0;
            v309 = *v291;
            v310 = v291[1];
            v311 = v310 - *v291;
            if (v310 != *v291)
            {
              v312 = 0xCCCCCCCCCCCCCCCDLL * (v311 >> 3);
              if (v312 >= 0x666666666666667)
                sub_20E867F44();
              v313 = (char *)operator new(v311);
              v314 = 0;
              *v296 = v313;
              v296[1] = v313;
              v296[2] = &v313[40 * v312];
              do
              {
                v315 = v309 + v314;
                v316 = &v313[v314];
                v317 = *(_OWORD *)(v309 + v314);
                *((_QWORD *)v316 + 2) = *(_QWORD *)(v309 + v314 + 16);
                *(_OWORD *)v316 = v317;
                *(_OWORD *)(v316 + 24) = *(_OWORD *)(v309 + v314 + 24);
                v314 += 40;
              }
              while (v315 + 40 != v310);
              v296[1] = &v313[v314];
            }
            v291 += 3;
            v296 += 3;
            *(_QWORD *)&v951 = v296;
          }
          while (v291 != v292);
          *((_QWORD *)v801 + 32) = v296;
          v249 = v801;
        }
        v318 = (char ***)(v249 + 272);
        v319 = (char **)(v249 + 280);
        *((_QWORD *)v249 + 35) = 0;
        *((_QWORD *)v249 + 36) = 0;
        *((_QWORD *)v249 + 34) = v249 + 280;
        v320 = *(_BYTE **)&v973[40];
        if (*(_BYTE **)&v973[40] == &v973[48])
        {
LABEL_360:
          v321 = (uint64_t ***)(v249 + 296);
          v322 = (uint64_t **)(v249 + 304);
          *((_QWORD *)v249 + 38) = 0;
          *((_QWORD *)v249 + 39) = 0;
          *((_QWORD *)v249 + 37) = v249 + 304;
          v323 = *(__int128 **)&v973[64];
          v806 = (uint64_t ***)(v249 + 296);
          if (*(__int128 **)&v973[64] == &v974)
          {
LABEL_361:
            v249[320] = 0;
            v249[360] = 0;
            if (BYTE8(v976))
            {
              sub_20EAA6AA8((uint64_t)(v249 + 320), (uint64_t)v975);
              v249[360] = 1;
            }
            v324 = v813;
            v325 = *(unsigned __int8 *)(v813 + 40);
            *(_QWORD *)(v813 + 24) = v798;
            if (v325)
            {
              v326 = *(std::__shared_weak_count **)(v324 + 32);
              *(_QWORD *)(v324 + 32) = v249;
              if (v326)
              {
                v327 = (unint64_t *)&v326->__shared_owners_;
                do
                  v328 = __ldaxr(v327);
                while (__stlxr(v328 - 1, v327));
                if (!v328)
                {
                  ((void (*)(std::__shared_weak_count *))v326->__on_zero_shared)(v326);
                  std::__shared_weak_count::__release_weak(v326);
                }
              }
            }
            else
            {
              *(_QWORD *)(v324 + 32) = v249;
              *(_BYTE *)(v324 + 40) = 1;
            }
            sub_20EAF9A2C((uint64_t)object);
            v247 = v797;
            goto LABEL_436;
          }
          while (2)
          {
            v348 = *v321;
            v349 = *v322;
            v350 = v322;
            if (v348 == v322)
              goto LABEL_407;
            v351 = *v322;
            v352 = v322;
            if (v349)
            {
              do
              {
                v350 = (uint64_t **)v351;
                v351 = (uint64_t *)v351[1];
              }
              while (v351);
            }
            else
            {
              do
              {
                v350 = (uint64_t **)v352[2];
                _ZF = *v350 == (uint64_t *)v352;
                v352 = v350;
              }
              while (_ZF);
            }
            v353 = *((_QWORD *)v323 + 4);
            if ((unint64_t)v350[4] < v353)
            {
LABEL_407:
              if (v349)
                v354 = v350;
              else
                v354 = v322;
              if (v349)
                v355 = v350 + 1;
              else
                v355 = v322;
              if (!*v355)
              {
LABEL_422:
                v357 = (uint64_t *)operator new(0x40uLL);
                v358 = *((_QWORD *)v323 + 4);
                v357[5] = 0;
                v357[4] = v358;
                v357[6] = 0;
                v357[7] = 0;
                v360 = (_BYTE *)*((_QWORD *)v323 + 5);
                v359 = (_BYTE *)*((_QWORD *)v323 + 6);
                v361 = v359 - v360;
                if (v359 != v360)
                {
                  if (v361 < 0)
                    sub_20E92CED8();
                  v362 = (char *)operator new(v359 - v360);
                  v357[5] = (uint64_t)v362;
                  v357[6] = (uint64_t)v362;
                  v363 = &v362[8 * (v361 >> 3)];
                  v357[7] = (uint64_t)v363;
                  memcpy(v362, v360, v361);
                  v357[6] = (uint64_t)v363;
                }
                *v357 = 0;
                v357[1] = 0;
                v357[2] = (uint64_t)v354;
                *v355 = v357;
                v364 = **v806;
                if (v364)
                {
                  *v806 = (uint64_t **)v364;
                  v357 = *v355;
                }
                v249 = v801;
                sub_20E868578(*((uint64_t **)v801 + 38), v357);
                ++*((_QWORD *)v801 + 39);
              }
            }
            else
            {
              v355 = v322;
              v354 = v322;
              if (!v349)
                goto LABEL_422;
              while (1)
              {
                while (1)
                {
                  v354 = (uint64_t **)v349;
                  v356 = v349[4];
                  if (v356 <= v353)
                    break;
                  v349 = *v354;
                  v355 = v354;
                  if (!*v354)
                    goto LABEL_422;
                }
                if (v356 >= v353)
                  break;
                v349 = v354[1];
                if (!v349)
                {
                  v355 = v354 + 1;
                  goto LABEL_422;
                }
              }
            }
            v365 = (__int128 *)*((_QWORD *)v323 + 1);
            if (v365)
            {
              do
              {
                v366 = v365;
                v365 = *(__int128 **)v365;
              }
              while (v365);
            }
            else
            {
              do
              {
                v366 = (__int128 *)*((_QWORD *)v323 + 2);
                _ZF = *(_QWORD *)v366 == (_QWORD)v323;
                v323 = v366;
              }
              while (!_ZF);
            }
            v323 = v366;
            _ZF = v366 == &v974;
            v321 = v806;
            if (_ZF)
              goto LABEL_361;
            continue;
          }
        }
        while (2)
        {
          v329 = *v319;
          v330 = v249 + 280;
          if (*v318 == v319)
            goto LABEL_376;
          v331 = *v319;
          v332 = v249 + 280;
          if (v329)
          {
            do
            {
              v330 = v331;
              v331 = (char *)*((_QWORD *)v331 + 1);
            }
            while (v331);
          }
          else
          {
            do
            {
              v330 = (char *)*((_QWORD *)v332 + 2);
              _ZF = *(_QWORD *)v330 == (_QWORD)v332;
              v332 = v330;
            }
            while (_ZF);
          }
          v333 = *((_QWORD *)v320 + 4);
          if (*((_QWORD *)v330 + 4) < v333)
          {
LABEL_376:
            if (v329)
              v334 = (char **)v330;
            else
              v334 = (char **)(v249 + 280);
            if (v329)
              v335 = (char **)(v330 + 8);
            else
              v335 = (char **)(v249 + 280);
            if (!*v335)
            {
LABEL_391:
              v338 = (char *)operator new(0xA8uLL);
              *((_QWORD *)v338 + 4) = *((_QWORD *)v320 + 4);
              v339 = *(_OWORD *)(v320 + 40);
              v340 = *(_OWORD *)(v320 + 56);
              v341 = *(_OWORD *)(v320 + 72);
              *(_OWORD *)(v338 + 88) = *(_OWORD *)(v320 + 88);
              *(_OWORD *)(v338 + 72) = v341;
              *(_OWORD *)(v338 + 56) = v340;
              *(_OWORD *)(v338 + 40) = v339;
              v342 = *(_OWORD *)(v320 + 104);
              v343 = *(_OWORD *)(v320 + 120);
              v344 = *(_OWORD *)(v320 + 136);
              *(_OWORD *)(v338 + 152) = *(_OWORD *)(v320 + 152);
              *(_OWORD *)(v338 + 136) = v344;
              *(_OWORD *)(v338 + 120) = v343;
              *(_OWORD *)(v338 + 104) = v342;
              *(_QWORD *)v338 = 0;
              *((_QWORD *)v338 + 1) = 0;
              *((_QWORD *)v338 + 2) = v334;
              *v335 = v338;
              v345 = **v318;
              if (v345)
              {
                *v318 = (char **)v345;
                v338 = *v335;
              }
              sub_20E868578(*((uint64_t **)v249 + 35), (uint64_t *)v338);
              ++*((_QWORD *)v249 + 36);
            }
          }
          else
          {
            v335 = (char **)(v249 + 280);
            v334 = (char **)(v249 + 280);
            if (!v329)
              goto LABEL_391;
            v336 = *v319;
            while (1)
            {
              while (1)
              {
                v334 = (char **)v336;
                v337 = *((_QWORD *)v336 + 4);
                if (v337 <= v333)
                  break;
                v336 = *v334;
                v335 = v334;
                if (!*v334)
                  goto LABEL_391;
              }
              if (v337 >= v333)
                break;
              v336 = v334[1];
              if (!v336)
              {
                v335 = v334 + 1;
                goto LABEL_391;
              }
            }
          }
          v346 = (_QWORD *)*((_QWORD *)v320 + 1);
          if (v346)
          {
            do
            {
              v347 = v346;
              v346 = (_QWORD *)*v346;
            }
            while (v346);
          }
          else
          {
            do
            {
              v347 = (_BYTE *)*((_QWORD *)v320 + 2);
              _ZF = *(_QWORD *)v347 == (_QWORD)v320;
              v320 = v347;
            }
            while (!_ZF);
          }
          v320 = v347;
          if (v347 == &v973[48])
            goto LABEL_360;
          continue;
        }
      }
      while (2)
      {
        v297 = *v250;
        v298 = (uint64_t *)(v249 + 40);
        if (*v251 == v250)
          goto LABEL_328;
        v299 = *v250;
        v300 = v249 + 40;
        if (v297)
        {
          do
          {
            v298 = v299;
            v299 = (uint64_t *)v299[1];
          }
          while (v299);
        }
        else
        {
          do
          {
            v298 = (uint64_t *)*((_QWORD *)v300 + 2);
            _ZF = *v298 == (_QWORD)v300;
            v300 = (char *)v298;
          }
          while (_ZF);
        }
        v301 = v252[4];
        if (v298[4] < v301)
        {
LABEL_328:
          if (v297)
            v302 = (uint64_t **)v298;
          else
            v302 = (uint64_t **)(v249 + 40);
          if (v297)
            v303 = (uint64_t **)(v298 + 1);
          else
            v303 = (uint64_t **)(v249 + 40);
          if (!*v303)
          {
LABEL_343:
            v305 = (uint64_t *)operator new(0x1D8uLL);
            v305[4] = v252[4];
            sub_20F4462AC((uint64_t)(v305 + 5), (uint64_t)(v252 + 5));
            *v305 = 0;
            v305[1] = 0;
            v305[2] = (uint64_t)v302;
            *v303 = v305;
            v306 = **v251;
            if (v306)
            {
              *v251 = (uint64_t **)v306;
              v305 = *v303;
            }
            sub_20E868578(*((uint64_t **)v249 + 5), v305);
            ++*((_QWORD *)v249 + 6);
          }
        }
        else
        {
          v303 = (uint64_t **)(v249 + 40);
          v302 = (uint64_t **)(v249 + 40);
          if (!v297)
            goto LABEL_343;
          while (1)
          {
            while (1)
            {
              v302 = (uint64_t **)v297;
              v304 = v297[4];
              if (v304 <= v301)
                break;
              v297 = *v302;
              v303 = v302;
              if (!*v302)
                goto LABEL_343;
            }
            if (v304 >= v301)
              break;
            v297 = v302[1];
            if (!v297)
            {
              v303 = v302 + 1;
              goto LABEL_343;
            }
          }
        }
        v307 = (_QWORD *)v252[1];
        if (v307)
        {
          do
          {
            v308 = v307;
            v307 = (_QWORD *)*v307;
          }
          while (v307);
        }
        else
        {
          do
          {
            v308 = (_BYTE *)v252[2];
            _ZF = *(_QWORD *)v308 == (_QWORD)v252;
            v252 = v308;
          }
          while (!_ZF);
        }
        v252 = v308;
        if (v308 == &object[16])
          goto LABEL_291;
        continue;
      }
    }
LABEL_436:
    v367 = v247[3];
    if (*(_BYTE *)(*(_QWORD *)v805 + 3712))
      _ZF = v367 == 0;
    else
      _ZF = 1;
    if (!_ZF)
    {
      v369 = v813;
      v370 = (void **)(v813 + 48);
      if (*(_BYTE *)(v813 + 72))
      {
        v371 = (char *)*v370;
        if (*v370)
        {
          v372 = *(char **)(v813 + 56);
          v373 = *v370;
          if (v372 != v371)
          {
            do
            {
              v374 = (std::__shared_weak_count *)*((_QWORD *)v372 - 1);
              if (v374)
              {
                v375 = (unint64_t *)&v374->__shared_owners_;
                do
                  v376 = __ldaxr(v375);
                while (__stlxr(v376 - 1, v375));
                if (!v376)
                {
                  ((void (*)(std::__shared_weak_count *))v374->__on_zero_shared)(v374);
                  std::__shared_weak_count::__release_weak(v374);
                }
              }
              v372 -= 16;
            }
            while (v372 != v371);
            v373 = *v370;
          }
          *(_QWORD *)(v813 + 56) = v371;
          operator delete(v373);
          *v370 = 0;
          v370[1] = 0;
          v370[2] = 0;
        }
        *v370 = 0;
        v370[1] = 0;
        v370[2] = 0;
      }
      else
      {
        *v370 = 0;
        v370[1] = 0;
        v370[2] = 0;
        *(_BYTE *)(v369 + 72) = 1;
      }
      v377 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v810 + 11464) + 120))(*(_QWORD *)(v810 + 11464));
      v378 = (_QWORD **)*v377;
      v799 = (_QWORD **)v377[1];
      if ((_QWORD **)*v377 != v799)
      {
        do
        {
          v802 = v378;
          sub_20F0EA7DC(*v378, (uint64_t)object);
          v973[64] = 1;
          v380 = *(_QWORD *)&v966[8];
          for (k = *(_QWORD *)&v966[16]; v380 != k; v380 += 192)
          {
            while (1)
            {
              v382 = *(_QWORD *)(v810 + 11512);
              v383 = *(_QWORD *)(v382 + 2496);
              v384 = (v383 + 1) % 0x270uLL;
              v385 = 4 * v383;
              v386 = 4 * v384;
              LODWORD(v383) = *(_DWORD *)(v382 + 4 * ((v383 + 397) % 0x270uLL)) ^ ((*(_DWORD *)(v382 + 4 * v384) & 0x7FFFFFFE | *(_DWORD *)(v382 + 4 * v383) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(v382 + 4 * v384) << 31) >> 31) & 0x9908B0DF;
              *(_DWORD *)(v382 + v385) = v383;
              LODWORD(v383) = ((v383 ^ (v383 >> 11)) << 7) & 0x9D2C5680 ^ v383 ^ (v383 >> 11);
              v387 = ((_DWORD)v383 << 15) & 0xEFC60000 ^ v383 ^ ((((_DWORD)v383 << 15) & 0xEFC60000 ^ v383) >> 18);
              v388 = v384 == 623 ? 0 : v384 + 1;
              v389 = 4 * v388;
              v390 = v384 >= 0xE3 ? -227 : 397;
              v391 = *(_DWORD *)(v382 + 4 * (v390 + v384)) ^ ((*(_DWORD *)(v382 + 4 * v388) & 0x7FFFFFFE | *(_DWORD *)(v382 + 4 * v384) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(v382 + 4 * v388) << 31) >> 31) & 0x9908B0DF;
              *(_DWORD *)(v382 + v386) = v391;
              v392 = ((v391 ^ (v391 >> 11)) << 7) & 0x9D2C5680 ^ v391 ^ (v391 >> 11);
              v393 = (v392 << 15) & 0xEFC60000 ^ v392;
              v394 = (v388 + 1) % 0x270uLL;
              v395 = 4 * v394;
              v396 = *(_DWORD *)(v382 + 4 * ((v388 + 397) % 0x270uLL)) ^ ((*(_DWORD *)(v382 + 4 * v394) & 0x7FFFFFFE | *(_DWORD *)(v382 + 4 * v388) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(v382 + 4 * v394) << 31) >> 31) & 0x9908B0DF;
              *(_DWORD *)(v382 + v389) = v396;
              v397 = ((v396 ^ (v396 >> 11)) << 7) & 0x9D2C5680 ^ v396 ^ (v396 >> 11);
              v398 = (v397 << 15) & 0xEFC60000 ^ v397 ^ (((v397 << 15) & 0xEFC60000 ^ v397) >> 18);
              v399 = v394 == 623 ? 0 : v394 + 1;
              v400 = v394 >= 0xE3 ? -227 : 397;
              v401 = *(_DWORD *)(v382 + 4 * (v400 + v394)) ^ ((*(_DWORD *)(v382 + 4 * v399) & 0x7FFFFFFE | *(_DWORD *)(v382 + 4 * v394) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(v382 + 4 * v399) << 31) >> 31) & 0x9908B0DF;
              *(_DWORD *)(v382 + v395) = v401;
              v402 = ((v401 ^ (v401 >> 11)) << 7) & 0x9D2C5680 ^ v401 ^ (v401 >> 11);
              v403 = (v402 << 15) & 0xEFC60000 ^ v402;
              *(_QWORD *)(v382 + 2496) = v399;
              *(_QWORD *)&v951 = v387 | ((unint64_t)(v393 ^ (v393 >> 18)) << 32) | ((unint64_t)((unsigned __int16)(v393 ^ (v393 >> 18)) >> 8) << 40) | ((unint64_t)HIBYTE(v393) << 56) | ((unint64_t)(HIWORD(v393) & 0xF | 0x40) << 48);
              *((_QWORD *)&v951 + 1) = ((unint64_t)(v403 ^ (v403 >> 18)) << 32) | ((unint64_t)((unsigned __int16)(v403 ^ (v403 >> 18)) >> 8) << 40) | v398 & 0xFFFFFF00 | ((unint64_t)HIBYTE(v403) << 56) | ((unint64_t)BYTE2(v403) << 48) | v398 & 0x3F | 0x80;
              sub_2102323F4((unsigned __int8 *)&v951, v870);
              v404 = operator new(0x28uLL);
              v405 = v404;
              v406 = *(_OWORD *)v871;
              *v404 = *(_OWORD *)v870;
              v404[1] = v406;
              *((_DWORD *)v404 + 8) = *(_DWORD *)&v871[16];
              *((_BYTE *)v404 + 36) = 0;
              if (*(_BYTE *)(v380 + 184))
                break;
              *(_QWORD *)(v380 + 160) = v404;
              *(_OWORD *)(v380 + 168) = xmmword_2102E0950;
              *(_BYTE *)(v380 + 184) = 1;
              v380 += 192;
              if (v380 == k)
                goto LABEL_477;
            }
            if (*(char *)(v380 + 183) < 0)
              operator delete(*(void **)(v380 + 160));
            *(_QWORD *)(v380 + 160) = v405;
            *(_OWORD *)(v380 + 168) = xmmword_2102E0950;
          }
LABEL_477:
          v407 = v813;
          v408 = (char *)operator new(0x130uLL);
          v409 = *(_OWORD *)&object[16];
          *(_OWORD *)(v408 + 24) = *(_OWORD *)object;
          v408[56] = object[32];
          *((_QWORD *)v408 + 10) = *(_QWORD *)&object[56];
          v410 = *(_QWORD *)&v966[24];
          *((_QWORD *)v408 + 13) = *(_QWORD *)v966;
          *((_QWORD *)v408 + 1) = 0;
          *((_QWORD *)v408 + 2) = 0;
          *(_QWORD *)v408 = &off_24C9C47D0;
          *(_OWORD *)(v408 + 40) = v409;
          *((_OWORD *)v408 + 4) = *(_OWORD *)&object[40];
          memset(&object[40], 0, 24);
          *(_OWORD *)(v408 + 88) = *(_OWORD *)v965;
          v965[0] = 0;
          v965[1] = 0;
          *(_QWORD *)v966 = 0;
          *((_OWORD *)v408 + 7) = *(_OWORD *)&v966[8];
          *((_QWORD *)v408 + 16) = v410;
          memset(&v966[8], 0, 24);
          v408[136] = 0;
          v408[160] = 0;
          if (BYTE8(v968))
          {
            *(_OWORD *)(v408 + 136) = *(_OWORD *)v967;
            *((_QWORD *)v408 + 19) = v968;
            v967[1] = 0;
            *(_QWORD *)&v968 = 0;
            v967[0] = 0;
            v408[160] = 1;
          }
          v411 = *(_OWORD *)&v973[48];
          *(_OWORD *)(v408 + 264) = *(_OWORD *)&v973[32];
          *(_OWORD *)(v408 + 280) = v411;
          v412 = *(_OWORD *)v973;
          *(_OWORD *)(v408 + 248) = *(_OWORD *)&v973[16];
          *(_OWORD *)(v408 + 232) = v412;
          v413 = v970;
          *(_OWORD *)(v408 + 168) = v969;
          *(_OWORD *)(v408 + 184) = v413;
          v414 = v972;
          *(_OWORD *)(v408 + 200) = v971;
          *(_OWORD *)(v408 + 216) = v414;
          v408[296] = v973[64];
          v870[0] = (__uint64_t)(v408 + 24);
          v870[1] = (__uint64_t)v408;
          v415 = *(_QWORD **)(v407 + 56);
          if ((unint64_t)v415 < *(_QWORD *)(v407 + 64))
          {
            *v415 = v408 + 24;
            v415[1] = v408;
            *(_QWORD *)(v407 + 56) = v415 + 2;
            v379 = v802;
          }
          else
          {
            v416 = sub_20EAFDCA4((char **)(v407 + 48), (uint64_t)v870);
            v417 = (std::__shared_weak_count *)v870[1];
            *(_QWORD *)(v407 + 56) = v416;
            v379 = v802;
            if (v417)
            {
              v418 = (unint64_t *)&v417->__shared_owners_;
              do
                v419 = __ldaxr(v418);
              while (__stlxr(v419 - 1, v418));
              if (!v419)
              {
                ((void (*)(std::__shared_weak_count *))v417->__on_zero_shared)(v417);
                std::__shared_weak_count::__release_weak(v417);
              }
            }
          }
          sub_20E991850((uint64_t)object);
          v378 = v379 + 1;
        }
        while (v378 != v799);
      }
    }
    v420 = v813;
    v813 = 0uLL;
    v421 = *(std::__shared_weak_count **)(v805 + 24);
    *(_OWORD *)(v805 + 16) = v420;
    v182 = v796;
    if (v421)
    {
      v422 = (unint64_t *)&v421->__shared_owners_;
      do
        v423 = __ldaxr(v422);
      while (__stlxr(v423 - 1, v422));
      if (!v423)
      {
        ((void (*)(std::__shared_weak_count *))v421->__on_zero_shared)(v421);
        std::__shared_weak_count::__release_weak(v421);
        v424 = (std::__shared_weak_count *)*((_QWORD *)&v813 + 1);
        if (*((_QWORD *)&v813 + 1))
          goto LABEL_490;
        goto LABEL_493;
      }
    }
    v424 = (std::__shared_weak_count *)*((_QWORD *)&v813 + 1);
    if (!*((_QWORD *)&v813 + 1))
      goto LABEL_493;
LABEL_490:
    v425 = (unint64_t *)&v424->__shared_owners_;
    do
      v426 = __ldaxr(v425);
    while (__stlxr(v426 - 1, v425));
    if (v426)
    {
LABEL_493:
      v427 = *(_QWORD *)(v805 + 16);
      if (v427)
        goto LABEL_494;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v424->__on_zero_shared)(v424);
      std::__shared_weak_count::__release_weak(v424);
      v427 = *(_QWORD *)(v805 + 16);
      if (v427)
      {
LABEL_494:
        if (*(_BYTE *)(v427 + 40) && *(_QWORD *)(v427 + 24))
        {
          v428 = *(double *)v1102;
          v429 = sub_20FF3F5E8();
          sub_20EAFE7D8(v805, v429, (uint64_t)(v428 * 1000000000.0), 2u, (mach_timebase_info *)(v810 + 11512));
        }
      }
    }
    v430 = v805;
    v431 = (void **)(v805 + 56);
    v432 = *(_QWORD *)(v805 + 56);
    if (v432)
    {
      v433 = *(_QWORD *)(v805 + 64);
      v434 = *(void **)(v805 + 56);
      if (v433 != v432)
      {
        do
        {
          v435 = *(void **)(v433 - 24);
          if (v435)
          {
            *(_QWORD *)(v433 - 16) = v435;
            operator delete(v435);
          }
          v436 = *(void **)(v433 - 48);
          if (v436)
          {
            *(_QWORD *)(v433 - 40) = v436;
            operator delete(v436);
          }
          v433 -= 56;
        }
        while (v433 != v432);
        v434 = *v431;
      }
      v430 = v805;
      *(_QWORD *)(v805 + 64) = v432;
      operator delete(v434);
      *v431 = 0;
      *(_QWORD *)(v805 + 64) = 0;
      *(_QWORD *)(v805 + 72) = 0;
    }
    *(_OWORD *)(v430 + 56) = *(_OWORD *)v819;
    *(_QWORD *)(v430 + 72) = v820;
    v819[1] = 0;
    v820 = 0;
    v819[0] = 0;
    if (!v841)
      goto LABEL_521;
    if (*v795)
    {
      sub_20EE79904((uint64_t *)&v833, *(_QWORD *)v805 + 32);
    }
    else
    {
      v437 = (uint64_t)(*((_QWORD *)&v833 + 1) - v833) >> 6;
      *(_DWORD *)object = 0;
      v438 = (uint64_t)(*((_QWORD *)&v839 + 1) - v839) >> 2;
      if (v437 <= v438)
      {
        if (v437 < v438)
          *((_QWORD *)&v839 + 1) = v839 + 4 * v437;
      }
      else
      {
        sub_20EDB9D10((uint64_t)&v839, v437 - v438, (const float *)object);
      }
    }
    v439 = (char *)operator new(0x78uLL);
    *((_QWORD *)v439 + 1) = 0;
    *((_QWORD *)v439 + 2) = 0;
    *(_QWORD *)v439 = &off_24C9EE1C0;
    v440 = v833;
    v441 = v836;
    *((_QWORD *)v439 + 5) = v834;
    *((_QWORD *)v439 + 8) = v441;
    v442 = v840;
    *((_QWORD *)v439 + 11) = v838;
    *(_OWORD *)(v439 + 24) = v440;
    v833 = 0uLL;
    *((_OWORD *)v439 + 3) = v835;
    v834 = 0;
    v835 = 0uLL;
    v836 = 0;
    *(_OWORD *)(v439 + 72) = v837;
    v837 = 0uLL;
    *((_OWORD *)v439 + 6) = v839;
    *((_QWORD *)v439 + 14) = v442;
    v838 = 0;
    v839 = 0uLL;
    v840 = 0;
    v443 = *(std::__shared_weak_count **)(v805 + 88);
    *(_QWORD *)(v805 + 80) = v439 + 24;
    *(_QWORD *)(v805 + 88) = v439;
    if (!v443)
      goto LABEL_521;
    v444 = (unint64_t *)&v443->__shared_owners_;
    do
      v445 = __ldaxr(v444);
    while (__stlxr(v445 - 1, v444));
    if (!v445)
    {
      ((void (*)(std::__shared_weak_count *))v443->__on_zero_shared)(v443);
      std::__shared_weak_count::__release_weak(v443);
      if (v832)
      {
LABEL_522:
        v446 = (char *)operator new(0x48uLL);
        *((_QWORD *)v446 + 1) = 0;
        *((_QWORD *)v446 + 2) = 0;
        *(_QWORD *)v446 = &off_24C9EE210;
        v447 = *(_OWORD *)v828;
        v448 = v831;
        *((_QWORD *)v446 + 5) = v829;
        *(_OWORD *)(v446 + 24) = v447;
        v828[0] = 0;
        v828[1] = 0;
        *((_OWORD *)v446 + 3) = v830;
        *((_QWORD *)v446 + 8) = v448;
        v829 = 0;
        v830 = 0uLL;
        v831 = 0;
        v449 = *(std::__shared_weak_count **)(v805 + 104);
        *(_QWORD *)(v805 + 96) = v446 + 24;
        *(_QWORD *)(v805 + 104) = v446;
        if (v449)
        {
          v450 = (unint64_t *)&v449->__shared_owners_;
          do
            v451 = __ldaxr(v450);
          while (__stlxr(v451 - 1, v450));
          if (!v451)
          {
            ((void (*)(std::__shared_weak_count *))v449->__on_zero_shared)(v449);
            std::__shared_weak_count::__release_weak(v449);
          }
        }
      }
    }
    else
    {
LABEL_521:
      if (v832)
        goto LABEL_522;
    }
    if (v827)
    {
      v452 = (char *)operator new(0x60uLL);
      *((_QWORD *)v452 + 1) = 0;
      *((_QWORD *)v452 + 2) = 0;
      *(_QWORD *)v452 = &off_24C9EE260;
      v453 = *(_OWORD *)v821;
      v454 = v824;
      *((_QWORD *)v452 + 5) = v822;
      *(_OWORD *)(v452 + 24) = v453;
      v821[0] = 0;
      v821[1] = 0;
      *((_OWORD *)v452 + 3) = v823;
      *((_QWORD *)v452 + 8) = v454;
      v822 = 0;
      v823 = 0uLL;
      v824 = 0;
      *(_OWORD *)(v452 + 72) = *(_OWORD *)v825;
      *((_QWORD *)v452 + 11) = v826;
      v825[0] = 0;
      v825[1] = 0;
      v826 = 0;
      v455 = *(std::__shared_weak_count **)(v805 + 120);
      *(_QWORD *)(v805 + 112) = v452 + 24;
      *(_QWORD *)(v805 + 120) = v452;
      if (v455)
      {
        v456 = (unint64_t *)&v455->__shared_owners_;
        do
          v457 = __ldaxr(v456);
        while (__stlxr(v457 - 1, v456));
        if (!v457)
        {
          ((void (*)(std::__shared_weak_count *))v455->__on_zero_shared)(v455);
          std::__shared_weak_count::__release_weak(v455);
        }
      }
    }
    v458 = v810;
    v459 = atomic_load((unint64_t *)(*(_QWORD *)(v810 + 11496) + 128));
    v460 = *(_QWORD *)(v458 + 11472);
    if ((v459 & 0xFF0000000000) != 0)
    {
      v461 = v459 & 0xFF00000000;
      if (v461)
        v462 = *(_BYTE *)(v460 + 1200) == 0;
      else
        v462 = 0;
      if (v462)
      {
        *(_QWORD *)(v460 + 1224) = *(_QWORD *)(v460 + 1232);
        *(_QWORD *)(v460 + 1248) = 0;
      }
      *(_BYTE *)(v460 + 1200) = v461 != 0;
    }
    v463 = *(_QWORD *)(v810 + 8);
    v464 = *(_QWORD **)(v460 + 80);
    v465 = v464[357];
    v466 = v464[356];
    v467 = *(_QWORD *)(v460 + 24);
    v468 = v464[354];
    v469 = v464[353];
    v470 = *(_QWORD *)v805;
    v471 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v463 + 336))(v463);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v463 + 272))(v463, (v465 - v466) >> 3, v467, 0x3175B2258D8284CFLL * ((v468 - v469) >> 3), v470, v471);
    kdebug_trace();
    v64 = v810;
  }
  if (!v182)
    goto LABEL_643;
  sub_20EE582BC(&v813);
  if (**(int **)(v813 + 56) > 3)
    goto LABEL_642;
  v472 = *(unsigned __int8 *)(v813 + 72);
  v473 = sub_20E8C31DC(v813, "OSLogSurrogateAppender", 1, 0);
  v474 = v473;
  if (!v472 && !v473)
    goto LABEL_642;
  v870[0] = (__uint64_t)&v813;
  v870[1] = std::chrono::steady_clock::now().__d_.__rep_;
  *(std::chrono::system_clock::time_point *)v871 = std::chrono::system_clock::now();
  *(_DWORD *)&v871[8] = 3;
  *(_QWORD *)&v871[16] = "unknown file";
  LODWORD(v872) = 1213;
  *(_QWORD *)&v873[16] = 0;
  *(_QWORD *)v873 = "unknown function";
  *(_QWORD *)&v873[8] = 0;
  if (*(int *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v64 + 8) + 432))(*(_QWORD *)(v64 + 8)) + 4904) < 1)
  {
    v476 = -1.0;
    v477 = *(_QWORD *)v870[0];
    v478 = (const char *)(*(_QWORD *)v870[0] + 16);
    v479 = *(char *)(*(_QWORD *)v870[0] + 39);
    v807 = v478;
    if ((v479 & 0x80000000) == 0)
      goto LABEL_551;
  }
  else
  {
    v475 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v810 + 8) + 432))(*(_QWORD *)(v810 + 8));
    if (*(int *)(v475 + 4904) <= 0
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionFG.cpp", 1506, (uint64_t)"HasProcessedFirstWindow() > 0", 29, (uint64_t)"VFusion Has not initialized yet", 31, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v476 = *(double *)(*(_QWORD *)(*(_QWORD *)(v475 + 4864) + 2512) - 8);
    v477 = *(_QWORD *)v870[0];
    v478 = (const char *)(*(_QWORD *)v870[0] + 16);
    v479 = *(char *)(*(_QWORD *)v870[0] + 39);
    v807 = v478;
    if ((v479 & 0x80000000) == 0)
    {
LABEL_551:
      v480 = v479;
      v481 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v481 & 1) == 0)
        goto LABEL_1056;
      goto LABEL_555;
    }
  }
  v478 = *(const char **)(v477 + 16);
  v480 = *(_QWORD *)(v477 + 24);
  v482 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v482 & 1) == 0)
  {
LABEL_1056:
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
      if (object[24] && (object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
  }
LABEL_555:
  if (byte_254A4A4F8[23] >= 0)
    v483 = byte_254A4A4F8;
  else
    v483 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v484 = byte_254A4A4F8[23];
  else
    v484 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)object = os_log_create(v483, v478);
  v485 = &object[8];
  if (v484 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v484 >= 0x17)
  {
    v486 = (v484 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v484 | 7) != 0x17)
      v486 = v484 | 7;
    v487 = v486 + 1;
    v485 = operator new(v486 + 1);
    *(_QWORD *)&object[24] = v487 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v485;
    *(_QWORD *)&object[16] = v484;
    goto LABEL_568;
  }
  object[31] = v484;
  if (v484)
LABEL_568:
    memmove(v485, v483, v484);
  v485[v484] = 0;
  object[32] = 1;
  v488 = &object[40];
  if (v480 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v480 >= 0x17)
  {
    v489 = (v480 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v480 | 7) != 0x17)
      v489 = v480 | 7;
    v490 = v489 + 1;
    v488 = operator new(v489 + 1);
    *(_QWORD *)&object[56] = v490 | 0x8000000000000000;
    *(_QWORD *)&object[40] = v488;
    *(_QWORD *)&object[48] = v480;
    goto LABEL_576;
  }
  object[63] = v480;
  if (v480)
LABEL_576:
    memmove(v488, v478, v480);
  v488[v480] = 0;
  LOBYTE(v965[0]) = 1;
  v491 = *(NSObject **)object;
  if ((object[63] & 0x80000000) != 0)
    operator delete(*(void **)&object[40]);
  if (object[32] && (object[31] & 0x80000000) != 0)
    operator delete(*(void **)&object[8]);
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  if (v474 && *(_QWORD *)(v474 + 24))
  {
    v492 = _os_log_pack_size();
    v493 = (std::__shared_weak_count_vtbl *)operator new(v492, (std::align_val_t)8uLL);
    v494 = (std::__shared_weak_count *)operator new();
    v495 = v494;
    v494->__shared_owners_ = 0;
    v496 = (unint64_t *)&v494->__shared_owners_;
    v494->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v494->__shared_weak_owners_ = 0;
    v494[1].__vftable = v493;
    *(_QWORD *)object = v493;
    *(_QWORD *)&object[8] = v493;
    *(_QWORD *)&object[16] = v494;
    do
      v497 = __ldxr(v496);
    while (__stxr(v497 + 1, v496));
    memset(&object[24], 0, 24);
    do
      v498 = __ldaxr(v496);
    while (__stlxr(v498 - 1, v496));
    if (!v498)
    {
      ((void (*)(std::__shared_weak_count *))v494->__on_zero_shared)(v494);
      std::__shared_weak_count::__release_weak(v495);
    }
    v499 = *(_QWORD *)object;
    v500 = _os_log_pack_fill();
    *(_DWORD *)v500 = 134217984;
    *(double *)(v500 + 4) = v476;
    v501 = operator new();
    v502 = *(unsigned __int8 *)(v477 + 39);
    v503 = v807;
    if ((v502 & 0x80u) != 0)
    {
      v503 = *(const char **)(v477 + 16);
      v502 = *(_QWORD *)(v477 + 24);
    }
    *(_QWORD *)v501 = v499;
    *(_OWORD *)(v501 + 8) = *(_OWORD *)&object[8];
    *(_QWORD *)&object[8] = 0;
    *(_QWORD *)&object[16] = 0;
    *(_OWORD *)(v501 + 24) = *(_OWORD *)&object[24];
    *(_QWORD *)&object[24] = 0;
    *(_QWORD *)&object[32] = 0;
    *(_QWORD *)(v501 + 40) = v503;
    *(_QWORD *)(v501 + 48) = v502;
    *(_BYTE *)(v501 + 56) = 1;
    v869.tv_sec = 0;
    *(_QWORD *)&v951 = v501;
    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v474 + 24) + 40))(*(_QWORD *)(v474 + 24), &v951);
    v504 = v951;
    *(_QWORD *)&v951 = 0;
    if (v504)
    {
      v505 = *(std::__shared_weak_count **)(v504 + 32);
      if (v505)
      {
        v506 = (unint64_t *)&v505->__shared_owners_;
        do
          v507 = __ldaxr(v506);
        while (__stlxr(v507 - 1, v506));
        if (!v507)
        {
          ((void (*)(std::__shared_weak_count *))v505->__on_zero_shared)(v505);
          std::__shared_weak_count::__release_weak(v505);
        }
      }
      v508 = *(std::__shared_weak_count **)(v504 + 16);
      if (v508)
      {
        v509 = (unint64_t *)&v508->__shared_owners_;
        do
          v510 = __ldaxr(v509);
        while (__stlxr(v510 - 1, v509));
        if (!v510)
        {
          ((void (*)(std::__shared_weak_count *))v508->__on_zero_shared)(v508);
          std::__shared_weak_count::__release_weak(v508);
        }
      }
      MEMORY[0x212BC6398](v504, 0x10F0C40B62ED6C6);
      tv_sec = v869.tv_sec;
      v869.tv_sec = 0;
      if (tv_sec)
      {
        v512 = *(std::__shared_weak_count **)(tv_sec + 32);
        if (v512)
        {
          v513 = (unint64_t *)&v512->__shared_owners_;
          do
            v514 = __ldaxr(v513);
          while (__stlxr(v514 - 1, v513));
          if (!v514)
          {
            ((void (*)(std::__shared_weak_count *))v512->__on_zero_shared)(v512);
            std::__shared_weak_count::__release_weak(v512);
          }
        }
        v515 = *(std::__shared_weak_count **)(tv_sec + 16);
        if (v515)
        {
          v516 = (unint64_t *)&v515->__shared_owners_;
          do
            v517 = __ldaxr(v516);
          while (__stlxr(v517 - 1, v516));
          if (!v517)
          {
            ((void (*)(std::__shared_weak_count *))v515->__on_zero_shared)(v515);
            std::__shared_weak_count::__release_weak(v515);
          }
        }
        MEMORY[0x212BC6398](tv_sec, 0x10F0C40B62ED6C6);
      }
    }
    v518 = *(std::__shared_weak_count **)&object[32];
    if (*(_QWORD *)&object[32])
    {
      v519 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
      do
        v520 = __ldaxr(v519);
      while (__stlxr(v520 - 1, v519));
      if (!v520)
      {
        ((void (*)(std::__shared_weak_count *))v518->__on_zero_shared)(v518);
        std::__shared_weak_count::__release_weak(v518);
      }
    }
    v521 = *(std::__shared_weak_count **)&object[16];
    if (*(_QWORD *)&object[16])
    {
      v522 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
      do
        v523 = __ldaxr(v522);
      while (__stlxr(v523 - 1, v522));
      if (!v523)
      {
        ((void (*)(std::__shared_weak_count *))v521->__on_zero_shared)(v521);
        std::__shared_weak_count::__release_weak(v521);
      }
    }
  }
  else
  {
    os_log_type_enabled(v491, OS_LOG_TYPE_INFO);
    *(_DWORD *)object = 134217984;
    *(double *)&object[4] = v476;
    v524 = (void *)_os_log_send_and_compose_impl();
    if (v524)
      free(v524);
  }
  if (v472)
  {
    if (*(int *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v810 + 8) + 432))(*(_QWORD *)(v810 + 8)) + 4904) < 1)
    {
      v526 = -1.0;
    }
    else
    {
      v525 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v810 + 8) + 432))(*(_QWORD *)(v810 + 8));
      if (*(int *)(v525 + 4904) <= 0
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionFG.cpp", 1506, (uint64_t)"HasProcessedFirstWindow() > 0", 29, (uint64_t)"VFusion Has not initialized yet", 31, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v526 = *(double *)(*(_QWORD *)(*(_QWORD *)(v525 + 4864) + 2512) - 8);
    }
    sub_20E8C003C((uint64_t)v870, "Perform a reinitialization in LSE@ %f", v526);
    sub_20E863570((uint64_t)v870);
  }
  sub_20E863570((uint64_t)v870);
  v527 = *(std::__shared_weak_count **)&v873[16];
  if (*(_QWORD *)&v873[16])
  {
    v528 = (unint64_t *)(*(_QWORD *)&v873[16] + 8);
    do
      v529 = __ldaxr(v528);
    while (__stlxr(v529 - 1, v528));
    if (!v529)
    {
      ((void (*)(std::__shared_weak_count *))v527->__on_zero_shared)(v527);
      std::__shared_weak_count::__release_weak(v527);
    }
  }
  v64 = v810;
LABEL_642:
  (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v64 + 8) + 128))(*(_QWORD *)(v64 + 8), v1117);
LABEL_643:
  if (!*(_BYTE *)(v805 + 128))
    goto LABEL_791;
  v530 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v810 + 8) + 432))(*(_QWORD *)(v810 + 8));
  if (*(_QWORD *)(*(_QWORD *)(v530 + 4864) + 2528) != *(_QWORD *)(*(_QWORD *)(v530 + 4864) + 2536))
  {
    v531 = *(double *)(*(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v810 + 8) + 432))(*(_QWORD *)(v810 + 8))
                                             + 4864)
                                 + 2536)
                     - 8);
    sub_20E896804(&v811);
    sub_20EE7B8C4((uint64_t)v1116, &v811, v531);
    v532 = v812;
    if (v812)
    {
      v533 = (unint64_t *)&v812->__shared_owners_;
      do
        v534 = __ldaxr(v533);
      while (__stlxr(v534 - 1, v533));
      if (!v534)
      {
        ((void (*)(std::__shared_weak_count *))v532->__on_zero_shared)(v532);
        std::__shared_weak_count::__release_weak(v532);
        if (*(_BYTE *)(v805 + 128))
          goto LABEL_650;
        goto LABEL_791;
      }
    }
  }
  if (!*(_BYTE *)(v805 + 128))
    goto LABEL_791;
LABEL_650:
  (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v810 + 8) + 280))(*(_QWORD *)(v810 + 8), v1116);
  if (!*(_BYTE *)(v805 + 128))
    goto LABEL_791;
  v535 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v810 + 8) + 416))(*(_QWORD *)(v810 + 8));
  v536 = *(_QWORD *)v805;
  *(_BYTE *)(v536 + 5104) = v535;
  sub_20EE79E88((_QWORD *)(v536 + 4120), v535, *(_BYTE *)(v810 + 12137), (uint64_t *)(v810 + 11840), (char **)(v810 + 11816));
  if (*(_BYTE *)(*(_QWORD *)v805 + 5104))
    kdebug_trace();
  if (!*(_BYTE *)(v805 + 128))
    goto LABEL_791;
  v537 = *(_BYTE **)v805;
  v537[5105] = *(_BYTE *)(v810 + 12136);
  if (*v537 && v537[16])
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(v810 + 8) + 368))(*(_QWORD *)(v810 + 8));
    (*(void (**)(_QWORD))(**(_QWORD **)(v810 + 8) + 376))(*(_QWORD *)(v810 + 8));
    sub_20E863438((uint64_t)object);
    sub_20E86A980(&object[16], (uint64_t)"is_platform_moving:", 19);
    v787 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v787, (uint64_t)", vio_initialized:", 18);
    v788 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v788, (uint64_t)" ", 1);
    sub_20E86A980(&object[16], (uint64_t)", mv_classifier_is_tracking_in_3dof:", 36);
    v789 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v789, (uint64_t)", is_slam_paused_in_reinit_ctl: ", 32);
    v790 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v790, (uint64_t)",is_slam_paused_lse_cached:", 27);
    v791 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v791, (uint64_t)" ", 1);
    sub_20E86A980(&object[16], (uint64_t)", is_mpc_hint:", 14);
    v792 = (_QWORD *)std::ostream::operator<<();
    sub_20E8C81A0(v792);
    sub_20E923E88(object, v870);
    if (v871[7] >= 0)
      v793 = v870;
    else
      v793 = (__uint64_t *)v870[0];
    if (v871[7] >= 0)
      v794 = v871[7];
    else
      v794 = v870[1];
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/SlamEngine/src/LocalSlamEngine.cpp", 1280, (uint64_t)"", 0, (uint64_t)v793, v794, (void (*)(void **))sub_21023DDB0);
    if ((v871[7] & 0x80000000) != 0)
      operator delete((void *)v870[0]);
    abort();
  }
  v800 = v537;
  v797[1023] = v537[16];
  v538 = (unsigned int ***)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v810 + 11464) + 96))(*(_QWORD *)(v810 + 11464));
  v540 = **v538;
  v539 = (*v538)[1];
  memset(object, 0, 24);
  v803 = v539;
  v541 = (char *)v539 - (char *)v540;
  if (v541)
  {
    v542 = 0xEEEEEEEEEEEEEEEFLL * (v541 >> 4);
    if (v542 >> 59)
      sub_20EABADD4();
    *(_QWORD *)object = operator new(0xDDDDDDDDDDDDDDE0 * (v541 >> 4));
    *(_QWORD *)&object[8] = *(_QWORD *)object;
    *(_QWORD *)&object[16] = *(_QWORD *)object + 32 * v542;
    while (1)
    {
      v543 = *((_QWORD *)v540 + 4) - *((_QWORD *)v540 + 3);
      if (v543)
        break;
LABEL_659:
      v540 += 60;
      if (v540 == v803)
        goto LABEL_696;
    }
    v544 = 0;
    v545 = *v540;
    v546 = v543 >> 4;
    v808 = v540;
    while (2)
    {
      v547 = *(_OWORD *)(*((_QWORD *)v540 + 3) + 16 * v544);
      *(_OWORD *)v870 = v547;
      v548 = (std::__shared_weak_count *)*((_QWORD *)&v547 + 1);
      v549 = v547;
      if (*((_QWORD *)&v547 + 1))
      {
        v550 = (unint64_t *)(*((_QWORD *)&v547 + 1) + 8);
        do
          v551 = __ldxr(v550);
        while (__stxr(v551 + 1, v550));
        v549 = *(_QWORD *)(*((_QWORD *)v540 + 3) + 16 * v544);
      }
      v552 = *(_DWORD *)(v547 + 24);
      if (*(_WORD *)(v547 + 128))
        v553 = *(unsigned __int16 *)(v547 + 128) > 0xFFu;
      else
        v553 = 0;
      v554 = v553;
      v555 = *(_QWORD *)(v547 + 136);
      v556 = *(_QWORD *)(v549 + 152);
      v557 = *(_QWORD *)&object[8];
      if (*(_QWORD *)&object[8] >= *(_QWORD *)&object[16])
      {
        v558 = v546;
        v559 = v545;
        v560 = *(_QWORD *)object;
        v561 = (uint64_t)(*(_QWORD *)&object[8] - *(_QWORD *)object) >> 5;
        v562 = v561 + 1;
        if ((unint64_t)(v561 + 1) >> 59)
          sub_20EABADD4();
        v563 = *(_QWORD *)&object[16] - *(_QWORD *)object;
        if ((uint64_t)(*(_QWORD *)&object[16] - *(_QWORD *)object) >> 4 > v562)
          v562 = v563 >> 4;
        if ((unint64_t)v563 >= 0x7FFFFFFFFFFFFFE0)
          v564 = 0x7FFFFFFFFFFFFFFLL;
        else
          v564 = v562;
        if (v564)
        {
          if (v564 >> 59)
            sub_20E877A38();
          v565 = (char *)operator new(32 * v564);
        }
        else
        {
          v565 = 0;
        }
        v566 = &v565[32 * v561];
        v545 = v559;
        *(_DWORD *)v566 = v559;
        *((_DWORD *)v566 + 1) = v544;
        *((_DWORD *)v566 + 2) = v552;
        v566[12] = v554;
        *((_QWORD *)v566 + 2) = v555;
        *((_QWORD *)v566 + 3) = v556;
        v567 = v566;
        v546 = v558;
        if (v557 != v560)
        {
          do
          {
            v568 = *(_OWORD *)(v557 - 16);
            *((_OWORD *)v567 - 2) = *(_OWORD *)(v557 - 32);
            *((_OWORD *)v567 - 1) = v568;
            v567 -= 32;
            v557 -= 32;
          }
          while (v557 != v560);
          v557 = v560;
        }
        v540 = v808;
        v569 = v566 + 32;
        *(_QWORD *)object = v567;
        *(_QWORD *)&object[16] = &v565[32 * v564];
        if (v557)
          operator delete((void *)v557);
        *(_QWORD *)&object[8] = v569;
        if (v548)
          goto LABEL_692;
      }
      else
      {
        **(_DWORD **)&object[8] = v545;
        *(_DWORD *)(v557 + 4) = v544;
        *(_DWORD *)(v557 + 8) = v552;
        *(_BYTE *)(v557 + 12) = v554;
        *(_QWORD *)(v557 + 16) = v555;
        *(_QWORD *)(v557 + 24) = v556;
        *(_QWORD *)&object[8] = v557 + 32;
        if (!*((_QWORD *)&v547 + 1))
          goto LABEL_662;
LABEL_692:
        v570 = (unint64_t *)&v548->__shared_owners_;
        do
          v571 = __ldaxr(v570);
        while (__stlxr(v571 - 1, v570));
        if (!v571)
        {
          ((void (*)(std::__shared_weak_count *))v548->__on_zero_shared)(v548);
          std::__shared_weak_count::__release_weak(v548);
        }
      }
LABEL_662:
      if (++v544 == v546)
        goto LABEL_659;
      continue;
    }
  }
LABEL_696:
  v572 = (void *)v800[682];
  if (v572)
  {
    v800[683] = v572;
    operator delete(v572);
  }
  *((_OWORD *)v800 + 341) = *(_OWORD *)object;
  v800[684] = *(_QWORD *)&object[16];
  if (!*(_BYTE *)(v805 + 128))
  {
LABEL_791:
    if (!v1126
      || !(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v810 + 11464) + 136))(*(_QWORD *)(v810 + 11464)))
    {
      goto LABEL_949;
    }
    v627 = (_QWORD *)v805;
    if (*(_BYTE *)(v805 + 128))
      v627 = sub_20E9C1D58((_QWORD *)v805);
    *((_OWORD *)v627 + 6) = 0u;
    *((_OWORD *)v627 + 7) = 0u;
    *((_OWORD *)v627 + 4) = 0u;
    *((_OWORD *)v627 + 5) = 0u;
    *((_OWORD *)v627 + 2) = 0u;
    *((_OWORD *)v627 + 3) = 0u;
    *(_OWORD *)v627 = 0u;
    *((_OWORD *)v627 + 1) = 0u;
    *((_BYTE *)v627 + 128) = 1;
    v877 = 0;
    *(_OWORD *)&v876[8] = 0u;
    v876[0] = 0;
    *(_QWORD *)v882 = 0x3FF0000000000000;
    v881 = unk_210382838;
    v878 = xmmword_210382808;
    v879 = unk_210382818;
    v880 = xmmword_210382828;
    v884[8] = 0;
    *(_WORD *)&v884[16] = 0;
    v884[18] = 0;
    v884[0] = 0;
    v883 = 0;
    *(_OWORD *)&v882[8] = 0u;
    *(_QWORD *)&v886 = 0;
    v885 = 0u;
    WORD4(v886) = 0;
    v887 = 0u;
    v888 = 0u;
    v889 = 0;
    v890 = 1065353216;
    v891 = 0;
    v892 = 0u;
    v893 = 0u;
    v894 = 1065353216;
    v895 = 0u;
    v896 = 0u;
    v897 = 1065353216;
    v898 = 0;
    LOBYTE(v899) = 0;
    v905 = 0;
    LOBYTE(v906) = 0;
    v912 = 0;
    LOBYTE(v913) = 0;
    v917 = 0;
    v918 = 0;
    v919 = 0;
    v922[1976] = 0;
    LOBYTE(v923[0]) = 0;
    v941 = 0;
    LOBYTE(v942) = 0;
    v944 = 0;
    LOWORD(v945) = 0;
    v920 = 0u;
    v922[0] = 0;
    v921 = 0;
    *((_QWORD *)&v945 + 1) = -1;
    v946 = -1;
    v947 = 0u;
    v948 = 0u;
    v949 = 1065353216;
    *(_DWORD *)v950 = 0;
    v950[4] = 1;
    *(_QWORD *)&v950[8] = 0xBFF0000000000000;
    v950[16] = 0;
    v950[20] = 0;
    v950[24] = 0;
    v950[28] = 0;
    *(double *)v870 = v1124 + v1125;
    *(double *)&v870[1] = v1124;
    v884[24] = 3;
    *(_OWORD *)&v871[8] = 0u;
    *(_OWORD *)&v873[8] = 0u;
    memset(&v875[8], 0, 96);
    v872 = 0;
    *(_QWORD *)v871 = 0x3FF0000000000000;
    v874 = 0;
    *(_QWORD *)v873 = 0x3FF0000000000000;
    *(_QWORD *)v875 = 0x3FF0000000000000;
    *(_QWORD *)&object[8] = 0;
    *(_DWORD *)object = 0;
    *(_WORD *)&object[16] = 0;
    *(_QWORD *)&object[20] = 0;
    v981 = 0;
    v982 = 0u;
    v983 = 0;
    v985 = 0;
    memset(v986, 0, sizeof(v986));
    v987 = 1065353216;
    v978 = 0u;
    v979 = v886;
    v980 = 0;
    memset(v988, 0, sizeof(v988));
    v989 = 1065353216;
    v990 = 0;
    LOBYTE(v991[0]) = 0;
    v994 = 0;
    LOBYTE(v995[0]) = 0;
    v998 = 0;
    LOBYTE(v999) = 0;
    v1003 = 0;
    v1004 = 0;
    v1005 = 0;
    v1008[1976] = 0;
    LOBYTE(v1009[0]) = 0;
    v1026 = 0;
    LOBYTE(v1027) = 0;
    v1029 = 0;
    LOWORD(v1030) = 0;
    v1006 = 0u;
    v1008[0] = 0;
    v1007 = 0;
    *((_QWORD *)&v1030 + 1) = -1;
    v1031 = -1;
    v1032 = 0u;
    v1033 = 0u;
    v1034 = 1065353216;
    *(_DWORD *)v1035 = 0;
    v1035[4] = 1;
    *(_QWORD *)&v1035[8] = 0xBFF0000000000000;
    v1035[16] = 0;
    v1035[20] = 0;
    v1035[24] = 0;
    v1035[28] = 0;
    LOBYTE(v1036) = 0;
    BYTE8(v1037) = 0;
    LOWORD(v1054[1]) = 0;
    v1042 = 0u;
    v1041 = 0u;
    v1040 = 0;
    v1039 = 0u;
    *(_OWORD *)v1038 = 0u;
    LODWORD(v1043) = -1;
    *((_QWORD *)&v1043 + 1) = 0;
    LOBYTE(v1044) = 0;
    DWORD2(v1044) = -1;
    *(_QWORD *)&v1045 = 0;
    BYTE8(v1045) = 0;
    LODWORD(v1046) = -1;
    *((_QWORD *)&v1046 + 1) = 0;
    LOBYTE(v1047) = 0;
    DWORD2(v1047) = -1;
    *(_QWORD *)&v1048 = 0;
    BYTE8(v1048) = 0;
    LODWORD(v1049) = -1;
    *((_QWORD *)&v1049 + 1) = 0;
    LOBYTE(v1050) = 0;
    DWORD2(v1050) = -1;
    *(_QWORD *)&v1051 = 0;
    BYTE8(v1051) = 0;
    LODWORD(v1052) = -1;
    *((_QWORD *)&v1052 + 1) = 0;
    LOBYTE(v1053) = 0;
    DWORD2(v1053) = -1;
    *(_QWORD *)&v1054[0] = 0;
    BYTE8(v1054[0]) = 0;
    WORD4(v1054[1]) = 0;
    BYTE10(v1054[1]) = 0;
    v1055[144] = 0;
    v1069 = 0;
    v1070 = 0;
    v1077 = 0;
    memset(v1055, 0, 57);
    v1068 = 0;
    v1056 = 0u;
    v1057 = 0u;
    v1058 = 0u;
    v1059 = 0u;
    v1060 = 0u;
    v1061 = 0u;
    v1062 = 0u;
    v1063 = 0u;
    v1064 = 0u;
    v1065 = 0u;
    v1066 = 0u;
    v1067 = 0u;
    v1073 = 0;
    v1072 = 0;
    v1071 = 0u;
    v1076 = 0;
    v1075 = 0;
    v1074 = 0u;
    LODWORD(v1078) = 65792;
    BYTE4(v1078) = 1;
    *((_QWORD *)&v1078 + 1) = 0xBFF0000000000000;
    LOWORD(v1079) = 1;
    BYTE8(v1079) = 0;
    LOBYTE(v1082) = 0;
    WORD4(v1082) = 0;
    LOBYTE(v1083) = 0;
    BYTE8(v1083) = 0;
    LOBYTE(v1084) = 0;
    BYTE8(v1084) = 0;
    *(_QWORD *)v1085 = 0x7FF8000000000000;
    *(int64x2_t *)&v1085[8] = vdupq_n_s64(0x7FF8000000000000uLL);
    *(_OWORD *)&v1085[24] = *(_OWORD *)&v1085[8];
    *(_OWORD *)&v1085[40] = *(_OWORD *)&v1085[8];
    *(_OWORD *)v1086 = xmmword_2102DD520;
    __asm { FMOV            V1.2D, #1.0 }
    *(_OWORD *)&v1086[16] = _Q1;
    v1088 = 0;
    v1087 = 0u;
    *(_QWORD *)v1089 = 0x3FF0000000000000;
    *(_OWORD *)&v1089[8] = _Q1;
    memset(&v1093[8], 0, 24);
    memset(&v1092[8], 0, 24);
    v1091 = 0;
    v1090 = 0u;
    *(_QWORD *)v1092 = 0x3FF0000000000000;
    *(_QWORD *)v1093 = 0x3FF0000000000000;
    v1094 = 0x3FF0000000000000;
    memset(&v1096[8], 0, 24);
    memset(&v1095[8], 0, 24);
    *(_QWORD *)v1095 = 0x3FF0000000000000;
    *(_QWORD *)v1096 = 0x3FF0000000000000;
    v1097 = 0x3FF0000000000000;
    v1098 = -1;
    v1100 = 0;
    *(_OWORD *)v1099 = 0u;
    *(_OWORD *)v966 = *(_OWORD *)v873;
    *(_OWORD *)v965 = 0uLL;
    *(_OWORD *)&object[32] = *(_OWORD *)v870;
    *(_OWORD *)&object[48] = *(_OWORD *)v871;
    v969 = *(_OWORD *)&v875[32];
    v968 = *(_OWORD *)&v875[16];
    *(_OWORD *)v967 = *(_OWORD *)v875;
    *(_OWORD *)&v966[16] = 0uLL;
    *(_QWORD *)v973 = 0;
    v972 = *(_OWORD *)&v875[80];
    v971 = *(_OWORD *)&v875[64];
    v970 = *(_OWORD *)&v875[48];
    v975[1] = *(_OWORD *)v882;
    v976 = 0uLL;
    *(_OWORD *)v977 = *(_OWORD *)v884;
    *(_OWORD *)&v977[9] = *(_OWORD *)&v884[9];
    *(_OWORD *)&v973[56] = unk_210382818;
    v974 = xmmword_210382828;
    v975[0] = unk_210382838;
    *(_OWORD *)&v973[40] = xmmword_210382808;
    *(_OWORD *)&v973[8] = *(_OWORD *)v876;
    *(_OWORD *)&v973[24] = 0uLL;
    v984 = 1065353216;
    sub_20EE62010(&v981, 0, 0);
    v985 = v891;
    v987 = v894;
    sub_20EC1D1DC(v986, (uint64_t *)v893, 0);
    v989 = v897;
    sub_20EC1D1DC(v988, (uint64_t *)v896, 0);
    v990 = v898;
    if (v994 == v905)
    {
      if (v994)
      {
        sub_20E92CD94(v991, (char *)v899, *(char **)v900, (uint64_t)(*(_QWORD *)v900 - (_QWORD)v899) >> 3);
        sub_20EE6221C(v992, *(char **)v901, *(char **)v902, (uint64_t)(*(_QWORD *)v902 - *(_QWORD *)v901) >> 5);
        sub_20E86811C(v993, (char *)__src, *(char **)v904, (uint64_t)(*(_QWORD *)v904 - (_QWORD)__src) >> 3);
      }
    }
    else
    {
      if (v994)
      {
        if (v993[0])
        {
          v993[1] = v993[0];
          operator delete(v993[0]);
        }
        if (v992[0])
        {
          v992[1] = v992[0];
          operator delete(v992[0]);
        }
        if (v991[0])
        {
          v991[1] = v991[0];
          operator delete(v991[0]);
        }
        v629 = 0;
      }
      else
      {
        sub_20E969678(v991, (uint64_t)&v899);
        v629 = 1;
      }
      v994 = v629;
    }
    if (v998 == v912)
    {
      if (v998)
      {
        sub_20E92CD94(v995, (char *)v906, *(char **)v907, (uint64_t)(*(_QWORD *)v907 - (_QWORD)v906) >> 3);
        sub_20EE6221C(v996, *(char **)v908, *(char **)v909, (uint64_t)(*(_QWORD *)v909 - *(_QWORD *)v908) >> 5);
        sub_20E86811C(v997, (char *)v910, *(char **)v911, (uint64_t)(*(_QWORD *)v911 - (_QWORD)v910) >> 3);
      }
    }
    else
    {
      if (v998)
      {
        if (v997[0])
        {
          v997[1] = v997[0];
          operator delete(v997[0]);
        }
        if (v996[0])
        {
          v996[1] = v996[0];
          operator delete(v996[0]);
        }
        if (v995[0])
        {
          v995[1] = v995[0];
          operator delete(v995[0]);
        }
        v630 = 0;
      }
      else
      {
        sub_20E969814(v995, (uint64_t)&v906);
        v630 = 1;
      }
      v998 = v630;
    }
    if (v1003 != v917)
    {
      if (v1003)
      {
        if (v1002[0])
        {
          v1002[1] = v1002[0];
          operator delete(v1002[0]);
        }
        if (v999)
        {
          v1000 = (char *)v999;
          operator delete(v999);
        }
        v642 = 0;
      }
      else
      {
        sub_20E9699B0(&v999, (uint64_t)&v913);
        v642 = 1;
      }
      v1003 = v642;
LABEL_857:
      v1004 = v918;
      v1005 = v919;
      sub_20EE625E0((uint64_t)&v1006, (char **)v920, *((uint64_t *)&v920 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v920 + 1) - v920) >> 3));
      memcpy(v1008, v922, sizeof(v1008));
      if (v1026 == v941)
      {
        if (v1026)
        {
          v1009[8] = v923[8];
          v1009[9] = v923[9];
          v1010 = v924;
          v1009[4] = v923[4];
          v1009[5] = v923[5];
          v1009[6] = v923[6];
          v1009[7] = v923[7];
          v1009[0] = v923[0];
          v1009[1] = v923[1];
          v1009[2] = v923[2];
          v1009[3] = v923[3];
          memcpy(v1011, v925, sizeof(v1011));
          memcpy(v1012, v926, sizeof(v1012));
          sub_20EE62A1C((char **)v1013, v927, v928, 0x6DB6DB6DB6DB6DB7 * ((v928 - v927) >> 3));
          v1014 = v929;
          v1015 = v930;
          v1016 = v931;
          v1017 = v932;
          v1018 = v933;
          v1019 = v934;
          v1020 = v935;
          if (v1023 == v938)
          {
            if (v1023)
            {
              v1021 = v936;
              v1022 = v937;
            }
          }
          else if (v1023)
          {
            v1023 = 0;
          }
          else
          {
            v1021 = v936;
            v1022 = v937;
            v1023 = 1;
          }
          v1024 = v939;
          v1025 = v940;
        }
      }
      else if (v1026)
      {
        if (v1013[0])
        {
          v1013[1] = v1013[0];
          operator delete(v1013[0]);
        }
        v1026 = 0;
      }
      else
      {
        sub_20EABABF8((uint64_t)v1009, v923);
        v1026 = 1;
      }
      if (v1029 == v944)
      {
        if (v1029)
        {
          v652 = v942;
          v653 = v943;
          if (v943)
          {
            v654 = (unint64_t *)&v943->__shared_owners_;
            do
              v655 = __ldxr(v654);
            while (__stxr(v655 + 1, v654));
          }
          v1027 = v652;
          v656 = v1028;
          v1028 = v653;
          if (v656)
          {
            v657 = (unint64_t *)&v656->__shared_owners_;
            do
              v658 = __ldaxr(v657);
            while (__stlxr(v658 - 1, v657));
            if (!v658)
            {
              ((void (*)(std::__shared_weak_count *))v656->__on_zero_shared)(v656);
              std::__shared_weak_count::__release_weak(v656);
            }
          }
        }
      }
      else if (v1029)
      {
        v659 = v1028;
        if (v1028)
        {
          v660 = (unint64_t *)&v1028->__shared_owners_;
          do
            v661 = __ldaxr(v660);
          while (__stlxr(v661 - 1, v660));
          if (!v661)
          {
            ((void (*)(std::__shared_weak_count *))v659->__on_zero_shared)(v659);
            std::__shared_weak_count::__release_weak(v659);
          }
        }
        v1029 = 0;
      }
      else
      {
        v1027 = v942;
        v1028 = v943;
        if (v943)
        {
          v662 = (unint64_t *)&v943->__shared_owners_;
          do
            v663 = __ldxr(v662);
          while (__stxr(v663 + 1, v662));
        }
        v1029 = 1;
      }
      v1030 = v945;
      LODWORD(v1031) = v946;
      v1034 = v949;
      v664 = (uint64_t *)v948;
      v665 = *((_QWORD *)&v1032 + 1);
      if (!*((_QWORD *)&v1032 + 1))
        goto LABEL_898;
      v666 = 0;
      do
        *(_QWORD *)(v1032 + 8 * v666++) = 0;
      while (v665 != v666);
      v667 = (char *)v1033;
      v1033 = 0uLL;
      if (v667)
      {
        while (v664)
        {
          *((_QWORD *)v667 + 2) = v664[2];
          v668 = *(_OWORD *)(v664 + 3);
          v669 = *(_OWORD *)(v664 + 5);
          *(_OWORD *)(v667 + 56) = *(_OWORD *)(v664 + 7);
          *(_OWORD *)(v667 + 40) = v669;
          *(_OWORD *)(v667 + 24) = v668;
          v670 = *(_OWORD *)(v664 + 9);
          v671 = *(_OWORD *)(v664 + 11);
          v672 = *(_OWORD *)(v664 + 13);
          *(_OWORD *)(v667 + 120) = *(_OWORD *)(v664 + 15);
          *(_OWORD *)(v667 + 104) = v672;
          *(_OWORD *)(v667 + 88) = v671;
          *(_OWORD *)(v667 + 72) = v670;
          v673 = *(_OWORD *)(v664 + 17);
          v674 = *(_OWORD *)(v664 + 19);
          v675 = *(_OWORD *)(v664 + 21);
          *(_OWORD *)(v667 + 184) = *(_OWORD *)(v664 + 23);
          *(_OWORD *)(v667 + 168) = v675;
          *(_OWORD *)(v667 + 152) = v674;
          *(_OWORD *)(v667 + 136) = v673;
          v676 = *(char **)v667;
          sub_20EAF9BA8((uint64_t)&v1032, (uint64_t)v667);
          v664 = (uint64_t *)*v664;
          v667 = v676;
          if (!v676)
            goto LABEL_898;
        }
        do
        {
          v688 = *(char **)v667;
          operator delete(v667);
          v667 = v688;
        }
        while (v688);
      }
      else
      {
LABEL_898:
        while (v664)
        {
          v677 = operator new(0xC8uLL);
          *(_QWORD *)v677 = 0;
          *((_QWORD *)v677 + 1) = 0;
          v678 = *((_OWORD *)v664 + 1);
          v679 = *((_OWORD *)v664 + 2);
          v680 = *((_OWORD *)v664 + 4);
          *((_OWORD *)v677 + 3) = *((_OWORD *)v664 + 3);
          *((_OWORD *)v677 + 4) = v680;
          *((_OWORD *)v677 + 1) = v678;
          *((_OWORD *)v677 + 2) = v679;
          v681 = *((_OWORD *)v664 + 5);
          v682 = *((_OWORD *)v664 + 6);
          v683 = *((_OWORD *)v664 + 8);
          *((_OWORD *)v677 + 7) = *((_OWORD *)v664 + 7);
          *((_OWORD *)v677 + 8) = v683;
          *((_OWORD *)v677 + 5) = v681;
          *((_OWORD *)v677 + 6) = v682;
          v684 = *((_OWORD *)v664 + 9);
          v685 = *((_OWORD *)v664 + 10);
          v686 = *((_OWORD *)v664 + 11);
          *((_QWORD *)v677 + 24) = v664[24];
          *((_OWORD *)v677 + 10) = v685;
          *((_OWORD *)v677 + 11) = v686;
          *((_OWORD *)v677 + 9) = v684;
          if (*((_DWORD *)v677 + 4) >= 0x10000u
            && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
          {
LABEL_1038:
            abort();
          }
          v687 = *((_DWORD *)v677 + 5);
          if (v687 >= 0x10000)
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
            {
              goto LABEL_1038;
            }
            LOWORD(v687) = *((_WORD *)v677 + 10);
          }
          *((_QWORD *)v677 + 1) = (unsigned __int16)v687 | ((unsigned __int16)*((_DWORD *)v677 + 4) << 16);
          sub_20EAF9BA8((uint64_t)&v1032, (uint64_t)v677);
          v664 = (uint64_t *)*v664;
        }
      }
      *(_OWORD *)v1035 = *(_OWORD *)v950;
      *(_OWORD *)&v1035[13] = *(_OWORD *)&v950[13];
      v689 = operator new(0x1580uLL);
      v689[1] = 0;
      v689[2] = 0;
      *v689 = &off_24C9B07F8;
      v690 = sub_20EABA448((uint64_t)(v689 + 3), (__int128 *)object);
      v691 = *(std::__shared_weak_count **)(v805 + 8);
      *(_QWORD *)v805 = v690;
      *(_QWORD *)(v805 + 8) = v689;
      if (v691)
      {
        v692 = (unint64_t *)&v691->__shared_owners_;
        do
          v693 = __ldaxr(v692);
        while (__stlxr(v693 - 1, v692));
        if (!v693)
        {
          ((void (*)(std::__shared_weak_count *))v691->__on_zero_shared)(v691);
          std::__shared_weak_count::__release_weak(v691);
        }
      }
      *(_BYTE *)(v805 + 48) = 1;
      v694 = sub_210219C18();
      v695 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
      if ((v695 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
      {
        __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DDD0);
      }
      if (!atomic_load(&qword_254A5A450))
        goto LABEL_932;
      LODWORD(v951) = 134217984;
      *(_QWORD *)((char *)&v951 + 4) = v870[0];
      v697 = (char *)_os_log_send_and_compose_impl();
      v698 = strlen(v697);
      v869.tv_sec = 0;
      pthread_threadid_np(0, (__uint64_t *)&v869);
      v699 = v869.tv_sec;
      timespec_get(&v869, 1);
      sub_210219E20(&v951, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v694 + 1), (__int128 *)(v694 + 5), "LocalSlamEngine returns dummy metadata for kVFusionSkipStep at timestamp %f", 0x4BuLL, v697, v698, v699, &v869);
      std::mutex::lock(&stru_254A5A410);
      v700 = qword_254A5A458;
      for (m = unk_254A5A460; v700 != m; v700 += 40)
      {
        v702 = *(_QWORD *)(v700 + 32);
        if (!v702)
          sub_20E86D37C();
        (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v702 + 48))(v702, &v951);
      }
      std::mutex::unlock(&stru_254A5A410);
      if (v963 < 0)
      {
        operator delete(v962);
        if ((v961 & 0x80000000) == 0)
        {
LABEL_919:
          if (!v959)
          {
LABEL_925:
            if (v956 && v955 < 0)
              operator delete(v953);
            if (SHIBYTE(v952) < 0)
              operator delete(*((void **)&v951 + 1));
            if (v697)
              free(v697);
LABEL_932:
            if (os_signpost_enabled((os_log_t)*v694))
            {
              LODWORD(v951) = 134217984;
              *(_QWORD *)((char *)&v951 + 4) = v870[0];
              _os_signpost_emit_unreliably_with_name_impl();
            }
            if (v1099[0])
            {
              v1099[1] = v1099[0];
              operator delete(v1099[0]);
            }
            sub_20E91E818((uint64_t)v1055);
            v703 = (std::__shared_weak_count *)*((_QWORD *)&v1042 + 1);
            if (*((_QWORD *)&v1042 + 1))
            {
              v704 = (unint64_t *)(*((_QWORD *)&v1042 + 1) + 8);
              do
                v705 = __ldaxr(v704);
              while (__stlxr(v705 - 1, v704));
              if (!v705)
              {
                ((void (*)(std::__shared_weak_count *))v703->__on_zero_shared)(v703);
                std::__shared_weak_count::__release_weak(v703);
              }
            }
            v706 = (std::__shared_weak_count *)*((_QWORD *)&v1041 + 1);
            if (*((_QWORD *)&v1041 + 1))
            {
              v707 = (unint64_t *)(*((_QWORD *)&v1041 + 1) + 8);
              do
                v708 = __ldaxr(v707);
              while (__stlxr(v708 - 1, v707));
              if (!v708)
              {
                ((void (*)(std::__shared_weak_count *))v706->__on_zero_shared)(v706);
                std::__shared_weak_count::__release_weak(v706);
              }
            }
            if (v1038[0])
            {
              v1038[1] = v1038[0];
              operator delete(v1038[0]);
            }
            sub_20E91EA40((uint64_t)&object[32]);
            sub_20E91EA40((uint64_t)v870);
            goto LABEL_949;
          }
LABEL_923:
          if (v958 < 0)
            operator delete(v957);
          goto LABEL_925;
        }
      }
      else if ((v961 & 0x80000000) == 0)
      {
        goto LABEL_919;
      }
      operator delete(v960);
      if (!v959)
        goto LABEL_925;
      goto LABEL_923;
    }
    if (!v1003)
      goto LABEL_857;
    v631 = v913;
    v632 = v914;
    v633 = v914 - v913;
    v634 = 0xAAAAAAAAAAAAAAABLL * ((v914 - v913) >> 3);
    v635 = (uint64_t)v1001;
    v636 = (char *)v999;
    if (0xAAAAAAAAAAAAAAABLL * ((v1001 - (_BYTE *)v999) >> 3) >= v634)
    {
      if (0xAAAAAAAAAAAAAAABLL * ((v1000 - (_BYTE *)v999) >> 3) < v634)
      {
        v643 = &v913[8 * ((v1000 - (_BYTE *)v999) >> 3)];
        if (v1000 != v999)
        {
          v644 = 8 * ((v1000 - (_BYTE *)v999) >> 3);
          do
          {
            v645 = *(_OWORD *)v631;
            *((_QWORD *)v636 + 2) = *((_QWORD *)v631 + 2);
            *(_OWORD *)v636 = v645;
            v636 += 24;
            v631 += 24;
            v644 -= 24;
          }
          while (v644);
          v636 = v1000;
        }
        v646 = v636;
        if (v643 != v632)
        {
          v646 = v636;
          v647 = v636;
          do
          {
            v648 = *(_OWORD *)v643;
            *((_QWORD *)v647 + 2) = *((_QWORD *)v643 + 2);
            *(_OWORD *)v647 = v648;
            v647 += 24;
            v643 += 24;
            v646 += 24;
          }
          while (v643 != v632);
        }
        v649 = v646 - v636;
        goto LABEL_856;
      }
      v641 = (char *)v999;
      if (v913 != v914)
      {
        v650 = v999;
        do
        {
          v651 = *(_OWORD *)v631;
          v650[2] = *((_QWORD *)v631 + 2);
          *(_OWORD *)v650 = v651;
          v650 += 3;
          v631 += 24;
          v641 += 24;
        }
        while (v631 != v632);
      }
    }
    else
    {
      if (v999)
      {
        v1000 = (char *)v999;
        operator delete(v999);
        v635 = 0;
        v999 = 0;
        v1000 = 0;
        v1001 = 0;
      }
      if (v634 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_1076;
      v637 = 0xAAAAAAAAAAAAAAABLL * (v635 >> 3);
      v638 = 2 * v637;
      if (2 * v637 <= v634)
        v638 = v634;
      v639 = v637 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v638;
      if (v639 > 0xAAAAAAAAAAAAAAALL)
LABEL_1076:
        sub_20E969238();
      v640 = (char *)operator new(24 * v639);
      v636 = v640;
      v999 = v640;
      v1000 = v640;
      v1001 = &v640[24 * v639];
      v641 = v640;
      if (v631 != v632)
      {
        memcpy(v640, v631, 24 * ((v633 - 24) / 0x18uLL) + 24);
        v641 = &v636[24 * ((v633 - 24) / 0x18uLL) + 24];
      }
    }
    v649 = v641 - v636;
LABEL_856:
    v1000 = &v636[v649];
    sub_20EE623A8(v1002, *(char **)v915, *(char **)v916, 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)v916 - *(_QWORD *)v915) >> 2));
    goto LABEL_857;
  }
  if (!*(_QWORD *)v805)
    goto LABEL_949;
  sub_20EE582BC(&v813);
  if (**(int **)(v813 + 56) > 2)
    goto LABEL_790;
  v573 = *(unsigned __int8 *)(v813 + 72);
  v574 = sub_20E8C31DC(v813, "OSLogSurrogateAppender", 1, 0);
  v575 = v574;
  if (!v573 && !v574)
    goto LABEL_790;
  v870[0] = (__uint64_t)&v813;
  v870[1] = std::chrono::steady_clock::now().__d_.__rep_;
  *(std::chrono::system_clock::time_point *)v871 = std::chrono::system_clock::now();
  *(_DWORD *)&v871[8] = 2;
  *(_QWORD *)&v871[16] = "unknown file";
  LODWORD(v872) = 1292;
  *(_QWORD *)&v873[16] = 0;
  *(_QWORD *)v873 = "unknown function";
  *(_QWORD *)&v873[8] = 0;
  v576 = *(_QWORD *)v870[0];
  v577 = (const char *)(*(_QWORD *)v870[0] + 16);
  v804 = v577;
  if (*(char *)(*(_QWORD *)v870[0] + 39) < 0)
  {
    v577 = *(const char **)(v576 + 16);
    v578 = *(_QWORD *)(v576 + 24);
  }
  else
  {
    v578 = *(unsigned __int8 *)(*(_QWORD *)v870[0] + 39);
  }
  v809 = *(_QWORD *)v805;
  v579 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v579 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)object);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
    if (object[24] && (object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v580 = byte_254A4A4F8;
  else
    v580 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v581 = byte_254A4A4F8[23];
  else
    v581 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)object = os_log_create(v580, v577);
  v582 = &object[8];
  if (v581 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v581 >= 0x17)
  {
    v583 = (v581 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v581 | 7) != 0x17)
      v583 = v581 | 7;
    v584 = v583 + 1;
    v582 = operator new(v583 + 1);
    *(_QWORD *)&object[24] = v584 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v582;
    *(_QWORD *)&object[16] = v581;
    goto LABEL_722;
  }
  object[31] = v581;
  if (v581)
LABEL_722:
    memmove(v582, v580, v581);
  v582[v581] = 0;
  object[32] = 1;
  v585 = &object[40];
  if (v578 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v578 >= 0x17)
  {
    v586 = (v578 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v578 | 7) != 0x17)
      v586 = v578 | 7;
    v587 = v586 + 1;
    v585 = operator new(v586 + 1);
    *(_QWORD *)&object[56] = v587 | 0x8000000000000000;
    *(_QWORD *)&object[40] = v585;
    *(_QWORD *)&object[48] = v578;
    goto LABEL_730;
  }
  object[63] = v578;
  if (v578)
LABEL_730:
    memmove(v585, v577, v578);
  v585[v578] = 0;
  LOBYTE(v965[0]) = 1;
  v588 = *(NSObject **)object;
  if ((object[63] & 0x80000000) != 0)
    operator delete(*(void **)&object[40]);
  if (object[32] && (object[31] & 0x80000000) != 0)
    operator delete(*(void **)&object[8]);
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  if (v575 && *(_QWORD *)(v575 + 24))
  {
    v589 = _os_log_pack_size();
    v590 = (std::__shared_weak_count_vtbl *)operator new(v589, (std::align_val_t)8uLL);
    v591 = (std::__shared_weak_count *)operator new();
    v592 = v591;
    v591->__shared_owners_ = 0;
    v593 = (unint64_t *)&v591->__shared_owners_;
    v591->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v591->__shared_weak_owners_ = 0;
    v591[1].__vftable = v590;
    *(_QWORD *)object = v590;
    *(_QWORD *)&object[8] = v590;
    *(_QWORD *)&object[16] = v591;
    do
      v594 = __ldxr(v593);
    while (__stxr(v594 + 1, v593));
    memset(&object[24], 0, 24);
    do
      v595 = __ldaxr(v593);
    while (__stlxr(v595 - 1, v593));
    if (!v595)
    {
      ((void (*)(std::__shared_weak_count *))v591->__on_zero_shared)(v591);
      std::__shared_weak_count::__release_weak(v592);
    }
    v596 = *(_QWORD *)object;
    v597 = _os_log_pack_fill();
    v598 = *(_QWORD *)(v809 + 32);
    *(_DWORD *)v597 = 134217984;
    *(_QWORD *)(v597 + 4) = v598;
    v599 = operator new();
    v600 = *(unsigned __int8 *)(v576 + 39);
    v601 = v804;
    if ((v600 & 0x80u) != 0)
    {
      v601 = *(const char **)(v576 + 16);
      v600 = *(_QWORD *)(v576 + 24);
    }
    *(_QWORD *)v599 = v596;
    *(_OWORD *)(v599 + 8) = *(_OWORD *)&object[8];
    *(_QWORD *)&object[8] = 0;
    *(_QWORD *)&object[16] = 0;
    *(_OWORD *)(v599 + 24) = *(_OWORD *)&object[24];
    *(_QWORD *)&object[24] = 0;
    *(_QWORD *)&object[32] = 0;
    *(_QWORD *)(v599 + 40) = v601;
    *(_QWORD *)(v599 + 48) = v600;
    *(_BYTE *)(v599 + 56) = 2;
    v869.tv_sec = 0;
    *(_QWORD *)&v951 = v599;
    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v575 + 24) + 40))(*(_QWORD *)(v575 + 24), &v951);
    v602 = v951;
    *(_QWORD *)&v951 = 0;
    if (v602)
    {
      v603 = *(std::__shared_weak_count **)(v602 + 32);
      if (v603)
      {
        v604 = (unint64_t *)&v603->__shared_owners_;
        do
          v605 = __ldaxr(v604);
        while (__stlxr(v605 - 1, v604));
        if (!v605)
        {
          ((void (*)(std::__shared_weak_count *))v603->__on_zero_shared)(v603);
          std::__shared_weak_count::__release_weak(v603);
        }
      }
      v606 = *(std::__shared_weak_count **)(v602 + 16);
      if (v606)
      {
        v607 = (unint64_t *)&v606->__shared_owners_;
        do
          v608 = __ldaxr(v607);
        while (__stlxr(v608 - 1, v607));
        if (!v608)
        {
          ((void (*)(std::__shared_weak_count *))v606->__on_zero_shared)(v606);
          std::__shared_weak_count::__release_weak(v606);
        }
      }
      MEMORY[0x212BC6398](v602, 0x10F0C40B62ED6C6);
      v609 = v869.tv_sec;
      v869.tv_sec = 0;
      if (v609)
      {
        v610 = *(std::__shared_weak_count **)(v609 + 32);
        if (v610)
        {
          v611 = (unint64_t *)&v610->__shared_owners_;
          do
            v612 = __ldaxr(v611);
          while (__stlxr(v612 - 1, v611));
          if (!v612)
          {
            ((void (*)(std::__shared_weak_count *))v610->__on_zero_shared)(v610);
            std::__shared_weak_count::__release_weak(v610);
          }
        }
        v613 = *(std::__shared_weak_count **)(v609 + 16);
        if (v613)
        {
          v614 = (unint64_t *)&v613->__shared_owners_;
          do
            v615 = __ldaxr(v614);
          while (__stlxr(v615 - 1, v614));
          if (!v615)
          {
            ((void (*)(std::__shared_weak_count *))v613->__on_zero_shared)(v613);
            std::__shared_weak_count::__release_weak(v613);
          }
        }
        MEMORY[0x212BC6398](v609, 0x10F0C40B62ED6C6);
      }
    }
    v616 = *(std::__shared_weak_count **)&object[32];
    if (*(_QWORD *)&object[32])
    {
      v617 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
      do
        v618 = __ldaxr(v617);
      while (__stlxr(v618 - 1, v617));
      if (!v618)
      {
        ((void (*)(std::__shared_weak_count *))v616->__on_zero_shared)(v616);
        std::__shared_weak_count::__release_weak(v616);
      }
    }
    v619 = *(std::__shared_weak_count **)&object[16];
    if (*(_QWORD *)&object[16])
    {
      v620 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
      do
        v621 = __ldaxr(v620);
      while (__stlxr(v621 - 1, v620));
      if (!v621)
      {
        ((void (*)(std::__shared_weak_count *))v619->__on_zero_shared)(v619);
        std::__shared_weak_count::__release_weak(v619);
      }
    }
  }
  else
  {
    os_log_type_enabled(v588, OS_LOG_TYPE_DEBUG);
    v622 = *(_QWORD *)(v809 + 32);
    *(_DWORD *)object = 134217984;
    *(_QWORD *)&object[4] = v622;
    v623 = (void *)_os_log_send_and_compose_impl();
    if (v623)
      free(v623);
  }
  if (v573)
  {
    sub_20E8C003C((uint64_t)v870, "[PARITY-LSE_OUTPUT] Pose TS: %.30g", *(double *)(*(_QWORD *)v805 + 32));
    sub_20E863570((uint64_t)v870);
  }
  sub_20E863570((uint64_t)v870);
  v624 = *(std::__shared_weak_count **)&v873[16];
  if (*(_QWORD *)&v873[16])
  {
    v625 = (unint64_t *)(*(_QWORD *)&v873[16] + 8);
    do
      v626 = __ldaxr(v625);
    while (__stlxr(v626 - 1, v625));
    if (!v626)
    {
      ((void (*)(std::__shared_weak_count *))v624->__on_zero_shared)(v624);
      std::__shared_weak_count::__release_weak(v624);
    }
  }
LABEL_790:
  if (!*(_BYTE *)(v805 + 128))
    goto LABEL_791;
LABEL_949:
  v709 = *(_QWORD *)(v810 + 16);
  if (v709 && v1112 && v797[1023])
  {
    v710 = *(_QWORD *)(v810 + 11488);
    if (*(_BYTE *)(v710 + 2504))
    {
      v711 = (float64x2_t *)(v710 + 2376);
      _Q6.f64[0] = *(float64_t *)&v1102[24];
      _V4.D[1] = *(_QWORD *)&v1104[16];
      v714 = v711[1];
      _Q6.f64[1] = *(float64_t *)v1104;
      _Q0 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)&v1102[8], (int64x2_t)v1103), v1108.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)&v1102[8], (int64x2_t)v1103), v1108, 1), _Q6, v1109);
      _D16 = v1108.f64[1];
      __asm { FMLA            D6, D16, V4.D[1] }
      _Q6.f64[0] = _Q6.f64[0] + *(double *)&v1104[24] * v1109;
      *(_QWORD *)&v717 = *(_OWORD *)&vnegq_f64(_Q0);
      v719 = v711[2];
      _Q16 = v711[3];
      v721 = v711[4];
      v720 = v711[5];
      v723 = v711[6];
      v722 = v711[7];
      v724 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*v711, *(double *)&v1102[8]), v719, v1103.f64[0]), v721, *(double *)&v1104[8]), (float64x2_t)0, v723);
      v725 = (int64x2_t)vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(*v711, *(float64x2_t *)&v1102[8], 1), v719, v1103, 1), v721, *(float64x2_t *)&v1104[8], 1), (float64x2_t)0, v723);
      _Q19 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*v711, *(double *)&v1102[24]), v719, *(double *)v1104), v721, *(double *)&v1104[24]), (float64x2_t)0, v723);
      *(_QWORD *)&v727 = *(_OWORD *)&vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v714, *(double *)&v1102[24]), _Q16, *(double *)v1104), v720, *(double *)&v1104[24]), (float64x2_t)0, v722);
      v728 = vaddq_f64(v723, vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(*v711, v717), v719, _Q0, 1), v721, _Q6.f64[0], 0));
      *(_QWORD *)&_Q0.f64[0] = *(_OWORD *)&vaddq_f64(v722, vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v714, v717), _Q16, _Q0, 1), v720, _Q6.f64[0], 0));
      v729 = (float64x2_t)vzip1q_s64(v724, v725);
      v730 = (float64x2_t)vzip2q_s64(v724, v725);
      v731 = (float64x2_t)vzip1q_s64((int64x2_t)vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v714, *(double *)&v1102[8]), _Q16, v1103.f64[0]), v720, *(double *)&v1104[8]), (float64x2_t)0, v722), (int64x2_t)vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v714, *(float64x2_t *)&v1102[8], 1), _Q16, v1103, 1), v720, *(float64x2_t *)&v1104[8], 1), (float64x2_t)0, v722));
      v732 = vextq_s8((int8x16_t)v730, (int8x16_t)vdupq_laneq_s64(_Q19, 1), 8uLL);
      v733 = _Q0.f64[0];
      v734 = *(_QWORD *)&v728.f64[1] ^ 0x8000000000000000;
      v735 = vmlaq_f64(vmulq_f64(v729, (float64x2_t)vdupq_n_s64(*(_QWORD *)&v728.f64[0] ^ 0x8000000000000000)), (float64x2_t)vdupq_n_s64(*(_QWORD *)&v728.f64[1] ^ 0x8000000000000000), v730);
      v736 = (float64x2_t)vdupq_n_s64(*(_QWORD *)&_Q0.f64[0] ^ 0x8000000000000000);
      *(_QWORD *)&_Q16.f64[0] = v734;
      __asm { FMLA            D0, D16, V19.D[1] }
      *(_QWORD *)&v730.f64[1] = v732.i64[0];
      *(_OWORD *)v966 = *(unint64_t *)&v727;
      *(float64x2_t *)v965 = v731;
      *(_OWORD *)&object[16] = _Q19.u64[0];
      *(float64x2_t *)object = v729;
      *(_OWORD *)&object[48] = v732.u64[1];
      *(float64x2_t *)&object[32] = v730;
      *(float64x2_t *)&v966[16] = vmlaq_f64(v735, v736, v731);
      v967[0] = COERCE_VOID_(vmlad_n_f64(_Q0.f64[0], COERCE_DOUBLE(*(_QWORD *)&v733 ^ 0x8000000000000000), v727));
      v967[1] = (void *)0x3FF0000000000000;
      sub_20FDAED18(v709 + 296, (float64x2_t *)object);
      goto LABEL_976;
    }
    v737 = sub_210219C18();
    v738 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
    if ((v738 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
    {
      __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DDD0);
    }
    if (atomic_load(&qword_254A5A450))
    {
      *(_WORD *)object = 0;
      v740 = (char *)_os_log_send_and_compose_impl();
      v741 = strlen(v740);
      v870[0] = 0;
      pthread_threadid_np(0, v870);
      v742 = v870[0];
      timespec_get((timespec *)v870, 1);
      sub_210219E20(object, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v737 + 1), (__int128 *)(v737 + 5), "SemAngularCoverage: Failed to get extrinsics.", 0x2DuLL, v740, v741, v742, v870);
      std::mutex::lock(&stru_254A5A410);
      v743 = qword_254A5A458;
      for (n = unk_254A5A460; v743 != n; v743 += 40)
      {
        v745 = *(_QWORD *)(v743 + 32);
        if (!v745)
          sub_20E86D37C();
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v745 + 48))(v745, object);
      }
      std::mutex::unlock(&stru_254A5A410);
      if (SHIBYTE(v968) < 0)
      {
        operator delete(v967[1]);
        if (SHIBYTE(v967[0]) < 0)
          goto LABEL_964;
LABEL_961:
        if (v966[8])
        {
LABEL_965:
          if ((v966[7] & 0x80000000) != 0)
            operator delete(v965[0]);
        }
      }
      else
      {
        if ((SHIBYTE(v967[0]) & 0x80000000) == 0)
          goto LABEL_961;
LABEL_964:
        operator delete(*(void **)&v966[16]);
        if (v966[8])
          goto LABEL_965;
      }
      if (object[56] && (object[55] & 0x80000000) != 0)
        operator delete(*(void **)&object[32]);
      if ((object[31] & 0x80000000) != 0)
        operator delete(*(void **)&object[8]);
      if (v740)
        free(v740);
    }
    if (os_signpost_enabled((os_log_t)*v737))
    {
      *(_WORD *)object = 0;
      _os_signpost_emit_unreliably_with_name_impl();
    }
  }
LABEL_976:
  v746 = (char *)v819[0];
  if (v819[0])
  {
    v747 = (char *)v819[1];
    v748 = v819[0];
    if (v819[1] != v819[0])
    {
      do
      {
        v749 = (void *)*((_QWORD *)v747 - 3);
        if (v749)
        {
          *((_QWORD *)v747 - 2) = v749;
          operator delete(v749);
        }
        v750 = (void *)*((_QWORD *)v747 - 6);
        if (v750)
        {
          *((_QWORD *)v747 - 5) = v750;
          operator delete(v750);
        }
        v747 -= 56;
      }
      while (v747 != v746);
      v748 = v819[0];
    }
    v819[1] = v746;
    operator delete(v748);
  }
  if (v827)
  {
    v751 = (char *)v825[0];
    if (v825[0])
    {
      v752 = v825[1];
      v753 = v825[0];
      if (v825[1] != v825[0])
      {
        v754 = (char *)v825[1];
        do
        {
          v756 = (void *)*((_QWORD *)v754 - 3);
          v754 -= 24;
          v755 = v756;
          if (v756)
          {
            *(v752 - 2) = v755;
            operator delete(v755);
          }
          v752 = v754;
        }
        while (v754 != v751);
        v753 = v825[0];
      }
      v825[1] = v751;
      operator delete(v753);
    }
    v757 = v823;
    if ((_QWORD)v823)
    {
      v758 = (void *)v823;
      if (*((_QWORD *)&v823 + 1) != (_QWORD)v823)
      {
        v759 = *((_QWORD *)&v823 + 1) - 24;
        v760 = (void (***)(uint64_t))(*((_QWORD *)&v823 + 1) - 24);
        do
        {
          v761 = *v760;
          v760 -= 3;
          (*v761)(v759);
          _ZF = v759 == v757;
          v759 = (uint64_t)v760;
        }
        while (!_ZF);
        v758 = (void *)v823;
      }
      *((_QWORD *)&v823 + 1) = v757;
      operator delete(v758);
    }
    if (v821[0])
    {
      v821[1] = v821[0];
      operator delete(v821[0]);
    }
  }
  if (v832)
  {
    v762 = v830;
    if ((_QWORD)v830)
    {
      v763 = *((_QWORD *)&v830 + 1);
      v764 = (void *)v830;
      if (*((_QWORD *)&v830 + 1) != (_QWORD)v830)
      {
        v765 = *((_QWORD *)&v830 + 1);
        do
        {
          v767 = *(void **)(v765 - 24);
          v765 -= 24;
          v766 = v767;
          if (v767)
          {
            *(_QWORD *)(v763 - 16) = v766;
            operator delete(v766);
          }
          v763 = v765;
        }
        while (v765 != v762);
        v764 = (void *)v830;
      }
      *((_QWORD *)&v830 + 1) = v762;
      operator delete(v764);
    }
    if (v828[0])
    {
      v828[1] = v828[0];
      operator delete(v828[0]);
    }
  }
  if (v841)
    sub_20EE62D7C((void **)&v833);
  sub_20E91E818((uint64_t)v842);
  return sub_20EE62F80((uint64_t)v1101);
}

void sub_20EE51940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  void *a71;
  uint64_t v71;

  if (*(_BYTE *)(v71 + 24) && *(char *)(v71 + 23) < 0)
    operator delete((void *)STACK[0x15D0]);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0x610]);
  if (*(_BYTE *)(a32 + 128))
    sub_20E9C1D58((_QWORD *)a32);
  sub_20EE583B0(&a49);
  sub_20EE62CA8((uint64_t)&a53);
  sub_20EE58430(&a63);
  if (LOBYTE(STACK[0x250]))
    sub_20EE62D7C(&a71);
  sub_20E91E818((uint64_t)&STACK[0x260]);
  sub_20EE62F80((uint64_t)&STACK[0x2B40]);
  _Unwind_Resume(a1);
}

void sub_20EE51C10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  sub_20E896984((uint64_t)&a37);
  JUMPOUT(0x20EE52190);
}

void sub_20EE51C24()
{
  JUMPOUT(0x20EE52110);
}

void sub_20EE51C2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a71;

  sub_20E86665C((uint64_t)&a39);
  if (*(_BYTE *)(a32 + 128))
    sub_20E9C1D58((_QWORD *)a32);
  sub_20EE583B0(&a49);
  sub_20EE62CA8((uint64_t)&a53);
  sub_20EE58430((uint64_t)&a63);
  if (LOBYTE(STACK[0x250]))
    sub_20EE62D7C(&a71);
  sub_20E91E818((uint64_t)&STACK[0x260]);
  sub_20EE62F80((uint64_t)&STACK[0x2B40]);
  _Unwind_Resume(a1);
}

void sub_20EE51C38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, void **a17, void **a18, void **a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void **a24,uint64_t a25,void **a26,void **a27,uint64_t a28,void **a29,uint64_t a30,uint64_t a31)
{
  char *v31;
  char *v32;
  void *v33;
  char *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;

  v31 = (char *)*a29;
  if (*a29)
  {
    v32 = *(char **)(a31 + 256);
    v33 = *a29;
    if (v32 != v31)
    {
      v34 = *(char **)(a31 + 256);
      do
      {
        v36 = (void *)*((_QWORD *)v34 - 3);
        v34 -= 24;
        v35 = v36;
        if (v36)
        {
          *((_QWORD *)v32 - 2) = v35;
          operator delete(v35);
        }
        v32 = v34;
      }
      while (v34 != v31);
      v33 = *a29;
    }
    *(_QWORD *)(a31 + 256) = v31;
    operator delete(v33);
  }
  v37 = *a16;
  if (*a16)
  {
    *(_QWORD *)(a31 + 232) = v37;
    operator delete(v37);
  }
  v38 = *a17;
  if (*a17)
  {
    *(_QWORD *)(a31 + 208) = v38;
    operator delete(v38);
  }
  sub_20EAB9B98(a18);
  v39 = *a19;
  if (*a19)
  {
    *(_QWORD *)(a31 + 160) = v39;
    operator delete(v39);
    v40 = *a26;
    if (!*a26)
    {
LABEL_15:
      v41 = *a24;
      if (!*a24)
        goto LABEL_17;
      goto LABEL_16;
    }
  }
  else
  {
    v40 = *a26;
    if (!*a26)
      goto LABEL_15;
  }
  *(_QWORD *)(a31 + 136) = v40;
  operator delete(v40);
  v41 = *a24;
  if (!*a24)
  {
LABEL_17:
    v42 = *a27;
    if (*a27)
    {
      *(_QWORD *)(a31 + 64) = v42;
      operator delete(v42);
    }
    sub_20E991500(a28, *(_QWORD **)(a31 + 40));
    std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)a31);
    operator delete(v43);
    sub_20EAF9A2C((uint64_t)&STACK[0x15D0]);
    JUMPOUT(0x20EE52188);
  }
LABEL_16:
  *(_QWORD *)(a31 + 88) = v41;
  operator delete(v41);
  goto LABEL_17;
}

void sub_20EE51C40()
{
  _QWORD *v0;

  if (!*v0)
    JUMPOUT(0x20EE52020);
  JUMPOUT(0x20EE52014);
}

void sub_20EE51C50()
{
  _QWORD *v0;

  if (!*v0)
    JUMPOUT(0x20EE52038);
  JUMPOUT(0x20EE5202CLL);
}

void sub_20EE51C60()
{
  sub_20EACFA88((void ***)&STACK[0x610]);
  JUMPOUT(0x20EE520ACLL);
}

void sub_20EE51C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void **a24,uint64_t a25,void **a26,void **a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;

  v72 = *a19;
  if (*a19)
  {
    *(_QWORD *)(a31 + 160) = v72;
    operator delete(v72);
    v73 = *a26;
    if (!*a26)
    {
LABEL_3:
      v74 = *a24;
      if (!*a24)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v73 = *a26;
    if (!*a26)
      goto LABEL_3;
  }
  *(_QWORD *)(a31 + 136) = v73;
  operator delete(v73);
  v74 = *a24;
  if (!*a24)
  {
LABEL_5:
    v75 = *a27;
    if (*a27)
    {
      *(_QWORD *)(a31 + 64) = v75;
      operator delete(v75);
    }
    sub_20E991500(a28, *(_QWORD **)(a31 + 40));
    std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)a31);
    operator delete(v76);
    sub_20EAF9A2C((uint64_t)&STACK[0x15D0]);
    sub_20E86665C((uint64_t)&a39);
    if (*(_BYTE *)(a32 + 128))
      sub_20E9C1D58((_QWORD *)a32);
    sub_20EE583B0(&a49);
    sub_20EE62CA8((uint64_t)&a53);
    sub_20EE58430((uint64_t)&a63);
    if (LOBYTE(STACK[0x250]))
      sub_20EE62D7C(&a71);
    sub_20E91E818((uint64_t)&STACK[0x260]);
    sub_20EE62F80((uint64_t)&STACK[0x2B40]);
    _Unwind_Resume(a1);
  }
LABEL_4:
  *(_QWORD *)(a31 + 88) = v74;
  operator delete(v74);
  goto LABEL_5;
}

void sub_20EE51C70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,_QWORD *a26)
{
  if (*a26)
    JUMPOUT(0x20EE52138);
  JUMPOUT(0x20EE520C4);
}

void sub_20EE51C84()
{
  _QWORD *v0;

  if (!*v0)
    JUMPOUT(0x20EE520DCLL);
  JUMPOUT(0x20EE520D0);
}

void sub_20EE51C94()
{
  _QWORD *v0;

  if (!*v0)
    JUMPOUT(0x20EE520F4);
  JUMPOUT(0x20EE520E8);
}

void sub_20EE51CAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;
  void *a72;
  std::__shared_weak_count *v72;
  void *v74;

  std::__shared_weak_count::~__shared_weak_count(v72);
  operator delete(v74);
  sub_20EAFDDD0((uint64_t)&STACK[0x15D0]);
  sub_20E86665C((uint64_t)&a40);
  if (*(_BYTE *)(a33 + 128))
    sub_20E9C1D58((_QWORD *)a33);
  sub_20EE583B0(&a50);
  sub_20EE62CA8((uint64_t)&a54);
  sub_20EE58430((uint64_t)&a64);
  if (LOBYTE(STACK[0x250]))
    sub_20EE62D7C(&a72);
  sub_20E91E818((uint64_t)&STACK[0x260]);
  sub_20EE62F80((uint64_t)&STACK[0x2B40]);
  _Unwind_Resume(a1);
}

void sub_20EE51CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a71;

  sub_20E86665C(&a39);
  if (*(_BYTE *)(a32 + 128))
    sub_20E9C1D58();
  sub_20EE583B0(&a49);
  sub_20EE62CA8(&a53);
  sub_20EE58430(&a63);
  if (LOBYTE(STACK[0x250]))
    sub_20EE62D7C(&a71);
  sub_20E91E818(&STACK[0x260]);
  sub_20EE62F80(&STACK[0x2B40]);
  _Unwind_Resume(a1);
}

void sub_20EE51CDC()
{
  JUMPOUT(0x20EE51EF4);
}

void sub_20EE51CEC()
{
  std::__shared_weak_count *v0;
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(v0);
  operator delete(v1);
  sub_20EE581EC(&STACK[0x15D0]);
  sub_20ED7DC5C((uint64_t)&STACK[0x14D0]);
  sub_20EAB96CC((uint64_t)&STACK[0x610]);
  JUMPOUT(0x20EE52190);
}

void sub_20EE51DE8()
{
  JUMPOUT(0x20EE521A0);
}

void sub_20EE51DF0()
{
  std::mutex::unlock(&stru_254A5A410);
  JUMPOUT(0x20EE51E04);
}

void sub_20EE51E20(_Unwind_Exception *a1)
{
  sub_20EE62F80((uint64_t)&STACK[0x2B40]);
  _Unwind_Resume(a1);
}

void sub_20EE51E3C(_Unwind_Exception *a1, int a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    __cxa_begin_catch(a1);
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_20EE51E68()
{
  __cxa_end_catch();
  JUMPOUT(0x20EE51F68);
}

void sub_20EE51E74(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20EE51E84()
{
  JUMPOUT(0x20EE52190);
}

void sub_20EE51E90()
{
  uint64_t v0;
  void **v1;
  void *v2;

  v2 = *v1;
  if (*v1)
  {
    *(_QWORD *)(v0 + 48) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20EE51EB0);
}

void sub_20EE51EC4()
{
  sub_20E86665C((uint64_t)&STACK[0x610]);
  sub_20E991850((uint64_t)&STACK[0x15D0]);
  JUMPOUT(0x20EE52188);
}

void sub_20EE51ED4()
{
  std::mutex::unlock(&stru_254A5A410);
  JUMPOUT(0x20EE51EE8);
}

void sub_20EE51F38()
{
  JUMPOUT(0x20EE520F4);
}

void sub_20EE51F40()
{
  JUMPOUT(0x20EE520F0);
}

void sub_20EE51F4C()
{
  sub_20EE581EC(&STACK[0x15D0]);
  sub_20E91EA40((uint64_t)&STACK[0x610]);
  JUMPOUT(0x20EE52190);
}

void sub_20EE51F54()
{
  JUMPOUT(0x20EE51F64);
}

void sub_20EE51F80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;

  sub_20E96AC74((uint64_t)&STACK[0x610]);
  *(_QWORD *)(a31 + 256) = v31;
  JUMPOUT(0x20EE51FACLL);
}

void sub_20EE52044()
{
  std::mutex::unlock(&stru_254A5A410);
  JUMPOUT(0x20EE52058);
}

void sub_20EE52078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a71;

  sub_20E86665C(&a39);
  if (*(_BYTE *)(a32 + 128))
    sub_20E9C1D58();
  sub_20EE583B0(&a49);
  sub_20EE62CA8(&a53);
  sub_20EE58430(&a63);
  if (LOBYTE(STACK[0x250]))
    sub_20EE62D7C(&a71);
  sub_20E91E818(&STACK[0x260]);
  sub_20EE62F80(&STACK[0x2B40]);
  _Unwind_Resume(a1);
}

void sub_20EE52080(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;

  for (; v32; v32 -= 176)
    sub_20E991548((_QWORD *)(v31 - 168 + v32));
  *(_QWORD *)(a31 + 184) = v31;
  JUMPOUT(0x20EE520A4);
}

void sub_20EE52154()
{
  sub_20E86665C((uint64_t)&STACK[0x610]);
  JUMPOUT(0x20EE52164);
}

uint64_t sub_20EE521E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 11464) + 24))(*(_QWORD *)(a1 + 11464));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 11464) + 72))(*(_QWORD *)(a1 + 11464));
  return sub_20EE4BA24(a2);
}

void sub_20EE5222C(_QWORD *a1, uint64_t *a2)
{
  uint64_t *v4;
  unsigned __int8 v5;
  char *v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned __int8 v18;
  char *v20;
  size_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t j;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  void *v40;
  char v41;
  void *v42;
  char v43;
  char v44;
  void *v45;
  char v46;
  char v47;
  void *v48;
  char v49;
  void *__p;
  char v51;
  __uint64_t v52[2];

  v4 = sub_210219C18();
  v5 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    LOWORD(v39) = 0;
    v7 = (char *)_os_log_send_and_compose_impl();
    v8 = strlen(v7);
    v52[0] = 0;
    pthread_threadid_np(0, v52);
    v9 = v52[0];
    timespec_get((timespec *)v52, 1);
    sub_210219E20(&v39, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v4 + 1), (__int128 *)(v4 + 5), "LSE:SemReceived", 0xFuLL, v7, v8, v9, v52);
    std::mutex::lock(&stru_254A5A410);
    v10 = qword_254A5A458;
    for (i = unk_254A5A460; v10 != i; v10 += 40)
    {
      v12 = *(_QWORD *)(v10 + 32);
      if (!v12)
        sub_20E86D37C();
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v12 + 48))(v12, &v39);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v51 < 0)
    {
      operator delete(__p);
      if ((v49 & 0x80000000) == 0)
      {
LABEL_8:
        if (!v47)
        {
LABEL_14:
          if (v44 && v43 < 0)
            operator delete(v42);
          if (v41 < 0)
            operator delete(v40);
          if (v7)
            free(v7);
          goto LABEL_21;
        }
LABEL_12:
        if (v46 < 0)
          operator delete(v45);
        goto LABEL_14;
      }
    }
    else if ((v49 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(v48);
    if (!v47)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_21:
  if (os_signpost_enabled((os_log_t)*v4))
  {
    LOWORD(v39) = 0;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  v13 = a1[2];
  if (v13)
  {
    if (*a2)
    {
      v14 = (*(float (**)(uint64_t, uint64_t *))(*(_QWORD *)v13 + 56))(v13, a2);
      v15 = a1[2];
      if (v14 >= *(float *)(v15 + 40))
      {
        v16 = *a2;
        *(float *)(v16 + 252) = v14;
        *(_BYTE *)(v16 + 256) = 1;
        sub_20FDB0BC8(v15 + 184, (_QWORD *)v16);
        if (!a1[1490])
        {
LABEL_49:
          v26 = (_QWORD *)(a1[1485] + 16 * a1[1489]);
          v28 = *a2;
          v27 = a2[1];
          if (v27)
          {
            v29 = (unint64_t *)(v27 + 8);
            do
              v30 = __ldxr(v29);
            while (__stxr(v30 + 1, v29));
          }
          v31 = (std::__shared_weak_count *)v26[1];
          *v26 = v28;
          v26[1] = v27;
          if (v31)
          {
            p_shared_owners = (unint64_t *)&v31->__shared_owners_;
            do
              v33 = __ldaxr(p_shared_owners);
            while (__stlxr(v33 - 1, p_shared_owners));
            if (!v33)
            {
              ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
              std::__shared_weak_count::__release_weak(v31);
            }
          }
          v34 = (uint64_t)(a1[1486] - a1[1485]) >> 4;
          v35 = a1[1489] + 1;
          if (v35 >= v34)
            v36 = (uint64_t)(a1[1486] - a1[1485]) >> 4;
          else
            v36 = 0;
          a1[1489] = v35 - v36;
          v37 = a1[1490];
          if (v37 == v34)
          {
            v38 = a1[1488] + 1;
            if (v38 < v34)
              v34 = 0;
            a1[1488] = v38 - v34;
          }
          else
          {
            a1[1490] = v37 + 1;
          }
          return;
        }
        v17 = sub_210219C18();
        v18 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
        if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
        {
          __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DDD0);
        }
        if (!atomic_load(&qword_254A5A450))
        {
LABEL_47:
          if (os_signpost_enabled((os_log_t)*v17))
          {
            LOWORD(v39) = 0;
            _os_signpost_emit_unreliably_with_name_impl();
          }
          goto LABEL_49;
        }
        LOWORD(v39) = 0;
        v20 = (char *)_os_log_send_and_compose_impl();
        v21 = strlen(v20);
        v52[0] = 0;
        pthread_threadid_np(0, v52);
        v22 = v52[0];
        timespec_get((timespec *)v52, 1);
        sub_210219E20(&v39, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v17 + 1), (__int128 *)(v17 + 5), "LSE:ASF: Previously cached semantics not processed.", 0x33uLL, v20, v21, v22, v52);
        std::mutex::lock(&stru_254A5A410);
        v23 = qword_254A5A458;
        for (j = unk_254A5A460; v23 != j; v23 += 40)
        {
          v25 = *(_QWORD *)(v23 + 32);
          if (!v25)
            sub_20E86D37C();
          (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v25 + 48))(v25, &v39);
        }
        std::mutex::unlock(&stru_254A5A410);
        if (v51 < 0)
        {
          operator delete(__p);
          if ((v49 & 0x80000000) == 0)
          {
LABEL_34:
            if (!v47)
            {
LABEL_40:
              if (v44 && v43 < 0)
                operator delete(v42);
              if (v41 < 0)
                operator delete(v40);
              if (v20)
                free(v20);
              goto LABEL_47;
            }
LABEL_38:
            if (v46 < 0)
              operator delete(v45);
            goto LABEL_40;
          }
        }
        else if ((v49 & 0x80000000) == 0)
        {
          goto LABEL_34;
        }
        operator delete(v48);
        if (!v47)
          goto LABEL_40;
        goto LABEL_38;
      }
    }
  }
}

void sub_20EE527F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  va_list va;

  va_start(va, a5);
  sub_20E96E218((uint64_t)va);
  if (v5)
    free(v5);
  _Unwind_Resume(a1);
}

void sub_20EE52868(_QWORD **a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  char v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;
  char v23;
  std::__shared_weak_count *v24;
  char v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  int v37;
  __int16 v38;

  v23 = 0;
  v25 = 0;
  v6 = *(_DWORD *)a2;
  v7 = *((_DWORD *)a2 + 1);
  if (*(_DWORD *)a2 <= 1u)
  {
    if (v7 == 7 || v7 == 1)
    {
      v9 = (uint64_t)((a2[6] - a2[5]) * 1000000.0);
      v10 = 1;
    }
    else
    {
      v9 = 0;
      v10 = 0;
    }
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1[1] + 72))(a1[1], v9, v10);
    v6 = *(_DWORD *)a2;
  }
  if (v6 == 2)
  {
    if (v7 == 7 || v7 == 1)
    {
      *(_QWORD *)&v26 = (uint64_t)((a2[6] - a2[5]) * 1000.0);
      v12 = 1;
    }
    else
    {
      v12 = 0;
      LOBYTE(v26) = 0;
    }
    BYTE8(v26) = v12;
    (*(void (**)(_QWORD *, __int128 *))(*a1[1] + 80))(a1[1], &v26);
  }
  if (*((_DWORD *)a2 + 1) == 7)
  {
    v13 = 12;
    if (a2[6] - a2[5] < 10.0)
      v13 = 11;
    v38 = 0;
    v37 = v13;
    ((void (*)(__int128 *__return_ptr, _QWORD **, uint64_t, _QWORD, _QWORD))(*a1)[38])(&v22, a1, 1, 0, 0);
    v14 = v22;
    if (!(_QWORD)v22)
    {
      v32 = 0;
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      v26 = 0u;
      v27 = 0u;
      v34 = 0;
      v35 = 0;
      v33 = 0;
      v36 = 0;
      v15 = operator new(0xA0uLL);
      v15[1] = 0;
      v15[2] = 0;
      *v15 = &off_24C9B3930;
      v15[4] = 0;
      v15[5] = 0;
      v15[3] = 0;
      v26 = 0uLL;
      v27 = 0uLL;
      v15[6] = 0;
      v15[7] = 0;
      v28 = 0uLL;
      v15[8] = 0;
      v15[9] = 0;
      v15[10] = 0;
      v15[11] = 0;
      v29 = 0uLL;
      v15[13] = 0;
      v15[14] = 0;
      v15[12] = 0;
      v30 = 0uLL;
      v31 = 0uLL;
      *((_BYTE *)v15 + 120) = 0;
      v15[17] = 0;
      v15[18] = 0;
      v15[16] = 0;
      v34 = 0;
      v35 = 0;
      v33 = 0;
      *((_BYTE *)v15 + 152) = 0;
      v16 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
      *(_QWORD *)&v22 = v15 + 3;
      *((_QWORD *)&v22 + 1) = v15;
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      sub_20E995400((void **)&v26);
      v14 = v22;
    }
    *(_BYTE *)(v14 + 96) = 1;
    ((void (*)(_QWORD **, int *))(*a1)[25])(a1, &v37);
    *(_OWORD *)a3 = v22;
    *(_BYTE *)(a3 + 16) = 1;
    if (v25)
    {
      v19 = v24;
      if (v24)
      {
        v20 = (unint64_t *)&v24->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
    }
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
  }
}

void sub_20EE52B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *a15)
{
  sub_20E995400(&a15);
  sub_20E86665C((uint64_t)&a9);
  sub_20E869AA8((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_20EE52B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E869AA8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EE52B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E869AA8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EE52B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E869AA8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE52B88(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 400))(*(_QWORD *)(a1 + 8));
}

void sub_20EE52B98(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  double v5;
  uint64_t *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  int64_t v20;
  char *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  char *v28;
  std::__shared_weak_count_vtbl **v29;
  uint64_t v30;
  unint64_t v31;
  std::__shared_weak_count_vtbl **v32;
  void *v33;
  uint64_t v34;
  char v35;
  char v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *__p;
  char **v57;
  std::__shared_weak_count_vtbl **v58;
  uint64_t v59;
  int v60;
  uint64_t *v61;
  std::__shared_weak_count *v62;
  _QWORD *v63;
  std::__shared_weak_count *v64;
  std::__shared_weak_count_vtbl *v65;
  std::__shared_weak_count_vtbl *v66;

  v2 = a1;
  if (*(int *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 432))(*(_QWORD *)(a1 + 8)) + 4904) < 1)
  {
    v5 = -1.0;
  }
  else
  {
    v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 8) + 432))(*(_QWORD *)(v2 + 8));
    if (*(int *)(v4 + 4904) <= 0
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionFG.cpp", 1506, (uint64_t)"HasProcessedFirstWindow() > 0", 29, (uint64_t)"VFusion Has not initialized yet", 31, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v5 = *(double *)(*(_QWORD *)(*(_QWORD *)(v4 + 4864) + 2512) - 8);
  }
  (*(void (**)(uint64_t **__return_ptr))(**(_QWORD **)(v2 + 11464) + 168))(&v61);
  v6 = v61;
  v7 = (std::__shared_weak_count *)operator new(0x30uLL);
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9EE8E0;
  v7->__shared_owners_ = 0;
  v7[1].__vftable = 0;
  v8 = &v7[1].__vftable;
  v7[1].__shared_weak_owners_ = 0;
  v7[1].__shared_owners_ = 0;
  v9 = *v6;
  v10 = v6[1];
  v11 = v10 - *v6;
  if (v10 != *v6)
  {
    v12 = 0xAAAAAAAAAAAAAAABLL * (v11 >> 3);
    if (v12 >= 0xAAAAAAAAAAAAAABLL)
      sub_20E867F44();
    v54 = v2;
    v55 = a2;
    v13 = (std::__shared_weak_count_vtbl *)operator new(v11);
    v14 = 0;
    v7[1].__vftable = v13;
    v7[1].__shared_owners_ = (uint64_t)v13;
    v7[1].__shared_weak_owners_ = (uint64_t)v13 + 24 * v12;
    v66 = v13;
    v65 = v13;
    __p = &v7[1].__shared_weak_owners_;
    v57 = (char **)&v65;
    v58 = &v66;
    LOBYTE(v59) = 0;
    do
    {
      v16 = (char *)v13 + v14;
      v17 = v9 + v14;
      *(_QWORD *)v16 = 0;
      *((_QWORD *)v16 + 1) = 0;
      *((_QWORD *)v16 + 2) = 0;
      v19 = *(_BYTE **)(v9 + v14);
      v18 = *(_BYTE **)(v9 + v14 + 8);
      v20 = v18 - v19;
      if (v18 != v19)
      {
        if (0x8E38E38E38E38E39 * (v20 >> 3) >= 0x38E38E38E38E38FLL)
          sub_20EB849AC();
        v21 = (char *)operator new(v20);
        *(_QWORD *)v16 = v21;
        *((_QWORD *)v16 + 1) = v21;
        v15 = &v21[8 * (v20 >> 3)];
        *((_QWORD *)v16 + 2) = v15;
        memcpy(v21, v19, v20);
        *((_QWORD *)v16 + 1) = v15;
      }
      v66 = (std::__shared_weak_count_vtbl *)(v16 + 24);
      v14 += 24;
    }
    while (v17 + 24 != v10);
    v8 = &v7[1].__vftable;
    v7[1].__shared_owners_ = (uint64_t)v13 + v14;
    v2 = v54;
    a2 = v55;
  }
  v63 = v8;
  v64 = v7;
  v22 = v62;
  if (v62)
  {
    p_shared_owners = (unint64_t *)&v62->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  sub_20F094B68(*(_QWORD *)(v2 + 8), (uint64_t)&__p);
  v25 = operator new(0x40uLL);
  v25[1] = 0;
  v25[2] = 0;
  v26 = __p;
  v27 = (unint64_t)v57;
  v25[3] = __p;
  v28 = (char *)(v25 + 3);
  *v25 = &off_24C9EE120;
  __p = 0;
  v57 = 0;
  v25[4] = v27;
  v29 = v58;
  v30 = v59;
  v25[5] = v58;
  v25[6] = v30;
  *((_DWORD *)v25 + 14) = v60;
  if (v30)
  {
    v31 = (unint64_t)v29[1];
    if ((v27 & (v27 - 1)) != 0)
    {
      if (v31 >= v27)
        v31 %= v27;
    }
    else
    {
      v31 &= v27 - 1;
    }
    v26[v31] = v25 + 5;
    v58 = 0;
    v59 = 0;
    v61 = v25 + 3;
    v62 = (std::__shared_weak_count *)v25;
  }
  else
  {
    v61 = v25 + 3;
    v62 = (std::__shared_weak_count *)v25;
    if (v29)
    {
      do
      {
        v32 = (std::__shared_weak_count_vtbl **)*v29;
        operator delete(v29);
        v29 = v32;
      }
      while (v32);
    }
  }
  v33 = __p;
  __p = 0;
  if (v33)
    operator delete(v33);
  v34 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 11464) + 88))(*(_QWORD *)(v2 + 11464));
  v35 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 11464) + 64))(*(_QWORD *)(v2 + 11464));
  v36 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 8) + 424))(*(_QWORD *)(v2 + 8));
  *(double *)a2 = v5;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(v2 + 11808);
  v37 = v62;
  *(_QWORD *)(a2 + 16) = v28;
  *(_QWORD *)(a2 + 24) = v37;
  if (v37)
  {
    v38 = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
  }
  v40 = v64;
  *(_QWORD *)(a2 + 32) = v63;
  *(_QWORD *)(a2 + 40) = v40;
  if (v40)
  {
    v41 = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  v43 = *(_OWORD *)(v34 + 176);
  *(_OWORD *)(a2 + 208) = *(_OWORD *)(v34 + 160);
  *(_OWORD *)(a2 + 224) = v43;
  *(_WORD *)(a2 + 240) = *(_WORD *)(v34 + 192);
  v44 = *(_OWORD *)(v34 + 112);
  *(_OWORD *)(a2 + 144) = *(_OWORD *)(v34 + 96);
  *(_OWORD *)(a2 + 160) = v44;
  v45 = *(_OWORD *)(v34 + 144);
  *(_OWORD *)(a2 + 176) = *(_OWORD *)(v34 + 128);
  *(_OWORD *)(a2 + 192) = v45;
  v46 = *(_OWORD *)(v34 + 48);
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(v34 + 32);
  *(_OWORD *)(a2 + 96) = v46;
  v47 = *(_OWORD *)(v34 + 80);
  *(_OWORD *)(a2 + 112) = *(_OWORD *)(v34 + 64);
  *(_OWORD *)(a2 + 128) = v47;
  v48 = *(_OWORD *)(v34 + 16);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)v34;
  *(_OWORD *)(a2 + 64) = v48;
  *(_BYTE *)(a2 + 248) = v35;
  *(_BYTE *)(a2 + 249) = v36;
  *(_BYTE *)(a2 + 250) = *(_BYTE *)(v2 + 11809);
  if (v37)
  {
    v49 = (unint64_t *)&v37->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v51 = v64;
  if (v64)
  {
    v52 = (unint64_t *)&v64->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
}

void sub_20EE53028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EE5304C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  sub_20E8C25A8((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EE53068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EE5307C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EE53090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, std::__shared_weak_count *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v20;
  uint64_t shared_owners;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;

  v20 = *a12;
  if (*a12)
  {
    shared_owners = a13[1].__shared_owners_;
    v22 = (void *)*a12;
    if (shared_owners != v20)
    {
      v23 = a13[1].__shared_owners_;
      do
      {
        v25 = *(void **)(v23 - 24);
        v23 -= 24;
        v24 = v25;
        if (v25)
        {
          *(_QWORD *)(shared_owners - 16) = v24;
          operator delete(v24);
        }
        shared_owners = v23;
      }
      while (v23 != v20);
      v22 = (void *)*a12;
    }
    a13[1].__shared_owners_ = v20;
    operator delete(v22);
  }
  std::__shared_weak_count::~__shared_weak_count(a13);
  operator delete(v26);
  sub_20E86665C((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE5313C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  _DWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, const char *, uint64_t, const char *, uint64_t);
  uint64_t v30;
  std::logic_error *exception;
  _QWORD *v34;
  _QWORD *v36;
  char v37;

  v4 = -1431655765 * ((*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = *(_QWORD *)a2 + v5;
      v9 = *(_DWORD **)v8;
      if (*(_QWORD *)v8 == *(_QWORD *)(v8 + 8))
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/src/NodeCameraSetFeatures.cpp", 71, (uint64_t)"!sequence_camera_stream_features_.empty()", 41, (uint64_t)&unk_2102C50BE, 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v9 = *(_DWORD **)v8;
      }
      if (v6 != *v9)
        break;
      v7 = ++v6 >= v4;
      v5 += 24;
    }
    while (v4 != v6);
    if (!v7
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/SlamEngine/src/LocalSlamEngine.cpp", 458, (uint64_t)"measurements.IsCameraIDAlignedAsIndex()", 39, (uint64_t)"Camera feature measuremetns are not aligned as zero based CameraIDs", 67, (void (*)(void **))sub_21023DDB0))
    {
LABEL_66:
      abort();
    }
  }
  v10 = *(_QWORD **)a2;
  v34 = *(_QWORD **)(a2 + 8);
  if (*(_QWORD **)a2 != v34)
  {
    v37 = 0;
    while (1)
    {
      v11 = *v10;
      if (*v10 == v10[1])
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/src/NodeCameraSetFeatures.cpp", 71, (uint64_t)"!sequence_camera_stream_features_.empty()", 41, (uint64_t)&unk_2102C50BE, 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_66;
        }
        v11 = *v10;
        v15 = *(_QWORD *)(a1 + 11488);
        v14 = *(_QWORD *)(v15 + 80);
        v13 = *(_QWORD *)(v15 + 88);
        if (v14 != v13)
        {
LABEL_18:
          while (*(_DWORD *)v14 != *(_DWORD *)v11)
          {
            v14 += 1088;
            if (v14 == v13)
              goto LABEL_65;
          }
        }
      }
      else
      {
        v12 = *(_QWORD *)(a1 + 11488);
        v14 = *(_QWORD *)(v12 + 80);
        v13 = *(_QWORD *)(v12 + 88);
        if (v14 != v13)
          goto LABEL_18;
      }
      if (v14 == v13)
      {
LABEL_65:
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_20E92751C(exception, "Requested camera id not found.");
        __cxa_throw(exception, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
      }
      v36 = v10;
      v16 = v10[1];
      if (v11 != v16)
        break;
LABEL_12:
      v10 = v36 + 3;
      if (v36 + 3 == v34)
        goto LABEL_62;
    }
    v17 = 0;
    while (1)
    {
      v20 = *(_QWORD *)(v11 + 200);
      if (!v20)
        goto LABEL_31;
      if (*(_BYTE *)(v20 + 184))
      {
        v21 = *(_QWORD *)(v20 + 88) - *(_QWORD *)(v20 + 80);
        if (v21)
          v22 = v21 == *(_QWORD *)(v20 + 168) - *(_QWORD *)(v20 + 160);
        else
          v22 = 0;
        if (v22)
        {
          v23 = (uint64_t)(*(_QWORD *)(v20 + 64) - *(_QWORD *)(v20 + 56)) >> 5;
          if (v23 == v21 >> 6)
          {
LABEL_43:
            if (*(_QWORD *)(v20 + 16) <= v23)
              goto LABEL_50;
          }
        }
      }
      else if (*(_QWORD *)(v20 + 160) == *(_QWORD *)(v20 + 168))
      {
        v23 = (uint64_t)(*(_QWORD *)(v20 + 64) - *(_QWORD *)(v20 + 56)) >> 5;
        if (v23 == (uint64_t)(*(_QWORD *)(v20 + 88) - *(_QWORD *)(v20 + 80)) >> 6)
          goto LABEL_43;
      }
      sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/PointDescriptorStore.h", 184, (uint64_t)"HasValidSize()", 14, (uint64_t)"Descriptor size mis-match", 25, (void (*)(void **))sub_21023DDB0);
      v24 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
      if ((v24 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
      {
        __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DE78);
      }
      if (!byte_254A6DE68 || byte_254A6DE70)
      {
        v26 = qword_254A6DE40;
        v27 = qword_254A6DE48;
        while (v26 != v27)
        {
          v29 = *(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))v26;
          v28 = *(_QWORD *)(v26 + 8);
          v26 += 16;
          v29(v28, "HasValidSize()", 14, "Descriptor size mis-match", 25);
        }
      }
      v25 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
      if ((v25 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
      {
        __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DE78);
      }
      if (!byte_254A6DE68)
        goto LABEL_66;
      qword_254A6DE58(unk_254A6DE60, "HasValidSize()", 14, "Descriptor size mis-match", 25);
      v23 = (uint64_t)(*(_QWORD *)(v20 + 64) - *(_QWORD *)(v20 + 56)) >> 5;
LABEL_50:
      if (v23)
      {
        if (v17 == 1)
        {
          v18 = *(_DWORD *)(v14 + 4) == 1 || *(_BYTE *)(v14 + 936) == 0;
LABEL_27:
          v19 = !v18;
          v37 |= v19;
          goto LABEL_31;
        }
        if (!v17)
        {
          v18 = *(_BYTE *)(v14 + 408) == 0;
          goto LABEL_27;
        }
      }
LABEL_31:
      ++v17;
      v11 += 712;
      if (v11 == v16)
        goto LABEL_12;
    }
  }
  v37 = 0;
LABEL_62:
  v30 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 432))(*(_QWORD *)(a1 + 8)) + 4864);
  *(_BYTE *)(v30 + 1928) = v37 & 1;
  if ((v37 & 1) == 0)
  {
    *(_QWORD *)(v30 + 8312) = *(_QWORD *)(v30 + 8304);
    *(_QWORD *)(v30 + 8336) = *(_QWORD *)(v30 + 8328);
    *(_QWORD *)(v30 + 8288) = *(_QWORD *)(v30 + 8280);
  }
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 11464) + 32))(*(_QWORD *)(a1 + 11464), a2);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 11464) + 72))(*(_QWORD *)(a1 + 11464));
  sub_20EE7B7B4((uint64_t **)a2);
  return sub_20EE4BA24(a3);
}

void sub_20EE5361C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20EE53630(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v6;
  _QWORD *v7;
  _OWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t **v21;
  uint64_t **v22;
  unint64_t v23;
  unsigned int v24;
  unint64_t v25;
  unsigned int v26;
  _OWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t **v30;
  uint64_t *v31;
  uint64_t **v32;
  BOOL v33;
  char __src[512];
  char v35;
  char __dst[512];
  char v37;
  _OWORD v38[2];
  int v39;
  uint64_t **v40;
  uint64_t *v41;
  uint64_t v42;
  int v43;
  char v44;
  uint64_t v45;
  __int128 v46;
  char v47;

  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    v41 = 0;
    v42 = 0;
    v40 = &v41;
    goto LABEL_8;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/SlamEngine/src/LocalSlamEngine.cpp", 503, (uint64_t)"!measurements.empty()", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v3 = *a2;
  v4 = a2[1];
  v41 = 0;
  v42 = 0;
  v40 = &v41;
  if (v3 == v4)
    goto LABEL_49;
LABEL_8:
  while (2)
  {
    if (*(_QWORD *)(v3 + 40) == *(_QWORD *)(v3 + 48)
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/SlamEngine/src/LocalSlamEngine.cpp", 509, (uint64_t)"!measurement.descriptors_of_vio_kps.empty()", 43, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = *(_DWORD *)(v3 + 32);
    if (v6 == 1)
    {
      v19 = *(_QWORD **)(a1 + 11472);
      __src[0] = 0;
      v35 = 0;
      if (*(_BYTE *)(v3 + 624))
      {
        memcpy(__src, (const void *)(v3 + 112), sizeof(__src));
        v35 = 1;
      }
      sub_20F308E78(v19, v3 + 8, (_QWORD *)(v3 + 40), __src);
      goto LABEL_7;
    }
    if (v6)
      goto LABEL_7;
    memset(v38, 0, sizeof(v38));
    v39 = 733222780;
    kdebug_trace();
    v7 = *(_QWORD **)(a1 + 11472);
    __dst[0] = 0;
    v37 = 0;
    if (*(_BYTE *)(v3 + 624))
    {
      memcpy(__dst, (const void *)(v3 + 112), sizeof(__dst));
      v37 = 1;
    }
    v8 = (_OWORD *)(v3 + 8);
    v9 = sub_20F308E78(v7, v3 + 8, (_QWORD *)(v3 + 40), __dst);
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 11472) + 80);
    v11 = *(_QWORD *)(v10 + 2824);
    v12 = *(_QWORD *)(v10 + 2832);
    if (v11 != v12)
    {
      v13 = 0;
      do
      {
        v15 = *(_QWORD *)(*(_QWORD *)(v11 + 16) + 424);
        v16 = *(_QWORD *)(v15 + 40);
        v17 = *(_QWORD *)(v15 + 48);
        if (v16 == v17)
        {
          v14 = 0;
        }
        else
        {
          v14 = 0;
          v18 = v16;
          do
          {
            if (*(_BYTE *)(*(_QWORD *)v18 + 736)
              || *(_QWORD *)(*(_QWORD *)v18 + 624) == *(_QWORD *)(*(_QWORD *)v18 + 616))
            {
              ++v14;
            }
            v18 += 16;
          }
          while (v18 != v17);
        }
        v13 = v13 - v14 + ((v17 - v16) >> 4);
        v11 += 4472;
      }
      while (v11 != v12);
    }
    kdebug_trace();
    if (v9)
      goto LABEL_6;
    if (!*(_BYTE *)(a1 + 8707) || !*(_BYTE *)(a1 + 8587))
      goto LABEL_45;
    v20 = v41;
    v21 = &v41;
    v22 = &v41;
    if (!v41)
      goto LABEL_42;
    v23 = *(_QWORD *)(v3 + 8);
    v24 = *(_DWORD *)(v3 + 16);
    do
    {
      while (1)
      {
        v22 = (uint64_t **)v20;
        v25 = v20[4];
        if (v23 < v25)
          goto LABEL_33;
        if (v23 != v25)
          break;
        v26 = *((_DWORD *)v22 + 10);
        if (v24 >= v26)
        {
          if (v26 >= v24)
            goto LABEL_45;
          goto LABEL_40;
        }
LABEL_33:
        v20 = *v22;
        v21 = v22;
        if (!*v22)
          goto LABEL_42;
      }
      if (v25 >= v23)
        goto LABEL_45;
LABEL_40:
      v20 = v22[1];
    }
    while (v20);
    v21 = v22 + 1;
LABEL_42:
    v27 = operator new(0x30uLL);
    v27[2] = *v8;
    *(_QWORD *)v27 = 0;
    *((_QWORD *)v27 + 1) = 0;
    *((_QWORD *)v27 + 2) = v22;
    *v21 = (uint64_t *)v27;
    if (*v40)
    {
      v40 = (uint64_t **)*v40;
      v27 = *v21;
    }
    sub_20E868578(v41, (uint64_t *)v27);
    ++v42;
LABEL_45:
    v28 = *(_QWORD **)(a1 + 11472);
    v29 = v28[10];
    if (*(_BYTE *)(v29 + 2499) && sub_20F325654(v29, (uint64_t *)(v3 + 8)))
    {
      v46 = *v8;
      v47 = 1;
      LODWORD(v45) = *(_DWORD *)(v3 + 24);
      BYTE4(v45) = 1;
      v43 = 2;
      v44 = 1;
      sub_20F30418C(v28, (uint64_t)&v46, &v45, (uint64_t)&v43);
    }
LABEL_6:
    kdebug_trace();
LABEL_7:
    v3 += 632;
    if (v3 != v4)
      continue;
    break;
  }
  v30 = v40;
  if (v40 != &v41)
  {
    do
    {
      v38[0] = *((_OWORD *)v30 + 2);
      sub_20F30C034(*(_QWORD *)(a1 + 11472), (uint64_t)v38);
      v31 = v30[1];
      if (v31)
      {
        do
        {
          v32 = (uint64_t **)v31;
          v31 = (uint64_t *)*v31;
        }
        while (v31);
      }
      else
      {
        do
        {
          v32 = (uint64_t **)v30[2];
          v33 = *v32 == (uint64_t *)v30;
          v30 = v32;
        }
        while (!v33);
      }
      v30 = v32;
    }
    while (v32 != &v41);
  }
LABEL_49:
  sub_20E86872C((uint64_t)&v40, v41);
}

void sub_20EE53A80(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86872C(v1 - 168, *(_QWORD **)(v1 - 160));
  _Unwind_Resume(a1);
}

void sub_20EE53A98(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86872C(v1 - 168, *(_QWORD **)(v1 - 160));
  _Unwind_Resume(a1);
}

void sub_20EE53AB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86872C(v1 - 168, *(_QWORD **)(v1 - 160));
  _Unwind_Resume(a1);
}

void sub_20EE53AC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8E69C4(v1 - 208);
  sub_20E86872C(v1 - 168, *(_QWORD **)(v1 - 160));
  _Unwind_Resume(a1);
}

void sub_20EE53AE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86872C(v1 - 168, *(_QWORD **)(v1 - 160));
  _Unwind_Resume(a1);
}

BOOL sub_20EE53B00(_BOOL8 result, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *i;
  _QWORD *v7;
  uint64_t v8;

  v2 = result;
  v3 = (_QWORD *)*a2;
  v4 = (_QWORD *)a2[1];
  if ((_QWORD *)*a2 != v4)
    goto LABEL_4;
  result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/SlamEngine/src/LocalSlamEngine.cpp", 546, (uint64_t)"!sem_frames.empty()", 19, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
  if (result)
    goto LABEL_11;
  v3 = (_QWORD *)*a2;
  v4 = (_QWORD *)a2[1];
  if ((_QWORD *)*a2 != v4)
  {
LABEL_4:
    for (i = v3 + 4; ; i += 7)
    {
      if (*i == i[1])
      {
        result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/SlamEngine/src/LocalSlamEngine.cpp", 549, (uint64_t)"!frame.semantics.empty()", 24, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
        if (result)
          break;
      }
      v8 = *(_QWORD *)(v2 + 11472);
      if (!*(_BYTE *)(v8 + 2321))
        result = sub_20F25A864(*(_QWORD *)(*(_QWORD *)(v8 + 80) + 2816), i - 3, i);
      v7 = i + 3;
      if (v7 == v4)
        return result;
    }
LABEL_11:
    abort();
  }
  return result;
}

_QWORD *sub_20EE53C20(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  __int128 *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    while (1)
    {
LABEL_8:
      if (*(_QWORD *)(v3 + 32) == *(_QWORD *)(v3 + 40)
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/SlamEngine/src/LocalSlamEngine.cpp", 558, (uint64_t)"!frame.densedepth.empty()", 25, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_20;
      }
      v7 = (__int128 *)(v3 + 8);
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 11472) + 80);
      if (*(_BYTE *)(v8 + 2499))
      {
        result = *(_QWORD **)(v8 + 2824);
        v9 = *(_QWORD **)(v8 + 2832);
        if (result != v9)
        {
          while (1)
          {
            v10 = result[2];
            if (v10)
            {
              if (*(_QWORD *)(v10 + 160) == *(_QWORD *)v7)
                break;
            }
            result += 559;
            if (result == v9)
              goto LABEL_7;
          }
        }
        if (result == v9 || !result)
          goto LABEL_7;
      }
      else
      {
        result = *(_QWORD **)(v8 + 2816);
      }
      result = (_QWORD *)sub_20F25A934(result, v7, (uint64_t *)(v3 + 32));
LABEL_7:
      v3 += 56;
      if (v3 == v4)
        return result;
    }
  }
  result = (_QWORD *)sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/SlamEngine/src/LocalSlamEngine.cpp", 556, (uint64_t)"!depth_frames.empty()", 21, (uint64_t)"Empty depth measurement frames", 30, (void (*)(void **))sub_21023DDB0);
  if ((result & 1) != 0)
LABEL_20:
    abort();
  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
    goto LABEL_8;
  return result;
}

void sub_20EE53D90(uint64_t a1, double ***a2)
{
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  char *v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  uint64_t **v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t **v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  double *v34;
  double *v35;
  double *v36;
  double v37;
  double *v38;
  double v39;
  double v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  double **v49;
  double **v50;
  uint64_t v51;
  double v52;
  double **v54;
  double **v55;
  double *v56;
  double v57;
  BOOL v58;
  BOOL v59;
  int v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  double *v64;
  double *v65;
  double *v66;
  uint64_t *v67;
  double v68;
  double v69;
  double **v70;
  double *v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  char v76;
  void *v77;
  unint64_t *v78;
  unint64_t v79;
  char *v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  uint64_t **v84;
  uint64_t **v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  std::__shared_weak_count *v98;
  void *v99;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  char *v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  void *v115;
  unint64_t *v116;
  unint64_t v117;
  char *v118;
  char *v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  char *v125;
  char *v126;
  void *v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  uint64_t *v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  uint64_t v135;
  void *__p;
  std::__shared_weak_count *v137;
  char v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  _BYTE v145[31];
  uint64_t *v146;
  std::__shared_weak_count *v147;
  void *v148;
  char *v149;
  unint64_t v150;
  uint64_t *v151;
  uint64_t *v152;
  _BYTE v153[33];
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  _BYTE v158[31];
  char v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  _OWORD v166[2];
  uint64_t v167;

  v167 = *MEMORY[0x24BDAC8D0];
  v3 = *(_BYTE **)(a1 + 11456);
  if (*v3)
  {
    v4 = *(_QWORD *)(a1 + 11744);
    v5 = *(_QWORD *)(a1 + 11712);
    sub_20ECCC2F0(v153, (uint64_t)a2);
    v6 = (void **)(v5 + 24 * v4);
    v7 = (char *)*v6;
    if (*v6)
    {
      v8 = v5 + 24 * v4;
      v11 = *(char **)(v8 + 8);
      v9 = (_QWORD *)(v8 + 8);
      v10 = v11;
      v12 = *v6;
      if (v11 != v7)
      {
        do
        {
          v13 = (std::__shared_weak_count *)*((_QWORD *)v10 - 1);
          if (v13)
          {
            p_shared_owners = (unint64_t *)&v13->__shared_owners_;
            do
              v15 = __ldaxr(p_shared_owners);
            while (__stlxr(v15 - 1, p_shared_owners));
            if (!v15)
            {
              ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
              std::__shared_weak_count::__release_weak(v13);
            }
          }
          v10 -= 16;
        }
        while (v10 != v7);
        v12 = *v6;
      }
      *v9 = v7;
      operator delete(v12);
      v6[1] = 0;
      v6[2] = 0;
    }
    *(_OWORD *)v6 = *(_OWORD *)v153;
    *(_QWORD *)(v5 + 24 * v4 + 16) = *(_QWORD *)&v153[16];
    v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 11720) - *(_QWORD *)(a1 + 11712)) >> 3);
    v28 = *(_QWORD *)(a1 + 11744) + 1;
    if (v28 >= v27)
      v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 11720) - *(_QWORD *)(a1 + 11712)) >> 3);
    else
      v29 = 0;
    *(_QWORD *)(a1 + 11744) = v28 - v29;
    v30 = *(_QWORD *)(a1 + 11752);
    if (v30 == v27)
    {
      v31 = *(_QWORD *)(a1 + 11736) + 1;
      if (v31 >= v27)
        v32 = v27;
      else
        v32 = 0;
      *(_QWORD *)(a1 + 11736) = v31 - v32;
      if (!v27)
        return;
    }
    else
    {
      *(_QWORD *)(a1 + 11752) = v30 + 1;
      if (v30 == -1)
        return;
    }
    v33 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 432))(*(_QWORD *)(a1 + 8)) + 4864);
    v34 = *(double **)(v33 + 2504);
    v135 = v33;
    v35 = *(double **)(v33 + 2512);
    if (v34 != v35)
    {
      v36 = v34 + 1;
      if (v34 + 1 != v35)
      {
        v37 = *v34;
        v38 = v34 + 1;
        do
        {
          v39 = *v38++;
          v40 = v39;
          if (v39 < v37)
          {
            v37 = v40;
            v34 = v36;
          }
          v36 = v38;
        }
        while (v38 != v35);
      }
      if (v34 == v35
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/SlamEngine/src/LocalSlamEngine.cpp", 600, (uint64_t)"min_timestamp != state_timestamps.end()", 39, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v41 = *(_QWORD *)(a1 + 11752);
      if (v41)
      {
        v42 = *(_QWORD *)(a1 + 11736);
        v43 = *(_QWORD *)(a1 + 11712);
        while (1)
        {
          v48 = v43 + 24 * v42;
          v50 = *(double ***)v48;
          v49 = *(double ***)(v48 + 8);
          v51 = *(_QWORD *)v48 + 16;
          v52 = ***(double ***)v48;
          if (*(double ***)v48 != v49 && v51 != (_QWORD)v49)
          {
            v54 = *(double ***)v48;
            v55 = (double **)(*(_QWORD *)v48 + 16);
            do
            {
              v56 = *v55;
              v55 += 2;
              v57 = *v56;
              v58 = *v56 < v52;
              v59 = *v56 <= v52;
              if (*v56 == v52)
                v60 = 0;
              else
                v60 = -127;
              if (!v59)
                v60 = 1;
              if (v58)
                v60 = -1;
              if (v60 != -127 && v60 < 0)
              {
                v52 = v57;
                v54 = (double **)v51;
              }
              v51 = (uint64_t)v55;
            }
            while (v55 != v49);
            v52 = **v54;
          }
          if (v52 >= *v34)
            break;
          v45 = v42;
          v44 = v43;
          if (v50 != v49)
          {
            do
            {
              v61 = (std::__shared_weak_count *)*(v49 - 1);
              if (v61)
              {
                v62 = (unint64_t *)&v61->__shared_owners_;
                do
                  v63 = __ldaxr(v62);
                while (__stlxr(v63 - 1, v62));
                if (!v63)
                {
                  ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                  std::__shared_weak_count::__release_weak(v61);
                }
              }
              v49 -= 2;
            }
            while (v49 != v50);
            v44 = *(_QWORD *)(a1 + 11712);
            v45 = *(_QWORD *)(a1 + 11736);
            v41 = *(_QWORD *)(a1 + 11752);
          }
          *(_QWORD *)(v43 + 24 * v42 + 8) = v50;
          v46 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 11720) - v44) >> 3);
          v47 = v45 + 1;
          if (v47 < v46)
            v46 = 0;
          v42 = v47 - v46;
          *(_QWORD *)(a1 + 11736) = v47 - v46;
          v43 = v44;
          *(_QWORD *)(a1 + 11752) = --v41;
          if (!v41)
            return;
        }
        sub_20ECCC2F0(&v151, v48);
        v64 = *(double **)(v135 + 2504);
        v65 = *(double **)(v135 + 2512);
        if (v64 == v65)
        {
          v67 = v151;
        }
        else
        {
          v66 = v64 + 1;
          v67 = v151;
          if (v64 + 1 != v65 && v151 != v152)
          {
            do
            {
              v68 = 0.0;
              v69 = 0.0;
              v70 = (double **)v151;
              do
              {
                v71 = *v70;
                v70 += 2;
                v68 = v68 + vabdd_f64(*v71, *v66);
                v69 = v69 + vabdd_f64(*v71, *v64);
              }
              while (v70 != (double **)v152);
              if (v68 < v69)
                v64 = v66;
              ++v66;
            }
            while (v66 != v65);
          }
        }
        if (v64 == v65)
          goto LABEL_177;
        v72 = *(_QWORD *)v64;
        v148 = 0;
        v149 = 0;
        v150 = 0;
        v73 = v152;
        if (v67 == v152)
        {
          v76 = 0;
        }
        else
        {
          v74 = *v67;
          v75 = (std::__shared_weak_count *)operator new(0x208uLL);
          v75->__shared_owners_ = 0;
          v75->__shared_weak_owners_ = 0;
          v75->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B3878;
          __p = (void *)sub_20E996340((uint64_t)&v75[1], v74);
          v137 = v75;
          (*(void (**)(_BYTE *__return_ptr, uint64_t, void **, double))(*(_QWORD *)a1 + 80))(v153, a1, &__p, *(double *)&v72);
          if (!v159)
          {
LABEL_164:
            sub_20E86665C((uint64_t)&__p);
LABEL_165:
            v125 = (char *)v148;
            if (v148)
            {
              v126 = v149;
              v127 = v148;
              if (v149 != v148)
              {
                do
                {
                  v128 = (std::__shared_weak_count *)*((_QWORD *)v126 - 1);
                  if (v128)
                  {
                    v129 = (unint64_t *)&v128->__shared_owners_;
                    do
                      v130 = __ldaxr(v129);
                    while (__stlxr(v130 - 1, v129));
                    if (!v130)
                    {
                      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
                      std::__shared_weak_count::__release_weak(v128);
                    }
                  }
                  v126 -= 16;
                }
                while (v126 != v125);
                v127 = v148;
              }
              v149 = v125;
              operator delete(v127);
            }
            v67 = v151;
LABEL_177:
            if (!v67)
              return;
            v131 = v152;
            v23 = v67;
            if (v152 != v67)
            {
              do
              {
                v132 = (std::__shared_weak_count *)*(v131 - 1);
                if (v132)
                {
                  v133 = (unint64_t *)&v132->__shared_owners_;
                  do
                    v134 = __ldaxr(v133);
                  while (__stlxr(v134 - 1, v133));
                  if (!v134)
                  {
                    ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
                    std::__shared_weak_count::__release_weak(v132);
                  }
                }
                v131 -= 2;
              }
              while (v131 != v67);
              v23 = v151;
            }
            v152 = v67;
LABEL_80:
            operator delete(v23);
            return;
          }
          v76 = v153[0];
          v164 = v156;
          v165 = v157;
          v166[0] = *(_OWORD *)v158;
          *(_OWORD *)((char *)v166 + 15) = *(_OWORD *)&v158[15];
          v160 = *(_OWORD *)&v153[1];
          v161 = *(_OWORD *)&v153[17];
          v162 = v154;
          v163 = v155;
          v77 = __p;
          *(_QWORD *)v153 = __p;
          *(_QWORD *)&v153[8] = v137;
          if (v137)
          {
            v78 = (unint64_t *)&v137->__shared_owners_;
            do
              v79 = __ldxr(v78);
            while (__stxr(v79 + 1, v78));
          }
          v80 = v149;
          if ((unint64_t)v149 >= v150)
          {
            v106 = sub_20EAFDCA4((char **)&v148, (uint64_t)v153);
            v107 = *(std::__shared_weak_count **)&v153[8];
            v149 = v106;
            if (*(_QWORD *)&v153[8])
            {
              v108 = (unint64_t *)(*(_QWORD *)&v153[8] + 8);
              do
                v109 = __ldaxr(v108);
              while (__stlxr(v109 - 1, v108));
              if (!v109)
              {
                ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
                std::__shared_weak_count::__release_weak(v107);
              }
            }
          }
          else
          {
            *(_QWORD *)v149 = v77;
            *((_QWORD *)v80 + 1) = *(_QWORD *)&v153[8];
            v149 = v80 + 16;
          }
          v110 = v137;
          if (v137)
          {
            v111 = (unint64_t *)&v137->__shared_owners_;
            do
              v112 = __ldaxr(v111);
            while (__stlxr(v112 - 1, v111));
            if (!v112)
            {
LABEL_146:
              ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
              std::__shared_weak_count::__release_weak(v110);
            }
          }
          while (1)
          {
            v67 += 2;
            if (v67 == v73)
              break;
            v113 = *v67;
            v114 = (std::__shared_weak_count *)operator new(0x208uLL);
            v114->__shared_weak_owners_ = 0;
            v114->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B3878;
            v114->__shared_owners_ = 0;
            __p = (void *)sub_20E996340((uint64_t)&v114[1], v113);
            v137 = v114;
            (*(void (**)(_BYTE *__return_ptr, uint64_t, void **, double))(*(_QWORD *)a1 + 80))(v153, a1, &__p, *(double *)&v72);
            if (!v159)
              goto LABEL_164;
            v76 = v153[0];
            v164 = v156;
            v165 = v157;
            v166[0] = *(_OWORD *)v158;
            *(_OWORD *)((char *)v166 + 15) = *(_OWORD *)&v158[15];
            v160 = *(_OWORD *)&v153[1];
            v161 = *(_OWORD *)&v153[17];
            v162 = v154;
            v163 = v155;
            v115 = __p;
            *(_QWORD *)v153 = __p;
            *(_QWORD *)&v153[8] = v137;
            if (v137)
            {
              v116 = (unint64_t *)&v137->__shared_owners_;
              do
                v117 = __ldxr(v116);
              while (__stxr(v117 + 1, v116));
            }
            v118 = v149;
            if ((unint64_t)v149 >= v150)
            {
              v119 = sub_20EAFDCA4((char **)&v148, (uint64_t)v153);
              v120 = *(std::__shared_weak_count **)&v153[8];
              v149 = v119;
              if (*(_QWORD *)&v153[8])
              {
                v121 = (unint64_t *)(*(_QWORD *)&v153[8] + 8);
                do
                  v122 = __ldaxr(v121);
                while (__stlxr(v122 - 1, v121));
                if (!v122)
                {
                  ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
                  std::__shared_weak_count::__release_weak(v120);
                }
              }
            }
            else
            {
              *(_QWORD *)v149 = v115;
              *((_QWORD *)v118 + 1) = *(_QWORD *)&v153[8];
              v149 = v118 + 16;
            }
            v110 = v137;
            if (v137)
            {
              v123 = (unint64_t *)&v137->__shared_owners_;
              do
                v124 = __ldaxr(v123);
              while (__stlxr(v124 - 1, v123));
              if (!v124)
                goto LABEL_146;
            }
          }
        }
        v143 = v164;
        v144 = v165;
        *(_OWORD *)v145 = v166[0];
        *(_OWORD *)&v145[15] = *(_OWORD *)((char *)v166 + 15);
        v139 = v160;
        v140 = v161;
        v141 = v162;
        v138 = v76;
        v142 = v163;
        sub_20EE455F4((uint64_t **)&v148, (float64x2_t *)&v138, &v146, v72);
        sub_20EE47358(*(_QWORD *)(a1 + 11456), &v146, &v151, &__p);
        v84 = (uint64_t **)__p;
        v85 = (uint64_t **)v137;
        if (__p != v137)
        {
          do
          {
            v86 = *v84;
            if (!*v84)
            {
              if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/SlamEngine/src/LocalSlamEngine.cpp", 569, (uint64_t)"models", 6, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
              {
                abort();
              }
              v86 = *v84;
            }
            sub_20F0EC380(v86, (uint64_t *)v153, v81, v82, v83);
            (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(a1 + 11464) + 40))(*(_QWORD *)(a1 + 11464), v153);
            sub_20E991850((uint64_t)v153);
            v84 += 2;
          }
          while (v84 != v85);
        }
        v87 = *(_QWORD *)(a1 + 11736);
        v88 = *(_QWORD *)(a1 + 11712);
        v89 = *(_QWORD *)(v88 + 24 * v87);
        v90 = (uint64_t *)(v88 + 24 * v87 + 8);
        v91 = *v90;
        if (*v90 != v89)
        {
          do
          {
            v92 = *(std::__shared_weak_count **)(v91 - 8);
            if (v92)
            {
              v93 = (unint64_t *)&v92->__shared_owners_;
              do
                v94 = __ldaxr(v93);
              while (__stlxr(v94 - 1, v93));
              if (!v94)
              {
                ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                std::__shared_weak_count::__release_weak(v92);
              }
            }
            v91 -= 16;
          }
          while (v91 != v89);
          v88 = *(_QWORD *)(a1 + 11712);
          v87 = *(_QWORD *)(a1 + 11736);
        }
        *v90 = v89;
        v95 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 11720) - v88) >> 3);
        v96 = v87 + 1;
        if (v96 < v95)
          v95 = 0;
        *(_QWORD *)(a1 + 11736) = v96 - v95;
        --*(_QWORD *)(a1 + 11752);
        v97 = (std::__shared_weak_count *)__p;
        if (__p)
        {
          v98 = v137;
          v99 = __p;
          if (v137 != __p)
          {
            do
            {
              shared_weak_owners = (std::__shared_weak_count *)v98[-1].__shared_weak_owners_;
              if (shared_weak_owners)
              {
                v101 = (unint64_t *)&shared_weak_owners->__shared_owners_;
                do
                  v102 = __ldaxr(v101);
                while (__stlxr(v102 - 1, v101));
                if (!v102)
                {
                  ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
                  std::__shared_weak_count::__release_weak(shared_weak_owners);
                }
              }
              v98 = (std::__shared_weak_count *)((char *)v98 - 16);
            }
            while (v98 != v97);
            v99 = __p;
          }
          v137 = v97;
          operator delete(v99);
        }
        v103 = v147;
        if (v147)
        {
          v104 = (unint64_t *)&v147->__shared_owners_;
          do
            v105 = __ldaxr(v104);
          while (__stlxr(v105 - 1, v104));
          if (!v105)
          {
            ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
            std::__shared_weak_count::__release_weak(v103);
          }
        }
        goto LABEL_165;
      }
    }
  }
  else
  {
    sub_20EE45BAC((uint64_t)v3, a2, (char **)&v160);
    v20 = (uint64_t **)*((_QWORD *)&v160 + 1);
    v19 = (uint64_t **)v160;
    if ((_QWORD)v160 != *((_QWORD *)&v160 + 1))
    {
      do
      {
        v21 = *v19;
        if (!*v19)
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/SlamEngine/src/LocalSlamEngine.cpp", 569, (uint64_t)"models", 6, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v21 = *v19;
        }
        sub_20F0EC380(v21, (uint64_t *)v153, v16, v17, v18);
        (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(a1 + 11464) + 40))(*(_QWORD *)(a1 + 11464), v153);
        sub_20E991850((uint64_t)v153);
        v19 += 2;
      }
      while (v19 != v20);
      v19 = (uint64_t **)v160;
    }
    if (v19)
    {
      v22 = (uint64_t **)*((_QWORD *)&v160 + 1);
      v23 = v19;
      if (*((uint64_t ***)&v160 + 1) != v19)
      {
        do
        {
          v24 = (std::__shared_weak_count *)*(v22 - 1);
          if (v24)
          {
            v25 = (unint64_t *)&v24->__shared_owners_;
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
            }
          }
          v22 -= 2;
        }
        while (v22 != v19);
        v23 = (void *)v160;
      }
      *((_QWORD *)&v160 + 1) = v19;
      goto LABEL_80;
    }
  }
}

void sub_20EE549A8(uint64_t a1@<X0>, double **a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  float64x2_t v6;
  unint64_t v7;
  double *v8;
  uint64_t *v9;
  uint64_t *v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  float64x2_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  float64x2_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  char *v25;
  uint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t **v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t *v43;
  BOOL v44;
  void **v45;
  uint64_t **v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t **v50;
  uint64_t **v51;
  void *v52;
  uint64_t **v53;
  _QWORD *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t **v58;
  _QWORD *v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  _QWORD *v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  char *v69;
  char *v70;
  void *v71;
  char *v72;
  double **v73;
  float64x2_t v74;
  double v75;
  double v76;
  double v77;
  int8x16_t v78;
  float64x2_t v79;
  int8x16_t v80;
  float64x2_t v81;
  int8x16_t v82;
  float64x2_t v83;
  int8x16_t v84;
  float64x2_t v85;
  void *v86;
  char *v87;
  unint64_t v88;
  int8x16_t v89;
  double v90;
  int8x16_t v91;
  double v92;
  int8x16_t v93;
  double v94;
  int8x16_t v95;
  float64_t v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  char v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t *v109;
  unint64_t *v110;
  uint64_t *v111;
  uint64_t *v112;
  void *__p;
  __int128 v114;
  _BYTE v115[96];
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;

  v124 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(int8x16_t *__return_ptr, double, double))(**(_QWORD **)(a1 + 11464) + 48))(&v89, **a2, a4);
  if (!v105)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 128) = 0;
    return;
  }
  v77 = v90;
  v76 = v92;
  *(_QWORD *)&v6.f64[1] = v91.i64[1];
  v82 = v91;
  v84 = v89;
  v75 = v94;
  v6.f64[0] = v96;
  v74 = v6;
  v78 = v95;
  v80 = v93;
  v120 = v101;
  v121 = v102;
  v122 = v103;
  v123 = v104;
  v116 = v97;
  v117 = v98;
  v118 = v99;
  v119 = v100;
  v7 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*((_QWORD *)*a2 + 2) - *((_QWORD *)*a2 + 1)) >> 3);
  v86 = 0;
  v87 = 0;
  v88 = 0;
  sub_20EA74E34((uint64_t)&v86, v7);
  v8 = *a2;
  v9 = (uint64_t *)*((_QWORD *)*a2 + 1);
  v10 = (uint64_t *)*((_QWORD *)*a2 + 2);
  if (v9 != v10)
  {
    v73 = a2;
    v12 = v82;
    v11 = v84;
    v14 = v78;
    v13 = v80;
    v11.i64[1] = vextq_s8(v11, v11, 8uLL).u64[0];
    v12.i64[1] = vextq_s8(v12, v12, 8uLL).u64[0];
    v83 = (float64x2_t)v12;
    v85 = (float64x2_t)v11;
    v13.i64[1] = vextq_s8(v13, v13, 8uLL).u64[0];
    v81 = (float64x2_t)v13;
    v14.i64[1] = vextq_s8(v14, v14, 8uLL).u64[0];
    v79 = (float64x2_t)v14;
    do
    {
      __p = v115;
      *(_QWORD *)&v15.f64[1] = 3;
      v114 = xmmword_2102E0CB0;
      v16 = v9[1];
      if (v16)
      {
        v17 = *v9;
        v18 = *v9 + 32 * v16;
        do
        {
          v106 = 0;
          LODWORD(v107) = 0;
          v108 = 0;
          LODWORD(v109) = 0;
          v15.f64[0] = *(float *)v17;
          v19 = *(float *)(v17 + 4);
          v20 = *(float *)(v17 + 8);
          v21 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v85, v15.f64[0]), v83, v19), v81, v20);
          v15.f64[0] = v77 * v15.f64[0] + v76 * v19 + v75 * v20;
          v15 = vaddq_f64(v74, v15);
          v106 = (uint64_t *)vcvt_f32_f64(vaddq_f64(v79, v21));
          *(float *)v15.f64 = v15.f64[0];
          LODWORD(v107) = LODWORD(v15.f64[0]);
          LODWORD(v109) = *(_DWORD *)(v17 + 24);
          v108 = *(uint64_t **)(v17 + 16);
          v22 = (uint64_t *)((char *)__p + 32 * v114);
          if ((_QWORD)v114 == *((_QWORD *)&v114 + 1))
          {
            sub_20EE69334(&v112, (uint64_t)&__p, v22, (uint64_t *)&v106);
          }
          else
          {
            v23 = v106;
            *((_DWORD *)v22 + 2) = (_DWORD)v107;
            *v22 = (uint64_t)v23;
            v24 = v108;
            *((_DWORD *)v22 + 6) = (_DWORD)v109;
            v22[2] = (uint64_t)v24;
            *(_QWORD *)&v114 = v114 + 1;
          }
          v17 += 32;
        }
        while (v17 != v18);
      }
      v25 = v87;
      if ((unint64_t)v87 >= v88)
      {
        v27 = 0xEEEEEEEEEEEEEEEFLL * ((v87 - (_BYTE *)v86) >> 3);
        v28 = v27 + 1;
        if (v27 + 1 > 0x222222222222222)
          sub_20E969238();
        v29 = (uint64_t *)__p;
        v30 = v114;
        if (0xDDDDDDDDDDDDDDDELL * ((uint64_t)(v88 - (_QWORD)v86) >> 3) > v28)
          v28 = 0xDDDDDDDDDDDDDDDELL * ((uint64_t)(v88 - (_QWORD)v86) >> 3);
        if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v88 - (_QWORD)v86) >> 3) >= 0x111111111111111)
          v31 = 0x222222222222222;
        else
          v31 = v28;
        v110 = &v88;
        if (v31)
        {
          if (v31 > 0x222222222222222)
            sub_20E877A38();
          v32 = (uint64_t *)operator new(120 * v31);
        }
        else
        {
          v32 = 0;
        }
        v33 = &v32[15 * v27];
        v106 = v32;
        v107 = v33;
        v108 = v33;
        v109 = &v32[15 * v31];
        *v33 = (uint64_t)(v33 + 3);
        *(_OWORD *)(v33 + 1) = xmmword_2102E0CB0;
        v111 = &v29[4 * v30];
        v112 = v29;
        sub_20E96924C(v33, &v112, &v111);
        v34 = v107;
        v26 = v108 + 15;
        v108 += 15;
        v35 = (uint64_t *)v86;
        v36 = (uint64_t *)v87;
        if (v87 == v86)
        {
          v41 = (uint64_t *)v87;
        }
        else
        {
          v37 = 0;
          do
          {
            while (1)
            {
              v34[v37 - 15] = (uint64_t)&v34[v37 - 12];
              v38 = (uint64_t **)&v34[v37 - 15];
              v39 = &v36[v37];
              v40 = (uint64_t *)v36[v37 - 15];
              *(_OWORD *)&v34[v37 - 14] = xmmword_2102E0CB0;
              if (&v36[v37 - 12] == v40)
                break;
              *v38 = v40;
              *(_OWORD *)&v34[v37 - 14] = *((_OWORD *)v39 - 7);
              v36[v37 - 15] = 0;
              v36[v37 - 14] = 0;
              v36[v37 - 13] = 0;
              v37 -= 15;
              if (&v36[v37] == v35)
                goto LABEL_29;
            }
            sub_20EA74FD0(v38, v40, &v40[4 * *(v39 - 14)]);
            *(v39 - 14) = 0;
            v37 -= 15;
          }
          while (&v36[v37] != v35);
LABEL_29:
          v41 = (uint64_t *)v86;
          v36 = (uint64_t *)v87;
          v34 = (uint64_t *)((char *)v34 + v37 * 8);
          v26 = v108;
        }
        v86 = v34;
        v87 = (char *)v26;
        v42 = (uint64_t *)v88;
        v88 = (unint64_t)v109;
        v108 = v36;
        v109 = v42;
        v106 = v41;
        v107 = v41;
        if (v36 != v41)
        {
          v43 = v36 - 15;
          do
          {
            v108 = v43;
            if (v43[2] && v43 + 3 != (uint64_t *)*v43)
              operator delete((void *)*v43);
            v44 = v43 == v41;
            v43 -= 15;
          }
          while (!v44);
          v36 = v41;
        }
        if (v36)
          operator delete(v36);
      }
      else
      {
        *(_QWORD *)v87 = v87 + 24;
        *(_OWORD *)(v25 + 8) = xmmword_2102E0CB0;
        v106 = (uint64_t *)__p;
        v112 = (uint64_t *)((char *)__p + 32 * v114);
        sub_20E96924C(v25, &v106, &v112);
        v26 = (uint64_t *)(v25 + 120);
      }
      v87 = (char *)v26;
      if (*((_QWORD *)&v114 + 1) && v115 != __p)
        operator delete(__p);
      v9 += 15;
    }
    while (v9 != v10);
    v8 = *v73;
  }
  v45 = (void **)(v8 + 1);
  if (v8 + 1 != (double *)&v86)
  {
    v46 = (uint64_t **)v86;
    v47 = (uint64_t)v87;
    v48 = 0xEEEEEEEEEEEEEEEFLL * ((v87 - (_BYTE *)v86) >> 3);
    v49 = *((_QWORD *)v8 + 3);
    v50 = (uint64_t **)*((_QWORD *)v8 + 1);
    if (0xEEEEEEEEEEEEEEEFLL * ((v49 - (uint64_t)v50) >> 3) >= v48)
    {
      v54 = (_QWORD *)*((_QWORD *)v8 + 2);
      v55 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t **)v54 - v50);
      if (v55 >= v48)
      {
        if (v86 == v87)
        {
          v59 = (_QWORD *)*((_QWORD *)v8 + 1);
        }
        else
        {
          v59 = (_QWORD *)*((_QWORD *)v8 + 1);
          do
          {
            if (v46 != v50)
              sub_20EE60F1C(v50, *v46, &(*v46)[4 * (_QWORD)v46[1]]);
            v46 += 15;
            v50 += 15;
            v59 += 15;
          }
          while (v46 != (uint64_t **)v47);
          v54 = (_QWORD *)*((_QWORD *)v8 + 2);
        }
        while (v54 != v59)
        {
          if (*(v54 - 13))
          {
            v64 = (_QWORD *)*(v54 - 15);
            if (v54 - 12 != v64)
              operator delete(v64);
          }
          v54 -= 15;
        }
        *((_QWORD *)v8 + 2) = v59;
        goto LABEL_86;
      }
      if (v54 != v50)
      {
        v56 = a3;
        v57 = 8 * ((uint64_t **)v54 - v50);
        v58 = (uint64_t **)v86;
        do
        {
          if (v58 != v50)
            sub_20EE60F1C(v50, *v58, &(*v58)[4 * (_QWORD)v58[1]]);
          v58 += 15;
          v50 += 15;
          v57 -= 120;
        }
        while (v57);
        a3 = v56;
      }
      v46 += 15 * v55;
    }
    else
    {
      if (v50)
      {
        v51 = (uint64_t **)*((_QWORD *)v8 + 2);
        v52 = (void *)*((_QWORD *)v8 + 1);
        if (v51 != v50)
        {
          do
          {
            if (*(v51 - 13))
            {
              v53 = (uint64_t **)*(v51 - 15);
              if (v51 - 12 != v53)
                operator delete(v53);
            }
            v51 -= 15;
          }
          while (v51 != v50);
          v52 = *v45;
        }
        *((_QWORD *)v8 + 2) = v50;
        operator delete(v52);
        v49 = 0;
        *v45 = 0;
        v8[2] = 0.0;
        v8[3] = 0.0;
      }
      if (v48 > 0x222222222222222)
        goto LABEL_98;
      v60 = 0xEEEEEEEEEEEEEEEFLL * (v49 >> 3);
      v61 = 2 * v60;
      if (2 * v60 <= v48)
        v61 = v48;
      v62 = v60 >= 0x111111111111111 ? 0x222222222222222 : v61;
      if (v62 > 0x222222222222222)
LABEL_98:
        sub_20E969238();
      v63 = (char *)operator new(120 * v62);
      *((_QWORD *)v8 + 1) = v63;
      *((_QWORD *)v8 + 2) = v63;
      *((_QWORD *)v8 + 3) = &v63[120 * v62];
    }
    sub_20E96912C((uint64_t)(v8 + 1), (uint64_t)v46, v47);
  }
LABEL_86:
  v65 = v121;
  *(_OWORD *)(a3 + 64) = v120;
  *(_OWORD *)(a3 + 80) = v65;
  v66 = v123;
  *(_OWORD *)(a3 + 96) = v122;
  *(_OWORD *)(a3 + 112) = v66;
  v67 = v117;
  *(_OWORD *)a3 = v116;
  *(_OWORD *)(a3 + 16) = v67;
  v68 = v119;
  *(_OWORD *)(a3 + 32) = v118;
  *(_OWORD *)(a3 + 48) = v68;
  *(_BYTE *)(a3 + 128) = 1;
  v69 = (char *)v86;
  if (v86)
  {
    v70 = v87;
    v71 = v86;
    if (v87 != v86)
    {
      do
      {
        if (*((_QWORD *)v70 - 13))
        {
          v72 = (char *)*((_QWORD *)v70 - 15);
          if (v70 - 96 != v72)
            operator delete(v72);
        }
        v70 -= 120;
      }
      while (v70 != v69);
      v71 = v86;
    }
    v87 = v69;
    operator delete(v71);
  }
}

void sub_20EE55170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31)
{
  uint64_t v31;

  if (STACK[0x218])
  {
    if (v31 != STACK[0x208])
      operator delete((void *)STACK[0x208]);
  }
  sub_20EAAB76C(&a31);
  _Unwind_Resume(a1);
}

void sub_20EE55214(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_20E860DA4(exception_object);
}

_QWORD *sub_20EE55230(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)(a1 + 11536);
  v3 = (_QWORD *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      v7 = v6;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v6);
    }
    else
    {
      v7 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 16))(v3);
    }
  }
  else
  {
    v7 = 0;
  }
  sub_20EDB40D8(v6, v2);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

__n128 sub_20EE5530C(uint64_t a1, __n128 *a2)
{
  uint64_t v4;
  __n128 v5;
  __n128 result;
  unsigned __int8 v7;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8));
  v4 = *(_QWORD *)(a1 + 11472);
  v5 = *a2;
  *(_BYTE *)(v4 + 1288) = a2[1].n128_u8[0];
  *(__n128 *)(v4 + 1272) = v5;
  (*(void (**)(_QWORD, __n128 *))(**(_QWORD **)(a1 + 11464) + 56))(*(_QWORD *)(a1 + 11464), a2);
  if (a2[1].n128_u8[0])
  {
    if (a2->n128_u32[3] == 1)
    {
      v7 = a2[1].n128_u8[0];
      result = *a2;
      *(__n128 *)(a1 + 12112) = *a2;
      *(_BYTE *)(a1 + 12128) = v7;
    }
  }
  return result;
}

void sub_20EE55394(uint64_t a1@<X0>, uint64_t *a2@<X1>, char **a3@<X8>)
{
  uint64_t v6;
  double *v7;
  double *v8;
  double v9;
  double v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  _QWORD *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  __int128 v30;
  unint64_t *v31;
  unint64_t v32;
  double v33;
  int v34;
  std::__shared_weak_count *v35;
  _QWORD *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  unsigned __int8 v43;
  char *v45;
  size_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t i;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  float32x4_t *v57;
  float32x4_t *v58;
  char *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  int v63;
  float32x4_t *v64;
  float32x4_t *v65;
  float32x4_t v66;
  float32x4_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  __int128 v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  __uint64_t v89[2];
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  char v97;
  __int128 v98;
  _BYTE v99[22];
  char v100;
  void *v101;
  char v102;
  char v103;
  void *v104;
  char v105;
  char v106;
  void *v107;
  char v108;
  void *__p;
  char v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  char v113;
  char v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  unsigned __int8 v119;
  uint64_t v120;

  v120 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 432))(*(_QWORD *)(a1 + 8)) + 4864);
  v7 = *(double **)(v6 + 2504);
  v8 = *(double **)(v6 + 2512);
  if (v7 != v8)
  {
    v9 = *v7;
    v10 = *(v8 - 1);
    v11 = *a2;
    v12 = (std::__shared_weak_count *)a2[1];
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
      v15 = *(_QWORD *)(a1 + 11760);
      v16 = *(_QWORD *)(a1 + 11792);
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
      *(_QWORD *)(v15 + 16 * v16) = v11;
      v18 = v15 + 16 * v16;
      v19 = *(std::__shared_weak_count **)(v18 + 8);
      *(_QWORD *)(v18 + 8) = v12;
      if (!v19)
        goto LABEL_16;
    }
    else
    {
      v20 = (_QWORD *)(*(_QWORD *)(a1 + 11760) + 16 * *(_QWORD *)(a1 + 11792));
      *v20 = v11;
      v19 = (std::__shared_weak_count *)v20[1];
      v20[1] = 0;
      if (!v19)
        goto LABEL_16;
    }
    v21 = (unint64_t *)&v19->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
LABEL_16:
    v23 = (uint64_t)(*(_QWORD *)(a1 + 11768) - *(_QWORD *)(a1 + 11760)) >> 4;
    v24 = *(_QWORD *)(a1 + 11792) + 1;
    if (v24 >= v23)
      v25 = (uint64_t)(*(_QWORD *)(a1 + 11768) - *(_QWORD *)(a1 + 11760)) >> 4;
    else
      v25 = 0;
    *(_QWORD *)(a1 + 11792) = v24 - v25;
    v26 = *(_QWORD *)(a1 + 11800);
    if (v26 == v23)
    {
      v27 = *(_QWORD *)(a1 + 11784) + 1;
      if (v27 < v23)
        v23 = 0;
      *(_QWORD *)(a1 + 11784) = v27 - v23;
      if (!v12)
        goto LABEL_29;
    }
    else
    {
      *(_QWORD *)(a1 + 11800) = v26 + 1;
      if (!v12)
      {
LABEL_29:
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
        while (1)
        {
          if (!*(_QWORD *)(a1 + 11800))
            return;
          v30 = *(_OWORD *)(*(_QWORD *)(a1 + 11760) + 16 * *(_QWORD *)(a1 + 11784));
          v98 = v30;
          if (*((_QWORD *)&v30 + 1))
          {
            v31 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
            do
              v32 = __ldxr(v31);
            while (__stxr(v32 + 1, v31));
          }
          v33 = *(double *)v30;
          if (*(double *)v30 > v10)
          {
            v34 = 3;
            v35 = (std::__shared_weak_count *)*((_QWORD *)&v98 + 1);
            if (*((_QWORD *)&v98 + 1))
              goto LABEL_115;
            goto LABEL_30;
          }
          v36 = (_QWORD *)(*(_QWORD *)(a1 + 11760) + 16 * *(_QWORD *)(a1 + 11784));
          v37 = (std::__shared_weak_count *)v36[1];
          *v36 = 0;
          v36[1] = 0;
          if (v37)
          {
            v38 = (unint64_t *)&v37->__shared_owners_;
            do
              v39 = __ldaxr(v38);
            while (__stlxr(v39 - 1, v38));
            if (!v39)
            {
              ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          v40 = (uint64_t)(*(_QWORD *)(a1 + 11768) - *(_QWORD *)(a1 + 11760)) >> 4;
          v41 = *(_QWORD *)(a1 + 11784) + 1;
          if (v41 < v40)
            v40 = 0;
          *(_QWORD *)(a1 + 11784) = v41 - v40;
          --*(_QWORD *)(a1 + 11800);
          if (v33 >= v9)
          {
            v51 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 432))(*(_QWORD *)(a1 + 8));
            sub_20F135EB4(v51, (uint64_t)v89, v33);
            if (v97)
            {
              v52 = v98;
              *(_QWORD *)v99 = *(_QWORD *)v98;
              v99[8] = 0;
              v114 = 0;
              v53 = *(unsigned __int8 *)(v98 + 488);
              if (*(_BYTE *)(v98 + 488))
              {
                sub_20E8A049C(&v99[8], (uint64_t *)(v98 + 192));
                v54 = *(std::__shared_weak_count **)(v52 + 472);
                v111 = *(_QWORD *)(v52 + 464);
                v112 = v54;
                if (v54)
                {
                  v55 = (unint64_t *)&v54->__shared_owners_;
                  do
                    v56 = __ldxr(v55);
                  while (__stxr(v56 + 1, v55));
                }
                v113 = *(_BYTE *)(v52 + 480);
                v114 = 1;
              }
              v115 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)v89), v90);
              v116 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v91), v92);
              v117 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v93), v94);
              v118 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v95), v96);
              v119 = 1;
              v57 = (float32x4_t *)operator new(0x198uLL);
              v58 = v57;
              v57->i64[1] = 0;
              v57[1].i64[0] = 0;
              v57->i64[0] = (uint64_t)&off_24C9EE170;
              v57[1].i64[1] = *(_QWORD *)v99;
              v59 = &v57[1].i8[8];
              v57[2].i8[0] = 0;
              v57[20].i8[8] = 0;
              if (v53)
              {
                sub_20E8A049C((float32x4_t *)v57[2].i64, (uint64_t *)&v99[8]);
                v60 = v112;
                v58[19].i64[0] = v111;
                v58[19].i64[1] = (uint64_t)v60;
                if (v60)
                {
                  v61 = (unint64_t *)&v60->__shared_owners_;
                  do
                    v62 = __ldxr(v61);
                  while (__stxr(v62 + 1, v61));
                }
                v58[20].i8[0] = v113;
                v58[20].i8[8] = 1;
                v63 = v119;
                v58[21].i8[0] = 0;
                v58[25].i8[0] = 0;
                if (v63)
                {
                  v64 = v58 + 21;
                  v65 = v58 + 25;
                  goto LABEL_68;
                }
              }
              else
              {
                v64 = v57 + 21;
                v57[21].i8[0] = 0;
                v65 = v57 + 25;
                v57[25].i8[0] = 0;
LABEL_68:
                v66 = v116;
                *v64 = v115;
                v64[1] = v66;
                v67 = v118;
                v64[2] = v117;
                v64[3] = v67;
                v65->i8[0] = 1;
              }
              v69 = a3[1];
              v68 = (unint64_t)a3[2];
              if ((unint64_t)v69 < v68)
              {
                *(_QWORD *)v69 = v59;
                *((_QWORD *)v69 + 1) = v58;
                a3[1] = v69 + 16;
                goto LABEL_107;
              }
              v70 = *a3;
              v71 = (v69 - *a3) >> 4;
              v72 = v71 + 1;
              if ((unint64_t)(v71 + 1) >> 60)
                sub_20E867F44();
              v73 = v68 - (_QWORD)v70;
              if (v73 >> 3 > v72)
                v72 = v73 >> 3;
              if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF0)
                v74 = 0xFFFFFFFFFFFFFFFLL;
              else
                v74 = v72;
              if (v74 >> 60)
                sub_20E877A38();
              v75 = (char *)operator new(16 * v74);
              v76 = &v75[16 * v71];
              *(_QWORD *)v76 = v59;
              *((_QWORD *)v76 + 1) = v58;
              v77 = &v75[16 * v74];
              v78 = v76 + 16;
              if (v69 == v70)
              {
                *a3 = v76;
                a3[1] = v78;
                a3[2] = v77;
                if (v69)
                  goto LABEL_105;
              }
              else
              {
                v79 = v69;
                do
                {
                  v80 = *((_OWORD *)v79 - 1);
                  v79 -= 16;
                  *((_OWORD *)v76 - 1) = v80;
                  v76 -= 16;
                  *(_QWORD *)v79 = 0;
                  *((_QWORD *)v79 + 1) = 0;
                }
                while (v79 != v70);
                *a3 = v76;
                a3[1] = v78;
                a3[2] = v77;
                do
                {
                  v81 = (std::__shared_weak_count *)*((_QWORD *)v69 - 1);
                  if (v81)
                  {
                    v82 = (unint64_t *)&v81->__shared_owners_;
                    do
                      v83 = __ldaxr(v82);
                    while (__stlxr(v83 - 1, v82));
                    if (!v83)
                    {
                      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                      std::__shared_weak_count::__release_weak(v81);
                    }
                  }
                  v69 -= 16;
                }
                while (v69 != v70);
                v69 = v70;
                if (v70)
LABEL_105:
                  operator delete(v69);
              }
              a3[1] = v78;
LABEL_107:
              if (v114)
              {
                v84 = v112;
                if (v112)
                {
                  v85 = (unint64_t *)&v112->__shared_owners_;
                  do
                    v86 = __ldaxr(v85);
                  while (__stlxr(v86 - 1, v85));
                  if (!v86)
                  {
                    ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                    std::__shared_weak_count::__release_weak(v84);
                  }
                }
                sub_20E86177C(&v99[8]);
              }
              v34 = 0;
              v35 = (std::__shared_weak_count *)*((_QWORD *)&v98 + 1);
              if (!*((_QWORD *)&v98 + 1))
                goto LABEL_30;
LABEL_115:
              v87 = (unint64_t *)&v35->__shared_owners_;
              do
                v88 = __ldaxr(v87);
              while (__stlxr(v88 - 1, v87));
              if (!v88)
              {
                ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
                std::__shared_weak_count::__release_weak(v35);
              }
              goto LABEL_30;
            }
            goto LABEL_100;
          }
          v42 = sub_210219C18();
          v43 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
          if ((v43 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
          {
            __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DDD0);
          }
          if (!atomic_load(&qword_254A5A450))
            goto LABEL_98;
          *(_DWORD *)v99 = 134218240;
          *(double *)&v99[4] = v33;
          *(_WORD *)&v99[12] = 2048;
          *(double *)&v99[14] = v9;
          v45 = (char *)_os_log_send_and_compose_impl();
          v46 = strlen(v45);
          v89[0] = 0;
          pthread_threadid_np(0, v89);
          v47 = v89[0];
          timespec_get((timespec *)v89, 1);
          sub_210219E20(v99, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v42 + 1), (__int128 *)(v42 + 5), "LSE:GLP: Timestamp Out of Window ts:%f min_ts:%f", 0x30uLL, v45, v46, v47, v89);
          std::mutex::lock(&stru_254A5A410);
          v48 = qword_254A5A458;
          for (i = unk_254A5A460; v48 != i; v48 += 40)
          {
            v50 = *(_QWORD *)(v48 + 32);
            if (!v50)
              sub_20E86D37C();
            (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v50 + 48))(v50, v99);
          }
          std::mutex::unlock(&stru_254A5A410);
          if (v110 < 0)
          {
            operator delete(__p);
            if ((v108 & 0x80000000) == 0)
            {
LABEL_53:
              if (v106)
                goto LABEL_90;
              goto LABEL_92;
            }
          }
          else if ((v108 & 0x80000000) == 0)
          {
            goto LABEL_53;
          }
          operator delete(v107);
          if (v106)
          {
LABEL_90:
            if (v105 < 0)
              operator delete(v104);
          }
LABEL_92:
          if (v103 && v102 < 0)
            operator delete(v101);
          if ((v100 & 0x80000000) == 0)
          {
            if (!v45)
              goto LABEL_98;
LABEL_97:
            free(v45);
            goto LABEL_98;
          }
          operator delete(*(void **)&v99[8]);
          if (v45)
            goto LABEL_97;
LABEL_98:
          if (os_signpost_enabled((os_log_t)*v42))
          {
            *(_DWORD *)v99 = 134218240;
            *(double *)&v99[4] = v33;
            *(_WORD *)&v99[12] = 2048;
            *(double *)&v99[14] = v9;
            _os_signpost_emit_unreliably_with_name_impl();
          }
LABEL_100:
          v34 = 2;
          v35 = (std::__shared_weak_count *)*((_QWORD *)&v98 + 1);
          if (*((_QWORD *)&v98 + 1))
            goto LABEL_115;
LABEL_30:
          if (v34 == 3)
            return;
        }
      }
    }
    v28 = (unint64_t *)&v12->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    goto LABEL_29;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
}

void sub_20EE55C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,char a55)
{
  void **v55;

  sub_20E86665C((uint64_t)&a15);
  sub_20EE55DE0((uint64_t)&a55);
  sub_20E86665C((uint64_t)&a53);
  sub_20E8C3144(v55);
  _Unwind_Resume(a1);
}

void sub_20EE55D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  void **v53;

  sub_20E86665C((uint64_t)&a53);
  sub_20E8C3144(v53);
  _Unwind_Resume(a1);
}

void sub_20EE55DA0()
{
  std::mutex::unlock(&stru_254A5A410);
  JUMPOUT(0x20EE55DB4);
}

uint64_t sub_20EE55DE0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (*(_BYTE *)(a1 + 304))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 288);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    sub_20E86177C((_QWORD *)(a1 + 8));
  }
  return a1;
}

uint64_t sub_20EE55E54(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  uint64_t v3;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 11488);
  *(_QWORD *)(v3 + 720) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(v3 + 704) = v2;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 456))(*(_QWORD *)(a1 + 8));
}

double sub_20EE55E78(uint64_t a1, __int128 *a2)
{
  _OWORD *v2;
  _BYTE *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  double result;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v2 = (_OWORD *)(a1 + 11928);
  v3 = (_BYTE *)(a1 + 12104);
  if (*(unsigned __int8 *)(a1 + 12104) == *((unsigned __int8 *)a2 + 176))
  {
    if (*(_BYTE *)(a1 + 12104))
    {
      v4 = *a2;
      v5 = a2[2];
      *(_OWORD *)(a1 + 11944) = a2[1];
      *(_OWORD *)(a1 + 11960) = v5;
      *v2 = v4;
      v6 = a2[3];
      v7 = a2[4];
      v8 = a2[6];
      *(_OWORD *)(a1 + 12008) = a2[5];
      *(_OWORD *)(a1 + 12024) = v8;
      *(_OWORD *)(a1 + 11976) = v6;
      *(_OWORD *)(a1 + 11992) = v7;
      v9 = a2[7];
      v10 = a2[8];
      v11 = a2[9];
      *(_QWORD *)(a1 + 12088) = *((_QWORD *)a2 + 20);
      *(_OWORD *)(a1 + 12056) = v10;
      *(_OWORD *)(a1 + 12072) = v11;
      *(_OWORD *)(a1 + 12040) = v9;
      result = *((double *)a2 + 21);
      *(double *)(a1 + 12096) = result;
    }
  }
  else if (*(_BYTE *)(a1 + 12104))
  {
    *v3 = 0;
  }
  else
  {
    v13 = *a2;
    v14 = a2[2];
    *(_OWORD *)(a1 + 11944) = a2[1];
    *(_OWORD *)(a1 + 11960) = v14;
    *v2 = v13;
    v15 = a2[3];
    v16 = a2[4];
    v17 = a2[6];
    *(_OWORD *)(a1 + 12008) = a2[5];
    *(_OWORD *)(a1 + 12024) = v17;
    *(_OWORD *)(a1 + 11976) = v15;
    *(_OWORD *)(a1 + 11992) = v16;
    v18 = a2[7];
    v19 = a2[8];
    v20 = a2[9];
    *(_QWORD *)(a1 + 12088) = *((_QWORD *)a2 + 20);
    *(_OWORD *)(a1 + 12056) = v19;
    *(_OWORD *)(a1 + 12072) = v20;
    *(_OWORD *)(a1 + 12040) = v18;
    result = *((double *)a2 + 21);
    *(double *)(a1 + 12096) = result;
    *v3 = 1;
  }
  return result;
}

uint64_t *sub_20EE55F34(uint64_t a1, _DWORD *a2, char *a3)
{
  uint64_t *v5;

  v5 = (uint64_t *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 432))(*(_QWORD *)(a1 + 8));
  return sub_20F13BF08(v5, a2, a3);
}

uint64_t sub_20EE55F6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;

  v4 = a1;
  v2 = *(unsigned int *)(a2 + 992);
  if ((_DWORD)v2 == -1)
    sub_20E877AB8();
  v5 = &v4;
  return ((uint64_t (*)(uint64_t **))off_24C9EDCE0[v2])(&v5);
}

_QWORD *sub_20EE55FB4(uint64_t a1, int a2)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(a1 + 284) = a2;
  result = *(_QWORD **)(a1 + 11472);
  if (result[5] && result[7] && result[8])
  {
    if ((result[9] != 0) == a2)
      return result;
    if (!a2)
      return sub_20F302CD4(result);
  }
  else if ((a2 & 1) == 0)
  {
    return result;
  }
  v4 = *(_QWORD *)(a1 + 11488) + 40;
  v6[0] = &off_24C9FDC80;
  v6[1] = result;
  v7 = v6;
  sub_20F300190(result, v6, v4);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_20EE560B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EE560F4(uint64_t a1, uint64_t **a2)
{
  uint64_t *v4;
  _BYTE *v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t (**v24)();
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  uint64_t (***v34)();
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  __int128 v42;
  __int128 v43;
  int v44;
  _QWORD v45[3];
  _QWORD *v46;
  _QWORD v47[3];
  _QWORD *v48;
  uint64_t (**v49)();
  std::__shared_weak_count *v50;
  uint64_t (***v51)();
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v42 = 0u;
  v43 = 0u;
  v44 = 733221188;
  kdebug_trace();
  v4 = *a2;
  if (*(_BYTE *)(a1 + 11280)
    && !*(_QWORD *)(a1 + 16)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/SlamEngine/src/LocalSlamEngine.cpp", 1673, (uint64_t)"(config_.semantics_manager_config.enable_semantics && semantics_manager_) || !config_.semantics_manager_config.enable_semantics", 127, (uint64_t)"Semantics manager must not be null when enabled.", 48, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_53;
  }
  v5 = (_BYTE *)(a1 + 8587);
  if (!v4 || *v5)
  {
    v6 = *(_QWORD **)(a1 + 11472);
    v7 = *(std::__shared_weak_count **)(a1 + 11504);
    v38 = *(_QWORD *)(a1 + 11496);
    v39 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    v10 = *(_QWORD *)(a1 + 11488);
    std::mutex::lock((std::mutex *)(v10 + 4208));
    v11 = *(_QWORD *)(v10 + 8);
    std::mutex::unlock((std::mutex *)(v10 + 4208));
    v12 = *(_QWORD *)(a1 + 11488);
    v45[0] = &off_24C9EE440;
    v45[1] = a1;
    v46 = v45;
    v13 = *(_QWORD *)(a1 + 16);
    v49 = 0;
    v50 = 0;
    v37 = v11;
    sub_20F2E3D9C(v6, a1 + 6088, (uint64_t)&v38, v10 + 2512, (uint64_t)&v37, (__int128 *)(v12 + 136), v45, v13, (uint64_t)&v49);
    v14 = v50;
    if (!v50)
      goto LABEL_13;
    v15 = (unint64_t *)&v50->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      v17 = v46;
      if (v46 != v45)
        goto LABEL_14;
    }
    else
    {
LABEL_13:
      v17 = v46;
      if (v46 != v45)
      {
LABEL_14:
        if (!v17)
        {
LABEL_27:
          v28 = v39;
          if (!v39)
            goto LABEL_37;
          v29 = (unint64_t *)&v39->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          goto LABEL_36;
        }
        v18 = 5;
LABEL_26:
        (*(void (**)(void))(*v17 + 8 * v18))();
        goto LABEL_27;
      }
    }
    v18 = 4;
    v17 = v45;
    goto LABEL_26;
  }
  if ((*a2)[1] - **a2 != 16
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/SlamEngine/src/LocalSlamEngine.cpp", 1679, (uint64_t)"loaded_external_submaps->size() == 1", 36, (uint64_t)"Non-submapping case requires a single MapData instance.", 55, (void (*)(void **))sub_21023DDB0))
  {
LABEL_53:
    abort();
  }
  v19 = *(_QWORD **)(a1 + 11472);
  v20 = *(std::__shared_weak_count **)(a1 + 11504);
  v40 = *(_QWORD *)(a1 + 11496);
  v41 = v20;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = *(_QWORD *)(a1 + 11488);
  std::mutex::lock((std::mutex *)(v23 + 4208));
  v24 = *(uint64_t (***)())(v23 + 8);
  std::mutex::unlock((std::mutex *)(v23 + 4208));
  v49 = v24;
  v25 = *(_QWORD *)(a1 + 11488);
  v47[0] = &off_24C9EE330;
  v47[1] = a1;
  v48 = v47;
  sub_20F2E3D9C(v19, a1 + 6088, (uint64_t)&v40, v23 + 2512, (uint64_t)&v49, (__int128 *)(v25 + 136), v47, *(_QWORD *)(a1 + 16), **a2);
  v26 = v48;
  if (v48 == v47)
  {
    v27 = 4;
    v26 = v47;
    goto LABEL_32;
  }
  if (v48)
  {
    v27 = 5;
LABEL_32:
    (*(void (**)(void))(*v26 + 8 * v27))();
  }
  v28 = v41;
  if (!v41)
    goto LABEL_37;
  v31 = (unint64_t *)&v41->__shared_owners_;
  do
    v30 = __ldaxr(v31);
  while (__stlxr(v30 - 1, v31));
LABEL_36:
  if (v30)
  {
LABEL_37:
    if (!*(_BYTE *)(a1 + 284))
      goto LABEL_49;
    goto LABEL_38;
  }
  ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
  std::__shared_weak_count::__release_weak(v28);
  if (!*(_BYTE *)(a1 + 284))
    goto LABEL_49;
LABEL_38:
  *(_BYTE *)(a1 + 284) = 1;
  v32 = *(std::__shared_weak_count **)(a1 + 11472);
  if (!v32[1].__shared_weak_owners_ || !v32[2].__shared_owners_ || !v32[2].__shared_weak_owners_ || !v32[3].__vftable)
  {
    v33 = *(_QWORD *)(a1 + 11488) + 40;
    v49 = &off_24C9FDC80;
    v50 = v32;
    v51 = &v49;
    sub_20F300190(v32, &v49, v33);
    v34 = v51;
    if (v51 == &v49)
    {
      v35 = 4;
      v34 = &v49;
      goto LABEL_48;
    }
    if (v51)
    {
      v35 = 5;
LABEL_48:
      (*v34)[v35]();
    }
  }
LABEL_49:
  if (v4 && *v5)
    sub_20EE5BA7C(a1, *a2);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 160))(*(_QWORD *)(a1 + 8));
  return kdebug_trace();
}

void sub_20EE56544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char *a27)
{
  char *v27;
  char *v29;
  uint64_t v30;

  v29 = a27;
  if (a27 == v27)
  {
    v30 = 4;
    v29 = &a24;
  }
  else
  {
    if (!a27)
      goto LABEL_6;
    v30 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v29 + 8 * v30))();
LABEL_6:
  sub_20E86665C((uint64_t)&a13);
  sub_20E8E69C4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void ***sub_20EE56630(void ***a1)
{
  void **v2;
  char *v3;
  char *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = (char *)*v2;
    if (*v2)
    {
      v4 = (char *)v2[1];
      v5 = *v2;
      if (v4 != v3)
      {
        do
        {
          v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
          if (v6)
          {
            p_shared_owners = (unint64_t *)&v6->__shared_owners_;
            do
              v8 = __ldaxr(p_shared_owners);
            while (__stlxr(v8 - 1, p_shared_owners));
            if (!v8)
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
          }
          v4 -= 16;
        }
        while (v4 != v3);
        v5 = *v2;
      }
      v2[1] = v3;
      operator delete(v5);
    }
    MEMORY[0x212BC6398](v2, 0x20C40960023A9);
  }
  return a1;
}

uint64_t sub_20EE566F4(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t j;
  void *v21;

  v4 = a1 + 12136;
  *(_WORD *)(a1 + 12136) = *(_WORD *)a2;
  v5 = *a2;
  kdebug_trace();
  if (v5)
    v6 = *(_BYTE *)(v4 + 1) == 0;
  else
    v6 = 1;
  if (v6)
  {
    if (!v5)
    {
      v7 = *(_QWORD *)(a1 + 11472);
      v8 = *(_QWORD *)(v7 + 80);
      v9 = *(_QWORD *)(v8 + 2824);
      v10 = *(_QWORD *)(v8 + 2832);
      if (v9 != v10)
      {
        do
        {
          sub_20FCC8FF4(*(_QWORD **)(v9 + 16));
          v9 += 4472;
        }
        while (v9 != v10);
        v7 = *(_QWORD *)(a1 + 11472);
      }
      v12 = v7 + 40;
      v11 = *(_QWORD *)(v7 + 40);
      *(_BYTE *)(*(_QWORD *)(v12 + 8) + 115) = 1;
      *(_BYTE *)(v11 + 115) = 1;
    }
  }
  else
  {
    v13 = *(_QWORD *)(a1 + 11472);
    v14 = *(_QWORD *)(v13 + 48);
    *(_BYTE *)(v14 + 115) = 0;
    v15 = *(_QWORD *)(v14 + 8);
    for (i = *(_QWORD *)(v14 + 16); i != v15; i -= 112)
    {
      v17 = *(void **)(i - 40);
      if (v17)
      {
        *(_QWORD *)(i - 32) = v17;
        operator delete(v17);
      }
    }
    *(_QWORD *)(v14 + 16) = v15;
    v18 = *(_QWORD *)(v13 + 40);
    *(_BYTE *)(v18 + 115) = 0;
    v19 = *(_QWORD *)(v18 + 8);
    for (j = *(_QWORD *)(v18 + 16); j != v19; j -= 112)
    {
      v21 = *(void **)(j - 40);
      if (v21)
      {
        *(_QWORD *)(j - 32) = v21;
        operator delete(v21);
      }
    }
    *(_QWORD *)(v18 + 16) = v19;
  }
  return (*(uint64_t (**)(_QWORD, BOOL, _QWORD))(**(_QWORD **)(a1 + 8) + 144))(*(_QWORD *)(a1 + 8), v5 != 0, a2[1]);
}

uint64_t sub_20EE56840(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t i;
  uint64_t *v7;
  unsigned __int8 v8;
  char *v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t j;
  uint64_t v15;
  uint64_t result;
  void *v17[3];
  char v18;
  void *v19;
  char v20;
  char v21;
  void *v22;
  char v23;
  char v24;
  void *v25;
  char v26;
  void *__p;
  char v28;
  __uint64_t v29[2];

  kdebug_trace();
  if (!*(_BYTE *)(a1 + 8587)
    && (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/SlamEngine/src/LocalSlamEngine.cpp", 840, (uint64_t)"this->config_.mapping_manager_config.enable_submapping", 54, (uint64_t)"Pause mapping module only supports submapping mode", 50, (void (*)(void **))sub_21023DDB0)|| !*(_BYTE *)(a1 + 8587)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/SlamEngine/src/LocalSlamEngine.cpp", 1754, (uint64_t)"this->config_.mapping_manager_config.enable_submapping", 54, (uint64_t)"Reset mapping module only supports submapping mode", 50, (void (*)(void **))sub_21023DDB0)))
  {
    abort();
  }
  if (*(_BYTE *)(a1 + 8705))
  {
    v2 = *(_QWORD **)(a1 + 11472);
    sub_20F2E5E94(v2);
    if (v2[3])
    {
      v3 = (_QWORD *)v2[2];
      if (v3)
      {
        do
        {
          v4 = (_QWORD *)*v3;
          sub_20F3122B4((uint64_t)(v3 + 3));
          operator delete(v3);
          v3 = v4;
        }
        while (v4);
      }
      v2[2] = 0;
      v5 = v2[1];
      if (v5)
      {
        for (i = 0; i != v5; ++i)
          *(_QWORD *)(*v2 + 8 * i) = 0;
      }
      v2[3] = 0;
    }
  }
  if (*(_BYTE *)(a1 + 8728))
    sub_20F2F1704(*(_QWORD *)(a1 + 11472));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 152))(*(_QWORD *)(a1 + 8));
  v7 = sub_210219C18();
  v8 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    LOWORD(v17[0]) = 0;
    v10 = (char *)_os_log_send_and_compose_impl();
    v11 = strlen(v10);
    v29[0] = 0;
    pthread_threadid_np(0, v29);
    v12 = v29[0];
    timespec_get((timespec *)v29, 1);
    sub_210219E20(v17, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v7 + 1), (__int128 *)(v7 + 5), "ReinitMapping", 0xDuLL, v10, v11, v12, v29);
    std::mutex::lock(&stru_254A5A410);
    v13 = qword_254A5A458;
    for (j = unk_254A5A460; v13 != j; v13 += 40)
    {
      v15 = *(_QWORD *)(v13 + 32);
      if (!v15)
        sub_20E86D37C();
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v15 + 48))(v15, v17);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v28 < 0)
    {
      operator delete(__p);
      if ((v26 & 0x80000000) == 0)
      {
LABEL_22:
        if (!v24)
        {
LABEL_28:
          if (v21 && v20 < 0)
            operator delete(v19);
          if (v18 < 0)
            operator delete(v17[1]);
          if (v10)
            free(v10);
          goto LABEL_35;
        }
LABEL_26:
        if (v23 < 0)
          operator delete(v22);
        goto LABEL_28;
      }
    }
    else if ((v26 & 0x80000000) == 0)
    {
      goto LABEL_22;
    }
    operator delete(v25);
    if (!v24)
      goto LABEL_28;
    goto LABEL_26;
  }
LABEL_35:
  result = os_signpost_enabled((os_log_t)*v7);
  if ((_DWORD)result)
  {
    LOWORD(v17[0]) = 0;
    return _os_signpost_emit_unreliably_with_name_impl();
  }
  return result;
}

void sub_20EE56BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  va_list va;

  va_start(va, a5);
  sub_20E96E218((uint64_t)va);
  if (v5)
    free(v5);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE56C28(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned __int8 v12;
  char *v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t j;
  uint64_t v19;
  uint64_t result;
  void *v21[3];
  char v22;
  void *v23;
  char v24;
  char v25;
  void *v26;
  char v27;
  char v28;
  void *v29;
  char v30;
  void *__p;
  char v32;
  __uint64_t v33[2];

  kdebug_trace();
  if (*(_BYTE *)(a1 + 8587))
  {
    if (*(_BYTE *)(a1 + 8705))
    {
      v4 = *(_QWORD **)(a1 + 11472);
      sub_20F2E5E94(v4);
      if (v4[3])
      {
        v5 = (_QWORD *)v4[2];
        if (v5)
        {
          do
          {
            v6 = (_QWORD *)*v5;
            sub_20F3122B4((uint64_t)(v5 + 3));
            operator delete(v5);
            v5 = v6;
          }
          while (v6);
        }
        v4[2] = 0;
        v7 = v4[1];
        if (v7)
        {
          for (i = 0; i != v7; ++i)
            *(_QWORD *)(*v4 + 8 * i) = 0;
        }
        v4[3] = 0;
      }
    }
    if (*(_BYTE *)(a1 + 8728))
      sub_20F2F1704(*(_QWORD *)(a1 + 11472));
    v9 = *(_QWORD *)(a1 + 11472);
    LOBYTE(v21[0]) = 0;
    BYTE6(v21[0]) = 0;
    sub_20F2E5A48(v9, (uint64_t)v21, -1.0);
  }
  v10 = *(_QWORD *)(a1 + 8);
  LOWORD(v21[0]) = 256;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v10 + 136))(v10, v21);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 128))(*(_QWORD *)(a1 + 8), a2);
  v11 = sub_210219C18();
  v12 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    LOWORD(v21[0]) = 0;
    v14 = (char *)_os_log_send_and_compose_impl();
    v15 = strlen(v14);
    v33[0] = 0;
    pthread_threadid_np(0, v33);
    v16 = v33[0];
    timespec_get((timespec *)v33, 1);
    sub_210219E20(v21, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v11 + 1), (__int128 *)(v11 + 5), "ReinitAll", 9uLL, v14, v15, v16, v33);
    std::mutex::lock(&stru_254A5A410);
    v17 = qword_254A5A458;
    for (j = unk_254A5A460; v17 != j; v17 += 40)
    {
      v19 = *(_QWORD *)(v17 + 32);
      if (!v19)
        sub_20E86D37C();
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v19 + 48))(v19, v21);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v32 < 0)
    {
      operator delete(__p);
      if ((v30 & 0x80000000) == 0)
      {
LABEL_20:
        if (!v28)
        {
LABEL_26:
          if (v25 && v24 < 0)
            operator delete(v23);
          if (v22 < 0)
            operator delete(v21[1]);
          if (v14)
            free(v14);
          goto LABEL_33;
        }
LABEL_24:
        if (v27 < 0)
          operator delete(v26);
        goto LABEL_26;
      }
    }
    else if ((v30 & 0x80000000) == 0)
    {
      goto LABEL_20;
    }
    operator delete(v29);
    if (!v28)
      goto LABEL_26;
    goto LABEL_24;
  }
LABEL_33:
  result = os_signpost_enabled((os_log_t)*v11);
  if ((_DWORD)result)
  {
    LOWORD(v21[0]) = 0;
    return _os_signpost_emit_unreliably_with_name_impl();
  }
  return result;
}

void sub_20EE56F94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  void *v45;

  if (a45 < 0)
  {
    operator delete(__p);
    if ((a39 & 0x80000000) == 0)
    {
LABEL_3:
      if (!a33)
        goto LABEL_9;
      goto LABEL_7;
    }
  }
  else if ((a39 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a34);
  if (!a33)
    goto LABEL_9;
LABEL_7:
  if (a32 < 0)
    operator delete(a27);
LABEL_9:
  if (a26)
  {
    if (a25 < 0)
      operator delete(a20);
  }
  if (a19 < 0)
  {
    operator delete(a14);
    if (!v45)
LABEL_14:
      _Unwind_Resume(exception_object);
  }
  else if (!v45)
  {
    goto LABEL_14;
  }
  free(v45);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EE57054(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  unsigned __int8 v5;
  char *v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  void *v14[3];
  char v15;
  void *v16;
  char v17;
  char v18;
  void *v19;
  char v20;
  char v21;
  void *v22;
  char v23;
  void *__p;
  char v25;
  __uint64_t v26[2];

  kdebug_trace();
  v4 = sub_210219C18();
  v5 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    LOWORD(v14[0]) = 0;
    v7 = (char *)_os_log_send_and_compose_impl();
    v8 = strlen(v7);
    v26[0] = 0;
    pthread_threadid_np(0, v26);
    v9 = v26[0];
    timespec_get((timespec *)v26, 1);
    sub_210219E20(v14, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v4 + 1), (__int128 *)(v4 + 5), "ForceMovingPlatformHint", 0x17uLL, v7, v8, v9, v26);
    std::mutex::lock(&stru_254A5A410);
    v10 = qword_254A5A458;
    for (i = unk_254A5A460; v10 != i; v10 += 40)
    {
      v12 = *(_QWORD *)(v10 + 32);
      if (!v12)
        sub_20E86D37C();
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v12 + 48))(v12, v14);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v25 < 0)
    {
      operator delete(__p);
      if ((v23 & 0x80000000) == 0)
      {
LABEL_8:
        if (!v21)
        {
LABEL_14:
          if (v18 && v17 < 0)
            operator delete(v16);
          if (v15 < 0)
            operator delete(v14[1]);
          if (v7)
            free(v7);
          goto LABEL_21;
        }
LABEL_12:
        if (v20 < 0)
          operator delete(v19);
        goto LABEL_14;
      }
    }
    else if ((v23 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(v22);
    if (!v21)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_21:
  if (os_signpost_enabled((os_log_t)*v4))
  {
    LOWORD(v14[0]) = 0;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 352))(*(_QWORD *)(a1 + 8), a2);
}

void sub_20EE5730C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  void *v45;

  if (a45 < 0)
  {
    operator delete(__p);
    if ((a39 & 0x80000000) == 0)
    {
LABEL_3:
      if (!a33)
        goto LABEL_9;
      goto LABEL_7;
    }
  }
  else if ((a39 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a34);
  if (!a33)
    goto LABEL_9;
LABEL_7:
  if (a32 < 0)
    operator delete(a27);
LABEL_9:
  if (a26)
  {
    if (a25 < 0)
      operator delete(a20);
  }
  if (a19 < 0)
  {
    operator delete(a14);
    if (!v45)
LABEL_14:
      _Unwind_Resume(exception_object);
  }
  else if (!v45)
  {
    goto LABEL_14;
  }
  free(v45);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EE573CC(uint64_t a1)
{
  uint64_t *v2;
  unsigned __int8 v3;
  char *v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  void *v12[3];
  char v13;
  void *v14;
  char v15;
  char v16;
  void *v17;
  char v18;
  char v19;
  void *v20;
  char v21;
  void *__p;
  char v23;
  __uint64_t v24[2];

  v2 = sub_210219C18();
  v3 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    LOWORD(v12[0]) = 0;
    v5 = (char *)_os_log_send_and_compose_impl();
    v6 = strlen(v5);
    v24[0] = 0;
    pthread_threadid_np(0, v24);
    v7 = v24[0];
    timespec_get((timespec *)v24, 1);
    sub_210219E20(v12, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v2 + 1), (__int128 *)(v2 + 5), "EnableTravelModeAlertIn3DoF", 0x1BuLL, v5, v6, v7, v24);
    std::mutex::lock(&stru_254A5A410);
    v8 = qword_254A5A458;
    for (i = unk_254A5A460; v8 != i; v8 += 40)
    {
      v10 = *(_QWORD *)(v8 + 32);
      if (!v10)
        sub_20E86D37C();
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v10 + 48))(v10, v12);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v23 < 0)
    {
      operator delete(__p);
      if ((v21 & 0x80000000) == 0)
      {
LABEL_8:
        if (!v19)
        {
LABEL_14:
          if (v16 && v15 < 0)
            operator delete(v14);
          if (v13 < 0)
            operator delete(v12[1]);
          if (v5)
            free(v5);
          goto LABEL_21;
        }
LABEL_12:
        if (v18 < 0)
          operator delete(v17);
        goto LABEL_14;
      }
    }
    else if ((v21 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(v20);
    if (!v19)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_21:
  if (os_signpost_enabled((os_log_t)*v2))
  {
    LOWORD(v12[0]) = 0;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 360))(*(_QWORD *)(a1 + 8));
}

void sub_20EE57658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  void *v45;

  if (a45 < 0)
  {
    operator delete(__p);
    if ((a39 & 0x80000000) == 0)
    {
LABEL_3:
      if (!a33)
        goto LABEL_9;
      goto LABEL_7;
    }
  }
  else if ((a39 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a34);
  if (!a33)
    goto LABEL_9;
LABEL_7:
  if (a32 < 0)
    operator delete(a27);
LABEL_9:
  if (a26)
  {
    if (a25 < 0)
      operator delete(a20);
  }
  if (a19 < 0)
  {
    operator delete(a14);
    if (!v45)
LABEL_14:
      _Unwind_Resume(exception_object);
  }
  else if (!v45)
  {
    goto LABEL_14;
  }
  free(v45);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EE57714(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 384))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20EE57724(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 392))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20EE57734(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 408))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20EE57744(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 320))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20EE57754(uint64_t a1, uint64_t a2, _OWORD *a3, double a4, double a5, double a6, float64x2_t a7)
{
  return sub_20F307E94(*(_QWORD *)(a1 + 11472), a2, a3, a4, a5, a6, a7);
}

void sub_20EE5775C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_20F2FD840(*(_QWORD *)(a1 + 11472), a2, a3);
}

void sub_20EE57764(uint64_t a1, uint64_t a2)
{
  sub_20F300F0C(*(_QWORD **)(a1 + 11472), a2);
}

void sub_20EE5776C(int64x2_t *a1, uint64_t a2, uint64_t *a3, _QWORD *a4, _BYTE *a5, uint64_t a6, uint64_t a7)
{
  int64x2_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  int64x2_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE *v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  char *v39;
  char *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _BYTE *v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  int64x2_t *v63;
  _QWORD *v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  _BYTE *v69;
  int64x2_t *v70;
  char *v71;
  _OWORD *v72;
  __int128 *v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  char v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  char v91;
  char *v92;
  char *v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  char *v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  void *v106;
  void *v107;
  unint64_t *v108;
  unint64_t v109;
  _BYTE *v110;
  uint64_t v114;
  __int128 v115;
  uint64_t v116;
  char *v117;

  if (!a1[731].i64[1])
    return;
  v10 = a1;
  v11 = *(_QWORD *)(a1[729].i64[1] + (((unint64_t)a1[731].i64[0] >> 5) & 0x7FFFFFFFFFFFFF8))
      + 16 * a1[731].i64[0];
  v115 = *(_OWORD *)v11;
  *(_QWORD *)v11 = 0;
  *(_QWORD *)(v11 + 8) = 0;
  v12 = *(std::__shared_weak_count **)(*(_QWORD *)(a1[729].i64[1]
                                                 + (((unint64_t)a1[731].i64[0] >> 5) & 0x7FFFFFFFFFFFFF8))
                                     + 16 * a1[731].i64[0]
                                     + 8);
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = vaddq_s64(v10[731], (int64x2_t)xmmword_2102E3FB0);
  v10[731] = v15;
  if (v15.i64[0] >= 0x200uLL)
  {
    operator delete(*(void **)v10[729].i64[1]);
    v10[729].i64[1] += 8;
    v10[731].i64[0] -= 256;
  }
  *(_QWORD *)a2 = *(_QWORD *)v115;
  v114 = a2;
  if ((_QWORD)v115 != a2)
  {
    v16 = *(char **)(a2 + 8);
    v17 = *(_QWORD *)(v115 + 8);
    v18 = *(_QWORD *)(v115 + 16);
    v19 = 0xF0F0F0F0F0F0F0F1 * ((v18 - v17) >> 3);
    v20 = *(_QWORD *)(a2 + 24);
    if (0xF0F0F0F0F0F0F0F1 * ((v20 - (uint64_t)v16) >> 3) >= v19)
    {
      v31 = *(_BYTE **)(a2 + 16);
      if (0xF0F0F0F0F0F0F0F1 * ((v31 - v16) >> 3) < v19)
      {
        v32 = v17 + 8 * ((v31 - v16) >> 3);
        if (v31 != v16)
        {
          do
          {
            *(_QWORD *)v16 = *(_QWORD *)v17;
            v33 = *(_OWORD *)(v17 + 8);
            v34 = *(_OWORD *)(v17 + 24);
            v35 = *(_OWORD *)(v17 + 40);
            *(_OWORD *)(v16 + 56) = *(_OWORD *)(v17 + 56);
            *(_OWORD *)(v16 + 40) = v35;
            *(_OWORD *)(v16 + 24) = v34;
            *(_OWORD *)(v16 + 8) = v33;
            v36 = *(_OWORD *)(v17 + 72);
            v37 = *(_OWORD *)(v17 + 88);
            v38 = *(_OWORD *)(v17 + 104);
            *(_OWORD *)(v16 + 120) = *(_OWORD *)(v17 + 120);
            *(_OWORD *)(v16 + 104) = v38;
            *(_OWORD *)(v16 + 88) = v37;
            *(_OWORD *)(v16 + 72) = v36;
            v17 += 136;
            v16 += 136;
          }
          while (v17 != v32);
          v16 = *(char **)(a2 + 16);
        }
        v39 = v16;
        if (v32 != v18)
        {
          v39 = v16;
          v40 = v16;
          do
          {
            *(_QWORD *)v40 = *(_QWORD *)v32;
            v41 = *(_OWORD *)(v32 + 8);
            v42 = *(_OWORD *)(v32 + 24);
            v43 = *(_OWORD *)(v32 + 40);
            *(_OWORD *)(v40 + 56) = *(_OWORD *)(v32 + 56);
            *(_OWORD *)(v40 + 40) = v43;
            *(_OWORD *)(v40 + 24) = v42;
            *(_OWORD *)(v40 + 8) = v41;
            v44 = *(_OWORD *)(v32 + 72);
            v45 = *(_OWORD *)(v32 + 88);
            v46 = *(_OWORD *)(v32 + 104);
            *(_OWORD *)(v40 + 120) = *(_OWORD *)(v32 + 120);
            *(_OWORD *)(v40 + 104) = v46;
            *(_OWORD *)(v40 + 88) = v45;
            *(_OWORD *)(v40 + 72) = v44;
            v39 += 136;
            v32 += 136;
            v40 += 136;
          }
          while (v32 != v18);
        }
        v47 = v39 - v16;
        goto LABEL_37;
      }
      v24 = *(char **)(a2 + 8);
      if (v17 != v18)
      {
        v48 = *(_QWORD *)(a2 + 8);
        do
        {
          *(_QWORD *)v48 = *(_QWORD *)v17;
          v49 = *(_OWORD *)(v17 + 8);
          v50 = *(_OWORD *)(v17 + 24);
          v51 = *(_OWORD *)(v17 + 40);
          *(_OWORD *)(v48 + 56) = *(_OWORD *)(v17 + 56);
          *(_OWORD *)(v48 + 40) = v51;
          *(_OWORD *)(v48 + 24) = v50;
          *(_OWORD *)(v48 + 8) = v49;
          v52 = *(_OWORD *)(v17 + 72);
          v53 = *(_OWORD *)(v17 + 88);
          v54 = *(_OWORD *)(v17 + 104);
          *(_OWORD *)(v48 + 120) = *(_OWORD *)(v17 + 120);
          *(_OWORD *)(v48 + 104) = v54;
          *(_OWORD *)(v48 + 88) = v53;
          *(_OWORD *)(v48 + 72) = v52;
          v24 += 136;
          v17 += 136;
          v48 += 136;
        }
        while (v17 != v18);
      }
    }
    else
    {
      if (v16)
      {
        *(_QWORD *)(a2 + 16) = v16;
        operator delete(v16);
        v20 = 0;
        *(_QWORD *)(a2 + 8) = 0;
        *(_QWORD *)(a2 + 16) = 0;
        *(_QWORD *)(a2 + 24) = 0;
      }
      if (v19 > 0x1E1E1E1E1E1E1E1)
        goto LABEL_106;
      v21 = 0xF0F0F0F0F0F0F0F1 * (v20 >> 3);
      v22 = 2 * v21;
      if (2 * v21 <= v19)
        v22 = 0xF0F0F0F0F0F0F0F1 * ((v18 - v17) >> 3);
      v23 = v21 >= 0xF0F0F0F0F0F0F0 ? 0x1E1E1E1E1E1E1E1 : v22;
      if (v23 > 0x1E1E1E1E1E1E1E1)
LABEL_106:
        sub_20EABADD4();
      v16 = (char *)operator new(136 * v23);
      *(_QWORD *)(a2 + 8) = v16;
      *(_QWORD *)(a2 + 16) = v16;
      *(_QWORD *)(a2 + 24) = &v16[136 * v23];
      v24 = v16;
      if (v17 != v18)
      {
        v24 = v16;
        do
        {
          *(_QWORD *)v24 = *(_QWORD *)v17;
          v25 = *(_OWORD *)(v17 + 8);
          v26 = *(_OWORD *)(v17 + 24);
          v27 = *(_OWORD *)(v17 + 40);
          *(_OWORD *)(v24 + 56) = *(_OWORD *)(v17 + 56);
          *(_OWORD *)(v24 + 40) = v27;
          *(_OWORD *)(v24 + 24) = v26;
          *(_OWORD *)(v24 + 8) = v25;
          v28 = *(_OWORD *)(v17 + 72);
          v29 = *(_OWORD *)(v17 + 88);
          v30 = *(_OWORD *)(v17 + 104);
          *(_OWORD *)(v24 + 120) = *(_OWORD *)(v17 + 120);
          *(_OWORD *)(v24 + 104) = v30;
          *(_OWORD *)(v24 + 88) = v29;
          *(_OWORD *)(v24 + 72) = v28;
          v24 += 136;
          v17 += 136;
        }
        while (v17 != v18);
      }
    }
    v47 = v24 - v16;
LABEL_37:
    *(_QWORD *)(a2 + 16) = &v16[v47];
    sub_20EE63294((char **)(a2 + 32), *(uint64_t **)(v115 + 32), *(uint64_t **)(v115 + 40), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(v115 + 40) - *(_QWORD *)(v115 + 32)) >> 4));
    sub_20EE63530(a2 + 56, (char **)(v115 + 56));
    sub_20EE631BC(a2 + 152, v115 + 152);
    sub_20EE63294((char **)(a2 + 296), *(uint64_t **)(v115 + 296), *(uint64_t **)(v115 + 304), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(v115 + 304) - *(_QWORD *)(v115 + 296)) >> 4));
    sub_20E92CD94((_QWORD *)(a2 + 320), *(char **)(v115 + 320), *(char **)(v115 + 328), (uint64_t)(*(_QWORD *)(v115 + 328) - *(_QWORD *)(v115 + 320)) >> 3);
    v110 = a5;
    v55 = *(_OWORD *)(v115 + 344);
    *(_OWORD *)(a2 + 354) = *(_OWORD *)(v115 + 354);
    *(_OWORD *)(a2 + 344) = v55;
    v57 = *(char **)(v115 + 376);
    v56 = *(_BYTE **)(v115 + 384);
    v58 = v56 - v57;
    v59 = 0x4EC4EC4EC4EC4EC5 * ((v56 - v57) >> 3);
    v60 = *(_QWORD *)(a2 + 392);
    v61 = *(char **)(a2 + 376);
    if (0x4EC4EC4EC4EC4EC5 * ((v60 - (uint64_t)v61) >> 3) >= v59)
    {
      v69 = *(_BYTE **)(a2 + 384);
      if (0x4EC4EC4EC4EC4EC5 * ((v69 - v61) >> 3) >= v59)
      {
        a5 = v110;
        if (v56 != v57)
          memmove(*(void **)(a2 + 376), *(const void **)(v115 + 376), v58 - 4);
      }
      else
      {
        v70 = v10;
        v71 = &v57[8 * ((v69 - v61) >> 3)];
        a5 = v110;
        if (v69 != v61)
        {
          memmove(*(void **)(a2 + 376), *(const void **)(v115 + 376), v69 - v61 - 4);
          v61 = *(char **)(a2 + 384);
        }
        v58 = v56 - v71;
        if (v56 != v71)
          memmove(v61, v71, v58 - 4);
        v10 = v70;
      }
    }
    else
    {
      v62 = a2;
      v63 = v10;
      v64 = (_QWORD *)(v62 + 376);
      if (v61)
      {
        *(_QWORD *)(v62 + 384) = v61;
        operator delete(v61);
        v60 = 0;
        *v64 = 0;
        v64[1] = 0;
        v64[2] = 0;
      }
      if (v59 > 0x276276276276276)
        goto LABEL_107;
      v65 = 0x4EC4EC4EC4EC4EC5 * (v60 >> 3);
      v66 = 2 * v65;
      if (2 * v65 <= v59)
        v66 = 0x4EC4EC4EC4EC4EC5 * ((v56 - v57) >> 3);
      v67 = v65 >= 0x13B13B13B13B13BLL ? 0x276276276276276 : v66;
      if (v67 > 0x276276276276276)
LABEL_107:
        sub_20EABADD4();
      v68 = (char *)operator new(104 * v67);
      v10 = v63;
      a2 = v114;
      a5 = v110;
      v61 = v68;
      *(_QWORD *)(v114 + 376) = v68;
      *(_QWORD *)(v114 + 384) = v68;
      *(_QWORD *)(v114 + 392) = &v68[104 * v67];
      if (v56 != v57)
        memcpy(v68, v57, v58 - 4);
    }
    *(_QWORD *)(a2 + 384) = &v61[v58];
    *(_DWORD *)(a2 + 400) = *(_DWORD *)(v115 + 400);
    sub_20E86811C((_QWORD *)(a2 + 408), *(char **)(v115 + 408), *(char **)(v115 + 416), (uint64_t)(*(_QWORD *)(v115 + 416) - *(_QWORD *)(v115 + 408)) >> 3);
    goto LABEL_58;
  }
  sub_20EE63530(a2 + 56, (char **)(a2 + 56));
LABEL_58:
  v72 = (_OWORD *)(a2 + 432);
  v73 = (__int128 *)(v115 + 432);
  if (*(unsigned __int8 *)(a2 + 904) == *(unsigned __int8 *)(v115 + 904))
  {
    if (*(_BYTE *)(a2 + 904))
    {
      v74 = *v73;
      v75 = *(_OWORD *)(v115 + 448);
      *(_OWORD *)(a2 + 460) = *(_OWORD *)(v115 + 460);
      *v72 = v74;
      *(_OWORD *)(a2 + 448) = v75;
      v76 = *(_OWORD *)(v115 + 592);
      v78 = *(_OWORD *)(v115 + 544);
      v77 = *(_OWORD *)(v115 + 560);
      *(_OWORD *)(a2 + 576) = *(_OWORD *)(v115 + 576);
      *(_OWORD *)(a2 + 592) = v76;
      *(_OWORD *)(a2 + 544) = v78;
      *(_OWORD *)(a2 + 560) = v77;
      v79 = *(_OWORD *)(v115 + 480);
      v80 = *(_OWORD *)(v115 + 496);
      v81 = *(_OWORD *)(v115 + 528);
      *(_OWORD *)(a2 + 512) = *(_OWORD *)(v115 + 512);
      *(_OWORD *)(a2 + 528) = v81;
      *(_OWORD *)(a2 + 480) = v79;
      *(_OWORD *)(a2 + 496) = v80;
      memcpy((void *)(a2 + 608), (const void *)(v115 + 608), 0x120uLL);
      v82 = *(_BYTE *)(v115 + 900);
      *(_DWORD *)(a2 + 896) = *(_DWORD *)(v115 + 896);
      *(_BYTE *)(a2 + 900) = v82;
    }
  }
  else if (*(_BYTE *)(a2 + 904))
  {
    *(_BYTE *)(a2 + 904) = 0;
  }
  else
  {
    v83 = *v73;
    v84 = *(_OWORD *)(v115 + 448);
    *(_OWORD *)(a2 + 460) = *(_OWORD *)(v115 + 460);
    *v72 = v83;
    *(_OWORD *)(a2 + 448) = v84;
    v85 = *(_OWORD *)(v115 + 592);
    v87 = *(_OWORD *)(v115 + 544);
    v86 = *(_OWORD *)(v115 + 560);
    *(_OWORD *)(a2 + 576) = *(_OWORD *)(v115 + 576);
    *(_OWORD *)(a2 + 592) = v85;
    *(_OWORD *)(a2 + 544) = v87;
    *(_OWORD *)(a2 + 560) = v86;
    v88 = *(_OWORD *)(v115 + 480);
    v89 = *(_OWORD *)(v115 + 496);
    v90 = *(_OWORD *)(v115 + 528);
    *(_OWORD *)(a2 + 512) = *(_OWORD *)(v115 + 512);
    *(_OWORD *)(a2 + 528) = v90;
    *(_OWORD *)(a2 + 480) = v88;
    *(_OWORD *)(a2 + 496) = v89;
    memcpy((void *)(a2 + 608), (const void *)(v115 + 608), 0x120uLL);
    v91 = *(_BYTE *)(v115 + 900);
    *(_DWORD *)(a2 + 896) = *(_DWORD *)(v115 + 896);
    *(_BYTE *)(a2 + 900) = v91;
    *(_BYTE *)(a2 + 904) = 1;
  }
  sub_20EE63B44(a4, v115 + 1128);
  sub_20EE64D58(a6, v115 + 1256);
  sub_20EE65544(a7, v115 + 1312);
  *a5 = *(_BYTE *)(v115 + 1392);
  sub_20EE584BC((uint64_t)a3, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v115 + 920) - *(_QWORD *)(v115 + 912)) >> 3));
  v92 = *(char **)(v115 + 912);
  v93 = *(char **)(v115 + 920);
  if (v92 != v93)
  {
    v94 = (unint64_t *)(a3 + 2);
    v95 = a3[1];
    do
    {
      if (v95 >= *v94)
      {
        v96 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v95 - *a3) >> 3);
        v97 = v96 + 1;
        if ((unint64_t)(v96 + 1) > 0x492492492492492)
          sub_20E867F44();
        if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*v94 - *a3) >> 3) > v97)
          v97 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*v94 - *a3) >> 3);
        if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*v94 - *a3) >> 3)) >= 0x249249249249249)
          v98 = 0x492492492492492;
        else
          v98 = v97;
        if (v98)
        {
          if (v98 > 0x492492492492492)
            sub_20E877A38();
          v99 = (char *)operator new(56 * v98);
        }
        else
        {
          v99 = 0;
        }
        v116 = (uint64_t)&v99[56 * v96];
        v117 = &v99[56 * v98];
        sub_20ED1B5EC(v116, v92);
        v95 = v116 + 56;
        v100 = (char *)*a3;
        v101 = (char *)a3[1];
        if (v101 == (char *)*a3)
        {
          *a3 = v116;
          a3[1] = v95;
          a3[2] = (uint64_t)v117;
        }
        else
        {
          v102 = 0;
          do
          {
            v103 = v116 + v102;
            v104 = &v101[v102];
            *(_BYTE *)(v103 - 56) = v101[v102 - 56];
            *(_QWORD *)(v103 - 40) = 0;
            *(_QWORD *)(v103 - 32) = 0;
            *(_QWORD *)(v103 - 48) = 0;
            *(_OWORD *)(v103 - 48) = *(_OWORD *)&v101[v102 - 48];
            *(_QWORD *)(v103 - 32) = *(_QWORD *)&v101[v102 - 32];
            *((_QWORD *)v104 - 6) = 0;
            *((_QWORD *)v104 - 5) = 0;
            *((_QWORD *)v104 - 4) = 0;
            *(_QWORD *)(v103 - 24) = 0;
            *(_QWORD *)(v103 - 16) = 0;
            *(_QWORD *)(v103 - 8) = 0;
            *(_OWORD *)(v103 - 24) = *(_OWORD *)&v101[v102 - 24];
            *(_QWORD *)(v103 - 8) = *(_QWORD *)&v101[v102 - 8];
            *((_QWORD *)v104 - 3) = 0;
            *((_QWORD *)v104 - 2) = 0;
            *((_QWORD *)v104 - 1) = 0;
            v102 -= 56;
          }
          while (&v101[v102] != v100);
          v101 = (char *)*a3;
          v105 = (char *)a3[1];
          *a3 = v116 + v102;
          a3[1] = v95;
          a3[2] = (uint64_t)v117;
          while (v105 != v101)
          {
            v106 = (void *)*((_QWORD *)v105 - 3);
            if (v106)
            {
              *((_QWORD *)v105 - 2) = v106;
              operator delete(v106);
            }
            v107 = (void *)*((_QWORD *)v105 - 6);
            if (v107)
            {
              *((_QWORD *)v105 - 5) = v107;
              operator delete(v107);
            }
            v105 -= 56;
          }
        }
        if (v101)
          operator delete(v101);
      }
      else
      {
        sub_20ED1B5EC(v95, v92);
        v95 += 56;
        a3[1] = v95;
      }
      a3[1] = v95;
      v92 += 56;
    }
    while (v92 != v93);
  }
  if (*(_BYTE *)(v114 + 360))
    sub_20F0946E4(v10->i64[1], *(_QWORD *)(v114 + 344), *(unsigned __int8 *)(v114 + 352));
  if (*(_BYTE *)(v115 + 1120))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10->i64[1] + 104))(v10->i64[1], v115 + 992);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10->i64[1] + 40))(v10->i64[1], v115 + 1232);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v10->i64[1] + 48))(v10->i64[1], *(unsigned __int16 *)(v115 + 1393));
  if (*(_BYTE *)(v115 + 984))
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v10->i64[1] + 88))(v10->i64[1], v115 + 936, v115 + 960, *(unsigned __int8 *)(v115 + 985));
  if (*((_QWORD *)&v115 + 1))
  {
    v108 = (unint64_t *)(*((_QWORD *)&v115 + 1) + 8);
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v115 + 1) + 16))(*((_QWORD *)&v115 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v115 + 1));
    }
  }
}

void sub_20EE5817C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EE58190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  sub_20EE65DB4((uint64_t)va1);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EE581AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v8;
  va_list va;

  va_start(va, a7);
  *(_QWORD *)(v7 + 8) = v8;
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EE581C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EE581D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EE581EC(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  void *v9;

  v2 = (void *)a1[682];
  if (v2)
  {
    a1[683] = v2;
    operator delete(v2);
  }
  sub_20E91E818((uint64_t)(a1 + 515));
  v3 = (std::__shared_weak_count *)a1[488];
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = (std::__shared_weak_count *)a1[486];
    if (!v6)
      goto LABEL_13;
  }
  else
  {
LABEL_7:
    v6 = (std::__shared_weak_count *)a1[486];
    if (!v6)
      goto LABEL_13;
  }
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_13:
  v9 = (void *)a1[480];
  if (v9)
  {
    a1[481] = v9;
    operator delete(v9);
  }
  sub_20E91EA40((uint64_t)(a1 + 4));
  return a1;
}

void sub_20EE582BC(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5FA28);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5FA28))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.slam_engine");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A5FA20);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A5FA28);
  }
  *a1 = qword_254A5FA20;
}

void sub_20EE58358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5FA28);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5FA28);
  _Unwind_Resume(a1);
}

void **sub_20EE583B0(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 3);
        if (v5)
        {
          *((_QWORD *)v3 - 2) = v5;
          operator delete(v5);
        }
        v6 = (void *)*((_QWORD *)v3 - 6);
        if (v6)
        {
          *((_QWORD *)v3 - 5) = v6;
          operator delete(v6);
        }
        v3 -= 56;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_20EE58430(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD *)(a1 + 24);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 32);
      v4 = *(void **)(a1 + 24);
      if (v3 != v2)
      {
        v5 = *(_QWORD *)(a1 + 32);
        do
        {
          v7 = *(void **)(v5 - 24);
          v5 -= 24;
          v6 = v7;
          if (v7)
          {
            *(_QWORD *)(v3 - 16) = v6;
            operator delete(v6);
          }
          v3 = v5;
        }
        while (v5 != v2);
        v4 = *(void **)(a1 + 24);
      }
      *(_QWORD *)(a1 + 32) = v2;
      operator delete(v4);
    }
    v8 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v8;
      operator delete(v8);
    }
  }
  return a1;
}

void sub_20EE584BC(uint64_t a1, unint64_t a2)
{
  char *v2;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  void *v13;
  void *v14;

  v2 = *(char **)a1;
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a2)
  {
    if (a2 >= 0x492492492492493)
      sub_20E867F44();
    v4 = *(_BYTE **)(a1 + 8);
    v5 = 56 * a2;
    v6 = (char *)operator new(56 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
    }
    else
    {
      v9 = 0;
      do
      {
        v10 = &v8[v9];
        v11 = &v4[v9];
        *(v10 - 56) = v4[v9 - 56];
        *((_OWORD *)v10 - 3) = *(_OWORD *)&v4[v9 - 48];
        *((_QWORD *)v10 - 4) = *(_QWORD *)&v4[v9 - 32];
        *((_QWORD *)v11 - 6) = 0;
        *((_QWORD *)v11 - 5) = 0;
        *((_QWORD *)v11 - 4) = 0;
        *(_OWORD *)(v10 - 24) = *(_OWORD *)&v4[v9 - 24];
        *((_QWORD *)v10 - 1) = *(_QWORD *)&v4[v9 - 8];
        *((_QWORD *)v11 - 3) = 0;
        *((_QWORD *)v11 - 2) = 0;
        *((_QWORD *)v11 - 1) = 0;
        v9 -= 56;
      }
      while (&v4[v9] != v2);
      v2 = *(char **)a1;
      v12 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = &v8[v9];
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      while (v12 != v2)
      {
        v13 = (void *)*((_QWORD *)v12 - 3);
        if (v13)
        {
          *((_QWORD *)v12 - 2) = v13;
          operator delete(v13);
        }
        v14 = (void *)*((_QWORD *)v12 - 6);
        if (v14)
        {
          *((_QWORD *)v12 - 5) = v14;
          operator delete(v14);
        }
        v12 -= 56;
      }
    }
    if (v2)
      operator delete(v2);
  }
}

void sub_20EE58608(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  int v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  const char *v14;
  size_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  const char *v18;
  size_t v19;
  void **v20;
  uint64_t v21;
  uint64_t v22;
  void **v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  std::__shared_weak_count_vtbl *v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  unint64_t v33;
  void *v34;
  __darwin_time_t v35;
  uint64_t v36;
  const char *v37;
  __darwin_time_t tv_sec;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  void *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  void *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  unint64_t v67;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  _BYTE *v76;
  _BYTE *v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD **v80;
  void *i;
  void *v82;
  unint64_t v83;
  uint64_t *j;
  _QWORD *v85;
  char *v86;
  _QWORD *v87;
  char *v88;
  void *v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  void **v112;
  void **v113;
  _QWORD *v114;
  char *v115;
  void *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char **v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  char **v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  __int128 v136;
  __int128 v137;
  uint64_t *v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  void **v142;
  char *v143;
  __int128 v144;
  unint64_t v145;
  char *v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  char *v150;
  char *v151;
  __int128 v152;
  __int128 v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  void **v159;
  _QWORD *v160;
  char *v161;
  void *v162;
  unint64_t v163;
  unint64_t v164;
  char *v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  void **v169;
  char *v170;
  void *v171;
  _QWORD *v172;
  void *v173;
  char *v174;
  char *v175;
  __int128 v176;
  uint64_t v177;
  char *v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  char *v182;
  void **v183;
  void **v184;
  _QWORD *v185;
  uint64_t v186;
  void *v187;
  void **v188;
  void **v189;
  void *v190;
  char *v191;
  char *v192;
  char *v193;
  char *v194;
  void *v195;
  void *v196;
  char *v197;
  _QWORD *v198;
  void *v199;
  char *v200;
  void *v201;
  void *v202;
  void **v203;
  unint64_t v204;
  unint64_t v205;
  char *v206;
  char *v207;
  char *v208;
  void **v209;
  char *v210;
  __int128 v211;
  void **v212;
  void **v213;
  void *v214;
  char *v215;
  char *v216;
  char *v217;
  void *v218;
  char *v219;
  char *v220;
  void *v221;
  void *v222;
  uint64_t *v223;
  unint64_t v224;
  unsigned __int8 v225;
  uint64_t v226;
  char *v228;
  size_t v229;
  __darwin_time_t v230;
  uint64_t v231;
  uint64_t k;
  uint64_t v233;
  void *v234;
  void *v235;
  uint64_t v236;
  _BYTE *v237;
  _BYTE *v238;
  int64_t v239;
  char *v240;
  char *v241;
  _QWORD *v242;
  void **v243;
  uint64_t v244;
  void *v245;
  char *v246;
  char *v247;
  void *v248;
  void *v249;
  void *v250;
  void *v251;
  int v252;
  void *v253;
  unint64_t v254;
  _QWORD *v255;
  _QWORD *v256;
  int v257;
  int v258;
  int v259;
  int v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t *v264;
  void *v265;
  void *v266;
  void *v267;
  int64_t v268;
  void *v269;
  const char *v270;
  void *v271;
  void **v272;
  void **v273;
  void **v274;
  void **v275;
  void **v276;
  void **v277;
  void *v278;
  void **v279;
  void **v280;
  void **v281;
  uint64_t **v282;
  void *v283;
  char *v284;
  char *v285;
  uint64_t *v286;
  char v287;
  uint64_t v288;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v290;
  uint64_t v291;
  const char *v292;
  int v293;
  const char *v294;
  uint64_t v295;
  std::__shared_weak_count *v296;
  timespec v297;
  uint64_t v298;
  void *object[8];
  __int128 v300;
  _BYTE v301[24];
  char *v302;
  char *v303;
  void *v304;
  uint64_t v305;
  uint64_t v306;
  __int128 v307;
  uint64_t v308;
  __int128 v309;
  uint64_t v310;
  uint64_t *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  __int128 v318;
  uint64_t v319;
  __int128 v320;
  uint64_t v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  uint64_t v326;
  uint64_t *v327;
  uint64_t v328;
  uint64_t v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  int v333;
  uint64_t v334;

  v334 = *MEMORY[0x24BDAC8D0];
  sub_20EE582BC(&v278);
  if (**((int **)v278 + 7) > 2)
    goto LABEL_90;
  v9 = *((unsigned __int8 *)v278 + 72);
  v10 = sub_20E8C31DC((uint64_t)v278, "OSLogSurrogateAppender", 1, 0);
  v11 = v10;
  if (!v9 && v10 == 0)
    goto LABEL_90;
  v257 = a3;
  v259 = a4;
  v255 = a5;
  v288 = (uint64_t)&v278;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v290 = std::chrono::system_clock::now().__d_.__rep_;
  LODWORD(v291) = 2;
  v292 = "unknown file";
  v293 = 1551;
  v295 = 0;
  v296 = 0;
  v294 = "unknown function";
  v13 = *(_QWORD *)v288;
  v14 = (const char *)(*(_QWORD *)v288 + 16);
  v270 = v14;
  if (*(char *)(*(_QWORD *)v288 + 39) < 0)
  {
    v14 = *(const char **)(v13 + 16);
    v15 = *(_QWORD *)(v13 + 24);
    v261 = a1;
    v17 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v17 & 1) != 0)
      goto LABEL_10;
  }
  else
  {
    v15 = *(unsigned __int8 *)(*(_QWORD *)v288 + 39);
    v261 = a1;
    v16 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v16 & 1) != 0)
      goto LABEL_10;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)object);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
    if (LOBYTE(object[3]) && SHIBYTE(object[2]) < 0)
      operator delete(object[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_10:
  if (byte_254A4A4F8[23] >= 0)
    v18 = byte_254A4A4F8;
  else
    v18 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v19 = byte_254A4A4F8[23];
  else
    v19 = *(_QWORD *)&byte_254A4A4F8[8];
  object[0] = os_log_create(v18, v14);
  v20 = &object[1];
  if (v19 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v19 >= 0x17)
  {
    v21 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v21 = v19 | 7;
    v22 = v21 + 1;
    v20 = (void **)operator new(v21 + 1);
    object[3] = (void *)(v22 | 0x8000000000000000);
    object[1] = v20;
    object[2] = (void *)v19;
    goto LABEL_23;
  }
  HIBYTE(object[3]) = v19;
  if (v19)
LABEL_23:
    memmove(v20, v18, v19);
  *((_BYTE *)v20 + v19) = 0;
  LOBYTE(object[4]) = 1;
  v23 = &object[5];
  if (v15 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  a1 = v261;
  if (v15 >= 0x17)
  {
    v25 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v25 = v15 | 7;
    v26 = v25 + 1;
    v23 = (void **)operator new(v25 + 1);
    object[7] = (void *)(v26 | 0x8000000000000000);
    object[5] = v23;
    object[6] = (void *)v15;
  }
  else
  {
    HIBYTE(object[7]) = v15;
    if (!v15)
    {
      LOBYTE(object[5]) = 0;
      LOBYTE(v300) = 1;
      v24 = object[0];
      if ((SHIBYTE(object[7]) & 0x80000000) == 0)
        goto LABEL_28;
      goto LABEL_34;
    }
  }
  memmove(v23, v14, v15);
  *((_BYTE *)v23 + v15) = 0;
  LOBYTE(v300) = 1;
  v24 = object[0];
  if ((SHIBYTE(object[7]) & 0x80000000) == 0)
  {
LABEL_28:
    if (!LOBYTE(object[4]))
      goto LABEL_37;
    goto LABEL_35;
  }
LABEL_34:
  operator delete(object[5]);
  if (!LOBYTE(object[4]))
    goto LABEL_37;
LABEL_35:
  if (SHIBYTE(object[3]) < 0)
    operator delete(object[1]);
LABEL_37:
  if (object[0])
    os_release(object[0]);
  if (v11 && *(_QWORD *)(v11 + 24))
  {
    v27 = _os_log_pack_size();
    v28 = (std::__shared_weak_count_vtbl *)operator new(v27, (std::align_val_t)8uLL);
    v29 = (std::__shared_weak_count *)operator new();
    v30 = v29;
    v29->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    v29->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v29->__shared_weak_owners_ = 0;
    v29[1].__vftable = v28;
    object[0] = v28;
    object[1] = v28;
    object[2] = v29;
    do
      v32 = __ldxr(p_shared_owners);
    while (__stxr(v32 + 1, p_shared_owners));
    memset(&object[3], 0, 24);
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v30);
    }
    v34 = object[0];
    *(_WORD *)_os_log_pack_fill() = 0;
    v35 = operator new();
    v36 = *(unsigned __int8 *)(v13 + 39);
    v37 = v270;
    if ((v36 & 0x80u) != 0)
    {
      v37 = *(const char **)(v13 + 16);
      v36 = *(_QWORD *)(v13 + 24);
    }
    *(_QWORD *)v35 = v34;
    *(_OWORD *)(v35 + 8) = *(_OWORD *)&object[1];
    object[1] = 0;
    object[2] = 0;
    *(_OWORD *)(v35 + 24) = *(_OWORD *)&object[3];
    object[3] = 0;
    object[4] = 0;
    *(_QWORD *)(v35 + 40) = v37;
    *(_QWORD *)(v35 + 48) = v36;
    *(_BYTE *)(v35 + 56) = 2;
    v283 = 0;
    v297.tv_sec = v35;
    (*(void (**)(_QWORD, timespec *))(**(_QWORD **)(v11 + 24) + 40))(*(_QWORD *)(v11 + 24), &v297);
    a3 = v257;
    a4 = v259;
    tv_sec = v297.tv_sec;
    v297.tv_sec = 0;
    a5 = v255;
    a1 = v261;
    if (tv_sec)
    {
      v39 = *(std::__shared_weak_count **)(tv_sec + 32);
      if (v39)
      {
        v40 = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      v42 = *(std::__shared_weak_count **)(tv_sec + 16);
      if (v42)
      {
        v43 = (unint64_t *)&v42->__shared_owners_;
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      MEMORY[0x212BC6398](tv_sec, 0x10F0C40B62ED6C6);
      v45 = v283;
      v283 = 0;
      if (v45)
      {
        v46 = (std::__shared_weak_count *)*((_QWORD *)v45 + 4);
        if (v46)
        {
          v47 = (unint64_t *)&v46->__shared_owners_;
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
        v49 = (std::__shared_weak_count *)*((_QWORD *)v45 + 2);
        if (v49)
        {
          v50 = (unint64_t *)&v49->__shared_owners_;
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 - 1, v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
            std::__shared_weak_count::__release_weak(v49);
          }
        }
        MEMORY[0x212BC6398](v45, 0x10F0C40B62ED6C6);
      }
    }
    v52 = (std::__shared_weak_count *)object[4];
    if (object[4])
    {
      v53 = (unint64_t *)((char *)object[4] + 8);
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    v55 = (std::__shared_weak_count *)object[2];
    if (object[2])
    {
      v56 = (unint64_t *)((char *)object[2] + 8);
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
  }
  else
  {
    os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG);
    LOWORD(object[0]) = 0;
    v58 = (void *)_os_log_send_and_compose_impl();
    a5 = v255;
    a3 = v257;
    a4 = v259;
    if (v58)
      free(v58);
  }
  if (v9)
  {
    sub_20E8C003C((uint64_t)&v288, "Requesting save");
    sub_20E863570((uint64_t)&v288);
  }
  sub_20E863570((uint64_t)&v288);
  v59 = v296;
  if (v296)
  {
    v60 = (unint64_t *)&v296->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
      v62 = *(_QWORD *)(a1 + 11472);
      if (*(_BYTE *)(*(_QWORD *)(v62 + 80) + 2632))
        goto LABEL_92;
      goto LABEL_91;
    }
  }
LABEL_90:
  v62 = *(_QWORD *)(a1 + 11472);
  if (*(_BYTE *)(*(_QWORD *)(v62 + 80) + 2632))
  {
LABEL_92:
    v300 = 0u;
    memset(v301, 0, 17);
    memset(object, 0, sizeof(object));
    v304 = 0;
    v302 = 0;
    v303 = 0;
    LOBYTE(v305) = 0;
    v63 = operator new(0xA0uLL);
    v63[1] = 0;
    v63[2] = 0;
    *v63 = &off_24C9B3930;
    v63[4] = 0;
    v63[5] = 0;
    v63[3] = 0;
    memset(object, 0, 32);
    v63[6] = 0;
    v63[7] = 0;
    object[5] = 0;
    object[4] = 0;
    v63[8] = 0;
    v63[9] = 0;
    v63[10] = 0;
    v63[11] = 0;
    object[7] = 0;
    object[6] = 0;
    v63[13] = 0;
    v63[14] = 0;
    v63[12] = 0;
    v300 = 0uLL;
    *(_QWORD *)&v301[8] = 0;
    *(_QWORD *)v301 = 0;
    *((_BYTE *)v63 + 120) = 0;
    v63[17] = 0;
    v63[18] = 0;
    v63[16] = 0;
    v303 = 0;
    v304 = 0;
    v302 = 0;
    *((_BYTE *)v63 + 152) = 0;
    *a5 = v63 + 3;
    a5[1] = v63;
    sub_20E995400(object);
    return;
  }
LABEL_91:
  if (*(_BYTE *)(v62 + 2320))
    goto LABEL_92;
  LOBYTE(v286) = 0;
  v287 = 0;
  if (!*(_BYTE *)(a1 + 6205))
  {
    v286 = (uint64_t *)(*(_QWORD *)(a1 + 11488) + 40);
    v287 = 1;
  }
  sub_20F3065F0(v62, a3, a2, a4, 1, (char ***)object);
  v64 = (uint64_t *)object[0];
  v65 = (uint64_t *)object[1];
  v258 = a3;
  v260 = a4;
  v251 = object[0];
  sub_20F3065F0(*(_QWORD *)(a1 + 11472), a3, 1, a4, 0, (char ***)object);
  v66 = v65 - v64;
  v254 = (char *)v65 - (char *)v64;
  if (v65 == v64)
  {
    v68 = 0;
    goto LABEL_106;
  }
  v67 = (char *)v65 - (char *)v64 - 8;
  if (v67 < 8)
  {
    v68 = 0;
    v69 = v64;
    do
    {
LABEL_105:
      v75 = *v69++;
      v68 += *(_QWORD *)(**(_QWORD **)(v75 + 424) + 64);
    }
    while (v69 != v65);
    goto LABEL_106;
  }
  v70 = 0;
  v71 = 0;
  v72 = (v67 >> 3) + 1;
  v69 = &v64[v72 & 0x3FFFFFFFFFFFFFFELL];
  v73 = (char *)(v64 + 1);
  v74 = v72 & 0x3FFFFFFFFFFFFFFELL;
  do
  {
    v70 += *(_QWORD *)(**(_QWORD **)(*((_QWORD *)v73 - 1) + 424) + 64);
    v71 += *(_QWORD *)(**(_QWORD **)(*(_QWORD *)v73 + 424) + 64);
    v73 += 16;
    v74 -= 2;
  }
  while (v74);
  v68 = v71 + v70;
  if (v72 != (v72 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_105;
LABEL_106:
  v77 = object[0];
  v76 = object[1];
  v288 = v65 - v64;
  rep = v68;
  v290 = 0;
  v291 = 0;
  LODWORD(v292) = 733223404;
  v252 = v68;
  kdebug_trace();
  v78 = v76 - v77;
  v283 = 0;
  v284 = 0;
  v285 = 0;
  v253 = v77;
  v268 = v76 - v77;
  v256 = a5;
  if (v76 == v77)
  {
    v281 = &v283;
    v282 = &v286;
    v278 = 0;
    v279 = 0;
    v280 = 0;
    v262 = a1;
    if (v64 != v65)
      goto LABEL_112;
LABEL_120:
    v275 = 0;
    v276 = 0;
    v277 = 0;
    v272 = 0;
    v273 = 0;
    v274 = 0;
    v83 = v76 - v77;
    if (v64 == v65)
      goto LABEL_266;
    goto LABEL_121;
  }
  if ((unint64_t)v78 >= 0x1745D1745D1745D1)
    sub_20E867F44();
  v79 = v78 >> 3;
  v283 = operator new(88 * (v78 >> 3));
  v284 = (char *)v283;
  v285 = (char *)v283 + 88 * v79;
  v281 = &v283;
  v282 = &v286;
  if (v76 != v77)
  {
    v80 = (_QWORD **)v77;
    do
      sub_20EE5A808((uint64_t)&v281, *v80++);
    while (v80 != (_QWORD **)v76);
  }
  v278 = 0;
  v279 = 0;
  v280 = 0;
  v262 = a1;
  if (v64 == v65)
    goto LABEL_120;
LABEL_112:
  if (v254 >= 0x492492492492491)
    sub_20E867F44();
  object[4] = &v280;
  object[0] = operator new(448 * v66);
  object[1] = object[0];
  object[2] = object[0];
  object[3] = (char *)object[0] + 448 * v66;
  sub_20EE671F8((uint64_t *)&v278, object);
  v82 = object[1];
  for (i = object[2]; i != v82; i = (void *)sub_20E94FADC((uint64_t)i - 448))
    ;
  if (object[0])
    operator delete(object[0]);
  v83 = v268;
  v275 = (void **)operator new(104 * v66);
  v276 = v275;
  v277 = &v275[13 * v66];
  v272 = (void **)operator new(24 * v66);
  v273 = v272;
  v274 = &v272[3 * v66];
  if (v64 != v65)
  {
LABEL_121:
    v264 = v65;
    for (j = v64; j != v65; ++j)
    {
      sub_20EE5A808((uint64_t)&v281, (_QWORD *)*j);
      v85 = (_QWORD *)*j;
      v297.tv_sec = 0;
      v297.tv_nsec = 0;
      v298 = 0;
      sub_20EB063DC((uint64_t)object, v85, &v297.tv_sec);
      if (v297.tv_sec)
      {
        v297.tv_nsec = v297.tv_sec;
        operator delete((void *)v297.tv_sec);
      }
      if (v287)
        sub_20F448AAC(v286, (uint64_t)object);
      v86 = (char *)v279;
      if (v279 < v280)
      {
        v279[2] = object[2];
        v87 = object[3];
        *((void **)v86 + 3) = object[3];
        v88 = v86 + 24;
        v89 = object[4];
        *((void **)v86 + 4) = object[4];
        if (v89)
        {
          v87[2] = v88;
          object[2] = &object[3];
          object[3] = 0;
          object[4] = 0;
        }
        else
        {
          *((_QWORD *)v86 + 2) = v88;
        }
        *((_QWORD *)v86 + 7) = 0;
        *((_QWORD *)v86 + 8) = 0;
        *((_QWORD *)v86 + 5) = 0;
        *((_QWORD *)v86 + 6) = 0;
        *(_OWORD *)(v86 + 40) = *(_OWORD *)&object[5];
        *((void **)v86 + 7) = object[7];
        memset(&object[5], 0, 24);
        *((_QWORD *)v86 + 9) = 0;
        *((_QWORD *)v86 + 10) = 0;
        *((_OWORD *)v86 + 4) = v300;
        v300 = 0uLL;
        *((_QWORD *)v86 + 10) = *(_QWORD *)v301;
        *((_QWORD *)v86 + 11) = 0;
        *(_QWORD *)v301 = 0;
        *((_QWORD *)v86 + 12) = 0;
        *((_QWORD *)v86 + 13) = 0;
        *(_OWORD *)(v86 + 88) = *(_OWORD *)&v301[8];
        *((_QWORD *)v86 + 13) = v302;
        *(_QWORD *)&v301[8] = 0;
        *(_QWORD *)&v301[16] = 0;
        v302 = 0;
        v86[112] = (char)v303;
        *((_QWORD *)v86 + 15) = v304;
        v95 = v305;
        *((_QWORD *)v86 + 16) = v305;
        v96 = v86 + 128;
        v97 = v306;
        *((_QWORD *)v86 + 17) = v306;
        if (v97)
        {
          *(_QWORD *)(v95 + 16) = v96;
          v304 = &v305;
          v305 = 0;
          v306 = 0;
        }
        else
        {
          *((_QWORD *)v86 + 15) = v96;
        }
        *((_QWORD *)v86 + 20) = 0;
        *((_QWORD *)v86 + 21) = 0;
        *((_QWORD *)v86 + 18) = 0;
        *((_QWORD *)v86 + 19) = 0;
        *((_OWORD *)v86 + 9) = v307;
        *((_QWORD *)v86 + 20) = v308;
        v307 = 0uLL;
        v308 = 0;
        *((_QWORD *)v86 + 22) = 0;
        *((_QWORD *)v86 + 23) = 0;
        *(_OWORD *)(v86 + 168) = v309;
        *((_QWORD *)v86 + 23) = v310;
        v309 = 0uLL;
        v310 = 0;
        *((_QWORD *)v86 + 24) = v311;
        v98 = v312;
        *((_QWORD *)v86 + 25) = v312;
        v99 = v86 + 200;
        v100 = v313;
        *((_QWORD *)v86 + 26) = v313;
        if (v100)
        {
          *(_QWORD *)(v98 + 16) = v99;
          v311 = &v312;
          v312 = 0;
          v313 = 0;
        }
        else
        {
          *((_QWORD *)v86 + 24) = v99;
        }
        *((_QWORD *)v86 + 27) = v314;
        v101 = v315;
        *((_QWORD *)v86 + 28) = v315;
        v102 = v86 + 224;
        v103 = v316;
        *((_QWORD *)v86 + 29) = v316;
        if (v103)
        {
          *(_QWORD *)(v101 + 16) = v102;
          v314 = &v315;
          v315 = 0;
          v316 = 0;
        }
        else
        {
          *((_QWORD *)v86 + 27) = v102;
        }
        *((_QWORD *)v86 + 30) = v317;
        *((_QWORD *)v86 + 31) = 0;
        *((_QWORD *)v86 + 33) = 0;
        *((_QWORD *)v86 + 34) = 0;
        *((_QWORD *)v86 + 32) = 0;
        *(_OWORD *)(v86 + 248) = v318;
        *((_QWORD *)v86 + 33) = v319;
        v318 = 0uLL;
        v319 = 0;
        *((_QWORD *)v86 + 35) = 0;
        *((_QWORD *)v86 + 36) = 0;
        *((_OWORD *)v86 + 17) = v320;
        *((_QWORD *)v86 + 36) = v321;
        v320 = 0uLL;
        v321 = 0;
        v104 = v322;
        v105 = v324;
        *(_OWORD *)(v86 + 312) = v323;
        *(_OWORD *)(v86 + 328) = v105;
        *(_OWORD *)(v86 + 296) = v104;
        *((_QWORD *)v86 + 43) = 0;
        *((_QWORD *)v86 + 44) = 0;
        *((_QWORD *)v86 + 45) = 0;
        *(_OWORD *)(v86 + 344) = v325;
        *((_QWORD *)v86 + 45) = v326;
        v325 = 0uLL;
        v326 = 0;
        *((_QWORD *)v86 + 46) = v327;
        v106 = v86 + 376;
        v107 = v328;
        *((_QWORD *)v86 + 47) = v328;
        v108 = v329;
        *((_QWORD *)v86 + 48) = v329;
        if (v108)
        {
          *(_QWORD *)(v107 + 16) = v106;
          v327 = &v328;
          v328 = 0;
          v329 = 0;
        }
        else
        {
          *((_QWORD *)v86 + 46) = v106;
        }
        v109 = v330;
        v110 = v331;
        v111 = v332;
        *((_DWORD *)v86 + 110) = v333;
        *(_OWORD *)(v86 + 408) = v110;
        *(_OWORD *)(v86 + 424) = v111;
        *(_OWORD *)(v86 + 392) = v109;
        v112 = (void **)(v86 + 448);
        goto LABEL_183;
      }
      v90 = (char *)v278;
      v91 = 0x6DB6DB6DB6DB6DB7 * (((char *)v279 - (_BYTE *)v278) >> 6);
      v92 = v91 + 1;
      if ((unint64_t)(v91 + 1) > 0x92492492492492)
        sub_20E867F44();
      if (0xDB6DB6DB6DB6DB6ELL * (((char *)v280 - (_BYTE *)v278) >> 6) > v92)
        v92 = 0xDB6DB6DB6DB6DB6ELL * (((char *)v280 - (_BYTE *)v278) >> 6);
      if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((char *)v280 - (_BYTE *)v278) >> 6)) >= 0x49249249249249)
        v93 = 0x92492492492492;
      else
        v93 = v92;
      if (v93)
      {
        if (v93 > 0x92492492492492)
          sub_20E877A38();
        v94 = (char *)operator new(448 * v93);
      }
      else
      {
        v94 = 0;
      }
      v113 = (void **)&v94[448 * v91];
      v114 = object[3];
      v113[2] = object[2];
      v113[3] = v114;
      v115 = (char *)(v113 + 3);
      v116 = object[4];
      v113[4] = object[4];
      if (v116)
      {
        v114[2] = v115;
        object[2] = &object[3];
        object[3] = 0;
        object[4] = 0;
      }
      else
      {
        v113[2] = v115;
      }
      v117 = &v94[448 * v91];
      *(_OWORD *)(v117 + 40) = *(_OWORD *)&object[5];
      v118 = *(_QWORD *)v301;
      *((void **)v117 + 7) = object[7];
      memset(&object[5], 0, 24);
      *((_OWORD *)v117 + 4) = v300;
      *((_QWORD *)v117 + 10) = v118;
      *(_QWORD *)v301 = 0;
      v300 = 0uLL;
      *((_QWORD *)v117 + 12) = 0;
      *((_QWORD *)v117 + 13) = 0;
      *(_OWORD *)(v117 + 88) = *(_OWORD *)&v301[8];
      *((_QWORD *)v117 + 13) = v302;
      *(_QWORD *)&v301[8] = 0;
      *(_QWORD *)&v301[16] = 0;
      v302 = 0;
      v117[112] = (char)v303;
      v119 = v305;
      *((_QWORD *)v117 + 15) = v304;
      v120 = (char **)(v117 + 120);
      v121 = v306;
      *((_QWORD *)v117 + 16) = v119;
      *((_QWORD *)v117 + 17) = v121;
      v122 = v117 + 128;
      if (v121)
      {
        *(_QWORD *)(v119 + 16) = v122;
        v304 = &v305;
        v305 = 0;
        v306 = 0;
      }
      else
      {
        *v120 = v122;
      }
      v123 = &v94[448 * v91];
      *((_OWORD *)v123 + 9) = v307;
      v124 = v310;
      *((_QWORD *)v123 + 20) = v308;
      v308 = 0;
      v307 = 0uLL;
      *(_OWORD *)(v123 + 168) = v309;
      *((_QWORD *)v123 + 23) = v124;
      v310 = 0;
      v309 = 0uLL;
      v125 = v312;
      *((_QWORD *)v123 + 24) = v311;
      v126 = (char **)(v123 + 192);
      v127 = v313;
      *((_QWORD *)v123 + 25) = v125;
      *((_QWORD *)v123 + 26) = v127;
      v128 = v123 + 200;
      if (v127)
      {
        *(_QWORD *)(v125 + 16) = v128;
        v311 = &v312;
        v312 = 0;
        v313 = 0;
      }
      else
      {
        *v126 = v128;
      }
      v129 = &v94[448 * v91];
      v130 = v315;
      *((_QWORD *)v129 + 28) = v315;
      v131 = v129 + 224;
      *((_QWORD *)v131 - 1) = v314;
      v132 = v316;
      *((_QWORD *)v131 + 1) = v316;
      if (v132)
      {
        *(_QWORD *)(v130 + 16) = v131;
        v314 = &v315;
        v315 = 0;
        v316 = 0;
      }
      else
      {
        *((_QWORD *)v131 - 1) = v131;
      }
      v133 = v319;
      v134 = &v94[448 * v91];
      *((_QWORD *)v134 + 30) = v317;
      *(_OWORD *)(v134 + 248) = v318;
      *((_QWORD *)v134 + 33) = v133;
      v319 = 0;
      v318 = 0uLL;
      *((_OWORD *)v134 + 17) = v320;
      v135 = v326;
      *((_QWORD *)v134 + 36) = v321;
      v321 = 0;
      v320 = 0uLL;
      v136 = v322;
      v137 = v324;
      *(_OWORD *)(v134 + 312) = v323;
      *(_OWORD *)(v134 + 328) = v137;
      *(_OWORD *)(v134 + 296) = v136;
      *((_QWORD *)v134 + 44) = 0;
      *((_QWORD *)v134 + 45) = 0;
      *(_OWORD *)(v134 + 344) = v325;
      v325 = 0uLL;
      v326 = 0;
      v138 = v327;
      v139 = v328;
      *((_QWORD *)v134 + 45) = v135;
      *((_QWORD *)v134 + 46) = v138;
      v140 = v134 + 376;
      v141 = v329;
      *((_QWORD *)v134 + 47) = v139;
      *((_QWORD *)v134 + 48) = v141;
      if (v141)
      {
        *(_QWORD *)(v139 + 16) = v140;
        v327 = &v328;
        v328 = 0;
        v329 = 0;
      }
      else
      {
        *((_QWORD *)v134 + 46) = v140;
      }
      v142 = (void **)&v94[448 * v93];
      v143 = &v94[448 * v91];
      *((_DWORD *)v143 + 110) = v333;
      v144 = v331;
      *(_OWORD *)(v143 + 392) = v330;
      *(_OWORD *)(v143 + 408) = v144;
      *(_OWORD *)(v143 + 424) = v332;
      v112 = v113 + 56;
      if (v86 == v90)
      {
        v278 = v113;
        v279 = v113 + 56;
        v280 = v142;
        v65 = v264;
      }
      else
      {
        v145 = 0;
        do
        {
          v150 = (char *)&v113[v145 / 8];
          v151 = &v86[v145];
          sub_20EAC7338((uint64_t)&v113[v145 / 8 - 55], (uint64_t)&v86[v145 - 440]);
          *((_QWORD *)v150 - 25) = 0;
          *((_QWORD *)v150 - 24) = 0;
          *((_QWORD *)v150 - 23) = 0;
          *(_OWORD *)(v150 - 200) = *(_OWORD *)&v86[v145 - 200];
          *((_QWORD *)v150 - 23) = *(_QWORD *)&v86[v145 - 184];
          *((_QWORD *)v151 - 25) = 0;
          *((_QWORD *)v151 - 24) = 0;
          *((_QWORD *)v151 - 23) = 0;
          *((_QWORD *)v150 - 22) = 0;
          *((_QWORD *)v150 - 21) = 0;
          *((_QWORD *)v150 - 20) = 0;
          *((_OWORD *)v150 - 11) = *(_OWORD *)&v86[v145 - 176];
          *((_QWORD *)v150 - 20) = *(_QWORD *)&v86[v145 - 160];
          *((_QWORD *)v151 - 22) = 0;
          *((_QWORD *)v151 - 21) = 0;
          *((_QWORD *)v151 - 20) = 0;
          v152 = *(_OWORD *)&v86[v145 - 152];
          v153 = *(_OWORD *)&v86[v145 - 136];
          *(_OWORD *)(v150 - 120) = *(_OWORD *)&v86[v145 - 120];
          *(_OWORD *)(v150 - 136) = v153;
          *(_OWORD *)(v150 - 152) = v152;
          *((_QWORD *)v150 - 12) = 0;
          *((_QWORD *)v150 - 11) = 0;
          *((_QWORD *)v150 - 13) = 0;
          *(_OWORD *)(v150 - 104) = *(_OWORD *)&v86[v145 - 104];
          *((_QWORD *)v150 - 11) = *(_QWORD *)&v86[v145 - 88];
          *((_QWORD *)v151 - 13) = 0;
          *((_QWORD *)v151 - 12) = 0;
          *((_QWORD *)v151 - 11) = 0;
          *((_QWORD *)v150 - 10) = *(_QWORD *)&v86[v145 - 80];
          v154 = &v86[v145 - 72];
          v155 = *(_QWORD *)v154;
          *((_QWORD *)v150 - 9) = *(_QWORD *)v154;
          v156 = (uint64_t)&v113[v145 / 8 - 9];
          v157 = *(_QWORD *)&v86[v145 - 64];
          *((_QWORD *)v150 - 8) = v157;
          if (v157)
          {
            *(_QWORD *)(v155 + 16) = v156;
            *((_QWORD *)v151 - 10) = v154;
            *(_QWORD *)v154 = 0;
            *((_QWORD *)v151 - 8) = 0;
          }
          else
          {
            *((_QWORD *)v150 - 10) = v156;
          }
          v146 = (char *)&v113[v145 / 8];
          v147 = *(_OWORD *)&v86[v145 - 56];
          v148 = *(_OWORD *)&v86[v145 - 40];
          v149 = *(_OWORD *)&v86[v145 - 24];
          *((_DWORD *)v146 - 2) = *(_DWORD *)&v86[v145 - 8];
          *(_OWORD *)(v146 - 24) = v149;
          *(_OWORD *)(v146 - 40) = v148;
          *(_OWORD *)(v146 - 56) = v147;
          v145 -= 448;
        }
        while (&v86[v145] != v90);
        v86 = (char *)v278;
        v158 = (uint64_t)v279;
        v278 = &v113[v145 / 8];
        v279 = v113 + 56;
        v280 = v142;
        if ((char *)v158 == v86)
        {
          v65 = v264;
          if (!v86)
            goto LABEL_183;
LABEL_182:
          operator delete(v86);
          goto LABEL_183;
        }
        v65 = v264;
        do
          v158 = sub_20E94FADC(v158 - 448);
        while ((char *)v158 != v86);
      }
      if (v86)
        goto LABEL_182;
LABEL_183:
      v279 = v112;
      sub_20E94FADC((uint64_t)object);
      sub_20F448E84(*j, v262 + 8840, (uint64_t)&v286, (char **)object);
      v159 = v276;
      if (v276 >= v277)
      {
        v163 = 0x4EC4EC4EC4EC4EC5 * (v276 - v275) + 1;
        if (v163 > 0x276276276276276)
          sub_20E867F44();
        if (0x9D89D89D89D89D8ALL * (v277 - v275) > v163)
          v163 = 0x9D89D89D89D89D8ALL * (v277 - v275);
        if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * (v277 - v275)) >= 0x13B13B13B13B13BLL)
          v164 = 0x276276276276276;
        else
          v164 = v163;
        if (v164)
        {
          if (v164 > 0x276276276276276)
            sub_20E877A38();
          v165 = (char *)operator new(104 * v164);
        }
        else
        {
          v165 = 0;
        }
        v170 = &v165[8 * (v276 - v275)];
        *(_OWORD *)v170 = *(_OWORD *)object;
        v171 = object[3];
        *((void **)v170 + 2) = object[2];
        memset(object, 0, 24);
        *((_QWORD *)v170 + 3) = v171;
        v172 = object[4];
        v173 = object[5];
        *((void **)v170 + 4) = object[4];
        v174 = v170 + 32;
        *((_QWORD *)v170 + 5) = v173;
        if (v173)
        {
          v172[2] = v174;
          object[3] = &object[4];
          object[4] = 0;
          object[5] = 0;
        }
        else
        {
          *((_QWORD *)v170 + 3) = v174;
        }
        v175 = &v165[8 * (v276 - v275)];
        v176 = v300;
        *((_OWORD *)v175 + 3) = *(_OWORD *)&object[6];
        *((_OWORD *)v175 + 4) = v176;
        *((_OWORD *)v175 + 5) = *(_OWORD *)v301;
        *((_DWORD *)v175 + 24) = *(_DWORD *)&v301[16];
        v169 = (void **)(v170 + 104);
        if (v276 == v275)
        {
          v275 = (void **)&v165[8 * (v276 - v275)];
          v277 = (void **)&v165[104 * v164];
        }
        else
        {
          v177 = 0;
          do
          {
            v182 = &v170[v177 * 8];
            v183 = &v276[v177];
            *((_QWORD *)v182 - 13) = 0;
            *((_QWORD *)v182 - 12) = 0;
            *((_QWORD *)v182 - 11) = 0;
            *(_OWORD *)(v182 - 104) = *(_OWORD *)&v276[v177 - 13];
            *((_QWORD *)v182 - 11) = v276[v177 - 11];
            *(v183 - 13) = 0;
            *(v183 - 12) = 0;
            *(v183 - 11) = 0;
            *((_QWORD *)v182 - 10) = v276[v177 - 10];
            v184 = &v276[v177 - 9];
            v185 = *v184;
            *(_QWORD *)&v170[v177 * 8 - 72] = *v184;
            v186 = (uint64_t)&v170[v177 * 8 - 72];
            v187 = v276[v177 - 8];
            *((_QWORD *)v182 - 8) = v187;
            if (v187)
            {
              v185[2] = v186;
              *(v183 - 10) = v184;
              *v184 = 0;
              v276[v177 - 8] = 0;
            }
            else
            {
              *((_QWORD *)v182 - 10) = v186;
            }
            v178 = &v170[v177 * 8];
            v179 = *(_OWORD *)&v276[v177 - 7];
            v180 = *(_OWORD *)&v276[v177 - 5];
            v181 = *(_OWORD *)&v276[v177 - 3];
            *((_DWORD *)v178 - 2) = v276[v177 - 1];
            *(_OWORD *)(v178 - 24) = v181;
            *(_OWORD *)(v178 - 40) = v180;
            *(_OWORD *)(v178 - 56) = v179;
            v177 -= 13;
          }
          while (&v276[v177] != v275);
          v159 = v275;
          v188 = v276;
          v275 = (void **)&v170[v177 * 8];
          v277 = (void **)&v165[104 * v164];
          if (v276 != v159)
          {
            v189 = v276;
            do
            {
              sub_20E86872C((uint64_t)(v188 - 10), *(v188 - 9));
              v192 = (char *)*(v189 - 13);
              v189 -= 13;
              v191 = v192;
              if (v192)
              {
                v193 = (char *)*(v188 - 12);
                v190 = v191;
                if (v193 != v191)
                {
                  v194 = (char *)*(v188 - 12);
                  do
                  {
                    v196 = (void *)*((_QWORD *)v194 - 6);
                    v194 -= 48;
                    v195 = v196;
                    if (v196)
                    {
                      *((_QWORD *)v193 - 5) = v195;
                      operator delete(v195);
                    }
                    v193 = v194;
                  }
                  while (v194 != v191);
                  v190 = *v189;
                }
                *(v188 - 12) = v191;
                operator delete(v190);
              }
              v188 = v189;
            }
            while (v189 != v159);
          }
        }
        if (v159)
          operator delete(v159);
      }
      else
      {
        *v276 = 0;
        v276[1] = 0;
        v276[2] = 0;
        *(_OWORD *)v276 = *(_OWORD *)object;
        v276[2] = object[2];
        memset(object, 0, 24);
        v276[3] = object[3];
        v160 = object[4];
        v276[4] = object[4];
        v161 = (char *)(v276 + 4);
        v162 = object[5];
        v276[5] = object[5];
        if (v162)
        {
          v160[2] = v161;
          object[3] = &object[4];
          object[4] = 0;
          object[5] = 0;
        }
        else
        {
          v276[3] = v161;
        }
        v166 = *(_OWORD *)&object[6];
        v167 = v300;
        v168 = *(_OWORD *)v301;
        *((_DWORD *)v276 + 24) = *(_DWORD *)&v301[16];
        *((_OWORD *)v276 + 4) = v167;
        *((_OWORD *)v276 + 5) = v168;
        *((_OWORD *)v276 + 3) = v166;
        v169 = v276 + 13;
      }
      v276 = v169;
      sub_20E86872C((uint64_t)&object[3], (_QWORD *)object[4]);
      v197 = (char *)object[0];
      if (object[0])
      {
        v198 = object[1];
        v199 = object[0];
        if (object[1] != object[0])
        {
          v200 = (char *)object[1];
          do
          {
            v202 = (void *)*((_QWORD *)v200 - 6);
            v200 -= 48;
            v201 = v202;
            if (v202)
            {
              *(v198 - 5) = v201;
              operator delete(v201);
            }
            v198 = v200;
          }
          while (v200 != v197);
          v199 = object[0];
        }
        object[1] = v197;
        operator delete(v199);
      }
      sub_20F4499B4(*j, (unint64_t)&v286, (uint64_t *)object);
      v203 = v273;
      if (v273 < v274)
      {
        *v273 = 0;
        v273[1] = 0;
        v273[2] = 0;
        *(_OWORD *)v273 = *(_OWORD *)object;
        v273[2] = object[2];
        v273 += 3;
        v83 = v268;
      }
      else
      {
        v204 = 0xAAAAAAAAAAAAAAABLL * (v273 - v272) + 1;
        if (v204 > 0xAAAAAAAAAAAAAAALL)
          sub_20E867F44();
        if (0x5555555555555556 * (v274 - v272) > v204)
          v204 = 0x5555555555555556 * (v274 - v272);
        if (0xAAAAAAAAAAAAAAABLL * (v274 - v272) >= 0x555555555555555)
          v205 = 0xAAAAAAAAAAAAAAALL;
        else
          v205 = v204;
        if (v205)
        {
          if (v205 > 0xAAAAAAAAAAAAAAALL)
            sub_20E877A38();
          v206 = (char *)operator new(24 * v205);
        }
        else
        {
          v206 = 0;
        }
        v207 = &v206[8 * (v273 - v272)];
        *(_OWORD *)v207 = *(_OWORD *)object;
        *((void **)v207 + 2) = object[2];
        v208 = &v206[24 * v205];
        memset(object, 0, 24);
        v209 = (void **)(v207 + 24);
        if (v273 == v272)
        {
          v272 = (void **)&v206[8 * (v273 - v272)];
          v274 = (void **)v208;
          v83 = v268;
        }
        else
        {
          do
          {
            v210 = v207;
            *((_QWORD *)v207 - 2) = 0;
            *((_QWORD *)v207 - 1) = 0;
            v211 = *(_OWORD *)(v203 - 3);
            v203 -= 3;
            *(_OWORD *)(v207 - 24) = v211;
            v207 -= 24;
            *((_QWORD *)v210 - 1) = v203[2];
            *v203 = 0;
            v203[1] = 0;
            v203[2] = 0;
          }
          while (v203 != v272);
          v203 = v272;
          v212 = v273;
          v272 = (void **)v207;
          v274 = (void **)v208;
          v83 = v268;
          if (v273 != v203)
          {
            v213 = v273;
            do
            {
              v216 = (char *)*(v213 - 3);
              v213 -= 3;
              v215 = v216;
              if (v216)
              {
                v217 = (char *)*(v212 - 2);
                v214 = v215;
                if (v217 != v215)
                {
                  do
                  {
                    v218 = (void *)*((_QWORD *)v217 - 3);
                    if (v218)
                    {
                      *((_QWORD *)v217 - 2) = v218;
                      operator delete(v218);
                    }
                    v217 -= 48;
                  }
                  while (v217 != v215);
                  v214 = *v213;
                }
                *(v212 - 2) = v215;
                operator delete(v214);
              }
              v212 = v213;
            }
            while (v213 != v203);
          }
        }
        if (v203)
          operator delete(v203);
        v219 = (char *)object[0];
        v273 = v209;
        if (object[0])
        {
          v220 = (char *)object[1];
          v221 = object[0];
          if (object[1] != object[0])
          {
            do
            {
              v222 = (void *)*((_QWORD *)v220 - 3);
              if (v222)
              {
                *((_QWORD *)v220 - 2) = v222;
                operator delete(v222);
              }
              v220 -= 48;
            }
            while (v220 != v219);
            v221 = object[0];
          }
          object[1] = v219;
          operator delete(v221);
        }
      }
    }
  }
LABEL_266:
  v223 = sub_210219C18();
  v224 = v83 >> 3;
  v225 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  v226 = v262;
  if ((v225 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (!atomic_load(&qword_254A5A450))
    goto LABEL_286;
  LODWORD(object[0]) = 67110400;
  HIDWORD(object[0]) = v254 >> 3;
  LOWORD(object[1]) = 1024;
  *(_DWORD *)((char *)&object[1] + 2) = v224;
  HIWORD(object[1]) = 1024;
  LODWORD(object[2]) = v252;
  WORD2(object[2]) = 1024;
  *(_DWORD *)((char *)&object[2] + 6) = a2;
  WORD1(object[3]) = 1024;
  HIDWORD(object[3]) = v258;
  LOWORD(object[4]) = 1024;
  *(_DWORD *)((char *)&object[4] + 2) = v260;
  v228 = (char *)_os_log_send_and_compose_impl();
  v229 = strlen(v228);
  v297.tv_sec = 0;
  pthread_threadid_np(0, (__uint64_t *)&v297);
  v230 = v297.tv_sec;
  timespec_get(&v297, 1);
  sub_210219E20(object, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v223 + 1), (__int128 *)(v223 + 5), "CreateMapSample:NMaps:%u, NUpdates:%u, TS:%u, DB:%d, FA:%d, RP:%d", 0x41uLL, v228, v229, v230, &v297);
  std::mutex::lock(&stru_254A5A410);
  v231 = qword_254A5A458;
  for (k = unk_254A5A460; v231 != k; v231 += 40)
  {
    v233 = *(_QWORD *)(v231 + 32);
    if (!v233)
      sub_20E86D37C();
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v233 + 48))(v233, object);
  }
  std::mutex::unlock(&stru_254A5A410);
  if ((SHIBYTE(v306) & 0x80000000) == 0)
  {
    v226 = v262;
    if ((SHIBYTE(v303) & 0x80000000) == 0)
      goto LABEL_273;
LABEL_276:
    operator delete(*(void **)&v301[16]);
    if (!v301[8])
      goto LABEL_279;
LABEL_277:
    if ((v301[7] & 0x80000000) != 0)
      operator delete((void *)v300);
    goto LABEL_279;
  }
  operator delete(v304);
  v226 = v262;
  if (SHIBYTE(v303) < 0)
    goto LABEL_276;
LABEL_273:
  if (v301[8])
    goto LABEL_277;
LABEL_279:
  if (LOBYTE(object[7]) && SHIBYTE(object[6]) < 0)
    operator delete(object[4]);
  if (SHIBYTE(object[3]) < 0)
    operator delete(object[1]);
  if (v228)
    free(v228);
LABEL_286:
  if (os_signpost_enabled((os_log_t)*v223))
  {
    LODWORD(object[0]) = 67110400;
    HIDWORD(object[0]) = v254 >> 3;
    LOWORD(object[1]) = 1024;
    *(_DWORD *)((char *)&object[1] + 2) = v224;
    HIWORD(object[1]) = 1024;
    LODWORD(object[2]) = v252;
    WORD2(object[2]) = 1024;
    *(_DWORD *)((char *)&object[2] + 6) = a2;
    WORD1(object[3]) = 1024;
    HIDWORD(object[3]) = v258;
    LOWORD(object[4]) = 1024;
    *(_DWORD *)((char *)&object[4] + 2) = v260;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  v234 = v283;
  object[0] = v283;
  object[1] = v284;
  v235 = v285;
  v284 = 0;
  v285 = 0;
  v283 = 0;
  object[2] = v235;
  object[3] = v278;
  object[4] = v279;
  object[5] = v280;
  v279 = 0;
  v280 = 0;
  object[6] = v275;
  object[7] = v276;
  v278 = 0;
  *(_QWORD *)&v300 = v277;
  *((_QWORD *)&v300 + 1) = v272;
  *(_QWORD *)v301 = v273;
  *(_QWORD *)&v301[8] = v274;
  v301[16] = 0;
  v303 = 0;
  v302 = 0;
  LOBYTE(v305) = 0;
  v304 = 0;
  v236 = *(_QWORD *)(v226 + 11472);
  v297.tv_nsec = 0;
  v298 = 0;
  v297.tv_sec = 0;
  v237 = *(_BYTE **)(v236 + 2288);
  v238 = *(_BYTE **)(v236 + 2296);
  v239 = v238 - v237;
  v269 = v235;
  v271 = object[1];
  v266 = object[5];
  v267 = object[3];
  v265 = object[4];
  if (v238 == v237)
  {
    v241 = 0;
    v240 = 0;
  }
  else
  {
    if (v239 < 0)
      sub_20E92CED8();
    v240 = (char *)operator new(v238 - v237);
    v241 = &v240[8 * (v239 >> 3)];
    memcpy(v240, v237, v239);
  }
  *(_QWORD *)(v236 + 2296) = v237;
  v302 = v240;
  v303 = v241;
  v304 = v241;
  v242 = operator new(0xA0uLL);
  v242[3] = v234;
  v242[1] = 0;
  v242[2] = 0;
  *v242 = &off_24C9B3930;
  v242[4] = v271;
  v242[5] = v269;
  memset(object, 0, 24);
  v242[6] = v267;
  v242[7] = v265;
  memset(&object[3], 0, 24);
  v242[8] = v266;
  v242[9] = v275;
  v242[10] = v276;
  v242[11] = v277;
  object[6] = 0;
  object[7] = 0;
  *(_QWORD *)&v300 = 0;
  v242[12] = v272;
  v242[13] = v273;
  v242[14] = v274;
  *(_QWORD *)v301 = 0;
  *(_QWORD *)&v301[8] = 0;
  *((_QWORD *)&v300 + 1) = 0;
  *((_BYTE *)v242 + 120) = 0;
  v242[16] = v240;
  v242[17] = v241;
  v242[18] = v241;
  v303 = 0;
  v304 = 0;
  v302 = 0;
  *((_BYTE *)v242 + 152) = 0;
  *v256 = v242 + 3;
  v256[1] = v242;
  sub_20E995400(object);
  v243 = (void **)v278;
  if (v278)
  {
    v244 = (uint64_t)v279;
    v245 = v278;
    if (v279 != v278)
    {
      do
        v244 = sub_20E94FADC(v244 - 448);
      while ((void **)v244 != v243);
      v245 = v278;
    }
    v279 = v243;
    operator delete(v245);
  }
  v246 = (char *)v283;
  if (v283)
  {
    v247 = v284;
    v248 = v283;
    if (v284 != v283)
    {
      do
      {
        v249 = (void *)*((_QWORD *)v247 - 4);
        if (v249)
        {
          *((_QWORD *)v247 - 3) = v249;
          operator delete(v249);
        }
        sub_20E866B68((uint64_t)(v247 - 56), *((_QWORD *)v247 - 6));
        v250 = (void *)*((_QWORD *)v247 - 10);
        if (v250)
        {
          *((_QWORD *)v247 - 9) = v250;
          operator delete(v250);
        }
        v247 -= 88;
      }
      while (v247 != v246);
      v248 = v283;
    }
    v284 = v246;
    operator delete(v248);
  }
  kdebug_trace();
  if (v253)
    operator delete(v253);
  if (v251)
    operator delete(v251);
}

void sub_20EE5A564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;

  if (LOBYTE(STACK[0x208]))
  {
    if (SLOBYTE(STACK[0x207]) < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a58);
  _Unwind_Resume(a1);
}

void sub_20EE5A5A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void **a42,uint64_t a43,uint64_t a44,void **a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *object;
  void *v71;

  sub_20E96E218((uint64_t)&object);
  if (v71)
    free(v71);
  sub_20E994690(&a42);
  sub_20E994740(&a45);
  sub_20E994800(&a48);
  sub_20E994858(&a53);
  sub_20E8E69C4((uint64_t)&a58);
  if (__p)
    operator delete(__p);
  if (!a14)
    _Unwind_Resume(a1);
  operator delete(a14);
  _Unwind_Resume(a1);
}

void sub_20EE5A808(uint64_t a1, _QWORD *a2)
{
  unint64_t *v2;
  uint64_t v3;
  __int128 v4;
  unint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  __int128 *v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  int v22;
  size_t v24;
  int v25;
  char v27;
  uint64_t **v28;
  void **v29;
  unint64_t v30;
  unint64_t v31;
  size_t v32;
  int v33;
  size_t v35;
  int v36;
  char v38;
  uint64_t **v39;
  void **v40;
  unint64_t v41;
  _BYTE *v42;
  _BYTE *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  _QWORD *v48;
  char *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t *v61;
  uint64_t v62;
  void ***v63;
  uint64_t v64;
  void **v65;
  _QWORD *v66;
  unint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  __int128 v83;
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  void *v97;
  void *v98;
  void *v99;
  unint64_t *v101;
  uint64_t v103;
  void *__p[2];
  uint64_t *v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  void *v109[2];
  __int128 v110;
  __int128 v111[8];
  __int128 __dst;
  uint64_t *v113;
  _OWORD v114[20];
  __int128 *v115;
  std::string __s2;
  __int128 v117;
  uint64_t *v118;
  _OWORD v119[27];

  __p[1] = 0;
  v105 = 0;
  v107 = 0;
  v108 = 0;
  v3 = a2[20];
  v2 = a2 + 20;
  v106 = &v107;
  v4 = 0uLL;
  *(_OWORD *)v109 = 0u;
  v110 = 0u;
  v103 = v3;
  __p[0] = 0;
  v5 = v2[6];
  v6 = v2[7];
  v101 = v2;
  __dst = 0uLL;
  v113 = 0;
  v7 = v6 - v5;
  if (v6 == v5)
  {
    v15 = 0;
  }
  else
  {
    v8 = 0xCBEEA4E1A08AD8F3 * (v7 >> 3);
    if (v8 >= 0x8AD8F2FBA93869)
      sub_20E92CED8();
    *(_QWORD *)&__dst = operator new(v7);
    *((_QWORD *)&__dst + 1) = __dst;
    v113 = (uint64_t *)(__dst + 472 * v8);
    *(_QWORD *)&v111[0] = &__dst;
    do
    {
      __s2.__r_.__value_.__r.__words[0] = *(_QWORD *)v5;
      LODWORD(__s2.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v5 + 8);
      LODWORD(__s2.__r_.__value_.__r.__words[2]) = *(_DWORD *)(v5 + 16);
      *(_QWORD *)&v117 = *(_QWORD *)(v5 + 24);
      DWORD2(v117) = *(_DWORD *)(v5 + 32);
      LODWORD(v118) = *(_DWORD *)(v5 + 40);
      v9 = *(_OWORD *)(v5 + 160);
      v11 = *(_OWORD *)(v5 + 112);
      v10 = *(_OWORD *)(v5 + 128);
      v119[6] = *(_OWORD *)(v5 + 144);
      v119[7] = v9;
      v119[4] = v11;
      v119[5] = v10;
      v12 = *(_OWORD *)(v5 + 64);
      v14 = *(_OWORD *)(v5 + 80);
      v13 = *(_OWORD *)(v5 + 96);
      v119[0] = *(_OWORD *)(v5 + 48);
      v119[1] = v12;
      v119[2] = v14;
      v119[3] = v13;
      memcpy(&v119[8], (const void *)(v5 + 176), 0x124uLL);
      sub_20EE66D34((void ***)v111, &__s2);
      v5 += 472;
    }
    while (v5 != v6);
    v4 = __dst;
    v15 = v113;
  }
  *(_OWORD *)__p = v4;
  v105 = v15;
  sub_20FCCBC60(v101, &__s2);
  v16 = sub_20EB07858(a2, (uint64_t)&__s2);
  v17 = v16;
  if ((SHIBYTE(__s2.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v18 = (__int128 *)a2[2];
    if (v16)
      goto LABEL_9;
    goto LABEL_51;
  }
  operator delete(__s2.__r_.__value_.__l.__data_);
  v18 = (__int128 *)a2[2];
  if (!v17)
  {
LABEL_51:
    if (!v18)
      goto LABEL_88;
    while (1)
    {
      *((_BYTE *)&__s2.__r_.__value_.__s + 23) = 4;
      strcpy((char *)&__s2, "sem_");
      v30 = *((unsigned __int8 *)v18 + 39);
      v31 = (v30 & 0x80u) == 0 ? *((unsigned __int8 *)v18 + 39) : *((_QWORD *)v18 + 3);
      if (v31 <= 3)
        break;
      if ((v30 & 0x80) != 0)
      {
        if (*((_QWORD *)v18 + 3) >= 4uLL)
          v35 = 4;
        else
          v35 = *((_QWORD *)v18 + 3);
        v36 = memcmp(*((const void **)v18 + 2), &__s2, v35);
        if (v35 != 4 || v36 != 0)
          break;
      }
      else
      {
        if (v30 >= 4)
          v32 = 4;
        else
          v32 = *((unsigned __int8 *)v18 + 39);
        v33 = memcmp(v18 + 1, &__s2, v32);
        if (v32 != 4 || v33 != 0)
          break;
      }
LABEL_53:
      v18 = *(__int128 **)v18;
      if (!v18)
        goto LABEL_88;
    }
    if (*((_BYTE *)v18 + 320))
    {
      memset(v111, 0, sizeof(v111));
      sub_20EE67070((uint64_t)&__s2, v18 + 1, v101, (__int128 *)((char *)v18 + 40), v111);
      if (SHIBYTE(v118) < 0)
      {
        sub_20E860C04(&__dst, (void *)v117, *((unint64_t *)&v117 + 1));
      }
      else
      {
        __dst = v117;
        v113 = v118;
      }
      *(_QWORD *)&v114[0] = *(_QWORD *)&v119[0];
      *((_QWORD *)&v114[0] + 1) = __s2.__r_.__value_.__r.__words[0];
      LODWORD(v114[1]) = __s2.__r_.__value_.__r.__words[1];
      DWORD2(v114[1]) = __s2.__r_.__value_.__r.__words[2];
      v114[6] = *(_OWORD *)((char *)&v119[4] + 8);
      v114[7] = *(_OWORD *)((char *)&v119[5] + 8);
      v114[8] = *(_OWORD *)((char *)&v119[6] + 8);
      v114[9] = *(_OWORD *)((char *)&v119[7] + 8);
      v114[2] = *(_OWORD *)((char *)v119 + 8);
      v114[3] = *(_OWORD *)((char *)&v119[1] + 8);
      v114[4] = *(_OWORD *)((char *)&v119[2] + 8);
      v114[5] = *(_OWORD *)((char *)&v119[3] + 8);
      v114[14] = *(_OWORD *)((char *)&v119[12] + 8);
      v114[15] = *(_OWORD *)((char *)&v119[13] + 8);
      v114[16] = *(_OWORD *)((char *)&v119[14] + 8);
      v114[17] = *(_OWORD *)((char *)&v119[15] + 8);
      v114[10] = *(_OWORD *)((char *)&v119[8] + 8);
      v114[11] = *(_OWORD *)((char *)&v119[9] + 8);
      v114[12] = *(_OWORD *)((char *)&v119[10] + 8);
      v114[13] = *(_OWORD *)((char *)&v119[11] + 8);
      v38 = BYTE8(v119[17]);
      if (BYTE8(v119[17]))
      {
        *(_QWORD *)&v114[18] = *((_QWORD *)&v119[16] + 1);
        DWORD2(v114[18]) = v119[17];
        v38 = 1;
      }
      else
      {
        LOBYTE(v114[18]) = 0;
      }
      LOBYTE(v114[19]) = v38;
      v115 = v18 + 1;
      v39 = sub_20EE66E94(&v106, (const void **)v18 + 2, (uint64_t)&unk_2102DB95C, &v115);
      v40 = (void **)(v39 + 7);
      if (*((char *)v39 + 79) < 0)
        operator delete(*v40);
      *(_OWORD *)v40 = __dst;
      v39[9] = v113;
      HIBYTE(v113) = 0;
      LOBYTE(__dst) = 0;
      memcpy(v39 + 10, v114, 0x131uLL);
      if (BYTE8(v119[19]) && SBYTE7(v119[19]) < 0)
        operator delete(*(void **)&v119[18]);
      if (SHIBYTE(v118) < 0)
        operator delete((void *)v117);
    }
    goto LABEL_53;
  }
LABEL_9:
  if (v18)
  {
    while (1)
    {
      *((_BYTE *)&__s2.__r_.__value_.__s + 23) = 4;
      strcpy((char *)&__s2, "sem_");
      v19 = *((unsigned __int8 *)v18 + 39);
      v20 = (v19 & 0x80u) == 0 ? *((unsigned __int8 *)v18 + 39) : *((_QWORD *)v18 + 3);
      if (v20 <= 3)
        break;
      if ((v19 & 0x80) != 0)
      {
        if (*((_QWORD *)v18 + 3) >= 4uLL)
          v24 = 4;
        else
          v24 = *((_QWORD *)v18 + 3);
        v25 = memcmp(*((const void **)v18 + 2), &__s2, v24);
        if (v24 != 4 || v25 != 0)
          break;
      }
      else
      {
        if (v19 >= 4)
          v21 = 4;
        else
          v21 = *((unsigned __int8 *)v18 + 39);
        v22 = memcmp(v18 + 1, &__s2, v21);
        if (v21 != 4 || v22 != 0)
          break;
      }
LABEL_11:
      v18 = *(__int128 **)v18;
      if (!v18)
        goto LABEL_88;
    }
    if (*((_BYTE *)v18 + 320))
    {
      sub_20FCCC180(a2, v101, v18 + 1, (uint64_t)&__s2);
      if (!LOBYTE(v119[20]))
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MappingTypes/include/VIO/MappingTypes/MapUpdateSample.hpp", 58, (uint64_t)"opt_obj_cm", 10, (uint64_t)"Fail to create the object_anchor_cm using origin anchor. It should always succeed", 81, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        if (!LOBYTE(v119[20]))
          sub_20E866B34();
      }
      if (SHIBYTE(v118) < 0)
      {
        sub_20E860C04(&__dst, (void *)v117, *((unint64_t *)&v117 + 1));
      }
      else
      {
        __dst = v117;
        v113 = v118;
      }
      *(_QWORD *)&v114[0] = *(_QWORD *)&v119[0];
      *((_QWORD *)&v114[0] + 1) = __s2.__r_.__value_.__r.__words[0];
      LODWORD(v114[1]) = __s2.__r_.__value_.__r.__words[1];
      DWORD2(v114[1]) = __s2.__r_.__value_.__r.__words[2];
      v114[6] = *(_OWORD *)((char *)&v119[4] + 8);
      v114[7] = *(_OWORD *)((char *)&v119[5] + 8);
      v114[8] = *(_OWORD *)((char *)&v119[6] + 8);
      v114[9] = *(_OWORD *)((char *)&v119[7] + 8);
      v114[2] = *(_OWORD *)((char *)v119 + 8);
      v114[3] = *(_OWORD *)((char *)&v119[1] + 8);
      v114[4] = *(_OWORD *)((char *)&v119[2] + 8);
      v114[5] = *(_OWORD *)((char *)&v119[3] + 8);
      v114[14] = *(_OWORD *)((char *)&v119[12] + 8);
      v114[15] = *(_OWORD *)((char *)&v119[13] + 8);
      v114[16] = *(_OWORD *)((char *)&v119[14] + 8);
      v114[17] = *(_OWORD *)((char *)&v119[15] + 8);
      v114[10] = *(_OWORD *)((char *)&v119[8] + 8);
      v114[11] = *(_OWORD *)((char *)&v119[9] + 8);
      v114[12] = *(_OWORD *)((char *)&v119[10] + 8);
      v114[13] = *(_OWORD *)((char *)&v119[11] + 8);
      v27 = BYTE8(v119[17]);
      if (BYTE8(v119[17]))
      {
        *(_QWORD *)&v114[18] = *((_QWORD *)&v119[16] + 1);
        DWORD2(v114[18]) = v119[17];
        v27 = 1;
      }
      else
      {
        LOBYTE(v114[18]) = 0;
      }
      LOBYTE(v114[19]) = v27;
      *(_QWORD *)&v111[0] = v18 + 1;
      v28 = sub_20EE66E94(&v106, (const void **)v18 + 2, (uint64_t)&unk_2102DB95C, (__int128 **)v111);
      v29 = (void **)(v28 + 7);
      if (*((char *)v28 + 79) < 0)
        operator delete(*v29);
      *(_OWORD *)v29 = __dst;
      v28[9] = v113;
      memcpy(v28 + 10, v114, 0x131uLL);
      if (LOBYTE(v119[20]))
      {
        if (BYTE8(v119[19]) && SBYTE7(v119[19]) < 0)
          operator delete(*(void **)&v119[18]);
        if (SHIBYTE(v118) < 0)
          operator delete((void *)v117);
      }
    }
    goto LABEL_11;
  }
LABEL_88:
  v41 = a2[48];
  v42 = v109[0];
  if (v41 > (uint64_t)(v110 - (unint64_t)v109[0]) >> 4)
  {
    if (v41 >> 60)
      sub_20E92CED8();
    v43 = v109[1];
    v44 = (char *)operator new(16 * v41);
    v45 = &v44[(v43 - v42) & 0xFFFFFFFFFFFFFFF0];
    v46 = v45;
    if (v43 != v42)
    {
      v47 = &v44[(v43 - v42) & 0xFFFFFFFFFFFFFFF0];
      do
      {
        v46 = v47 - 16;
        *((_OWORD *)v47 - 1) = *((_OWORD *)v43 - 1);
        v43 -= 16;
        v47 -= 16;
      }
      while (v43 != v42);
    }
    v109[0] = v46;
    v109[1] = v45;
    *(_QWORD *)&v110 = &v44[16 * v41];
    if (v42)
      operator delete(v42);
  }
  v48 = (_QWORD *)a2[47];
  if (v48)
  {
    v49 = (char *)v109[1];
    do
    {
      v52 = v48[2];
      v51 = v48[3];
      if ((unint64_t)v49 < (unint64_t)v110)
      {
        *(_QWORD *)v49 = v52;
        *((_QWORD *)v49 + 1) = v51;
        v50 = v49 + 16;
      }
      else
      {
        v53 = (char *)v109[0];
        v54 = (v49 - (char *)v109[0]) >> 4;
        v55 = v54 + 1;
        if ((unint64_t)(v54 + 1) >> 60)
          sub_20E92CED8();
        v56 = v110 - (unint64_t)v109[0];
        if ((uint64_t)(v110 - (unint64_t)v109[0]) >> 3 > v55)
          v55 = v56 >> 3;
        if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF0)
          v57 = 0xFFFFFFFFFFFFFFFLL;
        else
          v57 = v55;
        if (v57)
        {
          if (v57 >> 60)
            sub_20E877A38();
          v58 = (char *)operator new(16 * v57);
          v59 = &v58[16 * v54];
          *(_QWORD *)v59 = v52;
          *((_QWORD *)v59 + 1) = v51;
          v60 = v59;
          if (v49 != v53)
          {
            do
            {
LABEL_111:
              *((_OWORD *)v60 - 1) = *((_OWORD *)v49 - 1);
              v60 -= 16;
              v49 -= 16;
            }
            while (v49 != v53);
            v49 = (char *)v109[0];
            v50 = v59 + 16;
            v109[0] = v60;
            v109[1] = v59 + 16;
            *(_QWORD *)&v110 = &v58[16 * v57];
            if (!v49)
              goto LABEL_98;
LABEL_115:
            operator delete(v49);
            goto LABEL_98;
          }
        }
        else
        {
          v58 = 0;
          v59 = (char *)(16 * v54);
          *(_QWORD *)v59 = v52;
          *((_QWORD *)v59 + 1) = v51;
          v60 = (char *)(16 * v54);
          if (v49 != v53)
            goto LABEL_111;
        }
        v50 = v59 + 16;
        v109[0] = v60;
        v109[1] = v59 + 16;
        *(_QWORD *)&v110 = &v58[16 * v57];
        if (v49)
          goto LABEL_115;
      }
LABEL_98:
      v109[1] = v50;
      v48 = (_QWORD *)*v48;
      v49 = (char *)v50;
    }
    while (v48);
  }
  v61 = (uint64_t *)a2[53];
  if (v61)
  {
    v62 = *v61;
    if (v62)
    {
      *((_QWORD *)&v110 + 1) = *(_QWORD *)(v62 + 64);
      v63 = (void ***)a1;
      v64 = *(_QWORD *)(a1 + 8);
      if (!*(_BYTE *)(v64 + 8))
        goto LABEL_123;
LABEL_122:
      sub_20F45FFEC(*(uint64_t **)v64, (uint64_t)&v103);
      goto LABEL_123;
    }
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MappingTypes/include/VIO/MappingTypes/MapUpdateSample.hpp", 85, (uint64_t)"map.viodatabase() && map.viodatabase()->state_set()", 51, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  *((_QWORD *)&v110 + 1) = *(_QWORD *)(*(_QWORD *)a2[53] + 64);
  v63 = (void ***)a1;
  v64 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v64 + 8))
    goto LABEL_122;
LABEL_123:
  v65 = *v63;
  v66 = v65[1];
  v67 = (unint64_t)v65[2];
  if ((unint64_t)v66 >= v67)
  {
    v71 = 0x2E8BA2E8BA2E8BA3 * (((char *)v66 - (_BYTE *)*v65) >> 3);
    v72 = v71 + 1;
    if ((unint64_t)(v71 + 1) > 0x2E8BA2E8BA2E8BALL)
      sub_20E867F44();
    v73 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v67 - (_QWORD)*v65) >> 3);
    if (2 * v73 > v72)
      v72 = 2 * v73;
    if (v73 >= 0x1745D1745D1745DLL)
      v74 = 0x2E8BA2E8BA2E8BALL;
    else
      v74 = v72;
    if (v74)
    {
      if (v74 > 0x2E8BA2E8BA2E8BALL)
        sub_20E877A38();
      v75 = (char *)operator new(88 * v74);
    }
    else
    {
      v75 = 0;
    }
    v76 = &v75[88 * v71];
    *(_QWORD *)v76 = v103;
    *(_OWORD *)(v76 + 8) = *(_OWORD *)__p;
    v77 = v106;
    *((_QWORD *)v76 + 3) = v105;
    __p[1] = 0;
    v105 = 0;
    __p[0] = 0;
    *((_QWORD *)v76 + 4) = v77;
    v78 = v107;
    v79 = v108;
    *((_QWORD *)v76 + 5) = v107;
    v80 = v76 + 40;
    *((_QWORD *)v76 + 6) = v79;
    if (v79)
    {
      *(_QWORD *)(v78 + 16) = v80;
      v106 = &v107;
      v107 = 0;
      v108 = 0;
    }
    else
    {
      *((_QWORD *)v76 + 4) = v80;
    }
    v81 = &v75[88 * v74];
    v82 = &v75[88 * v71];
    *(_OWORD *)(v82 + 56) = *(_OWORD *)v109;
    v83 = v110;
    v109[1] = 0;
    *(_QWORD *)&v110 = 0;
    v109[0] = 0;
    *(_OWORD *)(v82 + 72) = v83;
    v84 = v76 + 88;
    v85 = (char *)*v65;
    v86 = (char *)v65[1];
    if (v86 == *v65)
    {
      *v65 = v76;
      v65[1] = v84;
      v65[2] = v81;
    }
    else
    {
      v87 = 0;
      do
      {
        v90 = &v76[v87];
        v91 = &v86[v87];
        *((_QWORD *)v90 - 11) = *(_QWORD *)&v86[v87 - 88];
        *((_QWORD *)v90 - 10) = 0;
        *((_QWORD *)v90 - 9) = 0;
        *((_QWORD *)v90 - 8) = 0;
        *((_OWORD *)v90 - 5) = *(_OWORD *)&v86[v87 - 80];
        *((_QWORD *)v90 - 8) = *(_QWORD *)&v86[v87 - 64];
        *((_QWORD *)v91 - 10) = 0;
        *((_QWORD *)v91 - 9) = 0;
        *((_QWORD *)v91 - 8) = 0;
        *((_QWORD *)v90 - 7) = *(_QWORD *)&v86[v87 - 56];
        v92 = &v86[v87 - 48];
        v93 = *(_QWORD *)v92;
        *(_QWORD *)&v76[v87 - 48] = *(_QWORD *)v92;
        v94 = (uint64_t)&v76[v87 - 48];
        v95 = *(_QWORD *)&v86[v87 - 40];
        *((_QWORD *)v90 - 5) = v95;
        if (v95)
        {
          *(_QWORD *)(v93 + 16) = v94;
          *((_QWORD *)v91 - 7) = v92;
          *(_QWORD *)v92 = 0;
          *(_QWORD *)&v86[v87 - 40] = 0;
        }
        else
        {
          *((_QWORD *)v90 - 7) = v94;
        }
        v88 = &v76[v87];
        v89 = &v86[v87];
        *((_QWORD *)v88 - 4) = 0;
        *((_QWORD *)v88 - 3) = 0;
        *((_QWORD *)v88 - 2) = 0;
        *((_OWORD *)v88 - 2) = *(_OWORD *)&v86[v87 - 32];
        *((_QWORD *)v88 - 2) = *(_QWORD *)&v86[v87 - 16];
        *((_QWORD *)v89 - 4) = 0;
        *((_QWORD *)v89 - 3) = 0;
        *((_QWORD *)v89 - 2) = 0;
        *((_QWORD *)v88 - 1) = *(_QWORD *)&v86[v87 - 8];
        v87 -= 88;
      }
      while (&v86[v87] != v85);
      v86 = (char *)*v65;
      v96 = (char *)v65[1];
      *v65 = &v76[v87];
      v65[1] = v84;
      v65[2] = v81;
      while (v96 != v86)
      {
        v97 = (void *)*((_QWORD *)v96 - 4);
        if (v97)
        {
          *((_QWORD *)v96 - 3) = v97;
          operator delete(v97);
        }
        sub_20E866B68((uint64_t)(v96 - 56), *((_QWORD *)v96 - 6));
        v98 = (void *)*((_QWORD *)v96 - 10);
        if (v98)
        {
          *((_QWORD *)v96 - 9) = v98;
          operator delete(v98);
        }
        v96 -= 88;
      }
    }
    if (v86)
      operator delete(v86);
    v99 = v109[0];
    v65[1] = v84;
    if (v99)
    {
      v109[1] = v99;
      operator delete(v99);
    }
  }
  else
  {
    *v66 = v103;
    v66[1] = 0;
    v66[2] = 0;
    v66[3] = 0;
    *(_OWORD *)(v66 + 1) = *(_OWORD *)__p;
    v66[3] = v105;
    __p[0] = 0;
    __p[1] = 0;
    v105 = 0;
    v66[4] = v106;
    v68 = v107;
    v66[5] = v107;
    v69 = v66 + 5;
    v70 = v108;
    v66[6] = v108;
    if (v70)
    {
      *(_QWORD *)(v68 + 16) = v69;
      v106 = &v107;
      v107 = 0;
      v108 = 0;
    }
    else
    {
      v66[4] = v69;
    }
    v66[7] = 0;
    v66[8] = 0;
    v66[9] = 0;
    *(_OWORD *)(v66 + 7) = *(_OWORD *)v109;
    v66[9] = v110;
    v109[0] = 0;
    v109[1] = 0;
    *(_QWORD *)&v110 = 0;
    v66[10] = *((_QWORD *)&v110 + 1);
    v65[1] = v66 + 11;
  }
  sub_20E866B68((uint64_t)&v106, v107);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_20EE5B3F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v24;

  if (SLOBYTE(STACK[0x28F]) < 0)
    operator delete((void *)STACK[0x278]);
  if (a23)
  {
    operator delete(a23);
    sub_20E866B68(a14, a21);
    v24 = a17;
    if (!a17)
LABEL_5:
      _Unwind_Resume(a1);
  }
  else
  {
    sub_20E866B68(a14, a21);
    v24 = a17;
    if (!a17)
      goto LABEL_5;
  }
  operator delete(v24);
  _Unwind_Resume(a1);
}

char **sub_20EE5B500(char **a1)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  void *v6;
  void *v7;

  sub_20E86872C((uint64_t)(a1 + 3), a1[4]);
  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = a1[1];
      do
      {
        v7 = (void *)*((_QWORD *)v5 - 6);
        v5 -= 48;
        v6 = v7;
        if (v7)
        {
          *((_QWORD *)v3 - 5) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_20EE5B580(uint64_t a1, uint64_t **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  unint64_t *v26;
  unint64_t v27;
  char *v28;
  _QWORD *v29;
  __int128 v30;
  _QWORD *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t *v47;
  __int128 v48;
  __int128 v49;
  int v50;
  _QWORD v51[3];
  _QWORD *v52;
  uint64_t v53;

  v3 = a1;
  v53 = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 8511;
  if (*(char *)(a1 + 8511) < 0)
  {
    if (!*(_QWORD *)(a1 + 8496))
    {
LABEL_5:
      if (!*(_BYTE *)(a1 + 8552) && !*(_BYTE *)(a1 + 8576))
        goto LABEL_8;
    }
  }
  else if (!*(_BYTE *)(a1 + 8511))
  {
    goto LABEL_5;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/SlamEngine/src/LocalSlamEngine.cpp", 1627, (uint64_t)"config_.mapping_manager_config.viodatabase_msgpack_filename.empty() && !config_.mapping_manager_config.optional_viodatabase_data && !config_.mapping_manager_config.optional_ml_descriptors_data", 192, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_8:
  v48 = 0u;
  v49 = 0u;
  v50 = 733226708;
  kdebug_trace();
  v5 = *a2;
  v6 = a2[1];
  if (*a2 == v6 || !*(_BYTE *)(v4 + 76))
    return kdebug_trace();
  v45 = 0;
  v46 = 0uLL;
  sub_20EA647CC((uint64_t)&v45, ((char *)v6 - (char *)v5) >> 4);
  v7 = operator new();
  v8 = v45;
  *(_QWORD *)v7 = v45;
  v9 = (_QWORD *)v46;
  *(_OWORD *)(v7 + 8) = v46;
  v47 = (uint64_t *)v7;
  v10 = *a2;
  v11 = a2[1];
  v12 = v9;
  if (v10 != v11)
  {
    v44 = v3;
    do
    {
      while (1)
      {
        v13 = *(_QWORD *)(v7 + 16);
        v14 = *v10;
        if ((unint64_t)v12 >= v13)
          break;
        *v12 = v14;
        v15 = v10[1];
        v12[1] = v15;
        if (v15)
        {
          v16 = (unint64_t *)(v15 + 8);
          do
            v17 = __ldxr(v16);
          while (__stxr(v17 + 1, v16));
        }
        v12 += 2;
        *(_QWORD *)(v7 + 8) = v12;
        v10 += 2;
        if (v10 == v11)
          goto LABEL_43;
      }
      v18 = *(_QWORD **)v7;
      v19 = ((uint64_t)v12 - *(_QWORD *)v7) >> 4;
      v20 = v19 + 1;
      if ((unint64_t)(v19 + 1) >> 60)
        sub_20E867F44();
      v21 = v13 - (_QWORD)v18;
      if (v21 >> 3 > v20)
        v20 = v21 >> 3;
      if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0)
        v22 = 0xFFFFFFFFFFFFFFFLL;
      else
        v22 = v20;
      if (v22 >> 60)
        sub_20E877A38();
      v23 = v10[1];
      v24 = (char *)operator new(16 * v22);
      v25 = &v24[16 * v19];
      *(_QWORD *)v25 = v14;
      *((_QWORD *)v25 + 1) = v23;
      if (v23)
      {
        v26 = (unint64_t *)(v23 + 8);
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
        v18 = *(_QWORD **)v7;
        v12 = *(_QWORD **)(v7 + 8);
      }
      v28 = &v24[16 * v22];
      v29 = v25 + 16;
      if (v12 == v18)
      {
        *(_QWORD *)v7 = v25;
        *(_QWORD *)(v7 + 8) = v29;
        *(_QWORD *)(v7 + 16) = v28;
      }
      else
      {
        do
        {
          v30 = *((_OWORD *)v12 - 1);
          v12 -= 2;
          *((_OWORD *)v25 - 1) = v30;
          v25 -= 16;
          *v12 = 0;
          v12[1] = 0;
        }
        while (v12 != v18);
        v18 = *(_QWORD **)v7;
        v31 = *(_QWORD **)(v7 + 8);
        *(_QWORD *)v7 = v25;
        *(_QWORD *)(v7 + 8) = v29;
        *(_QWORD *)(v7 + 16) = v28;
        while (v31 != v18)
        {
          v32 = (std::__shared_weak_count *)*(v31 - 1);
          if (v32)
          {
            p_shared_owners = (unint64_t *)&v32->__shared_owners_;
            do
              v34 = __ldaxr(p_shared_owners);
            while (__stlxr(v34 - 1, p_shared_owners));
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
          }
          v31 -= 2;
        }
      }
      if (v18)
        operator delete(v18);
      v12 = v29;
      *(_QWORD *)(v7 + 8) = v29;
      v10 += 2;
    }
    while (v10 != v11);
LABEL_43:
    v8 = *(_QWORD *)v7;
    v3 = v44;
  }
  if ((_QWORD *)v8 != v12)
  {
    v51[0] = &off_24C9EE2B0;
    v51[1] = v3;
    v52 = v51;
    sub_20EE78E04((uint64_t)v51, v7);
    v35 = v52;
    if (v52 == v51)
    {
      v36 = 4;
      v35 = v51;
    }
    else
    {
      if (!v52)
      {
LABEL_54:
        sub_20EE5BA7C(v3, v47);
        v47 = 0;
        v37 = *(_QWORD *)v7;
        if (*(_QWORD *)v7)
        {
          v38 = *(_QWORD *)(v7 + 8);
          if (v38 == v37)
          {
            v39 = *(void **)v7;
          }
          else
          {
            do
            {
              v40 = *(std::__shared_weak_count **)(v38 - 8);
              if (v40)
              {
                v41 = (unint64_t *)&v40->__shared_owners_;
                do
                  v42 = __ldaxr(v41);
                while (__stlxr(v42 - 1, v41));
                if (!v42)
                {
                  ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
                  std::__shared_weak_count::__release_weak(v40);
                }
              }
              v38 -= 16;
            }
            while (v38 != v37);
            v39 = *(void **)v7;
          }
          *(_QWORD *)(v7 + 8) = v37;
          operator delete(v39);
        }
        MEMORY[0x212BC6398](v7, 0x20C40960023A9);
        return kdebug_trace();
      }
      v36 = 5;
    }
    (*(void (**)(void))(*v35 + 8 * v36))();
    goto LABEL_54;
  }
  v47 = 0;
  if (v12)
  {
    *(_QWORD *)(v7 + 8) = v12;
    operator delete(v12);
  }
  MEMORY[0x212BC6398](v7, 0x20C40960023A9);
  return kdebug_trace();
}

void sub_20EE5B9FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void **v7;
  va_list va;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, void **);
  sub_20EE56630((void ***)va);
  sub_20E8E69C4((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EE5BA7C(uint64_t a1, uint64_t *a2)
{
  BOOL v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v6;
  uint64_t *v7;
  uint64_t v8;

  if (*(_QWORD *)(*(_QWORD *)(a1 + 11472) + 80))
    v2 = a2 == 0;
  else
    v2 = 1;
  if (!v2)
  {
    v3 = *a2;
    v4 = a2[1];
    if (*a2 != v4)
    {
      v6 = (_BYTE *)(a1 + 8836);
      while (*(_QWORD *)v3)
      {
        v7 = *(uint64_t **)(*(_QWORD *)v3 + 424);
        if (v7)
          goto LABEL_13;
LABEL_7:
        sub_20F2FD9F0();
        v3 += 16;
        if (v3 == v4)
        {
          v8 = *(_QWORD *)(a1 + 11472);
          if (*(_BYTE *)(*(_QWORD *)(v8 + 80) + 2749))
            sub_20F2FFF80(v8);
          return;
        }
      }
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/SlamEngine/src/LocalSlamEngine.cpp", 1733, (uint64_t)"loaded_submap", 13, (uint64_t)"Loaded submap must be valid.", 28, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v7 = *(uint64_t **)(*(_QWORD *)v3 + 424);
      if (!v7)
        goto LABEL_7;
LABEL_13:
      if (*v6)
        sub_20EE5BBAC(v7);
      goto LABEL_7;
    }
  }
}

uint64_t sub_20EE5BB9C(uint64_t result, _BYTE *a2)
{
  *(_BYTE *)(*(_QWORD *)(result + 11472) + 2320) = *a2;
  return result;
}

void sub_20EE5BBAC(uint64_t *a1)
{
  uint64_t v1;
  unsigned __int8 *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int32 *v12;
  unint64_t v13;
  __int32 *v14;
  unint64_t v15;
  int8x8_t *v16;
  int8x8_t v17;
  int v18;
  unsigned int v19;
  unint64_t v20;
  uint8x8_t v21;
  unint64_t v22;
  int8x8_t **v23;
  int8x8_t *v24;
  uint64_t v25;
  uint64_t v26;
  int8x8_t v27;
  int8x8_t v28;
  int8x8_t v29;
  unint64_t v30;
  uint8x8_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t **v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unsigned __int8 v39;
  unsigned __int8 *v40;
  uint64_t v41;
  uint64_t i;
  unsigned __int8 v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unsigned int v49;
  unsigned int v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unsigned int v54;
  BOOL v55;
  unsigned int v56;
  _QWORD *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  __int32 *v70;
  __int32 *v71;
  __int32 *v72;
  uint64_t *v73;
  std::__shared_weak_count *v74;
  uint64_t v75;

  v1 = a1[5];
  v68 = a1[6];
  if (v1 != v68)
  {
    v3 = (unsigned __int8 *)&qword_254A6DE78;
    while (1)
    {
      v5 = *(uint64_t **)v1;
      v4 = *(std::__shared_weak_count **)(v1 + 8);
      v73 = *(uint64_t **)v1;
      v74 = v4;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      v9 = v5[9];
      v8 = v5[10];
      v70 = 0;
      v71 = 0;
      v72 = 0;
      v10 = v8 - v9;
      v11 = 0xCCCCCCCCCCCCCCCDLL * (v10 >> 3);
      if (v10)
      {
        if (v11 >> 62)
          sub_20E867F44();
        v70 = (__int32 *)operator new(0x3333333333333334 * (v10 >> 3));
        v71 = v70;
        v72 = &v70[v11];
      }
      sub_20EE6A68C(a1[1], (uint64_t)&v70, v5);
      v12 = v70;
      v13 = v71 - v70;
      if (v13 > v11)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/viodatabase.hpp", 674, (uint64_t)"features_to_keep.size() <= num_features", 39, (uint64_t)"More tracks than features in prune.", 35, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v12 = v70;
        v13 = v71 - v70;
      }
      if (v13 != v11)
      {
        std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
        sub_20EE6A87C((uint64_t)v5, &v70);
        v12 = v70;
        v14 = v71;
        if (0xCCCCCCCCCCCCCCCDLL * ((v5[10] - v5[9]) >> 3) != v71 - v70)
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/viodatabase.hpp", 692, (uint64_t)"new_features.size() == features_to_keep.size()", 46, (uint64_t)"Missing features after prune.", 29, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v12 = v70;
          v14 = v71;
        }
        if (v14 != v12)
          break;
      }
LABEL_115:
      if (v12)
      {
        v71 = v12;
        operator delete(v12);
      }
      v65 = v74;
      if (v74)
      {
        v66 = (unint64_t *)&v74->__shared_owners_;
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
      v1 += 16;
      if (v1 == v68)
        return;
    }
    v15 = 0;
    while (1)
    {
      v16 = (int8x8_t *)a1[1];
      v17 = v16[4];
      if (!*(_QWORD *)&v17)
        goto LABEL_67;
      v18 = *((_DWORD *)v73 + 4);
      v19 = *((_DWORD *)v73 + 2);
      v20 = v19 ^ __ROR4__(v18, 13);
      v21 = (uint8x8_t)vcnt_s8(v17);
      v21.i16[0] = vaddlv_u8(v21);
      if (v21.u32[0] > 1uLL)
      {
        v22 = v20;
        if (*(_QWORD *)&v17 <= v20)
          v22 = v20 % *(_QWORD *)&v17;
      }
      else
      {
        v22 = (v17.i32[0] - 1) & v20;
      }
      v23 = *(int8x8_t ***)(*(_QWORD *)&v16[3] + 8 * v22);
      if (!v23 || (v24 = *v23) == 0)
      {
LABEL_67:
        v33 = 0;
        v69 = 0;
        goto LABEL_68;
      }
      v25 = *v73;
      if (v21.u32[0] < 2uLL)
      {
        v26 = *(_QWORD *)&v17 - 1;
        while (1)
        {
          v28 = v24[1];
          if (*(_QWORD *)&v28 == v20)
          {
            if (v24[4].i32[0] == v18 && *(_QWORD *)&v24[2] == v25 && v24[3].i32[0] == v19)
              goto LABEL_44;
          }
          else if ((*(_QWORD *)&v28 & v26) != v22)
          {
            v33 = 0;
LABEL_48:
            v69 = 0;
            if (v33)
              goto LABEL_76;
LABEL_68:
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/viodatabase.hpp", 696, (uint64_t)"track", 5, (uint64_t)"No track for feature when pruning", 33, (void (*)(void **))sub_21023DDB0);
            v39 = atomic_load(v3);
            if ((v39 & 1) == 0 && __cxa_guard_acquire((__guard *)v3))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release((__guard *)v3);
            }
            v40 = v3;
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v41 = qword_254A6DE40;
              for (i = qword_254A6DE48; v41 != i; v41 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v41)(*(_QWORD *)(v41 + 8), "track", 5, "No track for feature when pruning", 33);
            }
            v3 = v40;
            v43 = atomic_load(v40);
            if ((v43 & 1) == 0 && __cxa_guard_acquire((__guard *)v40))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release((__guard *)v40);
            }
            if (!byte_254A6DE68)
              abort();
            qword_254A6DE58(unk_254A6DE60, "track", 5, "No track for feature when pruning", 33);
            goto LABEL_76;
          }
          v24 = (int8x8_t *)*v24;
          if (!v24)
            goto LABEL_67;
        }
      }
      while (1)
      {
        v27 = v24[1];
        if (*(_QWORD *)&v27 == v20)
          break;
        if (*(_QWORD *)&v27 >= *(_QWORD *)&v17)
          *(_QWORD *)&v27 %= *(_QWORD *)&v17;
        if (*(_QWORD *)&v27 != v22)
          goto LABEL_67;
LABEL_30:
        v24 = (int8x8_t *)*v24;
        if (!v24)
          goto LABEL_67;
      }
      if (v24[4].i32[0] != v18 || *(_QWORD *)&v24[2] != v25 || v24[3].i32[0] != v19)
        goto LABEL_30;
LABEL_44:
      v29 = v24[6];
      if (!*(_QWORD *)&v29)
        goto LABEL_67;
      v30 = v12[v15];
      v31 = (uint8x8_t)vcnt_s8(v29);
      v31.i16[0] = vaddlv_u8(v31);
      if (v31.u32[0] > 1uLL)
      {
        v32 = v12[v15];
        if (*(_QWORD *)&v29 <= v30)
          v32 = v30 % *(_QWORD *)&v29;
      }
      else
      {
        v32 = (v29.i32[0] - 1) & v30;
      }
      v34 = *(uint64_t ***)(*(_QWORD *)&v24[5] + 8 * v32);
      if (!v34)
        goto LABEL_67;
      v35 = *v34;
      if (!v35)
        goto LABEL_67;
      if (v31.u32[0] < 2uLL)
      {
        v36 = *(_QWORD *)&v29 - 1;
        while (1)
        {
          v38 = v35[1];
          if (v38 == v30)
          {
            if (*((_DWORD *)v35 + 4) == (_DWORD)v30)
              goto LABEL_100;
          }
          else if ((v38 & v36) != v32)
          {
            goto LABEL_67;
          }
          v33 = 0;
          v35 = (uint64_t *)*v35;
          if (!v35)
            goto LABEL_48;
        }
      }
      while (2)
      {
        v37 = v35[1];
        if (v37 != v30)
        {
          if (v37 >= *(_QWORD *)&v29)
            v37 %= *(_QWORD *)&v29;
          if (v37 != v32)
            goto LABEL_67;
          goto LABEL_57;
        }
        if (*((_DWORD *)v35 + 4) != (_DWORD)v30)
        {
LABEL_57:
          v33 = 0;
          v35 = (uint64_t *)*v35;
          if (!v35)
            goto LABEL_48;
          continue;
        }
        break;
      }
LABEL_100:
      v33 = (uint64_t *)v35[3];
      v60 = (std::__shared_weak_count *)v35[4];
      if (!v60)
        goto LABEL_48;
      v61 = (unint64_t *)&v60->__shared_owners_;
      do
        v62 = __ldxr(v61);
      while (__stxr(v62 + 1, v61));
      v69 = v60;
      do
        v63 = __ldxr(v61);
      while (__stxr(v63 + 1, v61));
      do
        v64 = __ldaxr(v61);
      while (__stlxr(v64 - 1, v61));
      if (v64)
      {
        if (!v33)
          goto LABEL_68;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
        if (!v33)
          goto LABEL_68;
      }
LABEL_76:
      v44 = v73;
      v45 = v5[9] + 40 * v15;
      v75 = v45;
      v46 = v33[25];
      v47 = v33[26];
      v48 = *v73;
      v49 = *((_DWORD *)v73 + 2);
      v50 = *((_DWORD *)v73 + 4);
      if (v47 != v46)
      {
        v51 = (v47 - v46) >> 5;
        while (1)
        {
          v52 = v51 >> 1;
          v53 = v46 + 32 * (v51 >> 1);
          v54 = *(_DWORD *)(v53 + 16);
          v55 = v54 >= v50;
          if (v54 != v50)
            goto LABEL_84;
          if (*(_QWORD *)v53 >= v48)
            break;
LABEL_78:
          v46 = v53 + 32;
          v52 = v51 + ~v52;
LABEL_79:
          v51 = v52;
          if (!v52)
            goto LABEL_87;
        }
        if (*(_QWORD *)v53 != v48)
          goto LABEL_79;
        v55 = *(_DWORD *)(v53 + 8) >= v49;
LABEL_84:
        if (v55)
          goto LABEL_79;
        goto LABEL_78;
      }
LABEL_87:
      if (v46 != v47 && *(_DWORD *)(v46 + 16) == v50 && *(_QWORD *)v46 == v48 && *(_DWORD *)(v46 + 8) == v49)
      {
        v56 = *(_DWORD *)(*(_QWORD *)(v46 + 24) + 4);
        *(_QWORD *)(v46 + 24) = v45;
        if (v56 == *(_DWORD *)(v45 + 4)
          || (v57 = (_QWORD *)v33[2]) == 0
          || sub_20EE6BF60(v57, v44, v56))
        {
          sub_20EE6BDF0(v33, v44, (uint64_t)&v75);
        }
      }
      if (v69)
      {
        v58 = (unint64_t *)&v69->__shared_owners_;
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
          std::__shared_weak_count::__release_weak(v69);
        }
      }
      ++v15;
      v12 = v70;
      if (v15 >= v71 - v70)
        goto LABEL_115;
    }
  }
}

void sub_20EE5C2CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16)
{
  if (__p)
    operator delete(__p);
  sub_20E86665C((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EE5C31C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_20E9545B0(v2);
    MEMORY[0x212BC6398](v3, 0x10A0C401749CDD1);
  }
  return a1;
}

uint64_t sub_20EE5C360(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
  {
    v3 = sub_20E9545B0(v2);
    MEMORY[0x212BC6398](v3, 0x10A0C401749CDD1);
  }
  return a1;
}

uint64_t sub_20EE5C3A4(uint64_t a1, std::string *a2)
{
  void *__p[4];
  uint64_t v6;
  char v7;
  __int128 v8;
  __int128 v9;
  int v10;

  v8 = 0u;
  v9 = 0u;
  v10 = 733221256;
  kdebug_trace();
  if (!a2
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/SlamEngine/src/LocalSlamEngine.cpp", 1810, (uint64_t)"filename", 8, (uint64_t)"Invalid filename provided", 25, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  LOBYTE(v6) = 0;
  v7 = 0;
  if (!*(_BYTE *)(a1 + 6205))
  {
    v6 = *(_QWORD *)(a1 + 11488) + 40;
    v7 = 1;
  }
  sub_20F3065F0(*(_QWORD *)(a1 + 11472), 1, 0, 1, 1, (char ***)__p);
  sub_20F436C98(a2, (uint64_t **)__p, (uint64_t)&v6, 0);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return kdebug_trace();
}

void sub_20EE5C4C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20E8E69C4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EE5C4D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (__p)
  {
    operator delete(__p);
    sub_20E8E69C4((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_20E8E69C4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE5C514@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::chrono::steady_clock::time_point v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v9;
  size_t v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  const char *v13;
  size_t v14;
  _BYTE *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  void *p_p;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  std::__shared_weak_count_vtbl *v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  _QWORD *v33;
  void *v34;
  int v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  void *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  void *v63;
  void *v64;
  char *v65;
  char *v66;
  _QWORD *v67;
  void *v68;
  char *v69;
  void *v70;
  void *v71;
  _QWORD *v72;
  uint64_t v73;
  int v74;
  unint64_t v75;
  unint64_t v76;
  std::chrono::steady_clock::time_point v77;
  uint64_t v78;
  const char *v79;
  size_t v80;
  unsigned __int8 v81;
  unsigned __int8 v82;
  const char *v83;
  size_t v84;
  _BYTE *v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  NSObject *v89;
  uint64_t v90;
  uint64_t v91;
  size_t v92;
  std::__shared_weak_count_vtbl *v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  const char *v103;
  void *v104;
  int v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  uint64_t *v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  void *v125;
  std::chrono::steady_clock::time_point v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  _QWORD *v131;
  _QWORD *v132;
  const char *v133;
  int v134;
  int v135;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v137;
  void *v138[2];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v139;
  const char **v140;
  const char *v141;
  _QWORD *v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  int v146;
  _QWORD *v147;
  void *v148[4];
  uint64_t *v149;
  char v150;
  _BYTE object[24];
  __int128 v152;
  void *__p;
  size_t v154;
  unint64_t v155;
  char v156;
  __int128 v157;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v158;
  const char **v159;
  _QWORD *v160[2];
  __int128 v161;
  __int128 v162;
  __int128 v163;
  int v164;
  uint64_t v165;

  v165 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  v4.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  sub_20EE582BC(&v147);
  if (*(int *)v147[7] > 3)
    goto LABEL_91;
  v5 = *((unsigned __int8 *)v147 + 72);
  v6 = sub_20E8C31DC((uint64_t)v147, "OSLogSurrogateAppender", 1, 0);
  v7 = v6;
  if (!v5 && v6 == 0)
    goto LABEL_91;
  rep = v4.__d_.__rep_;
  v138[0] = &v147;
  v138[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
  v139 = std::chrono::system_clock::now().__d_.__rep_;
  LODWORD(v140) = 3;
  v141 = "unknown file";
  LODWORD(v142) = 1845;
  *((_QWORD *)&v143 + 1) = 0;
  *(_QWORD *)&v144 = 0;
  *(_QWORD *)&v143 = "unknown function";
  v9 = (const char *)(v147 + 2);
  v131 = v147 + 2;
  if (*((char *)v147 + 39) < 0)
  {
    v9 = (const char *)v147[2];
    v10 = v147[3];
    v132 = v147;
    v12 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v12 & 1) != 0)
      goto LABEL_10;
  }
  else
  {
    v10 = *((unsigned __int8 *)v147 + 39);
    v132 = v147;
    v11 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v11 & 1) != 0)
      goto LABEL_10;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)object);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
    if ((_BYTE)v152 && (object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_10:
  if (byte_254A4A4F8[23] >= 0)
    v13 = byte_254A4A4F8;
  else
    v13 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v14 = byte_254A4A4F8[23];
  else
    v14 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)object = os_log_create(v13, v9);
  v15 = &object[8];
  if (v14 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v134 = v5;
  if (v14 >= 0x17)
  {
    v16 = a2;
    v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v17 = v14 | 7;
    v18 = v17 + 1;
    v15 = operator new(v17 + 1);
    *(_QWORD *)&object[16] = v14;
    *(_QWORD *)&v152 = v18 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v15;
    a2 = v16;
    goto LABEL_23;
  }
  BYTE7(v152) = v14;
  if (v14)
LABEL_23:
    memmove(v15, v13, v14);
  v15[v14] = 0;
  BYTE8(v152) = 1;
  p_p = &__p;
  if (v10 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v10 >= 0x17)
  {
    v21 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v21 = v10 | 7;
    v22 = v21 + 1;
    p_p = operator new(v21 + 1);
    v154 = v10;
    v155 = v22 | 0x8000000000000000;
    __p = p_p;
  }
  else
  {
    HIBYTE(v155) = v10;
    if (!v10)
    {
      LOBYTE(__p) = 0;
      v156 = 1;
      v20 = *(NSObject **)object;
      if ((SHIBYTE(v155) & 0x80000000) == 0)
        goto LABEL_28;
      goto LABEL_34;
    }
  }
  memmove(p_p, v9, v10);
  *((_BYTE *)p_p + v10) = 0;
  v156 = 1;
  v20 = *(NSObject **)object;
  if ((SHIBYTE(v155) & 0x80000000) == 0)
  {
LABEL_28:
    if (!BYTE8(v152))
      goto LABEL_37;
LABEL_35:
    if (SBYTE7(v152) < 0)
      operator delete(*(void **)&object[8]);
    goto LABEL_37;
  }
LABEL_34:
  operator delete(__p);
  if (BYTE8(v152))
    goto LABEL_35;
LABEL_37:
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  if (v7 && *(_QWORD *)(v7 + 24))
  {
    v23 = _os_log_pack_size();
    v24 = (std::__shared_weak_count_vtbl *)operator new(v23, (std::align_val_t)8uLL);
    v25 = (std::__shared_weak_count *)operator new();
    v26 = v25;
    v25->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    v25->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v25->__shared_weak_owners_ = 0;
    v25[1].__vftable = v24;
    *(_QWORD *)object = v24;
    *(_QWORD *)&object[8] = v24;
    *(_QWORD *)&object[16] = v25;
    do
      v28 = __ldxr(p_shared_owners);
    while (__stxr(v28 + 1, p_shared_owners));
    v152 = 0uLL;
    __p = 0;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v26);
    }
    v30 = *(_QWORD *)object;
    *(_WORD *)_os_log_pack_fill() = 0;
    v31 = (char *)operator new();
    v32 = *((unsigned __int8 *)v132 + 39);
    v33 = v131;
    if ((v32 & 0x80u) != 0)
    {
      v33 = (_QWORD *)v132[2];
      v32 = v132[3];
    }
    *(_QWORD *)v31 = v30;
    *(_OWORD *)(v31 + 8) = *(_OWORD *)&object[8];
    *(_QWORD *)&object[8] = 0;
    *(_QWORD *)&object[16] = 0;
    *(_OWORD *)(v31 + 24) = v152;
    v152 = 0uLL;
    *((_QWORD *)v31 + 5) = v33;
    *((_QWORD *)v31 + 6) = v32;
    v31[56] = 1;
    v149 = 0;
    v148[0] = v31;
    (*(void (**)(_QWORD, void **))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), v148);
    v34 = v148[0];
    v148[0] = 0;
    v35 = v134;
    if (v34)
    {
      v36 = (std::__shared_weak_count *)*((_QWORD *)v34 + 4);
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      v39 = (std::__shared_weak_count *)*((_QWORD *)v34 + 2);
      if (v39)
      {
        v40 = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      MEMORY[0x212BC6398](v34, 0x10F0C40B62ED6C6);
      v42 = v149;
      v149 = 0;
      if (v42)
      {
        v43 = (std::__shared_weak_count *)v42[4];
        if (v43)
        {
          v44 = (unint64_t *)&v43->__shared_owners_;
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
        }
        v46 = (std::__shared_weak_count *)v42[2];
        if (v46)
        {
          v47 = (unint64_t *)&v46->__shared_owners_;
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
        MEMORY[0x212BC6398](v42, 0x10F0C40B62ED6C6);
      }
    }
    v49 = (std::__shared_weak_count *)*((_QWORD *)&v152 + 1);
    v4.__d_.__rep_ = rep;
    if (*((_QWORD *)&v152 + 1))
    {
      v50 = (unint64_t *)(*((_QWORD *)&v152 + 1) + 8);
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    v52 = *(std::__shared_weak_count **)&object[16];
    if (*(_QWORD *)&object[16])
    {
      v53 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
  }
  else
  {
    os_log_type_enabled(v20, OS_LOG_TYPE_INFO);
    *(_WORD *)object = 0;
    v55 = (void *)_os_log_send_and_compose_impl();
    v4.__d_.__rep_ = rep;
    v35 = v134;
    if (v55)
      free(v55);
  }
  if (v35)
  {
    sub_20E8C003C((uint64_t)v138, "Serialize");
    sub_20E863570((uint64_t)v138);
  }
  sub_20E863570((uint64_t)v138);
  v56 = (std::__shared_weak_count *)v144;
  if ((_QWORD)v144)
  {
    v57 = (unint64_t *)(v144 + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
LABEL_91:
  LOBYTE(v149) = 0;
  v150 = 0;
  if (!*(_BYTE *)(a1 + 6205))
  {
    v149 = (uint64_t *)(*(_QWORD *)(a1 + 11488) + 40);
    v150 = 1;
  }
  sub_20F3065F0(*(_QWORD *)(a1 + 11472), 1, 1, 1, 1, (char ***)v148);
  sub_20F44B2D0((uint64_t **)v148, 0, (uint64_t *)&v147);
  kdebug_trace();
  v138[0] = 0;
  v138[1] = 0;
  v139 = 0;
  sub_20EB063DC((uint64_t)object, v147, (uint64_t *)v138);
  if (v138[0])
  {
    v138[1] = v138[0];
    operator delete(v138[0]);
  }
  if (v150)
    sub_20F448AAC(v149, (uint64_t)object);
  if (*(_BYTE *)(a1 + 297))
  {
    sub_20F448E84((uint64_t)v147, a1 + 8840, (uint64_t)&v149, (char **)v138);
    v59 = v157;
    if ((_QWORD)v157)
    {
      v60 = *((_QWORD *)&v157 + 1);
      v61 = (void *)v157;
      if (*((_QWORD *)&v157 + 1) != (_QWORD)v157)
      {
        v62 = *((_QWORD *)&v157 + 1);
        do
        {
          v64 = *(void **)(v62 - 48);
          v62 -= 48;
          v63 = v64;
          if (v64)
          {
            *(_QWORD *)(v60 - 40) = v63;
            operator delete(v63);
          }
          v60 = v62;
        }
        while (v62 != v59);
        v61 = (void *)v157;
      }
      *((_QWORD *)&v157 + 1) = v59;
      operator delete(v61);
    }
    v157 = *(_OWORD *)v138;
    v158 = v139;
    v138[1] = 0;
    v139 = 0;
    v138[0] = 0;
    sub_20E86872C((uint64_t)&v159, v160[0]);
    v65 = (char *)v141;
    v159 = v140;
    v160[0] = v141;
    v160[1] = v142;
    if (v142)
    {
      *((_QWORD *)v141 + 2) = v160;
      v140 = &v141;
      v141 = 0;
      v142 = 0;
      v65 = 0;
    }
    else
    {
      v159 = (const char **)v160;
    }
    v161 = v143;
    v162 = v144;
    v163 = v145;
    v164 = v146;
    sub_20E86872C((uint64_t)&v140, v65);
    v66 = (char *)v138[0];
    if (v138[0])
    {
      v67 = v138[1];
      v68 = v138[0];
      if (v138[1] != v138[0])
      {
        v69 = (char *)v138[1];
        do
        {
          v71 = (void *)*((_QWORD *)v69 - 6);
          v69 -= 48;
          v70 = v71;
          if (v71)
          {
            *(v67 - 5) = v70;
            operator delete(v70);
          }
          v67 = v69;
        }
        while (v69 != v66);
        v68 = v138[0];
      }
      v138[1] = v66;
      operator delete(v68);
    }
  }
  HIBYTE(v139) = 13;
  strcpy((char *)v138, "MapDataSample");
  sub_20EE676A4((uint64_t)object, (uint64_t)v138, a2);
  if (SHIBYTE(v139) < 0)
    operator delete(v138[0]);
  kdebug_trace();
  sub_20E94FADC((uint64_t)object);
  v72 = v147;
  v147 = 0;
  if (v72)
  {
    v73 = sub_20E9545B0((uint64_t)v72);
    MEMORY[0x212BC6398](v73, 0x10A0C401749CDD1);
  }
  if (v148[0])
  {
    v148[1] = v148[0];
    operator delete(v148[0]);
  }
  sub_20EE582BC(&v147);
  if (*(int *)v147[7] <= 3)
  {
    v74 = *((unsigned __int8 *)v147 + 72);
    v75 = sub_20E8C31DC((uint64_t)v147, "OSLogSurrogateAppender", 1, 0);
    v76 = v75;
    if (v74 || v75)
    {
      v135 = v74;
      v137 = v4.__d_.__rep_;
      v138[0] = &v147;
      v138[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
      v139 = std::chrono::system_clock::now().__d_.__rep_;
      LODWORD(v140) = 3;
      v141 = "unknown file";
      LODWORD(v142) = 1874;
      *((_QWORD *)&v143 + 1) = 0;
      *(_QWORD *)&v144 = 0;
      *(_QWORD *)&v143 = "unknown function";
      v77.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      v78 = *(_QWORD *)v138[0];
      v79 = (const char *)(*(_QWORD *)v138[0] + 16);
      v133 = v79;
      if (*(char *)(*(_QWORD *)v138[0] + 39) < 0)
      {
        v79 = *(const char **)(v78 + 16);
        v80 = *(_QWORD *)(v78 + 24);
        v82 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v82 & 1) != 0)
          goto LABEL_130;
      }
      else
      {
        v80 = *(unsigned __int8 *)(*(_QWORD *)v138[0] + 39);
        v81 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v81 & 1) != 0)
          goto LABEL_130;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)object);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
        if ((_BYTE)v152 && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
LABEL_130:
      if (byte_254A4A4F8[23] >= 0)
        v83 = byte_254A4A4F8;
      else
        v83 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v84 = byte_254A4A4F8[23];
      else
        v84 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)object = os_log_create(v83, v79);
      v85 = &object[8];
      if (v84 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v84 >= 0x17)
      {
        v86 = (v84 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v84 | 7) != 0x17)
          v86 = v84 | 7;
        v87 = v86 + 1;
        v85 = operator new(v86 + 1);
        *(_QWORD *)&object[16] = v84;
        *(_QWORD *)&v152 = v87 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v85;
      }
      else
      {
        BYTE7(v152) = v84;
        if (!v84)
        {
LABEL_144:
          v85[v84] = 0;
          BYTE8(v152) = 1;
          v88 = &__p;
          if (v80 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v80 >= 0x17)
          {
            v90 = (v80 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v80 | 7) != 0x17)
              v90 = v80 | 7;
            v91 = v90 + 1;
            v88 = operator new(v90 + 1);
            v154 = v80;
            v155 = v91 | 0x8000000000000000;
            __p = v88;
          }
          else
          {
            HIBYTE(v155) = v80;
            if (!v80)
            {
              LOBYTE(__p) = 0;
              v156 = 1;
              v89 = *(NSObject **)object;
              if ((SHIBYTE(v155) & 0x80000000) == 0)
                goto LABEL_148;
              goto LABEL_154;
            }
          }
          memmove(v88, v79, v80);
          *((_BYTE *)v88 + v80) = 0;
          v156 = 1;
          v89 = *(NSObject **)object;
          if ((SHIBYTE(v155) & 0x80000000) == 0)
          {
LABEL_148:
            if (!BYTE8(v152))
              goto LABEL_157;
            goto LABEL_155;
          }
LABEL_154:
          operator delete(__p);
          if (!BYTE8(v152))
          {
LABEL_157:
            if (*(_QWORD *)object)
              os_release(*(void **)object);
            if (v76 && *(_QWORD *)(v76 + 24))
            {
              v92 = _os_log_pack_size();
              v93 = (std::__shared_weak_count_vtbl *)operator new(v92, (std::align_val_t)8uLL);
              v94 = (std::__shared_weak_count *)operator new();
              v95 = v94;
              v94->__shared_owners_ = 0;
              v96 = (unint64_t *)&v94->__shared_owners_;
              v94->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v94->__shared_weak_owners_ = 0;
              v94[1].__vftable = v93;
              *(_QWORD *)object = v93;
              *(_QWORD *)&object[8] = v93;
              *(_QWORD *)&object[16] = v94;
              do
                v97 = __ldxr(v96);
              while (__stxr(v97 + 1, v96));
              v152 = 0uLL;
              __p = 0;
              do
                v98 = __ldaxr(v96);
              while (__stlxr(v98 - 1, v96));
              if (!v98)
              {
                ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                std::__shared_weak_count::__release_weak(v95);
              }
              v99 = *(_QWORD *)object;
              v100 = _os_log_pack_fill();
              *(_DWORD *)v100 = 134217984;
              *(double *)(v100 + 4) = (double)(v77.__d_.__rep_ - v137) / 1000000000.0;
              v101 = (char *)operator new();
              v102 = *(unsigned __int8 *)(v78 + 39);
              v103 = v133;
              if ((v102 & 0x80u) != 0)
              {
                v103 = *(const char **)(v78 + 16);
                v102 = *(_QWORD *)(v78 + 24);
              }
              *(_QWORD *)v101 = v99;
              *(_OWORD *)(v101 + 8) = *(_OWORD *)&object[8];
              *(_QWORD *)&object[8] = 0;
              *(_QWORD *)&object[16] = 0;
              *(_OWORD *)(v101 + 24) = v152;
              v152 = 0uLL;
              *((_QWORD *)v101 + 5) = v103;
              *((_QWORD *)v101 + 6) = v102;
              v101[56] = 1;
              v149 = 0;
              v148[0] = v101;
              (*(void (**)(_QWORD, void **))(**(_QWORD **)(v76 + 24) + 40))(*(_QWORD *)(v76 + 24), v148);
              v104 = v148[0];
              v148[0] = 0;
              v105 = v135;
              if (v104)
              {
                v106 = (std::__shared_weak_count *)*((_QWORD *)v104 + 4);
                if (v106)
                {
                  v107 = (unint64_t *)&v106->__shared_owners_;
                  do
                    v108 = __ldaxr(v107);
                  while (__stlxr(v108 - 1, v107));
                  if (!v108)
                  {
                    ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
                    std::__shared_weak_count::__release_weak(v106);
                  }
                }
                v109 = (std::__shared_weak_count *)*((_QWORD *)v104 + 2);
                if (v109)
                {
                  v110 = (unint64_t *)&v109->__shared_owners_;
                  do
                    v111 = __ldaxr(v110);
                  while (__stlxr(v111 - 1, v110));
                  if (!v111)
                  {
                    ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
                    std::__shared_weak_count::__release_weak(v109);
                  }
                }
                MEMORY[0x212BC6398](v104, 0x10F0C40B62ED6C6);
                v112 = v149;
                v149 = 0;
                if (v112)
                {
                  v113 = (std::__shared_weak_count *)v112[4];
                  if (v113)
                  {
                    v114 = (unint64_t *)&v113->__shared_owners_;
                    do
                      v115 = __ldaxr(v114);
                    while (__stlxr(v115 - 1, v114));
                    if (!v115)
                    {
                      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
                      std::__shared_weak_count::__release_weak(v113);
                    }
                  }
                  v116 = (std::__shared_weak_count *)v112[2];
                  if (v116)
                  {
                    v117 = (unint64_t *)&v116->__shared_owners_;
                    do
                      v118 = __ldaxr(v117);
                    while (__stlxr(v118 - 1, v117));
                    if (!v118)
                    {
                      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
                      std::__shared_weak_count::__release_weak(v116);
                    }
                  }
                  MEMORY[0x212BC6398](v112, 0x10F0C40B62ED6C6);
                }
              }
              v119 = (std::__shared_weak_count *)*((_QWORD *)&v152 + 1);
              if (*((_QWORD *)&v152 + 1))
              {
                v120 = (unint64_t *)(*((_QWORD *)&v152 + 1) + 8);
                do
                  v121 = __ldaxr(v120);
                while (__stlxr(v121 - 1, v120));
                if (!v121)
                {
                  ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
                  std::__shared_weak_count::__release_weak(v119);
                }
              }
              v122 = *(std::__shared_weak_count **)&object[16];
              if (*(_QWORD *)&object[16])
              {
                v123 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                do
                  v124 = __ldaxr(v123);
                while (__stlxr(v124 - 1, v123));
                if (!v124)
                {
                  ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
                  std::__shared_weak_count::__release_weak(v122);
                }
              }
            }
            else
            {
              os_log_type_enabled(v89, OS_LOG_TYPE_INFO);
              *(_DWORD *)object = 134217984;
              *(double *)&object[4] = (double)(v77.__d_.__rep_ - v137) / 1000000000.0;
              v125 = (void *)_os_log_send_and_compose_impl();
              v105 = v135;
              if (v125)
                free(v125);
            }
            if (v105)
            {
              v126.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
              sub_20E8C003C((uint64_t)v138, "  Done, it took %f", (double)(v126.__d_.__rep_ - v77.__d_.__rep_) / 1000000000.0);
              sub_20E863570((uint64_t)v138);
            }
            sub_20E863570((uint64_t)v138);
            v127 = (std::__shared_weak_count *)v144;
            if ((_QWORD)v144)
            {
              v128 = (unint64_t *)(v144 + 8);
              do
                v129 = __ldaxr(v128);
              while (__stlxr(v129 - 1, v128));
              if (!v129)
              {
                ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
                std::__shared_weak_count::__release_weak(v127);
              }
            }
            return kdebug_trace();
          }
LABEL_155:
          if (SBYTE7(v152) < 0)
            operator delete(*(void **)&object[8]);
          goto LABEL_157;
        }
      }
      memmove(v85, v83, v84);
      goto LABEL_144;
    }
  }
  return kdebug_trace();
}

void sub_20EE5D610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,void *__p,void *a45,int a46,__int16 a47,char a48,char a49,char a50,int a51,__int16 a52,char a53,char a54)
{
  void *v55;

  if (a50 && a49 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a21);
  v55 = *(void **)a11;
  if (*(_QWORD *)a11)
  {
    *(_QWORD *)(a11 + 8) = v55;
    operator delete(v55);
  }
  sub_20E8E69C4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_20EE5D890(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _OWORD *v9;
  uint64_t *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _OWORD *v17;
  __int128 *v18;
  _OWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  char *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _QWORD *v39;
  _QWORD **v40;
  _QWORD **v41;
  uint64_t v42;
  BOOL v43;
  BOOL v44;
  _OWORD *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  unint64_t i;
  float v54;
  size_t prime;
  int8x8_t v56;
  BOOL v57;
  unint64_t v58;
  uint8x8_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  uint64_t v63;
  _QWORD **v64;
  size_t v65;
  size_t v66;
  size_t v67;
  _QWORD *v68;
  size_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  size_t v73;
  unsigned int *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  char *v78;
  uint64_t v79;
  unsigned __int8 v80;
  uint64_t v81;
  unsigned __int8 v82;
  unsigned __int8 v83;
  uint64_t v84;
  unsigned __int8 v85;
  unsigned __int8 v86;
  uint64_t v87;
  unsigned __int8 v88;
  unsigned __int8 v89;
  uint64_t v90;
  unsigned __int8 v91;
  unint64_t v92;
  unint64_t v93;
  uint8x8_t v94;
  void **v95;
  _QWORD *v96;
  unint64_t v98;
  uint64_t v100;
  float v101;
  _BOOL8 v102;
  unint64_t v103;
  unint64_t v104;
  void *v105;
  void *v106;
  uint64_t v107;
  _QWORD *v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  _QWORD *j;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint8x8_t v116;
  uint64_t v117;
  _QWORD *v118;
  void *v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  unint64_t v124;
  uint64_t *v125;
  char *v126;
  int64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  _QWORD *v132;
  unint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t *v138;
  uint64_t *v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  __int128 *v143;
  _OWORD *v144;
  uint64_t v145;
  __int128 v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t *v149;
  __int128 *v150;
  _OWORD *v151;
  uint64_t v152;
  __int128 v153;
  uint64_t v154;
  _QWORD *v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _OWORD *v159;
  __int128 *v160;
  uint64_t v161;
  __int128 v162;
  uint64_t v163;
  uint64_t v164;
  void *v165;
  _QWORD *v166;
  void *v167;
  _OWORD *v168;
  _OWORD *v169;
  void *v170;
  _QWORD *v171;
  _QWORD *v172;
  void *v173;
  _QWORD *v174;
  void *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v179;
  unsigned int *v180;
  uint64_t v181;
  uint64_t v182;
  unsigned int *v183;
  uint64_t v184;
  void *v185;
  _OWORD *v186;
  unint64_t v187;
  uint64_t v188[62];
  __int128 v189;
  __int128 v190;
  __int128 v191;
  void *v192;
  _QWORD *v193;
  uint64_t v194;
  __int128 __p;
  __int128 v196;
  float v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  BOOL v206;
  _QWORD *v207;
  __int128 *v208;
  char v209;

  if (!*(_BYTE *)(a1 + 24))
    return;
  *(_BYTE *)(a3 + 1160) = *(_DWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 432))(*(_QWORD *)(a1 + 8))
                                    + 4904) > 0;
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 432))(*(_QWORD *)(a1 + 8));
  if (*(_QWORD *)(*(_QWORD *)(v5 + 4864) + 2480) != *(_QWORD *)(*(_QWORD *)(v5 + 4864) + 2488))
    *(_DWORD *)(a3 + 1164) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 432))(*(_QWORD *)(a1 + 8))
                                                               + 4864)
                                                   + 2488)
                                       - 4);
  v179 = a3;
  *(_BYTE *)(a1 + 24) = 0;
  v6 = *(_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 11464) + 96))(*(_QWORD *)(a1 + 11464));
  v194 = 0;
  v192 = 0;
  v193 = 0;
  sub_20EE65E28((uint64_t)&v192, *(_QWORD *)(v6 + 24), *(_QWORD *)(v6 + 32), 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(v6 + 32) - *(_QWORD *)(v6 + 24)) >> 3));
  v190 = 0u;
  v191 = 0u;
  v189 = 0u;
  v181 = a1;
  v7 = *(_QWORD *)(a1 + 16);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 256);
    if (v8)
    {
      if (v8 >> 57)
        sub_20E867F44();
      v9 = operator new(v8 << 7);
      *(_QWORD *)&v189 = v9;
      *((_QWORD *)&v189 + 1) = v9;
      *(_QWORD *)&v190 = &v9[8 * v8];
      v10 = *(uint64_t **)(v7 + 248);
      if (!v10)
        goto LABEL_29;
    }
    else
    {
      v9 = 0;
      v10 = *(uint64_t **)(v7 + 248);
      if (!v10)
        goto LABEL_29;
    }
    do
    {
      v18 = (__int128 *)(v10 + 4);
      if ((unint64_t)v9 < (unint64_t)v190)
      {
        v11 = *v18;
        v12 = *((_OWORD *)v10 + 3);
        v13 = *((_OWORD *)v10 + 5);
        v9[2] = *((_OWORD *)v10 + 4);
        v9[3] = v13;
        *v9 = v11;
        v9[1] = v12;
        v14 = *((_OWORD *)v10 + 6);
        v15 = *((_OWORD *)v10 + 7);
        v16 = *((_OWORD *)v10 + 9);
        v9[6] = *((_OWORD *)v10 + 8);
        v9[7] = v16;
        v9[4] = v14;
        v9[5] = v15;
        v17 = v9 + 8;
      }
      else
      {
        v19 = (_OWORD *)v189;
        v20 = (uint64_t)((uint64_t)v9 - v189) >> 7;
        v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 57)
          sub_20E867F44();
        v22 = v190 - v189;
        if ((uint64_t)(v190 - v189) >> 6 > v21)
          v21 = v22 >> 6;
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFF80)
          v23 = 0x1FFFFFFFFFFFFFFLL;
        else
          v23 = v21;
        if (v23)
        {
          if (v23 >> 57)
            sub_20E877A38();
          v24 = (char *)operator new(v23 << 7);
        }
        else
        {
          v24 = 0;
        }
        v25 = &v24[128 * v20];
        v26 = *v18;
        v27 = *((_OWORD *)v10 + 3);
        v28 = *((_OWORD *)v10 + 5);
        *((_OWORD *)v25 + 2) = *((_OWORD *)v10 + 4);
        *((_OWORD *)v25 + 3) = v28;
        *(_OWORD *)v25 = v26;
        *((_OWORD *)v25 + 1) = v27;
        v29 = *((_OWORD *)v10 + 6);
        v30 = *((_OWORD *)v10 + 7);
        v31 = *((_OWORD *)v10 + 9);
        *((_OWORD *)v25 + 6) = *((_OWORD *)v10 + 8);
        *((_OWORD *)v25 + 7) = v31;
        *((_OWORD *)v25 + 4) = v29;
        *((_OWORD *)v25 + 5) = v30;
        v32 = v25;
        if (v9 != v19)
        {
          do
          {
            v33 = *(v9 - 8);
            v34 = *(v9 - 7);
            v35 = *(v9 - 5);
            *((_OWORD *)v32 - 6) = *(v9 - 6);
            *((_OWORD *)v32 - 5) = v35;
            *((_OWORD *)v32 - 8) = v33;
            *((_OWORD *)v32 - 7) = v34;
            v36 = *(v9 - 4);
            v37 = *(v9 - 3);
            v38 = *(v9 - 1);
            *((_OWORD *)v32 - 2) = *(v9 - 2);
            *((_OWORD *)v32 - 1) = v38;
            *((_OWORD *)v32 - 4) = v36;
            *((_OWORD *)v32 - 3) = v37;
            v32 -= 128;
            v9 -= 8;
          }
          while (v9 != v19);
          v9 = v19;
        }
        v17 = v25 + 128;
        *(_QWORD *)&v189 = v32;
        *((_QWORD *)&v189 + 1) = v25 + 128;
        *(_QWORD *)&v190 = &v24[128 * v23];
        if (v9)
          operator delete(v9);
      }
      *((_QWORD *)&v189 + 1) = v17;
      v10 = (uint64_t *)*v10;
      v9 = v17;
    }
    while (v10);
  }
LABEL_29:
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(v181 + 8) + 240))(v188, *(_QWORD *)(v181 + 8), 1);
  v177 = *(_QWORD *)(*(_QWORD *)(v181 + 11472) + 80);
  v185 = 0;
  v186 = 0;
  v187 = 0;
  v39 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v181 + 11464) + 120))(*(_QWORD *)(v181 + 11464));
  v40 = (_QWORD **)*v39;
  v41 = (_QWORD **)v39[1];
  if ((_QWORD **)*v39 != v41)
  {
    do
    {
      while (1)
      {
        sub_20F0EA7DC(*v40, (uint64_t)&__p);
        v42 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v181 + 8) + 432))(*(_QWORD *)(v181 + 8));
        v43 = *(_BYTE *)(v42 + 1) || *(_BYTE *)(v42 + 10664) == 0;
        v44 = !v43;
        v206 = v44;
        v45 = v186;
        if ((unint64_t)v186 < v187)
          break;
        v186 = (_OWORD *)sub_20EE67BFC((uint64_t *)&v185, (uint64_t)&__p);
        sub_20E991850((uint64_t)&__p);
        if (++v40 == v41)
          goto LABEL_40;
      }
      sub_20EE67EC0((uint64_t)v186, &__p);
      v46 = v198;
      v47 = v199;
      v48 = v201;
      v45[11] = v200;
      v45[12] = v48;
      v45[9] = v46;
      v45[10] = v47;
      v49 = v202;
      v50 = v203;
      v51 = v205;
      v45[15] = v204;
      v45[16] = v51;
      v45[13] = v49;
      v45[14] = v50;
      *((_BYTE *)v45 + 272) = v206;
      v186 = (_OWORD *)((char *)v45 + 280);
      sub_20E991850((uint64_t)&__p);
      ++v40;
    }
    while (v40 != v41);
  }
LABEL_40:
  v52 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v181 + 11464) + 160))(*(_QWORD *)(v181 + 11464));
  i = *(_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v181 + 11464) + 96))(*(_QWORD *)(v181 + 11464));
  __p = 0u;
  v196 = 0u;
  v197 = 1.0;
  v54 = (float)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(i + 8) - *(_QWORD *)i) >> 4));
  prime = (unint64_t)v54;
  if ((unint64_t)v54 == 1)
  {
    prime = 2;
LABEL_58:
    v61 = operator new(8 * prime);
    v62 = (void *)__p;
    *(_QWORD *)&__p = v61;
    if (v62)
      operator delete(v62);
    v63 = 0;
    *((_QWORD *)&__p + 1) = prime;
    do
      *(_QWORD *)(__p + 8 * v63++) = 0;
    while (prime != v63);
    v64 = (_QWORD **)v196;
    if (!(_QWORD)v196)
      goto LABEL_82;
    v65 = *(_QWORD *)(v196 + 8);
    v66 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v67 = v65 & v66;
      *(_QWORD *)(__p + 8 * v67) = &v196;
      while (1)
      {
        v68 = *v64;
        if (!*v64)
          break;
        v69 = v68[1] & v66;
        if (v69 == v67)
        {
          v64 = (_QWORD **)*v64;
        }
        else if (*(_QWORD *)(__p + 8 * v69))
        {
          *v64 = (_QWORD *)*v68;
          v70 = 8 * v69;
          *v68 = **(_QWORD **)(__p + v70);
          **(_QWORD **)(__p + v70) = v68;
        }
        else
        {
          *(_QWORD *)(__p + 8 * v69) = v64;
          v64 = (_QWORD **)v68;
          v67 = v69;
        }
      }
      goto LABEL_82;
    }
    if (v65 >= prime)
      v65 %= prime;
    *(_QWORD *)(__p + 8 * v65) = &v196;
    v71 = *v64;
    if (!*v64)
    {
LABEL_82:
      v176 = v52;
      v74 = *(unsigned int **)i;
      v180 = *(unsigned int **)(i + 8);
      if (*(unsigned int **)i != v180)
        goto LABEL_85;
      goto LABEL_286;
    }
    while (1)
    {
      v73 = v71[1];
      if (v73 >= prime)
        v73 %= prime;
      if (v73 == v65)
        goto LABEL_76;
      if (*(_QWORD *)(__p + 8 * v73))
      {
        *v64 = (_QWORD *)*v71;
        v72 = 8 * v73;
        *v71 = **(_QWORD **)(__p + v72);
        **(_QWORD **)(__p + v72) = v71;
        v71 = v64;
LABEL_76:
        v64 = (_QWORD **)v71;
        v71 = (_QWORD *)*v71;
        if (!v71)
          goto LABEL_82;
      }
      else
      {
        *(_QWORD *)(__p + 8 * v73) = v64;
        v64 = (_QWORD **)v71;
        v71 = (_QWORD *)*v71;
        v65 = v73;
        if (!v71)
          goto LABEL_82;
      }
    }
  }
  if ((prime & ((unint64_t)v54 - 1)) != 0)
  {
    prime = std::__next_prime((unint64_t)v54);
    v56 = *(int8x8_t *)((char *)&__p + 8);
    v57 = prime >= *((_QWORD *)&__p + 1);
    if (prime > *((_QWORD *)&__p + 1))
      goto LABEL_57;
  }
  else
  {
    v56 = 0;
    v57 = 1;
    if (prime)
    {
LABEL_57:
      if (prime >> 61)
        sub_20E877A38();
      goto LABEL_58;
    }
  }
  if (v57)
    goto LABEL_82;
  v58 = vcvtps_u32_f32((float)*((unint64_t *)&v196 + 1) / v197);
  if (*(_QWORD *)&v56 < 3uLL || (v59 = (uint8x8_t)vcnt_s8(v56), v59.i16[0] = vaddlv_u8(v59), v59.u32[0] > 1uLL))
  {
    v58 = std::__next_prime(v58);
  }
  else
  {
    v60 = 1 << -(char)__clz(v58 - 1);
    if (v58 >= 2)
      v58 = v60;
  }
  if (prime <= v58)
    prime = v58;
  if (prime >= *(_QWORD *)&v56)
    goto LABEL_82;
  if (prime)
    goto LABEL_57;
  v165 = (void *)__p;
  *(_QWORD *)&__p = 0;
  if (v165)
    operator delete(v165);
  *((_QWORD *)&__p + 1) = 0;
  v176 = v52;
  v74 = *(unsigned int **)i;
  v180 = *(unsigned int **)(i + 8);
  if (*(unsigned int **)i != v180)
  {
LABEL_85:
    while (1)
    {
      v183 = v74;
      v75 = *((_QWORD *)v74 + 4) - *((_QWORD *)v74 + 3);
      if (v75)
        break;
LABEL_84:
      v74 = v183 + 60;
      if (v183 + 60 == v180)
        goto LABEL_286;
    }
    v76 = 0;
    v182 = v75 >> 4;
    v184 = *v74;
    while (1)
    {
      v79 = *(_QWORD *)(*((_QWORD *)v183 + 3) + 16 * v76);
      if (v184 >= 0x10000)
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
        v80 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v80 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v81 = qword_254A6DE40;
          for (i = qword_254A6DE48; v81 != i; v81 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v81)(*(_QWORD *)(v81 + 8), "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
        }
        v82 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v82 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
LABEL_307:
          abort();
        qword_254A6DE58(unk_254A6DE60, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
      }
      if (v76 >= 0x10000)
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 39, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
        v83 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v83 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v84 = qword_254A6DE40;
          for (i = qword_254A6DE48; v84 != i; v84 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v84)(*(_QWORD *)(v84 + 8), "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
        }
        v85 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v85 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          goto LABEL_307;
        qword_254A6DE58(unk_254A6DE60, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
      }
      if (v184 >= 0x10000)
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
        v86 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v86 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v87 = qword_254A6DE40;
          for (i = qword_254A6DE48; v87 != i; v87 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v87)(*(_QWORD *)(v87 + 8), "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
        }
        v88 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v88 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
LABEL_308:
          abort();
        qword_254A6DE58(unk_254A6DE60, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
      }
      if (v76 >= 0x10000)
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
        v89 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v89 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v90 = qword_254A6DE40;
          for (i = qword_254A6DE48; v90 != i; v90 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v90)(*(_QWORD *)(v90 + 8), "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
        }
        v91 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v91 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          goto LABEL_308;
        qword_254A6DE58(unk_254A6DE60, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
      }
      v92 = (unsigned __int16)v76 | ((_DWORD)v184 << 16);
      v93 = *((_QWORD *)&__p + 1);
      if (*((_QWORD *)&__p + 1))
      {
        v94 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&__p + 8));
        v94.i16[0] = vaddlv_u8(v94);
        if (v94.u32[0] > 1uLL)
        {
          i = (unsigned __int16)v76 | ((_DWORD)v184 << 16);
          if (*((_QWORD *)&__p + 1) <= v92)
            i = v92 % *((_QWORD *)&__p + 1);
        }
        else
        {
          i = (DWORD2(__p) - 1) & v92;
        }
        v95 = *(void ***)(__p + 8 * i);
        if (v95)
        {
          v96 = *v95;
          if (*v95)
          {
            if (v94.u32[0] < 2uLL)
            {
              while (1)
              {
                v100 = v96[1];
                if (v100 == v92)
                {
                  if (*((_DWORD *)v96 + 4) == (_DWORD)v184 && *((_DWORD *)v96 + 5) == (_DWORD)v76)
                    goto LABEL_224;
                }
                else if ((v100 & (*((_QWORD *)&__p + 1) - 1)) != i)
                {
                  goto LABEL_153;
                }
                v96 = (_QWORD *)*v96;
                if (!v96)
                  goto LABEL_153;
              }
            }
            do
            {
              v98 = v96[1];
              if (v98 == v92)
              {
                if (*((_DWORD *)v96 + 4) == (_DWORD)v184 && *((_DWORD *)v96 + 5) == (_DWORD)v76)
                  goto LABEL_224;
              }
              else
              {
                if (v98 >= *((_QWORD *)&__p + 1))
                  v98 %= *((_QWORD *)&__p + 1);
                if (v98 != i)
                  break;
              }
              v96 = (_QWORD *)*v96;
            }
            while (v96);
          }
        }
      }
LABEL_153:
      v96 = operator new(0x30uLL);
      v207 = v96;
      v208 = &v196;
      *v96 = 0;
      v96[1] = v92;
      v96[2] = v184 | (v76 << 32);
      v96[3] = 0;
      v96[4] = 0;
      v96[5] = 0;
      v209 = 1;
      v101 = (float)(unint64_t)(*((_QWORD *)&v196 + 1) + 1);
      if (v93 && (float)(v197 * (float)v93) >= v101)
      {
        v92 = i;
        goto LABEL_214;
      }
      v102 = (v93 & (v93 - 1)) != 0;
      if (v93 < 3)
        v102 = 1;
      v103 = v102 | (2 * v93);
      v104 = vcvtps_u32_f32(v101 / v197);
      if (v103 <= v104)
        i = v104;
      else
        i = v103;
      if (i == 1)
      {
        i = 2;
      }
      else if ((i & (i - 1)) != 0)
      {
        i = std::__next_prime(i);
        v93 = *((_QWORD *)&__p + 1);
      }
      if (i <= v93)
      {
        if (i >= v93)
          goto LABEL_202;
        v115 = vcvtps_u32_f32((float)*((unint64_t *)&v196 + 1) / v197);
        if (v93 < 3 || (v116 = (uint8x8_t)vcnt_s8((int8x8_t)v93), v116.i16[0] = vaddlv_u8(v116), v116.u32[0] > 1uLL))
        {
          v115 = std::__next_prime(v115);
        }
        else
        {
          v117 = 1 << -(char)__clz(v115 - 1);
          if (v115 >= 2)
            v115 = v117;
        }
        if (i <= v115)
          i = v115;
        if (i >= v93)
        {
          v93 = *((_QWORD *)&__p + 1);
          if ((*((_QWORD *)&__p + 1) & (*((_QWORD *)&__p + 1) - 1)) == 0)
            goto LABEL_203;
          goto LABEL_212;
        }
        if (!i)
        {
          v119 = (void *)__p;
          *(_QWORD *)&__p = 0;
          if (v119)
            operator delete(v119);
          v93 = 0;
          *((_QWORD *)&__p + 1) = 0;
          goto LABEL_203;
        }
      }
      if (i >> 61)
        sub_20E877A38();
      v105 = operator new(8 * i);
      v106 = (void *)__p;
      *(_QWORD *)&__p = v105;
      if (v106)
        operator delete(v106);
      v107 = 0;
      *((_QWORD *)&__p + 1) = i;
      do
        *(_QWORD *)(__p + 8 * v107++) = 0;
      while (i != v107);
      v108 = (_QWORD *)v196;
      if ((_QWORD)v196)
      {
        v109 = *(_QWORD *)(v196 + 8);
        v110 = i - 1;
        if ((i & (i - 1)) != 0)
        {
          if (v109 < i)
          {
            *(_QWORD *)(__p + 8 * v109) = &v196;
            v118 = (_QWORD *)*v108;
            if (*v108)
              goto LABEL_206;
LABEL_201:
            v93 = i;
LABEL_202:
            if ((v93 & (v93 - 1)) != 0)
              goto LABEL_212;
LABEL_203:
            v92 = ((_DWORD)v93 - 1) & v92;
            goto LABEL_214;
          }
          v109 %= i;
          *(_QWORD *)(__p + 8 * v109) = &v196;
          v118 = (_QWORD *)*v108;
          if (!*v108)
            goto LABEL_201;
          while (1)
          {
LABEL_206:
            v121 = v118[1];
            if (v121 >= i)
              v121 %= i;
            if (v121 == v109)
              goto LABEL_205;
            if (*(_QWORD *)(__p + 8 * v121))
              break;
            *(_QWORD *)(__p + 8 * v121) = v108;
            v108 = v118;
            v118 = (_QWORD *)*v118;
            v109 = v121;
            if (!v118)
              goto LABEL_211;
          }
          *v108 = *v118;
          v120 = 8 * v121;
          *v118 = **(_QWORD **)(__p + v120);
          **(_QWORD **)(__p + v120) = v118;
          v118 = v108;
LABEL_205:
          v108 = v118;
          v118 = (_QWORD *)*v118;
          if (!v118)
            goto LABEL_211;
          goto LABEL_206;
        }
        v111 = v109 & v110;
        *(_QWORD *)(__p + 8 * v111) = &v196;
        for (j = (_QWORD *)*v108; *v108; j = (_QWORD *)*v108)
        {
          v113 = j[1] & v110;
          if (v113 == v111)
          {
            v108 = j;
          }
          else if (*(_QWORD *)(__p + 8 * v113))
          {
            *v108 = *j;
            v114 = 8 * v113;
            *j = **(_QWORD **)(__p + v114);
            **(_QWORD **)(__p + v114) = j;
          }
          else
          {
            *(_QWORD *)(__p + 8 * v113) = v108;
            v108 = j;
            v111 = v113;
          }
        }
      }
LABEL_211:
      v93 = i;
      if ((i & (i - 1)) == 0)
        goto LABEL_203;
LABEL_212:
      if (v93 <= v92)
        v92 %= v93;
LABEL_214:
      v122 = __p;
      v123 = *(_QWORD **)(__p + 8 * v92);
      if (v123)
      {
        *v96 = *v123;
LABEL_222:
        *v123 = v96;
        goto LABEL_223;
      }
      *v96 = v196;
      *(_QWORD *)&v196 = v96;
      *(_QWORD *)(v122 + 8 * v92) = &v196;
      if (*v96)
      {
        v124 = *(_QWORD *)(*v96 + 8);
        if ((v93 & (v93 - 1)) != 0)
        {
          if (v124 >= v93)
            v124 %= v93;
        }
        else
        {
          v124 &= v93 - 1;
        }
        v123 = (_QWORD *)(__p + 8 * v124);
        goto LABEL_222;
      }
LABEL_223:
      ++*((_QWORD *)&v196 + 1);
LABEL_224:
      if (v96 + 3 == (_QWORD *)(v79 + 104))
        goto LABEL_90;
      v125 = *(uint64_t **)(v79 + 104);
      v126 = *(char **)(v79 + 112);
      v127 = v126 - (char *)v125;
      v128 = (v126 - (char *)v125) >> 3;
      v129 = v96[5];
      i = v96[3];
      if (v128 > (uint64_t)(v129 - i) >> 3)
      {
        if (i)
        {
          v96[4] = i;
          operator delete((void *)i);
          v129 = 0;
          v96[3] = 0;
          v96[4] = 0;
          v96[5] = 0;
        }
        if (v127 < 0)
          goto LABEL_309;
        v130 = v129 >> 2;
        if (v129 >> 2 <= v128)
          v130 = (v126 - (char *)v125) >> 3;
        v131 = (unint64_t)v129 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v130;
        if (v131 >> 61)
LABEL_309:
          sub_20E969238();
        v132 = operator new(8 * v131);
        i = (unint64_t)v132;
        v96[4] = v132;
        v133 = v96 + 4;
        *(v133 - 1) = (unint64_t)v132;
        v133[1] = (unint64_t)&v132[v131];
        v77 = v132;
        if (v125 != (uint64_t *)v126)
        {
          memcpy(v132, v125, v127 & 0xFFFFFFFFFFFFFFF8);
          v77 = (_QWORD *)(i + (v127 & 0xFFFFFFFFFFFFFFF8));
        }
        goto LABEL_88;
      }
      v135 = v96[4];
      v133 = v96 + 4;
      v134 = v135;
      v136 = v135 - i;
      v137 = (uint64_t)(v135 - i) >> 3;
      if (v137 < v128)
      {
        v138 = &v125[v137];
        if (v134 == i)
          goto LABEL_255;
        if ((unint64_t)(v136 - 8) < 0x18)
        {
          v139 = v125;
        }
        else
        {
          v139 = v125;
          if (i - (unint64_t)v125 >= 0x20)
          {
            v140 = ((unint64_t)(v136 - 8) >> 3) + 1;
            v141 = v140 & 0x3FFFFFFFFFFFFFFCLL;
            v142 = i + v141 * 8;
            v139 = &v125[v141];
            v143 = (__int128 *)(v125 + 2);
            v144 = (_OWORD *)(i + 16);
            v145 = v140 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v146 = *v143;
              *(v144 - 1) = *(v143 - 1);
              *v144 = v146;
              v143 += 2;
              v144 += 2;
              v145 -= 4;
            }
            while (v145);
            i = v142;
            if (v140 == (v140 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_254;
          }
        }
        do
        {
          v154 = *v139++;
          *(_QWORD *)i = v154;
          i += 8;
        }
        while (v139 != v138);
LABEL_254:
        i = *v133;
LABEL_255:
        v155 = (_QWORD *)i;
        if (v138 != (uint64_t *)v126)
        {
          v156 = v126 - ((char *)v125 + v136) - 8;
          if (v156 >= 0x38)
          {
            v155 = (_QWORD *)i;
            if (i - v136 - (unint64_t)v125 >= 0x20)
            {
              v157 = (v156 >> 3) + 1;
              v158 = 8 * (v157 & 0x3FFFFFFFFFFFFFFCLL);
              v138 = (uint64_t *)((char *)v138 + v158);
              v155 = (_QWORD *)(i + v158);
              v159 = (_OWORD *)(i + 16);
              v160 = (__int128 *)&v125[v137 + 2];
              v161 = v157 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v162 = *v160;
                *(v159 - 1) = *(v160 - 1);
                *v159 = v162;
                v159 += 2;
                v160 += 2;
                v161 -= 4;
              }
              while (v161);
              if (v157 == (v157 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_263;
            }
          }
          else
          {
            v155 = (_QWORD *)i;
          }
          do
          {
            v163 = *v138++;
            *v155++ = v163;
          }
          while (v138 != (uint64_t *)v126);
        }
LABEL_263:
        v78 = (char *)v155 - i;
        goto LABEL_89;
      }
      if (v125 == (uint64_t *)v126)
      {
        v77 = (_QWORD *)i;
      }
      else
      {
        if ((unint64_t)(v127 - 8) < 0x18)
        {
          v77 = (_QWORD *)i;
        }
        else
        {
          v77 = (_QWORD *)i;
          if (i - (unint64_t)v125 >= 0x20)
          {
            v147 = ((unint64_t)(v127 - 8) >> 3) + 1;
            v148 = v147 & 0x3FFFFFFFFFFFFFFCLL;
            v77 = (_QWORD *)(i + v148 * 8);
            v149 = &v125[v148];
            v150 = (__int128 *)(v125 + 2);
            v151 = (_OWORD *)(i + 16);
            v152 = v147 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v153 = *v150;
              *(v151 - 1) = *(v150 - 1);
              *v151 = v153;
              v150 += 2;
              v151 += 2;
              v152 -= 4;
            }
            while (v152);
            v125 = v149;
            if (v147 == (v147 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_88;
          }
        }
        do
        {
          v164 = *v125++;
          *v77++ = v164;
        }
        while (v125 != (uint64_t *)v126);
      }
LABEL_88:
      v78 = (char *)v77 - i;
LABEL_89:
      *v133 = (unint64_t)&v78[i];
LABEL_90:
      if (++v76 == v182)
        goto LABEL_84;
    }
  }
LABEL_286:
  sub_20EAF900C((uint64_t *)&v192, v188, v177, (uint64_t)&v185, a2, v176, (uint64_t)&__p, (char **)&v189, v179, *(_BYTE *)(v181 + 56));
  v166 = (_QWORD *)v196;
  if ((_QWORD)v196)
  {
    do
    {
      v174 = (_QWORD *)*v166;
      v175 = (void *)v166[3];
      if (v175)
      {
        v166[4] = v175;
        operator delete(v175);
      }
      operator delete(v166);
      v166 = v174;
    }
    while (v174);
  }
  v167 = (void *)__p;
  *(_QWORD *)&__p = 0;
  if (v167)
    operator delete(v167);
  v168 = v185;
  if (v185)
  {
    v169 = v186;
    v170 = v185;
    if (v186 != v185)
    {
      do
        v169 = (_OWORD *)sub_20E991850((uint64_t)v169 - 280);
      while (v169 != v168);
      v170 = v185;
    }
    v186 = v168;
    operator delete(v170);
  }
  sub_20EAFDDD0((uint64_t)v188);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v181 + 8) + 112))(*(_QWORD *)(v181 + 8), v179 + 960);
  if (*((_QWORD *)&v190 + 1))
  {
    *(_QWORD *)&v191 = *((_QWORD *)&v190 + 1);
    operator delete(*((void **)&v190 + 1));
  }
  if ((_QWORD)v189)
  {
    *((_QWORD *)&v189 + 1) = v189;
    operator delete((void *)v189);
  }
  v171 = v192;
  if (v192)
  {
    v172 = v193;
    v173 = v192;
    if (v193 != v192)
    {
      do
      {
        v172 -= 13;
        sub_20E9905B4(v172);
      }
      while (v172 != v171);
      v173 = v192;
    }
    v193 = v171;
    operator delete(v173);
  }
}

void sub_20EE5ED00(_Unwind_Exception *a1)
{
  sub_20E9AA8C8((uint64_t)&STACK[0x270]);
  sub_20EE5EE28(&STACK[0x2A8]);
  _Unwind_Resume(a1);
}

void sub_20EE5ED58()
{
  JUMPOUT(0x20EE5EDA8);
}

void sub_20EE5ED70()
{
  uint64_t v0;

  sub_20EAFA1EC(v0 - 120);
  JUMPOUT(0x20EE5EDA0);
}

void sub_20EE5ED9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  void *v15;
  va_list va;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a14);
  va_start(va, a14);
  v15 = va_arg(va1, void *);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  sub_20E9DEEC4((uint64_t)&STACK[0x2C0]);
  sub_20EE5EDD0((void **)va);
  sub_20EAFDDD0((uint64_t)va1);
  sub_20E9AA8C8((uint64_t)&STACK[0x270]);
  sub_20EE5EE28(&STACK[0x2A8]);
  _Unwind_Resume(a1);
}

void **sub_20EE5EDD0(void **a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        v3 = sub_20E991850(v3 - 280);
      while ((void *)v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

_QWORD *sub_20EE5EE28(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = (_QWORD *)*a1;
  if (*a1)
  {
    v3 = (_QWORD *)a1[1];
    v4 = (_QWORD *)*a1;
    if (v3 != v2)
    {
      do
      {
        v3 -= 13;
        sub_20E9905B4(v3);
      }
      while (v3 != v2);
      v4 = (_QWORD *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_20EE5EE88(uint64_t result, char a2)
{
  *(_BYTE *)(*(_QWORD *)(result + 8) + 7360) = a2;
  return result;
}

uint64_t sub_20EE5EE98(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 11472) + 80) + 2816) + 16);
}

void sub_20EE5EEAC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  if (*(_BYTE *)(a1 + 6205))
  {
    v2 = *(_QWORD **)(*(_QWORD *)(a1 + 11472) + 80);
    v3 = **(_QWORD **)(a2 + 424);
    if (v2[354] - v2[353] != 4472
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingManager.cpp", 2842, (uint64_t)"submaps_.size() == 1", 20, (uint64_t)&unk_2102A1D75, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    sub_20FCC8C14(*(uint64_t **)(v2[352] + 16), v3);
  }
}

uint64_t sub_20EE5EF48(uint64_t a1)
{
  uint64_t *v2;

  v2 = 0;
  return sub_20EE560F4(a1, &v2);
}

uint64_t sub_20EE5EF6C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 11488);
}

uint64_t sub_20EE5EF74(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  void *v14;

  v2 = *(std::__shared_weak_count **)(a1 + 4280);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    std::mutex::~mutex((std::mutex *)(a1 + 4208));
    if (!*(_BYTE *)(a1 + 4200))
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  std::mutex::~mutex((std::mutex *)(a1 + 4208));
  if (*(_BYTE *)(a1 + 4200))
LABEL_6:
    sub_20EB8188C(a1 + 2536);
LABEL_7:
  v5 = *(_QWORD *)(a1 + 2512);
  if (v5)
  {
    v6 = *(_QWORD *)(a1 + 2520);
    v7 = *(void **)(a1 + 2512);
    if (v6 != v5)
    {
      do
      {
        v8 = *(_QWORD *)(v6 - 24);
        if (v8)
        {
          v9 = *(_QWORD *)(v6 - 16);
          v10 = *(void **)(v6 - 24);
          if (v9 != v8)
          {
            do
              v9 = sub_20EB8188C(v9 - 1664);
            while (v9 != v8);
            v10 = *(void **)(v6 - 24);
          }
          *(_QWORD *)(v6 - 16) = v8;
          operator delete(v10);
        }
        v6 -= 32;
      }
      while (v6 != v5);
      v7 = *(void **)(a1 + 2512);
    }
    *(_QWORD *)(a1 + 2520) = v5;
    operator delete(v7);
  }
  sub_20E86A810(a1 + 80);
  v11 = *(_QWORD **)(a1 + 56);
  if (v11)
  {
    do
    {
      v12 = (_QWORD *)*v11;
      operator delete(v11);
      v11 = v12;
    }
    while (v12);
  }
  v13 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v13)
    operator delete(v13);
  v14 = *(void **)(a1 + 16);
  if (v14)
  {
    *(_QWORD *)(a1 + 24) = v14;
    operator delete(v14);
  }
  return a1;
}

uint64_t *sub_20EE5F0C0(uint64_t *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  __int128 *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = a2;
  v7 = result;
  v8 = result[2];
  v9 = *result;
  if (0xEEEEEEEEEEEEEEEFLL * ((v8 - *result) >> 4) >= a4)
  {
    v18 = result[1];
    if (0xEEEEEEEEEEEEEEEFLL * ((v18 - v9) >> 4) >= a4)
    {
      if (a2 == a3)
      {
        v23 = *result;
      }
      else
      {
        v23 = *result;
        do
        {
          result = (uint64_t *)sub_20EE5FEDC(v9, v6);
          v6 += 15;
          v9 += 240;
          v23 += 240;
        }
        while (v6 != a3);
        v18 = v7[1];
      }
      while (v18 != v23)
      {
        v18 -= 240;
        result = (uint64_t *)sub_20E990F68(v18);
      }
      v7[1] = v23;
    }
    else
    {
      v19 = &a2[(v18 - v9) >> 4];
      if (v18 != v9)
      {
        v20 = 16 * ((v18 - v9) >> 4);
        do
        {
          result = (uint64_t *)sub_20EE5FEDC(v9, v6);
          v6 += 15;
          v9 += 240;
          v20 -= 240;
        }
        while (v20);
        v9 = v7[1];
      }
      v21 = v9;
      if (v19 != a3)
      {
        v22 = 0;
        do
        {
          result = (uint64_t *)sub_20EE5F348(v9 + v22 * 16, &v19[v22]);
          v22 += 15;
        }
        while (&v19[v22] != a3);
        v21 = v9 + v22 * 16;
      }
      v7[1] = v21;
    }
  }
  else
  {
    if (v9)
    {
      v10 = result[1];
      v11 = (void *)*result;
      if (v10 != v9)
      {
        do
        {
          v10 -= 240;
          sub_20E990F68(v10);
        }
        while (v10 != v9);
        v11 = (void *)*v7;
      }
      v7[1] = v9;
      operator delete(v11);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x111111111111111)
      goto LABEL_37;
    v12 = 0xEEEEEEEEEEEEEEEFLL * (v8 >> 4);
    v13 = 2 * v12;
    if (2 * v12 <= a4)
      v13 = a4;
    v14 = v12 >= 0x88888888888888 ? 0x111111111111111 : v13;
    if (v14 > 0x111111111111111)
LABEL_37:
      sub_20E867F44();
    v15 = 30 * v14;
    result = (uint64_t *)operator new(240 * v14);
    v16 = result;
    *v7 = (uint64_t)result;
    v7[1] = (uint64_t)result;
    v7[2] = (uint64_t)&result[v15];
    if (v6 != a3)
    {
      v17 = 0;
      do
      {
        result = (uint64_t *)sub_20EE5F348((uint64_t)&v16[v17 / 8], &v6[v17 / 0x10]);
        v17 += 240;
      }
      while (&v6[v17 / 0x10] != a3);
      v16 = (uint64_t *)((char *)v16 + v17);
    }
    v7[1] = (uint64_t)v16;
  }
  return result;
}

uint64_t sub_20EE5F348(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  char *v8;
  char *v9;
  _BYTE *v10;
  _BYTE *v11;
  int64_t v12;
  char *v13;
  char *v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  _BYTE *v25;
  _BYTE *v26;
  int64_t v27;
  char *v28;
  char *v29;

  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  sub_20EE5F668((_QWORD *)(a1 + 24), (uint64_t *)a2 + 3);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v6 = (_BYTE *)*((_QWORD *)a2 + 15);
  v5 = (_BYTE *)*((_QWORD *)a2 + 16);
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if (0x8E38E38E38E38E39 * (v7 >> 3) > 0x38E38E38E38E38ELL)
      sub_20EB849AC();
    v8 = (char *)operator new(v7);
    *(_QWORD *)(a1 + 120) = v8;
    *(_QWORD *)(a1 + 128) = v8;
    v9 = &v8[8 * (v7 >> 3)];
    *(_QWORD *)(a1 + 136) = v9;
    memcpy(v8, v6, v7);
    *(_QWORD *)(a1 + 128) = v9;
  }
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  v11 = (_BYTE *)*((_QWORD *)a2 + 18);
  v10 = (_BYTE *)*((_QWORD *)a2 + 19);
  v12 = v10 - v11;
  if (v10 != v11)
  {
    if (0x8E38E38E38E38E39 * (v12 >> 3) > 0x38E38E38E38E38ELL)
      sub_20EB849AC();
    v13 = (char *)operator new(v12);
    *(_QWORD *)(a1 + 144) = v13;
    *(_QWORD *)(a1 + 152) = v13;
    v14 = &v13[8 * (v12 >> 3)];
    *(_QWORD *)(a1 + 160) = v14;
    memcpy(v13, v11, v12);
    *(_QWORD *)(a1 + 152) = v14;
  }
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  v16 = (_BYTE *)*((_QWORD *)a2 + 21);
  v15 = (_BYTE *)*((_QWORD *)a2 + 22);
  v17 = v15 - v16;
  if (v15 != v16)
  {
    if (v17 < 0)
      sub_20E867F44();
    v18 = (char *)operator new(v15 - v16);
    *(_QWORD *)(a1 + 168) = v18;
    *(_QWORD *)(a1 + 176) = v18;
    v19 = &v18[16 * (v17 >> 4)];
    *(_QWORD *)(a1 + 184) = v19;
    memcpy(v18, v16, v17 - 7);
    *(_QWORD *)(a1 + 176) = v19;
  }
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  v21 = (_BYTE *)*((_QWORD *)a2 + 24);
  v20 = (_BYTE *)*((_QWORD *)a2 + 25);
  v22 = v20 - v21;
  if (v20 != v21)
  {
    if (v22 < 0)
      sub_20E867F44();
    v23 = (char *)operator new(v20 - v21);
    *(_QWORD *)(a1 + 192) = v23;
    *(_QWORD *)(a1 + 200) = v23;
    v24 = &v23[16 * (v22 >> 4)];
    *(_QWORD *)(a1 + 208) = v24;
    memcpy(v23, v21, v22 - 7);
    *(_QWORD *)(a1 + 200) = v24;
  }
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  v26 = (_BYTE *)*((_QWORD *)a2 + 27);
  v25 = (_BYTE *)*((_QWORD *)a2 + 28);
  v27 = v25 - v26;
  if (v25 != v26)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v27 >> 2) >= 0x1555555555555556)
      sub_20E867F44();
    v28 = (char *)operator new(v27);
    *(_QWORD *)(a1 + 216) = v28;
    *(_QWORD *)(a1 + 224) = v28;
    v29 = &v28[4 * (v27 >> 2)];
    *(_QWORD *)(a1 + 232) = v29;
    memcpy(v28, v26, v27 - 3);
    *(_QWORD *)(a1 + 224) = v29;
  }
  return a1;
}

void sub_20EE5F594(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;
  void **v7;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v9 = *v7;
  if (*v7)
  {
    v1[28] = v9;
    operator delete(v9);
    v10 = *v6;
    if (!*v6)
    {
LABEL_3:
      v11 = *v5;
      if (!*v5)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v10 = *v6;
    if (!*v6)
      goto LABEL_3;
  }
  v1[25] = v10;
  operator delete(v10);
  v11 = *v5;
  if (!*v5)
  {
LABEL_4:
    v12 = *v4;
    if (!*v4)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  v1[22] = v11;
  operator delete(v11);
  v12 = *v4;
  if (!*v4)
  {
LABEL_5:
    v13 = *v3;
    if (!*v3)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  v1[19] = v12;
  operator delete(v12);
  v13 = *v3;
  if (!*v3)
  {
LABEL_6:
    sub_20E990FD8(v2);
    _Unwind_Resume(a1);
  }
LABEL_11:
  v1[16] = v13;
  operator delete(v13);
  sub_20E990FD8(v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EE5F668(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v4;

  v4 = sub_20EE5F8DC(a1, (uint64_t)a2);
  sub_20EE5FA00(v4 + 3, (uint64_t)(a2 + 3));
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  sub_20EE5FB24(a1 + 6, a2[6], a2[7], 0xFAFAFAFAFAFAFAFBLL * ((a2[7] - a2[6]) >> 3));
  sub_20EE5FD7C(a1 + 9, a2 + 9);
  return a1;
}

void sub_20EE5F6F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  void **v11;
  void **v12;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  void *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  char *v25;
  void *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  char *v30;
  void *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  void **v35;

  v35 = v12;
  v14 = (char *)*v12;
  if (*v12)
  {
    v17 = (char *)v10[7];
    v18 = *v12;
    if (v17 != v14)
    {
      do
      {
        if (*(v17 - 8))
        {
          v19 = (std::__shared_weak_count *)*((_QWORD *)v17 - 38);
          if (v19)
          {
            p_shared_owners = (unint64_t *)&v19->__shared_owners_;
            do
              v21 = __ldaxr(p_shared_owners);
            while (__stlxr(v21 - 1, p_shared_owners));
            if (!v21)
            {
              ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
              std::__shared_weak_count::__release_weak(v19);
            }
          }
          v22 = (std::__shared_weak_count *)*((_QWORD *)v17 - 40);
          if (v22)
          {
            v23 = (unint64_t *)&v22->__shared_owners_;
            do
              v24 = __ldaxr(v23);
            while (__stlxr(v24 - 1, v23));
            if (!v24)
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v22);
            }
          }
        }
        v17 -= 408;
      }
      while (v17 != v14);
      v18 = *v35;
    }
    v10[7] = v14;
    operator delete(v18);
    v15 = (char *)*v11;
    if (!*v11)
    {
LABEL_3:
      v16 = (char *)*v10;
      if (!*v10)
        goto LABEL_4;
      goto LABEL_31;
    }
  }
  else
  {
    v15 = (char *)*v11;
    if (!*v11)
      goto LABEL_3;
  }
  v25 = (char *)v10[4];
  v26 = v15;
  if (v25 != v15)
  {
    do
    {
      v27 = (std::__shared_weak_count *)*((_QWORD *)v25 - 1);
      if (v27)
      {
        v28 = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      v25 -= 16;
    }
    while (v25 != v15);
    v26 = *v11;
  }
  v10[4] = v15;
  operator delete(v26);
  v16 = (char *)*v10;
  if (!*v10)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_31:
  v30 = (char *)v10[1];
  v31 = v16;
  if (v30 != v16)
  {
    do
    {
      v32 = (std::__shared_weak_count *)*((_QWORD *)v30 - 1);
      if (v32)
      {
        v33 = (unint64_t *)&v32->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      v30 -= 16;
    }
    while (v30 != v16);
    v31 = *v10;
  }
  v10[1] = v16;
  operator delete(v31);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EE5F8DC(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *(_QWORD **)a2;
  v4 = *(_QWORD **)(a2 + 8);
  v5 = (uint64_t)v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD **)a2)
  {
    if (v5 < 0)
      sub_20E867F44();
    v6 = operator new((size_t)v4 - *(_QWORD *)a2);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[2 * (v5 >> 4)];
    do
    {
      v7 = v3[1];
      *v6 = *v3;
      v6[1] = v7;
      if (v7)
      {
        v8 = (unint64_t *)(v7 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      v3 += 2;
      v6 += 2;
    }
    while (v3 != v4);
    a1[1] = v6;
  }
  return a1;
}

void sub_20EE5F984(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v3;
  char *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v3 = (char *)*v1;
  if (*v1)
  {
    v4 = (char *)v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      do
      {
        v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 16;
      }
      while (v4 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EE5FA00(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *(_QWORD **)a2;
  v4 = *(_QWORD **)(a2 + 8);
  v5 = (uint64_t)v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD **)a2)
  {
    if (v5 < 0)
      sub_20E867F44();
    v6 = operator new((size_t)v4 - *(_QWORD *)a2);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[2 * (v5 >> 4)];
    do
    {
      v7 = v3[1];
      *v6 = *v3;
      v6[1] = v7;
      if (v7)
      {
        v8 = (unint64_t *)(v7 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      v3 += 2;
      v6 += 2;
    }
    while (v3 != v4);
    a1[1] = v6;
  }
  return a1;
}

void sub_20EE5FAA8(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v3;
  char *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v3 = (char *)*v1;
  if (*v1)
  {
    v4 = (char *)v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      do
      {
        v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 16;
      }
      while (v4 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EE5FB24(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  _QWORD *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;

  if (a4)
  {
    v5 = result;
    if (a4 >= 0xA0A0A0A0A0A0A1)
      sub_20E867F44();
    result = operator new(408 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    for (v5[2] = &result[51 * a4]; a2 != a3; v8 += 51)
    {
      *(_BYTE *)v8 = 0;
      *((_BYTE *)v8 + 400) = 0;
      if (*(_BYTE *)(a2 + 400))
      {
        v9 = *(_OWORD *)(a2 + 48);
        *((_OWORD *)v8 + 2) = *(_OWORD *)(a2 + 32);
        *((_OWORD *)v8 + 3) = v9;
        *(_OWORD *)((char *)v8 + 57) = *(_OWORD *)(a2 + 57);
        v10 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)v8 = *(_OWORD *)a2;
        *((_OWORD *)v8 + 1) = v10;
        v11 = *(_QWORD *)(a2 + 88);
        v8[10] = *(_QWORD *)(a2 + 80);
        v8[11] = v11;
        if (v11)
        {
          v12 = (unint64_t *)(v11 + 8);
          do
            v13 = __ldxr(v12);
          while (__stxr(v13 + 1, v12));
        }
        v14 = *(_QWORD *)(a2 + 104);
        v8[12] = *(_QWORD *)(a2 + 96);
        v8[13] = v14;
        if (v14)
        {
          v15 = (unint64_t *)(v14 + 8);
          do
            v16 = __ldxr(v15);
          while (__stxr(v16 + 1, v15));
        }
        result = memcpy(v8 + 14, (const void *)(a2 + 112), 0x120uLL);
        *((_BYTE *)v8 + 400) = 1;
      }
      a2 += 408;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_20EE5FC58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20EE5FC6C(&a9);
  _Unwind_Resume(a1);
}

void ***sub_20EE5FC6C(void ***result)
{
  void ***v1;
  void **v2;
  char *v3;
  char *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (char *)**result;
    if (v3)
    {
      v4 = (char *)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*(v4 - 8))
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 38);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v9 = (std::__shared_weak_count *)*((_QWORD *)v4 - 40);
            if (v9)
            {
              v10 = (unint64_t *)&v9->__shared_owners_;
              do
                v11 = __ldaxr(v10);
              while (__stlxr(v11 - 1, v10));
              if (!v11)
              {
                ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
                std::__shared_weak_count::__release_weak(v9);
              }
            }
          }
          v4 -= 408;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

_QWORD *sub_20EE5FD7C(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 != *a2)
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 3);
    if (v6 >= 0xAAAAAAAAAAAAAABLL)
      sub_20E867F44();
    v7 = (char *)operator new(v5);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[24 * v6];
    do
    {
      *v7 = 0;
      v7[16] = 0;
      if (*(_BYTE *)(v3 + 16))
      {
        v8 = *(_QWORD *)(v3 + 8);
        *(_QWORD *)v7 = *(_QWORD *)v3;
        *((_QWORD *)v7 + 1) = v8;
        if (v8)
        {
          v9 = (unint64_t *)(v8 + 8);
          do
            v10 = __ldxr(v9);
          while (__stxr(v10 + 1, v9));
        }
        v7[16] = 1;
      }
      v3 += 24;
      v7 += 24;
    }
    while (v3 != v4);
    a1[1] = v7;
  }
  return a1;
}

void sub_20EE5FE58(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v3;
  char *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v3 = (char *)*v1;
  if (*v1)
  {
    v4 = (char *)v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      do
      {
        if (*(v4 - 8))
        {
          v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 2);
          if (v6)
          {
            p_shared_owners = (unint64_t *)&v6->__shared_owners_;
            do
              v8 = __ldaxr(p_shared_owners);
            while (__stlxr(v8 - 1, p_shared_owners));
            if (!v8)
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
          }
        }
        v4 -= 24;
      }
      while (v4 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EE5FEDC(uint64_t a1, __int128 *a2)
{
  __int128 v3;

  v3 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v3;
  if ((__int128 *)a1 != a2)
  {
    sub_20EE60014(a1 + 24, *((_QWORD **)a2 + 3), *((_QWORD **)a2 + 4), (uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 4);
    sub_20EE60014(a1 + 48, *((_QWORD **)a2 + 6), *((_QWORD **)a2 + 7), (uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 4);
    sub_20EE60358((uint64_t *)(a1 + 72), *((_QWORD *)a2 + 9), *((_QWORD *)a2 + 10), 0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(*((_QWORD *)a2 + 10) - *((_QWORD *)a2 + 9)) >> 3));
    sub_20EE607D8((uint64_t *)(a1 + 96), *((uint64_t **)a2 + 12), *((uint64_t **)a2 + 13), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 13) - *((_QWORD *)a2 + 12)) >> 3));
    sub_20EDB66F4((_QWORD *)(a1 + 120), *((char **)a2 + 15), *((char **)a2 + 16), 0x8E38E38E38E38E39 * ((uint64_t)(*((_QWORD *)a2 + 16) - *((_QWORD *)a2 + 15)) >> 3));
    sub_20EDB66F4((_QWORD *)(a1 + 144), *((char **)a2 + 18), *((char **)a2 + 19), 0x8E38E38E38E38E39 * ((uint64_t)(*((_QWORD *)a2 + 19) - *((_QWORD *)a2 + 18)) >> 3));
    sub_20EE60BD8((_QWORD *)(a1 + 168), *((char **)a2 + 21), *((char **)a2 + 22), (uint64_t)(*((_QWORD *)a2 + 22) - *((_QWORD *)a2 + 21)) >> 4);
    sub_20EE60BD8((_QWORD *)(a1 + 192), *((char **)a2 + 24), *((char **)a2 + 25), (uint64_t)(*((_QWORD *)a2 + 25) - *((_QWORD *)a2 + 24)) >> 4);
    sub_20EE60D24((_QWORD *)(a1 + 216), *((char **)a2 + 27), *((char **)a2 + 28), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 28) - *((_QWORD *)a2 + 27)) >> 2));
  }
  return a1;
}

void sub_20EE60014(uint64_t a1, _QWORD *a2, _QWORD *a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  BOOL v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;

  v6 = a2;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(char **)a1;
  if (__sz > (v8 - *(_QWORD *)a1) >> 4)
  {
    if (v9)
    {
      v10 = *(char **)(a1 + 8);
      v11 = *(char **)a1;
      if (v10 != v9)
      {
        do
        {
          v12 = (std::__shared_weak_count *)*((_QWORD *)v10 - 1);
          if (v12)
          {
            p_shared_owners = (unint64_t *)&v12->__shared_owners_;
            do
              v14 = __ldaxr(p_shared_owners);
            while (__stlxr(v14 - 1, p_shared_owners));
            if (!v14)
            {
              ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
              std::__shared_weak_count::__release_weak(v12);
            }
          }
          v10 -= 16;
        }
        while (v10 != v9);
        v11 = *(char **)a1;
      }
      *(_QWORD *)(a1 + 8) = v9;
      operator delete(v11);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (__sz >> 60)
      goto LABEL_68;
    v33 = v8 >> 3;
    if (v8 >> 3 <= __sz)
      v33 = __sz;
    v34 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    v35 = 0xFFFFFFFFFFFFFFFLL;
    if (!v34)
      v35 = v33;
    if (v35 >> 60)
LABEL_68:
      sub_20E867F44();
    v36 = 2 * v35;
    v37 = operator new(16 * v35);
    *(_QWORD *)a1 = v37;
    *(_QWORD *)(a1 + 8) = v37;
    *(_QWORD *)(a1 + 16) = &v37[v36];
    while (v6 != a3)
    {
      v38 = v6[1];
      *v37 = *v6;
      v37[1] = v38;
      if (v38)
      {
        v39 = (unint64_t *)(v38 + 8);
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
      }
      v6 += 2;
      v37 += 2;
    }
    *(_QWORD *)(a1 + 8) = v37;
    return;
  }
  v15 = *(char **)(a1 + 8);
  v16 = (v15 - v9) >> 4;
  if (v16 < __sz)
  {
    v17 = &a2[2 * v16];
    if (v15 == v9)
    {
      v18 = *(char **)a1;
      if (v17 == a3)
      {
LABEL_58:
        *(_QWORD *)(a1 + 8) = v18;
        return;
      }
    }
    else
    {
      do
      {
        v20 = *v6;
        v19 = v6[1];
        if (v19)
        {
          v21 = (unint64_t *)(v19 + 8);
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        v23 = (std::__shared_weak_count *)*((_QWORD *)v9 + 1);
        *(_QWORD *)v9 = v20;
        *((_QWORD *)v9 + 1) = v19;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v6 += 2;
        v9 += 16;
      }
      while (v6 != v17);
      v9 = *(char **)(a1 + 8);
      v18 = v9;
      if (v17 == a3)
        goto LABEL_58;
    }
    v18 = v9;
    do
    {
      v41 = v17[1];
      *(_QWORD *)v18 = *v17;
      *((_QWORD *)v18 + 1) = v41;
      if (v41)
      {
        v42 = (unint64_t *)(v41 + 8);
        do
          v43 = __ldxr(v42);
        while (__stxr(v43 + 1, v42));
      }
      v17 += 2;
      v18 += 16;
    }
    while (v17 != a3);
    goto LABEL_58;
  }
  if (a2 != a3)
  {
    do
    {
      v27 = *v6;
      v26 = v6[1];
      if (v26)
      {
        v28 = (unint64_t *)(v26 + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v30 = (std::__shared_weak_count *)*((_QWORD *)v9 + 1);
      *(_QWORD *)v9 = v27;
      *((_QWORD *)v9 + 1) = v26;
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      v6 += 2;
      v9 += 16;
    }
    while (v6 != a3);
    v15 = *(char **)(a1 + 8);
  }
  while (v15 != v9)
  {
    v44 = (std::__shared_weak_count *)*((_QWORD *)v15 - 1);
    if (v44)
    {
      v45 = (unint64_t *)&v44->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    v15 -= 16;
  }
  *(_QWORD *)(a1 + 8) = v9;
}

void sub_20EE60358(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;

  v6 = a2;
  v8 = a1[2];
  v9 = *a1;
  if (0xFAFAFAFAFAFAFAFBLL * ((v8 - *a1) >> 3) < a4)
  {
    if (!v9)
      goto LABEL_42;
    v10 = a1[1];
    v11 = (void *)*a1;
    if (v10 == v9)
    {
LABEL_41:
      a1[1] = v9;
      operator delete(v11);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
LABEL_42:
      if (a4 > 0xA0A0A0A0A0A0A0)
        goto LABEL_78;
      v32 = 0xFAFAFAFAFAFAFAFBLL * (v8 >> 3);
      v33 = 2 * v32;
      if (2 * v32 <= a4)
        v33 = a4;
      v34 = v32 >= 0x50505050505050 ? 0xA0A0A0A0A0A0A0 : v33;
      if (v34 > 0xA0A0A0A0A0A0A0)
LABEL_78:
        sub_20E867F44();
      v35 = 408 * v34;
      v36 = (char *)operator new(408 * v34);
      *a1 = (uint64_t)v36;
      a1[1] = (uint64_t)v36;
      for (a1[2] = (uint64_t)&v36[v35]; v6 != a3; v36 += 408)
      {
        *v36 = 0;
        v36[400] = 0;
        if (*(_BYTE *)(v6 + 400))
        {
          v37 = *(_OWORD *)(v6 + 48);
          *((_OWORD *)v36 + 2) = *(_OWORD *)(v6 + 32);
          *((_OWORD *)v36 + 3) = v37;
          *(_OWORD *)(v36 + 57) = *(_OWORD *)(v6 + 57);
          v38 = *(_OWORD *)(v6 + 16);
          *(_OWORD *)v36 = *(_OWORD *)v6;
          *((_OWORD *)v36 + 1) = v38;
          v39 = *(_QWORD *)(v6 + 88);
          *((_QWORD *)v36 + 10) = *(_QWORD *)(v6 + 80);
          *((_QWORD *)v36 + 11) = v39;
          if (v39)
          {
            v40 = (unint64_t *)(v39 + 8);
            do
              v41 = __ldxr(v40);
            while (__stxr(v41 + 1, v40));
          }
          v42 = *(_QWORD *)(v6 + 104);
          *((_QWORD *)v36 + 12) = *(_QWORD *)(v6 + 96);
          *((_QWORD *)v36 + 13) = v42;
          if (v42)
          {
            v43 = (unint64_t *)(v42 + 8);
            do
              v44 = __ldxr(v43);
            while (__stxr(v44 + 1, v43));
          }
          memcpy(v36 + 112, (const void *)(v6 + 112), 0x120uLL);
          v36[400] = 1;
        }
        v6 += 408;
      }
      a1[1] = (uint64_t)v36;
      return;
    }
    while (1)
    {
      if (*(_BYTE *)(v10 - 8))
      {
        v12 = *(std::__shared_weak_count **)(v10 - 304);
        if (!v12)
          goto LABEL_11;
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
          v15 = *(std::__shared_weak_count **)(v10 - 320);
          if (v15)
          {
LABEL_12:
            v16 = (unint64_t *)&v15->__shared_owners_;
            do
              v17 = __ldaxr(v16);
            while (__stlxr(v17 - 1, v16));
            if (!v17)
            {
              ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
              std::__shared_weak_count::__release_weak(v15);
            }
          }
        }
        else
        {
LABEL_11:
          v15 = *(std::__shared_weak_count **)(v10 - 320);
          if (v15)
            goto LABEL_12;
        }
      }
      v10 -= 408;
      if (v10 == v9)
      {
        v11 = (void *)*a1;
        goto LABEL_41;
      }
    }
  }
  v18 = a1[1];
  if (0xFAFAFAFAFAFAFAFBLL * ((v18 - v9) >> 3) >= a4)
  {
    if (a2 == a3)
    {
      v31 = *a1;
    }
    else
    {
      v31 = *a1;
      do
      {
        sub_20E9BF624(v9, v6);
        v6 += 408;
        v9 += 408;
        v31 += 408;
      }
      while (v6 != a3);
      v18 = a1[1];
    }
    while (1)
    {
      if (v18 == v31)
      {
        a1[1] = v31;
        return;
      }
      if (*(_BYTE *)(v18 - 8))
      {
        v45 = *(std::__shared_weak_count **)(v18 - 304);
        if (!v45)
          goto LABEL_70;
        v46 = (unint64_t *)&v45->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
          v48 = *(std::__shared_weak_count **)(v18 - 320);
          if (!v48)
            goto LABEL_63;
        }
        else
        {
LABEL_70:
          v48 = *(std::__shared_weak_count **)(v18 - 320);
          if (!v48)
            goto LABEL_63;
        }
        v49 = (unint64_t *)&v48->__shared_owners_;
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
LABEL_63:
      v18 -= 408;
    }
  }
  v19 = a2 + 8 * ((v18 - v9) >> 3);
  if (v18 != v9)
  {
    v20 = 8 * ((v18 - v9) >> 3);
    do
    {
      sub_20E9BF624(v9, v6);
      v6 += 408;
      v9 += 408;
      v20 -= 408;
    }
    while (v20);
    v9 = a1[1];
  }
  v21 = v9;
  if (v19 != a3)
  {
    v21 = v9;
    do
    {
      *(_BYTE *)v21 = 0;
      *(_BYTE *)(v21 + 400) = 0;
      if (*(_BYTE *)(v19 + 400))
      {
        *(_OWORD *)v21 = *(_OWORD *)v19;
        v22 = *(_OWORD *)(v19 + 16);
        v23 = *(_OWORD *)(v19 + 32);
        v24 = *(_OWORD *)(v19 + 48);
        *(_OWORD *)(v21 + 57) = *(_OWORD *)(v19 + 57);
        *(_OWORD *)(v21 + 32) = v23;
        *(_OWORD *)(v21 + 48) = v24;
        *(_OWORD *)(v21 + 16) = v22;
        v25 = *(_QWORD *)(v19 + 88);
        *(_QWORD *)(v21 + 80) = *(_QWORD *)(v19 + 80);
        *(_QWORD *)(v21 + 88) = v25;
        if (v25)
        {
          v26 = (unint64_t *)(v25 + 8);
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
        }
        v28 = *(_QWORD *)(v19 + 104);
        *(_QWORD *)(v21 + 96) = *(_QWORD *)(v19 + 96);
        *(_QWORD *)(v21 + 104) = v28;
        if (v28)
        {
          v29 = (unint64_t *)(v28 + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
        }
        memcpy((void *)(v21 + 112), (const void *)(v19 + 112), 0x120uLL);
        *(_BYTE *)(v21 + 400) = 1;
      }
      v19 += 408;
      v21 += 408;
    }
    while (v19 != a3);
  }
  a1[1] = v21;
}

void sub_20EE607D8(uint64_t *a1, uint64_t *a2, uint64_t *a3, size_t __sz)
{
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t i;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  char v34;
  char v35;

  v6 = a2;
  v8 = a1[2];
  v9 = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *a1) >> 3) >= __sz)
  {
    if (0xAAAAAAAAAAAAAAABLL * ((a1[1] - v9) >> 3) >= __sz)
    {
      sub_20EE60A9C((uint64_t)&v35, a2, a3, v9);
      v21 = v20;
      v22 = a1[1];
      if (v22 != v20)
      {
        do
        {
          if (*(_BYTE *)(v22 - 8))
          {
            v23 = *(std::__shared_weak_count **)(v22 - 16);
            if (v23)
            {
              p_shared_owners = (unint64_t *)&v23->__shared_owners_;
              do
                v25 = __ldaxr(p_shared_owners);
              while (__stlxr(v25 - 1, p_shared_owners));
              if (!v25)
              {
                ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
                std::__shared_weak_count::__release_weak(v23);
              }
            }
          }
          v22 -= 24;
        }
        while (v22 != v21);
      }
      a1[1] = v21;
    }
    else
    {
      v15 = &a2[(a1[1] - v9) >> 3];
      sub_20EE60A9C((uint64_t)&v34, a2, v15, v9);
      for (i = a1[1]; v15 != a3; i += 24)
      {
        *(_BYTE *)i = 0;
        *(_BYTE *)(i + 16) = 0;
        if (*((_BYTE *)v15 + 16))
        {
          v17 = v15[1];
          *(_QWORD *)i = *v15;
          *(_QWORD *)(i + 8) = v17;
          if (v17)
          {
            v18 = (unint64_t *)(v17 + 8);
            do
              v19 = __ldxr(v18);
            while (__stxr(v19 + 1, v18));
          }
          *(_BYTE *)(i + 16) = 1;
        }
        v15 += 3;
      }
      a1[1] = i;
    }
  }
  else
  {
    if (v9)
    {
      v10 = a1[1];
      v11 = (void *)*a1;
      if (v10 != v9)
      {
        do
        {
          if (*(_BYTE *)(v10 - 8))
          {
            v12 = *(std::__shared_weak_count **)(v10 - 16);
            if (v12)
            {
              v13 = (unint64_t *)&v12->__shared_owners_;
              do
                v14 = __ldaxr(v13);
              while (__stlxr(v14 - 1, v13));
              if (!v14)
              {
                ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
                std::__shared_weak_count::__release_weak(v12);
              }
            }
          }
          v10 -= 24;
        }
        while (v10 != v9);
        v11 = (void *)*a1;
      }
      a1[1] = v9;
      operator delete(v11);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_52;
    v26 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v27 = 2 * v26;
    if (2 * v26 <= __sz)
      v27 = __sz;
    v28 = v26 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v27;
    if (v28 > 0xAAAAAAAAAAAAAAALL)
LABEL_52:
      sub_20E867F44();
    v29 = 24 * v28;
    v30 = (char *)operator new(24 * v28);
    *a1 = (uint64_t)v30;
    a1[1] = (uint64_t)v30;
    for (a1[2] = (uint64_t)&v30[v29]; v6 != a3; v30 += 24)
    {
      *v30 = 0;
      v30[16] = 0;
      if (*((_BYTE *)v6 + 16))
      {
        v31 = v6[1];
        *(_QWORD *)v30 = *v6;
        *((_QWORD *)v30 + 1) = v31;
        if (v31)
        {
          v32 = (unint64_t *)(v31 + 8);
          do
            v33 = __ldxr(v32);
          while (__stxr(v33 + 1, v32));
        }
        v30[16] = 1;
      }
      v6 += 3;
    }
    a1[1] = (uint64_t)v30;
  }
}

uint64_t *sub_20EE60A9C(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (*(unsigned __int8 *)(a4 + 16) == *((unsigned __int8 *)v5 + 16))
      {
        if (*(_BYTE *)(a4 + 16))
        {
          v8 = *v5;
          v7 = v5[1];
          if (v7)
          {
            v9 = (unint64_t *)(v7 + 8);
            do
              v10 = __ldxr(v9);
            while (__stxr(v10 + 1, v9));
          }
          v11 = *(std::__shared_weak_count **)(a4 + 8);
          *(_QWORD *)a4 = v8;
          *(_QWORD *)(a4 + 8) = v7;
          if (v11)
          {
            p_shared_owners = (unint64_t *)&v11->__shared_owners_;
            do
              v13 = __ldaxr(p_shared_owners);
            while (__stlxr(v13 - 1, p_shared_owners));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
        }
      }
      else if (*(_BYTE *)(a4 + 16))
      {
        v14 = *(std::__shared_weak_count **)(a4 + 8);
        if (v14)
        {
          v15 = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        *(_BYTE *)(a4 + 16) = 0;
      }
      else
      {
        v17 = v5[1];
        *(_QWORD *)a4 = *v5;
        *(_QWORD *)(a4 + 8) = v17;
        if (v17)
        {
          v18 = (unint64_t *)(v17 + 8);
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 1, v18));
        }
        *(_BYTE *)(a4 + 16) = 1;
      }
      v5 += 3;
      a4 += 24;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

_QWORD *sub_20EE60BD8(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  size_t v19;
  void *v20;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 60)
      goto LABEL_22;
    v10 = v8 >> 3;
    if (v8 >> 3 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    v12 = 0xFFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 60)
LABEL_22:
      sub_20E867F44();
    v13 = 2 * v12;
    result = operator new(16 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14 - 7);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 4;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = v14 - 7;
    v20 = (void *)*result;
LABEL_20:
    result = memmove(v20, __src, v19);
    goto LABEL_21;
  }
  v18 = &__src[16 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9 - 7);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v14 - 7;
    v20 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

_QWORD *sub_20EE60D24(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  _BYTE *v16;
  char *v17;
  size_t v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *result) >> 2) < __sz)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz > 0x1555555555555555)
      goto LABEL_23;
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 2);
    v11 = 2 * v10;
    if (2 * v10 <= __sz)
      v11 = __sz;
    v12 = v10 >= 0xAAAAAAAAAAAAAAALL ? 0x1555555555555555 : v11;
    if (v12 > 0x1555555555555555)
LABEL_23:
      sub_20E867F44();
    v13 = 12 * v12;
    result = operator new(12 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14 - 3);
    v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v16 - v9) >> 2) >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_22;
    v18 = v14 - 3;
    v19 = (void *)*result;
LABEL_21:
    result = memmove(v19, __src, v18);
    goto LABEL_22;
  }
  v17 = &__src[4 * ((v16 - v9) >> 2)];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9 - 3);
    v9 = (char *)*v15;
  }
  v14 = a3 - v17;
  if (v14)
  {
    v18 = v14 - 3;
    v19 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  *v15 = &v9[v14];
  return result;
}

void **sub_20EE60EA4(void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((_BYTE *)v3 - 8) && *((char *)v3 - 9) < 0)
          operator delete(*(v3 - 4));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_20EE60F1C(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  size_t v6;
  unint64_t v7;
  _DWORD *v8;
  _QWORD *v9;
  _DWORD *i;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = a2;
  v6 = (char *)a3 - (char *)a2;
  v7 = ((char *)a3 - (char *)a2) >> 5;
  if (v7 <= a1[2])
  {
    v11 = (_QWORD *)*a1;
    v12 = a1[1];
    v13 = v12 - v7;
    if (v12 >= v7)
    {
      if (a3 != a2)
      {
        v20 = ((char *)a3 - (char *)a2) >> 5;
        do
        {
          v21 = *v4;
          *((_DWORD *)v11 + 2) = *((_DWORD *)v4 + 2);
          *v11 = v21;
          v22 = v4[2];
          *((_DWORD *)v11 + 6) = *((_DWORD *)v4 + 6);
          v11[2] = v22;
          v11 += 4;
          v4 += 4;
          --v20;
        }
        while (v20);
      }
    }
    else
    {
      if (v12)
      {
        v14 = a1[1];
        do
        {
          v15 = *v4;
          *((_DWORD *)v11 + 2) = *((_DWORD *)v4 + 2);
          *v11 = v15;
          v16 = v4[2];
          *((_DWORD *)v11 + 6) = *((_DWORD *)v4 + 6);
          v11[2] = v16;
          v4 += 4;
          v11 += 4;
          --v14;
        }
        while (v14);
      }
      if (v7 != v12)
      {
        do
        {
          v17 = *v4;
          *((_DWORD *)v11 + 2) = *((_DWORD *)v4 + 2);
          *v11 = v17;
          v18 = v4[2];
          *((_DWORD *)v11 + 6) = *((_DWORD *)v4 + 6);
          v11[2] = v18;
          v11 += 4;
          v4 += 4;
        }
        while (!__CFADD__(v13++, 1));
      }
    }
    a1[1] = v7;
  }
  else
  {
    if (v6 >= 0x7FFFFFFFFFFFFFE1)
      sub_20E969408((uint64_t)"get_next_capacity, allocator's max size reached");
    v8 = operator new(v6);
    v9 = (_QWORD *)*a1;
    if (*a1)
    {
      a1[1] = 0;
      if (a1 + 3 != v9)
        operator delete(v9);
    }
    a1[1] = 0;
    a1[2] = v7;
    *a1 = v8;
    for (i = v8; v4 != a3; v4 += 4)
    {
      *(_QWORD *)i = *v4;
      i[2] = *((_DWORD *)v4 + 2);
      *((_QWORD *)i + 2) = v4[2];
      i[6] = *((_DWORD *)v4 + 6);
      i += 8;
    }
    a1[1] = ((char *)i - (char *)v8) >> 5;
  }
}

uint64_t sub_20EE610C8(uint64_t result, __int128 *a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  _BYTE v34[288];
  _QWORD v35[37];
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t *v46;
  uint64_t v47;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t **v54[2];

  v2 = *(_QWORD *)(**(_QWORD **)result + 11472);
  if (!*(_BYTE *)(v2 + 2321))
  {
    v3 = *(_QWORD *)(v2 + 56);
    if (v3)
    {
      v19 = *a2;
      v20 = *((_QWORD *)a2 + 2);
      *(_QWORD *)a2 = 0;
      *((_QWORD *)a2 + 1) = 0;
      v21 = *(__int128 *)((char *)a2 + 24);
      v22 = *((_QWORD *)a2 + 5);
      *((_QWORD *)a2 + 2) = 0;
      *((_QWORD *)a2 + 3) = 0;
      *((_QWORD *)a2 + 4) = 0;
      *((_QWORD *)a2 + 5) = 0;
      v5 = a2[4];
      v23 = a2[3];
      v24 = v5;
      v6 = a2[5];
      v7 = a2[6];
      v8 = a2[8];
      v27 = a2[7];
      v28 = v8;
      v25 = v6;
      v26 = v7;
      v9 = a2[9];
      v10 = a2[10];
      v11 = a2[11];
      v12 = a2[12];
      v33 = *((_QWORD *)a2 + 26);
      v31 = v11;
      v32 = v12;
      v29 = v9;
      v30 = v10;
      memcpy(v34, (char *)a2 + 216, sizeof(v34));
      memcpy(v35, (char *)a2 + 504, sizeof(v35));
      *((_QWORD *)a2 + 99) = 0;
      v13 = a2[50];
      v14 = a2[51];
      *((_QWORD *)a2 + 100) = 0;
      *((_QWORD *)a2 + 101) = 0;
      v36 = v13;
      v37 = v14;
      v38 = *((_QWORD *)a2 + 104);
      v39 = *(__int128 *)((char *)a2 + 840);
      v40 = *((_QWORD *)a2 + 107);
      v15 = a2[54];
      v16 = a2[55];
      v43 = *((_QWORD *)a2 + 112);
      v41 = v15;
      v42 = v16;
      v44 = *((_QWORD *)a2 + 113);
      v45 = a2[57];
      *((_QWORD *)a2 + 113) = 0;
      *((_QWORD *)a2 + 114) = 0;
      *((_QWORD *)a2 + 115) = 0;
      v46 = (uint64_t *)*((_QWORD *)a2 + 116);
      v17 = *((_QWORD *)a2 + 117);
      v47 = v17;
      if (*((_QWORD *)a2 + 118))
      {
        *(_QWORD *)(v17 + 16) = &v47;
        *((_QWORD *)a2 + 116) = (char *)a2 + 936;
        *((_QWORD *)a2 + 117) = 0;
        *((_QWORD *)a2 + 118) = 0;
      }
      else
      {
        v46 = &v47;
      }
      v18 = *(__int128 *)((char *)a2 + 968);
      v49 = *(__int128 *)((char *)a2 + 952);
      v50 = v18;
      v51 = *((_QWORD *)a2 + 123);
      v52 = 0;
      v53 = v3;
      v54[0] = (uint64_t **)&v53;
      result = sub_20F22CADC(v54, (uint64_t)&v19);
      if (v52 != -1)
        return ((uint64_t (*)(uint64_t ***, __int128 *))off_24C9EDD20[v52])(v54, &v19);
    }
  }
  return result;
}

void sub_20EE61290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;

  v11 = LODWORD(STACK[0x3E0]);
  if ((_DWORD)v11 != -1)
    ((void (*)(uint64_t, uint64_t *))off_24C9EDD20[v11])(v9 - 33, &a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE612C4(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  char v34;
  int v35;
  uint64_t v36;
  uint64_t *v37;

  v2 = *(_QWORD *)(**(_QWORD **)result + 11472);
  if (!*(_BYTE *)(v2 + 2321))
  {
    v3 = *(_QWORD *)(v2 + 56);
    if (v3)
    {
      v9 = *(_OWORD *)a2;
      v10 = *(_QWORD *)(a2 + 16);
      v11 = *(_OWORD *)(a2 + 24);
      *(_QWORD *)(a2 + 24) = 0;
      *(_QWORD *)(a2 + 32) = 0;
      v4 = *(_QWORD *)(a2 + 40);
      v5 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a2 + 40) = 0;
      v12 = v4;
      v13 = v5;
      v18 = *(_OWORD *)(a2 + 120);
      v19 = *(_OWORD *)(a2 + 136);
      v20 = *(_OWORD *)(a2 + 152);
      v21 = *(_OWORD *)(a2 + 168);
      v14 = *(_OWORD *)(a2 + 56);
      v15 = *(_OWORD *)(a2 + 72);
      v16 = *(_OWORD *)(a2 + 88);
      v17 = *(_OWORD *)(a2 + 104);
      v6 = *(_OWORD *)(a2 + 296);
      v7 = *(_OWORD *)(a2 + 264);
      v28 = *(_OWORD *)(a2 + 280);
      v29 = v6;
      v27 = v7;
      v25 = *(_OWORD *)(a2 + 232);
      v24 = *(_OWORD *)(a2 + 216);
      v23 = *(_OWORD *)(a2 + 200);
      v22 = *(_OWORD *)(a2 + 184);
      v26 = *(_OWORD *)(a2 + 248);
      v8 = *(_QWORD *)(a2 + 328);
      v30 = *(_OWORD *)(a2 + 312);
      v31 = v8;
      LOBYTE(v32) = 0;
      v34 = 0;
      if (*(_BYTE *)(a2 + 360))
      {
        v32 = *(_OWORD *)(a2 + 336);
        v33 = *(_QWORD *)(a2 + 352);
        *(_QWORD *)(a2 + 344) = 0;
        *(_QWORD *)(a2 + 352) = 0;
        *(_QWORD *)(a2 + 336) = 0;
        v34 = 1;
      }
      v35 = 1;
      v36 = v3;
      v37 = &v36;
      result = sub_20F22CDA8(&v37, &v9);
      if (v35 != -1)
        return ((uint64_t (*)(uint64_t **, __int128 *))off_24C9EDD20[v35])(&v37, &v9);
    }
  }
  return result;
}

void sub_20EE61448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;

  v11 = LODWORD(STACK[0x3E0]);
  if ((_DWORD)v11 != -1)
    ((void (*)(uint64_t, uint64_t *))off_24C9EDD20[v11])(v9 - 33, &a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE6147C(uint64_t result, __int128 *a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v11[10];
  _BYTE v12[288];
  int v13;
  char v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;

  v2 = *(_QWORD *)(**(_QWORD **)result + 11472);
  if (!*(_BYTE *)(v2 + 2321))
  {
    v3 = *(_QWORD *)(v2 + 56);
    if (v3)
    {
      v5 = a2[1];
      v10 = *a2;
      v11[0] = v5;
      *(_OWORD *)((char *)v11 + 12) = *(__int128 *)((char *)a2 + 28);
      v6 = a2[8];
      v11[6] = a2[7];
      v11[7] = v6;
      v7 = a2[10];
      v11[8] = a2[9];
      v11[9] = v7;
      v8 = a2[4];
      v11[2] = a2[3];
      v11[3] = v8;
      v9 = a2[6];
      v11[4] = a2[5];
      v11[5] = v9;
      memcpy(v12, a2 + 11, sizeof(v12));
      v13 = *((_DWORD *)a2 + 116);
      v14 = *((_BYTE *)a2 + 468);
      v15 = 2;
      v16 = v3;
      v17 = &v16;
      result = sub_20F22D258(&v17, (uint64_t)&v10);
      if (v15 != -1)
        return ((uint64_t (*)(uint64_t **, __int128 *))off_24C9EDD20[v15])(&v17, &v10);
    }
  }
  return result;
}

void sub_20EE61560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;

  v11 = LODWORD(STACK[0x3E0]);
  if ((_DWORD)v11 != -1)
    ((void (*)(uint64_t, uint64_t *))off_24C9EDD20[v11])(v9 - 49, &a9);
  _Unwind_Resume(a1);
}

void sub_20EE61594(uint64_t a1, uint64_t *a2)
{
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  uint64_t *v24;
  void *__p;
  char *v26;

  v3 = std::chrono::system_clock::now().__d_.__rep_ / 1000000;
  __p = a2 + 20;
  sub_20EE61B18((uint64_t)(a2 + 45), (unint64_t *)a2 + 20, (uint64_t)&unk_2102DB95C, (_QWORD **)&__p)[3] = v3;
  v4 = (_QWORD *)a2[53];
  if (v4 && (v5 = (_QWORD *)*v4, v5[8]) && (v6 = (_QWORD *)v5[6], v7 = v5 + 7, v6 != v7))
  {
    v8 = v6[4];
    while (v6[4] == v8)
    {
      v9 = (_QWORD *)v6[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v6[2];
          v11 = *v10 == (_QWORD)v6;
          v6 = v10;
        }
        while (!v11);
      }
      v6 = v10;
      if (v10 == v7)
        goto LABEL_13;
    }
    v12 = operator new();
    sub_20E9573E4(v12, a2);
    v24 = v13;
    sub_20F44D624(&v24, (uint64_t **)&__p);
    v14 = v24;
    v24 = 0;
    if (v14)
    {
      v15 = sub_20E9545B0((uint64_t)v14);
      MEMORY[0x212BC6398](v15, 0x10A0C401749CDD1);
    }
    v16 = v26;
    if (v26 != __p)
    {
      v17 = 0;
      v18 = (v26 - (_BYTE *)__p) >> 4;
      do
      {
        sub_20F2FD9F0();
        v17 += 16;
        --v18;
      }
      while (v18);
      v16 = (char *)__p;
    }
    if (v16)
    {
      v19 = v26;
      v20 = v16;
      if (v26 != v16)
      {
        do
        {
          v21 = (std::__shared_weak_count *)*((_QWORD *)v19 - 1);
          if (v21)
          {
            p_shared_owners = (unint64_t *)&v21->__shared_owners_;
            do
              v23 = __ldaxr(p_shared_owners);
            while (__stlxr(v23 - 1, p_shared_owners));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
              std::__shared_weak_count::__release_weak(v21);
            }
          }
          v19 -= 16;
        }
        while (v19 != v16);
        v20 = __p;
      }
      v26 = v16;
      operator delete(v20);
    }
  }
  else
  {
LABEL_13:
    sub_20F2FD9F0();
  }
}

void sub_20EE617A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v12;

  if (a9)
  {
    v12 = sub_20E9545B0(a9);
    MEMORY[0x212BC6398](v12, 0x10A0C401749CDD1);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EE61850(uint64_t result, __int128 *a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t *v8;

  v2 = *(_QWORD *)(**(_QWORD **)result + 11472);
  if (!*(_BYTE *)(v2 + 2321))
  {
    v3 = *(_QWORD *)(v2 + 56);
    if (v3)
    {
      v4 = *a2;
      v5 = *((_QWORD *)a2 + 2);
      *((_QWORD *)a2 + 1) = 0;
      *((_QWORD *)a2 + 2) = 0;
      *(_QWORD *)a2 = 0;
      v6 = 4;
      v7 = v3;
      v8 = &v7;
      result = sub_20F22D40C(&v8, (unsigned __int8 *)&v4);
      if (v6 != -1)
        return ((uint64_t (*)(uint64_t **, __int128 *))off_24C9EDD20[v6])(&v8, &v4);
    }
  }
  return result;
}

void sub_20EE618F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;

  v11 = LODWORD(STACK[0x3E0]);
  if ((_DWORD)v11 != -1)
    ((void (*)(uint64_t, uint64_t *))off_24C9EDD20[v11])(v9 - 33, &a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE61928(uint64_t result, __int128 *a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t *v8;

  v2 = *(_QWORD *)(**(_QWORD **)result + 11472);
  if (!*(_BYTE *)(v2 + 2321))
  {
    v3 = *(_QWORD *)(v2 + 56);
    if (v3)
    {
      v4 = *a2;
      v5 = *((_QWORD *)a2 + 2);
      *((_QWORD *)a2 + 1) = 0;
      *((_QWORD *)a2 + 2) = 0;
      *(_QWORD *)a2 = 0;
      v6 = 6;
      v7 = v3;
      v8 = &v7;
      result = sub_20F22D68C(&v8, (uint64_t)&v4);
      if (v6 != -1)
        return ((uint64_t (*)(uint64_t **, __int128 *))off_24C9EDD20[v6])(&v8, &v4);
    }
  }
  return result;
}

void sub_20EE619C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;

  v11 = LODWORD(STACK[0x3E0]);
  if ((_DWORD)v11 != -1)
    ((void (*)(uint64_t, uint64_t *))off_24C9EDD20[v11])(v9 - 33, &a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE619FC(uint64_t result, __int128 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD v13[2];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t *v20;

  v2 = *(_QWORD *)(**(_QWORD **)result + 11472);
  if (!*(_BYTE *)(v2 + 2321))
  {
    v3 = *(_QWORD *)(v2 + 56);
    if (v3)
    {
      v10 = *a2;
      v4 = *((_QWORD *)a2 + 2);
      v5 = (_QWORD *)*((_QWORD *)a2 + 3);
      *((_QWORD *)a2 + 1) = 0;
      *((_QWORD *)a2 + 2) = 0;
      *(_QWORD *)a2 = 0;
      v11 = v4;
      v12 = v5;
      v6 = a2 + 2;
      v7 = *((_QWORD *)a2 + 4);
      v8 = *((_QWORD *)a2 + 5);
      v13[0] = v7;
      v13[1] = v8;
      if (v8)
      {
        *(_QWORD *)(v7 + 16) = v13;
        *((_QWORD *)a2 + 3) = v6;
        *v6 = 0;
        *((_QWORD *)a2 + 5) = 0;
      }
      else
      {
        v12 = v13;
      }
      v9 = a2[4];
      v14 = a2[3];
      v15 = v9;
      v16 = a2[5];
      v17 = *((_DWORD *)a2 + 24);
      v18 = 7;
      v19 = v3;
      v20 = &v19;
      result = sub_20F22D828(&v20, (uint64_t)&v10);
      if (v18 != -1)
        return ((uint64_t (*)(uint64_t **, __int128 *))off_24C9EDD20[v18])(&v20, &v10);
    }
  }
  return result;
}

void sub_20EE61AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;

  v11 = LODWORD(STACK[0x3E0]);
  if ((_DWORD)v11 != -1)
    ((void (*)(uint64_t, uint64_t *))off_24C9EDD20[v11])(v9 - 33, &a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EE61B18(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  float v16;
  float v17;
  uint64_t v18;
  _QWORD *v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v7)
            {
              if (v11[2] == v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v15 = operator new(0x20uLL);
  *v15 = 0;
  v15[1] = v7;
  v15[2] = **a4;
  v15[3] = 0;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    v18 = *(_QWORD *)a1;
    v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v19)
    {
LABEL_26:
      *v15 = *v19;
LABEL_61:
      *v19 = v15;
      goto LABEL_62;
    }
  }
  else
  {
    v20 = 1;
    if (v8 >= 3)
      v20 = (v8 & (v8 - 1)) != 0;
    v21 = v20 | (2 * v8);
    v22 = vcvtps_u32_f32(v16 / v17);
    if (v21 <= v22)
      prime = v22;
    else
      prime = v21;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_37;
    if (prime < v8)
    {
      v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (prime <= v24)
        prime = v24;
      if (prime < v8)
LABEL_37:
        sub_20E8D2B3C(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    v27 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
      {
        v4 = v7 % v8;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v7 % v8));
        if (v19)
          goto LABEL_26;
      }
      else
      {
        v4 = v7;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
        if (v19)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v27 & v7;
      v18 = *(_QWORD *)a1;
      v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v27 & v7));
      if (v19)
        goto LABEL_26;
    }
  }
  *v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v18 + 8 * v4) = a1 + 16;
  if (*v15)
  {
    v28 = *(_QWORD *)(*v15 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v28 >= v8)
        v28 %= v8;
    }
    else
    {
      v28 &= v8 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_20EE61E28(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20EE61E3C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9EDD70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EE61E4C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9EDD70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EE61E7C(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)a1[23];
  if (v2)
  {
    a1[24] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[16];
  if (v3)
  {
    a1[17] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[13];
  if (v4)
  {
    a1[14] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[10];
  if (v5)
  {
    a1[11] = v5;
    operator delete(v5);
  }
}

void sub_20EE61EE4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9EDDC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EE61EF4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9EDDC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EE61F24(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(a1 + 24);
    if (v3 != v1)
    {
      v5 = v3;
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v1);
      v4 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v1;
    operator delete(v4);
  }
}

void sub_20EE61FA4(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = (_QWORD *)v2[6];
      if (v4)
      {
        do
        {
          v5 = (_QWORD *)*v4;
          operator delete(v4);
          v4 = v5;
        }
        while (v5);
      }
      v6 = (void *)v2[4];
      v2[4] = 0;
      if (v6)
        operator delete(v6);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20EE62010(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t i;
  uint64_t *v8;
  int v9;
  uint64_t *v10;
  uint64_t *v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;

  v6 = a1[1];
  if (!v6)
    goto LABEL_11;
  for (i = 0; i != v6; *(_QWORD *)(*a1 + 8 * i++) = 0)
    ;
  v8 = (uint64_t *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      *((_DWORD *)v8 + 4) = *((_DWORD *)a2 + 4);
      v9 = *((_DWORD *)a2 + 6);
      *((_BYTE *)v8 + 28) = *((_BYTE *)a2 + 28);
      *((_DWORD *)v8 + 6) = v9;
      if (v8 != a2)
      {
        *((_DWORD *)v8 + 16) = *((_DWORD *)a2 + 16);
        sub_20EC1D1DC(v8 + 4, (uint64_t *)a2[6], 0);
      }
      v10 = (uint64_t *)*v8;
      sub_20EC1D308(a1, (unsigned int *)v8);
      a2 = (uint64_t *)*a2;
      v8 = v10;
      if (!v10)
        goto LABEL_11;
    }
    do
    {
      v11 = (uint64_t *)*v8;
      v12 = (_QWORD *)v8[6];
      if (v12)
      {
        do
        {
          v13 = (_QWORD *)*v12;
          operator delete(v12);
          v12 = v13;
        }
        while (v13);
      }
      v14 = (void *)v8[4];
      v8[4] = 0;
      if (v14)
        operator delete(v14);
      operator delete(v8);
      v8 = v11;
    }
    while (v11);
  }
  else
  {
LABEL_11:
    while (a2 != a3)
    {
      sub_20EE62158(a1, (uint64_t)(a2 + 2));
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_20EE62128(void *a1)
{
  int v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  sub_20EE61FA4(v1, v2);
  __cxa_rethrow();
}

void sub_20EE62144(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

unsigned int *sub_20EE62158(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = operator new(0x48uLL);
  *v4 = 0;
  v4[1] = 0;
  *((_DWORD *)v4 + 4) = *(_DWORD *)a2;
  *((_DWORD *)v4 + 6) = *(_DWORD *)(a2 + 8);
  *((_BYTE *)v4 + 28) = *(_BYTE *)(a2 + 12);
  sub_20E96A108((uint64_t)(v4 + 4), a2 + 16);
  v4[1] = *((unsigned int *)v4 + 4);
  return sub_20EC1D308(a1, (unsigned int *)v4);
}

void sub_20EE621CC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;

  v4 = (_QWORD *)v1[6];
  if (v4)
  {
    do
    {
      v5 = (_QWORD *)*v4;
      operator delete(v4);
      v4 = v5;
    }
    while (v5);
  }
  v6 = *v2;
  *v2 = 0;
  if (v6)
  {
    operator delete(v6);
    operator delete(v1);
    _Unwind_Resume(a1);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EE6221C(_QWORD *result, char *a2, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  int64_t v15;
  char **v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  char *v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  _OWORD *v28;
  __int128 v29;
  __int128 v30;

  v6 = a2;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz <= (v8 - *result) >> 5)
  {
    v16 = (char **)(result + 1);
    v17 = (char *)result[1];
    v18 = (v17 - v9) >> 5;
    if (v18 >= __sz)
    {
      v27 = *result;
      if (a2 != a3)
      {
        v28 = (_OWORD *)*result;
        do
        {
          v29 = *(_OWORD *)v6;
          v30 = *((_OWORD *)v6 + 1);
          v6 += 32;
          *v28 = v29;
          v28[1] = v30;
          v28 += 2;
          v27 += 32;
        }
        while (v6 != a3);
      }
      v15 = v27 - (_QWORD)v9;
    }
    else
    {
      v19 = &a2[32 * v18];
      if (v17 != v9)
      {
        v20 = 32 * v18;
        do
        {
          v21 = *(_OWORD *)v6;
          v22 = *((_OWORD *)v6 + 1);
          v6 += 32;
          *(_OWORD *)v9 = v21;
          *((_OWORD *)v9 + 1) = v22;
          v9 += 32;
          v20 -= 32;
        }
        while (v20);
        v9 = *v16;
      }
      v23 = v9;
      if (v19 != a3)
      {
        v23 = v9;
        v24 = v9;
        do
        {
          v25 = *(_OWORD *)v19;
          v26 = *((_OWORD *)v19 + 1);
          v19 += 32;
          *(_OWORD *)v24 = v25;
          *((_OWORD *)v24 + 1) = v26;
          v24 += 32;
          v23 += 32;
        }
        while (v19 != a3);
      }
      v15 = v23 - v9;
    }
  }
  else
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 59)
      goto LABEL_27;
    v10 = v8 >> 4;
    if (v8 >> 4 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0;
    v12 = 0x7FFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 59)
LABEL_27:
      sub_20E95E0B0();
    v13 = 4 * v12;
    result = operator new(32 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = (char *)result;
    if (v6 != a3)
    {
      result = memcpy(result, v6, (a3 - v6) & 0xFFFFFFFFFFFFFFE0);
      v14 = &v9[(a3 - v6) & 0xFFFFFFFFFFFFFFE0];
    }
    v15 = v14 - v9;
    v16 = (char **)(v7 + 1);
  }
  *v16 = &v9[v15];
  return result;
}

_QWORD *sub_20EE623A8(_QWORD *result, char *a2, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  int64_t v15;
  char **v16;
  char *v17;
  char *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  _QWORD *v22;
  _QWORD *v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;

  v6 = a2;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (0x8E38E38E38E38E39 * ((v8 - *result) >> 2) >= __sz)
  {
    v16 = (char **)(result + 1);
    v17 = (char *)result[1];
    if (0x8E38E38E38E38E39 * ((v17 - v9) >> 2) >= __sz)
    {
      v26 = *result;
      if (a2 != a3)
      {
        v27 = *result;
        do
        {
          v28 = *(_OWORD *)v6;
          v29 = *((_OWORD *)v6 + 1);
          *(_DWORD *)(v27 + 32) = *((_DWORD *)v6 + 8);
          *(_OWORD *)v27 = v28;
          *(_OWORD *)(v27 + 16) = v29;
          v6 += 36;
          v27 += 36;
          v26 += 36;
        }
        while (v6 != a3);
      }
      v15 = v26 - (_QWORD)v9;
    }
    else
    {
      v18 = &a2[4 * ((v17 - v9) >> 2)];
      if (v17 != v9)
      {
        v19 = 4 * ((v17 - v9) >> 2);
        do
        {
          v20 = *(_OWORD *)v6;
          v21 = *((_OWORD *)v6 + 1);
          *((_DWORD *)v9 + 8) = *((_DWORD *)v6 + 8);
          *(_OWORD *)v9 = v20;
          *((_OWORD *)v9 + 1) = v21;
          v6 += 36;
          v9 += 36;
          v19 -= 36;
        }
        while (v19);
        v9 = *v16;
      }
      v22 = v9;
      if (v18 != a3)
      {
        v22 = v9;
        v23 = v9;
        do
        {
          v24 = *(_OWORD *)v18;
          v25 = *((_OWORD *)v18 + 1);
          *((_DWORD *)v23 + 8) = *((_DWORD *)v18 + 8);
          *(_OWORD *)v23 = v24;
          *((_OWORD *)v23 + 1) = v25;
          v18 += 36;
          v23 = (_QWORD *)((char *)v23 + 36);
          v22 = (_QWORD *)((char *)v22 + 36);
        }
        while (v18 != a3);
      }
      v15 = (char *)v22 - v9;
    }
  }
  else
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz > 0x71C71C71C71C71CLL)
      goto LABEL_28;
    v10 = 0x8E38E38E38E38E39 * (v8 >> 2);
    v11 = 2 * v10;
    if (2 * v10 <= __sz)
      v11 = __sz;
    v12 = v10 >= 0x38E38E38E38E38ELL ? 0x71C71C71C71C71CLL : v11;
    if (v12 > 0x71C71C71C71C71CLL)
LABEL_28:
      sub_20E867F44();
    v13 = 36 * v12;
    result = operator new(36 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    v14 = (char *)result;
    if (v6 != a3)
    {
      result = memcpy(result, v6, 36 * ((a3 - v6 - 36) / 0x24uLL) + 36);
      v14 = &v9[36 * ((a3 - v6 - 36) / 0x24uLL) + 36];
    }
    v15 = v14 - v9;
    v16 = (char **)(v7 + 1);
  }
  *v16 = &v9[v15];
  return result;
}

void sub_20EE625E0(uint64_t a1, char **a2, uint64_t a3, size_t __sz)
{
  char **v6;
  uint64_t v8;
  uint64_t v9;
  char **v10;
  char **v11;
  char **v12;
  char **v13;
  char *v14;
  char *v15;
  char **v16;
  uint64_t v17;
  uint64_t v18;
  char **v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  char **v26;
  char *v27;
  char *v28;

  v6 = a2;
  v9 = a1 + 16;
  v8 = *(_QWORD *)(a1 + 16);
  v10 = *(char ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)a1) >> 3) < __sz)
  {
    if (v10)
    {
      v11 = *(char ***)(a1 + 8);
      v12 = *(char ***)a1;
      if (v11 != v10)
      {
        v13 = *(char ***)(a1 + 8);
        do
        {
          v15 = *(v13 - 3);
          v13 -= 3;
          v14 = v15;
          if (v15)
          {
            *(v11 - 2) = v14;
            operator delete(v14);
          }
          v11 = v13;
        }
        while (v13 != v10);
        v12 = *(char ***)a1;
      }
      *(_QWORD *)(a1 + 8) = v10;
      operator delete(v12);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_40;
    v20 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v21 = 2 * v20;
    if (2 * v20 <= __sz)
      v21 = __sz;
    v22 = v20 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v21;
    if (v22 > 0xAAAAAAAAAAAAAAALL)
LABEL_40:
      sub_20E91EF00();
    v23 = 3 * v22;
    v24 = operator new(24 * v22);
    *(_QWORD *)a1 = v24;
    *(_QWORD *)(a1 + 8) = v24;
    *(_QWORD *)(a1 + 16) = &v24[v23];
    v25 = sub_20EABAABC(v9, (uint64_t)v6, a3, v24);
LABEL_31:
    *(_QWORD *)(a1 + 8) = v25;
    return;
  }
  v16 = *(char ***)(a1 + 8);
  if (0xAAAAAAAAAAAAAAABLL * (v16 - v10) < __sz)
  {
    v17 = (uint64_t)&a2[v16 - v10];
    if (v16 != v10)
    {
      v18 = 8 * (v16 - v10);
      do
      {
        if (v6 != v10)
          sub_20EE6287C(v10, *v6, v6[1], 0x84BDA12F684BDA13 * ((v6[1] - *v6) >> 3));
        v6 += 3;
        v10 += 3;
        v18 -= 24;
      }
      while (v18);
      v10 = *(char ***)(a1 + 8);
    }
    v25 = sub_20EABAABC(v9, v17, a3, v10);
    goto LABEL_31;
  }
  if (a2 != (char **)a3)
  {
    v19 = *(char ***)a1;
    do
    {
      if (v6 != v10)
        sub_20EE6287C(v10, *v6, v6[1], 0x84BDA12F684BDA13 * ((v6[1] - *v6) >> 3));
      v6 += 3;
      v10 += 3;
      v19 += 3;
    }
    while (v6 != (char **)a3);
    v16 = *(char ***)(a1 + 8);
    if (v16 == v19)
      goto LABEL_39;
    goto LABEL_35;
  }
  v19 = *(char ***)a1;
  if (v16 != v10)
  {
LABEL_35:
    v26 = v16;
    do
    {
      v28 = *(v26 - 3);
      v26 -= 3;
      v27 = v28;
      if (v28)
      {
        *(v16 - 2) = v27;
        operator delete(v27);
      }
      v16 = v26;
    }
    while (v26 != v19);
  }
LABEL_39:
  *(_QWORD *)(a1 + 8) = v19;
}

void sub_20EE6286C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20EE62874(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_QWORD *sub_20EE6287C(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  _BYTE *v16;
  char *v17;
  size_t v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (0x84BDA12F684BDA13 * ((v8 - *result) >> 3) < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x12F684BDA12F684)
      goto LABEL_23;
    v10 = 0x84BDA12F684BDA13 * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    v12 = v10 >= 0x97B425ED097B42 ? 0x12F684BDA12F684 : v11;
    if (v12 > 0x12F684BDA12F684)
LABEL_23:
      sub_20E91EF00();
    v13 = 27 * v12;
    result = operator new(216 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14 - 7);
    v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  if (0x84BDA12F684BDA13 * ((v16 - v9) >> 3) >= a4)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_22;
    v18 = v14 - 7;
    v19 = (void *)*result;
LABEL_21:
    result = memmove(v19, __src, v18);
    goto LABEL_22;
  }
  v17 = &__src[8 * ((v16 - v9) >> 3)];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9 - 7);
    v9 = (char *)*v15;
  }
  v14 = a3 - v17;
  if (v14)
  {
    v18 = v14 - 7;
    v19 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  *v15 = &v9[v14];
  return result;
}

char *sub_20EE62A1C(char **a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  char *result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char **v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  char *v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;

  v6 = a2;
  v8 = (uint64_t)a1[2];
  result = *a1;
  if (0x6DB6DB6DB6DB6DB7 * ((v8 - (uint64_t)result) >> 3) >= a4)
  {
    v17 = a1[1];
    v16 = a1 + 1;
    v15 = v17;
    v18 = 0x6DB6DB6DB6DB6DB7 * ((v17 - result) >> 3);
    if (v18 >= a4)
    {
      v26 = result;
      if (a2 != a3)
      {
        v27 = result;
        do
        {
          *(_QWORD *)v27 = *(_QWORD *)v6;
          v28 = *(_OWORD *)(v6 + 8);
          *((_QWORD *)v27 + 3) = *(_QWORD *)(v6 + 24);
          *(_OWORD *)(v27 + 8) = v28;
          v29 = *(_OWORD *)(v6 + 32);
          *((_QWORD *)v27 + 6) = *(_QWORD *)(v6 + 48);
          *((_OWORD *)v27 + 2) = v29;
          v26 += 56;
          v6 += 56;
          v27 += 56;
        }
        while (v6 != a3);
      }
      *v16 = v26;
    }
    else
    {
      v19 = a2 + 56 * v18;
      if (v15 != result)
      {
        do
        {
          *(_QWORD *)result = *(_QWORD *)v6;
          v20 = *(_OWORD *)(v6 + 8);
          *((_QWORD *)result + 3) = *(_QWORD *)(v6 + 24);
          *(_OWORD *)(result + 8) = v20;
          v21 = *(_OWORD *)(v6 + 32);
          *((_QWORD *)result + 6) = *(_QWORD *)(v6 + 48);
          *((_OWORD *)result + 2) = v21;
          v6 += 56;
          result += 56;
        }
        while (v6 != v19);
        result = *v16;
      }
      v22 = result;
      if (v19 != a3)
      {
        v22 = result;
        v23 = result;
        do
        {
          *(_QWORD *)v23 = *(_QWORD *)v19;
          v24 = *(_OWORD *)(v19 + 8);
          *((_QWORD *)v23 + 3) = *(_QWORD *)(v19 + 24);
          *(_OWORD *)(v23 + 8) = v24;
          v25 = *(_OWORD *)(v19 + 32);
          *((_QWORD *)v23 + 6) = *(_QWORD *)(v19 + 48);
          *((_OWORD *)v23 + 2) = v25;
          v22 += 56;
          v19 += 56;
          v23 += 56;
        }
        while (v19 != a3);
      }
      *v16 = v22;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x492492492492492)
      goto LABEL_27;
    v10 = 0x6DB6DB6DB6DB6DB7 * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    v12 = v10 >= 0x249249249249249 ? 0x492492492492492 : v11;
    if (v12 > 0x492492492492492)
LABEL_27:
      sub_20EABADD4();
    v13 = 56 * v12;
    result = (char *)operator new(56 * v12);
    *a1 = result;
    a1[1] = result;
    a1[2] = &result[v13];
    v14 = result;
    if (v6 != a3)
    {
      v14 = result;
      do
      {
        *(_QWORD *)v14 = *(_QWORD *)v6;
        *(_OWORD *)(v14 + 8) = *(_OWORD *)(v6 + 8);
        *((_QWORD *)v14 + 3) = *(_QWORD *)(v6 + 24);
        *((_OWORD *)v14 + 2) = *(_OWORD *)(v6 + 32);
        *((_QWORD *)v14 + 6) = *(_QWORD *)(v6 + 48);
        v14 += 56;
        v6 += 56;
      }
      while (v6 != a3);
    }
    a1[1] = v14;
  }
  return result;
}

uint64_t sub_20EE62CA8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void (***v8)(_QWORD);
  void (***v9)(_QWORD);
  void *v10;
  void (***v11)(_QWORD);
  void (***v12)(_QWORD);
  void (**v13)(_QWORD);
  BOOL v14;
  void *v15;

  if (*(_BYTE *)(a1 + 72))
  {
    v2 = *(_QWORD *)(a1 + 48);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 56);
      v4 = *(void **)(a1 + 48);
      if (v3 != v2)
      {
        v5 = *(_QWORD *)(a1 + 56);
        do
        {
          v7 = *(void **)(v5 - 24);
          v5 -= 24;
          v6 = v7;
          if (v7)
          {
            *(_QWORD *)(v3 - 16) = v6;
            operator delete(v6);
          }
          v3 = v5;
        }
        while (v5 != v2);
        v4 = *(void **)(a1 + 48);
      }
      *(_QWORD *)(a1 + 56) = v2;
      operator delete(v4);
    }
    v8 = *(void (****)(_QWORD))(a1 + 24);
    if (v8)
    {
      v9 = *(void (****)(_QWORD))(a1 + 32);
      v10 = *(void **)(a1 + 24);
      if (v9 != v8)
      {
        v11 = v9 - 3;
        v12 = v9 - 3;
        do
        {
          v13 = *v12;
          v12 -= 3;
          (*v13)(v11);
          v14 = v11 == v8;
          v11 = v12;
        }
        while (!v14);
        v10 = *(void **)(a1 + 24);
      }
      *(_QWORD *)(a1 + 32) = v8;
      operator delete(v10);
    }
    v15 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v15;
      operator delete(v15);
    }
  }
  return a1;
}

void **sub_20EE62D7C(void **a1)
{
  void *v2;
  char *v3;
  char *v4;
  void *v5;
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  char *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  void *v18;
  char *v19;
  char *v20;
  void *v21;
  void *v22;

  v2 = a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  v3 = (char *)a1[6];
  if (v3)
  {
    v4 = (char *)a1[7];
    v5 = a1[6];
    if (v4 == v3)
    {
LABEL_19:
      a1[7] = v3;
      operator delete(v5);
      goto LABEL_20;
    }
    while (1)
    {
      v6 = v4 - 400;
      v7 = (std::__shared_weak_count *)*((_QWORD *)v4 - 37);
      if (!v7)
        goto LABEL_11;
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        v10 = (std::__shared_weak_count *)*((_QWORD *)v4 - 39);
        if (v10)
        {
LABEL_12:
          v11 = (unint64_t *)&v10->__shared_owners_;
          do
            v12 = __ldaxr(v11);
          while (__stlxr(v12 - 1, v11));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
      }
      else
      {
LABEL_11:
        v10 = (std::__shared_weak_count *)*((_QWORD *)v4 - 39);
        if (v10)
          goto LABEL_12;
      }
      v4 -= 400;
      if (v6 == v3)
      {
        v5 = a1[6];
        goto LABEL_19;
      }
    }
  }
LABEL_20:
  v13 = (char *)a1[3];
  if (v13)
  {
    v14 = (char *)a1[4];
    v15 = a1[3];
    if (v14 != v13)
    {
      v16 = (char *)a1[4];
      do
      {
        v18 = (void *)*((_QWORD *)v16 - 3);
        v16 -= 24;
        v17 = v18;
        if (v18)
        {
          *((_QWORD *)v14 - 2) = v17;
          operator delete(v17);
        }
        v14 = v16;
      }
      while (v16 != v13);
      v15 = a1[3];
    }
    a1[4] = v13;
    operator delete(v15);
  }
  v19 = (char *)*a1;
  if (*a1)
  {
    v20 = (char *)a1[1];
    v21 = *a1;
    if (v20 != v19)
    {
      do
      {
        v22 = (void *)*((_QWORD *)v20 - 3);
        if (v22)
        {
          *((_QWORD *)v20 - 2) = v22;
          operator delete(v22);
        }
        v20 -= 64;
      }
      while (v20 != v19);
      v21 = *a1;
    }
    a1[1] = v19;
    operator delete(v21);
  }
  return a1;
}

void **sub_20EE62F10(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 3);
        if (v5)
        {
          *((_QWORD *)v3 - 2) = v5;
          operator delete(v5);
        }
        v3 -= 64;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_20EE62F80(uint64_t a1)
{
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  v2 = (_BYTE *)(a1 + 4104);
  if (*(_BYTE *)(a1 + 5968))
    sub_20EB8188C(a1 + 4304);
  v3 = *(_QWORD *)(a1 + 4280);
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 4288);
    v5 = *(void **)(a1 + 4280);
    if (v4 != v3)
    {
      do
      {
        v6 = *(_QWORD *)(v4 - 24);
        if (v6)
        {
          v7 = *(_QWORD *)(v4 - 16);
          v8 = *(void **)(v4 - 24);
          if (v7 != v6)
          {
            do
              v7 = sub_20EB8188C(v7 - 1664);
            while (v7 != v6);
            v8 = *(void **)(v4 - 24);
          }
          *(_QWORD *)(v4 - 16) = v6;
          operator delete(v8);
        }
        v4 -= 32;
      }
      while (v4 != v3);
      v5 = *(void **)(a1 + 4280);
    }
    *(_QWORD *)(a1 + 4288) = v3;
    operator delete(v5);
  }
  if (*v2)
  {
    v9 = *(void **)(a1 + 3984);
    if (v9)
    {
      *(_QWORD *)(a1 + 3992) = v9;
      operator delete(v9);
    }
  }
  v10 = *(std::__shared_weak_count **)(a1 + 3880);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      if (!*(_BYTE *)(a1 + 3784))
        return a1;
      goto LABEL_22;
    }
  }
  if (*(_BYTE *)(a1 + 3784))
LABEL_22:
    sub_20E91EA40(a1 + 8);
  return a1;
}

char **sub_20EE630A8(char **a1)
{
  char *v2;
  char *v3;
  char *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  if (*((_BYTE *)a1 + 112))
  {
    v2 = a1[11];
    if (v2)
    {
      a1[12] = v2;
      operator delete(v2);
    }
  }
  v3 = a1[8];
  if (v3)
  {
    a1[9] = v3;
    operator delete(v3);
  }
  v4 = a1[5];
  if (v4)
  {
    a1[6] = v4;
    operator delete(v4);
  }
  v5 = (std::__shared_weak_count *)a1[4];
  if (!v5)
    goto LABEL_12;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v8 = *a1;
    if (!*a1)
      return a1;
  }
  else
  {
LABEL_12:
    v8 = *a1;
    if (!*a1)
      return a1;
  }
  v9 = a1[1];
  v10 = v8;
  if (v9 != v8)
  {
    do
    {
      v11 = (std::__shared_weak_count *)*((_QWORD *)v9 - 1);
      if (v11)
      {
        v12 = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      v9 -= 16;
    }
    while (v9 != v8);
    v10 = *a1;
  }
  a1[1] = v8;
  operator delete(v10);
  return a1;
}

uint64_t sub_20EE631BC(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_20EE6368C((char **)a1, *(char **)a2, *(char **)(a2 + 8), 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 5));
    sub_20EE6368C((char **)(a1 + 24), *(char **)(a2 + 24), *(char **)(a2 + 32), 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 5));
    sub_20EE6368C((char **)(a1 + 48), *(char **)(a2 + 48), *(char **)(a2 + 56), 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 5));
    sub_20EE63900(a1 + 72, *(_QWORD *)(a2 + 72), *(_QWORD *)(a2 + 80), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 4));
    sub_20EE1CB70((_QWORD *)(a1 + 96), *(char **)(a2 + 96), *(char **)(a2 + 104), (uint64_t)(*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96)) >> 4);
    sub_20EE1CB70((_QWORD *)(a1 + 120), *(char **)(a2 + 120), *(char **)(a2 + 128), (uint64_t)(*(_QWORD *)(a2 + 128) - *(_QWORD *)(a2 + 120)) >> 4);
  }
  return a1;
}

char *sub_20EE63294(char **a1, uint64_t *a2, uint64_t *a3, size_t __sz)
{
  uint64_t *v6;
  uint64_t v8;
  char *result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char *v19;
  char **v20;
  char *v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  char *v31;
  _OWORD *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  char *v39;
  _DWORD *v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;

  v6 = a2;
  v8 = (uint64_t)a1[2];
  result = *a1;
  if (0x8E38E38E38E38E39 * ((v8 - (uint64_t)result) >> 4) >= __sz)
  {
    v21 = a1[1];
    v20 = a1 + 1;
    v19 = v21;
    v22 = 0x8E38E38E38E38E39 * ((v21 - result) >> 4);
    if (v22 >= __sz)
    {
      v39 = result;
      if (a2 != a3)
      {
        v40 = result;
        do
        {
          v41 = *v6;
          v40[2] = *((_DWORD *)v6 + 2);
          *(_QWORD *)v40 = v41;
          v42 = *((_OWORD *)v6 + 8);
          v44 = *((_OWORD *)v6 + 5);
          v43 = *((_OWORD *)v6 + 6);
          *((_OWORD *)v40 + 7) = *((_OWORD *)v6 + 7);
          *((_OWORD *)v40 + 8) = v42;
          *((_OWORD *)v40 + 5) = v44;
          *((_OWORD *)v40 + 6) = v43;
          v45 = *((_OWORD *)v6 + 1);
          v46 = *((_OWORD *)v6 + 2);
          v47 = *((_OWORD *)v6 + 4);
          *((_OWORD *)v40 + 3) = *((_OWORD *)v6 + 3);
          *((_OWORD *)v40 + 4) = v47;
          *((_OWORD *)v40 + 1) = v45;
          *((_OWORD *)v40 + 2) = v46;
          v39 += 144;
          v6 += 18;
          v40 += 36;
        }
        while (v6 != a3);
      }
      *v20 = v39;
    }
    else
    {
      v23 = &a2[18 * v22];
      if (v19 != result)
      {
        do
        {
          v24 = *v6;
          *((_DWORD *)result + 2) = *((_DWORD *)v6 + 2);
          *(_QWORD *)result = v24;
          v25 = *((_OWORD *)v6 + 8);
          v27 = *((_OWORD *)v6 + 5);
          v26 = *((_OWORD *)v6 + 6);
          *((_OWORD *)result + 7) = *((_OWORD *)v6 + 7);
          *((_OWORD *)result + 8) = v25;
          *((_OWORD *)result + 5) = v27;
          *((_OWORD *)result + 6) = v26;
          v28 = *((_OWORD *)v6 + 1);
          v29 = *((_OWORD *)v6 + 2);
          v30 = *((_OWORD *)v6 + 4);
          *((_OWORD *)result + 3) = *((_OWORD *)v6 + 3);
          *((_OWORD *)result + 4) = v30;
          *((_OWORD *)result + 1) = v28;
          *((_OWORD *)result + 2) = v29;
          v6 += 18;
          result += 144;
        }
        while (v6 != v23);
        result = *v20;
      }
      v31 = result;
      if (v23 != a3)
      {
        v31 = result;
        v32 = result;
        do
        {
          *v32 = *(_OWORD *)v23;
          v33 = *((_OWORD *)v23 + 8);
          v35 = *((_OWORD *)v23 + 5);
          v34 = *((_OWORD *)v23 + 6);
          v32[7] = *((_OWORD *)v23 + 7);
          v32[8] = v33;
          v32[5] = v35;
          v32[6] = v34;
          v36 = *((_OWORD *)v23 + 1);
          v37 = *((_OWORD *)v23 + 2);
          v38 = *((_OWORD *)v23 + 4);
          v32[3] = *((_OWORD *)v23 + 3);
          v32[4] = v38;
          v32[1] = v36;
          v32[2] = v37;
          v31 += 144;
          v23 += 18;
          v32 += 9;
        }
        while (v23 != a3);
      }
      *v20 = v31;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0x1C71C71C71C71C7)
      goto LABEL_27;
    v10 = 0x8E38E38E38E38E39 * (v8 >> 4);
    v11 = 2 * v10;
    if (2 * v10 <= __sz)
      v11 = __sz;
    v12 = v10 >= 0xE38E38E38E38E3 ? 0x1C71C71C71C71C7 : v11;
    if (v12 > 0x1C71C71C71C71C7)
LABEL_27:
      sub_20EABADD4();
    v13 = 144 * v12;
    result = (char *)operator new(144 * v12);
    *a1 = result;
    a1[1] = result;
    a1[2] = &result[v13];
    v14 = result;
    if (v6 != a3)
    {
      v14 = result;
      do
      {
        v15 = *((_OWORD *)v6 + 7);
        *((_OWORD *)v14 + 6) = *((_OWORD *)v6 + 6);
        *((_OWORD *)v14 + 7) = v15;
        *((_OWORD *)v14 + 8) = *((_OWORD *)v6 + 8);
        v16 = *((_OWORD *)v6 + 1);
        *(_OWORD *)v14 = *(_OWORD *)v6;
        *((_OWORD *)v14 + 1) = v16;
        v17 = *((_OWORD *)v6 + 3);
        *((_OWORD *)v14 + 2) = *((_OWORD *)v6 + 2);
        *((_OWORD *)v14 + 3) = v17;
        v18 = *((_OWORD *)v6 + 5);
        *((_OWORD *)v14 + 4) = *((_OWORD *)v6 + 4);
        *((_OWORD *)v14 + 5) = v18;
        v14 += 144;
        v6 += 18;
      }
      while (v6 != a3);
    }
    a1[1] = v14;
  }
  return result;
}

void sub_20EE63530(uint64_t a1, char **a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  void *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char *v10;
  char *v11;
  int64_t v12;
  char *v13;
  char *v14;

  if (*(unsigned __int8 *)(a1 + 88) == *((unsigned __int8 *)a2 + 88))
  {
    if (*(_BYTE *)(a1 + 88))
    {
      v3 = *(_OWORD *)a2;
      v4 = *((_OWORD *)a2 + 1);
      v5 = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 48) = v5;
      *(_OWORD *)a1 = v3;
      *(_OWORD *)(a1 + 16) = v4;
      if ((char **)a1 != a2)
        sub_20EAA707C((_QWORD *)(a1 + 64), a2[8], a2[9], 0xCCCCCCCCCCCCCCCDLL * ((a2[9] - a2[8]) >> 3));
    }
  }
  else if (*(_BYTE *)(a1 + 88))
  {
    v6 = *(void **)(a1 + 64);
    if (v6)
    {
      *(_QWORD *)(a1 + 72) = v6;
      operator delete(v6);
    }
    *(_BYTE *)(a1 + 88) = 0;
  }
  else
  {
    v7 = *(_OWORD *)a2;
    v8 = *((_OWORD *)a2 + 1);
    v9 = *((_OWORD *)a2 + 3);
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 48) = v9;
    *(_QWORD *)(a1 + 64) = 0;
    *(_OWORD *)a1 = v7;
    *(_OWORD *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    v11 = a2[8];
    v10 = a2[9];
    v12 = v10 - v11;
    if (v10 != v11)
    {
      if (0xCCCCCCCCCCCCCCCDLL * (v12 >> 3) >= 0x666666666666667)
        sub_20EAA7068();
      v13 = (char *)operator new(v12);
      *(_QWORD *)(a1 + 64) = v13;
      *(_QWORD *)(a1 + 72) = v13;
      v14 = &v13[8 * (v12 >> 3)];
      *(_QWORD *)(a1 + 80) = v14;
      memcpy(v13, v11, v12 - 7);
      *(_QWORD *)(a1 + 72) = v14;
    }
    *(_BYTE *)(a1 + 88) = 1;
  }
}

void sub_20EE63670(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 72) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EE6368C(char **a1, char *__src, char *a3, unint64_t a4)
{
  char *v6;
  uint64_t v8;
  int v9;
  char *v10;
  void **v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;

  v6 = __src;
  v9 = (_DWORD)a1 + 16;
  v8 = (uint64_t)a1[2];
  v10 = *a1;
  if (0x4EC4EC4EC4EC4EC5 * ((v8 - (uint64_t)*a1) >> 5) < a4)
  {
    if (v10)
    {
      v11 = (void **)a1[1];
      v12 = *a1;
      if (v11 != (void **)v10)
      {
        do
        {
          if (*((_BYTE *)v11 - 8) && *((char *)v11 - 9) < 0)
            operator delete(*(v11 - 4));
          v11 -= 52;
        }
        while (v11 != (void **)v10);
        v12 = *a1;
      }
      a1[1] = v10;
      operator delete(v12);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x9D89D89D89D89DLL)
      goto LABEL_36;
    v17 = 0x4EC4EC4EC4EC4EC5 * (v8 >> 5);
    v18 = 2 * v17;
    if (2 * v17 <= a4)
      v18 = a4;
    v19 = v17 >= 0x4EC4EC4EC4EC4ELL ? 0x9D89D89D89D89DLL : v18;
    if (v19 > 0x9D89D89D89D89DLL)
LABEL_36:
      sub_20EAA9DC0();
    v20 = 416 * v19;
    v21 = (char *)operator new(416 * v19);
    *a1 = v21;
    a1[1] = v21;
    a1[2] = &v21[v20];
    v15 = sub_20EAAA060(v9, v6, a3, v21);
LABEL_28:
    a1[1] = v15;
    return;
  }
  v13 = a1[1];
  if (0x4EC4EC4EC4EC4EC5 * ((v13 - v10) >> 5) < a4)
  {
    v14 = &__src[32 * ((v13 - v10) >> 5)];
    if (v13 != v10)
    {
      do
      {
        memcpy(v10, v6, 0x179uLL);
        sub_20E869118((uint64_t)(v10 + 384), (_QWORD *)v6 + 48);
        v6 += 416;
        v10 += 416;
      }
      while (v6 != v14);
      v10 = a1[1];
    }
    v15 = sub_20EAAA060(v9, v14, a3, v10);
    goto LABEL_28;
  }
  if (__src == a3)
  {
    v16 = *a1;
  }
  else
  {
    v16 = *a1;
    do
    {
      memcpy(v10, v6, 0x179uLL);
      sub_20E869118((uint64_t)(v10 + 384), (_QWORD *)v6 + 48);
      v16 += 416;
      v6 += 416;
      v10 += 416;
    }
    while (v6 != a3);
    v13 = a1[1];
  }
  while (v13 != v16)
  {
    if (*(v13 - 8) && *(v13 - 9) < 0)
      operator delete(*((void **)v13 - 4));
    v13 -= 416;
  }
  a1[1] = v16;
}

void sub_20EE638F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20EE638F8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20EE63900(uint64_t a1, uint64_t a2, uint64_t a3, size_t __sz)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  void **v11;
  void **v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;

  v6 = a2;
  v9 = a1 + 16;
  v8 = *(_QWORD *)(a1 + 16);
  v10 = *(void ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)a1) >> 4) < __sz)
  {
    if (v10)
    {
      v11 = *(void ***)(a1 + 8);
      v12 = *(void ***)a1;
      if (v11 != v10)
      {
        do
        {
          if (*((_BYTE *)v11 - 8) && *((char *)v11 - 9) < 0)
            operator delete(*(v11 - 4));
          v11 -= 6;
        }
        while (v11 != v10);
        v12 = *(void ***)a1;
      }
      *(_QWORD *)(a1 + 8) = v10;
      operator delete(v12);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (__sz > 0x555555555555555)
      goto LABEL_36;
    v17 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 4);
    v18 = 2 * v17;
    if (2 * v17 <= __sz)
      v18 = __sz;
    v19 = v17 >= 0x2AAAAAAAAAAAAAALL ? 0x555555555555555 : v18;
    if (v19 > 0x555555555555555)
LABEL_36:
      sub_20EAA9DC0();
    v20 = 48 * v19;
    v21 = (char *)operator new(48 * v19);
    *(_QWORD *)a1 = v21;
    *(_QWORD *)(a1 + 8) = v21;
    *(_QWORD *)(a1 + 16) = &v21[v20];
    v15 = sub_20EAA9DD4(v9, v6, a3, (uint64_t)v21);
LABEL_28:
    *(_QWORD *)(a1 + 8) = v15;
    return;
  }
  v13 = *(void ***)(a1 + 8);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v13 - (char *)v10) >> 4) < __sz)
  {
    v14 = a2 + 16 * (((char *)v13 - (char *)v10) >> 4);
    if (v13 != v10)
    {
      do
      {
        *(_OWORD *)v10 = *(_OWORD *)v6;
        sub_20E869118((uint64_t)(v10 + 2), (_QWORD *)(v6 + 16));
        v6 += 48;
        v10 += 6;
      }
      while (v6 != v14);
      v10 = *(void ***)(a1 + 8);
    }
    v15 = sub_20EAA9DD4(v9, v14, a3, (uint64_t)v10);
    goto LABEL_28;
  }
  if (a2 == a3)
  {
    v16 = *(void ***)a1;
  }
  else
  {
    v16 = *(void ***)a1;
    do
    {
      *(_OWORD *)v10 = *(_OWORD *)v6;
      sub_20E869118((uint64_t)(v10 + 2), (_QWORD *)(v6 + 16));
      v16 += 6;
      v6 += 48;
      v10 += 6;
    }
    while (v6 != a3);
    v13 = *(void ***)(a1 + 8);
  }
  while (v13 != v16)
  {
    if (*((_BYTE *)v13 - 8) && *((char *)v13 - 9) < 0)
      operator delete(*(v13 - 4));
    v13 -= 6;
  }
  *(_QWORD *)(a1 + 8) = v16;
}

void sub_20EE63B34(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20EE63B3C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_QWORD *sub_20EE63B44(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;

  v3 = result;
  if (*((unsigned __int8 *)result + 96) == *(unsigned __int8 *)(a2 + 96))
  {
    if (result != (_QWORD *)a2)
    {
      if (*((_BYTE *)result + 96))
      {
        sub_20EE63C24(result, *(__int128 **)a2, *(__int128 **)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 6);
        sub_20EE63FD4((uint64_t)(v3 + 3), *(char ***)(a2 + 24), *(_QWORD *)(a2 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3));
        sub_20EE64348(v3 + 6, *(_QWORD *)(a2 + 48), *(_QWORD *)(a2 + 56), 0x8F5C28F5C28F5C29 * ((uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 4));
        return sub_20E867E00(v3 + 9, *(char **)(a2 + 72), *(char **)(a2 + 80), (uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 2);
      }
    }
  }
  else if (*((_BYTE *)result + 96))
  {
    result = sub_20EE62D7C((void **)result);
    *((_BYTE *)v3 + 96) = 0;
  }
  else
  {
    result = sub_20EE64874(result, a2);
    *((_BYTE *)v3 + 96) = 1;
  }
  return result;
}

void sub_20EE63C24(uint64_t *a1, __int128 *a2, __int128 *a3, size_t __sz)
{
  __int128 *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  __int128 *v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  BOOL v24;
  unint64_t v25;
  unint64_t v26;
  void *v27;
  _QWORD *v28;
  void *v29;

  v6 = a2;
  v9 = (uint64_t)(a1 + 2);
  v8 = a1[2];
  v10 = *a1;
  if (__sz > (v8 - *a1) >> 6)
  {
    if (v10)
    {
      v11 = a1[1];
      v12 = (void *)*a1;
      if (v11 != v10)
      {
        do
        {
          v13 = *(void **)(v11 - 24);
          if (v13)
          {
            *(_QWORD *)(v11 - 16) = v13;
            operator delete(v13);
          }
          v11 -= 64;
        }
        while (v11 != v10);
        v12 = (void *)*a1;
      }
      a1[1] = v10;
      operator delete(v12);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz >> 58)
      goto LABEL_38;
    v23 = v8 >> 5;
    if (v8 >> 5 <= __sz)
      v23 = __sz;
    v24 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0;
    v25 = 0x3FFFFFFFFFFFFFFLL;
    if (!v24)
      v25 = v23;
    if (v25 >> 58)
LABEL_38:
      sub_20E867F44();
    v26 = v25 << 6;
    v27 = operator new(v25 << 6);
    *a1 = (uint64_t)v27;
    a1[1] = (uint64_t)v27;
    a1[2] = (uint64_t)v27 + v26;
    v28 = sub_20EE63E68(v9, v6, a3, (uint64_t)v27);
LABEL_30:
    a1[1] = (uint64_t)v28;
    return;
  }
  v14 = a1[1];
  v15 = (v14 - v10) >> 6;
  if (v15 < __sz)
  {
    v16 = &a2[4 * v15];
    if (v14 != v10)
    {
      v17 = v15 << 6;
      do
      {
        v18 = *v6;
        v19 = v6[1];
        *(_QWORD *)(v10 + 29) = *(_QWORD *)((char *)v6 + 29);
        *(_OWORD *)v10 = v18;
        *(_OWORD *)(v10 + 16) = v19;
        if (v6 != (__int128 *)v10)
          sub_20E867E00((_QWORD *)(v10 + 40), *((char **)v6 + 5), *((char **)v6 + 6), (uint64_t)(*((_QWORD *)v6 + 6) - *((_QWORD *)v6 + 5)) >> 2);
        v6 += 4;
        v10 += 64;
        v17 -= 64;
      }
      while (v17);
      v10 = a1[1];
    }
    v28 = sub_20EE63E68(v9, v16, a3, v10);
    goto LABEL_30;
  }
  if (a2 == a3)
  {
    v20 = *a1;
  }
  else
  {
    v20 = *a1;
    do
    {
      v21 = *v6;
      v22 = v6[1];
      *(_QWORD *)(v10 + 29) = *(_QWORD *)((char *)v6 + 29);
      *(_OWORD *)v10 = v21;
      *(_OWORD *)(v10 + 16) = v22;
      if (v6 != (__int128 *)v10)
        sub_20E867E00((_QWORD *)(v10 + 40), *((char **)v6 + 5), *((char **)v6 + 6), (uint64_t)(*((_QWORD *)v6 + 6) - *((_QWORD *)v6 + 5)) >> 2);
      v6 += 4;
      v10 += 64;
      v20 += 64;
    }
    while (v6 != a3);
    v14 = a1[1];
  }
  while (v14 != v20)
  {
    v29 = *(void **)(v14 - 24);
    if (v29)
    {
      *(_QWORD *)(v14 - 16) = v29;
      operator delete(v29);
    }
    v14 -= 64;
  }
  a1[1] = v20;
}

void sub_20EE63E58(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20EE63E60(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_QWORD *sub_20EE63E68(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  __int128 *v5;
  _QWORD *v6;
  char *v7;
  __int128 v8;
  __int128 v9;
  _BYTE *v10;
  _BYTE *v11;
  int64_t v12;
  char *v13;

  if (a2 != a3)
  {
    v5 = a2;
    v6 = (_QWORD *)(a4 + 40);
    do
    {
      v8 = *v5;
      v9 = v5[1];
      *(_QWORD *)((char *)v6 - 11) = *(_QWORD *)((char *)v5 + 29);
      *(_OWORD *)(v6 - 3) = v9;
      *(_OWORD *)(v6 - 5) = v8;
      v6[1] = 0;
      v6[2] = 0;
      *v6 = 0;
      v11 = (_BYTE *)*((_QWORD *)v5 + 5);
      v10 = (_BYTE *)*((_QWORD *)v5 + 6);
      v12 = v10 - v11;
      if (v10 != v11)
      {
        if (v12 < 0)
          sub_20E867F44();
        v13 = (char *)operator new(v10 - v11);
        *v6 = v13;
        v6[1] = v13;
        v7 = &v13[4 * (v12 >> 2)];
        v6[2] = v7;
        memcpy(v13, v11, v12);
        v6[1] = v7;
      }
      v6 += 8;
      v5 += 4;
    }
    while (v5 != a3);
    return v6 - 5;
  }
  return (_QWORD *)a4;
}

void sub_20EE63F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_20EE63F74((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE63F74(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      v5 = *(void **)(v3 - 24);
      if (v5)
      {
        *(_QWORD *)(v3 - 16) = v5;
        operator delete(v5);
      }
      v3 -= 64;
    }
  }
  return a1;
}

void sub_20EE63FD4(uint64_t a1, char **a2, uint64_t a3, size_t __sz)
{
  char **v6;
  uint64_t v8;
  uint64_t v9;
  char **v10;
  char **v11;
  char **v12;
  char **v13;
  char *v14;
  char *v15;
  char **v16;
  uint64_t v17;
  uint64_t v18;
  char **v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  char **v26;
  char *v27;
  char *v28;

  v6 = a2;
  v9 = a1 + 16;
  v8 = *(_QWORD *)(a1 + 16);
  v10 = *(char ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)a1) >> 3) < __sz)
  {
    if (v10)
    {
      v11 = *(char ***)(a1 + 8);
      v12 = *(char ***)a1;
      if (v11 != v10)
      {
        v13 = *(char ***)(a1 + 8);
        do
        {
          v15 = *(v13 - 3);
          v13 -= 3;
          v14 = v15;
          if (v15)
          {
            *(v11 - 2) = v14;
            operator delete(v14);
          }
          v11 = v13;
        }
        while (v13 != v10);
        v12 = *(char ***)a1;
      }
      *(_QWORD *)(a1 + 8) = v10;
      operator delete(v12);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_40;
    v20 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v21 = 2 * v20;
    if (2 * v20 <= __sz)
      v21 = __sz;
    v22 = v20 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v21;
    if (v22 > 0xAAAAAAAAAAAAAAALL)
LABEL_40:
      sub_20E867F44();
    v23 = 3 * v22;
    v24 = operator new(24 * v22);
    *(_QWORD *)a1 = v24;
    *(_QWORD *)(a1 + 8) = v24;
    *(_QWORD *)(a1 + 16) = &v24[v23];
    v25 = sub_20EE64248(v9, (uint64_t)v6, a3, v24);
LABEL_31:
    *(_QWORD *)(a1 + 8) = v25;
    return;
  }
  v16 = *(char ***)(a1 + 8);
  if (0xAAAAAAAAAAAAAAABLL * (v16 - v10) < __sz)
  {
    v17 = (uint64_t)&a2[v16 - v10];
    if (v16 != v10)
    {
      v18 = 8 * (v16 - v10);
      do
      {
        if (v6 != v10)
          sub_20EDB6088(v10, *v6, v6[1], (v6[1] - *v6) >> 5);
        v6 += 3;
        v10 += 3;
        v18 -= 24;
      }
      while (v18);
      v10 = *(char ***)(a1 + 8);
    }
    v25 = sub_20EE64248(v9, v17, a3, v10);
    goto LABEL_31;
  }
  if (a2 != (char **)a3)
  {
    v19 = *(char ***)a1;
    do
    {
      if (v6 != v10)
        sub_20EDB6088(v10, *v6, v6[1], (v6[1] - *v6) >> 5);
      v6 += 3;
      v10 += 3;
      v19 += 3;
    }
    while (v6 != (char **)a3);
    v16 = *(char ***)(a1 + 8);
    if (v16 == v19)
      goto LABEL_39;
    goto LABEL_35;
  }
  v19 = *(char ***)a1;
  if (v16 != v10)
  {
LABEL_35:
    v26 = v16;
    do
    {
      v28 = *(v26 - 3);
      v26 -= 3;
      v27 = v28;
      if (v28)
      {
        *(v16 - 2) = v27;
        operator delete(v27);
      }
      v16 = v26;
    }
    while (v26 != v19);
  }
LABEL_39:
  *(_QWORD *)(a1 + 8) = v19;
}

void sub_20EE64238(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20EE64240(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_QWORD *sub_20EE64248(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  const void *v9;
  int64_t v10;
  char *v11;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      v9 = *(const void **)v6;
      v8 = *(_QWORD *)(v6 + 8);
      v10 = v8 - *(_QWORD *)v6;
      if (v8 != *(_QWORD *)v6)
      {
        if (v10 < 0)
          sub_20E867F44();
        v11 = (char *)operator new(v8 - *(_QWORD *)v6);
        *a4 = v11;
        a4[1] = v11;
        v7 = &v11[32 * (v10 >> 5)];
        a4[2] = v7;
        memcpy(v11, v9, v10);
        a4[1] = v7;
      }
      a4 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_20EE64310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E96AC74((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EE64324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_20E96AC74((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EE64348(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;

  v6 = a2;
  v8 = a1[2];
  v9 = *a1;
  if (0x8F5C28F5C28F5C29 * ((v8 - *a1) >> 4) < a4)
  {
    if (!v9)
      goto LABEL_45;
    v10 = a1[1];
    v11 = (void *)*a1;
    if (v10 == v9)
    {
LABEL_44:
      a1[1] = v9;
      operator delete(v11);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
LABEL_45:
      if (a4 > 0xA3D70A3D70A3D7)
        goto LABEL_63;
      v40 = 0x8F5C28F5C28F5C29 * (v8 >> 4);
      v41 = 2 * v40;
      if (2 * v40 <= a4)
        v41 = a4;
      v42 = v40 >= 0x51EB851EB851EBLL ? 0xA3D70A3D70A3D7 : v41;
      if (v42 > 0xA3D70A3D70A3D7)
LABEL_63:
        sub_20E867F44();
      v43 = 25 * v42;
      v44 = operator new(400 * v42);
      *a1 = (uint64_t)v44;
      a1[1] = (uint64_t)v44;
      a1[2] = (uint64_t)&v44[v43];
      while (v6 != a3)
      {
        v45 = *(_OWORD *)(v6 + 48);
        v44[2] = *(_OWORD *)(v6 + 32);
        v44[3] = v45;
        *(_OWORD *)((char *)v44 + 57) = *(_OWORD *)(v6 + 57);
        v46 = *(_OWORD *)(v6 + 16);
        *v44 = *(_OWORD *)v6;
        v44[1] = v46;
        v47 = *(_QWORD *)(v6 + 88);
        *((_QWORD *)v44 + 10) = *(_QWORD *)(v6 + 80);
        *((_QWORD *)v44 + 11) = v47;
        if (v47)
        {
          v48 = (unint64_t *)(v47 + 8);
          do
            v49 = __ldxr(v48);
          while (__stxr(v49 + 1, v48));
        }
        v50 = *(_QWORD *)(v6 + 104);
        *((_QWORD *)v44 + 12) = *(_QWORD *)(v6 + 96);
        *((_QWORD *)v44 + 13) = v50;
        if (v50)
        {
          v51 = (unint64_t *)(v50 + 8);
          do
            v52 = __ldxr(v51);
          while (__stxr(v52 + 1, v51));
        }
        memcpy(v44 + 7, (const void *)(v6 + 112), 0x120uLL);
        v6 += 400;
        v44 += 25;
      }
      a1[1] = (uint64_t)v44;
      return;
    }
    while (1)
    {
      v12 = v10 - 400;
      v13 = *(std::__shared_weak_count **)(v10 - 296);
      if (!v13)
        goto LABEL_10;
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
        v16 = *(std::__shared_weak_count **)(v10 - 312);
        if (v16)
        {
LABEL_11:
          v17 = (unint64_t *)&v16->__shared_owners_;
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
      }
      else
      {
LABEL_10:
        v16 = *(std::__shared_weak_count **)(v10 - 312);
        if (v16)
          goto LABEL_11;
      }
      v10 -= 400;
      if (v12 == v9)
      {
        v11 = (void *)*a1;
        goto LABEL_44;
      }
    }
  }
  if (0x8F5C28F5C28F5C29 * ((a1[1] - v9) >> 4) >= a4)
  {
    sub_20EE64730(a2, a3, v9);
    v31 = v30;
    v32 = a1[1];
    if (v32 == v30)
    {
LABEL_29:
      a1[1] = v31;
      return;
    }
    while (1)
    {
      v33 = v32 - 400;
      v34 = *(std::__shared_weak_count **)(v32 - 296);
      if (!v34)
        goto LABEL_35;
      v35 = (unint64_t *)&v34->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
        v37 = *(std::__shared_weak_count **)(v32 - 312);
        if (v37)
        {
LABEL_36:
          v38 = (unint64_t *)&v37->__shared_owners_;
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 - 1, v38));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
        }
      }
      else
      {
LABEL_35:
        v37 = *(std::__shared_weak_count **)(v32 - 312);
        if (v37)
          goto LABEL_36;
      }
      v32 -= 400;
      if (v33 == v31)
        goto LABEL_29;
    }
  }
  v19 = a2 + 16 * ((a1[1] - v9) >> 4);
  sub_20EE64730(a2, v19, v9);
  v20 = a1[1];
  while (v19 != a3)
  {
    *(_OWORD *)v20 = *(_OWORD *)v19;
    v21 = *(_OWORD *)(v19 + 16);
    v22 = *(_OWORD *)(v19 + 32);
    v23 = *(_OWORD *)(v19 + 48);
    *(_OWORD *)(v20 + 57) = *(_OWORD *)(v19 + 57);
    *(_OWORD *)(v20 + 32) = v22;
    *(_OWORD *)(v20 + 48) = v23;
    *(_OWORD *)(v20 + 16) = v21;
    v24 = *(_QWORD *)(v19 + 88);
    *(_QWORD *)(v20 + 80) = *(_QWORD *)(v19 + 80);
    *(_QWORD *)(v20 + 88) = v24;
    if (v24)
    {
      v25 = (unint64_t *)(v24 + 8);
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    v27 = *(_QWORD *)(v19 + 104);
    *(_QWORD *)(v20 + 96) = *(_QWORD *)(v19 + 96);
    *(_QWORD *)(v20 + 104) = v27;
    if (v27)
    {
      v28 = (unint64_t *)(v27 + 8);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    memcpy((void *)(v20 + 112), (const void *)(v19 + 112), 0x120uLL);
    v19 += 400;
    v20 += 400;
  }
  a1[1] = v20;
}

uint64_t sub_20EE64730(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;

  v4 = a1;
  if (a1 != a2)
  {
    while (1)
    {
      *(_OWORD *)a3 = *(_OWORD *)v4;
      v6 = *(_OWORD *)(v4 + 16);
      v7 = *(_OWORD *)(v4 + 32);
      v8 = *(_OWORD *)(v4 + 48);
      *(_OWORD *)(a3 + 57) = *(_OWORD *)(v4 + 57);
      *(_OWORD *)(a3 + 32) = v7;
      *(_OWORD *)(a3 + 48) = v8;
      *(_OWORD *)(a3 + 16) = v6;
      v10 = *(_QWORD *)(v4 + 80);
      v9 = *(_QWORD *)(v4 + 88);
      if (v9)
      {
        v11 = (unint64_t *)(v9 + 8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      v13 = *(std::__shared_weak_count **)(a3 + 88);
      *(_QWORD *)(a3 + 80) = v10;
      *(_QWORD *)(a3 + 88) = v9;
      if (!v13)
        goto LABEL_11;
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
        v17 = *(_QWORD *)(v4 + 96);
        v16 = *(_QWORD *)(v4 + 104);
        if (v16)
        {
LABEL_12:
          v18 = (unint64_t *)(v16 + 8);
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 1, v18));
        }
      }
      else
      {
LABEL_11:
        v17 = *(_QWORD *)(v4 + 96);
        v16 = *(_QWORD *)(v4 + 104);
        if (v16)
          goto LABEL_12;
      }
      v20 = *(std::__shared_weak_count **)(a3 + 104);
      *(_QWORD *)(a3 + 96) = v17;
      *(_QWORD *)(a3 + 104) = v16;
      if (v20)
      {
        v21 = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      memcpy((void *)(a3 + 112), (const void *)(v4 + 112), 0x120uLL);
      v4 += 400;
      a3 += 400;
      if (v4 == a2)
        return a2;
    }
  }
  return v4;
}

_QWORD *sub_20EE64874(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  char *v8;
  char *v9;

  v4 = sub_20EE64980(a1, (__int128 **)a2);
  sub_20EE64A6C(v4 + 3, (uint64_t *)(a2 + 24));
  sub_20EE64B78(a1 + 6, (uint64_t *)(a2 + 48));
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = 0;
  v6 = *(_BYTE **)(a2 + 72);
  v5 = *(_BYTE **)(a2 + 80);
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0)
      sub_20E867F44();
    v8 = (char *)operator new(v5 - v6);
    a1[9] = v8;
    a1[10] = v8;
    v9 = &v8[4 * (v7 >> 2)];
    a1[11] = v9;
    memcpy(v8, v6, v7);
    a1[10] = v9;
  }
  return a1;
}

void sub_20EE6491C(_Unwind_Exception *a1)
{
  void **v1;
  void **v2;

  sub_20E9DD680(v2);
  sub_20EE62F10(v1);
  _Unwind_Resume(a1);
}

void sub_20EE64938(_Unwind_Exception *a1)
{
  void **v1;

  sub_20EE62F10(v1);
  _Unwind_Resume(a1);
}

void sub_20EE6494C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void *v6;

  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 80) = v6;
    operator delete(v6);
  }
  sub_20EAF83D4(v3);
  sub_20E9DD680(v2);
  sub_20EE62F10((void **)v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EE64980(_QWORD *a1, __int128 **a2)
{
  uint64_t v3;
  __int128 *v4;
  __int128 *v5;
  uint64_t v6;
  char *v7;

  a1[2] = 0;
  v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = (char *)v5 - (char *)*a2;
  if (v5 != *a2)
  {
    if (v6 < 0)
      sub_20E867F44();
    v7 = (char *)operator new((char *)v5 - (char *)*a2);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[64 * (v6 >> 6)];
    a1[1] = sub_20EE63E68(v3, v4, v5, (uint64_t)v7);
  }
  return a1;
}

void sub_20EE64A0C(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v2;
  char *v4;
  char *v5;
  void *v6;
  void *v7;

  v1[1] = v2;
  v4 = (char *)*v1;
  if (*v1)
  {
    v5 = (char *)v1[1];
    v6 = *v1;
    if (v5 != v4)
    {
      do
      {
        v7 = (void *)*((_QWORD *)v5 - 3);
        if (v7)
        {
          *((_QWORD *)v5 - 2) = v7;
          operator delete(v7);
        }
        v5 -= 64;
      }
      while (v5 != v4);
      v6 = *v1;
    }
    v1[1] = v4;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EE64A6C(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  _QWORD *v8;

  a1[2] = 0;
  v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = v5 - *a2;
  if (v5 != *a2)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    if (v7 >= 0xAAAAAAAAAAAAAABLL)
      sub_20E867F44();
    v8 = operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[3 * v7];
    a1[1] = sub_20EE64248(v3, v4, v5, v8);
  }
  return a1;
}

void sub_20EE64B14(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v2;
  char *v4;
  char *v5;
  void *v6;
  char *v7;
  void *v8;
  void *v9;

  v1[1] = v2;
  v4 = (char *)*v1;
  if (*v1)
  {
    v5 = (char *)v1[1];
    v6 = *v1;
    if (v5 != v4)
    {
      v7 = (char *)v1[1];
      do
      {
        v9 = (void *)*((_QWORD *)v7 - 3);
        v7 -= 24;
        v8 = v9;
        if (v9)
        {
          *((_QWORD *)v5 - 2) = v8;
          operator delete(v8);
        }
        v5 = v7;
      }
      while (v7 != v4);
      v6 = *v1;
    }
    v1[1] = v4;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EE64B78(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  unint64_t v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 != *a2)
  {
    v6 = 0x8F5C28F5C28F5C29 * (v5 >> 4);
    if (v6 >= 0xA3D70A3D70A3D8)
      sub_20E867F44();
    v7 = operator new(v5);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[25 * v6];
    do
    {
      *v7 = *(_OWORD *)v3;
      v8 = *(_OWORD *)(v3 + 16);
      v9 = *(_OWORD *)(v3 + 32);
      v10 = *(_OWORD *)(v3 + 48);
      *(_OWORD *)((char *)v7 + 57) = *(_OWORD *)(v3 + 57);
      v7[2] = v9;
      v7[3] = v10;
      v7[1] = v8;
      v11 = *(_QWORD *)(v3 + 88);
      *((_QWORD *)v7 + 10) = *(_QWORD *)(v3 + 80);
      *((_QWORD *)v7 + 11) = v11;
      if (v11)
      {
        v12 = (unint64_t *)(v11 + 8);
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
      }
      v14 = *(_QWORD *)(v3 + 104);
      *((_QWORD *)v7 + 12) = *(_QWORD *)(v3 + 96);
      *((_QWORD *)v7 + 13) = v14;
      if (v14)
      {
        v15 = (unint64_t *)(v14 + 8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      memcpy(v7 + 7, (const void *)(v3 + 112), 0x120uLL);
      v3 += 400;
      v7 += 25;
    }
    while (v3 != v4);
    a1[1] = v7;
  }
  return a1;
}

void sub_20EE64C9C(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v3;
  char *v4;
  void *v5;
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;

  v3 = (char *)*v1;
  if (*v1)
  {
    v4 = (char *)v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      do
      {
        v6 = v4 - 400;
        v7 = (std::__shared_weak_count *)*((_QWORD *)v4 - 37);
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v9 = __ldaxr(p_shared_owners);
          while (__stlxr(v9 - 1, p_shared_owners));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        v10 = (std::__shared_weak_count *)*((_QWORD *)v4 - 39);
        if (v10)
        {
          v11 = (unint64_t *)&v10->__shared_owners_;
          do
            v12 = __ldaxr(v11);
          while (__stlxr(v12 - 1, v11));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
        v4 -= 400;
      }
      while (v6 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EE64D58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  char *v13;
  char *v14;
  void *v15;

  if (*(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 48))
  {
    if (a1 != a2)
    {
      if (*(_BYTE *)(a1 + 48))
      {
        sub_20EE64F20((_QWORD *)a1, *(char **)a2, *(char **)(a2 + 8), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 5));
        sub_20EE650B8(a1 + 24, *(char ***)(a2 + 24), *(_QWORD *)(a2 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3));
      }
    }
  }
  else if (*(_BYTE *)(a1 + 48))
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4)
    {
      v5 = *(_QWORD *)(a1 + 32);
      v6 = *(void **)(a1 + 24);
      if (v5 != v4)
      {
        v7 = *(_QWORD *)(a1 + 32);
        do
        {
          v9 = *(void **)(v7 - 24);
          v7 -= 24;
          v8 = v9;
          if (v9)
          {
            *(_QWORD *)(v5 - 16) = v8;
            operator delete(v8);
          }
          v5 = v7;
        }
        while (v7 != v4);
        v6 = *(void **)(a1 + 24);
      }
      *(_QWORD *)(a1 + 32) = v4;
      operator delete(v6);
    }
    v15 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v15;
      operator delete(v15);
    }
    *(_BYTE *)(a1 + 48) = 0;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    v11 = *(char **)a2;
    v10 = *(_QWORD *)(a2 + 8);
    v12 = v10 - *(_QWORD *)a2;
    if (v10 != *(_QWORD *)a2)
    {
      if (0x8E38E38E38E38E39 * (v12 >> 5) >= 0xE38E38E38E38E4)
        sub_20E867F44();
      v13 = (char *)operator new(v12);
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v13;
      v14 = &v13[32 * (v12 >> 5)];
      *(_QWORD *)(a1 + 16) = v14;
      memcpy(v13, v11, v12);
      *(_QWORD *)(a1 + 8) = v14;
    }
    sub_20EE65438((_QWORD *)(a1 + 24), (uint64_t *)(a2 + 24));
    *(_BYTE *)(a1 + 48) = 1;
  }
}

void sub_20EE64F00(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EE64F20(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  char *v17;
  void *v18;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (0x8E38E38E38E38E39 * ((v8 - *result) >> 5) < __sz)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz > 0xE38E38E38E38E3)
      goto LABEL_23;
    v10 = 0x8E38E38E38E38E39 * (v8 >> 5);
    v11 = 2 * v10;
    if (2 * v10 <= __sz)
      v11 = __sz;
    v12 = v10 >= 0x71C71C71C71C71 ? 0xE38E38E38E38E3 : v11;
    if (v12 > 0xE38E38E38E38E3)
LABEL_23:
      sub_20E867F44();
    v13 = 36 * v12;
    result = operator new(288 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  if (0x8E38E38E38E38E39 * ((v16 - v9) >> 5) >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_22;
    v18 = (void *)*result;
LABEL_21:
    result = memmove(v18, __src, v14);
    goto LABEL_22;
  }
  v17 = &__src[32 * ((v16 - v9) >> 5)];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v17;
  if (v14)
  {
    v18 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  *v15 = &v9[v14];
  return result;
}

void sub_20EE650B8(uint64_t a1, char **a2, uint64_t a3, size_t __sz)
{
  char **v6;
  uint64_t v8;
  uint64_t v9;
  char **v10;
  char **v11;
  char **v12;
  char **v13;
  char *v14;
  char *v15;
  char **v16;
  uint64_t v17;
  uint64_t v18;
  char **v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  char **v26;
  char *v27;
  char *v28;

  v6 = a2;
  v9 = a1 + 16;
  v8 = *(_QWORD *)(a1 + 16);
  v10 = *(char ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)a1) >> 3) < __sz)
  {
    if (v10)
    {
      v11 = *(char ***)(a1 + 8);
      v12 = *(char ***)a1;
      if (v11 != v10)
      {
        v13 = *(char ***)(a1 + 8);
        do
        {
          v15 = *(v13 - 3);
          v13 -= 3;
          v14 = v15;
          if (v15)
          {
            *(v11 - 2) = v14;
            operator delete(v14);
          }
          v11 = v13;
        }
        while (v13 != v10);
        v12 = *(char ***)a1;
      }
      *(_QWORD *)(a1 + 8) = v10;
      operator delete(v12);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_40;
    v20 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v21 = 2 * v20;
    if (2 * v20 <= __sz)
      v21 = __sz;
    v22 = v20 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v21;
    if (v22 > 0xAAAAAAAAAAAAAAALL)
LABEL_40:
      sub_20E867F44();
    v23 = 3 * v22;
    v24 = operator new(24 * v22);
    *(_QWORD *)a1 = v24;
    *(_QWORD *)(a1 + 8) = v24;
    *(_QWORD *)(a1 + 16) = &v24[v23];
    v25 = sub_20EE6532C(v9, (uint64_t)v6, a3, v24);
LABEL_31:
    *(_QWORD *)(a1 + 8) = v25;
    return;
  }
  v16 = *(char ***)(a1 + 8);
  if (0xAAAAAAAAAAAAAAABLL * (v16 - v10) < __sz)
  {
    v17 = (uint64_t)&a2[v16 - v10];
    if (v16 != v10)
    {
      v18 = 8 * (v16 - v10);
      do
      {
        if (v6 != v10)
          sub_20E9BF954(v10, *v6, v6[1], (v6[1] - *v6) >> 4);
        v6 += 3;
        v10 += 3;
        v18 -= 24;
      }
      while (v18);
      v10 = *(char ***)(a1 + 8);
    }
    v25 = sub_20EE6532C(v9, v17, a3, v10);
    goto LABEL_31;
  }
  if (a2 != (char **)a3)
  {
    v19 = *(char ***)a1;
    do
    {
      if (v6 != v10)
        sub_20E9BF954(v10, *v6, v6[1], (v6[1] - *v6) >> 4);
      v6 += 3;
      v10 += 3;
      v19 += 3;
    }
    while (v6 != (char **)a3);
    v16 = *(char ***)(a1 + 8);
    if (v16 == v19)
      goto LABEL_39;
    goto LABEL_35;
  }
  v19 = *(char ***)a1;
  if (v16 != v10)
  {
LABEL_35:
    v26 = v16;
    do
    {
      v28 = *(v26 - 3);
      v26 -= 3;
      v27 = v28;
      if (v28)
      {
        *(v16 - 2) = v27;
        operator delete(v27);
      }
      v16 = v26;
    }
    while (v26 != v19);
  }
LABEL_39:
  *(_QWORD *)(a1 + 8) = v19;
}

void sub_20EE6531C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20EE65324(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_QWORD *sub_20EE6532C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  char *v7;
  size_t v8;
  uint64_t v9;
  const void *v10;
  uint64_t v11;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      v10 = *(const void **)v6;
      v9 = *(_QWORD *)(v6 + 8);
      v11 = v9 - *(_QWORD *)v6;
      if (v9 != *(_QWORD *)v6)
      {
        if (v11 < 0)
          sub_20E867F44();
        v7 = (char *)operator new(v9 - *(_QWORD *)v6);
        *a4 = v7;
        a4[1] = v7;
        a4[2] = &v7[16 * (v11 >> 4)];
        v8 = v11 & 0xFFFFFFFFFFFFFFF0;
        memcpy(v7, v10, v8);
        a4[1] = &v7[v8];
      }
      a4 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_20EE65400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E96AC74((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EE65414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_20E96AC74((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EE65438(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  _QWORD *v8;

  a1[2] = 0;
  v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = v5 - *a2;
  if (v5 != *a2)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    if (v7 >= 0xAAAAAAAAAAAAAABLL)
      sub_20E867F44();
    v8 = operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[3 * v7];
    a1[1] = sub_20EE6532C(v3, v4, v5, v8);
  }
  return a1;
}

void sub_20EE654E0(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v2;
  char *v4;
  char *v5;
  void *v6;
  char *v7;
  void *v8;
  void *v9;

  v1[1] = v2;
  v4 = (char *)*v1;
  if (*v1)
  {
    v5 = (char *)v1[1];
    v6 = *v1;
    if (v5 != v4)
    {
      v7 = (char *)v1[1];
      do
      {
        v9 = (void *)*((_QWORD *)v7 - 3);
        v7 -= 24;
        v8 = v9;
        if (v9)
        {
          *((_QWORD *)v5 - 2) = v8;
          operator delete(v8);
        }
        v5 = v7;
      }
      while (v7 != v4);
      v6 = *v1;
    }
    v1[1] = v4;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EE65544(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)(a2 + 72))
  {
    if (a1 != a2)
    {
      if (*(_BYTE *)(a1 + 72))
      {
        sub_20EE656E0((_QWORD *)a1, *(char **)a2, *(char **)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 5);
        sub_20EE6582C((_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3));
        sub_20EE63FD4(a1 + 48, *(char ***)(a2 + 48), *(_QWORD *)(a2 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 3));
      }
    }
  }
  else if (*(_BYTE *)(a1 + 72))
  {
    sub_20EE6560C(a1);
  }
  else
  {
    sub_20EE65B84((_QWORD *)a1, a2);
    *(_BYTE *)(a1 + 72) = 1;
  }
}

void sub_20EE6560C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void (***v8)(_QWORD);
  void (***v9)(_QWORD);
  void *v10;
  void (***v11)(_QWORD);
  void (***v12)(_QWORD);
  void (**v13)(_QWORD);
  BOOL v14;
  void *v15;

  if (*(_BYTE *)(a1 + 72))
  {
    v2 = *(_QWORD *)(a1 + 48);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 56);
      v4 = *(void **)(a1 + 48);
      if (v3 != v2)
      {
        v5 = *(_QWORD *)(a1 + 56);
        do
        {
          v7 = *(void **)(v5 - 24);
          v5 -= 24;
          v6 = v7;
          if (v7)
          {
            *(_QWORD *)(v3 - 16) = v6;
            operator delete(v6);
          }
          v3 = v5;
        }
        while (v5 != v2);
        v4 = *(void **)(a1 + 48);
      }
      *(_QWORD *)(a1 + 56) = v2;
      operator delete(v4);
    }
    v8 = *(void (****)(_QWORD))(a1 + 24);
    if (v8)
    {
      v9 = *(void (****)(_QWORD))(a1 + 32);
      v10 = *(void **)(a1 + 24);
      if (v9 != v8)
      {
        v11 = v9 - 3;
        v12 = v9 - 3;
        do
        {
          v13 = *v12;
          v12 -= 3;
          (*v13)(v11);
          v14 = v11 == v8;
          v11 = v12;
        }
        while (!v14);
        v10 = *(void **)(a1 + 24);
      }
      *(_QWORD *)(a1 + 32) = v8;
      operator delete(v10);
    }
    v15 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v15;
      operator delete(v15);
    }
    *(_BYTE *)(a1 + 72) = 0;
  }
}

_QWORD *sub_20EE656E0(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  size_t v19;
  void *v20;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 5)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 59)
      goto LABEL_22;
    v10 = v8 >> 4;
    if (v8 >> 4 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0;
    v12 = 0x7FFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 59)
LABEL_22:
      sub_20E867F44();
    v13 = 4 * v12;
    result = operator new(32 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14 - 7);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 5;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = v14 - 7;
    v20 = (void *)*result;
LABEL_20:
    result = memmove(v20, __src, v19);
    goto LABEL_21;
  }
  v18 = &__src[32 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9 - 7);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v14 - 7;
    v20 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

void sub_20EE6582C(_QWORD *a1, uint64_t a2, uint64_t a3, size_t __sz)
{
  uint64_t v6;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  void (***v12)(_QWORD);
  void (***v13)(_QWORD);
  void (**v14)(_QWORD);
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  void (***v46)(_QWORD);
  void (***v47)(_QWORD);
  void (**v48)(_QWORD);

  v6 = a2;
  v8 = a1[2];
  v9 = (_QWORD *)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *a1) >> 3) >= __sz)
  {
    v25 = (_QWORD *)a1[1];
    if (0xAAAAAAAAAAAAAAABLL * (v25 - v9) < __sz)
    {
      v26 = a2 + 8 * (v25 - v9);
      if (v25 == v9)
      {
        v27 = (_QWORD *)*a1;
        if (v26 == a3)
        {
LABEL_56:
          a1[1] = v27;
          return;
        }
      }
      else
      {
        do
        {
          v29 = *(_QWORD *)(v6 + 8);
          v28 = *(_QWORD *)(v6 + 16);
          if (v28)
          {
            v30 = (unint64_t *)(v28 + 8);
            do
              v31 = __ldxr(v30);
            while (__stxr(v31 + 1, v30));
          }
          v32 = (std::__shared_weak_count *)v9[2];
          v9[1] = v29;
          v9[2] = v28;
          if (v32)
          {
            p_shared_owners = (unint64_t *)&v32->__shared_owners_;
            do
              v34 = __ldaxr(p_shared_owners);
            while (__stlxr(v34 - 1, p_shared_owners));
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
          }
          v6 += 24;
          v9 += 3;
        }
        while (v6 != v26);
        v9 = (_QWORD *)a1[1];
        v27 = v9;
        if (v26 == a3)
          goto LABEL_56;
      }
      v27 = v9;
      do
      {
        v43 = *(_QWORD *)(v26 + 8);
        v42 = *(_QWORD *)(v26 + 16);
        *v27 = &off_24CA1A9A0;
        v27[1] = v43;
        v27[2] = v42;
        if (v42)
        {
          v44 = (unint64_t *)(v42 + 8);
          do
            v45 = __ldxr(v44);
          while (__stxr(v45 + 1, v44));
        }
        v26 += 24;
        v27 += 3;
      }
      while (v26 != a3);
      goto LABEL_56;
    }
    if (a2 == a3)
    {
      if (v25 == v9)
      {
LABEL_61:
        a1[1] = v9;
        return;
      }
    }
    else
    {
      do
      {
        v36 = *(_QWORD *)(v6 + 8);
        v35 = *(_QWORD *)(v6 + 16);
        if (v35)
        {
          v37 = (unint64_t *)(v35 + 8);
          do
            v38 = __ldxr(v37);
          while (__stxr(v38 + 1, v37));
        }
        v39 = (std::__shared_weak_count *)v9[2];
        v9[1] = v36;
        v9[2] = v35;
        if (v39)
        {
          v40 = (unint64_t *)&v39->__shared_owners_;
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
        v6 += 24;
        v9 += 3;
      }
      while (v6 != a3);
      v25 = (_QWORD *)a1[1];
      if (v25 == v9)
        goto LABEL_61;
    }
    v46 = (void (***)(_QWORD))(v25 - 3);
    v47 = (void (***)(_QWORD))(v25 - 3);
    do
    {
      v48 = *v47;
      v47 -= 3;
      (*v48)(v46);
      v15 = v46 == v9;
      v46 = v47;
    }
    while (!v15);
    goto LABEL_61;
  }
  if (v9)
  {
    v10 = (_QWORD *)a1[1];
    v11 = (_QWORD *)*a1;
    if (v10 != v9)
    {
      v12 = (void (***)(_QWORD))(v10 - 3);
      v13 = (void (***)(_QWORD))(v10 - 3);
      do
      {
        v14 = *v13;
        v13 -= 3;
        (*v14)(v12);
        v15 = v12 == v9;
        v12 = v13;
      }
      while (!v15);
      v11 = (_QWORD *)*a1;
    }
    a1[1] = v9;
    operator delete(v11);
    v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  if (__sz > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_62;
  v16 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
  v17 = 2 * v16;
  if (2 * v16 <= __sz)
    v17 = __sz;
  v18 = v16 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v17;
  if (v18 > 0xAAAAAAAAAAAAAAALL)
LABEL_62:
    sub_20E867F44();
  v19 = 3 * v18;
  v20 = operator new(24 * v18);
  *a1 = v20;
  a1[1] = v20;
  for (a1[2] = &v20[v19]; v6 != a3; v20 += 3)
  {
    v22 = *(_QWORD *)(v6 + 8);
    v21 = *(_QWORD *)(v6 + 16);
    *v20 = &off_24CA1A9A0;
    v20[1] = v22;
    v20[2] = v21;
    if (v21)
    {
      v23 = (unint64_t *)(v21 + 8);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    v6 += 24;
  }
  a1[1] = v20;
}

_QWORD *sub_20EE65B84(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  uint64_t v6;
  char *v7;
  char *v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v5 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD *)a2)
  {
    if (v6 < 0)
      sub_20E867F44();
    v7 = (char *)operator new(v4 - *(_QWORD *)a2);
    *a1 = v7;
    a1[1] = v7;
    v8 = &v7[32 * (v6 >> 5)];
    a1[2] = v8;
    memcpy(v7, v5, v6 - 7);
    a1[1] = v8;
  }
  sub_20EE65C90(a1 + 3, (uint64_t *)(a2 + 24));
  sub_20EE64A6C(a1 + 6, (uint64_t *)(a2 + 48));
  return a1;
}

void sub_20EE65C20(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  char *v4;
  char *v5;
  void *v6;
  char *v7;
  char *v8;
  void (**v9)(char *);
  BOOL v10;
  void *v11;

  v4 = (char *)*v2;
  if (*v2)
  {
    v5 = *(char **)(v1 + 32);
    v6 = *v2;
    if (v5 != v4)
    {
      v7 = v5 - 24;
      v8 = v5 - 24;
      do
      {
        v9 = *(void (***)(char *))v8;
        v8 -= 24;
        (*v9)(v7);
        v10 = v7 == v4;
        v7 = v8;
      }
      while (!v10);
      v6 = *v2;
    }
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v6);
  }
  v11 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EE65C90(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 != *a2)
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 3);
    if (v6 >= 0xAAAAAAAAAAAAAABLL)
      sub_20E867F44();
    v7 = operator new(v5);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[3 * v6];
    do
    {
      v9 = *(_QWORD *)(v3 + 8);
      v8 = *(_QWORD *)(v3 + 16);
      *v7 = &off_24CA1A9A0;
      v7[1] = v9;
      v7[2] = v8;
      if (v8)
      {
        v10 = (unint64_t *)(v8 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      v3 += 24;
      v7 += 3;
    }
    while (v3 != v4);
    a1[1] = v7;
  }
  return a1;
}

void sub_20EE65D60(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v3;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v3 = (char *)*v1;
  if (*v1)
  {
    v4 = (char *)v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      v6 = v4 - 24;
      v7 = v4 - 24;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 24;
        (*v8)(v6);
        v9 = v6 == v3;
        v6 = v7;
      }
      while (!v9);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EE65DB4(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;
  void *v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 56;
    v4 = *(void **)(i - 24);
    if (v4)
    {
      *(_QWORD *)(i - 16) = v4;
      operator delete(v4);
    }
    v5 = *(void **)(i - 48);
    if (v5)
    {
      *(_QWORD *)(i - 40) = v5;
      operator delete(v5);
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20EE65E28(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;

  if (a4)
  {
    v5 = (_QWORD *)result;
    if (a4 >= 0x276276276276277)
      sub_20E867F44();
    result = (uint64_t)operator new(104 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = result + 104 * a4;
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = sub_20EE65FB0(v8 + v9, a2 + v9);
        v9 += 104;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_20EE65EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20EE65F2C(&a9);
  _Unwind_Resume(a1);
}

void sub_20EE65EFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  for (; v11; v11 -= 104)
    sub_20E9905B4((_QWORD *)(v10 - 104 + v11));
  *(_QWORD *)(v9 + 8) = v10;
  sub_20EE65F2C(&a9);
  _Unwind_Resume(a1);
}

void ***sub_20EE65F2C(void ***result)
{
  void ***v1;
  void **v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = **result;
    if (v3)
    {
      v4 = v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          v4 -= 13;
          sub_20E9905B4(v4);
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20EE65FB0(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  char *v12;
  char *v13;
  _BYTE *v14;
  _BYTE *v15;
  int64_t v16;
  char *v17;
  char *v18;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  sub_20EE66268((_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), 0x6FB586FB586FB587 * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3));
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v5 = *(_BYTE **)(a2 + 32);
  v4 = *(_BYTE **)(a2 + 40);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (0x8E38E38E38E38E39 * (v6 >> 3) > 0x38E38E38E38E38ELL)
      sub_20EB849AC();
    v7 = (char *)operator new(v6);
    *(_QWORD *)(a1 + 32) = v7;
    *(_QWORD *)(a1 + 40) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a1 + 48) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a1 + 40) = v8;
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v10 = *(_BYTE **)(a2 + 56);
  v9 = *(_BYTE **)(a2 + 64);
  v11 = v9 - v10;
  if (v9 != v10)
  {
    if (0x8E38E38E38E38E39 * (v11 >> 3) > 0x38E38E38E38E38ELL)
      sub_20EB849AC();
    v12 = (char *)operator new(v11);
    *(_QWORD *)(a1 + 56) = v12;
    *(_QWORD *)(a1 + 64) = v12;
    v13 = &v12[8 * (v11 >> 3)];
    *(_QWORD *)(a1 + 72) = v13;
    memcpy(v12, v10, v11);
    *(_QWORD *)(a1 + 64) = v13;
  }
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  v15 = *(_BYTE **)(a2 + 80);
  v14 = *(_BYTE **)(a2 + 88);
  v16 = v14 - v15;
  if (v14 != v15)
  {
    if (0x8E38E38E38E38E39 * (v16 >> 3) > 0x38E38E38E38E38ELL)
      sub_20EB849AC();
    v17 = (char *)operator new(v16);
    *(_QWORD *)(a1 + 80) = v17;
    *(_QWORD *)(a1 + 88) = v17;
    v18 = &v17[8 * (v16 >> 3)];
    *(_QWORD *)(a1 + 96) = v18;
    memcpy(v17, v15, v16);
    *(_QWORD *)(a1 + 88) = v18;
  }
  return a1;
}

void sub_20EE66178(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void *v7;
  void *v8;
  void *v9;

  v7 = *v5;
  if (*v5)
  {
    v1[11] = v7;
    operator delete(v7);
    v8 = *v4;
    if (!*v4)
    {
LABEL_3:
      v9 = *v3;
      if (!*v3)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v8 = *v4;
    if (!*v4)
      goto LABEL_3;
  }
  v1[8] = v8;
  operator delete(v8);
  v9 = *v3;
  if (!*v3)
  {
LABEL_4:
    sub_20EE661FC(v2);
    _Unwind_Resume(a1);
  }
LABEL_7:
  v1[5] = v9;
  operator delete(v9);
  sub_20EE661FC(v2);
  _Unwind_Resume(a1);
}

void **sub_20EE661FC(void **a1)
{
  char *v2;
  char *v3;
  void *v4;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        sub_20E990658((uint64_t)(v3 - 208));
        sub_20E990658((uint64_t)(v3 - 416));
        v3 -= 440;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

_QWORD *sub_20EE66268(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;

  if (a4)
  {
    v5 = result;
    if (a4 >= 0x94F2094F2094F3)
      sub_20E867F44();
    result = operator new(440 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[55 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        v10 = &v8[v9 / 8];
        *(_OWORD *)v10 = *(_OWORD *)(a2 + v9);
        v10[2] = *(_QWORD *)(a2 + v9 + 16);
        sub_20EE66450(&v8[v9 / 8 + 3], a2 + v9 + 24);
        result = sub_20EE66944(&v8[v9 / 8 + 29], (uint64_t *)(a2 + v9 + 232));
        v9 += 440;
      }
      while (a2 + v9 != a3);
      v8 = (_QWORD *)((char *)v8 + v9);
    }
    v5[1] = v8;
  }
  return result;
}

void sub_20EE66354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20EE663B4(&a9);
  _Unwind_Resume(a1);
}

void sub_20EE66368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  for (; v11; v11 -= 440)
  {
    sub_20E990658(v10 + v11 - 208);
    sub_20E990658(v10 + v11 - 416);
  }
  *(_QWORD *)(v9 + 8) = v10;
  sub_20EE663B4(&a9);
  _Unwind_Resume(a1);
}

void ***sub_20EE663B4(void ***result)
{
  void ***v1;
  void **v2;
  char *v3;
  char *v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (char *)**result;
    if (v3)
    {
      v4 = (char *)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          sub_20E990658((uint64_t)(v4 - 208));
          sub_20E990658((uint64_t)(v4 - 416));
          v4 -= 440;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

_QWORD *sub_20EE66450(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  uint64_t v6;
  char *v7;
  size_t v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  _BYTE *v14;
  _BYTE *v15;
  int64_t v16;
  char *v17;
  char *v18;
  _BYTE *v19;
  _BYTE *v20;
  int64_t v21;
  char *v22;
  char *v23;
  _BYTE *v24;
  _BYTE *v25;
  int64_t v26;
  char *v27;
  char *v28;
  _BYTE *v29;
  _BYTE *v30;
  int64_t v31;
  char *v32;
  char *v33;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v5 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD *)a2)
  {
    if (v6 < 0)
      sub_20E867F44();
    v7 = (char *)operator new(v4 - *(_QWORD *)a2);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[16 * (v6 >> 4)];
    v8 = v6 & 0xFFFFFFFFFFFFFFF0;
    memcpy(v7, v5, v8);
    a1[1] = &v7[v8];
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  v10 = *(_BYTE **)(a2 + 24);
  v9 = *(_BYTE **)(a2 + 32);
  v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0)
      sub_20E867F44();
    v12 = (char *)operator new(v9 - v10);
    a1[3] = v12;
    a1[4] = v12;
    a1[5] = &v12[16 * (v11 >> 4)];
    v13 = v11 & 0xFFFFFFFFFFFFFFF0;
    memcpy(v12, v10, v13);
    a1[4] = &v12[v13];
  }
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  v15 = *(_BYTE **)(a2 + 48);
  v14 = *(_BYTE **)(a2 + 56);
  v16 = v14 - v15;
  if (v14 != v15)
  {
    if (v16 < 0)
      sub_20E867F44();
    v17 = (char *)operator new(v14 - v15);
    a1[6] = v17;
    a1[7] = v17;
    v18 = &v17[8 * (v16 >> 3)];
    a1[8] = v18;
    memcpy(v17, v15, v16);
    a1[7] = v18;
  }
  sub_20EE667C4((uint64_t)(a1 + 9), a2 + 72);
  a1[13] = 0;
  a1[14] = 0;
  a1[15] = 0;
  v20 = *(_BYTE **)(a2 + 104);
  v19 = *(_BYTE **)(a2 + 112);
  v21 = v19 - v20;
  if (v19 != v20)
  {
    if (v21 < 0)
      sub_20EABADD4();
    v22 = (char *)operator new(v19 - v20);
    a1[13] = v22;
    a1[14] = v22;
    v23 = &v22[4 * (v21 >> 2)];
    a1[15] = v23;
    memcpy(v22, v20, v21);
    a1[14] = v23;
  }
  sub_20EE66884((uint64_t)(a1 + 16), a2 + 128);
  a1[20] = 0;
  a1[21] = 0;
  a1[22] = 0;
  v25 = *(_BYTE **)(a2 + 160);
  v24 = *(_BYTE **)(a2 + 168);
  v26 = v24 - v25;
  if (v24 != v25)
  {
    if (v26 < 0)
      sub_20E867F44();
    v27 = (char *)operator new(v24 - v25);
    a1[20] = v27;
    a1[21] = v27;
    v28 = &v27[8 * (v26 >> 3)];
    a1[22] = v28;
    memcpy(v27, v25, v26);
    a1[21] = v28;
  }
  a1[23] = 0;
  a1[24] = 0;
  a1[25] = 0;
  v30 = *(_BYTE **)(a2 + 184);
  v29 = *(_BYTE **)(a2 + 192);
  v31 = v29 - v30;
  if (v29 != v30)
  {
    if (v31 < 0)
      sub_20E867F44();
    v32 = (char *)operator new(v29 - v30);
    a1[23] = v32;
    a1[24] = v32;
    v33 = &v32[8 * (v31 >> 3)];
    a1[25] = v33;
    memcpy(v32, v30, v31);
    a1[24] = v33;
  }
  return a1;
}

void sub_20EE666B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;
  void **v12;
  void **v13;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  v15 = *v13;
  if (*v13)
  {
    *(_QWORD *)(v10 + 112) = v15;
    operator delete(v15);
  }
  if (*(_BYTE *)(v10 + 96))
  {
    v16 = *a10;
    if (*a10)
    {
      *(_QWORD *)(v10 + 80) = v16;
      operator delete(v16);
    }
  }
  v17 = *v12;
  if (*v12)
  {
    *(_QWORD *)(v10 + 56) = v17;
    operator delete(v17);
    v18 = *v11;
    if (!*v11)
    {
LABEL_8:
      v19 = *(void **)v10;
      if (!*(_QWORD *)v10)
        goto LABEL_10;
      goto LABEL_9;
    }
  }
  else
  {
    v18 = *v11;
    if (!*v11)
      goto LABEL_8;
  }
  *(_QWORD *)(v10 + 32) = v18;
  operator delete(v18);
  v19 = *(void **)v10;
  if (!*(_QWORD *)v10)
LABEL_10:
    _Unwind_Resume(exception_object);
LABEL_9:
  *(_QWORD *)(v10 + 8) = v19;
  operator delete(v19);
  goto LABEL_10;
}

void sub_20EE667A4()
{
  _QWORD *v0;

  if (*v0)
    JUMPOUT(0x20EE66790);
  JUMPOUT(0x20EE66768);
}

void sub_20EE667B4()
{
  _QWORD *v0;

  if (!*v0)
    JUMPOUT(0x20EE66778);
  JUMPOUT(0x20EE66770);
}

uint64_t sub_20EE667C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  int64_t v5;
  char *v6;
  char *v7;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    v4 = *(const void **)a2;
    v3 = *(_QWORD *)(a2 + 8);
    v5 = v3 - *(_QWORD *)a2;
    if (v3 != *(_QWORD *)a2)
    {
      if (v5 < 0)
        sub_20E867F44();
      v6 = (char *)operator new(v3 - *(_QWORD *)a2);
      *(_QWORD *)a1 = v6;
      *(_QWORD *)(a1 + 8) = v6;
      v7 = &v6[8 * (v5 >> 3)];
      *(_QWORD *)(a1 + 16) = v7;
      memcpy(v6, v4, v5);
      *(_QWORD *)(a1 + 8) = v7;
    }
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

void sub_20EE66850(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;
  void *v4;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  if (*(_BYTE *)(v1 + 24))
  {
    v4 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v4;
      operator delete(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EE66884(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  int64_t v5;
  char *v6;
  char *v7;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    v4 = *(const void **)a2;
    v3 = *(_QWORD *)(a2 + 8);
    v5 = v3 - *(_QWORD *)a2;
    if (v3 != *(_QWORD *)a2)
    {
      if (v5 < 0)
        sub_20EABADD4();
      v6 = (char *)operator new(v3 - *(_QWORD *)a2);
      *(_QWORD *)a1 = v6;
      *(_QWORD *)(a1 + 8) = v6;
      v7 = &v6[4 * (v5 >> 2)];
      *(_QWORD *)(a1 + 16) = v7;
      memcpy(v6, v4, v5);
      *(_QWORD *)(a1 + 8) = v7;
    }
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

void sub_20EE66910(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;
  void *v4;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  if (*(_BYTE *)(v1 + 24))
  {
    v4 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v4;
      operator delete(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EE66944(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _BYTE *v18;
  _BYTE *v19;
  int64_t v20;
  char *v21;
  char *v22;
  _BYTE *v23;
  _BYTE *v24;
  int64_t v25;
  char *v26;
  char *v27;
  _BYTE *v28;
  _BYTE *v29;
  int64_t v30;
  char *v31;
  char *v32;
  _BYTE *v33;
  _BYTE *v34;
  int64_t v35;
  char *v36;
  char *v37;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = v5 - *a2;
  if (v5 != *a2)
  {
    if (v6 < 0)
      sub_20E867F44();
    v7 = (char *)operator new(v5 - *a2);
    v8 = 0;
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[32 * (v6 >> 5)];
    do
    {
      v9 = v4 + v8;
      v10 = &v7[v8];
      *(_OWORD *)v10 = *(_OWORD *)(v4 + v8);
      *((_OWORD *)v10 + 1) = *(_OWORD *)(v4 + v8 + 16);
      v8 += 32;
    }
    while (v9 + 32 != v5);
    a1[1] = &v7[v8];
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  v11 = a2[3];
  v12 = a2[4];
  v13 = v12 - v11;
  if (v12 != v11)
  {
    if (v13 < 0)
      sub_20E867F44();
    v14 = (char *)operator new(v12 - v11);
    v15 = 0;
    a1[3] = v14;
    a1[4] = v14;
    a1[5] = &v14[32 * (v13 >> 5)];
    do
    {
      v16 = v11 + v15;
      v17 = &v14[v15];
      *(_OWORD *)v17 = *(_OWORD *)(v11 + v15);
      *((_OWORD *)v17 + 1) = *(_OWORD *)(v11 + v15 + 16);
      v15 += 32;
    }
    while (v16 + 32 != v12);
    a1[4] = &v14[v15];
  }
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  v19 = (_BYTE *)a2[6];
  v18 = (_BYTE *)a2[7];
  v20 = v18 - v19;
  if (v18 != v19)
  {
    if (v20 < 0)
      sub_20E867F44();
    v21 = (char *)operator new(v18 - v19);
    a1[6] = v21;
    a1[7] = v21;
    v22 = &v21[8 * (v20 >> 3)];
    a1[8] = v22;
    memcpy(v21, v19, v20);
    a1[7] = v22;
  }
  sub_20EE667C4((uint64_t)(a1 + 9), (uint64_t)(a2 + 9));
  a1[13] = 0;
  a1[14] = 0;
  a1[15] = 0;
  v24 = (_BYTE *)a2[13];
  v23 = (_BYTE *)a2[14];
  v25 = v23 - v24;
  if (v23 != v24)
  {
    if (v25 < 0)
      sub_20EABADD4();
    v26 = (char *)operator new(v23 - v24);
    a1[13] = v26;
    a1[14] = v26;
    v27 = &v26[4 * (v25 >> 2)];
    a1[15] = v27;
    memcpy(v26, v24, v25);
    a1[14] = v27;
  }
  sub_20EE66884((uint64_t)(a1 + 16), (uint64_t)(a2 + 16));
  a1[20] = 0;
  a1[21] = 0;
  a1[22] = 0;
  v29 = (_BYTE *)a2[20];
  v28 = (_BYTE *)a2[21];
  v30 = v28 - v29;
  if (v28 != v29)
  {
    if (v30 < 0)
      sub_20E867F44();
    v31 = (char *)operator new(v28 - v29);
    a1[20] = v31;
    a1[21] = v31;
    v32 = &v31[8 * (v30 >> 3)];
    a1[22] = v32;
    memcpy(v31, v29, v30);
    a1[21] = v32;
  }
  a1[23] = 0;
  a1[24] = 0;
  a1[25] = 0;
  v34 = (_BYTE *)a2[23];
  v33 = (_BYTE *)a2[24];
  v35 = v33 - v34;
  if (v33 != v34)
  {
    if (v35 < 0)
      sub_20E867F44();
    v36 = (char *)operator new(v33 - v34);
    a1[23] = v36;
    a1[24] = v36;
    v37 = &v36[8 * (v35 >> 3)];
    a1[25] = v37;
    memcpy(v36, v34, v35);
    a1[24] = v37;
  }
  return a1;
}

void sub_20EE66BD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;
  void **v12;
  void **v13;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  v15 = *v13;
  if (*v13)
  {
    *(_QWORD *)(v10 + 112) = v15;
    operator delete(v15);
  }
  if (*(_BYTE *)(v10 + 96))
  {
    v16 = *a10;
    if (*a10)
    {
      *(_QWORD *)(v10 + 80) = v16;
      operator delete(v16);
    }
  }
  v17 = *v12;
  if (*v12)
  {
    *(_QWORD *)(v10 + 56) = v17;
    operator delete(v17);
    v18 = *v11;
    if (!*v11)
    {
LABEL_8:
      v19 = *(void **)v10;
      if (!*(_QWORD *)v10)
        goto LABEL_10;
      goto LABEL_9;
    }
  }
  else
  {
    v18 = *v11;
    if (!*v11)
      goto LABEL_8;
  }
  *(_QWORD *)(v10 + 32) = v18;
  operator delete(v18);
  v19 = *(void **)v10;
  if (!*(_QWORD *)v10)
LABEL_10:
    _Unwind_Resume(exception_object);
LABEL_9:
  *(_QWORD *)(v10 + 8) = v19;
  operator delete(v19);
  goto LABEL_10;
}

void sub_20EE66CC8()
{
  _QWORD *v0;

  if (*v0)
    JUMPOUT(0x20EE66CB4);
  JUMPOUT(0x20EE66C8CLL);
}

void sub_20EE66CD8()
{
  _QWORD *v0;

  if (!*v0)
    JUMPOUT(0x20EE66C9CLL);
  JUMPOUT(0x20EE66C94);
}

_QWORD *sub_20EE66CE8(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  sub_20E866B68((uint64_t)(a1 + 4), a1[5]);
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void ***sub_20EE66D34(void ***a1, void *__src)
{
  void **v4;
  unint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;

  v4 = *a1;
  v6 = (char *)(*a1)[1];
  v5 = (unint64_t)(*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    v8 = (char *)*v4;
    v9 = 0xCBEEA4E1A08AD8F3 * ((v6 - (_BYTE *)*v4) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0x8AD8F2FBA93868)
      sub_20E92CED8();
    v11 = 0xCBEEA4E1A08AD8F3 * ((uint64_t)(v5 - (_QWORD)v8) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x456C797DD49C34)
      v12 = 0x8AD8F2FBA93868;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 > 0x8AD8F2FBA93868)
        sub_20E877A38();
      v13 = (char *)operator new(472 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[472 * v9];
    v15 = &v13[472 * v12];
    memcpy(v14, __src, 0x1D8uLL);
    v7 = v14 + 472;
    if (v6 != v8)
    {
      do
      {
        v6 -= 472;
        v14 -= 472;
        memcpy(v14, v6, 0x1D4uLL);
      }
      while (v6 != v8);
      v6 = (char *)*v4;
    }
    *v4 = v14;
    v4[1] = v7;
    v4[2] = v15;
    if (v6)
      operator delete(v6);
  }
  else
  {
    memcpy((*a1)[1], __src, 0x1D8uLL);
    v7 = v6 + 472;
  }
  v4[1] = v7;
  return a1;
}

uint64_t **sub_20EE66E94(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  const void *v9;
  size_t v10;
  uint64_t **v11;
  _QWORD *v12;
  const void *v13;
  const void *v14;
  int v15;
  const void *v16;
  size_t v17;
  size_t v18;
  int v19;
  int v20;
  char *v21;
  _BYTE *v22;
  __int128 *v23;
  __int128 v24;
  uint64_t *v25;
  uint64_t *v26;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *((char *)a2 + 23);
    if (v8 >= 0)
      v9 = a2;
    else
      v9 = *a2;
    if (v8 >= 0)
      v10 = *((unsigned __int8 *)a2 + 23);
    else
      v10 = (size_t)a2[1];
    while (1)
    {
      v11 = (uint64_t **)v6;
      v14 = (const void *)v6[4];
      v12 = v6 + 4;
      v13 = v14;
      v15 = *((char *)v12 + 23);
      if (v15 >= 0)
        v16 = v12;
      else
        v16 = v13;
      if (v15 >= 0)
        v17 = *((unsigned __int8 *)v12 + 23);
      else
        v17 = v12[1];
      if (v17 >= v10)
        v18 = v10;
      else
        v18 = v17;
      v19 = memcmp(v9, v16, v18);
      if (v19)
      {
        if (v19 < 0)
          goto LABEL_8;
LABEL_22:
        v20 = memcmp(v16, v9, v18);
        if (v20)
        {
          if ((v20 & 0x80000000) == 0)
            return v11;
        }
        else if (v17 >= v10)
        {
          return v11;
        }
        v6 = v11[1];
        if (!v6)
        {
          v7 = v11 + 1;
          goto LABEL_29;
        }
      }
      else
      {
        if (v10 >= v17)
          goto LABEL_22;
LABEL_8:
        v6 = *v11;
        v7 = v11;
        if (!*v11)
          goto LABEL_29;
      }
    }
  }
  v11 = a1 + 1;
LABEL_29:
  v21 = (char *)operator new(0x188uLL);
  v22 = v21 + 32;
  v23 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_20E860C04(v22, *(void **)v23, *((_QWORD *)v23 + 1));
  }
  else
  {
    v24 = *v23;
    *((_QWORD *)v21 + 6) = *((_QWORD *)v23 + 2);
    *(_OWORD *)v22 = v24;
  }
  *(_OWORD *)(v21 + 248) = 0u;
  *(_OWORD *)(v21 + 232) = 0u;
  *(_OWORD *)(v21 + 216) = 0u;
  *(_OWORD *)(v21 + 200) = 0u;
  *(_OWORD *)(v21 + 184) = 0u;
  *(_OWORD *)(v21 + 168) = 0u;
  *(_OWORD *)(v21 + 152) = 0u;
  *(_OWORD *)(v21 + 136) = 0u;
  *(_OWORD *)(v21 + 120) = 0u;
  *(_OWORD *)(v21 + 104) = 0u;
  *(_OWORD *)(v21 + 88) = 0u;
  *(_OWORD *)(v21 + 72) = 0u;
  *(_OWORD *)(v21 + 56) = 0u;
  *(_OWORD *)(v21 + 360) = 0u;
  *(_OWORD *)(v21 + 376) = 0u;
  *(_OWORD *)(v21 + 328) = 0u;
  *(_OWORD *)(v21 + 344) = 0u;
  *(_OWORD *)(v21 + 296) = 0u;
  *(_OWORD *)(v21 + 312) = 0u;
  *(_OWORD *)(v21 + 280) = 0u;
  *(_OWORD *)(v21 + 264) = 0u;
  *(_QWORD *)v21 = 0;
  *((_QWORD *)v21 + 1) = 0;
  *((_QWORD *)v21 + 2) = v11;
  *v7 = (uint64_t *)v21;
  v25 = (uint64_t *)v21;
  v26 = (uint64_t *)**a1;
  if (v26)
  {
    *a1 = v26;
    v25 = *v7;
  }
  sub_20E868578(a1[1], v25);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v21;
}

void sub_20EE6705C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE67070(uint64_t a1, __int128 *a2, _QWORD *a3, __int128 *a4, __int128 *a5)
{
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v9 = *a4;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a4 + 2);
  *(_OWORD *)a1 = v9;
  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04((_BYTE *)(a1 + 24), *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v10 = *a2;
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 24) = v10;
  }
  *(_QWORD *)(a1 + 48) = *a3;
  v11 = *(__int128 *)((char *)a4 + 24);
  v12 = *(__int128 *)((char *)a4 + 40);
  v13 = *(__int128 *)((char *)a4 + 56);
  *(_OWORD *)(a1 + 104) = *(__int128 *)((char *)a4 + 72);
  *(_OWORD *)(a1 + 88) = v13;
  *(_OWORD *)(a1 + 72) = v12;
  *(_OWORD *)(a1 + 56) = v11;
  v14 = *(__int128 *)((char *)a4 + 88);
  v15 = *(__int128 *)((char *)a4 + 104);
  v16 = *(__int128 *)((char *)a4 + 120);
  *(_OWORD *)(a1 + 168) = *(__int128 *)((char *)a4 + 136);
  *(_OWORD *)(a1 + 152) = v16;
  *(_OWORD *)(a1 + 136) = v15;
  *(_OWORD *)(a1 + 120) = v14;
  v17 = a5[6];
  v18 = a5[7];
  v19 = a5[5];
  *(_OWORD *)(a1 + 248) = a5[4];
  *(_OWORD *)(a1 + 280) = v17;
  *(_OWORD *)(a1 + 296) = v18;
  *(_OWORD *)(a1 + 264) = v19;
  v20 = *a5;
  v21 = a5[1];
  v22 = a5[2];
  *(_OWORD *)(a1 + 232) = a5[3];
  *(_OWORD *)(a1 + 216) = v22;
  *(_OWORD *)(a1 + 200) = v21;
  *(_OWORD *)(a1 + 184) = v20;
  v23 = a4[18];
  *(_QWORD *)(a1 + 328) = *((_QWORD *)a4 + 38);
  *(_OWORD *)(a1 + 312) = v23;
  *(_BYTE *)(a1 + 336) = 0;
  *(_BYTE *)(a1 + 360) = 0;
  if (!*((_BYTE *)a4 + 280)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/ObjectAnchorCM.h", 58, (uint64_t)"obj_anchor.anchored()", 21, (uint64_t)"We cannot have an object anchor that is not anchored.", 53, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  return a1;
}

void sub_20EE671C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(_BYTE *)(v1 + 360) && *(char *)(v1 + 359) < 0)
    operator delete(*(void **)(v1 + 336));
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20EE671F8(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = result;
  v5 = *result;
  v4 = result[1];
  v6 = a2[1];
  if (v4 != *result)
  {
    v7 = 0;
    do
    {
      v12 = v6 + v7;
      v13 = v4 + v7;
      result = (uint64_t *)sub_20EAC7338(v6 + v7 - 440, v4 + v7 - 440);
      *(_QWORD *)(v12 - 200) = 0;
      *(_QWORD *)(v12 - 192) = 0;
      *(_QWORD *)(v12 - 184) = 0;
      *(_OWORD *)(v12 - 200) = *(_OWORD *)(v4 + v7 - 200);
      *(_QWORD *)(v12 - 184) = *(_QWORD *)(v4 + v7 - 184);
      *(_QWORD *)(v13 - 200) = 0;
      *(_QWORD *)(v13 - 192) = 0;
      *(_QWORD *)(v13 - 184) = 0;
      *(_QWORD *)(v12 - 176) = 0;
      *(_QWORD *)(v12 - 168) = 0;
      *(_QWORD *)(v12 - 160) = 0;
      *(_OWORD *)(v12 - 176) = *(_OWORD *)(v4 + v7 - 176);
      *(_QWORD *)(v12 - 160) = *(_QWORD *)(v4 + v7 - 160);
      *(_QWORD *)(v13 - 176) = 0;
      *(_QWORD *)(v13 - 168) = 0;
      *(_QWORD *)(v13 - 160) = 0;
      v14 = *(_OWORD *)(v4 + v7 - 152);
      v15 = *(_OWORD *)(v4 + v7 - 136);
      *(_OWORD *)(v12 - 120) = *(_OWORD *)(v4 + v7 - 120);
      *(_OWORD *)(v12 - 136) = v15;
      *(_OWORD *)(v12 - 152) = v14;
      *(_QWORD *)(v12 - 96) = 0;
      *(_QWORD *)(v12 - 88) = 0;
      *(_QWORD *)(v12 - 104) = 0;
      *(_OWORD *)(v12 - 104) = *(_OWORD *)(v4 + v7 - 104);
      *(_QWORD *)(v12 - 88) = *(_QWORD *)(v4 + v7 - 88);
      *(_QWORD *)(v13 - 104) = 0;
      *(_QWORD *)(v13 - 96) = 0;
      *(_QWORD *)(v13 - 88) = 0;
      *(_QWORD *)(v12 - 80) = *(_QWORD *)(v4 + v7 - 80);
      v16 = (uint64_t *)(v4 + v7 - 72);
      v17 = *v16;
      *(_QWORD *)(v12 - 72) = *v16;
      v18 = v6 + v7 - 72;
      v19 = *(_QWORD *)(v4 + v7 - 64);
      *(_QWORD *)(v12 - 64) = v19;
      if (v19)
      {
        *(_QWORD *)(v17 + 16) = v18;
        *(_QWORD *)(v13 - 80) = v16;
        *v16 = 0;
        *(_QWORD *)(v13 - 64) = 0;
      }
      else
      {
        *(_QWORD *)(v12 - 80) = v18;
      }
      v8 = v6 + v7;
      v9 = *(_OWORD *)(v4 + v7 - 56);
      v10 = *(_OWORD *)(v4 + v7 - 40);
      v11 = *(_OWORD *)(v4 + v7 - 24);
      *(_DWORD *)(v8 - 8) = *(_DWORD *)(v4 + v7 - 8);
      *(_OWORD *)(v8 - 24) = v11;
      *(_OWORD *)(v8 - 40) = v10;
      *(_OWORD *)(v8 - 56) = v9;
      v7 -= 448;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  v20 = *v3;
  *v3 = v6;
  a2[1] = v20;
  v21 = v3[1];
  v3[1] = a2[2];
  a2[2] = v21;
  v22 = v3[2];
  v3[2] = a2[3];
  a2[3] = v22;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20EE67380(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

char *sub_20EE6740C(char **a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;
  char *v18;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  char *v23;
  char *v24;

  v3 = (a1[1] - *a1) >> 4;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60)
    sub_20E867F44();
  v6 = a1[2] - *a1;
  if (v6 >> 3 > v4)
    v4 = v6 >> 3;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0)
    v7 = 0xFFFFFFFFFFFFFFFLL;
  else
    v7 = v4;
  if (v7)
  {
    if (v7 >> 60)
      sub_20E877A38();
    v8 = (char *)operator new(16 * v7);
  }
  else
  {
    v8 = 0;
  }
  v9 = &v8[16 * v3];
  v10 = &v8[16 * v7];
  v11 = *a2;
  *(_QWORD *)v9 = *a2;
  if (v11)
  {
    v12 = (_QWORD *)operator new();
    v13 = *a2;
    *v12 = &off_24C9EE890;
    v12[1] = 0;
    v12[2] = 0;
    v12[3] = v13;
  }
  else
  {
    v12 = 0;
  }
  *((_QWORD *)v9 + 1) = v12;
  *a2 = 0;
  v14 = v9 + 16;
  v23 = v9 + 16;
  v16 = *a1;
  v15 = a1[1];
  if (v15 == *a1)
  {
    v18 = a1[1];
  }
  else
  {
    do
    {
      v17 = *((_OWORD *)v15 - 1);
      v15 -= 16;
      *((_OWORD *)v9 - 1) = v17;
      v9 -= 16;
      *(_QWORD *)v15 = 0;
      *((_QWORD *)v15 + 1) = 0;
    }
    while (v15 != v16);
    v18 = *a1;
    v15 = a1[1];
    v14 = v23;
  }
  *a1 = v9;
  a1[1] = v14;
  a1[2] = v10;
  if (v15 == v18)
  {
    if (v15)
LABEL_20:
      operator delete(v15);
  }
  else
  {
    do
    {
      v24 = v15 - 16;
      v20 = (std::__shared_weak_count *)*((_QWORD *)v15 - 1);
      if (v20)
      {
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v15 = v24;
    }
    while (v24 != v18);
    v15 = v18;
    if (v18)
      goto LABEL_20;
  }
  return v14;
}

void sub_20EE675C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20EE67380((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EE675DC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE67600(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    sub_20E9545B0(result);
    JUMPOUT(0x212BC6398);
  }
  return result;
}

uint64_t sub_20EE67634(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3vio13mapping_types7MapDataEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3vio13mapping_types7MapDataEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3vio13mapping_types7MapDataEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3vio13mapping_types7MapDataEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EE676A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  void **p_dst;
  unint64_t v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  size_t v22;
  char *v23;
  void **v24;
  uint64_t v25;
  void *v26;
  void **__dst;
  size_t v29;
  int64_t v30;
  _QWORD v31[2];
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const void *v36;
  uint64_t v37;
  const void *v38;
  unint64_t v39;
  __int128 __p;
  __int128 v41;
  int v42;
  uint64_t v43[20];

  v6 = MEMORY[0x24BEDB870];
  v7 = MEMORY[0x24BEDB870] + 64;
  v8 = (uint64_t *)MEMORY[0x24BEDB800];
  v9 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  v10 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v43[0] = MEMORY[0x24BEDB870] + 64;
  v34 = v9;
  *(uint64_t *)((char *)&v34 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = (std::ios_base *)((char *)&v34 + *(_QWORD *)(v34 - 24));
  std::ios_base::init(v11, &v35);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v34 = v6 + 24;
  v43[0] = v7;
  std::streambuf::basic_streambuf();
  v12 = MEMORY[0x24BEDB848];
  v35 = MEMORY[0x24BEDB848] + 16;
  __p = 0u;
  v41 = 0u;
  v42 = 16;
  v31[1] = 1;
  v13 = operator new();
  *(_QWORD *)v13 = &v34;
  *(_QWORD *)(v13 + 8) = &v34;
  *(_BYTE *)(v13 + 16) = 0;
  *(_BYTE *)(v13 + 40) = 0;
  *(_BYTE *)(v13 + 48) = 0;
  *(_BYTE *)(v13 + 72) = 0;
  *(_QWORD *)(v13 + 88) = 0;
  *(_QWORD *)(v13 + 96) = 0;
  *(_QWORD *)(v13 + 80) = 0;
  v31[0] = &off_24C9B4468;
  v32 = &unk_24C9B45B8;
  v33 = v13;
  v14 = *(unsigned __int8 *)(a2 + 23);
  if ((v14 & 0x80u) != 0)
    v14 = *(_QWORD *)(a2 + 8);
  if (v14)
    sub_20E9F5254((uint64_t)&__dst, v13 + 8, a2);
  sub_20EE67AB4((uint64_t)&__dst, (uint64_t)v31, a1);
  if ((v42 & 0x10) != 0)
  {
    v17 = *((_QWORD *)&v41 + 1);
    if (*((_QWORD *)&v41 + 1) < v39)
    {
      *((_QWORD *)&v41 + 1) = v39;
      v17 = v39;
    }
    v18 = v38;
    v15 = v17 - (_QWORD)v38;
    if (v17 - (unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_41;
  }
  else
  {
    if ((v42 & 8) == 0)
    {
      v15 = 0;
      HIBYTE(v30) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_18;
    }
    v18 = v36;
    v15 = v37 - (_QWORD)v36;
    if ((unint64_t)(v37 - (_QWORD)v36) >= 0x7FFFFFFFFFFFFFF8)
LABEL_41:
      sub_20E860B7C();
  }
  if (v15 >= 0x17)
  {
    v19 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v19 = v15 | 7;
    v20 = v19 + 1;
    p_dst = (void **)operator new(v19 + 1);
    v29 = v15;
    v30 = v20 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_17;
  }
  HIBYTE(v30) = v15;
  p_dst = (void **)&__dst;
  if (v15)
LABEL_17:
    memmove(p_dst, v18, v15);
LABEL_18:
  *((_BYTE *)p_dst + v15) = 0;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v21 = SHIBYTE(v30);
  if (v30 >= 0)
    v22 = HIBYTE(v30);
  else
    v22 = v29;
  if (v22)
  {
    if ((v22 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v23 = (char *)operator new(v22);
    bzero(v23, v22);
    *a3 = v23;
    a3[1] = &v23[v22];
    a3[2] = &v23[v22];
    if (v21 >= 0)
      v24 = (void **)&__dst;
    else
      v24 = __dst;
    memmove(v23, v24, v22);
  }
  if (v21 < 0)
    operator delete(__dst);
  v31[0] = &off_24C9B7040;
  v25 = v33;
  v32 = &unk_24C9B7190;
  v33 = 0;
  if (v25)
  {
    v26 = *(void **)(v25 + 80);
    if (v26)
    {
      *(_QWORD *)(v25 + 88) = v26;
      operator delete(v26);
    }
    if (*(_BYTE *)(v25 + 72))
      free(*(void **)(v25 + 56));
    if (*(_BYTE *)(v25 + 40))
      free(*(void **)(v25 + 24));
    MEMORY[0x212BC6398](v25, 0x1030C408C1A3048);
  }
  v34 = *v8;
  *(uint64_t *)((char *)&v34 + *(_QWORD *)(v34 - 24)) = v8[3];
  v35 = v12 + 16;
  if (SBYTE7(v41) < 0)
    operator delete((void *)__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x212BC6290](v43);
}

void sub_20EE67A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20E9977BC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EE67A28(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x212BC6290](v1);
  _Unwind_Resume(a1);
}

void sub_20EE67AB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11[57];

  v11[56] = *(uint64_t **)MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(v5 + 40))
  {
    v11[0] = (uint64_t *)(v5 + 16);
    sub_20E9F3D4C(v11, 8u);
  }
  else
  {
    sub_20E9F3FC0((uint64_t)v11, v5 + 8);
  }
  sub_20E9EE95C(*(_QWORD *)(a2 + 24));
  sub_20E994B14((uint64_t)v11, a3);
  sub_20EAD500C(a2, v11);
  sub_20E94FADC((uint64_t)v11);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 88) - 8);
  sub_20E9EE4D0((uint64_t *)(v6 + 48), *(_QWORD *)(v6 + 16) - v7 - 9);
  v8 = *(_QWORD *)(v6 + 48);
  if (v8)
    memmove((void *)(*(_QWORD *)(v6 + 24) + v7), *(const void **)(v6 + 56), v8);
  *(_QWORD *)(v6 + 48) = 0;
  v9 = *(_QWORD *)(v6 + 80);
  v10 = *(_QWORD *)(v6 + 88) - 8;
  *(_QWORD *)(v6 + 88) = v10;
  if (v9 == v10)
  {
    std::ostream::write();
    if (*(_BYTE *)(v6 + 40))
    {
      free(*(void **)(v6 + 24));
      *(_BYTE *)(v6 + 40) = 0;
    }
  }
}

void sub_20EE67BE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E94FADC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE67BFC(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _OWORD *v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v29;
  char *v30;

  v3 = 0xAF8AF8AF8AF8AF8BLL * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xEA0EA0EA0EA0EALL)
    sub_20E867F44();
  if (0x5F15F15F15F15F16 * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x5F15F15F15F15F16 * ((a1[2] - *a1) >> 3);
  if (0xAF8AF8AF8AF8AF8BLL * ((a1[2] - *a1) >> 3) >= 0x75075075075075)
    v6 = 0xEA0EA0EA0EA0EALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xEA0EA0EA0EA0EALL)
      sub_20E877A38();
    v7 = (char *)operator new(280 * v6);
  }
  else
  {
    v7 = 0;
  }
  v29 = (uint64_t)&v7[280 * v3];
  v30 = &v7[280 * v6];
  sub_20EE67EC0(v29, (__int128 *)a2);
  v8 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(v29 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(v29 + 224) = v8;
  v9 = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(v29 + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(v29 + 256) = v9;
  v10 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(v29 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(v29 + 160) = v10;
  v11 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(v29 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(v29 + 192) = v11;
  *(_BYTE *)(v29 + 272) = *(_BYTE *)(a2 + 272);
  v12 = v29 + 280;
  v13 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == (char *)*a1)
  {
    *a1 = v29;
    a1[1] = v12;
    a1[2] = (uint64_t)v30;
    if (!v14)
      return v29 + 280;
    goto LABEL_19;
  }
  v15 = 0;
  do
  {
    v22 = v29 + v15;
    v23 = (_OWORD *)(v29 + v15 - 280);
    v24 = &v14[v15];
    v25 = *(_OWORD *)&v14[v15 - 280];
    v26 = *(_OWORD *)&v14[v15 - 264];
    *(_BYTE *)(v22 - 248) = v14[v15 - 248];
    *v23 = v25;
    v23[1] = v26;
    *(_QWORD *)(v22 - 232) = 0;
    *(_QWORD *)(v22 - 224) = 0;
    *(_QWORD *)(v22 - 240) = 0;
    *(_OWORD *)(v22 - 240) = *(_OWORD *)&v14[v15 - 240];
    *(_QWORD *)(v22 - 224) = *(_QWORD *)&v14[v15 - 224];
    *((_QWORD *)v24 - 30) = 0;
    *((_QWORD *)v24 - 29) = 0;
    *((_QWORD *)v24 - 28) = 0;
    *(_QWORD *)(v22 - 216) = 0;
    *(_QWORD *)(v22 - 208) = 0;
    *(_QWORD *)(v22 - 200) = 0;
    *(_OWORD *)(v22 - 216) = *(_OWORD *)&v14[v15 - 216];
    *(_QWORD *)(v22 - 200) = *(_QWORD *)&v14[v15 - 200];
    *((_QWORD *)v24 - 27) = 0;
    *((_QWORD *)v24 - 26) = 0;
    *((_QWORD *)v24 - 25) = 0;
    *(_QWORD *)(v22 - 192) = 0;
    *(_QWORD *)(v22 - 184) = 0;
    *(_QWORD *)(v22 - 176) = 0;
    *(_OWORD *)(v22 - 192) = *(_OWORD *)&v14[v15 - 192];
    *(_QWORD *)(v22 - 176) = *(_QWORD *)&v14[v15 - 176];
    *((_QWORD *)v24 - 24) = 0;
    *((_QWORD *)v24 - 23) = 0;
    *((_QWORD *)v24 - 22) = 0;
    *(_BYTE *)(v29 + v15 - 168) = 0;
    *(_BYTE *)(v22 - 144) = 0;
    if (v14[v15 - 144])
    {
      *(_QWORD *)(v29 + v15 - 168) = 0;
      *(_QWORD *)(v29 + v15 - 160) = 0;
      *(_QWORD *)(v29 + v15 - 152) = 0;
      *(_OWORD *)(v22 - 168) = *(_OWORD *)(v24 - 168);
      *(_QWORD *)(v22 - 152) = *((_QWORD *)v24 - 19);
      *((_QWORD *)v24 - 21) = 0;
      *((_QWORD *)v24 - 20) = 0;
      *((_QWORD *)v24 - 19) = 0;
      *(_BYTE *)(v22 - 144) = 1;
    }
    v16 = *(_OWORD *)(v24 - 136);
    v17 = *(_OWORD *)(v24 - 120);
    v18 = *(_OWORD *)(v24 - 104);
    *(_OWORD *)(v22 - 88) = *(_OWORD *)(v24 - 88);
    *(_OWORD *)(v22 - 104) = v18;
    *(_OWORD *)(v22 - 120) = v17;
    *(_OWORD *)(v22 - 136) = v16;
    v19 = *(_OWORD *)(v24 - 72);
    v20 = *(_OWORD *)(v24 - 56);
    v21 = *(_OWORD *)(v24 - 40);
    *(_OWORD *)(v22 - 24) = *(_OWORD *)(v24 - 24);
    *(_OWORD *)(v22 - 40) = v21;
    *(_OWORD *)(v22 - 56) = v20;
    *(_OWORD *)(v22 - 72) = v19;
    *(_BYTE *)(v22 - 8) = *(v24 - 8);
    v15 -= 280;
  }
  while (&v14[v15] != v13);
  v14 = (char *)*a1;
  v27 = a1[1];
  *a1 = v29 + v15;
  a1[1] = v12;
  for (a1[2] = (uint64_t)v30; (char *)v27 != v14; v27 = sub_20E991850(v27 - 280))
    ;
  if (v14)
LABEL_19:
    operator delete(v14);
  return v29 + 280;
}

void sub_20EE67EAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20EE6838C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE67EC0(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  char *v9;
  size_t v10;
  _BYTE *v11;
  _BYTE *v12;
  int64_t v13;
  char *v14;
  char *v15;

  v4 = *a2;
  v5 = a2[1];
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v7 = (_BYTE *)*((_QWORD *)a2 + 5);
  v6 = (_BYTE *)*((_QWORD *)a2 + 6);
  v8 = v6 - v7;
  if (v6 != v7)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v8 >> 2) >= 0x1555555555555556)
      sub_20E867F44();
    v9 = (char *)operator new(v8);
    *(_QWORD *)(a1 + 40) = v9;
    *(_QWORD *)(a1 + 48) = v9;
    *(_QWORD *)(a1 + 56) = &v9[4 * (v8 >> 2)];
    v10 = 12 * ((v8 - 12) / 0xCuLL) + 12;
    memcpy(v9, v7, v10);
    *(_QWORD *)(a1 + 48) = &v9[v10];
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  v12 = (_BYTE *)*((_QWORD *)a2 + 8);
  v11 = (_BYTE *)*((_QWORD *)a2 + 9);
  v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0)
      sub_20EABADD4();
    v14 = (char *)operator new(v11 - v12);
    *(_QWORD *)(a1 + 64) = v14;
    *(_QWORD *)(a1 + 72) = v14;
    v15 = &v14[4 * (v13 >> 2)];
    *(_QWORD *)(a1 + 80) = v15;
    memcpy(v14, v12, v13);
    *(_QWORD *)(a1 + 72) = v15;
  }
  sub_20EE680C8((_QWORD *)(a1 + 88), (__int128 **)a2 + 11);
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  if (*((_BYTE *)a2 + 136))
  {
    sub_20EE680C8((_QWORD *)(a1 + 112), (__int128 **)a2 + 14);
    *(_BYTE *)(a1 + 136) = 1;
  }
  return a1;
}

void sub_20EE68028(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void **v7;
  void **v8;
  void *v9;
  void *v10;
  void *v11;

  if (*(_BYTE *)(v1 + 136))
  {
    v7 = (void **)*v5;
    if (*v5)
    {
      v8 = *(void ***)(v1 + 120);
      v9 = *v5;
      if (v8 != v7)
      {
        do
        {
          if (*((_BYTE *)v8 - 8) && *((char *)v8 - 9) < 0)
            operator delete(*(v8 - 4));
          v8 -= 24;
        }
        while (v8 != v7);
        v9 = *v5;
      }
      *(_QWORD *)(v1 + 120) = v7;
      operator delete(v9);
    }
  }
  sub_20EE60EA4(v4);
  v10 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 72) = v10;
    operator delete(v10);
  }
  v11 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 48) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_20EE680C8(_QWORD *a1, __int128 **a2)
{
  uint64_t v3;
  __int128 *v4;
  __int128 *v5;
  int64_t v6;
  unint64_t v7;
  char *v8;

  a1[2] = 0;
  v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = (char *)v5 - (char *)*a2;
  if (v5 != *a2)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 6);
    if (v7 >= 0x155555555555556)
      sub_20E867F44();
    v8 = (char *)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[192 * v7];
    a1[1] = sub_20EE681D8(v3, v4, v5, (uint64_t)v8);
  }
  return a1;
}

void sub_20EE68170(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v2;
  void **v4;
  void **v5;
  void *v6;

  v1[1] = v2;
  v4 = (void **)*v1;
  if (*v1)
  {
    v5 = (void **)v1[1];
    v6 = *v1;
    if (v5 != v4)
    {
      do
      {
        if (*((_BYTE *)v5 - 8))
        {
          if (*((char *)v5 - 9) < 0)
            operator delete(*(v5 - 4));
        }
        v5 -= 24;
      }
      while (v5 != v4);
      v6 = *v1;
    }
    v1[1] = v4;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EE681D8(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  __int128 *v6;
  __int128 v7;
  uint64_t v8;
  __int128 *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v18;

  v4 = a4;
  v18 = a4;
  if (a2 != a3)
  {
    v6 = a2 + 10;
    do
    {
      v10 = *(v6 - 9);
      *(_OWORD *)v4 = *(v6 - 10);
      *(_OWORD *)(v4 + 16) = v10;
      v11 = *(v6 - 8);
      *(_QWORD *)(v4 + 48) = *((_QWORD *)v6 - 14);
      *(_OWORD *)(v4 + 32) = v11;
      *(_QWORD *)(v4 + 56) = *((_QWORD *)v6 - 13);
      v12 = *(v6 - 6);
      *(_QWORD *)(v4 + 80) = *((_QWORD *)v6 - 10);
      *(_OWORD *)(v4 + 64) = v12;
      v13 = *(__int128 *)((char *)v6 - 72);
      *(_QWORD *)(v4 + 104) = *((_QWORD *)v6 - 7);
      *(_OWORD *)(v4 + 88) = v13;
      v14 = *(v6 - 3);
      v15 = *(v6 - 2);
      v16 = *(__int128 *)((char *)v6 - 23);
      *(_BYTE *)(v4 + 160) = 0;
      *(_OWORD *)(v4 + 137) = v16;
      *(_OWORD *)(v4 + 112) = v14;
      *(_OWORD *)(v4 + 128) = v15;
      *(_BYTE *)(v4 + 184) = 0;
      if (*((_BYTE *)v6 + 24))
      {
        if (*((char *)v6 + 23) < 0)
        {
          sub_20E860C04((_BYTE *)(v4 + 160), *(void **)v6, *((_QWORD *)v6 + 1));
          v8 = v18;
        }
        else
        {
          v7 = *v6;
          *(_QWORD *)(v4 + 176) = *((_QWORD *)v6 + 2);
          *(_OWORD *)(v4 + 160) = v7;
          v8 = v4;
        }
        *(_BYTE *)(v4 + 184) = 1;
        v4 = v8;
      }
      v9 = v6 - 10;
      v4 += 192;
      v18 = v4;
      v6 += 12;
    }
    while (v9 + 12 != a3);
  }
  return v4;
}

void sub_20EE682F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void **v10;

  if (*(_BYTE *)(v9 + 184))
  {
    if (*(char *)(v9 + 183) < 0)
      operator delete(*v10);
  }
  sub_20EE68324((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE68324(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(_BYTE *)(v3 - 8) && *(char *)(v3 - 9) < 0)
        operator delete(*(void **)(v3 - 32));
      v3 -= 192;
    }
  }
  return a1;
}

uint64_t sub_20EE6838C(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 280;
    sub_20E991850(i - 280);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20EE683DC(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 12;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 25;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20EE684A0(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  char **v6;
  unint64_t v7;
  char **v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v3 = *(void ***)(a1 + 8);
    *(_QWORD *)(a1 + 40) = 0;
    v9 = 0;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = &v2[v4 / 0x1E];
    v6 = (char **)((char *)*v5 + 136 * (v4 % 0x1E));
    v7 = (unint64_t)v2[(*(_QWORD *)(a1 + 40) + v4) / 0x1E] + 136 * ((*(_QWORD *)(a1 + 40) + v4) % 0x1E);
    if (v6 != (char **)v7)
    {
      do
      {
        v6 = sub_20EE630A8(v6) + 17;
        if ((char *)v6 - (_BYTE *)*v5 == 4080)
        {
          v8 = (char **)v5[1];
          ++v5;
          v6 = v8;
        }
      }
      while (v6 != (char **)v7);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
    *(_QWORD *)(a1 + 40) = 0;
    v9 = (char *)v3 - (char *)v2;
    if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
    {
      do
      {
        operator delete(*v2);
        v3 = *(void ***)(a1 + 16);
        v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
        *(_QWORD *)(a1 + 8) = v2;
        v9 = (char *)v3 - (char *)v2;
      }
      while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
    }
  }
  v10 = v9 >> 3;
  if (v10 == 1)
  {
    v11 = 15;
    goto LABEL_15;
  }
  if (v10 == 2)
  {
    v11 = 30;
LABEL_15:
    *(_QWORD *)(a1 + 32) = v11;
  }
  if (v2 != v3)
  {
    do
    {
      v12 = *v2++;
      operator delete(v12);
    }
    while (v2 != v3);
    v14 = *(_QWORD *)(a1 + 8);
    v13 = *(_QWORD *)(a1 + 16);
    if (v13 != v14)
      *(_QWORD *)(a1 + 16) = v13 + ((v14 - v13 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20EE68614(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v3 = *(void ***)(a1 + 8);
    *(_QWORD *)(a1 + 40) = 0;
    v12 = 0;
    goto LABEL_16;
  }
  v4 = *(_QWORD *)(a1 + 32);
  v5 = &v2[v4 >> 8];
  v6 = (uint64_t)*v5 + 16 * v4;
  v7 = *(uint64_t *)((char *)v2 + (((*(_QWORD *)(a1 + 40) + v4) >> 5) & 0x7FFFFFFFFFFFFF8))
     + 16 * (*(_BYTE *)(a1 + 40) + v4);
  if (v6 == v7)
    goto LABEL_14;
  do
  {
    v8 = *(std::__shared_weak_count **)(v6 + 8);
    if (!v8)
      goto LABEL_9;
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (v10)
    {
LABEL_9:
      v6 += 16;
      if (v6 - (_QWORD)*v5 != 4096)
        continue;
LABEL_10:
      v11 = (uint64_t)v5[1];
      ++v5;
      v6 = v11;
      continue;
    }
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v6 += 16;
    if (v6 - (_QWORD)*v5 == 4096)
      goto LABEL_10;
  }
  while (v6 != v7);
  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
LABEL_14:
  *(_QWORD *)(a1 + 40) = 0;
  v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v12 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
LABEL_16:
  v13 = v12 >> 3;
  if (v13 == 1)
  {
    v14 = 128;
LABEL_21:
    *(_QWORD *)(a1 + 32) = v14;
  }
  else if (v13 == 2)
  {
    v14 = 256;
    goto LABEL_21;
  }
  if (v2 != v3)
  {
    do
    {
      v15 = *v2++;
      operator delete(v15);
    }
    while (v2 != v3);
    v17 = *(_QWORD *)(a1 + 8);
    v16 = *(_QWORD *)(a1 + 16);
    if (v16 != v17)
      *(_QWORD *)(a1 + 16) = v16 + ((v17 - v16 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

double sub_20EE687C0()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  char *v9;
  double result;
  _BYTE v11[2512];
  __int128 v12;
  _BYTE __dst[2496];
  _BYTE v14[2496];

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v3 = 0;
  v4 = *(_QWORD *)(v0 + 2496);
  do
  {
    v5 = 4 * v4;
    v6 = v4 + 397;
    v4 = (v4 + 1) % 0x270;
    v7 = *(_DWORD *)(v0 + 4 * (v6 % 0x270)) ^ ((*(_DWORD *)(v0 + 4 * v4) & 0x7FFFFFFE | *(_DWORD *)(v0 + v5) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(v0 + 4 * v4) << 31) >> 31) & 0x9908B0DF;
    *(_DWORD *)(v0 + v5) = v7;
    v8 = ((v7 ^ (v7 >> 11)) << 7) & 0x9D2C5680 ^ v7 ^ (v7 >> 11);
    *(_DWORD *)&v14[v3] = (v8 << 15) & 0xEFC60000 ^ v8 ^ (((v8 << 15) & 0xEFC60000 ^ v8) >> 18);
    v3 += 4;
  }
  while (v3 != 2496);
  *(_QWORD *)(v0 + 2496) = v4;
  memcpy(__dst, v14, sizeof(__dst));
  sub_20E89CF9C(__dst, (uint64_t)v11);
  v9 = (char *)operator new(0x9F8uLL);
  *((_QWORD *)v9 + 1) = 0;
  *((_QWORD *)v9 + 2) = 0;
  *(_QWORD *)v9 = &off_24C9ACF28;
  memcpy(v9 + 24, v11, 0x9C8uLL);
  *((_QWORD *)v9 + 316) = &off_24CA1F4F8;
  result = *(double *)&v12;
  *(_OWORD *)(v9 + 2536) = v12;
  *v2 = v9 + 24;
  v2[1] = v9;
  return result;
}

void sub_20EE6892C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_210231620(v1 + 2504);
  _Unwind_Resume(a1);
}

void sub_20EE68944()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EE68958()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C9EDE10;
  return result;
}

void sub_20EE6897C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C9EDE10;
}

uint64_t sub_20EE68998(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3vio11slam_engine15LocalSlamEngine27update_complexity_callback_MUlvE_E")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3vio11slam_engine15LocalSlamEngine27update_complexity_callback_MUlvE_E" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3vio11slam_engine15LocalSlamEngine27update_complexity_callback_MUlvE_E"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3vio11slam_engine15LocalSlamEngine27update_complexity_callback_MUlvE_E" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EE68A04()
{
  return &unk_24C9EDE70;
}

void sub_20EE68A10(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;

  v5 = *(_QWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (a2 <= (v4 - (uint64_t)v5) >> 4)
  {
    if (a2)
    {
      v12 = 16 * a2;
      bzero(*(void **)(a1 + 8), 16 * a2);
      v5 = (_QWORD *)((char *)v5 + v12);
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(_QWORD **)a1;
    v7 = ((uint64_t)v5 - *(_QWORD *)a1) >> 4;
    v8 = v7 + a2;
    if ((v7 + a2) >> 60)
      sub_20E867F44();
    v9 = v4 - (_QWORD)v6;
    if (v9 >> 3 > v8)
      v8 = v9 >> 3;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v10 = 0xFFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 60)
        sub_20E877A38();
      v11 = (char *)operator new(16 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[16 * v7];
    v14 = 16 * a2;
    v15 = &v11[16 * v10];
    bzero(v13, v14);
    v16 = &v13[v14];
    if (v5 == v6)
    {
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v15;
    }
    else
    {
      do
      {
        v17 = *((_OWORD *)v5 - 1);
        v5 -= 2;
        *((_OWORD *)v13 - 1) = v17;
        v13 -= 16;
        *v5 = 0;
        v5[1] = 0;
      }
      while (v5 != v6);
      v5 = *(_QWORD **)a1;
      v18 = *(_QWORD **)(a1 + 8);
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v15;
      while (v18 != v5)
      {
        v19 = (std::__shared_weak_count *)*(v18 - 1);
        if (v19)
        {
          p_shared_owners = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldaxr(p_shared_owners);
          while (__stlxr(v21 - 1, p_shared_owners));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        v18 -= 2;
      }
    }
    if (v5)
      operator delete(v5);
  }
}

void sub_20EE68B88()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EE68B9C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9EDE90;
  result[1] = v3;
  return result;
}

uint64_t sub_20EE68BD0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9EDE90;
  a2[1] = v2;
  return result;
}

uint64_t sub_20EE68BEC(uint64_t result, _BYTE *a2)
{
  uint64_t v2;

  if (!*a2)
  {
    v2 = *(_QWORD *)(*(_QWORD *)(result + 8) + 11560);
    if (!v2)
      sub_20E86D37C();
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  }
  return result;
}

uint64_t sub_20EE68C24(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio11slam_engine15LocalSlamEngineC1ERKNS0_11calibration14HardwareParamsERKNS1_15MapEngineCo"
                     "nfigENSt3__110shared_ptrINS0_9analytics16CASessionContextEEENS_3esn11OptionalRefINS0_10mapping_io21"
                     "LoadMapDatabaseReturnEEEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio11slam_engine15LocalSlamEngineC1ERKNS0_11calibration14HardwareParamsERKNS1_15"
                                "MapEngineConfigENSt3__110shared_ptrINS0_9analytics16CASessionContextEEENS_3esn11Optional"
                                "RefINS0_10mapping_io21LoadMapDatabaseReturnEEEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio11slam_engine15LocalSlamEngineC1ERKNS0_11calibration14HardwareParamsERKNS1_15MapEngineConfigENSt3__110shared_ptrINS0_9analytics16CASessionContextEEENS_3esn11OptionalRefINS0_10mapping_io21LoadMapDatabaseReturnEEEE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio11slam_engine15LocalSlamEngineC1ERKNS0_11calibration14HardwareParamsERKNS1_15MapEngineConfigENSt3__110shared_ptrINS0_9analytics16CASessionContextEEENS_3esn11OptionalRefINS0_10mapping_io21LoadMapDatabaseReturnEEEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EE68C90()
{
  return &unk_24C9EDF00;
}

void sub_20EE68CA0()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EE68CB4()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C9EDF20;
  return result;
}

void sub_20EE68CD8(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C9EDF20;
}

void sub_20EE68CF0(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (*a3 == *a2
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/SlamEngine/src/LocalSlamEngine.cpp", 207, (uint64_t)"curr_state != prev_state", 24, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/SlamEngine/src/LocalSlamEngine.cpp", 216, (uint64_t)"", 0, (uint64_t)"Adaptive VIO is not supported in asynchronous mapping/front-end", 63, (void (*)(void **))sub_21023DDB0);
  abort();
}

uint64_t sub_20EE68D74(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio11slam_engine15LocalSlamEngineC1ERKNS0_11calibration14HardwareParamsERKNS1_15MapEngineCo"
                     "nfigENSt3__110shared_ptrINS0_9analytics16CASessionContextEEENS_3esn11OptionalRefINS0_10mapping_io21"
                     "LoadMapDatabaseReturnEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio11slam_engine15LocalSlamEngineC1ERKNS0_11calibration14HardwareParamsERKNS1_15"
                                "MapEngineConfigENSt3__110shared_ptrINS0_9analytics16CASessionContextEEENS_3esn11Optional"
                                "RefINS0_10mapping_io21LoadMapDatabaseReturnEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio11slam_engine15LocalSlamEngineC1ERKNS0_11calibration14HardwareParamsERKNS1_15MapEngineConfigENSt3__110shared_ptrINS0_9analytics16CASessionContextEEENS_3esn11OptionalRefINS0_10mapping_io21LoadMapDatabaseReturnEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio11slam_engine15LocalSlamEngineC1ERKNS0_11calibration14HardwareParamsERKNS1_15MapEngineConfigENSt3__110shared_ptrINS0_9analytics16CASessionContextEEENS_3esn11OptionalRefINS0_10mapping_io21LoadMapDatabaseReturnEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EE68DE0()
{
  return &unk_24C9EDF90;
}

void sub_20EE68DEC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9EDFB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EE68DFC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9EDFB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EE68E2C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (result)
    return (*(uint64_t (**)(void))(a1 + 32))();
  return result;
}

void sub_20EE68E60()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EE68E74(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9EE000;
  result[1] = v3;
  return result;
}

uint64_t sub_20EE68EA8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9EE000;
  a2[1] = v2;
  return result;
}

BOOL sub_20EE68EC4(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  int8x16_t v7;
  float64x2_t v8;
  uint64_t v19;
  _BOOL8 result;
  _BOOL8 v21;
  float64x2_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  double v26;
  unint64_t v27;
  float64x2_t v28;
  _OWORD v29[7];
  uint64_t v30;
  uint64_t v31;
  std::string __s1;

  v3 = *(_QWORD *)(a1 + 8);
  v4.f64[0] = *(float64_t *)(a3 + 16);
  v24 = *(int64x2_t *)(a3 + 32);
  v25 = *(int64x2_t *)a3;
  v27 = *(_QWORD *)(a3 + 80);
  v26 = *(double *)(a3 + 112);
  v22 = *(float64x2_t *)(a3 + 96);
  v23 = *(int64x2_t *)(a3 + 64);
  v4.f64[1] = *(float64_t *)(a3 + 48);
  v28 = v4;
  sub_20FCCBD74(*a2, &__s1);
  v5 = (float64x2_t)vzip1q_s64(v25, v24);
  v6 = (float64x2_t)vzip2q_s64(v25, v24);
  v7 = vextq_s8((int8x16_t)v6, (int8x16_t)vdupq_laneq_s64(v23, 1), 8uLL);
  v8 = vmlsq_laneq_f64(vmulq_n_f64(v5, vnegq_f64(v22).f64[0]), v6, v22, 1);
  _V7.D[1] = v22.f64[1];
  _D5 = v23.i64[1];
  __asm { FMLS            D3, D5, V7.D[1] }
  _D7 = v26;
  _D16 = v27;
  __asm { FMLS            D3, D16, V7.D[0] }
  *(_QWORD *)&v6.f64[1] = v7.i64[0];
  v19 = *(_QWORD *)(v3 + 11472);
  v29[5] = v27;
  v29[4] = v28;
  v29[3] = v7.u64[1];
  v29[2] = v6;
  v29[1] = v23.u64[0];
  v29[0] = v5;
  v29[6] = vmlsq_lane_f64(v8, v28, v26, 0);
  v30 = _D3;
  v31 = 0x3FF0000000000000;
  result = sub_20F308BEC(v19, (const void **)&__s1.__r_.__value_.__l.__data_, (uint64_t)v29);
  v21 = result;
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__s1.__r_.__value_.__l.__data_);
    return v21;
  }
  return result;
}

void sub_20EE68FF0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 17) < 0)
    operator delete(*(void **)(v1 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EE6900C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio11slam_engine15LocalSlamEngine21ProcessSemanticsQueueEvE3$_2")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio11slam_engine15LocalSlamEngine21ProcessSemanticsQueueEvE3$_2" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio11slam_engine15LocalSlamEngine21ProcessSemanticsQueueEvE3$_2"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio11slam_engine15LocalSlamEngine21ProcessSemanticsQueueEvE3$_2" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EE69078()
{
  return &unk_24C9EE070;
}

void sub_20EE69088()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EE6909C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9EE090;
  result[1] = v3;
  return result;
}

uint64_t sub_20EE690D0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9EE090;
  a2[1] = v2;
  return result;
}

void sub_20EE690EC(uint64_t a1, unint64_t *a2)
{
  uint64_t v2;
  std::string __p;

  v2 = *(_QWORD *)(a1 + 8);
  sub_20FCCBD74(*a2, &__p);
  sub_20F300F0C(*(_QWORD **)(v2 + 11472), (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20EE69148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EE69164(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio11slam_engine15LocalSlamEngine21ProcessSemanticsQueueEvE3$_3")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio11slam_engine15LocalSlamEngine21ProcessSemanticsQueueEvE3$_3" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio11slam_engine15LocalSlamEngine21ProcessSemanticsQueueEvE3$_3"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio11slam_engine15LocalSlamEngine21ProcessSemanticsQueueEvE3$_3" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EE691D0()
{
  return &unk_24C9EE100;
}

void sub_20EE691DC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9EE8E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EE691F0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9EE8E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EE69224(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(a1 + 24);
    if (v3 != v1)
    {
      v5 = v3;
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v1);
      v4 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v1;
    operator delete(v4);
  }
}

void sub_20EE692A4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9EE120;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EE692B4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9EE120;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EE692E4(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 40);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v4)
    operator delete(v4);
}

void sub_20EE69334(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v4 = 0x3FFFFFFFFFFFFFFLL;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  if (0x3FFFFFFFFFFFFFFLL - v6 < v5 - v6 + 1)
    goto LABEL_23;
  v7 = v6 >> 61;
  v8 = 8 * v6;
  if (v7 > 4)
    v9 = -1;
  else
    v9 = v8;
  v10 = v8 / 5;
  if (v7)
    v10 = v9;
  if (v10 < 0x3FFFFFFFFFFFFFFLL)
    v4 = v10;
  v11 = v5 + 1 > v4 ? v5 + 1 : v4;
  if (v11 >> 58)
LABEL_23:
    sub_20E969408((uint64_t)"get_next_capacity, allocator's max size reached");
  v16 = *(char **)a2;
  v17 = (char *)operator new(32 * v11);
  v18 = v17;
  v19 = *(char **)a2;
  v20 = *(_QWORD *)a2 + 32 * *(_QWORD *)(a2 + 8);
  v21 = v17;
  if (*(uint64_t **)a2 != a3)
  {
    v22 = *(char **)a2;
    v21 = v17;
    do
    {
      v23 = *(_QWORD *)v22;
      *((_DWORD *)v21 + 2) = *((_DWORD *)v22 + 2);
      *(_QWORD *)v21 = v23;
      v24 = *((_QWORD *)v22 + 2);
      *((_DWORD *)v21 + 6) = *((_DWORD *)v22 + 6);
      *((_QWORD *)v21 + 2) = v24;
      v21 += 32;
      v22 += 32;
    }
    while (v22 != (char *)a3);
  }
  v25 = *a4;
  *((_DWORD *)v21 + 2) = *((_DWORD *)a4 + 2);
  *(_QWORD *)v21 = v25;
  v26 = a4[2];
  *((_DWORD *)v21 + 6) = *((_DWORD *)a4 + 6);
  *((_QWORD *)v21 + 2) = v26;
  if ((uint64_t *)v20 != a3)
  {
    v27 = v21 + 48;
    v28 = a3;
    do
    {
      v29 = *v28;
      *((_DWORD *)v27 - 2) = *((_DWORD *)v28 + 2);
      *((_QWORD *)v27 - 2) = v29;
      v30 = v28[2];
      *((_DWORD *)v27 + 2) = *((_DWORD *)v28 + 6);
      *(_QWORD *)v27 = v30;
      v27 += 32;
      v28 += 4;
    }
    while (v28 != (uint64_t *)v20);
  }
  if (v19 && a2 + 24 != *(_QWORD *)a2)
    operator delete(*(void **)a2);
  v31 = *(_QWORD *)(a2 + 8) + 1;
  *(_QWORD *)a2 = v18;
  *(_QWORD *)(a2 + 8) = v31;
  *(_QWORD *)(a2 + 16) = v11;
  *a1 = &v18[(char *)a3 - v16];
}

void sub_20EE694CC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9EE170;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EE694DC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9EE170;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EE6950C(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (*((_BYTE *)result + 328))
  {
    v1 = result + 4;
    v2 = (std::__shared_weak_count *)result[39];
    if (!v2)
      return sub_20E86177C(result + 4);
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return sub_20E86177C(v1);
    }
    else
    {
      return sub_20E86177C(result + 4);
    }
  }
  return result;
}

uint64_t sub_20EE6958C(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  __int128 v37;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_OWORD *)(a2 + 112);
  v6 = *(_OWORD *)(a2 + 64);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v4;
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 80) = v5;
  v8 = *(_OWORD *)(a2 + 144);
  v7 = *(_OWORD *)(a2 + 160);
  v9 = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 160) = v7;
  *(_OWORD *)(a1 + 128) = v9;
  v10 = *(_OWORD *)(a2 + 16);
  v11 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v11;
  *(_OWORD *)(a1 + 16) = v10;
  v12 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 184) = v12;
  v13 = *(_OWORD *)(a2 + 216);
  v14 = *(_OWORD *)(a2 + 232);
  v15 = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 248) = v15;
  *(_OWORD *)(a1 + 232) = v14;
  *(_OWORD *)(a1 + 216) = v13;
  v16 = *(_OWORD *)(a2 + 280);
  v17 = *(_OWORD *)(a2 + 296);
  v18 = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 321) = *(_OWORD *)(a2 + 321);
  *(_OWORD *)(a1 + 296) = v17;
  *(_OWORD *)(a1 + 312) = v18;
  *(_OWORD *)(a1 + 280) = v16;
  sub_20EE69894(a1 + 344, (__int128 *)(a2 + 344));
  sub_20EE69A08(a1 + 520, a2 + 520);
  *(_QWORD *)(a1 + 736) = *(_QWORD *)(a2 + 736);
  *(_QWORD *)(a1 + 744) = 0;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_QWORD *)(a1 + 744) = *(_QWORD *)(a2 + 744);
  *(_QWORD *)(a1 + 752) = *(_QWORD *)(a2 + 752);
  *(_QWORD *)(a1 + 760) = *(_QWORD *)(a2 + 760);
  *(_QWORD *)(a2 + 760) = 0;
  *(_OWORD *)(a2 + 744) = 0u;
  memcpy((void *)(a1 + 768), (const void *)(a2 + 768), 0x7C0uLL);
  *(_BYTE *)(a1 + 2752) = 0;
  *(_BYTE *)(a1 + 3648) = 0;
  if (*(_BYTE *)(a2 + 3648))
  {
    v19 = *(_OWORD *)(a2 + 2752);
    v20 = *(_OWORD *)(a2 + 2784);
    *(_OWORD *)(a1 + 2768) = *(_OWORD *)(a2 + 2768);
    *(_OWORD *)(a1 + 2784) = v20;
    *(_OWORD *)(a1 + 2752) = v19;
    v21 = *(_OWORD *)(a2 + 2800);
    v22 = *(_OWORD *)(a2 + 2816);
    v23 = *(_OWORD *)(a2 + 2848);
    *(_OWORD *)(a1 + 2832) = *(_OWORD *)(a2 + 2832);
    *(_OWORD *)(a1 + 2848) = v23;
    *(_OWORD *)(a1 + 2800) = v21;
    *(_OWORD *)(a1 + 2816) = v22;
    v24 = *(_OWORD *)(a2 + 2864);
    v25 = *(_OWORD *)(a2 + 2880);
    v26 = *(_OWORD *)(a2 + 2896);
    *(_QWORD *)(a1 + 2912) = *(_QWORD *)(a2 + 2912);
    *(_OWORD *)(a1 + 2880) = v25;
    *(_OWORD *)(a1 + 2896) = v26;
    *(_OWORD *)(a1 + 2864) = v24;
    memcpy((void *)(a1 + 2920), (const void *)(a2 + 2920), 0x120uLL);
    memcpy((void *)(a1 + 3208), (const void *)(a2 + 3208), 0x120uLL);
    *(_QWORD *)(a1 + 3496) = 0;
    *(_OWORD *)(a1 + 3504) = 0u;
    *(_QWORD *)(a1 + 3496) = *(_QWORD *)(a2 + 3496);
    *(_QWORD *)(a1 + 3504) = *(_QWORD *)(a2 + 3504);
    *(_QWORD *)(a1 + 3512) = *(_QWORD *)(a2 + 3512);
    *(_OWORD *)(a2 + 3496) = 0u;
    *(_QWORD *)(a2 + 3512) = 0;
    v27 = *(_QWORD *)(a2 + 3536);
    *(_OWORD *)(a1 + 3520) = *(_OWORD *)(a2 + 3520);
    *(_QWORD *)(a1 + 3536) = v27;
    v28 = *(_QWORD *)(a2 + 3560);
    *(_OWORD *)(a1 + 3544) = *(_OWORD *)(a2 + 3544);
    *(_QWORD *)(a1 + 3560) = v28;
    *(_OWORD *)(a1 + 3568) = *(_OWORD *)(a2 + 3568);
    *(_OWORD *)(a1 + 3584) = *(_OWORD *)(a2 + 3584);
    *(_BYTE *)(a1 + 3600) = 0;
    *(_BYTE *)(a1 + 3624) = 0;
    if (*(_BYTE *)(a2 + 3624))
    {
      v29 = *(_OWORD *)(a2 + 3600);
      *(_QWORD *)(a1 + 3616) = *(_QWORD *)(a2 + 3616);
      *(_OWORD *)(a1 + 3600) = v29;
      *(_BYTE *)(a1 + 3624) = 1;
    }
    v30 = *(_QWORD *)(a2 + 3632);
    *(_BYTE *)(a1 + 3640) = *(_BYTE *)(a2 + 3640);
    *(_QWORD *)(a1 + 3632) = v30;
    *(_BYTE *)(a1 + 3648) = 1;
  }
  *(_BYTE *)(a1 + 3656) = 0;
  *(_BYTE *)(a1 + 3672) = 0;
  if (*(_BYTE *)(a2 + 3672))
  {
    *(_QWORD *)(a1 + 3656) = *(_QWORD *)(a2 + 3656);
    *(_QWORD *)(a1 + 3664) = *(_QWORD *)(a2 + 3664);
    *(_OWORD *)(a2 + 3656) = 0u;
    *(_BYTE *)(a1 + 3672) = 1;
  }
  v31 = *(_OWORD *)(a2 + 3680);
  *(_DWORD *)(a1 + 3696) = *(_DWORD *)(a2 + 3696);
  *(_OWORD *)(a1 + 3680) = v31;
  v32 = *(_QWORD *)(a2 + 3704);
  *(_QWORD *)(a2 + 3704) = 0;
  *(_QWORD *)(a1 + 3704) = v32;
  *(_QWORD *)(a1 + 3712) = *(_QWORD *)(a2 + 3712);
  *(_QWORD *)(a2 + 3712) = 0;
  v33 = *(_QWORD *)(a2 + 3720);
  *(_QWORD *)(a1 + 3720) = v33;
  v34 = *(_QWORD *)(a2 + 3728);
  *(_QWORD *)(a1 + 3728) = v34;
  *(_DWORD *)(a1 + 3736) = *(_DWORD *)(a2 + 3736);
  if (v34)
  {
    v35 = *(_QWORD *)(v33 + 8);
    v36 = *(_QWORD *)(a1 + 3712);
    if ((v36 & (v36 - 1)) != 0)
    {
      if (v35 >= v36)
        v35 %= v36;
    }
    else
    {
      v35 &= v36 - 1;
    }
    *(_QWORD *)(v32 + 8 * v35) = a1 + 3720;
    *(_QWORD *)(a2 + 3720) = 0;
    *(_QWORD *)(a2 + 3728) = 0;
  }
  v37 = *(_OWORD *)(a2 + 3744);
  *(_OWORD *)(a1 + 3757) = *(_OWORD *)(a2 + 3757);
  *(_OWORD *)(a1 + 3744) = v37;
  return a1;
}

uint64_t sub_20EE69894(uint64_t result, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v2 = *a2;
  v3 = a2[1];
  *(_QWORD *)(result + 32) = *((_QWORD *)a2 + 4);
  *(_OWORD *)result = v2;
  *(_OWORD *)(result + 16) = v3;
  v4 = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = 0;
  *(_QWORD *)(result + 40) = v4;
  *(_QWORD *)(result + 48) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = 0;
  v5 = *((_QWORD *)a2 + 7);
  *(_QWORD *)(result + 56) = v5;
  v6 = *((_QWORD *)a2 + 8);
  *(_QWORD *)(result + 64) = v6;
  *(_DWORD *)(result + 72) = *((_DWORD *)a2 + 18);
  if (v6)
  {
    v7 = *(_QWORD *)(v5 + 8);
    v8 = *(_QWORD *)(result + 48);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v4 + 8 * v7) = result + 56;
    *((_QWORD *)a2 + 7) = 0;
    *((_QWORD *)a2 + 8) = 0;
  }
  *(_BYTE *)(result + 80) = *((_BYTE *)a2 + 80);
  v9 = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = 0;
  *(_QWORD *)(result + 88) = v9;
  *(_QWORD *)(result + 96) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = 0;
  v10 = *((_QWORD *)a2 + 13);
  *(_QWORD *)(result + 104) = v10;
  v11 = *((_QWORD *)a2 + 14);
  *(_QWORD *)(result + 112) = v11;
  *(_DWORD *)(result + 120) = *((_DWORD *)a2 + 30);
  if (v11)
  {
    v12 = *(_QWORD *)(v10 + 8);
    v13 = *(_QWORD *)(result + 96);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13)
        v12 %= v13;
    }
    else
    {
      v12 &= v13 - 1;
    }
    *(_QWORD *)(v9 + 8 * v12) = result + 104;
    *((_QWORD *)a2 + 13) = 0;
    *((_QWORD *)a2 + 14) = 0;
  }
  v14 = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = 0;
  *(_QWORD *)(result + 128) = v14;
  *(_QWORD *)(result + 136) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = 0;
  v15 = *((_QWORD *)a2 + 18);
  *(_QWORD *)(result + 144) = v15;
  v16 = *((_QWORD *)a2 + 19);
  *(_QWORD *)(result + 152) = v16;
  *(_DWORD *)(result + 160) = *((_DWORD *)a2 + 40);
  if (v16)
  {
    v17 = *(_QWORD *)(v15 + 8);
    v18 = *(_QWORD *)(result + 136);
    if ((v18 & (v18 - 1)) != 0)
    {
      if (v17 >= v18)
        v17 %= v18;
    }
    else
    {
      v17 &= v18 - 1;
    }
    *(_QWORD *)(v14 + 8 * v17) = result + 144;
    *((_QWORD *)a2 + 18) = 0;
    *((_QWORD *)a2 + 19) = 0;
  }
  *(_BYTE *)(result + 168) = *((_BYTE *)a2 + 168);
  return result;
}

__n128 sub_20EE69A08(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 72) = 0;
  if (*(_BYTE *)(a2 + 72))
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    result = *(__n128 *)(a2 + 48);
    *(__n128 *)(a1 + 48) = result;
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a2 + 64) = 0;
    *(_BYTE *)(a1 + 72) = 1;
  }
  *(_BYTE *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  if (*(_BYTE *)(a2 + 152))
  {
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a2 + 80) = 0;
    *(_QWORD *)(a2 + 88) = 0;
    *(_QWORD *)(a2 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 120) = 0;
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a2 + 104) = 0;
    *(_QWORD *)(a2 + 112) = 0;
    *(_QWORD *)(a2 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    *(_QWORD *)(a1 + 144) = 0;
    result = *(__n128 *)(a2 + 128);
    *(__n128 *)(a1 + 128) = result;
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a2 + 128) = 0;
    *(_QWORD *)(a2 + 136) = 0;
    *(_QWORD *)(a2 + 144) = 0;
    *(_BYTE *)(a1 + 152) = 1;
  }
  *(_BYTE *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  if (*(_BYTE *)(a2 + 208))
  {
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 168) = 0;
    *(_QWORD *)(a1 + 176) = 0;
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a2 + 160) = 0;
    *(_QWORD *)(a2 + 168) = 0;
    *(_QWORD *)(a2 + 176) = 0;
    *(_QWORD *)(a1 + 184) = 0;
    *(_QWORD *)(a1 + 192) = 0;
    *(_QWORD *)(a1 + 200) = 0;
    result = *(__n128 *)(a2 + 184);
    *(__n128 *)(a1 + 184) = result;
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
    *(_QWORD *)(a2 + 184) = 0;
    *(_QWORD *)(a2 + 192) = 0;
    *(_QWORD *)(a2 + 200) = 0;
    *(_BYTE *)(a1 + 208) = 1;
  }
  return result;
}

uint64_t sub_20EE69B5C(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char v19;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  if (*(_BYTE *)(a2 + 144))
  {
    v4 = *(_OWORD *)(a2 + 56);
    v5 = *(_OWORD *)(a2 + 72);
    v6 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v6;
    *(_OWORD *)(a1 + 56) = v4;
    *(_OWORD *)(a1 + 72) = v5;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    *(_QWORD *)(a1 + 120) = 0;
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a2 + 120) = 0;
    *(_QWORD *)(a2 + 128) = 0;
    *(_QWORD *)(a2 + 136) = 0;
    *(_BYTE *)(a1 + 144) = 1;
  }
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a2 + 184) = 0;
  *(_QWORD *)(a2 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a2 + 200) = 0;
  *(_QWORD *)(a2 + 208) = 0;
  *(_QWORD *)(a2 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a2 + 224) = 0;
  *(_QWORD *)(a2 + 232) = 0;
  *(_QWORD *)(a2 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a2 + 248) = 0;
  *(_QWORD *)(a2 + 256) = 0;
  *(_QWORD *)(a2 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a2 + 272) = 0;
  *(_QWORD *)(a2 + 280) = 0;
  *(_QWORD *)(a2 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  v7 = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 304) = v7;
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a2 + 296) = 0;
  *(_QWORD *)(a2 + 304) = 0;
  *(_QWORD *)(a2 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a2 + 320) = 0;
  *(_QWORD *)(a2 + 328) = 0;
  *(_QWORD *)(a2 + 336) = 0;
  v8 = *(_OWORD *)(a2 + 344);
  *(_OWORD *)(a1 + 354) = *(_OWORD *)(a2 + 354);
  *(_OWORD *)(a1 + 344) = v8;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  v9 = *(_QWORD *)(a2 + 384);
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
  *(_QWORD *)(a1 + 384) = v9;
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
  *(_QWORD *)(a2 + 384) = 0;
  *(_QWORD *)(a2 + 392) = 0;
  *(_QWORD *)(a2 + 376) = 0;
  *(_DWORD *)(a1 + 400) = *(_DWORD *)(a2 + 400);
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  v10 = *(_QWORD *)(a2 + 416);
  *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
  *(_QWORD *)(a1 + 416) = v10;
  *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
  *(_QWORD *)(a2 + 408) = 0;
  *(_QWORD *)(a2 + 416) = 0;
  *(_QWORD *)(a2 + 424) = 0;
  *(_BYTE *)(a1 + 432) = 0;
  *(_BYTE *)(a1 + 904) = 0;
  if (*(_BYTE *)(a2 + 904))
  {
    v11 = *(_OWORD *)(a2 + 432);
    v12 = *(_OWORD *)(a2 + 448);
    *(_OWORD *)(a1 + 460) = *(_OWORD *)(a2 + 460);
    *(_OWORD *)(a1 + 432) = v11;
    *(_OWORD *)(a1 + 448) = v12;
    v13 = *(_OWORD *)(a2 + 592);
    v15 = *(_OWORD *)(a2 + 544);
    v14 = *(_OWORD *)(a2 + 560);
    *(_OWORD *)(a1 + 576) = *(_OWORD *)(a2 + 576);
    *(_OWORD *)(a1 + 592) = v13;
    *(_OWORD *)(a1 + 544) = v15;
    *(_OWORD *)(a1 + 560) = v14;
    v16 = *(_OWORD *)(a2 + 480);
    v17 = *(_OWORD *)(a2 + 496);
    v18 = *(_OWORD *)(a2 + 528);
    *(_OWORD *)(a1 + 512) = *(_OWORD *)(a2 + 512);
    *(_OWORD *)(a1 + 528) = v18;
    *(_OWORD *)(a1 + 480) = v16;
    *(_OWORD *)(a1 + 496) = v17;
    memcpy((void *)(a1 + 608), (const void *)(a2 + 608), 0x120uLL);
    v19 = *(_BYTE *)(a2 + 900);
    *(_DWORD *)(a1 + 896) = *(_DWORD *)(a2 + 896);
    *(_BYTE *)(a1 + 900) = v19;
    *(_BYTE *)(a1 + 904) = 1;
  }
  return a1;
}

void sub_20EE69DE8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9EE1C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EE69DF8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9EE1C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void **sub_20EE69E28(uint64_t a1)
{
  return sub_20EE62D7C((void **)(a1 + 24));
}

void sub_20EE69E34(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9EE210;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EE69E44(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9EE210;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EE69E74(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = a1[6];
  if (v2)
  {
    v3 = a1[7];
    v4 = (void *)a1[6];
    if (v3 != v2)
    {
      v5 = a1[7];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[6];
    }
    a1[7] = v2;
    operator delete(v4);
  }
  v8 = (void *)a1[3];
  if (v8)
  {
    a1[4] = v8;
    operator delete(v8);
  }
}

void sub_20EE69F04(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9EE260;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EE69F14(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9EE260;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EE69F44(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void (***v8)(_QWORD);
  void (***v9)(_QWORD);
  void *v10;
  void (***v11)(_QWORD);
  void (***v12)(_QWORD);
  void (**v13)(_QWORD);
  BOOL v14;
  void *v15;

  v2 = a1[9];
  if (v2)
  {
    v3 = a1[10];
    v4 = (void *)a1[9];
    if (v3 != v2)
    {
      v5 = a1[10];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[9];
    }
    a1[10] = v2;
    operator delete(v4);
  }
  v8 = (void (***)(_QWORD))a1[6];
  if (v8)
  {
    v9 = (void (***)(_QWORD))a1[7];
    v10 = (void *)a1[6];
    if (v9 != v8)
    {
      v11 = v9 - 3;
      v12 = v9 - 3;
      do
      {
        v13 = *v12;
        v12 -= 3;
        (*v13)(v11);
        v14 = v11 == v8;
        v11 = v12;
      }
      while (!v14);
      v10 = (void *)a1[6];
    }
    a1[7] = v8;
    operator delete(v10);
  }
  v15 = (void *)a1[3];
  if (v15)
  {
    a1[4] = v15;
    operator delete(v15);
  }
}

void sub_20EE6A020()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EE6A034(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9EE2B0;
  result[1] = v3;
  return result;
}

uint64_t sub_20EE6A068(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9EE2B0;
  a2[1] = v2;
  return result;
}

uint64_t sub_20EE6A084(uint64_t a1, unint64_t *a2)
{
  return sub_20F2FF5B8(*(_QWORD **)(*(_QWORD *)(a1 + 8) + 11472), *a2);
}

uint64_t sub_20EE6A094(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio11slam_engine15LocalSlamEngine10ReceiveMapERKNS0_10mapping_io16SubmapLoadBundleEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio11slam_engine15LocalSlamEngine10ReceiveMapERKNS0_10mapping_io16SubmapLoadBundleEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio11slam_engine15LocalSlamEngine10ReceiveMapERKNS0_10mapping_io16SubmapLoadBundleEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio11slam_engine15LocalSlamEngine10ReceiveMapERKNS0_10mapping_io16SubmapLoadBundleEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EE6A100()
{
  return &unk_24C9EE310;
}

void sub_20EE6A110()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EE6A124(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9EE330;
  result[1] = v3;
  return result;
}

uint64_t sub_20EE6A158(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9EE330;
  a2[1] = v2;
  return result;
}

uint64_t sub_20EE6A174(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(v1 + 11488);
  v7[0] = &off_24C9EE3B0;
  v7[1] = v1;
  v8 = v7;
  v3 = sub_20EE88A94(v2, (uint64_t)v7);
  v4 = v8;
  if (v8 == v7)
  {
    v5 = 4;
    v4 = v7;
    goto LABEL_5;
  }
  if (v8)
  {
    v5 = 5;
LABEL_5:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return v3;
}

void sub_20EE6A218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EE6A250(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio11slam_engine15LocalSlamEngine17InitMappingModuleEONSt3__110unique_ptrINS3_6vectorINS3_1"
                     "0shared_ptrINS0_13mapping_types7MapDataEEENS3_9allocatorIS9_EEEENS3_14default_deleteISC_EEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio11slam_engine15LocalSlamEngine17InitMappingModuleEONSt3__110unique_ptrINS3_6v"
                                "ectorINS3_10shared_ptrINS0_13mapping_types7MapDataEEENS3_9allocatorIS9_EEEENS3_14default"
                                "_deleteISC_EEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio11slam_engine15LocalSlamEngine17InitMappingModuleEONSt3__110unique_ptrINS3_6vectorINS3_10shared_ptrINS0_13mapping_types7MapDataEEENS3_9allocatorIS9_EEEENS3_14default_deleteISC_EEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio11slam_engine15LocalSlamEngine17InitMappingModuleEONSt3__110unique_ptrINS3_6vectorINS3_10shared_ptrINS0_13mapping_types7MapDataEEENS3_9allocatorIS9_EEEENS3_14default_deleteISC_EEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EE6A2BC()
{
  return &unk_24C9EE420;
}

void sub_20EE6A2CC()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EE6A2E0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9EE3B0;
  result[1] = v3;
  return result;
}

uint64_t sub_20EE6A314(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9EE3B0;
  a2[1] = v2;
  return result;
}

uint64_t sub_20EE6A330(uint64_t a1, unint64_t *a2)
{
  return sub_20F2FF5B8(*(_QWORD **)(*(_QWORD *)(a1 + 8) + 11472), *a2) ^ 1;
}

uint64_t sub_20EE6A354(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZN4cv3d3vio11slam_engine15LocalSlamEngine17InitMappingModuleEONSt3__110unique_ptrINS3_6vectorINS3_"
                     "10shared_ptrINS0_13mapping_types7MapDataEEENS3_9allocatorIS9_EEEENS3_14default_deleteISC_EEEEENK3$_0clEvEUlyE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZN4cv3d3vio11slam_engine15LocalSlamEngine17InitMappingModuleEONSt3__110unique_ptrINS3_6"
                                "vectorINS3_10shared_ptrINS0_13mapping_types7MapDataEEENS3_9allocatorIS9_EEEENS3_14defaul"
                                "t_deleteISC_EEEEENK3$_0clEvEUlyE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN4cv3d3vio11slam_engine15LocalSlamEngine17InitMappingModuleEONSt3__110unique_ptrINS3_6vectorINS3_10shared_ptrINS0_13mapping_types7MapDataEEENS3_9allocatorIS9_EEEENS3_14default_deleteISC_EEEEENK3$_0clEvEUlyE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN4cv3d3vio11slam_engine15LocalSlamEngine17InitMappingModuleEONSt3__110unique_ptrINS3_6vectorINS3_10shared_ptrINS0_13mapping_types7MapDataEEENS3_9allocatorIS9_EEEENS3_14default_deleteISC_EEEEENK3$_0clEvEUlyE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EE6A3C0()
{
  return &unk_24C9EE410;
}

void sub_20EE6A3D0()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EE6A3E4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9EE440;
  result[1] = v3;
  return result;
}

uint64_t sub_20EE6A418(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9EE440;
  a2[1] = v2;
  return result;
}

uint64_t sub_20EE6A434(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(v1 + 11488);
  v7[0] = &off_24C9EE4B0;
  v7[1] = v1;
  v8 = v7;
  v3 = sub_20EE88A94(v2, (uint64_t)v7);
  v4 = v8;
  if (v8 == v7)
  {
    v5 = 4;
    v4 = v7;
    goto LABEL_5;
  }
  if (v8)
  {
    v5 = 5;
LABEL_5:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return v3;
}

void sub_20EE6A4D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EE6A510(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio11slam_engine15LocalSlamEngine17InitMappingModuleEONSt3__110unique_ptrINS3_6vectorINS3_1"
                     "0shared_ptrINS0_13mapping_types7MapDataEEENS3_9allocatorIS9_EEEENS3_14default_deleteISC_EEEEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio11slam_engine15LocalSlamEngine17InitMappingModuleEONSt3__110unique_ptrINS3_6v"
                                "ectorINS3_10shared_ptrINS0_13mapping_types7MapDataEEENS3_9allocatorIS9_EEEENS3_14default"
                                "_deleteISC_EEEEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio11slam_engine15LocalSlamEngine17InitMappingModuleEONSt3__110unique_ptrINS3_6vectorINS3_10shared_ptrINS0_13mapping_types7MapDataEEENS3_9allocatorIS9_EEEENS3_14default_deleteISC_EEEEE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio11slam_engine15LocalSlamEngine17InitMappingModuleEONSt3__110unique_ptrINS3_6vectorINS3_10shared_ptrINS0_13mapping_types7MapDataEEENS3_9allocatorIS9_EEEENS3_14default_deleteISC_EEEEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EE6A57C()
{
  return &unk_24C9EE520;
}

void sub_20EE6A58C()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EE6A5A0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9EE4B0;
  result[1] = v3;
  return result;
}

uint64_t sub_20EE6A5D4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9EE4B0;
  a2[1] = v2;
  return result;
}

uint64_t sub_20EE6A5F0(uint64_t a1, unint64_t *a2)
{
  return sub_20F2FF5B8(*(_QWORD **)(*(_QWORD *)(a1 + 8) + 11472), *a2) ^ 1;
}

uint64_t sub_20EE6A614(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZN4cv3d3vio11slam_engine15LocalSlamEngine17InitMappingModuleEONSt3__110unique_ptrINS3_6vectorINS3_"
                     "10shared_ptrINS0_13mapping_types7MapDataEEENS3_9allocatorIS9_EEEENS3_14default_deleteISC_EEEEENK3$_1clEvEUlyE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZN4cv3d3vio11slam_engine15LocalSlamEngine17InitMappingModuleEONSt3__110unique_ptrINS3_6"
                                "vectorINS3_10shared_ptrINS0_13mapping_types7MapDataEEENS3_9allocatorIS9_EEEENS3_14defaul"
                                "t_deleteISC_EEEEENK3$_1clEvEUlyE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN4cv3d3vio11slam_engine15LocalSlamEngine17InitMappingModuleEONSt3__110unique_ptrINS3_6vectorINS3_10shared_ptrINS0_13mapping_types7MapDataEEENS3_9allocatorIS9_EEEENS3_14default_deleteISC_EEEEENK3$_1clEvEUlyE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN4cv3d3vio11slam_engine15LocalSlamEngine17InitMappingModuleEONSt3__110unique_ptrINS3_6vectorINS3_10shared_ptrINS0_13mapping_types7MapDataEEENS3_9allocatorIS9_EEEENS3_14default_deleteISC_EEEEENK3$_1clEvEUlyE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EE6A680()
{
  return &unk_24C9EE510;
}

void sub_20EE6A68C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _DWORD *v16;
  int64_t v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  int v27;

  v4 = sub_20E9DF85C((_QWORD *)(a1 + 24), a3);
  if (v4)
  {
    v5 = v4[7];
    if (v5)
    {
      v6 = *(char **)(a2 + 8);
      while (1)
      {
        v8 = *(_QWORD *)(a2 + 16);
        if ((unint64_t)v6 >= v8)
          break;
        *(_DWORD *)v6 = *(_DWORD *)(v5 + 16);
        v7 = (uint64_t)(v6 + 4);
LABEL_5:
        *(_QWORD *)(a2 + 8) = v7;
        v5 = *(_QWORD *)v5;
        v6 = (char *)v7;
        if (!v5)
          return;
      }
      v9 = *(char **)a2;
      v10 = (uint64_t)&v6[-*(_QWORD *)a2];
      v11 = v10 >> 2;
      v12 = (v10 >> 2) + 1;
      if (v12 >> 62)
        sub_20E867F44();
      v13 = v8 - (_QWORD)v9;
      if (v13 >> 1 > v12)
        v12 = v13 >> 1;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
        v14 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 62)
          sub_20E877A38();
        v15 = operator new(4 * v14);
        v16 = &v15[4 * v11];
        *v16 = *(_DWORD *)(v5 + 16);
        v7 = (uint64_t)(v16 + 1);
        v17 = v6 - v9;
        if (v6 == v9)
          goto LABEL_30;
      }
      else
      {
        v15 = 0;
        v16 = (_DWORD *)(4 * v11);
        *(_DWORD *)(4 * v11) = *(_DWORD *)(v5 + 16);
        v7 = 4 * v11 + 4;
        v17 = v6 - v9;
        if (v6 == v9)
          goto LABEL_30;
      }
      v18 = v17 - 4;
      if (v18 >= 0xBC)
      {
        v20 = (v6 - 4 - v9) & 0xFFFFFFFFFFFFFFFCLL;
        if (&v15[v10 - 4 - v20] > &v15[v10 - 4])
        {
          v19 = v6;
        }
        else if (&v6[-v20 - 4] > v6 - 4)
        {
          v19 = v6;
        }
        else if ((unint64_t)(v6 - v15 - v10) >= 0x20)
        {
          v21 = (v18 >> 2) + 1;
          v22 = 4 * (v21 & 0x7FFFFFFFFFFFFFF8);
          v19 = &v6[-v22];
          v16 = (_DWORD *)((char *)v16 - v22);
          v23 = &v15[4 * v11 - 16];
          v24 = v6 - 16;
          v25 = v21 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v26 = *(_OWORD *)v24;
            *(v23 - 1) = *((_OWORD *)v24 - 1);
            *v23 = v26;
            v23 -= 2;
            v24 -= 32;
            v25 -= 8;
          }
          while (v25);
          if (v21 == (v21 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_30;
        }
        else
        {
          v19 = v6;
        }
      }
      else
      {
        v19 = v6;
      }
      do
      {
        v27 = *((_DWORD *)v19 - 1);
        v19 -= 4;
        *--v16 = v27;
      }
      while (v19 != v9);
LABEL_30:
      *(_QWORD *)a2 = v16;
      *(_QWORD *)(a2 + 8) = v7;
      *(_QWORD *)(a2 + 16) = &v15[4 * v14];
      if (v9)
        operator delete(v9);
      goto LABEL_5;
    }
  }
}

void sub_20EE6A87C(uint64_t a1, __int32 **a2)
{
  uint64_t v2;
  __int32 *v3;
  int64_t v4;
  uint64_t v5;
  char **v6;
  int v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  char *v11;
  unint64_t v12;
  __int32 *v13;
  __int32 *v14;
  __int32 *v15;
  char *v16;
  char *v17;
  char *v18;
  int64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  char *v24;
  int64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  _OWORD *v30;
  char *v31;
  uint64_t v32;
  __int128 v33;
  int v34;
  __int32 *v35;
  __int32 *v36;
  __int32 *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  int64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _BYTE *v46;
  char *v47;
  int64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  _OWORD *v53;
  char *v54;
  uint64_t v55;
  __int128 v56;
  int v57;
  char *v58;
  _QWORD *v59;
  _OWORD *v60;
  int *v61;
  int v62;
  int v63;
  char *v64;
  int v65;
  char *v66;
  uint64_t v67;
  char **v68;
  char *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  int v75;
  uint64_t v76;
  char *v77;
  char *v78;
  __int128 *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  char *v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  char *v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  void *v95;
  uint64_t v96;
  char **v97;
  unint64_t v98;
  unsigned int *v99;
  unsigned int *v100;
  uint64_t v101;
  char *v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 *v106;
  char *v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  char *v112;
  char *v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  char *v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  char *v121;
  char *v122;
  uint64_t *v123;
  unsigned int *v124;
  unsigned int *v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  _BYTE *v134;
  char *v135;
  char *v136;
  unint64_t v137;
  char *v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _OWORD *v143;
  __int128 *v144;
  uint64_t v145;
  __int128 v146;
  char *v147;
  char *v148;
  void *v149;
  void *v150;
  void *v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  void *v155;
  void *v156;
  void *v157;
  uint64_t v158;
  uint64_t v159;
  void *v160;
  void *v161;
  void *v162;
  __int32 *v164;
  __int32 *v165;
  uint64_t v166;
  char *v167;
  char *v168;
  char *v169;
  char *v170;
  void *__p;
  void *v172;
  char *v173;
  uint64_t v174;
  char v175;
  void *v176;
  char *v177;
  char *v178;
  void *v179;
  char *v180;
  char *v181;
  void *v182;
  char *v183;
  char *v184;
  char *v185;
  char *v186;
  char *v187;

  v2 = a1;
  v3 = *a2;
  v165 = a2[1];
  v4 = (char *)v165 - (char *)*a2;
  v5 = v4 >> 2;
  v6 = (char **)(a1 + 72);
  if (v4 >> 2 > 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 3))
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioframe.hpp", 938, (uint64_t)"features_to_keep.size() <= image_features_.size()", 49, (uint64_t)"To many features in prune.", 26, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *a2;
    v165 = a2[1];
    v4 = (char *)v165 - (char *)*a2;
    v5 = v4 >> 2;
  }
  v185 = 0;
  v186 = 0;
  v187 = 0;
  v182 = 0;
  v183 = 0;
  v184 = 0;
  if (v5)
  {
    if (v4 < 0)
      sub_20E867F44();
    v185 = (char *)operator new(v4);
    v186 = v185;
    v187 = &v185[4 * v5];
    v182 = operator new(v4);
    v183 = (char *)v182;
    v184 = (char *)v182 + 4 * v5;
    v179 = 0;
    v180 = 0;
    v181 = 0;
    if ((unint64_t)v4 >= 0x1999999999999999)
      sub_20E867F44();
    v179 = operator new(40 * v5);
    v180 = (char *)v179;
    v181 = (char *)v179 + 40 * v5;
    v176 = 0;
    v177 = 0;
    v178 = 0;
    if ((unint64_t)v4 >= 0xFFFFFFFFFFFFFFDLL)
      sub_20ED343A8();
    v176 = operator new(16 * v4);
    v177 = (char *)v176;
    v178 = (char *)v176 + 64 * v5;
    if (v3 == v165)
      goto LABEL_101;
    goto LABEL_11;
  }
  v179 = 0;
  v180 = 0;
  v181 = 0;
  v176 = 0;
  v177 = 0;
  v178 = 0;
  if (v3 != v165)
  {
LABEL_11:
    v7 = 0;
    while (1)
    {
      v12 = *v3;
      if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v2 + 80) - *(_QWORD *)(v2 + 72)) >> 3) <= v12)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioframe.hpp", 952, (uint64_t)"(feat_idx < image_features_.size() && feat_idx >= 0)", 52, (uint64_t)"Feature out of bounds in prune.", 31, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        LODWORD(v12) = *v3;
      }
      v13 = *(__int32 **)(v2 + 536);
      v14 = wmemchr(*(__int32 **)(v2 + 528), v12, ((uint64_t)v13 - *(_QWORD *)(v2 + 528)) >> 2);
      v15 = v14 ? v14 : v13;
      if (v15 != *(__int32 **)(v2 + 536))
        break;
LABEL_43:
      v35 = *(__int32 **)(v2 + 560);
      v36 = wmemchr(*(__int32 **)(v2 + 552), *v3, ((uint64_t)v35 - *(_QWORD *)(v2 + 552)) >> 2);
      if (v36)
        v37 = v36;
      else
        v37 = v35;
      if (v37 == *(__int32 **)(v2 + 560))
        goto LABEL_69;
      v38 = v183;
      if (v183 >= v184)
      {
        v40 = (char *)v182;
        v41 = v183 - (_BYTE *)v182;
        v42 = (v183 - (_BYTE *)v182) >> 2;
        v43 = v42 + 1;
        if ((unint64_t)(v42 + 1) >> 62)
          sub_20E867F44();
        v44 = v184 - (_BYTE *)v182;
        if ((v184 - (_BYTE *)v182) >> 1 > v43)
          v43 = v44 >> 1;
        if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL)
          v45 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v45 = v43;
        if (v45)
        {
          if (v45 >> 62)
            sub_20E877A38();
          v46 = operator new(4 * v45);
          v47 = &v46[4 * v42];
          *(_DWORD *)v47 = v7;
          v39 = v47 + 4;
          v48 = v38 - v40;
          if (v38 == v40)
            goto LABEL_66;
LABEL_60:
          v49 = v48 - 4;
          if (v49 < 0x2C)
            goto LABEL_242;
          if ((unint64_t)(v38 - v46 - v41) < 0x20)
            goto LABEL_242;
          v50 = (v49 >> 2) + 1;
          v51 = 4 * (v50 & 0x7FFFFFFFFFFFFFF8);
          v52 = &v38[-v51];
          v47 -= v51;
          v53 = &v46[4 * v42 - 16];
          v54 = v38 - 16;
          v55 = v50 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v56 = *(_OWORD *)v54;
            *(v53 - 1) = *((_OWORD *)v54 - 1);
            *v53 = v56;
            v53 -= 2;
            v54 -= 32;
            v55 -= 8;
          }
          while (v55);
          v38 = v52;
          if (v50 != (v50 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_242:
            do
            {
              v57 = *((_DWORD *)v38 - 1);
              v38 -= 4;
              *((_DWORD *)v47 - 1) = v57;
              v47 -= 4;
            }
            while (v38 != v40);
          }
        }
        else
        {
          v46 = 0;
          v47 = (char *)(4 * v42);
          *(_DWORD *)(4 * v42) = v7;
          v39 = (char *)(4 * v42 + 4);
          v48 = v38 - v40;
          if (v38 != v40)
            goto LABEL_60;
        }
LABEL_66:
        v182 = v47;
        v184 = &v46[4 * v45];
        if (v40)
          operator delete(v40);
        goto LABEL_68;
      }
      *(_DWORD *)v183 = v7;
      v39 = v38 + 4;
LABEL_68:
      v183 = v39;
LABEL_69:
      v58 = &(*v6)[40 * *v3];
      v59 = v58 + 8;
      v60 = v58 + 16;
      v62 = *(_DWORD *)v58;
      v61 = (int *)(v58 + 32);
      v63 = v62;
      v64 = v180;
      if (v180 >= v181)
      {
        v164 = v3;
        v67 = v2;
        v68 = v6;
        v69 = (char *)v179;
        v70 = 0xCCCCCCCCCCCCCCCDLL * ((v180 - (_BYTE *)v179) >> 3);
        v71 = v70 + 1;
        if (v70 + 1 > 0x666666666666666)
          sub_20E867F44();
        if (0x999999999999999ALL * ((v181 - (_BYTE *)v179) >> 3) > v71)
          v71 = 0x999999999999999ALL * ((v181 - (_BYTE *)v179) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((v181 - (_BYTE *)v179) >> 3) >= 0x333333333333333)
          v72 = 0x666666666666666;
        else
          v72 = v71;
        if (v72 > 0x666666666666666)
          sub_20E877A38();
        v73 = (char *)operator new(40 * v72);
        v74 = &v73[8 * ((v180 - (_BYTE *)v179) >> 3)];
        v75 = *v61;
        *(_DWORD *)v74 = v63;
        *((_DWORD *)v74 + 1) = v7;
        *((_QWORD *)v74 + 1) = *v59;
        *((_OWORD *)v74 + 1) = *v60;
        *((_DWORD *)v74 + 8) = v75;
        if (v64 == v69)
        {
          v78 = &v73[40 * v70];
          v6 = v68;
        }
        else
        {
          v76 = 0;
          v6 = v68;
          do
          {
            v77 = &v74[v76];
            *((_QWORD *)v77 - 5) = *(_QWORD *)&v64[v76 - 40];
            *((_QWORD *)v77 - 4) = *(_QWORD *)&v64[v76 - 32];
            *(_OWORD *)(v77 - 24) = *(_OWORD *)&v64[v76 - 24];
            *((_DWORD *)v77 - 2) = *(_DWORD *)&v64[v76 - 8];
            v76 -= 40;
          }
          while (&v64[v76] != v69);
          v78 = &v74[v76];
          v64 = v69;
        }
        v2 = v67;
        v66 = v74 + 40;
        v179 = v78;
        v181 = &v73[40 * v72];
        v3 = v164;
        if (v64)
          operator delete(v64);
      }
      else
      {
        v65 = *v61;
        *(_DWORD *)v180 = v63;
        *((_DWORD *)v64 + 1) = v7;
        *((_QWORD *)v64 + 1) = *v59;
        *((_OWORD *)v64 + 1) = *v60;
        *((_DWORD *)v64 + 8) = v65;
        v66 = v64 + 40;
      }
      v180 = v66;
      v79 = (__int128 *)(*(_QWORD *)(v2 + 576) + ((unint64_t)*v3 << 6));
      v80 = v177;
      if (v177 < v178)
      {
        v8 = *v79;
        v9 = v79[1];
        v10 = v79[3];
        *((_OWORD *)v177 + 2) = v79[2];
        *((_OWORD *)v80 + 3) = v10;
        *(_OWORD *)v80 = v8;
        *((_OWORD *)v80 + 1) = v9;
        v11 = v80 + 64;
      }
      else
      {
        v81 = (char *)v176;
        v82 = (v177 - (_BYTE *)v176) >> 6;
        v83 = v82 + 1;
        if ((unint64_t)(v82 + 1) >> 58)
          sub_20ED343A8();
        v84 = v178 - (_BYTE *)v176;
        if ((v178 - (_BYTE *)v176) >> 5 > v83)
          v83 = v84 >> 5;
        if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFC0)
          v85 = 0x3FFFFFFFFFFFFFFLL;
        else
          v85 = v83;
        if (v85)
        {
          if (v85 >> 58)
            sub_20E877A38();
          v86 = (char *)operator new(v85 << 6);
        }
        else
        {
          v86 = 0;
        }
        v87 = &v86[64 * v82];
        v88 = *v79;
        v89 = v79[1];
        v90 = v79[3];
        *((_OWORD *)v87 + 2) = v79[2];
        *((_OWORD *)v87 + 3) = v90;
        *(_OWORD *)v87 = v88;
        *((_OWORD *)v87 + 1) = v89;
        v91 = v87;
        if (v80 != v81)
        {
          do
          {
            v92 = *((_OWORD *)v80 - 4);
            v93 = *((_OWORD *)v80 - 3);
            v94 = *((_OWORD *)v80 - 1);
            *((_OWORD *)v91 - 2) = *((_OWORD *)v80 - 2);
            *((_OWORD *)v91 - 1) = v94;
            *((_OWORD *)v91 - 4) = v92;
            *((_OWORD *)v91 - 3) = v93;
            v91 -= 64;
            v80 -= 64;
          }
          while (v80 != v81);
          v80 = v81;
        }
        v11 = v87 + 64;
        v176 = v91;
        v178 = &v86[64 * v85];
        if (v80)
          operator delete(v80);
      }
      v177 = v11;
      ++v3;
      ++v7;
      if (v3 == v165)
        goto LABEL_101;
    }
    v16 = v186;
    if (v186 < v187)
    {
      *(_DWORD *)v186 = v7;
      v17 = v16 + 4;
LABEL_42:
      v186 = v17;
      goto LABEL_43;
    }
    v18 = v185;
    v19 = (v186 - v185) >> 2;
    v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 62)
      sub_20E867F44();
    v21 = v187 - v185;
    if ((v187 - v185) >> 1 > v20)
      v20 = v21 >> 1;
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
      v22 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v22 = v20;
    if (v22)
    {
      if (v22 >> 62)
        sub_20E877A38();
      v23 = operator new(4 * v22);
      v24 = &v23[4 * v19];
      *(_DWORD *)v24 = v7;
      v17 = v24 + 4;
      v25 = v16 - v18;
      if (v16 == v18)
        goto LABEL_40;
    }
    else
    {
      v23 = 0;
      v24 = (char *)(4 * v19);
      *(_DWORD *)(4 * v19) = v7;
      v17 = (char *)(4 * v19 + 4);
      v25 = v16 - v18;
      if (v16 == v18)
      {
LABEL_40:
        v185 = v24;
        v187 = &v23[4 * v22];
        if (v18)
          operator delete(v18);
        goto LABEL_42;
      }
    }
    v26 = v25 - 4;
    if (v26 < 0x2C)
      goto LABEL_243;
    if ((unint64_t)(v18 - v23) < 0x20)
      goto LABEL_243;
    v27 = (v26 >> 2) + 1;
    v28 = 4 * (v27 & 0x7FFFFFFFFFFFFFF8);
    v29 = &v16[-v28];
    v24 -= v28;
    v30 = &v23[4 * v19 - 16];
    v31 = v16 - 16;
    v32 = v27 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v33 = *(_OWORD *)v31;
      *(v30 - 1) = *((_OWORD *)v31 - 1);
      *v30 = v33;
      v30 -= 2;
      v31 -= 32;
      v32 -= 8;
    }
    while (v32);
    v16 = v29;
    if (v27 != (v27 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_243:
      do
      {
        v34 = *((_DWORD *)v16 - 1);
        v16 -= 4;
        *((_DWORD *)v24 - 1) = v34;
        v24 -= 4;
      }
      while (v16 != v18);
    }
    goto LABEL_40;
  }
LABEL_101:
  if ((char **)(v2 + 528) != &v185)
    sub_20E867E00((_QWORD *)(v2 + 528), v185, v186, (v186 - v185) >> 2);
  if ((void **)(v2 + 552) != &v182)
    sub_20E867E00((_QWORD *)(v2 + 552), (char *)v182, v183, (v183 - (_BYTE *)v182) >> 2);
  v95 = v179;
  v96 = (uint64_t)v180;
  v97 = v6;
  v98 = 0xCCCCCCCCCCCCCCCDLL * ((v180 - (_BYTE *)v179) >> 3);
  v180 = 0;
  v181 = 0;
  v179 = 0;
  sub_20EE6BAB0((uint64_t)v97, v98);
  sub_20EE6BBB4(v97, (uint64_t)v95, v96, v98);
  *(_BYTE *)(v2 + 104) = 1;
  if (v95)
    operator delete(v95);
  __p = v176;
  v172 = v177;
  v173 = v178;
  v174 = (v177 - (_BYTE *)v176) >> 6;
  v176 = 0;
  v177 = 0;
  v178 = 0;
  v175 = 1;
  sub_20EE6B810(v2 + 576, (uint64_t)&__p);
  if (__p)
  {
    v172 = __p;
    operator delete(__p);
  }
  if (*(_QWORD *)(v2 + 616) == *(_QWORD *)(v2 + 624))
    goto LABEL_136;
  v100 = (unsigned int *)*a2;
  v99 = (unsigned int *)a2[1];
  v101 = (char *)v99 - (char *)*a2;
  if (v99 == (unsigned int *)*a2)
  {
    v122 = 0;
    v121 = 0;
    v102 = 0;
    goto LABEL_134;
  }
  if ((unint64_t)v101 >= 0xFFFFFFFFFFFFFFDLL)
    sub_20ED343A8();
  v102 = (char *)operator new(16 * v101);
  v167 = v102;
  v169 = &v102[64 * (v101 >> 2)];
  do
  {
    while (1)
    {
      while (1)
      {
        v106 = (__int128 *)(*(_QWORD *)(v2 + 616) + ((unint64_t)*v100 << 6));
        if (v102 >= v169)
          break;
        v103 = *v106;
        v104 = v106[1];
        v105 = v106[3];
        *((_OWORD *)v102 + 2) = v106[2];
        *((_OWORD *)v102 + 3) = v105;
        *(_OWORD *)v102 = v103;
        *((_OWORD *)v102 + 1) = v104;
        v102 += 64;
        if (++v100 == v99)
          goto LABEL_132;
      }
      v107 = v167;
      v108 = (v102 - v167) >> 6;
      v109 = v108 + 1;
      if ((unint64_t)(v108 + 1) >> 58)
        sub_20ED343A8();
      v110 = v169 - v167;
      if ((v169 - v167) >> 5 > v109)
        v109 = v110 >> 5;
      if ((unint64_t)v110 >= 0x7FFFFFFFFFFFFFC0)
        v111 = 0x3FFFFFFFFFFFFFFLL;
      else
        v111 = v109;
      if (v111)
      {
        if (v111 >> 58)
          sub_20E877A38();
        v112 = (char *)operator new(v111 << 6);
      }
      else
      {
        v112 = 0;
      }
      v113 = &v112[64 * v108];
      v114 = *v106;
      v115 = v106[1];
      v116 = v106[3];
      *((_OWORD *)v113 + 2) = v106[2];
      *((_OWORD *)v113 + 3) = v116;
      *(_OWORD *)v113 = v114;
      *((_OWORD *)v113 + 1) = v115;
      v117 = v113 + 64;
      if (v102 == v167)
      {
        v167 = &v112[64 * v108];
        v107 = v102;
        v169 = &v112[64 * v111];
        break;
      }
      do
      {
        v118 = *((_OWORD *)v102 - 4);
        v119 = *((_OWORD *)v102 - 3);
        v120 = *((_OWORD *)v102 - 1);
        *((_OWORD *)v113 - 2) = *((_OWORD *)v102 - 2);
        *((_OWORD *)v113 - 1) = v120;
        *((_OWORD *)v113 - 4) = v118;
        *((_OWORD *)v113 - 3) = v119;
        v113 -= 64;
        v102 -= 64;
      }
      while (v102 != v167);
      v167 = v113;
      v169 = &v112[64 * v111];
      if (v107)
        break;
      v102 = v117;
      if (++v100 == v99)
        goto LABEL_132;
    }
    operator delete(v107);
    v102 = v117;
    ++v100;
  }
  while (v100 != v99);
LABEL_132:
  v121 = v167;
  v122 = v169;
LABEL_134:
  __p = v121;
  v172 = v102;
  v173 = v122;
  v174 = (v102 - v121) >> 6;
  v175 = 1;
  sub_20EE6B810(v2 + 616, (uint64_t)&__p);
  if (__p)
  {
    v172 = __p;
    operator delete(__p);
  }
LABEL_136:
  if (*(_QWORD *)(v2 + 656) == *(_QWORD *)(v2 + 664))
    goto LABEL_176;
  v166 = v2;
  v123 = (uint64_t *)(v2 + 656);
  v125 = (unsigned int *)*a2;
  v124 = (unsigned int *)a2[1];
  v126 = (char *)v124 - (char *)*a2;
  if (v124 == (unsigned int *)*a2)
  {
    v148 = 0;
    v147 = 0;
    v127 = 0;
    goto LABEL_174;
  }
  if ((unint64_t)v126 >= 0x7FFFFFFFFFFFFFFDLL)
    sub_20E867F44();
  v127 = (char *)operator new(2 * v126);
  v168 = v127;
  v170 = &v127[8 * (v126 >> 2)];
  while (1)
  {
LABEL_141:
    while (1)
    {
      v128 = *v125;
      v129 = *v123;
      if (v127 >= v170)
        break;
      *(_QWORD *)v127 = *(_QWORD *)(v129 + 8 * v128);
      v127 += 8;
      if (++v125 == v124)
        goto LABEL_172;
    }
    v130 = (v127 - v168) >> 3;
    v131 = v130 + 1;
    if ((unint64_t)(v130 + 1) >> 61)
      sub_20E867F44();
    v132 = v170 - v168;
    if ((v170 - v168) >> 2 > v131)
      v131 = v132 >> 2;
    v133 = (unint64_t)v132 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v131;
    if (v133)
    {
      if (v133 >> 61)
        sub_20E877A38();
      v134 = operator new(8 * v133);
    }
    else
    {
      v134 = 0;
    }
    v135 = &v134[8 * v130];
    *(_QWORD *)v135 = *(_QWORD *)(v129 + 8 * v128);
    v136 = v135 + 8;
    if (v127 == v168)
      break;
    v137 = v127 - v168 - 8;
    if (v137 < 0x168)
    {
      v138 = v127;
      goto LABEL_155;
    }
    v140 = (v127 - 8 - v168) & 0xFFFFFFFFFFFFFFF8;
    if (&v134[v127 - v168 - 8 - v140] > &v134[v127 - v168 - 8])
    {
      v138 = v127;
      do
      {
LABEL_155:
        v139 = *((_QWORD *)v138 - 1);
        v138 -= 8;
        *((_QWORD *)v135 - 1) = v139;
        v135 -= 8;
      }
      while (v138 != v168);
      goto LABEL_156;
    }
    if (&v127[-v140 - 8] > v127 - 8)
    {
      v138 = v127;
      goto LABEL_155;
    }
    if ((unint64_t)(v168 - v134) < 0x20)
    {
      v138 = v127;
      goto LABEL_155;
    }
    v141 = (v137 >> 3) + 1;
    v142 = 8 * (v141 & 0x3FFFFFFFFFFFFFFCLL);
    v138 = &v127[-v142];
    v135 -= v142;
    v143 = &v134[8 * v130 - 16];
    v144 = (__int128 *)(v127 - 16);
    v145 = v141 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v146 = *v144;
      *(v143 - 1) = *(v144 - 1);
      *v143 = v146;
      v143 -= 2;
      v144 -= 2;
      v145 -= 4;
    }
    while (v145);
    if (v141 != (v141 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_155;
LABEL_156:
    v127 = v168;
    v168 = v135;
    v170 = &v134[8 * v133];
    if (v127)
      goto LABEL_160;
    v127 = v136;
    if (++v125 == v124)
      goto LABEL_172;
  }
  v168 = &v134[8 * v130];
  v170 = &v134[8 * v133];
LABEL_160:
  operator delete(v127);
  v127 = v136;
  if (++v125 != v124)
    goto LABEL_141;
LABEL_172:
  v147 = v168;
  v148 = v170;
LABEL_174:
  __p = v147;
  v172 = v127;
  v173 = v148;
  v174 = (v127 - v147) >> 3;
  v175 = 1;
  sub_20EE6B930((uint64_t)v123, (uint64_t)&__p);
  v2 = v166;
  if (__p)
  {
    v172 = __p;
    operator delete(__p);
  }
LABEL_176:
  if (*(_BYTE *)(v2 + 280))
  {
    sub_20E990EA4((uint64_t *)(v2 + 232));
    v149 = *(void **)(v2 + 208);
    if (v149)
    {
      *(_QWORD *)(v2 + 216) = v149;
      operator delete(v149);
    }
    v150 = *(void **)(v2 + 128);
    if (v150)
    {
      *(_QWORD *)(v2 + 136) = v150;
      operator delete(v150);
    }
    *(_BYTE *)(v2 + 280) = 0;
  }
  if (*(_BYTE *)(v2 + 456))
  {
    sub_20E990EA4((uint64_t *)(v2 + 408));
    v151 = *(void **)(v2 + 384);
    if (v151)
    {
      *(_QWORD *)(v2 + 392) = v151;
      operator delete(v151);
    }
    v152 = *(void **)(v2 + 304);
    if (v152)
    {
      *(_QWORD *)(v2 + 312) = v152;
      operator delete(v152);
    }
    *(_BYTE *)(v2 + 456) = 0;
  }
  if (*(_BYTE *)(v2 + 488))
  {
    v153 = *(_QWORD *)(v2 + 464);
    if (v153)
    {
      v154 = *(_QWORD *)(v2 + 472);
      v155 = *(void **)(v2 + 464);
      if (v154 != v153)
      {
        do
        {
          v156 = *(void **)(v154 - 32);
          if (v156)
          {
            *(_QWORD *)(v154 - 24) = v156;
            operator delete(v156);
          }
          v157 = *(void **)(v154 - 56);
          if (v157)
          {
            *(_QWORD *)(v154 - 48) = v157;
            operator delete(v157);
          }
          v154 -= 64;
        }
        while (v154 != v153);
        v155 = *(void **)(v2 + 464);
      }
      *(_QWORD *)(v2 + 472) = v153;
      operator delete(v155);
    }
    *(_BYTE *)(v2 + 488) = 0;
  }
  if (*(_BYTE *)(v2 + 520))
  {
    v158 = *(_QWORD *)(v2 + 496);
    if (v158)
    {
      v159 = *(_QWORD *)(v2 + 504);
      v160 = *(void **)(v2 + 496);
      if (v159 != v158)
      {
        do
        {
          v161 = *(void **)(v159 - 32);
          if (v161)
          {
            *(_QWORD *)(v159 - 24) = v161;
            operator delete(v161);
          }
          v162 = *(void **)(v159 - 56);
          if (v162)
          {
            *(_QWORD *)(v159 - 48) = v162;
            operator delete(v162);
          }
          v159 -= 64;
        }
        while (v159 != v158);
        v160 = *(void **)(v2 + 496);
      }
      *(_QWORD *)(v2 + 504) = v158;
      operator delete(v160);
    }
    *(_BYTE *)(v2 + 520) = 0;
  }
  if (v176)
  {
    v177 = (char *)v176;
    operator delete(v176);
  }
  if (v179)
  {
    v180 = (char *)v179;
    operator delete(v179);
  }
  if (v182)
  {
    v183 = (char *)v182;
    operator delete(v182);
  }
  if (v185)
  {
    v186 = v185;
    operator delete(v185);
  }
}

void sub_20EE6B6E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  uint64_t v27;
  void *v29;
  void *v30;
  void *v31;

  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  if (a20)
  {
    operator delete(a20);
    v29 = a23;
    if (!a23)
    {
LABEL_7:
      v30 = a26;
      if (!a26)
        goto LABEL_8;
      goto LABEL_12;
    }
  }
  else
  {
    v29 = a23;
    if (!a23)
      goto LABEL_7;
  }
  operator delete(v29);
  v30 = a26;
  if (!a26)
  {
LABEL_8:
    v31 = *(void **)(v27 - 128);
    if (!v31)
      goto LABEL_9;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v30);
  v31 = *(void **)(v27 - 128);
  if (!v31)
LABEL_9:
    _Unwind_Resume(exception_object);
LABEL_13:
  *(_QWORD *)(v27 - 120) = v31;
  operator delete(v31);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EE6B810(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  if (a1 != a2)
  {
    v4 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(a1 + 32))
    {
      v5 = *(_BYTE **)a1;
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1;
      *(_BYTE *)(a1 + 32) = 0;
      *(_QWORD *)(a1 + 24) = v4;
      if (v4 <= (uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v5) >> 6)
        goto LABEL_12;
    }
    else
    {
      v5 = *(_BYTE **)a1;
      *(_QWORD *)(a1 + 24) = v4;
      if (v4 <= (uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v5) >> 6)
      {
LABEL_12:
        *(_BYTE *)(a1 + 32) = 1;
        sub_20EDB61CC((_QWORD *)a1, *(char **)a2, *(char **)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 6);
        *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
        return a1;
      }
    }
    if (v4 >> 58)
      sub_20ED343A8();
    v6 = *(_BYTE **)(a1 + 8);
    v7 = v4 << 6;
    v8 = (char *)operator new(v4 << 6);
    v9 = &v8[(v6 - v5) & 0xFFFFFFFFFFFFFFC0];
    v10 = v9;
    if (v6 != v5)
    {
      v11 = &v8[(v6 - v5) & 0xFFFFFFFFFFFFFFC0];
      do
      {
        v12 = *((_OWORD *)v6 - 4);
        v13 = *((_OWORD *)v6 - 3);
        v14 = *((_OWORD *)v6 - 1);
        v10 = v11 - 64;
        *((_OWORD *)v11 - 2) = *((_OWORD *)v6 - 2);
        *((_OWORD *)v11 - 1) = v14;
        *((_OWORD *)v11 - 4) = v12;
        *((_OWORD *)v11 - 3) = v13;
        v6 -= 64;
        v11 -= 64;
      }
      while (v6 != v5);
    }
    *(_QWORD *)a1 = v10;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = &v8[v7];
    if (v5)
      operator delete(v5);
    goto LABEL_12;
  }
  return a1;
}

uint64_t sub_20EE6B930(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  __int128 *v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;

  if (a1 != a2)
  {
    v4 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(a1 + 32))
    {
      v5 = *(_BYTE **)a1;
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1;
      *(_BYTE *)(a1 + 32) = 0;
      *(_QWORD *)(a1 + 24) = v4;
      if (v4 <= (uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v5) >> 3)
        goto LABEL_17;
    }
    else
    {
      v5 = *(_BYTE **)a1;
      *(_QWORD *)(a1 + 24) = v4;
      if (v4 <= (uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v5) >> 3)
      {
LABEL_17:
        *(_BYTE *)(a1 + 32) = 1;
        sub_20E86811C((_QWORD *)a1, *(char **)a2, *(char **)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
        *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
        return a1;
      }
    }
    if (v4 >> 61)
      sub_20E867F44();
    v6 = *(_BYTE **)(a1 + 8);
    v7 = 8 * v4;
    v8 = (char *)operator new(8 * v4);
    v9 = v6 - v5;
    v10 = &v8[(v6 - v5) & 0xFFFFFFFFFFFFFFF8];
    v11 = v10;
    if (v6 != v5)
    {
      if ((unint64_t)(v9 - 8) < 0x58)
      {
        v11 = &v8[(v6 - v5) & 0xFFFFFFFFFFFFFFF8];
        do
        {
LABEL_14:
          v20 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *((_QWORD *)v11 - 1) = v20;
          v11 -= 8;
        }
        while (v6 != v5);
        goto LABEL_15;
      }
      v11 = &v8[(v6 - v5) & 0xFFFFFFFFFFFFFFF8];
      if ((unint64_t)(v6 - &v8[v9 & 0xFFFFFFFFFFFFFFF8]) < 0x20)
        goto LABEL_14;
      v12 = v9 >> 3;
      v13 = ((unint64_t)(v9 - 8) >> 3) + 1;
      v14 = 8 * (v13 & 0x3FFFFFFFFFFFFFFCLL);
      v15 = &v6[-v14];
      v11 = &v10[-v14];
      v16 = &v8[8 * v12 - 16];
      v17 = (__int128 *)(v6 - 16);
      v18 = v13 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v19 = *v17;
        *((_OWORD *)v16 - 1) = *(v17 - 1);
        *(_OWORD *)v16 = v19;
        v16 -= 32;
        v17 -= 2;
        v18 -= 4;
      }
      while (v18);
      v6 = v15;
      if (v13 != (v13 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_14;
    }
LABEL_15:
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v10;
    *(_QWORD *)(a1 + 16) = &v8[v7];
    if (v5)
      operator delete(v5);
    goto LABEL_17;
  }
  return a1;
}

void sub_20EE6BAB0(uint64_t a1, unint64_t a2)
{
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;

  v3 = *(_BYTE **)a1;
  if (*(_BYTE *)(a1 + 32))
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1;
    *(_BYTE *)(a1 + 32) = 0;
  }
  *(_QWORD *)(a1 + 24) = a2;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v3) >> 3) < a2)
  {
    if (a2 >= 0x666666666666667)
      sub_20E867F44();
    v4 = *(_BYTE **)(a1 + 8);
    v5 = 40 * a2;
    v6 = (char *)operator new(40 * a2);
    v7 = &v6[v4 - v3];
    v8 = v7;
    if (v4 != v3)
    {
      v9 = 0;
      do
      {
        v10 = &v7[v9];
        *((_QWORD *)v10 - 5) = *(_QWORD *)&v4[v9 - 40];
        *((_QWORD *)v10 - 4) = *(_QWORD *)&v4[v9 - 32];
        *(_OWORD *)(v10 - 24) = *(_OWORD *)&v4[v9 - 24];
        *((_DWORD *)v10 - 2) = *(_DWORD *)&v4[v9 - 8];
        v9 -= 40;
      }
      while (&v4[v9] != v3);
      v8 = &v7[v9];
    }
    *(_QWORD *)a1 = v8;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = &v6[v5];
    if (v3)
      operator delete(v3);
  }
  *(_BYTE *)(a1 + 32) = 1;
}

char *sub_20EE6BBB4(char **a1, uint64_t a2, uint64_t a3, size_t __sz)
{
  uint64_t v6;
  uint64_t v8;
  char *result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  __int128 v15;
  char *v16;
  char **v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  _QWORD *v22;
  char *v23;
  _QWORD *v24;

  v6 = a2;
  v8 = (uint64_t)a1[2];
  result = *a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - (uint64_t)result) >> 3) >= __sz)
  {
    v18 = a1[1];
    v17 = a1 + 1;
    v16 = v18;
    v19 = 0xCCCCCCCCCCCCCCCDLL * ((v18 - result) >> 3);
    if (v19 >= __sz)
    {
      v23 = result;
      if (a2 != a3)
      {
        v24 = result;
        do
        {
          *v24 = *(_QWORD *)v6;
          v24[1] = *(_QWORD *)(v6 + 8);
          *((_OWORD *)v24 + 1) = *(_OWORD *)(v6 + 16);
          *((_DWORD *)v24 + 8) = *(_DWORD *)(v6 + 32);
          v23 += 40;
          v6 += 40;
          v24 += 5;
        }
        while (v6 != a3);
      }
      *v17 = v23;
    }
    else
    {
      v20 = a2 + 40 * v19;
      if (v16 != result)
      {
        do
        {
          *(_QWORD *)result = *(_QWORD *)v6;
          *((_QWORD *)result + 1) = *(_QWORD *)(v6 + 8);
          *((_OWORD *)result + 1) = *(_OWORD *)(v6 + 16);
          *((_DWORD *)result + 8) = *(_DWORD *)(v6 + 32);
          v6 += 40;
          result += 40;
        }
        while (v6 != v20);
        result = *v17;
      }
      v21 = result;
      if (v20 != a3)
      {
        v21 = result;
        v22 = result;
        do
        {
          *v22 = *(_QWORD *)v20;
          v22[1] = *(_QWORD *)(v20 + 8);
          *((_OWORD *)v22 + 1) = *(_OWORD *)(v20 + 16);
          *((_DWORD *)v22 + 8) = *(_DWORD *)(v20 + 32);
          v21 += 40;
          v20 += 40;
          v22 += 5;
        }
        while (v20 != a3);
      }
      *v17 = v21;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0x666666666666666)
      goto LABEL_27;
    v10 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= __sz)
      v11 = __sz;
    v12 = v10 >= 0x333333333333333 ? 0x666666666666666 : v11;
    if (v12 > 0x666666666666666)
LABEL_27:
      sub_20E867F44();
    v13 = 40 * v12;
    result = (char *)operator new(40 * v12);
    *a1 = result;
    a1[1] = result;
    a1[2] = &result[v13];
    v14 = result;
    if (v6 != a3)
    {
      v14 = result;
      do
      {
        v15 = *(_OWORD *)(v6 + 16);
        *v14 = *(_OWORD *)v6;
        v14[1] = v15;
        *((_DWORD *)v14 + 8) = *(_DWORD *)(v6 + 32);
        v14 = (_OWORD *)((char *)v14 + 40);
        v6 += 40;
      }
      while (v6 != a3);
    }
    a1[1] = (char *)v14;
  }
  return result;
}

void sub_20EE6BDF0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v6;
  std::__shared_weak_count *v7;
  int v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  __int128 v17;
  int v18;

  v3 = (_QWORD *)a1[2];
  if (v3)
  {
    if (!a1[1] || (v6 = *a1, (v7 = std::__shared_weak_count::lock((std::__shared_weak_count *)a1[1])) == 0))
      sub_20EE6CA64();
    v16 = v7;
    v8 = *(_DWORD *)(*(_QWORD *)a3 + 4);
    *(_QWORD *)&v17 = v6;
    *((_QWORD *)&v17 + 1) = v7;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v18 = v8;
    sub_20EE6C0E8(v3, a2, &v17);
    v11 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
    if (*((_QWORD *)&v17 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v14 = (unint64_t *)&v16->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_20EE6BF3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  uint64_t v8;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  sub_20E86665C((uint64_t)va2);
  sub_20E86665C((uint64_t)va1);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EE6BF60(_QWORD *a1, uint64_t *a2, unsigned int a3)
{
  uint64_t *result;
  unint64_t v5;
  _QWORD *v6;
  uint8x8_t v7;
  unint64_t v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  void *__p;
  char v19;

  result = sub_20E9DF85C(a1, a2);
  if (!result)
    return result;
  v5 = result[6];
  if (!v5)
    return 0;
  v6 = result + 5;
  v7 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = a3;
    if (v5 <= a3)
      v8 = a3 % v5;
  }
  else
  {
    v8 = ((_DWORD)v5 - 1) & a3;
  }
  v9 = *(uint64_t ***)(*v6 + 8 * v8);
  if (!v9)
    return 0;
  v10 = *v9;
  if (!*v9)
    return 0;
  if (v7.u32[0] < 2uLL)
  {
    v11 = v5 - 1;
    while (1)
    {
      v13 = v10[1];
      if (v13 == a3)
      {
        if (*((_DWORD *)v10 + 4) == a3)
          goto LABEL_25;
      }
      else if ((v13 & v11) != v8)
      {
        return 0;
      }
      v10 = (uint64_t *)*v10;
      if (!v10)
        return 0;
    }
  }
  while (1)
  {
    v12 = v10[1];
    if (v12 == a3)
      break;
    if (v12 >= v5)
      v12 %= v5;
    if (v12 != v8)
      return 0;
LABEL_14:
    v10 = (uint64_t *)*v10;
    if (!v10)
      return 0;
  }
  if (*((_DWORD *)v10 + 4) != a3)
    goto LABEL_14;
LABEL_25:
  sub_20E8D2CE8(v6, v10, (uint64_t)&__p);
  v14 = __p;
  __p = 0;
  if (v14)
  {
    if (v19)
    {
      v15 = (std::__shared_weak_count *)v14[4];
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
    operator delete(v14);
  }
  return (uint64_t *)1;
}

void sub_20EE6C0E8(_QWORD *a1, uint64_t *a2, __int128 *a3)
{
  uint64_t *v6;
  int v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  float v12;
  uint64_t v13;
  unint64_t prime;
  int8x8_t v15;
  size_t v16;
  uint8x8_t v17;
  uint64_t v18;
  size_t v19;
  int v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 *v23;
  __int128 v24;
  int v25;

  v6 = sub_20E9DF85C(a1, a2);
  if (v6)
  {
    LODWORD(v23) = *((_DWORD *)a3 + 4);
    v7 = (int)v23;
    v24 = *a3;
    *(_QWORD *)a3 = 0;
    *((_QWORD *)a3 + 1) = 0;
    v25 = v7;
    sub_20EE6C30C((uint64_t)(v6 + 5), (unsigned int *)&v23, (uint64_t)&v23);
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
    if (!*((_QWORD *)&v24 + 1))
      return;
    v9 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (v10)
      return;
LABEL_29:
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    return;
  }
  v23 = (__int128 *)a2;
  v11 = sub_20EE6C64C((uint64_t)a1, a2, (uint64_t)&unk_2102DB95C, &v23);
  v12 = (float)(unint64_t)a1[5];
  v13 = (uint64_t)(v11 + 40);
  prime = vcvtps_u32_f32(v12 / *((float *)v11 + 18));
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
  }
  v15 = *(int8x8_t *)(v11 + 48);
  if (prime > *(_QWORD *)&v15)
    goto LABEL_12;
  if (prime >= *(_QWORD *)&v15)
    goto LABEL_25;
  v16 = vcvtps_u32_f32((float)*((unint64_t *)v11 + 8) / *((float *)v11 + 18));
  if (*(_QWORD *)&v15 >= 3uLL)
  {
    v17 = (uint8x8_t)vcnt_s8(v15);
    v17.i16[0] = vaddlv_u8(v17);
    if (v17.u32[0] <= 1uLL)
    {
      v18 = 1 << -(char)__clz(v16 - 1);
      if (v16 >= 2)
        v16 = v18;
      if (prime <= v16)
        prime = v16;
      if (prime >= *(_QWORD *)&v15)
        goto LABEL_25;
LABEL_12:
      sub_20E8D2B3C(v13, prime);
      goto LABEL_25;
    }
  }
  v19 = std::__next_prime(v16);
  if (prime <= v19)
    prime = v19;
  if (prime < *(_QWORD *)&v15)
    goto LABEL_12;
LABEL_25:
  LODWORD(v23) = *((_DWORD *)a3 + 4);
  v20 = (int)v23;
  v24 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v25 = v20;
  sub_20EE6C30C(v13, (unsigned int *)&v23, (uint64_t)&v23);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
  if (*((_QWORD *)&v24 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
      goto LABEL_29;
  }
}

void sub_20EE6C2E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E8C2824((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EE6C2F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E8C2824((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_20EE6C30C(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  uint64_t v16;
  _QWORD *v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  int8x8_t v22;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  unint64_t v26;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (char *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = *((_QWORD *)v10 + 1);
            if (v12 == v6)
            {
              if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = *(char **)v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = *((_QWORD *)v10 + 1);
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v13 = (_QWORD *)(a1 + 16);
  v10 = (char *)operator new(0x30uLL);
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = v6;
  *((_DWORD *)v10 + 4) = *(_DWORD *)a3;
  *(_OWORD *)(v10 + 24) = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *((_DWORD *)v10 + 10) = *(_DWORD *)(a3 + 24);
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v16 = *(_QWORD *)a1;
    v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v17)
    {
LABEL_26:
      *(_QWORD *)v10 = *v17;
LABEL_61:
      *v17 = v10;
      goto LABEL_62;
    }
  }
  else
  {
    v18 = 1;
    if (v7 >= 3)
      v18 = (v7 & (v7 - 1)) != 0;
    v19 = v18 | (2 * v7);
    v20 = vcvtps_u32_f32(v14 / v15);
    if (v19 <= v20)
      prime = v20;
    else
      prime = v19;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v22 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v22)
      goto LABEL_37;
    if (prime < *(_QWORD *)&v22)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v22 < 3uLL || (v24 = (uint8x8_t)vcnt_s8(v22), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < *(_QWORD *)&v22)
LABEL_37:
        sub_20E8D2B3C(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
      {
        v3 = v6 % v7;
        v16 = *(_QWORD *)a1;
        v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
        if (v17)
          goto LABEL_26;
      }
      else
      {
        v3 = v6;
        v16 = *(_QWORD *)a1;
        v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
        if (v17)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
      v16 = *(_QWORD *)a1;
      v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
      if (v17)
        goto LABEL_26;
    }
  }
  *(_QWORD *)v10 = *v13;
  *v13 = v10;
  *(_QWORD *)(v16 + 8 * v3) = v13;
  if (*(_QWORD *)v10)
  {
    v26 = *(_QWORD *)(*(_QWORD *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v26 >= v7)
        v26 %= v7;
    }
    else
    {
      v26 &= v7 - 1;
    }
    v17 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_20EE6C638(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20EC3E960((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_20EE6C64C(uint64_t a1, uint64_t *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  int v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  void **v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  __int128 v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t prime;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;

  v7 = *((_DWORD *)a2 + 4);
  v8 = *((_DWORD *)a2 + 2);
  v9 = v8 ^ __ROR4__(v7, 13);
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v10 <= v9)
        v4 = v9 % v10;
    }
    else
    {
      v4 = ((_DWORD)v10 - 1) & v9;
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      v13 = (char *)*v12;
      if (*v12)
      {
        v14 = *a2;
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = *((_QWORD *)v13 + 1);
            if (v16 == v9)
            {
              if (*((_DWORD *)v13 + 8) == v7 && *((_QWORD *)v13 + 2) == v14 && *((_DWORD *)v13 + 6) == v8)
                return v13;
            }
            else if ((v16 & (v10 - 1)) != v4)
            {
              goto LABEL_27;
            }
            v13 = *(char **)v13;
            if (!v13)
              goto LABEL_27;
          }
        }
        do
        {
          v15 = *((_QWORD *)v13 + 1);
          if (v15 == v9)
          {
            if (*((_DWORD *)v13 + 8) == v7 && *((_QWORD *)v13 + 2) == v14 && *((_DWORD *)v13 + 6) == v8)
              return v13;
          }
          else
          {
            if (v15 >= v10)
              v15 %= v10;
            if (v15 != v4)
              break;
          }
          v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
LABEL_27:
  v17 = (_QWORD *)(a1 + 16);
  v13 = (char *)operator new(0x50uLL);
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = v9;
  v18 = **a4;
  *((_QWORD *)v13 + 4) = *((_QWORD *)*a4 + 2);
  *((_OWORD *)v13 + 1) = v18;
  *(_OWORD *)(v13 + 40) = 0u;
  *(_OWORD *)(v13 + 56) = 0u;
  *((_DWORD *)v13 + 18) = 1065353216;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (v10 && (float)(v20 * (float)v10) >= v19)
  {
    v9 = v4;
  }
  else
  {
    v21 = 1;
    if (v10 >= 3)
      v21 = (v10 & (v10 - 1)) != 0;
    v22 = v21 | (2 * v10);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      prime = v23;
    else
      prime = v22;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v10 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v10)
      goto LABEL_40;
    if (prime < v10)
    {
      v25 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        v25 = std::__next_prime(v25);
      }
      else
      {
        v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2)
          v25 = v27;
      }
      if (prime <= v25)
        prime = v25;
      if (prime < v10)
LABEL_40:
        sub_20E8D2B3C(a1, prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v10 <= v9)
        v9 %= v10;
    }
    else
    {
      v9 = ((_DWORD)v10 - 1) & v9;
    }
  }
  v28 = *(_QWORD *)a1;
  v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
  if (v29)
  {
    *(_QWORD *)v13 = *v29;
LABEL_63:
    *v29 = v13;
    goto LABEL_64;
  }
  *(_QWORD *)v13 = *v17;
  *v17 = v13;
  *(_QWORD *)(v28 + 8 * v9) = v17;
  if (*(_QWORD *)v13)
  {
    v30 = *(_QWORD *)(*(_QWORD *)v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v30 >= v10)
        v30 %= v10;
    }
    else
    {
      v30 &= v10 - 1;
    }
    v29 = (_QWORD *)(*(_QWORD *)a1 + 8 * v30);
    goto LABEL_63;
  }
LABEL_64:
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_20EE6C99C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20EE6C9B0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE6C9B0(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (_QWORD *)v2[7];
      while (v3)
      {
        v6 = v3;
        v3 = (_QWORD *)*v3;
        v7 = (std::__shared_weak_count *)v6[4];
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v9 = __ldaxr(p_shared_owners);
          while (__stlxr(v9 - 1, p_shared_owners));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        operator delete(v6);
      }
      v4 = (void *)v2[5];
      v2[5] = 0;
      if (v4)
        operator delete(v4);
    }
    operator delete(v2);
  }
  return a1;
}

void sub_20EE6CA64()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB808] + 16;
  __cxa_throw(exception, MEMORY[0x24BEDB6D8], MEMORY[0x24BEDAC00]);
}

uint64_t sub_20EE6CA98(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  char v27;

  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  sub_20EE6CD04((_QWORD *)(a1 + 40), (uint64_t *)a2 + 5);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  sub_20EE6CF40(a1 + 64, *((_QWORD *)a2 + 8), *((_QWORD *)a2 + 9), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)a2 + 9) - *((_QWORD *)a2 + 8)) >> 4));
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v7 = (_BYTE *)*((_QWORD *)a2 + 11);
  v6 = (_BYTE *)*((_QWORD *)a2 + 12);
  v8 = v6 - v7;
  if (v6 != v7)
  {
    if (v8 < 0)
      sub_20E867F44();
    v9 = (char *)operator new(v6 - v7);
    *(_QWORD *)(a1 + 88) = v9;
    *(_QWORD *)(a1 + 96) = v9;
    v10 = &v9[8 * (v8 >> 3)];
    *(_QWORD *)(a1 + 104) = v10;
    memcpy(v9, v7, v8);
    *(_QWORD *)(a1 + 96) = v10;
  }
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  v11 = *((_QWORD *)a2 + 14);
  v12 = *((_QWORD *)a2 + 15);
  v13 = v12 - v11;
  if (v12 != v11)
  {
    v14 = 0xCBEEA4E1A08AD8F3 * (v13 >> 3);
    if (v14 >= 0x8AD8F2FBA93869)
      sub_20E867F44();
    v15 = (char *)operator new(v13);
    v16 = 0;
    *(_QWORD *)(a1 + 112) = v15;
    *(_QWORD *)(a1 + 120) = v15;
    *(_QWORD *)(a1 + 128) = &v15[472 * v14];
    do
    {
      v17 = v11 + v16;
      v18 = &v15[v16];
      v19 = *(_OWORD *)(v11 + v16);
      v20 = *(_OWORD *)(v11 + v16 + 16);
      *(_OWORD *)(v18 + 28) = *(_OWORD *)(v11 + v16 + 28);
      *(_OWORD *)v18 = v19;
      *((_OWORD *)v18 + 1) = v20;
      v21 = *(_OWORD *)(v11 + v16 + 160);
      v23 = *(_OWORD *)(v11 + v16 + 112);
      v22 = *(_OWORD *)(v11 + v16 + 128);
      *((_OWORD *)v18 + 9) = *(_OWORD *)(v11 + v16 + 144);
      *((_OWORD *)v18 + 10) = v21;
      *((_OWORD *)v18 + 7) = v23;
      *((_OWORD *)v18 + 8) = v22;
      v24 = *(_OWORD *)(v11 + v16 + 48);
      v25 = *(_OWORD *)(v11 + v16 + 64);
      v26 = *(_OWORD *)(v11 + v16 + 96);
      *((_OWORD *)v18 + 5) = *(_OWORD *)(v11 + v16 + 80);
      *((_OWORD *)v18 + 6) = v26;
      *((_OWORD *)v18 + 3) = v24;
      *((_OWORD *)v18 + 4) = v25;
      memcpy(&v15[v16 + 176], (const void *)(v11 + v16 + 176), 0x120uLL);
      v27 = *(_BYTE *)(v11 + v16 + 468);
      *((_DWORD *)v18 + 116) = *(_DWORD *)(v11 + v16 + 464);
      v18[468] = v27;
      v16 += 472;
    }
    while (v17 + 472 != v12);
    *(_QWORD *)(a1 + 120) = &v15[v16];
  }
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  sub_20EE6D488(a1 + 136, *((_QWORD *)a2 + 17), *((_QWORD *)a2 + 18), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)a2 + 18) - *((_QWORD *)a2 + 17)) >> 3));
  *(_WORD *)(a1 + 160) = *((_WORD *)a2 + 80);
  return a1;
}

void sub_20EE6CCA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10)
{
  uint64_t v10;
  void **v11;
  void **v12;
  void *v14;
  void *v15;

  v14 = *v12;
  if (*v12)
  {
    *(_QWORD *)(v10 + 120) = v14;
    operator delete(v14);
  }
  v15 = *v11;
  if (*v11)
  {
    *(_QWORD *)(v10 + 96) = v15;
    operator delete(v15);
  }
  sub_20EAB9BFC(a9);
  sub_20E9DD680(a10);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EE6CD04(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  _QWORD *v8;

  a1[2] = 0;
  v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = v5 - *a2;
  if (v5 != *a2)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    if (v7 >= 0xAAAAAAAAAAAAAABLL)
      sub_20E867F44();
    v8 = operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[3 * v7];
    a1[1] = sub_20EE6CE10(v3, v4, v5, v8);
  }
  return a1;
}

void sub_20EE6CDAC(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v2;
  char *v4;
  char *v5;
  void *v6;
  char *v7;
  void *v8;
  void *v9;

  v1[1] = v2;
  v4 = (char *)*v1;
  if (*v1)
  {
    v5 = (char *)v1[1];
    v6 = *v1;
    if (v5 != v4)
    {
      v7 = (char *)v1[1];
      do
      {
        v9 = (void *)*((_QWORD *)v7 - 3);
        v7 -= 24;
        v8 = v9;
        if (v9)
        {
          *((_QWORD *)v5 - 2) = v8;
          operator delete(v8);
        }
        v5 = v7;
      }
      while (v7 != v4);
      v6 = *v1;
    }
    v1[1] = v4;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EE6CE10(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  const void *v9;
  int64_t v10;
  char *v11;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      v9 = *(const void **)v6;
      v8 = *(_QWORD *)(v6 + 8);
      v10 = v8 - *(_QWORD *)v6;
      if (v8 != *(_QWORD *)v6)
      {
        if (0xAAAAAAAAAAAAAAABLL * (v10 >> 3) >= 0xAAAAAAAAAAAAAABLL)
          sub_20E867F44();
        v11 = (char *)operator new(v10);
        *a4 = v11;
        a4[1] = v11;
        v7 = &v11[8 * (v10 >> 3)];
        a4[2] = v7;
        memcpy(v11, v9, v10 - 4);
        a4[1] = v7;
      }
      a4 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_20EE6CF08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E96AC74((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EE6CF1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_20E96AC74((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE6CF40(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;

  if (a4)
  {
    v5 = (_QWORD *)result;
    if (a4 >= 0x24924924924924ALL)
      sub_20E867F44();
    result = (uint64_t)operator new(112 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = result + 112 * a4;
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = sub_20EE6D044(v8 + v9, a2 + v9);
        v9 += 112;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_20EE6D000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20EACFB10(&a9);
  _Unwind_Resume(a1);
}

void sub_20EE6D014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  for (; v11; v11 -= 112)
    sub_20E991750((void **)(v10 - 112 + v11));
  *(_QWORD *)(v9 + 8) = v10;
  sub_20EACFB10(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE6D044(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  int64_t v12;
  char *v13;
  char *v14;
  _BYTE *v15;
  _BYTE *v16;
  int64_t v17;
  char *v18;
  char *v19;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  sub_20EE6D234(a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4));
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v5 = *(_BYTE **)(a2 + 24);
  v4 = *(_BYTE **)(a2 + 32);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      sub_20E867F44();
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a1 + 24) = v7;
    *(_QWORD *)(a1 + 32) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a1 + 40) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a1 + 32) = v8;
  }
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v11 = *(_BYTE **)(a2 + 56);
  v10 = *(_BYTE **)(a2 + 64);
  v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0)
      sub_20E867F44();
    v13 = (char *)operator new(v10 - v11);
    *(_QWORD *)(a1 + 56) = v13;
    *(_QWORD *)(a1 + 64) = v13;
    v14 = &v13[4 * (v12 >> 2)];
    *(_QWORD *)(a1 + 72) = v14;
    memcpy(v13, v11, v12);
    *(_QWORD *)(a1 + 64) = v14;
  }
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  v16 = *(_BYTE **)(a2 + 80);
  v15 = *(_BYTE **)(a2 + 88);
  v17 = v15 - v16;
  if (v15 != v16)
  {
    if (v17 < 0)
      sub_20E867F44();
    v18 = (char *)operator new(v15 - v16);
    *(_QWORD *)(a1 + 80) = v18;
    *(_QWORD *)(a1 + 88) = v18;
    v19 = &v18[4 * (v17 >> 2)];
    *(_QWORD *)(a1 + 96) = v19;
    memcpy(v18, v16, v17);
    *(_QWORD *)(a1 + 88) = v19;
  }
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  return a1;
}

void sub_20EE6D1B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void *v6;
  void *v7;
  void *v8;

  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 88) = v6;
    operator delete(v6);
    v7 = *v3;
    if (!*v3)
    {
LABEL_3:
      v8 = *v2;
      if (!*v2)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v7 = *v3;
    if (!*v3)
      goto LABEL_3;
  }
  *(_QWORD *)(v1 + 64) = v7;
  operator delete(v7);
  v8 = *v2;
  if (!*v2)
  {
LABEL_4:
    sub_20EAB9C54((void **)v1);
    _Unwind_Resume(a1);
  }
LABEL_7:
  *(_QWORD *)(v1 + 32) = v8;
  operator delete(v8);
  sub_20EAB9C54((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE6D234(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a4)
  {
    v5 = (_QWORD *)result;
    if (a4 >= 0x24924924924924ALL)
      sub_20E867F44();
    result = (uint64_t)operator new(112 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = result + 112 * a4;
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        v10 = v8 + v9;
        *(_OWORD *)v10 = *(_OWORD *)(a2 + v9);
        *(_QWORD *)(v10 + 16) = *(_QWORD *)(a2 + v9 + 16);
        result = sub_20EE6D370(v8 + v9 + 24, (__int128 *)(a2 + v9 + 24));
        v9 += 112;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_20EE6D30C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20EACFF80(&a9);
  _Unwind_Resume(a1);
}

void sub_20EE6D320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  void *v14;
  void *v15;

  for (; v11; v11 -= 112)
  {
    v13 = v10 + v11;
    v14 = *(void **)(v10 + v11 - 24);
    if (v14)
    {
      *(_QWORD *)(v13 - 16) = v14;
      operator delete(v14);
    }
    v15 = *(void **)(v13 - 48);
    if (v15)
    {
      *(_QWORD *)(v10 + v11 - 40) = v15;
      operator delete(v15);
    }
  }
  *(_QWORD *)(v9 + 8) = v10;
  sub_20EACFF80(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE6D370(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  char *v9;
  char *v10;
  _BYTE *v11;
  _BYTE *v12;
  int64_t v13;
  char *v14;
  char *v15;

  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v7 = (_BYTE *)*((_QWORD *)a2 + 5);
  v6 = (_BYTE *)*((_QWORD *)a2 + 6);
  v8 = v6 - v7;
  if (v6 != v7)
  {
    if (v8 < 0)
      sub_20E867F44();
    v9 = (char *)operator new(v6 - v7);
    *(_QWORD *)(a1 + 40) = v9;
    *(_QWORD *)(a1 + 48) = v9;
    v10 = &v9[4 * (v8 >> 2)];
    *(_QWORD *)(a1 + 56) = v10;
    memcpy(v9, v7, v8);
    *(_QWORD *)(a1 + 48) = v10;
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  v12 = (_BYTE *)*((_QWORD *)a2 + 8);
  v11 = (_BYTE *)*((_QWORD *)a2 + 9);
  v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0)
      sub_20E867F44();
    v14 = (char *)operator new(v11 - v12);
    *(_QWORD *)(a1 + 64) = v14;
    *(_QWORD *)(a1 + 72) = v14;
    v15 = &v14[4 * (v13 >> 2)];
    *(_QWORD *)(a1 + 80) = v15;
    memcpy(v14, v12, v13);
    *(_QWORD *)(a1 + 72) = v15;
  }
  return a1;
}

void sub_20EE6D454(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 72) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 48) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EE6D488(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;

  if (a4)
  {
    v5 = (_QWORD *)result;
    if (a4 >= 0x492492492492493)
      sub_20E867F44();
    result = (uint64_t)operator new(56 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = result + 56 * a4;
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = sub_20EE6D5A0(v8 + v9, a2 + v9);
        v9 += 56;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_20EE6D558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20EAD0024(&a9);
  _Unwind_Resume(a1);
}

void sub_20EE6D56C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_20EE6D7E0(v11, v12, v12, v10, v10);
  *(_QWORD *)(v9 + 8) = v10;
  sub_20EAD0024(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EE6D5A0(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  sub_20EE6D6C8(a1 + 8, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3));
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v5 = *(_BYTE **)(a2 + 32);
  v4 = *(_BYTE **)(a2 + 40);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      sub_20E867F44();
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a1 + 32) = v7;
    *(_QWORD *)(a1 + 40) = v7;
    v8 = &v7[4 * (v6 >> 2)];
    *(_QWORD *)(a1 + 48) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a1 + 40) = v8;
  }
  return a1;
}

void sub_20EE6D65C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void *v6;
  void **v7;
  void **v8;
  void *v9;
  void **v10;

  v4 = v3;
  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 40) = v6;
    operator delete(v6);
    v7 = (void **)*v2;
    if (!*v2)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v7 = (void **)*v2;
    if (!*v2)
      goto LABEL_3;
  }
  v8 = *(void ***)(v1 + 16);
  v9 = v7;
  if (v8 != v7)
  {
    do
    {
      v10 = v8 - 17;
      sub_20E991750(v8 - 14);
      v8 = v10;
    }
    while (v10 != v7);
    v9 = *v2;
  }
  *(_QWORD *)(v1 + 16) = v7;
  operator delete(v9);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EE6D6C8(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a4)
  {
    v5 = (_QWORD *)result;
    if (a4 >= 0x1E1E1E1E1E1E1E2)
      sub_20E867F44();
    result = (uint64_t)operator new(136 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = result + 136 * a4;
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        v10 = v8 + v9;
        *(_OWORD *)v10 = *(_OWORD *)(a2 + v9);
        *(_QWORD *)(v10 + 16) = *(_QWORD *)(a2 + v9 + 16);
        result = sub_20EE6D044(v8 + v9 + 24, a2 + v9 + 24);
        v9 += 136;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_20EE6D79C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20EAD0078(&a9);
  _Unwind_Resume(a1);
}

void sub_20EE6D7B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  for (; v11; v11 -= 136)
    sub_20E991750((void **)(v10 - 112 + v11));
  *(_QWORD *)(v9 + 8) = v10;
  sub_20EAD0078(&a9);
  _Unwind_Resume(a1);
}

void sub_20EE6D7E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;

  if (a3 != a5)
  {
    v6 = a3;
    do
    {
      v8 = *(void **)(v6 - 24);
      if (v8)
      {
        *(_QWORD *)(v6 - 16) = v8;
        operator delete(v8);
      }
      v9 = *(_QWORD *)(v6 - 48);
      if (v9)
      {
        v10 = *(_QWORD *)(v6 - 40);
        v7 = *(void **)(v6 - 48);
        if (v10 != v9)
        {
          do
          {
            v12 = *(void **)(v10 - 32);
            if (v12)
            {
              *(_QWORD *)(v10 - 24) = v12;
              operator delete(v12);
            }
            v13 = *(void **)(v10 - 56);
            if (v13)
            {
              *(_QWORD *)(v10 - 48) = v13;
              operator delete(v13);
            }
            v14 = *(void **)(v10 - 88);
            if (v14)
            {
              *(_QWORD *)(v10 - 80) = v14;
              operator delete(v14);
            }
            v15 = *(_QWORD *)(v10 - 112);
            if (v15)
            {
              v16 = *(_QWORD *)(v10 - 104);
              v11 = *(void **)(v10 - 112);
              if (v16 != v15)
              {
                do
                {
                  v17 = *(void **)(v16 - 24);
                  if (v17)
                  {
                    *(_QWORD *)(v16 - 16) = v17;
                    operator delete(v17);
                  }
                  v18 = *(void **)(v16 - 48);
                  if (v18)
                  {
                    *(_QWORD *)(v16 - 40) = v18;
                    operator delete(v18);
                  }
                  v16 -= 112;
                }
                while (v16 != v15);
                v11 = *(void **)(v10 - 112);
              }
              *(_QWORD *)(v10 - 104) = v15;
              operator delete(v11);
            }
            v10 -= 136;
          }
          while (v10 != v9);
          v7 = *(void **)(v6 - 48);
        }
        *(_QWORD *)(v6 - 40) = v9;
        operator delete(v7);
      }
      v6 -= 56;
    }
    while (v6 != a5);
  }
}

void sub_20EE6D8F8()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EE6D90C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9EE540;
  result[1] = v3;
  return result;
}

uint64_t sub_20EE6D940(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9EE540;
  a2[1] = v2;
  return result;
}

void sub_20EE6D95C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  uint64_t v5;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  float64x2_t *v14;
  uint64_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  void **v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void **v25;
  void **v26;
  unint64_t v27;
  void **v28;
  char **v29;
  unint64_t v30;
  char **v31;
  unint64_t v32;
  uint64_t v33;
  void **v34;
  void **v35;
  unint64_t v36;
  void **v37;
  uint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t i;
  float64x2_t v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  double v92;
  char v93;

  v1 = *(_QWORD *)(a1 + 8);
  sub_20F01F8D8(*(_QWORD **)(v1 + 11464));
  v2 = *(_QWORD *)(v1 + 11464);
  v3 = *(_QWORD *)(v1 + 11488);
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v5 = *(_QWORD *)(v3 + 160);
  __asm { FMOV            V1.2D, #1.0 }
  v71 = _Q1;
  v72 = 0x3FF0000000000000;
  v73 = 0uLL;
  v74 = 0;
  v75 = _Q1;
  v78 = 0;
  v81 = 0;
  v77 = 0u;
  v80 = 0u;
  v83 = 0u;
  v76 = 0x3FF0000000000000;
  v79 = 0x3FF0000000000000;
  v84 = 0;
  v82 = 0x3FF0000000000000;
  v87 = 0;
  v89 = 0u;
  v85 = _Q1;
  v86 = 0u;
  v90 = 0;
  v91 = 0x3FF0000000000000;
  v88 = 0x3FF0000000000000;
  v10 = *(_OWORD *)(v3 + 120);
  v66 = *(float64x2_t *)(v3 + 104);
  v67 = v10;
  v69 = *(_QWORD *)(v3 + 152);
  v68 = *(_OWORD *)(v3 + 136);
  v70 = v5;
  sub_20EB842DC((uint64_t)&v66, (float64x2_t *)(v3 + 632));
  v75 = *(_OWORD *)(v3 + 704);
  v72 = *(_QWORD *)(v3 + 744);
  v11 = *(_QWORD *)(v3 + 720);
  v71 = *(_OWORD *)(v3 + 728);
  v77 = *(_OWORD *)(v3 + 752);
  v12 = *(_QWORD *)(v3 + 768);
  v76 = v11;
  v78 = v12;
  v74 = *(_QWORD *)(v3 + 792);
  v73 = *(_OWORD *)(v3 + 776);
  v13 = sub_210219C18();
  v92 = (double)(std::chrono::steady_clock::now().__d_.__rep_ - rep) / 1000000.0;
  sub_20E9BA7EC((uint64_t)&v93, (uint64_t)v13, 0xEEEEB0B5B2B2EEEELL, (uint64_t *)&v92);
  sub_20F01F9A4(v2, (uint64_t *)(v3 + 2512), v3 + 2536, (__int128 *)&v66);
  v14 = *(float64x2_t **)(v1 + 11488);
  v15 = *(_QWORD *)(v1 + 8);
  v16.f64[0] = v14[45].f64[0];
  v17 = v14[44];
  v18.f64[0] = *(float64_t *)(v15 + 648);
  *(_QWORD *)&v18.f64[0] = *(_OWORD *)&vsubq_f64(v16, v18);
  _D5 = vsubq_f64(v17, *(float64x2_t *)(v15 + 632)).f64[1];
  __asm { FMLA            D4, D5, V3.D[1] }
  if (vmlad_n_f64(_D4, v18.f64[0], v18.f64[0]) > 1.0e-20)
  {
    *(float64_t *)&v67 = v14[45].f64[0];
    *(_QWORD *)&v17.f64[1] = vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u64[0];
    v66 = v17;
    (*(void (**)(uint64_t, float64x2_t *))(*(_QWORD *)v1 + 352))(v1, &v66);
  }
  v21 = *(void ***)(v1 + 11576);
  v22 = *(_QWORD *)(v1 + 11584);
  *(_QWORD *)(v1 + 11608) = 0;
  v23 = v22 - (_QWORD)v21;
  if (v23 >= 0x11)
  {
    do
    {
      operator delete(*v21);
      v21 = (void **)(*(_QWORD *)(v1 + 11576) + 8);
      *(_QWORD *)(v1 + 11576) = v21;
      v23 = *(_QWORD *)(v1 + 11584) - (_QWORD)v21;
    }
    while (v23 > 0x10);
  }
  if (v23 >> 3 == 1)
  {
    v24 = 12;
  }
  else
  {
    if (v23 >> 3 != 2)
      goto LABEL_10;
    v24 = 25;
  }
  *(_QWORD *)(v1 + 11600) = v24;
LABEL_10:
  v25 = *(void ***)(v1 + 11624);
  v26 = *(void ***)(v1 + 11632);
  if (v26 == v25)
  {
    *(_QWORD *)(v1 + 11656) = 0;
    v32 = 0;
  }
  else
  {
    v27 = *(_QWORD *)(v1 + 11648);
    v28 = &v25[v27 / 0x1E];
    v29 = (char **)((char *)*v28 + 136 * (v27 % 0x1E));
    v30 = (unint64_t)v25[(*(_QWORD *)(v1 + 11656) + v27) / 0x1E] + 136 * ((*(_QWORD *)(v1 + 11656) + v27) % 0x1E);
    if (v29 != (char **)v30)
    {
      do
      {
        v29 = sub_20EE630A8(v29) + 17;
        if ((char *)v29 - (_BYTE *)*v28 == 4080)
        {
          v31 = (char **)v28[1];
          ++v28;
          v29 = v31;
        }
      }
      while (v29 != (char **)v30);
      v26 = *(void ***)(v1 + 11632);
      v25 = *(void ***)(v1 + 11624);
    }
    *(_QWORD *)(v1 + 11656) = 0;
    v32 = (char *)v26 - (char *)v25;
    if (v32 >= 0x11)
    {
      do
      {
        operator delete(*v25);
        v25 = (void **)(*(_QWORD *)(v1 + 11624) + 8);
        *(_QWORD *)(v1 + 11624) = v25;
        v32 = *(_QWORD *)(v1 + 11632) - (_QWORD)v25;
      }
      while (v32 > 0x10);
    }
  }
  if (v32 >> 3 == 1)
  {
    v33 = 15;
    goto LABEL_24;
  }
  if (v32 >> 3 == 2)
  {
    v33 = 30;
LABEL_24:
    *(_QWORD *)(v1 + 11648) = v33;
  }
  v34 = *(void ***)(v1 + 11672);
  v35 = *(void ***)(v1 + 11680);
  if (v35 == v34)
  {
    *(_QWORD *)(v1 + 11704) = 0;
    v44 = 0;
    goto LABEL_40;
  }
  v36 = *(_QWORD *)(v1 + 11696);
  v37 = &v34[v36 >> 8];
  v38 = (uint64_t)*v37 + 16 * v36;
  v39 = *(uint64_t *)((char *)v34 + (((*(_QWORD *)(v1 + 11704) + v36) >> 5) & 0x7FFFFFFFFFFFFF8))
      + 16 * (*(_BYTE *)(v1 + 11704) + v36);
  if (v38 == v39)
    goto LABEL_38;
  do
  {
    v40 = *(std::__shared_weak_count **)(v38 + 8);
    if (!v40)
      goto LABEL_33;
    p_shared_owners = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldaxr(p_shared_owners);
    while (__stlxr(v42 - 1, p_shared_owners));
    if (v42)
    {
LABEL_33:
      v38 += 16;
      if (v38 - (_QWORD)*v37 != 4096)
        continue;
LABEL_34:
      v43 = (uint64_t)v37[1];
      ++v37;
      v38 = v43;
      continue;
    }
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
    v38 += 16;
    if (v38 - (_QWORD)*v37 == 4096)
      goto LABEL_34;
  }
  while (v38 != v39);
  v35 = *(void ***)(v1 + 11680);
  v34 = *(void ***)(v1 + 11672);
LABEL_38:
  *(_QWORD *)(v1 + 11704) = 0;
  v44 = (char *)v35 - (char *)v34;
  if (v44 >= 0x11)
  {
    do
    {
      operator delete(*v34);
      v34 = (void **)(*(_QWORD *)(v1 + 11672) + 8);
      *(_QWORD *)(v1 + 11672) = v34;
      v44 = *(_QWORD *)(v1 + 11680) - (_QWORD)v34;
    }
    while (v44 > 0x10);
  }
LABEL_40:
  if (v44 >> 3 == 1)
  {
    v45 = 128;
LABEL_45:
    *(_QWORD *)(v1 + 11696) = v45;
  }
  else if (v44 >> 3 == 2)
  {
    v45 = 256;
    goto LABEL_45;
  }
  v46 = *(_QWORD *)(v1 + 11888);
  v47 = *(_QWORD *)(v1 + 11880);
  v48 = (v46 - v47) >> 4;
  if (v46 == v47)
  {
    *(_QWORD *)(v1 + 11888) = v47;
    v49 = (v47 - v46) >> 4;
    _CF = v48 >= v49;
    v51 = v48 - v49;
    if (v48 > v49)
      goto LABEL_48;
LABEL_56:
    if (!_CF)
    {
      v56 = v46 + 16 * v48;
      while (v47 != v56)
      {
        v57 = *(std::__shared_weak_count **)(v47 - 8);
        if (v57)
        {
          v58 = (unint64_t *)&v57->__shared_owners_;
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v57->__on_zero_shared)(v57, v51);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        v47 -= 16;
      }
      *(_QWORD *)(v1 + 11888) = v56;
    }
  }
  else
  {
    do
    {
      v52 = *(std::__shared_weak_count **)(v46 - 8);
      if (v52)
      {
        v53 = (unint64_t *)&v52->__shared_owners_;
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
      }
      v46 -= 16;
    }
    while (v46 != v47);
    v46 = *(_QWORD *)(v1 + 11880);
    *(_QWORD *)(v1 + 11888) = v47;
    v55 = (v47 - v46) >> 4;
    _CF = v48 >= v55;
    v51 = v48 - v55;
    if (v48 <= v55)
      goto LABEL_56;
LABEL_48:
    sub_20EE68A10(v1 + 11880, v51);
  }
  *(_QWORD *)(v1 + 11912) = 0;
  *(_QWORD *)(v1 + 11904) = 0;
  *(_QWORD *)(v1 + 11920) = 0;
  v60 = *(_QWORD *)(v1 + 16);
  if (v60)
    sub_20FDB31D4(v60);
  if (*(_BYTE *)(v1 + 50))
  {
    if (!*(_BYTE *)(v1 + 8587)
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/SlamEngine/src/LocalSlamEngine.cpp", 1754, (uint64_t)"this->config_.mapping_manager_config.enable_submapping", 54, (uint64_t)"Reset mapping module only supports submapping mode", 50, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    if (*(_BYTE *)(v1 + 8705))
    {
      v61 = *(_QWORD **)(v1 + 11472);
      sub_20F2E5E94(v61);
      if (v61[3])
      {
        v62 = (_QWORD *)v61[2];
        if (v62)
        {
          do
          {
            v63 = (_QWORD *)*v62;
            sub_20F3122B4((uint64_t)(v62 + 3));
            operator delete(v62);
            v62 = v63;
          }
          while (v63);
        }
        v61[2] = 0;
        v64 = v61[1];
        if (v64)
        {
          for (i = 0; i != v64; ++i)
            *(_QWORD *)(*v61 + 8 * i) = 0;
        }
        v61[3] = 0;
      }
    }
    if (*(_BYTE *)(v1 + 8728))
      sub_20F2F1704(*(_QWORD *)(v1 + 11472));
  }
  if (*(_BYTE *)(v1 + 12128))
    *(_BYTE *)(v1 + 12128) = 0;
}

